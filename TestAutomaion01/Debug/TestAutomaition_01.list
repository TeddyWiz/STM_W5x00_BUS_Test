
TestAutomaition_01.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000002cc  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00006e98  080002cc  080002cc  000102cc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000038  08007164  08007164  00017164  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  0800719c  0800719c  0001719c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000004  080071a4  080071a4  000171a4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .fini_array   00000004  080071a8  080071a8  000171a8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .data         00000010  20000000  080071ac  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .RxDecripSection 00000060  20000010  080071bc  00020010  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .TxDecripSection 00000060  20000070  0800721c  00020070  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000248  200000d0  0800727c  000200d0  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000318  0800727c  00020318  2**0
                  ALLOC
 11 .ARM.attributes 0000002e  00000000  00000000  000200d0  2**0
                  CONTENTS, READONLY
 12 .debug_info   000209ba  00000000  00000000  000200fe  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00003187  00000000  00000000  00040ab8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000fd8  00000000  00000000  00043c40  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000ef0  00000000  00000000  00044c18  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000339ba  00000000  00000000  00045b08  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00014f16  00000000  00000000  000794c2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0014e338  00000000  00000000  0008e3d8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  001dc710  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000042e0  00000000  00000000  001dc764  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080002cc <__do_global_dtors_aux>:
 80002cc:	b510      	push	{r4, lr}
 80002ce:	4c05      	ldr	r4, [pc, #20]	; (80002e4 <__do_global_dtors_aux+0x18>)
 80002d0:	7823      	ldrb	r3, [r4, #0]
 80002d2:	b933      	cbnz	r3, 80002e2 <__do_global_dtors_aux+0x16>
 80002d4:	4b04      	ldr	r3, [pc, #16]	; (80002e8 <__do_global_dtors_aux+0x1c>)
 80002d6:	b113      	cbz	r3, 80002de <__do_global_dtors_aux+0x12>
 80002d8:	4804      	ldr	r0, [pc, #16]	; (80002ec <__do_global_dtors_aux+0x20>)
 80002da:	f3af 8000 	nop.w
 80002de:	2301      	movs	r3, #1
 80002e0:	7023      	strb	r3, [r4, #0]
 80002e2:	bd10      	pop	{r4, pc}
 80002e4:	200000d0 	.word	0x200000d0
 80002e8:	00000000 	.word	0x00000000
 80002ec:	0800714c 	.word	0x0800714c

080002f0 <frame_dummy>:
 80002f0:	b508      	push	{r3, lr}
 80002f2:	4b03      	ldr	r3, [pc, #12]	; (8000300 <frame_dummy+0x10>)
 80002f4:	b11b      	cbz	r3, 80002fe <frame_dummy+0xe>
 80002f6:	4903      	ldr	r1, [pc, #12]	; (8000304 <frame_dummy+0x14>)
 80002f8:	4803      	ldr	r0, [pc, #12]	; (8000308 <frame_dummy+0x18>)
 80002fa:	f3af 8000 	nop.w
 80002fe:	bd08      	pop	{r3, pc}
 8000300:	00000000 	.word	0x00000000
 8000304:	200000d4 	.word	0x200000d4
 8000308:	0800714c 	.word	0x0800714c

0800030c <__aeabi_uldivmod>:
 800030c:	b953      	cbnz	r3, 8000324 <__aeabi_uldivmod+0x18>
 800030e:	b94a      	cbnz	r2, 8000324 <__aeabi_uldivmod+0x18>
 8000310:	2900      	cmp	r1, #0
 8000312:	bf08      	it	eq
 8000314:	2800      	cmpeq	r0, #0
 8000316:	bf1c      	itt	ne
 8000318:	f04f 31ff 	movne.w	r1, #4294967295
 800031c:	f04f 30ff 	movne.w	r0, #4294967295
 8000320:	f000 b96e 	b.w	8000600 <__aeabi_idiv0>
 8000324:	f1ad 0c08 	sub.w	ip, sp, #8
 8000328:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 800032c:	f000 f806 	bl	800033c <__udivmoddi4>
 8000330:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000334:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000338:	b004      	add	sp, #16
 800033a:	4770      	bx	lr

0800033c <__udivmoddi4>:
 800033c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000340:	9d08      	ldr	r5, [sp, #32]
 8000342:	4604      	mov	r4, r0
 8000344:	468c      	mov	ip, r1
 8000346:	2b00      	cmp	r3, #0
 8000348:	f040 8083 	bne.w	8000452 <__udivmoddi4+0x116>
 800034c:	428a      	cmp	r2, r1
 800034e:	4617      	mov	r7, r2
 8000350:	d947      	bls.n	80003e2 <__udivmoddi4+0xa6>
 8000352:	fab2 f282 	clz	r2, r2
 8000356:	b142      	cbz	r2, 800036a <__udivmoddi4+0x2e>
 8000358:	f1c2 0020 	rsb	r0, r2, #32
 800035c:	fa24 f000 	lsr.w	r0, r4, r0
 8000360:	4091      	lsls	r1, r2
 8000362:	4097      	lsls	r7, r2
 8000364:	ea40 0c01 	orr.w	ip, r0, r1
 8000368:	4094      	lsls	r4, r2
 800036a:	ea4f 4817 	mov.w	r8, r7, lsr #16
 800036e:	0c23      	lsrs	r3, r4, #16
 8000370:	fbbc f6f8 	udiv	r6, ip, r8
 8000374:	fa1f fe87 	uxth.w	lr, r7
 8000378:	fb08 c116 	mls	r1, r8, r6, ip
 800037c:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000380:	fb06 f10e 	mul.w	r1, r6, lr
 8000384:	4299      	cmp	r1, r3
 8000386:	d909      	bls.n	800039c <__udivmoddi4+0x60>
 8000388:	18fb      	adds	r3, r7, r3
 800038a:	f106 30ff 	add.w	r0, r6, #4294967295
 800038e:	f080 8119 	bcs.w	80005c4 <__udivmoddi4+0x288>
 8000392:	4299      	cmp	r1, r3
 8000394:	f240 8116 	bls.w	80005c4 <__udivmoddi4+0x288>
 8000398:	3e02      	subs	r6, #2
 800039a:	443b      	add	r3, r7
 800039c:	1a5b      	subs	r3, r3, r1
 800039e:	b2a4      	uxth	r4, r4
 80003a0:	fbb3 f0f8 	udiv	r0, r3, r8
 80003a4:	fb08 3310 	mls	r3, r8, r0, r3
 80003a8:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 80003ac:	fb00 fe0e 	mul.w	lr, r0, lr
 80003b0:	45a6      	cmp	lr, r4
 80003b2:	d909      	bls.n	80003c8 <__udivmoddi4+0x8c>
 80003b4:	193c      	adds	r4, r7, r4
 80003b6:	f100 33ff 	add.w	r3, r0, #4294967295
 80003ba:	f080 8105 	bcs.w	80005c8 <__udivmoddi4+0x28c>
 80003be:	45a6      	cmp	lr, r4
 80003c0:	f240 8102 	bls.w	80005c8 <__udivmoddi4+0x28c>
 80003c4:	3802      	subs	r0, #2
 80003c6:	443c      	add	r4, r7
 80003c8:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 80003cc:	eba4 040e 	sub.w	r4, r4, lr
 80003d0:	2600      	movs	r6, #0
 80003d2:	b11d      	cbz	r5, 80003dc <__udivmoddi4+0xa0>
 80003d4:	40d4      	lsrs	r4, r2
 80003d6:	2300      	movs	r3, #0
 80003d8:	e9c5 4300 	strd	r4, r3, [r5]
 80003dc:	4631      	mov	r1, r6
 80003de:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003e2:	b902      	cbnz	r2, 80003e6 <__udivmoddi4+0xaa>
 80003e4:	deff      	udf	#255	; 0xff
 80003e6:	fab2 f282 	clz	r2, r2
 80003ea:	2a00      	cmp	r2, #0
 80003ec:	d150      	bne.n	8000490 <__udivmoddi4+0x154>
 80003ee:	1bcb      	subs	r3, r1, r7
 80003f0:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80003f4:	fa1f f887 	uxth.w	r8, r7
 80003f8:	2601      	movs	r6, #1
 80003fa:	fbb3 fcfe 	udiv	ip, r3, lr
 80003fe:	0c21      	lsrs	r1, r4, #16
 8000400:	fb0e 331c 	mls	r3, lr, ip, r3
 8000404:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000408:	fb08 f30c 	mul.w	r3, r8, ip
 800040c:	428b      	cmp	r3, r1
 800040e:	d907      	bls.n	8000420 <__udivmoddi4+0xe4>
 8000410:	1879      	adds	r1, r7, r1
 8000412:	f10c 30ff 	add.w	r0, ip, #4294967295
 8000416:	d202      	bcs.n	800041e <__udivmoddi4+0xe2>
 8000418:	428b      	cmp	r3, r1
 800041a:	f200 80e9 	bhi.w	80005f0 <__udivmoddi4+0x2b4>
 800041e:	4684      	mov	ip, r0
 8000420:	1ac9      	subs	r1, r1, r3
 8000422:	b2a3      	uxth	r3, r4
 8000424:	fbb1 f0fe 	udiv	r0, r1, lr
 8000428:	fb0e 1110 	mls	r1, lr, r0, r1
 800042c:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 8000430:	fb08 f800 	mul.w	r8, r8, r0
 8000434:	45a0      	cmp	r8, r4
 8000436:	d907      	bls.n	8000448 <__udivmoddi4+0x10c>
 8000438:	193c      	adds	r4, r7, r4
 800043a:	f100 33ff 	add.w	r3, r0, #4294967295
 800043e:	d202      	bcs.n	8000446 <__udivmoddi4+0x10a>
 8000440:	45a0      	cmp	r8, r4
 8000442:	f200 80d9 	bhi.w	80005f8 <__udivmoddi4+0x2bc>
 8000446:	4618      	mov	r0, r3
 8000448:	eba4 0408 	sub.w	r4, r4, r8
 800044c:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000450:	e7bf      	b.n	80003d2 <__udivmoddi4+0x96>
 8000452:	428b      	cmp	r3, r1
 8000454:	d909      	bls.n	800046a <__udivmoddi4+0x12e>
 8000456:	2d00      	cmp	r5, #0
 8000458:	f000 80b1 	beq.w	80005be <__udivmoddi4+0x282>
 800045c:	2600      	movs	r6, #0
 800045e:	e9c5 0100 	strd	r0, r1, [r5]
 8000462:	4630      	mov	r0, r6
 8000464:	4631      	mov	r1, r6
 8000466:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800046a:	fab3 f683 	clz	r6, r3
 800046e:	2e00      	cmp	r6, #0
 8000470:	d14a      	bne.n	8000508 <__udivmoddi4+0x1cc>
 8000472:	428b      	cmp	r3, r1
 8000474:	d302      	bcc.n	800047c <__udivmoddi4+0x140>
 8000476:	4282      	cmp	r2, r0
 8000478:	f200 80b8 	bhi.w	80005ec <__udivmoddi4+0x2b0>
 800047c:	1a84      	subs	r4, r0, r2
 800047e:	eb61 0103 	sbc.w	r1, r1, r3
 8000482:	2001      	movs	r0, #1
 8000484:	468c      	mov	ip, r1
 8000486:	2d00      	cmp	r5, #0
 8000488:	d0a8      	beq.n	80003dc <__udivmoddi4+0xa0>
 800048a:	e9c5 4c00 	strd	r4, ip, [r5]
 800048e:	e7a5      	b.n	80003dc <__udivmoddi4+0xa0>
 8000490:	f1c2 0320 	rsb	r3, r2, #32
 8000494:	fa20 f603 	lsr.w	r6, r0, r3
 8000498:	4097      	lsls	r7, r2
 800049a:	fa01 f002 	lsl.w	r0, r1, r2
 800049e:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80004a2:	40d9      	lsrs	r1, r3
 80004a4:	4330      	orrs	r0, r6
 80004a6:	0c03      	lsrs	r3, r0, #16
 80004a8:	fbb1 f6fe 	udiv	r6, r1, lr
 80004ac:	fa1f f887 	uxth.w	r8, r7
 80004b0:	fb0e 1116 	mls	r1, lr, r6, r1
 80004b4:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80004b8:	fb06 f108 	mul.w	r1, r6, r8
 80004bc:	4299      	cmp	r1, r3
 80004be:	fa04 f402 	lsl.w	r4, r4, r2
 80004c2:	d909      	bls.n	80004d8 <__udivmoddi4+0x19c>
 80004c4:	18fb      	adds	r3, r7, r3
 80004c6:	f106 3cff 	add.w	ip, r6, #4294967295
 80004ca:	f080 808d 	bcs.w	80005e8 <__udivmoddi4+0x2ac>
 80004ce:	4299      	cmp	r1, r3
 80004d0:	f240 808a 	bls.w	80005e8 <__udivmoddi4+0x2ac>
 80004d4:	3e02      	subs	r6, #2
 80004d6:	443b      	add	r3, r7
 80004d8:	1a5b      	subs	r3, r3, r1
 80004da:	b281      	uxth	r1, r0
 80004dc:	fbb3 f0fe 	udiv	r0, r3, lr
 80004e0:	fb0e 3310 	mls	r3, lr, r0, r3
 80004e4:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80004e8:	fb00 f308 	mul.w	r3, r0, r8
 80004ec:	428b      	cmp	r3, r1
 80004ee:	d907      	bls.n	8000500 <__udivmoddi4+0x1c4>
 80004f0:	1879      	adds	r1, r7, r1
 80004f2:	f100 3cff 	add.w	ip, r0, #4294967295
 80004f6:	d273      	bcs.n	80005e0 <__udivmoddi4+0x2a4>
 80004f8:	428b      	cmp	r3, r1
 80004fa:	d971      	bls.n	80005e0 <__udivmoddi4+0x2a4>
 80004fc:	3802      	subs	r0, #2
 80004fe:	4439      	add	r1, r7
 8000500:	1acb      	subs	r3, r1, r3
 8000502:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 8000506:	e778      	b.n	80003fa <__udivmoddi4+0xbe>
 8000508:	f1c6 0c20 	rsb	ip, r6, #32
 800050c:	fa03 f406 	lsl.w	r4, r3, r6
 8000510:	fa22 f30c 	lsr.w	r3, r2, ip
 8000514:	431c      	orrs	r4, r3
 8000516:	fa20 f70c 	lsr.w	r7, r0, ip
 800051a:	fa01 f306 	lsl.w	r3, r1, r6
 800051e:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 8000522:	fa21 f10c 	lsr.w	r1, r1, ip
 8000526:	431f      	orrs	r7, r3
 8000528:	0c3b      	lsrs	r3, r7, #16
 800052a:	fbb1 f9fe 	udiv	r9, r1, lr
 800052e:	fa1f f884 	uxth.w	r8, r4
 8000532:	fb0e 1119 	mls	r1, lr, r9, r1
 8000536:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 800053a:	fb09 fa08 	mul.w	sl, r9, r8
 800053e:	458a      	cmp	sl, r1
 8000540:	fa02 f206 	lsl.w	r2, r2, r6
 8000544:	fa00 f306 	lsl.w	r3, r0, r6
 8000548:	d908      	bls.n	800055c <__udivmoddi4+0x220>
 800054a:	1861      	adds	r1, r4, r1
 800054c:	f109 30ff 	add.w	r0, r9, #4294967295
 8000550:	d248      	bcs.n	80005e4 <__udivmoddi4+0x2a8>
 8000552:	458a      	cmp	sl, r1
 8000554:	d946      	bls.n	80005e4 <__udivmoddi4+0x2a8>
 8000556:	f1a9 0902 	sub.w	r9, r9, #2
 800055a:	4421      	add	r1, r4
 800055c:	eba1 010a 	sub.w	r1, r1, sl
 8000560:	b2bf      	uxth	r7, r7
 8000562:	fbb1 f0fe 	udiv	r0, r1, lr
 8000566:	fb0e 1110 	mls	r1, lr, r0, r1
 800056a:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 800056e:	fb00 f808 	mul.w	r8, r0, r8
 8000572:	45b8      	cmp	r8, r7
 8000574:	d907      	bls.n	8000586 <__udivmoddi4+0x24a>
 8000576:	19e7      	adds	r7, r4, r7
 8000578:	f100 31ff 	add.w	r1, r0, #4294967295
 800057c:	d22e      	bcs.n	80005dc <__udivmoddi4+0x2a0>
 800057e:	45b8      	cmp	r8, r7
 8000580:	d92c      	bls.n	80005dc <__udivmoddi4+0x2a0>
 8000582:	3802      	subs	r0, #2
 8000584:	4427      	add	r7, r4
 8000586:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 800058a:	eba7 0708 	sub.w	r7, r7, r8
 800058e:	fba0 8902 	umull	r8, r9, r0, r2
 8000592:	454f      	cmp	r7, r9
 8000594:	46c6      	mov	lr, r8
 8000596:	4649      	mov	r1, r9
 8000598:	d31a      	bcc.n	80005d0 <__udivmoddi4+0x294>
 800059a:	d017      	beq.n	80005cc <__udivmoddi4+0x290>
 800059c:	b15d      	cbz	r5, 80005b6 <__udivmoddi4+0x27a>
 800059e:	ebb3 020e 	subs.w	r2, r3, lr
 80005a2:	eb67 0701 	sbc.w	r7, r7, r1
 80005a6:	fa07 fc0c 	lsl.w	ip, r7, ip
 80005aa:	40f2      	lsrs	r2, r6
 80005ac:	ea4c 0202 	orr.w	r2, ip, r2
 80005b0:	40f7      	lsrs	r7, r6
 80005b2:	e9c5 2700 	strd	r2, r7, [r5]
 80005b6:	2600      	movs	r6, #0
 80005b8:	4631      	mov	r1, r6
 80005ba:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80005be:	462e      	mov	r6, r5
 80005c0:	4628      	mov	r0, r5
 80005c2:	e70b      	b.n	80003dc <__udivmoddi4+0xa0>
 80005c4:	4606      	mov	r6, r0
 80005c6:	e6e9      	b.n	800039c <__udivmoddi4+0x60>
 80005c8:	4618      	mov	r0, r3
 80005ca:	e6fd      	b.n	80003c8 <__udivmoddi4+0x8c>
 80005cc:	4543      	cmp	r3, r8
 80005ce:	d2e5      	bcs.n	800059c <__udivmoddi4+0x260>
 80005d0:	ebb8 0e02 	subs.w	lr, r8, r2
 80005d4:	eb69 0104 	sbc.w	r1, r9, r4
 80005d8:	3801      	subs	r0, #1
 80005da:	e7df      	b.n	800059c <__udivmoddi4+0x260>
 80005dc:	4608      	mov	r0, r1
 80005de:	e7d2      	b.n	8000586 <__udivmoddi4+0x24a>
 80005e0:	4660      	mov	r0, ip
 80005e2:	e78d      	b.n	8000500 <__udivmoddi4+0x1c4>
 80005e4:	4681      	mov	r9, r0
 80005e6:	e7b9      	b.n	800055c <__udivmoddi4+0x220>
 80005e8:	4666      	mov	r6, ip
 80005ea:	e775      	b.n	80004d8 <__udivmoddi4+0x19c>
 80005ec:	4630      	mov	r0, r6
 80005ee:	e74a      	b.n	8000486 <__udivmoddi4+0x14a>
 80005f0:	f1ac 0c02 	sub.w	ip, ip, #2
 80005f4:	4439      	add	r1, r7
 80005f6:	e713      	b.n	8000420 <__udivmoddi4+0xe4>
 80005f8:	3802      	subs	r0, #2
 80005fa:	443c      	add	r4, r7
 80005fc:	e724      	b.n	8000448 <__udivmoddi4+0x10c>
 80005fe:	bf00      	nop

08000600 <__aeabi_idiv0>:
 8000600:	4770      	bx	lr
 8000602:	bf00      	nop

08000604 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000604:	b580      	push	{r7, lr}
 8000606:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000608:	f000 fe66 	bl	80012d8 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800060c:	f000 f80e 	bl	800062c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000610:	f000 f9dc 	bl	80009cc <MX_GPIO_Init>
  MX_ETH_Init();
 8000614:	f000 f87c 	bl	8000710 <MX_ETH_Init>
  MX_USART3_UART_Init();
 8000618:	f000 f922 	bl	8000860 <MX_USART3_UART_Init>
  MX_USB_OTG_HS_USB_Init();
 800061c:	f000 f96c 	bl	80008f8 <MX_USB_OTG_HS_USB_Init>
  MX_FMC_Init();
 8000620:	f000 f972 	bl	8000908 <MX_FMC_Init>
  MX_SPI1_Init();
 8000624:	f000 f8c6 	bl	80007b4 <MX_SPI1_Init>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000628:	e7fe      	b.n	8000628 <main+0x24>
	...

0800062c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800062c:	b580      	push	{r7, lr}
 800062e:	b09c      	sub	sp, #112	; 0x70
 8000630:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000632:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000636:	224c      	movs	r2, #76	; 0x4c
 8000638:	2100      	movs	r1, #0
 800063a:	4618      	mov	r0, r3
 800063c:	f006 fd7e 	bl	800713c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000640:	1d3b      	adds	r3, r7, #4
 8000642:	2220      	movs	r2, #32
 8000644:	2100      	movs	r1, #0
 8000646:	4618      	mov	r0, r3
 8000648:	f006 fd78 	bl	800713c <memset>

  /** Supply configuration update enable
  */
  HAL_PWREx_ConfigSupply(PWR_LDO_SUPPLY);
 800064c:	2002      	movs	r0, #2
 800064e:	f002 fc31 	bl	8002eb4 <HAL_PWREx_ConfigSupply>
  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE2);
 8000652:	2300      	movs	r3, #0
 8000654:	603b      	str	r3, [r7, #0]
 8000656:	4b2d      	ldr	r3, [pc, #180]	; (800070c <SystemClock_Config+0xe0>)
 8000658:	699b      	ldr	r3, [r3, #24]
 800065a:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 800065e:	4a2b      	ldr	r2, [pc, #172]	; (800070c <SystemClock_Config+0xe0>)
 8000660:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8000664:	6193      	str	r3, [r2, #24]
 8000666:	4b29      	ldr	r3, [pc, #164]	; (800070c <SystemClock_Config+0xe0>)
 8000668:	699b      	ldr	r3, [r3, #24]
 800066a:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 800066e:	603b      	str	r3, [r7, #0]
 8000670:	683b      	ldr	r3, [r7, #0]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 8000672:	bf00      	nop
 8000674:	4b25      	ldr	r3, [pc, #148]	; (800070c <SystemClock_Config+0xe0>)
 8000676:	699b      	ldr	r3, [r3, #24]
 8000678:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800067c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8000680:	d1f8      	bne.n	8000674 <SystemClock_Config+0x48>
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI48|RCC_OSCILLATORTYPE_HSE;
 8000682:	2321      	movs	r3, #33	; 0x21
 8000684:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 8000686:	f44f 23a0 	mov.w	r3, #327680	; 0x50000
 800068a:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSI48State = RCC_HSI48_ON;
 800068c:	2301      	movs	r3, #1
 800068e:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000690:	2302      	movs	r3, #2
 8000692:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000694:	2302      	movs	r3, #2
 8000696:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLM = 1;
 8000698:	2301      	movs	r3, #1
 800069a:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLN = 24;
 800069c:	2318      	movs	r3, #24
 800069e:	657b      	str	r3, [r7, #84]	; 0x54
  RCC_OscInitStruct.PLL.PLLP = 1;
 80006a0:	2301      	movs	r3, #1
 80006a2:	65bb      	str	r3, [r7, #88]	; 0x58
  RCC_OscInitStruct.PLL.PLLQ = 2;
 80006a4:	2302      	movs	r3, #2
 80006a6:	65fb      	str	r3, [r7, #92]	; 0x5c
  RCC_OscInitStruct.PLL.PLLR = 2;
 80006a8:	2302      	movs	r3, #2
 80006aa:	663b      	str	r3, [r7, #96]	; 0x60
  RCC_OscInitStruct.PLL.PLLRGE = RCC_PLL1VCIRANGE_3;
 80006ac:	230c      	movs	r3, #12
 80006ae:	667b      	str	r3, [r7, #100]	; 0x64
  RCC_OscInitStruct.PLL.PLLVCOSEL = RCC_PLL1VCOWIDE;
 80006b0:	2300      	movs	r3, #0
 80006b2:	66bb      	str	r3, [r7, #104]	; 0x68
  RCC_OscInitStruct.PLL.PLLFRACN = 0;
 80006b4:	2300      	movs	r3, #0
 80006b6:	66fb      	str	r3, [r7, #108]	; 0x6c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80006b8:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80006bc:	4618      	mov	r0, r3
 80006be:	f002 fc33 	bl	8002f28 <HAL_RCC_OscConfig>
 80006c2:	4603      	mov	r3, r0
 80006c4:	2b00      	cmp	r3, #0
 80006c6:	d001      	beq.n	80006cc <SystemClock_Config+0xa0>
  {
    Error_Handler();
 80006c8:	f000 fa9e 	bl	8000c08 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80006cc:	233f      	movs	r3, #63	; 0x3f
 80006ce:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
                              |RCC_CLOCKTYPE_D3PCLK1|RCC_CLOCKTYPE_D1PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80006d0:	2303      	movs	r3, #3
 80006d2:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV1;
 80006d4:	2300      	movs	r3, #0
 80006d6:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV2;
 80006d8:	2308      	movs	r3, #8
 80006da:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB3CLKDivider = RCC_APB3_DIV2;
 80006dc:	2340      	movs	r3, #64	; 0x40
 80006de:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV2;
 80006e0:	2340      	movs	r3, #64	; 0x40
 80006e2:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_APB2_DIV2;
 80006e4:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80006e8:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB4CLKDivider = RCC_APB4_DIV2;
 80006ea:	2340      	movs	r3, #64	; 0x40
 80006ec:	623b      	str	r3, [r7, #32]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 80006ee:	1d3b      	adds	r3, r7, #4
 80006f0:	2101      	movs	r1, #1
 80006f2:	4618      	mov	r0, r3
 80006f4:	f002 ffa6 	bl	8003644 <HAL_RCC_ClockConfig>
 80006f8:	4603      	mov	r3, r0
 80006fa:	2b00      	cmp	r3, #0
 80006fc:	d001      	beq.n	8000702 <SystemClock_Config+0xd6>
  {
    Error_Handler();
 80006fe:	f000 fa83 	bl	8000c08 <Error_Handler>
  }
}
 8000702:	bf00      	nop
 8000704:	3770      	adds	r7, #112	; 0x70
 8000706:	46bd      	mov	sp, r7
 8000708:	bd80      	pop	{r7, pc}
 800070a:	bf00      	nop
 800070c:	58024800 	.word	0x58024800

08000710 <MX_ETH_Init>:
  * @brief ETH Initialization Function
  * @param None
  * @retval None
  */
static void MX_ETH_Init(void)
{
 8000710:	b580      	push	{r7, lr}
 8000712:	af00      	add	r7, sp, #0
  /* USER CODE END ETH_Init 0 */

  /* USER CODE BEGIN ETH_Init 1 */

  /* USER CODE END ETH_Init 1 */
  heth.Instance = ETH;
 8000714:	4b22      	ldr	r3, [pc, #136]	; (80007a0 <MX_ETH_Init+0x90>)
 8000716:	4a23      	ldr	r2, [pc, #140]	; (80007a4 <MX_ETH_Init+0x94>)
 8000718:	601a      	str	r2, [r3, #0]
  heth.Init.MACAddr[0] =   0x00;
 800071a:	4b21      	ldr	r3, [pc, #132]	; (80007a0 <MX_ETH_Init+0x90>)
 800071c:	685b      	ldr	r3, [r3, #4]
 800071e:	2200      	movs	r2, #0
 8000720:	701a      	strb	r2, [r3, #0]
  heth.Init.MACAddr[1] =   0x80;
 8000722:	4b1f      	ldr	r3, [pc, #124]	; (80007a0 <MX_ETH_Init+0x90>)
 8000724:	685b      	ldr	r3, [r3, #4]
 8000726:	3301      	adds	r3, #1
 8000728:	2280      	movs	r2, #128	; 0x80
 800072a:	701a      	strb	r2, [r3, #0]
  heth.Init.MACAddr[2] =   0xE1;
 800072c:	4b1c      	ldr	r3, [pc, #112]	; (80007a0 <MX_ETH_Init+0x90>)
 800072e:	685b      	ldr	r3, [r3, #4]
 8000730:	3302      	adds	r3, #2
 8000732:	22e1      	movs	r2, #225	; 0xe1
 8000734:	701a      	strb	r2, [r3, #0]
  heth.Init.MACAddr[3] =   0x00;
 8000736:	4b1a      	ldr	r3, [pc, #104]	; (80007a0 <MX_ETH_Init+0x90>)
 8000738:	685b      	ldr	r3, [r3, #4]
 800073a:	3303      	adds	r3, #3
 800073c:	2200      	movs	r2, #0
 800073e:	701a      	strb	r2, [r3, #0]
  heth.Init.MACAddr[4] =   0x00;
 8000740:	4b17      	ldr	r3, [pc, #92]	; (80007a0 <MX_ETH_Init+0x90>)
 8000742:	685b      	ldr	r3, [r3, #4]
 8000744:	3304      	adds	r3, #4
 8000746:	2200      	movs	r2, #0
 8000748:	701a      	strb	r2, [r3, #0]
  heth.Init.MACAddr[5] =   0x00;
 800074a:	4b15      	ldr	r3, [pc, #84]	; (80007a0 <MX_ETH_Init+0x90>)
 800074c:	685b      	ldr	r3, [r3, #4]
 800074e:	3305      	adds	r3, #5
 8000750:	2200      	movs	r2, #0
 8000752:	701a      	strb	r2, [r3, #0]
  heth.Init.MediaInterface = HAL_ETH_RMII_MODE;
 8000754:	4b12      	ldr	r3, [pc, #72]	; (80007a0 <MX_ETH_Init+0x90>)
 8000756:	2201      	movs	r2, #1
 8000758:	721a      	strb	r2, [r3, #8]
  heth.Init.TxDesc = DMATxDscrTab;
 800075a:	4b11      	ldr	r3, [pc, #68]	; (80007a0 <MX_ETH_Init+0x90>)
 800075c:	4a12      	ldr	r2, [pc, #72]	; (80007a8 <MX_ETH_Init+0x98>)
 800075e:	60da      	str	r2, [r3, #12]
  heth.Init.RxDesc = DMARxDscrTab;
 8000760:	4b0f      	ldr	r3, [pc, #60]	; (80007a0 <MX_ETH_Init+0x90>)
 8000762:	4a12      	ldr	r2, [pc, #72]	; (80007ac <MX_ETH_Init+0x9c>)
 8000764:	611a      	str	r2, [r3, #16]
  heth.Init.RxBuffLen = 1524;
 8000766:	4b0e      	ldr	r3, [pc, #56]	; (80007a0 <MX_ETH_Init+0x90>)
 8000768:	f240 52f4 	movw	r2, #1524	; 0x5f4
 800076c:	615a      	str	r2, [r3, #20]

  /* USER CODE BEGIN MACADDRESS */

  /* USER CODE END MACADDRESS */

  if (HAL_ETH_Init(&heth) != HAL_OK)
 800076e:	480c      	ldr	r0, [pc, #48]	; (80007a0 <MX_ETH_Init+0x90>)
 8000770:	f001 fcca 	bl	8002108 <HAL_ETH_Init>
 8000774:	4603      	mov	r3, r0
 8000776:	2b00      	cmp	r3, #0
 8000778:	d001      	beq.n	800077e <MX_ETH_Init+0x6e>
  {
    Error_Handler();
 800077a:	f000 fa45 	bl	8000c08 <Error_Handler>
  }

  memset(&TxConfig, 0 , sizeof(ETH_TxPacketConfig));
 800077e:	2234      	movs	r2, #52	; 0x34
 8000780:	2100      	movs	r1, #0
 8000782:	480b      	ldr	r0, [pc, #44]	; (80007b0 <MX_ETH_Init+0xa0>)
 8000784:	f006 fcda 	bl	800713c <memset>
  TxConfig.Attributes = ETH_TX_PACKETS_FEATURES_CSUM | ETH_TX_PACKETS_FEATURES_CRCPAD;
 8000788:	4b09      	ldr	r3, [pc, #36]	; (80007b0 <MX_ETH_Init+0xa0>)
 800078a:	2221      	movs	r2, #33	; 0x21
 800078c:	601a      	str	r2, [r3, #0]
  TxConfig.ChecksumCtrl = ETH_CHECKSUM_IPHDR_PAYLOAD_INSERT_PHDR_CALC;
 800078e:	4b08      	ldr	r3, [pc, #32]	; (80007b0 <MX_ETH_Init+0xa0>)
 8000790:	f44f 3240 	mov.w	r2, #196608	; 0x30000
 8000794:	615a      	str	r2, [r3, #20]
  TxConfig.CRCPadCtrl = ETH_CRC_PAD_INSERT;
 8000796:	4b06      	ldr	r3, [pc, #24]	; (80007b0 <MX_ETH_Init+0xa0>)
 8000798:	2200      	movs	r2, #0
 800079a:	611a      	str	r2, [r3, #16]
  /* USER CODE BEGIN ETH_Init 2 */

  /* USER CODE END ETH_Init 2 */

}
 800079c:	bf00      	nop
 800079e:	bd80      	pop	{r7, pc}
 80007a0:	20000258 	.word	0x20000258
 80007a4:	40028000 	.word	0x40028000
 80007a8:	20000070 	.word	0x20000070
 80007ac:	20000010 	.word	0x20000010
 80007b0:	200002e0 	.word	0x200002e0

080007b4 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 80007b4:	b580      	push	{r7, lr}
 80007b6:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 80007b8:	4b27      	ldr	r3, [pc, #156]	; (8000858 <MX_SPI1_Init+0xa4>)
 80007ba:	4a28      	ldr	r2, [pc, #160]	; (800085c <MX_SPI1_Init+0xa8>)
 80007bc:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 80007be:	4b26      	ldr	r3, [pc, #152]	; (8000858 <MX_SPI1_Init+0xa4>)
 80007c0:	f44f 0280 	mov.w	r2, #4194304	; 0x400000
 80007c4:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 80007c6:	4b24      	ldr	r3, [pc, #144]	; (8000858 <MX_SPI1_Init+0xa4>)
 80007c8:	2200      	movs	r2, #0
 80007ca:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_4BIT;
 80007cc:	4b22      	ldr	r3, [pc, #136]	; (8000858 <MX_SPI1_Init+0xa4>)
 80007ce:	2203      	movs	r2, #3
 80007d0:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 80007d2:	4b21      	ldr	r3, [pc, #132]	; (8000858 <MX_SPI1_Init+0xa4>)
 80007d4:	2200      	movs	r2, #0
 80007d6:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 80007d8:	4b1f      	ldr	r3, [pc, #124]	; (8000858 <MX_SPI1_Init+0xa4>)
 80007da:	2200      	movs	r2, #0
 80007dc:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 80007de:	4b1e      	ldr	r3, [pc, #120]	; (8000858 <MX_SPI1_Init+0xa4>)
 80007e0:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 80007e4:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_8;
 80007e6:	4b1c      	ldr	r3, [pc, #112]	; (8000858 <MX_SPI1_Init+0xa4>)
 80007e8:	f04f 5200 	mov.w	r2, #536870912	; 0x20000000
 80007ec:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80007ee:	4b1a      	ldr	r3, [pc, #104]	; (8000858 <MX_SPI1_Init+0xa4>)
 80007f0:	2200      	movs	r2, #0
 80007f2:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 80007f4:	4b18      	ldr	r3, [pc, #96]	; (8000858 <MX_SPI1_Init+0xa4>)
 80007f6:	2200      	movs	r2, #0
 80007f8:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80007fa:	4b17      	ldr	r3, [pc, #92]	; (8000858 <MX_SPI1_Init+0xa4>)
 80007fc:	2200      	movs	r2, #0
 80007fe:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 0x0;
 8000800:	4b15      	ldr	r3, [pc, #84]	; (8000858 <MX_SPI1_Init+0xa4>)
 8000802:	2200      	movs	r2, #0
 8000804:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8000806:	4b14      	ldr	r3, [pc, #80]	; (8000858 <MX_SPI1_Init+0xa4>)
 8000808:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 800080c:	635a      	str	r2, [r3, #52]	; 0x34
  hspi1.Init.NSSPolarity = SPI_NSS_POLARITY_LOW;
 800080e:	4b12      	ldr	r3, [pc, #72]	; (8000858 <MX_SPI1_Init+0xa4>)
 8000810:	2200      	movs	r2, #0
 8000812:	639a      	str	r2, [r3, #56]	; 0x38
  hspi1.Init.FifoThreshold = SPI_FIFO_THRESHOLD_01DATA;
 8000814:	4b10      	ldr	r3, [pc, #64]	; (8000858 <MX_SPI1_Init+0xa4>)
 8000816:	2200      	movs	r2, #0
 8000818:	63da      	str	r2, [r3, #60]	; 0x3c
  hspi1.Init.TxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 800081a:	4b0f      	ldr	r3, [pc, #60]	; (8000858 <MX_SPI1_Init+0xa4>)
 800081c:	2200      	movs	r2, #0
 800081e:	641a      	str	r2, [r3, #64]	; 0x40
  hspi1.Init.RxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 8000820:	4b0d      	ldr	r3, [pc, #52]	; (8000858 <MX_SPI1_Init+0xa4>)
 8000822:	2200      	movs	r2, #0
 8000824:	645a      	str	r2, [r3, #68]	; 0x44
  hspi1.Init.MasterSSIdleness = SPI_MASTER_SS_IDLENESS_00CYCLE;
 8000826:	4b0c      	ldr	r3, [pc, #48]	; (8000858 <MX_SPI1_Init+0xa4>)
 8000828:	2200      	movs	r2, #0
 800082a:	649a      	str	r2, [r3, #72]	; 0x48
  hspi1.Init.MasterInterDataIdleness = SPI_MASTER_INTERDATA_IDLENESS_00CYCLE;
 800082c:	4b0a      	ldr	r3, [pc, #40]	; (8000858 <MX_SPI1_Init+0xa4>)
 800082e:	2200      	movs	r2, #0
 8000830:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi1.Init.MasterReceiverAutoSusp = SPI_MASTER_RX_AUTOSUSP_DISABLE;
 8000832:	4b09      	ldr	r3, [pc, #36]	; (8000858 <MX_SPI1_Init+0xa4>)
 8000834:	2200      	movs	r2, #0
 8000836:	651a      	str	r2, [r3, #80]	; 0x50
  hspi1.Init.MasterKeepIOState = SPI_MASTER_KEEP_IO_STATE_DISABLE;
 8000838:	4b07      	ldr	r3, [pc, #28]	; (8000858 <MX_SPI1_Init+0xa4>)
 800083a:	2200      	movs	r2, #0
 800083c:	655a      	str	r2, [r3, #84]	; 0x54
  hspi1.Init.IOSwap = SPI_IO_SWAP_DISABLE;
 800083e:	4b06      	ldr	r3, [pc, #24]	; (8000858 <MX_SPI1_Init+0xa4>)
 8000840:	2200      	movs	r2, #0
 8000842:	659a      	str	r2, [r3, #88]	; 0x58
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8000844:	4804      	ldr	r0, [pc, #16]	; (8000858 <MX_SPI1_Init+0xa4>)
 8000846:	f004 fda5 	bl	8005394 <HAL_SPI_Init>
 800084a:	4603      	mov	r3, r0
 800084c:	2b00      	cmp	r3, #0
 800084e:	d001      	beq.n	8000854 <MX_SPI1_Init+0xa0>
  {
    Error_Handler();
 8000850:	f000 f9da 	bl	8000c08 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8000854:	bf00      	nop
 8000856:	bd80      	pop	{r7, pc}
 8000858:	200001d0 	.word	0x200001d0
 800085c:	40013000 	.word	0x40013000

08000860 <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 8000860:	b580      	push	{r7, lr}
 8000862:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8000864:	4b22      	ldr	r3, [pc, #136]	; (80008f0 <MX_USART3_UART_Init+0x90>)
 8000866:	4a23      	ldr	r2, [pc, #140]	; (80008f4 <MX_USART3_UART_Init+0x94>)
 8000868:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 800086a:	4b21      	ldr	r3, [pc, #132]	; (80008f0 <MX_USART3_UART_Init+0x90>)
 800086c:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000870:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8000872:	4b1f      	ldr	r3, [pc, #124]	; (80008f0 <MX_USART3_UART_Init+0x90>)
 8000874:	2200      	movs	r2, #0
 8000876:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8000878:	4b1d      	ldr	r3, [pc, #116]	; (80008f0 <MX_USART3_UART_Init+0x90>)
 800087a:	2200      	movs	r2, #0
 800087c:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 800087e:	4b1c      	ldr	r3, [pc, #112]	; (80008f0 <MX_USART3_UART_Init+0x90>)
 8000880:	2200      	movs	r2, #0
 8000882:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8000884:	4b1a      	ldr	r3, [pc, #104]	; (80008f0 <MX_USART3_UART_Init+0x90>)
 8000886:	220c      	movs	r2, #12
 8000888:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800088a:	4b19      	ldr	r3, [pc, #100]	; (80008f0 <MX_USART3_UART_Init+0x90>)
 800088c:	2200      	movs	r2, #0
 800088e:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8000890:	4b17      	ldr	r3, [pc, #92]	; (80008f0 <MX_USART3_UART_Init+0x90>)
 8000892:	2200      	movs	r2, #0
 8000894:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000896:	4b16      	ldr	r3, [pc, #88]	; (80008f0 <MX_USART3_UART_Init+0x90>)
 8000898:	2200      	movs	r2, #0
 800089a:	621a      	str	r2, [r3, #32]
  huart3.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 800089c:	4b14      	ldr	r3, [pc, #80]	; (80008f0 <MX_USART3_UART_Init+0x90>)
 800089e:	2200      	movs	r2, #0
 80008a0:	625a      	str	r2, [r3, #36]	; 0x24
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80008a2:	4b13      	ldr	r3, [pc, #76]	; (80008f0 <MX_USART3_UART_Init+0x90>)
 80008a4:	2200      	movs	r2, #0
 80008a6:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart3) != HAL_OK)
 80008a8:	4811      	ldr	r0, [pc, #68]	; (80008f0 <MX_USART3_UART_Init+0x90>)
 80008aa:	f004 fe90 	bl	80055ce <HAL_UART_Init>
 80008ae:	4603      	mov	r3, r0
 80008b0:	2b00      	cmp	r3, #0
 80008b2:	d001      	beq.n	80008b8 <MX_USART3_UART_Init+0x58>
  {
    Error_Handler();
 80008b4:	f000 f9a8 	bl	8000c08 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart3, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 80008b8:	2100      	movs	r1, #0
 80008ba:	480d      	ldr	r0, [pc, #52]	; (80008f0 <MX_USART3_UART_Init+0x90>)
 80008bc:	f006 fa37 	bl	8006d2e <HAL_UARTEx_SetTxFifoThreshold>
 80008c0:	4603      	mov	r3, r0
 80008c2:	2b00      	cmp	r3, #0
 80008c4:	d001      	beq.n	80008ca <MX_USART3_UART_Init+0x6a>
  {
    Error_Handler();
 80008c6:	f000 f99f 	bl	8000c08 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart3, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 80008ca:	2100      	movs	r1, #0
 80008cc:	4808      	ldr	r0, [pc, #32]	; (80008f0 <MX_USART3_UART_Init+0x90>)
 80008ce:	f006 fa6c 	bl	8006daa <HAL_UARTEx_SetRxFifoThreshold>
 80008d2:	4603      	mov	r3, r0
 80008d4:	2b00      	cmp	r3, #0
 80008d6:	d001      	beq.n	80008dc <MX_USART3_UART_Init+0x7c>
  {
    Error_Handler();
 80008d8:	f000 f996 	bl	8000c08 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart3) != HAL_OK)
 80008dc:	4804      	ldr	r0, [pc, #16]	; (80008f0 <MX_USART3_UART_Init+0x90>)
 80008de:	f006 f9ed 	bl	8006cbc <HAL_UARTEx_DisableFifoMode>
 80008e2:	4603      	mov	r3, r0
 80008e4:	2b00      	cmp	r3, #0
 80008e6:	d001      	beq.n	80008ec <MX_USART3_UART_Init+0x8c>
  {
    Error_Handler();
 80008e8:	f000 f98e 	bl	8000c08 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 80008ec:	bf00      	nop
 80008ee:	bd80      	pop	{r7, pc}
 80008f0:	200000f4 	.word	0x200000f4
 80008f4:	40004800 	.word	0x40004800

080008f8 <MX_USB_OTG_HS_USB_Init>:
  * @brief USB_OTG_HS Initialization Function
  * @param None
  * @retval None
  */
static void MX_USB_OTG_HS_USB_Init(void)
{
 80008f8:	b480      	push	{r7}
 80008fa:	af00      	add	r7, sp, #0
  /* USER CODE END USB_OTG_HS_Init 1 */
  /* USER CODE BEGIN USB_OTG_HS_Init 2 */

  /* USER CODE END USB_OTG_HS_Init 2 */

}
 80008fc:	bf00      	nop
 80008fe:	46bd      	mov	sp, r7
 8000900:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000904:	4770      	bx	lr
	...

08000908 <MX_FMC_Init>:

/* FMC initialization function */
static void MX_FMC_Init(void)
{
 8000908:	b580      	push	{r7, lr}
 800090a:	b088      	sub	sp, #32
 800090c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN FMC_Init 0 */

  /* USER CODE END FMC_Init 0 */

  FMC_NORSRAM_TimingTypeDef Timing = {0};
 800090e:	1d3b      	adds	r3, r7, #4
 8000910:	2200      	movs	r2, #0
 8000912:	601a      	str	r2, [r3, #0]
 8000914:	605a      	str	r2, [r3, #4]
 8000916:	609a      	str	r2, [r3, #8]
 8000918:	60da      	str	r2, [r3, #12]
 800091a:	611a      	str	r2, [r3, #16]
 800091c:	615a      	str	r2, [r3, #20]
 800091e:	619a      	str	r2, [r3, #24]

  /* USER CODE END FMC_Init 1 */

  /** Perform the NOR1 memory initialization sequence
  */
  hnor1.Instance = FMC_NORSRAM_DEVICE;
 8000920:	4b27      	ldr	r3, [pc, #156]	; (80009c0 <MX_FMC_Init+0xb8>)
 8000922:	4a28      	ldr	r2, [pc, #160]	; (80009c4 <MX_FMC_Init+0xbc>)
 8000924:	601a      	str	r2, [r3, #0]
  hnor1.Extended = FMC_NORSRAM_EXTENDED_DEVICE;
 8000926:	4b26      	ldr	r3, [pc, #152]	; (80009c0 <MX_FMC_Init+0xb8>)
 8000928:	4a27      	ldr	r2, [pc, #156]	; (80009c8 <MX_FMC_Init+0xc0>)
 800092a:	605a      	str	r2, [r3, #4]
  /* hnor1.Init */
  hnor1.Init.NSBank = FMC_NORSRAM_BANK1;
 800092c:	4b24      	ldr	r3, [pc, #144]	; (80009c0 <MX_FMC_Init+0xb8>)
 800092e:	2200      	movs	r2, #0
 8000930:	609a      	str	r2, [r3, #8]
  hnor1.Init.DataAddressMux = FMC_DATA_ADDRESS_MUX_DISABLE;
 8000932:	4b23      	ldr	r3, [pc, #140]	; (80009c0 <MX_FMC_Init+0xb8>)
 8000934:	2200      	movs	r2, #0
 8000936:	60da      	str	r2, [r3, #12]
  hnor1.Init.MemoryType = FMC_MEMORY_TYPE_NOR;
 8000938:	4b21      	ldr	r3, [pc, #132]	; (80009c0 <MX_FMC_Init+0xb8>)
 800093a:	2208      	movs	r2, #8
 800093c:	611a      	str	r2, [r3, #16]
  hnor1.Init.MemoryDataWidth = FMC_NORSRAM_MEM_BUS_WIDTH_8;
 800093e:	4b20      	ldr	r3, [pc, #128]	; (80009c0 <MX_FMC_Init+0xb8>)
 8000940:	2200      	movs	r2, #0
 8000942:	615a      	str	r2, [r3, #20]
  hnor1.Init.BurstAccessMode = FMC_BURST_ACCESS_MODE_DISABLE;
 8000944:	4b1e      	ldr	r3, [pc, #120]	; (80009c0 <MX_FMC_Init+0xb8>)
 8000946:	2200      	movs	r2, #0
 8000948:	619a      	str	r2, [r3, #24]
  hnor1.Init.WaitSignalPolarity = FMC_WAIT_SIGNAL_POLARITY_LOW;
 800094a:	4b1d      	ldr	r3, [pc, #116]	; (80009c0 <MX_FMC_Init+0xb8>)
 800094c:	2200      	movs	r2, #0
 800094e:	61da      	str	r2, [r3, #28]
  hnor1.Init.WaitSignalActive = FMC_WAIT_TIMING_BEFORE_WS;
 8000950:	4b1b      	ldr	r3, [pc, #108]	; (80009c0 <MX_FMC_Init+0xb8>)
 8000952:	2200      	movs	r2, #0
 8000954:	621a      	str	r2, [r3, #32]
  hnor1.Init.WriteOperation = FMC_WRITE_OPERATION_DISABLE;
 8000956:	4b1a      	ldr	r3, [pc, #104]	; (80009c0 <MX_FMC_Init+0xb8>)
 8000958:	2200      	movs	r2, #0
 800095a:	625a      	str	r2, [r3, #36]	; 0x24
  hnor1.Init.WaitSignal = FMC_WAIT_SIGNAL_DISABLE;
 800095c:	4b18      	ldr	r3, [pc, #96]	; (80009c0 <MX_FMC_Init+0xb8>)
 800095e:	2200      	movs	r2, #0
 8000960:	629a      	str	r2, [r3, #40]	; 0x28
  hnor1.Init.ExtendedMode = FMC_EXTENDED_MODE_DISABLE;
 8000962:	4b17      	ldr	r3, [pc, #92]	; (80009c0 <MX_FMC_Init+0xb8>)
 8000964:	2200      	movs	r2, #0
 8000966:	62da      	str	r2, [r3, #44]	; 0x2c
  hnor1.Init.AsynchronousWait = FMC_ASYNCHRONOUS_WAIT_DISABLE;
 8000968:	4b15      	ldr	r3, [pc, #84]	; (80009c0 <MX_FMC_Init+0xb8>)
 800096a:	2200      	movs	r2, #0
 800096c:	631a      	str	r2, [r3, #48]	; 0x30
  hnor1.Init.WriteBurst = FMC_WRITE_BURST_DISABLE;
 800096e:	4b14      	ldr	r3, [pc, #80]	; (80009c0 <MX_FMC_Init+0xb8>)
 8000970:	2200      	movs	r2, #0
 8000972:	635a      	str	r2, [r3, #52]	; 0x34
  hnor1.Init.ContinuousClock = FMC_CONTINUOUS_CLOCK_SYNC_ONLY;
 8000974:	4b12      	ldr	r3, [pc, #72]	; (80009c0 <MX_FMC_Init+0xb8>)
 8000976:	2200      	movs	r2, #0
 8000978:	639a      	str	r2, [r3, #56]	; 0x38
  hnor1.Init.WriteFifo = FMC_WRITE_FIFO_ENABLE;
 800097a:	4b11      	ldr	r3, [pc, #68]	; (80009c0 <MX_FMC_Init+0xb8>)
 800097c:	2200      	movs	r2, #0
 800097e:	63da      	str	r2, [r3, #60]	; 0x3c
  hnor1.Init.PageSize = FMC_PAGE_SIZE_NONE;
 8000980:	4b0f      	ldr	r3, [pc, #60]	; (80009c0 <MX_FMC_Init+0xb8>)
 8000982:	2200      	movs	r2, #0
 8000984:	641a      	str	r2, [r3, #64]	; 0x40
  /* Timing */
  Timing.AddressSetupTime = 15;
 8000986:	230f      	movs	r3, #15
 8000988:	607b      	str	r3, [r7, #4]
  Timing.AddressHoldTime = 15;
 800098a:	230f      	movs	r3, #15
 800098c:	60bb      	str	r3, [r7, #8]
  Timing.DataSetupTime = 255;
 800098e:	23ff      	movs	r3, #255	; 0xff
 8000990:	60fb      	str	r3, [r7, #12]
  Timing.BusTurnAroundDuration = 15;
 8000992:	230f      	movs	r3, #15
 8000994:	613b      	str	r3, [r7, #16]
  Timing.CLKDivision = 16;
 8000996:	2310      	movs	r3, #16
 8000998:	617b      	str	r3, [r7, #20]
  Timing.DataLatency = 17;
 800099a:	2311      	movs	r3, #17
 800099c:	61bb      	str	r3, [r7, #24]
  Timing.AccessMode = FMC_ACCESS_MODE_A;
 800099e:	2300      	movs	r3, #0
 80009a0:	61fb      	str	r3, [r7, #28]
  /* ExtTiming */

  if (HAL_NOR_Init(&hnor1, &Timing, NULL) != HAL_OK)
 80009a2:	1d3b      	adds	r3, r7, #4
 80009a4:	2200      	movs	r2, #0
 80009a6:	4619      	mov	r1, r3
 80009a8:	4805      	ldr	r0, [pc, #20]	; (80009c0 <MX_FMC_Init+0xb8>)
 80009aa:	f002 f985 	bl	8002cb8 <HAL_NOR_Init>
 80009ae:	4603      	mov	r3, r0
 80009b0:	2b00      	cmp	r3, #0
 80009b2:	d001      	beq.n	80009b8 <MX_FMC_Init+0xb0>
  {
    Error_Handler( );
 80009b4:	f000 f928 	bl	8000c08 <Error_Handler>
  }

  /* USER CODE BEGIN FMC_Init 2 */

  /* USER CODE END FMC_Init 2 */
}
 80009b8:	bf00      	nop
 80009ba:	3720      	adds	r7, #32
 80009bc:	46bd      	mov	sp, r7
 80009be:	bd80      	pop	{r7, pc}
 80009c0:	20000184 	.word	0x20000184
 80009c4:	52004000 	.word	0x52004000
 80009c8:	52004104 	.word	0x52004104

080009cc <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80009cc:	b580      	push	{r7, lr}
 80009ce:	b08e      	sub	sp, #56	; 0x38
 80009d0:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80009d2:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80009d6:	2200      	movs	r2, #0
 80009d8:	601a      	str	r2, [r3, #0]
 80009da:	605a      	str	r2, [r3, #4]
 80009dc:	609a      	str	r2, [r3, #8]
 80009de:	60da      	str	r2, [r3, #12]
 80009e0:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80009e2:	4b81      	ldr	r3, [pc, #516]	; (8000be8 <MX_GPIO_Init+0x21c>)
 80009e4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80009e8:	4a7f      	ldr	r2, [pc, #508]	; (8000be8 <MX_GPIO_Init+0x21c>)
 80009ea:	f043 0304 	orr.w	r3, r3, #4
 80009ee:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80009f2:	4b7d      	ldr	r3, [pc, #500]	; (8000be8 <MX_GPIO_Init+0x21c>)
 80009f4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80009f8:	f003 0304 	and.w	r3, r3, #4
 80009fc:	623b      	str	r3, [r7, #32]
 80009fe:	6a3b      	ldr	r3, [r7, #32]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8000a00:	4b79      	ldr	r3, [pc, #484]	; (8000be8 <MX_GPIO_Init+0x21c>)
 8000a02:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000a06:	4a78      	ldr	r2, [pc, #480]	; (8000be8 <MX_GPIO_Init+0x21c>)
 8000a08:	f043 0320 	orr.w	r3, r3, #32
 8000a0c:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000a10:	4b75      	ldr	r3, [pc, #468]	; (8000be8 <MX_GPIO_Init+0x21c>)
 8000a12:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000a16:	f003 0320 	and.w	r3, r3, #32
 8000a1a:	61fb      	str	r3, [r7, #28]
 8000a1c:	69fb      	ldr	r3, [r7, #28]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000a1e:	4b72      	ldr	r3, [pc, #456]	; (8000be8 <MX_GPIO_Init+0x21c>)
 8000a20:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000a24:	4a70      	ldr	r2, [pc, #448]	; (8000be8 <MX_GPIO_Init+0x21c>)
 8000a26:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000a2a:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000a2e:	4b6e      	ldr	r3, [pc, #440]	; (8000be8 <MX_GPIO_Init+0x21c>)
 8000a30:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000a34:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000a38:	61bb      	str	r3, [r7, #24]
 8000a3a:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000a3c:	4b6a      	ldr	r3, [pc, #424]	; (8000be8 <MX_GPIO_Init+0x21c>)
 8000a3e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000a42:	4a69      	ldr	r2, [pc, #420]	; (8000be8 <MX_GPIO_Init+0x21c>)
 8000a44:	f043 0301 	orr.w	r3, r3, #1
 8000a48:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000a4c:	4b66      	ldr	r3, [pc, #408]	; (8000be8 <MX_GPIO_Init+0x21c>)
 8000a4e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000a52:	f003 0301 	and.w	r3, r3, #1
 8000a56:	617b      	str	r3, [r7, #20]
 8000a58:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000a5a:	4b63      	ldr	r3, [pc, #396]	; (8000be8 <MX_GPIO_Init+0x21c>)
 8000a5c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000a60:	4a61      	ldr	r2, [pc, #388]	; (8000be8 <MX_GPIO_Init+0x21c>)
 8000a62:	f043 0302 	orr.w	r3, r3, #2
 8000a66:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000a6a:	4b5f      	ldr	r3, [pc, #380]	; (8000be8 <MX_GPIO_Init+0x21c>)
 8000a6c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000a70:	f003 0302 	and.w	r3, r3, #2
 8000a74:	613b      	str	r3, [r7, #16]
 8000a76:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8000a78:	4b5b      	ldr	r3, [pc, #364]	; (8000be8 <MX_GPIO_Init+0x21c>)
 8000a7a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000a7e:	4a5a      	ldr	r2, [pc, #360]	; (8000be8 <MX_GPIO_Init+0x21c>)
 8000a80:	f043 0310 	orr.w	r3, r3, #16
 8000a84:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000a88:	4b57      	ldr	r3, [pc, #348]	; (8000be8 <MX_GPIO_Init+0x21c>)
 8000a8a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000a8e:	f003 0310 	and.w	r3, r3, #16
 8000a92:	60fb      	str	r3, [r7, #12]
 8000a94:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000a96:	4b54      	ldr	r3, [pc, #336]	; (8000be8 <MX_GPIO_Init+0x21c>)
 8000a98:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000a9c:	4a52      	ldr	r2, [pc, #328]	; (8000be8 <MX_GPIO_Init+0x21c>)
 8000a9e:	f043 0308 	orr.w	r3, r3, #8
 8000aa2:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000aa6:	4b50      	ldr	r3, [pc, #320]	; (8000be8 <MX_GPIO_Init+0x21c>)
 8000aa8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000aac:	f003 0308 	and.w	r3, r3, #8
 8000ab0:	60bb      	str	r3, [r7, #8]
 8000ab2:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8000ab4:	4b4c      	ldr	r3, [pc, #304]	; (8000be8 <MX_GPIO_Init+0x21c>)
 8000ab6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000aba:	4a4b      	ldr	r2, [pc, #300]	; (8000be8 <MX_GPIO_Init+0x21c>)
 8000abc:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000ac0:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000ac4:	4b48      	ldr	r3, [pc, #288]	; (8000be8 <MX_GPIO_Init+0x21c>)
 8000ac6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000aca:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000ace:	607b      	str	r3, [r7, #4]
 8000ad0:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, GPIO_PIN_RESET);
 8000ad2:	2200      	movs	r2, #0
 8000ad4:	2110      	movs	r1, #16
 8000ad6:	4845      	ldr	r0, [pc, #276]	; (8000bec <MX_GPIO_Init+0x220>)
 8000ad8:	f002 f8d4 	bl	8002c84 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LED_GREEN_Pin|LED_RED_Pin, GPIO_PIN_RESET);
 8000adc:	2200      	movs	r2, #0
 8000ade:	f244 0101 	movw	r1, #16385	; 0x4001
 8000ae2:	4843      	ldr	r0, [pc, #268]	; (8000bf0 <MX_GPIO_Init+0x224>)
 8000ae4:	f002 f8ce 	bl	8002c84 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, USB_FS_PWR_EN_Pin|GPIO_PIN_11|GPIO_PIN_3, GPIO_PIN_RESET);
 8000ae8:	2200      	movs	r2, #0
 8000aea:	f640 4108 	movw	r1, #3080	; 0xc08
 8000aee:	4841      	ldr	r0, [pc, #260]	; (8000bf4 <MX_GPIO_Init+0x228>)
 8000af0:	f002 f8c8 	bl	8002c84 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED_YELLOW_GPIO_Port, LED_YELLOW_Pin, GPIO_PIN_RESET);
 8000af4:	2200      	movs	r2, #0
 8000af6:	2102      	movs	r1, #2
 8000af8:	483f      	ldr	r0, [pc, #252]	; (8000bf8 <MX_GPIO_Init+0x22c>)
 8000afa:	f002 f8c3 	bl	8002c84 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8000afe:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000b02:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000b04:	2300      	movs	r3, #0
 8000b06:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b08:	2300      	movs	r3, #0
 8000b0a:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8000b0c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000b10:	4619      	mov	r1, r3
 8000b12:	483a      	ldr	r0, [pc, #232]	; (8000bfc <MX_GPIO_Init+0x230>)
 8000b14:	f001 ff0e 	bl	8002934 <HAL_GPIO_Init>

  /*Configure GPIO pin : PA4 */
  GPIO_InitStruct.Pin = GPIO_PIN_4;
 8000b18:	2310      	movs	r3, #16
 8000b1a:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000b1c:	2301      	movs	r3, #1
 8000b1e:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b20:	2300      	movs	r3, #0
 8000b22:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000b24:	2300      	movs	r3, #0
 8000b26:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000b28:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000b2c:	4619      	mov	r1, r3
 8000b2e:	482f      	ldr	r0, [pc, #188]	; (8000bec <MX_GPIO_Init+0x220>)
 8000b30:	f001 ff00 	bl	8002934 <HAL_GPIO_Init>

  /*Configure GPIO pins : LED_GREEN_Pin LED_RED_Pin */
  GPIO_InitStruct.Pin = LED_GREEN_Pin|LED_RED_Pin;
 8000b34:	f244 0301 	movw	r3, #16385	; 0x4001
 8000b38:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000b3a:	2301      	movs	r3, #1
 8000b3c:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b3e:	2300      	movs	r3, #0
 8000b40:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000b42:	2300      	movs	r3, #0
 8000b44:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000b46:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000b4a:	4619      	mov	r1, r3
 8000b4c:	4828      	ldr	r0, [pc, #160]	; (8000bf0 <MX_GPIO_Init+0x224>)
 8000b4e:	f001 fef1 	bl	8002934 <HAL_GPIO_Init>

  /*Configure GPIO pins : USB_FS_PWR_EN_Pin PD11 PD3 */
  GPIO_InitStruct.Pin = USB_FS_PWR_EN_Pin|GPIO_PIN_11|GPIO_PIN_3;
 8000b52:	f640 4308 	movw	r3, #3080	; 0xc08
 8000b56:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000b58:	2301      	movs	r3, #1
 8000b5a:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b5c:	2300      	movs	r3, #0
 8000b5e:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000b60:	2300      	movs	r3, #0
 8000b62:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000b64:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000b68:	4619      	mov	r1, r3
 8000b6a:	4822      	ldr	r0, [pc, #136]	; (8000bf4 <MX_GPIO_Init+0x228>)
 8000b6c:	f001 fee2 	bl	8002934 <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_FS_OVCR_Pin */
  GPIO_InitStruct.Pin = USB_FS_OVCR_Pin;
 8000b70:	2380      	movs	r3, #128	; 0x80
 8000b72:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000b74:	4b22      	ldr	r3, [pc, #136]	; (8000c00 <MX_GPIO_Init+0x234>)
 8000b76:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b78:	2300      	movs	r3, #0
 8000b7a:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(USB_FS_OVCR_GPIO_Port, &GPIO_InitStruct);
 8000b7c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000b80:	4619      	mov	r1, r3
 8000b82:	4820      	ldr	r0, [pc, #128]	; (8000c04 <MX_GPIO_Init+0x238>)
 8000b84:	f001 fed6 	bl	8002934 <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_FS_VBUS_Pin */
  GPIO_InitStruct.Pin = USB_FS_VBUS_Pin;
 8000b88:	f44f 7300 	mov.w	r3, #512	; 0x200
 8000b8c:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000b8e:	2300      	movs	r3, #0
 8000b90:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b92:	2300      	movs	r3, #0
 8000b94:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(USB_FS_VBUS_GPIO_Port, &GPIO_InitStruct);
 8000b96:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000b9a:	4619      	mov	r1, r3
 8000b9c:	4813      	ldr	r0, [pc, #76]	; (8000bec <MX_GPIO_Init+0x220>)
 8000b9e:	f001 fec9 	bl	8002934 <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_FS_ID_Pin */
  GPIO_InitStruct.Pin = USB_FS_ID_Pin;
 8000ba2:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000ba6:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000ba8:	2302      	movs	r3, #2
 8000baa:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000bac:	2300      	movs	r3, #0
 8000bae:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000bb0:	2300      	movs	r3, #0
 8000bb2:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG1_HS;
 8000bb4:	230a      	movs	r3, #10
 8000bb6:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(USB_FS_ID_GPIO_Port, &GPIO_InitStruct);
 8000bb8:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000bbc:	4619      	mov	r1, r3
 8000bbe:	480b      	ldr	r0, [pc, #44]	; (8000bec <MX_GPIO_Init+0x220>)
 8000bc0:	f001 feb8 	bl	8002934 <HAL_GPIO_Init>

  /*Configure GPIO pin : LED_YELLOW_Pin */
  GPIO_InitStruct.Pin = LED_YELLOW_Pin;
 8000bc4:	2302      	movs	r3, #2
 8000bc6:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000bc8:	2301      	movs	r3, #1
 8000bca:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000bcc:	2300      	movs	r3, #0
 8000bce:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000bd0:	2300      	movs	r3, #0
 8000bd2:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(LED_YELLOW_GPIO_Port, &GPIO_InitStruct);
 8000bd4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000bd8:	4619      	mov	r1, r3
 8000bda:	4807      	ldr	r0, [pc, #28]	; (8000bf8 <MX_GPIO_Init+0x22c>)
 8000bdc:	f001 feaa 	bl	8002934 <HAL_GPIO_Init>

}
 8000be0:	bf00      	nop
 8000be2:	3738      	adds	r7, #56	; 0x38
 8000be4:	46bd      	mov	sp, r7
 8000be6:	bd80      	pop	{r7, pc}
 8000be8:	58024400 	.word	0x58024400
 8000bec:	58020000 	.word	0x58020000
 8000bf0:	58020400 	.word	0x58020400
 8000bf4:	58020c00 	.word	0x58020c00
 8000bf8:	58021000 	.word	0x58021000
 8000bfc:	58020800 	.word	0x58020800
 8000c00:	11110000 	.word	0x11110000
 8000c04:	58021800 	.word	0x58021800

08000c08 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000c08:	b480      	push	{r7}
 8000c0a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000c0c:	b672      	cpsid	i
}
 8000c0e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000c10:	e7fe      	b.n	8000c10 <Error_Handler+0x8>
	...

08000c14 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000c14:	b480      	push	{r7}
 8000c16:	b083      	sub	sp, #12
 8000c18:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000c1a:	4b0a      	ldr	r3, [pc, #40]	; (8000c44 <HAL_MspInit+0x30>)
 8000c1c:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8000c20:	4a08      	ldr	r2, [pc, #32]	; (8000c44 <HAL_MspInit+0x30>)
 8000c22:	f043 0302 	orr.w	r3, r3, #2
 8000c26:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 8000c2a:	4b06      	ldr	r3, [pc, #24]	; (8000c44 <HAL_MspInit+0x30>)
 8000c2c:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8000c30:	f003 0302 	and.w	r3, r3, #2
 8000c34:	607b      	str	r3, [r7, #4]
 8000c36:	687b      	ldr	r3, [r7, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000c38:	bf00      	nop
 8000c3a:	370c      	adds	r7, #12
 8000c3c:	46bd      	mov	sp, r7
 8000c3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c42:	4770      	bx	lr
 8000c44:	58024400 	.word	0x58024400

08000c48 <HAL_ETH_MspInit>:
* This function configures the hardware resources used in this example
* @param heth: ETH handle pointer
* @retval None
*/
void HAL_ETH_MspInit(ETH_HandleTypeDef* heth)
{
 8000c48:	b580      	push	{r7, lr}
 8000c4a:	b08e      	sub	sp, #56	; 0x38
 8000c4c:	af00      	add	r7, sp, #0
 8000c4e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000c50:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000c54:	2200      	movs	r2, #0
 8000c56:	601a      	str	r2, [r3, #0]
 8000c58:	605a      	str	r2, [r3, #4]
 8000c5a:	609a      	str	r2, [r3, #8]
 8000c5c:	60da      	str	r2, [r3, #12]
 8000c5e:	611a      	str	r2, [r3, #16]
  if(heth->Instance==ETH)
 8000c60:	687b      	ldr	r3, [r7, #4]
 8000c62:	681b      	ldr	r3, [r3, #0]
 8000c64:	4a59      	ldr	r2, [pc, #356]	; (8000dcc <HAL_ETH_MspInit+0x184>)
 8000c66:	4293      	cmp	r3, r2
 8000c68:	f040 80ab 	bne.w	8000dc2 <HAL_ETH_MspInit+0x17a>
  {
  /* USER CODE BEGIN ETH_MspInit 0 */

  /* USER CODE END ETH_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ETH1MAC_CLK_ENABLE();
 8000c6c:	4b58      	ldr	r3, [pc, #352]	; (8000dd0 <HAL_ETH_MspInit+0x188>)
 8000c6e:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8000c72:	4a57      	ldr	r2, [pc, #348]	; (8000dd0 <HAL_ETH_MspInit+0x188>)
 8000c74:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8000c78:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 8000c7c:	4b54      	ldr	r3, [pc, #336]	; (8000dd0 <HAL_ETH_MspInit+0x188>)
 8000c7e:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8000c82:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8000c86:	623b      	str	r3, [r7, #32]
 8000c88:	6a3b      	ldr	r3, [r7, #32]
    __HAL_RCC_ETH1TX_CLK_ENABLE();
 8000c8a:	4b51      	ldr	r3, [pc, #324]	; (8000dd0 <HAL_ETH_MspInit+0x188>)
 8000c8c:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8000c90:	4a4f      	ldr	r2, [pc, #316]	; (8000dd0 <HAL_ETH_MspInit+0x188>)
 8000c92:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000c96:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 8000c9a:	4b4d      	ldr	r3, [pc, #308]	; (8000dd0 <HAL_ETH_MspInit+0x188>)
 8000c9c:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8000ca0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000ca4:	61fb      	str	r3, [r7, #28]
 8000ca6:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_ETH1RX_CLK_ENABLE();
 8000ca8:	4b49      	ldr	r3, [pc, #292]	; (8000dd0 <HAL_ETH_MspInit+0x188>)
 8000caa:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8000cae:	4a48      	ldr	r2, [pc, #288]	; (8000dd0 <HAL_ETH_MspInit+0x188>)
 8000cb0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000cb4:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 8000cb8:	4b45      	ldr	r3, [pc, #276]	; (8000dd0 <HAL_ETH_MspInit+0x188>)
 8000cba:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8000cbe:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000cc2:	61bb      	str	r3, [r7, #24]
 8000cc4:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000cc6:	4b42      	ldr	r3, [pc, #264]	; (8000dd0 <HAL_ETH_MspInit+0x188>)
 8000cc8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000ccc:	4a40      	ldr	r2, [pc, #256]	; (8000dd0 <HAL_ETH_MspInit+0x188>)
 8000cce:	f043 0304 	orr.w	r3, r3, #4
 8000cd2:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000cd6:	4b3e      	ldr	r3, [pc, #248]	; (8000dd0 <HAL_ETH_MspInit+0x188>)
 8000cd8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000cdc:	f003 0304 	and.w	r3, r3, #4
 8000ce0:	617b      	str	r3, [r7, #20]
 8000ce2:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000ce4:	4b3a      	ldr	r3, [pc, #232]	; (8000dd0 <HAL_ETH_MspInit+0x188>)
 8000ce6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000cea:	4a39      	ldr	r2, [pc, #228]	; (8000dd0 <HAL_ETH_MspInit+0x188>)
 8000cec:	f043 0301 	orr.w	r3, r3, #1
 8000cf0:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000cf4:	4b36      	ldr	r3, [pc, #216]	; (8000dd0 <HAL_ETH_MspInit+0x188>)
 8000cf6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000cfa:	f003 0301 	and.w	r3, r3, #1
 8000cfe:	613b      	str	r3, [r7, #16]
 8000d00:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000d02:	4b33      	ldr	r3, [pc, #204]	; (8000dd0 <HAL_ETH_MspInit+0x188>)
 8000d04:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000d08:	4a31      	ldr	r2, [pc, #196]	; (8000dd0 <HAL_ETH_MspInit+0x188>)
 8000d0a:	f043 0302 	orr.w	r3, r3, #2
 8000d0e:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000d12:	4b2f      	ldr	r3, [pc, #188]	; (8000dd0 <HAL_ETH_MspInit+0x188>)
 8000d14:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000d18:	f003 0302 	and.w	r3, r3, #2
 8000d1c:	60fb      	str	r3, [r7, #12]
 8000d1e:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOG_CLK_ENABLE();
 8000d20:	4b2b      	ldr	r3, [pc, #172]	; (8000dd0 <HAL_ETH_MspInit+0x188>)
 8000d22:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000d26:	4a2a      	ldr	r2, [pc, #168]	; (8000dd0 <HAL_ETH_MspInit+0x188>)
 8000d28:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000d2c:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000d30:	4b27      	ldr	r3, [pc, #156]	; (8000dd0 <HAL_ETH_MspInit+0x188>)
 8000d32:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000d36:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000d3a:	60bb      	str	r3, [r7, #8]
 8000d3c:	68bb      	ldr	r3, [r7, #8]
    PC5     ------> ETH_RXD1
    PB13     ------> ETH_TXD1
    PG11     ------> ETH_TX_EN
    PG13     ------> ETH_TXD0
    */
    GPIO_InitStruct.Pin = RMII_MDC_Pin|RMII_RXD0_Pin|RMII_RXD1_Pin;
 8000d3e:	2332      	movs	r3, #50	; 0x32
 8000d40:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000d42:	2302      	movs	r3, #2
 8000d44:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d46:	2300      	movs	r3, #0
 8000d48:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000d4a:	2300      	movs	r3, #0
 8000d4c:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8000d4e:	230b      	movs	r3, #11
 8000d50:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000d52:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000d56:	4619      	mov	r1, r3
 8000d58:	481e      	ldr	r0, [pc, #120]	; (8000dd4 <HAL_ETH_MspInit+0x18c>)
 8000d5a:	f001 fdeb 	bl	8002934 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = RMII_REF_CLK_Pin|RMII_MDIO_Pin|RMII_CRS_DV_Pin;
 8000d5e:	2386      	movs	r3, #134	; 0x86
 8000d60:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000d62:	2302      	movs	r3, #2
 8000d64:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d66:	2300      	movs	r3, #0
 8000d68:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000d6a:	2300      	movs	r3, #0
 8000d6c:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8000d6e:	230b      	movs	r3, #11
 8000d70:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000d72:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000d76:	4619      	mov	r1, r3
 8000d78:	4817      	ldr	r0, [pc, #92]	; (8000dd8 <HAL_ETH_MspInit+0x190>)
 8000d7a:	f001 fddb 	bl	8002934 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = RMII_TXD1_Pin;
 8000d7e:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000d82:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000d84:	2302      	movs	r3, #2
 8000d86:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d88:	2300      	movs	r3, #0
 8000d8a:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000d8c:	2300      	movs	r3, #0
 8000d8e:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8000d90:	230b      	movs	r3, #11
 8000d92:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(RMII_TXD1_GPIO_Port, &GPIO_InitStruct);
 8000d94:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000d98:	4619      	mov	r1, r3
 8000d9a:	4810      	ldr	r0, [pc, #64]	; (8000ddc <HAL_ETH_MspInit+0x194>)
 8000d9c:	f001 fdca 	bl	8002934 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = RMII_TX_EN_Pin|RMII_TXD0_Pin;
 8000da0:	f44f 5320 	mov.w	r3, #10240	; 0x2800
 8000da4:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000da6:	2302      	movs	r3, #2
 8000da8:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000daa:	2300      	movs	r3, #0
 8000dac:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000dae:	2300      	movs	r3, #0
 8000db0:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8000db2:	230b      	movs	r3, #11
 8000db4:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8000db6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000dba:	4619      	mov	r1, r3
 8000dbc:	4808      	ldr	r0, [pc, #32]	; (8000de0 <HAL_ETH_MspInit+0x198>)
 8000dbe:	f001 fdb9 	bl	8002934 <HAL_GPIO_Init>
  /* USER CODE BEGIN ETH_MspInit 1 */

  /* USER CODE END ETH_MspInit 1 */
  }

}
 8000dc2:	bf00      	nop
 8000dc4:	3738      	adds	r7, #56	; 0x38
 8000dc6:	46bd      	mov	sp, r7
 8000dc8:	bd80      	pop	{r7, pc}
 8000dca:	bf00      	nop
 8000dcc:	40028000 	.word	0x40028000
 8000dd0:	58024400 	.word	0x58024400
 8000dd4:	58020800 	.word	0x58020800
 8000dd8:	58020000 	.word	0x58020000
 8000ddc:	58020400 	.word	0x58020400
 8000de0:	58021800 	.word	0x58021800

08000de4 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8000de4:	b580      	push	{r7, lr}
 8000de6:	b0b8      	sub	sp, #224	; 0xe0
 8000de8:	af00      	add	r7, sp, #0
 8000dea:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000dec:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 8000df0:	2200      	movs	r2, #0
 8000df2:	601a      	str	r2, [r3, #0]
 8000df4:	605a      	str	r2, [r3, #4]
 8000df6:	609a      	str	r2, [r3, #8]
 8000df8:	60da      	str	r2, [r3, #12]
 8000dfa:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000dfc:	f107 0318 	add.w	r3, r7, #24
 8000e00:	22b4      	movs	r2, #180	; 0xb4
 8000e02:	2100      	movs	r1, #0
 8000e04:	4618      	mov	r0, r3
 8000e06:	f006 f999 	bl	800713c <memset>
  if(hspi->Instance==SPI1)
 8000e0a:	687b      	ldr	r3, [r7, #4]
 8000e0c:	681b      	ldr	r3, [r3, #0]
 8000e0e:	4a36      	ldr	r2, [pc, #216]	; (8000ee8 <HAL_SPI_MspInit+0x104>)
 8000e10:	4293      	cmp	r3, r2
 8000e12:	d165      	bne.n	8000ee0 <HAL_SPI_MspInit+0xfc>
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_SPI1;
 8000e14:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000e18:	61bb      	str	r3, [r7, #24]
    PeriphClkInitStruct.Spi123ClockSelection = RCC_SPI123CLKSOURCE_PLL;
 8000e1a:	2300      	movs	r3, #0
 8000e1c:	673b      	str	r3, [r7, #112]	; 0x70
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000e1e:	f107 0318 	add.w	r3, r7, #24
 8000e22:	4618      	mov	r0, r3
 8000e24:	f002 ff9a 	bl	8003d5c <HAL_RCCEx_PeriphCLKConfig>
 8000e28:	4603      	mov	r3, r0
 8000e2a:	2b00      	cmp	r3, #0
 8000e2c:	d001      	beq.n	8000e32 <HAL_SPI_MspInit+0x4e>
    {
      Error_Handler();
 8000e2e:	f7ff feeb 	bl	8000c08 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8000e32:	4b2e      	ldr	r3, [pc, #184]	; (8000eec <HAL_SPI_MspInit+0x108>)
 8000e34:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8000e38:	4a2c      	ldr	r2, [pc, #176]	; (8000eec <HAL_SPI_MspInit+0x108>)
 8000e3a:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8000e3e:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 8000e42:	4b2a      	ldr	r3, [pc, #168]	; (8000eec <HAL_SPI_MspInit+0x108>)
 8000e44:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8000e48:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8000e4c:	617b      	str	r3, [r7, #20]
 8000e4e:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000e50:	4b26      	ldr	r3, [pc, #152]	; (8000eec <HAL_SPI_MspInit+0x108>)
 8000e52:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000e56:	4a25      	ldr	r2, [pc, #148]	; (8000eec <HAL_SPI_MspInit+0x108>)
 8000e58:	f043 0301 	orr.w	r3, r3, #1
 8000e5c:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000e60:	4b22      	ldr	r3, [pc, #136]	; (8000eec <HAL_SPI_MspInit+0x108>)
 8000e62:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000e66:	f003 0301 	and.w	r3, r3, #1
 8000e6a:	613b      	str	r3, [r7, #16]
 8000e6c:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8000e6e:	4b1f      	ldr	r3, [pc, #124]	; (8000eec <HAL_SPI_MspInit+0x108>)
 8000e70:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000e74:	4a1d      	ldr	r2, [pc, #116]	; (8000eec <HAL_SPI_MspInit+0x108>)
 8000e76:	f043 0308 	orr.w	r3, r3, #8
 8000e7a:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000e7e:	4b1b      	ldr	r3, [pc, #108]	; (8000eec <HAL_SPI_MspInit+0x108>)
 8000e80:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000e84:	f003 0308 	and.w	r3, r3, #8
 8000e88:	60fb      	str	r3, [r7, #12]
 8000e8a:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PD7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6;
 8000e8c:	2360      	movs	r3, #96	; 0x60
 8000e8e:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000e92:	2302      	movs	r3, #2
 8000e94:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e98:	2300      	movs	r3, #0
 8000e9a:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000e9e:	2300      	movs	r3, #0
 8000ea0:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8000ea4:	2305      	movs	r3, #5
 8000ea6:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000eaa:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 8000eae:	4619      	mov	r1, r3
 8000eb0:	480f      	ldr	r0, [pc, #60]	; (8000ef0 <HAL_SPI_MspInit+0x10c>)
 8000eb2:	f001 fd3f 	bl	8002934 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_7;
 8000eb6:	2380      	movs	r3, #128	; 0x80
 8000eb8:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000ebc:	2302      	movs	r3, #2
 8000ebe:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ec2:	2300      	movs	r3, #0
 8000ec4:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000ec8:	2300      	movs	r3, #0
 8000eca:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8000ece:	2305      	movs	r3, #5
 8000ed0:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000ed4:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 8000ed8:	4619      	mov	r1, r3
 8000eda:	4806      	ldr	r0, [pc, #24]	; (8000ef4 <HAL_SPI_MspInit+0x110>)
 8000edc:	f001 fd2a 	bl	8002934 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 8000ee0:	bf00      	nop
 8000ee2:	37e0      	adds	r7, #224	; 0xe0
 8000ee4:	46bd      	mov	sp, r7
 8000ee6:	bd80      	pop	{r7, pc}
 8000ee8:	40013000 	.word	0x40013000
 8000eec:	58024400 	.word	0x58024400
 8000ef0:	58020000 	.word	0x58020000
 8000ef4:	58020c00 	.word	0x58020c00

08000ef8 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000ef8:	b580      	push	{r7, lr}
 8000efa:	b0b6      	sub	sp, #216	; 0xd8
 8000efc:	af00      	add	r7, sp, #0
 8000efe:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000f00:	f107 03c4 	add.w	r3, r7, #196	; 0xc4
 8000f04:	2200      	movs	r2, #0
 8000f06:	601a      	str	r2, [r3, #0]
 8000f08:	605a      	str	r2, [r3, #4]
 8000f0a:	609a      	str	r2, [r3, #8]
 8000f0c:	60da      	str	r2, [r3, #12]
 8000f0e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000f10:	f107 0310 	add.w	r3, r7, #16
 8000f14:	22b4      	movs	r2, #180	; 0xb4
 8000f16:	2100      	movs	r1, #0
 8000f18:	4618      	mov	r0, r3
 8000f1a:	f006 f90f 	bl	800713c <memset>
  if(huart->Instance==USART3)
 8000f1e:	687b      	ldr	r3, [r7, #4]
 8000f20:	681b      	ldr	r3, [r3, #0]
 8000f22:	4a29      	ldr	r2, [pc, #164]	; (8000fc8 <HAL_UART_MspInit+0xd0>)
 8000f24:	4293      	cmp	r3, r2
 8000f26:	d14a      	bne.n	8000fbe <HAL_UART_MspInit+0xc6>
  /* USER CODE BEGIN USART3_MspInit 0 */

  /* USER CODE END USART3_MspInit 0 */
  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 8000f28:	2302      	movs	r3, #2
 8000f2a:	613b      	str	r3, [r7, #16]
    PeriphClkInitStruct.Usart234578ClockSelection = RCC_USART234578CLKSOURCE_D2PCLK1;
 8000f2c:	2300      	movs	r3, #0
 8000f2e:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000f32:	f107 0310 	add.w	r3, r7, #16
 8000f36:	4618      	mov	r0, r3
 8000f38:	f002 ff10 	bl	8003d5c <HAL_RCCEx_PeriphCLKConfig>
 8000f3c:	4603      	mov	r3, r0
 8000f3e:	2b00      	cmp	r3, #0
 8000f40:	d001      	beq.n	8000f46 <HAL_UART_MspInit+0x4e>
    {
      Error_Handler();
 8000f42:	f7ff fe61 	bl	8000c08 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 8000f46:	4b21      	ldr	r3, [pc, #132]	; (8000fcc <HAL_UART_MspInit+0xd4>)
 8000f48:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8000f4c:	4a1f      	ldr	r2, [pc, #124]	; (8000fcc <HAL_UART_MspInit+0xd4>)
 8000f4e:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000f52:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8000f56:	4b1d      	ldr	r3, [pc, #116]	; (8000fcc <HAL_UART_MspInit+0xd4>)
 8000f58:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8000f5c:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8000f60:	60fb      	str	r3, [r7, #12]
 8000f62:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 8000f64:	4b19      	ldr	r3, [pc, #100]	; (8000fcc <HAL_UART_MspInit+0xd4>)
 8000f66:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000f6a:	4a18      	ldr	r2, [pc, #96]	; (8000fcc <HAL_UART_MspInit+0xd4>)
 8000f6c:	f043 0308 	orr.w	r3, r3, #8
 8000f70:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000f74:	4b15      	ldr	r3, [pc, #84]	; (8000fcc <HAL_UART_MspInit+0xd4>)
 8000f76:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000f7a:	f003 0308 	and.w	r3, r3, #8
 8000f7e:	60bb      	str	r3, [r7, #8]
 8000f80:	68bb      	ldr	r3, [r7, #8]
    /**USART3 GPIO Configuration
    PD8     ------> USART3_TX
    PD9     ------> USART3_RX
    */
    GPIO_InitStruct.Pin = STLK_VCP_RX_Pin|STLK_VCP_TX_Pin;
 8000f82:	f44f 7340 	mov.w	r3, #768	; 0x300
 8000f86:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000f8a:	2302      	movs	r3, #2
 8000f8c:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f90:	2300      	movs	r3, #0
 8000f92:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000f96:	2300      	movs	r3, #0
 8000f98:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8000f9c:	2307      	movs	r3, #7
 8000f9e:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000fa2:	f107 03c4 	add.w	r3, r7, #196	; 0xc4
 8000fa6:	4619      	mov	r1, r3
 8000fa8:	4809      	ldr	r0, [pc, #36]	; (8000fd0 <HAL_UART_MspInit+0xd8>)
 8000faa:	f001 fcc3 	bl	8002934 <HAL_GPIO_Init>

    /* USART3 interrupt Init */
    HAL_NVIC_SetPriority(USART3_IRQn, 0, 0);
 8000fae:	2200      	movs	r2, #0
 8000fb0:	2100      	movs	r1, #0
 8000fb2:	2027      	movs	r0, #39	; 0x27
 8000fb4:	f000 fb11 	bl	80015da <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART3_IRQn);
 8000fb8:	2027      	movs	r0, #39	; 0x27
 8000fba:	f000 fb28 	bl	800160e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 8000fbe:	bf00      	nop
 8000fc0:	37d8      	adds	r7, #216	; 0xd8
 8000fc2:	46bd      	mov	sp, r7
 8000fc4:	bd80      	pop	{r7, pc}
 8000fc6:	bf00      	nop
 8000fc8:	40004800 	.word	0x40004800
 8000fcc:	58024400 	.word	0x58024400
 8000fd0:	58020c00 	.word	0x58020c00

08000fd4 <HAL_FMC_MspInit>:

}

static uint32_t FMC_Initialized = 0;

static void HAL_FMC_MspInit(void){
 8000fd4:	b580      	push	{r7, lr}
 8000fd6:	b0b4      	sub	sp, #208	; 0xd0
 8000fd8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN FMC_MspInit 0 */

  /* USER CODE END FMC_MspInit 0 */
  GPIO_InitTypeDef GPIO_InitStruct ={0};
 8000fda:	f107 03bc 	add.w	r3, r7, #188	; 0xbc
 8000fde:	2200      	movs	r2, #0
 8000fe0:	601a      	str	r2, [r3, #0]
 8000fe2:	605a      	str	r2, [r3, #4]
 8000fe4:	609a      	str	r2, [r3, #8]
 8000fe6:	60da      	str	r2, [r3, #12]
 8000fe8:	611a      	str	r2, [r3, #16]
  if (FMC_Initialized) {
 8000fea:	4b43      	ldr	r3, [pc, #268]	; (80010f8 <HAL_FMC_MspInit+0x124>)
 8000fec:	681b      	ldr	r3, [r3, #0]
 8000fee:	2b00      	cmp	r3, #0
 8000ff0:	d17e      	bne.n	80010f0 <HAL_FMC_MspInit+0x11c>
    return;
  }
  FMC_Initialized = 1;
 8000ff2:	4b41      	ldr	r3, [pc, #260]	; (80010f8 <HAL_FMC_MspInit+0x124>)
 8000ff4:	2201      	movs	r2, #1
 8000ff6:	601a      	str	r2, [r3, #0]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000ff8:	f107 0308 	add.w	r3, r7, #8
 8000ffc:	22b4      	movs	r2, #180	; 0xb4
 8000ffe:	2100      	movs	r1, #0
 8001000:	4618      	mov	r0, r3
 8001002:	f006 f89b 	bl	800713c <memset>

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_FMC;
 8001006:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800100a:	60bb      	str	r3, [r7, #8]
    PeriphClkInitStruct.FmcClockSelection = RCC_FMCCLKSOURCE_D1HCLK;
 800100c:	2300      	movs	r3, #0
 800100e:	64fb      	str	r3, [r7, #76]	; 0x4c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001010:	f107 0308 	add.w	r3, r7, #8
 8001014:	4618      	mov	r0, r3
 8001016:	f002 fea1 	bl	8003d5c <HAL_RCCEx_PeriphCLKConfig>
 800101a:	4603      	mov	r3, r0
 800101c:	2b00      	cmp	r3, #0
 800101e:	d001      	beq.n	8001024 <HAL_FMC_MspInit+0x50>
    {
      Error_Handler();
 8001020:	f7ff fdf2 	bl	8000c08 <Error_Handler>
    }

  /* Peripheral clock enable */
  __HAL_RCC_FMC_CLK_ENABLE();
 8001024:	4b35      	ldr	r3, [pc, #212]	; (80010fc <HAL_FMC_MspInit+0x128>)
 8001026:	f8d3 30d4 	ldr.w	r3, [r3, #212]	; 0xd4
 800102a:	4a34      	ldr	r2, [pc, #208]	; (80010fc <HAL_FMC_MspInit+0x128>)
 800102c:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8001030:	f8c2 30d4 	str.w	r3, [r2, #212]	; 0xd4
 8001034:	4b31      	ldr	r3, [pc, #196]	; (80010fc <HAL_FMC_MspInit+0x128>)
 8001036:	f8d3 30d4 	ldr.w	r3, [r3, #212]	; 0xd4
 800103a:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800103e:	607b      	str	r3, [r7, #4]
 8001040:	687b      	ldr	r3, [r7, #4]
  PD0   ------> FMC_D2
  PD1   ------> FMC_D3
  PD4   ------> FMC_NOE
  PD5   ------> FMC_NWE
  */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8001042:	2303      	movs	r3, #3
 8001044:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001048:	2302      	movs	r3, #2
 800104a:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800104e:	2300      	movs	r3, #0
 8001050:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001054:	2303      	movs	r3, #3
 8001056:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 800105a:	230c      	movs	r3, #12
 800105c:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8001060:	f107 03bc 	add.w	r3, r7, #188	; 0xbc
 8001064:	4619      	mov	r1, r3
 8001066:	4826      	ldr	r0, [pc, #152]	; (8001100 <HAL_FMC_MspInit+0x12c>)
 8001068:	f001 fc64 	bl	8002934 <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = GPIO_PIN_7|GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10;
 800106c:	f44f 63f0 	mov.w	r3, #1920	; 0x780
 8001070:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001074:	2302      	movs	r3, #2
 8001076:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800107a:	2300      	movs	r3, #0
 800107c:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001080:	2303      	movs	r3, #3
 8001082:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8001086:	230c      	movs	r3, #12
 8001088:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 800108c:	f107 03bc 	add.w	r3, r7, #188	; 0xbc
 8001090:	4619      	mov	r1, r3
 8001092:	481c      	ldr	r0, [pc, #112]	; (8001104 <HAL_FMC_MspInit+0x130>)
 8001094:	f001 fc4e 	bl	8002934 <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = GPIO_PIN_14|GPIO_PIN_15|GPIO_PIN_0|GPIO_PIN_1
 8001098:	f24c 0333 	movw	r3, #49203	; 0xc033
 800109c:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
                          |GPIO_PIN_4|GPIO_PIN_5;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80010a0:	2302      	movs	r3, #2
 80010a2:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80010a6:	2300      	movs	r3, #0
 80010a8:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80010ac:	2303      	movs	r3, #3
 80010ae:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 80010b2:	230c      	movs	r3, #12
 80010b4:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80010b8:	f107 03bc 	add.w	r3, r7, #188	; 0xbc
 80010bc:	4619      	mov	r1, r3
 80010be:	4812      	ldr	r0, [pc, #72]	; (8001108 <HAL_FMC_MspInit+0x134>)
 80010c0:	f001 fc38 	bl	8002934 <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = GPIO_PIN_7;
 80010c4:	2380      	movs	r3, #128	; 0x80
 80010c6:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80010ca:	2302      	movs	r3, #2
 80010cc:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80010d0:	2300      	movs	r3, #0
 80010d2:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80010d6:	2303      	movs	r3, #3
 80010d8:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
  GPIO_InitStruct.Alternate = GPIO_AF9_FMC;
 80010dc:	2309      	movs	r3, #9
 80010de:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80010e2:	f107 03bc 	add.w	r3, r7, #188	; 0xbc
 80010e6:	4619      	mov	r1, r3
 80010e8:	4808      	ldr	r0, [pc, #32]	; (800110c <HAL_FMC_MspInit+0x138>)
 80010ea:	f001 fc23 	bl	8002934 <HAL_GPIO_Init>
 80010ee:	e000      	b.n	80010f2 <HAL_FMC_MspInit+0x11e>
    return;
 80010f0:	bf00      	nop

  /* USER CODE BEGIN FMC_MspInit 1 */

  /* USER CODE END FMC_MspInit 1 */
}
 80010f2:	37d0      	adds	r7, #208	; 0xd0
 80010f4:	46bd      	mov	sp, r7
 80010f6:	bd80      	pop	{r7, pc}
 80010f8:	200000ec 	.word	0x200000ec
 80010fc:	58024400 	.word	0x58024400
 8001100:	58021400 	.word	0x58021400
 8001104:	58021000 	.word	0x58021000
 8001108:	58020c00 	.word	0x58020c00
 800110c:	58020800 	.word	0x58020800

08001110 <HAL_NOR_MspInit>:

void HAL_NOR_MspInit(NOR_HandleTypeDef* hnor){
 8001110:	b580      	push	{r7, lr}
 8001112:	b082      	sub	sp, #8
 8001114:	af00      	add	r7, sp, #0
 8001116:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN NOR_MspInit 0 */

  /* USER CODE END NOR_MspInit 0 */
  HAL_FMC_MspInit();
 8001118:	f7ff ff5c 	bl	8000fd4 <HAL_FMC_MspInit>
  /* USER CODE BEGIN NOR_MspInit 1 */

  /* USER CODE END NOR_MspInit 1 */
}
 800111c:	bf00      	nop
 800111e:	3708      	adds	r7, #8
 8001120:	46bd      	mov	sp, r7
 8001122:	bd80      	pop	{r7, pc}

08001124 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001124:	b480      	push	{r7}
 8001126:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001128:	e7fe      	b.n	8001128 <NMI_Handler+0x4>

0800112a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800112a:	b480      	push	{r7}
 800112c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800112e:	e7fe      	b.n	800112e <HardFault_Handler+0x4>

08001130 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001130:	b480      	push	{r7}
 8001132:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001134:	e7fe      	b.n	8001134 <MemManage_Handler+0x4>

08001136 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001136:	b480      	push	{r7}
 8001138:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800113a:	e7fe      	b.n	800113a <BusFault_Handler+0x4>

0800113c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800113c:	b480      	push	{r7}
 800113e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001140:	e7fe      	b.n	8001140 <UsageFault_Handler+0x4>

08001142 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001142:	b480      	push	{r7}
 8001144:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001146:	bf00      	nop
 8001148:	46bd      	mov	sp, r7
 800114a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800114e:	4770      	bx	lr

08001150 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001150:	b480      	push	{r7}
 8001152:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001154:	bf00      	nop
 8001156:	46bd      	mov	sp, r7
 8001158:	f85d 7b04 	ldr.w	r7, [sp], #4
 800115c:	4770      	bx	lr

0800115e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800115e:	b480      	push	{r7}
 8001160:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001162:	bf00      	nop
 8001164:	46bd      	mov	sp, r7
 8001166:	f85d 7b04 	ldr.w	r7, [sp], #4
 800116a:	4770      	bx	lr

0800116c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800116c:	b580      	push	{r7, lr}
 800116e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001170:	f000 f924 	bl	80013bc <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001174:	bf00      	nop
 8001176:	bd80      	pop	{r7, pc}

08001178 <USART3_IRQHandler>:

/**
  * @brief This function handles USART3 global interrupt.
  */
void USART3_IRQHandler(void)
{
 8001178:	b580      	push	{r7, lr}
 800117a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART3_IRQn 0 */

  /* USER CODE END USART3_IRQn 0 */
  HAL_UART_IRQHandler(&huart3);
 800117c:	4802      	ldr	r0, [pc, #8]	; (8001188 <USART3_IRQHandler+0x10>)
 800117e:	f004 fa77 	bl	8005670 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART3_IRQn 1 */

  /* USER CODE END USART3_IRQn 1 */
}
 8001182:	bf00      	nop
 8001184:	bd80      	pop	{r7, pc}
 8001186:	bf00      	nop
 8001188:	200000f4 	.word	0x200000f4

0800118c <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 800118c:	b480      	push	{r7}
 800118e:	af00      	add	r7, sp, #0
 __IO uint32_t tmpreg;
#endif /* DATA_IN_D2_SRAM */

  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8001190:	4b34      	ldr	r3, [pc, #208]	; (8001264 <SystemInit+0xd8>)
 8001192:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001196:	4a33      	ldr	r2, [pc, #204]	; (8001264 <SystemInit+0xd8>)
 8001198:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800119c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/

   /* Increasing the CPU frequency */
  if(FLASH_LATENCY_DEFAULT  > (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 80011a0:	4b31      	ldr	r3, [pc, #196]	; (8001268 <SystemInit+0xdc>)
 80011a2:	681b      	ldr	r3, [r3, #0]
 80011a4:	f003 030f 	and.w	r3, r3, #15
 80011a8:	2b06      	cmp	r3, #6
 80011aa:	d807      	bhi.n	80011bc <SystemInit+0x30>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
	MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 80011ac:	4b2e      	ldr	r3, [pc, #184]	; (8001268 <SystemInit+0xdc>)
 80011ae:	681b      	ldr	r3, [r3, #0]
 80011b0:	f023 030f 	bic.w	r3, r3, #15
 80011b4:	4a2c      	ldr	r2, [pc, #176]	; (8001268 <SystemInit+0xdc>)
 80011b6:	f043 0307 	orr.w	r3, r3, #7
 80011ba:	6013      	str	r3, [r2, #0]
  }

  /* Set HSION bit */
  RCC->CR |= RCC_CR_HSION;
 80011bc:	4b2b      	ldr	r3, [pc, #172]	; (800126c <SystemInit+0xe0>)
 80011be:	681b      	ldr	r3, [r3, #0]
 80011c0:	4a2a      	ldr	r2, [pc, #168]	; (800126c <SystemInit+0xe0>)
 80011c2:	f043 0301 	orr.w	r3, r3, #1
 80011c6:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 80011c8:	4b28      	ldr	r3, [pc, #160]	; (800126c <SystemInit+0xe0>)
 80011ca:	2200      	movs	r2, #0
 80011cc:	611a      	str	r2, [r3, #16]

  /* Reset HSEON, HSECSSON, CSION, HSI48ON, CSIKERON, PLL1ON, PLL2ON and PLL3ON bits */
  RCC->CR &= 0xEAF6ED7FU;
 80011ce:	4b27      	ldr	r3, [pc, #156]	; (800126c <SystemInit+0xe0>)
 80011d0:	681a      	ldr	r2, [r3, #0]
 80011d2:	4926      	ldr	r1, [pc, #152]	; (800126c <SystemInit+0xe0>)
 80011d4:	4b26      	ldr	r3, [pc, #152]	; (8001270 <SystemInit+0xe4>)
 80011d6:	4013      	ands	r3, r2
 80011d8:	600b      	str	r3, [r1, #0]
  
   /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLASH_LATENCY_DEFAULT  < (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 80011da:	4b23      	ldr	r3, [pc, #140]	; (8001268 <SystemInit+0xdc>)
 80011dc:	681b      	ldr	r3, [r3, #0]
 80011de:	f003 0308 	and.w	r3, r3, #8
 80011e2:	2b00      	cmp	r3, #0
 80011e4:	d007      	beq.n	80011f6 <SystemInit+0x6a>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
	MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 80011e6:	4b20      	ldr	r3, [pc, #128]	; (8001268 <SystemInit+0xdc>)
 80011e8:	681b      	ldr	r3, [r3, #0]
 80011ea:	f023 030f 	bic.w	r3, r3, #15
 80011ee:	4a1e      	ldr	r2, [pc, #120]	; (8001268 <SystemInit+0xdc>)
 80011f0:	f043 0307 	orr.w	r3, r3, #7
 80011f4:	6013      	str	r3, [r2, #0]
  }

#if defined(D3_SRAM_BASE)
  /* Reset D1CFGR register */
  RCC->D1CFGR = 0x00000000;
 80011f6:	4b1d      	ldr	r3, [pc, #116]	; (800126c <SystemInit+0xe0>)
 80011f8:	2200      	movs	r2, #0
 80011fa:	619a      	str	r2, [r3, #24]

  /* Reset D2CFGR register */
  RCC->D2CFGR = 0x00000000;
 80011fc:	4b1b      	ldr	r3, [pc, #108]	; (800126c <SystemInit+0xe0>)
 80011fe:	2200      	movs	r2, #0
 8001200:	61da      	str	r2, [r3, #28]

  /* Reset D3CFGR register */
  RCC->D3CFGR = 0x00000000;
 8001202:	4b1a      	ldr	r3, [pc, #104]	; (800126c <SystemInit+0xe0>)
 8001204:	2200      	movs	r2, #0
 8001206:	621a      	str	r2, [r3, #32]

  /* Reset SRDCFGR register */
  RCC->SRDCFGR = 0x00000000;
#endif
  /* Reset PLLCKSELR register */
  RCC->PLLCKSELR = 0x02020200;
 8001208:	4b18      	ldr	r3, [pc, #96]	; (800126c <SystemInit+0xe0>)
 800120a:	4a1a      	ldr	r2, [pc, #104]	; (8001274 <SystemInit+0xe8>)
 800120c:	629a      	str	r2, [r3, #40]	; 0x28

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x01FF0000;
 800120e:	4b17      	ldr	r3, [pc, #92]	; (800126c <SystemInit+0xe0>)
 8001210:	4a19      	ldr	r2, [pc, #100]	; (8001278 <SystemInit+0xec>)
 8001212:	62da      	str	r2, [r3, #44]	; 0x2c
  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x01010280;
 8001214:	4b15      	ldr	r3, [pc, #84]	; (800126c <SystemInit+0xe0>)
 8001216:	4a19      	ldr	r2, [pc, #100]	; (800127c <SystemInit+0xf0>)
 8001218:	631a      	str	r2, [r3, #48]	; 0x30
  /* Reset PLL1FRACR register */
  RCC->PLL1FRACR = 0x00000000;
 800121a:	4b14      	ldr	r3, [pc, #80]	; (800126c <SystemInit+0xe0>)
 800121c:	2200      	movs	r2, #0
 800121e:	635a      	str	r2, [r3, #52]	; 0x34

  /* Reset PLL2DIVR register */
  RCC->PLL2DIVR = 0x01010280;
 8001220:	4b12      	ldr	r3, [pc, #72]	; (800126c <SystemInit+0xe0>)
 8001222:	4a16      	ldr	r2, [pc, #88]	; (800127c <SystemInit+0xf0>)
 8001224:	639a      	str	r2, [r3, #56]	; 0x38

  /* Reset PLL2FRACR register */

  RCC->PLL2FRACR = 0x00000000;
 8001226:	4b11      	ldr	r3, [pc, #68]	; (800126c <SystemInit+0xe0>)
 8001228:	2200      	movs	r2, #0
 800122a:	63da      	str	r2, [r3, #60]	; 0x3c
  /* Reset PLL3DIVR register */
  RCC->PLL3DIVR = 0x01010280;
 800122c:	4b0f      	ldr	r3, [pc, #60]	; (800126c <SystemInit+0xe0>)
 800122e:	4a13      	ldr	r2, [pc, #76]	; (800127c <SystemInit+0xf0>)
 8001230:	641a      	str	r2, [r3, #64]	; 0x40

  /* Reset PLL3FRACR register */
  RCC->PLL3FRACR = 0x00000000;
 8001232:	4b0e      	ldr	r3, [pc, #56]	; (800126c <SystemInit+0xe0>)
 8001234:	2200      	movs	r2, #0
 8001236:	645a      	str	r2, [r3, #68]	; 0x44

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8001238:	4b0c      	ldr	r3, [pc, #48]	; (800126c <SystemInit+0xe0>)
 800123a:	681b      	ldr	r3, [r3, #0]
 800123c:	4a0b      	ldr	r2, [pc, #44]	; (800126c <SystemInit+0xe0>)
 800123e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001242:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 8001244:	4b09      	ldr	r3, [pc, #36]	; (800126c <SystemInit+0xe0>)
 8001246:	2200      	movs	r2, #0
 8001248:	661a      	str	r2, [r3, #96]	; 0x60
  /*
   * Disable the FMC bank1 (enabled after reset).
   * This, prevents CPU speculation access on this bank which blocks the use of FMC during
   * 24us. During this time the others FMC master (such as LTDC) cannot use it!
   */
  FMC_Bank1_R->BTCR[0] = 0x000030D2;
 800124a:	4b0d      	ldr	r3, [pc, #52]	; (8001280 <SystemInit+0xf4>)
 800124c:	f243 02d2 	movw	r2, #12498	; 0x30d2
 8001250:	601a      	str	r2, [r3, #0]

  /* Configure the Vector Table location add offset address for cortex-M7 ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = D1_AXISRAM_BASE  | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal AXI-RAM */
#else
  SCB->VTOR = FLASH_BANK1_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8001252:	4b04      	ldr	r3, [pc, #16]	; (8001264 <SystemInit+0xd8>)
 8001254:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8001258:	609a      	str	r2, [r3, #8]
#endif

#endif /*DUAL_CORE && CORE_CM4*/

}
 800125a:	bf00      	nop
 800125c:	46bd      	mov	sp, r7
 800125e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001262:	4770      	bx	lr
 8001264:	e000ed00 	.word	0xe000ed00
 8001268:	52002000 	.word	0x52002000
 800126c:	58024400 	.word	0x58024400
 8001270:	eaf6ed7f 	.word	0xeaf6ed7f
 8001274:	02020200 	.word	0x02020200
 8001278:	01ff0000 	.word	0x01ff0000
 800127c:	01010280 	.word	0x01010280
 8001280:	52004000 	.word	0x52004000

08001284 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack      /* set stack pointer */
 8001284:	f8df d034 	ldr.w	sp, [pc, #52]	; 80012bc <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit
 8001288:	f7ff ff80 	bl	800118c <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 800128c:	480c      	ldr	r0, [pc, #48]	; (80012c0 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 800128e:	490d      	ldr	r1, [pc, #52]	; (80012c4 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8001290:	4a0d      	ldr	r2, [pc, #52]	; (80012c8 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8001292:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001294:	e002      	b.n	800129c <LoopCopyDataInit>

08001296 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001296:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001298:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800129a:	3304      	adds	r3, #4

0800129c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800129c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800129e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80012a0:	d3f9      	bcc.n	8001296 <CopyDataInit>
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80012a2:	4a0a      	ldr	r2, [pc, #40]	; (80012cc <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 80012a4:	4c0a      	ldr	r4, [pc, #40]	; (80012d0 <LoopFillZerobss+0x22>)
  movs r3, #0
 80012a6:	2300      	movs	r3, #0
  b LoopFillZerobss
 80012a8:	e001      	b.n	80012ae <LoopFillZerobss>

080012aa <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80012aa:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80012ac:	3204      	adds	r2, #4

080012ae <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80012ae:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80012b0:	d3fb      	bcc.n	80012aa <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80012b2:	f005 ff1f 	bl	80070f4 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80012b6:	f7ff f9a5 	bl	8000604 <main>
  bx  lr
 80012ba:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 80012bc:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 80012c0:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80012c4:	20000010 	.word	0x20000010
  ldr r2, =_sidata
 80012c8:	080071ac 	.word	0x080071ac
  ldr r2, =_sbss
 80012cc:	200000d0 	.word	0x200000d0
  ldr r4, =_ebss
 80012d0:	20000318 	.word	0x20000318

080012d4 <ADC3_IRQHandler>:
 * @retval None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80012d4:	e7fe      	b.n	80012d4 <ADC3_IRQHandler>
	...

080012d8 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80012d8:	b580      	push	{r7, lr}
 80012da:	b082      	sub	sp, #8
 80012dc:	af00      	add	r7, sp, #0
   __HAL_ART_CONFIG_BASE_ADDRESS(0x08100000UL);  /* Configure the Cortex-M4 ART Base address to the Flash Bank 2 : */
   __HAL_ART_ENABLE();                           /* Enable the Cortex-M4 ART */
#endif /* DUAL_CORE &&  CORE_CM4 */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80012de:	2003      	movs	r0, #3
 80012e0:	f000 f970 	bl	80015c4 <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 80012e4:	f002 fb64 	bl	80039b0 <HAL_RCC_GetSysClockFreq>
 80012e8:	4602      	mov	r2, r0
 80012ea:	4b15      	ldr	r3, [pc, #84]	; (8001340 <HAL_Init+0x68>)
 80012ec:	699b      	ldr	r3, [r3, #24]
 80012ee:	0a1b      	lsrs	r3, r3, #8
 80012f0:	f003 030f 	and.w	r3, r3, #15
 80012f4:	4913      	ldr	r1, [pc, #76]	; (8001344 <HAL_Init+0x6c>)
 80012f6:	5ccb      	ldrb	r3, [r1, r3]
 80012f8:	f003 031f 	and.w	r3, r3, #31
 80012fc:	fa22 f303 	lsr.w	r3, r2, r3
 8001300:	607b      	str	r3, [r7, #4]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

  /* Update the SystemD2Clock global variable */
#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8001302:	4b0f      	ldr	r3, [pc, #60]	; (8001340 <HAL_Init+0x68>)
 8001304:	699b      	ldr	r3, [r3, #24]
 8001306:	f003 030f 	and.w	r3, r3, #15
 800130a:	4a0e      	ldr	r2, [pc, #56]	; (8001344 <HAL_Init+0x6c>)
 800130c:	5cd3      	ldrb	r3, [r2, r3]
 800130e:	f003 031f 	and.w	r3, r3, #31
 8001312:	687a      	ldr	r2, [r7, #4]
 8001314:	fa22 f303 	lsr.w	r3, r2, r3
 8001318:	4a0b      	ldr	r2, [pc, #44]	; (8001348 <HAL_Init+0x70>)
 800131a:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 800131c:	4a0b      	ldr	r2, [pc, #44]	; (800134c <HAL_Init+0x74>)
 800131e:	687b      	ldr	r3, [r7, #4]
 8001320:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8001322:	2000      	movs	r0, #0
 8001324:	f000 f814 	bl	8001350 <HAL_InitTick>
 8001328:	4603      	mov	r3, r0
 800132a:	2b00      	cmp	r3, #0
 800132c:	d001      	beq.n	8001332 <HAL_Init+0x5a>
  {
    return HAL_ERROR;
 800132e:	2301      	movs	r3, #1
 8001330:	e002      	b.n	8001338 <HAL_Init+0x60>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 8001332:	f7ff fc6f 	bl	8000c14 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001336:	2300      	movs	r3, #0
}
 8001338:	4618      	mov	r0, r3
 800133a:	3708      	adds	r7, #8
 800133c:	46bd      	mov	sp, r7
 800133e:	bd80      	pop	{r7, pc}
 8001340:	58024400 	.word	0x58024400
 8001344:	08007164 	.word	0x08007164
 8001348:	20000004 	.word	0x20000004
 800134c:	20000000 	.word	0x20000000

08001350 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001350:	b580      	push	{r7, lr}
 8001352:	b082      	sub	sp, #8
 8001354:	af00      	add	r7, sp, #0
 8001356:	6078      	str	r0, [r7, #4]
  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that don't take the value zero)*/
  if((uint32_t)uwTickFreq == 0UL)
 8001358:	4b15      	ldr	r3, [pc, #84]	; (80013b0 <HAL_InitTick+0x60>)
 800135a:	781b      	ldrb	r3, [r3, #0]
 800135c:	2b00      	cmp	r3, #0
 800135e:	d101      	bne.n	8001364 <HAL_InitTick+0x14>
  {
    return HAL_ERROR;
 8001360:	2301      	movs	r3, #1
 8001362:	e021      	b.n	80013a8 <HAL_InitTick+0x58>
  }

    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000UL / (uint32_t)uwTickFreq)) > 0U)
 8001364:	4b13      	ldr	r3, [pc, #76]	; (80013b4 <HAL_InitTick+0x64>)
 8001366:	681a      	ldr	r2, [r3, #0]
 8001368:	4b11      	ldr	r3, [pc, #68]	; (80013b0 <HAL_InitTick+0x60>)
 800136a:	781b      	ldrb	r3, [r3, #0]
 800136c:	4619      	mov	r1, r3
 800136e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001372:	fbb3 f3f1 	udiv	r3, r3, r1
 8001376:	fbb2 f3f3 	udiv	r3, r2, r3
 800137a:	4618      	mov	r0, r3
 800137c:	f000 f955 	bl	800162a <HAL_SYSTICK_Config>
 8001380:	4603      	mov	r3, r0
 8001382:	2b00      	cmp	r3, #0
 8001384:	d001      	beq.n	800138a <HAL_InitTick+0x3a>
    {
      return HAL_ERROR;
 8001386:	2301      	movs	r3, #1
 8001388:	e00e      	b.n	80013a8 <HAL_InitTick+0x58>
    }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800138a:	687b      	ldr	r3, [r7, #4]
 800138c:	2b0f      	cmp	r3, #15
 800138e:	d80a      	bhi.n	80013a6 <HAL_InitTick+0x56>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001390:	2200      	movs	r2, #0
 8001392:	6879      	ldr	r1, [r7, #4]
 8001394:	f04f 30ff 	mov.w	r0, #4294967295
 8001398:	f000 f91f 	bl	80015da <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 800139c:	4a06      	ldr	r2, [pc, #24]	; (80013b8 <HAL_InitTick+0x68>)
 800139e:	687b      	ldr	r3, [r7, #4]
 80013a0:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80013a2:	2300      	movs	r3, #0
 80013a4:	e000      	b.n	80013a8 <HAL_InitTick+0x58>
    return HAL_ERROR;
 80013a6:	2301      	movs	r3, #1
}
 80013a8:	4618      	mov	r0, r3
 80013aa:	3708      	adds	r7, #8
 80013ac:	46bd      	mov	sp, r7
 80013ae:	bd80      	pop	{r7, pc}
 80013b0:	2000000c 	.word	0x2000000c
 80013b4:	20000000 	.word	0x20000000
 80013b8:	20000008 	.word	0x20000008

080013bc <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80013bc:	b480      	push	{r7}
 80013be:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 80013c0:	4b06      	ldr	r3, [pc, #24]	; (80013dc <HAL_IncTick+0x20>)
 80013c2:	781b      	ldrb	r3, [r3, #0]
 80013c4:	461a      	mov	r2, r3
 80013c6:	4b06      	ldr	r3, [pc, #24]	; (80013e0 <HAL_IncTick+0x24>)
 80013c8:	681b      	ldr	r3, [r3, #0]
 80013ca:	4413      	add	r3, r2
 80013cc:	4a04      	ldr	r2, [pc, #16]	; (80013e0 <HAL_IncTick+0x24>)
 80013ce:	6013      	str	r3, [r2, #0]
}
 80013d0:	bf00      	nop
 80013d2:	46bd      	mov	sp, r7
 80013d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013d8:	4770      	bx	lr
 80013da:	bf00      	nop
 80013dc:	2000000c 	.word	0x2000000c
 80013e0:	20000314 	.word	0x20000314

080013e4 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80013e4:	b480      	push	{r7}
 80013e6:	af00      	add	r7, sp, #0
  return uwTick;
 80013e8:	4b03      	ldr	r3, [pc, #12]	; (80013f8 <HAL_GetTick+0x14>)
 80013ea:	681b      	ldr	r3, [r3, #0]
}
 80013ec:	4618      	mov	r0, r3
 80013ee:	46bd      	mov	sp, r7
 80013f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013f4:	4770      	bx	lr
 80013f6:	bf00      	nop
 80013f8:	20000314 	.word	0x20000314

080013fc <HAL_SYSCFG_ETHInterfaceSelect>:
  *   @arg SYSCFG_ETH_MII : Select the Media Independent Interface
  *   @arg SYSCFG_ETH_RMII: Select the Reduced Media Independent Interface
  * @retval None
  */
void HAL_SYSCFG_ETHInterfaceSelect(uint32_t SYSCFG_ETHInterface)
{
 80013fc:	b480      	push	{r7}
 80013fe:	b083      	sub	sp, #12
 8001400:	af00      	add	r7, sp, #0
 8001402:	6078      	str	r0, [r7, #4]
  /* Check the parameter */
  assert_param(IS_SYSCFG_ETHERNET_CONFIG(SYSCFG_ETHInterface));

  MODIFY_REG(SYSCFG->PMCR, SYSCFG_PMCR_EPIS_SEL, (uint32_t)(SYSCFG_ETHInterface));
 8001404:	4b06      	ldr	r3, [pc, #24]	; (8001420 <HAL_SYSCFG_ETHInterfaceSelect+0x24>)
 8001406:	685b      	ldr	r3, [r3, #4]
 8001408:	f423 0260 	bic.w	r2, r3, #14680064	; 0xe00000
 800140c:	4904      	ldr	r1, [pc, #16]	; (8001420 <HAL_SYSCFG_ETHInterfaceSelect+0x24>)
 800140e:	687b      	ldr	r3, [r7, #4]
 8001410:	4313      	orrs	r3, r2
 8001412:	604b      	str	r3, [r1, #4]
}
 8001414:	bf00      	nop
 8001416:	370c      	adds	r7, #12
 8001418:	46bd      	mov	sp, r7
 800141a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800141e:	4770      	bx	lr
 8001420:	58000400 	.word	0x58000400

08001424 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001424:	b480      	push	{r7}
 8001426:	b085      	sub	sp, #20
 8001428:	af00      	add	r7, sp, #0
 800142a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800142c:	687b      	ldr	r3, [r7, #4]
 800142e:	f003 0307 	and.w	r3, r3, #7
 8001432:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001434:	4b0b      	ldr	r3, [pc, #44]	; (8001464 <__NVIC_SetPriorityGrouping+0x40>)
 8001436:	68db      	ldr	r3, [r3, #12]
 8001438:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800143a:	68ba      	ldr	r2, [r7, #8]
 800143c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001440:	4013      	ands	r3, r2
 8001442:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001444:	68fb      	ldr	r3, [r7, #12]
 8001446:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001448:	68bb      	ldr	r3, [r7, #8]
 800144a:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 800144c:	4b06      	ldr	r3, [pc, #24]	; (8001468 <__NVIC_SetPriorityGrouping+0x44>)
 800144e:	4313      	orrs	r3, r2
 8001450:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001452:	4a04      	ldr	r2, [pc, #16]	; (8001464 <__NVIC_SetPriorityGrouping+0x40>)
 8001454:	68bb      	ldr	r3, [r7, #8]
 8001456:	60d3      	str	r3, [r2, #12]
}
 8001458:	bf00      	nop
 800145a:	3714      	adds	r7, #20
 800145c:	46bd      	mov	sp, r7
 800145e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001462:	4770      	bx	lr
 8001464:	e000ed00 	.word	0xe000ed00
 8001468:	05fa0000 	.word	0x05fa0000

0800146c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800146c:	b480      	push	{r7}
 800146e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001470:	4b04      	ldr	r3, [pc, #16]	; (8001484 <__NVIC_GetPriorityGrouping+0x18>)
 8001472:	68db      	ldr	r3, [r3, #12]
 8001474:	0a1b      	lsrs	r3, r3, #8
 8001476:	f003 0307 	and.w	r3, r3, #7
}
 800147a:	4618      	mov	r0, r3
 800147c:	46bd      	mov	sp, r7
 800147e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001482:	4770      	bx	lr
 8001484:	e000ed00 	.word	0xe000ed00

08001488 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001488:	b480      	push	{r7}
 800148a:	b083      	sub	sp, #12
 800148c:	af00      	add	r7, sp, #0
 800148e:	4603      	mov	r3, r0
 8001490:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8001492:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001496:	2b00      	cmp	r3, #0
 8001498:	db0b      	blt.n	80014b2 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800149a:	88fb      	ldrh	r3, [r7, #6]
 800149c:	f003 021f 	and.w	r2, r3, #31
 80014a0:	4907      	ldr	r1, [pc, #28]	; (80014c0 <__NVIC_EnableIRQ+0x38>)
 80014a2:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80014a6:	095b      	lsrs	r3, r3, #5
 80014a8:	2001      	movs	r0, #1
 80014aa:	fa00 f202 	lsl.w	r2, r0, r2
 80014ae:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 80014b2:	bf00      	nop
 80014b4:	370c      	adds	r7, #12
 80014b6:	46bd      	mov	sp, r7
 80014b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014bc:	4770      	bx	lr
 80014be:	bf00      	nop
 80014c0:	e000e100 	.word	0xe000e100

080014c4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80014c4:	b480      	push	{r7}
 80014c6:	b083      	sub	sp, #12
 80014c8:	af00      	add	r7, sp, #0
 80014ca:	4603      	mov	r3, r0
 80014cc:	6039      	str	r1, [r7, #0]
 80014ce:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 80014d0:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80014d4:	2b00      	cmp	r3, #0
 80014d6:	db0a      	blt.n	80014ee <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80014d8:	683b      	ldr	r3, [r7, #0]
 80014da:	b2da      	uxtb	r2, r3
 80014dc:	490c      	ldr	r1, [pc, #48]	; (8001510 <__NVIC_SetPriority+0x4c>)
 80014de:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80014e2:	0112      	lsls	r2, r2, #4
 80014e4:	b2d2      	uxtb	r2, r2
 80014e6:	440b      	add	r3, r1
 80014e8:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80014ec:	e00a      	b.n	8001504 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80014ee:	683b      	ldr	r3, [r7, #0]
 80014f0:	b2da      	uxtb	r2, r3
 80014f2:	4908      	ldr	r1, [pc, #32]	; (8001514 <__NVIC_SetPriority+0x50>)
 80014f4:	88fb      	ldrh	r3, [r7, #6]
 80014f6:	f003 030f 	and.w	r3, r3, #15
 80014fa:	3b04      	subs	r3, #4
 80014fc:	0112      	lsls	r2, r2, #4
 80014fe:	b2d2      	uxtb	r2, r2
 8001500:	440b      	add	r3, r1
 8001502:	761a      	strb	r2, [r3, #24]
}
 8001504:	bf00      	nop
 8001506:	370c      	adds	r7, #12
 8001508:	46bd      	mov	sp, r7
 800150a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800150e:	4770      	bx	lr
 8001510:	e000e100 	.word	0xe000e100
 8001514:	e000ed00 	.word	0xe000ed00

08001518 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001518:	b480      	push	{r7}
 800151a:	b089      	sub	sp, #36	; 0x24
 800151c:	af00      	add	r7, sp, #0
 800151e:	60f8      	str	r0, [r7, #12]
 8001520:	60b9      	str	r1, [r7, #8]
 8001522:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001524:	68fb      	ldr	r3, [r7, #12]
 8001526:	f003 0307 	and.w	r3, r3, #7
 800152a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800152c:	69fb      	ldr	r3, [r7, #28]
 800152e:	f1c3 0307 	rsb	r3, r3, #7
 8001532:	2b04      	cmp	r3, #4
 8001534:	bf28      	it	cs
 8001536:	2304      	movcs	r3, #4
 8001538:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800153a:	69fb      	ldr	r3, [r7, #28]
 800153c:	3304      	adds	r3, #4
 800153e:	2b06      	cmp	r3, #6
 8001540:	d902      	bls.n	8001548 <NVIC_EncodePriority+0x30>
 8001542:	69fb      	ldr	r3, [r7, #28]
 8001544:	3b03      	subs	r3, #3
 8001546:	e000      	b.n	800154a <NVIC_EncodePriority+0x32>
 8001548:	2300      	movs	r3, #0
 800154a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800154c:	f04f 32ff 	mov.w	r2, #4294967295
 8001550:	69bb      	ldr	r3, [r7, #24]
 8001552:	fa02 f303 	lsl.w	r3, r2, r3
 8001556:	43da      	mvns	r2, r3
 8001558:	68bb      	ldr	r3, [r7, #8]
 800155a:	401a      	ands	r2, r3
 800155c:	697b      	ldr	r3, [r7, #20]
 800155e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001560:	f04f 31ff 	mov.w	r1, #4294967295
 8001564:	697b      	ldr	r3, [r7, #20]
 8001566:	fa01 f303 	lsl.w	r3, r1, r3
 800156a:	43d9      	mvns	r1, r3
 800156c:	687b      	ldr	r3, [r7, #4]
 800156e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001570:	4313      	orrs	r3, r2
         );
}
 8001572:	4618      	mov	r0, r3
 8001574:	3724      	adds	r7, #36	; 0x24
 8001576:	46bd      	mov	sp, r7
 8001578:	f85d 7b04 	ldr.w	r7, [sp], #4
 800157c:	4770      	bx	lr
	...

08001580 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001580:	b580      	push	{r7, lr}
 8001582:	b082      	sub	sp, #8
 8001584:	af00      	add	r7, sp, #0
 8001586:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001588:	687b      	ldr	r3, [r7, #4]
 800158a:	3b01      	subs	r3, #1
 800158c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001590:	d301      	bcc.n	8001596 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001592:	2301      	movs	r3, #1
 8001594:	e00f      	b.n	80015b6 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001596:	4a0a      	ldr	r2, [pc, #40]	; (80015c0 <SysTick_Config+0x40>)
 8001598:	687b      	ldr	r3, [r7, #4]
 800159a:	3b01      	subs	r3, #1
 800159c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800159e:	210f      	movs	r1, #15
 80015a0:	f04f 30ff 	mov.w	r0, #4294967295
 80015a4:	f7ff ff8e 	bl	80014c4 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80015a8:	4b05      	ldr	r3, [pc, #20]	; (80015c0 <SysTick_Config+0x40>)
 80015aa:	2200      	movs	r2, #0
 80015ac:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80015ae:	4b04      	ldr	r3, [pc, #16]	; (80015c0 <SysTick_Config+0x40>)
 80015b0:	2207      	movs	r2, #7
 80015b2:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80015b4:	2300      	movs	r3, #0
}
 80015b6:	4618      	mov	r0, r3
 80015b8:	3708      	adds	r7, #8
 80015ba:	46bd      	mov	sp, r7
 80015bc:	bd80      	pop	{r7, pc}
 80015be:	bf00      	nop
 80015c0:	e000e010 	.word	0xe000e010

080015c4 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80015c4:	b580      	push	{r7, lr}
 80015c6:	b082      	sub	sp, #8
 80015c8:	af00      	add	r7, sp, #0
 80015ca:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80015cc:	6878      	ldr	r0, [r7, #4]
 80015ce:	f7ff ff29 	bl	8001424 <__NVIC_SetPriorityGrouping>
}
 80015d2:	bf00      	nop
 80015d4:	3708      	adds	r7, #8
 80015d6:	46bd      	mov	sp, r7
 80015d8:	bd80      	pop	{r7, pc}

080015da <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80015da:	b580      	push	{r7, lr}
 80015dc:	b086      	sub	sp, #24
 80015de:	af00      	add	r7, sp, #0
 80015e0:	4603      	mov	r3, r0
 80015e2:	60b9      	str	r1, [r7, #8]
 80015e4:	607a      	str	r2, [r7, #4]
 80015e6:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 80015e8:	f7ff ff40 	bl	800146c <__NVIC_GetPriorityGrouping>
 80015ec:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80015ee:	687a      	ldr	r2, [r7, #4]
 80015f0:	68b9      	ldr	r1, [r7, #8]
 80015f2:	6978      	ldr	r0, [r7, #20]
 80015f4:	f7ff ff90 	bl	8001518 <NVIC_EncodePriority>
 80015f8:	4602      	mov	r2, r0
 80015fa:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 80015fe:	4611      	mov	r1, r2
 8001600:	4618      	mov	r0, r3
 8001602:	f7ff ff5f 	bl	80014c4 <__NVIC_SetPriority>
}
 8001606:	bf00      	nop
 8001608:	3718      	adds	r7, #24
 800160a:	46bd      	mov	sp, r7
 800160c:	bd80      	pop	{r7, pc}

0800160e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32h7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800160e:	b580      	push	{r7, lr}
 8001610:	b082      	sub	sp, #8
 8001612:	af00      	add	r7, sp, #0
 8001614:	4603      	mov	r3, r0
 8001616:	80fb      	strh	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001618:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800161c:	4618      	mov	r0, r3
 800161e:	f7ff ff33 	bl	8001488 <__NVIC_EnableIRQ>
}
 8001622:	bf00      	nop
 8001624:	3708      	adds	r7, #8
 8001626:	46bd      	mov	sp, r7
 8001628:	bd80      	pop	{r7, pc}

0800162a <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status   - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800162a:	b580      	push	{r7, lr}
 800162c:	b082      	sub	sp, #8
 800162e:	af00      	add	r7, sp, #0
 8001630:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001632:	6878      	ldr	r0, [r7, #4]
 8001634:	f7ff ffa4 	bl	8001580 <SysTick_Config>
 8001638:	4603      	mov	r3, r0
}
 800163a:	4618      	mov	r0, r3
 800163c:	3708      	adds	r7, #8
 800163e:	46bd      	mov	sp, r7
 8001640:	bd80      	pop	{r7, pc}
	...

08001644 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8001644:	b580      	push	{r7, lr}
 8001646:	b086      	sub	sp, #24
 8001648:	af00      	add	r7, sp, #0
 800164a:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs_dma;
  BDMA_Base_Registers *regs_bdma;
  const __IO uint32_t *enableRegister;

  uint32_t tickstart = HAL_GetTick();
 800164c:	f7ff feca 	bl	80013e4 <HAL_GetTick>
 8001650:	6138      	str	r0, [r7, #16]

 /* Check the DMA peripheral handle */
  if(hdma == NULL)
 8001652:	687b      	ldr	r3, [r7, #4]
 8001654:	2b00      	cmp	r3, #0
 8001656:	d101      	bne.n	800165c <HAL_DMA_Abort+0x18>
  {
    return HAL_ERROR;
 8001658:	2301      	movs	r3, #1
 800165a:	e2dc      	b.n	8001c16 <HAL_DMA_Abort+0x5d2>
  }

  /* Check the DMA peripheral state */
  if(hdma->State != HAL_DMA_STATE_BUSY)
 800165c:	687b      	ldr	r3, [r7, #4]
 800165e:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8001662:	b2db      	uxtb	r3, r3
 8001664:	2b02      	cmp	r3, #2
 8001666:	d008      	beq.n	800167a <HAL_DMA_Abort+0x36>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001668:	687b      	ldr	r3, [r7, #4]
 800166a:	2280      	movs	r2, #128	; 0x80
 800166c:	655a      	str	r2, [r3, #84]	; 0x54

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800166e:	687b      	ldr	r3, [r7, #4]
 8001670:	2200      	movs	r2, #0
 8001672:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    return HAL_ERROR;
 8001676:	2301      	movs	r3, #1
 8001678:	e2cd      	b.n	8001c16 <HAL_DMA_Abort+0x5d2>
  }
  else
  {
    /* Disable all the transfer interrupts */
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 800167a:	687b      	ldr	r3, [r7, #4]
 800167c:	681b      	ldr	r3, [r3, #0]
 800167e:	4a76      	ldr	r2, [pc, #472]	; (8001858 <HAL_DMA_Abort+0x214>)
 8001680:	4293      	cmp	r3, r2
 8001682:	d04a      	beq.n	800171a <HAL_DMA_Abort+0xd6>
 8001684:	687b      	ldr	r3, [r7, #4]
 8001686:	681b      	ldr	r3, [r3, #0]
 8001688:	4a74      	ldr	r2, [pc, #464]	; (800185c <HAL_DMA_Abort+0x218>)
 800168a:	4293      	cmp	r3, r2
 800168c:	d045      	beq.n	800171a <HAL_DMA_Abort+0xd6>
 800168e:	687b      	ldr	r3, [r7, #4]
 8001690:	681b      	ldr	r3, [r3, #0]
 8001692:	4a73      	ldr	r2, [pc, #460]	; (8001860 <HAL_DMA_Abort+0x21c>)
 8001694:	4293      	cmp	r3, r2
 8001696:	d040      	beq.n	800171a <HAL_DMA_Abort+0xd6>
 8001698:	687b      	ldr	r3, [r7, #4]
 800169a:	681b      	ldr	r3, [r3, #0]
 800169c:	4a71      	ldr	r2, [pc, #452]	; (8001864 <HAL_DMA_Abort+0x220>)
 800169e:	4293      	cmp	r3, r2
 80016a0:	d03b      	beq.n	800171a <HAL_DMA_Abort+0xd6>
 80016a2:	687b      	ldr	r3, [r7, #4]
 80016a4:	681b      	ldr	r3, [r3, #0]
 80016a6:	4a70      	ldr	r2, [pc, #448]	; (8001868 <HAL_DMA_Abort+0x224>)
 80016a8:	4293      	cmp	r3, r2
 80016aa:	d036      	beq.n	800171a <HAL_DMA_Abort+0xd6>
 80016ac:	687b      	ldr	r3, [r7, #4]
 80016ae:	681b      	ldr	r3, [r3, #0]
 80016b0:	4a6e      	ldr	r2, [pc, #440]	; (800186c <HAL_DMA_Abort+0x228>)
 80016b2:	4293      	cmp	r3, r2
 80016b4:	d031      	beq.n	800171a <HAL_DMA_Abort+0xd6>
 80016b6:	687b      	ldr	r3, [r7, #4]
 80016b8:	681b      	ldr	r3, [r3, #0]
 80016ba:	4a6d      	ldr	r2, [pc, #436]	; (8001870 <HAL_DMA_Abort+0x22c>)
 80016bc:	4293      	cmp	r3, r2
 80016be:	d02c      	beq.n	800171a <HAL_DMA_Abort+0xd6>
 80016c0:	687b      	ldr	r3, [r7, #4]
 80016c2:	681b      	ldr	r3, [r3, #0]
 80016c4:	4a6b      	ldr	r2, [pc, #428]	; (8001874 <HAL_DMA_Abort+0x230>)
 80016c6:	4293      	cmp	r3, r2
 80016c8:	d027      	beq.n	800171a <HAL_DMA_Abort+0xd6>
 80016ca:	687b      	ldr	r3, [r7, #4]
 80016cc:	681b      	ldr	r3, [r3, #0]
 80016ce:	4a6a      	ldr	r2, [pc, #424]	; (8001878 <HAL_DMA_Abort+0x234>)
 80016d0:	4293      	cmp	r3, r2
 80016d2:	d022      	beq.n	800171a <HAL_DMA_Abort+0xd6>
 80016d4:	687b      	ldr	r3, [r7, #4]
 80016d6:	681b      	ldr	r3, [r3, #0]
 80016d8:	4a68      	ldr	r2, [pc, #416]	; (800187c <HAL_DMA_Abort+0x238>)
 80016da:	4293      	cmp	r3, r2
 80016dc:	d01d      	beq.n	800171a <HAL_DMA_Abort+0xd6>
 80016de:	687b      	ldr	r3, [r7, #4]
 80016e0:	681b      	ldr	r3, [r3, #0]
 80016e2:	4a67      	ldr	r2, [pc, #412]	; (8001880 <HAL_DMA_Abort+0x23c>)
 80016e4:	4293      	cmp	r3, r2
 80016e6:	d018      	beq.n	800171a <HAL_DMA_Abort+0xd6>
 80016e8:	687b      	ldr	r3, [r7, #4]
 80016ea:	681b      	ldr	r3, [r3, #0]
 80016ec:	4a65      	ldr	r2, [pc, #404]	; (8001884 <HAL_DMA_Abort+0x240>)
 80016ee:	4293      	cmp	r3, r2
 80016f0:	d013      	beq.n	800171a <HAL_DMA_Abort+0xd6>
 80016f2:	687b      	ldr	r3, [r7, #4]
 80016f4:	681b      	ldr	r3, [r3, #0]
 80016f6:	4a64      	ldr	r2, [pc, #400]	; (8001888 <HAL_DMA_Abort+0x244>)
 80016f8:	4293      	cmp	r3, r2
 80016fa:	d00e      	beq.n	800171a <HAL_DMA_Abort+0xd6>
 80016fc:	687b      	ldr	r3, [r7, #4]
 80016fe:	681b      	ldr	r3, [r3, #0]
 8001700:	4a62      	ldr	r2, [pc, #392]	; (800188c <HAL_DMA_Abort+0x248>)
 8001702:	4293      	cmp	r3, r2
 8001704:	d009      	beq.n	800171a <HAL_DMA_Abort+0xd6>
 8001706:	687b      	ldr	r3, [r7, #4]
 8001708:	681b      	ldr	r3, [r3, #0]
 800170a:	4a61      	ldr	r2, [pc, #388]	; (8001890 <HAL_DMA_Abort+0x24c>)
 800170c:	4293      	cmp	r3, r2
 800170e:	d004      	beq.n	800171a <HAL_DMA_Abort+0xd6>
 8001710:	687b      	ldr	r3, [r7, #4]
 8001712:	681b      	ldr	r3, [r3, #0]
 8001714:	4a5f      	ldr	r2, [pc, #380]	; (8001894 <HAL_DMA_Abort+0x250>)
 8001716:	4293      	cmp	r3, r2
 8001718:	d101      	bne.n	800171e <HAL_DMA_Abort+0xda>
 800171a:	2301      	movs	r3, #1
 800171c:	e000      	b.n	8001720 <HAL_DMA_Abort+0xdc>
 800171e:	2300      	movs	r3, #0
 8001720:	2b00      	cmp	r3, #0
 8001722:	d013      	beq.n	800174c <HAL_DMA_Abort+0x108>
    {
       /* Disable DMA All Interrupts  */
      ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME | DMA_IT_HT);
 8001724:	687b      	ldr	r3, [r7, #4]
 8001726:	681b      	ldr	r3, [r3, #0]
 8001728:	681a      	ldr	r2, [r3, #0]
 800172a:	687b      	ldr	r3, [r7, #4]
 800172c:	681b      	ldr	r3, [r3, #0]
 800172e:	f022 021e 	bic.w	r2, r2, #30
 8001732:	601a      	str	r2, [r3, #0]
      ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR &= ~(DMA_IT_FE);
 8001734:	687b      	ldr	r3, [r7, #4]
 8001736:	681b      	ldr	r3, [r3, #0]
 8001738:	695a      	ldr	r2, [r3, #20]
 800173a:	687b      	ldr	r3, [r7, #4]
 800173c:	681b      	ldr	r3, [r3, #0]
 800173e:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8001742:	615a      	str	r2, [r3, #20]

      enableRegister = (__IO uint32_t *)(&(((DMA_Stream_TypeDef   *)hdma->Instance)->CR));
 8001744:	687b      	ldr	r3, [r7, #4]
 8001746:	681b      	ldr	r3, [r3, #0]
 8001748:	617b      	str	r3, [r7, #20]
 800174a:	e00a      	b.n	8001762 <HAL_DMA_Abort+0x11e>
    }
    else /* BDMA channel */
    {
      /* Disable DMA All Interrupts */
      ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  &= ~(BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE);
 800174c:	687b      	ldr	r3, [r7, #4]
 800174e:	681b      	ldr	r3, [r3, #0]
 8001750:	681a      	ldr	r2, [r3, #0]
 8001752:	687b      	ldr	r3, [r7, #4]
 8001754:	681b      	ldr	r3, [r3, #0]
 8001756:	f022 020e 	bic.w	r2, r2, #14
 800175a:	601a      	str	r2, [r3, #0]

      enableRegister = (__IO uint32_t *)(&(((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR));
 800175c:	687b      	ldr	r3, [r7, #4]
 800175e:	681b      	ldr	r3, [r3, #0]
 8001760:	617b      	str	r3, [r7, #20]
    }

    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8001762:	687b      	ldr	r3, [r7, #4]
 8001764:	681b      	ldr	r3, [r3, #0]
 8001766:	4a3c      	ldr	r2, [pc, #240]	; (8001858 <HAL_DMA_Abort+0x214>)
 8001768:	4293      	cmp	r3, r2
 800176a:	d072      	beq.n	8001852 <HAL_DMA_Abort+0x20e>
 800176c:	687b      	ldr	r3, [r7, #4]
 800176e:	681b      	ldr	r3, [r3, #0]
 8001770:	4a3a      	ldr	r2, [pc, #232]	; (800185c <HAL_DMA_Abort+0x218>)
 8001772:	4293      	cmp	r3, r2
 8001774:	d06d      	beq.n	8001852 <HAL_DMA_Abort+0x20e>
 8001776:	687b      	ldr	r3, [r7, #4]
 8001778:	681b      	ldr	r3, [r3, #0]
 800177a:	4a39      	ldr	r2, [pc, #228]	; (8001860 <HAL_DMA_Abort+0x21c>)
 800177c:	4293      	cmp	r3, r2
 800177e:	d068      	beq.n	8001852 <HAL_DMA_Abort+0x20e>
 8001780:	687b      	ldr	r3, [r7, #4]
 8001782:	681b      	ldr	r3, [r3, #0]
 8001784:	4a37      	ldr	r2, [pc, #220]	; (8001864 <HAL_DMA_Abort+0x220>)
 8001786:	4293      	cmp	r3, r2
 8001788:	d063      	beq.n	8001852 <HAL_DMA_Abort+0x20e>
 800178a:	687b      	ldr	r3, [r7, #4]
 800178c:	681b      	ldr	r3, [r3, #0]
 800178e:	4a36      	ldr	r2, [pc, #216]	; (8001868 <HAL_DMA_Abort+0x224>)
 8001790:	4293      	cmp	r3, r2
 8001792:	d05e      	beq.n	8001852 <HAL_DMA_Abort+0x20e>
 8001794:	687b      	ldr	r3, [r7, #4]
 8001796:	681b      	ldr	r3, [r3, #0]
 8001798:	4a34      	ldr	r2, [pc, #208]	; (800186c <HAL_DMA_Abort+0x228>)
 800179a:	4293      	cmp	r3, r2
 800179c:	d059      	beq.n	8001852 <HAL_DMA_Abort+0x20e>
 800179e:	687b      	ldr	r3, [r7, #4]
 80017a0:	681b      	ldr	r3, [r3, #0]
 80017a2:	4a33      	ldr	r2, [pc, #204]	; (8001870 <HAL_DMA_Abort+0x22c>)
 80017a4:	4293      	cmp	r3, r2
 80017a6:	d054      	beq.n	8001852 <HAL_DMA_Abort+0x20e>
 80017a8:	687b      	ldr	r3, [r7, #4]
 80017aa:	681b      	ldr	r3, [r3, #0]
 80017ac:	4a31      	ldr	r2, [pc, #196]	; (8001874 <HAL_DMA_Abort+0x230>)
 80017ae:	4293      	cmp	r3, r2
 80017b0:	d04f      	beq.n	8001852 <HAL_DMA_Abort+0x20e>
 80017b2:	687b      	ldr	r3, [r7, #4]
 80017b4:	681b      	ldr	r3, [r3, #0]
 80017b6:	4a30      	ldr	r2, [pc, #192]	; (8001878 <HAL_DMA_Abort+0x234>)
 80017b8:	4293      	cmp	r3, r2
 80017ba:	d04a      	beq.n	8001852 <HAL_DMA_Abort+0x20e>
 80017bc:	687b      	ldr	r3, [r7, #4]
 80017be:	681b      	ldr	r3, [r3, #0]
 80017c0:	4a2e      	ldr	r2, [pc, #184]	; (800187c <HAL_DMA_Abort+0x238>)
 80017c2:	4293      	cmp	r3, r2
 80017c4:	d045      	beq.n	8001852 <HAL_DMA_Abort+0x20e>
 80017c6:	687b      	ldr	r3, [r7, #4]
 80017c8:	681b      	ldr	r3, [r3, #0]
 80017ca:	4a2d      	ldr	r2, [pc, #180]	; (8001880 <HAL_DMA_Abort+0x23c>)
 80017cc:	4293      	cmp	r3, r2
 80017ce:	d040      	beq.n	8001852 <HAL_DMA_Abort+0x20e>
 80017d0:	687b      	ldr	r3, [r7, #4]
 80017d2:	681b      	ldr	r3, [r3, #0]
 80017d4:	4a2b      	ldr	r2, [pc, #172]	; (8001884 <HAL_DMA_Abort+0x240>)
 80017d6:	4293      	cmp	r3, r2
 80017d8:	d03b      	beq.n	8001852 <HAL_DMA_Abort+0x20e>
 80017da:	687b      	ldr	r3, [r7, #4]
 80017dc:	681b      	ldr	r3, [r3, #0]
 80017de:	4a2a      	ldr	r2, [pc, #168]	; (8001888 <HAL_DMA_Abort+0x244>)
 80017e0:	4293      	cmp	r3, r2
 80017e2:	d036      	beq.n	8001852 <HAL_DMA_Abort+0x20e>
 80017e4:	687b      	ldr	r3, [r7, #4]
 80017e6:	681b      	ldr	r3, [r3, #0]
 80017e8:	4a28      	ldr	r2, [pc, #160]	; (800188c <HAL_DMA_Abort+0x248>)
 80017ea:	4293      	cmp	r3, r2
 80017ec:	d031      	beq.n	8001852 <HAL_DMA_Abort+0x20e>
 80017ee:	687b      	ldr	r3, [r7, #4]
 80017f0:	681b      	ldr	r3, [r3, #0]
 80017f2:	4a27      	ldr	r2, [pc, #156]	; (8001890 <HAL_DMA_Abort+0x24c>)
 80017f4:	4293      	cmp	r3, r2
 80017f6:	d02c      	beq.n	8001852 <HAL_DMA_Abort+0x20e>
 80017f8:	687b      	ldr	r3, [r7, #4]
 80017fa:	681b      	ldr	r3, [r3, #0]
 80017fc:	4a25      	ldr	r2, [pc, #148]	; (8001894 <HAL_DMA_Abort+0x250>)
 80017fe:	4293      	cmp	r3, r2
 8001800:	d027      	beq.n	8001852 <HAL_DMA_Abort+0x20e>
 8001802:	687b      	ldr	r3, [r7, #4]
 8001804:	681b      	ldr	r3, [r3, #0]
 8001806:	4a24      	ldr	r2, [pc, #144]	; (8001898 <HAL_DMA_Abort+0x254>)
 8001808:	4293      	cmp	r3, r2
 800180a:	d022      	beq.n	8001852 <HAL_DMA_Abort+0x20e>
 800180c:	687b      	ldr	r3, [r7, #4]
 800180e:	681b      	ldr	r3, [r3, #0]
 8001810:	4a22      	ldr	r2, [pc, #136]	; (800189c <HAL_DMA_Abort+0x258>)
 8001812:	4293      	cmp	r3, r2
 8001814:	d01d      	beq.n	8001852 <HAL_DMA_Abort+0x20e>
 8001816:	687b      	ldr	r3, [r7, #4]
 8001818:	681b      	ldr	r3, [r3, #0]
 800181a:	4a21      	ldr	r2, [pc, #132]	; (80018a0 <HAL_DMA_Abort+0x25c>)
 800181c:	4293      	cmp	r3, r2
 800181e:	d018      	beq.n	8001852 <HAL_DMA_Abort+0x20e>
 8001820:	687b      	ldr	r3, [r7, #4]
 8001822:	681b      	ldr	r3, [r3, #0]
 8001824:	4a1f      	ldr	r2, [pc, #124]	; (80018a4 <HAL_DMA_Abort+0x260>)
 8001826:	4293      	cmp	r3, r2
 8001828:	d013      	beq.n	8001852 <HAL_DMA_Abort+0x20e>
 800182a:	687b      	ldr	r3, [r7, #4]
 800182c:	681b      	ldr	r3, [r3, #0]
 800182e:	4a1e      	ldr	r2, [pc, #120]	; (80018a8 <HAL_DMA_Abort+0x264>)
 8001830:	4293      	cmp	r3, r2
 8001832:	d00e      	beq.n	8001852 <HAL_DMA_Abort+0x20e>
 8001834:	687b      	ldr	r3, [r7, #4]
 8001836:	681b      	ldr	r3, [r3, #0]
 8001838:	4a1c      	ldr	r2, [pc, #112]	; (80018ac <HAL_DMA_Abort+0x268>)
 800183a:	4293      	cmp	r3, r2
 800183c:	d009      	beq.n	8001852 <HAL_DMA_Abort+0x20e>
 800183e:	687b      	ldr	r3, [r7, #4]
 8001840:	681b      	ldr	r3, [r3, #0]
 8001842:	4a1b      	ldr	r2, [pc, #108]	; (80018b0 <HAL_DMA_Abort+0x26c>)
 8001844:	4293      	cmp	r3, r2
 8001846:	d004      	beq.n	8001852 <HAL_DMA_Abort+0x20e>
 8001848:	687b      	ldr	r3, [r7, #4]
 800184a:	681b      	ldr	r3, [r3, #0]
 800184c:	4a19      	ldr	r2, [pc, #100]	; (80018b4 <HAL_DMA_Abort+0x270>)
 800184e:	4293      	cmp	r3, r2
 8001850:	d132      	bne.n	80018b8 <HAL_DMA_Abort+0x274>
 8001852:	2301      	movs	r3, #1
 8001854:	e031      	b.n	80018ba <HAL_DMA_Abort+0x276>
 8001856:	bf00      	nop
 8001858:	40020010 	.word	0x40020010
 800185c:	40020028 	.word	0x40020028
 8001860:	40020040 	.word	0x40020040
 8001864:	40020058 	.word	0x40020058
 8001868:	40020070 	.word	0x40020070
 800186c:	40020088 	.word	0x40020088
 8001870:	400200a0 	.word	0x400200a0
 8001874:	400200b8 	.word	0x400200b8
 8001878:	40020410 	.word	0x40020410
 800187c:	40020428 	.word	0x40020428
 8001880:	40020440 	.word	0x40020440
 8001884:	40020458 	.word	0x40020458
 8001888:	40020470 	.word	0x40020470
 800188c:	40020488 	.word	0x40020488
 8001890:	400204a0 	.word	0x400204a0
 8001894:	400204b8 	.word	0x400204b8
 8001898:	58025408 	.word	0x58025408
 800189c:	5802541c 	.word	0x5802541c
 80018a0:	58025430 	.word	0x58025430
 80018a4:	58025444 	.word	0x58025444
 80018a8:	58025458 	.word	0x58025458
 80018ac:	5802546c 	.word	0x5802546c
 80018b0:	58025480 	.word	0x58025480
 80018b4:	58025494 	.word	0x58025494
 80018b8:	2300      	movs	r3, #0
 80018ba:	2b00      	cmp	r3, #0
 80018bc:	d007      	beq.n	80018ce <HAL_DMA_Abort+0x28a>
    {
      /* disable the DMAMUX sync overrun IT */
      hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 80018be:	687b      	ldr	r3, [r7, #4]
 80018c0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80018c2:	681a      	ldr	r2, [r3, #0]
 80018c4:	687b      	ldr	r3, [r7, #4]
 80018c6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80018c8:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80018cc:	601a      	str	r2, [r3, #0]
    }

    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 80018ce:	687b      	ldr	r3, [r7, #4]
 80018d0:	681b      	ldr	r3, [r3, #0]
 80018d2:	4a6d      	ldr	r2, [pc, #436]	; (8001a88 <HAL_DMA_Abort+0x444>)
 80018d4:	4293      	cmp	r3, r2
 80018d6:	d04a      	beq.n	800196e <HAL_DMA_Abort+0x32a>
 80018d8:	687b      	ldr	r3, [r7, #4]
 80018da:	681b      	ldr	r3, [r3, #0]
 80018dc:	4a6b      	ldr	r2, [pc, #428]	; (8001a8c <HAL_DMA_Abort+0x448>)
 80018de:	4293      	cmp	r3, r2
 80018e0:	d045      	beq.n	800196e <HAL_DMA_Abort+0x32a>
 80018e2:	687b      	ldr	r3, [r7, #4]
 80018e4:	681b      	ldr	r3, [r3, #0]
 80018e6:	4a6a      	ldr	r2, [pc, #424]	; (8001a90 <HAL_DMA_Abort+0x44c>)
 80018e8:	4293      	cmp	r3, r2
 80018ea:	d040      	beq.n	800196e <HAL_DMA_Abort+0x32a>
 80018ec:	687b      	ldr	r3, [r7, #4]
 80018ee:	681b      	ldr	r3, [r3, #0]
 80018f0:	4a68      	ldr	r2, [pc, #416]	; (8001a94 <HAL_DMA_Abort+0x450>)
 80018f2:	4293      	cmp	r3, r2
 80018f4:	d03b      	beq.n	800196e <HAL_DMA_Abort+0x32a>
 80018f6:	687b      	ldr	r3, [r7, #4]
 80018f8:	681b      	ldr	r3, [r3, #0]
 80018fa:	4a67      	ldr	r2, [pc, #412]	; (8001a98 <HAL_DMA_Abort+0x454>)
 80018fc:	4293      	cmp	r3, r2
 80018fe:	d036      	beq.n	800196e <HAL_DMA_Abort+0x32a>
 8001900:	687b      	ldr	r3, [r7, #4]
 8001902:	681b      	ldr	r3, [r3, #0]
 8001904:	4a65      	ldr	r2, [pc, #404]	; (8001a9c <HAL_DMA_Abort+0x458>)
 8001906:	4293      	cmp	r3, r2
 8001908:	d031      	beq.n	800196e <HAL_DMA_Abort+0x32a>
 800190a:	687b      	ldr	r3, [r7, #4]
 800190c:	681b      	ldr	r3, [r3, #0]
 800190e:	4a64      	ldr	r2, [pc, #400]	; (8001aa0 <HAL_DMA_Abort+0x45c>)
 8001910:	4293      	cmp	r3, r2
 8001912:	d02c      	beq.n	800196e <HAL_DMA_Abort+0x32a>
 8001914:	687b      	ldr	r3, [r7, #4]
 8001916:	681b      	ldr	r3, [r3, #0]
 8001918:	4a62      	ldr	r2, [pc, #392]	; (8001aa4 <HAL_DMA_Abort+0x460>)
 800191a:	4293      	cmp	r3, r2
 800191c:	d027      	beq.n	800196e <HAL_DMA_Abort+0x32a>
 800191e:	687b      	ldr	r3, [r7, #4]
 8001920:	681b      	ldr	r3, [r3, #0]
 8001922:	4a61      	ldr	r2, [pc, #388]	; (8001aa8 <HAL_DMA_Abort+0x464>)
 8001924:	4293      	cmp	r3, r2
 8001926:	d022      	beq.n	800196e <HAL_DMA_Abort+0x32a>
 8001928:	687b      	ldr	r3, [r7, #4]
 800192a:	681b      	ldr	r3, [r3, #0]
 800192c:	4a5f      	ldr	r2, [pc, #380]	; (8001aac <HAL_DMA_Abort+0x468>)
 800192e:	4293      	cmp	r3, r2
 8001930:	d01d      	beq.n	800196e <HAL_DMA_Abort+0x32a>
 8001932:	687b      	ldr	r3, [r7, #4]
 8001934:	681b      	ldr	r3, [r3, #0]
 8001936:	4a5e      	ldr	r2, [pc, #376]	; (8001ab0 <HAL_DMA_Abort+0x46c>)
 8001938:	4293      	cmp	r3, r2
 800193a:	d018      	beq.n	800196e <HAL_DMA_Abort+0x32a>
 800193c:	687b      	ldr	r3, [r7, #4]
 800193e:	681b      	ldr	r3, [r3, #0]
 8001940:	4a5c      	ldr	r2, [pc, #368]	; (8001ab4 <HAL_DMA_Abort+0x470>)
 8001942:	4293      	cmp	r3, r2
 8001944:	d013      	beq.n	800196e <HAL_DMA_Abort+0x32a>
 8001946:	687b      	ldr	r3, [r7, #4]
 8001948:	681b      	ldr	r3, [r3, #0]
 800194a:	4a5b      	ldr	r2, [pc, #364]	; (8001ab8 <HAL_DMA_Abort+0x474>)
 800194c:	4293      	cmp	r3, r2
 800194e:	d00e      	beq.n	800196e <HAL_DMA_Abort+0x32a>
 8001950:	687b      	ldr	r3, [r7, #4]
 8001952:	681b      	ldr	r3, [r3, #0]
 8001954:	4a59      	ldr	r2, [pc, #356]	; (8001abc <HAL_DMA_Abort+0x478>)
 8001956:	4293      	cmp	r3, r2
 8001958:	d009      	beq.n	800196e <HAL_DMA_Abort+0x32a>
 800195a:	687b      	ldr	r3, [r7, #4]
 800195c:	681b      	ldr	r3, [r3, #0]
 800195e:	4a58      	ldr	r2, [pc, #352]	; (8001ac0 <HAL_DMA_Abort+0x47c>)
 8001960:	4293      	cmp	r3, r2
 8001962:	d004      	beq.n	800196e <HAL_DMA_Abort+0x32a>
 8001964:	687b      	ldr	r3, [r7, #4]
 8001966:	681b      	ldr	r3, [r3, #0]
 8001968:	4a56      	ldr	r2, [pc, #344]	; (8001ac4 <HAL_DMA_Abort+0x480>)
 800196a:	4293      	cmp	r3, r2
 800196c:	d108      	bne.n	8001980 <HAL_DMA_Abort+0x33c>
 800196e:	687b      	ldr	r3, [r7, #4]
 8001970:	681b      	ldr	r3, [r3, #0]
 8001972:	681a      	ldr	r2, [r3, #0]
 8001974:	687b      	ldr	r3, [r7, #4]
 8001976:	681b      	ldr	r3, [r3, #0]
 8001978:	f022 0201 	bic.w	r2, r2, #1
 800197c:	601a      	str	r2, [r3, #0]
 800197e:	e007      	b.n	8001990 <HAL_DMA_Abort+0x34c>
 8001980:	687b      	ldr	r3, [r7, #4]
 8001982:	681b      	ldr	r3, [r3, #0]
 8001984:	681a      	ldr	r2, [r3, #0]
 8001986:	687b      	ldr	r3, [r7, #4]
 8001988:	681b      	ldr	r3, [r3, #0]
 800198a:	f022 0201 	bic.w	r2, r2, #1
 800198e:	601a      	str	r2, [r3, #0]

    /* Check if the DMA Stream is effectively disabled */
    while(((*enableRegister) & DMA_SxCR_EN) != 0U)
 8001990:	e013      	b.n	80019ba <HAL_DMA_Abort+0x376>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8001992:	f7ff fd27 	bl	80013e4 <HAL_GetTick>
 8001996:	4602      	mov	r2, r0
 8001998:	693b      	ldr	r3, [r7, #16]
 800199a:	1ad3      	subs	r3, r2, r3
 800199c:	2b05      	cmp	r3, #5
 800199e:	d90c      	bls.n	80019ba <HAL_DMA_Abort+0x376>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80019a0:	687b      	ldr	r3, [r7, #4]
 80019a2:	2220      	movs	r2, #32
 80019a4:	655a      	str	r2, [r3, #84]	; 0x54

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 80019a6:	687b      	ldr	r3, [r7, #4]
 80019a8:	2200      	movs	r2, #0
 80019aa:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_ERROR;
 80019ae:	687b      	ldr	r3, [r7, #4]
 80019b0:	2203      	movs	r2, #3
 80019b2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        return HAL_ERROR;
 80019b6:	2301      	movs	r3, #1
 80019b8:	e12d      	b.n	8001c16 <HAL_DMA_Abort+0x5d2>
    while(((*enableRegister) & DMA_SxCR_EN) != 0U)
 80019ba:	697b      	ldr	r3, [r7, #20]
 80019bc:	681b      	ldr	r3, [r3, #0]
 80019be:	f003 0301 	and.w	r3, r3, #1
 80019c2:	2b00      	cmp	r3, #0
 80019c4:	d1e5      	bne.n	8001992 <HAL_DMA_Abort+0x34e>
      }
    }

    /* Clear all interrupt flags at correct offset within the register */
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 80019c6:	687b      	ldr	r3, [r7, #4]
 80019c8:	681b      	ldr	r3, [r3, #0]
 80019ca:	4a2f      	ldr	r2, [pc, #188]	; (8001a88 <HAL_DMA_Abort+0x444>)
 80019cc:	4293      	cmp	r3, r2
 80019ce:	d04a      	beq.n	8001a66 <HAL_DMA_Abort+0x422>
 80019d0:	687b      	ldr	r3, [r7, #4]
 80019d2:	681b      	ldr	r3, [r3, #0]
 80019d4:	4a2d      	ldr	r2, [pc, #180]	; (8001a8c <HAL_DMA_Abort+0x448>)
 80019d6:	4293      	cmp	r3, r2
 80019d8:	d045      	beq.n	8001a66 <HAL_DMA_Abort+0x422>
 80019da:	687b      	ldr	r3, [r7, #4]
 80019dc:	681b      	ldr	r3, [r3, #0]
 80019de:	4a2c      	ldr	r2, [pc, #176]	; (8001a90 <HAL_DMA_Abort+0x44c>)
 80019e0:	4293      	cmp	r3, r2
 80019e2:	d040      	beq.n	8001a66 <HAL_DMA_Abort+0x422>
 80019e4:	687b      	ldr	r3, [r7, #4]
 80019e6:	681b      	ldr	r3, [r3, #0]
 80019e8:	4a2a      	ldr	r2, [pc, #168]	; (8001a94 <HAL_DMA_Abort+0x450>)
 80019ea:	4293      	cmp	r3, r2
 80019ec:	d03b      	beq.n	8001a66 <HAL_DMA_Abort+0x422>
 80019ee:	687b      	ldr	r3, [r7, #4]
 80019f0:	681b      	ldr	r3, [r3, #0]
 80019f2:	4a29      	ldr	r2, [pc, #164]	; (8001a98 <HAL_DMA_Abort+0x454>)
 80019f4:	4293      	cmp	r3, r2
 80019f6:	d036      	beq.n	8001a66 <HAL_DMA_Abort+0x422>
 80019f8:	687b      	ldr	r3, [r7, #4]
 80019fa:	681b      	ldr	r3, [r3, #0]
 80019fc:	4a27      	ldr	r2, [pc, #156]	; (8001a9c <HAL_DMA_Abort+0x458>)
 80019fe:	4293      	cmp	r3, r2
 8001a00:	d031      	beq.n	8001a66 <HAL_DMA_Abort+0x422>
 8001a02:	687b      	ldr	r3, [r7, #4]
 8001a04:	681b      	ldr	r3, [r3, #0]
 8001a06:	4a26      	ldr	r2, [pc, #152]	; (8001aa0 <HAL_DMA_Abort+0x45c>)
 8001a08:	4293      	cmp	r3, r2
 8001a0a:	d02c      	beq.n	8001a66 <HAL_DMA_Abort+0x422>
 8001a0c:	687b      	ldr	r3, [r7, #4]
 8001a0e:	681b      	ldr	r3, [r3, #0]
 8001a10:	4a24      	ldr	r2, [pc, #144]	; (8001aa4 <HAL_DMA_Abort+0x460>)
 8001a12:	4293      	cmp	r3, r2
 8001a14:	d027      	beq.n	8001a66 <HAL_DMA_Abort+0x422>
 8001a16:	687b      	ldr	r3, [r7, #4]
 8001a18:	681b      	ldr	r3, [r3, #0]
 8001a1a:	4a23      	ldr	r2, [pc, #140]	; (8001aa8 <HAL_DMA_Abort+0x464>)
 8001a1c:	4293      	cmp	r3, r2
 8001a1e:	d022      	beq.n	8001a66 <HAL_DMA_Abort+0x422>
 8001a20:	687b      	ldr	r3, [r7, #4]
 8001a22:	681b      	ldr	r3, [r3, #0]
 8001a24:	4a21      	ldr	r2, [pc, #132]	; (8001aac <HAL_DMA_Abort+0x468>)
 8001a26:	4293      	cmp	r3, r2
 8001a28:	d01d      	beq.n	8001a66 <HAL_DMA_Abort+0x422>
 8001a2a:	687b      	ldr	r3, [r7, #4]
 8001a2c:	681b      	ldr	r3, [r3, #0]
 8001a2e:	4a20      	ldr	r2, [pc, #128]	; (8001ab0 <HAL_DMA_Abort+0x46c>)
 8001a30:	4293      	cmp	r3, r2
 8001a32:	d018      	beq.n	8001a66 <HAL_DMA_Abort+0x422>
 8001a34:	687b      	ldr	r3, [r7, #4]
 8001a36:	681b      	ldr	r3, [r3, #0]
 8001a38:	4a1e      	ldr	r2, [pc, #120]	; (8001ab4 <HAL_DMA_Abort+0x470>)
 8001a3a:	4293      	cmp	r3, r2
 8001a3c:	d013      	beq.n	8001a66 <HAL_DMA_Abort+0x422>
 8001a3e:	687b      	ldr	r3, [r7, #4]
 8001a40:	681b      	ldr	r3, [r3, #0]
 8001a42:	4a1d      	ldr	r2, [pc, #116]	; (8001ab8 <HAL_DMA_Abort+0x474>)
 8001a44:	4293      	cmp	r3, r2
 8001a46:	d00e      	beq.n	8001a66 <HAL_DMA_Abort+0x422>
 8001a48:	687b      	ldr	r3, [r7, #4]
 8001a4a:	681b      	ldr	r3, [r3, #0]
 8001a4c:	4a1b      	ldr	r2, [pc, #108]	; (8001abc <HAL_DMA_Abort+0x478>)
 8001a4e:	4293      	cmp	r3, r2
 8001a50:	d009      	beq.n	8001a66 <HAL_DMA_Abort+0x422>
 8001a52:	687b      	ldr	r3, [r7, #4]
 8001a54:	681b      	ldr	r3, [r3, #0]
 8001a56:	4a1a      	ldr	r2, [pc, #104]	; (8001ac0 <HAL_DMA_Abort+0x47c>)
 8001a58:	4293      	cmp	r3, r2
 8001a5a:	d004      	beq.n	8001a66 <HAL_DMA_Abort+0x422>
 8001a5c:	687b      	ldr	r3, [r7, #4]
 8001a5e:	681b      	ldr	r3, [r3, #0]
 8001a60:	4a18      	ldr	r2, [pc, #96]	; (8001ac4 <HAL_DMA_Abort+0x480>)
 8001a62:	4293      	cmp	r3, r2
 8001a64:	d101      	bne.n	8001a6a <HAL_DMA_Abort+0x426>
 8001a66:	2301      	movs	r3, #1
 8001a68:	e000      	b.n	8001a6c <HAL_DMA_Abort+0x428>
 8001a6a:	2300      	movs	r3, #0
 8001a6c:	2b00      	cmp	r3, #0
 8001a6e:	d02b      	beq.n	8001ac8 <HAL_DMA_Abort+0x484>
    {
      regs_dma = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8001a70:	687b      	ldr	r3, [r7, #4]
 8001a72:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001a74:	60bb      	str	r3, [r7, #8]
      regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 8001a76:	687b      	ldr	r3, [r7, #4]
 8001a78:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001a7a:	f003 031f 	and.w	r3, r3, #31
 8001a7e:	223f      	movs	r2, #63	; 0x3f
 8001a80:	409a      	lsls	r2, r3
 8001a82:	68bb      	ldr	r3, [r7, #8]
 8001a84:	609a      	str	r2, [r3, #8]
 8001a86:	e02a      	b.n	8001ade <HAL_DMA_Abort+0x49a>
 8001a88:	40020010 	.word	0x40020010
 8001a8c:	40020028 	.word	0x40020028
 8001a90:	40020040 	.word	0x40020040
 8001a94:	40020058 	.word	0x40020058
 8001a98:	40020070 	.word	0x40020070
 8001a9c:	40020088 	.word	0x40020088
 8001aa0:	400200a0 	.word	0x400200a0
 8001aa4:	400200b8 	.word	0x400200b8
 8001aa8:	40020410 	.word	0x40020410
 8001aac:	40020428 	.word	0x40020428
 8001ab0:	40020440 	.word	0x40020440
 8001ab4:	40020458 	.word	0x40020458
 8001ab8:	40020470 	.word	0x40020470
 8001abc:	40020488 	.word	0x40020488
 8001ac0:	400204a0 	.word	0x400204a0
 8001ac4:	400204b8 	.word	0x400204b8
    }
    else /* BDMA channel */
    {
      regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 8001ac8:	687b      	ldr	r3, [r7, #4]
 8001aca:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001acc:	60fb      	str	r3, [r7, #12]
      regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 8001ace:	687b      	ldr	r3, [r7, #4]
 8001ad0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001ad2:	f003 031f 	and.w	r3, r3, #31
 8001ad6:	2201      	movs	r2, #1
 8001ad8:	409a      	lsls	r2, r3
 8001ada:	68fb      	ldr	r3, [r7, #12]
 8001adc:	605a      	str	r2, [r3, #4]
    }

    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8001ade:	687b      	ldr	r3, [r7, #4]
 8001ae0:	681b      	ldr	r3, [r3, #0]
 8001ae2:	4a4f      	ldr	r2, [pc, #316]	; (8001c20 <HAL_DMA_Abort+0x5dc>)
 8001ae4:	4293      	cmp	r3, r2
 8001ae6:	d072      	beq.n	8001bce <HAL_DMA_Abort+0x58a>
 8001ae8:	687b      	ldr	r3, [r7, #4]
 8001aea:	681b      	ldr	r3, [r3, #0]
 8001aec:	4a4d      	ldr	r2, [pc, #308]	; (8001c24 <HAL_DMA_Abort+0x5e0>)
 8001aee:	4293      	cmp	r3, r2
 8001af0:	d06d      	beq.n	8001bce <HAL_DMA_Abort+0x58a>
 8001af2:	687b      	ldr	r3, [r7, #4]
 8001af4:	681b      	ldr	r3, [r3, #0]
 8001af6:	4a4c      	ldr	r2, [pc, #304]	; (8001c28 <HAL_DMA_Abort+0x5e4>)
 8001af8:	4293      	cmp	r3, r2
 8001afa:	d068      	beq.n	8001bce <HAL_DMA_Abort+0x58a>
 8001afc:	687b      	ldr	r3, [r7, #4]
 8001afe:	681b      	ldr	r3, [r3, #0]
 8001b00:	4a4a      	ldr	r2, [pc, #296]	; (8001c2c <HAL_DMA_Abort+0x5e8>)
 8001b02:	4293      	cmp	r3, r2
 8001b04:	d063      	beq.n	8001bce <HAL_DMA_Abort+0x58a>
 8001b06:	687b      	ldr	r3, [r7, #4]
 8001b08:	681b      	ldr	r3, [r3, #0]
 8001b0a:	4a49      	ldr	r2, [pc, #292]	; (8001c30 <HAL_DMA_Abort+0x5ec>)
 8001b0c:	4293      	cmp	r3, r2
 8001b0e:	d05e      	beq.n	8001bce <HAL_DMA_Abort+0x58a>
 8001b10:	687b      	ldr	r3, [r7, #4]
 8001b12:	681b      	ldr	r3, [r3, #0]
 8001b14:	4a47      	ldr	r2, [pc, #284]	; (8001c34 <HAL_DMA_Abort+0x5f0>)
 8001b16:	4293      	cmp	r3, r2
 8001b18:	d059      	beq.n	8001bce <HAL_DMA_Abort+0x58a>
 8001b1a:	687b      	ldr	r3, [r7, #4]
 8001b1c:	681b      	ldr	r3, [r3, #0]
 8001b1e:	4a46      	ldr	r2, [pc, #280]	; (8001c38 <HAL_DMA_Abort+0x5f4>)
 8001b20:	4293      	cmp	r3, r2
 8001b22:	d054      	beq.n	8001bce <HAL_DMA_Abort+0x58a>
 8001b24:	687b      	ldr	r3, [r7, #4]
 8001b26:	681b      	ldr	r3, [r3, #0]
 8001b28:	4a44      	ldr	r2, [pc, #272]	; (8001c3c <HAL_DMA_Abort+0x5f8>)
 8001b2a:	4293      	cmp	r3, r2
 8001b2c:	d04f      	beq.n	8001bce <HAL_DMA_Abort+0x58a>
 8001b2e:	687b      	ldr	r3, [r7, #4]
 8001b30:	681b      	ldr	r3, [r3, #0]
 8001b32:	4a43      	ldr	r2, [pc, #268]	; (8001c40 <HAL_DMA_Abort+0x5fc>)
 8001b34:	4293      	cmp	r3, r2
 8001b36:	d04a      	beq.n	8001bce <HAL_DMA_Abort+0x58a>
 8001b38:	687b      	ldr	r3, [r7, #4]
 8001b3a:	681b      	ldr	r3, [r3, #0]
 8001b3c:	4a41      	ldr	r2, [pc, #260]	; (8001c44 <HAL_DMA_Abort+0x600>)
 8001b3e:	4293      	cmp	r3, r2
 8001b40:	d045      	beq.n	8001bce <HAL_DMA_Abort+0x58a>
 8001b42:	687b      	ldr	r3, [r7, #4]
 8001b44:	681b      	ldr	r3, [r3, #0]
 8001b46:	4a40      	ldr	r2, [pc, #256]	; (8001c48 <HAL_DMA_Abort+0x604>)
 8001b48:	4293      	cmp	r3, r2
 8001b4a:	d040      	beq.n	8001bce <HAL_DMA_Abort+0x58a>
 8001b4c:	687b      	ldr	r3, [r7, #4]
 8001b4e:	681b      	ldr	r3, [r3, #0]
 8001b50:	4a3e      	ldr	r2, [pc, #248]	; (8001c4c <HAL_DMA_Abort+0x608>)
 8001b52:	4293      	cmp	r3, r2
 8001b54:	d03b      	beq.n	8001bce <HAL_DMA_Abort+0x58a>
 8001b56:	687b      	ldr	r3, [r7, #4]
 8001b58:	681b      	ldr	r3, [r3, #0]
 8001b5a:	4a3d      	ldr	r2, [pc, #244]	; (8001c50 <HAL_DMA_Abort+0x60c>)
 8001b5c:	4293      	cmp	r3, r2
 8001b5e:	d036      	beq.n	8001bce <HAL_DMA_Abort+0x58a>
 8001b60:	687b      	ldr	r3, [r7, #4]
 8001b62:	681b      	ldr	r3, [r3, #0]
 8001b64:	4a3b      	ldr	r2, [pc, #236]	; (8001c54 <HAL_DMA_Abort+0x610>)
 8001b66:	4293      	cmp	r3, r2
 8001b68:	d031      	beq.n	8001bce <HAL_DMA_Abort+0x58a>
 8001b6a:	687b      	ldr	r3, [r7, #4]
 8001b6c:	681b      	ldr	r3, [r3, #0]
 8001b6e:	4a3a      	ldr	r2, [pc, #232]	; (8001c58 <HAL_DMA_Abort+0x614>)
 8001b70:	4293      	cmp	r3, r2
 8001b72:	d02c      	beq.n	8001bce <HAL_DMA_Abort+0x58a>
 8001b74:	687b      	ldr	r3, [r7, #4]
 8001b76:	681b      	ldr	r3, [r3, #0]
 8001b78:	4a38      	ldr	r2, [pc, #224]	; (8001c5c <HAL_DMA_Abort+0x618>)
 8001b7a:	4293      	cmp	r3, r2
 8001b7c:	d027      	beq.n	8001bce <HAL_DMA_Abort+0x58a>
 8001b7e:	687b      	ldr	r3, [r7, #4]
 8001b80:	681b      	ldr	r3, [r3, #0]
 8001b82:	4a37      	ldr	r2, [pc, #220]	; (8001c60 <HAL_DMA_Abort+0x61c>)
 8001b84:	4293      	cmp	r3, r2
 8001b86:	d022      	beq.n	8001bce <HAL_DMA_Abort+0x58a>
 8001b88:	687b      	ldr	r3, [r7, #4]
 8001b8a:	681b      	ldr	r3, [r3, #0]
 8001b8c:	4a35      	ldr	r2, [pc, #212]	; (8001c64 <HAL_DMA_Abort+0x620>)
 8001b8e:	4293      	cmp	r3, r2
 8001b90:	d01d      	beq.n	8001bce <HAL_DMA_Abort+0x58a>
 8001b92:	687b      	ldr	r3, [r7, #4]
 8001b94:	681b      	ldr	r3, [r3, #0]
 8001b96:	4a34      	ldr	r2, [pc, #208]	; (8001c68 <HAL_DMA_Abort+0x624>)
 8001b98:	4293      	cmp	r3, r2
 8001b9a:	d018      	beq.n	8001bce <HAL_DMA_Abort+0x58a>
 8001b9c:	687b      	ldr	r3, [r7, #4]
 8001b9e:	681b      	ldr	r3, [r3, #0]
 8001ba0:	4a32      	ldr	r2, [pc, #200]	; (8001c6c <HAL_DMA_Abort+0x628>)
 8001ba2:	4293      	cmp	r3, r2
 8001ba4:	d013      	beq.n	8001bce <HAL_DMA_Abort+0x58a>
 8001ba6:	687b      	ldr	r3, [r7, #4]
 8001ba8:	681b      	ldr	r3, [r3, #0]
 8001baa:	4a31      	ldr	r2, [pc, #196]	; (8001c70 <HAL_DMA_Abort+0x62c>)
 8001bac:	4293      	cmp	r3, r2
 8001bae:	d00e      	beq.n	8001bce <HAL_DMA_Abort+0x58a>
 8001bb0:	687b      	ldr	r3, [r7, #4]
 8001bb2:	681b      	ldr	r3, [r3, #0]
 8001bb4:	4a2f      	ldr	r2, [pc, #188]	; (8001c74 <HAL_DMA_Abort+0x630>)
 8001bb6:	4293      	cmp	r3, r2
 8001bb8:	d009      	beq.n	8001bce <HAL_DMA_Abort+0x58a>
 8001bba:	687b      	ldr	r3, [r7, #4]
 8001bbc:	681b      	ldr	r3, [r3, #0]
 8001bbe:	4a2e      	ldr	r2, [pc, #184]	; (8001c78 <HAL_DMA_Abort+0x634>)
 8001bc0:	4293      	cmp	r3, r2
 8001bc2:	d004      	beq.n	8001bce <HAL_DMA_Abort+0x58a>
 8001bc4:	687b      	ldr	r3, [r7, #4]
 8001bc6:	681b      	ldr	r3, [r3, #0]
 8001bc8:	4a2c      	ldr	r2, [pc, #176]	; (8001c7c <HAL_DMA_Abort+0x638>)
 8001bca:	4293      	cmp	r3, r2
 8001bcc:	d101      	bne.n	8001bd2 <HAL_DMA_Abort+0x58e>
 8001bce:	2301      	movs	r3, #1
 8001bd0:	e000      	b.n	8001bd4 <HAL_DMA_Abort+0x590>
 8001bd2:	2300      	movs	r3, #0
 8001bd4:	2b00      	cmp	r3, #0
 8001bd6:	d015      	beq.n	8001c04 <HAL_DMA_Abort+0x5c0>
    {
      /* Clear the DMAMUX synchro overrun flag */
      hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8001bd8:	687b      	ldr	r3, [r7, #4]
 8001bda:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8001bdc:	687a      	ldr	r2, [r7, #4]
 8001bde:	6e92      	ldr	r2, [r2, #104]	; 0x68
 8001be0:	605a      	str	r2, [r3, #4]

      if(hdma->DMAmuxRequestGen != 0U)
 8001be2:	687b      	ldr	r3, [r7, #4]
 8001be4:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8001be6:	2b00      	cmp	r3, #0
 8001be8:	d00c      	beq.n	8001c04 <HAL_DMA_Abort+0x5c0>
      {
        /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT */
        /* disable the request gen overrun IT */
        hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8001bea:	687b      	ldr	r3, [r7, #4]
 8001bec:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8001bee:	681a      	ldr	r2, [r3, #0]
 8001bf0:	687b      	ldr	r3, [r7, #4]
 8001bf2:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8001bf4:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8001bf8:	601a      	str	r2, [r3, #0]

        /* Clear the DMAMUX request generator overrun flag */
        hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8001bfa:	687b      	ldr	r3, [r7, #4]
 8001bfc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001bfe:	687a      	ldr	r2, [r7, #4]
 8001c00:	6f52      	ldr	r2, [r2, #116]	; 0x74
 8001c02:	605a      	str	r2, [r3, #4]
      }
    }

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001c04:	687b      	ldr	r3, [r7, #4]
 8001c06:	2200      	movs	r2, #0
 8001c08:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8001c0c:	687b      	ldr	r3, [r7, #4]
 8001c0e:	2201      	movs	r2, #1
 8001c10:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
  }

  return HAL_OK;
 8001c14:	2300      	movs	r3, #0
}
 8001c16:	4618      	mov	r0, r3
 8001c18:	3718      	adds	r7, #24
 8001c1a:	46bd      	mov	sp, r7
 8001c1c:	bd80      	pop	{r7, pc}
 8001c1e:	bf00      	nop
 8001c20:	40020010 	.word	0x40020010
 8001c24:	40020028 	.word	0x40020028
 8001c28:	40020040 	.word	0x40020040
 8001c2c:	40020058 	.word	0x40020058
 8001c30:	40020070 	.word	0x40020070
 8001c34:	40020088 	.word	0x40020088
 8001c38:	400200a0 	.word	0x400200a0
 8001c3c:	400200b8 	.word	0x400200b8
 8001c40:	40020410 	.word	0x40020410
 8001c44:	40020428 	.word	0x40020428
 8001c48:	40020440 	.word	0x40020440
 8001c4c:	40020458 	.word	0x40020458
 8001c50:	40020470 	.word	0x40020470
 8001c54:	40020488 	.word	0x40020488
 8001c58:	400204a0 	.word	0x400204a0
 8001c5c:	400204b8 	.word	0x400204b8
 8001c60:	58025408 	.word	0x58025408
 8001c64:	5802541c 	.word	0x5802541c
 8001c68:	58025430 	.word	0x58025430
 8001c6c:	58025444 	.word	0x58025444
 8001c70:	58025458 	.word	0x58025458
 8001c74:	5802546c 	.word	0x5802546c
 8001c78:	58025480 	.word	0x58025480
 8001c7c:	58025494 	.word	0x58025494

08001c80 <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8001c80:	b580      	push	{r7, lr}
 8001c82:	b084      	sub	sp, #16
 8001c84:	af00      	add	r7, sp, #0
 8001c86:	6078      	str	r0, [r7, #4]
  BDMA_Base_Registers *regs_bdma;

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 8001c88:	687b      	ldr	r3, [r7, #4]
 8001c8a:	2b00      	cmp	r3, #0
 8001c8c:	d101      	bne.n	8001c92 <HAL_DMA_Abort_IT+0x12>
  {
    return HAL_ERROR;
 8001c8e:	2301      	movs	r3, #1
 8001c90:	e205      	b.n	800209e <HAL_DMA_Abort_IT+0x41e>
  }

  if(hdma->State != HAL_DMA_STATE_BUSY)
 8001c92:	687b      	ldr	r3, [r7, #4]
 8001c94:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8001c98:	b2db      	uxtb	r3, r3
 8001c9a:	2b02      	cmp	r3, #2
 8001c9c:	d004      	beq.n	8001ca8 <HAL_DMA_Abort_IT+0x28>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001c9e:	687b      	ldr	r3, [r7, #4]
 8001ca0:	2280      	movs	r2, #128	; 0x80
 8001ca2:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8001ca4:	2301      	movs	r3, #1
 8001ca6:	e1fa      	b.n	800209e <HAL_DMA_Abort_IT+0x41e>
  }
  else
  {
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8001ca8:	687b      	ldr	r3, [r7, #4]
 8001caa:	681b      	ldr	r3, [r3, #0]
 8001cac:	4a8c      	ldr	r2, [pc, #560]	; (8001ee0 <HAL_DMA_Abort_IT+0x260>)
 8001cae:	4293      	cmp	r3, r2
 8001cb0:	d04a      	beq.n	8001d48 <HAL_DMA_Abort_IT+0xc8>
 8001cb2:	687b      	ldr	r3, [r7, #4]
 8001cb4:	681b      	ldr	r3, [r3, #0]
 8001cb6:	4a8b      	ldr	r2, [pc, #556]	; (8001ee4 <HAL_DMA_Abort_IT+0x264>)
 8001cb8:	4293      	cmp	r3, r2
 8001cba:	d045      	beq.n	8001d48 <HAL_DMA_Abort_IT+0xc8>
 8001cbc:	687b      	ldr	r3, [r7, #4]
 8001cbe:	681b      	ldr	r3, [r3, #0]
 8001cc0:	4a89      	ldr	r2, [pc, #548]	; (8001ee8 <HAL_DMA_Abort_IT+0x268>)
 8001cc2:	4293      	cmp	r3, r2
 8001cc4:	d040      	beq.n	8001d48 <HAL_DMA_Abort_IT+0xc8>
 8001cc6:	687b      	ldr	r3, [r7, #4]
 8001cc8:	681b      	ldr	r3, [r3, #0]
 8001cca:	4a88      	ldr	r2, [pc, #544]	; (8001eec <HAL_DMA_Abort_IT+0x26c>)
 8001ccc:	4293      	cmp	r3, r2
 8001cce:	d03b      	beq.n	8001d48 <HAL_DMA_Abort_IT+0xc8>
 8001cd0:	687b      	ldr	r3, [r7, #4]
 8001cd2:	681b      	ldr	r3, [r3, #0]
 8001cd4:	4a86      	ldr	r2, [pc, #536]	; (8001ef0 <HAL_DMA_Abort_IT+0x270>)
 8001cd6:	4293      	cmp	r3, r2
 8001cd8:	d036      	beq.n	8001d48 <HAL_DMA_Abort_IT+0xc8>
 8001cda:	687b      	ldr	r3, [r7, #4]
 8001cdc:	681b      	ldr	r3, [r3, #0]
 8001cde:	4a85      	ldr	r2, [pc, #532]	; (8001ef4 <HAL_DMA_Abort_IT+0x274>)
 8001ce0:	4293      	cmp	r3, r2
 8001ce2:	d031      	beq.n	8001d48 <HAL_DMA_Abort_IT+0xc8>
 8001ce4:	687b      	ldr	r3, [r7, #4]
 8001ce6:	681b      	ldr	r3, [r3, #0]
 8001ce8:	4a83      	ldr	r2, [pc, #524]	; (8001ef8 <HAL_DMA_Abort_IT+0x278>)
 8001cea:	4293      	cmp	r3, r2
 8001cec:	d02c      	beq.n	8001d48 <HAL_DMA_Abort_IT+0xc8>
 8001cee:	687b      	ldr	r3, [r7, #4]
 8001cf0:	681b      	ldr	r3, [r3, #0]
 8001cf2:	4a82      	ldr	r2, [pc, #520]	; (8001efc <HAL_DMA_Abort_IT+0x27c>)
 8001cf4:	4293      	cmp	r3, r2
 8001cf6:	d027      	beq.n	8001d48 <HAL_DMA_Abort_IT+0xc8>
 8001cf8:	687b      	ldr	r3, [r7, #4]
 8001cfa:	681b      	ldr	r3, [r3, #0]
 8001cfc:	4a80      	ldr	r2, [pc, #512]	; (8001f00 <HAL_DMA_Abort_IT+0x280>)
 8001cfe:	4293      	cmp	r3, r2
 8001d00:	d022      	beq.n	8001d48 <HAL_DMA_Abort_IT+0xc8>
 8001d02:	687b      	ldr	r3, [r7, #4]
 8001d04:	681b      	ldr	r3, [r3, #0]
 8001d06:	4a7f      	ldr	r2, [pc, #508]	; (8001f04 <HAL_DMA_Abort_IT+0x284>)
 8001d08:	4293      	cmp	r3, r2
 8001d0a:	d01d      	beq.n	8001d48 <HAL_DMA_Abort_IT+0xc8>
 8001d0c:	687b      	ldr	r3, [r7, #4]
 8001d0e:	681b      	ldr	r3, [r3, #0]
 8001d10:	4a7d      	ldr	r2, [pc, #500]	; (8001f08 <HAL_DMA_Abort_IT+0x288>)
 8001d12:	4293      	cmp	r3, r2
 8001d14:	d018      	beq.n	8001d48 <HAL_DMA_Abort_IT+0xc8>
 8001d16:	687b      	ldr	r3, [r7, #4]
 8001d18:	681b      	ldr	r3, [r3, #0]
 8001d1a:	4a7c      	ldr	r2, [pc, #496]	; (8001f0c <HAL_DMA_Abort_IT+0x28c>)
 8001d1c:	4293      	cmp	r3, r2
 8001d1e:	d013      	beq.n	8001d48 <HAL_DMA_Abort_IT+0xc8>
 8001d20:	687b      	ldr	r3, [r7, #4]
 8001d22:	681b      	ldr	r3, [r3, #0]
 8001d24:	4a7a      	ldr	r2, [pc, #488]	; (8001f10 <HAL_DMA_Abort_IT+0x290>)
 8001d26:	4293      	cmp	r3, r2
 8001d28:	d00e      	beq.n	8001d48 <HAL_DMA_Abort_IT+0xc8>
 8001d2a:	687b      	ldr	r3, [r7, #4]
 8001d2c:	681b      	ldr	r3, [r3, #0]
 8001d2e:	4a79      	ldr	r2, [pc, #484]	; (8001f14 <HAL_DMA_Abort_IT+0x294>)
 8001d30:	4293      	cmp	r3, r2
 8001d32:	d009      	beq.n	8001d48 <HAL_DMA_Abort_IT+0xc8>
 8001d34:	687b      	ldr	r3, [r7, #4]
 8001d36:	681b      	ldr	r3, [r3, #0]
 8001d38:	4a77      	ldr	r2, [pc, #476]	; (8001f18 <HAL_DMA_Abort_IT+0x298>)
 8001d3a:	4293      	cmp	r3, r2
 8001d3c:	d004      	beq.n	8001d48 <HAL_DMA_Abort_IT+0xc8>
 8001d3e:	687b      	ldr	r3, [r7, #4]
 8001d40:	681b      	ldr	r3, [r3, #0]
 8001d42:	4a76      	ldr	r2, [pc, #472]	; (8001f1c <HAL_DMA_Abort_IT+0x29c>)
 8001d44:	4293      	cmp	r3, r2
 8001d46:	d101      	bne.n	8001d4c <HAL_DMA_Abort_IT+0xcc>
 8001d48:	2301      	movs	r3, #1
 8001d4a:	e000      	b.n	8001d4e <HAL_DMA_Abort_IT+0xce>
 8001d4c:	2300      	movs	r3, #0
 8001d4e:	2b00      	cmp	r3, #0
 8001d50:	d065      	beq.n	8001e1e <HAL_DMA_Abort_IT+0x19e>
    {
      /* Set Abort State  */
      hdma->State = HAL_DMA_STATE_ABORT;
 8001d52:	687b      	ldr	r3, [r7, #4]
 8001d54:	2204      	movs	r2, #4
 8001d56:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8001d5a:	687b      	ldr	r3, [r7, #4]
 8001d5c:	681b      	ldr	r3, [r3, #0]
 8001d5e:	4a60      	ldr	r2, [pc, #384]	; (8001ee0 <HAL_DMA_Abort_IT+0x260>)
 8001d60:	4293      	cmp	r3, r2
 8001d62:	d04a      	beq.n	8001dfa <HAL_DMA_Abort_IT+0x17a>
 8001d64:	687b      	ldr	r3, [r7, #4]
 8001d66:	681b      	ldr	r3, [r3, #0]
 8001d68:	4a5e      	ldr	r2, [pc, #376]	; (8001ee4 <HAL_DMA_Abort_IT+0x264>)
 8001d6a:	4293      	cmp	r3, r2
 8001d6c:	d045      	beq.n	8001dfa <HAL_DMA_Abort_IT+0x17a>
 8001d6e:	687b      	ldr	r3, [r7, #4]
 8001d70:	681b      	ldr	r3, [r3, #0]
 8001d72:	4a5d      	ldr	r2, [pc, #372]	; (8001ee8 <HAL_DMA_Abort_IT+0x268>)
 8001d74:	4293      	cmp	r3, r2
 8001d76:	d040      	beq.n	8001dfa <HAL_DMA_Abort_IT+0x17a>
 8001d78:	687b      	ldr	r3, [r7, #4]
 8001d7a:	681b      	ldr	r3, [r3, #0]
 8001d7c:	4a5b      	ldr	r2, [pc, #364]	; (8001eec <HAL_DMA_Abort_IT+0x26c>)
 8001d7e:	4293      	cmp	r3, r2
 8001d80:	d03b      	beq.n	8001dfa <HAL_DMA_Abort_IT+0x17a>
 8001d82:	687b      	ldr	r3, [r7, #4]
 8001d84:	681b      	ldr	r3, [r3, #0]
 8001d86:	4a5a      	ldr	r2, [pc, #360]	; (8001ef0 <HAL_DMA_Abort_IT+0x270>)
 8001d88:	4293      	cmp	r3, r2
 8001d8a:	d036      	beq.n	8001dfa <HAL_DMA_Abort_IT+0x17a>
 8001d8c:	687b      	ldr	r3, [r7, #4]
 8001d8e:	681b      	ldr	r3, [r3, #0]
 8001d90:	4a58      	ldr	r2, [pc, #352]	; (8001ef4 <HAL_DMA_Abort_IT+0x274>)
 8001d92:	4293      	cmp	r3, r2
 8001d94:	d031      	beq.n	8001dfa <HAL_DMA_Abort_IT+0x17a>
 8001d96:	687b      	ldr	r3, [r7, #4]
 8001d98:	681b      	ldr	r3, [r3, #0]
 8001d9a:	4a57      	ldr	r2, [pc, #348]	; (8001ef8 <HAL_DMA_Abort_IT+0x278>)
 8001d9c:	4293      	cmp	r3, r2
 8001d9e:	d02c      	beq.n	8001dfa <HAL_DMA_Abort_IT+0x17a>
 8001da0:	687b      	ldr	r3, [r7, #4]
 8001da2:	681b      	ldr	r3, [r3, #0]
 8001da4:	4a55      	ldr	r2, [pc, #340]	; (8001efc <HAL_DMA_Abort_IT+0x27c>)
 8001da6:	4293      	cmp	r3, r2
 8001da8:	d027      	beq.n	8001dfa <HAL_DMA_Abort_IT+0x17a>
 8001daa:	687b      	ldr	r3, [r7, #4]
 8001dac:	681b      	ldr	r3, [r3, #0]
 8001dae:	4a54      	ldr	r2, [pc, #336]	; (8001f00 <HAL_DMA_Abort_IT+0x280>)
 8001db0:	4293      	cmp	r3, r2
 8001db2:	d022      	beq.n	8001dfa <HAL_DMA_Abort_IT+0x17a>
 8001db4:	687b      	ldr	r3, [r7, #4]
 8001db6:	681b      	ldr	r3, [r3, #0]
 8001db8:	4a52      	ldr	r2, [pc, #328]	; (8001f04 <HAL_DMA_Abort_IT+0x284>)
 8001dba:	4293      	cmp	r3, r2
 8001dbc:	d01d      	beq.n	8001dfa <HAL_DMA_Abort_IT+0x17a>
 8001dbe:	687b      	ldr	r3, [r7, #4]
 8001dc0:	681b      	ldr	r3, [r3, #0]
 8001dc2:	4a51      	ldr	r2, [pc, #324]	; (8001f08 <HAL_DMA_Abort_IT+0x288>)
 8001dc4:	4293      	cmp	r3, r2
 8001dc6:	d018      	beq.n	8001dfa <HAL_DMA_Abort_IT+0x17a>
 8001dc8:	687b      	ldr	r3, [r7, #4]
 8001dca:	681b      	ldr	r3, [r3, #0]
 8001dcc:	4a4f      	ldr	r2, [pc, #316]	; (8001f0c <HAL_DMA_Abort_IT+0x28c>)
 8001dce:	4293      	cmp	r3, r2
 8001dd0:	d013      	beq.n	8001dfa <HAL_DMA_Abort_IT+0x17a>
 8001dd2:	687b      	ldr	r3, [r7, #4]
 8001dd4:	681b      	ldr	r3, [r3, #0]
 8001dd6:	4a4e      	ldr	r2, [pc, #312]	; (8001f10 <HAL_DMA_Abort_IT+0x290>)
 8001dd8:	4293      	cmp	r3, r2
 8001dda:	d00e      	beq.n	8001dfa <HAL_DMA_Abort_IT+0x17a>
 8001ddc:	687b      	ldr	r3, [r7, #4]
 8001dde:	681b      	ldr	r3, [r3, #0]
 8001de0:	4a4c      	ldr	r2, [pc, #304]	; (8001f14 <HAL_DMA_Abort_IT+0x294>)
 8001de2:	4293      	cmp	r3, r2
 8001de4:	d009      	beq.n	8001dfa <HAL_DMA_Abort_IT+0x17a>
 8001de6:	687b      	ldr	r3, [r7, #4]
 8001de8:	681b      	ldr	r3, [r3, #0]
 8001dea:	4a4b      	ldr	r2, [pc, #300]	; (8001f18 <HAL_DMA_Abort_IT+0x298>)
 8001dec:	4293      	cmp	r3, r2
 8001dee:	d004      	beq.n	8001dfa <HAL_DMA_Abort_IT+0x17a>
 8001df0:	687b      	ldr	r3, [r7, #4]
 8001df2:	681b      	ldr	r3, [r3, #0]
 8001df4:	4a49      	ldr	r2, [pc, #292]	; (8001f1c <HAL_DMA_Abort_IT+0x29c>)
 8001df6:	4293      	cmp	r3, r2
 8001df8:	d108      	bne.n	8001e0c <HAL_DMA_Abort_IT+0x18c>
 8001dfa:	687b      	ldr	r3, [r7, #4]
 8001dfc:	681b      	ldr	r3, [r3, #0]
 8001dfe:	681a      	ldr	r2, [r3, #0]
 8001e00:	687b      	ldr	r3, [r7, #4]
 8001e02:	681b      	ldr	r3, [r3, #0]
 8001e04:	f022 0201 	bic.w	r2, r2, #1
 8001e08:	601a      	str	r2, [r3, #0]
 8001e0a:	e147      	b.n	800209c <HAL_DMA_Abort_IT+0x41c>
 8001e0c:	687b      	ldr	r3, [r7, #4]
 8001e0e:	681b      	ldr	r3, [r3, #0]
 8001e10:	681a      	ldr	r2, [r3, #0]
 8001e12:	687b      	ldr	r3, [r7, #4]
 8001e14:	681b      	ldr	r3, [r3, #0]
 8001e16:	f022 0201 	bic.w	r2, r2, #1
 8001e1a:	601a      	str	r2, [r3, #0]
 8001e1c:	e13e      	b.n	800209c <HAL_DMA_Abort_IT+0x41c>
    }
    else /* BDMA channel */
    {
      /* Disable DMA All Interrupts  */
      ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  &= ~(BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE);
 8001e1e:	687b      	ldr	r3, [r7, #4]
 8001e20:	681b      	ldr	r3, [r3, #0]
 8001e22:	681a      	ldr	r2, [r3, #0]
 8001e24:	687b      	ldr	r3, [r7, #4]
 8001e26:	681b      	ldr	r3, [r3, #0]
 8001e28:	f022 020e 	bic.w	r2, r2, #14
 8001e2c:	601a      	str	r2, [r3, #0]

      /* Disable the channel */
      __HAL_DMA_DISABLE(hdma);
 8001e2e:	687b      	ldr	r3, [r7, #4]
 8001e30:	681b      	ldr	r3, [r3, #0]
 8001e32:	4a2b      	ldr	r2, [pc, #172]	; (8001ee0 <HAL_DMA_Abort_IT+0x260>)
 8001e34:	4293      	cmp	r3, r2
 8001e36:	d04a      	beq.n	8001ece <HAL_DMA_Abort_IT+0x24e>
 8001e38:	687b      	ldr	r3, [r7, #4]
 8001e3a:	681b      	ldr	r3, [r3, #0]
 8001e3c:	4a29      	ldr	r2, [pc, #164]	; (8001ee4 <HAL_DMA_Abort_IT+0x264>)
 8001e3e:	4293      	cmp	r3, r2
 8001e40:	d045      	beq.n	8001ece <HAL_DMA_Abort_IT+0x24e>
 8001e42:	687b      	ldr	r3, [r7, #4]
 8001e44:	681b      	ldr	r3, [r3, #0]
 8001e46:	4a28      	ldr	r2, [pc, #160]	; (8001ee8 <HAL_DMA_Abort_IT+0x268>)
 8001e48:	4293      	cmp	r3, r2
 8001e4a:	d040      	beq.n	8001ece <HAL_DMA_Abort_IT+0x24e>
 8001e4c:	687b      	ldr	r3, [r7, #4]
 8001e4e:	681b      	ldr	r3, [r3, #0]
 8001e50:	4a26      	ldr	r2, [pc, #152]	; (8001eec <HAL_DMA_Abort_IT+0x26c>)
 8001e52:	4293      	cmp	r3, r2
 8001e54:	d03b      	beq.n	8001ece <HAL_DMA_Abort_IT+0x24e>
 8001e56:	687b      	ldr	r3, [r7, #4]
 8001e58:	681b      	ldr	r3, [r3, #0]
 8001e5a:	4a25      	ldr	r2, [pc, #148]	; (8001ef0 <HAL_DMA_Abort_IT+0x270>)
 8001e5c:	4293      	cmp	r3, r2
 8001e5e:	d036      	beq.n	8001ece <HAL_DMA_Abort_IT+0x24e>
 8001e60:	687b      	ldr	r3, [r7, #4]
 8001e62:	681b      	ldr	r3, [r3, #0]
 8001e64:	4a23      	ldr	r2, [pc, #140]	; (8001ef4 <HAL_DMA_Abort_IT+0x274>)
 8001e66:	4293      	cmp	r3, r2
 8001e68:	d031      	beq.n	8001ece <HAL_DMA_Abort_IT+0x24e>
 8001e6a:	687b      	ldr	r3, [r7, #4]
 8001e6c:	681b      	ldr	r3, [r3, #0]
 8001e6e:	4a22      	ldr	r2, [pc, #136]	; (8001ef8 <HAL_DMA_Abort_IT+0x278>)
 8001e70:	4293      	cmp	r3, r2
 8001e72:	d02c      	beq.n	8001ece <HAL_DMA_Abort_IT+0x24e>
 8001e74:	687b      	ldr	r3, [r7, #4]
 8001e76:	681b      	ldr	r3, [r3, #0]
 8001e78:	4a20      	ldr	r2, [pc, #128]	; (8001efc <HAL_DMA_Abort_IT+0x27c>)
 8001e7a:	4293      	cmp	r3, r2
 8001e7c:	d027      	beq.n	8001ece <HAL_DMA_Abort_IT+0x24e>
 8001e7e:	687b      	ldr	r3, [r7, #4]
 8001e80:	681b      	ldr	r3, [r3, #0]
 8001e82:	4a1f      	ldr	r2, [pc, #124]	; (8001f00 <HAL_DMA_Abort_IT+0x280>)
 8001e84:	4293      	cmp	r3, r2
 8001e86:	d022      	beq.n	8001ece <HAL_DMA_Abort_IT+0x24e>
 8001e88:	687b      	ldr	r3, [r7, #4]
 8001e8a:	681b      	ldr	r3, [r3, #0]
 8001e8c:	4a1d      	ldr	r2, [pc, #116]	; (8001f04 <HAL_DMA_Abort_IT+0x284>)
 8001e8e:	4293      	cmp	r3, r2
 8001e90:	d01d      	beq.n	8001ece <HAL_DMA_Abort_IT+0x24e>
 8001e92:	687b      	ldr	r3, [r7, #4]
 8001e94:	681b      	ldr	r3, [r3, #0]
 8001e96:	4a1c      	ldr	r2, [pc, #112]	; (8001f08 <HAL_DMA_Abort_IT+0x288>)
 8001e98:	4293      	cmp	r3, r2
 8001e9a:	d018      	beq.n	8001ece <HAL_DMA_Abort_IT+0x24e>
 8001e9c:	687b      	ldr	r3, [r7, #4]
 8001e9e:	681b      	ldr	r3, [r3, #0]
 8001ea0:	4a1a      	ldr	r2, [pc, #104]	; (8001f0c <HAL_DMA_Abort_IT+0x28c>)
 8001ea2:	4293      	cmp	r3, r2
 8001ea4:	d013      	beq.n	8001ece <HAL_DMA_Abort_IT+0x24e>
 8001ea6:	687b      	ldr	r3, [r7, #4]
 8001ea8:	681b      	ldr	r3, [r3, #0]
 8001eaa:	4a19      	ldr	r2, [pc, #100]	; (8001f10 <HAL_DMA_Abort_IT+0x290>)
 8001eac:	4293      	cmp	r3, r2
 8001eae:	d00e      	beq.n	8001ece <HAL_DMA_Abort_IT+0x24e>
 8001eb0:	687b      	ldr	r3, [r7, #4]
 8001eb2:	681b      	ldr	r3, [r3, #0]
 8001eb4:	4a17      	ldr	r2, [pc, #92]	; (8001f14 <HAL_DMA_Abort_IT+0x294>)
 8001eb6:	4293      	cmp	r3, r2
 8001eb8:	d009      	beq.n	8001ece <HAL_DMA_Abort_IT+0x24e>
 8001eba:	687b      	ldr	r3, [r7, #4]
 8001ebc:	681b      	ldr	r3, [r3, #0]
 8001ebe:	4a16      	ldr	r2, [pc, #88]	; (8001f18 <HAL_DMA_Abort_IT+0x298>)
 8001ec0:	4293      	cmp	r3, r2
 8001ec2:	d004      	beq.n	8001ece <HAL_DMA_Abort_IT+0x24e>
 8001ec4:	687b      	ldr	r3, [r7, #4]
 8001ec6:	681b      	ldr	r3, [r3, #0]
 8001ec8:	4a14      	ldr	r2, [pc, #80]	; (8001f1c <HAL_DMA_Abort_IT+0x29c>)
 8001eca:	4293      	cmp	r3, r2
 8001ecc:	d128      	bne.n	8001f20 <HAL_DMA_Abort_IT+0x2a0>
 8001ece:	687b      	ldr	r3, [r7, #4]
 8001ed0:	681b      	ldr	r3, [r3, #0]
 8001ed2:	681a      	ldr	r2, [r3, #0]
 8001ed4:	687b      	ldr	r3, [r7, #4]
 8001ed6:	681b      	ldr	r3, [r3, #0]
 8001ed8:	f022 0201 	bic.w	r2, r2, #1
 8001edc:	601a      	str	r2, [r3, #0]
 8001ede:	e027      	b.n	8001f30 <HAL_DMA_Abort_IT+0x2b0>
 8001ee0:	40020010 	.word	0x40020010
 8001ee4:	40020028 	.word	0x40020028
 8001ee8:	40020040 	.word	0x40020040
 8001eec:	40020058 	.word	0x40020058
 8001ef0:	40020070 	.word	0x40020070
 8001ef4:	40020088 	.word	0x40020088
 8001ef8:	400200a0 	.word	0x400200a0
 8001efc:	400200b8 	.word	0x400200b8
 8001f00:	40020410 	.word	0x40020410
 8001f04:	40020428 	.word	0x40020428
 8001f08:	40020440 	.word	0x40020440
 8001f0c:	40020458 	.word	0x40020458
 8001f10:	40020470 	.word	0x40020470
 8001f14:	40020488 	.word	0x40020488
 8001f18:	400204a0 	.word	0x400204a0
 8001f1c:	400204b8 	.word	0x400204b8
 8001f20:	687b      	ldr	r3, [r7, #4]
 8001f22:	681b      	ldr	r3, [r3, #0]
 8001f24:	681a      	ldr	r2, [r3, #0]
 8001f26:	687b      	ldr	r3, [r7, #4]
 8001f28:	681b      	ldr	r3, [r3, #0]
 8001f2a:	f022 0201 	bic.w	r2, r2, #1
 8001f2e:	601a      	str	r2, [r3, #0]

      if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8001f30:	687b      	ldr	r3, [r7, #4]
 8001f32:	681b      	ldr	r3, [r3, #0]
 8001f34:	4a5c      	ldr	r2, [pc, #368]	; (80020a8 <HAL_DMA_Abort_IT+0x428>)
 8001f36:	4293      	cmp	r3, r2
 8001f38:	d072      	beq.n	8002020 <HAL_DMA_Abort_IT+0x3a0>
 8001f3a:	687b      	ldr	r3, [r7, #4]
 8001f3c:	681b      	ldr	r3, [r3, #0]
 8001f3e:	4a5b      	ldr	r2, [pc, #364]	; (80020ac <HAL_DMA_Abort_IT+0x42c>)
 8001f40:	4293      	cmp	r3, r2
 8001f42:	d06d      	beq.n	8002020 <HAL_DMA_Abort_IT+0x3a0>
 8001f44:	687b      	ldr	r3, [r7, #4]
 8001f46:	681b      	ldr	r3, [r3, #0]
 8001f48:	4a59      	ldr	r2, [pc, #356]	; (80020b0 <HAL_DMA_Abort_IT+0x430>)
 8001f4a:	4293      	cmp	r3, r2
 8001f4c:	d068      	beq.n	8002020 <HAL_DMA_Abort_IT+0x3a0>
 8001f4e:	687b      	ldr	r3, [r7, #4]
 8001f50:	681b      	ldr	r3, [r3, #0]
 8001f52:	4a58      	ldr	r2, [pc, #352]	; (80020b4 <HAL_DMA_Abort_IT+0x434>)
 8001f54:	4293      	cmp	r3, r2
 8001f56:	d063      	beq.n	8002020 <HAL_DMA_Abort_IT+0x3a0>
 8001f58:	687b      	ldr	r3, [r7, #4]
 8001f5a:	681b      	ldr	r3, [r3, #0]
 8001f5c:	4a56      	ldr	r2, [pc, #344]	; (80020b8 <HAL_DMA_Abort_IT+0x438>)
 8001f5e:	4293      	cmp	r3, r2
 8001f60:	d05e      	beq.n	8002020 <HAL_DMA_Abort_IT+0x3a0>
 8001f62:	687b      	ldr	r3, [r7, #4]
 8001f64:	681b      	ldr	r3, [r3, #0]
 8001f66:	4a55      	ldr	r2, [pc, #340]	; (80020bc <HAL_DMA_Abort_IT+0x43c>)
 8001f68:	4293      	cmp	r3, r2
 8001f6a:	d059      	beq.n	8002020 <HAL_DMA_Abort_IT+0x3a0>
 8001f6c:	687b      	ldr	r3, [r7, #4]
 8001f6e:	681b      	ldr	r3, [r3, #0]
 8001f70:	4a53      	ldr	r2, [pc, #332]	; (80020c0 <HAL_DMA_Abort_IT+0x440>)
 8001f72:	4293      	cmp	r3, r2
 8001f74:	d054      	beq.n	8002020 <HAL_DMA_Abort_IT+0x3a0>
 8001f76:	687b      	ldr	r3, [r7, #4]
 8001f78:	681b      	ldr	r3, [r3, #0]
 8001f7a:	4a52      	ldr	r2, [pc, #328]	; (80020c4 <HAL_DMA_Abort_IT+0x444>)
 8001f7c:	4293      	cmp	r3, r2
 8001f7e:	d04f      	beq.n	8002020 <HAL_DMA_Abort_IT+0x3a0>
 8001f80:	687b      	ldr	r3, [r7, #4]
 8001f82:	681b      	ldr	r3, [r3, #0]
 8001f84:	4a50      	ldr	r2, [pc, #320]	; (80020c8 <HAL_DMA_Abort_IT+0x448>)
 8001f86:	4293      	cmp	r3, r2
 8001f88:	d04a      	beq.n	8002020 <HAL_DMA_Abort_IT+0x3a0>
 8001f8a:	687b      	ldr	r3, [r7, #4]
 8001f8c:	681b      	ldr	r3, [r3, #0]
 8001f8e:	4a4f      	ldr	r2, [pc, #316]	; (80020cc <HAL_DMA_Abort_IT+0x44c>)
 8001f90:	4293      	cmp	r3, r2
 8001f92:	d045      	beq.n	8002020 <HAL_DMA_Abort_IT+0x3a0>
 8001f94:	687b      	ldr	r3, [r7, #4]
 8001f96:	681b      	ldr	r3, [r3, #0]
 8001f98:	4a4d      	ldr	r2, [pc, #308]	; (80020d0 <HAL_DMA_Abort_IT+0x450>)
 8001f9a:	4293      	cmp	r3, r2
 8001f9c:	d040      	beq.n	8002020 <HAL_DMA_Abort_IT+0x3a0>
 8001f9e:	687b      	ldr	r3, [r7, #4]
 8001fa0:	681b      	ldr	r3, [r3, #0]
 8001fa2:	4a4c      	ldr	r2, [pc, #304]	; (80020d4 <HAL_DMA_Abort_IT+0x454>)
 8001fa4:	4293      	cmp	r3, r2
 8001fa6:	d03b      	beq.n	8002020 <HAL_DMA_Abort_IT+0x3a0>
 8001fa8:	687b      	ldr	r3, [r7, #4]
 8001faa:	681b      	ldr	r3, [r3, #0]
 8001fac:	4a4a      	ldr	r2, [pc, #296]	; (80020d8 <HAL_DMA_Abort_IT+0x458>)
 8001fae:	4293      	cmp	r3, r2
 8001fb0:	d036      	beq.n	8002020 <HAL_DMA_Abort_IT+0x3a0>
 8001fb2:	687b      	ldr	r3, [r7, #4]
 8001fb4:	681b      	ldr	r3, [r3, #0]
 8001fb6:	4a49      	ldr	r2, [pc, #292]	; (80020dc <HAL_DMA_Abort_IT+0x45c>)
 8001fb8:	4293      	cmp	r3, r2
 8001fba:	d031      	beq.n	8002020 <HAL_DMA_Abort_IT+0x3a0>
 8001fbc:	687b      	ldr	r3, [r7, #4]
 8001fbe:	681b      	ldr	r3, [r3, #0]
 8001fc0:	4a47      	ldr	r2, [pc, #284]	; (80020e0 <HAL_DMA_Abort_IT+0x460>)
 8001fc2:	4293      	cmp	r3, r2
 8001fc4:	d02c      	beq.n	8002020 <HAL_DMA_Abort_IT+0x3a0>
 8001fc6:	687b      	ldr	r3, [r7, #4]
 8001fc8:	681b      	ldr	r3, [r3, #0]
 8001fca:	4a46      	ldr	r2, [pc, #280]	; (80020e4 <HAL_DMA_Abort_IT+0x464>)
 8001fcc:	4293      	cmp	r3, r2
 8001fce:	d027      	beq.n	8002020 <HAL_DMA_Abort_IT+0x3a0>
 8001fd0:	687b      	ldr	r3, [r7, #4]
 8001fd2:	681b      	ldr	r3, [r3, #0]
 8001fd4:	4a44      	ldr	r2, [pc, #272]	; (80020e8 <HAL_DMA_Abort_IT+0x468>)
 8001fd6:	4293      	cmp	r3, r2
 8001fd8:	d022      	beq.n	8002020 <HAL_DMA_Abort_IT+0x3a0>
 8001fda:	687b      	ldr	r3, [r7, #4]
 8001fdc:	681b      	ldr	r3, [r3, #0]
 8001fde:	4a43      	ldr	r2, [pc, #268]	; (80020ec <HAL_DMA_Abort_IT+0x46c>)
 8001fe0:	4293      	cmp	r3, r2
 8001fe2:	d01d      	beq.n	8002020 <HAL_DMA_Abort_IT+0x3a0>
 8001fe4:	687b      	ldr	r3, [r7, #4]
 8001fe6:	681b      	ldr	r3, [r3, #0]
 8001fe8:	4a41      	ldr	r2, [pc, #260]	; (80020f0 <HAL_DMA_Abort_IT+0x470>)
 8001fea:	4293      	cmp	r3, r2
 8001fec:	d018      	beq.n	8002020 <HAL_DMA_Abort_IT+0x3a0>
 8001fee:	687b      	ldr	r3, [r7, #4]
 8001ff0:	681b      	ldr	r3, [r3, #0]
 8001ff2:	4a40      	ldr	r2, [pc, #256]	; (80020f4 <HAL_DMA_Abort_IT+0x474>)
 8001ff4:	4293      	cmp	r3, r2
 8001ff6:	d013      	beq.n	8002020 <HAL_DMA_Abort_IT+0x3a0>
 8001ff8:	687b      	ldr	r3, [r7, #4]
 8001ffa:	681b      	ldr	r3, [r3, #0]
 8001ffc:	4a3e      	ldr	r2, [pc, #248]	; (80020f8 <HAL_DMA_Abort_IT+0x478>)
 8001ffe:	4293      	cmp	r3, r2
 8002000:	d00e      	beq.n	8002020 <HAL_DMA_Abort_IT+0x3a0>
 8002002:	687b      	ldr	r3, [r7, #4]
 8002004:	681b      	ldr	r3, [r3, #0]
 8002006:	4a3d      	ldr	r2, [pc, #244]	; (80020fc <HAL_DMA_Abort_IT+0x47c>)
 8002008:	4293      	cmp	r3, r2
 800200a:	d009      	beq.n	8002020 <HAL_DMA_Abort_IT+0x3a0>
 800200c:	687b      	ldr	r3, [r7, #4]
 800200e:	681b      	ldr	r3, [r3, #0]
 8002010:	4a3b      	ldr	r2, [pc, #236]	; (8002100 <HAL_DMA_Abort_IT+0x480>)
 8002012:	4293      	cmp	r3, r2
 8002014:	d004      	beq.n	8002020 <HAL_DMA_Abort_IT+0x3a0>
 8002016:	687b      	ldr	r3, [r7, #4]
 8002018:	681b      	ldr	r3, [r3, #0]
 800201a:	4a3a      	ldr	r2, [pc, #232]	; (8002104 <HAL_DMA_Abort_IT+0x484>)
 800201c:	4293      	cmp	r3, r2
 800201e:	d101      	bne.n	8002024 <HAL_DMA_Abort_IT+0x3a4>
 8002020:	2301      	movs	r3, #1
 8002022:	e000      	b.n	8002026 <HAL_DMA_Abort_IT+0x3a6>
 8002024:	2300      	movs	r3, #0
 8002026:	2b00      	cmp	r3, #0
 8002028:	d028      	beq.n	800207c <HAL_DMA_Abort_IT+0x3fc>
      {
        /* disable the DMAMUX sync overrun IT */
        hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 800202a:	687b      	ldr	r3, [r7, #4]
 800202c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800202e:	681a      	ldr	r2, [r3, #0]
 8002030:	687b      	ldr	r3, [r7, #4]
 8002032:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002034:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8002038:	601a      	str	r2, [r3, #0]

        /* Clear all flags */
        regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 800203a:	687b      	ldr	r3, [r7, #4]
 800203c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800203e:	60fb      	str	r3, [r7, #12]
        regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 8002040:	687b      	ldr	r3, [r7, #4]
 8002042:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002044:	f003 031f 	and.w	r3, r3, #31
 8002048:	2201      	movs	r2, #1
 800204a:	409a      	lsls	r2, r3
 800204c:	68fb      	ldr	r3, [r7, #12]
 800204e:	605a      	str	r2, [r3, #4]

        /* Clear the DMAMUX synchro overrun flag */
        hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8002050:	687b      	ldr	r3, [r7, #4]
 8002052:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8002054:	687a      	ldr	r2, [r7, #4]
 8002056:	6e92      	ldr	r2, [r2, #104]	; 0x68
 8002058:	605a      	str	r2, [r3, #4]

        if(hdma->DMAmuxRequestGen != 0U)
 800205a:	687b      	ldr	r3, [r7, #4]
 800205c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800205e:	2b00      	cmp	r3, #0
 8002060:	d00c      	beq.n	800207c <HAL_DMA_Abort_IT+0x3fc>
        {
          /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
          /* disable the request gen overrun IT */
          hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8002062:	687b      	ldr	r3, [r7, #4]
 8002064:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8002066:	681a      	ldr	r2, [r3, #0]
 8002068:	687b      	ldr	r3, [r7, #4]
 800206a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800206c:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8002070:	601a      	str	r2, [r3, #0]

          /* Clear the DMAMUX request generator overrun flag */
          hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8002072:	687b      	ldr	r3, [r7, #4]
 8002074:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002076:	687a      	ldr	r2, [r7, #4]
 8002078:	6f52      	ldr	r2, [r2, #116]	; 0x74
 800207a:	605a      	str	r2, [r3, #4]
        }
      }

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 800207c:	687b      	ldr	r3, [r7, #4]
 800207e:	2200      	movs	r2, #0
 8002080:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8002084:	687b      	ldr	r3, [r7, #4]
 8002086:	2201      	movs	r2, #1
 8002088:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Call User Abort callback */
      if(hdma->XferAbortCallback != NULL)
 800208c:	687b      	ldr	r3, [r7, #4]
 800208e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002090:	2b00      	cmp	r3, #0
 8002092:	d003      	beq.n	800209c <HAL_DMA_Abort_IT+0x41c>
      {
        hdma->XferAbortCallback(hdma);
 8002094:	687b      	ldr	r3, [r7, #4]
 8002096:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002098:	6878      	ldr	r0, [r7, #4]
 800209a:	4798      	blx	r3
      }
    }
  }

  return HAL_OK;
 800209c:	2300      	movs	r3, #0
}
 800209e:	4618      	mov	r0, r3
 80020a0:	3710      	adds	r7, #16
 80020a2:	46bd      	mov	sp, r7
 80020a4:	bd80      	pop	{r7, pc}
 80020a6:	bf00      	nop
 80020a8:	40020010 	.word	0x40020010
 80020ac:	40020028 	.word	0x40020028
 80020b0:	40020040 	.word	0x40020040
 80020b4:	40020058 	.word	0x40020058
 80020b8:	40020070 	.word	0x40020070
 80020bc:	40020088 	.word	0x40020088
 80020c0:	400200a0 	.word	0x400200a0
 80020c4:	400200b8 	.word	0x400200b8
 80020c8:	40020410 	.word	0x40020410
 80020cc:	40020428 	.word	0x40020428
 80020d0:	40020440 	.word	0x40020440
 80020d4:	40020458 	.word	0x40020458
 80020d8:	40020470 	.word	0x40020470
 80020dc:	40020488 	.word	0x40020488
 80020e0:	400204a0 	.word	0x400204a0
 80020e4:	400204b8 	.word	0x400204b8
 80020e8:	58025408 	.word	0x58025408
 80020ec:	5802541c 	.word	0x5802541c
 80020f0:	58025430 	.word	0x58025430
 80020f4:	58025444 	.word	0x58025444
 80020f8:	58025458 	.word	0x58025458
 80020fc:	5802546c 	.word	0x5802546c
 8002100:	58025480 	.word	0x58025480
 8002104:	58025494 	.word	0x58025494

08002108 <HAL_ETH_Init>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Init(ETH_HandleTypeDef *heth)
{
 8002108:	b580      	push	{r7, lr}
 800210a:	b084      	sub	sp, #16
 800210c:	af00      	add	r7, sp, #0
 800210e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if(heth == NULL)
 8002110:	687b      	ldr	r3, [r7, #4]
 8002112:	2b00      	cmp	r3, #0
 8002114:	d101      	bne.n	800211a <HAL_ETH_Init+0x12>
  {
    return HAL_ERROR;
 8002116:	2301      	movs	r3, #1
 8002118:	e0c6      	b.n	80022a8 <HAL_ETH_Init+0x1a0>
  }

#else

  /* Check the ETH peripheral state */
  if(heth->gState == HAL_ETH_STATE_RESET)
 800211a:	687b      	ldr	r3, [r7, #4]
 800211c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800211e:	2b00      	cmp	r3, #0
 8002120:	d102      	bne.n	8002128 <HAL_ETH_Init+0x20>
  {
    /* Init the low level hardware : GPIO, CLOCK, NVIC. */
    HAL_ETH_MspInit(heth);
 8002122:	6878      	ldr	r0, [r7, #4]
 8002124:	f7fe fd90 	bl	8000c48 <HAL_ETH_MspInit>
  }
#endif /* (USE_HAL_ETH_REGISTER_CALLBACKS) */

  heth->gState = HAL_ETH_STATE_BUSY;
 8002128:	687b      	ldr	r3, [r7, #4]
 800212a:	2223      	movs	r2, #35	; 0x23
 800212c:	66da      	str	r2, [r3, #108]	; 0x6c

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800212e:	4b60      	ldr	r3, [pc, #384]	; (80022b0 <HAL_ETH_Init+0x1a8>)
 8002130:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8002134:	4a5e      	ldr	r2, [pc, #376]	; (80022b0 <HAL_ETH_Init+0x1a8>)
 8002136:	f043 0302 	orr.w	r3, r3, #2
 800213a:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 800213e:	4b5c      	ldr	r3, [pc, #368]	; (80022b0 <HAL_ETH_Init+0x1a8>)
 8002140:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8002144:	f003 0302 	and.w	r3, r3, #2
 8002148:	60bb      	str	r3, [r7, #8]
 800214a:	68bb      	ldr	r3, [r7, #8]

  if(heth->Init.MediaInterface == HAL_ETH_MII_MODE)
 800214c:	687b      	ldr	r3, [r7, #4]
 800214e:	7a1b      	ldrb	r3, [r3, #8]
 8002150:	2b00      	cmp	r3, #0
 8002152:	d103      	bne.n	800215c <HAL_ETH_Init+0x54>
  {
    HAL_SYSCFG_ETHInterfaceSelect(SYSCFG_ETH_MII);
 8002154:	2000      	movs	r0, #0
 8002156:	f7ff f951 	bl	80013fc <HAL_SYSCFG_ETHInterfaceSelect>
 800215a:	e003      	b.n	8002164 <HAL_ETH_Init+0x5c>
  }
  else
  {
    HAL_SYSCFG_ETHInterfaceSelect(SYSCFG_ETH_RMII);
 800215c:	f44f 0000 	mov.w	r0, #8388608	; 0x800000
 8002160:	f7ff f94c 	bl	80013fc <HAL_SYSCFG_ETHInterfaceSelect>
  }

  /* Ethernet Software reset */
  /* Set the SWR bit: resets all MAC subsystem internal registers and logic */
  /* After reset all the registers holds their respective reset values */
  SET_BIT(heth->Instance->DMAMR, ETH_DMAMR_SWR);
 8002164:	687b      	ldr	r3, [r7, #4]
 8002166:	681b      	ldr	r3, [r3, #0]
 8002168:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800216c:	681a      	ldr	r2, [r3, #0]
 800216e:	687b      	ldr	r3, [r7, #4]
 8002170:	681b      	ldr	r3, [r3, #0]
 8002172:	f042 0201 	orr.w	r2, r2, #1
 8002176:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800217a:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 800217c:	f7ff f932 	bl	80013e4 <HAL_GetTick>
 8002180:	60f8      	str	r0, [r7, #12]

  /* Wait for software reset */
  while (READ_BIT(heth->Instance->DMAMR, ETH_DMAMR_SWR) > 0U)
 8002182:	e00f      	b.n	80021a4 <HAL_ETH_Init+0x9c>
  {
    if(((HAL_GetTick() - tickstart ) > ETH_SWRESET_TIMEOUT))
 8002184:	f7ff f92e 	bl	80013e4 <HAL_GetTick>
 8002188:	4602      	mov	r2, r0
 800218a:	68fb      	ldr	r3, [r7, #12]
 800218c:	1ad3      	subs	r3, r2, r3
 800218e:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 8002192:	d907      	bls.n	80021a4 <HAL_ETH_Init+0x9c>
    {
      /* Set Error Code */
      heth->ErrorCode = HAL_ETH_ERROR_TIMEOUT;
 8002194:	687b      	ldr	r3, [r7, #4]
 8002196:	2204      	movs	r2, #4
 8002198:	675a      	str	r2, [r3, #116]	; 0x74
      /* Set State as Error */
      heth->gState = HAL_ETH_STATE_ERROR;
 800219a:	687b      	ldr	r3, [r7, #4]
 800219c:	22e0      	movs	r2, #224	; 0xe0
 800219e:	66da      	str	r2, [r3, #108]	; 0x6c
      /* Return Error */
      return HAL_ERROR;
 80021a0:	2301      	movs	r3, #1
 80021a2:	e081      	b.n	80022a8 <HAL_ETH_Init+0x1a0>
  while (READ_BIT(heth->Instance->DMAMR, ETH_DMAMR_SWR) > 0U)
 80021a4:	687b      	ldr	r3, [r7, #4]
 80021a6:	681b      	ldr	r3, [r3, #0]
 80021a8:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80021ac:	681b      	ldr	r3, [r3, #0]
 80021ae:	f003 0301 	and.w	r3, r3, #1
 80021b2:	2b00      	cmp	r3, #0
 80021b4:	d1e6      	bne.n	8002184 <HAL_ETH_Init+0x7c>
    }
  }

  /*------------------ MDIO CSR Clock Range Configuration --------------------*/
  ETH_MAC_MDIO_ClkConfig(heth);
 80021b6:	6878      	ldr	r0, [r7, #4]
 80021b8:	f000 fac0 	bl	800273c <ETH_MAC_MDIO_ClkConfig>

  /*------------------ MAC LPI 1US Tic Counter Configuration --------------------*/
  WRITE_REG(heth->Instance->MAC1USTCR, (((uint32_t)HAL_RCC_GetHCLKFreq() / ETH_MAC_US_TICK) - 1U));
 80021bc:	f001 fd72 	bl	8003ca4 <HAL_RCC_GetHCLKFreq>
 80021c0:	4603      	mov	r3, r0
 80021c2:	4a3c      	ldr	r2, [pc, #240]	; (80022b4 <HAL_ETH_Init+0x1ac>)
 80021c4:	fba2 2303 	umull	r2, r3, r2, r3
 80021c8:	0c9a      	lsrs	r2, r3, #18
 80021ca:	687b      	ldr	r3, [r7, #4]
 80021cc:	681b      	ldr	r3, [r3, #0]
 80021ce:	3a01      	subs	r2, #1
 80021d0:	f8c3 20dc 	str.w	r2, [r3, #220]	; 0xdc

  /*------------------ MAC, MTL and DMA default Configuration ----------------*/
  ETH_MACDMAConfig(heth);
 80021d4:	6878      	ldr	r0, [r7, #4]
 80021d6:	f000 fa13 	bl	8002600 <ETH_MACDMAConfig>

  /* SET DSL to 64 bit */
  MODIFY_REG(heth->Instance->DMACCR, ETH_DMACCR_DSL, ETH_DMACCR_DSL_64BIT);
 80021da:	687b      	ldr	r3, [r7, #4]
 80021dc:	681b      	ldr	r3, [r3, #0]
 80021de:	f503 5388 	add.w	r3, r3, #4352	; 0x1100
 80021e2:	681b      	ldr	r3, [r3, #0]
 80021e4:	f423 12e0 	bic.w	r2, r3, #1835008	; 0x1c0000
 80021e8:	687b      	ldr	r3, [r7, #4]
 80021ea:	681b      	ldr	r3, [r3, #0]
 80021ec:	f442 2200 	orr.w	r2, r2, #524288	; 0x80000
 80021f0:	f503 5388 	add.w	r3, r3, #4352	; 0x1100
 80021f4:	601a      	str	r2, [r3, #0]

  /* Set Receive Buffers Length (must be a multiple of 4) */
  if ((heth->Init.RxBuffLen % 0x4U) != 0x0U)
 80021f6:	687b      	ldr	r3, [r7, #4]
 80021f8:	695b      	ldr	r3, [r3, #20]
 80021fa:	f003 0303 	and.w	r3, r3, #3
 80021fe:	2b00      	cmp	r3, #0
 8002200:	d007      	beq.n	8002212 <HAL_ETH_Init+0x10a>
  {
    /* Set Error Code */
    heth->ErrorCode = HAL_ETH_ERROR_PARAM;
 8002202:	687b      	ldr	r3, [r7, #4]
 8002204:	2201      	movs	r2, #1
 8002206:	675a      	str	r2, [r3, #116]	; 0x74
    /* Set State as Error */
    heth->gState = HAL_ETH_STATE_ERROR;
 8002208:	687b      	ldr	r3, [r7, #4]
 800220a:	22e0      	movs	r2, #224	; 0xe0
 800220c:	66da      	str	r2, [r3, #108]	; 0x6c
    /* Return Error */
    return HAL_ERROR;
 800220e:	2301      	movs	r3, #1
 8002210:	e04a      	b.n	80022a8 <HAL_ETH_Init+0x1a0>
  }
  else
  {
    MODIFY_REG(heth->Instance->DMACRCR, ETH_DMACRCR_RBSZ, ((heth->Init.RxBuffLen) << 1));
 8002212:	687b      	ldr	r3, [r7, #4]
 8002214:	681a      	ldr	r2, [r3, #0]
 8002216:	f241 1308 	movw	r3, #4360	; 0x1108
 800221a:	4413      	add	r3, r2
 800221c:	681a      	ldr	r2, [r3, #0]
 800221e:	4b26      	ldr	r3, [pc, #152]	; (80022b8 <HAL_ETH_Init+0x1b0>)
 8002220:	4013      	ands	r3, r2
 8002222:	687a      	ldr	r2, [r7, #4]
 8002224:	6952      	ldr	r2, [r2, #20]
 8002226:	0052      	lsls	r2, r2, #1
 8002228:	6879      	ldr	r1, [r7, #4]
 800222a:	6809      	ldr	r1, [r1, #0]
 800222c:	431a      	orrs	r2, r3
 800222e:	f241 1308 	movw	r3, #4360	; 0x1108
 8002232:	440b      	add	r3, r1
 8002234:	601a      	str	r2, [r3, #0]
  }

  /*------------------ DMA Tx Descriptors Configuration ----------------------*/
  ETH_DMATxDescListInit(heth);
 8002236:	6878      	ldr	r0, [r7, #4]
 8002238:	f000 fad8 	bl	80027ec <ETH_DMATxDescListInit>

  /*------------------ DMA Rx Descriptors Configuration ----------------------*/
  ETH_DMARxDescListInit(heth);
 800223c:	6878      	ldr	r0, [r7, #4]
 800223e:	f000 fb1c 	bl	800287a <ETH_DMARxDescListInit>

  /*--------------------- ETHERNET MAC Address Configuration ------------------*/
  /* Set MAC addr bits 32 to 47 */
  heth->Instance->MACA0HR = (((uint32_t)(heth->Init.MACAddr[5]) << 8) | (uint32_t)heth->Init.MACAddr[4]);
 8002242:	687b      	ldr	r3, [r7, #4]
 8002244:	685b      	ldr	r3, [r3, #4]
 8002246:	3305      	adds	r3, #5
 8002248:	781b      	ldrb	r3, [r3, #0]
 800224a:	021a      	lsls	r2, r3, #8
 800224c:	687b      	ldr	r3, [r7, #4]
 800224e:	685b      	ldr	r3, [r3, #4]
 8002250:	3304      	adds	r3, #4
 8002252:	781b      	ldrb	r3, [r3, #0]
 8002254:	4619      	mov	r1, r3
 8002256:	687b      	ldr	r3, [r7, #4]
 8002258:	681b      	ldr	r3, [r3, #0]
 800225a:	430a      	orrs	r2, r1
 800225c:	f8c3 2300 	str.w	r2, [r3, #768]	; 0x300
  /* Set MAC addr bits 0 to 31 */
  heth->Instance->MACA0LR = (((uint32_t)(heth->Init.MACAddr[3]) << 24) | ((uint32_t)(heth->Init.MACAddr[2]) << 16) |
 8002260:	687b      	ldr	r3, [r7, #4]
 8002262:	685b      	ldr	r3, [r3, #4]
 8002264:	3303      	adds	r3, #3
 8002266:	781b      	ldrb	r3, [r3, #0]
 8002268:	061a      	lsls	r2, r3, #24
 800226a:	687b      	ldr	r3, [r7, #4]
 800226c:	685b      	ldr	r3, [r3, #4]
 800226e:	3302      	adds	r3, #2
 8002270:	781b      	ldrb	r3, [r3, #0]
 8002272:	041b      	lsls	r3, r3, #16
 8002274:	431a      	orrs	r2, r3
                             ((uint32_t)(heth->Init.MACAddr[1]) << 8) | (uint32_t)heth->Init.MACAddr[0]);
 8002276:	687b      	ldr	r3, [r7, #4]
 8002278:	685b      	ldr	r3, [r3, #4]
 800227a:	3301      	adds	r3, #1
 800227c:	781b      	ldrb	r3, [r3, #0]
 800227e:	021b      	lsls	r3, r3, #8
  heth->Instance->MACA0LR = (((uint32_t)(heth->Init.MACAddr[3]) << 24) | ((uint32_t)(heth->Init.MACAddr[2]) << 16) |
 8002280:	431a      	orrs	r2, r3
                             ((uint32_t)(heth->Init.MACAddr[1]) << 8) | (uint32_t)heth->Init.MACAddr[0]);
 8002282:	687b      	ldr	r3, [r7, #4]
 8002284:	685b      	ldr	r3, [r3, #4]
 8002286:	781b      	ldrb	r3, [r3, #0]
 8002288:	4619      	mov	r1, r3
  heth->Instance->MACA0LR = (((uint32_t)(heth->Init.MACAddr[3]) << 24) | ((uint32_t)(heth->Init.MACAddr[2]) << 16) |
 800228a:	687b      	ldr	r3, [r7, #4]
 800228c:	681b      	ldr	r3, [r3, #0]
                             ((uint32_t)(heth->Init.MACAddr[1]) << 8) | (uint32_t)heth->Init.MACAddr[0]);
 800228e:	430a      	orrs	r2, r1
  heth->Instance->MACA0LR = (((uint32_t)(heth->Init.MACAddr[3]) << 24) | ((uint32_t)(heth->Init.MACAddr[2]) << 16) |
 8002290:	f8c3 2304 	str.w	r2, [r3, #772]	; 0x304

  heth->ErrorCode = HAL_ETH_ERROR_NONE;
 8002294:	687b      	ldr	r3, [r7, #4]
 8002296:	2200      	movs	r2, #0
 8002298:	675a      	str	r2, [r3, #116]	; 0x74
  heth->gState = HAL_ETH_STATE_READY;
 800229a:	687b      	ldr	r3, [r7, #4]
 800229c:	2210      	movs	r2, #16
 800229e:	66da      	str	r2, [r3, #108]	; 0x6c
  heth->RxState = HAL_ETH_STATE_READY;
 80022a0:	687b      	ldr	r3, [r7, #4]
 80022a2:	2210      	movs	r2, #16
 80022a4:	671a      	str	r2, [r3, #112]	; 0x70

  return HAL_OK;
 80022a6:	2300      	movs	r3, #0
}
 80022a8:	4618      	mov	r0, r3
 80022aa:	3710      	adds	r7, #16
 80022ac:	46bd      	mov	sp, r7
 80022ae:	bd80      	pop	{r7, pc}
 80022b0:	58024400 	.word	0x58024400
 80022b4:	431bde83 	.word	0x431bde83
 80022b8:	ffff8001 	.word	0xffff8001

080022bc <ETH_SetMACConfig>:
/** @addtogroup ETH_Private_Functions   ETH Private Functions
  * @{
  */

static void ETH_SetMACConfig(ETH_HandleTypeDef *heth,  ETH_MACConfigTypeDef *macconf)
{
 80022bc:	b480      	push	{r7}
 80022be:	b085      	sub	sp, #20
 80022c0:	af00      	add	r7, sp, #0
 80022c2:	6078      	str	r0, [r7, #4]
 80022c4:	6039      	str	r1, [r7, #0]
  uint32_t macregval;

  /*------------------------ MACCR Configuration --------------------*/
  macregval =(macconf->InterPacketGapVal |
 80022c6:	683b      	ldr	r3, [r7, #0]
 80022c8:	689a      	ldr	r2, [r3, #8]
              macconf->SourceAddrControl |
 80022ca:	683b      	ldr	r3, [r7, #0]
 80022cc:	681b      	ldr	r3, [r3, #0]
  macregval =(macconf->InterPacketGapVal |
 80022ce:	431a      	orrs	r2, r3
                ((uint32_t)macconf->ChecksumOffload<< 27) |
 80022d0:	683b      	ldr	r3, [r7, #0]
 80022d2:	791b      	ldrb	r3, [r3, #4]
 80022d4:	06db      	lsls	r3, r3, #27
              macconf->SourceAddrControl |
 80022d6:	431a      	orrs	r2, r3
                  ((uint32_t)macconf->GiantPacketSizeLimitControl << 23) |
 80022d8:	683b      	ldr	r3, [r7, #0]
 80022da:	7b1b      	ldrb	r3, [r3, #12]
 80022dc:	05db      	lsls	r3, r3, #23
                ((uint32_t)macconf->ChecksumOffload<< 27) |
 80022de:	431a      	orrs	r2, r3
                    ((uint32_t)macconf->Support2KPacket  << 22) |
 80022e0:	683b      	ldr	r3, [r7, #0]
 80022e2:	7b5b      	ldrb	r3, [r3, #13]
 80022e4:	059b      	lsls	r3, r3, #22
                  ((uint32_t)macconf->GiantPacketSizeLimitControl << 23) |
 80022e6:	431a      	orrs	r2, r3
                      ((uint32_t)macconf->CRCStripTypePacket << 21) |
 80022e8:	683b      	ldr	r3, [r7, #0]
 80022ea:	7b9b      	ldrb	r3, [r3, #14]
 80022ec:	055b      	lsls	r3, r3, #21
                    ((uint32_t)macconf->Support2KPacket  << 22) |
 80022ee:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->AutomaticPadCRCStrip << 20) |
 80022f0:	683b      	ldr	r3, [r7, #0]
 80022f2:	7bdb      	ldrb	r3, [r3, #15]
 80022f4:	051b      	lsls	r3, r3, #20
                      ((uint32_t)macconf->CRCStripTypePacket << 21) |
 80022f6:	4313      	orrs	r3, r2
                          ((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 19) |
 80022f8:	683a      	ldr	r2, [r7, #0]
 80022fa:	7c12      	ldrb	r2, [r2, #16]
 80022fc:	2a00      	cmp	r2, #0
 80022fe:	d102      	bne.n	8002306 <ETH_SetMACConfig+0x4a>
 8002300:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 8002304:	e000      	b.n	8002308 <ETH_SetMACConfig+0x4c>
 8002306:	2200      	movs	r2, #0
                        ((uint32_t)macconf->AutomaticPadCRCStrip << 20) |
 8002308:	4313      	orrs	r3, r2
                            ((uint32_t)((macconf->Jabber == DISABLE) ? 1U : 0U) << 17) |
 800230a:	683a      	ldr	r2, [r7, #0]
 800230c:	7c52      	ldrb	r2, [r2, #17]
 800230e:	2a00      	cmp	r2, #0
 8002310:	d102      	bne.n	8002318 <ETH_SetMACConfig+0x5c>
 8002312:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8002316:	e000      	b.n	800231a <ETH_SetMACConfig+0x5e>
 8002318:	2200      	movs	r2, #0
                          ((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 19) |
 800231a:	431a      	orrs	r2, r3
                              ((uint32_t)macconf->JumboPacket << 16) |
 800231c:	683b      	ldr	r3, [r7, #0]
 800231e:	7c9b      	ldrb	r3, [r3, #18]
 8002320:	041b      	lsls	r3, r3, #16
                            ((uint32_t)((macconf->Jabber == DISABLE) ? 1U : 0U) << 17) |
 8002322:	431a      	orrs	r2, r3
                                macconf->Speed |
 8002324:	683b      	ldr	r3, [r7, #0]
 8002326:	695b      	ldr	r3, [r3, #20]
                              ((uint32_t)macconf->JumboPacket << 16) |
 8002328:	431a      	orrs	r2, r3
                                  macconf->DuplexMode |
 800232a:	683b      	ldr	r3, [r7, #0]
 800232c:	699b      	ldr	r3, [r3, #24]
                                macconf->Speed |
 800232e:	431a      	orrs	r2, r3
                                    ((uint32_t)macconf->LoopbackMode << 12) |
 8002330:	683b      	ldr	r3, [r7, #0]
 8002332:	7f1b      	ldrb	r3, [r3, #28]
 8002334:	031b      	lsls	r3, r3, #12
                                  macconf->DuplexMode |
 8002336:	431a      	orrs	r2, r3
                                      ((uint32_t)macconf->CarrierSenseBeforeTransmit << 11)|
 8002338:	683b      	ldr	r3, [r7, #0]
 800233a:	7f5b      	ldrb	r3, [r3, #29]
 800233c:	02db      	lsls	r3, r3, #11
                                    ((uint32_t)macconf->LoopbackMode << 12) |
 800233e:	4313      	orrs	r3, r2
                                        ((uint32_t)((macconf->ReceiveOwn == DISABLE) ? 1U : 0U) << 10)|
 8002340:	683a      	ldr	r2, [r7, #0]
 8002342:	7f92      	ldrb	r2, [r2, #30]
 8002344:	2a00      	cmp	r2, #0
 8002346:	d102      	bne.n	800234e <ETH_SetMACConfig+0x92>
 8002348:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800234c:	e000      	b.n	8002350 <ETH_SetMACConfig+0x94>
 800234e:	2200      	movs	r2, #0
                                      ((uint32_t)macconf->CarrierSenseBeforeTransmit << 11)|
 8002350:	431a      	orrs	r2, r3
                                          ((uint32_t)macconf->CarrierSenseDuringTransmit << 9)|
 8002352:	683b      	ldr	r3, [r7, #0]
 8002354:	7fdb      	ldrb	r3, [r3, #31]
 8002356:	025b      	lsls	r3, r3, #9
                                        ((uint32_t)((macconf->ReceiveOwn == DISABLE) ? 1U : 0U) << 10)|
 8002358:	4313      	orrs	r3, r2
                                            ((uint32_t)((macconf->RetryTransmission == DISABLE) ? 1U : 0U) << 8)|
 800235a:	683a      	ldr	r2, [r7, #0]
 800235c:	f892 2020 	ldrb.w	r2, [r2, #32]
 8002360:	2a00      	cmp	r2, #0
 8002362:	d102      	bne.n	800236a <ETH_SetMACConfig+0xae>
 8002364:	f44f 7280 	mov.w	r2, #256	; 0x100
 8002368:	e000      	b.n	800236c <ETH_SetMACConfig+0xb0>
 800236a:	2200      	movs	r2, #0
                                          ((uint32_t)macconf->CarrierSenseDuringTransmit << 9)|
 800236c:	431a      	orrs	r2, r3
                                              macconf->BackOffLimit |
 800236e:	683b      	ldr	r3, [r7, #0]
 8002370:	6a5b      	ldr	r3, [r3, #36]	; 0x24
                                            ((uint32_t)((macconf->RetryTransmission == DISABLE) ? 1U : 0U) << 8)|
 8002372:	431a      	orrs	r2, r3
                                                ((uint32_t)macconf->DeferralCheck << 4)|
 8002374:	683b      	ldr	r3, [r7, #0]
 8002376:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800237a:	011b      	lsls	r3, r3, #4
                                              macconf->BackOffLimit |
 800237c:	431a      	orrs	r2, r3
                                                  macconf->PreambleLength);
 800237e:	683b      	ldr	r3, [r7, #0]
 8002380:	6adb      	ldr	r3, [r3, #44]	; 0x2c
  macregval =(macconf->InterPacketGapVal |
 8002382:	4313      	orrs	r3, r2
 8002384:	60fb      	str	r3, [r7, #12]

  /* Write to MACCR */
  MODIFY_REG(heth->Instance->MACCR, ETH_MACCR_MASK, macregval);
 8002386:	687b      	ldr	r3, [r7, #4]
 8002388:	681b      	ldr	r3, [r3, #0]
 800238a:	681a      	ldr	r2, [r3, #0]
 800238c:	4b56      	ldr	r3, [pc, #344]	; (80024e8 <ETH_SetMACConfig+0x22c>)
 800238e:	4013      	ands	r3, r2
 8002390:	687a      	ldr	r2, [r7, #4]
 8002392:	6812      	ldr	r2, [r2, #0]
 8002394:	68f9      	ldr	r1, [r7, #12]
 8002396:	430b      	orrs	r3, r1
 8002398:	6013      	str	r3, [r2, #0]

  /*------------------------ MACECR Configuration --------------------*/
  macregval = ((macconf->ExtendedInterPacketGapVal << 25)|
 800239a:	683b      	ldr	r3, [r7, #0]
 800239c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800239e:	065a      	lsls	r2, r3, #25
               ((uint32_t)macconf->ExtendedInterPacketGap << 24)|
 80023a0:	683b      	ldr	r3, [r7, #0]
 80023a2:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 80023a6:	061b      	lsls	r3, r3, #24
  macregval = ((macconf->ExtendedInterPacketGapVal << 25)|
 80023a8:	431a      	orrs	r2, r3
                 ((uint32_t)macconf->UnicastSlowProtocolPacketDetect << 18)|
 80023aa:	683b      	ldr	r3, [r7, #0]
 80023ac:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 80023b0:	049b      	lsls	r3, r3, #18
               ((uint32_t)macconf->ExtendedInterPacketGap << 24)|
 80023b2:	431a      	orrs	r2, r3
                   ((uint32_t)macconf->SlowProtocolDetect << 17)|
 80023b4:	683b      	ldr	r3, [r7, #0]
 80023b6:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 80023ba:	045b      	lsls	r3, r3, #17
                 ((uint32_t)macconf->UnicastSlowProtocolPacketDetect << 18)|
 80023bc:	4313      	orrs	r3, r2
                     ((uint32_t)((macconf->CRCCheckingRxPackets == DISABLE) ? 1U : 0U)<< 16) |
 80023be:	683a      	ldr	r2, [r7, #0]
 80023c0:	f892 2032 	ldrb.w	r2, [r2, #50]	; 0x32
 80023c4:	2a00      	cmp	r2, #0
 80023c6:	d102      	bne.n	80023ce <ETH_SetMACConfig+0x112>
 80023c8:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 80023cc:	e000      	b.n	80023d0 <ETH_SetMACConfig+0x114>
 80023ce:	2200      	movs	r2, #0
                   ((uint32_t)macconf->SlowProtocolDetect << 17)|
 80023d0:	431a      	orrs	r2, r3
                       macconf->GiantPacketSizeLimit);
 80023d2:	683b      	ldr	r3, [r7, #0]
 80023d4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
  macregval = ((macconf->ExtendedInterPacketGapVal << 25)|
 80023d6:	4313      	orrs	r3, r2
 80023d8:	60fb      	str	r3, [r7, #12]

  /* Write to MACECR */
  MODIFY_REG(heth->Instance->MACECR, ETH_MACECR_MASK, macregval);
 80023da:	687b      	ldr	r3, [r7, #4]
 80023dc:	681b      	ldr	r3, [r3, #0]
 80023de:	685a      	ldr	r2, [r3, #4]
 80023e0:	4b42      	ldr	r3, [pc, #264]	; (80024ec <ETH_SetMACConfig+0x230>)
 80023e2:	4013      	ands	r3, r2
 80023e4:	687a      	ldr	r2, [r7, #4]
 80023e6:	6812      	ldr	r2, [r2, #0]
 80023e8:	68f9      	ldr	r1, [r7, #12]
 80023ea:	430b      	orrs	r3, r1
 80023ec:	6053      	str	r3, [r2, #4]

  /*------------------------ MACWTR Configuration --------------------*/
  macregval = (((uint32_t)macconf->ProgrammableWatchdog << 8) |
 80023ee:	683b      	ldr	r3, [r7, #0]
 80023f0:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80023f4:	021a      	lsls	r2, r3, #8
               macconf->WatchdogTimeout);
 80023f6:	683b      	ldr	r3, [r7, #0]
 80023f8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
  macregval = (((uint32_t)macconf->ProgrammableWatchdog << 8) |
 80023fa:	4313      	orrs	r3, r2
 80023fc:	60fb      	str	r3, [r7, #12]

  /* Write to MACWTR */
  MODIFY_REG(heth->Instance->MACWTR, ETH_MACWTR_MASK, macregval);
 80023fe:	687b      	ldr	r3, [r7, #4]
 8002400:	681b      	ldr	r3, [r3, #0]
 8002402:	68da      	ldr	r2, [r3, #12]
 8002404:	4b3a      	ldr	r3, [pc, #232]	; (80024f0 <ETH_SetMACConfig+0x234>)
 8002406:	4013      	ands	r3, r2
 8002408:	687a      	ldr	r2, [r7, #4]
 800240a:	6812      	ldr	r2, [r2, #0]
 800240c:	68f9      	ldr	r1, [r7, #12]
 800240e:	430b      	orrs	r3, r1
 8002410:	60d3      	str	r3, [r2, #12]

  /*------------------------ MACTFCR Configuration --------------------*/
  macregval = (((uint32_t)macconf->TransmitFlowControl << 1) |
 8002412:	683b      	ldr	r3, [r7, #0]
 8002414:	f893 3054 	ldrb.w	r3, [r3, #84]	; 0x54
 8002418:	005a      	lsls	r2, r3, #1
               macconf->PauseLowThreshold |
 800241a:	683b      	ldr	r3, [r7, #0]
 800241c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
  macregval = (((uint32_t)macconf->TransmitFlowControl << 1) |
 800241e:	4313      	orrs	r3, r2
                 ((uint32_t)((macconf->ZeroQuantaPause == DISABLE) ? 1U : 0U)<< 7) |
 8002420:	683a      	ldr	r2, [r7, #0]
 8002422:	f892 204c 	ldrb.w	r2, [r2, #76]	; 0x4c
 8002426:	2a00      	cmp	r2, #0
 8002428:	d101      	bne.n	800242e <ETH_SetMACConfig+0x172>
 800242a:	2280      	movs	r2, #128	; 0x80
 800242c:	e000      	b.n	8002430 <ETH_SetMACConfig+0x174>
 800242e:	2200      	movs	r2, #0
               macconf->PauseLowThreshold |
 8002430:	431a      	orrs	r2, r3
                   (macconf->PauseTime << 16));
 8002432:	683b      	ldr	r3, [r7, #0]
 8002434:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002436:	041b      	lsls	r3, r3, #16
  macregval = (((uint32_t)macconf->TransmitFlowControl << 1) |
 8002438:	4313      	orrs	r3, r2
 800243a:	60fb      	str	r3, [r7, #12]

  /* Write to MACTFCR */
  MODIFY_REG(heth->Instance->MACTFCR, ETH_MACTFCR_MASK, macregval);
 800243c:	687b      	ldr	r3, [r7, #4]
 800243e:	681b      	ldr	r3, [r3, #0]
 8002440:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8002442:	f64f 730d 	movw	r3, #65293	; 0xff0d
 8002446:	4013      	ands	r3, r2
 8002448:	687a      	ldr	r2, [r7, #4]
 800244a:	6812      	ldr	r2, [r2, #0]
 800244c:	68f9      	ldr	r1, [r7, #12]
 800244e:	430b      	orrs	r3, r1
 8002450:	6713      	str	r3, [r2, #112]	; 0x70

  /*------------------------ MACRFCR Configuration --------------------*/
  macregval = ((uint32_t)macconf->ReceiveFlowControl |
 8002452:	683b      	ldr	r3, [r7, #0]
 8002454:	f893 3056 	ldrb.w	r3, [r3, #86]	; 0x56
 8002458:	461a      	mov	r2, r3
               ((uint32_t)macconf->UnicastPausePacketDetect << 1));
 800245a:	683b      	ldr	r3, [r7, #0]
 800245c:	f893 3055 	ldrb.w	r3, [r3, #85]	; 0x55
 8002460:	005b      	lsls	r3, r3, #1
  macregval = ((uint32_t)macconf->ReceiveFlowControl |
 8002462:	4313      	orrs	r3, r2
 8002464:	60fb      	str	r3, [r7, #12]

  /* Write to MACRFCR */
  MODIFY_REG(heth->Instance->MACRFCR, ETH_MACRFCR_MASK, macregval);
 8002466:	687b      	ldr	r3, [r7, #4]
 8002468:	681b      	ldr	r3, [r3, #0]
 800246a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800246e:	f023 0103 	bic.w	r1, r3, #3
 8002472:	687b      	ldr	r3, [r7, #4]
 8002474:	681b      	ldr	r3, [r3, #0]
 8002476:	68fa      	ldr	r2, [r7, #12]
 8002478:	430a      	orrs	r2, r1
 800247a:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

  /*------------------------ MTLTQOMR Configuration --------------------*/
  /* Write to MTLTQOMR */
  MODIFY_REG(heth->Instance->MTLTQOMR, ETH_MTLTQOMR_MASK, macconf->TransmitQueueMode);
 800247e:	687b      	ldr	r3, [r7, #4]
 8002480:	681b      	ldr	r3, [r3, #0]
 8002482:	f8d3 3d00 	ldr.w	r3, [r3, #3328]	; 0xd00
 8002486:	f023 0172 	bic.w	r1, r3, #114	; 0x72
 800248a:	683b      	ldr	r3, [r7, #0]
 800248c:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 800248e:	687b      	ldr	r3, [r7, #4]
 8002490:	681b      	ldr	r3, [r3, #0]
 8002492:	430a      	orrs	r2, r1
 8002494:	f8c3 2d00 	str.w	r2, [r3, #3328]	; 0xd00

  /*------------------------ MTLRQOMR Configuration --------------------*/
  macregval = (macconf->ReceiveQueueMode |
 8002498:	683b      	ldr	r3, [r7, #0]
 800249a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
               ((uint32_t)((macconf->DropTCPIPChecksumErrorPacket == DISABLE) ? 1U : 0U) << 6) |
 800249c:	683a      	ldr	r2, [r7, #0]
 800249e:	f892 2060 	ldrb.w	r2, [r2, #96]	; 0x60
 80024a2:	2a00      	cmp	r2, #0
 80024a4:	d101      	bne.n	80024aa <ETH_SetMACConfig+0x1ee>
 80024a6:	2240      	movs	r2, #64	; 0x40
 80024a8:	e000      	b.n	80024ac <ETH_SetMACConfig+0x1f0>
 80024aa:	2200      	movs	r2, #0
  macregval = (macconf->ReceiveQueueMode |
 80024ac:	431a      	orrs	r2, r3
                 ((uint32_t)macconf->ForwardRxErrorPacket << 4) |
 80024ae:	683b      	ldr	r3, [r7, #0]
 80024b0:	f893 3061 	ldrb.w	r3, [r3, #97]	; 0x61
 80024b4:	011b      	lsls	r3, r3, #4
               ((uint32_t)((macconf->DropTCPIPChecksumErrorPacket == DISABLE) ? 1U : 0U) << 6) |
 80024b6:	431a      	orrs	r2, r3
                   ((uint32_t)macconf->ForwardRxUndersizedGoodPacket << 3));
 80024b8:	683b      	ldr	r3, [r7, #0]
 80024ba:	f893 3062 	ldrb.w	r3, [r3, #98]	; 0x62
 80024be:	00db      	lsls	r3, r3, #3
  macregval = (macconf->ReceiveQueueMode |
 80024c0:	4313      	orrs	r3, r2
 80024c2:	60fb      	str	r3, [r7, #12]

  /* Write to MTLRQOMR */
  MODIFY_REG(heth->Instance->MTLRQOMR, ETH_MTLRQOMR_MASK, macregval);
 80024c4:	687b      	ldr	r3, [r7, #4]
 80024c6:	681b      	ldr	r3, [r3, #0]
 80024c8:	f8d3 3d30 	ldr.w	r3, [r3, #3376]	; 0xd30
 80024cc:	f023 017b 	bic.w	r1, r3, #123	; 0x7b
 80024d0:	687b      	ldr	r3, [r7, #4]
 80024d2:	681b      	ldr	r3, [r3, #0]
 80024d4:	68fa      	ldr	r2, [r7, #12]
 80024d6:	430a      	orrs	r2, r1
 80024d8:	f8c3 2d30 	str.w	r2, [r3, #3376]	; 0xd30
}
 80024dc:	bf00      	nop
 80024de:	3714      	adds	r7, #20
 80024e0:	46bd      	mov	sp, r7
 80024e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024e6:	4770      	bx	lr
 80024e8:	00048083 	.word	0x00048083
 80024ec:	c0f88000 	.word	0xc0f88000
 80024f0:	fffffef0 	.word	0xfffffef0

080024f4 <ETH_SetDMAConfig>:

static void ETH_SetDMAConfig(ETH_HandleTypeDef *heth,  ETH_DMAConfigTypeDef *dmaconf)
{
 80024f4:	b480      	push	{r7}
 80024f6:	b085      	sub	sp, #20
 80024f8:	af00      	add	r7, sp, #0
 80024fa:	6078      	str	r0, [r7, #4]
 80024fc:	6039      	str	r1, [r7, #0]
  uint32_t dmaregval;

  /*------------------------ DMAMR Configuration --------------------*/
  MODIFY_REG(heth->Instance->DMAMR, ETH_DMAMR_MASK, dmaconf->DMAArbitration);
 80024fe:	687b      	ldr	r3, [r7, #4]
 8002500:	681b      	ldr	r3, [r3, #0]
 8002502:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002506:	681a      	ldr	r2, [r3, #0]
 8002508:	4b38      	ldr	r3, [pc, #224]	; (80025ec <ETH_SetDMAConfig+0xf8>)
 800250a:	4013      	ands	r3, r2
 800250c:	683a      	ldr	r2, [r7, #0]
 800250e:	6812      	ldr	r2, [r2, #0]
 8002510:	6879      	ldr	r1, [r7, #4]
 8002512:	6809      	ldr	r1, [r1, #0]
 8002514:	431a      	orrs	r2, r3
 8002516:	f501 5380 	add.w	r3, r1, #4096	; 0x1000
 800251a:	601a      	str	r2, [r3, #0]

  /*------------------------ DMASBMR Configuration --------------------*/
  dmaregval = (((uint32_t)dmaconf->AddressAlignedBeats << 12) |
 800251c:	683b      	ldr	r3, [r7, #0]
 800251e:	791b      	ldrb	r3, [r3, #4]
 8002520:	031a      	lsls	r2, r3, #12
               dmaconf->BurstMode |
 8002522:	683b      	ldr	r3, [r7, #0]
 8002524:	689b      	ldr	r3, [r3, #8]
  dmaregval = (((uint32_t)dmaconf->AddressAlignedBeats << 12) |
 8002526:	431a      	orrs	r2, r3
                 ((uint32_t)dmaconf->RebuildINCRxBurst << 15));
 8002528:	683b      	ldr	r3, [r7, #0]
 800252a:	7b1b      	ldrb	r3, [r3, #12]
 800252c:	03db      	lsls	r3, r3, #15
  dmaregval = (((uint32_t)dmaconf->AddressAlignedBeats << 12) |
 800252e:	4313      	orrs	r3, r2
 8002530:	60fb      	str	r3, [r7, #12]

  MODIFY_REG(heth->Instance->DMASBMR, ETH_DMASBMR_MASK, dmaregval);
 8002532:	687b      	ldr	r3, [r7, #4]
 8002534:	681a      	ldr	r2, [r3, #0]
 8002536:	f241 0304 	movw	r3, #4100	; 0x1004
 800253a:	4413      	add	r3, r2
 800253c:	681a      	ldr	r2, [r3, #0]
 800253e:	4b2c      	ldr	r3, [pc, #176]	; (80025f0 <ETH_SetDMAConfig+0xfc>)
 8002540:	4013      	ands	r3, r2
 8002542:	687a      	ldr	r2, [r7, #4]
 8002544:	6811      	ldr	r1, [r2, #0]
 8002546:	68fa      	ldr	r2, [r7, #12]
 8002548:	431a      	orrs	r2, r3
 800254a:	f241 0304 	movw	r3, #4100	; 0x1004
 800254e:	440b      	add	r3, r1
 8002550:	601a      	str	r2, [r3, #0]

  /*------------------------ DMACCR Configuration --------------------*/
  dmaregval = (((uint32_t)dmaconf->PBLx8Mode << 16) |
 8002552:	683b      	ldr	r3, [r7, #0]
 8002554:	7b5b      	ldrb	r3, [r3, #13]
 8002556:	041a      	lsls	r2, r3, #16
               dmaconf->MaximumSegmentSize);
 8002558:	683b      	ldr	r3, [r7, #0]
 800255a:	6a1b      	ldr	r3, [r3, #32]
  dmaregval = (((uint32_t)dmaconf->PBLx8Mode << 16) |
 800255c:	4313      	orrs	r3, r2
 800255e:	60fb      	str	r3, [r7, #12]

  MODIFY_REG(heth->Instance->DMACCR, ETH_DMACCR_MASK, dmaregval);
 8002560:	687b      	ldr	r3, [r7, #4]
 8002562:	681b      	ldr	r3, [r3, #0]
 8002564:	f503 5388 	add.w	r3, r3, #4352	; 0x1100
 8002568:	681a      	ldr	r2, [r3, #0]
 800256a:	4b22      	ldr	r3, [pc, #136]	; (80025f4 <ETH_SetDMAConfig+0x100>)
 800256c:	4013      	ands	r3, r2
 800256e:	687a      	ldr	r2, [r7, #4]
 8002570:	6811      	ldr	r1, [r2, #0]
 8002572:	68fa      	ldr	r2, [r7, #12]
 8002574:	431a      	orrs	r2, r3
 8002576:	f501 5388 	add.w	r3, r1, #4352	; 0x1100
 800257a:	601a      	str	r2, [r3, #0]

  /*------------------------ DMACTCR Configuration --------------------*/
  dmaregval = (dmaconf->TxDMABurstLength |
 800257c:	683b      	ldr	r3, [r7, #0]
 800257e:	691a      	ldr	r2, [r3, #16]
               ((uint32_t)dmaconf->SecondPacketOperate << 4)|
 8002580:	683b      	ldr	r3, [r7, #0]
 8002582:	7d1b      	ldrb	r3, [r3, #20]
 8002584:	011b      	lsls	r3, r3, #4
  dmaregval = (dmaconf->TxDMABurstLength |
 8002586:	431a      	orrs	r2, r3
                 ((uint32_t)dmaconf->TCPSegmentation << 12));
 8002588:	683b      	ldr	r3, [r7, #0]
 800258a:	7f5b      	ldrb	r3, [r3, #29]
 800258c:	031b      	lsls	r3, r3, #12
  dmaregval = (dmaconf->TxDMABurstLength |
 800258e:	4313      	orrs	r3, r2
 8002590:	60fb      	str	r3, [r7, #12]

  MODIFY_REG(heth->Instance->DMACTCR, ETH_DMACTCR_MASK, dmaregval);
 8002592:	687b      	ldr	r3, [r7, #4]
 8002594:	681a      	ldr	r2, [r3, #0]
 8002596:	f241 1304 	movw	r3, #4356	; 0x1104
 800259a:	4413      	add	r3, r2
 800259c:	681a      	ldr	r2, [r3, #0]
 800259e:	4b16      	ldr	r3, [pc, #88]	; (80025f8 <ETH_SetDMAConfig+0x104>)
 80025a0:	4013      	ands	r3, r2
 80025a2:	687a      	ldr	r2, [r7, #4]
 80025a4:	6811      	ldr	r1, [r2, #0]
 80025a6:	68fa      	ldr	r2, [r7, #12]
 80025a8:	431a      	orrs	r2, r3
 80025aa:	f241 1304 	movw	r3, #4356	; 0x1104
 80025ae:	440b      	add	r3, r1
 80025b0:	601a      	str	r2, [r3, #0]

  /*------------------------ DMACRCR Configuration --------------------*/
  dmaregval = (((uint32_t)dmaconf->FlushRxPacket  << 31) |
 80025b2:	683b      	ldr	r3, [r7, #0]
 80025b4:	7f1b      	ldrb	r3, [r3, #28]
 80025b6:	07da      	lsls	r2, r3, #31
               dmaconf->RxDMABurstLength);
 80025b8:	683b      	ldr	r3, [r7, #0]
 80025ba:	699b      	ldr	r3, [r3, #24]
  dmaregval = (((uint32_t)dmaconf->FlushRxPacket  << 31) |
 80025bc:	4313      	orrs	r3, r2
 80025be:	60fb      	str	r3, [r7, #12]

  /* Write to DMACRCR */
  MODIFY_REG(heth->Instance->DMACRCR, ETH_DMACRCR_MASK, dmaregval);
 80025c0:	687b      	ldr	r3, [r7, #4]
 80025c2:	681a      	ldr	r2, [r3, #0]
 80025c4:	f241 1308 	movw	r3, #4360	; 0x1108
 80025c8:	4413      	add	r3, r2
 80025ca:	681a      	ldr	r2, [r3, #0]
 80025cc:	4b0b      	ldr	r3, [pc, #44]	; (80025fc <ETH_SetDMAConfig+0x108>)
 80025ce:	4013      	ands	r3, r2
 80025d0:	687a      	ldr	r2, [r7, #4]
 80025d2:	6811      	ldr	r1, [r2, #0]
 80025d4:	68fa      	ldr	r2, [r7, #12]
 80025d6:	431a      	orrs	r2, r3
 80025d8:	f241 1308 	movw	r3, #4360	; 0x1108
 80025dc:	440b      	add	r3, r1
 80025de:	601a      	str	r2, [r3, #0]
}
 80025e0:	bf00      	nop
 80025e2:	3714      	adds	r7, #20
 80025e4:	46bd      	mov	sp, r7
 80025e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025ea:	4770      	bx	lr
 80025ec:	ffff87fd 	.word	0xffff87fd
 80025f0:	ffff2ffe 	.word	0xffff2ffe
 80025f4:	fffec000 	.word	0xfffec000
 80025f8:	ffc0efef 	.word	0xffc0efef
 80025fc:	7fc0ffff 	.word	0x7fc0ffff

08002600 <ETH_MACDMAConfig>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
static void ETH_MACDMAConfig(ETH_HandleTypeDef *heth)
{
 8002600:	b580      	push	{r7, lr}
 8002602:	b0a4      	sub	sp, #144	; 0x90
 8002604:	af00      	add	r7, sp, #0
 8002606:	6078      	str	r0, [r7, #4]
  ETH_MACConfigTypeDef macDefaultConf;
  ETH_DMAConfigTypeDef dmaDefaultConf;

  /*--------------- ETHERNET MAC registers default Configuration --------------*/
  macDefaultConf.AutomaticPadCRCStrip = ENABLE;
 8002608:	2301      	movs	r3, #1
 800260a:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
  macDefaultConf.BackOffLimit = ETH_BACKOFFLIMIT_10;
 800260e:	2300      	movs	r3, #0
 8002610:	653b      	str	r3, [r7, #80]	; 0x50
  macDefaultConf.CarrierSenseBeforeTransmit = DISABLE;
 8002612:	2300      	movs	r3, #0
 8002614:	f887 3049 	strb.w	r3, [r7, #73]	; 0x49
  macDefaultConf.CarrierSenseDuringTransmit = DISABLE;
 8002618:	2300      	movs	r3, #0
 800261a:	f887 304b 	strb.w	r3, [r7, #75]	; 0x4b
  macDefaultConf.ChecksumOffload = ENABLE;
 800261e:	2301      	movs	r3, #1
 8002620:	f887 3030 	strb.w	r3, [r7, #48]	; 0x30
  macDefaultConf.CRCCheckingRxPackets = ENABLE;
 8002624:	2301      	movs	r3, #1
 8002626:	f887 305e 	strb.w	r3, [r7, #94]	; 0x5e
  macDefaultConf.CRCStripTypePacket = ENABLE;
 800262a:	2301      	movs	r3, #1
 800262c:	f887 303a 	strb.w	r3, [r7, #58]	; 0x3a
  macDefaultConf.DeferralCheck = DISABLE;
 8002630:	2300      	movs	r3, #0
 8002632:	f887 3054 	strb.w	r3, [r7, #84]	; 0x54
  macDefaultConf.DropTCPIPChecksumErrorPacket = ENABLE;
 8002636:	2301      	movs	r3, #1
 8002638:	f887 308c 	strb.w	r3, [r7, #140]	; 0x8c
  macDefaultConf.DuplexMode = ETH_FULLDUPLEX_MODE;
 800263c:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8002640:	647b      	str	r3, [r7, #68]	; 0x44
  macDefaultConf.ExtendedInterPacketGap = DISABLE;
 8002642:	2300      	movs	r3, #0
 8002644:	f887 3064 	strb.w	r3, [r7, #100]	; 0x64
  macDefaultConf.ExtendedInterPacketGapVal = 0x0;
 8002648:	2300      	movs	r3, #0
 800264a:	66bb      	str	r3, [r7, #104]	; 0x68
  macDefaultConf.ForwardRxErrorPacket = DISABLE;
 800264c:	2300      	movs	r3, #0
 800264e:	f887 308d 	strb.w	r3, [r7, #141]	; 0x8d
  macDefaultConf.ForwardRxUndersizedGoodPacket = DISABLE;
 8002652:	2300      	movs	r3, #0
 8002654:	f887 308e 	strb.w	r3, [r7, #142]	; 0x8e
  macDefaultConf.GiantPacketSizeLimit = 0x618;
 8002658:	f44f 63c3 	mov.w	r3, #1560	; 0x618
 800265c:	663b      	str	r3, [r7, #96]	; 0x60
  macDefaultConf.GiantPacketSizeLimitControl = DISABLE;
 800265e:	2300      	movs	r3, #0
 8002660:	f887 3038 	strb.w	r3, [r7, #56]	; 0x38
  macDefaultConf.InterPacketGapVal = ETH_INTERPACKETGAP_96BIT;
 8002664:	2300      	movs	r3, #0
 8002666:	637b      	str	r3, [r7, #52]	; 0x34
  macDefaultConf.Jabber = ENABLE;
 8002668:	2301      	movs	r3, #1
 800266a:	f887 303d 	strb.w	r3, [r7, #61]	; 0x3d
  macDefaultConf.JumboPacket = DISABLE;
 800266e:	2300      	movs	r3, #0
 8002670:	f887 303e 	strb.w	r3, [r7, #62]	; 0x3e
  macDefaultConf.LoopbackMode = DISABLE;
 8002674:	2300      	movs	r3, #0
 8002676:	f887 3048 	strb.w	r3, [r7, #72]	; 0x48
  macDefaultConf.PauseLowThreshold = ETH_PAUSELOWTHRESHOLD_MINUS_4;
 800267a:	2300      	movs	r3, #0
 800267c:	67fb      	str	r3, [r7, #124]	; 0x7c
  macDefaultConf.PauseTime = 0x0;
 800267e:	2300      	movs	r3, #0
 8002680:	677b      	str	r3, [r7, #116]	; 0x74
  macDefaultConf.PreambleLength = ETH_PREAMBLELENGTH_7;
 8002682:	2300      	movs	r3, #0
 8002684:	65bb      	str	r3, [r7, #88]	; 0x58
  macDefaultConf.ProgrammableWatchdog = DISABLE;
 8002686:	2300      	movs	r3, #0
 8002688:	f887 306c 	strb.w	r3, [r7, #108]	; 0x6c
  macDefaultConf.ReceiveFlowControl = DISABLE;
 800268c:	2300      	movs	r3, #0
 800268e:	f887 3082 	strb.w	r3, [r7, #130]	; 0x82
  macDefaultConf.ReceiveOwn = ENABLE;
 8002692:	2301      	movs	r3, #1
 8002694:	f887 304a 	strb.w	r3, [r7, #74]	; 0x4a
  macDefaultConf.ReceiveQueueMode = ETH_RECEIVESTOREFORWARD;
 8002698:	2320      	movs	r3, #32
 800269a:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  macDefaultConf.RetryTransmission = ENABLE;
 800269e:	2301      	movs	r3, #1
 80026a0:	f887 304c 	strb.w	r3, [r7, #76]	; 0x4c
  macDefaultConf.SlowProtocolDetect = DISABLE;
 80026a4:	2300      	movs	r3, #0
 80026a6:	f887 305d 	strb.w	r3, [r7, #93]	; 0x5d
  macDefaultConf.SourceAddrControl = ETH_SOURCEADDRESS_REPLACE_ADDR0;
 80026aa:	f04f 5340 	mov.w	r3, #805306368	; 0x30000000
 80026ae:	62fb      	str	r3, [r7, #44]	; 0x2c
  macDefaultConf.Speed = ETH_SPEED_100M;
 80026b0:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 80026b4:	643b      	str	r3, [r7, #64]	; 0x40
  macDefaultConf.Support2KPacket = DISABLE;
 80026b6:	2300      	movs	r3, #0
 80026b8:	f887 3039 	strb.w	r3, [r7, #57]	; 0x39
  macDefaultConf.TransmitQueueMode = ETH_TRANSMITSTOREFORWARD;
 80026bc:	2302      	movs	r3, #2
 80026be:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  macDefaultConf.TransmitFlowControl = DISABLE;
 80026c2:	2300      	movs	r3, #0
 80026c4:	f887 3080 	strb.w	r3, [r7, #128]	; 0x80
  macDefaultConf.UnicastPausePacketDetect = DISABLE;
 80026c8:	2300      	movs	r3, #0
 80026ca:	f887 3081 	strb.w	r3, [r7, #129]	; 0x81
  macDefaultConf.UnicastSlowProtocolPacketDetect = DISABLE;
 80026ce:	2300      	movs	r3, #0
 80026d0:	f887 305c 	strb.w	r3, [r7, #92]	; 0x5c
  macDefaultConf.Watchdog = ENABLE;
 80026d4:	2301      	movs	r3, #1
 80026d6:	f887 303c 	strb.w	r3, [r7, #60]	; 0x3c
  macDefaultConf.WatchdogTimeout =  ETH_MACWTR_WTO_2KB;
 80026da:	2300      	movs	r3, #0
 80026dc:	673b      	str	r3, [r7, #112]	; 0x70
  macDefaultConf.ZeroQuantaPause = ENABLE;
 80026de:	2301      	movs	r3, #1
 80026e0:	f887 3078 	strb.w	r3, [r7, #120]	; 0x78

  /* MAC default configuration */
  ETH_SetMACConfig(heth, &macDefaultConf);
 80026e4:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80026e8:	4619      	mov	r1, r3
 80026ea:	6878      	ldr	r0, [r7, #4]
 80026ec:	f7ff fde6 	bl	80022bc <ETH_SetMACConfig>

  /*--------------- ETHERNET DMA registers default Configuration --------------*/
  dmaDefaultConf.AddressAlignedBeats = ENABLE;
 80026f0:	2301      	movs	r3, #1
 80026f2:	733b      	strb	r3, [r7, #12]
  dmaDefaultConf.BurstMode = ETH_BURSTLENGTH_FIXED;
 80026f4:	2301      	movs	r3, #1
 80026f6:	613b      	str	r3, [r7, #16]
  dmaDefaultConf.DMAArbitration = ETH_DMAARBITRATION_RX1_TX1;
 80026f8:	2300      	movs	r3, #0
 80026fa:	60bb      	str	r3, [r7, #8]
  dmaDefaultConf.FlushRxPacket = DISABLE;
 80026fc:	2300      	movs	r3, #0
 80026fe:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
  dmaDefaultConf.PBLx8Mode = DISABLE;
 8002702:	2300      	movs	r3, #0
 8002704:	757b      	strb	r3, [r7, #21]
  dmaDefaultConf.RebuildINCRxBurst = DISABLE;
 8002706:	2300      	movs	r3, #0
 8002708:	753b      	strb	r3, [r7, #20]
  dmaDefaultConf.RxDMABurstLength = ETH_RXDMABURSTLENGTH_32BEAT;
 800270a:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 800270e:	623b      	str	r3, [r7, #32]
  dmaDefaultConf.SecondPacketOperate = DISABLE;
 8002710:	2300      	movs	r3, #0
 8002712:	773b      	strb	r3, [r7, #28]
  dmaDefaultConf.TxDMABurstLength = ETH_TXDMABURSTLENGTH_32BEAT;
 8002714:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8002718:	61bb      	str	r3, [r7, #24]
  dmaDefaultConf.TCPSegmentation = DISABLE;
 800271a:	2300      	movs	r3, #0
 800271c:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
  dmaDefaultConf.MaximumSegmentSize = 536;
 8002720:	f44f 7306 	mov.w	r3, #536	; 0x218
 8002724:	62bb      	str	r3, [r7, #40]	; 0x28

  /* DMA default configuration */
  ETH_SetDMAConfig(heth, &dmaDefaultConf);
 8002726:	f107 0308 	add.w	r3, r7, #8
 800272a:	4619      	mov	r1, r3
 800272c:	6878      	ldr	r0, [r7, #4]
 800272e:	f7ff fee1 	bl	80024f4 <ETH_SetDMAConfig>
}
 8002732:	bf00      	nop
 8002734:	3790      	adds	r7, #144	; 0x90
 8002736:	46bd      	mov	sp, r7
 8002738:	bd80      	pop	{r7, pc}
	...

0800273c <ETH_MAC_MDIO_ClkConfig>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_MAC_MDIO_ClkConfig(ETH_HandleTypeDef *heth)
{
 800273c:	b580      	push	{r7, lr}
 800273e:	b084      	sub	sp, #16
 8002740:	af00      	add	r7, sp, #0
 8002742:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg, hclk;

  /* Get the ETHERNET MACMDIOAR value */
  tmpreg = (heth->Instance)->MACMDIOAR;
 8002744:	687b      	ldr	r3, [r7, #4]
 8002746:	681b      	ldr	r3, [r3, #0]
 8002748:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 800274c:	60fb      	str	r3, [r7, #12]

  /* Clear CSR Clock Range bits */
  tmpreg &= ~ETH_MACMDIOAR_CR;
 800274e:	68fb      	ldr	r3, [r7, #12]
 8002750:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8002754:	60fb      	str	r3, [r7, #12]

  /* Get hclk frequency value */
  hclk = HAL_RCC_GetHCLKFreq();
 8002756:	f001 faa5 	bl	8003ca4 <HAL_RCC_GetHCLKFreq>
 800275a:	60b8      	str	r0, [r7, #8]

  /* Set CR bits depending on hclk value */
  if((hclk >= 20000000U)&&(hclk < 35000000U))
 800275c:	68bb      	ldr	r3, [r7, #8]
 800275e:	4a1e      	ldr	r2, [pc, #120]	; (80027d8 <ETH_MAC_MDIO_ClkConfig+0x9c>)
 8002760:	4293      	cmp	r3, r2
 8002762:	d908      	bls.n	8002776 <ETH_MAC_MDIO_ClkConfig+0x3a>
 8002764:	68bb      	ldr	r3, [r7, #8]
 8002766:	4a1d      	ldr	r2, [pc, #116]	; (80027dc <ETH_MAC_MDIO_ClkConfig+0xa0>)
 8002768:	4293      	cmp	r3, r2
 800276a:	d804      	bhi.n	8002776 <ETH_MAC_MDIO_ClkConfig+0x3a>
  {
    /* CSR Clock Range between 20-35 MHz */
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV16;
 800276c:	68fb      	ldr	r3, [r7, #12]
 800276e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8002772:	60fb      	str	r3, [r7, #12]
 8002774:	e027      	b.n	80027c6 <ETH_MAC_MDIO_ClkConfig+0x8a>
  }
  else if((hclk >= 35000000U)&&(hclk < 60000000U))
 8002776:	68bb      	ldr	r3, [r7, #8]
 8002778:	4a18      	ldr	r2, [pc, #96]	; (80027dc <ETH_MAC_MDIO_ClkConfig+0xa0>)
 800277a:	4293      	cmp	r3, r2
 800277c:	d908      	bls.n	8002790 <ETH_MAC_MDIO_ClkConfig+0x54>
 800277e:	68bb      	ldr	r3, [r7, #8]
 8002780:	4a17      	ldr	r2, [pc, #92]	; (80027e0 <ETH_MAC_MDIO_ClkConfig+0xa4>)
 8002782:	4293      	cmp	r3, r2
 8002784:	d204      	bcs.n	8002790 <ETH_MAC_MDIO_ClkConfig+0x54>
  {
    /* CSR Clock Range between 35-60 MHz */
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV26;
 8002786:	68fb      	ldr	r3, [r7, #12]
 8002788:	f443 7340 	orr.w	r3, r3, #768	; 0x300
 800278c:	60fb      	str	r3, [r7, #12]
 800278e:	e01a      	b.n	80027c6 <ETH_MAC_MDIO_ClkConfig+0x8a>
  }
  else if((hclk >= 60000000U)&&(hclk < 100000000U))
 8002790:	68bb      	ldr	r3, [r7, #8]
 8002792:	4a13      	ldr	r2, [pc, #76]	; (80027e0 <ETH_MAC_MDIO_ClkConfig+0xa4>)
 8002794:	4293      	cmp	r3, r2
 8002796:	d303      	bcc.n	80027a0 <ETH_MAC_MDIO_ClkConfig+0x64>
 8002798:	68bb      	ldr	r3, [r7, #8]
 800279a:	4a12      	ldr	r2, [pc, #72]	; (80027e4 <ETH_MAC_MDIO_ClkConfig+0xa8>)
 800279c:	4293      	cmp	r3, r2
 800279e:	d911      	bls.n	80027c4 <ETH_MAC_MDIO_ClkConfig+0x88>
  {
    /* CSR Clock Range between 60-100 MHz */
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV42;
  }
  else if((hclk >= 100000000U)&&(hclk < 150000000U))
 80027a0:	68bb      	ldr	r3, [r7, #8]
 80027a2:	4a10      	ldr	r2, [pc, #64]	; (80027e4 <ETH_MAC_MDIO_ClkConfig+0xa8>)
 80027a4:	4293      	cmp	r3, r2
 80027a6:	d908      	bls.n	80027ba <ETH_MAC_MDIO_ClkConfig+0x7e>
 80027a8:	68bb      	ldr	r3, [r7, #8]
 80027aa:	4a0f      	ldr	r2, [pc, #60]	; (80027e8 <ETH_MAC_MDIO_ClkConfig+0xac>)
 80027ac:	4293      	cmp	r3, r2
 80027ae:	d804      	bhi.n	80027ba <ETH_MAC_MDIO_ClkConfig+0x7e>
  {
    /* CSR Clock Range between 100-150 MHz */
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV62;
 80027b0:	68fb      	ldr	r3, [r7, #12]
 80027b2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80027b6:	60fb      	str	r3, [r7, #12]
 80027b8:	e005      	b.n	80027c6 <ETH_MAC_MDIO_ClkConfig+0x8a>
  }
  else /* (hclk >= 150000000)&&(hclk <= 200000000) */
  {
    /* CSR Clock Range between 150-200 MHz */
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV102;
 80027ba:	68fb      	ldr	r3, [r7, #12]
 80027bc:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80027c0:	60fb      	str	r3, [r7, #12]
 80027c2:	e000      	b.n	80027c6 <ETH_MAC_MDIO_ClkConfig+0x8a>
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV42;
 80027c4:	bf00      	nop
  }

  /* Configure the CSR Clock Range */
  (heth->Instance)->MACMDIOAR = (uint32_t)tmpreg;
 80027c6:	687b      	ldr	r3, [r7, #4]
 80027c8:	681b      	ldr	r3, [r3, #0]
 80027ca:	68fa      	ldr	r2, [r7, #12]
 80027cc:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
}
 80027d0:	bf00      	nop
 80027d2:	3710      	adds	r7, #16
 80027d4:	46bd      	mov	sp, r7
 80027d6:	bd80      	pop	{r7, pc}
 80027d8:	01312cff 	.word	0x01312cff
 80027dc:	02160ebf 	.word	0x02160ebf
 80027e0:	03938700 	.word	0x03938700
 80027e4:	05f5e0ff 	.word	0x05f5e0ff
 80027e8:	08f0d17f 	.word	0x08f0d17f

080027ec <ETH_DMATxDescListInit>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_DMATxDescListInit(ETH_HandleTypeDef *heth)
{
 80027ec:	b480      	push	{r7}
 80027ee:	b085      	sub	sp, #20
 80027f0:	af00      	add	r7, sp, #0
 80027f2:	6078      	str	r0, [r7, #4]
  ETH_DMADescTypeDef *dmatxdesc;
  uint32_t i;

  /* Fill each DMATxDesc descriptor with the right values */
  for(i=0; i < (uint32_t)ETH_TX_DESC_CNT; i++)
 80027f4:	2300      	movs	r3, #0
 80027f6:	60fb      	str	r3, [r7, #12]
 80027f8:	e01d      	b.n	8002836 <ETH_DMATxDescListInit+0x4a>
  {
    dmatxdesc = heth->Init.TxDesc + i;
 80027fa:	687b      	ldr	r3, [r7, #4]
 80027fc:	68d9      	ldr	r1, [r3, #12]
 80027fe:	68fa      	ldr	r2, [r7, #12]
 8002800:	4613      	mov	r3, r2
 8002802:	005b      	lsls	r3, r3, #1
 8002804:	4413      	add	r3, r2
 8002806:	00db      	lsls	r3, r3, #3
 8002808:	440b      	add	r3, r1
 800280a:	60bb      	str	r3, [r7, #8]

    WRITE_REG(dmatxdesc->DESC0, 0x0);
 800280c:	68bb      	ldr	r3, [r7, #8]
 800280e:	2200      	movs	r2, #0
 8002810:	601a      	str	r2, [r3, #0]
    WRITE_REG(dmatxdesc->DESC1, 0x0);
 8002812:	68bb      	ldr	r3, [r7, #8]
 8002814:	2200      	movs	r2, #0
 8002816:	605a      	str	r2, [r3, #4]
    WRITE_REG(dmatxdesc->DESC2, 0x0);
 8002818:	68bb      	ldr	r3, [r7, #8]
 800281a:	2200      	movs	r2, #0
 800281c:	609a      	str	r2, [r3, #8]
    WRITE_REG(dmatxdesc->DESC3, 0x0);
 800281e:	68bb      	ldr	r3, [r7, #8]
 8002820:	2200      	movs	r2, #0
 8002822:	60da      	str	r2, [r3, #12]

    WRITE_REG(heth->TxDescList.TxDesc[i], (uint32_t)dmatxdesc);
 8002824:	68b9      	ldr	r1, [r7, #8]
 8002826:	687b      	ldr	r3, [r7, #4]
 8002828:	68fa      	ldr	r2, [r7, #12]
 800282a:	3206      	adds	r2, #6
 800282c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  for(i=0; i < (uint32_t)ETH_TX_DESC_CNT; i++)
 8002830:	68fb      	ldr	r3, [r7, #12]
 8002832:	3301      	adds	r3, #1
 8002834:	60fb      	str	r3, [r7, #12]
 8002836:	68fb      	ldr	r3, [r7, #12]
 8002838:	2b03      	cmp	r3, #3
 800283a:	d9de      	bls.n	80027fa <ETH_DMATxDescListInit+0xe>
  }

  heth->TxDescList.CurTxDesc = 0;
 800283c:	687b      	ldr	r3, [r7, #4]
 800283e:	2200      	movs	r2, #0
 8002840:	629a      	str	r2, [r3, #40]	; 0x28

  /* Set Transmit Descriptor Ring Length */
  WRITE_REG(heth->Instance->DMACTDRLR, (ETH_TX_DESC_CNT -1));
 8002842:	687b      	ldr	r3, [r7, #4]
 8002844:	681a      	ldr	r2, [r3, #0]
 8002846:	f241 132c 	movw	r3, #4396	; 0x112c
 800284a:	4413      	add	r3, r2
 800284c:	2203      	movs	r2, #3
 800284e:	601a      	str	r2, [r3, #0]

  /* Set Transmit Descriptor List Address */
  WRITE_REG(heth->Instance->DMACTDLAR, (uint32_t) heth->Init.TxDesc);
 8002850:	687b      	ldr	r3, [r7, #4]
 8002852:	68d9      	ldr	r1, [r3, #12]
 8002854:	687b      	ldr	r3, [r7, #4]
 8002856:	681a      	ldr	r2, [r3, #0]
 8002858:	f241 1314 	movw	r3, #4372	; 0x1114
 800285c:	4413      	add	r3, r2
 800285e:	6019      	str	r1, [r3, #0]

  /* Set Transmit Descriptor Tail pointer */
  WRITE_REG(heth->Instance->DMACTDTPR, (uint32_t) heth->Init.TxDesc);
 8002860:	687b      	ldr	r3, [r7, #4]
 8002862:	68da      	ldr	r2, [r3, #12]
 8002864:	687b      	ldr	r3, [r7, #4]
 8002866:	681b      	ldr	r3, [r3, #0]
 8002868:	f503 5389 	add.w	r3, r3, #4384	; 0x1120
 800286c:	601a      	str	r2, [r3, #0]
}
 800286e:	bf00      	nop
 8002870:	3714      	adds	r7, #20
 8002872:	46bd      	mov	sp, r7
 8002874:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002878:	4770      	bx	lr

0800287a <ETH_DMARxDescListInit>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_DMARxDescListInit(ETH_HandleTypeDef *heth)
{
 800287a:	b480      	push	{r7}
 800287c:	b085      	sub	sp, #20
 800287e:	af00      	add	r7, sp, #0
 8002880:	6078      	str	r0, [r7, #4]
  ETH_DMADescTypeDef *dmarxdesc;
  uint32_t i;

  for(i = 0; i < (uint32_t)ETH_RX_DESC_CNT; i++)
 8002882:	2300      	movs	r3, #0
 8002884:	60fb      	str	r3, [r7, #12]
 8002886:	e024      	b.n	80028d2 <ETH_DMARxDescListInit+0x58>
  {
    dmarxdesc =  heth->Init.RxDesc + i;
 8002888:	687b      	ldr	r3, [r7, #4]
 800288a:	6919      	ldr	r1, [r3, #16]
 800288c:	68fa      	ldr	r2, [r7, #12]
 800288e:	4613      	mov	r3, r2
 8002890:	005b      	lsls	r3, r3, #1
 8002892:	4413      	add	r3, r2
 8002894:	00db      	lsls	r3, r3, #3
 8002896:	440b      	add	r3, r1
 8002898:	60bb      	str	r3, [r7, #8]

    WRITE_REG(dmarxdesc->DESC0, 0x0);
 800289a:	68bb      	ldr	r3, [r7, #8]
 800289c:	2200      	movs	r2, #0
 800289e:	601a      	str	r2, [r3, #0]
    WRITE_REG(dmarxdesc->DESC1, 0x0);
 80028a0:	68bb      	ldr	r3, [r7, #8]
 80028a2:	2200      	movs	r2, #0
 80028a4:	605a      	str	r2, [r3, #4]
    WRITE_REG(dmarxdesc->DESC2, 0x0);
 80028a6:	68bb      	ldr	r3, [r7, #8]
 80028a8:	2200      	movs	r2, #0
 80028aa:	609a      	str	r2, [r3, #8]
    WRITE_REG(dmarxdesc->DESC3, 0x0);
 80028ac:	68bb      	ldr	r3, [r7, #8]
 80028ae:	2200      	movs	r2, #0
 80028b0:	60da      	str	r2, [r3, #12]
    WRITE_REG(dmarxdesc->BackupAddr0, 0x0);
 80028b2:	68bb      	ldr	r3, [r7, #8]
 80028b4:	2200      	movs	r2, #0
 80028b6:	611a      	str	r2, [r3, #16]
    WRITE_REG(dmarxdesc->BackupAddr1, 0x0);
 80028b8:	68bb      	ldr	r3, [r7, #8]
 80028ba:	2200      	movs	r2, #0
 80028bc:	615a      	str	r2, [r3, #20]

    /* Set Rx descritors addresses */
    WRITE_REG(heth->RxDescList.RxDesc[i], (uint32_t)dmarxdesc);
 80028be:	68ba      	ldr	r2, [r7, #8]
 80028c0:	6879      	ldr	r1, [r7, #4]
 80028c2:	68fb      	ldr	r3, [r7, #12]
 80028c4:	3310      	adds	r3, #16
 80028c6:	009b      	lsls	r3, r3, #2
 80028c8:	440b      	add	r3, r1
 80028ca:	605a      	str	r2, [r3, #4]
  for(i = 0; i < (uint32_t)ETH_RX_DESC_CNT; i++)
 80028cc:	68fb      	ldr	r3, [r7, #12]
 80028ce:	3301      	adds	r3, #1
 80028d0:	60fb      	str	r3, [r7, #12]
 80028d2:	68fb      	ldr	r3, [r7, #12]
 80028d4:	2b03      	cmp	r3, #3
 80028d6:	d9d7      	bls.n	8002888 <ETH_DMARxDescListInit+0xe>
  }

  WRITE_REG(heth->RxDescList.CurRxDesc, 0);
 80028d8:	687b      	ldr	r3, [r7, #4]
 80028da:	2200      	movs	r2, #0
 80028dc:	655a      	str	r2, [r3, #84]	; 0x54
  WRITE_REG(heth->RxDescList.FirstAppDesc, 0);
 80028de:	687b      	ldr	r3, [r7, #4]
 80028e0:	2200      	movs	r2, #0
 80028e2:	659a      	str	r2, [r3, #88]	; 0x58
  WRITE_REG(heth->RxDescList.AppDescNbr, 0);
 80028e4:	687b      	ldr	r3, [r7, #4]
 80028e6:	2200      	movs	r2, #0
 80028e8:	65da      	str	r2, [r3, #92]	; 0x5c
  WRITE_REG(heth->RxDescList.ItMode, 0);
 80028ea:	687b      	ldr	r3, [r7, #4]
 80028ec:	2200      	movs	r2, #0
 80028ee:	665a      	str	r2, [r3, #100]	; 0x64
  WRITE_REG(heth->RxDescList.AppContextDesc, 0);
 80028f0:	687b      	ldr	r3, [r7, #4]
 80028f2:	2200      	movs	r2, #0
 80028f4:	661a      	str	r2, [r3, #96]	; 0x60

  /* Set Receive Descriptor Ring Length */
  WRITE_REG(heth->Instance->DMACRDRLR, ((uint32_t)(ETH_RX_DESC_CNT - 1)));
 80028f6:	687b      	ldr	r3, [r7, #4]
 80028f8:	681a      	ldr	r2, [r3, #0]
 80028fa:	f241 1330 	movw	r3, #4400	; 0x1130
 80028fe:	4413      	add	r3, r2
 8002900:	2203      	movs	r2, #3
 8002902:	601a      	str	r2, [r3, #0]

  /* Set Receive Descriptor List Address */
  WRITE_REG(heth->Instance->DMACRDLAR, (uint32_t) heth->Init.RxDesc);
 8002904:	687b      	ldr	r3, [r7, #4]
 8002906:	6919      	ldr	r1, [r3, #16]
 8002908:	687b      	ldr	r3, [r7, #4]
 800290a:	681a      	ldr	r2, [r3, #0]
 800290c:	f241 131c 	movw	r3, #4380	; 0x111c
 8002910:	4413      	add	r3, r2
 8002912:	6019      	str	r1, [r3, #0]

  /* Set Receive Descriptor Tail pointer Address */
  WRITE_REG(heth->Instance->DMACRDTPR, ((uint32_t)(heth->Init.RxDesc + (uint32_t)(ETH_RX_DESC_CNT - 1))));
 8002914:	687b      	ldr	r3, [r7, #4]
 8002916:	691b      	ldr	r3, [r3, #16]
 8002918:	f103 0148 	add.w	r1, r3, #72	; 0x48
 800291c:	687b      	ldr	r3, [r7, #4]
 800291e:	681a      	ldr	r2, [r3, #0]
 8002920:	f241 1328 	movw	r3, #4392	; 0x1128
 8002924:	4413      	add	r3, r2
 8002926:	6019      	str	r1, [r3, #0]
}
 8002928:	bf00      	nop
 800292a:	3714      	adds	r7, #20
 800292c:	46bd      	mov	sp, r7
 800292e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002932:	4770      	bx	lr

08002934 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002934:	b480      	push	{r7}
 8002936:	b089      	sub	sp, #36	; 0x24
 8002938:	af00      	add	r7, sp, #0
 800293a:	6078      	str	r0, [r7, #4]
 800293c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 800293e:	2300      	movs	r3, #0
 8002940:	61fb      	str	r3, [r7, #28]
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
#else
  EXTI_CurrentCPU = EXTI_D1; /* EXTI for CM7 CPU */
 8002942:	4b86      	ldr	r3, [pc, #536]	; (8002b5c <HAL_GPIO_Init+0x228>)
 8002944:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8002946:	e18c      	b.n	8002c62 <HAL_GPIO_Init+0x32e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8002948:	683b      	ldr	r3, [r7, #0]
 800294a:	681a      	ldr	r2, [r3, #0]
 800294c:	2101      	movs	r1, #1
 800294e:	69fb      	ldr	r3, [r7, #28]
 8002950:	fa01 f303 	lsl.w	r3, r1, r3
 8002954:	4013      	ands	r3, r2
 8002956:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00U)
 8002958:	693b      	ldr	r3, [r7, #16]
 800295a:	2b00      	cmp	r3, #0
 800295c:	f000 817e 	beq.w	8002c5c <HAL_GPIO_Init+0x328>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if ((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8002960:	683b      	ldr	r3, [r7, #0]
 8002962:	685b      	ldr	r3, [r3, #4]
 8002964:	2b01      	cmp	r3, #1
 8002966:	d00b      	beq.n	8002980 <HAL_GPIO_Init+0x4c>
 8002968:	683b      	ldr	r3, [r7, #0]
 800296a:	685b      	ldr	r3, [r3, #4]
 800296c:	2b02      	cmp	r3, #2
 800296e:	d007      	beq.n	8002980 <HAL_GPIO_Init+0x4c>
          (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8002970:	683b      	ldr	r3, [r7, #0]
 8002972:	685b      	ldr	r3, [r3, #4]
      if ((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8002974:	2b11      	cmp	r3, #17
 8002976:	d003      	beq.n	8002980 <HAL_GPIO_Init+0x4c>
          (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8002978:	683b      	ldr	r3, [r7, #0]
 800297a:	685b      	ldr	r3, [r3, #4]
 800297c:	2b12      	cmp	r3, #18
 800297e:	d130      	bne.n	80029e2 <HAL_GPIO_Init+0xae>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8002980:	687b      	ldr	r3, [r7, #4]
 8002982:	689b      	ldr	r3, [r3, #8]
 8002984:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8002986:	69fb      	ldr	r3, [r7, #28]
 8002988:	005b      	lsls	r3, r3, #1
 800298a:	2203      	movs	r2, #3
 800298c:	fa02 f303 	lsl.w	r3, r2, r3
 8002990:	43db      	mvns	r3, r3
 8002992:	69ba      	ldr	r2, [r7, #24]
 8002994:	4013      	ands	r3, r2
 8002996:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8002998:	683b      	ldr	r3, [r7, #0]
 800299a:	68da      	ldr	r2, [r3, #12]
 800299c:	69fb      	ldr	r3, [r7, #28]
 800299e:	005b      	lsls	r3, r3, #1
 80029a0:	fa02 f303 	lsl.w	r3, r2, r3
 80029a4:	69ba      	ldr	r2, [r7, #24]
 80029a6:	4313      	orrs	r3, r2
 80029a8:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80029aa:	687b      	ldr	r3, [r7, #4]
 80029ac:	69ba      	ldr	r2, [r7, #24]
 80029ae:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80029b0:	687b      	ldr	r3, [r7, #4]
 80029b2:	685b      	ldr	r3, [r3, #4]
 80029b4:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 80029b6:	2201      	movs	r2, #1
 80029b8:	69fb      	ldr	r3, [r7, #28]
 80029ba:	fa02 f303 	lsl.w	r3, r2, r3
 80029be:	43db      	mvns	r3, r3
 80029c0:	69ba      	ldr	r2, [r7, #24]
 80029c2:	4013      	ands	r3, r2
 80029c4:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 80029c6:	683b      	ldr	r3, [r7, #0]
 80029c8:	685b      	ldr	r3, [r3, #4]
 80029ca:	091b      	lsrs	r3, r3, #4
 80029cc:	f003 0201 	and.w	r2, r3, #1
 80029d0:	69fb      	ldr	r3, [r7, #28]
 80029d2:	fa02 f303 	lsl.w	r3, r2, r3
 80029d6:	69ba      	ldr	r2, [r7, #24]
 80029d8:	4313      	orrs	r3, r2
 80029da:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80029dc:	687b      	ldr	r3, [r7, #4]
 80029de:	69ba      	ldr	r2, [r7, #24]
 80029e0:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 80029e2:	687b      	ldr	r3, [r7, #4]
 80029e4:	68db      	ldr	r3, [r3, #12]
 80029e6:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 80029e8:	69fb      	ldr	r3, [r7, #28]
 80029ea:	005b      	lsls	r3, r3, #1
 80029ec:	2203      	movs	r2, #3
 80029ee:	fa02 f303 	lsl.w	r3, r2, r3
 80029f2:	43db      	mvns	r3, r3
 80029f4:	69ba      	ldr	r2, [r7, #24]
 80029f6:	4013      	ands	r3, r2
 80029f8:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 80029fa:	683b      	ldr	r3, [r7, #0]
 80029fc:	689a      	ldr	r2, [r3, #8]
 80029fe:	69fb      	ldr	r3, [r7, #28]
 8002a00:	005b      	lsls	r3, r3, #1
 8002a02:	fa02 f303 	lsl.w	r3, r2, r3
 8002a06:	69ba      	ldr	r2, [r7, #24]
 8002a08:	4313      	orrs	r3, r2
 8002a0a:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8002a0c:	687b      	ldr	r3, [r7, #4]
 8002a0e:	69ba      	ldr	r2, [r7, #24]
 8002a10:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8002a12:	683b      	ldr	r3, [r7, #0]
 8002a14:	685b      	ldr	r3, [r3, #4]
 8002a16:	2b02      	cmp	r3, #2
 8002a18:	d003      	beq.n	8002a22 <HAL_GPIO_Init+0xee>
 8002a1a:	683b      	ldr	r3, [r7, #0]
 8002a1c:	685b      	ldr	r3, [r3, #4]
 8002a1e:	2b12      	cmp	r3, #18
 8002a20:	d123      	bne.n	8002a6a <HAL_GPIO_Init+0x136>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8002a22:	69fb      	ldr	r3, [r7, #28]
 8002a24:	08da      	lsrs	r2, r3, #3
 8002a26:	687b      	ldr	r3, [r7, #4]
 8002a28:	3208      	adds	r2, #8
 8002a2a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002a2e:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8002a30:	69fb      	ldr	r3, [r7, #28]
 8002a32:	f003 0307 	and.w	r3, r3, #7
 8002a36:	009b      	lsls	r3, r3, #2
 8002a38:	220f      	movs	r2, #15
 8002a3a:	fa02 f303 	lsl.w	r3, r2, r3
 8002a3e:	43db      	mvns	r3, r3
 8002a40:	69ba      	ldr	r2, [r7, #24]
 8002a42:	4013      	ands	r3, r2
 8002a44:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8002a46:	683b      	ldr	r3, [r7, #0]
 8002a48:	691a      	ldr	r2, [r3, #16]
 8002a4a:	69fb      	ldr	r3, [r7, #28]
 8002a4c:	f003 0307 	and.w	r3, r3, #7
 8002a50:	009b      	lsls	r3, r3, #2
 8002a52:	fa02 f303 	lsl.w	r3, r2, r3
 8002a56:	69ba      	ldr	r2, [r7, #24]
 8002a58:	4313      	orrs	r3, r2
 8002a5a:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8002a5c:	69fb      	ldr	r3, [r7, #28]
 8002a5e:	08da      	lsrs	r2, r3, #3
 8002a60:	687b      	ldr	r3, [r7, #4]
 8002a62:	3208      	adds	r2, #8
 8002a64:	69b9      	ldr	r1, [r7, #24]
 8002a66:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002a6a:	687b      	ldr	r3, [r7, #4]
 8002a6c:	681b      	ldr	r3, [r3, #0]
 8002a6e:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8002a70:	69fb      	ldr	r3, [r7, #28]
 8002a72:	005b      	lsls	r3, r3, #1
 8002a74:	2203      	movs	r2, #3
 8002a76:	fa02 f303 	lsl.w	r3, r2, r3
 8002a7a:	43db      	mvns	r3, r3
 8002a7c:	69ba      	ldr	r2, [r7, #24]
 8002a7e:	4013      	ands	r3, r2
 8002a80:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8002a82:	683b      	ldr	r3, [r7, #0]
 8002a84:	685b      	ldr	r3, [r3, #4]
 8002a86:	f003 0203 	and.w	r2, r3, #3
 8002a8a:	69fb      	ldr	r3, [r7, #28]
 8002a8c:	005b      	lsls	r3, r3, #1
 8002a8e:	fa02 f303 	lsl.w	r3, r2, r3
 8002a92:	69ba      	ldr	r2, [r7, #24]
 8002a94:	4313      	orrs	r3, r2
 8002a96:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8002a98:	687b      	ldr	r3, [r7, #4]
 8002a9a:	69ba      	ldr	r2, [r7, #24]
 8002a9c:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8002a9e:	683b      	ldr	r3, [r7, #0]
 8002aa0:	685b      	ldr	r3, [r3, #4]
 8002aa2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002aa6:	2b00      	cmp	r3, #0
 8002aa8:	f000 80d8 	beq.w	8002c5c <HAL_GPIO_Init+0x328>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002aac:	4b2c      	ldr	r3, [pc, #176]	; (8002b60 <HAL_GPIO_Init+0x22c>)
 8002aae:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8002ab2:	4a2b      	ldr	r2, [pc, #172]	; (8002b60 <HAL_GPIO_Init+0x22c>)
 8002ab4:	f043 0302 	orr.w	r3, r3, #2
 8002ab8:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 8002abc:	4b28      	ldr	r3, [pc, #160]	; (8002b60 <HAL_GPIO_Init+0x22c>)
 8002abe:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8002ac2:	f003 0302 	and.w	r3, r3, #2
 8002ac6:	60fb      	str	r3, [r7, #12]
 8002ac8:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8002aca:	4a26      	ldr	r2, [pc, #152]	; (8002b64 <HAL_GPIO_Init+0x230>)
 8002acc:	69fb      	ldr	r3, [r7, #28]
 8002ace:	089b      	lsrs	r3, r3, #2
 8002ad0:	3302      	adds	r3, #2
 8002ad2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002ad6:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8002ad8:	69fb      	ldr	r3, [r7, #28]
 8002ada:	f003 0303 	and.w	r3, r3, #3
 8002ade:	009b      	lsls	r3, r3, #2
 8002ae0:	220f      	movs	r2, #15
 8002ae2:	fa02 f303 	lsl.w	r3, r2, r3
 8002ae6:	43db      	mvns	r3, r3
 8002ae8:	69ba      	ldr	r2, [r7, #24]
 8002aea:	4013      	ands	r3, r2
 8002aec:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8002aee:	687b      	ldr	r3, [r7, #4]
 8002af0:	4a1d      	ldr	r2, [pc, #116]	; (8002b68 <HAL_GPIO_Init+0x234>)
 8002af2:	4293      	cmp	r3, r2
 8002af4:	d04a      	beq.n	8002b8c <HAL_GPIO_Init+0x258>
 8002af6:	687b      	ldr	r3, [r7, #4]
 8002af8:	4a1c      	ldr	r2, [pc, #112]	; (8002b6c <HAL_GPIO_Init+0x238>)
 8002afa:	4293      	cmp	r3, r2
 8002afc:	d02b      	beq.n	8002b56 <HAL_GPIO_Init+0x222>
 8002afe:	687b      	ldr	r3, [r7, #4]
 8002b00:	4a1b      	ldr	r2, [pc, #108]	; (8002b70 <HAL_GPIO_Init+0x23c>)
 8002b02:	4293      	cmp	r3, r2
 8002b04:	d025      	beq.n	8002b52 <HAL_GPIO_Init+0x21e>
 8002b06:	687b      	ldr	r3, [r7, #4]
 8002b08:	4a1a      	ldr	r2, [pc, #104]	; (8002b74 <HAL_GPIO_Init+0x240>)
 8002b0a:	4293      	cmp	r3, r2
 8002b0c:	d01f      	beq.n	8002b4e <HAL_GPIO_Init+0x21a>
 8002b0e:	687b      	ldr	r3, [r7, #4]
 8002b10:	4a19      	ldr	r2, [pc, #100]	; (8002b78 <HAL_GPIO_Init+0x244>)
 8002b12:	4293      	cmp	r3, r2
 8002b14:	d019      	beq.n	8002b4a <HAL_GPIO_Init+0x216>
 8002b16:	687b      	ldr	r3, [r7, #4]
 8002b18:	4a18      	ldr	r2, [pc, #96]	; (8002b7c <HAL_GPIO_Init+0x248>)
 8002b1a:	4293      	cmp	r3, r2
 8002b1c:	d013      	beq.n	8002b46 <HAL_GPIO_Init+0x212>
 8002b1e:	687b      	ldr	r3, [r7, #4]
 8002b20:	4a17      	ldr	r2, [pc, #92]	; (8002b80 <HAL_GPIO_Init+0x24c>)
 8002b22:	4293      	cmp	r3, r2
 8002b24:	d00d      	beq.n	8002b42 <HAL_GPIO_Init+0x20e>
 8002b26:	687b      	ldr	r3, [r7, #4]
 8002b28:	4a16      	ldr	r2, [pc, #88]	; (8002b84 <HAL_GPIO_Init+0x250>)
 8002b2a:	4293      	cmp	r3, r2
 8002b2c:	d007      	beq.n	8002b3e <HAL_GPIO_Init+0x20a>
 8002b2e:	687b      	ldr	r3, [r7, #4]
 8002b30:	4a15      	ldr	r2, [pc, #84]	; (8002b88 <HAL_GPIO_Init+0x254>)
 8002b32:	4293      	cmp	r3, r2
 8002b34:	d101      	bne.n	8002b3a <HAL_GPIO_Init+0x206>
 8002b36:	2309      	movs	r3, #9
 8002b38:	e029      	b.n	8002b8e <HAL_GPIO_Init+0x25a>
 8002b3a:	230a      	movs	r3, #10
 8002b3c:	e027      	b.n	8002b8e <HAL_GPIO_Init+0x25a>
 8002b3e:	2307      	movs	r3, #7
 8002b40:	e025      	b.n	8002b8e <HAL_GPIO_Init+0x25a>
 8002b42:	2306      	movs	r3, #6
 8002b44:	e023      	b.n	8002b8e <HAL_GPIO_Init+0x25a>
 8002b46:	2305      	movs	r3, #5
 8002b48:	e021      	b.n	8002b8e <HAL_GPIO_Init+0x25a>
 8002b4a:	2304      	movs	r3, #4
 8002b4c:	e01f      	b.n	8002b8e <HAL_GPIO_Init+0x25a>
 8002b4e:	2303      	movs	r3, #3
 8002b50:	e01d      	b.n	8002b8e <HAL_GPIO_Init+0x25a>
 8002b52:	2302      	movs	r3, #2
 8002b54:	e01b      	b.n	8002b8e <HAL_GPIO_Init+0x25a>
 8002b56:	2301      	movs	r3, #1
 8002b58:	e019      	b.n	8002b8e <HAL_GPIO_Init+0x25a>
 8002b5a:	bf00      	nop
 8002b5c:	58000080 	.word	0x58000080
 8002b60:	58024400 	.word	0x58024400
 8002b64:	58000400 	.word	0x58000400
 8002b68:	58020000 	.word	0x58020000
 8002b6c:	58020400 	.word	0x58020400
 8002b70:	58020800 	.word	0x58020800
 8002b74:	58020c00 	.word	0x58020c00
 8002b78:	58021000 	.word	0x58021000
 8002b7c:	58021400 	.word	0x58021400
 8002b80:	58021800 	.word	0x58021800
 8002b84:	58021c00 	.word	0x58021c00
 8002b88:	58022400 	.word	0x58022400
 8002b8c:	2300      	movs	r3, #0
 8002b8e:	69fa      	ldr	r2, [r7, #28]
 8002b90:	f002 0203 	and.w	r2, r2, #3
 8002b94:	0092      	lsls	r2, r2, #2
 8002b96:	4093      	lsls	r3, r2
 8002b98:	69ba      	ldr	r2, [r7, #24]
 8002b9a:	4313      	orrs	r3, r2
 8002b9c:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8002b9e:	4938      	ldr	r1, [pc, #224]	; (8002c80 <HAL_GPIO_Init+0x34c>)
 8002ba0:	69fb      	ldr	r3, [r7, #28]
 8002ba2:	089b      	lsrs	r3, r3, #2
 8002ba4:	3302      	adds	r3, #2
 8002ba6:	69ba      	ldr	r2, [r7, #24]
 8002ba8:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
 8002bac:	697b      	ldr	r3, [r7, #20]
 8002bae:	681b      	ldr	r3, [r3, #0]
 8002bb0:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8002bb2:	693b      	ldr	r3, [r7, #16]
 8002bb4:	43db      	mvns	r3, r3
 8002bb6:	69ba      	ldr	r2, [r7, #24]
 8002bb8:	4013      	ands	r3, r2
 8002bba:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8002bbc:	683b      	ldr	r3, [r7, #0]
 8002bbe:	685b      	ldr	r3, [r3, #4]
 8002bc0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002bc4:	2b00      	cmp	r3, #0
 8002bc6:	d003      	beq.n	8002bd0 <HAL_GPIO_Init+0x29c>
        {
          temp |= iocurrent;
 8002bc8:	69ba      	ldr	r2, [r7, #24]
 8002bca:	693b      	ldr	r3, [r7, #16]
 8002bcc:	4313      	orrs	r3, r2
 8002bce:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->IMR1 = temp;
 8002bd0:	697b      	ldr	r3, [r7, #20]
 8002bd2:	69ba      	ldr	r2, [r7, #24]
 8002bd4:	601a      	str	r2, [r3, #0]

        temp = EXTI_CurrentCPU->EMR1;
 8002bd6:	697b      	ldr	r3, [r7, #20]
 8002bd8:	685b      	ldr	r3, [r3, #4]
 8002bda:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8002bdc:	693b      	ldr	r3, [r7, #16]
 8002bde:	43db      	mvns	r3, r3
 8002be0:	69ba      	ldr	r2, [r7, #24]
 8002be2:	4013      	ands	r3, r2
 8002be4:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8002be6:	683b      	ldr	r3, [r7, #0]
 8002be8:	685b      	ldr	r3, [r3, #4]
 8002bea:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002bee:	2b00      	cmp	r3, #0
 8002bf0:	d003      	beq.n	8002bfa <HAL_GPIO_Init+0x2c6>
        {
          temp |= iocurrent;
 8002bf2:	69ba      	ldr	r2, [r7, #24]
 8002bf4:	693b      	ldr	r3, [r7, #16]
 8002bf6:	4313      	orrs	r3, r2
 8002bf8:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->EMR1 = temp;
 8002bfa:	697b      	ldr	r3, [r7, #20]
 8002bfc:	69ba      	ldr	r2, [r7, #24]
 8002bfe:	605a      	str	r2, [r3, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8002c00:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002c04:	681b      	ldr	r3, [r3, #0]
 8002c06:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8002c08:	693b      	ldr	r3, [r7, #16]
 8002c0a:	43db      	mvns	r3, r3
 8002c0c:	69ba      	ldr	r2, [r7, #24]
 8002c0e:	4013      	ands	r3, r2
 8002c10:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8002c12:	683b      	ldr	r3, [r7, #0]
 8002c14:	685b      	ldr	r3, [r3, #4]
 8002c16:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002c1a:	2b00      	cmp	r3, #0
 8002c1c:	d003      	beq.n	8002c26 <HAL_GPIO_Init+0x2f2>
        {
          temp |= iocurrent;
 8002c1e:	69ba      	ldr	r2, [r7, #24]
 8002c20:	693b      	ldr	r3, [r7, #16]
 8002c22:	4313      	orrs	r3, r2
 8002c24:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR1 = temp;
 8002c26:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8002c2a:	69bb      	ldr	r3, [r7, #24]
 8002c2c:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 8002c2e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002c32:	685b      	ldr	r3, [r3, #4]
 8002c34:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8002c36:	693b      	ldr	r3, [r7, #16]
 8002c38:	43db      	mvns	r3, r3
 8002c3a:	69ba      	ldr	r2, [r7, #24]
 8002c3c:	4013      	ands	r3, r2
 8002c3e:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8002c40:	683b      	ldr	r3, [r7, #0]
 8002c42:	685b      	ldr	r3, [r3, #4]
 8002c44:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002c48:	2b00      	cmp	r3, #0
 8002c4a:	d003      	beq.n	8002c54 <HAL_GPIO_Init+0x320>
        {
          temp |= iocurrent;
 8002c4c:	69ba      	ldr	r2, [r7, #24]
 8002c4e:	693b      	ldr	r3, [r7, #16]
 8002c50:	4313      	orrs	r3, r2
 8002c52:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR1 = temp;
 8002c54:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8002c58:	69bb      	ldr	r3, [r7, #24]
 8002c5a:	6053      	str	r3, [r2, #4]
      }
    }

    position++;
 8002c5c:	69fb      	ldr	r3, [r7, #28]
 8002c5e:	3301      	adds	r3, #1
 8002c60:	61fb      	str	r3, [r7, #28]
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8002c62:	683b      	ldr	r3, [r7, #0]
 8002c64:	681a      	ldr	r2, [r3, #0]
 8002c66:	69fb      	ldr	r3, [r7, #28]
 8002c68:	fa22 f303 	lsr.w	r3, r2, r3
 8002c6c:	2b00      	cmp	r3, #0
 8002c6e:	f47f ae6b 	bne.w	8002948 <HAL_GPIO_Init+0x14>
  }
}
 8002c72:	bf00      	nop
 8002c74:	bf00      	nop
 8002c76:	3724      	adds	r7, #36	; 0x24
 8002c78:	46bd      	mov	sp, r7
 8002c7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c7e:	4770      	bx	lr
 8002c80:	58000400 	.word	0x58000400

08002c84 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002c84:	b480      	push	{r7}
 8002c86:	b083      	sub	sp, #12
 8002c88:	af00      	add	r7, sp, #0
 8002c8a:	6078      	str	r0, [r7, #4]
 8002c8c:	460b      	mov	r3, r1
 8002c8e:	807b      	strh	r3, [r7, #2]
 8002c90:	4613      	mov	r3, r2
 8002c92:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8002c94:	787b      	ldrb	r3, [r7, #1]
 8002c96:	2b00      	cmp	r3, #0
 8002c98:	d003      	beq.n	8002ca2 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8002c9a:	887a      	ldrh	r2, [r7, #2]
 8002c9c:	687b      	ldr	r3, [r7, #4]
 8002c9e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
  }
}
 8002ca0:	e003      	b.n	8002caa <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 8002ca2:	887b      	ldrh	r3, [r7, #2]
 8002ca4:	041a      	lsls	r2, r3, #16
 8002ca6:	687b      	ldr	r3, [r7, #4]
 8002ca8:	619a      	str	r2, [r3, #24]
}
 8002caa:	bf00      	nop
 8002cac:	370c      	adds	r7, #12
 8002cae:	46bd      	mov	sp, r7
 8002cb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cb4:	4770      	bx	lr
	...

08002cb8 <HAL_NOR_Init>:
  * @param  ExtTiming pointer to NOR extended mode timing structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_NOR_Init(NOR_HandleTypeDef *hnor, FMC_NORSRAM_TimingTypeDef *Timing,
                               FMC_NORSRAM_TimingTypeDef *ExtTiming)
{
 8002cb8:	b580      	push	{r7, lr}
 8002cba:	b086      	sub	sp, #24
 8002cbc:	af00      	add	r7, sp, #0
 8002cbe:	60f8      	str	r0, [r7, #12]
 8002cc0:	60b9      	str	r1, [r7, #8]
 8002cc2:	607a      	str	r2, [r7, #4]
  uint32_t deviceaddress;

  /* Check the NOR handle parameter */
  if (hnor == NULL)
 8002cc4:	68fb      	ldr	r3, [r7, #12]
 8002cc6:	2b00      	cmp	r3, #0
 8002cc8:	d101      	bne.n	8002cce <HAL_NOR_Init+0x16>
  {
    return HAL_ERROR;
 8002cca:	2301      	movs	r3, #1
 8002ccc:	e083      	b.n	8002dd6 <HAL_NOR_Init+0x11e>
  }

  if (hnor->State == HAL_NOR_STATE_RESET)
 8002cce:	68fb      	ldr	r3, [r7, #12]
 8002cd0:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8002cd4:	b2db      	uxtb	r3, r3
 8002cd6:	2b00      	cmp	r3, #0
 8002cd8:	d106      	bne.n	8002ce8 <HAL_NOR_Init+0x30>
  {
    /* Allocate lock resource and initialize it */
    hnor->Lock = HAL_UNLOCKED;
 8002cda:	68fb      	ldr	r3, [r7, #12]
 8002cdc:	2200      	movs	r2, #0
 8002cde:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44

    /* Init the low level hardware */
    hnor->MspInitCallback(hnor);
#else
    /* Initialize the low level hardware (MSP) */
    HAL_NOR_MspInit(hnor);
 8002ce2:	68f8      	ldr	r0, [r7, #12]
 8002ce4:	f7fe fa14 	bl	8001110 <HAL_NOR_MspInit>
#endif /* (USE_HAL_NOR_REGISTER_CALLBACKS) */
  }

  /* Initialize NOR control Interface */
  (void)FMC_NORSRAM_Init(hnor->Instance, &(hnor->Init));
 8002ce8:	68fb      	ldr	r3, [r7, #12]
 8002cea:	681a      	ldr	r2, [r3, #0]
 8002cec:	68fb      	ldr	r3, [r7, #12]
 8002cee:	3308      	adds	r3, #8
 8002cf0:	4619      	mov	r1, r3
 8002cf2:	4610      	mov	r0, r2
 8002cf4:	f004 f8e6 	bl	8006ec4 <FMC_NORSRAM_Init>

  /* Initialize NOR timing Interface */
  (void)FMC_NORSRAM_Timing_Init(hnor->Instance, Timing, hnor->Init.NSBank);
 8002cf8:	68fb      	ldr	r3, [r7, #12]
 8002cfa:	6818      	ldr	r0, [r3, #0]
 8002cfc:	68fb      	ldr	r3, [r7, #12]
 8002cfe:	689b      	ldr	r3, [r3, #8]
 8002d00:	461a      	mov	r2, r3
 8002d02:	68b9      	ldr	r1, [r7, #8]
 8002d04:	f004 f96e 	bl	8006fe4 <FMC_NORSRAM_Timing_Init>

  /* Initialize NOR extended mode timing Interface */
  (void)FMC_NORSRAM_Extended_Timing_Init(hnor->Extended, ExtTiming, hnor->Init.NSBank, hnor->Init.ExtendedMode);
 8002d08:	68fb      	ldr	r3, [r7, #12]
 8002d0a:	6858      	ldr	r0, [r3, #4]
 8002d0c:	68fb      	ldr	r3, [r7, #12]
 8002d0e:	689a      	ldr	r2, [r3, #8]
 8002d10:	68fb      	ldr	r3, [r7, #12]
 8002d12:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002d14:	6879      	ldr	r1, [r7, #4]
 8002d16:	f004 f9b5 	bl	8007084 <FMC_NORSRAM_Extended_Timing_Init>

  /* Enable the NORSRAM device */
  __FMC_NORSRAM_ENABLE(hnor->Instance, hnor->Init.NSBank);
 8002d1a:	68fb      	ldr	r3, [r7, #12]
 8002d1c:	681b      	ldr	r3, [r3, #0]
 8002d1e:	68fa      	ldr	r2, [r7, #12]
 8002d20:	6892      	ldr	r2, [r2, #8]
 8002d22:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8002d26:	68fb      	ldr	r3, [r7, #12]
 8002d28:	681b      	ldr	r3, [r3, #0]
 8002d2a:	68fa      	ldr	r2, [r7, #12]
 8002d2c:	6892      	ldr	r2, [r2, #8]
 8002d2e:	f041 0101 	orr.w	r1, r1, #1
 8002d32:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

  /* Initialize NOR Memory Data Width*/
  if (hnor->Init.MemoryDataWidth == FMC_NORSRAM_MEM_BUS_WIDTH_8)
 8002d36:	68fb      	ldr	r3, [r7, #12]
 8002d38:	695b      	ldr	r3, [r3, #20]
 8002d3a:	2b00      	cmp	r3, #0
 8002d3c:	d103      	bne.n	8002d46 <HAL_NOR_Init+0x8e>
  {
    uwNORMemoryDataWidth = NOR_MEMORY_8B;
 8002d3e:	4b28      	ldr	r3, [pc, #160]	; (8002de0 <HAL_NOR_Init+0x128>)
 8002d40:	2200      	movs	r2, #0
 8002d42:	601a      	str	r2, [r3, #0]
 8002d44:	e002      	b.n	8002d4c <HAL_NOR_Init+0x94>
  }
  else
  {
    uwNORMemoryDataWidth = NOR_MEMORY_16B;
 8002d46:	4b26      	ldr	r3, [pc, #152]	; (8002de0 <HAL_NOR_Init+0x128>)
 8002d48:	2201      	movs	r2, #1
 8002d4a:	601a      	str	r2, [r3, #0]
  }

  /* Enable FMC Peripheral */
  __FMC_ENABLE();
 8002d4c:	4b25      	ldr	r3, [pc, #148]	; (8002de4 <HAL_NOR_Init+0x12c>)
 8002d4e:	681b      	ldr	r3, [r3, #0]
 8002d50:	4a24      	ldr	r2, [pc, #144]	; (8002de4 <HAL_NOR_Init+0x12c>)
 8002d52:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8002d56:	6013      	str	r3, [r2, #0]

  /* Initialize the NOR controller state */
  hnor->State = HAL_NOR_STATE_READY;
 8002d58:	68fb      	ldr	r3, [r7, #12]
 8002d5a:	2201      	movs	r2, #1
 8002d5c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Select the NOR device address */
  if (hnor->Init.NSBank == FMC_NORSRAM_BANK1)
 8002d60:	68fb      	ldr	r3, [r7, #12]
 8002d62:	689b      	ldr	r3, [r3, #8]
 8002d64:	2b00      	cmp	r3, #0
 8002d66:	d103      	bne.n	8002d70 <HAL_NOR_Init+0xb8>
  {
    deviceaddress = NOR_MEMORY_ADRESS1;
 8002d68:	f04f 43c0 	mov.w	r3, #1610612736	; 0x60000000
 8002d6c:	617b      	str	r3, [r7, #20]
 8002d6e:	e012      	b.n	8002d96 <HAL_NOR_Init+0xde>
  }
  else if (hnor->Init.NSBank == FMC_NORSRAM_BANK2)
 8002d70:	68fb      	ldr	r3, [r7, #12]
 8002d72:	689b      	ldr	r3, [r3, #8]
 8002d74:	2b02      	cmp	r3, #2
 8002d76:	d103      	bne.n	8002d80 <HAL_NOR_Init+0xc8>
  {
    deviceaddress = NOR_MEMORY_ADRESS2;
 8002d78:	f04f 43c8 	mov.w	r3, #1677721600	; 0x64000000
 8002d7c:	617b      	str	r3, [r7, #20]
 8002d7e:	e00a      	b.n	8002d96 <HAL_NOR_Init+0xde>
  }
  else if (hnor->Init.NSBank == FMC_NORSRAM_BANK3)
 8002d80:	68fb      	ldr	r3, [r7, #12]
 8002d82:	689b      	ldr	r3, [r3, #8]
 8002d84:	2b04      	cmp	r3, #4
 8002d86:	d103      	bne.n	8002d90 <HAL_NOR_Init+0xd8>
  {
    deviceaddress = NOR_MEMORY_ADRESS3;
 8002d88:	f04f 43d0 	mov.w	r3, #1744830464	; 0x68000000
 8002d8c:	617b      	str	r3, [r7, #20]
 8002d8e:	e002      	b.n	8002d96 <HAL_NOR_Init+0xde>
  }
  else /* FMC_NORSRAM_BANK4 */
  {
    deviceaddress = NOR_MEMORY_ADRESS4;
 8002d90:	f04f 43d8 	mov.w	r3, #1811939328	; 0x6c000000
 8002d94:	617b      	str	r3, [r7, #20]
  }

  /* Get the value of the command set */
  NOR_WRITE(NOR_ADDR_SHIFT(deviceaddress, uwNORMemoryDataWidth, NOR_CMD_ADDRESS_FIRST_CFI), NOR_CMD_DATA_CFI);
 8002d96:	4b12      	ldr	r3, [pc, #72]	; (8002de0 <HAL_NOR_Init+0x128>)
 8002d98:	681b      	ldr	r3, [r3, #0]
 8002d9a:	2b01      	cmp	r3, #1
 8002d9c:	d102      	bne.n	8002da4 <HAL_NOR_Init+0xec>
 8002d9e:	697b      	ldr	r3, [r7, #20]
 8002da0:	33aa      	adds	r3, #170	; 0xaa
 8002da2:	e001      	b.n	8002da8 <HAL_NOR_Init+0xf0>
 8002da4:	697b      	ldr	r3, [r7, #20]
 8002da6:	3355      	adds	r3, #85	; 0x55
 8002da8:	2298      	movs	r2, #152	; 0x98
 8002daa:	801a      	strh	r2, [r3, #0]
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 8002dac:	f3bf 8f4f 	dsb	sy
}
 8002db0:	bf00      	nop
  hnor->CommandSet = *(__IO uint16_t *) NOR_ADDR_SHIFT(deviceaddress, uwNORMemoryDataWidth, NOR_ADDRESS_COMMAND_SET);
 8002db2:	4b0b      	ldr	r3, [pc, #44]	; (8002de0 <HAL_NOR_Init+0x128>)
 8002db4:	681b      	ldr	r3, [r3, #0]
 8002db6:	2b01      	cmp	r3, #1
 8002db8:	d102      	bne.n	8002dc0 <HAL_NOR_Init+0x108>
 8002dba:	697b      	ldr	r3, [r7, #20]
 8002dbc:	3326      	adds	r3, #38	; 0x26
 8002dbe:	e001      	b.n	8002dc4 <HAL_NOR_Init+0x10c>
 8002dc0:	697b      	ldr	r3, [r7, #20]
 8002dc2:	3313      	adds	r3, #19
 8002dc4:	881b      	ldrh	r3, [r3, #0]
 8002dc6:	b29b      	uxth	r3, r3
 8002dc8:	461a      	mov	r2, r3
 8002dca:	68fb      	ldr	r3, [r7, #12]
 8002dcc:	649a      	str	r2, [r3, #72]	; 0x48

  return HAL_NOR_ReturnToReadMode(hnor);
 8002dce:	68f8      	ldr	r0, [r7, #12]
 8002dd0:	f000 f80a 	bl	8002de8 <HAL_NOR_ReturnToReadMode>
 8002dd4:	4603      	mov	r3, r0
}
 8002dd6:	4618      	mov	r0, r3
 8002dd8:	3718      	adds	r7, #24
 8002dda:	46bd      	mov	sp, r7
 8002ddc:	bd80      	pop	{r7, pc}
 8002dde:	bf00      	nop
 8002de0:	200000f0 	.word	0x200000f0
 8002de4:	52004000 	.word	0x52004000

08002de8 <HAL_NOR_ReturnToReadMode>:
  * @param  hnor pointer to a NOR_HandleTypeDef structure that contains
  *                the configuration information for NOR module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_NOR_ReturnToReadMode(NOR_HandleTypeDef *hnor)
{
 8002de8:	b480      	push	{r7}
 8002dea:	b085      	sub	sp, #20
 8002dec:	af00      	add	r7, sp, #0
 8002dee:	6078      	str	r0, [r7, #4]
  uint32_t deviceaddress;
  HAL_NOR_StateTypeDef state;
  HAL_StatusTypeDef status = HAL_OK;
 8002df0:	2300      	movs	r3, #0
 8002df2:	72fb      	strb	r3, [r7, #11]

  /* Check the NOR controller state */
  state = hnor->State;
 8002df4:	687b      	ldr	r3, [r7, #4]
 8002df6:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8002dfa:	72bb      	strb	r3, [r7, #10]
  if (state == HAL_NOR_STATE_BUSY)
 8002dfc:	7abb      	ldrb	r3, [r7, #10]
 8002dfe:	2b02      	cmp	r3, #2
 8002e00:	d101      	bne.n	8002e06 <HAL_NOR_ReturnToReadMode+0x1e>
  {
    return HAL_BUSY;
 8002e02:	2302      	movs	r3, #2
 8002e04:	e050      	b.n	8002ea8 <HAL_NOR_ReturnToReadMode+0xc0>
  }
  else if ((state == HAL_NOR_STATE_READY) || (state == HAL_NOR_STATE_PROTECTED))
 8002e06:	7abb      	ldrb	r3, [r7, #10]
 8002e08:	2b01      	cmp	r3, #1
 8002e0a:	d002      	beq.n	8002e12 <HAL_NOR_ReturnToReadMode+0x2a>
 8002e0c:	7abb      	ldrb	r3, [r7, #10]
 8002e0e:	2b04      	cmp	r3, #4
 8002e10:	d149      	bne.n	8002ea6 <HAL_NOR_ReturnToReadMode+0xbe>
  {
    /* Process Locked */
    __HAL_LOCK(hnor);
 8002e12:	687b      	ldr	r3, [r7, #4]
 8002e14:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8002e18:	2b01      	cmp	r3, #1
 8002e1a:	d101      	bne.n	8002e20 <HAL_NOR_ReturnToReadMode+0x38>
 8002e1c:	2302      	movs	r3, #2
 8002e1e:	e043      	b.n	8002ea8 <HAL_NOR_ReturnToReadMode+0xc0>
 8002e20:	687b      	ldr	r3, [r7, #4]
 8002e22:	2201      	movs	r2, #1
 8002e24:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44

    /* Update the NOR controller state */
    hnor->State = HAL_NOR_STATE_BUSY;
 8002e28:	687b      	ldr	r3, [r7, #4]
 8002e2a:	2202      	movs	r2, #2
 8002e2c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

    /* Select the NOR device address */
    if (hnor->Init.NSBank == FMC_NORSRAM_BANK1)
 8002e30:	687b      	ldr	r3, [r7, #4]
 8002e32:	689b      	ldr	r3, [r3, #8]
 8002e34:	2b00      	cmp	r3, #0
 8002e36:	d103      	bne.n	8002e40 <HAL_NOR_ReturnToReadMode+0x58>
    {
      deviceaddress = NOR_MEMORY_ADRESS1;
 8002e38:	f04f 43c0 	mov.w	r3, #1610612736	; 0x60000000
 8002e3c:	60fb      	str	r3, [r7, #12]
 8002e3e:	e012      	b.n	8002e66 <HAL_NOR_ReturnToReadMode+0x7e>
    }
    else if (hnor->Init.NSBank == FMC_NORSRAM_BANK2)
 8002e40:	687b      	ldr	r3, [r7, #4]
 8002e42:	689b      	ldr	r3, [r3, #8]
 8002e44:	2b02      	cmp	r3, #2
 8002e46:	d103      	bne.n	8002e50 <HAL_NOR_ReturnToReadMode+0x68>
    {
      deviceaddress = NOR_MEMORY_ADRESS2;
 8002e48:	f04f 43c8 	mov.w	r3, #1677721600	; 0x64000000
 8002e4c:	60fb      	str	r3, [r7, #12]
 8002e4e:	e00a      	b.n	8002e66 <HAL_NOR_ReturnToReadMode+0x7e>
    }
    else if (hnor->Init.NSBank == FMC_NORSRAM_BANK3)
 8002e50:	687b      	ldr	r3, [r7, #4]
 8002e52:	689b      	ldr	r3, [r3, #8]
 8002e54:	2b04      	cmp	r3, #4
 8002e56:	d103      	bne.n	8002e60 <HAL_NOR_ReturnToReadMode+0x78>
    {
      deviceaddress = NOR_MEMORY_ADRESS3;
 8002e58:	f04f 43d0 	mov.w	r3, #1744830464	; 0x68000000
 8002e5c:	60fb      	str	r3, [r7, #12]
 8002e5e:	e002      	b.n	8002e66 <HAL_NOR_ReturnToReadMode+0x7e>
    }
    else /* FMC_NORSRAM_BANK4 */
    {
      deviceaddress = NOR_MEMORY_ADRESS4;
 8002e60:	f04f 43d8 	mov.w	r3, #1811939328	; 0x6c000000
 8002e64:	60fb      	str	r3, [r7, #12]
    }

    if (hnor->CommandSet == NOR_AMD_FUJITSU_COMMAND_SET)
 8002e66:	687b      	ldr	r3, [r7, #4]
 8002e68:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002e6a:	2b02      	cmp	r3, #2
 8002e6c:	d105      	bne.n	8002e7a <HAL_NOR_ReturnToReadMode+0x92>
    {
      NOR_WRITE(deviceaddress, NOR_CMD_DATA_READ_RESET);
 8002e6e:	68fb      	ldr	r3, [r7, #12]
 8002e70:	22f0      	movs	r2, #240	; 0xf0
 8002e72:	801a      	strh	r2, [r3, #0]
  __ASM volatile ("dsb 0xF":::"memory");
 8002e74:	f3bf 8f4f 	dsb	sy
}
 8002e78:	e00b      	b.n	8002e92 <HAL_NOR_ReturnToReadMode+0xaa>
    }
    else if (hnor->CommandSet == NOR_INTEL_SHARP_EXT_COMMAND_SET)
 8002e7a:	687b      	ldr	r3, [r7, #4]
 8002e7c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002e7e:	2b01      	cmp	r3, #1
 8002e80:	d105      	bne.n	8002e8e <HAL_NOR_ReturnToReadMode+0xa6>
    {
      NOR_WRITE(deviceaddress, NOR_CMD_READ_ARRAY);
 8002e82:	68fb      	ldr	r3, [r7, #12]
 8002e84:	22ff      	movs	r2, #255	; 0xff
 8002e86:	801a      	strh	r2, [r3, #0]
  __ASM volatile ("dsb 0xF":::"memory");
 8002e88:	f3bf 8f4f 	dsb	sy
}
 8002e8c:	e001      	b.n	8002e92 <HAL_NOR_ReturnToReadMode+0xaa>
    }
    else
    {
      /* Primary command set not supported by the driver */
      status = HAL_ERROR;
 8002e8e:	2301      	movs	r3, #1
 8002e90:	72fb      	strb	r3, [r7, #11]
    }

    /* Check the NOR controller state */
    hnor->State = state;
 8002e92:	687b      	ldr	r3, [r7, #4]
 8002e94:	7aba      	ldrb	r2, [r7, #10]
 8002e96:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

    /* Process unlocked */
    __HAL_UNLOCK(hnor);
 8002e9a:	687b      	ldr	r3, [r7, #4]
 8002e9c:	2200      	movs	r2, #0
 8002e9e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  else
  {
    return HAL_ERROR;
  }

  return status;
 8002ea2:	7afb      	ldrb	r3, [r7, #11]
 8002ea4:	e000      	b.n	8002ea8 <HAL_NOR_ReturnToReadMode+0xc0>
    return HAL_ERROR;
 8002ea6:	2301      	movs	r3, #1
}
 8002ea8:	4618      	mov	r0, r3
 8002eaa:	3714      	adds	r7, #20
 8002eac:	46bd      	mov	sp, r7
 8002eae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002eb2:	4770      	bx	lr

08002eb4 <HAL_PWREx_ConfigSupply>:
  *         PWR_SMPS_2V5_SUPPLIES_EXT are used only for lines that supports SMPS
  *         regulator.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply (uint32_t SupplySource)
{
 8002eb4:	b580      	push	{r7, lr}
 8002eb6:	b084      	sub	sp, #16
 8002eb8:	af00      	add	r7, sp, #0
 8002eba:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param (IS_PWR_SUPPLY (SupplySource));

  /* Check if supply source was configured */
#if defined (PWR_FLAG_SCUEN)
  if (__HAL_PWR_GET_FLAG (PWR_FLAG_SCUEN) == 0U)
 8002ebc:	4b19      	ldr	r3, [pc, #100]	; (8002f24 <HAL_PWREx_ConfigSupply+0x70>)
 8002ebe:	68db      	ldr	r3, [r3, #12]
 8002ec0:	f003 0304 	and.w	r3, r3, #4
 8002ec4:	2b04      	cmp	r3, #4
 8002ec6:	d00a      	beq.n	8002ede <HAL_PWREx_ConfigSupply+0x2a>
#else
  if ((PWR->CR3 & (PWR_CR3_SMPSEN | PWR_CR3_LDOEN | PWR_CR3_BYPASS)) != (PWR_CR3_SMPSEN | PWR_CR3_LDOEN))
#endif /* defined (PWR_FLAG_SCUEN) */
  {
    /* Check supply configuration */
    if ((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
 8002ec8:	4b16      	ldr	r3, [pc, #88]	; (8002f24 <HAL_PWREx_ConfigSupply+0x70>)
 8002eca:	68db      	ldr	r3, [r3, #12]
 8002ecc:	f003 0307 	and.w	r3, r3, #7
 8002ed0:	687a      	ldr	r2, [r7, #4]
 8002ed2:	429a      	cmp	r2, r3
 8002ed4:	d001      	beq.n	8002eda <HAL_PWREx_ConfigSupply+0x26>
    {
      /* Supply configuration update locked, can't apply a new supply config */
      return HAL_ERROR;
 8002ed6:	2301      	movs	r3, #1
 8002ed8:	e01f      	b.n	8002f1a <HAL_PWREx_ConfigSupply+0x66>
    else
    {
      /* Supply configuration update locked, but new supply configuration
         matches with old supply configuration : nothing to do
      */
      return HAL_OK;
 8002eda:	2300      	movs	r3, #0
 8002edc:	e01d      	b.n	8002f1a <HAL_PWREx_ConfigSupply+0x66>
    }
  }

  /* Set the power supply configuration */
  MODIFY_REG (PWR->CR3, PWR_SUPPLY_CONFIG_MASK, SupplySource);
 8002ede:	4b11      	ldr	r3, [pc, #68]	; (8002f24 <HAL_PWREx_ConfigSupply+0x70>)
 8002ee0:	68db      	ldr	r3, [r3, #12]
 8002ee2:	f023 0207 	bic.w	r2, r3, #7
 8002ee6:	490f      	ldr	r1, [pc, #60]	; (8002f24 <HAL_PWREx_ConfigSupply+0x70>)
 8002ee8:	687b      	ldr	r3, [r7, #4]
 8002eea:	4313      	orrs	r3, r2
 8002eec:	60cb      	str	r3, [r1, #12]

  /* Get tick */
  tickstart = HAL_GetTick ();
 8002eee:	f7fe fa79 	bl	80013e4 <HAL_GetTick>
 8002ef2:	60f8      	str	r0, [r7, #12]

  /* Wait till voltage level flag is set */
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8002ef4:	e009      	b.n	8002f0a <HAL_PWREx_ConfigSupply+0x56>
  {
    if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 8002ef6:	f7fe fa75 	bl	80013e4 <HAL_GetTick>
 8002efa:	4602      	mov	r2, r0
 8002efc:	68fb      	ldr	r3, [r7, #12]
 8002efe:	1ad3      	subs	r3, r2, r3
 8002f00:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8002f04:	d901      	bls.n	8002f0a <HAL_PWREx_ConfigSupply+0x56>
    {
      return HAL_ERROR;
 8002f06:	2301      	movs	r3, #1
 8002f08:	e007      	b.n	8002f1a <HAL_PWREx_ConfigSupply+0x66>
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8002f0a:	4b06      	ldr	r3, [pc, #24]	; (8002f24 <HAL_PWREx_ConfigSupply+0x70>)
 8002f0c:	685b      	ldr	r3, [r3, #4]
 8002f0e:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8002f12:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002f16:	d1ee      	bne.n	8002ef6 <HAL_PWREx_ConfigSupply+0x42>
      }
    }
  }
#endif /* defined (SMPS) */

  return HAL_OK;
 8002f18:	2300      	movs	r3, #0
}
 8002f1a:	4618      	mov	r0, r3
 8002f1c:	3710      	adds	r7, #16
 8002f1e:	46bd      	mov	sp, r7
 8002f20:	bd80      	pop	{r7, pc}
 8002f22:	bf00      	nop
 8002f24:	58024800 	.word	0x58024800

08002f28 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002f28:	b580      	push	{r7, lr}
 8002f2a:	b08c      	sub	sp, #48	; 0x30
 8002f2c:	af00      	add	r7, sp, #0
 8002f2e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp1_pllckcfg, temp2_pllckcfg;

    /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8002f30:	687b      	ldr	r3, [r7, #4]
 8002f32:	2b00      	cmp	r3, #0
 8002f34:	d101      	bne.n	8002f3a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002f36:	2301      	movs	r3, #1
 8002f38:	e37a      	b.n	8003630 <HAL_RCC_OscConfig+0x708>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002f3a:	687b      	ldr	r3, [r7, #4]
 8002f3c:	681b      	ldr	r3, [r3, #0]
 8002f3e:	f003 0301 	and.w	r3, r3, #1
 8002f42:	2b00      	cmp	r3, #0
 8002f44:	f000 8087 	beq.w	8003056 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002f48:	4ba0      	ldr	r3, [pc, #640]	; (80031cc <HAL_RCC_OscConfig+0x2a4>)
 8002f4a:	691b      	ldr	r3, [r3, #16]
 8002f4c:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8002f50:	62fb      	str	r3, [r7, #44]	; 0x2c
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8002f52:	4b9e      	ldr	r3, [pc, #632]	; (80031cc <HAL_RCC_OscConfig+0x2a4>)
 8002f54:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002f56:	62bb      	str	r3, [r7, #40]	; 0x28
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 8002f58:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002f5a:	2b10      	cmp	r3, #16
 8002f5c:	d007      	beq.n	8002f6e <HAL_RCC_OscConfig+0x46>
 8002f5e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002f60:	2b18      	cmp	r3, #24
 8002f62:	d110      	bne.n	8002f86 <HAL_RCC_OscConfig+0x5e>
 8002f64:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002f66:	f003 0303 	and.w	r3, r3, #3
 8002f6a:	2b02      	cmp	r3, #2
 8002f6c:	d10b      	bne.n	8002f86 <HAL_RCC_OscConfig+0x5e>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002f6e:	4b97      	ldr	r3, [pc, #604]	; (80031cc <HAL_RCC_OscConfig+0x2a4>)
 8002f70:	681b      	ldr	r3, [r3, #0]
 8002f72:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002f76:	2b00      	cmp	r3, #0
 8002f78:	d06c      	beq.n	8003054 <HAL_RCC_OscConfig+0x12c>
 8002f7a:	687b      	ldr	r3, [r7, #4]
 8002f7c:	685b      	ldr	r3, [r3, #4]
 8002f7e:	2b00      	cmp	r3, #0
 8002f80:	d168      	bne.n	8003054 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8002f82:	2301      	movs	r3, #1
 8002f84:	e354      	b.n	8003630 <HAL_RCC_OscConfig+0x708>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002f86:	687b      	ldr	r3, [r7, #4]
 8002f88:	685b      	ldr	r3, [r3, #4]
 8002f8a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002f8e:	d106      	bne.n	8002f9e <HAL_RCC_OscConfig+0x76>
 8002f90:	4b8e      	ldr	r3, [pc, #568]	; (80031cc <HAL_RCC_OscConfig+0x2a4>)
 8002f92:	681b      	ldr	r3, [r3, #0]
 8002f94:	4a8d      	ldr	r2, [pc, #564]	; (80031cc <HAL_RCC_OscConfig+0x2a4>)
 8002f96:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002f9a:	6013      	str	r3, [r2, #0]
 8002f9c:	e02e      	b.n	8002ffc <HAL_RCC_OscConfig+0xd4>
 8002f9e:	687b      	ldr	r3, [r7, #4]
 8002fa0:	685b      	ldr	r3, [r3, #4]
 8002fa2:	2b00      	cmp	r3, #0
 8002fa4:	d10c      	bne.n	8002fc0 <HAL_RCC_OscConfig+0x98>
 8002fa6:	4b89      	ldr	r3, [pc, #548]	; (80031cc <HAL_RCC_OscConfig+0x2a4>)
 8002fa8:	681b      	ldr	r3, [r3, #0]
 8002faa:	4a88      	ldr	r2, [pc, #544]	; (80031cc <HAL_RCC_OscConfig+0x2a4>)
 8002fac:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002fb0:	6013      	str	r3, [r2, #0]
 8002fb2:	4b86      	ldr	r3, [pc, #536]	; (80031cc <HAL_RCC_OscConfig+0x2a4>)
 8002fb4:	681b      	ldr	r3, [r3, #0]
 8002fb6:	4a85      	ldr	r2, [pc, #532]	; (80031cc <HAL_RCC_OscConfig+0x2a4>)
 8002fb8:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002fbc:	6013      	str	r3, [r2, #0]
 8002fbe:	e01d      	b.n	8002ffc <HAL_RCC_OscConfig+0xd4>
 8002fc0:	687b      	ldr	r3, [r7, #4]
 8002fc2:	685b      	ldr	r3, [r3, #4]
 8002fc4:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002fc8:	d10c      	bne.n	8002fe4 <HAL_RCC_OscConfig+0xbc>
 8002fca:	4b80      	ldr	r3, [pc, #512]	; (80031cc <HAL_RCC_OscConfig+0x2a4>)
 8002fcc:	681b      	ldr	r3, [r3, #0]
 8002fce:	4a7f      	ldr	r2, [pc, #508]	; (80031cc <HAL_RCC_OscConfig+0x2a4>)
 8002fd0:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002fd4:	6013      	str	r3, [r2, #0]
 8002fd6:	4b7d      	ldr	r3, [pc, #500]	; (80031cc <HAL_RCC_OscConfig+0x2a4>)
 8002fd8:	681b      	ldr	r3, [r3, #0]
 8002fda:	4a7c      	ldr	r2, [pc, #496]	; (80031cc <HAL_RCC_OscConfig+0x2a4>)
 8002fdc:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002fe0:	6013      	str	r3, [r2, #0]
 8002fe2:	e00b      	b.n	8002ffc <HAL_RCC_OscConfig+0xd4>
 8002fe4:	4b79      	ldr	r3, [pc, #484]	; (80031cc <HAL_RCC_OscConfig+0x2a4>)
 8002fe6:	681b      	ldr	r3, [r3, #0]
 8002fe8:	4a78      	ldr	r2, [pc, #480]	; (80031cc <HAL_RCC_OscConfig+0x2a4>)
 8002fea:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002fee:	6013      	str	r3, [r2, #0]
 8002ff0:	4b76      	ldr	r3, [pc, #472]	; (80031cc <HAL_RCC_OscConfig+0x2a4>)
 8002ff2:	681b      	ldr	r3, [r3, #0]
 8002ff4:	4a75      	ldr	r2, [pc, #468]	; (80031cc <HAL_RCC_OscConfig+0x2a4>)
 8002ff6:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002ffa:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002ffc:	687b      	ldr	r3, [r7, #4]
 8002ffe:	685b      	ldr	r3, [r3, #4]
 8003000:	2b00      	cmp	r3, #0
 8003002:	d013      	beq.n	800302c <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003004:	f7fe f9ee 	bl	80013e4 <HAL_GetTick>
 8003008:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 800300a:	e008      	b.n	800301e <HAL_RCC_OscConfig+0xf6>
        {
          if((uint32_t) (HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800300c:	f7fe f9ea 	bl	80013e4 <HAL_GetTick>
 8003010:	4602      	mov	r2, r0
 8003012:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003014:	1ad3      	subs	r3, r2, r3
 8003016:	2b64      	cmp	r3, #100	; 0x64
 8003018:	d901      	bls.n	800301e <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 800301a:	2303      	movs	r3, #3
 800301c:	e308      	b.n	8003630 <HAL_RCC_OscConfig+0x708>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 800301e:	4b6b      	ldr	r3, [pc, #428]	; (80031cc <HAL_RCC_OscConfig+0x2a4>)
 8003020:	681b      	ldr	r3, [r3, #0]
 8003022:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003026:	2b00      	cmp	r3, #0
 8003028:	d0f0      	beq.n	800300c <HAL_RCC_OscConfig+0xe4>
 800302a:	e014      	b.n	8003056 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800302c:	f7fe f9da 	bl	80013e4 <HAL_GetTick>
 8003030:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8003032:	e008      	b.n	8003046 <HAL_RCC_OscConfig+0x11e>
        {
          if((uint32_t) (HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003034:	f7fe f9d6 	bl	80013e4 <HAL_GetTick>
 8003038:	4602      	mov	r2, r0
 800303a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800303c:	1ad3      	subs	r3, r2, r3
 800303e:	2b64      	cmp	r3, #100	; 0x64
 8003040:	d901      	bls.n	8003046 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8003042:	2303      	movs	r3, #3
 8003044:	e2f4      	b.n	8003630 <HAL_RCC_OscConfig+0x708>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8003046:	4b61      	ldr	r3, [pc, #388]	; (80031cc <HAL_RCC_OscConfig+0x2a4>)
 8003048:	681b      	ldr	r3, [r3, #0]
 800304a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800304e:	2b00      	cmp	r3, #0
 8003050:	d1f0      	bne.n	8003034 <HAL_RCC_OscConfig+0x10c>
 8003052:	e000      	b.n	8003056 <HAL_RCC_OscConfig+0x12e>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003054:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003056:	687b      	ldr	r3, [r7, #4]
 8003058:	681b      	ldr	r3, [r3, #0]
 800305a:	f003 0302 	and.w	r3, r3, #2
 800305e:	2b00      	cmp	r3, #0
 8003060:	d06d      	beq.n	800313e <HAL_RCC_OscConfig+0x216>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSICALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* When the HSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8003062:	4b5a      	ldr	r3, [pc, #360]	; (80031cc <HAL_RCC_OscConfig+0x2a4>)
 8003064:	691b      	ldr	r3, [r3, #16]
 8003066:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800306a:	623b      	str	r3, [r7, #32]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 800306c:	4b57      	ldr	r3, [pc, #348]	; (80031cc <HAL_RCC_OscConfig+0x2a4>)
 800306e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003070:	61fb      	str	r3, [r7, #28]
    if((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 8003072:	6a3b      	ldr	r3, [r7, #32]
 8003074:	2b00      	cmp	r3, #0
 8003076:	d007      	beq.n	8003088 <HAL_RCC_OscConfig+0x160>
 8003078:	6a3b      	ldr	r3, [r7, #32]
 800307a:	2b18      	cmp	r3, #24
 800307c:	d11b      	bne.n	80030b6 <HAL_RCC_OscConfig+0x18e>
 800307e:	69fb      	ldr	r3, [r7, #28]
 8003080:	f003 0303 	and.w	r3, r3, #3
 8003084:	2b00      	cmp	r3, #0
 8003086:	d116      	bne.n	80030b6 <HAL_RCC_OscConfig+0x18e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8003088:	4b50      	ldr	r3, [pc, #320]	; (80031cc <HAL_RCC_OscConfig+0x2a4>)
 800308a:	681b      	ldr	r3, [r3, #0]
 800308c:	f003 0304 	and.w	r3, r3, #4
 8003090:	2b00      	cmp	r3, #0
 8003092:	d005      	beq.n	80030a0 <HAL_RCC_OscConfig+0x178>
 8003094:	687b      	ldr	r3, [r7, #4]
 8003096:	68db      	ldr	r3, [r3, #12]
 8003098:	2b00      	cmp	r3, #0
 800309a:	d101      	bne.n	80030a0 <HAL_RCC_OscConfig+0x178>
      {
        return HAL_ERROR;
 800309c:	2301      	movs	r3, #1
 800309e:	e2c7      	b.n	8003630 <HAL_RCC_OscConfig+0x708>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80030a0:	4b4a      	ldr	r3, [pc, #296]	; (80031cc <HAL_RCC_OscConfig+0x2a4>)
 80030a2:	685b      	ldr	r3, [r3, #4]
 80030a4:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 80030a8:	687b      	ldr	r3, [r7, #4]
 80030aa:	691b      	ldr	r3, [r3, #16]
 80030ac:	061b      	lsls	r3, r3, #24
 80030ae:	4947      	ldr	r1, [pc, #284]	; (80031cc <HAL_RCC_OscConfig+0x2a4>)
 80030b0:	4313      	orrs	r3, r2
 80030b2:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80030b4:	e043      	b.n	800313e <HAL_RCC_OscConfig+0x216>
    }

    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 80030b6:	687b      	ldr	r3, [r7, #4]
 80030b8:	68db      	ldr	r3, [r3, #12]
 80030ba:	2b00      	cmp	r3, #0
 80030bc:	d026      	beq.n	800310c <HAL_RCC_OscConfig+0x1e4>
      {
     /* Enable the Internal High Speed oscillator (HSI, HSIDIV2,HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 80030be:	4b43      	ldr	r3, [pc, #268]	; (80031cc <HAL_RCC_OscConfig+0x2a4>)
 80030c0:	681b      	ldr	r3, [r3, #0]
 80030c2:	f023 0219 	bic.w	r2, r3, #25
 80030c6:	687b      	ldr	r3, [r7, #4]
 80030c8:	68db      	ldr	r3, [r3, #12]
 80030ca:	4940      	ldr	r1, [pc, #256]	; (80031cc <HAL_RCC_OscConfig+0x2a4>)
 80030cc:	4313      	orrs	r3, r2
 80030ce:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80030d0:	f7fe f988 	bl	80013e4 <HAL_GetTick>
 80030d4:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80030d6:	e008      	b.n	80030ea <HAL_RCC_OscConfig+0x1c2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80030d8:	f7fe f984 	bl	80013e4 <HAL_GetTick>
 80030dc:	4602      	mov	r2, r0
 80030de:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80030e0:	1ad3      	subs	r3, r2, r3
 80030e2:	2b02      	cmp	r3, #2
 80030e4:	d901      	bls.n	80030ea <HAL_RCC_OscConfig+0x1c2>
          {
            return HAL_TIMEOUT;
 80030e6:	2303      	movs	r3, #3
 80030e8:	e2a2      	b.n	8003630 <HAL_RCC_OscConfig+0x708>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80030ea:	4b38      	ldr	r3, [pc, #224]	; (80031cc <HAL_RCC_OscConfig+0x2a4>)
 80030ec:	681b      	ldr	r3, [r3, #0]
 80030ee:	f003 0304 	and.w	r3, r3, #4
 80030f2:	2b00      	cmp	r3, #0
 80030f4:	d0f0      	beq.n	80030d8 <HAL_RCC_OscConfig+0x1b0>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80030f6:	4b35      	ldr	r3, [pc, #212]	; (80031cc <HAL_RCC_OscConfig+0x2a4>)
 80030f8:	685b      	ldr	r3, [r3, #4]
 80030fa:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 80030fe:	687b      	ldr	r3, [r7, #4]
 8003100:	691b      	ldr	r3, [r3, #16]
 8003102:	061b      	lsls	r3, r3, #24
 8003104:	4931      	ldr	r1, [pc, #196]	; (80031cc <HAL_RCC_OscConfig+0x2a4>)
 8003106:	4313      	orrs	r3, r2
 8003108:	604b      	str	r3, [r1, #4]
 800310a:	e018      	b.n	800313e <HAL_RCC_OscConfig+0x216>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800310c:	4b2f      	ldr	r3, [pc, #188]	; (80031cc <HAL_RCC_OscConfig+0x2a4>)
 800310e:	681b      	ldr	r3, [r3, #0]
 8003110:	4a2e      	ldr	r2, [pc, #184]	; (80031cc <HAL_RCC_OscConfig+0x2a4>)
 8003112:	f023 0301 	bic.w	r3, r3, #1
 8003116:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003118:	f7fe f964 	bl	80013e4 <HAL_GetTick>
 800311c:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 800311e:	e008      	b.n	8003132 <HAL_RCC_OscConfig+0x20a>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003120:	f7fe f960 	bl	80013e4 <HAL_GetTick>
 8003124:	4602      	mov	r2, r0
 8003126:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003128:	1ad3      	subs	r3, r2, r3
 800312a:	2b02      	cmp	r3, #2
 800312c:	d901      	bls.n	8003132 <HAL_RCC_OscConfig+0x20a>
          {
            return HAL_TIMEOUT;
 800312e:	2303      	movs	r3, #3
 8003130:	e27e      	b.n	8003630 <HAL_RCC_OscConfig+0x708>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8003132:	4b26      	ldr	r3, [pc, #152]	; (80031cc <HAL_RCC_OscConfig+0x2a4>)
 8003134:	681b      	ldr	r3, [r3, #0]
 8003136:	f003 0304 	and.w	r3, r3, #4
 800313a:	2b00      	cmp	r3, #0
 800313c:	d1f0      	bne.n	8003120 <HAL_RCC_OscConfig+0x1f8>
        }
      }
    }
  }
  /*----------------------------- CSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 800313e:	687b      	ldr	r3, [r7, #4]
 8003140:	681b      	ldr	r3, [r3, #0]
 8003142:	f003 0310 	and.w	r3, r3, #16
 8003146:	2b00      	cmp	r3, #0
 8003148:	d06c      	beq.n	8003224 <HAL_RCC_OscConfig+0x2fc>
    /* Check the parameters */
    assert_param(IS_RCC_CSI(RCC_OscInitStruct->CSIState));
    assert_param(IS_RCC_CSICALIBRATION_VALUE(RCC_OscInitStruct->CSICalibrationValue));

    /* When the CSI is used as system clock it will not disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800314a:	4b20      	ldr	r3, [pc, #128]	; (80031cc <HAL_RCC_OscConfig+0x2a4>)
 800314c:	691b      	ldr	r3, [r3, #16]
 800314e:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8003152:	61bb      	str	r3, [r7, #24]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8003154:	4b1d      	ldr	r3, [pc, #116]	; (80031cc <HAL_RCC_OscConfig+0x2a4>)
 8003156:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003158:	617b      	str	r3, [r7, #20]
    if((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 800315a:	69bb      	ldr	r3, [r7, #24]
 800315c:	2b08      	cmp	r3, #8
 800315e:	d007      	beq.n	8003170 <HAL_RCC_OscConfig+0x248>
 8003160:	69bb      	ldr	r3, [r7, #24]
 8003162:	2b18      	cmp	r3, #24
 8003164:	d11b      	bne.n	800319e <HAL_RCC_OscConfig+0x276>
 8003166:	697b      	ldr	r3, [r7, #20]
 8003168:	f003 0303 	and.w	r3, r3, #3
 800316c:	2b01      	cmp	r3, #1
 800316e:	d116      	bne.n	800319e <HAL_RCC_OscConfig+0x276>
    {
      /* When CSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8003170:	4b16      	ldr	r3, [pc, #88]	; (80031cc <HAL_RCC_OscConfig+0x2a4>)
 8003172:	681b      	ldr	r3, [r3, #0]
 8003174:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003178:	2b00      	cmp	r3, #0
 800317a:	d005      	beq.n	8003188 <HAL_RCC_OscConfig+0x260>
 800317c:	687b      	ldr	r3, [r7, #4]
 800317e:	69db      	ldr	r3, [r3, #28]
 8003180:	2b80      	cmp	r3, #128	; 0x80
 8003182:	d001      	beq.n	8003188 <HAL_RCC_OscConfig+0x260>
      {
        return HAL_ERROR;
 8003184:	2301      	movs	r3, #1
 8003186:	e253      	b.n	8003630 <HAL_RCC_OscConfig+0x708>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8003188:	4b10      	ldr	r3, [pc, #64]	; (80031cc <HAL_RCC_OscConfig+0x2a4>)
 800318a:	68db      	ldr	r3, [r3, #12]
 800318c:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 8003190:	687b      	ldr	r3, [r7, #4]
 8003192:	6a1b      	ldr	r3, [r3, #32]
 8003194:	061b      	lsls	r3, r3, #24
 8003196:	490d      	ldr	r1, [pc, #52]	; (80031cc <HAL_RCC_OscConfig+0x2a4>)
 8003198:	4313      	orrs	r3, r2
 800319a:	60cb      	str	r3, [r1, #12]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 800319c:	e042      	b.n	8003224 <HAL_RCC_OscConfig+0x2fc>
      }
    }
    else
    {
      /* Check the CSI State */
      if((RCC_OscInitStruct->CSIState)!= RCC_CSI_OFF)
 800319e:	687b      	ldr	r3, [r7, #4]
 80031a0:	69db      	ldr	r3, [r3, #28]
 80031a2:	2b00      	cmp	r3, #0
 80031a4:	d025      	beq.n	80031f2 <HAL_RCC_OscConfig+0x2ca>
      {
        /* Enable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_ENABLE();
 80031a6:	4b09      	ldr	r3, [pc, #36]	; (80031cc <HAL_RCC_OscConfig+0x2a4>)
 80031a8:	681b      	ldr	r3, [r3, #0]
 80031aa:	4a08      	ldr	r2, [pc, #32]	; (80031cc <HAL_RCC_OscConfig+0x2a4>)
 80031ac:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80031b0:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80031b2:	f7fe f917 	bl	80013e4 <HAL_GetTick>
 80031b6:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 80031b8:	e00a      	b.n	80031d0 <HAL_RCC_OscConfig+0x2a8>
        {
          if((HAL_GetTick() - tickstart ) > CSI_TIMEOUT_VALUE)
 80031ba:	f7fe f913 	bl	80013e4 <HAL_GetTick>
 80031be:	4602      	mov	r2, r0
 80031c0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80031c2:	1ad3      	subs	r3, r2, r3
 80031c4:	2b02      	cmp	r3, #2
 80031c6:	d903      	bls.n	80031d0 <HAL_RCC_OscConfig+0x2a8>
          {
            return HAL_TIMEOUT;
 80031c8:	2303      	movs	r3, #3
 80031ca:	e231      	b.n	8003630 <HAL_RCC_OscConfig+0x708>
 80031cc:	58024400 	.word	0x58024400
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 80031d0:	4ba3      	ldr	r3, [pc, #652]	; (8003460 <HAL_RCC_OscConfig+0x538>)
 80031d2:	681b      	ldr	r3, [r3, #0]
 80031d4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80031d8:	2b00      	cmp	r3, #0
 80031da:	d0ee      	beq.n	80031ba <HAL_RCC_OscConfig+0x292>
          }
        }

        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 80031dc:	4ba0      	ldr	r3, [pc, #640]	; (8003460 <HAL_RCC_OscConfig+0x538>)
 80031de:	68db      	ldr	r3, [r3, #12]
 80031e0:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 80031e4:	687b      	ldr	r3, [r7, #4]
 80031e6:	6a1b      	ldr	r3, [r3, #32]
 80031e8:	061b      	lsls	r3, r3, #24
 80031ea:	499d      	ldr	r1, [pc, #628]	; (8003460 <HAL_RCC_OscConfig+0x538>)
 80031ec:	4313      	orrs	r3, r2
 80031ee:	60cb      	str	r3, [r1, #12]
 80031f0:	e018      	b.n	8003224 <HAL_RCC_OscConfig+0x2fc>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_DISABLE();
 80031f2:	4b9b      	ldr	r3, [pc, #620]	; (8003460 <HAL_RCC_OscConfig+0x538>)
 80031f4:	681b      	ldr	r3, [r3, #0]
 80031f6:	4a9a      	ldr	r2, [pc, #616]	; (8003460 <HAL_RCC_OscConfig+0x538>)
 80031f8:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80031fc:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80031fe:	f7fe f8f1 	bl	80013e4 <HAL_GetTick>
 8003202:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8003204:	e008      	b.n	8003218 <HAL_RCC_OscConfig+0x2f0>
        {
          if((HAL_GetTick() - tickstart ) > CSI_TIMEOUT_VALUE)
 8003206:	f7fe f8ed 	bl	80013e4 <HAL_GetTick>
 800320a:	4602      	mov	r2, r0
 800320c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800320e:	1ad3      	subs	r3, r2, r3
 8003210:	2b02      	cmp	r3, #2
 8003212:	d901      	bls.n	8003218 <HAL_RCC_OscConfig+0x2f0>
          {
            return HAL_TIMEOUT;
 8003214:	2303      	movs	r3, #3
 8003216:	e20b      	b.n	8003630 <HAL_RCC_OscConfig+0x708>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8003218:	4b91      	ldr	r3, [pc, #580]	; (8003460 <HAL_RCC_OscConfig+0x538>)
 800321a:	681b      	ldr	r3, [r3, #0]
 800321c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003220:	2b00      	cmp	r3, #0
 8003222:	d1f0      	bne.n	8003206 <HAL_RCC_OscConfig+0x2de>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003224:	687b      	ldr	r3, [r7, #4]
 8003226:	681b      	ldr	r3, [r3, #0]
 8003228:	f003 0308 	and.w	r3, r3, #8
 800322c:	2b00      	cmp	r3, #0
 800322e:	d036      	beq.n	800329e <HAL_RCC_OscConfig+0x376>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8003230:	687b      	ldr	r3, [r7, #4]
 8003232:	695b      	ldr	r3, [r3, #20]
 8003234:	2b00      	cmp	r3, #0
 8003236:	d019      	beq.n	800326c <HAL_RCC_OscConfig+0x344>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003238:	4b89      	ldr	r3, [pc, #548]	; (8003460 <HAL_RCC_OscConfig+0x538>)
 800323a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800323c:	4a88      	ldr	r2, [pc, #544]	; (8003460 <HAL_RCC_OscConfig+0x538>)
 800323e:	f043 0301 	orr.w	r3, r3, #1
 8003242:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003244:	f7fe f8ce 	bl	80013e4 <HAL_GetTick>
 8003248:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 800324a:	e008      	b.n	800325e <HAL_RCC_OscConfig+0x336>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800324c:	f7fe f8ca 	bl	80013e4 <HAL_GetTick>
 8003250:	4602      	mov	r2, r0
 8003252:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003254:	1ad3      	subs	r3, r2, r3
 8003256:	2b02      	cmp	r3, #2
 8003258:	d901      	bls.n	800325e <HAL_RCC_OscConfig+0x336>
        {
          return HAL_TIMEOUT;
 800325a:	2303      	movs	r3, #3
 800325c:	e1e8      	b.n	8003630 <HAL_RCC_OscConfig+0x708>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 800325e:	4b80      	ldr	r3, [pc, #512]	; (8003460 <HAL_RCC_OscConfig+0x538>)
 8003260:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003262:	f003 0302 	and.w	r3, r3, #2
 8003266:	2b00      	cmp	r3, #0
 8003268:	d0f0      	beq.n	800324c <HAL_RCC_OscConfig+0x324>
 800326a:	e018      	b.n	800329e <HAL_RCC_OscConfig+0x376>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800326c:	4b7c      	ldr	r3, [pc, #496]	; (8003460 <HAL_RCC_OscConfig+0x538>)
 800326e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003270:	4a7b      	ldr	r2, [pc, #492]	; (8003460 <HAL_RCC_OscConfig+0x538>)
 8003272:	f023 0301 	bic.w	r3, r3, #1
 8003276:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003278:	f7fe f8b4 	bl	80013e4 <HAL_GetTick>
 800327c:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 800327e:	e008      	b.n	8003292 <HAL_RCC_OscConfig+0x36a>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003280:	f7fe f8b0 	bl	80013e4 <HAL_GetTick>
 8003284:	4602      	mov	r2, r0
 8003286:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003288:	1ad3      	subs	r3, r2, r3
 800328a:	2b02      	cmp	r3, #2
 800328c:	d901      	bls.n	8003292 <HAL_RCC_OscConfig+0x36a>
        {
          return HAL_TIMEOUT;
 800328e:	2303      	movs	r3, #3
 8003290:	e1ce      	b.n	8003630 <HAL_RCC_OscConfig+0x708>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8003292:	4b73      	ldr	r3, [pc, #460]	; (8003460 <HAL_RCC_OscConfig+0x538>)
 8003294:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003296:	f003 0302 	and.w	r3, r3, #2
 800329a:	2b00      	cmp	r3, #0
 800329c:	d1f0      	bne.n	8003280 <HAL_RCC_OscConfig+0x358>
      }
    }
  }

  /*------------------------------ HSI48 Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 800329e:	687b      	ldr	r3, [r7, #4]
 80032a0:	681b      	ldr	r3, [r3, #0]
 80032a2:	f003 0320 	and.w	r3, r3, #32
 80032a6:	2b00      	cmp	r3, #0
 80032a8:	d036      	beq.n	8003318 <HAL_RCC_OscConfig+0x3f0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if((RCC_OscInitStruct->HSI48State)!= RCC_HSI48_OFF)
 80032aa:	687b      	ldr	r3, [r7, #4]
 80032ac:	699b      	ldr	r3, [r3, #24]
 80032ae:	2b00      	cmp	r3, #0
 80032b0:	d019      	beq.n	80032e6 <HAL_RCC_OscConfig+0x3be>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 80032b2:	4b6b      	ldr	r3, [pc, #428]	; (8003460 <HAL_RCC_OscConfig+0x538>)
 80032b4:	681b      	ldr	r3, [r3, #0]
 80032b6:	4a6a      	ldr	r2, [pc, #424]	; (8003460 <HAL_RCC_OscConfig+0x538>)
 80032b8:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 80032bc:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 80032be:	f7fe f891 	bl	80013e4 <HAL_GetTick>
 80032c2:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 80032c4:	e008      	b.n	80032d8 <HAL_RCC_OscConfig+0x3b0>
      {
        if((HAL_GetTick() - tickstart ) > HSI48_TIMEOUT_VALUE)
 80032c6:	f7fe f88d 	bl	80013e4 <HAL_GetTick>
 80032ca:	4602      	mov	r2, r0
 80032cc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80032ce:	1ad3      	subs	r3, r2, r3
 80032d0:	2b02      	cmp	r3, #2
 80032d2:	d901      	bls.n	80032d8 <HAL_RCC_OscConfig+0x3b0>
        {
          return HAL_TIMEOUT;
 80032d4:	2303      	movs	r3, #3
 80032d6:	e1ab      	b.n	8003630 <HAL_RCC_OscConfig+0x708>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 80032d8:	4b61      	ldr	r3, [pc, #388]	; (8003460 <HAL_RCC_OscConfig+0x538>)
 80032da:	681b      	ldr	r3, [r3, #0]
 80032dc:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80032e0:	2b00      	cmp	r3, #0
 80032e2:	d0f0      	beq.n	80032c6 <HAL_RCC_OscConfig+0x39e>
 80032e4:	e018      	b.n	8003318 <HAL_RCC_OscConfig+0x3f0>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 80032e6:	4b5e      	ldr	r3, [pc, #376]	; (8003460 <HAL_RCC_OscConfig+0x538>)
 80032e8:	681b      	ldr	r3, [r3, #0]
 80032ea:	4a5d      	ldr	r2, [pc, #372]	; (8003460 <HAL_RCC_OscConfig+0x538>)
 80032ec:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80032f0:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 80032f2:	f7fe f877 	bl	80013e4 <HAL_GetTick>
 80032f6:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 80032f8:	e008      	b.n	800330c <HAL_RCC_OscConfig+0x3e4>
      {
        if((HAL_GetTick() - tickstart ) > HSI48_TIMEOUT_VALUE)
 80032fa:	f7fe f873 	bl	80013e4 <HAL_GetTick>
 80032fe:	4602      	mov	r2, r0
 8003300:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003302:	1ad3      	subs	r3, r2, r3
 8003304:	2b02      	cmp	r3, #2
 8003306:	d901      	bls.n	800330c <HAL_RCC_OscConfig+0x3e4>
        {
          return HAL_TIMEOUT;
 8003308:	2303      	movs	r3, #3
 800330a:	e191      	b.n	8003630 <HAL_RCC_OscConfig+0x708>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 800330c:	4b54      	ldr	r3, [pc, #336]	; (8003460 <HAL_RCC_OscConfig+0x538>)
 800330e:	681b      	ldr	r3, [r3, #0]
 8003310:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8003314:	2b00      	cmp	r3, #0
 8003316:	d1f0      	bne.n	80032fa <HAL_RCC_OscConfig+0x3d2>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003318:	687b      	ldr	r3, [r7, #4]
 800331a:	681b      	ldr	r3, [r3, #0]
 800331c:	f003 0304 	and.w	r3, r3, #4
 8003320:	2b00      	cmp	r3, #0
 8003322:	f000 8081 	beq.w	8003428 <HAL_RCC_OscConfig+0x500>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8003326:	4b4f      	ldr	r3, [pc, #316]	; (8003464 <HAL_RCC_OscConfig+0x53c>)
 8003328:	681b      	ldr	r3, [r3, #0]
 800332a:	4a4e      	ldr	r2, [pc, #312]	; (8003464 <HAL_RCC_OscConfig+0x53c>)
 800332c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003330:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8003332:	f7fe f857 	bl	80013e4 <HAL_GetTick>
 8003336:	6278      	str	r0, [r7, #36]	; 0x24

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8003338:	e008      	b.n	800334c <HAL_RCC_OscConfig+0x424>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 800333a:	f7fe f853 	bl	80013e4 <HAL_GetTick>
 800333e:	4602      	mov	r2, r0
 8003340:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003342:	1ad3      	subs	r3, r2, r3
 8003344:	2b64      	cmp	r3, #100	; 0x64
 8003346:	d901      	bls.n	800334c <HAL_RCC_OscConfig+0x424>
      {
        return HAL_TIMEOUT;
 8003348:	2303      	movs	r3, #3
 800334a:	e171      	b.n	8003630 <HAL_RCC_OscConfig+0x708>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800334c:	4b45      	ldr	r3, [pc, #276]	; (8003464 <HAL_RCC_OscConfig+0x53c>)
 800334e:	681b      	ldr	r3, [r3, #0]
 8003350:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003354:	2b00      	cmp	r3, #0
 8003356:	d0f0      	beq.n	800333a <HAL_RCC_OscConfig+0x412>
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003358:	687b      	ldr	r3, [r7, #4]
 800335a:	689b      	ldr	r3, [r3, #8]
 800335c:	2b01      	cmp	r3, #1
 800335e:	d106      	bne.n	800336e <HAL_RCC_OscConfig+0x446>
 8003360:	4b3f      	ldr	r3, [pc, #252]	; (8003460 <HAL_RCC_OscConfig+0x538>)
 8003362:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003364:	4a3e      	ldr	r2, [pc, #248]	; (8003460 <HAL_RCC_OscConfig+0x538>)
 8003366:	f043 0301 	orr.w	r3, r3, #1
 800336a:	6713      	str	r3, [r2, #112]	; 0x70
 800336c:	e02d      	b.n	80033ca <HAL_RCC_OscConfig+0x4a2>
 800336e:	687b      	ldr	r3, [r7, #4]
 8003370:	689b      	ldr	r3, [r3, #8]
 8003372:	2b00      	cmp	r3, #0
 8003374:	d10c      	bne.n	8003390 <HAL_RCC_OscConfig+0x468>
 8003376:	4b3a      	ldr	r3, [pc, #232]	; (8003460 <HAL_RCC_OscConfig+0x538>)
 8003378:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800337a:	4a39      	ldr	r2, [pc, #228]	; (8003460 <HAL_RCC_OscConfig+0x538>)
 800337c:	f023 0301 	bic.w	r3, r3, #1
 8003380:	6713      	str	r3, [r2, #112]	; 0x70
 8003382:	4b37      	ldr	r3, [pc, #220]	; (8003460 <HAL_RCC_OscConfig+0x538>)
 8003384:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003386:	4a36      	ldr	r2, [pc, #216]	; (8003460 <HAL_RCC_OscConfig+0x538>)
 8003388:	f023 0304 	bic.w	r3, r3, #4
 800338c:	6713      	str	r3, [r2, #112]	; 0x70
 800338e:	e01c      	b.n	80033ca <HAL_RCC_OscConfig+0x4a2>
 8003390:	687b      	ldr	r3, [r7, #4]
 8003392:	689b      	ldr	r3, [r3, #8]
 8003394:	2b05      	cmp	r3, #5
 8003396:	d10c      	bne.n	80033b2 <HAL_RCC_OscConfig+0x48a>
 8003398:	4b31      	ldr	r3, [pc, #196]	; (8003460 <HAL_RCC_OscConfig+0x538>)
 800339a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800339c:	4a30      	ldr	r2, [pc, #192]	; (8003460 <HAL_RCC_OscConfig+0x538>)
 800339e:	f043 0304 	orr.w	r3, r3, #4
 80033a2:	6713      	str	r3, [r2, #112]	; 0x70
 80033a4:	4b2e      	ldr	r3, [pc, #184]	; (8003460 <HAL_RCC_OscConfig+0x538>)
 80033a6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80033a8:	4a2d      	ldr	r2, [pc, #180]	; (8003460 <HAL_RCC_OscConfig+0x538>)
 80033aa:	f043 0301 	orr.w	r3, r3, #1
 80033ae:	6713      	str	r3, [r2, #112]	; 0x70
 80033b0:	e00b      	b.n	80033ca <HAL_RCC_OscConfig+0x4a2>
 80033b2:	4b2b      	ldr	r3, [pc, #172]	; (8003460 <HAL_RCC_OscConfig+0x538>)
 80033b4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80033b6:	4a2a      	ldr	r2, [pc, #168]	; (8003460 <HAL_RCC_OscConfig+0x538>)
 80033b8:	f023 0301 	bic.w	r3, r3, #1
 80033bc:	6713      	str	r3, [r2, #112]	; 0x70
 80033be:	4b28      	ldr	r3, [pc, #160]	; (8003460 <HAL_RCC_OscConfig+0x538>)
 80033c0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80033c2:	4a27      	ldr	r2, [pc, #156]	; (8003460 <HAL_RCC_OscConfig+0x538>)
 80033c4:	f023 0304 	bic.w	r3, r3, #4
 80033c8:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80033ca:	687b      	ldr	r3, [r7, #4]
 80033cc:	689b      	ldr	r3, [r3, #8]
 80033ce:	2b00      	cmp	r3, #0
 80033d0:	d015      	beq.n	80033fe <HAL_RCC_OscConfig+0x4d6>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80033d2:	f7fe f807 	bl	80013e4 <HAL_GetTick>
 80033d6:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80033d8:	e00a      	b.n	80033f0 <HAL_RCC_OscConfig+0x4c8>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80033da:	f7fe f803 	bl	80013e4 <HAL_GetTick>
 80033de:	4602      	mov	r2, r0
 80033e0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80033e2:	1ad3      	subs	r3, r2, r3
 80033e4:	f241 3288 	movw	r2, #5000	; 0x1388
 80033e8:	4293      	cmp	r3, r2
 80033ea:	d901      	bls.n	80033f0 <HAL_RCC_OscConfig+0x4c8>
        {
          return HAL_TIMEOUT;
 80033ec:	2303      	movs	r3, #3
 80033ee:	e11f      	b.n	8003630 <HAL_RCC_OscConfig+0x708>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80033f0:	4b1b      	ldr	r3, [pc, #108]	; (8003460 <HAL_RCC_OscConfig+0x538>)
 80033f2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80033f4:	f003 0302 	and.w	r3, r3, #2
 80033f8:	2b00      	cmp	r3, #0
 80033fa:	d0ee      	beq.n	80033da <HAL_RCC_OscConfig+0x4b2>
 80033fc:	e014      	b.n	8003428 <HAL_RCC_OscConfig+0x500>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80033fe:	f7fd fff1 	bl	80013e4 <HAL_GetTick>
 8003402:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is disabled */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8003404:	e00a      	b.n	800341c <HAL_RCC_OscConfig+0x4f4>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003406:	f7fd ffed 	bl	80013e4 <HAL_GetTick>
 800340a:	4602      	mov	r2, r0
 800340c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800340e:	1ad3      	subs	r3, r2, r3
 8003410:	f241 3288 	movw	r2, #5000	; 0x1388
 8003414:	4293      	cmp	r3, r2
 8003416:	d901      	bls.n	800341c <HAL_RCC_OscConfig+0x4f4>
        {
          return HAL_TIMEOUT;
 8003418:	2303      	movs	r3, #3
 800341a:	e109      	b.n	8003630 <HAL_RCC_OscConfig+0x708>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 800341c:	4b10      	ldr	r3, [pc, #64]	; (8003460 <HAL_RCC_OscConfig+0x538>)
 800341e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003420:	f003 0302 	and.w	r3, r3, #2
 8003424:	2b00      	cmp	r3, #0
 8003426:	d1ee      	bne.n	8003406 <HAL_RCC_OscConfig+0x4de>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003428:	687b      	ldr	r3, [r7, #4]
 800342a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800342c:	2b00      	cmp	r3, #0
 800342e:	f000 80fe 	beq.w	800362e <HAL_RCC_OscConfig+0x706>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL1)
 8003432:	4b0b      	ldr	r3, [pc, #44]	; (8003460 <HAL_RCC_OscConfig+0x538>)
 8003434:	691b      	ldr	r3, [r3, #16]
 8003436:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800343a:	2b18      	cmp	r3, #24
 800343c:	f000 80b9 	beq.w	80035b2 <HAL_RCC_OscConfig+0x68a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003440:	687b      	ldr	r3, [r7, #4]
 8003442:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003444:	2b02      	cmp	r3, #2
 8003446:	f040 809a 	bne.w	800357e <HAL_RCC_OscConfig+0x656>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
        assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800344a:	4b05      	ldr	r3, [pc, #20]	; (8003460 <HAL_RCC_OscConfig+0x538>)
 800344c:	681b      	ldr	r3, [r3, #0]
 800344e:	4a04      	ldr	r2, [pc, #16]	; (8003460 <HAL_RCC_OscConfig+0x538>)
 8003450:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8003454:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003456:	f7fd ffc5 	bl	80013e4 <HAL_GetTick>
 800345a:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 800345c:	e00d      	b.n	800347a <HAL_RCC_OscConfig+0x552>
 800345e:	bf00      	nop
 8003460:	58024400 	.word	0x58024400
 8003464:	58024800 	.word	0x58024800
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003468:	f7fd ffbc 	bl	80013e4 <HAL_GetTick>
 800346c:	4602      	mov	r2, r0
 800346e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003470:	1ad3      	subs	r3, r2, r3
 8003472:	2b02      	cmp	r3, #2
 8003474:	d901      	bls.n	800347a <HAL_RCC_OscConfig+0x552>
          {
            return HAL_TIMEOUT;
 8003476:	2303      	movs	r3, #3
 8003478:	e0da      	b.n	8003630 <HAL_RCC_OscConfig+0x708>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 800347a:	4b6f      	ldr	r3, [pc, #444]	; (8003638 <HAL_RCC_OscConfig+0x710>)
 800347c:	681b      	ldr	r3, [r3, #0]
 800347e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003482:	2b00      	cmp	r3, #0
 8003484:	d1f0      	bne.n	8003468 <HAL_RCC_OscConfig+0x540>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8003486:	4b6c      	ldr	r3, [pc, #432]	; (8003638 <HAL_RCC_OscConfig+0x710>)
 8003488:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800348a:	4b6c      	ldr	r3, [pc, #432]	; (800363c <HAL_RCC_OscConfig+0x714>)
 800348c:	4013      	ands	r3, r2
 800348e:	687a      	ldr	r2, [r7, #4]
 8003490:	6a91      	ldr	r1, [r2, #40]	; 0x28
 8003492:	687a      	ldr	r2, [r7, #4]
 8003494:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 8003496:	0112      	lsls	r2, r2, #4
 8003498:	430a      	orrs	r2, r1
 800349a:	4967      	ldr	r1, [pc, #412]	; (8003638 <HAL_RCC_OscConfig+0x710>)
 800349c:	4313      	orrs	r3, r2
 800349e:	628b      	str	r3, [r1, #40]	; 0x28
 80034a0:	687b      	ldr	r3, [r7, #4]
 80034a2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80034a4:	3b01      	subs	r3, #1
 80034a6:	f3c3 0208 	ubfx	r2, r3, #0, #9
 80034aa:	687b      	ldr	r3, [r7, #4]
 80034ac:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80034ae:	3b01      	subs	r3, #1
 80034b0:	025b      	lsls	r3, r3, #9
 80034b2:	b29b      	uxth	r3, r3
 80034b4:	431a      	orrs	r2, r3
 80034b6:	687b      	ldr	r3, [r7, #4]
 80034b8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80034ba:	3b01      	subs	r3, #1
 80034bc:	041b      	lsls	r3, r3, #16
 80034be:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 80034c2:	431a      	orrs	r2, r3
 80034c4:	687b      	ldr	r3, [r7, #4]
 80034c6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80034c8:	3b01      	subs	r3, #1
 80034ca:	061b      	lsls	r3, r3, #24
 80034cc:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 80034d0:	4959      	ldr	r1, [pc, #356]	; (8003638 <HAL_RCC_OscConfig+0x710>)
 80034d2:	4313      	orrs	r3, r2
 80034d4:	630b      	str	r3, [r1, #48]	; 0x30
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

         /* Disable PLLFRACN . */
         __HAL_RCC_PLLFRACN_DISABLE();
 80034d6:	4b58      	ldr	r3, [pc, #352]	; (8003638 <HAL_RCC_OscConfig+0x710>)
 80034d8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80034da:	4a57      	ldr	r2, [pc, #348]	; (8003638 <HAL_RCC_OscConfig+0x710>)
 80034dc:	f023 0301 	bic.w	r3, r3, #1
 80034e0:	62d3      	str	r3, [r2, #44]	; 0x2c

         /* Configure PLL PLL1FRACN */
         __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 80034e2:	4b55      	ldr	r3, [pc, #340]	; (8003638 <HAL_RCC_OscConfig+0x710>)
 80034e4:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80034e6:	4b56      	ldr	r3, [pc, #344]	; (8003640 <HAL_RCC_OscConfig+0x718>)
 80034e8:	4013      	ands	r3, r2
 80034ea:	687a      	ldr	r2, [r7, #4]
 80034ec:	6c92      	ldr	r2, [r2, #72]	; 0x48
 80034ee:	00d2      	lsls	r2, r2, #3
 80034f0:	4951      	ldr	r1, [pc, #324]	; (8003638 <HAL_RCC_OscConfig+0x710>)
 80034f2:	4313      	orrs	r3, r2
 80034f4:	634b      	str	r3, [r1, #52]	; 0x34

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL_VCIRANGE(RCC_OscInitStruct->PLL.PLLRGE) ;
 80034f6:	4b50      	ldr	r3, [pc, #320]	; (8003638 <HAL_RCC_OscConfig+0x710>)
 80034f8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80034fa:	f023 020c 	bic.w	r2, r3, #12
 80034fe:	687b      	ldr	r3, [r7, #4]
 8003500:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003502:	494d      	ldr	r1, [pc, #308]	; (8003638 <HAL_RCC_OscConfig+0x710>)
 8003504:	4313      	orrs	r3, r2
 8003506:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Select PLL1 output frequency range : VCO */
        __HAL_RCC_PLL_VCORANGE(RCC_OscInitStruct->PLL.PLLVCOSEL) ;
 8003508:	4b4b      	ldr	r3, [pc, #300]	; (8003638 <HAL_RCC_OscConfig+0x710>)
 800350a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800350c:	f023 0202 	bic.w	r2, r3, #2
 8003510:	687b      	ldr	r3, [r7, #4]
 8003512:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003514:	4948      	ldr	r1, [pc, #288]	; (8003638 <HAL_RCC_OscConfig+0x710>)
 8003516:	4313      	orrs	r3, r2
 8003518:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 800351a:	4b47      	ldr	r3, [pc, #284]	; (8003638 <HAL_RCC_OscConfig+0x710>)
 800351c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800351e:	4a46      	ldr	r2, [pc, #280]	; (8003638 <HAL_RCC_OscConfig+0x710>)
 8003520:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003524:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1Q Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003526:	4b44      	ldr	r3, [pc, #272]	; (8003638 <HAL_RCC_OscConfig+0x710>)
 8003528:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800352a:	4a43      	ldr	r2, [pc, #268]	; (8003638 <HAL_RCC_OscConfig+0x710>)
 800352c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003530:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1R  Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 8003532:	4b41      	ldr	r3, [pc, #260]	; (8003638 <HAL_RCC_OscConfig+0x710>)
 8003534:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003536:	4a40      	ldr	r2, [pc, #256]	; (8003638 <HAL_RCC_OscConfig+0x710>)
 8003538:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800353c:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1FRACN . */
         __HAL_RCC_PLLFRACN_ENABLE();
 800353e:	4b3e      	ldr	r3, [pc, #248]	; (8003638 <HAL_RCC_OscConfig+0x710>)
 8003540:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003542:	4a3d      	ldr	r2, [pc, #244]	; (8003638 <HAL_RCC_OscConfig+0x710>)
 8003544:	f043 0301 	orr.w	r3, r3, #1
 8003548:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800354a:	4b3b      	ldr	r3, [pc, #236]	; (8003638 <HAL_RCC_OscConfig+0x710>)
 800354c:	681b      	ldr	r3, [r3, #0]
 800354e:	4a3a      	ldr	r2, [pc, #232]	; (8003638 <HAL_RCC_OscConfig+0x710>)
 8003550:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8003554:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003556:	f7fd ff45 	bl	80013e4 <HAL_GetTick>
 800355a:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 800355c:	e008      	b.n	8003570 <HAL_RCC_OscConfig+0x648>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800355e:	f7fd ff41 	bl	80013e4 <HAL_GetTick>
 8003562:	4602      	mov	r2, r0
 8003564:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003566:	1ad3      	subs	r3, r2, r3
 8003568:	2b02      	cmp	r3, #2
 800356a:	d901      	bls.n	8003570 <HAL_RCC_OscConfig+0x648>
          {
            return HAL_TIMEOUT;
 800356c:	2303      	movs	r3, #3
 800356e:	e05f      	b.n	8003630 <HAL_RCC_OscConfig+0x708>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8003570:	4b31      	ldr	r3, [pc, #196]	; (8003638 <HAL_RCC_OscConfig+0x710>)
 8003572:	681b      	ldr	r3, [r3, #0]
 8003574:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003578:	2b00      	cmp	r3, #0
 800357a:	d0f0      	beq.n	800355e <HAL_RCC_OscConfig+0x636>
 800357c:	e057      	b.n	800362e <HAL_RCC_OscConfig+0x706>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800357e:	4b2e      	ldr	r3, [pc, #184]	; (8003638 <HAL_RCC_OscConfig+0x710>)
 8003580:	681b      	ldr	r3, [r3, #0]
 8003582:	4a2d      	ldr	r2, [pc, #180]	; (8003638 <HAL_RCC_OscConfig+0x710>)
 8003584:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8003588:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800358a:	f7fd ff2b 	bl	80013e4 <HAL_GetTick>
 800358e:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8003590:	e008      	b.n	80035a4 <HAL_RCC_OscConfig+0x67c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003592:	f7fd ff27 	bl	80013e4 <HAL_GetTick>
 8003596:	4602      	mov	r2, r0
 8003598:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800359a:	1ad3      	subs	r3, r2, r3
 800359c:	2b02      	cmp	r3, #2
 800359e:	d901      	bls.n	80035a4 <HAL_RCC_OscConfig+0x67c>
          {
            return HAL_TIMEOUT;
 80035a0:	2303      	movs	r3, #3
 80035a2:	e045      	b.n	8003630 <HAL_RCC_OscConfig+0x708>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 80035a4:	4b24      	ldr	r3, [pc, #144]	; (8003638 <HAL_RCC_OscConfig+0x710>)
 80035a6:	681b      	ldr	r3, [r3, #0]
 80035a8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80035ac:	2b00      	cmp	r3, #0
 80035ae:	d1f0      	bne.n	8003592 <HAL_RCC_OscConfig+0x66a>
 80035b0:	e03d      	b.n	800362e <HAL_RCC_OscConfig+0x706>
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLLCKSELR;
 80035b2:	4b21      	ldr	r3, [pc, #132]	; (8003638 <HAL_RCC_OscConfig+0x710>)
 80035b4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80035b6:	613b      	str	r3, [r7, #16]
      temp2_pllckcfg = RCC->PLL1DIVR;
 80035b8:	4b1f      	ldr	r3, [pc, #124]	; (8003638 <HAL_RCC_OscConfig+0x710>)
 80035ba:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80035bc:	60fb      	str	r3, [r7, #12]
      if(((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80035be:	687b      	ldr	r3, [r7, #4]
 80035c0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80035c2:	2b01      	cmp	r3, #1
 80035c4:	d031      	beq.n	800362a <HAL_RCC_OscConfig+0x702>
	 (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80035c6:	693b      	ldr	r3, [r7, #16]
 80035c8:	f003 0203 	and.w	r2, r3, #3
 80035cc:	687b      	ldr	r3, [r7, #4]
 80035ce:	6a9b      	ldr	r3, [r3, #40]	; 0x28
      if(((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80035d0:	429a      	cmp	r2, r3
 80035d2:	d12a      	bne.n	800362a <HAL_RCC_OscConfig+0x702>
         ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 80035d4:	693b      	ldr	r3, [r7, #16]
 80035d6:	091b      	lsrs	r3, r3, #4
 80035d8:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 80035dc:	687b      	ldr	r3, [r7, #4]
 80035de:	6adb      	ldr	r3, [r3, #44]	; 0x2c
	 (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80035e0:	429a      	cmp	r2, r3
 80035e2:	d122      	bne.n	800362a <HAL_RCC_OscConfig+0x702>
         (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 80035e4:	68fb      	ldr	r3, [r7, #12]
 80035e6:	f3c3 0208 	ubfx	r2, r3, #0, #9
 80035ea:	687b      	ldr	r3, [r7, #4]
 80035ec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80035ee:	3b01      	subs	r3, #1
         ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 80035f0:	429a      	cmp	r2, r3
 80035f2:	d11a      	bne.n	800362a <HAL_RCC_OscConfig+0x702>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 80035f4:	68fb      	ldr	r3, [r7, #12]
 80035f6:	0a5b      	lsrs	r3, r3, #9
 80035f8:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 80035fc:	687b      	ldr	r3, [r7, #4]
 80035fe:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003600:	3b01      	subs	r3, #1
         (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8003602:	429a      	cmp	r2, r3
 8003604:	d111      	bne.n	800362a <HAL_RCC_OscConfig+0x702>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8003606:	68fb      	ldr	r3, [r7, #12]
 8003608:	0c1b      	lsrs	r3, r3, #16
 800360a:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800360e:	687b      	ldr	r3, [r7, #4]
 8003610:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003612:	3b01      	subs	r3, #1
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8003614:	429a      	cmp	r2, r3
 8003616:	d108      	bne.n	800362a <HAL_RCC_OscConfig+0x702>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_R1) >> RCC_PLL1DIVR_R1_Pos) != (RCC_OscInitStruct->PLL.PLLR - 1U)))
 8003618:	68fb      	ldr	r3, [r7, #12]
 800361a:	0e1b      	lsrs	r3, r3, #24
 800361c:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8003620:	687b      	ldr	r3, [r7, #4]
 8003622:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003624:	3b01      	subs	r3, #1
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8003626:	429a      	cmp	r2, r3
 8003628:	d001      	beq.n	800362e <HAL_RCC_OscConfig+0x706>
      {
        return HAL_ERROR;
 800362a:	2301      	movs	r3, #1
 800362c:	e000      	b.n	8003630 <HAL_RCC_OscConfig+0x708>
      }
    }
  }
  return HAL_OK;
 800362e:	2300      	movs	r3, #0
}
 8003630:	4618      	mov	r0, r3
 8003632:	3730      	adds	r7, #48	; 0x30
 8003634:	46bd      	mov	sp, r7
 8003636:	bd80      	pop	{r7, pc}
 8003638:	58024400 	.word	0x58024400
 800363c:	fffffc0c 	.word	0xfffffc0c
 8003640:	ffff0007 	.word	0xffff0007

08003644 <HAL_RCC_ClockConfig>:
  *         D1CPRE[3:0] bits to ensure that  Domain1 core clock not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003644:	b580      	push	{r7, lr}
 8003646:	b086      	sub	sp, #24
 8003648:	af00      	add	r7, sp, #0
 800364a:	6078      	str	r0, [r7, #4]
 800364c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef halstatus;
  uint32_t tickstart;
  uint32_t common_system_clock;

   /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800364e:	687b      	ldr	r3, [r7, #4]
 8003650:	2b00      	cmp	r3, #0
 8003652:	d101      	bne.n	8003658 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003654:	2301      	movs	r3, #1
 8003656:	e19c      	b.n	8003992 <HAL_RCC_ClockConfig+0x34e>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8003658:	4b8a      	ldr	r3, [pc, #552]	; (8003884 <HAL_RCC_ClockConfig+0x240>)
 800365a:	681b      	ldr	r3, [r3, #0]
 800365c:	f003 030f 	and.w	r3, r3, #15
 8003660:	683a      	ldr	r2, [r7, #0]
 8003662:	429a      	cmp	r2, r3
 8003664:	d910      	bls.n	8003688 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003666:	4b87      	ldr	r3, [pc, #540]	; (8003884 <HAL_RCC_ClockConfig+0x240>)
 8003668:	681b      	ldr	r3, [r3, #0]
 800366a:	f023 020f 	bic.w	r2, r3, #15
 800366e:	4985      	ldr	r1, [pc, #532]	; (8003884 <HAL_RCC_ClockConfig+0x240>)
 8003670:	683b      	ldr	r3, [r7, #0]
 8003672:	4313      	orrs	r3, r2
 8003674:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003676:	4b83      	ldr	r3, [pc, #524]	; (8003884 <HAL_RCC_ClockConfig+0x240>)
 8003678:	681b      	ldr	r3, [r3, #0]
 800367a:	f003 030f 	and.w	r3, r3, #15
 800367e:	683a      	ldr	r2, [r7, #0]
 8003680:	429a      	cmp	r2, r3
 8003682:	d001      	beq.n	8003688 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8003684:	2301      	movs	r3, #1
 8003686:	e184      	b.n	8003992 <HAL_RCC_ClockConfig+0x34e>

  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- D1PCLK1/CDPCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8003688:	687b      	ldr	r3, [r7, #4]
 800368a:	681b      	ldr	r3, [r3, #0]
 800368c:	f003 0304 	and.w	r3, r3, #4
 8003690:	2b00      	cmp	r3, #0
 8003692:	d010      	beq.n	80036b6 <HAL_RCC_ClockConfig+0x72>
  {
#if defined (RCC_D1CFGR_D1PPRE)
    if((RCC_ClkInitStruct->APB3CLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8003694:	687b      	ldr	r3, [r7, #4]
 8003696:	691a      	ldr	r2, [r3, #16]
 8003698:	4b7b      	ldr	r3, [pc, #492]	; (8003888 <HAL_RCC_ClockConfig+0x244>)
 800369a:	699b      	ldr	r3, [r3, #24]
 800369c:	f003 0370 	and.w	r3, r3, #112	; 0x70
 80036a0:	429a      	cmp	r2, r3
 80036a2:	d908      	bls.n	80036b6 <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 80036a4:	4b78      	ldr	r3, [pc, #480]	; (8003888 <HAL_RCC_ClockConfig+0x244>)
 80036a6:	699b      	ldr	r3, [r3, #24]
 80036a8:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 80036ac:	687b      	ldr	r3, [r7, #4]
 80036ae:	691b      	ldr	r3, [r3, #16]
 80036b0:	4975      	ldr	r1, [pc, #468]	; (8003888 <HAL_RCC_ClockConfig+0x244>)
 80036b2:	4313      	orrs	r3, r2
 80036b4:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80036b6:	687b      	ldr	r3, [r7, #4]
 80036b8:	681b      	ldr	r3, [r3, #0]
 80036ba:	f003 0308 	and.w	r3, r3, #8
 80036be:	2b00      	cmp	r3, #0
 80036c0:	d010      	beq.n	80036e4 <HAL_RCC_ClockConfig+0xa0>
  {
#if defined (RCC_D2CFGR_D2PPRE1)
    if((RCC_ClkInitStruct->APB1CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 80036c2:	687b      	ldr	r3, [r7, #4]
 80036c4:	695a      	ldr	r2, [r3, #20]
 80036c6:	4b70      	ldr	r3, [pc, #448]	; (8003888 <HAL_RCC_ClockConfig+0x244>)
 80036c8:	69db      	ldr	r3, [r3, #28]
 80036ca:	f003 0370 	and.w	r3, r3, #112	; 0x70
 80036ce:	429a      	cmp	r2, r3
 80036d0:	d908      	bls.n	80036e4 <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 80036d2:	4b6d      	ldr	r3, [pc, #436]	; (8003888 <HAL_RCC_ClockConfig+0x244>)
 80036d4:	69db      	ldr	r3, [r3, #28]
 80036d6:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 80036da:	687b      	ldr	r3, [r7, #4]
 80036dc:	695b      	ldr	r3, [r3, #20]
 80036de:	496a      	ldr	r1, [pc, #424]	; (8003888 <HAL_RCC_ClockConfig+0x244>)
 80036e0:	4313      	orrs	r3, r2
 80036e2:	61cb      	str	r3, [r1, #28]
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
  }
#endif
    }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80036e4:	687b      	ldr	r3, [r7, #4]
 80036e6:	681b      	ldr	r3, [r3, #0]
 80036e8:	f003 0310 	and.w	r3, r3, #16
 80036ec:	2b00      	cmp	r3, #0
 80036ee:	d010      	beq.n	8003712 <HAL_RCC_ClockConfig+0xce>
  {
#if defined(RCC_D2CFGR_D2PPRE2)
    if((RCC_ClkInitStruct->APB2CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 80036f0:	687b      	ldr	r3, [r7, #4]
 80036f2:	699a      	ldr	r2, [r3, #24]
 80036f4:	4b64      	ldr	r3, [pc, #400]	; (8003888 <HAL_RCC_ClockConfig+0x244>)
 80036f6:	69db      	ldr	r3, [r3, #28]
 80036f8:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 80036fc:	429a      	cmp	r2, r3
 80036fe:	d908      	bls.n	8003712 <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8003700:	4b61      	ldr	r3, [pc, #388]	; (8003888 <HAL_RCC_ClockConfig+0x244>)
 8003702:	69db      	ldr	r3, [r3, #28]
 8003704:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8003708:	687b      	ldr	r3, [r7, #4]
 800370a:	699b      	ldr	r3, [r3, #24]
 800370c:	495e      	ldr	r1, [pc, #376]	; (8003888 <HAL_RCC_ClockConfig+0x244>)
 800370e:	4313      	orrs	r3, r2
 8003710:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 8003712:	687b      	ldr	r3, [r7, #4]
 8003714:	681b      	ldr	r3, [r3, #0]
 8003716:	f003 0320 	and.w	r3, r3, #32
 800371a:	2b00      	cmp	r3, #0
 800371c:	d010      	beq.n	8003740 <HAL_RCC_ClockConfig+0xfc>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if((RCC_ClkInitStruct->APB4CLKDivider) > (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 800371e:	687b      	ldr	r3, [r7, #4]
 8003720:	69da      	ldr	r2, [r3, #28]
 8003722:	4b59      	ldr	r3, [pc, #356]	; (8003888 <HAL_RCC_ClockConfig+0x244>)
 8003724:	6a1b      	ldr	r3, [r3, #32]
 8003726:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800372a:	429a      	cmp	r2, r3
 800372c:	d908      	bls.n	8003740 <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider) );
 800372e:	4b56      	ldr	r3, [pc, #344]	; (8003888 <HAL_RCC_ClockConfig+0x244>)
 8003730:	6a1b      	ldr	r3, [r3, #32]
 8003732:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8003736:	687b      	ldr	r3, [r7, #4]
 8003738:	69db      	ldr	r3, [r3, #28]
 800373a:	4953      	ldr	r1, [pc, #332]	; (8003888 <HAL_RCC_ClockConfig+0x244>)
 800373c:	4313      	orrs	r3, r2
 800373e:	620b      	str	r3, [r1, #32]
    }
#endif
  }

   /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003740:	687b      	ldr	r3, [r7, #4]
 8003742:	681b      	ldr	r3, [r3, #0]
 8003744:	f003 0302 	and.w	r3, r3, #2
 8003748:	2b00      	cmp	r3, #0
 800374a:	d010      	beq.n	800376e <HAL_RCC_ClockConfig+0x12a>
  {
#if defined (RCC_D1CFGR_HPRE)
    if((RCC_ClkInitStruct->AHBCLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 800374c:	687b      	ldr	r3, [r7, #4]
 800374e:	68da      	ldr	r2, [r3, #12]
 8003750:	4b4d      	ldr	r3, [pc, #308]	; (8003888 <HAL_RCC_ClockConfig+0x244>)
 8003752:	699b      	ldr	r3, [r3, #24]
 8003754:	f003 030f 	and.w	r3, r3, #15
 8003758:	429a      	cmp	r2, r3
 800375a:	d908      	bls.n	800376e <HAL_RCC_ClockConfig+0x12a>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800375c:	4b4a      	ldr	r3, [pc, #296]	; (8003888 <HAL_RCC_ClockConfig+0x244>)
 800375e:	699b      	ldr	r3, [r3, #24]
 8003760:	f023 020f 	bic.w	r2, r3, #15
 8003764:	687b      	ldr	r3, [r7, #4]
 8003766:	68db      	ldr	r3, [r3, #12]
 8003768:	4947      	ldr	r1, [pc, #284]	; (8003888 <HAL_RCC_ClockConfig+0x244>)
 800376a:	4313      	orrs	r3, r2
 800376c:	618b      	str	r3, [r1, #24]
    }
#endif
  }

    /*------------------------- SYSCLK Configuration -------------------------*/
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800376e:	687b      	ldr	r3, [r7, #4]
 8003770:	681b      	ldr	r3, [r3, #0]
 8003772:	f003 0301 	and.w	r3, r3, #1
 8003776:	2b00      	cmp	r3, #0
 8003778:	d055      	beq.n	8003826 <HAL_RCC_ClockConfig+0x1e2>
    {
      assert_param(IS_RCC_SYSCLK(RCC_ClkInitStruct->SYSCLKDivider));
      assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
#if defined(RCC_D1CFGR_D1CPRE)
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1CPRE, RCC_ClkInitStruct->SYSCLKDivider);
 800377a:	4b43      	ldr	r3, [pc, #268]	; (8003888 <HAL_RCC_ClockConfig+0x244>)
 800377c:	699b      	ldr	r3, [r3, #24]
 800377e:	f423 6270 	bic.w	r2, r3, #3840	; 0xf00
 8003782:	687b      	ldr	r3, [r7, #4]
 8003784:	689b      	ldr	r3, [r3, #8]
 8003786:	4940      	ldr	r1, [pc, #256]	; (8003888 <HAL_RCC_ClockConfig+0x244>)
 8003788:	4313      	orrs	r3, r2
 800378a:	618b      	str	r3, [r1, #24]
#else
      MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDCPRE, RCC_ClkInitStruct->SYSCLKDivider);
#endif
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800378c:	687b      	ldr	r3, [r7, #4]
 800378e:	685b      	ldr	r3, [r3, #4]
 8003790:	2b02      	cmp	r3, #2
 8003792:	d107      	bne.n	80037a4 <HAL_RCC_ClockConfig+0x160>
      {
        /* Check the HSE ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8003794:	4b3c      	ldr	r3, [pc, #240]	; (8003888 <HAL_RCC_ClockConfig+0x244>)
 8003796:	681b      	ldr	r3, [r3, #0]
 8003798:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800379c:	2b00      	cmp	r3, #0
 800379e:	d121      	bne.n	80037e4 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 80037a0:	2301      	movs	r3, #1
 80037a2:	e0f6      	b.n	8003992 <HAL_RCC_ClockConfig+0x34e>
        }
      }
      /* PLL is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80037a4:	687b      	ldr	r3, [r7, #4]
 80037a6:	685b      	ldr	r3, [r3, #4]
 80037a8:	2b03      	cmp	r3, #3
 80037aa:	d107      	bne.n	80037bc <HAL_RCC_ClockConfig+0x178>
      {
        /* Check the PLL ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 80037ac:	4b36      	ldr	r3, [pc, #216]	; (8003888 <HAL_RCC_ClockConfig+0x244>)
 80037ae:	681b      	ldr	r3, [r3, #0]
 80037b0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80037b4:	2b00      	cmp	r3, #0
 80037b6:	d115      	bne.n	80037e4 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 80037b8:	2301      	movs	r3, #1
 80037ba:	e0ea      	b.n	8003992 <HAL_RCC_ClockConfig+0x34e>
        }
      }
      /* CSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 80037bc:	687b      	ldr	r3, [r7, #4]
 80037be:	685b      	ldr	r3, [r3, #4]
 80037c0:	2b01      	cmp	r3, #1
 80037c2:	d107      	bne.n	80037d4 <HAL_RCC_ClockConfig+0x190>
      {
        /* Check the PLL ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 80037c4:	4b30      	ldr	r3, [pc, #192]	; (8003888 <HAL_RCC_ClockConfig+0x244>)
 80037c6:	681b      	ldr	r3, [r3, #0]
 80037c8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80037cc:	2b00      	cmp	r3, #0
 80037ce:	d109      	bne.n	80037e4 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 80037d0:	2301      	movs	r3, #1
 80037d2:	e0de      	b.n	8003992 <HAL_RCC_ClockConfig+0x34e>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80037d4:	4b2c      	ldr	r3, [pc, #176]	; (8003888 <HAL_RCC_ClockConfig+0x244>)
 80037d6:	681b      	ldr	r3, [r3, #0]
 80037d8:	f003 0304 	and.w	r3, r3, #4
 80037dc:	2b00      	cmp	r3, #0
 80037de:	d101      	bne.n	80037e4 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 80037e0:	2301      	movs	r3, #1
 80037e2:	e0d6      	b.n	8003992 <HAL_RCC_ClockConfig+0x34e>
        }
      }
      MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 80037e4:	4b28      	ldr	r3, [pc, #160]	; (8003888 <HAL_RCC_ClockConfig+0x244>)
 80037e6:	691b      	ldr	r3, [r3, #16]
 80037e8:	f023 0207 	bic.w	r2, r3, #7
 80037ec:	687b      	ldr	r3, [r7, #4]
 80037ee:	685b      	ldr	r3, [r3, #4]
 80037f0:	4925      	ldr	r1, [pc, #148]	; (8003888 <HAL_RCC_ClockConfig+0x244>)
 80037f2:	4313      	orrs	r3, r2
 80037f4:	610b      	str	r3, [r1, #16]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80037f6:	f7fd fdf5 	bl	80013e4 <HAL_GetTick>
 80037fa:	6178      	str	r0, [r7, #20]

        while (__HAL_RCC_GET_SYSCLK_SOURCE() !=  (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80037fc:	e00a      	b.n	8003814 <HAL_RCC_ClockConfig+0x1d0>
        {
          if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 80037fe:	f7fd fdf1 	bl	80013e4 <HAL_GetTick>
 8003802:	4602      	mov	r2, r0
 8003804:	697b      	ldr	r3, [r7, #20]
 8003806:	1ad3      	subs	r3, r2, r3
 8003808:	f241 3288 	movw	r2, #5000	; 0x1388
 800380c:	4293      	cmp	r3, r2
 800380e:	d901      	bls.n	8003814 <HAL_RCC_ClockConfig+0x1d0>
          {
            return HAL_TIMEOUT;
 8003810:	2303      	movs	r3, #3
 8003812:	e0be      	b.n	8003992 <HAL_RCC_ClockConfig+0x34e>
        while (__HAL_RCC_GET_SYSCLK_SOURCE() !=  (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003814:	4b1c      	ldr	r3, [pc, #112]	; (8003888 <HAL_RCC_ClockConfig+0x244>)
 8003816:	691b      	ldr	r3, [r3, #16]
 8003818:	f003 0238 	and.w	r2, r3, #56	; 0x38
 800381c:	687b      	ldr	r3, [r7, #4]
 800381e:	685b      	ldr	r3, [r3, #4]
 8003820:	00db      	lsls	r3, r3, #3
 8003822:	429a      	cmp	r2, r3
 8003824:	d1eb      	bne.n	80037fe <HAL_RCC_ClockConfig+0x1ba>

    }

    /* Decreasing the BUS frequency divider */
   /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003826:	687b      	ldr	r3, [r7, #4]
 8003828:	681b      	ldr	r3, [r3, #0]
 800382a:	f003 0302 	and.w	r3, r3, #2
 800382e:	2b00      	cmp	r3, #0
 8003830:	d010      	beq.n	8003854 <HAL_RCC_ClockConfig+0x210>
  {
#if defined(RCC_D1CFGR_HPRE)
    if((RCC_ClkInitStruct->AHBCLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 8003832:	687b      	ldr	r3, [r7, #4]
 8003834:	68da      	ldr	r2, [r3, #12]
 8003836:	4b14      	ldr	r3, [pc, #80]	; (8003888 <HAL_RCC_ClockConfig+0x244>)
 8003838:	699b      	ldr	r3, [r3, #24]
 800383a:	f003 030f 	and.w	r3, r3, #15
 800383e:	429a      	cmp	r2, r3
 8003840:	d208      	bcs.n	8003854 <HAL_RCC_ClockConfig+0x210>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003842:	4b11      	ldr	r3, [pc, #68]	; (8003888 <HAL_RCC_ClockConfig+0x244>)
 8003844:	699b      	ldr	r3, [r3, #24]
 8003846:	f023 020f 	bic.w	r2, r3, #15
 800384a:	687b      	ldr	r3, [r7, #4]
 800384c:	68db      	ldr	r3, [r3, #12]
 800384e:	490e      	ldr	r1, [pc, #56]	; (8003888 <HAL_RCC_ClockConfig+0x244>)
 8003850:	4313      	orrs	r3, r2
 8003852:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8003854:	4b0b      	ldr	r3, [pc, #44]	; (8003884 <HAL_RCC_ClockConfig+0x240>)
 8003856:	681b      	ldr	r3, [r3, #0]
 8003858:	f003 030f 	and.w	r3, r3, #15
 800385c:	683a      	ldr	r2, [r7, #0]
 800385e:	429a      	cmp	r2, r3
 8003860:	d214      	bcs.n	800388c <HAL_RCC_ClockConfig+0x248>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003862:	4b08      	ldr	r3, [pc, #32]	; (8003884 <HAL_RCC_ClockConfig+0x240>)
 8003864:	681b      	ldr	r3, [r3, #0]
 8003866:	f023 020f 	bic.w	r2, r3, #15
 800386a:	4906      	ldr	r1, [pc, #24]	; (8003884 <HAL_RCC_ClockConfig+0x240>)
 800386c:	683b      	ldr	r3, [r7, #0]
 800386e:	4313      	orrs	r3, r2
 8003870:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003872:	4b04      	ldr	r3, [pc, #16]	; (8003884 <HAL_RCC_ClockConfig+0x240>)
 8003874:	681b      	ldr	r3, [r3, #0]
 8003876:	f003 030f 	and.w	r3, r3, #15
 800387a:	683a      	ldr	r2, [r7, #0]
 800387c:	429a      	cmp	r2, r3
 800387e:	d005      	beq.n	800388c <HAL_RCC_ClockConfig+0x248>
    {
      return HAL_ERROR;
 8003880:	2301      	movs	r3, #1
 8003882:	e086      	b.n	8003992 <HAL_RCC_ClockConfig+0x34e>
 8003884:	52002000 	.word	0x52002000
 8003888:	58024400 	.word	0x58024400
    }
 }

  /*-------------------------- D1PCLK1/CDPCLK Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 800388c:	687b      	ldr	r3, [r7, #4]
 800388e:	681b      	ldr	r3, [r3, #0]
 8003890:	f003 0304 	and.w	r3, r3, #4
 8003894:	2b00      	cmp	r3, #0
 8003896:	d010      	beq.n	80038ba <HAL_RCC_ClockConfig+0x276>
 {
#if defined(RCC_D1CFGR_D1PPRE)
   if((RCC_ClkInitStruct->APB3CLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8003898:	687b      	ldr	r3, [r7, #4]
 800389a:	691a      	ldr	r2, [r3, #16]
 800389c:	4b3f      	ldr	r3, [pc, #252]	; (800399c <HAL_RCC_ClockConfig+0x358>)
 800389e:	699b      	ldr	r3, [r3, #24]
 80038a0:	f003 0370 	and.w	r3, r3, #112	; 0x70
 80038a4:	429a      	cmp	r2, r3
 80038a6:	d208      	bcs.n	80038ba <HAL_RCC_ClockConfig+0x276>
   {
     assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
     MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 80038a8:	4b3c      	ldr	r3, [pc, #240]	; (800399c <HAL_RCC_ClockConfig+0x358>)
 80038aa:	699b      	ldr	r3, [r3, #24]
 80038ac:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 80038b0:	687b      	ldr	r3, [r7, #4]
 80038b2:	691b      	ldr	r3, [r3, #16]
 80038b4:	4939      	ldr	r1, [pc, #228]	; (800399c <HAL_RCC_ClockConfig+0x358>)
 80038b6:	4313      	orrs	r3, r2
 80038b8:	618b      	str	r3, [r1, #24]
   }
#endif
 }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80038ba:	687b      	ldr	r3, [r7, #4]
 80038bc:	681b      	ldr	r3, [r3, #0]
 80038be:	f003 0308 	and.w	r3, r3, #8
 80038c2:	2b00      	cmp	r3, #0
 80038c4:	d010      	beq.n	80038e8 <HAL_RCC_ClockConfig+0x2a4>
 {
#if defined(RCC_D2CFGR_D2PPRE1)
   if((RCC_ClkInitStruct->APB1CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 80038c6:	687b      	ldr	r3, [r7, #4]
 80038c8:	695a      	ldr	r2, [r3, #20]
 80038ca:	4b34      	ldr	r3, [pc, #208]	; (800399c <HAL_RCC_ClockConfig+0x358>)
 80038cc:	69db      	ldr	r3, [r3, #28]
 80038ce:	f003 0370 	and.w	r3, r3, #112	; 0x70
 80038d2:	429a      	cmp	r2, r3
 80038d4:	d208      	bcs.n	80038e8 <HAL_RCC_ClockConfig+0x2a4>
   {
     assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
     MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 80038d6:	4b31      	ldr	r3, [pc, #196]	; (800399c <HAL_RCC_ClockConfig+0x358>)
 80038d8:	69db      	ldr	r3, [r3, #28]
 80038da:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 80038de:	687b      	ldr	r3, [r7, #4]
 80038e0:	695b      	ldr	r3, [r3, #20]
 80038e2:	492e      	ldr	r1, [pc, #184]	; (800399c <HAL_RCC_ClockConfig+0x358>)
 80038e4:	4313      	orrs	r3, r2
 80038e6:	61cb      	str	r3, [r1, #28]
   }
#endif
 }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80038e8:	687b      	ldr	r3, [r7, #4]
 80038ea:	681b      	ldr	r3, [r3, #0]
 80038ec:	f003 0310 	and.w	r3, r3, #16
 80038f0:	2b00      	cmp	r3, #0
 80038f2:	d010      	beq.n	8003916 <HAL_RCC_ClockConfig+0x2d2>
 {
#if defined (RCC_D2CFGR_D2PPRE2)
   if((RCC_ClkInitStruct->APB2CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 80038f4:	687b      	ldr	r3, [r7, #4]
 80038f6:	699a      	ldr	r2, [r3, #24]
 80038f8:	4b28      	ldr	r3, [pc, #160]	; (800399c <HAL_RCC_ClockConfig+0x358>)
 80038fa:	69db      	ldr	r3, [r3, #28]
 80038fc:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8003900:	429a      	cmp	r2, r3
 8003902:	d208      	bcs.n	8003916 <HAL_RCC_ClockConfig+0x2d2>
   {
     assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
     MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8003904:	4b25      	ldr	r3, [pc, #148]	; (800399c <HAL_RCC_ClockConfig+0x358>)
 8003906:	69db      	ldr	r3, [r3, #28]
 8003908:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 800390c:	687b      	ldr	r3, [r7, #4]
 800390e:	699b      	ldr	r3, [r3, #24]
 8003910:	4922      	ldr	r1, [pc, #136]	; (800399c <HAL_RCC_ClockConfig+0x358>)
 8003912:	4313      	orrs	r3, r2
 8003914:	61cb      	str	r3, [r1, #28]
   }
#endif
 }

  /*-------------------------- D3PCLK1/SRDPCLK1 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 8003916:	687b      	ldr	r3, [r7, #4]
 8003918:	681b      	ldr	r3, [r3, #0]
 800391a:	f003 0320 	and.w	r3, r3, #32
 800391e:	2b00      	cmp	r3, #0
 8003920:	d010      	beq.n	8003944 <HAL_RCC_ClockConfig+0x300>
 {
#if defined(RCC_D3CFGR_D3PPRE)
   if((RCC_ClkInitStruct->APB4CLKDivider) < (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 8003922:	687b      	ldr	r3, [r7, #4]
 8003924:	69da      	ldr	r2, [r3, #28]
 8003926:	4b1d      	ldr	r3, [pc, #116]	; (800399c <HAL_RCC_ClockConfig+0x358>)
 8003928:	6a1b      	ldr	r3, [r3, #32]
 800392a:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800392e:	429a      	cmp	r2, r3
 8003930:	d208      	bcs.n	8003944 <HAL_RCC_ClockConfig+0x300>
   {
     assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
     MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider) );
 8003932:	4b1a      	ldr	r3, [pc, #104]	; (800399c <HAL_RCC_ClockConfig+0x358>)
 8003934:	6a1b      	ldr	r3, [r3, #32]
 8003936:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 800393a:	687b      	ldr	r3, [r7, #4]
 800393c:	69db      	ldr	r3, [r3, #28]
 800393e:	4917      	ldr	r1, [pc, #92]	; (800399c <HAL_RCC_ClockConfig+0x358>)
 8003940:	4313      	orrs	r3, r2
 8003942:	620b      	str	r3, [r1, #32]
#endif
 }

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8003944:	f000 f834 	bl	80039b0 <HAL_RCC_GetSysClockFreq>
 8003948:	4602      	mov	r2, r0
 800394a:	4b14      	ldr	r3, [pc, #80]	; (800399c <HAL_RCC_ClockConfig+0x358>)
 800394c:	699b      	ldr	r3, [r3, #24]
 800394e:	0a1b      	lsrs	r3, r3, #8
 8003950:	f003 030f 	and.w	r3, r3, #15
 8003954:	4912      	ldr	r1, [pc, #72]	; (80039a0 <HAL_RCC_ClockConfig+0x35c>)
 8003956:	5ccb      	ldrb	r3, [r1, r3]
 8003958:	f003 031f 	and.w	r3, r3, #31
 800395c:	fa22 f303 	lsr.w	r3, r2, r3
 8003960:	613b      	str	r3, [r7, #16]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8003962:	4b0e      	ldr	r3, [pc, #56]	; (800399c <HAL_RCC_ClockConfig+0x358>)
 8003964:	699b      	ldr	r3, [r3, #24]
 8003966:	f003 030f 	and.w	r3, r3, #15
 800396a:	4a0d      	ldr	r2, [pc, #52]	; (80039a0 <HAL_RCC_ClockConfig+0x35c>)
 800396c:	5cd3      	ldrb	r3, [r2, r3]
 800396e:	f003 031f 	and.w	r3, r3, #31
 8003972:	693a      	ldr	r2, [r7, #16]
 8003974:	fa22 f303 	lsr.w	r3, r2, r3
 8003978:	4a0a      	ldr	r2, [pc, #40]	; (80039a4 <HAL_RCC_ClockConfig+0x360>)
 800397a:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 800397c:	4a0a      	ldr	r2, [pc, #40]	; (80039a8 <HAL_RCC_ClockConfig+0x364>)
 800397e:	693b      	ldr	r3, [r7, #16]
 8003980:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Configure the source of time base considering new system clocks settings*/
  halstatus = HAL_InitTick (uwTickPrio);
 8003982:	4b0a      	ldr	r3, [pc, #40]	; (80039ac <HAL_RCC_ClockConfig+0x368>)
 8003984:	681b      	ldr	r3, [r3, #0]
 8003986:	4618      	mov	r0, r3
 8003988:	f7fd fce2 	bl	8001350 <HAL_InitTick>
 800398c:	4603      	mov	r3, r0
 800398e:	73fb      	strb	r3, [r7, #15]

  return halstatus;
 8003990:	7bfb      	ldrb	r3, [r7, #15]
}
 8003992:	4618      	mov	r0, r3
 8003994:	3718      	adds	r7, #24
 8003996:	46bd      	mov	sp, r7
 8003998:	bd80      	pop	{r7, pc}
 800399a:	bf00      	nop
 800399c:	58024400 	.word	0x58024400
 80039a0:	08007164 	.word	0x08007164
 80039a4:	20000004 	.word	0x20000004
 80039a8:	20000000 	.word	0x20000000
 80039ac:	20000008 	.word	0x20000008

080039b0 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80039b0:	b480      	push	{r7}
 80039b2:	b089      	sub	sp, #36	; 0x24
 80039b4:	af00      	add	r7, sp, #0
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 80039b6:	4bb3      	ldr	r3, [pc, #716]	; (8003c84 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80039b8:	691b      	ldr	r3, [r3, #16]
 80039ba:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80039be:	2b18      	cmp	r3, #24
 80039c0:	f200 8155 	bhi.w	8003c6e <HAL_RCC_GetSysClockFreq+0x2be>
 80039c4:	a201      	add	r2, pc, #4	; (adr r2, 80039cc <HAL_RCC_GetSysClockFreq+0x1c>)
 80039c6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80039ca:	bf00      	nop
 80039cc:	08003a31 	.word	0x08003a31
 80039d0:	08003c6f 	.word	0x08003c6f
 80039d4:	08003c6f 	.word	0x08003c6f
 80039d8:	08003c6f 	.word	0x08003c6f
 80039dc:	08003c6f 	.word	0x08003c6f
 80039e0:	08003c6f 	.word	0x08003c6f
 80039e4:	08003c6f 	.word	0x08003c6f
 80039e8:	08003c6f 	.word	0x08003c6f
 80039ec:	08003a57 	.word	0x08003a57
 80039f0:	08003c6f 	.word	0x08003c6f
 80039f4:	08003c6f 	.word	0x08003c6f
 80039f8:	08003c6f 	.word	0x08003c6f
 80039fc:	08003c6f 	.word	0x08003c6f
 8003a00:	08003c6f 	.word	0x08003c6f
 8003a04:	08003c6f 	.word	0x08003c6f
 8003a08:	08003c6f 	.word	0x08003c6f
 8003a0c:	08003a5d 	.word	0x08003a5d
 8003a10:	08003c6f 	.word	0x08003c6f
 8003a14:	08003c6f 	.word	0x08003c6f
 8003a18:	08003c6f 	.word	0x08003c6f
 8003a1c:	08003c6f 	.word	0x08003c6f
 8003a20:	08003c6f 	.word	0x08003c6f
 8003a24:	08003c6f 	.word	0x08003c6f
 8003a28:	08003c6f 	.word	0x08003c6f
 8003a2c:	08003a63 	.word	0x08003a63
  {
  case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */

   if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8003a30:	4b94      	ldr	r3, [pc, #592]	; (8003c84 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003a32:	681b      	ldr	r3, [r3, #0]
 8003a34:	f003 0320 	and.w	r3, r3, #32
 8003a38:	2b00      	cmp	r3, #0
 8003a3a:	d009      	beq.n	8003a50 <HAL_RCC_GetSysClockFreq+0xa0>
      {
        sysclockfreq = (uint32_t) (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8003a3c:	4b91      	ldr	r3, [pc, #580]	; (8003c84 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003a3e:	681b      	ldr	r3, [r3, #0]
 8003a40:	08db      	lsrs	r3, r3, #3
 8003a42:	f003 0303 	and.w	r3, r3, #3
 8003a46:	4a90      	ldr	r2, [pc, #576]	; (8003c88 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8003a48:	fa22 f303 	lsr.w	r3, r2, r3
 8003a4c:	61bb      	str	r3, [r7, #24]
      else
      {
        sysclockfreq = (uint32_t) HSI_VALUE;
      }

    break;
 8003a4e:	e111      	b.n	8003c74 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = (uint32_t) HSI_VALUE;
 8003a50:	4b8d      	ldr	r3, [pc, #564]	; (8003c88 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8003a52:	61bb      	str	r3, [r7, #24]
    break;
 8003a54:	e10e      	b.n	8003c74 <HAL_RCC_GetSysClockFreq+0x2c4>

  case RCC_CFGR_SWS_CSI:  /* CSI used as system clock  source */
    sysclockfreq = CSI_VALUE;
 8003a56:	4b8d      	ldr	r3, [pc, #564]	; (8003c8c <HAL_RCC_GetSysClockFreq+0x2dc>)
 8003a58:	61bb      	str	r3, [r7, #24]
    break;
 8003a5a:	e10b      	b.n	8003c74 <HAL_RCC_GetSysClockFreq+0x2c4>

  case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    sysclockfreq = HSE_VALUE;
 8003a5c:	4b8c      	ldr	r3, [pc, #560]	; (8003c90 <HAL_RCC_GetSysClockFreq+0x2e0>)
 8003a5e:	61bb      	str	r3, [r7, #24]
    break;
 8003a60:	e108      	b.n	8003c74 <HAL_RCC_GetSysClockFreq+0x2c4>
  case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8003a62:	4b88      	ldr	r3, [pc, #544]	; (8003c84 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003a64:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003a66:	f003 0303 	and.w	r3, r3, #3
 8003a6a:	617b      	str	r3, [r7, #20]
    pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1)>> 4)  ;
 8003a6c:	4b85      	ldr	r3, [pc, #532]	; (8003c84 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003a6e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003a70:	091b      	lsrs	r3, r3, #4
 8003a72:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8003a76:	613b      	str	r3, [r7, #16]
    pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN)>>RCC_PLLCFGR_PLL1FRACEN_Pos);
 8003a78:	4b82      	ldr	r3, [pc, #520]	; (8003c84 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003a7a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003a7c:	f003 0301 	and.w	r3, r3, #1
 8003a80:	60fb      	str	r3, [r7, #12]
    fracn1 = (float_t)(uint32_t)(pllfracen* ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1)>> 3));
 8003a82:	4b80      	ldr	r3, [pc, #512]	; (8003c84 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003a84:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003a86:	08db      	lsrs	r3, r3, #3
 8003a88:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8003a8c:	68fa      	ldr	r2, [r7, #12]
 8003a8e:	fb02 f303 	mul.w	r3, r2, r3
 8003a92:	ee07 3a90 	vmov	s15, r3
 8003a96:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003a9a:	edc7 7a02 	vstr	s15, [r7, #8]

    if (pllm != 0U)
 8003a9e:	693b      	ldr	r3, [r7, #16]
 8003aa0:	2b00      	cmp	r3, #0
 8003aa2:	f000 80e1 	beq.w	8003c68 <HAL_RCC_GetSysClockFreq+0x2b8>
 8003aa6:	697b      	ldr	r3, [r7, #20]
 8003aa8:	2b02      	cmp	r3, #2
 8003aaa:	f000 8083 	beq.w	8003bb4 <HAL_RCC_GetSysClockFreq+0x204>
 8003aae:	697b      	ldr	r3, [r7, #20]
 8003ab0:	2b02      	cmp	r3, #2
 8003ab2:	f200 80a1 	bhi.w	8003bf8 <HAL_RCC_GetSysClockFreq+0x248>
 8003ab6:	697b      	ldr	r3, [r7, #20]
 8003ab8:	2b00      	cmp	r3, #0
 8003aba:	d003      	beq.n	8003ac4 <HAL_RCC_GetSysClockFreq+0x114>
 8003abc:	697b      	ldr	r3, [r7, #20]
 8003abe:	2b01      	cmp	r3, #1
 8003ac0:	d056      	beq.n	8003b70 <HAL_RCC_GetSysClockFreq+0x1c0>
 8003ac2:	e099      	b.n	8003bf8 <HAL_RCC_GetSysClockFreq+0x248>
    {
      switch (pllsource)
      {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

       if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8003ac4:	4b6f      	ldr	r3, [pc, #444]	; (8003c84 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003ac6:	681b      	ldr	r3, [r3, #0]
 8003ac8:	f003 0320 	and.w	r3, r3, #32
 8003acc:	2b00      	cmp	r3, #0
 8003ace:	d02d      	beq.n	8003b2c <HAL_RCC_GetSysClockFreq+0x17c>
        {
          hsivalue= (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8003ad0:	4b6c      	ldr	r3, [pc, #432]	; (8003c84 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003ad2:	681b      	ldr	r3, [r3, #0]
 8003ad4:	08db      	lsrs	r3, r3, #3
 8003ad6:	f003 0303 	and.w	r3, r3, #3
 8003ada:	4a6b      	ldr	r2, [pc, #428]	; (8003c88 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8003adc:	fa22 f303 	lsr.w	r3, r2, r3
 8003ae0:	607b      	str	r3, [r7, #4]
          pllvco = ( (float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8003ae2:	687b      	ldr	r3, [r7, #4]
 8003ae4:	ee07 3a90 	vmov	s15, r3
 8003ae8:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003aec:	693b      	ldr	r3, [r7, #16]
 8003aee:	ee07 3a90 	vmov	s15, r3
 8003af2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003af6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8003afa:	4b62      	ldr	r3, [pc, #392]	; (8003c84 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003afc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003afe:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003b02:	ee07 3a90 	vmov	s15, r3
 8003b06:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003b0a:	ed97 6a02 	vldr	s12, [r7, #8]
 8003b0e:	eddf 5a61 	vldr	s11, [pc, #388]	; 8003c94 <HAL_RCC_GetSysClockFreq+0x2e4>
 8003b12:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8003b16:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8003b1a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8003b1e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8003b22:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003b26:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
        }
        break;
 8003b2a:	e087      	b.n	8003c3c <HAL_RCC_GetSysClockFreq+0x28c>
          pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8003b2c:	693b      	ldr	r3, [r7, #16]
 8003b2e:	ee07 3a90 	vmov	s15, r3
 8003b32:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003b36:	eddf 6a58 	vldr	s13, [pc, #352]	; 8003c98 <HAL_RCC_GetSysClockFreq+0x2e8>
 8003b3a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8003b3e:	4b51      	ldr	r3, [pc, #324]	; (8003c84 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003b40:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003b42:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003b46:	ee07 3a90 	vmov	s15, r3
 8003b4a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003b4e:	ed97 6a02 	vldr	s12, [r7, #8]
 8003b52:	eddf 5a50 	vldr	s11, [pc, #320]	; 8003c94 <HAL_RCC_GetSysClockFreq+0x2e4>
 8003b56:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8003b5a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8003b5e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8003b62:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8003b66:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003b6a:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8003b6e:	e065      	b.n	8003c3c <HAL_RCC_GetSysClockFreq+0x28c>

      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8003b70:	693b      	ldr	r3, [r7, #16]
 8003b72:	ee07 3a90 	vmov	s15, r3
 8003b76:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003b7a:	eddf 6a48 	vldr	s13, [pc, #288]	; 8003c9c <HAL_RCC_GetSysClockFreq+0x2ec>
 8003b7e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8003b82:	4b40      	ldr	r3, [pc, #256]	; (8003c84 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003b84:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003b86:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003b8a:	ee07 3a90 	vmov	s15, r3
 8003b8e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003b92:	ed97 6a02 	vldr	s12, [r7, #8]
 8003b96:	eddf 5a3f 	vldr	s11, [pc, #252]	; 8003c94 <HAL_RCC_GetSysClockFreq+0x2e4>
 8003b9a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8003b9e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8003ba2:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8003ba6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8003baa:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003bae:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8003bb2:	e043      	b.n	8003c3c <HAL_RCC_GetSysClockFreq+0x28c>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8003bb4:	693b      	ldr	r3, [r7, #16]
 8003bb6:	ee07 3a90 	vmov	s15, r3
 8003bba:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003bbe:	eddf 6a38 	vldr	s13, [pc, #224]	; 8003ca0 <HAL_RCC_GetSysClockFreq+0x2f0>
 8003bc2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8003bc6:	4b2f      	ldr	r3, [pc, #188]	; (8003c84 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003bc8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003bca:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003bce:	ee07 3a90 	vmov	s15, r3
 8003bd2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003bd6:	ed97 6a02 	vldr	s12, [r7, #8]
 8003bda:	eddf 5a2e 	vldr	s11, [pc, #184]	; 8003c94 <HAL_RCC_GetSysClockFreq+0x2e4>
 8003bde:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8003be2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8003be6:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8003bea:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8003bee:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003bf2:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8003bf6:	e021      	b.n	8003c3c <HAL_RCC_GetSysClockFreq+0x28c>

      default:
        pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8003bf8:	693b      	ldr	r3, [r7, #16]
 8003bfa:	ee07 3a90 	vmov	s15, r3
 8003bfe:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003c02:	eddf 6a26 	vldr	s13, [pc, #152]	; 8003c9c <HAL_RCC_GetSysClockFreq+0x2ec>
 8003c06:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8003c0a:	4b1e      	ldr	r3, [pc, #120]	; (8003c84 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003c0c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003c0e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003c12:	ee07 3a90 	vmov	s15, r3
 8003c16:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003c1a:	ed97 6a02 	vldr	s12, [r7, #8]
 8003c1e:	eddf 5a1d 	vldr	s11, [pc, #116]	; 8003c94 <HAL_RCC_GetSysClockFreq+0x2e4>
 8003c22:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8003c26:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8003c2a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8003c2e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8003c32:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003c36:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8003c3a:	bf00      	nop
      }
      pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >>9) + 1U ) ;
 8003c3c:	4b11      	ldr	r3, [pc, #68]	; (8003c84 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003c3e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003c40:	0a5b      	lsrs	r3, r3, #9
 8003c42:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8003c46:	3301      	adds	r3, #1
 8003c48:	603b      	str	r3, [r7, #0]
      sysclockfreq =  (uint32_t)(float_t)(pllvco/(float_t)pllp);
 8003c4a:	683b      	ldr	r3, [r7, #0]
 8003c4c:	ee07 3a90 	vmov	s15, r3
 8003c50:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8003c54:	edd7 6a07 	vldr	s13, [r7, #28]
 8003c58:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8003c5c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8003c60:	ee17 3a90 	vmov	r3, s15
 8003c64:	61bb      	str	r3, [r7, #24]
    }
    else
    {
      sysclockfreq = 0U;
    }
    break;
 8003c66:	e005      	b.n	8003c74 <HAL_RCC_GetSysClockFreq+0x2c4>
      sysclockfreq = 0U;
 8003c68:	2300      	movs	r3, #0
 8003c6a:	61bb      	str	r3, [r7, #24]
    break;
 8003c6c:	e002      	b.n	8003c74 <HAL_RCC_GetSysClockFreq+0x2c4>

  default:
    sysclockfreq = CSI_VALUE;
 8003c6e:	4b07      	ldr	r3, [pc, #28]	; (8003c8c <HAL_RCC_GetSysClockFreq+0x2dc>)
 8003c70:	61bb      	str	r3, [r7, #24]
    break;
 8003c72:	bf00      	nop
  }

  return sysclockfreq;
 8003c74:	69bb      	ldr	r3, [r7, #24]
}
 8003c76:	4618      	mov	r0, r3
 8003c78:	3724      	adds	r7, #36	; 0x24
 8003c7a:	46bd      	mov	sp, r7
 8003c7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c80:	4770      	bx	lr
 8003c82:	bf00      	nop
 8003c84:	58024400 	.word	0x58024400
 8003c88:	03d09000 	.word	0x03d09000
 8003c8c:	003d0900 	.word	0x003d0900
 8003c90:	007a1200 	.word	0x007a1200
 8003c94:	46000000 	.word	0x46000000
 8003c98:	4c742400 	.word	0x4c742400
 8003c9c:	4a742400 	.word	0x4a742400
 8003ca0:	4af42400 	.word	0x4af42400

08003ca4 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemD2Clock CMSIS variable is used to store System domain2 Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003ca4:	b580      	push	{r7, lr}
 8003ca6:	b082      	sub	sp, #8
 8003ca8:	af00      	add	r7, sp, #0
uint32_t common_system_clock;

#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 8003caa:	f7ff fe81 	bl	80039b0 <HAL_RCC_GetSysClockFreq>
 8003cae:	4602      	mov	r2, r0
 8003cb0:	4b10      	ldr	r3, [pc, #64]	; (8003cf4 <HAL_RCC_GetHCLKFreq+0x50>)
 8003cb2:	699b      	ldr	r3, [r3, #24]
 8003cb4:	0a1b      	lsrs	r3, r3, #8
 8003cb6:	f003 030f 	and.w	r3, r3, #15
 8003cba:	490f      	ldr	r1, [pc, #60]	; (8003cf8 <HAL_RCC_GetHCLKFreq+0x54>)
 8003cbc:	5ccb      	ldrb	r3, [r1, r3]
 8003cbe:	f003 031f 	and.w	r3, r3, #31
 8003cc2:	fa22 f303 	lsr.w	r3, r2, r3
 8003cc6:	607b      	str	r3, [r7, #4]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos] & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8003cc8:	4b0a      	ldr	r3, [pc, #40]	; (8003cf4 <HAL_RCC_GetHCLKFreq+0x50>)
 8003cca:	699b      	ldr	r3, [r3, #24]
 8003ccc:	f003 030f 	and.w	r3, r3, #15
 8003cd0:	4a09      	ldr	r2, [pc, #36]	; (8003cf8 <HAL_RCC_GetHCLKFreq+0x54>)
 8003cd2:	5cd3      	ldrb	r3, [r2, r3]
 8003cd4:	f003 031f 	and.w	r3, r3, #31
 8003cd8:	687a      	ldr	r2, [r7, #4]
 8003cda:	fa22 f303 	lsr.w	r3, r2, r3
 8003cde:	4a07      	ldr	r2, [pc, #28]	; (8003cfc <HAL_RCC_GetHCLKFreq+0x58>)
 8003ce0:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8003ce2:	4a07      	ldr	r2, [pc, #28]	; (8003d00 <HAL_RCC_GetHCLKFreq+0x5c>)
 8003ce4:	687b      	ldr	r3, [r7, #4]
 8003ce6:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  return SystemD2Clock;
 8003ce8:	4b04      	ldr	r3, [pc, #16]	; (8003cfc <HAL_RCC_GetHCLKFreq+0x58>)
 8003cea:	681b      	ldr	r3, [r3, #0]
}
 8003cec:	4618      	mov	r0, r3
 8003cee:	3708      	adds	r7, #8
 8003cf0:	46bd      	mov	sp, r7
 8003cf2:	bd80      	pop	{r7, pc}
 8003cf4:	58024400 	.word	0x58024400
 8003cf8:	08007164 	.word	0x08007164
 8003cfc:	20000004 	.word	0x20000004
 8003d00:	20000000 	.word	0x20000000

08003d04 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003d04:	b580      	push	{r7, lr}
 8003d06:	af00      	add	r7, sp, #0
#if defined (RCC_D2CFGR_D2PPRE1)
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1)>> RCC_D2CFGR_D2PPRE1_Pos]) & 0x1FU));
 8003d08:	f7ff ffcc 	bl	8003ca4 <HAL_RCC_GetHCLKFreq>
 8003d0c:	4602      	mov	r2, r0
 8003d0e:	4b06      	ldr	r3, [pc, #24]	; (8003d28 <HAL_RCC_GetPCLK1Freq+0x24>)
 8003d10:	69db      	ldr	r3, [r3, #28]
 8003d12:	091b      	lsrs	r3, r3, #4
 8003d14:	f003 0307 	and.w	r3, r3, #7
 8003d18:	4904      	ldr	r1, [pc, #16]	; (8003d2c <HAL_RCC_GetPCLK1Freq+0x28>)
 8003d1a:	5ccb      	ldrb	r3, [r1, r3]
 8003d1c:	f003 031f 	and.w	r3, r3, #31
 8003d20:	fa22 f303 	lsr.w	r3, r2, r3
#else
 /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1)>> RCC_CDCFGR2_CDPPRE1_Pos]) & 0x1FU));
#endif
}
 8003d24:	4618      	mov	r0, r3
 8003d26:	bd80      	pop	{r7, pc}
 8003d28:	58024400 	.word	0x58024400
 8003d2c:	08007164 	.word	0x08007164

08003d30 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003d30:	b580      	push	{r7, lr}
 8003d32:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
#if defined(RCC_D2CFGR_D2PPRE2)
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2)>> RCC_D2CFGR_D2PPRE2_Pos]) & 0x1FU));
 8003d34:	f7ff ffb6 	bl	8003ca4 <HAL_RCC_GetHCLKFreq>
 8003d38:	4602      	mov	r2, r0
 8003d3a:	4b06      	ldr	r3, [pc, #24]	; (8003d54 <HAL_RCC_GetPCLK2Freq+0x24>)
 8003d3c:	69db      	ldr	r3, [r3, #28]
 8003d3e:	0a1b      	lsrs	r3, r3, #8
 8003d40:	f003 0307 	and.w	r3, r3, #7
 8003d44:	4904      	ldr	r1, [pc, #16]	; (8003d58 <HAL_RCC_GetPCLK2Freq+0x28>)
 8003d46:	5ccb      	ldrb	r3, [r1, r3]
 8003d48:	f003 031f 	and.w	r3, r3, #31
 8003d4c:	fa22 f303 	lsr.w	r3, r2, r3
#else
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2)>> RCC_CDCFGR2_CDPPRE2_Pos]) & 0x1FU));
#endif
}
 8003d50:	4618      	mov	r0, r3
 8003d52:	bd80      	pop	{r7, pc}
 8003d54:	58024400 	.word	0x58024400
 8003d58:	08007164 	.word	0x08007164

08003d5c <HAL_RCCEx_PeriphCLKConfig>:
  * (*) : Available on some STM32H7 lines only.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8003d5c:	b580      	push	{r7, lr}
 8003d5e:	b086      	sub	sp, #24
 8003d60:	af00      	add	r7, sp, #0
 8003d62:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8003d64:	2300      	movs	r3, #0
 8003d66:	75fb      	strb	r3, [r7, #23]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8003d68:	2300      	movs	r3, #0
 8003d6a:	75bb      	strb	r3, [r7, #22]

  /*---------------------------- SPDIFRX configuration -------------------------------*/

  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8003d6c:	687b      	ldr	r3, [r7, #4]
 8003d6e:	681b      	ldr	r3, [r3, #0]
 8003d70:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8003d74:	2b00      	cmp	r3, #0
 8003d76:	d03f      	beq.n	8003df8 <HAL_RCCEx_PeriphCLKConfig+0x9c>
  {

    switch(PeriphClkInit->SpdifrxClockSelection)
 8003d78:	687b      	ldr	r3, [r7, #4]
 8003d7a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003d7c:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8003d80:	d02a      	beq.n	8003dd8 <HAL_RCCEx_PeriphCLKConfig+0x7c>
 8003d82:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8003d86:	d824      	bhi.n	8003dd2 <HAL_RCCEx_PeriphCLKConfig+0x76>
 8003d88:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8003d8c:	d018      	beq.n	8003dc0 <HAL_RCCEx_PeriphCLKConfig+0x64>
 8003d8e:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8003d92:	d81e      	bhi.n	8003dd2 <HAL_RCCEx_PeriphCLKConfig+0x76>
 8003d94:	2b00      	cmp	r3, #0
 8003d96:	d003      	beq.n	8003da0 <HAL_RCCEx_PeriphCLKConfig+0x44>
 8003d98:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8003d9c:	d007      	beq.n	8003dae <HAL_RCCEx_PeriphCLKConfig+0x52>
 8003d9e:	e018      	b.n	8003dd2 <HAL_RCCEx_PeriphCLKConfig+0x76>
    {
    case RCC_SPDIFRXCLKSOURCE_PLL:      /* PLL is used as clock source for SPDIFRX*/
      /* Enable PLL1Q Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003da0:	4bab      	ldr	r3, [pc, #684]	; (8004050 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8003da2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003da4:	4aaa      	ldr	r2, [pc, #680]	; (8004050 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8003da6:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003daa:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 8003dac:	e015      	b.n	8003dda <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SPDIFRXCLKSOURCE_PLL2: /* PLL2 is used as clock source for SPDIFRX*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 8003dae:	687b      	ldr	r3, [r7, #4]
 8003db0:	3304      	adds	r3, #4
 8003db2:	2102      	movs	r1, #2
 8003db4:	4618      	mov	r0, r3
 8003db6:	f001 f989 	bl	80050cc <RCCEx_PLL2_Config>
 8003dba:	4603      	mov	r3, r0
 8003dbc:	75fb      	strb	r3, [r7, #23]

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 8003dbe:	e00c      	b.n	8003dda <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SPDIFRXCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPDIFRX*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8003dc0:	687b      	ldr	r3, [r7, #4]
 8003dc2:	3324      	adds	r3, #36	; 0x24
 8003dc4:	2102      	movs	r1, #2
 8003dc6:	4618      	mov	r0, r3
 8003dc8:	f001 fa32 	bl	8005230 <RCCEx_PLL3_Config>
 8003dcc:	4603      	mov	r3, r0
 8003dce:	75fb      	strb	r3, [r7, #23]

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 8003dd0:	e003      	b.n	8003dda <HAL_RCCEx_PeriphCLKConfig+0x7e>
      /* Internal OSC clock is used as source of SPDIFRX clock*/
      /* SPDIFRX clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8003dd2:	2301      	movs	r3, #1
 8003dd4:	75fb      	strb	r3, [r7, #23]
      break;
 8003dd6:	e000      	b.n	8003dda <HAL_RCCEx_PeriphCLKConfig+0x7e>
      break;
 8003dd8:	bf00      	nop
    }

    if(ret == HAL_OK)
 8003dda:	7dfb      	ldrb	r3, [r7, #23]
 8003ddc:	2b00      	cmp	r3, #0
 8003dde:	d109      	bne.n	8003df4 <HAL_RCCEx_PeriphCLKConfig+0x98>
    {
      /* Set the source of SPDIFRX clock*/
      __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifrxClockSelection);
 8003de0:	4b9b      	ldr	r3, [pc, #620]	; (8004050 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8003de2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003de4:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8003de8:	687b      	ldr	r3, [r7, #4]
 8003dea:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003dec:	4998      	ldr	r1, [pc, #608]	; (8004050 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8003dee:	4313      	orrs	r3, r2
 8003df0:	650b      	str	r3, [r1, #80]	; 0x50
 8003df2:	e001      	b.n	8003df8 <HAL_RCCEx_PeriphCLKConfig+0x9c>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003df4:	7dfb      	ldrb	r3, [r7, #23]
 8003df6:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SAI1 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 8003df8:	687b      	ldr	r3, [r7, #4]
 8003dfa:	681b      	ldr	r3, [r3, #0]
 8003dfc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003e00:	2b00      	cmp	r3, #0
 8003e02:	d03d      	beq.n	8003e80 <HAL_RCCEx_PeriphCLKConfig+0x124>
  {
    switch(PeriphClkInit->Sai1ClockSelection)
 8003e04:	687b      	ldr	r3, [r7, #4]
 8003e06:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003e08:	2b04      	cmp	r3, #4
 8003e0a:	d826      	bhi.n	8003e5a <HAL_RCCEx_PeriphCLKConfig+0xfe>
 8003e0c:	a201      	add	r2, pc, #4	; (adr r2, 8003e14 <HAL_RCCEx_PeriphCLKConfig+0xb8>)
 8003e0e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003e12:	bf00      	nop
 8003e14:	08003e29 	.word	0x08003e29
 8003e18:	08003e37 	.word	0x08003e37
 8003e1c:	08003e49 	.word	0x08003e49
 8003e20:	08003e61 	.word	0x08003e61
 8003e24:	08003e61 	.word	0x08003e61
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003e28:	4b89      	ldr	r3, [pc, #548]	; (8004050 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8003e2a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003e2c:	4a88      	ldr	r2, [pc, #544]	; (8004050 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8003e2e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003e32:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8003e34:	e015      	b.n	8003e62 <HAL_RCCEx_PeriphCLKConfig+0x106>

    case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI1*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8003e36:	687b      	ldr	r3, [r7, #4]
 8003e38:	3304      	adds	r3, #4
 8003e3a:	2100      	movs	r1, #0
 8003e3c:	4618      	mov	r0, r3
 8003e3e:	f001 f945 	bl	80050cc <RCCEx_PLL2_Config>
 8003e42:	4603      	mov	r3, r0
 8003e44:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8003e46:	e00c      	b.n	8003e62 <HAL_RCCEx_PeriphCLKConfig+0x106>

    case RCC_SAI1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI1*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 8003e48:	687b      	ldr	r3, [r7, #4]
 8003e4a:	3324      	adds	r3, #36	; 0x24
 8003e4c:	2100      	movs	r1, #0
 8003e4e:	4618      	mov	r0, r3
 8003e50:	f001 f9ee 	bl	8005230 <RCCEx_PLL3_Config>
 8003e54:	4603      	mov	r3, r0
 8003e56:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8003e58:	e003      	b.n	8003e62 <HAL_RCCEx_PeriphCLKConfig+0x106>
      /* HSI, HSE, or CSI oscillator is used as source of SAI1 clock */
      /* SAI1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8003e5a:	2301      	movs	r3, #1
 8003e5c:	75fb      	strb	r3, [r7, #23]
      break;
 8003e5e:	e000      	b.n	8003e62 <HAL_RCCEx_PeriphCLKConfig+0x106>
      break;
 8003e60:	bf00      	nop
    }

    if(ret == HAL_OK)
 8003e62:	7dfb      	ldrb	r3, [r7, #23]
 8003e64:	2b00      	cmp	r3, #0
 8003e66:	d109      	bne.n	8003e7c <HAL_RCCEx_PeriphCLKConfig+0x120>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8003e68:	4b79      	ldr	r3, [pc, #484]	; (8004050 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8003e6a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003e6c:	f023 0207 	bic.w	r2, r3, #7
 8003e70:	687b      	ldr	r3, [r7, #4]
 8003e72:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003e74:	4976      	ldr	r1, [pc, #472]	; (8004050 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8003e76:	4313      	orrs	r3, r2
 8003e78:	650b      	str	r3, [r1, #80]	; 0x50
 8003e7a:	e001      	b.n	8003e80 <HAL_RCCEx_PeriphCLKConfig+0x124>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003e7c:	7dfb      	ldrb	r3, [r7, #23]
 8003e7e:	75bb      	strb	r3, [r7, #22]
  }
#endif  /*SAI2B*/

#if defined(SAI4)
  /*---------------------------- SAI4A configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4A) == RCC_PERIPHCLK_SAI4A)
 8003e80:	687b      	ldr	r3, [r7, #4]
 8003e82:	681b      	ldr	r3, [r3, #0]
 8003e84:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003e88:	2b00      	cmp	r3, #0
 8003e8a:	d051      	beq.n	8003f30 <HAL_RCCEx_PeriphCLKConfig+0x1d4>
  {
    switch(PeriphClkInit->Sai4AClockSelection)
 8003e8c:	687b      	ldr	r3, [r7, #4]
 8003e8e:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 8003e92:	f5b3 0f20 	cmp.w	r3, #10485760	; 0xa00000
 8003e96:	d036      	beq.n	8003f06 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
 8003e98:	f5b3 0f20 	cmp.w	r3, #10485760	; 0xa00000
 8003e9c:	d830      	bhi.n	8003f00 <HAL_RCCEx_PeriphCLKConfig+0x1a4>
 8003e9e:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8003ea2:	d032      	beq.n	8003f0a <HAL_RCCEx_PeriphCLKConfig+0x1ae>
 8003ea4:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8003ea8:	d82a      	bhi.n	8003f00 <HAL_RCCEx_PeriphCLKConfig+0x1a4>
 8003eaa:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 8003eae:	d02e      	beq.n	8003f0e <HAL_RCCEx_PeriphCLKConfig+0x1b2>
 8003eb0:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 8003eb4:	d824      	bhi.n	8003f00 <HAL_RCCEx_PeriphCLKConfig+0x1a4>
 8003eb6:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003eba:	d018      	beq.n	8003eee <HAL_RCCEx_PeriphCLKConfig+0x192>
 8003ebc:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003ec0:	d81e      	bhi.n	8003f00 <HAL_RCCEx_PeriphCLKConfig+0x1a4>
 8003ec2:	2b00      	cmp	r3, #0
 8003ec4:	d003      	beq.n	8003ece <HAL_RCCEx_PeriphCLKConfig+0x172>
 8003ec6:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8003eca:	d007      	beq.n	8003edc <HAL_RCCEx_PeriphCLKConfig+0x180>
 8003ecc:	e018      	b.n	8003f00 <HAL_RCCEx_PeriphCLKConfig+0x1a4>
    {
    case RCC_SAI4ACLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003ece:	4b60      	ldr	r3, [pc, #384]	; (8004050 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8003ed0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003ed2:	4a5f      	ldr	r2, [pc, #380]	; (8004050 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8003ed4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003ed8:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8003eda:	e019      	b.n	8003f10 <HAL_RCCEx_PeriphCLKConfig+0x1b4>

    case RCC_SAI4ACLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8003edc:	687b      	ldr	r3, [r7, #4]
 8003ede:	3304      	adds	r3, #4
 8003ee0:	2100      	movs	r1, #0
 8003ee2:	4618      	mov	r0, r3
 8003ee4:	f001 f8f2 	bl	80050cc <RCCEx_PLL2_Config>
 8003ee8:	4603      	mov	r3, r0
 8003eea:	75fb      	strb	r3, [r7, #23]

      /* SAI2 clock source configuration done later after clock selection check */
      break;
 8003eec:	e010      	b.n	8003f10 <HAL_RCCEx_PeriphCLKConfig+0x1b4>

    case RCC_SAI4ACLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 8003eee:	687b      	ldr	r3, [r7, #4]
 8003ef0:	3324      	adds	r3, #36	; 0x24
 8003ef2:	2100      	movs	r1, #0
 8003ef4:	4618      	mov	r0, r3
 8003ef6:	f001 f99b 	bl	8005230 <RCCEx_PLL3_Config>
 8003efa:	4603      	mov	r3, r0
 8003efc:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8003efe:	e007      	b.n	8003f10 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
      /* SAI4A clock source configuration done later after clock selection check */
      break;
#endif /* RCC_VER_3_0 */

    default:
      ret = HAL_ERROR;
 8003f00:	2301      	movs	r3, #1
 8003f02:	75fb      	strb	r3, [r7, #23]
      break;
 8003f04:	e004      	b.n	8003f10 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
      break;
 8003f06:	bf00      	nop
 8003f08:	e002      	b.n	8003f10 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
      break;
 8003f0a:	bf00      	nop
 8003f0c:	e000      	b.n	8003f10 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
      break;
 8003f0e:	bf00      	nop
    }

    if(ret == HAL_OK)
 8003f10:	7dfb      	ldrb	r3, [r7, #23]
 8003f12:	2b00      	cmp	r3, #0
 8003f14:	d10a      	bne.n	8003f2c <HAL_RCCEx_PeriphCLKConfig+0x1d0>
    {
      /* Set the source of SAI4A clock*/
      __HAL_RCC_SAI4A_CONFIG(PeriphClkInit->Sai4AClockSelection);
 8003f16:	4b4e      	ldr	r3, [pc, #312]	; (8004050 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8003f18:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003f1a:	f423 0260 	bic.w	r2, r3, #14680064	; 0xe00000
 8003f1e:	687b      	ldr	r3, [r7, #4]
 8003f20:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 8003f24:	494a      	ldr	r1, [pc, #296]	; (8004050 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8003f26:	4313      	orrs	r3, r2
 8003f28:	658b      	str	r3, [r1, #88]	; 0x58
 8003f2a:	e001      	b.n	8003f30 <HAL_RCCEx_PeriphCLKConfig+0x1d4>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003f2c:	7dfb      	ldrb	r3, [r7, #23]
 8003f2e:	75bb      	strb	r3, [r7, #22]
    }
  }
  /*---------------------------- SAI4B configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4B) == RCC_PERIPHCLK_SAI4B)
 8003f30:	687b      	ldr	r3, [r7, #4]
 8003f32:	681b      	ldr	r3, [r3, #0]
 8003f34:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003f38:	2b00      	cmp	r3, #0
 8003f3a:	d051      	beq.n	8003fe0 <HAL_RCCEx_PeriphCLKConfig+0x284>
  {
    switch(PeriphClkInit->Sai4BClockSelection)
 8003f3c:	687b      	ldr	r3, [r7, #4]
 8003f3e:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8003f42:	f1b3 6fa0 	cmp.w	r3, #83886080	; 0x5000000
 8003f46:	d036      	beq.n	8003fb6 <HAL_RCCEx_PeriphCLKConfig+0x25a>
 8003f48:	f1b3 6fa0 	cmp.w	r3, #83886080	; 0x5000000
 8003f4c:	d830      	bhi.n	8003fb0 <HAL_RCCEx_PeriphCLKConfig+0x254>
 8003f4e:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8003f52:	d032      	beq.n	8003fba <HAL_RCCEx_PeriphCLKConfig+0x25e>
 8003f54:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8003f58:	d82a      	bhi.n	8003fb0 <HAL_RCCEx_PeriphCLKConfig+0x254>
 8003f5a:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8003f5e:	d02e      	beq.n	8003fbe <HAL_RCCEx_PeriphCLKConfig+0x262>
 8003f60:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8003f64:	d824      	bhi.n	8003fb0 <HAL_RCCEx_PeriphCLKConfig+0x254>
 8003f66:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8003f6a:	d018      	beq.n	8003f9e <HAL_RCCEx_PeriphCLKConfig+0x242>
 8003f6c:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8003f70:	d81e      	bhi.n	8003fb0 <HAL_RCCEx_PeriphCLKConfig+0x254>
 8003f72:	2b00      	cmp	r3, #0
 8003f74:	d003      	beq.n	8003f7e <HAL_RCCEx_PeriphCLKConfig+0x222>
 8003f76:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8003f7a:	d007      	beq.n	8003f8c <HAL_RCCEx_PeriphCLKConfig+0x230>
 8003f7c:	e018      	b.n	8003fb0 <HAL_RCCEx_PeriphCLKConfig+0x254>
    {
    case RCC_SAI4BCLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003f7e:	4b34      	ldr	r3, [pc, #208]	; (8004050 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8003f80:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003f82:	4a33      	ldr	r2, [pc, #204]	; (8004050 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8003f84:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003f88:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8003f8a:	e019      	b.n	8003fc0 <HAL_RCCEx_PeriphCLKConfig+0x264>

    case RCC_SAI4BCLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8003f8c:	687b      	ldr	r3, [r7, #4]
 8003f8e:	3304      	adds	r3, #4
 8003f90:	2100      	movs	r1, #0
 8003f92:	4618      	mov	r0, r3
 8003f94:	f001 f89a 	bl	80050cc <RCCEx_PLL2_Config>
 8003f98:	4603      	mov	r3, r0
 8003f9a:	75fb      	strb	r3, [r7, #23]

      /* SAI2 clock source configuration done later after clock selection check */
      break;
 8003f9c:	e010      	b.n	8003fc0 <HAL_RCCEx_PeriphCLKConfig+0x264>

    case RCC_SAI4BCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8003f9e:	687b      	ldr	r3, [r7, #4]
 8003fa0:	3324      	adds	r3, #36	; 0x24
 8003fa2:	2100      	movs	r1, #0
 8003fa4:	4618      	mov	r0, r3
 8003fa6:	f001 f943 	bl	8005230 <RCCEx_PLL3_Config>
 8003faa:	4603      	mov	r3, r0
 8003fac:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8003fae:	e007      	b.n	8003fc0 <HAL_RCCEx_PeriphCLKConfig+0x264>
      /* SAI4B clock source configuration done later after clock selection check */
      break;
#endif /* RCC_VER_3_0 */

    default:
      ret = HAL_ERROR;
 8003fb0:	2301      	movs	r3, #1
 8003fb2:	75fb      	strb	r3, [r7, #23]
      break;
 8003fb4:	e004      	b.n	8003fc0 <HAL_RCCEx_PeriphCLKConfig+0x264>
      break;
 8003fb6:	bf00      	nop
 8003fb8:	e002      	b.n	8003fc0 <HAL_RCCEx_PeriphCLKConfig+0x264>
      break;
 8003fba:	bf00      	nop
 8003fbc:	e000      	b.n	8003fc0 <HAL_RCCEx_PeriphCLKConfig+0x264>
      break;
 8003fbe:	bf00      	nop
    }

    if(ret == HAL_OK)
 8003fc0:	7dfb      	ldrb	r3, [r7, #23]
 8003fc2:	2b00      	cmp	r3, #0
 8003fc4:	d10a      	bne.n	8003fdc <HAL_RCCEx_PeriphCLKConfig+0x280>
    {
      /* Set the source of SAI4B clock*/
      __HAL_RCC_SAI4B_CONFIG(PeriphClkInit->Sai4BClockSelection);
 8003fc6:	4b22      	ldr	r3, [pc, #136]	; (8004050 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8003fc8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003fca:	f023 62e0 	bic.w	r2, r3, #117440512	; 0x7000000
 8003fce:	687b      	ldr	r3, [r7, #4]
 8003fd0:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8003fd4:	491e      	ldr	r1, [pc, #120]	; (8004050 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8003fd6:	4313      	orrs	r3, r2
 8003fd8:	658b      	str	r3, [r1, #88]	; 0x58
 8003fda:	e001      	b.n	8003fe0 <HAL_RCCEx_PeriphCLKConfig+0x284>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003fdc:	7dfb      	ldrb	r3, [r7, #23]
 8003fde:	75bb      	strb	r3, [r7, #22]
  }
#endif  /*QUADSPI*/

#if defined(OCTOSPI1) || defined(OCTOSPI2)
  /*---------------------------- OCTOSPI configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_OSPI) == RCC_PERIPHCLK_OSPI)
 8003fe0:	687b      	ldr	r3, [r7, #4]
 8003fe2:	681b      	ldr	r3, [r3, #0]
 8003fe4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003fe8:	2b00      	cmp	r3, #0
 8003fea:	d035      	beq.n	8004058 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
  {
    switch(PeriphClkInit->OspiClockSelection)
 8003fec:	687b      	ldr	r3, [r7, #4]
 8003fee:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003ff0:	2b30      	cmp	r3, #48	; 0x30
 8003ff2:	d01c      	beq.n	800402e <HAL_RCCEx_PeriphCLKConfig+0x2d2>
 8003ff4:	2b30      	cmp	r3, #48	; 0x30
 8003ff6:	d817      	bhi.n	8004028 <HAL_RCCEx_PeriphCLKConfig+0x2cc>
 8003ff8:	2b20      	cmp	r3, #32
 8003ffa:	d00c      	beq.n	8004016 <HAL_RCCEx_PeriphCLKConfig+0x2ba>
 8003ffc:	2b20      	cmp	r3, #32
 8003ffe:	d813      	bhi.n	8004028 <HAL_RCCEx_PeriphCLKConfig+0x2cc>
 8004000:	2b00      	cmp	r3, #0
 8004002:	d016      	beq.n	8004032 <HAL_RCCEx_PeriphCLKConfig+0x2d6>
 8004004:	2b10      	cmp	r3, #16
 8004006:	d10f      	bne.n	8004028 <HAL_RCCEx_PeriphCLKConfig+0x2cc>
    {
    case RCC_OSPICLKSOURCE_PLL:      /* PLL is used as clock source for OSPI*/
      /* Enable OSPI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8004008:	4b11      	ldr	r3, [pc, #68]	; (8004050 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 800400a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800400c:	4a10      	ldr	r2, [pc, #64]	; (8004050 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 800400e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004012:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* OSPI clock source configuration done later after clock selection check */
      break;
 8004014:	e00e      	b.n	8004034 <HAL_RCCEx_PeriphCLKConfig+0x2d8>

    case RCC_OSPICLKSOURCE_PLL2: /* PLL2 is used as clock source for OSPI*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 8004016:	687b      	ldr	r3, [r7, #4]
 8004018:	3304      	adds	r3, #4
 800401a:	2102      	movs	r1, #2
 800401c:	4618      	mov	r0, r3
 800401e:	f001 f855 	bl	80050cc <RCCEx_PLL2_Config>
 8004022:	4603      	mov	r3, r0
 8004024:	75fb      	strb	r3, [r7, #23]

      /* OSPI clock source configuration done later after clock selection check */
      break;
 8004026:	e005      	b.n	8004034 <HAL_RCCEx_PeriphCLKConfig+0x2d8>
    case RCC_OSPICLKSOURCE_HCLK:
      /* HCLK clock selected as OSPI kernel peripheral clock */
      break;

    default:
      ret = HAL_ERROR;
 8004028:	2301      	movs	r3, #1
 800402a:	75fb      	strb	r3, [r7, #23]
      break;
 800402c:	e002      	b.n	8004034 <HAL_RCCEx_PeriphCLKConfig+0x2d8>
      break;
 800402e:	bf00      	nop
 8004030:	e000      	b.n	8004034 <HAL_RCCEx_PeriphCLKConfig+0x2d8>
      break;
 8004032:	bf00      	nop
    }

    if(ret == HAL_OK)
 8004034:	7dfb      	ldrb	r3, [r7, #23]
 8004036:	2b00      	cmp	r3, #0
 8004038:	d10c      	bne.n	8004054 <HAL_RCCEx_PeriphCLKConfig+0x2f8>
    {
      /* Set the source of OSPI clock*/
      __HAL_RCC_OSPI_CONFIG(PeriphClkInit->OspiClockSelection);
 800403a:	4b05      	ldr	r3, [pc, #20]	; (8004050 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 800403c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800403e:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8004042:	687b      	ldr	r3, [r7, #4]
 8004044:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004046:	4902      	ldr	r1, [pc, #8]	; (8004050 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8004048:	4313      	orrs	r3, r2
 800404a:	64cb      	str	r3, [r1, #76]	; 0x4c
 800404c:	e004      	b.n	8004058 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
 800404e:	bf00      	nop
 8004050:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004054:	7dfb      	ldrb	r3, [r7, #23]
 8004056:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif  /*OCTOSPI*/

  /*---------------------------- SPI1/2/3 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI123) == RCC_PERIPHCLK_SPI123)
 8004058:	687b      	ldr	r3, [r7, #4]
 800405a:	681b      	ldr	r3, [r3, #0]
 800405c:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8004060:	2b00      	cmp	r3, #0
 8004062:	d047      	beq.n	80040f4 <HAL_RCCEx_PeriphCLKConfig+0x398>
  {
    switch(PeriphClkInit->Spi123ClockSelection)
 8004064:	687b      	ldr	r3, [r7, #4]
 8004066:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004068:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800406c:	d030      	beq.n	80040d0 <HAL_RCCEx_PeriphCLKConfig+0x374>
 800406e:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8004072:	d82a      	bhi.n	80040ca <HAL_RCCEx_PeriphCLKConfig+0x36e>
 8004074:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8004078:	d02c      	beq.n	80040d4 <HAL_RCCEx_PeriphCLKConfig+0x378>
 800407a:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 800407e:	d824      	bhi.n	80040ca <HAL_RCCEx_PeriphCLKConfig+0x36e>
 8004080:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004084:	d018      	beq.n	80040b8 <HAL_RCCEx_PeriphCLKConfig+0x35c>
 8004086:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800408a:	d81e      	bhi.n	80040ca <HAL_RCCEx_PeriphCLKConfig+0x36e>
 800408c:	2b00      	cmp	r3, #0
 800408e:	d003      	beq.n	8004098 <HAL_RCCEx_PeriphCLKConfig+0x33c>
 8004090:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004094:	d007      	beq.n	80040a6 <HAL_RCCEx_PeriphCLKConfig+0x34a>
 8004096:	e018      	b.n	80040ca <HAL_RCCEx_PeriphCLKConfig+0x36e>
    {
    case RCC_SPI123CLKSOURCE_PLL:      /* PLL is used as clock source for SPI1/2/3 */
      /* Enable SPI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8004098:	4bac      	ldr	r3, [pc, #688]	; (800434c <HAL_RCCEx_PeriphCLKConfig+0x5f0>)
 800409a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800409c:	4aab      	ldr	r2, [pc, #684]	; (800434c <HAL_RCCEx_PeriphCLKConfig+0x5f0>)
 800409e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80040a2:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 80040a4:	e017      	b.n	80040d6 <HAL_RCCEx_PeriphCLKConfig+0x37a>

    case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI1/2/3 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 80040a6:	687b      	ldr	r3, [r7, #4]
 80040a8:	3304      	adds	r3, #4
 80040aa:	2100      	movs	r1, #0
 80040ac:	4618      	mov	r0, r3
 80040ae:	f001 f80d 	bl	80050cc <RCCEx_PLL2_Config>
 80040b2:	4603      	mov	r3, r0
 80040b4:	75fb      	strb	r3, [r7, #23]

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 80040b6:	e00e      	b.n	80040d6 <HAL_RCCEx_PeriphCLKConfig+0x37a>

    case RCC_SPI123CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI1/2/3 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 80040b8:	687b      	ldr	r3, [r7, #4]
 80040ba:	3324      	adds	r3, #36	; 0x24
 80040bc:	2100      	movs	r1, #0
 80040be:	4618      	mov	r0, r3
 80040c0:	f001 f8b6 	bl	8005230 <RCCEx_PLL3_Config>
 80040c4:	4603      	mov	r3, r0
 80040c6:	75fb      	strb	r3, [r7, #23]

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 80040c8:	e005      	b.n	80040d6 <HAL_RCCEx_PeriphCLKConfig+0x37a>
      /* HSI, HSE, or CSI oscillator is used as source of SPI1/2/3 clock */
      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80040ca:	2301      	movs	r3, #1
 80040cc:	75fb      	strb	r3, [r7, #23]
      break;
 80040ce:	e002      	b.n	80040d6 <HAL_RCCEx_PeriphCLKConfig+0x37a>
      break;
 80040d0:	bf00      	nop
 80040d2:	e000      	b.n	80040d6 <HAL_RCCEx_PeriphCLKConfig+0x37a>
      break;
 80040d4:	bf00      	nop
    }

    if(ret == HAL_OK)
 80040d6:	7dfb      	ldrb	r3, [r7, #23]
 80040d8:	2b00      	cmp	r3, #0
 80040da:	d109      	bne.n	80040f0 <HAL_RCCEx_PeriphCLKConfig+0x394>
    {
      /* Set the source of SPI1/2/3 clock*/
      __HAL_RCC_SPI123_CONFIG(PeriphClkInit->Spi123ClockSelection);
 80040dc:	4b9b      	ldr	r3, [pc, #620]	; (800434c <HAL_RCCEx_PeriphCLKConfig+0x5f0>)
 80040de:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80040e0:	f423 42e0 	bic.w	r2, r3, #28672	; 0x7000
 80040e4:	687b      	ldr	r3, [r7, #4]
 80040e6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80040e8:	4998      	ldr	r1, [pc, #608]	; (800434c <HAL_RCCEx_PeriphCLKConfig+0x5f0>)
 80040ea:	4313      	orrs	r3, r2
 80040ec:	650b      	str	r3, [r1, #80]	; 0x50
 80040ee:	e001      	b.n	80040f4 <HAL_RCCEx_PeriphCLKConfig+0x398>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80040f0:	7dfb      	ldrb	r3, [r7, #23]
 80040f2:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SPI4/5 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) == RCC_PERIPHCLK_SPI45)
 80040f4:	687b      	ldr	r3, [r7, #4]
 80040f6:	681b      	ldr	r3, [r3, #0]
 80040f8:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80040fc:	2b00      	cmp	r3, #0
 80040fe:	d049      	beq.n	8004194 <HAL_RCCEx_PeriphCLKConfig+0x438>
  {
    switch(PeriphClkInit->Spi45ClockSelection)
 8004100:	687b      	ldr	r3, [r7, #4]
 8004102:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004104:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8004108:	d02e      	beq.n	8004168 <HAL_RCCEx_PeriphCLKConfig+0x40c>
 800410a:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800410e:	d828      	bhi.n	8004162 <HAL_RCCEx_PeriphCLKConfig+0x406>
 8004110:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8004114:	d02a      	beq.n	800416c <HAL_RCCEx_PeriphCLKConfig+0x410>
 8004116:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 800411a:	d822      	bhi.n	8004162 <HAL_RCCEx_PeriphCLKConfig+0x406>
 800411c:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8004120:	d026      	beq.n	8004170 <HAL_RCCEx_PeriphCLKConfig+0x414>
 8004122:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8004126:	d81c      	bhi.n	8004162 <HAL_RCCEx_PeriphCLKConfig+0x406>
 8004128:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800412c:	d010      	beq.n	8004150 <HAL_RCCEx_PeriphCLKConfig+0x3f4>
 800412e:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8004132:	d816      	bhi.n	8004162 <HAL_RCCEx_PeriphCLKConfig+0x406>
 8004134:	2b00      	cmp	r3, #0
 8004136:	d01d      	beq.n	8004174 <HAL_RCCEx_PeriphCLKConfig+0x418>
 8004138:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800413c:	d111      	bne.n	8004162 <HAL_RCCEx_PeriphCLKConfig+0x406>
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;

    case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI4/5 */

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 800413e:	687b      	ldr	r3, [r7, #4]
 8004140:	3304      	adds	r3, #4
 8004142:	2101      	movs	r1, #1
 8004144:	4618      	mov	r0, r3
 8004146:	f000 ffc1 	bl	80050cc <RCCEx_PLL2_Config>
 800414a:	4603      	mov	r3, r0
 800414c:	75fb      	strb	r3, [r7, #23]

      /* SPI4/5 clock source configuration done later after clock selection check */
      break;
 800414e:	e012      	b.n	8004176 <HAL_RCCEx_PeriphCLKConfig+0x41a>
    case RCC_SPI45CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI4/5 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8004150:	687b      	ldr	r3, [r7, #4]
 8004152:	3324      	adds	r3, #36	; 0x24
 8004154:	2101      	movs	r1, #1
 8004156:	4618      	mov	r0, r3
 8004158:	f001 f86a 	bl	8005230 <RCCEx_PLL3_Config>
 800415c:	4603      	mov	r3, r0
 800415e:	75fb      	strb	r3, [r7, #23]
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;
 8004160:	e009      	b.n	8004176 <HAL_RCCEx_PeriphCLKConfig+0x41a>
      /* HSE,  oscillator is used as source of SPI4/5 clock */
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8004162:	2301      	movs	r3, #1
 8004164:	75fb      	strb	r3, [r7, #23]
      break;
 8004166:	e006      	b.n	8004176 <HAL_RCCEx_PeriphCLKConfig+0x41a>
      break;
 8004168:	bf00      	nop
 800416a:	e004      	b.n	8004176 <HAL_RCCEx_PeriphCLKConfig+0x41a>
      break;
 800416c:	bf00      	nop
 800416e:	e002      	b.n	8004176 <HAL_RCCEx_PeriphCLKConfig+0x41a>
      break;
 8004170:	bf00      	nop
 8004172:	e000      	b.n	8004176 <HAL_RCCEx_PeriphCLKConfig+0x41a>
      break;
 8004174:	bf00      	nop
    }

    if(ret == HAL_OK)
 8004176:	7dfb      	ldrb	r3, [r7, #23]
 8004178:	2b00      	cmp	r3, #0
 800417a:	d109      	bne.n	8004190 <HAL_RCCEx_PeriphCLKConfig+0x434>
    {
      /* Set the source of SPI4/5 clock*/
      __HAL_RCC_SPI45_CONFIG(PeriphClkInit->Spi45ClockSelection);
 800417c:	4b73      	ldr	r3, [pc, #460]	; (800434c <HAL_RCCEx_PeriphCLKConfig+0x5f0>)
 800417e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004180:	f423 22e0 	bic.w	r2, r3, #458752	; 0x70000
 8004184:	687b      	ldr	r3, [r7, #4]
 8004186:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004188:	4970      	ldr	r1, [pc, #448]	; (800434c <HAL_RCCEx_PeriphCLKConfig+0x5f0>)
 800418a:	4313      	orrs	r3, r2
 800418c:	650b      	str	r3, [r1, #80]	; 0x50
 800418e:	e001      	b.n	8004194 <HAL_RCCEx_PeriphCLKConfig+0x438>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004190:	7dfb      	ldrb	r3, [r7, #23]
 8004192:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SPI6 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 8004194:	687b      	ldr	r3, [r7, #4]
 8004196:	681b      	ldr	r3, [r3, #0]
 8004198:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800419c:	2b00      	cmp	r3, #0
 800419e:	d04b      	beq.n	8004238 <HAL_RCCEx_PeriphCLKConfig+0x4dc>
  {
    switch(PeriphClkInit->Spi6ClockSelection)
 80041a0:	687b      	ldr	r3, [r7, #4]
 80041a2:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 80041a6:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80041aa:	d02e      	beq.n	800420a <HAL_RCCEx_PeriphCLKConfig+0x4ae>
 80041ac:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80041b0:	d828      	bhi.n	8004204 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
 80041b2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80041b6:	d02a      	beq.n	800420e <HAL_RCCEx_PeriphCLKConfig+0x4b2>
 80041b8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80041bc:	d822      	bhi.n	8004204 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
 80041be:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 80041c2:	d026      	beq.n	8004212 <HAL_RCCEx_PeriphCLKConfig+0x4b6>
 80041c4:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 80041c8:	d81c      	bhi.n	8004204 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
 80041ca:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80041ce:	d010      	beq.n	80041f2 <HAL_RCCEx_PeriphCLKConfig+0x496>
 80041d0:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80041d4:	d816      	bhi.n	8004204 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
 80041d6:	2b00      	cmp	r3, #0
 80041d8:	d01d      	beq.n	8004216 <HAL_RCCEx_PeriphCLKConfig+0x4ba>
 80041da:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80041de:	d111      	bne.n	8004204 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
      /* SPI6 clock source configuration done later after clock selection check */
      break;

    case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI6*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 80041e0:	687b      	ldr	r3, [r7, #4]
 80041e2:	3304      	adds	r3, #4
 80041e4:	2101      	movs	r1, #1
 80041e6:	4618      	mov	r0, r3
 80041e8:	f000 ff70 	bl	80050cc <RCCEx_PLL2_Config>
 80041ec:	4603      	mov	r3, r0
 80041ee:	75fb      	strb	r3, [r7, #23]

      /* SPI6 clock source configuration done later after clock selection check */
      break;
 80041f0:	e012      	b.n	8004218 <HAL_RCCEx_PeriphCLKConfig+0x4bc>
    case RCC_SPI6CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI6*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 80041f2:	687b      	ldr	r3, [r7, #4]
 80041f4:	3324      	adds	r3, #36	; 0x24
 80041f6:	2101      	movs	r1, #1
 80041f8:	4618      	mov	r0, r3
 80041fa:	f001 f819 	bl	8005230 <RCCEx_PLL3_Config>
 80041fe:	4603      	mov	r3, r0
 8004200:	75fb      	strb	r3, [r7, #23]
      /* SPI6 clock source configuration done later after clock selection check */
      break;
 8004202:	e009      	b.n	8004218 <HAL_RCCEx_PeriphCLKConfig+0x4bc>
      /* SPI6 clock source configuration done later after clock selection check */
      break;
#endif

    default:
      ret = HAL_ERROR;
 8004204:	2301      	movs	r3, #1
 8004206:	75fb      	strb	r3, [r7, #23]
      break;
 8004208:	e006      	b.n	8004218 <HAL_RCCEx_PeriphCLKConfig+0x4bc>
      break;
 800420a:	bf00      	nop
 800420c:	e004      	b.n	8004218 <HAL_RCCEx_PeriphCLKConfig+0x4bc>
      break;
 800420e:	bf00      	nop
 8004210:	e002      	b.n	8004218 <HAL_RCCEx_PeriphCLKConfig+0x4bc>
      break;
 8004212:	bf00      	nop
 8004214:	e000      	b.n	8004218 <HAL_RCCEx_PeriphCLKConfig+0x4bc>
      break;
 8004216:	bf00      	nop
    }

    if(ret == HAL_OK)
 8004218:	7dfb      	ldrb	r3, [r7, #23]
 800421a:	2b00      	cmp	r3, #0
 800421c:	d10a      	bne.n	8004234 <HAL_RCCEx_PeriphCLKConfig+0x4d8>
    {
      /* Set the source of SPI6 clock*/
      __HAL_RCC_SPI6_CONFIG(PeriphClkInit->Spi6ClockSelection);
 800421e:	4b4b      	ldr	r3, [pc, #300]	; (800434c <HAL_RCCEx_PeriphCLKConfig+0x5f0>)
 8004220:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004222:	f023 42e0 	bic.w	r2, r3, #1879048192	; 0x70000000
 8004226:	687b      	ldr	r3, [r7, #4]
 8004228:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 800422c:	4947      	ldr	r1, [pc, #284]	; (800434c <HAL_RCCEx_PeriphCLKConfig+0x5f0>)
 800422e:	4313      	orrs	r3, r2
 8004230:	658b      	str	r3, [r1, #88]	; 0x58
 8004232:	e001      	b.n	8004238 <HAL_RCCEx_PeriphCLKConfig+0x4dc>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004234:	7dfb      	ldrb	r3, [r7, #23]
 8004236:	75bb      	strb	r3, [r7, #22]
  }
#endif /*DSI*/

#if defined(FDCAN1) || defined(FDCAN2)
  /*---------------------------- FDCAN configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8004238:	687b      	ldr	r3, [r7, #4]
 800423a:	681b      	ldr	r3, [r3, #0]
 800423c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8004240:	2b00      	cmp	r3, #0
 8004242:	d02f      	beq.n	80042a4 <HAL_RCCEx_PeriphCLKConfig+0x548>
  {
    switch(PeriphClkInit->FdcanClockSelection)
 8004244:	687b      	ldr	r3, [r7, #4]
 8004246:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8004248:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800424c:	d00e      	beq.n	800426c <HAL_RCCEx_PeriphCLKConfig+0x510>
 800424e:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8004252:	d814      	bhi.n	800427e <HAL_RCCEx_PeriphCLKConfig+0x522>
 8004254:	2b00      	cmp	r3, #0
 8004256:	d015      	beq.n	8004284 <HAL_RCCEx_PeriphCLKConfig+0x528>
 8004258:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800425c:	d10f      	bne.n	800427e <HAL_RCCEx_PeriphCLKConfig+0x522>
    {
    case RCC_FDCANCLKSOURCE_PLL:      /* PLL is used as clock source for FDCAN*/
      /* Enable FDCAN Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800425e:	4b3b      	ldr	r3, [pc, #236]	; (800434c <HAL_RCCEx_PeriphCLKConfig+0x5f0>)
 8004260:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004262:	4a3a      	ldr	r2, [pc, #232]	; (800434c <HAL_RCCEx_PeriphCLKConfig+0x5f0>)
 8004264:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004268:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* FDCAN clock source configuration done later after clock selection check */
      break;
 800426a:	e00c      	b.n	8004286 <HAL_RCCEx_PeriphCLKConfig+0x52a>

    case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is used as clock source for FDCAN*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 800426c:	687b      	ldr	r3, [r7, #4]
 800426e:	3304      	adds	r3, #4
 8004270:	2101      	movs	r1, #1
 8004272:	4618      	mov	r0, r3
 8004274:	f000 ff2a 	bl	80050cc <RCCEx_PLL2_Config>
 8004278:	4603      	mov	r3, r0
 800427a:	75fb      	strb	r3, [r7, #23]

      /* FDCAN clock source configuration done later after clock selection check */
      break;
 800427c:	e003      	b.n	8004286 <HAL_RCCEx_PeriphCLKConfig+0x52a>
      /* HSE is used as clock source for FDCAN*/
      /* FDCAN clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800427e:	2301      	movs	r3, #1
 8004280:	75fb      	strb	r3, [r7, #23]
      break;
 8004282:	e000      	b.n	8004286 <HAL_RCCEx_PeriphCLKConfig+0x52a>
      break;
 8004284:	bf00      	nop
    }

    if(ret == HAL_OK)
 8004286:	7dfb      	ldrb	r3, [r7, #23]
 8004288:	2b00      	cmp	r3, #0
 800428a:	d109      	bne.n	80042a0 <HAL_RCCEx_PeriphCLKConfig+0x544>
    {
      /* Set the source of FDCAN clock*/
      __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 800428c:	4b2f      	ldr	r3, [pc, #188]	; (800434c <HAL_RCCEx_PeriphCLKConfig+0x5f0>)
 800428e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004290:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8004294:	687b      	ldr	r3, [r7, #4]
 8004296:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8004298:	492c      	ldr	r1, [pc, #176]	; (800434c <HAL_RCCEx_PeriphCLKConfig+0x5f0>)
 800429a:	4313      	orrs	r3, r2
 800429c:	650b      	str	r3, [r1, #80]	; 0x50
 800429e:	e001      	b.n	80042a4 <HAL_RCCEx_PeriphCLKConfig+0x548>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80042a0:	7dfb      	ldrb	r3, [r7, #23]
 80042a2:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif /*FDCAN1 || FDCAN2*/

  /*---------------------------- FMC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
 80042a4:	687b      	ldr	r3, [r7, #4]
 80042a6:	681b      	ldr	r3, [r3, #0]
 80042a8:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80042ac:	2b00      	cmp	r3, #0
 80042ae:	d032      	beq.n	8004316 <HAL_RCCEx_PeriphCLKConfig+0x5ba>
  {
    switch(PeriphClkInit->FmcClockSelection)
 80042b0:	687b      	ldr	r3, [r7, #4]
 80042b2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80042b4:	2b03      	cmp	r3, #3
 80042b6:	d81b      	bhi.n	80042f0 <HAL_RCCEx_PeriphCLKConfig+0x594>
 80042b8:	a201      	add	r2, pc, #4	; (adr r2, 80042c0 <HAL_RCCEx_PeriphCLKConfig+0x564>)
 80042ba:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80042be:	bf00      	nop
 80042c0:	080042f7 	.word	0x080042f7
 80042c4:	080042d1 	.word	0x080042d1
 80042c8:	080042df 	.word	0x080042df
 80042cc:	080042f7 	.word	0x080042f7
    {
    case RCC_FMCCLKSOURCE_PLL:      /* PLL is used as clock source for FMC*/
      /* Enable FMC Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80042d0:	4b1e      	ldr	r3, [pc, #120]	; (800434c <HAL_RCCEx_PeriphCLKConfig+0x5f0>)
 80042d2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80042d4:	4a1d      	ldr	r2, [pc, #116]	; (800434c <HAL_RCCEx_PeriphCLKConfig+0x5f0>)
 80042d6:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80042da:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* FMC clock source configuration done later after clock selection check */
      break;
 80042dc:	e00c      	b.n	80042f8 <HAL_RCCEx_PeriphCLKConfig+0x59c>

    case RCC_FMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for FMC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 80042de:	687b      	ldr	r3, [r7, #4]
 80042e0:	3304      	adds	r3, #4
 80042e2:	2102      	movs	r1, #2
 80042e4:	4618      	mov	r0, r3
 80042e6:	f000 fef1 	bl	80050cc <RCCEx_PLL2_Config>
 80042ea:	4603      	mov	r3, r0
 80042ec:	75fb      	strb	r3, [r7, #23]

      /* FMC clock source configuration done later after clock selection check */
      break;
 80042ee:	e003      	b.n	80042f8 <HAL_RCCEx_PeriphCLKConfig+0x59c>
    case RCC_FMCCLKSOURCE_HCLK:
      /* D1/CD HCLK  clock selected as FMC kernel peripheral clock */
      break;

    default:
      ret = HAL_ERROR;
 80042f0:	2301      	movs	r3, #1
 80042f2:	75fb      	strb	r3, [r7, #23]
      break;
 80042f4:	e000      	b.n	80042f8 <HAL_RCCEx_PeriphCLKConfig+0x59c>
      break;
 80042f6:	bf00      	nop
    }

    if(ret == HAL_OK)
 80042f8:	7dfb      	ldrb	r3, [r7, #23]
 80042fa:	2b00      	cmp	r3, #0
 80042fc:	d109      	bne.n	8004312 <HAL_RCCEx_PeriphCLKConfig+0x5b6>
    {
      /* Set the source of FMC clock*/
      __HAL_RCC_FMC_CONFIG(PeriphClkInit->FmcClockSelection);
 80042fe:	4b13      	ldr	r3, [pc, #76]	; (800434c <HAL_RCCEx_PeriphCLKConfig+0x5f0>)
 8004300:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004302:	f023 0203 	bic.w	r2, r3, #3
 8004306:	687b      	ldr	r3, [r7, #4]
 8004308:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800430a:	4910      	ldr	r1, [pc, #64]	; (800434c <HAL_RCCEx_PeriphCLKConfig+0x5f0>)
 800430c:	4313      	orrs	r3, r2
 800430e:	64cb      	str	r3, [r1, #76]	; 0x4c
 8004310:	e001      	b.n	8004316 <HAL_RCCEx_PeriphCLKConfig+0x5ba>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004312:	7dfb      	ldrb	r3, [r7, #23]
 8004314:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8004316:	687b      	ldr	r3, [r7, #4]
 8004318:	681b      	ldr	r3, [r3, #0]
 800431a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800431e:	2b00      	cmp	r3, #0
 8004320:	f000 808a 	beq.w	8004438 <HAL_RCCEx_PeriphCLKConfig+0x6dc>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8004324:	4b0a      	ldr	r3, [pc, #40]	; (8004350 <HAL_RCCEx_PeriphCLKConfig+0x5f4>)
 8004326:	681b      	ldr	r3, [r3, #0]
 8004328:	4a09      	ldr	r2, [pc, #36]	; (8004350 <HAL_RCCEx_PeriphCLKConfig+0x5f4>)
 800432a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800432e:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8004330:	f7fd f858 	bl	80013e4 <HAL_GetTick>
 8004334:	6138      	str	r0, [r7, #16]

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8004336:	e00d      	b.n	8004354 <HAL_RCCEx_PeriphCLKConfig+0x5f8>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004338:	f7fd f854 	bl	80013e4 <HAL_GetTick>
 800433c:	4602      	mov	r2, r0
 800433e:	693b      	ldr	r3, [r7, #16]
 8004340:	1ad3      	subs	r3, r2, r3
 8004342:	2b64      	cmp	r3, #100	; 0x64
 8004344:	d906      	bls.n	8004354 <HAL_RCCEx_PeriphCLKConfig+0x5f8>
      {
        ret = HAL_TIMEOUT;
 8004346:	2303      	movs	r3, #3
 8004348:	75fb      	strb	r3, [r7, #23]
        break;
 800434a:	e009      	b.n	8004360 <HAL_RCCEx_PeriphCLKConfig+0x604>
 800434c:	58024400 	.word	0x58024400
 8004350:	58024800 	.word	0x58024800
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8004354:	4bb9      	ldr	r3, [pc, #740]	; (800463c <HAL_RCCEx_PeriphCLKConfig+0x8e0>)
 8004356:	681b      	ldr	r3, [r3, #0]
 8004358:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800435c:	2b00      	cmp	r3, #0
 800435e:	d0eb      	beq.n	8004338 <HAL_RCCEx_PeriphCLKConfig+0x5dc>
      }
    }

    if(ret == HAL_OK)
 8004360:	7dfb      	ldrb	r3, [r7, #23]
 8004362:	2b00      	cmp	r3, #0
 8004364:	d166      	bne.n	8004434 <HAL_RCCEx_PeriphCLKConfig+0x6d8>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if((RCC->BDCR & RCC_BDCR_RTCSEL) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL))
 8004366:	4bb6      	ldr	r3, [pc, #728]	; (8004640 <HAL_RCCEx_PeriphCLKConfig+0x8e4>)
 8004368:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 800436a:	687b      	ldr	r3, [r7, #4]
 800436c:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 8004370:	4053      	eors	r3, r2
 8004372:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004376:	2b00      	cmp	r3, #0
 8004378:	d013      	beq.n	80043a2 <HAL_RCCEx_PeriphCLKConfig+0x646>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 800437a:	4bb1      	ldr	r3, [pc, #708]	; (8004640 <HAL_RCCEx_PeriphCLKConfig+0x8e4>)
 800437c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800437e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004382:	60fb      	str	r3, [r7, #12]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8004384:	4bae      	ldr	r3, [pc, #696]	; (8004640 <HAL_RCCEx_PeriphCLKConfig+0x8e4>)
 8004386:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004388:	4aad      	ldr	r2, [pc, #692]	; (8004640 <HAL_RCCEx_PeriphCLKConfig+0x8e4>)
 800438a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800438e:	6713      	str	r3, [r2, #112]	; 0x70
        __HAL_RCC_BACKUPRESET_RELEASE();
 8004390:	4bab      	ldr	r3, [pc, #684]	; (8004640 <HAL_RCCEx_PeriphCLKConfig+0x8e4>)
 8004392:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004394:	4aaa      	ldr	r2, [pc, #680]	; (8004640 <HAL_RCCEx_PeriphCLKConfig+0x8e4>)
 8004396:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800439a:	6713      	str	r3, [r2, #112]	; 0x70
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpreg;
 800439c:	4aa8      	ldr	r2, [pc, #672]	; (8004640 <HAL_RCCEx_PeriphCLKConfig+0x8e4>)
 800439e:	68fb      	ldr	r3, [r7, #12]
 80043a0:	6713      	str	r3, [r2, #112]	; 0x70
      }

      /* If LSE is selected as RTC clock source (and enabled prior to Backup Domain reset), wait for LSE reactivation */
      if(PeriphClkInit->RTCClockSelection == RCC_RTCCLKSOURCE_LSE)
 80043a2:	687b      	ldr	r3, [r7, #4]
 80043a4:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 80043a8:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80043ac:	d115      	bne.n	80043da <HAL_RCCEx_PeriphCLKConfig+0x67e>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80043ae:	f7fd f819 	bl	80013e4 <HAL_GetTick>
 80043b2:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80043b4:	e00b      	b.n	80043ce <HAL_RCCEx_PeriphCLKConfig+0x672>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80043b6:	f7fd f815 	bl	80013e4 <HAL_GetTick>
 80043ba:	4602      	mov	r2, r0
 80043bc:	693b      	ldr	r3, [r7, #16]
 80043be:	1ad3      	subs	r3, r2, r3
 80043c0:	f241 3288 	movw	r2, #5000	; 0x1388
 80043c4:	4293      	cmp	r3, r2
 80043c6:	d902      	bls.n	80043ce <HAL_RCCEx_PeriphCLKConfig+0x672>
          {
            ret = HAL_TIMEOUT;
 80043c8:	2303      	movs	r3, #3
 80043ca:	75fb      	strb	r3, [r7, #23]
            break;
 80043cc:	e005      	b.n	80043da <HAL_RCCEx_PeriphCLKConfig+0x67e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80043ce:	4b9c      	ldr	r3, [pc, #624]	; (8004640 <HAL_RCCEx_PeriphCLKConfig+0x8e4>)
 80043d0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80043d2:	f003 0302 	and.w	r3, r3, #2
 80043d6:	2b00      	cmp	r3, #0
 80043d8:	d0ed      	beq.n	80043b6 <HAL_RCCEx_PeriphCLKConfig+0x65a>
          }
        }
      }

      if(ret == HAL_OK)
 80043da:	7dfb      	ldrb	r3, [r7, #23]
 80043dc:	2b00      	cmp	r3, #0
 80043de:	d126      	bne.n	800442e <HAL_RCCEx_PeriphCLKConfig+0x6d2>
      {
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80043e0:	687b      	ldr	r3, [r7, #4]
 80043e2:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 80043e6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80043ea:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80043ee:	d10d      	bne.n	800440c <HAL_RCCEx_PeriphCLKConfig+0x6b0>
 80043f0:	4b93      	ldr	r3, [pc, #588]	; (8004640 <HAL_RCCEx_PeriphCLKConfig+0x8e4>)
 80043f2:	691b      	ldr	r3, [r3, #16]
 80043f4:	f423 527c 	bic.w	r2, r3, #16128	; 0x3f00
 80043f8:	687b      	ldr	r3, [r7, #4]
 80043fa:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 80043fe:	0919      	lsrs	r1, r3, #4
 8004400:	4b90      	ldr	r3, [pc, #576]	; (8004644 <HAL_RCCEx_PeriphCLKConfig+0x8e8>)
 8004402:	400b      	ands	r3, r1
 8004404:	498e      	ldr	r1, [pc, #568]	; (8004640 <HAL_RCCEx_PeriphCLKConfig+0x8e4>)
 8004406:	4313      	orrs	r3, r2
 8004408:	610b      	str	r3, [r1, #16]
 800440a:	e005      	b.n	8004418 <HAL_RCCEx_PeriphCLKConfig+0x6bc>
 800440c:	4b8c      	ldr	r3, [pc, #560]	; (8004640 <HAL_RCCEx_PeriphCLKConfig+0x8e4>)
 800440e:	691b      	ldr	r3, [r3, #16]
 8004410:	4a8b      	ldr	r2, [pc, #556]	; (8004640 <HAL_RCCEx_PeriphCLKConfig+0x8e4>)
 8004412:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 8004416:	6113      	str	r3, [r2, #16]
 8004418:	4b89      	ldr	r3, [pc, #548]	; (8004640 <HAL_RCCEx_PeriphCLKConfig+0x8e4>)
 800441a:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 800441c:	687b      	ldr	r3, [r7, #4]
 800441e:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 8004422:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004426:	4986      	ldr	r1, [pc, #536]	; (8004640 <HAL_RCCEx_PeriphCLKConfig+0x8e4>)
 8004428:	4313      	orrs	r3, r2
 800442a:	670b      	str	r3, [r1, #112]	; 0x70
 800442c:	e004      	b.n	8004438 <HAL_RCCEx_PeriphCLKConfig+0x6dc>
      }
      else
      {
        /* set overall return value */
        status = ret;
 800442e:	7dfb      	ldrb	r3, [r7, #23]
 8004430:	75bb      	strb	r3, [r7, #22]
 8004432:	e001      	b.n	8004438 <HAL_RCCEx_PeriphCLKConfig+0x6dc>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004434:	7dfb      	ldrb	r3, [r7, #23]
 8004436:	75bb      	strb	r3, [r7, #22]
    }
  }


  /*-------------------------- USART1/6 configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
 8004438:	687b      	ldr	r3, [r7, #4]
 800443a:	681b      	ldr	r3, [r3, #0]
 800443c:	f003 0301 	and.w	r3, r3, #1
 8004440:	2b00      	cmp	r3, #0
 8004442:	d07e      	beq.n	8004542 <HAL_RCCEx_PeriphCLKConfig+0x7e6>
  {
    switch(PeriphClkInit->Usart16ClockSelection)
 8004444:	687b      	ldr	r3, [r7, #4]
 8004446:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004448:	2b28      	cmp	r3, #40	; 0x28
 800444a:	d867      	bhi.n	800451c <HAL_RCCEx_PeriphCLKConfig+0x7c0>
 800444c:	a201      	add	r2, pc, #4	; (adr r2, 8004454 <HAL_RCCEx_PeriphCLKConfig+0x6f8>)
 800444e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004452:	bf00      	nop
 8004454:	08004523 	.word	0x08004523
 8004458:	0800451d 	.word	0x0800451d
 800445c:	0800451d 	.word	0x0800451d
 8004460:	0800451d 	.word	0x0800451d
 8004464:	0800451d 	.word	0x0800451d
 8004468:	0800451d 	.word	0x0800451d
 800446c:	0800451d 	.word	0x0800451d
 8004470:	0800451d 	.word	0x0800451d
 8004474:	080044f9 	.word	0x080044f9
 8004478:	0800451d 	.word	0x0800451d
 800447c:	0800451d 	.word	0x0800451d
 8004480:	0800451d 	.word	0x0800451d
 8004484:	0800451d 	.word	0x0800451d
 8004488:	0800451d 	.word	0x0800451d
 800448c:	0800451d 	.word	0x0800451d
 8004490:	0800451d 	.word	0x0800451d
 8004494:	0800450b 	.word	0x0800450b
 8004498:	0800451d 	.word	0x0800451d
 800449c:	0800451d 	.word	0x0800451d
 80044a0:	0800451d 	.word	0x0800451d
 80044a4:	0800451d 	.word	0x0800451d
 80044a8:	0800451d 	.word	0x0800451d
 80044ac:	0800451d 	.word	0x0800451d
 80044b0:	0800451d 	.word	0x0800451d
 80044b4:	08004523 	.word	0x08004523
 80044b8:	0800451d 	.word	0x0800451d
 80044bc:	0800451d 	.word	0x0800451d
 80044c0:	0800451d 	.word	0x0800451d
 80044c4:	0800451d 	.word	0x0800451d
 80044c8:	0800451d 	.word	0x0800451d
 80044cc:	0800451d 	.word	0x0800451d
 80044d0:	0800451d 	.word	0x0800451d
 80044d4:	08004523 	.word	0x08004523
 80044d8:	0800451d 	.word	0x0800451d
 80044dc:	0800451d 	.word	0x0800451d
 80044e0:	0800451d 	.word	0x0800451d
 80044e4:	0800451d 	.word	0x0800451d
 80044e8:	0800451d 	.word	0x0800451d
 80044ec:	0800451d 	.word	0x0800451d
 80044f0:	0800451d 	.word	0x0800451d
 80044f4:	08004523 	.word	0x08004523
    case RCC_USART16CLKSOURCE_PCLK2: /* CD/D2 PCLK2 as clock source for USART1/6 */
      /* USART1/6 clock source configuration done later after clock selection check */
      break;

    case RCC_USART16CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART1/6 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 80044f8:	687b      	ldr	r3, [r7, #4]
 80044fa:	3304      	adds	r3, #4
 80044fc:	2101      	movs	r1, #1
 80044fe:	4618      	mov	r0, r3
 8004500:	f000 fde4 	bl	80050cc <RCCEx_PLL2_Config>
 8004504:	4603      	mov	r3, r0
 8004506:	75fb      	strb	r3, [r7, #23]
      /* USART1/6 clock source configuration done later after clock selection check */
      break;
 8004508:	e00c      	b.n	8004524 <HAL_RCCEx_PeriphCLKConfig+0x7c8>

    case RCC_USART16CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART1/6 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 800450a:	687b      	ldr	r3, [r7, #4]
 800450c:	3324      	adds	r3, #36	; 0x24
 800450e:	2101      	movs	r1, #1
 8004510:	4618      	mov	r0, r3
 8004512:	f000 fe8d 	bl	8005230 <RCCEx_PLL3_Config>
 8004516:	4603      	mov	r3, r0
 8004518:	75fb      	strb	r3, [r7, #23]
      /* USART1/6 clock source configuration done later after clock selection check */
      break;
 800451a:	e003      	b.n	8004524 <HAL_RCCEx_PeriphCLKConfig+0x7c8>
      /* LSE,  oscillator is used as source of USART1/6 clock */
      /* USART1/6 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800451c:	2301      	movs	r3, #1
 800451e:	75fb      	strb	r3, [r7, #23]
      break;
 8004520:	e000      	b.n	8004524 <HAL_RCCEx_PeriphCLKConfig+0x7c8>
      break;
 8004522:	bf00      	nop
    }

    if(ret == HAL_OK)
 8004524:	7dfb      	ldrb	r3, [r7, #23]
 8004526:	2b00      	cmp	r3, #0
 8004528:	d109      	bne.n	800453e <HAL_RCCEx_PeriphCLKConfig+0x7e2>
    {
      /* Set the source of USART1/6 clock */
      __HAL_RCC_USART16_CONFIG(PeriphClkInit->Usart16ClockSelection);
 800452a:	4b45      	ldr	r3, [pc, #276]	; (8004640 <HAL_RCCEx_PeriphCLKConfig+0x8e4>)
 800452c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800452e:	f023 0238 	bic.w	r2, r3, #56	; 0x38
 8004532:	687b      	ldr	r3, [r7, #4]
 8004534:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004536:	4942      	ldr	r1, [pc, #264]	; (8004640 <HAL_RCCEx_PeriphCLKConfig+0x8e4>)
 8004538:	4313      	orrs	r3, r2
 800453a:	654b      	str	r3, [r1, #84]	; 0x54
 800453c:	e001      	b.n	8004542 <HAL_RCCEx_PeriphCLKConfig+0x7e6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800453e:	7dfb      	ldrb	r3, [r7, #23]
 8004540:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*-------------------------- USART2/3/4/5/7/8 Configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
 8004542:	687b      	ldr	r3, [r7, #4]
 8004544:	681b      	ldr	r3, [r3, #0]
 8004546:	f003 0302 	and.w	r3, r3, #2
 800454a:	2b00      	cmp	r3, #0
 800454c:	d037      	beq.n	80045be <HAL_RCCEx_PeriphCLKConfig+0x862>
  {
    switch(PeriphClkInit->Usart234578ClockSelection)
 800454e:	687b      	ldr	r3, [r7, #4]
 8004550:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004552:	2b05      	cmp	r3, #5
 8004554:	d820      	bhi.n	8004598 <HAL_RCCEx_PeriphCLKConfig+0x83c>
 8004556:	a201      	add	r2, pc, #4	; (adr r2, 800455c <HAL_RCCEx_PeriphCLKConfig+0x800>)
 8004558:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800455c:	0800459f 	.word	0x0800459f
 8004560:	08004575 	.word	0x08004575
 8004564:	08004587 	.word	0x08004587
 8004568:	0800459f 	.word	0x0800459f
 800456c:	0800459f 	.word	0x0800459f
 8004570:	0800459f 	.word	0x0800459f
    case RCC_USART234578CLKSOURCE_PCLK1: /* CD/D2 PCLK1 as clock source for USART2/3/4/5/7/8 */
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;

    case RCC_USART234578CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART2/3/4/5/7/8 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8004574:	687b      	ldr	r3, [r7, #4]
 8004576:	3304      	adds	r3, #4
 8004578:	2101      	movs	r1, #1
 800457a:	4618      	mov	r0, r3
 800457c:	f000 fda6 	bl	80050cc <RCCEx_PLL2_Config>
 8004580:	4603      	mov	r3, r0
 8004582:	75fb      	strb	r3, [r7, #23]
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;
 8004584:	e00c      	b.n	80045a0 <HAL_RCCEx_PeriphCLKConfig+0x844>

    case RCC_USART234578CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART2/3/4/5/7/8 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8004586:	687b      	ldr	r3, [r7, #4]
 8004588:	3324      	adds	r3, #36	; 0x24
 800458a:	2101      	movs	r1, #1
 800458c:	4618      	mov	r0, r3
 800458e:	f000 fe4f 	bl	8005230 <RCCEx_PLL3_Config>
 8004592:	4603      	mov	r3, r0
 8004594:	75fb      	strb	r3, [r7, #23]
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;
 8004596:	e003      	b.n	80045a0 <HAL_RCCEx_PeriphCLKConfig+0x844>
      /* LSE,  oscillator is used as source of USART2/3/4/5/7/8 clock */
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8004598:	2301      	movs	r3, #1
 800459a:	75fb      	strb	r3, [r7, #23]
      break;
 800459c:	e000      	b.n	80045a0 <HAL_RCCEx_PeriphCLKConfig+0x844>
      break;
 800459e:	bf00      	nop
    }

    if(ret == HAL_OK)
 80045a0:	7dfb      	ldrb	r3, [r7, #23]
 80045a2:	2b00      	cmp	r3, #0
 80045a4:	d109      	bne.n	80045ba <HAL_RCCEx_PeriphCLKConfig+0x85e>
    {
      /* Set the source of USART2/3/4/5/7/8 clock */
      __HAL_RCC_USART234578_CONFIG(PeriphClkInit->Usart234578ClockSelection);
 80045a6:	4b26      	ldr	r3, [pc, #152]	; (8004640 <HAL_RCCEx_PeriphCLKConfig+0x8e4>)
 80045a8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80045aa:	f023 0207 	bic.w	r2, r3, #7
 80045ae:	687b      	ldr	r3, [r7, #4]
 80045b0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80045b2:	4923      	ldr	r1, [pc, #140]	; (8004640 <HAL_RCCEx_PeriphCLKConfig+0x8e4>)
 80045b4:	4313      	orrs	r3, r2
 80045b6:	654b      	str	r3, [r1, #84]	; 0x54
 80045b8:	e001      	b.n	80045be <HAL_RCCEx_PeriphCLKConfig+0x862>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80045ba:	7dfb      	ldrb	r3, [r7, #23]
 80045bc:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*-------------------------- LPUART1 Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 80045be:	687b      	ldr	r3, [r7, #4]
 80045c0:	681b      	ldr	r3, [r3, #0]
 80045c2:	f003 0304 	and.w	r3, r3, #4
 80045c6:	2b00      	cmp	r3, #0
 80045c8:	d040      	beq.n	800464c <HAL_RCCEx_PeriphCLKConfig+0x8f0>
  {
    switch(PeriphClkInit->Lpuart1ClockSelection)
 80045ca:	687b      	ldr	r3, [r7, #4]
 80045cc:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80045d0:	2b05      	cmp	r3, #5
 80045d2:	d821      	bhi.n	8004618 <HAL_RCCEx_PeriphCLKConfig+0x8bc>
 80045d4:	a201      	add	r2, pc, #4	; (adr r2, 80045dc <HAL_RCCEx_PeriphCLKConfig+0x880>)
 80045d6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80045da:	bf00      	nop
 80045dc:	0800461f 	.word	0x0800461f
 80045e0:	080045f5 	.word	0x080045f5
 80045e4:	08004607 	.word	0x08004607
 80045e8:	0800461f 	.word	0x0800461f
 80045ec:	0800461f 	.word	0x0800461f
 80045f0:	0800461f 	.word	0x0800461f
    case RCC_LPUART1CLKSOURCE_PCLK4: /* SRD/D3 PCLK1 (PCLK4) as clock source for LPUART1 */
      /* LPUART1 clock source configuration done later after clock selection check */
      break;

    case RCC_LPUART1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPUART1 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 80045f4:	687b      	ldr	r3, [r7, #4]
 80045f6:	3304      	adds	r3, #4
 80045f8:	2101      	movs	r1, #1
 80045fa:	4618      	mov	r0, r3
 80045fc:	f000 fd66 	bl	80050cc <RCCEx_PLL2_Config>
 8004600:	4603      	mov	r3, r0
 8004602:	75fb      	strb	r3, [r7, #23]
      /* LPUART1 clock source configuration done later after clock selection check */
      break;
 8004604:	e00c      	b.n	8004620 <HAL_RCCEx_PeriphCLKConfig+0x8c4>

    case RCC_LPUART1CLKSOURCE_PLL3: /* PLL3 is used as clock source for LPUART1 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8004606:	687b      	ldr	r3, [r7, #4]
 8004608:	3324      	adds	r3, #36	; 0x24
 800460a:	2101      	movs	r1, #1
 800460c:	4618      	mov	r0, r3
 800460e:	f000 fe0f 	bl	8005230 <RCCEx_PLL3_Config>
 8004612:	4603      	mov	r3, r0
 8004614:	75fb      	strb	r3, [r7, #23]
      /* LPUART1 clock source configuration done later after clock selection check */
      break;
 8004616:	e003      	b.n	8004620 <HAL_RCCEx_PeriphCLKConfig+0x8c4>
      /* LSE,  oscillator is used as source of LPUART1 clock */
      /* LPUART1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8004618:	2301      	movs	r3, #1
 800461a:	75fb      	strb	r3, [r7, #23]
      break;
 800461c:	e000      	b.n	8004620 <HAL_RCCEx_PeriphCLKConfig+0x8c4>
      break;
 800461e:	bf00      	nop
    }

    if(ret == HAL_OK)
 8004620:	7dfb      	ldrb	r3, [r7, #23]
 8004622:	2b00      	cmp	r3, #0
 8004624:	d110      	bne.n	8004648 <HAL_RCCEx_PeriphCLKConfig+0x8ec>
    {
      /* Set the source of LPUART1 clock */
      __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8004626:	4b06      	ldr	r3, [pc, #24]	; (8004640 <HAL_RCCEx_PeriphCLKConfig+0x8e4>)
 8004628:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800462a:	f023 0207 	bic.w	r2, r3, #7
 800462e:	687b      	ldr	r3, [r7, #4]
 8004630:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8004634:	4902      	ldr	r1, [pc, #8]	; (8004640 <HAL_RCCEx_PeriphCLKConfig+0x8e4>)
 8004636:	4313      	orrs	r3, r2
 8004638:	658b      	str	r3, [r1, #88]	; 0x58
 800463a:	e007      	b.n	800464c <HAL_RCCEx_PeriphCLKConfig+0x8f0>
 800463c:	58024800 	.word	0x58024800
 8004640:	58024400 	.word	0x58024400
 8004644:	00ffffcf 	.word	0x00ffffcf
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004648:	7dfb      	ldrb	r3, [r7, #23]
 800464a:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM1 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 800464c:	687b      	ldr	r3, [r7, #4]
 800464e:	681b      	ldr	r3, [r3, #0]
 8004650:	f003 0320 	and.w	r3, r3, #32
 8004654:	2b00      	cmp	r3, #0
 8004656:	d04b      	beq.n	80046f0 <HAL_RCCEx_PeriphCLKConfig+0x994>
  {
    switch(PeriphClkInit->Lptim1ClockSelection)
 8004658:	687b      	ldr	r3, [r7, #4]
 800465a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800465e:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8004662:	d02e      	beq.n	80046c2 <HAL_RCCEx_PeriphCLKConfig+0x966>
 8004664:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8004668:	d828      	bhi.n	80046bc <HAL_RCCEx_PeriphCLKConfig+0x960>
 800466a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800466e:	d02a      	beq.n	80046c6 <HAL_RCCEx_PeriphCLKConfig+0x96a>
 8004670:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004674:	d822      	bhi.n	80046bc <HAL_RCCEx_PeriphCLKConfig+0x960>
 8004676:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 800467a:	d026      	beq.n	80046ca <HAL_RCCEx_PeriphCLKConfig+0x96e>
 800467c:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8004680:	d81c      	bhi.n	80046bc <HAL_RCCEx_PeriphCLKConfig+0x960>
 8004682:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8004686:	d010      	beq.n	80046aa <HAL_RCCEx_PeriphCLKConfig+0x94e>
 8004688:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800468c:	d816      	bhi.n	80046bc <HAL_RCCEx_PeriphCLKConfig+0x960>
 800468e:	2b00      	cmp	r3, #0
 8004690:	d01d      	beq.n	80046ce <HAL_RCCEx_PeriphCLKConfig+0x972>
 8004692:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8004696:	d111      	bne.n	80046bc <HAL_RCCEx_PeriphCLKConfig+0x960>
      /* LPTIM1 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM1*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8004698:	687b      	ldr	r3, [r7, #4]
 800469a:	3304      	adds	r3, #4
 800469c:	2100      	movs	r1, #0
 800469e:	4618      	mov	r0, r3
 80046a0:	f000 fd14 	bl	80050cc <RCCEx_PLL2_Config>
 80046a4:	4603      	mov	r3, r0
 80046a6:	75fb      	strb	r3, [r7, #23]

      /* LPTIM1 clock source configuration done later after clock selection check */
      break;
 80046a8:	e012      	b.n	80046d0 <HAL_RCCEx_PeriphCLKConfig+0x974>

    case RCC_LPTIM1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM1*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 80046aa:	687b      	ldr	r3, [r7, #4]
 80046ac:	3324      	adds	r3, #36	; 0x24
 80046ae:	2102      	movs	r1, #2
 80046b0:	4618      	mov	r0, r3
 80046b2:	f000 fdbd 	bl	8005230 <RCCEx_PLL3_Config>
 80046b6:	4603      	mov	r3, r0
 80046b8:	75fb      	strb	r3, [r7, #23]

      /* LPTIM1 clock source configuration done later after clock selection check */
      break;
 80046ba:	e009      	b.n	80046d0 <HAL_RCCEx_PeriphCLKConfig+0x974>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM1 clock */
      /* LPTIM1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80046bc:	2301      	movs	r3, #1
 80046be:	75fb      	strb	r3, [r7, #23]
      break;
 80046c0:	e006      	b.n	80046d0 <HAL_RCCEx_PeriphCLKConfig+0x974>
      break;
 80046c2:	bf00      	nop
 80046c4:	e004      	b.n	80046d0 <HAL_RCCEx_PeriphCLKConfig+0x974>
      break;
 80046c6:	bf00      	nop
 80046c8:	e002      	b.n	80046d0 <HAL_RCCEx_PeriphCLKConfig+0x974>
      break;
 80046ca:	bf00      	nop
 80046cc:	e000      	b.n	80046d0 <HAL_RCCEx_PeriphCLKConfig+0x974>
      break;
 80046ce:	bf00      	nop
    }

    if(ret == HAL_OK)
 80046d0:	7dfb      	ldrb	r3, [r7, #23]
 80046d2:	2b00      	cmp	r3, #0
 80046d4:	d10a      	bne.n	80046ec <HAL_RCCEx_PeriphCLKConfig+0x990>
    {
      /* Set the source of LPTIM1 clock*/
      __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 80046d6:	4bb2      	ldr	r3, [pc, #712]	; (80049a0 <HAL_RCCEx_PeriphCLKConfig+0xc44>)
 80046d8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80046da:	f023 42e0 	bic.w	r2, r3, #1879048192	; 0x70000000
 80046de:	687b      	ldr	r3, [r7, #4]
 80046e0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80046e4:	49ae      	ldr	r1, [pc, #696]	; (80049a0 <HAL_RCCEx_PeriphCLKConfig+0xc44>)
 80046e6:	4313      	orrs	r3, r2
 80046e8:	654b      	str	r3, [r1, #84]	; 0x54
 80046ea:	e001      	b.n	80046f0 <HAL_RCCEx_PeriphCLKConfig+0x994>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80046ec:	7dfb      	ldrb	r3, [r7, #23]
 80046ee:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM2 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 80046f0:	687b      	ldr	r3, [r7, #4]
 80046f2:	681b      	ldr	r3, [r3, #0]
 80046f4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80046f8:	2b00      	cmp	r3, #0
 80046fa:	d04b      	beq.n	8004794 <HAL_RCCEx_PeriphCLKConfig+0xa38>
  {
    switch(PeriphClkInit->Lptim2ClockSelection)
 80046fc:	687b      	ldr	r3, [r7, #4]
 80046fe:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004702:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 8004706:	d02e      	beq.n	8004766 <HAL_RCCEx_PeriphCLKConfig+0xa0a>
 8004708:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 800470c:	d828      	bhi.n	8004760 <HAL_RCCEx_PeriphCLKConfig+0xa04>
 800470e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004712:	d02a      	beq.n	800476a <HAL_RCCEx_PeriphCLKConfig+0xa0e>
 8004714:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004718:	d822      	bhi.n	8004760 <HAL_RCCEx_PeriphCLKConfig+0xa04>
 800471a:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800471e:	d026      	beq.n	800476e <HAL_RCCEx_PeriphCLKConfig+0xa12>
 8004720:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8004724:	d81c      	bhi.n	8004760 <HAL_RCCEx_PeriphCLKConfig+0xa04>
 8004726:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800472a:	d010      	beq.n	800474e <HAL_RCCEx_PeriphCLKConfig+0x9f2>
 800472c:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004730:	d816      	bhi.n	8004760 <HAL_RCCEx_PeriphCLKConfig+0xa04>
 8004732:	2b00      	cmp	r3, #0
 8004734:	d01d      	beq.n	8004772 <HAL_RCCEx_PeriphCLKConfig+0xa16>
 8004736:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800473a:	d111      	bne.n	8004760 <HAL_RCCEx_PeriphCLKConfig+0xa04>
      /* LPTIM2 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM2CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 800473c:	687b      	ldr	r3, [r7, #4]
 800473e:	3304      	adds	r3, #4
 8004740:	2100      	movs	r1, #0
 8004742:	4618      	mov	r0, r3
 8004744:	f000 fcc2 	bl	80050cc <RCCEx_PLL2_Config>
 8004748:	4603      	mov	r3, r0
 800474a:	75fb      	strb	r3, [r7, #23]

      /* LPTIM2 clock source configuration done later after clock selection check */
      break;
 800474c:	e012      	b.n	8004774 <HAL_RCCEx_PeriphCLKConfig+0xa18>

    case RCC_LPTIM2CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 800474e:	687b      	ldr	r3, [r7, #4]
 8004750:	3324      	adds	r3, #36	; 0x24
 8004752:	2102      	movs	r1, #2
 8004754:	4618      	mov	r0, r3
 8004756:	f000 fd6b 	bl	8005230 <RCCEx_PLL3_Config>
 800475a:	4603      	mov	r3, r0
 800475c:	75fb      	strb	r3, [r7, #23]

      /* LPTIM2 clock source configuration done later after clock selection check */
      break;
 800475e:	e009      	b.n	8004774 <HAL_RCCEx_PeriphCLKConfig+0xa18>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM2 clock */
      /* LPTIM2 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8004760:	2301      	movs	r3, #1
 8004762:	75fb      	strb	r3, [r7, #23]
      break;
 8004764:	e006      	b.n	8004774 <HAL_RCCEx_PeriphCLKConfig+0xa18>
      break;
 8004766:	bf00      	nop
 8004768:	e004      	b.n	8004774 <HAL_RCCEx_PeriphCLKConfig+0xa18>
      break;
 800476a:	bf00      	nop
 800476c:	e002      	b.n	8004774 <HAL_RCCEx_PeriphCLKConfig+0xa18>
      break;
 800476e:	bf00      	nop
 8004770:	e000      	b.n	8004774 <HAL_RCCEx_PeriphCLKConfig+0xa18>
      break;
 8004772:	bf00      	nop
    }

    if(ret == HAL_OK)
 8004774:	7dfb      	ldrb	r3, [r7, #23]
 8004776:	2b00      	cmp	r3, #0
 8004778:	d10a      	bne.n	8004790 <HAL_RCCEx_PeriphCLKConfig+0xa34>
    {
      /* Set the source of LPTIM2 clock*/
      __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 800477a:	4b89      	ldr	r3, [pc, #548]	; (80049a0 <HAL_RCCEx_PeriphCLKConfig+0xc44>)
 800477c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800477e:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8004782:	687b      	ldr	r3, [r7, #4]
 8004784:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004788:	4985      	ldr	r1, [pc, #532]	; (80049a0 <HAL_RCCEx_PeriphCLKConfig+0xc44>)
 800478a:	4313      	orrs	r3, r2
 800478c:	658b      	str	r3, [r1, #88]	; 0x58
 800478e:	e001      	b.n	8004794 <HAL_RCCEx_PeriphCLKConfig+0xa38>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004790:	7dfb      	ldrb	r3, [r7, #23]
 8004792:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM345 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
 8004794:	687b      	ldr	r3, [r7, #4]
 8004796:	681b      	ldr	r3, [r3, #0]
 8004798:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800479c:	2b00      	cmp	r3, #0
 800479e:	d04b      	beq.n	8004838 <HAL_RCCEx_PeriphCLKConfig+0xadc>
  {
    switch(PeriphClkInit->Lptim345ClockSelection)
 80047a0:	687b      	ldr	r3, [r7, #4]
 80047a2:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80047a6:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 80047aa:	d02e      	beq.n	800480a <HAL_RCCEx_PeriphCLKConfig+0xaae>
 80047ac:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 80047b0:	d828      	bhi.n	8004804 <HAL_RCCEx_PeriphCLKConfig+0xaa8>
 80047b2:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80047b6:	d02a      	beq.n	800480e <HAL_RCCEx_PeriphCLKConfig+0xab2>
 80047b8:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80047bc:	d822      	bhi.n	8004804 <HAL_RCCEx_PeriphCLKConfig+0xaa8>
 80047be:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 80047c2:	d026      	beq.n	8004812 <HAL_RCCEx_PeriphCLKConfig+0xab6>
 80047c4:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 80047c8:	d81c      	bhi.n	8004804 <HAL_RCCEx_PeriphCLKConfig+0xaa8>
 80047ca:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80047ce:	d010      	beq.n	80047f2 <HAL_RCCEx_PeriphCLKConfig+0xa96>
 80047d0:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80047d4:	d816      	bhi.n	8004804 <HAL_RCCEx_PeriphCLKConfig+0xaa8>
 80047d6:	2b00      	cmp	r3, #0
 80047d8:	d01d      	beq.n	8004816 <HAL_RCCEx_PeriphCLKConfig+0xaba>
 80047da:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80047de:	d111      	bne.n	8004804 <HAL_RCCEx_PeriphCLKConfig+0xaa8>
    case RCC_LPTIM345CLKSOURCE_PCLK4:      /* SRD/D3 PCLK1 (PCLK4) as clock source for LPTIM3/4/5 */
      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM345CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM3/4/5 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 80047e0:	687b      	ldr	r3, [r7, #4]
 80047e2:	3304      	adds	r3, #4
 80047e4:	2100      	movs	r1, #0
 80047e6:	4618      	mov	r0, r3
 80047e8:	f000 fc70 	bl	80050cc <RCCEx_PLL2_Config>
 80047ec:	4603      	mov	r3, r0
 80047ee:	75fb      	strb	r3, [r7, #23]

      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;
 80047f0:	e012      	b.n	8004818 <HAL_RCCEx_PeriphCLKConfig+0xabc>

    case RCC_LPTIM345CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM3/4/5 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 80047f2:	687b      	ldr	r3, [r7, #4]
 80047f4:	3324      	adds	r3, #36	; 0x24
 80047f6:	2102      	movs	r1, #2
 80047f8:	4618      	mov	r0, r3
 80047fa:	f000 fd19 	bl	8005230 <RCCEx_PLL3_Config>
 80047fe:	4603      	mov	r3, r0
 8004800:	75fb      	strb	r3, [r7, #23]

      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;
 8004802:	e009      	b.n	8004818 <HAL_RCCEx_PeriphCLKConfig+0xabc>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM3/4/5 clock */
      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8004804:	2301      	movs	r3, #1
 8004806:	75fb      	strb	r3, [r7, #23]
      break;
 8004808:	e006      	b.n	8004818 <HAL_RCCEx_PeriphCLKConfig+0xabc>
      break;
 800480a:	bf00      	nop
 800480c:	e004      	b.n	8004818 <HAL_RCCEx_PeriphCLKConfig+0xabc>
      break;
 800480e:	bf00      	nop
 8004810:	e002      	b.n	8004818 <HAL_RCCEx_PeriphCLKConfig+0xabc>
      break;
 8004812:	bf00      	nop
 8004814:	e000      	b.n	8004818 <HAL_RCCEx_PeriphCLKConfig+0xabc>
      break;
 8004816:	bf00      	nop
    }

    if(ret == HAL_OK)
 8004818:	7dfb      	ldrb	r3, [r7, #23]
 800481a:	2b00      	cmp	r3, #0
 800481c:	d10a      	bne.n	8004834 <HAL_RCCEx_PeriphCLKConfig+0xad8>
    {
      /* Set the source of LPTIM3/4/5 clock */
      __HAL_RCC_LPTIM345_CONFIG(PeriphClkInit->Lptim345ClockSelection);
 800481e:	4b60      	ldr	r3, [pc, #384]	; (80049a0 <HAL_RCCEx_PeriphCLKConfig+0xc44>)
 8004820:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004822:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8004826:	687b      	ldr	r3, [r7, #4]
 8004828:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800482c:	495c      	ldr	r1, [pc, #368]	; (80049a0 <HAL_RCCEx_PeriphCLKConfig+0xc44>)
 800482e:	4313      	orrs	r3, r2
 8004830:	658b      	str	r3, [r1, #88]	; 0x58
 8004832:	e001      	b.n	8004838 <HAL_RCCEx_PeriphCLKConfig+0xadc>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004834:	7dfb      	ldrb	r3, [r7, #23]
 8004836:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*------------------------------ I2C1/2/3/5* Configuration ------------------------*/
#if defined(I2C5)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1235) == RCC_PERIPHCLK_I2C1235)
 8004838:	687b      	ldr	r3, [r7, #4]
 800483a:	681b      	ldr	r3, [r3, #0]
 800483c:	f003 0308 	and.w	r3, r3, #8
 8004840:	2b00      	cmp	r3, #0
 8004842:	d018      	beq.n	8004876 <HAL_RCCEx_PeriphCLKConfig+0xb1a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1235CLKSOURCE(PeriphClkInit->I2c1235ClockSelection));

    if ((PeriphClkInit->I2c1235ClockSelection )== RCC_I2C1235CLKSOURCE_PLL3 )
 8004844:	687b      	ldr	r3, [r7, #4]
 8004846:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8004848:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800484c:	d10a      	bne.n	8004864 <HAL_RCCEx_PeriphCLKConfig+0xb08>
    {
        if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!= HAL_OK)
 800484e:	687b      	ldr	r3, [r7, #4]
 8004850:	3324      	adds	r3, #36	; 0x24
 8004852:	2102      	movs	r1, #2
 8004854:	4618      	mov	r0, r3
 8004856:	f000 fceb 	bl	8005230 <RCCEx_PLL3_Config>
 800485a:	4603      	mov	r3, r0
 800485c:	2b00      	cmp	r3, #0
 800485e:	d001      	beq.n	8004864 <HAL_RCCEx_PeriphCLKConfig+0xb08>
        {
          status = HAL_ERROR;
 8004860:	2301      	movs	r3, #1
 8004862:	75bb      	strb	r3, [r7, #22]
        }
    }

      __HAL_RCC_I2C1235_CONFIG(PeriphClkInit->I2c1235ClockSelection);
 8004864:	4b4e      	ldr	r3, [pc, #312]	; (80049a0 <HAL_RCCEx_PeriphCLKConfig+0xc44>)
 8004866:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004868:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 800486c:	687b      	ldr	r3, [r7, #4]
 800486e:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8004870:	494b      	ldr	r1, [pc, #300]	; (80049a0 <HAL_RCCEx_PeriphCLKConfig+0xc44>)
 8004872:	4313      	orrs	r3, r2
 8004874:	654b      	str	r3, [r1, #84]	; 0x54

  }
#endif /* I2C5 */

  /*------------------------------ I2C4 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8004876:	687b      	ldr	r3, [r7, #4]
 8004878:	681b      	ldr	r3, [r3, #0]
 800487a:	f003 0310 	and.w	r3, r3, #16
 800487e:	2b00      	cmp	r3, #0
 8004880:	d01a      	beq.n	80048b8 <HAL_RCCEx_PeriphCLKConfig+0xb5c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    if ((PeriphClkInit->I2c4ClockSelection) == RCC_I2C4CLKSOURCE_PLL3 )
 8004882:	687b      	ldr	r3, [r7, #4]
 8004884:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004888:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800488c:	d10a      	bne.n	80048a4 <HAL_RCCEx_PeriphCLKConfig+0xb48>
    {
      if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!= HAL_OK)
 800488e:	687b      	ldr	r3, [r7, #4]
 8004890:	3324      	adds	r3, #36	; 0x24
 8004892:	2102      	movs	r1, #2
 8004894:	4618      	mov	r0, r3
 8004896:	f000 fccb 	bl	8005230 <RCCEx_PLL3_Config>
 800489a:	4603      	mov	r3, r0
 800489c:	2b00      	cmp	r3, #0
 800489e:	d001      	beq.n	80048a4 <HAL_RCCEx_PeriphCLKConfig+0xb48>
      {
        status = HAL_ERROR;
 80048a0:	2301      	movs	r3, #1
 80048a2:	75bb      	strb	r3, [r7, #22]
      }
    }

      __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 80048a4:	4b3e      	ldr	r3, [pc, #248]	; (80049a0 <HAL_RCCEx_PeriphCLKConfig+0xc44>)
 80048a6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80048a8:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80048ac:	687b      	ldr	r3, [r7, #4]
 80048ae:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80048b2:	493b      	ldr	r1, [pc, #236]	; (80049a0 <HAL_RCCEx_PeriphCLKConfig+0xc44>)
 80048b4:	4313      	orrs	r3, r2
 80048b6:	658b      	str	r3, [r1, #88]	; 0x58

  }

  /*---------------------------- ADC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 80048b8:	687b      	ldr	r3, [r7, #4]
 80048ba:	681b      	ldr	r3, [r3, #0]
 80048bc:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80048c0:	2b00      	cmp	r3, #0
 80048c2:	d034      	beq.n	800492e <HAL_RCCEx_PeriphCLKConfig+0xbd2>
  {
    switch(PeriphClkInit->AdcClockSelection)
 80048c4:	687b      	ldr	r3, [r7, #4]
 80048c6:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80048ca:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80048ce:	d01d      	beq.n	800490c <HAL_RCCEx_PeriphCLKConfig+0xbb0>
 80048d0:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80048d4:	d817      	bhi.n	8004906 <HAL_RCCEx_PeriphCLKConfig+0xbaa>
 80048d6:	2b00      	cmp	r3, #0
 80048d8:	d003      	beq.n	80048e2 <HAL_RCCEx_PeriphCLKConfig+0xb86>
 80048da:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80048de:	d009      	beq.n	80048f4 <HAL_RCCEx_PeriphCLKConfig+0xb98>
 80048e0:	e011      	b.n	8004906 <HAL_RCCEx_PeriphCLKConfig+0xbaa>
    {

    case RCC_ADCCLKSOURCE_PLL2: /* PLL2 is used as clock source for ADC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 80048e2:	687b      	ldr	r3, [r7, #4]
 80048e4:	3304      	adds	r3, #4
 80048e6:	2100      	movs	r1, #0
 80048e8:	4618      	mov	r0, r3
 80048ea:	f000 fbef 	bl	80050cc <RCCEx_PLL2_Config>
 80048ee:	4603      	mov	r3, r0
 80048f0:	75fb      	strb	r3, [r7, #23]

      /* ADC clock source configuration done later after clock selection check */
      break;
 80048f2:	e00c      	b.n	800490e <HAL_RCCEx_PeriphCLKConfig+0xbb2>

    case RCC_ADCCLKSOURCE_PLL3:  /* PLL3 is used as clock source for ADC*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 80048f4:	687b      	ldr	r3, [r7, #4]
 80048f6:	3324      	adds	r3, #36	; 0x24
 80048f8:	2102      	movs	r1, #2
 80048fa:	4618      	mov	r0, r3
 80048fc:	f000 fc98 	bl	8005230 <RCCEx_PLL3_Config>
 8004900:	4603      	mov	r3, r0
 8004902:	75fb      	strb	r3, [r7, #23]

      /* ADC clock source configuration done later after clock selection check */
      break;
 8004904:	e003      	b.n	800490e <HAL_RCCEx_PeriphCLKConfig+0xbb2>
      /* HSI, HSE, or CSI oscillator is used as source of ADC clock */
      /* ADC clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8004906:	2301      	movs	r3, #1
 8004908:	75fb      	strb	r3, [r7, #23]
      break;
 800490a:	e000      	b.n	800490e <HAL_RCCEx_PeriphCLKConfig+0xbb2>
      break;
 800490c:	bf00      	nop
    }

    if(ret == HAL_OK)
 800490e:	7dfb      	ldrb	r3, [r7, #23]
 8004910:	2b00      	cmp	r3, #0
 8004912:	d10a      	bne.n	800492a <HAL_RCCEx_PeriphCLKConfig+0xbce>
    {
      /* Set the source of ADC clock*/
      __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8004914:	4b22      	ldr	r3, [pc, #136]	; (80049a0 <HAL_RCCEx_PeriphCLKConfig+0xc44>)
 8004916:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004918:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 800491c:	687b      	ldr	r3, [r7, #4]
 800491e:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8004922:	491f      	ldr	r1, [pc, #124]	; (80049a0 <HAL_RCCEx_PeriphCLKConfig+0xc44>)
 8004924:	4313      	orrs	r3, r2
 8004926:	658b      	str	r3, [r1, #88]	; 0x58
 8004928:	e001      	b.n	800492e <HAL_RCCEx_PeriphCLKConfig+0xbd2>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800492a:	7dfb      	ldrb	r3, [r7, #23]
 800492c:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*------------------------------ USB Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 800492e:	687b      	ldr	r3, [r7, #4]
 8004930:	681b      	ldr	r3, [r3, #0]
 8004932:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8004936:	2b00      	cmp	r3, #0
 8004938:	d036      	beq.n	80049a8 <HAL_RCCEx_PeriphCLKConfig+0xc4c>
  {

    switch(PeriphClkInit->UsbClockSelection)
 800493a:	687b      	ldr	r3, [r7, #4]
 800493c:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8004940:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8004944:	d01c      	beq.n	8004980 <HAL_RCCEx_PeriphCLKConfig+0xc24>
 8004946:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 800494a:	d816      	bhi.n	800497a <HAL_RCCEx_PeriphCLKConfig+0xc1e>
 800494c:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8004950:	d003      	beq.n	800495a <HAL_RCCEx_PeriphCLKConfig+0xbfe>
 8004952:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8004956:	d007      	beq.n	8004968 <HAL_RCCEx_PeriphCLKConfig+0xc0c>
 8004958:	e00f      	b.n	800497a <HAL_RCCEx_PeriphCLKConfig+0xc1e>
    {
    case RCC_USBCLKSOURCE_PLL:      /* PLL is used as clock source for USB*/
      /* Enable USB Clock output generated form System USB . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800495a:	4b11      	ldr	r3, [pc, #68]	; (80049a0 <HAL_RCCEx_PeriphCLKConfig+0xc44>)
 800495c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800495e:	4a10      	ldr	r2, [pc, #64]	; (80049a0 <HAL_RCCEx_PeriphCLKConfig+0xc44>)
 8004960:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004964:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* USB clock source configuration done later after clock selection check */
      break;
 8004966:	e00c      	b.n	8004982 <HAL_RCCEx_PeriphCLKConfig+0xc26>

    case RCC_USBCLKSOURCE_PLL3: /* PLL3 is used as clock source for USB*/

      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8004968:	687b      	ldr	r3, [r7, #4]
 800496a:	3324      	adds	r3, #36	; 0x24
 800496c:	2101      	movs	r1, #1
 800496e:	4618      	mov	r0, r3
 8004970:	f000 fc5e 	bl	8005230 <RCCEx_PLL3_Config>
 8004974:	4603      	mov	r3, r0
 8004976:	75fb      	strb	r3, [r7, #23]

      /* USB clock source configuration done later after clock selection check */
      break;
 8004978:	e003      	b.n	8004982 <HAL_RCCEx_PeriphCLKConfig+0xc26>
      /* HSI48 oscillator is used as source of USB clock */
      /* USB clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800497a:	2301      	movs	r3, #1
 800497c:	75fb      	strb	r3, [r7, #23]
      break;
 800497e:	e000      	b.n	8004982 <HAL_RCCEx_PeriphCLKConfig+0xc26>
      break;
 8004980:	bf00      	nop
    }

    if(ret == HAL_OK)
 8004982:	7dfb      	ldrb	r3, [r7, #23]
 8004984:	2b00      	cmp	r3, #0
 8004986:	d10d      	bne.n	80049a4 <HAL_RCCEx_PeriphCLKConfig+0xc48>
    {
      /* Set the source of USB clock*/
      __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8004988:	4b05      	ldr	r3, [pc, #20]	; (80049a0 <HAL_RCCEx_PeriphCLKConfig+0xc44>)
 800498a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800498c:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8004990:	687b      	ldr	r3, [r7, #4]
 8004992:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8004996:	4902      	ldr	r1, [pc, #8]	; (80049a0 <HAL_RCCEx_PeriphCLKConfig+0xc44>)
 8004998:	4313      	orrs	r3, r2
 800499a:	654b      	str	r3, [r1, #84]	; 0x54
 800499c:	e004      	b.n	80049a8 <HAL_RCCEx_PeriphCLKConfig+0xc4c>
 800499e:	bf00      	nop
 80049a0:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 80049a4:	7dfb      	ldrb	r3, [r7, #23]
 80049a6:	75bb      	strb	r3, [r7, #22]
    }

  }

  /*------------------------------------- SDMMC Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == RCC_PERIPHCLK_SDMMC)
 80049a8:	687b      	ldr	r3, [r7, #4]
 80049aa:	681b      	ldr	r3, [r3, #0]
 80049ac:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80049b0:	2b00      	cmp	r3, #0
 80049b2:	d029      	beq.n	8004a08 <HAL_RCCEx_PeriphCLKConfig+0xcac>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC(PeriphClkInit->SdmmcClockSelection));

    switch(PeriphClkInit->SdmmcClockSelection)
 80049b4:	687b      	ldr	r3, [r7, #4]
 80049b6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80049b8:	2b00      	cmp	r3, #0
 80049ba:	d003      	beq.n	80049c4 <HAL_RCCEx_PeriphCLKConfig+0xc68>
 80049bc:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80049c0:	d007      	beq.n	80049d2 <HAL_RCCEx_PeriphCLKConfig+0xc76>
 80049c2:	e00f      	b.n	80049e4 <HAL_RCCEx_PeriphCLKConfig+0xc88>
    {
    case RCC_SDMMCCLKSOURCE_PLL:      /* PLL is used as clock source for SDMMC*/
      /* Enable SDMMC Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80049c4:	4b61      	ldr	r3, [pc, #388]	; (8004b4c <HAL_RCCEx_PeriphCLKConfig+0xdf0>)
 80049c6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80049c8:	4a60      	ldr	r2, [pc, #384]	; (8004b4c <HAL_RCCEx_PeriphCLKConfig+0xdf0>)
 80049ca:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80049ce:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SDMMC clock source configuration done later after clock selection check */
      break;
 80049d0:	e00b      	b.n	80049ea <HAL_RCCEx_PeriphCLKConfig+0xc8e>

    case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for SDMMC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 80049d2:	687b      	ldr	r3, [r7, #4]
 80049d4:	3304      	adds	r3, #4
 80049d6:	2102      	movs	r1, #2
 80049d8:	4618      	mov	r0, r3
 80049da:	f000 fb77 	bl	80050cc <RCCEx_PLL2_Config>
 80049de:	4603      	mov	r3, r0
 80049e0:	75fb      	strb	r3, [r7, #23]

      /* SDMMC clock source configuration done later after clock selection check */
      break;
 80049e2:	e002      	b.n	80049ea <HAL_RCCEx_PeriphCLKConfig+0xc8e>

    default:
      ret = HAL_ERROR;
 80049e4:	2301      	movs	r3, #1
 80049e6:	75fb      	strb	r3, [r7, #23]
      break;
 80049e8:	bf00      	nop
    }

    if(ret == HAL_OK)
 80049ea:	7dfb      	ldrb	r3, [r7, #23]
 80049ec:	2b00      	cmp	r3, #0
 80049ee:	d109      	bne.n	8004a04 <HAL_RCCEx_PeriphCLKConfig+0xca8>
    {
      /* Set the source of SDMMC clock*/
      __HAL_RCC_SDMMC_CONFIG(PeriphClkInit->SdmmcClockSelection);
 80049f0:	4b56      	ldr	r3, [pc, #344]	; (8004b4c <HAL_RCCEx_PeriphCLKConfig+0xdf0>)
 80049f2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80049f4:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 80049f8:	687b      	ldr	r3, [r7, #4]
 80049fa:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80049fc:	4953      	ldr	r1, [pc, #332]	; (8004b4c <HAL_RCCEx_PeriphCLKConfig+0xdf0>)
 80049fe:	4313      	orrs	r3, r2
 8004a00:	64cb      	str	r3, [r1, #76]	; 0x4c
 8004a02:	e001      	b.n	8004a08 <HAL_RCCEx_PeriphCLKConfig+0xcac>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004a04:	7dfb      	ldrb	r3, [r7, #23]
 8004a06:	75bb      	strb	r3, [r7, #22]
    }
  }

#if defined(LTDC)
  /*-------------------------------------- LTDC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 8004a08:	687b      	ldr	r3, [r7, #4]
 8004a0a:	681b      	ldr	r3, [r3, #0]
 8004a0c:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8004a10:	2b00      	cmp	r3, #0
 8004a12:	d00a      	beq.n	8004a2a <HAL_RCCEx_PeriphCLKConfig+0xcce>
  {
    if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!=HAL_OK)
 8004a14:	687b      	ldr	r3, [r7, #4]
 8004a16:	3324      	adds	r3, #36	; 0x24
 8004a18:	2102      	movs	r1, #2
 8004a1a:	4618      	mov	r0, r3
 8004a1c:	f000 fc08 	bl	8005230 <RCCEx_PLL3_Config>
 8004a20:	4603      	mov	r3, r0
 8004a22:	2b00      	cmp	r3, #0
 8004a24:	d001      	beq.n	8004a2a <HAL_RCCEx_PeriphCLKConfig+0xcce>
    {
      status=HAL_ERROR;
 8004a26:	2301      	movs	r3, #1
 8004a28:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif /* LTDC */

  /*------------------------------ RNG Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 8004a2a:	687b      	ldr	r3, [r7, #4]
 8004a2c:	681b      	ldr	r3, [r3, #0]
 8004a2e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004a32:	2b00      	cmp	r3, #0
 8004a34:	d030      	beq.n	8004a98 <HAL_RCCEx_PeriphCLKConfig+0xd3c>
  {

    switch(PeriphClkInit->RngClockSelection)
 8004a36:	687b      	ldr	r3, [r7, #4]
 8004a38:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8004a3a:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8004a3e:	d017      	beq.n	8004a70 <HAL_RCCEx_PeriphCLKConfig+0xd14>
 8004a40:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8004a44:	d811      	bhi.n	8004a6a <HAL_RCCEx_PeriphCLKConfig+0xd0e>
 8004a46:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004a4a:	d013      	beq.n	8004a74 <HAL_RCCEx_PeriphCLKConfig+0xd18>
 8004a4c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004a50:	d80b      	bhi.n	8004a6a <HAL_RCCEx_PeriphCLKConfig+0xd0e>
 8004a52:	2b00      	cmp	r3, #0
 8004a54:	d010      	beq.n	8004a78 <HAL_RCCEx_PeriphCLKConfig+0xd1c>
 8004a56:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004a5a:	d106      	bne.n	8004a6a <HAL_RCCEx_PeriphCLKConfig+0xd0e>
    {
    case RCC_RNGCLKSOURCE_PLL:     /* PLL is used as clock source for RNG*/
      /* Enable RNG Clock output generated form System RNG . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8004a5c:	4b3b      	ldr	r3, [pc, #236]	; (8004b4c <HAL_RCCEx_PeriphCLKConfig+0xdf0>)
 8004a5e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004a60:	4a3a      	ldr	r2, [pc, #232]	; (8004b4c <HAL_RCCEx_PeriphCLKConfig+0xdf0>)
 8004a62:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004a66:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* RNG clock source configuration done later after clock selection check */
      break;
 8004a68:	e007      	b.n	8004a7a <HAL_RCCEx_PeriphCLKConfig+0xd1e>
      /* HSI48 oscillator is used as source of RNG clock */
      /* RNG clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8004a6a:	2301      	movs	r3, #1
 8004a6c:	75fb      	strb	r3, [r7, #23]
      break;
 8004a6e:	e004      	b.n	8004a7a <HAL_RCCEx_PeriphCLKConfig+0xd1e>
      break;
 8004a70:	bf00      	nop
 8004a72:	e002      	b.n	8004a7a <HAL_RCCEx_PeriphCLKConfig+0xd1e>
      break;
 8004a74:	bf00      	nop
 8004a76:	e000      	b.n	8004a7a <HAL_RCCEx_PeriphCLKConfig+0xd1e>
      break;
 8004a78:	bf00      	nop
    }

    if(ret == HAL_OK)
 8004a7a:	7dfb      	ldrb	r3, [r7, #23]
 8004a7c:	2b00      	cmp	r3, #0
 8004a7e:	d109      	bne.n	8004a94 <HAL_RCCEx_PeriphCLKConfig+0xd38>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8004a80:	4b32      	ldr	r3, [pc, #200]	; (8004b4c <HAL_RCCEx_PeriphCLKConfig+0xdf0>)
 8004a82:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004a84:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8004a88:	687b      	ldr	r3, [r7, #4]
 8004a8a:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8004a8c:	492f      	ldr	r1, [pc, #188]	; (8004b4c <HAL_RCCEx_PeriphCLKConfig+0xdf0>)
 8004a8e:	4313      	orrs	r3, r2
 8004a90:	654b      	str	r3, [r1, #84]	; 0x54
 8004a92:	e001      	b.n	8004a98 <HAL_RCCEx_PeriphCLKConfig+0xd3c>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004a94:	7dfb      	ldrb	r3, [r7, #23]
 8004a96:	75bb      	strb	r3, [r7, #22]
    }

  }

  /*------------------------------ SWPMI1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8004a98:	687b      	ldr	r3, [r7, #4]
 8004a9a:	681b      	ldr	r3, [r3, #0]
 8004a9c:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8004aa0:	2b00      	cmp	r3, #0
 8004aa2:	d008      	beq.n	8004ab6 <HAL_RCCEx_PeriphCLKConfig+0xd5a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 interface clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8004aa4:	4b29      	ldr	r3, [pc, #164]	; (8004b4c <HAL_RCCEx_PeriphCLKConfig+0xdf0>)
 8004aa6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004aa8:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8004aac:	687b      	ldr	r3, [r7, #4]
 8004aae:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8004ab0:	4926      	ldr	r1, [pc, #152]	; (8004b4c <HAL_RCCEx_PeriphCLKConfig+0xdf0>)
 8004ab2:	4313      	orrs	r3, r2
 8004ab4:	650b      	str	r3, [r1, #80]	; 0x50
    /* Configure the HRTIM1 clock source */
    __HAL_RCC_HRTIM1_CONFIG(PeriphClkInit->Hrtim1ClockSelection);
  }
#endif  /*HRTIM1*/
  /*------------------------------ DFSDM1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8004ab6:	687b      	ldr	r3, [r7, #4]
 8004ab8:	681b      	ldr	r3, [r3, #0]
 8004aba:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8004abe:	2b00      	cmp	r3, #0
 8004ac0:	d008      	beq.n	8004ad4 <HAL_RCCEx_PeriphCLKConfig+0xd78>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8004ac2:	4b22      	ldr	r3, [pc, #136]	; (8004b4c <HAL_RCCEx_PeriphCLKConfig+0xdf0>)
 8004ac4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004ac6:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 8004aca:	687b      	ldr	r3, [r7, #4]
 8004acc:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8004ace:	491f      	ldr	r1, [pc, #124]	; (8004b4c <HAL_RCCEx_PeriphCLKConfig+0xdf0>)
 8004ad0:	4313      	orrs	r3, r2
 8004ad2:	650b      	str	r3, [r1, #80]	; 0x50
    __HAL_RCC_DFSDM2_CONFIG(PeriphClkInit->Dfsdm2ClockSelection);
  }
#endif  /* DFSDM2 */

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
 8004ad4:	687b      	ldr	r3, [r7, #4]
 8004ad6:	681b      	ldr	r3, [r3, #0]
 8004ad8:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8004adc:	2b00      	cmp	r3, #0
 8004ade:	d00d      	beq.n	8004afc <HAL_RCCEx_PeriphCLKConfig+0xda0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8004ae0:	4b1a      	ldr	r3, [pc, #104]	; (8004b4c <HAL_RCCEx_PeriphCLKConfig+0xdf0>)
 8004ae2:	691b      	ldr	r3, [r3, #16]
 8004ae4:	4a19      	ldr	r2, [pc, #100]	; (8004b4c <HAL_RCCEx_PeriphCLKConfig+0xdf0>)
 8004ae6:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8004aea:	6113      	str	r3, [r2, #16]
 8004aec:	4b17      	ldr	r3, [pc, #92]	; (8004b4c <HAL_RCCEx_PeriphCLKConfig+0xdf0>)
 8004aee:	691a      	ldr	r2, [r3, #16]
 8004af0:	687b      	ldr	r3, [r7, #4]
 8004af2:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8004af6:	4915      	ldr	r1, [pc, #84]	; (8004b4c <HAL_RCCEx_PeriphCLKConfig+0xdf0>)
 8004af8:	4313      	orrs	r3, r2
 8004afa:	610b      	str	r3, [r1, #16]
  }

  /*------------------------------------ CKPER configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
 8004afc:	687b      	ldr	r3, [r7, #4]
 8004afe:	681b      	ldr	r3, [r3, #0]
 8004b00:	2b00      	cmp	r3, #0
 8004b02:	da08      	bge.n	8004b16 <HAL_RCCEx_PeriphCLKConfig+0xdba>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLKPSOURCE(PeriphClkInit->CkperClockSelection));

    /* Configure the CKPER clock source */
    __HAL_RCC_CLKP_CONFIG(PeriphClkInit->CkperClockSelection);
 8004b04:	4b11      	ldr	r3, [pc, #68]	; (8004b4c <HAL_RCCEx_PeriphCLKConfig+0xdf0>)
 8004b06:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004b08:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8004b0c:	687b      	ldr	r3, [r7, #4]
 8004b0e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004b10:	490e      	ldr	r1, [pc, #56]	; (8004b4c <HAL_RCCEx_PeriphCLKConfig+0xdf0>)
 8004b12:	4313      	orrs	r3, r2
 8004b14:	64cb      	str	r3, [r1, #76]	; 0x4c
  }

  /*------------------------------ CEC Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8004b16:	687b      	ldr	r3, [r7, #4]
 8004b18:	681b      	ldr	r3, [r3, #0]
 8004b1a:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8004b1e:	2b00      	cmp	r3, #0
 8004b20:	d009      	beq.n	8004b36 <HAL_RCCEx_PeriphCLKConfig+0xdda>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC interface clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8004b22:	4b0a      	ldr	r3, [pc, #40]	; (8004b4c <HAL_RCCEx_PeriphCLKConfig+0xdf0>)
 8004b24:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004b26:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8004b2a:	687b      	ldr	r3, [r7, #4]
 8004b2c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004b30:	4906      	ldr	r1, [pc, #24]	; (8004b4c <HAL_RCCEx_PeriphCLKConfig+0xdf0>)
 8004b32:	4313      	orrs	r3, r2
 8004b34:	654b      	str	r3, [r1, #84]	; 0x54
  }

  if (status == HAL_OK)
 8004b36:	7dbb      	ldrb	r3, [r7, #22]
 8004b38:	2b00      	cmp	r3, #0
 8004b3a:	d101      	bne.n	8004b40 <HAL_RCCEx_PeriphCLKConfig+0xde4>
  {
    return HAL_OK;
 8004b3c:	2300      	movs	r3, #0
 8004b3e:	e000      	b.n	8004b42 <HAL_RCCEx_PeriphCLKConfig+0xde6>
  }
  return HAL_ERROR;
 8004b40:	2301      	movs	r3, #1
}
 8004b42:	4618      	mov	r0, r3
 8004b44:	3718      	adds	r7, #24
 8004b46:	46bd      	mov	sp, r7
 8004b48:	bd80      	pop	{r7, pc}
 8004b4a:	bf00      	nop
 8004b4c:	58024400 	.word	0x58024400

08004b50 <HAL_RCCEx_GetD3PCLK1Freq>:
  * @note   Each time D3PCLK1 changes, this function must be called to update the
  *         right D3PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval D3PCLK1 frequency
  */
uint32_t HAL_RCCEx_GetD3PCLK1Freq(void)
{
 8004b50:	b580      	push	{r7, lr}
 8004b52:	af00      	add	r7, sp, #0
#if defined(RCC_D3CFGR_D3PPRE)
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->D3CFGR & RCC_D3CFGR_D3PPRE)>> RCC_D3CFGR_D3PPRE_Pos] & 0x1FU));
 8004b54:	f7ff f8a6 	bl	8003ca4 <HAL_RCC_GetHCLKFreq>
 8004b58:	4602      	mov	r2, r0
 8004b5a:	4b06      	ldr	r3, [pc, #24]	; (8004b74 <HAL_RCCEx_GetD3PCLK1Freq+0x24>)
 8004b5c:	6a1b      	ldr	r3, [r3, #32]
 8004b5e:	091b      	lsrs	r3, r3, #4
 8004b60:	f003 0307 	and.w	r3, r3, #7
 8004b64:	4904      	ldr	r1, [pc, #16]	; (8004b78 <HAL_RCCEx_GetD3PCLK1Freq+0x28>)
 8004b66:	5ccb      	ldrb	r3, [r1, r3]
 8004b68:	f003 031f 	and.w	r3, r3, #31
 8004b6c:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE)>> RCC_SRDCFGR_SRDPPRE_Pos] & 0x1FU));
#endif
}
 8004b70:	4618      	mov	r0, r3
 8004b72:	bd80      	pop	{r7, pc}
 8004b74:	58024400 	.word	0x58024400
 8004b78:	08007164 	.word	0x08007164

08004b7c <HAL_RCCEx_GetPLL2ClockFreq>:
  *         right PLL2CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL2_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL2ClockFreq(PLL2_ClocksTypeDef* PLL2_Clocks)
{
 8004b7c:	b480      	push	{r7}
 8004b7e:	b089      	sub	sp, #36	; 0x24
 8004b80:	af00      	add	r7, sp, #0
 8004b82:	6078      	str	r0, [r7, #4]
  float_t fracn2, pll2vco;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL2M) * PLL2N
     PLL2xCLK = PLL2_VCO / PLL2x
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8004b84:	4ba1      	ldr	r3, [pc, #644]	; (8004e0c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8004b86:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004b88:	f003 0303 	and.w	r3, r3, #3
 8004b8c:	61bb      	str	r3, [r7, #24]
  pll2m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM2)>> 12);
 8004b8e:	4b9f      	ldr	r3, [pc, #636]	; (8004e0c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8004b90:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004b92:	0b1b      	lsrs	r3, r3, #12
 8004b94:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8004b98:	617b      	str	r3, [r7, #20]
  pll2fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL2FRACEN) >> RCC_PLLCFGR_PLL2FRACEN_Pos;
 8004b9a:	4b9c      	ldr	r3, [pc, #624]	; (8004e0c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8004b9c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004b9e:	091b      	lsrs	r3, r3, #4
 8004ba0:	f003 0301 	and.w	r3, r3, #1
 8004ba4:	613b      	str	r3, [r7, #16]
  fracn2 =(float_t)(uint32_t)(pll2fracen* ((RCC->PLL2FRACR & RCC_PLL2FRACR_FRACN2)>> 3));
 8004ba6:	4b99      	ldr	r3, [pc, #612]	; (8004e0c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8004ba8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004baa:	08db      	lsrs	r3, r3, #3
 8004bac:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8004bb0:	693a      	ldr	r2, [r7, #16]
 8004bb2:	fb02 f303 	mul.w	r3, r2, r3
 8004bb6:	ee07 3a90 	vmov	s15, r3
 8004bba:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004bbe:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll2m != 0U)
 8004bc2:	697b      	ldr	r3, [r7, #20]
 8004bc4:	2b00      	cmp	r3, #0
 8004bc6:	f000 8111 	beq.w	8004dec <HAL_RCCEx_GetPLL2ClockFreq+0x270>
  {
    switch (pllsource)
 8004bca:	69bb      	ldr	r3, [r7, #24]
 8004bcc:	2b02      	cmp	r3, #2
 8004bce:	f000 8083 	beq.w	8004cd8 <HAL_RCCEx_GetPLL2ClockFreq+0x15c>
 8004bd2:	69bb      	ldr	r3, [r7, #24]
 8004bd4:	2b02      	cmp	r3, #2
 8004bd6:	f200 80a1 	bhi.w	8004d1c <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
 8004bda:	69bb      	ldr	r3, [r7, #24]
 8004bdc:	2b00      	cmp	r3, #0
 8004bde:	d003      	beq.n	8004be8 <HAL_RCCEx_GetPLL2ClockFreq+0x6c>
 8004be0:	69bb      	ldr	r3, [r7, #24]
 8004be2:	2b01      	cmp	r3, #1
 8004be4:	d056      	beq.n	8004c94 <HAL_RCCEx_GetPLL2ClockFreq+0x118>
 8004be6:	e099      	b.n	8004d1c <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
    {

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8004be8:	4b88      	ldr	r3, [pc, #544]	; (8004e0c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8004bea:	681b      	ldr	r3, [r3, #0]
 8004bec:	f003 0320 	and.w	r3, r3, #32
 8004bf0:	2b00      	cmp	r3, #0
 8004bf2:	d02d      	beq.n	8004c50 <HAL_RCCEx_GetPLL2ClockFreq+0xd4>
      {
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8004bf4:	4b85      	ldr	r3, [pc, #532]	; (8004e0c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8004bf6:	681b      	ldr	r3, [r3, #0]
 8004bf8:	08db      	lsrs	r3, r3, #3
 8004bfa:	f003 0303 	and.w	r3, r3, #3
 8004bfe:	4a84      	ldr	r2, [pc, #528]	; (8004e10 <HAL_RCCEx_GetPLL2ClockFreq+0x294>)
 8004c00:	fa22 f303 	lsr.w	r3, r2, r3
 8004c04:	60bb      	str	r3, [r7, #8]
        pll2vco = ( (float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 8004c06:	68bb      	ldr	r3, [r7, #8]
 8004c08:	ee07 3a90 	vmov	s15, r3
 8004c0c:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004c10:	697b      	ldr	r3, [r7, #20]
 8004c12:	ee07 3a90 	vmov	s15, r3
 8004c16:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004c1a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004c1e:	4b7b      	ldr	r3, [pc, #492]	; (8004e0c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8004c20:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004c22:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004c26:	ee07 3a90 	vmov	s15, r3
 8004c2a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004c2e:	ed97 6a03 	vldr	s12, [r7, #12]
 8004c32:	eddf 5a78 	vldr	s11, [pc, #480]	; 8004e14 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8004c36:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004c3a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004c3e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8004c42:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004c46:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004c4a:	edc7 7a07 	vstr	s15, [r7, #28]
      }
      else
      {
        pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
      }
      break;
 8004c4e:	e087      	b.n	8004d60 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>
        pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 8004c50:	697b      	ldr	r3, [r7, #20]
 8004c52:	ee07 3a90 	vmov	s15, r3
 8004c56:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004c5a:	eddf 6a6f 	vldr	s13, [pc, #444]	; 8004e18 <HAL_RCCEx_GetPLL2ClockFreq+0x29c>
 8004c5e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004c62:	4b6a      	ldr	r3, [pc, #424]	; (8004e0c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8004c64:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004c66:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004c6a:	ee07 3a90 	vmov	s15, r3
 8004c6e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004c72:	ed97 6a03 	vldr	s12, [r7, #12]
 8004c76:	eddf 5a67 	vldr	s11, [pc, #412]	; 8004e14 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8004c7a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004c7e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004c82:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8004c86:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004c8a:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004c8e:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8004c92:	e065      	b.n	8004d60 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

    case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
      pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 8004c94:	697b      	ldr	r3, [r7, #20]
 8004c96:	ee07 3a90 	vmov	s15, r3
 8004c9a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004c9e:	eddf 6a5f 	vldr	s13, [pc, #380]	; 8004e1c <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 8004ca2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004ca6:	4b59      	ldr	r3, [pc, #356]	; (8004e0c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8004ca8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004caa:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004cae:	ee07 3a90 	vmov	s15, r3
 8004cb2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004cb6:	ed97 6a03 	vldr	s12, [r7, #12]
 8004cba:	eddf 5a56 	vldr	s11, [pc, #344]	; 8004e14 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8004cbe:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004cc2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004cc6:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8004cca:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004cce:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004cd2:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8004cd6:	e043      	b.n	8004d60 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 8004cd8:	697b      	ldr	r3, [r7, #20]
 8004cda:	ee07 3a90 	vmov	s15, r3
 8004cde:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004ce2:	eddf 6a4f 	vldr	s13, [pc, #316]	; 8004e20 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>
 8004ce6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004cea:	4b48      	ldr	r3, [pc, #288]	; (8004e0c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8004cec:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004cee:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004cf2:	ee07 3a90 	vmov	s15, r3
 8004cf6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004cfa:	ed97 6a03 	vldr	s12, [r7, #12]
 8004cfe:	eddf 5a45 	vldr	s11, [pc, #276]	; 8004e14 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8004d02:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004d06:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004d0a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8004d0e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004d12:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004d16:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8004d1a:	e021      	b.n	8004d60 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

    default:
      pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 8004d1c:	697b      	ldr	r3, [r7, #20]
 8004d1e:	ee07 3a90 	vmov	s15, r3
 8004d22:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004d26:	eddf 6a3d 	vldr	s13, [pc, #244]	; 8004e1c <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 8004d2a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004d2e:	4b37      	ldr	r3, [pc, #220]	; (8004e0c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8004d30:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004d32:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004d36:	ee07 3a90 	vmov	s15, r3
 8004d3a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004d3e:	ed97 6a03 	vldr	s12, [r7, #12]
 8004d42:	eddf 5a34 	vldr	s11, [pc, #208]	; 8004e14 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8004d46:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004d4a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004d4e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8004d52:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004d56:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004d5a:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8004d5e:	bf00      	nop
    }
    PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_P2) >>9)  + (float_t)1 )) ;
 8004d60:	4b2a      	ldr	r3, [pc, #168]	; (8004e0c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8004d62:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004d64:	0a5b      	lsrs	r3, r3, #9
 8004d66:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8004d6a:	ee07 3a90 	vmov	s15, r3
 8004d6e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004d72:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8004d76:	ee37 7a87 	vadd.f32	s14, s15, s14
 8004d7a:	edd7 6a07 	vldr	s13, [r7, #28]
 8004d7e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8004d82:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8004d86:	ee17 2a90 	vmov	r2, s15
 8004d8a:	687b      	ldr	r3, [r7, #4]
 8004d8c:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_Q2) >>16) + (float_t)1 )) ;
 8004d8e:	4b1f      	ldr	r3, [pc, #124]	; (8004e0c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8004d90:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004d92:	0c1b      	lsrs	r3, r3, #16
 8004d94:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8004d98:	ee07 3a90 	vmov	s15, r3
 8004d9c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004da0:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8004da4:	ee37 7a87 	vadd.f32	s14, s15, s14
 8004da8:	edd7 6a07 	vldr	s13, [r7, #28]
 8004dac:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8004db0:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8004db4:	ee17 2a90 	vmov	r2, s15
 8004db8:	687b      	ldr	r3, [r7, #4]
 8004dba:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_R2) >>24) + (float_t)1 )) ;
 8004dbc:	4b13      	ldr	r3, [pc, #76]	; (8004e0c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8004dbe:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004dc0:	0e1b      	lsrs	r3, r3, #24
 8004dc2:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8004dc6:	ee07 3a90 	vmov	s15, r3
 8004dca:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004dce:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8004dd2:	ee37 7a87 	vadd.f32	s14, s15, s14
 8004dd6:	edd7 6a07 	vldr	s13, [r7, #28]
 8004dda:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8004dde:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8004de2:	ee17 2a90 	vmov	r2, s15
 8004de6:	687b      	ldr	r3, [r7, #4]
 8004de8:	609a      	str	r2, [r3, #8]
  {
    PLL2_Clocks->PLL2_P_Frequency = 0U;
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
    PLL2_Clocks->PLL2_R_Frequency = 0U;
  }
}
 8004dea:	e008      	b.n	8004dfe <HAL_RCCEx_GetPLL2ClockFreq+0x282>
    PLL2_Clocks->PLL2_P_Frequency = 0U;
 8004dec:	687b      	ldr	r3, [r7, #4]
 8004dee:	2200      	movs	r2, #0
 8004df0:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
 8004df2:	687b      	ldr	r3, [r7, #4]
 8004df4:	2200      	movs	r2, #0
 8004df6:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = 0U;
 8004df8:	687b      	ldr	r3, [r7, #4]
 8004dfa:	2200      	movs	r2, #0
 8004dfc:	609a      	str	r2, [r3, #8]
}
 8004dfe:	bf00      	nop
 8004e00:	3724      	adds	r7, #36	; 0x24
 8004e02:	46bd      	mov	sp, r7
 8004e04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e08:	4770      	bx	lr
 8004e0a:	bf00      	nop
 8004e0c:	58024400 	.word	0x58024400
 8004e10:	03d09000 	.word	0x03d09000
 8004e14:	46000000 	.word	0x46000000
 8004e18:	4c742400 	.word	0x4c742400
 8004e1c:	4a742400 	.word	0x4a742400
 8004e20:	4af42400 	.word	0x4af42400

08004e24 <HAL_RCCEx_GetPLL3ClockFreq>:
  *         right PLL3CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL3_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL3ClockFreq(PLL3_ClocksTypeDef* PLL3_Clocks)
{
 8004e24:	b480      	push	{r7}
 8004e26:	b089      	sub	sp, #36	; 0x24
 8004e28:	af00      	add	r7, sp, #0
 8004e2a:	6078      	str	r0, [r7, #4]
  float_t fracn3, pll3vco;

  /* PLL3_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL3M) * PLL3N
     PLL3xCLK = PLL3_VCO / PLLxR
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8004e2c:	4ba1      	ldr	r3, [pc, #644]	; (80050b4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8004e2e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004e30:	f003 0303 	and.w	r3, r3, #3
 8004e34:	61bb      	str	r3, [r7, #24]
  pll3m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM3)>> 20)  ;
 8004e36:	4b9f      	ldr	r3, [pc, #636]	; (80050b4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8004e38:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004e3a:	0d1b      	lsrs	r3, r3, #20
 8004e3c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8004e40:	617b      	str	r3, [r7, #20]
  pll3fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL3FRACEN) >> RCC_PLLCFGR_PLL3FRACEN_Pos;
 8004e42:	4b9c      	ldr	r3, [pc, #624]	; (80050b4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8004e44:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004e46:	0a1b      	lsrs	r3, r3, #8
 8004e48:	f003 0301 	and.w	r3, r3, #1
 8004e4c:	613b      	str	r3, [r7, #16]
  fracn3 = (float_t)(uint32_t)(pll3fracen* ((RCC->PLL3FRACR & RCC_PLL3FRACR_FRACN3)>> 3));
 8004e4e:	4b99      	ldr	r3, [pc, #612]	; (80050b4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8004e50:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004e52:	08db      	lsrs	r3, r3, #3
 8004e54:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8004e58:	693a      	ldr	r2, [r7, #16]
 8004e5a:	fb02 f303 	mul.w	r3, r2, r3
 8004e5e:	ee07 3a90 	vmov	s15, r3
 8004e62:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004e66:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll3m != 0U)
 8004e6a:	697b      	ldr	r3, [r7, #20]
 8004e6c:	2b00      	cmp	r3, #0
 8004e6e:	f000 8111 	beq.w	8005094 <HAL_RCCEx_GetPLL3ClockFreq+0x270>
  {
    switch (pllsource)
 8004e72:	69bb      	ldr	r3, [r7, #24]
 8004e74:	2b02      	cmp	r3, #2
 8004e76:	f000 8083 	beq.w	8004f80 <HAL_RCCEx_GetPLL3ClockFreq+0x15c>
 8004e7a:	69bb      	ldr	r3, [r7, #24]
 8004e7c:	2b02      	cmp	r3, #2
 8004e7e:	f200 80a1 	bhi.w	8004fc4 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
 8004e82:	69bb      	ldr	r3, [r7, #24]
 8004e84:	2b00      	cmp	r3, #0
 8004e86:	d003      	beq.n	8004e90 <HAL_RCCEx_GetPLL3ClockFreq+0x6c>
 8004e88:	69bb      	ldr	r3, [r7, #24]
 8004e8a:	2b01      	cmp	r3, #1
 8004e8c:	d056      	beq.n	8004f3c <HAL_RCCEx_GetPLL3ClockFreq+0x118>
 8004e8e:	e099      	b.n	8004fc4 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8004e90:	4b88      	ldr	r3, [pc, #544]	; (80050b4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8004e92:	681b      	ldr	r3, [r3, #0]
 8004e94:	f003 0320 	and.w	r3, r3, #32
 8004e98:	2b00      	cmp	r3, #0
 8004e9a:	d02d      	beq.n	8004ef8 <HAL_RCCEx_GetPLL3ClockFreq+0xd4>
      {
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8004e9c:	4b85      	ldr	r3, [pc, #532]	; (80050b4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8004e9e:	681b      	ldr	r3, [r3, #0]
 8004ea0:	08db      	lsrs	r3, r3, #3
 8004ea2:	f003 0303 	and.w	r3, r3, #3
 8004ea6:	4a84      	ldr	r2, [pc, #528]	; (80050b8 <HAL_RCCEx_GetPLL3ClockFreq+0x294>)
 8004ea8:	fa22 f303 	lsr.w	r3, r2, r3
 8004eac:	60bb      	str	r3, [r7, #8]
        pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 8004eae:	68bb      	ldr	r3, [r7, #8]
 8004eb0:	ee07 3a90 	vmov	s15, r3
 8004eb4:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004eb8:	697b      	ldr	r3, [r7, #20]
 8004eba:	ee07 3a90 	vmov	s15, r3
 8004ebe:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004ec2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004ec6:	4b7b      	ldr	r3, [pc, #492]	; (80050b4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8004ec8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004eca:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004ece:	ee07 3a90 	vmov	s15, r3
 8004ed2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004ed6:	ed97 6a03 	vldr	s12, [r7, #12]
 8004eda:	eddf 5a78 	vldr	s11, [pc, #480]	; 80050bc <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8004ede:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004ee2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004ee6:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8004eea:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004eee:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004ef2:	edc7 7a07 	vstr	s15, [r7, #28]
      }
      else
      {
        pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
      }
      break;
 8004ef6:	e087      	b.n	8005008 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
        pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 8004ef8:	697b      	ldr	r3, [r7, #20]
 8004efa:	ee07 3a90 	vmov	s15, r3
 8004efe:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004f02:	eddf 6a6f 	vldr	s13, [pc, #444]	; 80050c0 <HAL_RCCEx_GetPLL3ClockFreq+0x29c>
 8004f06:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004f0a:	4b6a      	ldr	r3, [pc, #424]	; (80050b4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8004f0c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004f0e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004f12:	ee07 3a90 	vmov	s15, r3
 8004f16:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004f1a:	ed97 6a03 	vldr	s12, [r7, #12]
 8004f1e:	eddf 5a67 	vldr	s11, [pc, #412]	; 80050bc <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8004f22:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004f26:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004f2a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8004f2e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004f32:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004f36:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8004f3a:	e065      	b.n	8005008 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
    case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
      pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 8004f3c:	697b      	ldr	r3, [r7, #20]
 8004f3e:	ee07 3a90 	vmov	s15, r3
 8004f42:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004f46:	eddf 6a5f 	vldr	s13, [pc, #380]	; 80050c4 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 8004f4a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004f4e:	4b59      	ldr	r3, [pc, #356]	; (80050b4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8004f50:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004f52:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004f56:	ee07 3a90 	vmov	s15, r3
 8004f5a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004f5e:	ed97 6a03 	vldr	s12, [r7, #12]
 8004f62:	eddf 5a56 	vldr	s11, [pc, #344]	; 80050bc <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8004f66:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004f6a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004f6e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8004f72:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004f76:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004f7a:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8004f7e:	e043      	b.n	8005008 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 8004f80:	697b      	ldr	r3, [r7, #20]
 8004f82:	ee07 3a90 	vmov	s15, r3
 8004f86:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004f8a:	eddf 6a4f 	vldr	s13, [pc, #316]	; 80050c8 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>
 8004f8e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004f92:	4b48      	ldr	r3, [pc, #288]	; (80050b4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8004f94:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004f96:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004f9a:	ee07 3a90 	vmov	s15, r3
 8004f9e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004fa2:	ed97 6a03 	vldr	s12, [r7, #12]
 8004fa6:	eddf 5a45 	vldr	s11, [pc, #276]	; 80050bc <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8004faa:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004fae:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004fb2:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8004fb6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004fba:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004fbe:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8004fc2:	e021      	b.n	8005008 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

    default:
      pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 8004fc4:	697b      	ldr	r3, [r7, #20]
 8004fc6:	ee07 3a90 	vmov	s15, r3
 8004fca:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004fce:	eddf 6a3d 	vldr	s13, [pc, #244]	; 80050c4 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 8004fd2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004fd6:	4b37      	ldr	r3, [pc, #220]	; (80050b4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8004fd8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004fda:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004fde:	ee07 3a90 	vmov	s15, r3
 8004fe2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004fe6:	ed97 6a03 	vldr	s12, [r7, #12]
 8004fea:	eddf 5a34 	vldr	s11, [pc, #208]	; 80050bc <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8004fee:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004ff2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004ff6:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8004ffa:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004ffe:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005002:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8005006:	bf00      	nop
    }
    PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_P3) >>9)  + (float_t)1 )) ;
 8005008:	4b2a      	ldr	r3, [pc, #168]	; (80050b4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800500a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800500c:	0a5b      	lsrs	r3, r3, #9
 800500e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8005012:	ee07 3a90 	vmov	s15, r3
 8005016:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800501a:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800501e:	ee37 7a87 	vadd.f32	s14, s15, s14
 8005022:	edd7 6a07 	vldr	s13, [r7, #28]
 8005026:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800502a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800502e:	ee17 2a90 	vmov	r2, s15
 8005032:	687b      	ldr	r3, [r7, #4]
 8005034:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_Q3) >>16) + (float_t)1 )) ;
 8005036:	4b1f      	ldr	r3, [pc, #124]	; (80050b4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8005038:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800503a:	0c1b      	lsrs	r3, r3, #16
 800503c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8005040:	ee07 3a90 	vmov	s15, r3
 8005044:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005048:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800504c:	ee37 7a87 	vadd.f32	s14, s15, s14
 8005050:	edd7 6a07 	vldr	s13, [r7, #28]
 8005054:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8005058:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800505c:	ee17 2a90 	vmov	r2, s15
 8005060:	687b      	ldr	r3, [r7, #4]
 8005062:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_R3) >>24) + (float_t)1 )) ;
 8005064:	4b13      	ldr	r3, [pc, #76]	; (80050b4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8005066:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005068:	0e1b      	lsrs	r3, r3, #24
 800506a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800506e:	ee07 3a90 	vmov	s15, r3
 8005072:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005076:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800507a:	ee37 7a87 	vadd.f32	s14, s15, s14
 800507e:	edd7 6a07 	vldr	s13, [r7, #28]
 8005082:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8005086:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800508a:	ee17 2a90 	vmov	r2, s15
 800508e:	687b      	ldr	r3, [r7, #4]
 8005090:	609a      	str	r2, [r3, #8]
    PLL3_Clocks->PLL3_P_Frequency = 0U;
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
    PLL3_Clocks->PLL3_R_Frequency = 0U;
  }

}
 8005092:	e008      	b.n	80050a6 <HAL_RCCEx_GetPLL3ClockFreq+0x282>
    PLL3_Clocks->PLL3_P_Frequency = 0U;
 8005094:	687b      	ldr	r3, [r7, #4]
 8005096:	2200      	movs	r2, #0
 8005098:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
 800509a:	687b      	ldr	r3, [r7, #4]
 800509c:	2200      	movs	r2, #0
 800509e:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = 0U;
 80050a0:	687b      	ldr	r3, [r7, #4]
 80050a2:	2200      	movs	r2, #0
 80050a4:	609a      	str	r2, [r3, #8]
}
 80050a6:	bf00      	nop
 80050a8:	3724      	adds	r7, #36	; 0x24
 80050aa:	46bd      	mov	sp, r7
 80050ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050b0:	4770      	bx	lr
 80050b2:	bf00      	nop
 80050b4:	58024400 	.word	0x58024400
 80050b8:	03d09000 	.word	0x03d09000
 80050bc:	46000000 	.word	0x46000000
 80050c0:	4c742400 	.word	0x4c742400
 80050c4:	4a742400 	.word	0x4a742400
 80050c8:	4af42400 	.word	0x4af42400

080050cc <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(RCC_PLL2InitTypeDef *pll2, uint32_t Divider)
{
 80050cc:	b580      	push	{r7, lr}
 80050ce:	b084      	sub	sp, #16
 80050d0:	af00      	add	r7, sp, #0
 80050d2:	6078      	str	r0, [r7, #4]
 80050d4:	6039      	str	r1, [r7, #0]

  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 80050d6:	2300      	movs	r3, #0
 80050d8:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL2RGE_VALUE(pll2->PLL2RGE));
  assert_param(IS_RCC_PLL2VCO_VALUE(pll2->PLL2VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll2->PLL2FRACN));

  /* Check that PLL2 OSC clock source is already set */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 80050da:	4b53      	ldr	r3, [pc, #332]	; (8005228 <RCCEx_PLL2_Config+0x15c>)
 80050dc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80050de:	f003 0303 	and.w	r3, r3, #3
 80050e2:	2b03      	cmp	r3, #3
 80050e4:	d101      	bne.n	80050ea <RCCEx_PLL2_Config+0x1e>
  {
    return HAL_ERROR;
 80050e6:	2301      	movs	r3, #1
 80050e8:	e099      	b.n	800521e <RCCEx_PLL2_Config+0x152>


  else
  {
    /* Disable  PLL2. */
    __HAL_RCC_PLL2_DISABLE();
 80050ea:	4b4f      	ldr	r3, [pc, #316]	; (8005228 <RCCEx_PLL2_Config+0x15c>)
 80050ec:	681b      	ldr	r3, [r3, #0]
 80050ee:	4a4e      	ldr	r2, [pc, #312]	; (8005228 <RCCEx_PLL2_Config+0x15c>)
 80050f0:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 80050f4:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80050f6:	f7fc f975 	bl	80013e4 <HAL_GetTick>
 80050fa:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 80050fc:	e008      	b.n	8005110 <RCCEx_PLL2_Config+0x44>
    {
      if( (HAL_GetTick() - tickstart ) > PLL2_TIMEOUT_VALUE)
 80050fe:	f7fc f971 	bl	80013e4 <HAL_GetTick>
 8005102:	4602      	mov	r2, r0
 8005104:	68bb      	ldr	r3, [r7, #8]
 8005106:	1ad3      	subs	r3, r2, r3
 8005108:	2b02      	cmp	r3, #2
 800510a:	d901      	bls.n	8005110 <RCCEx_PLL2_Config+0x44>
      {
        return HAL_TIMEOUT;
 800510c:	2303      	movs	r3, #3
 800510e:	e086      	b.n	800521e <RCCEx_PLL2_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8005110:	4b45      	ldr	r3, [pc, #276]	; (8005228 <RCCEx_PLL2_Config+0x15c>)
 8005112:	681b      	ldr	r3, [r3, #0]
 8005114:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8005118:	2b00      	cmp	r3, #0
 800511a:	d1f0      	bne.n	80050fe <RCCEx_PLL2_Config+0x32>
      }
    }

    /* Configure PLL2 multiplication and division factors. */
    __HAL_RCC_PLL2_CONFIG(pll2->PLL2M,
 800511c:	4b42      	ldr	r3, [pc, #264]	; (8005228 <RCCEx_PLL2_Config+0x15c>)
 800511e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005120:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 8005124:	687b      	ldr	r3, [r7, #4]
 8005126:	681b      	ldr	r3, [r3, #0]
 8005128:	031b      	lsls	r3, r3, #12
 800512a:	493f      	ldr	r1, [pc, #252]	; (8005228 <RCCEx_PLL2_Config+0x15c>)
 800512c:	4313      	orrs	r3, r2
 800512e:	628b      	str	r3, [r1, #40]	; 0x28
 8005130:	687b      	ldr	r3, [r7, #4]
 8005132:	685b      	ldr	r3, [r3, #4]
 8005134:	3b01      	subs	r3, #1
 8005136:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800513a:	687b      	ldr	r3, [r7, #4]
 800513c:	689b      	ldr	r3, [r3, #8]
 800513e:	3b01      	subs	r3, #1
 8005140:	025b      	lsls	r3, r3, #9
 8005142:	b29b      	uxth	r3, r3
 8005144:	431a      	orrs	r2, r3
 8005146:	687b      	ldr	r3, [r7, #4]
 8005148:	68db      	ldr	r3, [r3, #12]
 800514a:	3b01      	subs	r3, #1
 800514c:	041b      	lsls	r3, r3, #16
 800514e:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 8005152:	431a      	orrs	r2, r3
 8005154:	687b      	ldr	r3, [r7, #4]
 8005156:	691b      	ldr	r3, [r3, #16]
 8005158:	3b01      	subs	r3, #1
 800515a:	061b      	lsls	r3, r3, #24
 800515c:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 8005160:	4931      	ldr	r1, [pc, #196]	; (8005228 <RCCEx_PLL2_Config+0x15c>)
 8005162:	4313      	orrs	r3, r2
 8005164:	638b      	str	r3, [r1, #56]	; 0x38
                          pll2->PLL2P,
                          pll2->PLL2Q,
                          pll2->PLL2R);

    /* Select PLL2 input reference frequency range: VCI */
    __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE) ;
 8005166:	4b30      	ldr	r3, [pc, #192]	; (8005228 <RCCEx_PLL2_Config+0x15c>)
 8005168:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800516a:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 800516e:	687b      	ldr	r3, [r7, #4]
 8005170:	695b      	ldr	r3, [r3, #20]
 8005172:	492d      	ldr	r1, [pc, #180]	; (8005228 <RCCEx_PLL2_Config+0x15c>)
 8005174:	4313      	orrs	r3, r2
 8005176:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL2 output frequency range : VCO */
    __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL) ;
 8005178:	4b2b      	ldr	r3, [pc, #172]	; (8005228 <RCCEx_PLL2_Config+0x15c>)
 800517a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800517c:	f023 0220 	bic.w	r2, r3, #32
 8005180:	687b      	ldr	r3, [r7, #4]
 8005182:	699b      	ldr	r3, [r3, #24]
 8005184:	4928      	ldr	r1, [pc, #160]	; (8005228 <RCCEx_PLL2_Config+0x15c>)
 8005186:	4313      	orrs	r3, r2
 8005188:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_DISABLE();
 800518a:	4b27      	ldr	r3, [pc, #156]	; (8005228 <RCCEx_PLL2_Config+0x15c>)
 800518c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800518e:	4a26      	ldr	r2, [pc, #152]	; (8005228 <RCCEx_PLL2_Config+0x15c>)
 8005190:	f023 0310 	bic.w	r3, r3, #16
 8005194:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 8005196:	4b24      	ldr	r3, [pc, #144]	; (8005228 <RCCEx_PLL2_Config+0x15c>)
 8005198:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800519a:	4b24      	ldr	r3, [pc, #144]	; (800522c <RCCEx_PLL2_Config+0x160>)
 800519c:	4013      	ands	r3, r2
 800519e:	687a      	ldr	r2, [r7, #4]
 80051a0:	69d2      	ldr	r2, [r2, #28]
 80051a2:	00d2      	lsls	r2, r2, #3
 80051a4:	4920      	ldr	r1, [pc, #128]	; (8005228 <RCCEx_PLL2_Config+0x15c>)
 80051a6:	4313      	orrs	r3, r2
 80051a8:	63cb      	str	r3, [r1, #60]	; 0x3c

    /* Enable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_ENABLE();
 80051aa:	4b1f      	ldr	r3, [pc, #124]	; (8005228 <RCCEx_PLL2_Config+0x15c>)
 80051ac:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80051ae:	4a1e      	ldr	r2, [pc, #120]	; (8005228 <RCCEx_PLL2_Config+0x15c>)
 80051b0:	f043 0310 	orr.w	r3, r3, #16
 80051b4:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL2 clock output */
    if(Divider == DIVIDER_P_UPDATE)
 80051b6:	683b      	ldr	r3, [r7, #0]
 80051b8:	2b00      	cmp	r3, #0
 80051ba:	d106      	bne.n	80051ca <RCCEx_PLL2_Config+0xfe>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 80051bc:	4b1a      	ldr	r3, [pc, #104]	; (8005228 <RCCEx_PLL2_Config+0x15c>)
 80051be:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80051c0:	4a19      	ldr	r2, [pc, #100]	; (8005228 <RCCEx_PLL2_Config+0x15c>)
 80051c2:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80051c6:	62d3      	str	r3, [r2, #44]	; 0x2c
 80051c8:	e00f      	b.n	80051ea <RCCEx_PLL2_Config+0x11e>
    }
    else if(Divider == DIVIDER_Q_UPDATE)
 80051ca:	683b      	ldr	r3, [r7, #0]
 80051cc:	2b01      	cmp	r3, #1
 80051ce:	d106      	bne.n	80051de <RCCEx_PLL2_Config+0x112>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVQ);
 80051d0:	4b15      	ldr	r3, [pc, #84]	; (8005228 <RCCEx_PLL2_Config+0x15c>)
 80051d2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80051d4:	4a14      	ldr	r2, [pc, #80]	; (8005228 <RCCEx_PLL2_Config+0x15c>)
 80051d6:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80051da:	62d3      	str	r3, [r2, #44]	; 0x2c
 80051dc:	e005      	b.n	80051ea <RCCEx_PLL2_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVR);
 80051de:	4b12      	ldr	r3, [pc, #72]	; (8005228 <RCCEx_PLL2_Config+0x15c>)
 80051e0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80051e2:	4a11      	ldr	r2, [pc, #68]	; (8005228 <RCCEx_PLL2_Config+0x15c>)
 80051e4:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80051e8:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL2. */
    __HAL_RCC_PLL2_ENABLE();
 80051ea:	4b0f      	ldr	r3, [pc, #60]	; (8005228 <RCCEx_PLL2_Config+0x15c>)
 80051ec:	681b      	ldr	r3, [r3, #0]
 80051ee:	4a0e      	ldr	r2, [pc, #56]	; (8005228 <RCCEx_PLL2_Config+0x15c>)
 80051f0:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 80051f4:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80051f6:	f7fc f8f5 	bl	80013e4 <HAL_GetTick>
 80051fa:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL2 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 80051fc:	e008      	b.n	8005210 <RCCEx_PLL2_Config+0x144>
    {
      if( (HAL_GetTick() - tickstart ) > PLL2_TIMEOUT_VALUE)
 80051fe:	f7fc f8f1 	bl	80013e4 <HAL_GetTick>
 8005202:	4602      	mov	r2, r0
 8005204:	68bb      	ldr	r3, [r7, #8]
 8005206:	1ad3      	subs	r3, r2, r3
 8005208:	2b02      	cmp	r3, #2
 800520a:	d901      	bls.n	8005210 <RCCEx_PLL2_Config+0x144>
      {
        return HAL_TIMEOUT;
 800520c:	2303      	movs	r3, #3
 800520e:	e006      	b.n	800521e <RCCEx_PLL2_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8005210:	4b05      	ldr	r3, [pc, #20]	; (8005228 <RCCEx_PLL2_Config+0x15c>)
 8005212:	681b      	ldr	r3, [r3, #0]
 8005214:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8005218:	2b00      	cmp	r3, #0
 800521a:	d0f0      	beq.n	80051fe <RCCEx_PLL2_Config+0x132>
    }

  }


  return status;
 800521c:	7bfb      	ldrb	r3, [r7, #15]
}
 800521e:	4618      	mov	r0, r3
 8005220:	3710      	adds	r7, #16
 8005222:	46bd      	mov	sp, r7
 8005224:	bd80      	pop	{r7, pc}
 8005226:	bf00      	nop
 8005228:	58024400 	.word	0x58024400
 800522c:	ffff0007 	.word	0xffff0007

08005230 <RCCEx_PLL3_Config>:
  * @note   PLL3 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(RCC_PLL3InitTypeDef *pll3, uint32_t Divider)
{
 8005230:	b580      	push	{r7, lr}
 8005232:	b084      	sub	sp, #16
 8005234:	af00      	add	r7, sp, #0
 8005236:	6078      	str	r0, [r7, #4]
 8005238:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800523a:	2300      	movs	r3, #0
 800523c:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL3RGE_VALUE(pll3->PLL3RGE));
  assert_param(IS_RCC_PLL3VCO_VALUE(pll3->PLL3VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll3->PLL3FRACN));

  /* Check that PLL3 OSC clock source is already set */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 800523e:	4b53      	ldr	r3, [pc, #332]	; (800538c <RCCEx_PLL3_Config+0x15c>)
 8005240:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005242:	f003 0303 	and.w	r3, r3, #3
 8005246:	2b03      	cmp	r3, #3
 8005248:	d101      	bne.n	800524e <RCCEx_PLL3_Config+0x1e>
  {
    return HAL_ERROR;
 800524a:	2301      	movs	r3, #1
 800524c:	e099      	b.n	8005382 <RCCEx_PLL3_Config+0x152>


  else
  {
    /* Disable  PLL3. */
    __HAL_RCC_PLL3_DISABLE();
 800524e:	4b4f      	ldr	r3, [pc, #316]	; (800538c <RCCEx_PLL3_Config+0x15c>)
 8005250:	681b      	ldr	r3, [r3, #0]
 8005252:	4a4e      	ldr	r2, [pc, #312]	; (800538c <RCCEx_PLL3_Config+0x15c>)
 8005254:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8005258:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800525a:	f7fc f8c3 	bl	80013e4 <HAL_GetTick>
 800525e:	60b8      	str	r0, [r7, #8]
    /* Wait till PLL3 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8005260:	e008      	b.n	8005274 <RCCEx_PLL3_Config+0x44>
    {
      if( (HAL_GetTick() - tickstart ) > PLL3_TIMEOUT_VALUE)
 8005262:	f7fc f8bf 	bl	80013e4 <HAL_GetTick>
 8005266:	4602      	mov	r2, r0
 8005268:	68bb      	ldr	r3, [r7, #8]
 800526a:	1ad3      	subs	r3, r2, r3
 800526c:	2b02      	cmp	r3, #2
 800526e:	d901      	bls.n	8005274 <RCCEx_PLL3_Config+0x44>
      {
        return HAL_TIMEOUT;
 8005270:	2303      	movs	r3, #3
 8005272:	e086      	b.n	8005382 <RCCEx_PLL3_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8005274:	4b45      	ldr	r3, [pc, #276]	; (800538c <RCCEx_PLL3_Config+0x15c>)
 8005276:	681b      	ldr	r3, [r3, #0]
 8005278:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800527c:	2b00      	cmp	r3, #0
 800527e:	d1f0      	bne.n	8005262 <RCCEx_PLL3_Config+0x32>
      }
    }

    /* Configure the PLL3  multiplication and division factors. */
    __HAL_RCC_PLL3_CONFIG(pll3->PLL3M,
 8005280:	4b42      	ldr	r3, [pc, #264]	; (800538c <RCCEx_PLL3_Config+0x15c>)
 8005282:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005284:	f023 727c 	bic.w	r2, r3, #66060288	; 0x3f00000
 8005288:	687b      	ldr	r3, [r7, #4]
 800528a:	681b      	ldr	r3, [r3, #0]
 800528c:	051b      	lsls	r3, r3, #20
 800528e:	493f      	ldr	r1, [pc, #252]	; (800538c <RCCEx_PLL3_Config+0x15c>)
 8005290:	4313      	orrs	r3, r2
 8005292:	628b      	str	r3, [r1, #40]	; 0x28
 8005294:	687b      	ldr	r3, [r7, #4]
 8005296:	685b      	ldr	r3, [r3, #4]
 8005298:	3b01      	subs	r3, #1
 800529a:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800529e:	687b      	ldr	r3, [r7, #4]
 80052a0:	689b      	ldr	r3, [r3, #8]
 80052a2:	3b01      	subs	r3, #1
 80052a4:	025b      	lsls	r3, r3, #9
 80052a6:	b29b      	uxth	r3, r3
 80052a8:	431a      	orrs	r2, r3
 80052aa:	687b      	ldr	r3, [r7, #4]
 80052ac:	68db      	ldr	r3, [r3, #12]
 80052ae:	3b01      	subs	r3, #1
 80052b0:	041b      	lsls	r3, r3, #16
 80052b2:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 80052b6:	431a      	orrs	r2, r3
 80052b8:	687b      	ldr	r3, [r7, #4]
 80052ba:	691b      	ldr	r3, [r3, #16]
 80052bc:	3b01      	subs	r3, #1
 80052be:	061b      	lsls	r3, r3, #24
 80052c0:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 80052c4:	4931      	ldr	r1, [pc, #196]	; (800538c <RCCEx_PLL3_Config+0x15c>)
 80052c6:	4313      	orrs	r3, r2
 80052c8:	640b      	str	r3, [r1, #64]	; 0x40
                          pll3->PLL3P,
                          pll3->PLL3Q,
                          pll3->PLL3R);

    /* Select PLL3 input reference frequency range: VCI */
    __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE) ;
 80052ca:	4b30      	ldr	r3, [pc, #192]	; (800538c <RCCEx_PLL3_Config+0x15c>)
 80052cc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80052ce:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 80052d2:	687b      	ldr	r3, [r7, #4]
 80052d4:	695b      	ldr	r3, [r3, #20]
 80052d6:	492d      	ldr	r1, [pc, #180]	; (800538c <RCCEx_PLL3_Config+0x15c>)
 80052d8:	4313      	orrs	r3, r2
 80052da:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL3 output frequency range : VCO */
    __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL) ;
 80052dc:	4b2b      	ldr	r3, [pc, #172]	; (800538c <RCCEx_PLL3_Config+0x15c>)
 80052de:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80052e0:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 80052e4:	687b      	ldr	r3, [r7, #4]
 80052e6:	699b      	ldr	r3, [r3, #24]
 80052e8:	4928      	ldr	r1, [pc, #160]	; (800538c <RCCEx_PLL3_Config+0x15c>)
 80052ea:	4313      	orrs	r3, r2
 80052ec:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_DISABLE();
 80052ee:	4b27      	ldr	r3, [pc, #156]	; (800538c <RCCEx_PLL3_Config+0x15c>)
 80052f0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80052f2:	4a26      	ldr	r2, [pc, #152]	; (800538c <RCCEx_PLL3_Config+0x15c>)
 80052f4:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80052f8:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 80052fa:	4b24      	ldr	r3, [pc, #144]	; (800538c <RCCEx_PLL3_Config+0x15c>)
 80052fc:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80052fe:	4b24      	ldr	r3, [pc, #144]	; (8005390 <RCCEx_PLL3_Config+0x160>)
 8005300:	4013      	ands	r3, r2
 8005302:	687a      	ldr	r2, [r7, #4]
 8005304:	69d2      	ldr	r2, [r2, #28]
 8005306:	00d2      	lsls	r2, r2, #3
 8005308:	4920      	ldr	r1, [pc, #128]	; (800538c <RCCEx_PLL3_Config+0x15c>)
 800530a:	4313      	orrs	r3, r2
 800530c:	644b      	str	r3, [r1, #68]	; 0x44

    /* Enable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_ENABLE();
 800530e:	4b1f      	ldr	r3, [pc, #124]	; (800538c <RCCEx_PLL3_Config+0x15c>)
 8005310:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005312:	4a1e      	ldr	r2, [pc, #120]	; (800538c <RCCEx_PLL3_Config+0x15c>)
 8005314:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005318:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL3 clock output */
    if(Divider == DIVIDER_P_UPDATE)
 800531a:	683b      	ldr	r3, [r7, #0]
 800531c:	2b00      	cmp	r3, #0
 800531e:	d106      	bne.n	800532e <RCCEx_PLL3_Config+0xfe>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
 8005320:	4b1a      	ldr	r3, [pc, #104]	; (800538c <RCCEx_PLL3_Config+0x15c>)
 8005322:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005324:	4a19      	ldr	r2, [pc, #100]	; (800538c <RCCEx_PLL3_Config+0x15c>)
 8005326:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 800532a:	62d3      	str	r3, [r2, #44]	; 0x2c
 800532c:	e00f      	b.n	800534e <RCCEx_PLL3_Config+0x11e>
    }
    else if(Divider == DIVIDER_Q_UPDATE)
 800532e:	683b      	ldr	r3, [r7, #0]
 8005330:	2b01      	cmp	r3, #1
 8005332:	d106      	bne.n	8005342 <RCCEx_PLL3_Config+0x112>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
 8005334:	4b15      	ldr	r3, [pc, #84]	; (800538c <RCCEx_PLL3_Config+0x15c>)
 8005336:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005338:	4a14      	ldr	r2, [pc, #80]	; (800538c <RCCEx_PLL3_Config+0x15c>)
 800533a:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 800533e:	62d3      	str	r3, [r2, #44]	; 0x2c
 8005340:	e005      	b.n	800534e <RCCEx_PLL3_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
 8005342:	4b12      	ldr	r3, [pc, #72]	; (800538c <RCCEx_PLL3_Config+0x15c>)
 8005344:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005346:	4a11      	ldr	r2, [pc, #68]	; (800538c <RCCEx_PLL3_Config+0x15c>)
 8005348:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800534c:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL3. */
    __HAL_RCC_PLL3_ENABLE();
 800534e:	4b0f      	ldr	r3, [pc, #60]	; (800538c <RCCEx_PLL3_Config+0x15c>)
 8005350:	681b      	ldr	r3, [r3, #0]
 8005352:	4a0e      	ldr	r2, [pc, #56]	; (800538c <RCCEx_PLL3_Config+0x15c>)
 8005354:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005358:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800535a:	f7fc f843 	bl	80013e4 <HAL_GetTick>
 800535e:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL3 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8005360:	e008      	b.n	8005374 <RCCEx_PLL3_Config+0x144>
    {
      if( (HAL_GetTick() - tickstart ) > PLL3_TIMEOUT_VALUE)
 8005362:	f7fc f83f 	bl	80013e4 <HAL_GetTick>
 8005366:	4602      	mov	r2, r0
 8005368:	68bb      	ldr	r3, [r7, #8]
 800536a:	1ad3      	subs	r3, r2, r3
 800536c:	2b02      	cmp	r3, #2
 800536e:	d901      	bls.n	8005374 <RCCEx_PLL3_Config+0x144>
      {
        return HAL_TIMEOUT;
 8005370:	2303      	movs	r3, #3
 8005372:	e006      	b.n	8005382 <RCCEx_PLL3_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8005374:	4b05      	ldr	r3, [pc, #20]	; (800538c <RCCEx_PLL3_Config+0x15c>)
 8005376:	681b      	ldr	r3, [r3, #0]
 8005378:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800537c:	2b00      	cmp	r3, #0
 800537e:	d0f0      	beq.n	8005362 <RCCEx_PLL3_Config+0x132>
    }

  }


  return status;
 8005380:	7bfb      	ldrb	r3, [r7, #15]
}
 8005382:	4618      	mov	r0, r3
 8005384:	3710      	adds	r7, #16
 8005386:	46bd      	mov	sp, r7
 8005388:	bd80      	pop	{r7, pc}
 800538a:	bf00      	nop
 800538c:	58024400 	.word	0x58024400
 8005390:	ffff0007 	.word	0xffff0007

08005394 <HAL_SPI_Init>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8005394:	b580      	push	{r7, lr}
 8005396:	b084      	sub	sp, #16
 8005398:	af00      	add	r7, sp, #0
 800539a:	6078      	str	r0, [r7, #4]
#if (USE_SPI_CRC != 0UL)
  uint32_t crc_length;
#else
  uint32_t crc_length = 0UL;
 800539c:	2300      	movs	r3, #0
 800539e:	60fb      	str	r3, [r7, #12]
#endif
  uint32_t packet_length;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 80053a0:	687b      	ldr	r3, [r7, #4]
 80053a2:	2b00      	cmp	r3, #0
 80053a4:	d101      	bne.n	80053aa <HAL_SPI_Init+0x16>
  {
    return HAL_ERROR;
 80053a6:	2301      	movs	r3, #1
 80053a8:	e0eb      	b.n	8005582 <HAL_SPI_Init+0x1ee>
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
    assert_param(IS_SPI_CRC_INITIALIZATION_PATTERN(hspi->Init.TxCRCInitializationPattern));
    assert_param(IS_SPI_CRC_INITIALIZATION_PATTERN(hspi->Init.RxCRCInitializationPattern));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80053aa:	687b      	ldr	r3, [r7, #4]
 80053ac:	2200      	movs	r2, #0
 80053ae:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  /* Verify that the SPI instance supports Data Size higher than 16bits */
  if ((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (hspi->Init.DataSize > SPI_DATASIZE_16BIT))
 80053b0:	687b      	ldr	r3, [r7, #4]
 80053b2:	681b      	ldr	r3, [r3, #0]
 80053b4:	4a75      	ldr	r2, [pc, #468]	; (800558c <HAL_SPI_Init+0x1f8>)
 80053b6:	4293      	cmp	r3, r2
 80053b8:	d00f      	beq.n	80053da <HAL_SPI_Init+0x46>
 80053ba:	687b      	ldr	r3, [r7, #4]
 80053bc:	681b      	ldr	r3, [r3, #0]
 80053be:	4a74      	ldr	r2, [pc, #464]	; (8005590 <HAL_SPI_Init+0x1fc>)
 80053c0:	4293      	cmp	r3, r2
 80053c2:	d00a      	beq.n	80053da <HAL_SPI_Init+0x46>
 80053c4:	687b      	ldr	r3, [r7, #4]
 80053c6:	681b      	ldr	r3, [r3, #0]
 80053c8:	4a72      	ldr	r2, [pc, #456]	; (8005594 <HAL_SPI_Init+0x200>)
 80053ca:	4293      	cmp	r3, r2
 80053cc:	d005      	beq.n	80053da <HAL_SPI_Init+0x46>
 80053ce:	687b      	ldr	r3, [r7, #4]
 80053d0:	68db      	ldr	r3, [r3, #12]
 80053d2:	2b0f      	cmp	r3, #15
 80053d4:	d901      	bls.n	80053da <HAL_SPI_Init+0x46>
  {
    return HAL_ERROR;
 80053d6:	2301      	movs	r3, #1
 80053d8:	e0d3      	b.n	8005582 <HAL_SPI_Init+0x1ee>
  }

  /* Verify that the SPI instance supports requested data packing */
  packet_length = SPI_GetPacketSize(hspi);
 80053da:	6878      	ldr	r0, [r7, #4]
 80053dc:	f000 f8dc 	bl	8005598 <SPI_GetPacketSize>
 80053e0:	60b8      	str	r0, [r7, #8]
  if (((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_LOWEND_FIFO_SIZE)) ||
 80053e2:	687b      	ldr	r3, [r7, #4]
 80053e4:	681b      	ldr	r3, [r3, #0]
 80053e6:	4a69      	ldr	r2, [pc, #420]	; (800558c <HAL_SPI_Init+0x1f8>)
 80053e8:	4293      	cmp	r3, r2
 80053ea:	d00c      	beq.n	8005406 <HAL_SPI_Init+0x72>
 80053ec:	687b      	ldr	r3, [r7, #4]
 80053ee:	681b      	ldr	r3, [r3, #0]
 80053f0:	4a67      	ldr	r2, [pc, #412]	; (8005590 <HAL_SPI_Init+0x1fc>)
 80053f2:	4293      	cmp	r3, r2
 80053f4:	d007      	beq.n	8005406 <HAL_SPI_Init+0x72>
 80053f6:	687b      	ldr	r3, [r7, #4]
 80053f8:	681b      	ldr	r3, [r3, #0]
 80053fa:	4a66      	ldr	r2, [pc, #408]	; (8005594 <HAL_SPI_Init+0x200>)
 80053fc:	4293      	cmp	r3, r2
 80053fe:	d002      	beq.n	8005406 <HAL_SPI_Init+0x72>
 8005400:	68bb      	ldr	r3, [r7, #8]
 8005402:	2b08      	cmp	r3, #8
 8005404:	d811      	bhi.n	800542a <HAL_SPI_Init+0x96>
      ((IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_HIGHEND_FIFO_SIZE)))
 8005406:	687b      	ldr	r3, [r7, #4]
 8005408:	681b      	ldr	r3, [r3, #0]
  if (((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_LOWEND_FIFO_SIZE)) ||
 800540a:	4a60      	ldr	r2, [pc, #384]	; (800558c <HAL_SPI_Init+0x1f8>)
 800540c:	4293      	cmp	r3, r2
 800540e:	d009      	beq.n	8005424 <HAL_SPI_Init+0x90>
      ((IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_HIGHEND_FIFO_SIZE)))
 8005410:	687b      	ldr	r3, [r7, #4]
 8005412:	681b      	ldr	r3, [r3, #0]
 8005414:	4a5e      	ldr	r2, [pc, #376]	; (8005590 <HAL_SPI_Init+0x1fc>)
 8005416:	4293      	cmp	r3, r2
 8005418:	d004      	beq.n	8005424 <HAL_SPI_Init+0x90>
 800541a:	687b      	ldr	r3, [r7, #4]
 800541c:	681b      	ldr	r3, [r3, #0]
 800541e:	4a5d      	ldr	r2, [pc, #372]	; (8005594 <HAL_SPI_Init+0x200>)
 8005420:	4293      	cmp	r3, r2
 8005422:	d104      	bne.n	800542e <HAL_SPI_Init+0x9a>
 8005424:	68bb      	ldr	r3, [r7, #8]
 8005426:	2b10      	cmp	r3, #16
 8005428:	d901      	bls.n	800542e <HAL_SPI_Init+0x9a>
  {
    return HAL_ERROR;
 800542a:	2301      	movs	r3, #1
 800542c:	e0a9      	b.n	8005582 <HAL_SPI_Init+0x1ee>
  {
    crc_length = hspi->Init.DataSize << SPI_CFG1_CRCSIZE_Pos;
  }
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 800542e:	687b      	ldr	r3, [r7, #4]
 8005430:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 8005434:	b2db      	uxtb	r3, r3
 8005436:	2b00      	cmp	r3, #0
 8005438:	d106      	bne.n	8005448 <HAL_SPI_Init+0xb4>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 800543a:	687b      	ldr	r3, [r7, #4]
 800543c:	2200      	movs	r2, #0
 800543e:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8005442:	6878      	ldr	r0, [r7, #4]
 8005444:	f7fb fcce 	bl	8000de4 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8005448:	687b      	ldr	r3, [r7, #4]
 800544a:	2202      	movs	r2, #2
 800544c:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8005450:	687b      	ldr	r3, [r7, #4]
 8005452:	681b      	ldr	r3, [r3, #0]
 8005454:	681a      	ldr	r2, [r3, #0]
 8005456:	687b      	ldr	r3, [r7, #4]
 8005458:	681b      	ldr	r3, [r3, #0]
 800545a:	f022 0201 	bic.w	r2, r2, #1
 800545e:	601a      	str	r2, [r3, #0]
  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit, CRC calculation state, CRC Length */

  /* SPIx NSS Software Management Configuration */
  if ((hspi->Init.NSS == SPI_NSS_SOFT) && (((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_LOW)) || \
 8005460:	687b      	ldr	r3, [r7, #4]
 8005462:	699b      	ldr	r3, [r3, #24]
 8005464:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8005468:	d119      	bne.n	800549e <HAL_SPI_Init+0x10a>
 800546a:	687b      	ldr	r3, [r7, #4]
 800546c:	685b      	ldr	r3, [r3, #4]
 800546e:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8005472:	d103      	bne.n	800547c <HAL_SPI_Init+0xe8>
 8005474:	687b      	ldr	r3, [r7, #4]
 8005476:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005478:	2b00      	cmp	r3, #0
 800547a:	d008      	beq.n	800548e <HAL_SPI_Init+0xfa>
     ((hspi->Init.Mode == SPI_MODE_SLAVE) && (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_HIGH))))
 800547c:	687b      	ldr	r3, [r7, #4]
 800547e:	685b      	ldr	r3, [r3, #4]
  if ((hspi->Init.NSS == SPI_NSS_SOFT) && (((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_LOW)) || \
 8005480:	2b00      	cmp	r3, #0
 8005482:	d10c      	bne.n	800549e <HAL_SPI_Init+0x10a>
     ((hspi->Init.Mode == SPI_MODE_SLAVE) && (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_HIGH))))
 8005484:	687b      	ldr	r3, [r7, #4]
 8005486:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005488:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800548c:	d107      	bne.n	800549e <HAL_SPI_Init+0x10a>
  {
    SET_BIT(hspi->Instance->CR1, SPI_CR1_SSI);
 800548e:	687b      	ldr	r3, [r7, #4]
 8005490:	681b      	ldr	r3, [r3, #0]
 8005492:	681a      	ldr	r2, [r3, #0]
 8005494:	687b      	ldr	r3, [r7, #4]
 8005496:	681b      	ldr	r3, [r3, #0]
 8005498:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 800549c:	601a      	str	r2, [r3, #0]
  }

  /* SPIx CFG1 Configuration */
  WRITE_REG(hspi->Instance->CFG1, (hspi->Init.BaudRatePrescaler | hspi->Init.CRCCalculation | crc_length |
 800549e:	687b      	ldr	r3, [r7, #4]
 80054a0:	69da      	ldr	r2, [r3, #28]
 80054a2:	687b      	ldr	r3, [r7, #4]
 80054a4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80054a6:	431a      	orrs	r2, r3
 80054a8:	68fb      	ldr	r3, [r7, #12]
 80054aa:	431a      	orrs	r2, r3
 80054ac:	687b      	ldr	r3, [r7, #4]
 80054ae:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80054b0:	ea42 0103 	orr.w	r1, r2, r3
 80054b4:	687b      	ldr	r3, [r7, #4]
 80054b6:	68da      	ldr	r2, [r3, #12]
 80054b8:	687b      	ldr	r3, [r7, #4]
 80054ba:	681b      	ldr	r3, [r3, #0]
 80054bc:	430a      	orrs	r2, r1
 80054be:	609a      	str	r2, [r3, #8]
                                   hspi->Init.FifoThreshold     | hspi->Init.DataSize));

  /* SPIx CFG2 Configuration */
  WRITE_REG(hspi->Instance->CFG2, (hspi->Init.NSSPMode     | hspi->Init.TIMode           | hspi->Init.NSSPolarity             |
 80054c0:	687b      	ldr	r3, [r7, #4]
 80054c2:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80054c4:	687b      	ldr	r3, [r7, #4]
 80054c6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80054c8:	431a      	orrs	r2, r3
 80054ca:	687b      	ldr	r3, [r7, #4]
 80054cc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80054ce:	431a      	orrs	r2, r3
 80054d0:	687b      	ldr	r3, [r7, #4]
 80054d2:	699b      	ldr	r3, [r3, #24]
 80054d4:	431a      	orrs	r2, r3
 80054d6:	687b      	ldr	r3, [r7, #4]
 80054d8:	691b      	ldr	r3, [r3, #16]
 80054da:	431a      	orrs	r2, r3
 80054dc:	687b      	ldr	r3, [r7, #4]
 80054de:	695b      	ldr	r3, [r3, #20]
 80054e0:	431a      	orrs	r2, r3
 80054e2:	687b      	ldr	r3, [r7, #4]
 80054e4:	6a1b      	ldr	r3, [r3, #32]
 80054e6:	431a      	orrs	r2, r3
 80054e8:	687b      	ldr	r3, [r7, #4]
 80054ea:	685b      	ldr	r3, [r3, #4]
 80054ec:	431a      	orrs	r2, r3
 80054ee:	687b      	ldr	r3, [r7, #4]
 80054f0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80054f2:	431a      	orrs	r2, r3
 80054f4:	687b      	ldr	r3, [r7, #4]
 80054f6:	689b      	ldr	r3, [r3, #8]
 80054f8:	431a      	orrs	r2, r3
 80054fa:	687b      	ldr	r3, [r7, #4]
 80054fc:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80054fe:	ea42 0103 	orr.w	r1, r2, r3
 8005502:	687b      	ldr	r3, [r7, #4]
 8005504:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8005506:	687b      	ldr	r3, [r7, #4]
 8005508:	681b      	ldr	r3, [r3, #0]
 800550a:	430a      	orrs	r2, r1
 800550c:	60da      	str	r2, [r3, #12]
    WRITE_REG(hspi->Instance->CRCPOLY, hspi->Init.CRCPolynomial);
  }
#endif /* USE_SPI_CRC */

  /* Insure that Underrun configuration is managed only by Salve */
  if (hspi->Init.Mode == SPI_MODE_SLAVE)
 800550e:	687b      	ldr	r3, [r7, #4]
 8005510:	685b      	ldr	r3, [r3, #4]
 8005512:	2b00      	cmp	r3, #0
 8005514:	d113      	bne.n	800553e <HAL_SPI_Init+0x1aa>
    /* Set Default Underrun configuration */
#if (USE_SPI_CRC != 0UL)
    if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_DISABLE)
#endif
    {
      MODIFY_REG(hspi->Instance->CFG1, SPI_CFG1_UDRDET, SPI_CFG1_UDRDET_0);
 8005516:	687b      	ldr	r3, [r7, #4]
 8005518:	681b      	ldr	r3, [r3, #0]
 800551a:	689b      	ldr	r3, [r3, #8]
 800551c:	f423 52c0 	bic.w	r2, r3, #6144	; 0x1800
 8005520:	687b      	ldr	r3, [r7, #4]
 8005522:	681b      	ldr	r3, [r3, #0]
 8005524:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8005528:	609a      	str	r2, [r3, #8]
    }
    MODIFY_REG(hspi->Instance->CFG1, SPI_CFG1_UDRCFG, SPI_CFG1_UDRCFG_1);
 800552a:	687b      	ldr	r3, [r7, #4]
 800552c:	681b      	ldr	r3, [r3, #0]
 800552e:	689b      	ldr	r3, [r3, #8]
 8005530:	f423 62c0 	bic.w	r2, r3, #1536	; 0x600
 8005534:	687b      	ldr	r3, [r7, #4]
 8005536:	681b      	ldr	r3, [r3, #0]
 8005538:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 800553c:	609a      	str	r2, [r3, #8]
  }

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 800553e:	687b      	ldr	r3, [r7, #4]
 8005540:	681b      	ldr	r3, [r3, #0]
 8005542:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8005544:	687b      	ldr	r3, [r7, #4]
 8005546:	681b      	ldr	r3, [r3, #0]
 8005548:	f022 0201 	bic.w	r2, r2, #1
 800554c:	651a      	str	r2, [r3, #80]	; 0x50
#endif /* SPI_I2SCFGR_I2SMOD */

  /* Insure that AFCNTR is managed only by Master */
  if ((hspi->Init.Mode & SPI_MODE_MASTER) == SPI_MODE_MASTER)
 800554e:	687b      	ldr	r3, [r7, #4]
 8005550:	685b      	ldr	r3, [r3, #4]
 8005552:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8005556:	2b00      	cmp	r3, #0
 8005558:	d00a      	beq.n	8005570 <HAL_SPI_Init+0x1dc>
  {
    /* Alternate function GPIOs control */
    MODIFY_REG(hspi->Instance->CFG2, SPI_CFG2_AFCNTR, (hspi->Init.MasterKeepIOState));
 800555a:	687b      	ldr	r3, [r7, #4]
 800555c:	681b      	ldr	r3, [r3, #0]
 800555e:	68db      	ldr	r3, [r3, #12]
 8005560:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
 8005564:	687b      	ldr	r3, [r7, #4]
 8005566:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8005568:	687b      	ldr	r3, [r7, #4]
 800556a:	681b      	ldr	r3, [r3, #0]
 800556c:	430a      	orrs	r2, r1
 800556e:	60da      	str	r2, [r3, #12]
  }

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8005570:	687b      	ldr	r3, [r7, #4]
 8005572:	2200      	movs	r2, #0
 8005574:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  hspi->State     = HAL_SPI_STATE_READY;
 8005578:	687b      	ldr	r3, [r7, #4]
 800557a:	2201      	movs	r2, #1
 800557c:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81

  return HAL_OK;
 8005580:	2300      	movs	r3, #0
}
 8005582:	4618      	mov	r0, r3
 8005584:	3710      	adds	r7, #16
 8005586:	46bd      	mov	sp, r7
 8005588:	bd80      	pop	{r7, pc}
 800558a:	bf00      	nop
 800558c:	40013000 	.word	0x40013000
 8005590:	40003800 	.word	0x40003800
 8005594:	40003c00 	.word	0x40003c00

08005598 <SPI_GetPacketSize>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval Packet size occupied in the fifo
  */
static uint32_t SPI_GetPacketSize(SPI_HandleTypeDef *hspi)
{
 8005598:	b480      	push	{r7}
 800559a:	b085      	sub	sp, #20
 800559c:	af00      	add	r7, sp, #0
 800559e:	6078      	str	r0, [r7, #4]
  uint32_t fifo_threashold = (hspi->Init.FifoThreshold >> SPI_CFG1_FTHLV_Pos) + 1UL;
 80055a0:	687b      	ldr	r3, [r7, #4]
 80055a2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80055a4:	095b      	lsrs	r3, r3, #5
 80055a6:	3301      	adds	r3, #1
 80055a8:	60fb      	str	r3, [r7, #12]
  uint32_t data_size       = (hspi->Init.DataSize      >> SPI_CFG1_DSIZE_Pos) + 1UL;
 80055aa:	687b      	ldr	r3, [r7, #4]
 80055ac:	68db      	ldr	r3, [r3, #12]
 80055ae:	3301      	adds	r3, #1
 80055b0:	60bb      	str	r3, [r7, #8]

  /* Convert data size to Byte */
  data_size = (data_size + 7UL) / 8UL;
 80055b2:	68bb      	ldr	r3, [r7, #8]
 80055b4:	3307      	adds	r3, #7
 80055b6:	08db      	lsrs	r3, r3, #3
 80055b8:	60bb      	str	r3, [r7, #8]

  return data_size * fifo_threashold;
 80055ba:	68bb      	ldr	r3, [r7, #8]
 80055bc:	68fa      	ldr	r2, [r7, #12]
 80055be:	fb02 f303 	mul.w	r3, r2, r3
}
 80055c2:	4618      	mov	r0, r3
 80055c4:	3714      	adds	r7, #20
 80055c6:	46bd      	mov	sp, r7
 80055c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055cc:	4770      	bx	lr

080055ce <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80055ce:	b580      	push	{r7, lr}
 80055d0:	b082      	sub	sp, #8
 80055d2:	af00      	add	r7, sp, #0
 80055d4:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80055d6:	687b      	ldr	r3, [r7, #4]
 80055d8:	2b00      	cmp	r3, #0
 80055da:	d101      	bne.n	80055e0 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80055dc:	2301      	movs	r3, #1
 80055de:	e042      	b.n	8005666 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 80055e0:	687b      	ldr	r3, [r7, #4]
 80055e2:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80055e6:	2b00      	cmp	r3, #0
 80055e8:	d106      	bne.n	80055f8 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80055ea:	687b      	ldr	r3, [r7, #4]
 80055ec:	2200      	movs	r2, #0
 80055ee:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80055f2:	6878      	ldr	r0, [r7, #4]
 80055f4:	f7fb fc80 	bl	8000ef8 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80055f8:	687b      	ldr	r3, [r7, #4]
 80055fa:	2224      	movs	r2, #36	; 0x24
 80055fc:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  __HAL_UART_DISABLE(huart);
 8005600:	687b      	ldr	r3, [r7, #4]
 8005602:	681b      	ldr	r3, [r3, #0]
 8005604:	681a      	ldr	r2, [r3, #0]
 8005606:	687b      	ldr	r3, [r7, #4]
 8005608:	681b      	ldr	r3, [r3, #0]
 800560a:	f022 0201 	bic.w	r2, r2, #1
 800560e:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8005610:	6878      	ldr	r0, [r7, #4]
 8005612:	f000 fb07 	bl	8005c24 <UART_SetConfig>
 8005616:	4603      	mov	r3, r0
 8005618:	2b01      	cmp	r3, #1
 800561a:	d101      	bne.n	8005620 <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 800561c:	2301      	movs	r3, #1
 800561e:	e022      	b.n	8005666 <HAL_UART_Init+0x98>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8005620:	687b      	ldr	r3, [r7, #4]
 8005622:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005624:	2b00      	cmp	r3, #0
 8005626:	d002      	beq.n	800562e <HAL_UART_Init+0x60>
  {
    UART_AdvFeatureConfig(huart);
 8005628:	6878      	ldr	r0, [r7, #4]
 800562a:	f001 f959 	bl	80068e0 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800562e:	687b      	ldr	r3, [r7, #4]
 8005630:	681b      	ldr	r3, [r3, #0]
 8005632:	685a      	ldr	r2, [r3, #4]
 8005634:	687b      	ldr	r3, [r7, #4]
 8005636:	681b      	ldr	r3, [r3, #0]
 8005638:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800563c:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800563e:	687b      	ldr	r3, [r7, #4]
 8005640:	681b      	ldr	r3, [r3, #0]
 8005642:	689a      	ldr	r2, [r3, #8]
 8005644:	687b      	ldr	r3, [r7, #4]
 8005646:	681b      	ldr	r3, [r3, #0]
 8005648:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800564c:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 800564e:	687b      	ldr	r3, [r7, #4]
 8005650:	681b      	ldr	r3, [r3, #0]
 8005652:	681a      	ldr	r2, [r3, #0]
 8005654:	687b      	ldr	r3, [r7, #4]
 8005656:	681b      	ldr	r3, [r3, #0]
 8005658:	f042 0201 	orr.w	r2, r2, #1
 800565c:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 800565e:	6878      	ldr	r0, [r7, #4]
 8005660:	f001 f9e0 	bl	8006a24 <UART_CheckIdleState>
 8005664:	4603      	mov	r3, r0
}
 8005666:	4618      	mov	r0, r3
 8005668:	3708      	adds	r7, #8
 800566a:	46bd      	mov	sp, r7
 800566c:	bd80      	pop	{r7, pc}
	...

08005670 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8005670:	b580      	push	{r7, lr}
 8005672:	b088      	sub	sp, #32
 8005674:	af00      	add	r7, sp, #0
 8005676:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8005678:	687b      	ldr	r3, [r7, #4]
 800567a:	681b      	ldr	r3, [r3, #0]
 800567c:	69db      	ldr	r3, [r3, #28]
 800567e:	61fb      	str	r3, [r7, #28]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8005680:	687b      	ldr	r3, [r7, #4]
 8005682:	681b      	ldr	r3, [r3, #0]
 8005684:	681b      	ldr	r3, [r3, #0]
 8005686:	61bb      	str	r3, [r7, #24]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8005688:	687b      	ldr	r3, [r7, #4]
 800568a:	681b      	ldr	r3, [r3, #0]
 800568c:	689b      	ldr	r3, [r3, #8]
 800568e:	617b      	str	r3, [r7, #20]

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 8005690:	69fa      	ldr	r2, [r7, #28]
 8005692:	f640 030f 	movw	r3, #2063	; 0x80f
 8005696:	4013      	ands	r3, r2
 8005698:	613b      	str	r3, [r7, #16]
  if (errorflags == 0U)
 800569a:	693b      	ldr	r3, [r7, #16]
 800569c:	2b00      	cmp	r3, #0
 800569e:	d118      	bne.n	80056d2 <HAL_UART_IRQHandler+0x62>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 80056a0:	69fb      	ldr	r3, [r7, #28]
 80056a2:	f003 0320 	and.w	r3, r3, #32
 80056a6:	2b00      	cmp	r3, #0
 80056a8:	d013      	beq.n	80056d2 <HAL_UART_IRQHandler+0x62>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 80056aa:	69bb      	ldr	r3, [r7, #24]
 80056ac:	f003 0320 	and.w	r3, r3, #32
 80056b0:	2b00      	cmp	r3, #0
 80056b2:	d104      	bne.n	80056be <HAL_UART_IRQHandler+0x4e>
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 80056b4:	697b      	ldr	r3, [r7, #20]
 80056b6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80056ba:	2b00      	cmp	r3, #0
 80056bc:	d009      	beq.n	80056d2 <HAL_UART_IRQHandler+0x62>
    {
      if (huart->RxISR != NULL)
 80056be:	687b      	ldr	r3, [r7, #4]
 80056c0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80056c2:	2b00      	cmp	r3, #0
 80056c4:	f000 8282 	beq.w	8005bcc <HAL_UART_IRQHandler+0x55c>
      {
        huart->RxISR(huart);
 80056c8:	687b      	ldr	r3, [r7, #4]
 80056ca:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80056cc:	6878      	ldr	r0, [r7, #4]
 80056ce:	4798      	blx	r3
      }
      return;
 80056d0:	e27c      	b.n	8005bcc <HAL_UART_IRQHandler+0x55c>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 80056d2:	693b      	ldr	r3, [r7, #16]
 80056d4:	2b00      	cmp	r3, #0
 80056d6:	f000 80ef 	beq.w	80058b8 <HAL_UART_IRQHandler+0x248>
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
 80056da:	697a      	ldr	r2, [r7, #20]
 80056dc:	4b73      	ldr	r3, [pc, #460]	; (80058ac <HAL_UART_IRQHandler+0x23c>)
 80056de:	4013      	ands	r3, r2
 80056e0:	2b00      	cmp	r3, #0
 80056e2:	d105      	bne.n	80056f0 <HAL_UART_IRQHandler+0x80>
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
 80056e4:	69ba      	ldr	r2, [r7, #24]
 80056e6:	4b72      	ldr	r3, [pc, #456]	; (80058b0 <HAL_UART_IRQHandler+0x240>)
 80056e8:	4013      	ands	r3, r2
 80056ea:	2b00      	cmp	r3, #0
 80056ec:	f000 80e4 	beq.w	80058b8 <HAL_UART_IRQHandler+0x248>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 80056f0:	69fb      	ldr	r3, [r7, #28]
 80056f2:	f003 0301 	and.w	r3, r3, #1
 80056f6:	2b00      	cmp	r3, #0
 80056f8:	d010      	beq.n	800571c <HAL_UART_IRQHandler+0xac>
 80056fa:	69bb      	ldr	r3, [r7, #24]
 80056fc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005700:	2b00      	cmp	r3, #0
 8005702:	d00b      	beq.n	800571c <HAL_UART_IRQHandler+0xac>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8005704:	687b      	ldr	r3, [r7, #4]
 8005706:	681b      	ldr	r3, [r3, #0]
 8005708:	2201      	movs	r2, #1
 800570a:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 800570c:	687b      	ldr	r3, [r7, #4]
 800570e:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8005712:	f043 0201 	orr.w	r2, r3, #1
 8005716:	687b      	ldr	r3, [r7, #4]
 8005718:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800571c:	69fb      	ldr	r3, [r7, #28]
 800571e:	f003 0302 	and.w	r3, r3, #2
 8005722:	2b00      	cmp	r3, #0
 8005724:	d010      	beq.n	8005748 <HAL_UART_IRQHandler+0xd8>
 8005726:	697b      	ldr	r3, [r7, #20]
 8005728:	f003 0301 	and.w	r3, r3, #1
 800572c:	2b00      	cmp	r3, #0
 800572e:	d00b      	beq.n	8005748 <HAL_UART_IRQHandler+0xd8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8005730:	687b      	ldr	r3, [r7, #4]
 8005732:	681b      	ldr	r3, [r3, #0]
 8005734:	2202      	movs	r2, #2
 8005736:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8005738:	687b      	ldr	r3, [r7, #4]
 800573a:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800573e:	f043 0204 	orr.w	r2, r3, #4
 8005742:	687b      	ldr	r3, [r7, #4]
 8005744:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8005748:	69fb      	ldr	r3, [r7, #28]
 800574a:	f003 0304 	and.w	r3, r3, #4
 800574e:	2b00      	cmp	r3, #0
 8005750:	d010      	beq.n	8005774 <HAL_UART_IRQHandler+0x104>
 8005752:	697b      	ldr	r3, [r7, #20]
 8005754:	f003 0301 	and.w	r3, r3, #1
 8005758:	2b00      	cmp	r3, #0
 800575a:	d00b      	beq.n	8005774 <HAL_UART_IRQHandler+0x104>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 800575c:	687b      	ldr	r3, [r7, #4]
 800575e:	681b      	ldr	r3, [r3, #0]
 8005760:	2204      	movs	r2, #4
 8005762:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8005764:	687b      	ldr	r3, [r7, #4]
 8005766:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800576a:	f043 0202 	orr.w	r2, r3, #2
 800576e:	687b      	ldr	r3, [r7, #4]
 8005770:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 8005774:	69fb      	ldr	r3, [r7, #28]
 8005776:	f003 0308 	and.w	r3, r3, #8
 800577a:	2b00      	cmp	r3, #0
 800577c:	d015      	beq.n	80057aa <HAL_UART_IRQHandler+0x13a>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 800577e:	69bb      	ldr	r3, [r7, #24]
 8005780:	f003 0320 	and.w	r3, r3, #32
 8005784:	2b00      	cmp	r3, #0
 8005786:	d104      	bne.n	8005792 <HAL_UART_IRQHandler+0x122>
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
 8005788:	697a      	ldr	r2, [r7, #20]
 800578a:	4b48      	ldr	r3, [pc, #288]	; (80058ac <HAL_UART_IRQHandler+0x23c>)
 800578c:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 800578e:	2b00      	cmp	r3, #0
 8005790:	d00b      	beq.n	80057aa <HAL_UART_IRQHandler+0x13a>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8005792:	687b      	ldr	r3, [r7, #4]
 8005794:	681b      	ldr	r3, [r3, #0]
 8005796:	2208      	movs	r2, #8
 8005798:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800579a:	687b      	ldr	r3, [r7, #4]
 800579c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80057a0:	f043 0208 	orr.w	r2, r3, #8
 80057a4:	687b      	ldr	r3, [r7, #4]
 80057a6:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 80057aa:	69fb      	ldr	r3, [r7, #28]
 80057ac:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80057b0:	2b00      	cmp	r3, #0
 80057b2:	d011      	beq.n	80057d8 <HAL_UART_IRQHandler+0x168>
 80057b4:	69bb      	ldr	r3, [r7, #24]
 80057b6:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 80057ba:	2b00      	cmp	r3, #0
 80057bc:	d00c      	beq.n	80057d8 <HAL_UART_IRQHandler+0x168>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80057be:	687b      	ldr	r3, [r7, #4]
 80057c0:	681b      	ldr	r3, [r3, #0]
 80057c2:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80057c6:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 80057c8:	687b      	ldr	r3, [r7, #4]
 80057ca:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80057ce:	f043 0220 	orr.w	r2, r3, #32
 80057d2:	687b      	ldr	r3, [r7, #4]
 80057d4:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 80057d8:	687b      	ldr	r3, [r7, #4]
 80057da:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80057de:	2b00      	cmp	r3, #0
 80057e0:	f000 81f6 	beq.w	8005bd0 <HAL_UART_IRQHandler+0x560>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 80057e4:	69fb      	ldr	r3, [r7, #28]
 80057e6:	f003 0320 	and.w	r3, r3, #32
 80057ea:	2b00      	cmp	r3, #0
 80057ec:	d011      	beq.n	8005812 <HAL_UART_IRQHandler+0x1a2>
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 80057ee:	69bb      	ldr	r3, [r7, #24]
 80057f0:	f003 0320 	and.w	r3, r3, #32
 80057f4:	2b00      	cmp	r3, #0
 80057f6:	d104      	bne.n	8005802 <HAL_UART_IRQHandler+0x192>
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 80057f8:	697b      	ldr	r3, [r7, #20]
 80057fa:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80057fe:	2b00      	cmp	r3, #0
 8005800:	d007      	beq.n	8005812 <HAL_UART_IRQHandler+0x1a2>
      {
        if (huart->RxISR != NULL)
 8005802:	687b      	ldr	r3, [r7, #4]
 8005804:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005806:	2b00      	cmp	r3, #0
 8005808:	d003      	beq.n	8005812 <HAL_UART_IRQHandler+0x1a2>
        {
          huart->RxISR(huart);
 800580a:	687b      	ldr	r3, [r7, #4]
 800580c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800580e:	6878      	ldr	r0, [r7, #4]
 8005810:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 8005812:	687b      	ldr	r3, [r7, #4]
 8005814:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8005818:	60fb      	str	r3, [r7, #12]
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800581a:	687b      	ldr	r3, [r7, #4]
 800581c:	681b      	ldr	r3, [r3, #0]
 800581e:	689b      	ldr	r3, [r3, #8]
 8005820:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005824:	2b40      	cmp	r3, #64	; 0x40
 8005826:	d004      	beq.n	8005832 <HAL_UART_IRQHandler+0x1c2>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 8005828:	68fb      	ldr	r3, [r7, #12]
 800582a:	f003 0328 	and.w	r3, r3, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800582e:	2b00      	cmp	r3, #0
 8005830:	d031      	beq.n	8005896 <HAL_UART_IRQHandler+0x226>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8005832:	6878      	ldr	r0, [r7, #4]
 8005834:	f001 f9c2 	bl	8006bbc <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005838:	687b      	ldr	r3, [r7, #4]
 800583a:	681b      	ldr	r3, [r3, #0]
 800583c:	689b      	ldr	r3, [r3, #8]
 800583e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005842:	2b40      	cmp	r3, #64	; 0x40
 8005844:	d123      	bne.n	800588e <HAL_UART_IRQHandler+0x21e>
        {
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8005846:	687b      	ldr	r3, [r7, #4]
 8005848:	681b      	ldr	r3, [r3, #0]
 800584a:	689a      	ldr	r2, [r3, #8]
 800584c:	687b      	ldr	r3, [r7, #4]
 800584e:	681b      	ldr	r3, [r3, #0]
 8005850:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8005854:	609a      	str	r2, [r3, #8]

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8005856:	687b      	ldr	r3, [r7, #4]
 8005858:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800585a:	2b00      	cmp	r3, #0
 800585c:	d013      	beq.n	8005886 <HAL_UART_IRQHandler+0x216>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800585e:	687b      	ldr	r3, [r7, #4]
 8005860:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8005862:	4a14      	ldr	r2, [pc, #80]	; (80058b4 <HAL_UART_IRQHandler+0x244>)
 8005864:	651a      	str	r2, [r3, #80]	; 0x50

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8005866:	687b      	ldr	r3, [r7, #4]
 8005868:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800586a:	4618      	mov	r0, r3
 800586c:	f7fc fa08 	bl	8001c80 <HAL_DMA_Abort_IT>
 8005870:	4603      	mov	r3, r0
 8005872:	2b00      	cmp	r3, #0
 8005874:	d017      	beq.n	80058a6 <HAL_UART_IRQHandler+0x236>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8005876:	687b      	ldr	r3, [r7, #4]
 8005878:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800587a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800587c:	687a      	ldr	r2, [r7, #4]
 800587e:	6fd2      	ldr	r2, [r2, #124]	; 0x7c
 8005880:	4610      	mov	r0, r2
 8005882:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005884:	e00f      	b.n	80058a6 <HAL_UART_IRQHandler+0x236>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8005886:	6878      	ldr	r0, [r7, #4]
 8005888:	f000 f9b6 	bl	8005bf8 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800588c:	e00b      	b.n	80058a6 <HAL_UART_IRQHandler+0x236>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800588e:	6878      	ldr	r0, [r7, #4]
 8005890:	f000 f9b2 	bl	8005bf8 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005894:	e007      	b.n	80058a6 <HAL_UART_IRQHandler+0x236>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8005896:	6878      	ldr	r0, [r7, #4]
 8005898:	f000 f9ae 	bl	8005bf8 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 800589c:	687b      	ldr	r3, [r7, #4]
 800589e:	2200      	movs	r2, #0
 80058a0:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
      }
    }
    return;
 80058a4:	e194      	b.n	8005bd0 <HAL_UART_IRQHandler+0x560>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80058a6:	bf00      	nop
    return;
 80058a8:	e192      	b.n	8005bd0 <HAL_UART_IRQHandler+0x560>
 80058aa:	bf00      	nop
 80058ac:	10000001 	.word	0x10000001
 80058b0:	04000120 	.word	0x04000120
 80058b4:	08006c21 	.word	0x08006c21

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80058b8:	687b      	ldr	r3, [r7, #4]
 80058ba:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80058bc:	2b01      	cmp	r3, #1
 80058be:	f040 810f 	bne.w	8005ae0 <HAL_UART_IRQHandler+0x470>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 80058c2:	69fb      	ldr	r3, [r7, #28]
 80058c4:	f003 0310 	and.w	r3, r3, #16
 80058c8:	2b00      	cmp	r3, #0
 80058ca:	f000 8109 	beq.w	8005ae0 <HAL_UART_IRQHandler+0x470>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 80058ce:	69bb      	ldr	r3, [r7, #24]
 80058d0:	f003 0310 	and.w	r3, r3, #16
 80058d4:	2b00      	cmp	r3, #0
 80058d6:	f000 8103 	beq.w	8005ae0 <HAL_UART_IRQHandler+0x470>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 80058da:	687b      	ldr	r3, [r7, #4]
 80058dc:	681b      	ldr	r3, [r3, #0]
 80058de:	2210      	movs	r2, #16
 80058e0:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80058e2:	687b      	ldr	r3, [r7, #4]
 80058e4:	681b      	ldr	r3, [r3, #0]
 80058e6:	689b      	ldr	r3, [r3, #8]
 80058e8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80058ec:	2b40      	cmp	r3, #64	; 0x40
 80058ee:	f040 80bb 	bne.w	8005a68 <HAL_UART_IRQHandler+0x3f8>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 80058f2:	687b      	ldr	r3, [r7, #4]
 80058f4:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80058f6:	681b      	ldr	r3, [r3, #0]
 80058f8:	4a96      	ldr	r2, [pc, #600]	; (8005b54 <HAL_UART_IRQHandler+0x4e4>)
 80058fa:	4293      	cmp	r3, r2
 80058fc:	d059      	beq.n	80059b2 <HAL_UART_IRQHandler+0x342>
 80058fe:	687b      	ldr	r3, [r7, #4]
 8005900:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8005902:	681b      	ldr	r3, [r3, #0]
 8005904:	4a94      	ldr	r2, [pc, #592]	; (8005b58 <HAL_UART_IRQHandler+0x4e8>)
 8005906:	4293      	cmp	r3, r2
 8005908:	d053      	beq.n	80059b2 <HAL_UART_IRQHandler+0x342>
 800590a:	687b      	ldr	r3, [r7, #4]
 800590c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800590e:	681b      	ldr	r3, [r3, #0]
 8005910:	4a92      	ldr	r2, [pc, #584]	; (8005b5c <HAL_UART_IRQHandler+0x4ec>)
 8005912:	4293      	cmp	r3, r2
 8005914:	d04d      	beq.n	80059b2 <HAL_UART_IRQHandler+0x342>
 8005916:	687b      	ldr	r3, [r7, #4]
 8005918:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800591a:	681b      	ldr	r3, [r3, #0]
 800591c:	4a90      	ldr	r2, [pc, #576]	; (8005b60 <HAL_UART_IRQHandler+0x4f0>)
 800591e:	4293      	cmp	r3, r2
 8005920:	d047      	beq.n	80059b2 <HAL_UART_IRQHandler+0x342>
 8005922:	687b      	ldr	r3, [r7, #4]
 8005924:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8005926:	681b      	ldr	r3, [r3, #0]
 8005928:	4a8e      	ldr	r2, [pc, #568]	; (8005b64 <HAL_UART_IRQHandler+0x4f4>)
 800592a:	4293      	cmp	r3, r2
 800592c:	d041      	beq.n	80059b2 <HAL_UART_IRQHandler+0x342>
 800592e:	687b      	ldr	r3, [r7, #4]
 8005930:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8005932:	681b      	ldr	r3, [r3, #0]
 8005934:	4a8c      	ldr	r2, [pc, #560]	; (8005b68 <HAL_UART_IRQHandler+0x4f8>)
 8005936:	4293      	cmp	r3, r2
 8005938:	d03b      	beq.n	80059b2 <HAL_UART_IRQHandler+0x342>
 800593a:	687b      	ldr	r3, [r7, #4]
 800593c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800593e:	681b      	ldr	r3, [r3, #0]
 8005940:	4a8a      	ldr	r2, [pc, #552]	; (8005b6c <HAL_UART_IRQHandler+0x4fc>)
 8005942:	4293      	cmp	r3, r2
 8005944:	d035      	beq.n	80059b2 <HAL_UART_IRQHandler+0x342>
 8005946:	687b      	ldr	r3, [r7, #4]
 8005948:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800594a:	681b      	ldr	r3, [r3, #0]
 800594c:	4a88      	ldr	r2, [pc, #544]	; (8005b70 <HAL_UART_IRQHandler+0x500>)
 800594e:	4293      	cmp	r3, r2
 8005950:	d02f      	beq.n	80059b2 <HAL_UART_IRQHandler+0x342>
 8005952:	687b      	ldr	r3, [r7, #4]
 8005954:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8005956:	681b      	ldr	r3, [r3, #0]
 8005958:	4a86      	ldr	r2, [pc, #536]	; (8005b74 <HAL_UART_IRQHandler+0x504>)
 800595a:	4293      	cmp	r3, r2
 800595c:	d029      	beq.n	80059b2 <HAL_UART_IRQHandler+0x342>
 800595e:	687b      	ldr	r3, [r7, #4]
 8005960:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8005962:	681b      	ldr	r3, [r3, #0]
 8005964:	4a84      	ldr	r2, [pc, #528]	; (8005b78 <HAL_UART_IRQHandler+0x508>)
 8005966:	4293      	cmp	r3, r2
 8005968:	d023      	beq.n	80059b2 <HAL_UART_IRQHandler+0x342>
 800596a:	687b      	ldr	r3, [r7, #4]
 800596c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800596e:	681b      	ldr	r3, [r3, #0]
 8005970:	4a82      	ldr	r2, [pc, #520]	; (8005b7c <HAL_UART_IRQHandler+0x50c>)
 8005972:	4293      	cmp	r3, r2
 8005974:	d01d      	beq.n	80059b2 <HAL_UART_IRQHandler+0x342>
 8005976:	687b      	ldr	r3, [r7, #4]
 8005978:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800597a:	681b      	ldr	r3, [r3, #0]
 800597c:	4a80      	ldr	r2, [pc, #512]	; (8005b80 <HAL_UART_IRQHandler+0x510>)
 800597e:	4293      	cmp	r3, r2
 8005980:	d017      	beq.n	80059b2 <HAL_UART_IRQHandler+0x342>
 8005982:	687b      	ldr	r3, [r7, #4]
 8005984:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8005986:	681b      	ldr	r3, [r3, #0]
 8005988:	4a7e      	ldr	r2, [pc, #504]	; (8005b84 <HAL_UART_IRQHandler+0x514>)
 800598a:	4293      	cmp	r3, r2
 800598c:	d011      	beq.n	80059b2 <HAL_UART_IRQHandler+0x342>
 800598e:	687b      	ldr	r3, [r7, #4]
 8005990:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8005992:	681b      	ldr	r3, [r3, #0]
 8005994:	4a7c      	ldr	r2, [pc, #496]	; (8005b88 <HAL_UART_IRQHandler+0x518>)
 8005996:	4293      	cmp	r3, r2
 8005998:	d00b      	beq.n	80059b2 <HAL_UART_IRQHandler+0x342>
 800599a:	687b      	ldr	r3, [r7, #4]
 800599c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800599e:	681b      	ldr	r3, [r3, #0]
 80059a0:	4a7a      	ldr	r2, [pc, #488]	; (8005b8c <HAL_UART_IRQHandler+0x51c>)
 80059a2:	4293      	cmp	r3, r2
 80059a4:	d005      	beq.n	80059b2 <HAL_UART_IRQHandler+0x342>
 80059a6:	687b      	ldr	r3, [r7, #4]
 80059a8:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80059aa:	681b      	ldr	r3, [r3, #0]
 80059ac:	4a78      	ldr	r2, [pc, #480]	; (8005b90 <HAL_UART_IRQHandler+0x520>)
 80059ae:	4293      	cmp	r3, r2
 80059b0:	d105      	bne.n	80059be <HAL_UART_IRQHandler+0x34e>
 80059b2:	687b      	ldr	r3, [r7, #4]
 80059b4:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80059b6:	681b      	ldr	r3, [r3, #0]
 80059b8:	685b      	ldr	r3, [r3, #4]
 80059ba:	b29b      	uxth	r3, r3
 80059bc:	e004      	b.n	80059c8 <HAL_UART_IRQHandler+0x358>
 80059be:	687b      	ldr	r3, [r7, #4]
 80059c0:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80059c2:	681b      	ldr	r3, [r3, #0]
 80059c4:	685b      	ldr	r3, [r3, #4]
 80059c6:	b29b      	uxth	r3, r3
 80059c8:	813b      	strh	r3, [r7, #8]
      if ((nb_remaining_rx_data > 0U)
 80059ca:	893b      	ldrh	r3, [r7, #8]
 80059cc:	2b00      	cmp	r3, #0
 80059ce:	f000 8101 	beq.w	8005bd4 <HAL_UART_IRQHandler+0x564>
          && (nb_remaining_rx_data < huart->RxXferSize))
 80059d2:	687b      	ldr	r3, [r7, #4]
 80059d4:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 80059d8:	893a      	ldrh	r2, [r7, #8]
 80059da:	429a      	cmp	r2, r3
 80059dc:	f080 80fa 	bcs.w	8005bd4 <HAL_UART_IRQHandler+0x564>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 80059e0:	687b      	ldr	r3, [r7, #4]
 80059e2:	893a      	ldrh	r2, [r7, #8]
 80059e4:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 80059e8:	687b      	ldr	r3, [r7, #4]
 80059ea:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80059ec:	69db      	ldr	r3, [r3, #28]
 80059ee:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80059f2:	d02b      	beq.n	8005a4c <HAL_UART_IRQHandler+0x3dc>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80059f4:	687b      	ldr	r3, [r7, #4]
 80059f6:	681b      	ldr	r3, [r3, #0]
 80059f8:	681a      	ldr	r2, [r3, #0]
 80059fa:	687b      	ldr	r3, [r7, #4]
 80059fc:	681b      	ldr	r3, [r3, #0]
 80059fe:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8005a02:	601a      	str	r2, [r3, #0]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005a04:	687b      	ldr	r3, [r7, #4]
 8005a06:	681b      	ldr	r3, [r3, #0]
 8005a08:	689a      	ldr	r2, [r3, #8]
 8005a0a:	687b      	ldr	r3, [r7, #4]
 8005a0c:	681b      	ldr	r3, [r3, #0]
 8005a0e:	f022 0201 	bic.w	r2, r2, #1
 8005a12:	609a      	str	r2, [r3, #8]

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8005a14:	687b      	ldr	r3, [r7, #4]
 8005a16:	681b      	ldr	r3, [r3, #0]
 8005a18:	689a      	ldr	r2, [r3, #8]
 8005a1a:	687b      	ldr	r3, [r7, #4]
 8005a1c:	681b      	ldr	r3, [r3, #0]
 8005a1e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8005a22:	609a      	str	r2, [r3, #8]

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8005a24:	687b      	ldr	r3, [r7, #4]
 8005a26:	2220      	movs	r2, #32
 8005a28:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005a2c:	687b      	ldr	r3, [r7, #4]
 8005a2e:	2200      	movs	r2, #0
 8005a30:	66da      	str	r2, [r3, #108]	; 0x6c

          CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005a32:	687b      	ldr	r3, [r7, #4]
 8005a34:	681b      	ldr	r3, [r3, #0]
 8005a36:	681a      	ldr	r2, [r3, #0]
 8005a38:	687b      	ldr	r3, [r7, #4]
 8005a3a:	681b      	ldr	r3, [r3, #0]
 8005a3c:	f022 0210 	bic.w	r2, r2, #16
 8005a40:	601a      	str	r2, [r3, #0]

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8005a42:	687b      	ldr	r3, [r7, #4]
 8005a44:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8005a46:	4618      	mov	r0, r3
 8005a48:	f7fb fdfc 	bl	8001644 <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8005a4c:	687b      	ldr	r3, [r7, #4]
 8005a4e:	f8b3 205c 	ldrh.w	r2, [r3, #92]	; 0x5c
 8005a52:	687b      	ldr	r3, [r7, #4]
 8005a54:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8005a58:	b29b      	uxth	r3, r3
 8005a5a:	1ad3      	subs	r3, r2, r3
 8005a5c:	b29b      	uxth	r3, r3
 8005a5e:	4619      	mov	r1, r3
 8005a60:	6878      	ldr	r0, [r7, #4]
 8005a62:	f000 f8d3 	bl	8005c0c <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8005a66:	e0b5      	b.n	8005bd4 <HAL_UART_IRQHandler+0x564>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8005a68:	687b      	ldr	r3, [r7, #4]
 8005a6a:	f8b3 205c 	ldrh.w	r2, [r3, #92]	; 0x5c
 8005a6e:	687b      	ldr	r3, [r7, #4]
 8005a70:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8005a74:	b29b      	uxth	r3, r3
 8005a76:	1ad3      	subs	r3, r2, r3
 8005a78:	817b      	strh	r3, [r7, #10]
      if ((huart->RxXferCount > 0U)
 8005a7a:	687b      	ldr	r3, [r7, #4]
 8005a7c:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8005a80:	b29b      	uxth	r3, r3
 8005a82:	2b00      	cmp	r3, #0
 8005a84:	f000 80a8 	beq.w	8005bd8 <HAL_UART_IRQHandler+0x568>
          && (nb_rx_data > 0U))
 8005a88:	897b      	ldrh	r3, [r7, #10]
 8005a8a:	2b00      	cmp	r3, #0
 8005a8c:	f000 80a4 	beq.w	8005bd8 <HAL_UART_IRQHandler+0x568>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8005a90:	687b      	ldr	r3, [r7, #4]
 8005a92:	681b      	ldr	r3, [r3, #0]
 8005a94:	681a      	ldr	r2, [r3, #0]
 8005a96:	687b      	ldr	r3, [r7, #4]
 8005a98:	681b      	ldr	r3, [r3, #0]
 8005a9a:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 8005a9e:	601a      	str	r2, [r3, #0]

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8005aa0:	687b      	ldr	r3, [r7, #4]
 8005aa2:	681b      	ldr	r3, [r3, #0]
 8005aa4:	6899      	ldr	r1, [r3, #8]
 8005aa6:	687b      	ldr	r3, [r7, #4]
 8005aa8:	681a      	ldr	r2, [r3, #0]
 8005aaa:	4b3a      	ldr	r3, [pc, #232]	; (8005b94 <HAL_UART_IRQHandler+0x524>)
 8005aac:	400b      	ands	r3, r1
 8005aae:	6093      	str	r3, [r2, #8]

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8005ab0:	687b      	ldr	r3, [r7, #4]
 8005ab2:	2220      	movs	r2, #32
 8005ab4:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005ab8:	687b      	ldr	r3, [r7, #4]
 8005aba:	2200      	movs	r2, #0
 8005abc:	66da      	str	r2, [r3, #108]	; 0x6c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8005abe:	687b      	ldr	r3, [r7, #4]
 8005ac0:	2200      	movs	r2, #0
 8005ac2:	671a      	str	r2, [r3, #112]	; 0x70

        CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005ac4:	687b      	ldr	r3, [r7, #4]
 8005ac6:	681b      	ldr	r3, [r3, #0]
 8005ac8:	681a      	ldr	r2, [r3, #0]
 8005aca:	687b      	ldr	r3, [r7, #4]
 8005acc:	681b      	ldr	r3, [r3, #0]
 8005ace:	f022 0210 	bic.w	r2, r2, #16
 8005ad2:	601a      	str	r2, [r3, #0]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8005ad4:	897b      	ldrh	r3, [r7, #10]
 8005ad6:	4619      	mov	r1, r3
 8005ad8:	6878      	ldr	r0, [r7, #4]
 8005ada:	f000 f897 	bl	8005c0c <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8005ade:	e07b      	b.n	8005bd8 <HAL_UART_IRQHandler+0x568>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 8005ae0:	69fb      	ldr	r3, [r7, #28]
 8005ae2:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8005ae6:	2b00      	cmp	r3, #0
 8005ae8:	d00d      	beq.n	8005b06 <HAL_UART_IRQHandler+0x496>
 8005aea:	697b      	ldr	r3, [r7, #20]
 8005aec:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8005af0:	2b00      	cmp	r3, #0
 8005af2:	d008      	beq.n	8005b06 <HAL_UART_IRQHandler+0x496>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 8005af4:	687b      	ldr	r3, [r7, #4]
 8005af6:	681b      	ldr	r3, [r3, #0]
 8005af8:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8005afc:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 8005afe:	6878      	ldr	r0, [r7, #4]
 8005b00:	f001 f8be 	bl	8006c80 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8005b04:	e06b      	b.n	8005bde <HAL_UART_IRQHandler+0x56e>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
 8005b06:	69fb      	ldr	r3, [r7, #28]
 8005b08:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005b0c:	2b00      	cmp	r3, #0
 8005b0e:	d012      	beq.n	8005b36 <HAL_UART_IRQHandler+0x4c6>
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
 8005b10:	69bb      	ldr	r3, [r7, #24]
 8005b12:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005b16:	2b00      	cmp	r3, #0
 8005b18:	d104      	bne.n	8005b24 <HAL_UART_IRQHandler+0x4b4>
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
 8005b1a:	697b      	ldr	r3, [r7, #20]
 8005b1c:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8005b20:	2b00      	cmp	r3, #0
 8005b22:	d008      	beq.n	8005b36 <HAL_UART_IRQHandler+0x4c6>
  {
    if (huart->TxISR != NULL)
 8005b24:	687b      	ldr	r3, [r7, #4]
 8005b26:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005b28:	2b00      	cmp	r3, #0
 8005b2a:	d057      	beq.n	8005bdc <HAL_UART_IRQHandler+0x56c>
    {
      huart->TxISR(huart);
 8005b2c:	687b      	ldr	r3, [r7, #4]
 8005b2e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005b30:	6878      	ldr	r0, [r7, #4]
 8005b32:	4798      	blx	r3
    }
    return;
 8005b34:	e052      	b.n	8005bdc <HAL_UART_IRQHandler+0x56c>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 8005b36:	69fb      	ldr	r3, [r7, #28]
 8005b38:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005b3c:	2b00      	cmp	r3, #0
 8005b3e:	d02b      	beq.n	8005b98 <HAL_UART_IRQHandler+0x528>
 8005b40:	69bb      	ldr	r3, [r7, #24]
 8005b42:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005b46:	2b00      	cmp	r3, #0
 8005b48:	d026      	beq.n	8005b98 <HAL_UART_IRQHandler+0x528>
  {
    UART_EndTransmit_IT(huart);
 8005b4a:	6878      	ldr	r0, [r7, #4]
 8005b4c:	f001 f87e 	bl	8006c4c <UART_EndTransmit_IT>
    return;
 8005b50:	e045      	b.n	8005bde <HAL_UART_IRQHandler+0x56e>
 8005b52:	bf00      	nop
 8005b54:	40020010 	.word	0x40020010
 8005b58:	40020028 	.word	0x40020028
 8005b5c:	40020040 	.word	0x40020040
 8005b60:	40020058 	.word	0x40020058
 8005b64:	40020070 	.word	0x40020070
 8005b68:	40020088 	.word	0x40020088
 8005b6c:	400200a0 	.word	0x400200a0
 8005b70:	400200b8 	.word	0x400200b8
 8005b74:	40020410 	.word	0x40020410
 8005b78:	40020428 	.word	0x40020428
 8005b7c:	40020440 	.word	0x40020440
 8005b80:	40020458 	.word	0x40020458
 8005b84:	40020470 	.word	0x40020470
 8005b88:	40020488 	.word	0x40020488
 8005b8c:	400204a0 	.word	0x400204a0
 8005b90:	400204b8 	.word	0x400204b8
 8005b94:	effffffe 	.word	0xeffffffe
  }

  /* UART TX Fifo Empty occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_TXFE) != 0U) && ((cr1its & USART_CR1_TXFEIE) != 0U))
 8005b98:	69fb      	ldr	r3, [r7, #28]
 8005b9a:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8005b9e:	2b00      	cmp	r3, #0
 8005ba0:	d008      	beq.n	8005bb4 <HAL_UART_IRQHandler+0x544>
 8005ba2:	69bb      	ldr	r3, [r7, #24]
 8005ba4:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8005ba8:	2b00      	cmp	r3, #0
 8005baa:	d003      	beq.n	8005bb4 <HAL_UART_IRQHandler+0x544>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Tx Fifo Empty Callback */
    huart->TxFifoEmptyCallback(huart);
#else
    /* Call legacy weak Tx Fifo Empty Callback */
    HAL_UARTEx_TxFifoEmptyCallback(huart);
 8005bac:	6878      	ldr	r0, [r7, #4]
 8005bae:	f001 f87b 	bl	8006ca8 <HAL_UARTEx_TxFifoEmptyCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8005bb2:	e014      	b.n	8005bde <HAL_UART_IRQHandler+0x56e>
  }

  /* UART RX Fifo Full occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_RXFF) != 0U) && ((cr1its & USART_CR1_RXFFIE) != 0U))
 8005bb4:	69fb      	ldr	r3, [r7, #28]
 8005bb6:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8005bba:	2b00      	cmp	r3, #0
 8005bbc:	d00f      	beq.n	8005bde <HAL_UART_IRQHandler+0x56e>
 8005bbe:	69bb      	ldr	r3, [r7, #24]
 8005bc0:	2b00      	cmp	r3, #0
 8005bc2:	da0c      	bge.n	8005bde <HAL_UART_IRQHandler+0x56e>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Rx Fifo Full Callback */
    huart->RxFifoFullCallback(huart);
#else
    /* Call legacy weak Rx Fifo Full Callback */
    HAL_UARTEx_RxFifoFullCallback(huart);
 8005bc4:	6878      	ldr	r0, [r7, #4]
 8005bc6:	f001 f865 	bl	8006c94 <HAL_UARTEx_RxFifoFullCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8005bca:	e008      	b.n	8005bde <HAL_UART_IRQHandler+0x56e>
      return;
 8005bcc:	bf00      	nop
 8005bce:	e006      	b.n	8005bde <HAL_UART_IRQHandler+0x56e>
    return;
 8005bd0:	bf00      	nop
 8005bd2:	e004      	b.n	8005bde <HAL_UART_IRQHandler+0x56e>
      return;
 8005bd4:	bf00      	nop
 8005bd6:	e002      	b.n	8005bde <HAL_UART_IRQHandler+0x56e>
      return;
 8005bd8:	bf00      	nop
 8005bda:	e000      	b.n	8005bde <HAL_UART_IRQHandler+0x56e>
    return;
 8005bdc:	bf00      	nop
  }
}
 8005bde:	3720      	adds	r7, #32
 8005be0:	46bd      	mov	sp, r7
 8005be2:	bd80      	pop	{r7, pc}

08005be4 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8005be4:	b480      	push	{r7}
 8005be6:	b083      	sub	sp, #12
 8005be8:	af00      	add	r7, sp, #0
 8005bea:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 8005bec:	bf00      	nop
 8005bee:	370c      	adds	r7, #12
 8005bf0:	46bd      	mov	sp, r7
 8005bf2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005bf6:	4770      	bx	lr

08005bf8 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8005bf8:	b480      	push	{r7}
 8005bfa:	b083      	sub	sp, #12
 8005bfc:	af00      	add	r7, sp, #0
 8005bfe:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 8005c00:	bf00      	nop
 8005c02:	370c      	adds	r7, #12
 8005c04:	46bd      	mov	sp, r7
 8005c06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c0a:	4770      	bx	lr

08005c0c <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8005c0c:	b480      	push	{r7}
 8005c0e:	b083      	sub	sp, #12
 8005c10:	af00      	add	r7, sp, #0
 8005c12:	6078      	str	r0, [r7, #4]
 8005c14:	460b      	mov	r3, r1
 8005c16:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8005c18:	bf00      	nop
 8005c1a:	370c      	adds	r7, #12
 8005c1c:	46bd      	mov	sp, r7
 8005c1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c22:	4770      	bx	lr

08005c24 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8005c24:	b5b0      	push	{r4, r5, r7, lr}
 8005c26:	b08e      	sub	sp, #56	; 0x38
 8005c28:	af00      	add	r7, sp, #0
 8005c2a:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8005c2c:	2300      	movs	r3, #0
 8005c2e:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8005c32:	687b      	ldr	r3, [r7, #4]
 8005c34:	689a      	ldr	r2, [r3, #8]
 8005c36:	687b      	ldr	r3, [r7, #4]
 8005c38:	691b      	ldr	r3, [r3, #16]
 8005c3a:	431a      	orrs	r2, r3
 8005c3c:	687b      	ldr	r3, [r7, #4]
 8005c3e:	695b      	ldr	r3, [r3, #20]
 8005c40:	431a      	orrs	r2, r3
 8005c42:	687b      	ldr	r3, [r7, #4]
 8005c44:	69db      	ldr	r3, [r3, #28]
 8005c46:	4313      	orrs	r3, r2
 8005c48:	637b      	str	r3, [r7, #52]	; 0x34
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8005c4a:	687b      	ldr	r3, [r7, #4]
 8005c4c:	681b      	ldr	r3, [r3, #0]
 8005c4e:	681a      	ldr	r2, [r3, #0]
 8005c50:	4bbf      	ldr	r3, [pc, #764]	; (8005f50 <UART_SetConfig+0x32c>)
 8005c52:	4013      	ands	r3, r2
 8005c54:	687a      	ldr	r2, [r7, #4]
 8005c56:	6812      	ldr	r2, [r2, #0]
 8005c58:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8005c5a:	430b      	orrs	r3, r1
 8005c5c:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8005c5e:	687b      	ldr	r3, [r7, #4]
 8005c60:	681b      	ldr	r3, [r3, #0]
 8005c62:	685b      	ldr	r3, [r3, #4]
 8005c64:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8005c68:	687b      	ldr	r3, [r7, #4]
 8005c6a:	68da      	ldr	r2, [r3, #12]
 8005c6c:	687b      	ldr	r3, [r7, #4]
 8005c6e:	681b      	ldr	r3, [r3, #0]
 8005c70:	430a      	orrs	r2, r1
 8005c72:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8005c74:	687b      	ldr	r3, [r7, #4]
 8005c76:	699b      	ldr	r3, [r3, #24]
 8005c78:	637b      	str	r3, [r7, #52]	; 0x34

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8005c7a:	687b      	ldr	r3, [r7, #4]
 8005c7c:	681b      	ldr	r3, [r3, #0]
 8005c7e:	4ab5      	ldr	r2, [pc, #724]	; (8005f54 <UART_SetConfig+0x330>)
 8005c80:	4293      	cmp	r3, r2
 8005c82:	d004      	beq.n	8005c8e <UART_SetConfig+0x6a>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8005c84:	687b      	ldr	r3, [r7, #4]
 8005c86:	6a1b      	ldr	r3, [r3, #32]
 8005c88:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8005c8a:	4313      	orrs	r3, r2
 8005c8c:	637b      	str	r3, [r7, #52]	; 0x34
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8005c8e:	687b      	ldr	r3, [r7, #4]
 8005c90:	681b      	ldr	r3, [r3, #0]
 8005c92:	689a      	ldr	r2, [r3, #8]
 8005c94:	4bb0      	ldr	r3, [pc, #704]	; (8005f58 <UART_SetConfig+0x334>)
 8005c96:	4013      	ands	r3, r2
 8005c98:	687a      	ldr	r2, [r7, #4]
 8005c9a:	6812      	ldr	r2, [r2, #0]
 8005c9c:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8005c9e:	430b      	orrs	r3, r1
 8005ca0:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8005ca2:	687b      	ldr	r3, [r7, #4]
 8005ca4:	681b      	ldr	r3, [r3, #0]
 8005ca6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005ca8:	f023 010f 	bic.w	r1, r3, #15
 8005cac:	687b      	ldr	r3, [r7, #4]
 8005cae:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8005cb0:	687b      	ldr	r3, [r7, #4]
 8005cb2:	681b      	ldr	r3, [r3, #0]
 8005cb4:	430a      	orrs	r2, r1
 8005cb6:	62da      	str	r2, [r3, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8005cb8:	687b      	ldr	r3, [r7, #4]
 8005cba:	681b      	ldr	r3, [r3, #0]
 8005cbc:	4aa7      	ldr	r2, [pc, #668]	; (8005f5c <UART_SetConfig+0x338>)
 8005cbe:	4293      	cmp	r3, r2
 8005cc0:	d176      	bne.n	8005db0 <UART_SetConfig+0x18c>
 8005cc2:	4ba7      	ldr	r3, [pc, #668]	; (8005f60 <UART_SetConfig+0x33c>)
 8005cc4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005cc6:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8005cca:	2b28      	cmp	r3, #40	; 0x28
 8005ccc:	d86c      	bhi.n	8005da8 <UART_SetConfig+0x184>
 8005cce:	a201      	add	r2, pc, #4	; (adr r2, 8005cd4 <UART_SetConfig+0xb0>)
 8005cd0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005cd4:	08005d79 	.word	0x08005d79
 8005cd8:	08005da9 	.word	0x08005da9
 8005cdc:	08005da9 	.word	0x08005da9
 8005ce0:	08005da9 	.word	0x08005da9
 8005ce4:	08005da9 	.word	0x08005da9
 8005ce8:	08005da9 	.word	0x08005da9
 8005cec:	08005da9 	.word	0x08005da9
 8005cf0:	08005da9 	.word	0x08005da9
 8005cf4:	08005d81 	.word	0x08005d81
 8005cf8:	08005da9 	.word	0x08005da9
 8005cfc:	08005da9 	.word	0x08005da9
 8005d00:	08005da9 	.word	0x08005da9
 8005d04:	08005da9 	.word	0x08005da9
 8005d08:	08005da9 	.word	0x08005da9
 8005d0c:	08005da9 	.word	0x08005da9
 8005d10:	08005da9 	.word	0x08005da9
 8005d14:	08005d89 	.word	0x08005d89
 8005d18:	08005da9 	.word	0x08005da9
 8005d1c:	08005da9 	.word	0x08005da9
 8005d20:	08005da9 	.word	0x08005da9
 8005d24:	08005da9 	.word	0x08005da9
 8005d28:	08005da9 	.word	0x08005da9
 8005d2c:	08005da9 	.word	0x08005da9
 8005d30:	08005da9 	.word	0x08005da9
 8005d34:	08005d91 	.word	0x08005d91
 8005d38:	08005da9 	.word	0x08005da9
 8005d3c:	08005da9 	.word	0x08005da9
 8005d40:	08005da9 	.word	0x08005da9
 8005d44:	08005da9 	.word	0x08005da9
 8005d48:	08005da9 	.word	0x08005da9
 8005d4c:	08005da9 	.word	0x08005da9
 8005d50:	08005da9 	.word	0x08005da9
 8005d54:	08005d99 	.word	0x08005d99
 8005d58:	08005da9 	.word	0x08005da9
 8005d5c:	08005da9 	.word	0x08005da9
 8005d60:	08005da9 	.word	0x08005da9
 8005d64:	08005da9 	.word	0x08005da9
 8005d68:	08005da9 	.word	0x08005da9
 8005d6c:	08005da9 	.word	0x08005da9
 8005d70:	08005da9 	.word	0x08005da9
 8005d74:	08005da1 	.word	0x08005da1
 8005d78:	2301      	movs	r3, #1
 8005d7a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8005d7e:	e326      	b.n	80063ce <UART_SetConfig+0x7aa>
 8005d80:	2304      	movs	r3, #4
 8005d82:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8005d86:	e322      	b.n	80063ce <UART_SetConfig+0x7aa>
 8005d88:	2308      	movs	r3, #8
 8005d8a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8005d8e:	e31e      	b.n	80063ce <UART_SetConfig+0x7aa>
 8005d90:	2310      	movs	r3, #16
 8005d92:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8005d96:	e31a      	b.n	80063ce <UART_SetConfig+0x7aa>
 8005d98:	2320      	movs	r3, #32
 8005d9a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8005d9e:	e316      	b.n	80063ce <UART_SetConfig+0x7aa>
 8005da0:	2340      	movs	r3, #64	; 0x40
 8005da2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8005da6:	e312      	b.n	80063ce <UART_SetConfig+0x7aa>
 8005da8:	2380      	movs	r3, #128	; 0x80
 8005daa:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8005dae:	e30e      	b.n	80063ce <UART_SetConfig+0x7aa>
 8005db0:	687b      	ldr	r3, [r7, #4]
 8005db2:	681b      	ldr	r3, [r3, #0]
 8005db4:	4a6b      	ldr	r2, [pc, #428]	; (8005f64 <UART_SetConfig+0x340>)
 8005db6:	4293      	cmp	r3, r2
 8005db8:	d130      	bne.n	8005e1c <UART_SetConfig+0x1f8>
 8005dba:	4b69      	ldr	r3, [pc, #420]	; (8005f60 <UART_SetConfig+0x33c>)
 8005dbc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005dbe:	f003 0307 	and.w	r3, r3, #7
 8005dc2:	2b05      	cmp	r3, #5
 8005dc4:	d826      	bhi.n	8005e14 <UART_SetConfig+0x1f0>
 8005dc6:	a201      	add	r2, pc, #4	; (adr r2, 8005dcc <UART_SetConfig+0x1a8>)
 8005dc8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005dcc:	08005de5 	.word	0x08005de5
 8005dd0:	08005ded 	.word	0x08005ded
 8005dd4:	08005df5 	.word	0x08005df5
 8005dd8:	08005dfd 	.word	0x08005dfd
 8005ddc:	08005e05 	.word	0x08005e05
 8005de0:	08005e0d 	.word	0x08005e0d
 8005de4:	2300      	movs	r3, #0
 8005de6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8005dea:	e2f0      	b.n	80063ce <UART_SetConfig+0x7aa>
 8005dec:	2304      	movs	r3, #4
 8005dee:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8005df2:	e2ec      	b.n	80063ce <UART_SetConfig+0x7aa>
 8005df4:	2308      	movs	r3, #8
 8005df6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8005dfa:	e2e8      	b.n	80063ce <UART_SetConfig+0x7aa>
 8005dfc:	2310      	movs	r3, #16
 8005dfe:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8005e02:	e2e4      	b.n	80063ce <UART_SetConfig+0x7aa>
 8005e04:	2320      	movs	r3, #32
 8005e06:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8005e0a:	e2e0      	b.n	80063ce <UART_SetConfig+0x7aa>
 8005e0c:	2340      	movs	r3, #64	; 0x40
 8005e0e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8005e12:	e2dc      	b.n	80063ce <UART_SetConfig+0x7aa>
 8005e14:	2380      	movs	r3, #128	; 0x80
 8005e16:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8005e1a:	e2d8      	b.n	80063ce <UART_SetConfig+0x7aa>
 8005e1c:	687b      	ldr	r3, [r7, #4]
 8005e1e:	681b      	ldr	r3, [r3, #0]
 8005e20:	4a51      	ldr	r2, [pc, #324]	; (8005f68 <UART_SetConfig+0x344>)
 8005e22:	4293      	cmp	r3, r2
 8005e24:	d130      	bne.n	8005e88 <UART_SetConfig+0x264>
 8005e26:	4b4e      	ldr	r3, [pc, #312]	; (8005f60 <UART_SetConfig+0x33c>)
 8005e28:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005e2a:	f003 0307 	and.w	r3, r3, #7
 8005e2e:	2b05      	cmp	r3, #5
 8005e30:	d826      	bhi.n	8005e80 <UART_SetConfig+0x25c>
 8005e32:	a201      	add	r2, pc, #4	; (adr r2, 8005e38 <UART_SetConfig+0x214>)
 8005e34:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005e38:	08005e51 	.word	0x08005e51
 8005e3c:	08005e59 	.word	0x08005e59
 8005e40:	08005e61 	.word	0x08005e61
 8005e44:	08005e69 	.word	0x08005e69
 8005e48:	08005e71 	.word	0x08005e71
 8005e4c:	08005e79 	.word	0x08005e79
 8005e50:	2300      	movs	r3, #0
 8005e52:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8005e56:	e2ba      	b.n	80063ce <UART_SetConfig+0x7aa>
 8005e58:	2304      	movs	r3, #4
 8005e5a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8005e5e:	e2b6      	b.n	80063ce <UART_SetConfig+0x7aa>
 8005e60:	2308      	movs	r3, #8
 8005e62:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8005e66:	e2b2      	b.n	80063ce <UART_SetConfig+0x7aa>
 8005e68:	2310      	movs	r3, #16
 8005e6a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8005e6e:	e2ae      	b.n	80063ce <UART_SetConfig+0x7aa>
 8005e70:	2320      	movs	r3, #32
 8005e72:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8005e76:	e2aa      	b.n	80063ce <UART_SetConfig+0x7aa>
 8005e78:	2340      	movs	r3, #64	; 0x40
 8005e7a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8005e7e:	e2a6      	b.n	80063ce <UART_SetConfig+0x7aa>
 8005e80:	2380      	movs	r3, #128	; 0x80
 8005e82:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8005e86:	e2a2      	b.n	80063ce <UART_SetConfig+0x7aa>
 8005e88:	687b      	ldr	r3, [r7, #4]
 8005e8a:	681b      	ldr	r3, [r3, #0]
 8005e8c:	4a37      	ldr	r2, [pc, #220]	; (8005f6c <UART_SetConfig+0x348>)
 8005e8e:	4293      	cmp	r3, r2
 8005e90:	d130      	bne.n	8005ef4 <UART_SetConfig+0x2d0>
 8005e92:	4b33      	ldr	r3, [pc, #204]	; (8005f60 <UART_SetConfig+0x33c>)
 8005e94:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005e96:	f003 0307 	and.w	r3, r3, #7
 8005e9a:	2b05      	cmp	r3, #5
 8005e9c:	d826      	bhi.n	8005eec <UART_SetConfig+0x2c8>
 8005e9e:	a201      	add	r2, pc, #4	; (adr r2, 8005ea4 <UART_SetConfig+0x280>)
 8005ea0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005ea4:	08005ebd 	.word	0x08005ebd
 8005ea8:	08005ec5 	.word	0x08005ec5
 8005eac:	08005ecd 	.word	0x08005ecd
 8005eb0:	08005ed5 	.word	0x08005ed5
 8005eb4:	08005edd 	.word	0x08005edd
 8005eb8:	08005ee5 	.word	0x08005ee5
 8005ebc:	2300      	movs	r3, #0
 8005ebe:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8005ec2:	e284      	b.n	80063ce <UART_SetConfig+0x7aa>
 8005ec4:	2304      	movs	r3, #4
 8005ec6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8005eca:	e280      	b.n	80063ce <UART_SetConfig+0x7aa>
 8005ecc:	2308      	movs	r3, #8
 8005ece:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8005ed2:	e27c      	b.n	80063ce <UART_SetConfig+0x7aa>
 8005ed4:	2310      	movs	r3, #16
 8005ed6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8005eda:	e278      	b.n	80063ce <UART_SetConfig+0x7aa>
 8005edc:	2320      	movs	r3, #32
 8005ede:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8005ee2:	e274      	b.n	80063ce <UART_SetConfig+0x7aa>
 8005ee4:	2340      	movs	r3, #64	; 0x40
 8005ee6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8005eea:	e270      	b.n	80063ce <UART_SetConfig+0x7aa>
 8005eec:	2380      	movs	r3, #128	; 0x80
 8005eee:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8005ef2:	e26c      	b.n	80063ce <UART_SetConfig+0x7aa>
 8005ef4:	687b      	ldr	r3, [r7, #4]
 8005ef6:	681b      	ldr	r3, [r3, #0]
 8005ef8:	4a1d      	ldr	r2, [pc, #116]	; (8005f70 <UART_SetConfig+0x34c>)
 8005efa:	4293      	cmp	r3, r2
 8005efc:	d142      	bne.n	8005f84 <UART_SetConfig+0x360>
 8005efe:	4b18      	ldr	r3, [pc, #96]	; (8005f60 <UART_SetConfig+0x33c>)
 8005f00:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005f02:	f003 0307 	and.w	r3, r3, #7
 8005f06:	2b05      	cmp	r3, #5
 8005f08:	d838      	bhi.n	8005f7c <UART_SetConfig+0x358>
 8005f0a:	a201      	add	r2, pc, #4	; (adr r2, 8005f10 <UART_SetConfig+0x2ec>)
 8005f0c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005f10:	08005f29 	.word	0x08005f29
 8005f14:	08005f31 	.word	0x08005f31
 8005f18:	08005f39 	.word	0x08005f39
 8005f1c:	08005f41 	.word	0x08005f41
 8005f20:	08005f49 	.word	0x08005f49
 8005f24:	08005f75 	.word	0x08005f75
 8005f28:	2300      	movs	r3, #0
 8005f2a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8005f2e:	e24e      	b.n	80063ce <UART_SetConfig+0x7aa>
 8005f30:	2304      	movs	r3, #4
 8005f32:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8005f36:	e24a      	b.n	80063ce <UART_SetConfig+0x7aa>
 8005f38:	2308      	movs	r3, #8
 8005f3a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8005f3e:	e246      	b.n	80063ce <UART_SetConfig+0x7aa>
 8005f40:	2310      	movs	r3, #16
 8005f42:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8005f46:	e242      	b.n	80063ce <UART_SetConfig+0x7aa>
 8005f48:	2320      	movs	r3, #32
 8005f4a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8005f4e:	e23e      	b.n	80063ce <UART_SetConfig+0x7aa>
 8005f50:	cfff69f3 	.word	0xcfff69f3
 8005f54:	58000c00 	.word	0x58000c00
 8005f58:	11fff4ff 	.word	0x11fff4ff
 8005f5c:	40011000 	.word	0x40011000
 8005f60:	58024400 	.word	0x58024400
 8005f64:	40004400 	.word	0x40004400
 8005f68:	40004800 	.word	0x40004800
 8005f6c:	40004c00 	.word	0x40004c00
 8005f70:	40005000 	.word	0x40005000
 8005f74:	2340      	movs	r3, #64	; 0x40
 8005f76:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8005f7a:	e228      	b.n	80063ce <UART_SetConfig+0x7aa>
 8005f7c:	2380      	movs	r3, #128	; 0x80
 8005f7e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8005f82:	e224      	b.n	80063ce <UART_SetConfig+0x7aa>
 8005f84:	687b      	ldr	r3, [r7, #4]
 8005f86:	681b      	ldr	r3, [r3, #0]
 8005f88:	4ab1      	ldr	r2, [pc, #708]	; (8006250 <UART_SetConfig+0x62c>)
 8005f8a:	4293      	cmp	r3, r2
 8005f8c:	d176      	bne.n	800607c <UART_SetConfig+0x458>
 8005f8e:	4bb1      	ldr	r3, [pc, #708]	; (8006254 <UART_SetConfig+0x630>)
 8005f90:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005f92:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8005f96:	2b28      	cmp	r3, #40	; 0x28
 8005f98:	d86c      	bhi.n	8006074 <UART_SetConfig+0x450>
 8005f9a:	a201      	add	r2, pc, #4	; (adr r2, 8005fa0 <UART_SetConfig+0x37c>)
 8005f9c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005fa0:	08006045 	.word	0x08006045
 8005fa4:	08006075 	.word	0x08006075
 8005fa8:	08006075 	.word	0x08006075
 8005fac:	08006075 	.word	0x08006075
 8005fb0:	08006075 	.word	0x08006075
 8005fb4:	08006075 	.word	0x08006075
 8005fb8:	08006075 	.word	0x08006075
 8005fbc:	08006075 	.word	0x08006075
 8005fc0:	0800604d 	.word	0x0800604d
 8005fc4:	08006075 	.word	0x08006075
 8005fc8:	08006075 	.word	0x08006075
 8005fcc:	08006075 	.word	0x08006075
 8005fd0:	08006075 	.word	0x08006075
 8005fd4:	08006075 	.word	0x08006075
 8005fd8:	08006075 	.word	0x08006075
 8005fdc:	08006075 	.word	0x08006075
 8005fe0:	08006055 	.word	0x08006055
 8005fe4:	08006075 	.word	0x08006075
 8005fe8:	08006075 	.word	0x08006075
 8005fec:	08006075 	.word	0x08006075
 8005ff0:	08006075 	.word	0x08006075
 8005ff4:	08006075 	.word	0x08006075
 8005ff8:	08006075 	.word	0x08006075
 8005ffc:	08006075 	.word	0x08006075
 8006000:	0800605d 	.word	0x0800605d
 8006004:	08006075 	.word	0x08006075
 8006008:	08006075 	.word	0x08006075
 800600c:	08006075 	.word	0x08006075
 8006010:	08006075 	.word	0x08006075
 8006014:	08006075 	.word	0x08006075
 8006018:	08006075 	.word	0x08006075
 800601c:	08006075 	.word	0x08006075
 8006020:	08006065 	.word	0x08006065
 8006024:	08006075 	.word	0x08006075
 8006028:	08006075 	.word	0x08006075
 800602c:	08006075 	.word	0x08006075
 8006030:	08006075 	.word	0x08006075
 8006034:	08006075 	.word	0x08006075
 8006038:	08006075 	.word	0x08006075
 800603c:	08006075 	.word	0x08006075
 8006040:	0800606d 	.word	0x0800606d
 8006044:	2301      	movs	r3, #1
 8006046:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800604a:	e1c0      	b.n	80063ce <UART_SetConfig+0x7aa>
 800604c:	2304      	movs	r3, #4
 800604e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8006052:	e1bc      	b.n	80063ce <UART_SetConfig+0x7aa>
 8006054:	2308      	movs	r3, #8
 8006056:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800605a:	e1b8      	b.n	80063ce <UART_SetConfig+0x7aa>
 800605c:	2310      	movs	r3, #16
 800605e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8006062:	e1b4      	b.n	80063ce <UART_SetConfig+0x7aa>
 8006064:	2320      	movs	r3, #32
 8006066:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800606a:	e1b0      	b.n	80063ce <UART_SetConfig+0x7aa>
 800606c:	2340      	movs	r3, #64	; 0x40
 800606e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8006072:	e1ac      	b.n	80063ce <UART_SetConfig+0x7aa>
 8006074:	2380      	movs	r3, #128	; 0x80
 8006076:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800607a:	e1a8      	b.n	80063ce <UART_SetConfig+0x7aa>
 800607c:	687b      	ldr	r3, [r7, #4]
 800607e:	681b      	ldr	r3, [r3, #0]
 8006080:	4a75      	ldr	r2, [pc, #468]	; (8006258 <UART_SetConfig+0x634>)
 8006082:	4293      	cmp	r3, r2
 8006084:	d130      	bne.n	80060e8 <UART_SetConfig+0x4c4>
 8006086:	4b73      	ldr	r3, [pc, #460]	; (8006254 <UART_SetConfig+0x630>)
 8006088:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800608a:	f003 0307 	and.w	r3, r3, #7
 800608e:	2b05      	cmp	r3, #5
 8006090:	d826      	bhi.n	80060e0 <UART_SetConfig+0x4bc>
 8006092:	a201      	add	r2, pc, #4	; (adr r2, 8006098 <UART_SetConfig+0x474>)
 8006094:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006098:	080060b1 	.word	0x080060b1
 800609c:	080060b9 	.word	0x080060b9
 80060a0:	080060c1 	.word	0x080060c1
 80060a4:	080060c9 	.word	0x080060c9
 80060a8:	080060d1 	.word	0x080060d1
 80060ac:	080060d9 	.word	0x080060d9
 80060b0:	2300      	movs	r3, #0
 80060b2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80060b6:	e18a      	b.n	80063ce <UART_SetConfig+0x7aa>
 80060b8:	2304      	movs	r3, #4
 80060ba:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80060be:	e186      	b.n	80063ce <UART_SetConfig+0x7aa>
 80060c0:	2308      	movs	r3, #8
 80060c2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80060c6:	e182      	b.n	80063ce <UART_SetConfig+0x7aa>
 80060c8:	2310      	movs	r3, #16
 80060ca:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80060ce:	e17e      	b.n	80063ce <UART_SetConfig+0x7aa>
 80060d0:	2320      	movs	r3, #32
 80060d2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80060d6:	e17a      	b.n	80063ce <UART_SetConfig+0x7aa>
 80060d8:	2340      	movs	r3, #64	; 0x40
 80060da:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80060de:	e176      	b.n	80063ce <UART_SetConfig+0x7aa>
 80060e0:	2380      	movs	r3, #128	; 0x80
 80060e2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80060e6:	e172      	b.n	80063ce <UART_SetConfig+0x7aa>
 80060e8:	687b      	ldr	r3, [r7, #4]
 80060ea:	681b      	ldr	r3, [r3, #0]
 80060ec:	4a5b      	ldr	r2, [pc, #364]	; (800625c <UART_SetConfig+0x638>)
 80060ee:	4293      	cmp	r3, r2
 80060f0:	d130      	bne.n	8006154 <UART_SetConfig+0x530>
 80060f2:	4b58      	ldr	r3, [pc, #352]	; (8006254 <UART_SetConfig+0x630>)
 80060f4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80060f6:	f003 0307 	and.w	r3, r3, #7
 80060fa:	2b05      	cmp	r3, #5
 80060fc:	d826      	bhi.n	800614c <UART_SetConfig+0x528>
 80060fe:	a201      	add	r2, pc, #4	; (adr r2, 8006104 <UART_SetConfig+0x4e0>)
 8006100:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006104:	0800611d 	.word	0x0800611d
 8006108:	08006125 	.word	0x08006125
 800610c:	0800612d 	.word	0x0800612d
 8006110:	08006135 	.word	0x08006135
 8006114:	0800613d 	.word	0x0800613d
 8006118:	08006145 	.word	0x08006145
 800611c:	2300      	movs	r3, #0
 800611e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8006122:	e154      	b.n	80063ce <UART_SetConfig+0x7aa>
 8006124:	2304      	movs	r3, #4
 8006126:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800612a:	e150      	b.n	80063ce <UART_SetConfig+0x7aa>
 800612c:	2308      	movs	r3, #8
 800612e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8006132:	e14c      	b.n	80063ce <UART_SetConfig+0x7aa>
 8006134:	2310      	movs	r3, #16
 8006136:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800613a:	e148      	b.n	80063ce <UART_SetConfig+0x7aa>
 800613c:	2320      	movs	r3, #32
 800613e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8006142:	e144      	b.n	80063ce <UART_SetConfig+0x7aa>
 8006144:	2340      	movs	r3, #64	; 0x40
 8006146:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800614a:	e140      	b.n	80063ce <UART_SetConfig+0x7aa>
 800614c:	2380      	movs	r3, #128	; 0x80
 800614e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8006152:	e13c      	b.n	80063ce <UART_SetConfig+0x7aa>
 8006154:	687b      	ldr	r3, [r7, #4]
 8006156:	681b      	ldr	r3, [r3, #0]
 8006158:	4a41      	ldr	r2, [pc, #260]	; (8006260 <UART_SetConfig+0x63c>)
 800615a:	4293      	cmp	r3, r2
 800615c:	f040 8082 	bne.w	8006264 <UART_SetConfig+0x640>
 8006160:	4b3c      	ldr	r3, [pc, #240]	; (8006254 <UART_SetConfig+0x630>)
 8006162:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006164:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8006168:	2b28      	cmp	r3, #40	; 0x28
 800616a:	d86d      	bhi.n	8006248 <UART_SetConfig+0x624>
 800616c:	a201      	add	r2, pc, #4	; (adr r2, 8006174 <UART_SetConfig+0x550>)
 800616e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006172:	bf00      	nop
 8006174:	08006219 	.word	0x08006219
 8006178:	08006249 	.word	0x08006249
 800617c:	08006249 	.word	0x08006249
 8006180:	08006249 	.word	0x08006249
 8006184:	08006249 	.word	0x08006249
 8006188:	08006249 	.word	0x08006249
 800618c:	08006249 	.word	0x08006249
 8006190:	08006249 	.word	0x08006249
 8006194:	08006221 	.word	0x08006221
 8006198:	08006249 	.word	0x08006249
 800619c:	08006249 	.word	0x08006249
 80061a0:	08006249 	.word	0x08006249
 80061a4:	08006249 	.word	0x08006249
 80061a8:	08006249 	.word	0x08006249
 80061ac:	08006249 	.word	0x08006249
 80061b0:	08006249 	.word	0x08006249
 80061b4:	08006229 	.word	0x08006229
 80061b8:	08006249 	.word	0x08006249
 80061bc:	08006249 	.word	0x08006249
 80061c0:	08006249 	.word	0x08006249
 80061c4:	08006249 	.word	0x08006249
 80061c8:	08006249 	.word	0x08006249
 80061cc:	08006249 	.word	0x08006249
 80061d0:	08006249 	.word	0x08006249
 80061d4:	08006231 	.word	0x08006231
 80061d8:	08006249 	.word	0x08006249
 80061dc:	08006249 	.word	0x08006249
 80061e0:	08006249 	.word	0x08006249
 80061e4:	08006249 	.word	0x08006249
 80061e8:	08006249 	.word	0x08006249
 80061ec:	08006249 	.word	0x08006249
 80061f0:	08006249 	.word	0x08006249
 80061f4:	08006239 	.word	0x08006239
 80061f8:	08006249 	.word	0x08006249
 80061fc:	08006249 	.word	0x08006249
 8006200:	08006249 	.word	0x08006249
 8006204:	08006249 	.word	0x08006249
 8006208:	08006249 	.word	0x08006249
 800620c:	08006249 	.word	0x08006249
 8006210:	08006249 	.word	0x08006249
 8006214:	08006241 	.word	0x08006241
 8006218:	2301      	movs	r3, #1
 800621a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800621e:	e0d6      	b.n	80063ce <UART_SetConfig+0x7aa>
 8006220:	2304      	movs	r3, #4
 8006222:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8006226:	e0d2      	b.n	80063ce <UART_SetConfig+0x7aa>
 8006228:	2308      	movs	r3, #8
 800622a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800622e:	e0ce      	b.n	80063ce <UART_SetConfig+0x7aa>
 8006230:	2310      	movs	r3, #16
 8006232:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8006236:	e0ca      	b.n	80063ce <UART_SetConfig+0x7aa>
 8006238:	2320      	movs	r3, #32
 800623a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800623e:	e0c6      	b.n	80063ce <UART_SetConfig+0x7aa>
 8006240:	2340      	movs	r3, #64	; 0x40
 8006242:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8006246:	e0c2      	b.n	80063ce <UART_SetConfig+0x7aa>
 8006248:	2380      	movs	r3, #128	; 0x80
 800624a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800624e:	e0be      	b.n	80063ce <UART_SetConfig+0x7aa>
 8006250:	40011400 	.word	0x40011400
 8006254:	58024400 	.word	0x58024400
 8006258:	40007800 	.word	0x40007800
 800625c:	40007c00 	.word	0x40007c00
 8006260:	40011800 	.word	0x40011800
 8006264:	687b      	ldr	r3, [r7, #4]
 8006266:	681b      	ldr	r3, [r3, #0]
 8006268:	4aad      	ldr	r2, [pc, #692]	; (8006520 <UART_SetConfig+0x8fc>)
 800626a:	4293      	cmp	r3, r2
 800626c:	d176      	bne.n	800635c <UART_SetConfig+0x738>
 800626e:	4bad      	ldr	r3, [pc, #692]	; (8006524 <UART_SetConfig+0x900>)
 8006270:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006272:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8006276:	2b28      	cmp	r3, #40	; 0x28
 8006278:	d86c      	bhi.n	8006354 <UART_SetConfig+0x730>
 800627a:	a201      	add	r2, pc, #4	; (adr r2, 8006280 <UART_SetConfig+0x65c>)
 800627c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006280:	08006325 	.word	0x08006325
 8006284:	08006355 	.word	0x08006355
 8006288:	08006355 	.word	0x08006355
 800628c:	08006355 	.word	0x08006355
 8006290:	08006355 	.word	0x08006355
 8006294:	08006355 	.word	0x08006355
 8006298:	08006355 	.word	0x08006355
 800629c:	08006355 	.word	0x08006355
 80062a0:	0800632d 	.word	0x0800632d
 80062a4:	08006355 	.word	0x08006355
 80062a8:	08006355 	.word	0x08006355
 80062ac:	08006355 	.word	0x08006355
 80062b0:	08006355 	.word	0x08006355
 80062b4:	08006355 	.word	0x08006355
 80062b8:	08006355 	.word	0x08006355
 80062bc:	08006355 	.word	0x08006355
 80062c0:	08006335 	.word	0x08006335
 80062c4:	08006355 	.word	0x08006355
 80062c8:	08006355 	.word	0x08006355
 80062cc:	08006355 	.word	0x08006355
 80062d0:	08006355 	.word	0x08006355
 80062d4:	08006355 	.word	0x08006355
 80062d8:	08006355 	.word	0x08006355
 80062dc:	08006355 	.word	0x08006355
 80062e0:	0800633d 	.word	0x0800633d
 80062e4:	08006355 	.word	0x08006355
 80062e8:	08006355 	.word	0x08006355
 80062ec:	08006355 	.word	0x08006355
 80062f0:	08006355 	.word	0x08006355
 80062f4:	08006355 	.word	0x08006355
 80062f8:	08006355 	.word	0x08006355
 80062fc:	08006355 	.word	0x08006355
 8006300:	08006345 	.word	0x08006345
 8006304:	08006355 	.word	0x08006355
 8006308:	08006355 	.word	0x08006355
 800630c:	08006355 	.word	0x08006355
 8006310:	08006355 	.word	0x08006355
 8006314:	08006355 	.word	0x08006355
 8006318:	08006355 	.word	0x08006355
 800631c:	08006355 	.word	0x08006355
 8006320:	0800634d 	.word	0x0800634d
 8006324:	2301      	movs	r3, #1
 8006326:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800632a:	e050      	b.n	80063ce <UART_SetConfig+0x7aa>
 800632c:	2304      	movs	r3, #4
 800632e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8006332:	e04c      	b.n	80063ce <UART_SetConfig+0x7aa>
 8006334:	2308      	movs	r3, #8
 8006336:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800633a:	e048      	b.n	80063ce <UART_SetConfig+0x7aa>
 800633c:	2310      	movs	r3, #16
 800633e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8006342:	e044      	b.n	80063ce <UART_SetConfig+0x7aa>
 8006344:	2320      	movs	r3, #32
 8006346:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800634a:	e040      	b.n	80063ce <UART_SetConfig+0x7aa>
 800634c:	2340      	movs	r3, #64	; 0x40
 800634e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8006352:	e03c      	b.n	80063ce <UART_SetConfig+0x7aa>
 8006354:	2380      	movs	r3, #128	; 0x80
 8006356:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800635a:	e038      	b.n	80063ce <UART_SetConfig+0x7aa>
 800635c:	687b      	ldr	r3, [r7, #4]
 800635e:	681b      	ldr	r3, [r3, #0]
 8006360:	4a71      	ldr	r2, [pc, #452]	; (8006528 <UART_SetConfig+0x904>)
 8006362:	4293      	cmp	r3, r2
 8006364:	d130      	bne.n	80063c8 <UART_SetConfig+0x7a4>
 8006366:	4b6f      	ldr	r3, [pc, #444]	; (8006524 <UART_SetConfig+0x900>)
 8006368:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800636a:	f003 0307 	and.w	r3, r3, #7
 800636e:	2b05      	cmp	r3, #5
 8006370:	d826      	bhi.n	80063c0 <UART_SetConfig+0x79c>
 8006372:	a201      	add	r2, pc, #4	; (adr r2, 8006378 <UART_SetConfig+0x754>)
 8006374:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006378:	08006391 	.word	0x08006391
 800637c:	08006399 	.word	0x08006399
 8006380:	080063a1 	.word	0x080063a1
 8006384:	080063a9 	.word	0x080063a9
 8006388:	080063b1 	.word	0x080063b1
 800638c:	080063b9 	.word	0x080063b9
 8006390:	2302      	movs	r3, #2
 8006392:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8006396:	e01a      	b.n	80063ce <UART_SetConfig+0x7aa>
 8006398:	2304      	movs	r3, #4
 800639a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800639e:	e016      	b.n	80063ce <UART_SetConfig+0x7aa>
 80063a0:	2308      	movs	r3, #8
 80063a2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80063a6:	e012      	b.n	80063ce <UART_SetConfig+0x7aa>
 80063a8:	2310      	movs	r3, #16
 80063aa:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80063ae:	e00e      	b.n	80063ce <UART_SetConfig+0x7aa>
 80063b0:	2320      	movs	r3, #32
 80063b2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80063b6:	e00a      	b.n	80063ce <UART_SetConfig+0x7aa>
 80063b8:	2340      	movs	r3, #64	; 0x40
 80063ba:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80063be:	e006      	b.n	80063ce <UART_SetConfig+0x7aa>
 80063c0:	2380      	movs	r3, #128	; 0x80
 80063c2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80063c6:	e002      	b.n	80063ce <UART_SetConfig+0x7aa>
 80063c8:	2380      	movs	r3, #128	; 0x80
 80063ca:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 80063ce:	687b      	ldr	r3, [r7, #4]
 80063d0:	681b      	ldr	r3, [r3, #0]
 80063d2:	4a55      	ldr	r2, [pc, #340]	; (8006528 <UART_SetConfig+0x904>)
 80063d4:	4293      	cmp	r3, r2
 80063d6:	f040 80f0 	bne.w	80065ba <UART_SetConfig+0x996>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 80063da:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 80063de:	2b20      	cmp	r3, #32
 80063e0:	dc46      	bgt.n	8006470 <UART_SetConfig+0x84c>
 80063e2:	2b02      	cmp	r3, #2
 80063e4:	db75      	blt.n	80064d2 <UART_SetConfig+0x8ae>
 80063e6:	3b02      	subs	r3, #2
 80063e8:	2b1e      	cmp	r3, #30
 80063ea:	d872      	bhi.n	80064d2 <UART_SetConfig+0x8ae>
 80063ec:	a201      	add	r2, pc, #4	; (adr r2, 80063f4 <UART_SetConfig+0x7d0>)
 80063ee:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80063f2:	bf00      	nop
 80063f4:	08006477 	.word	0x08006477
 80063f8:	080064d3 	.word	0x080064d3
 80063fc:	0800647f 	.word	0x0800647f
 8006400:	080064d3 	.word	0x080064d3
 8006404:	080064d3 	.word	0x080064d3
 8006408:	080064d3 	.word	0x080064d3
 800640c:	0800648f 	.word	0x0800648f
 8006410:	080064d3 	.word	0x080064d3
 8006414:	080064d3 	.word	0x080064d3
 8006418:	080064d3 	.word	0x080064d3
 800641c:	080064d3 	.word	0x080064d3
 8006420:	080064d3 	.word	0x080064d3
 8006424:	080064d3 	.word	0x080064d3
 8006428:	080064d3 	.word	0x080064d3
 800642c:	0800649f 	.word	0x0800649f
 8006430:	080064d3 	.word	0x080064d3
 8006434:	080064d3 	.word	0x080064d3
 8006438:	080064d3 	.word	0x080064d3
 800643c:	080064d3 	.word	0x080064d3
 8006440:	080064d3 	.word	0x080064d3
 8006444:	080064d3 	.word	0x080064d3
 8006448:	080064d3 	.word	0x080064d3
 800644c:	080064d3 	.word	0x080064d3
 8006450:	080064d3 	.word	0x080064d3
 8006454:	080064d3 	.word	0x080064d3
 8006458:	080064d3 	.word	0x080064d3
 800645c:	080064d3 	.word	0x080064d3
 8006460:	080064d3 	.word	0x080064d3
 8006464:	080064d3 	.word	0x080064d3
 8006468:	080064d3 	.word	0x080064d3
 800646c:	080064c5 	.word	0x080064c5
 8006470:	2b40      	cmp	r3, #64	; 0x40
 8006472:	d02a      	beq.n	80064ca <UART_SetConfig+0x8a6>
 8006474:	e02d      	b.n	80064d2 <UART_SetConfig+0x8ae>
    {
      case UART_CLOCKSOURCE_D3PCLK1:
        pclk = HAL_RCCEx_GetD3PCLK1Freq();
 8006476:	f7fe fb6b 	bl	8004b50 <HAL_RCCEx_GetD3PCLK1Freq>
 800647a:	62f8      	str	r0, [r7, #44]	; 0x2c
        break;
 800647c:	e02f      	b.n	80064de <UART_SetConfig+0x8ba>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800647e:	f107 0314 	add.w	r3, r7, #20
 8006482:	4618      	mov	r0, r3
 8006484:	f7fe fb7a 	bl	8004b7c <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 8006488:	69bb      	ldr	r3, [r7, #24]
 800648a:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800648c:	e027      	b.n	80064de <UART_SetConfig+0x8ba>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800648e:	f107 0308 	add.w	r3, r7, #8
 8006492:	4618      	mov	r0, r3
 8006494:	f7fe fcc6 	bl	8004e24 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 8006498:	68fb      	ldr	r3, [r7, #12]
 800649a:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800649c:	e01f      	b.n	80064de <UART_SetConfig+0x8ba>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800649e:	4b21      	ldr	r3, [pc, #132]	; (8006524 <UART_SetConfig+0x900>)
 80064a0:	681b      	ldr	r3, [r3, #0]
 80064a2:	f003 0320 	and.w	r3, r3, #32
 80064a6:	2b00      	cmp	r3, #0
 80064a8:	d009      	beq.n	80064be <UART_SetConfig+0x89a>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 80064aa:	4b1e      	ldr	r3, [pc, #120]	; (8006524 <UART_SetConfig+0x900>)
 80064ac:	681b      	ldr	r3, [r3, #0]
 80064ae:	08db      	lsrs	r3, r3, #3
 80064b0:	f003 0303 	and.w	r3, r3, #3
 80064b4:	4a1d      	ldr	r2, [pc, #116]	; (800652c <UART_SetConfig+0x908>)
 80064b6:	fa22 f303 	lsr.w	r3, r2, r3
 80064ba:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 80064bc:	e00f      	b.n	80064de <UART_SetConfig+0x8ba>
          pclk = (uint32_t) HSI_VALUE;
 80064be:	4b1b      	ldr	r3, [pc, #108]	; (800652c <UART_SetConfig+0x908>)
 80064c0:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 80064c2:	e00c      	b.n	80064de <UART_SetConfig+0x8ba>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 80064c4:	4b1a      	ldr	r3, [pc, #104]	; (8006530 <UART_SetConfig+0x90c>)
 80064c6:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 80064c8:	e009      	b.n	80064de <UART_SetConfig+0x8ba>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80064ca:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80064ce:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 80064d0:	e005      	b.n	80064de <UART_SetConfig+0x8ba>
      default:
        pclk = 0U;
 80064d2:	2300      	movs	r3, #0
 80064d4:	62fb      	str	r3, [r7, #44]	; 0x2c
        ret = HAL_ERROR;
 80064d6:	2301      	movs	r3, #1
 80064d8:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
        break;
 80064dc:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 80064de:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80064e0:	2b00      	cmp	r3, #0
 80064e2:	f000 81e6 	beq.w	80068b2 <UART_SetConfig+0xc8e>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 80064e6:	687b      	ldr	r3, [r7, #4]
 80064e8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80064ea:	4a12      	ldr	r2, [pc, #72]	; (8006534 <UART_SetConfig+0x910>)
 80064ec:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80064f0:	461a      	mov	r2, r3
 80064f2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80064f4:	fbb3 f3f2 	udiv	r3, r3, r2
 80064f8:	623b      	str	r3, [r7, #32]

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 80064fa:	687b      	ldr	r3, [r7, #4]
 80064fc:	685a      	ldr	r2, [r3, #4]
 80064fe:	4613      	mov	r3, r2
 8006500:	005b      	lsls	r3, r3, #1
 8006502:	4413      	add	r3, r2
 8006504:	6a3a      	ldr	r2, [r7, #32]
 8006506:	429a      	cmp	r2, r3
 8006508:	d305      	bcc.n	8006516 <UART_SetConfig+0x8f2>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 800650a:	687b      	ldr	r3, [r7, #4]
 800650c:	685b      	ldr	r3, [r3, #4]
 800650e:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8006510:	6a3a      	ldr	r2, [r7, #32]
 8006512:	429a      	cmp	r2, r3
 8006514:	d910      	bls.n	8006538 <UART_SetConfig+0x914>
      {
        ret = HAL_ERROR;
 8006516:	2301      	movs	r3, #1
 8006518:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
 800651c:	e1c9      	b.n	80068b2 <UART_SetConfig+0xc8e>
 800651e:	bf00      	nop
 8006520:	40011c00 	.word	0x40011c00
 8006524:	58024400 	.word	0x58024400
 8006528:	58000c00 	.word	0x58000c00
 800652c:	03d09000 	.word	0x03d09000
 8006530:	003d0900 	.word	0x003d0900
 8006534:	08007174 	.word	0x08007174
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8006538:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800653a:	4618      	mov	r0, r3
 800653c:	f04f 0100 	mov.w	r1, #0
 8006540:	687b      	ldr	r3, [r7, #4]
 8006542:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006544:	4ac1      	ldr	r2, [pc, #772]	; (800684c <UART_SetConfig+0xc28>)
 8006546:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800654a:	b29a      	uxth	r2, r3
 800654c:	f04f 0300 	mov.w	r3, #0
 8006550:	f7f9 fedc 	bl	800030c <__aeabi_uldivmod>
 8006554:	4602      	mov	r2, r0
 8006556:	460b      	mov	r3, r1
 8006558:	4610      	mov	r0, r2
 800655a:	4619      	mov	r1, r3
 800655c:	f04f 0200 	mov.w	r2, #0
 8006560:	f04f 0300 	mov.w	r3, #0
 8006564:	020b      	lsls	r3, r1, #8
 8006566:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 800656a:	0202      	lsls	r2, r0, #8
 800656c:	6879      	ldr	r1, [r7, #4]
 800656e:	6849      	ldr	r1, [r1, #4]
 8006570:	0849      	lsrs	r1, r1, #1
 8006572:	4608      	mov	r0, r1
 8006574:	f04f 0100 	mov.w	r1, #0
 8006578:	1814      	adds	r4, r2, r0
 800657a:	eb43 0501 	adc.w	r5, r3, r1
 800657e:	687b      	ldr	r3, [r7, #4]
 8006580:	685b      	ldr	r3, [r3, #4]
 8006582:	461a      	mov	r2, r3
 8006584:	f04f 0300 	mov.w	r3, #0
 8006588:	4620      	mov	r0, r4
 800658a:	4629      	mov	r1, r5
 800658c:	f7f9 febe 	bl	800030c <__aeabi_uldivmod>
 8006590:	4602      	mov	r2, r0
 8006592:	460b      	mov	r3, r1
 8006594:	4613      	mov	r3, r2
 8006596:	62bb      	str	r3, [r7, #40]	; 0x28
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8006598:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800659a:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800659e:	d308      	bcc.n	80065b2 <UART_SetConfig+0x98e>
 80065a0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80065a2:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80065a6:	d204      	bcs.n	80065b2 <UART_SetConfig+0x98e>
        {
          huart->Instance->BRR = usartdiv;
 80065a8:	687b      	ldr	r3, [r7, #4]
 80065aa:	681b      	ldr	r3, [r3, #0]
 80065ac:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80065ae:	60da      	str	r2, [r3, #12]
 80065b0:	e17f      	b.n	80068b2 <UART_SetConfig+0xc8e>
        }
        else
        {
          ret = HAL_ERROR;
 80065b2:	2301      	movs	r3, #1
 80065b4:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
 80065b8:	e17b      	b.n	80068b2 <UART_SetConfig+0xc8e>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80065ba:	687b      	ldr	r3, [r7, #4]
 80065bc:	69db      	ldr	r3, [r3, #28]
 80065be:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80065c2:	f040 80be 	bne.w	8006742 <UART_SetConfig+0xb1e>
  {
    switch (clocksource)
 80065c6:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 80065ca:	2b20      	cmp	r3, #32
 80065cc:	dc48      	bgt.n	8006660 <UART_SetConfig+0xa3c>
 80065ce:	2b00      	cmp	r3, #0
 80065d0:	db7b      	blt.n	80066ca <UART_SetConfig+0xaa6>
 80065d2:	2b20      	cmp	r3, #32
 80065d4:	d879      	bhi.n	80066ca <UART_SetConfig+0xaa6>
 80065d6:	a201      	add	r2, pc, #4	; (adr r2, 80065dc <UART_SetConfig+0x9b8>)
 80065d8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80065dc:	08006667 	.word	0x08006667
 80065e0:	0800666f 	.word	0x0800666f
 80065e4:	080066cb 	.word	0x080066cb
 80065e8:	080066cb 	.word	0x080066cb
 80065ec:	08006677 	.word	0x08006677
 80065f0:	080066cb 	.word	0x080066cb
 80065f4:	080066cb 	.word	0x080066cb
 80065f8:	080066cb 	.word	0x080066cb
 80065fc:	08006687 	.word	0x08006687
 8006600:	080066cb 	.word	0x080066cb
 8006604:	080066cb 	.word	0x080066cb
 8006608:	080066cb 	.word	0x080066cb
 800660c:	080066cb 	.word	0x080066cb
 8006610:	080066cb 	.word	0x080066cb
 8006614:	080066cb 	.word	0x080066cb
 8006618:	080066cb 	.word	0x080066cb
 800661c:	08006697 	.word	0x08006697
 8006620:	080066cb 	.word	0x080066cb
 8006624:	080066cb 	.word	0x080066cb
 8006628:	080066cb 	.word	0x080066cb
 800662c:	080066cb 	.word	0x080066cb
 8006630:	080066cb 	.word	0x080066cb
 8006634:	080066cb 	.word	0x080066cb
 8006638:	080066cb 	.word	0x080066cb
 800663c:	080066cb 	.word	0x080066cb
 8006640:	080066cb 	.word	0x080066cb
 8006644:	080066cb 	.word	0x080066cb
 8006648:	080066cb 	.word	0x080066cb
 800664c:	080066cb 	.word	0x080066cb
 8006650:	080066cb 	.word	0x080066cb
 8006654:	080066cb 	.word	0x080066cb
 8006658:	080066cb 	.word	0x080066cb
 800665c:	080066bd 	.word	0x080066bd
 8006660:	2b40      	cmp	r3, #64	; 0x40
 8006662:	d02e      	beq.n	80066c2 <UART_SetConfig+0xa9e>
 8006664:	e031      	b.n	80066ca <UART_SetConfig+0xaa6>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8006666:	f7fd fb4d 	bl	8003d04 <HAL_RCC_GetPCLK1Freq>
 800666a:	62f8      	str	r0, [r7, #44]	; 0x2c
        break;
 800666c:	e033      	b.n	80066d6 <UART_SetConfig+0xab2>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800666e:	f7fd fb5f 	bl	8003d30 <HAL_RCC_GetPCLK2Freq>
 8006672:	62f8      	str	r0, [r7, #44]	; 0x2c
        break;
 8006674:	e02f      	b.n	80066d6 <UART_SetConfig+0xab2>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8006676:	f107 0314 	add.w	r3, r7, #20
 800667a:	4618      	mov	r0, r3
 800667c:	f7fe fa7e 	bl	8004b7c <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 8006680:	69bb      	ldr	r3, [r7, #24]
 8006682:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8006684:	e027      	b.n	80066d6 <UART_SetConfig+0xab2>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8006686:	f107 0308 	add.w	r3, r7, #8
 800668a:	4618      	mov	r0, r3
 800668c:	f7fe fbca 	bl	8004e24 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 8006690:	68fb      	ldr	r3, [r7, #12]
 8006692:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8006694:	e01f      	b.n	80066d6 <UART_SetConfig+0xab2>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8006696:	4b6e      	ldr	r3, [pc, #440]	; (8006850 <UART_SetConfig+0xc2c>)
 8006698:	681b      	ldr	r3, [r3, #0]
 800669a:	f003 0320 	and.w	r3, r3, #32
 800669e:	2b00      	cmp	r3, #0
 80066a0:	d009      	beq.n	80066b6 <UART_SetConfig+0xa92>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 80066a2:	4b6b      	ldr	r3, [pc, #428]	; (8006850 <UART_SetConfig+0xc2c>)
 80066a4:	681b      	ldr	r3, [r3, #0]
 80066a6:	08db      	lsrs	r3, r3, #3
 80066a8:	f003 0303 	and.w	r3, r3, #3
 80066ac:	4a69      	ldr	r2, [pc, #420]	; (8006854 <UART_SetConfig+0xc30>)
 80066ae:	fa22 f303 	lsr.w	r3, r2, r3
 80066b2:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 80066b4:	e00f      	b.n	80066d6 <UART_SetConfig+0xab2>
          pclk = (uint32_t) HSI_VALUE;
 80066b6:	4b67      	ldr	r3, [pc, #412]	; (8006854 <UART_SetConfig+0xc30>)
 80066b8:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 80066ba:	e00c      	b.n	80066d6 <UART_SetConfig+0xab2>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 80066bc:	4b66      	ldr	r3, [pc, #408]	; (8006858 <UART_SetConfig+0xc34>)
 80066be:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 80066c0:	e009      	b.n	80066d6 <UART_SetConfig+0xab2>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80066c2:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80066c6:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 80066c8:	e005      	b.n	80066d6 <UART_SetConfig+0xab2>
      default:
        pclk = 0U;
 80066ca:	2300      	movs	r3, #0
 80066cc:	62fb      	str	r3, [r7, #44]	; 0x2c
        ret = HAL_ERROR;
 80066ce:	2301      	movs	r3, #1
 80066d0:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
        break;
 80066d4:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 80066d6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80066d8:	2b00      	cmp	r3, #0
 80066da:	f000 80ea 	beq.w	80068b2 <UART_SetConfig+0xc8e>
    {
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80066de:	687b      	ldr	r3, [r7, #4]
 80066e0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80066e2:	4a5a      	ldr	r2, [pc, #360]	; (800684c <UART_SetConfig+0xc28>)
 80066e4:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80066e8:	461a      	mov	r2, r3
 80066ea:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80066ec:	fbb3 f3f2 	udiv	r3, r3, r2
 80066f0:	005a      	lsls	r2, r3, #1
 80066f2:	687b      	ldr	r3, [r7, #4]
 80066f4:	685b      	ldr	r3, [r3, #4]
 80066f6:	085b      	lsrs	r3, r3, #1
 80066f8:	441a      	add	r2, r3
 80066fa:	687b      	ldr	r3, [r7, #4]
 80066fc:	685b      	ldr	r3, [r3, #4]
 80066fe:	fbb2 f3f3 	udiv	r3, r2, r3
 8006702:	b29b      	uxth	r3, r3
 8006704:	62bb      	str	r3, [r7, #40]	; 0x28
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8006706:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006708:	2b0f      	cmp	r3, #15
 800670a:	d916      	bls.n	800673a <UART_SetConfig+0xb16>
 800670c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800670e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006712:	d212      	bcs.n	800673a <UART_SetConfig+0xb16>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8006714:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006716:	b29b      	uxth	r3, r3
 8006718:	f023 030f 	bic.w	r3, r3, #15
 800671c:	84fb      	strh	r3, [r7, #38]	; 0x26
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800671e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006720:	085b      	lsrs	r3, r3, #1
 8006722:	b29b      	uxth	r3, r3
 8006724:	f003 0307 	and.w	r3, r3, #7
 8006728:	b29a      	uxth	r2, r3
 800672a:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 800672c:	4313      	orrs	r3, r2
 800672e:	84fb      	strh	r3, [r7, #38]	; 0x26
        huart->Instance->BRR = brrtemp;
 8006730:	687b      	ldr	r3, [r7, #4]
 8006732:	681b      	ldr	r3, [r3, #0]
 8006734:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 8006736:	60da      	str	r2, [r3, #12]
 8006738:	e0bb      	b.n	80068b2 <UART_SetConfig+0xc8e>
      }
      else
      {
        ret = HAL_ERROR;
 800673a:	2301      	movs	r3, #1
 800673c:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
 8006740:	e0b7      	b.n	80068b2 <UART_SetConfig+0xc8e>
      }
    }
  }
  else
  {
    switch (clocksource)
 8006742:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8006746:	2b20      	cmp	r3, #32
 8006748:	dc4a      	bgt.n	80067e0 <UART_SetConfig+0xbbc>
 800674a:	2b00      	cmp	r3, #0
 800674c:	f2c0 8086 	blt.w	800685c <UART_SetConfig+0xc38>
 8006750:	2b20      	cmp	r3, #32
 8006752:	f200 8083 	bhi.w	800685c <UART_SetConfig+0xc38>
 8006756:	a201      	add	r2, pc, #4	; (adr r2, 800675c <UART_SetConfig+0xb38>)
 8006758:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800675c:	080067e7 	.word	0x080067e7
 8006760:	080067ef 	.word	0x080067ef
 8006764:	0800685d 	.word	0x0800685d
 8006768:	0800685d 	.word	0x0800685d
 800676c:	080067f7 	.word	0x080067f7
 8006770:	0800685d 	.word	0x0800685d
 8006774:	0800685d 	.word	0x0800685d
 8006778:	0800685d 	.word	0x0800685d
 800677c:	08006807 	.word	0x08006807
 8006780:	0800685d 	.word	0x0800685d
 8006784:	0800685d 	.word	0x0800685d
 8006788:	0800685d 	.word	0x0800685d
 800678c:	0800685d 	.word	0x0800685d
 8006790:	0800685d 	.word	0x0800685d
 8006794:	0800685d 	.word	0x0800685d
 8006798:	0800685d 	.word	0x0800685d
 800679c:	08006817 	.word	0x08006817
 80067a0:	0800685d 	.word	0x0800685d
 80067a4:	0800685d 	.word	0x0800685d
 80067a8:	0800685d 	.word	0x0800685d
 80067ac:	0800685d 	.word	0x0800685d
 80067b0:	0800685d 	.word	0x0800685d
 80067b4:	0800685d 	.word	0x0800685d
 80067b8:	0800685d 	.word	0x0800685d
 80067bc:	0800685d 	.word	0x0800685d
 80067c0:	0800685d 	.word	0x0800685d
 80067c4:	0800685d 	.word	0x0800685d
 80067c8:	0800685d 	.word	0x0800685d
 80067cc:	0800685d 	.word	0x0800685d
 80067d0:	0800685d 	.word	0x0800685d
 80067d4:	0800685d 	.word	0x0800685d
 80067d8:	0800685d 	.word	0x0800685d
 80067dc:	0800683d 	.word	0x0800683d
 80067e0:	2b40      	cmp	r3, #64	; 0x40
 80067e2:	d02e      	beq.n	8006842 <UART_SetConfig+0xc1e>
 80067e4:	e03a      	b.n	800685c <UART_SetConfig+0xc38>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80067e6:	f7fd fa8d 	bl	8003d04 <HAL_RCC_GetPCLK1Freq>
 80067ea:	62f8      	str	r0, [r7, #44]	; 0x2c
        break;
 80067ec:	e03c      	b.n	8006868 <UART_SetConfig+0xc44>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80067ee:	f7fd fa9f 	bl	8003d30 <HAL_RCC_GetPCLK2Freq>
 80067f2:	62f8      	str	r0, [r7, #44]	; 0x2c
        break;
 80067f4:	e038      	b.n	8006868 <UART_SetConfig+0xc44>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80067f6:	f107 0314 	add.w	r3, r7, #20
 80067fa:	4618      	mov	r0, r3
 80067fc:	f7fe f9be 	bl	8004b7c <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 8006800:	69bb      	ldr	r3, [r7, #24]
 8006802:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8006804:	e030      	b.n	8006868 <UART_SetConfig+0xc44>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8006806:	f107 0308 	add.w	r3, r7, #8
 800680a:	4618      	mov	r0, r3
 800680c:	f7fe fb0a 	bl	8004e24 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 8006810:	68fb      	ldr	r3, [r7, #12]
 8006812:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8006814:	e028      	b.n	8006868 <UART_SetConfig+0xc44>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8006816:	4b0e      	ldr	r3, [pc, #56]	; (8006850 <UART_SetConfig+0xc2c>)
 8006818:	681b      	ldr	r3, [r3, #0]
 800681a:	f003 0320 	and.w	r3, r3, #32
 800681e:	2b00      	cmp	r3, #0
 8006820:	d009      	beq.n	8006836 <UART_SetConfig+0xc12>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 8006822:	4b0b      	ldr	r3, [pc, #44]	; (8006850 <UART_SetConfig+0xc2c>)
 8006824:	681b      	ldr	r3, [r3, #0]
 8006826:	08db      	lsrs	r3, r3, #3
 8006828:	f003 0303 	and.w	r3, r3, #3
 800682c:	4a09      	ldr	r2, [pc, #36]	; (8006854 <UART_SetConfig+0xc30>)
 800682e:	fa22 f303 	lsr.w	r3, r2, r3
 8006832:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8006834:	e018      	b.n	8006868 <UART_SetConfig+0xc44>
          pclk = (uint32_t) HSI_VALUE;
 8006836:	4b07      	ldr	r3, [pc, #28]	; (8006854 <UART_SetConfig+0xc30>)
 8006838:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800683a:	e015      	b.n	8006868 <UART_SetConfig+0xc44>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 800683c:	4b06      	ldr	r3, [pc, #24]	; (8006858 <UART_SetConfig+0xc34>)
 800683e:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8006840:	e012      	b.n	8006868 <UART_SetConfig+0xc44>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8006842:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8006846:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8006848:	e00e      	b.n	8006868 <UART_SetConfig+0xc44>
 800684a:	bf00      	nop
 800684c:	08007174 	.word	0x08007174
 8006850:	58024400 	.word	0x58024400
 8006854:	03d09000 	.word	0x03d09000
 8006858:	003d0900 	.word	0x003d0900
      default:
        pclk = 0U;
 800685c:	2300      	movs	r3, #0
 800685e:	62fb      	str	r3, [r7, #44]	; 0x2c
        ret = HAL_ERROR;
 8006860:	2301      	movs	r3, #1
 8006862:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
        break;
 8006866:	bf00      	nop
    }

    if (pclk != 0U)
 8006868:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800686a:	2b00      	cmp	r3, #0
 800686c:	d021      	beq.n	80068b2 <UART_SetConfig+0xc8e>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800686e:	687b      	ldr	r3, [r7, #4]
 8006870:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006872:	4a1a      	ldr	r2, [pc, #104]	; (80068dc <UART_SetConfig+0xcb8>)
 8006874:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8006878:	461a      	mov	r2, r3
 800687a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800687c:	fbb3 f2f2 	udiv	r2, r3, r2
 8006880:	687b      	ldr	r3, [r7, #4]
 8006882:	685b      	ldr	r3, [r3, #4]
 8006884:	085b      	lsrs	r3, r3, #1
 8006886:	441a      	add	r2, r3
 8006888:	687b      	ldr	r3, [r7, #4]
 800688a:	685b      	ldr	r3, [r3, #4]
 800688c:	fbb2 f3f3 	udiv	r3, r2, r3
 8006890:	b29b      	uxth	r3, r3
 8006892:	62bb      	str	r3, [r7, #40]	; 0x28
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8006894:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006896:	2b0f      	cmp	r3, #15
 8006898:	d908      	bls.n	80068ac <UART_SetConfig+0xc88>
 800689a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800689c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80068a0:	d204      	bcs.n	80068ac <UART_SetConfig+0xc88>
      {
        huart->Instance->BRR = usartdiv;
 80068a2:	687b      	ldr	r3, [r7, #4]
 80068a4:	681b      	ldr	r3, [r3, #0]
 80068a6:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80068a8:	60da      	str	r2, [r3, #12]
 80068aa:	e002      	b.n	80068b2 <UART_SetConfig+0xc8e>
      }
      else
      {
        ret = HAL_ERROR;
 80068ac:	2301      	movs	r3, #1
 80068ae:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 80068b2:	687b      	ldr	r3, [r7, #4]
 80068b4:	2201      	movs	r2, #1
 80068b6:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 80068ba:	687b      	ldr	r3, [r7, #4]
 80068bc:	2201      	movs	r2, #1
 80068be:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 80068c2:	687b      	ldr	r3, [r7, #4]
 80068c4:	2200      	movs	r2, #0
 80068c6:	671a      	str	r2, [r3, #112]	; 0x70
  huart->TxISR = NULL;
 80068c8:	687b      	ldr	r3, [r7, #4]
 80068ca:	2200      	movs	r2, #0
 80068cc:	675a      	str	r2, [r3, #116]	; 0x74

  return ret;
 80068ce:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
}
 80068d2:	4618      	mov	r0, r3
 80068d4:	3738      	adds	r7, #56	; 0x38
 80068d6:	46bd      	mov	sp, r7
 80068d8:	bdb0      	pop	{r4, r5, r7, pc}
 80068da:	bf00      	nop
 80068dc:	08007174 	.word	0x08007174

080068e0 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 80068e0:	b480      	push	{r7}
 80068e2:	b083      	sub	sp, #12
 80068e4:	af00      	add	r7, sp, #0
 80068e6:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 80068e8:	687b      	ldr	r3, [r7, #4]
 80068ea:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80068ec:	f003 0301 	and.w	r3, r3, #1
 80068f0:	2b00      	cmp	r3, #0
 80068f2:	d00a      	beq.n	800690a <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 80068f4:	687b      	ldr	r3, [r7, #4]
 80068f6:	681b      	ldr	r3, [r3, #0]
 80068f8:	685b      	ldr	r3, [r3, #4]
 80068fa:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 80068fe:	687b      	ldr	r3, [r7, #4]
 8006900:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006902:	687b      	ldr	r3, [r7, #4]
 8006904:	681b      	ldr	r3, [r3, #0]
 8006906:	430a      	orrs	r2, r1
 8006908:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800690a:	687b      	ldr	r3, [r7, #4]
 800690c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800690e:	f003 0302 	and.w	r3, r3, #2
 8006912:	2b00      	cmp	r3, #0
 8006914:	d00a      	beq.n	800692c <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8006916:	687b      	ldr	r3, [r7, #4]
 8006918:	681b      	ldr	r3, [r3, #0]
 800691a:	685b      	ldr	r3, [r3, #4]
 800691c:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8006920:	687b      	ldr	r3, [r7, #4]
 8006922:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8006924:	687b      	ldr	r3, [r7, #4]
 8006926:	681b      	ldr	r3, [r3, #0]
 8006928:	430a      	orrs	r2, r1
 800692a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800692c:	687b      	ldr	r3, [r7, #4]
 800692e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006930:	f003 0304 	and.w	r3, r3, #4
 8006934:	2b00      	cmp	r3, #0
 8006936:	d00a      	beq.n	800694e <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8006938:	687b      	ldr	r3, [r7, #4]
 800693a:	681b      	ldr	r3, [r3, #0]
 800693c:	685b      	ldr	r3, [r3, #4]
 800693e:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8006942:	687b      	ldr	r3, [r7, #4]
 8006944:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8006946:	687b      	ldr	r3, [r7, #4]
 8006948:	681b      	ldr	r3, [r3, #0]
 800694a:	430a      	orrs	r2, r1
 800694c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800694e:	687b      	ldr	r3, [r7, #4]
 8006950:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006952:	f003 0308 	and.w	r3, r3, #8
 8006956:	2b00      	cmp	r3, #0
 8006958:	d00a      	beq.n	8006970 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800695a:	687b      	ldr	r3, [r7, #4]
 800695c:	681b      	ldr	r3, [r3, #0]
 800695e:	685b      	ldr	r3, [r3, #4]
 8006960:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8006964:	687b      	ldr	r3, [r7, #4]
 8006966:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8006968:	687b      	ldr	r3, [r7, #4]
 800696a:	681b      	ldr	r3, [r3, #0]
 800696c:	430a      	orrs	r2, r1
 800696e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8006970:	687b      	ldr	r3, [r7, #4]
 8006972:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006974:	f003 0310 	and.w	r3, r3, #16
 8006978:	2b00      	cmp	r3, #0
 800697a:	d00a      	beq.n	8006992 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800697c:	687b      	ldr	r3, [r7, #4]
 800697e:	681b      	ldr	r3, [r3, #0]
 8006980:	689b      	ldr	r3, [r3, #8]
 8006982:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8006986:	687b      	ldr	r3, [r7, #4]
 8006988:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800698a:	687b      	ldr	r3, [r7, #4]
 800698c:	681b      	ldr	r3, [r3, #0]
 800698e:	430a      	orrs	r2, r1
 8006990:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8006992:	687b      	ldr	r3, [r7, #4]
 8006994:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006996:	f003 0320 	and.w	r3, r3, #32
 800699a:	2b00      	cmp	r3, #0
 800699c:	d00a      	beq.n	80069b4 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800699e:	687b      	ldr	r3, [r7, #4]
 80069a0:	681b      	ldr	r3, [r3, #0]
 80069a2:	689b      	ldr	r3, [r3, #8]
 80069a4:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 80069a8:	687b      	ldr	r3, [r7, #4]
 80069aa:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80069ac:	687b      	ldr	r3, [r7, #4]
 80069ae:	681b      	ldr	r3, [r3, #0]
 80069b0:	430a      	orrs	r2, r1
 80069b2:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 80069b4:	687b      	ldr	r3, [r7, #4]
 80069b6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80069b8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80069bc:	2b00      	cmp	r3, #0
 80069be:	d01a      	beq.n	80069f6 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 80069c0:	687b      	ldr	r3, [r7, #4]
 80069c2:	681b      	ldr	r3, [r3, #0]
 80069c4:	685b      	ldr	r3, [r3, #4]
 80069c6:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 80069ca:	687b      	ldr	r3, [r7, #4]
 80069cc:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80069ce:	687b      	ldr	r3, [r7, #4]
 80069d0:	681b      	ldr	r3, [r3, #0]
 80069d2:	430a      	orrs	r2, r1
 80069d4:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 80069d6:	687b      	ldr	r3, [r7, #4]
 80069d8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80069da:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80069de:	d10a      	bne.n	80069f6 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 80069e0:	687b      	ldr	r3, [r7, #4]
 80069e2:	681b      	ldr	r3, [r3, #0]
 80069e4:	685b      	ldr	r3, [r3, #4]
 80069e6:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 80069ea:	687b      	ldr	r3, [r7, #4]
 80069ec:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 80069ee:	687b      	ldr	r3, [r7, #4]
 80069f0:	681b      	ldr	r3, [r3, #0]
 80069f2:	430a      	orrs	r2, r1
 80069f4:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 80069f6:	687b      	ldr	r3, [r7, #4]
 80069f8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80069fa:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80069fe:	2b00      	cmp	r3, #0
 8006a00:	d00a      	beq.n	8006a18 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8006a02:	687b      	ldr	r3, [r7, #4]
 8006a04:	681b      	ldr	r3, [r3, #0]
 8006a06:	685b      	ldr	r3, [r3, #4]
 8006a08:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8006a0c:	687b      	ldr	r3, [r7, #4]
 8006a0e:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8006a10:	687b      	ldr	r3, [r7, #4]
 8006a12:	681b      	ldr	r3, [r3, #0]
 8006a14:	430a      	orrs	r2, r1
 8006a16:	605a      	str	r2, [r3, #4]
  }
}
 8006a18:	bf00      	nop
 8006a1a:	370c      	adds	r7, #12
 8006a1c:	46bd      	mov	sp, r7
 8006a1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a22:	4770      	bx	lr

08006a24 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8006a24:	b580      	push	{r7, lr}
 8006a26:	b086      	sub	sp, #24
 8006a28:	af02      	add	r7, sp, #8
 8006a2a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006a2c:	687b      	ldr	r3, [r7, #4]
 8006a2e:	2200      	movs	r2, #0
 8006a30:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8006a34:	f7fa fcd6 	bl	80013e4 <HAL_GetTick>
 8006a38:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8006a3a:	687b      	ldr	r3, [r7, #4]
 8006a3c:	681b      	ldr	r3, [r3, #0]
 8006a3e:	681b      	ldr	r3, [r3, #0]
 8006a40:	f003 0308 	and.w	r3, r3, #8
 8006a44:	2b08      	cmp	r3, #8
 8006a46:	d10e      	bne.n	8006a66 <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8006a48:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8006a4c:	9300      	str	r3, [sp, #0]
 8006a4e:	68fb      	ldr	r3, [r7, #12]
 8006a50:	2200      	movs	r2, #0
 8006a52:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8006a56:	6878      	ldr	r0, [r7, #4]
 8006a58:	f000 f82f 	bl	8006aba <UART_WaitOnFlagUntilTimeout>
 8006a5c:	4603      	mov	r3, r0
 8006a5e:	2b00      	cmp	r3, #0
 8006a60:	d001      	beq.n	8006a66 <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8006a62:	2303      	movs	r3, #3
 8006a64:	e025      	b.n	8006ab2 <UART_CheckIdleState+0x8e>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8006a66:	687b      	ldr	r3, [r7, #4]
 8006a68:	681b      	ldr	r3, [r3, #0]
 8006a6a:	681b      	ldr	r3, [r3, #0]
 8006a6c:	f003 0304 	and.w	r3, r3, #4
 8006a70:	2b04      	cmp	r3, #4
 8006a72:	d10e      	bne.n	8006a92 <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8006a74:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8006a78:	9300      	str	r3, [sp, #0]
 8006a7a:	68fb      	ldr	r3, [r7, #12]
 8006a7c:	2200      	movs	r2, #0
 8006a7e:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8006a82:	6878      	ldr	r0, [r7, #4]
 8006a84:	f000 f819 	bl	8006aba <UART_WaitOnFlagUntilTimeout>
 8006a88:	4603      	mov	r3, r0
 8006a8a:	2b00      	cmp	r3, #0
 8006a8c:	d001      	beq.n	8006a92 <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8006a8e:	2303      	movs	r3, #3
 8006a90:	e00f      	b.n	8006ab2 <UART_CheckIdleState+0x8e>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8006a92:	687b      	ldr	r3, [r7, #4]
 8006a94:	2220      	movs	r2, #32
 8006a96:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  huart->RxState = HAL_UART_STATE_READY;
 8006a9a:	687b      	ldr	r3, [r7, #4]
 8006a9c:	2220      	movs	r2, #32
 8006a9e:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006aa2:	687b      	ldr	r3, [r7, #4]
 8006aa4:	2200      	movs	r2, #0
 8006aa6:	66da      	str	r2, [r3, #108]	; 0x6c

  __HAL_UNLOCK(huart);
 8006aa8:	687b      	ldr	r3, [r7, #4]
 8006aaa:	2200      	movs	r2, #0
 8006aac:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 8006ab0:	2300      	movs	r3, #0
}
 8006ab2:	4618      	mov	r0, r3
 8006ab4:	3710      	adds	r7, #16
 8006ab6:	46bd      	mov	sp, r7
 8006ab8:	bd80      	pop	{r7, pc}

08006aba <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8006aba:	b580      	push	{r7, lr}
 8006abc:	b084      	sub	sp, #16
 8006abe:	af00      	add	r7, sp, #0
 8006ac0:	60f8      	str	r0, [r7, #12]
 8006ac2:	60b9      	str	r1, [r7, #8]
 8006ac4:	603b      	str	r3, [r7, #0]
 8006ac6:	4613      	mov	r3, r2
 8006ac8:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8006aca:	e062      	b.n	8006b92 <UART_WaitOnFlagUntilTimeout+0xd8>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8006acc:	69bb      	ldr	r3, [r7, #24]
 8006ace:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006ad2:	d05e      	beq.n	8006b92 <UART_WaitOnFlagUntilTimeout+0xd8>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8006ad4:	f7fa fc86 	bl	80013e4 <HAL_GetTick>
 8006ad8:	4602      	mov	r2, r0
 8006ada:	683b      	ldr	r3, [r7, #0]
 8006adc:	1ad3      	subs	r3, r2, r3
 8006ade:	69ba      	ldr	r2, [r7, #24]
 8006ae0:	429a      	cmp	r2, r3
 8006ae2:	d302      	bcc.n	8006aea <UART_WaitOnFlagUntilTimeout+0x30>
 8006ae4:	69bb      	ldr	r3, [r7, #24]
 8006ae6:	2b00      	cmp	r3, #0
 8006ae8:	d11d      	bne.n	8006b26 <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
 8006aea:	68fb      	ldr	r3, [r7, #12]
 8006aec:	681b      	ldr	r3, [r3, #0]
 8006aee:	681a      	ldr	r2, [r3, #0]
 8006af0:	68fb      	ldr	r3, [r7, #12]
 8006af2:	681b      	ldr	r3, [r3, #0]
 8006af4:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8006af8:	601a      	str	r2, [r3, #0]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006afa:	68fb      	ldr	r3, [r7, #12]
 8006afc:	681b      	ldr	r3, [r3, #0]
 8006afe:	689a      	ldr	r2, [r3, #8]
 8006b00:	68fb      	ldr	r3, [r7, #12]
 8006b02:	681b      	ldr	r3, [r3, #0]
 8006b04:	f022 0201 	bic.w	r2, r2, #1
 8006b08:	609a      	str	r2, [r3, #8]

        huart->gState = HAL_UART_STATE_READY;
 8006b0a:	68fb      	ldr	r3, [r7, #12]
 8006b0c:	2220      	movs	r2, #32
 8006b0e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
        huart->RxState = HAL_UART_STATE_READY;
 8006b12:	68fb      	ldr	r3, [r7, #12]
 8006b14:	2220      	movs	r2, #32
 8006b16:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

        __HAL_UNLOCK(huart);
 8006b1a:	68fb      	ldr	r3, [r7, #12]
 8006b1c:	2200      	movs	r2, #0
 8006b1e:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

        return HAL_TIMEOUT;
 8006b22:	2303      	movs	r3, #3
 8006b24:	e045      	b.n	8006bb2 <UART_WaitOnFlagUntilTimeout+0xf8>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8006b26:	68fb      	ldr	r3, [r7, #12]
 8006b28:	681b      	ldr	r3, [r3, #0]
 8006b2a:	681b      	ldr	r3, [r3, #0]
 8006b2c:	f003 0304 	and.w	r3, r3, #4
 8006b30:	2b00      	cmp	r3, #0
 8006b32:	d02e      	beq.n	8006b92 <UART_WaitOnFlagUntilTimeout+0xd8>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8006b34:	68fb      	ldr	r3, [r7, #12]
 8006b36:	681b      	ldr	r3, [r3, #0]
 8006b38:	69db      	ldr	r3, [r3, #28]
 8006b3a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8006b3e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8006b42:	d126      	bne.n	8006b92 <UART_WaitOnFlagUntilTimeout+0xd8>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8006b44:	68fb      	ldr	r3, [r7, #12]
 8006b46:	681b      	ldr	r3, [r3, #0]
 8006b48:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8006b4c:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
 8006b4e:	68fb      	ldr	r3, [r7, #12]
 8006b50:	681b      	ldr	r3, [r3, #0]
 8006b52:	681a      	ldr	r2, [r3, #0]
 8006b54:	68fb      	ldr	r3, [r7, #12]
 8006b56:	681b      	ldr	r3, [r3, #0]
 8006b58:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8006b5c:	601a      	str	r2, [r3, #0]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006b5e:	68fb      	ldr	r3, [r7, #12]
 8006b60:	681b      	ldr	r3, [r3, #0]
 8006b62:	689a      	ldr	r2, [r3, #8]
 8006b64:	68fb      	ldr	r3, [r7, #12]
 8006b66:	681b      	ldr	r3, [r3, #0]
 8006b68:	f022 0201 	bic.w	r2, r2, #1
 8006b6c:	609a      	str	r2, [r3, #8]

          huart->gState = HAL_UART_STATE_READY;
 8006b6e:	68fb      	ldr	r3, [r7, #12]
 8006b70:	2220      	movs	r2, #32
 8006b72:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          huart->RxState = HAL_UART_STATE_READY;
 8006b76:	68fb      	ldr	r3, [r7, #12]
 8006b78:	2220      	movs	r2, #32
 8006b7a:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8006b7e:	68fb      	ldr	r3, [r7, #12]
 8006b80:	2220      	movs	r2, #32
 8006b82:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8006b86:	68fb      	ldr	r3, [r7, #12]
 8006b88:	2200      	movs	r2, #0
 8006b8a:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

          return HAL_TIMEOUT;
 8006b8e:	2303      	movs	r3, #3
 8006b90:	e00f      	b.n	8006bb2 <UART_WaitOnFlagUntilTimeout+0xf8>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8006b92:	68fb      	ldr	r3, [r7, #12]
 8006b94:	681b      	ldr	r3, [r3, #0]
 8006b96:	69da      	ldr	r2, [r3, #28]
 8006b98:	68bb      	ldr	r3, [r7, #8]
 8006b9a:	4013      	ands	r3, r2
 8006b9c:	68ba      	ldr	r2, [r7, #8]
 8006b9e:	429a      	cmp	r2, r3
 8006ba0:	bf0c      	ite	eq
 8006ba2:	2301      	moveq	r3, #1
 8006ba4:	2300      	movne	r3, #0
 8006ba6:	b2db      	uxtb	r3, r3
 8006ba8:	461a      	mov	r2, r3
 8006baa:	79fb      	ldrb	r3, [r7, #7]
 8006bac:	429a      	cmp	r2, r3
 8006bae:	d08d      	beq.n	8006acc <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8006bb0:	2300      	movs	r3, #0
}
 8006bb2:	4618      	mov	r0, r3
 8006bb4:	3710      	adds	r7, #16
 8006bb6:	46bd      	mov	sp, r7
 8006bb8:	bd80      	pop	{r7, pc}
	...

08006bbc <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8006bbc:	b480      	push	{r7}
 8006bbe:	b083      	sub	sp, #12
 8006bc0:	af00      	add	r7, sp, #0
 8006bc2:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8006bc4:	687b      	ldr	r3, [r7, #4]
 8006bc6:	681b      	ldr	r3, [r3, #0]
 8006bc8:	681a      	ldr	r2, [r3, #0]
 8006bca:	687b      	ldr	r3, [r7, #4]
 8006bcc:	681b      	ldr	r3, [r3, #0]
 8006bce:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 8006bd2:	601a      	str	r2, [r3, #0]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8006bd4:	687b      	ldr	r3, [r7, #4]
 8006bd6:	681b      	ldr	r3, [r3, #0]
 8006bd8:	6899      	ldr	r1, [r3, #8]
 8006bda:	687b      	ldr	r3, [r7, #4]
 8006bdc:	681a      	ldr	r2, [r3, #0]
 8006bde:	4b0f      	ldr	r3, [pc, #60]	; (8006c1c <UART_EndRxTransfer+0x60>)
 8006be0:	400b      	ands	r3, r1
 8006be2:	6093      	str	r3, [r2, #8]

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006be4:	687b      	ldr	r3, [r7, #4]
 8006be6:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8006be8:	2b01      	cmp	r3, #1
 8006bea:	d107      	bne.n	8006bfc <UART_EndRxTransfer+0x40>
  {
    CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006bec:	687b      	ldr	r3, [r7, #4]
 8006bee:	681b      	ldr	r3, [r3, #0]
 8006bf0:	681a      	ldr	r2, [r3, #0]
 8006bf2:	687b      	ldr	r3, [r7, #4]
 8006bf4:	681b      	ldr	r3, [r3, #0]
 8006bf6:	f022 0210 	bic.w	r2, r2, #16
 8006bfa:	601a      	str	r2, [r3, #0]
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8006bfc:	687b      	ldr	r3, [r7, #4]
 8006bfe:	2220      	movs	r2, #32
 8006c00:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006c04:	687b      	ldr	r3, [r7, #4]
 8006c06:	2200      	movs	r2, #0
 8006c08:	66da      	str	r2, [r3, #108]	; 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8006c0a:	687b      	ldr	r3, [r7, #4]
 8006c0c:	2200      	movs	r2, #0
 8006c0e:	671a      	str	r2, [r3, #112]	; 0x70
}
 8006c10:	bf00      	nop
 8006c12:	370c      	adds	r7, #12
 8006c14:	46bd      	mov	sp, r7
 8006c16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c1a:	4770      	bx	lr
 8006c1c:	effffffe 	.word	0xeffffffe

08006c20 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8006c20:	b580      	push	{r7, lr}
 8006c22:	b084      	sub	sp, #16
 8006c24:	af00      	add	r7, sp, #0
 8006c26:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8006c28:	687b      	ldr	r3, [r7, #4]
 8006c2a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006c2c:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 8006c2e:	68fb      	ldr	r3, [r7, #12]
 8006c30:	2200      	movs	r2, #0
 8006c32:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
  huart->TxXferCount = 0U;
 8006c36:	68fb      	ldr	r3, [r7, #12]
 8006c38:	2200      	movs	r2, #0
 8006c3a:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8006c3e:	68f8      	ldr	r0, [r7, #12]
 8006c40:	f7fe ffda 	bl	8005bf8 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8006c44:	bf00      	nop
 8006c46:	3710      	adds	r7, #16
 8006c48:	46bd      	mov	sp, r7
 8006c4a:	bd80      	pop	{r7, pc}

08006c4c <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8006c4c:	b580      	push	{r7, lr}
 8006c4e:	b082      	sub	sp, #8
 8006c50:	af00      	add	r7, sp, #0
 8006c52:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8006c54:	687b      	ldr	r3, [r7, #4]
 8006c56:	681b      	ldr	r3, [r3, #0]
 8006c58:	681a      	ldr	r2, [r3, #0]
 8006c5a:	687b      	ldr	r3, [r7, #4]
 8006c5c:	681b      	ldr	r3, [r3, #0]
 8006c5e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8006c62:	601a      	str	r2, [r3, #0]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8006c64:	687b      	ldr	r3, [r7, #4]
 8006c66:	2220      	movs	r2, #32
 8006c68:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 8006c6c:	687b      	ldr	r3, [r7, #4]
 8006c6e:	2200      	movs	r2, #0
 8006c70:	675a      	str	r2, [r3, #116]	; 0x74
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8006c72:	6878      	ldr	r0, [r7, #4]
 8006c74:	f7fe ffb6 	bl	8005be4 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8006c78:	bf00      	nop
 8006c7a:	3708      	adds	r7, #8
 8006c7c:	46bd      	mov	sp, r7
 8006c7e:	bd80      	pop	{r7, pc}

08006c80 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 8006c80:	b480      	push	{r7}
 8006c82:	b083      	sub	sp, #12
 8006c84:	af00      	add	r7, sp, #0
 8006c86:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 8006c88:	bf00      	nop
 8006c8a:	370c      	adds	r7, #12
 8006c8c:	46bd      	mov	sp, r7
 8006c8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c92:	4770      	bx	lr

08006c94 <HAL_UARTEx_RxFifoFullCallback>:
  * @brief  UART RX Fifo full callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_RxFifoFullCallback(UART_HandleTypeDef *huart)
{
 8006c94:	b480      	push	{r7}
 8006c96:	b083      	sub	sp, #12
 8006c98:	af00      	add	r7, sp, #0
 8006c9a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxFifoFullCallback can be implemented in the user file.
   */
}
 8006c9c:	bf00      	nop
 8006c9e:	370c      	adds	r7, #12
 8006ca0:	46bd      	mov	sp, r7
 8006ca2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ca6:	4770      	bx	lr

08006ca8 <HAL_UARTEx_TxFifoEmptyCallback>:
  * @brief  UART TX Fifo empty callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_TxFifoEmptyCallback(UART_HandleTypeDef *huart)
{
 8006ca8:	b480      	push	{r7}
 8006caa:	b083      	sub	sp, #12
 8006cac:	af00      	add	r7, sp, #0
 8006cae:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_TxFifoEmptyCallback can be implemented in the user file.
   */
}
 8006cb0:	bf00      	nop
 8006cb2:	370c      	adds	r7, #12
 8006cb4:	46bd      	mov	sp, r7
 8006cb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006cba:	4770      	bx	lr

08006cbc <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 8006cbc:	b480      	push	{r7}
 8006cbe:	b085      	sub	sp, #20
 8006cc0:	af00      	add	r7, sp, #0
 8006cc2:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 8006cc4:	687b      	ldr	r3, [r7, #4]
 8006cc6:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8006cca:	2b01      	cmp	r3, #1
 8006ccc:	d101      	bne.n	8006cd2 <HAL_UARTEx_DisableFifoMode+0x16>
 8006cce:	2302      	movs	r3, #2
 8006cd0:	e027      	b.n	8006d22 <HAL_UARTEx_DisableFifoMode+0x66>
 8006cd2:	687b      	ldr	r3, [r7, #4]
 8006cd4:	2201      	movs	r2, #1
 8006cd6:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 8006cda:	687b      	ldr	r3, [r7, #4]
 8006cdc:	2224      	movs	r2, #36	; 0x24
 8006cde:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8006ce2:	687b      	ldr	r3, [r7, #4]
 8006ce4:	681b      	ldr	r3, [r3, #0]
 8006ce6:	681b      	ldr	r3, [r3, #0]
 8006ce8:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8006cea:	687b      	ldr	r3, [r7, #4]
 8006cec:	681b      	ldr	r3, [r3, #0]
 8006cee:	681a      	ldr	r2, [r3, #0]
 8006cf0:	687b      	ldr	r3, [r7, #4]
 8006cf2:	681b      	ldr	r3, [r3, #0]
 8006cf4:	f022 0201 	bic.w	r2, r2, #1
 8006cf8:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 8006cfa:	68fb      	ldr	r3, [r7, #12]
 8006cfc:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 8006d00:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 8006d02:	687b      	ldr	r3, [r7, #4]
 8006d04:	2200      	movs	r2, #0
 8006d06:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8006d08:	687b      	ldr	r3, [r7, #4]
 8006d0a:	681b      	ldr	r3, [r3, #0]
 8006d0c:	68fa      	ldr	r2, [r7, #12]
 8006d0e:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8006d10:	687b      	ldr	r3, [r7, #4]
 8006d12:	2220      	movs	r2, #32
 8006d14:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8006d18:	687b      	ldr	r3, [r7, #4]
 8006d1a:	2200      	movs	r2, #0
 8006d1c:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 8006d20:	2300      	movs	r3, #0
}
 8006d22:	4618      	mov	r0, r3
 8006d24:	3714      	adds	r7, #20
 8006d26:	46bd      	mov	sp, r7
 8006d28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d2c:	4770      	bx	lr

08006d2e <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8006d2e:	b580      	push	{r7, lr}
 8006d30:	b084      	sub	sp, #16
 8006d32:	af00      	add	r7, sp, #0
 8006d34:	6078      	str	r0, [r7, #4]
 8006d36:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8006d38:	687b      	ldr	r3, [r7, #4]
 8006d3a:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8006d3e:	2b01      	cmp	r3, #1
 8006d40:	d101      	bne.n	8006d46 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 8006d42:	2302      	movs	r3, #2
 8006d44:	e02d      	b.n	8006da2 <HAL_UARTEx_SetTxFifoThreshold+0x74>
 8006d46:	687b      	ldr	r3, [r7, #4]
 8006d48:	2201      	movs	r2, #1
 8006d4a:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 8006d4e:	687b      	ldr	r3, [r7, #4]
 8006d50:	2224      	movs	r2, #36	; 0x24
 8006d52:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8006d56:	687b      	ldr	r3, [r7, #4]
 8006d58:	681b      	ldr	r3, [r3, #0]
 8006d5a:	681b      	ldr	r3, [r3, #0]
 8006d5c:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8006d5e:	687b      	ldr	r3, [r7, #4]
 8006d60:	681b      	ldr	r3, [r3, #0]
 8006d62:	681a      	ldr	r2, [r3, #0]
 8006d64:	687b      	ldr	r3, [r7, #4]
 8006d66:	681b      	ldr	r3, [r3, #0]
 8006d68:	f022 0201 	bic.w	r2, r2, #1
 8006d6c:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 8006d6e:	687b      	ldr	r3, [r7, #4]
 8006d70:	681b      	ldr	r3, [r3, #0]
 8006d72:	689b      	ldr	r3, [r3, #8]
 8006d74:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 8006d78:	687b      	ldr	r3, [r7, #4]
 8006d7a:	681b      	ldr	r3, [r3, #0]
 8006d7c:	683a      	ldr	r2, [r7, #0]
 8006d7e:	430a      	orrs	r2, r1
 8006d80:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8006d82:	6878      	ldr	r0, [r7, #4]
 8006d84:	f000 f850 	bl	8006e28 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8006d88:	687b      	ldr	r3, [r7, #4]
 8006d8a:	681b      	ldr	r3, [r3, #0]
 8006d8c:	68fa      	ldr	r2, [r7, #12]
 8006d8e:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8006d90:	687b      	ldr	r3, [r7, #4]
 8006d92:	2220      	movs	r2, #32
 8006d94:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8006d98:	687b      	ldr	r3, [r7, #4]
 8006d9a:	2200      	movs	r2, #0
 8006d9c:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 8006da0:	2300      	movs	r3, #0
}
 8006da2:	4618      	mov	r0, r3
 8006da4:	3710      	adds	r7, #16
 8006da6:	46bd      	mov	sp, r7
 8006da8:	bd80      	pop	{r7, pc}

08006daa <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8006daa:	b580      	push	{r7, lr}
 8006dac:	b084      	sub	sp, #16
 8006dae:	af00      	add	r7, sp, #0
 8006db0:	6078      	str	r0, [r7, #4]
 8006db2:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8006db4:	687b      	ldr	r3, [r7, #4]
 8006db6:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8006dba:	2b01      	cmp	r3, #1
 8006dbc:	d101      	bne.n	8006dc2 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 8006dbe:	2302      	movs	r3, #2
 8006dc0:	e02d      	b.n	8006e1e <HAL_UARTEx_SetRxFifoThreshold+0x74>
 8006dc2:	687b      	ldr	r3, [r7, #4]
 8006dc4:	2201      	movs	r2, #1
 8006dc6:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 8006dca:	687b      	ldr	r3, [r7, #4]
 8006dcc:	2224      	movs	r2, #36	; 0x24
 8006dce:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8006dd2:	687b      	ldr	r3, [r7, #4]
 8006dd4:	681b      	ldr	r3, [r3, #0]
 8006dd6:	681b      	ldr	r3, [r3, #0]
 8006dd8:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8006dda:	687b      	ldr	r3, [r7, #4]
 8006ddc:	681b      	ldr	r3, [r3, #0]
 8006dde:	681a      	ldr	r2, [r3, #0]
 8006de0:	687b      	ldr	r3, [r7, #4]
 8006de2:	681b      	ldr	r3, [r3, #0]
 8006de4:	f022 0201 	bic.w	r2, r2, #1
 8006de8:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 8006dea:	687b      	ldr	r3, [r7, #4]
 8006dec:	681b      	ldr	r3, [r3, #0]
 8006dee:	689b      	ldr	r3, [r3, #8]
 8006df0:	f023 6160 	bic.w	r1, r3, #234881024	; 0xe000000
 8006df4:	687b      	ldr	r3, [r7, #4]
 8006df6:	681b      	ldr	r3, [r3, #0]
 8006df8:	683a      	ldr	r2, [r7, #0]
 8006dfa:	430a      	orrs	r2, r1
 8006dfc:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8006dfe:	6878      	ldr	r0, [r7, #4]
 8006e00:	f000 f812 	bl	8006e28 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8006e04:	687b      	ldr	r3, [r7, #4]
 8006e06:	681b      	ldr	r3, [r3, #0]
 8006e08:	68fa      	ldr	r2, [r7, #12]
 8006e0a:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8006e0c:	687b      	ldr	r3, [r7, #4]
 8006e0e:	2220      	movs	r2, #32
 8006e10:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8006e14:	687b      	ldr	r3, [r7, #4]
 8006e16:	2200      	movs	r2, #0
 8006e18:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 8006e1c:	2300      	movs	r3, #0
}
 8006e1e:	4618      	mov	r0, r3
 8006e20:	3710      	adds	r7, #16
 8006e22:	46bd      	mov	sp, r7
 8006e24:	bd80      	pop	{r7, pc}
	...

08006e28 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 8006e28:	b480      	push	{r7}
 8006e2a:	b085      	sub	sp, #20
 8006e2c:	af00      	add	r7, sp, #0
 8006e2e:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 8006e30:	687b      	ldr	r3, [r7, #4]
 8006e32:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8006e34:	2b00      	cmp	r3, #0
 8006e36:	d108      	bne.n	8006e4a <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 8006e38:	687b      	ldr	r3, [r7, #4]
 8006e3a:	2201      	movs	r2, #1
 8006e3c:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
 8006e40:	687b      	ldr	r3, [r7, #4]
 8006e42:	2201      	movs	r2, #1
 8006e44:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 8006e48:	e031      	b.n	8006eae <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 8006e4a:	2310      	movs	r3, #16
 8006e4c:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 8006e4e:	2310      	movs	r3, #16
 8006e50:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 8006e52:	687b      	ldr	r3, [r7, #4]
 8006e54:	681b      	ldr	r3, [r3, #0]
 8006e56:	689b      	ldr	r3, [r3, #8]
 8006e58:	0e5b      	lsrs	r3, r3, #25
 8006e5a:	b2db      	uxtb	r3, r3
 8006e5c:	f003 0307 	and.w	r3, r3, #7
 8006e60:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 8006e62:	687b      	ldr	r3, [r7, #4]
 8006e64:	681b      	ldr	r3, [r3, #0]
 8006e66:	689b      	ldr	r3, [r3, #8]
 8006e68:	0f5b      	lsrs	r3, r3, #29
 8006e6a:	b2db      	uxtb	r3, r3
 8006e6c:	f003 0307 	and.w	r3, r3, #7
 8006e70:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8006e72:	7bbb      	ldrb	r3, [r7, #14]
 8006e74:	7b3a      	ldrb	r2, [r7, #12]
 8006e76:	4911      	ldr	r1, [pc, #68]	; (8006ebc <UARTEx_SetNbDataToProcess+0x94>)
 8006e78:	5c8a      	ldrb	r2, [r1, r2]
 8006e7a:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 8006e7e:	7b3a      	ldrb	r2, [r7, #12]
 8006e80:	490f      	ldr	r1, [pc, #60]	; (8006ec0 <UARTEx_SetNbDataToProcess+0x98>)
 8006e82:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8006e84:	fb93 f3f2 	sdiv	r3, r3, r2
 8006e88:	b29a      	uxth	r2, r3
 8006e8a:	687b      	ldr	r3, [r7, #4]
 8006e8c:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8006e90:	7bfb      	ldrb	r3, [r7, #15]
 8006e92:	7b7a      	ldrb	r2, [r7, #13]
 8006e94:	4909      	ldr	r1, [pc, #36]	; (8006ebc <UARTEx_SetNbDataToProcess+0x94>)
 8006e96:	5c8a      	ldrb	r2, [r1, r2]
 8006e98:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 8006e9c:	7b7a      	ldrb	r2, [r7, #13]
 8006e9e:	4908      	ldr	r1, [pc, #32]	; (8006ec0 <UARTEx_SetNbDataToProcess+0x98>)
 8006ea0:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8006ea2:	fb93 f3f2 	sdiv	r3, r3, r2
 8006ea6:	b29a      	uxth	r2, r3
 8006ea8:	687b      	ldr	r3, [r7, #4]
 8006eaa:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
}
 8006eae:	bf00      	nop
 8006eb0:	3714      	adds	r7, #20
 8006eb2:	46bd      	mov	sp, r7
 8006eb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006eb8:	4770      	bx	lr
 8006eba:	bf00      	nop
 8006ebc:	0800718c 	.word	0x0800718c
 8006ec0:	08007194 	.word	0x08007194

08006ec4 <FMC_NORSRAM_Init>:
  * @param  Init Pointer to NORSRAM Initialization structure
  * @retval HAL status
  */
HAL_StatusTypeDef  FMC_NORSRAM_Init(FMC_NORSRAM_TypeDef *Device,
                                    FMC_NORSRAM_InitTypeDef *Init)
{
 8006ec4:	b480      	push	{r7}
 8006ec6:	b087      	sub	sp, #28
 8006ec8:	af00      	add	r7, sp, #0
 8006eca:	6078      	str	r0, [r7, #4]
 8006ecc:	6039      	str	r1, [r7, #0]
  assert_param(IS_FMC_CONTINOUS_CLOCK(Init->ContinuousClock));
  assert_param(IS_FMC_WRITE_FIFO(Init->WriteFifo));
  assert_param(IS_FMC_PAGESIZE(Init->PageSize));

  /* Disable NORSRAM Device */
  __FMC_NORSRAM_DISABLE(Device, Init->NSBank);
 8006ece:	683b      	ldr	r3, [r7, #0]
 8006ed0:	681a      	ldr	r2, [r3, #0]
 8006ed2:	687b      	ldr	r3, [r7, #4]
 8006ed4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006ed8:	683a      	ldr	r2, [r7, #0]
 8006eda:	6812      	ldr	r2, [r2, #0]
 8006edc:	f023 0101 	bic.w	r1, r3, #1
 8006ee0:	687b      	ldr	r3, [r7, #4]
 8006ee2:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

  /* Set NORSRAM device control parameters */
  if (Init->MemoryType == FMC_MEMORY_TYPE_NOR)
 8006ee6:	683b      	ldr	r3, [r7, #0]
 8006ee8:	689b      	ldr	r3, [r3, #8]
 8006eea:	2b08      	cmp	r3, #8
 8006eec:	d102      	bne.n	8006ef4 <FMC_NORSRAM_Init+0x30>
  {
    flashaccess = FMC_NORSRAM_FLASH_ACCESS_ENABLE;
 8006eee:	2340      	movs	r3, #64	; 0x40
 8006ef0:	617b      	str	r3, [r7, #20]
 8006ef2:	e001      	b.n	8006ef8 <FMC_NORSRAM_Init+0x34>
  }
  else
  {
    flashaccess = FMC_NORSRAM_FLASH_ACCESS_DISABLE;
 8006ef4:	2300      	movs	r3, #0
 8006ef6:	617b      	str	r3, [r7, #20]
  }

  btcr_reg = (flashaccess                   | \
              Init->DataAddressMux          | \
 8006ef8:	683b      	ldr	r3, [r7, #0]
 8006efa:	685a      	ldr	r2, [r3, #4]
  btcr_reg = (flashaccess                   | \
 8006efc:	697b      	ldr	r3, [r7, #20]
 8006efe:	431a      	orrs	r2, r3
              Init->MemoryType              | \
 8006f00:	683b      	ldr	r3, [r7, #0]
 8006f02:	689b      	ldr	r3, [r3, #8]
              Init->DataAddressMux          | \
 8006f04:	431a      	orrs	r2, r3
              Init->MemoryDataWidth         | \
 8006f06:	683b      	ldr	r3, [r7, #0]
 8006f08:	68db      	ldr	r3, [r3, #12]
              Init->MemoryType              | \
 8006f0a:	431a      	orrs	r2, r3
              Init->BurstAccessMode         | \
 8006f0c:	683b      	ldr	r3, [r7, #0]
 8006f0e:	691b      	ldr	r3, [r3, #16]
              Init->MemoryDataWidth         | \
 8006f10:	431a      	orrs	r2, r3
              Init->WaitSignalPolarity      | \
 8006f12:	683b      	ldr	r3, [r7, #0]
 8006f14:	695b      	ldr	r3, [r3, #20]
              Init->BurstAccessMode         | \
 8006f16:	431a      	orrs	r2, r3
              Init->WaitSignalActive        | \
 8006f18:	683b      	ldr	r3, [r7, #0]
 8006f1a:	699b      	ldr	r3, [r3, #24]
              Init->WaitSignalPolarity      | \
 8006f1c:	431a      	orrs	r2, r3
              Init->WriteOperation          | \
 8006f1e:	683b      	ldr	r3, [r7, #0]
 8006f20:	69db      	ldr	r3, [r3, #28]
              Init->WaitSignalActive        | \
 8006f22:	431a      	orrs	r2, r3
              Init->WaitSignal              | \
 8006f24:	683b      	ldr	r3, [r7, #0]
 8006f26:	6a1b      	ldr	r3, [r3, #32]
              Init->WriteOperation          | \
 8006f28:	431a      	orrs	r2, r3
              Init->ExtendedMode            | \
 8006f2a:	683b      	ldr	r3, [r7, #0]
 8006f2c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
              Init->WaitSignal              | \
 8006f2e:	431a      	orrs	r2, r3
              Init->AsynchronousWait        | \
 8006f30:	683b      	ldr	r3, [r7, #0]
 8006f32:	6a9b      	ldr	r3, [r3, #40]	; 0x28
              Init->ExtendedMode            | \
 8006f34:	431a      	orrs	r2, r3
              Init->WriteBurst);
 8006f36:	683b      	ldr	r3, [r7, #0]
 8006f38:	6adb      	ldr	r3, [r3, #44]	; 0x2c
  btcr_reg = (flashaccess                   | \
 8006f3a:	4313      	orrs	r3, r2
 8006f3c:	613b      	str	r3, [r7, #16]

  btcr_reg |= Init->ContinuousClock;
 8006f3e:	683b      	ldr	r3, [r7, #0]
 8006f40:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006f42:	693a      	ldr	r2, [r7, #16]
 8006f44:	4313      	orrs	r3, r2
 8006f46:	613b      	str	r3, [r7, #16]
  btcr_reg |= Init->WriteFifo;
 8006f48:	683b      	ldr	r3, [r7, #0]
 8006f4a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006f4c:	693a      	ldr	r2, [r7, #16]
 8006f4e:	4313      	orrs	r3, r2
 8006f50:	613b      	str	r3, [r7, #16]
  btcr_reg |= Init->PageSize;
 8006f52:	683b      	ldr	r3, [r7, #0]
 8006f54:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006f56:	693a      	ldr	r2, [r7, #16]
 8006f58:	4313      	orrs	r3, r2
 8006f5a:	613b      	str	r3, [r7, #16]

  mask = (FMC_BCRx_MBKEN                |
 8006f5c:	4b20      	ldr	r3, [pc, #128]	; (8006fe0 <FMC_NORSRAM_Init+0x11c>)
 8006f5e:	60fb      	str	r3, [r7, #12]
          FMC_BCRx_WAITEN               |
          FMC_BCRx_EXTMOD               |
          FMC_BCRx_ASYNCWAIT            |
          FMC_BCRx_CBURSTRW);

  mask |= FMC_BCR1_CCLKEN;
 8006f60:	68fb      	ldr	r3, [r7, #12]
 8006f62:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8006f66:	60fb      	str	r3, [r7, #12]
  mask |= FMC_BCR1_WFDIS;
 8006f68:	68fb      	ldr	r3, [r7, #12]
 8006f6a:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8006f6e:	60fb      	str	r3, [r7, #12]
  mask |= FMC_BCRx_CPSIZE;
 8006f70:	68fb      	ldr	r3, [r7, #12]
 8006f72:	f443 23e0 	orr.w	r3, r3, #458752	; 0x70000
 8006f76:	60fb      	str	r3, [r7, #12]

  MODIFY_REG(Device->BTCR[Init->NSBank], mask, btcr_reg);
 8006f78:	683b      	ldr	r3, [r7, #0]
 8006f7a:	681a      	ldr	r2, [r3, #0]
 8006f7c:	687b      	ldr	r3, [r7, #4]
 8006f7e:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8006f82:	68fb      	ldr	r3, [r7, #12]
 8006f84:	43db      	mvns	r3, r3
 8006f86:	ea02 0103 	and.w	r1, r2, r3
 8006f8a:	683b      	ldr	r3, [r7, #0]
 8006f8c:	681a      	ldr	r2, [r3, #0]
 8006f8e:	693b      	ldr	r3, [r7, #16]
 8006f90:	4319      	orrs	r1, r3
 8006f92:	687b      	ldr	r3, [r7, #4]
 8006f94:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

  /* Configure synchronous mode when Continuous clock is enabled for bank2..4 */
  if ((Init->ContinuousClock == FMC_CONTINUOUS_CLOCK_SYNC_ASYNC) && (Init->NSBank != FMC_NORSRAM_BANK1))
 8006f98:	683b      	ldr	r3, [r7, #0]
 8006f9a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006f9c:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8006fa0:	d10c      	bne.n	8006fbc <FMC_NORSRAM_Init+0xf8>
 8006fa2:	683b      	ldr	r3, [r7, #0]
 8006fa4:	681b      	ldr	r3, [r3, #0]
 8006fa6:	2b00      	cmp	r3, #0
 8006fa8:	d008      	beq.n	8006fbc <FMC_NORSRAM_Init+0xf8>
  {
    MODIFY_REG(Device->BTCR[FMC_NORSRAM_BANK1], FMC_BCR1_CCLKEN, Init->ContinuousClock);
 8006faa:	687b      	ldr	r3, [r7, #4]
 8006fac:	681b      	ldr	r3, [r3, #0]
 8006fae:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 8006fb2:	683b      	ldr	r3, [r7, #0]
 8006fb4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006fb6:	431a      	orrs	r2, r3
 8006fb8:	687b      	ldr	r3, [r7, #4]
 8006fba:	601a      	str	r2, [r3, #0]
  }

  if (Init->NSBank != FMC_NORSRAM_BANK1)
 8006fbc:	683b      	ldr	r3, [r7, #0]
 8006fbe:	681b      	ldr	r3, [r3, #0]
 8006fc0:	2b00      	cmp	r3, #0
 8006fc2:	d006      	beq.n	8006fd2 <FMC_NORSRAM_Init+0x10e>
  {
    /* Configure Write FIFO mode when Write Fifo is enabled for bank2..4 */
    SET_BIT(Device->BTCR[FMC_NORSRAM_BANK1], (uint32_t)(Init->WriteFifo));
 8006fc4:	687b      	ldr	r3, [r7, #4]
 8006fc6:	681a      	ldr	r2, [r3, #0]
 8006fc8:	683b      	ldr	r3, [r7, #0]
 8006fca:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006fcc:	431a      	orrs	r2, r3
 8006fce:	687b      	ldr	r3, [r7, #4]
 8006fd0:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8006fd2:	2300      	movs	r3, #0
}
 8006fd4:	4618      	mov	r0, r3
 8006fd6:	371c      	adds	r7, #28
 8006fd8:	46bd      	mov	sp, r7
 8006fda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006fde:	4770      	bx	lr
 8006fe0:	0008fb7f 	.word	0x0008fb7f

08006fe4 <FMC_NORSRAM_Timing_Init>:
  * @param  Bank NORSRAM bank number
  * @retval HAL status
  */
HAL_StatusTypeDef FMC_NORSRAM_Timing_Init(FMC_NORSRAM_TypeDef *Device,
                                          FMC_NORSRAM_TimingTypeDef *Timing, uint32_t Bank)
{
 8006fe4:	b480      	push	{r7}
 8006fe6:	b087      	sub	sp, #28
 8006fe8:	af00      	add	r7, sp, #0
 8006fea:	60f8      	str	r0, [r7, #12]
 8006fec:	60b9      	str	r1, [r7, #8]
 8006fee:	607a      	str	r2, [r7, #4]
  assert_param(IS_FMC_DATA_LATENCY(Timing->DataLatency));
  assert_param(IS_FMC_ACCESS_MODE(Timing->AccessMode));
  assert_param(IS_FMC_NORSRAM_BANK(Bank));

  /* Set FMC_NORSRAM device timing parameters */
  MODIFY_REG(Device->BTCR[Bank + 1U], BTR_CLEAR_MASK, (Timing->AddressSetupTime                                  |
 8006ff0:	687b      	ldr	r3, [r7, #4]
 8006ff2:	1c5a      	adds	r2, r3, #1
 8006ff4:	68fb      	ldr	r3, [r7, #12]
 8006ff6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006ffa:	f003 4140 	and.w	r1, r3, #3221225472	; 0xc0000000
 8006ffe:	68bb      	ldr	r3, [r7, #8]
 8007000:	681a      	ldr	r2, [r3, #0]
 8007002:	68bb      	ldr	r3, [r7, #8]
 8007004:	685b      	ldr	r3, [r3, #4]
 8007006:	011b      	lsls	r3, r3, #4
 8007008:	431a      	orrs	r2, r3
 800700a:	68bb      	ldr	r3, [r7, #8]
 800700c:	689b      	ldr	r3, [r3, #8]
 800700e:	021b      	lsls	r3, r3, #8
 8007010:	431a      	orrs	r2, r3
 8007012:	68bb      	ldr	r3, [r7, #8]
 8007014:	68db      	ldr	r3, [r3, #12]
 8007016:	041b      	lsls	r3, r3, #16
 8007018:	431a      	orrs	r2, r3
 800701a:	68bb      	ldr	r3, [r7, #8]
 800701c:	691b      	ldr	r3, [r3, #16]
 800701e:	3b01      	subs	r3, #1
 8007020:	051b      	lsls	r3, r3, #20
 8007022:	431a      	orrs	r2, r3
 8007024:	68bb      	ldr	r3, [r7, #8]
 8007026:	695b      	ldr	r3, [r3, #20]
 8007028:	3b02      	subs	r3, #2
 800702a:	061b      	lsls	r3, r3, #24
 800702c:	431a      	orrs	r2, r3
 800702e:	68bb      	ldr	r3, [r7, #8]
 8007030:	699b      	ldr	r3, [r3, #24]
 8007032:	4313      	orrs	r3, r2
 8007034:	687a      	ldr	r2, [r7, #4]
 8007036:	3201      	adds	r2, #1
 8007038:	4319      	orrs	r1, r3
 800703a:	68fb      	ldr	r3, [r7, #12]
 800703c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
                                                       (((Timing->CLKDivision) - 1U)     << FMC_BTRx_CLKDIV_Pos)  |
                                                       (((Timing->DataLatency) - 2U)     << FMC_BTRx_DATLAT_Pos)  |
                                                       (Timing->AccessMode)));

  /* Configure Clock division value (in NORSRAM bank 1) when continuous clock is enabled */
  if (HAL_IS_BIT_SET(Device->BTCR[FMC_NORSRAM_BANK1], FMC_BCR1_CCLKEN))
 8007040:	68fb      	ldr	r3, [r7, #12]
 8007042:	681b      	ldr	r3, [r3, #0]
 8007044:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8007048:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800704c:	d113      	bne.n	8007076 <FMC_NORSRAM_Timing_Init+0x92>
  {
    tmpr = (uint32_t)(Device->BTCR[FMC_NORSRAM_BANK1 + 1U] & ~((0x0FU) << FMC_BTRx_CLKDIV_Pos));
 800704e:	68fb      	ldr	r3, [r7, #12]
 8007050:	685b      	ldr	r3, [r3, #4]
 8007052:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 8007056:	617b      	str	r3, [r7, #20]
    tmpr |= (uint32_t)(((Timing->CLKDivision) - 1U) << FMC_BTRx_CLKDIV_Pos);
 8007058:	68bb      	ldr	r3, [r7, #8]
 800705a:	691b      	ldr	r3, [r3, #16]
 800705c:	3b01      	subs	r3, #1
 800705e:	051b      	lsls	r3, r3, #20
 8007060:	697a      	ldr	r2, [r7, #20]
 8007062:	4313      	orrs	r3, r2
 8007064:	617b      	str	r3, [r7, #20]
    MODIFY_REG(Device->BTCR[FMC_NORSRAM_BANK1 + 1U], FMC_BTRx_CLKDIV, tmpr);
 8007066:	68fb      	ldr	r3, [r7, #12]
 8007068:	685b      	ldr	r3, [r3, #4]
 800706a:	f423 0270 	bic.w	r2, r3, #15728640	; 0xf00000
 800706e:	697b      	ldr	r3, [r7, #20]
 8007070:	431a      	orrs	r2, r3
 8007072:	68fb      	ldr	r3, [r7, #12]
 8007074:	605a      	str	r2, [r3, #4]
  }

  return HAL_OK;
 8007076:	2300      	movs	r3, #0
}
 8007078:	4618      	mov	r0, r3
 800707a:	371c      	adds	r7, #28
 800707c:	46bd      	mov	sp, r7
 800707e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007082:	4770      	bx	lr

08007084 <FMC_NORSRAM_Extended_Timing_Init>:
  * @retval HAL status
  */
HAL_StatusTypeDef FMC_NORSRAM_Extended_Timing_Init(FMC_NORSRAM_EXTENDED_TypeDef *Device,
                                                   FMC_NORSRAM_TimingTypeDef *Timing, uint32_t Bank,
                                                   uint32_t ExtendedMode)
{
 8007084:	b480      	push	{r7}
 8007086:	b085      	sub	sp, #20
 8007088:	af00      	add	r7, sp, #0
 800708a:	60f8      	str	r0, [r7, #12]
 800708c:	60b9      	str	r1, [r7, #8]
 800708e:	607a      	str	r2, [r7, #4]
 8007090:	603b      	str	r3, [r7, #0]
  /* Check the parameters */
  assert_param(IS_FMC_EXTENDED_MODE(ExtendedMode));

  /* Set NORSRAM device timing register for write configuration, if extended mode is used */
  if (ExtendedMode == FMC_EXTENDED_MODE_ENABLE)
 8007092:	683b      	ldr	r3, [r7, #0]
 8007094:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8007098:	d11d      	bne.n	80070d6 <FMC_NORSRAM_Extended_Timing_Init+0x52>
    assert_param(IS_FMC_TURNAROUND_TIME(Timing->BusTurnAroundDuration));
    assert_param(IS_FMC_ACCESS_MODE(Timing->AccessMode));
    assert_param(IS_FMC_NORSRAM_BANK(Bank));

    /* Set NORSRAM device timing register for write configuration, if extended mode is used */
    MODIFY_REG(Device->BWTR[Bank], BWTR_CLEAR_MASK, (Timing->AddressSetupTime                                    |
 800709a:	68fb      	ldr	r3, [r7, #12]
 800709c:	687a      	ldr	r2, [r7, #4]
 800709e:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 80070a2:	4b13      	ldr	r3, [pc, #76]	; (80070f0 <FMC_NORSRAM_Extended_Timing_Init+0x6c>)
 80070a4:	4013      	ands	r3, r2
 80070a6:	68ba      	ldr	r2, [r7, #8]
 80070a8:	6811      	ldr	r1, [r2, #0]
 80070aa:	68ba      	ldr	r2, [r7, #8]
 80070ac:	6852      	ldr	r2, [r2, #4]
 80070ae:	0112      	lsls	r2, r2, #4
 80070b0:	4311      	orrs	r1, r2
 80070b2:	68ba      	ldr	r2, [r7, #8]
 80070b4:	6892      	ldr	r2, [r2, #8]
 80070b6:	0212      	lsls	r2, r2, #8
 80070b8:	4311      	orrs	r1, r2
 80070ba:	68ba      	ldr	r2, [r7, #8]
 80070bc:	6992      	ldr	r2, [r2, #24]
 80070be:	4311      	orrs	r1, r2
 80070c0:	68ba      	ldr	r2, [r7, #8]
 80070c2:	68d2      	ldr	r2, [r2, #12]
 80070c4:	0412      	lsls	r2, r2, #16
 80070c6:	430a      	orrs	r2, r1
 80070c8:	ea43 0102 	orr.w	r1, r3, r2
 80070cc:	68fb      	ldr	r3, [r7, #12]
 80070ce:	687a      	ldr	r2, [r7, #4]
 80070d0:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
 80070d4:	e005      	b.n	80070e2 <FMC_NORSRAM_Extended_Timing_Init+0x5e>
                                                     Timing->AccessMode                                          |
                                                     ((Timing->BusTurnAroundDuration)  << FMC_BWTRx_BUSTURN_Pos)));
  }
  else
  {
    Device->BWTR[Bank] = 0x0FFFFFFFU;
 80070d6:	68fb      	ldr	r3, [r7, #12]
 80070d8:	687a      	ldr	r2, [r7, #4]
 80070da:	f06f 4170 	mvn.w	r1, #4026531840	; 0xf0000000
 80070de:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  }

  return HAL_OK;
 80070e2:	2300      	movs	r3, #0
}
 80070e4:	4618      	mov	r0, r3
 80070e6:	3714      	adds	r7, #20
 80070e8:	46bd      	mov	sp, r7
 80070ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80070ee:	4770      	bx	lr
 80070f0:	cff00000 	.word	0xcff00000

080070f4 <__libc_init_array>:
 80070f4:	b570      	push	{r4, r5, r6, lr}
 80070f6:	4d0d      	ldr	r5, [pc, #52]	; (800712c <__libc_init_array+0x38>)
 80070f8:	4c0d      	ldr	r4, [pc, #52]	; (8007130 <__libc_init_array+0x3c>)
 80070fa:	1b64      	subs	r4, r4, r5
 80070fc:	10a4      	asrs	r4, r4, #2
 80070fe:	2600      	movs	r6, #0
 8007100:	42a6      	cmp	r6, r4
 8007102:	d109      	bne.n	8007118 <__libc_init_array+0x24>
 8007104:	4d0b      	ldr	r5, [pc, #44]	; (8007134 <__libc_init_array+0x40>)
 8007106:	4c0c      	ldr	r4, [pc, #48]	; (8007138 <__libc_init_array+0x44>)
 8007108:	f000 f820 	bl	800714c <_init>
 800710c:	1b64      	subs	r4, r4, r5
 800710e:	10a4      	asrs	r4, r4, #2
 8007110:	2600      	movs	r6, #0
 8007112:	42a6      	cmp	r6, r4
 8007114:	d105      	bne.n	8007122 <__libc_init_array+0x2e>
 8007116:	bd70      	pop	{r4, r5, r6, pc}
 8007118:	f855 3b04 	ldr.w	r3, [r5], #4
 800711c:	4798      	blx	r3
 800711e:	3601      	adds	r6, #1
 8007120:	e7ee      	b.n	8007100 <__libc_init_array+0xc>
 8007122:	f855 3b04 	ldr.w	r3, [r5], #4
 8007126:	4798      	blx	r3
 8007128:	3601      	adds	r6, #1
 800712a:	e7f2      	b.n	8007112 <__libc_init_array+0x1e>
 800712c:	080071a4 	.word	0x080071a4
 8007130:	080071a4 	.word	0x080071a4
 8007134:	080071a4 	.word	0x080071a4
 8007138:	080071a8 	.word	0x080071a8

0800713c <memset>:
 800713c:	4402      	add	r2, r0
 800713e:	4603      	mov	r3, r0
 8007140:	4293      	cmp	r3, r2
 8007142:	d100      	bne.n	8007146 <memset+0xa>
 8007144:	4770      	bx	lr
 8007146:	f803 1b01 	strb.w	r1, [r3], #1
 800714a:	e7f9      	b.n	8007140 <memset+0x4>

0800714c <_init>:
 800714c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800714e:	bf00      	nop
 8007150:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007152:	bc08      	pop	{r3}
 8007154:	469e      	mov	lr, r3
 8007156:	4770      	bx	lr

08007158 <_fini>:
 8007158:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800715a:	bf00      	nop
 800715c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800715e:	bc08      	pop	{r3}
 8007160:	469e      	mov	lr, r3
 8007162:	4770      	bx	lr
