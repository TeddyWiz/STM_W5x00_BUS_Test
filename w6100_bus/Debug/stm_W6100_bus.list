
stm_W6100_bus.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000002cc  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000a128  080002d0  080002d0  000102d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000002f8  0800a3f8  0800a3f8  0001a3f8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  0800a6f0  0800a6f0  0001a6f0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000004  0800a6f8  0800a6f8  0001a6f8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .fini_array   00000004  0800a6fc  0800a6fc  0001a6fc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .data         00000114  20000000  0800a700  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .bss          000023d0  20000114  0800a814  00020114  2**2
                  ALLOC
  8 ._user_heap_stack 00000604  200024e4  0800a814  000224e4  2**0
                  ALLOC
  9 .ARM.attributes 0000002e  00000000  00000000  00020114  2**0
                  CONTENTS, READONLY
 10 .debug_info   000213e9  00000000  00000000  00020142  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 11 .debug_abbrev 00003dce  00000000  00000000  0004152b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_aranges 00001110  00000000  00000000  00045300  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_ranges 00000fd8  00000000  00000000  00046410  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_macro  00035050  00000000  00000000  000473e8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_line   00015e45  00000000  00000000  0007c438  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_str    0014ea50  00000000  00000000  0009227d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .comment      00000053  00000000  00000000  001e0ccd  2**0
                  CONTENTS, READONLY
 18 .debug_frame  00004e64  00000000  00000000  001e0d20  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080002d0 <__do_global_dtors_aux>:
 80002d0:	b510      	push	{r4, lr}
 80002d2:	4c05      	ldr	r4, [pc, #20]	; (80002e8 <__do_global_dtors_aux+0x18>)
 80002d4:	7823      	ldrb	r3, [r4, #0]
 80002d6:	b933      	cbnz	r3, 80002e6 <__do_global_dtors_aux+0x16>
 80002d8:	4b04      	ldr	r3, [pc, #16]	; (80002ec <__do_global_dtors_aux+0x1c>)
 80002da:	b113      	cbz	r3, 80002e2 <__do_global_dtors_aux+0x12>
 80002dc:	4804      	ldr	r0, [pc, #16]	; (80002f0 <__do_global_dtors_aux+0x20>)
 80002de:	f3af 8000 	nop.w
 80002e2:	2301      	movs	r3, #1
 80002e4:	7023      	strb	r3, [r4, #0]
 80002e6:	bd10      	pop	{r4, pc}
 80002e8:	20000114 	.word	0x20000114
 80002ec:	00000000 	.word	0x00000000
 80002f0:	0800a3e0 	.word	0x0800a3e0

080002f4 <frame_dummy>:
 80002f4:	b508      	push	{r3, lr}
 80002f6:	4b03      	ldr	r3, [pc, #12]	; (8000304 <frame_dummy+0x10>)
 80002f8:	b11b      	cbz	r3, 8000302 <frame_dummy+0xe>
 80002fa:	4903      	ldr	r1, [pc, #12]	; (8000308 <frame_dummy+0x14>)
 80002fc:	4803      	ldr	r0, [pc, #12]	; (800030c <frame_dummy+0x18>)
 80002fe:	f3af 8000 	nop.w
 8000302:	bd08      	pop	{r3, pc}
 8000304:	00000000 	.word	0x00000000
 8000308:	20000118 	.word	0x20000118
 800030c:	0800a3e0 	.word	0x0800a3e0

08000310 <memchr>:
 8000310:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000314:	2a10      	cmp	r2, #16
 8000316:	db2b      	blt.n	8000370 <memchr+0x60>
 8000318:	f010 0f07 	tst.w	r0, #7
 800031c:	d008      	beq.n	8000330 <memchr+0x20>
 800031e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000322:	3a01      	subs	r2, #1
 8000324:	428b      	cmp	r3, r1
 8000326:	d02d      	beq.n	8000384 <memchr+0x74>
 8000328:	f010 0f07 	tst.w	r0, #7
 800032c:	b342      	cbz	r2, 8000380 <memchr+0x70>
 800032e:	d1f6      	bne.n	800031e <memchr+0xe>
 8000330:	b4f0      	push	{r4, r5, r6, r7}
 8000332:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000336:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800033a:	f022 0407 	bic.w	r4, r2, #7
 800033e:	f07f 0700 	mvns.w	r7, #0
 8000342:	2300      	movs	r3, #0
 8000344:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000348:	3c08      	subs	r4, #8
 800034a:	ea85 0501 	eor.w	r5, r5, r1
 800034e:	ea86 0601 	eor.w	r6, r6, r1
 8000352:	fa85 f547 	uadd8	r5, r5, r7
 8000356:	faa3 f587 	sel	r5, r3, r7
 800035a:	fa86 f647 	uadd8	r6, r6, r7
 800035e:	faa5 f687 	sel	r6, r5, r7
 8000362:	b98e      	cbnz	r6, 8000388 <memchr+0x78>
 8000364:	d1ee      	bne.n	8000344 <memchr+0x34>
 8000366:	bcf0      	pop	{r4, r5, r6, r7}
 8000368:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800036c:	f002 0207 	and.w	r2, r2, #7
 8000370:	b132      	cbz	r2, 8000380 <memchr+0x70>
 8000372:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000376:	3a01      	subs	r2, #1
 8000378:	ea83 0301 	eor.w	r3, r3, r1
 800037c:	b113      	cbz	r3, 8000384 <memchr+0x74>
 800037e:	d1f8      	bne.n	8000372 <memchr+0x62>
 8000380:	2000      	movs	r0, #0
 8000382:	4770      	bx	lr
 8000384:	3801      	subs	r0, #1
 8000386:	4770      	bx	lr
 8000388:	2d00      	cmp	r5, #0
 800038a:	bf06      	itte	eq
 800038c:	4635      	moveq	r5, r6
 800038e:	3803      	subeq	r0, #3
 8000390:	3807      	subne	r0, #7
 8000392:	f015 0f01 	tst.w	r5, #1
 8000396:	d107      	bne.n	80003a8 <memchr+0x98>
 8000398:	3001      	adds	r0, #1
 800039a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800039e:	bf02      	ittt	eq
 80003a0:	3001      	addeq	r0, #1
 80003a2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80003a6:	3001      	addeq	r0, #1
 80003a8:	bcf0      	pop	{r4, r5, r6, r7}
 80003aa:	3801      	subs	r0, #1
 80003ac:	4770      	bx	lr
 80003ae:	bf00      	nop

080003b0 <__aeabi_uldivmod>:
 80003b0:	b953      	cbnz	r3, 80003c8 <__aeabi_uldivmod+0x18>
 80003b2:	b94a      	cbnz	r2, 80003c8 <__aeabi_uldivmod+0x18>
 80003b4:	2900      	cmp	r1, #0
 80003b6:	bf08      	it	eq
 80003b8:	2800      	cmpeq	r0, #0
 80003ba:	bf1c      	itt	ne
 80003bc:	f04f 31ff 	movne.w	r1, #4294967295
 80003c0:	f04f 30ff 	movne.w	r0, #4294967295
 80003c4:	f000 b96e 	b.w	80006a4 <__aeabi_idiv0>
 80003c8:	f1ad 0c08 	sub.w	ip, sp, #8
 80003cc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80003d0:	f000 f806 	bl	80003e0 <__udivmoddi4>
 80003d4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80003d8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80003dc:	b004      	add	sp, #16
 80003de:	4770      	bx	lr

080003e0 <__udivmoddi4>:
 80003e0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80003e4:	9d08      	ldr	r5, [sp, #32]
 80003e6:	4604      	mov	r4, r0
 80003e8:	468c      	mov	ip, r1
 80003ea:	2b00      	cmp	r3, #0
 80003ec:	f040 8083 	bne.w	80004f6 <__udivmoddi4+0x116>
 80003f0:	428a      	cmp	r2, r1
 80003f2:	4617      	mov	r7, r2
 80003f4:	d947      	bls.n	8000486 <__udivmoddi4+0xa6>
 80003f6:	fab2 f282 	clz	r2, r2
 80003fa:	b142      	cbz	r2, 800040e <__udivmoddi4+0x2e>
 80003fc:	f1c2 0020 	rsb	r0, r2, #32
 8000400:	fa24 f000 	lsr.w	r0, r4, r0
 8000404:	4091      	lsls	r1, r2
 8000406:	4097      	lsls	r7, r2
 8000408:	ea40 0c01 	orr.w	ip, r0, r1
 800040c:	4094      	lsls	r4, r2
 800040e:	ea4f 4817 	mov.w	r8, r7, lsr #16
 8000412:	0c23      	lsrs	r3, r4, #16
 8000414:	fbbc f6f8 	udiv	r6, ip, r8
 8000418:	fa1f fe87 	uxth.w	lr, r7
 800041c:	fb08 c116 	mls	r1, r8, r6, ip
 8000420:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000424:	fb06 f10e 	mul.w	r1, r6, lr
 8000428:	4299      	cmp	r1, r3
 800042a:	d909      	bls.n	8000440 <__udivmoddi4+0x60>
 800042c:	18fb      	adds	r3, r7, r3
 800042e:	f106 30ff 	add.w	r0, r6, #4294967295
 8000432:	f080 8119 	bcs.w	8000668 <__udivmoddi4+0x288>
 8000436:	4299      	cmp	r1, r3
 8000438:	f240 8116 	bls.w	8000668 <__udivmoddi4+0x288>
 800043c:	3e02      	subs	r6, #2
 800043e:	443b      	add	r3, r7
 8000440:	1a5b      	subs	r3, r3, r1
 8000442:	b2a4      	uxth	r4, r4
 8000444:	fbb3 f0f8 	udiv	r0, r3, r8
 8000448:	fb08 3310 	mls	r3, r8, r0, r3
 800044c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000450:	fb00 fe0e 	mul.w	lr, r0, lr
 8000454:	45a6      	cmp	lr, r4
 8000456:	d909      	bls.n	800046c <__udivmoddi4+0x8c>
 8000458:	193c      	adds	r4, r7, r4
 800045a:	f100 33ff 	add.w	r3, r0, #4294967295
 800045e:	f080 8105 	bcs.w	800066c <__udivmoddi4+0x28c>
 8000462:	45a6      	cmp	lr, r4
 8000464:	f240 8102 	bls.w	800066c <__udivmoddi4+0x28c>
 8000468:	3802      	subs	r0, #2
 800046a:	443c      	add	r4, r7
 800046c:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000470:	eba4 040e 	sub.w	r4, r4, lr
 8000474:	2600      	movs	r6, #0
 8000476:	b11d      	cbz	r5, 8000480 <__udivmoddi4+0xa0>
 8000478:	40d4      	lsrs	r4, r2
 800047a:	2300      	movs	r3, #0
 800047c:	e9c5 4300 	strd	r4, r3, [r5]
 8000480:	4631      	mov	r1, r6
 8000482:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000486:	b902      	cbnz	r2, 800048a <__udivmoddi4+0xaa>
 8000488:	deff      	udf	#255	; 0xff
 800048a:	fab2 f282 	clz	r2, r2
 800048e:	2a00      	cmp	r2, #0
 8000490:	d150      	bne.n	8000534 <__udivmoddi4+0x154>
 8000492:	1bcb      	subs	r3, r1, r7
 8000494:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000498:	fa1f f887 	uxth.w	r8, r7
 800049c:	2601      	movs	r6, #1
 800049e:	fbb3 fcfe 	udiv	ip, r3, lr
 80004a2:	0c21      	lsrs	r1, r4, #16
 80004a4:	fb0e 331c 	mls	r3, lr, ip, r3
 80004a8:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80004ac:	fb08 f30c 	mul.w	r3, r8, ip
 80004b0:	428b      	cmp	r3, r1
 80004b2:	d907      	bls.n	80004c4 <__udivmoddi4+0xe4>
 80004b4:	1879      	adds	r1, r7, r1
 80004b6:	f10c 30ff 	add.w	r0, ip, #4294967295
 80004ba:	d202      	bcs.n	80004c2 <__udivmoddi4+0xe2>
 80004bc:	428b      	cmp	r3, r1
 80004be:	f200 80e9 	bhi.w	8000694 <__udivmoddi4+0x2b4>
 80004c2:	4684      	mov	ip, r0
 80004c4:	1ac9      	subs	r1, r1, r3
 80004c6:	b2a3      	uxth	r3, r4
 80004c8:	fbb1 f0fe 	udiv	r0, r1, lr
 80004cc:	fb0e 1110 	mls	r1, lr, r0, r1
 80004d0:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 80004d4:	fb08 f800 	mul.w	r8, r8, r0
 80004d8:	45a0      	cmp	r8, r4
 80004da:	d907      	bls.n	80004ec <__udivmoddi4+0x10c>
 80004dc:	193c      	adds	r4, r7, r4
 80004de:	f100 33ff 	add.w	r3, r0, #4294967295
 80004e2:	d202      	bcs.n	80004ea <__udivmoddi4+0x10a>
 80004e4:	45a0      	cmp	r8, r4
 80004e6:	f200 80d9 	bhi.w	800069c <__udivmoddi4+0x2bc>
 80004ea:	4618      	mov	r0, r3
 80004ec:	eba4 0408 	sub.w	r4, r4, r8
 80004f0:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 80004f4:	e7bf      	b.n	8000476 <__udivmoddi4+0x96>
 80004f6:	428b      	cmp	r3, r1
 80004f8:	d909      	bls.n	800050e <__udivmoddi4+0x12e>
 80004fa:	2d00      	cmp	r5, #0
 80004fc:	f000 80b1 	beq.w	8000662 <__udivmoddi4+0x282>
 8000500:	2600      	movs	r6, #0
 8000502:	e9c5 0100 	strd	r0, r1, [r5]
 8000506:	4630      	mov	r0, r6
 8000508:	4631      	mov	r1, r6
 800050a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800050e:	fab3 f683 	clz	r6, r3
 8000512:	2e00      	cmp	r6, #0
 8000514:	d14a      	bne.n	80005ac <__udivmoddi4+0x1cc>
 8000516:	428b      	cmp	r3, r1
 8000518:	d302      	bcc.n	8000520 <__udivmoddi4+0x140>
 800051a:	4282      	cmp	r2, r0
 800051c:	f200 80b8 	bhi.w	8000690 <__udivmoddi4+0x2b0>
 8000520:	1a84      	subs	r4, r0, r2
 8000522:	eb61 0103 	sbc.w	r1, r1, r3
 8000526:	2001      	movs	r0, #1
 8000528:	468c      	mov	ip, r1
 800052a:	2d00      	cmp	r5, #0
 800052c:	d0a8      	beq.n	8000480 <__udivmoddi4+0xa0>
 800052e:	e9c5 4c00 	strd	r4, ip, [r5]
 8000532:	e7a5      	b.n	8000480 <__udivmoddi4+0xa0>
 8000534:	f1c2 0320 	rsb	r3, r2, #32
 8000538:	fa20 f603 	lsr.w	r6, r0, r3
 800053c:	4097      	lsls	r7, r2
 800053e:	fa01 f002 	lsl.w	r0, r1, r2
 8000542:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000546:	40d9      	lsrs	r1, r3
 8000548:	4330      	orrs	r0, r6
 800054a:	0c03      	lsrs	r3, r0, #16
 800054c:	fbb1 f6fe 	udiv	r6, r1, lr
 8000550:	fa1f f887 	uxth.w	r8, r7
 8000554:	fb0e 1116 	mls	r1, lr, r6, r1
 8000558:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800055c:	fb06 f108 	mul.w	r1, r6, r8
 8000560:	4299      	cmp	r1, r3
 8000562:	fa04 f402 	lsl.w	r4, r4, r2
 8000566:	d909      	bls.n	800057c <__udivmoddi4+0x19c>
 8000568:	18fb      	adds	r3, r7, r3
 800056a:	f106 3cff 	add.w	ip, r6, #4294967295
 800056e:	f080 808d 	bcs.w	800068c <__udivmoddi4+0x2ac>
 8000572:	4299      	cmp	r1, r3
 8000574:	f240 808a 	bls.w	800068c <__udivmoddi4+0x2ac>
 8000578:	3e02      	subs	r6, #2
 800057a:	443b      	add	r3, r7
 800057c:	1a5b      	subs	r3, r3, r1
 800057e:	b281      	uxth	r1, r0
 8000580:	fbb3 f0fe 	udiv	r0, r3, lr
 8000584:	fb0e 3310 	mls	r3, lr, r0, r3
 8000588:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800058c:	fb00 f308 	mul.w	r3, r0, r8
 8000590:	428b      	cmp	r3, r1
 8000592:	d907      	bls.n	80005a4 <__udivmoddi4+0x1c4>
 8000594:	1879      	adds	r1, r7, r1
 8000596:	f100 3cff 	add.w	ip, r0, #4294967295
 800059a:	d273      	bcs.n	8000684 <__udivmoddi4+0x2a4>
 800059c:	428b      	cmp	r3, r1
 800059e:	d971      	bls.n	8000684 <__udivmoddi4+0x2a4>
 80005a0:	3802      	subs	r0, #2
 80005a2:	4439      	add	r1, r7
 80005a4:	1acb      	subs	r3, r1, r3
 80005a6:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 80005aa:	e778      	b.n	800049e <__udivmoddi4+0xbe>
 80005ac:	f1c6 0c20 	rsb	ip, r6, #32
 80005b0:	fa03 f406 	lsl.w	r4, r3, r6
 80005b4:	fa22 f30c 	lsr.w	r3, r2, ip
 80005b8:	431c      	orrs	r4, r3
 80005ba:	fa20 f70c 	lsr.w	r7, r0, ip
 80005be:	fa01 f306 	lsl.w	r3, r1, r6
 80005c2:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 80005c6:	fa21 f10c 	lsr.w	r1, r1, ip
 80005ca:	431f      	orrs	r7, r3
 80005cc:	0c3b      	lsrs	r3, r7, #16
 80005ce:	fbb1 f9fe 	udiv	r9, r1, lr
 80005d2:	fa1f f884 	uxth.w	r8, r4
 80005d6:	fb0e 1119 	mls	r1, lr, r9, r1
 80005da:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 80005de:	fb09 fa08 	mul.w	sl, r9, r8
 80005e2:	458a      	cmp	sl, r1
 80005e4:	fa02 f206 	lsl.w	r2, r2, r6
 80005e8:	fa00 f306 	lsl.w	r3, r0, r6
 80005ec:	d908      	bls.n	8000600 <__udivmoddi4+0x220>
 80005ee:	1861      	adds	r1, r4, r1
 80005f0:	f109 30ff 	add.w	r0, r9, #4294967295
 80005f4:	d248      	bcs.n	8000688 <__udivmoddi4+0x2a8>
 80005f6:	458a      	cmp	sl, r1
 80005f8:	d946      	bls.n	8000688 <__udivmoddi4+0x2a8>
 80005fa:	f1a9 0902 	sub.w	r9, r9, #2
 80005fe:	4421      	add	r1, r4
 8000600:	eba1 010a 	sub.w	r1, r1, sl
 8000604:	b2bf      	uxth	r7, r7
 8000606:	fbb1 f0fe 	udiv	r0, r1, lr
 800060a:	fb0e 1110 	mls	r1, lr, r0, r1
 800060e:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 8000612:	fb00 f808 	mul.w	r8, r0, r8
 8000616:	45b8      	cmp	r8, r7
 8000618:	d907      	bls.n	800062a <__udivmoddi4+0x24a>
 800061a:	19e7      	adds	r7, r4, r7
 800061c:	f100 31ff 	add.w	r1, r0, #4294967295
 8000620:	d22e      	bcs.n	8000680 <__udivmoddi4+0x2a0>
 8000622:	45b8      	cmp	r8, r7
 8000624:	d92c      	bls.n	8000680 <__udivmoddi4+0x2a0>
 8000626:	3802      	subs	r0, #2
 8000628:	4427      	add	r7, r4
 800062a:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 800062e:	eba7 0708 	sub.w	r7, r7, r8
 8000632:	fba0 8902 	umull	r8, r9, r0, r2
 8000636:	454f      	cmp	r7, r9
 8000638:	46c6      	mov	lr, r8
 800063a:	4649      	mov	r1, r9
 800063c:	d31a      	bcc.n	8000674 <__udivmoddi4+0x294>
 800063e:	d017      	beq.n	8000670 <__udivmoddi4+0x290>
 8000640:	b15d      	cbz	r5, 800065a <__udivmoddi4+0x27a>
 8000642:	ebb3 020e 	subs.w	r2, r3, lr
 8000646:	eb67 0701 	sbc.w	r7, r7, r1
 800064a:	fa07 fc0c 	lsl.w	ip, r7, ip
 800064e:	40f2      	lsrs	r2, r6
 8000650:	ea4c 0202 	orr.w	r2, ip, r2
 8000654:	40f7      	lsrs	r7, r6
 8000656:	e9c5 2700 	strd	r2, r7, [r5]
 800065a:	2600      	movs	r6, #0
 800065c:	4631      	mov	r1, r6
 800065e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000662:	462e      	mov	r6, r5
 8000664:	4628      	mov	r0, r5
 8000666:	e70b      	b.n	8000480 <__udivmoddi4+0xa0>
 8000668:	4606      	mov	r6, r0
 800066a:	e6e9      	b.n	8000440 <__udivmoddi4+0x60>
 800066c:	4618      	mov	r0, r3
 800066e:	e6fd      	b.n	800046c <__udivmoddi4+0x8c>
 8000670:	4543      	cmp	r3, r8
 8000672:	d2e5      	bcs.n	8000640 <__udivmoddi4+0x260>
 8000674:	ebb8 0e02 	subs.w	lr, r8, r2
 8000678:	eb69 0104 	sbc.w	r1, r9, r4
 800067c:	3801      	subs	r0, #1
 800067e:	e7df      	b.n	8000640 <__udivmoddi4+0x260>
 8000680:	4608      	mov	r0, r1
 8000682:	e7d2      	b.n	800062a <__udivmoddi4+0x24a>
 8000684:	4660      	mov	r0, ip
 8000686:	e78d      	b.n	80005a4 <__udivmoddi4+0x1c4>
 8000688:	4681      	mov	r9, r0
 800068a:	e7b9      	b.n	8000600 <__udivmoddi4+0x220>
 800068c:	4666      	mov	r6, ip
 800068e:	e775      	b.n	800057c <__udivmoddi4+0x19c>
 8000690:	4630      	mov	r0, r6
 8000692:	e74a      	b.n	800052a <__udivmoddi4+0x14a>
 8000694:	f1ac 0c02 	sub.w	ip, ip, #2
 8000698:	4439      	add	r1, r7
 800069a:	e713      	b.n	80004c4 <__udivmoddi4+0xe4>
 800069c:	3802      	subs	r0, #2
 800069e:	443c      	add	r4, r7
 80006a0:	e724      	b.n	80004ec <__udivmoddi4+0x10c>
 80006a2:	bf00      	nop

080006a4 <__aeabi_idiv0>:
 80006a4:	4770      	bx	lr
 80006a6:	bf00      	nop

080006a8 <Fill_Buffer>:
#define WRITE_READ_ADDR     ((uint32_t)0x0000)
uint32_t aTxBuffer[BUFFER_SIZE];
uint32_t aRxBuffer[BUFFER_SIZE];

static void Fill_Buffer(uint32_t *pBuffer, uint32_t uwBufferLength, uint16_t uwOffset)
{
 80006a8:	b480      	push	{r7}
 80006aa:	b087      	sub	sp, #28
 80006ac:	af00      	add	r7, sp, #0
 80006ae:	60f8      	str	r0, [r7, #12]
 80006b0:	60b9      	str	r1, [r7, #8]
 80006b2:	4613      	mov	r3, r2
 80006b4:	80fb      	strh	r3, [r7, #6]
  uint16_t tmpIndex = 0;
 80006b6:	2300      	movs	r3, #0
 80006b8:	82fb      	strh	r3, [r7, #22]

  /* Put in global buffer different values */
  for (tmpIndex = 0; tmpIndex < uwBufferLength; tmpIndex++)
 80006ba:	2300      	movs	r3, #0
 80006bc:	82fb      	strh	r3, [r7, #22]
 80006be:	e00b      	b.n	80006d8 <Fill_Buffer+0x30>
  {
    pBuffer[tmpIndex] = tmpIndex + uwOffset;
 80006c0:	8afa      	ldrh	r2, [r7, #22]
 80006c2:	88fb      	ldrh	r3, [r7, #6]
 80006c4:	18d1      	adds	r1, r2, r3
 80006c6:	8afb      	ldrh	r3, [r7, #22]
 80006c8:	009b      	lsls	r3, r3, #2
 80006ca:	68fa      	ldr	r2, [r7, #12]
 80006cc:	4413      	add	r3, r2
 80006ce:	460a      	mov	r2, r1
 80006d0:	601a      	str	r2, [r3, #0]
  for (tmpIndex = 0; tmpIndex < uwBufferLength; tmpIndex++)
 80006d2:	8afb      	ldrh	r3, [r7, #22]
 80006d4:	3301      	adds	r3, #1
 80006d6:	82fb      	strh	r3, [r7, #22]
 80006d8:	8afb      	ldrh	r3, [r7, #22]
 80006da:	68ba      	ldr	r2, [r7, #8]
 80006dc:	429a      	cmp	r2, r3
 80006de:	d8ef      	bhi.n	80006c0 <Fill_Buffer+0x18>
  }
}
 80006e0:	bf00      	nop
 80006e2:	bf00      	nop
 80006e4:	371c      	adds	r7, #28
 80006e6:	46bd      	mov	sp, r7
 80006e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006ec:	4770      	bx	lr
	...

080006f0 <_write>:
    #endif
  #endif

  #ifdef True_STD
  int _write(int fd, char *str, int len)
  {
 80006f0:	b580      	push	{r7, lr}
 80006f2:	b086      	sub	sp, #24
 80006f4:	af00      	add	r7, sp, #0
 80006f6:	60f8      	str	r0, [r7, #12]
 80006f8:	60b9      	str	r1, [r7, #8]
 80006fa:	607a      	str	r2, [r7, #4]
    for(int i=0; i<len; i++)
 80006fc:	2300      	movs	r3, #0
 80006fe:	617b      	str	r3, [r7, #20]
 8000700:	e00b      	b.n	800071a <_write+0x2a>
    {
      HAL_UART_Transmit(&huart3, (uint8_t *)&str[i], 1, 0xFFFF);
 8000702:	697b      	ldr	r3, [r7, #20]
 8000704:	68ba      	ldr	r2, [r7, #8]
 8000706:	18d1      	adds	r1, r2, r3
 8000708:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800070c:	2201      	movs	r2, #1
 800070e:	4807      	ldr	r0, [pc, #28]	; (800072c <_write+0x3c>)
 8000710:	f004 fda6 	bl	8005260 <HAL_UART_Transmit>
    for(int i=0; i<len; i++)
 8000714:	697b      	ldr	r3, [r7, #20]
 8000716:	3301      	adds	r3, #1
 8000718:	617b      	str	r3, [r7, #20]
 800071a:	697a      	ldr	r2, [r7, #20]
 800071c:	687b      	ldr	r3, [r7, #4]
 800071e:	429a      	cmp	r2, r3
 8000720:	dbef      	blt.n	8000702 <_write+0x12>
    }
    return len;
 8000722:	687b      	ldr	r3, [r7, #4]
  }
 8000724:	4618      	mov	r0, r3
 8000726:	3718      	adds	r7, #24
 8000728:	46bd      	mov	sp, r7
 800072a:	bd80      	pop	{r7, pc}
 800072c:	2000097c 	.word	0x2000097c

08000730 <W6100BusWriteByte>:
	  {
		URX_BUF_Flag = 1;
	  }
 }
void W6100BusWriteByte(uint32_t addr, iodata_t data)
{
 8000730:	b480      	push	{r7}
 8000732:	b083      	sub	sp, #12
 8000734:	af00      	add	r7, sp, #0
 8000736:	6078      	str	r0, [r7, #4]
 8000738:	460b      	mov	r3, r1
 800073a:	70fb      	strb	r3, [r7, #3]
	#if 1	//teddy 210422
	//(*(volatile uint8_t*)(addr)) = (uint8_t)(data);
	(*(__IO uint8_t *)((uint32_t)(addr)) = (data)); 
 800073c:	687b      	ldr	r3, [r7, #4]
 800073e:	78fa      	ldrb	r2, [r7, #3]
 8000740:	701a      	strb	r2, [r3, #0]
	Indata[0] = data;
	//printf("W%x:%x ",addr, data);
	if(HAL_SRAM_Write_8b(&hsram1, (uint32_t *)addr, (uint16_t *)data, 1) != HAL_OK)
		printf("BusWritError \r\n");
	#endif
}
 8000742:	bf00      	nop
 8000744:	370c      	adds	r7, #12
 8000746:	46bd      	mov	sp, r7
 8000748:	f85d 7b04 	ldr.w	r7, [sp], #4
 800074c:	4770      	bx	lr

0800074e <W6100BusReadByte>:

iodata_t W6100BusReadByte(uint32_t addr)
{
 800074e:	b480      	push	{r7}
 8000750:	b083      	sub	sp, #12
 8000752:	af00      	add	r7, sp, #0
 8000754:	6078      	str	r0, [r7, #4]
	#if 1	//teddy 210422
	//return (*((volatile uint8_t*)(addr)));
	return *(__IO uint8_t *)((uint32_t)(addr));
 8000756:	687b      	ldr	r3, [r7, #4]
 8000758:	781b      	ldrb	r3, [r3, #0]
 800075a:	b2db      	uxtb	r3, r3
	if(HAL_SRAM_Read_8b(&hsram1, (uint32_t *)addr, (uint16_t *)result, 1) != HAL_OK)
		printf("BussReadError \r\n");
	printf("R%x:%x ", addr, result[0]);
	return result[0];
	#endif
}
 800075c:	4618      	mov	r0, r3
 800075e:	370c      	adds	r7, #12
 8000760:	46bd      	mov	sp, r7
 8000762:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000766:	4770      	bx	lr

08000768 <W6100CsEnable>:
			printf("BussReadError \r\n");
#endif

}
void W6100CsEnable(void)
{
 8000768:	b480      	push	{r7}
 800076a:	af00      	add	r7, sp, #0
#if 0
	__HAL_LOCK(&hsram1);
	hsram1.State = HAL_SRAM_STATE_BUSY;
#endif
}
 800076c:	bf00      	nop
 800076e:	46bd      	mov	sp, r7
 8000770:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000774:	4770      	bx	lr

08000776 <W6100CsDisable>:

void W6100CsDisable(void)
{
 8000776:	b480      	push	{r7}
 8000778:	af00      	add	r7, sp, #0
#if 0
	__HAL_UNLOCK(&hsram1);
	hsram1.State = HAL_SRAM_STATE_READY;
#endif
}
 800077a:	bf00      	nop
 800077c:	46bd      	mov	sp, r7
 800077e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000782:	4770      	bx	lr

08000784 <W6100Initialze>:

void W6100Initialze(void)
{
 8000784:	b590      	push	{r4, r7, lr}
 8000786:	b087      	sub	sp, #28
 8000788:	af00      	add	r7, sp, #0
#else
	/* Indirect bus method callback registration */
	#if defined BUS_DMA
		reg_wizchip_bus_cbfunc(W6100BusReadByte, W6100BusWriteByte, W6100BusReadBurst, W6100BusWriteBurst);
	#else
		reg_wizchip_bus_cbfunc(W6100BusReadByte, W6100BusWriteByte, 0, 0);
 800078a:	2300      	movs	r3, #0
 800078c:	2200      	movs	r2, #0
 800078e:	4926      	ldr	r1, [pc, #152]	; (8000828 <W6100Initialze+0xa4>)
 8000790:	4826      	ldr	r0, [pc, #152]	; (800082c <W6100Initialze+0xa8>)
 8000792:	f007 ff0b 	bl	80085ac <reg_wizchip_bus_cbfunc>
	#endif
		reg_wizchip_cs_cbfunc(W6100CsEnable, W6100CsDisable);
 8000796:	4926      	ldr	r1, [pc, #152]	; (8000830 <W6100Initialze+0xac>)
 8000798:	4826      	ldr	r0, [pc, #152]	; (8000834 <W6100Initialze+0xb0>)
 800079a:	f007 fee1 	bl	8008560 <reg_wizchip_cs_cbfunc>
#endif
		uint8_t temp;
		unsigned char W6100_AdrSet[2][8] = {{2, 2, 2, 2, 2, 2, 2, 2}, {2, 2, 2, 2, 2, 2, 2, 2}};
 800079e:	4b26      	ldr	r3, [pc, #152]	; (8000838 <W6100Initialze+0xb4>)
 80007a0:	1d3c      	adds	r4, r7, #4
 80007a2:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80007a4:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
		uint16_t RegTemp = 0;
 80007a8:	2300      	movs	r3, #0
 80007aa:	82fb      	strh	r3, [r7, #22]
		//RegTemp = (uint16_t)WIZCHIP_READ(_CIDR_);
		//printf("CIDR_ = %04x \r\n", RegTemp);
		RegTemp = getCIDR();
 80007ac:	f04f 40c0 	mov.w	r0, #1610612736	; 0x60000000
 80007b0:	f006 fcd0 	bl	8007154 <WIZCHIP_READ>
 80007b4:	4603      	mov	r3, r0
 80007b6:	b29b      	uxth	r3, r3
 80007b8:	021b      	lsls	r3, r3, #8
 80007ba:	b29c      	uxth	r4, r3
 80007bc:	481f      	ldr	r0, [pc, #124]	; (800083c <W6100Initialze+0xb8>)
 80007be:	f006 fcc9 	bl	8007154 <WIZCHIP_READ>
 80007c2:	4603      	mov	r3, r0
 80007c4:	b29b      	uxth	r3, r3
 80007c6:	4423      	add	r3, r4
 80007c8:	82fb      	strh	r3, [r7, #22]
		printf("CIDR = %04x \r\n", RegTemp);
 80007ca:	8afb      	ldrh	r3, [r7, #22]
 80007cc:	4619      	mov	r1, r3
 80007ce:	481c      	ldr	r0, [pc, #112]	; (8000840 <W6100Initialze+0xbc>)
 80007d0:	f008 fe3a 	bl	8009448 <iprintf>
		RegTemp = getVER();
 80007d4:	481b      	ldr	r0, [pc, #108]	; (8000844 <W6100Initialze+0xc0>)
 80007d6:	f006 fcbd 	bl	8007154 <WIZCHIP_READ>
 80007da:	4603      	mov	r3, r0
 80007dc:	b29b      	uxth	r3, r3
 80007de:	021b      	lsls	r3, r3, #8
 80007e0:	b29c      	uxth	r4, r3
 80007e2:	4819      	ldr	r0, [pc, #100]	; (8000848 <W6100Initialze+0xc4>)
 80007e4:	f006 fcb6 	bl	8007154 <WIZCHIP_READ>
 80007e8:	4603      	mov	r3, r0
 80007ea:	b29b      	uxth	r3, r3
 80007ec:	4423      	add	r3, r4
 80007ee:	82fb      	strh	r3, [r7, #22]
		printf("VER = %04x \r\n", RegTemp);
 80007f0:	8afb      	ldrh	r3, [r7, #22]
 80007f2:	4619      	mov	r1, r3
 80007f4:	4815      	ldr	r0, [pc, #84]	; (800084c <W6100Initialze+0xc8>)
 80007f6:	f008 fe27 	bl	8009448 <iprintf>

		#if 1 //teddy st
		do
		{
			if (ctlwizchip(CW_GET_PHYLINK, (void *)&temp) == -1)
 80007fa:	f107 0315 	add.w	r3, r7, #21
 80007fe:	4619      	mov	r1, r3
 8000800:	2017      	movs	r0, #23
 8000802:	f007 ff19 	bl	8008638 <ctlwizchip>
 8000806:	4603      	mov	r3, r0
 8000808:	f1b3 3fff 	cmp.w	r3, #4294967295
 800080c:	d102      	bne.n	8000814 <W6100Initialze+0x90>
			{
				printf("Unknown PHY link status.\r\n");
 800080e:	4810      	ldr	r0, [pc, #64]	; (8000850 <W6100Initialze+0xcc>)
 8000810:	f008 fea0 	bl	8009554 <puts>
			}
		} while (temp == PHY_LINK_OFF);
 8000814:	7d7b      	ldrb	r3, [r7, #21]
 8000816:	2b00      	cmp	r3, #0
 8000818:	d0ef      	beq.n	80007fa <W6100Initialze+0x76>
	 	#endif

		printf("PHY OK.\r\n");
 800081a:	480e      	ldr	r0, [pc, #56]	; (8000854 <W6100Initialze+0xd0>)
 800081c:	f008 fe9a 	bl	8009554 <puts>
	
	
}
 8000820:	bf00      	nop
 8000822:	371c      	adds	r7, #28
 8000824:	46bd      	mov	sp, r7
 8000826:	bd90      	pop	{r4, r7, pc}
 8000828:	08000731 	.word	0x08000731
 800082c:	0800074f 	.word	0x0800074f
 8000830:	08000777 	.word	0x08000777
 8000834:	08000769 	.word	0x08000769
 8000838:	0800a440 	.word	0x0800a440
 800083c:	60000100 	.word	0x60000100
 8000840:	0800a3f8 	.word	0x0800a3f8
 8000844:	60000200 	.word	0x60000200
 8000848:	60000300 	.word	0x60000300
 800084c:	0800a408 	.word	0x0800a408
 8000850:	0800a418 	.word	0x0800a418
 8000854:	0800a434 	.word	0x0800a434

08000858 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000858:	b580      	push	{r7, lr}
 800085a:	b084      	sub	sp, #16
 800085c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 1 */
  uint8_t temp1 = 0, temp2 = 0, *temp=NULL;
 800085e:	2300      	movs	r3, #0
 8000860:	73fb      	strb	r3, [r7, #15]
 8000862:	2300      	movs	r3, #0
 8000864:	73bb      	strb	r3, [r7, #14]
 8000866:	2300      	movs	r3, #0
 8000868:	60bb      	str	r3, [r7, #8]
  //temp = (volatile uint8_t*)(0x60000003);
  uint8_t syslock = SYS_NET_LOCK;
 800086a:	2302      	movs	r3, #2
 800086c:	71fb      	strb	r3, [r7, #7]
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800086e:	f000 fef3 	bl	8001658 <HAL_Init>
  /* USER CODE BEGIN Init */
  
  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000872:	f000 f8a1 	bl	80009b8 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000876:	f000 fa41 	bl	8000cfc <MX_GPIO_Init>
  MX_USART3_UART_Init();
 800087a:	f000 f985 	bl	8000b88 <MX_USART3_UART_Init>
  MX_USB_OTG_HS_USB_Init();
 800087e:	f000 f9cf 	bl	8000c20 <MX_USB_OTG_HS_USB_Init>
  MX_FMC_Init();
 8000882:	f000 f9d5 	bl	8000c30 <MX_FMC_Init>
  MX_DMA2D_Init();
 8000886:	f000 f945 	bl	8000b14 <MX_DMA2D_Init>
  /* USER CODE BEGIN 2 */
  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_11|GPIO_PIN_3, GPIO_PIN_SET);
 800088a:	2201      	movs	r2, #1
 800088c:	f640 0108 	movw	r1, #2056	; 0x808
 8000890:	483e      	ldr	r0, [pc, #248]	; (800098c <main+0x134>)
 8000892:	f002 f8d5 	bl	8002a40 <HAL_GPIO_WritePin>
  HAL_Delay(100);
 8000896:	2064      	movs	r0, #100	; 0x64
 8000898:	f000 ff70 	bl	800177c <HAL_Delay>
  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_11, GPIO_PIN_RESET);
 800089c:	2200      	movs	r2, #0
 800089e:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80008a2:	483a      	ldr	r0, [pc, #232]	; (800098c <main+0x134>)
 80008a4:	f002 f8cc 	bl	8002a40 <HAL_GPIO_WritePin>
  HAL_Delay(500);
 80008a8:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 80008ac:	f000 ff66 	bl	800177c <HAL_Delay>
  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_11, GPIO_PIN_SET);
 80008b0:	2201      	movs	r2, #1
 80008b2:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80008b6:	4835      	ldr	r0, [pc, #212]	; (800098c <main+0x134>)
 80008b8:	f002 f8c2 	bl	8002a40 <HAL_GPIO_WritePin>
  HAL_Delay(500);
 80008bc:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 80008c0:	f000 ff5c 	bl	800177c <HAL_Delay>
printf("Hello Start!!\r\n");
 80008c4:	4832      	ldr	r0, [pc, #200]	; (8000990 <main+0x138>)
 80008c6:	f008 fe45 	bl	8009554 <puts>
  Fill_Buffer(aTxBuffer, BUFFER_SIZE, 0x0000);
 80008ca:	2200      	movs	r2, #0
 80008cc:	2102      	movs	r1, #2
 80008ce:	4831      	ldr	r0, [pc, #196]	; (8000994 <main+0x13c>)
 80008d0:	f7ff feea 	bl	80006a8 <Fill_Buffer>
  //HAL_SRAM_Write_16b(&hsram1, (uint32_t *)(SRAM_BANK_ADDR + WRITE_READ_ADDR), (uint16_t *)aTxBuffer, BUFFER_SIZE*2);
  //HAL_SRAM_Write_8b(&hsram1, (uint32_t *)(SRAM_BANK_ADDR + WRITE_READ_ADDR), (uint8_t *)aTxBuffer, BUFFER_SIZE);
  printf("Hello Start!!\r\n");
 80008d4:	482e      	ldr	r0, [pc, #184]	; (8000990 <main+0x138>)
 80008d6:	f008 fe3d 	bl	8009554 <puts>

  //__HAL_LOCK(&hsram1);
	//  hsram1.State = HAL_SRAM_STATE_BUSY;

	//(*(volatile uint32_t*)(0x60000000)) = (0x00<<16)|(0x02<<8)|(0x00);
	(*(volatile uint8_t*)(0x60000000)) = (uint8_t)(0x00);
 80008da:	f04f 43c0 	mov.w	r3, #1610612736	; 0x60000000
 80008de:	2200      	movs	r2, #0
 80008e0:	701a      	strb	r2, [r3, #0]
    (*(volatile uint8_t*)(0x60000001)) = (uint8_t)(0x02);
 80008e2:	4b2d      	ldr	r3, [pc, #180]	; (8000998 <main+0x140>)
 80008e4:	2202      	movs	r2, #2
 80008e6:	701a      	strb	r2, [r3, #0]
    (*(volatile uint8_t*)(0x60000002)) = (uint8_t)(0x00);
 80008e8:	4b2c      	ldr	r3, [pc, #176]	; (800099c <main+0x144>)
 80008ea:	2200      	movs	r2, #0
 80008ec:	701a      	strb	r2, [r3, #0]
    temp1 = (*(volatile uint8_t*)(0x60000003));
 80008ee:	4b2c      	ldr	r3, [pc, #176]	; (80009a0 <main+0x148>)
 80008f0:	781b      	ldrb	r3, [r3, #0]
 80008f2:	73fb      	strb	r3, [r7, #15]
//	hsram1.State = HAL_SRAM_STATE_READY;
		
	//__HAL_LOCK(&hsram1);
	//hsram1.State = HAL_SRAM_STATE_BUSY;
	//(*(volatile uint32_t*)(0x60000000)) = (0x00<<16)|(0x03<<8)|(0x00);
    (*(volatile uint8_t*)(0x60000000)) = (uint8_t)(0x00);
 80008f4:	f04f 43c0 	mov.w	r3, #1610612736	; 0x60000000
 80008f8:	2200      	movs	r2, #0
 80008fa:	701a      	strb	r2, [r3, #0]
    (*(volatile uint8_t*)(0x60000001)) = (uint8_t)(0x03);
 80008fc:	4b26      	ldr	r3, [pc, #152]	; (8000998 <main+0x140>)
 80008fe:	2203      	movs	r2, #3
 8000900:	701a      	strb	r2, [r3, #0]
    (*(volatile uint8_t*)(0x60000002)) = (uint8_t)(0x00);
 8000902:	4b26      	ldr	r3, [pc, #152]	; (800099c <main+0x144>)
 8000904:	2200      	movs	r2, #0
 8000906:	701a      	strb	r2, [r3, #0]
    temp2 = (*(volatile uint8_t*)(0x60000003));
 8000908:	4b25      	ldr	r3, [pc, #148]	; (80009a0 <main+0x148>)
 800090a:	781b      	ldrb	r3, [r3, #0]
 800090c:	73bb      	strb	r3, [r7, #14]
	//temp2 = *temp;
	//__HAL_UNLOCK(&hsram1);
	//hsram1.State = HAL_SRAM_STATE_READY;\

#endif
  printf("VER = 0x%02x%02x \r\n", temp1, temp2);
 800090e:	7bfb      	ldrb	r3, [r7, #15]
 8000910:	7bba      	ldrb	r2, [r7, #14]
 8000912:	4619      	mov	r1, r3
 8000914:	4823      	ldr	r0, [pc, #140]	; (80009a4 <main+0x14c>)
 8000916:	f008 fd97 	bl	8009448 <iprintf>
  W6100Initialze();
 800091a:	f7ff ff33 	bl	8000784 <W6100Initialze>
  (*(volatile uint8_t*)(0x60000000)) = (uint8_t)(0x41);
 800091e:	f04f 43c0 	mov.w	r3, #1610612736	; 0x60000000
 8000922:	2241      	movs	r2, #65	; 0x41
 8000924:	701a      	strb	r2, [r3, #0]
  (*(volatile uint8_t*)(0x60000001)) = (uint8_t)(0x20);
 8000926:	4b1c      	ldr	r3, [pc, #112]	; (8000998 <main+0x140>)
 8000928:	2220      	movs	r2, #32
 800092a:	701a      	strb	r2, [r3, #0]
  (*(volatile uint8_t*)(0x60000002)) = (uint8_t)(0x00);
 800092c:	4b1b      	ldr	r3, [pc, #108]	; (800099c <main+0x144>)
 800092e:	2200      	movs	r2, #0
 8000930:	701a      	strb	r2, [r3, #0]
  (*(volatile uint8_t*)(0x60000003)) = (uint8_t)(0x00);
 8000932:	4b1b      	ldr	r3, [pc, #108]	; (80009a0 <main+0x148>)
 8000934:	2200      	movs	r2, #0
 8000936:	701a      	strb	r2, [r3, #0]
  (*(volatile uint8_t*)(0x60000003)) = (uint8_t)(0x08);
 8000938:	4b19      	ldr	r3, [pc, #100]	; (80009a0 <main+0x148>)
 800093a:	2208      	movs	r2, #8
 800093c:	701a      	strb	r2, [r3, #0]
  (*(volatile uint8_t*)(0x60000003)) = (uint8_t)(0xdc);
 800093e:	4b18      	ldr	r3, [pc, #96]	; (80009a0 <main+0x148>)
 8000940:	22dc      	movs	r2, #220	; 0xdc
 8000942:	701a      	strb	r2, [r3, #0]
  (*(volatile uint8_t*)(0x60000003)) = (uint8_t)(0xff);
 8000944:	4b16      	ldr	r3, [pc, #88]	; (80009a0 <main+0x148>)
 8000946:	22ff      	movs	r2, #255	; 0xff
 8000948:	701a      	strb	r2, [r3, #0]
  (*(volatile uint8_t*)(0x60000003)) = (uint8_t)(0xff);
 800094a:	4b15      	ldr	r3, [pc, #84]	; (80009a0 <main+0x148>)
 800094c:	22ff      	movs	r2, #255	; 0xff
 800094e:	701a      	strb	r2, [r3, #0]
  (*(volatile uint8_t*)(0x60000003)) = (uint8_t)(0xff);
 8000950:	4b13      	ldr	r3, [pc, #76]	; (80009a0 <main+0x148>)
 8000952:	22ff      	movs	r2, #255	; 0xff
 8000954:	701a      	strb	r2, [r3, #0]
  setSHAR(gWIZNETINFO.mac);
 8000956:	2206      	movs	r2, #6
 8000958:	4913      	ldr	r1, [pc, #76]	; (80009a8 <main+0x150>)
 800095a:	4814      	ldr	r0, [pc, #80]	; (80009ac <main+0x154>)
 800095c:	f006 fc2e 	bl	80071bc <WIZCHIP_WRITE_BUF>
  ctlwizchip(CW_SYS_UNLOCK,& syslock);
 8000960:	1dfb      	adds	r3, r7, #7
 8000962:	4619      	mov	r1, r3
 8000964:	2001      	movs	r0, #1
 8000966:	f007 fe67 	bl	8008638 <ctlwizchip>
  ctlnetwork(CN_SET_NETINFO,&gWIZNETINFO);
 800096a:	490f      	ldr	r1, [pc, #60]	; (80009a8 <main+0x150>)
 800096c:	2000      	movs	r0, #0
 800096e:	f007 fff5 	bl	800895c <ctlnetwork>
  printf("Register value after W6100 initialize!\r\n");
 8000972:	480f      	ldr	r0, [pc, #60]	; (80009b0 <main+0x158>)
 8000974:	f008 fdee 	bl	8009554 <puts>
  print_network_information();
 8000978:	f000 fab0 	bl	8000edc <print_network_information>
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	  loopback_tcps(1,ethBuf3,50003,AS_IPV4);
 800097c:	2302      	movs	r3, #2
 800097e:	f24c 3253 	movw	r2, #50003	; 0xc353
 8000982:	490c      	ldr	r1, [pc, #48]	; (80009b4 <main+0x15c>)
 8000984:	2001      	movs	r0, #1
 8000986:	f006 fa43 	bl	8006e10 <loopback_tcps>
  {
 800098a:	e7f7      	b.n	800097c <main+0x124>
 800098c:	58020c00 	.word	0x58020c00
 8000990:	0800a450 	.word	0x0800a450
 8000994:	200024c8 	.word	0x200024c8
 8000998:	60000001 	.word	0x60000001
 800099c:	60000002 	.word	0x60000002
 80009a0:	60000003 	.word	0x60000003
 80009a4:	0800a460 	.word	0x0800a460
 80009a8:	20000000 	.word	0x20000000
 80009ac:	60412000 	.word	0x60412000
 80009b0:	0800a474 	.word	0x0800a474
 80009b4:	20001cc8 	.word	0x20001cc8

080009b8 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80009b8:	b580      	push	{r7, lr}
 80009ba:	b0a4      	sub	sp, #144	; 0x90
 80009bc:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80009be:	f107 0344 	add.w	r3, r7, #68	; 0x44
 80009c2:	224c      	movs	r2, #76	; 0x4c
 80009c4:	2100      	movs	r1, #0
 80009c6:	4618      	mov	r0, r3
 80009c8:	f008 fd36 	bl	8009438 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80009cc:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80009d0:	2220      	movs	r2, #32
 80009d2:	2100      	movs	r1, #0
 80009d4:	4618      	mov	r0, r3
 80009d6:	f008 fd2f 	bl	8009438 <memset>
  RCC_CRSInitTypeDef RCC_CRSInitStruct = {0};
 80009da:	f107 030c 	add.w	r3, r7, #12
 80009de:	2200      	movs	r2, #0
 80009e0:	601a      	str	r2, [r3, #0]
 80009e2:	605a      	str	r2, [r3, #4]
 80009e4:	609a      	str	r2, [r3, #8]
 80009e6:	60da      	str	r2, [r3, #12]
 80009e8:	611a      	str	r2, [r3, #16]
 80009ea:	615a      	str	r2, [r3, #20]

  /** Supply configuration update enable
  */
  HAL_PWREx_ConfigSupply(PWR_LDO_SUPPLY);
 80009ec:	2002      	movs	r0, #2
 80009ee:	f002 f921 	bl	8002c34 <HAL_PWREx_ConfigSupply>
  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 80009f2:	2300      	movs	r3, #0
 80009f4:	60bb      	str	r3, [r7, #8]
 80009f6:	4b45      	ldr	r3, [pc, #276]	; (8000b0c <SystemClock_Config+0x154>)
 80009f8:	699b      	ldr	r3, [r3, #24]
 80009fa:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 80009fe:	4a43      	ldr	r2, [pc, #268]	; (8000b0c <SystemClock_Config+0x154>)
 8000a00:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000a04:	6193      	str	r3, [r2, #24]
 8000a06:	4b41      	ldr	r3, [pc, #260]	; (8000b0c <SystemClock_Config+0x154>)
 8000a08:	699b      	ldr	r3, [r3, #24]
 8000a0a:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8000a0e:	60bb      	str	r3, [r7, #8]
 8000a10:	68bb      	ldr	r3, [r7, #8]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 8000a12:	bf00      	nop
 8000a14:	4b3d      	ldr	r3, [pc, #244]	; (8000b0c <SystemClock_Config+0x154>)
 8000a16:	699b      	ldr	r3, [r3, #24]
 8000a18:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8000a1c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8000a20:	d1f8      	bne.n	8000a14 <SystemClock_Config+0x5c>
  /** Macro to configure the PLL clock source
  */
  __HAL_RCC_PLL_PLLSOURCE_CONFIG(RCC_PLLSOURCE_CSI);
 8000a22:	4b3b      	ldr	r3, [pc, #236]	; (8000b10 <SystemClock_Config+0x158>)
 8000a24:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000a26:	f023 0303 	bic.w	r3, r3, #3
 8000a2a:	4a39      	ldr	r2, [pc, #228]	; (8000b10 <SystemClock_Config+0x158>)
 8000a2c:	f043 0301 	orr.w	r3, r3, #1
 8000a30:	6293      	str	r3, [r2, #40]	; 0x28
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI48|RCC_OSCILLATORTYPE_CSI;
 8000a32:	2330      	movs	r3, #48	; 0x30
 8000a34:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.HSI48State = RCC_HSI48_ON;
 8000a36:	2301      	movs	r3, #1
 8000a38:	65fb      	str	r3, [r7, #92]	; 0x5c
  RCC_OscInitStruct.CSIState = RCC_CSI_ON;
 8000a3a:	2380      	movs	r3, #128	; 0x80
 8000a3c:	663b      	str	r3, [r7, #96]	; 0x60
  RCC_OscInitStruct.CSICalibrationValue = 16;
 8000a3e:	2310      	movs	r3, #16
 8000a40:	667b      	str	r3, [r7, #100]	; 0x64
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000a42:	2302      	movs	r3, #2
 8000a44:	66bb      	str	r3, [r7, #104]	; 0x68
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_CSI;
 8000a46:	2301      	movs	r3, #1
 8000a48:	66fb      	str	r3, [r7, #108]	; 0x6c
  RCC_OscInitStruct.PLL.PLLM = 4;
 8000a4a:	2304      	movs	r3, #4
 8000a4c:	673b      	str	r3, [r7, #112]	; 0x70
  RCC_OscInitStruct.PLL.PLLN = 150;
 8000a4e:	2396      	movs	r3, #150	; 0x96
 8000a50:	677b      	str	r3, [r7, #116]	; 0x74
  RCC_OscInitStruct.PLL.PLLP = 1;
 8000a52:	2301      	movs	r3, #1
 8000a54:	67bb      	str	r3, [r7, #120]	; 0x78
  RCC_OscInitStruct.PLL.PLLQ = 6;
 8000a56:	2306      	movs	r3, #6
 8000a58:	67fb      	str	r3, [r7, #124]	; 0x7c
  RCC_OscInitStruct.PLL.PLLR = 2;
 8000a5a:	2302      	movs	r3, #2
 8000a5c:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
  RCC_OscInitStruct.PLL.PLLRGE = RCC_PLL1VCIRANGE_0;
 8000a60:	2300      	movs	r3, #0
 8000a62:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  RCC_OscInitStruct.PLL.PLLVCOSEL = RCC_PLL1VCOMEDIUM;
 8000a66:	2302      	movs	r3, #2
 8000a68:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  RCC_OscInitStruct.PLL.PLLFRACN = 0;
 8000a6c:	2300      	movs	r3, #0
 8000a6e:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000a72:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8000a76:	4618      	mov	r0, r3
 8000a78:	f002 f916 	bl	8002ca8 <HAL_RCC_OscConfig>
 8000a7c:	4603      	mov	r3, r0
 8000a7e:	2b00      	cmp	r3, #0
 8000a80:	d001      	beq.n	8000a86 <SystemClock_Config+0xce>
  {
    Error_Handler();
 8000a82:	f000 fb35 	bl	80010f0 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000a86:	233f      	movs	r3, #63	; 0x3f
 8000a88:	627b      	str	r3, [r7, #36]	; 0x24
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
                              |RCC_CLOCKTYPE_D3PCLK1|RCC_CLOCKTYPE_D1PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000a8a:	2303      	movs	r3, #3
 8000a8c:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV1;
 8000a8e:	2300      	movs	r3, #0
 8000a90:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV2;
 8000a92:	2308      	movs	r3, #8
 8000a94:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_ClkInitStruct.APB3CLKDivider = RCC_APB3_DIV2;
 8000a96:	2340      	movs	r3, #64	; 0x40
 8000a98:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV2;
 8000a9a:	2340      	movs	r3, #64	; 0x40
 8000a9c:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_ClkInitStruct.APB2CLKDivider = RCC_APB2_DIV2;
 8000a9e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000aa2:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_ClkInitStruct.APB4CLKDivider = RCC_APB4_DIV2;
 8000aa4:	2340      	movs	r3, #64	; 0x40
 8000aa6:	643b      	str	r3, [r7, #64]	; 0x40

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000aa8:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000aac:	2102      	movs	r1, #2
 8000aae:	4618      	mov	r0, r3
 8000ab0:	f002 fc88 	bl	80033c4 <HAL_RCC_ClockConfig>
 8000ab4:	4603      	mov	r3, r0
 8000ab6:	2b00      	cmp	r3, #0
 8000ab8:	d001      	beq.n	8000abe <SystemClock_Config+0x106>
  {
    Error_Handler();
 8000aba:	f000 fb19 	bl	80010f0 <Error_Handler>
  }
  /** Enable the SYSCFG APB clock
  */
  __HAL_RCC_CRS_CLK_ENABLE();
 8000abe:	4b14      	ldr	r3, [pc, #80]	; (8000b10 <SystemClock_Config+0x158>)
 8000ac0:	f8d3 30ec 	ldr.w	r3, [r3, #236]	; 0xec
 8000ac4:	4a12      	ldr	r2, [pc, #72]	; (8000b10 <SystemClock_Config+0x158>)
 8000ac6:	f043 0302 	orr.w	r3, r3, #2
 8000aca:	f8c2 30ec 	str.w	r3, [r2, #236]	; 0xec
 8000ace:	4b10      	ldr	r3, [pc, #64]	; (8000b10 <SystemClock_Config+0x158>)
 8000ad0:	f8d3 30ec 	ldr.w	r3, [r3, #236]	; 0xec
 8000ad4:	f003 0302 	and.w	r3, r3, #2
 8000ad8:	607b      	str	r3, [r7, #4]
 8000ada:	687b      	ldr	r3, [r7, #4]
  /** Configures CRS
  */
  RCC_CRSInitStruct.Prescaler = RCC_CRS_SYNC_DIV1;
 8000adc:	2300      	movs	r3, #0
 8000ade:	60fb      	str	r3, [r7, #12]
  RCC_CRSInitStruct.Source = RCC_CRS_SYNC_SOURCE_USB2;
 8000ae0:	f04f 5340 	mov.w	r3, #805306368	; 0x30000000
 8000ae4:	613b      	str	r3, [r7, #16]
  RCC_CRSInitStruct.Polarity = RCC_CRS_SYNC_POLARITY_RISING;
 8000ae6:	2300      	movs	r3, #0
 8000ae8:	617b      	str	r3, [r7, #20]
  RCC_CRSInitStruct.ReloadValue = __HAL_RCC_CRS_RELOADVALUE_CALCULATE(48000000,1000);
 8000aea:	f64b 337f 	movw	r3, #47999	; 0xbb7f
 8000aee:	61bb      	str	r3, [r7, #24]
  RCC_CRSInitStruct.ErrorLimitValue = 34;
 8000af0:	2322      	movs	r3, #34	; 0x22
 8000af2:	61fb      	str	r3, [r7, #28]
  RCC_CRSInitStruct.HSI48CalibrationValue = 32;
 8000af4:	2320      	movs	r3, #32
 8000af6:	623b      	str	r3, [r7, #32]

  HAL_RCCEx_CRSConfig(&RCC_CRSInitStruct);
 8000af8:	f107 030c 	add.w	r3, r7, #12
 8000afc:	4618      	mov	r0, r3
 8000afe:	f004 f9a5 	bl	8004e4c <HAL_RCCEx_CRSConfig>
}
 8000b02:	bf00      	nop
 8000b04:	3790      	adds	r7, #144	; 0x90
 8000b06:	46bd      	mov	sp, r7
 8000b08:	bd80      	pop	{r7, pc}
 8000b0a:	bf00      	nop
 8000b0c:	58024800 	.word	0x58024800
 8000b10:	58024400 	.word	0x58024400

08000b14 <MX_DMA2D_Init>:
  * @brief DMA2D Initialization Function
  * @param None
  * @retval None
  */
static void MX_DMA2D_Init(void)
{
 8000b14:	b580      	push	{r7, lr}
 8000b16:	af00      	add	r7, sp, #0
  /* USER CODE END DMA2D_Init 0 */

  /* USER CODE BEGIN DMA2D_Init 1 */

  /* USER CODE END DMA2D_Init 1 */
  hdma2d.Instance = DMA2D;
 8000b18:	4b19      	ldr	r3, [pc, #100]	; (8000b80 <MX_DMA2D_Init+0x6c>)
 8000b1a:	4a1a      	ldr	r2, [pc, #104]	; (8000b84 <MX_DMA2D_Init+0x70>)
 8000b1c:	601a      	str	r2, [r3, #0]
  hdma2d.Init.Mode = DMA2D_M2M;
 8000b1e:	4b18      	ldr	r3, [pc, #96]	; (8000b80 <MX_DMA2D_Init+0x6c>)
 8000b20:	2200      	movs	r2, #0
 8000b22:	605a      	str	r2, [r3, #4]
  hdma2d.Init.ColorMode = DMA2D_OUTPUT_ARGB8888;
 8000b24:	4b16      	ldr	r3, [pc, #88]	; (8000b80 <MX_DMA2D_Init+0x6c>)
 8000b26:	2200      	movs	r2, #0
 8000b28:	609a      	str	r2, [r3, #8]
  hdma2d.Init.OutputOffset = 0;
 8000b2a:	4b15      	ldr	r3, [pc, #84]	; (8000b80 <MX_DMA2D_Init+0x6c>)
 8000b2c:	2200      	movs	r2, #0
 8000b2e:	60da      	str	r2, [r3, #12]
  hdma2d.LayerCfg[1].InputOffset = 0;
 8000b30:	4b13      	ldr	r3, [pc, #76]	; (8000b80 <MX_DMA2D_Init+0x6c>)
 8000b32:	2200      	movs	r2, #0
 8000b34:	645a      	str	r2, [r3, #68]	; 0x44
  hdma2d.LayerCfg[1].InputColorMode = DMA2D_INPUT_ARGB8888;
 8000b36:	4b12      	ldr	r3, [pc, #72]	; (8000b80 <MX_DMA2D_Init+0x6c>)
 8000b38:	2200      	movs	r2, #0
 8000b3a:	649a      	str	r2, [r3, #72]	; 0x48
  hdma2d.LayerCfg[1].AlphaMode = DMA2D_NO_MODIF_ALPHA;
 8000b3c:	4b10      	ldr	r3, [pc, #64]	; (8000b80 <MX_DMA2D_Init+0x6c>)
 8000b3e:	2200      	movs	r2, #0
 8000b40:	64da      	str	r2, [r3, #76]	; 0x4c
  hdma2d.LayerCfg[1].InputAlpha = 0;
 8000b42:	4b0f      	ldr	r3, [pc, #60]	; (8000b80 <MX_DMA2D_Init+0x6c>)
 8000b44:	2200      	movs	r2, #0
 8000b46:	651a      	str	r2, [r3, #80]	; 0x50
  hdma2d.LayerCfg[1].AlphaInverted = DMA2D_REGULAR_ALPHA;
 8000b48:	4b0d      	ldr	r3, [pc, #52]	; (8000b80 <MX_DMA2D_Init+0x6c>)
 8000b4a:	2200      	movs	r2, #0
 8000b4c:	655a      	str	r2, [r3, #84]	; 0x54
  hdma2d.LayerCfg[1].RedBlueSwap = DMA2D_RB_REGULAR;
 8000b4e:	4b0c      	ldr	r3, [pc, #48]	; (8000b80 <MX_DMA2D_Init+0x6c>)
 8000b50:	2200      	movs	r2, #0
 8000b52:	659a      	str	r2, [r3, #88]	; 0x58
  hdma2d.LayerCfg[1].ChromaSubSampling = DMA2D_NO_CSS;
 8000b54:	4b0a      	ldr	r3, [pc, #40]	; (8000b80 <MX_DMA2D_Init+0x6c>)
 8000b56:	2200      	movs	r2, #0
 8000b58:	65da      	str	r2, [r3, #92]	; 0x5c
  if (HAL_DMA2D_Init(&hdma2d) != HAL_OK)
 8000b5a:	4809      	ldr	r0, [pc, #36]	; (8000b80 <MX_DMA2D_Init+0x6c>)
 8000b5c:	f001 fcb0 	bl	80024c0 <HAL_DMA2D_Init>
 8000b60:	4603      	mov	r3, r0
 8000b62:	2b00      	cmp	r3, #0
 8000b64:	d001      	beq.n	8000b6a <MX_DMA2D_Init+0x56>
  {
    Error_Handler();
 8000b66:	f000 fac3 	bl	80010f0 <Error_Handler>
  }
  if (HAL_DMA2D_ConfigLayer(&hdma2d, 1) != HAL_OK)
 8000b6a:	2101      	movs	r1, #1
 8000b6c:	4804      	ldr	r0, [pc, #16]	; (8000b80 <MX_DMA2D_Init+0x6c>)
 8000b6e:	f001 fd0b 	bl	8002588 <HAL_DMA2D_ConfigLayer>
 8000b72:	4603      	mov	r3, r0
 8000b74:	2b00      	cmp	r3, #0
 8000b76:	d001      	beq.n	8000b7c <MX_DMA2D_Init+0x68>
  {
    Error_Handler();
 8000b78:	f000 faba 	bl	80010f0 <Error_Handler>
  }
  /* USER CODE BEGIN DMA2D_Init 2 */

  /* USER CODE END DMA2D_Init 2 */

}
 8000b7c:	bf00      	nop
 8000b7e:	bd80      	pop	{r7, pc}
 8000b80:	20001860 	.word	0x20001860
 8000b84:	52001000 	.word	0x52001000

08000b88 <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 8000b88:	b580      	push	{r7, lr}
 8000b8a:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8000b8c:	4b22      	ldr	r3, [pc, #136]	; (8000c18 <MX_USART3_UART_Init+0x90>)
 8000b8e:	4a23      	ldr	r2, [pc, #140]	; (8000c1c <MX_USART3_UART_Init+0x94>)
 8000b90:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 8000b92:	4b21      	ldr	r3, [pc, #132]	; (8000c18 <MX_USART3_UART_Init+0x90>)
 8000b94:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000b98:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8000b9a:	4b1f      	ldr	r3, [pc, #124]	; (8000c18 <MX_USART3_UART_Init+0x90>)
 8000b9c:	2200      	movs	r2, #0
 8000b9e:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8000ba0:	4b1d      	ldr	r3, [pc, #116]	; (8000c18 <MX_USART3_UART_Init+0x90>)
 8000ba2:	2200      	movs	r2, #0
 8000ba4:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8000ba6:	4b1c      	ldr	r3, [pc, #112]	; (8000c18 <MX_USART3_UART_Init+0x90>)
 8000ba8:	2200      	movs	r2, #0
 8000baa:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8000bac:	4b1a      	ldr	r3, [pc, #104]	; (8000c18 <MX_USART3_UART_Init+0x90>)
 8000bae:	220c      	movs	r2, #12
 8000bb0:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000bb2:	4b19      	ldr	r3, [pc, #100]	; (8000c18 <MX_USART3_UART_Init+0x90>)
 8000bb4:	2200      	movs	r2, #0
 8000bb6:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8000bb8:	4b17      	ldr	r3, [pc, #92]	; (8000c18 <MX_USART3_UART_Init+0x90>)
 8000bba:	2200      	movs	r2, #0
 8000bbc:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000bbe:	4b16      	ldr	r3, [pc, #88]	; (8000c18 <MX_USART3_UART_Init+0x90>)
 8000bc0:	2200      	movs	r2, #0
 8000bc2:	621a      	str	r2, [r3, #32]
  huart3.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8000bc4:	4b14      	ldr	r3, [pc, #80]	; (8000c18 <MX_USART3_UART_Init+0x90>)
 8000bc6:	2200      	movs	r2, #0
 8000bc8:	625a      	str	r2, [r3, #36]	; 0x24
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000bca:	4b13      	ldr	r3, [pc, #76]	; (8000c18 <MX_USART3_UART_Init+0x90>)
 8000bcc:	2200      	movs	r2, #0
 8000bce:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8000bd0:	4811      	ldr	r0, [pc, #68]	; (8000c18 <MX_USART3_UART_Init+0x90>)
 8000bd2:	f004 faf5 	bl	80051c0 <HAL_UART_Init>
 8000bd6:	4603      	mov	r3, r0
 8000bd8:	2b00      	cmp	r3, #0
 8000bda:	d001      	beq.n	8000be0 <MX_USART3_UART_Init+0x58>
  {
    Error_Handler();
 8000bdc:	f000 fa88 	bl	80010f0 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart3, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000be0:	2100      	movs	r1, #0
 8000be2:	480d      	ldr	r0, [pc, #52]	; (8000c18 <MX_USART3_UART_Init+0x90>)
 8000be4:	f005 ff31 	bl	8006a4a <HAL_UARTEx_SetTxFifoThreshold>
 8000be8:	4603      	mov	r3, r0
 8000bea:	2b00      	cmp	r3, #0
 8000bec:	d001      	beq.n	8000bf2 <MX_USART3_UART_Init+0x6a>
  {
    Error_Handler();
 8000bee:	f000 fa7f 	bl	80010f0 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart3, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000bf2:	2100      	movs	r1, #0
 8000bf4:	4808      	ldr	r0, [pc, #32]	; (8000c18 <MX_USART3_UART_Init+0x90>)
 8000bf6:	f005 ff66 	bl	8006ac6 <HAL_UARTEx_SetRxFifoThreshold>
 8000bfa:	4603      	mov	r3, r0
 8000bfc:	2b00      	cmp	r3, #0
 8000bfe:	d001      	beq.n	8000c04 <MX_USART3_UART_Init+0x7c>
  {
    Error_Handler();
 8000c00:	f000 fa76 	bl	80010f0 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart3) != HAL_OK)
 8000c04:	4804      	ldr	r0, [pc, #16]	; (8000c18 <MX_USART3_UART_Init+0x90>)
 8000c06:	f005 fee7 	bl	80069d8 <HAL_UARTEx_DisableFifoMode>
 8000c0a:	4603      	mov	r3, r0
 8000c0c:	2b00      	cmp	r3, #0
 8000c0e:	d001      	beq.n	8000c14 <MX_USART3_UART_Init+0x8c>
  {
    Error_Handler();
 8000c10:	f000 fa6e 	bl	80010f0 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8000c14:	bf00      	nop
 8000c16:	bd80      	pop	{r7, pc}
 8000c18:	2000097c 	.word	0x2000097c
 8000c1c:	40004800 	.word	0x40004800

08000c20 <MX_USB_OTG_HS_USB_Init>:
  * @brief USB_OTG_HS Initialization Function
  * @param None
  * @retval None
  */
static void MX_USB_OTG_HS_USB_Init(void)
{
 8000c20:	b480      	push	{r7}
 8000c22:	af00      	add	r7, sp, #0
  /* USER CODE END USB_OTG_HS_Init 1 */
  /* USER CODE BEGIN USB_OTG_HS_Init 2 */

  /* USER CODE END USB_OTG_HS_Init 2 */

}
 8000c24:	bf00      	nop
 8000c26:	46bd      	mov	sp, r7
 8000c28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c2c:	4770      	bx	lr
	...

08000c30 <MX_FMC_Init>:

/* FMC initialization function */
static void MX_FMC_Init(void)
{
 8000c30:	b580      	push	{r7, lr}
 8000c32:	b088      	sub	sp, #32
 8000c34:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN FMC_Init 0 */

  /* USER CODE END FMC_Init 0 */

  FMC_NORSRAM_TimingTypeDef Timing = {0};
 8000c36:	1d3b      	adds	r3, r7, #4
 8000c38:	2200      	movs	r2, #0
 8000c3a:	601a      	str	r2, [r3, #0]
 8000c3c:	605a      	str	r2, [r3, #4]
 8000c3e:	609a      	str	r2, [r3, #8]
 8000c40:	60da      	str	r2, [r3, #12]
 8000c42:	611a      	str	r2, [r3, #16]
 8000c44:	615a      	str	r2, [r3, #20]
 8000c46:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN FMC_Init 1 */
  hnor1.CommandSet = (uint16_t)0x0001;
 8000c48:	4b29      	ldr	r3, [pc, #164]	; (8000cf0 <MX_FMC_Init+0xc0>)
 8000c4a:	2201      	movs	r2, #1
 8000c4c:	649a      	str	r2, [r3, #72]	; 0x48
  /* USER CODE END FMC_Init 1 */

  /** Perform the NOR1 memory initialization sequence
  */
  hnor1.Instance = FMC_NORSRAM_DEVICE;
 8000c4e:	4b28      	ldr	r3, [pc, #160]	; (8000cf0 <MX_FMC_Init+0xc0>)
 8000c50:	4a28      	ldr	r2, [pc, #160]	; (8000cf4 <MX_FMC_Init+0xc4>)
 8000c52:	601a      	str	r2, [r3, #0]
  hnor1.Extended = FMC_NORSRAM_EXTENDED_DEVICE;
 8000c54:	4b26      	ldr	r3, [pc, #152]	; (8000cf0 <MX_FMC_Init+0xc0>)
 8000c56:	4a28      	ldr	r2, [pc, #160]	; (8000cf8 <MX_FMC_Init+0xc8>)
 8000c58:	605a      	str	r2, [r3, #4]
  /* hnor1.Init */
  hnor1.Init.NSBank = FMC_NORSRAM_BANK1;
 8000c5a:	4b25      	ldr	r3, [pc, #148]	; (8000cf0 <MX_FMC_Init+0xc0>)
 8000c5c:	2200      	movs	r2, #0
 8000c5e:	609a      	str	r2, [r3, #8]
  hnor1.Init.DataAddressMux = FMC_DATA_ADDRESS_MUX_DISABLE;
 8000c60:	4b23      	ldr	r3, [pc, #140]	; (8000cf0 <MX_FMC_Init+0xc0>)
 8000c62:	2200      	movs	r2, #0
 8000c64:	60da      	str	r2, [r3, #12]
  hnor1.Init.MemoryType = FMC_MEMORY_TYPE_NOR;
 8000c66:	4b22      	ldr	r3, [pc, #136]	; (8000cf0 <MX_FMC_Init+0xc0>)
 8000c68:	2208      	movs	r2, #8
 8000c6a:	611a      	str	r2, [r3, #16]
  hnor1.Init.MemoryDataWidth = FMC_NORSRAM_MEM_BUS_WIDTH_8;
 8000c6c:	4b20      	ldr	r3, [pc, #128]	; (8000cf0 <MX_FMC_Init+0xc0>)
 8000c6e:	2200      	movs	r2, #0
 8000c70:	615a      	str	r2, [r3, #20]
  hnor1.Init.BurstAccessMode = FMC_BURST_ACCESS_MODE_DISABLE;
 8000c72:	4b1f      	ldr	r3, [pc, #124]	; (8000cf0 <MX_FMC_Init+0xc0>)
 8000c74:	2200      	movs	r2, #0
 8000c76:	619a      	str	r2, [r3, #24]
  hnor1.Init.WaitSignalPolarity = FMC_WAIT_SIGNAL_POLARITY_LOW;
 8000c78:	4b1d      	ldr	r3, [pc, #116]	; (8000cf0 <MX_FMC_Init+0xc0>)
 8000c7a:	2200      	movs	r2, #0
 8000c7c:	61da      	str	r2, [r3, #28]
  hnor1.Init.WaitSignalActive = FMC_WAIT_TIMING_BEFORE_WS;
 8000c7e:	4b1c      	ldr	r3, [pc, #112]	; (8000cf0 <MX_FMC_Init+0xc0>)
 8000c80:	2200      	movs	r2, #0
 8000c82:	621a      	str	r2, [r3, #32]
  hnor1.Init.WriteOperation = FMC_WRITE_OPERATION_ENABLE;
 8000c84:	4b1a      	ldr	r3, [pc, #104]	; (8000cf0 <MX_FMC_Init+0xc0>)
 8000c86:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8000c8a:	625a      	str	r2, [r3, #36]	; 0x24
  hnor1.Init.WaitSignal = FMC_WAIT_SIGNAL_DISABLE;
 8000c8c:	4b18      	ldr	r3, [pc, #96]	; (8000cf0 <MX_FMC_Init+0xc0>)
 8000c8e:	2200      	movs	r2, #0
 8000c90:	629a      	str	r2, [r3, #40]	; 0x28
  hnor1.Init.ExtendedMode = FMC_EXTENDED_MODE_DISABLE;
 8000c92:	4b17      	ldr	r3, [pc, #92]	; (8000cf0 <MX_FMC_Init+0xc0>)
 8000c94:	2200      	movs	r2, #0
 8000c96:	62da      	str	r2, [r3, #44]	; 0x2c
  hnor1.Init.AsynchronousWait = FMC_ASYNCHRONOUS_WAIT_DISABLE;
 8000c98:	4b15      	ldr	r3, [pc, #84]	; (8000cf0 <MX_FMC_Init+0xc0>)
 8000c9a:	2200      	movs	r2, #0
 8000c9c:	631a      	str	r2, [r3, #48]	; 0x30
  hnor1.Init.WriteBurst = FMC_WRITE_BURST_DISABLE;
 8000c9e:	4b14      	ldr	r3, [pc, #80]	; (8000cf0 <MX_FMC_Init+0xc0>)
 8000ca0:	2200      	movs	r2, #0
 8000ca2:	635a      	str	r2, [r3, #52]	; 0x34
  hnor1.Init.ContinuousClock = FMC_CONTINUOUS_CLOCK_SYNC_ONLY;
 8000ca4:	4b12      	ldr	r3, [pc, #72]	; (8000cf0 <MX_FMC_Init+0xc0>)
 8000ca6:	2200      	movs	r2, #0
 8000ca8:	639a      	str	r2, [r3, #56]	; 0x38
  hnor1.Init.WriteFifo = FMC_WRITE_FIFO_ENABLE;
 8000caa:	4b11      	ldr	r3, [pc, #68]	; (8000cf0 <MX_FMC_Init+0xc0>)
 8000cac:	2200      	movs	r2, #0
 8000cae:	63da      	str	r2, [r3, #60]	; 0x3c
  hnor1.Init.PageSize = FMC_PAGE_SIZE_NONE;
 8000cb0:	4b0f      	ldr	r3, [pc, #60]	; (8000cf0 <MX_FMC_Init+0xc0>)
 8000cb2:	2200      	movs	r2, #0
 8000cb4:	641a      	str	r2, [r3, #64]	; 0x40
  /* Timing */
  Timing.AddressSetupTime = 15;
 8000cb6:	230f      	movs	r3, #15
 8000cb8:	607b      	str	r3, [r7, #4]
  Timing.AddressHoldTime = 15;
 8000cba:	230f      	movs	r3, #15
 8000cbc:	60bb      	str	r3, [r7, #8]
  Timing.DataSetupTime = 255;
 8000cbe:	23ff      	movs	r3, #255	; 0xff
 8000cc0:	60fb      	str	r3, [r7, #12]
  Timing.BusTurnAroundDuration = 15;
 8000cc2:	230f      	movs	r3, #15
 8000cc4:	613b      	str	r3, [r7, #16]
  Timing.CLKDivision = 16;
 8000cc6:	2310      	movs	r3, #16
 8000cc8:	617b      	str	r3, [r7, #20]
  Timing.DataLatency = 17;
 8000cca:	2311      	movs	r3, #17
 8000ccc:	61bb      	str	r3, [r7, #24]
  Timing.AccessMode = FMC_ACCESS_MODE_A;
 8000cce:	2300      	movs	r3, #0
 8000cd0:	61fb      	str	r3, [r7, #28]
  /* ExtTiming */

  if (HAL_NOR_Init(&hnor1, &Timing, NULL) != HAL_OK)
 8000cd2:	1d3b      	adds	r3, r7, #4
 8000cd4:	2200      	movs	r2, #0
 8000cd6:	4619      	mov	r1, r3
 8000cd8:	4805      	ldr	r0, [pc, #20]	; (8000cf0 <MX_FMC_Init+0xc0>)
 8000cda:	f001 fecb 	bl	8002a74 <HAL_NOR_Init>
 8000cde:	4603      	mov	r3, r0
 8000ce0:	2b00      	cmp	r3, #0
 8000ce2:	d001      	beq.n	8000ce8 <MX_FMC_Init+0xb8>
  {
    Error_Handler( );
 8000ce4:	f000 fa04 	bl	80010f0 <Error_Handler>
  }

  /* USER CODE BEGIN FMC_Init 2 */

  /* USER CODE END FMC_Init 2 */
}
 8000ce8:	bf00      	nop
 8000cea:	3720      	adds	r7, #32
 8000cec:	46bd      	mov	sp, r7
 8000cee:	bd80      	pop	{r7, pc}
 8000cf0:	20000e0c 	.word	0x20000e0c
 8000cf4:	52004000 	.word	0x52004000
 8000cf8:	52004104 	.word	0x52004104

08000cfc <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000cfc:	b580      	push	{r7, lr}
 8000cfe:	b08c      	sub	sp, #48	; 0x30
 8000d00:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000d02:	f107 031c 	add.w	r3, r7, #28
 8000d06:	2200      	movs	r2, #0
 8000d08:	601a      	str	r2, [r3, #0]
 8000d0a:	605a      	str	r2, [r3, #4]
 8000d0c:	609a      	str	r2, [r3, #8]
 8000d0e:	60da      	str	r2, [r3, #12]
 8000d10:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000d12:	4b6a      	ldr	r3, [pc, #424]	; (8000ebc <MX_GPIO_Init+0x1c0>)
 8000d14:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000d18:	4a68      	ldr	r2, [pc, #416]	; (8000ebc <MX_GPIO_Init+0x1c0>)
 8000d1a:	f043 0304 	orr.w	r3, r3, #4
 8000d1e:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000d22:	4b66      	ldr	r3, [pc, #408]	; (8000ebc <MX_GPIO_Init+0x1c0>)
 8000d24:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000d28:	f003 0304 	and.w	r3, r3, #4
 8000d2c:	61bb      	str	r3, [r7, #24]
 8000d2e:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8000d30:	4b62      	ldr	r3, [pc, #392]	; (8000ebc <MX_GPIO_Init+0x1c0>)
 8000d32:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000d36:	4a61      	ldr	r2, [pc, #388]	; (8000ebc <MX_GPIO_Init+0x1c0>)
 8000d38:	f043 0320 	orr.w	r3, r3, #32
 8000d3c:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000d40:	4b5e      	ldr	r3, [pc, #376]	; (8000ebc <MX_GPIO_Init+0x1c0>)
 8000d42:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000d46:	f003 0320 	and.w	r3, r3, #32
 8000d4a:	617b      	str	r3, [r7, #20]
 8000d4c:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000d4e:	4b5b      	ldr	r3, [pc, #364]	; (8000ebc <MX_GPIO_Init+0x1c0>)
 8000d50:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000d54:	4a59      	ldr	r2, [pc, #356]	; (8000ebc <MX_GPIO_Init+0x1c0>)
 8000d56:	f043 0302 	orr.w	r3, r3, #2
 8000d5a:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000d5e:	4b57      	ldr	r3, [pc, #348]	; (8000ebc <MX_GPIO_Init+0x1c0>)
 8000d60:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000d64:	f003 0302 	and.w	r3, r3, #2
 8000d68:	613b      	str	r3, [r7, #16]
 8000d6a:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8000d6c:	4b53      	ldr	r3, [pc, #332]	; (8000ebc <MX_GPIO_Init+0x1c0>)
 8000d6e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000d72:	4a52      	ldr	r2, [pc, #328]	; (8000ebc <MX_GPIO_Init+0x1c0>)
 8000d74:	f043 0310 	orr.w	r3, r3, #16
 8000d78:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000d7c:	4b4f      	ldr	r3, [pc, #316]	; (8000ebc <MX_GPIO_Init+0x1c0>)
 8000d7e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000d82:	f003 0310 	and.w	r3, r3, #16
 8000d86:	60fb      	str	r3, [r7, #12]
 8000d88:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000d8a:	4b4c      	ldr	r3, [pc, #304]	; (8000ebc <MX_GPIO_Init+0x1c0>)
 8000d8c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000d90:	4a4a      	ldr	r2, [pc, #296]	; (8000ebc <MX_GPIO_Init+0x1c0>)
 8000d92:	f043 0308 	orr.w	r3, r3, #8
 8000d96:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000d9a:	4b48      	ldr	r3, [pc, #288]	; (8000ebc <MX_GPIO_Init+0x1c0>)
 8000d9c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000da0:	f003 0308 	and.w	r3, r3, #8
 8000da4:	60bb      	str	r3, [r7, #8]
 8000da6:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8000da8:	4b44      	ldr	r3, [pc, #272]	; (8000ebc <MX_GPIO_Init+0x1c0>)
 8000daa:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000dae:	4a43      	ldr	r2, [pc, #268]	; (8000ebc <MX_GPIO_Init+0x1c0>)
 8000db0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000db4:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000db8:	4b40      	ldr	r3, [pc, #256]	; (8000ebc <MX_GPIO_Init+0x1c0>)
 8000dba:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000dbe:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000dc2:	607b      	str	r3, [r7, #4]
 8000dc4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000dc6:	4b3d      	ldr	r3, [pc, #244]	; (8000ebc <MX_GPIO_Init+0x1c0>)
 8000dc8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000dcc:	4a3b      	ldr	r2, [pc, #236]	; (8000ebc <MX_GPIO_Init+0x1c0>)
 8000dce:	f043 0301 	orr.w	r3, r3, #1
 8000dd2:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000dd6:	4b39      	ldr	r3, [pc, #228]	; (8000ebc <MX_GPIO_Init+0x1c0>)
 8000dd8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000ddc:	f003 0301 	and.w	r3, r3, #1
 8000de0:	603b      	str	r3, [r7, #0]
 8000de2:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LED_GREEN_Pin|LED_RED_Pin, GPIO_PIN_RESET);
 8000de4:	2200      	movs	r2, #0
 8000de6:	f244 0101 	movw	r1, #16385	; 0x4001
 8000dea:	4835      	ldr	r0, [pc, #212]	; (8000ec0 <MX_GPIO_Init+0x1c4>)
 8000dec:	f001 fe28 	bl	8002a40 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, USB_FS_PWR_EN_Pin|GPIO_PIN_11|GPIO_PIN_3, GPIO_PIN_RESET);
 8000df0:	2200      	movs	r2, #0
 8000df2:	f640 4108 	movw	r1, #3080	; 0xc08
 8000df6:	4833      	ldr	r0, [pc, #204]	; (8000ec4 <MX_GPIO_Init+0x1c8>)
 8000df8:	f001 fe22 	bl	8002a40 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED_YELLOW_GPIO_Port, LED_YELLOW_Pin, GPIO_PIN_RESET);
 8000dfc:	2200      	movs	r2, #0
 8000dfe:	2102      	movs	r1, #2
 8000e00:	4831      	ldr	r0, [pc, #196]	; (8000ec8 <MX_GPIO_Init+0x1cc>)
 8000e02:	f001 fe1d 	bl	8002a40 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8000e06:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000e0a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000e0c:	2300      	movs	r3, #0
 8000e0e:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e10:	2300      	movs	r3, #0
 8000e12:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8000e14:	f107 031c 	add.w	r3, r7, #28
 8000e18:	4619      	mov	r1, r3
 8000e1a:	482c      	ldr	r0, [pc, #176]	; (8000ecc <MX_GPIO_Init+0x1d0>)
 8000e1c:	f001 fc68 	bl	80026f0 <HAL_GPIO_Init>

  /*Configure GPIO pins : LED_GREEN_Pin LED_RED_Pin */
  GPIO_InitStruct.Pin = LED_GREEN_Pin|LED_RED_Pin;
 8000e20:	f244 0301 	movw	r3, #16385	; 0x4001
 8000e24:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000e26:	2301      	movs	r3, #1
 8000e28:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e2a:	2300      	movs	r3, #0
 8000e2c:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000e2e:	2300      	movs	r3, #0
 8000e30:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000e32:	f107 031c 	add.w	r3, r7, #28
 8000e36:	4619      	mov	r1, r3
 8000e38:	4821      	ldr	r0, [pc, #132]	; (8000ec0 <MX_GPIO_Init+0x1c4>)
 8000e3a:	f001 fc59 	bl	80026f0 <HAL_GPIO_Init>

  /*Configure GPIO pins : USB_FS_PWR_EN_Pin PD11 PD3 */
  GPIO_InitStruct.Pin = USB_FS_PWR_EN_Pin|GPIO_PIN_11|GPIO_PIN_3;
 8000e3e:	f640 4308 	movw	r3, #3080	; 0xc08
 8000e42:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000e44:	2301      	movs	r3, #1
 8000e46:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e48:	2300      	movs	r3, #0
 8000e4a:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000e4c:	2300      	movs	r3, #0
 8000e4e:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000e50:	f107 031c 	add.w	r3, r7, #28
 8000e54:	4619      	mov	r1, r3
 8000e56:	481b      	ldr	r0, [pc, #108]	; (8000ec4 <MX_GPIO_Init+0x1c8>)
 8000e58:	f001 fc4a 	bl	80026f0 <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_FS_OVCR_Pin */
  GPIO_InitStruct.Pin = USB_FS_OVCR_Pin;
 8000e5c:	2380      	movs	r3, #128	; 0x80
 8000e5e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000e60:	4b1b      	ldr	r3, [pc, #108]	; (8000ed0 <MX_GPIO_Init+0x1d4>)
 8000e62:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e64:	2300      	movs	r3, #0
 8000e66:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(USB_FS_OVCR_GPIO_Port, &GPIO_InitStruct);
 8000e68:	f107 031c 	add.w	r3, r7, #28
 8000e6c:	4619      	mov	r1, r3
 8000e6e:	4819      	ldr	r0, [pc, #100]	; (8000ed4 <MX_GPIO_Init+0x1d8>)
 8000e70:	f001 fc3e 	bl	80026f0 <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_FS_ID_Pin */
  GPIO_InitStruct.Pin = USB_FS_ID_Pin;
 8000e74:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000e78:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000e7a:	2302      	movs	r3, #2
 8000e7c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e7e:	2300      	movs	r3, #0
 8000e80:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000e82:	2300      	movs	r3, #0
 8000e84:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG1_HS;
 8000e86:	230a      	movs	r3, #10
 8000e88:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(USB_FS_ID_GPIO_Port, &GPIO_InitStruct);
 8000e8a:	f107 031c 	add.w	r3, r7, #28
 8000e8e:	4619      	mov	r1, r3
 8000e90:	4811      	ldr	r0, [pc, #68]	; (8000ed8 <MX_GPIO_Init+0x1dc>)
 8000e92:	f001 fc2d 	bl	80026f0 <HAL_GPIO_Init>

  /*Configure GPIO pin : LED_YELLOW_Pin */
  GPIO_InitStruct.Pin = LED_YELLOW_Pin;
 8000e96:	2302      	movs	r3, #2
 8000e98:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000e9a:	2301      	movs	r3, #1
 8000e9c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e9e:	2300      	movs	r3, #0
 8000ea0:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000ea2:	2300      	movs	r3, #0
 8000ea4:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(LED_YELLOW_GPIO_Port, &GPIO_InitStruct);
 8000ea6:	f107 031c 	add.w	r3, r7, #28
 8000eaa:	4619      	mov	r1, r3
 8000eac:	4806      	ldr	r0, [pc, #24]	; (8000ec8 <MX_GPIO_Init+0x1cc>)
 8000eae:	f001 fc1f 	bl	80026f0 <HAL_GPIO_Init>

}
 8000eb2:	bf00      	nop
 8000eb4:	3730      	adds	r7, #48	; 0x30
 8000eb6:	46bd      	mov	sp, r7
 8000eb8:	bd80      	pop	{r7, pc}
 8000eba:	bf00      	nop
 8000ebc:	58024400 	.word	0x58024400
 8000ec0:	58020400 	.word	0x58020400
 8000ec4:	58020c00 	.word	0x58020c00
 8000ec8:	58021000 	.word	0x58021000
 8000ecc:	58020800 	.word	0x58020800
 8000ed0:	11110000 	.word	0x11110000
 8000ed4:	58021800 	.word	0x58021800
 8000ed8:	58020000 	.word	0x58020000

08000edc <print_network_information>:

/* USER CODE BEGIN 4 */
void print_network_information(void)
{
 8000edc:	b5b0      	push	{r4, r5, r7, lr}
 8000ede:	b084      	sub	sp, #16
 8000ee0:	af04      	add	r7, sp, #16
	wizchip_getnetinfo(&gWIZNETINFO);
 8000ee2:	483f      	ldr	r0, [pc, #252]	; (8000fe0 <print_network_information+0x104>)
 8000ee4:	f008 f91e 	bl	8009124 <wizchip_getnetinfo>

	printf("Mac address: %02x:%02x:%02x:%02x:%02x:%02x\n\r",gWIZNETINFO.mac[0],gWIZNETINFO.mac[1],gWIZNETINFO.mac[2],gWIZNETINFO.mac[3],gWIZNETINFO.mac[4],gWIZNETINFO.mac[5]);
 8000ee8:	4b3d      	ldr	r3, [pc, #244]	; (8000fe0 <print_network_information+0x104>)
 8000eea:	781b      	ldrb	r3, [r3, #0]
 8000eec:	4618      	mov	r0, r3
 8000eee:	4b3c      	ldr	r3, [pc, #240]	; (8000fe0 <print_network_information+0x104>)
 8000ef0:	785b      	ldrb	r3, [r3, #1]
 8000ef2:	461c      	mov	r4, r3
 8000ef4:	4b3a      	ldr	r3, [pc, #232]	; (8000fe0 <print_network_information+0x104>)
 8000ef6:	789b      	ldrb	r3, [r3, #2]
 8000ef8:	461d      	mov	r5, r3
 8000efa:	4b39      	ldr	r3, [pc, #228]	; (8000fe0 <print_network_information+0x104>)
 8000efc:	78db      	ldrb	r3, [r3, #3]
 8000efe:	461a      	mov	r2, r3
 8000f00:	4b37      	ldr	r3, [pc, #220]	; (8000fe0 <print_network_information+0x104>)
 8000f02:	791b      	ldrb	r3, [r3, #4]
 8000f04:	4619      	mov	r1, r3
 8000f06:	4b36      	ldr	r3, [pc, #216]	; (8000fe0 <print_network_information+0x104>)
 8000f08:	795b      	ldrb	r3, [r3, #5]
 8000f0a:	9302      	str	r3, [sp, #8]
 8000f0c:	9101      	str	r1, [sp, #4]
 8000f0e:	9200      	str	r2, [sp, #0]
 8000f10:	462b      	mov	r3, r5
 8000f12:	4622      	mov	r2, r4
 8000f14:	4601      	mov	r1, r0
 8000f16:	4833      	ldr	r0, [pc, #204]	; (8000fe4 <print_network_information+0x108>)
 8000f18:	f008 fa96 	bl	8009448 <iprintf>
	printf("IP address : %d.%d.%d.%d\n\r",gWIZNETINFO.ip[0],gWIZNETINFO.ip[1],gWIZNETINFO.ip[2],gWIZNETINFO.ip[3]);
 8000f1c:	4b30      	ldr	r3, [pc, #192]	; (8000fe0 <print_network_information+0x104>)
 8000f1e:	799b      	ldrb	r3, [r3, #6]
 8000f20:	4619      	mov	r1, r3
 8000f22:	4b2f      	ldr	r3, [pc, #188]	; (8000fe0 <print_network_information+0x104>)
 8000f24:	79db      	ldrb	r3, [r3, #7]
 8000f26:	461a      	mov	r2, r3
 8000f28:	4b2d      	ldr	r3, [pc, #180]	; (8000fe0 <print_network_information+0x104>)
 8000f2a:	7a1b      	ldrb	r3, [r3, #8]
 8000f2c:	4618      	mov	r0, r3
 8000f2e:	4b2c      	ldr	r3, [pc, #176]	; (8000fe0 <print_network_information+0x104>)
 8000f30:	7a5b      	ldrb	r3, [r3, #9]
 8000f32:	9300      	str	r3, [sp, #0]
 8000f34:	4603      	mov	r3, r0
 8000f36:	482c      	ldr	r0, [pc, #176]	; (8000fe8 <print_network_information+0x10c>)
 8000f38:	f008 fa86 	bl	8009448 <iprintf>
	printf("SM Mask    : %d.%d.%d.%d\n\r",gWIZNETINFO.sn[0],gWIZNETINFO.sn[1],gWIZNETINFO.sn[2],gWIZNETINFO.sn[3]);
 8000f3c:	4b28      	ldr	r3, [pc, #160]	; (8000fe0 <print_network_information+0x104>)
 8000f3e:	7a9b      	ldrb	r3, [r3, #10]
 8000f40:	4619      	mov	r1, r3
 8000f42:	4b27      	ldr	r3, [pc, #156]	; (8000fe0 <print_network_information+0x104>)
 8000f44:	7adb      	ldrb	r3, [r3, #11]
 8000f46:	461a      	mov	r2, r3
 8000f48:	4b25      	ldr	r3, [pc, #148]	; (8000fe0 <print_network_information+0x104>)
 8000f4a:	7b1b      	ldrb	r3, [r3, #12]
 8000f4c:	4618      	mov	r0, r3
 8000f4e:	4b24      	ldr	r3, [pc, #144]	; (8000fe0 <print_network_information+0x104>)
 8000f50:	7b5b      	ldrb	r3, [r3, #13]
 8000f52:	9300      	str	r3, [sp, #0]
 8000f54:	4603      	mov	r3, r0
 8000f56:	4825      	ldr	r0, [pc, #148]	; (8000fec <print_network_information+0x110>)
 8000f58:	f008 fa76 	bl	8009448 <iprintf>
	printf("Gate way   : %d.%d.%d.%d\n\r",gWIZNETINFO.gw[0],gWIZNETINFO.gw[1],gWIZNETINFO.gw[2],gWIZNETINFO.gw[3]);
 8000f5c:	4b20      	ldr	r3, [pc, #128]	; (8000fe0 <print_network_information+0x104>)
 8000f5e:	7b9b      	ldrb	r3, [r3, #14]
 8000f60:	4619      	mov	r1, r3
 8000f62:	4b1f      	ldr	r3, [pc, #124]	; (8000fe0 <print_network_information+0x104>)
 8000f64:	7bdb      	ldrb	r3, [r3, #15]
 8000f66:	461a      	mov	r2, r3
 8000f68:	4b1d      	ldr	r3, [pc, #116]	; (8000fe0 <print_network_information+0x104>)
 8000f6a:	7c1b      	ldrb	r3, [r3, #16]
 8000f6c:	4618      	mov	r0, r3
 8000f6e:	4b1c      	ldr	r3, [pc, #112]	; (8000fe0 <print_network_information+0x104>)
 8000f70:	7c5b      	ldrb	r3, [r3, #17]
 8000f72:	9300      	str	r3, [sp, #0]
 8000f74:	4603      	mov	r3, r0
 8000f76:	481e      	ldr	r0, [pc, #120]	; (8000ff0 <print_network_information+0x114>)
 8000f78:	f008 fa66 	bl	8009448 <iprintf>
	printf("DNS Server : %d.%d.%d.%d\n\r",gWIZNETINFO.dns[0],gWIZNETINFO.dns[1],gWIZNETINFO.dns[2],gWIZNETINFO.dns[3]);
 8000f7c:	4b18      	ldr	r3, [pc, #96]	; (8000fe0 <print_network_information+0x104>)
 8000f7e:	f893 3052 	ldrb.w	r3, [r3, #82]	; 0x52
 8000f82:	4619      	mov	r1, r3
 8000f84:	4b16      	ldr	r3, [pc, #88]	; (8000fe0 <print_network_information+0x104>)
 8000f86:	f893 3053 	ldrb.w	r3, [r3, #83]	; 0x53
 8000f8a:	461a      	mov	r2, r3
 8000f8c:	4b14      	ldr	r3, [pc, #80]	; (8000fe0 <print_network_information+0x104>)
 8000f8e:	f893 3054 	ldrb.w	r3, [r3, #84]	; 0x54
 8000f92:	4618      	mov	r0, r3
 8000f94:	4b12      	ldr	r3, [pc, #72]	; (8000fe0 <print_network_information+0x104>)
 8000f96:	f893 3055 	ldrb.w	r3, [r3, #85]	; 0x55
 8000f9a:	9300      	str	r3, [sp, #0]
 8000f9c:	4603      	mov	r3, r0
 8000f9e:	4815      	ldr	r0, [pc, #84]	; (8000ff4 <print_network_information+0x118>)
 8000fa0:	f008 fa52 	bl	8009448 <iprintf>


	print_ipv6_addr("GW6 ", gWIZNETINFO.gw6);
 8000fa4:	4914      	ldr	r1, [pc, #80]	; (8000ff8 <print_network_information+0x11c>)
 8000fa6:	4815      	ldr	r0, [pc, #84]	; (8000ffc <print_network_information+0x120>)
 8000fa8:	f000 f83a 	bl	8001020 <print_ipv6_addr>
	print_ipv6_addr("LLA ", gWIZNETINFO.lla);
 8000fac:	4914      	ldr	r1, [pc, #80]	; (8001000 <print_network_information+0x124>)
 8000fae:	4815      	ldr	r0, [pc, #84]	; (8001004 <print_network_information+0x128>)
 8000fb0:	f000 f836 	bl	8001020 <print_ipv6_addr>
	print_ipv6_addr("GUA ", gWIZNETINFO.gua);
 8000fb4:	4914      	ldr	r1, [pc, #80]	; (8001008 <print_network_information+0x12c>)
 8000fb6:	4815      	ldr	r0, [pc, #84]	; (800100c <print_network_information+0x130>)
 8000fb8:	f000 f832 	bl	8001020 <print_ipv6_addr>
	print_ipv6_addr("SUB6", gWIZNETINFO.sn6);
 8000fbc:	4914      	ldr	r1, [pc, #80]	; (8001010 <print_network_information+0x134>)
 8000fbe:	4815      	ldr	r0, [pc, #84]	; (8001014 <print_network_information+0x138>)
 8000fc0:	f000 f82e 	bl	8001020 <print_ipv6_addr>


	printf("\r\nNETCFGLOCK : %x\r\n", getNETLCKR());
 8000fc4:	4814      	ldr	r0, [pc, #80]	; (8001018 <print_network_information+0x13c>)
 8000fc6:	f006 f8c5 	bl	8007154 <WIZCHIP_READ>
 8000fca:	4603      	mov	r3, r0
 8000fcc:	119b      	asrs	r3, r3, #6
 8000fce:	f003 0301 	and.w	r3, r3, #1
 8000fd2:	4619      	mov	r1, r3
 8000fd4:	4811      	ldr	r0, [pc, #68]	; (800101c <print_network_information+0x140>)
 8000fd6:	f008 fa37 	bl	8009448 <iprintf>
}
 8000fda:	bf00      	nop
 8000fdc:	46bd      	mov	sp, r7
 8000fde:	bdb0      	pop	{r4, r5, r7, pc}
 8000fe0:	20000000 	.word	0x20000000
 8000fe4:	0800a49c 	.word	0x0800a49c
 8000fe8:	0800a4cc 	.word	0x0800a4cc
 8000fec:	0800a4e8 	.word	0x0800a4e8
 8000ff0:	0800a504 	.word	0x0800a504
 8000ff4:	0800a520 	.word	0x0800a520
 8000ff8:	20000042 	.word	0x20000042
 8000ffc:	0800a53c 	.word	0x0800a53c
 8001000:	20000012 	.word	0x20000012
 8001004:	0800a544 	.word	0x0800a544
 8001008:	20000022 	.word	0x20000022
 800100c:	0800a54c 	.word	0x0800a54c
 8001010:	20000032 	.word	0x20000032
 8001014:	0800a554 	.word	0x0800a554
 8001018:	60200000 	.word	0x60200000
 800101c:	0800a55c 	.word	0x0800a55c

08001020 <print_ipv6_addr>:

void print_ipv6_addr(uint8_t* name, uint8_t* ip6addr)
{
 8001020:	b580      	push	{r7, lr}
 8001022:	b082      	sub	sp, #8
 8001024:	af00      	add	r7, sp, #0
 8001026:	6078      	str	r0, [r7, #4]
 8001028:	6039      	str	r1, [r7, #0]
	printf("%s : ", name);
 800102a:	6879      	ldr	r1, [r7, #4]
 800102c:	482c      	ldr	r0, [pc, #176]	; (80010e0 <print_ipv6_addr+0xc0>)
 800102e:	f008 fa0b 	bl	8009448 <iprintf>
	printf("%04X:%04X", ((uint16_t)ip6addr[0] << 8) | ((uint16_t)ip6addr[1]), ((uint16_t)ip6addr[2] << 8) | ((uint16_t)ip6addr[3]));
 8001032:	683b      	ldr	r3, [r7, #0]
 8001034:	781b      	ldrb	r3, [r3, #0]
 8001036:	021b      	lsls	r3, r3, #8
 8001038:	683a      	ldr	r2, [r7, #0]
 800103a:	3201      	adds	r2, #1
 800103c:	7812      	ldrb	r2, [r2, #0]
 800103e:	ea43 0102 	orr.w	r1, r3, r2
 8001042:	683b      	ldr	r3, [r7, #0]
 8001044:	3302      	adds	r3, #2
 8001046:	781b      	ldrb	r3, [r3, #0]
 8001048:	021b      	lsls	r3, r3, #8
 800104a:	683a      	ldr	r2, [r7, #0]
 800104c:	3203      	adds	r2, #3
 800104e:	7812      	ldrb	r2, [r2, #0]
 8001050:	4313      	orrs	r3, r2
 8001052:	461a      	mov	r2, r3
 8001054:	4823      	ldr	r0, [pc, #140]	; (80010e4 <print_ipv6_addr+0xc4>)
 8001056:	f008 f9f7 	bl	8009448 <iprintf>
	printf(":%04X:%04X", ((uint16_t)ip6addr[4] << 8) | ((uint16_t)ip6addr[5]), ((uint16_t)ip6addr[6] << 8) | ((uint16_t)ip6addr[7]));
 800105a:	683b      	ldr	r3, [r7, #0]
 800105c:	3304      	adds	r3, #4
 800105e:	781b      	ldrb	r3, [r3, #0]
 8001060:	021b      	lsls	r3, r3, #8
 8001062:	683a      	ldr	r2, [r7, #0]
 8001064:	3205      	adds	r2, #5
 8001066:	7812      	ldrb	r2, [r2, #0]
 8001068:	ea43 0102 	orr.w	r1, r3, r2
 800106c:	683b      	ldr	r3, [r7, #0]
 800106e:	3306      	adds	r3, #6
 8001070:	781b      	ldrb	r3, [r3, #0]
 8001072:	021b      	lsls	r3, r3, #8
 8001074:	683a      	ldr	r2, [r7, #0]
 8001076:	3207      	adds	r2, #7
 8001078:	7812      	ldrb	r2, [r2, #0]
 800107a:	4313      	orrs	r3, r2
 800107c:	461a      	mov	r2, r3
 800107e:	481a      	ldr	r0, [pc, #104]	; (80010e8 <print_ipv6_addr+0xc8>)
 8001080:	f008 f9e2 	bl	8009448 <iprintf>
	printf(":%04X:%04X", ((uint16_t)ip6addr[8] << 8) | ((uint16_t)ip6addr[9]), ((uint16_t)ip6addr[10] << 8) | ((uint16_t)ip6addr[11]));
 8001084:	683b      	ldr	r3, [r7, #0]
 8001086:	3308      	adds	r3, #8
 8001088:	781b      	ldrb	r3, [r3, #0]
 800108a:	021b      	lsls	r3, r3, #8
 800108c:	683a      	ldr	r2, [r7, #0]
 800108e:	3209      	adds	r2, #9
 8001090:	7812      	ldrb	r2, [r2, #0]
 8001092:	ea43 0102 	orr.w	r1, r3, r2
 8001096:	683b      	ldr	r3, [r7, #0]
 8001098:	330a      	adds	r3, #10
 800109a:	781b      	ldrb	r3, [r3, #0]
 800109c:	021b      	lsls	r3, r3, #8
 800109e:	683a      	ldr	r2, [r7, #0]
 80010a0:	320b      	adds	r2, #11
 80010a2:	7812      	ldrb	r2, [r2, #0]
 80010a4:	4313      	orrs	r3, r2
 80010a6:	461a      	mov	r2, r3
 80010a8:	480f      	ldr	r0, [pc, #60]	; (80010e8 <print_ipv6_addr+0xc8>)
 80010aa:	f008 f9cd 	bl	8009448 <iprintf>
	printf(":%04X:%04X\r\n", ((uint16_t)ip6addr[12] << 8) | ((uint16_t)ip6addr[13]), ((uint16_t)ip6addr[14] << 8) | ((uint16_t)ip6addr[15]));
 80010ae:	683b      	ldr	r3, [r7, #0]
 80010b0:	330c      	adds	r3, #12
 80010b2:	781b      	ldrb	r3, [r3, #0]
 80010b4:	021b      	lsls	r3, r3, #8
 80010b6:	683a      	ldr	r2, [r7, #0]
 80010b8:	320d      	adds	r2, #13
 80010ba:	7812      	ldrb	r2, [r2, #0]
 80010bc:	ea43 0102 	orr.w	r1, r3, r2
 80010c0:	683b      	ldr	r3, [r7, #0]
 80010c2:	330e      	adds	r3, #14
 80010c4:	781b      	ldrb	r3, [r3, #0]
 80010c6:	021b      	lsls	r3, r3, #8
 80010c8:	683a      	ldr	r2, [r7, #0]
 80010ca:	320f      	adds	r2, #15
 80010cc:	7812      	ldrb	r2, [r2, #0]
 80010ce:	4313      	orrs	r3, r2
 80010d0:	461a      	mov	r2, r3
 80010d2:	4806      	ldr	r0, [pc, #24]	; (80010ec <print_ipv6_addr+0xcc>)
 80010d4:	f008 f9b8 	bl	8009448 <iprintf>
}
 80010d8:	bf00      	nop
 80010da:	3708      	adds	r7, #8
 80010dc:	46bd      	mov	sp, r7
 80010de:	bd80      	pop	{r7, pc}
 80010e0:	0800a570 	.word	0x0800a570
 80010e4:	0800a578 	.word	0x0800a578
 80010e8:	0800a584 	.word	0x0800a584
 80010ec:	0800a590 	.word	0x0800a590

080010f0 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80010f0:	b480      	push	{r7}
 80010f2:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80010f4:	b672      	cpsid	i
}
 80010f6:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80010f8:	e7fe      	b.n	80010f8 <Error_Handler+0x8>
	...

080010fc <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80010fc:	b480      	push	{r7}
 80010fe:	b083      	sub	sp, #12
 8001100:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001102:	4b0a      	ldr	r3, [pc, #40]	; (800112c <HAL_MspInit+0x30>)
 8001104:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8001108:	4a08      	ldr	r2, [pc, #32]	; (800112c <HAL_MspInit+0x30>)
 800110a:	f043 0302 	orr.w	r3, r3, #2
 800110e:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 8001112:	4b06      	ldr	r3, [pc, #24]	; (800112c <HAL_MspInit+0x30>)
 8001114:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8001118:	f003 0302 	and.w	r3, r3, #2
 800111c:	607b      	str	r3, [r7, #4]
 800111e:	687b      	ldr	r3, [r7, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001120:	bf00      	nop
 8001122:	370c      	adds	r7, #12
 8001124:	46bd      	mov	sp, r7
 8001126:	f85d 7b04 	ldr.w	r7, [sp], #4
 800112a:	4770      	bx	lr
 800112c:	58024400 	.word	0x58024400

08001130 <HAL_DMA2D_MspInit>:
* This function configures the hardware resources used in this example
* @param hdma2d: DMA2D handle pointer
* @retval None
*/
void HAL_DMA2D_MspInit(DMA2D_HandleTypeDef* hdma2d)
{
 8001130:	b480      	push	{r7}
 8001132:	b085      	sub	sp, #20
 8001134:	af00      	add	r7, sp, #0
 8001136:	6078      	str	r0, [r7, #4]
  if(hdma2d->Instance==DMA2D)
 8001138:	687b      	ldr	r3, [r7, #4]
 800113a:	681b      	ldr	r3, [r3, #0]
 800113c:	4a0b      	ldr	r2, [pc, #44]	; (800116c <HAL_DMA2D_MspInit+0x3c>)
 800113e:	4293      	cmp	r3, r2
 8001140:	d10e      	bne.n	8001160 <HAL_DMA2D_MspInit+0x30>
  {
  /* USER CODE BEGIN DMA2D_MspInit 0 */

  /* USER CODE END DMA2D_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_DMA2D_CLK_ENABLE();
 8001142:	4b0b      	ldr	r3, [pc, #44]	; (8001170 <HAL_DMA2D_MspInit+0x40>)
 8001144:	f8d3 30d4 	ldr.w	r3, [r3, #212]	; 0xd4
 8001148:	4a09      	ldr	r2, [pc, #36]	; (8001170 <HAL_DMA2D_MspInit+0x40>)
 800114a:	f043 0310 	orr.w	r3, r3, #16
 800114e:	f8c2 30d4 	str.w	r3, [r2, #212]	; 0xd4
 8001152:	4b07      	ldr	r3, [pc, #28]	; (8001170 <HAL_DMA2D_MspInit+0x40>)
 8001154:	f8d3 30d4 	ldr.w	r3, [r3, #212]	; 0xd4
 8001158:	f003 0310 	and.w	r3, r3, #16
 800115c:	60fb      	str	r3, [r7, #12]
 800115e:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN DMA2D_MspInit 1 */

  /* USER CODE END DMA2D_MspInit 1 */
  }

}
 8001160:	bf00      	nop
 8001162:	3714      	adds	r7, #20
 8001164:	46bd      	mov	sp, r7
 8001166:	f85d 7b04 	ldr.w	r7, [sp], #4
 800116a:	4770      	bx	lr
 800116c:	52001000 	.word	0x52001000
 8001170:	58024400 	.word	0x58024400

08001174 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001174:	b580      	push	{r7, lr}
 8001176:	b0b6      	sub	sp, #216	; 0xd8
 8001178:	af00      	add	r7, sp, #0
 800117a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800117c:	f107 03c4 	add.w	r3, r7, #196	; 0xc4
 8001180:	2200      	movs	r2, #0
 8001182:	601a      	str	r2, [r3, #0]
 8001184:	605a      	str	r2, [r3, #4]
 8001186:	609a      	str	r2, [r3, #8]
 8001188:	60da      	str	r2, [r3, #12]
 800118a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 800118c:	f107 0310 	add.w	r3, r7, #16
 8001190:	22b4      	movs	r2, #180	; 0xb4
 8001192:	2100      	movs	r1, #0
 8001194:	4618      	mov	r0, r3
 8001196:	f008 f94f 	bl	8009438 <memset>
  if(huart->Instance==USART3)
 800119a:	687b      	ldr	r3, [r7, #4]
 800119c:	681b      	ldr	r3, [r3, #0]
 800119e:	4a31      	ldr	r2, [pc, #196]	; (8001264 <HAL_UART_MspInit+0xf0>)
 80011a0:	4293      	cmp	r3, r2
 80011a2:	d15a      	bne.n	800125a <HAL_UART_MspInit+0xe6>
  /* USER CODE BEGIN USART3_MspInit 0 */

  /* USER CODE END USART3_MspInit 0 */
  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 80011a4:	2302      	movs	r3, #2
 80011a6:	613b      	str	r3, [r7, #16]
    PeriphClkInitStruct.PLL2.PLL2M = 1;
 80011a8:	2301      	movs	r3, #1
 80011aa:	617b      	str	r3, [r7, #20]
    PeriphClkInitStruct.PLL2.PLL2N = 80;
 80011ac:	2350      	movs	r3, #80	; 0x50
 80011ae:	61bb      	str	r3, [r7, #24]
    PeriphClkInitStruct.PLL2.PLL2P = 2;
 80011b0:	2302      	movs	r3, #2
 80011b2:	61fb      	str	r3, [r7, #28]
    PeriphClkInitStruct.PLL2.PLL2Q = 40;
 80011b4:	2328      	movs	r3, #40	; 0x28
 80011b6:	623b      	str	r3, [r7, #32]
    PeriphClkInitStruct.PLL2.PLL2R = 2;
 80011b8:	2302      	movs	r3, #2
 80011ba:	627b      	str	r3, [r7, #36]	; 0x24
    PeriphClkInitStruct.PLL2.PLL2RGE = RCC_PLL2VCIRANGE_2;
 80011bc:	2380      	movs	r3, #128	; 0x80
 80011be:	62bb      	str	r3, [r7, #40]	; 0x28
    PeriphClkInitStruct.PLL2.PLL2VCOSEL = RCC_PLL2VCOWIDE;
 80011c0:	2300      	movs	r3, #0
 80011c2:	62fb      	str	r3, [r7, #44]	; 0x2c
    PeriphClkInitStruct.PLL2.PLL2FRACN = 0;
 80011c4:	2300      	movs	r3, #0
 80011c6:	633b      	str	r3, [r7, #48]	; 0x30
    PeriphClkInitStruct.Usart234578ClockSelection = RCC_USART234578CLKSOURCE_PLL2;
 80011c8:	2301      	movs	r3, #1
 80011ca:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80011ce:	f107 0310 	add.w	r3, r7, #16
 80011d2:	4618      	mov	r0, r3
 80011d4:	f002 fc82 	bl	8003adc <HAL_RCCEx_PeriphCLKConfig>
 80011d8:	4603      	mov	r3, r0
 80011da:	2b00      	cmp	r3, #0
 80011dc:	d001      	beq.n	80011e2 <HAL_UART_MspInit+0x6e>
    {
      Error_Handler();
 80011de:	f7ff ff87 	bl	80010f0 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 80011e2:	4b21      	ldr	r3, [pc, #132]	; (8001268 <HAL_UART_MspInit+0xf4>)
 80011e4:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 80011e8:	4a1f      	ldr	r2, [pc, #124]	; (8001268 <HAL_UART_MspInit+0xf4>)
 80011ea:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80011ee:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 80011f2:	4b1d      	ldr	r3, [pc, #116]	; (8001268 <HAL_UART_MspInit+0xf4>)
 80011f4:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 80011f8:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80011fc:	60fb      	str	r3, [r7, #12]
 80011fe:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 8001200:	4b19      	ldr	r3, [pc, #100]	; (8001268 <HAL_UART_MspInit+0xf4>)
 8001202:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001206:	4a18      	ldr	r2, [pc, #96]	; (8001268 <HAL_UART_MspInit+0xf4>)
 8001208:	f043 0308 	orr.w	r3, r3, #8
 800120c:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001210:	4b15      	ldr	r3, [pc, #84]	; (8001268 <HAL_UART_MspInit+0xf4>)
 8001212:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001216:	f003 0308 	and.w	r3, r3, #8
 800121a:	60bb      	str	r3, [r7, #8]
 800121c:	68bb      	ldr	r3, [r7, #8]
    /**USART3 GPIO Configuration
    PD8     ------> USART3_TX
    PD9     ------> USART3_RX
    */
    GPIO_InitStruct.Pin = STLK_VCP_RX_Pin|STLK_VCP_TX_Pin;
 800121e:	f44f 7340 	mov.w	r3, #768	; 0x300
 8001222:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001226:	2302      	movs	r3, #2
 8001228:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800122c:	2300      	movs	r3, #0
 800122e:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001232:	2300      	movs	r3, #0
 8001234:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8001238:	2307      	movs	r3, #7
 800123a:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800123e:	f107 03c4 	add.w	r3, r7, #196	; 0xc4
 8001242:	4619      	mov	r1, r3
 8001244:	4809      	ldr	r0, [pc, #36]	; (800126c <HAL_UART_MspInit+0xf8>)
 8001246:	f001 fa53 	bl	80026f0 <HAL_GPIO_Init>

    /* USART3 interrupt Init */
    HAL_NVIC_SetPriority(USART3_IRQn, 0, 0);
 800124a:	2200      	movs	r2, #0
 800124c:	2100      	movs	r1, #0
 800124e:	2027      	movs	r0, #39	; 0x27
 8001250:	f000 fb9f 	bl	8001992 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART3_IRQn);
 8001254:	2027      	movs	r0, #39	; 0x27
 8001256:	f000 fbb6 	bl	80019c6 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 800125a:	bf00      	nop
 800125c:	37d8      	adds	r7, #216	; 0xd8
 800125e:	46bd      	mov	sp, r7
 8001260:	bd80      	pop	{r7, pc}
 8001262:	bf00      	nop
 8001264:	40004800 	.word	0x40004800
 8001268:	58024400 	.word	0x58024400
 800126c:	58020c00 	.word	0x58020c00

08001270 <HAL_FMC_MspInit>:

}

static uint32_t FMC_Initialized = 0;

static void HAL_FMC_MspInit(void){
 8001270:	b580      	push	{r7, lr}
 8001272:	b0b4      	sub	sp, #208	; 0xd0
 8001274:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN FMC_MspInit 0 */

  /* USER CODE END FMC_MspInit 0 */
  GPIO_InitTypeDef GPIO_InitStruct ={0};
 8001276:	f107 03bc 	add.w	r3, r7, #188	; 0xbc
 800127a:	2200      	movs	r2, #0
 800127c:	601a      	str	r2, [r3, #0]
 800127e:	605a      	str	r2, [r3, #4]
 8001280:	609a      	str	r2, [r3, #8]
 8001282:	60da      	str	r2, [r3, #12]
 8001284:	611a      	str	r2, [r3, #16]
  if (FMC_Initialized) {
 8001286:	4b39      	ldr	r3, [pc, #228]	; (800136c <HAL_FMC_MspInit+0xfc>)
 8001288:	681b      	ldr	r3, [r3, #0]
 800128a:	2b00      	cmp	r3, #0
 800128c:	d169      	bne.n	8001362 <HAL_FMC_MspInit+0xf2>
    return;
  }
  FMC_Initialized = 1;
 800128e:	4b37      	ldr	r3, [pc, #220]	; (800136c <HAL_FMC_MspInit+0xfc>)
 8001290:	2201      	movs	r2, #1
 8001292:	601a      	str	r2, [r3, #0]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001294:	f107 0308 	add.w	r3, r7, #8
 8001298:	22b4      	movs	r2, #180	; 0xb4
 800129a:	2100      	movs	r1, #0
 800129c:	4618      	mov	r0, r3
 800129e:	f008 f8cb 	bl	8009438 <memset>

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_FMC;
 80012a2:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80012a6:	60bb      	str	r3, [r7, #8]
    PeriphClkInitStruct.FmcClockSelection = RCC_FMCCLKSOURCE_PLL;
 80012a8:	2301      	movs	r3, #1
 80012aa:	64fb      	str	r3, [r7, #76]	; 0x4c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80012ac:	f107 0308 	add.w	r3, r7, #8
 80012b0:	4618      	mov	r0, r3
 80012b2:	f002 fc13 	bl	8003adc <HAL_RCCEx_PeriphCLKConfig>
 80012b6:	4603      	mov	r3, r0
 80012b8:	2b00      	cmp	r3, #0
 80012ba:	d001      	beq.n	80012c0 <HAL_FMC_MspInit+0x50>
    {
      Error_Handler();
 80012bc:	f7ff ff18 	bl	80010f0 <Error_Handler>
    }

  /* Peripheral clock enable */
  __HAL_RCC_FMC_CLK_ENABLE();
 80012c0:	4b2b      	ldr	r3, [pc, #172]	; (8001370 <HAL_FMC_MspInit+0x100>)
 80012c2:	f8d3 30d4 	ldr.w	r3, [r3, #212]	; 0xd4
 80012c6:	4a2a      	ldr	r2, [pc, #168]	; (8001370 <HAL_FMC_MspInit+0x100>)
 80012c8:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 80012cc:	f8c2 30d4 	str.w	r3, [r2, #212]	; 0xd4
 80012d0:	4b27      	ldr	r3, [pc, #156]	; (8001370 <HAL_FMC_MspInit+0x100>)
 80012d2:	f8d3 30d4 	ldr.w	r3, [r3, #212]	; 0xd4
 80012d6:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80012da:	607b      	str	r3, [r7, #4]
 80012dc:	687b      	ldr	r3, [r7, #4]
  PD1   ------> FMC_D3
  PD4   ------> FMC_NOE
  PD5   ------> FMC_NWE
  PD7   ------> FMC_NE1
  */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 80012de:	2303      	movs	r3, #3
 80012e0:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80012e4:	2302      	movs	r3, #2
 80012e6:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80012ea:	2300      	movs	r3, #0
 80012ec:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80012f0:	2303      	movs	r3, #3
 80012f2:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 80012f6:	230c      	movs	r3, #12
 80012f8:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 80012fc:	f107 03bc 	add.w	r3, r7, #188	; 0xbc
 8001300:	4619      	mov	r1, r3
 8001302:	481c      	ldr	r0, [pc, #112]	; (8001374 <HAL_FMC_MspInit+0x104>)
 8001304:	f001 f9f4 	bl	80026f0 <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = GPIO_PIN_7|GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10;
 8001308:	f44f 63f0 	mov.w	r3, #1920	; 0x780
 800130c:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001310:	2302      	movs	r3, #2
 8001312:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001316:	2300      	movs	r3, #0
 8001318:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800131c:	2303      	movs	r3, #3
 800131e:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8001322:	230c      	movs	r3, #12
 8001324:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8001328:	f107 03bc 	add.w	r3, r7, #188	; 0xbc
 800132c:	4619      	mov	r1, r3
 800132e:	4812      	ldr	r0, [pc, #72]	; (8001378 <HAL_FMC_MspInit+0x108>)
 8001330:	f001 f9de 	bl	80026f0 <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = GPIO_PIN_14|GPIO_PIN_15|GPIO_PIN_0|GPIO_PIN_1
 8001334:	f24c 03b3 	movw	r3, #49331	; 0xc0b3
 8001338:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
                          |GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_7;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800133c:	2302      	movs	r3, #2
 800133e:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001342:	2300      	movs	r3, #0
 8001344:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001348:	2303      	movs	r3, #3
 800134a:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 800134e:	230c      	movs	r3, #12
 8001350:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001354:	f107 03bc 	add.w	r3, r7, #188	; 0xbc
 8001358:	4619      	mov	r1, r3
 800135a:	4808      	ldr	r0, [pc, #32]	; (800137c <HAL_FMC_MspInit+0x10c>)
 800135c:	f001 f9c8 	bl	80026f0 <HAL_GPIO_Init>
 8001360:	e000      	b.n	8001364 <HAL_FMC_MspInit+0xf4>
    return;
 8001362:	bf00      	nop

  /* USER CODE BEGIN FMC_MspInit 1 */

  /* USER CODE END FMC_MspInit 1 */
}
 8001364:	37d0      	adds	r7, #208	; 0xd0
 8001366:	46bd      	mov	sp, r7
 8001368:	bd80      	pop	{r7, pc}
 800136a:	bf00      	nop
 800136c:	20000130 	.word	0x20000130
 8001370:	58024400 	.word	0x58024400
 8001374:	58021400 	.word	0x58021400
 8001378:	58021000 	.word	0x58021000
 800137c:	58020c00 	.word	0x58020c00

08001380 <HAL_NOR_MspInit>:

void HAL_NOR_MspInit(NOR_HandleTypeDef* hnor){
 8001380:	b580      	push	{r7, lr}
 8001382:	b082      	sub	sp, #8
 8001384:	af00      	add	r7, sp, #0
 8001386:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN NOR_MspInit 0 */

  /* USER CODE END NOR_MspInit 0 */
  HAL_FMC_MspInit();
 8001388:	f7ff ff72 	bl	8001270 <HAL_FMC_MspInit>
  /* USER CODE BEGIN NOR_MspInit 1 */

  /* USER CODE END NOR_MspInit 1 */
}
 800138c:	bf00      	nop
 800138e:	3708      	adds	r7, #8
 8001390:	46bd      	mov	sp, r7
 8001392:	bd80      	pop	{r7, pc}

08001394 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001394:	b480      	push	{r7}
 8001396:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001398:	e7fe      	b.n	8001398 <NMI_Handler+0x4>

0800139a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800139a:	b480      	push	{r7}
 800139c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800139e:	e7fe      	b.n	800139e <HardFault_Handler+0x4>

080013a0 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80013a0:	b480      	push	{r7}
 80013a2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80013a4:	e7fe      	b.n	80013a4 <MemManage_Handler+0x4>

080013a6 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80013a6:	b480      	push	{r7}
 80013a8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80013aa:	e7fe      	b.n	80013aa <BusFault_Handler+0x4>

080013ac <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80013ac:	b480      	push	{r7}
 80013ae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80013b0:	e7fe      	b.n	80013b0 <UsageFault_Handler+0x4>

080013b2 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80013b2:	b480      	push	{r7}
 80013b4:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80013b6:	bf00      	nop
 80013b8:	46bd      	mov	sp, r7
 80013ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013be:	4770      	bx	lr

080013c0 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80013c0:	b480      	push	{r7}
 80013c2:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80013c4:	bf00      	nop
 80013c6:	46bd      	mov	sp, r7
 80013c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013cc:	4770      	bx	lr

080013ce <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80013ce:	b480      	push	{r7}
 80013d0:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80013d2:	bf00      	nop
 80013d4:	46bd      	mov	sp, r7
 80013d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013da:	4770      	bx	lr

080013dc <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80013dc:	b580      	push	{r7, lr}
 80013de:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80013e0:	f000 f9ac 	bl	800173c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80013e4:	bf00      	nop
 80013e6:	bd80      	pop	{r7, pc}

080013e8 <USART3_IRQHandler>:

/**
  * @brief This function handles USART3 global interrupt.
  */
void USART3_IRQHandler(void)
{
 80013e8:	b580      	push	{r7, lr}
 80013ea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART3_IRQn 0 */

  /* USER CODE END USART3_IRQn 0 */
  HAL_UART_IRQHandler(&huart3);
 80013ec:	4802      	ldr	r0, [pc, #8]	; (80013f8 <USART3_IRQHandler+0x10>)
 80013ee:	f003 ffcd 	bl	800538c <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART3_IRQn 1 */

  /* USER CODE END USART3_IRQn 1 */
}
 80013f2:	bf00      	nop
 80013f4:	bd80      	pop	{r7, pc}
 80013f6:	bf00      	nop
 80013f8:	2000097c 	.word	0x2000097c

080013fc <_read>:
	_kill(status, -1);
	while (1) {}		/* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80013fc:	b580      	push	{r7, lr}
 80013fe:	b086      	sub	sp, #24
 8001400:	af00      	add	r7, sp, #0
 8001402:	60f8      	str	r0, [r7, #12]
 8001404:	60b9      	str	r1, [r7, #8]
 8001406:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001408:	2300      	movs	r3, #0
 800140a:	617b      	str	r3, [r7, #20]
 800140c:	e00a      	b.n	8001424 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 800140e:	f3af 8000 	nop.w
 8001412:	4601      	mov	r1, r0
 8001414:	68bb      	ldr	r3, [r7, #8]
 8001416:	1c5a      	adds	r2, r3, #1
 8001418:	60ba      	str	r2, [r7, #8]
 800141a:	b2ca      	uxtb	r2, r1
 800141c:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800141e:	697b      	ldr	r3, [r7, #20]
 8001420:	3301      	adds	r3, #1
 8001422:	617b      	str	r3, [r7, #20]
 8001424:	697a      	ldr	r2, [r7, #20]
 8001426:	687b      	ldr	r3, [r7, #4]
 8001428:	429a      	cmp	r2, r3
 800142a:	dbf0      	blt.n	800140e <_read+0x12>
	}

return len;
 800142c:	687b      	ldr	r3, [r7, #4]
}
 800142e:	4618      	mov	r0, r3
 8001430:	3718      	adds	r7, #24
 8001432:	46bd      	mov	sp, r7
 8001434:	bd80      	pop	{r7, pc}

08001436 <_close>:
	}
	return len;
}

int _close(int file)
{
 8001436:	b480      	push	{r7}
 8001438:	b083      	sub	sp, #12
 800143a:	af00      	add	r7, sp, #0
 800143c:	6078      	str	r0, [r7, #4]
	return -1;
 800143e:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001442:	4618      	mov	r0, r3
 8001444:	370c      	adds	r7, #12
 8001446:	46bd      	mov	sp, r7
 8001448:	f85d 7b04 	ldr.w	r7, [sp], #4
 800144c:	4770      	bx	lr

0800144e <_fstat>:


int _fstat(int file, struct stat *st)
{
 800144e:	b480      	push	{r7}
 8001450:	b083      	sub	sp, #12
 8001452:	af00      	add	r7, sp, #0
 8001454:	6078      	str	r0, [r7, #4]
 8001456:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8001458:	683b      	ldr	r3, [r7, #0]
 800145a:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 800145e:	605a      	str	r2, [r3, #4]
	return 0;
 8001460:	2300      	movs	r3, #0
}
 8001462:	4618      	mov	r0, r3
 8001464:	370c      	adds	r7, #12
 8001466:	46bd      	mov	sp, r7
 8001468:	f85d 7b04 	ldr.w	r7, [sp], #4
 800146c:	4770      	bx	lr

0800146e <_isatty>:

int _isatty(int file)
{
 800146e:	b480      	push	{r7}
 8001470:	b083      	sub	sp, #12
 8001472:	af00      	add	r7, sp, #0
 8001474:	6078      	str	r0, [r7, #4]
	return 1;
 8001476:	2301      	movs	r3, #1
}
 8001478:	4618      	mov	r0, r3
 800147a:	370c      	adds	r7, #12
 800147c:	46bd      	mov	sp, r7
 800147e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001482:	4770      	bx	lr

08001484 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001484:	b480      	push	{r7}
 8001486:	b085      	sub	sp, #20
 8001488:	af00      	add	r7, sp, #0
 800148a:	60f8      	str	r0, [r7, #12]
 800148c:	60b9      	str	r1, [r7, #8]
 800148e:	607a      	str	r2, [r7, #4]
	return 0;
 8001490:	2300      	movs	r3, #0
}
 8001492:	4618      	mov	r0, r3
 8001494:	3714      	adds	r7, #20
 8001496:	46bd      	mov	sp, r7
 8001498:	f85d 7b04 	ldr.w	r7, [sp], #4
 800149c:	4770      	bx	lr
	...

080014a0 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80014a0:	b580      	push	{r7, lr}
 80014a2:	b086      	sub	sp, #24
 80014a4:	af00      	add	r7, sp, #0
 80014a6:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80014a8:	4a14      	ldr	r2, [pc, #80]	; (80014fc <_sbrk+0x5c>)
 80014aa:	4b15      	ldr	r3, [pc, #84]	; (8001500 <_sbrk+0x60>)
 80014ac:	1ad3      	subs	r3, r2, r3
 80014ae:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80014b0:	697b      	ldr	r3, [r7, #20]
 80014b2:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80014b4:	4b13      	ldr	r3, [pc, #76]	; (8001504 <_sbrk+0x64>)
 80014b6:	681b      	ldr	r3, [r3, #0]
 80014b8:	2b00      	cmp	r3, #0
 80014ba:	d102      	bne.n	80014c2 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80014bc:	4b11      	ldr	r3, [pc, #68]	; (8001504 <_sbrk+0x64>)
 80014be:	4a12      	ldr	r2, [pc, #72]	; (8001508 <_sbrk+0x68>)
 80014c0:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80014c2:	4b10      	ldr	r3, [pc, #64]	; (8001504 <_sbrk+0x64>)
 80014c4:	681a      	ldr	r2, [r3, #0]
 80014c6:	687b      	ldr	r3, [r7, #4]
 80014c8:	4413      	add	r3, r2
 80014ca:	693a      	ldr	r2, [r7, #16]
 80014cc:	429a      	cmp	r2, r3
 80014ce:	d207      	bcs.n	80014e0 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80014d0:	f007 ff88 	bl	80093e4 <__errno>
 80014d4:	4603      	mov	r3, r0
 80014d6:	220c      	movs	r2, #12
 80014d8:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80014da:	f04f 33ff 	mov.w	r3, #4294967295
 80014de:	e009      	b.n	80014f4 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80014e0:	4b08      	ldr	r3, [pc, #32]	; (8001504 <_sbrk+0x64>)
 80014e2:	681b      	ldr	r3, [r3, #0]
 80014e4:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80014e6:	4b07      	ldr	r3, [pc, #28]	; (8001504 <_sbrk+0x64>)
 80014e8:	681a      	ldr	r2, [r3, #0]
 80014ea:	687b      	ldr	r3, [r7, #4]
 80014ec:	4413      	add	r3, r2
 80014ee:	4a05      	ldr	r2, [pc, #20]	; (8001504 <_sbrk+0x64>)
 80014f0:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80014f2:	68fb      	ldr	r3, [r7, #12]
}
 80014f4:	4618      	mov	r0, r3
 80014f6:	3718      	adds	r7, #24
 80014f8:	46bd      	mov	sp, r7
 80014fa:	bd80      	pop	{r7, pc}
 80014fc:	20020000 	.word	0x20020000
 8001500:	00000400 	.word	0x00000400
 8001504:	20000134 	.word	0x20000134
 8001508:	200024e8 	.word	0x200024e8

0800150c <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 800150c:	b480      	push	{r7}
 800150e:	af00      	add	r7, sp, #0
 __IO uint32_t tmpreg;
#endif /* DATA_IN_D2_SRAM */

  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8001510:	4b34      	ldr	r3, [pc, #208]	; (80015e4 <SystemInit+0xd8>)
 8001512:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001516:	4a33      	ldr	r2, [pc, #204]	; (80015e4 <SystemInit+0xd8>)
 8001518:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800151c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/

   /* Increasing the CPU frequency */
  if(FLASH_LATENCY_DEFAULT  > (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 8001520:	4b31      	ldr	r3, [pc, #196]	; (80015e8 <SystemInit+0xdc>)
 8001522:	681b      	ldr	r3, [r3, #0]
 8001524:	f003 030f 	and.w	r3, r3, #15
 8001528:	2b06      	cmp	r3, #6
 800152a:	d807      	bhi.n	800153c <SystemInit+0x30>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
	MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 800152c:	4b2e      	ldr	r3, [pc, #184]	; (80015e8 <SystemInit+0xdc>)
 800152e:	681b      	ldr	r3, [r3, #0]
 8001530:	f023 030f 	bic.w	r3, r3, #15
 8001534:	4a2c      	ldr	r2, [pc, #176]	; (80015e8 <SystemInit+0xdc>)
 8001536:	f043 0307 	orr.w	r3, r3, #7
 800153a:	6013      	str	r3, [r2, #0]
  }

  /* Set HSION bit */
  RCC->CR |= RCC_CR_HSION;
 800153c:	4b2b      	ldr	r3, [pc, #172]	; (80015ec <SystemInit+0xe0>)
 800153e:	681b      	ldr	r3, [r3, #0]
 8001540:	4a2a      	ldr	r2, [pc, #168]	; (80015ec <SystemInit+0xe0>)
 8001542:	f043 0301 	orr.w	r3, r3, #1
 8001546:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 8001548:	4b28      	ldr	r3, [pc, #160]	; (80015ec <SystemInit+0xe0>)
 800154a:	2200      	movs	r2, #0
 800154c:	611a      	str	r2, [r3, #16]

  /* Reset HSEON, HSECSSON, CSION, HSI48ON, CSIKERON, PLL1ON, PLL2ON and PLL3ON bits */
  RCC->CR &= 0xEAF6ED7FU;
 800154e:	4b27      	ldr	r3, [pc, #156]	; (80015ec <SystemInit+0xe0>)
 8001550:	681a      	ldr	r2, [r3, #0]
 8001552:	4926      	ldr	r1, [pc, #152]	; (80015ec <SystemInit+0xe0>)
 8001554:	4b26      	ldr	r3, [pc, #152]	; (80015f0 <SystemInit+0xe4>)
 8001556:	4013      	ands	r3, r2
 8001558:	600b      	str	r3, [r1, #0]
  
   /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLASH_LATENCY_DEFAULT  < (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 800155a:	4b23      	ldr	r3, [pc, #140]	; (80015e8 <SystemInit+0xdc>)
 800155c:	681b      	ldr	r3, [r3, #0]
 800155e:	f003 0308 	and.w	r3, r3, #8
 8001562:	2b00      	cmp	r3, #0
 8001564:	d007      	beq.n	8001576 <SystemInit+0x6a>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
	MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 8001566:	4b20      	ldr	r3, [pc, #128]	; (80015e8 <SystemInit+0xdc>)
 8001568:	681b      	ldr	r3, [r3, #0]
 800156a:	f023 030f 	bic.w	r3, r3, #15
 800156e:	4a1e      	ldr	r2, [pc, #120]	; (80015e8 <SystemInit+0xdc>)
 8001570:	f043 0307 	orr.w	r3, r3, #7
 8001574:	6013      	str	r3, [r2, #0]
  }

#if defined(D3_SRAM_BASE)
  /* Reset D1CFGR register */
  RCC->D1CFGR = 0x00000000;
 8001576:	4b1d      	ldr	r3, [pc, #116]	; (80015ec <SystemInit+0xe0>)
 8001578:	2200      	movs	r2, #0
 800157a:	619a      	str	r2, [r3, #24]

  /* Reset D2CFGR register */
  RCC->D2CFGR = 0x00000000;
 800157c:	4b1b      	ldr	r3, [pc, #108]	; (80015ec <SystemInit+0xe0>)
 800157e:	2200      	movs	r2, #0
 8001580:	61da      	str	r2, [r3, #28]

  /* Reset D3CFGR register */
  RCC->D3CFGR = 0x00000000;
 8001582:	4b1a      	ldr	r3, [pc, #104]	; (80015ec <SystemInit+0xe0>)
 8001584:	2200      	movs	r2, #0
 8001586:	621a      	str	r2, [r3, #32]

  /* Reset SRDCFGR register */
  RCC->SRDCFGR = 0x00000000;
#endif
  /* Reset PLLCKSELR register */
  RCC->PLLCKSELR = 0x02020200;
 8001588:	4b18      	ldr	r3, [pc, #96]	; (80015ec <SystemInit+0xe0>)
 800158a:	4a1a      	ldr	r2, [pc, #104]	; (80015f4 <SystemInit+0xe8>)
 800158c:	629a      	str	r2, [r3, #40]	; 0x28

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x01FF0000;
 800158e:	4b17      	ldr	r3, [pc, #92]	; (80015ec <SystemInit+0xe0>)
 8001590:	4a19      	ldr	r2, [pc, #100]	; (80015f8 <SystemInit+0xec>)
 8001592:	62da      	str	r2, [r3, #44]	; 0x2c
  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x01010280;
 8001594:	4b15      	ldr	r3, [pc, #84]	; (80015ec <SystemInit+0xe0>)
 8001596:	4a19      	ldr	r2, [pc, #100]	; (80015fc <SystemInit+0xf0>)
 8001598:	631a      	str	r2, [r3, #48]	; 0x30
  /* Reset PLL1FRACR register */
  RCC->PLL1FRACR = 0x00000000;
 800159a:	4b14      	ldr	r3, [pc, #80]	; (80015ec <SystemInit+0xe0>)
 800159c:	2200      	movs	r2, #0
 800159e:	635a      	str	r2, [r3, #52]	; 0x34

  /* Reset PLL2DIVR register */
  RCC->PLL2DIVR = 0x01010280;
 80015a0:	4b12      	ldr	r3, [pc, #72]	; (80015ec <SystemInit+0xe0>)
 80015a2:	4a16      	ldr	r2, [pc, #88]	; (80015fc <SystemInit+0xf0>)
 80015a4:	639a      	str	r2, [r3, #56]	; 0x38

  /* Reset PLL2FRACR register */

  RCC->PLL2FRACR = 0x00000000;
 80015a6:	4b11      	ldr	r3, [pc, #68]	; (80015ec <SystemInit+0xe0>)
 80015a8:	2200      	movs	r2, #0
 80015aa:	63da      	str	r2, [r3, #60]	; 0x3c
  /* Reset PLL3DIVR register */
  RCC->PLL3DIVR = 0x01010280;
 80015ac:	4b0f      	ldr	r3, [pc, #60]	; (80015ec <SystemInit+0xe0>)
 80015ae:	4a13      	ldr	r2, [pc, #76]	; (80015fc <SystemInit+0xf0>)
 80015b0:	641a      	str	r2, [r3, #64]	; 0x40

  /* Reset PLL3FRACR register */
  RCC->PLL3FRACR = 0x00000000;
 80015b2:	4b0e      	ldr	r3, [pc, #56]	; (80015ec <SystemInit+0xe0>)
 80015b4:	2200      	movs	r2, #0
 80015b6:	645a      	str	r2, [r3, #68]	; 0x44

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 80015b8:	4b0c      	ldr	r3, [pc, #48]	; (80015ec <SystemInit+0xe0>)
 80015ba:	681b      	ldr	r3, [r3, #0]
 80015bc:	4a0b      	ldr	r2, [pc, #44]	; (80015ec <SystemInit+0xe0>)
 80015be:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80015c2:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 80015c4:	4b09      	ldr	r3, [pc, #36]	; (80015ec <SystemInit+0xe0>)
 80015c6:	2200      	movs	r2, #0
 80015c8:	661a      	str	r2, [r3, #96]	; 0x60
  /*
   * Disable the FMC bank1 (enabled after reset).
   * This, prevents CPU speculation access on this bank which blocks the use of FMC during
   * 24us. During this time the others FMC master (such as LTDC) cannot use it!
   */
  FMC_Bank1_R->BTCR[0] = 0x000030D2;
 80015ca:	4b0d      	ldr	r3, [pc, #52]	; (8001600 <SystemInit+0xf4>)
 80015cc:	f243 02d2 	movw	r2, #12498	; 0x30d2
 80015d0:	601a      	str	r2, [r3, #0]

  /* Configure the Vector Table location add offset address for cortex-M7 ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = D1_AXISRAM_BASE  | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal AXI-RAM */
#else
  SCB->VTOR = FLASH_BANK1_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 80015d2:	4b04      	ldr	r3, [pc, #16]	; (80015e4 <SystemInit+0xd8>)
 80015d4:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 80015d8:	609a      	str	r2, [r3, #8]
#endif

#endif /*DUAL_CORE && CORE_CM4*/

}
 80015da:	bf00      	nop
 80015dc:	46bd      	mov	sp, r7
 80015de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015e2:	4770      	bx	lr
 80015e4:	e000ed00 	.word	0xe000ed00
 80015e8:	52002000 	.word	0x52002000
 80015ec:	58024400 	.word	0x58024400
 80015f0:	eaf6ed7f 	.word	0xeaf6ed7f
 80015f4:	02020200 	.word	0x02020200
 80015f8:	01ff0000 	.word	0x01ff0000
 80015fc:	01010280 	.word	0x01010280
 8001600:	52004000 	.word	0x52004000

08001604 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack      /* set stack pointer */
 8001604:	f8df d034 	ldr.w	sp, [pc, #52]	; 800163c <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit
 8001608:	f7ff ff80 	bl	800150c <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 800160c:	480c      	ldr	r0, [pc, #48]	; (8001640 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 800160e:	490d      	ldr	r1, [pc, #52]	; (8001644 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8001610:	4a0d      	ldr	r2, [pc, #52]	; (8001648 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8001612:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001614:	e002      	b.n	800161c <LoopCopyDataInit>

08001616 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001616:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001618:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800161a:	3304      	adds	r3, #4

0800161c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800161c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800161e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001620:	d3f9      	bcc.n	8001616 <CopyDataInit>
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001622:	4a0a      	ldr	r2, [pc, #40]	; (800164c <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8001624:	4c0a      	ldr	r4, [pc, #40]	; (8001650 <LoopFillZerobss+0x22>)
  movs r3, #0
 8001626:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001628:	e001      	b.n	800162e <LoopFillZerobss>

0800162a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800162a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800162c:	3204      	adds	r2, #4

0800162e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800162e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001630:	d3fb      	bcc.n	800162a <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8001632:	f007 fedd 	bl	80093f0 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001636:	f7ff f90f 	bl	8000858 <main>
  bx  lr
 800163a:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 800163c:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8001640:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001644:	20000114 	.word	0x20000114
  ldr r2, =_sidata
 8001648:	0800a700 	.word	0x0800a700
  ldr r2, =_sbss
 800164c:	20000114 	.word	0x20000114
  ldr r4, =_ebss
 8001650:	200024e4 	.word	0x200024e4

08001654 <ADC3_IRQHandler>:
 * @retval None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001654:	e7fe      	b.n	8001654 <ADC3_IRQHandler>
	...

08001658 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001658:	b580      	push	{r7, lr}
 800165a:	b082      	sub	sp, #8
 800165c:	af00      	add	r7, sp, #0
   __HAL_ART_CONFIG_BASE_ADDRESS(0x08100000UL);  /* Configure the Cortex-M4 ART Base address to the Flash Bank 2 : */
   __HAL_ART_ENABLE();                           /* Enable the Cortex-M4 ART */
#endif /* DUAL_CORE &&  CORE_CM4 */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800165e:	2003      	movs	r0, #3
 8001660:	f000 f98c 	bl	800197c <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8001664:	f002 f864 	bl	8003730 <HAL_RCC_GetSysClockFreq>
 8001668:	4602      	mov	r2, r0
 800166a:	4b15      	ldr	r3, [pc, #84]	; (80016c0 <HAL_Init+0x68>)
 800166c:	699b      	ldr	r3, [r3, #24]
 800166e:	0a1b      	lsrs	r3, r3, #8
 8001670:	f003 030f 	and.w	r3, r3, #15
 8001674:	4913      	ldr	r1, [pc, #76]	; (80016c4 <HAL_Init+0x6c>)
 8001676:	5ccb      	ldrb	r3, [r1, r3]
 8001678:	f003 031f 	and.w	r3, r3, #31
 800167c:	fa22 f303 	lsr.w	r3, r2, r3
 8001680:	607b      	str	r3, [r7, #4]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

  /* Update the SystemD2Clock global variable */
#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8001682:	4b0f      	ldr	r3, [pc, #60]	; (80016c0 <HAL_Init+0x68>)
 8001684:	699b      	ldr	r3, [r3, #24]
 8001686:	f003 030f 	and.w	r3, r3, #15
 800168a:	4a0e      	ldr	r2, [pc, #56]	; (80016c4 <HAL_Init+0x6c>)
 800168c:	5cd3      	ldrb	r3, [r2, r3]
 800168e:	f003 031f 	and.w	r3, r3, #31
 8001692:	687a      	ldr	r2, [r7, #4]
 8001694:	fa22 f303 	lsr.w	r3, r2, r3
 8001698:	4a0b      	ldr	r2, [pc, #44]	; (80016c8 <HAL_Init+0x70>)
 800169a:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 800169c:	4a0b      	ldr	r2, [pc, #44]	; (80016cc <HAL_Init+0x74>)
 800169e:	687b      	ldr	r3, [r7, #4]
 80016a0:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 80016a2:	2000      	movs	r0, #0
 80016a4:	f000 f814 	bl	80016d0 <HAL_InitTick>
 80016a8:	4603      	mov	r3, r0
 80016aa:	2b00      	cmp	r3, #0
 80016ac:	d001      	beq.n	80016b2 <HAL_Init+0x5a>
  {
    return HAL_ERROR;
 80016ae:	2301      	movs	r3, #1
 80016b0:	e002      	b.n	80016b8 <HAL_Init+0x60>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 80016b2:	f7ff fd23 	bl	80010fc <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80016b6:	2300      	movs	r3, #0
}
 80016b8:	4618      	mov	r0, r3
 80016ba:	3708      	adds	r7, #8
 80016bc:	46bd      	mov	sp, r7
 80016be:	bd80      	pop	{r7, pc}
 80016c0:	58024400 	.word	0x58024400
 80016c4:	0800a620 	.word	0x0800a620
 80016c8:	2000006c 	.word	0x2000006c
 80016cc:	20000068 	.word	0x20000068

080016d0 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80016d0:	b580      	push	{r7, lr}
 80016d2:	b082      	sub	sp, #8
 80016d4:	af00      	add	r7, sp, #0
 80016d6:	6078      	str	r0, [r7, #4]
  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that don't take the value zero)*/
  if((uint32_t)uwTickFreq == 0UL)
 80016d8:	4b15      	ldr	r3, [pc, #84]	; (8001730 <HAL_InitTick+0x60>)
 80016da:	781b      	ldrb	r3, [r3, #0]
 80016dc:	2b00      	cmp	r3, #0
 80016de:	d101      	bne.n	80016e4 <HAL_InitTick+0x14>
  {
    return HAL_ERROR;
 80016e0:	2301      	movs	r3, #1
 80016e2:	e021      	b.n	8001728 <HAL_InitTick+0x58>
  }

    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000UL / (uint32_t)uwTickFreq)) > 0U)
 80016e4:	4b13      	ldr	r3, [pc, #76]	; (8001734 <HAL_InitTick+0x64>)
 80016e6:	681a      	ldr	r2, [r3, #0]
 80016e8:	4b11      	ldr	r3, [pc, #68]	; (8001730 <HAL_InitTick+0x60>)
 80016ea:	781b      	ldrb	r3, [r3, #0]
 80016ec:	4619      	mov	r1, r3
 80016ee:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80016f2:	fbb3 f3f1 	udiv	r3, r3, r1
 80016f6:	fbb2 f3f3 	udiv	r3, r2, r3
 80016fa:	4618      	mov	r0, r3
 80016fc:	f000 f971 	bl	80019e2 <HAL_SYSTICK_Config>
 8001700:	4603      	mov	r3, r0
 8001702:	2b00      	cmp	r3, #0
 8001704:	d001      	beq.n	800170a <HAL_InitTick+0x3a>
    {
      return HAL_ERROR;
 8001706:	2301      	movs	r3, #1
 8001708:	e00e      	b.n	8001728 <HAL_InitTick+0x58>
    }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800170a:	687b      	ldr	r3, [r7, #4]
 800170c:	2b0f      	cmp	r3, #15
 800170e:	d80a      	bhi.n	8001726 <HAL_InitTick+0x56>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001710:	2200      	movs	r2, #0
 8001712:	6879      	ldr	r1, [r7, #4]
 8001714:	f04f 30ff 	mov.w	r0, #4294967295
 8001718:	f000 f93b 	bl	8001992 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 800171c:	4a06      	ldr	r2, [pc, #24]	; (8001738 <HAL_InitTick+0x68>)
 800171e:	687b      	ldr	r3, [r7, #4]
 8001720:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001722:	2300      	movs	r3, #0
 8001724:	e000      	b.n	8001728 <HAL_InitTick+0x58>
    return HAL_ERROR;
 8001726:	2301      	movs	r3, #1
}
 8001728:	4618      	mov	r0, r3
 800172a:	3708      	adds	r7, #8
 800172c:	46bd      	mov	sp, r7
 800172e:	bd80      	pop	{r7, pc}
 8001730:	20000074 	.word	0x20000074
 8001734:	20000068 	.word	0x20000068
 8001738:	20000070 	.word	0x20000070

0800173c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800173c:	b480      	push	{r7}
 800173e:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8001740:	4b06      	ldr	r3, [pc, #24]	; (800175c <HAL_IncTick+0x20>)
 8001742:	781b      	ldrb	r3, [r3, #0]
 8001744:	461a      	mov	r2, r3
 8001746:	4b06      	ldr	r3, [pc, #24]	; (8001760 <HAL_IncTick+0x24>)
 8001748:	681b      	ldr	r3, [r3, #0]
 800174a:	4413      	add	r3, r2
 800174c:	4a04      	ldr	r2, [pc, #16]	; (8001760 <HAL_IncTick+0x24>)
 800174e:	6013      	str	r3, [r2, #0]
}
 8001750:	bf00      	nop
 8001752:	46bd      	mov	sp, r7
 8001754:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001758:	4770      	bx	lr
 800175a:	bf00      	nop
 800175c:	20000074 	.word	0x20000074
 8001760:	200024d0 	.word	0x200024d0

08001764 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001764:	b480      	push	{r7}
 8001766:	af00      	add	r7, sp, #0
  return uwTick;
 8001768:	4b03      	ldr	r3, [pc, #12]	; (8001778 <HAL_GetTick+0x14>)
 800176a:	681b      	ldr	r3, [r3, #0]
}
 800176c:	4618      	mov	r0, r3
 800176e:	46bd      	mov	sp, r7
 8001770:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001774:	4770      	bx	lr
 8001776:	bf00      	nop
 8001778:	200024d0 	.word	0x200024d0

0800177c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 800177c:	b580      	push	{r7, lr}
 800177e:	b084      	sub	sp, #16
 8001780:	af00      	add	r7, sp, #0
 8001782:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001784:	f7ff ffee 	bl	8001764 <HAL_GetTick>
 8001788:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800178a:	687b      	ldr	r3, [r7, #4]
 800178c:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800178e:	68fb      	ldr	r3, [r7, #12]
 8001790:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001794:	d005      	beq.n	80017a2 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001796:	4b0a      	ldr	r3, [pc, #40]	; (80017c0 <HAL_Delay+0x44>)
 8001798:	781b      	ldrb	r3, [r3, #0]
 800179a:	461a      	mov	r2, r3
 800179c:	68fb      	ldr	r3, [r7, #12]
 800179e:	4413      	add	r3, r2
 80017a0:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80017a2:	bf00      	nop
 80017a4:	f7ff ffde 	bl	8001764 <HAL_GetTick>
 80017a8:	4602      	mov	r2, r0
 80017aa:	68bb      	ldr	r3, [r7, #8]
 80017ac:	1ad3      	subs	r3, r2, r3
 80017ae:	68fa      	ldr	r2, [r7, #12]
 80017b0:	429a      	cmp	r2, r3
 80017b2:	d8f7      	bhi.n	80017a4 <HAL_Delay+0x28>
  {
  }
}
 80017b4:	bf00      	nop
 80017b6:	bf00      	nop
 80017b8:	3710      	adds	r7, #16
 80017ba:	46bd      	mov	sp, r7
 80017bc:	bd80      	pop	{r7, pc}
 80017be:	bf00      	nop
 80017c0:	20000074 	.word	0x20000074

080017c4 <HAL_GetREVID>:
/**
  * @brief  Returns the device revision identifier.
  * @retval Device revision identifier
  */
uint32_t HAL_GetREVID(void)
{
 80017c4:	b480      	push	{r7}
 80017c6:	af00      	add	r7, sp, #0
   return((DBGMCU->IDCODE) >> 16);
 80017c8:	4b03      	ldr	r3, [pc, #12]	; (80017d8 <HAL_GetREVID+0x14>)
 80017ca:	681b      	ldr	r3, [r3, #0]
 80017cc:	0c1b      	lsrs	r3, r3, #16
}
 80017ce:	4618      	mov	r0, r3
 80017d0:	46bd      	mov	sp, r7
 80017d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017d6:	4770      	bx	lr
 80017d8:	5c001000 	.word	0x5c001000

080017dc <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80017dc:	b480      	push	{r7}
 80017de:	b085      	sub	sp, #20
 80017e0:	af00      	add	r7, sp, #0
 80017e2:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80017e4:	687b      	ldr	r3, [r7, #4]
 80017e6:	f003 0307 	and.w	r3, r3, #7
 80017ea:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80017ec:	4b0b      	ldr	r3, [pc, #44]	; (800181c <__NVIC_SetPriorityGrouping+0x40>)
 80017ee:	68db      	ldr	r3, [r3, #12]
 80017f0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80017f2:	68ba      	ldr	r2, [r7, #8]
 80017f4:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80017f8:	4013      	ands	r3, r2
 80017fa:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80017fc:	68fb      	ldr	r3, [r7, #12]
 80017fe:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001800:	68bb      	ldr	r3, [r7, #8]
 8001802:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8001804:	4b06      	ldr	r3, [pc, #24]	; (8001820 <__NVIC_SetPriorityGrouping+0x44>)
 8001806:	4313      	orrs	r3, r2
 8001808:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800180a:	4a04      	ldr	r2, [pc, #16]	; (800181c <__NVIC_SetPriorityGrouping+0x40>)
 800180c:	68bb      	ldr	r3, [r7, #8]
 800180e:	60d3      	str	r3, [r2, #12]
}
 8001810:	bf00      	nop
 8001812:	3714      	adds	r7, #20
 8001814:	46bd      	mov	sp, r7
 8001816:	f85d 7b04 	ldr.w	r7, [sp], #4
 800181a:	4770      	bx	lr
 800181c:	e000ed00 	.word	0xe000ed00
 8001820:	05fa0000 	.word	0x05fa0000

08001824 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001824:	b480      	push	{r7}
 8001826:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001828:	4b04      	ldr	r3, [pc, #16]	; (800183c <__NVIC_GetPriorityGrouping+0x18>)
 800182a:	68db      	ldr	r3, [r3, #12]
 800182c:	0a1b      	lsrs	r3, r3, #8
 800182e:	f003 0307 	and.w	r3, r3, #7
}
 8001832:	4618      	mov	r0, r3
 8001834:	46bd      	mov	sp, r7
 8001836:	f85d 7b04 	ldr.w	r7, [sp], #4
 800183a:	4770      	bx	lr
 800183c:	e000ed00 	.word	0xe000ed00

08001840 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001840:	b480      	push	{r7}
 8001842:	b083      	sub	sp, #12
 8001844:	af00      	add	r7, sp, #0
 8001846:	4603      	mov	r3, r0
 8001848:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 800184a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800184e:	2b00      	cmp	r3, #0
 8001850:	db0b      	blt.n	800186a <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001852:	88fb      	ldrh	r3, [r7, #6]
 8001854:	f003 021f 	and.w	r2, r3, #31
 8001858:	4907      	ldr	r1, [pc, #28]	; (8001878 <__NVIC_EnableIRQ+0x38>)
 800185a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800185e:	095b      	lsrs	r3, r3, #5
 8001860:	2001      	movs	r0, #1
 8001862:	fa00 f202 	lsl.w	r2, r0, r2
 8001866:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 800186a:	bf00      	nop
 800186c:	370c      	adds	r7, #12
 800186e:	46bd      	mov	sp, r7
 8001870:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001874:	4770      	bx	lr
 8001876:	bf00      	nop
 8001878:	e000e100 	.word	0xe000e100

0800187c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800187c:	b480      	push	{r7}
 800187e:	b083      	sub	sp, #12
 8001880:	af00      	add	r7, sp, #0
 8001882:	4603      	mov	r3, r0
 8001884:	6039      	str	r1, [r7, #0]
 8001886:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8001888:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800188c:	2b00      	cmp	r3, #0
 800188e:	db0a      	blt.n	80018a6 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001890:	683b      	ldr	r3, [r7, #0]
 8001892:	b2da      	uxtb	r2, r3
 8001894:	490c      	ldr	r1, [pc, #48]	; (80018c8 <__NVIC_SetPriority+0x4c>)
 8001896:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800189a:	0112      	lsls	r2, r2, #4
 800189c:	b2d2      	uxtb	r2, r2
 800189e:	440b      	add	r3, r1
 80018a0:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80018a4:	e00a      	b.n	80018bc <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80018a6:	683b      	ldr	r3, [r7, #0]
 80018a8:	b2da      	uxtb	r2, r3
 80018aa:	4908      	ldr	r1, [pc, #32]	; (80018cc <__NVIC_SetPriority+0x50>)
 80018ac:	88fb      	ldrh	r3, [r7, #6]
 80018ae:	f003 030f 	and.w	r3, r3, #15
 80018b2:	3b04      	subs	r3, #4
 80018b4:	0112      	lsls	r2, r2, #4
 80018b6:	b2d2      	uxtb	r2, r2
 80018b8:	440b      	add	r3, r1
 80018ba:	761a      	strb	r2, [r3, #24]
}
 80018bc:	bf00      	nop
 80018be:	370c      	adds	r7, #12
 80018c0:	46bd      	mov	sp, r7
 80018c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018c6:	4770      	bx	lr
 80018c8:	e000e100 	.word	0xe000e100
 80018cc:	e000ed00 	.word	0xe000ed00

080018d0 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80018d0:	b480      	push	{r7}
 80018d2:	b089      	sub	sp, #36	; 0x24
 80018d4:	af00      	add	r7, sp, #0
 80018d6:	60f8      	str	r0, [r7, #12]
 80018d8:	60b9      	str	r1, [r7, #8]
 80018da:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80018dc:	68fb      	ldr	r3, [r7, #12]
 80018de:	f003 0307 	and.w	r3, r3, #7
 80018e2:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80018e4:	69fb      	ldr	r3, [r7, #28]
 80018e6:	f1c3 0307 	rsb	r3, r3, #7
 80018ea:	2b04      	cmp	r3, #4
 80018ec:	bf28      	it	cs
 80018ee:	2304      	movcs	r3, #4
 80018f0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80018f2:	69fb      	ldr	r3, [r7, #28]
 80018f4:	3304      	adds	r3, #4
 80018f6:	2b06      	cmp	r3, #6
 80018f8:	d902      	bls.n	8001900 <NVIC_EncodePriority+0x30>
 80018fa:	69fb      	ldr	r3, [r7, #28]
 80018fc:	3b03      	subs	r3, #3
 80018fe:	e000      	b.n	8001902 <NVIC_EncodePriority+0x32>
 8001900:	2300      	movs	r3, #0
 8001902:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001904:	f04f 32ff 	mov.w	r2, #4294967295
 8001908:	69bb      	ldr	r3, [r7, #24]
 800190a:	fa02 f303 	lsl.w	r3, r2, r3
 800190e:	43da      	mvns	r2, r3
 8001910:	68bb      	ldr	r3, [r7, #8]
 8001912:	401a      	ands	r2, r3
 8001914:	697b      	ldr	r3, [r7, #20]
 8001916:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001918:	f04f 31ff 	mov.w	r1, #4294967295
 800191c:	697b      	ldr	r3, [r7, #20]
 800191e:	fa01 f303 	lsl.w	r3, r1, r3
 8001922:	43d9      	mvns	r1, r3
 8001924:	687b      	ldr	r3, [r7, #4]
 8001926:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001928:	4313      	orrs	r3, r2
         );
}
 800192a:	4618      	mov	r0, r3
 800192c:	3724      	adds	r7, #36	; 0x24
 800192e:	46bd      	mov	sp, r7
 8001930:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001934:	4770      	bx	lr
	...

08001938 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001938:	b580      	push	{r7, lr}
 800193a:	b082      	sub	sp, #8
 800193c:	af00      	add	r7, sp, #0
 800193e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001940:	687b      	ldr	r3, [r7, #4]
 8001942:	3b01      	subs	r3, #1
 8001944:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001948:	d301      	bcc.n	800194e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800194a:	2301      	movs	r3, #1
 800194c:	e00f      	b.n	800196e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800194e:	4a0a      	ldr	r2, [pc, #40]	; (8001978 <SysTick_Config+0x40>)
 8001950:	687b      	ldr	r3, [r7, #4]
 8001952:	3b01      	subs	r3, #1
 8001954:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001956:	210f      	movs	r1, #15
 8001958:	f04f 30ff 	mov.w	r0, #4294967295
 800195c:	f7ff ff8e 	bl	800187c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001960:	4b05      	ldr	r3, [pc, #20]	; (8001978 <SysTick_Config+0x40>)
 8001962:	2200      	movs	r2, #0
 8001964:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001966:	4b04      	ldr	r3, [pc, #16]	; (8001978 <SysTick_Config+0x40>)
 8001968:	2207      	movs	r2, #7
 800196a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800196c:	2300      	movs	r3, #0
}
 800196e:	4618      	mov	r0, r3
 8001970:	3708      	adds	r7, #8
 8001972:	46bd      	mov	sp, r7
 8001974:	bd80      	pop	{r7, pc}
 8001976:	bf00      	nop
 8001978:	e000e010 	.word	0xe000e010

0800197c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800197c:	b580      	push	{r7, lr}
 800197e:	b082      	sub	sp, #8
 8001980:	af00      	add	r7, sp, #0
 8001982:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001984:	6878      	ldr	r0, [r7, #4]
 8001986:	f7ff ff29 	bl	80017dc <__NVIC_SetPriorityGrouping>
}
 800198a:	bf00      	nop
 800198c:	3708      	adds	r7, #8
 800198e:	46bd      	mov	sp, r7
 8001990:	bd80      	pop	{r7, pc}

08001992 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001992:	b580      	push	{r7, lr}
 8001994:	b086      	sub	sp, #24
 8001996:	af00      	add	r7, sp, #0
 8001998:	4603      	mov	r3, r0
 800199a:	60b9      	str	r1, [r7, #8]
 800199c:	607a      	str	r2, [r7, #4]
 800199e:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 80019a0:	f7ff ff40 	bl	8001824 <__NVIC_GetPriorityGrouping>
 80019a4:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80019a6:	687a      	ldr	r2, [r7, #4]
 80019a8:	68b9      	ldr	r1, [r7, #8]
 80019aa:	6978      	ldr	r0, [r7, #20]
 80019ac:	f7ff ff90 	bl	80018d0 <NVIC_EncodePriority>
 80019b0:	4602      	mov	r2, r0
 80019b2:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 80019b6:	4611      	mov	r1, r2
 80019b8:	4618      	mov	r0, r3
 80019ba:	f7ff ff5f 	bl	800187c <__NVIC_SetPriority>
}
 80019be:	bf00      	nop
 80019c0:	3718      	adds	r7, #24
 80019c2:	46bd      	mov	sp, r7
 80019c4:	bd80      	pop	{r7, pc}

080019c6 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32h7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80019c6:	b580      	push	{r7, lr}
 80019c8:	b082      	sub	sp, #8
 80019ca:	af00      	add	r7, sp, #0
 80019cc:	4603      	mov	r3, r0
 80019ce:	80fb      	strh	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80019d0:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80019d4:	4618      	mov	r0, r3
 80019d6:	f7ff ff33 	bl	8001840 <__NVIC_EnableIRQ>
}
 80019da:	bf00      	nop
 80019dc:	3708      	adds	r7, #8
 80019de:	46bd      	mov	sp, r7
 80019e0:	bd80      	pop	{r7, pc}

080019e2 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status   - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80019e2:	b580      	push	{r7, lr}
 80019e4:	b082      	sub	sp, #8
 80019e6:	af00      	add	r7, sp, #0
 80019e8:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80019ea:	6878      	ldr	r0, [r7, #4]
 80019ec:	f7ff ffa4 	bl	8001938 <SysTick_Config>
 80019f0:	4603      	mov	r3, r0
}
 80019f2:	4618      	mov	r0, r3
 80019f4:	3708      	adds	r7, #8
 80019f6:	46bd      	mov	sp, r7
 80019f8:	bd80      	pop	{r7, pc}
	...

080019fc <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 80019fc:	b580      	push	{r7, lr}
 80019fe:	b086      	sub	sp, #24
 8001a00:	af00      	add	r7, sp, #0
 8001a02:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs_dma;
  BDMA_Base_Registers *regs_bdma;
  const __IO uint32_t *enableRegister;

  uint32_t tickstart = HAL_GetTick();
 8001a04:	f7ff feae 	bl	8001764 <HAL_GetTick>
 8001a08:	6138      	str	r0, [r7, #16]

 /* Check the DMA peripheral handle */
  if(hdma == NULL)
 8001a0a:	687b      	ldr	r3, [r7, #4]
 8001a0c:	2b00      	cmp	r3, #0
 8001a0e:	d101      	bne.n	8001a14 <HAL_DMA_Abort+0x18>
  {
    return HAL_ERROR;
 8001a10:	2301      	movs	r3, #1
 8001a12:	e2dc      	b.n	8001fce <HAL_DMA_Abort+0x5d2>
  }

  /* Check the DMA peripheral state */
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8001a14:	687b      	ldr	r3, [r7, #4]
 8001a16:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8001a1a:	b2db      	uxtb	r3, r3
 8001a1c:	2b02      	cmp	r3, #2
 8001a1e:	d008      	beq.n	8001a32 <HAL_DMA_Abort+0x36>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001a20:	687b      	ldr	r3, [r7, #4]
 8001a22:	2280      	movs	r2, #128	; 0x80
 8001a24:	655a      	str	r2, [r3, #84]	; 0x54

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001a26:	687b      	ldr	r3, [r7, #4]
 8001a28:	2200      	movs	r2, #0
 8001a2a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    return HAL_ERROR;
 8001a2e:	2301      	movs	r3, #1
 8001a30:	e2cd      	b.n	8001fce <HAL_DMA_Abort+0x5d2>
  }
  else
  {
    /* Disable all the transfer interrupts */
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8001a32:	687b      	ldr	r3, [r7, #4]
 8001a34:	681b      	ldr	r3, [r3, #0]
 8001a36:	4a76      	ldr	r2, [pc, #472]	; (8001c10 <HAL_DMA_Abort+0x214>)
 8001a38:	4293      	cmp	r3, r2
 8001a3a:	d04a      	beq.n	8001ad2 <HAL_DMA_Abort+0xd6>
 8001a3c:	687b      	ldr	r3, [r7, #4]
 8001a3e:	681b      	ldr	r3, [r3, #0]
 8001a40:	4a74      	ldr	r2, [pc, #464]	; (8001c14 <HAL_DMA_Abort+0x218>)
 8001a42:	4293      	cmp	r3, r2
 8001a44:	d045      	beq.n	8001ad2 <HAL_DMA_Abort+0xd6>
 8001a46:	687b      	ldr	r3, [r7, #4]
 8001a48:	681b      	ldr	r3, [r3, #0]
 8001a4a:	4a73      	ldr	r2, [pc, #460]	; (8001c18 <HAL_DMA_Abort+0x21c>)
 8001a4c:	4293      	cmp	r3, r2
 8001a4e:	d040      	beq.n	8001ad2 <HAL_DMA_Abort+0xd6>
 8001a50:	687b      	ldr	r3, [r7, #4]
 8001a52:	681b      	ldr	r3, [r3, #0]
 8001a54:	4a71      	ldr	r2, [pc, #452]	; (8001c1c <HAL_DMA_Abort+0x220>)
 8001a56:	4293      	cmp	r3, r2
 8001a58:	d03b      	beq.n	8001ad2 <HAL_DMA_Abort+0xd6>
 8001a5a:	687b      	ldr	r3, [r7, #4]
 8001a5c:	681b      	ldr	r3, [r3, #0]
 8001a5e:	4a70      	ldr	r2, [pc, #448]	; (8001c20 <HAL_DMA_Abort+0x224>)
 8001a60:	4293      	cmp	r3, r2
 8001a62:	d036      	beq.n	8001ad2 <HAL_DMA_Abort+0xd6>
 8001a64:	687b      	ldr	r3, [r7, #4]
 8001a66:	681b      	ldr	r3, [r3, #0]
 8001a68:	4a6e      	ldr	r2, [pc, #440]	; (8001c24 <HAL_DMA_Abort+0x228>)
 8001a6a:	4293      	cmp	r3, r2
 8001a6c:	d031      	beq.n	8001ad2 <HAL_DMA_Abort+0xd6>
 8001a6e:	687b      	ldr	r3, [r7, #4]
 8001a70:	681b      	ldr	r3, [r3, #0]
 8001a72:	4a6d      	ldr	r2, [pc, #436]	; (8001c28 <HAL_DMA_Abort+0x22c>)
 8001a74:	4293      	cmp	r3, r2
 8001a76:	d02c      	beq.n	8001ad2 <HAL_DMA_Abort+0xd6>
 8001a78:	687b      	ldr	r3, [r7, #4]
 8001a7a:	681b      	ldr	r3, [r3, #0]
 8001a7c:	4a6b      	ldr	r2, [pc, #428]	; (8001c2c <HAL_DMA_Abort+0x230>)
 8001a7e:	4293      	cmp	r3, r2
 8001a80:	d027      	beq.n	8001ad2 <HAL_DMA_Abort+0xd6>
 8001a82:	687b      	ldr	r3, [r7, #4]
 8001a84:	681b      	ldr	r3, [r3, #0]
 8001a86:	4a6a      	ldr	r2, [pc, #424]	; (8001c30 <HAL_DMA_Abort+0x234>)
 8001a88:	4293      	cmp	r3, r2
 8001a8a:	d022      	beq.n	8001ad2 <HAL_DMA_Abort+0xd6>
 8001a8c:	687b      	ldr	r3, [r7, #4]
 8001a8e:	681b      	ldr	r3, [r3, #0]
 8001a90:	4a68      	ldr	r2, [pc, #416]	; (8001c34 <HAL_DMA_Abort+0x238>)
 8001a92:	4293      	cmp	r3, r2
 8001a94:	d01d      	beq.n	8001ad2 <HAL_DMA_Abort+0xd6>
 8001a96:	687b      	ldr	r3, [r7, #4]
 8001a98:	681b      	ldr	r3, [r3, #0]
 8001a9a:	4a67      	ldr	r2, [pc, #412]	; (8001c38 <HAL_DMA_Abort+0x23c>)
 8001a9c:	4293      	cmp	r3, r2
 8001a9e:	d018      	beq.n	8001ad2 <HAL_DMA_Abort+0xd6>
 8001aa0:	687b      	ldr	r3, [r7, #4]
 8001aa2:	681b      	ldr	r3, [r3, #0]
 8001aa4:	4a65      	ldr	r2, [pc, #404]	; (8001c3c <HAL_DMA_Abort+0x240>)
 8001aa6:	4293      	cmp	r3, r2
 8001aa8:	d013      	beq.n	8001ad2 <HAL_DMA_Abort+0xd6>
 8001aaa:	687b      	ldr	r3, [r7, #4]
 8001aac:	681b      	ldr	r3, [r3, #0]
 8001aae:	4a64      	ldr	r2, [pc, #400]	; (8001c40 <HAL_DMA_Abort+0x244>)
 8001ab0:	4293      	cmp	r3, r2
 8001ab2:	d00e      	beq.n	8001ad2 <HAL_DMA_Abort+0xd6>
 8001ab4:	687b      	ldr	r3, [r7, #4]
 8001ab6:	681b      	ldr	r3, [r3, #0]
 8001ab8:	4a62      	ldr	r2, [pc, #392]	; (8001c44 <HAL_DMA_Abort+0x248>)
 8001aba:	4293      	cmp	r3, r2
 8001abc:	d009      	beq.n	8001ad2 <HAL_DMA_Abort+0xd6>
 8001abe:	687b      	ldr	r3, [r7, #4]
 8001ac0:	681b      	ldr	r3, [r3, #0]
 8001ac2:	4a61      	ldr	r2, [pc, #388]	; (8001c48 <HAL_DMA_Abort+0x24c>)
 8001ac4:	4293      	cmp	r3, r2
 8001ac6:	d004      	beq.n	8001ad2 <HAL_DMA_Abort+0xd6>
 8001ac8:	687b      	ldr	r3, [r7, #4]
 8001aca:	681b      	ldr	r3, [r3, #0]
 8001acc:	4a5f      	ldr	r2, [pc, #380]	; (8001c4c <HAL_DMA_Abort+0x250>)
 8001ace:	4293      	cmp	r3, r2
 8001ad0:	d101      	bne.n	8001ad6 <HAL_DMA_Abort+0xda>
 8001ad2:	2301      	movs	r3, #1
 8001ad4:	e000      	b.n	8001ad8 <HAL_DMA_Abort+0xdc>
 8001ad6:	2300      	movs	r3, #0
 8001ad8:	2b00      	cmp	r3, #0
 8001ada:	d013      	beq.n	8001b04 <HAL_DMA_Abort+0x108>
    {
       /* Disable DMA All Interrupts  */
      ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME | DMA_IT_HT);
 8001adc:	687b      	ldr	r3, [r7, #4]
 8001ade:	681b      	ldr	r3, [r3, #0]
 8001ae0:	681a      	ldr	r2, [r3, #0]
 8001ae2:	687b      	ldr	r3, [r7, #4]
 8001ae4:	681b      	ldr	r3, [r3, #0]
 8001ae6:	f022 021e 	bic.w	r2, r2, #30
 8001aea:	601a      	str	r2, [r3, #0]
      ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR &= ~(DMA_IT_FE);
 8001aec:	687b      	ldr	r3, [r7, #4]
 8001aee:	681b      	ldr	r3, [r3, #0]
 8001af0:	695a      	ldr	r2, [r3, #20]
 8001af2:	687b      	ldr	r3, [r7, #4]
 8001af4:	681b      	ldr	r3, [r3, #0]
 8001af6:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8001afa:	615a      	str	r2, [r3, #20]

      enableRegister = (__IO uint32_t *)(&(((DMA_Stream_TypeDef   *)hdma->Instance)->CR));
 8001afc:	687b      	ldr	r3, [r7, #4]
 8001afe:	681b      	ldr	r3, [r3, #0]
 8001b00:	617b      	str	r3, [r7, #20]
 8001b02:	e00a      	b.n	8001b1a <HAL_DMA_Abort+0x11e>
    }
    else /* BDMA channel */
    {
      /* Disable DMA All Interrupts */
      ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  &= ~(BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE);
 8001b04:	687b      	ldr	r3, [r7, #4]
 8001b06:	681b      	ldr	r3, [r3, #0]
 8001b08:	681a      	ldr	r2, [r3, #0]
 8001b0a:	687b      	ldr	r3, [r7, #4]
 8001b0c:	681b      	ldr	r3, [r3, #0]
 8001b0e:	f022 020e 	bic.w	r2, r2, #14
 8001b12:	601a      	str	r2, [r3, #0]

      enableRegister = (__IO uint32_t *)(&(((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR));
 8001b14:	687b      	ldr	r3, [r7, #4]
 8001b16:	681b      	ldr	r3, [r3, #0]
 8001b18:	617b      	str	r3, [r7, #20]
    }

    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8001b1a:	687b      	ldr	r3, [r7, #4]
 8001b1c:	681b      	ldr	r3, [r3, #0]
 8001b1e:	4a3c      	ldr	r2, [pc, #240]	; (8001c10 <HAL_DMA_Abort+0x214>)
 8001b20:	4293      	cmp	r3, r2
 8001b22:	d072      	beq.n	8001c0a <HAL_DMA_Abort+0x20e>
 8001b24:	687b      	ldr	r3, [r7, #4]
 8001b26:	681b      	ldr	r3, [r3, #0]
 8001b28:	4a3a      	ldr	r2, [pc, #232]	; (8001c14 <HAL_DMA_Abort+0x218>)
 8001b2a:	4293      	cmp	r3, r2
 8001b2c:	d06d      	beq.n	8001c0a <HAL_DMA_Abort+0x20e>
 8001b2e:	687b      	ldr	r3, [r7, #4]
 8001b30:	681b      	ldr	r3, [r3, #0]
 8001b32:	4a39      	ldr	r2, [pc, #228]	; (8001c18 <HAL_DMA_Abort+0x21c>)
 8001b34:	4293      	cmp	r3, r2
 8001b36:	d068      	beq.n	8001c0a <HAL_DMA_Abort+0x20e>
 8001b38:	687b      	ldr	r3, [r7, #4]
 8001b3a:	681b      	ldr	r3, [r3, #0]
 8001b3c:	4a37      	ldr	r2, [pc, #220]	; (8001c1c <HAL_DMA_Abort+0x220>)
 8001b3e:	4293      	cmp	r3, r2
 8001b40:	d063      	beq.n	8001c0a <HAL_DMA_Abort+0x20e>
 8001b42:	687b      	ldr	r3, [r7, #4]
 8001b44:	681b      	ldr	r3, [r3, #0]
 8001b46:	4a36      	ldr	r2, [pc, #216]	; (8001c20 <HAL_DMA_Abort+0x224>)
 8001b48:	4293      	cmp	r3, r2
 8001b4a:	d05e      	beq.n	8001c0a <HAL_DMA_Abort+0x20e>
 8001b4c:	687b      	ldr	r3, [r7, #4]
 8001b4e:	681b      	ldr	r3, [r3, #0]
 8001b50:	4a34      	ldr	r2, [pc, #208]	; (8001c24 <HAL_DMA_Abort+0x228>)
 8001b52:	4293      	cmp	r3, r2
 8001b54:	d059      	beq.n	8001c0a <HAL_DMA_Abort+0x20e>
 8001b56:	687b      	ldr	r3, [r7, #4]
 8001b58:	681b      	ldr	r3, [r3, #0]
 8001b5a:	4a33      	ldr	r2, [pc, #204]	; (8001c28 <HAL_DMA_Abort+0x22c>)
 8001b5c:	4293      	cmp	r3, r2
 8001b5e:	d054      	beq.n	8001c0a <HAL_DMA_Abort+0x20e>
 8001b60:	687b      	ldr	r3, [r7, #4]
 8001b62:	681b      	ldr	r3, [r3, #0]
 8001b64:	4a31      	ldr	r2, [pc, #196]	; (8001c2c <HAL_DMA_Abort+0x230>)
 8001b66:	4293      	cmp	r3, r2
 8001b68:	d04f      	beq.n	8001c0a <HAL_DMA_Abort+0x20e>
 8001b6a:	687b      	ldr	r3, [r7, #4]
 8001b6c:	681b      	ldr	r3, [r3, #0]
 8001b6e:	4a30      	ldr	r2, [pc, #192]	; (8001c30 <HAL_DMA_Abort+0x234>)
 8001b70:	4293      	cmp	r3, r2
 8001b72:	d04a      	beq.n	8001c0a <HAL_DMA_Abort+0x20e>
 8001b74:	687b      	ldr	r3, [r7, #4]
 8001b76:	681b      	ldr	r3, [r3, #0]
 8001b78:	4a2e      	ldr	r2, [pc, #184]	; (8001c34 <HAL_DMA_Abort+0x238>)
 8001b7a:	4293      	cmp	r3, r2
 8001b7c:	d045      	beq.n	8001c0a <HAL_DMA_Abort+0x20e>
 8001b7e:	687b      	ldr	r3, [r7, #4]
 8001b80:	681b      	ldr	r3, [r3, #0]
 8001b82:	4a2d      	ldr	r2, [pc, #180]	; (8001c38 <HAL_DMA_Abort+0x23c>)
 8001b84:	4293      	cmp	r3, r2
 8001b86:	d040      	beq.n	8001c0a <HAL_DMA_Abort+0x20e>
 8001b88:	687b      	ldr	r3, [r7, #4]
 8001b8a:	681b      	ldr	r3, [r3, #0]
 8001b8c:	4a2b      	ldr	r2, [pc, #172]	; (8001c3c <HAL_DMA_Abort+0x240>)
 8001b8e:	4293      	cmp	r3, r2
 8001b90:	d03b      	beq.n	8001c0a <HAL_DMA_Abort+0x20e>
 8001b92:	687b      	ldr	r3, [r7, #4]
 8001b94:	681b      	ldr	r3, [r3, #0]
 8001b96:	4a2a      	ldr	r2, [pc, #168]	; (8001c40 <HAL_DMA_Abort+0x244>)
 8001b98:	4293      	cmp	r3, r2
 8001b9a:	d036      	beq.n	8001c0a <HAL_DMA_Abort+0x20e>
 8001b9c:	687b      	ldr	r3, [r7, #4]
 8001b9e:	681b      	ldr	r3, [r3, #0]
 8001ba0:	4a28      	ldr	r2, [pc, #160]	; (8001c44 <HAL_DMA_Abort+0x248>)
 8001ba2:	4293      	cmp	r3, r2
 8001ba4:	d031      	beq.n	8001c0a <HAL_DMA_Abort+0x20e>
 8001ba6:	687b      	ldr	r3, [r7, #4]
 8001ba8:	681b      	ldr	r3, [r3, #0]
 8001baa:	4a27      	ldr	r2, [pc, #156]	; (8001c48 <HAL_DMA_Abort+0x24c>)
 8001bac:	4293      	cmp	r3, r2
 8001bae:	d02c      	beq.n	8001c0a <HAL_DMA_Abort+0x20e>
 8001bb0:	687b      	ldr	r3, [r7, #4]
 8001bb2:	681b      	ldr	r3, [r3, #0]
 8001bb4:	4a25      	ldr	r2, [pc, #148]	; (8001c4c <HAL_DMA_Abort+0x250>)
 8001bb6:	4293      	cmp	r3, r2
 8001bb8:	d027      	beq.n	8001c0a <HAL_DMA_Abort+0x20e>
 8001bba:	687b      	ldr	r3, [r7, #4]
 8001bbc:	681b      	ldr	r3, [r3, #0]
 8001bbe:	4a24      	ldr	r2, [pc, #144]	; (8001c50 <HAL_DMA_Abort+0x254>)
 8001bc0:	4293      	cmp	r3, r2
 8001bc2:	d022      	beq.n	8001c0a <HAL_DMA_Abort+0x20e>
 8001bc4:	687b      	ldr	r3, [r7, #4]
 8001bc6:	681b      	ldr	r3, [r3, #0]
 8001bc8:	4a22      	ldr	r2, [pc, #136]	; (8001c54 <HAL_DMA_Abort+0x258>)
 8001bca:	4293      	cmp	r3, r2
 8001bcc:	d01d      	beq.n	8001c0a <HAL_DMA_Abort+0x20e>
 8001bce:	687b      	ldr	r3, [r7, #4]
 8001bd0:	681b      	ldr	r3, [r3, #0]
 8001bd2:	4a21      	ldr	r2, [pc, #132]	; (8001c58 <HAL_DMA_Abort+0x25c>)
 8001bd4:	4293      	cmp	r3, r2
 8001bd6:	d018      	beq.n	8001c0a <HAL_DMA_Abort+0x20e>
 8001bd8:	687b      	ldr	r3, [r7, #4]
 8001bda:	681b      	ldr	r3, [r3, #0]
 8001bdc:	4a1f      	ldr	r2, [pc, #124]	; (8001c5c <HAL_DMA_Abort+0x260>)
 8001bde:	4293      	cmp	r3, r2
 8001be0:	d013      	beq.n	8001c0a <HAL_DMA_Abort+0x20e>
 8001be2:	687b      	ldr	r3, [r7, #4]
 8001be4:	681b      	ldr	r3, [r3, #0]
 8001be6:	4a1e      	ldr	r2, [pc, #120]	; (8001c60 <HAL_DMA_Abort+0x264>)
 8001be8:	4293      	cmp	r3, r2
 8001bea:	d00e      	beq.n	8001c0a <HAL_DMA_Abort+0x20e>
 8001bec:	687b      	ldr	r3, [r7, #4]
 8001bee:	681b      	ldr	r3, [r3, #0]
 8001bf0:	4a1c      	ldr	r2, [pc, #112]	; (8001c64 <HAL_DMA_Abort+0x268>)
 8001bf2:	4293      	cmp	r3, r2
 8001bf4:	d009      	beq.n	8001c0a <HAL_DMA_Abort+0x20e>
 8001bf6:	687b      	ldr	r3, [r7, #4]
 8001bf8:	681b      	ldr	r3, [r3, #0]
 8001bfa:	4a1b      	ldr	r2, [pc, #108]	; (8001c68 <HAL_DMA_Abort+0x26c>)
 8001bfc:	4293      	cmp	r3, r2
 8001bfe:	d004      	beq.n	8001c0a <HAL_DMA_Abort+0x20e>
 8001c00:	687b      	ldr	r3, [r7, #4]
 8001c02:	681b      	ldr	r3, [r3, #0]
 8001c04:	4a19      	ldr	r2, [pc, #100]	; (8001c6c <HAL_DMA_Abort+0x270>)
 8001c06:	4293      	cmp	r3, r2
 8001c08:	d132      	bne.n	8001c70 <HAL_DMA_Abort+0x274>
 8001c0a:	2301      	movs	r3, #1
 8001c0c:	e031      	b.n	8001c72 <HAL_DMA_Abort+0x276>
 8001c0e:	bf00      	nop
 8001c10:	40020010 	.word	0x40020010
 8001c14:	40020028 	.word	0x40020028
 8001c18:	40020040 	.word	0x40020040
 8001c1c:	40020058 	.word	0x40020058
 8001c20:	40020070 	.word	0x40020070
 8001c24:	40020088 	.word	0x40020088
 8001c28:	400200a0 	.word	0x400200a0
 8001c2c:	400200b8 	.word	0x400200b8
 8001c30:	40020410 	.word	0x40020410
 8001c34:	40020428 	.word	0x40020428
 8001c38:	40020440 	.word	0x40020440
 8001c3c:	40020458 	.word	0x40020458
 8001c40:	40020470 	.word	0x40020470
 8001c44:	40020488 	.word	0x40020488
 8001c48:	400204a0 	.word	0x400204a0
 8001c4c:	400204b8 	.word	0x400204b8
 8001c50:	58025408 	.word	0x58025408
 8001c54:	5802541c 	.word	0x5802541c
 8001c58:	58025430 	.word	0x58025430
 8001c5c:	58025444 	.word	0x58025444
 8001c60:	58025458 	.word	0x58025458
 8001c64:	5802546c 	.word	0x5802546c
 8001c68:	58025480 	.word	0x58025480
 8001c6c:	58025494 	.word	0x58025494
 8001c70:	2300      	movs	r3, #0
 8001c72:	2b00      	cmp	r3, #0
 8001c74:	d007      	beq.n	8001c86 <HAL_DMA_Abort+0x28a>
    {
      /* disable the DMAMUX sync overrun IT */
      hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8001c76:	687b      	ldr	r3, [r7, #4]
 8001c78:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001c7a:	681a      	ldr	r2, [r3, #0]
 8001c7c:	687b      	ldr	r3, [r7, #4]
 8001c7e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001c80:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8001c84:	601a      	str	r2, [r3, #0]
    }

    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8001c86:	687b      	ldr	r3, [r7, #4]
 8001c88:	681b      	ldr	r3, [r3, #0]
 8001c8a:	4a6d      	ldr	r2, [pc, #436]	; (8001e40 <HAL_DMA_Abort+0x444>)
 8001c8c:	4293      	cmp	r3, r2
 8001c8e:	d04a      	beq.n	8001d26 <HAL_DMA_Abort+0x32a>
 8001c90:	687b      	ldr	r3, [r7, #4]
 8001c92:	681b      	ldr	r3, [r3, #0]
 8001c94:	4a6b      	ldr	r2, [pc, #428]	; (8001e44 <HAL_DMA_Abort+0x448>)
 8001c96:	4293      	cmp	r3, r2
 8001c98:	d045      	beq.n	8001d26 <HAL_DMA_Abort+0x32a>
 8001c9a:	687b      	ldr	r3, [r7, #4]
 8001c9c:	681b      	ldr	r3, [r3, #0]
 8001c9e:	4a6a      	ldr	r2, [pc, #424]	; (8001e48 <HAL_DMA_Abort+0x44c>)
 8001ca0:	4293      	cmp	r3, r2
 8001ca2:	d040      	beq.n	8001d26 <HAL_DMA_Abort+0x32a>
 8001ca4:	687b      	ldr	r3, [r7, #4]
 8001ca6:	681b      	ldr	r3, [r3, #0]
 8001ca8:	4a68      	ldr	r2, [pc, #416]	; (8001e4c <HAL_DMA_Abort+0x450>)
 8001caa:	4293      	cmp	r3, r2
 8001cac:	d03b      	beq.n	8001d26 <HAL_DMA_Abort+0x32a>
 8001cae:	687b      	ldr	r3, [r7, #4]
 8001cb0:	681b      	ldr	r3, [r3, #0]
 8001cb2:	4a67      	ldr	r2, [pc, #412]	; (8001e50 <HAL_DMA_Abort+0x454>)
 8001cb4:	4293      	cmp	r3, r2
 8001cb6:	d036      	beq.n	8001d26 <HAL_DMA_Abort+0x32a>
 8001cb8:	687b      	ldr	r3, [r7, #4]
 8001cba:	681b      	ldr	r3, [r3, #0]
 8001cbc:	4a65      	ldr	r2, [pc, #404]	; (8001e54 <HAL_DMA_Abort+0x458>)
 8001cbe:	4293      	cmp	r3, r2
 8001cc0:	d031      	beq.n	8001d26 <HAL_DMA_Abort+0x32a>
 8001cc2:	687b      	ldr	r3, [r7, #4]
 8001cc4:	681b      	ldr	r3, [r3, #0]
 8001cc6:	4a64      	ldr	r2, [pc, #400]	; (8001e58 <HAL_DMA_Abort+0x45c>)
 8001cc8:	4293      	cmp	r3, r2
 8001cca:	d02c      	beq.n	8001d26 <HAL_DMA_Abort+0x32a>
 8001ccc:	687b      	ldr	r3, [r7, #4]
 8001cce:	681b      	ldr	r3, [r3, #0]
 8001cd0:	4a62      	ldr	r2, [pc, #392]	; (8001e5c <HAL_DMA_Abort+0x460>)
 8001cd2:	4293      	cmp	r3, r2
 8001cd4:	d027      	beq.n	8001d26 <HAL_DMA_Abort+0x32a>
 8001cd6:	687b      	ldr	r3, [r7, #4]
 8001cd8:	681b      	ldr	r3, [r3, #0]
 8001cda:	4a61      	ldr	r2, [pc, #388]	; (8001e60 <HAL_DMA_Abort+0x464>)
 8001cdc:	4293      	cmp	r3, r2
 8001cde:	d022      	beq.n	8001d26 <HAL_DMA_Abort+0x32a>
 8001ce0:	687b      	ldr	r3, [r7, #4]
 8001ce2:	681b      	ldr	r3, [r3, #0]
 8001ce4:	4a5f      	ldr	r2, [pc, #380]	; (8001e64 <HAL_DMA_Abort+0x468>)
 8001ce6:	4293      	cmp	r3, r2
 8001ce8:	d01d      	beq.n	8001d26 <HAL_DMA_Abort+0x32a>
 8001cea:	687b      	ldr	r3, [r7, #4]
 8001cec:	681b      	ldr	r3, [r3, #0]
 8001cee:	4a5e      	ldr	r2, [pc, #376]	; (8001e68 <HAL_DMA_Abort+0x46c>)
 8001cf0:	4293      	cmp	r3, r2
 8001cf2:	d018      	beq.n	8001d26 <HAL_DMA_Abort+0x32a>
 8001cf4:	687b      	ldr	r3, [r7, #4]
 8001cf6:	681b      	ldr	r3, [r3, #0]
 8001cf8:	4a5c      	ldr	r2, [pc, #368]	; (8001e6c <HAL_DMA_Abort+0x470>)
 8001cfa:	4293      	cmp	r3, r2
 8001cfc:	d013      	beq.n	8001d26 <HAL_DMA_Abort+0x32a>
 8001cfe:	687b      	ldr	r3, [r7, #4]
 8001d00:	681b      	ldr	r3, [r3, #0]
 8001d02:	4a5b      	ldr	r2, [pc, #364]	; (8001e70 <HAL_DMA_Abort+0x474>)
 8001d04:	4293      	cmp	r3, r2
 8001d06:	d00e      	beq.n	8001d26 <HAL_DMA_Abort+0x32a>
 8001d08:	687b      	ldr	r3, [r7, #4]
 8001d0a:	681b      	ldr	r3, [r3, #0]
 8001d0c:	4a59      	ldr	r2, [pc, #356]	; (8001e74 <HAL_DMA_Abort+0x478>)
 8001d0e:	4293      	cmp	r3, r2
 8001d10:	d009      	beq.n	8001d26 <HAL_DMA_Abort+0x32a>
 8001d12:	687b      	ldr	r3, [r7, #4]
 8001d14:	681b      	ldr	r3, [r3, #0]
 8001d16:	4a58      	ldr	r2, [pc, #352]	; (8001e78 <HAL_DMA_Abort+0x47c>)
 8001d18:	4293      	cmp	r3, r2
 8001d1a:	d004      	beq.n	8001d26 <HAL_DMA_Abort+0x32a>
 8001d1c:	687b      	ldr	r3, [r7, #4]
 8001d1e:	681b      	ldr	r3, [r3, #0]
 8001d20:	4a56      	ldr	r2, [pc, #344]	; (8001e7c <HAL_DMA_Abort+0x480>)
 8001d22:	4293      	cmp	r3, r2
 8001d24:	d108      	bne.n	8001d38 <HAL_DMA_Abort+0x33c>
 8001d26:	687b      	ldr	r3, [r7, #4]
 8001d28:	681b      	ldr	r3, [r3, #0]
 8001d2a:	681a      	ldr	r2, [r3, #0]
 8001d2c:	687b      	ldr	r3, [r7, #4]
 8001d2e:	681b      	ldr	r3, [r3, #0]
 8001d30:	f022 0201 	bic.w	r2, r2, #1
 8001d34:	601a      	str	r2, [r3, #0]
 8001d36:	e007      	b.n	8001d48 <HAL_DMA_Abort+0x34c>
 8001d38:	687b      	ldr	r3, [r7, #4]
 8001d3a:	681b      	ldr	r3, [r3, #0]
 8001d3c:	681a      	ldr	r2, [r3, #0]
 8001d3e:	687b      	ldr	r3, [r7, #4]
 8001d40:	681b      	ldr	r3, [r3, #0]
 8001d42:	f022 0201 	bic.w	r2, r2, #1
 8001d46:	601a      	str	r2, [r3, #0]

    /* Check if the DMA Stream is effectively disabled */
    while(((*enableRegister) & DMA_SxCR_EN) != 0U)
 8001d48:	e013      	b.n	8001d72 <HAL_DMA_Abort+0x376>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8001d4a:	f7ff fd0b 	bl	8001764 <HAL_GetTick>
 8001d4e:	4602      	mov	r2, r0
 8001d50:	693b      	ldr	r3, [r7, #16]
 8001d52:	1ad3      	subs	r3, r2, r3
 8001d54:	2b05      	cmp	r3, #5
 8001d56:	d90c      	bls.n	8001d72 <HAL_DMA_Abort+0x376>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8001d58:	687b      	ldr	r3, [r7, #4]
 8001d5a:	2220      	movs	r2, #32
 8001d5c:	655a      	str	r2, [r3, #84]	; 0x54

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8001d5e:	687b      	ldr	r3, [r7, #4]
 8001d60:	2200      	movs	r2, #0
 8001d62:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_ERROR;
 8001d66:	687b      	ldr	r3, [r7, #4]
 8001d68:	2203      	movs	r2, #3
 8001d6a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        return HAL_ERROR;
 8001d6e:	2301      	movs	r3, #1
 8001d70:	e12d      	b.n	8001fce <HAL_DMA_Abort+0x5d2>
    while(((*enableRegister) & DMA_SxCR_EN) != 0U)
 8001d72:	697b      	ldr	r3, [r7, #20]
 8001d74:	681b      	ldr	r3, [r3, #0]
 8001d76:	f003 0301 	and.w	r3, r3, #1
 8001d7a:	2b00      	cmp	r3, #0
 8001d7c:	d1e5      	bne.n	8001d4a <HAL_DMA_Abort+0x34e>
      }
    }

    /* Clear all interrupt flags at correct offset within the register */
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8001d7e:	687b      	ldr	r3, [r7, #4]
 8001d80:	681b      	ldr	r3, [r3, #0]
 8001d82:	4a2f      	ldr	r2, [pc, #188]	; (8001e40 <HAL_DMA_Abort+0x444>)
 8001d84:	4293      	cmp	r3, r2
 8001d86:	d04a      	beq.n	8001e1e <HAL_DMA_Abort+0x422>
 8001d88:	687b      	ldr	r3, [r7, #4]
 8001d8a:	681b      	ldr	r3, [r3, #0]
 8001d8c:	4a2d      	ldr	r2, [pc, #180]	; (8001e44 <HAL_DMA_Abort+0x448>)
 8001d8e:	4293      	cmp	r3, r2
 8001d90:	d045      	beq.n	8001e1e <HAL_DMA_Abort+0x422>
 8001d92:	687b      	ldr	r3, [r7, #4]
 8001d94:	681b      	ldr	r3, [r3, #0]
 8001d96:	4a2c      	ldr	r2, [pc, #176]	; (8001e48 <HAL_DMA_Abort+0x44c>)
 8001d98:	4293      	cmp	r3, r2
 8001d9a:	d040      	beq.n	8001e1e <HAL_DMA_Abort+0x422>
 8001d9c:	687b      	ldr	r3, [r7, #4]
 8001d9e:	681b      	ldr	r3, [r3, #0]
 8001da0:	4a2a      	ldr	r2, [pc, #168]	; (8001e4c <HAL_DMA_Abort+0x450>)
 8001da2:	4293      	cmp	r3, r2
 8001da4:	d03b      	beq.n	8001e1e <HAL_DMA_Abort+0x422>
 8001da6:	687b      	ldr	r3, [r7, #4]
 8001da8:	681b      	ldr	r3, [r3, #0]
 8001daa:	4a29      	ldr	r2, [pc, #164]	; (8001e50 <HAL_DMA_Abort+0x454>)
 8001dac:	4293      	cmp	r3, r2
 8001dae:	d036      	beq.n	8001e1e <HAL_DMA_Abort+0x422>
 8001db0:	687b      	ldr	r3, [r7, #4]
 8001db2:	681b      	ldr	r3, [r3, #0]
 8001db4:	4a27      	ldr	r2, [pc, #156]	; (8001e54 <HAL_DMA_Abort+0x458>)
 8001db6:	4293      	cmp	r3, r2
 8001db8:	d031      	beq.n	8001e1e <HAL_DMA_Abort+0x422>
 8001dba:	687b      	ldr	r3, [r7, #4]
 8001dbc:	681b      	ldr	r3, [r3, #0]
 8001dbe:	4a26      	ldr	r2, [pc, #152]	; (8001e58 <HAL_DMA_Abort+0x45c>)
 8001dc0:	4293      	cmp	r3, r2
 8001dc2:	d02c      	beq.n	8001e1e <HAL_DMA_Abort+0x422>
 8001dc4:	687b      	ldr	r3, [r7, #4]
 8001dc6:	681b      	ldr	r3, [r3, #0]
 8001dc8:	4a24      	ldr	r2, [pc, #144]	; (8001e5c <HAL_DMA_Abort+0x460>)
 8001dca:	4293      	cmp	r3, r2
 8001dcc:	d027      	beq.n	8001e1e <HAL_DMA_Abort+0x422>
 8001dce:	687b      	ldr	r3, [r7, #4]
 8001dd0:	681b      	ldr	r3, [r3, #0]
 8001dd2:	4a23      	ldr	r2, [pc, #140]	; (8001e60 <HAL_DMA_Abort+0x464>)
 8001dd4:	4293      	cmp	r3, r2
 8001dd6:	d022      	beq.n	8001e1e <HAL_DMA_Abort+0x422>
 8001dd8:	687b      	ldr	r3, [r7, #4]
 8001dda:	681b      	ldr	r3, [r3, #0]
 8001ddc:	4a21      	ldr	r2, [pc, #132]	; (8001e64 <HAL_DMA_Abort+0x468>)
 8001dde:	4293      	cmp	r3, r2
 8001de0:	d01d      	beq.n	8001e1e <HAL_DMA_Abort+0x422>
 8001de2:	687b      	ldr	r3, [r7, #4]
 8001de4:	681b      	ldr	r3, [r3, #0]
 8001de6:	4a20      	ldr	r2, [pc, #128]	; (8001e68 <HAL_DMA_Abort+0x46c>)
 8001de8:	4293      	cmp	r3, r2
 8001dea:	d018      	beq.n	8001e1e <HAL_DMA_Abort+0x422>
 8001dec:	687b      	ldr	r3, [r7, #4]
 8001dee:	681b      	ldr	r3, [r3, #0]
 8001df0:	4a1e      	ldr	r2, [pc, #120]	; (8001e6c <HAL_DMA_Abort+0x470>)
 8001df2:	4293      	cmp	r3, r2
 8001df4:	d013      	beq.n	8001e1e <HAL_DMA_Abort+0x422>
 8001df6:	687b      	ldr	r3, [r7, #4]
 8001df8:	681b      	ldr	r3, [r3, #0]
 8001dfa:	4a1d      	ldr	r2, [pc, #116]	; (8001e70 <HAL_DMA_Abort+0x474>)
 8001dfc:	4293      	cmp	r3, r2
 8001dfe:	d00e      	beq.n	8001e1e <HAL_DMA_Abort+0x422>
 8001e00:	687b      	ldr	r3, [r7, #4]
 8001e02:	681b      	ldr	r3, [r3, #0]
 8001e04:	4a1b      	ldr	r2, [pc, #108]	; (8001e74 <HAL_DMA_Abort+0x478>)
 8001e06:	4293      	cmp	r3, r2
 8001e08:	d009      	beq.n	8001e1e <HAL_DMA_Abort+0x422>
 8001e0a:	687b      	ldr	r3, [r7, #4]
 8001e0c:	681b      	ldr	r3, [r3, #0]
 8001e0e:	4a1a      	ldr	r2, [pc, #104]	; (8001e78 <HAL_DMA_Abort+0x47c>)
 8001e10:	4293      	cmp	r3, r2
 8001e12:	d004      	beq.n	8001e1e <HAL_DMA_Abort+0x422>
 8001e14:	687b      	ldr	r3, [r7, #4]
 8001e16:	681b      	ldr	r3, [r3, #0]
 8001e18:	4a18      	ldr	r2, [pc, #96]	; (8001e7c <HAL_DMA_Abort+0x480>)
 8001e1a:	4293      	cmp	r3, r2
 8001e1c:	d101      	bne.n	8001e22 <HAL_DMA_Abort+0x426>
 8001e1e:	2301      	movs	r3, #1
 8001e20:	e000      	b.n	8001e24 <HAL_DMA_Abort+0x428>
 8001e22:	2300      	movs	r3, #0
 8001e24:	2b00      	cmp	r3, #0
 8001e26:	d02b      	beq.n	8001e80 <HAL_DMA_Abort+0x484>
    {
      regs_dma = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8001e28:	687b      	ldr	r3, [r7, #4]
 8001e2a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001e2c:	60bb      	str	r3, [r7, #8]
      regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 8001e2e:	687b      	ldr	r3, [r7, #4]
 8001e30:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001e32:	f003 031f 	and.w	r3, r3, #31
 8001e36:	223f      	movs	r2, #63	; 0x3f
 8001e38:	409a      	lsls	r2, r3
 8001e3a:	68bb      	ldr	r3, [r7, #8]
 8001e3c:	609a      	str	r2, [r3, #8]
 8001e3e:	e02a      	b.n	8001e96 <HAL_DMA_Abort+0x49a>
 8001e40:	40020010 	.word	0x40020010
 8001e44:	40020028 	.word	0x40020028
 8001e48:	40020040 	.word	0x40020040
 8001e4c:	40020058 	.word	0x40020058
 8001e50:	40020070 	.word	0x40020070
 8001e54:	40020088 	.word	0x40020088
 8001e58:	400200a0 	.word	0x400200a0
 8001e5c:	400200b8 	.word	0x400200b8
 8001e60:	40020410 	.word	0x40020410
 8001e64:	40020428 	.word	0x40020428
 8001e68:	40020440 	.word	0x40020440
 8001e6c:	40020458 	.word	0x40020458
 8001e70:	40020470 	.word	0x40020470
 8001e74:	40020488 	.word	0x40020488
 8001e78:	400204a0 	.word	0x400204a0
 8001e7c:	400204b8 	.word	0x400204b8
    }
    else /* BDMA channel */
    {
      regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 8001e80:	687b      	ldr	r3, [r7, #4]
 8001e82:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001e84:	60fb      	str	r3, [r7, #12]
      regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 8001e86:	687b      	ldr	r3, [r7, #4]
 8001e88:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001e8a:	f003 031f 	and.w	r3, r3, #31
 8001e8e:	2201      	movs	r2, #1
 8001e90:	409a      	lsls	r2, r3
 8001e92:	68fb      	ldr	r3, [r7, #12]
 8001e94:	605a      	str	r2, [r3, #4]
    }

    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8001e96:	687b      	ldr	r3, [r7, #4]
 8001e98:	681b      	ldr	r3, [r3, #0]
 8001e9a:	4a4f      	ldr	r2, [pc, #316]	; (8001fd8 <HAL_DMA_Abort+0x5dc>)
 8001e9c:	4293      	cmp	r3, r2
 8001e9e:	d072      	beq.n	8001f86 <HAL_DMA_Abort+0x58a>
 8001ea0:	687b      	ldr	r3, [r7, #4]
 8001ea2:	681b      	ldr	r3, [r3, #0]
 8001ea4:	4a4d      	ldr	r2, [pc, #308]	; (8001fdc <HAL_DMA_Abort+0x5e0>)
 8001ea6:	4293      	cmp	r3, r2
 8001ea8:	d06d      	beq.n	8001f86 <HAL_DMA_Abort+0x58a>
 8001eaa:	687b      	ldr	r3, [r7, #4]
 8001eac:	681b      	ldr	r3, [r3, #0]
 8001eae:	4a4c      	ldr	r2, [pc, #304]	; (8001fe0 <HAL_DMA_Abort+0x5e4>)
 8001eb0:	4293      	cmp	r3, r2
 8001eb2:	d068      	beq.n	8001f86 <HAL_DMA_Abort+0x58a>
 8001eb4:	687b      	ldr	r3, [r7, #4]
 8001eb6:	681b      	ldr	r3, [r3, #0]
 8001eb8:	4a4a      	ldr	r2, [pc, #296]	; (8001fe4 <HAL_DMA_Abort+0x5e8>)
 8001eba:	4293      	cmp	r3, r2
 8001ebc:	d063      	beq.n	8001f86 <HAL_DMA_Abort+0x58a>
 8001ebe:	687b      	ldr	r3, [r7, #4]
 8001ec0:	681b      	ldr	r3, [r3, #0]
 8001ec2:	4a49      	ldr	r2, [pc, #292]	; (8001fe8 <HAL_DMA_Abort+0x5ec>)
 8001ec4:	4293      	cmp	r3, r2
 8001ec6:	d05e      	beq.n	8001f86 <HAL_DMA_Abort+0x58a>
 8001ec8:	687b      	ldr	r3, [r7, #4]
 8001eca:	681b      	ldr	r3, [r3, #0]
 8001ecc:	4a47      	ldr	r2, [pc, #284]	; (8001fec <HAL_DMA_Abort+0x5f0>)
 8001ece:	4293      	cmp	r3, r2
 8001ed0:	d059      	beq.n	8001f86 <HAL_DMA_Abort+0x58a>
 8001ed2:	687b      	ldr	r3, [r7, #4]
 8001ed4:	681b      	ldr	r3, [r3, #0]
 8001ed6:	4a46      	ldr	r2, [pc, #280]	; (8001ff0 <HAL_DMA_Abort+0x5f4>)
 8001ed8:	4293      	cmp	r3, r2
 8001eda:	d054      	beq.n	8001f86 <HAL_DMA_Abort+0x58a>
 8001edc:	687b      	ldr	r3, [r7, #4]
 8001ede:	681b      	ldr	r3, [r3, #0]
 8001ee0:	4a44      	ldr	r2, [pc, #272]	; (8001ff4 <HAL_DMA_Abort+0x5f8>)
 8001ee2:	4293      	cmp	r3, r2
 8001ee4:	d04f      	beq.n	8001f86 <HAL_DMA_Abort+0x58a>
 8001ee6:	687b      	ldr	r3, [r7, #4]
 8001ee8:	681b      	ldr	r3, [r3, #0]
 8001eea:	4a43      	ldr	r2, [pc, #268]	; (8001ff8 <HAL_DMA_Abort+0x5fc>)
 8001eec:	4293      	cmp	r3, r2
 8001eee:	d04a      	beq.n	8001f86 <HAL_DMA_Abort+0x58a>
 8001ef0:	687b      	ldr	r3, [r7, #4]
 8001ef2:	681b      	ldr	r3, [r3, #0]
 8001ef4:	4a41      	ldr	r2, [pc, #260]	; (8001ffc <HAL_DMA_Abort+0x600>)
 8001ef6:	4293      	cmp	r3, r2
 8001ef8:	d045      	beq.n	8001f86 <HAL_DMA_Abort+0x58a>
 8001efa:	687b      	ldr	r3, [r7, #4]
 8001efc:	681b      	ldr	r3, [r3, #0]
 8001efe:	4a40      	ldr	r2, [pc, #256]	; (8002000 <HAL_DMA_Abort+0x604>)
 8001f00:	4293      	cmp	r3, r2
 8001f02:	d040      	beq.n	8001f86 <HAL_DMA_Abort+0x58a>
 8001f04:	687b      	ldr	r3, [r7, #4]
 8001f06:	681b      	ldr	r3, [r3, #0]
 8001f08:	4a3e      	ldr	r2, [pc, #248]	; (8002004 <HAL_DMA_Abort+0x608>)
 8001f0a:	4293      	cmp	r3, r2
 8001f0c:	d03b      	beq.n	8001f86 <HAL_DMA_Abort+0x58a>
 8001f0e:	687b      	ldr	r3, [r7, #4]
 8001f10:	681b      	ldr	r3, [r3, #0]
 8001f12:	4a3d      	ldr	r2, [pc, #244]	; (8002008 <HAL_DMA_Abort+0x60c>)
 8001f14:	4293      	cmp	r3, r2
 8001f16:	d036      	beq.n	8001f86 <HAL_DMA_Abort+0x58a>
 8001f18:	687b      	ldr	r3, [r7, #4]
 8001f1a:	681b      	ldr	r3, [r3, #0]
 8001f1c:	4a3b      	ldr	r2, [pc, #236]	; (800200c <HAL_DMA_Abort+0x610>)
 8001f1e:	4293      	cmp	r3, r2
 8001f20:	d031      	beq.n	8001f86 <HAL_DMA_Abort+0x58a>
 8001f22:	687b      	ldr	r3, [r7, #4]
 8001f24:	681b      	ldr	r3, [r3, #0]
 8001f26:	4a3a      	ldr	r2, [pc, #232]	; (8002010 <HAL_DMA_Abort+0x614>)
 8001f28:	4293      	cmp	r3, r2
 8001f2a:	d02c      	beq.n	8001f86 <HAL_DMA_Abort+0x58a>
 8001f2c:	687b      	ldr	r3, [r7, #4]
 8001f2e:	681b      	ldr	r3, [r3, #0]
 8001f30:	4a38      	ldr	r2, [pc, #224]	; (8002014 <HAL_DMA_Abort+0x618>)
 8001f32:	4293      	cmp	r3, r2
 8001f34:	d027      	beq.n	8001f86 <HAL_DMA_Abort+0x58a>
 8001f36:	687b      	ldr	r3, [r7, #4]
 8001f38:	681b      	ldr	r3, [r3, #0]
 8001f3a:	4a37      	ldr	r2, [pc, #220]	; (8002018 <HAL_DMA_Abort+0x61c>)
 8001f3c:	4293      	cmp	r3, r2
 8001f3e:	d022      	beq.n	8001f86 <HAL_DMA_Abort+0x58a>
 8001f40:	687b      	ldr	r3, [r7, #4]
 8001f42:	681b      	ldr	r3, [r3, #0]
 8001f44:	4a35      	ldr	r2, [pc, #212]	; (800201c <HAL_DMA_Abort+0x620>)
 8001f46:	4293      	cmp	r3, r2
 8001f48:	d01d      	beq.n	8001f86 <HAL_DMA_Abort+0x58a>
 8001f4a:	687b      	ldr	r3, [r7, #4]
 8001f4c:	681b      	ldr	r3, [r3, #0]
 8001f4e:	4a34      	ldr	r2, [pc, #208]	; (8002020 <HAL_DMA_Abort+0x624>)
 8001f50:	4293      	cmp	r3, r2
 8001f52:	d018      	beq.n	8001f86 <HAL_DMA_Abort+0x58a>
 8001f54:	687b      	ldr	r3, [r7, #4]
 8001f56:	681b      	ldr	r3, [r3, #0]
 8001f58:	4a32      	ldr	r2, [pc, #200]	; (8002024 <HAL_DMA_Abort+0x628>)
 8001f5a:	4293      	cmp	r3, r2
 8001f5c:	d013      	beq.n	8001f86 <HAL_DMA_Abort+0x58a>
 8001f5e:	687b      	ldr	r3, [r7, #4]
 8001f60:	681b      	ldr	r3, [r3, #0]
 8001f62:	4a31      	ldr	r2, [pc, #196]	; (8002028 <HAL_DMA_Abort+0x62c>)
 8001f64:	4293      	cmp	r3, r2
 8001f66:	d00e      	beq.n	8001f86 <HAL_DMA_Abort+0x58a>
 8001f68:	687b      	ldr	r3, [r7, #4]
 8001f6a:	681b      	ldr	r3, [r3, #0]
 8001f6c:	4a2f      	ldr	r2, [pc, #188]	; (800202c <HAL_DMA_Abort+0x630>)
 8001f6e:	4293      	cmp	r3, r2
 8001f70:	d009      	beq.n	8001f86 <HAL_DMA_Abort+0x58a>
 8001f72:	687b      	ldr	r3, [r7, #4]
 8001f74:	681b      	ldr	r3, [r3, #0]
 8001f76:	4a2e      	ldr	r2, [pc, #184]	; (8002030 <HAL_DMA_Abort+0x634>)
 8001f78:	4293      	cmp	r3, r2
 8001f7a:	d004      	beq.n	8001f86 <HAL_DMA_Abort+0x58a>
 8001f7c:	687b      	ldr	r3, [r7, #4]
 8001f7e:	681b      	ldr	r3, [r3, #0]
 8001f80:	4a2c      	ldr	r2, [pc, #176]	; (8002034 <HAL_DMA_Abort+0x638>)
 8001f82:	4293      	cmp	r3, r2
 8001f84:	d101      	bne.n	8001f8a <HAL_DMA_Abort+0x58e>
 8001f86:	2301      	movs	r3, #1
 8001f88:	e000      	b.n	8001f8c <HAL_DMA_Abort+0x590>
 8001f8a:	2300      	movs	r3, #0
 8001f8c:	2b00      	cmp	r3, #0
 8001f8e:	d015      	beq.n	8001fbc <HAL_DMA_Abort+0x5c0>
    {
      /* Clear the DMAMUX synchro overrun flag */
      hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8001f90:	687b      	ldr	r3, [r7, #4]
 8001f92:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8001f94:	687a      	ldr	r2, [r7, #4]
 8001f96:	6e92      	ldr	r2, [r2, #104]	; 0x68
 8001f98:	605a      	str	r2, [r3, #4]

      if(hdma->DMAmuxRequestGen != 0U)
 8001f9a:	687b      	ldr	r3, [r7, #4]
 8001f9c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8001f9e:	2b00      	cmp	r3, #0
 8001fa0:	d00c      	beq.n	8001fbc <HAL_DMA_Abort+0x5c0>
      {
        /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT */
        /* disable the request gen overrun IT */
        hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8001fa2:	687b      	ldr	r3, [r7, #4]
 8001fa4:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8001fa6:	681a      	ldr	r2, [r3, #0]
 8001fa8:	687b      	ldr	r3, [r7, #4]
 8001faa:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8001fac:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8001fb0:	601a      	str	r2, [r3, #0]

        /* Clear the DMAMUX request generator overrun flag */
        hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8001fb2:	687b      	ldr	r3, [r7, #4]
 8001fb4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001fb6:	687a      	ldr	r2, [r7, #4]
 8001fb8:	6f52      	ldr	r2, [r2, #116]	; 0x74
 8001fba:	605a      	str	r2, [r3, #4]
      }
    }

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001fbc:	687b      	ldr	r3, [r7, #4]
 8001fbe:	2200      	movs	r2, #0
 8001fc0:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8001fc4:	687b      	ldr	r3, [r7, #4]
 8001fc6:	2201      	movs	r2, #1
 8001fc8:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
  }

  return HAL_OK;
 8001fcc:	2300      	movs	r3, #0
}
 8001fce:	4618      	mov	r0, r3
 8001fd0:	3718      	adds	r7, #24
 8001fd2:	46bd      	mov	sp, r7
 8001fd4:	bd80      	pop	{r7, pc}
 8001fd6:	bf00      	nop
 8001fd8:	40020010 	.word	0x40020010
 8001fdc:	40020028 	.word	0x40020028
 8001fe0:	40020040 	.word	0x40020040
 8001fe4:	40020058 	.word	0x40020058
 8001fe8:	40020070 	.word	0x40020070
 8001fec:	40020088 	.word	0x40020088
 8001ff0:	400200a0 	.word	0x400200a0
 8001ff4:	400200b8 	.word	0x400200b8
 8001ff8:	40020410 	.word	0x40020410
 8001ffc:	40020428 	.word	0x40020428
 8002000:	40020440 	.word	0x40020440
 8002004:	40020458 	.word	0x40020458
 8002008:	40020470 	.word	0x40020470
 800200c:	40020488 	.word	0x40020488
 8002010:	400204a0 	.word	0x400204a0
 8002014:	400204b8 	.word	0x400204b8
 8002018:	58025408 	.word	0x58025408
 800201c:	5802541c 	.word	0x5802541c
 8002020:	58025430 	.word	0x58025430
 8002024:	58025444 	.word	0x58025444
 8002028:	58025458 	.word	0x58025458
 800202c:	5802546c 	.word	0x5802546c
 8002030:	58025480 	.word	0x58025480
 8002034:	58025494 	.word	0x58025494

08002038 <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8002038:	b580      	push	{r7, lr}
 800203a:	b084      	sub	sp, #16
 800203c:	af00      	add	r7, sp, #0
 800203e:	6078      	str	r0, [r7, #4]
  BDMA_Base_Registers *regs_bdma;

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 8002040:	687b      	ldr	r3, [r7, #4]
 8002042:	2b00      	cmp	r3, #0
 8002044:	d101      	bne.n	800204a <HAL_DMA_Abort_IT+0x12>
  {
    return HAL_ERROR;
 8002046:	2301      	movs	r3, #1
 8002048:	e205      	b.n	8002456 <HAL_DMA_Abort_IT+0x41e>
  }

  if(hdma->State != HAL_DMA_STATE_BUSY)
 800204a:	687b      	ldr	r3, [r7, #4]
 800204c:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8002050:	b2db      	uxtb	r3, r3
 8002052:	2b02      	cmp	r3, #2
 8002054:	d004      	beq.n	8002060 <HAL_DMA_Abort_IT+0x28>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002056:	687b      	ldr	r3, [r7, #4]
 8002058:	2280      	movs	r2, #128	; 0x80
 800205a:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 800205c:	2301      	movs	r3, #1
 800205e:	e1fa      	b.n	8002456 <HAL_DMA_Abort_IT+0x41e>
  }
  else
  {
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8002060:	687b      	ldr	r3, [r7, #4]
 8002062:	681b      	ldr	r3, [r3, #0]
 8002064:	4a8c      	ldr	r2, [pc, #560]	; (8002298 <HAL_DMA_Abort_IT+0x260>)
 8002066:	4293      	cmp	r3, r2
 8002068:	d04a      	beq.n	8002100 <HAL_DMA_Abort_IT+0xc8>
 800206a:	687b      	ldr	r3, [r7, #4]
 800206c:	681b      	ldr	r3, [r3, #0]
 800206e:	4a8b      	ldr	r2, [pc, #556]	; (800229c <HAL_DMA_Abort_IT+0x264>)
 8002070:	4293      	cmp	r3, r2
 8002072:	d045      	beq.n	8002100 <HAL_DMA_Abort_IT+0xc8>
 8002074:	687b      	ldr	r3, [r7, #4]
 8002076:	681b      	ldr	r3, [r3, #0]
 8002078:	4a89      	ldr	r2, [pc, #548]	; (80022a0 <HAL_DMA_Abort_IT+0x268>)
 800207a:	4293      	cmp	r3, r2
 800207c:	d040      	beq.n	8002100 <HAL_DMA_Abort_IT+0xc8>
 800207e:	687b      	ldr	r3, [r7, #4]
 8002080:	681b      	ldr	r3, [r3, #0]
 8002082:	4a88      	ldr	r2, [pc, #544]	; (80022a4 <HAL_DMA_Abort_IT+0x26c>)
 8002084:	4293      	cmp	r3, r2
 8002086:	d03b      	beq.n	8002100 <HAL_DMA_Abort_IT+0xc8>
 8002088:	687b      	ldr	r3, [r7, #4]
 800208a:	681b      	ldr	r3, [r3, #0]
 800208c:	4a86      	ldr	r2, [pc, #536]	; (80022a8 <HAL_DMA_Abort_IT+0x270>)
 800208e:	4293      	cmp	r3, r2
 8002090:	d036      	beq.n	8002100 <HAL_DMA_Abort_IT+0xc8>
 8002092:	687b      	ldr	r3, [r7, #4]
 8002094:	681b      	ldr	r3, [r3, #0]
 8002096:	4a85      	ldr	r2, [pc, #532]	; (80022ac <HAL_DMA_Abort_IT+0x274>)
 8002098:	4293      	cmp	r3, r2
 800209a:	d031      	beq.n	8002100 <HAL_DMA_Abort_IT+0xc8>
 800209c:	687b      	ldr	r3, [r7, #4]
 800209e:	681b      	ldr	r3, [r3, #0]
 80020a0:	4a83      	ldr	r2, [pc, #524]	; (80022b0 <HAL_DMA_Abort_IT+0x278>)
 80020a2:	4293      	cmp	r3, r2
 80020a4:	d02c      	beq.n	8002100 <HAL_DMA_Abort_IT+0xc8>
 80020a6:	687b      	ldr	r3, [r7, #4]
 80020a8:	681b      	ldr	r3, [r3, #0]
 80020aa:	4a82      	ldr	r2, [pc, #520]	; (80022b4 <HAL_DMA_Abort_IT+0x27c>)
 80020ac:	4293      	cmp	r3, r2
 80020ae:	d027      	beq.n	8002100 <HAL_DMA_Abort_IT+0xc8>
 80020b0:	687b      	ldr	r3, [r7, #4]
 80020b2:	681b      	ldr	r3, [r3, #0]
 80020b4:	4a80      	ldr	r2, [pc, #512]	; (80022b8 <HAL_DMA_Abort_IT+0x280>)
 80020b6:	4293      	cmp	r3, r2
 80020b8:	d022      	beq.n	8002100 <HAL_DMA_Abort_IT+0xc8>
 80020ba:	687b      	ldr	r3, [r7, #4]
 80020bc:	681b      	ldr	r3, [r3, #0]
 80020be:	4a7f      	ldr	r2, [pc, #508]	; (80022bc <HAL_DMA_Abort_IT+0x284>)
 80020c0:	4293      	cmp	r3, r2
 80020c2:	d01d      	beq.n	8002100 <HAL_DMA_Abort_IT+0xc8>
 80020c4:	687b      	ldr	r3, [r7, #4]
 80020c6:	681b      	ldr	r3, [r3, #0]
 80020c8:	4a7d      	ldr	r2, [pc, #500]	; (80022c0 <HAL_DMA_Abort_IT+0x288>)
 80020ca:	4293      	cmp	r3, r2
 80020cc:	d018      	beq.n	8002100 <HAL_DMA_Abort_IT+0xc8>
 80020ce:	687b      	ldr	r3, [r7, #4]
 80020d0:	681b      	ldr	r3, [r3, #0]
 80020d2:	4a7c      	ldr	r2, [pc, #496]	; (80022c4 <HAL_DMA_Abort_IT+0x28c>)
 80020d4:	4293      	cmp	r3, r2
 80020d6:	d013      	beq.n	8002100 <HAL_DMA_Abort_IT+0xc8>
 80020d8:	687b      	ldr	r3, [r7, #4]
 80020da:	681b      	ldr	r3, [r3, #0]
 80020dc:	4a7a      	ldr	r2, [pc, #488]	; (80022c8 <HAL_DMA_Abort_IT+0x290>)
 80020de:	4293      	cmp	r3, r2
 80020e0:	d00e      	beq.n	8002100 <HAL_DMA_Abort_IT+0xc8>
 80020e2:	687b      	ldr	r3, [r7, #4]
 80020e4:	681b      	ldr	r3, [r3, #0]
 80020e6:	4a79      	ldr	r2, [pc, #484]	; (80022cc <HAL_DMA_Abort_IT+0x294>)
 80020e8:	4293      	cmp	r3, r2
 80020ea:	d009      	beq.n	8002100 <HAL_DMA_Abort_IT+0xc8>
 80020ec:	687b      	ldr	r3, [r7, #4]
 80020ee:	681b      	ldr	r3, [r3, #0]
 80020f0:	4a77      	ldr	r2, [pc, #476]	; (80022d0 <HAL_DMA_Abort_IT+0x298>)
 80020f2:	4293      	cmp	r3, r2
 80020f4:	d004      	beq.n	8002100 <HAL_DMA_Abort_IT+0xc8>
 80020f6:	687b      	ldr	r3, [r7, #4]
 80020f8:	681b      	ldr	r3, [r3, #0]
 80020fa:	4a76      	ldr	r2, [pc, #472]	; (80022d4 <HAL_DMA_Abort_IT+0x29c>)
 80020fc:	4293      	cmp	r3, r2
 80020fe:	d101      	bne.n	8002104 <HAL_DMA_Abort_IT+0xcc>
 8002100:	2301      	movs	r3, #1
 8002102:	e000      	b.n	8002106 <HAL_DMA_Abort_IT+0xce>
 8002104:	2300      	movs	r3, #0
 8002106:	2b00      	cmp	r3, #0
 8002108:	d065      	beq.n	80021d6 <HAL_DMA_Abort_IT+0x19e>
    {
      /* Set Abort State  */
      hdma->State = HAL_DMA_STATE_ABORT;
 800210a:	687b      	ldr	r3, [r7, #4]
 800210c:	2204      	movs	r2, #4
 800210e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8002112:	687b      	ldr	r3, [r7, #4]
 8002114:	681b      	ldr	r3, [r3, #0]
 8002116:	4a60      	ldr	r2, [pc, #384]	; (8002298 <HAL_DMA_Abort_IT+0x260>)
 8002118:	4293      	cmp	r3, r2
 800211a:	d04a      	beq.n	80021b2 <HAL_DMA_Abort_IT+0x17a>
 800211c:	687b      	ldr	r3, [r7, #4]
 800211e:	681b      	ldr	r3, [r3, #0]
 8002120:	4a5e      	ldr	r2, [pc, #376]	; (800229c <HAL_DMA_Abort_IT+0x264>)
 8002122:	4293      	cmp	r3, r2
 8002124:	d045      	beq.n	80021b2 <HAL_DMA_Abort_IT+0x17a>
 8002126:	687b      	ldr	r3, [r7, #4]
 8002128:	681b      	ldr	r3, [r3, #0]
 800212a:	4a5d      	ldr	r2, [pc, #372]	; (80022a0 <HAL_DMA_Abort_IT+0x268>)
 800212c:	4293      	cmp	r3, r2
 800212e:	d040      	beq.n	80021b2 <HAL_DMA_Abort_IT+0x17a>
 8002130:	687b      	ldr	r3, [r7, #4]
 8002132:	681b      	ldr	r3, [r3, #0]
 8002134:	4a5b      	ldr	r2, [pc, #364]	; (80022a4 <HAL_DMA_Abort_IT+0x26c>)
 8002136:	4293      	cmp	r3, r2
 8002138:	d03b      	beq.n	80021b2 <HAL_DMA_Abort_IT+0x17a>
 800213a:	687b      	ldr	r3, [r7, #4]
 800213c:	681b      	ldr	r3, [r3, #0]
 800213e:	4a5a      	ldr	r2, [pc, #360]	; (80022a8 <HAL_DMA_Abort_IT+0x270>)
 8002140:	4293      	cmp	r3, r2
 8002142:	d036      	beq.n	80021b2 <HAL_DMA_Abort_IT+0x17a>
 8002144:	687b      	ldr	r3, [r7, #4]
 8002146:	681b      	ldr	r3, [r3, #0]
 8002148:	4a58      	ldr	r2, [pc, #352]	; (80022ac <HAL_DMA_Abort_IT+0x274>)
 800214a:	4293      	cmp	r3, r2
 800214c:	d031      	beq.n	80021b2 <HAL_DMA_Abort_IT+0x17a>
 800214e:	687b      	ldr	r3, [r7, #4]
 8002150:	681b      	ldr	r3, [r3, #0]
 8002152:	4a57      	ldr	r2, [pc, #348]	; (80022b0 <HAL_DMA_Abort_IT+0x278>)
 8002154:	4293      	cmp	r3, r2
 8002156:	d02c      	beq.n	80021b2 <HAL_DMA_Abort_IT+0x17a>
 8002158:	687b      	ldr	r3, [r7, #4]
 800215a:	681b      	ldr	r3, [r3, #0]
 800215c:	4a55      	ldr	r2, [pc, #340]	; (80022b4 <HAL_DMA_Abort_IT+0x27c>)
 800215e:	4293      	cmp	r3, r2
 8002160:	d027      	beq.n	80021b2 <HAL_DMA_Abort_IT+0x17a>
 8002162:	687b      	ldr	r3, [r7, #4]
 8002164:	681b      	ldr	r3, [r3, #0]
 8002166:	4a54      	ldr	r2, [pc, #336]	; (80022b8 <HAL_DMA_Abort_IT+0x280>)
 8002168:	4293      	cmp	r3, r2
 800216a:	d022      	beq.n	80021b2 <HAL_DMA_Abort_IT+0x17a>
 800216c:	687b      	ldr	r3, [r7, #4]
 800216e:	681b      	ldr	r3, [r3, #0]
 8002170:	4a52      	ldr	r2, [pc, #328]	; (80022bc <HAL_DMA_Abort_IT+0x284>)
 8002172:	4293      	cmp	r3, r2
 8002174:	d01d      	beq.n	80021b2 <HAL_DMA_Abort_IT+0x17a>
 8002176:	687b      	ldr	r3, [r7, #4]
 8002178:	681b      	ldr	r3, [r3, #0]
 800217a:	4a51      	ldr	r2, [pc, #324]	; (80022c0 <HAL_DMA_Abort_IT+0x288>)
 800217c:	4293      	cmp	r3, r2
 800217e:	d018      	beq.n	80021b2 <HAL_DMA_Abort_IT+0x17a>
 8002180:	687b      	ldr	r3, [r7, #4]
 8002182:	681b      	ldr	r3, [r3, #0]
 8002184:	4a4f      	ldr	r2, [pc, #316]	; (80022c4 <HAL_DMA_Abort_IT+0x28c>)
 8002186:	4293      	cmp	r3, r2
 8002188:	d013      	beq.n	80021b2 <HAL_DMA_Abort_IT+0x17a>
 800218a:	687b      	ldr	r3, [r7, #4]
 800218c:	681b      	ldr	r3, [r3, #0]
 800218e:	4a4e      	ldr	r2, [pc, #312]	; (80022c8 <HAL_DMA_Abort_IT+0x290>)
 8002190:	4293      	cmp	r3, r2
 8002192:	d00e      	beq.n	80021b2 <HAL_DMA_Abort_IT+0x17a>
 8002194:	687b      	ldr	r3, [r7, #4]
 8002196:	681b      	ldr	r3, [r3, #0]
 8002198:	4a4c      	ldr	r2, [pc, #304]	; (80022cc <HAL_DMA_Abort_IT+0x294>)
 800219a:	4293      	cmp	r3, r2
 800219c:	d009      	beq.n	80021b2 <HAL_DMA_Abort_IT+0x17a>
 800219e:	687b      	ldr	r3, [r7, #4]
 80021a0:	681b      	ldr	r3, [r3, #0]
 80021a2:	4a4b      	ldr	r2, [pc, #300]	; (80022d0 <HAL_DMA_Abort_IT+0x298>)
 80021a4:	4293      	cmp	r3, r2
 80021a6:	d004      	beq.n	80021b2 <HAL_DMA_Abort_IT+0x17a>
 80021a8:	687b      	ldr	r3, [r7, #4]
 80021aa:	681b      	ldr	r3, [r3, #0]
 80021ac:	4a49      	ldr	r2, [pc, #292]	; (80022d4 <HAL_DMA_Abort_IT+0x29c>)
 80021ae:	4293      	cmp	r3, r2
 80021b0:	d108      	bne.n	80021c4 <HAL_DMA_Abort_IT+0x18c>
 80021b2:	687b      	ldr	r3, [r7, #4]
 80021b4:	681b      	ldr	r3, [r3, #0]
 80021b6:	681a      	ldr	r2, [r3, #0]
 80021b8:	687b      	ldr	r3, [r7, #4]
 80021ba:	681b      	ldr	r3, [r3, #0]
 80021bc:	f022 0201 	bic.w	r2, r2, #1
 80021c0:	601a      	str	r2, [r3, #0]
 80021c2:	e147      	b.n	8002454 <HAL_DMA_Abort_IT+0x41c>
 80021c4:	687b      	ldr	r3, [r7, #4]
 80021c6:	681b      	ldr	r3, [r3, #0]
 80021c8:	681a      	ldr	r2, [r3, #0]
 80021ca:	687b      	ldr	r3, [r7, #4]
 80021cc:	681b      	ldr	r3, [r3, #0]
 80021ce:	f022 0201 	bic.w	r2, r2, #1
 80021d2:	601a      	str	r2, [r3, #0]
 80021d4:	e13e      	b.n	8002454 <HAL_DMA_Abort_IT+0x41c>
    }
    else /* BDMA channel */
    {
      /* Disable DMA All Interrupts  */
      ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  &= ~(BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE);
 80021d6:	687b      	ldr	r3, [r7, #4]
 80021d8:	681b      	ldr	r3, [r3, #0]
 80021da:	681a      	ldr	r2, [r3, #0]
 80021dc:	687b      	ldr	r3, [r7, #4]
 80021de:	681b      	ldr	r3, [r3, #0]
 80021e0:	f022 020e 	bic.w	r2, r2, #14
 80021e4:	601a      	str	r2, [r3, #0]

      /* Disable the channel */
      __HAL_DMA_DISABLE(hdma);
 80021e6:	687b      	ldr	r3, [r7, #4]
 80021e8:	681b      	ldr	r3, [r3, #0]
 80021ea:	4a2b      	ldr	r2, [pc, #172]	; (8002298 <HAL_DMA_Abort_IT+0x260>)
 80021ec:	4293      	cmp	r3, r2
 80021ee:	d04a      	beq.n	8002286 <HAL_DMA_Abort_IT+0x24e>
 80021f0:	687b      	ldr	r3, [r7, #4]
 80021f2:	681b      	ldr	r3, [r3, #0]
 80021f4:	4a29      	ldr	r2, [pc, #164]	; (800229c <HAL_DMA_Abort_IT+0x264>)
 80021f6:	4293      	cmp	r3, r2
 80021f8:	d045      	beq.n	8002286 <HAL_DMA_Abort_IT+0x24e>
 80021fa:	687b      	ldr	r3, [r7, #4]
 80021fc:	681b      	ldr	r3, [r3, #0]
 80021fe:	4a28      	ldr	r2, [pc, #160]	; (80022a0 <HAL_DMA_Abort_IT+0x268>)
 8002200:	4293      	cmp	r3, r2
 8002202:	d040      	beq.n	8002286 <HAL_DMA_Abort_IT+0x24e>
 8002204:	687b      	ldr	r3, [r7, #4]
 8002206:	681b      	ldr	r3, [r3, #0]
 8002208:	4a26      	ldr	r2, [pc, #152]	; (80022a4 <HAL_DMA_Abort_IT+0x26c>)
 800220a:	4293      	cmp	r3, r2
 800220c:	d03b      	beq.n	8002286 <HAL_DMA_Abort_IT+0x24e>
 800220e:	687b      	ldr	r3, [r7, #4]
 8002210:	681b      	ldr	r3, [r3, #0]
 8002212:	4a25      	ldr	r2, [pc, #148]	; (80022a8 <HAL_DMA_Abort_IT+0x270>)
 8002214:	4293      	cmp	r3, r2
 8002216:	d036      	beq.n	8002286 <HAL_DMA_Abort_IT+0x24e>
 8002218:	687b      	ldr	r3, [r7, #4]
 800221a:	681b      	ldr	r3, [r3, #0]
 800221c:	4a23      	ldr	r2, [pc, #140]	; (80022ac <HAL_DMA_Abort_IT+0x274>)
 800221e:	4293      	cmp	r3, r2
 8002220:	d031      	beq.n	8002286 <HAL_DMA_Abort_IT+0x24e>
 8002222:	687b      	ldr	r3, [r7, #4]
 8002224:	681b      	ldr	r3, [r3, #0]
 8002226:	4a22      	ldr	r2, [pc, #136]	; (80022b0 <HAL_DMA_Abort_IT+0x278>)
 8002228:	4293      	cmp	r3, r2
 800222a:	d02c      	beq.n	8002286 <HAL_DMA_Abort_IT+0x24e>
 800222c:	687b      	ldr	r3, [r7, #4]
 800222e:	681b      	ldr	r3, [r3, #0]
 8002230:	4a20      	ldr	r2, [pc, #128]	; (80022b4 <HAL_DMA_Abort_IT+0x27c>)
 8002232:	4293      	cmp	r3, r2
 8002234:	d027      	beq.n	8002286 <HAL_DMA_Abort_IT+0x24e>
 8002236:	687b      	ldr	r3, [r7, #4]
 8002238:	681b      	ldr	r3, [r3, #0]
 800223a:	4a1f      	ldr	r2, [pc, #124]	; (80022b8 <HAL_DMA_Abort_IT+0x280>)
 800223c:	4293      	cmp	r3, r2
 800223e:	d022      	beq.n	8002286 <HAL_DMA_Abort_IT+0x24e>
 8002240:	687b      	ldr	r3, [r7, #4]
 8002242:	681b      	ldr	r3, [r3, #0]
 8002244:	4a1d      	ldr	r2, [pc, #116]	; (80022bc <HAL_DMA_Abort_IT+0x284>)
 8002246:	4293      	cmp	r3, r2
 8002248:	d01d      	beq.n	8002286 <HAL_DMA_Abort_IT+0x24e>
 800224a:	687b      	ldr	r3, [r7, #4]
 800224c:	681b      	ldr	r3, [r3, #0]
 800224e:	4a1c      	ldr	r2, [pc, #112]	; (80022c0 <HAL_DMA_Abort_IT+0x288>)
 8002250:	4293      	cmp	r3, r2
 8002252:	d018      	beq.n	8002286 <HAL_DMA_Abort_IT+0x24e>
 8002254:	687b      	ldr	r3, [r7, #4]
 8002256:	681b      	ldr	r3, [r3, #0]
 8002258:	4a1a      	ldr	r2, [pc, #104]	; (80022c4 <HAL_DMA_Abort_IT+0x28c>)
 800225a:	4293      	cmp	r3, r2
 800225c:	d013      	beq.n	8002286 <HAL_DMA_Abort_IT+0x24e>
 800225e:	687b      	ldr	r3, [r7, #4]
 8002260:	681b      	ldr	r3, [r3, #0]
 8002262:	4a19      	ldr	r2, [pc, #100]	; (80022c8 <HAL_DMA_Abort_IT+0x290>)
 8002264:	4293      	cmp	r3, r2
 8002266:	d00e      	beq.n	8002286 <HAL_DMA_Abort_IT+0x24e>
 8002268:	687b      	ldr	r3, [r7, #4]
 800226a:	681b      	ldr	r3, [r3, #0]
 800226c:	4a17      	ldr	r2, [pc, #92]	; (80022cc <HAL_DMA_Abort_IT+0x294>)
 800226e:	4293      	cmp	r3, r2
 8002270:	d009      	beq.n	8002286 <HAL_DMA_Abort_IT+0x24e>
 8002272:	687b      	ldr	r3, [r7, #4]
 8002274:	681b      	ldr	r3, [r3, #0]
 8002276:	4a16      	ldr	r2, [pc, #88]	; (80022d0 <HAL_DMA_Abort_IT+0x298>)
 8002278:	4293      	cmp	r3, r2
 800227a:	d004      	beq.n	8002286 <HAL_DMA_Abort_IT+0x24e>
 800227c:	687b      	ldr	r3, [r7, #4]
 800227e:	681b      	ldr	r3, [r3, #0]
 8002280:	4a14      	ldr	r2, [pc, #80]	; (80022d4 <HAL_DMA_Abort_IT+0x29c>)
 8002282:	4293      	cmp	r3, r2
 8002284:	d128      	bne.n	80022d8 <HAL_DMA_Abort_IT+0x2a0>
 8002286:	687b      	ldr	r3, [r7, #4]
 8002288:	681b      	ldr	r3, [r3, #0]
 800228a:	681a      	ldr	r2, [r3, #0]
 800228c:	687b      	ldr	r3, [r7, #4]
 800228e:	681b      	ldr	r3, [r3, #0]
 8002290:	f022 0201 	bic.w	r2, r2, #1
 8002294:	601a      	str	r2, [r3, #0]
 8002296:	e027      	b.n	80022e8 <HAL_DMA_Abort_IT+0x2b0>
 8002298:	40020010 	.word	0x40020010
 800229c:	40020028 	.word	0x40020028
 80022a0:	40020040 	.word	0x40020040
 80022a4:	40020058 	.word	0x40020058
 80022a8:	40020070 	.word	0x40020070
 80022ac:	40020088 	.word	0x40020088
 80022b0:	400200a0 	.word	0x400200a0
 80022b4:	400200b8 	.word	0x400200b8
 80022b8:	40020410 	.word	0x40020410
 80022bc:	40020428 	.word	0x40020428
 80022c0:	40020440 	.word	0x40020440
 80022c4:	40020458 	.word	0x40020458
 80022c8:	40020470 	.word	0x40020470
 80022cc:	40020488 	.word	0x40020488
 80022d0:	400204a0 	.word	0x400204a0
 80022d4:	400204b8 	.word	0x400204b8
 80022d8:	687b      	ldr	r3, [r7, #4]
 80022da:	681b      	ldr	r3, [r3, #0]
 80022dc:	681a      	ldr	r2, [r3, #0]
 80022de:	687b      	ldr	r3, [r7, #4]
 80022e0:	681b      	ldr	r3, [r3, #0]
 80022e2:	f022 0201 	bic.w	r2, r2, #1
 80022e6:	601a      	str	r2, [r3, #0]

      if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 80022e8:	687b      	ldr	r3, [r7, #4]
 80022ea:	681b      	ldr	r3, [r3, #0]
 80022ec:	4a5c      	ldr	r2, [pc, #368]	; (8002460 <HAL_DMA_Abort_IT+0x428>)
 80022ee:	4293      	cmp	r3, r2
 80022f0:	d072      	beq.n	80023d8 <HAL_DMA_Abort_IT+0x3a0>
 80022f2:	687b      	ldr	r3, [r7, #4]
 80022f4:	681b      	ldr	r3, [r3, #0]
 80022f6:	4a5b      	ldr	r2, [pc, #364]	; (8002464 <HAL_DMA_Abort_IT+0x42c>)
 80022f8:	4293      	cmp	r3, r2
 80022fa:	d06d      	beq.n	80023d8 <HAL_DMA_Abort_IT+0x3a0>
 80022fc:	687b      	ldr	r3, [r7, #4]
 80022fe:	681b      	ldr	r3, [r3, #0]
 8002300:	4a59      	ldr	r2, [pc, #356]	; (8002468 <HAL_DMA_Abort_IT+0x430>)
 8002302:	4293      	cmp	r3, r2
 8002304:	d068      	beq.n	80023d8 <HAL_DMA_Abort_IT+0x3a0>
 8002306:	687b      	ldr	r3, [r7, #4]
 8002308:	681b      	ldr	r3, [r3, #0]
 800230a:	4a58      	ldr	r2, [pc, #352]	; (800246c <HAL_DMA_Abort_IT+0x434>)
 800230c:	4293      	cmp	r3, r2
 800230e:	d063      	beq.n	80023d8 <HAL_DMA_Abort_IT+0x3a0>
 8002310:	687b      	ldr	r3, [r7, #4]
 8002312:	681b      	ldr	r3, [r3, #0]
 8002314:	4a56      	ldr	r2, [pc, #344]	; (8002470 <HAL_DMA_Abort_IT+0x438>)
 8002316:	4293      	cmp	r3, r2
 8002318:	d05e      	beq.n	80023d8 <HAL_DMA_Abort_IT+0x3a0>
 800231a:	687b      	ldr	r3, [r7, #4]
 800231c:	681b      	ldr	r3, [r3, #0]
 800231e:	4a55      	ldr	r2, [pc, #340]	; (8002474 <HAL_DMA_Abort_IT+0x43c>)
 8002320:	4293      	cmp	r3, r2
 8002322:	d059      	beq.n	80023d8 <HAL_DMA_Abort_IT+0x3a0>
 8002324:	687b      	ldr	r3, [r7, #4]
 8002326:	681b      	ldr	r3, [r3, #0]
 8002328:	4a53      	ldr	r2, [pc, #332]	; (8002478 <HAL_DMA_Abort_IT+0x440>)
 800232a:	4293      	cmp	r3, r2
 800232c:	d054      	beq.n	80023d8 <HAL_DMA_Abort_IT+0x3a0>
 800232e:	687b      	ldr	r3, [r7, #4]
 8002330:	681b      	ldr	r3, [r3, #0]
 8002332:	4a52      	ldr	r2, [pc, #328]	; (800247c <HAL_DMA_Abort_IT+0x444>)
 8002334:	4293      	cmp	r3, r2
 8002336:	d04f      	beq.n	80023d8 <HAL_DMA_Abort_IT+0x3a0>
 8002338:	687b      	ldr	r3, [r7, #4]
 800233a:	681b      	ldr	r3, [r3, #0]
 800233c:	4a50      	ldr	r2, [pc, #320]	; (8002480 <HAL_DMA_Abort_IT+0x448>)
 800233e:	4293      	cmp	r3, r2
 8002340:	d04a      	beq.n	80023d8 <HAL_DMA_Abort_IT+0x3a0>
 8002342:	687b      	ldr	r3, [r7, #4]
 8002344:	681b      	ldr	r3, [r3, #0]
 8002346:	4a4f      	ldr	r2, [pc, #316]	; (8002484 <HAL_DMA_Abort_IT+0x44c>)
 8002348:	4293      	cmp	r3, r2
 800234a:	d045      	beq.n	80023d8 <HAL_DMA_Abort_IT+0x3a0>
 800234c:	687b      	ldr	r3, [r7, #4]
 800234e:	681b      	ldr	r3, [r3, #0]
 8002350:	4a4d      	ldr	r2, [pc, #308]	; (8002488 <HAL_DMA_Abort_IT+0x450>)
 8002352:	4293      	cmp	r3, r2
 8002354:	d040      	beq.n	80023d8 <HAL_DMA_Abort_IT+0x3a0>
 8002356:	687b      	ldr	r3, [r7, #4]
 8002358:	681b      	ldr	r3, [r3, #0]
 800235a:	4a4c      	ldr	r2, [pc, #304]	; (800248c <HAL_DMA_Abort_IT+0x454>)
 800235c:	4293      	cmp	r3, r2
 800235e:	d03b      	beq.n	80023d8 <HAL_DMA_Abort_IT+0x3a0>
 8002360:	687b      	ldr	r3, [r7, #4]
 8002362:	681b      	ldr	r3, [r3, #0]
 8002364:	4a4a      	ldr	r2, [pc, #296]	; (8002490 <HAL_DMA_Abort_IT+0x458>)
 8002366:	4293      	cmp	r3, r2
 8002368:	d036      	beq.n	80023d8 <HAL_DMA_Abort_IT+0x3a0>
 800236a:	687b      	ldr	r3, [r7, #4]
 800236c:	681b      	ldr	r3, [r3, #0]
 800236e:	4a49      	ldr	r2, [pc, #292]	; (8002494 <HAL_DMA_Abort_IT+0x45c>)
 8002370:	4293      	cmp	r3, r2
 8002372:	d031      	beq.n	80023d8 <HAL_DMA_Abort_IT+0x3a0>
 8002374:	687b      	ldr	r3, [r7, #4]
 8002376:	681b      	ldr	r3, [r3, #0]
 8002378:	4a47      	ldr	r2, [pc, #284]	; (8002498 <HAL_DMA_Abort_IT+0x460>)
 800237a:	4293      	cmp	r3, r2
 800237c:	d02c      	beq.n	80023d8 <HAL_DMA_Abort_IT+0x3a0>
 800237e:	687b      	ldr	r3, [r7, #4]
 8002380:	681b      	ldr	r3, [r3, #0]
 8002382:	4a46      	ldr	r2, [pc, #280]	; (800249c <HAL_DMA_Abort_IT+0x464>)
 8002384:	4293      	cmp	r3, r2
 8002386:	d027      	beq.n	80023d8 <HAL_DMA_Abort_IT+0x3a0>
 8002388:	687b      	ldr	r3, [r7, #4]
 800238a:	681b      	ldr	r3, [r3, #0]
 800238c:	4a44      	ldr	r2, [pc, #272]	; (80024a0 <HAL_DMA_Abort_IT+0x468>)
 800238e:	4293      	cmp	r3, r2
 8002390:	d022      	beq.n	80023d8 <HAL_DMA_Abort_IT+0x3a0>
 8002392:	687b      	ldr	r3, [r7, #4]
 8002394:	681b      	ldr	r3, [r3, #0]
 8002396:	4a43      	ldr	r2, [pc, #268]	; (80024a4 <HAL_DMA_Abort_IT+0x46c>)
 8002398:	4293      	cmp	r3, r2
 800239a:	d01d      	beq.n	80023d8 <HAL_DMA_Abort_IT+0x3a0>
 800239c:	687b      	ldr	r3, [r7, #4]
 800239e:	681b      	ldr	r3, [r3, #0]
 80023a0:	4a41      	ldr	r2, [pc, #260]	; (80024a8 <HAL_DMA_Abort_IT+0x470>)
 80023a2:	4293      	cmp	r3, r2
 80023a4:	d018      	beq.n	80023d8 <HAL_DMA_Abort_IT+0x3a0>
 80023a6:	687b      	ldr	r3, [r7, #4]
 80023a8:	681b      	ldr	r3, [r3, #0]
 80023aa:	4a40      	ldr	r2, [pc, #256]	; (80024ac <HAL_DMA_Abort_IT+0x474>)
 80023ac:	4293      	cmp	r3, r2
 80023ae:	d013      	beq.n	80023d8 <HAL_DMA_Abort_IT+0x3a0>
 80023b0:	687b      	ldr	r3, [r7, #4]
 80023b2:	681b      	ldr	r3, [r3, #0]
 80023b4:	4a3e      	ldr	r2, [pc, #248]	; (80024b0 <HAL_DMA_Abort_IT+0x478>)
 80023b6:	4293      	cmp	r3, r2
 80023b8:	d00e      	beq.n	80023d8 <HAL_DMA_Abort_IT+0x3a0>
 80023ba:	687b      	ldr	r3, [r7, #4]
 80023bc:	681b      	ldr	r3, [r3, #0]
 80023be:	4a3d      	ldr	r2, [pc, #244]	; (80024b4 <HAL_DMA_Abort_IT+0x47c>)
 80023c0:	4293      	cmp	r3, r2
 80023c2:	d009      	beq.n	80023d8 <HAL_DMA_Abort_IT+0x3a0>
 80023c4:	687b      	ldr	r3, [r7, #4]
 80023c6:	681b      	ldr	r3, [r3, #0]
 80023c8:	4a3b      	ldr	r2, [pc, #236]	; (80024b8 <HAL_DMA_Abort_IT+0x480>)
 80023ca:	4293      	cmp	r3, r2
 80023cc:	d004      	beq.n	80023d8 <HAL_DMA_Abort_IT+0x3a0>
 80023ce:	687b      	ldr	r3, [r7, #4]
 80023d0:	681b      	ldr	r3, [r3, #0]
 80023d2:	4a3a      	ldr	r2, [pc, #232]	; (80024bc <HAL_DMA_Abort_IT+0x484>)
 80023d4:	4293      	cmp	r3, r2
 80023d6:	d101      	bne.n	80023dc <HAL_DMA_Abort_IT+0x3a4>
 80023d8:	2301      	movs	r3, #1
 80023da:	e000      	b.n	80023de <HAL_DMA_Abort_IT+0x3a6>
 80023dc:	2300      	movs	r3, #0
 80023de:	2b00      	cmp	r3, #0
 80023e0:	d028      	beq.n	8002434 <HAL_DMA_Abort_IT+0x3fc>
      {
        /* disable the DMAMUX sync overrun IT */
        hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 80023e2:	687b      	ldr	r3, [r7, #4]
 80023e4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80023e6:	681a      	ldr	r2, [r3, #0]
 80023e8:	687b      	ldr	r3, [r7, #4]
 80023ea:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80023ec:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80023f0:	601a      	str	r2, [r3, #0]

        /* Clear all flags */
        regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 80023f2:	687b      	ldr	r3, [r7, #4]
 80023f4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80023f6:	60fb      	str	r3, [r7, #12]
        regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 80023f8:	687b      	ldr	r3, [r7, #4]
 80023fa:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80023fc:	f003 031f 	and.w	r3, r3, #31
 8002400:	2201      	movs	r2, #1
 8002402:	409a      	lsls	r2, r3
 8002404:	68fb      	ldr	r3, [r7, #12]
 8002406:	605a      	str	r2, [r3, #4]

        /* Clear the DMAMUX synchro overrun flag */
        hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8002408:	687b      	ldr	r3, [r7, #4]
 800240a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800240c:	687a      	ldr	r2, [r7, #4]
 800240e:	6e92      	ldr	r2, [r2, #104]	; 0x68
 8002410:	605a      	str	r2, [r3, #4]

        if(hdma->DMAmuxRequestGen != 0U)
 8002412:	687b      	ldr	r3, [r7, #4]
 8002414:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8002416:	2b00      	cmp	r3, #0
 8002418:	d00c      	beq.n	8002434 <HAL_DMA_Abort_IT+0x3fc>
        {
          /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
          /* disable the request gen overrun IT */
          hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 800241a:	687b      	ldr	r3, [r7, #4]
 800241c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800241e:	681a      	ldr	r2, [r3, #0]
 8002420:	687b      	ldr	r3, [r7, #4]
 8002422:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8002424:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8002428:	601a      	str	r2, [r3, #0]

          /* Clear the DMAMUX request generator overrun flag */
          hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 800242a:	687b      	ldr	r3, [r7, #4]
 800242c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800242e:	687a      	ldr	r2, [r7, #4]
 8002430:	6f52      	ldr	r2, [r2, #116]	; 0x74
 8002432:	605a      	str	r2, [r3, #4]
        }
      }

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8002434:	687b      	ldr	r3, [r7, #4]
 8002436:	2200      	movs	r2, #0
 8002438:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 800243c:	687b      	ldr	r3, [r7, #4]
 800243e:	2201      	movs	r2, #1
 8002440:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Call User Abort callback */
      if(hdma->XferAbortCallback != NULL)
 8002444:	687b      	ldr	r3, [r7, #4]
 8002446:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002448:	2b00      	cmp	r3, #0
 800244a:	d003      	beq.n	8002454 <HAL_DMA_Abort_IT+0x41c>
      {
        hdma->XferAbortCallback(hdma);
 800244c:	687b      	ldr	r3, [r7, #4]
 800244e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002450:	6878      	ldr	r0, [r7, #4]
 8002452:	4798      	blx	r3
      }
    }
  }

  return HAL_OK;
 8002454:	2300      	movs	r3, #0
}
 8002456:	4618      	mov	r0, r3
 8002458:	3710      	adds	r7, #16
 800245a:	46bd      	mov	sp, r7
 800245c:	bd80      	pop	{r7, pc}
 800245e:	bf00      	nop
 8002460:	40020010 	.word	0x40020010
 8002464:	40020028 	.word	0x40020028
 8002468:	40020040 	.word	0x40020040
 800246c:	40020058 	.word	0x40020058
 8002470:	40020070 	.word	0x40020070
 8002474:	40020088 	.word	0x40020088
 8002478:	400200a0 	.word	0x400200a0
 800247c:	400200b8 	.word	0x400200b8
 8002480:	40020410 	.word	0x40020410
 8002484:	40020428 	.word	0x40020428
 8002488:	40020440 	.word	0x40020440
 800248c:	40020458 	.word	0x40020458
 8002490:	40020470 	.word	0x40020470
 8002494:	40020488 	.word	0x40020488
 8002498:	400204a0 	.word	0x400204a0
 800249c:	400204b8 	.word	0x400204b8
 80024a0:	58025408 	.word	0x58025408
 80024a4:	5802541c 	.word	0x5802541c
 80024a8:	58025430 	.word	0x58025430
 80024ac:	58025444 	.word	0x58025444
 80024b0:	58025458 	.word	0x58025458
 80024b4:	5802546c 	.word	0x5802546c
 80024b8:	58025480 	.word	0x58025480
 80024bc:	58025494 	.word	0x58025494

080024c0 <HAL_DMA2D_Init>:
  * @param  hdma2d pointer to a DMA2D_HandleTypeDef structure that contains
  *                 the configuration information for the DMA2D.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA2D_Init(DMA2D_HandleTypeDef *hdma2d)
{
 80024c0:	b580      	push	{r7, lr}
 80024c2:	b082      	sub	sp, #8
 80024c4:	af00      	add	r7, sp, #0
 80024c6:	6078      	str	r0, [r7, #4]
  /* Check the DMA2D peripheral state */
  if (hdma2d == NULL)
 80024c8:	687b      	ldr	r3, [r7, #4]
 80024ca:	2b00      	cmp	r3, #0
 80024cc:	d101      	bne.n	80024d2 <HAL_DMA2D_Init+0x12>
  {
    return HAL_ERROR;
 80024ce:	2301      	movs	r3, #1
 80024d0:	e04f      	b.n	8002572 <HAL_DMA2D_Init+0xb2>

    /* Init the low level hardware */
    hdma2d->MspInitCallback(hdma2d);
  }
#else
  if (hdma2d->State == HAL_DMA2D_STATE_RESET)
 80024d2:	687b      	ldr	r3, [r7, #4]
 80024d4:	f893 3061 	ldrb.w	r3, [r3, #97]	; 0x61
 80024d8:	b2db      	uxtb	r3, r3
 80024da:	2b00      	cmp	r3, #0
 80024dc:	d106      	bne.n	80024ec <HAL_DMA2D_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hdma2d->Lock = HAL_UNLOCKED;
 80024de:	687b      	ldr	r3, [r7, #4]
 80024e0:	2200      	movs	r2, #0
 80024e2:	f883 2060 	strb.w	r2, [r3, #96]	; 0x60
    /* Init the low level hardware */
    HAL_DMA2D_MspInit(hdma2d);
 80024e6:	6878      	ldr	r0, [r7, #4]
 80024e8:	f7fe fe22 	bl	8001130 <HAL_DMA2D_MspInit>
  }
#endif /* (USE_HAL_DMA2D_REGISTER_CALLBACKS) */

  /* Change DMA2D peripheral state */
  hdma2d->State = HAL_DMA2D_STATE_BUSY;
 80024ec:	687b      	ldr	r3, [r7, #4]
 80024ee:	2202      	movs	r2, #2
 80024f0:	f883 2061 	strb.w	r2, [r3, #97]	; 0x61

  /* DMA2D CR register configuration -------------------------------------------*/
  MODIFY_REG(hdma2d->Instance->CR, DMA2D_CR_MODE | DMA2D_CR_LOM, hdma2d->Init.Mode | hdma2d->Init.LineOffsetMode);
 80024f4:	687b      	ldr	r3, [r7, #4]
 80024f6:	681b      	ldr	r3, [r3, #0]
 80024f8:	681a      	ldr	r2, [r3, #0]
 80024fa:	4b20      	ldr	r3, [pc, #128]	; (800257c <HAL_DMA2D_Init+0xbc>)
 80024fc:	4013      	ands	r3, r2
 80024fe:	687a      	ldr	r2, [r7, #4]
 8002500:	6851      	ldr	r1, [r2, #4]
 8002502:	687a      	ldr	r2, [r7, #4]
 8002504:	69d2      	ldr	r2, [r2, #28]
 8002506:	4311      	orrs	r1, r2
 8002508:	687a      	ldr	r2, [r7, #4]
 800250a:	6812      	ldr	r2, [r2, #0]
 800250c:	430b      	orrs	r3, r1
 800250e:	6013      	str	r3, [r2, #0]

  /* DMA2D OPFCCR register configuration ---------------------------------------*/
  MODIFY_REG(hdma2d->Instance->OPFCCR, DMA2D_OPFCCR_CM | DMA2D_OPFCCR_SB,
 8002510:	687b      	ldr	r3, [r7, #4]
 8002512:	681b      	ldr	r3, [r3, #0]
 8002514:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002516:	4b1a      	ldr	r3, [pc, #104]	; (8002580 <HAL_DMA2D_Init+0xc0>)
 8002518:	4013      	ands	r3, r2
 800251a:	687a      	ldr	r2, [r7, #4]
 800251c:	6891      	ldr	r1, [r2, #8]
 800251e:	687a      	ldr	r2, [r7, #4]
 8002520:	6992      	ldr	r2, [r2, #24]
 8002522:	4311      	orrs	r1, r2
 8002524:	687a      	ldr	r2, [r7, #4]
 8002526:	6812      	ldr	r2, [r2, #0]
 8002528:	430b      	orrs	r3, r1
 800252a:	6353      	str	r3, [r2, #52]	; 0x34
             hdma2d->Init.ColorMode | hdma2d->Init.BytesSwap);

  /* DMA2D OOR register configuration ------------------------------------------*/
  MODIFY_REG(hdma2d->Instance->OOR, DMA2D_OOR_LO, hdma2d->Init.OutputOffset);
 800252c:	687b      	ldr	r3, [r7, #4]
 800252e:	681b      	ldr	r3, [r3, #0]
 8002530:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8002532:	4b14      	ldr	r3, [pc, #80]	; (8002584 <HAL_DMA2D_Init+0xc4>)
 8002534:	4013      	ands	r3, r2
 8002536:	687a      	ldr	r2, [r7, #4]
 8002538:	68d1      	ldr	r1, [r2, #12]
 800253a:	687a      	ldr	r2, [r7, #4]
 800253c:	6812      	ldr	r2, [r2, #0]
 800253e:	430b      	orrs	r3, r1
 8002540:	6413      	str	r3, [r2, #64]	; 0x40
  /* DMA2D OPFCCR AI and RBS fields setting (Output Alpha Inversion)*/
  MODIFY_REG(hdma2d->Instance->OPFCCR, (DMA2D_OPFCCR_AI | DMA2D_OPFCCR_RBS),
 8002542:	687b      	ldr	r3, [r7, #4]
 8002544:	681b      	ldr	r3, [r3, #0]
 8002546:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002548:	f423 1140 	bic.w	r1, r3, #3145728	; 0x300000
 800254c:	687b      	ldr	r3, [r7, #4]
 800254e:	691b      	ldr	r3, [r3, #16]
 8002550:	051a      	lsls	r2, r3, #20
 8002552:	687b      	ldr	r3, [r7, #4]
 8002554:	695b      	ldr	r3, [r3, #20]
 8002556:	055b      	lsls	r3, r3, #21
 8002558:	431a      	orrs	r2, r3
 800255a:	687b      	ldr	r3, [r7, #4]
 800255c:	681b      	ldr	r3, [r3, #0]
 800255e:	430a      	orrs	r2, r1
 8002560:	635a      	str	r2, [r3, #52]	; 0x34
             ((hdma2d->Init.AlphaInverted << DMA2D_OPFCCR_AI_Pos) | \
              (hdma2d->Init.RedBlueSwap << DMA2D_OPFCCR_RBS_Pos)));


  /* Update error code */
  hdma2d->ErrorCode = HAL_DMA2D_ERROR_NONE;
 8002562:	687b      	ldr	r3, [r7, #4]
 8002564:	2200      	movs	r2, #0
 8002566:	665a      	str	r2, [r3, #100]	; 0x64

  /* Initialize the DMA2D state*/
  hdma2d->State  = HAL_DMA2D_STATE_READY;
 8002568:	687b      	ldr	r3, [r7, #4]
 800256a:	2201      	movs	r2, #1
 800256c:	f883 2061 	strb.w	r2, [r3, #97]	; 0x61

  return HAL_OK;
 8002570:	2300      	movs	r3, #0
}
 8002572:	4618      	mov	r0, r3
 8002574:	3708      	adds	r7, #8
 8002576:	46bd      	mov	sp, r7
 8002578:	bd80      	pop	{r7, pc}
 800257a:	bf00      	nop
 800257c:	fff8ffbf 	.word	0xfff8ffbf
 8002580:	fffffef8 	.word	0xfffffef8
 8002584:	ffff0000 	.word	0xffff0000

08002588 <HAL_DMA2D_ConfigLayer>:
  *                   This parameter can be one of the following values:
  *                   DMA2D_BACKGROUND_LAYER(0) / DMA2D_FOREGROUND_LAYER(1)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA2D_ConfigLayer(DMA2D_HandleTypeDef *hdma2d, uint32_t LayerIdx)
{
 8002588:	b480      	push	{r7}
 800258a:	b087      	sub	sp, #28
 800258c:	af00      	add	r7, sp, #0
 800258e:	6078      	str	r0, [r7, #4]
 8002590:	6039      	str	r1, [r7, #0]
  uint32_t regValue;

  /* Check the parameters */
  assert_param(IS_DMA2D_LAYER(LayerIdx));
  assert_param(IS_DMA2D_OFFSET(hdma2d->LayerCfg[LayerIdx].InputOffset));
  if (hdma2d->Init.Mode != DMA2D_R2M)
 8002592:	687b      	ldr	r3, [r7, #4]
 8002594:	685b      	ldr	r3, [r3, #4]
 8002596:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
    }
  }
  assert_param(IS_DMA2D_ALPHA_INVERTED(hdma2d->LayerCfg[LayerIdx].AlphaInverted));
  assert_param(IS_DMA2D_RB_SWAP(hdma2d->LayerCfg[LayerIdx].RedBlueSwap));

  if ((LayerIdx == DMA2D_FOREGROUND_LAYER) && (hdma2d->LayerCfg[LayerIdx].InputColorMode == DMA2D_INPUT_YCBCR))
 800259a:	683b      	ldr	r3, [r7, #0]
 800259c:	2b01      	cmp	r3, #1
 800259e:	d104      	bne.n	80025aa <HAL_DMA2D_ConfigLayer+0x22>
 80025a0:	683a      	ldr	r2, [r7, #0]
 80025a2:	4613      	mov	r3, r2
 80025a4:	00db      	lsls	r3, r3, #3
 80025a6:	1a9b      	subs	r3, r3, r2
 80025a8:	009b      	lsls	r3, r3, #2
  {
    assert_param(IS_DMA2D_CHROMA_SUB_SAMPLING(hdma2d->LayerCfg[LayerIdx].ChromaSubSampling));
  }

  /* Process locked */
  __HAL_LOCK(hdma2d);
 80025aa:	687b      	ldr	r3, [r7, #4]
 80025ac:	f893 3060 	ldrb.w	r3, [r3, #96]	; 0x60
 80025b0:	2b01      	cmp	r3, #1
 80025b2:	d101      	bne.n	80025b8 <HAL_DMA2D_ConfigLayer+0x30>
 80025b4:	2302      	movs	r3, #2
 80025b6:	e092      	b.n	80026de <HAL_DMA2D_ConfigLayer+0x156>
 80025b8:	687b      	ldr	r3, [r7, #4]
 80025ba:	2201      	movs	r2, #1
 80025bc:	f883 2060 	strb.w	r2, [r3, #96]	; 0x60

  /* Change DMA2D peripheral state */
  hdma2d->State = HAL_DMA2D_STATE_BUSY;
 80025c0:	687b      	ldr	r3, [r7, #4]
 80025c2:	2202      	movs	r2, #2
 80025c4:	f883 2061 	strb.w	r2, [r3, #97]	; 0x61

  pLayerCfg = &hdma2d->LayerCfg[LayerIdx];
 80025c8:	683a      	ldr	r2, [r7, #0]
 80025ca:	4613      	mov	r3, r2
 80025cc:	00db      	lsls	r3, r3, #3
 80025ce:	1a9b      	subs	r3, r3, r2
 80025d0:	009b      	lsls	r3, r3, #2
 80025d2:	3328      	adds	r3, #40	; 0x28
 80025d4:	687a      	ldr	r2, [r7, #4]
 80025d6:	4413      	add	r3, r2
 80025d8:	60fb      	str	r3, [r7, #12]

  /* Prepare the value to be written to the BGPFCCR or FGPFCCR register */
  regValue = pLayerCfg->InputColorMode | (pLayerCfg->AlphaMode << DMA2D_BGPFCCR_AM_Pos) | \
 80025da:	68fb      	ldr	r3, [r7, #12]
 80025dc:	685a      	ldr	r2, [r3, #4]
 80025de:	68fb      	ldr	r3, [r7, #12]
 80025e0:	689b      	ldr	r3, [r3, #8]
 80025e2:	041b      	lsls	r3, r3, #16
 80025e4:	431a      	orrs	r2, r3
             (pLayerCfg->AlphaInverted << DMA2D_BGPFCCR_AI_Pos) | (pLayerCfg->RedBlueSwap << DMA2D_BGPFCCR_RBS_Pos);
 80025e6:	68fb      	ldr	r3, [r7, #12]
 80025e8:	691b      	ldr	r3, [r3, #16]
 80025ea:	051b      	lsls	r3, r3, #20
  regValue = pLayerCfg->InputColorMode | (pLayerCfg->AlphaMode << DMA2D_BGPFCCR_AM_Pos) | \
 80025ec:	431a      	orrs	r2, r3
             (pLayerCfg->AlphaInverted << DMA2D_BGPFCCR_AI_Pos) | (pLayerCfg->RedBlueSwap << DMA2D_BGPFCCR_RBS_Pos);
 80025ee:	68fb      	ldr	r3, [r7, #12]
 80025f0:	695b      	ldr	r3, [r3, #20]
 80025f2:	055b      	lsls	r3, r3, #21
  regValue = pLayerCfg->InputColorMode | (pLayerCfg->AlphaMode << DMA2D_BGPFCCR_AM_Pos) | \
 80025f4:	4313      	orrs	r3, r2
 80025f6:	613b      	str	r3, [r7, #16]
  regMask  = (DMA2D_BGPFCCR_CM | DMA2D_BGPFCCR_AM | DMA2D_BGPFCCR_ALPHA | DMA2D_BGPFCCR_AI | DMA2D_BGPFCCR_RBS);
 80025f8:	4b3c      	ldr	r3, [pc, #240]	; (80026ec <HAL_DMA2D_ConfigLayer+0x164>)
 80025fa:	617b      	str	r3, [r7, #20]


  if ((pLayerCfg->InputColorMode == DMA2D_INPUT_A4) || (pLayerCfg->InputColorMode == DMA2D_INPUT_A8))
 80025fc:	68fb      	ldr	r3, [r7, #12]
 80025fe:	685b      	ldr	r3, [r3, #4]
 8002600:	2b0a      	cmp	r3, #10
 8002602:	d003      	beq.n	800260c <HAL_DMA2D_ConfigLayer+0x84>
 8002604:	68fb      	ldr	r3, [r7, #12]
 8002606:	685b      	ldr	r3, [r3, #4]
 8002608:	2b09      	cmp	r3, #9
 800260a:	d107      	bne.n	800261c <HAL_DMA2D_ConfigLayer+0x94>
  {
    regValue |= (pLayerCfg->InputAlpha & DMA2D_BGPFCCR_ALPHA);
 800260c:	68fb      	ldr	r3, [r7, #12]
 800260e:	68db      	ldr	r3, [r3, #12]
 8002610:	f003 437f 	and.w	r3, r3, #4278190080	; 0xff000000
 8002614:	693a      	ldr	r2, [r7, #16]
 8002616:	4313      	orrs	r3, r2
 8002618:	613b      	str	r3, [r7, #16]
 800261a:	e005      	b.n	8002628 <HAL_DMA2D_ConfigLayer+0xa0>
  }
  else
  {
    regValue |= (pLayerCfg->InputAlpha << DMA2D_BGPFCCR_ALPHA_Pos);
 800261c:	68fb      	ldr	r3, [r7, #12]
 800261e:	68db      	ldr	r3, [r3, #12]
 8002620:	061b      	lsls	r3, r3, #24
 8002622:	693a      	ldr	r2, [r7, #16]
 8002624:	4313      	orrs	r3, r2
 8002626:	613b      	str	r3, [r7, #16]
  }

  /* Configure the background DMA2D layer */
  if (LayerIdx == DMA2D_BACKGROUND_LAYER)
 8002628:	683b      	ldr	r3, [r7, #0]
 800262a:	2b00      	cmp	r3, #0
 800262c:	d120      	bne.n	8002670 <HAL_DMA2D_ConfigLayer+0xe8>
  {
    /* Write DMA2D BGPFCCR register */
    MODIFY_REG(hdma2d->Instance->BGPFCCR, regMask, regValue);
 800262e:	687b      	ldr	r3, [r7, #4]
 8002630:	681b      	ldr	r3, [r3, #0]
 8002632:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8002634:	697b      	ldr	r3, [r7, #20]
 8002636:	43db      	mvns	r3, r3
 8002638:	ea02 0103 	and.w	r1, r2, r3
 800263c:	687b      	ldr	r3, [r7, #4]
 800263e:	681b      	ldr	r3, [r3, #0]
 8002640:	693a      	ldr	r2, [r7, #16]
 8002642:	430a      	orrs	r2, r1
 8002644:	625a      	str	r2, [r3, #36]	; 0x24

    /* DMA2D BGOR register configuration -------------------------------------*/
    WRITE_REG(hdma2d->Instance->BGOR, pLayerCfg->InputOffset);
 8002646:	687b      	ldr	r3, [r7, #4]
 8002648:	681b      	ldr	r3, [r3, #0]
 800264a:	68fa      	ldr	r2, [r7, #12]
 800264c:	6812      	ldr	r2, [r2, #0]
 800264e:	619a      	str	r2, [r3, #24]

    /* DMA2D BGCOLR register configuration -------------------------------------*/
    if ((pLayerCfg->InputColorMode == DMA2D_INPUT_A4) || (pLayerCfg->InputColorMode == DMA2D_INPUT_A8))
 8002650:	68fb      	ldr	r3, [r7, #12]
 8002652:	685b      	ldr	r3, [r3, #4]
 8002654:	2b0a      	cmp	r3, #10
 8002656:	d003      	beq.n	8002660 <HAL_DMA2D_ConfigLayer+0xd8>
 8002658:	68fb      	ldr	r3, [r7, #12]
 800265a:	685b      	ldr	r3, [r3, #4]
 800265c:	2b09      	cmp	r3, #9
 800265e:	d135      	bne.n	80026cc <HAL_DMA2D_ConfigLayer+0x144>
    {
      WRITE_REG(hdma2d->Instance->BGCOLR, pLayerCfg->InputAlpha & (DMA2D_BGCOLR_BLUE | DMA2D_BGCOLR_GREEN | \
 8002660:	68fb      	ldr	r3, [r7, #12]
 8002662:	68da      	ldr	r2, [r3, #12]
 8002664:	687b      	ldr	r3, [r7, #4]
 8002666:	681b      	ldr	r3, [r3, #0]
 8002668:	f022 427f 	bic.w	r2, r2, #4278190080	; 0xff000000
 800266c:	629a      	str	r2, [r3, #40]	; 0x28
 800266e:	e02d      	b.n	80026cc <HAL_DMA2D_ConfigLayer+0x144>
  }
  /* Configure the foreground DMA2D layer */
  else
  {

    if (pLayerCfg->InputColorMode == DMA2D_INPUT_YCBCR)
 8002670:	68fb      	ldr	r3, [r7, #12]
 8002672:	685b      	ldr	r3, [r3, #4]
 8002674:	2b0b      	cmp	r3, #11
 8002676:	d109      	bne.n	800268c <HAL_DMA2D_ConfigLayer+0x104>
    {
      regValue |= (pLayerCfg->ChromaSubSampling << DMA2D_FGPFCCR_CSS_Pos);
 8002678:	68fb      	ldr	r3, [r7, #12]
 800267a:	699b      	ldr	r3, [r3, #24]
 800267c:	049b      	lsls	r3, r3, #18
 800267e:	693a      	ldr	r2, [r7, #16]
 8002680:	4313      	orrs	r3, r2
 8002682:	613b      	str	r3, [r7, #16]
      regMask  |= DMA2D_FGPFCCR_CSS;
 8002684:	697b      	ldr	r3, [r7, #20]
 8002686:	f443 2340 	orr.w	r3, r3, #786432	; 0xc0000
 800268a:	617b      	str	r3, [r7, #20]
    }

    /* Write DMA2D FGPFCCR register */
    MODIFY_REG(hdma2d->Instance->FGPFCCR, regMask, regValue);
 800268c:	687b      	ldr	r3, [r7, #4]
 800268e:	681b      	ldr	r3, [r3, #0]
 8002690:	69da      	ldr	r2, [r3, #28]
 8002692:	697b      	ldr	r3, [r7, #20]
 8002694:	43db      	mvns	r3, r3
 8002696:	ea02 0103 	and.w	r1, r2, r3
 800269a:	687b      	ldr	r3, [r7, #4]
 800269c:	681b      	ldr	r3, [r3, #0]
 800269e:	693a      	ldr	r2, [r7, #16]
 80026a0:	430a      	orrs	r2, r1
 80026a2:	61da      	str	r2, [r3, #28]

    /* DMA2D FGOR register configuration -------------------------------------*/
    WRITE_REG(hdma2d->Instance->FGOR, pLayerCfg->InputOffset);
 80026a4:	687b      	ldr	r3, [r7, #4]
 80026a6:	681b      	ldr	r3, [r3, #0]
 80026a8:	68fa      	ldr	r2, [r7, #12]
 80026aa:	6812      	ldr	r2, [r2, #0]
 80026ac:	611a      	str	r2, [r3, #16]

    /* DMA2D FGCOLR register configuration -------------------------------------*/
    if ((pLayerCfg->InputColorMode == DMA2D_INPUT_A4) || (pLayerCfg->InputColorMode == DMA2D_INPUT_A8))
 80026ae:	68fb      	ldr	r3, [r7, #12]
 80026b0:	685b      	ldr	r3, [r3, #4]
 80026b2:	2b0a      	cmp	r3, #10
 80026b4:	d003      	beq.n	80026be <HAL_DMA2D_ConfigLayer+0x136>
 80026b6:	68fb      	ldr	r3, [r7, #12]
 80026b8:	685b      	ldr	r3, [r3, #4]
 80026ba:	2b09      	cmp	r3, #9
 80026bc:	d106      	bne.n	80026cc <HAL_DMA2D_ConfigLayer+0x144>
    {
      WRITE_REG(hdma2d->Instance->FGCOLR, pLayerCfg->InputAlpha & (DMA2D_FGCOLR_BLUE | DMA2D_FGCOLR_GREEN | \
 80026be:	68fb      	ldr	r3, [r7, #12]
 80026c0:	68da      	ldr	r2, [r3, #12]
 80026c2:	687b      	ldr	r3, [r7, #4]
 80026c4:	681b      	ldr	r3, [r3, #0]
 80026c6:	f022 427f 	bic.w	r2, r2, #4278190080	; 0xff000000
 80026ca:	621a      	str	r2, [r3, #32]
                                                                   DMA2D_FGCOLR_RED));
    }
  }
  /* Initialize the DMA2D state*/
  hdma2d->State = HAL_DMA2D_STATE_READY;
 80026cc:	687b      	ldr	r3, [r7, #4]
 80026ce:	2201      	movs	r2, #1
 80026d0:	f883 2061 	strb.w	r2, [r3, #97]	; 0x61

  /* Process unlocked */
  __HAL_UNLOCK(hdma2d);
 80026d4:	687b      	ldr	r3, [r7, #4]
 80026d6:	2200      	movs	r2, #0
 80026d8:	f883 2060 	strb.w	r2, [r3, #96]	; 0x60

  return HAL_OK;
 80026dc:	2300      	movs	r3, #0
}
 80026de:	4618      	mov	r0, r3
 80026e0:	371c      	adds	r7, #28
 80026e2:	46bd      	mov	sp, r7
 80026e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026e8:	4770      	bx	lr
 80026ea:	bf00      	nop
 80026ec:	ff33000f 	.word	0xff33000f

080026f0 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80026f0:	b480      	push	{r7}
 80026f2:	b089      	sub	sp, #36	; 0x24
 80026f4:	af00      	add	r7, sp, #0
 80026f6:	6078      	str	r0, [r7, #4]
 80026f8:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 80026fa:	2300      	movs	r3, #0
 80026fc:	61fb      	str	r3, [r7, #28]
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
#else
  EXTI_CurrentCPU = EXTI_D1; /* EXTI for CM7 CPU */
 80026fe:	4b86      	ldr	r3, [pc, #536]	; (8002918 <HAL_GPIO_Init+0x228>)
 8002700:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8002702:	e18c      	b.n	8002a1e <HAL_GPIO_Init+0x32e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8002704:	683b      	ldr	r3, [r7, #0]
 8002706:	681a      	ldr	r2, [r3, #0]
 8002708:	2101      	movs	r1, #1
 800270a:	69fb      	ldr	r3, [r7, #28]
 800270c:	fa01 f303 	lsl.w	r3, r1, r3
 8002710:	4013      	ands	r3, r2
 8002712:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00U)
 8002714:	693b      	ldr	r3, [r7, #16]
 8002716:	2b00      	cmp	r3, #0
 8002718:	f000 817e 	beq.w	8002a18 <HAL_GPIO_Init+0x328>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if ((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 800271c:	683b      	ldr	r3, [r7, #0]
 800271e:	685b      	ldr	r3, [r3, #4]
 8002720:	2b01      	cmp	r3, #1
 8002722:	d00b      	beq.n	800273c <HAL_GPIO_Init+0x4c>
 8002724:	683b      	ldr	r3, [r7, #0]
 8002726:	685b      	ldr	r3, [r3, #4]
 8002728:	2b02      	cmp	r3, #2
 800272a:	d007      	beq.n	800273c <HAL_GPIO_Init+0x4c>
          (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 800272c:	683b      	ldr	r3, [r7, #0]
 800272e:	685b      	ldr	r3, [r3, #4]
      if ((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8002730:	2b11      	cmp	r3, #17
 8002732:	d003      	beq.n	800273c <HAL_GPIO_Init+0x4c>
          (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8002734:	683b      	ldr	r3, [r7, #0]
 8002736:	685b      	ldr	r3, [r3, #4]
 8002738:	2b12      	cmp	r3, #18
 800273a:	d130      	bne.n	800279e <HAL_GPIO_Init+0xae>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 800273c:	687b      	ldr	r3, [r7, #4]
 800273e:	689b      	ldr	r3, [r3, #8]
 8002740:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8002742:	69fb      	ldr	r3, [r7, #28]
 8002744:	005b      	lsls	r3, r3, #1
 8002746:	2203      	movs	r2, #3
 8002748:	fa02 f303 	lsl.w	r3, r2, r3
 800274c:	43db      	mvns	r3, r3
 800274e:	69ba      	ldr	r2, [r7, #24]
 8002750:	4013      	ands	r3, r2
 8002752:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8002754:	683b      	ldr	r3, [r7, #0]
 8002756:	68da      	ldr	r2, [r3, #12]
 8002758:	69fb      	ldr	r3, [r7, #28]
 800275a:	005b      	lsls	r3, r3, #1
 800275c:	fa02 f303 	lsl.w	r3, r2, r3
 8002760:	69ba      	ldr	r2, [r7, #24]
 8002762:	4313      	orrs	r3, r2
 8002764:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8002766:	687b      	ldr	r3, [r7, #4]
 8002768:	69ba      	ldr	r2, [r7, #24]
 800276a:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800276c:	687b      	ldr	r3, [r7, #4]
 800276e:	685b      	ldr	r3, [r3, #4]
 8002770:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8002772:	2201      	movs	r2, #1
 8002774:	69fb      	ldr	r3, [r7, #28]
 8002776:	fa02 f303 	lsl.w	r3, r2, r3
 800277a:	43db      	mvns	r3, r3
 800277c:	69ba      	ldr	r2, [r7, #24]
 800277e:	4013      	ands	r3, r2
 8002780:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8002782:	683b      	ldr	r3, [r7, #0]
 8002784:	685b      	ldr	r3, [r3, #4]
 8002786:	091b      	lsrs	r3, r3, #4
 8002788:	f003 0201 	and.w	r2, r3, #1
 800278c:	69fb      	ldr	r3, [r7, #28]
 800278e:	fa02 f303 	lsl.w	r3, r2, r3
 8002792:	69ba      	ldr	r2, [r7, #24]
 8002794:	4313      	orrs	r3, r2
 8002796:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8002798:	687b      	ldr	r3, [r7, #4]
 800279a:	69ba      	ldr	r2, [r7, #24]
 800279c:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 800279e:	687b      	ldr	r3, [r7, #4]
 80027a0:	68db      	ldr	r3, [r3, #12]
 80027a2:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 80027a4:	69fb      	ldr	r3, [r7, #28]
 80027a6:	005b      	lsls	r3, r3, #1
 80027a8:	2203      	movs	r2, #3
 80027aa:	fa02 f303 	lsl.w	r3, r2, r3
 80027ae:	43db      	mvns	r3, r3
 80027b0:	69ba      	ldr	r2, [r7, #24]
 80027b2:	4013      	ands	r3, r2
 80027b4:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 80027b6:	683b      	ldr	r3, [r7, #0]
 80027b8:	689a      	ldr	r2, [r3, #8]
 80027ba:	69fb      	ldr	r3, [r7, #28]
 80027bc:	005b      	lsls	r3, r3, #1
 80027be:	fa02 f303 	lsl.w	r3, r2, r3
 80027c2:	69ba      	ldr	r2, [r7, #24]
 80027c4:	4313      	orrs	r3, r2
 80027c6:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 80027c8:	687b      	ldr	r3, [r7, #4]
 80027ca:	69ba      	ldr	r2, [r7, #24]
 80027cc:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80027ce:	683b      	ldr	r3, [r7, #0]
 80027d0:	685b      	ldr	r3, [r3, #4]
 80027d2:	2b02      	cmp	r3, #2
 80027d4:	d003      	beq.n	80027de <HAL_GPIO_Init+0xee>
 80027d6:	683b      	ldr	r3, [r7, #0]
 80027d8:	685b      	ldr	r3, [r3, #4]
 80027da:	2b12      	cmp	r3, #18
 80027dc:	d123      	bne.n	8002826 <HAL_GPIO_Init+0x136>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80027de:	69fb      	ldr	r3, [r7, #28]
 80027e0:	08da      	lsrs	r2, r3, #3
 80027e2:	687b      	ldr	r3, [r7, #4]
 80027e4:	3208      	adds	r2, #8
 80027e6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80027ea:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 80027ec:	69fb      	ldr	r3, [r7, #28]
 80027ee:	f003 0307 	and.w	r3, r3, #7
 80027f2:	009b      	lsls	r3, r3, #2
 80027f4:	220f      	movs	r2, #15
 80027f6:	fa02 f303 	lsl.w	r3, r2, r3
 80027fa:	43db      	mvns	r3, r3
 80027fc:	69ba      	ldr	r2, [r7, #24]
 80027fe:	4013      	ands	r3, r2
 8002800:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8002802:	683b      	ldr	r3, [r7, #0]
 8002804:	691a      	ldr	r2, [r3, #16]
 8002806:	69fb      	ldr	r3, [r7, #28]
 8002808:	f003 0307 	and.w	r3, r3, #7
 800280c:	009b      	lsls	r3, r3, #2
 800280e:	fa02 f303 	lsl.w	r3, r2, r3
 8002812:	69ba      	ldr	r2, [r7, #24]
 8002814:	4313      	orrs	r3, r2
 8002816:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8002818:	69fb      	ldr	r3, [r7, #28]
 800281a:	08da      	lsrs	r2, r3, #3
 800281c:	687b      	ldr	r3, [r7, #4]
 800281e:	3208      	adds	r2, #8
 8002820:	69b9      	ldr	r1, [r7, #24]
 8002822:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002826:	687b      	ldr	r3, [r7, #4]
 8002828:	681b      	ldr	r3, [r3, #0]
 800282a:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 800282c:	69fb      	ldr	r3, [r7, #28]
 800282e:	005b      	lsls	r3, r3, #1
 8002830:	2203      	movs	r2, #3
 8002832:	fa02 f303 	lsl.w	r3, r2, r3
 8002836:	43db      	mvns	r3, r3
 8002838:	69ba      	ldr	r2, [r7, #24]
 800283a:	4013      	ands	r3, r2
 800283c:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800283e:	683b      	ldr	r3, [r7, #0]
 8002840:	685b      	ldr	r3, [r3, #4]
 8002842:	f003 0203 	and.w	r2, r3, #3
 8002846:	69fb      	ldr	r3, [r7, #28]
 8002848:	005b      	lsls	r3, r3, #1
 800284a:	fa02 f303 	lsl.w	r3, r2, r3
 800284e:	69ba      	ldr	r2, [r7, #24]
 8002850:	4313      	orrs	r3, r2
 8002852:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8002854:	687b      	ldr	r3, [r7, #4]
 8002856:	69ba      	ldr	r2, [r7, #24]
 8002858:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 800285a:	683b      	ldr	r3, [r7, #0]
 800285c:	685b      	ldr	r3, [r3, #4]
 800285e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002862:	2b00      	cmp	r3, #0
 8002864:	f000 80d8 	beq.w	8002a18 <HAL_GPIO_Init+0x328>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002868:	4b2c      	ldr	r3, [pc, #176]	; (800291c <HAL_GPIO_Init+0x22c>)
 800286a:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 800286e:	4a2b      	ldr	r2, [pc, #172]	; (800291c <HAL_GPIO_Init+0x22c>)
 8002870:	f043 0302 	orr.w	r3, r3, #2
 8002874:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 8002878:	4b28      	ldr	r3, [pc, #160]	; (800291c <HAL_GPIO_Init+0x22c>)
 800287a:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 800287e:	f003 0302 	and.w	r3, r3, #2
 8002882:	60fb      	str	r3, [r7, #12]
 8002884:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8002886:	4a26      	ldr	r2, [pc, #152]	; (8002920 <HAL_GPIO_Init+0x230>)
 8002888:	69fb      	ldr	r3, [r7, #28]
 800288a:	089b      	lsrs	r3, r3, #2
 800288c:	3302      	adds	r3, #2
 800288e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002892:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8002894:	69fb      	ldr	r3, [r7, #28]
 8002896:	f003 0303 	and.w	r3, r3, #3
 800289a:	009b      	lsls	r3, r3, #2
 800289c:	220f      	movs	r2, #15
 800289e:	fa02 f303 	lsl.w	r3, r2, r3
 80028a2:	43db      	mvns	r3, r3
 80028a4:	69ba      	ldr	r2, [r7, #24]
 80028a6:	4013      	ands	r3, r2
 80028a8:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 80028aa:	687b      	ldr	r3, [r7, #4]
 80028ac:	4a1d      	ldr	r2, [pc, #116]	; (8002924 <HAL_GPIO_Init+0x234>)
 80028ae:	4293      	cmp	r3, r2
 80028b0:	d04a      	beq.n	8002948 <HAL_GPIO_Init+0x258>
 80028b2:	687b      	ldr	r3, [r7, #4]
 80028b4:	4a1c      	ldr	r2, [pc, #112]	; (8002928 <HAL_GPIO_Init+0x238>)
 80028b6:	4293      	cmp	r3, r2
 80028b8:	d02b      	beq.n	8002912 <HAL_GPIO_Init+0x222>
 80028ba:	687b      	ldr	r3, [r7, #4]
 80028bc:	4a1b      	ldr	r2, [pc, #108]	; (800292c <HAL_GPIO_Init+0x23c>)
 80028be:	4293      	cmp	r3, r2
 80028c0:	d025      	beq.n	800290e <HAL_GPIO_Init+0x21e>
 80028c2:	687b      	ldr	r3, [r7, #4]
 80028c4:	4a1a      	ldr	r2, [pc, #104]	; (8002930 <HAL_GPIO_Init+0x240>)
 80028c6:	4293      	cmp	r3, r2
 80028c8:	d01f      	beq.n	800290a <HAL_GPIO_Init+0x21a>
 80028ca:	687b      	ldr	r3, [r7, #4]
 80028cc:	4a19      	ldr	r2, [pc, #100]	; (8002934 <HAL_GPIO_Init+0x244>)
 80028ce:	4293      	cmp	r3, r2
 80028d0:	d019      	beq.n	8002906 <HAL_GPIO_Init+0x216>
 80028d2:	687b      	ldr	r3, [r7, #4]
 80028d4:	4a18      	ldr	r2, [pc, #96]	; (8002938 <HAL_GPIO_Init+0x248>)
 80028d6:	4293      	cmp	r3, r2
 80028d8:	d013      	beq.n	8002902 <HAL_GPIO_Init+0x212>
 80028da:	687b      	ldr	r3, [r7, #4]
 80028dc:	4a17      	ldr	r2, [pc, #92]	; (800293c <HAL_GPIO_Init+0x24c>)
 80028de:	4293      	cmp	r3, r2
 80028e0:	d00d      	beq.n	80028fe <HAL_GPIO_Init+0x20e>
 80028e2:	687b      	ldr	r3, [r7, #4]
 80028e4:	4a16      	ldr	r2, [pc, #88]	; (8002940 <HAL_GPIO_Init+0x250>)
 80028e6:	4293      	cmp	r3, r2
 80028e8:	d007      	beq.n	80028fa <HAL_GPIO_Init+0x20a>
 80028ea:	687b      	ldr	r3, [r7, #4]
 80028ec:	4a15      	ldr	r2, [pc, #84]	; (8002944 <HAL_GPIO_Init+0x254>)
 80028ee:	4293      	cmp	r3, r2
 80028f0:	d101      	bne.n	80028f6 <HAL_GPIO_Init+0x206>
 80028f2:	2309      	movs	r3, #9
 80028f4:	e029      	b.n	800294a <HAL_GPIO_Init+0x25a>
 80028f6:	230a      	movs	r3, #10
 80028f8:	e027      	b.n	800294a <HAL_GPIO_Init+0x25a>
 80028fa:	2307      	movs	r3, #7
 80028fc:	e025      	b.n	800294a <HAL_GPIO_Init+0x25a>
 80028fe:	2306      	movs	r3, #6
 8002900:	e023      	b.n	800294a <HAL_GPIO_Init+0x25a>
 8002902:	2305      	movs	r3, #5
 8002904:	e021      	b.n	800294a <HAL_GPIO_Init+0x25a>
 8002906:	2304      	movs	r3, #4
 8002908:	e01f      	b.n	800294a <HAL_GPIO_Init+0x25a>
 800290a:	2303      	movs	r3, #3
 800290c:	e01d      	b.n	800294a <HAL_GPIO_Init+0x25a>
 800290e:	2302      	movs	r3, #2
 8002910:	e01b      	b.n	800294a <HAL_GPIO_Init+0x25a>
 8002912:	2301      	movs	r3, #1
 8002914:	e019      	b.n	800294a <HAL_GPIO_Init+0x25a>
 8002916:	bf00      	nop
 8002918:	58000080 	.word	0x58000080
 800291c:	58024400 	.word	0x58024400
 8002920:	58000400 	.word	0x58000400
 8002924:	58020000 	.word	0x58020000
 8002928:	58020400 	.word	0x58020400
 800292c:	58020800 	.word	0x58020800
 8002930:	58020c00 	.word	0x58020c00
 8002934:	58021000 	.word	0x58021000
 8002938:	58021400 	.word	0x58021400
 800293c:	58021800 	.word	0x58021800
 8002940:	58021c00 	.word	0x58021c00
 8002944:	58022400 	.word	0x58022400
 8002948:	2300      	movs	r3, #0
 800294a:	69fa      	ldr	r2, [r7, #28]
 800294c:	f002 0203 	and.w	r2, r2, #3
 8002950:	0092      	lsls	r2, r2, #2
 8002952:	4093      	lsls	r3, r2
 8002954:	69ba      	ldr	r2, [r7, #24]
 8002956:	4313      	orrs	r3, r2
 8002958:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 800295a:	4938      	ldr	r1, [pc, #224]	; (8002a3c <HAL_GPIO_Init+0x34c>)
 800295c:	69fb      	ldr	r3, [r7, #28]
 800295e:	089b      	lsrs	r3, r3, #2
 8002960:	3302      	adds	r3, #2
 8002962:	69ba      	ldr	r2, [r7, #24]
 8002964:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
 8002968:	697b      	ldr	r3, [r7, #20]
 800296a:	681b      	ldr	r3, [r3, #0]
 800296c:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 800296e:	693b      	ldr	r3, [r7, #16]
 8002970:	43db      	mvns	r3, r3
 8002972:	69ba      	ldr	r2, [r7, #24]
 8002974:	4013      	ands	r3, r2
 8002976:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8002978:	683b      	ldr	r3, [r7, #0]
 800297a:	685b      	ldr	r3, [r3, #4]
 800297c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002980:	2b00      	cmp	r3, #0
 8002982:	d003      	beq.n	800298c <HAL_GPIO_Init+0x29c>
        {
          temp |= iocurrent;
 8002984:	69ba      	ldr	r2, [r7, #24]
 8002986:	693b      	ldr	r3, [r7, #16]
 8002988:	4313      	orrs	r3, r2
 800298a:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->IMR1 = temp;
 800298c:	697b      	ldr	r3, [r7, #20]
 800298e:	69ba      	ldr	r2, [r7, #24]
 8002990:	601a      	str	r2, [r3, #0]

        temp = EXTI_CurrentCPU->EMR1;
 8002992:	697b      	ldr	r3, [r7, #20]
 8002994:	685b      	ldr	r3, [r3, #4]
 8002996:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8002998:	693b      	ldr	r3, [r7, #16]
 800299a:	43db      	mvns	r3, r3
 800299c:	69ba      	ldr	r2, [r7, #24]
 800299e:	4013      	ands	r3, r2
 80029a0:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80029a2:	683b      	ldr	r3, [r7, #0]
 80029a4:	685b      	ldr	r3, [r3, #4]
 80029a6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80029aa:	2b00      	cmp	r3, #0
 80029ac:	d003      	beq.n	80029b6 <HAL_GPIO_Init+0x2c6>
        {
          temp |= iocurrent;
 80029ae:	69ba      	ldr	r2, [r7, #24]
 80029b0:	693b      	ldr	r3, [r7, #16]
 80029b2:	4313      	orrs	r3, r2
 80029b4:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->EMR1 = temp;
 80029b6:	697b      	ldr	r3, [r7, #20]
 80029b8:	69ba      	ldr	r2, [r7, #24]
 80029ba:	605a      	str	r2, [r3, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 80029bc:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80029c0:	681b      	ldr	r3, [r3, #0]
 80029c2:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 80029c4:	693b      	ldr	r3, [r7, #16]
 80029c6:	43db      	mvns	r3, r3
 80029c8:	69ba      	ldr	r2, [r7, #24]
 80029ca:	4013      	ands	r3, r2
 80029cc:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80029ce:	683b      	ldr	r3, [r7, #0]
 80029d0:	685b      	ldr	r3, [r3, #4]
 80029d2:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80029d6:	2b00      	cmp	r3, #0
 80029d8:	d003      	beq.n	80029e2 <HAL_GPIO_Init+0x2f2>
        {
          temp |= iocurrent;
 80029da:	69ba      	ldr	r2, [r7, #24]
 80029dc:	693b      	ldr	r3, [r7, #16]
 80029de:	4313      	orrs	r3, r2
 80029e0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR1 = temp;
 80029e2:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80029e6:	69bb      	ldr	r3, [r7, #24]
 80029e8:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 80029ea:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80029ee:	685b      	ldr	r3, [r3, #4]
 80029f0:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 80029f2:	693b      	ldr	r3, [r7, #16]
 80029f4:	43db      	mvns	r3, r3
 80029f6:	69ba      	ldr	r2, [r7, #24]
 80029f8:	4013      	ands	r3, r2
 80029fa:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80029fc:	683b      	ldr	r3, [r7, #0]
 80029fe:	685b      	ldr	r3, [r3, #4]
 8002a00:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002a04:	2b00      	cmp	r3, #0
 8002a06:	d003      	beq.n	8002a10 <HAL_GPIO_Init+0x320>
        {
          temp |= iocurrent;
 8002a08:	69ba      	ldr	r2, [r7, #24]
 8002a0a:	693b      	ldr	r3, [r7, #16]
 8002a0c:	4313      	orrs	r3, r2
 8002a0e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR1 = temp;
 8002a10:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8002a14:	69bb      	ldr	r3, [r7, #24]
 8002a16:	6053      	str	r3, [r2, #4]
      }
    }

    position++;
 8002a18:	69fb      	ldr	r3, [r7, #28]
 8002a1a:	3301      	adds	r3, #1
 8002a1c:	61fb      	str	r3, [r7, #28]
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8002a1e:	683b      	ldr	r3, [r7, #0]
 8002a20:	681a      	ldr	r2, [r3, #0]
 8002a22:	69fb      	ldr	r3, [r7, #28]
 8002a24:	fa22 f303 	lsr.w	r3, r2, r3
 8002a28:	2b00      	cmp	r3, #0
 8002a2a:	f47f ae6b 	bne.w	8002704 <HAL_GPIO_Init+0x14>
  }
}
 8002a2e:	bf00      	nop
 8002a30:	bf00      	nop
 8002a32:	3724      	adds	r7, #36	; 0x24
 8002a34:	46bd      	mov	sp, r7
 8002a36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a3a:	4770      	bx	lr
 8002a3c:	58000400 	.word	0x58000400

08002a40 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002a40:	b480      	push	{r7}
 8002a42:	b083      	sub	sp, #12
 8002a44:	af00      	add	r7, sp, #0
 8002a46:	6078      	str	r0, [r7, #4]
 8002a48:	460b      	mov	r3, r1
 8002a4a:	807b      	strh	r3, [r7, #2]
 8002a4c:	4613      	mov	r3, r2
 8002a4e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8002a50:	787b      	ldrb	r3, [r7, #1]
 8002a52:	2b00      	cmp	r3, #0
 8002a54:	d003      	beq.n	8002a5e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8002a56:	887a      	ldrh	r2, [r7, #2]
 8002a58:	687b      	ldr	r3, [r7, #4]
 8002a5a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
  }
}
 8002a5c:	e003      	b.n	8002a66 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 8002a5e:	887b      	ldrh	r3, [r7, #2]
 8002a60:	041a      	lsls	r2, r3, #16
 8002a62:	687b      	ldr	r3, [r7, #4]
 8002a64:	619a      	str	r2, [r3, #24]
}
 8002a66:	bf00      	nop
 8002a68:	370c      	adds	r7, #12
 8002a6a:	46bd      	mov	sp, r7
 8002a6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a70:	4770      	bx	lr
	...

08002a74 <HAL_NOR_Init>:
  * @param  ExtTiming pointer to NOR extended mode timing structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_NOR_Init(NOR_HandleTypeDef *hnor, FMC_NORSRAM_TimingTypeDef *Timing,
                               FMC_NORSRAM_TimingTypeDef *ExtTiming)
{
 8002a74:	b580      	push	{r7, lr}
 8002a76:	b086      	sub	sp, #24
 8002a78:	af00      	add	r7, sp, #0
 8002a7a:	60f8      	str	r0, [r7, #12]
 8002a7c:	60b9      	str	r1, [r7, #8]
 8002a7e:	607a      	str	r2, [r7, #4]
  uint32_t deviceaddress;

  /* Check the NOR handle parameter */
  if (hnor == NULL)
 8002a80:	68fb      	ldr	r3, [r7, #12]
 8002a82:	2b00      	cmp	r3, #0
 8002a84:	d101      	bne.n	8002a8a <HAL_NOR_Init+0x16>
  {
    return HAL_ERROR;
 8002a86:	2301      	movs	r3, #1
 8002a88:	e067      	b.n	8002b5a <HAL_NOR_Init+0xe6>
  }

  if (hnor->State == HAL_NOR_STATE_RESET)
 8002a8a:	68fb      	ldr	r3, [r7, #12]
 8002a8c:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8002a90:	b2db      	uxtb	r3, r3
 8002a92:	2b00      	cmp	r3, #0
 8002a94:	d106      	bne.n	8002aa4 <HAL_NOR_Init+0x30>
  {
    /* Allocate lock resource and initialize it */
    hnor->Lock = HAL_UNLOCKED;
 8002a96:	68fb      	ldr	r3, [r7, #12]
 8002a98:	2200      	movs	r2, #0
 8002a9a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44

    /* Init the low level hardware */
    hnor->MspInitCallback(hnor);
#else
    /* Initialize the low level hardware (MSP) */
    HAL_NOR_MspInit(hnor);
 8002a9e:	68f8      	ldr	r0, [r7, #12]
 8002aa0:	f7fe fc6e 	bl	8001380 <HAL_NOR_MspInit>
#endif /* (USE_HAL_NOR_REGISTER_CALLBACKS) */
  }

  /* Initialize NOR control Interface */
  (void)FMC_NORSRAM_Init(hnor->Instance, &(hnor->Init));
 8002aa4:	68fb      	ldr	r3, [r7, #12]
 8002aa6:	681a      	ldr	r2, [r3, #0]
 8002aa8:	68fb      	ldr	r3, [r7, #12]
 8002aaa:	3308      	adds	r3, #8
 8002aac:	4619      	mov	r1, r3
 8002aae:	4610      	mov	r0, r2
 8002ab0:	f004 f896 	bl	8006be0 <FMC_NORSRAM_Init>

  /* Initialize NOR timing Interface */
  (void)FMC_NORSRAM_Timing_Init(hnor->Instance, Timing, hnor->Init.NSBank);
 8002ab4:	68fb      	ldr	r3, [r7, #12]
 8002ab6:	6818      	ldr	r0, [r3, #0]
 8002ab8:	68fb      	ldr	r3, [r7, #12]
 8002aba:	689b      	ldr	r3, [r3, #8]
 8002abc:	461a      	mov	r2, r3
 8002abe:	68b9      	ldr	r1, [r7, #8]
 8002ac0:	f004 f91e 	bl	8006d00 <FMC_NORSRAM_Timing_Init>

  /* Initialize NOR extended mode timing Interface */
  (void)FMC_NORSRAM_Extended_Timing_Init(hnor->Extended, ExtTiming, hnor->Init.NSBank, hnor->Init.ExtendedMode);
 8002ac4:	68fb      	ldr	r3, [r7, #12]
 8002ac6:	6858      	ldr	r0, [r3, #4]
 8002ac8:	68fb      	ldr	r3, [r7, #12]
 8002aca:	689a      	ldr	r2, [r3, #8]
 8002acc:	68fb      	ldr	r3, [r7, #12]
 8002ace:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002ad0:	6879      	ldr	r1, [r7, #4]
 8002ad2:	f004 f965 	bl	8006da0 <FMC_NORSRAM_Extended_Timing_Init>

  /* Enable the NORSRAM device */
  __FMC_NORSRAM_ENABLE(hnor->Instance, hnor->Init.NSBank);
 8002ad6:	68fb      	ldr	r3, [r7, #12]
 8002ad8:	681b      	ldr	r3, [r3, #0]
 8002ada:	68fa      	ldr	r2, [r7, #12]
 8002adc:	6892      	ldr	r2, [r2, #8]
 8002ade:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8002ae2:	68fb      	ldr	r3, [r7, #12]
 8002ae4:	681b      	ldr	r3, [r3, #0]
 8002ae6:	68fa      	ldr	r2, [r7, #12]
 8002ae8:	6892      	ldr	r2, [r2, #8]
 8002aea:	f041 0101 	orr.w	r1, r1, #1
 8002aee:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

  /* Initialize NOR Memory Data Width*/
  if (hnor->Init.MemoryDataWidth == FMC_NORSRAM_MEM_BUS_WIDTH_8)
 8002af2:	68fb      	ldr	r3, [r7, #12]
 8002af4:	695b      	ldr	r3, [r3, #20]
 8002af6:	2b00      	cmp	r3, #0
 8002af8:	d103      	bne.n	8002b02 <HAL_NOR_Init+0x8e>
  {
    uwNORMemoryDataWidth = NOR_MEMORY_8B;
 8002afa:	4b1a      	ldr	r3, [pc, #104]	; (8002b64 <HAL_NOR_Init+0xf0>)
 8002afc:	2200      	movs	r2, #0
 8002afe:	601a      	str	r2, [r3, #0]
 8002b00:	e002      	b.n	8002b08 <HAL_NOR_Init+0x94>
  }
  else
  {
    uwNORMemoryDataWidth = NOR_MEMORY_16B;
 8002b02:	4b18      	ldr	r3, [pc, #96]	; (8002b64 <HAL_NOR_Init+0xf0>)
 8002b04:	2201      	movs	r2, #1
 8002b06:	601a      	str	r2, [r3, #0]
  }

  /* Enable FMC Peripheral */
  __FMC_ENABLE();
 8002b08:	4b17      	ldr	r3, [pc, #92]	; (8002b68 <HAL_NOR_Init+0xf4>)
 8002b0a:	681b      	ldr	r3, [r3, #0]
 8002b0c:	4a16      	ldr	r2, [pc, #88]	; (8002b68 <HAL_NOR_Init+0xf4>)
 8002b0e:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8002b12:	6013      	str	r3, [r2, #0]

  /* Initialize the NOR controller state */
  hnor->State = HAL_NOR_STATE_READY;
 8002b14:	68fb      	ldr	r3, [r7, #12]
 8002b16:	2201      	movs	r2, #1
 8002b18:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Select the NOR device address */
  if (hnor->Init.NSBank == FMC_NORSRAM_BANK1)
 8002b1c:	68fb      	ldr	r3, [r7, #12]
 8002b1e:	689b      	ldr	r3, [r3, #8]
 8002b20:	2b00      	cmp	r3, #0
 8002b22:	d103      	bne.n	8002b2c <HAL_NOR_Init+0xb8>
  {
    deviceaddress = NOR_MEMORY_ADRESS1;
 8002b24:	f04f 43c0 	mov.w	r3, #1610612736	; 0x60000000
 8002b28:	617b      	str	r3, [r7, #20]
 8002b2a:	e012      	b.n	8002b52 <HAL_NOR_Init+0xde>
  }
  else if (hnor->Init.NSBank == FMC_NORSRAM_BANK2)
 8002b2c:	68fb      	ldr	r3, [r7, #12]
 8002b2e:	689b      	ldr	r3, [r3, #8]
 8002b30:	2b02      	cmp	r3, #2
 8002b32:	d103      	bne.n	8002b3c <HAL_NOR_Init+0xc8>
  {
    deviceaddress = NOR_MEMORY_ADRESS2;
 8002b34:	f04f 43c8 	mov.w	r3, #1677721600	; 0x64000000
 8002b38:	617b      	str	r3, [r7, #20]
 8002b3a:	e00a      	b.n	8002b52 <HAL_NOR_Init+0xde>
  }
  else if (hnor->Init.NSBank == FMC_NORSRAM_BANK3)
 8002b3c:	68fb      	ldr	r3, [r7, #12]
 8002b3e:	689b      	ldr	r3, [r3, #8]
 8002b40:	2b04      	cmp	r3, #4
 8002b42:	d103      	bne.n	8002b4c <HAL_NOR_Init+0xd8>
  {
    deviceaddress = NOR_MEMORY_ADRESS3;
 8002b44:	f04f 43d0 	mov.w	r3, #1744830464	; 0x68000000
 8002b48:	617b      	str	r3, [r7, #20]
 8002b4a:	e002      	b.n	8002b52 <HAL_NOR_Init+0xde>
  }
  else /* FMC_NORSRAM_BANK4 */
  {
    deviceaddress = NOR_MEMORY_ADRESS4;
 8002b4c:	f04f 43d8 	mov.w	r3, #1811939328	; 0x6c000000
 8002b50:	617b      	str	r3, [r7, #20]

  /* Get the value of the command set */
  //NOR_WRITE(NOR_ADDR_SHIFT(deviceaddress, uwNORMemoryDataWidth, NOR_CMD_ADDRESS_FIRST_CFI), NOR_CMD_DATA_CFI);
  //hnor->CommandSet = *(__IO uint16_t *) NOR_ADDR_SHIFT(deviceaddress, uwNORMemoryDataWidth, NOR_ADDRESS_COMMAND_SET);

  return HAL_NOR_ReturnToReadMode(hnor);
 8002b52:	68f8      	ldr	r0, [r7, #12]
 8002b54:	f000 f80a 	bl	8002b6c <HAL_NOR_ReturnToReadMode>
 8002b58:	4603      	mov	r3, r0
}
 8002b5a:	4618      	mov	r0, r3
 8002b5c:	3718      	adds	r7, #24
 8002b5e:	46bd      	mov	sp, r7
 8002b60:	bd80      	pop	{r7, pc}
 8002b62:	bf00      	nop
 8002b64:	20000138 	.word	0x20000138
 8002b68:	52004000 	.word	0x52004000

08002b6c <HAL_NOR_ReturnToReadMode>:
  * @param  hnor pointer to a NOR_HandleTypeDef structure that contains
  *                the configuration information for NOR module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_NOR_ReturnToReadMode(NOR_HandleTypeDef *hnor)
{
 8002b6c:	b480      	push	{r7}
 8002b6e:	b085      	sub	sp, #20
 8002b70:	af00      	add	r7, sp, #0
 8002b72:	6078      	str	r0, [r7, #4]
  uint32_t deviceaddress;
  HAL_NOR_StateTypeDef state;
  HAL_StatusTypeDef status = HAL_OK;
 8002b74:	2300      	movs	r3, #0
 8002b76:	72fb      	strb	r3, [r7, #11]

  /* Check the NOR controller state */
  state = hnor->State;
 8002b78:	687b      	ldr	r3, [r7, #4]
 8002b7a:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8002b7e:	72bb      	strb	r3, [r7, #10]
  if (state == HAL_NOR_STATE_BUSY)
 8002b80:	7abb      	ldrb	r3, [r7, #10]
 8002b82:	2b02      	cmp	r3, #2
 8002b84:	d101      	bne.n	8002b8a <HAL_NOR_ReturnToReadMode+0x1e>
  {
    return HAL_BUSY;
 8002b86:	2302      	movs	r3, #2
 8002b88:	e04e      	b.n	8002c28 <HAL_NOR_ReturnToReadMode+0xbc>
  }
  else if ((state == HAL_NOR_STATE_READY) || (state == HAL_NOR_STATE_PROTECTED))
 8002b8a:	7abb      	ldrb	r3, [r7, #10]
 8002b8c:	2b01      	cmp	r3, #1
 8002b8e:	d002      	beq.n	8002b96 <HAL_NOR_ReturnToReadMode+0x2a>
 8002b90:	7abb      	ldrb	r3, [r7, #10]
 8002b92:	2b04      	cmp	r3, #4
 8002b94:	d147      	bne.n	8002c26 <HAL_NOR_ReturnToReadMode+0xba>
  {
    /* Process Locked */
    __HAL_LOCK(hnor);
 8002b96:	687b      	ldr	r3, [r7, #4]
 8002b98:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8002b9c:	2b01      	cmp	r3, #1
 8002b9e:	d101      	bne.n	8002ba4 <HAL_NOR_ReturnToReadMode+0x38>
 8002ba0:	2302      	movs	r3, #2
 8002ba2:	e041      	b.n	8002c28 <HAL_NOR_ReturnToReadMode+0xbc>
 8002ba4:	687b      	ldr	r3, [r7, #4]
 8002ba6:	2201      	movs	r2, #1
 8002ba8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44

    /* Update the NOR controller state */
    hnor->State = HAL_NOR_STATE_BUSY;
 8002bac:	687b      	ldr	r3, [r7, #4]
 8002bae:	2202      	movs	r2, #2
 8002bb0:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

    /* Select the NOR device address */
    if (hnor->Init.NSBank == FMC_NORSRAM_BANK1)
 8002bb4:	687b      	ldr	r3, [r7, #4]
 8002bb6:	689b      	ldr	r3, [r3, #8]
 8002bb8:	2b00      	cmp	r3, #0
 8002bba:	d103      	bne.n	8002bc4 <HAL_NOR_ReturnToReadMode+0x58>
    {
      deviceaddress = NOR_MEMORY_ADRESS1;
 8002bbc:	f04f 43c0 	mov.w	r3, #1610612736	; 0x60000000
 8002bc0:	60fb      	str	r3, [r7, #12]
 8002bc2:	e012      	b.n	8002bea <HAL_NOR_ReturnToReadMode+0x7e>
    }
    else if (hnor->Init.NSBank == FMC_NORSRAM_BANK2)
 8002bc4:	687b      	ldr	r3, [r7, #4]
 8002bc6:	689b      	ldr	r3, [r3, #8]
 8002bc8:	2b02      	cmp	r3, #2
 8002bca:	d103      	bne.n	8002bd4 <HAL_NOR_ReturnToReadMode+0x68>
    {
      deviceaddress = NOR_MEMORY_ADRESS2;
 8002bcc:	f04f 43c8 	mov.w	r3, #1677721600	; 0x64000000
 8002bd0:	60fb      	str	r3, [r7, #12]
 8002bd2:	e00a      	b.n	8002bea <HAL_NOR_ReturnToReadMode+0x7e>
    }
    else if (hnor->Init.NSBank == FMC_NORSRAM_BANK3)
 8002bd4:	687b      	ldr	r3, [r7, #4]
 8002bd6:	689b      	ldr	r3, [r3, #8]
 8002bd8:	2b04      	cmp	r3, #4
 8002bda:	d103      	bne.n	8002be4 <HAL_NOR_ReturnToReadMode+0x78>
    {
      deviceaddress = NOR_MEMORY_ADRESS3;
 8002bdc:	f04f 43d0 	mov.w	r3, #1744830464	; 0x68000000
 8002be0:	60fb      	str	r3, [r7, #12]
 8002be2:	e002      	b.n	8002bea <HAL_NOR_ReturnToReadMode+0x7e>
    }
    else /* FMC_NORSRAM_BANK4 */
    {
      deviceaddress = NOR_MEMORY_ADRESS4;
 8002be4:	f04f 43d8 	mov.w	r3, #1811939328	; 0x6c000000
 8002be8:	60fb      	str	r3, [r7, #12]
    }

    if (hnor->CommandSet == NOR_AMD_FUJITSU_COMMAND_SET)
 8002bea:	687b      	ldr	r3, [r7, #4]
 8002bec:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002bee:	2b02      	cmp	r3, #2
 8002bf0:	d105      	bne.n	8002bfe <HAL_NOR_ReturnToReadMode+0x92>
    {
      NOR_WRITE(deviceaddress, NOR_CMD_DATA_READ_RESET);
 8002bf2:	68fb      	ldr	r3, [r7, #12]
 8002bf4:	22f0      	movs	r2, #240	; 0xf0
 8002bf6:	801a      	strh	r2, [r3, #0]
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 8002bf8:	f3bf 8f4f 	dsb	sy
}
 8002bfc:	e009      	b.n	8002c12 <HAL_NOR_ReturnToReadMode+0xa6>
    }
    else if (hnor->CommandSet == NOR_INTEL_SHARP_EXT_COMMAND_SET)
 8002bfe:	687b      	ldr	r3, [r7, #4]
 8002c00:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002c02:	2b01      	cmp	r3, #1
 8002c04:	d105      	bne.n	8002c12 <HAL_NOR_ReturnToReadMode+0xa6>
    {
      NOR_WRITE(deviceaddress, NOR_CMD_READ_ARRAY);
 8002c06:	68fb      	ldr	r3, [r7, #12]
 8002c08:	22ff      	movs	r2, #255	; 0xff
 8002c0a:	801a      	strh	r2, [r3, #0]
  __ASM volatile ("dsb 0xF":::"memory");
 8002c0c:	f3bf 8f4f 	dsb	sy
}
 8002c10:	bf00      	nop
      /* Primary command set not supported by the driver */
      //status = HAL_ERROR;
    }

    /* Check the NOR controller state */
    hnor->State = state;
 8002c12:	687b      	ldr	r3, [r7, #4]
 8002c14:	7aba      	ldrb	r2, [r7, #10]
 8002c16:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

    /* Process unlocked */
    __HAL_UNLOCK(hnor);
 8002c1a:	687b      	ldr	r3, [r7, #4]
 8002c1c:	2200      	movs	r2, #0
 8002c1e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  else
  {
    return HAL_ERROR;
  }

  return status;
 8002c22:	7afb      	ldrb	r3, [r7, #11]
 8002c24:	e000      	b.n	8002c28 <HAL_NOR_ReturnToReadMode+0xbc>
    return HAL_ERROR;
 8002c26:	2301      	movs	r3, #1
}
 8002c28:	4618      	mov	r0, r3
 8002c2a:	3714      	adds	r7, #20
 8002c2c:	46bd      	mov	sp, r7
 8002c2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c32:	4770      	bx	lr

08002c34 <HAL_PWREx_ConfigSupply>:
  *         PWR_SMPS_2V5_SUPPLIES_EXT are used only for lines that supports SMPS
  *         regulator.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply (uint32_t SupplySource)
{
 8002c34:	b580      	push	{r7, lr}
 8002c36:	b084      	sub	sp, #16
 8002c38:	af00      	add	r7, sp, #0
 8002c3a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param (IS_PWR_SUPPLY (SupplySource));

  /* Check if supply source was configured */
#if defined (PWR_FLAG_SCUEN)
  if (__HAL_PWR_GET_FLAG (PWR_FLAG_SCUEN) == 0U)
 8002c3c:	4b19      	ldr	r3, [pc, #100]	; (8002ca4 <HAL_PWREx_ConfigSupply+0x70>)
 8002c3e:	68db      	ldr	r3, [r3, #12]
 8002c40:	f003 0304 	and.w	r3, r3, #4
 8002c44:	2b04      	cmp	r3, #4
 8002c46:	d00a      	beq.n	8002c5e <HAL_PWREx_ConfigSupply+0x2a>
#else
  if ((PWR->CR3 & (PWR_CR3_SMPSEN | PWR_CR3_LDOEN | PWR_CR3_BYPASS)) != (PWR_CR3_SMPSEN | PWR_CR3_LDOEN))
#endif /* defined (PWR_FLAG_SCUEN) */
  {
    /* Check supply configuration */
    if ((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
 8002c48:	4b16      	ldr	r3, [pc, #88]	; (8002ca4 <HAL_PWREx_ConfigSupply+0x70>)
 8002c4a:	68db      	ldr	r3, [r3, #12]
 8002c4c:	f003 0307 	and.w	r3, r3, #7
 8002c50:	687a      	ldr	r2, [r7, #4]
 8002c52:	429a      	cmp	r2, r3
 8002c54:	d001      	beq.n	8002c5a <HAL_PWREx_ConfigSupply+0x26>
    {
      /* Supply configuration update locked, can't apply a new supply config */
      return HAL_ERROR;
 8002c56:	2301      	movs	r3, #1
 8002c58:	e01f      	b.n	8002c9a <HAL_PWREx_ConfigSupply+0x66>
    else
    {
      /* Supply configuration update locked, but new supply configuration
         matches with old supply configuration : nothing to do
      */
      return HAL_OK;
 8002c5a:	2300      	movs	r3, #0
 8002c5c:	e01d      	b.n	8002c9a <HAL_PWREx_ConfigSupply+0x66>
    }
  }

  /* Set the power supply configuration */
  MODIFY_REG (PWR->CR3, PWR_SUPPLY_CONFIG_MASK, SupplySource);
 8002c5e:	4b11      	ldr	r3, [pc, #68]	; (8002ca4 <HAL_PWREx_ConfigSupply+0x70>)
 8002c60:	68db      	ldr	r3, [r3, #12]
 8002c62:	f023 0207 	bic.w	r2, r3, #7
 8002c66:	490f      	ldr	r1, [pc, #60]	; (8002ca4 <HAL_PWREx_ConfigSupply+0x70>)
 8002c68:	687b      	ldr	r3, [r7, #4]
 8002c6a:	4313      	orrs	r3, r2
 8002c6c:	60cb      	str	r3, [r1, #12]

  /* Get tick */
  tickstart = HAL_GetTick ();
 8002c6e:	f7fe fd79 	bl	8001764 <HAL_GetTick>
 8002c72:	60f8      	str	r0, [r7, #12]

  /* Wait till voltage level flag is set */
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8002c74:	e009      	b.n	8002c8a <HAL_PWREx_ConfigSupply+0x56>
  {
    if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 8002c76:	f7fe fd75 	bl	8001764 <HAL_GetTick>
 8002c7a:	4602      	mov	r2, r0
 8002c7c:	68fb      	ldr	r3, [r7, #12]
 8002c7e:	1ad3      	subs	r3, r2, r3
 8002c80:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8002c84:	d901      	bls.n	8002c8a <HAL_PWREx_ConfigSupply+0x56>
    {
      return HAL_ERROR;
 8002c86:	2301      	movs	r3, #1
 8002c88:	e007      	b.n	8002c9a <HAL_PWREx_ConfigSupply+0x66>
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8002c8a:	4b06      	ldr	r3, [pc, #24]	; (8002ca4 <HAL_PWREx_ConfigSupply+0x70>)
 8002c8c:	685b      	ldr	r3, [r3, #4]
 8002c8e:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8002c92:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002c96:	d1ee      	bne.n	8002c76 <HAL_PWREx_ConfigSupply+0x42>
      }
    }
  }
#endif /* defined (SMPS) */

  return HAL_OK;
 8002c98:	2300      	movs	r3, #0
}
 8002c9a:	4618      	mov	r0, r3
 8002c9c:	3710      	adds	r7, #16
 8002c9e:	46bd      	mov	sp, r7
 8002ca0:	bd80      	pop	{r7, pc}
 8002ca2:	bf00      	nop
 8002ca4:	58024800 	.word	0x58024800

08002ca8 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002ca8:	b580      	push	{r7, lr}
 8002caa:	b08c      	sub	sp, #48	; 0x30
 8002cac:	af00      	add	r7, sp, #0
 8002cae:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp1_pllckcfg, temp2_pllckcfg;

    /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8002cb0:	687b      	ldr	r3, [r7, #4]
 8002cb2:	2b00      	cmp	r3, #0
 8002cb4:	d101      	bne.n	8002cba <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002cb6:	2301      	movs	r3, #1
 8002cb8:	e37a      	b.n	80033b0 <HAL_RCC_OscConfig+0x708>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002cba:	687b      	ldr	r3, [r7, #4]
 8002cbc:	681b      	ldr	r3, [r3, #0]
 8002cbe:	f003 0301 	and.w	r3, r3, #1
 8002cc2:	2b00      	cmp	r3, #0
 8002cc4:	f000 8087 	beq.w	8002dd6 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002cc8:	4ba0      	ldr	r3, [pc, #640]	; (8002f4c <HAL_RCC_OscConfig+0x2a4>)
 8002cca:	691b      	ldr	r3, [r3, #16]
 8002ccc:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8002cd0:	62fb      	str	r3, [r7, #44]	; 0x2c
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8002cd2:	4b9e      	ldr	r3, [pc, #632]	; (8002f4c <HAL_RCC_OscConfig+0x2a4>)
 8002cd4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002cd6:	62bb      	str	r3, [r7, #40]	; 0x28
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 8002cd8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002cda:	2b10      	cmp	r3, #16
 8002cdc:	d007      	beq.n	8002cee <HAL_RCC_OscConfig+0x46>
 8002cde:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002ce0:	2b18      	cmp	r3, #24
 8002ce2:	d110      	bne.n	8002d06 <HAL_RCC_OscConfig+0x5e>
 8002ce4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002ce6:	f003 0303 	and.w	r3, r3, #3
 8002cea:	2b02      	cmp	r3, #2
 8002cec:	d10b      	bne.n	8002d06 <HAL_RCC_OscConfig+0x5e>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002cee:	4b97      	ldr	r3, [pc, #604]	; (8002f4c <HAL_RCC_OscConfig+0x2a4>)
 8002cf0:	681b      	ldr	r3, [r3, #0]
 8002cf2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002cf6:	2b00      	cmp	r3, #0
 8002cf8:	d06c      	beq.n	8002dd4 <HAL_RCC_OscConfig+0x12c>
 8002cfa:	687b      	ldr	r3, [r7, #4]
 8002cfc:	685b      	ldr	r3, [r3, #4]
 8002cfe:	2b00      	cmp	r3, #0
 8002d00:	d168      	bne.n	8002dd4 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8002d02:	2301      	movs	r3, #1
 8002d04:	e354      	b.n	80033b0 <HAL_RCC_OscConfig+0x708>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002d06:	687b      	ldr	r3, [r7, #4]
 8002d08:	685b      	ldr	r3, [r3, #4]
 8002d0a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002d0e:	d106      	bne.n	8002d1e <HAL_RCC_OscConfig+0x76>
 8002d10:	4b8e      	ldr	r3, [pc, #568]	; (8002f4c <HAL_RCC_OscConfig+0x2a4>)
 8002d12:	681b      	ldr	r3, [r3, #0]
 8002d14:	4a8d      	ldr	r2, [pc, #564]	; (8002f4c <HAL_RCC_OscConfig+0x2a4>)
 8002d16:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002d1a:	6013      	str	r3, [r2, #0]
 8002d1c:	e02e      	b.n	8002d7c <HAL_RCC_OscConfig+0xd4>
 8002d1e:	687b      	ldr	r3, [r7, #4]
 8002d20:	685b      	ldr	r3, [r3, #4]
 8002d22:	2b00      	cmp	r3, #0
 8002d24:	d10c      	bne.n	8002d40 <HAL_RCC_OscConfig+0x98>
 8002d26:	4b89      	ldr	r3, [pc, #548]	; (8002f4c <HAL_RCC_OscConfig+0x2a4>)
 8002d28:	681b      	ldr	r3, [r3, #0]
 8002d2a:	4a88      	ldr	r2, [pc, #544]	; (8002f4c <HAL_RCC_OscConfig+0x2a4>)
 8002d2c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002d30:	6013      	str	r3, [r2, #0]
 8002d32:	4b86      	ldr	r3, [pc, #536]	; (8002f4c <HAL_RCC_OscConfig+0x2a4>)
 8002d34:	681b      	ldr	r3, [r3, #0]
 8002d36:	4a85      	ldr	r2, [pc, #532]	; (8002f4c <HAL_RCC_OscConfig+0x2a4>)
 8002d38:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002d3c:	6013      	str	r3, [r2, #0]
 8002d3e:	e01d      	b.n	8002d7c <HAL_RCC_OscConfig+0xd4>
 8002d40:	687b      	ldr	r3, [r7, #4]
 8002d42:	685b      	ldr	r3, [r3, #4]
 8002d44:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002d48:	d10c      	bne.n	8002d64 <HAL_RCC_OscConfig+0xbc>
 8002d4a:	4b80      	ldr	r3, [pc, #512]	; (8002f4c <HAL_RCC_OscConfig+0x2a4>)
 8002d4c:	681b      	ldr	r3, [r3, #0]
 8002d4e:	4a7f      	ldr	r2, [pc, #508]	; (8002f4c <HAL_RCC_OscConfig+0x2a4>)
 8002d50:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002d54:	6013      	str	r3, [r2, #0]
 8002d56:	4b7d      	ldr	r3, [pc, #500]	; (8002f4c <HAL_RCC_OscConfig+0x2a4>)
 8002d58:	681b      	ldr	r3, [r3, #0]
 8002d5a:	4a7c      	ldr	r2, [pc, #496]	; (8002f4c <HAL_RCC_OscConfig+0x2a4>)
 8002d5c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002d60:	6013      	str	r3, [r2, #0]
 8002d62:	e00b      	b.n	8002d7c <HAL_RCC_OscConfig+0xd4>
 8002d64:	4b79      	ldr	r3, [pc, #484]	; (8002f4c <HAL_RCC_OscConfig+0x2a4>)
 8002d66:	681b      	ldr	r3, [r3, #0]
 8002d68:	4a78      	ldr	r2, [pc, #480]	; (8002f4c <HAL_RCC_OscConfig+0x2a4>)
 8002d6a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002d6e:	6013      	str	r3, [r2, #0]
 8002d70:	4b76      	ldr	r3, [pc, #472]	; (8002f4c <HAL_RCC_OscConfig+0x2a4>)
 8002d72:	681b      	ldr	r3, [r3, #0]
 8002d74:	4a75      	ldr	r2, [pc, #468]	; (8002f4c <HAL_RCC_OscConfig+0x2a4>)
 8002d76:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002d7a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002d7c:	687b      	ldr	r3, [r7, #4]
 8002d7e:	685b      	ldr	r3, [r3, #4]
 8002d80:	2b00      	cmp	r3, #0
 8002d82:	d013      	beq.n	8002dac <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002d84:	f7fe fcee 	bl	8001764 <HAL_GetTick>
 8002d88:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8002d8a:	e008      	b.n	8002d9e <HAL_RCC_OscConfig+0xf6>
        {
          if((uint32_t) (HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002d8c:	f7fe fcea 	bl	8001764 <HAL_GetTick>
 8002d90:	4602      	mov	r2, r0
 8002d92:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002d94:	1ad3      	subs	r3, r2, r3
 8002d96:	2b64      	cmp	r3, #100	; 0x64
 8002d98:	d901      	bls.n	8002d9e <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8002d9a:	2303      	movs	r3, #3
 8002d9c:	e308      	b.n	80033b0 <HAL_RCC_OscConfig+0x708>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8002d9e:	4b6b      	ldr	r3, [pc, #428]	; (8002f4c <HAL_RCC_OscConfig+0x2a4>)
 8002da0:	681b      	ldr	r3, [r3, #0]
 8002da2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002da6:	2b00      	cmp	r3, #0
 8002da8:	d0f0      	beq.n	8002d8c <HAL_RCC_OscConfig+0xe4>
 8002daa:	e014      	b.n	8002dd6 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002dac:	f7fe fcda 	bl	8001764 <HAL_GetTick>
 8002db0:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8002db2:	e008      	b.n	8002dc6 <HAL_RCC_OscConfig+0x11e>
        {
          if((uint32_t) (HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002db4:	f7fe fcd6 	bl	8001764 <HAL_GetTick>
 8002db8:	4602      	mov	r2, r0
 8002dba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002dbc:	1ad3      	subs	r3, r2, r3
 8002dbe:	2b64      	cmp	r3, #100	; 0x64
 8002dc0:	d901      	bls.n	8002dc6 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8002dc2:	2303      	movs	r3, #3
 8002dc4:	e2f4      	b.n	80033b0 <HAL_RCC_OscConfig+0x708>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8002dc6:	4b61      	ldr	r3, [pc, #388]	; (8002f4c <HAL_RCC_OscConfig+0x2a4>)
 8002dc8:	681b      	ldr	r3, [r3, #0]
 8002dca:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002dce:	2b00      	cmp	r3, #0
 8002dd0:	d1f0      	bne.n	8002db4 <HAL_RCC_OscConfig+0x10c>
 8002dd2:	e000      	b.n	8002dd6 <HAL_RCC_OscConfig+0x12e>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002dd4:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002dd6:	687b      	ldr	r3, [r7, #4]
 8002dd8:	681b      	ldr	r3, [r3, #0]
 8002dda:	f003 0302 	and.w	r3, r3, #2
 8002dde:	2b00      	cmp	r3, #0
 8002de0:	d06d      	beq.n	8002ebe <HAL_RCC_OscConfig+0x216>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSICALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* When the HSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002de2:	4b5a      	ldr	r3, [pc, #360]	; (8002f4c <HAL_RCC_OscConfig+0x2a4>)
 8002de4:	691b      	ldr	r3, [r3, #16]
 8002de6:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8002dea:	623b      	str	r3, [r7, #32]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8002dec:	4b57      	ldr	r3, [pc, #348]	; (8002f4c <HAL_RCC_OscConfig+0x2a4>)
 8002dee:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002df0:	61fb      	str	r3, [r7, #28]
    if((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 8002df2:	6a3b      	ldr	r3, [r7, #32]
 8002df4:	2b00      	cmp	r3, #0
 8002df6:	d007      	beq.n	8002e08 <HAL_RCC_OscConfig+0x160>
 8002df8:	6a3b      	ldr	r3, [r7, #32]
 8002dfa:	2b18      	cmp	r3, #24
 8002dfc:	d11b      	bne.n	8002e36 <HAL_RCC_OscConfig+0x18e>
 8002dfe:	69fb      	ldr	r3, [r7, #28]
 8002e00:	f003 0303 	and.w	r3, r3, #3
 8002e04:	2b00      	cmp	r3, #0
 8002e06:	d116      	bne.n	8002e36 <HAL_RCC_OscConfig+0x18e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8002e08:	4b50      	ldr	r3, [pc, #320]	; (8002f4c <HAL_RCC_OscConfig+0x2a4>)
 8002e0a:	681b      	ldr	r3, [r3, #0]
 8002e0c:	f003 0304 	and.w	r3, r3, #4
 8002e10:	2b00      	cmp	r3, #0
 8002e12:	d005      	beq.n	8002e20 <HAL_RCC_OscConfig+0x178>
 8002e14:	687b      	ldr	r3, [r7, #4]
 8002e16:	68db      	ldr	r3, [r3, #12]
 8002e18:	2b00      	cmp	r3, #0
 8002e1a:	d101      	bne.n	8002e20 <HAL_RCC_OscConfig+0x178>
      {
        return HAL_ERROR;
 8002e1c:	2301      	movs	r3, #1
 8002e1e:	e2c7      	b.n	80033b0 <HAL_RCC_OscConfig+0x708>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002e20:	4b4a      	ldr	r3, [pc, #296]	; (8002f4c <HAL_RCC_OscConfig+0x2a4>)
 8002e22:	685b      	ldr	r3, [r3, #4]
 8002e24:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8002e28:	687b      	ldr	r3, [r7, #4]
 8002e2a:	691b      	ldr	r3, [r3, #16]
 8002e2c:	061b      	lsls	r3, r3, #24
 8002e2e:	4947      	ldr	r1, [pc, #284]	; (8002f4c <HAL_RCC_OscConfig+0x2a4>)
 8002e30:	4313      	orrs	r3, r2
 8002e32:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8002e34:	e043      	b.n	8002ebe <HAL_RCC_OscConfig+0x216>
    }

    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8002e36:	687b      	ldr	r3, [r7, #4]
 8002e38:	68db      	ldr	r3, [r3, #12]
 8002e3a:	2b00      	cmp	r3, #0
 8002e3c:	d026      	beq.n	8002e8c <HAL_RCC_OscConfig+0x1e4>
      {
     /* Enable the Internal High Speed oscillator (HSI, HSIDIV2,HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 8002e3e:	4b43      	ldr	r3, [pc, #268]	; (8002f4c <HAL_RCC_OscConfig+0x2a4>)
 8002e40:	681b      	ldr	r3, [r3, #0]
 8002e42:	f023 0219 	bic.w	r2, r3, #25
 8002e46:	687b      	ldr	r3, [r7, #4]
 8002e48:	68db      	ldr	r3, [r3, #12]
 8002e4a:	4940      	ldr	r1, [pc, #256]	; (8002f4c <HAL_RCC_OscConfig+0x2a4>)
 8002e4c:	4313      	orrs	r3, r2
 8002e4e:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002e50:	f7fe fc88 	bl	8001764 <HAL_GetTick>
 8002e54:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8002e56:	e008      	b.n	8002e6a <HAL_RCC_OscConfig+0x1c2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002e58:	f7fe fc84 	bl	8001764 <HAL_GetTick>
 8002e5c:	4602      	mov	r2, r0
 8002e5e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002e60:	1ad3      	subs	r3, r2, r3
 8002e62:	2b02      	cmp	r3, #2
 8002e64:	d901      	bls.n	8002e6a <HAL_RCC_OscConfig+0x1c2>
          {
            return HAL_TIMEOUT;
 8002e66:	2303      	movs	r3, #3
 8002e68:	e2a2      	b.n	80033b0 <HAL_RCC_OscConfig+0x708>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8002e6a:	4b38      	ldr	r3, [pc, #224]	; (8002f4c <HAL_RCC_OscConfig+0x2a4>)
 8002e6c:	681b      	ldr	r3, [r3, #0]
 8002e6e:	f003 0304 	and.w	r3, r3, #4
 8002e72:	2b00      	cmp	r3, #0
 8002e74:	d0f0      	beq.n	8002e58 <HAL_RCC_OscConfig+0x1b0>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002e76:	4b35      	ldr	r3, [pc, #212]	; (8002f4c <HAL_RCC_OscConfig+0x2a4>)
 8002e78:	685b      	ldr	r3, [r3, #4]
 8002e7a:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8002e7e:	687b      	ldr	r3, [r7, #4]
 8002e80:	691b      	ldr	r3, [r3, #16]
 8002e82:	061b      	lsls	r3, r3, #24
 8002e84:	4931      	ldr	r1, [pc, #196]	; (8002f4c <HAL_RCC_OscConfig+0x2a4>)
 8002e86:	4313      	orrs	r3, r2
 8002e88:	604b      	str	r3, [r1, #4]
 8002e8a:	e018      	b.n	8002ebe <HAL_RCC_OscConfig+0x216>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002e8c:	4b2f      	ldr	r3, [pc, #188]	; (8002f4c <HAL_RCC_OscConfig+0x2a4>)
 8002e8e:	681b      	ldr	r3, [r3, #0]
 8002e90:	4a2e      	ldr	r2, [pc, #184]	; (8002f4c <HAL_RCC_OscConfig+0x2a4>)
 8002e92:	f023 0301 	bic.w	r3, r3, #1
 8002e96:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002e98:	f7fe fc64 	bl	8001764 <HAL_GetTick>
 8002e9c:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8002e9e:	e008      	b.n	8002eb2 <HAL_RCC_OscConfig+0x20a>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002ea0:	f7fe fc60 	bl	8001764 <HAL_GetTick>
 8002ea4:	4602      	mov	r2, r0
 8002ea6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002ea8:	1ad3      	subs	r3, r2, r3
 8002eaa:	2b02      	cmp	r3, #2
 8002eac:	d901      	bls.n	8002eb2 <HAL_RCC_OscConfig+0x20a>
          {
            return HAL_TIMEOUT;
 8002eae:	2303      	movs	r3, #3
 8002eb0:	e27e      	b.n	80033b0 <HAL_RCC_OscConfig+0x708>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8002eb2:	4b26      	ldr	r3, [pc, #152]	; (8002f4c <HAL_RCC_OscConfig+0x2a4>)
 8002eb4:	681b      	ldr	r3, [r3, #0]
 8002eb6:	f003 0304 	and.w	r3, r3, #4
 8002eba:	2b00      	cmp	r3, #0
 8002ebc:	d1f0      	bne.n	8002ea0 <HAL_RCC_OscConfig+0x1f8>
        }
      }
    }
  }
  /*----------------------------- CSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 8002ebe:	687b      	ldr	r3, [r7, #4]
 8002ec0:	681b      	ldr	r3, [r3, #0]
 8002ec2:	f003 0310 	and.w	r3, r3, #16
 8002ec6:	2b00      	cmp	r3, #0
 8002ec8:	d06c      	beq.n	8002fa4 <HAL_RCC_OscConfig+0x2fc>
    /* Check the parameters */
    assert_param(IS_RCC_CSI(RCC_OscInitStruct->CSIState));
    assert_param(IS_RCC_CSICALIBRATION_VALUE(RCC_OscInitStruct->CSICalibrationValue));

    /* When the CSI is used as system clock it will not disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002eca:	4b20      	ldr	r3, [pc, #128]	; (8002f4c <HAL_RCC_OscConfig+0x2a4>)
 8002ecc:	691b      	ldr	r3, [r3, #16]
 8002ece:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8002ed2:	61bb      	str	r3, [r7, #24]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8002ed4:	4b1d      	ldr	r3, [pc, #116]	; (8002f4c <HAL_RCC_OscConfig+0x2a4>)
 8002ed6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002ed8:	617b      	str	r3, [r7, #20]
    if((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 8002eda:	69bb      	ldr	r3, [r7, #24]
 8002edc:	2b08      	cmp	r3, #8
 8002ede:	d007      	beq.n	8002ef0 <HAL_RCC_OscConfig+0x248>
 8002ee0:	69bb      	ldr	r3, [r7, #24]
 8002ee2:	2b18      	cmp	r3, #24
 8002ee4:	d11b      	bne.n	8002f1e <HAL_RCC_OscConfig+0x276>
 8002ee6:	697b      	ldr	r3, [r7, #20]
 8002ee8:	f003 0303 	and.w	r3, r3, #3
 8002eec:	2b01      	cmp	r3, #1
 8002eee:	d116      	bne.n	8002f1e <HAL_RCC_OscConfig+0x276>
    {
      /* When CSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8002ef0:	4b16      	ldr	r3, [pc, #88]	; (8002f4c <HAL_RCC_OscConfig+0x2a4>)
 8002ef2:	681b      	ldr	r3, [r3, #0]
 8002ef4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002ef8:	2b00      	cmp	r3, #0
 8002efa:	d005      	beq.n	8002f08 <HAL_RCC_OscConfig+0x260>
 8002efc:	687b      	ldr	r3, [r7, #4]
 8002efe:	69db      	ldr	r3, [r3, #28]
 8002f00:	2b80      	cmp	r3, #128	; 0x80
 8002f02:	d001      	beq.n	8002f08 <HAL_RCC_OscConfig+0x260>
      {
        return HAL_ERROR;
 8002f04:	2301      	movs	r3, #1
 8002f06:	e253      	b.n	80033b0 <HAL_RCC_OscConfig+0x708>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8002f08:	4b10      	ldr	r3, [pc, #64]	; (8002f4c <HAL_RCC_OscConfig+0x2a4>)
 8002f0a:	68db      	ldr	r3, [r3, #12]
 8002f0c:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 8002f10:	687b      	ldr	r3, [r7, #4]
 8002f12:	6a1b      	ldr	r3, [r3, #32]
 8002f14:	061b      	lsls	r3, r3, #24
 8002f16:	490d      	ldr	r1, [pc, #52]	; (8002f4c <HAL_RCC_OscConfig+0x2a4>)
 8002f18:	4313      	orrs	r3, r2
 8002f1a:	60cb      	str	r3, [r1, #12]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8002f1c:	e042      	b.n	8002fa4 <HAL_RCC_OscConfig+0x2fc>
      }
    }
    else
    {
      /* Check the CSI State */
      if((RCC_OscInitStruct->CSIState)!= RCC_CSI_OFF)
 8002f1e:	687b      	ldr	r3, [r7, #4]
 8002f20:	69db      	ldr	r3, [r3, #28]
 8002f22:	2b00      	cmp	r3, #0
 8002f24:	d025      	beq.n	8002f72 <HAL_RCC_OscConfig+0x2ca>
      {
        /* Enable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_ENABLE();
 8002f26:	4b09      	ldr	r3, [pc, #36]	; (8002f4c <HAL_RCC_OscConfig+0x2a4>)
 8002f28:	681b      	ldr	r3, [r3, #0]
 8002f2a:	4a08      	ldr	r2, [pc, #32]	; (8002f4c <HAL_RCC_OscConfig+0x2a4>)
 8002f2c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002f30:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002f32:	f7fe fc17 	bl	8001764 <HAL_GetTick>
 8002f36:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8002f38:	e00a      	b.n	8002f50 <HAL_RCC_OscConfig+0x2a8>
        {
          if((HAL_GetTick() - tickstart ) > CSI_TIMEOUT_VALUE)
 8002f3a:	f7fe fc13 	bl	8001764 <HAL_GetTick>
 8002f3e:	4602      	mov	r2, r0
 8002f40:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002f42:	1ad3      	subs	r3, r2, r3
 8002f44:	2b02      	cmp	r3, #2
 8002f46:	d903      	bls.n	8002f50 <HAL_RCC_OscConfig+0x2a8>
          {
            return HAL_TIMEOUT;
 8002f48:	2303      	movs	r3, #3
 8002f4a:	e231      	b.n	80033b0 <HAL_RCC_OscConfig+0x708>
 8002f4c:	58024400 	.word	0x58024400
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8002f50:	4ba3      	ldr	r3, [pc, #652]	; (80031e0 <HAL_RCC_OscConfig+0x538>)
 8002f52:	681b      	ldr	r3, [r3, #0]
 8002f54:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002f58:	2b00      	cmp	r3, #0
 8002f5a:	d0ee      	beq.n	8002f3a <HAL_RCC_OscConfig+0x292>
          }
        }

        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8002f5c:	4ba0      	ldr	r3, [pc, #640]	; (80031e0 <HAL_RCC_OscConfig+0x538>)
 8002f5e:	68db      	ldr	r3, [r3, #12]
 8002f60:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 8002f64:	687b      	ldr	r3, [r7, #4]
 8002f66:	6a1b      	ldr	r3, [r3, #32]
 8002f68:	061b      	lsls	r3, r3, #24
 8002f6a:	499d      	ldr	r1, [pc, #628]	; (80031e0 <HAL_RCC_OscConfig+0x538>)
 8002f6c:	4313      	orrs	r3, r2
 8002f6e:	60cb      	str	r3, [r1, #12]
 8002f70:	e018      	b.n	8002fa4 <HAL_RCC_OscConfig+0x2fc>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_DISABLE();
 8002f72:	4b9b      	ldr	r3, [pc, #620]	; (80031e0 <HAL_RCC_OscConfig+0x538>)
 8002f74:	681b      	ldr	r3, [r3, #0]
 8002f76:	4a9a      	ldr	r2, [pc, #616]	; (80031e0 <HAL_RCC_OscConfig+0x538>)
 8002f78:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8002f7c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002f7e:	f7fe fbf1 	bl	8001764 <HAL_GetTick>
 8002f82:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8002f84:	e008      	b.n	8002f98 <HAL_RCC_OscConfig+0x2f0>
        {
          if((HAL_GetTick() - tickstart ) > CSI_TIMEOUT_VALUE)
 8002f86:	f7fe fbed 	bl	8001764 <HAL_GetTick>
 8002f8a:	4602      	mov	r2, r0
 8002f8c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002f8e:	1ad3      	subs	r3, r2, r3
 8002f90:	2b02      	cmp	r3, #2
 8002f92:	d901      	bls.n	8002f98 <HAL_RCC_OscConfig+0x2f0>
          {
            return HAL_TIMEOUT;
 8002f94:	2303      	movs	r3, #3
 8002f96:	e20b      	b.n	80033b0 <HAL_RCC_OscConfig+0x708>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8002f98:	4b91      	ldr	r3, [pc, #580]	; (80031e0 <HAL_RCC_OscConfig+0x538>)
 8002f9a:	681b      	ldr	r3, [r3, #0]
 8002f9c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002fa0:	2b00      	cmp	r3, #0
 8002fa2:	d1f0      	bne.n	8002f86 <HAL_RCC_OscConfig+0x2de>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002fa4:	687b      	ldr	r3, [r7, #4]
 8002fa6:	681b      	ldr	r3, [r3, #0]
 8002fa8:	f003 0308 	and.w	r3, r3, #8
 8002fac:	2b00      	cmp	r3, #0
 8002fae:	d036      	beq.n	800301e <HAL_RCC_OscConfig+0x376>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8002fb0:	687b      	ldr	r3, [r7, #4]
 8002fb2:	695b      	ldr	r3, [r3, #20]
 8002fb4:	2b00      	cmp	r3, #0
 8002fb6:	d019      	beq.n	8002fec <HAL_RCC_OscConfig+0x344>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002fb8:	4b89      	ldr	r3, [pc, #548]	; (80031e0 <HAL_RCC_OscConfig+0x538>)
 8002fba:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002fbc:	4a88      	ldr	r2, [pc, #544]	; (80031e0 <HAL_RCC_OscConfig+0x538>)
 8002fbe:	f043 0301 	orr.w	r3, r3, #1
 8002fc2:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002fc4:	f7fe fbce 	bl	8001764 <HAL_GetTick>
 8002fc8:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8002fca:	e008      	b.n	8002fde <HAL_RCC_OscConfig+0x336>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002fcc:	f7fe fbca 	bl	8001764 <HAL_GetTick>
 8002fd0:	4602      	mov	r2, r0
 8002fd2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002fd4:	1ad3      	subs	r3, r2, r3
 8002fd6:	2b02      	cmp	r3, #2
 8002fd8:	d901      	bls.n	8002fde <HAL_RCC_OscConfig+0x336>
        {
          return HAL_TIMEOUT;
 8002fda:	2303      	movs	r3, #3
 8002fdc:	e1e8      	b.n	80033b0 <HAL_RCC_OscConfig+0x708>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8002fde:	4b80      	ldr	r3, [pc, #512]	; (80031e0 <HAL_RCC_OscConfig+0x538>)
 8002fe0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002fe2:	f003 0302 	and.w	r3, r3, #2
 8002fe6:	2b00      	cmp	r3, #0
 8002fe8:	d0f0      	beq.n	8002fcc <HAL_RCC_OscConfig+0x324>
 8002fea:	e018      	b.n	800301e <HAL_RCC_OscConfig+0x376>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002fec:	4b7c      	ldr	r3, [pc, #496]	; (80031e0 <HAL_RCC_OscConfig+0x538>)
 8002fee:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002ff0:	4a7b      	ldr	r2, [pc, #492]	; (80031e0 <HAL_RCC_OscConfig+0x538>)
 8002ff2:	f023 0301 	bic.w	r3, r3, #1
 8002ff6:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002ff8:	f7fe fbb4 	bl	8001764 <HAL_GetTick>
 8002ffc:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8002ffe:	e008      	b.n	8003012 <HAL_RCC_OscConfig+0x36a>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003000:	f7fe fbb0 	bl	8001764 <HAL_GetTick>
 8003004:	4602      	mov	r2, r0
 8003006:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003008:	1ad3      	subs	r3, r2, r3
 800300a:	2b02      	cmp	r3, #2
 800300c:	d901      	bls.n	8003012 <HAL_RCC_OscConfig+0x36a>
        {
          return HAL_TIMEOUT;
 800300e:	2303      	movs	r3, #3
 8003010:	e1ce      	b.n	80033b0 <HAL_RCC_OscConfig+0x708>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8003012:	4b73      	ldr	r3, [pc, #460]	; (80031e0 <HAL_RCC_OscConfig+0x538>)
 8003014:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003016:	f003 0302 	and.w	r3, r3, #2
 800301a:	2b00      	cmp	r3, #0
 800301c:	d1f0      	bne.n	8003000 <HAL_RCC_OscConfig+0x358>
      }
    }
  }

  /*------------------------------ HSI48 Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 800301e:	687b      	ldr	r3, [r7, #4]
 8003020:	681b      	ldr	r3, [r3, #0]
 8003022:	f003 0320 	and.w	r3, r3, #32
 8003026:	2b00      	cmp	r3, #0
 8003028:	d036      	beq.n	8003098 <HAL_RCC_OscConfig+0x3f0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if((RCC_OscInitStruct->HSI48State)!= RCC_HSI48_OFF)
 800302a:	687b      	ldr	r3, [r7, #4]
 800302c:	699b      	ldr	r3, [r3, #24]
 800302e:	2b00      	cmp	r3, #0
 8003030:	d019      	beq.n	8003066 <HAL_RCC_OscConfig+0x3be>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8003032:	4b6b      	ldr	r3, [pc, #428]	; (80031e0 <HAL_RCC_OscConfig+0x538>)
 8003034:	681b      	ldr	r3, [r3, #0]
 8003036:	4a6a      	ldr	r2, [pc, #424]	; (80031e0 <HAL_RCC_OscConfig+0x538>)
 8003038:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 800303c:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 800303e:	f7fe fb91 	bl	8001764 <HAL_GetTick>
 8003042:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8003044:	e008      	b.n	8003058 <HAL_RCC_OscConfig+0x3b0>
      {
        if((HAL_GetTick() - tickstart ) > HSI48_TIMEOUT_VALUE)
 8003046:	f7fe fb8d 	bl	8001764 <HAL_GetTick>
 800304a:	4602      	mov	r2, r0
 800304c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800304e:	1ad3      	subs	r3, r2, r3
 8003050:	2b02      	cmp	r3, #2
 8003052:	d901      	bls.n	8003058 <HAL_RCC_OscConfig+0x3b0>
        {
          return HAL_TIMEOUT;
 8003054:	2303      	movs	r3, #3
 8003056:	e1ab      	b.n	80033b0 <HAL_RCC_OscConfig+0x708>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8003058:	4b61      	ldr	r3, [pc, #388]	; (80031e0 <HAL_RCC_OscConfig+0x538>)
 800305a:	681b      	ldr	r3, [r3, #0]
 800305c:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8003060:	2b00      	cmp	r3, #0
 8003062:	d0f0      	beq.n	8003046 <HAL_RCC_OscConfig+0x39e>
 8003064:	e018      	b.n	8003098 <HAL_RCC_OscConfig+0x3f0>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8003066:	4b5e      	ldr	r3, [pc, #376]	; (80031e0 <HAL_RCC_OscConfig+0x538>)
 8003068:	681b      	ldr	r3, [r3, #0]
 800306a:	4a5d      	ldr	r2, [pc, #372]	; (80031e0 <HAL_RCC_OscConfig+0x538>)
 800306c:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8003070:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8003072:	f7fe fb77 	bl	8001764 <HAL_GetTick>
 8003076:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8003078:	e008      	b.n	800308c <HAL_RCC_OscConfig+0x3e4>
      {
        if((HAL_GetTick() - tickstart ) > HSI48_TIMEOUT_VALUE)
 800307a:	f7fe fb73 	bl	8001764 <HAL_GetTick>
 800307e:	4602      	mov	r2, r0
 8003080:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003082:	1ad3      	subs	r3, r2, r3
 8003084:	2b02      	cmp	r3, #2
 8003086:	d901      	bls.n	800308c <HAL_RCC_OscConfig+0x3e4>
        {
          return HAL_TIMEOUT;
 8003088:	2303      	movs	r3, #3
 800308a:	e191      	b.n	80033b0 <HAL_RCC_OscConfig+0x708>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 800308c:	4b54      	ldr	r3, [pc, #336]	; (80031e0 <HAL_RCC_OscConfig+0x538>)
 800308e:	681b      	ldr	r3, [r3, #0]
 8003090:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8003094:	2b00      	cmp	r3, #0
 8003096:	d1f0      	bne.n	800307a <HAL_RCC_OscConfig+0x3d2>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003098:	687b      	ldr	r3, [r7, #4]
 800309a:	681b      	ldr	r3, [r3, #0]
 800309c:	f003 0304 	and.w	r3, r3, #4
 80030a0:	2b00      	cmp	r3, #0
 80030a2:	f000 8081 	beq.w	80031a8 <HAL_RCC_OscConfig+0x500>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 80030a6:	4b4f      	ldr	r3, [pc, #316]	; (80031e4 <HAL_RCC_OscConfig+0x53c>)
 80030a8:	681b      	ldr	r3, [r3, #0]
 80030aa:	4a4e      	ldr	r2, [pc, #312]	; (80031e4 <HAL_RCC_OscConfig+0x53c>)
 80030ac:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80030b0:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 80030b2:	f7fe fb57 	bl	8001764 <HAL_GetTick>
 80030b6:	6278      	str	r0, [r7, #36]	; 0x24

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80030b8:	e008      	b.n	80030cc <HAL_RCC_OscConfig+0x424>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 80030ba:	f7fe fb53 	bl	8001764 <HAL_GetTick>
 80030be:	4602      	mov	r2, r0
 80030c0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80030c2:	1ad3      	subs	r3, r2, r3
 80030c4:	2b64      	cmp	r3, #100	; 0x64
 80030c6:	d901      	bls.n	80030cc <HAL_RCC_OscConfig+0x424>
      {
        return HAL_TIMEOUT;
 80030c8:	2303      	movs	r3, #3
 80030ca:	e171      	b.n	80033b0 <HAL_RCC_OscConfig+0x708>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80030cc:	4b45      	ldr	r3, [pc, #276]	; (80031e4 <HAL_RCC_OscConfig+0x53c>)
 80030ce:	681b      	ldr	r3, [r3, #0]
 80030d0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80030d4:	2b00      	cmp	r3, #0
 80030d6:	d0f0      	beq.n	80030ba <HAL_RCC_OscConfig+0x412>
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80030d8:	687b      	ldr	r3, [r7, #4]
 80030da:	689b      	ldr	r3, [r3, #8]
 80030dc:	2b01      	cmp	r3, #1
 80030de:	d106      	bne.n	80030ee <HAL_RCC_OscConfig+0x446>
 80030e0:	4b3f      	ldr	r3, [pc, #252]	; (80031e0 <HAL_RCC_OscConfig+0x538>)
 80030e2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80030e4:	4a3e      	ldr	r2, [pc, #248]	; (80031e0 <HAL_RCC_OscConfig+0x538>)
 80030e6:	f043 0301 	orr.w	r3, r3, #1
 80030ea:	6713      	str	r3, [r2, #112]	; 0x70
 80030ec:	e02d      	b.n	800314a <HAL_RCC_OscConfig+0x4a2>
 80030ee:	687b      	ldr	r3, [r7, #4]
 80030f0:	689b      	ldr	r3, [r3, #8]
 80030f2:	2b00      	cmp	r3, #0
 80030f4:	d10c      	bne.n	8003110 <HAL_RCC_OscConfig+0x468>
 80030f6:	4b3a      	ldr	r3, [pc, #232]	; (80031e0 <HAL_RCC_OscConfig+0x538>)
 80030f8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80030fa:	4a39      	ldr	r2, [pc, #228]	; (80031e0 <HAL_RCC_OscConfig+0x538>)
 80030fc:	f023 0301 	bic.w	r3, r3, #1
 8003100:	6713      	str	r3, [r2, #112]	; 0x70
 8003102:	4b37      	ldr	r3, [pc, #220]	; (80031e0 <HAL_RCC_OscConfig+0x538>)
 8003104:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003106:	4a36      	ldr	r2, [pc, #216]	; (80031e0 <HAL_RCC_OscConfig+0x538>)
 8003108:	f023 0304 	bic.w	r3, r3, #4
 800310c:	6713      	str	r3, [r2, #112]	; 0x70
 800310e:	e01c      	b.n	800314a <HAL_RCC_OscConfig+0x4a2>
 8003110:	687b      	ldr	r3, [r7, #4]
 8003112:	689b      	ldr	r3, [r3, #8]
 8003114:	2b05      	cmp	r3, #5
 8003116:	d10c      	bne.n	8003132 <HAL_RCC_OscConfig+0x48a>
 8003118:	4b31      	ldr	r3, [pc, #196]	; (80031e0 <HAL_RCC_OscConfig+0x538>)
 800311a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800311c:	4a30      	ldr	r2, [pc, #192]	; (80031e0 <HAL_RCC_OscConfig+0x538>)
 800311e:	f043 0304 	orr.w	r3, r3, #4
 8003122:	6713      	str	r3, [r2, #112]	; 0x70
 8003124:	4b2e      	ldr	r3, [pc, #184]	; (80031e0 <HAL_RCC_OscConfig+0x538>)
 8003126:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003128:	4a2d      	ldr	r2, [pc, #180]	; (80031e0 <HAL_RCC_OscConfig+0x538>)
 800312a:	f043 0301 	orr.w	r3, r3, #1
 800312e:	6713      	str	r3, [r2, #112]	; 0x70
 8003130:	e00b      	b.n	800314a <HAL_RCC_OscConfig+0x4a2>
 8003132:	4b2b      	ldr	r3, [pc, #172]	; (80031e0 <HAL_RCC_OscConfig+0x538>)
 8003134:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003136:	4a2a      	ldr	r2, [pc, #168]	; (80031e0 <HAL_RCC_OscConfig+0x538>)
 8003138:	f023 0301 	bic.w	r3, r3, #1
 800313c:	6713      	str	r3, [r2, #112]	; 0x70
 800313e:	4b28      	ldr	r3, [pc, #160]	; (80031e0 <HAL_RCC_OscConfig+0x538>)
 8003140:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003142:	4a27      	ldr	r2, [pc, #156]	; (80031e0 <HAL_RCC_OscConfig+0x538>)
 8003144:	f023 0304 	bic.w	r3, r3, #4
 8003148:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800314a:	687b      	ldr	r3, [r7, #4]
 800314c:	689b      	ldr	r3, [r3, #8]
 800314e:	2b00      	cmp	r3, #0
 8003150:	d015      	beq.n	800317e <HAL_RCC_OscConfig+0x4d6>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003152:	f7fe fb07 	bl	8001764 <HAL_GetTick>
 8003156:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8003158:	e00a      	b.n	8003170 <HAL_RCC_OscConfig+0x4c8>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800315a:	f7fe fb03 	bl	8001764 <HAL_GetTick>
 800315e:	4602      	mov	r2, r0
 8003160:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003162:	1ad3      	subs	r3, r2, r3
 8003164:	f241 3288 	movw	r2, #5000	; 0x1388
 8003168:	4293      	cmp	r3, r2
 800316a:	d901      	bls.n	8003170 <HAL_RCC_OscConfig+0x4c8>
        {
          return HAL_TIMEOUT;
 800316c:	2303      	movs	r3, #3
 800316e:	e11f      	b.n	80033b0 <HAL_RCC_OscConfig+0x708>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8003170:	4b1b      	ldr	r3, [pc, #108]	; (80031e0 <HAL_RCC_OscConfig+0x538>)
 8003172:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003174:	f003 0302 	and.w	r3, r3, #2
 8003178:	2b00      	cmp	r3, #0
 800317a:	d0ee      	beq.n	800315a <HAL_RCC_OscConfig+0x4b2>
 800317c:	e014      	b.n	80031a8 <HAL_RCC_OscConfig+0x500>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800317e:	f7fe faf1 	bl	8001764 <HAL_GetTick>
 8003182:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is disabled */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8003184:	e00a      	b.n	800319c <HAL_RCC_OscConfig+0x4f4>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003186:	f7fe faed 	bl	8001764 <HAL_GetTick>
 800318a:	4602      	mov	r2, r0
 800318c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800318e:	1ad3      	subs	r3, r2, r3
 8003190:	f241 3288 	movw	r2, #5000	; 0x1388
 8003194:	4293      	cmp	r3, r2
 8003196:	d901      	bls.n	800319c <HAL_RCC_OscConfig+0x4f4>
        {
          return HAL_TIMEOUT;
 8003198:	2303      	movs	r3, #3
 800319a:	e109      	b.n	80033b0 <HAL_RCC_OscConfig+0x708>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 800319c:	4b10      	ldr	r3, [pc, #64]	; (80031e0 <HAL_RCC_OscConfig+0x538>)
 800319e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80031a0:	f003 0302 	and.w	r3, r3, #2
 80031a4:	2b00      	cmp	r3, #0
 80031a6:	d1ee      	bne.n	8003186 <HAL_RCC_OscConfig+0x4de>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80031a8:	687b      	ldr	r3, [r7, #4]
 80031aa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80031ac:	2b00      	cmp	r3, #0
 80031ae:	f000 80fe 	beq.w	80033ae <HAL_RCC_OscConfig+0x706>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL1)
 80031b2:	4b0b      	ldr	r3, [pc, #44]	; (80031e0 <HAL_RCC_OscConfig+0x538>)
 80031b4:	691b      	ldr	r3, [r3, #16]
 80031b6:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80031ba:	2b18      	cmp	r3, #24
 80031bc:	f000 80b9 	beq.w	8003332 <HAL_RCC_OscConfig+0x68a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80031c0:	687b      	ldr	r3, [r7, #4]
 80031c2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80031c4:	2b02      	cmp	r3, #2
 80031c6:	f040 809a 	bne.w	80032fe <HAL_RCC_OscConfig+0x656>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
        assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80031ca:	4b05      	ldr	r3, [pc, #20]	; (80031e0 <HAL_RCC_OscConfig+0x538>)
 80031cc:	681b      	ldr	r3, [r3, #0]
 80031ce:	4a04      	ldr	r2, [pc, #16]	; (80031e0 <HAL_RCC_OscConfig+0x538>)
 80031d0:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80031d4:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80031d6:	f7fe fac5 	bl	8001764 <HAL_GetTick>
 80031da:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 80031dc:	e00d      	b.n	80031fa <HAL_RCC_OscConfig+0x552>
 80031de:	bf00      	nop
 80031e0:	58024400 	.word	0x58024400
 80031e4:	58024800 	.word	0x58024800
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80031e8:	f7fe fabc 	bl	8001764 <HAL_GetTick>
 80031ec:	4602      	mov	r2, r0
 80031ee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80031f0:	1ad3      	subs	r3, r2, r3
 80031f2:	2b02      	cmp	r3, #2
 80031f4:	d901      	bls.n	80031fa <HAL_RCC_OscConfig+0x552>
          {
            return HAL_TIMEOUT;
 80031f6:	2303      	movs	r3, #3
 80031f8:	e0da      	b.n	80033b0 <HAL_RCC_OscConfig+0x708>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 80031fa:	4b6f      	ldr	r3, [pc, #444]	; (80033b8 <HAL_RCC_OscConfig+0x710>)
 80031fc:	681b      	ldr	r3, [r3, #0]
 80031fe:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003202:	2b00      	cmp	r3, #0
 8003204:	d1f0      	bne.n	80031e8 <HAL_RCC_OscConfig+0x540>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8003206:	4b6c      	ldr	r3, [pc, #432]	; (80033b8 <HAL_RCC_OscConfig+0x710>)
 8003208:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800320a:	4b6c      	ldr	r3, [pc, #432]	; (80033bc <HAL_RCC_OscConfig+0x714>)
 800320c:	4013      	ands	r3, r2
 800320e:	687a      	ldr	r2, [r7, #4]
 8003210:	6a91      	ldr	r1, [r2, #40]	; 0x28
 8003212:	687a      	ldr	r2, [r7, #4]
 8003214:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 8003216:	0112      	lsls	r2, r2, #4
 8003218:	430a      	orrs	r2, r1
 800321a:	4967      	ldr	r1, [pc, #412]	; (80033b8 <HAL_RCC_OscConfig+0x710>)
 800321c:	4313      	orrs	r3, r2
 800321e:	628b      	str	r3, [r1, #40]	; 0x28
 8003220:	687b      	ldr	r3, [r7, #4]
 8003222:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003224:	3b01      	subs	r3, #1
 8003226:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800322a:	687b      	ldr	r3, [r7, #4]
 800322c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800322e:	3b01      	subs	r3, #1
 8003230:	025b      	lsls	r3, r3, #9
 8003232:	b29b      	uxth	r3, r3
 8003234:	431a      	orrs	r2, r3
 8003236:	687b      	ldr	r3, [r7, #4]
 8003238:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800323a:	3b01      	subs	r3, #1
 800323c:	041b      	lsls	r3, r3, #16
 800323e:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 8003242:	431a      	orrs	r2, r3
 8003244:	687b      	ldr	r3, [r7, #4]
 8003246:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003248:	3b01      	subs	r3, #1
 800324a:	061b      	lsls	r3, r3, #24
 800324c:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 8003250:	4959      	ldr	r1, [pc, #356]	; (80033b8 <HAL_RCC_OscConfig+0x710>)
 8003252:	4313      	orrs	r3, r2
 8003254:	630b      	str	r3, [r1, #48]	; 0x30
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

         /* Disable PLLFRACN . */
         __HAL_RCC_PLLFRACN_DISABLE();
 8003256:	4b58      	ldr	r3, [pc, #352]	; (80033b8 <HAL_RCC_OscConfig+0x710>)
 8003258:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800325a:	4a57      	ldr	r2, [pc, #348]	; (80033b8 <HAL_RCC_OscConfig+0x710>)
 800325c:	f023 0301 	bic.w	r3, r3, #1
 8003260:	62d3      	str	r3, [r2, #44]	; 0x2c

         /* Configure PLL PLL1FRACN */
         __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 8003262:	4b55      	ldr	r3, [pc, #340]	; (80033b8 <HAL_RCC_OscConfig+0x710>)
 8003264:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003266:	4b56      	ldr	r3, [pc, #344]	; (80033c0 <HAL_RCC_OscConfig+0x718>)
 8003268:	4013      	ands	r3, r2
 800326a:	687a      	ldr	r2, [r7, #4]
 800326c:	6c92      	ldr	r2, [r2, #72]	; 0x48
 800326e:	00d2      	lsls	r2, r2, #3
 8003270:	4951      	ldr	r1, [pc, #324]	; (80033b8 <HAL_RCC_OscConfig+0x710>)
 8003272:	4313      	orrs	r3, r2
 8003274:	634b      	str	r3, [r1, #52]	; 0x34

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL_VCIRANGE(RCC_OscInitStruct->PLL.PLLRGE) ;
 8003276:	4b50      	ldr	r3, [pc, #320]	; (80033b8 <HAL_RCC_OscConfig+0x710>)
 8003278:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800327a:	f023 020c 	bic.w	r2, r3, #12
 800327e:	687b      	ldr	r3, [r7, #4]
 8003280:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003282:	494d      	ldr	r1, [pc, #308]	; (80033b8 <HAL_RCC_OscConfig+0x710>)
 8003284:	4313      	orrs	r3, r2
 8003286:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Select PLL1 output frequency range : VCO */
        __HAL_RCC_PLL_VCORANGE(RCC_OscInitStruct->PLL.PLLVCOSEL) ;
 8003288:	4b4b      	ldr	r3, [pc, #300]	; (80033b8 <HAL_RCC_OscConfig+0x710>)
 800328a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800328c:	f023 0202 	bic.w	r2, r3, #2
 8003290:	687b      	ldr	r3, [r7, #4]
 8003292:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003294:	4948      	ldr	r1, [pc, #288]	; (80033b8 <HAL_RCC_OscConfig+0x710>)
 8003296:	4313      	orrs	r3, r2
 8003298:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 800329a:	4b47      	ldr	r3, [pc, #284]	; (80033b8 <HAL_RCC_OscConfig+0x710>)
 800329c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800329e:	4a46      	ldr	r2, [pc, #280]	; (80033b8 <HAL_RCC_OscConfig+0x710>)
 80032a0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80032a4:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1Q Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80032a6:	4b44      	ldr	r3, [pc, #272]	; (80033b8 <HAL_RCC_OscConfig+0x710>)
 80032a8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80032aa:	4a43      	ldr	r2, [pc, #268]	; (80033b8 <HAL_RCC_OscConfig+0x710>)
 80032ac:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80032b0:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1R  Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 80032b2:	4b41      	ldr	r3, [pc, #260]	; (80033b8 <HAL_RCC_OscConfig+0x710>)
 80032b4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80032b6:	4a40      	ldr	r2, [pc, #256]	; (80033b8 <HAL_RCC_OscConfig+0x710>)
 80032b8:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80032bc:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1FRACN . */
         __HAL_RCC_PLLFRACN_ENABLE();
 80032be:	4b3e      	ldr	r3, [pc, #248]	; (80033b8 <HAL_RCC_OscConfig+0x710>)
 80032c0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80032c2:	4a3d      	ldr	r2, [pc, #244]	; (80033b8 <HAL_RCC_OscConfig+0x710>)
 80032c4:	f043 0301 	orr.w	r3, r3, #1
 80032c8:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80032ca:	4b3b      	ldr	r3, [pc, #236]	; (80033b8 <HAL_RCC_OscConfig+0x710>)
 80032cc:	681b      	ldr	r3, [r3, #0]
 80032ce:	4a3a      	ldr	r2, [pc, #232]	; (80033b8 <HAL_RCC_OscConfig+0x710>)
 80032d0:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80032d4:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80032d6:	f7fe fa45 	bl	8001764 <HAL_GetTick>
 80032da:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 80032dc:	e008      	b.n	80032f0 <HAL_RCC_OscConfig+0x648>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80032de:	f7fe fa41 	bl	8001764 <HAL_GetTick>
 80032e2:	4602      	mov	r2, r0
 80032e4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80032e6:	1ad3      	subs	r3, r2, r3
 80032e8:	2b02      	cmp	r3, #2
 80032ea:	d901      	bls.n	80032f0 <HAL_RCC_OscConfig+0x648>
          {
            return HAL_TIMEOUT;
 80032ec:	2303      	movs	r3, #3
 80032ee:	e05f      	b.n	80033b0 <HAL_RCC_OscConfig+0x708>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 80032f0:	4b31      	ldr	r3, [pc, #196]	; (80033b8 <HAL_RCC_OscConfig+0x710>)
 80032f2:	681b      	ldr	r3, [r3, #0]
 80032f4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80032f8:	2b00      	cmp	r3, #0
 80032fa:	d0f0      	beq.n	80032de <HAL_RCC_OscConfig+0x636>
 80032fc:	e057      	b.n	80033ae <HAL_RCC_OscConfig+0x706>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80032fe:	4b2e      	ldr	r3, [pc, #184]	; (80033b8 <HAL_RCC_OscConfig+0x710>)
 8003300:	681b      	ldr	r3, [r3, #0]
 8003302:	4a2d      	ldr	r2, [pc, #180]	; (80033b8 <HAL_RCC_OscConfig+0x710>)
 8003304:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8003308:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800330a:	f7fe fa2b 	bl	8001764 <HAL_GetTick>
 800330e:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8003310:	e008      	b.n	8003324 <HAL_RCC_OscConfig+0x67c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003312:	f7fe fa27 	bl	8001764 <HAL_GetTick>
 8003316:	4602      	mov	r2, r0
 8003318:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800331a:	1ad3      	subs	r3, r2, r3
 800331c:	2b02      	cmp	r3, #2
 800331e:	d901      	bls.n	8003324 <HAL_RCC_OscConfig+0x67c>
          {
            return HAL_TIMEOUT;
 8003320:	2303      	movs	r3, #3
 8003322:	e045      	b.n	80033b0 <HAL_RCC_OscConfig+0x708>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8003324:	4b24      	ldr	r3, [pc, #144]	; (80033b8 <HAL_RCC_OscConfig+0x710>)
 8003326:	681b      	ldr	r3, [r3, #0]
 8003328:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800332c:	2b00      	cmp	r3, #0
 800332e:	d1f0      	bne.n	8003312 <HAL_RCC_OscConfig+0x66a>
 8003330:	e03d      	b.n	80033ae <HAL_RCC_OscConfig+0x706>
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLLCKSELR;
 8003332:	4b21      	ldr	r3, [pc, #132]	; (80033b8 <HAL_RCC_OscConfig+0x710>)
 8003334:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003336:	613b      	str	r3, [r7, #16]
      temp2_pllckcfg = RCC->PLL1DIVR;
 8003338:	4b1f      	ldr	r3, [pc, #124]	; (80033b8 <HAL_RCC_OscConfig+0x710>)
 800333a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800333c:	60fb      	str	r3, [r7, #12]
      if(((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800333e:	687b      	ldr	r3, [r7, #4]
 8003340:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003342:	2b01      	cmp	r3, #1
 8003344:	d031      	beq.n	80033aa <HAL_RCC_OscConfig+0x702>
	 (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003346:	693b      	ldr	r3, [r7, #16]
 8003348:	f003 0203 	and.w	r2, r3, #3
 800334c:	687b      	ldr	r3, [r7, #4]
 800334e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
      if(((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003350:	429a      	cmp	r2, r3
 8003352:	d12a      	bne.n	80033aa <HAL_RCC_OscConfig+0x702>
         ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8003354:	693b      	ldr	r3, [r7, #16]
 8003356:	091b      	lsrs	r3, r3, #4
 8003358:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 800335c:	687b      	ldr	r3, [r7, #4]
 800335e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
	 (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003360:	429a      	cmp	r2, r3
 8003362:	d122      	bne.n	80033aa <HAL_RCC_OscConfig+0x702>
         (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8003364:	68fb      	ldr	r3, [r7, #12]
 8003366:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800336a:	687b      	ldr	r3, [r7, #4]
 800336c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800336e:	3b01      	subs	r3, #1
         ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8003370:	429a      	cmp	r2, r3
 8003372:	d11a      	bne.n	80033aa <HAL_RCC_OscConfig+0x702>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8003374:	68fb      	ldr	r3, [r7, #12]
 8003376:	0a5b      	lsrs	r3, r3, #9
 8003378:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800337c:	687b      	ldr	r3, [r7, #4]
 800337e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003380:	3b01      	subs	r3, #1
         (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8003382:	429a      	cmp	r2, r3
 8003384:	d111      	bne.n	80033aa <HAL_RCC_OscConfig+0x702>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8003386:	68fb      	ldr	r3, [r7, #12]
 8003388:	0c1b      	lsrs	r3, r3, #16
 800338a:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800338e:	687b      	ldr	r3, [r7, #4]
 8003390:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003392:	3b01      	subs	r3, #1
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8003394:	429a      	cmp	r2, r3
 8003396:	d108      	bne.n	80033aa <HAL_RCC_OscConfig+0x702>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_R1) >> RCC_PLL1DIVR_R1_Pos) != (RCC_OscInitStruct->PLL.PLLR - 1U)))
 8003398:	68fb      	ldr	r3, [r7, #12]
 800339a:	0e1b      	lsrs	r3, r3, #24
 800339c:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 80033a0:	687b      	ldr	r3, [r7, #4]
 80033a2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80033a4:	3b01      	subs	r3, #1
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 80033a6:	429a      	cmp	r2, r3
 80033a8:	d001      	beq.n	80033ae <HAL_RCC_OscConfig+0x706>
      {
        return HAL_ERROR;
 80033aa:	2301      	movs	r3, #1
 80033ac:	e000      	b.n	80033b0 <HAL_RCC_OscConfig+0x708>
      }
    }
  }
  return HAL_OK;
 80033ae:	2300      	movs	r3, #0
}
 80033b0:	4618      	mov	r0, r3
 80033b2:	3730      	adds	r7, #48	; 0x30
 80033b4:	46bd      	mov	sp, r7
 80033b6:	bd80      	pop	{r7, pc}
 80033b8:	58024400 	.word	0x58024400
 80033bc:	fffffc0c 	.word	0xfffffc0c
 80033c0:	ffff0007 	.word	0xffff0007

080033c4 <HAL_RCC_ClockConfig>:
  *         D1CPRE[3:0] bits to ensure that  Domain1 core clock not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80033c4:	b580      	push	{r7, lr}
 80033c6:	b086      	sub	sp, #24
 80033c8:	af00      	add	r7, sp, #0
 80033ca:	6078      	str	r0, [r7, #4]
 80033cc:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef halstatus;
  uint32_t tickstart;
  uint32_t common_system_clock;

   /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80033ce:	687b      	ldr	r3, [r7, #4]
 80033d0:	2b00      	cmp	r3, #0
 80033d2:	d101      	bne.n	80033d8 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80033d4:	2301      	movs	r3, #1
 80033d6:	e19c      	b.n	8003712 <HAL_RCC_ClockConfig+0x34e>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80033d8:	4b8a      	ldr	r3, [pc, #552]	; (8003604 <HAL_RCC_ClockConfig+0x240>)
 80033da:	681b      	ldr	r3, [r3, #0]
 80033dc:	f003 030f 	and.w	r3, r3, #15
 80033e0:	683a      	ldr	r2, [r7, #0]
 80033e2:	429a      	cmp	r2, r3
 80033e4:	d910      	bls.n	8003408 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80033e6:	4b87      	ldr	r3, [pc, #540]	; (8003604 <HAL_RCC_ClockConfig+0x240>)
 80033e8:	681b      	ldr	r3, [r3, #0]
 80033ea:	f023 020f 	bic.w	r2, r3, #15
 80033ee:	4985      	ldr	r1, [pc, #532]	; (8003604 <HAL_RCC_ClockConfig+0x240>)
 80033f0:	683b      	ldr	r3, [r7, #0]
 80033f2:	4313      	orrs	r3, r2
 80033f4:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80033f6:	4b83      	ldr	r3, [pc, #524]	; (8003604 <HAL_RCC_ClockConfig+0x240>)
 80033f8:	681b      	ldr	r3, [r3, #0]
 80033fa:	f003 030f 	and.w	r3, r3, #15
 80033fe:	683a      	ldr	r2, [r7, #0]
 8003400:	429a      	cmp	r2, r3
 8003402:	d001      	beq.n	8003408 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8003404:	2301      	movs	r3, #1
 8003406:	e184      	b.n	8003712 <HAL_RCC_ClockConfig+0x34e>

  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- D1PCLK1/CDPCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8003408:	687b      	ldr	r3, [r7, #4]
 800340a:	681b      	ldr	r3, [r3, #0]
 800340c:	f003 0304 	and.w	r3, r3, #4
 8003410:	2b00      	cmp	r3, #0
 8003412:	d010      	beq.n	8003436 <HAL_RCC_ClockConfig+0x72>
  {
#if defined (RCC_D1CFGR_D1PPRE)
    if((RCC_ClkInitStruct->APB3CLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8003414:	687b      	ldr	r3, [r7, #4]
 8003416:	691a      	ldr	r2, [r3, #16]
 8003418:	4b7b      	ldr	r3, [pc, #492]	; (8003608 <HAL_RCC_ClockConfig+0x244>)
 800341a:	699b      	ldr	r3, [r3, #24]
 800341c:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8003420:	429a      	cmp	r2, r3
 8003422:	d908      	bls.n	8003436 <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8003424:	4b78      	ldr	r3, [pc, #480]	; (8003608 <HAL_RCC_ClockConfig+0x244>)
 8003426:	699b      	ldr	r3, [r3, #24]
 8003428:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 800342c:	687b      	ldr	r3, [r7, #4]
 800342e:	691b      	ldr	r3, [r3, #16]
 8003430:	4975      	ldr	r1, [pc, #468]	; (8003608 <HAL_RCC_ClockConfig+0x244>)
 8003432:	4313      	orrs	r3, r2
 8003434:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003436:	687b      	ldr	r3, [r7, #4]
 8003438:	681b      	ldr	r3, [r3, #0]
 800343a:	f003 0308 	and.w	r3, r3, #8
 800343e:	2b00      	cmp	r3, #0
 8003440:	d010      	beq.n	8003464 <HAL_RCC_ClockConfig+0xa0>
  {
#if defined (RCC_D2CFGR_D2PPRE1)
    if((RCC_ClkInitStruct->APB1CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 8003442:	687b      	ldr	r3, [r7, #4]
 8003444:	695a      	ldr	r2, [r3, #20]
 8003446:	4b70      	ldr	r3, [pc, #448]	; (8003608 <HAL_RCC_ClockConfig+0x244>)
 8003448:	69db      	ldr	r3, [r3, #28]
 800344a:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800344e:	429a      	cmp	r2, r3
 8003450:	d908      	bls.n	8003464 <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 8003452:	4b6d      	ldr	r3, [pc, #436]	; (8003608 <HAL_RCC_ClockConfig+0x244>)
 8003454:	69db      	ldr	r3, [r3, #28]
 8003456:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 800345a:	687b      	ldr	r3, [r7, #4]
 800345c:	695b      	ldr	r3, [r3, #20]
 800345e:	496a      	ldr	r1, [pc, #424]	; (8003608 <HAL_RCC_ClockConfig+0x244>)
 8003460:	4313      	orrs	r3, r2
 8003462:	61cb      	str	r3, [r1, #28]
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
  }
#endif
    }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003464:	687b      	ldr	r3, [r7, #4]
 8003466:	681b      	ldr	r3, [r3, #0]
 8003468:	f003 0310 	and.w	r3, r3, #16
 800346c:	2b00      	cmp	r3, #0
 800346e:	d010      	beq.n	8003492 <HAL_RCC_ClockConfig+0xce>
  {
#if defined(RCC_D2CFGR_D2PPRE2)
    if((RCC_ClkInitStruct->APB2CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8003470:	687b      	ldr	r3, [r7, #4]
 8003472:	699a      	ldr	r2, [r3, #24]
 8003474:	4b64      	ldr	r3, [pc, #400]	; (8003608 <HAL_RCC_ClockConfig+0x244>)
 8003476:	69db      	ldr	r3, [r3, #28]
 8003478:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800347c:	429a      	cmp	r2, r3
 800347e:	d908      	bls.n	8003492 <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8003480:	4b61      	ldr	r3, [pc, #388]	; (8003608 <HAL_RCC_ClockConfig+0x244>)
 8003482:	69db      	ldr	r3, [r3, #28]
 8003484:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8003488:	687b      	ldr	r3, [r7, #4]
 800348a:	699b      	ldr	r3, [r3, #24]
 800348c:	495e      	ldr	r1, [pc, #376]	; (8003608 <HAL_RCC_ClockConfig+0x244>)
 800348e:	4313      	orrs	r3, r2
 8003490:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 8003492:	687b      	ldr	r3, [r7, #4]
 8003494:	681b      	ldr	r3, [r3, #0]
 8003496:	f003 0320 	and.w	r3, r3, #32
 800349a:	2b00      	cmp	r3, #0
 800349c:	d010      	beq.n	80034c0 <HAL_RCC_ClockConfig+0xfc>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if((RCC_ClkInitStruct->APB4CLKDivider) > (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 800349e:	687b      	ldr	r3, [r7, #4]
 80034a0:	69da      	ldr	r2, [r3, #28]
 80034a2:	4b59      	ldr	r3, [pc, #356]	; (8003608 <HAL_RCC_ClockConfig+0x244>)
 80034a4:	6a1b      	ldr	r3, [r3, #32]
 80034a6:	f003 0370 	and.w	r3, r3, #112	; 0x70
 80034aa:	429a      	cmp	r2, r3
 80034ac:	d908      	bls.n	80034c0 <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider) );
 80034ae:	4b56      	ldr	r3, [pc, #344]	; (8003608 <HAL_RCC_ClockConfig+0x244>)
 80034b0:	6a1b      	ldr	r3, [r3, #32]
 80034b2:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 80034b6:	687b      	ldr	r3, [r7, #4]
 80034b8:	69db      	ldr	r3, [r3, #28]
 80034ba:	4953      	ldr	r1, [pc, #332]	; (8003608 <HAL_RCC_ClockConfig+0x244>)
 80034bc:	4313      	orrs	r3, r2
 80034be:	620b      	str	r3, [r1, #32]
    }
#endif
  }

   /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80034c0:	687b      	ldr	r3, [r7, #4]
 80034c2:	681b      	ldr	r3, [r3, #0]
 80034c4:	f003 0302 	and.w	r3, r3, #2
 80034c8:	2b00      	cmp	r3, #0
 80034ca:	d010      	beq.n	80034ee <HAL_RCC_ClockConfig+0x12a>
  {
#if defined (RCC_D1CFGR_HPRE)
    if((RCC_ClkInitStruct->AHBCLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 80034cc:	687b      	ldr	r3, [r7, #4]
 80034ce:	68da      	ldr	r2, [r3, #12]
 80034d0:	4b4d      	ldr	r3, [pc, #308]	; (8003608 <HAL_RCC_ClockConfig+0x244>)
 80034d2:	699b      	ldr	r3, [r3, #24]
 80034d4:	f003 030f 	and.w	r3, r3, #15
 80034d8:	429a      	cmp	r2, r3
 80034da:	d908      	bls.n	80034ee <HAL_RCC_ClockConfig+0x12a>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80034dc:	4b4a      	ldr	r3, [pc, #296]	; (8003608 <HAL_RCC_ClockConfig+0x244>)
 80034de:	699b      	ldr	r3, [r3, #24]
 80034e0:	f023 020f 	bic.w	r2, r3, #15
 80034e4:	687b      	ldr	r3, [r7, #4]
 80034e6:	68db      	ldr	r3, [r3, #12]
 80034e8:	4947      	ldr	r1, [pc, #284]	; (8003608 <HAL_RCC_ClockConfig+0x244>)
 80034ea:	4313      	orrs	r3, r2
 80034ec:	618b      	str	r3, [r1, #24]
    }
#endif
  }

    /*------------------------- SYSCLK Configuration -------------------------*/
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80034ee:	687b      	ldr	r3, [r7, #4]
 80034f0:	681b      	ldr	r3, [r3, #0]
 80034f2:	f003 0301 	and.w	r3, r3, #1
 80034f6:	2b00      	cmp	r3, #0
 80034f8:	d055      	beq.n	80035a6 <HAL_RCC_ClockConfig+0x1e2>
    {
      assert_param(IS_RCC_SYSCLK(RCC_ClkInitStruct->SYSCLKDivider));
      assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
#if defined(RCC_D1CFGR_D1CPRE)
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1CPRE, RCC_ClkInitStruct->SYSCLKDivider);
 80034fa:	4b43      	ldr	r3, [pc, #268]	; (8003608 <HAL_RCC_ClockConfig+0x244>)
 80034fc:	699b      	ldr	r3, [r3, #24]
 80034fe:	f423 6270 	bic.w	r2, r3, #3840	; 0xf00
 8003502:	687b      	ldr	r3, [r7, #4]
 8003504:	689b      	ldr	r3, [r3, #8]
 8003506:	4940      	ldr	r1, [pc, #256]	; (8003608 <HAL_RCC_ClockConfig+0x244>)
 8003508:	4313      	orrs	r3, r2
 800350a:	618b      	str	r3, [r1, #24]
#else
      MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDCPRE, RCC_ClkInitStruct->SYSCLKDivider);
#endif
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800350c:	687b      	ldr	r3, [r7, #4]
 800350e:	685b      	ldr	r3, [r3, #4]
 8003510:	2b02      	cmp	r3, #2
 8003512:	d107      	bne.n	8003524 <HAL_RCC_ClockConfig+0x160>
      {
        /* Check the HSE ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8003514:	4b3c      	ldr	r3, [pc, #240]	; (8003608 <HAL_RCC_ClockConfig+0x244>)
 8003516:	681b      	ldr	r3, [r3, #0]
 8003518:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800351c:	2b00      	cmp	r3, #0
 800351e:	d121      	bne.n	8003564 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 8003520:	2301      	movs	r3, #1
 8003522:	e0f6      	b.n	8003712 <HAL_RCC_ClockConfig+0x34e>
        }
      }
      /* PLL is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8003524:	687b      	ldr	r3, [r7, #4]
 8003526:	685b      	ldr	r3, [r3, #4]
 8003528:	2b03      	cmp	r3, #3
 800352a:	d107      	bne.n	800353c <HAL_RCC_ClockConfig+0x178>
      {
        /* Check the PLL ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 800352c:	4b36      	ldr	r3, [pc, #216]	; (8003608 <HAL_RCC_ClockConfig+0x244>)
 800352e:	681b      	ldr	r3, [r3, #0]
 8003530:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003534:	2b00      	cmp	r3, #0
 8003536:	d115      	bne.n	8003564 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 8003538:	2301      	movs	r3, #1
 800353a:	e0ea      	b.n	8003712 <HAL_RCC_ClockConfig+0x34e>
        }
      }
      /* CSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 800353c:	687b      	ldr	r3, [r7, #4]
 800353e:	685b      	ldr	r3, [r3, #4]
 8003540:	2b01      	cmp	r3, #1
 8003542:	d107      	bne.n	8003554 <HAL_RCC_ClockConfig+0x190>
      {
        /* Check the PLL ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8003544:	4b30      	ldr	r3, [pc, #192]	; (8003608 <HAL_RCC_ClockConfig+0x244>)
 8003546:	681b      	ldr	r3, [r3, #0]
 8003548:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800354c:	2b00      	cmp	r3, #0
 800354e:	d109      	bne.n	8003564 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 8003550:	2301      	movs	r3, #1
 8003552:	e0de      	b.n	8003712 <HAL_RCC_ClockConfig+0x34e>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8003554:	4b2c      	ldr	r3, [pc, #176]	; (8003608 <HAL_RCC_ClockConfig+0x244>)
 8003556:	681b      	ldr	r3, [r3, #0]
 8003558:	f003 0304 	and.w	r3, r3, #4
 800355c:	2b00      	cmp	r3, #0
 800355e:	d101      	bne.n	8003564 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 8003560:	2301      	movs	r3, #1
 8003562:	e0d6      	b.n	8003712 <HAL_RCC_ClockConfig+0x34e>
        }
      }
      MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8003564:	4b28      	ldr	r3, [pc, #160]	; (8003608 <HAL_RCC_ClockConfig+0x244>)
 8003566:	691b      	ldr	r3, [r3, #16]
 8003568:	f023 0207 	bic.w	r2, r3, #7
 800356c:	687b      	ldr	r3, [r7, #4]
 800356e:	685b      	ldr	r3, [r3, #4]
 8003570:	4925      	ldr	r1, [pc, #148]	; (8003608 <HAL_RCC_ClockConfig+0x244>)
 8003572:	4313      	orrs	r3, r2
 8003574:	610b      	str	r3, [r1, #16]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003576:	f7fe f8f5 	bl	8001764 <HAL_GetTick>
 800357a:	6178      	str	r0, [r7, #20]

        while (__HAL_RCC_GET_SYSCLK_SOURCE() !=  (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800357c:	e00a      	b.n	8003594 <HAL_RCC_ClockConfig+0x1d0>
        {
          if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 800357e:	f7fe f8f1 	bl	8001764 <HAL_GetTick>
 8003582:	4602      	mov	r2, r0
 8003584:	697b      	ldr	r3, [r7, #20]
 8003586:	1ad3      	subs	r3, r2, r3
 8003588:	f241 3288 	movw	r2, #5000	; 0x1388
 800358c:	4293      	cmp	r3, r2
 800358e:	d901      	bls.n	8003594 <HAL_RCC_ClockConfig+0x1d0>
          {
            return HAL_TIMEOUT;
 8003590:	2303      	movs	r3, #3
 8003592:	e0be      	b.n	8003712 <HAL_RCC_ClockConfig+0x34e>
        while (__HAL_RCC_GET_SYSCLK_SOURCE() !=  (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003594:	4b1c      	ldr	r3, [pc, #112]	; (8003608 <HAL_RCC_ClockConfig+0x244>)
 8003596:	691b      	ldr	r3, [r3, #16]
 8003598:	f003 0238 	and.w	r2, r3, #56	; 0x38
 800359c:	687b      	ldr	r3, [r7, #4]
 800359e:	685b      	ldr	r3, [r3, #4]
 80035a0:	00db      	lsls	r3, r3, #3
 80035a2:	429a      	cmp	r2, r3
 80035a4:	d1eb      	bne.n	800357e <HAL_RCC_ClockConfig+0x1ba>

    }

    /* Decreasing the BUS frequency divider */
   /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80035a6:	687b      	ldr	r3, [r7, #4]
 80035a8:	681b      	ldr	r3, [r3, #0]
 80035aa:	f003 0302 	and.w	r3, r3, #2
 80035ae:	2b00      	cmp	r3, #0
 80035b0:	d010      	beq.n	80035d4 <HAL_RCC_ClockConfig+0x210>
  {
#if defined(RCC_D1CFGR_HPRE)
    if((RCC_ClkInitStruct->AHBCLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 80035b2:	687b      	ldr	r3, [r7, #4]
 80035b4:	68da      	ldr	r2, [r3, #12]
 80035b6:	4b14      	ldr	r3, [pc, #80]	; (8003608 <HAL_RCC_ClockConfig+0x244>)
 80035b8:	699b      	ldr	r3, [r3, #24]
 80035ba:	f003 030f 	and.w	r3, r3, #15
 80035be:	429a      	cmp	r2, r3
 80035c0:	d208      	bcs.n	80035d4 <HAL_RCC_ClockConfig+0x210>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80035c2:	4b11      	ldr	r3, [pc, #68]	; (8003608 <HAL_RCC_ClockConfig+0x244>)
 80035c4:	699b      	ldr	r3, [r3, #24]
 80035c6:	f023 020f 	bic.w	r2, r3, #15
 80035ca:	687b      	ldr	r3, [r7, #4]
 80035cc:	68db      	ldr	r3, [r3, #12]
 80035ce:	490e      	ldr	r1, [pc, #56]	; (8003608 <HAL_RCC_ClockConfig+0x244>)
 80035d0:	4313      	orrs	r3, r2
 80035d2:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80035d4:	4b0b      	ldr	r3, [pc, #44]	; (8003604 <HAL_RCC_ClockConfig+0x240>)
 80035d6:	681b      	ldr	r3, [r3, #0]
 80035d8:	f003 030f 	and.w	r3, r3, #15
 80035dc:	683a      	ldr	r2, [r7, #0]
 80035de:	429a      	cmp	r2, r3
 80035e0:	d214      	bcs.n	800360c <HAL_RCC_ClockConfig+0x248>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80035e2:	4b08      	ldr	r3, [pc, #32]	; (8003604 <HAL_RCC_ClockConfig+0x240>)
 80035e4:	681b      	ldr	r3, [r3, #0]
 80035e6:	f023 020f 	bic.w	r2, r3, #15
 80035ea:	4906      	ldr	r1, [pc, #24]	; (8003604 <HAL_RCC_ClockConfig+0x240>)
 80035ec:	683b      	ldr	r3, [r7, #0]
 80035ee:	4313      	orrs	r3, r2
 80035f0:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80035f2:	4b04      	ldr	r3, [pc, #16]	; (8003604 <HAL_RCC_ClockConfig+0x240>)
 80035f4:	681b      	ldr	r3, [r3, #0]
 80035f6:	f003 030f 	and.w	r3, r3, #15
 80035fa:	683a      	ldr	r2, [r7, #0]
 80035fc:	429a      	cmp	r2, r3
 80035fe:	d005      	beq.n	800360c <HAL_RCC_ClockConfig+0x248>
    {
      return HAL_ERROR;
 8003600:	2301      	movs	r3, #1
 8003602:	e086      	b.n	8003712 <HAL_RCC_ClockConfig+0x34e>
 8003604:	52002000 	.word	0x52002000
 8003608:	58024400 	.word	0x58024400
    }
 }

  /*-------------------------- D1PCLK1/CDPCLK Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 800360c:	687b      	ldr	r3, [r7, #4]
 800360e:	681b      	ldr	r3, [r3, #0]
 8003610:	f003 0304 	and.w	r3, r3, #4
 8003614:	2b00      	cmp	r3, #0
 8003616:	d010      	beq.n	800363a <HAL_RCC_ClockConfig+0x276>
 {
#if defined(RCC_D1CFGR_D1PPRE)
   if((RCC_ClkInitStruct->APB3CLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8003618:	687b      	ldr	r3, [r7, #4]
 800361a:	691a      	ldr	r2, [r3, #16]
 800361c:	4b3f      	ldr	r3, [pc, #252]	; (800371c <HAL_RCC_ClockConfig+0x358>)
 800361e:	699b      	ldr	r3, [r3, #24]
 8003620:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8003624:	429a      	cmp	r2, r3
 8003626:	d208      	bcs.n	800363a <HAL_RCC_ClockConfig+0x276>
   {
     assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
     MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8003628:	4b3c      	ldr	r3, [pc, #240]	; (800371c <HAL_RCC_ClockConfig+0x358>)
 800362a:	699b      	ldr	r3, [r3, #24]
 800362c:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8003630:	687b      	ldr	r3, [r7, #4]
 8003632:	691b      	ldr	r3, [r3, #16]
 8003634:	4939      	ldr	r1, [pc, #228]	; (800371c <HAL_RCC_ClockConfig+0x358>)
 8003636:	4313      	orrs	r3, r2
 8003638:	618b      	str	r3, [r1, #24]
   }
#endif
 }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800363a:	687b      	ldr	r3, [r7, #4]
 800363c:	681b      	ldr	r3, [r3, #0]
 800363e:	f003 0308 	and.w	r3, r3, #8
 8003642:	2b00      	cmp	r3, #0
 8003644:	d010      	beq.n	8003668 <HAL_RCC_ClockConfig+0x2a4>
 {
#if defined(RCC_D2CFGR_D2PPRE1)
   if((RCC_ClkInitStruct->APB1CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 8003646:	687b      	ldr	r3, [r7, #4]
 8003648:	695a      	ldr	r2, [r3, #20]
 800364a:	4b34      	ldr	r3, [pc, #208]	; (800371c <HAL_RCC_ClockConfig+0x358>)
 800364c:	69db      	ldr	r3, [r3, #28]
 800364e:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8003652:	429a      	cmp	r2, r3
 8003654:	d208      	bcs.n	8003668 <HAL_RCC_ClockConfig+0x2a4>
   {
     assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
     MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 8003656:	4b31      	ldr	r3, [pc, #196]	; (800371c <HAL_RCC_ClockConfig+0x358>)
 8003658:	69db      	ldr	r3, [r3, #28]
 800365a:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 800365e:	687b      	ldr	r3, [r7, #4]
 8003660:	695b      	ldr	r3, [r3, #20]
 8003662:	492e      	ldr	r1, [pc, #184]	; (800371c <HAL_RCC_ClockConfig+0x358>)
 8003664:	4313      	orrs	r3, r2
 8003666:	61cb      	str	r3, [r1, #28]
   }
#endif
 }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003668:	687b      	ldr	r3, [r7, #4]
 800366a:	681b      	ldr	r3, [r3, #0]
 800366c:	f003 0310 	and.w	r3, r3, #16
 8003670:	2b00      	cmp	r3, #0
 8003672:	d010      	beq.n	8003696 <HAL_RCC_ClockConfig+0x2d2>
 {
#if defined (RCC_D2CFGR_D2PPRE2)
   if((RCC_ClkInitStruct->APB2CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8003674:	687b      	ldr	r3, [r7, #4]
 8003676:	699a      	ldr	r2, [r3, #24]
 8003678:	4b28      	ldr	r3, [pc, #160]	; (800371c <HAL_RCC_ClockConfig+0x358>)
 800367a:	69db      	ldr	r3, [r3, #28]
 800367c:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8003680:	429a      	cmp	r2, r3
 8003682:	d208      	bcs.n	8003696 <HAL_RCC_ClockConfig+0x2d2>
   {
     assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
     MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8003684:	4b25      	ldr	r3, [pc, #148]	; (800371c <HAL_RCC_ClockConfig+0x358>)
 8003686:	69db      	ldr	r3, [r3, #28]
 8003688:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 800368c:	687b      	ldr	r3, [r7, #4]
 800368e:	699b      	ldr	r3, [r3, #24]
 8003690:	4922      	ldr	r1, [pc, #136]	; (800371c <HAL_RCC_ClockConfig+0x358>)
 8003692:	4313      	orrs	r3, r2
 8003694:	61cb      	str	r3, [r1, #28]
   }
#endif
 }

  /*-------------------------- D3PCLK1/SRDPCLK1 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 8003696:	687b      	ldr	r3, [r7, #4]
 8003698:	681b      	ldr	r3, [r3, #0]
 800369a:	f003 0320 	and.w	r3, r3, #32
 800369e:	2b00      	cmp	r3, #0
 80036a0:	d010      	beq.n	80036c4 <HAL_RCC_ClockConfig+0x300>
 {
#if defined(RCC_D3CFGR_D3PPRE)
   if((RCC_ClkInitStruct->APB4CLKDivider) < (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 80036a2:	687b      	ldr	r3, [r7, #4]
 80036a4:	69da      	ldr	r2, [r3, #28]
 80036a6:	4b1d      	ldr	r3, [pc, #116]	; (800371c <HAL_RCC_ClockConfig+0x358>)
 80036a8:	6a1b      	ldr	r3, [r3, #32]
 80036aa:	f003 0370 	and.w	r3, r3, #112	; 0x70
 80036ae:	429a      	cmp	r2, r3
 80036b0:	d208      	bcs.n	80036c4 <HAL_RCC_ClockConfig+0x300>
   {
     assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
     MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider) );
 80036b2:	4b1a      	ldr	r3, [pc, #104]	; (800371c <HAL_RCC_ClockConfig+0x358>)
 80036b4:	6a1b      	ldr	r3, [r3, #32]
 80036b6:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 80036ba:	687b      	ldr	r3, [r7, #4]
 80036bc:	69db      	ldr	r3, [r3, #28]
 80036be:	4917      	ldr	r1, [pc, #92]	; (800371c <HAL_RCC_ClockConfig+0x358>)
 80036c0:	4313      	orrs	r3, r2
 80036c2:	620b      	str	r3, [r1, #32]
#endif
 }

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 80036c4:	f000 f834 	bl	8003730 <HAL_RCC_GetSysClockFreq>
 80036c8:	4602      	mov	r2, r0
 80036ca:	4b14      	ldr	r3, [pc, #80]	; (800371c <HAL_RCC_ClockConfig+0x358>)
 80036cc:	699b      	ldr	r3, [r3, #24]
 80036ce:	0a1b      	lsrs	r3, r3, #8
 80036d0:	f003 030f 	and.w	r3, r3, #15
 80036d4:	4912      	ldr	r1, [pc, #72]	; (8003720 <HAL_RCC_ClockConfig+0x35c>)
 80036d6:	5ccb      	ldrb	r3, [r1, r3]
 80036d8:	f003 031f 	and.w	r3, r3, #31
 80036dc:	fa22 f303 	lsr.w	r3, r2, r3
 80036e0:	613b      	str	r3, [r7, #16]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 80036e2:	4b0e      	ldr	r3, [pc, #56]	; (800371c <HAL_RCC_ClockConfig+0x358>)
 80036e4:	699b      	ldr	r3, [r3, #24]
 80036e6:	f003 030f 	and.w	r3, r3, #15
 80036ea:	4a0d      	ldr	r2, [pc, #52]	; (8003720 <HAL_RCC_ClockConfig+0x35c>)
 80036ec:	5cd3      	ldrb	r3, [r2, r3]
 80036ee:	f003 031f 	and.w	r3, r3, #31
 80036f2:	693a      	ldr	r2, [r7, #16]
 80036f4:	fa22 f303 	lsr.w	r3, r2, r3
 80036f8:	4a0a      	ldr	r2, [pc, #40]	; (8003724 <HAL_RCC_ClockConfig+0x360>)
 80036fa:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 80036fc:	4a0a      	ldr	r2, [pc, #40]	; (8003728 <HAL_RCC_ClockConfig+0x364>)
 80036fe:	693b      	ldr	r3, [r7, #16]
 8003700:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Configure the source of time base considering new system clocks settings*/
  halstatus = HAL_InitTick (uwTickPrio);
 8003702:	4b0a      	ldr	r3, [pc, #40]	; (800372c <HAL_RCC_ClockConfig+0x368>)
 8003704:	681b      	ldr	r3, [r3, #0]
 8003706:	4618      	mov	r0, r3
 8003708:	f7fd ffe2 	bl	80016d0 <HAL_InitTick>
 800370c:	4603      	mov	r3, r0
 800370e:	73fb      	strb	r3, [r7, #15]

  return halstatus;
 8003710:	7bfb      	ldrb	r3, [r7, #15]
}
 8003712:	4618      	mov	r0, r3
 8003714:	3718      	adds	r7, #24
 8003716:	46bd      	mov	sp, r7
 8003718:	bd80      	pop	{r7, pc}
 800371a:	bf00      	nop
 800371c:	58024400 	.word	0x58024400
 8003720:	0800a620 	.word	0x0800a620
 8003724:	2000006c 	.word	0x2000006c
 8003728:	20000068 	.word	0x20000068
 800372c:	20000070 	.word	0x20000070

08003730 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003730:	b480      	push	{r7}
 8003732:	b089      	sub	sp, #36	; 0x24
 8003734:	af00      	add	r7, sp, #0
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 8003736:	4bb3      	ldr	r3, [pc, #716]	; (8003a04 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003738:	691b      	ldr	r3, [r3, #16]
 800373a:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800373e:	2b18      	cmp	r3, #24
 8003740:	f200 8155 	bhi.w	80039ee <HAL_RCC_GetSysClockFreq+0x2be>
 8003744:	a201      	add	r2, pc, #4	; (adr r2, 800374c <HAL_RCC_GetSysClockFreq+0x1c>)
 8003746:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800374a:	bf00      	nop
 800374c:	080037b1 	.word	0x080037b1
 8003750:	080039ef 	.word	0x080039ef
 8003754:	080039ef 	.word	0x080039ef
 8003758:	080039ef 	.word	0x080039ef
 800375c:	080039ef 	.word	0x080039ef
 8003760:	080039ef 	.word	0x080039ef
 8003764:	080039ef 	.word	0x080039ef
 8003768:	080039ef 	.word	0x080039ef
 800376c:	080037d7 	.word	0x080037d7
 8003770:	080039ef 	.word	0x080039ef
 8003774:	080039ef 	.word	0x080039ef
 8003778:	080039ef 	.word	0x080039ef
 800377c:	080039ef 	.word	0x080039ef
 8003780:	080039ef 	.word	0x080039ef
 8003784:	080039ef 	.word	0x080039ef
 8003788:	080039ef 	.word	0x080039ef
 800378c:	080037dd 	.word	0x080037dd
 8003790:	080039ef 	.word	0x080039ef
 8003794:	080039ef 	.word	0x080039ef
 8003798:	080039ef 	.word	0x080039ef
 800379c:	080039ef 	.word	0x080039ef
 80037a0:	080039ef 	.word	0x080039ef
 80037a4:	080039ef 	.word	0x080039ef
 80037a8:	080039ef 	.word	0x080039ef
 80037ac:	080037e3 	.word	0x080037e3
  {
  case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */

   if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80037b0:	4b94      	ldr	r3, [pc, #592]	; (8003a04 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80037b2:	681b      	ldr	r3, [r3, #0]
 80037b4:	f003 0320 	and.w	r3, r3, #32
 80037b8:	2b00      	cmp	r3, #0
 80037ba:	d009      	beq.n	80037d0 <HAL_RCC_GetSysClockFreq+0xa0>
      {
        sysclockfreq = (uint32_t) (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 80037bc:	4b91      	ldr	r3, [pc, #580]	; (8003a04 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80037be:	681b      	ldr	r3, [r3, #0]
 80037c0:	08db      	lsrs	r3, r3, #3
 80037c2:	f003 0303 	and.w	r3, r3, #3
 80037c6:	4a90      	ldr	r2, [pc, #576]	; (8003a08 <HAL_RCC_GetSysClockFreq+0x2d8>)
 80037c8:	fa22 f303 	lsr.w	r3, r2, r3
 80037cc:	61bb      	str	r3, [r7, #24]
      else
      {
        sysclockfreq = (uint32_t) HSI_VALUE;
      }

    break;
 80037ce:	e111      	b.n	80039f4 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = (uint32_t) HSI_VALUE;
 80037d0:	4b8d      	ldr	r3, [pc, #564]	; (8003a08 <HAL_RCC_GetSysClockFreq+0x2d8>)
 80037d2:	61bb      	str	r3, [r7, #24]
    break;
 80037d4:	e10e      	b.n	80039f4 <HAL_RCC_GetSysClockFreq+0x2c4>

  case RCC_CFGR_SWS_CSI:  /* CSI used as system clock  source */
    sysclockfreq = CSI_VALUE;
 80037d6:	4b8d      	ldr	r3, [pc, #564]	; (8003a0c <HAL_RCC_GetSysClockFreq+0x2dc>)
 80037d8:	61bb      	str	r3, [r7, #24]
    break;
 80037da:	e10b      	b.n	80039f4 <HAL_RCC_GetSysClockFreq+0x2c4>

  case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    sysclockfreq = HSE_VALUE;
 80037dc:	4b8c      	ldr	r3, [pc, #560]	; (8003a10 <HAL_RCC_GetSysClockFreq+0x2e0>)
 80037de:	61bb      	str	r3, [r7, #24]
    break;
 80037e0:	e108      	b.n	80039f4 <HAL_RCC_GetSysClockFreq+0x2c4>
  case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 80037e2:	4b88      	ldr	r3, [pc, #544]	; (8003a04 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80037e4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80037e6:	f003 0303 	and.w	r3, r3, #3
 80037ea:	617b      	str	r3, [r7, #20]
    pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1)>> 4)  ;
 80037ec:	4b85      	ldr	r3, [pc, #532]	; (8003a04 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80037ee:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80037f0:	091b      	lsrs	r3, r3, #4
 80037f2:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80037f6:	613b      	str	r3, [r7, #16]
    pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN)>>RCC_PLLCFGR_PLL1FRACEN_Pos);
 80037f8:	4b82      	ldr	r3, [pc, #520]	; (8003a04 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80037fa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80037fc:	f003 0301 	and.w	r3, r3, #1
 8003800:	60fb      	str	r3, [r7, #12]
    fracn1 = (float_t)(uint32_t)(pllfracen* ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1)>> 3));
 8003802:	4b80      	ldr	r3, [pc, #512]	; (8003a04 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003804:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003806:	08db      	lsrs	r3, r3, #3
 8003808:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800380c:	68fa      	ldr	r2, [r7, #12]
 800380e:	fb02 f303 	mul.w	r3, r2, r3
 8003812:	ee07 3a90 	vmov	s15, r3
 8003816:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800381a:	edc7 7a02 	vstr	s15, [r7, #8]

    if (pllm != 0U)
 800381e:	693b      	ldr	r3, [r7, #16]
 8003820:	2b00      	cmp	r3, #0
 8003822:	f000 80e1 	beq.w	80039e8 <HAL_RCC_GetSysClockFreq+0x2b8>
 8003826:	697b      	ldr	r3, [r7, #20]
 8003828:	2b02      	cmp	r3, #2
 800382a:	f000 8083 	beq.w	8003934 <HAL_RCC_GetSysClockFreq+0x204>
 800382e:	697b      	ldr	r3, [r7, #20]
 8003830:	2b02      	cmp	r3, #2
 8003832:	f200 80a1 	bhi.w	8003978 <HAL_RCC_GetSysClockFreq+0x248>
 8003836:	697b      	ldr	r3, [r7, #20]
 8003838:	2b00      	cmp	r3, #0
 800383a:	d003      	beq.n	8003844 <HAL_RCC_GetSysClockFreq+0x114>
 800383c:	697b      	ldr	r3, [r7, #20]
 800383e:	2b01      	cmp	r3, #1
 8003840:	d056      	beq.n	80038f0 <HAL_RCC_GetSysClockFreq+0x1c0>
 8003842:	e099      	b.n	8003978 <HAL_RCC_GetSysClockFreq+0x248>
    {
      switch (pllsource)
      {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

       if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8003844:	4b6f      	ldr	r3, [pc, #444]	; (8003a04 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003846:	681b      	ldr	r3, [r3, #0]
 8003848:	f003 0320 	and.w	r3, r3, #32
 800384c:	2b00      	cmp	r3, #0
 800384e:	d02d      	beq.n	80038ac <HAL_RCC_GetSysClockFreq+0x17c>
        {
          hsivalue= (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8003850:	4b6c      	ldr	r3, [pc, #432]	; (8003a04 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003852:	681b      	ldr	r3, [r3, #0]
 8003854:	08db      	lsrs	r3, r3, #3
 8003856:	f003 0303 	and.w	r3, r3, #3
 800385a:	4a6b      	ldr	r2, [pc, #428]	; (8003a08 <HAL_RCC_GetSysClockFreq+0x2d8>)
 800385c:	fa22 f303 	lsr.w	r3, r2, r3
 8003860:	607b      	str	r3, [r7, #4]
          pllvco = ( (float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8003862:	687b      	ldr	r3, [r7, #4]
 8003864:	ee07 3a90 	vmov	s15, r3
 8003868:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800386c:	693b      	ldr	r3, [r7, #16]
 800386e:	ee07 3a90 	vmov	s15, r3
 8003872:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003876:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800387a:	4b62      	ldr	r3, [pc, #392]	; (8003a04 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800387c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800387e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003882:	ee07 3a90 	vmov	s15, r3
 8003886:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800388a:	ed97 6a02 	vldr	s12, [r7, #8]
 800388e:	eddf 5a61 	vldr	s11, [pc, #388]	; 8003a14 <HAL_RCC_GetSysClockFreq+0x2e4>
 8003892:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8003896:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800389a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800389e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80038a2:	ee67 7a27 	vmul.f32	s15, s14, s15
 80038a6:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
        }
        break;
 80038aa:	e087      	b.n	80039bc <HAL_RCC_GetSysClockFreq+0x28c>
          pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 80038ac:	693b      	ldr	r3, [r7, #16]
 80038ae:	ee07 3a90 	vmov	s15, r3
 80038b2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80038b6:	eddf 6a58 	vldr	s13, [pc, #352]	; 8003a18 <HAL_RCC_GetSysClockFreq+0x2e8>
 80038ba:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80038be:	4b51      	ldr	r3, [pc, #324]	; (8003a04 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80038c0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80038c2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80038c6:	ee07 3a90 	vmov	s15, r3
 80038ca:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80038ce:	ed97 6a02 	vldr	s12, [r7, #8]
 80038d2:	eddf 5a50 	vldr	s11, [pc, #320]	; 8003a14 <HAL_RCC_GetSysClockFreq+0x2e4>
 80038d6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80038da:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80038de:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80038e2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80038e6:	ee67 7a27 	vmul.f32	s15, s14, s15
 80038ea:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80038ee:	e065      	b.n	80039bc <HAL_RCC_GetSysClockFreq+0x28c>

      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 80038f0:	693b      	ldr	r3, [r7, #16]
 80038f2:	ee07 3a90 	vmov	s15, r3
 80038f6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80038fa:	eddf 6a48 	vldr	s13, [pc, #288]	; 8003a1c <HAL_RCC_GetSysClockFreq+0x2ec>
 80038fe:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8003902:	4b40      	ldr	r3, [pc, #256]	; (8003a04 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003904:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003906:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800390a:	ee07 3a90 	vmov	s15, r3
 800390e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003912:	ed97 6a02 	vldr	s12, [r7, #8]
 8003916:	eddf 5a3f 	vldr	s11, [pc, #252]	; 8003a14 <HAL_RCC_GetSysClockFreq+0x2e4>
 800391a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800391e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8003922:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8003926:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800392a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800392e:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8003932:	e043      	b.n	80039bc <HAL_RCC_GetSysClockFreq+0x28c>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8003934:	693b      	ldr	r3, [r7, #16]
 8003936:	ee07 3a90 	vmov	s15, r3
 800393a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800393e:	eddf 6a38 	vldr	s13, [pc, #224]	; 8003a20 <HAL_RCC_GetSysClockFreq+0x2f0>
 8003942:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8003946:	4b2f      	ldr	r3, [pc, #188]	; (8003a04 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003948:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800394a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800394e:	ee07 3a90 	vmov	s15, r3
 8003952:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003956:	ed97 6a02 	vldr	s12, [r7, #8]
 800395a:	eddf 5a2e 	vldr	s11, [pc, #184]	; 8003a14 <HAL_RCC_GetSysClockFreq+0x2e4>
 800395e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8003962:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8003966:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800396a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800396e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003972:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8003976:	e021      	b.n	80039bc <HAL_RCC_GetSysClockFreq+0x28c>

      default:
        pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8003978:	693b      	ldr	r3, [r7, #16]
 800397a:	ee07 3a90 	vmov	s15, r3
 800397e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003982:	eddf 6a26 	vldr	s13, [pc, #152]	; 8003a1c <HAL_RCC_GetSysClockFreq+0x2ec>
 8003986:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800398a:	4b1e      	ldr	r3, [pc, #120]	; (8003a04 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800398c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800398e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003992:	ee07 3a90 	vmov	s15, r3
 8003996:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800399a:	ed97 6a02 	vldr	s12, [r7, #8]
 800399e:	eddf 5a1d 	vldr	s11, [pc, #116]	; 8003a14 <HAL_RCC_GetSysClockFreq+0x2e4>
 80039a2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80039a6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80039aa:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80039ae:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80039b2:	ee67 7a27 	vmul.f32	s15, s14, s15
 80039b6:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80039ba:	bf00      	nop
      }
      pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >>9) + 1U ) ;
 80039bc:	4b11      	ldr	r3, [pc, #68]	; (8003a04 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80039be:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80039c0:	0a5b      	lsrs	r3, r3, #9
 80039c2:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80039c6:	3301      	adds	r3, #1
 80039c8:	603b      	str	r3, [r7, #0]
      sysclockfreq =  (uint32_t)(float_t)(pllvco/(float_t)pllp);
 80039ca:	683b      	ldr	r3, [r7, #0]
 80039cc:	ee07 3a90 	vmov	s15, r3
 80039d0:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 80039d4:	edd7 6a07 	vldr	s13, [r7, #28]
 80039d8:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80039dc:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80039e0:	ee17 3a90 	vmov	r3, s15
 80039e4:	61bb      	str	r3, [r7, #24]
    }
    else
    {
      sysclockfreq = 0U;
    }
    break;
 80039e6:	e005      	b.n	80039f4 <HAL_RCC_GetSysClockFreq+0x2c4>
      sysclockfreq = 0U;
 80039e8:	2300      	movs	r3, #0
 80039ea:	61bb      	str	r3, [r7, #24]
    break;
 80039ec:	e002      	b.n	80039f4 <HAL_RCC_GetSysClockFreq+0x2c4>

  default:
    sysclockfreq = CSI_VALUE;
 80039ee:	4b07      	ldr	r3, [pc, #28]	; (8003a0c <HAL_RCC_GetSysClockFreq+0x2dc>)
 80039f0:	61bb      	str	r3, [r7, #24]
    break;
 80039f2:	bf00      	nop
  }

  return sysclockfreq;
 80039f4:	69bb      	ldr	r3, [r7, #24]
}
 80039f6:	4618      	mov	r0, r3
 80039f8:	3724      	adds	r7, #36	; 0x24
 80039fa:	46bd      	mov	sp, r7
 80039fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a00:	4770      	bx	lr
 8003a02:	bf00      	nop
 8003a04:	58024400 	.word	0x58024400
 8003a08:	03d09000 	.word	0x03d09000
 8003a0c:	003d0900 	.word	0x003d0900
 8003a10:	007a1200 	.word	0x007a1200
 8003a14:	46000000 	.word	0x46000000
 8003a18:	4c742400 	.word	0x4c742400
 8003a1c:	4a742400 	.word	0x4a742400
 8003a20:	4af42400 	.word	0x4af42400

08003a24 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemD2Clock CMSIS variable is used to store System domain2 Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003a24:	b580      	push	{r7, lr}
 8003a26:	b082      	sub	sp, #8
 8003a28:	af00      	add	r7, sp, #0
uint32_t common_system_clock;

#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 8003a2a:	f7ff fe81 	bl	8003730 <HAL_RCC_GetSysClockFreq>
 8003a2e:	4602      	mov	r2, r0
 8003a30:	4b10      	ldr	r3, [pc, #64]	; (8003a74 <HAL_RCC_GetHCLKFreq+0x50>)
 8003a32:	699b      	ldr	r3, [r3, #24]
 8003a34:	0a1b      	lsrs	r3, r3, #8
 8003a36:	f003 030f 	and.w	r3, r3, #15
 8003a3a:	490f      	ldr	r1, [pc, #60]	; (8003a78 <HAL_RCC_GetHCLKFreq+0x54>)
 8003a3c:	5ccb      	ldrb	r3, [r1, r3]
 8003a3e:	f003 031f 	and.w	r3, r3, #31
 8003a42:	fa22 f303 	lsr.w	r3, r2, r3
 8003a46:	607b      	str	r3, [r7, #4]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos] & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8003a48:	4b0a      	ldr	r3, [pc, #40]	; (8003a74 <HAL_RCC_GetHCLKFreq+0x50>)
 8003a4a:	699b      	ldr	r3, [r3, #24]
 8003a4c:	f003 030f 	and.w	r3, r3, #15
 8003a50:	4a09      	ldr	r2, [pc, #36]	; (8003a78 <HAL_RCC_GetHCLKFreq+0x54>)
 8003a52:	5cd3      	ldrb	r3, [r2, r3]
 8003a54:	f003 031f 	and.w	r3, r3, #31
 8003a58:	687a      	ldr	r2, [r7, #4]
 8003a5a:	fa22 f303 	lsr.w	r3, r2, r3
 8003a5e:	4a07      	ldr	r2, [pc, #28]	; (8003a7c <HAL_RCC_GetHCLKFreq+0x58>)
 8003a60:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8003a62:	4a07      	ldr	r2, [pc, #28]	; (8003a80 <HAL_RCC_GetHCLKFreq+0x5c>)
 8003a64:	687b      	ldr	r3, [r7, #4]
 8003a66:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  return SystemD2Clock;
 8003a68:	4b04      	ldr	r3, [pc, #16]	; (8003a7c <HAL_RCC_GetHCLKFreq+0x58>)
 8003a6a:	681b      	ldr	r3, [r3, #0]
}
 8003a6c:	4618      	mov	r0, r3
 8003a6e:	3708      	adds	r7, #8
 8003a70:	46bd      	mov	sp, r7
 8003a72:	bd80      	pop	{r7, pc}
 8003a74:	58024400 	.word	0x58024400
 8003a78:	0800a620 	.word	0x0800a620
 8003a7c:	2000006c 	.word	0x2000006c
 8003a80:	20000068 	.word	0x20000068

08003a84 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003a84:	b580      	push	{r7, lr}
 8003a86:	af00      	add	r7, sp, #0
#if defined (RCC_D2CFGR_D2PPRE1)
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1)>> RCC_D2CFGR_D2PPRE1_Pos]) & 0x1FU));
 8003a88:	f7ff ffcc 	bl	8003a24 <HAL_RCC_GetHCLKFreq>
 8003a8c:	4602      	mov	r2, r0
 8003a8e:	4b06      	ldr	r3, [pc, #24]	; (8003aa8 <HAL_RCC_GetPCLK1Freq+0x24>)
 8003a90:	69db      	ldr	r3, [r3, #28]
 8003a92:	091b      	lsrs	r3, r3, #4
 8003a94:	f003 0307 	and.w	r3, r3, #7
 8003a98:	4904      	ldr	r1, [pc, #16]	; (8003aac <HAL_RCC_GetPCLK1Freq+0x28>)
 8003a9a:	5ccb      	ldrb	r3, [r1, r3]
 8003a9c:	f003 031f 	and.w	r3, r3, #31
 8003aa0:	fa22 f303 	lsr.w	r3, r2, r3
#else
 /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1)>> RCC_CDCFGR2_CDPPRE1_Pos]) & 0x1FU));
#endif
}
 8003aa4:	4618      	mov	r0, r3
 8003aa6:	bd80      	pop	{r7, pc}
 8003aa8:	58024400 	.word	0x58024400
 8003aac:	0800a620 	.word	0x0800a620

08003ab0 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003ab0:	b580      	push	{r7, lr}
 8003ab2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
#if defined(RCC_D2CFGR_D2PPRE2)
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2)>> RCC_D2CFGR_D2PPRE2_Pos]) & 0x1FU));
 8003ab4:	f7ff ffb6 	bl	8003a24 <HAL_RCC_GetHCLKFreq>
 8003ab8:	4602      	mov	r2, r0
 8003aba:	4b06      	ldr	r3, [pc, #24]	; (8003ad4 <HAL_RCC_GetPCLK2Freq+0x24>)
 8003abc:	69db      	ldr	r3, [r3, #28]
 8003abe:	0a1b      	lsrs	r3, r3, #8
 8003ac0:	f003 0307 	and.w	r3, r3, #7
 8003ac4:	4904      	ldr	r1, [pc, #16]	; (8003ad8 <HAL_RCC_GetPCLK2Freq+0x28>)
 8003ac6:	5ccb      	ldrb	r3, [r1, r3]
 8003ac8:	f003 031f 	and.w	r3, r3, #31
 8003acc:	fa22 f303 	lsr.w	r3, r2, r3
#else
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2)>> RCC_CDCFGR2_CDPPRE2_Pos]) & 0x1FU));
#endif
}
 8003ad0:	4618      	mov	r0, r3
 8003ad2:	bd80      	pop	{r7, pc}
 8003ad4:	58024400 	.word	0x58024400
 8003ad8:	0800a620 	.word	0x0800a620

08003adc <HAL_RCCEx_PeriphCLKConfig>:
  * (*) : Available on some STM32H7 lines only.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8003adc:	b580      	push	{r7, lr}
 8003ade:	b086      	sub	sp, #24
 8003ae0:	af00      	add	r7, sp, #0
 8003ae2:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8003ae4:	2300      	movs	r3, #0
 8003ae6:	75fb      	strb	r3, [r7, #23]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8003ae8:	2300      	movs	r3, #0
 8003aea:	75bb      	strb	r3, [r7, #22]

  /*---------------------------- SPDIFRX configuration -------------------------------*/

  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8003aec:	687b      	ldr	r3, [r7, #4]
 8003aee:	681b      	ldr	r3, [r3, #0]
 8003af0:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8003af4:	2b00      	cmp	r3, #0
 8003af6:	d03f      	beq.n	8003b78 <HAL_RCCEx_PeriphCLKConfig+0x9c>
  {

    switch(PeriphClkInit->SpdifrxClockSelection)
 8003af8:	687b      	ldr	r3, [r7, #4]
 8003afa:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003afc:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8003b00:	d02a      	beq.n	8003b58 <HAL_RCCEx_PeriphCLKConfig+0x7c>
 8003b02:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8003b06:	d824      	bhi.n	8003b52 <HAL_RCCEx_PeriphCLKConfig+0x76>
 8003b08:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8003b0c:	d018      	beq.n	8003b40 <HAL_RCCEx_PeriphCLKConfig+0x64>
 8003b0e:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8003b12:	d81e      	bhi.n	8003b52 <HAL_RCCEx_PeriphCLKConfig+0x76>
 8003b14:	2b00      	cmp	r3, #0
 8003b16:	d003      	beq.n	8003b20 <HAL_RCCEx_PeriphCLKConfig+0x44>
 8003b18:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8003b1c:	d007      	beq.n	8003b2e <HAL_RCCEx_PeriphCLKConfig+0x52>
 8003b1e:	e018      	b.n	8003b52 <HAL_RCCEx_PeriphCLKConfig+0x76>
    {
    case RCC_SPDIFRXCLKSOURCE_PLL:      /* PLL is used as clock source for SPDIFRX*/
      /* Enable PLL1Q Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003b20:	4bab      	ldr	r3, [pc, #684]	; (8003dd0 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8003b22:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003b24:	4aaa      	ldr	r2, [pc, #680]	; (8003dd0 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8003b26:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003b2a:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 8003b2c:	e015      	b.n	8003b5a <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SPDIFRXCLKSOURCE_PLL2: /* PLL2 is used as clock source for SPDIFRX*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 8003b2e:	687b      	ldr	r3, [r7, #4]
 8003b30:	3304      	adds	r3, #4
 8003b32:	2102      	movs	r1, #2
 8003b34:	4618      	mov	r0, r3
 8003b36:	f001 f9df 	bl	8004ef8 <RCCEx_PLL2_Config>
 8003b3a:	4603      	mov	r3, r0
 8003b3c:	75fb      	strb	r3, [r7, #23]

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 8003b3e:	e00c      	b.n	8003b5a <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SPDIFRXCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPDIFRX*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8003b40:	687b      	ldr	r3, [r7, #4]
 8003b42:	3324      	adds	r3, #36	; 0x24
 8003b44:	2102      	movs	r1, #2
 8003b46:	4618      	mov	r0, r3
 8003b48:	f001 fa88 	bl	800505c <RCCEx_PLL3_Config>
 8003b4c:	4603      	mov	r3, r0
 8003b4e:	75fb      	strb	r3, [r7, #23]

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 8003b50:	e003      	b.n	8003b5a <HAL_RCCEx_PeriphCLKConfig+0x7e>
      /* Internal OSC clock is used as source of SPDIFRX clock*/
      /* SPDIFRX clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8003b52:	2301      	movs	r3, #1
 8003b54:	75fb      	strb	r3, [r7, #23]
      break;
 8003b56:	e000      	b.n	8003b5a <HAL_RCCEx_PeriphCLKConfig+0x7e>
      break;
 8003b58:	bf00      	nop
    }

    if(ret == HAL_OK)
 8003b5a:	7dfb      	ldrb	r3, [r7, #23]
 8003b5c:	2b00      	cmp	r3, #0
 8003b5e:	d109      	bne.n	8003b74 <HAL_RCCEx_PeriphCLKConfig+0x98>
    {
      /* Set the source of SPDIFRX clock*/
      __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifrxClockSelection);
 8003b60:	4b9b      	ldr	r3, [pc, #620]	; (8003dd0 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8003b62:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003b64:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8003b68:	687b      	ldr	r3, [r7, #4]
 8003b6a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003b6c:	4998      	ldr	r1, [pc, #608]	; (8003dd0 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8003b6e:	4313      	orrs	r3, r2
 8003b70:	650b      	str	r3, [r1, #80]	; 0x50
 8003b72:	e001      	b.n	8003b78 <HAL_RCCEx_PeriphCLKConfig+0x9c>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003b74:	7dfb      	ldrb	r3, [r7, #23]
 8003b76:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SAI1 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 8003b78:	687b      	ldr	r3, [r7, #4]
 8003b7a:	681b      	ldr	r3, [r3, #0]
 8003b7c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003b80:	2b00      	cmp	r3, #0
 8003b82:	d03d      	beq.n	8003c00 <HAL_RCCEx_PeriphCLKConfig+0x124>
  {
    switch(PeriphClkInit->Sai1ClockSelection)
 8003b84:	687b      	ldr	r3, [r7, #4]
 8003b86:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003b88:	2b04      	cmp	r3, #4
 8003b8a:	d826      	bhi.n	8003bda <HAL_RCCEx_PeriphCLKConfig+0xfe>
 8003b8c:	a201      	add	r2, pc, #4	; (adr r2, 8003b94 <HAL_RCCEx_PeriphCLKConfig+0xb8>)
 8003b8e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003b92:	bf00      	nop
 8003b94:	08003ba9 	.word	0x08003ba9
 8003b98:	08003bb7 	.word	0x08003bb7
 8003b9c:	08003bc9 	.word	0x08003bc9
 8003ba0:	08003be1 	.word	0x08003be1
 8003ba4:	08003be1 	.word	0x08003be1
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003ba8:	4b89      	ldr	r3, [pc, #548]	; (8003dd0 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8003baa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003bac:	4a88      	ldr	r2, [pc, #544]	; (8003dd0 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8003bae:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003bb2:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8003bb4:	e015      	b.n	8003be2 <HAL_RCCEx_PeriphCLKConfig+0x106>

    case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI1*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8003bb6:	687b      	ldr	r3, [r7, #4]
 8003bb8:	3304      	adds	r3, #4
 8003bba:	2100      	movs	r1, #0
 8003bbc:	4618      	mov	r0, r3
 8003bbe:	f001 f99b 	bl	8004ef8 <RCCEx_PLL2_Config>
 8003bc2:	4603      	mov	r3, r0
 8003bc4:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8003bc6:	e00c      	b.n	8003be2 <HAL_RCCEx_PeriphCLKConfig+0x106>

    case RCC_SAI1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI1*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 8003bc8:	687b      	ldr	r3, [r7, #4]
 8003bca:	3324      	adds	r3, #36	; 0x24
 8003bcc:	2100      	movs	r1, #0
 8003bce:	4618      	mov	r0, r3
 8003bd0:	f001 fa44 	bl	800505c <RCCEx_PLL3_Config>
 8003bd4:	4603      	mov	r3, r0
 8003bd6:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8003bd8:	e003      	b.n	8003be2 <HAL_RCCEx_PeriphCLKConfig+0x106>
      /* HSI, HSE, or CSI oscillator is used as source of SAI1 clock */
      /* SAI1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8003bda:	2301      	movs	r3, #1
 8003bdc:	75fb      	strb	r3, [r7, #23]
      break;
 8003bde:	e000      	b.n	8003be2 <HAL_RCCEx_PeriphCLKConfig+0x106>
      break;
 8003be0:	bf00      	nop
    }

    if(ret == HAL_OK)
 8003be2:	7dfb      	ldrb	r3, [r7, #23]
 8003be4:	2b00      	cmp	r3, #0
 8003be6:	d109      	bne.n	8003bfc <HAL_RCCEx_PeriphCLKConfig+0x120>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8003be8:	4b79      	ldr	r3, [pc, #484]	; (8003dd0 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8003bea:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003bec:	f023 0207 	bic.w	r2, r3, #7
 8003bf0:	687b      	ldr	r3, [r7, #4]
 8003bf2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003bf4:	4976      	ldr	r1, [pc, #472]	; (8003dd0 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8003bf6:	4313      	orrs	r3, r2
 8003bf8:	650b      	str	r3, [r1, #80]	; 0x50
 8003bfa:	e001      	b.n	8003c00 <HAL_RCCEx_PeriphCLKConfig+0x124>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003bfc:	7dfb      	ldrb	r3, [r7, #23]
 8003bfe:	75bb      	strb	r3, [r7, #22]
  }
#endif  /*SAI2B*/

#if defined(SAI4)
  /*---------------------------- SAI4A configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4A) == RCC_PERIPHCLK_SAI4A)
 8003c00:	687b      	ldr	r3, [r7, #4]
 8003c02:	681b      	ldr	r3, [r3, #0]
 8003c04:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003c08:	2b00      	cmp	r3, #0
 8003c0a:	d051      	beq.n	8003cb0 <HAL_RCCEx_PeriphCLKConfig+0x1d4>
  {
    switch(PeriphClkInit->Sai4AClockSelection)
 8003c0c:	687b      	ldr	r3, [r7, #4]
 8003c0e:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 8003c12:	f5b3 0f20 	cmp.w	r3, #10485760	; 0xa00000
 8003c16:	d036      	beq.n	8003c86 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
 8003c18:	f5b3 0f20 	cmp.w	r3, #10485760	; 0xa00000
 8003c1c:	d830      	bhi.n	8003c80 <HAL_RCCEx_PeriphCLKConfig+0x1a4>
 8003c1e:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8003c22:	d032      	beq.n	8003c8a <HAL_RCCEx_PeriphCLKConfig+0x1ae>
 8003c24:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8003c28:	d82a      	bhi.n	8003c80 <HAL_RCCEx_PeriphCLKConfig+0x1a4>
 8003c2a:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 8003c2e:	d02e      	beq.n	8003c8e <HAL_RCCEx_PeriphCLKConfig+0x1b2>
 8003c30:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 8003c34:	d824      	bhi.n	8003c80 <HAL_RCCEx_PeriphCLKConfig+0x1a4>
 8003c36:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003c3a:	d018      	beq.n	8003c6e <HAL_RCCEx_PeriphCLKConfig+0x192>
 8003c3c:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003c40:	d81e      	bhi.n	8003c80 <HAL_RCCEx_PeriphCLKConfig+0x1a4>
 8003c42:	2b00      	cmp	r3, #0
 8003c44:	d003      	beq.n	8003c4e <HAL_RCCEx_PeriphCLKConfig+0x172>
 8003c46:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8003c4a:	d007      	beq.n	8003c5c <HAL_RCCEx_PeriphCLKConfig+0x180>
 8003c4c:	e018      	b.n	8003c80 <HAL_RCCEx_PeriphCLKConfig+0x1a4>
    {
    case RCC_SAI4ACLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003c4e:	4b60      	ldr	r3, [pc, #384]	; (8003dd0 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8003c50:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003c52:	4a5f      	ldr	r2, [pc, #380]	; (8003dd0 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8003c54:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003c58:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8003c5a:	e019      	b.n	8003c90 <HAL_RCCEx_PeriphCLKConfig+0x1b4>

    case RCC_SAI4ACLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8003c5c:	687b      	ldr	r3, [r7, #4]
 8003c5e:	3304      	adds	r3, #4
 8003c60:	2100      	movs	r1, #0
 8003c62:	4618      	mov	r0, r3
 8003c64:	f001 f948 	bl	8004ef8 <RCCEx_PLL2_Config>
 8003c68:	4603      	mov	r3, r0
 8003c6a:	75fb      	strb	r3, [r7, #23]

      /* SAI2 clock source configuration done later after clock selection check */
      break;
 8003c6c:	e010      	b.n	8003c90 <HAL_RCCEx_PeriphCLKConfig+0x1b4>

    case RCC_SAI4ACLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 8003c6e:	687b      	ldr	r3, [r7, #4]
 8003c70:	3324      	adds	r3, #36	; 0x24
 8003c72:	2100      	movs	r1, #0
 8003c74:	4618      	mov	r0, r3
 8003c76:	f001 f9f1 	bl	800505c <RCCEx_PLL3_Config>
 8003c7a:	4603      	mov	r3, r0
 8003c7c:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8003c7e:	e007      	b.n	8003c90 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
      /* SAI4A clock source configuration done later after clock selection check */
      break;
#endif /* RCC_VER_3_0 */

    default:
      ret = HAL_ERROR;
 8003c80:	2301      	movs	r3, #1
 8003c82:	75fb      	strb	r3, [r7, #23]
      break;
 8003c84:	e004      	b.n	8003c90 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
      break;
 8003c86:	bf00      	nop
 8003c88:	e002      	b.n	8003c90 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
      break;
 8003c8a:	bf00      	nop
 8003c8c:	e000      	b.n	8003c90 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
      break;
 8003c8e:	bf00      	nop
    }

    if(ret == HAL_OK)
 8003c90:	7dfb      	ldrb	r3, [r7, #23]
 8003c92:	2b00      	cmp	r3, #0
 8003c94:	d10a      	bne.n	8003cac <HAL_RCCEx_PeriphCLKConfig+0x1d0>
    {
      /* Set the source of SAI4A clock*/
      __HAL_RCC_SAI4A_CONFIG(PeriphClkInit->Sai4AClockSelection);
 8003c96:	4b4e      	ldr	r3, [pc, #312]	; (8003dd0 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8003c98:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003c9a:	f423 0260 	bic.w	r2, r3, #14680064	; 0xe00000
 8003c9e:	687b      	ldr	r3, [r7, #4]
 8003ca0:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 8003ca4:	494a      	ldr	r1, [pc, #296]	; (8003dd0 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8003ca6:	4313      	orrs	r3, r2
 8003ca8:	658b      	str	r3, [r1, #88]	; 0x58
 8003caa:	e001      	b.n	8003cb0 <HAL_RCCEx_PeriphCLKConfig+0x1d4>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003cac:	7dfb      	ldrb	r3, [r7, #23]
 8003cae:	75bb      	strb	r3, [r7, #22]
    }
  }
  /*---------------------------- SAI4B configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4B) == RCC_PERIPHCLK_SAI4B)
 8003cb0:	687b      	ldr	r3, [r7, #4]
 8003cb2:	681b      	ldr	r3, [r3, #0]
 8003cb4:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003cb8:	2b00      	cmp	r3, #0
 8003cba:	d051      	beq.n	8003d60 <HAL_RCCEx_PeriphCLKConfig+0x284>
  {
    switch(PeriphClkInit->Sai4BClockSelection)
 8003cbc:	687b      	ldr	r3, [r7, #4]
 8003cbe:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8003cc2:	f1b3 6fa0 	cmp.w	r3, #83886080	; 0x5000000
 8003cc6:	d036      	beq.n	8003d36 <HAL_RCCEx_PeriphCLKConfig+0x25a>
 8003cc8:	f1b3 6fa0 	cmp.w	r3, #83886080	; 0x5000000
 8003ccc:	d830      	bhi.n	8003d30 <HAL_RCCEx_PeriphCLKConfig+0x254>
 8003cce:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8003cd2:	d032      	beq.n	8003d3a <HAL_RCCEx_PeriphCLKConfig+0x25e>
 8003cd4:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8003cd8:	d82a      	bhi.n	8003d30 <HAL_RCCEx_PeriphCLKConfig+0x254>
 8003cda:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8003cde:	d02e      	beq.n	8003d3e <HAL_RCCEx_PeriphCLKConfig+0x262>
 8003ce0:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8003ce4:	d824      	bhi.n	8003d30 <HAL_RCCEx_PeriphCLKConfig+0x254>
 8003ce6:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8003cea:	d018      	beq.n	8003d1e <HAL_RCCEx_PeriphCLKConfig+0x242>
 8003cec:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8003cf0:	d81e      	bhi.n	8003d30 <HAL_RCCEx_PeriphCLKConfig+0x254>
 8003cf2:	2b00      	cmp	r3, #0
 8003cf4:	d003      	beq.n	8003cfe <HAL_RCCEx_PeriphCLKConfig+0x222>
 8003cf6:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8003cfa:	d007      	beq.n	8003d0c <HAL_RCCEx_PeriphCLKConfig+0x230>
 8003cfc:	e018      	b.n	8003d30 <HAL_RCCEx_PeriphCLKConfig+0x254>
    {
    case RCC_SAI4BCLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003cfe:	4b34      	ldr	r3, [pc, #208]	; (8003dd0 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8003d00:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003d02:	4a33      	ldr	r2, [pc, #204]	; (8003dd0 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8003d04:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003d08:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8003d0a:	e019      	b.n	8003d40 <HAL_RCCEx_PeriphCLKConfig+0x264>

    case RCC_SAI4BCLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8003d0c:	687b      	ldr	r3, [r7, #4]
 8003d0e:	3304      	adds	r3, #4
 8003d10:	2100      	movs	r1, #0
 8003d12:	4618      	mov	r0, r3
 8003d14:	f001 f8f0 	bl	8004ef8 <RCCEx_PLL2_Config>
 8003d18:	4603      	mov	r3, r0
 8003d1a:	75fb      	strb	r3, [r7, #23]

      /* SAI2 clock source configuration done later after clock selection check */
      break;
 8003d1c:	e010      	b.n	8003d40 <HAL_RCCEx_PeriphCLKConfig+0x264>

    case RCC_SAI4BCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8003d1e:	687b      	ldr	r3, [r7, #4]
 8003d20:	3324      	adds	r3, #36	; 0x24
 8003d22:	2100      	movs	r1, #0
 8003d24:	4618      	mov	r0, r3
 8003d26:	f001 f999 	bl	800505c <RCCEx_PLL3_Config>
 8003d2a:	4603      	mov	r3, r0
 8003d2c:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8003d2e:	e007      	b.n	8003d40 <HAL_RCCEx_PeriphCLKConfig+0x264>
      /* SAI4B clock source configuration done later after clock selection check */
      break;
#endif /* RCC_VER_3_0 */

    default:
      ret = HAL_ERROR;
 8003d30:	2301      	movs	r3, #1
 8003d32:	75fb      	strb	r3, [r7, #23]
      break;
 8003d34:	e004      	b.n	8003d40 <HAL_RCCEx_PeriphCLKConfig+0x264>
      break;
 8003d36:	bf00      	nop
 8003d38:	e002      	b.n	8003d40 <HAL_RCCEx_PeriphCLKConfig+0x264>
      break;
 8003d3a:	bf00      	nop
 8003d3c:	e000      	b.n	8003d40 <HAL_RCCEx_PeriphCLKConfig+0x264>
      break;
 8003d3e:	bf00      	nop
    }

    if(ret == HAL_OK)
 8003d40:	7dfb      	ldrb	r3, [r7, #23]
 8003d42:	2b00      	cmp	r3, #0
 8003d44:	d10a      	bne.n	8003d5c <HAL_RCCEx_PeriphCLKConfig+0x280>
    {
      /* Set the source of SAI4B clock*/
      __HAL_RCC_SAI4B_CONFIG(PeriphClkInit->Sai4BClockSelection);
 8003d46:	4b22      	ldr	r3, [pc, #136]	; (8003dd0 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8003d48:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003d4a:	f023 62e0 	bic.w	r2, r3, #117440512	; 0x7000000
 8003d4e:	687b      	ldr	r3, [r7, #4]
 8003d50:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8003d54:	491e      	ldr	r1, [pc, #120]	; (8003dd0 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8003d56:	4313      	orrs	r3, r2
 8003d58:	658b      	str	r3, [r1, #88]	; 0x58
 8003d5a:	e001      	b.n	8003d60 <HAL_RCCEx_PeriphCLKConfig+0x284>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003d5c:	7dfb      	ldrb	r3, [r7, #23]
 8003d5e:	75bb      	strb	r3, [r7, #22]
  }
#endif  /*QUADSPI*/

#if defined(OCTOSPI1) || defined(OCTOSPI2)
  /*---------------------------- OCTOSPI configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_OSPI) == RCC_PERIPHCLK_OSPI)
 8003d60:	687b      	ldr	r3, [r7, #4]
 8003d62:	681b      	ldr	r3, [r3, #0]
 8003d64:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003d68:	2b00      	cmp	r3, #0
 8003d6a:	d035      	beq.n	8003dd8 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
  {
    switch(PeriphClkInit->OspiClockSelection)
 8003d6c:	687b      	ldr	r3, [r7, #4]
 8003d6e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003d70:	2b30      	cmp	r3, #48	; 0x30
 8003d72:	d01c      	beq.n	8003dae <HAL_RCCEx_PeriphCLKConfig+0x2d2>
 8003d74:	2b30      	cmp	r3, #48	; 0x30
 8003d76:	d817      	bhi.n	8003da8 <HAL_RCCEx_PeriphCLKConfig+0x2cc>
 8003d78:	2b20      	cmp	r3, #32
 8003d7a:	d00c      	beq.n	8003d96 <HAL_RCCEx_PeriphCLKConfig+0x2ba>
 8003d7c:	2b20      	cmp	r3, #32
 8003d7e:	d813      	bhi.n	8003da8 <HAL_RCCEx_PeriphCLKConfig+0x2cc>
 8003d80:	2b00      	cmp	r3, #0
 8003d82:	d016      	beq.n	8003db2 <HAL_RCCEx_PeriphCLKConfig+0x2d6>
 8003d84:	2b10      	cmp	r3, #16
 8003d86:	d10f      	bne.n	8003da8 <HAL_RCCEx_PeriphCLKConfig+0x2cc>
    {
    case RCC_OSPICLKSOURCE_PLL:      /* PLL is used as clock source for OSPI*/
      /* Enable OSPI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003d88:	4b11      	ldr	r3, [pc, #68]	; (8003dd0 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8003d8a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003d8c:	4a10      	ldr	r2, [pc, #64]	; (8003dd0 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8003d8e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003d92:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* OSPI clock source configuration done later after clock selection check */
      break;
 8003d94:	e00e      	b.n	8003db4 <HAL_RCCEx_PeriphCLKConfig+0x2d8>

    case RCC_OSPICLKSOURCE_PLL2: /* PLL2 is used as clock source for OSPI*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 8003d96:	687b      	ldr	r3, [r7, #4]
 8003d98:	3304      	adds	r3, #4
 8003d9a:	2102      	movs	r1, #2
 8003d9c:	4618      	mov	r0, r3
 8003d9e:	f001 f8ab 	bl	8004ef8 <RCCEx_PLL2_Config>
 8003da2:	4603      	mov	r3, r0
 8003da4:	75fb      	strb	r3, [r7, #23]

      /* OSPI clock source configuration done later after clock selection check */
      break;
 8003da6:	e005      	b.n	8003db4 <HAL_RCCEx_PeriphCLKConfig+0x2d8>
    case RCC_OSPICLKSOURCE_HCLK:
      /* HCLK clock selected as OSPI kernel peripheral clock */
      break;

    default:
      ret = HAL_ERROR;
 8003da8:	2301      	movs	r3, #1
 8003daa:	75fb      	strb	r3, [r7, #23]
      break;
 8003dac:	e002      	b.n	8003db4 <HAL_RCCEx_PeriphCLKConfig+0x2d8>
      break;
 8003dae:	bf00      	nop
 8003db0:	e000      	b.n	8003db4 <HAL_RCCEx_PeriphCLKConfig+0x2d8>
      break;
 8003db2:	bf00      	nop
    }

    if(ret == HAL_OK)
 8003db4:	7dfb      	ldrb	r3, [r7, #23]
 8003db6:	2b00      	cmp	r3, #0
 8003db8:	d10c      	bne.n	8003dd4 <HAL_RCCEx_PeriphCLKConfig+0x2f8>
    {
      /* Set the source of OSPI clock*/
      __HAL_RCC_OSPI_CONFIG(PeriphClkInit->OspiClockSelection);
 8003dba:	4b05      	ldr	r3, [pc, #20]	; (8003dd0 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8003dbc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003dbe:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8003dc2:	687b      	ldr	r3, [r7, #4]
 8003dc4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003dc6:	4902      	ldr	r1, [pc, #8]	; (8003dd0 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8003dc8:	4313      	orrs	r3, r2
 8003dca:	64cb      	str	r3, [r1, #76]	; 0x4c
 8003dcc:	e004      	b.n	8003dd8 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
 8003dce:	bf00      	nop
 8003dd0:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003dd4:	7dfb      	ldrb	r3, [r7, #23]
 8003dd6:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif  /*OCTOSPI*/

  /*---------------------------- SPI1/2/3 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI123) == RCC_PERIPHCLK_SPI123)
 8003dd8:	687b      	ldr	r3, [r7, #4]
 8003dda:	681b      	ldr	r3, [r3, #0]
 8003ddc:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8003de0:	2b00      	cmp	r3, #0
 8003de2:	d047      	beq.n	8003e74 <HAL_RCCEx_PeriphCLKConfig+0x398>
  {
    switch(PeriphClkInit->Spi123ClockSelection)
 8003de4:	687b      	ldr	r3, [r7, #4]
 8003de6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003de8:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8003dec:	d030      	beq.n	8003e50 <HAL_RCCEx_PeriphCLKConfig+0x374>
 8003dee:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8003df2:	d82a      	bhi.n	8003e4a <HAL_RCCEx_PeriphCLKConfig+0x36e>
 8003df4:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8003df8:	d02c      	beq.n	8003e54 <HAL_RCCEx_PeriphCLKConfig+0x378>
 8003dfa:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8003dfe:	d824      	bhi.n	8003e4a <HAL_RCCEx_PeriphCLKConfig+0x36e>
 8003e00:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003e04:	d018      	beq.n	8003e38 <HAL_RCCEx_PeriphCLKConfig+0x35c>
 8003e06:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003e0a:	d81e      	bhi.n	8003e4a <HAL_RCCEx_PeriphCLKConfig+0x36e>
 8003e0c:	2b00      	cmp	r3, #0
 8003e0e:	d003      	beq.n	8003e18 <HAL_RCCEx_PeriphCLKConfig+0x33c>
 8003e10:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003e14:	d007      	beq.n	8003e26 <HAL_RCCEx_PeriphCLKConfig+0x34a>
 8003e16:	e018      	b.n	8003e4a <HAL_RCCEx_PeriphCLKConfig+0x36e>
    {
    case RCC_SPI123CLKSOURCE_PLL:      /* PLL is used as clock source for SPI1/2/3 */
      /* Enable SPI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003e18:	4bac      	ldr	r3, [pc, #688]	; (80040cc <HAL_RCCEx_PeriphCLKConfig+0x5f0>)
 8003e1a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003e1c:	4aab      	ldr	r2, [pc, #684]	; (80040cc <HAL_RCCEx_PeriphCLKConfig+0x5f0>)
 8003e1e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003e22:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 8003e24:	e017      	b.n	8003e56 <HAL_RCCEx_PeriphCLKConfig+0x37a>

    case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI1/2/3 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8003e26:	687b      	ldr	r3, [r7, #4]
 8003e28:	3304      	adds	r3, #4
 8003e2a:	2100      	movs	r1, #0
 8003e2c:	4618      	mov	r0, r3
 8003e2e:	f001 f863 	bl	8004ef8 <RCCEx_PLL2_Config>
 8003e32:	4603      	mov	r3, r0
 8003e34:	75fb      	strb	r3, [r7, #23]

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 8003e36:	e00e      	b.n	8003e56 <HAL_RCCEx_PeriphCLKConfig+0x37a>

    case RCC_SPI123CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI1/2/3 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 8003e38:	687b      	ldr	r3, [r7, #4]
 8003e3a:	3324      	adds	r3, #36	; 0x24
 8003e3c:	2100      	movs	r1, #0
 8003e3e:	4618      	mov	r0, r3
 8003e40:	f001 f90c 	bl	800505c <RCCEx_PLL3_Config>
 8003e44:	4603      	mov	r3, r0
 8003e46:	75fb      	strb	r3, [r7, #23]

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 8003e48:	e005      	b.n	8003e56 <HAL_RCCEx_PeriphCLKConfig+0x37a>
      /* HSI, HSE, or CSI oscillator is used as source of SPI1/2/3 clock */
      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8003e4a:	2301      	movs	r3, #1
 8003e4c:	75fb      	strb	r3, [r7, #23]
      break;
 8003e4e:	e002      	b.n	8003e56 <HAL_RCCEx_PeriphCLKConfig+0x37a>
      break;
 8003e50:	bf00      	nop
 8003e52:	e000      	b.n	8003e56 <HAL_RCCEx_PeriphCLKConfig+0x37a>
      break;
 8003e54:	bf00      	nop
    }

    if(ret == HAL_OK)
 8003e56:	7dfb      	ldrb	r3, [r7, #23]
 8003e58:	2b00      	cmp	r3, #0
 8003e5a:	d109      	bne.n	8003e70 <HAL_RCCEx_PeriphCLKConfig+0x394>
    {
      /* Set the source of SPI1/2/3 clock*/
      __HAL_RCC_SPI123_CONFIG(PeriphClkInit->Spi123ClockSelection);
 8003e5c:	4b9b      	ldr	r3, [pc, #620]	; (80040cc <HAL_RCCEx_PeriphCLKConfig+0x5f0>)
 8003e5e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003e60:	f423 42e0 	bic.w	r2, r3, #28672	; 0x7000
 8003e64:	687b      	ldr	r3, [r7, #4]
 8003e66:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003e68:	4998      	ldr	r1, [pc, #608]	; (80040cc <HAL_RCCEx_PeriphCLKConfig+0x5f0>)
 8003e6a:	4313      	orrs	r3, r2
 8003e6c:	650b      	str	r3, [r1, #80]	; 0x50
 8003e6e:	e001      	b.n	8003e74 <HAL_RCCEx_PeriphCLKConfig+0x398>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003e70:	7dfb      	ldrb	r3, [r7, #23]
 8003e72:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SPI4/5 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) == RCC_PERIPHCLK_SPI45)
 8003e74:	687b      	ldr	r3, [r7, #4]
 8003e76:	681b      	ldr	r3, [r3, #0]
 8003e78:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8003e7c:	2b00      	cmp	r3, #0
 8003e7e:	d049      	beq.n	8003f14 <HAL_RCCEx_PeriphCLKConfig+0x438>
  {
    switch(PeriphClkInit->Spi45ClockSelection)
 8003e80:	687b      	ldr	r3, [r7, #4]
 8003e82:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003e84:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8003e88:	d02e      	beq.n	8003ee8 <HAL_RCCEx_PeriphCLKConfig+0x40c>
 8003e8a:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8003e8e:	d828      	bhi.n	8003ee2 <HAL_RCCEx_PeriphCLKConfig+0x406>
 8003e90:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8003e94:	d02a      	beq.n	8003eec <HAL_RCCEx_PeriphCLKConfig+0x410>
 8003e96:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8003e9a:	d822      	bhi.n	8003ee2 <HAL_RCCEx_PeriphCLKConfig+0x406>
 8003e9c:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8003ea0:	d026      	beq.n	8003ef0 <HAL_RCCEx_PeriphCLKConfig+0x414>
 8003ea2:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8003ea6:	d81c      	bhi.n	8003ee2 <HAL_RCCEx_PeriphCLKConfig+0x406>
 8003ea8:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8003eac:	d010      	beq.n	8003ed0 <HAL_RCCEx_PeriphCLKConfig+0x3f4>
 8003eae:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8003eb2:	d816      	bhi.n	8003ee2 <HAL_RCCEx_PeriphCLKConfig+0x406>
 8003eb4:	2b00      	cmp	r3, #0
 8003eb6:	d01d      	beq.n	8003ef4 <HAL_RCCEx_PeriphCLKConfig+0x418>
 8003eb8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003ebc:	d111      	bne.n	8003ee2 <HAL_RCCEx_PeriphCLKConfig+0x406>
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;

    case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI4/5 */

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8003ebe:	687b      	ldr	r3, [r7, #4]
 8003ec0:	3304      	adds	r3, #4
 8003ec2:	2101      	movs	r1, #1
 8003ec4:	4618      	mov	r0, r3
 8003ec6:	f001 f817 	bl	8004ef8 <RCCEx_PLL2_Config>
 8003eca:	4603      	mov	r3, r0
 8003ecc:	75fb      	strb	r3, [r7, #23]

      /* SPI4/5 clock source configuration done later after clock selection check */
      break;
 8003ece:	e012      	b.n	8003ef6 <HAL_RCCEx_PeriphCLKConfig+0x41a>
    case RCC_SPI45CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI4/5 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8003ed0:	687b      	ldr	r3, [r7, #4]
 8003ed2:	3324      	adds	r3, #36	; 0x24
 8003ed4:	2101      	movs	r1, #1
 8003ed6:	4618      	mov	r0, r3
 8003ed8:	f001 f8c0 	bl	800505c <RCCEx_PLL3_Config>
 8003edc:	4603      	mov	r3, r0
 8003ede:	75fb      	strb	r3, [r7, #23]
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;
 8003ee0:	e009      	b.n	8003ef6 <HAL_RCCEx_PeriphCLKConfig+0x41a>
      /* HSE,  oscillator is used as source of SPI4/5 clock */
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8003ee2:	2301      	movs	r3, #1
 8003ee4:	75fb      	strb	r3, [r7, #23]
      break;
 8003ee6:	e006      	b.n	8003ef6 <HAL_RCCEx_PeriphCLKConfig+0x41a>
      break;
 8003ee8:	bf00      	nop
 8003eea:	e004      	b.n	8003ef6 <HAL_RCCEx_PeriphCLKConfig+0x41a>
      break;
 8003eec:	bf00      	nop
 8003eee:	e002      	b.n	8003ef6 <HAL_RCCEx_PeriphCLKConfig+0x41a>
      break;
 8003ef0:	bf00      	nop
 8003ef2:	e000      	b.n	8003ef6 <HAL_RCCEx_PeriphCLKConfig+0x41a>
      break;
 8003ef4:	bf00      	nop
    }

    if(ret == HAL_OK)
 8003ef6:	7dfb      	ldrb	r3, [r7, #23]
 8003ef8:	2b00      	cmp	r3, #0
 8003efa:	d109      	bne.n	8003f10 <HAL_RCCEx_PeriphCLKConfig+0x434>
    {
      /* Set the source of SPI4/5 clock*/
      __HAL_RCC_SPI45_CONFIG(PeriphClkInit->Spi45ClockSelection);
 8003efc:	4b73      	ldr	r3, [pc, #460]	; (80040cc <HAL_RCCEx_PeriphCLKConfig+0x5f0>)
 8003efe:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003f00:	f423 22e0 	bic.w	r2, r3, #458752	; 0x70000
 8003f04:	687b      	ldr	r3, [r7, #4]
 8003f06:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003f08:	4970      	ldr	r1, [pc, #448]	; (80040cc <HAL_RCCEx_PeriphCLKConfig+0x5f0>)
 8003f0a:	4313      	orrs	r3, r2
 8003f0c:	650b      	str	r3, [r1, #80]	; 0x50
 8003f0e:	e001      	b.n	8003f14 <HAL_RCCEx_PeriphCLKConfig+0x438>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003f10:	7dfb      	ldrb	r3, [r7, #23]
 8003f12:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SPI6 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 8003f14:	687b      	ldr	r3, [r7, #4]
 8003f16:	681b      	ldr	r3, [r3, #0]
 8003f18:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003f1c:	2b00      	cmp	r3, #0
 8003f1e:	d04b      	beq.n	8003fb8 <HAL_RCCEx_PeriphCLKConfig+0x4dc>
  {
    switch(PeriphClkInit->Spi6ClockSelection)
 8003f20:	687b      	ldr	r3, [r7, #4]
 8003f22:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 8003f26:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8003f2a:	d02e      	beq.n	8003f8a <HAL_RCCEx_PeriphCLKConfig+0x4ae>
 8003f2c:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8003f30:	d828      	bhi.n	8003f84 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
 8003f32:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003f36:	d02a      	beq.n	8003f8e <HAL_RCCEx_PeriphCLKConfig+0x4b2>
 8003f38:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003f3c:	d822      	bhi.n	8003f84 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
 8003f3e:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8003f42:	d026      	beq.n	8003f92 <HAL_RCCEx_PeriphCLKConfig+0x4b6>
 8003f44:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8003f48:	d81c      	bhi.n	8003f84 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
 8003f4a:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8003f4e:	d010      	beq.n	8003f72 <HAL_RCCEx_PeriphCLKConfig+0x496>
 8003f50:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8003f54:	d816      	bhi.n	8003f84 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
 8003f56:	2b00      	cmp	r3, #0
 8003f58:	d01d      	beq.n	8003f96 <HAL_RCCEx_PeriphCLKConfig+0x4ba>
 8003f5a:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8003f5e:	d111      	bne.n	8003f84 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
      /* SPI6 clock source configuration done later after clock selection check */
      break;

    case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI6*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8003f60:	687b      	ldr	r3, [r7, #4]
 8003f62:	3304      	adds	r3, #4
 8003f64:	2101      	movs	r1, #1
 8003f66:	4618      	mov	r0, r3
 8003f68:	f000 ffc6 	bl	8004ef8 <RCCEx_PLL2_Config>
 8003f6c:	4603      	mov	r3, r0
 8003f6e:	75fb      	strb	r3, [r7, #23]

      /* SPI6 clock source configuration done later after clock selection check */
      break;
 8003f70:	e012      	b.n	8003f98 <HAL_RCCEx_PeriphCLKConfig+0x4bc>
    case RCC_SPI6CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI6*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8003f72:	687b      	ldr	r3, [r7, #4]
 8003f74:	3324      	adds	r3, #36	; 0x24
 8003f76:	2101      	movs	r1, #1
 8003f78:	4618      	mov	r0, r3
 8003f7a:	f001 f86f 	bl	800505c <RCCEx_PLL3_Config>
 8003f7e:	4603      	mov	r3, r0
 8003f80:	75fb      	strb	r3, [r7, #23]
      /* SPI6 clock source configuration done later after clock selection check */
      break;
 8003f82:	e009      	b.n	8003f98 <HAL_RCCEx_PeriphCLKConfig+0x4bc>
      /* SPI6 clock source configuration done later after clock selection check */
      break;
#endif

    default:
      ret = HAL_ERROR;
 8003f84:	2301      	movs	r3, #1
 8003f86:	75fb      	strb	r3, [r7, #23]
      break;
 8003f88:	e006      	b.n	8003f98 <HAL_RCCEx_PeriphCLKConfig+0x4bc>
      break;
 8003f8a:	bf00      	nop
 8003f8c:	e004      	b.n	8003f98 <HAL_RCCEx_PeriphCLKConfig+0x4bc>
      break;
 8003f8e:	bf00      	nop
 8003f90:	e002      	b.n	8003f98 <HAL_RCCEx_PeriphCLKConfig+0x4bc>
      break;
 8003f92:	bf00      	nop
 8003f94:	e000      	b.n	8003f98 <HAL_RCCEx_PeriphCLKConfig+0x4bc>
      break;
 8003f96:	bf00      	nop
    }

    if(ret == HAL_OK)
 8003f98:	7dfb      	ldrb	r3, [r7, #23]
 8003f9a:	2b00      	cmp	r3, #0
 8003f9c:	d10a      	bne.n	8003fb4 <HAL_RCCEx_PeriphCLKConfig+0x4d8>
    {
      /* Set the source of SPI6 clock*/
      __HAL_RCC_SPI6_CONFIG(PeriphClkInit->Spi6ClockSelection);
 8003f9e:	4b4b      	ldr	r3, [pc, #300]	; (80040cc <HAL_RCCEx_PeriphCLKConfig+0x5f0>)
 8003fa0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003fa2:	f023 42e0 	bic.w	r2, r3, #1879048192	; 0x70000000
 8003fa6:	687b      	ldr	r3, [r7, #4]
 8003fa8:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 8003fac:	4947      	ldr	r1, [pc, #284]	; (80040cc <HAL_RCCEx_PeriphCLKConfig+0x5f0>)
 8003fae:	4313      	orrs	r3, r2
 8003fb0:	658b      	str	r3, [r1, #88]	; 0x58
 8003fb2:	e001      	b.n	8003fb8 <HAL_RCCEx_PeriphCLKConfig+0x4dc>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003fb4:	7dfb      	ldrb	r3, [r7, #23]
 8003fb6:	75bb      	strb	r3, [r7, #22]
  }
#endif /*DSI*/

#if defined(FDCAN1) || defined(FDCAN2)
  /*---------------------------- FDCAN configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8003fb8:	687b      	ldr	r3, [r7, #4]
 8003fba:	681b      	ldr	r3, [r3, #0]
 8003fbc:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8003fc0:	2b00      	cmp	r3, #0
 8003fc2:	d02f      	beq.n	8004024 <HAL_RCCEx_PeriphCLKConfig+0x548>
  {
    switch(PeriphClkInit->FdcanClockSelection)
 8003fc4:	687b      	ldr	r3, [r7, #4]
 8003fc6:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8003fc8:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8003fcc:	d00e      	beq.n	8003fec <HAL_RCCEx_PeriphCLKConfig+0x510>
 8003fce:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8003fd2:	d814      	bhi.n	8003ffe <HAL_RCCEx_PeriphCLKConfig+0x522>
 8003fd4:	2b00      	cmp	r3, #0
 8003fd6:	d015      	beq.n	8004004 <HAL_RCCEx_PeriphCLKConfig+0x528>
 8003fd8:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8003fdc:	d10f      	bne.n	8003ffe <HAL_RCCEx_PeriphCLKConfig+0x522>
    {
    case RCC_FDCANCLKSOURCE_PLL:      /* PLL is used as clock source for FDCAN*/
      /* Enable FDCAN Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003fde:	4b3b      	ldr	r3, [pc, #236]	; (80040cc <HAL_RCCEx_PeriphCLKConfig+0x5f0>)
 8003fe0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003fe2:	4a3a      	ldr	r2, [pc, #232]	; (80040cc <HAL_RCCEx_PeriphCLKConfig+0x5f0>)
 8003fe4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003fe8:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* FDCAN clock source configuration done later after clock selection check */
      break;
 8003fea:	e00c      	b.n	8004006 <HAL_RCCEx_PeriphCLKConfig+0x52a>

    case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is used as clock source for FDCAN*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8003fec:	687b      	ldr	r3, [r7, #4]
 8003fee:	3304      	adds	r3, #4
 8003ff0:	2101      	movs	r1, #1
 8003ff2:	4618      	mov	r0, r3
 8003ff4:	f000 ff80 	bl	8004ef8 <RCCEx_PLL2_Config>
 8003ff8:	4603      	mov	r3, r0
 8003ffa:	75fb      	strb	r3, [r7, #23]

      /* FDCAN clock source configuration done later after clock selection check */
      break;
 8003ffc:	e003      	b.n	8004006 <HAL_RCCEx_PeriphCLKConfig+0x52a>
      /* HSE is used as clock source for FDCAN*/
      /* FDCAN clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8003ffe:	2301      	movs	r3, #1
 8004000:	75fb      	strb	r3, [r7, #23]
      break;
 8004002:	e000      	b.n	8004006 <HAL_RCCEx_PeriphCLKConfig+0x52a>
      break;
 8004004:	bf00      	nop
    }

    if(ret == HAL_OK)
 8004006:	7dfb      	ldrb	r3, [r7, #23]
 8004008:	2b00      	cmp	r3, #0
 800400a:	d109      	bne.n	8004020 <HAL_RCCEx_PeriphCLKConfig+0x544>
    {
      /* Set the source of FDCAN clock*/
      __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 800400c:	4b2f      	ldr	r3, [pc, #188]	; (80040cc <HAL_RCCEx_PeriphCLKConfig+0x5f0>)
 800400e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004010:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8004014:	687b      	ldr	r3, [r7, #4]
 8004016:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8004018:	492c      	ldr	r1, [pc, #176]	; (80040cc <HAL_RCCEx_PeriphCLKConfig+0x5f0>)
 800401a:	4313      	orrs	r3, r2
 800401c:	650b      	str	r3, [r1, #80]	; 0x50
 800401e:	e001      	b.n	8004024 <HAL_RCCEx_PeriphCLKConfig+0x548>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004020:	7dfb      	ldrb	r3, [r7, #23]
 8004022:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif /*FDCAN1 || FDCAN2*/

  /*---------------------------- FMC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
 8004024:	687b      	ldr	r3, [r7, #4]
 8004026:	681b      	ldr	r3, [r3, #0]
 8004028:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800402c:	2b00      	cmp	r3, #0
 800402e:	d032      	beq.n	8004096 <HAL_RCCEx_PeriphCLKConfig+0x5ba>
  {
    switch(PeriphClkInit->FmcClockSelection)
 8004030:	687b      	ldr	r3, [r7, #4]
 8004032:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004034:	2b03      	cmp	r3, #3
 8004036:	d81b      	bhi.n	8004070 <HAL_RCCEx_PeriphCLKConfig+0x594>
 8004038:	a201      	add	r2, pc, #4	; (adr r2, 8004040 <HAL_RCCEx_PeriphCLKConfig+0x564>)
 800403a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800403e:	bf00      	nop
 8004040:	08004077 	.word	0x08004077
 8004044:	08004051 	.word	0x08004051
 8004048:	0800405f 	.word	0x0800405f
 800404c:	08004077 	.word	0x08004077
    {
    case RCC_FMCCLKSOURCE_PLL:      /* PLL is used as clock source for FMC*/
      /* Enable FMC Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8004050:	4b1e      	ldr	r3, [pc, #120]	; (80040cc <HAL_RCCEx_PeriphCLKConfig+0x5f0>)
 8004052:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004054:	4a1d      	ldr	r2, [pc, #116]	; (80040cc <HAL_RCCEx_PeriphCLKConfig+0x5f0>)
 8004056:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800405a:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* FMC clock source configuration done later after clock selection check */
      break;
 800405c:	e00c      	b.n	8004078 <HAL_RCCEx_PeriphCLKConfig+0x59c>

    case RCC_FMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for FMC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 800405e:	687b      	ldr	r3, [r7, #4]
 8004060:	3304      	adds	r3, #4
 8004062:	2102      	movs	r1, #2
 8004064:	4618      	mov	r0, r3
 8004066:	f000 ff47 	bl	8004ef8 <RCCEx_PLL2_Config>
 800406a:	4603      	mov	r3, r0
 800406c:	75fb      	strb	r3, [r7, #23]

      /* FMC clock source configuration done later after clock selection check */
      break;
 800406e:	e003      	b.n	8004078 <HAL_RCCEx_PeriphCLKConfig+0x59c>
    case RCC_FMCCLKSOURCE_HCLK:
      /* D1/CD HCLK  clock selected as FMC kernel peripheral clock */
      break;

    default:
      ret = HAL_ERROR;
 8004070:	2301      	movs	r3, #1
 8004072:	75fb      	strb	r3, [r7, #23]
      break;
 8004074:	e000      	b.n	8004078 <HAL_RCCEx_PeriphCLKConfig+0x59c>
      break;
 8004076:	bf00      	nop
    }

    if(ret == HAL_OK)
 8004078:	7dfb      	ldrb	r3, [r7, #23]
 800407a:	2b00      	cmp	r3, #0
 800407c:	d109      	bne.n	8004092 <HAL_RCCEx_PeriphCLKConfig+0x5b6>
    {
      /* Set the source of FMC clock*/
      __HAL_RCC_FMC_CONFIG(PeriphClkInit->FmcClockSelection);
 800407e:	4b13      	ldr	r3, [pc, #76]	; (80040cc <HAL_RCCEx_PeriphCLKConfig+0x5f0>)
 8004080:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004082:	f023 0203 	bic.w	r2, r3, #3
 8004086:	687b      	ldr	r3, [r7, #4]
 8004088:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800408a:	4910      	ldr	r1, [pc, #64]	; (80040cc <HAL_RCCEx_PeriphCLKConfig+0x5f0>)
 800408c:	4313      	orrs	r3, r2
 800408e:	64cb      	str	r3, [r1, #76]	; 0x4c
 8004090:	e001      	b.n	8004096 <HAL_RCCEx_PeriphCLKConfig+0x5ba>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004092:	7dfb      	ldrb	r3, [r7, #23]
 8004094:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8004096:	687b      	ldr	r3, [r7, #4]
 8004098:	681b      	ldr	r3, [r3, #0]
 800409a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800409e:	2b00      	cmp	r3, #0
 80040a0:	f000 808a 	beq.w	80041b8 <HAL_RCCEx_PeriphCLKConfig+0x6dc>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80040a4:	4b0a      	ldr	r3, [pc, #40]	; (80040d0 <HAL_RCCEx_PeriphCLKConfig+0x5f4>)
 80040a6:	681b      	ldr	r3, [r3, #0]
 80040a8:	4a09      	ldr	r2, [pc, #36]	; (80040d0 <HAL_RCCEx_PeriphCLKConfig+0x5f4>)
 80040aa:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80040ae:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 80040b0:	f7fd fb58 	bl	8001764 <HAL_GetTick>
 80040b4:	6138      	str	r0, [r7, #16]

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80040b6:	e00d      	b.n	80040d4 <HAL_RCCEx_PeriphCLKConfig+0x5f8>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80040b8:	f7fd fb54 	bl	8001764 <HAL_GetTick>
 80040bc:	4602      	mov	r2, r0
 80040be:	693b      	ldr	r3, [r7, #16]
 80040c0:	1ad3      	subs	r3, r2, r3
 80040c2:	2b64      	cmp	r3, #100	; 0x64
 80040c4:	d906      	bls.n	80040d4 <HAL_RCCEx_PeriphCLKConfig+0x5f8>
      {
        ret = HAL_TIMEOUT;
 80040c6:	2303      	movs	r3, #3
 80040c8:	75fb      	strb	r3, [r7, #23]
        break;
 80040ca:	e009      	b.n	80040e0 <HAL_RCCEx_PeriphCLKConfig+0x604>
 80040cc:	58024400 	.word	0x58024400
 80040d0:	58024800 	.word	0x58024800
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80040d4:	4bb9      	ldr	r3, [pc, #740]	; (80043bc <HAL_RCCEx_PeriphCLKConfig+0x8e0>)
 80040d6:	681b      	ldr	r3, [r3, #0]
 80040d8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80040dc:	2b00      	cmp	r3, #0
 80040de:	d0eb      	beq.n	80040b8 <HAL_RCCEx_PeriphCLKConfig+0x5dc>
      }
    }

    if(ret == HAL_OK)
 80040e0:	7dfb      	ldrb	r3, [r7, #23]
 80040e2:	2b00      	cmp	r3, #0
 80040e4:	d166      	bne.n	80041b4 <HAL_RCCEx_PeriphCLKConfig+0x6d8>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if((RCC->BDCR & RCC_BDCR_RTCSEL) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL))
 80040e6:	4bb6      	ldr	r3, [pc, #728]	; (80043c0 <HAL_RCCEx_PeriphCLKConfig+0x8e4>)
 80040e8:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 80040ea:	687b      	ldr	r3, [r7, #4]
 80040ec:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 80040f0:	4053      	eors	r3, r2
 80040f2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80040f6:	2b00      	cmp	r3, #0
 80040f8:	d013      	beq.n	8004122 <HAL_RCCEx_PeriphCLKConfig+0x646>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 80040fa:	4bb1      	ldr	r3, [pc, #708]	; (80043c0 <HAL_RCCEx_PeriphCLKConfig+0x8e4>)
 80040fc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80040fe:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004102:	60fb      	str	r3, [r7, #12]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8004104:	4bae      	ldr	r3, [pc, #696]	; (80043c0 <HAL_RCCEx_PeriphCLKConfig+0x8e4>)
 8004106:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004108:	4aad      	ldr	r2, [pc, #692]	; (80043c0 <HAL_RCCEx_PeriphCLKConfig+0x8e4>)
 800410a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800410e:	6713      	str	r3, [r2, #112]	; 0x70
        __HAL_RCC_BACKUPRESET_RELEASE();
 8004110:	4bab      	ldr	r3, [pc, #684]	; (80043c0 <HAL_RCCEx_PeriphCLKConfig+0x8e4>)
 8004112:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004114:	4aaa      	ldr	r2, [pc, #680]	; (80043c0 <HAL_RCCEx_PeriphCLKConfig+0x8e4>)
 8004116:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800411a:	6713      	str	r3, [r2, #112]	; 0x70
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpreg;
 800411c:	4aa8      	ldr	r2, [pc, #672]	; (80043c0 <HAL_RCCEx_PeriphCLKConfig+0x8e4>)
 800411e:	68fb      	ldr	r3, [r7, #12]
 8004120:	6713      	str	r3, [r2, #112]	; 0x70
      }

      /* If LSE is selected as RTC clock source (and enabled prior to Backup Domain reset), wait for LSE reactivation */
      if(PeriphClkInit->RTCClockSelection == RCC_RTCCLKSOURCE_LSE)
 8004122:	687b      	ldr	r3, [r7, #4]
 8004124:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 8004128:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800412c:	d115      	bne.n	800415a <HAL_RCCEx_PeriphCLKConfig+0x67e>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800412e:	f7fd fb19 	bl	8001764 <HAL_GetTick>
 8004132:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8004134:	e00b      	b.n	800414e <HAL_RCCEx_PeriphCLKConfig+0x672>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004136:	f7fd fb15 	bl	8001764 <HAL_GetTick>
 800413a:	4602      	mov	r2, r0
 800413c:	693b      	ldr	r3, [r7, #16]
 800413e:	1ad3      	subs	r3, r2, r3
 8004140:	f241 3288 	movw	r2, #5000	; 0x1388
 8004144:	4293      	cmp	r3, r2
 8004146:	d902      	bls.n	800414e <HAL_RCCEx_PeriphCLKConfig+0x672>
          {
            ret = HAL_TIMEOUT;
 8004148:	2303      	movs	r3, #3
 800414a:	75fb      	strb	r3, [r7, #23]
            break;
 800414c:	e005      	b.n	800415a <HAL_RCCEx_PeriphCLKConfig+0x67e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800414e:	4b9c      	ldr	r3, [pc, #624]	; (80043c0 <HAL_RCCEx_PeriphCLKConfig+0x8e4>)
 8004150:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004152:	f003 0302 	and.w	r3, r3, #2
 8004156:	2b00      	cmp	r3, #0
 8004158:	d0ed      	beq.n	8004136 <HAL_RCCEx_PeriphCLKConfig+0x65a>
          }
        }
      }

      if(ret == HAL_OK)
 800415a:	7dfb      	ldrb	r3, [r7, #23]
 800415c:	2b00      	cmp	r3, #0
 800415e:	d126      	bne.n	80041ae <HAL_RCCEx_PeriphCLKConfig+0x6d2>
      {
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8004160:	687b      	ldr	r3, [r7, #4]
 8004162:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 8004166:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800416a:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800416e:	d10d      	bne.n	800418c <HAL_RCCEx_PeriphCLKConfig+0x6b0>
 8004170:	4b93      	ldr	r3, [pc, #588]	; (80043c0 <HAL_RCCEx_PeriphCLKConfig+0x8e4>)
 8004172:	691b      	ldr	r3, [r3, #16]
 8004174:	f423 527c 	bic.w	r2, r3, #16128	; 0x3f00
 8004178:	687b      	ldr	r3, [r7, #4]
 800417a:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 800417e:	0919      	lsrs	r1, r3, #4
 8004180:	4b90      	ldr	r3, [pc, #576]	; (80043c4 <HAL_RCCEx_PeriphCLKConfig+0x8e8>)
 8004182:	400b      	ands	r3, r1
 8004184:	498e      	ldr	r1, [pc, #568]	; (80043c0 <HAL_RCCEx_PeriphCLKConfig+0x8e4>)
 8004186:	4313      	orrs	r3, r2
 8004188:	610b      	str	r3, [r1, #16]
 800418a:	e005      	b.n	8004198 <HAL_RCCEx_PeriphCLKConfig+0x6bc>
 800418c:	4b8c      	ldr	r3, [pc, #560]	; (80043c0 <HAL_RCCEx_PeriphCLKConfig+0x8e4>)
 800418e:	691b      	ldr	r3, [r3, #16]
 8004190:	4a8b      	ldr	r2, [pc, #556]	; (80043c0 <HAL_RCCEx_PeriphCLKConfig+0x8e4>)
 8004192:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 8004196:	6113      	str	r3, [r2, #16]
 8004198:	4b89      	ldr	r3, [pc, #548]	; (80043c0 <HAL_RCCEx_PeriphCLKConfig+0x8e4>)
 800419a:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 800419c:	687b      	ldr	r3, [r7, #4]
 800419e:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 80041a2:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80041a6:	4986      	ldr	r1, [pc, #536]	; (80043c0 <HAL_RCCEx_PeriphCLKConfig+0x8e4>)
 80041a8:	4313      	orrs	r3, r2
 80041aa:	670b      	str	r3, [r1, #112]	; 0x70
 80041ac:	e004      	b.n	80041b8 <HAL_RCCEx_PeriphCLKConfig+0x6dc>
      }
      else
      {
        /* set overall return value */
        status = ret;
 80041ae:	7dfb      	ldrb	r3, [r7, #23]
 80041b0:	75bb      	strb	r3, [r7, #22]
 80041b2:	e001      	b.n	80041b8 <HAL_RCCEx_PeriphCLKConfig+0x6dc>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 80041b4:	7dfb      	ldrb	r3, [r7, #23]
 80041b6:	75bb      	strb	r3, [r7, #22]
    }
  }


  /*-------------------------- USART1/6 configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
 80041b8:	687b      	ldr	r3, [r7, #4]
 80041ba:	681b      	ldr	r3, [r3, #0]
 80041bc:	f003 0301 	and.w	r3, r3, #1
 80041c0:	2b00      	cmp	r3, #0
 80041c2:	d07e      	beq.n	80042c2 <HAL_RCCEx_PeriphCLKConfig+0x7e6>
  {
    switch(PeriphClkInit->Usart16ClockSelection)
 80041c4:	687b      	ldr	r3, [r7, #4]
 80041c6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80041c8:	2b28      	cmp	r3, #40	; 0x28
 80041ca:	d867      	bhi.n	800429c <HAL_RCCEx_PeriphCLKConfig+0x7c0>
 80041cc:	a201      	add	r2, pc, #4	; (adr r2, 80041d4 <HAL_RCCEx_PeriphCLKConfig+0x6f8>)
 80041ce:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80041d2:	bf00      	nop
 80041d4:	080042a3 	.word	0x080042a3
 80041d8:	0800429d 	.word	0x0800429d
 80041dc:	0800429d 	.word	0x0800429d
 80041e0:	0800429d 	.word	0x0800429d
 80041e4:	0800429d 	.word	0x0800429d
 80041e8:	0800429d 	.word	0x0800429d
 80041ec:	0800429d 	.word	0x0800429d
 80041f0:	0800429d 	.word	0x0800429d
 80041f4:	08004279 	.word	0x08004279
 80041f8:	0800429d 	.word	0x0800429d
 80041fc:	0800429d 	.word	0x0800429d
 8004200:	0800429d 	.word	0x0800429d
 8004204:	0800429d 	.word	0x0800429d
 8004208:	0800429d 	.word	0x0800429d
 800420c:	0800429d 	.word	0x0800429d
 8004210:	0800429d 	.word	0x0800429d
 8004214:	0800428b 	.word	0x0800428b
 8004218:	0800429d 	.word	0x0800429d
 800421c:	0800429d 	.word	0x0800429d
 8004220:	0800429d 	.word	0x0800429d
 8004224:	0800429d 	.word	0x0800429d
 8004228:	0800429d 	.word	0x0800429d
 800422c:	0800429d 	.word	0x0800429d
 8004230:	0800429d 	.word	0x0800429d
 8004234:	080042a3 	.word	0x080042a3
 8004238:	0800429d 	.word	0x0800429d
 800423c:	0800429d 	.word	0x0800429d
 8004240:	0800429d 	.word	0x0800429d
 8004244:	0800429d 	.word	0x0800429d
 8004248:	0800429d 	.word	0x0800429d
 800424c:	0800429d 	.word	0x0800429d
 8004250:	0800429d 	.word	0x0800429d
 8004254:	080042a3 	.word	0x080042a3
 8004258:	0800429d 	.word	0x0800429d
 800425c:	0800429d 	.word	0x0800429d
 8004260:	0800429d 	.word	0x0800429d
 8004264:	0800429d 	.word	0x0800429d
 8004268:	0800429d 	.word	0x0800429d
 800426c:	0800429d 	.word	0x0800429d
 8004270:	0800429d 	.word	0x0800429d
 8004274:	080042a3 	.word	0x080042a3
    case RCC_USART16CLKSOURCE_PCLK2: /* CD/D2 PCLK2 as clock source for USART1/6 */
      /* USART1/6 clock source configuration done later after clock selection check */
      break;

    case RCC_USART16CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART1/6 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8004278:	687b      	ldr	r3, [r7, #4]
 800427a:	3304      	adds	r3, #4
 800427c:	2101      	movs	r1, #1
 800427e:	4618      	mov	r0, r3
 8004280:	f000 fe3a 	bl	8004ef8 <RCCEx_PLL2_Config>
 8004284:	4603      	mov	r3, r0
 8004286:	75fb      	strb	r3, [r7, #23]
      /* USART1/6 clock source configuration done later after clock selection check */
      break;
 8004288:	e00c      	b.n	80042a4 <HAL_RCCEx_PeriphCLKConfig+0x7c8>

    case RCC_USART16CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART1/6 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 800428a:	687b      	ldr	r3, [r7, #4]
 800428c:	3324      	adds	r3, #36	; 0x24
 800428e:	2101      	movs	r1, #1
 8004290:	4618      	mov	r0, r3
 8004292:	f000 fee3 	bl	800505c <RCCEx_PLL3_Config>
 8004296:	4603      	mov	r3, r0
 8004298:	75fb      	strb	r3, [r7, #23]
      /* USART1/6 clock source configuration done later after clock selection check */
      break;
 800429a:	e003      	b.n	80042a4 <HAL_RCCEx_PeriphCLKConfig+0x7c8>
      /* LSE,  oscillator is used as source of USART1/6 clock */
      /* USART1/6 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800429c:	2301      	movs	r3, #1
 800429e:	75fb      	strb	r3, [r7, #23]
      break;
 80042a0:	e000      	b.n	80042a4 <HAL_RCCEx_PeriphCLKConfig+0x7c8>
      break;
 80042a2:	bf00      	nop
    }

    if(ret == HAL_OK)
 80042a4:	7dfb      	ldrb	r3, [r7, #23]
 80042a6:	2b00      	cmp	r3, #0
 80042a8:	d109      	bne.n	80042be <HAL_RCCEx_PeriphCLKConfig+0x7e2>
    {
      /* Set the source of USART1/6 clock */
      __HAL_RCC_USART16_CONFIG(PeriphClkInit->Usart16ClockSelection);
 80042aa:	4b45      	ldr	r3, [pc, #276]	; (80043c0 <HAL_RCCEx_PeriphCLKConfig+0x8e4>)
 80042ac:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80042ae:	f023 0238 	bic.w	r2, r3, #56	; 0x38
 80042b2:	687b      	ldr	r3, [r7, #4]
 80042b4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80042b6:	4942      	ldr	r1, [pc, #264]	; (80043c0 <HAL_RCCEx_PeriphCLKConfig+0x8e4>)
 80042b8:	4313      	orrs	r3, r2
 80042ba:	654b      	str	r3, [r1, #84]	; 0x54
 80042bc:	e001      	b.n	80042c2 <HAL_RCCEx_PeriphCLKConfig+0x7e6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80042be:	7dfb      	ldrb	r3, [r7, #23]
 80042c0:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*-------------------------- USART2/3/4/5/7/8 Configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
 80042c2:	687b      	ldr	r3, [r7, #4]
 80042c4:	681b      	ldr	r3, [r3, #0]
 80042c6:	f003 0302 	and.w	r3, r3, #2
 80042ca:	2b00      	cmp	r3, #0
 80042cc:	d037      	beq.n	800433e <HAL_RCCEx_PeriphCLKConfig+0x862>
  {
    switch(PeriphClkInit->Usart234578ClockSelection)
 80042ce:	687b      	ldr	r3, [r7, #4]
 80042d0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80042d2:	2b05      	cmp	r3, #5
 80042d4:	d820      	bhi.n	8004318 <HAL_RCCEx_PeriphCLKConfig+0x83c>
 80042d6:	a201      	add	r2, pc, #4	; (adr r2, 80042dc <HAL_RCCEx_PeriphCLKConfig+0x800>)
 80042d8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80042dc:	0800431f 	.word	0x0800431f
 80042e0:	080042f5 	.word	0x080042f5
 80042e4:	08004307 	.word	0x08004307
 80042e8:	0800431f 	.word	0x0800431f
 80042ec:	0800431f 	.word	0x0800431f
 80042f0:	0800431f 	.word	0x0800431f
    case RCC_USART234578CLKSOURCE_PCLK1: /* CD/D2 PCLK1 as clock source for USART2/3/4/5/7/8 */
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;

    case RCC_USART234578CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART2/3/4/5/7/8 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 80042f4:	687b      	ldr	r3, [r7, #4]
 80042f6:	3304      	adds	r3, #4
 80042f8:	2101      	movs	r1, #1
 80042fa:	4618      	mov	r0, r3
 80042fc:	f000 fdfc 	bl	8004ef8 <RCCEx_PLL2_Config>
 8004300:	4603      	mov	r3, r0
 8004302:	75fb      	strb	r3, [r7, #23]
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;
 8004304:	e00c      	b.n	8004320 <HAL_RCCEx_PeriphCLKConfig+0x844>

    case RCC_USART234578CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART2/3/4/5/7/8 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8004306:	687b      	ldr	r3, [r7, #4]
 8004308:	3324      	adds	r3, #36	; 0x24
 800430a:	2101      	movs	r1, #1
 800430c:	4618      	mov	r0, r3
 800430e:	f000 fea5 	bl	800505c <RCCEx_PLL3_Config>
 8004312:	4603      	mov	r3, r0
 8004314:	75fb      	strb	r3, [r7, #23]
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;
 8004316:	e003      	b.n	8004320 <HAL_RCCEx_PeriphCLKConfig+0x844>
      /* LSE,  oscillator is used as source of USART2/3/4/5/7/8 clock */
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8004318:	2301      	movs	r3, #1
 800431a:	75fb      	strb	r3, [r7, #23]
      break;
 800431c:	e000      	b.n	8004320 <HAL_RCCEx_PeriphCLKConfig+0x844>
      break;
 800431e:	bf00      	nop
    }

    if(ret == HAL_OK)
 8004320:	7dfb      	ldrb	r3, [r7, #23]
 8004322:	2b00      	cmp	r3, #0
 8004324:	d109      	bne.n	800433a <HAL_RCCEx_PeriphCLKConfig+0x85e>
    {
      /* Set the source of USART2/3/4/5/7/8 clock */
      __HAL_RCC_USART234578_CONFIG(PeriphClkInit->Usart234578ClockSelection);
 8004326:	4b26      	ldr	r3, [pc, #152]	; (80043c0 <HAL_RCCEx_PeriphCLKConfig+0x8e4>)
 8004328:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800432a:	f023 0207 	bic.w	r2, r3, #7
 800432e:	687b      	ldr	r3, [r7, #4]
 8004330:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004332:	4923      	ldr	r1, [pc, #140]	; (80043c0 <HAL_RCCEx_PeriphCLKConfig+0x8e4>)
 8004334:	4313      	orrs	r3, r2
 8004336:	654b      	str	r3, [r1, #84]	; 0x54
 8004338:	e001      	b.n	800433e <HAL_RCCEx_PeriphCLKConfig+0x862>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800433a:	7dfb      	ldrb	r3, [r7, #23]
 800433c:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*-------------------------- LPUART1 Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 800433e:	687b      	ldr	r3, [r7, #4]
 8004340:	681b      	ldr	r3, [r3, #0]
 8004342:	f003 0304 	and.w	r3, r3, #4
 8004346:	2b00      	cmp	r3, #0
 8004348:	d040      	beq.n	80043cc <HAL_RCCEx_PeriphCLKConfig+0x8f0>
  {
    switch(PeriphClkInit->Lpuart1ClockSelection)
 800434a:	687b      	ldr	r3, [r7, #4]
 800434c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8004350:	2b05      	cmp	r3, #5
 8004352:	d821      	bhi.n	8004398 <HAL_RCCEx_PeriphCLKConfig+0x8bc>
 8004354:	a201      	add	r2, pc, #4	; (adr r2, 800435c <HAL_RCCEx_PeriphCLKConfig+0x880>)
 8004356:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800435a:	bf00      	nop
 800435c:	0800439f 	.word	0x0800439f
 8004360:	08004375 	.word	0x08004375
 8004364:	08004387 	.word	0x08004387
 8004368:	0800439f 	.word	0x0800439f
 800436c:	0800439f 	.word	0x0800439f
 8004370:	0800439f 	.word	0x0800439f
    case RCC_LPUART1CLKSOURCE_PCLK4: /* SRD/D3 PCLK1 (PCLK4) as clock source for LPUART1 */
      /* LPUART1 clock source configuration done later after clock selection check */
      break;

    case RCC_LPUART1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPUART1 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8004374:	687b      	ldr	r3, [r7, #4]
 8004376:	3304      	adds	r3, #4
 8004378:	2101      	movs	r1, #1
 800437a:	4618      	mov	r0, r3
 800437c:	f000 fdbc 	bl	8004ef8 <RCCEx_PLL2_Config>
 8004380:	4603      	mov	r3, r0
 8004382:	75fb      	strb	r3, [r7, #23]
      /* LPUART1 clock source configuration done later after clock selection check */
      break;
 8004384:	e00c      	b.n	80043a0 <HAL_RCCEx_PeriphCLKConfig+0x8c4>

    case RCC_LPUART1CLKSOURCE_PLL3: /* PLL3 is used as clock source for LPUART1 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8004386:	687b      	ldr	r3, [r7, #4]
 8004388:	3324      	adds	r3, #36	; 0x24
 800438a:	2101      	movs	r1, #1
 800438c:	4618      	mov	r0, r3
 800438e:	f000 fe65 	bl	800505c <RCCEx_PLL3_Config>
 8004392:	4603      	mov	r3, r0
 8004394:	75fb      	strb	r3, [r7, #23]
      /* LPUART1 clock source configuration done later after clock selection check */
      break;
 8004396:	e003      	b.n	80043a0 <HAL_RCCEx_PeriphCLKConfig+0x8c4>
      /* LSE,  oscillator is used as source of LPUART1 clock */
      /* LPUART1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8004398:	2301      	movs	r3, #1
 800439a:	75fb      	strb	r3, [r7, #23]
      break;
 800439c:	e000      	b.n	80043a0 <HAL_RCCEx_PeriphCLKConfig+0x8c4>
      break;
 800439e:	bf00      	nop
    }

    if(ret == HAL_OK)
 80043a0:	7dfb      	ldrb	r3, [r7, #23]
 80043a2:	2b00      	cmp	r3, #0
 80043a4:	d110      	bne.n	80043c8 <HAL_RCCEx_PeriphCLKConfig+0x8ec>
    {
      /* Set the source of LPUART1 clock */
      __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 80043a6:	4b06      	ldr	r3, [pc, #24]	; (80043c0 <HAL_RCCEx_PeriphCLKConfig+0x8e4>)
 80043a8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80043aa:	f023 0207 	bic.w	r2, r3, #7
 80043ae:	687b      	ldr	r3, [r7, #4]
 80043b0:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80043b4:	4902      	ldr	r1, [pc, #8]	; (80043c0 <HAL_RCCEx_PeriphCLKConfig+0x8e4>)
 80043b6:	4313      	orrs	r3, r2
 80043b8:	658b      	str	r3, [r1, #88]	; 0x58
 80043ba:	e007      	b.n	80043cc <HAL_RCCEx_PeriphCLKConfig+0x8f0>
 80043bc:	58024800 	.word	0x58024800
 80043c0:	58024400 	.word	0x58024400
 80043c4:	00ffffcf 	.word	0x00ffffcf
    }
    else
    {
      /* set overall return value */
      status = ret;
 80043c8:	7dfb      	ldrb	r3, [r7, #23]
 80043ca:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM1 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 80043cc:	687b      	ldr	r3, [r7, #4]
 80043ce:	681b      	ldr	r3, [r3, #0]
 80043d0:	f003 0320 	and.w	r3, r3, #32
 80043d4:	2b00      	cmp	r3, #0
 80043d6:	d04b      	beq.n	8004470 <HAL_RCCEx_PeriphCLKConfig+0x994>
  {
    switch(PeriphClkInit->Lptim1ClockSelection)
 80043d8:	687b      	ldr	r3, [r7, #4]
 80043da:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80043de:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80043e2:	d02e      	beq.n	8004442 <HAL_RCCEx_PeriphCLKConfig+0x966>
 80043e4:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80043e8:	d828      	bhi.n	800443c <HAL_RCCEx_PeriphCLKConfig+0x960>
 80043ea:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80043ee:	d02a      	beq.n	8004446 <HAL_RCCEx_PeriphCLKConfig+0x96a>
 80043f0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80043f4:	d822      	bhi.n	800443c <HAL_RCCEx_PeriphCLKConfig+0x960>
 80043f6:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 80043fa:	d026      	beq.n	800444a <HAL_RCCEx_PeriphCLKConfig+0x96e>
 80043fc:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8004400:	d81c      	bhi.n	800443c <HAL_RCCEx_PeriphCLKConfig+0x960>
 8004402:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8004406:	d010      	beq.n	800442a <HAL_RCCEx_PeriphCLKConfig+0x94e>
 8004408:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800440c:	d816      	bhi.n	800443c <HAL_RCCEx_PeriphCLKConfig+0x960>
 800440e:	2b00      	cmp	r3, #0
 8004410:	d01d      	beq.n	800444e <HAL_RCCEx_PeriphCLKConfig+0x972>
 8004412:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8004416:	d111      	bne.n	800443c <HAL_RCCEx_PeriphCLKConfig+0x960>
      /* LPTIM1 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM1*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8004418:	687b      	ldr	r3, [r7, #4]
 800441a:	3304      	adds	r3, #4
 800441c:	2100      	movs	r1, #0
 800441e:	4618      	mov	r0, r3
 8004420:	f000 fd6a 	bl	8004ef8 <RCCEx_PLL2_Config>
 8004424:	4603      	mov	r3, r0
 8004426:	75fb      	strb	r3, [r7, #23]

      /* LPTIM1 clock source configuration done later after clock selection check */
      break;
 8004428:	e012      	b.n	8004450 <HAL_RCCEx_PeriphCLKConfig+0x974>

    case RCC_LPTIM1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM1*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 800442a:	687b      	ldr	r3, [r7, #4]
 800442c:	3324      	adds	r3, #36	; 0x24
 800442e:	2102      	movs	r1, #2
 8004430:	4618      	mov	r0, r3
 8004432:	f000 fe13 	bl	800505c <RCCEx_PLL3_Config>
 8004436:	4603      	mov	r3, r0
 8004438:	75fb      	strb	r3, [r7, #23]

      /* LPTIM1 clock source configuration done later after clock selection check */
      break;
 800443a:	e009      	b.n	8004450 <HAL_RCCEx_PeriphCLKConfig+0x974>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM1 clock */
      /* LPTIM1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800443c:	2301      	movs	r3, #1
 800443e:	75fb      	strb	r3, [r7, #23]
      break;
 8004440:	e006      	b.n	8004450 <HAL_RCCEx_PeriphCLKConfig+0x974>
      break;
 8004442:	bf00      	nop
 8004444:	e004      	b.n	8004450 <HAL_RCCEx_PeriphCLKConfig+0x974>
      break;
 8004446:	bf00      	nop
 8004448:	e002      	b.n	8004450 <HAL_RCCEx_PeriphCLKConfig+0x974>
      break;
 800444a:	bf00      	nop
 800444c:	e000      	b.n	8004450 <HAL_RCCEx_PeriphCLKConfig+0x974>
      break;
 800444e:	bf00      	nop
    }

    if(ret == HAL_OK)
 8004450:	7dfb      	ldrb	r3, [r7, #23]
 8004452:	2b00      	cmp	r3, #0
 8004454:	d10a      	bne.n	800446c <HAL_RCCEx_PeriphCLKConfig+0x990>
    {
      /* Set the source of LPTIM1 clock*/
      __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8004456:	4bb2      	ldr	r3, [pc, #712]	; (8004720 <HAL_RCCEx_PeriphCLKConfig+0xc44>)
 8004458:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800445a:	f023 42e0 	bic.w	r2, r3, #1879048192	; 0x70000000
 800445e:	687b      	ldr	r3, [r7, #4]
 8004460:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004464:	49ae      	ldr	r1, [pc, #696]	; (8004720 <HAL_RCCEx_PeriphCLKConfig+0xc44>)
 8004466:	4313      	orrs	r3, r2
 8004468:	654b      	str	r3, [r1, #84]	; 0x54
 800446a:	e001      	b.n	8004470 <HAL_RCCEx_PeriphCLKConfig+0x994>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800446c:	7dfb      	ldrb	r3, [r7, #23]
 800446e:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM2 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 8004470:	687b      	ldr	r3, [r7, #4]
 8004472:	681b      	ldr	r3, [r3, #0]
 8004474:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004478:	2b00      	cmp	r3, #0
 800447a:	d04b      	beq.n	8004514 <HAL_RCCEx_PeriphCLKConfig+0xa38>
  {
    switch(PeriphClkInit->Lptim2ClockSelection)
 800447c:	687b      	ldr	r3, [r7, #4]
 800447e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004482:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 8004486:	d02e      	beq.n	80044e6 <HAL_RCCEx_PeriphCLKConfig+0xa0a>
 8004488:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 800448c:	d828      	bhi.n	80044e0 <HAL_RCCEx_PeriphCLKConfig+0xa04>
 800448e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004492:	d02a      	beq.n	80044ea <HAL_RCCEx_PeriphCLKConfig+0xa0e>
 8004494:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004498:	d822      	bhi.n	80044e0 <HAL_RCCEx_PeriphCLKConfig+0xa04>
 800449a:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800449e:	d026      	beq.n	80044ee <HAL_RCCEx_PeriphCLKConfig+0xa12>
 80044a0:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 80044a4:	d81c      	bhi.n	80044e0 <HAL_RCCEx_PeriphCLKConfig+0xa04>
 80044a6:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80044aa:	d010      	beq.n	80044ce <HAL_RCCEx_PeriphCLKConfig+0x9f2>
 80044ac:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80044b0:	d816      	bhi.n	80044e0 <HAL_RCCEx_PeriphCLKConfig+0xa04>
 80044b2:	2b00      	cmp	r3, #0
 80044b4:	d01d      	beq.n	80044f2 <HAL_RCCEx_PeriphCLKConfig+0xa16>
 80044b6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80044ba:	d111      	bne.n	80044e0 <HAL_RCCEx_PeriphCLKConfig+0xa04>
      /* LPTIM2 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM2CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 80044bc:	687b      	ldr	r3, [r7, #4]
 80044be:	3304      	adds	r3, #4
 80044c0:	2100      	movs	r1, #0
 80044c2:	4618      	mov	r0, r3
 80044c4:	f000 fd18 	bl	8004ef8 <RCCEx_PLL2_Config>
 80044c8:	4603      	mov	r3, r0
 80044ca:	75fb      	strb	r3, [r7, #23]

      /* LPTIM2 clock source configuration done later after clock selection check */
      break;
 80044cc:	e012      	b.n	80044f4 <HAL_RCCEx_PeriphCLKConfig+0xa18>

    case RCC_LPTIM2CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 80044ce:	687b      	ldr	r3, [r7, #4]
 80044d0:	3324      	adds	r3, #36	; 0x24
 80044d2:	2102      	movs	r1, #2
 80044d4:	4618      	mov	r0, r3
 80044d6:	f000 fdc1 	bl	800505c <RCCEx_PLL3_Config>
 80044da:	4603      	mov	r3, r0
 80044dc:	75fb      	strb	r3, [r7, #23]

      /* LPTIM2 clock source configuration done later after clock selection check */
      break;
 80044de:	e009      	b.n	80044f4 <HAL_RCCEx_PeriphCLKConfig+0xa18>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM2 clock */
      /* LPTIM2 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80044e0:	2301      	movs	r3, #1
 80044e2:	75fb      	strb	r3, [r7, #23]
      break;
 80044e4:	e006      	b.n	80044f4 <HAL_RCCEx_PeriphCLKConfig+0xa18>
      break;
 80044e6:	bf00      	nop
 80044e8:	e004      	b.n	80044f4 <HAL_RCCEx_PeriphCLKConfig+0xa18>
      break;
 80044ea:	bf00      	nop
 80044ec:	e002      	b.n	80044f4 <HAL_RCCEx_PeriphCLKConfig+0xa18>
      break;
 80044ee:	bf00      	nop
 80044f0:	e000      	b.n	80044f4 <HAL_RCCEx_PeriphCLKConfig+0xa18>
      break;
 80044f2:	bf00      	nop
    }

    if(ret == HAL_OK)
 80044f4:	7dfb      	ldrb	r3, [r7, #23]
 80044f6:	2b00      	cmp	r3, #0
 80044f8:	d10a      	bne.n	8004510 <HAL_RCCEx_PeriphCLKConfig+0xa34>
    {
      /* Set the source of LPTIM2 clock*/
      __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 80044fa:	4b89      	ldr	r3, [pc, #548]	; (8004720 <HAL_RCCEx_PeriphCLKConfig+0xc44>)
 80044fc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80044fe:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8004502:	687b      	ldr	r3, [r7, #4]
 8004504:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004508:	4985      	ldr	r1, [pc, #532]	; (8004720 <HAL_RCCEx_PeriphCLKConfig+0xc44>)
 800450a:	4313      	orrs	r3, r2
 800450c:	658b      	str	r3, [r1, #88]	; 0x58
 800450e:	e001      	b.n	8004514 <HAL_RCCEx_PeriphCLKConfig+0xa38>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004510:	7dfb      	ldrb	r3, [r7, #23]
 8004512:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM345 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
 8004514:	687b      	ldr	r3, [r7, #4]
 8004516:	681b      	ldr	r3, [r3, #0]
 8004518:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800451c:	2b00      	cmp	r3, #0
 800451e:	d04b      	beq.n	80045b8 <HAL_RCCEx_PeriphCLKConfig+0xadc>
  {
    switch(PeriphClkInit->Lptim345ClockSelection)
 8004520:	687b      	ldr	r3, [r7, #4]
 8004522:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8004526:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 800452a:	d02e      	beq.n	800458a <HAL_RCCEx_PeriphCLKConfig+0xaae>
 800452c:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 8004530:	d828      	bhi.n	8004584 <HAL_RCCEx_PeriphCLKConfig+0xaa8>
 8004532:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004536:	d02a      	beq.n	800458e <HAL_RCCEx_PeriphCLKConfig+0xab2>
 8004538:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800453c:	d822      	bhi.n	8004584 <HAL_RCCEx_PeriphCLKConfig+0xaa8>
 800453e:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 8004542:	d026      	beq.n	8004592 <HAL_RCCEx_PeriphCLKConfig+0xab6>
 8004544:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 8004548:	d81c      	bhi.n	8004584 <HAL_RCCEx_PeriphCLKConfig+0xaa8>
 800454a:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800454e:	d010      	beq.n	8004572 <HAL_RCCEx_PeriphCLKConfig+0xa96>
 8004550:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8004554:	d816      	bhi.n	8004584 <HAL_RCCEx_PeriphCLKConfig+0xaa8>
 8004556:	2b00      	cmp	r3, #0
 8004558:	d01d      	beq.n	8004596 <HAL_RCCEx_PeriphCLKConfig+0xaba>
 800455a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800455e:	d111      	bne.n	8004584 <HAL_RCCEx_PeriphCLKConfig+0xaa8>
    case RCC_LPTIM345CLKSOURCE_PCLK4:      /* SRD/D3 PCLK1 (PCLK4) as clock source for LPTIM3/4/5 */
      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM345CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM3/4/5 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8004560:	687b      	ldr	r3, [r7, #4]
 8004562:	3304      	adds	r3, #4
 8004564:	2100      	movs	r1, #0
 8004566:	4618      	mov	r0, r3
 8004568:	f000 fcc6 	bl	8004ef8 <RCCEx_PLL2_Config>
 800456c:	4603      	mov	r3, r0
 800456e:	75fb      	strb	r3, [r7, #23]

      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;
 8004570:	e012      	b.n	8004598 <HAL_RCCEx_PeriphCLKConfig+0xabc>

    case RCC_LPTIM345CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM3/4/5 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8004572:	687b      	ldr	r3, [r7, #4]
 8004574:	3324      	adds	r3, #36	; 0x24
 8004576:	2102      	movs	r1, #2
 8004578:	4618      	mov	r0, r3
 800457a:	f000 fd6f 	bl	800505c <RCCEx_PLL3_Config>
 800457e:	4603      	mov	r3, r0
 8004580:	75fb      	strb	r3, [r7, #23]

      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;
 8004582:	e009      	b.n	8004598 <HAL_RCCEx_PeriphCLKConfig+0xabc>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM3/4/5 clock */
      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8004584:	2301      	movs	r3, #1
 8004586:	75fb      	strb	r3, [r7, #23]
      break;
 8004588:	e006      	b.n	8004598 <HAL_RCCEx_PeriphCLKConfig+0xabc>
      break;
 800458a:	bf00      	nop
 800458c:	e004      	b.n	8004598 <HAL_RCCEx_PeriphCLKConfig+0xabc>
      break;
 800458e:	bf00      	nop
 8004590:	e002      	b.n	8004598 <HAL_RCCEx_PeriphCLKConfig+0xabc>
      break;
 8004592:	bf00      	nop
 8004594:	e000      	b.n	8004598 <HAL_RCCEx_PeriphCLKConfig+0xabc>
      break;
 8004596:	bf00      	nop
    }

    if(ret == HAL_OK)
 8004598:	7dfb      	ldrb	r3, [r7, #23]
 800459a:	2b00      	cmp	r3, #0
 800459c:	d10a      	bne.n	80045b4 <HAL_RCCEx_PeriphCLKConfig+0xad8>
    {
      /* Set the source of LPTIM3/4/5 clock */
      __HAL_RCC_LPTIM345_CONFIG(PeriphClkInit->Lptim345ClockSelection);
 800459e:	4b60      	ldr	r3, [pc, #384]	; (8004720 <HAL_RCCEx_PeriphCLKConfig+0xc44>)
 80045a0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80045a2:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80045a6:	687b      	ldr	r3, [r7, #4]
 80045a8:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80045ac:	495c      	ldr	r1, [pc, #368]	; (8004720 <HAL_RCCEx_PeriphCLKConfig+0xc44>)
 80045ae:	4313      	orrs	r3, r2
 80045b0:	658b      	str	r3, [r1, #88]	; 0x58
 80045b2:	e001      	b.n	80045b8 <HAL_RCCEx_PeriphCLKConfig+0xadc>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80045b4:	7dfb      	ldrb	r3, [r7, #23]
 80045b6:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*------------------------------ I2C1/2/3/5* Configuration ------------------------*/
#if defined(I2C5)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1235) == RCC_PERIPHCLK_I2C1235)
 80045b8:	687b      	ldr	r3, [r7, #4]
 80045ba:	681b      	ldr	r3, [r3, #0]
 80045bc:	f003 0308 	and.w	r3, r3, #8
 80045c0:	2b00      	cmp	r3, #0
 80045c2:	d018      	beq.n	80045f6 <HAL_RCCEx_PeriphCLKConfig+0xb1a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1235CLKSOURCE(PeriphClkInit->I2c1235ClockSelection));

    if ((PeriphClkInit->I2c1235ClockSelection )== RCC_I2C1235CLKSOURCE_PLL3 )
 80045c4:	687b      	ldr	r3, [r7, #4]
 80045c6:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80045c8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80045cc:	d10a      	bne.n	80045e4 <HAL_RCCEx_PeriphCLKConfig+0xb08>
    {
        if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!= HAL_OK)
 80045ce:	687b      	ldr	r3, [r7, #4]
 80045d0:	3324      	adds	r3, #36	; 0x24
 80045d2:	2102      	movs	r1, #2
 80045d4:	4618      	mov	r0, r3
 80045d6:	f000 fd41 	bl	800505c <RCCEx_PLL3_Config>
 80045da:	4603      	mov	r3, r0
 80045dc:	2b00      	cmp	r3, #0
 80045de:	d001      	beq.n	80045e4 <HAL_RCCEx_PeriphCLKConfig+0xb08>
        {
          status = HAL_ERROR;
 80045e0:	2301      	movs	r3, #1
 80045e2:	75bb      	strb	r3, [r7, #22]
        }
    }

      __HAL_RCC_I2C1235_CONFIG(PeriphClkInit->I2c1235ClockSelection);
 80045e4:	4b4e      	ldr	r3, [pc, #312]	; (8004720 <HAL_RCCEx_PeriphCLKConfig+0xc44>)
 80045e6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80045e8:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 80045ec:	687b      	ldr	r3, [r7, #4]
 80045ee:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80045f0:	494b      	ldr	r1, [pc, #300]	; (8004720 <HAL_RCCEx_PeriphCLKConfig+0xc44>)
 80045f2:	4313      	orrs	r3, r2
 80045f4:	654b      	str	r3, [r1, #84]	; 0x54

  }
#endif /* I2C5 */

  /*------------------------------ I2C4 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 80045f6:	687b      	ldr	r3, [r7, #4]
 80045f8:	681b      	ldr	r3, [r3, #0]
 80045fa:	f003 0310 	and.w	r3, r3, #16
 80045fe:	2b00      	cmp	r3, #0
 8004600:	d01a      	beq.n	8004638 <HAL_RCCEx_PeriphCLKConfig+0xb5c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    if ((PeriphClkInit->I2c4ClockSelection) == RCC_I2C4CLKSOURCE_PLL3 )
 8004602:	687b      	ldr	r3, [r7, #4]
 8004604:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004608:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800460c:	d10a      	bne.n	8004624 <HAL_RCCEx_PeriphCLKConfig+0xb48>
    {
      if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!= HAL_OK)
 800460e:	687b      	ldr	r3, [r7, #4]
 8004610:	3324      	adds	r3, #36	; 0x24
 8004612:	2102      	movs	r1, #2
 8004614:	4618      	mov	r0, r3
 8004616:	f000 fd21 	bl	800505c <RCCEx_PLL3_Config>
 800461a:	4603      	mov	r3, r0
 800461c:	2b00      	cmp	r3, #0
 800461e:	d001      	beq.n	8004624 <HAL_RCCEx_PeriphCLKConfig+0xb48>
      {
        status = HAL_ERROR;
 8004620:	2301      	movs	r3, #1
 8004622:	75bb      	strb	r3, [r7, #22]
      }
    }

      __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8004624:	4b3e      	ldr	r3, [pc, #248]	; (8004720 <HAL_RCCEx_PeriphCLKConfig+0xc44>)
 8004626:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004628:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800462c:	687b      	ldr	r3, [r7, #4]
 800462e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004632:	493b      	ldr	r1, [pc, #236]	; (8004720 <HAL_RCCEx_PeriphCLKConfig+0xc44>)
 8004634:	4313      	orrs	r3, r2
 8004636:	658b      	str	r3, [r1, #88]	; 0x58

  }

  /*---------------------------- ADC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8004638:	687b      	ldr	r3, [r7, #4]
 800463a:	681b      	ldr	r3, [r3, #0]
 800463c:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8004640:	2b00      	cmp	r3, #0
 8004642:	d034      	beq.n	80046ae <HAL_RCCEx_PeriphCLKConfig+0xbd2>
  {
    switch(PeriphClkInit->AdcClockSelection)
 8004644:	687b      	ldr	r3, [r7, #4]
 8004646:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800464a:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800464e:	d01d      	beq.n	800468c <HAL_RCCEx_PeriphCLKConfig+0xbb0>
 8004650:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8004654:	d817      	bhi.n	8004686 <HAL_RCCEx_PeriphCLKConfig+0xbaa>
 8004656:	2b00      	cmp	r3, #0
 8004658:	d003      	beq.n	8004662 <HAL_RCCEx_PeriphCLKConfig+0xb86>
 800465a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800465e:	d009      	beq.n	8004674 <HAL_RCCEx_PeriphCLKConfig+0xb98>
 8004660:	e011      	b.n	8004686 <HAL_RCCEx_PeriphCLKConfig+0xbaa>
    {

    case RCC_ADCCLKSOURCE_PLL2: /* PLL2 is used as clock source for ADC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8004662:	687b      	ldr	r3, [r7, #4]
 8004664:	3304      	adds	r3, #4
 8004666:	2100      	movs	r1, #0
 8004668:	4618      	mov	r0, r3
 800466a:	f000 fc45 	bl	8004ef8 <RCCEx_PLL2_Config>
 800466e:	4603      	mov	r3, r0
 8004670:	75fb      	strb	r3, [r7, #23]

      /* ADC clock source configuration done later after clock selection check */
      break;
 8004672:	e00c      	b.n	800468e <HAL_RCCEx_PeriphCLKConfig+0xbb2>

    case RCC_ADCCLKSOURCE_PLL3:  /* PLL3 is used as clock source for ADC*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8004674:	687b      	ldr	r3, [r7, #4]
 8004676:	3324      	adds	r3, #36	; 0x24
 8004678:	2102      	movs	r1, #2
 800467a:	4618      	mov	r0, r3
 800467c:	f000 fcee 	bl	800505c <RCCEx_PLL3_Config>
 8004680:	4603      	mov	r3, r0
 8004682:	75fb      	strb	r3, [r7, #23]

      /* ADC clock source configuration done later after clock selection check */
      break;
 8004684:	e003      	b.n	800468e <HAL_RCCEx_PeriphCLKConfig+0xbb2>
      /* HSI, HSE, or CSI oscillator is used as source of ADC clock */
      /* ADC clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8004686:	2301      	movs	r3, #1
 8004688:	75fb      	strb	r3, [r7, #23]
      break;
 800468a:	e000      	b.n	800468e <HAL_RCCEx_PeriphCLKConfig+0xbb2>
      break;
 800468c:	bf00      	nop
    }

    if(ret == HAL_OK)
 800468e:	7dfb      	ldrb	r3, [r7, #23]
 8004690:	2b00      	cmp	r3, #0
 8004692:	d10a      	bne.n	80046aa <HAL_RCCEx_PeriphCLKConfig+0xbce>
    {
      /* Set the source of ADC clock*/
      __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8004694:	4b22      	ldr	r3, [pc, #136]	; (8004720 <HAL_RCCEx_PeriphCLKConfig+0xc44>)
 8004696:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004698:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 800469c:	687b      	ldr	r3, [r7, #4]
 800469e:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80046a2:	491f      	ldr	r1, [pc, #124]	; (8004720 <HAL_RCCEx_PeriphCLKConfig+0xc44>)
 80046a4:	4313      	orrs	r3, r2
 80046a6:	658b      	str	r3, [r1, #88]	; 0x58
 80046a8:	e001      	b.n	80046ae <HAL_RCCEx_PeriphCLKConfig+0xbd2>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80046aa:	7dfb      	ldrb	r3, [r7, #23]
 80046ac:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*------------------------------ USB Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 80046ae:	687b      	ldr	r3, [r7, #4]
 80046b0:	681b      	ldr	r3, [r3, #0]
 80046b2:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80046b6:	2b00      	cmp	r3, #0
 80046b8:	d036      	beq.n	8004728 <HAL_RCCEx_PeriphCLKConfig+0xc4c>
  {

    switch(PeriphClkInit->UsbClockSelection)
 80046ba:	687b      	ldr	r3, [r7, #4]
 80046bc:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80046c0:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 80046c4:	d01c      	beq.n	8004700 <HAL_RCCEx_PeriphCLKConfig+0xc24>
 80046c6:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 80046ca:	d816      	bhi.n	80046fa <HAL_RCCEx_PeriphCLKConfig+0xc1e>
 80046cc:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80046d0:	d003      	beq.n	80046da <HAL_RCCEx_PeriphCLKConfig+0xbfe>
 80046d2:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80046d6:	d007      	beq.n	80046e8 <HAL_RCCEx_PeriphCLKConfig+0xc0c>
 80046d8:	e00f      	b.n	80046fa <HAL_RCCEx_PeriphCLKConfig+0xc1e>
    {
    case RCC_USBCLKSOURCE_PLL:      /* PLL is used as clock source for USB*/
      /* Enable USB Clock output generated form System USB . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80046da:	4b11      	ldr	r3, [pc, #68]	; (8004720 <HAL_RCCEx_PeriphCLKConfig+0xc44>)
 80046dc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80046de:	4a10      	ldr	r2, [pc, #64]	; (8004720 <HAL_RCCEx_PeriphCLKConfig+0xc44>)
 80046e0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80046e4:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* USB clock source configuration done later after clock selection check */
      break;
 80046e6:	e00c      	b.n	8004702 <HAL_RCCEx_PeriphCLKConfig+0xc26>

    case RCC_USBCLKSOURCE_PLL3: /* PLL3 is used as clock source for USB*/

      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 80046e8:	687b      	ldr	r3, [r7, #4]
 80046ea:	3324      	adds	r3, #36	; 0x24
 80046ec:	2101      	movs	r1, #1
 80046ee:	4618      	mov	r0, r3
 80046f0:	f000 fcb4 	bl	800505c <RCCEx_PLL3_Config>
 80046f4:	4603      	mov	r3, r0
 80046f6:	75fb      	strb	r3, [r7, #23]

      /* USB clock source configuration done later after clock selection check */
      break;
 80046f8:	e003      	b.n	8004702 <HAL_RCCEx_PeriphCLKConfig+0xc26>
      /* HSI48 oscillator is used as source of USB clock */
      /* USB clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80046fa:	2301      	movs	r3, #1
 80046fc:	75fb      	strb	r3, [r7, #23]
      break;
 80046fe:	e000      	b.n	8004702 <HAL_RCCEx_PeriphCLKConfig+0xc26>
      break;
 8004700:	bf00      	nop
    }

    if(ret == HAL_OK)
 8004702:	7dfb      	ldrb	r3, [r7, #23]
 8004704:	2b00      	cmp	r3, #0
 8004706:	d10d      	bne.n	8004724 <HAL_RCCEx_PeriphCLKConfig+0xc48>
    {
      /* Set the source of USB clock*/
      __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8004708:	4b05      	ldr	r3, [pc, #20]	; (8004720 <HAL_RCCEx_PeriphCLKConfig+0xc44>)
 800470a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800470c:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8004710:	687b      	ldr	r3, [r7, #4]
 8004712:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8004716:	4902      	ldr	r1, [pc, #8]	; (8004720 <HAL_RCCEx_PeriphCLKConfig+0xc44>)
 8004718:	4313      	orrs	r3, r2
 800471a:	654b      	str	r3, [r1, #84]	; 0x54
 800471c:	e004      	b.n	8004728 <HAL_RCCEx_PeriphCLKConfig+0xc4c>
 800471e:	bf00      	nop
 8004720:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004724:	7dfb      	ldrb	r3, [r7, #23]
 8004726:	75bb      	strb	r3, [r7, #22]
    }

  }

  /*------------------------------------- SDMMC Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == RCC_PERIPHCLK_SDMMC)
 8004728:	687b      	ldr	r3, [r7, #4]
 800472a:	681b      	ldr	r3, [r3, #0]
 800472c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004730:	2b00      	cmp	r3, #0
 8004732:	d029      	beq.n	8004788 <HAL_RCCEx_PeriphCLKConfig+0xcac>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC(PeriphClkInit->SdmmcClockSelection));

    switch(PeriphClkInit->SdmmcClockSelection)
 8004734:	687b      	ldr	r3, [r7, #4]
 8004736:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004738:	2b00      	cmp	r3, #0
 800473a:	d003      	beq.n	8004744 <HAL_RCCEx_PeriphCLKConfig+0xc68>
 800473c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004740:	d007      	beq.n	8004752 <HAL_RCCEx_PeriphCLKConfig+0xc76>
 8004742:	e00f      	b.n	8004764 <HAL_RCCEx_PeriphCLKConfig+0xc88>
    {
    case RCC_SDMMCCLKSOURCE_PLL:      /* PLL is used as clock source for SDMMC*/
      /* Enable SDMMC Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8004744:	4b61      	ldr	r3, [pc, #388]	; (80048cc <HAL_RCCEx_PeriphCLKConfig+0xdf0>)
 8004746:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004748:	4a60      	ldr	r2, [pc, #384]	; (80048cc <HAL_RCCEx_PeriphCLKConfig+0xdf0>)
 800474a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800474e:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SDMMC clock source configuration done later after clock selection check */
      break;
 8004750:	e00b      	b.n	800476a <HAL_RCCEx_PeriphCLKConfig+0xc8e>

    case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for SDMMC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 8004752:	687b      	ldr	r3, [r7, #4]
 8004754:	3304      	adds	r3, #4
 8004756:	2102      	movs	r1, #2
 8004758:	4618      	mov	r0, r3
 800475a:	f000 fbcd 	bl	8004ef8 <RCCEx_PLL2_Config>
 800475e:	4603      	mov	r3, r0
 8004760:	75fb      	strb	r3, [r7, #23]

      /* SDMMC clock source configuration done later after clock selection check */
      break;
 8004762:	e002      	b.n	800476a <HAL_RCCEx_PeriphCLKConfig+0xc8e>

    default:
      ret = HAL_ERROR;
 8004764:	2301      	movs	r3, #1
 8004766:	75fb      	strb	r3, [r7, #23]
      break;
 8004768:	bf00      	nop
    }

    if(ret == HAL_OK)
 800476a:	7dfb      	ldrb	r3, [r7, #23]
 800476c:	2b00      	cmp	r3, #0
 800476e:	d109      	bne.n	8004784 <HAL_RCCEx_PeriphCLKConfig+0xca8>
    {
      /* Set the source of SDMMC clock*/
      __HAL_RCC_SDMMC_CONFIG(PeriphClkInit->SdmmcClockSelection);
 8004770:	4b56      	ldr	r3, [pc, #344]	; (80048cc <HAL_RCCEx_PeriphCLKConfig+0xdf0>)
 8004772:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004774:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8004778:	687b      	ldr	r3, [r7, #4]
 800477a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800477c:	4953      	ldr	r1, [pc, #332]	; (80048cc <HAL_RCCEx_PeriphCLKConfig+0xdf0>)
 800477e:	4313      	orrs	r3, r2
 8004780:	64cb      	str	r3, [r1, #76]	; 0x4c
 8004782:	e001      	b.n	8004788 <HAL_RCCEx_PeriphCLKConfig+0xcac>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004784:	7dfb      	ldrb	r3, [r7, #23]
 8004786:	75bb      	strb	r3, [r7, #22]
    }
  }

#if defined(LTDC)
  /*-------------------------------------- LTDC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 8004788:	687b      	ldr	r3, [r7, #4]
 800478a:	681b      	ldr	r3, [r3, #0]
 800478c:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8004790:	2b00      	cmp	r3, #0
 8004792:	d00a      	beq.n	80047aa <HAL_RCCEx_PeriphCLKConfig+0xcce>
  {
    if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!=HAL_OK)
 8004794:	687b      	ldr	r3, [r7, #4]
 8004796:	3324      	adds	r3, #36	; 0x24
 8004798:	2102      	movs	r1, #2
 800479a:	4618      	mov	r0, r3
 800479c:	f000 fc5e 	bl	800505c <RCCEx_PLL3_Config>
 80047a0:	4603      	mov	r3, r0
 80047a2:	2b00      	cmp	r3, #0
 80047a4:	d001      	beq.n	80047aa <HAL_RCCEx_PeriphCLKConfig+0xcce>
    {
      status=HAL_ERROR;
 80047a6:	2301      	movs	r3, #1
 80047a8:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif /* LTDC */

  /*------------------------------ RNG Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 80047aa:	687b      	ldr	r3, [r7, #4]
 80047ac:	681b      	ldr	r3, [r3, #0]
 80047ae:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80047b2:	2b00      	cmp	r3, #0
 80047b4:	d030      	beq.n	8004818 <HAL_RCCEx_PeriphCLKConfig+0xd3c>
  {

    switch(PeriphClkInit->RngClockSelection)
 80047b6:	687b      	ldr	r3, [r7, #4]
 80047b8:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80047ba:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80047be:	d017      	beq.n	80047f0 <HAL_RCCEx_PeriphCLKConfig+0xd14>
 80047c0:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80047c4:	d811      	bhi.n	80047ea <HAL_RCCEx_PeriphCLKConfig+0xd0e>
 80047c6:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80047ca:	d013      	beq.n	80047f4 <HAL_RCCEx_PeriphCLKConfig+0xd18>
 80047cc:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80047d0:	d80b      	bhi.n	80047ea <HAL_RCCEx_PeriphCLKConfig+0xd0e>
 80047d2:	2b00      	cmp	r3, #0
 80047d4:	d010      	beq.n	80047f8 <HAL_RCCEx_PeriphCLKConfig+0xd1c>
 80047d6:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80047da:	d106      	bne.n	80047ea <HAL_RCCEx_PeriphCLKConfig+0xd0e>
    {
    case RCC_RNGCLKSOURCE_PLL:     /* PLL is used as clock source for RNG*/
      /* Enable RNG Clock output generated form System RNG . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80047dc:	4b3b      	ldr	r3, [pc, #236]	; (80048cc <HAL_RCCEx_PeriphCLKConfig+0xdf0>)
 80047de:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80047e0:	4a3a      	ldr	r2, [pc, #232]	; (80048cc <HAL_RCCEx_PeriphCLKConfig+0xdf0>)
 80047e2:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80047e6:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* RNG clock source configuration done later after clock selection check */
      break;
 80047e8:	e007      	b.n	80047fa <HAL_RCCEx_PeriphCLKConfig+0xd1e>
      /* HSI48 oscillator is used as source of RNG clock */
      /* RNG clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80047ea:	2301      	movs	r3, #1
 80047ec:	75fb      	strb	r3, [r7, #23]
      break;
 80047ee:	e004      	b.n	80047fa <HAL_RCCEx_PeriphCLKConfig+0xd1e>
      break;
 80047f0:	bf00      	nop
 80047f2:	e002      	b.n	80047fa <HAL_RCCEx_PeriphCLKConfig+0xd1e>
      break;
 80047f4:	bf00      	nop
 80047f6:	e000      	b.n	80047fa <HAL_RCCEx_PeriphCLKConfig+0xd1e>
      break;
 80047f8:	bf00      	nop
    }

    if(ret == HAL_OK)
 80047fa:	7dfb      	ldrb	r3, [r7, #23]
 80047fc:	2b00      	cmp	r3, #0
 80047fe:	d109      	bne.n	8004814 <HAL_RCCEx_PeriphCLKConfig+0xd38>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8004800:	4b32      	ldr	r3, [pc, #200]	; (80048cc <HAL_RCCEx_PeriphCLKConfig+0xdf0>)
 8004802:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004804:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8004808:	687b      	ldr	r3, [r7, #4]
 800480a:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800480c:	492f      	ldr	r1, [pc, #188]	; (80048cc <HAL_RCCEx_PeriphCLKConfig+0xdf0>)
 800480e:	4313      	orrs	r3, r2
 8004810:	654b      	str	r3, [r1, #84]	; 0x54
 8004812:	e001      	b.n	8004818 <HAL_RCCEx_PeriphCLKConfig+0xd3c>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004814:	7dfb      	ldrb	r3, [r7, #23]
 8004816:	75bb      	strb	r3, [r7, #22]
    }

  }

  /*------------------------------ SWPMI1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8004818:	687b      	ldr	r3, [r7, #4]
 800481a:	681b      	ldr	r3, [r3, #0]
 800481c:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8004820:	2b00      	cmp	r3, #0
 8004822:	d008      	beq.n	8004836 <HAL_RCCEx_PeriphCLKConfig+0xd5a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 interface clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8004824:	4b29      	ldr	r3, [pc, #164]	; (80048cc <HAL_RCCEx_PeriphCLKConfig+0xdf0>)
 8004826:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004828:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 800482c:	687b      	ldr	r3, [r7, #4]
 800482e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8004830:	4926      	ldr	r1, [pc, #152]	; (80048cc <HAL_RCCEx_PeriphCLKConfig+0xdf0>)
 8004832:	4313      	orrs	r3, r2
 8004834:	650b      	str	r3, [r1, #80]	; 0x50
    /* Configure the HRTIM1 clock source */
    __HAL_RCC_HRTIM1_CONFIG(PeriphClkInit->Hrtim1ClockSelection);
  }
#endif  /*HRTIM1*/
  /*------------------------------ DFSDM1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8004836:	687b      	ldr	r3, [r7, #4]
 8004838:	681b      	ldr	r3, [r3, #0]
 800483a:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800483e:	2b00      	cmp	r3, #0
 8004840:	d008      	beq.n	8004854 <HAL_RCCEx_PeriphCLKConfig+0xd78>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8004842:	4b22      	ldr	r3, [pc, #136]	; (80048cc <HAL_RCCEx_PeriphCLKConfig+0xdf0>)
 8004844:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004846:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 800484a:	687b      	ldr	r3, [r7, #4]
 800484c:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800484e:	491f      	ldr	r1, [pc, #124]	; (80048cc <HAL_RCCEx_PeriphCLKConfig+0xdf0>)
 8004850:	4313      	orrs	r3, r2
 8004852:	650b      	str	r3, [r1, #80]	; 0x50
    __HAL_RCC_DFSDM2_CONFIG(PeriphClkInit->Dfsdm2ClockSelection);
  }
#endif  /* DFSDM2 */

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
 8004854:	687b      	ldr	r3, [r7, #4]
 8004856:	681b      	ldr	r3, [r3, #0]
 8004858:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 800485c:	2b00      	cmp	r3, #0
 800485e:	d00d      	beq.n	800487c <HAL_RCCEx_PeriphCLKConfig+0xda0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8004860:	4b1a      	ldr	r3, [pc, #104]	; (80048cc <HAL_RCCEx_PeriphCLKConfig+0xdf0>)
 8004862:	691b      	ldr	r3, [r3, #16]
 8004864:	4a19      	ldr	r2, [pc, #100]	; (80048cc <HAL_RCCEx_PeriphCLKConfig+0xdf0>)
 8004866:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 800486a:	6113      	str	r3, [r2, #16]
 800486c:	4b17      	ldr	r3, [pc, #92]	; (80048cc <HAL_RCCEx_PeriphCLKConfig+0xdf0>)
 800486e:	691a      	ldr	r2, [r3, #16]
 8004870:	687b      	ldr	r3, [r7, #4]
 8004872:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8004876:	4915      	ldr	r1, [pc, #84]	; (80048cc <HAL_RCCEx_PeriphCLKConfig+0xdf0>)
 8004878:	4313      	orrs	r3, r2
 800487a:	610b      	str	r3, [r1, #16]
  }

  /*------------------------------------ CKPER configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
 800487c:	687b      	ldr	r3, [r7, #4]
 800487e:	681b      	ldr	r3, [r3, #0]
 8004880:	2b00      	cmp	r3, #0
 8004882:	da08      	bge.n	8004896 <HAL_RCCEx_PeriphCLKConfig+0xdba>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLKPSOURCE(PeriphClkInit->CkperClockSelection));

    /* Configure the CKPER clock source */
    __HAL_RCC_CLKP_CONFIG(PeriphClkInit->CkperClockSelection);
 8004884:	4b11      	ldr	r3, [pc, #68]	; (80048cc <HAL_RCCEx_PeriphCLKConfig+0xdf0>)
 8004886:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004888:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 800488c:	687b      	ldr	r3, [r7, #4]
 800488e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004890:	490e      	ldr	r1, [pc, #56]	; (80048cc <HAL_RCCEx_PeriphCLKConfig+0xdf0>)
 8004892:	4313      	orrs	r3, r2
 8004894:	64cb      	str	r3, [r1, #76]	; 0x4c
  }

  /*------------------------------ CEC Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8004896:	687b      	ldr	r3, [r7, #4]
 8004898:	681b      	ldr	r3, [r3, #0]
 800489a:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800489e:	2b00      	cmp	r3, #0
 80048a0:	d009      	beq.n	80048b6 <HAL_RCCEx_PeriphCLKConfig+0xdda>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC interface clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 80048a2:	4b0a      	ldr	r3, [pc, #40]	; (80048cc <HAL_RCCEx_PeriphCLKConfig+0xdf0>)
 80048a4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80048a6:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 80048aa:	687b      	ldr	r3, [r7, #4]
 80048ac:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80048b0:	4906      	ldr	r1, [pc, #24]	; (80048cc <HAL_RCCEx_PeriphCLKConfig+0xdf0>)
 80048b2:	4313      	orrs	r3, r2
 80048b4:	654b      	str	r3, [r1, #84]	; 0x54
  }

  if (status == HAL_OK)
 80048b6:	7dbb      	ldrb	r3, [r7, #22]
 80048b8:	2b00      	cmp	r3, #0
 80048ba:	d101      	bne.n	80048c0 <HAL_RCCEx_PeriphCLKConfig+0xde4>
  {
    return HAL_OK;
 80048bc:	2300      	movs	r3, #0
 80048be:	e000      	b.n	80048c2 <HAL_RCCEx_PeriphCLKConfig+0xde6>
  }
  return HAL_ERROR;
 80048c0:	2301      	movs	r3, #1
}
 80048c2:	4618      	mov	r0, r3
 80048c4:	3718      	adds	r7, #24
 80048c6:	46bd      	mov	sp, r7
 80048c8:	bd80      	pop	{r7, pc}
 80048ca:	bf00      	nop
 80048cc:	58024400 	.word	0x58024400

080048d0 <HAL_RCCEx_GetD3PCLK1Freq>:
  * @note   Each time D3PCLK1 changes, this function must be called to update the
  *         right D3PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval D3PCLK1 frequency
  */
uint32_t HAL_RCCEx_GetD3PCLK1Freq(void)
{
 80048d0:	b580      	push	{r7, lr}
 80048d2:	af00      	add	r7, sp, #0
#if defined(RCC_D3CFGR_D3PPRE)
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->D3CFGR & RCC_D3CFGR_D3PPRE)>> RCC_D3CFGR_D3PPRE_Pos] & 0x1FU));
 80048d4:	f7ff f8a6 	bl	8003a24 <HAL_RCC_GetHCLKFreq>
 80048d8:	4602      	mov	r2, r0
 80048da:	4b06      	ldr	r3, [pc, #24]	; (80048f4 <HAL_RCCEx_GetD3PCLK1Freq+0x24>)
 80048dc:	6a1b      	ldr	r3, [r3, #32]
 80048de:	091b      	lsrs	r3, r3, #4
 80048e0:	f003 0307 	and.w	r3, r3, #7
 80048e4:	4904      	ldr	r1, [pc, #16]	; (80048f8 <HAL_RCCEx_GetD3PCLK1Freq+0x28>)
 80048e6:	5ccb      	ldrb	r3, [r1, r3]
 80048e8:	f003 031f 	and.w	r3, r3, #31
 80048ec:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE)>> RCC_SRDCFGR_SRDPPRE_Pos] & 0x1FU));
#endif
}
 80048f0:	4618      	mov	r0, r3
 80048f2:	bd80      	pop	{r7, pc}
 80048f4:	58024400 	.word	0x58024400
 80048f8:	0800a620 	.word	0x0800a620

080048fc <HAL_RCCEx_GetPLL2ClockFreq>:
  *         right PLL2CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL2_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL2ClockFreq(PLL2_ClocksTypeDef* PLL2_Clocks)
{
 80048fc:	b480      	push	{r7}
 80048fe:	b089      	sub	sp, #36	; 0x24
 8004900:	af00      	add	r7, sp, #0
 8004902:	6078      	str	r0, [r7, #4]
  float_t fracn2, pll2vco;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL2M) * PLL2N
     PLL2xCLK = PLL2_VCO / PLL2x
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8004904:	4ba1      	ldr	r3, [pc, #644]	; (8004b8c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8004906:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004908:	f003 0303 	and.w	r3, r3, #3
 800490c:	61bb      	str	r3, [r7, #24]
  pll2m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM2)>> 12);
 800490e:	4b9f      	ldr	r3, [pc, #636]	; (8004b8c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8004910:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004912:	0b1b      	lsrs	r3, r3, #12
 8004914:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8004918:	617b      	str	r3, [r7, #20]
  pll2fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL2FRACEN) >> RCC_PLLCFGR_PLL2FRACEN_Pos;
 800491a:	4b9c      	ldr	r3, [pc, #624]	; (8004b8c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800491c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800491e:	091b      	lsrs	r3, r3, #4
 8004920:	f003 0301 	and.w	r3, r3, #1
 8004924:	613b      	str	r3, [r7, #16]
  fracn2 =(float_t)(uint32_t)(pll2fracen* ((RCC->PLL2FRACR & RCC_PLL2FRACR_FRACN2)>> 3));
 8004926:	4b99      	ldr	r3, [pc, #612]	; (8004b8c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8004928:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800492a:	08db      	lsrs	r3, r3, #3
 800492c:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8004930:	693a      	ldr	r2, [r7, #16]
 8004932:	fb02 f303 	mul.w	r3, r2, r3
 8004936:	ee07 3a90 	vmov	s15, r3
 800493a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800493e:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll2m != 0U)
 8004942:	697b      	ldr	r3, [r7, #20]
 8004944:	2b00      	cmp	r3, #0
 8004946:	f000 8111 	beq.w	8004b6c <HAL_RCCEx_GetPLL2ClockFreq+0x270>
  {
    switch (pllsource)
 800494a:	69bb      	ldr	r3, [r7, #24]
 800494c:	2b02      	cmp	r3, #2
 800494e:	f000 8083 	beq.w	8004a58 <HAL_RCCEx_GetPLL2ClockFreq+0x15c>
 8004952:	69bb      	ldr	r3, [r7, #24]
 8004954:	2b02      	cmp	r3, #2
 8004956:	f200 80a1 	bhi.w	8004a9c <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
 800495a:	69bb      	ldr	r3, [r7, #24]
 800495c:	2b00      	cmp	r3, #0
 800495e:	d003      	beq.n	8004968 <HAL_RCCEx_GetPLL2ClockFreq+0x6c>
 8004960:	69bb      	ldr	r3, [r7, #24]
 8004962:	2b01      	cmp	r3, #1
 8004964:	d056      	beq.n	8004a14 <HAL_RCCEx_GetPLL2ClockFreq+0x118>
 8004966:	e099      	b.n	8004a9c <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
    {

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8004968:	4b88      	ldr	r3, [pc, #544]	; (8004b8c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800496a:	681b      	ldr	r3, [r3, #0]
 800496c:	f003 0320 	and.w	r3, r3, #32
 8004970:	2b00      	cmp	r3, #0
 8004972:	d02d      	beq.n	80049d0 <HAL_RCCEx_GetPLL2ClockFreq+0xd4>
      {
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8004974:	4b85      	ldr	r3, [pc, #532]	; (8004b8c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8004976:	681b      	ldr	r3, [r3, #0]
 8004978:	08db      	lsrs	r3, r3, #3
 800497a:	f003 0303 	and.w	r3, r3, #3
 800497e:	4a84      	ldr	r2, [pc, #528]	; (8004b90 <HAL_RCCEx_GetPLL2ClockFreq+0x294>)
 8004980:	fa22 f303 	lsr.w	r3, r2, r3
 8004984:	60bb      	str	r3, [r7, #8]
        pll2vco = ( (float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 8004986:	68bb      	ldr	r3, [r7, #8]
 8004988:	ee07 3a90 	vmov	s15, r3
 800498c:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004990:	697b      	ldr	r3, [r7, #20]
 8004992:	ee07 3a90 	vmov	s15, r3
 8004996:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800499a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800499e:	4b7b      	ldr	r3, [pc, #492]	; (8004b8c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80049a0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80049a2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80049a6:	ee07 3a90 	vmov	s15, r3
 80049aa:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80049ae:	ed97 6a03 	vldr	s12, [r7, #12]
 80049b2:	eddf 5a78 	vldr	s11, [pc, #480]	; 8004b94 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 80049b6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80049ba:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80049be:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80049c2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80049c6:	ee67 7a27 	vmul.f32	s15, s14, s15
 80049ca:	edc7 7a07 	vstr	s15, [r7, #28]
      }
      else
      {
        pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
      }
      break;
 80049ce:	e087      	b.n	8004ae0 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>
        pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 80049d0:	697b      	ldr	r3, [r7, #20]
 80049d2:	ee07 3a90 	vmov	s15, r3
 80049d6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80049da:	eddf 6a6f 	vldr	s13, [pc, #444]	; 8004b98 <HAL_RCCEx_GetPLL2ClockFreq+0x29c>
 80049de:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80049e2:	4b6a      	ldr	r3, [pc, #424]	; (8004b8c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80049e4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80049e6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80049ea:	ee07 3a90 	vmov	s15, r3
 80049ee:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80049f2:	ed97 6a03 	vldr	s12, [r7, #12]
 80049f6:	eddf 5a67 	vldr	s11, [pc, #412]	; 8004b94 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 80049fa:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80049fe:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004a02:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8004a06:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004a0a:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004a0e:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8004a12:	e065      	b.n	8004ae0 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

    case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
      pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 8004a14:	697b      	ldr	r3, [r7, #20]
 8004a16:	ee07 3a90 	vmov	s15, r3
 8004a1a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004a1e:	eddf 6a5f 	vldr	s13, [pc, #380]	; 8004b9c <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 8004a22:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004a26:	4b59      	ldr	r3, [pc, #356]	; (8004b8c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8004a28:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004a2a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004a2e:	ee07 3a90 	vmov	s15, r3
 8004a32:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004a36:	ed97 6a03 	vldr	s12, [r7, #12]
 8004a3a:	eddf 5a56 	vldr	s11, [pc, #344]	; 8004b94 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8004a3e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004a42:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004a46:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8004a4a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004a4e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004a52:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8004a56:	e043      	b.n	8004ae0 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 8004a58:	697b      	ldr	r3, [r7, #20]
 8004a5a:	ee07 3a90 	vmov	s15, r3
 8004a5e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004a62:	eddf 6a4f 	vldr	s13, [pc, #316]	; 8004ba0 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>
 8004a66:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004a6a:	4b48      	ldr	r3, [pc, #288]	; (8004b8c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8004a6c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004a6e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004a72:	ee07 3a90 	vmov	s15, r3
 8004a76:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004a7a:	ed97 6a03 	vldr	s12, [r7, #12]
 8004a7e:	eddf 5a45 	vldr	s11, [pc, #276]	; 8004b94 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8004a82:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004a86:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004a8a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8004a8e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004a92:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004a96:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8004a9a:	e021      	b.n	8004ae0 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

    default:
      pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 8004a9c:	697b      	ldr	r3, [r7, #20]
 8004a9e:	ee07 3a90 	vmov	s15, r3
 8004aa2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004aa6:	eddf 6a3d 	vldr	s13, [pc, #244]	; 8004b9c <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 8004aaa:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004aae:	4b37      	ldr	r3, [pc, #220]	; (8004b8c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8004ab0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004ab2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004ab6:	ee07 3a90 	vmov	s15, r3
 8004aba:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004abe:	ed97 6a03 	vldr	s12, [r7, #12]
 8004ac2:	eddf 5a34 	vldr	s11, [pc, #208]	; 8004b94 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8004ac6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004aca:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004ace:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8004ad2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004ad6:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004ada:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8004ade:	bf00      	nop
    }
    PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_P2) >>9)  + (float_t)1 )) ;
 8004ae0:	4b2a      	ldr	r3, [pc, #168]	; (8004b8c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8004ae2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004ae4:	0a5b      	lsrs	r3, r3, #9
 8004ae6:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8004aea:	ee07 3a90 	vmov	s15, r3
 8004aee:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004af2:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8004af6:	ee37 7a87 	vadd.f32	s14, s15, s14
 8004afa:	edd7 6a07 	vldr	s13, [r7, #28]
 8004afe:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8004b02:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8004b06:	ee17 2a90 	vmov	r2, s15
 8004b0a:	687b      	ldr	r3, [r7, #4]
 8004b0c:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_Q2) >>16) + (float_t)1 )) ;
 8004b0e:	4b1f      	ldr	r3, [pc, #124]	; (8004b8c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8004b10:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004b12:	0c1b      	lsrs	r3, r3, #16
 8004b14:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8004b18:	ee07 3a90 	vmov	s15, r3
 8004b1c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004b20:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8004b24:	ee37 7a87 	vadd.f32	s14, s15, s14
 8004b28:	edd7 6a07 	vldr	s13, [r7, #28]
 8004b2c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8004b30:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8004b34:	ee17 2a90 	vmov	r2, s15
 8004b38:	687b      	ldr	r3, [r7, #4]
 8004b3a:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_R2) >>24) + (float_t)1 )) ;
 8004b3c:	4b13      	ldr	r3, [pc, #76]	; (8004b8c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8004b3e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004b40:	0e1b      	lsrs	r3, r3, #24
 8004b42:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8004b46:	ee07 3a90 	vmov	s15, r3
 8004b4a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004b4e:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8004b52:	ee37 7a87 	vadd.f32	s14, s15, s14
 8004b56:	edd7 6a07 	vldr	s13, [r7, #28]
 8004b5a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8004b5e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8004b62:	ee17 2a90 	vmov	r2, s15
 8004b66:	687b      	ldr	r3, [r7, #4]
 8004b68:	609a      	str	r2, [r3, #8]
  {
    PLL2_Clocks->PLL2_P_Frequency = 0U;
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
    PLL2_Clocks->PLL2_R_Frequency = 0U;
  }
}
 8004b6a:	e008      	b.n	8004b7e <HAL_RCCEx_GetPLL2ClockFreq+0x282>
    PLL2_Clocks->PLL2_P_Frequency = 0U;
 8004b6c:	687b      	ldr	r3, [r7, #4]
 8004b6e:	2200      	movs	r2, #0
 8004b70:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
 8004b72:	687b      	ldr	r3, [r7, #4]
 8004b74:	2200      	movs	r2, #0
 8004b76:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = 0U;
 8004b78:	687b      	ldr	r3, [r7, #4]
 8004b7a:	2200      	movs	r2, #0
 8004b7c:	609a      	str	r2, [r3, #8]
}
 8004b7e:	bf00      	nop
 8004b80:	3724      	adds	r7, #36	; 0x24
 8004b82:	46bd      	mov	sp, r7
 8004b84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b88:	4770      	bx	lr
 8004b8a:	bf00      	nop
 8004b8c:	58024400 	.word	0x58024400
 8004b90:	03d09000 	.word	0x03d09000
 8004b94:	46000000 	.word	0x46000000
 8004b98:	4c742400 	.word	0x4c742400
 8004b9c:	4a742400 	.word	0x4a742400
 8004ba0:	4af42400 	.word	0x4af42400

08004ba4 <HAL_RCCEx_GetPLL3ClockFreq>:
  *         right PLL3CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL3_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL3ClockFreq(PLL3_ClocksTypeDef* PLL3_Clocks)
{
 8004ba4:	b480      	push	{r7}
 8004ba6:	b089      	sub	sp, #36	; 0x24
 8004ba8:	af00      	add	r7, sp, #0
 8004baa:	6078      	str	r0, [r7, #4]
  float_t fracn3, pll3vco;

  /* PLL3_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL3M) * PLL3N
     PLL3xCLK = PLL3_VCO / PLLxR
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8004bac:	4ba1      	ldr	r3, [pc, #644]	; (8004e34 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8004bae:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004bb0:	f003 0303 	and.w	r3, r3, #3
 8004bb4:	61bb      	str	r3, [r7, #24]
  pll3m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM3)>> 20)  ;
 8004bb6:	4b9f      	ldr	r3, [pc, #636]	; (8004e34 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8004bb8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004bba:	0d1b      	lsrs	r3, r3, #20
 8004bbc:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8004bc0:	617b      	str	r3, [r7, #20]
  pll3fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL3FRACEN) >> RCC_PLLCFGR_PLL3FRACEN_Pos;
 8004bc2:	4b9c      	ldr	r3, [pc, #624]	; (8004e34 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8004bc4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004bc6:	0a1b      	lsrs	r3, r3, #8
 8004bc8:	f003 0301 	and.w	r3, r3, #1
 8004bcc:	613b      	str	r3, [r7, #16]
  fracn3 = (float_t)(uint32_t)(pll3fracen* ((RCC->PLL3FRACR & RCC_PLL3FRACR_FRACN3)>> 3));
 8004bce:	4b99      	ldr	r3, [pc, #612]	; (8004e34 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8004bd0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004bd2:	08db      	lsrs	r3, r3, #3
 8004bd4:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8004bd8:	693a      	ldr	r2, [r7, #16]
 8004bda:	fb02 f303 	mul.w	r3, r2, r3
 8004bde:	ee07 3a90 	vmov	s15, r3
 8004be2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004be6:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll3m != 0U)
 8004bea:	697b      	ldr	r3, [r7, #20]
 8004bec:	2b00      	cmp	r3, #0
 8004bee:	f000 8111 	beq.w	8004e14 <HAL_RCCEx_GetPLL3ClockFreq+0x270>
  {
    switch (pllsource)
 8004bf2:	69bb      	ldr	r3, [r7, #24]
 8004bf4:	2b02      	cmp	r3, #2
 8004bf6:	f000 8083 	beq.w	8004d00 <HAL_RCCEx_GetPLL3ClockFreq+0x15c>
 8004bfa:	69bb      	ldr	r3, [r7, #24]
 8004bfc:	2b02      	cmp	r3, #2
 8004bfe:	f200 80a1 	bhi.w	8004d44 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
 8004c02:	69bb      	ldr	r3, [r7, #24]
 8004c04:	2b00      	cmp	r3, #0
 8004c06:	d003      	beq.n	8004c10 <HAL_RCCEx_GetPLL3ClockFreq+0x6c>
 8004c08:	69bb      	ldr	r3, [r7, #24]
 8004c0a:	2b01      	cmp	r3, #1
 8004c0c:	d056      	beq.n	8004cbc <HAL_RCCEx_GetPLL3ClockFreq+0x118>
 8004c0e:	e099      	b.n	8004d44 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8004c10:	4b88      	ldr	r3, [pc, #544]	; (8004e34 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8004c12:	681b      	ldr	r3, [r3, #0]
 8004c14:	f003 0320 	and.w	r3, r3, #32
 8004c18:	2b00      	cmp	r3, #0
 8004c1a:	d02d      	beq.n	8004c78 <HAL_RCCEx_GetPLL3ClockFreq+0xd4>
      {
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8004c1c:	4b85      	ldr	r3, [pc, #532]	; (8004e34 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8004c1e:	681b      	ldr	r3, [r3, #0]
 8004c20:	08db      	lsrs	r3, r3, #3
 8004c22:	f003 0303 	and.w	r3, r3, #3
 8004c26:	4a84      	ldr	r2, [pc, #528]	; (8004e38 <HAL_RCCEx_GetPLL3ClockFreq+0x294>)
 8004c28:	fa22 f303 	lsr.w	r3, r2, r3
 8004c2c:	60bb      	str	r3, [r7, #8]
        pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 8004c2e:	68bb      	ldr	r3, [r7, #8]
 8004c30:	ee07 3a90 	vmov	s15, r3
 8004c34:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004c38:	697b      	ldr	r3, [r7, #20]
 8004c3a:	ee07 3a90 	vmov	s15, r3
 8004c3e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004c42:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004c46:	4b7b      	ldr	r3, [pc, #492]	; (8004e34 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8004c48:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004c4a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004c4e:	ee07 3a90 	vmov	s15, r3
 8004c52:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004c56:	ed97 6a03 	vldr	s12, [r7, #12]
 8004c5a:	eddf 5a78 	vldr	s11, [pc, #480]	; 8004e3c <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8004c5e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004c62:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004c66:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8004c6a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004c6e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004c72:	edc7 7a07 	vstr	s15, [r7, #28]
      }
      else
      {
        pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
      }
      break;
 8004c76:	e087      	b.n	8004d88 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
        pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 8004c78:	697b      	ldr	r3, [r7, #20]
 8004c7a:	ee07 3a90 	vmov	s15, r3
 8004c7e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004c82:	eddf 6a6f 	vldr	s13, [pc, #444]	; 8004e40 <HAL_RCCEx_GetPLL3ClockFreq+0x29c>
 8004c86:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004c8a:	4b6a      	ldr	r3, [pc, #424]	; (8004e34 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8004c8c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004c8e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004c92:	ee07 3a90 	vmov	s15, r3
 8004c96:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004c9a:	ed97 6a03 	vldr	s12, [r7, #12]
 8004c9e:	eddf 5a67 	vldr	s11, [pc, #412]	; 8004e3c <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8004ca2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004ca6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004caa:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8004cae:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004cb2:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004cb6:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8004cba:	e065      	b.n	8004d88 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
    case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
      pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 8004cbc:	697b      	ldr	r3, [r7, #20]
 8004cbe:	ee07 3a90 	vmov	s15, r3
 8004cc2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004cc6:	eddf 6a5f 	vldr	s13, [pc, #380]	; 8004e44 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 8004cca:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004cce:	4b59      	ldr	r3, [pc, #356]	; (8004e34 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8004cd0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004cd2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004cd6:	ee07 3a90 	vmov	s15, r3
 8004cda:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004cde:	ed97 6a03 	vldr	s12, [r7, #12]
 8004ce2:	eddf 5a56 	vldr	s11, [pc, #344]	; 8004e3c <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8004ce6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004cea:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004cee:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8004cf2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004cf6:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004cfa:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8004cfe:	e043      	b.n	8004d88 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 8004d00:	697b      	ldr	r3, [r7, #20]
 8004d02:	ee07 3a90 	vmov	s15, r3
 8004d06:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004d0a:	eddf 6a4f 	vldr	s13, [pc, #316]	; 8004e48 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>
 8004d0e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004d12:	4b48      	ldr	r3, [pc, #288]	; (8004e34 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8004d14:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004d16:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004d1a:	ee07 3a90 	vmov	s15, r3
 8004d1e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004d22:	ed97 6a03 	vldr	s12, [r7, #12]
 8004d26:	eddf 5a45 	vldr	s11, [pc, #276]	; 8004e3c <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8004d2a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004d2e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004d32:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8004d36:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004d3a:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004d3e:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8004d42:	e021      	b.n	8004d88 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

    default:
      pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 8004d44:	697b      	ldr	r3, [r7, #20]
 8004d46:	ee07 3a90 	vmov	s15, r3
 8004d4a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004d4e:	eddf 6a3d 	vldr	s13, [pc, #244]	; 8004e44 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 8004d52:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004d56:	4b37      	ldr	r3, [pc, #220]	; (8004e34 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8004d58:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004d5a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004d5e:	ee07 3a90 	vmov	s15, r3
 8004d62:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004d66:	ed97 6a03 	vldr	s12, [r7, #12]
 8004d6a:	eddf 5a34 	vldr	s11, [pc, #208]	; 8004e3c <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8004d6e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004d72:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004d76:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8004d7a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004d7e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004d82:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8004d86:	bf00      	nop
    }
    PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_P3) >>9)  + (float_t)1 )) ;
 8004d88:	4b2a      	ldr	r3, [pc, #168]	; (8004e34 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8004d8a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004d8c:	0a5b      	lsrs	r3, r3, #9
 8004d8e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8004d92:	ee07 3a90 	vmov	s15, r3
 8004d96:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004d9a:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8004d9e:	ee37 7a87 	vadd.f32	s14, s15, s14
 8004da2:	edd7 6a07 	vldr	s13, [r7, #28]
 8004da6:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8004daa:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8004dae:	ee17 2a90 	vmov	r2, s15
 8004db2:	687b      	ldr	r3, [r7, #4]
 8004db4:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_Q3) >>16) + (float_t)1 )) ;
 8004db6:	4b1f      	ldr	r3, [pc, #124]	; (8004e34 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8004db8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004dba:	0c1b      	lsrs	r3, r3, #16
 8004dbc:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8004dc0:	ee07 3a90 	vmov	s15, r3
 8004dc4:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004dc8:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8004dcc:	ee37 7a87 	vadd.f32	s14, s15, s14
 8004dd0:	edd7 6a07 	vldr	s13, [r7, #28]
 8004dd4:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8004dd8:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8004ddc:	ee17 2a90 	vmov	r2, s15
 8004de0:	687b      	ldr	r3, [r7, #4]
 8004de2:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_R3) >>24) + (float_t)1 )) ;
 8004de4:	4b13      	ldr	r3, [pc, #76]	; (8004e34 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8004de6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004de8:	0e1b      	lsrs	r3, r3, #24
 8004dea:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8004dee:	ee07 3a90 	vmov	s15, r3
 8004df2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004df6:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8004dfa:	ee37 7a87 	vadd.f32	s14, s15, s14
 8004dfe:	edd7 6a07 	vldr	s13, [r7, #28]
 8004e02:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8004e06:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8004e0a:	ee17 2a90 	vmov	r2, s15
 8004e0e:	687b      	ldr	r3, [r7, #4]
 8004e10:	609a      	str	r2, [r3, #8]
    PLL3_Clocks->PLL3_P_Frequency = 0U;
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
    PLL3_Clocks->PLL3_R_Frequency = 0U;
  }

}
 8004e12:	e008      	b.n	8004e26 <HAL_RCCEx_GetPLL3ClockFreq+0x282>
    PLL3_Clocks->PLL3_P_Frequency = 0U;
 8004e14:	687b      	ldr	r3, [r7, #4]
 8004e16:	2200      	movs	r2, #0
 8004e18:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
 8004e1a:	687b      	ldr	r3, [r7, #4]
 8004e1c:	2200      	movs	r2, #0
 8004e1e:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = 0U;
 8004e20:	687b      	ldr	r3, [r7, #4]
 8004e22:	2200      	movs	r2, #0
 8004e24:	609a      	str	r2, [r3, #8]
}
 8004e26:	bf00      	nop
 8004e28:	3724      	adds	r7, #36	; 0x24
 8004e2a:	46bd      	mov	sp, r7
 8004e2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e30:	4770      	bx	lr
 8004e32:	bf00      	nop
 8004e34:	58024400 	.word	0x58024400
 8004e38:	03d09000 	.word	0x03d09000
 8004e3c:	46000000 	.word	0x46000000
 8004e40:	4c742400 	.word	0x4c742400
 8004e44:	4a742400 	.word	0x4a742400
 8004e48:	4af42400 	.word	0x4af42400

08004e4c <HAL_RCCEx_CRSConfig>:
  * @brief  Start automatic synchronization for polling mode
  * @param  pInit Pointer on RCC_CRSInitTypeDef structure
  * @retval None
  */
void HAL_RCCEx_CRSConfig(RCC_CRSInitTypeDef *pInit)
{
 8004e4c:	b580      	push	{r7, lr}
 8004e4e:	b084      	sub	sp, #16
 8004e50:	af00      	add	r7, sp, #0
 8004e52:	6078      	str	r0, [r7, #4]
  assert_param(IS_RCC_CRS_HSI48CALIBRATION(pInit->HSI48CalibrationValue));

  /* CONFIGURATION */

  /* Before configuration, reset CRS registers to their default values*/
  __HAL_RCC_CRS_FORCE_RESET();
 8004e54:	4b26      	ldr	r3, [pc, #152]	; (8004ef0 <HAL_RCCEx_CRSConfig+0xa4>)
 8004e56:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004e5a:	4a25      	ldr	r2, [pc, #148]	; (8004ef0 <HAL_RCCEx_CRSConfig+0xa4>)
 8004e5c:	f043 0302 	orr.w	r3, r3, #2
 8004e60:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
  __HAL_RCC_CRS_RELEASE_RESET();
 8004e64:	4b22      	ldr	r3, [pc, #136]	; (8004ef0 <HAL_RCCEx_CRSConfig+0xa4>)
 8004e66:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004e6a:	4a21      	ldr	r2, [pc, #132]	; (8004ef0 <HAL_RCCEx_CRSConfig+0xa4>)
 8004e6c:	f023 0302 	bic.w	r3, r3, #2
 8004e70:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

  /* Set the SYNCDIV[2:0] bits according to Pre-scaler value */
  /* Set the SYNCSRC[1:0] bits according to Source value */
  /* Set the SYNCSPOL bit according to Polarity value */
  if ((HAL_GetREVID() <= REV_ID_Y) && (pInit->Source == RCC_CRS_SYNC_SOURCE_USB2))
 8004e74:	f7fc fca6 	bl	80017c4 <HAL_GetREVID>
 8004e78:	4603      	mov	r3, r0
 8004e7a:	f241 0203 	movw	r2, #4099	; 0x1003
 8004e7e:	4293      	cmp	r3, r2
 8004e80:	d80b      	bhi.n	8004e9a <HAL_RCCEx_CRSConfig+0x4e>
 8004e82:	687b      	ldr	r3, [r7, #4]
 8004e84:	685b      	ldr	r3, [r3, #4]
 8004e86:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8004e8a:	d106      	bne.n	8004e9a <HAL_RCCEx_CRSConfig+0x4e>
  {
    /* Use Rev.Y value of USB2 */
    value = (pInit->Prescaler | RCC_CRS_SYNC_SOURCE_PIN | pInit->Polarity);
 8004e8c:	687b      	ldr	r3, [r7, #4]
 8004e8e:	681a      	ldr	r2, [r3, #0]
 8004e90:	687b      	ldr	r3, [r7, #4]
 8004e92:	689b      	ldr	r3, [r3, #8]
 8004e94:	4313      	orrs	r3, r2
 8004e96:	60fb      	str	r3, [r7, #12]
 8004e98:	e008      	b.n	8004eac <HAL_RCCEx_CRSConfig+0x60>
  }
  else
  {
    value = (pInit->Prescaler | pInit->Source | pInit->Polarity);
 8004e9a:	687b      	ldr	r3, [r7, #4]
 8004e9c:	681a      	ldr	r2, [r3, #0]
 8004e9e:	687b      	ldr	r3, [r7, #4]
 8004ea0:	685b      	ldr	r3, [r3, #4]
 8004ea2:	431a      	orrs	r2, r3
 8004ea4:	687b      	ldr	r3, [r7, #4]
 8004ea6:	689b      	ldr	r3, [r3, #8]
 8004ea8:	4313      	orrs	r3, r2
 8004eaa:	60fb      	str	r3, [r7, #12]
  }
  /* Set the RELOAD[15:0] bits according to ReloadValue value */
  value |= pInit->ReloadValue;
 8004eac:	687b      	ldr	r3, [r7, #4]
 8004eae:	68db      	ldr	r3, [r3, #12]
 8004eb0:	68fa      	ldr	r2, [r7, #12]
 8004eb2:	4313      	orrs	r3, r2
 8004eb4:	60fb      	str	r3, [r7, #12]
  /* Set the FELIM[7:0] bits according to ErrorLimitValue value */
  value |= (pInit->ErrorLimitValue << CRS_CFGR_FELIM_Pos);
 8004eb6:	687b      	ldr	r3, [r7, #4]
 8004eb8:	691b      	ldr	r3, [r3, #16]
 8004eba:	041b      	lsls	r3, r3, #16
 8004ebc:	68fa      	ldr	r2, [r7, #12]
 8004ebe:	4313      	orrs	r3, r2
 8004ec0:	60fb      	str	r3, [r7, #12]
  WRITE_REG(CRS->CFGR, value);
 8004ec2:	4a0c      	ldr	r2, [pc, #48]	; (8004ef4 <HAL_RCCEx_CRSConfig+0xa8>)
 8004ec4:	68fb      	ldr	r3, [r7, #12]
 8004ec6:	6053      	str	r3, [r2, #4]

  /* Adjust HSI48 oscillator smooth trimming */
  /* Set the TRIM[5:0] bits according to RCC_CRS_HSI48CalibrationValue value */
  MODIFY_REG(CRS->CR, CRS_CR_TRIM, (pInit->HSI48CalibrationValue << CRS_CR_TRIM_Pos));
 8004ec8:	4b0a      	ldr	r3, [pc, #40]	; (8004ef4 <HAL_RCCEx_CRSConfig+0xa8>)
 8004eca:	681b      	ldr	r3, [r3, #0]
 8004ecc:	f423 527c 	bic.w	r2, r3, #16128	; 0x3f00
 8004ed0:	687b      	ldr	r3, [r7, #4]
 8004ed2:	695b      	ldr	r3, [r3, #20]
 8004ed4:	021b      	lsls	r3, r3, #8
 8004ed6:	4907      	ldr	r1, [pc, #28]	; (8004ef4 <HAL_RCCEx_CRSConfig+0xa8>)
 8004ed8:	4313      	orrs	r3, r2
 8004eda:	600b      	str	r3, [r1, #0]

  /* START AUTOMATIC SYNCHRONIZATION*/

  /* Enable Automatic trimming & Frequency error counter */
  SET_BIT(CRS->CR, CRS_CR_AUTOTRIMEN | CRS_CR_CEN);
 8004edc:	4b05      	ldr	r3, [pc, #20]	; (8004ef4 <HAL_RCCEx_CRSConfig+0xa8>)
 8004ede:	681b      	ldr	r3, [r3, #0]
 8004ee0:	4a04      	ldr	r2, [pc, #16]	; (8004ef4 <HAL_RCCEx_CRSConfig+0xa8>)
 8004ee2:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 8004ee6:	6013      	str	r3, [r2, #0]
}
 8004ee8:	bf00      	nop
 8004eea:	3710      	adds	r7, #16
 8004eec:	46bd      	mov	sp, r7
 8004eee:	bd80      	pop	{r7, pc}
 8004ef0:	58024400 	.word	0x58024400
 8004ef4:	40008400 	.word	0x40008400

08004ef8 <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(RCC_PLL2InitTypeDef *pll2, uint32_t Divider)
{
 8004ef8:	b580      	push	{r7, lr}
 8004efa:	b084      	sub	sp, #16
 8004efc:	af00      	add	r7, sp, #0
 8004efe:	6078      	str	r0, [r7, #4]
 8004f00:	6039      	str	r1, [r7, #0]

  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8004f02:	2300      	movs	r3, #0
 8004f04:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL2RGE_VALUE(pll2->PLL2RGE));
  assert_param(IS_RCC_PLL2VCO_VALUE(pll2->PLL2VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll2->PLL2FRACN));

  /* Check that PLL2 OSC clock source is already set */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8004f06:	4b53      	ldr	r3, [pc, #332]	; (8005054 <RCCEx_PLL2_Config+0x15c>)
 8004f08:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004f0a:	f003 0303 	and.w	r3, r3, #3
 8004f0e:	2b03      	cmp	r3, #3
 8004f10:	d101      	bne.n	8004f16 <RCCEx_PLL2_Config+0x1e>
  {
    return HAL_ERROR;
 8004f12:	2301      	movs	r3, #1
 8004f14:	e099      	b.n	800504a <RCCEx_PLL2_Config+0x152>


  else
  {
    /* Disable  PLL2. */
    __HAL_RCC_PLL2_DISABLE();
 8004f16:	4b4f      	ldr	r3, [pc, #316]	; (8005054 <RCCEx_PLL2_Config+0x15c>)
 8004f18:	681b      	ldr	r3, [r3, #0]
 8004f1a:	4a4e      	ldr	r2, [pc, #312]	; (8005054 <RCCEx_PLL2_Config+0x15c>)
 8004f1c:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8004f20:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004f22:	f7fc fc1f 	bl	8001764 <HAL_GetTick>
 8004f26:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8004f28:	e008      	b.n	8004f3c <RCCEx_PLL2_Config+0x44>
    {
      if( (HAL_GetTick() - tickstart ) > PLL2_TIMEOUT_VALUE)
 8004f2a:	f7fc fc1b 	bl	8001764 <HAL_GetTick>
 8004f2e:	4602      	mov	r2, r0
 8004f30:	68bb      	ldr	r3, [r7, #8]
 8004f32:	1ad3      	subs	r3, r2, r3
 8004f34:	2b02      	cmp	r3, #2
 8004f36:	d901      	bls.n	8004f3c <RCCEx_PLL2_Config+0x44>
      {
        return HAL_TIMEOUT;
 8004f38:	2303      	movs	r3, #3
 8004f3a:	e086      	b.n	800504a <RCCEx_PLL2_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8004f3c:	4b45      	ldr	r3, [pc, #276]	; (8005054 <RCCEx_PLL2_Config+0x15c>)
 8004f3e:	681b      	ldr	r3, [r3, #0]
 8004f40:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8004f44:	2b00      	cmp	r3, #0
 8004f46:	d1f0      	bne.n	8004f2a <RCCEx_PLL2_Config+0x32>
      }
    }

    /* Configure PLL2 multiplication and division factors. */
    __HAL_RCC_PLL2_CONFIG(pll2->PLL2M,
 8004f48:	4b42      	ldr	r3, [pc, #264]	; (8005054 <RCCEx_PLL2_Config+0x15c>)
 8004f4a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004f4c:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 8004f50:	687b      	ldr	r3, [r7, #4]
 8004f52:	681b      	ldr	r3, [r3, #0]
 8004f54:	031b      	lsls	r3, r3, #12
 8004f56:	493f      	ldr	r1, [pc, #252]	; (8005054 <RCCEx_PLL2_Config+0x15c>)
 8004f58:	4313      	orrs	r3, r2
 8004f5a:	628b      	str	r3, [r1, #40]	; 0x28
 8004f5c:	687b      	ldr	r3, [r7, #4]
 8004f5e:	685b      	ldr	r3, [r3, #4]
 8004f60:	3b01      	subs	r3, #1
 8004f62:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8004f66:	687b      	ldr	r3, [r7, #4]
 8004f68:	689b      	ldr	r3, [r3, #8]
 8004f6a:	3b01      	subs	r3, #1
 8004f6c:	025b      	lsls	r3, r3, #9
 8004f6e:	b29b      	uxth	r3, r3
 8004f70:	431a      	orrs	r2, r3
 8004f72:	687b      	ldr	r3, [r7, #4]
 8004f74:	68db      	ldr	r3, [r3, #12]
 8004f76:	3b01      	subs	r3, #1
 8004f78:	041b      	lsls	r3, r3, #16
 8004f7a:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 8004f7e:	431a      	orrs	r2, r3
 8004f80:	687b      	ldr	r3, [r7, #4]
 8004f82:	691b      	ldr	r3, [r3, #16]
 8004f84:	3b01      	subs	r3, #1
 8004f86:	061b      	lsls	r3, r3, #24
 8004f88:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 8004f8c:	4931      	ldr	r1, [pc, #196]	; (8005054 <RCCEx_PLL2_Config+0x15c>)
 8004f8e:	4313      	orrs	r3, r2
 8004f90:	638b      	str	r3, [r1, #56]	; 0x38
                          pll2->PLL2P,
                          pll2->PLL2Q,
                          pll2->PLL2R);

    /* Select PLL2 input reference frequency range: VCI */
    __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE) ;
 8004f92:	4b30      	ldr	r3, [pc, #192]	; (8005054 <RCCEx_PLL2_Config+0x15c>)
 8004f94:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004f96:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8004f9a:	687b      	ldr	r3, [r7, #4]
 8004f9c:	695b      	ldr	r3, [r3, #20]
 8004f9e:	492d      	ldr	r1, [pc, #180]	; (8005054 <RCCEx_PLL2_Config+0x15c>)
 8004fa0:	4313      	orrs	r3, r2
 8004fa2:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL2 output frequency range : VCO */
    __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL) ;
 8004fa4:	4b2b      	ldr	r3, [pc, #172]	; (8005054 <RCCEx_PLL2_Config+0x15c>)
 8004fa6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004fa8:	f023 0220 	bic.w	r2, r3, #32
 8004fac:	687b      	ldr	r3, [r7, #4]
 8004fae:	699b      	ldr	r3, [r3, #24]
 8004fb0:	4928      	ldr	r1, [pc, #160]	; (8005054 <RCCEx_PLL2_Config+0x15c>)
 8004fb2:	4313      	orrs	r3, r2
 8004fb4:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_DISABLE();
 8004fb6:	4b27      	ldr	r3, [pc, #156]	; (8005054 <RCCEx_PLL2_Config+0x15c>)
 8004fb8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004fba:	4a26      	ldr	r2, [pc, #152]	; (8005054 <RCCEx_PLL2_Config+0x15c>)
 8004fbc:	f023 0310 	bic.w	r3, r3, #16
 8004fc0:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 8004fc2:	4b24      	ldr	r3, [pc, #144]	; (8005054 <RCCEx_PLL2_Config+0x15c>)
 8004fc4:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8004fc6:	4b24      	ldr	r3, [pc, #144]	; (8005058 <RCCEx_PLL2_Config+0x160>)
 8004fc8:	4013      	ands	r3, r2
 8004fca:	687a      	ldr	r2, [r7, #4]
 8004fcc:	69d2      	ldr	r2, [r2, #28]
 8004fce:	00d2      	lsls	r2, r2, #3
 8004fd0:	4920      	ldr	r1, [pc, #128]	; (8005054 <RCCEx_PLL2_Config+0x15c>)
 8004fd2:	4313      	orrs	r3, r2
 8004fd4:	63cb      	str	r3, [r1, #60]	; 0x3c

    /* Enable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_ENABLE();
 8004fd6:	4b1f      	ldr	r3, [pc, #124]	; (8005054 <RCCEx_PLL2_Config+0x15c>)
 8004fd8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004fda:	4a1e      	ldr	r2, [pc, #120]	; (8005054 <RCCEx_PLL2_Config+0x15c>)
 8004fdc:	f043 0310 	orr.w	r3, r3, #16
 8004fe0:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL2 clock output */
    if(Divider == DIVIDER_P_UPDATE)
 8004fe2:	683b      	ldr	r3, [r7, #0]
 8004fe4:	2b00      	cmp	r3, #0
 8004fe6:	d106      	bne.n	8004ff6 <RCCEx_PLL2_Config+0xfe>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 8004fe8:	4b1a      	ldr	r3, [pc, #104]	; (8005054 <RCCEx_PLL2_Config+0x15c>)
 8004fea:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004fec:	4a19      	ldr	r2, [pc, #100]	; (8005054 <RCCEx_PLL2_Config+0x15c>)
 8004fee:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8004ff2:	62d3      	str	r3, [r2, #44]	; 0x2c
 8004ff4:	e00f      	b.n	8005016 <RCCEx_PLL2_Config+0x11e>
    }
    else if(Divider == DIVIDER_Q_UPDATE)
 8004ff6:	683b      	ldr	r3, [r7, #0]
 8004ff8:	2b01      	cmp	r3, #1
 8004ffa:	d106      	bne.n	800500a <RCCEx_PLL2_Config+0x112>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVQ);
 8004ffc:	4b15      	ldr	r3, [pc, #84]	; (8005054 <RCCEx_PLL2_Config+0x15c>)
 8004ffe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005000:	4a14      	ldr	r2, [pc, #80]	; (8005054 <RCCEx_PLL2_Config+0x15c>)
 8005002:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8005006:	62d3      	str	r3, [r2, #44]	; 0x2c
 8005008:	e005      	b.n	8005016 <RCCEx_PLL2_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVR);
 800500a:	4b12      	ldr	r3, [pc, #72]	; (8005054 <RCCEx_PLL2_Config+0x15c>)
 800500c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800500e:	4a11      	ldr	r2, [pc, #68]	; (8005054 <RCCEx_PLL2_Config+0x15c>)
 8005010:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8005014:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL2. */
    __HAL_RCC_PLL2_ENABLE();
 8005016:	4b0f      	ldr	r3, [pc, #60]	; (8005054 <RCCEx_PLL2_Config+0x15c>)
 8005018:	681b      	ldr	r3, [r3, #0]
 800501a:	4a0e      	ldr	r2, [pc, #56]	; (8005054 <RCCEx_PLL2_Config+0x15c>)
 800501c:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8005020:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8005022:	f7fc fb9f 	bl	8001764 <HAL_GetTick>
 8005026:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL2 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8005028:	e008      	b.n	800503c <RCCEx_PLL2_Config+0x144>
    {
      if( (HAL_GetTick() - tickstart ) > PLL2_TIMEOUT_VALUE)
 800502a:	f7fc fb9b 	bl	8001764 <HAL_GetTick>
 800502e:	4602      	mov	r2, r0
 8005030:	68bb      	ldr	r3, [r7, #8]
 8005032:	1ad3      	subs	r3, r2, r3
 8005034:	2b02      	cmp	r3, #2
 8005036:	d901      	bls.n	800503c <RCCEx_PLL2_Config+0x144>
      {
        return HAL_TIMEOUT;
 8005038:	2303      	movs	r3, #3
 800503a:	e006      	b.n	800504a <RCCEx_PLL2_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 800503c:	4b05      	ldr	r3, [pc, #20]	; (8005054 <RCCEx_PLL2_Config+0x15c>)
 800503e:	681b      	ldr	r3, [r3, #0]
 8005040:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8005044:	2b00      	cmp	r3, #0
 8005046:	d0f0      	beq.n	800502a <RCCEx_PLL2_Config+0x132>
    }

  }


  return status;
 8005048:	7bfb      	ldrb	r3, [r7, #15]
}
 800504a:	4618      	mov	r0, r3
 800504c:	3710      	adds	r7, #16
 800504e:	46bd      	mov	sp, r7
 8005050:	bd80      	pop	{r7, pc}
 8005052:	bf00      	nop
 8005054:	58024400 	.word	0x58024400
 8005058:	ffff0007 	.word	0xffff0007

0800505c <RCCEx_PLL3_Config>:
  * @note   PLL3 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(RCC_PLL3InitTypeDef *pll3, uint32_t Divider)
{
 800505c:	b580      	push	{r7, lr}
 800505e:	b084      	sub	sp, #16
 8005060:	af00      	add	r7, sp, #0
 8005062:	6078      	str	r0, [r7, #4]
 8005064:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8005066:	2300      	movs	r3, #0
 8005068:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL3RGE_VALUE(pll3->PLL3RGE));
  assert_param(IS_RCC_PLL3VCO_VALUE(pll3->PLL3VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll3->PLL3FRACN));

  /* Check that PLL3 OSC clock source is already set */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 800506a:	4b53      	ldr	r3, [pc, #332]	; (80051b8 <RCCEx_PLL3_Config+0x15c>)
 800506c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800506e:	f003 0303 	and.w	r3, r3, #3
 8005072:	2b03      	cmp	r3, #3
 8005074:	d101      	bne.n	800507a <RCCEx_PLL3_Config+0x1e>
  {
    return HAL_ERROR;
 8005076:	2301      	movs	r3, #1
 8005078:	e099      	b.n	80051ae <RCCEx_PLL3_Config+0x152>


  else
  {
    /* Disable  PLL3. */
    __HAL_RCC_PLL3_DISABLE();
 800507a:	4b4f      	ldr	r3, [pc, #316]	; (80051b8 <RCCEx_PLL3_Config+0x15c>)
 800507c:	681b      	ldr	r3, [r3, #0]
 800507e:	4a4e      	ldr	r2, [pc, #312]	; (80051b8 <RCCEx_PLL3_Config+0x15c>)
 8005080:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8005084:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8005086:	f7fc fb6d 	bl	8001764 <HAL_GetTick>
 800508a:	60b8      	str	r0, [r7, #8]
    /* Wait till PLL3 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 800508c:	e008      	b.n	80050a0 <RCCEx_PLL3_Config+0x44>
    {
      if( (HAL_GetTick() - tickstart ) > PLL3_TIMEOUT_VALUE)
 800508e:	f7fc fb69 	bl	8001764 <HAL_GetTick>
 8005092:	4602      	mov	r2, r0
 8005094:	68bb      	ldr	r3, [r7, #8]
 8005096:	1ad3      	subs	r3, r2, r3
 8005098:	2b02      	cmp	r3, #2
 800509a:	d901      	bls.n	80050a0 <RCCEx_PLL3_Config+0x44>
      {
        return HAL_TIMEOUT;
 800509c:	2303      	movs	r3, #3
 800509e:	e086      	b.n	80051ae <RCCEx_PLL3_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 80050a0:	4b45      	ldr	r3, [pc, #276]	; (80051b8 <RCCEx_PLL3_Config+0x15c>)
 80050a2:	681b      	ldr	r3, [r3, #0]
 80050a4:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80050a8:	2b00      	cmp	r3, #0
 80050aa:	d1f0      	bne.n	800508e <RCCEx_PLL3_Config+0x32>
      }
    }

    /* Configure the PLL3  multiplication and division factors. */
    __HAL_RCC_PLL3_CONFIG(pll3->PLL3M,
 80050ac:	4b42      	ldr	r3, [pc, #264]	; (80051b8 <RCCEx_PLL3_Config+0x15c>)
 80050ae:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80050b0:	f023 727c 	bic.w	r2, r3, #66060288	; 0x3f00000
 80050b4:	687b      	ldr	r3, [r7, #4]
 80050b6:	681b      	ldr	r3, [r3, #0]
 80050b8:	051b      	lsls	r3, r3, #20
 80050ba:	493f      	ldr	r1, [pc, #252]	; (80051b8 <RCCEx_PLL3_Config+0x15c>)
 80050bc:	4313      	orrs	r3, r2
 80050be:	628b      	str	r3, [r1, #40]	; 0x28
 80050c0:	687b      	ldr	r3, [r7, #4]
 80050c2:	685b      	ldr	r3, [r3, #4]
 80050c4:	3b01      	subs	r3, #1
 80050c6:	f3c3 0208 	ubfx	r2, r3, #0, #9
 80050ca:	687b      	ldr	r3, [r7, #4]
 80050cc:	689b      	ldr	r3, [r3, #8]
 80050ce:	3b01      	subs	r3, #1
 80050d0:	025b      	lsls	r3, r3, #9
 80050d2:	b29b      	uxth	r3, r3
 80050d4:	431a      	orrs	r2, r3
 80050d6:	687b      	ldr	r3, [r7, #4]
 80050d8:	68db      	ldr	r3, [r3, #12]
 80050da:	3b01      	subs	r3, #1
 80050dc:	041b      	lsls	r3, r3, #16
 80050de:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 80050e2:	431a      	orrs	r2, r3
 80050e4:	687b      	ldr	r3, [r7, #4]
 80050e6:	691b      	ldr	r3, [r3, #16]
 80050e8:	3b01      	subs	r3, #1
 80050ea:	061b      	lsls	r3, r3, #24
 80050ec:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 80050f0:	4931      	ldr	r1, [pc, #196]	; (80051b8 <RCCEx_PLL3_Config+0x15c>)
 80050f2:	4313      	orrs	r3, r2
 80050f4:	640b      	str	r3, [r1, #64]	; 0x40
                          pll3->PLL3P,
                          pll3->PLL3Q,
                          pll3->PLL3R);

    /* Select PLL3 input reference frequency range: VCI */
    __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE) ;
 80050f6:	4b30      	ldr	r3, [pc, #192]	; (80051b8 <RCCEx_PLL3_Config+0x15c>)
 80050f8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80050fa:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 80050fe:	687b      	ldr	r3, [r7, #4]
 8005100:	695b      	ldr	r3, [r3, #20]
 8005102:	492d      	ldr	r1, [pc, #180]	; (80051b8 <RCCEx_PLL3_Config+0x15c>)
 8005104:	4313      	orrs	r3, r2
 8005106:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL3 output frequency range : VCO */
    __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL) ;
 8005108:	4b2b      	ldr	r3, [pc, #172]	; (80051b8 <RCCEx_PLL3_Config+0x15c>)
 800510a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800510c:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 8005110:	687b      	ldr	r3, [r7, #4]
 8005112:	699b      	ldr	r3, [r3, #24]
 8005114:	4928      	ldr	r1, [pc, #160]	; (80051b8 <RCCEx_PLL3_Config+0x15c>)
 8005116:	4313      	orrs	r3, r2
 8005118:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_DISABLE();
 800511a:	4b27      	ldr	r3, [pc, #156]	; (80051b8 <RCCEx_PLL3_Config+0x15c>)
 800511c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800511e:	4a26      	ldr	r2, [pc, #152]	; (80051b8 <RCCEx_PLL3_Config+0x15c>)
 8005120:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8005124:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 8005126:	4b24      	ldr	r3, [pc, #144]	; (80051b8 <RCCEx_PLL3_Config+0x15c>)
 8005128:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800512a:	4b24      	ldr	r3, [pc, #144]	; (80051bc <RCCEx_PLL3_Config+0x160>)
 800512c:	4013      	ands	r3, r2
 800512e:	687a      	ldr	r2, [r7, #4]
 8005130:	69d2      	ldr	r2, [r2, #28]
 8005132:	00d2      	lsls	r2, r2, #3
 8005134:	4920      	ldr	r1, [pc, #128]	; (80051b8 <RCCEx_PLL3_Config+0x15c>)
 8005136:	4313      	orrs	r3, r2
 8005138:	644b      	str	r3, [r1, #68]	; 0x44

    /* Enable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_ENABLE();
 800513a:	4b1f      	ldr	r3, [pc, #124]	; (80051b8 <RCCEx_PLL3_Config+0x15c>)
 800513c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800513e:	4a1e      	ldr	r2, [pc, #120]	; (80051b8 <RCCEx_PLL3_Config+0x15c>)
 8005140:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005144:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL3 clock output */
    if(Divider == DIVIDER_P_UPDATE)
 8005146:	683b      	ldr	r3, [r7, #0]
 8005148:	2b00      	cmp	r3, #0
 800514a:	d106      	bne.n	800515a <RCCEx_PLL3_Config+0xfe>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
 800514c:	4b1a      	ldr	r3, [pc, #104]	; (80051b8 <RCCEx_PLL3_Config+0x15c>)
 800514e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005150:	4a19      	ldr	r2, [pc, #100]	; (80051b8 <RCCEx_PLL3_Config+0x15c>)
 8005152:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8005156:	62d3      	str	r3, [r2, #44]	; 0x2c
 8005158:	e00f      	b.n	800517a <RCCEx_PLL3_Config+0x11e>
    }
    else if(Divider == DIVIDER_Q_UPDATE)
 800515a:	683b      	ldr	r3, [r7, #0]
 800515c:	2b01      	cmp	r3, #1
 800515e:	d106      	bne.n	800516e <RCCEx_PLL3_Config+0x112>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
 8005160:	4b15      	ldr	r3, [pc, #84]	; (80051b8 <RCCEx_PLL3_Config+0x15c>)
 8005162:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005164:	4a14      	ldr	r2, [pc, #80]	; (80051b8 <RCCEx_PLL3_Config+0x15c>)
 8005166:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 800516a:	62d3      	str	r3, [r2, #44]	; 0x2c
 800516c:	e005      	b.n	800517a <RCCEx_PLL3_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
 800516e:	4b12      	ldr	r3, [pc, #72]	; (80051b8 <RCCEx_PLL3_Config+0x15c>)
 8005170:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005172:	4a11      	ldr	r2, [pc, #68]	; (80051b8 <RCCEx_PLL3_Config+0x15c>)
 8005174:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8005178:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL3. */
    __HAL_RCC_PLL3_ENABLE();
 800517a:	4b0f      	ldr	r3, [pc, #60]	; (80051b8 <RCCEx_PLL3_Config+0x15c>)
 800517c:	681b      	ldr	r3, [r3, #0]
 800517e:	4a0e      	ldr	r2, [pc, #56]	; (80051b8 <RCCEx_PLL3_Config+0x15c>)
 8005180:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005184:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8005186:	f7fc faed 	bl	8001764 <HAL_GetTick>
 800518a:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL3 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 800518c:	e008      	b.n	80051a0 <RCCEx_PLL3_Config+0x144>
    {
      if( (HAL_GetTick() - tickstart ) > PLL3_TIMEOUT_VALUE)
 800518e:	f7fc fae9 	bl	8001764 <HAL_GetTick>
 8005192:	4602      	mov	r2, r0
 8005194:	68bb      	ldr	r3, [r7, #8]
 8005196:	1ad3      	subs	r3, r2, r3
 8005198:	2b02      	cmp	r3, #2
 800519a:	d901      	bls.n	80051a0 <RCCEx_PLL3_Config+0x144>
      {
        return HAL_TIMEOUT;
 800519c:	2303      	movs	r3, #3
 800519e:	e006      	b.n	80051ae <RCCEx_PLL3_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 80051a0:	4b05      	ldr	r3, [pc, #20]	; (80051b8 <RCCEx_PLL3_Config+0x15c>)
 80051a2:	681b      	ldr	r3, [r3, #0]
 80051a4:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80051a8:	2b00      	cmp	r3, #0
 80051aa:	d0f0      	beq.n	800518e <RCCEx_PLL3_Config+0x132>
    }

  }


  return status;
 80051ac:	7bfb      	ldrb	r3, [r7, #15]
}
 80051ae:	4618      	mov	r0, r3
 80051b0:	3710      	adds	r7, #16
 80051b2:	46bd      	mov	sp, r7
 80051b4:	bd80      	pop	{r7, pc}
 80051b6:	bf00      	nop
 80051b8:	58024400 	.word	0x58024400
 80051bc:	ffff0007 	.word	0xffff0007

080051c0 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80051c0:	b580      	push	{r7, lr}
 80051c2:	b082      	sub	sp, #8
 80051c4:	af00      	add	r7, sp, #0
 80051c6:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80051c8:	687b      	ldr	r3, [r7, #4]
 80051ca:	2b00      	cmp	r3, #0
 80051cc:	d101      	bne.n	80051d2 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80051ce:	2301      	movs	r3, #1
 80051d0:	e042      	b.n	8005258 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 80051d2:	687b      	ldr	r3, [r7, #4]
 80051d4:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80051d8:	2b00      	cmp	r3, #0
 80051da:	d106      	bne.n	80051ea <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80051dc:	687b      	ldr	r3, [r7, #4]
 80051de:	2200      	movs	r2, #0
 80051e0:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80051e4:	6878      	ldr	r0, [r7, #4]
 80051e6:	f7fb ffc5 	bl	8001174 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80051ea:	687b      	ldr	r3, [r7, #4]
 80051ec:	2224      	movs	r2, #36	; 0x24
 80051ee:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  __HAL_UART_DISABLE(huart);
 80051f2:	687b      	ldr	r3, [r7, #4]
 80051f4:	681b      	ldr	r3, [r3, #0]
 80051f6:	681a      	ldr	r2, [r3, #0]
 80051f8:	687b      	ldr	r3, [r7, #4]
 80051fa:	681b      	ldr	r3, [r3, #0]
 80051fc:	f022 0201 	bic.w	r2, r2, #1
 8005200:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8005202:	6878      	ldr	r0, [r7, #4]
 8005204:	f000 fb9c 	bl	8005940 <UART_SetConfig>
 8005208:	4603      	mov	r3, r0
 800520a:	2b01      	cmp	r3, #1
 800520c:	d101      	bne.n	8005212 <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 800520e:	2301      	movs	r3, #1
 8005210:	e022      	b.n	8005258 <HAL_UART_Init+0x98>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8005212:	687b      	ldr	r3, [r7, #4]
 8005214:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005216:	2b00      	cmp	r3, #0
 8005218:	d002      	beq.n	8005220 <HAL_UART_Init+0x60>
  {
    UART_AdvFeatureConfig(huart);
 800521a:	6878      	ldr	r0, [r7, #4]
 800521c:	f001 f9ee 	bl	80065fc <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8005220:	687b      	ldr	r3, [r7, #4]
 8005222:	681b      	ldr	r3, [r3, #0]
 8005224:	685a      	ldr	r2, [r3, #4]
 8005226:	687b      	ldr	r3, [r7, #4]
 8005228:	681b      	ldr	r3, [r3, #0]
 800522a:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800522e:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8005230:	687b      	ldr	r3, [r7, #4]
 8005232:	681b      	ldr	r3, [r3, #0]
 8005234:	689a      	ldr	r2, [r3, #8]
 8005236:	687b      	ldr	r3, [r7, #4]
 8005238:	681b      	ldr	r3, [r3, #0]
 800523a:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800523e:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8005240:	687b      	ldr	r3, [r7, #4]
 8005242:	681b      	ldr	r3, [r3, #0]
 8005244:	681a      	ldr	r2, [r3, #0]
 8005246:	687b      	ldr	r3, [r7, #4]
 8005248:	681b      	ldr	r3, [r3, #0]
 800524a:	f042 0201 	orr.w	r2, r2, #1
 800524e:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8005250:	6878      	ldr	r0, [r7, #4]
 8005252:	f001 fa75 	bl	8006740 <UART_CheckIdleState>
 8005256:	4603      	mov	r3, r0
}
 8005258:	4618      	mov	r0, r3
 800525a:	3708      	adds	r7, #8
 800525c:	46bd      	mov	sp, r7
 800525e:	bd80      	pop	{r7, pc}

08005260 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8005260:	b580      	push	{r7, lr}
 8005262:	b08a      	sub	sp, #40	; 0x28
 8005264:	af02      	add	r7, sp, #8
 8005266:	60f8      	str	r0, [r7, #12]
 8005268:	60b9      	str	r1, [r7, #8]
 800526a:	603b      	str	r3, [r7, #0]
 800526c:	4613      	mov	r3, r2
 800526e:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8005270:	68fb      	ldr	r3, [r7, #12]
 8005272:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8005276:	2b20      	cmp	r3, #32
 8005278:	f040 8083 	bne.w	8005382 <HAL_UART_Transmit+0x122>
  {
    if ((pData == NULL) || (Size == 0U))
 800527c:	68bb      	ldr	r3, [r7, #8]
 800527e:	2b00      	cmp	r3, #0
 8005280:	d002      	beq.n	8005288 <HAL_UART_Transmit+0x28>
 8005282:	88fb      	ldrh	r3, [r7, #6]
 8005284:	2b00      	cmp	r3, #0
 8005286:	d101      	bne.n	800528c <HAL_UART_Transmit+0x2c>
    {
      return  HAL_ERROR;
 8005288:	2301      	movs	r3, #1
 800528a:	e07b      	b.n	8005384 <HAL_UART_Transmit+0x124>
    }

    __HAL_LOCK(huart);
 800528c:	68fb      	ldr	r3, [r7, #12]
 800528e:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8005292:	2b01      	cmp	r3, #1
 8005294:	d101      	bne.n	800529a <HAL_UART_Transmit+0x3a>
 8005296:	2302      	movs	r3, #2
 8005298:	e074      	b.n	8005384 <HAL_UART_Transmit+0x124>
 800529a:	68fb      	ldr	r3, [r7, #12]
 800529c:	2201      	movs	r2, #1
 800529e:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80052a2:	68fb      	ldr	r3, [r7, #12]
 80052a4:	2200      	movs	r2, #0
 80052a6:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80052aa:	68fb      	ldr	r3, [r7, #12]
 80052ac:	2221      	movs	r2, #33	; 0x21
 80052ae:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80052b2:	f7fc fa57 	bl	8001764 <HAL_GetTick>
 80052b6:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 80052b8:	68fb      	ldr	r3, [r7, #12]
 80052ba:	88fa      	ldrh	r2, [r7, #6]
 80052bc:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
    huart->TxXferCount = Size;
 80052c0:	68fb      	ldr	r3, [r7, #12]
 80052c2:	88fa      	ldrh	r2, [r7, #6]
 80052c4:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80052c8:	68fb      	ldr	r3, [r7, #12]
 80052ca:	689b      	ldr	r3, [r3, #8]
 80052cc:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80052d0:	d108      	bne.n	80052e4 <HAL_UART_Transmit+0x84>
 80052d2:	68fb      	ldr	r3, [r7, #12]
 80052d4:	691b      	ldr	r3, [r3, #16]
 80052d6:	2b00      	cmp	r3, #0
 80052d8:	d104      	bne.n	80052e4 <HAL_UART_Transmit+0x84>
    {
      pdata8bits  = NULL;
 80052da:	2300      	movs	r3, #0
 80052dc:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 80052de:	68bb      	ldr	r3, [r7, #8]
 80052e0:	61bb      	str	r3, [r7, #24]
 80052e2:	e003      	b.n	80052ec <HAL_UART_Transmit+0x8c>
    }
    else
    {
      pdata8bits  = pData;
 80052e4:	68bb      	ldr	r3, [r7, #8]
 80052e6:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80052e8:	2300      	movs	r3, #0
 80052ea:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 80052ec:	68fb      	ldr	r3, [r7, #12]
 80052ee:	2200      	movs	r2, #0
 80052f0:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    while (huart->TxXferCount > 0U)
 80052f4:	e02c      	b.n	8005350 <HAL_UART_Transmit+0xf0>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80052f6:	683b      	ldr	r3, [r7, #0]
 80052f8:	9300      	str	r3, [sp, #0]
 80052fa:	697b      	ldr	r3, [r7, #20]
 80052fc:	2200      	movs	r2, #0
 80052fe:	2180      	movs	r1, #128	; 0x80
 8005300:	68f8      	ldr	r0, [r7, #12]
 8005302:	f001 fa68 	bl	80067d6 <UART_WaitOnFlagUntilTimeout>
 8005306:	4603      	mov	r3, r0
 8005308:	2b00      	cmp	r3, #0
 800530a:	d001      	beq.n	8005310 <HAL_UART_Transmit+0xb0>
      {
        return HAL_TIMEOUT;
 800530c:	2303      	movs	r3, #3
 800530e:	e039      	b.n	8005384 <HAL_UART_Transmit+0x124>
      }
      if (pdata8bits == NULL)
 8005310:	69fb      	ldr	r3, [r7, #28]
 8005312:	2b00      	cmp	r3, #0
 8005314:	d10b      	bne.n	800532e <HAL_UART_Transmit+0xce>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8005316:	69bb      	ldr	r3, [r7, #24]
 8005318:	881b      	ldrh	r3, [r3, #0]
 800531a:	461a      	mov	r2, r3
 800531c:	68fb      	ldr	r3, [r7, #12]
 800531e:	681b      	ldr	r3, [r3, #0]
 8005320:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8005324:	629a      	str	r2, [r3, #40]	; 0x28
        pdata16bits++;
 8005326:	69bb      	ldr	r3, [r7, #24]
 8005328:	3302      	adds	r3, #2
 800532a:	61bb      	str	r3, [r7, #24]
 800532c:	e007      	b.n	800533e <HAL_UART_Transmit+0xde>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 800532e:	69fb      	ldr	r3, [r7, #28]
 8005330:	781a      	ldrb	r2, [r3, #0]
 8005332:	68fb      	ldr	r3, [r7, #12]
 8005334:	681b      	ldr	r3, [r3, #0]
 8005336:	629a      	str	r2, [r3, #40]	; 0x28
        pdata8bits++;
 8005338:	69fb      	ldr	r3, [r7, #28]
 800533a:	3301      	adds	r3, #1
 800533c:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800533e:	68fb      	ldr	r3, [r7, #12]
 8005340:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 8005344:	b29b      	uxth	r3, r3
 8005346:	3b01      	subs	r3, #1
 8005348:	b29a      	uxth	r2, r3
 800534a:	68fb      	ldr	r3, [r7, #12]
 800534c:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
    while (huart->TxXferCount > 0U)
 8005350:	68fb      	ldr	r3, [r7, #12]
 8005352:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 8005356:	b29b      	uxth	r3, r3
 8005358:	2b00      	cmp	r3, #0
 800535a:	d1cc      	bne.n	80052f6 <HAL_UART_Transmit+0x96>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800535c:	683b      	ldr	r3, [r7, #0]
 800535e:	9300      	str	r3, [sp, #0]
 8005360:	697b      	ldr	r3, [r7, #20]
 8005362:	2200      	movs	r2, #0
 8005364:	2140      	movs	r1, #64	; 0x40
 8005366:	68f8      	ldr	r0, [r7, #12]
 8005368:	f001 fa35 	bl	80067d6 <UART_WaitOnFlagUntilTimeout>
 800536c:	4603      	mov	r3, r0
 800536e:	2b00      	cmp	r3, #0
 8005370:	d001      	beq.n	8005376 <HAL_UART_Transmit+0x116>
    {
      return HAL_TIMEOUT;
 8005372:	2303      	movs	r3, #3
 8005374:	e006      	b.n	8005384 <HAL_UART_Transmit+0x124>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8005376:	68fb      	ldr	r3, [r7, #12]
 8005378:	2220      	movs	r2, #32
 800537a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    return HAL_OK;
 800537e:	2300      	movs	r3, #0
 8005380:	e000      	b.n	8005384 <HAL_UART_Transmit+0x124>
  }
  else
  {
    return HAL_BUSY;
 8005382:	2302      	movs	r3, #2
  }
}
 8005384:	4618      	mov	r0, r3
 8005386:	3720      	adds	r7, #32
 8005388:	46bd      	mov	sp, r7
 800538a:	bd80      	pop	{r7, pc}

0800538c <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 800538c:	b580      	push	{r7, lr}
 800538e:	b088      	sub	sp, #32
 8005390:	af00      	add	r7, sp, #0
 8005392:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8005394:	687b      	ldr	r3, [r7, #4]
 8005396:	681b      	ldr	r3, [r3, #0]
 8005398:	69db      	ldr	r3, [r3, #28]
 800539a:	61fb      	str	r3, [r7, #28]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800539c:	687b      	ldr	r3, [r7, #4]
 800539e:	681b      	ldr	r3, [r3, #0]
 80053a0:	681b      	ldr	r3, [r3, #0]
 80053a2:	61bb      	str	r3, [r7, #24]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 80053a4:	687b      	ldr	r3, [r7, #4]
 80053a6:	681b      	ldr	r3, [r3, #0]
 80053a8:	689b      	ldr	r3, [r3, #8]
 80053aa:	617b      	str	r3, [r7, #20]

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 80053ac:	69fa      	ldr	r2, [r7, #28]
 80053ae:	f640 030f 	movw	r3, #2063	; 0x80f
 80053b2:	4013      	ands	r3, r2
 80053b4:	613b      	str	r3, [r7, #16]
  if (errorflags == 0U)
 80053b6:	693b      	ldr	r3, [r7, #16]
 80053b8:	2b00      	cmp	r3, #0
 80053ba:	d118      	bne.n	80053ee <HAL_UART_IRQHandler+0x62>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 80053bc:	69fb      	ldr	r3, [r7, #28]
 80053be:	f003 0320 	and.w	r3, r3, #32
 80053c2:	2b00      	cmp	r3, #0
 80053c4:	d013      	beq.n	80053ee <HAL_UART_IRQHandler+0x62>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 80053c6:	69bb      	ldr	r3, [r7, #24]
 80053c8:	f003 0320 	and.w	r3, r3, #32
 80053cc:	2b00      	cmp	r3, #0
 80053ce:	d104      	bne.n	80053da <HAL_UART_IRQHandler+0x4e>
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 80053d0:	697b      	ldr	r3, [r7, #20]
 80053d2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80053d6:	2b00      	cmp	r3, #0
 80053d8:	d009      	beq.n	80053ee <HAL_UART_IRQHandler+0x62>
    {
      if (huart->RxISR != NULL)
 80053da:	687b      	ldr	r3, [r7, #4]
 80053dc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80053de:	2b00      	cmp	r3, #0
 80053e0:	f000 8282 	beq.w	80058e8 <HAL_UART_IRQHandler+0x55c>
      {
        huart->RxISR(huart);
 80053e4:	687b      	ldr	r3, [r7, #4]
 80053e6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80053e8:	6878      	ldr	r0, [r7, #4]
 80053ea:	4798      	blx	r3
      }
      return;
 80053ec:	e27c      	b.n	80058e8 <HAL_UART_IRQHandler+0x55c>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 80053ee:	693b      	ldr	r3, [r7, #16]
 80053f0:	2b00      	cmp	r3, #0
 80053f2:	f000 80ef 	beq.w	80055d4 <HAL_UART_IRQHandler+0x248>
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
 80053f6:	697a      	ldr	r2, [r7, #20]
 80053f8:	4b73      	ldr	r3, [pc, #460]	; (80055c8 <HAL_UART_IRQHandler+0x23c>)
 80053fa:	4013      	ands	r3, r2
 80053fc:	2b00      	cmp	r3, #0
 80053fe:	d105      	bne.n	800540c <HAL_UART_IRQHandler+0x80>
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
 8005400:	69ba      	ldr	r2, [r7, #24]
 8005402:	4b72      	ldr	r3, [pc, #456]	; (80055cc <HAL_UART_IRQHandler+0x240>)
 8005404:	4013      	ands	r3, r2
 8005406:	2b00      	cmp	r3, #0
 8005408:	f000 80e4 	beq.w	80055d4 <HAL_UART_IRQHandler+0x248>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 800540c:	69fb      	ldr	r3, [r7, #28]
 800540e:	f003 0301 	and.w	r3, r3, #1
 8005412:	2b00      	cmp	r3, #0
 8005414:	d010      	beq.n	8005438 <HAL_UART_IRQHandler+0xac>
 8005416:	69bb      	ldr	r3, [r7, #24]
 8005418:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800541c:	2b00      	cmp	r3, #0
 800541e:	d00b      	beq.n	8005438 <HAL_UART_IRQHandler+0xac>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8005420:	687b      	ldr	r3, [r7, #4]
 8005422:	681b      	ldr	r3, [r3, #0]
 8005424:	2201      	movs	r2, #1
 8005426:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8005428:	687b      	ldr	r3, [r7, #4]
 800542a:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800542e:	f043 0201 	orr.w	r2, r3, #1
 8005432:	687b      	ldr	r3, [r7, #4]
 8005434:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8005438:	69fb      	ldr	r3, [r7, #28]
 800543a:	f003 0302 	and.w	r3, r3, #2
 800543e:	2b00      	cmp	r3, #0
 8005440:	d010      	beq.n	8005464 <HAL_UART_IRQHandler+0xd8>
 8005442:	697b      	ldr	r3, [r7, #20]
 8005444:	f003 0301 	and.w	r3, r3, #1
 8005448:	2b00      	cmp	r3, #0
 800544a:	d00b      	beq.n	8005464 <HAL_UART_IRQHandler+0xd8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 800544c:	687b      	ldr	r3, [r7, #4]
 800544e:	681b      	ldr	r3, [r3, #0]
 8005450:	2202      	movs	r2, #2
 8005452:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8005454:	687b      	ldr	r3, [r7, #4]
 8005456:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800545a:	f043 0204 	orr.w	r2, r3, #4
 800545e:	687b      	ldr	r3, [r7, #4]
 8005460:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8005464:	69fb      	ldr	r3, [r7, #28]
 8005466:	f003 0304 	and.w	r3, r3, #4
 800546a:	2b00      	cmp	r3, #0
 800546c:	d010      	beq.n	8005490 <HAL_UART_IRQHandler+0x104>
 800546e:	697b      	ldr	r3, [r7, #20]
 8005470:	f003 0301 	and.w	r3, r3, #1
 8005474:	2b00      	cmp	r3, #0
 8005476:	d00b      	beq.n	8005490 <HAL_UART_IRQHandler+0x104>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8005478:	687b      	ldr	r3, [r7, #4]
 800547a:	681b      	ldr	r3, [r3, #0]
 800547c:	2204      	movs	r2, #4
 800547e:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8005480:	687b      	ldr	r3, [r7, #4]
 8005482:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8005486:	f043 0202 	orr.w	r2, r3, #2
 800548a:	687b      	ldr	r3, [r7, #4]
 800548c:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 8005490:	69fb      	ldr	r3, [r7, #28]
 8005492:	f003 0308 	and.w	r3, r3, #8
 8005496:	2b00      	cmp	r3, #0
 8005498:	d015      	beq.n	80054c6 <HAL_UART_IRQHandler+0x13a>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 800549a:	69bb      	ldr	r3, [r7, #24]
 800549c:	f003 0320 	and.w	r3, r3, #32
 80054a0:	2b00      	cmp	r3, #0
 80054a2:	d104      	bne.n	80054ae <HAL_UART_IRQHandler+0x122>
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
 80054a4:	697a      	ldr	r2, [r7, #20]
 80054a6:	4b48      	ldr	r3, [pc, #288]	; (80055c8 <HAL_UART_IRQHandler+0x23c>)
 80054a8:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 80054aa:	2b00      	cmp	r3, #0
 80054ac:	d00b      	beq.n	80054c6 <HAL_UART_IRQHandler+0x13a>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 80054ae:	687b      	ldr	r3, [r7, #4]
 80054b0:	681b      	ldr	r3, [r3, #0]
 80054b2:	2208      	movs	r2, #8
 80054b4:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 80054b6:	687b      	ldr	r3, [r7, #4]
 80054b8:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80054bc:	f043 0208 	orr.w	r2, r3, #8
 80054c0:	687b      	ldr	r3, [r7, #4]
 80054c2:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 80054c6:	69fb      	ldr	r3, [r7, #28]
 80054c8:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80054cc:	2b00      	cmp	r3, #0
 80054ce:	d011      	beq.n	80054f4 <HAL_UART_IRQHandler+0x168>
 80054d0:	69bb      	ldr	r3, [r7, #24]
 80054d2:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 80054d6:	2b00      	cmp	r3, #0
 80054d8:	d00c      	beq.n	80054f4 <HAL_UART_IRQHandler+0x168>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80054da:	687b      	ldr	r3, [r7, #4]
 80054dc:	681b      	ldr	r3, [r3, #0]
 80054de:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80054e2:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 80054e4:	687b      	ldr	r3, [r7, #4]
 80054e6:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80054ea:	f043 0220 	orr.w	r2, r3, #32
 80054ee:	687b      	ldr	r3, [r7, #4]
 80054f0:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 80054f4:	687b      	ldr	r3, [r7, #4]
 80054f6:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80054fa:	2b00      	cmp	r3, #0
 80054fc:	f000 81f6 	beq.w	80058ec <HAL_UART_IRQHandler+0x560>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 8005500:	69fb      	ldr	r3, [r7, #28]
 8005502:	f003 0320 	and.w	r3, r3, #32
 8005506:	2b00      	cmp	r3, #0
 8005508:	d011      	beq.n	800552e <HAL_UART_IRQHandler+0x1a2>
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 800550a:	69bb      	ldr	r3, [r7, #24]
 800550c:	f003 0320 	and.w	r3, r3, #32
 8005510:	2b00      	cmp	r3, #0
 8005512:	d104      	bne.n	800551e <HAL_UART_IRQHandler+0x192>
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 8005514:	697b      	ldr	r3, [r7, #20]
 8005516:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800551a:	2b00      	cmp	r3, #0
 800551c:	d007      	beq.n	800552e <HAL_UART_IRQHandler+0x1a2>
      {
        if (huart->RxISR != NULL)
 800551e:	687b      	ldr	r3, [r7, #4]
 8005520:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005522:	2b00      	cmp	r3, #0
 8005524:	d003      	beq.n	800552e <HAL_UART_IRQHandler+0x1a2>
        {
          huart->RxISR(huart);
 8005526:	687b      	ldr	r3, [r7, #4]
 8005528:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800552a:	6878      	ldr	r0, [r7, #4]
 800552c:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 800552e:	687b      	ldr	r3, [r7, #4]
 8005530:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8005534:	60fb      	str	r3, [r7, #12]
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8005536:	687b      	ldr	r3, [r7, #4]
 8005538:	681b      	ldr	r3, [r3, #0]
 800553a:	689b      	ldr	r3, [r3, #8]
 800553c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005540:	2b40      	cmp	r3, #64	; 0x40
 8005542:	d004      	beq.n	800554e <HAL_UART_IRQHandler+0x1c2>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 8005544:	68fb      	ldr	r3, [r7, #12]
 8005546:	f003 0328 	and.w	r3, r3, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800554a:	2b00      	cmp	r3, #0
 800554c:	d031      	beq.n	80055b2 <HAL_UART_IRQHandler+0x226>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800554e:	6878      	ldr	r0, [r7, #4]
 8005550:	f001 f9c2 	bl	80068d8 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005554:	687b      	ldr	r3, [r7, #4]
 8005556:	681b      	ldr	r3, [r3, #0]
 8005558:	689b      	ldr	r3, [r3, #8]
 800555a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800555e:	2b40      	cmp	r3, #64	; 0x40
 8005560:	d123      	bne.n	80055aa <HAL_UART_IRQHandler+0x21e>
        {
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8005562:	687b      	ldr	r3, [r7, #4]
 8005564:	681b      	ldr	r3, [r3, #0]
 8005566:	689a      	ldr	r2, [r3, #8]
 8005568:	687b      	ldr	r3, [r7, #4]
 800556a:	681b      	ldr	r3, [r3, #0]
 800556c:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8005570:	609a      	str	r2, [r3, #8]

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8005572:	687b      	ldr	r3, [r7, #4]
 8005574:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8005576:	2b00      	cmp	r3, #0
 8005578:	d013      	beq.n	80055a2 <HAL_UART_IRQHandler+0x216>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800557a:	687b      	ldr	r3, [r7, #4]
 800557c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800557e:	4a14      	ldr	r2, [pc, #80]	; (80055d0 <HAL_UART_IRQHandler+0x244>)
 8005580:	651a      	str	r2, [r3, #80]	; 0x50

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8005582:	687b      	ldr	r3, [r7, #4]
 8005584:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8005586:	4618      	mov	r0, r3
 8005588:	f7fc fd56 	bl	8002038 <HAL_DMA_Abort_IT>
 800558c:	4603      	mov	r3, r0
 800558e:	2b00      	cmp	r3, #0
 8005590:	d017      	beq.n	80055c2 <HAL_UART_IRQHandler+0x236>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8005592:	687b      	ldr	r3, [r7, #4]
 8005594:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8005596:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005598:	687a      	ldr	r2, [r7, #4]
 800559a:	6fd2      	ldr	r2, [r2, #124]	; 0x7c
 800559c:	4610      	mov	r0, r2
 800559e:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80055a0:	e00f      	b.n	80055c2 <HAL_UART_IRQHandler+0x236>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 80055a2:	6878      	ldr	r0, [r7, #4]
 80055a4:	f000 f9b6 	bl	8005914 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80055a8:	e00b      	b.n	80055c2 <HAL_UART_IRQHandler+0x236>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 80055aa:	6878      	ldr	r0, [r7, #4]
 80055ac:	f000 f9b2 	bl	8005914 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80055b0:	e007      	b.n	80055c2 <HAL_UART_IRQHandler+0x236>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 80055b2:	6878      	ldr	r0, [r7, #4]
 80055b4:	f000 f9ae 	bl	8005914 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 80055b8:	687b      	ldr	r3, [r7, #4]
 80055ba:	2200      	movs	r2, #0
 80055bc:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
      }
    }
    return;
 80055c0:	e194      	b.n	80058ec <HAL_UART_IRQHandler+0x560>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80055c2:	bf00      	nop
    return;
 80055c4:	e192      	b.n	80058ec <HAL_UART_IRQHandler+0x560>
 80055c6:	bf00      	nop
 80055c8:	10000001 	.word	0x10000001
 80055cc:	04000120 	.word	0x04000120
 80055d0:	0800693d 	.word	0x0800693d

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80055d4:	687b      	ldr	r3, [r7, #4]
 80055d6:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80055d8:	2b01      	cmp	r3, #1
 80055da:	f040 810f 	bne.w	80057fc <HAL_UART_IRQHandler+0x470>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 80055de:	69fb      	ldr	r3, [r7, #28]
 80055e0:	f003 0310 	and.w	r3, r3, #16
 80055e4:	2b00      	cmp	r3, #0
 80055e6:	f000 8109 	beq.w	80057fc <HAL_UART_IRQHandler+0x470>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 80055ea:	69bb      	ldr	r3, [r7, #24]
 80055ec:	f003 0310 	and.w	r3, r3, #16
 80055f0:	2b00      	cmp	r3, #0
 80055f2:	f000 8103 	beq.w	80057fc <HAL_UART_IRQHandler+0x470>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 80055f6:	687b      	ldr	r3, [r7, #4]
 80055f8:	681b      	ldr	r3, [r3, #0]
 80055fa:	2210      	movs	r2, #16
 80055fc:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80055fe:	687b      	ldr	r3, [r7, #4]
 8005600:	681b      	ldr	r3, [r3, #0]
 8005602:	689b      	ldr	r3, [r3, #8]
 8005604:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005608:	2b40      	cmp	r3, #64	; 0x40
 800560a:	f040 80bb 	bne.w	8005784 <HAL_UART_IRQHandler+0x3f8>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 800560e:	687b      	ldr	r3, [r7, #4]
 8005610:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8005612:	681b      	ldr	r3, [r3, #0]
 8005614:	4a96      	ldr	r2, [pc, #600]	; (8005870 <HAL_UART_IRQHandler+0x4e4>)
 8005616:	4293      	cmp	r3, r2
 8005618:	d059      	beq.n	80056ce <HAL_UART_IRQHandler+0x342>
 800561a:	687b      	ldr	r3, [r7, #4]
 800561c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800561e:	681b      	ldr	r3, [r3, #0]
 8005620:	4a94      	ldr	r2, [pc, #592]	; (8005874 <HAL_UART_IRQHandler+0x4e8>)
 8005622:	4293      	cmp	r3, r2
 8005624:	d053      	beq.n	80056ce <HAL_UART_IRQHandler+0x342>
 8005626:	687b      	ldr	r3, [r7, #4]
 8005628:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800562a:	681b      	ldr	r3, [r3, #0]
 800562c:	4a92      	ldr	r2, [pc, #584]	; (8005878 <HAL_UART_IRQHandler+0x4ec>)
 800562e:	4293      	cmp	r3, r2
 8005630:	d04d      	beq.n	80056ce <HAL_UART_IRQHandler+0x342>
 8005632:	687b      	ldr	r3, [r7, #4]
 8005634:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8005636:	681b      	ldr	r3, [r3, #0]
 8005638:	4a90      	ldr	r2, [pc, #576]	; (800587c <HAL_UART_IRQHandler+0x4f0>)
 800563a:	4293      	cmp	r3, r2
 800563c:	d047      	beq.n	80056ce <HAL_UART_IRQHandler+0x342>
 800563e:	687b      	ldr	r3, [r7, #4]
 8005640:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8005642:	681b      	ldr	r3, [r3, #0]
 8005644:	4a8e      	ldr	r2, [pc, #568]	; (8005880 <HAL_UART_IRQHandler+0x4f4>)
 8005646:	4293      	cmp	r3, r2
 8005648:	d041      	beq.n	80056ce <HAL_UART_IRQHandler+0x342>
 800564a:	687b      	ldr	r3, [r7, #4]
 800564c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800564e:	681b      	ldr	r3, [r3, #0]
 8005650:	4a8c      	ldr	r2, [pc, #560]	; (8005884 <HAL_UART_IRQHandler+0x4f8>)
 8005652:	4293      	cmp	r3, r2
 8005654:	d03b      	beq.n	80056ce <HAL_UART_IRQHandler+0x342>
 8005656:	687b      	ldr	r3, [r7, #4]
 8005658:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800565a:	681b      	ldr	r3, [r3, #0]
 800565c:	4a8a      	ldr	r2, [pc, #552]	; (8005888 <HAL_UART_IRQHandler+0x4fc>)
 800565e:	4293      	cmp	r3, r2
 8005660:	d035      	beq.n	80056ce <HAL_UART_IRQHandler+0x342>
 8005662:	687b      	ldr	r3, [r7, #4]
 8005664:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8005666:	681b      	ldr	r3, [r3, #0]
 8005668:	4a88      	ldr	r2, [pc, #544]	; (800588c <HAL_UART_IRQHandler+0x500>)
 800566a:	4293      	cmp	r3, r2
 800566c:	d02f      	beq.n	80056ce <HAL_UART_IRQHandler+0x342>
 800566e:	687b      	ldr	r3, [r7, #4]
 8005670:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8005672:	681b      	ldr	r3, [r3, #0]
 8005674:	4a86      	ldr	r2, [pc, #536]	; (8005890 <HAL_UART_IRQHandler+0x504>)
 8005676:	4293      	cmp	r3, r2
 8005678:	d029      	beq.n	80056ce <HAL_UART_IRQHandler+0x342>
 800567a:	687b      	ldr	r3, [r7, #4]
 800567c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800567e:	681b      	ldr	r3, [r3, #0]
 8005680:	4a84      	ldr	r2, [pc, #528]	; (8005894 <HAL_UART_IRQHandler+0x508>)
 8005682:	4293      	cmp	r3, r2
 8005684:	d023      	beq.n	80056ce <HAL_UART_IRQHandler+0x342>
 8005686:	687b      	ldr	r3, [r7, #4]
 8005688:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800568a:	681b      	ldr	r3, [r3, #0]
 800568c:	4a82      	ldr	r2, [pc, #520]	; (8005898 <HAL_UART_IRQHandler+0x50c>)
 800568e:	4293      	cmp	r3, r2
 8005690:	d01d      	beq.n	80056ce <HAL_UART_IRQHandler+0x342>
 8005692:	687b      	ldr	r3, [r7, #4]
 8005694:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8005696:	681b      	ldr	r3, [r3, #0]
 8005698:	4a80      	ldr	r2, [pc, #512]	; (800589c <HAL_UART_IRQHandler+0x510>)
 800569a:	4293      	cmp	r3, r2
 800569c:	d017      	beq.n	80056ce <HAL_UART_IRQHandler+0x342>
 800569e:	687b      	ldr	r3, [r7, #4]
 80056a0:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80056a2:	681b      	ldr	r3, [r3, #0]
 80056a4:	4a7e      	ldr	r2, [pc, #504]	; (80058a0 <HAL_UART_IRQHandler+0x514>)
 80056a6:	4293      	cmp	r3, r2
 80056a8:	d011      	beq.n	80056ce <HAL_UART_IRQHandler+0x342>
 80056aa:	687b      	ldr	r3, [r7, #4]
 80056ac:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80056ae:	681b      	ldr	r3, [r3, #0]
 80056b0:	4a7c      	ldr	r2, [pc, #496]	; (80058a4 <HAL_UART_IRQHandler+0x518>)
 80056b2:	4293      	cmp	r3, r2
 80056b4:	d00b      	beq.n	80056ce <HAL_UART_IRQHandler+0x342>
 80056b6:	687b      	ldr	r3, [r7, #4]
 80056b8:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80056ba:	681b      	ldr	r3, [r3, #0]
 80056bc:	4a7a      	ldr	r2, [pc, #488]	; (80058a8 <HAL_UART_IRQHandler+0x51c>)
 80056be:	4293      	cmp	r3, r2
 80056c0:	d005      	beq.n	80056ce <HAL_UART_IRQHandler+0x342>
 80056c2:	687b      	ldr	r3, [r7, #4]
 80056c4:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80056c6:	681b      	ldr	r3, [r3, #0]
 80056c8:	4a78      	ldr	r2, [pc, #480]	; (80058ac <HAL_UART_IRQHandler+0x520>)
 80056ca:	4293      	cmp	r3, r2
 80056cc:	d105      	bne.n	80056da <HAL_UART_IRQHandler+0x34e>
 80056ce:	687b      	ldr	r3, [r7, #4]
 80056d0:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80056d2:	681b      	ldr	r3, [r3, #0]
 80056d4:	685b      	ldr	r3, [r3, #4]
 80056d6:	b29b      	uxth	r3, r3
 80056d8:	e004      	b.n	80056e4 <HAL_UART_IRQHandler+0x358>
 80056da:	687b      	ldr	r3, [r7, #4]
 80056dc:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80056de:	681b      	ldr	r3, [r3, #0]
 80056e0:	685b      	ldr	r3, [r3, #4]
 80056e2:	b29b      	uxth	r3, r3
 80056e4:	813b      	strh	r3, [r7, #8]
      if ((nb_remaining_rx_data > 0U)
 80056e6:	893b      	ldrh	r3, [r7, #8]
 80056e8:	2b00      	cmp	r3, #0
 80056ea:	f000 8101 	beq.w	80058f0 <HAL_UART_IRQHandler+0x564>
          && (nb_remaining_rx_data < huart->RxXferSize))
 80056ee:	687b      	ldr	r3, [r7, #4]
 80056f0:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 80056f4:	893a      	ldrh	r2, [r7, #8]
 80056f6:	429a      	cmp	r2, r3
 80056f8:	f080 80fa 	bcs.w	80058f0 <HAL_UART_IRQHandler+0x564>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 80056fc:	687b      	ldr	r3, [r7, #4]
 80056fe:	893a      	ldrh	r2, [r7, #8]
 8005700:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8005704:	687b      	ldr	r3, [r7, #4]
 8005706:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8005708:	69db      	ldr	r3, [r3, #28]
 800570a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800570e:	d02b      	beq.n	8005768 <HAL_UART_IRQHandler+0x3dc>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8005710:	687b      	ldr	r3, [r7, #4]
 8005712:	681b      	ldr	r3, [r3, #0]
 8005714:	681a      	ldr	r2, [r3, #0]
 8005716:	687b      	ldr	r3, [r7, #4]
 8005718:	681b      	ldr	r3, [r3, #0]
 800571a:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800571e:	601a      	str	r2, [r3, #0]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005720:	687b      	ldr	r3, [r7, #4]
 8005722:	681b      	ldr	r3, [r3, #0]
 8005724:	689a      	ldr	r2, [r3, #8]
 8005726:	687b      	ldr	r3, [r7, #4]
 8005728:	681b      	ldr	r3, [r3, #0]
 800572a:	f022 0201 	bic.w	r2, r2, #1
 800572e:	609a      	str	r2, [r3, #8]

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8005730:	687b      	ldr	r3, [r7, #4]
 8005732:	681b      	ldr	r3, [r3, #0]
 8005734:	689a      	ldr	r2, [r3, #8]
 8005736:	687b      	ldr	r3, [r7, #4]
 8005738:	681b      	ldr	r3, [r3, #0]
 800573a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800573e:	609a      	str	r2, [r3, #8]

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8005740:	687b      	ldr	r3, [r7, #4]
 8005742:	2220      	movs	r2, #32
 8005744:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005748:	687b      	ldr	r3, [r7, #4]
 800574a:	2200      	movs	r2, #0
 800574c:	66da      	str	r2, [r3, #108]	; 0x6c

          CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800574e:	687b      	ldr	r3, [r7, #4]
 8005750:	681b      	ldr	r3, [r3, #0]
 8005752:	681a      	ldr	r2, [r3, #0]
 8005754:	687b      	ldr	r3, [r7, #4]
 8005756:	681b      	ldr	r3, [r3, #0]
 8005758:	f022 0210 	bic.w	r2, r2, #16
 800575c:	601a      	str	r2, [r3, #0]

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 800575e:	687b      	ldr	r3, [r7, #4]
 8005760:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8005762:	4618      	mov	r0, r3
 8005764:	f7fc f94a 	bl	80019fc <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8005768:	687b      	ldr	r3, [r7, #4]
 800576a:	f8b3 205c 	ldrh.w	r2, [r3, #92]	; 0x5c
 800576e:	687b      	ldr	r3, [r7, #4]
 8005770:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8005774:	b29b      	uxth	r3, r3
 8005776:	1ad3      	subs	r3, r2, r3
 8005778:	b29b      	uxth	r3, r3
 800577a:	4619      	mov	r1, r3
 800577c:	6878      	ldr	r0, [r7, #4]
 800577e:	f000 f8d3 	bl	8005928 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8005782:	e0b5      	b.n	80058f0 <HAL_UART_IRQHandler+0x564>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8005784:	687b      	ldr	r3, [r7, #4]
 8005786:	f8b3 205c 	ldrh.w	r2, [r3, #92]	; 0x5c
 800578a:	687b      	ldr	r3, [r7, #4]
 800578c:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8005790:	b29b      	uxth	r3, r3
 8005792:	1ad3      	subs	r3, r2, r3
 8005794:	817b      	strh	r3, [r7, #10]
      if ((huart->RxXferCount > 0U)
 8005796:	687b      	ldr	r3, [r7, #4]
 8005798:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800579c:	b29b      	uxth	r3, r3
 800579e:	2b00      	cmp	r3, #0
 80057a0:	f000 80a8 	beq.w	80058f4 <HAL_UART_IRQHandler+0x568>
          && (nb_rx_data > 0U))
 80057a4:	897b      	ldrh	r3, [r7, #10]
 80057a6:	2b00      	cmp	r3, #0
 80057a8:	f000 80a4 	beq.w	80058f4 <HAL_UART_IRQHandler+0x568>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 80057ac:	687b      	ldr	r3, [r7, #4]
 80057ae:	681b      	ldr	r3, [r3, #0]
 80057b0:	681a      	ldr	r2, [r3, #0]
 80057b2:	687b      	ldr	r3, [r7, #4]
 80057b4:	681b      	ldr	r3, [r3, #0]
 80057b6:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 80057ba:	601a      	str	r2, [r3, #0]

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 80057bc:	687b      	ldr	r3, [r7, #4]
 80057be:	681b      	ldr	r3, [r3, #0]
 80057c0:	6899      	ldr	r1, [r3, #8]
 80057c2:	687b      	ldr	r3, [r7, #4]
 80057c4:	681a      	ldr	r2, [r3, #0]
 80057c6:	4b3a      	ldr	r3, [pc, #232]	; (80058b0 <HAL_UART_IRQHandler+0x524>)
 80057c8:	400b      	ands	r3, r1
 80057ca:	6093      	str	r3, [r2, #8]

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 80057cc:	687b      	ldr	r3, [r7, #4]
 80057ce:	2220      	movs	r2, #32
 80057d0:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80057d4:	687b      	ldr	r3, [r7, #4]
 80057d6:	2200      	movs	r2, #0
 80057d8:	66da      	str	r2, [r3, #108]	; 0x6c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 80057da:	687b      	ldr	r3, [r7, #4]
 80057dc:	2200      	movs	r2, #0
 80057de:	671a      	str	r2, [r3, #112]	; 0x70

        CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80057e0:	687b      	ldr	r3, [r7, #4]
 80057e2:	681b      	ldr	r3, [r3, #0]
 80057e4:	681a      	ldr	r2, [r3, #0]
 80057e6:	687b      	ldr	r3, [r7, #4]
 80057e8:	681b      	ldr	r3, [r3, #0]
 80057ea:	f022 0210 	bic.w	r2, r2, #16
 80057ee:	601a      	str	r2, [r3, #0]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 80057f0:	897b      	ldrh	r3, [r7, #10]
 80057f2:	4619      	mov	r1, r3
 80057f4:	6878      	ldr	r0, [r7, #4]
 80057f6:	f000 f897 	bl	8005928 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 80057fa:	e07b      	b.n	80058f4 <HAL_UART_IRQHandler+0x568>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 80057fc:	69fb      	ldr	r3, [r7, #28]
 80057fe:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8005802:	2b00      	cmp	r3, #0
 8005804:	d00d      	beq.n	8005822 <HAL_UART_IRQHandler+0x496>
 8005806:	697b      	ldr	r3, [r7, #20]
 8005808:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800580c:	2b00      	cmp	r3, #0
 800580e:	d008      	beq.n	8005822 <HAL_UART_IRQHandler+0x496>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 8005810:	687b      	ldr	r3, [r7, #4]
 8005812:	681b      	ldr	r3, [r3, #0]
 8005814:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8005818:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 800581a:	6878      	ldr	r0, [r7, #4]
 800581c:	f001 f8be 	bl	800699c <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8005820:	e06b      	b.n	80058fa <HAL_UART_IRQHandler+0x56e>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
 8005822:	69fb      	ldr	r3, [r7, #28]
 8005824:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005828:	2b00      	cmp	r3, #0
 800582a:	d012      	beq.n	8005852 <HAL_UART_IRQHandler+0x4c6>
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
 800582c:	69bb      	ldr	r3, [r7, #24]
 800582e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005832:	2b00      	cmp	r3, #0
 8005834:	d104      	bne.n	8005840 <HAL_UART_IRQHandler+0x4b4>
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
 8005836:	697b      	ldr	r3, [r7, #20]
 8005838:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800583c:	2b00      	cmp	r3, #0
 800583e:	d008      	beq.n	8005852 <HAL_UART_IRQHandler+0x4c6>
  {
    if (huart->TxISR != NULL)
 8005840:	687b      	ldr	r3, [r7, #4]
 8005842:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005844:	2b00      	cmp	r3, #0
 8005846:	d057      	beq.n	80058f8 <HAL_UART_IRQHandler+0x56c>
    {
      huart->TxISR(huart);
 8005848:	687b      	ldr	r3, [r7, #4]
 800584a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800584c:	6878      	ldr	r0, [r7, #4]
 800584e:	4798      	blx	r3
    }
    return;
 8005850:	e052      	b.n	80058f8 <HAL_UART_IRQHandler+0x56c>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 8005852:	69fb      	ldr	r3, [r7, #28]
 8005854:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005858:	2b00      	cmp	r3, #0
 800585a:	d02b      	beq.n	80058b4 <HAL_UART_IRQHandler+0x528>
 800585c:	69bb      	ldr	r3, [r7, #24]
 800585e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005862:	2b00      	cmp	r3, #0
 8005864:	d026      	beq.n	80058b4 <HAL_UART_IRQHandler+0x528>
  {
    UART_EndTransmit_IT(huart);
 8005866:	6878      	ldr	r0, [r7, #4]
 8005868:	f001 f87e 	bl	8006968 <UART_EndTransmit_IT>
    return;
 800586c:	e045      	b.n	80058fa <HAL_UART_IRQHandler+0x56e>
 800586e:	bf00      	nop
 8005870:	40020010 	.word	0x40020010
 8005874:	40020028 	.word	0x40020028
 8005878:	40020040 	.word	0x40020040
 800587c:	40020058 	.word	0x40020058
 8005880:	40020070 	.word	0x40020070
 8005884:	40020088 	.word	0x40020088
 8005888:	400200a0 	.word	0x400200a0
 800588c:	400200b8 	.word	0x400200b8
 8005890:	40020410 	.word	0x40020410
 8005894:	40020428 	.word	0x40020428
 8005898:	40020440 	.word	0x40020440
 800589c:	40020458 	.word	0x40020458
 80058a0:	40020470 	.word	0x40020470
 80058a4:	40020488 	.word	0x40020488
 80058a8:	400204a0 	.word	0x400204a0
 80058ac:	400204b8 	.word	0x400204b8
 80058b0:	effffffe 	.word	0xeffffffe
  }

  /* UART TX Fifo Empty occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_TXFE) != 0U) && ((cr1its & USART_CR1_TXFEIE) != 0U))
 80058b4:	69fb      	ldr	r3, [r7, #28]
 80058b6:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80058ba:	2b00      	cmp	r3, #0
 80058bc:	d008      	beq.n	80058d0 <HAL_UART_IRQHandler+0x544>
 80058be:	69bb      	ldr	r3, [r7, #24]
 80058c0:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 80058c4:	2b00      	cmp	r3, #0
 80058c6:	d003      	beq.n	80058d0 <HAL_UART_IRQHandler+0x544>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Tx Fifo Empty Callback */
    huart->TxFifoEmptyCallback(huart);
#else
    /* Call legacy weak Tx Fifo Empty Callback */
    HAL_UARTEx_TxFifoEmptyCallback(huart);
 80058c8:	6878      	ldr	r0, [r7, #4]
 80058ca:	f001 f87b 	bl	80069c4 <HAL_UARTEx_TxFifoEmptyCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 80058ce:	e014      	b.n	80058fa <HAL_UART_IRQHandler+0x56e>
  }

  /* UART RX Fifo Full occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_RXFF) != 0U) && ((cr1its & USART_CR1_RXFFIE) != 0U))
 80058d0:	69fb      	ldr	r3, [r7, #28]
 80058d2:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80058d6:	2b00      	cmp	r3, #0
 80058d8:	d00f      	beq.n	80058fa <HAL_UART_IRQHandler+0x56e>
 80058da:	69bb      	ldr	r3, [r7, #24]
 80058dc:	2b00      	cmp	r3, #0
 80058de:	da0c      	bge.n	80058fa <HAL_UART_IRQHandler+0x56e>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Rx Fifo Full Callback */
    huart->RxFifoFullCallback(huart);
#else
    /* Call legacy weak Rx Fifo Full Callback */
    HAL_UARTEx_RxFifoFullCallback(huart);
 80058e0:	6878      	ldr	r0, [r7, #4]
 80058e2:	f001 f865 	bl	80069b0 <HAL_UARTEx_RxFifoFullCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 80058e6:	e008      	b.n	80058fa <HAL_UART_IRQHandler+0x56e>
      return;
 80058e8:	bf00      	nop
 80058ea:	e006      	b.n	80058fa <HAL_UART_IRQHandler+0x56e>
    return;
 80058ec:	bf00      	nop
 80058ee:	e004      	b.n	80058fa <HAL_UART_IRQHandler+0x56e>
      return;
 80058f0:	bf00      	nop
 80058f2:	e002      	b.n	80058fa <HAL_UART_IRQHandler+0x56e>
      return;
 80058f4:	bf00      	nop
 80058f6:	e000      	b.n	80058fa <HAL_UART_IRQHandler+0x56e>
    return;
 80058f8:	bf00      	nop
  }
}
 80058fa:	3720      	adds	r7, #32
 80058fc:	46bd      	mov	sp, r7
 80058fe:	bd80      	pop	{r7, pc}

08005900 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8005900:	b480      	push	{r7}
 8005902:	b083      	sub	sp, #12
 8005904:	af00      	add	r7, sp, #0
 8005906:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 8005908:	bf00      	nop
 800590a:	370c      	adds	r7, #12
 800590c:	46bd      	mov	sp, r7
 800590e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005912:	4770      	bx	lr

08005914 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8005914:	b480      	push	{r7}
 8005916:	b083      	sub	sp, #12
 8005918:	af00      	add	r7, sp, #0
 800591a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 800591c:	bf00      	nop
 800591e:	370c      	adds	r7, #12
 8005920:	46bd      	mov	sp, r7
 8005922:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005926:	4770      	bx	lr

08005928 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8005928:	b480      	push	{r7}
 800592a:	b083      	sub	sp, #12
 800592c:	af00      	add	r7, sp, #0
 800592e:	6078      	str	r0, [r7, #4]
 8005930:	460b      	mov	r3, r1
 8005932:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8005934:	bf00      	nop
 8005936:	370c      	adds	r7, #12
 8005938:	46bd      	mov	sp, r7
 800593a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800593e:	4770      	bx	lr

08005940 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8005940:	b5b0      	push	{r4, r5, r7, lr}
 8005942:	b08e      	sub	sp, #56	; 0x38
 8005944:	af00      	add	r7, sp, #0
 8005946:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8005948:	2300      	movs	r3, #0
 800594a:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800594e:	687b      	ldr	r3, [r7, #4]
 8005950:	689a      	ldr	r2, [r3, #8]
 8005952:	687b      	ldr	r3, [r7, #4]
 8005954:	691b      	ldr	r3, [r3, #16]
 8005956:	431a      	orrs	r2, r3
 8005958:	687b      	ldr	r3, [r7, #4]
 800595a:	695b      	ldr	r3, [r3, #20]
 800595c:	431a      	orrs	r2, r3
 800595e:	687b      	ldr	r3, [r7, #4]
 8005960:	69db      	ldr	r3, [r3, #28]
 8005962:	4313      	orrs	r3, r2
 8005964:	637b      	str	r3, [r7, #52]	; 0x34
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8005966:	687b      	ldr	r3, [r7, #4]
 8005968:	681b      	ldr	r3, [r3, #0]
 800596a:	681a      	ldr	r2, [r3, #0]
 800596c:	4bbf      	ldr	r3, [pc, #764]	; (8005c6c <UART_SetConfig+0x32c>)
 800596e:	4013      	ands	r3, r2
 8005970:	687a      	ldr	r2, [r7, #4]
 8005972:	6812      	ldr	r2, [r2, #0]
 8005974:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8005976:	430b      	orrs	r3, r1
 8005978:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800597a:	687b      	ldr	r3, [r7, #4]
 800597c:	681b      	ldr	r3, [r3, #0]
 800597e:	685b      	ldr	r3, [r3, #4]
 8005980:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8005984:	687b      	ldr	r3, [r7, #4]
 8005986:	68da      	ldr	r2, [r3, #12]
 8005988:	687b      	ldr	r3, [r7, #4]
 800598a:	681b      	ldr	r3, [r3, #0]
 800598c:	430a      	orrs	r2, r1
 800598e:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8005990:	687b      	ldr	r3, [r7, #4]
 8005992:	699b      	ldr	r3, [r3, #24]
 8005994:	637b      	str	r3, [r7, #52]	; 0x34

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8005996:	687b      	ldr	r3, [r7, #4]
 8005998:	681b      	ldr	r3, [r3, #0]
 800599a:	4ab5      	ldr	r2, [pc, #724]	; (8005c70 <UART_SetConfig+0x330>)
 800599c:	4293      	cmp	r3, r2
 800599e:	d004      	beq.n	80059aa <UART_SetConfig+0x6a>
  {
    tmpreg |= huart->Init.OneBitSampling;
 80059a0:	687b      	ldr	r3, [r7, #4]
 80059a2:	6a1b      	ldr	r3, [r3, #32]
 80059a4:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80059a6:	4313      	orrs	r3, r2
 80059a8:	637b      	str	r3, [r7, #52]	; 0x34
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 80059aa:	687b      	ldr	r3, [r7, #4]
 80059ac:	681b      	ldr	r3, [r3, #0]
 80059ae:	689a      	ldr	r2, [r3, #8]
 80059b0:	4bb0      	ldr	r3, [pc, #704]	; (8005c74 <UART_SetConfig+0x334>)
 80059b2:	4013      	ands	r3, r2
 80059b4:	687a      	ldr	r2, [r7, #4]
 80059b6:	6812      	ldr	r2, [r2, #0]
 80059b8:	6b79      	ldr	r1, [r7, #52]	; 0x34
 80059ba:	430b      	orrs	r3, r1
 80059bc:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 80059be:	687b      	ldr	r3, [r7, #4]
 80059c0:	681b      	ldr	r3, [r3, #0]
 80059c2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80059c4:	f023 010f 	bic.w	r1, r3, #15
 80059c8:	687b      	ldr	r3, [r7, #4]
 80059ca:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80059cc:	687b      	ldr	r3, [r7, #4]
 80059ce:	681b      	ldr	r3, [r3, #0]
 80059d0:	430a      	orrs	r2, r1
 80059d2:	62da      	str	r2, [r3, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 80059d4:	687b      	ldr	r3, [r7, #4]
 80059d6:	681b      	ldr	r3, [r3, #0]
 80059d8:	4aa7      	ldr	r2, [pc, #668]	; (8005c78 <UART_SetConfig+0x338>)
 80059da:	4293      	cmp	r3, r2
 80059dc:	d176      	bne.n	8005acc <UART_SetConfig+0x18c>
 80059de:	4ba7      	ldr	r3, [pc, #668]	; (8005c7c <UART_SetConfig+0x33c>)
 80059e0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80059e2:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80059e6:	2b28      	cmp	r3, #40	; 0x28
 80059e8:	d86c      	bhi.n	8005ac4 <UART_SetConfig+0x184>
 80059ea:	a201      	add	r2, pc, #4	; (adr r2, 80059f0 <UART_SetConfig+0xb0>)
 80059ec:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80059f0:	08005a95 	.word	0x08005a95
 80059f4:	08005ac5 	.word	0x08005ac5
 80059f8:	08005ac5 	.word	0x08005ac5
 80059fc:	08005ac5 	.word	0x08005ac5
 8005a00:	08005ac5 	.word	0x08005ac5
 8005a04:	08005ac5 	.word	0x08005ac5
 8005a08:	08005ac5 	.word	0x08005ac5
 8005a0c:	08005ac5 	.word	0x08005ac5
 8005a10:	08005a9d 	.word	0x08005a9d
 8005a14:	08005ac5 	.word	0x08005ac5
 8005a18:	08005ac5 	.word	0x08005ac5
 8005a1c:	08005ac5 	.word	0x08005ac5
 8005a20:	08005ac5 	.word	0x08005ac5
 8005a24:	08005ac5 	.word	0x08005ac5
 8005a28:	08005ac5 	.word	0x08005ac5
 8005a2c:	08005ac5 	.word	0x08005ac5
 8005a30:	08005aa5 	.word	0x08005aa5
 8005a34:	08005ac5 	.word	0x08005ac5
 8005a38:	08005ac5 	.word	0x08005ac5
 8005a3c:	08005ac5 	.word	0x08005ac5
 8005a40:	08005ac5 	.word	0x08005ac5
 8005a44:	08005ac5 	.word	0x08005ac5
 8005a48:	08005ac5 	.word	0x08005ac5
 8005a4c:	08005ac5 	.word	0x08005ac5
 8005a50:	08005aad 	.word	0x08005aad
 8005a54:	08005ac5 	.word	0x08005ac5
 8005a58:	08005ac5 	.word	0x08005ac5
 8005a5c:	08005ac5 	.word	0x08005ac5
 8005a60:	08005ac5 	.word	0x08005ac5
 8005a64:	08005ac5 	.word	0x08005ac5
 8005a68:	08005ac5 	.word	0x08005ac5
 8005a6c:	08005ac5 	.word	0x08005ac5
 8005a70:	08005ab5 	.word	0x08005ab5
 8005a74:	08005ac5 	.word	0x08005ac5
 8005a78:	08005ac5 	.word	0x08005ac5
 8005a7c:	08005ac5 	.word	0x08005ac5
 8005a80:	08005ac5 	.word	0x08005ac5
 8005a84:	08005ac5 	.word	0x08005ac5
 8005a88:	08005ac5 	.word	0x08005ac5
 8005a8c:	08005ac5 	.word	0x08005ac5
 8005a90:	08005abd 	.word	0x08005abd
 8005a94:	2301      	movs	r3, #1
 8005a96:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8005a9a:	e326      	b.n	80060ea <UART_SetConfig+0x7aa>
 8005a9c:	2304      	movs	r3, #4
 8005a9e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8005aa2:	e322      	b.n	80060ea <UART_SetConfig+0x7aa>
 8005aa4:	2308      	movs	r3, #8
 8005aa6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8005aaa:	e31e      	b.n	80060ea <UART_SetConfig+0x7aa>
 8005aac:	2310      	movs	r3, #16
 8005aae:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8005ab2:	e31a      	b.n	80060ea <UART_SetConfig+0x7aa>
 8005ab4:	2320      	movs	r3, #32
 8005ab6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8005aba:	e316      	b.n	80060ea <UART_SetConfig+0x7aa>
 8005abc:	2340      	movs	r3, #64	; 0x40
 8005abe:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8005ac2:	e312      	b.n	80060ea <UART_SetConfig+0x7aa>
 8005ac4:	2380      	movs	r3, #128	; 0x80
 8005ac6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8005aca:	e30e      	b.n	80060ea <UART_SetConfig+0x7aa>
 8005acc:	687b      	ldr	r3, [r7, #4]
 8005ace:	681b      	ldr	r3, [r3, #0]
 8005ad0:	4a6b      	ldr	r2, [pc, #428]	; (8005c80 <UART_SetConfig+0x340>)
 8005ad2:	4293      	cmp	r3, r2
 8005ad4:	d130      	bne.n	8005b38 <UART_SetConfig+0x1f8>
 8005ad6:	4b69      	ldr	r3, [pc, #420]	; (8005c7c <UART_SetConfig+0x33c>)
 8005ad8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005ada:	f003 0307 	and.w	r3, r3, #7
 8005ade:	2b05      	cmp	r3, #5
 8005ae0:	d826      	bhi.n	8005b30 <UART_SetConfig+0x1f0>
 8005ae2:	a201      	add	r2, pc, #4	; (adr r2, 8005ae8 <UART_SetConfig+0x1a8>)
 8005ae4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005ae8:	08005b01 	.word	0x08005b01
 8005aec:	08005b09 	.word	0x08005b09
 8005af0:	08005b11 	.word	0x08005b11
 8005af4:	08005b19 	.word	0x08005b19
 8005af8:	08005b21 	.word	0x08005b21
 8005afc:	08005b29 	.word	0x08005b29
 8005b00:	2300      	movs	r3, #0
 8005b02:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8005b06:	e2f0      	b.n	80060ea <UART_SetConfig+0x7aa>
 8005b08:	2304      	movs	r3, #4
 8005b0a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8005b0e:	e2ec      	b.n	80060ea <UART_SetConfig+0x7aa>
 8005b10:	2308      	movs	r3, #8
 8005b12:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8005b16:	e2e8      	b.n	80060ea <UART_SetConfig+0x7aa>
 8005b18:	2310      	movs	r3, #16
 8005b1a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8005b1e:	e2e4      	b.n	80060ea <UART_SetConfig+0x7aa>
 8005b20:	2320      	movs	r3, #32
 8005b22:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8005b26:	e2e0      	b.n	80060ea <UART_SetConfig+0x7aa>
 8005b28:	2340      	movs	r3, #64	; 0x40
 8005b2a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8005b2e:	e2dc      	b.n	80060ea <UART_SetConfig+0x7aa>
 8005b30:	2380      	movs	r3, #128	; 0x80
 8005b32:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8005b36:	e2d8      	b.n	80060ea <UART_SetConfig+0x7aa>
 8005b38:	687b      	ldr	r3, [r7, #4]
 8005b3a:	681b      	ldr	r3, [r3, #0]
 8005b3c:	4a51      	ldr	r2, [pc, #324]	; (8005c84 <UART_SetConfig+0x344>)
 8005b3e:	4293      	cmp	r3, r2
 8005b40:	d130      	bne.n	8005ba4 <UART_SetConfig+0x264>
 8005b42:	4b4e      	ldr	r3, [pc, #312]	; (8005c7c <UART_SetConfig+0x33c>)
 8005b44:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005b46:	f003 0307 	and.w	r3, r3, #7
 8005b4a:	2b05      	cmp	r3, #5
 8005b4c:	d826      	bhi.n	8005b9c <UART_SetConfig+0x25c>
 8005b4e:	a201      	add	r2, pc, #4	; (adr r2, 8005b54 <UART_SetConfig+0x214>)
 8005b50:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005b54:	08005b6d 	.word	0x08005b6d
 8005b58:	08005b75 	.word	0x08005b75
 8005b5c:	08005b7d 	.word	0x08005b7d
 8005b60:	08005b85 	.word	0x08005b85
 8005b64:	08005b8d 	.word	0x08005b8d
 8005b68:	08005b95 	.word	0x08005b95
 8005b6c:	2300      	movs	r3, #0
 8005b6e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8005b72:	e2ba      	b.n	80060ea <UART_SetConfig+0x7aa>
 8005b74:	2304      	movs	r3, #4
 8005b76:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8005b7a:	e2b6      	b.n	80060ea <UART_SetConfig+0x7aa>
 8005b7c:	2308      	movs	r3, #8
 8005b7e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8005b82:	e2b2      	b.n	80060ea <UART_SetConfig+0x7aa>
 8005b84:	2310      	movs	r3, #16
 8005b86:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8005b8a:	e2ae      	b.n	80060ea <UART_SetConfig+0x7aa>
 8005b8c:	2320      	movs	r3, #32
 8005b8e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8005b92:	e2aa      	b.n	80060ea <UART_SetConfig+0x7aa>
 8005b94:	2340      	movs	r3, #64	; 0x40
 8005b96:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8005b9a:	e2a6      	b.n	80060ea <UART_SetConfig+0x7aa>
 8005b9c:	2380      	movs	r3, #128	; 0x80
 8005b9e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8005ba2:	e2a2      	b.n	80060ea <UART_SetConfig+0x7aa>
 8005ba4:	687b      	ldr	r3, [r7, #4]
 8005ba6:	681b      	ldr	r3, [r3, #0]
 8005ba8:	4a37      	ldr	r2, [pc, #220]	; (8005c88 <UART_SetConfig+0x348>)
 8005baa:	4293      	cmp	r3, r2
 8005bac:	d130      	bne.n	8005c10 <UART_SetConfig+0x2d0>
 8005bae:	4b33      	ldr	r3, [pc, #204]	; (8005c7c <UART_SetConfig+0x33c>)
 8005bb0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005bb2:	f003 0307 	and.w	r3, r3, #7
 8005bb6:	2b05      	cmp	r3, #5
 8005bb8:	d826      	bhi.n	8005c08 <UART_SetConfig+0x2c8>
 8005bba:	a201      	add	r2, pc, #4	; (adr r2, 8005bc0 <UART_SetConfig+0x280>)
 8005bbc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005bc0:	08005bd9 	.word	0x08005bd9
 8005bc4:	08005be1 	.word	0x08005be1
 8005bc8:	08005be9 	.word	0x08005be9
 8005bcc:	08005bf1 	.word	0x08005bf1
 8005bd0:	08005bf9 	.word	0x08005bf9
 8005bd4:	08005c01 	.word	0x08005c01
 8005bd8:	2300      	movs	r3, #0
 8005bda:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8005bde:	e284      	b.n	80060ea <UART_SetConfig+0x7aa>
 8005be0:	2304      	movs	r3, #4
 8005be2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8005be6:	e280      	b.n	80060ea <UART_SetConfig+0x7aa>
 8005be8:	2308      	movs	r3, #8
 8005bea:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8005bee:	e27c      	b.n	80060ea <UART_SetConfig+0x7aa>
 8005bf0:	2310      	movs	r3, #16
 8005bf2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8005bf6:	e278      	b.n	80060ea <UART_SetConfig+0x7aa>
 8005bf8:	2320      	movs	r3, #32
 8005bfa:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8005bfe:	e274      	b.n	80060ea <UART_SetConfig+0x7aa>
 8005c00:	2340      	movs	r3, #64	; 0x40
 8005c02:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8005c06:	e270      	b.n	80060ea <UART_SetConfig+0x7aa>
 8005c08:	2380      	movs	r3, #128	; 0x80
 8005c0a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8005c0e:	e26c      	b.n	80060ea <UART_SetConfig+0x7aa>
 8005c10:	687b      	ldr	r3, [r7, #4]
 8005c12:	681b      	ldr	r3, [r3, #0]
 8005c14:	4a1d      	ldr	r2, [pc, #116]	; (8005c8c <UART_SetConfig+0x34c>)
 8005c16:	4293      	cmp	r3, r2
 8005c18:	d142      	bne.n	8005ca0 <UART_SetConfig+0x360>
 8005c1a:	4b18      	ldr	r3, [pc, #96]	; (8005c7c <UART_SetConfig+0x33c>)
 8005c1c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005c1e:	f003 0307 	and.w	r3, r3, #7
 8005c22:	2b05      	cmp	r3, #5
 8005c24:	d838      	bhi.n	8005c98 <UART_SetConfig+0x358>
 8005c26:	a201      	add	r2, pc, #4	; (adr r2, 8005c2c <UART_SetConfig+0x2ec>)
 8005c28:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005c2c:	08005c45 	.word	0x08005c45
 8005c30:	08005c4d 	.word	0x08005c4d
 8005c34:	08005c55 	.word	0x08005c55
 8005c38:	08005c5d 	.word	0x08005c5d
 8005c3c:	08005c65 	.word	0x08005c65
 8005c40:	08005c91 	.word	0x08005c91
 8005c44:	2300      	movs	r3, #0
 8005c46:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8005c4a:	e24e      	b.n	80060ea <UART_SetConfig+0x7aa>
 8005c4c:	2304      	movs	r3, #4
 8005c4e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8005c52:	e24a      	b.n	80060ea <UART_SetConfig+0x7aa>
 8005c54:	2308      	movs	r3, #8
 8005c56:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8005c5a:	e246      	b.n	80060ea <UART_SetConfig+0x7aa>
 8005c5c:	2310      	movs	r3, #16
 8005c5e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8005c62:	e242      	b.n	80060ea <UART_SetConfig+0x7aa>
 8005c64:	2320      	movs	r3, #32
 8005c66:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8005c6a:	e23e      	b.n	80060ea <UART_SetConfig+0x7aa>
 8005c6c:	cfff69f3 	.word	0xcfff69f3
 8005c70:	58000c00 	.word	0x58000c00
 8005c74:	11fff4ff 	.word	0x11fff4ff
 8005c78:	40011000 	.word	0x40011000
 8005c7c:	58024400 	.word	0x58024400
 8005c80:	40004400 	.word	0x40004400
 8005c84:	40004800 	.word	0x40004800
 8005c88:	40004c00 	.word	0x40004c00
 8005c8c:	40005000 	.word	0x40005000
 8005c90:	2340      	movs	r3, #64	; 0x40
 8005c92:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8005c96:	e228      	b.n	80060ea <UART_SetConfig+0x7aa>
 8005c98:	2380      	movs	r3, #128	; 0x80
 8005c9a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8005c9e:	e224      	b.n	80060ea <UART_SetConfig+0x7aa>
 8005ca0:	687b      	ldr	r3, [r7, #4]
 8005ca2:	681b      	ldr	r3, [r3, #0]
 8005ca4:	4ab1      	ldr	r2, [pc, #708]	; (8005f6c <UART_SetConfig+0x62c>)
 8005ca6:	4293      	cmp	r3, r2
 8005ca8:	d176      	bne.n	8005d98 <UART_SetConfig+0x458>
 8005caa:	4bb1      	ldr	r3, [pc, #708]	; (8005f70 <UART_SetConfig+0x630>)
 8005cac:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005cae:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8005cb2:	2b28      	cmp	r3, #40	; 0x28
 8005cb4:	d86c      	bhi.n	8005d90 <UART_SetConfig+0x450>
 8005cb6:	a201      	add	r2, pc, #4	; (adr r2, 8005cbc <UART_SetConfig+0x37c>)
 8005cb8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005cbc:	08005d61 	.word	0x08005d61
 8005cc0:	08005d91 	.word	0x08005d91
 8005cc4:	08005d91 	.word	0x08005d91
 8005cc8:	08005d91 	.word	0x08005d91
 8005ccc:	08005d91 	.word	0x08005d91
 8005cd0:	08005d91 	.word	0x08005d91
 8005cd4:	08005d91 	.word	0x08005d91
 8005cd8:	08005d91 	.word	0x08005d91
 8005cdc:	08005d69 	.word	0x08005d69
 8005ce0:	08005d91 	.word	0x08005d91
 8005ce4:	08005d91 	.word	0x08005d91
 8005ce8:	08005d91 	.word	0x08005d91
 8005cec:	08005d91 	.word	0x08005d91
 8005cf0:	08005d91 	.word	0x08005d91
 8005cf4:	08005d91 	.word	0x08005d91
 8005cf8:	08005d91 	.word	0x08005d91
 8005cfc:	08005d71 	.word	0x08005d71
 8005d00:	08005d91 	.word	0x08005d91
 8005d04:	08005d91 	.word	0x08005d91
 8005d08:	08005d91 	.word	0x08005d91
 8005d0c:	08005d91 	.word	0x08005d91
 8005d10:	08005d91 	.word	0x08005d91
 8005d14:	08005d91 	.word	0x08005d91
 8005d18:	08005d91 	.word	0x08005d91
 8005d1c:	08005d79 	.word	0x08005d79
 8005d20:	08005d91 	.word	0x08005d91
 8005d24:	08005d91 	.word	0x08005d91
 8005d28:	08005d91 	.word	0x08005d91
 8005d2c:	08005d91 	.word	0x08005d91
 8005d30:	08005d91 	.word	0x08005d91
 8005d34:	08005d91 	.word	0x08005d91
 8005d38:	08005d91 	.word	0x08005d91
 8005d3c:	08005d81 	.word	0x08005d81
 8005d40:	08005d91 	.word	0x08005d91
 8005d44:	08005d91 	.word	0x08005d91
 8005d48:	08005d91 	.word	0x08005d91
 8005d4c:	08005d91 	.word	0x08005d91
 8005d50:	08005d91 	.word	0x08005d91
 8005d54:	08005d91 	.word	0x08005d91
 8005d58:	08005d91 	.word	0x08005d91
 8005d5c:	08005d89 	.word	0x08005d89
 8005d60:	2301      	movs	r3, #1
 8005d62:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8005d66:	e1c0      	b.n	80060ea <UART_SetConfig+0x7aa>
 8005d68:	2304      	movs	r3, #4
 8005d6a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8005d6e:	e1bc      	b.n	80060ea <UART_SetConfig+0x7aa>
 8005d70:	2308      	movs	r3, #8
 8005d72:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8005d76:	e1b8      	b.n	80060ea <UART_SetConfig+0x7aa>
 8005d78:	2310      	movs	r3, #16
 8005d7a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8005d7e:	e1b4      	b.n	80060ea <UART_SetConfig+0x7aa>
 8005d80:	2320      	movs	r3, #32
 8005d82:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8005d86:	e1b0      	b.n	80060ea <UART_SetConfig+0x7aa>
 8005d88:	2340      	movs	r3, #64	; 0x40
 8005d8a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8005d8e:	e1ac      	b.n	80060ea <UART_SetConfig+0x7aa>
 8005d90:	2380      	movs	r3, #128	; 0x80
 8005d92:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8005d96:	e1a8      	b.n	80060ea <UART_SetConfig+0x7aa>
 8005d98:	687b      	ldr	r3, [r7, #4]
 8005d9a:	681b      	ldr	r3, [r3, #0]
 8005d9c:	4a75      	ldr	r2, [pc, #468]	; (8005f74 <UART_SetConfig+0x634>)
 8005d9e:	4293      	cmp	r3, r2
 8005da0:	d130      	bne.n	8005e04 <UART_SetConfig+0x4c4>
 8005da2:	4b73      	ldr	r3, [pc, #460]	; (8005f70 <UART_SetConfig+0x630>)
 8005da4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005da6:	f003 0307 	and.w	r3, r3, #7
 8005daa:	2b05      	cmp	r3, #5
 8005dac:	d826      	bhi.n	8005dfc <UART_SetConfig+0x4bc>
 8005dae:	a201      	add	r2, pc, #4	; (adr r2, 8005db4 <UART_SetConfig+0x474>)
 8005db0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005db4:	08005dcd 	.word	0x08005dcd
 8005db8:	08005dd5 	.word	0x08005dd5
 8005dbc:	08005ddd 	.word	0x08005ddd
 8005dc0:	08005de5 	.word	0x08005de5
 8005dc4:	08005ded 	.word	0x08005ded
 8005dc8:	08005df5 	.word	0x08005df5
 8005dcc:	2300      	movs	r3, #0
 8005dce:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8005dd2:	e18a      	b.n	80060ea <UART_SetConfig+0x7aa>
 8005dd4:	2304      	movs	r3, #4
 8005dd6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8005dda:	e186      	b.n	80060ea <UART_SetConfig+0x7aa>
 8005ddc:	2308      	movs	r3, #8
 8005dde:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8005de2:	e182      	b.n	80060ea <UART_SetConfig+0x7aa>
 8005de4:	2310      	movs	r3, #16
 8005de6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8005dea:	e17e      	b.n	80060ea <UART_SetConfig+0x7aa>
 8005dec:	2320      	movs	r3, #32
 8005dee:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8005df2:	e17a      	b.n	80060ea <UART_SetConfig+0x7aa>
 8005df4:	2340      	movs	r3, #64	; 0x40
 8005df6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8005dfa:	e176      	b.n	80060ea <UART_SetConfig+0x7aa>
 8005dfc:	2380      	movs	r3, #128	; 0x80
 8005dfe:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8005e02:	e172      	b.n	80060ea <UART_SetConfig+0x7aa>
 8005e04:	687b      	ldr	r3, [r7, #4]
 8005e06:	681b      	ldr	r3, [r3, #0]
 8005e08:	4a5b      	ldr	r2, [pc, #364]	; (8005f78 <UART_SetConfig+0x638>)
 8005e0a:	4293      	cmp	r3, r2
 8005e0c:	d130      	bne.n	8005e70 <UART_SetConfig+0x530>
 8005e0e:	4b58      	ldr	r3, [pc, #352]	; (8005f70 <UART_SetConfig+0x630>)
 8005e10:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005e12:	f003 0307 	and.w	r3, r3, #7
 8005e16:	2b05      	cmp	r3, #5
 8005e18:	d826      	bhi.n	8005e68 <UART_SetConfig+0x528>
 8005e1a:	a201      	add	r2, pc, #4	; (adr r2, 8005e20 <UART_SetConfig+0x4e0>)
 8005e1c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005e20:	08005e39 	.word	0x08005e39
 8005e24:	08005e41 	.word	0x08005e41
 8005e28:	08005e49 	.word	0x08005e49
 8005e2c:	08005e51 	.word	0x08005e51
 8005e30:	08005e59 	.word	0x08005e59
 8005e34:	08005e61 	.word	0x08005e61
 8005e38:	2300      	movs	r3, #0
 8005e3a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8005e3e:	e154      	b.n	80060ea <UART_SetConfig+0x7aa>
 8005e40:	2304      	movs	r3, #4
 8005e42:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8005e46:	e150      	b.n	80060ea <UART_SetConfig+0x7aa>
 8005e48:	2308      	movs	r3, #8
 8005e4a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8005e4e:	e14c      	b.n	80060ea <UART_SetConfig+0x7aa>
 8005e50:	2310      	movs	r3, #16
 8005e52:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8005e56:	e148      	b.n	80060ea <UART_SetConfig+0x7aa>
 8005e58:	2320      	movs	r3, #32
 8005e5a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8005e5e:	e144      	b.n	80060ea <UART_SetConfig+0x7aa>
 8005e60:	2340      	movs	r3, #64	; 0x40
 8005e62:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8005e66:	e140      	b.n	80060ea <UART_SetConfig+0x7aa>
 8005e68:	2380      	movs	r3, #128	; 0x80
 8005e6a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8005e6e:	e13c      	b.n	80060ea <UART_SetConfig+0x7aa>
 8005e70:	687b      	ldr	r3, [r7, #4]
 8005e72:	681b      	ldr	r3, [r3, #0]
 8005e74:	4a41      	ldr	r2, [pc, #260]	; (8005f7c <UART_SetConfig+0x63c>)
 8005e76:	4293      	cmp	r3, r2
 8005e78:	f040 8082 	bne.w	8005f80 <UART_SetConfig+0x640>
 8005e7c:	4b3c      	ldr	r3, [pc, #240]	; (8005f70 <UART_SetConfig+0x630>)
 8005e7e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005e80:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8005e84:	2b28      	cmp	r3, #40	; 0x28
 8005e86:	d86d      	bhi.n	8005f64 <UART_SetConfig+0x624>
 8005e88:	a201      	add	r2, pc, #4	; (adr r2, 8005e90 <UART_SetConfig+0x550>)
 8005e8a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005e8e:	bf00      	nop
 8005e90:	08005f35 	.word	0x08005f35
 8005e94:	08005f65 	.word	0x08005f65
 8005e98:	08005f65 	.word	0x08005f65
 8005e9c:	08005f65 	.word	0x08005f65
 8005ea0:	08005f65 	.word	0x08005f65
 8005ea4:	08005f65 	.word	0x08005f65
 8005ea8:	08005f65 	.word	0x08005f65
 8005eac:	08005f65 	.word	0x08005f65
 8005eb0:	08005f3d 	.word	0x08005f3d
 8005eb4:	08005f65 	.word	0x08005f65
 8005eb8:	08005f65 	.word	0x08005f65
 8005ebc:	08005f65 	.word	0x08005f65
 8005ec0:	08005f65 	.word	0x08005f65
 8005ec4:	08005f65 	.word	0x08005f65
 8005ec8:	08005f65 	.word	0x08005f65
 8005ecc:	08005f65 	.word	0x08005f65
 8005ed0:	08005f45 	.word	0x08005f45
 8005ed4:	08005f65 	.word	0x08005f65
 8005ed8:	08005f65 	.word	0x08005f65
 8005edc:	08005f65 	.word	0x08005f65
 8005ee0:	08005f65 	.word	0x08005f65
 8005ee4:	08005f65 	.word	0x08005f65
 8005ee8:	08005f65 	.word	0x08005f65
 8005eec:	08005f65 	.word	0x08005f65
 8005ef0:	08005f4d 	.word	0x08005f4d
 8005ef4:	08005f65 	.word	0x08005f65
 8005ef8:	08005f65 	.word	0x08005f65
 8005efc:	08005f65 	.word	0x08005f65
 8005f00:	08005f65 	.word	0x08005f65
 8005f04:	08005f65 	.word	0x08005f65
 8005f08:	08005f65 	.word	0x08005f65
 8005f0c:	08005f65 	.word	0x08005f65
 8005f10:	08005f55 	.word	0x08005f55
 8005f14:	08005f65 	.word	0x08005f65
 8005f18:	08005f65 	.word	0x08005f65
 8005f1c:	08005f65 	.word	0x08005f65
 8005f20:	08005f65 	.word	0x08005f65
 8005f24:	08005f65 	.word	0x08005f65
 8005f28:	08005f65 	.word	0x08005f65
 8005f2c:	08005f65 	.word	0x08005f65
 8005f30:	08005f5d 	.word	0x08005f5d
 8005f34:	2301      	movs	r3, #1
 8005f36:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8005f3a:	e0d6      	b.n	80060ea <UART_SetConfig+0x7aa>
 8005f3c:	2304      	movs	r3, #4
 8005f3e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8005f42:	e0d2      	b.n	80060ea <UART_SetConfig+0x7aa>
 8005f44:	2308      	movs	r3, #8
 8005f46:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8005f4a:	e0ce      	b.n	80060ea <UART_SetConfig+0x7aa>
 8005f4c:	2310      	movs	r3, #16
 8005f4e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8005f52:	e0ca      	b.n	80060ea <UART_SetConfig+0x7aa>
 8005f54:	2320      	movs	r3, #32
 8005f56:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8005f5a:	e0c6      	b.n	80060ea <UART_SetConfig+0x7aa>
 8005f5c:	2340      	movs	r3, #64	; 0x40
 8005f5e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8005f62:	e0c2      	b.n	80060ea <UART_SetConfig+0x7aa>
 8005f64:	2380      	movs	r3, #128	; 0x80
 8005f66:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8005f6a:	e0be      	b.n	80060ea <UART_SetConfig+0x7aa>
 8005f6c:	40011400 	.word	0x40011400
 8005f70:	58024400 	.word	0x58024400
 8005f74:	40007800 	.word	0x40007800
 8005f78:	40007c00 	.word	0x40007c00
 8005f7c:	40011800 	.word	0x40011800
 8005f80:	687b      	ldr	r3, [r7, #4]
 8005f82:	681b      	ldr	r3, [r3, #0]
 8005f84:	4aad      	ldr	r2, [pc, #692]	; (800623c <UART_SetConfig+0x8fc>)
 8005f86:	4293      	cmp	r3, r2
 8005f88:	d176      	bne.n	8006078 <UART_SetConfig+0x738>
 8005f8a:	4bad      	ldr	r3, [pc, #692]	; (8006240 <UART_SetConfig+0x900>)
 8005f8c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005f8e:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8005f92:	2b28      	cmp	r3, #40	; 0x28
 8005f94:	d86c      	bhi.n	8006070 <UART_SetConfig+0x730>
 8005f96:	a201      	add	r2, pc, #4	; (adr r2, 8005f9c <UART_SetConfig+0x65c>)
 8005f98:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005f9c:	08006041 	.word	0x08006041
 8005fa0:	08006071 	.word	0x08006071
 8005fa4:	08006071 	.word	0x08006071
 8005fa8:	08006071 	.word	0x08006071
 8005fac:	08006071 	.word	0x08006071
 8005fb0:	08006071 	.word	0x08006071
 8005fb4:	08006071 	.word	0x08006071
 8005fb8:	08006071 	.word	0x08006071
 8005fbc:	08006049 	.word	0x08006049
 8005fc0:	08006071 	.word	0x08006071
 8005fc4:	08006071 	.word	0x08006071
 8005fc8:	08006071 	.word	0x08006071
 8005fcc:	08006071 	.word	0x08006071
 8005fd0:	08006071 	.word	0x08006071
 8005fd4:	08006071 	.word	0x08006071
 8005fd8:	08006071 	.word	0x08006071
 8005fdc:	08006051 	.word	0x08006051
 8005fe0:	08006071 	.word	0x08006071
 8005fe4:	08006071 	.word	0x08006071
 8005fe8:	08006071 	.word	0x08006071
 8005fec:	08006071 	.word	0x08006071
 8005ff0:	08006071 	.word	0x08006071
 8005ff4:	08006071 	.word	0x08006071
 8005ff8:	08006071 	.word	0x08006071
 8005ffc:	08006059 	.word	0x08006059
 8006000:	08006071 	.word	0x08006071
 8006004:	08006071 	.word	0x08006071
 8006008:	08006071 	.word	0x08006071
 800600c:	08006071 	.word	0x08006071
 8006010:	08006071 	.word	0x08006071
 8006014:	08006071 	.word	0x08006071
 8006018:	08006071 	.word	0x08006071
 800601c:	08006061 	.word	0x08006061
 8006020:	08006071 	.word	0x08006071
 8006024:	08006071 	.word	0x08006071
 8006028:	08006071 	.word	0x08006071
 800602c:	08006071 	.word	0x08006071
 8006030:	08006071 	.word	0x08006071
 8006034:	08006071 	.word	0x08006071
 8006038:	08006071 	.word	0x08006071
 800603c:	08006069 	.word	0x08006069
 8006040:	2301      	movs	r3, #1
 8006042:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8006046:	e050      	b.n	80060ea <UART_SetConfig+0x7aa>
 8006048:	2304      	movs	r3, #4
 800604a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800604e:	e04c      	b.n	80060ea <UART_SetConfig+0x7aa>
 8006050:	2308      	movs	r3, #8
 8006052:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8006056:	e048      	b.n	80060ea <UART_SetConfig+0x7aa>
 8006058:	2310      	movs	r3, #16
 800605a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800605e:	e044      	b.n	80060ea <UART_SetConfig+0x7aa>
 8006060:	2320      	movs	r3, #32
 8006062:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8006066:	e040      	b.n	80060ea <UART_SetConfig+0x7aa>
 8006068:	2340      	movs	r3, #64	; 0x40
 800606a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800606e:	e03c      	b.n	80060ea <UART_SetConfig+0x7aa>
 8006070:	2380      	movs	r3, #128	; 0x80
 8006072:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8006076:	e038      	b.n	80060ea <UART_SetConfig+0x7aa>
 8006078:	687b      	ldr	r3, [r7, #4]
 800607a:	681b      	ldr	r3, [r3, #0]
 800607c:	4a71      	ldr	r2, [pc, #452]	; (8006244 <UART_SetConfig+0x904>)
 800607e:	4293      	cmp	r3, r2
 8006080:	d130      	bne.n	80060e4 <UART_SetConfig+0x7a4>
 8006082:	4b6f      	ldr	r3, [pc, #444]	; (8006240 <UART_SetConfig+0x900>)
 8006084:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006086:	f003 0307 	and.w	r3, r3, #7
 800608a:	2b05      	cmp	r3, #5
 800608c:	d826      	bhi.n	80060dc <UART_SetConfig+0x79c>
 800608e:	a201      	add	r2, pc, #4	; (adr r2, 8006094 <UART_SetConfig+0x754>)
 8006090:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006094:	080060ad 	.word	0x080060ad
 8006098:	080060b5 	.word	0x080060b5
 800609c:	080060bd 	.word	0x080060bd
 80060a0:	080060c5 	.word	0x080060c5
 80060a4:	080060cd 	.word	0x080060cd
 80060a8:	080060d5 	.word	0x080060d5
 80060ac:	2302      	movs	r3, #2
 80060ae:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80060b2:	e01a      	b.n	80060ea <UART_SetConfig+0x7aa>
 80060b4:	2304      	movs	r3, #4
 80060b6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80060ba:	e016      	b.n	80060ea <UART_SetConfig+0x7aa>
 80060bc:	2308      	movs	r3, #8
 80060be:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80060c2:	e012      	b.n	80060ea <UART_SetConfig+0x7aa>
 80060c4:	2310      	movs	r3, #16
 80060c6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80060ca:	e00e      	b.n	80060ea <UART_SetConfig+0x7aa>
 80060cc:	2320      	movs	r3, #32
 80060ce:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80060d2:	e00a      	b.n	80060ea <UART_SetConfig+0x7aa>
 80060d4:	2340      	movs	r3, #64	; 0x40
 80060d6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80060da:	e006      	b.n	80060ea <UART_SetConfig+0x7aa>
 80060dc:	2380      	movs	r3, #128	; 0x80
 80060de:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80060e2:	e002      	b.n	80060ea <UART_SetConfig+0x7aa>
 80060e4:	2380      	movs	r3, #128	; 0x80
 80060e6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 80060ea:	687b      	ldr	r3, [r7, #4]
 80060ec:	681b      	ldr	r3, [r3, #0]
 80060ee:	4a55      	ldr	r2, [pc, #340]	; (8006244 <UART_SetConfig+0x904>)
 80060f0:	4293      	cmp	r3, r2
 80060f2:	f040 80f0 	bne.w	80062d6 <UART_SetConfig+0x996>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 80060f6:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 80060fa:	2b20      	cmp	r3, #32
 80060fc:	dc46      	bgt.n	800618c <UART_SetConfig+0x84c>
 80060fe:	2b02      	cmp	r3, #2
 8006100:	db75      	blt.n	80061ee <UART_SetConfig+0x8ae>
 8006102:	3b02      	subs	r3, #2
 8006104:	2b1e      	cmp	r3, #30
 8006106:	d872      	bhi.n	80061ee <UART_SetConfig+0x8ae>
 8006108:	a201      	add	r2, pc, #4	; (adr r2, 8006110 <UART_SetConfig+0x7d0>)
 800610a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800610e:	bf00      	nop
 8006110:	08006193 	.word	0x08006193
 8006114:	080061ef 	.word	0x080061ef
 8006118:	0800619b 	.word	0x0800619b
 800611c:	080061ef 	.word	0x080061ef
 8006120:	080061ef 	.word	0x080061ef
 8006124:	080061ef 	.word	0x080061ef
 8006128:	080061ab 	.word	0x080061ab
 800612c:	080061ef 	.word	0x080061ef
 8006130:	080061ef 	.word	0x080061ef
 8006134:	080061ef 	.word	0x080061ef
 8006138:	080061ef 	.word	0x080061ef
 800613c:	080061ef 	.word	0x080061ef
 8006140:	080061ef 	.word	0x080061ef
 8006144:	080061ef 	.word	0x080061ef
 8006148:	080061bb 	.word	0x080061bb
 800614c:	080061ef 	.word	0x080061ef
 8006150:	080061ef 	.word	0x080061ef
 8006154:	080061ef 	.word	0x080061ef
 8006158:	080061ef 	.word	0x080061ef
 800615c:	080061ef 	.word	0x080061ef
 8006160:	080061ef 	.word	0x080061ef
 8006164:	080061ef 	.word	0x080061ef
 8006168:	080061ef 	.word	0x080061ef
 800616c:	080061ef 	.word	0x080061ef
 8006170:	080061ef 	.word	0x080061ef
 8006174:	080061ef 	.word	0x080061ef
 8006178:	080061ef 	.word	0x080061ef
 800617c:	080061ef 	.word	0x080061ef
 8006180:	080061ef 	.word	0x080061ef
 8006184:	080061ef 	.word	0x080061ef
 8006188:	080061e1 	.word	0x080061e1
 800618c:	2b40      	cmp	r3, #64	; 0x40
 800618e:	d02a      	beq.n	80061e6 <UART_SetConfig+0x8a6>
 8006190:	e02d      	b.n	80061ee <UART_SetConfig+0x8ae>
    {
      case UART_CLOCKSOURCE_D3PCLK1:
        pclk = HAL_RCCEx_GetD3PCLK1Freq();
 8006192:	f7fe fb9d 	bl	80048d0 <HAL_RCCEx_GetD3PCLK1Freq>
 8006196:	62f8      	str	r0, [r7, #44]	; 0x2c
        break;
 8006198:	e02f      	b.n	80061fa <UART_SetConfig+0x8ba>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800619a:	f107 0314 	add.w	r3, r7, #20
 800619e:	4618      	mov	r0, r3
 80061a0:	f7fe fbac 	bl	80048fc <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 80061a4:	69bb      	ldr	r3, [r7, #24]
 80061a6:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 80061a8:	e027      	b.n	80061fa <UART_SetConfig+0x8ba>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 80061aa:	f107 0308 	add.w	r3, r7, #8
 80061ae:	4618      	mov	r0, r3
 80061b0:	f7fe fcf8 	bl	8004ba4 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 80061b4:	68fb      	ldr	r3, [r7, #12]
 80061b6:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 80061b8:	e01f      	b.n	80061fa <UART_SetConfig+0x8ba>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80061ba:	4b21      	ldr	r3, [pc, #132]	; (8006240 <UART_SetConfig+0x900>)
 80061bc:	681b      	ldr	r3, [r3, #0]
 80061be:	f003 0320 	and.w	r3, r3, #32
 80061c2:	2b00      	cmp	r3, #0
 80061c4:	d009      	beq.n	80061da <UART_SetConfig+0x89a>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 80061c6:	4b1e      	ldr	r3, [pc, #120]	; (8006240 <UART_SetConfig+0x900>)
 80061c8:	681b      	ldr	r3, [r3, #0]
 80061ca:	08db      	lsrs	r3, r3, #3
 80061cc:	f003 0303 	and.w	r3, r3, #3
 80061d0:	4a1d      	ldr	r2, [pc, #116]	; (8006248 <UART_SetConfig+0x908>)
 80061d2:	fa22 f303 	lsr.w	r3, r2, r3
 80061d6:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 80061d8:	e00f      	b.n	80061fa <UART_SetConfig+0x8ba>
          pclk = (uint32_t) HSI_VALUE;
 80061da:	4b1b      	ldr	r3, [pc, #108]	; (8006248 <UART_SetConfig+0x908>)
 80061dc:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 80061de:	e00c      	b.n	80061fa <UART_SetConfig+0x8ba>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 80061e0:	4b1a      	ldr	r3, [pc, #104]	; (800624c <UART_SetConfig+0x90c>)
 80061e2:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 80061e4:	e009      	b.n	80061fa <UART_SetConfig+0x8ba>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80061e6:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80061ea:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 80061ec:	e005      	b.n	80061fa <UART_SetConfig+0x8ba>
      default:
        pclk = 0U;
 80061ee:	2300      	movs	r3, #0
 80061f0:	62fb      	str	r3, [r7, #44]	; 0x2c
        ret = HAL_ERROR;
 80061f2:	2301      	movs	r3, #1
 80061f4:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
        break;
 80061f8:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 80061fa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80061fc:	2b00      	cmp	r3, #0
 80061fe:	f000 81e6 	beq.w	80065ce <UART_SetConfig+0xc8e>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 8006202:	687b      	ldr	r3, [r7, #4]
 8006204:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006206:	4a12      	ldr	r2, [pc, #72]	; (8006250 <UART_SetConfig+0x910>)
 8006208:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800620c:	461a      	mov	r2, r3
 800620e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006210:	fbb3 f3f2 	udiv	r3, r3, r2
 8006214:	623b      	str	r3, [r7, #32]

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8006216:	687b      	ldr	r3, [r7, #4]
 8006218:	685a      	ldr	r2, [r3, #4]
 800621a:	4613      	mov	r3, r2
 800621c:	005b      	lsls	r3, r3, #1
 800621e:	4413      	add	r3, r2
 8006220:	6a3a      	ldr	r2, [r7, #32]
 8006222:	429a      	cmp	r2, r3
 8006224:	d305      	bcc.n	8006232 <UART_SetConfig+0x8f2>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 8006226:	687b      	ldr	r3, [r7, #4]
 8006228:	685b      	ldr	r3, [r3, #4]
 800622a:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800622c:	6a3a      	ldr	r2, [r7, #32]
 800622e:	429a      	cmp	r2, r3
 8006230:	d910      	bls.n	8006254 <UART_SetConfig+0x914>
      {
        ret = HAL_ERROR;
 8006232:	2301      	movs	r3, #1
 8006234:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
 8006238:	e1c9      	b.n	80065ce <UART_SetConfig+0xc8e>
 800623a:	bf00      	nop
 800623c:	40011c00 	.word	0x40011c00
 8006240:	58024400 	.word	0x58024400
 8006244:	58000c00 	.word	0x58000c00
 8006248:	03d09000 	.word	0x03d09000
 800624c:	003d0900 	.word	0x003d0900
 8006250:	0800a630 	.word	0x0800a630
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8006254:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006256:	4618      	mov	r0, r3
 8006258:	f04f 0100 	mov.w	r1, #0
 800625c:	687b      	ldr	r3, [r7, #4]
 800625e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006260:	4ac1      	ldr	r2, [pc, #772]	; (8006568 <UART_SetConfig+0xc28>)
 8006262:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8006266:	b29a      	uxth	r2, r3
 8006268:	f04f 0300 	mov.w	r3, #0
 800626c:	f7fa f8a0 	bl	80003b0 <__aeabi_uldivmod>
 8006270:	4602      	mov	r2, r0
 8006272:	460b      	mov	r3, r1
 8006274:	4610      	mov	r0, r2
 8006276:	4619      	mov	r1, r3
 8006278:	f04f 0200 	mov.w	r2, #0
 800627c:	f04f 0300 	mov.w	r3, #0
 8006280:	020b      	lsls	r3, r1, #8
 8006282:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 8006286:	0202      	lsls	r2, r0, #8
 8006288:	6879      	ldr	r1, [r7, #4]
 800628a:	6849      	ldr	r1, [r1, #4]
 800628c:	0849      	lsrs	r1, r1, #1
 800628e:	4608      	mov	r0, r1
 8006290:	f04f 0100 	mov.w	r1, #0
 8006294:	1814      	adds	r4, r2, r0
 8006296:	eb43 0501 	adc.w	r5, r3, r1
 800629a:	687b      	ldr	r3, [r7, #4]
 800629c:	685b      	ldr	r3, [r3, #4]
 800629e:	461a      	mov	r2, r3
 80062a0:	f04f 0300 	mov.w	r3, #0
 80062a4:	4620      	mov	r0, r4
 80062a6:	4629      	mov	r1, r5
 80062a8:	f7fa f882 	bl	80003b0 <__aeabi_uldivmod>
 80062ac:	4602      	mov	r2, r0
 80062ae:	460b      	mov	r3, r1
 80062b0:	4613      	mov	r3, r2
 80062b2:	62bb      	str	r3, [r7, #40]	; 0x28
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 80062b4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80062b6:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80062ba:	d308      	bcc.n	80062ce <UART_SetConfig+0x98e>
 80062bc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80062be:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80062c2:	d204      	bcs.n	80062ce <UART_SetConfig+0x98e>
        {
          huart->Instance->BRR = usartdiv;
 80062c4:	687b      	ldr	r3, [r7, #4]
 80062c6:	681b      	ldr	r3, [r3, #0]
 80062c8:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80062ca:	60da      	str	r2, [r3, #12]
 80062cc:	e17f      	b.n	80065ce <UART_SetConfig+0xc8e>
        }
        else
        {
          ret = HAL_ERROR;
 80062ce:	2301      	movs	r3, #1
 80062d0:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
 80062d4:	e17b      	b.n	80065ce <UART_SetConfig+0xc8e>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80062d6:	687b      	ldr	r3, [r7, #4]
 80062d8:	69db      	ldr	r3, [r3, #28]
 80062da:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80062de:	f040 80be 	bne.w	800645e <UART_SetConfig+0xb1e>
  {
    switch (clocksource)
 80062e2:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 80062e6:	2b20      	cmp	r3, #32
 80062e8:	dc48      	bgt.n	800637c <UART_SetConfig+0xa3c>
 80062ea:	2b00      	cmp	r3, #0
 80062ec:	db7b      	blt.n	80063e6 <UART_SetConfig+0xaa6>
 80062ee:	2b20      	cmp	r3, #32
 80062f0:	d879      	bhi.n	80063e6 <UART_SetConfig+0xaa6>
 80062f2:	a201      	add	r2, pc, #4	; (adr r2, 80062f8 <UART_SetConfig+0x9b8>)
 80062f4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80062f8:	08006383 	.word	0x08006383
 80062fc:	0800638b 	.word	0x0800638b
 8006300:	080063e7 	.word	0x080063e7
 8006304:	080063e7 	.word	0x080063e7
 8006308:	08006393 	.word	0x08006393
 800630c:	080063e7 	.word	0x080063e7
 8006310:	080063e7 	.word	0x080063e7
 8006314:	080063e7 	.word	0x080063e7
 8006318:	080063a3 	.word	0x080063a3
 800631c:	080063e7 	.word	0x080063e7
 8006320:	080063e7 	.word	0x080063e7
 8006324:	080063e7 	.word	0x080063e7
 8006328:	080063e7 	.word	0x080063e7
 800632c:	080063e7 	.word	0x080063e7
 8006330:	080063e7 	.word	0x080063e7
 8006334:	080063e7 	.word	0x080063e7
 8006338:	080063b3 	.word	0x080063b3
 800633c:	080063e7 	.word	0x080063e7
 8006340:	080063e7 	.word	0x080063e7
 8006344:	080063e7 	.word	0x080063e7
 8006348:	080063e7 	.word	0x080063e7
 800634c:	080063e7 	.word	0x080063e7
 8006350:	080063e7 	.word	0x080063e7
 8006354:	080063e7 	.word	0x080063e7
 8006358:	080063e7 	.word	0x080063e7
 800635c:	080063e7 	.word	0x080063e7
 8006360:	080063e7 	.word	0x080063e7
 8006364:	080063e7 	.word	0x080063e7
 8006368:	080063e7 	.word	0x080063e7
 800636c:	080063e7 	.word	0x080063e7
 8006370:	080063e7 	.word	0x080063e7
 8006374:	080063e7 	.word	0x080063e7
 8006378:	080063d9 	.word	0x080063d9
 800637c:	2b40      	cmp	r3, #64	; 0x40
 800637e:	d02e      	beq.n	80063de <UART_SetConfig+0xa9e>
 8006380:	e031      	b.n	80063e6 <UART_SetConfig+0xaa6>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8006382:	f7fd fb7f 	bl	8003a84 <HAL_RCC_GetPCLK1Freq>
 8006386:	62f8      	str	r0, [r7, #44]	; 0x2c
        break;
 8006388:	e033      	b.n	80063f2 <UART_SetConfig+0xab2>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800638a:	f7fd fb91 	bl	8003ab0 <HAL_RCC_GetPCLK2Freq>
 800638e:	62f8      	str	r0, [r7, #44]	; 0x2c
        break;
 8006390:	e02f      	b.n	80063f2 <UART_SetConfig+0xab2>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8006392:	f107 0314 	add.w	r3, r7, #20
 8006396:	4618      	mov	r0, r3
 8006398:	f7fe fab0 	bl	80048fc <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 800639c:	69bb      	ldr	r3, [r7, #24]
 800639e:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 80063a0:	e027      	b.n	80063f2 <UART_SetConfig+0xab2>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 80063a2:	f107 0308 	add.w	r3, r7, #8
 80063a6:	4618      	mov	r0, r3
 80063a8:	f7fe fbfc 	bl	8004ba4 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 80063ac:	68fb      	ldr	r3, [r7, #12]
 80063ae:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 80063b0:	e01f      	b.n	80063f2 <UART_SetConfig+0xab2>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80063b2:	4b6e      	ldr	r3, [pc, #440]	; (800656c <UART_SetConfig+0xc2c>)
 80063b4:	681b      	ldr	r3, [r3, #0]
 80063b6:	f003 0320 	and.w	r3, r3, #32
 80063ba:	2b00      	cmp	r3, #0
 80063bc:	d009      	beq.n	80063d2 <UART_SetConfig+0xa92>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 80063be:	4b6b      	ldr	r3, [pc, #428]	; (800656c <UART_SetConfig+0xc2c>)
 80063c0:	681b      	ldr	r3, [r3, #0]
 80063c2:	08db      	lsrs	r3, r3, #3
 80063c4:	f003 0303 	and.w	r3, r3, #3
 80063c8:	4a69      	ldr	r2, [pc, #420]	; (8006570 <UART_SetConfig+0xc30>)
 80063ca:	fa22 f303 	lsr.w	r3, r2, r3
 80063ce:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 80063d0:	e00f      	b.n	80063f2 <UART_SetConfig+0xab2>
          pclk = (uint32_t) HSI_VALUE;
 80063d2:	4b67      	ldr	r3, [pc, #412]	; (8006570 <UART_SetConfig+0xc30>)
 80063d4:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 80063d6:	e00c      	b.n	80063f2 <UART_SetConfig+0xab2>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 80063d8:	4b66      	ldr	r3, [pc, #408]	; (8006574 <UART_SetConfig+0xc34>)
 80063da:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 80063dc:	e009      	b.n	80063f2 <UART_SetConfig+0xab2>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80063de:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80063e2:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 80063e4:	e005      	b.n	80063f2 <UART_SetConfig+0xab2>
      default:
        pclk = 0U;
 80063e6:	2300      	movs	r3, #0
 80063e8:	62fb      	str	r3, [r7, #44]	; 0x2c
        ret = HAL_ERROR;
 80063ea:	2301      	movs	r3, #1
 80063ec:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
        break;
 80063f0:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 80063f2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80063f4:	2b00      	cmp	r3, #0
 80063f6:	f000 80ea 	beq.w	80065ce <UART_SetConfig+0xc8e>
    {
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80063fa:	687b      	ldr	r3, [r7, #4]
 80063fc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80063fe:	4a5a      	ldr	r2, [pc, #360]	; (8006568 <UART_SetConfig+0xc28>)
 8006400:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8006404:	461a      	mov	r2, r3
 8006406:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006408:	fbb3 f3f2 	udiv	r3, r3, r2
 800640c:	005a      	lsls	r2, r3, #1
 800640e:	687b      	ldr	r3, [r7, #4]
 8006410:	685b      	ldr	r3, [r3, #4]
 8006412:	085b      	lsrs	r3, r3, #1
 8006414:	441a      	add	r2, r3
 8006416:	687b      	ldr	r3, [r7, #4]
 8006418:	685b      	ldr	r3, [r3, #4]
 800641a:	fbb2 f3f3 	udiv	r3, r2, r3
 800641e:	b29b      	uxth	r3, r3
 8006420:	62bb      	str	r3, [r7, #40]	; 0x28
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8006422:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006424:	2b0f      	cmp	r3, #15
 8006426:	d916      	bls.n	8006456 <UART_SetConfig+0xb16>
 8006428:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800642a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800642e:	d212      	bcs.n	8006456 <UART_SetConfig+0xb16>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8006430:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006432:	b29b      	uxth	r3, r3
 8006434:	f023 030f 	bic.w	r3, r3, #15
 8006438:	84fb      	strh	r3, [r7, #38]	; 0x26
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800643a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800643c:	085b      	lsrs	r3, r3, #1
 800643e:	b29b      	uxth	r3, r3
 8006440:	f003 0307 	and.w	r3, r3, #7
 8006444:	b29a      	uxth	r2, r3
 8006446:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8006448:	4313      	orrs	r3, r2
 800644a:	84fb      	strh	r3, [r7, #38]	; 0x26
        huart->Instance->BRR = brrtemp;
 800644c:	687b      	ldr	r3, [r7, #4]
 800644e:	681b      	ldr	r3, [r3, #0]
 8006450:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 8006452:	60da      	str	r2, [r3, #12]
 8006454:	e0bb      	b.n	80065ce <UART_SetConfig+0xc8e>
      }
      else
      {
        ret = HAL_ERROR;
 8006456:	2301      	movs	r3, #1
 8006458:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
 800645c:	e0b7      	b.n	80065ce <UART_SetConfig+0xc8e>
      }
    }
  }
  else
  {
    switch (clocksource)
 800645e:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8006462:	2b20      	cmp	r3, #32
 8006464:	dc4a      	bgt.n	80064fc <UART_SetConfig+0xbbc>
 8006466:	2b00      	cmp	r3, #0
 8006468:	f2c0 8086 	blt.w	8006578 <UART_SetConfig+0xc38>
 800646c:	2b20      	cmp	r3, #32
 800646e:	f200 8083 	bhi.w	8006578 <UART_SetConfig+0xc38>
 8006472:	a201      	add	r2, pc, #4	; (adr r2, 8006478 <UART_SetConfig+0xb38>)
 8006474:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006478:	08006503 	.word	0x08006503
 800647c:	0800650b 	.word	0x0800650b
 8006480:	08006579 	.word	0x08006579
 8006484:	08006579 	.word	0x08006579
 8006488:	08006513 	.word	0x08006513
 800648c:	08006579 	.word	0x08006579
 8006490:	08006579 	.word	0x08006579
 8006494:	08006579 	.word	0x08006579
 8006498:	08006523 	.word	0x08006523
 800649c:	08006579 	.word	0x08006579
 80064a0:	08006579 	.word	0x08006579
 80064a4:	08006579 	.word	0x08006579
 80064a8:	08006579 	.word	0x08006579
 80064ac:	08006579 	.word	0x08006579
 80064b0:	08006579 	.word	0x08006579
 80064b4:	08006579 	.word	0x08006579
 80064b8:	08006533 	.word	0x08006533
 80064bc:	08006579 	.word	0x08006579
 80064c0:	08006579 	.word	0x08006579
 80064c4:	08006579 	.word	0x08006579
 80064c8:	08006579 	.word	0x08006579
 80064cc:	08006579 	.word	0x08006579
 80064d0:	08006579 	.word	0x08006579
 80064d4:	08006579 	.word	0x08006579
 80064d8:	08006579 	.word	0x08006579
 80064dc:	08006579 	.word	0x08006579
 80064e0:	08006579 	.word	0x08006579
 80064e4:	08006579 	.word	0x08006579
 80064e8:	08006579 	.word	0x08006579
 80064ec:	08006579 	.word	0x08006579
 80064f0:	08006579 	.word	0x08006579
 80064f4:	08006579 	.word	0x08006579
 80064f8:	08006559 	.word	0x08006559
 80064fc:	2b40      	cmp	r3, #64	; 0x40
 80064fe:	d02e      	beq.n	800655e <UART_SetConfig+0xc1e>
 8006500:	e03a      	b.n	8006578 <UART_SetConfig+0xc38>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8006502:	f7fd fabf 	bl	8003a84 <HAL_RCC_GetPCLK1Freq>
 8006506:	62f8      	str	r0, [r7, #44]	; 0x2c
        break;
 8006508:	e03c      	b.n	8006584 <UART_SetConfig+0xc44>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800650a:	f7fd fad1 	bl	8003ab0 <HAL_RCC_GetPCLK2Freq>
 800650e:	62f8      	str	r0, [r7, #44]	; 0x2c
        break;
 8006510:	e038      	b.n	8006584 <UART_SetConfig+0xc44>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8006512:	f107 0314 	add.w	r3, r7, #20
 8006516:	4618      	mov	r0, r3
 8006518:	f7fe f9f0 	bl	80048fc <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 800651c:	69bb      	ldr	r3, [r7, #24]
 800651e:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8006520:	e030      	b.n	8006584 <UART_SetConfig+0xc44>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8006522:	f107 0308 	add.w	r3, r7, #8
 8006526:	4618      	mov	r0, r3
 8006528:	f7fe fb3c 	bl	8004ba4 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 800652c:	68fb      	ldr	r3, [r7, #12]
 800652e:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8006530:	e028      	b.n	8006584 <UART_SetConfig+0xc44>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8006532:	4b0e      	ldr	r3, [pc, #56]	; (800656c <UART_SetConfig+0xc2c>)
 8006534:	681b      	ldr	r3, [r3, #0]
 8006536:	f003 0320 	and.w	r3, r3, #32
 800653a:	2b00      	cmp	r3, #0
 800653c:	d009      	beq.n	8006552 <UART_SetConfig+0xc12>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 800653e:	4b0b      	ldr	r3, [pc, #44]	; (800656c <UART_SetConfig+0xc2c>)
 8006540:	681b      	ldr	r3, [r3, #0]
 8006542:	08db      	lsrs	r3, r3, #3
 8006544:	f003 0303 	and.w	r3, r3, #3
 8006548:	4a09      	ldr	r2, [pc, #36]	; (8006570 <UART_SetConfig+0xc30>)
 800654a:	fa22 f303 	lsr.w	r3, r2, r3
 800654e:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8006550:	e018      	b.n	8006584 <UART_SetConfig+0xc44>
          pclk = (uint32_t) HSI_VALUE;
 8006552:	4b07      	ldr	r3, [pc, #28]	; (8006570 <UART_SetConfig+0xc30>)
 8006554:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8006556:	e015      	b.n	8006584 <UART_SetConfig+0xc44>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 8006558:	4b06      	ldr	r3, [pc, #24]	; (8006574 <UART_SetConfig+0xc34>)
 800655a:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800655c:	e012      	b.n	8006584 <UART_SetConfig+0xc44>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800655e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8006562:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8006564:	e00e      	b.n	8006584 <UART_SetConfig+0xc44>
 8006566:	bf00      	nop
 8006568:	0800a630 	.word	0x0800a630
 800656c:	58024400 	.word	0x58024400
 8006570:	03d09000 	.word	0x03d09000
 8006574:	003d0900 	.word	0x003d0900
      default:
        pclk = 0U;
 8006578:	2300      	movs	r3, #0
 800657a:	62fb      	str	r3, [r7, #44]	; 0x2c
        ret = HAL_ERROR;
 800657c:	2301      	movs	r3, #1
 800657e:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
        break;
 8006582:	bf00      	nop
    }

    if (pclk != 0U)
 8006584:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006586:	2b00      	cmp	r3, #0
 8006588:	d021      	beq.n	80065ce <UART_SetConfig+0xc8e>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800658a:	687b      	ldr	r3, [r7, #4]
 800658c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800658e:	4a1a      	ldr	r2, [pc, #104]	; (80065f8 <UART_SetConfig+0xcb8>)
 8006590:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8006594:	461a      	mov	r2, r3
 8006596:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006598:	fbb3 f2f2 	udiv	r2, r3, r2
 800659c:	687b      	ldr	r3, [r7, #4]
 800659e:	685b      	ldr	r3, [r3, #4]
 80065a0:	085b      	lsrs	r3, r3, #1
 80065a2:	441a      	add	r2, r3
 80065a4:	687b      	ldr	r3, [r7, #4]
 80065a6:	685b      	ldr	r3, [r3, #4]
 80065a8:	fbb2 f3f3 	udiv	r3, r2, r3
 80065ac:	b29b      	uxth	r3, r3
 80065ae:	62bb      	str	r3, [r7, #40]	; 0x28
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80065b0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80065b2:	2b0f      	cmp	r3, #15
 80065b4:	d908      	bls.n	80065c8 <UART_SetConfig+0xc88>
 80065b6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80065b8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80065bc:	d204      	bcs.n	80065c8 <UART_SetConfig+0xc88>
      {
        huart->Instance->BRR = usartdiv;
 80065be:	687b      	ldr	r3, [r7, #4]
 80065c0:	681b      	ldr	r3, [r3, #0]
 80065c2:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80065c4:	60da      	str	r2, [r3, #12]
 80065c6:	e002      	b.n	80065ce <UART_SetConfig+0xc8e>
      }
      else
      {
        ret = HAL_ERROR;
 80065c8:	2301      	movs	r3, #1
 80065ca:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 80065ce:	687b      	ldr	r3, [r7, #4]
 80065d0:	2201      	movs	r2, #1
 80065d2:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 80065d6:	687b      	ldr	r3, [r7, #4]
 80065d8:	2201      	movs	r2, #1
 80065da:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 80065de:	687b      	ldr	r3, [r7, #4]
 80065e0:	2200      	movs	r2, #0
 80065e2:	671a      	str	r2, [r3, #112]	; 0x70
  huart->TxISR = NULL;
 80065e4:	687b      	ldr	r3, [r7, #4]
 80065e6:	2200      	movs	r2, #0
 80065e8:	675a      	str	r2, [r3, #116]	; 0x74

  return ret;
 80065ea:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
}
 80065ee:	4618      	mov	r0, r3
 80065f0:	3738      	adds	r7, #56	; 0x38
 80065f2:	46bd      	mov	sp, r7
 80065f4:	bdb0      	pop	{r4, r5, r7, pc}
 80065f6:	bf00      	nop
 80065f8:	0800a630 	.word	0x0800a630

080065fc <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 80065fc:	b480      	push	{r7}
 80065fe:	b083      	sub	sp, #12
 8006600:	af00      	add	r7, sp, #0
 8006602:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8006604:	687b      	ldr	r3, [r7, #4]
 8006606:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006608:	f003 0301 	and.w	r3, r3, #1
 800660c:	2b00      	cmp	r3, #0
 800660e:	d00a      	beq.n	8006626 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8006610:	687b      	ldr	r3, [r7, #4]
 8006612:	681b      	ldr	r3, [r3, #0]
 8006614:	685b      	ldr	r3, [r3, #4]
 8006616:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 800661a:	687b      	ldr	r3, [r7, #4]
 800661c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800661e:	687b      	ldr	r3, [r7, #4]
 8006620:	681b      	ldr	r3, [r3, #0]
 8006622:	430a      	orrs	r2, r1
 8006624:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8006626:	687b      	ldr	r3, [r7, #4]
 8006628:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800662a:	f003 0302 	and.w	r3, r3, #2
 800662e:	2b00      	cmp	r3, #0
 8006630:	d00a      	beq.n	8006648 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8006632:	687b      	ldr	r3, [r7, #4]
 8006634:	681b      	ldr	r3, [r3, #0]
 8006636:	685b      	ldr	r3, [r3, #4]
 8006638:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 800663c:	687b      	ldr	r3, [r7, #4]
 800663e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8006640:	687b      	ldr	r3, [r7, #4]
 8006642:	681b      	ldr	r3, [r3, #0]
 8006644:	430a      	orrs	r2, r1
 8006646:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8006648:	687b      	ldr	r3, [r7, #4]
 800664a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800664c:	f003 0304 	and.w	r3, r3, #4
 8006650:	2b00      	cmp	r3, #0
 8006652:	d00a      	beq.n	800666a <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8006654:	687b      	ldr	r3, [r7, #4]
 8006656:	681b      	ldr	r3, [r3, #0]
 8006658:	685b      	ldr	r3, [r3, #4]
 800665a:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 800665e:	687b      	ldr	r3, [r7, #4]
 8006660:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8006662:	687b      	ldr	r3, [r7, #4]
 8006664:	681b      	ldr	r3, [r3, #0]
 8006666:	430a      	orrs	r2, r1
 8006668:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800666a:	687b      	ldr	r3, [r7, #4]
 800666c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800666e:	f003 0308 	and.w	r3, r3, #8
 8006672:	2b00      	cmp	r3, #0
 8006674:	d00a      	beq.n	800668c <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8006676:	687b      	ldr	r3, [r7, #4]
 8006678:	681b      	ldr	r3, [r3, #0]
 800667a:	685b      	ldr	r3, [r3, #4]
 800667c:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8006680:	687b      	ldr	r3, [r7, #4]
 8006682:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8006684:	687b      	ldr	r3, [r7, #4]
 8006686:	681b      	ldr	r3, [r3, #0]
 8006688:	430a      	orrs	r2, r1
 800668a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 800668c:	687b      	ldr	r3, [r7, #4]
 800668e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006690:	f003 0310 	and.w	r3, r3, #16
 8006694:	2b00      	cmp	r3, #0
 8006696:	d00a      	beq.n	80066ae <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8006698:	687b      	ldr	r3, [r7, #4]
 800669a:	681b      	ldr	r3, [r3, #0]
 800669c:	689b      	ldr	r3, [r3, #8]
 800669e:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 80066a2:	687b      	ldr	r3, [r7, #4]
 80066a4:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80066a6:	687b      	ldr	r3, [r7, #4]
 80066a8:	681b      	ldr	r3, [r3, #0]
 80066aa:	430a      	orrs	r2, r1
 80066ac:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 80066ae:	687b      	ldr	r3, [r7, #4]
 80066b0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80066b2:	f003 0320 	and.w	r3, r3, #32
 80066b6:	2b00      	cmp	r3, #0
 80066b8:	d00a      	beq.n	80066d0 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 80066ba:	687b      	ldr	r3, [r7, #4]
 80066bc:	681b      	ldr	r3, [r3, #0]
 80066be:	689b      	ldr	r3, [r3, #8]
 80066c0:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 80066c4:	687b      	ldr	r3, [r7, #4]
 80066c6:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80066c8:	687b      	ldr	r3, [r7, #4]
 80066ca:	681b      	ldr	r3, [r3, #0]
 80066cc:	430a      	orrs	r2, r1
 80066ce:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 80066d0:	687b      	ldr	r3, [r7, #4]
 80066d2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80066d4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80066d8:	2b00      	cmp	r3, #0
 80066da:	d01a      	beq.n	8006712 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 80066dc:	687b      	ldr	r3, [r7, #4]
 80066de:	681b      	ldr	r3, [r3, #0]
 80066e0:	685b      	ldr	r3, [r3, #4]
 80066e2:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 80066e6:	687b      	ldr	r3, [r7, #4]
 80066e8:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80066ea:	687b      	ldr	r3, [r7, #4]
 80066ec:	681b      	ldr	r3, [r3, #0]
 80066ee:	430a      	orrs	r2, r1
 80066f0:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 80066f2:	687b      	ldr	r3, [r7, #4]
 80066f4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80066f6:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80066fa:	d10a      	bne.n	8006712 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 80066fc:	687b      	ldr	r3, [r7, #4]
 80066fe:	681b      	ldr	r3, [r3, #0]
 8006700:	685b      	ldr	r3, [r3, #4]
 8006702:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8006706:	687b      	ldr	r3, [r7, #4]
 8006708:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800670a:	687b      	ldr	r3, [r7, #4]
 800670c:	681b      	ldr	r3, [r3, #0]
 800670e:	430a      	orrs	r2, r1
 8006710:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8006712:	687b      	ldr	r3, [r7, #4]
 8006714:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006716:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800671a:	2b00      	cmp	r3, #0
 800671c:	d00a      	beq.n	8006734 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800671e:	687b      	ldr	r3, [r7, #4]
 8006720:	681b      	ldr	r3, [r3, #0]
 8006722:	685b      	ldr	r3, [r3, #4]
 8006724:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8006728:	687b      	ldr	r3, [r7, #4]
 800672a:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800672c:	687b      	ldr	r3, [r7, #4]
 800672e:	681b      	ldr	r3, [r3, #0]
 8006730:	430a      	orrs	r2, r1
 8006732:	605a      	str	r2, [r3, #4]
  }
}
 8006734:	bf00      	nop
 8006736:	370c      	adds	r7, #12
 8006738:	46bd      	mov	sp, r7
 800673a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800673e:	4770      	bx	lr

08006740 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8006740:	b580      	push	{r7, lr}
 8006742:	b086      	sub	sp, #24
 8006744:	af02      	add	r7, sp, #8
 8006746:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006748:	687b      	ldr	r3, [r7, #4]
 800674a:	2200      	movs	r2, #0
 800674c:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8006750:	f7fb f808 	bl	8001764 <HAL_GetTick>
 8006754:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8006756:	687b      	ldr	r3, [r7, #4]
 8006758:	681b      	ldr	r3, [r3, #0]
 800675a:	681b      	ldr	r3, [r3, #0]
 800675c:	f003 0308 	and.w	r3, r3, #8
 8006760:	2b08      	cmp	r3, #8
 8006762:	d10e      	bne.n	8006782 <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8006764:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8006768:	9300      	str	r3, [sp, #0]
 800676a:	68fb      	ldr	r3, [r7, #12]
 800676c:	2200      	movs	r2, #0
 800676e:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8006772:	6878      	ldr	r0, [r7, #4]
 8006774:	f000 f82f 	bl	80067d6 <UART_WaitOnFlagUntilTimeout>
 8006778:	4603      	mov	r3, r0
 800677a:	2b00      	cmp	r3, #0
 800677c:	d001      	beq.n	8006782 <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800677e:	2303      	movs	r3, #3
 8006780:	e025      	b.n	80067ce <UART_CheckIdleState+0x8e>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8006782:	687b      	ldr	r3, [r7, #4]
 8006784:	681b      	ldr	r3, [r3, #0]
 8006786:	681b      	ldr	r3, [r3, #0]
 8006788:	f003 0304 	and.w	r3, r3, #4
 800678c:	2b04      	cmp	r3, #4
 800678e:	d10e      	bne.n	80067ae <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8006790:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8006794:	9300      	str	r3, [sp, #0]
 8006796:	68fb      	ldr	r3, [r7, #12]
 8006798:	2200      	movs	r2, #0
 800679a:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 800679e:	6878      	ldr	r0, [r7, #4]
 80067a0:	f000 f819 	bl	80067d6 <UART_WaitOnFlagUntilTimeout>
 80067a4:	4603      	mov	r3, r0
 80067a6:	2b00      	cmp	r3, #0
 80067a8:	d001      	beq.n	80067ae <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 80067aa:	2303      	movs	r3, #3
 80067ac:	e00f      	b.n	80067ce <UART_CheckIdleState+0x8e>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 80067ae:	687b      	ldr	r3, [r7, #4]
 80067b0:	2220      	movs	r2, #32
 80067b2:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  huart->RxState = HAL_UART_STATE_READY;
 80067b6:	687b      	ldr	r3, [r7, #4]
 80067b8:	2220      	movs	r2, #32
 80067ba:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80067be:	687b      	ldr	r3, [r7, #4]
 80067c0:	2200      	movs	r2, #0
 80067c2:	66da      	str	r2, [r3, #108]	; 0x6c

  __HAL_UNLOCK(huart);
 80067c4:	687b      	ldr	r3, [r7, #4]
 80067c6:	2200      	movs	r2, #0
 80067c8:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 80067cc:	2300      	movs	r3, #0
}
 80067ce:	4618      	mov	r0, r3
 80067d0:	3710      	adds	r7, #16
 80067d2:	46bd      	mov	sp, r7
 80067d4:	bd80      	pop	{r7, pc}

080067d6 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 80067d6:	b580      	push	{r7, lr}
 80067d8:	b084      	sub	sp, #16
 80067da:	af00      	add	r7, sp, #0
 80067dc:	60f8      	str	r0, [r7, #12]
 80067de:	60b9      	str	r1, [r7, #8]
 80067e0:	603b      	str	r3, [r7, #0]
 80067e2:	4613      	mov	r3, r2
 80067e4:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80067e6:	e062      	b.n	80068ae <UART_WaitOnFlagUntilTimeout+0xd8>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80067e8:	69bb      	ldr	r3, [r7, #24]
 80067ea:	f1b3 3fff 	cmp.w	r3, #4294967295
 80067ee:	d05e      	beq.n	80068ae <UART_WaitOnFlagUntilTimeout+0xd8>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80067f0:	f7fa ffb8 	bl	8001764 <HAL_GetTick>
 80067f4:	4602      	mov	r2, r0
 80067f6:	683b      	ldr	r3, [r7, #0]
 80067f8:	1ad3      	subs	r3, r2, r3
 80067fa:	69ba      	ldr	r2, [r7, #24]
 80067fc:	429a      	cmp	r2, r3
 80067fe:	d302      	bcc.n	8006806 <UART_WaitOnFlagUntilTimeout+0x30>
 8006800:	69bb      	ldr	r3, [r7, #24]
 8006802:	2b00      	cmp	r3, #0
 8006804:	d11d      	bne.n	8006842 <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
 8006806:	68fb      	ldr	r3, [r7, #12]
 8006808:	681b      	ldr	r3, [r3, #0]
 800680a:	681a      	ldr	r2, [r3, #0]
 800680c:	68fb      	ldr	r3, [r7, #12]
 800680e:	681b      	ldr	r3, [r3, #0]
 8006810:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8006814:	601a      	str	r2, [r3, #0]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006816:	68fb      	ldr	r3, [r7, #12]
 8006818:	681b      	ldr	r3, [r3, #0]
 800681a:	689a      	ldr	r2, [r3, #8]
 800681c:	68fb      	ldr	r3, [r7, #12]
 800681e:	681b      	ldr	r3, [r3, #0]
 8006820:	f022 0201 	bic.w	r2, r2, #1
 8006824:	609a      	str	r2, [r3, #8]

        huart->gState = HAL_UART_STATE_READY;
 8006826:	68fb      	ldr	r3, [r7, #12]
 8006828:	2220      	movs	r2, #32
 800682a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
        huart->RxState = HAL_UART_STATE_READY;
 800682e:	68fb      	ldr	r3, [r7, #12]
 8006830:	2220      	movs	r2, #32
 8006832:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

        __HAL_UNLOCK(huart);
 8006836:	68fb      	ldr	r3, [r7, #12]
 8006838:	2200      	movs	r2, #0
 800683a:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

        return HAL_TIMEOUT;
 800683e:	2303      	movs	r3, #3
 8006840:	e045      	b.n	80068ce <UART_WaitOnFlagUntilTimeout+0xf8>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8006842:	68fb      	ldr	r3, [r7, #12]
 8006844:	681b      	ldr	r3, [r3, #0]
 8006846:	681b      	ldr	r3, [r3, #0]
 8006848:	f003 0304 	and.w	r3, r3, #4
 800684c:	2b00      	cmp	r3, #0
 800684e:	d02e      	beq.n	80068ae <UART_WaitOnFlagUntilTimeout+0xd8>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8006850:	68fb      	ldr	r3, [r7, #12]
 8006852:	681b      	ldr	r3, [r3, #0]
 8006854:	69db      	ldr	r3, [r3, #28]
 8006856:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800685a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800685e:	d126      	bne.n	80068ae <UART_WaitOnFlagUntilTimeout+0xd8>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8006860:	68fb      	ldr	r3, [r7, #12]
 8006862:	681b      	ldr	r3, [r3, #0]
 8006864:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8006868:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
 800686a:	68fb      	ldr	r3, [r7, #12]
 800686c:	681b      	ldr	r3, [r3, #0]
 800686e:	681a      	ldr	r2, [r3, #0]
 8006870:	68fb      	ldr	r3, [r7, #12]
 8006872:	681b      	ldr	r3, [r3, #0]
 8006874:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8006878:	601a      	str	r2, [r3, #0]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800687a:	68fb      	ldr	r3, [r7, #12]
 800687c:	681b      	ldr	r3, [r3, #0]
 800687e:	689a      	ldr	r2, [r3, #8]
 8006880:	68fb      	ldr	r3, [r7, #12]
 8006882:	681b      	ldr	r3, [r3, #0]
 8006884:	f022 0201 	bic.w	r2, r2, #1
 8006888:	609a      	str	r2, [r3, #8]

          huart->gState = HAL_UART_STATE_READY;
 800688a:	68fb      	ldr	r3, [r7, #12]
 800688c:	2220      	movs	r2, #32
 800688e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          huart->RxState = HAL_UART_STATE_READY;
 8006892:	68fb      	ldr	r3, [r7, #12]
 8006894:	2220      	movs	r2, #32
 8006896:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800689a:	68fb      	ldr	r3, [r7, #12]
 800689c:	2220      	movs	r2, #32
 800689e:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80068a2:	68fb      	ldr	r3, [r7, #12]
 80068a4:	2200      	movs	r2, #0
 80068a6:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

          return HAL_TIMEOUT;
 80068aa:	2303      	movs	r3, #3
 80068ac:	e00f      	b.n	80068ce <UART_WaitOnFlagUntilTimeout+0xf8>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80068ae:	68fb      	ldr	r3, [r7, #12]
 80068b0:	681b      	ldr	r3, [r3, #0]
 80068b2:	69da      	ldr	r2, [r3, #28]
 80068b4:	68bb      	ldr	r3, [r7, #8]
 80068b6:	4013      	ands	r3, r2
 80068b8:	68ba      	ldr	r2, [r7, #8]
 80068ba:	429a      	cmp	r2, r3
 80068bc:	bf0c      	ite	eq
 80068be:	2301      	moveq	r3, #1
 80068c0:	2300      	movne	r3, #0
 80068c2:	b2db      	uxtb	r3, r3
 80068c4:	461a      	mov	r2, r3
 80068c6:	79fb      	ldrb	r3, [r7, #7]
 80068c8:	429a      	cmp	r2, r3
 80068ca:	d08d      	beq.n	80067e8 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80068cc:	2300      	movs	r3, #0
}
 80068ce:	4618      	mov	r0, r3
 80068d0:	3710      	adds	r7, #16
 80068d2:	46bd      	mov	sp, r7
 80068d4:	bd80      	pop	{r7, pc}
	...

080068d8 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80068d8:	b480      	push	{r7}
 80068da:	b083      	sub	sp, #12
 80068dc:	af00      	add	r7, sp, #0
 80068de:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 80068e0:	687b      	ldr	r3, [r7, #4]
 80068e2:	681b      	ldr	r3, [r3, #0]
 80068e4:	681a      	ldr	r2, [r3, #0]
 80068e6:	687b      	ldr	r3, [r7, #4]
 80068e8:	681b      	ldr	r3, [r3, #0]
 80068ea:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 80068ee:	601a      	str	r2, [r3, #0]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 80068f0:	687b      	ldr	r3, [r7, #4]
 80068f2:	681b      	ldr	r3, [r3, #0]
 80068f4:	6899      	ldr	r1, [r3, #8]
 80068f6:	687b      	ldr	r3, [r7, #4]
 80068f8:	681a      	ldr	r2, [r3, #0]
 80068fa:	4b0f      	ldr	r3, [pc, #60]	; (8006938 <UART_EndRxTransfer+0x60>)
 80068fc:	400b      	ands	r3, r1
 80068fe:	6093      	str	r3, [r2, #8]

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006900:	687b      	ldr	r3, [r7, #4]
 8006902:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8006904:	2b01      	cmp	r3, #1
 8006906:	d107      	bne.n	8006918 <UART_EndRxTransfer+0x40>
  {
    CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006908:	687b      	ldr	r3, [r7, #4]
 800690a:	681b      	ldr	r3, [r3, #0]
 800690c:	681a      	ldr	r2, [r3, #0]
 800690e:	687b      	ldr	r3, [r7, #4]
 8006910:	681b      	ldr	r3, [r3, #0]
 8006912:	f022 0210 	bic.w	r2, r2, #16
 8006916:	601a      	str	r2, [r3, #0]
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8006918:	687b      	ldr	r3, [r7, #4]
 800691a:	2220      	movs	r2, #32
 800691c:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006920:	687b      	ldr	r3, [r7, #4]
 8006922:	2200      	movs	r2, #0
 8006924:	66da      	str	r2, [r3, #108]	; 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8006926:	687b      	ldr	r3, [r7, #4]
 8006928:	2200      	movs	r2, #0
 800692a:	671a      	str	r2, [r3, #112]	; 0x70
}
 800692c:	bf00      	nop
 800692e:	370c      	adds	r7, #12
 8006930:	46bd      	mov	sp, r7
 8006932:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006936:	4770      	bx	lr
 8006938:	effffffe 	.word	0xeffffffe

0800693c <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800693c:	b580      	push	{r7, lr}
 800693e:	b084      	sub	sp, #16
 8006940:	af00      	add	r7, sp, #0
 8006942:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8006944:	687b      	ldr	r3, [r7, #4]
 8006946:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006948:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 800694a:	68fb      	ldr	r3, [r7, #12]
 800694c:	2200      	movs	r2, #0
 800694e:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
  huart->TxXferCount = 0U;
 8006952:	68fb      	ldr	r3, [r7, #12]
 8006954:	2200      	movs	r2, #0
 8006956:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800695a:	68f8      	ldr	r0, [r7, #12]
 800695c:	f7fe ffda 	bl	8005914 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8006960:	bf00      	nop
 8006962:	3710      	adds	r7, #16
 8006964:	46bd      	mov	sp, r7
 8006966:	bd80      	pop	{r7, pc}

08006968 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8006968:	b580      	push	{r7, lr}
 800696a:	b082      	sub	sp, #8
 800696c:	af00      	add	r7, sp, #0
 800696e:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8006970:	687b      	ldr	r3, [r7, #4]
 8006972:	681b      	ldr	r3, [r3, #0]
 8006974:	681a      	ldr	r2, [r3, #0]
 8006976:	687b      	ldr	r3, [r7, #4]
 8006978:	681b      	ldr	r3, [r3, #0]
 800697a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800697e:	601a      	str	r2, [r3, #0]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8006980:	687b      	ldr	r3, [r7, #4]
 8006982:	2220      	movs	r2, #32
 8006984:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 8006988:	687b      	ldr	r3, [r7, #4]
 800698a:	2200      	movs	r2, #0
 800698c:	675a      	str	r2, [r3, #116]	; 0x74
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800698e:	6878      	ldr	r0, [r7, #4]
 8006990:	f7fe ffb6 	bl	8005900 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8006994:	bf00      	nop
 8006996:	3708      	adds	r7, #8
 8006998:	46bd      	mov	sp, r7
 800699a:	bd80      	pop	{r7, pc}

0800699c <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 800699c:	b480      	push	{r7}
 800699e:	b083      	sub	sp, #12
 80069a0:	af00      	add	r7, sp, #0
 80069a2:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 80069a4:	bf00      	nop
 80069a6:	370c      	adds	r7, #12
 80069a8:	46bd      	mov	sp, r7
 80069aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80069ae:	4770      	bx	lr

080069b0 <HAL_UARTEx_RxFifoFullCallback>:
  * @brief  UART RX Fifo full callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_RxFifoFullCallback(UART_HandleTypeDef *huart)
{
 80069b0:	b480      	push	{r7}
 80069b2:	b083      	sub	sp, #12
 80069b4:	af00      	add	r7, sp, #0
 80069b6:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxFifoFullCallback can be implemented in the user file.
   */
}
 80069b8:	bf00      	nop
 80069ba:	370c      	adds	r7, #12
 80069bc:	46bd      	mov	sp, r7
 80069be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80069c2:	4770      	bx	lr

080069c4 <HAL_UARTEx_TxFifoEmptyCallback>:
  * @brief  UART TX Fifo empty callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_TxFifoEmptyCallback(UART_HandleTypeDef *huart)
{
 80069c4:	b480      	push	{r7}
 80069c6:	b083      	sub	sp, #12
 80069c8:	af00      	add	r7, sp, #0
 80069ca:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_TxFifoEmptyCallback can be implemented in the user file.
   */
}
 80069cc:	bf00      	nop
 80069ce:	370c      	adds	r7, #12
 80069d0:	46bd      	mov	sp, r7
 80069d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80069d6:	4770      	bx	lr

080069d8 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 80069d8:	b480      	push	{r7}
 80069da:	b085      	sub	sp, #20
 80069dc:	af00      	add	r7, sp, #0
 80069de:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 80069e0:	687b      	ldr	r3, [r7, #4]
 80069e2:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 80069e6:	2b01      	cmp	r3, #1
 80069e8:	d101      	bne.n	80069ee <HAL_UARTEx_DisableFifoMode+0x16>
 80069ea:	2302      	movs	r3, #2
 80069ec:	e027      	b.n	8006a3e <HAL_UARTEx_DisableFifoMode+0x66>
 80069ee:	687b      	ldr	r3, [r7, #4]
 80069f0:	2201      	movs	r2, #1
 80069f2:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 80069f6:	687b      	ldr	r3, [r7, #4]
 80069f8:	2224      	movs	r2, #36	; 0x24
 80069fa:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 80069fe:	687b      	ldr	r3, [r7, #4]
 8006a00:	681b      	ldr	r3, [r3, #0]
 8006a02:	681b      	ldr	r3, [r3, #0]
 8006a04:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8006a06:	687b      	ldr	r3, [r7, #4]
 8006a08:	681b      	ldr	r3, [r3, #0]
 8006a0a:	681a      	ldr	r2, [r3, #0]
 8006a0c:	687b      	ldr	r3, [r7, #4]
 8006a0e:	681b      	ldr	r3, [r3, #0]
 8006a10:	f022 0201 	bic.w	r2, r2, #1
 8006a14:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 8006a16:	68fb      	ldr	r3, [r7, #12]
 8006a18:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 8006a1c:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 8006a1e:	687b      	ldr	r3, [r7, #4]
 8006a20:	2200      	movs	r2, #0
 8006a22:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8006a24:	687b      	ldr	r3, [r7, #4]
 8006a26:	681b      	ldr	r3, [r3, #0]
 8006a28:	68fa      	ldr	r2, [r7, #12]
 8006a2a:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8006a2c:	687b      	ldr	r3, [r7, #4]
 8006a2e:	2220      	movs	r2, #32
 8006a30:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8006a34:	687b      	ldr	r3, [r7, #4]
 8006a36:	2200      	movs	r2, #0
 8006a38:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 8006a3c:	2300      	movs	r3, #0
}
 8006a3e:	4618      	mov	r0, r3
 8006a40:	3714      	adds	r7, #20
 8006a42:	46bd      	mov	sp, r7
 8006a44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a48:	4770      	bx	lr

08006a4a <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8006a4a:	b580      	push	{r7, lr}
 8006a4c:	b084      	sub	sp, #16
 8006a4e:	af00      	add	r7, sp, #0
 8006a50:	6078      	str	r0, [r7, #4]
 8006a52:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8006a54:	687b      	ldr	r3, [r7, #4]
 8006a56:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8006a5a:	2b01      	cmp	r3, #1
 8006a5c:	d101      	bne.n	8006a62 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 8006a5e:	2302      	movs	r3, #2
 8006a60:	e02d      	b.n	8006abe <HAL_UARTEx_SetTxFifoThreshold+0x74>
 8006a62:	687b      	ldr	r3, [r7, #4]
 8006a64:	2201      	movs	r2, #1
 8006a66:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 8006a6a:	687b      	ldr	r3, [r7, #4]
 8006a6c:	2224      	movs	r2, #36	; 0x24
 8006a6e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8006a72:	687b      	ldr	r3, [r7, #4]
 8006a74:	681b      	ldr	r3, [r3, #0]
 8006a76:	681b      	ldr	r3, [r3, #0]
 8006a78:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8006a7a:	687b      	ldr	r3, [r7, #4]
 8006a7c:	681b      	ldr	r3, [r3, #0]
 8006a7e:	681a      	ldr	r2, [r3, #0]
 8006a80:	687b      	ldr	r3, [r7, #4]
 8006a82:	681b      	ldr	r3, [r3, #0]
 8006a84:	f022 0201 	bic.w	r2, r2, #1
 8006a88:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 8006a8a:	687b      	ldr	r3, [r7, #4]
 8006a8c:	681b      	ldr	r3, [r3, #0]
 8006a8e:	689b      	ldr	r3, [r3, #8]
 8006a90:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 8006a94:	687b      	ldr	r3, [r7, #4]
 8006a96:	681b      	ldr	r3, [r3, #0]
 8006a98:	683a      	ldr	r2, [r7, #0]
 8006a9a:	430a      	orrs	r2, r1
 8006a9c:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8006a9e:	6878      	ldr	r0, [r7, #4]
 8006aa0:	f000 f850 	bl	8006b44 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8006aa4:	687b      	ldr	r3, [r7, #4]
 8006aa6:	681b      	ldr	r3, [r3, #0]
 8006aa8:	68fa      	ldr	r2, [r7, #12]
 8006aaa:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8006aac:	687b      	ldr	r3, [r7, #4]
 8006aae:	2220      	movs	r2, #32
 8006ab0:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8006ab4:	687b      	ldr	r3, [r7, #4]
 8006ab6:	2200      	movs	r2, #0
 8006ab8:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 8006abc:	2300      	movs	r3, #0
}
 8006abe:	4618      	mov	r0, r3
 8006ac0:	3710      	adds	r7, #16
 8006ac2:	46bd      	mov	sp, r7
 8006ac4:	bd80      	pop	{r7, pc}

08006ac6 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8006ac6:	b580      	push	{r7, lr}
 8006ac8:	b084      	sub	sp, #16
 8006aca:	af00      	add	r7, sp, #0
 8006acc:	6078      	str	r0, [r7, #4]
 8006ace:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8006ad0:	687b      	ldr	r3, [r7, #4]
 8006ad2:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8006ad6:	2b01      	cmp	r3, #1
 8006ad8:	d101      	bne.n	8006ade <HAL_UARTEx_SetRxFifoThreshold+0x18>
 8006ada:	2302      	movs	r3, #2
 8006adc:	e02d      	b.n	8006b3a <HAL_UARTEx_SetRxFifoThreshold+0x74>
 8006ade:	687b      	ldr	r3, [r7, #4]
 8006ae0:	2201      	movs	r2, #1
 8006ae2:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 8006ae6:	687b      	ldr	r3, [r7, #4]
 8006ae8:	2224      	movs	r2, #36	; 0x24
 8006aea:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8006aee:	687b      	ldr	r3, [r7, #4]
 8006af0:	681b      	ldr	r3, [r3, #0]
 8006af2:	681b      	ldr	r3, [r3, #0]
 8006af4:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8006af6:	687b      	ldr	r3, [r7, #4]
 8006af8:	681b      	ldr	r3, [r3, #0]
 8006afa:	681a      	ldr	r2, [r3, #0]
 8006afc:	687b      	ldr	r3, [r7, #4]
 8006afe:	681b      	ldr	r3, [r3, #0]
 8006b00:	f022 0201 	bic.w	r2, r2, #1
 8006b04:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 8006b06:	687b      	ldr	r3, [r7, #4]
 8006b08:	681b      	ldr	r3, [r3, #0]
 8006b0a:	689b      	ldr	r3, [r3, #8]
 8006b0c:	f023 6160 	bic.w	r1, r3, #234881024	; 0xe000000
 8006b10:	687b      	ldr	r3, [r7, #4]
 8006b12:	681b      	ldr	r3, [r3, #0]
 8006b14:	683a      	ldr	r2, [r7, #0]
 8006b16:	430a      	orrs	r2, r1
 8006b18:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8006b1a:	6878      	ldr	r0, [r7, #4]
 8006b1c:	f000 f812 	bl	8006b44 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8006b20:	687b      	ldr	r3, [r7, #4]
 8006b22:	681b      	ldr	r3, [r3, #0]
 8006b24:	68fa      	ldr	r2, [r7, #12]
 8006b26:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8006b28:	687b      	ldr	r3, [r7, #4]
 8006b2a:	2220      	movs	r2, #32
 8006b2c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8006b30:	687b      	ldr	r3, [r7, #4]
 8006b32:	2200      	movs	r2, #0
 8006b34:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 8006b38:	2300      	movs	r3, #0
}
 8006b3a:	4618      	mov	r0, r3
 8006b3c:	3710      	adds	r7, #16
 8006b3e:	46bd      	mov	sp, r7
 8006b40:	bd80      	pop	{r7, pc}
	...

08006b44 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 8006b44:	b480      	push	{r7}
 8006b46:	b085      	sub	sp, #20
 8006b48:	af00      	add	r7, sp, #0
 8006b4a:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 8006b4c:	687b      	ldr	r3, [r7, #4]
 8006b4e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8006b50:	2b00      	cmp	r3, #0
 8006b52:	d108      	bne.n	8006b66 <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 8006b54:	687b      	ldr	r3, [r7, #4]
 8006b56:	2201      	movs	r2, #1
 8006b58:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
 8006b5c:	687b      	ldr	r3, [r7, #4]
 8006b5e:	2201      	movs	r2, #1
 8006b60:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 8006b64:	e031      	b.n	8006bca <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 8006b66:	2310      	movs	r3, #16
 8006b68:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 8006b6a:	2310      	movs	r3, #16
 8006b6c:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 8006b6e:	687b      	ldr	r3, [r7, #4]
 8006b70:	681b      	ldr	r3, [r3, #0]
 8006b72:	689b      	ldr	r3, [r3, #8]
 8006b74:	0e5b      	lsrs	r3, r3, #25
 8006b76:	b2db      	uxtb	r3, r3
 8006b78:	f003 0307 	and.w	r3, r3, #7
 8006b7c:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 8006b7e:	687b      	ldr	r3, [r7, #4]
 8006b80:	681b      	ldr	r3, [r3, #0]
 8006b82:	689b      	ldr	r3, [r3, #8]
 8006b84:	0f5b      	lsrs	r3, r3, #29
 8006b86:	b2db      	uxtb	r3, r3
 8006b88:	f003 0307 	and.w	r3, r3, #7
 8006b8c:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8006b8e:	7bbb      	ldrb	r3, [r7, #14]
 8006b90:	7b3a      	ldrb	r2, [r7, #12]
 8006b92:	4911      	ldr	r1, [pc, #68]	; (8006bd8 <UARTEx_SetNbDataToProcess+0x94>)
 8006b94:	5c8a      	ldrb	r2, [r1, r2]
 8006b96:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 8006b9a:	7b3a      	ldrb	r2, [r7, #12]
 8006b9c:	490f      	ldr	r1, [pc, #60]	; (8006bdc <UARTEx_SetNbDataToProcess+0x98>)
 8006b9e:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8006ba0:	fb93 f3f2 	sdiv	r3, r3, r2
 8006ba4:	b29a      	uxth	r2, r3
 8006ba6:	687b      	ldr	r3, [r7, #4]
 8006ba8:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8006bac:	7bfb      	ldrb	r3, [r7, #15]
 8006bae:	7b7a      	ldrb	r2, [r7, #13]
 8006bb0:	4909      	ldr	r1, [pc, #36]	; (8006bd8 <UARTEx_SetNbDataToProcess+0x94>)
 8006bb2:	5c8a      	ldrb	r2, [r1, r2]
 8006bb4:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 8006bb8:	7b7a      	ldrb	r2, [r7, #13]
 8006bba:	4908      	ldr	r1, [pc, #32]	; (8006bdc <UARTEx_SetNbDataToProcess+0x98>)
 8006bbc:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8006bbe:	fb93 f3f2 	sdiv	r3, r3, r2
 8006bc2:	b29a      	uxth	r2, r3
 8006bc4:	687b      	ldr	r3, [r7, #4]
 8006bc6:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
}
 8006bca:	bf00      	nop
 8006bcc:	3714      	adds	r7, #20
 8006bce:	46bd      	mov	sp, r7
 8006bd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006bd4:	4770      	bx	lr
 8006bd6:	bf00      	nop
 8006bd8:	0800a648 	.word	0x0800a648
 8006bdc:	0800a650 	.word	0x0800a650

08006be0 <FMC_NORSRAM_Init>:
  * @param  Init Pointer to NORSRAM Initialization structure
  * @retval HAL status
  */
HAL_StatusTypeDef  FMC_NORSRAM_Init(FMC_NORSRAM_TypeDef *Device,
                                    FMC_NORSRAM_InitTypeDef *Init)
{
 8006be0:	b480      	push	{r7}
 8006be2:	b087      	sub	sp, #28
 8006be4:	af00      	add	r7, sp, #0
 8006be6:	6078      	str	r0, [r7, #4]
 8006be8:	6039      	str	r1, [r7, #0]
  assert_param(IS_FMC_CONTINOUS_CLOCK(Init->ContinuousClock));
  assert_param(IS_FMC_WRITE_FIFO(Init->WriteFifo));
  assert_param(IS_FMC_PAGESIZE(Init->PageSize));

  /* Disable NORSRAM Device */
  __FMC_NORSRAM_DISABLE(Device, Init->NSBank);
 8006bea:	683b      	ldr	r3, [r7, #0]
 8006bec:	681a      	ldr	r2, [r3, #0]
 8006bee:	687b      	ldr	r3, [r7, #4]
 8006bf0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006bf4:	683a      	ldr	r2, [r7, #0]
 8006bf6:	6812      	ldr	r2, [r2, #0]
 8006bf8:	f023 0101 	bic.w	r1, r3, #1
 8006bfc:	687b      	ldr	r3, [r7, #4]
 8006bfe:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

  /* Set NORSRAM device control parameters */
  if (Init->MemoryType == FMC_MEMORY_TYPE_NOR)
 8006c02:	683b      	ldr	r3, [r7, #0]
 8006c04:	689b      	ldr	r3, [r3, #8]
 8006c06:	2b08      	cmp	r3, #8
 8006c08:	d102      	bne.n	8006c10 <FMC_NORSRAM_Init+0x30>
  {
    flashaccess = FMC_NORSRAM_FLASH_ACCESS_ENABLE;
 8006c0a:	2340      	movs	r3, #64	; 0x40
 8006c0c:	617b      	str	r3, [r7, #20]
 8006c0e:	e001      	b.n	8006c14 <FMC_NORSRAM_Init+0x34>
  }
  else
  {
    flashaccess = FMC_NORSRAM_FLASH_ACCESS_DISABLE;
 8006c10:	2300      	movs	r3, #0
 8006c12:	617b      	str	r3, [r7, #20]
  }

  btcr_reg = (flashaccess                   | \
              Init->DataAddressMux          | \
 8006c14:	683b      	ldr	r3, [r7, #0]
 8006c16:	685a      	ldr	r2, [r3, #4]
  btcr_reg = (flashaccess                   | \
 8006c18:	697b      	ldr	r3, [r7, #20]
 8006c1a:	431a      	orrs	r2, r3
              Init->MemoryType              | \
 8006c1c:	683b      	ldr	r3, [r7, #0]
 8006c1e:	689b      	ldr	r3, [r3, #8]
              Init->DataAddressMux          | \
 8006c20:	431a      	orrs	r2, r3
              Init->MemoryDataWidth         | \
 8006c22:	683b      	ldr	r3, [r7, #0]
 8006c24:	68db      	ldr	r3, [r3, #12]
              Init->MemoryType              | \
 8006c26:	431a      	orrs	r2, r3
              Init->BurstAccessMode         | \
 8006c28:	683b      	ldr	r3, [r7, #0]
 8006c2a:	691b      	ldr	r3, [r3, #16]
              Init->MemoryDataWidth         | \
 8006c2c:	431a      	orrs	r2, r3
              Init->WaitSignalPolarity      | \
 8006c2e:	683b      	ldr	r3, [r7, #0]
 8006c30:	695b      	ldr	r3, [r3, #20]
              Init->BurstAccessMode         | \
 8006c32:	431a      	orrs	r2, r3
              Init->WaitSignalActive        | \
 8006c34:	683b      	ldr	r3, [r7, #0]
 8006c36:	699b      	ldr	r3, [r3, #24]
              Init->WaitSignalPolarity      | \
 8006c38:	431a      	orrs	r2, r3
              Init->WriteOperation          | \
 8006c3a:	683b      	ldr	r3, [r7, #0]
 8006c3c:	69db      	ldr	r3, [r3, #28]
              Init->WaitSignalActive        | \
 8006c3e:	431a      	orrs	r2, r3
              Init->WaitSignal              | \
 8006c40:	683b      	ldr	r3, [r7, #0]
 8006c42:	6a1b      	ldr	r3, [r3, #32]
              Init->WriteOperation          | \
 8006c44:	431a      	orrs	r2, r3
              Init->ExtendedMode            | \
 8006c46:	683b      	ldr	r3, [r7, #0]
 8006c48:	6a5b      	ldr	r3, [r3, #36]	; 0x24
              Init->WaitSignal              | \
 8006c4a:	431a      	orrs	r2, r3
              Init->AsynchronousWait        | \
 8006c4c:	683b      	ldr	r3, [r7, #0]
 8006c4e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
              Init->ExtendedMode            | \
 8006c50:	431a      	orrs	r2, r3
              Init->WriteBurst);
 8006c52:	683b      	ldr	r3, [r7, #0]
 8006c54:	6adb      	ldr	r3, [r3, #44]	; 0x2c
  btcr_reg = (flashaccess                   | \
 8006c56:	4313      	orrs	r3, r2
 8006c58:	613b      	str	r3, [r7, #16]

  btcr_reg |= Init->ContinuousClock;
 8006c5a:	683b      	ldr	r3, [r7, #0]
 8006c5c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006c5e:	693a      	ldr	r2, [r7, #16]
 8006c60:	4313      	orrs	r3, r2
 8006c62:	613b      	str	r3, [r7, #16]
  btcr_reg |= Init->WriteFifo;
 8006c64:	683b      	ldr	r3, [r7, #0]
 8006c66:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006c68:	693a      	ldr	r2, [r7, #16]
 8006c6a:	4313      	orrs	r3, r2
 8006c6c:	613b      	str	r3, [r7, #16]
  btcr_reg |= Init->PageSize;
 8006c6e:	683b      	ldr	r3, [r7, #0]
 8006c70:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006c72:	693a      	ldr	r2, [r7, #16]
 8006c74:	4313      	orrs	r3, r2
 8006c76:	613b      	str	r3, [r7, #16]

  mask = (FMC_BCRx_MBKEN                |
 8006c78:	4b20      	ldr	r3, [pc, #128]	; (8006cfc <FMC_NORSRAM_Init+0x11c>)
 8006c7a:	60fb      	str	r3, [r7, #12]
          FMC_BCRx_WAITEN               |
          FMC_BCRx_EXTMOD               |
          FMC_BCRx_ASYNCWAIT            |
          FMC_BCRx_CBURSTRW);

  mask |= FMC_BCR1_CCLKEN;
 8006c7c:	68fb      	ldr	r3, [r7, #12]
 8006c7e:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8006c82:	60fb      	str	r3, [r7, #12]
  mask |= FMC_BCR1_WFDIS;
 8006c84:	68fb      	ldr	r3, [r7, #12]
 8006c86:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8006c8a:	60fb      	str	r3, [r7, #12]
  mask |= FMC_BCRx_CPSIZE;
 8006c8c:	68fb      	ldr	r3, [r7, #12]
 8006c8e:	f443 23e0 	orr.w	r3, r3, #458752	; 0x70000
 8006c92:	60fb      	str	r3, [r7, #12]

  MODIFY_REG(Device->BTCR[Init->NSBank], mask, btcr_reg);
 8006c94:	683b      	ldr	r3, [r7, #0]
 8006c96:	681a      	ldr	r2, [r3, #0]
 8006c98:	687b      	ldr	r3, [r7, #4]
 8006c9a:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8006c9e:	68fb      	ldr	r3, [r7, #12]
 8006ca0:	43db      	mvns	r3, r3
 8006ca2:	ea02 0103 	and.w	r1, r2, r3
 8006ca6:	683b      	ldr	r3, [r7, #0]
 8006ca8:	681a      	ldr	r2, [r3, #0]
 8006caa:	693b      	ldr	r3, [r7, #16]
 8006cac:	4319      	orrs	r1, r3
 8006cae:	687b      	ldr	r3, [r7, #4]
 8006cb0:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

  /* Configure synchronous mode when Continuous clock is enabled for bank2..4 */
  if ((Init->ContinuousClock == FMC_CONTINUOUS_CLOCK_SYNC_ASYNC) && (Init->NSBank != FMC_NORSRAM_BANK1))
 8006cb4:	683b      	ldr	r3, [r7, #0]
 8006cb6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006cb8:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8006cbc:	d10c      	bne.n	8006cd8 <FMC_NORSRAM_Init+0xf8>
 8006cbe:	683b      	ldr	r3, [r7, #0]
 8006cc0:	681b      	ldr	r3, [r3, #0]
 8006cc2:	2b00      	cmp	r3, #0
 8006cc4:	d008      	beq.n	8006cd8 <FMC_NORSRAM_Init+0xf8>
  {
    MODIFY_REG(Device->BTCR[FMC_NORSRAM_BANK1], FMC_BCR1_CCLKEN, Init->ContinuousClock);
 8006cc6:	687b      	ldr	r3, [r7, #4]
 8006cc8:	681b      	ldr	r3, [r3, #0]
 8006cca:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 8006cce:	683b      	ldr	r3, [r7, #0]
 8006cd0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006cd2:	431a      	orrs	r2, r3
 8006cd4:	687b      	ldr	r3, [r7, #4]
 8006cd6:	601a      	str	r2, [r3, #0]
  }

  if (Init->NSBank != FMC_NORSRAM_BANK1)
 8006cd8:	683b      	ldr	r3, [r7, #0]
 8006cda:	681b      	ldr	r3, [r3, #0]
 8006cdc:	2b00      	cmp	r3, #0
 8006cde:	d006      	beq.n	8006cee <FMC_NORSRAM_Init+0x10e>
  {
    /* Configure Write FIFO mode when Write Fifo is enabled for bank2..4 */
    SET_BIT(Device->BTCR[FMC_NORSRAM_BANK1], (uint32_t)(Init->WriteFifo));
 8006ce0:	687b      	ldr	r3, [r7, #4]
 8006ce2:	681a      	ldr	r2, [r3, #0]
 8006ce4:	683b      	ldr	r3, [r7, #0]
 8006ce6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006ce8:	431a      	orrs	r2, r3
 8006cea:	687b      	ldr	r3, [r7, #4]
 8006cec:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8006cee:	2300      	movs	r3, #0
}
 8006cf0:	4618      	mov	r0, r3
 8006cf2:	371c      	adds	r7, #28
 8006cf4:	46bd      	mov	sp, r7
 8006cf6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006cfa:	4770      	bx	lr
 8006cfc:	0008fb7f 	.word	0x0008fb7f

08006d00 <FMC_NORSRAM_Timing_Init>:
  * @param  Bank NORSRAM bank number
  * @retval HAL status
  */
HAL_StatusTypeDef FMC_NORSRAM_Timing_Init(FMC_NORSRAM_TypeDef *Device,
                                          FMC_NORSRAM_TimingTypeDef *Timing, uint32_t Bank)
{
 8006d00:	b480      	push	{r7}
 8006d02:	b087      	sub	sp, #28
 8006d04:	af00      	add	r7, sp, #0
 8006d06:	60f8      	str	r0, [r7, #12]
 8006d08:	60b9      	str	r1, [r7, #8]
 8006d0a:	607a      	str	r2, [r7, #4]
  assert_param(IS_FMC_DATA_LATENCY(Timing->DataLatency));
  assert_param(IS_FMC_ACCESS_MODE(Timing->AccessMode));
  assert_param(IS_FMC_NORSRAM_BANK(Bank));

  /* Set FMC_NORSRAM device timing parameters */
  MODIFY_REG(Device->BTCR[Bank + 1U], BTR_CLEAR_MASK, (Timing->AddressSetupTime                                  |
 8006d0c:	687b      	ldr	r3, [r7, #4]
 8006d0e:	1c5a      	adds	r2, r3, #1
 8006d10:	68fb      	ldr	r3, [r7, #12]
 8006d12:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006d16:	f003 4140 	and.w	r1, r3, #3221225472	; 0xc0000000
 8006d1a:	68bb      	ldr	r3, [r7, #8]
 8006d1c:	681a      	ldr	r2, [r3, #0]
 8006d1e:	68bb      	ldr	r3, [r7, #8]
 8006d20:	685b      	ldr	r3, [r3, #4]
 8006d22:	011b      	lsls	r3, r3, #4
 8006d24:	431a      	orrs	r2, r3
 8006d26:	68bb      	ldr	r3, [r7, #8]
 8006d28:	689b      	ldr	r3, [r3, #8]
 8006d2a:	021b      	lsls	r3, r3, #8
 8006d2c:	431a      	orrs	r2, r3
 8006d2e:	68bb      	ldr	r3, [r7, #8]
 8006d30:	68db      	ldr	r3, [r3, #12]
 8006d32:	041b      	lsls	r3, r3, #16
 8006d34:	431a      	orrs	r2, r3
 8006d36:	68bb      	ldr	r3, [r7, #8]
 8006d38:	691b      	ldr	r3, [r3, #16]
 8006d3a:	3b01      	subs	r3, #1
 8006d3c:	051b      	lsls	r3, r3, #20
 8006d3e:	431a      	orrs	r2, r3
 8006d40:	68bb      	ldr	r3, [r7, #8]
 8006d42:	695b      	ldr	r3, [r3, #20]
 8006d44:	3b02      	subs	r3, #2
 8006d46:	061b      	lsls	r3, r3, #24
 8006d48:	431a      	orrs	r2, r3
 8006d4a:	68bb      	ldr	r3, [r7, #8]
 8006d4c:	699b      	ldr	r3, [r3, #24]
 8006d4e:	4313      	orrs	r3, r2
 8006d50:	687a      	ldr	r2, [r7, #4]
 8006d52:	3201      	adds	r2, #1
 8006d54:	4319      	orrs	r1, r3
 8006d56:	68fb      	ldr	r3, [r7, #12]
 8006d58:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
                                                       (((Timing->CLKDivision) - 1U)     << FMC_BTRx_CLKDIV_Pos)  |
                                                       (((Timing->DataLatency) - 2U)     << FMC_BTRx_DATLAT_Pos)  |
                                                       (Timing->AccessMode)));

  /* Configure Clock division value (in NORSRAM bank 1) when continuous clock is enabled */
  if (HAL_IS_BIT_SET(Device->BTCR[FMC_NORSRAM_BANK1], FMC_BCR1_CCLKEN))
 8006d5c:	68fb      	ldr	r3, [r7, #12]
 8006d5e:	681b      	ldr	r3, [r3, #0]
 8006d60:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8006d64:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8006d68:	d113      	bne.n	8006d92 <FMC_NORSRAM_Timing_Init+0x92>
  {
    tmpr = (uint32_t)(Device->BTCR[FMC_NORSRAM_BANK1 + 1U] & ~((0x0FU) << FMC_BTRx_CLKDIV_Pos));
 8006d6a:	68fb      	ldr	r3, [r7, #12]
 8006d6c:	685b      	ldr	r3, [r3, #4]
 8006d6e:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 8006d72:	617b      	str	r3, [r7, #20]
    tmpr |= (uint32_t)(((Timing->CLKDivision) - 1U) << FMC_BTRx_CLKDIV_Pos);
 8006d74:	68bb      	ldr	r3, [r7, #8]
 8006d76:	691b      	ldr	r3, [r3, #16]
 8006d78:	3b01      	subs	r3, #1
 8006d7a:	051b      	lsls	r3, r3, #20
 8006d7c:	697a      	ldr	r2, [r7, #20]
 8006d7e:	4313      	orrs	r3, r2
 8006d80:	617b      	str	r3, [r7, #20]
    MODIFY_REG(Device->BTCR[FMC_NORSRAM_BANK1 + 1U], FMC_BTRx_CLKDIV, tmpr);
 8006d82:	68fb      	ldr	r3, [r7, #12]
 8006d84:	685b      	ldr	r3, [r3, #4]
 8006d86:	f423 0270 	bic.w	r2, r3, #15728640	; 0xf00000
 8006d8a:	697b      	ldr	r3, [r7, #20]
 8006d8c:	431a      	orrs	r2, r3
 8006d8e:	68fb      	ldr	r3, [r7, #12]
 8006d90:	605a      	str	r2, [r3, #4]
  }

  return HAL_OK;
 8006d92:	2300      	movs	r3, #0
}
 8006d94:	4618      	mov	r0, r3
 8006d96:	371c      	adds	r7, #28
 8006d98:	46bd      	mov	sp, r7
 8006d9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d9e:	4770      	bx	lr

08006da0 <FMC_NORSRAM_Extended_Timing_Init>:
  * @retval HAL status
  */
HAL_StatusTypeDef FMC_NORSRAM_Extended_Timing_Init(FMC_NORSRAM_EXTENDED_TypeDef *Device,
                                                   FMC_NORSRAM_TimingTypeDef *Timing, uint32_t Bank,
                                                   uint32_t ExtendedMode)
{
 8006da0:	b480      	push	{r7}
 8006da2:	b085      	sub	sp, #20
 8006da4:	af00      	add	r7, sp, #0
 8006da6:	60f8      	str	r0, [r7, #12]
 8006da8:	60b9      	str	r1, [r7, #8]
 8006daa:	607a      	str	r2, [r7, #4]
 8006dac:	603b      	str	r3, [r7, #0]
  /* Check the parameters */
  assert_param(IS_FMC_EXTENDED_MODE(ExtendedMode));

  /* Set NORSRAM device timing register for write configuration, if extended mode is used */
  if (ExtendedMode == FMC_EXTENDED_MODE_ENABLE)
 8006dae:	683b      	ldr	r3, [r7, #0]
 8006db0:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8006db4:	d11d      	bne.n	8006df2 <FMC_NORSRAM_Extended_Timing_Init+0x52>
    assert_param(IS_FMC_TURNAROUND_TIME(Timing->BusTurnAroundDuration));
    assert_param(IS_FMC_ACCESS_MODE(Timing->AccessMode));
    assert_param(IS_FMC_NORSRAM_BANK(Bank));

    /* Set NORSRAM device timing register for write configuration, if extended mode is used */
    MODIFY_REG(Device->BWTR[Bank], BWTR_CLEAR_MASK, (Timing->AddressSetupTime                                    |
 8006db6:	68fb      	ldr	r3, [r7, #12]
 8006db8:	687a      	ldr	r2, [r7, #4]
 8006dba:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8006dbe:	4b13      	ldr	r3, [pc, #76]	; (8006e0c <FMC_NORSRAM_Extended_Timing_Init+0x6c>)
 8006dc0:	4013      	ands	r3, r2
 8006dc2:	68ba      	ldr	r2, [r7, #8]
 8006dc4:	6811      	ldr	r1, [r2, #0]
 8006dc6:	68ba      	ldr	r2, [r7, #8]
 8006dc8:	6852      	ldr	r2, [r2, #4]
 8006dca:	0112      	lsls	r2, r2, #4
 8006dcc:	4311      	orrs	r1, r2
 8006dce:	68ba      	ldr	r2, [r7, #8]
 8006dd0:	6892      	ldr	r2, [r2, #8]
 8006dd2:	0212      	lsls	r2, r2, #8
 8006dd4:	4311      	orrs	r1, r2
 8006dd6:	68ba      	ldr	r2, [r7, #8]
 8006dd8:	6992      	ldr	r2, [r2, #24]
 8006dda:	4311      	orrs	r1, r2
 8006ddc:	68ba      	ldr	r2, [r7, #8]
 8006dde:	68d2      	ldr	r2, [r2, #12]
 8006de0:	0412      	lsls	r2, r2, #16
 8006de2:	430a      	orrs	r2, r1
 8006de4:	ea43 0102 	orr.w	r1, r3, r2
 8006de8:	68fb      	ldr	r3, [r7, #12]
 8006dea:	687a      	ldr	r2, [r7, #4]
 8006dec:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
 8006df0:	e005      	b.n	8006dfe <FMC_NORSRAM_Extended_Timing_Init+0x5e>
                                                     Timing->AccessMode                                          |
                                                     ((Timing->BusTurnAroundDuration)  << FMC_BWTRx_BUSTURN_Pos)));
  }
  else
  {
    Device->BWTR[Bank] = 0x0FFFFFFFU;
 8006df2:	68fb      	ldr	r3, [r7, #12]
 8006df4:	687a      	ldr	r2, [r7, #4]
 8006df6:	f06f 4170 	mvn.w	r1, #4026531840	; 0xf0000000
 8006dfa:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  }

  return HAL_OK;
 8006dfe:	2300      	movs	r3, #0
}
 8006e00:	4618      	mov	r0, r3
 8006e02:	3714      	adds	r7, #20
 8006e04:	46bd      	mov	sp, r7
 8006e06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e0a:	4770      	bx	lr
 8006e0c:	cff00000 	.word	0xcff00000

08006e10 <loopback_tcps>:
uint8_t* msg_v4 = "IPv4 mode";
uint8_t* msg_v6 = "IPv6 mode";
uint8_t* msg_dual = "Dual IP mode";

int32_t loopback_tcps(uint8_t sn, uint8_t* buf, uint16_t port, uint8_t loopback_mode)
{
 8006e10:	b580      	push	{r7, lr}
 8006e12:	b088      	sub	sp, #32
 8006e14:	af00      	add	r7, sp, #0
 8006e16:	6039      	str	r1, [r7, #0]
 8006e18:	4611      	mov	r1, r2
 8006e1a:	461a      	mov	r2, r3
 8006e1c:	4603      	mov	r3, r0
 8006e1e:	71fb      	strb	r3, [r7, #7]
 8006e20:	460b      	mov	r3, r1
 8006e22:	80bb      	strh	r3, [r7, #4]
 8006e24:	4613      	mov	r3, r2
 8006e26:	71bb      	strb	r3, [r7, #6]
    int32_t ret;
    datasize_t sentsize=0;
 8006e28:	2300      	movs	r3, #0
 8006e2a:	83fb      	strh	r3, [r7, #30]
    int8_t status,inter;
    uint8_t tmp = 0;
 8006e2c:	2300      	movs	r3, #0
 8006e2e:	777b      	strb	r3, [r7, #29]
    datasize_t received_size;
    uint8_t arg_tmp8;
    uint8_t* mode_msg;

    if(loopback_mode == AS_IPV4)
 8006e30:	79bb      	ldrb	r3, [r7, #6]
 8006e32:	2b02      	cmp	r3, #2
 8006e34:	d103      	bne.n	8006e3e <loopback_tcps+0x2e>
    {
       mode_msg = msg_v4;
 8006e36:	4bad      	ldr	r3, [pc, #692]	; (80070ec <loopback_tcps+0x2dc>)
 8006e38:	681b      	ldr	r3, [r3, #0]
 8006e3a:	61bb      	str	r3, [r7, #24]
 8006e3c:	e009      	b.n	8006e52 <loopback_tcps+0x42>
    }else if(loopback_mode == AS_IPV6)
 8006e3e:	79bb      	ldrb	r3, [r7, #6]
 8006e40:	2b17      	cmp	r3, #23
 8006e42:	d103      	bne.n	8006e4c <loopback_tcps+0x3c>
    {
       mode_msg = msg_v6;
 8006e44:	4baa      	ldr	r3, [pc, #680]	; (80070f0 <loopback_tcps+0x2e0>)
 8006e46:	681b      	ldr	r3, [r3, #0]
 8006e48:	61bb      	str	r3, [r7, #24]
 8006e4a:	e002      	b.n	8006e52 <loopback_tcps+0x42>
    }else
    {
       mode_msg = msg_dual;
 8006e4c:	4ba9      	ldr	r3, [pc, #676]	; (80070f4 <loopback_tcps+0x2e4>)
 8006e4e:	681b      	ldr	r3, [r3, #0]
 8006e50:	61bb      	str	r3, [r7, #24]
    }
    #ifdef _LOOPBACK_DEBUG_
        uint8_t dst_ip[16], ext_status;
        uint16_t dst_port;
    #endif
        getsockopt(sn, SO_STATUS, &status);
 8006e52:	f107 0213 	add.w	r2, r7, #19
 8006e56:	79fb      	ldrb	r3, [r7, #7]
 8006e58:	210a      	movs	r1, #10
 8006e5a:	4618      	mov	r0, r3
 8006e5c:	f001 f8fe 	bl	800805c <getsockopt>
        switch(status)
 8006e60:	f997 3013 	ldrsb.w	r3, [r7, #19]
 8006e64:	2b1c      	cmp	r3, #28
 8006e66:	f200 8133 	bhi.w	80070d0 <loopback_tcps+0x2c0>
 8006e6a:	a201      	add	r2, pc, #4	; (adr r2, 8006e70 <loopback_tcps+0x60>)
 8006e6c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006e70:	08007077 	.word	0x08007077
 8006e74:	080070d1 	.word	0x080070d1
 8006e78:	080070d1 	.word	0x080070d1
 8006e7c:	080070d1 	.word	0x080070d1
 8006e80:	080070d1 	.word	0x080070d1
 8006e84:	080070d1 	.word	0x080070d1
 8006e88:	080070d1 	.word	0x080070d1
 8006e8c:	080070d1 	.word	0x080070d1
 8006e90:	080070d1 	.word	0x080070d1
 8006e94:	080070d1 	.word	0x080070d1
 8006e98:	080070d1 	.word	0x080070d1
 8006e9c:	080070d1 	.word	0x080070d1
 8006ea0:	080070d1 	.word	0x080070d1
 8006ea4:	080070d1 	.word	0x080070d1
 8006ea8:	080070d1 	.word	0x080070d1
 8006eac:	080070d1 	.word	0x080070d1
 8006eb0:	080070d1 	.word	0x080070d1
 8006eb4:	080070d1 	.word	0x080070d1
 8006eb8:	080070d1 	.word	0x080070d1
 8006ebc:	08007061 	.word	0x08007061
 8006ec0:	080070d1 	.word	0x080070d1
 8006ec4:	080070d1 	.word	0x080070d1
 8006ec8:	080070d1 	.word	0x080070d1
 8006ecc:	08006ee5 	.word	0x08006ee5
 8006ed0:	080070d1 	.word	0x080070d1
 8006ed4:	080070d1 	.word	0x080070d1
 8006ed8:	080070d1 	.word	0x080070d1
 8006edc:	080070d1 	.word	0x080070d1
 8006ee0:	08006fb1 	.word	0x08006fb1
        {
        case SOCK_ESTABLISHED :
            ctlsocket(sn,CS_GET_INTERRUPT,&inter);
 8006ee4:	f107 0212 	add.w	r2, r7, #18
 8006ee8:	79fb      	ldrb	r3, [r7, #7]
 8006eea:	2105      	movs	r1, #5
 8006eec:	4618      	mov	r0, r3
 8006eee:	f000 ffb9 	bl	8007e64 <ctlsocket>
            if(inter & Sn_IR_CON)
 8006ef2:	f997 3012 	ldrsb.w	r3, [r7, #18]
 8006ef6:	b2db      	uxtb	r3, r3
 8006ef8:	f003 0301 	and.w	r3, r3, #1
 8006efc:	2b00      	cmp	r3, #0
 8006efe:	d008      	beq.n	8006f12 <loopback_tcps+0x102>
                            sn, dst_ip[0], dst_ip[1], dst_ip[2], dst_ip[3]);
                }
                getsockopt(sn,SO_DESTPORT,&dst_port);
                printf("Peer Port : %d\r\n", dst_port);
            #endif
                arg_tmp8 = Sn_IR_CON;
 8006f00:	2301      	movs	r3, #1
 8006f02:	73fb      	strb	r3, [r7, #15]
                ctlsocket(sn,CS_CLR_INTERRUPT,&arg_tmp8);
 8006f04:	f107 020f 	add.w	r2, r7, #15
 8006f08:	79fb      	ldrb	r3, [r7, #7]
 8006f0a:	2104      	movs	r1, #4
 8006f0c:	4618      	mov	r0, r3
 8006f0e:	f000 ffa9 	bl	8007e64 <ctlsocket>
            }
            getsockopt(sn,SO_RECVBUF,&received_size);
 8006f12:	f107 0210 	add.w	r2, r7, #16
 8006f16:	79fb      	ldrb	r3, [r7, #7]
 8006f18:	2109      	movs	r1, #9
 8006f1a:	4618      	mov	r0, r3
 8006f1c:	f001 f89e 	bl	800805c <getsockopt>

            if(received_size > 0){
 8006f20:	f9b7 3010 	ldrsh.w	r3, [r7, #16]
 8006f24:	2b00      	cmp	r3, #0
 8006f26:	f340 80d5 	ble.w	80070d4 <loopback_tcps+0x2c4>
                if(received_size > DATA_BUF_SIZE) received_size = DATA_BUF_SIZE;
 8006f2a:	f9b7 3010 	ldrsh.w	r3, [r7, #16]
 8006f2e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8006f32:	dd02      	ble.n	8006f3a <loopback_tcps+0x12a>
 8006f34:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8006f38:	823b      	strh	r3, [r7, #16]
                ret = recv(sn, buf, received_size);
 8006f3a:	f9b7 2010 	ldrsh.w	r2, [r7, #16]
 8006f3e:	79fb      	ldrb	r3, [r7, #7]
 8006f40:	6839      	ldr	r1, [r7, #0]
 8006f42:	4618      	mov	r0, r3
 8006f44:	f000 ff08 	bl	8007d58 <recv>
 8006f48:	4603      	mov	r3, r0
 8006f4a:	617b      	str	r3, [r7, #20]

                if(ret <= 0) return ret;      // check SOCKERR_BUSY & SOCKERR_XXX. For showing the occurrence of SOCKERR_BUSY.
 8006f4c:	697b      	ldr	r3, [r7, #20]
 8006f4e:	2b00      	cmp	r3, #0
 8006f50:	dc01      	bgt.n	8006f56 <loopback_tcps+0x146>
 8006f52:	697b      	ldr	r3, [r7, #20]
 8006f54:	e0c6      	b.n	80070e4 <loopback_tcps+0x2d4>
                received_size = (uint16_t) ret;
 8006f56:	697b      	ldr	r3, [r7, #20]
 8006f58:	b21b      	sxth	r3, r3
 8006f5a:	823b      	strh	r3, [r7, #16]
                sentsize = 0;
 8006f5c:	2300      	movs	r3, #0
 8006f5e:	83fb      	strh	r3, [r7, #30]

                while(received_size != sentsize)
 8006f60:	e01f      	b.n	8006fa2 <loopback_tcps+0x192>
                {
                    ret = send(sn, buf+sentsize, received_size-sentsize);
 8006f62:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
 8006f66:	683a      	ldr	r2, [r7, #0]
 8006f68:	18d1      	adds	r1, r2, r3
 8006f6a:	f9b7 3010 	ldrsh.w	r3, [r7, #16]
 8006f6e:	b29a      	uxth	r2, r3
 8006f70:	8bfb      	ldrh	r3, [r7, #30]
 8006f72:	1ad3      	subs	r3, r2, r3
 8006f74:	b29b      	uxth	r3, r3
 8006f76:	b21a      	sxth	r2, r3
 8006f78:	79fb      	ldrb	r3, [r7, #7]
 8006f7a:	4618      	mov	r0, r3
 8006f7c:	f000 fe00 	bl	8007b80 <send>
 8006f80:	4603      	mov	r3, r0
 8006f82:	617b      	str	r3, [r7, #20]
                    if(ret < 0)
 8006f84:	697b      	ldr	r3, [r7, #20]
 8006f86:	2b00      	cmp	r3, #0
 8006f88:	da05      	bge.n	8006f96 <loopback_tcps+0x186>
                    {
                        close(sn);
 8006f8a:	79fb      	ldrb	r3, [r7, #7]
 8006f8c:	4618      	mov	r0, r3
 8006f8e:	f000 fcbb 	bl	8007908 <close>
                        return ret;
 8006f92:	697b      	ldr	r3, [r7, #20]
 8006f94:	e0a6      	b.n	80070e4 <loopback_tcps+0x2d4>
                    }
                    sentsize += ret; // Don't care SOCKERR_BUSY, because it is zero.
 8006f96:	697b      	ldr	r3, [r7, #20]
 8006f98:	b29a      	uxth	r2, r3
 8006f9a:	8bfb      	ldrh	r3, [r7, #30]
 8006f9c:	4413      	add	r3, r2
 8006f9e:	b29b      	uxth	r3, r3
 8006fa0:	83fb      	strh	r3, [r7, #30]
                while(received_size != sentsize)
 8006fa2:	f9b7 3010 	ldrsh.w	r3, [r7, #16]
 8006fa6:	f9b7 201e 	ldrsh.w	r2, [r7, #30]
 8006faa:	429a      	cmp	r2, r3
 8006fac:	d1d9      	bne.n	8006f62 <loopback_tcps+0x152>
                }
            }
            break;
 8006fae:	e091      	b.n	80070d4 <loopback_tcps+0x2c4>
        case SOCK_CLOSE_WAIT :
            #ifdef _LOOPBACK_DEBUG_
                printf("%d:CloseWait\r\n",sn);
            #endif
            getsockopt(sn, SO_RECVBUF, &received_size);
 8006fb0:	f107 0210 	add.w	r2, r7, #16
 8006fb4:	79fb      	ldrb	r3, [r7, #7]
 8006fb6:	2109      	movs	r1, #9
 8006fb8:	4618      	mov	r0, r3
 8006fba:	f001 f84f 	bl	800805c <getsockopt>
            if(received_size > 0) // Don't need to check SOCKERR_BUSY because it doesn't not occur.
 8006fbe:	f9b7 3010 	ldrsh.w	r3, [r7, #16]
 8006fc2:	2b00      	cmp	r3, #0
 8006fc4:	dd41      	ble.n	800704a <loopback_tcps+0x23a>
            {
                if(received_size > DATA_BUF_SIZE) received_size = DATA_BUF_SIZE;
 8006fc6:	f9b7 3010 	ldrsh.w	r3, [r7, #16]
 8006fca:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8006fce:	dd02      	ble.n	8006fd6 <loopback_tcps+0x1c6>
 8006fd0:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8006fd4:	823b      	strh	r3, [r7, #16]
                ret = recv(sn, buf, received_size);
 8006fd6:	f9b7 2010 	ldrsh.w	r2, [r7, #16]
 8006fda:	79fb      	ldrb	r3, [r7, #7]
 8006fdc:	6839      	ldr	r1, [r7, #0]
 8006fde:	4618      	mov	r0, r3
 8006fe0:	f000 feba 	bl	8007d58 <recv>
 8006fe4:	4603      	mov	r3, r0
 8006fe6:	617b      	str	r3, [r7, #20]

                if(ret <= 0) return ret;      // check SOCKERR_BUSY & SOCKERR_XXX. For showing the occurrence of SOCKERR_BUSY.
 8006fe8:	697b      	ldr	r3, [r7, #20]
 8006fea:	2b00      	cmp	r3, #0
 8006fec:	dc01      	bgt.n	8006ff2 <loopback_tcps+0x1e2>
 8006fee:	697b      	ldr	r3, [r7, #20]
 8006ff0:	e078      	b.n	80070e4 <loopback_tcps+0x2d4>
                received_size = (uint16_t) ret;
 8006ff2:	697b      	ldr	r3, [r7, #20]
 8006ff4:	b21b      	sxth	r3, r3
 8006ff6:	823b      	strh	r3, [r7, #16]
                sentsize = 0;
 8006ff8:	2300      	movs	r3, #0
 8006ffa:	83fb      	strh	r3, [r7, #30]

                while(received_size != sentsize)
 8006ffc:	e01f      	b.n	800703e <loopback_tcps+0x22e>
                {
                    ret = send(sn, buf+sentsize, received_size-sentsize);
 8006ffe:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
 8007002:	683a      	ldr	r2, [r7, #0]
 8007004:	18d1      	adds	r1, r2, r3
 8007006:	f9b7 3010 	ldrsh.w	r3, [r7, #16]
 800700a:	b29a      	uxth	r2, r3
 800700c:	8bfb      	ldrh	r3, [r7, #30]
 800700e:	1ad3      	subs	r3, r2, r3
 8007010:	b29b      	uxth	r3, r3
 8007012:	b21a      	sxth	r2, r3
 8007014:	79fb      	ldrb	r3, [r7, #7]
 8007016:	4618      	mov	r0, r3
 8007018:	f000 fdb2 	bl	8007b80 <send>
 800701c:	4603      	mov	r3, r0
 800701e:	617b      	str	r3, [r7, #20]
                    if(ret < 0)
 8007020:	697b      	ldr	r3, [r7, #20]
 8007022:	2b00      	cmp	r3, #0
 8007024:	da05      	bge.n	8007032 <loopback_tcps+0x222>
                    {
                        close(sn);
 8007026:	79fb      	ldrb	r3, [r7, #7]
 8007028:	4618      	mov	r0, r3
 800702a:	f000 fc6d 	bl	8007908 <close>
                        return ret;
 800702e:	697b      	ldr	r3, [r7, #20]
 8007030:	e058      	b.n	80070e4 <loopback_tcps+0x2d4>
                    }
                    sentsize += ret; // Don't care SOCKERR_BUSY, because it is zero.
 8007032:	697b      	ldr	r3, [r7, #20]
 8007034:	b29a      	uxth	r2, r3
 8007036:	8bfb      	ldrh	r3, [r7, #30]
 8007038:	4413      	add	r3, r2
 800703a:	b29b      	uxth	r3, r3
 800703c:	83fb      	strh	r3, [r7, #30]
                while(received_size != sentsize)
 800703e:	f9b7 3010 	ldrsh.w	r3, [r7, #16]
 8007042:	f9b7 201e 	ldrsh.w	r2, [r7, #30]
 8007046:	429a      	cmp	r2, r3
 8007048:	d1d9      	bne.n	8006ffe <loopback_tcps+0x1ee>
                }
            }

            if((ret = disconnect(sn)) != SOCK_OK) return ret;
 800704a:	79fb      	ldrb	r3, [r7, #7]
 800704c:	4618      	mov	r0, r3
 800704e:	f000 fd1d 	bl	8007a8c <disconnect>
 8007052:	4603      	mov	r3, r0
 8007054:	617b      	str	r3, [r7, #20]
 8007056:	697b      	ldr	r3, [r7, #20]
 8007058:	2b01      	cmp	r3, #1
 800705a:	d03d      	beq.n	80070d8 <loopback_tcps+0x2c8>
 800705c:	697b      	ldr	r3, [r7, #20]
 800705e:	e041      	b.n	80070e4 <loopback_tcps+0x2d4>
                #ifdef _LOOPBACK_DEBUG_
                    printf("%d:Socket Closed\r\n", sn);
                #endif
            break;
        case SOCK_INIT :
            if( (ret = listen(sn)) != SOCK_OK) return ret;
 8007060:	79fb      	ldrb	r3, [r7, #7]
 8007062:	4618      	mov	r0, r3
 8007064:	f000 fcc4 	bl	80079f0 <listen>
 8007068:	4603      	mov	r3, r0
 800706a:	617b      	str	r3, [r7, #20]
 800706c:	697b      	ldr	r3, [r7, #20]
 800706e:	2b01      	cmp	r3, #1
 8007070:	d034      	beq.n	80070dc <loopback_tcps+0x2cc>
 8007072:	697b      	ldr	r3, [r7, #20]
 8007074:	e036      	b.n	80070e4 <loopback_tcps+0x2d4>
            break;
        case SOCK_CLOSED:
            #ifdef _LOOPBACK_DEBUG_
                printf("%d:TCP server loopback start\r\n",sn);
            #endif
                switch(loopback_mode)
 8007076:	79bb      	ldrb	r3, [r7, #6]
 8007078:	2b17      	cmp	r3, #23
 800707a:	d00f      	beq.n	800709c <loopback_tcps+0x28c>
 800707c:	2b17      	cmp	r3, #23
 800707e:	dc1f      	bgt.n	80070c0 <loopback_tcps+0x2b0>
 8007080:	2b02      	cmp	r3, #2
 8007082:	d002      	beq.n	800708a <loopback_tcps+0x27a>
 8007084:	2b0b      	cmp	r3, #11
 8007086:	d012      	beq.n	80070ae <loopback_tcps+0x29e>
                    break;
                case AS_IPDUAL:
                    tmp = socket(sn, Sn_MR_TCPD, port, SOCK_IO_NONBLOCK);
                    break;
                default:
                    break;
 8007088:	e01a      	b.n	80070c0 <loopback_tcps+0x2b0>
                    tmp = socket(sn, Sn_MR_TCP4, port, SOCK_IO_NONBLOCK);
 800708a:	88ba      	ldrh	r2, [r7, #4]
 800708c:	79f8      	ldrb	r0, [r7, #7]
 800708e:	2301      	movs	r3, #1
 8007090:	2101      	movs	r1, #1
 8007092:	f000 fa3b 	bl	800750c <socket>
 8007096:	4603      	mov	r3, r0
 8007098:	777b      	strb	r3, [r7, #29]
                    break;
 800709a:	e012      	b.n	80070c2 <loopback_tcps+0x2b2>
                    tmp = socket(sn, Sn_MR_TCP6, port, SOCK_IO_NONBLOCK);
 800709c:	88ba      	ldrh	r2, [r7, #4]
 800709e:	79f8      	ldrb	r0, [r7, #7]
 80070a0:	2301      	movs	r3, #1
 80070a2:	2109      	movs	r1, #9
 80070a4:	f000 fa32 	bl	800750c <socket>
 80070a8:	4603      	mov	r3, r0
 80070aa:	777b      	strb	r3, [r7, #29]
                    break;
 80070ac:	e009      	b.n	80070c2 <loopback_tcps+0x2b2>
                    tmp = socket(sn, Sn_MR_TCPD, port, SOCK_IO_NONBLOCK);
 80070ae:	88ba      	ldrh	r2, [r7, #4]
 80070b0:	79f8      	ldrb	r0, [r7, #7]
 80070b2:	2301      	movs	r3, #1
 80070b4:	210d      	movs	r1, #13
 80070b6:	f000 fa29 	bl	800750c <socket>
 80070ba:	4603      	mov	r3, r0
 80070bc:	777b      	strb	r3, [r7, #29]
                    break;
 80070be:	e000      	b.n	80070c2 <loopback_tcps+0x2b2>
                    break;
 80070c0:	bf00      	nop
                }
                if(tmp != sn)    /* reinitialize the socket */
 80070c2:	7f7a      	ldrb	r2, [r7, #29]
 80070c4:	79fb      	ldrb	r3, [r7, #7]
 80070c6:	429a      	cmp	r2, r3
 80070c8:	d00a      	beq.n	80070e0 <loopback_tcps+0x2d0>
                {
                    #ifdef _LOOPBACK_DEBUG_
                        printf("%d : Fail to create socket.\r\n",sn);
                    #endif
                    return SOCKERR_SOCKNUM;
 80070ca:	f04f 33ff 	mov.w	r3, #4294967295
 80070ce:	e009      	b.n	80070e4 <loopback_tcps+0x2d4>
                printf("%d:Socket opened[%d]\r\n",sn, getSn_SR(sn));
                sock_state[sn] = 1;
            #endif
            break;
        default:
            break;
 80070d0:	bf00      	nop
 80070d2:	e006      	b.n	80070e2 <loopback_tcps+0x2d2>
            break;
 80070d4:	bf00      	nop
 80070d6:	e004      	b.n	80070e2 <loopback_tcps+0x2d2>
            break;
 80070d8:	bf00      	nop
 80070da:	e002      	b.n	80070e2 <loopback_tcps+0x2d2>
            break;
 80070dc:	bf00      	nop
 80070de:	e000      	b.n	80070e2 <loopback_tcps+0x2d2>
            break;
 80070e0:	bf00      	nop
        }
    return 1;
 80070e2:	2301      	movs	r3, #1
}
 80070e4:	4618      	mov	r0, r3
 80070e6:	3720      	adds	r7, #32
 80070e8:	46bd      	mov	sp, r7
 80070ea:	bd80      	pop	{r7, pc}
 80070ec:	20000078 	.word	0x20000078
 80070f0:	2000007c 	.word	0x2000007c
 80070f4:	20000080 	.word	0x20000080

080070f8 <WIZCHIP_WRITE>:

#define _W6100_SPI_OP_          _WIZCHIP_SPI_VDM_OP_

//////////////////////////////////////////////////
void WIZCHIP_WRITE(uint32_t AddrSel, uint8_t wb )
{
 80070f8:	b590      	push	{r4, r7, lr}
 80070fa:	b085      	sub	sp, #20
 80070fc:	af00      	add	r7, sp, #0
 80070fe:	6078      	str	r0, [r7, #4]
 8007100:	460b      	mov	r3, r1
 8007102:	70fb      	strb	r3, [r7, #3]
   uint8_t tAD[4];
   tAD[0] = (uint8_t)((AddrSel & 0x00FF0000) >> 16);
 8007104:	687b      	ldr	r3, [r7, #4]
 8007106:	0c1b      	lsrs	r3, r3, #16
 8007108:	b2db      	uxtb	r3, r3
 800710a:	733b      	strb	r3, [r7, #12]
   tAD[1] = (uint8_t)((AddrSel & 0x0000FF00) >> 8);
 800710c:	687b      	ldr	r3, [r7, #4]
 800710e:	0a1b      	lsrs	r3, r3, #8
 8007110:	b2db      	uxtb	r3, r3
 8007112:	737b      	strb	r3, [r7, #13]
   tAD[2] = (uint8_t)(AddrSel & 0x000000ff);
 8007114:	687b      	ldr	r3, [r7, #4]
 8007116:	b2db      	uxtb	r3, r3
 8007118:	73bb      	strb	r3, [r7, #14]
   tAD[3] = wb;
 800711a:	78fb      	ldrb	r3, [r7, #3]
 800711c:	73fb      	strb	r3, [r7, #15]

   WIZCHIP_CRITICAL_ENTER();
 800711e:	4b0c      	ldr	r3, [pc, #48]	; (8007150 <WIZCHIP_WRITE+0x58>)
 8007120:	689b      	ldr	r3, [r3, #8]
 8007122:	4798      	blx	r3
   WIZCHIP.CS._s_e_l_e_c_t_();
 8007124:	4b0a      	ldr	r3, [pc, #40]	; (8007150 <WIZCHIP_WRITE+0x58>)
 8007126:	691b      	ldr	r3, [r3, #16]
 8007128:	4798      	blx	r3
#if( (_WIZCHIP_IO_MODE_ == _WIZCHIP_IO_MODE_SPI_VDM_))
   tAD[2] |= (_W6100_SPI_WRITE_ | _W6100_SPI_OP_);
   WIZCHIP.IF.SPI._write_byte_buf(tAD, 4);

#elif ( (_WIZCHIP_IO_MODE_ == _WIZCHIP_IO_MODE_BUS_INDIR_) )
   WIZCHIP.IF.BUS._write_data_buf(IDM_AR0, tAD, 4, 1);
 800712a:	4b09      	ldr	r3, [pc, #36]	; (8007150 <WIZCHIP_WRITE+0x58>)
 800712c:	6a5c      	ldr	r4, [r3, #36]	; 0x24
 800712e:	f107 010c 	add.w	r1, r7, #12
 8007132:	2301      	movs	r3, #1
 8007134:	2204      	movs	r2, #4
 8007136:	f04f 40c0 	mov.w	r0, #1610612736	; 0x60000000
 800713a:	47a0      	blx	r4
#else
   #error "Unknown _WIZCHIP_IO_MODE_ in W5100. !!!"
#endif

   WIZCHIP.CS._d_e_s_e_l_e_c_t_();
 800713c:	4b04      	ldr	r3, [pc, #16]	; (8007150 <WIZCHIP_WRITE+0x58>)
 800713e:	695b      	ldr	r3, [r3, #20]
 8007140:	4798      	blx	r3
   WIZCHIP_CRITICAL_EXIT();
 8007142:	4b03      	ldr	r3, [pc, #12]	; (8007150 <WIZCHIP_WRITE+0x58>)
 8007144:	68db      	ldr	r3, [r3, #12]
 8007146:	4798      	blx	r3
}
 8007148:	bf00      	nop
 800714a:	3714      	adds	r7, #20
 800714c:	46bd      	mov	sp, r7
 800714e:	bd90      	pop	{r4, r7, pc}
 8007150:	20000088 	.word	0x20000088

08007154 <WIZCHIP_READ>:

uint8_t  WIZCHIP_READ(uint32_t AddrSel)
{
 8007154:	b590      	push	{r4, r7, lr}
 8007156:	b085      	sub	sp, #20
 8007158:	af00      	add	r7, sp, #0
 800715a:	6078      	str	r0, [r7, #4]
   uint8_t ret;
   uint8_t tAD[3];
   tAD[0] = (uint8_t)((AddrSel & 0x00FF0000) >> 16);
 800715c:	687b      	ldr	r3, [r7, #4]
 800715e:	0c1b      	lsrs	r3, r3, #16
 8007160:	b2db      	uxtb	r3, r3
 8007162:	733b      	strb	r3, [r7, #12]
   tAD[1] = (uint8_t)((AddrSel & 0x0000FF00) >> 8);
 8007164:	687b      	ldr	r3, [r7, #4]
 8007166:	0a1b      	lsrs	r3, r3, #8
 8007168:	b2db      	uxtb	r3, r3
 800716a:	737b      	strb	r3, [r7, #13]
   tAD[2] = (uint8_t)(AddrSel & 0x000000ff);
 800716c:	687b      	ldr	r3, [r7, #4]
 800716e:	b2db      	uxtb	r3, r3
 8007170:	73bb      	strb	r3, [r7, #14]

   WIZCHIP_CRITICAL_ENTER();
 8007172:	4b10      	ldr	r3, [pc, #64]	; (80071b4 <WIZCHIP_READ+0x60>)
 8007174:	689b      	ldr	r3, [r3, #8]
 8007176:	4798      	blx	r3
   WIZCHIP.CS._s_e_l_e_c_t_();
 8007178:	4b0e      	ldr	r3, [pc, #56]	; (80071b4 <WIZCHIP_READ+0x60>)
 800717a:	691b      	ldr	r3, [r3, #16]
 800717c:	4798      	blx	r3
#if( (_WIZCHIP_IO_MODE_ ==  _WIZCHIP_IO_MODE_SPI_VDM_))
   tAD[2] |= (_W6100_SPI_READ_ | _W6100_SPI_OP_);
   WIZCHIP.IF.SPI._write_byte_buf(tAD, 3);
   ret = WIZCHIP.IF.SPI._read_byte();
#elif ( (_WIZCHIP_IO_MODE_ == _WIZCHIP_IO_MODE_BUS_INDIR_) )
   WIZCHIP.IF.BUS._write_data_buf(IDM_AR0,tAD,3,1);
 800717e:	4b0d      	ldr	r3, [pc, #52]	; (80071b4 <WIZCHIP_READ+0x60>)
 8007180:	6a5c      	ldr	r4, [r3, #36]	; 0x24
 8007182:	f107 010c 	add.w	r1, r7, #12
 8007186:	2301      	movs	r3, #1
 8007188:	2203      	movs	r2, #3
 800718a:	f04f 40c0 	mov.w	r0, #1610612736	; 0x60000000
 800718e:	47a0      	blx	r4
   ret = WIZCHIP.IF.BUS._read_data(IDM_DR);
 8007190:	4b08      	ldr	r3, [pc, #32]	; (80071b4 <WIZCHIP_READ+0x60>)
 8007192:	699b      	ldr	r3, [r3, #24]
 8007194:	4808      	ldr	r0, [pc, #32]	; (80071b8 <WIZCHIP_READ+0x64>)
 8007196:	4798      	blx	r3
 8007198:	4603      	mov	r3, r0
 800719a:	73fb      	strb	r3, [r7, #15]
#else
   #error "Unknown _WIZCHIP_IO_MODE_ in W6100. !!!"   
#endif

   WIZCHIP.CS._d_e_s_e_l_e_c_t_();
 800719c:	4b05      	ldr	r3, [pc, #20]	; (80071b4 <WIZCHIP_READ+0x60>)
 800719e:	695b      	ldr	r3, [r3, #20]
 80071a0:	4798      	blx	r3
   WIZCHIP_CRITICAL_EXIT();
 80071a2:	4b04      	ldr	r3, [pc, #16]	; (80071b4 <WIZCHIP_READ+0x60>)
 80071a4:	68db      	ldr	r3, [r3, #12]
 80071a6:	4798      	blx	r3
   return ret;
 80071a8:	7bfb      	ldrb	r3, [r7, #15]
}
 80071aa:	4618      	mov	r0, r3
 80071ac:	3714      	adds	r7, #20
 80071ae:	46bd      	mov	sp, r7
 80071b0:	bd90      	pop	{r4, r7, pc}
 80071b2:	bf00      	nop
 80071b4:	20000088 	.word	0x20000088
 80071b8:	60000003 	.word	0x60000003

080071bc <WIZCHIP_WRITE_BUF>:

void WIZCHIP_WRITE_BUF(uint32_t AddrSel, uint8_t* pBuf, datasize_t len)
{
 80071bc:	b590      	push	{r4, r7, lr}
 80071be:	b087      	sub	sp, #28
 80071c0:	af00      	add	r7, sp, #0
 80071c2:	60f8      	str	r0, [r7, #12]
 80071c4:	60b9      	str	r1, [r7, #8]
 80071c6:	4613      	mov	r3, r2
 80071c8:	80fb      	strh	r3, [r7, #6]
   uint8_t tAD[3];
   tAD[0] = (uint8_t)((AddrSel & 0x00FF0000) >> 16);
 80071ca:	68fb      	ldr	r3, [r7, #12]
 80071cc:	0c1b      	lsrs	r3, r3, #16
 80071ce:	b2db      	uxtb	r3, r3
 80071d0:	753b      	strb	r3, [r7, #20]
   tAD[1] = (uint8_t)((AddrSel & 0x0000FF00) >> 8);
 80071d2:	68fb      	ldr	r3, [r7, #12]
 80071d4:	0a1b      	lsrs	r3, r3, #8
 80071d6:	b2db      	uxtb	r3, r3
 80071d8:	757b      	strb	r3, [r7, #21]
   tAD[2] = (uint8_t)(AddrSel & 0x000000ff);
 80071da:	68fb      	ldr	r3, [r7, #12]
 80071dc:	b2db      	uxtb	r3, r3
 80071de:	75bb      	strb	r3, [r7, #22]


   WIZCHIP_CRITICAL_ENTER();
 80071e0:	4b10      	ldr	r3, [pc, #64]	; (8007224 <WIZCHIP_WRITE_BUF+0x68>)
 80071e2:	689b      	ldr	r3, [r3, #8]
 80071e4:	4798      	blx	r3
   WIZCHIP.CS._s_e_l_e_c_t_();
 80071e6:	4b0f      	ldr	r3, [pc, #60]	; (8007224 <WIZCHIP_WRITE_BUF+0x68>)
 80071e8:	691b      	ldr	r3, [r3, #16]
 80071ea:	4798      	blx	r3

   WIZCHIP.IF.SPI._write_byte_buf(tAD, 3);
   WIZCHIP.IF.SPI._write_byte_buf(pBuf, len);

#elif ( (_WIZCHIP_IO_MODE_ == _WIZCHIP_IO_MODE_BUS_INDIR_) )
   WIZCHIP.IF.BUS._write_data_buf(IDM_AR0,tAD, 3, 1);
 80071ec:	4b0d      	ldr	r3, [pc, #52]	; (8007224 <WIZCHIP_WRITE_BUF+0x68>)
 80071ee:	6a5c      	ldr	r4, [r3, #36]	; 0x24
 80071f0:	f107 0114 	add.w	r1, r7, #20
 80071f4:	2301      	movs	r3, #1
 80071f6:	2203      	movs	r2, #3
 80071f8:	f04f 40c0 	mov.w	r0, #1610612736	; 0x60000000
 80071fc:	47a0      	blx	r4
   WIZCHIP.IF.BUS._write_data_buf(IDM_DR,pBuf,len, 0);
 80071fe:	4b09      	ldr	r3, [pc, #36]	; (8007224 <WIZCHIP_WRITE_BUF+0x68>)
 8007200:	6a5c      	ldr	r4, [r3, #36]	; 0x24
 8007202:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 8007206:	2300      	movs	r3, #0
 8007208:	68b9      	ldr	r1, [r7, #8]
 800720a:	4807      	ldr	r0, [pc, #28]	; (8007228 <WIZCHIP_WRITE_BUF+0x6c>)
 800720c:	47a0      	blx	r4
#else
   #error "Unknown _WIZCHIP_IO_MODE_ in W6100. !!!!"
#endif

   WIZCHIP.CS._d_e_s_e_l_e_c_t_();
 800720e:	4b05      	ldr	r3, [pc, #20]	; (8007224 <WIZCHIP_WRITE_BUF+0x68>)
 8007210:	695b      	ldr	r3, [r3, #20]
 8007212:	4798      	blx	r3
   WIZCHIP_CRITICAL_EXIT();
 8007214:	4b03      	ldr	r3, [pc, #12]	; (8007224 <WIZCHIP_WRITE_BUF+0x68>)
 8007216:	68db      	ldr	r3, [r3, #12]
 8007218:	4798      	blx	r3
}
 800721a:	bf00      	nop
 800721c:	371c      	adds	r7, #28
 800721e:	46bd      	mov	sp, r7
 8007220:	bd90      	pop	{r4, r7, pc}
 8007222:	bf00      	nop
 8007224:	20000088 	.word	0x20000088
 8007228:	60000003 	.word	0x60000003

0800722c <WIZCHIP_READ_BUF>:

void WIZCHIP_READ_BUF (uint32_t AddrSel, uint8_t* pBuf, datasize_t len)
{
 800722c:	b590      	push	{r4, r7, lr}
 800722e:	b087      	sub	sp, #28
 8007230:	af00      	add	r7, sp, #0
 8007232:	60f8      	str	r0, [r7, #12]
 8007234:	60b9      	str	r1, [r7, #8]
 8007236:	4613      	mov	r3, r2
 8007238:	80fb      	strh	r3, [r7, #6]
   uint8_t tAD[3];
   tAD[0] = (uint8_t)((AddrSel & 0x00FF0000) >> 16);
 800723a:	68fb      	ldr	r3, [r7, #12]
 800723c:	0c1b      	lsrs	r3, r3, #16
 800723e:	b2db      	uxtb	r3, r3
 8007240:	753b      	strb	r3, [r7, #20]
   tAD[1] = (uint8_t)((AddrSel & 0x0000FF00) >> 8);
 8007242:	68fb      	ldr	r3, [r7, #12]
 8007244:	0a1b      	lsrs	r3, r3, #8
 8007246:	b2db      	uxtb	r3, r3
 8007248:	757b      	strb	r3, [r7, #21]
   tAD[2] = (uint8_t)(AddrSel & 0x000000ff);
 800724a:	68fb      	ldr	r3, [r7, #12]
 800724c:	b2db      	uxtb	r3, r3
 800724e:	75bb      	strb	r3, [r7, #22]

   WIZCHIP_CRITICAL_ENTER();
 8007250:	4b10      	ldr	r3, [pc, #64]	; (8007294 <WIZCHIP_READ_BUF+0x68>)
 8007252:	689b      	ldr	r3, [r3, #8]
 8007254:	4798      	blx	r3
   WIZCHIP.CS._s_e_l_e_c_t_();
 8007256:	4b0f      	ldr	r3, [pc, #60]	; (8007294 <WIZCHIP_READ_BUF+0x68>)
 8007258:	691b      	ldr	r3, [r3, #16]
 800725a:	4798      	blx	r3
#if((_WIZCHIP_IO_MODE_ == _WIZCHIP_IO_MODE_SPI_VDM_))
   tAD[2] |= (_W6100_SPI_READ_ | _W6100_SPI_OP_);
   WIZCHIP.IF.SPI._write_byte_buf(tAD,3);
   WIZCHIP.IF.SPI._read_byte_buf(pBuf, len);
#elif ( (_WIZCHIP_IO_MODE_ == _WIZCHIP_IO_MODE_BUS_INDIR_) )
   WIZCHIP.IF.BUS._write_data_buf(IDM_AR0,tAD,3,1);
 800725c:	4b0d      	ldr	r3, [pc, #52]	; (8007294 <WIZCHIP_READ_BUF+0x68>)
 800725e:	6a5c      	ldr	r4, [r3, #36]	; 0x24
 8007260:	f107 0114 	add.w	r1, r7, #20
 8007264:	2301      	movs	r3, #1
 8007266:	2203      	movs	r2, #3
 8007268:	f04f 40c0 	mov.w	r0, #1610612736	; 0x60000000
 800726c:	47a0      	blx	r4
   WIZCHIP.IF.BUS._read_data_buf(IDM_DR,pBuf,len,0);
 800726e:	4b09      	ldr	r3, [pc, #36]	; (8007294 <WIZCHIP_READ_BUF+0x68>)
 8007270:	6a1c      	ldr	r4, [r3, #32]
 8007272:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 8007276:	2300      	movs	r3, #0
 8007278:	68b9      	ldr	r1, [r7, #8]
 800727a:	4807      	ldr	r0, [pc, #28]	; (8007298 <WIZCHIP_READ_BUF+0x6c>)
 800727c:	47a0      	blx	r4
#else
   #error "Unknown _WIZCHIP_IO_MODE_ in W6100. !!!!"
#endif
   WIZCHIP.CS._d_e_s_e_l_e_c_t_();
 800727e:	4b05      	ldr	r3, [pc, #20]	; (8007294 <WIZCHIP_READ_BUF+0x68>)
 8007280:	695b      	ldr	r3, [r3, #20]
 8007282:	4798      	blx	r3
   WIZCHIP_CRITICAL_EXIT();
 8007284:	4b03      	ldr	r3, [pc, #12]	; (8007294 <WIZCHIP_READ_BUF+0x68>)
 8007286:	68db      	ldr	r3, [r3, #12]
 8007288:	4798      	blx	r3
}
 800728a:	bf00      	nop
 800728c:	371c      	adds	r7, #28
 800728e:	46bd      	mov	sp, r7
 8007290:	bd90      	pop	{r4, r7, pc}
 8007292:	bf00      	nop
 8007294:	20000088 	.word	0x20000088
 8007298:	60000003 	.word	0x60000003

0800729c <getSn_TX_FSR>:

datasize_t getSn_TX_FSR(uint8_t sn)
{
 800729c:	b590      	push	{r4, r7, lr}
 800729e:	b085      	sub	sp, #20
 80072a0:	af00      	add	r7, sp, #0
 80072a2:	4603      	mov	r3, r0
 80072a4:	71fb      	strb	r3, [r7, #7]
   datasize_t prev_val=-1,val=0;
 80072a6:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80072aa:	81bb      	strh	r3, [r7, #12]
 80072ac:	2300      	movs	r3, #0
 80072ae:	81fb      	strh	r3, [r7, #14]
   do
   {
      prev_val = val;
 80072b0:	89fb      	ldrh	r3, [r7, #14]
 80072b2:	81bb      	strh	r3, [r7, #12]
      val = WIZCHIP_READ(_Sn_TX_FSR_(sn));
 80072b4:	79fb      	ldrb	r3, [r7, #7]
 80072b6:	009b      	lsls	r3, r3, #2
 80072b8:	3301      	adds	r3, #1
 80072ba:	00da      	lsls	r2, r3, #3
 80072bc:	4b11      	ldr	r3, [pc, #68]	; (8007304 <getSn_TX_FSR+0x68>)
 80072be:	4413      	add	r3, r2
 80072c0:	4618      	mov	r0, r3
 80072c2:	f7ff ff47 	bl	8007154 <WIZCHIP_READ>
 80072c6:	4603      	mov	r3, r0
 80072c8:	81fb      	strh	r3, [r7, #14]
      val = (val << 8) + WIZCHIP_READ(WIZCHIP_OFFSET_INC(_Sn_TX_FSR_(sn),1));
 80072ca:	89fb      	ldrh	r3, [r7, #14]
 80072cc:	021b      	lsls	r3, r3, #8
 80072ce:	b29c      	uxth	r4, r3
 80072d0:	79fb      	ldrb	r3, [r7, #7]
 80072d2:	009b      	lsls	r3, r3, #2
 80072d4:	3301      	adds	r3, #1
 80072d6:	00da      	lsls	r2, r3, #3
 80072d8:	4b0b      	ldr	r3, [pc, #44]	; (8007308 <getSn_TX_FSR+0x6c>)
 80072da:	4413      	add	r3, r2
 80072dc:	4618      	mov	r0, r3
 80072de:	f7ff ff39 	bl	8007154 <WIZCHIP_READ>
 80072e2:	4603      	mov	r3, r0
 80072e4:	b29b      	uxth	r3, r3
 80072e6:	4423      	add	r3, r4
 80072e8:	b29b      	uxth	r3, r3
 80072ea:	81fb      	strh	r3, [r7, #14]
   }while (val != prev_val);
 80072ec:	f9b7 200e 	ldrsh.w	r2, [r7, #14]
 80072f0:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 80072f4:	429a      	cmp	r2, r3
 80072f6:	d1db      	bne.n	80072b0 <getSn_TX_FSR+0x14>
   return val;
 80072f8:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
}
 80072fc:	4618      	mov	r0, r3
 80072fe:	3714      	adds	r7, #20
 8007300:	46bd      	mov	sp, r7
 8007302:	bd90      	pop	{r4, r7, pc}
 8007304:	60020400 	.word	0x60020400
 8007308:	60020500 	.word	0x60020500

0800730c <getSn_RX_RSR>:

datasize_t getSn_RX_RSR(uint8_t sn)
{
 800730c:	b590      	push	{r4, r7, lr}
 800730e:	b085      	sub	sp, #20
 8007310:	af00      	add	r7, sp, #0
 8007312:	4603      	mov	r3, r0
 8007314:	71fb      	strb	r3, [r7, #7]
   datasize_t prev_val=-1,val=0;
 8007316:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800731a:	81bb      	strh	r3, [r7, #12]
 800731c:	2300      	movs	r3, #0
 800731e:	81fb      	strh	r3, [r7, #14]
   do
   {
      prev_val = val;
 8007320:	89fb      	ldrh	r3, [r7, #14]
 8007322:	81bb      	strh	r3, [r7, #12]
      val = WIZCHIP_READ(_Sn_RX_RSR_(sn));
 8007324:	79fb      	ldrb	r3, [r7, #7]
 8007326:	009b      	lsls	r3, r3, #2
 8007328:	3301      	adds	r3, #1
 800732a:	00da      	lsls	r2, r3, #3
 800732c:	4b11      	ldr	r3, [pc, #68]	; (8007374 <getSn_RX_RSR+0x68>)
 800732e:	4413      	add	r3, r2
 8007330:	4618      	mov	r0, r3
 8007332:	f7ff ff0f 	bl	8007154 <WIZCHIP_READ>
 8007336:	4603      	mov	r3, r0
 8007338:	81fb      	strh	r3, [r7, #14]
      val = (val << 8) + WIZCHIP_READ(WIZCHIP_OFFSET_INC(_Sn_RX_RSR_(sn),1));
 800733a:	89fb      	ldrh	r3, [r7, #14]
 800733c:	021b      	lsls	r3, r3, #8
 800733e:	b29c      	uxth	r4, r3
 8007340:	79fb      	ldrb	r3, [r7, #7]
 8007342:	009b      	lsls	r3, r3, #2
 8007344:	3301      	adds	r3, #1
 8007346:	00da      	lsls	r2, r3, #3
 8007348:	4b0b      	ldr	r3, [pc, #44]	; (8007378 <getSn_RX_RSR+0x6c>)
 800734a:	4413      	add	r3, r2
 800734c:	4618      	mov	r0, r3
 800734e:	f7ff ff01 	bl	8007154 <WIZCHIP_READ>
 8007352:	4603      	mov	r3, r0
 8007354:	b29b      	uxth	r3, r3
 8007356:	4423      	add	r3, r4
 8007358:	b29b      	uxth	r3, r3
 800735a:	81fb      	strh	r3, [r7, #14]
   }while (val != prev_val);
 800735c:	f9b7 200e 	ldrsh.w	r2, [r7, #14]
 8007360:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 8007364:	429a      	cmp	r2, r3
 8007366:	d1db      	bne.n	8007320 <getSn_RX_RSR+0x14>
   return val;
 8007368:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
}
 800736c:	4618      	mov	r0, r3
 800736e:	3714      	adds	r7, #20
 8007370:	46bd      	mov	sp, r7
 8007372:	bd90      	pop	{r4, r7, pc}
 8007374:	60022400 	.word	0x60022400
 8007378:	60022500 	.word	0x60022500

0800737c <wiz_send_data>:

void wiz_send_data(uint8_t sn, uint8_t *wizdata, datasize_t len)
{
 800737c:	b590      	push	{r4, r7, lr}
 800737e:	b085      	sub	sp, #20
 8007380:	af00      	add	r7, sp, #0
 8007382:	4603      	mov	r3, r0
 8007384:	6039      	str	r1, [r7, #0]
 8007386:	71fb      	strb	r3, [r7, #7]
 8007388:	4613      	mov	r3, r2
 800738a:	80bb      	strh	r3, [r7, #4]
   datasize_t ptr = 0;
 800738c:	2300      	movs	r3, #0
 800738e:	81fb      	strh	r3, [r7, #14]
   uint32_t addrsel = 0;
 8007390:	2300      	movs	r3, #0
 8007392:	60bb      	str	r3, [r7, #8]
   ptr = getSn_TX_WR(sn);
 8007394:	79fb      	ldrb	r3, [r7, #7]
 8007396:	009b      	lsls	r3, r3, #2
 8007398:	3301      	adds	r3, #1
 800739a:	00da      	lsls	r2, r3, #3
 800739c:	4b26      	ldr	r3, [pc, #152]	; (8007438 <wiz_send_data+0xbc>)
 800739e:	4413      	add	r3, r2
 80073a0:	4618      	mov	r0, r3
 80073a2:	f7ff fed7 	bl	8007154 <WIZCHIP_READ>
 80073a6:	4603      	mov	r3, r0
 80073a8:	b29b      	uxth	r3, r3
 80073aa:	021b      	lsls	r3, r3, #8
 80073ac:	b29c      	uxth	r4, r3
 80073ae:	79fb      	ldrb	r3, [r7, #7]
 80073b0:	009b      	lsls	r3, r3, #2
 80073b2:	3301      	adds	r3, #1
 80073b4:	00da      	lsls	r2, r3, #3
 80073b6:	4b21      	ldr	r3, [pc, #132]	; (800743c <wiz_send_data+0xc0>)
 80073b8:	4413      	add	r3, r2
 80073ba:	4618      	mov	r0, r3
 80073bc:	f7ff feca 	bl	8007154 <WIZCHIP_READ>
 80073c0:	4603      	mov	r3, r0
 80073c2:	b29b      	uxth	r3, r3
 80073c4:	4423      	add	r3, r4
 80073c6:	b29b      	uxth	r3, r3
 80073c8:	81fb      	strh	r3, [r7, #14]
   addrsel = ((uint32_t)ptr << 8) + WIZCHIP_TXBUF_BLOCK(sn);
 80073ca:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 80073ce:	021b      	lsls	r3, r3, #8
 80073d0:	79fa      	ldrb	r2, [r7, #7]
 80073d2:	0092      	lsls	r2, r2, #2
 80073d4:	3202      	adds	r2, #2
 80073d6:	00d2      	lsls	r2, r2, #3
 80073d8:	4413      	add	r3, r2
 80073da:	60bb      	str	r3, [r7, #8]
   WIZCHIP_WRITE_BUF(addrsel,wizdata, len);
 80073dc:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 80073e0:	461a      	mov	r2, r3
 80073e2:	6839      	ldr	r1, [r7, #0]
 80073e4:	68b8      	ldr	r0, [r7, #8]
 80073e6:	f7ff fee9 	bl	80071bc <WIZCHIP_WRITE_BUF>
   ptr += len;
 80073ea:	89fa      	ldrh	r2, [r7, #14]
 80073ec:	88bb      	ldrh	r3, [r7, #4]
 80073ee:	4413      	add	r3, r2
 80073f0:	b29b      	uxth	r3, r3
 80073f2:	81fb      	strh	r3, [r7, #14]
   setSn_TX_WR(sn,ptr);
 80073f4:	79fb      	ldrb	r3, [r7, #7]
 80073f6:	009b      	lsls	r3, r3, #2
 80073f8:	3301      	adds	r3, #1
 80073fa:	00da      	lsls	r2, r3, #3
 80073fc:	4b0e      	ldr	r3, [pc, #56]	; (8007438 <wiz_send_data+0xbc>)
 80073fe:	4413      	add	r3, r2
 8007400:	461a      	mov	r2, r3
 8007402:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8007406:	121b      	asrs	r3, r3, #8
 8007408:	b21b      	sxth	r3, r3
 800740a:	b2db      	uxtb	r3, r3
 800740c:	4619      	mov	r1, r3
 800740e:	4610      	mov	r0, r2
 8007410:	f7ff fe72 	bl	80070f8 <WIZCHIP_WRITE>
 8007414:	79fb      	ldrb	r3, [r7, #7]
 8007416:	009b      	lsls	r3, r3, #2
 8007418:	3301      	adds	r3, #1
 800741a:	00da      	lsls	r2, r3, #3
 800741c:	4b07      	ldr	r3, [pc, #28]	; (800743c <wiz_send_data+0xc0>)
 800741e:	4413      	add	r3, r2
 8007420:	461a      	mov	r2, r3
 8007422:	89fb      	ldrh	r3, [r7, #14]
 8007424:	b2db      	uxtb	r3, r3
 8007426:	4619      	mov	r1, r3
 8007428:	4610      	mov	r0, r2
 800742a:	f7ff fe65 	bl	80070f8 <WIZCHIP_WRITE>
}
 800742e:	bf00      	nop
 8007430:	3714      	adds	r7, #20
 8007432:	46bd      	mov	sp, r7
 8007434:	bd90      	pop	{r4, r7, pc}
 8007436:	bf00      	nop
 8007438:	60020c00 	.word	0x60020c00
 800743c:	60020d00 	.word	0x60020d00

08007440 <wiz_recv_data>:

void wiz_recv_data(uint8_t sn, uint8_t *wizdata, datasize_t len)
{
 8007440:	b590      	push	{r4, r7, lr}
 8007442:	b085      	sub	sp, #20
 8007444:	af00      	add	r7, sp, #0
 8007446:	4603      	mov	r3, r0
 8007448:	6039      	str	r1, [r7, #0]
 800744a:	71fb      	strb	r3, [r7, #7]
 800744c:	4613      	mov	r3, r2
 800744e:	80bb      	strh	r3, [r7, #4]
   datasize_t ptr = 0;
 8007450:	2300      	movs	r3, #0
 8007452:	81fb      	strh	r3, [r7, #14]
   uint32_t addrsel = 0;
 8007454:	2300      	movs	r3, #0
 8007456:	60bb      	str	r3, [r7, #8]
   if(len == 0) return;
 8007458:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 800745c:	2b00      	cmp	r3, #0
 800745e:	d04d      	beq.n	80074fc <wiz_recv_data+0xbc>
   ptr = getSn_RX_RD(sn);
 8007460:	79fb      	ldrb	r3, [r7, #7]
 8007462:	009b      	lsls	r3, r3, #2
 8007464:	3301      	adds	r3, #1
 8007466:	00da      	lsls	r2, r3, #3
 8007468:	4b26      	ldr	r3, [pc, #152]	; (8007504 <wiz_recv_data+0xc4>)
 800746a:	4413      	add	r3, r2
 800746c:	4618      	mov	r0, r3
 800746e:	f7ff fe71 	bl	8007154 <WIZCHIP_READ>
 8007472:	4603      	mov	r3, r0
 8007474:	b29b      	uxth	r3, r3
 8007476:	021b      	lsls	r3, r3, #8
 8007478:	b29c      	uxth	r4, r3
 800747a:	79fb      	ldrb	r3, [r7, #7]
 800747c:	009b      	lsls	r3, r3, #2
 800747e:	3301      	adds	r3, #1
 8007480:	00da      	lsls	r2, r3, #3
 8007482:	4b21      	ldr	r3, [pc, #132]	; (8007508 <wiz_recv_data+0xc8>)
 8007484:	4413      	add	r3, r2
 8007486:	4618      	mov	r0, r3
 8007488:	f7ff fe64 	bl	8007154 <WIZCHIP_READ>
 800748c:	4603      	mov	r3, r0
 800748e:	b29b      	uxth	r3, r3
 8007490:	4423      	add	r3, r4
 8007492:	b29b      	uxth	r3, r3
 8007494:	81fb      	strh	r3, [r7, #14]
   addrsel = ((uint32_t)ptr << 8) + WIZCHIP_RXBUF_BLOCK(sn);
 8007496:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 800749a:	021b      	lsls	r3, r3, #8
 800749c:	79fa      	ldrb	r2, [r7, #7]
 800749e:	0092      	lsls	r2, r2, #2
 80074a0:	3203      	adds	r2, #3
 80074a2:	00d2      	lsls	r2, r2, #3
 80074a4:	4413      	add	r3, r2
 80074a6:	60bb      	str	r3, [r7, #8]
   WIZCHIP_READ_BUF(addrsel, wizdata, len);
 80074a8:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 80074ac:	461a      	mov	r2, r3
 80074ae:	6839      	ldr	r1, [r7, #0]
 80074b0:	68b8      	ldr	r0, [r7, #8]
 80074b2:	f7ff febb 	bl	800722c <WIZCHIP_READ_BUF>
   ptr += len;
 80074b6:	89fa      	ldrh	r2, [r7, #14]
 80074b8:	88bb      	ldrh	r3, [r7, #4]
 80074ba:	4413      	add	r3, r2
 80074bc:	b29b      	uxth	r3, r3
 80074be:	81fb      	strh	r3, [r7, #14]
   setSn_RX_RD(sn,ptr);
 80074c0:	79fb      	ldrb	r3, [r7, #7]
 80074c2:	009b      	lsls	r3, r3, #2
 80074c4:	3301      	adds	r3, #1
 80074c6:	00da      	lsls	r2, r3, #3
 80074c8:	4b0e      	ldr	r3, [pc, #56]	; (8007504 <wiz_recv_data+0xc4>)
 80074ca:	4413      	add	r3, r2
 80074cc:	461a      	mov	r2, r3
 80074ce:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 80074d2:	121b      	asrs	r3, r3, #8
 80074d4:	b21b      	sxth	r3, r3
 80074d6:	b2db      	uxtb	r3, r3
 80074d8:	4619      	mov	r1, r3
 80074da:	4610      	mov	r0, r2
 80074dc:	f7ff fe0c 	bl	80070f8 <WIZCHIP_WRITE>
 80074e0:	79fb      	ldrb	r3, [r7, #7]
 80074e2:	009b      	lsls	r3, r3, #2
 80074e4:	3301      	adds	r3, #1
 80074e6:	00da      	lsls	r2, r3, #3
 80074e8:	4b07      	ldr	r3, [pc, #28]	; (8007508 <wiz_recv_data+0xc8>)
 80074ea:	4413      	add	r3, r2
 80074ec:	461a      	mov	r2, r3
 80074ee:	89fb      	ldrh	r3, [r7, #14]
 80074f0:	b2db      	uxtb	r3, r3
 80074f2:	4619      	mov	r1, r3
 80074f4:	4610      	mov	r0, r2
 80074f6:	f7ff fdff 	bl	80070f8 <WIZCHIP_WRITE>
 80074fa:	e000      	b.n	80074fe <wiz_recv_data+0xbe>
   if(len == 0) return;
 80074fc:	bf00      	nop
}
 80074fe:	3714      	adds	r7, #20
 8007500:	46bd      	mov	sp, r7
 8007502:	bd90      	pop	{r4, r7, pc}
 8007504:	60022800 	.word	0x60022800
 8007508:	60022900 	.word	0x60022900

0800750c <socket>:
   }while(0);



int8_t socket(uint8_t sn, uint8_t protocol, uint16_t port, uint8_t flag)
{ 
 800750c:	b590      	push	{r4, r7, lr}
 800750e:	b08d      	sub	sp, #52	; 0x34
 8007510:	af00      	add	r7, sp, #0
 8007512:	4604      	mov	r4, r0
 8007514:	4608      	mov	r0, r1
 8007516:	4611      	mov	r1, r2
 8007518:	461a      	mov	r2, r3
 800751a:	4623      	mov	r3, r4
 800751c:	71fb      	strb	r3, [r7, #7]
 800751e:	4603      	mov	r3, r0
 8007520:	71bb      	strb	r3, [r7, #6]
 8007522:	460b      	mov	r3, r1
 8007524:	80bb      	strh	r3, [r7, #4]
 8007526:	4613      	mov	r3, r2
 8007528:	70fb      	strb	r3, [r7, #3]
   uint8_t taddr[16];
   uint16_t local_port=0;
 800752a:	2300      	movs	r3, #0
 800752c:	83fb      	strh	r3, [r7, #30]
   CHECK_SOCKNUM(); 
 800752e:	79fb      	ldrb	r3, [r7, #7]
 8007530:	2b07      	cmp	r3, #7
 8007532:	d902      	bls.n	800753a <socket+0x2e>
 8007534:	f04f 33ff 	mov.w	r3, #4294967295
 8007538:	e1ce      	b.n	80078d8 <socket+0x3cc>
   switch (protocol & 0x0F)
 800753a:	79bb      	ldrb	r3, [r7, #6]
 800753c:	f003 030f 	and.w	r3, r3, #15
 8007540:	3b01      	subs	r3, #1
 8007542:	2b0d      	cmp	r3, #13
 8007544:	f200 80bc 	bhi.w	80076c0 <socket+0x1b4>
 8007548:	a201      	add	r2, pc, #4	; (adr r2, 8007550 <socket+0x44>)
 800754a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800754e:	bf00      	nop
 8007550:	08007589 	.word	0x08007589
 8007554:	080076c7 	.word	0x080076c7
 8007558:	080076c7 	.word	0x080076c7
 800755c:	080076c1 	.word	0x080076c1
 8007560:	080076c1 	.word	0x080076c1
 8007564:	080076c1 	.word	0x080076c1
 8007568:	080076c7 	.word	0x080076c7
 800756c:	080076c1 	.word	0x080076c1
 8007570:	080075d7 	.word	0x080075d7
 8007574:	080076c7 	.word	0x080076c7
 8007578:	080076c7 	.word	0x080076c7
 800757c:	080076c1 	.word	0x080076c1
 8007580:	08007625 	.word	0x08007625
 8007584:	080076c7 	.word	0x080076c7
   {
      case Sn_MR_TCP4 :
         getSIPR(taddr);
 8007588:	f107 030c 	add.w	r3, r7, #12
 800758c:	2204      	movs	r2, #4
 800758e:	4619      	mov	r1, r3
 8007590:	4875      	ldr	r0, [pc, #468]	; (8007768 <socket+0x25c>)
 8007592:	f7ff fe4b 	bl	800722c <WIZCHIP_READ_BUF>
         CHECK_IPZERO(taddr, 4);
 8007596:	2300      	movs	r3, #0
 8007598:	85fb      	strh	r3, [r7, #46]	; 0x2e
 800759a:	2300      	movs	r3, #0
 800759c:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d
 80075a0:	e00f      	b.n	80075c2 <socket+0xb6>
 80075a2:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 80075a6:	f107 0230 	add.w	r2, r7, #48	; 0x30
 80075aa:	4413      	add	r3, r2
 80075ac:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 80075b0:	b29a      	uxth	r2, r3
 80075b2:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 80075b4:	4413      	add	r3, r2
 80075b6:	85fb      	strh	r3, [r7, #46]	; 0x2e
 80075b8:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 80075bc:	3301      	adds	r3, #1
 80075be:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d
 80075c2:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 80075c6:	2b03      	cmp	r3, #3
 80075c8:	d9eb      	bls.n	80075a2 <socket+0x96>
 80075ca:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 80075cc:	2b00      	cmp	r3, #0
 80075ce:	d17c      	bne.n	80076ca <socket+0x1be>
 80075d0:	f06f 030b 	mvn.w	r3, #11
 80075d4:	e180      	b.n	80078d8 <socket+0x3cc>
         break;
      case Sn_MR_TCP6 :
         getLLAR(taddr);
 80075d6:	f107 030c 	add.w	r3, r7, #12
 80075da:	2210      	movs	r2, #16
 80075dc:	4619      	mov	r1, r3
 80075de:	4863      	ldr	r0, [pc, #396]	; (800776c <socket+0x260>)
 80075e0:	f7ff fe24 	bl	800722c <WIZCHIP_READ_BUF>
         CHECK_IPZERO(taddr, 16);
 80075e4:	2300      	movs	r3, #0
 80075e6:	857b      	strh	r3, [r7, #42]	; 0x2a
 80075e8:	2300      	movs	r3, #0
 80075ea:	f887 3029 	strb.w	r3, [r7, #41]	; 0x29
 80075ee:	e00f      	b.n	8007610 <socket+0x104>
 80075f0:	f897 3029 	ldrb.w	r3, [r7, #41]	; 0x29
 80075f4:	f107 0230 	add.w	r2, r7, #48	; 0x30
 80075f8:	4413      	add	r3, r2
 80075fa:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 80075fe:	b29a      	uxth	r2, r3
 8007600:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8007602:	4413      	add	r3, r2
 8007604:	857b      	strh	r3, [r7, #42]	; 0x2a
 8007606:	f897 3029 	ldrb.w	r3, [r7, #41]	; 0x29
 800760a:	3301      	adds	r3, #1
 800760c:	f887 3029 	strb.w	r3, [r7, #41]	; 0x29
 8007610:	f897 3029 	ldrb.w	r3, [r7, #41]	; 0x29
 8007614:	2b0f      	cmp	r3, #15
 8007616:	d9eb      	bls.n	80075f0 <socket+0xe4>
 8007618:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 800761a:	2b00      	cmp	r3, #0
 800761c:	d157      	bne.n	80076ce <socket+0x1c2>
 800761e:	f06f 030b 	mvn.w	r3, #11
 8007622:	e159      	b.n	80078d8 <socket+0x3cc>
         //getGUAR(taddr);
         //CHECK_IPZERO(taddr, 16);
         break;
      case Sn_MR_TCPD :  
         getSIPR(taddr);
 8007624:	f107 030c 	add.w	r3, r7, #12
 8007628:	2204      	movs	r2, #4
 800762a:	4619      	mov	r1, r3
 800762c:	484e      	ldr	r0, [pc, #312]	; (8007768 <socket+0x25c>)
 800762e:	f7ff fdfd 	bl	800722c <WIZCHIP_READ_BUF>
         CHECK_IPZERO(taddr, 4);
 8007632:	2300      	movs	r3, #0
 8007634:	84fb      	strh	r3, [r7, #38]	; 0x26
 8007636:	2300      	movs	r3, #0
 8007638:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
 800763c:	e00f      	b.n	800765e <socket+0x152>
 800763e:	f897 3025 	ldrb.w	r3, [r7, #37]	; 0x25
 8007642:	f107 0230 	add.w	r2, r7, #48	; 0x30
 8007646:	4413      	add	r3, r2
 8007648:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 800764c:	b29a      	uxth	r2, r3
 800764e:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8007650:	4413      	add	r3, r2
 8007652:	84fb      	strh	r3, [r7, #38]	; 0x26
 8007654:	f897 3025 	ldrb.w	r3, [r7, #37]	; 0x25
 8007658:	3301      	adds	r3, #1
 800765a:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
 800765e:	f897 3025 	ldrb.w	r3, [r7, #37]	; 0x25
 8007662:	2b03      	cmp	r3, #3
 8007664:	d9eb      	bls.n	800763e <socket+0x132>
 8007666:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8007668:	2b00      	cmp	r3, #0
 800766a:	d102      	bne.n	8007672 <socket+0x166>
 800766c:	f06f 030b 	mvn.w	r3, #11
 8007670:	e132      	b.n	80078d8 <socket+0x3cc>
         getLLAR(taddr);
 8007672:	f107 030c 	add.w	r3, r7, #12
 8007676:	2210      	movs	r2, #16
 8007678:	4619      	mov	r1, r3
 800767a:	483c      	ldr	r0, [pc, #240]	; (800776c <socket+0x260>)
 800767c:	f7ff fdd6 	bl	800722c <WIZCHIP_READ_BUF>
         CHECK_IPZERO(taddr, 16);
 8007680:	2300      	movs	r3, #0
 8007682:	847b      	strh	r3, [r7, #34]	; 0x22
 8007684:	2300      	movs	r3, #0
 8007686:	f887 3021 	strb.w	r3, [r7, #33]	; 0x21
 800768a:	e00f      	b.n	80076ac <socket+0x1a0>
 800768c:	f897 3021 	ldrb.w	r3, [r7, #33]	; 0x21
 8007690:	f107 0230 	add.w	r2, r7, #48	; 0x30
 8007694:	4413      	add	r3, r2
 8007696:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 800769a:	b29a      	uxth	r2, r3
 800769c:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800769e:	4413      	add	r3, r2
 80076a0:	847b      	strh	r3, [r7, #34]	; 0x22
 80076a2:	f897 3021 	ldrb.w	r3, [r7, #33]	; 0x21
 80076a6:	3301      	adds	r3, #1
 80076a8:	f887 3021 	strb.w	r3, [r7, #33]	; 0x21
 80076ac:	f897 3021 	ldrb.w	r3, [r7, #33]	; 0x21
 80076b0:	2b0f      	cmp	r3, #15
 80076b2:	d9eb      	bls.n	800768c <socket+0x180>
 80076b4:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 80076b6:	2b00      	cmp	r3, #0
 80076b8:	d10b      	bne.n	80076d2 <socket+0x1c6>
 80076ba:	f06f 030b 	mvn.w	r3, #11
 80076be:	e10b      	b.n	80078d8 <socket+0x3cc>
      case Sn_MR_MACRAW :
      case Sn_MR_IPRAW4 :
      case Sn_MR_IPRAW6 :
         break; 
      default :
        return SOCKERR_SOCKMODE;
 80076c0:	f06f 0304 	mvn.w	r3, #4
 80076c4:	e108      	b.n	80078d8 <socket+0x3cc>
         break; 
 80076c6:	bf00      	nop
 80076c8:	e004      	b.n	80076d4 <socket+0x1c8>
         break;
 80076ca:	bf00      	nop
 80076cc:	e002      	b.n	80076d4 <socket+0x1c8>
         break;
 80076ce:	bf00      	nop
 80076d0:	e000      	b.n	80076d4 <socket+0x1c8>
         break;
 80076d2:	bf00      	nop
   } 

   if((flag & 0x04)) return SOCKERR_SOCKFLAG;
 80076d4:	78fb      	ldrb	r3, [r7, #3]
 80076d6:	f003 0304 	and.w	r3, r3, #4
 80076da:	2b00      	cmp	r3, #0
 80076dc:	d002      	beq.n	80076e4 <socket+0x1d8>
 80076de:	f06f 0305 	mvn.w	r3, #5
 80076e2:	e0f9      	b.n	80078d8 <socket+0x3cc>
   if(flag != 0)
 80076e4:	78fb      	ldrb	r3, [r7, #3]
 80076e6:	2b00      	cmp	r3, #0
 80076e8:	d036      	beq.n	8007758 <socket+0x24c>
   {
      switch(protocol)
 80076ea:	79bb      	ldrb	r3, [r7, #6]
 80076ec:	3b01      	subs	r3, #1
 80076ee:	2b0c      	cmp	r3, #12
 80076f0:	d834      	bhi.n	800775c <socket+0x250>
 80076f2:	a201      	add	r2, pc, #4	; (adr r2, 80076f8 <socket+0x1ec>)
 80076f4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80076f8:	0800773d 	.word	0x0800773d
 80076fc:	0800775d 	.word	0x0800775d
 8007700:	0800774d 	.word	0x0800774d
 8007704:	0800775d 	.word	0x0800775d
 8007708:	0800775d 	.word	0x0800775d
 800770c:	0800775d 	.word	0x0800775d
 8007710:	0800772d 	.word	0x0800772d
 8007714:	0800775d 	.word	0x0800775d
 8007718:	0800773d 	.word	0x0800773d
 800771c:	0800775d 	.word	0x0800775d
 8007720:	0800774d 	.word	0x0800774d
 8007724:	0800775d 	.word	0x0800775d
 8007728:	0800773d 	.word	0x0800773d
      {
         case Sn_MR_MACRAW:
            if((flag & (SF_DHA_MANUAL | SF_FORCE_ARP)) != 0)
 800772c:	78fb      	ldrb	r3, [r7, #3]
 800772e:	f003 0303 	and.w	r3, r3, #3
 8007732:	2b00      	cmp	r3, #0
 8007734:	d014      	beq.n	8007760 <socket+0x254>
            	return SOCKERR_SOCKFLAG;
 8007736:	f06f 0305 	mvn.w	r3, #5
 800773a:	e0cd      	b.n	80078d8 <socket+0x3cc>
            break;
         case Sn_MR_TCP4:
         case Sn_MR_TCP6:
         case Sn_MR_TCPD:     
            if((flag & (SF_MULTI_ENABLE | SF_UNI_BLOCK)) !=0)
 800773c:	78fb      	ldrb	r3, [r7, #3]
 800773e:	f003 0390 	and.w	r3, r3, #144	; 0x90
 8007742:	2b00      	cmp	r3, #0
 8007744:	d00e      	beq.n	8007764 <socket+0x258>
            	return SOCKERR_SOCKFLAG;
 8007746:	f06f 0305 	mvn.w	r3, #5
 800774a:	e0c5      	b.n	80078d8 <socket+0x3cc>
            break;
         case Sn_MR_IPRAW4:
         case Sn_MR_IPRAW6:
            if(flag !=0)
 800774c:	78fb      	ldrb	r3, [r7, #3]
 800774e:	2b00      	cmp	r3, #0
 8007750:	d00e      	beq.n	8007770 <socket+0x264>
            	return SOCKERR_SOCKFLAG;
 8007752:	f06f 0305 	mvn.w	r3, #5
 8007756:	e0bf      	b.n	80078d8 <socket+0x3cc>
            break;
         default:
            break;
      }
   }
 8007758:	bf00      	nop
 800775a:	e00a      	b.n	8007772 <socket+0x266>
            break;
 800775c:	bf00      	nop
 800775e:	e008      	b.n	8007772 <socket+0x266>
            break;
 8007760:	bf00      	nop
 8007762:	e006      	b.n	8007772 <socket+0x266>
            break;
 8007764:	bf00      	nop
 8007766:	e004      	b.n	8007772 <socket+0x266>
 8007768:	60413800 	.word	0x60413800
 800776c:	60414000 	.word	0x60414000
            break;
 8007770:	bf00      	nop
   close(sn);
 8007772:	79fb      	ldrb	r3, [r7, #7]
 8007774:	4618      	mov	r0, r3
 8007776:	f000 f8c7 	bl	8007908 <close>
   setSn_MR(sn,(protocol | (flag & 0xF0)));
 800777a:	79fb      	ldrb	r3, [r7, #7]
 800777c:	009b      	lsls	r3, r3, #2
 800777e:	3301      	adds	r3, #1
 8007780:	00db      	lsls	r3, r3, #3
 8007782:	f103 43c0 	add.w	r3, r3, #1610612736	; 0x60000000
 8007786:	4618      	mov	r0, r3
 8007788:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800778c:	f023 030f 	bic.w	r3, r3, #15
 8007790:	b25a      	sxtb	r2, r3
 8007792:	f997 3006 	ldrsb.w	r3, [r7, #6]
 8007796:	4313      	orrs	r3, r2
 8007798:	b25b      	sxtb	r3, r3
 800779a:	b2db      	uxtb	r3, r3
 800779c:	4619      	mov	r1, r3
 800779e:	f7ff fcab 	bl	80070f8 <WIZCHIP_WRITE>
   setSn_MR2(sn, flag & 0x03);  
 80077a2:	79fb      	ldrb	r3, [r7, #7]
 80077a4:	009b      	lsls	r3, r3, #2
 80077a6:	3301      	adds	r3, #1
 80077a8:	00da      	lsls	r2, r3, #3
 80077aa:	4b4d      	ldr	r3, [pc, #308]	; (80078e0 <socket+0x3d4>)
 80077ac:	4413      	add	r3, r2
 80077ae:	461a      	mov	r2, r3
 80077b0:	78fb      	ldrb	r3, [r7, #3]
 80077b2:	f003 0303 	and.w	r3, r3, #3
 80077b6:	b2db      	uxtb	r3, r3
 80077b8:	4619      	mov	r1, r3
 80077ba:	4610      	mov	r0, r2
 80077bc:	f7ff fc9c 	bl	80070f8 <WIZCHIP_WRITE>
   if(!port)
 80077c0:	88bb      	ldrh	r3, [r7, #4]
 80077c2:	2b00      	cmp	r3, #0
 80077c4:	d110      	bne.n	80077e8 <socket+0x2dc>
   {
      port = sock_any_port++;
 80077c6:	4b47      	ldr	r3, [pc, #284]	; (80078e4 <socket+0x3d8>)
 80077c8:	881b      	ldrh	r3, [r3, #0]
 80077ca:	1c5a      	adds	r2, r3, #1
 80077cc:	b291      	uxth	r1, r2
 80077ce:	4a45      	ldr	r2, [pc, #276]	; (80078e4 <socket+0x3d8>)
 80077d0:	8011      	strh	r1, [r2, #0]
 80077d2:	80bb      	strh	r3, [r7, #4]
      if(sock_any_port == 0xFFF0) sock_any_port = SOCK_ANY_PORT_NUM;
 80077d4:	4b43      	ldr	r3, [pc, #268]	; (80078e4 <socket+0x3d8>)
 80077d6:	881b      	ldrh	r3, [r3, #0]
 80077d8:	f64f 72f0 	movw	r2, #65520	; 0xfff0
 80077dc:	4293      	cmp	r3, r2
 80077de:	d103      	bne.n	80077e8 <socket+0x2dc>
 80077e0:	4b40      	ldr	r3, [pc, #256]	; (80078e4 <socket+0x3d8>)
 80077e2:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80077e6:	801a      	strh	r2, [r3, #0]
   }
   setSn_PORTR(sn,port);
 80077e8:	79fb      	ldrb	r3, [r7, #7]
 80077ea:	009b      	lsls	r3, r3, #2
 80077ec:	3301      	adds	r3, #1
 80077ee:	00da      	lsls	r2, r3, #3
 80077f0:	4b3d      	ldr	r3, [pc, #244]	; (80078e8 <socket+0x3dc>)
 80077f2:	4413      	add	r3, r2
 80077f4:	461a      	mov	r2, r3
 80077f6:	88bb      	ldrh	r3, [r7, #4]
 80077f8:	0a1b      	lsrs	r3, r3, #8
 80077fa:	b29b      	uxth	r3, r3
 80077fc:	b2db      	uxtb	r3, r3
 80077fe:	4619      	mov	r1, r3
 8007800:	4610      	mov	r0, r2
 8007802:	f7ff fc79 	bl	80070f8 <WIZCHIP_WRITE>
 8007806:	79fb      	ldrb	r3, [r7, #7]
 8007808:	009b      	lsls	r3, r3, #2
 800780a:	3301      	adds	r3, #1
 800780c:	00da      	lsls	r2, r3, #3
 800780e:	4b37      	ldr	r3, [pc, #220]	; (80078ec <socket+0x3e0>)
 8007810:	4413      	add	r3, r2
 8007812:	461a      	mov	r2, r3
 8007814:	88bb      	ldrh	r3, [r7, #4]
 8007816:	b2db      	uxtb	r3, r3
 8007818:	4619      	mov	r1, r3
 800781a:	4610      	mov	r0, r2
 800781c:	f7ff fc6c 	bl	80070f8 <WIZCHIP_WRITE>
   setSn_CR(sn,Sn_CR_OPEN);
 8007820:	79fb      	ldrb	r3, [r7, #7]
 8007822:	009b      	lsls	r3, r3, #2
 8007824:	3301      	adds	r3, #1
 8007826:	00da      	lsls	r2, r3, #3
 8007828:	4b31      	ldr	r3, [pc, #196]	; (80078f0 <socket+0x3e4>)
 800782a:	4413      	add	r3, r2
 800782c:	2101      	movs	r1, #1
 800782e:	4618      	mov	r0, r3
 8007830:	f7ff fc62 	bl	80070f8 <WIZCHIP_WRITE>

   while(getSn_CR(sn));
 8007834:	bf00      	nop
 8007836:	79fb      	ldrb	r3, [r7, #7]
 8007838:	009b      	lsls	r3, r3, #2
 800783a:	3301      	adds	r3, #1
 800783c:	00da      	lsls	r2, r3, #3
 800783e:	4b2c      	ldr	r3, [pc, #176]	; (80078f0 <socket+0x3e4>)
 8007840:	4413      	add	r3, r2
 8007842:	4618      	mov	r0, r3
 8007844:	f7ff fc86 	bl	8007154 <WIZCHIP_READ>
 8007848:	4603      	mov	r3, r0
 800784a:	2b00      	cmp	r3, #0
 800784c:	d1f3      	bne.n	8007836 <socket+0x32a>

   sock_io_mode &= ~(1 <<sn);
 800784e:	79fb      	ldrb	r3, [r7, #7]
 8007850:	2201      	movs	r2, #1
 8007852:	fa02 f303 	lsl.w	r3, r2, r3
 8007856:	b21b      	sxth	r3, r3
 8007858:	43db      	mvns	r3, r3
 800785a:	b21a      	sxth	r2, r3
 800785c:	4b25      	ldr	r3, [pc, #148]	; (80078f4 <socket+0x3e8>)
 800785e:	881b      	ldrh	r3, [r3, #0]
 8007860:	b21b      	sxth	r3, r3
 8007862:	4013      	ands	r3, r2
 8007864:	b21b      	sxth	r3, r3
 8007866:	b29a      	uxth	r2, r3
 8007868:	4b22      	ldr	r3, [pc, #136]	; (80078f4 <socket+0x3e8>)
 800786a:	801a      	strh	r2, [r3, #0]
   sock_io_mode |= ((flag & (SF_IO_NONBLOCK>>3)) << sn);
 800786c:	78fb      	ldrb	r3, [r7, #3]
 800786e:	f003 0201 	and.w	r2, r3, #1
 8007872:	79fb      	ldrb	r3, [r7, #7]
 8007874:	fa02 f303 	lsl.w	r3, r2, r3
 8007878:	b21a      	sxth	r2, r3
 800787a:	4b1e      	ldr	r3, [pc, #120]	; (80078f4 <socket+0x3e8>)
 800787c:	881b      	ldrh	r3, [r3, #0]
 800787e:	b21b      	sxth	r3, r3
 8007880:	4313      	orrs	r3, r2
 8007882:	b21b      	sxth	r3, r3
 8007884:	b29a      	uxth	r2, r3
 8007886:	4b1b      	ldr	r3, [pc, #108]	; (80078f4 <socket+0x3e8>)
 8007888:	801a      	strh	r2, [r3, #0]
   sock_is_sending &= ~(1<<sn);
 800788a:	79fb      	ldrb	r3, [r7, #7]
 800788c:	2201      	movs	r2, #1
 800788e:	fa02 f303 	lsl.w	r3, r2, r3
 8007892:	b21b      	sxth	r3, r3
 8007894:	43db      	mvns	r3, r3
 8007896:	b21a      	sxth	r2, r3
 8007898:	4b17      	ldr	r3, [pc, #92]	; (80078f8 <socket+0x3ec>)
 800789a:	881b      	ldrh	r3, [r3, #0]
 800789c:	b21b      	sxth	r3, r3
 800789e:	4013      	ands	r3, r2
 80078a0:	b21b      	sxth	r3, r3
 80078a2:	b29a      	uxth	r2, r3
 80078a4:	4b14      	ldr	r3, [pc, #80]	; (80078f8 <socket+0x3ec>)
 80078a6:	801a      	strh	r2, [r3, #0]
   sock_remained_size[sn] = 0;
 80078a8:	79fb      	ldrb	r3, [r7, #7]
 80078aa:	4a14      	ldr	r2, [pc, #80]	; (80078fc <socket+0x3f0>)
 80078ac:	2100      	movs	r1, #0
 80078ae:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
   sock_pack_info[sn] = PACK_NONE;
 80078b2:	79fb      	ldrb	r3, [r7, #7]
 80078b4:	4a12      	ldr	r2, [pc, #72]	; (8007900 <socket+0x3f4>)
 80078b6:	2100      	movs	r1, #0
 80078b8:	54d1      	strb	r1, [r2, r3]

   while(getSn_SR(sn) == SOCK_CLOSED) ;
 80078ba:	bf00      	nop
 80078bc:	79fb      	ldrb	r3, [r7, #7]
 80078be:	009b      	lsls	r3, r3, #2
 80078c0:	3301      	adds	r3, #1
 80078c2:	00da      	lsls	r2, r3, #3
 80078c4:	4b0f      	ldr	r3, [pc, #60]	; (8007904 <socket+0x3f8>)
 80078c6:	4413      	add	r3, r2
 80078c8:	4618      	mov	r0, r3
 80078ca:	f7ff fc43 	bl	8007154 <WIZCHIP_READ>
 80078ce:	4603      	mov	r3, r0
 80078d0:	2b00      	cmp	r3, #0
 80078d2:	d0f3      	beq.n	80078bc <socket+0x3b0>
//   printf("[%d]%d\r\n", sn, getSn_PORTR(sn));
   return sn;
 80078d4:	f997 3007 	ldrsb.w	r3, [r7, #7]
}  
 80078d8:	4618      	mov	r0, r3
 80078da:	3734      	adds	r7, #52	; 0x34
 80078dc:	46bd      	mov	sp, r7
 80078de:	bd90      	pop	{r4, r7, pc}
 80078e0:	60014400 	.word	0x60014400
 80078e4:	20000084 	.word	0x20000084
 80078e8:	60011400 	.word	0x60011400
 80078ec:	60011500 	.word	0x60011500
 80078f0:	60001000 	.word	0x60001000
 80078f4:	2000013c 	.word	0x2000013c
 80078f8:	2000013e 	.word	0x2000013e
 80078fc:	20000140 	.word	0x20000140
 8007900:	20000150 	.word	0x20000150
 8007904:	60003000 	.word	0x60003000

08007908 <close>:


int8_t close(uint8_t sn)
{
 8007908:	b580      	push	{r7, lr}
 800790a:	b082      	sub	sp, #8
 800790c:	af00      	add	r7, sp, #0
 800790e:	4603      	mov	r3, r0
 8007910:	71fb      	strb	r3, [r7, #7]
   CHECK_SOCKNUM();
 8007912:	79fb      	ldrb	r3, [r7, #7]
 8007914:	2b07      	cmp	r3, #7
 8007916:	d902      	bls.n	800791e <close+0x16>
 8007918:	f04f 33ff 	mov.w	r3, #4294967295
 800791c:	e055      	b.n	80079ca <close+0xc2>
   setSn_CR(sn,Sn_CR_CLOSE);
 800791e:	79fb      	ldrb	r3, [r7, #7]
 8007920:	009b      	lsls	r3, r3, #2
 8007922:	3301      	adds	r3, #1
 8007924:	00da      	lsls	r2, r3, #3
 8007926:	4b2b      	ldr	r3, [pc, #172]	; (80079d4 <close+0xcc>)
 8007928:	4413      	add	r3, r2
 800792a:	2110      	movs	r1, #16
 800792c:	4618      	mov	r0, r3
 800792e:	f7ff fbe3 	bl	80070f8 <WIZCHIP_WRITE>
   /* wait to process the command... */
   while( getSn_CR(sn) );
 8007932:	bf00      	nop
 8007934:	79fb      	ldrb	r3, [r7, #7]
 8007936:	009b      	lsls	r3, r3, #2
 8007938:	3301      	adds	r3, #1
 800793a:	00da      	lsls	r2, r3, #3
 800793c:	4b25      	ldr	r3, [pc, #148]	; (80079d4 <close+0xcc>)
 800793e:	4413      	add	r3, r2
 8007940:	4618      	mov	r0, r3
 8007942:	f7ff fc07 	bl	8007154 <WIZCHIP_READ>
 8007946:	4603      	mov	r3, r0
 8007948:	2b00      	cmp	r3, #0
 800794a:	d1f3      	bne.n	8007934 <close+0x2c>
   /* clear all interrupt of SOCKETn. */
   setSn_IRCLR(sn, 0xFF);
 800794c:	79fb      	ldrb	r3, [r7, #7]
 800794e:	009b      	lsls	r3, r3, #2
 8007950:	3301      	adds	r3, #1
 8007952:	00da      	lsls	r2, r3, #3
 8007954:	4b20      	ldr	r3, [pc, #128]	; (80079d8 <close+0xd0>)
 8007956:	4413      	add	r3, r2
 8007958:	21ff      	movs	r1, #255	; 0xff
 800795a:	4618      	mov	r0, r3
 800795c:	f7ff fbcc 	bl	80070f8 <WIZCHIP_WRITE>
   /* Release the sock_io_mode of SOCKETn. */
   sock_io_mode &= ~(1<<sn); 
 8007960:	79fb      	ldrb	r3, [r7, #7]
 8007962:	2201      	movs	r2, #1
 8007964:	fa02 f303 	lsl.w	r3, r2, r3
 8007968:	b21b      	sxth	r3, r3
 800796a:	43db      	mvns	r3, r3
 800796c:	b21a      	sxth	r2, r3
 800796e:	4b1b      	ldr	r3, [pc, #108]	; (80079dc <close+0xd4>)
 8007970:	881b      	ldrh	r3, [r3, #0]
 8007972:	b21b      	sxth	r3, r3
 8007974:	4013      	ands	r3, r2
 8007976:	b21b      	sxth	r3, r3
 8007978:	b29a      	uxth	r2, r3
 800797a:	4b18      	ldr	r3, [pc, #96]	; (80079dc <close+0xd4>)
 800797c:	801a      	strh	r2, [r3, #0]
   sock_remained_size[sn] = 0;
 800797e:	79fb      	ldrb	r3, [r7, #7]
 8007980:	4a17      	ldr	r2, [pc, #92]	; (80079e0 <close+0xd8>)
 8007982:	2100      	movs	r1, #0
 8007984:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
   sock_is_sending &= ~(1<<sn);
 8007988:	79fb      	ldrb	r3, [r7, #7]
 800798a:	2201      	movs	r2, #1
 800798c:	fa02 f303 	lsl.w	r3, r2, r3
 8007990:	b21b      	sxth	r3, r3
 8007992:	43db      	mvns	r3, r3
 8007994:	b21a      	sxth	r2, r3
 8007996:	4b13      	ldr	r3, [pc, #76]	; (80079e4 <close+0xdc>)
 8007998:	881b      	ldrh	r3, [r3, #0]
 800799a:	b21b      	sxth	r3, r3
 800799c:	4013      	ands	r3, r2
 800799e:	b21b      	sxth	r3, r3
 80079a0:	b29a      	uxth	r2, r3
 80079a2:	4b10      	ldr	r3, [pc, #64]	; (80079e4 <close+0xdc>)
 80079a4:	801a      	strh	r2, [r3, #0]
   sock_pack_info[sn] = PACK_NONE;
 80079a6:	79fb      	ldrb	r3, [r7, #7]
 80079a8:	4a0f      	ldr	r2, [pc, #60]	; (80079e8 <close+0xe0>)
 80079aa:	2100      	movs	r1, #0
 80079ac:	54d1      	strb	r1, [r2, r3]
   while(getSn_SR(sn) != SOCK_CLOSED);
 80079ae:	bf00      	nop
 80079b0:	79fb      	ldrb	r3, [r7, #7]
 80079b2:	009b      	lsls	r3, r3, #2
 80079b4:	3301      	adds	r3, #1
 80079b6:	00da      	lsls	r2, r3, #3
 80079b8:	4b0c      	ldr	r3, [pc, #48]	; (80079ec <close+0xe4>)
 80079ba:	4413      	add	r3, r2
 80079bc:	4618      	mov	r0, r3
 80079be:	f7ff fbc9 	bl	8007154 <WIZCHIP_READ>
 80079c2:	4603      	mov	r3, r0
 80079c4:	2b00      	cmp	r3, #0
 80079c6:	d1f3      	bne.n	80079b0 <close+0xa8>
   return SOCK_OK;
 80079c8:	2301      	movs	r3, #1
}
 80079ca:	4618      	mov	r0, r3
 80079cc:	3708      	adds	r7, #8
 80079ce:	46bd      	mov	sp, r7
 80079d0:	bd80      	pop	{r7, pc}
 80079d2:	bf00      	nop
 80079d4:	60001000 	.word	0x60001000
 80079d8:	60002800 	.word	0x60002800
 80079dc:	2000013c 	.word	0x2000013c
 80079e0:	20000140 	.word	0x20000140
 80079e4:	2000013e 	.word	0x2000013e
 80079e8:	20000150 	.word	0x20000150
 80079ec:	60003000 	.word	0x60003000

080079f0 <listen>:


int8_t listen(uint8_t sn)
{
 80079f0:	b580      	push	{r7, lr}
 80079f2:	b082      	sub	sp, #8
 80079f4:	af00      	add	r7, sp, #0
 80079f6:	4603      	mov	r3, r0
 80079f8:	71fb      	strb	r3, [r7, #7]
   CHECK_SOCKNUM();
 80079fa:	79fb      	ldrb	r3, [r7, #7]
 80079fc:	2b07      	cmp	r3, #7
 80079fe:	d902      	bls.n	8007a06 <listen+0x16>
 8007a00:	f04f 33ff 	mov.w	r3, #4294967295
 8007a04:	e03a      	b.n	8007a7c <listen+0x8c>
   CHECK_SOCKINIT();
 8007a06:	79fb      	ldrb	r3, [r7, #7]
 8007a08:	009b      	lsls	r3, r3, #2
 8007a0a:	3301      	adds	r3, #1
 8007a0c:	00da      	lsls	r2, r3, #3
 8007a0e:	4b1d      	ldr	r3, [pc, #116]	; (8007a84 <listen+0x94>)
 8007a10:	4413      	add	r3, r2
 8007a12:	4618      	mov	r0, r3
 8007a14:	f7ff fb9e 	bl	8007154 <WIZCHIP_READ>
 8007a18:	4603      	mov	r3, r0
 8007a1a:	2b13      	cmp	r3, #19
 8007a1c:	d002      	beq.n	8007a24 <listen+0x34>
 8007a1e:	f06f 0302 	mvn.w	r3, #2
 8007a22:	e02b      	b.n	8007a7c <listen+0x8c>
   setSn_CR(sn,Sn_CR_LISTEN);
 8007a24:	79fb      	ldrb	r3, [r7, #7]
 8007a26:	009b      	lsls	r3, r3, #2
 8007a28:	3301      	adds	r3, #1
 8007a2a:	00da      	lsls	r2, r3, #3
 8007a2c:	4b16      	ldr	r3, [pc, #88]	; (8007a88 <listen+0x98>)
 8007a2e:	4413      	add	r3, r2
 8007a30:	2102      	movs	r1, #2
 8007a32:	4618      	mov	r0, r3
 8007a34:	f7ff fb60 	bl	80070f8 <WIZCHIP_WRITE>
   while(getSn_CR(sn));
 8007a38:	bf00      	nop
 8007a3a:	79fb      	ldrb	r3, [r7, #7]
 8007a3c:	009b      	lsls	r3, r3, #2
 8007a3e:	3301      	adds	r3, #1
 8007a40:	00da      	lsls	r2, r3, #3
 8007a42:	4b11      	ldr	r3, [pc, #68]	; (8007a88 <listen+0x98>)
 8007a44:	4413      	add	r3, r2
 8007a46:	4618      	mov	r0, r3
 8007a48:	f7ff fb84 	bl	8007154 <WIZCHIP_READ>
 8007a4c:	4603      	mov	r3, r0
 8007a4e:	2b00      	cmp	r3, #0
 8007a50:	d1f3      	bne.n	8007a3a <listen+0x4a>
   while(getSn_SR(sn) != SOCK_LISTEN)
 8007a52:	e006      	b.n	8007a62 <listen+0x72>
   {
      close(sn);
 8007a54:	79fb      	ldrb	r3, [r7, #7]
 8007a56:	4618      	mov	r0, r3
 8007a58:	f7ff ff56 	bl	8007908 <close>
      return SOCKERR_SOCKCLOSED;
 8007a5c:	f06f 0303 	mvn.w	r3, #3
 8007a60:	e00c      	b.n	8007a7c <listen+0x8c>
   while(getSn_SR(sn) != SOCK_LISTEN)
 8007a62:	79fb      	ldrb	r3, [r7, #7]
 8007a64:	009b      	lsls	r3, r3, #2
 8007a66:	3301      	adds	r3, #1
 8007a68:	00da      	lsls	r2, r3, #3
 8007a6a:	4b06      	ldr	r3, [pc, #24]	; (8007a84 <listen+0x94>)
 8007a6c:	4413      	add	r3, r2
 8007a6e:	4618      	mov	r0, r3
 8007a70:	f7ff fb70 	bl	8007154 <WIZCHIP_READ>
 8007a74:	4603      	mov	r3, r0
 8007a76:	2b14      	cmp	r3, #20
 8007a78:	d1ec      	bne.n	8007a54 <listen+0x64>
   }
   return SOCK_OK;
 8007a7a:	2301      	movs	r3, #1
}
 8007a7c:	4618      	mov	r0, r3
 8007a7e:	3708      	adds	r7, #8
 8007a80:	46bd      	mov	sp, r7
 8007a82:	bd80      	pop	{r7, pc}
 8007a84:	60003000 	.word	0x60003000
 8007a88:	60001000 	.word	0x60001000

08007a8c <disconnect>:
   } 
   return SOCK_OK;
}

int8_t disconnect(uint8_t sn)
{
 8007a8c:	b580      	push	{r7, lr}
 8007a8e:	b082      	sub	sp, #8
 8007a90:	af00      	add	r7, sp, #0
 8007a92:	4603      	mov	r3, r0
 8007a94:	71fb      	strb	r3, [r7, #7]
   CHECK_SOCKNUM();
 8007a96:	79fb      	ldrb	r3, [r7, #7]
 8007a98:	2b07      	cmp	r3, #7
 8007a9a:	d902      	bls.n	8007aa2 <disconnect+0x16>
 8007a9c:	f04f 33ff 	mov.w	r3, #4294967295
 8007aa0:	e061      	b.n	8007b66 <disconnect+0xda>
   CHECK_TCPMODE();
 8007aa2:	79fb      	ldrb	r3, [r7, #7]
 8007aa4:	009b      	lsls	r3, r3, #2
 8007aa6:	3301      	adds	r3, #1
 8007aa8:	00db      	lsls	r3, r3, #3
 8007aaa:	f103 43c0 	add.w	r3, r3, #1610612736	; 0x60000000
 8007aae:	4618      	mov	r0, r3
 8007ab0:	f7ff fb50 	bl	8007154 <WIZCHIP_READ>
 8007ab4:	4603      	mov	r3, r0
 8007ab6:	f003 0303 	and.w	r3, r3, #3
 8007aba:	2b01      	cmp	r3, #1
 8007abc:	d002      	beq.n	8007ac4 <disconnect+0x38>
 8007abe:	f06f 0304 	mvn.w	r3, #4
 8007ac2:	e050      	b.n	8007b66 <disconnect+0xda>
   if(getSn_SR(sn) != SOCK_CLOSED)
 8007ac4:	79fb      	ldrb	r3, [r7, #7]
 8007ac6:	009b      	lsls	r3, r3, #2
 8007ac8:	3301      	adds	r3, #1
 8007aca:	00da      	lsls	r2, r3, #3
 8007acc:	4b28      	ldr	r3, [pc, #160]	; (8007b70 <disconnect+0xe4>)
 8007ace:	4413      	add	r3, r2
 8007ad0:	4618      	mov	r0, r3
 8007ad2:	f7ff fb3f 	bl	8007154 <WIZCHIP_READ>
 8007ad6:	4603      	mov	r3, r0
 8007ad8:	2b00      	cmp	r3, #0
 8007ada:	d043      	beq.n	8007b64 <disconnect+0xd8>
   {
      setSn_CR(sn,Sn_CR_DISCON);
 8007adc:	79fb      	ldrb	r3, [r7, #7]
 8007ade:	009b      	lsls	r3, r3, #2
 8007ae0:	3301      	adds	r3, #1
 8007ae2:	00da      	lsls	r2, r3, #3
 8007ae4:	4b23      	ldr	r3, [pc, #140]	; (8007b74 <disconnect+0xe8>)
 8007ae6:	4413      	add	r3, r2
 8007ae8:	2108      	movs	r1, #8
 8007aea:	4618      	mov	r0, r3
 8007aec:	f7ff fb04 	bl	80070f8 <WIZCHIP_WRITE>
      /* wait to process the command... */
      while(getSn_CR(sn));
 8007af0:	bf00      	nop
 8007af2:	79fb      	ldrb	r3, [r7, #7]
 8007af4:	009b      	lsls	r3, r3, #2
 8007af6:	3301      	adds	r3, #1
 8007af8:	00da      	lsls	r2, r3, #3
 8007afa:	4b1e      	ldr	r3, [pc, #120]	; (8007b74 <disconnect+0xe8>)
 8007afc:	4413      	add	r3, r2
 8007afe:	4618      	mov	r0, r3
 8007b00:	f7ff fb28 	bl	8007154 <WIZCHIP_READ>
 8007b04:	4603      	mov	r3, r0
 8007b06:	2b00      	cmp	r3, #0
 8007b08:	d1f3      	bne.n	8007af2 <disconnect+0x66>
      if(sock_io_mode & (1<<sn)) return SOCK_BUSY;
 8007b0a:	4b1b      	ldr	r3, [pc, #108]	; (8007b78 <disconnect+0xec>)
 8007b0c:	881b      	ldrh	r3, [r3, #0]
 8007b0e:	461a      	mov	r2, r3
 8007b10:	79fb      	ldrb	r3, [r7, #7]
 8007b12:	fa42 f303 	asr.w	r3, r2, r3
 8007b16:	f003 0301 	and.w	r3, r3, #1
 8007b1a:	2b00      	cmp	r3, #0
 8007b1c:	d016      	beq.n	8007b4c <disconnect+0xc0>
 8007b1e:	2300      	movs	r3, #0
 8007b20:	e021      	b.n	8007b66 <disconnect+0xda>
      while(getSn_SR(sn) != SOCK_CLOSED)
      {
         if(getSn_IR(sn) & Sn_IR_TIMEOUT)
 8007b22:	79fb      	ldrb	r3, [r7, #7]
 8007b24:	009b      	lsls	r3, r3, #2
 8007b26:	3301      	adds	r3, #1
 8007b28:	00da      	lsls	r2, r3, #3
 8007b2a:	4b14      	ldr	r3, [pc, #80]	; (8007b7c <disconnect+0xf0>)
 8007b2c:	4413      	add	r3, r2
 8007b2e:	4618      	mov	r0, r3
 8007b30:	f7ff fb10 	bl	8007154 <WIZCHIP_READ>
 8007b34:	4603      	mov	r3, r0
 8007b36:	f003 0308 	and.w	r3, r3, #8
 8007b3a:	2b00      	cmp	r3, #0
 8007b3c:	d006      	beq.n	8007b4c <disconnect+0xc0>
         {
            close(sn);
 8007b3e:	79fb      	ldrb	r3, [r7, #7]
 8007b40:	4618      	mov	r0, r3
 8007b42:	f7ff fee1 	bl	8007908 <close>
            return SOCKERR_TIMEOUT;
 8007b46:	f06f 030c 	mvn.w	r3, #12
 8007b4a:	e00c      	b.n	8007b66 <disconnect+0xda>
      while(getSn_SR(sn) != SOCK_CLOSED)
 8007b4c:	79fb      	ldrb	r3, [r7, #7]
 8007b4e:	009b      	lsls	r3, r3, #2
 8007b50:	3301      	adds	r3, #1
 8007b52:	00da      	lsls	r2, r3, #3
 8007b54:	4b06      	ldr	r3, [pc, #24]	; (8007b70 <disconnect+0xe4>)
 8007b56:	4413      	add	r3, r2
 8007b58:	4618      	mov	r0, r3
 8007b5a:	f7ff fafb 	bl	8007154 <WIZCHIP_READ>
 8007b5e:	4603      	mov	r3, r0
 8007b60:	2b00      	cmp	r3, #0
 8007b62:	d1de      	bne.n	8007b22 <disconnect+0x96>
         }
      }
   }
   return SOCK_OK;
 8007b64:	2301      	movs	r3, #1
}
 8007b66:	4618      	mov	r0, r3
 8007b68:	3708      	adds	r7, #8
 8007b6a:	46bd      	mov	sp, r7
 8007b6c:	bd80      	pop	{r7, pc}
 8007b6e:	bf00      	nop
 8007b70:	60003000 	.word	0x60003000
 8007b74:	60001000 	.word	0x60001000
 8007b78:	2000013c 	.word	0x2000013c
 8007b7c:	60002000 	.word	0x60002000

08007b80 <send>:


datasize_t send(uint8_t sn, uint8_t * buf, datasize_t len)
{
 8007b80:	b580      	push	{r7, lr}
 8007b82:	b084      	sub	sp, #16
 8007b84:	af00      	add	r7, sp, #0
 8007b86:	4603      	mov	r3, r0
 8007b88:	6039      	str	r1, [r7, #0]
 8007b8a:	71fb      	strb	r3, [r7, #7]
 8007b8c:	4613      	mov	r3, r2
 8007b8e:	80bb      	strh	r3, [r7, #4]
   uint8_t tmp=0;
 8007b90:	2300      	movs	r3, #0
 8007b92:	73fb      	strb	r3, [r7, #15]
   datasize_t freesize=0;
 8007b94:	2300      	movs	r3, #0
 8007b96:	81bb      	strh	r3, [r7, #12]
    */
   //CHECK_SOCKNUM();
   //CHECK_TCPMODE(Sn_MR_TCP4);
   /************/

   freesize = getSn_TxMAX(sn);
 8007b98:	79fb      	ldrb	r3, [r7, #7]
 8007b9a:	009b      	lsls	r3, r3, #2
 8007b9c:	3301      	adds	r3, #1
 8007b9e:	00da      	lsls	r2, r3, #3
 8007ba0:	4b66      	ldr	r3, [pc, #408]	; (8007d3c <send+0x1bc>)
 8007ba2:	4413      	add	r3, r2
 8007ba4:	4618      	mov	r0, r3
 8007ba6:	f7ff fad5 	bl	8007154 <WIZCHIP_READ>
 8007baa:	4603      	mov	r3, r0
 8007bac:	029b      	lsls	r3, r3, #10
 8007bae:	81bb      	strh	r3, [r7, #12]
   if (len > freesize) len = freesize; // check size not to exceed MAX size.
 8007bb0:	f9b7 2004 	ldrsh.w	r2, [r7, #4]
 8007bb4:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 8007bb8:	429a      	cmp	r2, r3
 8007bba:	dd01      	ble.n	8007bc0 <send+0x40>
 8007bbc:	89bb      	ldrh	r3, [r7, #12]
 8007bbe:	80bb      	strh	r3, [r7, #4]
   while(1)
   {
      freesize = (datasize_t)getSn_TX_FSR(sn);
 8007bc0:	79fb      	ldrb	r3, [r7, #7]
 8007bc2:	4618      	mov	r0, r3
 8007bc4:	f7ff fb6a 	bl	800729c <getSn_TX_FSR>
 8007bc8:	4603      	mov	r3, r0
 8007bca:	81bb      	strh	r3, [r7, #12]
      tmp = getSn_SR(sn);
 8007bcc:	79fb      	ldrb	r3, [r7, #7]
 8007bce:	009b      	lsls	r3, r3, #2
 8007bd0:	3301      	adds	r3, #1
 8007bd2:	00da      	lsls	r2, r3, #3
 8007bd4:	4b5a      	ldr	r3, [pc, #360]	; (8007d40 <send+0x1c0>)
 8007bd6:	4413      	add	r3, r2
 8007bd8:	4618      	mov	r0, r3
 8007bda:	f7ff fabb 	bl	8007154 <WIZCHIP_READ>
 8007bde:	4603      	mov	r3, r0
 8007be0:	73fb      	strb	r3, [r7, #15]
      if ((tmp != SOCK_ESTABLISHED) && (tmp != SOCK_CLOSE_WAIT))
 8007be2:	7bfb      	ldrb	r3, [r7, #15]
 8007be4:	2b17      	cmp	r3, #23
 8007be6:	d00c      	beq.n	8007c02 <send+0x82>
 8007be8:	7bfb      	ldrb	r3, [r7, #15]
 8007bea:	2b1c      	cmp	r3, #28
 8007bec:	d009      	beq.n	8007c02 <send+0x82>
      {
         if(tmp == SOCK_CLOSED) close(sn);
 8007bee:	7bfb      	ldrb	r3, [r7, #15]
 8007bf0:	2b00      	cmp	r3, #0
 8007bf2:	d103      	bne.n	8007bfc <send+0x7c>
 8007bf4:	79fb      	ldrb	r3, [r7, #7]
 8007bf6:	4618      	mov	r0, r3
 8007bf8:	f7ff fe86 	bl	8007908 <close>
         return SOCKERR_SOCKSTATUS;
 8007bfc:	f06f 0306 	mvn.w	r3, #6
 8007c00:	e097      	b.n	8007d32 <send+0x1b2>
      }
      if(len <= freesize) break;
 8007c02:	f9b7 2004 	ldrsh.w	r2, [r7, #4]
 8007c06:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 8007c0a:	429a      	cmp	r2, r3
 8007c0c:	dd0b      	ble.n	8007c26 <send+0xa6>
      if( sock_io_mode & (1<<sn) ) return SOCK_BUSY;  
 8007c0e:	4b4d      	ldr	r3, [pc, #308]	; (8007d44 <send+0x1c4>)
 8007c10:	881b      	ldrh	r3, [r3, #0]
 8007c12:	461a      	mov	r2, r3
 8007c14:	79fb      	ldrb	r3, [r7, #7]
 8007c16:	fa42 f303 	asr.w	r3, r2, r3
 8007c1a:	f003 0301 	and.w	r3, r3, #1
 8007c1e:	2b00      	cmp	r3, #0
 8007c20:	d0ce      	beq.n	8007bc0 <send+0x40>
 8007c22:	2300      	movs	r3, #0
 8007c24:	e085      	b.n	8007d32 <send+0x1b2>
      if(len <= freesize) break;
 8007c26:	bf00      	nop
   }
   wiz_send_data(sn, buf, len);
 8007c28:	f9b7 2004 	ldrsh.w	r2, [r7, #4]
 8007c2c:	79fb      	ldrb	r3, [r7, #7]
 8007c2e:	6839      	ldr	r1, [r7, #0]
 8007c30:	4618      	mov	r0, r3
 8007c32:	f7ff fba3 	bl	800737c <wiz_send_data>
   if(sock_is_sending & (1<<sn))
 8007c36:	4b44      	ldr	r3, [pc, #272]	; (8007d48 <send+0x1c8>)
 8007c38:	881b      	ldrh	r3, [r3, #0]
 8007c3a:	461a      	mov	r2, r3
 8007c3c:	79fb      	ldrb	r3, [r7, #7]
 8007c3e:	fa42 f303 	asr.w	r3, r2, r3
 8007c42:	f003 0301 	and.w	r3, r3, #1
 8007c46:	2b00      	cmp	r3, #0
 8007c48:	d04d      	beq.n	8007ce6 <send+0x166>
   {
      while ( !(getSn_IR(sn) & Sn_IR_SENDOK) )
 8007c4a:	e034      	b.n	8007cb6 <send+0x136>
      {    
         tmp = getSn_SR(sn);
 8007c4c:	79fb      	ldrb	r3, [r7, #7]
 8007c4e:	009b      	lsls	r3, r3, #2
 8007c50:	3301      	adds	r3, #1
 8007c52:	00da      	lsls	r2, r3, #3
 8007c54:	4b3a      	ldr	r3, [pc, #232]	; (8007d40 <send+0x1c0>)
 8007c56:	4413      	add	r3, r2
 8007c58:	4618      	mov	r0, r3
 8007c5a:	f7ff fa7b 	bl	8007154 <WIZCHIP_READ>
 8007c5e:	4603      	mov	r3, r0
 8007c60:	73fb      	strb	r3, [r7, #15]
         if ((tmp != SOCK_ESTABLISHED) && (tmp != SOCK_CLOSE_WAIT) )
 8007c62:	7bfb      	ldrb	r3, [r7, #15]
 8007c64:	2b17      	cmp	r3, #23
 8007c66:	d01a      	beq.n	8007c9e <send+0x11e>
 8007c68:	7bfb      	ldrb	r3, [r7, #15]
 8007c6a:	2b1c      	cmp	r3, #28
 8007c6c:	d017      	beq.n	8007c9e <send+0x11e>
         {
            if( (tmp == SOCK_CLOSED) || (getSn_IR(sn) & Sn_IR_TIMEOUT) ) close(sn);
 8007c6e:	7bfb      	ldrb	r3, [r7, #15]
 8007c70:	2b00      	cmp	r3, #0
 8007c72:	d00d      	beq.n	8007c90 <send+0x110>
 8007c74:	79fb      	ldrb	r3, [r7, #7]
 8007c76:	009b      	lsls	r3, r3, #2
 8007c78:	3301      	adds	r3, #1
 8007c7a:	00da      	lsls	r2, r3, #3
 8007c7c:	4b33      	ldr	r3, [pc, #204]	; (8007d4c <send+0x1cc>)
 8007c7e:	4413      	add	r3, r2
 8007c80:	4618      	mov	r0, r3
 8007c82:	f7ff fa67 	bl	8007154 <WIZCHIP_READ>
 8007c86:	4603      	mov	r3, r0
 8007c88:	f003 0308 	and.w	r3, r3, #8
 8007c8c:	2b00      	cmp	r3, #0
 8007c8e:	d003      	beq.n	8007c98 <send+0x118>
 8007c90:	79fb      	ldrb	r3, [r7, #7]
 8007c92:	4618      	mov	r0, r3
 8007c94:	f7ff fe38 	bl	8007908 <close>
            return SOCKERR_SOCKSTATUS;
 8007c98:	f06f 0306 	mvn.w	r3, #6
 8007c9c:	e049      	b.n	8007d32 <send+0x1b2>
         }
         if(sock_io_mode & (1<<sn)) return SOCK_BUSY;
 8007c9e:	4b29      	ldr	r3, [pc, #164]	; (8007d44 <send+0x1c4>)
 8007ca0:	881b      	ldrh	r3, [r3, #0]
 8007ca2:	461a      	mov	r2, r3
 8007ca4:	79fb      	ldrb	r3, [r7, #7]
 8007ca6:	fa42 f303 	asr.w	r3, r2, r3
 8007caa:	f003 0301 	and.w	r3, r3, #1
 8007cae:	2b00      	cmp	r3, #0
 8007cb0:	d001      	beq.n	8007cb6 <send+0x136>
 8007cb2:	2300      	movs	r3, #0
 8007cb4:	e03d      	b.n	8007d32 <send+0x1b2>
      while ( !(getSn_IR(sn) & Sn_IR_SENDOK) )
 8007cb6:	79fb      	ldrb	r3, [r7, #7]
 8007cb8:	009b      	lsls	r3, r3, #2
 8007cba:	3301      	adds	r3, #1
 8007cbc:	00da      	lsls	r2, r3, #3
 8007cbe:	4b23      	ldr	r3, [pc, #140]	; (8007d4c <send+0x1cc>)
 8007cc0:	4413      	add	r3, r2
 8007cc2:	4618      	mov	r0, r3
 8007cc4:	f7ff fa46 	bl	8007154 <WIZCHIP_READ>
 8007cc8:	4603      	mov	r3, r0
 8007cca:	f003 0310 	and.w	r3, r3, #16
 8007cce:	2b00      	cmp	r3, #0
 8007cd0:	d0bc      	beq.n	8007c4c <send+0xcc>
      } 
      setSn_IRCLR(sn, Sn_IR_SENDOK);
 8007cd2:	79fb      	ldrb	r3, [r7, #7]
 8007cd4:	009b      	lsls	r3, r3, #2
 8007cd6:	3301      	adds	r3, #1
 8007cd8:	00da      	lsls	r2, r3, #3
 8007cda:	4b1d      	ldr	r3, [pc, #116]	; (8007d50 <send+0x1d0>)
 8007cdc:	4413      	add	r3, r2
 8007cde:	2110      	movs	r1, #16
 8007ce0:	4618      	mov	r0, r3
 8007ce2:	f7ff fa09 	bl	80070f8 <WIZCHIP_WRITE>
   }
   setSn_CR(sn,Sn_CR_SEND);
 8007ce6:	79fb      	ldrb	r3, [r7, #7]
 8007ce8:	009b      	lsls	r3, r3, #2
 8007cea:	3301      	adds	r3, #1
 8007cec:	00da      	lsls	r2, r3, #3
 8007cee:	4b19      	ldr	r3, [pc, #100]	; (8007d54 <send+0x1d4>)
 8007cf0:	4413      	add	r3, r2
 8007cf2:	2120      	movs	r1, #32
 8007cf4:	4618      	mov	r0, r3
 8007cf6:	f7ff f9ff 	bl	80070f8 <WIZCHIP_WRITE>
 
   while(getSn_CR(sn));   // wait to process the command...
 8007cfa:	bf00      	nop
 8007cfc:	79fb      	ldrb	r3, [r7, #7]
 8007cfe:	009b      	lsls	r3, r3, #2
 8007d00:	3301      	adds	r3, #1
 8007d02:	00da      	lsls	r2, r3, #3
 8007d04:	4b13      	ldr	r3, [pc, #76]	; (8007d54 <send+0x1d4>)
 8007d06:	4413      	add	r3, r2
 8007d08:	4618      	mov	r0, r3
 8007d0a:	f7ff fa23 	bl	8007154 <WIZCHIP_READ>
 8007d0e:	4603      	mov	r3, r0
 8007d10:	2b00      	cmp	r3, #0
 8007d12:	d1f3      	bne.n	8007cfc <send+0x17c>
   sock_is_sending |= (1<<sn);
 8007d14:	79fb      	ldrb	r3, [r7, #7]
 8007d16:	2201      	movs	r2, #1
 8007d18:	fa02 f303 	lsl.w	r3, r2, r3
 8007d1c:	b21a      	sxth	r2, r3
 8007d1e:	4b0a      	ldr	r3, [pc, #40]	; (8007d48 <send+0x1c8>)
 8007d20:	881b      	ldrh	r3, [r3, #0]
 8007d22:	b21b      	sxth	r3, r3
 8007d24:	4313      	orrs	r3, r2
 8007d26:	b21b      	sxth	r3, r3
 8007d28:	b29a      	uxth	r2, r3
 8007d2a:	4b07      	ldr	r3, [pc, #28]	; (8007d48 <send+0x1c8>)
 8007d2c:	801a      	strh	r2, [r3, #0]
 
   return len;
 8007d2e:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
}
 8007d32:	4618      	mov	r0, r3
 8007d34:	3710      	adds	r7, #16
 8007d36:	46bd      	mov	sp, r7
 8007d38:	bd80      	pop	{r7, pc}
 8007d3a:	bf00      	nop
 8007d3c:	60020000 	.word	0x60020000
 8007d40:	60003000 	.word	0x60003000
 8007d44:	2000013c 	.word	0x2000013c
 8007d48:	2000013e 	.word	0x2000013e
 8007d4c:	60002000 	.word	0x60002000
 8007d50:	60002800 	.word	0x60002800
 8007d54:	60001000 	.word	0x60001000

08007d58 <recv>:


datasize_t recv(uint8_t sn, uint8_t * buf, datasize_t len)
{
 8007d58:	b580      	push	{r7, lr}
 8007d5a:	b084      	sub	sp, #16
 8007d5c:	af00      	add	r7, sp, #0
 8007d5e:	4603      	mov	r3, r0
 8007d60:	6039      	str	r1, [r7, #0]
 8007d62:	71fb      	strb	r3, [r7, #7]
 8007d64:	4613      	mov	r3, r2
 8007d66:	80bb      	strh	r3, [r7, #4]
   uint8_t  tmp = 0;
 8007d68:	2300      	movs	r3, #0
 8007d6a:	73fb      	strb	r3, [r7, #15]
   datasize_t recvsize = 0;
 8007d6c:	2300      	movs	r3, #0
 8007d6e:	81bb      	strh	r3, [r7, #12]
   //CHECK_SOCKNUM();
   //CHECK_TCPMODE();
   //CHECK_SOCKDATA();
   /************/
 
   recvsize = getSn_RxMAX(sn); 
 8007d70:	79fb      	ldrb	r3, [r7, #7]
 8007d72:	009b      	lsls	r3, r3, #2
 8007d74:	3301      	adds	r3, #1
 8007d76:	00da      	lsls	r2, r3, #3
 8007d78:	4b36      	ldr	r3, [pc, #216]	; (8007e54 <recv+0xfc>)
 8007d7a:	4413      	add	r3, r2
 8007d7c:	4618      	mov	r0, r3
 8007d7e:	f7ff f9e9 	bl	8007154 <WIZCHIP_READ>
 8007d82:	4603      	mov	r3, r0
 8007d84:	029b      	lsls	r3, r3, #10
 8007d86:	81bb      	strh	r3, [r7, #12]
   if(recvsize < len) len = recvsize;
 8007d88:	f9b7 200c 	ldrsh.w	r2, [r7, #12]
 8007d8c:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 8007d90:	429a      	cmp	r2, r3
 8007d92:	da01      	bge.n	8007d98 <recv+0x40>
 8007d94:	89bb      	ldrh	r3, [r7, #12]
 8007d96:	80bb      	strh	r3, [r7, #4]
   while(1)
   {
      recvsize = (datasize_t)getSn_RX_RSR(sn);
 8007d98:	79fb      	ldrb	r3, [r7, #7]
 8007d9a:	4618      	mov	r0, r3
 8007d9c:	f7ff fab6 	bl	800730c <getSn_RX_RSR>
 8007da0:	4603      	mov	r3, r0
 8007da2:	81bb      	strh	r3, [r7, #12]
      tmp = getSn_SR(sn);
 8007da4:	79fb      	ldrb	r3, [r7, #7]
 8007da6:	009b      	lsls	r3, r3, #2
 8007da8:	3301      	adds	r3, #1
 8007daa:	00da      	lsls	r2, r3, #3
 8007dac:	4b2a      	ldr	r3, [pc, #168]	; (8007e58 <recv+0x100>)
 8007dae:	4413      	add	r3, r2
 8007db0:	4618      	mov	r0, r3
 8007db2:	f7ff f9cf 	bl	8007154 <WIZCHIP_READ>
 8007db6:	4603      	mov	r3, r0
 8007db8:	73fb      	strb	r3, [r7, #15]
      if (tmp != SOCK_ESTABLISHED && tmp != SOCK_CLOSE_WAIT)
 8007dba:	7bfb      	ldrb	r3, [r7, #15]
 8007dbc:	2b17      	cmp	r3, #23
 8007dbe:	d00c      	beq.n	8007dda <recv+0x82>
 8007dc0:	7bfb      	ldrb	r3, [r7, #15]
 8007dc2:	2b1c      	cmp	r3, #28
 8007dc4:	d009      	beq.n	8007dda <recv+0x82>
      {
         if(tmp == SOCK_CLOSED) close(sn);
 8007dc6:	7bfb      	ldrb	r3, [r7, #15]
 8007dc8:	2b00      	cmp	r3, #0
 8007dca:	d103      	bne.n	8007dd4 <recv+0x7c>
 8007dcc:	79fb      	ldrb	r3, [r7, #7]
 8007dce:	4618      	mov	r0, r3
 8007dd0:	f7ff fd9a 	bl	8007908 <close>
         return SOCKERR_SOCKSTATUS;
 8007dd4:	f06f 0306 	mvn.w	r3, #6
 8007dd8:	e038      	b.n	8007e4c <recv+0xf4>
      }
      if(recvsize) break;
 8007dda:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 8007dde:	2b00      	cmp	r3, #0
 8007de0:	d10b      	bne.n	8007dfa <recv+0xa2>
      if(sock_io_mode & (1<<sn)) return SOCK_BUSY;
 8007de2:	4b1e      	ldr	r3, [pc, #120]	; (8007e5c <recv+0x104>)
 8007de4:	881b      	ldrh	r3, [r3, #0]
 8007de6:	461a      	mov	r2, r3
 8007de8:	79fb      	ldrb	r3, [r7, #7]
 8007dea:	fa42 f303 	asr.w	r3, r2, r3
 8007dee:	f003 0301 	and.w	r3, r3, #1
 8007df2:	2b00      	cmp	r3, #0
 8007df4:	d0d0      	beq.n	8007d98 <recv+0x40>
 8007df6:	2300      	movs	r3, #0
 8007df8:	e028      	b.n	8007e4c <recv+0xf4>
      if(recvsize) break;
 8007dfa:	bf00      	nop
   }
   if(recvsize < len) len = recvsize;
 8007dfc:	f9b7 200c 	ldrsh.w	r2, [r7, #12]
 8007e00:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 8007e04:	429a      	cmp	r2, r3
 8007e06:	da01      	bge.n	8007e0c <recv+0xb4>
 8007e08:	89bb      	ldrh	r3, [r7, #12]
 8007e0a:	80bb      	strh	r3, [r7, #4]
   wiz_recv_data(sn, buf, len); 
 8007e0c:	f9b7 2004 	ldrsh.w	r2, [r7, #4]
 8007e10:	79fb      	ldrb	r3, [r7, #7]
 8007e12:	6839      	ldr	r1, [r7, #0]
 8007e14:	4618      	mov	r0, r3
 8007e16:	f7ff fb13 	bl	8007440 <wiz_recv_data>
   setSn_CR(sn,Sn_CR_RECV); 
 8007e1a:	79fb      	ldrb	r3, [r7, #7]
 8007e1c:	009b      	lsls	r3, r3, #2
 8007e1e:	3301      	adds	r3, #1
 8007e20:	00da      	lsls	r2, r3, #3
 8007e22:	4b0f      	ldr	r3, [pc, #60]	; (8007e60 <recv+0x108>)
 8007e24:	4413      	add	r3, r2
 8007e26:	2140      	movs	r1, #64	; 0x40
 8007e28:	4618      	mov	r0, r3
 8007e2a:	f7ff f965 	bl	80070f8 <WIZCHIP_WRITE>
   while(getSn_CR(sn));  
 8007e2e:	bf00      	nop
 8007e30:	79fb      	ldrb	r3, [r7, #7]
 8007e32:	009b      	lsls	r3, r3, #2
 8007e34:	3301      	adds	r3, #1
 8007e36:	00da      	lsls	r2, r3, #3
 8007e38:	4b09      	ldr	r3, [pc, #36]	; (8007e60 <recv+0x108>)
 8007e3a:	4413      	add	r3, r2
 8007e3c:	4618      	mov	r0, r3
 8007e3e:	f7ff f989 	bl	8007154 <WIZCHIP_READ>
 8007e42:	4603      	mov	r3, r0
 8007e44:	2b00      	cmp	r3, #0
 8007e46:	d1f3      	bne.n	8007e30 <recv+0xd8>
   return len;
 8007e48:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
}
 8007e4c:	4618      	mov	r0, r3
 8007e4e:	3710      	adds	r7, #16
 8007e50:	46bd      	mov	sp, r7
 8007e52:	bd80      	pop	{r7, pc}
 8007e54:	60022000 	.word	0x60022000
 8007e58:	60003000 	.word	0x60003000
 8007e5c:	2000013c 	.word	0x2000013c
 8007e60:	60001000 	.word	0x60001000

08007e64 <ctlsocket>:
 
   return pack_len;
}

int8_t ctlsocket(uint8_t sn, ctlsock_type cstype, void* arg)
{
 8007e64:	b580      	push	{r7, lr}
 8007e66:	b084      	sub	sp, #16
 8007e68:	af00      	add	r7, sp, #0
 8007e6a:	4603      	mov	r3, r0
 8007e6c:	603a      	str	r2, [r7, #0]
 8007e6e:	71fb      	strb	r3, [r7, #7]
 8007e70:	460b      	mov	r3, r1
 8007e72:	71bb      	strb	r3, [r7, #6]
   uint8_t tmp = 0;
 8007e74:	2300      	movs	r3, #0
 8007e76:	73fb      	strb	r3, [r7, #15]
   CHECK_SOCKNUM();
 8007e78:	79fb      	ldrb	r3, [r7, #7]
 8007e7a:	2b07      	cmp	r3, #7
 8007e7c:	d902      	bls.n	8007e84 <ctlsocket+0x20>
 8007e7e:	f04f 33ff 	mov.w	r3, #4294967295
 8007e82:	e0d8      	b.n	8008036 <ctlsocket+0x1d2>
   tmp = *((uint8_t*)arg); 
 8007e84:	683b      	ldr	r3, [r7, #0]
 8007e86:	781b      	ldrb	r3, [r3, #0]
 8007e88:	73fb      	strb	r3, [r7, #15]
   switch(cstype)
 8007e8a:	79bb      	ldrb	r3, [r7, #6]
 8007e8c:	2b09      	cmp	r3, #9
 8007e8e:	f200 80ce 	bhi.w	800802e <ctlsocket+0x1ca>
 8007e92:	a201      	add	r2, pc, #4	; (adr r2, 8007e98 <ctlsocket+0x34>)
 8007e94:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007e98:	08007ec1 	.word	0x08007ec1
 8007e9c:	08007f0f 	.word	0x08007f0f
 8007ea0:	08007f29 	.word	0x08007f29
 8007ea4:	08007f47 	.word	0x08007f47
 8007ea8:	08007f65 	.word	0x08007f65
 8007eac:	08007f8b 	.word	0x08007f8b
 8007eb0:	08007fa7 	.word	0x08007fa7
 8007eb4:	08007fcd 	.word	0x08007fcd
 8007eb8:	08007fe9 	.word	0x08007fe9
 8007ebc:	08008013 	.word	0x08008013
   {
      case CS_SET_IOMODE:
         if(tmp == SOCK_IO_NONBLOCK)  sock_io_mode |= (1<<sn);
 8007ec0:	7bfb      	ldrb	r3, [r7, #15]
 8007ec2:	2b01      	cmp	r3, #1
 8007ec4:	d10d      	bne.n	8007ee2 <ctlsocket+0x7e>
 8007ec6:	79fb      	ldrb	r3, [r7, #7]
 8007ec8:	2201      	movs	r2, #1
 8007eca:	fa02 f303 	lsl.w	r3, r2, r3
 8007ece:	b21a      	sxth	r2, r3
 8007ed0:	4b5b      	ldr	r3, [pc, #364]	; (8008040 <ctlsocket+0x1dc>)
 8007ed2:	881b      	ldrh	r3, [r3, #0]
 8007ed4:	b21b      	sxth	r3, r3
 8007ed6:	4313      	orrs	r3, r2
 8007ed8:	b21b      	sxth	r3, r3
 8007eda:	b29a      	uxth	r2, r3
 8007edc:	4b58      	ldr	r3, [pc, #352]	; (8008040 <ctlsocket+0x1dc>)
 8007ede:	801a      	strh	r2, [r3, #0]
         else if(tmp == SOCK_IO_BLOCK) sock_io_mode &= ~(1<<sn);
         else return SOCKERR_ARG;
         break;
 8007ee0:	e0a8      	b.n	8008034 <ctlsocket+0x1d0>
         else if(tmp == SOCK_IO_BLOCK) sock_io_mode &= ~(1<<sn);
 8007ee2:	7bfb      	ldrb	r3, [r7, #15]
 8007ee4:	2b00      	cmp	r3, #0
 8007ee6:	d10f      	bne.n	8007f08 <ctlsocket+0xa4>
 8007ee8:	79fb      	ldrb	r3, [r7, #7]
 8007eea:	2201      	movs	r2, #1
 8007eec:	fa02 f303 	lsl.w	r3, r2, r3
 8007ef0:	b21b      	sxth	r3, r3
 8007ef2:	43db      	mvns	r3, r3
 8007ef4:	b21a      	sxth	r2, r3
 8007ef6:	4b52      	ldr	r3, [pc, #328]	; (8008040 <ctlsocket+0x1dc>)
 8007ef8:	881b      	ldrh	r3, [r3, #0]
 8007efa:	b21b      	sxth	r3, r3
 8007efc:	4013      	ands	r3, r2
 8007efe:	b21b      	sxth	r3, r3
 8007f00:	b29a      	uxth	r2, r3
 8007f02:	4b4f      	ldr	r3, [pc, #316]	; (8008040 <ctlsocket+0x1dc>)
 8007f04:	801a      	strh	r2, [r3, #0]
         break;
 8007f06:	e095      	b.n	8008034 <ctlsocket+0x1d0>
         else return SOCKERR_ARG;
 8007f08:	f06f 0309 	mvn.w	r3, #9
 8007f0c:	e093      	b.n	8008036 <ctlsocket+0x1d2>
      case CS_GET_IOMODE: 
         *((uint8_t*)arg) = (uint8_t)((sock_io_mode >> sn) & 0x0001);
 8007f0e:	4b4c      	ldr	r3, [pc, #304]	; (8008040 <ctlsocket+0x1dc>)
 8007f10:	881b      	ldrh	r3, [r3, #0]
 8007f12:	461a      	mov	r2, r3
 8007f14:	79fb      	ldrb	r3, [r7, #7]
 8007f16:	fa42 f303 	asr.w	r3, r2, r3
 8007f1a:	b2db      	uxtb	r3, r3
 8007f1c:	f003 0301 	and.w	r3, r3, #1
 8007f20:	b2da      	uxtb	r2, r3
 8007f22:	683b      	ldr	r3, [r7, #0]
 8007f24:	701a      	strb	r2, [r3, #0]
         break;
 8007f26:	e085      	b.n	8008034 <ctlsocket+0x1d0>
      case CS_GET_MAXTXBUF:
         *((datasize_t*)arg) = getSn_TxMAX(sn);
 8007f28:	79fb      	ldrb	r3, [r7, #7]
 8007f2a:	009b      	lsls	r3, r3, #2
 8007f2c:	3301      	adds	r3, #1
 8007f2e:	00da      	lsls	r2, r3, #3
 8007f30:	4b44      	ldr	r3, [pc, #272]	; (8008044 <ctlsocket+0x1e0>)
 8007f32:	4413      	add	r3, r2
 8007f34:	4618      	mov	r0, r3
 8007f36:	f7ff f90d 	bl	8007154 <WIZCHIP_READ>
 8007f3a:	4603      	mov	r3, r0
 8007f3c:	029b      	lsls	r3, r3, #10
 8007f3e:	b21a      	sxth	r2, r3
 8007f40:	683b      	ldr	r3, [r7, #0]
 8007f42:	801a      	strh	r2, [r3, #0]
         break;
 8007f44:	e076      	b.n	8008034 <ctlsocket+0x1d0>
      case CS_GET_MAXRXBUF:  
         *((datasize_t*)arg) = getSn_RxMAX(sn);
 8007f46:	79fb      	ldrb	r3, [r7, #7]
 8007f48:	009b      	lsls	r3, r3, #2
 8007f4a:	3301      	adds	r3, #1
 8007f4c:	00da      	lsls	r2, r3, #3
 8007f4e:	4b3e      	ldr	r3, [pc, #248]	; (8008048 <ctlsocket+0x1e4>)
 8007f50:	4413      	add	r3, r2
 8007f52:	4618      	mov	r0, r3
 8007f54:	f7ff f8fe 	bl	8007154 <WIZCHIP_READ>
 8007f58:	4603      	mov	r3, r0
 8007f5a:	029b      	lsls	r3, r3, #10
 8007f5c:	b21a      	sxth	r2, r3
 8007f5e:	683b      	ldr	r3, [r7, #0]
 8007f60:	801a      	strh	r2, [r3, #0]
         break;
 8007f62:	e067      	b.n	8008034 <ctlsocket+0x1d0>
      case CS_CLR_INTERRUPT:
         if( tmp > SIK_ALL) return SOCKERR_ARG;
 8007f64:	7bfb      	ldrb	r3, [r7, #15]
 8007f66:	2b1f      	cmp	r3, #31
 8007f68:	d902      	bls.n	8007f70 <ctlsocket+0x10c>
 8007f6a:	f06f 0309 	mvn.w	r3, #9
 8007f6e:	e062      	b.n	8008036 <ctlsocket+0x1d2>
         setSn_IRCLR(sn,tmp);
 8007f70:	79fb      	ldrb	r3, [r7, #7]
 8007f72:	009b      	lsls	r3, r3, #2
 8007f74:	3301      	adds	r3, #1
 8007f76:	00da      	lsls	r2, r3, #3
 8007f78:	4b34      	ldr	r3, [pc, #208]	; (800804c <ctlsocket+0x1e8>)
 8007f7a:	4413      	add	r3, r2
 8007f7c:	461a      	mov	r2, r3
 8007f7e:	7bfb      	ldrb	r3, [r7, #15]
 8007f80:	4619      	mov	r1, r3
 8007f82:	4610      	mov	r0, r2
 8007f84:	f7ff f8b8 	bl	80070f8 <WIZCHIP_WRITE>
         break;
 8007f88:	e054      	b.n	8008034 <ctlsocket+0x1d0>
      case CS_GET_INTERRUPT:
         *((uint8_t*)arg) = getSn_IR(sn);
 8007f8a:	79fb      	ldrb	r3, [r7, #7]
 8007f8c:	009b      	lsls	r3, r3, #2
 8007f8e:	3301      	adds	r3, #1
 8007f90:	00da      	lsls	r2, r3, #3
 8007f92:	4b2f      	ldr	r3, [pc, #188]	; (8008050 <ctlsocket+0x1ec>)
 8007f94:	4413      	add	r3, r2
 8007f96:	4618      	mov	r0, r3
 8007f98:	f7ff f8dc 	bl	8007154 <WIZCHIP_READ>
 8007f9c:	4603      	mov	r3, r0
 8007f9e:	461a      	mov	r2, r3
 8007fa0:	683b      	ldr	r3, [r7, #0]
 8007fa2:	701a      	strb	r2, [r3, #0]
         break;
 8007fa4:	e046      	b.n	8008034 <ctlsocket+0x1d0>
      case CS_SET_INTMASK:
         if( tmp > SIK_ALL) return SOCKERR_ARG;
 8007fa6:	7bfb      	ldrb	r3, [r7, #15]
 8007fa8:	2b1f      	cmp	r3, #31
 8007faa:	d902      	bls.n	8007fb2 <ctlsocket+0x14e>
 8007fac:	f06f 0309 	mvn.w	r3, #9
 8007fb0:	e041      	b.n	8008036 <ctlsocket+0x1d2>
         setSn_IMR(sn,tmp);
 8007fb2:	79fb      	ldrb	r3, [r7, #7]
 8007fb4:	009b      	lsls	r3, r3, #2
 8007fb6:	3301      	adds	r3, #1
 8007fb8:	00da      	lsls	r2, r3, #3
 8007fba:	4b26      	ldr	r3, [pc, #152]	; (8008054 <ctlsocket+0x1f0>)
 8007fbc:	4413      	add	r3, r2
 8007fbe:	461a      	mov	r2, r3
 8007fc0:	7bfb      	ldrb	r3, [r7, #15]
 8007fc2:	4619      	mov	r1, r3
 8007fc4:	4610      	mov	r0, r2
 8007fc6:	f7ff f897 	bl	80070f8 <WIZCHIP_WRITE>
         break;
 8007fca:	e033      	b.n	8008034 <ctlsocket+0x1d0>
      case CS_GET_INTMASK:
         *((uint8_t*)arg) = getSn_IMR(sn);
 8007fcc:	79fb      	ldrb	r3, [r7, #7]
 8007fce:	009b      	lsls	r3, r3, #2
 8007fd0:	3301      	adds	r3, #1
 8007fd2:	00da      	lsls	r2, r3, #3
 8007fd4:	4b1f      	ldr	r3, [pc, #124]	; (8008054 <ctlsocket+0x1f0>)
 8007fd6:	4413      	add	r3, r2
 8007fd8:	4618      	mov	r0, r3
 8007fda:	f7ff f8bb 	bl	8007154 <WIZCHIP_READ>
 8007fde:	4603      	mov	r3, r0
 8007fe0:	461a      	mov	r2, r3
 8007fe2:	683b      	ldr	r3, [r7, #0]
 8007fe4:	701a      	strb	r2, [r3, #0]
         break;
 8007fe6:	e025      	b.n	8008034 <ctlsocket+0x1d0>
      case CS_SET_PREFER:
    	  if((tmp & 0x03) == 0x01) return SOCKERR_ARG;
 8007fe8:	7bfb      	ldrb	r3, [r7, #15]
 8007fea:	f003 0303 	and.w	r3, r3, #3
 8007fee:	2b01      	cmp	r3, #1
 8007ff0:	d102      	bne.n	8007ff8 <ctlsocket+0x194>
 8007ff2:	f06f 0309 	mvn.w	r3, #9
 8007ff6:	e01e      	b.n	8008036 <ctlsocket+0x1d2>
    	  setSn_PSR(sn, tmp);
 8007ff8:	79fb      	ldrb	r3, [r7, #7]
 8007ffa:	009b      	lsls	r3, r3, #2
 8007ffc:	3301      	adds	r3, #1
 8007ffe:	00da      	lsls	r2, r3, #3
 8008000:	4b15      	ldr	r3, [pc, #84]	; (8008058 <ctlsocket+0x1f4>)
 8008002:	4413      	add	r3, r2
 8008004:	461a      	mov	r2, r3
 8008006:	7bfb      	ldrb	r3, [r7, #15]
 8008008:	4619      	mov	r1, r3
 800800a:	4610      	mov	r0, r2
 800800c:	f7ff f874 	bl	80070f8 <WIZCHIP_WRITE>
    	  break;
 8008010:	e010      	b.n	8008034 <ctlsocket+0x1d0>
      case CS_GET_PREFER:
    	  *(uint8_t*) arg = getSn_PSR(sn);
 8008012:	79fb      	ldrb	r3, [r7, #7]
 8008014:	009b      	lsls	r3, r3, #2
 8008016:	3301      	adds	r3, #1
 8008018:	00da      	lsls	r2, r3, #3
 800801a:	4b0f      	ldr	r3, [pc, #60]	; (8008058 <ctlsocket+0x1f4>)
 800801c:	4413      	add	r3, r2
 800801e:	4618      	mov	r0, r3
 8008020:	f7ff f898 	bl	8007154 <WIZCHIP_READ>
 8008024:	4603      	mov	r3, r0
 8008026:	461a      	mov	r2, r3
 8008028:	683b      	ldr	r3, [r7, #0]
 800802a:	701a      	strb	r2, [r3, #0]
    	  break;
 800802c:	e002      	b.n	8008034 <ctlsocket+0x1d0>
      default:
         return SOCKERR_ARG;
 800802e:	f06f 0309 	mvn.w	r3, #9
 8008032:	e000      	b.n	8008036 <ctlsocket+0x1d2>
   }
   return SOCK_OK;
 8008034:	2301      	movs	r3, #1
}
 8008036:	4618      	mov	r0, r3
 8008038:	3710      	adds	r7, #16
 800803a:	46bd      	mov	sp, r7
 800803c:	bd80      	pop	{r7, pc}
 800803e:	bf00      	nop
 8008040:	2000013c 	.word	0x2000013c
 8008044:	60020000 	.word	0x60020000
 8008048:	60022000 	.word	0x60022000
 800804c:	60002800 	.word	0x60002800
 8008050:	60002000 	.word	0x60002000
 8008054:	60002400 	.word	0x60002400
 8008058:	60000400 	.word	0x60000400

0800805c <getsockopt>:
   } 
   return SOCK_OK;
}

int8_t getsockopt(uint8_t sn, sockopt_type sotype, void* arg)
{
 800805c:	b590      	push	{r4, r7, lr}
 800805e:	b083      	sub	sp, #12
 8008060:	af00      	add	r7, sp, #0
 8008062:	4603      	mov	r3, r0
 8008064:	603a      	str	r2, [r7, #0]
 8008066:	71fb      	strb	r3, [r7, #7]
 8008068:	460b      	mov	r3, r1
 800806a:	71bb      	strb	r3, [r7, #6]
   CHECK_SOCKNUM();
 800806c:	79fb      	ldrb	r3, [r7, #7]
 800806e:	2b07      	cmp	r3, #7
 8008070:	d902      	bls.n	8008078 <getsockopt+0x1c>
 8008072:	f04f 33ff 	mov.w	r3, #4294967295
 8008076:	e1b0      	b.n	80083da <getsockopt+0x37e>
   switch(sotype)
 8008078:	79bb      	ldrb	r3, [r7, #6]
 800807a:	2b0e      	cmp	r3, #14
 800807c:	f200 81a9 	bhi.w	80083d2 <getsockopt+0x376>
 8008080:	a201      	add	r2, pc, #4	; (adr r2, 8008088 <getsockopt+0x2c>)
 8008082:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008086:	bf00      	nop
 8008088:	080080c5 	.word	0x080080c5
 800808c:	08008121 	.word	0x08008121
 8008090:	0800813d 	.word	0x0800813d
 8008094:	08008159 	.word	0x08008159
 8008098:	08008193 	.word	0x08008193
 800809c:	08008211 	.word	0x08008211
 80080a0:	080083d3 	.word	0x080083d3
 80080a4:	0800824b 	.word	0x0800824b
 80080a8:	08008289 	.word	0x08008289
 80080ac:	0800829b 	.word	0x0800829b
 80080b0:	080082ad 	.word	0x080082ad
 80080b4:	080082c9 	.word	0x080082c9
 80080b8:	0800830b 	.word	0x0800830b
 80080bc:	080083b3 	.word	0x080083b3
 80080c0:	08008367 	.word	0x08008367
   {
      case SO_FLAG:
         *(uint8_t*)arg = (getSn_MR(sn) & 0xF0) | (getSn_MR2(sn)) | ((uint8_t)(((sock_io_mode >> sn) & 0x0001) << 3));
 80080c4:	79fb      	ldrb	r3, [r7, #7]
 80080c6:	009b      	lsls	r3, r3, #2
 80080c8:	3301      	adds	r3, #1
 80080ca:	00db      	lsls	r3, r3, #3
 80080cc:	f103 43c0 	add.w	r3, r3, #1610612736	; 0x60000000
 80080d0:	4618      	mov	r0, r3
 80080d2:	f7ff f83f 	bl	8007154 <WIZCHIP_READ>
 80080d6:	4603      	mov	r3, r0
 80080d8:	b25b      	sxtb	r3, r3
 80080da:	f023 030f 	bic.w	r3, r3, #15
 80080de:	b25c      	sxtb	r4, r3
 80080e0:	79fb      	ldrb	r3, [r7, #7]
 80080e2:	009b      	lsls	r3, r3, #2
 80080e4:	3301      	adds	r3, #1
 80080e6:	00da      	lsls	r2, r3, #3
 80080e8:	4bbe      	ldr	r3, [pc, #760]	; (80083e4 <getsockopt+0x388>)
 80080ea:	4413      	add	r3, r2
 80080ec:	4618      	mov	r0, r3
 80080ee:	f7ff f831 	bl	8007154 <WIZCHIP_READ>
 80080f2:	4603      	mov	r3, r0
 80080f4:	b25b      	sxtb	r3, r3
 80080f6:	4323      	orrs	r3, r4
 80080f8:	b25a      	sxtb	r2, r3
 80080fa:	4bbb      	ldr	r3, [pc, #748]	; (80083e8 <getsockopt+0x38c>)
 80080fc:	881b      	ldrh	r3, [r3, #0]
 80080fe:	4619      	mov	r1, r3
 8008100:	79fb      	ldrb	r3, [r7, #7]
 8008102:	fa41 f303 	asr.w	r3, r1, r3
 8008106:	b2db      	uxtb	r3, r3
 8008108:	00db      	lsls	r3, r3, #3
 800810a:	b2db      	uxtb	r3, r3
 800810c:	b25b      	sxtb	r3, r3
 800810e:	f003 0308 	and.w	r3, r3, #8
 8008112:	b25b      	sxtb	r3, r3
 8008114:	4313      	orrs	r3, r2
 8008116:	b25b      	sxtb	r3, r3
 8008118:	b2da      	uxtb	r2, r3
 800811a:	683b      	ldr	r3, [r7, #0]
 800811c:	701a      	strb	r2, [r3, #0]
         break;
 800811e:	e15b      	b.n	80083d8 <getsockopt+0x37c>
      case SO_TTL:
         *(uint8_t*) arg = getSn_TTLR(sn);
 8008120:	79fb      	ldrb	r3, [r7, #7]
 8008122:	009b      	lsls	r3, r3, #2
 8008124:	3301      	adds	r3, #1
 8008126:	00da      	lsls	r2, r3, #3
 8008128:	4bb0      	ldr	r3, [pc, #704]	; (80083ec <getsockopt+0x390>)
 800812a:	4413      	add	r3, r2
 800812c:	4618      	mov	r0, r3
 800812e:	f7ff f811 	bl	8007154 <WIZCHIP_READ>
 8008132:	4603      	mov	r3, r0
 8008134:	461a      	mov	r2, r3
 8008136:	683b      	ldr	r3, [r7, #0]
 8008138:	701a      	strb	r2, [r3, #0]
         break;
 800813a:	e14d      	b.n	80083d8 <getsockopt+0x37c>
      case SO_TOS:
         *(uint8_t*) arg = getSn_TOSR(sn);
 800813c:	79fb      	ldrb	r3, [r7, #7]
 800813e:	009b      	lsls	r3, r3, #2
 8008140:	3301      	adds	r3, #1
 8008142:	00da      	lsls	r2, r3, #3
 8008144:	4baa      	ldr	r3, [pc, #680]	; (80083f0 <getsockopt+0x394>)
 8008146:	4413      	add	r3, r2
 8008148:	4618      	mov	r0, r3
 800814a:	f7ff f803 	bl	8007154 <WIZCHIP_READ>
 800814e:	4603      	mov	r3, r0
 8008150:	461a      	mov	r2, r3
 8008152:	683b      	ldr	r3, [r7, #0]
 8008154:	701a      	strb	r2, [r3, #0]
         break;
 8008156:	e13f      	b.n	80083d8 <getsockopt+0x37c>
      case SO_MSS: 
         *(uint16_t*) arg = getSn_MSSR(sn);
 8008158:	79fb      	ldrb	r3, [r7, #7]
 800815a:	009b      	lsls	r3, r3, #2
 800815c:	3301      	adds	r3, #1
 800815e:	00da      	lsls	r2, r3, #3
 8008160:	4ba4      	ldr	r3, [pc, #656]	; (80083f4 <getsockopt+0x398>)
 8008162:	4413      	add	r3, r2
 8008164:	4618      	mov	r0, r3
 8008166:	f7fe fff5 	bl	8007154 <WIZCHIP_READ>
 800816a:	4603      	mov	r3, r0
 800816c:	b29b      	uxth	r3, r3
 800816e:	021b      	lsls	r3, r3, #8
 8008170:	b29c      	uxth	r4, r3
 8008172:	79fb      	ldrb	r3, [r7, #7]
 8008174:	009b      	lsls	r3, r3, #2
 8008176:	3301      	adds	r3, #1
 8008178:	00da      	lsls	r2, r3, #3
 800817a:	4b9f      	ldr	r3, [pc, #636]	; (80083f8 <getsockopt+0x39c>)
 800817c:	4413      	add	r3, r2
 800817e:	4618      	mov	r0, r3
 8008180:	f7fe ffe8 	bl	8007154 <WIZCHIP_READ>
 8008184:	4603      	mov	r3, r0
 8008186:	b29b      	uxth	r3, r3
 8008188:	4423      	add	r3, r4
 800818a:	b29a      	uxth	r2, r3
 800818c:	683b      	ldr	r3, [r7, #0]
 800818e:	801a      	strh	r2, [r3, #0]
         break;
 8008190:	e122      	b.n	80083d8 <getsockopt+0x37c>
      case SO_DESTIP:
         CHECK_TCPMODE();
 8008192:	79fb      	ldrb	r3, [r7, #7]
 8008194:	009b      	lsls	r3, r3, #2
 8008196:	3301      	adds	r3, #1
 8008198:	00db      	lsls	r3, r3, #3
 800819a:	f103 43c0 	add.w	r3, r3, #1610612736	; 0x60000000
 800819e:	4618      	mov	r0, r3
 80081a0:	f7fe ffd8 	bl	8007154 <WIZCHIP_READ>
 80081a4:	4603      	mov	r3, r0
 80081a6:	f003 0303 	and.w	r3, r3, #3
 80081aa:	2b01      	cmp	r3, #1
 80081ac:	d002      	beq.n	80081b4 <getsockopt+0x158>
 80081ae:	f06f 0304 	mvn.w	r3, #4
 80081b2:	e112      	b.n	80083da <getsockopt+0x37e>
         if(getSn_ESR(sn) & TCPSOCK_MODE) //IPv6 ?
 80081b4:	79fb      	ldrb	r3, [r7, #7]
 80081b6:	009b      	lsls	r3, r3, #2
 80081b8:	3301      	adds	r3, #1
 80081ba:	00da      	lsls	r2, r3, #3
 80081bc:	4b8f      	ldr	r3, [pc, #572]	; (80083fc <getsockopt+0x3a0>)
 80081be:	4413      	add	r3, r2
 80081c0:	4618      	mov	r0, r3
 80081c2:	f7fe ffc7 	bl	8007154 <WIZCHIP_READ>
 80081c6:	4603      	mov	r3, r0
 80081c8:	f003 0304 	and.w	r3, r3, #4
 80081cc:	2b00      	cmp	r3, #0
 80081ce:	d00f      	beq.n	80081f0 <getsockopt+0x194>
         {
            getSn_DIP6R(sn, ((wiz_IPAddress*)arg)->ip);
 80081d0:	79fb      	ldrb	r3, [r7, #7]
 80081d2:	009b      	lsls	r3, r3, #2
 80081d4:	3301      	adds	r3, #1
 80081d6:	00da      	lsls	r2, r3, #3
 80081d8:	4b89      	ldr	r3, [pc, #548]	; (8008400 <getsockopt+0x3a4>)
 80081da:	4413      	add	r3, r2
 80081dc:	4618      	mov	r0, r3
 80081de:	683b      	ldr	r3, [r7, #0]
 80081e0:	2210      	movs	r2, #16
 80081e2:	4619      	mov	r1, r3
 80081e4:	f7ff f822 	bl	800722c <WIZCHIP_READ_BUF>
            ((wiz_IPAddress*)arg)->len = 16;
 80081e8:	683b      	ldr	r3, [r7, #0]
 80081ea:	2210      	movs	r2, #16
 80081ec:	741a      	strb	r2, [r3, #16]
         else
         {
            getSn_DIPR(sn, ((wiz_IPAddress*)arg)->ip);
            ((wiz_IPAddress*)arg)->len = 4;
         } 
         break;
 80081ee:	e0f3      	b.n	80083d8 <getsockopt+0x37c>
            getSn_DIPR(sn, ((wiz_IPAddress*)arg)->ip);
 80081f0:	79fb      	ldrb	r3, [r7, #7]
 80081f2:	009b      	lsls	r3, r3, #2
 80081f4:	3301      	adds	r3, #1
 80081f6:	00da      	lsls	r2, r3, #3
 80081f8:	4b82      	ldr	r3, [pc, #520]	; (8008404 <getsockopt+0x3a8>)
 80081fa:	4413      	add	r3, r2
 80081fc:	4618      	mov	r0, r3
 80081fe:	683b      	ldr	r3, [r7, #0]
 8008200:	2204      	movs	r2, #4
 8008202:	4619      	mov	r1, r3
 8008204:	f7ff f812 	bl	800722c <WIZCHIP_READ_BUF>
            ((wiz_IPAddress*)arg)->len = 4;
 8008208:	683b      	ldr	r3, [r7, #0]
 800820a:	2204      	movs	r2, #4
 800820c:	741a      	strb	r2, [r3, #16]
         break;
 800820e:	e0e3      	b.n	80083d8 <getsockopt+0x37c>
      case SO_DESTPORT:  
         *(uint16_t*) arg = getSn_DPORTR(sn);
 8008210:	79fb      	ldrb	r3, [r7, #7]
 8008212:	009b      	lsls	r3, r3, #2
 8008214:	3301      	adds	r3, #1
 8008216:	00da      	lsls	r2, r3, #3
 8008218:	4b7b      	ldr	r3, [pc, #492]	; (8008408 <getsockopt+0x3ac>)
 800821a:	4413      	add	r3, r2
 800821c:	4618      	mov	r0, r3
 800821e:	f7fe ff99 	bl	8007154 <WIZCHIP_READ>
 8008222:	4603      	mov	r3, r0
 8008224:	b29b      	uxth	r3, r3
 8008226:	021b      	lsls	r3, r3, #8
 8008228:	b29c      	uxth	r4, r3
 800822a:	79fb      	ldrb	r3, [r7, #7]
 800822c:	009b      	lsls	r3, r3, #2
 800822e:	3301      	adds	r3, #1
 8008230:	00da      	lsls	r2, r3, #3
 8008232:	4b76      	ldr	r3, [pc, #472]	; (800840c <getsockopt+0x3b0>)
 8008234:	4413      	add	r3, r2
 8008236:	4618      	mov	r0, r3
 8008238:	f7fe ff8c 	bl	8007154 <WIZCHIP_READ>
 800823c:	4603      	mov	r3, r0
 800823e:	b29b      	uxth	r3, r3
 8008240:	4423      	add	r3, r4
 8008242:	b29a      	uxth	r2, r3
 8008244:	683b      	ldr	r3, [r7, #0]
 8008246:	801a      	strh	r2, [r3, #0]
         break; 
 8008248:	e0c6      	b.n	80083d8 <getsockopt+0x37c>
      case SO_KEEPALIVEAUTO:
         CHECK_TCPMODE();
 800824a:	79fb      	ldrb	r3, [r7, #7]
 800824c:	009b      	lsls	r3, r3, #2
 800824e:	3301      	adds	r3, #1
 8008250:	00db      	lsls	r3, r3, #3
 8008252:	f103 43c0 	add.w	r3, r3, #1610612736	; 0x60000000
 8008256:	4618      	mov	r0, r3
 8008258:	f7fe ff7c 	bl	8007154 <WIZCHIP_READ>
 800825c:	4603      	mov	r3, r0
 800825e:	f003 0303 	and.w	r3, r3, #3
 8008262:	2b01      	cmp	r3, #1
 8008264:	d002      	beq.n	800826c <getsockopt+0x210>
 8008266:	f06f 0304 	mvn.w	r3, #4
 800826a:	e0b6      	b.n	80083da <getsockopt+0x37e>
         *(uint16_t*) arg = getSn_KPALVTR(sn);
 800826c:	79fb      	ldrb	r3, [r7, #7]
 800826e:	009b      	lsls	r3, r3, #2
 8008270:	3301      	adds	r3, #1
 8008272:	00da      	lsls	r2, r3, #3
 8008274:	4b66      	ldr	r3, [pc, #408]	; (8008410 <getsockopt+0x3b4>)
 8008276:	4413      	add	r3, r2
 8008278:	4618      	mov	r0, r3
 800827a:	f7fe ff6b 	bl	8007154 <WIZCHIP_READ>
 800827e:	4603      	mov	r3, r0
 8008280:	b29a      	uxth	r2, r3
 8008282:	683b      	ldr	r3, [r7, #0]
 8008284:	801a      	strh	r2, [r3, #0]
         break;
 8008286:	e0a7      	b.n	80083d8 <getsockopt+0x37c>
      case SO_SENDBUF:
         *(datasize_t*) arg = getSn_TX_FSR(sn);
 8008288:	79fb      	ldrb	r3, [r7, #7]
 800828a:	4618      	mov	r0, r3
 800828c:	f7ff f806 	bl	800729c <getSn_TX_FSR>
 8008290:	4603      	mov	r3, r0
 8008292:	461a      	mov	r2, r3
 8008294:	683b      	ldr	r3, [r7, #0]
 8008296:	801a      	strh	r2, [r3, #0]
         break;
 8008298:	e09e      	b.n	80083d8 <getsockopt+0x37c>
      case SO_RECVBUF:
         *(datasize_t*) arg = getSn_RX_RSR(sn);
 800829a:	79fb      	ldrb	r3, [r7, #7]
 800829c:	4618      	mov	r0, r3
 800829e:	f7ff f835 	bl	800730c <getSn_RX_RSR>
 80082a2:	4603      	mov	r3, r0
 80082a4:	461a      	mov	r2, r3
 80082a6:	683b      	ldr	r3, [r7, #0]
 80082a8:	801a      	strh	r2, [r3, #0]
         break;
 80082aa:	e095      	b.n	80083d8 <getsockopt+0x37c>
      case SO_STATUS:
         *(uint8_t*) arg = getSn_SR(sn);
 80082ac:	79fb      	ldrb	r3, [r7, #7]
 80082ae:	009b      	lsls	r3, r3, #2
 80082b0:	3301      	adds	r3, #1
 80082b2:	00da      	lsls	r2, r3, #3
 80082b4:	4b57      	ldr	r3, [pc, #348]	; (8008414 <getsockopt+0x3b8>)
 80082b6:	4413      	add	r3, r2
 80082b8:	4618      	mov	r0, r3
 80082ba:	f7fe ff4b 	bl	8007154 <WIZCHIP_READ>
 80082be:	4603      	mov	r3, r0
 80082c0:	461a      	mov	r2, r3
 80082c2:	683b      	ldr	r3, [r7, #0]
 80082c4:	701a      	strb	r2, [r3, #0]
         break;
 80082c6:	e087      	b.n	80083d8 <getsockopt+0x37c>
      case SO_EXTSTATUS:
         CHECK_TCPMODE();
 80082c8:	79fb      	ldrb	r3, [r7, #7]
 80082ca:	009b      	lsls	r3, r3, #2
 80082cc:	3301      	adds	r3, #1
 80082ce:	00db      	lsls	r3, r3, #3
 80082d0:	f103 43c0 	add.w	r3, r3, #1610612736	; 0x60000000
 80082d4:	4618      	mov	r0, r3
 80082d6:	f7fe ff3d 	bl	8007154 <WIZCHIP_READ>
 80082da:	4603      	mov	r3, r0
 80082dc:	f003 0303 	and.w	r3, r3, #3
 80082e0:	2b01      	cmp	r3, #1
 80082e2:	d002      	beq.n	80082ea <getsockopt+0x28e>
 80082e4:	f06f 0304 	mvn.w	r3, #4
 80082e8:	e077      	b.n	80083da <getsockopt+0x37e>
         *(uint8_t*) arg = getSn_ESR(sn) & 0x07;
 80082ea:	79fb      	ldrb	r3, [r7, #7]
 80082ec:	009b      	lsls	r3, r3, #2
 80082ee:	3301      	adds	r3, #1
 80082f0:	00da      	lsls	r2, r3, #3
 80082f2:	4b42      	ldr	r3, [pc, #264]	; (80083fc <getsockopt+0x3a0>)
 80082f4:	4413      	add	r3, r2
 80082f6:	4618      	mov	r0, r3
 80082f8:	f7fe ff2c 	bl	8007154 <WIZCHIP_READ>
 80082fc:	4603      	mov	r3, r0
 80082fe:	f003 0307 	and.w	r3, r3, #7
 8008302:	b2da      	uxtb	r2, r3
 8008304:	683b      	ldr	r3, [r7, #0]
 8008306:	701a      	strb	r2, [r3, #0]
         break;
 8008308:	e066      	b.n	80083d8 <getsockopt+0x37c>
      case SO_REMAINSIZE:
         if(getSn_MR(sn)==SOCK_CLOSED) return SOCKERR_SOCKSTATUS;
 800830a:	79fb      	ldrb	r3, [r7, #7]
 800830c:	009b      	lsls	r3, r3, #2
 800830e:	3301      	adds	r3, #1
 8008310:	00db      	lsls	r3, r3, #3
 8008312:	f103 43c0 	add.w	r3, r3, #1610612736	; 0x60000000
 8008316:	4618      	mov	r0, r3
 8008318:	f7fe ff1c 	bl	8007154 <WIZCHIP_READ>
 800831c:	4603      	mov	r3, r0
 800831e:	2b00      	cmp	r3, #0
 8008320:	d102      	bne.n	8008328 <getsockopt+0x2cc>
 8008322:	f06f 0306 	mvn.w	r3, #6
 8008326:	e058      	b.n	80083da <getsockopt+0x37e>
         if(getSn_MR(sn) & 0x01)   *(uint16_t*)arg = getSn_RX_RSR(sn);
 8008328:	79fb      	ldrb	r3, [r7, #7]
 800832a:	009b      	lsls	r3, r3, #2
 800832c:	3301      	adds	r3, #1
 800832e:	00db      	lsls	r3, r3, #3
 8008330:	f103 43c0 	add.w	r3, r3, #1610612736	; 0x60000000
 8008334:	4618      	mov	r0, r3
 8008336:	f7fe ff0d 	bl	8007154 <WIZCHIP_READ>
 800833a:	4603      	mov	r3, r0
 800833c:	f003 0301 	and.w	r3, r3, #1
 8008340:	2b00      	cmp	r3, #0
 8008342:	d008      	beq.n	8008356 <getsockopt+0x2fa>
 8008344:	79fb      	ldrb	r3, [r7, #7]
 8008346:	4618      	mov	r0, r3
 8008348:	f7fe ffe0 	bl	800730c <getSn_RX_RSR>
 800834c:	4603      	mov	r3, r0
 800834e:	b29a      	uxth	r2, r3
 8008350:	683b      	ldr	r3, [r7, #0]
 8008352:	801a      	strh	r2, [r3, #0]
         else                      *(uint16_t*)arg = sock_remained_size[sn];
         break;
 8008354:	e040      	b.n	80083d8 <getsockopt+0x37c>
         else                      *(uint16_t*)arg = sock_remained_size[sn];
 8008356:	79fb      	ldrb	r3, [r7, #7]
 8008358:	4a2f      	ldr	r2, [pc, #188]	; (8008418 <getsockopt+0x3bc>)
 800835a:	f932 3013 	ldrsh.w	r3, [r2, r3, lsl #1]
 800835e:	b29a      	uxth	r2, r3
 8008360:	683b      	ldr	r3, [r7, #0]
 8008362:	801a      	strh	r2, [r3, #0]
         break;
 8008364:	e038      	b.n	80083d8 <getsockopt+0x37c>
      case SO_PACKINFO:
         if(getSn_MR(sn)==SOCK_CLOSED) return SOCKERR_SOCKSTATUS;
 8008366:	79fb      	ldrb	r3, [r7, #7]
 8008368:	009b      	lsls	r3, r3, #2
 800836a:	3301      	adds	r3, #1
 800836c:	00db      	lsls	r3, r3, #3
 800836e:	f103 43c0 	add.w	r3, r3, #1610612736	; 0x60000000
 8008372:	4618      	mov	r0, r3
 8008374:	f7fe feee 	bl	8007154 <WIZCHIP_READ>
 8008378:	4603      	mov	r3, r0
 800837a:	2b00      	cmp	r3, #0
 800837c:	d102      	bne.n	8008384 <getsockopt+0x328>
 800837e:	f06f 0306 	mvn.w	r3, #6
 8008382:	e02a      	b.n	80083da <getsockopt+0x37e>
         if(getSn_MR(sn) & 0x01)       return SOCKERR_SOCKMODE;
 8008384:	79fb      	ldrb	r3, [r7, #7]
 8008386:	009b      	lsls	r3, r3, #2
 8008388:	3301      	adds	r3, #1
 800838a:	00db      	lsls	r3, r3, #3
 800838c:	f103 43c0 	add.w	r3, r3, #1610612736	; 0x60000000
 8008390:	4618      	mov	r0, r3
 8008392:	f7fe fedf 	bl	8007154 <WIZCHIP_READ>
 8008396:	4603      	mov	r3, r0
 8008398:	f003 0301 	and.w	r3, r3, #1
 800839c:	2b00      	cmp	r3, #0
 800839e:	d002      	beq.n	80083a6 <getsockopt+0x34a>
 80083a0:	f06f 0304 	mvn.w	r3, #4
 80083a4:	e019      	b.n	80083da <getsockopt+0x37e>
         else *(uint8_t*)arg = sock_pack_info[sn];
 80083a6:	79fb      	ldrb	r3, [r7, #7]
 80083a8:	4a1c      	ldr	r2, [pc, #112]	; (800841c <getsockopt+0x3c0>)
 80083aa:	5cd2      	ldrb	r2, [r2, r3]
 80083ac:	683b      	ldr	r3, [r7, #0]
 80083ae:	701a      	strb	r2, [r3, #0]
         break;
 80083b0:	e012      	b.n	80083d8 <getsockopt+0x37c>
      case SO_MODE:
         *(uint8_t*) arg = 0x0F & getSn_MR(sn);
 80083b2:	79fb      	ldrb	r3, [r7, #7]
 80083b4:	009b      	lsls	r3, r3, #2
 80083b6:	3301      	adds	r3, #1
 80083b8:	00db      	lsls	r3, r3, #3
 80083ba:	f103 43c0 	add.w	r3, r3, #1610612736	; 0x60000000
 80083be:	4618      	mov	r0, r3
 80083c0:	f7fe fec8 	bl	8007154 <WIZCHIP_READ>
 80083c4:	4603      	mov	r3, r0
 80083c6:	f003 030f 	and.w	r3, r3, #15
 80083ca:	b2da      	uxtb	r2, r3
 80083cc:	683b      	ldr	r3, [r7, #0]
 80083ce:	701a      	strb	r2, [r3, #0]
         break;
 80083d0:	e002      	b.n	80083d8 <getsockopt+0x37c>
      default:
         return SOCKERR_SOCKOPT;
 80083d2:	f06f 0301 	mvn.w	r3, #1
 80083d6:	e000      	b.n	80083da <getsockopt+0x37e>
   }
   return SOCK_OK;
 80083d8:	2301      	movs	r3, #1
}
 80083da:	4618      	mov	r0, r3
 80083dc:	370c      	adds	r7, #12
 80083de:	46bd      	mov	sp, r7
 80083e0:	bd90      	pop	{r4, r7, pc}
 80083e2:	bf00      	nop
 80083e4:	60014400 	.word	0x60014400
 80083e8:	2000013c 	.word	0x2000013c
 80083ec:	60010800 	.word	0x60010800
 80083f0:	60010400 	.word	0x60010400
 80083f4:	60011000 	.word	0x60011000
 80083f8:	60011100 	.word	0x60011100
 80083fc:	60003100 	.word	0x60003100
 8008400:	60013000 	.word	0x60013000
 8008404:	60012000 	.word	0x60012000
 8008408:	60014000 	.word	0x60014000
 800840c:	60014100 	.word	0x60014100
 8008410:	60018800 	.word	0x60018800
 8008414:	60003000 	.word	0x60003000
 8008418:	20000140 	.word	0x20000140
 800841c:	20000150 	.word	0x20000150

08008420 <wizchip_cris_enter>:
 * @details @ref wizchip_cris_enter() provides the default protection while @ref _WIZCHIP_ is accessed. \n
 *          but it is null function.
 * @note It can be overwritten with your function or register your functions by calling @ref reg_wizchip_cris_cbfunc().
 * @sa wizchip_cris_exit()
 */
void wizchip_cris_enter(void)   {}
 8008420:	b480      	push	{r7}
 8008422:	af00      	add	r7, sp, #0
 8008424:	bf00      	nop
 8008426:	46bd      	mov	sp, r7
 8008428:	f85d 7b04 	ldr.w	r7, [sp], #4
 800842c:	4770      	bx	lr

0800842e <wizchip_cris_exit>:
 * @details @ref wizchip_cris_exit provides the default protection while @ref _WIZCHIP_ is accessed\n
 *          but it is null function.
 * @note It can be overwritten with your function or register your functions by calling @ref reg_wizchip_cris_cbfunc().
 * @sa wizchip_cris_enter()
 */
void wizchip_cris_exit(void)   {}
 800842e:	b480      	push	{r7}
 8008430:	af00      	add	r7, sp, #0
 8008432:	bf00      	nop
 8008434:	46bd      	mov	sp, r7
 8008436:	f85d 7b04 	ldr.w	r7, [sp], #4
 800843a:	4770      	bx	lr

0800843c <wizchip_cs_select>:
 * @details @ref wizchip_cs_select() provides the default selection @ref _WIZCHIP_,\n
 *          but it is null function.
 * @note It can be overwritten with your function or register your functions by calling @ref reg_wizchip_cs_cbfunc().
 * @sa wizchip_cs_deselect()
 */
void wizchip_cs_select(void)   {}
 800843c:	b480      	push	{r7}
 800843e:	af00      	add	r7, sp, #0
 8008440:	bf00      	nop
 8008442:	46bd      	mov	sp, r7
 8008444:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008448:	4770      	bx	lr

0800844a <wizchip_cs_deselect>:
 * @details @ref wizchip_cs_deselect() provides the default de-selection @ref _WIZCHIP_, \n
 *          but it is null function.
 * @note It can be overwritten with your function or register your functions by calling @ref reg_wizchip_cs_cbfunc().
 * @sa wizchip_cs_select()
 */
void wizchip_cs_deselect(void)   {}
 800844a:	b480      	push	{r7}
 800844c:	af00      	add	r7, sp, #0
 800844e:	bf00      	nop
 8008450:	46bd      	mov	sp, r7
 8008452:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008456:	4770      	bx	lr

08008458 <wizchip_bus_read>:
 * @param AddrSel It specifies the address of register to be read.
 * @return @ref iodata_t  
 * @note It can be overwritten with your function or register your functions by calling @ref reg_wizchip_bus_cbfunc().
 * @sa wizchip_bus_write()
 */
iodata_t wizchip_bus_read(uint32_t AddrSel) { return * ((volatile iodata_t *)((ptrdiff_t) AddrSel)); }
 8008458:	b480      	push	{r7}
 800845a:	b083      	sub	sp, #12
 800845c:	af00      	add	r7, sp, #0
 800845e:	6078      	str	r0, [r7, #4]
 8008460:	687b      	ldr	r3, [r7, #4]
 8008462:	781b      	ldrb	r3, [r3, #0]
 8008464:	b2db      	uxtb	r3, r3
 8008466:	4618      	mov	r0, r3
 8008468:	370c      	adds	r7, #12
 800846a:	46bd      	mov	sp, r7
 800846c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008470:	4770      	bx	lr

08008472 <wizchip_bus_write>:
 * @param wb @ref iodata_t data to be written
 * @return void
 * @note It can be overwritten with your function or register your functions by calling @ref reg_wizchip_bus_cbfunc().
 * @sa wizchip_bus_read()
 */
void wizchip_bus_write(uint32_t AddrSel, iodata_t wb)  { *((volatile iodata_t*)((ptrdiff_t)AddrSel)) = wb; }
 8008472:	b480      	push	{r7}
 8008474:	b083      	sub	sp, #12
 8008476:	af00      	add	r7, sp, #0
 8008478:	6078      	str	r0, [r7, #4]
 800847a:	460b      	mov	r3, r1
 800847c:	70fb      	strb	r3, [r7, #3]
 800847e:	687b      	ldr	r3, [r7, #4]
 8008480:	78fa      	ldrb	r2, [r7, #3]
 8008482:	701a      	strb	r2, [r3, #0]
 8008484:	bf00      	nop
 8008486:	370c      	adds	r7, #12
 8008488:	46bd      	mov	sp, r7
 800848a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800848e:	4770      	bx	lr

08008490 <wizchip_bus_read_buf>:
 * @return void
 * @note It can be overwritten with your function or register your functions by calling @ref reg_wizchip_bus_cbfunc().
 * @sa wizchip_bus_write_buf()
 */
void wizchip_bus_read_buf(uint32_t AddrSel, iodata_t* buf, datasize_t len, uint8_t addrinc)
{ 
 8008490:	b590      	push	{r4, r7, lr}
 8008492:	b087      	sub	sp, #28
 8008494:	af00      	add	r7, sp, #0
 8008496:	60f8      	str	r0, [r7, #12]
 8008498:	60b9      	str	r1, [r7, #8]
 800849a:	4611      	mov	r1, r2
 800849c:	461a      	mov	r2, r3
 800849e:	460b      	mov	r3, r1
 80084a0:	80fb      	strh	r3, [r7, #6]
 80084a2:	4613      	mov	r3, r2
 80084a4:	717b      	strb	r3, [r7, #5]
   datasize_t i;
   if(addrinc) addrinc = sizeof(iodata_t);
 80084a6:	797b      	ldrb	r3, [r7, #5]
 80084a8:	2b00      	cmp	r3, #0
 80084aa:	d001      	beq.n	80084b0 <wizchip_bus_read_buf+0x20>
 80084ac:	2301      	movs	r3, #1
 80084ae:	717b      	strb	r3, [r7, #5]
   for ( i = 0; i < len; i++)
 80084b0:	2300      	movs	r3, #0
 80084b2:	82fb      	strh	r3, [r7, #22]
 80084b4:	e012      	b.n	80084dc <wizchip_bus_read_buf+0x4c>
   {
      *buf++ = WIZCHIP.IF.BUS._read_data(AddrSel);
 80084b6:	4b0f      	ldr	r3, [pc, #60]	; (80084f4 <wizchip_bus_read_buf+0x64>)
 80084b8:	699b      	ldr	r3, [r3, #24]
 80084ba:	68bc      	ldr	r4, [r7, #8]
 80084bc:	1c62      	adds	r2, r4, #1
 80084be:	60ba      	str	r2, [r7, #8]
 80084c0:	68f8      	ldr	r0, [r7, #12]
 80084c2:	4798      	blx	r3
 80084c4:	4603      	mov	r3, r0
 80084c6:	7023      	strb	r3, [r4, #0]
      AddrSel += (uint32_t) addrinc;
 80084c8:	797b      	ldrb	r3, [r7, #5]
 80084ca:	68fa      	ldr	r2, [r7, #12]
 80084cc:	4413      	add	r3, r2
 80084ce:	60fb      	str	r3, [r7, #12]
   for ( i = 0; i < len; i++)
 80084d0:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 80084d4:	b29b      	uxth	r3, r3
 80084d6:	3301      	adds	r3, #1
 80084d8:	b29b      	uxth	r3, r3
 80084da:	82fb      	strh	r3, [r7, #22]
 80084dc:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 80084e0:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80084e4:	429a      	cmp	r2, r3
 80084e6:	dbe6      	blt.n	80084b6 <wizchip_bus_read_buf+0x26>
   }
}
 80084e8:	bf00      	nop
 80084ea:	bf00      	nop
 80084ec:	371c      	adds	r7, #28
 80084ee:	46bd      	mov	sp, r7
 80084f0:	bd90      	pop	{r4, r7, pc}
 80084f2:	bf00      	nop
 80084f4:	20000088 	.word	0x20000088

080084f8 <wizchip_bus_write_buf>:
 * @return void
 * @note It can be overwritten with your function or register your functions by calling @ref reg_wizchip_bus_cbfunc().
 * @sa wizchip_bus_read_buf()
 */
void wizchip_bus_write_buf(uint32_t AddrSel, iodata_t* buf, datasize_t len, uint8_t addrinc)
{ 
 80084f8:	b580      	push	{r7, lr}
 80084fa:	b086      	sub	sp, #24
 80084fc:	af00      	add	r7, sp, #0
 80084fe:	60f8      	str	r0, [r7, #12]
 8008500:	60b9      	str	r1, [r7, #8]
 8008502:	4611      	mov	r1, r2
 8008504:	461a      	mov	r2, r3
 8008506:	460b      	mov	r3, r1
 8008508:	80fb      	strh	r3, [r7, #6]
 800850a:	4613      	mov	r3, r2
 800850c:	717b      	strb	r3, [r7, #5]
   datasize_t i;
   if(addrinc) addrinc = sizeof(iodata_t);
 800850e:	797b      	ldrb	r3, [r7, #5]
 8008510:	2b00      	cmp	r3, #0
 8008512:	d001      	beq.n	8008518 <wizchip_bus_write_buf+0x20>
 8008514:	2301      	movs	r3, #1
 8008516:	717b      	strb	r3, [r7, #5]
   for( i = 0; i < len ; i++)
 8008518:	2300      	movs	r3, #0
 800851a:	82fb      	strh	r3, [r7, #22]
 800851c:	e012      	b.n	8008544 <wizchip_bus_write_buf+0x4c>
   {
      WIZCHIP.IF.BUS._write_data(AddrSel,*buf++);
 800851e:	4b0f      	ldr	r3, [pc, #60]	; (800855c <wizchip_bus_write_buf+0x64>)
 8008520:	69da      	ldr	r2, [r3, #28]
 8008522:	68bb      	ldr	r3, [r7, #8]
 8008524:	1c59      	adds	r1, r3, #1
 8008526:	60b9      	str	r1, [r7, #8]
 8008528:	781b      	ldrb	r3, [r3, #0]
 800852a:	4619      	mov	r1, r3
 800852c:	68f8      	ldr	r0, [r7, #12]
 800852e:	4790      	blx	r2
      AddrSel += (uint32_t)addrinc;
 8008530:	797b      	ldrb	r3, [r7, #5]
 8008532:	68fa      	ldr	r2, [r7, #12]
 8008534:	4413      	add	r3, r2
 8008536:	60fb      	str	r3, [r7, #12]
   for( i = 0; i < len ; i++)
 8008538:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 800853c:	b29b      	uxth	r3, r3
 800853e:	3301      	adds	r3, #1
 8008540:	b29b      	uxth	r3, r3
 8008542:	82fb      	strh	r3, [r7, #22]
 8008544:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 8008548:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800854c:	429a      	cmp	r2, r3
 800854e:	dbe6      	blt.n	800851e <wizchip_bus_write_buf+0x26>
   }

}
 8008550:	bf00      	nop
 8008552:	bf00      	nop
 8008554:	3718      	adds	r7, #24
 8008556:	46bd      	mov	sp, r7
 8008558:	bd80      	pop	{r7, pc}
 800855a:	bf00      	nop
 800855c:	20000088 	.word	0x20000088

08008560 <reg_wizchip_cs_cbfunc>:
   if(!cris_ex)   WIZCHIP.CRIS._e_x_i_t_  = wizchip_cris_exit;
   else           WIZCHIP.CRIS._e_x_i_t_  = cris_ex;
}

void reg_wizchip_cs_cbfunc(void(*cs_sel)(void), void(*cs_desel)(void))
{
 8008560:	b480      	push	{r7}
 8008562:	b083      	sub	sp, #12
 8008564:	af00      	add	r7, sp, #0
 8008566:	6078      	str	r0, [r7, #4]
 8008568:	6039      	str	r1, [r7, #0]
   if(!cs_sel)    WIZCHIP.CS._s_e_l_e_c_t_   = wizchip_cs_select;
 800856a:	687b      	ldr	r3, [r7, #4]
 800856c:	2b00      	cmp	r3, #0
 800856e:	d103      	bne.n	8008578 <reg_wizchip_cs_cbfunc+0x18>
 8008570:	4b0b      	ldr	r3, [pc, #44]	; (80085a0 <reg_wizchip_cs_cbfunc+0x40>)
 8008572:	4a0c      	ldr	r2, [pc, #48]	; (80085a4 <reg_wizchip_cs_cbfunc+0x44>)
 8008574:	611a      	str	r2, [r3, #16]
 8008576:	e002      	b.n	800857e <reg_wizchip_cs_cbfunc+0x1e>
   else           WIZCHIP.CS._s_e_l_e_c_t_   = cs_sel; 
 8008578:	4a09      	ldr	r2, [pc, #36]	; (80085a0 <reg_wizchip_cs_cbfunc+0x40>)
 800857a:	687b      	ldr	r3, [r7, #4]
 800857c:	6113      	str	r3, [r2, #16]
   if(!cs_desel)  WIZCHIP.CS._d_e_s_e_l_e_c_t_ = wizchip_cs_deselect;
 800857e:	683b      	ldr	r3, [r7, #0]
 8008580:	2b00      	cmp	r3, #0
 8008582:	d103      	bne.n	800858c <reg_wizchip_cs_cbfunc+0x2c>
 8008584:	4b06      	ldr	r3, [pc, #24]	; (80085a0 <reg_wizchip_cs_cbfunc+0x40>)
 8008586:	4a08      	ldr	r2, [pc, #32]	; (80085a8 <reg_wizchip_cs_cbfunc+0x48>)
 8008588:	615a      	str	r2, [r3, #20]
   else           WIZCHIP.CS._d_e_s_e_l_e_c_t_ = cs_desel;
}
 800858a:	e002      	b.n	8008592 <reg_wizchip_cs_cbfunc+0x32>
   else           WIZCHIP.CS._d_e_s_e_l_e_c_t_ = cs_desel;
 800858c:	4a04      	ldr	r2, [pc, #16]	; (80085a0 <reg_wizchip_cs_cbfunc+0x40>)
 800858e:	683b      	ldr	r3, [r7, #0]
 8008590:	6153      	str	r3, [r2, #20]
}
 8008592:	bf00      	nop
 8008594:	370c      	adds	r7, #12
 8008596:	46bd      	mov	sp, r7
 8008598:	f85d 7b04 	ldr.w	r7, [sp], #4
 800859c:	4770      	bx	lr
 800859e:	bf00      	nop
 80085a0:	20000088 	.word	0x20000088
 80085a4:	0800843d 	.word	0x0800843d
 80085a8:	0800844b 	.word	0x0800844b

080085ac <reg_wizchip_bus_cbfunc>:
#if (_WIZCHIP_IO_MODE_ & _WIZCHIP_IO_MODE_BUS_)
void reg_wizchip_bus_cbfunc( iodata_t(*bus_rd)(uint32_t addr), 
                             void (*bus_wd)(uint32_t addr, iodata_t wb),
                             void (*bus_rbuf)(uint32_t AddrSel, uint8_t* buf, datasize_t len, uint8_t inc),
                             void (*bus_wbuf)(uint32_t AddrSel, uint8_t* buf, datasize_t len, uint8_t inc) )
{
 80085ac:	b480      	push	{r7}
 80085ae:	b085      	sub	sp, #20
 80085b0:	af00      	add	r7, sp, #0
 80085b2:	60f8      	str	r0, [r7, #12]
 80085b4:	60b9      	str	r1, [r7, #8]
 80085b6:	607a      	str	r2, [r7, #4]
 80085b8:	603b      	str	r3, [r7, #0]
   while(!(WIZCHIP.if_mode & _WIZCHIP_IO_MODE_BUS_));   
 80085ba:	bf00      	nop
 80085bc:	4b19      	ldr	r3, [pc, #100]	; (8008624 <reg_wizchip_bus_cbfunc+0x78>)
 80085be:	881b      	ldrh	r3, [r3, #0]
 80085c0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80085c4:	2b00      	cmp	r3, #0
 80085c6:	d0f9      	beq.n	80085bc <reg_wizchip_bus_cbfunc+0x10>
   if(!bus_rd)  WIZCHIP.IF.BUS._read_data   = wizchip_bus_read;
 80085c8:	68fb      	ldr	r3, [r7, #12]
 80085ca:	2b00      	cmp	r3, #0
 80085cc:	d103      	bne.n	80085d6 <reg_wizchip_bus_cbfunc+0x2a>
 80085ce:	4b15      	ldr	r3, [pc, #84]	; (8008624 <reg_wizchip_bus_cbfunc+0x78>)
 80085d0:	4a15      	ldr	r2, [pc, #84]	; (8008628 <reg_wizchip_bus_cbfunc+0x7c>)
 80085d2:	619a      	str	r2, [r3, #24]
 80085d4:	e002      	b.n	80085dc <reg_wizchip_bus_cbfunc+0x30>
   else         WIZCHIP.IF.BUS._read_data   = bus_rd;
 80085d6:	4a13      	ldr	r2, [pc, #76]	; (8008624 <reg_wizchip_bus_cbfunc+0x78>)
 80085d8:	68fb      	ldr	r3, [r7, #12]
 80085da:	6193      	str	r3, [r2, #24]
   if(!bus_wd)  WIZCHIP.IF.BUS._write_data  = wizchip_bus_write;
 80085dc:	68bb      	ldr	r3, [r7, #8]
 80085de:	2b00      	cmp	r3, #0
 80085e0:	d103      	bne.n	80085ea <reg_wizchip_bus_cbfunc+0x3e>
 80085e2:	4b10      	ldr	r3, [pc, #64]	; (8008624 <reg_wizchip_bus_cbfunc+0x78>)
 80085e4:	4a11      	ldr	r2, [pc, #68]	; (800862c <reg_wizchip_bus_cbfunc+0x80>)
 80085e6:	61da      	str	r2, [r3, #28]
 80085e8:	e002      	b.n	80085f0 <reg_wizchip_bus_cbfunc+0x44>
   else         WIZCHIP.IF.BUS._write_data  = bus_wd;
 80085ea:	4a0e      	ldr	r2, [pc, #56]	; (8008624 <reg_wizchip_bus_cbfunc+0x78>)
 80085ec:	68bb      	ldr	r3, [r7, #8]
 80085ee:	61d3      	str	r3, [r2, #28]

   if(!bus_rbuf)  WIZCHIP.IF.BUS._read_data_buf   = wizchip_bus_read_buf;
 80085f0:	687b      	ldr	r3, [r7, #4]
 80085f2:	2b00      	cmp	r3, #0
 80085f4:	d103      	bne.n	80085fe <reg_wizchip_bus_cbfunc+0x52>
 80085f6:	4b0b      	ldr	r3, [pc, #44]	; (8008624 <reg_wizchip_bus_cbfunc+0x78>)
 80085f8:	4a0d      	ldr	r2, [pc, #52]	; (8008630 <reg_wizchip_bus_cbfunc+0x84>)
 80085fa:	621a      	str	r2, [r3, #32]
 80085fc:	e002      	b.n	8008604 <reg_wizchip_bus_cbfunc+0x58>
   else           WIZCHIP.IF.BUS._read_data_buf   = bus_rbuf;
 80085fe:	4a09      	ldr	r2, [pc, #36]	; (8008624 <reg_wizchip_bus_cbfunc+0x78>)
 8008600:	687b      	ldr	r3, [r7, #4]
 8008602:	6213      	str	r3, [r2, #32]
   if(!bus_wbuf)  WIZCHIP.IF.BUS._write_data_buf  = wizchip_bus_write_buf;
 8008604:	683b      	ldr	r3, [r7, #0]
 8008606:	2b00      	cmp	r3, #0
 8008608:	d103      	bne.n	8008612 <reg_wizchip_bus_cbfunc+0x66>
 800860a:	4b06      	ldr	r3, [pc, #24]	; (8008624 <reg_wizchip_bus_cbfunc+0x78>)
 800860c:	4a09      	ldr	r2, [pc, #36]	; (8008634 <reg_wizchip_bus_cbfunc+0x88>)
 800860e:	625a      	str	r2, [r3, #36]	; 0x24
   else           WIZCHIP.IF.BUS._write_data_buf  = bus_wbuf;
}
 8008610:	e002      	b.n	8008618 <reg_wizchip_bus_cbfunc+0x6c>
   else           WIZCHIP.IF.BUS._write_data_buf  = bus_wbuf;
 8008612:	4a04      	ldr	r2, [pc, #16]	; (8008624 <reg_wizchip_bus_cbfunc+0x78>)
 8008614:	683b      	ldr	r3, [r7, #0]
 8008616:	6253      	str	r3, [r2, #36]	; 0x24
}
 8008618:	bf00      	nop
 800861a:	3714      	adds	r7, #20
 800861c:	46bd      	mov	sp, r7
 800861e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008622:	4770      	bx	lr
 8008624:	20000088 	.word	0x20000088
 8008628:	08008459 	.word	0x08008459
 800862c:	08008473 	.word	0x08008473
 8008630:	08008491 	.word	0x08008491
 8008634:	080084f9 	.word	0x080084f9

08008638 <ctlwizchip>:
   else           WIZCHIP.IF.SPI._write_byte_buf = spi_wbuf;
}
#endif

int8_t ctlwizchip(ctlwizchip_type cwtype, void* arg)
{
 8008638:	b590      	push	{r4, r7, lr}
 800863a:	b087      	sub	sp, #28
 800863c:	af00      	add	r7, sp, #0
 800863e:	4603      	mov	r3, r0
 8008640:	6039      	str	r1, [r7, #0]
 8008642:	71fb      	strb	r3, [r7, #7]
   uint8_t tmp = *(uint8_t*) arg;
 8008644:	683b      	ldr	r3, [r7, #0]
 8008646:	781b      	ldrb	r3, [r3, #0]
 8008648:	75fb      	strb	r3, [r7, #23]

   uint8_t* ptmp[2] = {0,0};
 800864a:	2300      	movs	r3, #0
 800864c:	60fb      	str	r3, [r7, #12]
 800864e:	2300      	movs	r3, #0
 8008650:	613b      	str	r3, [r7, #16]
   switch(cwtype)
 8008652:	79fb      	ldrb	r3, [r7, #7]
 8008654:	2b17      	cmp	r3, #23
 8008656:	f200 8160 	bhi.w	800891a <ctlwizchip+0x2e2>
 800865a:	a201      	add	r2, pc, #4	; (adr r2, 8008660 <ctlwizchip+0x28>)
 800865c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008660:	080086c1 	.word	0x080086c1
 8008664:	080086fb 	.word	0x080086fb
 8008668:	08008735 	.word	0x08008735
 800866c:	08008747 	.word	0x08008747
 8008670:	0800874d 	.word	0x0800874d
 8008674:	0800876d 	.word	0x0800876d
 8008678:	08008779 	.word	0x08008779
 800867c:	08008785 	.word	0x08008785
 8008680:	08008791 	.word	0x08008791
 8008684:	0800879d 	.word	0x0800879d
 8008688:	080087bf 	.word	0x080087bf
 800868c:	080087e1 	.word	0x080087e1
 8008690:	08008817 	.word	0x08008817
 8008694:	08008829 	.word	0x08008829
 8008698:	08008863 	.word	0x08008863
 800869c:	08008885 	.word	0x08008885
 80086a0:	080088c3 	.word	0x080088c3
 80086a4:	080088d7 	.word	0x080088d7
 80086a8:	080088dd 	.word	0x080088dd
 80086ac:	080088e5 	.word	0x080088e5
 80086b0:	080088ed 	.word	0x080088ed
 80086b4:	080088f5 	.word	0x080088f5
 80086b8:	080088ff 	.word	0x080088ff
 80086bc:	0800890d 	.word	0x0800890d
   {
      case CW_SYS_LOCK:
         if(tmp & SYS_CHIP_LOCK) CHIPLOCK();
 80086c0:	7dfb      	ldrb	r3, [r7, #23]
 80086c2:	f003 0304 	and.w	r3, r3, #4
 80086c6:	2b00      	cmp	r3, #0
 80086c8:	d003      	beq.n	80086d2 <ctlwizchip+0x9a>
 80086ca:	21ff      	movs	r1, #255	; 0xff
 80086cc:	4899      	ldr	r0, [pc, #612]	; (8008934 <ctlwizchip+0x2fc>)
 80086ce:	f7fe fd13 	bl	80070f8 <WIZCHIP_WRITE>
         if(tmp & SYS_NET_LOCK)  NETLOCK();
 80086d2:	7dfb      	ldrb	r3, [r7, #23]
 80086d4:	f003 0302 	and.w	r3, r3, #2
 80086d8:	2b00      	cmp	r3, #0
 80086da:	d003      	beq.n	80086e4 <ctlwizchip+0xac>
 80086dc:	21c5      	movs	r1, #197	; 0xc5
 80086de:	4896      	ldr	r0, [pc, #600]	; (8008938 <ctlwizchip+0x300>)
 80086e0:	f7fe fd0a 	bl	80070f8 <WIZCHIP_WRITE>
         if(tmp & SYS_PHY_LOCK)  PHYLOCK();
 80086e4:	7dfb      	ldrb	r3, [r7, #23]
 80086e6:	f003 0301 	and.w	r3, r3, #1
 80086ea:	2b00      	cmp	r3, #0
 80086ec:	f000 8118 	beq.w	8008920 <ctlwizchip+0x2e8>
 80086f0:	21ff      	movs	r1, #255	; 0xff
 80086f2:	4892      	ldr	r0, [pc, #584]	; (800893c <ctlwizchip+0x304>)
 80086f4:	f7fe fd00 	bl	80070f8 <WIZCHIP_WRITE>
         break;
 80086f8:	e112      	b.n	8008920 <ctlwizchip+0x2e8>
      case CW_SYS_UNLOCK:
         if(tmp & SYS_CHIP_LOCK) CHIPUNLOCK();
 80086fa:	7dfb      	ldrb	r3, [r7, #23]
 80086fc:	f003 0304 	and.w	r3, r3, #4
 8008700:	2b00      	cmp	r3, #0
 8008702:	d003      	beq.n	800870c <ctlwizchip+0xd4>
 8008704:	21ce      	movs	r1, #206	; 0xce
 8008706:	488b      	ldr	r0, [pc, #556]	; (8008934 <ctlwizchip+0x2fc>)
 8008708:	f7fe fcf6 	bl	80070f8 <WIZCHIP_WRITE>
         if(tmp & SYS_NET_LOCK)  NETUNLOCK();
 800870c:	7dfb      	ldrb	r3, [r7, #23]
 800870e:	f003 0302 	and.w	r3, r3, #2
 8008712:	2b00      	cmp	r3, #0
 8008714:	d003      	beq.n	800871e <ctlwizchip+0xe6>
 8008716:	213a      	movs	r1, #58	; 0x3a
 8008718:	4887      	ldr	r0, [pc, #540]	; (8008938 <ctlwizchip+0x300>)
 800871a:	f7fe fced 	bl	80070f8 <WIZCHIP_WRITE>
         if(tmp & SYS_PHY_LOCK)  PHYUNLOCK();
 800871e:	7dfb      	ldrb	r3, [r7, #23]
 8008720:	f003 0301 	and.w	r3, r3, #1
 8008724:	2b00      	cmp	r3, #0
 8008726:	f000 80fd 	beq.w	8008924 <ctlwizchip+0x2ec>
 800872a:	2153      	movs	r1, #83	; 0x53
 800872c:	4883      	ldr	r0, [pc, #524]	; (800893c <ctlwizchip+0x304>)
 800872e:	f7fe fce3 	bl	80070f8 <WIZCHIP_WRITE>
         break;
 8008732:	e0f7      	b.n	8008924 <ctlwizchip+0x2ec>
      case CW_GET_SYSLOCK:
         *(uint8_t*)arg = getSYSR() >> 5;
 8008734:	4882      	ldr	r0, [pc, #520]	; (8008940 <ctlwizchip+0x308>)
 8008736:	f7fe fd0d 	bl	8007154 <WIZCHIP_READ>
 800873a:	4603      	mov	r3, r0
 800873c:	095b      	lsrs	r3, r3, #5
 800873e:	b2da      	uxtb	r2, r3
 8008740:	683b      	ldr	r3, [r7, #0]
 8008742:	701a      	strb	r2, [r3, #0]
         break;
 8008744:	e0f1      	b.n	800892a <ctlwizchip+0x2f2>
      case CW_RESET_WIZCHIP:
         wizchip_sw_reset();
 8008746:	f000 f95b 	bl	8008a00 <wizchip_sw_reset>
         break;
 800874a:	e0ee      	b.n	800892a <ctlwizchip+0x2f2>
      case CW_INIT_WIZCHIP:
         if(arg != 0) 
 800874c:	683b      	ldr	r3, [r7, #0]
 800874e:	2b00      	cmp	r3, #0
 8008750:	d004      	beq.n	800875c <ctlwizchip+0x124>
         {
            ptmp[0] = (uint8_t*)arg;
 8008752:	683b      	ldr	r3, [r7, #0]
 8008754:	60fb      	str	r3, [r7, #12]
            ptmp[1] = ptmp[0] + _WIZCHIP_SOCK_NUM_;
 8008756:	68fb      	ldr	r3, [r7, #12]
 8008758:	3308      	adds	r3, #8
 800875a:	613b      	str	r3, [r7, #16]
         }
         return wizchip_init(ptmp[0], ptmp[1]);
 800875c:	68fb      	ldr	r3, [r7, #12]
 800875e:	693a      	ldr	r2, [r7, #16]
 8008760:	4611      	mov	r1, r2
 8008762:	4618      	mov	r0, r3
 8008764:	f000 fa00 	bl	8008b68 <wizchip_init>
 8008768:	4603      	mov	r3, r0
 800876a:	e0df      	b.n	800892c <ctlwizchip+0x2f4>
      case CW_GET_INTERRUPT:
        *(intr_kind*)arg = wizchip_getinterrupt();
 800876c:	f000 fac8 	bl	8008d00 <wizchip_getinterrupt>
 8008770:	4602      	mov	r2, r0
 8008772:	683b      	ldr	r3, [r7, #0]
 8008774:	601a      	str	r2, [r3, #0]
         break;
 8008776:	e0d8      	b.n	800892a <ctlwizchip+0x2f2>
      case CW_CLR_INTERRUPT:
         wizchip_clrinterrupt(*(intr_kind*)arg);
 8008778:	683b      	ldr	r3, [r7, #0]
 800877a:	681b      	ldr	r3, [r3, #0]
 800877c:	4618      	mov	r0, r3
 800877e:	f000 fa83 	bl	8008c88 <wizchip_clrinterrupt>
         break;
 8008782:	e0d2      	b.n	800892a <ctlwizchip+0x2f2>
      case CW_SET_INTRMASK:
         wizchip_setinterruptmask(*(intr_kind*)arg);
 8008784:	683b      	ldr	r3, [r7, #0]
 8008786:	681b      	ldr	r3, [r3, #0]
 8008788:	4618      	mov	r0, r3
 800878a:	f000 fad9 	bl	8008d40 <wizchip_setinterruptmask>
         break;         
 800878e:	e0cc      	b.n	800892a <ctlwizchip+0x2f2>
      case CW_GET_INTRMASK:
         *(intr_kind*)arg = wizchip_getinterruptmask();
 8008790:	f000 fafc 	bl	8008d8c <wizchip_getinterruptmask>
 8008794:	4602      	mov	r2, r0
 8008796:	683b      	ldr	r3, [r7, #0]
 8008798:	601a      	str	r2, [r3, #0]
         break;   
 800879a:	e0c6      	b.n	800892a <ctlwizchip+0x2f2>
      case CW_SET_INTRTIME:
         setINTPTMR(*(uint16_t*)arg);
 800879c:	683b      	ldr	r3, [r7, #0]
 800879e:	881b      	ldrh	r3, [r3, #0]
 80087a0:	0a1b      	lsrs	r3, r3, #8
 80087a2:	b29b      	uxth	r3, r3
 80087a4:	b2db      	uxtb	r3, r3
 80087a6:	4619      	mov	r1, r3
 80087a8:	4866      	ldr	r0, [pc, #408]	; (8008944 <ctlwizchip+0x30c>)
 80087aa:	f7fe fca5 	bl	80070f8 <WIZCHIP_WRITE>
 80087ae:	683b      	ldr	r3, [r7, #0]
 80087b0:	881b      	ldrh	r3, [r3, #0]
 80087b2:	b2db      	uxtb	r3, r3
 80087b4:	4619      	mov	r1, r3
 80087b6:	4864      	ldr	r0, [pc, #400]	; (8008948 <ctlwizchip+0x310>)
 80087b8:	f7fe fc9e 	bl	80070f8 <WIZCHIP_WRITE>
         break;
 80087bc:	e0b5      	b.n	800892a <ctlwizchip+0x2f2>
      case CW_GET_INTRTIME:
         *(uint16_t*)arg = getINTPTMR();
 80087be:	4861      	ldr	r0, [pc, #388]	; (8008944 <ctlwizchip+0x30c>)
 80087c0:	f7fe fcc8 	bl	8007154 <WIZCHIP_READ>
 80087c4:	4603      	mov	r3, r0
 80087c6:	b29b      	uxth	r3, r3
 80087c8:	021b      	lsls	r3, r3, #8
 80087ca:	b29c      	uxth	r4, r3
 80087cc:	485e      	ldr	r0, [pc, #376]	; (8008948 <ctlwizchip+0x310>)
 80087ce:	f7fe fcc1 	bl	8007154 <WIZCHIP_READ>
 80087d2:	4603      	mov	r3, r0
 80087d4:	b29b      	uxth	r3, r3
 80087d6:	4423      	add	r3, r4
 80087d8:	b29a      	uxth	r2, r3
 80087da:	683b      	ldr	r3, [r7, #0]
 80087dc:	801a      	strh	r2, [r3, #0]
         break;   
 80087de:	e0a4      	b.n	800892a <ctlwizchip+0x2f2>
      case CW_SET_IEN:
         tmp = getSYCR1();
 80087e0:	485a      	ldr	r0, [pc, #360]	; (800894c <ctlwizchip+0x314>)
 80087e2:	f7fe fcb7 	bl	8007154 <WIZCHIP_READ>
 80087e6:	4603      	mov	r3, r0
 80087e8:	75fb      	strb	r3, [r7, #23]
         if(*(uint8_t*)arg == 1) setSYCR1(tmp | SYCR1_IEN);
 80087ea:	683b      	ldr	r3, [r7, #0]
 80087ec:	781b      	ldrb	r3, [r3, #0]
 80087ee:	2b01      	cmp	r3, #1
 80087f0:	d108      	bne.n	8008804 <ctlwizchip+0x1cc>
 80087f2:	7dfb      	ldrb	r3, [r7, #23]
 80087f4:	f063 037f 	orn	r3, r3, #127	; 0x7f
 80087f8:	b2db      	uxtb	r3, r3
 80087fa:	4619      	mov	r1, r3
 80087fc:	4853      	ldr	r0, [pc, #332]	; (800894c <ctlwizchip+0x314>)
 80087fe:	f7fe fc7b 	bl	80070f8 <WIZCHIP_WRITE>
         else                      setSYCR1(tmp & ~SYCR1_IEN);
         break;
 8008802:	e092      	b.n	800892a <ctlwizchip+0x2f2>
         else                      setSYCR1(tmp & ~SYCR1_IEN);
 8008804:	7dfb      	ldrb	r3, [r7, #23]
 8008806:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800880a:	b2db      	uxtb	r3, r3
 800880c:	4619      	mov	r1, r3
 800880e:	484f      	ldr	r0, [pc, #316]	; (800894c <ctlwizchip+0x314>)
 8008810:	f7fe fc72 	bl	80070f8 <WIZCHIP_WRITE>
         break;
 8008814:	e089      	b.n	800892a <ctlwizchip+0x2f2>
      case CW_GET_IEN:
         *((uint8_t*)arg) = getSYCR1() >> 7;
 8008816:	484d      	ldr	r0, [pc, #308]	; (800894c <ctlwizchip+0x314>)
 8008818:	f7fe fc9c 	bl	8007154 <WIZCHIP_READ>
 800881c:	4603      	mov	r3, r0
 800881e:	09db      	lsrs	r3, r3, #7
 8008820:	b2da      	uxtb	r2, r3
 8008822:	683b      	ldr	r3, [r7, #0]
 8008824:	701a      	strb	r2, [r3, #0]
         break;
 8008826:	e080      	b.n	800892a <ctlwizchip+0x2f2>
      case CW_GET_ID:
         ((uint8_t*)arg)[0] = WIZCHIP.id[0];
 8008828:	4b49      	ldr	r3, [pc, #292]	; (8008950 <ctlwizchip+0x318>)
 800882a:	789a      	ldrb	r2, [r3, #2]
 800882c:	683b      	ldr	r3, [r7, #0]
 800882e:	701a      	strb	r2, [r3, #0]
         ((uint8_t*)arg)[1] = WIZCHIP.id[1];
 8008830:	683b      	ldr	r3, [r7, #0]
 8008832:	3301      	adds	r3, #1
 8008834:	4a46      	ldr	r2, [pc, #280]	; (8008950 <ctlwizchip+0x318>)
 8008836:	78d2      	ldrb	r2, [r2, #3]
 8008838:	701a      	strb	r2, [r3, #0]
         ((uint8_t*)arg)[2] = WIZCHIP.id[2];
 800883a:	683b      	ldr	r3, [r7, #0]
 800883c:	3302      	adds	r3, #2
 800883e:	4a44      	ldr	r2, [pc, #272]	; (8008950 <ctlwizchip+0x318>)
 8008840:	7912      	ldrb	r2, [r2, #4]
 8008842:	701a      	strb	r2, [r3, #0]
         ((uint8_t*)arg)[3] = WIZCHIP.id[3];
 8008844:	683b      	ldr	r3, [r7, #0]
 8008846:	3303      	adds	r3, #3
 8008848:	4a41      	ldr	r2, [pc, #260]	; (8008950 <ctlwizchip+0x318>)
 800884a:	7952      	ldrb	r2, [r2, #5]
 800884c:	701a      	strb	r2, [r3, #0]
         ((uint8_t*)arg)[4] = WIZCHIP.id[4];
 800884e:	683b      	ldr	r3, [r7, #0]
 8008850:	3304      	adds	r3, #4
 8008852:	4a3f      	ldr	r2, [pc, #252]	; (8008950 <ctlwizchip+0x318>)
 8008854:	7992      	ldrb	r2, [r2, #6]
 8008856:	701a      	strb	r2, [r3, #0]
         ((uint8_t*)arg)[5] = 0;
 8008858:	683b      	ldr	r3, [r7, #0]
 800885a:	3305      	adds	r3, #5
 800885c:	2200      	movs	r2, #0
 800885e:	701a      	strb	r2, [r3, #0]
         break;   
 8008860:	e063      	b.n	800892a <ctlwizchip+0x2f2>
      case CW_GET_VER:
         *(uint16_t*)arg = getVER();
 8008862:	483c      	ldr	r0, [pc, #240]	; (8008954 <ctlwizchip+0x31c>)
 8008864:	f7fe fc76 	bl	8007154 <WIZCHIP_READ>
 8008868:	4603      	mov	r3, r0
 800886a:	b29b      	uxth	r3, r3
 800886c:	021b      	lsls	r3, r3, #8
 800886e:	b29c      	uxth	r4, r3
 8008870:	4839      	ldr	r0, [pc, #228]	; (8008958 <ctlwizchip+0x320>)
 8008872:	f7fe fc6f 	bl	8007154 <WIZCHIP_READ>
 8008876:	4603      	mov	r3, r0
 8008878:	b29b      	uxth	r3, r3
 800887a:	4423      	add	r3, r4
 800887c:	b29a      	uxth	r2, r3
 800887e:	683b      	ldr	r3, [r7, #0]
 8008880:	801a      	strh	r2, [r3, #0]
         break;
 8008882:	e052      	b.n	800892a <ctlwizchip+0x2f2>
      case CW_SET_SYSCLK:
         tmp = getSYCR1();
 8008884:	4831      	ldr	r0, [pc, #196]	; (800894c <ctlwizchip+0x314>)
 8008886:	f7fe fc65 	bl	8007154 <WIZCHIP_READ>
 800888a:	4603      	mov	r3, r0
 800888c:	75fb      	strb	r3, [r7, #23]
         if(*(uint8_t*)arg == SYSCLK_100MHZ)     setSYCR1(tmp & ~SYCR1_CLKSEL);
 800888e:	683b      	ldr	r3, [r7, #0]
 8008890:	781b      	ldrb	r3, [r3, #0]
 8008892:	2b00      	cmp	r3, #0
 8008894:	d108      	bne.n	80088a8 <ctlwizchip+0x270>
 8008896:	7dfb      	ldrb	r3, [r7, #23]
 8008898:	f023 0301 	bic.w	r3, r3, #1
 800889c:	b2db      	uxtb	r3, r3
 800889e:	4619      	mov	r1, r3
 80088a0:	482a      	ldr	r0, [pc, #168]	; (800894c <ctlwizchip+0x314>)
 80088a2:	f7fe fc29 	bl	80070f8 <WIZCHIP_WRITE>
         else if(*(uint8_t*)arg == SYSCLK_25MHZ) setSYCR1(tmp |  SYCR1_CLKSEL);
         break;
 80088a6:	e03f      	b.n	8008928 <ctlwizchip+0x2f0>
         else if(*(uint8_t*)arg == SYSCLK_25MHZ) setSYCR1(tmp |  SYCR1_CLKSEL);
 80088a8:	683b      	ldr	r3, [r7, #0]
 80088aa:	781b      	ldrb	r3, [r3, #0]
 80088ac:	2b01      	cmp	r3, #1
 80088ae:	d13b      	bne.n	8008928 <ctlwizchip+0x2f0>
 80088b0:	7dfb      	ldrb	r3, [r7, #23]
 80088b2:	f043 0301 	orr.w	r3, r3, #1
 80088b6:	b2db      	uxtb	r3, r3
 80088b8:	4619      	mov	r1, r3
 80088ba:	4824      	ldr	r0, [pc, #144]	; (800894c <ctlwizchip+0x314>)
 80088bc:	f7fe fc1c 	bl	80070f8 <WIZCHIP_WRITE>
         break;
 80088c0:	e032      	b.n	8008928 <ctlwizchip+0x2f0>
      case CW_GET_SYSCLK:
         *(uint8_t*)arg = (getSYCR1() & SYCR1_CLKSEL);
 80088c2:	4822      	ldr	r0, [pc, #136]	; (800894c <ctlwizchip+0x314>)
 80088c4:	f7fe fc46 	bl	8007154 <WIZCHIP_READ>
 80088c8:	4603      	mov	r3, r0
 80088ca:	f003 0301 	and.w	r3, r3, #1
 80088ce:	b2da      	uxtb	r2, r3
 80088d0:	683b      	ldr	r3, [r7, #0]
 80088d2:	701a      	strb	r2, [r3, #0]
         break;
 80088d4:	e029      	b.n	800892a <ctlwizchip+0x2f2>
      case CW_RESET_PHY:
         wizphy_reset();
 80088d6:	f000 fa87 	bl	8008de8 <wizphy_reset>
         break;
 80088da:	e026      	b.n	800892a <ctlwizchip+0x2f2>
      case CW_SET_PHYCONF:
         wizphy_setphyconf((wiz_PhyConf*)arg);
 80088dc:	6838      	ldr	r0, [r7, #0]
 80088de:	f000 faa3 	bl	8008e28 <wizphy_setphyconf>
         break;
 80088e2:	e022      	b.n	800892a <ctlwizchip+0x2f2>
      case CW_GET_PHYCONF:
         wizphy_getphyconf((wiz_PhyConf*)arg);
 80088e4:	6838      	ldr	r0, [r7, #0]
 80088e6:	f000 faeb 	bl	8008ec0 <wizphy_getphyconf>
         break;
 80088ea:	e01e      	b.n	800892a <ctlwizchip+0x2f2>
      case CW_GET_PHYSTATUS:
         wizphy_getphystatus((wiz_PhyConf*)arg);
 80088ec:	6838      	ldr	r0, [r7, #0]
 80088ee:	f000 fb27 	bl	8008f40 <wizphy_getphystatus>
         break;
 80088f2:	e01a      	b.n	800892a <ctlwizchip+0x2f2>
      case CW_SET_PHYPOWMODE:
         wizphy_setphypmode(tmp);
 80088f4:	7dfb      	ldrb	r3, [r7, #23]
 80088f6:	4618      	mov	r0, r3
 80088f8:	f000 fb62 	bl	8008fc0 <wizphy_setphypmode>
         break;
 80088fc:	e015      	b.n	800892a <ctlwizchip+0x2f2>
      case CW_GET_PHYPOWMODE:
         *(uint8_t*)arg = wizphy_getphypmode();
 80088fe:	f000 fb81 	bl	8009004 <wizphy_getphypmode>
 8008902:	4603      	mov	r3, r0
 8008904:	b2da      	uxtb	r2, r3
 8008906:	683b      	ldr	r3, [r7, #0]
 8008908:	701a      	strb	r2, [r3, #0]
         break;
 800890a:	e00e      	b.n	800892a <ctlwizchip+0x2f2>
      case CW_GET_PHYLINK:
         *(uint8_t*)arg = wizphy_getphylink();
 800890c:	f000 fa5e 	bl	8008dcc <wizphy_getphylink>
 8008910:	4603      	mov	r3, r0
 8008912:	b2da      	uxtb	r2, r3
 8008914:	683b      	ldr	r3, [r7, #0]
 8008916:	701a      	strb	r2, [r3, #0]
         break;
 8008918:	e007      	b.n	800892a <ctlwizchip+0x2f2>
      default:
         return -1;
 800891a:	f04f 33ff 	mov.w	r3, #4294967295
 800891e:	e005      	b.n	800892c <ctlwizchip+0x2f4>
         break;
 8008920:	bf00      	nop
 8008922:	e002      	b.n	800892a <ctlwizchip+0x2f2>
         break;
 8008924:	bf00      	nop
 8008926:	e000      	b.n	800892a <ctlwizchip+0x2f2>
         break;
 8008928:	bf00      	nop
   }
   return 0;
 800892a:	2300      	movs	r3, #0
}
 800892c:	4618      	mov	r0, r3
 800892e:	371c      	adds	r7, #28
 8008930:	46bd      	mov	sp, r7
 8008932:	bd90      	pop	{r4, r7, pc}
 8008934:	6041f400 	.word	0x6041f400
 8008938:	6041f500 	.word	0x6041f500
 800893c:	6041f600 	.word	0x6041f600
 8008940:	60200000 	.word	0x60200000
 8008944:	6041c500 	.word	0x6041c500
 8008948:	6041c600 	.word	0x6041c600
 800894c:	60200500 	.word	0x60200500
 8008950:	20000088 	.word	0x20000088
 8008954:	60000200 	.word	0x60000200
 8008958:	60000300 	.word	0x60000300

0800895c <ctlnetwork>:

int8_t ctlnetwork(ctlnetwork_type cntype, void* arg)
{
 800895c:	b580      	push	{r7, lr}
 800895e:	b082      	sub	sp, #8
 8008960:	af00      	add	r7, sp, #0
 8008962:	4603      	mov	r3, r0
 8008964:	6039      	str	r1, [r7, #0]
 8008966:	71fb      	strb	r3, [r7, #7]
   switch(cntype)
 8008968:	79fb      	ldrb	r3, [r7, #7]
 800896a:	2b07      	cmp	r3, #7
 800896c:	d83d      	bhi.n	80089ea <ctlnetwork+0x8e>
 800896e:	a201      	add	r2, pc, #4	; (adr r2, 8008974 <ctlnetwork+0x18>)
 8008970:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008974:	08008995 	.word	0x08008995
 8008978:	0800899d 	.word	0x0800899d
 800897c:	080089a5 	.word	0x080089a5
 8008980:	080089b1 	.word	0x080089b1
 8008984:	080089bd 	.word	0x080089bd
 8008988:	080089c5 	.word	0x080089c5
 800898c:	080089cd 	.word	0x080089cd
 8008990:	080089db 	.word	0x080089db
   {
      case CN_SET_NETINFO:
         wizchip_setnetinfo((wiz_NetInfo*)arg);
 8008994:	6838      	ldr	r0, [r7, #0]
 8008996:	f000 fb47 	bl	8009028 <wizchip_setnetinfo>
         break;
 800899a:	e029      	b.n	80089f0 <ctlnetwork+0x94>
      case CN_GET_NETINFO:
         wizchip_getnetinfo((wiz_NetInfo*)arg);
 800899c:	6838      	ldr	r0, [r7, #0]
 800899e:	f000 fbc1 	bl	8009124 <wizchip_getnetinfo>
         break;
 80089a2:	e025      	b.n	80089f0 <ctlnetwork+0x94>
      case CN_SET_NETMODE:
         wizchip_setnetmode(*(netmode_type*)arg);
 80089a4:	683b      	ldr	r3, [r7, #0]
 80089a6:	681b      	ldr	r3, [r3, #0]
 80089a8:	4618      	mov	r0, r3
 80089aa:	f000 fc3b 	bl	8009224 <wizchip_setnetmode>
         break;
 80089ae:	e01f      	b.n	80089f0 <ctlnetwork+0x94>
      case CN_GET_NETMODE:
         *(netmode_type*)arg = wizchip_getnetmode();
 80089b0:	f000 fc66 	bl	8009280 <wizchip_getnetmode>
 80089b4:	4602      	mov	r2, r0
 80089b6:	683b      	ldr	r3, [r7, #0]
 80089b8:	601a      	str	r2, [r3, #0]
         break;
 80089ba:	e019      	b.n	80089f0 <ctlnetwork+0x94>
      case CN_SET_TIMEOUT:
         wizchip_settimeout((wiz_NetTimeout*)arg);
 80089bc:	6838      	ldr	r0, [r7, #0]
 80089be:	f000 fc8f 	bl	80092e0 <wizchip_settimeout>
         break;
 80089c2:	e015      	b.n	80089f0 <ctlnetwork+0x94>
      case CN_GET_TIMEOUT:
         wizchip_gettimeout((wiz_NetTimeout*)arg);
 80089c4:	6838      	ldr	r0, [r7, #0]
 80089c6:	f000 fccb 	bl	8009360 <wizchip_gettimeout>
         break;
 80089ca:	e011      	b.n	80089f0 <ctlnetwork+0x94>
      case CN_SET_PREFER:
         setSLPSR(*(uint8_t*)arg);
 80089cc:	683b      	ldr	r3, [r7, #0]
 80089ce:	781b      	ldrb	r3, [r3, #0]
 80089d0:	4619      	mov	r1, r3
 80089d2:	480a      	ldr	r0, [pc, #40]	; (80089fc <ctlnetwork+0xa0>)
 80089d4:	f7fe fb90 	bl	80070f8 <WIZCHIP_WRITE>
         break;
 80089d8:	e00a      	b.n	80089f0 <ctlnetwork+0x94>
      case CN_GET_PREFER:
    	  *(uint8_t*)arg= getSLPSR();
 80089da:	4808      	ldr	r0, [pc, #32]	; (80089fc <ctlnetwork+0xa0>)
 80089dc:	f7fe fbba 	bl	8007154 <WIZCHIP_READ>
 80089e0:	4603      	mov	r3, r0
 80089e2:	461a      	mov	r2, r3
 80089e4:	683b      	ldr	r3, [r7, #0]
 80089e6:	701a      	strb	r2, [r3, #0]
         break;
 80089e8:	e002      	b.n	80089f0 <ctlnetwork+0x94>
      default:
         return -1;
 80089ea:	f04f 33ff 	mov.w	r3, #4294967295
 80089ee:	e000      	b.n	80089f2 <ctlnetwork+0x96>
   }
   return 0;
 80089f0:	2300      	movs	r3, #0
}
 80089f2:	4618      	mov	r0, r3
 80089f4:	3708      	adds	r7, #8
 80089f6:	46bd      	mov	sp, r7
 80089f8:	bd80      	pop	{r7, pc}
 80089fa:	bf00      	nop
 80089fc:	60212c00 	.word	0x60212c00

08008a00 <wizchip_sw_reset>:
          break;
   }
}

void wizchip_sw_reset(void)
{
 8008a00:	b580      	push	{r7, lr}
 8008a02:	b096      	sub	sp, #88	; 0x58
 8008a04:	af00      	add	r7, sp, #0
   uint8_t gw[4], sn[4], sip[4], gw6[16], sn6[16], lla[16], gua[16];
   uint8_t mac[6];
   uint8_t islock = getSYSR();
 8008a06:	484c      	ldr	r0, [pc, #304]	; (8008b38 <wizchip_sw_reset+0x138>)
 8008a08:	f7fe fba4 	bl	8007154 <WIZCHIP_READ>
 8008a0c:	4603      	mov	r3, r0
 8008a0e:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57

   CHIPUNLOCK();
 8008a12:	21ce      	movs	r1, #206	; 0xce
 8008a14:	4849      	ldr	r0, [pc, #292]	; (8008b3c <wizchip_sw_reset+0x13c>)
 8008a16:	f7fe fb6f 	bl	80070f8 <WIZCHIP_WRITE>

   getSHAR(mac);
 8008a1a:	463b      	mov	r3, r7
 8008a1c:	2206      	movs	r2, #6
 8008a1e:	4619      	mov	r1, r3
 8008a20:	4847      	ldr	r0, [pc, #284]	; (8008b40 <wizchip_sw_reset+0x140>)
 8008a22:	f7fe fc03 	bl	800722c <WIZCHIP_READ_BUF>
   getGAR(gw);  getSUBR(sn);  getSIPR(sip);	getGA6R(gw6); getSUB6R(sn6); getLLAR(lla); getGUAR(gua);
 8008a26:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8008a2a:	2204      	movs	r2, #4
 8008a2c:	4619      	mov	r1, r3
 8008a2e:	4845      	ldr	r0, [pc, #276]	; (8008b44 <wizchip_sw_reset+0x144>)
 8008a30:	f7fe fbfc 	bl	800722c <WIZCHIP_READ_BUF>
 8008a34:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8008a38:	2204      	movs	r2, #4
 8008a3a:	4619      	mov	r1, r3
 8008a3c:	4842      	ldr	r0, [pc, #264]	; (8008b48 <wizchip_sw_reset+0x148>)
 8008a3e:	f7fe fbf5 	bl	800722c <WIZCHIP_READ_BUF>
 8008a42:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8008a46:	2204      	movs	r2, #4
 8008a48:	4619      	mov	r1, r3
 8008a4a:	4840      	ldr	r0, [pc, #256]	; (8008b4c <wizchip_sw_reset+0x14c>)
 8008a4c:	f7fe fbee 	bl	800722c <WIZCHIP_READ_BUF>
 8008a50:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8008a54:	2210      	movs	r2, #16
 8008a56:	4619      	mov	r1, r3
 8008a58:	483d      	ldr	r0, [pc, #244]	; (8008b50 <wizchip_sw_reset+0x150>)
 8008a5a:	f7fe fbe7 	bl	800722c <WIZCHIP_READ_BUF>
 8008a5e:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8008a62:	2210      	movs	r2, #16
 8008a64:	4619      	mov	r1, r3
 8008a66:	483b      	ldr	r0, [pc, #236]	; (8008b54 <wizchip_sw_reset+0x154>)
 8008a68:	f7fe fbe0 	bl	800722c <WIZCHIP_READ_BUF>
 8008a6c:	f107 0318 	add.w	r3, r7, #24
 8008a70:	2210      	movs	r2, #16
 8008a72:	4619      	mov	r1, r3
 8008a74:	4838      	ldr	r0, [pc, #224]	; (8008b58 <wizchip_sw_reset+0x158>)
 8008a76:	f7fe fbd9 	bl	800722c <WIZCHIP_READ_BUF>
 8008a7a:	f107 0308 	add.w	r3, r7, #8
 8008a7e:	2210      	movs	r2, #16
 8008a80:	4619      	mov	r1, r3
 8008a82:	4836      	ldr	r0, [pc, #216]	; (8008b5c <wizchip_sw_reset+0x15c>)
 8008a84:	f7fe fbd2 	bl	800722c <WIZCHIP_READ_BUF>
   setSYCR0(SYCR0_RST);
 8008a88:	2100      	movs	r1, #0
 8008a8a:	4835      	ldr	r0, [pc, #212]	; (8008b60 <wizchip_sw_reset+0x160>)
 8008a8c:	f7fe fb34 	bl	80070f8 <WIZCHIP_WRITE>
   getSYCR0(); // for delay
 8008a90:	4833      	ldr	r0, [pc, #204]	; (8008b60 <wizchip_sw_reset+0x160>)
 8008a92:	f7fe fb5f 	bl	8007154 <WIZCHIP_READ>

   NETUNLOCK();
 8008a96:	213a      	movs	r1, #58	; 0x3a
 8008a98:	4832      	ldr	r0, [pc, #200]	; (8008b64 <wizchip_sw_reset+0x164>)
 8008a9a:	f7fe fb2d 	bl	80070f8 <WIZCHIP_WRITE>

   setSHAR(mac);
 8008a9e:	463b      	mov	r3, r7
 8008aa0:	2206      	movs	r2, #6
 8008aa2:	4619      	mov	r1, r3
 8008aa4:	4826      	ldr	r0, [pc, #152]	; (8008b40 <wizchip_sw_reset+0x140>)
 8008aa6:	f7fe fb89 	bl	80071bc <WIZCHIP_WRITE_BUF>
   setGAR(gw);
 8008aaa:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8008aae:	2204      	movs	r2, #4
 8008ab0:	4619      	mov	r1, r3
 8008ab2:	4824      	ldr	r0, [pc, #144]	; (8008b44 <wizchip_sw_reset+0x144>)
 8008ab4:	f7fe fb82 	bl	80071bc <WIZCHIP_WRITE_BUF>
   setSUBR(sn);
 8008ab8:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8008abc:	2204      	movs	r2, #4
 8008abe:	4619      	mov	r1, r3
 8008ac0:	4821      	ldr	r0, [pc, #132]	; (8008b48 <wizchip_sw_reset+0x148>)
 8008ac2:	f7fe fb7b 	bl	80071bc <WIZCHIP_WRITE_BUF>
   setSIPR(sip);
 8008ac6:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8008aca:	2204      	movs	r2, #4
 8008acc:	4619      	mov	r1, r3
 8008ace:	481f      	ldr	r0, [pc, #124]	; (8008b4c <wizchip_sw_reset+0x14c>)
 8008ad0:	f7fe fb74 	bl	80071bc <WIZCHIP_WRITE_BUF>
   setGA6R(gw6); 
 8008ad4:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8008ad8:	2210      	movs	r2, #16
 8008ada:	4619      	mov	r1, r3
 8008adc:	481c      	ldr	r0, [pc, #112]	; (8008b50 <wizchip_sw_reset+0x150>)
 8008ade:	f7fe fb6d 	bl	80071bc <WIZCHIP_WRITE_BUF>
   setSUB6R(sn6); 
 8008ae2:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8008ae6:	2210      	movs	r2, #16
 8008ae8:	4619      	mov	r1, r3
 8008aea:	481a      	ldr	r0, [pc, #104]	; (8008b54 <wizchip_sw_reset+0x154>)
 8008aec:	f7fe fb66 	bl	80071bc <WIZCHIP_WRITE_BUF>
   setLLAR(lla);
 8008af0:	f107 0318 	add.w	r3, r7, #24
 8008af4:	2210      	movs	r2, #16
 8008af6:	4619      	mov	r1, r3
 8008af8:	4817      	ldr	r0, [pc, #92]	; (8008b58 <wizchip_sw_reset+0x158>)
 8008afa:	f7fe fb5f 	bl	80071bc <WIZCHIP_WRITE_BUF>
   setGUAR(gua);
 8008afe:	f107 0308 	add.w	r3, r7, #8
 8008b02:	2210      	movs	r2, #16
 8008b04:	4619      	mov	r1, r3
 8008b06:	4815      	ldr	r0, [pc, #84]	; (8008b5c <wizchip_sw_reset+0x15c>)
 8008b08:	f7fe fb58 	bl	80071bc <WIZCHIP_WRITE_BUF>
   if(islock & SYSR_CHPL) CHIPLOCK();
 8008b0c:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
 8008b10:	2b00      	cmp	r3, #0
 8008b12:	da03      	bge.n	8008b1c <wizchip_sw_reset+0x11c>
 8008b14:	21ff      	movs	r1, #255	; 0xff
 8008b16:	4809      	ldr	r0, [pc, #36]	; (8008b3c <wizchip_sw_reset+0x13c>)
 8008b18:	f7fe faee 	bl	80070f8 <WIZCHIP_WRITE>
   if(islock & SYSR_NETL) NETLOCK();
 8008b1c:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8008b20:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008b24:	2b00      	cmp	r3, #0
 8008b26:	d003      	beq.n	8008b30 <wizchip_sw_reset+0x130>
 8008b28:	21c5      	movs	r1, #197	; 0xc5
 8008b2a:	480e      	ldr	r0, [pc, #56]	; (8008b64 <wizchip_sw_reset+0x164>)
 8008b2c:	f7fe fae4 	bl	80070f8 <WIZCHIP_WRITE>
}
 8008b30:	bf00      	nop
 8008b32:	3758      	adds	r7, #88	; 0x58
 8008b34:	46bd      	mov	sp, r7
 8008b36:	bd80      	pop	{r7, pc}
 8008b38:	60200000 	.word	0x60200000
 8008b3c:	6041f400 	.word	0x6041f400
 8008b40:	60412000 	.word	0x60412000
 8008b44:	60413000 	.word	0x60413000
 8008b48:	60413400 	.word	0x60413400
 8008b4c:	60413800 	.word	0x60413800
 8008b50:	60417000 	.word	0x60417000
 8008b54:	60416000 	.word	0x60416000
 8008b58:	60414000 	.word	0x60414000
 8008b5c:	60415000 	.word	0x60415000
 8008b60:	60200400 	.word	0x60200400
 8008b64:	6041f500 	.word	0x6041f500

08008b68 <wizchip_init>:

int8_t wizchip_init(uint8_t* txsize, uint8_t* rxsize)
{
 8008b68:	b580      	push	{r7, lr}
 8008b6a:	b084      	sub	sp, #16
 8008b6c:	af00      	add	r7, sp, #0
 8008b6e:	6078      	str	r0, [r7, #4]
 8008b70:	6039      	str	r1, [r7, #0]
   int8_t i;
   int8_t tmp = 0;
 8008b72:	2300      	movs	r3, #0
 8008b74:	73bb      	strb	r3, [r7, #14]
   wizchip_sw_reset();
 8008b76:	f7ff ff43 	bl	8008a00 <wizchip_sw_reset>
   if(txsize)
 8008b7a:	687b      	ldr	r3, [r7, #4]
 8008b7c:	2b00      	cmp	r3, #0
 8008b7e:	d03b      	beq.n	8008bf8 <wizchip_init+0x90>
   {
      tmp = 0;
 8008b80:	2300      	movs	r3, #0
 8008b82:	73bb      	strb	r3, [r7, #14]
			for(i = 0 ; i < _WIZCHIP_SOCK_NUM_; i++)
 8008b84:	2300      	movs	r3, #0
 8008b86:	73fb      	strb	r3, [r7, #15]
 8008b88:	e015      	b.n	8008bb6 <wizchip_init+0x4e>
			{
				tmp += txsize[i];		
 8008b8a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8008b8e:	687a      	ldr	r2, [r7, #4]
 8008b90:	4413      	add	r3, r2
 8008b92:	781a      	ldrb	r2, [r3, #0]
 8008b94:	7bbb      	ldrb	r3, [r7, #14]
 8008b96:	4413      	add	r3, r2
 8008b98:	b2db      	uxtb	r3, r3
 8008b9a:	73bb      	strb	r3, [r7, #14]
				if(tmp > 2*_WIZCHIP_SOCK_NUM_) return -1;		
 8008b9c:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8008ba0:	2b10      	cmp	r3, #16
 8008ba2:	dd02      	ble.n	8008baa <wizchip_init+0x42>
 8008ba4:	f04f 33ff 	mov.w	r3, #4294967295
 8008ba8:	e066      	b.n	8008c78 <wizchip_init+0x110>
			for(i = 0 ; i < _WIZCHIP_SOCK_NUM_; i++)
 8008baa:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8008bae:	b2db      	uxtb	r3, r3
 8008bb0:	3301      	adds	r3, #1
 8008bb2:	b2db      	uxtb	r3, r3
 8008bb4:	73fb      	strb	r3, [r7, #15]
 8008bb6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8008bba:	2b07      	cmp	r3, #7
 8008bbc:	dde5      	ble.n	8008b8a <wizchip_init+0x22>
			}
			for(i = 0 ; i < _WIZCHIP_SOCK_NUM_; i++) setSn_TXBUF_SIZE(i, txsize[i]);			
 8008bbe:	2300      	movs	r3, #0
 8008bc0:	73fb      	strb	r3, [r7, #15]
 8008bc2:	e015      	b.n	8008bf0 <wizchip_init+0x88>
 8008bc4:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8008bc8:	009b      	lsls	r3, r3, #2
 8008bca:	3301      	adds	r3, #1
 8008bcc:	00da      	lsls	r2, r3, #3
 8008bce:	4b2c      	ldr	r3, [pc, #176]	; (8008c80 <wizchip_init+0x118>)
 8008bd0:	4413      	add	r3, r2
 8008bd2:	4618      	mov	r0, r3
 8008bd4:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8008bd8:	687a      	ldr	r2, [r7, #4]
 8008bda:	4413      	add	r3, r2
 8008bdc:	781b      	ldrb	r3, [r3, #0]
 8008bde:	4619      	mov	r1, r3
 8008be0:	f7fe fa8a 	bl	80070f8 <WIZCHIP_WRITE>
 8008be4:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8008be8:	b2db      	uxtb	r3, r3
 8008bea:	3301      	adds	r3, #1
 8008bec:	b2db      	uxtb	r3, r3
 8008bee:	73fb      	strb	r3, [r7, #15]
 8008bf0:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8008bf4:	2b07      	cmp	r3, #7
 8008bf6:	dde5      	ble.n	8008bc4 <wizchip_init+0x5c>
   }
   if(rxsize)
 8008bf8:	683b      	ldr	r3, [r7, #0]
 8008bfa:	2b00      	cmp	r3, #0
 8008bfc:	d03b      	beq.n	8008c76 <wizchip_init+0x10e>
   {
      tmp = 0;
 8008bfe:	2300      	movs	r3, #0
 8008c00:	73bb      	strb	r3, [r7, #14]
			for(i = 0 ; i < _WIZCHIP_SOCK_NUM_; i++)
 8008c02:	2300      	movs	r3, #0
 8008c04:	73fb      	strb	r3, [r7, #15]
 8008c06:	e015      	b.n	8008c34 <wizchip_init+0xcc>
			{
				tmp += rxsize[i];		
 8008c08:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8008c0c:	683a      	ldr	r2, [r7, #0]
 8008c0e:	4413      	add	r3, r2
 8008c10:	781a      	ldrb	r2, [r3, #0]
 8008c12:	7bbb      	ldrb	r3, [r7, #14]
 8008c14:	4413      	add	r3, r2
 8008c16:	b2db      	uxtb	r3, r3
 8008c18:	73bb      	strb	r3, [r7, #14]
				if(tmp > 2*_WIZCHIP_SOCK_NUM_) return -1;		
 8008c1a:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8008c1e:	2b10      	cmp	r3, #16
 8008c20:	dd02      	ble.n	8008c28 <wizchip_init+0xc0>
 8008c22:	f04f 33ff 	mov.w	r3, #4294967295
 8008c26:	e027      	b.n	8008c78 <wizchip_init+0x110>
			for(i = 0 ; i < _WIZCHIP_SOCK_NUM_; i++)
 8008c28:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8008c2c:	b2db      	uxtb	r3, r3
 8008c2e:	3301      	adds	r3, #1
 8008c30:	b2db      	uxtb	r3, r3
 8008c32:	73fb      	strb	r3, [r7, #15]
 8008c34:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8008c38:	2b07      	cmp	r3, #7
 8008c3a:	dde5      	ble.n	8008c08 <wizchip_init+0xa0>
			}
			for(i = 0 ; i < _WIZCHIP_SOCK_NUM_; i++) setSn_RXBUF_SIZE(i, rxsize[i]);
 8008c3c:	2300      	movs	r3, #0
 8008c3e:	73fb      	strb	r3, [r7, #15]
 8008c40:	e015      	b.n	8008c6e <wizchip_init+0x106>
 8008c42:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8008c46:	009b      	lsls	r3, r3, #2
 8008c48:	3301      	adds	r3, #1
 8008c4a:	00da      	lsls	r2, r3, #3
 8008c4c:	4b0d      	ldr	r3, [pc, #52]	; (8008c84 <wizchip_init+0x11c>)
 8008c4e:	4413      	add	r3, r2
 8008c50:	4618      	mov	r0, r3
 8008c52:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8008c56:	683a      	ldr	r2, [r7, #0]
 8008c58:	4413      	add	r3, r2
 8008c5a:	781b      	ldrb	r3, [r3, #0]
 8008c5c:	4619      	mov	r1, r3
 8008c5e:	f7fe fa4b 	bl	80070f8 <WIZCHIP_WRITE>
 8008c62:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8008c66:	b2db      	uxtb	r3, r3
 8008c68:	3301      	adds	r3, #1
 8008c6a:	b2db      	uxtb	r3, r3
 8008c6c:	73fb      	strb	r3, [r7, #15]
 8008c6e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8008c72:	2b07      	cmp	r3, #7
 8008c74:	dde5      	ble.n	8008c42 <wizchip_init+0xda>
   }
   return 0;
 8008c76:	2300      	movs	r3, #0
}
 8008c78:	4618      	mov	r0, r3
 8008c7a:	3710      	adds	r7, #16
 8008c7c:	46bd      	mov	sp, r7
 8008c7e:	bd80      	pop	{r7, pc}
 8008c80:	60020000 	.word	0x60020000
 8008c84:	60022000 	.word	0x60022000

08008c88 <wizchip_clrinterrupt>:

void wizchip_clrinterrupt(intr_kind intr)
{
 8008c88:	b580      	push	{r7, lr}
 8008c8a:	b084      	sub	sp, #16
 8008c8c:	af00      	add	r7, sp, #0
 8008c8e:	6078      	str	r0, [r7, #4]
   int i;
   uint8_t ir   = (uint8_t)intr;
 8008c90:	687b      	ldr	r3, [r7, #4]
 8008c92:	72fb      	strb	r3, [r7, #11]
   uint8_t sir  = (uint8_t)((uint32_t)intr >> 8);
 8008c94:	687b      	ldr	r3, [r7, #4]
 8008c96:	0a1b      	lsrs	r3, r3, #8
 8008c98:	72bb      	strb	r3, [r7, #10]
   uint8_t slir = (uint8_t)((uint32_t)intr >> 16);
 8008c9a:	687b      	ldr	r3, [r7, #4]
 8008c9c:	0c1b      	lsrs	r3, r3, #16
 8008c9e:	727b      	strb	r3, [r7, #9]
   setIRCLR(ir);
 8008ca0:	7afb      	ldrb	r3, [r7, #11]
 8008ca2:	4619      	mov	r1, r3
 8008ca4:	4813      	ldr	r0, [pc, #76]	; (8008cf4 <wizchip_clrinterrupt+0x6c>)
 8008ca6:	f7fe fa27 	bl	80070f8 <WIZCHIP_WRITE>
   for(i=0; i<_WIZCHIP_SOCK_NUM_; i++)
 8008caa:	2300      	movs	r3, #0
 8008cac:	60fb      	str	r3, [r7, #12]
 8008cae:	e014      	b.n	8008cda <wizchip_clrinterrupt+0x52>
   {
   	if(sir&(1<<i))   	setSn_IRCLR(i,0xFF);
 8008cb0:	7aba      	ldrb	r2, [r7, #10]
 8008cb2:	68fb      	ldr	r3, [r7, #12]
 8008cb4:	fa42 f303 	asr.w	r3, r2, r3
 8008cb8:	f003 0301 	and.w	r3, r3, #1
 8008cbc:	2b00      	cmp	r3, #0
 8008cbe:	d009      	beq.n	8008cd4 <wizchip_clrinterrupt+0x4c>
 8008cc0:	68fb      	ldr	r3, [r7, #12]
 8008cc2:	009b      	lsls	r3, r3, #2
 8008cc4:	3301      	adds	r3, #1
 8008cc6:	00da      	lsls	r2, r3, #3
 8008cc8:	4b0b      	ldr	r3, [pc, #44]	; (8008cf8 <wizchip_clrinterrupt+0x70>)
 8008cca:	4413      	add	r3, r2
 8008ccc:	21ff      	movs	r1, #255	; 0xff
 8008cce:	4618      	mov	r0, r3
 8008cd0:	f7fe fa12 	bl	80070f8 <WIZCHIP_WRITE>
   for(i=0; i<_WIZCHIP_SOCK_NUM_; i++)
 8008cd4:	68fb      	ldr	r3, [r7, #12]
 8008cd6:	3301      	adds	r3, #1
 8008cd8:	60fb      	str	r3, [r7, #12]
 8008cda:	68fb      	ldr	r3, [r7, #12]
 8008cdc:	2b07      	cmp	r3, #7
 8008cde:	dde7      	ble.n	8008cb0 <wizchip_clrinterrupt+0x28>
   }
   setSLIRCLR(slir);
 8008ce0:	7a7b      	ldrb	r3, [r7, #9]
 8008ce2:	4619      	mov	r1, r3
 8008ce4:	4805      	ldr	r0, [pc, #20]	; (8008cfc <wizchip_clrinterrupt+0x74>)
 8008ce6:	f7fe fa07 	bl	80070f8 <WIZCHIP_WRITE>
}
 8008cea:	bf00      	nop
 8008cec:	3710      	adds	r7, #16
 8008cee:	46bd      	mov	sp, r7
 8008cf0:	bd80      	pop	{r7, pc}
 8008cf2:	bf00      	nop
 8008cf4:	60210800 	.word	0x60210800
 8008cf8:	60002800 	.word	0x60002800
 8008cfc:	60212800 	.word	0x60212800

08008d00 <wizchip_getinterrupt>:

intr_kind wizchip_getinterrupt(void)
{
 8008d00:	b590      	push	{r4, r7, lr}
 8008d02:	b083      	sub	sp, #12
 8008d04:	af00      	add	r7, sp, #0
   uint32_t ret;
   ret = (((uint32_t)getSLIR())<<16) | (((uint32_t)getSIR())<<8) | (((uint32_t)getIR()));
 8008d06:	480b      	ldr	r0, [pc, #44]	; (8008d34 <wizchip_getinterrupt+0x34>)
 8008d08:	f7fe fa24 	bl	8007154 <WIZCHIP_READ>
 8008d0c:	4603      	mov	r3, r0
 8008d0e:	041c      	lsls	r4, r3, #16
 8008d10:	4809      	ldr	r0, [pc, #36]	; (8008d38 <wizchip_getinterrupt+0x38>)
 8008d12:	f7fe fa1f 	bl	8007154 <WIZCHIP_READ>
 8008d16:	4603      	mov	r3, r0
 8008d18:	021b      	lsls	r3, r3, #8
 8008d1a:	431c      	orrs	r4, r3
 8008d1c:	4807      	ldr	r0, [pc, #28]	; (8008d3c <wizchip_getinterrupt+0x3c>)
 8008d1e:	f7fe fa19 	bl	8007154 <WIZCHIP_READ>
 8008d22:	4603      	mov	r3, r0
 8008d24:	4323      	orrs	r3, r4
 8008d26:	607b      	str	r3, [r7, #4]
   return (intr_kind)ret;
 8008d28:	687b      	ldr	r3, [r7, #4]
}
 8008d2a:	4618      	mov	r0, r3
 8008d2c:	370c      	adds	r7, #12
 8008d2e:	46bd      	mov	sp, r7
 8008d30:	bd90      	pop	{r4, r7, pc}
 8008d32:	bf00      	nop
 8008d34:	60210200 	.word	0x60210200
 8008d38:	60210100 	.word	0x60210100
 8008d3c:	60210000 	.word	0x60210000

08008d40 <wizchip_setinterruptmask>:

void wizchip_setinterruptmask(intr_kind intr)
{
 8008d40:	b580      	push	{r7, lr}
 8008d42:	b084      	sub	sp, #16
 8008d44:	af00      	add	r7, sp, #0
 8008d46:	6078      	str	r0, [r7, #4]
   uint8_t imr   = (uint8_t)intr;
 8008d48:	687b      	ldr	r3, [r7, #4]
 8008d4a:	73fb      	strb	r3, [r7, #15]
   uint8_t simr  = (uint8_t)((uint32_t)intr >> 8);
 8008d4c:	687b      	ldr	r3, [r7, #4]
 8008d4e:	0a1b      	lsrs	r3, r3, #8
 8008d50:	73bb      	strb	r3, [r7, #14]
   uint8_t slimr = (uint8_t)((uint32_t)intr >> 16);
 8008d52:	687b      	ldr	r3, [r7, #4]
 8008d54:	0c1b      	lsrs	r3, r3, #16
 8008d56:	737b      	strb	r3, [r7, #13]
   setIMR(imr);
 8008d58:	7bfb      	ldrb	r3, [r7, #15]
 8008d5a:	4619      	mov	r1, r3
 8008d5c:	4808      	ldr	r0, [pc, #32]	; (8008d80 <wizchip_setinterruptmask+0x40>)
 8008d5e:	f7fe f9cb 	bl	80070f8 <WIZCHIP_WRITE>
   setSIMR(simr);
 8008d62:	7bbb      	ldrb	r3, [r7, #14]
 8008d64:	4619      	mov	r1, r3
 8008d66:	4807      	ldr	r0, [pc, #28]	; (8008d84 <wizchip_setinterruptmask+0x44>)
 8008d68:	f7fe f9c6 	bl	80070f8 <WIZCHIP_WRITE>
   setSLIMR(slimr);
 8008d6c:	7b7b      	ldrb	r3, [r7, #13]
 8008d6e:	4619      	mov	r1, r3
 8008d70:	4805      	ldr	r0, [pc, #20]	; (8008d88 <wizchip_setinterruptmask+0x48>)
 8008d72:	f7fe f9c1 	bl	80070f8 <WIZCHIP_WRITE>
}
 8008d76:	bf00      	nop
 8008d78:	3710      	adds	r7, #16
 8008d7a:	46bd      	mov	sp, r7
 8008d7c:	bd80      	pop	{r7, pc}
 8008d7e:	bf00      	nop
 8008d80:	60210400 	.word	0x60210400
 8008d84:	60211400 	.word	0x60211400
 8008d88:	60212400 	.word	0x60212400

08008d8c <wizchip_getinterruptmask>:

intr_kind wizchip_getinterruptmask(void)
{
 8008d8c:	b590      	push	{r4, r7, lr}
 8008d8e:	b083      	sub	sp, #12
 8008d90:	af00      	add	r7, sp, #0
   uint32_t ret;
   ret = (((uint32_t)getSLIMR())<<16) | (((uint32_t)getSIMR())<<8) | (((uint32_t)getIMR()));
 8008d92:	480b      	ldr	r0, [pc, #44]	; (8008dc0 <wizchip_getinterruptmask+0x34>)
 8008d94:	f7fe f9de 	bl	8007154 <WIZCHIP_READ>
 8008d98:	4603      	mov	r3, r0
 8008d9a:	041c      	lsls	r4, r3, #16
 8008d9c:	4809      	ldr	r0, [pc, #36]	; (8008dc4 <wizchip_getinterruptmask+0x38>)
 8008d9e:	f7fe f9d9 	bl	8007154 <WIZCHIP_READ>
 8008da2:	4603      	mov	r3, r0
 8008da4:	021b      	lsls	r3, r3, #8
 8008da6:	431c      	orrs	r4, r3
 8008da8:	4807      	ldr	r0, [pc, #28]	; (8008dc8 <wizchip_getinterruptmask+0x3c>)
 8008daa:	f7fe f9d3 	bl	8007154 <WIZCHIP_READ>
 8008dae:	4603      	mov	r3, r0
 8008db0:	4323      	orrs	r3, r4
 8008db2:	607b      	str	r3, [r7, #4]
   return (intr_kind)ret;
 8008db4:	687b      	ldr	r3, [r7, #4]
}
 8008db6:	4618      	mov	r0, r3
 8008db8:	370c      	adds	r7, #12
 8008dba:	46bd      	mov	sp, r7
 8008dbc:	bd90      	pop	{r4, r7, pc}
 8008dbe:	bf00      	nop
 8008dc0:	60212400 	.word	0x60212400
 8008dc4:	60211400 	.word	0x60211400
 8008dc8:	60210400 	.word	0x60210400

08008dcc <wizphy_getphylink>:

int8_t wizphy_getphylink(void)
{
 8008dcc:	b580      	push	{r7, lr}
 8008dce:	af00      	add	r7, sp, #0
#if (_PHY_IO_MODE_ == _PHY_IO_MODE_PHYCR_)
   return (getPHYSR() & PHYSR_LNK);
 8008dd0:	4804      	ldr	r0, [pc, #16]	; (8008de4 <wizphy_getphylink+0x18>)
 8008dd2:	f7fe f9bf 	bl	8007154 <WIZCHIP_READ>
 8008dd6:	4603      	mov	r3, r0
 8008dd8:	b25b      	sxtb	r3, r3
 8008dda:	f003 0301 	and.w	r3, r3, #1
 8008dde:	b25b      	sxtb	r3, r3
#elif (_PHY_IO_MODE_ == _PHY_IO_MODE_MII_)
   if(wiz_mdio_read(PHYRAR_BMSR) & BMSR_LINK_STATUS) return PHY_LINK_ON;
   return PHY_LINK_OFF;
#endif  
}
 8008de0:	4618      	mov	r0, r3
 8008de2:	bd80      	pop	{r7, pc}
 8008de4:	60300000 	.word	0x60300000

08008de8 <wizphy_reset>:

void wizphy_reset(void)
{
 8008de8:	b580      	push	{r7, lr}
 8008dea:	b082      	sub	sp, #8
 8008dec:	af00      	add	r7, sp, #0
#if (_PHY_IO_MODE_ == _PHY_IO_MODE_PHYCR_)
   uint8_t tmp = getPHYCR1() | PHYCR1_RST;
 8008dee:	480c      	ldr	r0, [pc, #48]	; (8008e20 <wizphy_reset+0x38>)
 8008df0:	f7fe f9b0 	bl	8007154 <WIZCHIP_READ>
 8008df4:	4603      	mov	r3, r0
 8008df6:	f043 0301 	orr.w	r3, r3, #1
 8008dfa:	71fb      	strb	r3, [r7, #7]
   PHYUNLOCK();
 8008dfc:	2153      	movs	r1, #83	; 0x53
 8008dfe:	4809      	ldr	r0, [pc, #36]	; (8008e24 <wizphy_reset+0x3c>)
 8008e00:	f7fe f97a 	bl	80070f8 <WIZCHIP_WRITE>
   setPHYCR1(tmp);
 8008e04:	79fb      	ldrb	r3, [r7, #7]
 8008e06:	4619      	mov	r1, r3
 8008e08:	4805      	ldr	r0, [pc, #20]	; (8008e20 <wizphy_reset+0x38>)
 8008e0a:	f7fe f975 	bl	80070f8 <WIZCHIP_WRITE>
   PHYLOCK();
 8008e0e:	21ff      	movs	r1, #255	; 0xff
 8008e10:	4804      	ldr	r0, [pc, #16]	; (8008e24 <wizphy_reset+0x3c>)
 8008e12:	f7fe f971 	bl	80070f8 <WIZCHIP_WRITE>
#elif (_PHY_IO_MODE_ == _PHY_IO_MODE_MII_)
	wiz_mdio_write(PHYRAR_BMCR, wiz_mdio_read(PHYRAR_BMCR) | BMCR_RST);
	while(wiz_mdio_read(PHYRAR_BMCR) & BMCR_RST);
#endif
}
 8008e16:	bf00      	nop
 8008e18:	3708      	adds	r7, #8
 8008e1a:	46bd      	mov	sp, r7
 8008e1c:	bd80      	pop	{r7, pc}
 8008e1e:	bf00      	nop
 8008e20:	60301d00 	.word	0x60301d00
 8008e24:	6041f600 	.word	0x6041f600

08008e28 <wizphy_setphyconf>:

void wizphy_setphyconf(wiz_PhyConf* phyconf)
{
 8008e28:	b580      	push	{r7, lr}
 8008e2a:	b084      	sub	sp, #16
 8008e2c:	af00      	add	r7, sp, #0
 8008e2e:	6078      	str	r0, [r7, #4]
#if (_PHY_IO_MODE_ == _PHY_IO_MODE_PHYCR_)
   uint8_t tmp = 0;
 8008e30:	2300      	movs	r3, #0
 8008e32:	73fb      	strb	r3, [r7, #15]
   if(phyconf->mode == PHY_MODE_TE)
 8008e34:	687b      	ldr	r3, [r7, #4]
 8008e36:	781b      	ldrb	r3, [r3, #0]
 8008e38:	2b02      	cmp	r3, #2
 8008e3a:	d10d      	bne.n	8008e58 <wizphy_setphyconf+0x30>
   {
      setPHYCR1(getPHYCR1() | PHYCR1_TE);
 8008e3c:	481e      	ldr	r0, [pc, #120]	; (8008eb8 <wizphy_setphyconf+0x90>)
 8008e3e:	f7fe f989 	bl	8007154 <WIZCHIP_READ>
 8008e42:	4603      	mov	r3, r0
 8008e44:	f043 0308 	orr.w	r3, r3, #8
 8008e48:	b2db      	uxtb	r3, r3
 8008e4a:	4619      	mov	r1, r3
 8008e4c:	481a      	ldr	r0, [pc, #104]	; (8008eb8 <wizphy_setphyconf+0x90>)
 8008e4e:	f7fe f953 	bl	80070f8 <WIZCHIP_WRITE>
      tmp = PHYCR0_AUTO;
 8008e52:	2300      	movs	r3, #0
 8008e54:	73fb      	strb	r3, [r7, #15]
 8008e56:	e025      	b.n	8008ea4 <wizphy_setphyconf+0x7c>
   }
   else
   {
      setPHYCR1(getPHYCR1() & ~PHYCR1_TE);
 8008e58:	4817      	ldr	r0, [pc, #92]	; (8008eb8 <wizphy_setphyconf+0x90>)
 8008e5a:	f7fe f97b 	bl	8007154 <WIZCHIP_READ>
 8008e5e:	4603      	mov	r3, r0
 8008e60:	f023 0308 	bic.w	r3, r3, #8
 8008e64:	b2db      	uxtb	r3, r3
 8008e66:	4619      	mov	r1, r3
 8008e68:	4813      	ldr	r0, [pc, #76]	; (8008eb8 <wizphy_setphyconf+0x90>)
 8008e6a:	f7fe f945 	bl	80070f8 <WIZCHIP_WRITE>
      if(phyconf->mode == PHY_MODE_AUTONEGO) tmp = PHYCR0_AUTO;
 8008e6e:	687b      	ldr	r3, [r7, #4]
 8008e70:	781b      	ldrb	r3, [r3, #0]
 8008e72:	2b01      	cmp	r3, #1
 8008e74:	d102      	bne.n	8008e7c <wizphy_setphyconf+0x54>
 8008e76:	2300      	movs	r3, #0
 8008e78:	73fb      	strb	r3, [r7, #15]
 8008e7a:	e013      	b.n	8008ea4 <wizphy_setphyconf+0x7c>
      else
      {
         tmp |= 0x04;
 8008e7c:	7bfb      	ldrb	r3, [r7, #15]
 8008e7e:	f043 0304 	orr.w	r3, r3, #4
 8008e82:	73fb      	strb	r3, [r7, #15]
         if(phyconf->speed  == PHY_SPEED_10)    tmp |= 0x02;
 8008e84:	687b      	ldr	r3, [r7, #4]
 8008e86:	785b      	ldrb	r3, [r3, #1]
 8008e88:	2b00      	cmp	r3, #0
 8008e8a:	d103      	bne.n	8008e94 <wizphy_setphyconf+0x6c>
 8008e8c:	7bfb      	ldrb	r3, [r7, #15]
 8008e8e:	f043 0302 	orr.w	r3, r3, #2
 8008e92:	73fb      	strb	r3, [r7, #15]
         if(phyconf->duplex == PHY_DUPLEX_HALF) tmp |= 0x01;
 8008e94:	687b      	ldr	r3, [r7, #4]
 8008e96:	789b      	ldrb	r3, [r3, #2]
 8008e98:	2b00      	cmp	r3, #0
 8008e9a:	d103      	bne.n	8008ea4 <wizphy_setphyconf+0x7c>
 8008e9c:	7bfb      	ldrb	r3, [r7, #15]
 8008e9e:	f043 0301 	orr.w	r3, r3, #1
 8008ea2:	73fb      	strb	r3, [r7, #15]
      }
   }
   setPHYCR0(tmp);
 8008ea4:	7bfb      	ldrb	r3, [r7, #15]
 8008ea6:	4619      	mov	r1, r3
 8008ea8:	4804      	ldr	r0, [pc, #16]	; (8008ebc <wizphy_setphyconf+0x94>)
 8008eaa:	f7fe f925 	bl	80070f8 <WIZCHIP_WRITE>
         if(phyconf->speed == PHY_SPEED_100)    tmp |= BMCR_SPD;
      }
      wiz_mdio_write(PHYRAR_BMCR, tmp);
   }
#endif   
}
 8008eae:	bf00      	nop
 8008eb0:	3710      	adds	r7, #16
 8008eb2:	46bd      	mov	sp, r7
 8008eb4:	bd80      	pop	{r7, pc}
 8008eb6:	bf00      	nop
 8008eb8:	60301d00 	.word	0x60301d00
 8008ebc:	60301c00 	.word	0x60301c00

08008ec0 <wizphy_getphyconf>:

void wizphy_getphyconf(wiz_PhyConf* phyconf)
{
 8008ec0:	b580      	push	{r7, lr}
 8008ec2:	b084      	sub	sp, #16
 8008ec4:	af00      	add	r7, sp, #0
 8008ec6:	6078      	str	r0, [r7, #4]
#if (_PHY_IO_MODE_ == _PHY_IO_MODE_PHYCR_)
   uint8_t tmp = 0;
 8008ec8:	2300      	movs	r3, #0
 8008eca:	73fb      	strb	r3, [r7, #15]
   tmp = getPHYSR();
 8008ecc:	481a      	ldr	r0, [pc, #104]	; (8008f38 <wizphy_getphyconf+0x78>)
 8008ece:	f7fe f941 	bl	8007154 <WIZCHIP_READ>
 8008ed2:	4603      	mov	r3, r0
 8008ed4:	73fb      	strb	r3, [r7, #15]
   if(getPHYCR1() & PHYCR1_TE) phyconf->mode = PHY_MODE_TE;
 8008ed6:	4819      	ldr	r0, [pc, #100]	; (8008f3c <wizphy_getphyconf+0x7c>)
 8008ed8:	f7fe f93c 	bl	8007154 <WIZCHIP_READ>
 8008edc:	4603      	mov	r3, r0
 8008ede:	f003 0308 	and.w	r3, r3, #8
 8008ee2:	2b00      	cmp	r3, #0
 8008ee4:	d003      	beq.n	8008eee <wizphy_getphyconf+0x2e>
 8008ee6:	687b      	ldr	r3, [r7, #4]
 8008ee8:	2202      	movs	r2, #2
 8008eea:	701a      	strb	r2, [r3, #0]
 8008eec:	e00a      	b.n	8008f04 <wizphy_getphyconf+0x44>
   else                        phyconf->mode = (tmp & (1<<5)) ? PHY_MODE_MANUAL : PHY_MODE_AUTONEGO ;
 8008eee:	7bfb      	ldrb	r3, [r7, #15]
 8008ef0:	f003 0320 	and.w	r3, r3, #32
 8008ef4:	2b00      	cmp	r3, #0
 8008ef6:	bf0c      	ite	eq
 8008ef8:	2301      	moveq	r3, #1
 8008efa:	2300      	movne	r3, #0
 8008efc:	b2db      	uxtb	r3, r3
 8008efe:	461a      	mov	r2, r3
 8008f00:	687b      	ldr	r3, [r7, #4]
 8008f02:	701a      	strb	r2, [r3, #0]
   phyconf->speed  = (tmp & (1<<4)) ? PHY_SPEED_10    : PHY_SPEED_100;
 8008f04:	7bfb      	ldrb	r3, [r7, #15]
 8008f06:	f003 0310 	and.w	r3, r3, #16
 8008f0a:	2b00      	cmp	r3, #0
 8008f0c:	bf0c      	ite	eq
 8008f0e:	2301      	moveq	r3, #1
 8008f10:	2300      	movne	r3, #0
 8008f12:	b2db      	uxtb	r3, r3
 8008f14:	461a      	mov	r2, r3
 8008f16:	687b      	ldr	r3, [r7, #4]
 8008f18:	705a      	strb	r2, [r3, #1]
   phyconf->duplex = (tmp & (1<<3)) ? PHY_DUPLEX_HALF : PHY_DUPLEX_FULL;
 8008f1a:	7bfb      	ldrb	r3, [r7, #15]
 8008f1c:	f003 0308 	and.w	r3, r3, #8
 8008f20:	2b00      	cmp	r3, #0
 8008f22:	bf0c      	ite	eq
 8008f24:	2301      	moveq	r3, #1
 8008f26:	2300      	movne	r3, #0
 8008f28:	b2db      	uxtb	r3, r3
 8008f2a:	461a      	mov	r2, r3
 8008f2c:	687b      	ldr	r3, [r7, #4]
 8008f2e:	709a      	strb	r2, [r3, #2]
   if(getPHYCR1() & PHYCR1_TE) phyconf->mode = PHY_MODE_TE;
   else phyconf->mode   = (tmp & BMCR_ANE) ? PHY_MODE_AUTONEGO : PHY_MODE_MANUAL;
   phyconf->duplex = (tmp & BMCR_DPX) ? PHY_DUPLEX_FULL   : PHY_DUPLEX_HALF;
   phyconf->speed  = (tmp & BMCR_SPD) ? PHY_SPEED_100     : PHY_SPEED_10;
#endif
}
 8008f30:	bf00      	nop
 8008f32:	3710      	adds	r7, #16
 8008f34:	46bd      	mov	sp, r7
 8008f36:	bd80      	pop	{r7, pc}
 8008f38:	60300000 	.word	0x60300000
 8008f3c:	60301d00 	.word	0x60301d00

08008f40 <wizphy_getphystatus>:

void wizphy_getphystatus(wiz_PhyConf* phyconf)
{
 8008f40:	b580      	push	{r7, lr}
 8008f42:	b084      	sub	sp, #16
 8008f44:	af00      	add	r7, sp, #0
 8008f46:	6078      	str	r0, [r7, #4]
   uint8_t tmp = 0;
 8008f48:	2300      	movs	r3, #0
 8008f4a:	73fb      	strb	r3, [r7, #15]
   tmp = getPHYSR();
 8008f4c:	481a      	ldr	r0, [pc, #104]	; (8008fb8 <wizphy_getphystatus+0x78>)
 8008f4e:	f7fe f901 	bl	8007154 <WIZCHIP_READ>
 8008f52:	4603      	mov	r3, r0
 8008f54:	73fb      	strb	r3, [r7, #15]
   if(getPHYCR1() & PHYCR1_TE) phyconf->mode = PHY_MODE_TE;
 8008f56:	4819      	ldr	r0, [pc, #100]	; (8008fbc <wizphy_getphystatus+0x7c>)
 8008f58:	f7fe f8fc 	bl	8007154 <WIZCHIP_READ>
 8008f5c:	4603      	mov	r3, r0
 8008f5e:	f003 0308 	and.w	r3, r3, #8
 8008f62:	2b00      	cmp	r3, #0
 8008f64:	d003      	beq.n	8008f6e <wizphy_getphystatus+0x2e>
 8008f66:	687b      	ldr	r3, [r7, #4]
 8008f68:	2202      	movs	r2, #2
 8008f6a:	701a      	strb	r2, [r3, #0]
 8008f6c:	e00a      	b.n	8008f84 <wizphy_getphystatus+0x44>
   else phyconf->mode   = (tmp & (1<<5))    ? PHY_MODE_MANUAL : PHY_MODE_AUTONEGO ;
 8008f6e:	7bfb      	ldrb	r3, [r7, #15]
 8008f70:	f003 0320 	and.w	r3, r3, #32
 8008f74:	2b00      	cmp	r3, #0
 8008f76:	bf0c      	ite	eq
 8008f78:	2301      	moveq	r3, #1
 8008f7a:	2300      	movne	r3, #0
 8008f7c:	b2db      	uxtb	r3, r3
 8008f7e:	461a      	mov	r2, r3
 8008f80:	687b      	ldr	r3, [r7, #4]
 8008f82:	701a      	strb	r2, [r3, #0]
   phyconf->speed  = (tmp & PHYSR_SPD) ? PHY_SPEED_10    : PHY_SPEED_100;
 8008f84:	7bfb      	ldrb	r3, [r7, #15]
 8008f86:	f003 0302 	and.w	r3, r3, #2
 8008f8a:	2b00      	cmp	r3, #0
 8008f8c:	bf0c      	ite	eq
 8008f8e:	2301      	moveq	r3, #1
 8008f90:	2300      	movne	r3, #0
 8008f92:	b2db      	uxtb	r3, r3
 8008f94:	461a      	mov	r2, r3
 8008f96:	687b      	ldr	r3, [r7, #4]
 8008f98:	705a      	strb	r2, [r3, #1]
   phyconf->duplex = (tmp & PHYSR_DPX) ? PHY_DUPLEX_HALF : PHY_DUPLEX_FULL;
 8008f9a:	7bfb      	ldrb	r3, [r7, #15]
 8008f9c:	f003 0304 	and.w	r3, r3, #4
 8008fa0:	2b00      	cmp	r3, #0
 8008fa2:	bf0c      	ite	eq
 8008fa4:	2301      	moveq	r3, #1
 8008fa6:	2300      	movne	r3, #0
 8008fa8:	b2db      	uxtb	r3, r3
 8008faa:	461a      	mov	r2, r3
 8008fac:	687b      	ldr	r3, [r7, #4]
 8008fae:	709a      	strb	r2, [r3, #2]
}
 8008fb0:	bf00      	nop
 8008fb2:	3710      	adds	r7, #16
 8008fb4:	46bd      	mov	sp, r7
 8008fb6:	bd80      	pop	{r7, pc}
 8008fb8:	60300000 	.word	0x60300000
 8008fbc:	60301d00 	.word	0x60301d00

08008fc0 <wizphy_setphypmode>:

void wizphy_setphypmode(uint8_t pmode)
{
 8008fc0:	b580      	push	{r7, lr}
 8008fc2:	b084      	sub	sp, #16
 8008fc4:	af00      	add	r7, sp, #0
 8008fc6:	4603      	mov	r3, r0
 8008fc8:	71fb      	strb	r3, [r7, #7]
#if (_PHY_IO_MODE_ == _PHY_IO_MODE_PHYCR_)
   uint8_t tmp = getPHYCR1();
 8008fca:	480d      	ldr	r0, [pc, #52]	; (8009000 <wizphy_setphypmode+0x40>)
 8008fcc:	f7fe f8c2 	bl	8007154 <WIZCHIP_READ>
 8008fd0:	4603      	mov	r3, r0
 8008fd2:	73fb      	strb	r3, [r7, #15]
   if (pmode == PHY_POWER_DOWN)    tmp |= PHYCR1_PWDN;
 8008fd4:	79fb      	ldrb	r3, [r7, #7]
 8008fd6:	2b01      	cmp	r3, #1
 8008fd8:	d104      	bne.n	8008fe4 <wizphy_setphypmode+0x24>
 8008fda:	7bfb      	ldrb	r3, [r7, #15]
 8008fdc:	f043 0320 	orr.w	r3, r3, #32
 8008fe0:	73fb      	strb	r3, [r7, #15]
 8008fe2:	e003      	b.n	8008fec <wizphy_setphypmode+0x2c>
   else                            tmp &= ~PHYCR1_PWDN;
 8008fe4:	7bfb      	ldrb	r3, [r7, #15]
 8008fe6:	f023 0320 	bic.w	r3, r3, #32
 8008fea:	73fb      	strb	r3, [r7, #15]
   setPHYCR1(tmp);
 8008fec:	7bfb      	ldrb	r3, [r7, #15]
 8008fee:	4619      	mov	r1, r3
 8008ff0:	4803      	ldr	r0, [pc, #12]	; (8009000 <wizphy_setphypmode+0x40>)
 8008ff2:	f7fe f881 	bl	80070f8 <WIZCHIP_WRITE>
   tmp = wiz_mdio_read(PHYRAR_BMCR);
   if (pmode == PHY_POWER_DOWN)    tmp |= BMCR_PWDN;
   else                            tmp &= ~BMCR_PWDN;
   wiz_mdio_write(PHYRAR_BMCR, tmp);
#endif   
}
 8008ff6:	bf00      	nop
 8008ff8:	3710      	adds	r7, #16
 8008ffa:	46bd      	mov	sp, r7
 8008ffc:	bd80      	pop	{r7, pc}
 8008ffe:	bf00      	nop
 8009000:	60301d00 	.word	0x60301d00

08009004 <wizphy_getphypmode>:

int8_t wizphy_getphypmode(void)
{
 8009004:	b580      	push	{r7, lr}
 8009006:	af00      	add	r7, sp, #0
#if (_PHY_IO_MODE_ == _PHY_IO_MODE_PHYCR_)
   if (getPHYCR1() & PHYCR1_PWDN)              return PHY_POWER_DOWN;
 8009008:	4806      	ldr	r0, [pc, #24]	; (8009024 <wizphy_getphypmode+0x20>)
 800900a:	f7fe f8a3 	bl	8007154 <WIZCHIP_READ>
 800900e:	4603      	mov	r3, r0
 8009010:	f003 0320 	and.w	r3, r3, #32
 8009014:	2b00      	cmp	r3, #0
 8009016:	d001      	beq.n	800901c <wizphy_getphypmode+0x18>
 8009018:	2301      	movs	r3, #1
 800901a:	e000      	b.n	800901e <wizphy_getphypmode+0x1a>
#elif (_PHY_IO_MODE_ == _PHY_IO_MODE_MII_)
   if (wiz_mdio_read(PHYRAR_BMCR) & BMCR_PWDN) return PHY_POWER_DOWN;
#endif   
   return PHY_POWER_NORM;
 800901c:	2300      	movs	r3, #0
}
 800901e:	4618      	mov	r0, r3
 8009020:	bd80      	pop	{r7, pc}
 8009022:	bf00      	nop
 8009024:	60301d00 	.word	0x60301d00

08009028 <wizchip_setnetinfo>:

void wizchip_setnetinfo(wiz_NetInfo* pnetinfo)
{
 8009028:	b580      	push	{r7, lr}
 800902a:	b084      	sub	sp, #16
 800902c:	af00      	add	r7, sp, #0
 800902e:	6078      	str	r0, [r7, #4]
   uint8_t i=0;
 8009030:	2300      	movs	r3, #0
 8009032:	73fb      	strb	r3, [r7, #15]
   setSHAR(pnetinfo->mac);
 8009034:	687b      	ldr	r3, [r7, #4]
 8009036:	2206      	movs	r2, #6
 8009038:	4619      	mov	r1, r3
 800903a:	482f      	ldr	r0, [pc, #188]	; (80090f8 <wizchip_setnetinfo+0xd0>)
 800903c:	f7fe f8be 	bl	80071bc <WIZCHIP_WRITE_BUF>
   setGAR(pnetinfo->gw);
 8009040:	687b      	ldr	r3, [r7, #4]
 8009042:	330e      	adds	r3, #14
 8009044:	2204      	movs	r2, #4
 8009046:	4619      	mov	r1, r3
 8009048:	482c      	ldr	r0, [pc, #176]	; (80090fc <wizchip_setnetinfo+0xd4>)
 800904a:	f7fe f8b7 	bl	80071bc <WIZCHIP_WRITE_BUF>
   setSUBR(pnetinfo->sn);
 800904e:	687b      	ldr	r3, [r7, #4]
 8009050:	330a      	adds	r3, #10
 8009052:	2204      	movs	r2, #4
 8009054:	4619      	mov	r1, r3
 8009056:	482a      	ldr	r0, [pc, #168]	; (8009100 <wizchip_setnetinfo+0xd8>)
 8009058:	f7fe f8b0 	bl	80071bc <WIZCHIP_WRITE_BUF>
   setSIPR(pnetinfo->ip);   
 800905c:	687b      	ldr	r3, [r7, #4]
 800905e:	3306      	adds	r3, #6
 8009060:	2204      	movs	r2, #4
 8009062:	4619      	mov	r1, r3
 8009064:	4827      	ldr	r0, [pc, #156]	; (8009104 <wizchip_setnetinfo+0xdc>)
 8009066:	f7fe f8a9 	bl	80071bc <WIZCHIP_WRITE_BUF>
   setGA6R(pnetinfo->gw6);
 800906a:	687b      	ldr	r3, [r7, #4]
 800906c:	3342      	adds	r3, #66	; 0x42
 800906e:	2210      	movs	r2, #16
 8009070:	4619      	mov	r1, r3
 8009072:	4825      	ldr	r0, [pc, #148]	; (8009108 <wizchip_setnetinfo+0xe0>)
 8009074:	f7fe f8a2 	bl	80071bc <WIZCHIP_WRITE_BUF>
   setSUB6R(pnetinfo->sn6);
 8009078:	687b      	ldr	r3, [r7, #4]
 800907a:	3332      	adds	r3, #50	; 0x32
 800907c:	2210      	movs	r2, #16
 800907e:	4619      	mov	r1, r3
 8009080:	4822      	ldr	r0, [pc, #136]	; (800910c <wizchip_setnetinfo+0xe4>)
 8009082:	f7fe f89b 	bl	80071bc <WIZCHIP_WRITE_BUF>
   setLLAR(pnetinfo->lla);
 8009086:	687b      	ldr	r3, [r7, #4]
 8009088:	3312      	adds	r3, #18
 800908a:	2210      	movs	r2, #16
 800908c:	4619      	mov	r1, r3
 800908e:	4820      	ldr	r0, [pc, #128]	; (8009110 <wizchip_setnetinfo+0xe8>)
 8009090:	f7fe f894 	bl	80071bc <WIZCHIP_WRITE_BUF>
   setGUAR(pnetinfo->gua);
 8009094:	687b      	ldr	r3, [r7, #4]
 8009096:	3322      	adds	r3, #34	; 0x22
 8009098:	2210      	movs	r2, #16
 800909a:	4619      	mov	r1, r3
 800909c:	481d      	ldr	r0, [pc, #116]	; (8009114 <wizchip_setnetinfo+0xec>)
 800909e:	f7fe f88d 	bl	80071bc <WIZCHIP_WRITE_BUF>

   for(i=0; i<4; i++)  _DNS_[i]  = pnetinfo->dns[i];
 80090a2:	2300      	movs	r3, #0
 80090a4:	73fb      	strb	r3, [r7, #15]
 80090a6:	e00a      	b.n	80090be <wizchip_setnetinfo+0x96>
 80090a8:	7bfa      	ldrb	r2, [r7, #15]
 80090aa:	7bfb      	ldrb	r3, [r7, #15]
 80090ac:	6879      	ldr	r1, [r7, #4]
 80090ae:	440a      	add	r2, r1
 80090b0:	f892 1052 	ldrb.w	r1, [r2, #82]	; 0x52
 80090b4:	4a18      	ldr	r2, [pc, #96]	; (8009118 <wizchip_setnetinfo+0xf0>)
 80090b6:	54d1      	strb	r1, [r2, r3]
 80090b8:	7bfb      	ldrb	r3, [r7, #15]
 80090ba:	3301      	adds	r3, #1
 80090bc:	73fb      	strb	r3, [r7, #15]
 80090be:	7bfb      	ldrb	r3, [r7, #15]
 80090c0:	2b03      	cmp	r3, #3
 80090c2:	d9f1      	bls.n	80090a8 <wizchip_setnetinfo+0x80>
   for(i=0; i<16; i++) _DNS6_[i] = pnetinfo->dns6[i];
 80090c4:	2300      	movs	r3, #0
 80090c6:	73fb      	strb	r3, [r7, #15]
 80090c8:	e00a      	b.n	80090e0 <wizchip_setnetinfo+0xb8>
 80090ca:	7bfa      	ldrb	r2, [r7, #15]
 80090cc:	7bfb      	ldrb	r3, [r7, #15]
 80090ce:	6879      	ldr	r1, [r7, #4]
 80090d0:	440a      	add	r2, r1
 80090d2:	f892 1056 	ldrb.w	r1, [r2, #86]	; 0x56
 80090d6:	4a11      	ldr	r2, [pc, #68]	; (800911c <wizchip_setnetinfo+0xf4>)
 80090d8:	54d1      	strb	r1, [r2, r3]
 80090da:	7bfb      	ldrb	r3, [r7, #15]
 80090dc:	3301      	adds	r3, #1
 80090de:	73fb      	strb	r3, [r7, #15]
 80090e0:	7bfb      	ldrb	r3, [r7, #15]
 80090e2:	2b0f      	cmp	r3, #15
 80090e4:	d9f1      	bls.n	80090ca <wizchip_setnetinfo+0xa2>

   _IPMODE_   = pnetinfo->ipmode;
 80090e6:	687b      	ldr	r3, [r7, #4]
 80090e8:	f893 2066 	ldrb.w	r2, [r3, #102]	; 0x66
 80090ec:	4b0c      	ldr	r3, [pc, #48]	; (8009120 <wizchip_setnetinfo+0xf8>)
 80090ee:	701a      	strb	r2, [r3, #0]
}
 80090f0:	bf00      	nop
 80090f2:	3710      	adds	r7, #16
 80090f4:	46bd      	mov	sp, r7
 80090f6:	bd80      	pop	{r7, pc}
 80090f8:	60412000 	.word	0x60412000
 80090fc:	60413000 	.word	0x60413000
 8009100:	60413400 	.word	0x60413400
 8009104:	60413800 	.word	0x60413800
 8009108:	60417000 	.word	0x60417000
 800910c:	60416000 	.word	0x60416000
 8009110:	60414000 	.word	0x60414000
 8009114:	60415000 	.word	0x60415000
 8009118:	20000158 	.word	0x20000158
 800911c:	2000015c 	.word	0x2000015c
 8009120:	2000016c 	.word	0x2000016c

08009124 <wizchip_getnetinfo>:

void wizchip_getnetinfo(wiz_NetInfo* pnetinfo)
{
 8009124:	b580      	push	{r7, lr}
 8009126:	b084      	sub	sp, #16
 8009128:	af00      	add	r7, sp, #0
 800912a:	6078      	str	r0, [r7, #4]
   uint8_t i = 0;
 800912c:	2300      	movs	r3, #0
 800912e:	73fb      	strb	r3, [r7, #15]
   getSHAR(pnetinfo->mac);
 8009130:	687b      	ldr	r3, [r7, #4]
 8009132:	2206      	movs	r2, #6
 8009134:	4619      	mov	r1, r3
 8009136:	4830      	ldr	r0, [pc, #192]	; (80091f8 <wizchip_getnetinfo+0xd4>)
 8009138:	f7fe f878 	bl	800722c <WIZCHIP_READ_BUF>

   getGAR(pnetinfo->gw);
 800913c:	687b      	ldr	r3, [r7, #4]
 800913e:	330e      	adds	r3, #14
 8009140:	2204      	movs	r2, #4
 8009142:	4619      	mov	r1, r3
 8009144:	482d      	ldr	r0, [pc, #180]	; (80091fc <wizchip_getnetinfo+0xd8>)
 8009146:	f7fe f871 	bl	800722c <WIZCHIP_READ_BUF>
   getSUBR(pnetinfo->sn);
 800914a:	687b      	ldr	r3, [r7, #4]
 800914c:	330a      	adds	r3, #10
 800914e:	2204      	movs	r2, #4
 8009150:	4619      	mov	r1, r3
 8009152:	482b      	ldr	r0, [pc, #172]	; (8009200 <wizchip_getnetinfo+0xdc>)
 8009154:	f7fe f86a 	bl	800722c <WIZCHIP_READ_BUF>
   getSIPR(pnetinfo->ip);
 8009158:	687b      	ldr	r3, [r7, #4]
 800915a:	3306      	adds	r3, #6
 800915c:	2204      	movs	r2, #4
 800915e:	4619      	mov	r1, r3
 8009160:	4828      	ldr	r0, [pc, #160]	; (8009204 <wizchip_getnetinfo+0xe0>)
 8009162:	f7fe f863 	bl	800722c <WIZCHIP_READ_BUF>
   
   getGA6R(pnetinfo->gw6);
 8009166:	687b      	ldr	r3, [r7, #4]
 8009168:	3342      	adds	r3, #66	; 0x42
 800916a:	2210      	movs	r2, #16
 800916c:	4619      	mov	r1, r3
 800916e:	4826      	ldr	r0, [pc, #152]	; (8009208 <wizchip_getnetinfo+0xe4>)
 8009170:	f7fe f85c 	bl	800722c <WIZCHIP_READ_BUF>
   getSUB6R(pnetinfo->sn6);
 8009174:	687b      	ldr	r3, [r7, #4]
 8009176:	3332      	adds	r3, #50	; 0x32
 8009178:	2210      	movs	r2, #16
 800917a:	4619      	mov	r1, r3
 800917c:	4823      	ldr	r0, [pc, #140]	; (800920c <wizchip_getnetinfo+0xe8>)
 800917e:	f7fe f855 	bl	800722c <WIZCHIP_READ_BUF>
   getLLAR(pnetinfo->lla);
 8009182:	687b      	ldr	r3, [r7, #4]
 8009184:	3312      	adds	r3, #18
 8009186:	2210      	movs	r2, #16
 8009188:	4619      	mov	r1, r3
 800918a:	4821      	ldr	r0, [pc, #132]	; (8009210 <wizchip_getnetinfo+0xec>)
 800918c:	f7fe f84e 	bl	800722c <WIZCHIP_READ_BUF>
   getGUAR(pnetinfo->gua);
 8009190:	687b      	ldr	r3, [r7, #4]
 8009192:	3322      	adds	r3, #34	; 0x22
 8009194:	2210      	movs	r2, #16
 8009196:	4619      	mov	r1, r3
 8009198:	481e      	ldr	r0, [pc, #120]	; (8009214 <wizchip_getnetinfo+0xf0>)
 800919a:	f7fe f847 	bl	800722c <WIZCHIP_READ_BUF>
   for(i=0; i<4; i++)  pnetinfo->dns[i] = _DNS_[i];
 800919e:	2300      	movs	r3, #0
 80091a0:	73fb      	strb	r3, [r7, #15]
 80091a2:	e00b      	b.n	80091bc <wizchip_getnetinfo+0x98>
 80091a4:	7bfa      	ldrb	r2, [r7, #15]
 80091a6:	7bfb      	ldrb	r3, [r7, #15]
 80091a8:	491b      	ldr	r1, [pc, #108]	; (8009218 <wizchip_getnetinfo+0xf4>)
 80091aa:	5c89      	ldrb	r1, [r1, r2]
 80091ac:	687a      	ldr	r2, [r7, #4]
 80091ae:	4413      	add	r3, r2
 80091b0:	460a      	mov	r2, r1
 80091b2:	f883 2052 	strb.w	r2, [r3, #82]	; 0x52
 80091b6:	7bfb      	ldrb	r3, [r7, #15]
 80091b8:	3301      	adds	r3, #1
 80091ba:	73fb      	strb	r3, [r7, #15]
 80091bc:	7bfb      	ldrb	r3, [r7, #15]
 80091be:	2b03      	cmp	r3, #3
 80091c0:	d9f0      	bls.n	80091a4 <wizchip_getnetinfo+0x80>
   for(i=0; i<16; i++) pnetinfo->dns6[i]  = _DNS6_[i];
 80091c2:	2300      	movs	r3, #0
 80091c4:	73fb      	strb	r3, [r7, #15]
 80091c6:	e00b      	b.n	80091e0 <wizchip_getnetinfo+0xbc>
 80091c8:	7bfa      	ldrb	r2, [r7, #15]
 80091ca:	7bfb      	ldrb	r3, [r7, #15]
 80091cc:	4913      	ldr	r1, [pc, #76]	; (800921c <wizchip_getnetinfo+0xf8>)
 80091ce:	5c89      	ldrb	r1, [r1, r2]
 80091d0:	687a      	ldr	r2, [r7, #4]
 80091d2:	4413      	add	r3, r2
 80091d4:	460a      	mov	r2, r1
 80091d6:	f883 2056 	strb.w	r2, [r3, #86]	; 0x56
 80091da:	7bfb      	ldrb	r3, [r7, #15]
 80091dc:	3301      	adds	r3, #1
 80091de:	73fb      	strb	r3, [r7, #15]
 80091e0:	7bfb      	ldrb	r3, [r7, #15]
 80091e2:	2b0f      	cmp	r3, #15
 80091e4:	d9f0      	bls.n	80091c8 <wizchip_getnetinfo+0xa4>

   pnetinfo->ipmode = _IPMODE_;
 80091e6:	4b0e      	ldr	r3, [pc, #56]	; (8009220 <wizchip_getnetinfo+0xfc>)
 80091e8:	781a      	ldrb	r2, [r3, #0]
 80091ea:	687b      	ldr	r3, [r7, #4]
 80091ec:	f883 2066 	strb.w	r2, [r3, #102]	; 0x66
}
 80091f0:	bf00      	nop
 80091f2:	3710      	adds	r7, #16
 80091f4:	46bd      	mov	sp, r7
 80091f6:	bd80      	pop	{r7, pc}
 80091f8:	60412000 	.word	0x60412000
 80091fc:	60413000 	.word	0x60413000
 8009200:	60413400 	.word	0x60413400
 8009204:	60413800 	.word	0x60413800
 8009208:	60417000 	.word	0x60417000
 800920c:	60416000 	.word	0x60416000
 8009210:	60414000 	.word	0x60414000
 8009214:	60415000 	.word	0x60415000
 8009218:	20000158 	.word	0x20000158
 800921c:	2000015c 	.word	0x2000015c
 8009220:	2000016c 	.word	0x2000016c

08009224 <wizchip_setnetmode>:

void wizchip_setnetmode(netmode_type netmode)
{
 8009224:	b580      	push	{r7, lr}
 8009226:	b084      	sub	sp, #16
 8009228:	af00      	add	r7, sp, #0
 800922a:	6078      	str	r0, [r7, #4]
   uint32_t tmp = (uint32_t) netmode;
 800922c:	687b      	ldr	r3, [r7, #4]
 800922e:	60fb      	str	r3, [r7, #12]
   setNETMR ((uint8_t)tmp);
 8009230:	68fb      	ldr	r3, [r7, #12]
 8009232:	b2db      	uxtb	r3, r3
 8009234:	4619      	mov	r1, r3
 8009236:	480e      	ldr	r0, [pc, #56]	; (8009270 <wizchip_setnetmode+0x4c>)
 8009238:	f7fd ff5e 	bl	80070f8 <WIZCHIP_WRITE>
   setNETMR2((uint8_t)(tmp>>8));
 800923c:	68fb      	ldr	r3, [r7, #12]
 800923e:	0a1b      	lsrs	r3, r3, #8
 8009240:	b2db      	uxtb	r3, r3
 8009242:	4619      	mov	r1, r3
 8009244:	480b      	ldr	r0, [pc, #44]	; (8009274 <wizchip_setnetmode+0x50>)
 8009246:	f7fd ff57 	bl	80070f8 <WIZCHIP_WRITE>
   setNET4MR((uint8_t)(tmp>>16));
 800924a:	68fb      	ldr	r3, [r7, #12]
 800924c:	0c1b      	lsrs	r3, r3, #16
 800924e:	b2db      	uxtb	r3, r3
 8009250:	4619      	mov	r1, r3
 8009252:	4809      	ldr	r0, [pc, #36]	; (8009278 <wizchip_setnetmode+0x54>)
 8009254:	f7fd ff50 	bl	80070f8 <WIZCHIP_WRITE>
   setNET6MR((uint8_t)(tmp>>24));
 8009258:	68fb      	ldr	r3, [r7, #12]
 800925a:	0e1b      	lsrs	r3, r3, #24
 800925c:	b2db      	uxtb	r3, r3
 800925e:	4619      	mov	r1, r3
 8009260:	4806      	ldr	r0, [pc, #24]	; (800927c <wizchip_setnetmode+0x58>)
 8009262:	f7fd ff49 	bl	80070f8 <WIZCHIP_WRITE>
}
 8009266:	bf00      	nop
 8009268:	3710      	adds	r7, #16
 800926a:	46bd      	mov	sp, r7
 800926c:	bd80      	pop	{r7, pc}
 800926e:	bf00      	nop
 8009270:	60400800 	.word	0x60400800
 8009274:	60400900 	.word	0x60400900
 8009278:	60400000 	.word	0x60400000
 800927c:	60400400 	.word	0x60400400

08009280 <wizchip_getnetmode>:

netmode_type wizchip_getnetmode(void)
{
 8009280:	b590      	push	{r4, r7, lr}
 8009282:	b083      	sub	sp, #12
 8009284:	af00      	add	r7, sp, #0
   uint32_t ret = 0;
 8009286:	2300      	movs	r3, #0
 8009288:	607b      	str	r3, [r7, #4]
   ret = getNETMR();
 800928a:	4811      	ldr	r0, [pc, #68]	; (80092d0 <wizchip_getnetmode+0x50>)
 800928c:	f7fd ff62 	bl	8007154 <WIZCHIP_READ>
 8009290:	4603      	mov	r3, r0
 8009292:	607b      	str	r3, [r7, #4]
   ret = (ret << 8)  + getNETMR2();
 8009294:	687b      	ldr	r3, [r7, #4]
 8009296:	021c      	lsls	r4, r3, #8
 8009298:	480e      	ldr	r0, [pc, #56]	; (80092d4 <wizchip_getnetmode+0x54>)
 800929a:	f7fd ff5b 	bl	8007154 <WIZCHIP_READ>
 800929e:	4603      	mov	r3, r0
 80092a0:	4423      	add	r3, r4
 80092a2:	607b      	str	r3, [r7, #4]
   ret = (ret << 16) + getNET4MR();
 80092a4:	687b      	ldr	r3, [r7, #4]
 80092a6:	041c      	lsls	r4, r3, #16
 80092a8:	480b      	ldr	r0, [pc, #44]	; (80092d8 <wizchip_getnetmode+0x58>)
 80092aa:	f7fd ff53 	bl	8007154 <WIZCHIP_READ>
 80092ae:	4603      	mov	r3, r0
 80092b0:	4423      	add	r3, r4
 80092b2:	607b      	str	r3, [r7, #4]
   ret = (ret << 24) + getNET6MR();
 80092b4:	687b      	ldr	r3, [r7, #4]
 80092b6:	061c      	lsls	r4, r3, #24
 80092b8:	4808      	ldr	r0, [pc, #32]	; (80092dc <wizchip_getnetmode+0x5c>)
 80092ba:	f7fd ff4b 	bl	8007154 <WIZCHIP_READ>
 80092be:	4603      	mov	r3, r0
 80092c0:	4423      	add	r3, r4
 80092c2:	607b      	str	r3, [r7, #4]
   return (netmode_type)ret;
 80092c4:	687b      	ldr	r3, [r7, #4]
}
 80092c6:	4618      	mov	r0, r3
 80092c8:	370c      	adds	r7, #12
 80092ca:	46bd      	mov	sp, r7
 80092cc:	bd90      	pop	{r4, r7, pc}
 80092ce:	bf00      	nop
 80092d0:	60400800 	.word	0x60400800
 80092d4:	60400900 	.word	0x60400900
 80092d8:	60400000 	.word	0x60400000
 80092dc:	60400400 	.word	0x60400400

080092e0 <wizchip_settimeout>:

void wizchip_settimeout(wiz_NetTimeout* nettime)
{
 80092e0:	b580      	push	{r7, lr}
 80092e2:	b082      	sub	sp, #8
 80092e4:	af00      	add	r7, sp, #0
 80092e6:	6078      	str	r0, [r7, #4]
   setRCR(nettime->s_retry_cnt);
 80092e8:	687b      	ldr	r3, [r7, #4]
 80092ea:	781b      	ldrb	r3, [r3, #0]
 80092ec:	4619      	mov	r1, r3
 80092ee:	4816      	ldr	r0, [pc, #88]	; (8009348 <wizchip_settimeout+0x68>)
 80092f0:	f7fd ff02 	bl	80070f8 <WIZCHIP_WRITE>
   setRTR(nettime->s_time_100us);
 80092f4:	687b      	ldr	r3, [r7, #4]
 80092f6:	885b      	ldrh	r3, [r3, #2]
 80092f8:	0a1b      	lsrs	r3, r3, #8
 80092fa:	b29b      	uxth	r3, r3
 80092fc:	b2db      	uxtb	r3, r3
 80092fe:	4619      	mov	r1, r3
 8009300:	4812      	ldr	r0, [pc, #72]	; (800934c <wizchip_settimeout+0x6c>)
 8009302:	f7fd fef9 	bl	80070f8 <WIZCHIP_WRITE>
 8009306:	687b      	ldr	r3, [r7, #4]
 8009308:	885b      	ldrh	r3, [r3, #2]
 800930a:	b2db      	uxtb	r3, r3
 800930c:	4619      	mov	r1, r3
 800930e:	4810      	ldr	r0, [pc, #64]	; (8009350 <wizchip_settimeout+0x70>)
 8009310:	f7fd fef2 	bl	80070f8 <WIZCHIP_WRITE>
   setSLRCR(nettime->sl_retry_cnt);
 8009314:	687b      	ldr	r3, [r7, #4]
 8009316:	791b      	ldrb	r3, [r3, #4]
 8009318:	4619      	mov	r1, r3
 800931a:	480e      	ldr	r0, [pc, #56]	; (8009354 <wizchip_settimeout+0x74>)
 800931c:	f7fd feec 	bl	80070f8 <WIZCHIP_WRITE>
   setSLRTR(nettime->sl_time_100us);
 8009320:	687b      	ldr	r3, [r7, #4]
 8009322:	88db      	ldrh	r3, [r3, #6]
 8009324:	0a1b      	lsrs	r3, r3, #8
 8009326:	b29b      	uxth	r3, r3
 8009328:	b2db      	uxtb	r3, r3
 800932a:	4619      	mov	r1, r3
 800932c:	480a      	ldr	r0, [pc, #40]	; (8009358 <wizchip_settimeout+0x78>)
 800932e:	f7fd fee3 	bl	80070f8 <WIZCHIP_WRITE>
 8009332:	687b      	ldr	r3, [r7, #4]
 8009334:	88db      	ldrh	r3, [r3, #6]
 8009336:	b2db      	uxtb	r3, r3
 8009338:	4619      	mov	r1, r3
 800933a:	4808      	ldr	r0, [pc, #32]	; (800935c <wizchip_settimeout+0x7c>)
 800933c:	f7fd fedc 	bl	80070f8 <WIZCHIP_WRITE>
}
 8009340:	bf00      	nop
 8009342:	3708      	adds	r7, #8
 8009344:	46bd      	mov	sp, r7
 8009346:	bd80      	pop	{r7, pc}
 8009348:	60420400 	.word	0x60420400
 800934c:	60420000 	.word	0x60420000
 8009350:	60420100 	.word	0x60420100
 8009354:	60420c00 	.word	0x60420c00
 8009358:	60420800 	.word	0x60420800
 800935c:	60420900 	.word	0x60420900

08009360 <wizchip_gettimeout>:

void wizchip_gettimeout(wiz_NetTimeout* nettime)
{
 8009360:	b590      	push	{r4, r7, lr}
 8009362:	b083      	sub	sp, #12
 8009364:	af00      	add	r7, sp, #0
 8009366:	6078      	str	r0, [r7, #4]
   nettime->s_retry_cnt   = getRCR();
 8009368:	4818      	ldr	r0, [pc, #96]	; (80093cc <wizchip_gettimeout+0x6c>)
 800936a:	f7fd fef3 	bl	8007154 <WIZCHIP_READ>
 800936e:	4603      	mov	r3, r0
 8009370:	461a      	mov	r2, r3
 8009372:	687b      	ldr	r3, [r7, #4]
 8009374:	701a      	strb	r2, [r3, #0]
   nettime->s_time_100us  = getRTR();
 8009376:	4816      	ldr	r0, [pc, #88]	; (80093d0 <wizchip_gettimeout+0x70>)
 8009378:	f7fd feec 	bl	8007154 <WIZCHIP_READ>
 800937c:	4603      	mov	r3, r0
 800937e:	b29b      	uxth	r3, r3
 8009380:	021b      	lsls	r3, r3, #8
 8009382:	b29c      	uxth	r4, r3
 8009384:	4813      	ldr	r0, [pc, #76]	; (80093d4 <wizchip_gettimeout+0x74>)
 8009386:	f7fd fee5 	bl	8007154 <WIZCHIP_READ>
 800938a:	4603      	mov	r3, r0
 800938c:	b29b      	uxth	r3, r3
 800938e:	4423      	add	r3, r4
 8009390:	b29a      	uxth	r2, r3
 8009392:	687b      	ldr	r3, [r7, #4]
 8009394:	805a      	strh	r2, [r3, #2]
   nettime->sl_retry_cnt  = getSLRCR();
 8009396:	4810      	ldr	r0, [pc, #64]	; (80093d8 <wizchip_gettimeout+0x78>)
 8009398:	f7fd fedc 	bl	8007154 <WIZCHIP_READ>
 800939c:	4603      	mov	r3, r0
 800939e:	461a      	mov	r2, r3
 80093a0:	687b      	ldr	r3, [r7, #4]
 80093a2:	711a      	strb	r2, [r3, #4]
   nettime->sl_time_100us = getSLRTR();
 80093a4:	480d      	ldr	r0, [pc, #52]	; (80093dc <wizchip_gettimeout+0x7c>)
 80093a6:	f7fd fed5 	bl	8007154 <WIZCHIP_READ>
 80093aa:	4603      	mov	r3, r0
 80093ac:	b29b      	uxth	r3, r3
 80093ae:	021b      	lsls	r3, r3, #8
 80093b0:	b29c      	uxth	r4, r3
 80093b2:	480b      	ldr	r0, [pc, #44]	; (80093e0 <wizchip_gettimeout+0x80>)
 80093b4:	f7fd fece 	bl	8007154 <WIZCHIP_READ>
 80093b8:	4603      	mov	r3, r0
 80093ba:	b29b      	uxth	r3, r3
 80093bc:	4423      	add	r3, r4
 80093be:	b29a      	uxth	r2, r3
 80093c0:	687b      	ldr	r3, [r7, #4]
 80093c2:	80da      	strh	r2, [r3, #6]
}
 80093c4:	bf00      	nop
 80093c6:	370c      	adds	r7, #12
 80093c8:	46bd      	mov	sp, r7
 80093ca:	bd90      	pop	{r4, r7, pc}
 80093cc:	60420400 	.word	0x60420400
 80093d0:	60420000 	.word	0x60420000
 80093d4:	60420100 	.word	0x60420100
 80093d8:	60420c00 	.word	0x60420c00
 80093dc:	60420800 	.word	0x60420800
 80093e0:	60420900 	.word	0x60420900

080093e4 <__errno>:
 80093e4:	4b01      	ldr	r3, [pc, #4]	; (80093ec <__errno+0x8>)
 80093e6:	6818      	ldr	r0, [r3, #0]
 80093e8:	4770      	bx	lr
 80093ea:	bf00      	nop
 80093ec:	200000b0 	.word	0x200000b0

080093f0 <__libc_init_array>:
 80093f0:	b570      	push	{r4, r5, r6, lr}
 80093f2:	4d0d      	ldr	r5, [pc, #52]	; (8009428 <__libc_init_array+0x38>)
 80093f4:	4c0d      	ldr	r4, [pc, #52]	; (800942c <__libc_init_array+0x3c>)
 80093f6:	1b64      	subs	r4, r4, r5
 80093f8:	10a4      	asrs	r4, r4, #2
 80093fa:	2600      	movs	r6, #0
 80093fc:	42a6      	cmp	r6, r4
 80093fe:	d109      	bne.n	8009414 <__libc_init_array+0x24>
 8009400:	4d0b      	ldr	r5, [pc, #44]	; (8009430 <__libc_init_array+0x40>)
 8009402:	4c0c      	ldr	r4, [pc, #48]	; (8009434 <__libc_init_array+0x44>)
 8009404:	f000 ffec 	bl	800a3e0 <_init>
 8009408:	1b64      	subs	r4, r4, r5
 800940a:	10a4      	asrs	r4, r4, #2
 800940c:	2600      	movs	r6, #0
 800940e:	42a6      	cmp	r6, r4
 8009410:	d105      	bne.n	800941e <__libc_init_array+0x2e>
 8009412:	bd70      	pop	{r4, r5, r6, pc}
 8009414:	f855 3b04 	ldr.w	r3, [r5], #4
 8009418:	4798      	blx	r3
 800941a:	3601      	adds	r6, #1
 800941c:	e7ee      	b.n	80093fc <__libc_init_array+0xc>
 800941e:	f855 3b04 	ldr.w	r3, [r5], #4
 8009422:	4798      	blx	r3
 8009424:	3601      	adds	r6, #1
 8009426:	e7f2      	b.n	800940e <__libc_init_array+0x1e>
 8009428:	0800a6f8 	.word	0x0800a6f8
 800942c:	0800a6f8 	.word	0x0800a6f8
 8009430:	0800a6f8 	.word	0x0800a6f8
 8009434:	0800a6fc 	.word	0x0800a6fc

08009438 <memset>:
 8009438:	4402      	add	r2, r0
 800943a:	4603      	mov	r3, r0
 800943c:	4293      	cmp	r3, r2
 800943e:	d100      	bne.n	8009442 <memset+0xa>
 8009440:	4770      	bx	lr
 8009442:	f803 1b01 	strb.w	r1, [r3], #1
 8009446:	e7f9      	b.n	800943c <memset+0x4>

08009448 <iprintf>:
 8009448:	b40f      	push	{r0, r1, r2, r3}
 800944a:	4b0a      	ldr	r3, [pc, #40]	; (8009474 <iprintf+0x2c>)
 800944c:	b513      	push	{r0, r1, r4, lr}
 800944e:	681c      	ldr	r4, [r3, #0]
 8009450:	b124      	cbz	r4, 800945c <iprintf+0x14>
 8009452:	69a3      	ldr	r3, [r4, #24]
 8009454:	b913      	cbnz	r3, 800945c <iprintf+0x14>
 8009456:	4620      	mov	r0, r4
 8009458:	f000 fa5e 	bl	8009918 <__sinit>
 800945c:	ab05      	add	r3, sp, #20
 800945e:	9a04      	ldr	r2, [sp, #16]
 8009460:	68a1      	ldr	r1, [r4, #8]
 8009462:	9301      	str	r3, [sp, #4]
 8009464:	4620      	mov	r0, r4
 8009466:	f000 fc2f 	bl	8009cc8 <_vfiprintf_r>
 800946a:	b002      	add	sp, #8
 800946c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8009470:	b004      	add	sp, #16
 8009472:	4770      	bx	lr
 8009474:	200000b0 	.word	0x200000b0

08009478 <_puts_r>:
 8009478:	b570      	push	{r4, r5, r6, lr}
 800947a:	460e      	mov	r6, r1
 800947c:	4605      	mov	r5, r0
 800947e:	b118      	cbz	r0, 8009488 <_puts_r+0x10>
 8009480:	6983      	ldr	r3, [r0, #24]
 8009482:	b90b      	cbnz	r3, 8009488 <_puts_r+0x10>
 8009484:	f000 fa48 	bl	8009918 <__sinit>
 8009488:	69ab      	ldr	r3, [r5, #24]
 800948a:	68ac      	ldr	r4, [r5, #8]
 800948c:	b913      	cbnz	r3, 8009494 <_puts_r+0x1c>
 800948e:	4628      	mov	r0, r5
 8009490:	f000 fa42 	bl	8009918 <__sinit>
 8009494:	4b2c      	ldr	r3, [pc, #176]	; (8009548 <_puts_r+0xd0>)
 8009496:	429c      	cmp	r4, r3
 8009498:	d120      	bne.n	80094dc <_puts_r+0x64>
 800949a:	686c      	ldr	r4, [r5, #4]
 800949c:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800949e:	07db      	lsls	r3, r3, #31
 80094a0:	d405      	bmi.n	80094ae <_puts_r+0x36>
 80094a2:	89a3      	ldrh	r3, [r4, #12]
 80094a4:	0598      	lsls	r0, r3, #22
 80094a6:	d402      	bmi.n	80094ae <_puts_r+0x36>
 80094a8:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80094aa:	f000 fad3 	bl	8009a54 <__retarget_lock_acquire_recursive>
 80094ae:	89a3      	ldrh	r3, [r4, #12]
 80094b0:	0719      	lsls	r1, r3, #28
 80094b2:	d51d      	bpl.n	80094f0 <_puts_r+0x78>
 80094b4:	6923      	ldr	r3, [r4, #16]
 80094b6:	b1db      	cbz	r3, 80094f0 <_puts_r+0x78>
 80094b8:	3e01      	subs	r6, #1
 80094ba:	68a3      	ldr	r3, [r4, #8]
 80094bc:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 80094c0:	3b01      	subs	r3, #1
 80094c2:	60a3      	str	r3, [r4, #8]
 80094c4:	bb39      	cbnz	r1, 8009516 <_puts_r+0x9e>
 80094c6:	2b00      	cmp	r3, #0
 80094c8:	da38      	bge.n	800953c <_puts_r+0xc4>
 80094ca:	4622      	mov	r2, r4
 80094cc:	210a      	movs	r1, #10
 80094ce:	4628      	mov	r0, r5
 80094d0:	f000 f848 	bl	8009564 <__swbuf_r>
 80094d4:	3001      	adds	r0, #1
 80094d6:	d011      	beq.n	80094fc <_puts_r+0x84>
 80094d8:	250a      	movs	r5, #10
 80094da:	e011      	b.n	8009500 <_puts_r+0x88>
 80094dc:	4b1b      	ldr	r3, [pc, #108]	; (800954c <_puts_r+0xd4>)
 80094de:	429c      	cmp	r4, r3
 80094e0:	d101      	bne.n	80094e6 <_puts_r+0x6e>
 80094e2:	68ac      	ldr	r4, [r5, #8]
 80094e4:	e7da      	b.n	800949c <_puts_r+0x24>
 80094e6:	4b1a      	ldr	r3, [pc, #104]	; (8009550 <_puts_r+0xd8>)
 80094e8:	429c      	cmp	r4, r3
 80094ea:	bf08      	it	eq
 80094ec:	68ec      	ldreq	r4, [r5, #12]
 80094ee:	e7d5      	b.n	800949c <_puts_r+0x24>
 80094f0:	4621      	mov	r1, r4
 80094f2:	4628      	mov	r0, r5
 80094f4:	f000 f888 	bl	8009608 <__swsetup_r>
 80094f8:	2800      	cmp	r0, #0
 80094fa:	d0dd      	beq.n	80094b8 <_puts_r+0x40>
 80094fc:	f04f 35ff 	mov.w	r5, #4294967295
 8009500:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8009502:	07da      	lsls	r2, r3, #31
 8009504:	d405      	bmi.n	8009512 <_puts_r+0x9a>
 8009506:	89a3      	ldrh	r3, [r4, #12]
 8009508:	059b      	lsls	r3, r3, #22
 800950a:	d402      	bmi.n	8009512 <_puts_r+0x9a>
 800950c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800950e:	f000 faa2 	bl	8009a56 <__retarget_lock_release_recursive>
 8009512:	4628      	mov	r0, r5
 8009514:	bd70      	pop	{r4, r5, r6, pc}
 8009516:	2b00      	cmp	r3, #0
 8009518:	da04      	bge.n	8009524 <_puts_r+0xac>
 800951a:	69a2      	ldr	r2, [r4, #24]
 800951c:	429a      	cmp	r2, r3
 800951e:	dc06      	bgt.n	800952e <_puts_r+0xb6>
 8009520:	290a      	cmp	r1, #10
 8009522:	d004      	beq.n	800952e <_puts_r+0xb6>
 8009524:	6823      	ldr	r3, [r4, #0]
 8009526:	1c5a      	adds	r2, r3, #1
 8009528:	6022      	str	r2, [r4, #0]
 800952a:	7019      	strb	r1, [r3, #0]
 800952c:	e7c5      	b.n	80094ba <_puts_r+0x42>
 800952e:	4622      	mov	r2, r4
 8009530:	4628      	mov	r0, r5
 8009532:	f000 f817 	bl	8009564 <__swbuf_r>
 8009536:	3001      	adds	r0, #1
 8009538:	d1bf      	bne.n	80094ba <_puts_r+0x42>
 800953a:	e7df      	b.n	80094fc <_puts_r+0x84>
 800953c:	6823      	ldr	r3, [r4, #0]
 800953e:	250a      	movs	r5, #10
 8009540:	1c5a      	adds	r2, r3, #1
 8009542:	6022      	str	r2, [r4, #0]
 8009544:	701d      	strb	r5, [r3, #0]
 8009546:	e7db      	b.n	8009500 <_puts_r+0x88>
 8009548:	0800a67c 	.word	0x0800a67c
 800954c:	0800a69c 	.word	0x0800a69c
 8009550:	0800a65c 	.word	0x0800a65c

08009554 <puts>:
 8009554:	4b02      	ldr	r3, [pc, #8]	; (8009560 <puts+0xc>)
 8009556:	4601      	mov	r1, r0
 8009558:	6818      	ldr	r0, [r3, #0]
 800955a:	f7ff bf8d 	b.w	8009478 <_puts_r>
 800955e:	bf00      	nop
 8009560:	200000b0 	.word	0x200000b0

08009564 <__swbuf_r>:
 8009564:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009566:	460e      	mov	r6, r1
 8009568:	4614      	mov	r4, r2
 800956a:	4605      	mov	r5, r0
 800956c:	b118      	cbz	r0, 8009576 <__swbuf_r+0x12>
 800956e:	6983      	ldr	r3, [r0, #24]
 8009570:	b90b      	cbnz	r3, 8009576 <__swbuf_r+0x12>
 8009572:	f000 f9d1 	bl	8009918 <__sinit>
 8009576:	4b21      	ldr	r3, [pc, #132]	; (80095fc <__swbuf_r+0x98>)
 8009578:	429c      	cmp	r4, r3
 800957a:	d12b      	bne.n	80095d4 <__swbuf_r+0x70>
 800957c:	686c      	ldr	r4, [r5, #4]
 800957e:	69a3      	ldr	r3, [r4, #24]
 8009580:	60a3      	str	r3, [r4, #8]
 8009582:	89a3      	ldrh	r3, [r4, #12]
 8009584:	071a      	lsls	r2, r3, #28
 8009586:	d52f      	bpl.n	80095e8 <__swbuf_r+0x84>
 8009588:	6923      	ldr	r3, [r4, #16]
 800958a:	b36b      	cbz	r3, 80095e8 <__swbuf_r+0x84>
 800958c:	6923      	ldr	r3, [r4, #16]
 800958e:	6820      	ldr	r0, [r4, #0]
 8009590:	1ac0      	subs	r0, r0, r3
 8009592:	6963      	ldr	r3, [r4, #20]
 8009594:	b2f6      	uxtb	r6, r6
 8009596:	4283      	cmp	r3, r0
 8009598:	4637      	mov	r7, r6
 800959a:	dc04      	bgt.n	80095a6 <__swbuf_r+0x42>
 800959c:	4621      	mov	r1, r4
 800959e:	4628      	mov	r0, r5
 80095a0:	f000 f926 	bl	80097f0 <_fflush_r>
 80095a4:	bb30      	cbnz	r0, 80095f4 <__swbuf_r+0x90>
 80095a6:	68a3      	ldr	r3, [r4, #8]
 80095a8:	3b01      	subs	r3, #1
 80095aa:	60a3      	str	r3, [r4, #8]
 80095ac:	6823      	ldr	r3, [r4, #0]
 80095ae:	1c5a      	adds	r2, r3, #1
 80095b0:	6022      	str	r2, [r4, #0]
 80095b2:	701e      	strb	r6, [r3, #0]
 80095b4:	6963      	ldr	r3, [r4, #20]
 80095b6:	3001      	adds	r0, #1
 80095b8:	4283      	cmp	r3, r0
 80095ba:	d004      	beq.n	80095c6 <__swbuf_r+0x62>
 80095bc:	89a3      	ldrh	r3, [r4, #12]
 80095be:	07db      	lsls	r3, r3, #31
 80095c0:	d506      	bpl.n	80095d0 <__swbuf_r+0x6c>
 80095c2:	2e0a      	cmp	r6, #10
 80095c4:	d104      	bne.n	80095d0 <__swbuf_r+0x6c>
 80095c6:	4621      	mov	r1, r4
 80095c8:	4628      	mov	r0, r5
 80095ca:	f000 f911 	bl	80097f0 <_fflush_r>
 80095ce:	b988      	cbnz	r0, 80095f4 <__swbuf_r+0x90>
 80095d0:	4638      	mov	r0, r7
 80095d2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80095d4:	4b0a      	ldr	r3, [pc, #40]	; (8009600 <__swbuf_r+0x9c>)
 80095d6:	429c      	cmp	r4, r3
 80095d8:	d101      	bne.n	80095de <__swbuf_r+0x7a>
 80095da:	68ac      	ldr	r4, [r5, #8]
 80095dc:	e7cf      	b.n	800957e <__swbuf_r+0x1a>
 80095de:	4b09      	ldr	r3, [pc, #36]	; (8009604 <__swbuf_r+0xa0>)
 80095e0:	429c      	cmp	r4, r3
 80095e2:	bf08      	it	eq
 80095e4:	68ec      	ldreq	r4, [r5, #12]
 80095e6:	e7ca      	b.n	800957e <__swbuf_r+0x1a>
 80095e8:	4621      	mov	r1, r4
 80095ea:	4628      	mov	r0, r5
 80095ec:	f000 f80c 	bl	8009608 <__swsetup_r>
 80095f0:	2800      	cmp	r0, #0
 80095f2:	d0cb      	beq.n	800958c <__swbuf_r+0x28>
 80095f4:	f04f 37ff 	mov.w	r7, #4294967295
 80095f8:	e7ea      	b.n	80095d0 <__swbuf_r+0x6c>
 80095fa:	bf00      	nop
 80095fc:	0800a67c 	.word	0x0800a67c
 8009600:	0800a69c 	.word	0x0800a69c
 8009604:	0800a65c 	.word	0x0800a65c

08009608 <__swsetup_r>:
 8009608:	4b32      	ldr	r3, [pc, #200]	; (80096d4 <__swsetup_r+0xcc>)
 800960a:	b570      	push	{r4, r5, r6, lr}
 800960c:	681d      	ldr	r5, [r3, #0]
 800960e:	4606      	mov	r6, r0
 8009610:	460c      	mov	r4, r1
 8009612:	b125      	cbz	r5, 800961e <__swsetup_r+0x16>
 8009614:	69ab      	ldr	r3, [r5, #24]
 8009616:	b913      	cbnz	r3, 800961e <__swsetup_r+0x16>
 8009618:	4628      	mov	r0, r5
 800961a:	f000 f97d 	bl	8009918 <__sinit>
 800961e:	4b2e      	ldr	r3, [pc, #184]	; (80096d8 <__swsetup_r+0xd0>)
 8009620:	429c      	cmp	r4, r3
 8009622:	d10f      	bne.n	8009644 <__swsetup_r+0x3c>
 8009624:	686c      	ldr	r4, [r5, #4]
 8009626:	89a3      	ldrh	r3, [r4, #12]
 8009628:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800962c:	0719      	lsls	r1, r3, #28
 800962e:	d42c      	bmi.n	800968a <__swsetup_r+0x82>
 8009630:	06dd      	lsls	r5, r3, #27
 8009632:	d411      	bmi.n	8009658 <__swsetup_r+0x50>
 8009634:	2309      	movs	r3, #9
 8009636:	6033      	str	r3, [r6, #0]
 8009638:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 800963c:	81a3      	strh	r3, [r4, #12]
 800963e:	f04f 30ff 	mov.w	r0, #4294967295
 8009642:	e03e      	b.n	80096c2 <__swsetup_r+0xba>
 8009644:	4b25      	ldr	r3, [pc, #148]	; (80096dc <__swsetup_r+0xd4>)
 8009646:	429c      	cmp	r4, r3
 8009648:	d101      	bne.n	800964e <__swsetup_r+0x46>
 800964a:	68ac      	ldr	r4, [r5, #8]
 800964c:	e7eb      	b.n	8009626 <__swsetup_r+0x1e>
 800964e:	4b24      	ldr	r3, [pc, #144]	; (80096e0 <__swsetup_r+0xd8>)
 8009650:	429c      	cmp	r4, r3
 8009652:	bf08      	it	eq
 8009654:	68ec      	ldreq	r4, [r5, #12]
 8009656:	e7e6      	b.n	8009626 <__swsetup_r+0x1e>
 8009658:	0758      	lsls	r0, r3, #29
 800965a:	d512      	bpl.n	8009682 <__swsetup_r+0x7a>
 800965c:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800965e:	b141      	cbz	r1, 8009672 <__swsetup_r+0x6a>
 8009660:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8009664:	4299      	cmp	r1, r3
 8009666:	d002      	beq.n	800966e <__swsetup_r+0x66>
 8009668:	4630      	mov	r0, r6
 800966a:	f000 fa59 	bl	8009b20 <_free_r>
 800966e:	2300      	movs	r3, #0
 8009670:	6363      	str	r3, [r4, #52]	; 0x34
 8009672:	89a3      	ldrh	r3, [r4, #12]
 8009674:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8009678:	81a3      	strh	r3, [r4, #12]
 800967a:	2300      	movs	r3, #0
 800967c:	6063      	str	r3, [r4, #4]
 800967e:	6923      	ldr	r3, [r4, #16]
 8009680:	6023      	str	r3, [r4, #0]
 8009682:	89a3      	ldrh	r3, [r4, #12]
 8009684:	f043 0308 	orr.w	r3, r3, #8
 8009688:	81a3      	strh	r3, [r4, #12]
 800968a:	6923      	ldr	r3, [r4, #16]
 800968c:	b94b      	cbnz	r3, 80096a2 <__swsetup_r+0x9a>
 800968e:	89a3      	ldrh	r3, [r4, #12]
 8009690:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8009694:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8009698:	d003      	beq.n	80096a2 <__swsetup_r+0x9a>
 800969a:	4621      	mov	r1, r4
 800969c:	4630      	mov	r0, r6
 800969e:	f000 f9ff 	bl	8009aa0 <__smakebuf_r>
 80096a2:	89a0      	ldrh	r0, [r4, #12]
 80096a4:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 80096a8:	f010 0301 	ands.w	r3, r0, #1
 80096ac:	d00a      	beq.n	80096c4 <__swsetup_r+0xbc>
 80096ae:	2300      	movs	r3, #0
 80096b0:	60a3      	str	r3, [r4, #8]
 80096b2:	6963      	ldr	r3, [r4, #20]
 80096b4:	425b      	negs	r3, r3
 80096b6:	61a3      	str	r3, [r4, #24]
 80096b8:	6923      	ldr	r3, [r4, #16]
 80096ba:	b943      	cbnz	r3, 80096ce <__swsetup_r+0xc6>
 80096bc:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 80096c0:	d1ba      	bne.n	8009638 <__swsetup_r+0x30>
 80096c2:	bd70      	pop	{r4, r5, r6, pc}
 80096c4:	0781      	lsls	r1, r0, #30
 80096c6:	bf58      	it	pl
 80096c8:	6963      	ldrpl	r3, [r4, #20]
 80096ca:	60a3      	str	r3, [r4, #8]
 80096cc:	e7f4      	b.n	80096b8 <__swsetup_r+0xb0>
 80096ce:	2000      	movs	r0, #0
 80096d0:	e7f7      	b.n	80096c2 <__swsetup_r+0xba>
 80096d2:	bf00      	nop
 80096d4:	200000b0 	.word	0x200000b0
 80096d8:	0800a67c 	.word	0x0800a67c
 80096dc:	0800a69c 	.word	0x0800a69c
 80096e0:	0800a65c 	.word	0x0800a65c

080096e4 <__sflush_r>:
 80096e4:	898a      	ldrh	r2, [r1, #12]
 80096e6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80096ea:	4605      	mov	r5, r0
 80096ec:	0710      	lsls	r0, r2, #28
 80096ee:	460c      	mov	r4, r1
 80096f0:	d458      	bmi.n	80097a4 <__sflush_r+0xc0>
 80096f2:	684b      	ldr	r3, [r1, #4]
 80096f4:	2b00      	cmp	r3, #0
 80096f6:	dc05      	bgt.n	8009704 <__sflush_r+0x20>
 80096f8:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 80096fa:	2b00      	cmp	r3, #0
 80096fc:	dc02      	bgt.n	8009704 <__sflush_r+0x20>
 80096fe:	2000      	movs	r0, #0
 8009700:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8009704:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8009706:	2e00      	cmp	r6, #0
 8009708:	d0f9      	beq.n	80096fe <__sflush_r+0x1a>
 800970a:	2300      	movs	r3, #0
 800970c:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8009710:	682f      	ldr	r7, [r5, #0]
 8009712:	602b      	str	r3, [r5, #0]
 8009714:	d032      	beq.n	800977c <__sflush_r+0x98>
 8009716:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8009718:	89a3      	ldrh	r3, [r4, #12]
 800971a:	075a      	lsls	r2, r3, #29
 800971c:	d505      	bpl.n	800972a <__sflush_r+0x46>
 800971e:	6863      	ldr	r3, [r4, #4]
 8009720:	1ac0      	subs	r0, r0, r3
 8009722:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8009724:	b10b      	cbz	r3, 800972a <__sflush_r+0x46>
 8009726:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8009728:	1ac0      	subs	r0, r0, r3
 800972a:	2300      	movs	r3, #0
 800972c:	4602      	mov	r2, r0
 800972e:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8009730:	6a21      	ldr	r1, [r4, #32]
 8009732:	4628      	mov	r0, r5
 8009734:	47b0      	blx	r6
 8009736:	1c43      	adds	r3, r0, #1
 8009738:	89a3      	ldrh	r3, [r4, #12]
 800973a:	d106      	bne.n	800974a <__sflush_r+0x66>
 800973c:	6829      	ldr	r1, [r5, #0]
 800973e:	291d      	cmp	r1, #29
 8009740:	d82c      	bhi.n	800979c <__sflush_r+0xb8>
 8009742:	4a2a      	ldr	r2, [pc, #168]	; (80097ec <__sflush_r+0x108>)
 8009744:	40ca      	lsrs	r2, r1
 8009746:	07d6      	lsls	r6, r2, #31
 8009748:	d528      	bpl.n	800979c <__sflush_r+0xb8>
 800974a:	2200      	movs	r2, #0
 800974c:	6062      	str	r2, [r4, #4]
 800974e:	04d9      	lsls	r1, r3, #19
 8009750:	6922      	ldr	r2, [r4, #16]
 8009752:	6022      	str	r2, [r4, #0]
 8009754:	d504      	bpl.n	8009760 <__sflush_r+0x7c>
 8009756:	1c42      	adds	r2, r0, #1
 8009758:	d101      	bne.n	800975e <__sflush_r+0x7a>
 800975a:	682b      	ldr	r3, [r5, #0]
 800975c:	b903      	cbnz	r3, 8009760 <__sflush_r+0x7c>
 800975e:	6560      	str	r0, [r4, #84]	; 0x54
 8009760:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8009762:	602f      	str	r7, [r5, #0]
 8009764:	2900      	cmp	r1, #0
 8009766:	d0ca      	beq.n	80096fe <__sflush_r+0x1a>
 8009768:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800976c:	4299      	cmp	r1, r3
 800976e:	d002      	beq.n	8009776 <__sflush_r+0x92>
 8009770:	4628      	mov	r0, r5
 8009772:	f000 f9d5 	bl	8009b20 <_free_r>
 8009776:	2000      	movs	r0, #0
 8009778:	6360      	str	r0, [r4, #52]	; 0x34
 800977a:	e7c1      	b.n	8009700 <__sflush_r+0x1c>
 800977c:	6a21      	ldr	r1, [r4, #32]
 800977e:	2301      	movs	r3, #1
 8009780:	4628      	mov	r0, r5
 8009782:	47b0      	blx	r6
 8009784:	1c41      	adds	r1, r0, #1
 8009786:	d1c7      	bne.n	8009718 <__sflush_r+0x34>
 8009788:	682b      	ldr	r3, [r5, #0]
 800978a:	2b00      	cmp	r3, #0
 800978c:	d0c4      	beq.n	8009718 <__sflush_r+0x34>
 800978e:	2b1d      	cmp	r3, #29
 8009790:	d001      	beq.n	8009796 <__sflush_r+0xb2>
 8009792:	2b16      	cmp	r3, #22
 8009794:	d101      	bne.n	800979a <__sflush_r+0xb6>
 8009796:	602f      	str	r7, [r5, #0]
 8009798:	e7b1      	b.n	80096fe <__sflush_r+0x1a>
 800979a:	89a3      	ldrh	r3, [r4, #12]
 800979c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80097a0:	81a3      	strh	r3, [r4, #12]
 80097a2:	e7ad      	b.n	8009700 <__sflush_r+0x1c>
 80097a4:	690f      	ldr	r7, [r1, #16]
 80097a6:	2f00      	cmp	r7, #0
 80097a8:	d0a9      	beq.n	80096fe <__sflush_r+0x1a>
 80097aa:	0793      	lsls	r3, r2, #30
 80097ac:	680e      	ldr	r6, [r1, #0]
 80097ae:	bf08      	it	eq
 80097b0:	694b      	ldreq	r3, [r1, #20]
 80097b2:	600f      	str	r7, [r1, #0]
 80097b4:	bf18      	it	ne
 80097b6:	2300      	movne	r3, #0
 80097b8:	eba6 0807 	sub.w	r8, r6, r7
 80097bc:	608b      	str	r3, [r1, #8]
 80097be:	f1b8 0f00 	cmp.w	r8, #0
 80097c2:	dd9c      	ble.n	80096fe <__sflush_r+0x1a>
 80097c4:	6a21      	ldr	r1, [r4, #32]
 80097c6:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 80097c8:	4643      	mov	r3, r8
 80097ca:	463a      	mov	r2, r7
 80097cc:	4628      	mov	r0, r5
 80097ce:	47b0      	blx	r6
 80097d0:	2800      	cmp	r0, #0
 80097d2:	dc06      	bgt.n	80097e2 <__sflush_r+0xfe>
 80097d4:	89a3      	ldrh	r3, [r4, #12]
 80097d6:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80097da:	81a3      	strh	r3, [r4, #12]
 80097dc:	f04f 30ff 	mov.w	r0, #4294967295
 80097e0:	e78e      	b.n	8009700 <__sflush_r+0x1c>
 80097e2:	4407      	add	r7, r0
 80097e4:	eba8 0800 	sub.w	r8, r8, r0
 80097e8:	e7e9      	b.n	80097be <__sflush_r+0xda>
 80097ea:	bf00      	nop
 80097ec:	20400001 	.word	0x20400001

080097f0 <_fflush_r>:
 80097f0:	b538      	push	{r3, r4, r5, lr}
 80097f2:	690b      	ldr	r3, [r1, #16]
 80097f4:	4605      	mov	r5, r0
 80097f6:	460c      	mov	r4, r1
 80097f8:	b913      	cbnz	r3, 8009800 <_fflush_r+0x10>
 80097fa:	2500      	movs	r5, #0
 80097fc:	4628      	mov	r0, r5
 80097fe:	bd38      	pop	{r3, r4, r5, pc}
 8009800:	b118      	cbz	r0, 800980a <_fflush_r+0x1a>
 8009802:	6983      	ldr	r3, [r0, #24]
 8009804:	b90b      	cbnz	r3, 800980a <_fflush_r+0x1a>
 8009806:	f000 f887 	bl	8009918 <__sinit>
 800980a:	4b14      	ldr	r3, [pc, #80]	; (800985c <_fflush_r+0x6c>)
 800980c:	429c      	cmp	r4, r3
 800980e:	d11b      	bne.n	8009848 <_fflush_r+0x58>
 8009810:	686c      	ldr	r4, [r5, #4]
 8009812:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8009816:	2b00      	cmp	r3, #0
 8009818:	d0ef      	beq.n	80097fa <_fflush_r+0xa>
 800981a:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800981c:	07d0      	lsls	r0, r2, #31
 800981e:	d404      	bmi.n	800982a <_fflush_r+0x3a>
 8009820:	0599      	lsls	r1, r3, #22
 8009822:	d402      	bmi.n	800982a <_fflush_r+0x3a>
 8009824:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8009826:	f000 f915 	bl	8009a54 <__retarget_lock_acquire_recursive>
 800982a:	4628      	mov	r0, r5
 800982c:	4621      	mov	r1, r4
 800982e:	f7ff ff59 	bl	80096e4 <__sflush_r>
 8009832:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8009834:	07da      	lsls	r2, r3, #31
 8009836:	4605      	mov	r5, r0
 8009838:	d4e0      	bmi.n	80097fc <_fflush_r+0xc>
 800983a:	89a3      	ldrh	r3, [r4, #12]
 800983c:	059b      	lsls	r3, r3, #22
 800983e:	d4dd      	bmi.n	80097fc <_fflush_r+0xc>
 8009840:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8009842:	f000 f908 	bl	8009a56 <__retarget_lock_release_recursive>
 8009846:	e7d9      	b.n	80097fc <_fflush_r+0xc>
 8009848:	4b05      	ldr	r3, [pc, #20]	; (8009860 <_fflush_r+0x70>)
 800984a:	429c      	cmp	r4, r3
 800984c:	d101      	bne.n	8009852 <_fflush_r+0x62>
 800984e:	68ac      	ldr	r4, [r5, #8]
 8009850:	e7df      	b.n	8009812 <_fflush_r+0x22>
 8009852:	4b04      	ldr	r3, [pc, #16]	; (8009864 <_fflush_r+0x74>)
 8009854:	429c      	cmp	r4, r3
 8009856:	bf08      	it	eq
 8009858:	68ec      	ldreq	r4, [r5, #12]
 800985a:	e7da      	b.n	8009812 <_fflush_r+0x22>
 800985c:	0800a67c 	.word	0x0800a67c
 8009860:	0800a69c 	.word	0x0800a69c
 8009864:	0800a65c 	.word	0x0800a65c

08009868 <std>:
 8009868:	2300      	movs	r3, #0
 800986a:	b510      	push	{r4, lr}
 800986c:	4604      	mov	r4, r0
 800986e:	e9c0 3300 	strd	r3, r3, [r0]
 8009872:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8009876:	6083      	str	r3, [r0, #8]
 8009878:	8181      	strh	r1, [r0, #12]
 800987a:	6643      	str	r3, [r0, #100]	; 0x64
 800987c:	81c2      	strh	r2, [r0, #14]
 800987e:	6183      	str	r3, [r0, #24]
 8009880:	4619      	mov	r1, r3
 8009882:	2208      	movs	r2, #8
 8009884:	305c      	adds	r0, #92	; 0x5c
 8009886:	f7ff fdd7 	bl	8009438 <memset>
 800988a:	4b05      	ldr	r3, [pc, #20]	; (80098a0 <std+0x38>)
 800988c:	6263      	str	r3, [r4, #36]	; 0x24
 800988e:	4b05      	ldr	r3, [pc, #20]	; (80098a4 <std+0x3c>)
 8009890:	62a3      	str	r3, [r4, #40]	; 0x28
 8009892:	4b05      	ldr	r3, [pc, #20]	; (80098a8 <std+0x40>)
 8009894:	62e3      	str	r3, [r4, #44]	; 0x2c
 8009896:	4b05      	ldr	r3, [pc, #20]	; (80098ac <std+0x44>)
 8009898:	6224      	str	r4, [r4, #32]
 800989a:	6323      	str	r3, [r4, #48]	; 0x30
 800989c:	bd10      	pop	{r4, pc}
 800989e:	bf00      	nop
 80098a0:	0800a271 	.word	0x0800a271
 80098a4:	0800a293 	.word	0x0800a293
 80098a8:	0800a2cb 	.word	0x0800a2cb
 80098ac:	0800a2ef 	.word	0x0800a2ef

080098b0 <_cleanup_r>:
 80098b0:	4901      	ldr	r1, [pc, #4]	; (80098b8 <_cleanup_r+0x8>)
 80098b2:	f000 b8af 	b.w	8009a14 <_fwalk_reent>
 80098b6:	bf00      	nop
 80098b8:	080097f1 	.word	0x080097f1

080098bc <__sfmoreglue>:
 80098bc:	b570      	push	{r4, r5, r6, lr}
 80098be:	1e4a      	subs	r2, r1, #1
 80098c0:	2568      	movs	r5, #104	; 0x68
 80098c2:	4355      	muls	r5, r2
 80098c4:	460e      	mov	r6, r1
 80098c6:	f105 0174 	add.w	r1, r5, #116	; 0x74
 80098ca:	f000 f979 	bl	8009bc0 <_malloc_r>
 80098ce:	4604      	mov	r4, r0
 80098d0:	b140      	cbz	r0, 80098e4 <__sfmoreglue+0x28>
 80098d2:	2100      	movs	r1, #0
 80098d4:	e9c0 1600 	strd	r1, r6, [r0]
 80098d8:	300c      	adds	r0, #12
 80098da:	60a0      	str	r0, [r4, #8]
 80098dc:	f105 0268 	add.w	r2, r5, #104	; 0x68
 80098e0:	f7ff fdaa 	bl	8009438 <memset>
 80098e4:	4620      	mov	r0, r4
 80098e6:	bd70      	pop	{r4, r5, r6, pc}

080098e8 <__sfp_lock_acquire>:
 80098e8:	4801      	ldr	r0, [pc, #4]	; (80098f0 <__sfp_lock_acquire+0x8>)
 80098ea:	f000 b8b3 	b.w	8009a54 <__retarget_lock_acquire_recursive>
 80098ee:	bf00      	nop
 80098f0:	200024dc 	.word	0x200024dc

080098f4 <__sfp_lock_release>:
 80098f4:	4801      	ldr	r0, [pc, #4]	; (80098fc <__sfp_lock_release+0x8>)
 80098f6:	f000 b8ae 	b.w	8009a56 <__retarget_lock_release_recursive>
 80098fa:	bf00      	nop
 80098fc:	200024dc 	.word	0x200024dc

08009900 <__sinit_lock_acquire>:
 8009900:	4801      	ldr	r0, [pc, #4]	; (8009908 <__sinit_lock_acquire+0x8>)
 8009902:	f000 b8a7 	b.w	8009a54 <__retarget_lock_acquire_recursive>
 8009906:	bf00      	nop
 8009908:	200024d7 	.word	0x200024d7

0800990c <__sinit_lock_release>:
 800990c:	4801      	ldr	r0, [pc, #4]	; (8009914 <__sinit_lock_release+0x8>)
 800990e:	f000 b8a2 	b.w	8009a56 <__retarget_lock_release_recursive>
 8009912:	bf00      	nop
 8009914:	200024d7 	.word	0x200024d7

08009918 <__sinit>:
 8009918:	b510      	push	{r4, lr}
 800991a:	4604      	mov	r4, r0
 800991c:	f7ff fff0 	bl	8009900 <__sinit_lock_acquire>
 8009920:	69a3      	ldr	r3, [r4, #24]
 8009922:	b11b      	cbz	r3, 800992c <__sinit+0x14>
 8009924:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8009928:	f7ff bff0 	b.w	800990c <__sinit_lock_release>
 800992c:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8009930:	6523      	str	r3, [r4, #80]	; 0x50
 8009932:	4b13      	ldr	r3, [pc, #76]	; (8009980 <__sinit+0x68>)
 8009934:	4a13      	ldr	r2, [pc, #76]	; (8009984 <__sinit+0x6c>)
 8009936:	681b      	ldr	r3, [r3, #0]
 8009938:	62a2      	str	r2, [r4, #40]	; 0x28
 800993a:	42a3      	cmp	r3, r4
 800993c:	bf04      	itt	eq
 800993e:	2301      	moveq	r3, #1
 8009940:	61a3      	streq	r3, [r4, #24]
 8009942:	4620      	mov	r0, r4
 8009944:	f000 f820 	bl	8009988 <__sfp>
 8009948:	6060      	str	r0, [r4, #4]
 800994a:	4620      	mov	r0, r4
 800994c:	f000 f81c 	bl	8009988 <__sfp>
 8009950:	60a0      	str	r0, [r4, #8]
 8009952:	4620      	mov	r0, r4
 8009954:	f000 f818 	bl	8009988 <__sfp>
 8009958:	2200      	movs	r2, #0
 800995a:	60e0      	str	r0, [r4, #12]
 800995c:	2104      	movs	r1, #4
 800995e:	6860      	ldr	r0, [r4, #4]
 8009960:	f7ff ff82 	bl	8009868 <std>
 8009964:	68a0      	ldr	r0, [r4, #8]
 8009966:	2201      	movs	r2, #1
 8009968:	2109      	movs	r1, #9
 800996a:	f7ff ff7d 	bl	8009868 <std>
 800996e:	68e0      	ldr	r0, [r4, #12]
 8009970:	2202      	movs	r2, #2
 8009972:	2112      	movs	r1, #18
 8009974:	f7ff ff78 	bl	8009868 <std>
 8009978:	2301      	movs	r3, #1
 800997a:	61a3      	str	r3, [r4, #24]
 800997c:	e7d2      	b.n	8009924 <__sinit+0xc>
 800997e:	bf00      	nop
 8009980:	0800a658 	.word	0x0800a658
 8009984:	080098b1 	.word	0x080098b1

08009988 <__sfp>:
 8009988:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800998a:	4607      	mov	r7, r0
 800998c:	f7ff ffac 	bl	80098e8 <__sfp_lock_acquire>
 8009990:	4b1e      	ldr	r3, [pc, #120]	; (8009a0c <__sfp+0x84>)
 8009992:	681e      	ldr	r6, [r3, #0]
 8009994:	69b3      	ldr	r3, [r6, #24]
 8009996:	b913      	cbnz	r3, 800999e <__sfp+0x16>
 8009998:	4630      	mov	r0, r6
 800999a:	f7ff ffbd 	bl	8009918 <__sinit>
 800999e:	3648      	adds	r6, #72	; 0x48
 80099a0:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 80099a4:	3b01      	subs	r3, #1
 80099a6:	d503      	bpl.n	80099b0 <__sfp+0x28>
 80099a8:	6833      	ldr	r3, [r6, #0]
 80099aa:	b30b      	cbz	r3, 80099f0 <__sfp+0x68>
 80099ac:	6836      	ldr	r6, [r6, #0]
 80099ae:	e7f7      	b.n	80099a0 <__sfp+0x18>
 80099b0:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 80099b4:	b9d5      	cbnz	r5, 80099ec <__sfp+0x64>
 80099b6:	4b16      	ldr	r3, [pc, #88]	; (8009a10 <__sfp+0x88>)
 80099b8:	60e3      	str	r3, [r4, #12]
 80099ba:	f104 0058 	add.w	r0, r4, #88	; 0x58
 80099be:	6665      	str	r5, [r4, #100]	; 0x64
 80099c0:	f000 f847 	bl	8009a52 <__retarget_lock_init_recursive>
 80099c4:	f7ff ff96 	bl	80098f4 <__sfp_lock_release>
 80099c8:	e9c4 5501 	strd	r5, r5, [r4, #4]
 80099cc:	e9c4 5504 	strd	r5, r5, [r4, #16]
 80099d0:	6025      	str	r5, [r4, #0]
 80099d2:	61a5      	str	r5, [r4, #24]
 80099d4:	2208      	movs	r2, #8
 80099d6:	4629      	mov	r1, r5
 80099d8:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 80099dc:	f7ff fd2c 	bl	8009438 <memset>
 80099e0:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 80099e4:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 80099e8:	4620      	mov	r0, r4
 80099ea:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80099ec:	3468      	adds	r4, #104	; 0x68
 80099ee:	e7d9      	b.n	80099a4 <__sfp+0x1c>
 80099f0:	2104      	movs	r1, #4
 80099f2:	4638      	mov	r0, r7
 80099f4:	f7ff ff62 	bl	80098bc <__sfmoreglue>
 80099f8:	4604      	mov	r4, r0
 80099fa:	6030      	str	r0, [r6, #0]
 80099fc:	2800      	cmp	r0, #0
 80099fe:	d1d5      	bne.n	80099ac <__sfp+0x24>
 8009a00:	f7ff ff78 	bl	80098f4 <__sfp_lock_release>
 8009a04:	230c      	movs	r3, #12
 8009a06:	603b      	str	r3, [r7, #0]
 8009a08:	e7ee      	b.n	80099e8 <__sfp+0x60>
 8009a0a:	bf00      	nop
 8009a0c:	0800a658 	.word	0x0800a658
 8009a10:	ffff0001 	.word	0xffff0001

08009a14 <_fwalk_reent>:
 8009a14:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8009a18:	4606      	mov	r6, r0
 8009a1a:	4688      	mov	r8, r1
 8009a1c:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8009a20:	2700      	movs	r7, #0
 8009a22:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8009a26:	f1b9 0901 	subs.w	r9, r9, #1
 8009a2a:	d505      	bpl.n	8009a38 <_fwalk_reent+0x24>
 8009a2c:	6824      	ldr	r4, [r4, #0]
 8009a2e:	2c00      	cmp	r4, #0
 8009a30:	d1f7      	bne.n	8009a22 <_fwalk_reent+0xe>
 8009a32:	4638      	mov	r0, r7
 8009a34:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8009a38:	89ab      	ldrh	r3, [r5, #12]
 8009a3a:	2b01      	cmp	r3, #1
 8009a3c:	d907      	bls.n	8009a4e <_fwalk_reent+0x3a>
 8009a3e:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8009a42:	3301      	adds	r3, #1
 8009a44:	d003      	beq.n	8009a4e <_fwalk_reent+0x3a>
 8009a46:	4629      	mov	r1, r5
 8009a48:	4630      	mov	r0, r6
 8009a4a:	47c0      	blx	r8
 8009a4c:	4307      	orrs	r7, r0
 8009a4e:	3568      	adds	r5, #104	; 0x68
 8009a50:	e7e9      	b.n	8009a26 <_fwalk_reent+0x12>

08009a52 <__retarget_lock_init_recursive>:
 8009a52:	4770      	bx	lr

08009a54 <__retarget_lock_acquire_recursive>:
 8009a54:	4770      	bx	lr

08009a56 <__retarget_lock_release_recursive>:
 8009a56:	4770      	bx	lr

08009a58 <__swhatbuf_r>:
 8009a58:	b570      	push	{r4, r5, r6, lr}
 8009a5a:	460e      	mov	r6, r1
 8009a5c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009a60:	2900      	cmp	r1, #0
 8009a62:	b096      	sub	sp, #88	; 0x58
 8009a64:	4614      	mov	r4, r2
 8009a66:	461d      	mov	r5, r3
 8009a68:	da07      	bge.n	8009a7a <__swhatbuf_r+0x22>
 8009a6a:	2300      	movs	r3, #0
 8009a6c:	602b      	str	r3, [r5, #0]
 8009a6e:	89b3      	ldrh	r3, [r6, #12]
 8009a70:	061a      	lsls	r2, r3, #24
 8009a72:	d410      	bmi.n	8009a96 <__swhatbuf_r+0x3e>
 8009a74:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8009a78:	e00e      	b.n	8009a98 <__swhatbuf_r+0x40>
 8009a7a:	466a      	mov	r2, sp
 8009a7c:	f000 fc5e 	bl	800a33c <_fstat_r>
 8009a80:	2800      	cmp	r0, #0
 8009a82:	dbf2      	blt.n	8009a6a <__swhatbuf_r+0x12>
 8009a84:	9a01      	ldr	r2, [sp, #4]
 8009a86:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8009a8a:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8009a8e:	425a      	negs	r2, r3
 8009a90:	415a      	adcs	r2, r3
 8009a92:	602a      	str	r2, [r5, #0]
 8009a94:	e7ee      	b.n	8009a74 <__swhatbuf_r+0x1c>
 8009a96:	2340      	movs	r3, #64	; 0x40
 8009a98:	2000      	movs	r0, #0
 8009a9a:	6023      	str	r3, [r4, #0]
 8009a9c:	b016      	add	sp, #88	; 0x58
 8009a9e:	bd70      	pop	{r4, r5, r6, pc}

08009aa0 <__smakebuf_r>:
 8009aa0:	898b      	ldrh	r3, [r1, #12]
 8009aa2:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8009aa4:	079d      	lsls	r5, r3, #30
 8009aa6:	4606      	mov	r6, r0
 8009aa8:	460c      	mov	r4, r1
 8009aaa:	d507      	bpl.n	8009abc <__smakebuf_r+0x1c>
 8009aac:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8009ab0:	6023      	str	r3, [r4, #0]
 8009ab2:	6123      	str	r3, [r4, #16]
 8009ab4:	2301      	movs	r3, #1
 8009ab6:	6163      	str	r3, [r4, #20]
 8009ab8:	b002      	add	sp, #8
 8009aba:	bd70      	pop	{r4, r5, r6, pc}
 8009abc:	ab01      	add	r3, sp, #4
 8009abe:	466a      	mov	r2, sp
 8009ac0:	f7ff ffca 	bl	8009a58 <__swhatbuf_r>
 8009ac4:	9900      	ldr	r1, [sp, #0]
 8009ac6:	4605      	mov	r5, r0
 8009ac8:	4630      	mov	r0, r6
 8009aca:	f000 f879 	bl	8009bc0 <_malloc_r>
 8009ace:	b948      	cbnz	r0, 8009ae4 <__smakebuf_r+0x44>
 8009ad0:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8009ad4:	059a      	lsls	r2, r3, #22
 8009ad6:	d4ef      	bmi.n	8009ab8 <__smakebuf_r+0x18>
 8009ad8:	f023 0303 	bic.w	r3, r3, #3
 8009adc:	f043 0302 	orr.w	r3, r3, #2
 8009ae0:	81a3      	strh	r3, [r4, #12]
 8009ae2:	e7e3      	b.n	8009aac <__smakebuf_r+0xc>
 8009ae4:	4b0d      	ldr	r3, [pc, #52]	; (8009b1c <__smakebuf_r+0x7c>)
 8009ae6:	62b3      	str	r3, [r6, #40]	; 0x28
 8009ae8:	89a3      	ldrh	r3, [r4, #12]
 8009aea:	6020      	str	r0, [r4, #0]
 8009aec:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8009af0:	81a3      	strh	r3, [r4, #12]
 8009af2:	9b00      	ldr	r3, [sp, #0]
 8009af4:	6163      	str	r3, [r4, #20]
 8009af6:	9b01      	ldr	r3, [sp, #4]
 8009af8:	6120      	str	r0, [r4, #16]
 8009afa:	b15b      	cbz	r3, 8009b14 <__smakebuf_r+0x74>
 8009afc:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8009b00:	4630      	mov	r0, r6
 8009b02:	f000 fc2d 	bl	800a360 <_isatty_r>
 8009b06:	b128      	cbz	r0, 8009b14 <__smakebuf_r+0x74>
 8009b08:	89a3      	ldrh	r3, [r4, #12]
 8009b0a:	f023 0303 	bic.w	r3, r3, #3
 8009b0e:	f043 0301 	orr.w	r3, r3, #1
 8009b12:	81a3      	strh	r3, [r4, #12]
 8009b14:	89a0      	ldrh	r0, [r4, #12]
 8009b16:	4305      	orrs	r5, r0
 8009b18:	81a5      	strh	r5, [r4, #12]
 8009b1a:	e7cd      	b.n	8009ab8 <__smakebuf_r+0x18>
 8009b1c:	080098b1 	.word	0x080098b1

08009b20 <_free_r>:
 8009b20:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8009b22:	2900      	cmp	r1, #0
 8009b24:	d048      	beq.n	8009bb8 <_free_r+0x98>
 8009b26:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8009b2a:	9001      	str	r0, [sp, #4]
 8009b2c:	2b00      	cmp	r3, #0
 8009b2e:	f1a1 0404 	sub.w	r4, r1, #4
 8009b32:	bfb8      	it	lt
 8009b34:	18e4      	addlt	r4, r4, r3
 8009b36:	f000 fc35 	bl	800a3a4 <__malloc_lock>
 8009b3a:	4a20      	ldr	r2, [pc, #128]	; (8009bbc <_free_r+0x9c>)
 8009b3c:	9801      	ldr	r0, [sp, #4]
 8009b3e:	6813      	ldr	r3, [r2, #0]
 8009b40:	4615      	mov	r5, r2
 8009b42:	b933      	cbnz	r3, 8009b52 <_free_r+0x32>
 8009b44:	6063      	str	r3, [r4, #4]
 8009b46:	6014      	str	r4, [r2, #0]
 8009b48:	b003      	add	sp, #12
 8009b4a:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8009b4e:	f000 bc2f 	b.w	800a3b0 <__malloc_unlock>
 8009b52:	42a3      	cmp	r3, r4
 8009b54:	d90b      	bls.n	8009b6e <_free_r+0x4e>
 8009b56:	6821      	ldr	r1, [r4, #0]
 8009b58:	1862      	adds	r2, r4, r1
 8009b5a:	4293      	cmp	r3, r2
 8009b5c:	bf04      	itt	eq
 8009b5e:	681a      	ldreq	r2, [r3, #0]
 8009b60:	685b      	ldreq	r3, [r3, #4]
 8009b62:	6063      	str	r3, [r4, #4]
 8009b64:	bf04      	itt	eq
 8009b66:	1852      	addeq	r2, r2, r1
 8009b68:	6022      	streq	r2, [r4, #0]
 8009b6a:	602c      	str	r4, [r5, #0]
 8009b6c:	e7ec      	b.n	8009b48 <_free_r+0x28>
 8009b6e:	461a      	mov	r2, r3
 8009b70:	685b      	ldr	r3, [r3, #4]
 8009b72:	b10b      	cbz	r3, 8009b78 <_free_r+0x58>
 8009b74:	42a3      	cmp	r3, r4
 8009b76:	d9fa      	bls.n	8009b6e <_free_r+0x4e>
 8009b78:	6811      	ldr	r1, [r2, #0]
 8009b7a:	1855      	adds	r5, r2, r1
 8009b7c:	42a5      	cmp	r5, r4
 8009b7e:	d10b      	bne.n	8009b98 <_free_r+0x78>
 8009b80:	6824      	ldr	r4, [r4, #0]
 8009b82:	4421      	add	r1, r4
 8009b84:	1854      	adds	r4, r2, r1
 8009b86:	42a3      	cmp	r3, r4
 8009b88:	6011      	str	r1, [r2, #0]
 8009b8a:	d1dd      	bne.n	8009b48 <_free_r+0x28>
 8009b8c:	681c      	ldr	r4, [r3, #0]
 8009b8e:	685b      	ldr	r3, [r3, #4]
 8009b90:	6053      	str	r3, [r2, #4]
 8009b92:	4421      	add	r1, r4
 8009b94:	6011      	str	r1, [r2, #0]
 8009b96:	e7d7      	b.n	8009b48 <_free_r+0x28>
 8009b98:	d902      	bls.n	8009ba0 <_free_r+0x80>
 8009b9a:	230c      	movs	r3, #12
 8009b9c:	6003      	str	r3, [r0, #0]
 8009b9e:	e7d3      	b.n	8009b48 <_free_r+0x28>
 8009ba0:	6825      	ldr	r5, [r4, #0]
 8009ba2:	1961      	adds	r1, r4, r5
 8009ba4:	428b      	cmp	r3, r1
 8009ba6:	bf04      	itt	eq
 8009ba8:	6819      	ldreq	r1, [r3, #0]
 8009baa:	685b      	ldreq	r3, [r3, #4]
 8009bac:	6063      	str	r3, [r4, #4]
 8009bae:	bf04      	itt	eq
 8009bb0:	1949      	addeq	r1, r1, r5
 8009bb2:	6021      	streq	r1, [r4, #0]
 8009bb4:	6054      	str	r4, [r2, #4]
 8009bb6:	e7c7      	b.n	8009b48 <_free_r+0x28>
 8009bb8:	b003      	add	sp, #12
 8009bba:	bd30      	pop	{r4, r5, pc}
 8009bbc:	20000170 	.word	0x20000170

08009bc0 <_malloc_r>:
 8009bc0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009bc2:	1ccd      	adds	r5, r1, #3
 8009bc4:	f025 0503 	bic.w	r5, r5, #3
 8009bc8:	3508      	adds	r5, #8
 8009bca:	2d0c      	cmp	r5, #12
 8009bcc:	bf38      	it	cc
 8009bce:	250c      	movcc	r5, #12
 8009bd0:	2d00      	cmp	r5, #0
 8009bd2:	4606      	mov	r6, r0
 8009bd4:	db01      	blt.n	8009bda <_malloc_r+0x1a>
 8009bd6:	42a9      	cmp	r1, r5
 8009bd8:	d903      	bls.n	8009be2 <_malloc_r+0x22>
 8009bda:	230c      	movs	r3, #12
 8009bdc:	6033      	str	r3, [r6, #0]
 8009bde:	2000      	movs	r0, #0
 8009be0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8009be2:	f000 fbdf 	bl	800a3a4 <__malloc_lock>
 8009be6:	4921      	ldr	r1, [pc, #132]	; (8009c6c <_malloc_r+0xac>)
 8009be8:	680a      	ldr	r2, [r1, #0]
 8009bea:	4614      	mov	r4, r2
 8009bec:	b99c      	cbnz	r4, 8009c16 <_malloc_r+0x56>
 8009bee:	4f20      	ldr	r7, [pc, #128]	; (8009c70 <_malloc_r+0xb0>)
 8009bf0:	683b      	ldr	r3, [r7, #0]
 8009bf2:	b923      	cbnz	r3, 8009bfe <_malloc_r+0x3e>
 8009bf4:	4621      	mov	r1, r4
 8009bf6:	4630      	mov	r0, r6
 8009bf8:	f000 fb2a 	bl	800a250 <_sbrk_r>
 8009bfc:	6038      	str	r0, [r7, #0]
 8009bfe:	4629      	mov	r1, r5
 8009c00:	4630      	mov	r0, r6
 8009c02:	f000 fb25 	bl	800a250 <_sbrk_r>
 8009c06:	1c43      	adds	r3, r0, #1
 8009c08:	d123      	bne.n	8009c52 <_malloc_r+0x92>
 8009c0a:	230c      	movs	r3, #12
 8009c0c:	6033      	str	r3, [r6, #0]
 8009c0e:	4630      	mov	r0, r6
 8009c10:	f000 fbce 	bl	800a3b0 <__malloc_unlock>
 8009c14:	e7e3      	b.n	8009bde <_malloc_r+0x1e>
 8009c16:	6823      	ldr	r3, [r4, #0]
 8009c18:	1b5b      	subs	r3, r3, r5
 8009c1a:	d417      	bmi.n	8009c4c <_malloc_r+0x8c>
 8009c1c:	2b0b      	cmp	r3, #11
 8009c1e:	d903      	bls.n	8009c28 <_malloc_r+0x68>
 8009c20:	6023      	str	r3, [r4, #0]
 8009c22:	441c      	add	r4, r3
 8009c24:	6025      	str	r5, [r4, #0]
 8009c26:	e004      	b.n	8009c32 <_malloc_r+0x72>
 8009c28:	6863      	ldr	r3, [r4, #4]
 8009c2a:	42a2      	cmp	r2, r4
 8009c2c:	bf0c      	ite	eq
 8009c2e:	600b      	streq	r3, [r1, #0]
 8009c30:	6053      	strne	r3, [r2, #4]
 8009c32:	4630      	mov	r0, r6
 8009c34:	f000 fbbc 	bl	800a3b0 <__malloc_unlock>
 8009c38:	f104 000b 	add.w	r0, r4, #11
 8009c3c:	1d23      	adds	r3, r4, #4
 8009c3e:	f020 0007 	bic.w	r0, r0, #7
 8009c42:	1ac2      	subs	r2, r0, r3
 8009c44:	d0cc      	beq.n	8009be0 <_malloc_r+0x20>
 8009c46:	1a1b      	subs	r3, r3, r0
 8009c48:	50a3      	str	r3, [r4, r2]
 8009c4a:	e7c9      	b.n	8009be0 <_malloc_r+0x20>
 8009c4c:	4622      	mov	r2, r4
 8009c4e:	6864      	ldr	r4, [r4, #4]
 8009c50:	e7cc      	b.n	8009bec <_malloc_r+0x2c>
 8009c52:	1cc4      	adds	r4, r0, #3
 8009c54:	f024 0403 	bic.w	r4, r4, #3
 8009c58:	42a0      	cmp	r0, r4
 8009c5a:	d0e3      	beq.n	8009c24 <_malloc_r+0x64>
 8009c5c:	1a21      	subs	r1, r4, r0
 8009c5e:	4630      	mov	r0, r6
 8009c60:	f000 faf6 	bl	800a250 <_sbrk_r>
 8009c64:	3001      	adds	r0, #1
 8009c66:	d1dd      	bne.n	8009c24 <_malloc_r+0x64>
 8009c68:	e7cf      	b.n	8009c0a <_malloc_r+0x4a>
 8009c6a:	bf00      	nop
 8009c6c:	20000170 	.word	0x20000170
 8009c70:	20000174 	.word	0x20000174

08009c74 <__sfputc_r>:
 8009c74:	6893      	ldr	r3, [r2, #8]
 8009c76:	3b01      	subs	r3, #1
 8009c78:	2b00      	cmp	r3, #0
 8009c7a:	b410      	push	{r4}
 8009c7c:	6093      	str	r3, [r2, #8]
 8009c7e:	da08      	bge.n	8009c92 <__sfputc_r+0x1e>
 8009c80:	6994      	ldr	r4, [r2, #24]
 8009c82:	42a3      	cmp	r3, r4
 8009c84:	db01      	blt.n	8009c8a <__sfputc_r+0x16>
 8009c86:	290a      	cmp	r1, #10
 8009c88:	d103      	bne.n	8009c92 <__sfputc_r+0x1e>
 8009c8a:	f85d 4b04 	ldr.w	r4, [sp], #4
 8009c8e:	f7ff bc69 	b.w	8009564 <__swbuf_r>
 8009c92:	6813      	ldr	r3, [r2, #0]
 8009c94:	1c58      	adds	r0, r3, #1
 8009c96:	6010      	str	r0, [r2, #0]
 8009c98:	7019      	strb	r1, [r3, #0]
 8009c9a:	4608      	mov	r0, r1
 8009c9c:	f85d 4b04 	ldr.w	r4, [sp], #4
 8009ca0:	4770      	bx	lr

08009ca2 <__sfputs_r>:
 8009ca2:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009ca4:	4606      	mov	r6, r0
 8009ca6:	460f      	mov	r7, r1
 8009ca8:	4614      	mov	r4, r2
 8009caa:	18d5      	adds	r5, r2, r3
 8009cac:	42ac      	cmp	r4, r5
 8009cae:	d101      	bne.n	8009cb4 <__sfputs_r+0x12>
 8009cb0:	2000      	movs	r0, #0
 8009cb2:	e007      	b.n	8009cc4 <__sfputs_r+0x22>
 8009cb4:	f814 1b01 	ldrb.w	r1, [r4], #1
 8009cb8:	463a      	mov	r2, r7
 8009cba:	4630      	mov	r0, r6
 8009cbc:	f7ff ffda 	bl	8009c74 <__sfputc_r>
 8009cc0:	1c43      	adds	r3, r0, #1
 8009cc2:	d1f3      	bne.n	8009cac <__sfputs_r+0xa>
 8009cc4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08009cc8 <_vfiprintf_r>:
 8009cc8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009ccc:	460d      	mov	r5, r1
 8009cce:	b09d      	sub	sp, #116	; 0x74
 8009cd0:	4614      	mov	r4, r2
 8009cd2:	4698      	mov	r8, r3
 8009cd4:	4606      	mov	r6, r0
 8009cd6:	b118      	cbz	r0, 8009ce0 <_vfiprintf_r+0x18>
 8009cd8:	6983      	ldr	r3, [r0, #24]
 8009cda:	b90b      	cbnz	r3, 8009ce0 <_vfiprintf_r+0x18>
 8009cdc:	f7ff fe1c 	bl	8009918 <__sinit>
 8009ce0:	4b89      	ldr	r3, [pc, #548]	; (8009f08 <_vfiprintf_r+0x240>)
 8009ce2:	429d      	cmp	r5, r3
 8009ce4:	d11b      	bne.n	8009d1e <_vfiprintf_r+0x56>
 8009ce6:	6875      	ldr	r5, [r6, #4]
 8009ce8:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8009cea:	07d9      	lsls	r1, r3, #31
 8009cec:	d405      	bmi.n	8009cfa <_vfiprintf_r+0x32>
 8009cee:	89ab      	ldrh	r3, [r5, #12]
 8009cf0:	059a      	lsls	r2, r3, #22
 8009cf2:	d402      	bmi.n	8009cfa <_vfiprintf_r+0x32>
 8009cf4:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8009cf6:	f7ff fead 	bl	8009a54 <__retarget_lock_acquire_recursive>
 8009cfa:	89ab      	ldrh	r3, [r5, #12]
 8009cfc:	071b      	lsls	r3, r3, #28
 8009cfe:	d501      	bpl.n	8009d04 <_vfiprintf_r+0x3c>
 8009d00:	692b      	ldr	r3, [r5, #16]
 8009d02:	b9eb      	cbnz	r3, 8009d40 <_vfiprintf_r+0x78>
 8009d04:	4629      	mov	r1, r5
 8009d06:	4630      	mov	r0, r6
 8009d08:	f7ff fc7e 	bl	8009608 <__swsetup_r>
 8009d0c:	b1c0      	cbz	r0, 8009d40 <_vfiprintf_r+0x78>
 8009d0e:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8009d10:	07dc      	lsls	r4, r3, #31
 8009d12:	d50e      	bpl.n	8009d32 <_vfiprintf_r+0x6a>
 8009d14:	f04f 30ff 	mov.w	r0, #4294967295
 8009d18:	b01d      	add	sp, #116	; 0x74
 8009d1a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009d1e:	4b7b      	ldr	r3, [pc, #492]	; (8009f0c <_vfiprintf_r+0x244>)
 8009d20:	429d      	cmp	r5, r3
 8009d22:	d101      	bne.n	8009d28 <_vfiprintf_r+0x60>
 8009d24:	68b5      	ldr	r5, [r6, #8]
 8009d26:	e7df      	b.n	8009ce8 <_vfiprintf_r+0x20>
 8009d28:	4b79      	ldr	r3, [pc, #484]	; (8009f10 <_vfiprintf_r+0x248>)
 8009d2a:	429d      	cmp	r5, r3
 8009d2c:	bf08      	it	eq
 8009d2e:	68f5      	ldreq	r5, [r6, #12]
 8009d30:	e7da      	b.n	8009ce8 <_vfiprintf_r+0x20>
 8009d32:	89ab      	ldrh	r3, [r5, #12]
 8009d34:	0598      	lsls	r0, r3, #22
 8009d36:	d4ed      	bmi.n	8009d14 <_vfiprintf_r+0x4c>
 8009d38:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8009d3a:	f7ff fe8c 	bl	8009a56 <__retarget_lock_release_recursive>
 8009d3e:	e7e9      	b.n	8009d14 <_vfiprintf_r+0x4c>
 8009d40:	2300      	movs	r3, #0
 8009d42:	9309      	str	r3, [sp, #36]	; 0x24
 8009d44:	2320      	movs	r3, #32
 8009d46:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8009d4a:	f8cd 800c 	str.w	r8, [sp, #12]
 8009d4e:	2330      	movs	r3, #48	; 0x30
 8009d50:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 8009f14 <_vfiprintf_r+0x24c>
 8009d54:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8009d58:	f04f 0901 	mov.w	r9, #1
 8009d5c:	4623      	mov	r3, r4
 8009d5e:	469a      	mov	sl, r3
 8009d60:	f813 2b01 	ldrb.w	r2, [r3], #1
 8009d64:	b10a      	cbz	r2, 8009d6a <_vfiprintf_r+0xa2>
 8009d66:	2a25      	cmp	r2, #37	; 0x25
 8009d68:	d1f9      	bne.n	8009d5e <_vfiprintf_r+0x96>
 8009d6a:	ebba 0b04 	subs.w	fp, sl, r4
 8009d6e:	d00b      	beq.n	8009d88 <_vfiprintf_r+0xc0>
 8009d70:	465b      	mov	r3, fp
 8009d72:	4622      	mov	r2, r4
 8009d74:	4629      	mov	r1, r5
 8009d76:	4630      	mov	r0, r6
 8009d78:	f7ff ff93 	bl	8009ca2 <__sfputs_r>
 8009d7c:	3001      	adds	r0, #1
 8009d7e:	f000 80aa 	beq.w	8009ed6 <_vfiprintf_r+0x20e>
 8009d82:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8009d84:	445a      	add	r2, fp
 8009d86:	9209      	str	r2, [sp, #36]	; 0x24
 8009d88:	f89a 3000 	ldrb.w	r3, [sl]
 8009d8c:	2b00      	cmp	r3, #0
 8009d8e:	f000 80a2 	beq.w	8009ed6 <_vfiprintf_r+0x20e>
 8009d92:	2300      	movs	r3, #0
 8009d94:	f04f 32ff 	mov.w	r2, #4294967295
 8009d98:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8009d9c:	f10a 0a01 	add.w	sl, sl, #1
 8009da0:	9304      	str	r3, [sp, #16]
 8009da2:	9307      	str	r3, [sp, #28]
 8009da4:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8009da8:	931a      	str	r3, [sp, #104]	; 0x68
 8009daa:	4654      	mov	r4, sl
 8009dac:	2205      	movs	r2, #5
 8009dae:	f814 1b01 	ldrb.w	r1, [r4], #1
 8009db2:	4858      	ldr	r0, [pc, #352]	; (8009f14 <_vfiprintf_r+0x24c>)
 8009db4:	f7f6 faac 	bl	8000310 <memchr>
 8009db8:	9a04      	ldr	r2, [sp, #16]
 8009dba:	b9d8      	cbnz	r0, 8009df4 <_vfiprintf_r+0x12c>
 8009dbc:	06d1      	lsls	r1, r2, #27
 8009dbe:	bf44      	itt	mi
 8009dc0:	2320      	movmi	r3, #32
 8009dc2:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8009dc6:	0713      	lsls	r3, r2, #28
 8009dc8:	bf44      	itt	mi
 8009dca:	232b      	movmi	r3, #43	; 0x2b
 8009dcc:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8009dd0:	f89a 3000 	ldrb.w	r3, [sl]
 8009dd4:	2b2a      	cmp	r3, #42	; 0x2a
 8009dd6:	d015      	beq.n	8009e04 <_vfiprintf_r+0x13c>
 8009dd8:	9a07      	ldr	r2, [sp, #28]
 8009dda:	4654      	mov	r4, sl
 8009ddc:	2000      	movs	r0, #0
 8009dde:	f04f 0c0a 	mov.w	ip, #10
 8009de2:	4621      	mov	r1, r4
 8009de4:	f811 3b01 	ldrb.w	r3, [r1], #1
 8009de8:	3b30      	subs	r3, #48	; 0x30
 8009dea:	2b09      	cmp	r3, #9
 8009dec:	d94e      	bls.n	8009e8c <_vfiprintf_r+0x1c4>
 8009dee:	b1b0      	cbz	r0, 8009e1e <_vfiprintf_r+0x156>
 8009df0:	9207      	str	r2, [sp, #28]
 8009df2:	e014      	b.n	8009e1e <_vfiprintf_r+0x156>
 8009df4:	eba0 0308 	sub.w	r3, r0, r8
 8009df8:	fa09 f303 	lsl.w	r3, r9, r3
 8009dfc:	4313      	orrs	r3, r2
 8009dfe:	9304      	str	r3, [sp, #16]
 8009e00:	46a2      	mov	sl, r4
 8009e02:	e7d2      	b.n	8009daa <_vfiprintf_r+0xe2>
 8009e04:	9b03      	ldr	r3, [sp, #12]
 8009e06:	1d19      	adds	r1, r3, #4
 8009e08:	681b      	ldr	r3, [r3, #0]
 8009e0a:	9103      	str	r1, [sp, #12]
 8009e0c:	2b00      	cmp	r3, #0
 8009e0e:	bfbb      	ittet	lt
 8009e10:	425b      	neglt	r3, r3
 8009e12:	f042 0202 	orrlt.w	r2, r2, #2
 8009e16:	9307      	strge	r3, [sp, #28]
 8009e18:	9307      	strlt	r3, [sp, #28]
 8009e1a:	bfb8      	it	lt
 8009e1c:	9204      	strlt	r2, [sp, #16]
 8009e1e:	7823      	ldrb	r3, [r4, #0]
 8009e20:	2b2e      	cmp	r3, #46	; 0x2e
 8009e22:	d10c      	bne.n	8009e3e <_vfiprintf_r+0x176>
 8009e24:	7863      	ldrb	r3, [r4, #1]
 8009e26:	2b2a      	cmp	r3, #42	; 0x2a
 8009e28:	d135      	bne.n	8009e96 <_vfiprintf_r+0x1ce>
 8009e2a:	9b03      	ldr	r3, [sp, #12]
 8009e2c:	1d1a      	adds	r2, r3, #4
 8009e2e:	681b      	ldr	r3, [r3, #0]
 8009e30:	9203      	str	r2, [sp, #12]
 8009e32:	2b00      	cmp	r3, #0
 8009e34:	bfb8      	it	lt
 8009e36:	f04f 33ff 	movlt.w	r3, #4294967295
 8009e3a:	3402      	adds	r4, #2
 8009e3c:	9305      	str	r3, [sp, #20]
 8009e3e:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 8009f24 <_vfiprintf_r+0x25c>
 8009e42:	7821      	ldrb	r1, [r4, #0]
 8009e44:	2203      	movs	r2, #3
 8009e46:	4650      	mov	r0, sl
 8009e48:	f7f6 fa62 	bl	8000310 <memchr>
 8009e4c:	b140      	cbz	r0, 8009e60 <_vfiprintf_r+0x198>
 8009e4e:	2340      	movs	r3, #64	; 0x40
 8009e50:	eba0 000a 	sub.w	r0, r0, sl
 8009e54:	fa03 f000 	lsl.w	r0, r3, r0
 8009e58:	9b04      	ldr	r3, [sp, #16]
 8009e5a:	4303      	orrs	r3, r0
 8009e5c:	3401      	adds	r4, #1
 8009e5e:	9304      	str	r3, [sp, #16]
 8009e60:	f814 1b01 	ldrb.w	r1, [r4], #1
 8009e64:	482c      	ldr	r0, [pc, #176]	; (8009f18 <_vfiprintf_r+0x250>)
 8009e66:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8009e6a:	2206      	movs	r2, #6
 8009e6c:	f7f6 fa50 	bl	8000310 <memchr>
 8009e70:	2800      	cmp	r0, #0
 8009e72:	d03f      	beq.n	8009ef4 <_vfiprintf_r+0x22c>
 8009e74:	4b29      	ldr	r3, [pc, #164]	; (8009f1c <_vfiprintf_r+0x254>)
 8009e76:	bb1b      	cbnz	r3, 8009ec0 <_vfiprintf_r+0x1f8>
 8009e78:	9b03      	ldr	r3, [sp, #12]
 8009e7a:	3307      	adds	r3, #7
 8009e7c:	f023 0307 	bic.w	r3, r3, #7
 8009e80:	3308      	adds	r3, #8
 8009e82:	9303      	str	r3, [sp, #12]
 8009e84:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009e86:	443b      	add	r3, r7
 8009e88:	9309      	str	r3, [sp, #36]	; 0x24
 8009e8a:	e767      	b.n	8009d5c <_vfiprintf_r+0x94>
 8009e8c:	fb0c 3202 	mla	r2, ip, r2, r3
 8009e90:	460c      	mov	r4, r1
 8009e92:	2001      	movs	r0, #1
 8009e94:	e7a5      	b.n	8009de2 <_vfiprintf_r+0x11a>
 8009e96:	2300      	movs	r3, #0
 8009e98:	3401      	adds	r4, #1
 8009e9a:	9305      	str	r3, [sp, #20]
 8009e9c:	4619      	mov	r1, r3
 8009e9e:	f04f 0c0a 	mov.w	ip, #10
 8009ea2:	4620      	mov	r0, r4
 8009ea4:	f810 2b01 	ldrb.w	r2, [r0], #1
 8009ea8:	3a30      	subs	r2, #48	; 0x30
 8009eaa:	2a09      	cmp	r2, #9
 8009eac:	d903      	bls.n	8009eb6 <_vfiprintf_r+0x1ee>
 8009eae:	2b00      	cmp	r3, #0
 8009eb0:	d0c5      	beq.n	8009e3e <_vfiprintf_r+0x176>
 8009eb2:	9105      	str	r1, [sp, #20]
 8009eb4:	e7c3      	b.n	8009e3e <_vfiprintf_r+0x176>
 8009eb6:	fb0c 2101 	mla	r1, ip, r1, r2
 8009eba:	4604      	mov	r4, r0
 8009ebc:	2301      	movs	r3, #1
 8009ebe:	e7f0      	b.n	8009ea2 <_vfiprintf_r+0x1da>
 8009ec0:	ab03      	add	r3, sp, #12
 8009ec2:	9300      	str	r3, [sp, #0]
 8009ec4:	462a      	mov	r2, r5
 8009ec6:	4b16      	ldr	r3, [pc, #88]	; (8009f20 <_vfiprintf_r+0x258>)
 8009ec8:	a904      	add	r1, sp, #16
 8009eca:	4630      	mov	r0, r6
 8009ecc:	f3af 8000 	nop.w
 8009ed0:	4607      	mov	r7, r0
 8009ed2:	1c78      	adds	r0, r7, #1
 8009ed4:	d1d6      	bne.n	8009e84 <_vfiprintf_r+0x1bc>
 8009ed6:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8009ed8:	07d9      	lsls	r1, r3, #31
 8009eda:	d405      	bmi.n	8009ee8 <_vfiprintf_r+0x220>
 8009edc:	89ab      	ldrh	r3, [r5, #12]
 8009ede:	059a      	lsls	r2, r3, #22
 8009ee0:	d402      	bmi.n	8009ee8 <_vfiprintf_r+0x220>
 8009ee2:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8009ee4:	f7ff fdb7 	bl	8009a56 <__retarget_lock_release_recursive>
 8009ee8:	89ab      	ldrh	r3, [r5, #12]
 8009eea:	065b      	lsls	r3, r3, #25
 8009eec:	f53f af12 	bmi.w	8009d14 <_vfiprintf_r+0x4c>
 8009ef0:	9809      	ldr	r0, [sp, #36]	; 0x24
 8009ef2:	e711      	b.n	8009d18 <_vfiprintf_r+0x50>
 8009ef4:	ab03      	add	r3, sp, #12
 8009ef6:	9300      	str	r3, [sp, #0]
 8009ef8:	462a      	mov	r2, r5
 8009efa:	4b09      	ldr	r3, [pc, #36]	; (8009f20 <_vfiprintf_r+0x258>)
 8009efc:	a904      	add	r1, sp, #16
 8009efe:	4630      	mov	r0, r6
 8009f00:	f000 f880 	bl	800a004 <_printf_i>
 8009f04:	e7e4      	b.n	8009ed0 <_vfiprintf_r+0x208>
 8009f06:	bf00      	nop
 8009f08:	0800a67c 	.word	0x0800a67c
 8009f0c:	0800a69c 	.word	0x0800a69c
 8009f10:	0800a65c 	.word	0x0800a65c
 8009f14:	0800a6bc 	.word	0x0800a6bc
 8009f18:	0800a6c6 	.word	0x0800a6c6
 8009f1c:	00000000 	.word	0x00000000
 8009f20:	08009ca3 	.word	0x08009ca3
 8009f24:	0800a6c2 	.word	0x0800a6c2

08009f28 <_printf_common>:
 8009f28:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8009f2c:	4616      	mov	r6, r2
 8009f2e:	4699      	mov	r9, r3
 8009f30:	688a      	ldr	r2, [r1, #8]
 8009f32:	690b      	ldr	r3, [r1, #16]
 8009f34:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8009f38:	4293      	cmp	r3, r2
 8009f3a:	bfb8      	it	lt
 8009f3c:	4613      	movlt	r3, r2
 8009f3e:	6033      	str	r3, [r6, #0]
 8009f40:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8009f44:	4607      	mov	r7, r0
 8009f46:	460c      	mov	r4, r1
 8009f48:	b10a      	cbz	r2, 8009f4e <_printf_common+0x26>
 8009f4a:	3301      	adds	r3, #1
 8009f4c:	6033      	str	r3, [r6, #0]
 8009f4e:	6823      	ldr	r3, [r4, #0]
 8009f50:	0699      	lsls	r1, r3, #26
 8009f52:	bf42      	ittt	mi
 8009f54:	6833      	ldrmi	r3, [r6, #0]
 8009f56:	3302      	addmi	r3, #2
 8009f58:	6033      	strmi	r3, [r6, #0]
 8009f5a:	6825      	ldr	r5, [r4, #0]
 8009f5c:	f015 0506 	ands.w	r5, r5, #6
 8009f60:	d106      	bne.n	8009f70 <_printf_common+0x48>
 8009f62:	f104 0a19 	add.w	sl, r4, #25
 8009f66:	68e3      	ldr	r3, [r4, #12]
 8009f68:	6832      	ldr	r2, [r6, #0]
 8009f6a:	1a9b      	subs	r3, r3, r2
 8009f6c:	42ab      	cmp	r3, r5
 8009f6e:	dc26      	bgt.n	8009fbe <_printf_common+0x96>
 8009f70:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8009f74:	1e13      	subs	r3, r2, #0
 8009f76:	6822      	ldr	r2, [r4, #0]
 8009f78:	bf18      	it	ne
 8009f7a:	2301      	movne	r3, #1
 8009f7c:	0692      	lsls	r2, r2, #26
 8009f7e:	d42b      	bmi.n	8009fd8 <_printf_common+0xb0>
 8009f80:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8009f84:	4649      	mov	r1, r9
 8009f86:	4638      	mov	r0, r7
 8009f88:	47c0      	blx	r8
 8009f8a:	3001      	adds	r0, #1
 8009f8c:	d01e      	beq.n	8009fcc <_printf_common+0xa4>
 8009f8e:	6823      	ldr	r3, [r4, #0]
 8009f90:	68e5      	ldr	r5, [r4, #12]
 8009f92:	6832      	ldr	r2, [r6, #0]
 8009f94:	f003 0306 	and.w	r3, r3, #6
 8009f98:	2b04      	cmp	r3, #4
 8009f9a:	bf08      	it	eq
 8009f9c:	1aad      	subeq	r5, r5, r2
 8009f9e:	68a3      	ldr	r3, [r4, #8]
 8009fa0:	6922      	ldr	r2, [r4, #16]
 8009fa2:	bf0c      	ite	eq
 8009fa4:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8009fa8:	2500      	movne	r5, #0
 8009faa:	4293      	cmp	r3, r2
 8009fac:	bfc4      	itt	gt
 8009fae:	1a9b      	subgt	r3, r3, r2
 8009fb0:	18ed      	addgt	r5, r5, r3
 8009fb2:	2600      	movs	r6, #0
 8009fb4:	341a      	adds	r4, #26
 8009fb6:	42b5      	cmp	r5, r6
 8009fb8:	d11a      	bne.n	8009ff0 <_printf_common+0xc8>
 8009fba:	2000      	movs	r0, #0
 8009fbc:	e008      	b.n	8009fd0 <_printf_common+0xa8>
 8009fbe:	2301      	movs	r3, #1
 8009fc0:	4652      	mov	r2, sl
 8009fc2:	4649      	mov	r1, r9
 8009fc4:	4638      	mov	r0, r7
 8009fc6:	47c0      	blx	r8
 8009fc8:	3001      	adds	r0, #1
 8009fca:	d103      	bne.n	8009fd4 <_printf_common+0xac>
 8009fcc:	f04f 30ff 	mov.w	r0, #4294967295
 8009fd0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009fd4:	3501      	adds	r5, #1
 8009fd6:	e7c6      	b.n	8009f66 <_printf_common+0x3e>
 8009fd8:	18e1      	adds	r1, r4, r3
 8009fda:	1c5a      	adds	r2, r3, #1
 8009fdc:	2030      	movs	r0, #48	; 0x30
 8009fde:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8009fe2:	4422      	add	r2, r4
 8009fe4:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8009fe8:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8009fec:	3302      	adds	r3, #2
 8009fee:	e7c7      	b.n	8009f80 <_printf_common+0x58>
 8009ff0:	2301      	movs	r3, #1
 8009ff2:	4622      	mov	r2, r4
 8009ff4:	4649      	mov	r1, r9
 8009ff6:	4638      	mov	r0, r7
 8009ff8:	47c0      	blx	r8
 8009ffa:	3001      	adds	r0, #1
 8009ffc:	d0e6      	beq.n	8009fcc <_printf_common+0xa4>
 8009ffe:	3601      	adds	r6, #1
 800a000:	e7d9      	b.n	8009fb6 <_printf_common+0x8e>
	...

0800a004 <_printf_i>:
 800a004:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800a008:	460c      	mov	r4, r1
 800a00a:	4691      	mov	r9, r2
 800a00c:	7e27      	ldrb	r7, [r4, #24]
 800a00e:	990c      	ldr	r1, [sp, #48]	; 0x30
 800a010:	2f78      	cmp	r7, #120	; 0x78
 800a012:	4680      	mov	r8, r0
 800a014:	469a      	mov	sl, r3
 800a016:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800a01a:	d807      	bhi.n	800a02c <_printf_i+0x28>
 800a01c:	2f62      	cmp	r7, #98	; 0x62
 800a01e:	d80a      	bhi.n	800a036 <_printf_i+0x32>
 800a020:	2f00      	cmp	r7, #0
 800a022:	f000 80d8 	beq.w	800a1d6 <_printf_i+0x1d2>
 800a026:	2f58      	cmp	r7, #88	; 0x58
 800a028:	f000 80a3 	beq.w	800a172 <_printf_i+0x16e>
 800a02c:	f104 0642 	add.w	r6, r4, #66	; 0x42
 800a030:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800a034:	e03a      	b.n	800a0ac <_printf_i+0xa8>
 800a036:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800a03a:	2b15      	cmp	r3, #21
 800a03c:	d8f6      	bhi.n	800a02c <_printf_i+0x28>
 800a03e:	a001      	add	r0, pc, #4	; (adr r0, 800a044 <_printf_i+0x40>)
 800a040:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 800a044:	0800a09d 	.word	0x0800a09d
 800a048:	0800a0b1 	.word	0x0800a0b1
 800a04c:	0800a02d 	.word	0x0800a02d
 800a050:	0800a02d 	.word	0x0800a02d
 800a054:	0800a02d 	.word	0x0800a02d
 800a058:	0800a02d 	.word	0x0800a02d
 800a05c:	0800a0b1 	.word	0x0800a0b1
 800a060:	0800a02d 	.word	0x0800a02d
 800a064:	0800a02d 	.word	0x0800a02d
 800a068:	0800a02d 	.word	0x0800a02d
 800a06c:	0800a02d 	.word	0x0800a02d
 800a070:	0800a1bd 	.word	0x0800a1bd
 800a074:	0800a0e1 	.word	0x0800a0e1
 800a078:	0800a19f 	.word	0x0800a19f
 800a07c:	0800a02d 	.word	0x0800a02d
 800a080:	0800a02d 	.word	0x0800a02d
 800a084:	0800a1df 	.word	0x0800a1df
 800a088:	0800a02d 	.word	0x0800a02d
 800a08c:	0800a0e1 	.word	0x0800a0e1
 800a090:	0800a02d 	.word	0x0800a02d
 800a094:	0800a02d 	.word	0x0800a02d
 800a098:	0800a1a7 	.word	0x0800a1a7
 800a09c:	680b      	ldr	r3, [r1, #0]
 800a09e:	1d1a      	adds	r2, r3, #4
 800a0a0:	681b      	ldr	r3, [r3, #0]
 800a0a2:	600a      	str	r2, [r1, #0]
 800a0a4:	f104 0642 	add.w	r6, r4, #66	; 0x42
 800a0a8:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800a0ac:	2301      	movs	r3, #1
 800a0ae:	e0a3      	b.n	800a1f8 <_printf_i+0x1f4>
 800a0b0:	6825      	ldr	r5, [r4, #0]
 800a0b2:	6808      	ldr	r0, [r1, #0]
 800a0b4:	062e      	lsls	r6, r5, #24
 800a0b6:	f100 0304 	add.w	r3, r0, #4
 800a0ba:	d50a      	bpl.n	800a0d2 <_printf_i+0xce>
 800a0bc:	6805      	ldr	r5, [r0, #0]
 800a0be:	600b      	str	r3, [r1, #0]
 800a0c0:	2d00      	cmp	r5, #0
 800a0c2:	da03      	bge.n	800a0cc <_printf_i+0xc8>
 800a0c4:	232d      	movs	r3, #45	; 0x2d
 800a0c6:	426d      	negs	r5, r5
 800a0c8:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800a0cc:	485e      	ldr	r0, [pc, #376]	; (800a248 <_printf_i+0x244>)
 800a0ce:	230a      	movs	r3, #10
 800a0d0:	e019      	b.n	800a106 <_printf_i+0x102>
 800a0d2:	f015 0f40 	tst.w	r5, #64	; 0x40
 800a0d6:	6805      	ldr	r5, [r0, #0]
 800a0d8:	600b      	str	r3, [r1, #0]
 800a0da:	bf18      	it	ne
 800a0dc:	b22d      	sxthne	r5, r5
 800a0de:	e7ef      	b.n	800a0c0 <_printf_i+0xbc>
 800a0e0:	680b      	ldr	r3, [r1, #0]
 800a0e2:	6825      	ldr	r5, [r4, #0]
 800a0e4:	1d18      	adds	r0, r3, #4
 800a0e6:	6008      	str	r0, [r1, #0]
 800a0e8:	0628      	lsls	r0, r5, #24
 800a0ea:	d501      	bpl.n	800a0f0 <_printf_i+0xec>
 800a0ec:	681d      	ldr	r5, [r3, #0]
 800a0ee:	e002      	b.n	800a0f6 <_printf_i+0xf2>
 800a0f0:	0669      	lsls	r1, r5, #25
 800a0f2:	d5fb      	bpl.n	800a0ec <_printf_i+0xe8>
 800a0f4:	881d      	ldrh	r5, [r3, #0]
 800a0f6:	4854      	ldr	r0, [pc, #336]	; (800a248 <_printf_i+0x244>)
 800a0f8:	2f6f      	cmp	r7, #111	; 0x6f
 800a0fa:	bf0c      	ite	eq
 800a0fc:	2308      	moveq	r3, #8
 800a0fe:	230a      	movne	r3, #10
 800a100:	2100      	movs	r1, #0
 800a102:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800a106:	6866      	ldr	r6, [r4, #4]
 800a108:	60a6      	str	r6, [r4, #8]
 800a10a:	2e00      	cmp	r6, #0
 800a10c:	bfa2      	ittt	ge
 800a10e:	6821      	ldrge	r1, [r4, #0]
 800a110:	f021 0104 	bicge.w	r1, r1, #4
 800a114:	6021      	strge	r1, [r4, #0]
 800a116:	b90d      	cbnz	r5, 800a11c <_printf_i+0x118>
 800a118:	2e00      	cmp	r6, #0
 800a11a:	d04d      	beq.n	800a1b8 <_printf_i+0x1b4>
 800a11c:	4616      	mov	r6, r2
 800a11e:	fbb5 f1f3 	udiv	r1, r5, r3
 800a122:	fb03 5711 	mls	r7, r3, r1, r5
 800a126:	5dc7      	ldrb	r7, [r0, r7]
 800a128:	f806 7d01 	strb.w	r7, [r6, #-1]!
 800a12c:	462f      	mov	r7, r5
 800a12e:	42bb      	cmp	r3, r7
 800a130:	460d      	mov	r5, r1
 800a132:	d9f4      	bls.n	800a11e <_printf_i+0x11a>
 800a134:	2b08      	cmp	r3, #8
 800a136:	d10b      	bne.n	800a150 <_printf_i+0x14c>
 800a138:	6823      	ldr	r3, [r4, #0]
 800a13a:	07df      	lsls	r7, r3, #31
 800a13c:	d508      	bpl.n	800a150 <_printf_i+0x14c>
 800a13e:	6923      	ldr	r3, [r4, #16]
 800a140:	6861      	ldr	r1, [r4, #4]
 800a142:	4299      	cmp	r1, r3
 800a144:	bfde      	ittt	le
 800a146:	2330      	movle	r3, #48	; 0x30
 800a148:	f806 3c01 	strble.w	r3, [r6, #-1]
 800a14c:	f106 36ff 	addle.w	r6, r6, #4294967295
 800a150:	1b92      	subs	r2, r2, r6
 800a152:	6122      	str	r2, [r4, #16]
 800a154:	f8cd a000 	str.w	sl, [sp]
 800a158:	464b      	mov	r3, r9
 800a15a:	aa03      	add	r2, sp, #12
 800a15c:	4621      	mov	r1, r4
 800a15e:	4640      	mov	r0, r8
 800a160:	f7ff fee2 	bl	8009f28 <_printf_common>
 800a164:	3001      	adds	r0, #1
 800a166:	d14c      	bne.n	800a202 <_printf_i+0x1fe>
 800a168:	f04f 30ff 	mov.w	r0, #4294967295
 800a16c:	b004      	add	sp, #16
 800a16e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a172:	4835      	ldr	r0, [pc, #212]	; (800a248 <_printf_i+0x244>)
 800a174:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 800a178:	6823      	ldr	r3, [r4, #0]
 800a17a:	680e      	ldr	r6, [r1, #0]
 800a17c:	061f      	lsls	r7, r3, #24
 800a17e:	f856 5b04 	ldr.w	r5, [r6], #4
 800a182:	600e      	str	r6, [r1, #0]
 800a184:	d514      	bpl.n	800a1b0 <_printf_i+0x1ac>
 800a186:	07d9      	lsls	r1, r3, #31
 800a188:	bf44      	itt	mi
 800a18a:	f043 0320 	orrmi.w	r3, r3, #32
 800a18e:	6023      	strmi	r3, [r4, #0]
 800a190:	b91d      	cbnz	r5, 800a19a <_printf_i+0x196>
 800a192:	6823      	ldr	r3, [r4, #0]
 800a194:	f023 0320 	bic.w	r3, r3, #32
 800a198:	6023      	str	r3, [r4, #0]
 800a19a:	2310      	movs	r3, #16
 800a19c:	e7b0      	b.n	800a100 <_printf_i+0xfc>
 800a19e:	6823      	ldr	r3, [r4, #0]
 800a1a0:	f043 0320 	orr.w	r3, r3, #32
 800a1a4:	6023      	str	r3, [r4, #0]
 800a1a6:	2378      	movs	r3, #120	; 0x78
 800a1a8:	4828      	ldr	r0, [pc, #160]	; (800a24c <_printf_i+0x248>)
 800a1aa:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800a1ae:	e7e3      	b.n	800a178 <_printf_i+0x174>
 800a1b0:	065e      	lsls	r6, r3, #25
 800a1b2:	bf48      	it	mi
 800a1b4:	b2ad      	uxthmi	r5, r5
 800a1b6:	e7e6      	b.n	800a186 <_printf_i+0x182>
 800a1b8:	4616      	mov	r6, r2
 800a1ba:	e7bb      	b.n	800a134 <_printf_i+0x130>
 800a1bc:	680b      	ldr	r3, [r1, #0]
 800a1be:	6826      	ldr	r6, [r4, #0]
 800a1c0:	6960      	ldr	r0, [r4, #20]
 800a1c2:	1d1d      	adds	r5, r3, #4
 800a1c4:	600d      	str	r5, [r1, #0]
 800a1c6:	0635      	lsls	r5, r6, #24
 800a1c8:	681b      	ldr	r3, [r3, #0]
 800a1ca:	d501      	bpl.n	800a1d0 <_printf_i+0x1cc>
 800a1cc:	6018      	str	r0, [r3, #0]
 800a1ce:	e002      	b.n	800a1d6 <_printf_i+0x1d2>
 800a1d0:	0671      	lsls	r1, r6, #25
 800a1d2:	d5fb      	bpl.n	800a1cc <_printf_i+0x1c8>
 800a1d4:	8018      	strh	r0, [r3, #0]
 800a1d6:	2300      	movs	r3, #0
 800a1d8:	6123      	str	r3, [r4, #16]
 800a1da:	4616      	mov	r6, r2
 800a1dc:	e7ba      	b.n	800a154 <_printf_i+0x150>
 800a1de:	680b      	ldr	r3, [r1, #0]
 800a1e0:	1d1a      	adds	r2, r3, #4
 800a1e2:	600a      	str	r2, [r1, #0]
 800a1e4:	681e      	ldr	r6, [r3, #0]
 800a1e6:	6862      	ldr	r2, [r4, #4]
 800a1e8:	2100      	movs	r1, #0
 800a1ea:	4630      	mov	r0, r6
 800a1ec:	f7f6 f890 	bl	8000310 <memchr>
 800a1f0:	b108      	cbz	r0, 800a1f6 <_printf_i+0x1f2>
 800a1f2:	1b80      	subs	r0, r0, r6
 800a1f4:	6060      	str	r0, [r4, #4]
 800a1f6:	6863      	ldr	r3, [r4, #4]
 800a1f8:	6123      	str	r3, [r4, #16]
 800a1fa:	2300      	movs	r3, #0
 800a1fc:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800a200:	e7a8      	b.n	800a154 <_printf_i+0x150>
 800a202:	6923      	ldr	r3, [r4, #16]
 800a204:	4632      	mov	r2, r6
 800a206:	4649      	mov	r1, r9
 800a208:	4640      	mov	r0, r8
 800a20a:	47d0      	blx	sl
 800a20c:	3001      	adds	r0, #1
 800a20e:	d0ab      	beq.n	800a168 <_printf_i+0x164>
 800a210:	6823      	ldr	r3, [r4, #0]
 800a212:	079b      	lsls	r3, r3, #30
 800a214:	d413      	bmi.n	800a23e <_printf_i+0x23a>
 800a216:	68e0      	ldr	r0, [r4, #12]
 800a218:	9b03      	ldr	r3, [sp, #12]
 800a21a:	4298      	cmp	r0, r3
 800a21c:	bfb8      	it	lt
 800a21e:	4618      	movlt	r0, r3
 800a220:	e7a4      	b.n	800a16c <_printf_i+0x168>
 800a222:	2301      	movs	r3, #1
 800a224:	4632      	mov	r2, r6
 800a226:	4649      	mov	r1, r9
 800a228:	4640      	mov	r0, r8
 800a22a:	47d0      	blx	sl
 800a22c:	3001      	adds	r0, #1
 800a22e:	d09b      	beq.n	800a168 <_printf_i+0x164>
 800a230:	3501      	adds	r5, #1
 800a232:	68e3      	ldr	r3, [r4, #12]
 800a234:	9903      	ldr	r1, [sp, #12]
 800a236:	1a5b      	subs	r3, r3, r1
 800a238:	42ab      	cmp	r3, r5
 800a23a:	dcf2      	bgt.n	800a222 <_printf_i+0x21e>
 800a23c:	e7eb      	b.n	800a216 <_printf_i+0x212>
 800a23e:	2500      	movs	r5, #0
 800a240:	f104 0619 	add.w	r6, r4, #25
 800a244:	e7f5      	b.n	800a232 <_printf_i+0x22e>
 800a246:	bf00      	nop
 800a248:	0800a6cd 	.word	0x0800a6cd
 800a24c:	0800a6de 	.word	0x0800a6de

0800a250 <_sbrk_r>:
 800a250:	b538      	push	{r3, r4, r5, lr}
 800a252:	4d06      	ldr	r5, [pc, #24]	; (800a26c <_sbrk_r+0x1c>)
 800a254:	2300      	movs	r3, #0
 800a256:	4604      	mov	r4, r0
 800a258:	4608      	mov	r0, r1
 800a25a:	602b      	str	r3, [r5, #0]
 800a25c:	f7f7 f920 	bl	80014a0 <_sbrk>
 800a260:	1c43      	adds	r3, r0, #1
 800a262:	d102      	bne.n	800a26a <_sbrk_r+0x1a>
 800a264:	682b      	ldr	r3, [r5, #0]
 800a266:	b103      	cbz	r3, 800a26a <_sbrk_r+0x1a>
 800a268:	6023      	str	r3, [r4, #0]
 800a26a:	bd38      	pop	{r3, r4, r5, pc}
 800a26c:	200024e0 	.word	0x200024e0

0800a270 <__sread>:
 800a270:	b510      	push	{r4, lr}
 800a272:	460c      	mov	r4, r1
 800a274:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800a278:	f000 f8a0 	bl	800a3bc <_read_r>
 800a27c:	2800      	cmp	r0, #0
 800a27e:	bfab      	itete	ge
 800a280:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800a282:	89a3      	ldrhlt	r3, [r4, #12]
 800a284:	181b      	addge	r3, r3, r0
 800a286:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800a28a:	bfac      	ite	ge
 800a28c:	6563      	strge	r3, [r4, #84]	; 0x54
 800a28e:	81a3      	strhlt	r3, [r4, #12]
 800a290:	bd10      	pop	{r4, pc}

0800a292 <__swrite>:
 800a292:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a296:	461f      	mov	r7, r3
 800a298:	898b      	ldrh	r3, [r1, #12]
 800a29a:	05db      	lsls	r3, r3, #23
 800a29c:	4605      	mov	r5, r0
 800a29e:	460c      	mov	r4, r1
 800a2a0:	4616      	mov	r6, r2
 800a2a2:	d505      	bpl.n	800a2b0 <__swrite+0x1e>
 800a2a4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800a2a8:	2302      	movs	r3, #2
 800a2aa:	2200      	movs	r2, #0
 800a2ac:	f000 f868 	bl	800a380 <_lseek_r>
 800a2b0:	89a3      	ldrh	r3, [r4, #12]
 800a2b2:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800a2b6:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800a2ba:	81a3      	strh	r3, [r4, #12]
 800a2bc:	4632      	mov	r2, r6
 800a2be:	463b      	mov	r3, r7
 800a2c0:	4628      	mov	r0, r5
 800a2c2:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800a2c6:	f000 b817 	b.w	800a2f8 <_write_r>

0800a2ca <__sseek>:
 800a2ca:	b510      	push	{r4, lr}
 800a2cc:	460c      	mov	r4, r1
 800a2ce:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800a2d2:	f000 f855 	bl	800a380 <_lseek_r>
 800a2d6:	1c43      	adds	r3, r0, #1
 800a2d8:	89a3      	ldrh	r3, [r4, #12]
 800a2da:	bf15      	itete	ne
 800a2dc:	6560      	strne	r0, [r4, #84]	; 0x54
 800a2de:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800a2e2:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800a2e6:	81a3      	strheq	r3, [r4, #12]
 800a2e8:	bf18      	it	ne
 800a2ea:	81a3      	strhne	r3, [r4, #12]
 800a2ec:	bd10      	pop	{r4, pc}

0800a2ee <__sclose>:
 800a2ee:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800a2f2:	f000 b813 	b.w	800a31c <_close_r>
	...

0800a2f8 <_write_r>:
 800a2f8:	b538      	push	{r3, r4, r5, lr}
 800a2fa:	4d07      	ldr	r5, [pc, #28]	; (800a318 <_write_r+0x20>)
 800a2fc:	4604      	mov	r4, r0
 800a2fe:	4608      	mov	r0, r1
 800a300:	4611      	mov	r1, r2
 800a302:	2200      	movs	r2, #0
 800a304:	602a      	str	r2, [r5, #0]
 800a306:	461a      	mov	r2, r3
 800a308:	f7f6 f9f2 	bl	80006f0 <_write>
 800a30c:	1c43      	adds	r3, r0, #1
 800a30e:	d102      	bne.n	800a316 <_write_r+0x1e>
 800a310:	682b      	ldr	r3, [r5, #0]
 800a312:	b103      	cbz	r3, 800a316 <_write_r+0x1e>
 800a314:	6023      	str	r3, [r4, #0]
 800a316:	bd38      	pop	{r3, r4, r5, pc}
 800a318:	200024e0 	.word	0x200024e0

0800a31c <_close_r>:
 800a31c:	b538      	push	{r3, r4, r5, lr}
 800a31e:	4d06      	ldr	r5, [pc, #24]	; (800a338 <_close_r+0x1c>)
 800a320:	2300      	movs	r3, #0
 800a322:	4604      	mov	r4, r0
 800a324:	4608      	mov	r0, r1
 800a326:	602b      	str	r3, [r5, #0]
 800a328:	f7f7 f885 	bl	8001436 <_close>
 800a32c:	1c43      	adds	r3, r0, #1
 800a32e:	d102      	bne.n	800a336 <_close_r+0x1a>
 800a330:	682b      	ldr	r3, [r5, #0]
 800a332:	b103      	cbz	r3, 800a336 <_close_r+0x1a>
 800a334:	6023      	str	r3, [r4, #0]
 800a336:	bd38      	pop	{r3, r4, r5, pc}
 800a338:	200024e0 	.word	0x200024e0

0800a33c <_fstat_r>:
 800a33c:	b538      	push	{r3, r4, r5, lr}
 800a33e:	4d07      	ldr	r5, [pc, #28]	; (800a35c <_fstat_r+0x20>)
 800a340:	2300      	movs	r3, #0
 800a342:	4604      	mov	r4, r0
 800a344:	4608      	mov	r0, r1
 800a346:	4611      	mov	r1, r2
 800a348:	602b      	str	r3, [r5, #0]
 800a34a:	f7f7 f880 	bl	800144e <_fstat>
 800a34e:	1c43      	adds	r3, r0, #1
 800a350:	d102      	bne.n	800a358 <_fstat_r+0x1c>
 800a352:	682b      	ldr	r3, [r5, #0]
 800a354:	b103      	cbz	r3, 800a358 <_fstat_r+0x1c>
 800a356:	6023      	str	r3, [r4, #0]
 800a358:	bd38      	pop	{r3, r4, r5, pc}
 800a35a:	bf00      	nop
 800a35c:	200024e0 	.word	0x200024e0

0800a360 <_isatty_r>:
 800a360:	b538      	push	{r3, r4, r5, lr}
 800a362:	4d06      	ldr	r5, [pc, #24]	; (800a37c <_isatty_r+0x1c>)
 800a364:	2300      	movs	r3, #0
 800a366:	4604      	mov	r4, r0
 800a368:	4608      	mov	r0, r1
 800a36a:	602b      	str	r3, [r5, #0]
 800a36c:	f7f7 f87f 	bl	800146e <_isatty>
 800a370:	1c43      	adds	r3, r0, #1
 800a372:	d102      	bne.n	800a37a <_isatty_r+0x1a>
 800a374:	682b      	ldr	r3, [r5, #0]
 800a376:	b103      	cbz	r3, 800a37a <_isatty_r+0x1a>
 800a378:	6023      	str	r3, [r4, #0]
 800a37a:	bd38      	pop	{r3, r4, r5, pc}
 800a37c:	200024e0 	.word	0x200024e0

0800a380 <_lseek_r>:
 800a380:	b538      	push	{r3, r4, r5, lr}
 800a382:	4d07      	ldr	r5, [pc, #28]	; (800a3a0 <_lseek_r+0x20>)
 800a384:	4604      	mov	r4, r0
 800a386:	4608      	mov	r0, r1
 800a388:	4611      	mov	r1, r2
 800a38a:	2200      	movs	r2, #0
 800a38c:	602a      	str	r2, [r5, #0]
 800a38e:	461a      	mov	r2, r3
 800a390:	f7f7 f878 	bl	8001484 <_lseek>
 800a394:	1c43      	adds	r3, r0, #1
 800a396:	d102      	bne.n	800a39e <_lseek_r+0x1e>
 800a398:	682b      	ldr	r3, [r5, #0]
 800a39a:	b103      	cbz	r3, 800a39e <_lseek_r+0x1e>
 800a39c:	6023      	str	r3, [r4, #0]
 800a39e:	bd38      	pop	{r3, r4, r5, pc}
 800a3a0:	200024e0 	.word	0x200024e0

0800a3a4 <__malloc_lock>:
 800a3a4:	4801      	ldr	r0, [pc, #4]	; (800a3ac <__malloc_lock+0x8>)
 800a3a6:	f7ff bb55 	b.w	8009a54 <__retarget_lock_acquire_recursive>
 800a3aa:	bf00      	nop
 800a3ac:	200024d8 	.word	0x200024d8

0800a3b0 <__malloc_unlock>:
 800a3b0:	4801      	ldr	r0, [pc, #4]	; (800a3b8 <__malloc_unlock+0x8>)
 800a3b2:	f7ff bb50 	b.w	8009a56 <__retarget_lock_release_recursive>
 800a3b6:	bf00      	nop
 800a3b8:	200024d8 	.word	0x200024d8

0800a3bc <_read_r>:
 800a3bc:	b538      	push	{r3, r4, r5, lr}
 800a3be:	4d07      	ldr	r5, [pc, #28]	; (800a3dc <_read_r+0x20>)
 800a3c0:	4604      	mov	r4, r0
 800a3c2:	4608      	mov	r0, r1
 800a3c4:	4611      	mov	r1, r2
 800a3c6:	2200      	movs	r2, #0
 800a3c8:	602a      	str	r2, [r5, #0]
 800a3ca:	461a      	mov	r2, r3
 800a3cc:	f7f7 f816 	bl	80013fc <_read>
 800a3d0:	1c43      	adds	r3, r0, #1
 800a3d2:	d102      	bne.n	800a3da <_read_r+0x1e>
 800a3d4:	682b      	ldr	r3, [r5, #0]
 800a3d6:	b103      	cbz	r3, 800a3da <_read_r+0x1e>
 800a3d8:	6023      	str	r3, [r4, #0]
 800a3da:	bd38      	pop	{r3, r4, r5, pc}
 800a3dc:	200024e0 	.word	0x200024e0

0800a3e0 <_init>:
 800a3e0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a3e2:	bf00      	nop
 800a3e4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800a3e6:	bc08      	pop	{r3}
 800a3e8:	469e      	mov	lr, r3
 800a3ea:	4770      	bx	lr

0800a3ec <_fini>:
 800a3ec:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a3ee:	bf00      	nop
 800a3f0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800a3f2:	bc08      	pop	{r3}
 800a3f4:	469e      	mov	lr, r3
 800a3f6:	4770      	bx	lr
