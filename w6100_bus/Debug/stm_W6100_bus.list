
stm_W6100_bus.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000002cc  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00007b98  080002d0  080002d0  000102d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000020c  08007e68  08007e68  00017e68  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  08008074  08008074  00018074  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000004  0800807c  0800807c  0001807c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .fini_array   00000004  08008080  08008080  00018080  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .data         0000009c  20000000  08008084  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .bss          0000239c  2000009c  08008120  0002009c  2**2
                  ALLOC
  8 ._user_heap_stack 00000600  20002438  08008120  00022438  2**0
                  ALLOC
  9 .ARM.attributes 0000002e  00000000  00000000  0002009c  2**0
                  CONTENTS, READONLY
 10 .debug_info   0001ef60  00000000  00000000  000200ca  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 11 .debug_abbrev 0000383a  00000000  00000000  0003f02a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_aranges 00001058  00000000  00000000  00042868  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_ranges 00000f40  00000000  00000000  000438c0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_macro  000348ea  00000000  00000000  00044800  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_line   000144e3  00000000  00000000  000790ea  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_str    0014dd84  00000000  00000000  0008d5cd  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .comment      00000053  00000000  00000000  001db351  2**0
                  CONTENTS, READONLY
 18 .debug_frame  00004bb8  00000000  00000000  001db3a4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080002d0 <__do_global_dtors_aux>:
 80002d0:	b510      	push	{r4, lr}
 80002d2:	4c05      	ldr	r4, [pc, #20]	; (80002e8 <__do_global_dtors_aux+0x18>)
 80002d4:	7823      	ldrb	r3, [r4, #0]
 80002d6:	b933      	cbnz	r3, 80002e6 <__do_global_dtors_aux+0x16>
 80002d8:	4b04      	ldr	r3, [pc, #16]	; (80002ec <__do_global_dtors_aux+0x1c>)
 80002da:	b113      	cbz	r3, 80002e2 <__do_global_dtors_aux+0x12>
 80002dc:	4804      	ldr	r0, [pc, #16]	; (80002f0 <__do_global_dtors_aux+0x20>)
 80002de:	f3af 8000 	nop.w
 80002e2:	2301      	movs	r3, #1
 80002e4:	7023      	strb	r3, [r4, #0]
 80002e6:	bd10      	pop	{r4, pc}
 80002e8:	2000009c 	.word	0x2000009c
 80002ec:	00000000 	.word	0x00000000
 80002f0:	08007e50 	.word	0x08007e50

080002f4 <frame_dummy>:
 80002f4:	b508      	push	{r3, lr}
 80002f6:	4b03      	ldr	r3, [pc, #12]	; (8000304 <frame_dummy+0x10>)
 80002f8:	b11b      	cbz	r3, 8000302 <frame_dummy+0xe>
 80002fa:	4903      	ldr	r1, [pc, #12]	; (8000308 <frame_dummy+0x14>)
 80002fc:	4803      	ldr	r0, [pc, #12]	; (800030c <frame_dummy+0x18>)
 80002fe:	f3af 8000 	nop.w
 8000302:	bd08      	pop	{r3, pc}
 8000304:	00000000 	.word	0x00000000
 8000308:	200000a0 	.word	0x200000a0
 800030c:	08007e50 	.word	0x08007e50

08000310 <memchr>:
 8000310:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000314:	2a10      	cmp	r2, #16
 8000316:	db2b      	blt.n	8000370 <memchr+0x60>
 8000318:	f010 0f07 	tst.w	r0, #7
 800031c:	d008      	beq.n	8000330 <memchr+0x20>
 800031e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000322:	3a01      	subs	r2, #1
 8000324:	428b      	cmp	r3, r1
 8000326:	d02d      	beq.n	8000384 <memchr+0x74>
 8000328:	f010 0f07 	tst.w	r0, #7
 800032c:	b342      	cbz	r2, 8000380 <memchr+0x70>
 800032e:	d1f6      	bne.n	800031e <memchr+0xe>
 8000330:	b4f0      	push	{r4, r5, r6, r7}
 8000332:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000336:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800033a:	f022 0407 	bic.w	r4, r2, #7
 800033e:	f07f 0700 	mvns.w	r7, #0
 8000342:	2300      	movs	r3, #0
 8000344:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000348:	3c08      	subs	r4, #8
 800034a:	ea85 0501 	eor.w	r5, r5, r1
 800034e:	ea86 0601 	eor.w	r6, r6, r1
 8000352:	fa85 f547 	uadd8	r5, r5, r7
 8000356:	faa3 f587 	sel	r5, r3, r7
 800035a:	fa86 f647 	uadd8	r6, r6, r7
 800035e:	faa5 f687 	sel	r6, r5, r7
 8000362:	b98e      	cbnz	r6, 8000388 <memchr+0x78>
 8000364:	d1ee      	bne.n	8000344 <memchr+0x34>
 8000366:	bcf0      	pop	{r4, r5, r6, r7}
 8000368:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800036c:	f002 0207 	and.w	r2, r2, #7
 8000370:	b132      	cbz	r2, 8000380 <memchr+0x70>
 8000372:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000376:	3a01      	subs	r2, #1
 8000378:	ea83 0301 	eor.w	r3, r3, r1
 800037c:	b113      	cbz	r3, 8000384 <memchr+0x74>
 800037e:	d1f8      	bne.n	8000372 <memchr+0x62>
 8000380:	2000      	movs	r0, #0
 8000382:	4770      	bx	lr
 8000384:	3801      	subs	r0, #1
 8000386:	4770      	bx	lr
 8000388:	2d00      	cmp	r5, #0
 800038a:	bf06      	itte	eq
 800038c:	4635      	moveq	r5, r6
 800038e:	3803      	subeq	r0, #3
 8000390:	3807      	subne	r0, #7
 8000392:	f015 0f01 	tst.w	r5, #1
 8000396:	d107      	bne.n	80003a8 <memchr+0x98>
 8000398:	3001      	adds	r0, #1
 800039a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800039e:	bf02      	ittt	eq
 80003a0:	3001      	addeq	r0, #1
 80003a2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80003a6:	3001      	addeq	r0, #1
 80003a8:	bcf0      	pop	{r4, r5, r6, r7}
 80003aa:	3801      	subs	r0, #1
 80003ac:	4770      	bx	lr
 80003ae:	bf00      	nop

080003b0 <__aeabi_uldivmod>:
 80003b0:	b953      	cbnz	r3, 80003c8 <__aeabi_uldivmod+0x18>
 80003b2:	b94a      	cbnz	r2, 80003c8 <__aeabi_uldivmod+0x18>
 80003b4:	2900      	cmp	r1, #0
 80003b6:	bf08      	it	eq
 80003b8:	2800      	cmpeq	r0, #0
 80003ba:	bf1c      	itt	ne
 80003bc:	f04f 31ff 	movne.w	r1, #4294967295
 80003c0:	f04f 30ff 	movne.w	r0, #4294967295
 80003c4:	f000 b96e 	b.w	80006a4 <__aeabi_idiv0>
 80003c8:	f1ad 0c08 	sub.w	ip, sp, #8
 80003cc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80003d0:	f000 f806 	bl	80003e0 <__udivmoddi4>
 80003d4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80003d8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80003dc:	b004      	add	sp, #16
 80003de:	4770      	bx	lr

080003e0 <__udivmoddi4>:
 80003e0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80003e4:	9d08      	ldr	r5, [sp, #32]
 80003e6:	4604      	mov	r4, r0
 80003e8:	468c      	mov	ip, r1
 80003ea:	2b00      	cmp	r3, #0
 80003ec:	f040 8083 	bne.w	80004f6 <__udivmoddi4+0x116>
 80003f0:	428a      	cmp	r2, r1
 80003f2:	4617      	mov	r7, r2
 80003f4:	d947      	bls.n	8000486 <__udivmoddi4+0xa6>
 80003f6:	fab2 f282 	clz	r2, r2
 80003fa:	b142      	cbz	r2, 800040e <__udivmoddi4+0x2e>
 80003fc:	f1c2 0020 	rsb	r0, r2, #32
 8000400:	fa24 f000 	lsr.w	r0, r4, r0
 8000404:	4091      	lsls	r1, r2
 8000406:	4097      	lsls	r7, r2
 8000408:	ea40 0c01 	orr.w	ip, r0, r1
 800040c:	4094      	lsls	r4, r2
 800040e:	ea4f 4817 	mov.w	r8, r7, lsr #16
 8000412:	0c23      	lsrs	r3, r4, #16
 8000414:	fbbc f6f8 	udiv	r6, ip, r8
 8000418:	fa1f fe87 	uxth.w	lr, r7
 800041c:	fb08 c116 	mls	r1, r8, r6, ip
 8000420:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000424:	fb06 f10e 	mul.w	r1, r6, lr
 8000428:	4299      	cmp	r1, r3
 800042a:	d909      	bls.n	8000440 <__udivmoddi4+0x60>
 800042c:	18fb      	adds	r3, r7, r3
 800042e:	f106 30ff 	add.w	r0, r6, #4294967295
 8000432:	f080 8119 	bcs.w	8000668 <__udivmoddi4+0x288>
 8000436:	4299      	cmp	r1, r3
 8000438:	f240 8116 	bls.w	8000668 <__udivmoddi4+0x288>
 800043c:	3e02      	subs	r6, #2
 800043e:	443b      	add	r3, r7
 8000440:	1a5b      	subs	r3, r3, r1
 8000442:	b2a4      	uxth	r4, r4
 8000444:	fbb3 f0f8 	udiv	r0, r3, r8
 8000448:	fb08 3310 	mls	r3, r8, r0, r3
 800044c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000450:	fb00 fe0e 	mul.w	lr, r0, lr
 8000454:	45a6      	cmp	lr, r4
 8000456:	d909      	bls.n	800046c <__udivmoddi4+0x8c>
 8000458:	193c      	adds	r4, r7, r4
 800045a:	f100 33ff 	add.w	r3, r0, #4294967295
 800045e:	f080 8105 	bcs.w	800066c <__udivmoddi4+0x28c>
 8000462:	45a6      	cmp	lr, r4
 8000464:	f240 8102 	bls.w	800066c <__udivmoddi4+0x28c>
 8000468:	3802      	subs	r0, #2
 800046a:	443c      	add	r4, r7
 800046c:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000470:	eba4 040e 	sub.w	r4, r4, lr
 8000474:	2600      	movs	r6, #0
 8000476:	b11d      	cbz	r5, 8000480 <__udivmoddi4+0xa0>
 8000478:	40d4      	lsrs	r4, r2
 800047a:	2300      	movs	r3, #0
 800047c:	e9c5 4300 	strd	r4, r3, [r5]
 8000480:	4631      	mov	r1, r6
 8000482:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000486:	b902      	cbnz	r2, 800048a <__udivmoddi4+0xaa>
 8000488:	deff      	udf	#255	; 0xff
 800048a:	fab2 f282 	clz	r2, r2
 800048e:	2a00      	cmp	r2, #0
 8000490:	d150      	bne.n	8000534 <__udivmoddi4+0x154>
 8000492:	1bcb      	subs	r3, r1, r7
 8000494:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000498:	fa1f f887 	uxth.w	r8, r7
 800049c:	2601      	movs	r6, #1
 800049e:	fbb3 fcfe 	udiv	ip, r3, lr
 80004a2:	0c21      	lsrs	r1, r4, #16
 80004a4:	fb0e 331c 	mls	r3, lr, ip, r3
 80004a8:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80004ac:	fb08 f30c 	mul.w	r3, r8, ip
 80004b0:	428b      	cmp	r3, r1
 80004b2:	d907      	bls.n	80004c4 <__udivmoddi4+0xe4>
 80004b4:	1879      	adds	r1, r7, r1
 80004b6:	f10c 30ff 	add.w	r0, ip, #4294967295
 80004ba:	d202      	bcs.n	80004c2 <__udivmoddi4+0xe2>
 80004bc:	428b      	cmp	r3, r1
 80004be:	f200 80e9 	bhi.w	8000694 <__udivmoddi4+0x2b4>
 80004c2:	4684      	mov	ip, r0
 80004c4:	1ac9      	subs	r1, r1, r3
 80004c6:	b2a3      	uxth	r3, r4
 80004c8:	fbb1 f0fe 	udiv	r0, r1, lr
 80004cc:	fb0e 1110 	mls	r1, lr, r0, r1
 80004d0:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 80004d4:	fb08 f800 	mul.w	r8, r8, r0
 80004d8:	45a0      	cmp	r8, r4
 80004da:	d907      	bls.n	80004ec <__udivmoddi4+0x10c>
 80004dc:	193c      	adds	r4, r7, r4
 80004de:	f100 33ff 	add.w	r3, r0, #4294967295
 80004e2:	d202      	bcs.n	80004ea <__udivmoddi4+0x10a>
 80004e4:	45a0      	cmp	r8, r4
 80004e6:	f200 80d9 	bhi.w	800069c <__udivmoddi4+0x2bc>
 80004ea:	4618      	mov	r0, r3
 80004ec:	eba4 0408 	sub.w	r4, r4, r8
 80004f0:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 80004f4:	e7bf      	b.n	8000476 <__udivmoddi4+0x96>
 80004f6:	428b      	cmp	r3, r1
 80004f8:	d909      	bls.n	800050e <__udivmoddi4+0x12e>
 80004fa:	2d00      	cmp	r5, #0
 80004fc:	f000 80b1 	beq.w	8000662 <__udivmoddi4+0x282>
 8000500:	2600      	movs	r6, #0
 8000502:	e9c5 0100 	strd	r0, r1, [r5]
 8000506:	4630      	mov	r0, r6
 8000508:	4631      	mov	r1, r6
 800050a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800050e:	fab3 f683 	clz	r6, r3
 8000512:	2e00      	cmp	r6, #0
 8000514:	d14a      	bne.n	80005ac <__udivmoddi4+0x1cc>
 8000516:	428b      	cmp	r3, r1
 8000518:	d302      	bcc.n	8000520 <__udivmoddi4+0x140>
 800051a:	4282      	cmp	r2, r0
 800051c:	f200 80b8 	bhi.w	8000690 <__udivmoddi4+0x2b0>
 8000520:	1a84      	subs	r4, r0, r2
 8000522:	eb61 0103 	sbc.w	r1, r1, r3
 8000526:	2001      	movs	r0, #1
 8000528:	468c      	mov	ip, r1
 800052a:	2d00      	cmp	r5, #0
 800052c:	d0a8      	beq.n	8000480 <__udivmoddi4+0xa0>
 800052e:	e9c5 4c00 	strd	r4, ip, [r5]
 8000532:	e7a5      	b.n	8000480 <__udivmoddi4+0xa0>
 8000534:	f1c2 0320 	rsb	r3, r2, #32
 8000538:	fa20 f603 	lsr.w	r6, r0, r3
 800053c:	4097      	lsls	r7, r2
 800053e:	fa01 f002 	lsl.w	r0, r1, r2
 8000542:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000546:	40d9      	lsrs	r1, r3
 8000548:	4330      	orrs	r0, r6
 800054a:	0c03      	lsrs	r3, r0, #16
 800054c:	fbb1 f6fe 	udiv	r6, r1, lr
 8000550:	fa1f f887 	uxth.w	r8, r7
 8000554:	fb0e 1116 	mls	r1, lr, r6, r1
 8000558:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800055c:	fb06 f108 	mul.w	r1, r6, r8
 8000560:	4299      	cmp	r1, r3
 8000562:	fa04 f402 	lsl.w	r4, r4, r2
 8000566:	d909      	bls.n	800057c <__udivmoddi4+0x19c>
 8000568:	18fb      	adds	r3, r7, r3
 800056a:	f106 3cff 	add.w	ip, r6, #4294967295
 800056e:	f080 808d 	bcs.w	800068c <__udivmoddi4+0x2ac>
 8000572:	4299      	cmp	r1, r3
 8000574:	f240 808a 	bls.w	800068c <__udivmoddi4+0x2ac>
 8000578:	3e02      	subs	r6, #2
 800057a:	443b      	add	r3, r7
 800057c:	1a5b      	subs	r3, r3, r1
 800057e:	b281      	uxth	r1, r0
 8000580:	fbb3 f0fe 	udiv	r0, r3, lr
 8000584:	fb0e 3310 	mls	r3, lr, r0, r3
 8000588:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800058c:	fb00 f308 	mul.w	r3, r0, r8
 8000590:	428b      	cmp	r3, r1
 8000592:	d907      	bls.n	80005a4 <__udivmoddi4+0x1c4>
 8000594:	1879      	adds	r1, r7, r1
 8000596:	f100 3cff 	add.w	ip, r0, #4294967295
 800059a:	d273      	bcs.n	8000684 <__udivmoddi4+0x2a4>
 800059c:	428b      	cmp	r3, r1
 800059e:	d971      	bls.n	8000684 <__udivmoddi4+0x2a4>
 80005a0:	3802      	subs	r0, #2
 80005a2:	4439      	add	r1, r7
 80005a4:	1acb      	subs	r3, r1, r3
 80005a6:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 80005aa:	e778      	b.n	800049e <__udivmoddi4+0xbe>
 80005ac:	f1c6 0c20 	rsb	ip, r6, #32
 80005b0:	fa03 f406 	lsl.w	r4, r3, r6
 80005b4:	fa22 f30c 	lsr.w	r3, r2, ip
 80005b8:	431c      	orrs	r4, r3
 80005ba:	fa20 f70c 	lsr.w	r7, r0, ip
 80005be:	fa01 f306 	lsl.w	r3, r1, r6
 80005c2:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 80005c6:	fa21 f10c 	lsr.w	r1, r1, ip
 80005ca:	431f      	orrs	r7, r3
 80005cc:	0c3b      	lsrs	r3, r7, #16
 80005ce:	fbb1 f9fe 	udiv	r9, r1, lr
 80005d2:	fa1f f884 	uxth.w	r8, r4
 80005d6:	fb0e 1119 	mls	r1, lr, r9, r1
 80005da:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 80005de:	fb09 fa08 	mul.w	sl, r9, r8
 80005e2:	458a      	cmp	sl, r1
 80005e4:	fa02 f206 	lsl.w	r2, r2, r6
 80005e8:	fa00 f306 	lsl.w	r3, r0, r6
 80005ec:	d908      	bls.n	8000600 <__udivmoddi4+0x220>
 80005ee:	1861      	adds	r1, r4, r1
 80005f0:	f109 30ff 	add.w	r0, r9, #4294967295
 80005f4:	d248      	bcs.n	8000688 <__udivmoddi4+0x2a8>
 80005f6:	458a      	cmp	sl, r1
 80005f8:	d946      	bls.n	8000688 <__udivmoddi4+0x2a8>
 80005fa:	f1a9 0902 	sub.w	r9, r9, #2
 80005fe:	4421      	add	r1, r4
 8000600:	eba1 010a 	sub.w	r1, r1, sl
 8000604:	b2bf      	uxth	r7, r7
 8000606:	fbb1 f0fe 	udiv	r0, r1, lr
 800060a:	fb0e 1110 	mls	r1, lr, r0, r1
 800060e:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 8000612:	fb00 f808 	mul.w	r8, r0, r8
 8000616:	45b8      	cmp	r8, r7
 8000618:	d907      	bls.n	800062a <__udivmoddi4+0x24a>
 800061a:	19e7      	adds	r7, r4, r7
 800061c:	f100 31ff 	add.w	r1, r0, #4294967295
 8000620:	d22e      	bcs.n	8000680 <__udivmoddi4+0x2a0>
 8000622:	45b8      	cmp	r8, r7
 8000624:	d92c      	bls.n	8000680 <__udivmoddi4+0x2a0>
 8000626:	3802      	subs	r0, #2
 8000628:	4427      	add	r7, r4
 800062a:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 800062e:	eba7 0708 	sub.w	r7, r7, r8
 8000632:	fba0 8902 	umull	r8, r9, r0, r2
 8000636:	454f      	cmp	r7, r9
 8000638:	46c6      	mov	lr, r8
 800063a:	4649      	mov	r1, r9
 800063c:	d31a      	bcc.n	8000674 <__udivmoddi4+0x294>
 800063e:	d017      	beq.n	8000670 <__udivmoddi4+0x290>
 8000640:	b15d      	cbz	r5, 800065a <__udivmoddi4+0x27a>
 8000642:	ebb3 020e 	subs.w	r2, r3, lr
 8000646:	eb67 0701 	sbc.w	r7, r7, r1
 800064a:	fa07 fc0c 	lsl.w	ip, r7, ip
 800064e:	40f2      	lsrs	r2, r6
 8000650:	ea4c 0202 	orr.w	r2, ip, r2
 8000654:	40f7      	lsrs	r7, r6
 8000656:	e9c5 2700 	strd	r2, r7, [r5]
 800065a:	2600      	movs	r6, #0
 800065c:	4631      	mov	r1, r6
 800065e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000662:	462e      	mov	r6, r5
 8000664:	4628      	mov	r0, r5
 8000666:	e70b      	b.n	8000480 <__udivmoddi4+0xa0>
 8000668:	4606      	mov	r6, r0
 800066a:	e6e9      	b.n	8000440 <__udivmoddi4+0x60>
 800066c:	4618      	mov	r0, r3
 800066e:	e6fd      	b.n	800046c <__udivmoddi4+0x8c>
 8000670:	4543      	cmp	r3, r8
 8000672:	d2e5      	bcs.n	8000640 <__udivmoddi4+0x260>
 8000674:	ebb8 0e02 	subs.w	lr, r8, r2
 8000678:	eb69 0104 	sbc.w	r1, r9, r4
 800067c:	3801      	subs	r0, #1
 800067e:	e7df      	b.n	8000640 <__udivmoddi4+0x260>
 8000680:	4608      	mov	r0, r1
 8000682:	e7d2      	b.n	800062a <__udivmoddi4+0x24a>
 8000684:	4660      	mov	r0, ip
 8000686:	e78d      	b.n	80005a4 <__udivmoddi4+0x1c4>
 8000688:	4681      	mov	r9, r0
 800068a:	e7b9      	b.n	8000600 <__udivmoddi4+0x220>
 800068c:	4666      	mov	r6, ip
 800068e:	e775      	b.n	800057c <__udivmoddi4+0x19c>
 8000690:	4630      	mov	r0, r6
 8000692:	e74a      	b.n	800052a <__udivmoddi4+0x14a>
 8000694:	f1ac 0c02 	sub.w	ip, ip, #2
 8000698:	4439      	add	r1, r7
 800069a:	e713      	b.n	80004c4 <__udivmoddi4+0xe4>
 800069c:	3802      	subs	r0, #2
 800069e:	443c      	add	r4, r7
 80006a0:	e724      	b.n	80004ec <__udivmoddi4+0x10c>
 80006a2:	bf00      	nop

080006a4 <__aeabi_idiv0>:
 80006a4:	4770      	bx	lr
 80006a6:	bf00      	nop

080006a8 <Fill_Buffer>:
#define WRITE_READ_ADDR     ((uint32_t)0x0000)
uint32_t aTxBuffer[BUFFER_SIZE];
uint32_t aRxBuffer[BUFFER_SIZE];

static void Fill_Buffer(uint32_t *pBuffer, uint32_t uwBufferLength, uint16_t uwOffset)
{
 80006a8:	b480      	push	{r7}
 80006aa:	b087      	sub	sp, #28
 80006ac:	af00      	add	r7, sp, #0
 80006ae:	60f8      	str	r0, [r7, #12]
 80006b0:	60b9      	str	r1, [r7, #8]
 80006b2:	4613      	mov	r3, r2
 80006b4:	80fb      	strh	r3, [r7, #6]
  uint16_t tmpIndex = 0;
 80006b6:	2300      	movs	r3, #0
 80006b8:	82fb      	strh	r3, [r7, #22]

  /* Put in global buffer different values */
  for (tmpIndex = 0; tmpIndex < uwBufferLength; tmpIndex++)
 80006ba:	2300      	movs	r3, #0
 80006bc:	82fb      	strh	r3, [r7, #22]
 80006be:	e00b      	b.n	80006d8 <Fill_Buffer+0x30>
  {
    pBuffer[tmpIndex] = tmpIndex + uwOffset;
 80006c0:	8afa      	ldrh	r2, [r7, #22]
 80006c2:	88fb      	ldrh	r3, [r7, #6]
 80006c4:	18d1      	adds	r1, r2, r3
 80006c6:	8afb      	ldrh	r3, [r7, #22]
 80006c8:	009b      	lsls	r3, r3, #2
 80006ca:	68fa      	ldr	r2, [r7, #12]
 80006cc:	4413      	add	r3, r2
 80006ce:	460a      	mov	r2, r1
 80006d0:	601a      	str	r2, [r3, #0]
  for (tmpIndex = 0; tmpIndex < uwBufferLength; tmpIndex++)
 80006d2:	8afb      	ldrh	r3, [r7, #22]
 80006d4:	3301      	adds	r3, #1
 80006d6:	82fb      	strh	r3, [r7, #22]
 80006d8:	8afb      	ldrh	r3, [r7, #22]
 80006da:	68ba      	ldr	r2, [r7, #8]
 80006dc:	429a      	cmp	r2, r3
 80006de:	d8ef      	bhi.n	80006c0 <Fill_Buffer+0x18>
  }
}
 80006e0:	bf00      	nop
 80006e2:	bf00      	nop
 80006e4:	371c      	adds	r7, #28
 80006e6:	46bd      	mov	sp, r7
 80006e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006ec:	4770      	bx	lr
	...

080006f0 <_write>:
    #endif
  #endif

  #ifdef True_STD
  int _write(int fd, char *str, int len)
  {
 80006f0:	b580      	push	{r7, lr}
 80006f2:	b086      	sub	sp, #24
 80006f4:	af00      	add	r7, sp, #0
 80006f6:	60f8      	str	r0, [r7, #12]
 80006f8:	60b9      	str	r1, [r7, #8]
 80006fa:	607a      	str	r2, [r7, #4]
    for(int i=0; i<len; i++)
 80006fc:	2300      	movs	r3, #0
 80006fe:	617b      	str	r3, [r7, #20]
 8000700:	e00b      	b.n	800071a <_write+0x2a>
    {
      HAL_UART_Transmit(&huart3, (uint8_t *)&str[i], 1, 0xFFFF);
 8000702:	697b      	ldr	r3, [r7, #20]
 8000704:	68ba      	ldr	r2, [r7, #8]
 8000706:	18d1      	adds	r1, r2, r3
 8000708:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800070c:	2201      	movs	r2, #1
 800070e:	4807      	ldr	r0, [pc, #28]	; (800072c <_write+0x3c>)
 8000710:	f004 fc88 	bl	8005024 <HAL_UART_Transmit>
    for(int i=0; i<len; i++)
 8000714:	697b      	ldr	r3, [r7, #20]
 8000716:	3301      	adds	r3, #1
 8000718:	617b      	str	r3, [r7, #20]
 800071a:	697a      	ldr	r2, [r7, #20]
 800071c:	687b      	ldr	r3, [r7, #4]
 800071e:	429a      	cmp	r2, r3
 8000720:	dbef      	blt.n	8000702 <_write+0x12>
    }
    return len;
 8000722:	687b      	ldr	r3, [r7, #4]
  }
 8000724:	4618      	mov	r0, r3
 8000726:	3718      	adds	r7, #24
 8000728:	46bd      	mov	sp, r7
 800072a:	bd80      	pop	{r7, pc}
 800072c:	200008d0 	.word	0x200008d0

08000730 <W6100BusWriteByte>:
	  {
		URX_BUF_Flag = 1;
	  }
 }
void W6100BusWriteByte(uint32_t addr, iodata_t data)
{
 8000730:	b480      	push	{r7}
 8000732:	b083      	sub	sp, #12
 8000734:	af00      	add	r7, sp, #0
 8000736:	6078      	str	r0, [r7, #4]
 8000738:	460b      	mov	r3, r1
 800073a:	70fb      	strb	r3, [r7, #3]
	#if 1	//teddy 210422
	//(*(volatile uint8_t*)(addr)) = (uint8_t)(data);
	(*(__IO uint8_t *)((uint32_t)(addr)) = (data)); 
 800073c:	687b      	ldr	r3, [r7, #4]
 800073e:	78fa      	ldrb	r2, [r7, #3]
 8000740:	701a      	strb	r2, [r3, #0]
	Indata[0] = data;
	//printf("W%x:%x ",addr, data);
	if(HAL_SRAM_Write_8b(&hsram1, (uint32_t *)addr, (uint16_t *)data, 1) != HAL_OK)
		printf("BusWritError \r\n");
	#endif
}
 8000742:	bf00      	nop
 8000744:	370c      	adds	r7, #12
 8000746:	46bd      	mov	sp, r7
 8000748:	f85d 7b04 	ldr.w	r7, [sp], #4
 800074c:	4770      	bx	lr

0800074e <W6100BusReadByte>:

iodata_t W6100BusReadByte(uint32_t addr)
{
 800074e:	b480      	push	{r7}
 8000750:	b083      	sub	sp, #12
 8000752:	af00      	add	r7, sp, #0
 8000754:	6078      	str	r0, [r7, #4]
	#if 1	//teddy 210422
	//return (*((volatile uint8_t*)(addr)));
	return *(__IO uint8_t *)((uint32_t)(addr));
 8000756:	687b      	ldr	r3, [r7, #4]
 8000758:	781b      	ldrb	r3, [r3, #0]
 800075a:	b2db      	uxtb	r3, r3
	if(HAL_SRAM_Read_8b(&hsram1, (uint32_t *)addr, (uint16_t *)result, 1) != HAL_OK)
		printf("BussReadError \r\n");
	printf("R%x:%x ", addr, result[0]);
	return result[0];
	#endif
}
 800075c:	4618      	mov	r0, r3
 800075e:	370c      	adds	r7, #12
 8000760:	46bd      	mov	sp, r7
 8000762:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000766:	4770      	bx	lr

08000768 <W6100CsEnable>:
			printf("BussReadError \r\n");
#endif

}
void W6100CsEnable(void)
{
 8000768:	b480      	push	{r7}
 800076a:	af00      	add	r7, sp, #0
#if 0
	__HAL_LOCK(&hsram1);
	hsram1.State = HAL_SRAM_STATE_BUSY;
#endif
}
 800076c:	bf00      	nop
 800076e:	46bd      	mov	sp, r7
 8000770:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000774:	4770      	bx	lr

08000776 <W6100CsDisable>:

void W6100CsDisable(void)
{
 8000776:	b480      	push	{r7}
 8000778:	af00      	add	r7, sp, #0
#if 0
	__HAL_UNLOCK(&hsram1);
	hsram1.State = HAL_SRAM_STATE_READY;
#endif
}
 800077a:	bf00      	nop
 800077c:	46bd      	mov	sp, r7
 800077e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000782:	4770      	bx	lr

08000784 <W6100Initialze>:

void W6100Initialze(void)
{
 8000784:	b590      	push	{r4, r7, lr}
 8000786:	b087      	sub	sp, #28
 8000788:	af00      	add	r7, sp, #0
#else
	/* Indirect bus method callback registration */
	#if defined BUS_DMA
		reg_wizchip_bus_cbfunc(W6100BusReadByte, W6100BusWriteByte, W6100BusReadBurst, W6100BusWriteBurst);
	#else
		reg_wizchip_bus_cbfunc(W6100BusReadByte, W6100BusWriteByte, 0, 0);
 800078a:	2300      	movs	r3, #0
 800078c:	2200      	movs	r2, #0
 800078e:	491e      	ldr	r1, [pc, #120]	; (8000808 <W6100Initialze+0x84>)
 8000790:	481e      	ldr	r0, [pc, #120]	; (800080c <W6100Initialze+0x88>)
 8000792:	f006 fb19 	bl	8006dc8 <reg_wizchip_bus_cbfunc>
	#endif
		reg_wizchip_cs_cbfunc(W6100CsEnable, W6100CsDisable);
 8000796:	491e      	ldr	r1, [pc, #120]	; (8000810 <W6100Initialze+0x8c>)
 8000798:	481e      	ldr	r0, [pc, #120]	; (8000814 <W6100Initialze+0x90>)
 800079a:	f006 faef 	bl	8006d7c <reg_wizchip_cs_cbfunc>
#endif
		uint8_t temp;
		unsigned char W6100_AdrSet[2][8] = {{2, 2, 2, 2, 2, 2, 2, 2}, {2, 2, 2, 2, 2, 2, 2, 2}};
 800079e:	4b1e      	ldr	r3, [pc, #120]	; (8000818 <W6100Initialze+0x94>)
 80007a0:	1d3c      	adds	r4, r7, #4
 80007a2:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80007a4:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
			{
				printf("Unknown PHY link status.\r\n");
			}
		} while (temp == PHY_LINK_OFF);
	 	#endif
		uint16_t RegTemp = 0;
 80007a8:	2300      	movs	r3, #0
 80007aa:	82fb      	strh	r3, [r7, #22]
		//RegTemp = (uint16_t)WIZCHIP_READ(_CIDR_);
		//printf("CIDR_ = %04x \r\n", RegTemp);	
		RegTemp = getCIDR();
 80007ac:	f04f 40c0 	mov.w	r0, #1610612736	; 0x60000000
 80007b0:	f006 fa10 	bl	8006bd4 <WIZCHIP_READ>
 80007b4:	4603      	mov	r3, r0
 80007b6:	b29b      	uxth	r3, r3
 80007b8:	021b      	lsls	r3, r3, #8
 80007ba:	b29c      	uxth	r4, r3
 80007bc:	4817      	ldr	r0, [pc, #92]	; (800081c <W6100Initialze+0x98>)
 80007be:	f006 fa09 	bl	8006bd4 <WIZCHIP_READ>
 80007c2:	4603      	mov	r3, r0
 80007c4:	b29b      	uxth	r3, r3
 80007c6:	4423      	add	r3, r4
 80007c8:	82fb      	strh	r3, [r7, #22]
		printf("CIDR = %04x \r\n", RegTemp);
 80007ca:	8afb      	ldrh	r3, [r7, #22]
 80007cc:	4619      	mov	r1, r3
 80007ce:	4814      	ldr	r0, [pc, #80]	; (8000820 <W6100Initialze+0x9c>)
 80007d0:	f006 fb72 	bl	8006eb8 <iprintf>
		RegTemp = getVER();
 80007d4:	4813      	ldr	r0, [pc, #76]	; (8000824 <W6100Initialze+0xa0>)
 80007d6:	f006 f9fd 	bl	8006bd4 <WIZCHIP_READ>
 80007da:	4603      	mov	r3, r0
 80007dc:	b29b      	uxth	r3, r3
 80007de:	021b      	lsls	r3, r3, #8
 80007e0:	b29c      	uxth	r4, r3
 80007e2:	4811      	ldr	r0, [pc, #68]	; (8000828 <W6100Initialze+0xa4>)
 80007e4:	f006 f9f6 	bl	8006bd4 <WIZCHIP_READ>
 80007e8:	4603      	mov	r3, r0
 80007ea:	b29b      	uxth	r3, r3
 80007ec:	4423      	add	r3, r4
 80007ee:	82fb      	strh	r3, [r7, #22]
		printf("VER = %04x \r\n", RegTemp);
 80007f0:	8afb      	ldrh	r3, [r7, #22]
 80007f2:	4619      	mov	r1, r3
 80007f4:	480d      	ldr	r0, [pc, #52]	; (800082c <W6100Initialze+0xa8>)
 80007f6:	f006 fb5f 	bl	8006eb8 <iprintf>
		printf("PHY OK.\r\n");
 80007fa:	480d      	ldr	r0, [pc, #52]	; (8000830 <W6100Initialze+0xac>)
 80007fc:	f006 fbe2 	bl	8006fc4 <puts>
	
	
}
 8000800:	bf00      	nop
 8000802:	371c      	adds	r7, #28
 8000804:	46bd      	mov	sp, r7
 8000806:	bd90      	pop	{r4, r7, pc}
 8000808:	08000731 	.word	0x08000731
 800080c:	0800074f 	.word	0x0800074f
 8000810:	08000777 	.word	0x08000777
 8000814:	08000769 	.word	0x08000769
 8000818:	08007e94 	.word	0x08007e94
 800081c:	60000100 	.word	0x60000100
 8000820:	08007e68 	.word	0x08007e68
 8000824:	60000200 	.word	0x60000200
 8000828:	60000300 	.word	0x60000300
 800082c:	08007e78 	.word	0x08007e78
 8000830:	08007e88 	.word	0x08007e88

08000834 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000834:	b580      	push	{r7, lr}
 8000836:	b082      	sub	sp, #8
 8000838:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 1 */
  uint8_t temp1 = 0, temp2 = 0, *temp=NULL;
 800083a:	2300      	movs	r3, #0
 800083c:	71fb      	strb	r3, [r7, #7]
 800083e:	2300      	movs	r3, #0
 8000840:	71bb      	strb	r3, [r7, #6]
 8000842:	2300      	movs	r3, #0
 8000844:	603b      	str	r3, [r7, #0]
  temp = (volatile uint8_t*)(0x60000003);
 8000846:	4b31      	ldr	r3, [pc, #196]	; (800090c <main+0xd8>)
 8000848:	603b      	str	r3, [r7, #0]
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800084a:	f000 fdcb 	bl	80013e4 <HAL_Init>
  /* USER CODE BEGIN Init */
  
  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800084e:	f000 f86d 	bl	800092c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000852:	f000 fa0d 	bl	8000c70 <MX_GPIO_Init>
  MX_USART3_UART_Init();
 8000856:	f000 f951 	bl	8000afc <MX_USART3_UART_Init>
  MX_USB_OTG_HS_USB_Init();
 800085a:	f000 f99b 	bl	8000b94 <MX_USB_OTG_HS_USB_Init>
  MX_FMC_Init();
 800085e:	f000 f9a1 	bl	8000ba4 <MX_FMC_Init>
  MX_DMA2D_Init();
 8000862:	f000 f911 	bl	8000a88 <MX_DMA2D_Init>
  /* USER CODE BEGIN 2 */
  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_11|GPIO_PIN_3, GPIO_PIN_SET);
 8000866:	2201      	movs	r2, #1
 8000868:	f640 0108 	movw	r1, #2056	; 0x808
 800086c:	4828      	ldr	r0, [pc, #160]	; (8000910 <main+0xdc>)
 800086e:	f001 ffad 	bl	80027cc <HAL_GPIO_WritePin>
  HAL_Delay(100);
 8000872:	2064      	movs	r0, #100	; 0x64
 8000874:	f000 fe48 	bl	8001508 <HAL_Delay>
  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_11, GPIO_PIN_RESET);
 8000878:	2200      	movs	r2, #0
 800087a:	f44f 6100 	mov.w	r1, #2048	; 0x800
 800087e:	4824      	ldr	r0, [pc, #144]	; (8000910 <main+0xdc>)
 8000880:	f001 ffa4 	bl	80027cc <HAL_GPIO_WritePin>
  HAL_Delay(500);
 8000884:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8000888:	f000 fe3e 	bl	8001508 <HAL_Delay>
  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_11, GPIO_PIN_SET);
 800088c:	2201      	movs	r2, #1
 800088e:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8000892:	481f      	ldr	r0, [pc, #124]	; (8000910 <main+0xdc>)
 8000894:	f001 ff9a 	bl	80027cc <HAL_GPIO_WritePin>
  HAL_Delay(500);
 8000898:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 800089c:	f000 fe34 	bl	8001508 <HAL_Delay>
printf("Hello Start!!\r\n");
 80008a0:	481c      	ldr	r0, [pc, #112]	; (8000914 <main+0xe0>)
 80008a2:	f006 fb8f 	bl	8006fc4 <puts>
  Fill_Buffer(aTxBuffer, BUFFER_SIZE, 0x0000);
 80008a6:	2200      	movs	r2, #0
 80008a8:	2102      	movs	r1, #2
 80008aa:	481b      	ldr	r0, [pc, #108]	; (8000918 <main+0xe4>)
 80008ac:	f7ff fefc 	bl	80006a8 <Fill_Buffer>
  //HAL_SRAM_Write_16b(&hsram1, (uint32_t *)(SRAM_BANK_ADDR + WRITE_READ_ADDR), (uint16_t *)aTxBuffer, BUFFER_SIZE*2);
  //HAL_SRAM_Write_8b(&hsram1, (uint32_t *)(SRAM_BANK_ADDR + WRITE_READ_ADDR), (uint8_t *)aTxBuffer, BUFFER_SIZE);
  printf("Hello Start!!\r\n");
 80008b0:	4818      	ldr	r0, [pc, #96]	; (8000914 <main+0xe0>)
 80008b2:	f006 fb87 	bl	8006fc4 <puts>
  //(*(volatile uint8_t*)(0x60000000)) = (uint8_t)(0x00);
  (*(volatile uint8_t*)(0x60000001)) = (uint8_t)(0x03);
  //(*(volatile uint8_t*)(0x60000002)) = (uint8_t)(0x00);
  temp2 = (*(volatile uint8_t*)(0x60000003));
#else
  (*(volatile uint8_t*)(0x60000000)) = 0x00;
 80008b6:	f04f 43c0 	mov.w	r3, #1610612736	; 0x60000000
 80008ba:	2200      	movs	r2, #0
 80008bc:	701a      	strb	r2, [r3, #0]

  //__HAL_LOCK(&hsram1);
	//  hsram1.State = HAL_SRAM_STATE_BUSY;

	//(*(volatile uint32_t*)(0x60000000)) = (0x00<<16)|(0x02<<8)|(0x00);
	(*(volatile uint8_t*)(0x60000000)) = (uint8_t)(0x00);
 80008be:	f04f 43c0 	mov.w	r3, #1610612736	; 0x60000000
 80008c2:	2200      	movs	r2, #0
 80008c4:	701a      	strb	r2, [r3, #0]
    (*(volatile uint8_t*)(0x60000001)) = (uint8_t)(0x02);
 80008c6:	4b15      	ldr	r3, [pc, #84]	; (800091c <main+0xe8>)
 80008c8:	2202      	movs	r2, #2
 80008ca:	701a      	strb	r2, [r3, #0]
    (*(volatile uint8_t*)(0x60000002)) = (uint8_t)(0x00);
 80008cc:	4b14      	ldr	r3, [pc, #80]	; (8000920 <main+0xec>)
 80008ce:	2200      	movs	r2, #0
 80008d0:	701a      	strb	r2, [r3, #0]
    temp1 = (*(volatile uint8_t*)(0x60000003));
 80008d2:	4b0e      	ldr	r3, [pc, #56]	; (800090c <main+0xd8>)
 80008d4:	781b      	ldrb	r3, [r3, #0]
 80008d6:	71fb      	strb	r3, [r7, #7]
//	hsram1.State = HAL_SRAM_STATE_READY;
		
	//__HAL_LOCK(&hsram1);
	//hsram1.State = HAL_SRAM_STATE_BUSY;
	//(*(volatile uint32_t*)(0x60000000)) = (0x00<<16)|(0x03<<8)|(0x00);
    (*(volatile uint8_t*)(0x60000000)) = (uint8_t)(0x00);
 80008d8:	f04f 43c0 	mov.w	r3, #1610612736	; 0x60000000
 80008dc:	2200      	movs	r2, #0
 80008de:	701a      	strb	r2, [r3, #0]
    (*(volatile uint8_t*)(0x60000001)) = (uint8_t)(0x03);
 80008e0:	4b0e      	ldr	r3, [pc, #56]	; (800091c <main+0xe8>)
 80008e2:	2203      	movs	r2, #3
 80008e4:	701a      	strb	r2, [r3, #0]
    (*(volatile uint8_t*)(0x60000002)) = (uint8_t)(0x00);
 80008e6:	4b0e      	ldr	r3, [pc, #56]	; (8000920 <main+0xec>)
 80008e8:	2200      	movs	r2, #0
 80008ea:	701a      	strb	r2, [r3, #0]
    temp2 = (*(volatile uint8_t*)(0x60000003));
 80008ec:	4b07      	ldr	r3, [pc, #28]	; (800090c <main+0xd8>)
 80008ee:	781b      	ldrb	r3, [r3, #0]
 80008f0:	71bb      	strb	r3, [r7, #6]
	//temp2 = *temp;
	//__HAL_UNLOCK(&hsram1);
	//hsram1.State = HAL_SRAM_STATE_READY;
#endif
  printf("VER = 0x%02x%02x \r\n", temp1, temp2);
 80008f2:	79fb      	ldrb	r3, [r7, #7]
 80008f4:	79ba      	ldrb	r2, [r7, #6]
 80008f6:	4619      	mov	r1, r3
 80008f8:	480a      	ldr	r0, [pc, #40]	; (8000924 <main+0xf0>)
 80008fa:	f006 fadd 	bl	8006eb8 <iprintf>
  W6100Initialze();
 80008fe:	f7ff ff41 	bl	8000784 <W6100Initialze>
  //ctlnetwork(CN_SET_NETINFO,&gWIZNETINFO);
  printf("Register value after W6100 initialize!\r\n");
 8000902:	4809      	ldr	r0, [pc, #36]	; (8000928 <main+0xf4>)
 8000904:	f006 fb5e 	bl	8006fc4 <puts>
  //print_network_information();
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000908:	e7fe      	b.n	8000908 <main+0xd4>
 800090a:	bf00      	nop
 800090c:	60000003 	.word	0x60000003
 8000910:	58020c00 	.word	0x58020c00
 8000914:	08007ea4 	.word	0x08007ea4
 8000918:	2000241c 	.word	0x2000241c
 800091c:	60000001 	.word	0x60000001
 8000920:	60000002 	.word	0x60000002
 8000924:	08007eb4 	.word	0x08007eb4
 8000928:	08007ec8 	.word	0x08007ec8

0800092c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800092c:	b580      	push	{r7, lr}
 800092e:	b0a4      	sub	sp, #144	; 0x90
 8000930:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000932:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8000936:	224c      	movs	r2, #76	; 0x4c
 8000938:	2100      	movs	r1, #0
 800093a:	4618      	mov	r0, r3
 800093c:	f006 fab4 	bl	8006ea8 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000940:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000944:	2220      	movs	r2, #32
 8000946:	2100      	movs	r1, #0
 8000948:	4618      	mov	r0, r3
 800094a:	f006 faad 	bl	8006ea8 <memset>
  RCC_CRSInitTypeDef RCC_CRSInitStruct = {0};
 800094e:	f107 030c 	add.w	r3, r7, #12
 8000952:	2200      	movs	r2, #0
 8000954:	601a      	str	r2, [r3, #0]
 8000956:	605a      	str	r2, [r3, #4]
 8000958:	609a      	str	r2, [r3, #8]
 800095a:	60da      	str	r2, [r3, #12]
 800095c:	611a      	str	r2, [r3, #16]
 800095e:	615a      	str	r2, [r3, #20]

  /** Supply configuration update enable
  */
  HAL_PWREx_ConfigSupply(PWR_LDO_SUPPLY);
 8000960:	2002      	movs	r0, #2
 8000962:	f002 f849 	bl	80029f8 <HAL_PWREx_ConfigSupply>
  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 8000966:	2300      	movs	r3, #0
 8000968:	60bb      	str	r3, [r7, #8]
 800096a:	4b45      	ldr	r3, [pc, #276]	; (8000a80 <SystemClock_Config+0x154>)
 800096c:	699b      	ldr	r3, [r3, #24]
 800096e:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8000972:	4a43      	ldr	r2, [pc, #268]	; (8000a80 <SystemClock_Config+0x154>)
 8000974:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000978:	6193      	str	r3, [r2, #24]
 800097a:	4b41      	ldr	r3, [pc, #260]	; (8000a80 <SystemClock_Config+0x154>)
 800097c:	699b      	ldr	r3, [r3, #24]
 800097e:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8000982:	60bb      	str	r3, [r7, #8]
 8000984:	68bb      	ldr	r3, [r7, #8]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 8000986:	bf00      	nop
 8000988:	4b3d      	ldr	r3, [pc, #244]	; (8000a80 <SystemClock_Config+0x154>)
 800098a:	699b      	ldr	r3, [r3, #24]
 800098c:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8000990:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8000994:	d1f8      	bne.n	8000988 <SystemClock_Config+0x5c>
  /** Macro to configure the PLL clock source
  */
  __HAL_RCC_PLL_PLLSOURCE_CONFIG(RCC_PLLSOURCE_CSI);
 8000996:	4b3b      	ldr	r3, [pc, #236]	; (8000a84 <SystemClock_Config+0x158>)
 8000998:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800099a:	f023 0303 	bic.w	r3, r3, #3
 800099e:	4a39      	ldr	r2, [pc, #228]	; (8000a84 <SystemClock_Config+0x158>)
 80009a0:	f043 0301 	orr.w	r3, r3, #1
 80009a4:	6293      	str	r3, [r2, #40]	; 0x28
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI48|RCC_OSCILLATORTYPE_CSI;
 80009a6:	2330      	movs	r3, #48	; 0x30
 80009a8:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.HSI48State = RCC_HSI48_ON;
 80009aa:	2301      	movs	r3, #1
 80009ac:	65fb      	str	r3, [r7, #92]	; 0x5c
  RCC_OscInitStruct.CSIState = RCC_CSI_ON;
 80009ae:	2380      	movs	r3, #128	; 0x80
 80009b0:	663b      	str	r3, [r7, #96]	; 0x60
  RCC_OscInitStruct.CSICalibrationValue = 16;
 80009b2:	2310      	movs	r3, #16
 80009b4:	667b      	str	r3, [r7, #100]	; 0x64
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80009b6:	2302      	movs	r3, #2
 80009b8:	66bb      	str	r3, [r7, #104]	; 0x68
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_CSI;
 80009ba:	2301      	movs	r3, #1
 80009bc:	66fb      	str	r3, [r7, #108]	; 0x6c
  RCC_OscInitStruct.PLL.PLLM = 4;
 80009be:	2304      	movs	r3, #4
 80009c0:	673b      	str	r3, [r7, #112]	; 0x70
  RCC_OscInitStruct.PLL.PLLN = 150;
 80009c2:	2396      	movs	r3, #150	; 0x96
 80009c4:	677b      	str	r3, [r7, #116]	; 0x74
  RCC_OscInitStruct.PLL.PLLP = 1;
 80009c6:	2301      	movs	r3, #1
 80009c8:	67bb      	str	r3, [r7, #120]	; 0x78
  RCC_OscInitStruct.PLL.PLLQ = 6;
 80009ca:	2306      	movs	r3, #6
 80009cc:	67fb      	str	r3, [r7, #124]	; 0x7c
  RCC_OscInitStruct.PLL.PLLR = 2;
 80009ce:	2302      	movs	r3, #2
 80009d0:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
  RCC_OscInitStruct.PLL.PLLRGE = RCC_PLL1VCIRANGE_0;
 80009d4:	2300      	movs	r3, #0
 80009d6:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  RCC_OscInitStruct.PLL.PLLVCOSEL = RCC_PLL1VCOMEDIUM;
 80009da:	2302      	movs	r3, #2
 80009dc:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  RCC_OscInitStruct.PLL.PLLFRACN = 0;
 80009e0:	2300      	movs	r3, #0
 80009e2:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80009e6:	f107 0344 	add.w	r3, r7, #68	; 0x44
 80009ea:	4618      	mov	r0, r3
 80009ec:	f002 f83e 	bl	8002a6c <HAL_RCC_OscConfig>
 80009f0:	4603      	mov	r3, r0
 80009f2:	2b00      	cmp	r3, #0
 80009f4:	d001      	beq.n	80009fa <SystemClock_Config+0xce>
  {
    Error_Handler();
 80009f6:	f000 fa2b 	bl	8000e50 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80009fa:	233f      	movs	r3, #63	; 0x3f
 80009fc:	627b      	str	r3, [r7, #36]	; 0x24
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
                              |RCC_CLOCKTYPE_D3PCLK1|RCC_CLOCKTYPE_D1PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80009fe:	2303      	movs	r3, #3
 8000a00:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV1;
 8000a02:	2300      	movs	r3, #0
 8000a04:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV2;
 8000a06:	2308      	movs	r3, #8
 8000a08:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_ClkInitStruct.APB3CLKDivider = RCC_APB3_DIV2;
 8000a0a:	2340      	movs	r3, #64	; 0x40
 8000a0c:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV2;
 8000a0e:	2340      	movs	r3, #64	; 0x40
 8000a10:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_ClkInitStruct.APB2CLKDivider = RCC_APB2_DIV2;
 8000a12:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000a16:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_ClkInitStruct.APB4CLKDivider = RCC_APB4_DIV2;
 8000a18:	2340      	movs	r3, #64	; 0x40
 8000a1a:	643b      	str	r3, [r7, #64]	; 0x40

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000a1c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000a20:	2102      	movs	r1, #2
 8000a22:	4618      	mov	r0, r3
 8000a24:	f002 fbb0 	bl	8003188 <HAL_RCC_ClockConfig>
 8000a28:	4603      	mov	r3, r0
 8000a2a:	2b00      	cmp	r3, #0
 8000a2c:	d001      	beq.n	8000a32 <SystemClock_Config+0x106>
  {
    Error_Handler();
 8000a2e:	f000 fa0f 	bl	8000e50 <Error_Handler>
  }
  /** Enable the SYSCFG APB clock
  */
  __HAL_RCC_CRS_CLK_ENABLE();
 8000a32:	4b14      	ldr	r3, [pc, #80]	; (8000a84 <SystemClock_Config+0x158>)
 8000a34:	f8d3 30ec 	ldr.w	r3, [r3, #236]	; 0xec
 8000a38:	4a12      	ldr	r2, [pc, #72]	; (8000a84 <SystemClock_Config+0x158>)
 8000a3a:	f043 0302 	orr.w	r3, r3, #2
 8000a3e:	f8c2 30ec 	str.w	r3, [r2, #236]	; 0xec
 8000a42:	4b10      	ldr	r3, [pc, #64]	; (8000a84 <SystemClock_Config+0x158>)
 8000a44:	f8d3 30ec 	ldr.w	r3, [r3, #236]	; 0xec
 8000a48:	f003 0302 	and.w	r3, r3, #2
 8000a4c:	607b      	str	r3, [r7, #4]
 8000a4e:	687b      	ldr	r3, [r7, #4]
  /** Configures CRS
  */
  RCC_CRSInitStruct.Prescaler = RCC_CRS_SYNC_DIV1;
 8000a50:	2300      	movs	r3, #0
 8000a52:	60fb      	str	r3, [r7, #12]
  RCC_CRSInitStruct.Source = RCC_CRS_SYNC_SOURCE_USB2;
 8000a54:	f04f 5340 	mov.w	r3, #805306368	; 0x30000000
 8000a58:	613b      	str	r3, [r7, #16]
  RCC_CRSInitStruct.Polarity = RCC_CRS_SYNC_POLARITY_RISING;
 8000a5a:	2300      	movs	r3, #0
 8000a5c:	617b      	str	r3, [r7, #20]
  RCC_CRSInitStruct.ReloadValue = __HAL_RCC_CRS_RELOADVALUE_CALCULATE(48000000,1000);
 8000a5e:	f64b 337f 	movw	r3, #47999	; 0xbb7f
 8000a62:	61bb      	str	r3, [r7, #24]
  RCC_CRSInitStruct.ErrorLimitValue = 34;
 8000a64:	2322      	movs	r3, #34	; 0x22
 8000a66:	61fb      	str	r3, [r7, #28]
  RCC_CRSInitStruct.HSI48CalibrationValue = 32;
 8000a68:	2320      	movs	r3, #32
 8000a6a:	623b      	str	r3, [r7, #32]

  HAL_RCCEx_CRSConfig(&RCC_CRSInitStruct);
 8000a6c:	f107 030c 	add.w	r3, r7, #12
 8000a70:	4618      	mov	r0, r3
 8000a72:	f004 f8cd 	bl	8004c10 <HAL_RCCEx_CRSConfig>
}
 8000a76:	bf00      	nop
 8000a78:	3790      	adds	r7, #144	; 0x90
 8000a7a:	46bd      	mov	sp, r7
 8000a7c:	bd80      	pop	{r7, pc}
 8000a7e:	bf00      	nop
 8000a80:	58024800 	.word	0x58024800
 8000a84:	58024400 	.word	0x58024400

08000a88 <MX_DMA2D_Init>:
  * @brief DMA2D Initialization Function
  * @param None
  * @retval None
  */
static void MX_DMA2D_Init(void)
{
 8000a88:	b580      	push	{r7, lr}
 8000a8a:	af00      	add	r7, sp, #0
  /* USER CODE END DMA2D_Init 0 */

  /* USER CODE BEGIN DMA2D_Init 1 */

  /* USER CODE END DMA2D_Init 1 */
  hdma2d.Instance = DMA2D;
 8000a8c:	4b19      	ldr	r3, [pc, #100]	; (8000af4 <MX_DMA2D_Init+0x6c>)
 8000a8e:	4a1a      	ldr	r2, [pc, #104]	; (8000af8 <MX_DMA2D_Init+0x70>)
 8000a90:	601a      	str	r2, [r3, #0]
  hdma2d.Init.Mode = DMA2D_M2M;
 8000a92:	4b18      	ldr	r3, [pc, #96]	; (8000af4 <MX_DMA2D_Init+0x6c>)
 8000a94:	2200      	movs	r2, #0
 8000a96:	605a      	str	r2, [r3, #4]
  hdma2d.Init.ColorMode = DMA2D_OUTPUT_ARGB8888;
 8000a98:	4b16      	ldr	r3, [pc, #88]	; (8000af4 <MX_DMA2D_Init+0x6c>)
 8000a9a:	2200      	movs	r2, #0
 8000a9c:	609a      	str	r2, [r3, #8]
  hdma2d.Init.OutputOffset = 0;
 8000a9e:	4b15      	ldr	r3, [pc, #84]	; (8000af4 <MX_DMA2D_Init+0x6c>)
 8000aa0:	2200      	movs	r2, #0
 8000aa2:	60da      	str	r2, [r3, #12]
  hdma2d.LayerCfg[1].InputOffset = 0;
 8000aa4:	4b13      	ldr	r3, [pc, #76]	; (8000af4 <MX_DMA2D_Init+0x6c>)
 8000aa6:	2200      	movs	r2, #0
 8000aa8:	645a      	str	r2, [r3, #68]	; 0x44
  hdma2d.LayerCfg[1].InputColorMode = DMA2D_INPUT_ARGB8888;
 8000aaa:	4b12      	ldr	r3, [pc, #72]	; (8000af4 <MX_DMA2D_Init+0x6c>)
 8000aac:	2200      	movs	r2, #0
 8000aae:	649a      	str	r2, [r3, #72]	; 0x48
  hdma2d.LayerCfg[1].AlphaMode = DMA2D_NO_MODIF_ALPHA;
 8000ab0:	4b10      	ldr	r3, [pc, #64]	; (8000af4 <MX_DMA2D_Init+0x6c>)
 8000ab2:	2200      	movs	r2, #0
 8000ab4:	64da      	str	r2, [r3, #76]	; 0x4c
  hdma2d.LayerCfg[1].InputAlpha = 0;
 8000ab6:	4b0f      	ldr	r3, [pc, #60]	; (8000af4 <MX_DMA2D_Init+0x6c>)
 8000ab8:	2200      	movs	r2, #0
 8000aba:	651a      	str	r2, [r3, #80]	; 0x50
  hdma2d.LayerCfg[1].AlphaInverted = DMA2D_REGULAR_ALPHA;
 8000abc:	4b0d      	ldr	r3, [pc, #52]	; (8000af4 <MX_DMA2D_Init+0x6c>)
 8000abe:	2200      	movs	r2, #0
 8000ac0:	655a      	str	r2, [r3, #84]	; 0x54
  hdma2d.LayerCfg[1].RedBlueSwap = DMA2D_RB_REGULAR;
 8000ac2:	4b0c      	ldr	r3, [pc, #48]	; (8000af4 <MX_DMA2D_Init+0x6c>)
 8000ac4:	2200      	movs	r2, #0
 8000ac6:	659a      	str	r2, [r3, #88]	; 0x58
  hdma2d.LayerCfg[1].ChromaSubSampling = DMA2D_NO_CSS;
 8000ac8:	4b0a      	ldr	r3, [pc, #40]	; (8000af4 <MX_DMA2D_Init+0x6c>)
 8000aca:	2200      	movs	r2, #0
 8000acc:	65da      	str	r2, [r3, #92]	; 0x5c
  if (HAL_DMA2D_Init(&hdma2d) != HAL_OK)
 8000ace:	4809      	ldr	r0, [pc, #36]	; (8000af4 <MX_DMA2D_Init+0x6c>)
 8000ad0:	f001 fbbc 	bl	800224c <HAL_DMA2D_Init>
 8000ad4:	4603      	mov	r3, r0
 8000ad6:	2b00      	cmp	r3, #0
 8000ad8:	d001      	beq.n	8000ade <MX_DMA2D_Init+0x56>
  {
    Error_Handler();
 8000ada:	f000 f9b9 	bl	8000e50 <Error_Handler>
  }
  if (HAL_DMA2D_ConfigLayer(&hdma2d, 1) != HAL_OK)
 8000ade:	2101      	movs	r1, #1
 8000ae0:	4804      	ldr	r0, [pc, #16]	; (8000af4 <MX_DMA2D_Init+0x6c>)
 8000ae2:	f001 fc17 	bl	8002314 <HAL_DMA2D_ConfigLayer>
 8000ae6:	4603      	mov	r3, r0
 8000ae8:	2b00      	cmp	r3, #0
 8000aea:	d001      	beq.n	8000af0 <MX_DMA2D_Init+0x68>
  {
    Error_Handler();
 8000aec:	f000 f9b0 	bl	8000e50 <Error_Handler>
  }
  /* USER CODE BEGIN DMA2D_Init 2 */

  /* USER CODE END DMA2D_Init 2 */

}
 8000af0:	bf00      	nop
 8000af2:	bd80      	pop	{r7, pc}
 8000af4:	200017b4 	.word	0x200017b4
 8000af8:	52001000 	.word	0x52001000

08000afc <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 8000afc:	b580      	push	{r7, lr}
 8000afe:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8000b00:	4b22      	ldr	r3, [pc, #136]	; (8000b8c <MX_USART3_UART_Init+0x90>)
 8000b02:	4a23      	ldr	r2, [pc, #140]	; (8000b90 <MX_USART3_UART_Init+0x94>)
 8000b04:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 8000b06:	4b21      	ldr	r3, [pc, #132]	; (8000b8c <MX_USART3_UART_Init+0x90>)
 8000b08:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000b0c:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8000b0e:	4b1f      	ldr	r3, [pc, #124]	; (8000b8c <MX_USART3_UART_Init+0x90>)
 8000b10:	2200      	movs	r2, #0
 8000b12:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8000b14:	4b1d      	ldr	r3, [pc, #116]	; (8000b8c <MX_USART3_UART_Init+0x90>)
 8000b16:	2200      	movs	r2, #0
 8000b18:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8000b1a:	4b1c      	ldr	r3, [pc, #112]	; (8000b8c <MX_USART3_UART_Init+0x90>)
 8000b1c:	2200      	movs	r2, #0
 8000b1e:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8000b20:	4b1a      	ldr	r3, [pc, #104]	; (8000b8c <MX_USART3_UART_Init+0x90>)
 8000b22:	220c      	movs	r2, #12
 8000b24:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000b26:	4b19      	ldr	r3, [pc, #100]	; (8000b8c <MX_USART3_UART_Init+0x90>)
 8000b28:	2200      	movs	r2, #0
 8000b2a:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8000b2c:	4b17      	ldr	r3, [pc, #92]	; (8000b8c <MX_USART3_UART_Init+0x90>)
 8000b2e:	2200      	movs	r2, #0
 8000b30:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000b32:	4b16      	ldr	r3, [pc, #88]	; (8000b8c <MX_USART3_UART_Init+0x90>)
 8000b34:	2200      	movs	r2, #0
 8000b36:	621a      	str	r2, [r3, #32]
  huart3.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8000b38:	4b14      	ldr	r3, [pc, #80]	; (8000b8c <MX_USART3_UART_Init+0x90>)
 8000b3a:	2200      	movs	r2, #0
 8000b3c:	625a      	str	r2, [r3, #36]	; 0x24
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000b3e:	4b13      	ldr	r3, [pc, #76]	; (8000b8c <MX_USART3_UART_Init+0x90>)
 8000b40:	2200      	movs	r2, #0
 8000b42:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8000b44:	4811      	ldr	r0, [pc, #68]	; (8000b8c <MX_USART3_UART_Init+0x90>)
 8000b46:	f004 fa1d 	bl	8004f84 <HAL_UART_Init>
 8000b4a:	4603      	mov	r3, r0
 8000b4c:	2b00      	cmp	r3, #0
 8000b4e:	d001      	beq.n	8000b54 <MX_USART3_UART_Init+0x58>
  {
    Error_Handler();
 8000b50:	f000 f97e 	bl	8000e50 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart3, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000b54:	2100      	movs	r1, #0
 8000b56:	480d      	ldr	r0, [pc, #52]	; (8000b8c <MX_USART3_UART_Init+0x90>)
 8000b58:	f005 fe59 	bl	800680e <HAL_UARTEx_SetTxFifoThreshold>
 8000b5c:	4603      	mov	r3, r0
 8000b5e:	2b00      	cmp	r3, #0
 8000b60:	d001      	beq.n	8000b66 <MX_USART3_UART_Init+0x6a>
  {
    Error_Handler();
 8000b62:	f000 f975 	bl	8000e50 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart3, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000b66:	2100      	movs	r1, #0
 8000b68:	4808      	ldr	r0, [pc, #32]	; (8000b8c <MX_USART3_UART_Init+0x90>)
 8000b6a:	f005 fe8e 	bl	800688a <HAL_UARTEx_SetRxFifoThreshold>
 8000b6e:	4603      	mov	r3, r0
 8000b70:	2b00      	cmp	r3, #0
 8000b72:	d001      	beq.n	8000b78 <MX_USART3_UART_Init+0x7c>
  {
    Error_Handler();
 8000b74:	f000 f96c 	bl	8000e50 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart3) != HAL_OK)
 8000b78:	4804      	ldr	r0, [pc, #16]	; (8000b8c <MX_USART3_UART_Init+0x90>)
 8000b7a:	f005 fe0f 	bl	800679c <HAL_UARTEx_DisableFifoMode>
 8000b7e:	4603      	mov	r3, r0
 8000b80:	2b00      	cmp	r3, #0
 8000b82:	d001      	beq.n	8000b88 <MX_USART3_UART_Init+0x8c>
  {
    Error_Handler();
 8000b84:	f000 f964 	bl	8000e50 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8000b88:	bf00      	nop
 8000b8a:	bd80      	pop	{r7, pc}
 8000b8c:	200008d0 	.word	0x200008d0
 8000b90:	40004800 	.word	0x40004800

08000b94 <MX_USB_OTG_HS_USB_Init>:
  * @brief USB_OTG_HS Initialization Function
  * @param None
  * @retval None
  */
static void MX_USB_OTG_HS_USB_Init(void)
{
 8000b94:	b480      	push	{r7}
 8000b96:	af00      	add	r7, sp, #0
  /* USER CODE END USB_OTG_HS_Init 1 */
  /* USER CODE BEGIN USB_OTG_HS_Init 2 */

  /* USER CODE END USB_OTG_HS_Init 2 */

}
 8000b98:	bf00      	nop
 8000b9a:	46bd      	mov	sp, r7
 8000b9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ba0:	4770      	bx	lr
	...

08000ba4 <MX_FMC_Init>:

/* FMC initialization function */
static void MX_FMC_Init(void)
{
 8000ba4:	b580      	push	{r7, lr}
 8000ba6:	b088      	sub	sp, #32
 8000ba8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN FMC_Init 0 */

  /* USER CODE END FMC_Init 0 */

  FMC_NORSRAM_TimingTypeDef Timing = {0};
 8000baa:	1d3b      	adds	r3, r7, #4
 8000bac:	2200      	movs	r2, #0
 8000bae:	601a      	str	r2, [r3, #0]
 8000bb0:	605a      	str	r2, [r3, #4]
 8000bb2:	609a      	str	r2, [r3, #8]
 8000bb4:	60da      	str	r2, [r3, #12]
 8000bb6:	611a      	str	r2, [r3, #16]
 8000bb8:	615a      	str	r2, [r3, #20]
 8000bba:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN FMC_Init 1 */
  hnor1.CommandSet = (uint16_t)0x0001;
 8000bbc:	4b29      	ldr	r3, [pc, #164]	; (8000c64 <MX_FMC_Init+0xc0>)
 8000bbe:	2201      	movs	r2, #1
 8000bc0:	649a      	str	r2, [r3, #72]	; 0x48
  /* USER CODE END FMC_Init 1 */

  /** Perform the NOR1 memory initialization sequence
  */
  hnor1.Instance = FMC_NORSRAM_DEVICE;
 8000bc2:	4b28      	ldr	r3, [pc, #160]	; (8000c64 <MX_FMC_Init+0xc0>)
 8000bc4:	4a28      	ldr	r2, [pc, #160]	; (8000c68 <MX_FMC_Init+0xc4>)
 8000bc6:	601a      	str	r2, [r3, #0]
  hnor1.Extended = FMC_NORSRAM_EXTENDED_DEVICE;
 8000bc8:	4b26      	ldr	r3, [pc, #152]	; (8000c64 <MX_FMC_Init+0xc0>)
 8000bca:	4a28      	ldr	r2, [pc, #160]	; (8000c6c <MX_FMC_Init+0xc8>)
 8000bcc:	605a      	str	r2, [r3, #4]
  /* hnor1.Init */
  hnor1.Init.NSBank = FMC_NORSRAM_BANK1;
 8000bce:	4b25      	ldr	r3, [pc, #148]	; (8000c64 <MX_FMC_Init+0xc0>)
 8000bd0:	2200      	movs	r2, #0
 8000bd2:	609a      	str	r2, [r3, #8]
  hnor1.Init.DataAddressMux = FMC_DATA_ADDRESS_MUX_DISABLE;
 8000bd4:	4b23      	ldr	r3, [pc, #140]	; (8000c64 <MX_FMC_Init+0xc0>)
 8000bd6:	2200      	movs	r2, #0
 8000bd8:	60da      	str	r2, [r3, #12]
  hnor1.Init.MemoryType = FMC_MEMORY_TYPE_NOR;
 8000bda:	4b22      	ldr	r3, [pc, #136]	; (8000c64 <MX_FMC_Init+0xc0>)
 8000bdc:	2208      	movs	r2, #8
 8000bde:	611a      	str	r2, [r3, #16]
  hnor1.Init.MemoryDataWidth = FMC_NORSRAM_MEM_BUS_WIDTH_8;
 8000be0:	4b20      	ldr	r3, [pc, #128]	; (8000c64 <MX_FMC_Init+0xc0>)
 8000be2:	2200      	movs	r2, #0
 8000be4:	615a      	str	r2, [r3, #20]
  hnor1.Init.BurstAccessMode = FMC_BURST_ACCESS_MODE_DISABLE;
 8000be6:	4b1f      	ldr	r3, [pc, #124]	; (8000c64 <MX_FMC_Init+0xc0>)
 8000be8:	2200      	movs	r2, #0
 8000bea:	619a      	str	r2, [r3, #24]
  hnor1.Init.WaitSignalPolarity = FMC_WAIT_SIGNAL_POLARITY_LOW;
 8000bec:	4b1d      	ldr	r3, [pc, #116]	; (8000c64 <MX_FMC_Init+0xc0>)
 8000bee:	2200      	movs	r2, #0
 8000bf0:	61da      	str	r2, [r3, #28]
  hnor1.Init.WaitSignalActive = FMC_WAIT_TIMING_BEFORE_WS;
 8000bf2:	4b1c      	ldr	r3, [pc, #112]	; (8000c64 <MX_FMC_Init+0xc0>)
 8000bf4:	2200      	movs	r2, #0
 8000bf6:	621a      	str	r2, [r3, #32]
  hnor1.Init.WriteOperation = FMC_WRITE_OPERATION_ENABLE;
 8000bf8:	4b1a      	ldr	r3, [pc, #104]	; (8000c64 <MX_FMC_Init+0xc0>)
 8000bfa:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8000bfe:	625a      	str	r2, [r3, #36]	; 0x24
  hnor1.Init.WaitSignal = FMC_WAIT_SIGNAL_DISABLE;
 8000c00:	4b18      	ldr	r3, [pc, #96]	; (8000c64 <MX_FMC_Init+0xc0>)
 8000c02:	2200      	movs	r2, #0
 8000c04:	629a      	str	r2, [r3, #40]	; 0x28
  hnor1.Init.ExtendedMode = FMC_EXTENDED_MODE_DISABLE;
 8000c06:	4b17      	ldr	r3, [pc, #92]	; (8000c64 <MX_FMC_Init+0xc0>)
 8000c08:	2200      	movs	r2, #0
 8000c0a:	62da      	str	r2, [r3, #44]	; 0x2c
  hnor1.Init.AsynchronousWait = FMC_ASYNCHRONOUS_WAIT_DISABLE;
 8000c0c:	4b15      	ldr	r3, [pc, #84]	; (8000c64 <MX_FMC_Init+0xc0>)
 8000c0e:	2200      	movs	r2, #0
 8000c10:	631a      	str	r2, [r3, #48]	; 0x30
  hnor1.Init.WriteBurst = FMC_WRITE_BURST_DISABLE;
 8000c12:	4b14      	ldr	r3, [pc, #80]	; (8000c64 <MX_FMC_Init+0xc0>)
 8000c14:	2200      	movs	r2, #0
 8000c16:	635a      	str	r2, [r3, #52]	; 0x34
  hnor1.Init.ContinuousClock = FMC_CONTINUOUS_CLOCK_SYNC_ONLY;
 8000c18:	4b12      	ldr	r3, [pc, #72]	; (8000c64 <MX_FMC_Init+0xc0>)
 8000c1a:	2200      	movs	r2, #0
 8000c1c:	639a      	str	r2, [r3, #56]	; 0x38
  hnor1.Init.WriteFifo = FMC_WRITE_FIFO_ENABLE;
 8000c1e:	4b11      	ldr	r3, [pc, #68]	; (8000c64 <MX_FMC_Init+0xc0>)
 8000c20:	2200      	movs	r2, #0
 8000c22:	63da      	str	r2, [r3, #60]	; 0x3c
  hnor1.Init.PageSize = FMC_PAGE_SIZE_NONE;
 8000c24:	4b0f      	ldr	r3, [pc, #60]	; (8000c64 <MX_FMC_Init+0xc0>)
 8000c26:	2200      	movs	r2, #0
 8000c28:	641a      	str	r2, [r3, #64]	; 0x40

  /* Timing */
  Timing.AddressSetupTime = 15;
 8000c2a:	230f      	movs	r3, #15
 8000c2c:	607b      	str	r3, [r7, #4]
  Timing.AddressHoldTime = 15;
 8000c2e:	230f      	movs	r3, #15
 8000c30:	60bb      	str	r3, [r7, #8]
  Timing.DataSetupTime = 255;
 8000c32:	23ff      	movs	r3, #255	; 0xff
 8000c34:	60fb      	str	r3, [r7, #12]
  Timing.BusTurnAroundDuration = 15;
 8000c36:	230f      	movs	r3, #15
 8000c38:	613b      	str	r3, [r7, #16]
  Timing.CLKDivision = 16;
 8000c3a:	2310      	movs	r3, #16
 8000c3c:	617b      	str	r3, [r7, #20]
  Timing.DataLatency = 17;
 8000c3e:	2311      	movs	r3, #17
 8000c40:	61bb      	str	r3, [r7, #24]
  Timing.AccessMode = FMC_ACCESS_MODE_A;
 8000c42:	2300      	movs	r3, #0
 8000c44:	61fb      	str	r3, [r7, #28]
  /* ExtTiming */

  if (HAL_NOR_Init(&hnor1, &Timing, NULL) != HAL_OK)
 8000c46:	1d3b      	adds	r3, r7, #4
 8000c48:	2200      	movs	r2, #0
 8000c4a:	4619      	mov	r1, r3
 8000c4c:	4805      	ldr	r0, [pc, #20]	; (8000c64 <MX_FMC_Init+0xc0>)
 8000c4e:	f001 fdd7 	bl	8002800 <HAL_NOR_Init>
 8000c52:	4603      	mov	r3, r0
 8000c54:	2b00      	cmp	r3, #0
 8000c56:	d001      	beq.n	8000c5c <MX_FMC_Init+0xb8>
  {
    Error_Handler( );
 8000c58:	f000 f8fa 	bl	8000e50 <Error_Handler>
  }

  /* USER CODE BEGIN FMC_Init 2 */

  /* USER CODE END FMC_Init 2 */
}
 8000c5c:	bf00      	nop
 8000c5e:	3720      	adds	r7, #32
 8000c60:	46bd      	mov	sp, r7
 8000c62:	bd80      	pop	{r7, pc}
 8000c64:	20000d60 	.word	0x20000d60
 8000c68:	52004000 	.word	0x52004000
 8000c6c:	52004104 	.word	0x52004104

08000c70 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000c70:	b580      	push	{r7, lr}
 8000c72:	b08c      	sub	sp, #48	; 0x30
 8000c74:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000c76:	f107 031c 	add.w	r3, r7, #28
 8000c7a:	2200      	movs	r2, #0
 8000c7c:	601a      	str	r2, [r3, #0]
 8000c7e:	605a      	str	r2, [r3, #4]
 8000c80:	609a      	str	r2, [r3, #8]
 8000c82:	60da      	str	r2, [r3, #12]
 8000c84:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000c86:	4b6a      	ldr	r3, [pc, #424]	; (8000e30 <MX_GPIO_Init+0x1c0>)
 8000c88:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000c8c:	4a68      	ldr	r2, [pc, #416]	; (8000e30 <MX_GPIO_Init+0x1c0>)
 8000c8e:	f043 0304 	orr.w	r3, r3, #4
 8000c92:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000c96:	4b66      	ldr	r3, [pc, #408]	; (8000e30 <MX_GPIO_Init+0x1c0>)
 8000c98:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000c9c:	f003 0304 	and.w	r3, r3, #4
 8000ca0:	61bb      	str	r3, [r7, #24]
 8000ca2:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8000ca4:	4b62      	ldr	r3, [pc, #392]	; (8000e30 <MX_GPIO_Init+0x1c0>)
 8000ca6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000caa:	4a61      	ldr	r2, [pc, #388]	; (8000e30 <MX_GPIO_Init+0x1c0>)
 8000cac:	f043 0320 	orr.w	r3, r3, #32
 8000cb0:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000cb4:	4b5e      	ldr	r3, [pc, #376]	; (8000e30 <MX_GPIO_Init+0x1c0>)
 8000cb6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000cba:	f003 0320 	and.w	r3, r3, #32
 8000cbe:	617b      	str	r3, [r7, #20]
 8000cc0:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000cc2:	4b5b      	ldr	r3, [pc, #364]	; (8000e30 <MX_GPIO_Init+0x1c0>)
 8000cc4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000cc8:	4a59      	ldr	r2, [pc, #356]	; (8000e30 <MX_GPIO_Init+0x1c0>)
 8000cca:	f043 0302 	orr.w	r3, r3, #2
 8000cce:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000cd2:	4b57      	ldr	r3, [pc, #348]	; (8000e30 <MX_GPIO_Init+0x1c0>)
 8000cd4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000cd8:	f003 0302 	and.w	r3, r3, #2
 8000cdc:	613b      	str	r3, [r7, #16]
 8000cde:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8000ce0:	4b53      	ldr	r3, [pc, #332]	; (8000e30 <MX_GPIO_Init+0x1c0>)
 8000ce2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000ce6:	4a52      	ldr	r2, [pc, #328]	; (8000e30 <MX_GPIO_Init+0x1c0>)
 8000ce8:	f043 0310 	orr.w	r3, r3, #16
 8000cec:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000cf0:	4b4f      	ldr	r3, [pc, #316]	; (8000e30 <MX_GPIO_Init+0x1c0>)
 8000cf2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000cf6:	f003 0310 	and.w	r3, r3, #16
 8000cfa:	60fb      	str	r3, [r7, #12]
 8000cfc:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000cfe:	4b4c      	ldr	r3, [pc, #304]	; (8000e30 <MX_GPIO_Init+0x1c0>)
 8000d00:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000d04:	4a4a      	ldr	r2, [pc, #296]	; (8000e30 <MX_GPIO_Init+0x1c0>)
 8000d06:	f043 0308 	orr.w	r3, r3, #8
 8000d0a:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000d0e:	4b48      	ldr	r3, [pc, #288]	; (8000e30 <MX_GPIO_Init+0x1c0>)
 8000d10:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000d14:	f003 0308 	and.w	r3, r3, #8
 8000d18:	60bb      	str	r3, [r7, #8]
 8000d1a:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8000d1c:	4b44      	ldr	r3, [pc, #272]	; (8000e30 <MX_GPIO_Init+0x1c0>)
 8000d1e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000d22:	4a43      	ldr	r2, [pc, #268]	; (8000e30 <MX_GPIO_Init+0x1c0>)
 8000d24:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000d28:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000d2c:	4b40      	ldr	r3, [pc, #256]	; (8000e30 <MX_GPIO_Init+0x1c0>)
 8000d2e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000d32:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000d36:	607b      	str	r3, [r7, #4]
 8000d38:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000d3a:	4b3d      	ldr	r3, [pc, #244]	; (8000e30 <MX_GPIO_Init+0x1c0>)
 8000d3c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000d40:	4a3b      	ldr	r2, [pc, #236]	; (8000e30 <MX_GPIO_Init+0x1c0>)
 8000d42:	f043 0301 	orr.w	r3, r3, #1
 8000d46:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000d4a:	4b39      	ldr	r3, [pc, #228]	; (8000e30 <MX_GPIO_Init+0x1c0>)
 8000d4c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000d50:	f003 0301 	and.w	r3, r3, #1
 8000d54:	603b      	str	r3, [r7, #0]
 8000d56:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LED_GREEN_Pin|LED_RED_Pin, GPIO_PIN_RESET);
 8000d58:	2200      	movs	r2, #0
 8000d5a:	f244 0101 	movw	r1, #16385	; 0x4001
 8000d5e:	4835      	ldr	r0, [pc, #212]	; (8000e34 <MX_GPIO_Init+0x1c4>)
 8000d60:	f001 fd34 	bl	80027cc <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, USB_FS_PWR_EN_Pin|GPIO_PIN_11|GPIO_PIN_3, GPIO_PIN_RESET);
 8000d64:	2200      	movs	r2, #0
 8000d66:	f640 4108 	movw	r1, #3080	; 0xc08
 8000d6a:	4833      	ldr	r0, [pc, #204]	; (8000e38 <MX_GPIO_Init+0x1c8>)
 8000d6c:	f001 fd2e 	bl	80027cc <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED_YELLOW_GPIO_Port, LED_YELLOW_Pin, GPIO_PIN_RESET);
 8000d70:	2200      	movs	r2, #0
 8000d72:	2102      	movs	r1, #2
 8000d74:	4831      	ldr	r0, [pc, #196]	; (8000e3c <MX_GPIO_Init+0x1cc>)
 8000d76:	f001 fd29 	bl	80027cc <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8000d7a:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000d7e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000d80:	2300      	movs	r3, #0
 8000d82:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d84:	2300      	movs	r3, #0
 8000d86:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8000d88:	f107 031c 	add.w	r3, r7, #28
 8000d8c:	4619      	mov	r1, r3
 8000d8e:	482c      	ldr	r0, [pc, #176]	; (8000e40 <MX_GPIO_Init+0x1d0>)
 8000d90:	f001 fb74 	bl	800247c <HAL_GPIO_Init>

  /*Configure GPIO pins : LED_GREEN_Pin LED_RED_Pin */
  GPIO_InitStruct.Pin = LED_GREEN_Pin|LED_RED_Pin;
 8000d94:	f244 0301 	movw	r3, #16385	; 0x4001
 8000d98:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000d9a:	2301      	movs	r3, #1
 8000d9c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d9e:	2300      	movs	r3, #0
 8000da0:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000da2:	2300      	movs	r3, #0
 8000da4:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000da6:	f107 031c 	add.w	r3, r7, #28
 8000daa:	4619      	mov	r1, r3
 8000dac:	4821      	ldr	r0, [pc, #132]	; (8000e34 <MX_GPIO_Init+0x1c4>)
 8000dae:	f001 fb65 	bl	800247c <HAL_GPIO_Init>

  /*Configure GPIO pins : USB_FS_PWR_EN_Pin PD11 PD3 */
  GPIO_InitStruct.Pin = USB_FS_PWR_EN_Pin|GPIO_PIN_11|GPIO_PIN_3;
 8000db2:	f640 4308 	movw	r3, #3080	; 0xc08
 8000db6:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000db8:	2301      	movs	r3, #1
 8000dba:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000dbc:	2300      	movs	r3, #0
 8000dbe:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000dc0:	2300      	movs	r3, #0
 8000dc2:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000dc4:	f107 031c 	add.w	r3, r7, #28
 8000dc8:	4619      	mov	r1, r3
 8000dca:	481b      	ldr	r0, [pc, #108]	; (8000e38 <MX_GPIO_Init+0x1c8>)
 8000dcc:	f001 fb56 	bl	800247c <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_FS_OVCR_Pin */
  GPIO_InitStruct.Pin = USB_FS_OVCR_Pin;
 8000dd0:	2380      	movs	r3, #128	; 0x80
 8000dd2:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000dd4:	4b1b      	ldr	r3, [pc, #108]	; (8000e44 <MX_GPIO_Init+0x1d4>)
 8000dd6:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000dd8:	2300      	movs	r3, #0
 8000dda:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(USB_FS_OVCR_GPIO_Port, &GPIO_InitStruct);
 8000ddc:	f107 031c 	add.w	r3, r7, #28
 8000de0:	4619      	mov	r1, r3
 8000de2:	4819      	ldr	r0, [pc, #100]	; (8000e48 <MX_GPIO_Init+0x1d8>)
 8000de4:	f001 fb4a 	bl	800247c <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_FS_ID_Pin */
  GPIO_InitStruct.Pin = USB_FS_ID_Pin;
 8000de8:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000dec:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000dee:	2302      	movs	r3, #2
 8000df0:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000df2:	2300      	movs	r3, #0
 8000df4:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000df6:	2300      	movs	r3, #0
 8000df8:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG1_HS;
 8000dfa:	230a      	movs	r3, #10
 8000dfc:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(USB_FS_ID_GPIO_Port, &GPIO_InitStruct);
 8000dfe:	f107 031c 	add.w	r3, r7, #28
 8000e02:	4619      	mov	r1, r3
 8000e04:	4811      	ldr	r0, [pc, #68]	; (8000e4c <MX_GPIO_Init+0x1dc>)
 8000e06:	f001 fb39 	bl	800247c <HAL_GPIO_Init>

  /*Configure GPIO pin : LED_YELLOW_Pin */
  GPIO_InitStruct.Pin = LED_YELLOW_Pin;
 8000e0a:	2302      	movs	r3, #2
 8000e0c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000e0e:	2301      	movs	r3, #1
 8000e10:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e12:	2300      	movs	r3, #0
 8000e14:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000e16:	2300      	movs	r3, #0
 8000e18:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(LED_YELLOW_GPIO_Port, &GPIO_InitStruct);
 8000e1a:	f107 031c 	add.w	r3, r7, #28
 8000e1e:	4619      	mov	r1, r3
 8000e20:	4806      	ldr	r0, [pc, #24]	; (8000e3c <MX_GPIO_Init+0x1cc>)
 8000e22:	f001 fb2b 	bl	800247c <HAL_GPIO_Init>

}
 8000e26:	bf00      	nop
 8000e28:	3730      	adds	r7, #48	; 0x30
 8000e2a:	46bd      	mov	sp, r7
 8000e2c:	bd80      	pop	{r7, pc}
 8000e2e:	bf00      	nop
 8000e30:	58024400 	.word	0x58024400
 8000e34:	58020400 	.word	0x58020400
 8000e38:	58020c00 	.word	0x58020c00
 8000e3c:	58021000 	.word	0x58021000
 8000e40:	58020800 	.word	0x58020800
 8000e44:	11110000 	.word	0x11110000
 8000e48:	58021800 	.word	0x58021800
 8000e4c:	58020000 	.word	0x58020000

08000e50 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000e50:	b480      	push	{r7}
 8000e52:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000e54:	b672      	cpsid	i
}
 8000e56:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000e58:	e7fe      	b.n	8000e58 <Error_Handler+0x8>
	...

08000e5c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000e5c:	b480      	push	{r7}
 8000e5e:	b083      	sub	sp, #12
 8000e60:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000e62:	4b0a      	ldr	r3, [pc, #40]	; (8000e8c <HAL_MspInit+0x30>)
 8000e64:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8000e68:	4a08      	ldr	r2, [pc, #32]	; (8000e8c <HAL_MspInit+0x30>)
 8000e6a:	f043 0302 	orr.w	r3, r3, #2
 8000e6e:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 8000e72:	4b06      	ldr	r3, [pc, #24]	; (8000e8c <HAL_MspInit+0x30>)
 8000e74:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8000e78:	f003 0302 	and.w	r3, r3, #2
 8000e7c:	607b      	str	r3, [r7, #4]
 8000e7e:	687b      	ldr	r3, [r7, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000e80:	bf00      	nop
 8000e82:	370c      	adds	r7, #12
 8000e84:	46bd      	mov	sp, r7
 8000e86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e8a:	4770      	bx	lr
 8000e8c:	58024400 	.word	0x58024400

08000e90 <HAL_DMA2D_MspInit>:
* This function configures the hardware resources used in this example
* @param hdma2d: DMA2D handle pointer
* @retval None
*/
void HAL_DMA2D_MspInit(DMA2D_HandleTypeDef* hdma2d)
{
 8000e90:	b480      	push	{r7}
 8000e92:	b085      	sub	sp, #20
 8000e94:	af00      	add	r7, sp, #0
 8000e96:	6078      	str	r0, [r7, #4]
  if(hdma2d->Instance==DMA2D)
 8000e98:	687b      	ldr	r3, [r7, #4]
 8000e9a:	681b      	ldr	r3, [r3, #0]
 8000e9c:	4a0b      	ldr	r2, [pc, #44]	; (8000ecc <HAL_DMA2D_MspInit+0x3c>)
 8000e9e:	4293      	cmp	r3, r2
 8000ea0:	d10e      	bne.n	8000ec0 <HAL_DMA2D_MspInit+0x30>
  {
  /* USER CODE BEGIN DMA2D_MspInit 0 */

  /* USER CODE END DMA2D_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_DMA2D_CLK_ENABLE();
 8000ea2:	4b0b      	ldr	r3, [pc, #44]	; (8000ed0 <HAL_DMA2D_MspInit+0x40>)
 8000ea4:	f8d3 30d4 	ldr.w	r3, [r3, #212]	; 0xd4
 8000ea8:	4a09      	ldr	r2, [pc, #36]	; (8000ed0 <HAL_DMA2D_MspInit+0x40>)
 8000eaa:	f043 0310 	orr.w	r3, r3, #16
 8000eae:	f8c2 30d4 	str.w	r3, [r2, #212]	; 0xd4
 8000eb2:	4b07      	ldr	r3, [pc, #28]	; (8000ed0 <HAL_DMA2D_MspInit+0x40>)
 8000eb4:	f8d3 30d4 	ldr.w	r3, [r3, #212]	; 0xd4
 8000eb8:	f003 0310 	and.w	r3, r3, #16
 8000ebc:	60fb      	str	r3, [r7, #12]
 8000ebe:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN DMA2D_MspInit 1 */

  /* USER CODE END DMA2D_MspInit 1 */
  }

}
 8000ec0:	bf00      	nop
 8000ec2:	3714      	adds	r7, #20
 8000ec4:	46bd      	mov	sp, r7
 8000ec6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000eca:	4770      	bx	lr
 8000ecc:	52001000 	.word	0x52001000
 8000ed0:	58024400 	.word	0x58024400

08000ed4 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000ed4:	b580      	push	{r7, lr}
 8000ed6:	b0b6      	sub	sp, #216	; 0xd8
 8000ed8:	af00      	add	r7, sp, #0
 8000eda:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000edc:	f107 03c4 	add.w	r3, r7, #196	; 0xc4
 8000ee0:	2200      	movs	r2, #0
 8000ee2:	601a      	str	r2, [r3, #0]
 8000ee4:	605a      	str	r2, [r3, #4]
 8000ee6:	609a      	str	r2, [r3, #8]
 8000ee8:	60da      	str	r2, [r3, #12]
 8000eea:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000eec:	f107 0310 	add.w	r3, r7, #16
 8000ef0:	22b4      	movs	r2, #180	; 0xb4
 8000ef2:	2100      	movs	r1, #0
 8000ef4:	4618      	mov	r0, r3
 8000ef6:	f005 ffd7 	bl	8006ea8 <memset>
  if(huart->Instance==USART3)
 8000efa:	687b      	ldr	r3, [r7, #4]
 8000efc:	681b      	ldr	r3, [r3, #0]
 8000efe:	4a31      	ldr	r2, [pc, #196]	; (8000fc4 <HAL_UART_MspInit+0xf0>)
 8000f00:	4293      	cmp	r3, r2
 8000f02:	d15a      	bne.n	8000fba <HAL_UART_MspInit+0xe6>
  /* USER CODE BEGIN USART3_MspInit 0 */

  /* USER CODE END USART3_MspInit 0 */
  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 8000f04:	2302      	movs	r3, #2
 8000f06:	613b      	str	r3, [r7, #16]
    PeriphClkInitStruct.PLL2.PLL2M = 1;
 8000f08:	2301      	movs	r3, #1
 8000f0a:	617b      	str	r3, [r7, #20]
    PeriphClkInitStruct.PLL2.PLL2N = 80;
 8000f0c:	2350      	movs	r3, #80	; 0x50
 8000f0e:	61bb      	str	r3, [r7, #24]
    PeriphClkInitStruct.PLL2.PLL2P = 2;
 8000f10:	2302      	movs	r3, #2
 8000f12:	61fb      	str	r3, [r7, #28]
    PeriphClkInitStruct.PLL2.PLL2Q = 40;
 8000f14:	2328      	movs	r3, #40	; 0x28
 8000f16:	623b      	str	r3, [r7, #32]
    PeriphClkInitStruct.PLL2.PLL2R = 2;
 8000f18:	2302      	movs	r3, #2
 8000f1a:	627b      	str	r3, [r7, #36]	; 0x24
    PeriphClkInitStruct.PLL2.PLL2RGE = RCC_PLL2VCIRANGE_2;
 8000f1c:	2380      	movs	r3, #128	; 0x80
 8000f1e:	62bb      	str	r3, [r7, #40]	; 0x28
    PeriphClkInitStruct.PLL2.PLL2VCOSEL = RCC_PLL2VCOWIDE;
 8000f20:	2300      	movs	r3, #0
 8000f22:	62fb      	str	r3, [r7, #44]	; 0x2c
    PeriphClkInitStruct.PLL2.PLL2FRACN = 0;
 8000f24:	2300      	movs	r3, #0
 8000f26:	633b      	str	r3, [r7, #48]	; 0x30
    PeriphClkInitStruct.Usart234578ClockSelection = RCC_USART234578CLKSOURCE_PLL2;
 8000f28:	2301      	movs	r3, #1
 8000f2a:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000f2e:	f107 0310 	add.w	r3, r7, #16
 8000f32:	4618      	mov	r0, r3
 8000f34:	f002 fcb4 	bl	80038a0 <HAL_RCCEx_PeriphCLKConfig>
 8000f38:	4603      	mov	r3, r0
 8000f3a:	2b00      	cmp	r3, #0
 8000f3c:	d001      	beq.n	8000f42 <HAL_UART_MspInit+0x6e>
    {
      Error_Handler();
 8000f3e:	f7ff ff87 	bl	8000e50 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 8000f42:	4b21      	ldr	r3, [pc, #132]	; (8000fc8 <HAL_UART_MspInit+0xf4>)
 8000f44:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8000f48:	4a1f      	ldr	r2, [pc, #124]	; (8000fc8 <HAL_UART_MspInit+0xf4>)
 8000f4a:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000f4e:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8000f52:	4b1d      	ldr	r3, [pc, #116]	; (8000fc8 <HAL_UART_MspInit+0xf4>)
 8000f54:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8000f58:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8000f5c:	60fb      	str	r3, [r7, #12]
 8000f5e:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 8000f60:	4b19      	ldr	r3, [pc, #100]	; (8000fc8 <HAL_UART_MspInit+0xf4>)
 8000f62:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000f66:	4a18      	ldr	r2, [pc, #96]	; (8000fc8 <HAL_UART_MspInit+0xf4>)
 8000f68:	f043 0308 	orr.w	r3, r3, #8
 8000f6c:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000f70:	4b15      	ldr	r3, [pc, #84]	; (8000fc8 <HAL_UART_MspInit+0xf4>)
 8000f72:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000f76:	f003 0308 	and.w	r3, r3, #8
 8000f7a:	60bb      	str	r3, [r7, #8]
 8000f7c:	68bb      	ldr	r3, [r7, #8]
    /**USART3 GPIO Configuration
    PD8     ------> USART3_TX
    PD9     ------> USART3_RX
    */
    GPIO_InitStruct.Pin = STLK_VCP_RX_Pin|STLK_VCP_TX_Pin;
 8000f7e:	f44f 7340 	mov.w	r3, #768	; 0x300
 8000f82:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000f86:	2302      	movs	r3, #2
 8000f88:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f8c:	2300      	movs	r3, #0
 8000f8e:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000f92:	2300      	movs	r3, #0
 8000f94:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8000f98:	2307      	movs	r3, #7
 8000f9a:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000f9e:	f107 03c4 	add.w	r3, r7, #196	; 0xc4
 8000fa2:	4619      	mov	r1, r3
 8000fa4:	4809      	ldr	r0, [pc, #36]	; (8000fcc <HAL_UART_MspInit+0xf8>)
 8000fa6:	f001 fa69 	bl	800247c <HAL_GPIO_Init>

    /* USART3 interrupt Init */
    HAL_NVIC_SetPriority(USART3_IRQn, 0, 0);
 8000faa:	2200      	movs	r2, #0
 8000fac:	2100      	movs	r1, #0
 8000fae:	2027      	movs	r0, #39	; 0x27
 8000fb0:	f000 fbb5 	bl	800171e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART3_IRQn);
 8000fb4:	2027      	movs	r0, #39	; 0x27
 8000fb6:	f000 fbcc 	bl	8001752 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 8000fba:	bf00      	nop
 8000fbc:	37d8      	adds	r7, #216	; 0xd8
 8000fbe:	46bd      	mov	sp, r7
 8000fc0:	bd80      	pop	{r7, pc}
 8000fc2:	bf00      	nop
 8000fc4:	40004800 	.word	0x40004800
 8000fc8:	58024400 	.word	0x58024400
 8000fcc:	58020c00 	.word	0x58020c00

08000fd0 <HAL_FMC_MspInit>:

}

static uint32_t FMC_Initialized = 0;

static void HAL_FMC_MspInit(void){
 8000fd0:	b580      	push	{r7, lr}
 8000fd2:	b0b4      	sub	sp, #208	; 0xd0
 8000fd4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN FMC_MspInit 0 */

  /* USER CODE END FMC_MspInit 0 */
  GPIO_InitTypeDef GPIO_InitStruct ={0};
 8000fd6:	f107 03bc 	add.w	r3, r7, #188	; 0xbc
 8000fda:	2200      	movs	r2, #0
 8000fdc:	601a      	str	r2, [r3, #0]
 8000fde:	605a      	str	r2, [r3, #4]
 8000fe0:	609a      	str	r2, [r3, #8]
 8000fe2:	60da      	str	r2, [r3, #12]
 8000fe4:	611a      	str	r2, [r3, #16]
  if (FMC_Initialized) {
 8000fe6:	4b43      	ldr	r3, [pc, #268]	; (80010f4 <HAL_FMC_MspInit+0x124>)
 8000fe8:	681b      	ldr	r3, [r3, #0]
 8000fea:	2b00      	cmp	r3, #0
 8000fec:	d17e      	bne.n	80010ec <HAL_FMC_MspInit+0x11c>
    return;
  }
  FMC_Initialized = 1;
 8000fee:	4b41      	ldr	r3, [pc, #260]	; (80010f4 <HAL_FMC_MspInit+0x124>)
 8000ff0:	2201      	movs	r2, #1
 8000ff2:	601a      	str	r2, [r3, #0]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000ff4:	f107 0308 	add.w	r3, r7, #8
 8000ff8:	22b4      	movs	r2, #180	; 0xb4
 8000ffa:	2100      	movs	r1, #0
 8000ffc:	4618      	mov	r0, r3
 8000ffe:	f005 ff53 	bl	8006ea8 <memset>

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_FMC;
 8001002:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8001006:	60bb      	str	r3, [r7, #8]
    PeriphClkInitStruct.FmcClockSelection = RCC_FMCCLKSOURCE_PLL;
 8001008:	2301      	movs	r3, #1
 800100a:	64fb      	str	r3, [r7, #76]	; 0x4c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800100c:	f107 0308 	add.w	r3, r7, #8
 8001010:	4618      	mov	r0, r3
 8001012:	f002 fc45 	bl	80038a0 <HAL_RCCEx_PeriphCLKConfig>
 8001016:	4603      	mov	r3, r0
 8001018:	2b00      	cmp	r3, #0
 800101a:	d001      	beq.n	8001020 <HAL_FMC_MspInit+0x50>
    {
      Error_Handler();
 800101c:	f7ff ff18 	bl	8000e50 <Error_Handler>
    }

  /* Peripheral clock enable */
  __HAL_RCC_FMC_CLK_ENABLE();
 8001020:	4b35      	ldr	r3, [pc, #212]	; (80010f8 <HAL_FMC_MspInit+0x128>)
 8001022:	f8d3 30d4 	ldr.w	r3, [r3, #212]	; 0xd4
 8001026:	4a34      	ldr	r2, [pc, #208]	; (80010f8 <HAL_FMC_MspInit+0x128>)
 8001028:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 800102c:	f8c2 30d4 	str.w	r3, [r2, #212]	; 0xd4
 8001030:	4b31      	ldr	r3, [pc, #196]	; (80010f8 <HAL_FMC_MspInit+0x128>)
 8001032:	f8d3 30d4 	ldr.w	r3, [r3, #212]	; 0xd4
 8001036:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800103a:	607b      	str	r3, [r7, #4]
 800103c:	687b      	ldr	r3, [r7, #4]
  PD0   ------> FMC_D2
  PD1   ------> FMC_D3
  PD4   ------> FMC_NOE
  PD5   ------> FMC_NWE
  */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 800103e:	2303      	movs	r3, #3
 8001040:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001044:	2302      	movs	r3, #2
 8001046:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800104a:	2300      	movs	r3, #0
 800104c:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001050:	2303      	movs	r3, #3
 8001052:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8001056:	230c      	movs	r3, #12
 8001058:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 800105c:	f107 03bc 	add.w	r3, r7, #188	; 0xbc
 8001060:	4619      	mov	r1, r3
 8001062:	4826      	ldr	r0, [pc, #152]	; (80010fc <HAL_FMC_MspInit+0x12c>)
 8001064:	f001 fa0a 	bl	800247c <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = GPIO_PIN_7|GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10;
 8001068:	f44f 63f0 	mov.w	r3, #1920	; 0x780
 800106c:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001070:	2302      	movs	r3, #2
 8001072:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001076:	2300      	movs	r3, #0
 8001078:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800107c:	2303      	movs	r3, #3
 800107e:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8001082:	230c      	movs	r3, #12
 8001084:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8001088:	f107 03bc 	add.w	r3, r7, #188	; 0xbc
 800108c:	4619      	mov	r1, r3
 800108e:	481c      	ldr	r0, [pc, #112]	; (8001100 <HAL_FMC_MspInit+0x130>)
 8001090:	f001 f9f4 	bl	800247c <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = GPIO_PIN_14|GPIO_PIN_15|GPIO_PIN_0|GPIO_PIN_1
 8001094:	f24c 0333 	movw	r3, #49203	; 0xc033
 8001098:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
                          |GPIO_PIN_4|GPIO_PIN_5;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800109c:	2302      	movs	r3, #2
 800109e:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80010a2:	2300      	movs	r3, #0
 80010a4:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80010a8:	2303      	movs	r3, #3
 80010aa:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 80010ae:	230c      	movs	r3, #12
 80010b0:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80010b4:	f107 03bc 	add.w	r3, r7, #188	; 0xbc
 80010b8:	4619      	mov	r1, r3
 80010ba:	4812      	ldr	r0, [pc, #72]	; (8001104 <HAL_FMC_MspInit+0x134>)
 80010bc:	f001 f9de 	bl	800247c <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = GPIO_PIN_7;
 80010c0:	2380      	movs	r3, #128	; 0x80
 80010c2:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80010c6:	2302      	movs	r3, #2
 80010c8:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80010cc:	2300      	movs	r3, #0
 80010ce:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80010d2:	2303      	movs	r3, #3
 80010d4:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
  GPIO_InitStruct.Alternate = GPIO_AF9_FMC;
 80010d8:	2309      	movs	r3, #9
 80010da:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80010de:	f107 03bc 	add.w	r3, r7, #188	; 0xbc
 80010e2:	4619      	mov	r1, r3
 80010e4:	4808      	ldr	r0, [pc, #32]	; (8001108 <HAL_FMC_MspInit+0x138>)
 80010e6:	f001 f9c9 	bl	800247c <HAL_GPIO_Init>
 80010ea:	e000      	b.n	80010ee <HAL_FMC_MspInit+0x11e>
    return;
 80010ec:	bf00      	nop

  /* USER CODE BEGIN FMC_MspInit 1 */

  /* USER CODE END FMC_MspInit 1 */
}
 80010ee:	37d0      	adds	r7, #208	; 0xd0
 80010f0:	46bd      	mov	sp, r7
 80010f2:	bd80      	pop	{r7, pc}
 80010f4:	200000b8 	.word	0x200000b8
 80010f8:	58024400 	.word	0x58024400
 80010fc:	58021400 	.word	0x58021400
 8001100:	58021000 	.word	0x58021000
 8001104:	58020c00 	.word	0x58020c00
 8001108:	58020800 	.word	0x58020800

0800110c <HAL_NOR_MspInit>:

void HAL_NOR_MspInit(NOR_HandleTypeDef* hnor){
 800110c:	b580      	push	{r7, lr}
 800110e:	b082      	sub	sp, #8
 8001110:	af00      	add	r7, sp, #0
 8001112:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN NOR_MspInit 0 */

  /* USER CODE END NOR_MspInit 0 */
  HAL_FMC_MspInit();
 8001114:	f7ff ff5c 	bl	8000fd0 <HAL_FMC_MspInit>
  /* USER CODE BEGIN NOR_MspInit 1 */

  /* USER CODE END NOR_MspInit 1 */
}
 8001118:	bf00      	nop
 800111a:	3708      	adds	r7, #8
 800111c:	46bd      	mov	sp, r7
 800111e:	bd80      	pop	{r7, pc}

08001120 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001120:	b480      	push	{r7}
 8001122:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001124:	e7fe      	b.n	8001124 <NMI_Handler+0x4>

08001126 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001126:	b480      	push	{r7}
 8001128:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800112a:	e7fe      	b.n	800112a <HardFault_Handler+0x4>

0800112c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800112c:	b480      	push	{r7}
 800112e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001130:	e7fe      	b.n	8001130 <MemManage_Handler+0x4>

08001132 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001132:	b480      	push	{r7}
 8001134:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001136:	e7fe      	b.n	8001136 <BusFault_Handler+0x4>

08001138 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001138:	b480      	push	{r7}
 800113a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800113c:	e7fe      	b.n	800113c <UsageFault_Handler+0x4>

0800113e <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800113e:	b480      	push	{r7}
 8001140:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001142:	bf00      	nop
 8001144:	46bd      	mov	sp, r7
 8001146:	f85d 7b04 	ldr.w	r7, [sp], #4
 800114a:	4770      	bx	lr

0800114c <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800114c:	b480      	push	{r7}
 800114e:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001150:	bf00      	nop
 8001152:	46bd      	mov	sp, r7
 8001154:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001158:	4770      	bx	lr

0800115a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800115a:	b480      	push	{r7}
 800115c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800115e:	bf00      	nop
 8001160:	46bd      	mov	sp, r7
 8001162:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001166:	4770      	bx	lr

08001168 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001168:	b580      	push	{r7, lr}
 800116a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800116c:	f000 f9ac 	bl	80014c8 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001170:	bf00      	nop
 8001172:	bd80      	pop	{r7, pc}

08001174 <USART3_IRQHandler>:

/**
  * @brief This function handles USART3 global interrupt.
  */
void USART3_IRQHandler(void)
{
 8001174:	b580      	push	{r7, lr}
 8001176:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART3_IRQn 0 */

  /* USER CODE END USART3_IRQn 0 */
  HAL_UART_IRQHandler(&huart3);
 8001178:	4802      	ldr	r0, [pc, #8]	; (8001184 <USART3_IRQHandler+0x10>)
 800117a:	f003 ffe9 	bl	8005150 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART3_IRQn 1 */

  /* USER CODE END USART3_IRQn 1 */
}
 800117e:	bf00      	nop
 8001180:	bd80      	pop	{r7, pc}
 8001182:	bf00      	nop
 8001184:	200008d0 	.word	0x200008d0

08001188 <_read>:
	_kill(status, -1);
	while (1) {}		/* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001188:	b580      	push	{r7, lr}
 800118a:	b086      	sub	sp, #24
 800118c:	af00      	add	r7, sp, #0
 800118e:	60f8      	str	r0, [r7, #12]
 8001190:	60b9      	str	r1, [r7, #8]
 8001192:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001194:	2300      	movs	r3, #0
 8001196:	617b      	str	r3, [r7, #20]
 8001198:	e00a      	b.n	80011b0 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 800119a:	f3af 8000 	nop.w
 800119e:	4601      	mov	r1, r0
 80011a0:	68bb      	ldr	r3, [r7, #8]
 80011a2:	1c5a      	adds	r2, r3, #1
 80011a4:	60ba      	str	r2, [r7, #8]
 80011a6:	b2ca      	uxtb	r2, r1
 80011a8:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80011aa:	697b      	ldr	r3, [r7, #20]
 80011ac:	3301      	adds	r3, #1
 80011ae:	617b      	str	r3, [r7, #20]
 80011b0:	697a      	ldr	r2, [r7, #20]
 80011b2:	687b      	ldr	r3, [r7, #4]
 80011b4:	429a      	cmp	r2, r3
 80011b6:	dbf0      	blt.n	800119a <_read+0x12>
	}

return len;
 80011b8:	687b      	ldr	r3, [r7, #4]
}
 80011ba:	4618      	mov	r0, r3
 80011bc:	3718      	adds	r7, #24
 80011be:	46bd      	mov	sp, r7
 80011c0:	bd80      	pop	{r7, pc}

080011c2 <_close>:
	}
	return len;
}

int _close(int file)
{
 80011c2:	b480      	push	{r7}
 80011c4:	b083      	sub	sp, #12
 80011c6:	af00      	add	r7, sp, #0
 80011c8:	6078      	str	r0, [r7, #4]
	return -1;
 80011ca:	f04f 33ff 	mov.w	r3, #4294967295
}
 80011ce:	4618      	mov	r0, r3
 80011d0:	370c      	adds	r7, #12
 80011d2:	46bd      	mov	sp, r7
 80011d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011d8:	4770      	bx	lr

080011da <_fstat>:


int _fstat(int file, struct stat *st)
{
 80011da:	b480      	push	{r7}
 80011dc:	b083      	sub	sp, #12
 80011de:	af00      	add	r7, sp, #0
 80011e0:	6078      	str	r0, [r7, #4]
 80011e2:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 80011e4:	683b      	ldr	r3, [r7, #0]
 80011e6:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80011ea:	605a      	str	r2, [r3, #4]
	return 0;
 80011ec:	2300      	movs	r3, #0
}
 80011ee:	4618      	mov	r0, r3
 80011f0:	370c      	adds	r7, #12
 80011f2:	46bd      	mov	sp, r7
 80011f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011f8:	4770      	bx	lr

080011fa <_isatty>:

int _isatty(int file)
{
 80011fa:	b480      	push	{r7}
 80011fc:	b083      	sub	sp, #12
 80011fe:	af00      	add	r7, sp, #0
 8001200:	6078      	str	r0, [r7, #4]
	return 1;
 8001202:	2301      	movs	r3, #1
}
 8001204:	4618      	mov	r0, r3
 8001206:	370c      	adds	r7, #12
 8001208:	46bd      	mov	sp, r7
 800120a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800120e:	4770      	bx	lr

08001210 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001210:	b480      	push	{r7}
 8001212:	b085      	sub	sp, #20
 8001214:	af00      	add	r7, sp, #0
 8001216:	60f8      	str	r0, [r7, #12]
 8001218:	60b9      	str	r1, [r7, #8]
 800121a:	607a      	str	r2, [r7, #4]
	return 0;
 800121c:	2300      	movs	r3, #0
}
 800121e:	4618      	mov	r0, r3
 8001220:	3714      	adds	r7, #20
 8001222:	46bd      	mov	sp, r7
 8001224:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001228:	4770      	bx	lr
	...

0800122c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 800122c:	b580      	push	{r7, lr}
 800122e:	b086      	sub	sp, #24
 8001230:	af00      	add	r7, sp, #0
 8001232:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001234:	4a14      	ldr	r2, [pc, #80]	; (8001288 <_sbrk+0x5c>)
 8001236:	4b15      	ldr	r3, [pc, #84]	; (800128c <_sbrk+0x60>)
 8001238:	1ad3      	subs	r3, r2, r3
 800123a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 800123c:	697b      	ldr	r3, [r7, #20]
 800123e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001240:	4b13      	ldr	r3, [pc, #76]	; (8001290 <_sbrk+0x64>)
 8001242:	681b      	ldr	r3, [r3, #0]
 8001244:	2b00      	cmp	r3, #0
 8001246:	d102      	bne.n	800124e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001248:	4b11      	ldr	r3, [pc, #68]	; (8001290 <_sbrk+0x64>)
 800124a:	4a12      	ldr	r2, [pc, #72]	; (8001294 <_sbrk+0x68>)
 800124c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800124e:	4b10      	ldr	r3, [pc, #64]	; (8001290 <_sbrk+0x64>)
 8001250:	681a      	ldr	r2, [r3, #0]
 8001252:	687b      	ldr	r3, [r7, #4]
 8001254:	4413      	add	r3, r2
 8001256:	693a      	ldr	r2, [r7, #16]
 8001258:	429a      	cmp	r2, r3
 800125a:	d207      	bcs.n	800126c <_sbrk+0x40>
  {
    errno = ENOMEM;
 800125c:	f005 fdfa 	bl	8006e54 <__errno>
 8001260:	4603      	mov	r3, r0
 8001262:	220c      	movs	r2, #12
 8001264:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001266:	f04f 33ff 	mov.w	r3, #4294967295
 800126a:	e009      	b.n	8001280 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 800126c:	4b08      	ldr	r3, [pc, #32]	; (8001290 <_sbrk+0x64>)
 800126e:	681b      	ldr	r3, [r3, #0]
 8001270:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001272:	4b07      	ldr	r3, [pc, #28]	; (8001290 <_sbrk+0x64>)
 8001274:	681a      	ldr	r2, [r3, #0]
 8001276:	687b      	ldr	r3, [r7, #4]
 8001278:	4413      	add	r3, r2
 800127a:	4a05      	ldr	r2, [pc, #20]	; (8001290 <_sbrk+0x64>)
 800127c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800127e:	68fb      	ldr	r3, [r7, #12]
}
 8001280:	4618      	mov	r0, r3
 8001282:	3718      	adds	r7, #24
 8001284:	46bd      	mov	sp, r7
 8001286:	bd80      	pop	{r7, pc}
 8001288:	20020000 	.word	0x20020000
 800128c:	00000400 	.word	0x00000400
 8001290:	200000bc 	.word	0x200000bc
 8001294:	20002438 	.word	0x20002438

08001298 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8001298:	b480      	push	{r7}
 800129a:	af00      	add	r7, sp, #0
 __IO uint32_t tmpreg;
#endif /* DATA_IN_D2_SRAM */

  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 800129c:	4b34      	ldr	r3, [pc, #208]	; (8001370 <SystemInit+0xd8>)
 800129e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80012a2:	4a33      	ldr	r2, [pc, #204]	; (8001370 <SystemInit+0xd8>)
 80012a4:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80012a8:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/

   /* Increasing the CPU frequency */
  if(FLASH_LATENCY_DEFAULT  > (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 80012ac:	4b31      	ldr	r3, [pc, #196]	; (8001374 <SystemInit+0xdc>)
 80012ae:	681b      	ldr	r3, [r3, #0]
 80012b0:	f003 030f 	and.w	r3, r3, #15
 80012b4:	2b06      	cmp	r3, #6
 80012b6:	d807      	bhi.n	80012c8 <SystemInit+0x30>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
	MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 80012b8:	4b2e      	ldr	r3, [pc, #184]	; (8001374 <SystemInit+0xdc>)
 80012ba:	681b      	ldr	r3, [r3, #0]
 80012bc:	f023 030f 	bic.w	r3, r3, #15
 80012c0:	4a2c      	ldr	r2, [pc, #176]	; (8001374 <SystemInit+0xdc>)
 80012c2:	f043 0307 	orr.w	r3, r3, #7
 80012c6:	6013      	str	r3, [r2, #0]
  }

  /* Set HSION bit */
  RCC->CR |= RCC_CR_HSION;
 80012c8:	4b2b      	ldr	r3, [pc, #172]	; (8001378 <SystemInit+0xe0>)
 80012ca:	681b      	ldr	r3, [r3, #0]
 80012cc:	4a2a      	ldr	r2, [pc, #168]	; (8001378 <SystemInit+0xe0>)
 80012ce:	f043 0301 	orr.w	r3, r3, #1
 80012d2:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 80012d4:	4b28      	ldr	r3, [pc, #160]	; (8001378 <SystemInit+0xe0>)
 80012d6:	2200      	movs	r2, #0
 80012d8:	611a      	str	r2, [r3, #16]

  /* Reset HSEON, HSECSSON, CSION, HSI48ON, CSIKERON, PLL1ON, PLL2ON and PLL3ON bits */
  RCC->CR &= 0xEAF6ED7FU;
 80012da:	4b27      	ldr	r3, [pc, #156]	; (8001378 <SystemInit+0xe0>)
 80012dc:	681a      	ldr	r2, [r3, #0]
 80012de:	4926      	ldr	r1, [pc, #152]	; (8001378 <SystemInit+0xe0>)
 80012e0:	4b26      	ldr	r3, [pc, #152]	; (800137c <SystemInit+0xe4>)
 80012e2:	4013      	ands	r3, r2
 80012e4:	600b      	str	r3, [r1, #0]
  
   /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLASH_LATENCY_DEFAULT  < (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 80012e6:	4b23      	ldr	r3, [pc, #140]	; (8001374 <SystemInit+0xdc>)
 80012e8:	681b      	ldr	r3, [r3, #0]
 80012ea:	f003 0308 	and.w	r3, r3, #8
 80012ee:	2b00      	cmp	r3, #0
 80012f0:	d007      	beq.n	8001302 <SystemInit+0x6a>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
	MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 80012f2:	4b20      	ldr	r3, [pc, #128]	; (8001374 <SystemInit+0xdc>)
 80012f4:	681b      	ldr	r3, [r3, #0]
 80012f6:	f023 030f 	bic.w	r3, r3, #15
 80012fa:	4a1e      	ldr	r2, [pc, #120]	; (8001374 <SystemInit+0xdc>)
 80012fc:	f043 0307 	orr.w	r3, r3, #7
 8001300:	6013      	str	r3, [r2, #0]
  }

#if defined(D3_SRAM_BASE)
  /* Reset D1CFGR register */
  RCC->D1CFGR = 0x00000000;
 8001302:	4b1d      	ldr	r3, [pc, #116]	; (8001378 <SystemInit+0xe0>)
 8001304:	2200      	movs	r2, #0
 8001306:	619a      	str	r2, [r3, #24]

  /* Reset D2CFGR register */
  RCC->D2CFGR = 0x00000000;
 8001308:	4b1b      	ldr	r3, [pc, #108]	; (8001378 <SystemInit+0xe0>)
 800130a:	2200      	movs	r2, #0
 800130c:	61da      	str	r2, [r3, #28]

  /* Reset D3CFGR register */
  RCC->D3CFGR = 0x00000000;
 800130e:	4b1a      	ldr	r3, [pc, #104]	; (8001378 <SystemInit+0xe0>)
 8001310:	2200      	movs	r2, #0
 8001312:	621a      	str	r2, [r3, #32]

  /* Reset SRDCFGR register */
  RCC->SRDCFGR = 0x00000000;
#endif
  /* Reset PLLCKSELR register */
  RCC->PLLCKSELR = 0x02020200;
 8001314:	4b18      	ldr	r3, [pc, #96]	; (8001378 <SystemInit+0xe0>)
 8001316:	4a1a      	ldr	r2, [pc, #104]	; (8001380 <SystemInit+0xe8>)
 8001318:	629a      	str	r2, [r3, #40]	; 0x28

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x01FF0000;
 800131a:	4b17      	ldr	r3, [pc, #92]	; (8001378 <SystemInit+0xe0>)
 800131c:	4a19      	ldr	r2, [pc, #100]	; (8001384 <SystemInit+0xec>)
 800131e:	62da      	str	r2, [r3, #44]	; 0x2c
  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x01010280;
 8001320:	4b15      	ldr	r3, [pc, #84]	; (8001378 <SystemInit+0xe0>)
 8001322:	4a19      	ldr	r2, [pc, #100]	; (8001388 <SystemInit+0xf0>)
 8001324:	631a      	str	r2, [r3, #48]	; 0x30
  /* Reset PLL1FRACR register */
  RCC->PLL1FRACR = 0x00000000;
 8001326:	4b14      	ldr	r3, [pc, #80]	; (8001378 <SystemInit+0xe0>)
 8001328:	2200      	movs	r2, #0
 800132a:	635a      	str	r2, [r3, #52]	; 0x34

  /* Reset PLL2DIVR register */
  RCC->PLL2DIVR = 0x01010280;
 800132c:	4b12      	ldr	r3, [pc, #72]	; (8001378 <SystemInit+0xe0>)
 800132e:	4a16      	ldr	r2, [pc, #88]	; (8001388 <SystemInit+0xf0>)
 8001330:	639a      	str	r2, [r3, #56]	; 0x38

  /* Reset PLL2FRACR register */

  RCC->PLL2FRACR = 0x00000000;
 8001332:	4b11      	ldr	r3, [pc, #68]	; (8001378 <SystemInit+0xe0>)
 8001334:	2200      	movs	r2, #0
 8001336:	63da      	str	r2, [r3, #60]	; 0x3c
  /* Reset PLL3DIVR register */
  RCC->PLL3DIVR = 0x01010280;
 8001338:	4b0f      	ldr	r3, [pc, #60]	; (8001378 <SystemInit+0xe0>)
 800133a:	4a13      	ldr	r2, [pc, #76]	; (8001388 <SystemInit+0xf0>)
 800133c:	641a      	str	r2, [r3, #64]	; 0x40

  /* Reset PLL3FRACR register */
  RCC->PLL3FRACR = 0x00000000;
 800133e:	4b0e      	ldr	r3, [pc, #56]	; (8001378 <SystemInit+0xe0>)
 8001340:	2200      	movs	r2, #0
 8001342:	645a      	str	r2, [r3, #68]	; 0x44

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8001344:	4b0c      	ldr	r3, [pc, #48]	; (8001378 <SystemInit+0xe0>)
 8001346:	681b      	ldr	r3, [r3, #0]
 8001348:	4a0b      	ldr	r2, [pc, #44]	; (8001378 <SystemInit+0xe0>)
 800134a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800134e:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 8001350:	4b09      	ldr	r3, [pc, #36]	; (8001378 <SystemInit+0xe0>)
 8001352:	2200      	movs	r2, #0
 8001354:	661a      	str	r2, [r3, #96]	; 0x60
  /*
   * Disable the FMC bank1 (enabled after reset).
   * This, prevents CPU speculation access on this bank which blocks the use of FMC during
   * 24us. During this time the others FMC master (such as LTDC) cannot use it!
   */
  FMC_Bank1_R->BTCR[0] = 0x000030D2;
 8001356:	4b0d      	ldr	r3, [pc, #52]	; (800138c <SystemInit+0xf4>)
 8001358:	f243 02d2 	movw	r2, #12498	; 0x30d2
 800135c:	601a      	str	r2, [r3, #0]

  /* Configure the Vector Table location add offset address for cortex-M7 ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = D1_AXISRAM_BASE  | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal AXI-RAM */
#else
  SCB->VTOR = FLASH_BANK1_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 800135e:	4b04      	ldr	r3, [pc, #16]	; (8001370 <SystemInit+0xd8>)
 8001360:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8001364:	609a      	str	r2, [r3, #8]
#endif

#endif /*DUAL_CORE && CORE_CM4*/

}
 8001366:	bf00      	nop
 8001368:	46bd      	mov	sp, r7
 800136a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800136e:	4770      	bx	lr
 8001370:	e000ed00 	.word	0xe000ed00
 8001374:	52002000 	.word	0x52002000
 8001378:	58024400 	.word	0x58024400
 800137c:	eaf6ed7f 	.word	0xeaf6ed7f
 8001380:	02020200 	.word	0x02020200
 8001384:	01ff0000 	.word	0x01ff0000
 8001388:	01010280 	.word	0x01010280
 800138c:	52004000 	.word	0x52004000

08001390 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack      /* set stack pointer */
 8001390:	f8df d034 	ldr.w	sp, [pc, #52]	; 80013c8 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit
 8001394:	f7ff ff80 	bl	8001298 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001398:	480c      	ldr	r0, [pc, #48]	; (80013cc <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 800139a:	490d      	ldr	r1, [pc, #52]	; (80013d0 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 800139c:	4a0d      	ldr	r2, [pc, #52]	; (80013d4 <LoopFillZerobss+0x1a>)
  movs r3, #0
 800139e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80013a0:	e002      	b.n	80013a8 <LoopCopyDataInit>

080013a2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80013a2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80013a4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80013a6:	3304      	adds	r3, #4

080013a8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80013a8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80013aa:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80013ac:	d3f9      	bcc.n	80013a2 <CopyDataInit>
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80013ae:	4a0a      	ldr	r2, [pc, #40]	; (80013d8 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 80013b0:	4c0a      	ldr	r4, [pc, #40]	; (80013dc <LoopFillZerobss+0x22>)
  movs r3, #0
 80013b2:	2300      	movs	r3, #0
  b LoopFillZerobss
 80013b4:	e001      	b.n	80013ba <LoopFillZerobss>

080013b6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80013b6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80013b8:	3204      	adds	r2, #4

080013ba <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80013ba:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80013bc:	d3fb      	bcc.n	80013b6 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80013be:	f005 fd4f 	bl	8006e60 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80013c2:	f7ff fa37 	bl	8000834 <main>
  bx  lr
 80013c6:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 80013c8:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 80013cc:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80013d0:	2000009c 	.word	0x2000009c
  ldr r2, =_sidata
 80013d4:	08008084 	.word	0x08008084
  ldr r2, =_sbss
 80013d8:	2000009c 	.word	0x2000009c
  ldr r4, =_ebss
 80013dc:	20002438 	.word	0x20002438

080013e0 <ADC3_IRQHandler>:
 * @retval None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80013e0:	e7fe      	b.n	80013e0 <ADC3_IRQHandler>
	...

080013e4 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80013e4:	b580      	push	{r7, lr}
 80013e6:	b082      	sub	sp, #8
 80013e8:	af00      	add	r7, sp, #0
   __HAL_ART_CONFIG_BASE_ADDRESS(0x08100000UL);  /* Configure the Cortex-M4 ART Base address to the Flash Bank 2 : */
   __HAL_ART_ENABLE();                           /* Enable the Cortex-M4 ART */
#endif /* DUAL_CORE &&  CORE_CM4 */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80013ea:	2003      	movs	r0, #3
 80013ec:	f000 f98c 	bl	8001708 <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 80013f0:	f002 f880 	bl	80034f4 <HAL_RCC_GetSysClockFreq>
 80013f4:	4602      	mov	r2, r0
 80013f6:	4b15      	ldr	r3, [pc, #84]	; (800144c <HAL_Init+0x68>)
 80013f8:	699b      	ldr	r3, [r3, #24]
 80013fa:	0a1b      	lsrs	r3, r3, #8
 80013fc:	f003 030f 	and.w	r3, r3, #15
 8001400:	4913      	ldr	r1, [pc, #76]	; (8001450 <HAL_Init+0x6c>)
 8001402:	5ccb      	ldrb	r3, [r1, r3]
 8001404:	f003 031f 	and.w	r3, r3, #31
 8001408:	fa22 f303 	lsr.w	r3, r2, r3
 800140c:	607b      	str	r3, [r7, #4]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

  /* Update the SystemD2Clock global variable */
#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 800140e:	4b0f      	ldr	r3, [pc, #60]	; (800144c <HAL_Init+0x68>)
 8001410:	699b      	ldr	r3, [r3, #24]
 8001412:	f003 030f 	and.w	r3, r3, #15
 8001416:	4a0e      	ldr	r2, [pc, #56]	; (8001450 <HAL_Init+0x6c>)
 8001418:	5cd3      	ldrb	r3, [r2, r3]
 800141a:	f003 031f 	and.w	r3, r3, #31
 800141e:	687a      	ldr	r2, [r7, #4]
 8001420:	fa22 f303 	lsr.w	r3, r2, r3
 8001424:	4a0b      	ldr	r2, [pc, #44]	; (8001454 <HAL_Init+0x70>)
 8001426:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8001428:	4a0b      	ldr	r2, [pc, #44]	; (8001458 <HAL_Init+0x74>)
 800142a:	687b      	ldr	r3, [r7, #4]
 800142c:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 800142e:	2000      	movs	r0, #0
 8001430:	f000 f814 	bl	800145c <HAL_InitTick>
 8001434:	4603      	mov	r3, r0
 8001436:	2b00      	cmp	r3, #0
 8001438:	d001      	beq.n	800143e <HAL_Init+0x5a>
  {
    return HAL_ERROR;
 800143a:	2301      	movs	r3, #1
 800143c:	e002      	b.n	8001444 <HAL_Init+0x60>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 800143e:	f7ff fd0d 	bl	8000e5c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001442:	2300      	movs	r3, #0
}
 8001444:	4618      	mov	r0, r3
 8001446:	3708      	adds	r7, #8
 8001448:	46bd      	mov	sp, r7
 800144a:	bd80      	pop	{r7, pc}
 800144c:	58024400 	.word	0x58024400
 8001450:	08007fa4 	.word	0x08007fa4
 8001454:	20000004 	.word	0x20000004
 8001458:	20000000 	.word	0x20000000

0800145c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800145c:	b580      	push	{r7, lr}
 800145e:	b082      	sub	sp, #8
 8001460:	af00      	add	r7, sp, #0
 8001462:	6078      	str	r0, [r7, #4]
  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that don't take the value zero)*/
  if((uint32_t)uwTickFreq == 0UL)
 8001464:	4b15      	ldr	r3, [pc, #84]	; (80014bc <HAL_InitTick+0x60>)
 8001466:	781b      	ldrb	r3, [r3, #0]
 8001468:	2b00      	cmp	r3, #0
 800146a:	d101      	bne.n	8001470 <HAL_InitTick+0x14>
  {
    return HAL_ERROR;
 800146c:	2301      	movs	r3, #1
 800146e:	e021      	b.n	80014b4 <HAL_InitTick+0x58>
  }

    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000UL / (uint32_t)uwTickFreq)) > 0U)
 8001470:	4b13      	ldr	r3, [pc, #76]	; (80014c0 <HAL_InitTick+0x64>)
 8001472:	681a      	ldr	r2, [r3, #0]
 8001474:	4b11      	ldr	r3, [pc, #68]	; (80014bc <HAL_InitTick+0x60>)
 8001476:	781b      	ldrb	r3, [r3, #0]
 8001478:	4619      	mov	r1, r3
 800147a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800147e:	fbb3 f3f1 	udiv	r3, r3, r1
 8001482:	fbb2 f3f3 	udiv	r3, r2, r3
 8001486:	4618      	mov	r0, r3
 8001488:	f000 f971 	bl	800176e <HAL_SYSTICK_Config>
 800148c:	4603      	mov	r3, r0
 800148e:	2b00      	cmp	r3, #0
 8001490:	d001      	beq.n	8001496 <HAL_InitTick+0x3a>
    {
      return HAL_ERROR;
 8001492:	2301      	movs	r3, #1
 8001494:	e00e      	b.n	80014b4 <HAL_InitTick+0x58>
    }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001496:	687b      	ldr	r3, [r7, #4]
 8001498:	2b0f      	cmp	r3, #15
 800149a:	d80a      	bhi.n	80014b2 <HAL_InitTick+0x56>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800149c:	2200      	movs	r2, #0
 800149e:	6879      	ldr	r1, [r7, #4]
 80014a0:	f04f 30ff 	mov.w	r0, #4294967295
 80014a4:	f000 f93b 	bl	800171e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80014a8:	4a06      	ldr	r2, [pc, #24]	; (80014c4 <HAL_InitTick+0x68>)
 80014aa:	687b      	ldr	r3, [r7, #4]
 80014ac:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80014ae:	2300      	movs	r3, #0
 80014b0:	e000      	b.n	80014b4 <HAL_InitTick+0x58>
    return HAL_ERROR;
 80014b2:	2301      	movs	r3, #1
}
 80014b4:	4618      	mov	r0, r3
 80014b6:	3708      	adds	r7, #8
 80014b8:	46bd      	mov	sp, r7
 80014ba:	bd80      	pop	{r7, pc}
 80014bc:	2000000c 	.word	0x2000000c
 80014c0:	20000000 	.word	0x20000000
 80014c4:	20000008 	.word	0x20000008

080014c8 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80014c8:	b480      	push	{r7}
 80014ca:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 80014cc:	4b06      	ldr	r3, [pc, #24]	; (80014e8 <HAL_IncTick+0x20>)
 80014ce:	781b      	ldrb	r3, [r3, #0]
 80014d0:	461a      	mov	r2, r3
 80014d2:	4b06      	ldr	r3, [pc, #24]	; (80014ec <HAL_IncTick+0x24>)
 80014d4:	681b      	ldr	r3, [r3, #0]
 80014d6:	4413      	add	r3, r2
 80014d8:	4a04      	ldr	r2, [pc, #16]	; (80014ec <HAL_IncTick+0x24>)
 80014da:	6013      	str	r3, [r2, #0]
}
 80014dc:	bf00      	nop
 80014de:	46bd      	mov	sp, r7
 80014e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014e4:	4770      	bx	lr
 80014e6:	bf00      	nop
 80014e8:	2000000c 	.word	0x2000000c
 80014ec:	20002424 	.word	0x20002424

080014f0 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80014f0:	b480      	push	{r7}
 80014f2:	af00      	add	r7, sp, #0
  return uwTick;
 80014f4:	4b03      	ldr	r3, [pc, #12]	; (8001504 <HAL_GetTick+0x14>)
 80014f6:	681b      	ldr	r3, [r3, #0]
}
 80014f8:	4618      	mov	r0, r3
 80014fa:	46bd      	mov	sp, r7
 80014fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001500:	4770      	bx	lr
 8001502:	bf00      	nop
 8001504:	20002424 	.word	0x20002424

08001508 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001508:	b580      	push	{r7, lr}
 800150a:	b084      	sub	sp, #16
 800150c:	af00      	add	r7, sp, #0
 800150e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001510:	f7ff ffee 	bl	80014f0 <HAL_GetTick>
 8001514:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001516:	687b      	ldr	r3, [r7, #4]
 8001518:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800151a:	68fb      	ldr	r3, [r7, #12]
 800151c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001520:	d005      	beq.n	800152e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001522:	4b0a      	ldr	r3, [pc, #40]	; (800154c <HAL_Delay+0x44>)
 8001524:	781b      	ldrb	r3, [r3, #0]
 8001526:	461a      	mov	r2, r3
 8001528:	68fb      	ldr	r3, [r7, #12]
 800152a:	4413      	add	r3, r2
 800152c:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 800152e:	bf00      	nop
 8001530:	f7ff ffde 	bl	80014f0 <HAL_GetTick>
 8001534:	4602      	mov	r2, r0
 8001536:	68bb      	ldr	r3, [r7, #8]
 8001538:	1ad3      	subs	r3, r2, r3
 800153a:	68fa      	ldr	r2, [r7, #12]
 800153c:	429a      	cmp	r2, r3
 800153e:	d8f7      	bhi.n	8001530 <HAL_Delay+0x28>
  {
  }
}
 8001540:	bf00      	nop
 8001542:	bf00      	nop
 8001544:	3710      	adds	r7, #16
 8001546:	46bd      	mov	sp, r7
 8001548:	bd80      	pop	{r7, pc}
 800154a:	bf00      	nop
 800154c:	2000000c 	.word	0x2000000c

08001550 <HAL_GetREVID>:
/**
  * @brief  Returns the device revision identifier.
  * @retval Device revision identifier
  */
uint32_t HAL_GetREVID(void)
{
 8001550:	b480      	push	{r7}
 8001552:	af00      	add	r7, sp, #0
   return((DBGMCU->IDCODE) >> 16);
 8001554:	4b03      	ldr	r3, [pc, #12]	; (8001564 <HAL_GetREVID+0x14>)
 8001556:	681b      	ldr	r3, [r3, #0]
 8001558:	0c1b      	lsrs	r3, r3, #16
}
 800155a:	4618      	mov	r0, r3
 800155c:	46bd      	mov	sp, r7
 800155e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001562:	4770      	bx	lr
 8001564:	5c001000 	.word	0x5c001000

08001568 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001568:	b480      	push	{r7}
 800156a:	b085      	sub	sp, #20
 800156c:	af00      	add	r7, sp, #0
 800156e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001570:	687b      	ldr	r3, [r7, #4]
 8001572:	f003 0307 	and.w	r3, r3, #7
 8001576:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001578:	4b0b      	ldr	r3, [pc, #44]	; (80015a8 <__NVIC_SetPriorityGrouping+0x40>)
 800157a:	68db      	ldr	r3, [r3, #12]
 800157c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800157e:	68ba      	ldr	r2, [r7, #8]
 8001580:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001584:	4013      	ands	r3, r2
 8001586:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001588:	68fb      	ldr	r3, [r7, #12]
 800158a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800158c:	68bb      	ldr	r3, [r7, #8]
 800158e:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8001590:	4b06      	ldr	r3, [pc, #24]	; (80015ac <__NVIC_SetPriorityGrouping+0x44>)
 8001592:	4313      	orrs	r3, r2
 8001594:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001596:	4a04      	ldr	r2, [pc, #16]	; (80015a8 <__NVIC_SetPriorityGrouping+0x40>)
 8001598:	68bb      	ldr	r3, [r7, #8]
 800159a:	60d3      	str	r3, [r2, #12]
}
 800159c:	bf00      	nop
 800159e:	3714      	adds	r7, #20
 80015a0:	46bd      	mov	sp, r7
 80015a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015a6:	4770      	bx	lr
 80015a8:	e000ed00 	.word	0xe000ed00
 80015ac:	05fa0000 	.word	0x05fa0000

080015b0 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80015b0:	b480      	push	{r7}
 80015b2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80015b4:	4b04      	ldr	r3, [pc, #16]	; (80015c8 <__NVIC_GetPriorityGrouping+0x18>)
 80015b6:	68db      	ldr	r3, [r3, #12]
 80015b8:	0a1b      	lsrs	r3, r3, #8
 80015ba:	f003 0307 	and.w	r3, r3, #7
}
 80015be:	4618      	mov	r0, r3
 80015c0:	46bd      	mov	sp, r7
 80015c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015c6:	4770      	bx	lr
 80015c8:	e000ed00 	.word	0xe000ed00

080015cc <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80015cc:	b480      	push	{r7}
 80015ce:	b083      	sub	sp, #12
 80015d0:	af00      	add	r7, sp, #0
 80015d2:	4603      	mov	r3, r0
 80015d4:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 80015d6:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80015da:	2b00      	cmp	r3, #0
 80015dc:	db0b      	blt.n	80015f6 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80015de:	88fb      	ldrh	r3, [r7, #6]
 80015e0:	f003 021f 	and.w	r2, r3, #31
 80015e4:	4907      	ldr	r1, [pc, #28]	; (8001604 <__NVIC_EnableIRQ+0x38>)
 80015e6:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80015ea:	095b      	lsrs	r3, r3, #5
 80015ec:	2001      	movs	r0, #1
 80015ee:	fa00 f202 	lsl.w	r2, r0, r2
 80015f2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 80015f6:	bf00      	nop
 80015f8:	370c      	adds	r7, #12
 80015fa:	46bd      	mov	sp, r7
 80015fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001600:	4770      	bx	lr
 8001602:	bf00      	nop
 8001604:	e000e100 	.word	0xe000e100

08001608 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001608:	b480      	push	{r7}
 800160a:	b083      	sub	sp, #12
 800160c:	af00      	add	r7, sp, #0
 800160e:	4603      	mov	r3, r0
 8001610:	6039      	str	r1, [r7, #0]
 8001612:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8001614:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001618:	2b00      	cmp	r3, #0
 800161a:	db0a      	blt.n	8001632 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800161c:	683b      	ldr	r3, [r7, #0]
 800161e:	b2da      	uxtb	r2, r3
 8001620:	490c      	ldr	r1, [pc, #48]	; (8001654 <__NVIC_SetPriority+0x4c>)
 8001622:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001626:	0112      	lsls	r2, r2, #4
 8001628:	b2d2      	uxtb	r2, r2
 800162a:	440b      	add	r3, r1
 800162c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001630:	e00a      	b.n	8001648 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001632:	683b      	ldr	r3, [r7, #0]
 8001634:	b2da      	uxtb	r2, r3
 8001636:	4908      	ldr	r1, [pc, #32]	; (8001658 <__NVIC_SetPriority+0x50>)
 8001638:	88fb      	ldrh	r3, [r7, #6]
 800163a:	f003 030f 	and.w	r3, r3, #15
 800163e:	3b04      	subs	r3, #4
 8001640:	0112      	lsls	r2, r2, #4
 8001642:	b2d2      	uxtb	r2, r2
 8001644:	440b      	add	r3, r1
 8001646:	761a      	strb	r2, [r3, #24]
}
 8001648:	bf00      	nop
 800164a:	370c      	adds	r7, #12
 800164c:	46bd      	mov	sp, r7
 800164e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001652:	4770      	bx	lr
 8001654:	e000e100 	.word	0xe000e100
 8001658:	e000ed00 	.word	0xe000ed00

0800165c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800165c:	b480      	push	{r7}
 800165e:	b089      	sub	sp, #36	; 0x24
 8001660:	af00      	add	r7, sp, #0
 8001662:	60f8      	str	r0, [r7, #12]
 8001664:	60b9      	str	r1, [r7, #8]
 8001666:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001668:	68fb      	ldr	r3, [r7, #12]
 800166a:	f003 0307 	and.w	r3, r3, #7
 800166e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001670:	69fb      	ldr	r3, [r7, #28]
 8001672:	f1c3 0307 	rsb	r3, r3, #7
 8001676:	2b04      	cmp	r3, #4
 8001678:	bf28      	it	cs
 800167a:	2304      	movcs	r3, #4
 800167c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800167e:	69fb      	ldr	r3, [r7, #28]
 8001680:	3304      	adds	r3, #4
 8001682:	2b06      	cmp	r3, #6
 8001684:	d902      	bls.n	800168c <NVIC_EncodePriority+0x30>
 8001686:	69fb      	ldr	r3, [r7, #28]
 8001688:	3b03      	subs	r3, #3
 800168a:	e000      	b.n	800168e <NVIC_EncodePriority+0x32>
 800168c:	2300      	movs	r3, #0
 800168e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001690:	f04f 32ff 	mov.w	r2, #4294967295
 8001694:	69bb      	ldr	r3, [r7, #24]
 8001696:	fa02 f303 	lsl.w	r3, r2, r3
 800169a:	43da      	mvns	r2, r3
 800169c:	68bb      	ldr	r3, [r7, #8]
 800169e:	401a      	ands	r2, r3
 80016a0:	697b      	ldr	r3, [r7, #20]
 80016a2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80016a4:	f04f 31ff 	mov.w	r1, #4294967295
 80016a8:	697b      	ldr	r3, [r7, #20]
 80016aa:	fa01 f303 	lsl.w	r3, r1, r3
 80016ae:	43d9      	mvns	r1, r3
 80016b0:	687b      	ldr	r3, [r7, #4]
 80016b2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80016b4:	4313      	orrs	r3, r2
         );
}
 80016b6:	4618      	mov	r0, r3
 80016b8:	3724      	adds	r7, #36	; 0x24
 80016ba:	46bd      	mov	sp, r7
 80016bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016c0:	4770      	bx	lr
	...

080016c4 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80016c4:	b580      	push	{r7, lr}
 80016c6:	b082      	sub	sp, #8
 80016c8:	af00      	add	r7, sp, #0
 80016ca:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80016cc:	687b      	ldr	r3, [r7, #4]
 80016ce:	3b01      	subs	r3, #1
 80016d0:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80016d4:	d301      	bcc.n	80016da <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80016d6:	2301      	movs	r3, #1
 80016d8:	e00f      	b.n	80016fa <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80016da:	4a0a      	ldr	r2, [pc, #40]	; (8001704 <SysTick_Config+0x40>)
 80016dc:	687b      	ldr	r3, [r7, #4]
 80016de:	3b01      	subs	r3, #1
 80016e0:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80016e2:	210f      	movs	r1, #15
 80016e4:	f04f 30ff 	mov.w	r0, #4294967295
 80016e8:	f7ff ff8e 	bl	8001608 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80016ec:	4b05      	ldr	r3, [pc, #20]	; (8001704 <SysTick_Config+0x40>)
 80016ee:	2200      	movs	r2, #0
 80016f0:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80016f2:	4b04      	ldr	r3, [pc, #16]	; (8001704 <SysTick_Config+0x40>)
 80016f4:	2207      	movs	r2, #7
 80016f6:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80016f8:	2300      	movs	r3, #0
}
 80016fa:	4618      	mov	r0, r3
 80016fc:	3708      	adds	r7, #8
 80016fe:	46bd      	mov	sp, r7
 8001700:	bd80      	pop	{r7, pc}
 8001702:	bf00      	nop
 8001704:	e000e010 	.word	0xe000e010

08001708 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001708:	b580      	push	{r7, lr}
 800170a:	b082      	sub	sp, #8
 800170c:	af00      	add	r7, sp, #0
 800170e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001710:	6878      	ldr	r0, [r7, #4]
 8001712:	f7ff ff29 	bl	8001568 <__NVIC_SetPriorityGrouping>
}
 8001716:	bf00      	nop
 8001718:	3708      	adds	r7, #8
 800171a:	46bd      	mov	sp, r7
 800171c:	bd80      	pop	{r7, pc}

0800171e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800171e:	b580      	push	{r7, lr}
 8001720:	b086      	sub	sp, #24
 8001722:	af00      	add	r7, sp, #0
 8001724:	4603      	mov	r3, r0
 8001726:	60b9      	str	r1, [r7, #8]
 8001728:	607a      	str	r2, [r7, #4]
 800172a:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 800172c:	f7ff ff40 	bl	80015b0 <__NVIC_GetPriorityGrouping>
 8001730:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001732:	687a      	ldr	r2, [r7, #4]
 8001734:	68b9      	ldr	r1, [r7, #8]
 8001736:	6978      	ldr	r0, [r7, #20]
 8001738:	f7ff ff90 	bl	800165c <NVIC_EncodePriority>
 800173c:	4602      	mov	r2, r0
 800173e:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8001742:	4611      	mov	r1, r2
 8001744:	4618      	mov	r0, r3
 8001746:	f7ff ff5f 	bl	8001608 <__NVIC_SetPriority>
}
 800174a:	bf00      	nop
 800174c:	3718      	adds	r7, #24
 800174e:	46bd      	mov	sp, r7
 8001750:	bd80      	pop	{r7, pc}

08001752 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32h7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001752:	b580      	push	{r7, lr}
 8001754:	b082      	sub	sp, #8
 8001756:	af00      	add	r7, sp, #0
 8001758:	4603      	mov	r3, r0
 800175a:	80fb      	strh	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800175c:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001760:	4618      	mov	r0, r3
 8001762:	f7ff ff33 	bl	80015cc <__NVIC_EnableIRQ>
}
 8001766:	bf00      	nop
 8001768:	3708      	adds	r7, #8
 800176a:	46bd      	mov	sp, r7
 800176c:	bd80      	pop	{r7, pc}

0800176e <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status   - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800176e:	b580      	push	{r7, lr}
 8001770:	b082      	sub	sp, #8
 8001772:	af00      	add	r7, sp, #0
 8001774:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001776:	6878      	ldr	r0, [r7, #4]
 8001778:	f7ff ffa4 	bl	80016c4 <SysTick_Config>
 800177c:	4603      	mov	r3, r0
}
 800177e:	4618      	mov	r0, r3
 8001780:	3708      	adds	r7, #8
 8001782:	46bd      	mov	sp, r7
 8001784:	bd80      	pop	{r7, pc}
	...

08001788 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8001788:	b580      	push	{r7, lr}
 800178a:	b086      	sub	sp, #24
 800178c:	af00      	add	r7, sp, #0
 800178e:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs_dma;
  BDMA_Base_Registers *regs_bdma;
  const __IO uint32_t *enableRegister;

  uint32_t tickstart = HAL_GetTick();
 8001790:	f7ff feae 	bl	80014f0 <HAL_GetTick>
 8001794:	6138      	str	r0, [r7, #16]

 /* Check the DMA peripheral handle */
  if(hdma == NULL)
 8001796:	687b      	ldr	r3, [r7, #4]
 8001798:	2b00      	cmp	r3, #0
 800179a:	d101      	bne.n	80017a0 <HAL_DMA_Abort+0x18>
  {
    return HAL_ERROR;
 800179c:	2301      	movs	r3, #1
 800179e:	e2dc      	b.n	8001d5a <HAL_DMA_Abort+0x5d2>
  }

  /* Check the DMA peripheral state */
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80017a0:	687b      	ldr	r3, [r7, #4]
 80017a2:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80017a6:	b2db      	uxtb	r3, r3
 80017a8:	2b02      	cmp	r3, #2
 80017aa:	d008      	beq.n	80017be <HAL_DMA_Abort+0x36>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80017ac:	687b      	ldr	r3, [r7, #4]
 80017ae:	2280      	movs	r2, #128	; 0x80
 80017b0:	655a      	str	r2, [r3, #84]	; 0x54

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80017b2:	687b      	ldr	r3, [r7, #4]
 80017b4:	2200      	movs	r2, #0
 80017b6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    return HAL_ERROR;
 80017ba:	2301      	movs	r3, #1
 80017bc:	e2cd      	b.n	8001d5a <HAL_DMA_Abort+0x5d2>
  }
  else
  {
    /* Disable all the transfer interrupts */
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 80017be:	687b      	ldr	r3, [r7, #4]
 80017c0:	681b      	ldr	r3, [r3, #0]
 80017c2:	4a76      	ldr	r2, [pc, #472]	; (800199c <HAL_DMA_Abort+0x214>)
 80017c4:	4293      	cmp	r3, r2
 80017c6:	d04a      	beq.n	800185e <HAL_DMA_Abort+0xd6>
 80017c8:	687b      	ldr	r3, [r7, #4]
 80017ca:	681b      	ldr	r3, [r3, #0]
 80017cc:	4a74      	ldr	r2, [pc, #464]	; (80019a0 <HAL_DMA_Abort+0x218>)
 80017ce:	4293      	cmp	r3, r2
 80017d0:	d045      	beq.n	800185e <HAL_DMA_Abort+0xd6>
 80017d2:	687b      	ldr	r3, [r7, #4]
 80017d4:	681b      	ldr	r3, [r3, #0]
 80017d6:	4a73      	ldr	r2, [pc, #460]	; (80019a4 <HAL_DMA_Abort+0x21c>)
 80017d8:	4293      	cmp	r3, r2
 80017da:	d040      	beq.n	800185e <HAL_DMA_Abort+0xd6>
 80017dc:	687b      	ldr	r3, [r7, #4]
 80017de:	681b      	ldr	r3, [r3, #0]
 80017e0:	4a71      	ldr	r2, [pc, #452]	; (80019a8 <HAL_DMA_Abort+0x220>)
 80017e2:	4293      	cmp	r3, r2
 80017e4:	d03b      	beq.n	800185e <HAL_DMA_Abort+0xd6>
 80017e6:	687b      	ldr	r3, [r7, #4]
 80017e8:	681b      	ldr	r3, [r3, #0]
 80017ea:	4a70      	ldr	r2, [pc, #448]	; (80019ac <HAL_DMA_Abort+0x224>)
 80017ec:	4293      	cmp	r3, r2
 80017ee:	d036      	beq.n	800185e <HAL_DMA_Abort+0xd6>
 80017f0:	687b      	ldr	r3, [r7, #4]
 80017f2:	681b      	ldr	r3, [r3, #0]
 80017f4:	4a6e      	ldr	r2, [pc, #440]	; (80019b0 <HAL_DMA_Abort+0x228>)
 80017f6:	4293      	cmp	r3, r2
 80017f8:	d031      	beq.n	800185e <HAL_DMA_Abort+0xd6>
 80017fa:	687b      	ldr	r3, [r7, #4]
 80017fc:	681b      	ldr	r3, [r3, #0]
 80017fe:	4a6d      	ldr	r2, [pc, #436]	; (80019b4 <HAL_DMA_Abort+0x22c>)
 8001800:	4293      	cmp	r3, r2
 8001802:	d02c      	beq.n	800185e <HAL_DMA_Abort+0xd6>
 8001804:	687b      	ldr	r3, [r7, #4]
 8001806:	681b      	ldr	r3, [r3, #0]
 8001808:	4a6b      	ldr	r2, [pc, #428]	; (80019b8 <HAL_DMA_Abort+0x230>)
 800180a:	4293      	cmp	r3, r2
 800180c:	d027      	beq.n	800185e <HAL_DMA_Abort+0xd6>
 800180e:	687b      	ldr	r3, [r7, #4]
 8001810:	681b      	ldr	r3, [r3, #0]
 8001812:	4a6a      	ldr	r2, [pc, #424]	; (80019bc <HAL_DMA_Abort+0x234>)
 8001814:	4293      	cmp	r3, r2
 8001816:	d022      	beq.n	800185e <HAL_DMA_Abort+0xd6>
 8001818:	687b      	ldr	r3, [r7, #4]
 800181a:	681b      	ldr	r3, [r3, #0]
 800181c:	4a68      	ldr	r2, [pc, #416]	; (80019c0 <HAL_DMA_Abort+0x238>)
 800181e:	4293      	cmp	r3, r2
 8001820:	d01d      	beq.n	800185e <HAL_DMA_Abort+0xd6>
 8001822:	687b      	ldr	r3, [r7, #4]
 8001824:	681b      	ldr	r3, [r3, #0]
 8001826:	4a67      	ldr	r2, [pc, #412]	; (80019c4 <HAL_DMA_Abort+0x23c>)
 8001828:	4293      	cmp	r3, r2
 800182a:	d018      	beq.n	800185e <HAL_DMA_Abort+0xd6>
 800182c:	687b      	ldr	r3, [r7, #4]
 800182e:	681b      	ldr	r3, [r3, #0]
 8001830:	4a65      	ldr	r2, [pc, #404]	; (80019c8 <HAL_DMA_Abort+0x240>)
 8001832:	4293      	cmp	r3, r2
 8001834:	d013      	beq.n	800185e <HAL_DMA_Abort+0xd6>
 8001836:	687b      	ldr	r3, [r7, #4]
 8001838:	681b      	ldr	r3, [r3, #0]
 800183a:	4a64      	ldr	r2, [pc, #400]	; (80019cc <HAL_DMA_Abort+0x244>)
 800183c:	4293      	cmp	r3, r2
 800183e:	d00e      	beq.n	800185e <HAL_DMA_Abort+0xd6>
 8001840:	687b      	ldr	r3, [r7, #4]
 8001842:	681b      	ldr	r3, [r3, #0]
 8001844:	4a62      	ldr	r2, [pc, #392]	; (80019d0 <HAL_DMA_Abort+0x248>)
 8001846:	4293      	cmp	r3, r2
 8001848:	d009      	beq.n	800185e <HAL_DMA_Abort+0xd6>
 800184a:	687b      	ldr	r3, [r7, #4]
 800184c:	681b      	ldr	r3, [r3, #0]
 800184e:	4a61      	ldr	r2, [pc, #388]	; (80019d4 <HAL_DMA_Abort+0x24c>)
 8001850:	4293      	cmp	r3, r2
 8001852:	d004      	beq.n	800185e <HAL_DMA_Abort+0xd6>
 8001854:	687b      	ldr	r3, [r7, #4]
 8001856:	681b      	ldr	r3, [r3, #0]
 8001858:	4a5f      	ldr	r2, [pc, #380]	; (80019d8 <HAL_DMA_Abort+0x250>)
 800185a:	4293      	cmp	r3, r2
 800185c:	d101      	bne.n	8001862 <HAL_DMA_Abort+0xda>
 800185e:	2301      	movs	r3, #1
 8001860:	e000      	b.n	8001864 <HAL_DMA_Abort+0xdc>
 8001862:	2300      	movs	r3, #0
 8001864:	2b00      	cmp	r3, #0
 8001866:	d013      	beq.n	8001890 <HAL_DMA_Abort+0x108>
    {
       /* Disable DMA All Interrupts  */
      ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME | DMA_IT_HT);
 8001868:	687b      	ldr	r3, [r7, #4]
 800186a:	681b      	ldr	r3, [r3, #0]
 800186c:	681a      	ldr	r2, [r3, #0]
 800186e:	687b      	ldr	r3, [r7, #4]
 8001870:	681b      	ldr	r3, [r3, #0]
 8001872:	f022 021e 	bic.w	r2, r2, #30
 8001876:	601a      	str	r2, [r3, #0]
      ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR &= ~(DMA_IT_FE);
 8001878:	687b      	ldr	r3, [r7, #4]
 800187a:	681b      	ldr	r3, [r3, #0]
 800187c:	695a      	ldr	r2, [r3, #20]
 800187e:	687b      	ldr	r3, [r7, #4]
 8001880:	681b      	ldr	r3, [r3, #0]
 8001882:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8001886:	615a      	str	r2, [r3, #20]

      enableRegister = (__IO uint32_t *)(&(((DMA_Stream_TypeDef   *)hdma->Instance)->CR));
 8001888:	687b      	ldr	r3, [r7, #4]
 800188a:	681b      	ldr	r3, [r3, #0]
 800188c:	617b      	str	r3, [r7, #20]
 800188e:	e00a      	b.n	80018a6 <HAL_DMA_Abort+0x11e>
    }
    else /* BDMA channel */
    {
      /* Disable DMA All Interrupts */
      ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  &= ~(BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE);
 8001890:	687b      	ldr	r3, [r7, #4]
 8001892:	681b      	ldr	r3, [r3, #0]
 8001894:	681a      	ldr	r2, [r3, #0]
 8001896:	687b      	ldr	r3, [r7, #4]
 8001898:	681b      	ldr	r3, [r3, #0]
 800189a:	f022 020e 	bic.w	r2, r2, #14
 800189e:	601a      	str	r2, [r3, #0]

      enableRegister = (__IO uint32_t *)(&(((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR));
 80018a0:	687b      	ldr	r3, [r7, #4]
 80018a2:	681b      	ldr	r3, [r3, #0]
 80018a4:	617b      	str	r3, [r7, #20]
    }

    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 80018a6:	687b      	ldr	r3, [r7, #4]
 80018a8:	681b      	ldr	r3, [r3, #0]
 80018aa:	4a3c      	ldr	r2, [pc, #240]	; (800199c <HAL_DMA_Abort+0x214>)
 80018ac:	4293      	cmp	r3, r2
 80018ae:	d072      	beq.n	8001996 <HAL_DMA_Abort+0x20e>
 80018b0:	687b      	ldr	r3, [r7, #4]
 80018b2:	681b      	ldr	r3, [r3, #0]
 80018b4:	4a3a      	ldr	r2, [pc, #232]	; (80019a0 <HAL_DMA_Abort+0x218>)
 80018b6:	4293      	cmp	r3, r2
 80018b8:	d06d      	beq.n	8001996 <HAL_DMA_Abort+0x20e>
 80018ba:	687b      	ldr	r3, [r7, #4]
 80018bc:	681b      	ldr	r3, [r3, #0]
 80018be:	4a39      	ldr	r2, [pc, #228]	; (80019a4 <HAL_DMA_Abort+0x21c>)
 80018c0:	4293      	cmp	r3, r2
 80018c2:	d068      	beq.n	8001996 <HAL_DMA_Abort+0x20e>
 80018c4:	687b      	ldr	r3, [r7, #4]
 80018c6:	681b      	ldr	r3, [r3, #0]
 80018c8:	4a37      	ldr	r2, [pc, #220]	; (80019a8 <HAL_DMA_Abort+0x220>)
 80018ca:	4293      	cmp	r3, r2
 80018cc:	d063      	beq.n	8001996 <HAL_DMA_Abort+0x20e>
 80018ce:	687b      	ldr	r3, [r7, #4]
 80018d0:	681b      	ldr	r3, [r3, #0]
 80018d2:	4a36      	ldr	r2, [pc, #216]	; (80019ac <HAL_DMA_Abort+0x224>)
 80018d4:	4293      	cmp	r3, r2
 80018d6:	d05e      	beq.n	8001996 <HAL_DMA_Abort+0x20e>
 80018d8:	687b      	ldr	r3, [r7, #4]
 80018da:	681b      	ldr	r3, [r3, #0]
 80018dc:	4a34      	ldr	r2, [pc, #208]	; (80019b0 <HAL_DMA_Abort+0x228>)
 80018de:	4293      	cmp	r3, r2
 80018e0:	d059      	beq.n	8001996 <HAL_DMA_Abort+0x20e>
 80018e2:	687b      	ldr	r3, [r7, #4]
 80018e4:	681b      	ldr	r3, [r3, #0]
 80018e6:	4a33      	ldr	r2, [pc, #204]	; (80019b4 <HAL_DMA_Abort+0x22c>)
 80018e8:	4293      	cmp	r3, r2
 80018ea:	d054      	beq.n	8001996 <HAL_DMA_Abort+0x20e>
 80018ec:	687b      	ldr	r3, [r7, #4]
 80018ee:	681b      	ldr	r3, [r3, #0]
 80018f0:	4a31      	ldr	r2, [pc, #196]	; (80019b8 <HAL_DMA_Abort+0x230>)
 80018f2:	4293      	cmp	r3, r2
 80018f4:	d04f      	beq.n	8001996 <HAL_DMA_Abort+0x20e>
 80018f6:	687b      	ldr	r3, [r7, #4]
 80018f8:	681b      	ldr	r3, [r3, #0]
 80018fa:	4a30      	ldr	r2, [pc, #192]	; (80019bc <HAL_DMA_Abort+0x234>)
 80018fc:	4293      	cmp	r3, r2
 80018fe:	d04a      	beq.n	8001996 <HAL_DMA_Abort+0x20e>
 8001900:	687b      	ldr	r3, [r7, #4]
 8001902:	681b      	ldr	r3, [r3, #0]
 8001904:	4a2e      	ldr	r2, [pc, #184]	; (80019c0 <HAL_DMA_Abort+0x238>)
 8001906:	4293      	cmp	r3, r2
 8001908:	d045      	beq.n	8001996 <HAL_DMA_Abort+0x20e>
 800190a:	687b      	ldr	r3, [r7, #4]
 800190c:	681b      	ldr	r3, [r3, #0]
 800190e:	4a2d      	ldr	r2, [pc, #180]	; (80019c4 <HAL_DMA_Abort+0x23c>)
 8001910:	4293      	cmp	r3, r2
 8001912:	d040      	beq.n	8001996 <HAL_DMA_Abort+0x20e>
 8001914:	687b      	ldr	r3, [r7, #4]
 8001916:	681b      	ldr	r3, [r3, #0]
 8001918:	4a2b      	ldr	r2, [pc, #172]	; (80019c8 <HAL_DMA_Abort+0x240>)
 800191a:	4293      	cmp	r3, r2
 800191c:	d03b      	beq.n	8001996 <HAL_DMA_Abort+0x20e>
 800191e:	687b      	ldr	r3, [r7, #4]
 8001920:	681b      	ldr	r3, [r3, #0]
 8001922:	4a2a      	ldr	r2, [pc, #168]	; (80019cc <HAL_DMA_Abort+0x244>)
 8001924:	4293      	cmp	r3, r2
 8001926:	d036      	beq.n	8001996 <HAL_DMA_Abort+0x20e>
 8001928:	687b      	ldr	r3, [r7, #4]
 800192a:	681b      	ldr	r3, [r3, #0]
 800192c:	4a28      	ldr	r2, [pc, #160]	; (80019d0 <HAL_DMA_Abort+0x248>)
 800192e:	4293      	cmp	r3, r2
 8001930:	d031      	beq.n	8001996 <HAL_DMA_Abort+0x20e>
 8001932:	687b      	ldr	r3, [r7, #4]
 8001934:	681b      	ldr	r3, [r3, #0]
 8001936:	4a27      	ldr	r2, [pc, #156]	; (80019d4 <HAL_DMA_Abort+0x24c>)
 8001938:	4293      	cmp	r3, r2
 800193a:	d02c      	beq.n	8001996 <HAL_DMA_Abort+0x20e>
 800193c:	687b      	ldr	r3, [r7, #4]
 800193e:	681b      	ldr	r3, [r3, #0]
 8001940:	4a25      	ldr	r2, [pc, #148]	; (80019d8 <HAL_DMA_Abort+0x250>)
 8001942:	4293      	cmp	r3, r2
 8001944:	d027      	beq.n	8001996 <HAL_DMA_Abort+0x20e>
 8001946:	687b      	ldr	r3, [r7, #4]
 8001948:	681b      	ldr	r3, [r3, #0]
 800194a:	4a24      	ldr	r2, [pc, #144]	; (80019dc <HAL_DMA_Abort+0x254>)
 800194c:	4293      	cmp	r3, r2
 800194e:	d022      	beq.n	8001996 <HAL_DMA_Abort+0x20e>
 8001950:	687b      	ldr	r3, [r7, #4]
 8001952:	681b      	ldr	r3, [r3, #0]
 8001954:	4a22      	ldr	r2, [pc, #136]	; (80019e0 <HAL_DMA_Abort+0x258>)
 8001956:	4293      	cmp	r3, r2
 8001958:	d01d      	beq.n	8001996 <HAL_DMA_Abort+0x20e>
 800195a:	687b      	ldr	r3, [r7, #4]
 800195c:	681b      	ldr	r3, [r3, #0]
 800195e:	4a21      	ldr	r2, [pc, #132]	; (80019e4 <HAL_DMA_Abort+0x25c>)
 8001960:	4293      	cmp	r3, r2
 8001962:	d018      	beq.n	8001996 <HAL_DMA_Abort+0x20e>
 8001964:	687b      	ldr	r3, [r7, #4]
 8001966:	681b      	ldr	r3, [r3, #0]
 8001968:	4a1f      	ldr	r2, [pc, #124]	; (80019e8 <HAL_DMA_Abort+0x260>)
 800196a:	4293      	cmp	r3, r2
 800196c:	d013      	beq.n	8001996 <HAL_DMA_Abort+0x20e>
 800196e:	687b      	ldr	r3, [r7, #4]
 8001970:	681b      	ldr	r3, [r3, #0]
 8001972:	4a1e      	ldr	r2, [pc, #120]	; (80019ec <HAL_DMA_Abort+0x264>)
 8001974:	4293      	cmp	r3, r2
 8001976:	d00e      	beq.n	8001996 <HAL_DMA_Abort+0x20e>
 8001978:	687b      	ldr	r3, [r7, #4]
 800197a:	681b      	ldr	r3, [r3, #0]
 800197c:	4a1c      	ldr	r2, [pc, #112]	; (80019f0 <HAL_DMA_Abort+0x268>)
 800197e:	4293      	cmp	r3, r2
 8001980:	d009      	beq.n	8001996 <HAL_DMA_Abort+0x20e>
 8001982:	687b      	ldr	r3, [r7, #4]
 8001984:	681b      	ldr	r3, [r3, #0]
 8001986:	4a1b      	ldr	r2, [pc, #108]	; (80019f4 <HAL_DMA_Abort+0x26c>)
 8001988:	4293      	cmp	r3, r2
 800198a:	d004      	beq.n	8001996 <HAL_DMA_Abort+0x20e>
 800198c:	687b      	ldr	r3, [r7, #4]
 800198e:	681b      	ldr	r3, [r3, #0]
 8001990:	4a19      	ldr	r2, [pc, #100]	; (80019f8 <HAL_DMA_Abort+0x270>)
 8001992:	4293      	cmp	r3, r2
 8001994:	d132      	bne.n	80019fc <HAL_DMA_Abort+0x274>
 8001996:	2301      	movs	r3, #1
 8001998:	e031      	b.n	80019fe <HAL_DMA_Abort+0x276>
 800199a:	bf00      	nop
 800199c:	40020010 	.word	0x40020010
 80019a0:	40020028 	.word	0x40020028
 80019a4:	40020040 	.word	0x40020040
 80019a8:	40020058 	.word	0x40020058
 80019ac:	40020070 	.word	0x40020070
 80019b0:	40020088 	.word	0x40020088
 80019b4:	400200a0 	.word	0x400200a0
 80019b8:	400200b8 	.word	0x400200b8
 80019bc:	40020410 	.word	0x40020410
 80019c0:	40020428 	.word	0x40020428
 80019c4:	40020440 	.word	0x40020440
 80019c8:	40020458 	.word	0x40020458
 80019cc:	40020470 	.word	0x40020470
 80019d0:	40020488 	.word	0x40020488
 80019d4:	400204a0 	.word	0x400204a0
 80019d8:	400204b8 	.word	0x400204b8
 80019dc:	58025408 	.word	0x58025408
 80019e0:	5802541c 	.word	0x5802541c
 80019e4:	58025430 	.word	0x58025430
 80019e8:	58025444 	.word	0x58025444
 80019ec:	58025458 	.word	0x58025458
 80019f0:	5802546c 	.word	0x5802546c
 80019f4:	58025480 	.word	0x58025480
 80019f8:	58025494 	.word	0x58025494
 80019fc:	2300      	movs	r3, #0
 80019fe:	2b00      	cmp	r3, #0
 8001a00:	d007      	beq.n	8001a12 <HAL_DMA_Abort+0x28a>
    {
      /* disable the DMAMUX sync overrun IT */
      hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8001a02:	687b      	ldr	r3, [r7, #4]
 8001a04:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001a06:	681a      	ldr	r2, [r3, #0]
 8001a08:	687b      	ldr	r3, [r7, #4]
 8001a0a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001a0c:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8001a10:	601a      	str	r2, [r3, #0]
    }

    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8001a12:	687b      	ldr	r3, [r7, #4]
 8001a14:	681b      	ldr	r3, [r3, #0]
 8001a16:	4a6d      	ldr	r2, [pc, #436]	; (8001bcc <HAL_DMA_Abort+0x444>)
 8001a18:	4293      	cmp	r3, r2
 8001a1a:	d04a      	beq.n	8001ab2 <HAL_DMA_Abort+0x32a>
 8001a1c:	687b      	ldr	r3, [r7, #4]
 8001a1e:	681b      	ldr	r3, [r3, #0]
 8001a20:	4a6b      	ldr	r2, [pc, #428]	; (8001bd0 <HAL_DMA_Abort+0x448>)
 8001a22:	4293      	cmp	r3, r2
 8001a24:	d045      	beq.n	8001ab2 <HAL_DMA_Abort+0x32a>
 8001a26:	687b      	ldr	r3, [r7, #4]
 8001a28:	681b      	ldr	r3, [r3, #0]
 8001a2a:	4a6a      	ldr	r2, [pc, #424]	; (8001bd4 <HAL_DMA_Abort+0x44c>)
 8001a2c:	4293      	cmp	r3, r2
 8001a2e:	d040      	beq.n	8001ab2 <HAL_DMA_Abort+0x32a>
 8001a30:	687b      	ldr	r3, [r7, #4]
 8001a32:	681b      	ldr	r3, [r3, #0]
 8001a34:	4a68      	ldr	r2, [pc, #416]	; (8001bd8 <HAL_DMA_Abort+0x450>)
 8001a36:	4293      	cmp	r3, r2
 8001a38:	d03b      	beq.n	8001ab2 <HAL_DMA_Abort+0x32a>
 8001a3a:	687b      	ldr	r3, [r7, #4]
 8001a3c:	681b      	ldr	r3, [r3, #0]
 8001a3e:	4a67      	ldr	r2, [pc, #412]	; (8001bdc <HAL_DMA_Abort+0x454>)
 8001a40:	4293      	cmp	r3, r2
 8001a42:	d036      	beq.n	8001ab2 <HAL_DMA_Abort+0x32a>
 8001a44:	687b      	ldr	r3, [r7, #4]
 8001a46:	681b      	ldr	r3, [r3, #0]
 8001a48:	4a65      	ldr	r2, [pc, #404]	; (8001be0 <HAL_DMA_Abort+0x458>)
 8001a4a:	4293      	cmp	r3, r2
 8001a4c:	d031      	beq.n	8001ab2 <HAL_DMA_Abort+0x32a>
 8001a4e:	687b      	ldr	r3, [r7, #4]
 8001a50:	681b      	ldr	r3, [r3, #0]
 8001a52:	4a64      	ldr	r2, [pc, #400]	; (8001be4 <HAL_DMA_Abort+0x45c>)
 8001a54:	4293      	cmp	r3, r2
 8001a56:	d02c      	beq.n	8001ab2 <HAL_DMA_Abort+0x32a>
 8001a58:	687b      	ldr	r3, [r7, #4]
 8001a5a:	681b      	ldr	r3, [r3, #0]
 8001a5c:	4a62      	ldr	r2, [pc, #392]	; (8001be8 <HAL_DMA_Abort+0x460>)
 8001a5e:	4293      	cmp	r3, r2
 8001a60:	d027      	beq.n	8001ab2 <HAL_DMA_Abort+0x32a>
 8001a62:	687b      	ldr	r3, [r7, #4]
 8001a64:	681b      	ldr	r3, [r3, #0]
 8001a66:	4a61      	ldr	r2, [pc, #388]	; (8001bec <HAL_DMA_Abort+0x464>)
 8001a68:	4293      	cmp	r3, r2
 8001a6a:	d022      	beq.n	8001ab2 <HAL_DMA_Abort+0x32a>
 8001a6c:	687b      	ldr	r3, [r7, #4]
 8001a6e:	681b      	ldr	r3, [r3, #0]
 8001a70:	4a5f      	ldr	r2, [pc, #380]	; (8001bf0 <HAL_DMA_Abort+0x468>)
 8001a72:	4293      	cmp	r3, r2
 8001a74:	d01d      	beq.n	8001ab2 <HAL_DMA_Abort+0x32a>
 8001a76:	687b      	ldr	r3, [r7, #4]
 8001a78:	681b      	ldr	r3, [r3, #0]
 8001a7a:	4a5e      	ldr	r2, [pc, #376]	; (8001bf4 <HAL_DMA_Abort+0x46c>)
 8001a7c:	4293      	cmp	r3, r2
 8001a7e:	d018      	beq.n	8001ab2 <HAL_DMA_Abort+0x32a>
 8001a80:	687b      	ldr	r3, [r7, #4]
 8001a82:	681b      	ldr	r3, [r3, #0]
 8001a84:	4a5c      	ldr	r2, [pc, #368]	; (8001bf8 <HAL_DMA_Abort+0x470>)
 8001a86:	4293      	cmp	r3, r2
 8001a88:	d013      	beq.n	8001ab2 <HAL_DMA_Abort+0x32a>
 8001a8a:	687b      	ldr	r3, [r7, #4]
 8001a8c:	681b      	ldr	r3, [r3, #0]
 8001a8e:	4a5b      	ldr	r2, [pc, #364]	; (8001bfc <HAL_DMA_Abort+0x474>)
 8001a90:	4293      	cmp	r3, r2
 8001a92:	d00e      	beq.n	8001ab2 <HAL_DMA_Abort+0x32a>
 8001a94:	687b      	ldr	r3, [r7, #4]
 8001a96:	681b      	ldr	r3, [r3, #0]
 8001a98:	4a59      	ldr	r2, [pc, #356]	; (8001c00 <HAL_DMA_Abort+0x478>)
 8001a9a:	4293      	cmp	r3, r2
 8001a9c:	d009      	beq.n	8001ab2 <HAL_DMA_Abort+0x32a>
 8001a9e:	687b      	ldr	r3, [r7, #4]
 8001aa0:	681b      	ldr	r3, [r3, #0]
 8001aa2:	4a58      	ldr	r2, [pc, #352]	; (8001c04 <HAL_DMA_Abort+0x47c>)
 8001aa4:	4293      	cmp	r3, r2
 8001aa6:	d004      	beq.n	8001ab2 <HAL_DMA_Abort+0x32a>
 8001aa8:	687b      	ldr	r3, [r7, #4]
 8001aaa:	681b      	ldr	r3, [r3, #0]
 8001aac:	4a56      	ldr	r2, [pc, #344]	; (8001c08 <HAL_DMA_Abort+0x480>)
 8001aae:	4293      	cmp	r3, r2
 8001ab0:	d108      	bne.n	8001ac4 <HAL_DMA_Abort+0x33c>
 8001ab2:	687b      	ldr	r3, [r7, #4]
 8001ab4:	681b      	ldr	r3, [r3, #0]
 8001ab6:	681a      	ldr	r2, [r3, #0]
 8001ab8:	687b      	ldr	r3, [r7, #4]
 8001aba:	681b      	ldr	r3, [r3, #0]
 8001abc:	f022 0201 	bic.w	r2, r2, #1
 8001ac0:	601a      	str	r2, [r3, #0]
 8001ac2:	e007      	b.n	8001ad4 <HAL_DMA_Abort+0x34c>
 8001ac4:	687b      	ldr	r3, [r7, #4]
 8001ac6:	681b      	ldr	r3, [r3, #0]
 8001ac8:	681a      	ldr	r2, [r3, #0]
 8001aca:	687b      	ldr	r3, [r7, #4]
 8001acc:	681b      	ldr	r3, [r3, #0]
 8001ace:	f022 0201 	bic.w	r2, r2, #1
 8001ad2:	601a      	str	r2, [r3, #0]

    /* Check if the DMA Stream is effectively disabled */
    while(((*enableRegister) & DMA_SxCR_EN) != 0U)
 8001ad4:	e013      	b.n	8001afe <HAL_DMA_Abort+0x376>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8001ad6:	f7ff fd0b 	bl	80014f0 <HAL_GetTick>
 8001ada:	4602      	mov	r2, r0
 8001adc:	693b      	ldr	r3, [r7, #16]
 8001ade:	1ad3      	subs	r3, r2, r3
 8001ae0:	2b05      	cmp	r3, #5
 8001ae2:	d90c      	bls.n	8001afe <HAL_DMA_Abort+0x376>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8001ae4:	687b      	ldr	r3, [r7, #4]
 8001ae6:	2220      	movs	r2, #32
 8001ae8:	655a      	str	r2, [r3, #84]	; 0x54

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8001aea:	687b      	ldr	r3, [r7, #4]
 8001aec:	2200      	movs	r2, #0
 8001aee:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_ERROR;
 8001af2:	687b      	ldr	r3, [r7, #4]
 8001af4:	2203      	movs	r2, #3
 8001af6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        return HAL_ERROR;
 8001afa:	2301      	movs	r3, #1
 8001afc:	e12d      	b.n	8001d5a <HAL_DMA_Abort+0x5d2>
    while(((*enableRegister) & DMA_SxCR_EN) != 0U)
 8001afe:	697b      	ldr	r3, [r7, #20]
 8001b00:	681b      	ldr	r3, [r3, #0]
 8001b02:	f003 0301 	and.w	r3, r3, #1
 8001b06:	2b00      	cmp	r3, #0
 8001b08:	d1e5      	bne.n	8001ad6 <HAL_DMA_Abort+0x34e>
      }
    }

    /* Clear all interrupt flags at correct offset within the register */
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8001b0a:	687b      	ldr	r3, [r7, #4]
 8001b0c:	681b      	ldr	r3, [r3, #0]
 8001b0e:	4a2f      	ldr	r2, [pc, #188]	; (8001bcc <HAL_DMA_Abort+0x444>)
 8001b10:	4293      	cmp	r3, r2
 8001b12:	d04a      	beq.n	8001baa <HAL_DMA_Abort+0x422>
 8001b14:	687b      	ldr	r3, [r7, #4]
 8001b16:	681b      	ldr	r3, [r3, #0]
 8001b18:	4a2d      	ldr	r2, [pc, #180]	; (8001bd0 <HAL_DMA_Abort+0x448>)
 8001b1a:	4293      	cmp	r3, r2
 8001b1c:	d045      	beq.n	8001baa <HAL_DMA_Abort+0x422>
 8001b1e:	687b      	ldr	r3, [r7, #4]
 8001b20:	681b      	ldr	r3, [r3, #0]
 8001b22:	4a2c      	ldr	r2, [pc, #176]	; (8001bd4 <HAL_DMA_Abort+0x44c>)
 8001b24:	4293      	cmp	r3, r2
 8001b26:	d040      	beq.n	8001baa <HAL_DMA_Abort+0x422>
 8001b28:	687b      	ldr	r3, [r7, #4]
 8001b2a:	681b      	ldr	r3, [r3, #0]
 8001b2c:	4a2a      	ldr	r2, [pc, #168]	; (8001bd8 <HAL_DMA_Abort+0x450>)
 8001b2e:	4293      	cmp	r3, r2
 8001b30:	d03b      	beq.n	8001baa <HAL_DMA_Abort+0x422>
 8001b32:	687b      	ldr	r3, [r7, #4]
 8001b34:	681b      	ldr	r3, [r3, #0]
 8001b36:	4a29      	ldr	r2, [pc, #164]	; (8001bdc <HAL_DMA_Abort+0x454>)
 8001b38:	4293      	cmp	r3, r2
 8001b3a:	d036      	beq.n	8001baa <HAL_DMA_Abort+0x422>
 8001b3c:	687b      	ldr	r3, [r7, #4]
 8001b3e:	681b      	ldr	r3, [r3, #0]
 8001b40:	4a27      	ldr	r2, [pc, #156]	; (8001be0 <HAL_DMA_Abort+0x458>)
 8001b42:	4293      	cmp	r3, r2
 8001b44:	d031      	beq.n	8001baa <HAL_DMA_Abort+0x422>
 8001b46:	687b      	ldr	r3, [r7, #4]
 8001b48:	681b      	ldr	r3, [r3, #0]
 8001b4a:	4a26      	ldr	r2, [pc, #152]	; (8001be4 <HAL_DMA_Abort+0x45c>)
 8001b4c:	4293      	cmp	r3, r2
 8001b4e:	d02c      	beq.n	8001baa <HAL_DMA_Abort+0x422>
 8001b50:	687b      	ldr	r3, [r7, #4]
 8001b52:	681b      	ldr	r3, [r3, #0]
 8001b54:	4a24      	ldr	r2, [pc, #144]	; (8001be8 <HAL_DMA_Abort+0x460>)
 8001b56:	4293      	cmp	r3, r2
 8001b58:	d027      	beq.n	8001baa <HAL_DMA_Abort+0x422>
 8001b5a:	687b      	ldr	r3, [r7, #4]
 8001b5c:	681b      	ldr	r3, [r3, #0]
 8001b5e:	4a23      	ldr	r2, [pc, #140]	; (8001bec <HAL_DMA_Abort+0x464>)
 8001b60:	4293      	cmp	r3, r2
 8001b62:	d022      	beq.n	8001baa <HAL_DMA_Abort+0x422>
 8001b64:	687b      	ldr	r3, [r7, #4]
 8001b66:	681b      	ldr	r3, [r3, #0]
 8001b68:	4a21      	ldr	r2, [pc, #132]	; (8001bf0 <HAL_DMA_Abort+0x468>)
 8001b6a:	4293      	cmp	r3, r2
 8001b6c:	d01d      	beq.n	8001baa <HAL_DMA_Abort+0x422>
 8001b6e:	687b      	ldr	r3, [r7, #4]
 8001b70:	681b      	ldr	r3, [r3, #0]
 8001b72:	4a20      	ldr	r2, [pc, #128]	; (8001bf4 <HAL_DMA_Abort+0x46c>)
 8001b74:	4293      	cmp	r3, r2
 8001b76:	d018      	beq.n	8001baa <HAL_DMA_Abort+0x422>
 8001b78:	687b      	ldr	r3, [r7, #4]
 8001b7a:	681b      	ldr	r3, [r3, #0]
 8001b7c:	4a1e      	ldr	r2, [pc, #120]	; (8001bf8 <HAL_DMA_Abort+0x470>)
 8001b7e:	4293      	cmp	r3, r2
 8001b80:	d013      	beq.n	8001baa <HAL_DMA_Abort+0x422>
 8001b82:	687b      	ldr	r3, [r7, #4]
 8001b84:	681b      	ldr	r3, [r3, #0]
 8001b86:	4a1d      	ldr	r2, [pc, #116]	; (8001bfc <HAL_DMA_Abort+0x474>)
 8001b88:	4293      	cmp	r3, r2
 8001b8a:	d00e      	beq.n	8001baa <HAL_DMA_Abort+0x422>
 8001b8c:	687b      	ldr	r3, [r7, #4]
 8001b8e:	681b      	ldr	r3, [r3, #0]
 8001b90:	4a1b      	ldr	r2, [pc, #108]	; (8001c00 <HAL_DMA_Abort+0x478>)
 8001b92:	4293      	cmp	r3, r2
 8001b94:	d009      	beq.n	8001baa <HAL_DMA_Abort+0x422>
 8001b96:	687b      	ldr	r3, [r7, #4]
 8001b98:	681b      	ldr	r3, [r3, #0]
 8001b9a:	4a1a      	ldr	r2, [pc, #104]	; (8001c04 <HAL_DMA_Abort+0x47c>)
 8001b9c:	4293      	cmp	r3, r2
 8001b9e:	d004      	beq.n	8001baa <HAL_DMA_Abort+0x422>
 8001ba0:	687b      	ldr	r3, [r7, #4]
 8001ba2:	681b      	ldr	r3, [r3, #0]
 8001ba4:	4a18      	ldr	r2, [pc, #96]	; (8001c08 <HAL_DMA_Abort+0x480>)
 8001ba6:	4293      	cmp	r3, r2
 8001ba8:	d101      	bne.n	8001bae <HAL_DMA_Abort+0x426>
 8001baa:	2301      	movs	r3, #1
 8001bac:	e000      	b.n	8001bb0 <HAL_DMA_Abort+0x428>
 8001bae:	2300      	movs	r3, #0
 8001bb0:	2b00      	cmp	r3, #0
 8001bb2:	d02b      	beq.n	8001c0c <HAL_DMA_Abort+0x484>
    {
      regs_dma = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8001bb4:	687b      	ldr	r3, [r7, #4]
 8001bb6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001bb8:	60bb      	str	r3, [r7, #8]
      regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 8001bba:	687b      	ldr	r3, [r7, #4]
 8001bbc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001bbe:	f003 031f 	and.w	r3, r3, #31
 8001bc2:	223f      	movs	r2, #63	; 0x3f
 8001bc4:	409a      	lsls	r2, r3
 8001bc6:	68bb      	ldr	r3, [r7, #8]
 8001bc8:	609a      	str	r2, [r3, #8]
 8001bca:	e02a      	b.n	8001c22 <HAL_DMA_Abort+0x49a>
 8001bcc:	40020010 	.word	0x40020010
 8001bd0:	40020028 	.word	0x40020028
 8001bd4:	40020040 	.word	0x40020040
 8001bd8:	40020058 	.word	0x40020058
 8001bdc:	40020070 	.word	0x40020070
 8001be0:	40020088 	.word	0x40020088
 8001be4:	400200a0 	.word	0x400200a0
 8001be8:	400200b8 	.word	0x400200b8
 8001bec:	40020410 	.word	0x40020410
 8001bf0:	40020428 	.word	0x40020428
 8001bf4:	40020440 	.word	0x40020440
 8001bf8:	40020458 	.word	0x40020458
 8001bfc:	40020470 	.word	0x40020470
 8001c00:	40020488 	.word	0x40020488
 8001c04:	400204a0 	.word	0x400204a0
 8001c08:	400204b8 	.word	0x400204b8
    }
    else /* BDMA channel */
    {
      regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 8001c0c:	687b      	ldr	r3, [r7, #4]
 8001c0e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001c10:	60fb      	str	r3, [r7, #12]
      regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 8001c12:	687b      	ldr	r3, [r7, #4]
 8001c14:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001c16:	f003 031f 	and.w	r3, r3, #31
 8001c1a:	2201      	movs	r2, #1
 8001c1c:	409a      	lsls	r2, r3
 8001c1e:	68fb      	ldr	r3, [r7, #12]
 8001c20:	605a      	str	r2, [r3, #4]
    }

    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8001c22:	687b      	ldr	r3, [r7, #4]
 8001c24:	681b      	ldr	r3, [r3, #0]
 8001c26:	4a4f      	ldr	r2, [pc, #316]	; (8001d64 <HAL_DMA_Abort+0x5dc>)
 8001c28:	4293      	cmp	r3, r2
 8001c2a:	d072      	beq.n	8001d12 <HAL_DMA_Abort+0x58a>
 8001c2c:	687b      	ldr	r3, [r7, #4]
 8001c2e:	681b      	ldr	r3, [r3, #0]
 8001c30:	4a4d      	ldr	r2, [pc, #308]	; (8001d68 <HAL_DMA_Abort+0x5e0>)
 8001c32:	4293      	cmp	r3, r2
 8001c34:	d06d      	beq.n	8001d12 <HAL_DMA_Abort+0x58a>
 8001c36:	687b      	ldr	r3, [r7, #4]
 8001c38:	681b      	ldr	r3, [r3, #0]
 8001c3a:	4a4c      	ldr	r2, [pc, #304]	; (8001d6c <HAL_DMA_Abort+0x5e4>)
 8001c3c:	4293      	cmp	r3, r2
 8001c3e:	d068      	beq.n	8001d12 <HAL_DMA_Abort+0x58a>
 8001c40:	687b      	ldr	r3, [r7, #4]
 8001c42:	681b      	ldr	r3, [r3, #0]
 8001c44:	4a4a      	ldr	r2, [pc, #296]	; (8001d70 <HAL_DMA_Abort+0x5e8>)
 8001c46:	4293      	cmp	r3, r2
 8001c48:	d063      	beq.n	8001d12 <HAL_DMA_Abort+0x58a>
 8001c4a:	687b      	ldr	r3, [r7, #4]
 8001c4c:	681b      	ldr	r3, [r3, #0]
 8001c4e:	4a49      	ldr	r2, [pc, #292]	; (8001d74 <HAL_DMA_Abort+0x5ec>)
 8001c50:	4293      	cmp	r3, r2
 8001c52:	d05e      	beq.n	8001d12 <HAL_DMA_Abort+0x58a>
 8001c54:	687b      	ldr	r3, [r7, #4]
 8001c56:	681b      	ldr	r3, [r3, #0]
 8001c58:	4a47      	ldr	r2, [pc, #284]	; (8001d78 <HAL_DMA_Abort+0x5f0>)
 8001c5a:	4293      	cmp	r3, r2
 8001c5c:	d059      	beq.n	8001d12 <HAL_DMA_Abort+0x58a>
 8001c5e:	687b      	ldr	r3, [r7, #4]
 8001c60:	681b      	ldr	r3, [r3, #0]
 8001c62:	4a46      	ldr	r2, [pc, #280]	; (8001d7c <HAL_DMA_Abort+0x5f4>)
 8001c64:	4293      	cmp	r3, r2
 8001c66:	d054      	beq.n	8001d12 <HAL_DMA_Abort+0x58a>
 8001c68:	687b      	ldr	r3, [r7, #4]
 8001c6a:	681b      	ldr	r3, [r3, #0]
 8001c6c:	4a44      	ldr	r2, [pc, #272]	; (8001d80 <HAL_DMA_Abort+0x5f8>)
 8001c6e:	4293      	cmp	r3, r2
 8001c70:	d04f      	beq.n	8001d12 <HAL_DMA_Abort+0x58a>
 8001c72:	687b      	ldr	r3, [r7, #4]
 8001c74:	681b      	ldr	r3, [r3, #0]
 8001c76:	4a43      	ldr	r2, [pc, #268]	; (8001d84 <HAL_DMA_Abort+0x5fc>)
 8001c78:	4293      	cmp	r3, r2
 8001c7a:	d04a      	beq.n	8001d12 <HAL_DMA_Abort+0x58a>
 8001c7c:	687b      	ldr	r3, [r7, #4]
 8001c7e:	681b      	ldr	r3, [r3, #0]
 8001c80:	4a41      	ldr	r2, [pc, #260]	; (8001d88 <HAL_DMA_Abort+0x600>)
 8001c82:	4293      	cmp	r3, r2
 8001c84:	d045      	beq.n	8001d12 <HAL_DMA_Abort+0x58a>
 8001c86:	687b      	ldr	r3, [r7, #4]
 8001c88:	681b      	ldr	r3, [r3, #0]
 8001c8a:	4a40      	ldr	r2, [pc, #256]	; (8001d8c <HAL_DMA_Abort+0x604>)
 8001c8c:	4293      	cmp	r3, r2
 8001c8e:	d040      	beq.n	8001d12 <HAL_DMA_Abort+0x58a>
 8001c90:	687b      	ldr	r3, [r7, #4]
 8001c92:	681b      	ldr	r3, [r3, #0]
 8001c94:	4a3e      	ldr	r2, [pc, #248]	; (8001d90 <HAL_DMA_Abort+0x608>)
 8001c96:	4293      	cmp	r3, r2
 8001c98:	d03b      	beq.n	8001d12 <HAL_DMA_Abort+0x58a>
 8001c9a:	687b      	ldr	r3, [r7, #4]
 8001c9c:	681b      	ldr	r3, [r3, #0]
 8001c9e:	4a3d      	ldr	r2, [pc, #244]	; (8001d94 <HAL_DMA_Abort+0x60c>)
 8001ca0:	4293      	cmp	r3, r2
 8001ca2:	d036      	beq.n	8001d12 <HAL_DMA_Abort+0x58a>
 8001ca4:	687b      	ldr	r3, [r7, #4]
 8001ca6:	681b      	ldr	r3, [r3, #0]
 8001ca8:	4a3b      	ldr	r2, [pc, #236]	; (8001d98 <HAL_DMA_Abort+0x610>)
 8001caa:	4293      	cmp	r3, r2
 8001cac:	d031      	beq.n	8001d12 <HAL_DMA_Abort+0x58a>
 8001cae:	687b      	ldr	r3, [r7, #4]
 8001cb0:	681b      	ldr	r3, [r3, #0]
 8001cb2:	4a3a      	ldr	r2, [pc, #232]	; (8001d9c <HAL_DMA_Abort+0x614>)
 8001cb4:	4293      	cmp	r3, r2
 8001cb6:	d02c      	beq.n	8001d12 <HAL_DMA_Abort+0x58a>
 8001cb8:	687b      	ldr	r3, [r7, #4]
 8001cba:	681b      	ldr	r3, [r3, #0]
 8001cbc:	4a38      	ldr	r2, [pc, #224]	; (8001da0 <HAL_DMA_Abort+0x618>)
 8001cbe:	4293      	cmp	r3, r2
 8001cc0:	d027      	beq.n	8001d12 <HAL_DMA_Abort+0x58a>
 8001cc2:	687b      	ldr	r3, [r7, #4]
 8001cc4:	681b      	ldr	r3, [r3, #0]
 8001cc6:	4a37      	ldr	r2, [pc, #220]	; (8001da4 <HAL_DMA_Abort+0x61c>)
 8001cc8:	4293      	cmp	r3, r2
 8001cca:	d022      	beq.n	8001d12 <HAL_DMA_Abort+0x58a>
 8001ccc:	687b      	ldr	r3, [r7, #4]
 8001cce:	681b      	ldr	r3, [r3, #0]
 8001cd0:	4a35      	ldr	r2, [pc, #212]	; (8001da8 <HAL_DMA_Abort+0x620>)
 8001cd2:	4293      	cmp	r3, r2
 8001cd4:	d01d      	beq.n	8001d12 <HAL_DMA_Abort+0x58a>
 8001cd6:	687b      	ldr	r3, [r7, #4]
 8001cd8:	681b      	ldr	r3, [r3, #0]
 8001cda:	4a34      	ldr	r2, [pc, #208]	; (8001dac <HAL_DMA_Abort+0x624>)
 8001cdc:	4293      	cmp	r3, r2
 8001cde:	d018      	beq.n	8001d12 <HAL_DMA_Abort+0x58a>
 8001ce0:	687b      	ldr	r3, [r7, #4]
 8001ce2:	681b      	ldr	r3, [r3, #0]
 8001ce4:	4a32      	ldr	r2, [pc, #200]	; (8001db0 <HAL_DMA_Abort+0x628>)
 8001ce6:	4293      	cmp	r3, r2
 8001ce8:	d013      	beq.n	8001d12 <HAL_DMA_Abort+0x58a>
 8001cea:	687b      	ldr	r3, [r7, #4]
 8001cec:	681b      	ldr	r3, [r3, #0]
 8001cee:	4a31      	ldr	r2, [pc, #196]	; (8001db4 <HAL_DMA_Abort+0x62c>)
 8001cf0:	4293      	cmp	r3, r2
 8001cf2:	d00e      	beq.n	8001d12 <HAL_DMA_Abort+0x58a>
 8001cf4:	687b      	ldr	r3, [r7, #4]
 8001cf6:	681b      	ldr	r3, [r3, #0]
 8001cf8:	4a2f      	ldr	r2, [pc, #188]	; (8001db8 <HAL_DMA_Abort+0x630>)
 8001cfa:	4293      	cmp	r3, r2
 8001cfc:	d009      	beq.n	8001d12 <HAL_DMA_Abort+0x58a>
 8001cfe:	687b      	ldr	r3, [r7, #4]
 8001d00:	681b      	ldr	r3, [r3, #0]
 8001d02:	4a2e      	ldr	r2, [pc, #184]	; (8001dbc <HAL_DMA_Abort+0x634>)
 8001d04:	4293      	cmp	r3, r2
 8001d06:	d004      	beq.n	8001d12 <HAL_DMA_Abort+0x58a>
 8001d08:	687b      	ldr	r3, [r7, #4]
 8001d0a:	681b      	ldr	r3, [r3, #0]
 8001d0c:	4a2c      	ldr	r2, [pc, #176]	; (8001dc0 <HAL_DMA_Abort+0x638>)
 8001d0e:	4293      	cmp	r3, r2
 8001d10:	d101      	bne.n	8001d16 <HAL_DMA_Abort+0x58e>
 8001d12:	2301      	movs	r3, #1
 8001d14:	e000      	b.n	8001d18 <HAL_DMA_Abort+0x590>
 8001d16:	2300      	movs	r3, #0
 8001d18:	2b00      	cmp	r3, #0
 8001d1a:	d015      	beq.n	8001d48 <HAL_DMA_Abort+0x5c0>
    {
      /* Clear the DMAMUX synchro overrun flag */
      hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8001d1c:	687b      	ldr	r3, [r7, #4]
 8001d1e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8001d20:	687a      	ldr	r2, [r7, #4]
 8001d22:	6e92      	ldr	r2, [r2, #104]	; 0x68
 8001d24:	605a      	str	r2, [r3, #4]

      if(hdma->DMAmuxRequestGen != 0U)
 8001d26:	687b      	ldr	r3, [r7, #4]
 8001d28:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8001d2a:	2b00      	cmp	r3, #0
 8001d2c:	d00c      	beq.n	8001d48 <HAL_DMA_Abort+0x5c0>
      {
        /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT */
        /* disable the request gen overrun IT */
        hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8001d2e:	687b      	ldr	r3, [r7, #4]
 8001d30:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8001d32:	681a      	ldr	r2, [r3, #0]
 8001d34:	687b      	ldr	r3, [r7, #4]
 8001d36:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8001d38:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8001d3c:	601a      	str	r2, [r3, #0]

        /* Clear the DMAMUX request generator overrun flag */
        hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8001d3e:	687b      	ldr	r3, [r7, #4]
 8001d40:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001d42:	687a      	ldr	r2, [r7, #4]
 8001d44:	6f52      	ldr	r2, [r2, #116]	; 0x74
 8001d46:	605a      	str	r2, [r3, #4]
      }
    }

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001d48:	687b      	ldr	r3, [r7, #4]
 8001d4a:	2200      	movs	r2, #0
 8001d4c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8001d50:	687b      	ldr	r3, [r7, #4]
 8001d52:	2201      	movs	r2, #1
 8001d54:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
  }

  return HAL_OK;
 8001d58:	2300      	movs	r3, #0
}
 8001d5a:	4618      	mov	r0, r3
 8001d5c:	3718      	adds	r7, #24
 8001d5e:	46bd      	mov	sp, r7
 8001d60:	bd80      	pop	{r7, pc}
 8001d62:	bf00      	nop
 8001d64:	40020010 	.word	0x40020010
 8001d68:	40020028 	.word	0x40020028
 8001d6c:	40020040 	.word	0x40020040
 8001d70:	40020058 	.word	0x40020058
 8001d74:	40020070 	.word	0x40020070
 8001d78:	40020088 	.word	0x40020088
 8001d7c:	400200a0 	.word	0x400200a0
 8001d80:	400200b8 	.word	0x400200b8
 8001d84:	40020410 	.word	0x40020410
 8001d88:	40020428 	.word	0x40020428
 8001d8c:	40020440 	.word	0x40020440
 8001d90:	40020458 	.word	0x40020458
 8001d94:	40020470 	.word	0x40020470
 8001d98:	40020488 	.word	0x40020488
 8001d9c:	400204a0 	.word	0x400204a0
 8001da0:	400204b8 	.word	0x400204b8
 8001da4:	58025408 	.word	0x58025408
 8001da8:	5802541c 	.word	0x5802541c
 8001dac:	58025430 	.word	0x58025430
 8001db0:	58025444 	.word	0x58025444
 8001db4:	58025458 	.word	0x58025458
 8001db8:	5802546c 	.word	0x5802546c
 8001dbc:	58025480 	.word	0x58025480
 8001dc0:	58025494 	.word	0x58025494

08001dc4 <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8001dc4:	b580      	push	{r7, lr}
 8001dc6:	b084      	sub	sp, #16
 8001dc8:	af00      	add	r7, sp, #0
 8001dca:	6078      	str	r0, [r7, #4]
  BDMA_Base_Registers *regs_bdma;

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 8001dcc:	687b      	ldr	r3, [r7, #4]
 8001dce:	2b00      	cmp	r3, #0
 8001dd0:	d101      	bne.n	8001dd6 <HAL_DMA_Abort_IT+0x12>
  {
    return HAL_ERROR;
 8001dd2:	2301      	movs	r3, #1
 8001dd4:	e205      	b.n	80021e2 <HAL_DMA_Abort_IT+0x41e>
  }

  if(hdma->State != HAL_DMA_STATE_BUSY)
 8001dd6:	687b      	ldr	r3, [r7, #4]
 8001dd8:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8001ddc:	b2db      	uxtb	r3, r3
 8001dde:	2b02      	cmp	r3, #2
 8001de0:	d004      	beq.n	8001dec <HAL_DMA_Abort_IT+0x28>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001de2:	687b      	ldr	r3, [r7, #4]
 8001de4:	2280      	movs	r2, #128	; 0x80
 8001de6:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8001de8:	2301      	movs	r3, #1
 8001dea:	e1fa      	b.n	80021e2 <HAL_DMA_Abort_IT+0x41e>
  }
  else
  {
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8001dec:	687b      	ldr	r3, [r7, #4]
 8001dee:	681b      	ldr	r3, [r3, #0]
 8001df0:	4a8c      	ldr	r2, [pc, #560]	; (8002024 <HAL_DMA_Abort_IT+0x260>)
 8001df2:	4293      	cmp	r3, r2
 8001df4:	d04a      	beq.n	8001e8c <HAL_DMA_Abort_IT+0xc8>
 8001df6:	687b      	ldr	r3, [r7, #4]
 8001df8:	681b      	ldr	r3, [r3, #0]
 8001dfa:	4a8b      	ldr	r2, [pc, #556]	; (8002028 <HAL_DMA_Abort_IT+0x264>)
 8001dfc:	4293      	cmp	r3, r2
 8001dfe:	d045      	beq.n	8001e8c <HAL_DMA_Abort_IT+0xc8>
 8001e00:	687b      	ldr	r3, [r7, #4]
 8001e02:	681b      	ldr	r3, [r3, #0]
 8001e04:	4a89      	ldr	r2, [pc, #548]	; (800202c <HAL_DMA_Abort_IT+0x268>)
 8001e06:	4293      	cmp	r3, r2
 8001e08:	d040      	beq.n	8001e8c <HAL_DMA_Abort_IT+0xc8>
 8001e0a:	687b      	ldr	r3, [r7, #4]
 8001e0c:	681b      	ldr	r3, [r3, #0]
 8001e0e:	4a88      	ldr	r2, [pc, #544]	; (8002030 <HAL_DMA_Abort_IT+0x26c>)
 8001e10:	4293      	cmp	r3, r2
 8001e12:	d03b      	beq.n	8001e8c <HAL_DMA_Abort_IT+0xc8>
 8001e14:	687b      	ldr	r3, [r7, #4]
 8001e16:	681b      	ldr	r3, [r3, #0]
 8001e18:	4a86      	ldr	r2, [pc, #536]	; (8002034 <HAL_DMA_Abort_IT+0x270>)
 8001e1a:	4293      	cmp	r3, r2
 8001e1c:	d036      	beq.n	8001e8c <HAL_DMA_Abort_IT+0xc8>
 8001e1e:	687b      	ldr	r3, [r7, #4]
 8001e20:	681b      	ldr	r3, [r3, #0]
 8001e22:	4a85      	ldr	r2, [pc, #532]	; (8002038 <HAL_DMA_Abort_IT+0x274>)
 8001e24:	4293      	cmp	r3, r2
 8001e26:	d031      	beq.n	8001e8c <HAL_DMA_Abort_IT+0xc8>
 8001e28:	687b      	ldr	r3, [r7, #4]
 8001e2a:	681b      	ldr	r3, [r3, #0]
 8001e2c:	4a83      	ldr	r2, [pc, #524]	; (800203c <HAL_DMA_Abort_IT+0x278>)
 8001e2e:	4293      	cmp	r3, r2
 8001e30:	d02c      	beq.n	8001e8c <HAL_DMA_Abort_IT+0xc8>
 8001e32:	687b      	ldr	r3, [r7, #4]
 8001e34:	681b      	ldr	r3, [r3, #0]
 8001e36:	4a82      	ldr	r2, [pc, #520]	; (8002040 <HAL_DMA_Abort_IT+0x27c>)
 8001e38:	4293      	cmp	r3, r2
 8001e3a:	d027      	beq.n	8001e8c <HAL_DMA_Abort_IT+0xc8>
 8001e3c:	687b      	ldr	r3, [r7, #4]
 8001e3e:	681b      	ldr	r3, [r3, #0]
 8001e40:	4a80      	ldr	r2, [pc, #512]	; (8002044 <HAL_DMA_Abort_IT+0x280>)
 8001e42:	4293      	cmp	r3, r2
 8001e44:	d022      	beq.n	8001e8c <HAL_DMA_Abort_IT+0xc8>
 8001e46:	687b      	ldr	r3, [r7, #4]
 8001e48:	681b      	ldr	r3, [r3, #0]
 8001e4a:	4a7f      	ldr	r2, [pc, #508]	; (8002048 <HAL_DMA_Abort_IT+0x284>)
 8001e4c:	4293      	cmp	r3, r2
 8001e4e:	d01d      	beq.n	8001e8c <HAL_DMA_Abort_IT+0xc8>
 8001e50:	687b      	ldr	r3, [r7, #4]
 8001e52:	681b      	ldr	r3, [r3, #0]
 8001e54:	4a7d      	ldr	r2, [pc, #500]	; (800204c <HAL_DMA_Abort_IT+0x288>)
 8001e56:	4293      	cmp	r3, r2
 8001e58:	d018      	beq.n	8001e8c <HAL_DMA_Abort_IT+0xc8>
 8001e5a:	687b      	ldr	r3, [r7, #4]
 8001e5c:	681b      	ldr	r3, [r3, #0]
 8001e5e:	4a7c      	ldr	r2, [pc, #496]	; (8002050 <HAL_DMA_Abort_IT+0x28c>)
 8001e60:	4293      	cmp	r3, r2
 8001e62:	d013      	beq.n	8001e8c <HAL_DMA_Abort_IT+0xc8>
 8001e64:	687b      	ldr	r3, [r7, #4]
 8001e66:	681b      	ldr	r3, [r3, #0]
 8001e68:	4a7a      	ldr	r2, [pc, #488]	; (8002054 <HAL_DMA_Abort_IT+0x290>)
 8001e6a:	4293      	cmp	r3, r2
 8001e6c:	d00e      	beq.n	8001e8c <HAL_DMA_Abort_IT+0xc8>
 8001e6e:	687b      	ldr	r3, [r7, #4]
 8001e70:	681b      	ldr	r3, [r3, #0]
 8001e72:	4a79      	ldr	r2, [pc, #484]	; (8002058 <HAL_DMA_Abort_IT+0x294>)
 8001e74:	4293      	cmp	r3, r2
 8001e76:	d009      	beq.n	8001e8c <HAL_DMA_Abort_IT+0xc8>
 8001e78:	687b      	ldr	r3, [r7, #4]
 8001e7a:	681b      	ldr	r3, [r3, #0]
 8001e7c:	4a77      	ldr	r2, [pc, #476]	; (800205c <HAL_DMA_Abort_IT+0x298>)
 8001e7e:	4293      	cmp	r3, r2
 8001e80:	d004      	beq.n	8001e8c <HAL_DMA_Abort_IT+0xc8>
 8001e82:	687b      	ldr	r3, [r7, #4]
 8001e84:	681b      	ldr	r3, [r3, #0]
 8001e86:	4a76      	ldr	r2, [pc, #472]	; (8002060 <HAL_DMA_Abort_IT+0x29c>)
 8001e88:	4293      	cmp	r3, r2
 8001e8a:	d101      	bne.n	8001e90 <HAL_DMA_Abort_IT+0xcc>
 8001e8c:	2301      	movs	r3, #1
 8001e8e:	e000      	b.n	8001e92 <HAL_DMA_Abort_IT+0xce>
 8001e90:	2300      	movs	r3, #0
 8001e92:	2b00      	cmp	r3, #0
 8001e94:	d065      	beq.n	8001f62 <HAL_DMA_Abort_IT+0x19e>
    {
      /* Set Abort State  */
      hdma->State = HAL_DMA_STATE_ABORT;
 8001e96:	687b      	ldr	r3, [r7, #4]
 8001e98:	2204      	movs	r2, #4
 8001e9a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8001e9e:	687b      	ldr	r3, [r7, #4]
 8001ea0:	681b      	ldr	r3, [r3, #0]
 8001ea2:	4a60      	ldr	r2, [pc, #384]	; (8002024 <HAL_DMA_Abort_IT+0x260>)
 8001ea4:	4293      	cmp	r3, r2
 8001ea6:	d04a      	beq.n	8001f3e <HAL_DMA_Abort_IT+0x17a>
 8001ea8:	687b      	ldr	r3, [r7, #4]
 8001eaa:	681b      	ldr	r3, [r3, #0]
 8001eac:	4a5e      	ldr	r2, [pc, #376]	; (8002028 <HAL_DMA_Abort_IT+0x264>)
 8001eae:	4293      	cmp	r3, r2
 8001eb0:	d045      	beq.n	8001f3e <HAL_DMA_Abort_IT+0x17a>
 8001eb2:	687b      	ldr	r3, [r7, #4]
 8001eb4:	681b      	ldr	r3, [r3, #0]
 8001eb6:	4a5d      	ldr	r2, [pc, #372]	; (800202c <HAL_DMA_Abort_IT+0x268>)
 8001eb8:	4293      	cmp	r3, r2
 8001eba:	d040      	beq.n	8001f3e <HAL_DMA_Abort_IT+0x17a>
 8001ebc:	687b      	ldr	r3, [r7, #4]
 8001ebe:	681b      	ldr	r3, [r3, #0]
 8001ec0:	4a5b      	ldr	r2, [pc, #364]	; (8002030 <HAL_DMA_Abort_IT+0x26c>)
 8001ec2:	4293      	cmp	r3, r2
 8001ec4:	d03b      	beq.n	8001f3e <HAL_DMA_Abort_IT+0x17a>
 8001ec6:	687b      	ldr	r3, [r7, #4]
 8001ec8:	681b      	ldr	r3, [r3, #0]
 8001eca:	4a5a      	ldr	r2, [pc, #360]	; (8002034 <HAL_DMA_Abort_IT+0x270>)
 8001ecc:	4293      	cmp	r3, r2
 8001ece:	d036      	beq.n	8001f3e <HAL_DMA_Abort_IT+0x17a>
 8001ed0:	687b      	ldr	r3, [r7, #4]
 8001ed2:	681b      	ldr	r3, [r3, #0]
 8001ed4:	4a58      	ldr	r2, [pc, #352]	; (8002038 <HAL_DMA_Abort_IT+0x274>)
 8001ed6:	4293      	cmp	r3, r2
 8001ed8:	d031      	beq.n	8001f3e <HAL_DMA_Abort_IT+0x17a>
 8001eda:	687b      	ldr	r3, [r7, #4]
 8001edc:	681b      	ldr	r3, [r3, #0]
 8001ede:	4a57      	ldr	r2, [pc, #348]	; (800203c <HAL_DMA_Abort_IT+0x278>)
 8001ee0:	4293      	cmp	r3, r2
 8001ee2:	d02c      	beq.n	8001f3e <HAL_DMA_Abort_IT+0x17a>
 8001ee4:	687b      	ldr	r3, [r7, #4]
 8001ee6:	681b      	ldr	r3, [r3, #0]
 8001ee8:	4a55      	ldr	r2, [pc, #340]	; (8002040 <HAL_DMA_Abort_IT+0x27c>)
 8001eea:	4293      	cmp	r3, r2
 8001eec:	d027      	beq.n	8001f3e <HAL_DMA_Abort_IT+0x17a>
 8001eee:	687b      	ldr	r3, [r7, #4]
 8001ef0:	681b      	ldr	r3, [r3, #0]
 8001ef2:	4a54      	ldr	r2, [pc, #336]	; (8002044 <HAL_DMA_Abort_IT+0x280>)
 8001ef4:	4293      	cmp	r3, r2
 8001ef6:	d022      	beq.n	8001f3e <HAL_DMA_Abort_IT+0x17a>
 8001ef8:	687b      	ldr	r3, [r7, #4]
 8001efa:	681b      	ldr	r3, [r3, #0]
 8001efc:	4a52      	ldr	r2, [pc, #328]	; (8002048 <HAL_DMA_Abort_IT+0x284>)
 8001efe:	4293      	cmp	r3, r2
 8001f00:	d01d      	beq.n	8001f3e <HAL_DMA_Abort_IT+0x17a>
 8001f02:	687b      	ldr	r3, [r7, #4]
 8001f04:	681b      	ldr	r3, [r3, #0]
 8001f06:	4a51      	ldr	r2, [pc, #324]	; (800204c <HAL_DMA_Abort_IT+0x288>)
 8001f08:	4293      	cmp	r3, r2
 8001f0a:	d018      	beq.n	8001f3e <HAL_DMA_Abort_IT+0x17a>
 8001f0c:	687b      	ldr	r3, [r7, #4]
 8001f0e:	681b      	ldr	r3, [r3, #0]
 8001f10:	4a4f      	ldr	r2, [pc, #316]	; (8002050 <HAL_DMA_Abort_IT+0x28c>)
 8001f12:	4293      	cmp	r3, r2
 8001f14:	d013      	beq.n	8001f3e <HAL_DMA_Abort_IT+0x17a>
 8001f16:	687b      	ldr	r3, [r7, #4]
 8001f18:	681b      	ldr	r3, [r3, #0]
 8001f1a:	4a4e      	ldr	r2, [pc, #312]	; (8002054 <HAL_DMA_Abort_IT+0x290>)
 8001f1c:	4293      	cmp	r3, r2
 8001f1e:	d00e      	beq.n	8001f3e <HAL_DMA_Abort_IT+0x17a>
 8001f20:	687b      	ldr	r3, [r7, #4]
 8001f22:	681b      	ldr	r3, [r3, #0]
 8001f24:	4a4c      	ldr	r2, [pc, #304]	; (8002058 <HAL_DMA_Abort_IT+0x294>)
 8001f26:	4293      	cmp	r3, r2
 8001f28:	d009      	beq.n	8001f3e <HAL_DMA_Abort_IT+0x17a>
 8001f2a:	687b      	ldr	r3, [r7, #4]
 8001f2c:	681b      	ldr	r3, [r3, #0]
 8001f2e:	4a4b      	ldr	r2, [pc, #300]	; (800205c <HAL_DMA_Abort_IT+0x298>)
 8001f30:	4293      	cmp	r3, r2
 8001f32:	d004      	beq.n	8001f3e <HAL_DMA_Abort_IT+0x17a>
 8001f34:	687b      	ldr	r3, [r7, #4]
 8001f36:	681b      	ldr	r3, [r3, #0]
 8001f38:	4a49      	ldr	r2, [pc, #292]	; (8002060 <HAL_DMA_Abort_IT+0x29c>)
 8001f3a:	4293      	cmp	r3, r2
 8001f3c:	d108      	bne.n	8001f50 <HAL_DMA_Abort_IT+0x18c>
 8001f3e:	687b      	ldr	r3, [r7, #4]
 8001f40:	681b      	ldr	r3, [r3, #0]
 8001f42:	681a      	ldr	r2, [r3, #0]
 8001f44:	687b      	ldr	r3, [r7, #4]
 8001f46:	681b      	ldr	r3, [r3, #0]
 8001f48:	f022 0201 	bic.w	r2, r2, #1
 8001f4c:	601a      	str	r2, [r3, #0]
 8001f4e:	e147      	b.n	80021e0 <HAL_DMA_Abort_IT+0x41c>
 8001f50:	687b      	ldr	r3, [r7, #4]
 8001f52:	681b      	ldr	r3, [r3, #0]
 8001f54:	681a      	ldr	r2, [r3, #0]
 8001f56:	687b      	ldr	r3, [r7, #4]
 8001f58:	681b      	ldr	r3, [r3, #0]
 8001f5a:	f022 0201 	bic.w	r2, r2, #1
 8001f5e:	601a      	str	r2, [r3, #0]
 8001f60:	e13e      	b.n	80021e0 <HAL_DMA_Abort_IT+0x41c>
    }
    else /* BDMA channel */
    {
      /* Disable DMA All Interrupts  */
      ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  &= ~(BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE);
 8001f62:	687b      	ldr	r3, [r7, #4]
 8001f64:	681b      	ldr	r3, [r3, #0]
 8001f66:	681a      	ldr	r2, [r3, #0]
 8001f68:	687b      	ldr	r3, [r7, #4]
 8001f6a:	681b      	ldr	r3, [r3, #0]
 8001f6c:	f022 020e 	bic.w	r2, r2, #14
 8001f70:	601a      	str	r2, [r3, #0]

      /* Disable the channel */
      __HAL_DMA_DISABLE(hdma);
 8001f72:	687b      	ldr	r3, [r7, #4]
 8001f74:	681b      	ldr	r3, [r3, #0]
 8001f76:	4a2b      	ldr	r2, [pc, #172]	; (8002024 <HAL_DMA_Abort_IT+0x260>)
 8001f78:	4293      	cmp	r3, r2
 8001f7a:	d04a      	beq.n	8002012 <HAL_DMA_Abort_IT+0x24e>
 8001f7c:	687b      	ldr	r3, [r7, #4]
 8001f7e:	681b      	ldr	r3, [r3, #0]
 8001f80:	4a29      	ldr	r2, [pc, #164]	; (8002028 <HAL_DMA_Abort_IT+0x264>)
 8001f82:	4293      	cmp	r3, r2
 8001f84:	d045      	beq.n	8002012 <HAL_DMA_Abort_IT+0x24e>
 8001f86:	687b      	ldr	r3, [r7, #4]
 8001f88:	681b      	ldr	r3, [r3, #0]
 8001f8a:	4a28      	ldr	r2, [pc, #160]	; (800202c <HAL_DMA_Abort_IT+0x268>)
 8001f8c:	4293      	cmp	r3, r2
 8001f8e:	d040      	beq.n	8002012 <HAL_DMA_Abort_IT+0x24e>
 8001f90:	687b      	ldr	r3, [r7, #4]
 8001f92:	681b      	ldr	r3, [r3, #0]
 8001f94:	4a26      	ldr	r2, [pc, #152]	; (8002030 <HAL_DMA_Abort_IT+0x26c>)
 8001f96:	4293      	cmp	r3, r2
 8001f98:	d03b      	beq.n	8002012 <HAL_DMA_Abort_IT+0x24e>
 8001f9a:	687b      	ldr	r3, [r7, #4]
 8001f9c:	681b      	ldr	r3, [r3, #0]
 8001f9e:	4a25      	ldr	r2, [pc, #148]	; (8002034 <HAL_DMA_Abort_IT+0x270>)
 8001fa0:	4293      	cmp	r3, r2
 8001fa2:	d036      	beq.n	8002012 <HAL_DMA_Abort_IT+0x24e>
 8001fa4:	687b      	ldr	r3, [r7, #4]
 8001fa6:	681b      	ldr	r3, [r3, #0]
 8001fa8:	4a23      	ldr	r2, [pc, #140]	; (8002038 <HAL_DMA_Abort_IT+0x274>)
 8001faa:	4293      	cmp	r3, r2
 8001fac:	d031      	beq.n	8002012 <HAL_DMA_Abort_IT+0x24e>
 8001fae:	687b      	ldr	r3, [r7, #4]
 8001fb0:	681b      	ldr	r3, [r3, #0]
 8001fb2:	4a22      	ldr	r2, [pc, #136]	; (800203c <HAL_DMA_Abort_IT+0x278>)
 8001fb4:	4293      	cmp	r3, r2
 8001fb6:	d02c      	beq.n	8002012 <HAL_DMA_Abort_IT+0x24e>
 8001fb8:	687b      	ldr	r3, [r7, #4]
 8001fba:	681b      	ldr	r3, [r3, #0]
 8001fbc:	4a20      	ldr	r2, [pc, #128]	; (8002040 <HAL_DMA_Abort_IT+0x27c>)
 8001fbe:	4293      	cmp	r3, r2
 8001fc0:	d027      	beq.n	8002012 <HAL_DMA_Abort_IT+0x24e>
 8001fc2:	687b      	ldr	r3, [r7, #4]
 8001fc4:	681b      	ldr	r3, [r3, #0]
 8001fc6:	4a1f      	ldr	r2, [pc, #124]	; (8002044 <HAL_DMA_Abort_IT+0x280>)
 8001fc8:	4293      	cmp	r3, r2
 8001fca:	d022      	beq.n	8002012 <HAL_DMA_Abort_IT+0x24e>
 8001fcc:	687b      	ldr	r3, [r7, #4]
 8001fce:	681b      	ldr	r3, [r3, #0]
 8001fd0:	4a1d      	ldr	r2, [pc, #116]	; (8002048 <HAL_DMA_Abort_IT+0x284>)
 8001fd2:	4293      	cmp	r3, r2
 8001fd4:	d01d      	beq.n	8002012 <HAL_DMA_Abort_IT+0x24e>
 8001fd6:	687b      	ldr	r3, [r7, #4]
 8001fd8:	681b      	ldr	r3, [r3, #0]
 8001fda:	4a1c      	ldr	r2, [pc, #112]	; (800204c <HAL_DMA_Abort_IT+0x288>)
 8001fdc:	4293      	cmp	r3, r2
 8001fde:	d018      	beq.n	8002012 <HAL_DMA_Abort_IT+0x24e>
 8001fe0:	687b      	ldr	r3, [r7, #4]
 8001fe2:	681b      	ldr	r3, [r3, #0]
 8001fe4:	4a1a      	ldr	r2, [pc, #104]	; (8002050 <HAL_DMA_Abort_IT+0x28c>)
 8001fe6:	4293      	cmp	r3, r2
 8001fe8:	d013      	beq.n	8002012 <HAL_DMA_Abort_IT+0x24e>
 8001fea:	687b      	ldr	r3, [r7, #4]
 8001fec:	681b      	ldr	r3, [r3, #0]
 8001fee:	4a19      	ldr	r2, [pc, #100]	; (8002054 <HAL_DMA_Abort_IT+0x290>)
 8001ff0:	4293      	cmp	r3, r2
 8001ff2:	d00e      	beq.n	8002012 <HAL_DMA_Abort_IT+0x24e>
 8001ff4:	687b      	ldr	r3, [r7, #4]
 8001ff6:	681b      	ldr	r3, [r3, #0]
 8001ff8:	4a17      	ldr	r2, [pc, #92]	; (8002058 <HAL_DMA_Abort_IT+0x294>)
 8001ffa:	4293      	cmp	r3, r2
 8001ffc:	d009      	beq.n	8002012 <HAL_DMA_Abort_IT+0x24e>
 8001ffe:	687b      	ldr	r3, [r7, #4]
 8002000:	681b      	ldr	r3, [r3, #0]
 8002002:	4a16      	ldr	r2, [pc, #88]	; (800205c <HAL_DMA_Abort_IT+0x298>)
 8002004:	4293      	cmp	r3, r2
 8002006:	d004      	beq.n	8002012 <HAL_DMA_Abort_IT+0x24e>
 8002008:	687b      	ldr	r3, [r7, #4]
 800200a:	681b      	ldr	r3, [r3, #0]
 800200c:	4a14      	ldr	r2, [pc, #80]	; (8002060 <HAL_DMA_Abort_IT+0x29c>)
 800200e:	4293      	cmp	r3, r2
 8002010:	d128      	bne.n	8002064 <HAL_DMA_Abort_IT+0x2a0>
 8002012:	687b      	ldr	r3, [r7, #4]
 8002014:	681b      	ldr	r3, [r3, #0]
 8002016:	681a      	ldr	r2, [r3, #0]
 8002018:	687b      	ldr	r3, [r7, #4]
 800201a:	681b      	ldr	r3, [r3, #0]
 800201c:	f022 0201 	bic.w	r2, r2, #1
 8002020:	601a      	str	r2, [r3, #0]
 8002022:	e027      	b.n	8002074 <HAL_DMA_Abort_IT+0x2b0>
 8002024:	40020010 	.word	0x40020010
 8002028:	40020028 	.word	0x40020028
 800202c:	40020040 	.word	0x40020040
 8002030:	40020058 	.word	0x40020058
 8002034:	40020070 	.word	0x40020070
 8002038:	40020088 	.word	0x40020088
 800203c:	400200a0 	.word	0x400200a0
 8002040:	400200b8 	.word	0x400200b8
 8002044:	40020410 	.word	0x40020410
 8002048:	40020428 	.word	0x40020428
 800204c:	40020440 	.word	0x40020440
 8002050:	40020458 	.word	0x40020458
 8002054:	40020470 	.word	0x40020470
 8002058:	40020488 	.word	0x40020488
 800205c:	400204a0 	.word	0x400204a0
 8002060:	400204b8 	.word	0x400204b8
 8002064:	687b      	ldr	r3, [r7, #4]
 8002066:	681b      	ldr	r3, [r3, #0]
 8002068:	681a      	ldr	r2, [r3, #0]
 800206a:	687b      	ldr	r3, [r7, #4]
 800206c:	681b      	ldr	r3, [r3, #0]
 800206e:	f022 0201 	bic.w	r2, r2, #1
 8002072:	601a      	str	r2, [r3, #0]

      if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8002074:	687b      	ldr	r3, [r7, #4]
 8002076:	681b      	ldr	r3, [r3, #0]
 8002078:	4a5c      	ldr	r2, [pc, #368]	; (80021ec <HAL_DMA_Abort_IT+0x428>)
 800207a:	4293      	cmp	r3, r2
 800207c:	d072      	beq.n	8002164 <HAL_DMA_Abort_IT+0x3a0>
 800207e:	687b      	ldr	r3, [r7, #4]
 8002080:	681b      	ldr	r3, [r3, #0]
 8002082:	4a5b      	ldr	r2, [pc, #364]	; (80021f0 <HAL_DMA_Abort_IT+0x42c>)
 8002084:	4293      	cmp	r3, r2
 8002086:	d06d      	beq.n	8002164 <HAL_DMA_Abort_IT+0x3a0>
 8002088:	687b      	ldr	r3, [r7, #4]
 800208a:	681b      	ldr	r3, [r3, #0]
 800208c:	4a59      	ldr	r2, [pc, #356]	; (80021f4 <HAL_DMA_Abort_IT+0x430>)
 800208e:	4293      	cmp	r3, r2
 8002090:	d068      	beq.n	8002164 <HAL_DMA_Abort_IT+0x3a0>
 8002092:	687b      	ldr	r3, [r7, #4]
 8002094:	681b      	ldr	r3, [r3, #0]
 8002096:	4a58      	ldr	r2, [pc, #352]	; (80021f8 <HAL_DMA_Abort_IT+0x434>)
 8002098:	4293      	cmp	r3, r2
 800209a:	d063      	beq.n	8002164 <HAL_DMA_Abort_IT+0x3a0>
 800209c:	687b      	ldr	r3, [r7, #4]
 800209e:	681b      	ldr	r3, [r3, #0]
 80020a0:	4a56      	ldr	r2, [pc, #344]	; (80021fc <HAL_DMA_Abort_IT+0x438>)
 80020a2:	4293      	cmp	r3, r2
 80020a4:	d05e      	beq.n	8002164 <HAL_DMA_Abort_IT+0x3a0>
 80020a6:	687b      	ldr	r3, [r7, #4]
 80020a8:	681b      	ldr	r3, [r3, #0]
 80020aa:	4a55      	ldr	r2, [pc, #340]	; (8002200 <HAL_DMA_Abort_IT+0x43c>)
 80020ac:	4293      	cmp	r3, r2
 80020ae:	d059      	beq.n	8002164 <HAL_DMA_Abort_IT+0x3a0>
 80020b0:	687b      	ldr	r3, [r7, #4]
 80020b2:	681b      	ldr	r3, [r3, #0]
 80020b4:	4a53      	ldr	r2, [pc, #332]	; (8002204 <HAL_DMA_Abort_IT+0x440>)
 80020b6:	4293      	cmp	r3, r2
 80020b8:	d054      	beq.n	8002164 <HAL_DMA_Abort_IT+0x3a0>
 80020ba:	687b      	ldr	r3, [r7, #4]
 80020bc:	681b      	ldr	r3, [r3, #0]
 80020be:	4a52      	ldr	r2, [pc, #328]	; (8002208 <HAL_DMA_Abort_IT+0x444>)
 80020c0:	4293      	cmp	r3, r2
 80020c2:	d04f      	beq.n	8002164 <HAL_DMA_Abort_IT+0x3a0>
 80020c4:	687b      	ldr	r3, [r7, #4]
 80020c6:	681b      	ldr	r3, [r3, #0]
 80020c8:	4a50      	ldr	r2, [pc, #320]	; (800220c <HAL_DMA_Abort_IT+0x448>)
 80020ca:	4293      	cmp	r3, r2
 80020cc:	d04a      	beq.n	8002164 <HAL_DMA_Abort_IT+0x3a0>
 80020ce:	687b      	ldr	r3, [r7, #4]
 80020d0:	681b      	ldr	r3, [r3, #0]
 80020d2:	4a4f      	ldr	r2, [pc, #316]	; (8002210 <HAL_DMA_Abort_IT+0x44c>)
 80020d4:	4293      	cmp	r3, r2
 80020d6:	d045      	beq.n	8002164 <HAL_DMA_Abort_IT+0x3a0>
 80020d8:	687b      	ldr	r3, [r7, #4]
 80020da:	681b      	ldr	r3, [r3, #0]
 80020dc:	4a4d      	ldr	r2, [pc, #308]	; (8002214 <HAL_DMA_Abort_IT+0x450>)
 80020de:	4293      	cmp	r3, r2
 80020e0:	d040      	beq.n	8002164 <HAL_DMA_Abort_IT+0x3a0>
 80020e2:	687b      	ldr	r3, [r7, #4]
 80020e4:	681b      	ldr	r3, [r3, #0]
 80020e6:	4a4c      	ldr	r2, [pc, #304]	; (8002218 <HAL_DMA_Abort_IT+0x454>)
 80020e8:	4293      	cmp	r3, r2
 80020ea:	d03b      	beq.n	8002164 <HAL_DMA_Abort_IT+0x3a0>
 80020ec:	687b      	ldr	r3, [r7, #4]
 80020ee:	681b      	ldr	r3, [r3, #0]
 80020f0:	4a4a      	ldr	r2, [pc, #296]	; (800221c <HAL_DMA_Abort_IT+0x458>)
 80020f2:	4293      	cmp	r3, r2
 80020f4:	d036      	beq.n	8002164 <HAL_DMA_Abort_IT+0x3a0>
 80020f6:	687b      	ldr	r3, [r7, #4]
 80020f8:	681b      	ldr	r3, [r3, #0]
 80020fa:	4a49      	ldr	r2, [pc, #292]	; (8002220 <HAL_DMA_Abort_IT+0x45c>)
 80020fc:	4293      	cmp	r3, r2
 80020fe:	d031      	beq.n	8002164 <HAL_DMA_Abort_IT+0x3a0>
 8002100:	687b      	ldr	r3, [r7, #4]
 8002102:	681b      	ldr	r3, [r3, #0]
 8002104:	4a47      	ldr	r2, [pc, #284]	; (8002224 <HAL_DMA_Abort_IT+0x460>)
 8002106:	4293      	cmp	r3, r2
 8002108:	d02c      	beq.n	8002164 <HAL_DMA_Abort_IT+0x3a0>
 800210a:	687b      	ldr	r3, [r7, #4]
 800210c:	681b      	ldr	r3, [r3, #0]
 800210e:	4a46      	ldr	r2, [pc, #280]	; (8002228 <HAL_DMA_Abort_IT+0x464>)
 8002110:	4293      	cmp	r3, r2
 8002112:	d027      	beq.n	8002164 <HAL_DMA_Abort_IT+0x3a0>
 8002114:	687b      	ldr	r3, [r7, #4]
 8002116:	681b      	ldr	r3, [r3, #0]
 8002118:	4a44      	ldr	r2, [pc, #272]	; (800222c <HAL_DMA_Abort_IT+0x468>)
 800211a:	4293      	cmp	r3, r2
 800211c:	d022      	beq.n	8002164 <HAL_DMA_Abort_IT+0x3a0>
 800211e:	687b      	ldr	r3, [r7, #4]
 8002120:	681b      	ldr	r3, [r3, #0]
 8002122:	4a43      	ldr	r2, [pc, #268]	; (8002230 <HAL_DMA_Abort_IT+0x46c>)
 8002124:	4293      	cmp	r3, r2
 8002126:	d01d      	beq.n	8002164 <HAL_DMA_Abort_IT+0x3a0>
 8002128:	687b      	ldr	r3, [r7, #4]
 800212a:	681b      	ldr	r3, [r3, #0]
 800212c:	4a41      	ldr	r2, [pc, #260]	; (8002234 <HAL_DMA_Abort_IT+0x470>)
 800212e:	4293      	cmp	r3, r2
 8002130:	d018      	beq.n	8002164 <HAL_DMA_Abort_IT+0x3a0>
 8002132:	687b      	ldr	r3, [r7, #4]
 8002134:	681b      	ldr	r3, [r3, #0]
 8002136:	4a40      	ldr	r2, [pc, #256]	; (8002238 <HAL_DMA_Abort_IT+0x474>)
 8002138:	4293      	cmp	r3, r2
 800213a:	d013      	beq.n	8002164 <HAL_DMA_Abort_IT+0x3a0>
 800213c:	687b      	ldr	r3, [r7, #4]
 800213e:	681b      	ldr	r3, [r3, #0]
 8002140:	4a3e      	ldr	r2, [pc, #248]	; (800223c <HAL_DMA_Abort_IT+0x478>)
 8002142:	4293      	cmp	r3, r2
 8002144:	d00e      	beq.n	8002164 <HAL_DMA_Abort_IT+0x3a0>
 8002146:	687b      	ldr	r3, [r7, #4]
 8002148:	681b      	ldr	r3, [r3, #0]
 800214a:	4a3d      	ldr	r2, [pc, #244]	; (8002240 <HAL_DMA_Abort_IT+0x47c>)
 800214c:	4293      	cmp	r3, r2
 800214e:	d009      	beq.n	8002164 <HAL_DMA_Abort_IT+0x3a0>
 8002150:	687b      	ldr	r3, [r7, #4]
 8002152:	681b      	ldr	r3, [r3, #0]
 8002154:	4a3b      	ldr	r2, [pc, #236]	; (8002244 <HAL_DMA_Abort_IT+0x480>)
 8002156:	4293      	cmp	r3, r2
 8002158:	d004      	beq.n	8002164 <HAL_DMA_Abort_IT+0x3a0>
 800215a:	687b      	ldr	r3, [r7, #4]
 800215c:	681b      	ldr	r3, [r3, #0]
 800215e:	4a3a      	ldr	r2, [pc, #232]	; (8002248 <HAL_DMA_Abort_IT+0x484>)
 8002160:	4293      	cmp	r3, r2
 8002162:	d101      	bne.n	8002168 <HAL_DMA_Abort_IT+0x3a4>
 8002164:	2301      	movs	r3, #1
 8002166:	e000      	b.n	800216a <HAL_DMA_Abort_IT+0x3a6>
 8002168:	2300      	movs	r3, #0
 800216a:	2b00      	cmp	r3, #0
 800216c:	d028      	beq.n	80021c0 <HAL_DMA_Abort_IT+0x3fc>
      {
        /* disable the DMAMUX sync overrun IT */
        hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 800216e:	687b      	ldr	r3, [r7, #4]
 8002170:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002172:	681a      	ldr	r2, [r3, #0]
 8002174:	687b      	ldr	r3, [r7, #4]
 8002176:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002178:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800217c:	601a      	str	r2, [r3, #0]

        /* Clear all flags */
        regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 800217e:	687b      	ldr	r3, [r7, #4]
 8002180:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002182:	60fb      	str	r3, [r7, #12]
        regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 8002184:	687b      	ldr	r3, [r7, #4]
 8002186:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002188:	f003 031f 	and.w	r3, r3, #31
 800218c:	2201      	movs	r2, #1
 800218e:	409a      	lsls	r2, r3
 8002190:	68fb      	ldr	r3, [r7, #12]
 8002192:	605a      	str	r2, [r3, #4]

        /* Clear the DMAMUX synchro overrun flag */
        hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8002194:	687b      	ldr	r3, [r7, #4]
 8002196:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8002198:	687a      	ldr	r2, [r7, #4]
 800219a:	6e92      	ldr	r2, [r2, #104]	; 0x68
 800219c:	605a      	str	r2, [r3, #4]

        if(hdma->DMAmuxRequestGen != 0U)
 800219e:	687b      	ldr	r3, [r7, #4]
 80021a0:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80021a2:	2b00      	cmp	r3, #0
 80021a4:	d00c      	beq.n	80021c0 <HAL_DMA_Abort_IT+0x3fc>
        {
          /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
          /* disable the request gen overrun IT */
          hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 80021a6:	687b      	ldr	r3, [r7, #4]
 80021a8:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80021aa:	681a      	ldr	r2, [r3, #0]
 80021ac:	687b      	ldr	r3, [r7, #4]
 80021ae:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80021b0:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80021b4:	601a      	str	r2, [r3, #0]

          /* Clear the DMAMUX request generator overrun flag */
          hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 80021b6:	687b      	ldr	r3, [r7, #4]
 80021b8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80021ba:	687a      	ldr	r2, [r7, #4]
 80021bc:	6f52      	ldr	r2, [r2, #116]	; 0x74
 80021be:	605a      	str	r2, [r3, #4]
        }
      }

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 80021c0:	687b      	ldr	r3, [r7, #4]
 80021c2:	2200      	movs	r2, #0
 80021c4:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 80021c8:	687b      	ldr	r3, [r7, #4]
 80021ca:	2201      	movs	r2, #1
 80021cc:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Call User Abort callback */
      if(hdma->XferAbortCallback != NULL)
 80021d0:	687b      	ldr	r3, [r7, #4]
 80021d2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80021d4:	2b00      	cmp	r3, #0
 80021d6:	d003      	beq.n	80021e0 <HAL_DMA_Abort_IT+0x41c>
      {
        hdma->XferAbortCallback(hdma);
 80021d8:	687b      	ldr	r3, [r7, #4]
 80021da:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80021dc:	6878      	ldr	r0, [r7, #4]
 80021de:	4798      	blx	r3
      }
    }
  }

  return HAL_OK;
 80021e0:	2300      	movs	r3, #0
}
 80021e2:	4618      	mov	r0, r3
 80021e4:	3710      	adds	r7, #16
 80021e6:	46bd      	mov	sp, r7
 80021e8:	bd80      	pop	{r7, pc}
 80021ea:	bf00      	nop
 80021ec:	40020010 	.word	0x40020010
 80021f0:	40020028 	.word	0x40020028
 80021f4:	40020040 	.word	0x40020040
 80021f8:	40020058 	.word	0x40020058
 80021fc:	40020070 	.word	0x40020070
 8002200:	40020088 	.word	0x40020088
 8002204:	400200a0 	.word	0x400200a0
 8002208:	400200b8 	.word	0x400200b8
 800220c:	40020410 	.word	0x40020410
 8002210:	40020428 	.word	0x40020428
 8002214:	40020440 	.word	0x40020440
 8002218:	40020458 	.word	0x40020458
 800221c:	40020470 	.word	0x40020470
 8002220:	40020488 	.word	0x40020488
 8002224:	400204a0 	.word	0x400204a0
 8002228:	400204b8 	.word	0x400204b8
 800222c:	58025408 	.word	0x58025408
 8002230:	5802541c 	.word	0x5802541c
 8002234:	58025430 	.word	0x58025430
 8002238:	58025444 	.word	0x58025444
 800223c:	58025458 	.word	0x58025458
 8002240:	5802546c 	.word	0x5802546c
 8002244:	58025480 	.word	0x58025480
 8002248:	58025494 	.word	0x58025494

0800224c <HAL_DMA2D_Init>:
  * @param  hdma2d pointer to a DMA2D_HandleTypeDef structure that contains
  *                 the configuration information for the DMA2D.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA2D_Init(DMA2D_HandleTypeDef *hdma2d)
{
 800224c:	b580      	push	{r7, lr}
 800224e:	b082      	sub	sp, #8
 8002250:	af00      	add	r7, sp, #0
 8002252:	6078      	str	r0, [r7, #4]
  /* Check the DMA2D peripheral state */
  if (hdma2d == NULL)
 8002254:	687b      	ldr	r3, [r7, #4]
 8002256:	2b00      	cmp	r3, #0
 8002258:	d101      	bne.n	800225e <HAL_DMA2D_Init+0x12>
  {
    return HAL_ERROR;
 800225a:	2301      	movs	r3, #1
 800225c:	e04f      	b.n	80022fe <HAL_DMA2D_Init+0xb2>

    /* Init the low level hardware */
    hdma2d->MspInitCallback(hdma2d);
  }
#else
  if (hdma2d->State == HAL_DMA2D_STATE_RESET)
 800225e:	687b      	ldr	r3, [r7, #4]
 8002260:	f893 3061 	ldrb.w	r3, [r3, #97]	; 0x61
 8002264:	b2db      	uxtb	r3, r3
 8002266:	2b00      	cmp	r3, #0
 8002268:	d106      	bne.n	8002278 <HAL_DMA2D_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hdma2d->Lock = HAL_UNLOCKED;
 800226a:	687b      	ldr	r3, [r7, #4]
 800226c:	2200      	movs	r2, #0
 800226e:	f883 2060 	strb.w	r2, [r3, #96]	; 0x60
    /* Init the low level hardware */
    HAL_DMA2D_MspInit(hdma2d);
 8002272:	6878      	ldr	r0, [r7, #4]
 8002274:	f7fe fe0c 	bl	8000e90 <HAL_DMA2D_MspInit>
  }
#endif /* (USE_HAL_DMA2D_REGISTER_CALLBACKS) */

  /* Change DMA2D peripheral state */
  hdma2d->State = HAL_DMA2D_STATE_BUSY;
 8002278:	687b      	ldr	r3, [r7, #4]
 800227a:	2202      	movs	r2, #2
 800227c:	f883 2061 	strb.w	r2, [r3, #97]	; 0x61

  /* DMA2D CR register configuration -------------------------------------------*/
  MODIFY_REG(hdma2d->Instance->CR, DMA2D_CR_MODE | DMA2D_CR_LOM, hdma2d->Init.Mode | hdma2d->Init.LineOffsetMode);
 8002280:	687b      	ldr	r3, [r7, #4]
 8002282:	681b      	ldr	r3, [r3, #0]
 8002284:	681a      	ldr	r2, [r3, #0]
 8002286:	4b20      	ldr	r3, [pc, #128]	; (8002308 <HAL_DMA2D_Init+0xbc>)
 8002288:	4013      	ands	r3, r2
 800228a:	687a      	ldr	r2, [r7, #4]
 800228c:	6851      	ldr	r1, [r2, #4]
 800228e:	687a      	ldr	r2, [r7, #4]
 8002290:	69d2      	ldr	r2, [r2, #28]
 8002292:	4311      	orrs	r1, r2
 8002294:	687a      	ldr	r2, [r7, #4]
 8002296:	6812      	ldr	r2, [r2, #0]
 8002298:	430b      	orrs	r3, r1
 800229a:	6013      	str	r3, [r2, #0]

  /* DMA2D OPFCCR register configuration ---------------------------------------*/
  MODIFY_REG(hdma2d->Instance->OPFCCR, DMA2D_OPFCCR_CM | DMA2D_OPFCCR_SB,
 800229c:	687b      	ldr	r3, [r7, #4]
 800229e:	681b      	ldr	r3, [r3, #0]
 80022a0:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80022a2:	4b1a      	ldr	r3, [pc, #104]	; (800230c <HAL_DMA2D_Init+0xc0>)
 80022a4:	4013      	ands	r3, r2
 80022a6:	687a      	ldr	r2, [r7, #4]
 80022a8:	6891      	ldr	r1, [r2, #8]
 80022aa:	687a      	ldr	r2, [r7, #4]
 80022ac:	6992      	ldr	r2, [r2, #24]
 80022ae:	4311      	orrs	r1, r2
 80022b0:	687a      	ldr	r2, [r7, #4]
 80022b2:	6812      	ldr	r2, [r2, #0]
 80022b4:	430b      	orrs	r3, r1
 80022b6:	6353      	str	r3, [r2, #52]	; 0x34
             hdma2d->Init.ColorMode | hdma2d->Init.BytesSwap);

  /* DMA2D OOR register configuration ------------------------------------------*/
  MODIFY_REG(hdma2d->Instance->OOR, DMA2D_OOR_LO, hdma2d->Init.OutputOffset);
 80022b8:	687b      	ldr	r3, [r7, #4]
 80022ba:	681b      	ldr	r3, [r3, #0]
 80022bc:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80022be:	4b14      	ldr	r3, [pc, #80]	; (8002310 <HAL_DMA2D_Init+0xc4>)
 80022c0:	4013      	ands	r3, r2
 80022c2:	687a      	ldr	r2, [r7, #4]
 80022c4:	68d1      	ldr	r1, [r2, #12]
 80022c6:	687a      	ldr	r2, [r7, #4]
 80022c8:	6812      	ldr	r2, [r2, #0]
 80022ca:	430b      	orrs	r3, r1
 80022cc:	6413      	str	r3, [r2, #64]	; 0x40
  /* DMA2D OPFCCR AI and RBS fields setting (Output Alpha Inversion)*/
  MODIFY_REG(hdma2d->Instance->OPFCCR, (DMA2D_OPFCCR_AI | DMA2D_OPFCCR_RBS),
 80022ce:	687b      	ldr	r3, [r7, #4]
 80022d0:	681b      	ldr	r3, [r3, #0]
 80022d2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80022d4:	f423 1140 	bic.w	r1, r3, #3145728	; 0x300000
 80022d8:	687b      	ldr	r3, [r7, #4]
 80022da:	691b      	ldr	r3, [r3, #16]
 80022dc:	051a      	lsls	r2, r3, #20
 80022de:	687b      	ldr	r3, [r7, #4]
 80022e0:	695b      	ldr	r3, [r3, #20]
 80022e2:	055b      	lsls	r3, r3, #21
 80022e4:	431a      	orrs	r2, r3
 80022e6:	687b      	ldr	r3, [r7, #4]
 80022e8:	681b      	ldr	r3, [r3, #0]
 80022ea:	430a      	orrs	r2, r1
 80022ec:	635a      	str	r2, [r3, #52]	; 0x34
             ((hdma2d->Init.AlphaInverted << DMA2D_OPFCCR_AI_Pos) | \
              (hdma2d->Init.RedBlueSwap << DMA2D_OPFCCR_RBS_Pos)));


  /* Update error code */
  hdma2d->ErrorCode = HAL_DMA2D_ERROR_NONE;
 80022ee:	687b      	ldr	r3, [r7, #4]
 80022f0:	2200      	movs	r2, #0
 80022f2:	665a      	str	r2, [r3, #100]	; 0x64

  /* Initialize the DMA2D state*/
  hdma2d->State  = HAL_DMA2D_STATE_READY;
 80022f4:	687b      	ldr	r3, [r7, #4]
 80022f6:	2201      	movs	r2, #1
 80022f8:	f883 2061 	strb.w	r2, [r3, #97]	; 0x61

  return HAL_OK;
 80022fc:	2300      	movs	r3, #0
}
 80022fe:	4618      	mov	r0, r3
 8002300:	3708      	adds	r7, #8
 8002302:	46bd      	mov	sp, r7
 8002304:	bd80      	pop	{r7, pc}
 8002306:	bf00      	nop
 8002308:	fff8ffbf 	.word	0xfff8ffbf
 800230c:	fffffef8 	.word	0xfffffef8
 8002310:	ffff0000 	.word	0xffff0000

08002314 <HAL_DMA2D_ConfigLayer>:
  *                   This parameter can be one of the following values:
  *                   DMA2D_BACKGROUND_LAYER(0) / DMA2D_FOREGROUND_LAYER(1)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA2D_ConfigLayer(DMA2D_HandleTypeDef *hdma2d, uint32_t LayerIdx)
{
 8002314:	b480      	push	{r7}
 8002316:	b087      	sub	sp, #28
 8002318:	af00      	add	r7, sp, #0
 800231a:	6078      	str	r0, [r7, #4]
 800231c:	6039      	str	r1, [r7, #0]
  uint32_t regValue;

  /* Check the parameters */
  assert_param(IS_DMA2D_LAYER(LayerIdx));
  assert_param(IS_DMA2D_OFFSET(hdma2d->LayerCfg[LayerIdx].InputOffset));
  if (hdma2d->Init.Mode != DMA2D_R2M)
 800231e:	687b      	ldr	r3, [r7, #4]
 8002320:	685b      	ldr	r3, [r3, #4]
 8002322:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
    }
  }
  assert_param(IS_DMA2D_ALPHA_INVERTED(hdma2d->LayerCfg[LayerIdx].AlphaInverted));
  assert_param(IS_DMA2D_RB_SWAP(hdma2d->LayerCfg[LayerIdx].RedBlueSwap));

  if ((LayerIdx == DMA2D_FOREGROUND_LAYER) && (hdma2d->LayerCfg[LayerIdx].InputColorMode == DMA2D_INPUT_YCBCR))
 8002326:	683b      	ldr	r3, [r7, #0]
 8002328:	2b01      	cmp	r3, #1
 800232a:	d104      	bne.n	8002336 <HAL_DMA2D_ConfigLayer+0x22>
 800232c:	683a      	ldr	r2, [r7, #0]
 800232e:	4613      	mov	r3, r2
 8002330:	00db      	lsls	r3, r3, #3
 8002332:	1a9b      	subs	r3, r3, r2
 8002334:	009b      	lsls	r3, r3, #2
  {
    assert_param(IS_DMA2D_CHROMA_SUB_SAMPLING(hdma2d->LayerCfg[LayerIdx].ChromaSubSampling));
  }

  /* Process locked */
  __HAL_LOCK(hdma2d);
 8002336:	687b      	ldr	r3, [r7, #4]
 8002338:	f893 3060 	ldrb.w	r3, [r3, #96]	; 0x60
 800233c:	2b01      	cmp	r3, #1
 800233e:	d101      	bne.n	8002344 <HAL_DMA2D_ConfigLayer+0x30>
 8002340:	2302      	movs	r3, #2
 8002342:	e092      	b.n	800246a <HAL_DMA2D_ConfigLayer+0x156>
 8002344:	687b      	ldr	r3, [r7, #4]
 8002346:	2201      	movs	r2, #1
 8002348:	f883 2060 	strb.w	r2, [r3, #96]	; 0x60

  /* Change DMA2D peripheral state */
  hdma2d->State = HAL_DMA2D_STATE_BUSY;
 800234c:	687b      	ldr	r3, [r7, #4]
 800234e:	2202      	movs	r2, #2
 8002350:	f883 2061 	strb.w	r2, [r3, #97]	; 0x61

  pLayerCfg = &hdma2d->LayerCfg[LayerIdx];
 8002354:	683a      	ldr	r2, [r7, #0]
 8002356:	4613      	mov	r3, r2
 8002358:	00db      	lsls	r3, r3, #3
 800235a:	1a9b      	subs	r3, r3, r2
 800235c:	009b      	lsls	r3, r3, #2
 800235e:	3328      	adds	r3, #40	; 0x28
 8002360:	687a      	ldr	r2, [r7, #4]
 8002362:	4413      	add	r3, r2
 8002364:	60fb      	str	r3, [r7, #12]

  /* Prepare the value to be written to the BGPFCCR or FGPFCCR register */
  regValue = pLayerCfg->InputColorMode | (pLayerCfg->AlphaMode << DMA2D_BGPFCCR_AM_Pos) | \
 8002366:	68fb      	ldr	r3, [r7, #12]
 8002368:	685a      	ldr	r2, [r3, #4]
 800236a:	68fb      	ldr	r3, [r7, #12]
 800236c:	689b      	ldr	r3, [r3, #8]
 800236e:	041b      	lsls	r3, r3, #16
 8002370:	431a      	orrs	r2, r3
             (pLayerCfg->AlphaInverted << DMA2D_BGPFCCR_AI_Pos) | (pLayerCfg->RedBlueSwap << DMA2D_BGPFCCR_RBS_Pos);
 8002372:	68fb      	ldr	r3, [r7, #12]
 8002374:	691b      	ldr	r3, [r3, #16]
 8002376:	051b      	lsls	r3, r3, #20
  regValue = pLayerCfg->InputColorMode | (pLayerCfg->AlphaMode << DMA2D_BGPFCCR_AM_Pos) | \
 8002378:	431a      	orrs	r2, r3
             (pLayerCfg->AlphaInverted << DMA2D_BGPFCCR_AI_Pos) | (pLayerCfg->RedBlueSwap << DMA2D_BGPFCCR_RBS_Pos);
 800237a:	68fb      	ldr	r3, [r7, #12]
 800237c:	695b      	ldr	r3, [r3, #20]
 800237e:	055b      	lsls	r3, r3, #21
  regValue = pLayerCfg->InputColorMode | (pLayerCfg->AlphaMode << DMA2D_BGPFCCR_AM_Pos) | \
 8002380:	4313      	orrs	r3, r2
 8002382:	613b      	str	r3, [r7, #16]
  regMask  = (DMA2D_BGPFCCR_CM | DMA2D_BGPFCCR_AM | DMA2D_BGPFCCR_ALPHA | DMA2D_BGPFCCR_AI | DMA2D_BGPFCCR_RBS);
 8002384:	4b3c      	ldr	r3, [pc, #240]	; (8002478 <HAL_DMA2D_ConfigLayer+0x164>)
 8002386:	617b      	str	r3, [r7, #20]


  if ((pLayerCfg->InputColorMode == DMA2D_INPUT_A4) || (pLayerCfg->InputColorMode == DMA2D_INPUT_A8))
 8002388:	68fb      	ldr	r3, [r7, #12]
 800238a:	685b      	ldr	r3, [r3, #4]
 800238c:	2b0a      	cmp	r3, #10
 800238e:	d003      	beq.n	8002398 <HAL_DMA2D_ConfigLayer+0x84>
 8002390:	68fb      	ldr	r3, [r7, #12]
 8002392:	685b      	ldr	r3, [r3, #4]
 8002394:	2b09      	cmp	r3, #9
 8002396:	d107      	bne.n	80023a8 <HAL_DMA2D_ConfigLayer+0x94>
  {
    regValue |= (pLayerCfg->InputAlpha & DMA2D_BGPFCCR_ALPHA);
 8002398:	68fb      	ldr	r3, [r7, #12]
 800239a:	68db      	ldr	r3, [r3, #12]
 800239c:	f003 437f 	and.w	r3, r3, #4278190080	; 0xff000000
 80023a0:	693a      	ldr	r2, [r7, #16]
 80023a2:	4313      	orrs	r3, r2
 80023a4:	613b      	str	r3, [r7, #16]
 80023a6:	e005      	b.n	80023b4 <HAL_DMA2D_ConfigLayer+0xa0>
  }
  else
  {
    regValue |= (pLayerCfg->InputAlpha << DMA2D_BGPFCCR_ALPHA_Pos);
 80023a8:	68fb      	ldr	r3, [r7, #12]
 80023aa:	68db      	ldr	r3, [r3, #12]
 80023ac:	061b      	lsls	r3, r3, #24
 80023ae:	693a      	ldr	r2, [r7, #16]
 80023b0:	4313      	orrs	r3, r2
 80023b2:	613b      	str	r3, [r7, #16]
  }

  /* Configure the background DMA2D layer */
  if (LayerIdx == DMA2D_BACKGROUND_LAYER)
 80023b4:	683b      	ldr	r3, [r7, #0]
 80023b6:	2b00      	cmp	r3, #0
 80023b8:	d120      	bne.n	80023fc <HAL_DMA2D_ConfigLayer+0xe8>
  {
    /* Write DMA2D BGPFCCR register */
    MODIFY_REG(hdma2d->Instance->BGPFCCR, regMask, regValue);
 80023ba:	687b      	ldr	r3, [r7, #4]
 80023bc:	681b      	ldr	r3, [r3, #0]
 80023be:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80023c0:	697b      	ldr	r3, [r7, #20]
 80023c2:	43db      	mvns	r3, r3
 80023c4:	ea02 0103 	and.w	r1, r2, r3
 80023c8:	687b      	ldr	r3, [r7, #4]
 80023ca:	681b      	ldr	r3, [r3, #0]
 80023cc:	693a      	ldr	r2, [r7, #16]
 80023ce:	430a      	orrs	r2, r1
 80023d0:	625a      	str	r2, [r3, #36]	; 0x24

    /* DMA2D BGOR register configuration -------------------------------------*/
    WRITE_REG(hdma2d->Instance->BGOR, pLayerCfg->InputOffset);
 80023d2:	687b      	ldr	r3, [r7, #4]
 80023d4:	681b      	ldr	r3, [r3, #0]
 80023d6:	68fa      	ldr	r2, [r7, #12]
 80023d8:	6812      	ldr	r2, [r2, #0]
 80023da:	619a      	str	r2, [r3, #24]

    /* DMA2D BGCOLR register configuration -------------------------------------*/
    if ((pLayerCfg->InputColorMode == DMA2D_INPUT_A4) || (pLayerCfg->InputColorMode == DMA2D_INPUT_A8))
 80023dc:	68fb      	ldr	r3, [r7, #12]
 80023de:	685b      	ldr	r3, [r3, #4]
 80023e0:	2b0a      	cmp	r3, #10
 80023e2:	d003      	beq.n	80023ec <HAL_DMA2D_ConfigLayer+0xd8>
 80023e4:	68fb      	ldr	r3, [r7, #12]
 80023e6:	685b      	ldr	r3, [r3, #4]
 80023e8:	2b09      	cmp	r3, #9
 80023ea:	d135      	bne.n	8002458 <HAL_DMA2D_ConfigLayer+0x144>
    {
      WRITE_REG(hdma2d->Instance->BGCOLR, pLayerCfg->InputAlpha & (DMA2D_BGCOLR_BLUE | DMA2D_BGCOLR_GREEN | \
 80023ec:	68fb      	ldr	r3, [r7, #12]
 80023ee:	68da      	ldr	r2, [r3, #12]
 80023f0:	687b      	ldr	r3, [r7, #4]
 80023f2:	681b      	ldr	r3, [r3, #0]
 80023f4:	f022 427f 	bic.w	r2, r2, #4278190080	; 0xff000000
 80023f8:	629a      	str	r2, [r3, #40]	; 0x28
 80023fa:	e02d      	b.n	8002458 <HAL_DMA2D_ConfigLayer+0x144>
  }
  /* Configure the foreground DMA2D layer */
  else
  {

    if (pLayerCfg->InputColorMode == DMA2D_INPUT_YCBCR)
 80023fc:	68fb      	ldr	r3, [r7, #12]
 80023fe:	685b      	ldr	r3, [r3, #4]
 8002400:	2b0b      	cmp	r3, #11
 8002402:	d109      	bne.n	8002418 <HAL_DMA2D_ConfigLayer+0x104>
    {
      regValue |= (pLayerCfg->ChromaSubSampling << DMA2D_FGPFCCR_CSS_Pos);
 8002404:	68fb      	ldr	r3, [r7, #12]
 8002406:	699b      	ldr	r3, [r3, #24]
 8002408:	049b      	lsls	r3, r3, #18
 800240a:	693a      	ldr	r2, [r7, #16]
 800240c:	4313      	orrs	r3, r2
 800240e:	613b      	str	r3, [r7, #16]
      regMask  |= DMA2D_FGPFCCR_CSS;
 8002410:	697b      	ldr	r3, [r7, #20]
 8002412:	f443 2340 	orr.w	r3, r3, #786432	; 0xc0000
 8002416:	617b      	str	r3, [r7, #20]
    }

    /* Write DMA2D FGPFCCR register */
    MODIFY_REG(hdma2d->Instance->FGPFCCR, regMask, regValue);
 8002418:	687b      	ldr	r3, [r7, #4]
 800241a:	681b      	ldr	r3, [r3, #0]
 800241c:	69da      	ldr	r2, [r3, #28]
 800241e:	697b      	ldr	r3, [r7, #20]
 8002420:	43db      	mvns	r3, r3
 8002422:	ea02 0103 	and.w	r1, r2, r3
 8002426:	687b      	ldr	r3, [r7, #4]
 8002428:	681b      	ldr	r3, [r3, #0]
 800242a:	693a      	ldr	r2, [r7, #16]
 800242c:	430a      	orrs	r2, r1
 800242e:	61da      	str	r2, [r3, #28]

    /* DMA2D FGOR register configuration -------------------------------------*/
    WRITE_REG(hdma2d->Instance->FGOR, pLayerCfg->InputOffset);
 8002430:	687b      	ldr	r3, [r7, #4]
 8002432:	681b      	ldr	r3, [r3, #0]
 8002434:	68fa      	ldr	r2, [r7, #12]
 8002436:	6812      	ldr	r2, [r2, #0]
 8002438:	611a      	str	r2, [r3, #16]

    /* DMA2D FGCOLR register configuration -------------------------------------*/
    if ((pLayerCfg->InputColorMode == DMA2D_INPUT_A4) || (pLayerCfg->InputColorMode == DMA2D_INPUT_A8))
 800243a:	68fb      	ldr	r3, [r7, #12]
 800243c:	685b      	ldr	r3, [r3, #4]
 800243e:	2b0a      	cmp	r3, #10
 8002440:	d003      	beq.n	800244a <HAL_DMA2D_ConfigLayer+0x136>
 8002442:	68fb      	ldr	r3, [r7, #12]
 8002444:	685b      	ldr	r3, [r3, #4]
 8002446:	2b09      	cmp	r3, #9
 8002448:	d106      	bne.n	8002458 <HAL_DMA2D_ConfigLayer+0x144>
    {
      WRITE_REG(hdma2d->Instance->FGCOLR, pLayerCfg->InputAlpha & (DMA2D_FGCOLR_BLUE | DMA2D_FGCOLR_GREEN | \
 800244a:	68fb      	ldr	r3, [r7, #12]
 800244c:	68da      	ldr	r2, [r3, #12]
 800244e:	687b      	ldr	r3, [r7, #4]
 8002450:	681b      	ldr	r3, [r3, #0]
 8002452:	f022 427f 	bic.w	r2, r2, #4278190080	; 0xff000000
 8002456:	621a      	str	r2, [r3, #32]
                                                                   DMA2D_FGCOLR_RED));
    }
  }
  /* Initialize the DMA2D state*/
  hdma2d->State = HAL_DMA2D_STATE_READY;
 8002458:	687b      	ldr	r3, [r7, #4]
 800245a:	2201      	movs	r2, #1
 800245c:	f883 2061 	strb.w	r2, [r3, #97]	; 0x61

  /* Process unlocked */
  __HAL_UNLOCK(hdma2d);
 8002460:	687b      	ldr	r3, [r7, #4]
 8002462:	2200      	movs	r2, #0
 8002464:	f883 2060 	strb.w	r2, [r3, #96]	; 0x60

  return HAL_OK;
 8002468:	2300      	movs	r3, #0
}
 800246a:	4618      	mov	r0, r3
 800246c:	371c      	adds	r7, #28
 800246e:	46bd      	mov	sp, r7
 8002470:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002474:	4770      	bx	lr
 8002476:	bf00      	nop
 8002478:	ff33000f 	.word	0xff33000f

0800247c <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800247c:	b480      	push	{r7}
 800247e:	b089      	sub	sp, #36	; 0x24
 8002480:	af00      	add	r7, sp, #0
 8002482:	6078      	str	r0, [r7, #4]
 8002484:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8002486:	2300      	movs	r3, #0
 8002488:	61fb      	str	r3, [r7, #28]
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
#else
  EXTI_CurrentCPU = EXTI_D1; /* EXTI for CM7 CPU */
 800248a:	4b86      	ldr	r3, [pc, #536]	; (80026a4 <HAL_GPIO_Init+0x228>)
 800248c:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 800248e:	e18c      	b.n	80027aa <HAL_GPIO_Init+0x32e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8002490:	683b      	ldr	r3, [r7, #0]
 8002492:	681a      	ldr	r2, [r3, #0]
 8002494:	2101      	movs	r1, #1
 8002496:	69fb      	ldr	r3, [r7, #28]
 8002498:	fa01 f303 	lsl.w	r3, r1, r3
 800249c:	4013      	ands	r3, r2
 800249e:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00U)
 80024a0:	693b      	ldr	r3, [r7, #16]
 80024a2:	2b00      	cmp	r3, #0
 80024a4:	f000 817e 	beq.w	80027a4 <HAL_GPIO_Init+0x328>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if ((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80024a8:	683b      	ldr	r3, [r7, #0]
 80024aa:	685b      	ldr	r3, [r3, #4]
 80024ac:	2b01      	cmp	r3, #1
 80024ae:	d00b      	beq.n	80024c8 <HAL_GPIO_Init+0x4c>
 80024b0:	683b      	ldr	r3, [r7, #0]
 80024b2:	685b      	ldr	r3, [r3, #4]
 80024b4:	2b02      	cmp	r3, #2
 80024b6:	d007      	beq.n	80024c8 <HAL_GPIO_Init+0x4c>
          (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80024b8:	683b      	ldr	r3, [r7, #0]
 80024ba:	685b      	ldr	r3, [r3, #4]
      if ((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80024bc:	2b11      	cmp	r3, #17
 80024be:	d003      	beq.n	80024c8 <HAL_GPIO_Init+0x4c>
          (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80024c0:	683b      	ldr	r3, [r7, #0]
 80024c2:	685b      	ldr	r3, [r3, #4]
 80024c4:	2b12      	cmp	r3, #18
 80024c6:	d130      	bne.n	800252a <HAL_GPIO_Init+0xae>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80024c8:	687b      	ldr	r3, [r7, #4]
 80024ca:	689b      	ldr	r3, [r3, #8]
 80024cc:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 80024ce:	69fb      	ldr	r3, [r7, #28]
 80024d0:	005b      	lsls	r3, r3, #1
 80024d2:	2203      	movs	r2, #3
 80024d4:	fa02 f303 	lsl.w	r3, r2, r3
 80024d8:	43db      	mvns	r3, r3
 80024da:	69ba      	ldr	r2, [r7, #24]
 80024dc:	4013      	ands	r3, r2
 80024de:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80024e0:	683b      	ldr	r3, [r7, #0]
 80024e2:	68da      	ldr	r2, [r3, #12]
 80024e4:	69fb      	ldr	r3, [r7, #28]
 80024e6:	005b      	lsls	r3, r3, #1
 80024e8:	fa02 f303 	lsl.w	r3, r2, r3
 80024ec:	69ba      	ldr	r2, [r7, #24]
 80024ee:	4313      	orrs	r3, r2
 80024f0:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80024f2:	687b      	ldr	r3, [r7, #4]
 80024f4:	69ba      	ldr	r2, [r7, #24]
 80024f6:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80024f8:	687b      	ldr	r3, [r7, #4]
 80024fa:	685b      	ldr	r3, [r3, #4]
 80024fc:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 80024fe:	2201      	movs	r2, #1
 8002500:	69fb      	ldr	r3, [r7, #28]
 8002502:	fa02 f303 	lsl.w	r3, r2, r3
 8002506:	43db      	mvns	r3, r3
 8002508:	69ba      	ldr	r2, [r7, #24]
 800250a:	4013      	ands	r3, r2
 800250c:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 800250e:	683b      	ldr	r3, [r7, #0]
 8002510:	685b      	ldr	r3, [r3, #4]
 8002512:	091b      	lsrs	r3, r3, #4
 8002514:	f003 0201 	and.w	r2, r3, #1
 8002518:	69fb      	ldr	r3, [r7, #28]
 800251a:	fa02 f303 	lsl.w	r3, r2, r3
 800251e:	69ba      	ldr	r2, [r7, #24]
 8002520:	4313      	orrs	r3, r2
 8002522:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8002524:	687b      	ldr	r3, [r7, #4]
 8002526:	69ba      	ldr	r2, [r7, #24]
 8002528:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 800252a:	687b      	ldr	r3, [r7, #4]
 800252c:	68db      	ldr	r3, [r3, #12]
 800252e:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8002530:	69fb      	ldr	r3, [r7, #28]
 8002532:	005b      	lsls	r3, r3, #1
 8002534:	2203      	movs	r2, #3
 8002536:	fa02 f303 	lsl.w	r3, r2, r3
 800253a:	43db      	mvns	r3, r3
 800253c:	69ba      	ldr	r2, [r7, #24]
 800253e:	4013      	ands	r3, r2
 8002540:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8002542:	683b      	ldr	r3, [r7, #0]
 8002544:	689a      	ldr	r2, [r3, #8]
 8002546:	69fb      	ldr	r3, [r7, #28]
 8002548:	005b      	lsls	r3, r3, #1
 800254a:	fa02 f303 	lsl.w	r3, r2, r3
 800254e:	69ba      	ldr	r2, [r7, #24]
 8002550:	4313      	orrs	r3, r2
 8002552:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8002554:	687b      	ldr	r3, [r7, #4]
 8002556:	69ba      	ldr	r2, [r7, #24]
 8002558:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 800255a:	683b      	ldr	r3, [r7, #0]
 800255c:	685b      	ldr	r3, [r3, #4]
 800255e:	2b02      	cmp	r3, #2
 8002560:	d003      	beq.n	800256a <HAL_GPIO_Init+0xee>
 8002562:	683b      	ldr	r3, [r7, #0]
 8002564:	685b      	ldr	r3, [r3, #4]
 8002566:	2b12      	cmp	r3, #18
 8002568:	d123      	bne.n	80025b2 <HAL_GPIO_Init+0x136>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 800256a:	69fb      	ldr	r3, [r7, #28]
 800256c:	08da      	lsrs	r2, r3, #3
 800256e:	687b      	ldr	r3, [r7, #4]
 8002570:	3208      	adds	r2, #8
 8002572:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002576:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8002578:	69fb      	ldr	r3, [r7, #28]
 800257a:	f003 0307 	and.w	r3, r3, #7
 800257e:	009b      	lsls	r3, r3, #2
 8002580:	220f      	movs	r2, #15
 8002582:	fa02 f303 	lsl.w	r3, r2, r3
 8002586:	43db      	mvns	r3, r3
 8002588:	69ba      	ldr	r2, [r7, #24]
 800258a:	4013      	ands	r3, r2
 800258c:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 800258e:	683b      	ldr	r3, [r7, #0]
 8002590:	691a      	ldr	r2, [r3, #16]
 8002592:	69fb      	ldr	r3, [r7, #28]
 8002594:	f003 0307 	and.w	r3, r3, #7
 8002598:	009b      	lsls	r3, r3, #2
 800259a:	fa02 f303 	lsl.w	r3, r2, r3
 800259e:	69ba      	ldr	r2, [r7, #24]
 80025a0:	4313      	orrs	r3, r2
 80025a2:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80025a4:	69fb      	ldr	r3, [r7, #28]
 80025a6:	08da      	lsrs	r2, r3, #3
 80025a8:	687b      	ldr	r3, [r7, #4]
 80025aa:	3208      	adds	r2, #8
 80025ac:	69b9      	ldr	r1, [r7, #24]
 80025ae:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80025b2:	687b      	ldr	r3, [r7, #4]
 80025b4:	681b      	ldr	r3, [r3, #0]
 80025b6:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 80025b8:	69fb      	ldr	r3, [r7, #28]
 80025ba:	005b      	lsls	r3, r3, #1
 80025bc:	2203      	movs	r2, #3
 80025be:	fa02 f303 	lsl.w	r3, r2, r3
 80025c2:	43db      	mvns	r3, r3
 80025c4:	69ba      	ldr	r2, [r7, #24]
 80025c6:	4013      	ands	r3, r2
 80025c8:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80025ca:	683b      	ldr	r3, [r7, #0]
 80025cc:	685b      	ldr	r3, [r3, #4]
 80025ce:	f003 0203 	and.w	r2, r3, #3
 80025d2:	69fb      	ldr	r3, [r7, #28]
 80025d4:	005b      	lsls	r3, r3, #1
 80025d6:	fa02 f303 	lsl.w	r3, r2, r3
 80025da:	69ba      	ldr	r2, [r7, #24]
 80025dc:	4313      	orrs	r3, r2
 80025de:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80025e0:	687b      	ldr	r3, [r7, #4]
 80025e2:	69ba      	ldr	r2, [r7, #24]
 80025e4:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80025e6:	683b      	ldr	r3, [r7, #0]
 80025e8:	685b      	ldr	r3, [r3, #4]
 80025ea:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80025ee:	2b00      	cmp	r3, #0
 80025f0:	f000 80d8 	beq.w	80027a4 <HAL_GPIO_Init+0x328>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80025f4:	4b2c      	ldr	r3, [pc, #176]	; (80026a8 <HAL_GPIO_Init+0x22c>)
 80025f6:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 80025fa:	4a2b      	ldr	r2, [pc, #172]	; (80026a8 <HAL_GPIO_Init+0x22c>)
 80025fc:	f043 0302 	orr.w	r3, r3, #2
 8002600:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 8002604:	4b28      	ldr	r3, [pc, #160]	; (80026a8 <HAL_GPIO_Init+0x22c>)
 8002606:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 800260a:	f003 0302 	and.w	r3, r3, #2
 800260e:	60fb      	str	r3, [r7, #12]
 8002610:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8002612:	4a26      	ldr	r2, [pc, #152]	; (80026ac <HAL_GPIO_Init+0x230>)
 8002614:	69fb      	ldr	r3, [r7, #28]
 8002616:	089b      	lsrs	r3, r3, #2
 8002618:	3302      	adds	r3, #2
 800261a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800261e:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8002620:	69fb      	ldr	r3, [r7, #28]
 8002622:	f003 0303 	and.w	r3, r3, #3
 8002626:	009b      	lsls	r3, r3, #2
 8002628:	220f      	movs	r2, #15
 800262a:	fa02 f303 	lsl.w	r3, r2, r3
 800262e:	43db      	mvns	r3, r3
 8002630:	69ba      	ldr	r2, [r7, #24]
 8002632:	4013      	ands	r3, r2
 8002634:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8002636:	687b      	ldr	r3, [r7, #4]
 8002638:	4a1d      	ldr	r2, [pc, #116]	; (80026b0 <HAL_GPIO_Init+0x234>)
 800263a:	4293      	cmp	r3, r2
 800263c:	d04a      	beq.n	80026d4 <HAL_GPIO_Init+0x258>
 800263e:	687b      	ldr	r3, [r7, #4]
 8002640:	4a1c      	ldr	r2, [pc, #112]	; (80026b4 <HAL_GPIO_Init+0x238>)
 8002642:	4293      	cmp	r3, r2
 8002644:	d02b      	beq.n	800269e <HAL_GPIO_Init+0x222>
 8002646:	687b      	ldr	r3, [r7, #4]
 8002648:	4a1b      	ldr	r2, [pc, #108]	; (80026b8 <HAL_GPIO_Init+0x23c>)
 800264a:	4293      	cmp	r3, r2
 800264c:	d025      	beq.n	800269a <HAL_GPIO_Init+0x21e>
 800264e:	687b      	ldr	r3, [r7, #4]
 8002650:	4a1a      	ldr	r2, [pc, #104]	; (80026bc <HAL_GPIO_Init+0x240>)
 8002652:	4293      	cmp	r3, r2
 8002654:	d01f      	beq.n	8002696 <HAL_GPIO_Init+0x21a>
 8002656:	687b      	ldr	r3, [r7, #4]
 8002658:	4a19      	ldr	r2, [pc, #100]	; (80026c0 <HAL_GPIO_Init+0x244>)
 800265a:	4293      	cmp	r3, r2
 800265c:	d019      	beq.n	8002692 <HAL_GPIO_Init+0x216>
 800265e:	687b      	ldr	r3, [r7, #4]
 8002660:	4a18      	ldr	r2, [pc, #96]	; (80026c4 <HAL_GPIO_Init+0x248>)
 8002662:	4293      	cmp	r3, r2
 8002664:	d013      	beq.n	800268e <HAL_GPIO_Init+0x212>
 8002666:	687b      	ldr	r3, [r7, #4]
 8002668:	4a17      	ldr	r2, [pc, #92]	; (80026c8 <HAL_GPIO_Init+0x24c>)
 800266a:	4293      	cmp	r3, r2
 800266c:	d00d      	beq.n	800268a <HAL_GPIO_Init+0x20e>
 800266e:	687b      	ldr	r3, [r7, #4]
 8002670:	4a16      	ldr	r2, [pc, #88]	; (80026cc <HAL_GPIO_Init+0x250>)
 8002672:	4293      	cmp	r3, r2
 8002674:	d007      	beq.n	8002686 <HAL_GPIO_Init+0x20a>
 8002676:	687b      	ldr	r3, [r7, #4]
 8002678:	4a15      	ldr	r2, [pc, #84]	; (80026d0 <HAL_GPIO_Init+0x254>)
 800267a:	4293      	cmp	r3, r2
 800267c:	d101      	bne.n	8002682 <HAL_GPIO_Init+0x206>
 800267e:	2309      	movs	r3, #9
 8002680:	e029      	b.n	80026d6 <HAL_GPIO_Init+0x25a>
 8002682:	230a      	movs	r3, #10
 8002684:	e027      	b.n	80026d6 <HAL_GPIO_Init+0x25a>
 8002686:	2307      	movs	r3, #7
 8002688:	e025      	b.n	80026d6 <HAL_GPIO_Init+0x25a>
 800268a:	2306      	movs	r3, #6
 800268c:	e023      	b.n	80026d6 <HAL_GPIO_Init+0x25a>
 800268e:	2305      	movs	r3, #5
 8002690:	e021      	b.n	80026d6 <HAL_GPIO_Init+0x25a>
 8002692:	2304      	movs	r3, #4
 8002694:	e01f      	b.n	80026d6 <HAL_GPIO_Init+0x25a>
 8002696:	2303      	movs	r3, #3
 8002698:	e01d      	b.n	80026d6 <HAL_GPIO_Init+0x25a>
 800269a:	2302      	movs	r3, #2
 800269c:	e01b      	b.n	80026d6 <HAL_GPIO_Init+0x25a>
 800269e:	2301      	movs	r3, #1
 80026a0:	e019      	b.n	80026d6 <HAL_GPIO_Init+0x25a>
 80026a2:	bf00      	nop
 80026a4:	58000080 	.word	0x58000080
 80026a8:	58024400 	.word	0x58024400
 80026ac:	58000400 	.word	0x58000400
 80026b0:	58020000 	.word	0x58020000
 80026b4:	58020400 	.word	0x58020400
 80026b8:	58020800 	.word	0x58020800
 80026bc:	58020c00 	.word	0x58020c00
 80026c0:	58021000 	.word	0x58021000
 80026c4:	58021400 	.word	0x58021400
 80026c8:	58021800 	.word	0x58021800
 80026cc:	58021c00 	.word	0x58021c00
 80026d0:	58022400 	.word	0x58022400
 80026d4:	2300      	movs	r3, #0
 80026d6:	69fa      	ldr	r2, [r7, #28]
 80026d8:	f002 0203 	and.w	r2, r2, #3
 80026dc:	0092      	lsls	r2, r2, #2
 80026de:	4093      	lsls	r3, r2
 80026e0:	69ba      	ldr	r2, [r7, #24]
 80026e2:	4313      	orrs	r3, r2
 80026e4:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80026e6:	4938      	ldr	r1, [pc, #224]	; (80027c8 <HAL_GPIO_Init+0x34c>)
 80026e8:	69fb      	ldr	r3, [r7, #28]
 80026ea:	089b      	lsrs	r3, r3, #2
 80026ec:	3302      	adds	r3, #2
 80026ee:	69ba      	ldr	r2, [r7, #24]
 80026f0:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
 80026f4:	697b      	ldr	r3, [r7, #20]
 80026f6:	681b      	ldr	r3, [r3, #0]
 80026f8:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 80026fa:	693b      	ldr	r3, [r7, #16]
 80026fc:	43db      	mvns	r3, r3
 80026fe:	69ba      	ldr	r2, [r7, #24]
 8002700:	4013      	ands	r3, r2
 8002702:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8002704:	683b      	ldr	r3, [r7, #0]
 8002706:	685b      	ldr	r3, [r3, #4]
 8002708:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800270c:	2b00      	cmp	r3, #0
 800270e:	d003      	beq.n	8002718 <HAL_GPIO_Init+0x29c>
        {
          temp |= iocurrent;
 8002710:	69ba      	ldr	r2, [r7, #24]
 8002712:	693b      	ldr	r3, [r7, #16]
 8002714:	4313      	orrs	r3, r2
 8002716:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->IMR1 = temp;
 8002718:	697b      	ldr	r3, [r7, #20]
 800271a:	69ba      	ldr	r2, [r7, #24]
 800271c:	601a      	str	r2, [r3, #0]

        temp = EXTI_CurrentCPU->EMR1;
 800271e:	697b      	ldr	r3, [r7, #20]
 8002720:	685b      	ldr	r3, [r3, #4]
 8002722:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8002724:	693b      	ldr	r3, [r7, #16]
 8002726:	43db      	mvns	r3, r3
 8002728:	69ba      	ldr	r2, [r7, #24]
 800272a:	4013      	ands	r3, r2
 800272c:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 800272e:	683b      	ldr	r3, [r7, #0]
 8002730:	685b      	ldr	r3, [r3, #4]
 8002732:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002736:	2b00      	cmp	r3, #0
 8002738:	d003      	beq.n	8002742 <HAL_GPIO_Init+0x2c6>
        {
          temp |= iocurrent;
 800273a:	69ba      	ldr	r2, [r7, #24]
 800273c:	693b      	ldr	r3, [r7, #16]
 800273e:	4313      	orrs	r3, r2
 8002740:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->EMR1 = temp;
 8002742:	697b      	ldr	r3, [r7, #20]
 8002744:	69ba      	ldr	r2, [r7, #24]
 8002746:	605a      	str	r2, [r3, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8002748:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800274c:	681b      	ldr	r3, [r3, #0]
 800274e:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8002750:	693b      	ldr	r3, [r7, #16]
 8002752:	43db      	mvns	r3, r3
 8002754:	69ba      	ldr	r2, [r7, #24]
 8002756:	4013      	ands	r3, r2
 8002758:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 800275a:	683b      	ldr	r3, [r7, #0]
 800275c:	685b      	ldr	r3, [r3, #4]
 800275e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002762:	2b00      	cmp	r3, #0
 8002764:	d003      	beq.n	800276e <HAL_GPIO_Init+0x2f2>
        {
          temp |= iocurrent;
 8002766:	69ba      	ldr	r2, [r7, #24]
 8002768:	693b      	ldr	r3, [r7, #16]
 800276a:	4313      	orrs	r3, r2
 800276c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR1 = temp;
 800276e:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8002772:	69bb      	ldr	r3, [r7, #24]
 8002774:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 8002776:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800277a:	685b      	ldr	r3, [r3, #4]
 800277c:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 800277e:	693b      	ldr	r3, [r7, #16]
 8002780:	43db      	mvns	r3, r3
 8002782:	69ba      	ldr	r2, [r7, #24]
 8002784:	4013      	ands	r3, r2
 8002786:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8002788:	683b      	ldr	r3, [r7, #0]
 800278a:	685b      	ldr	r3, [r3, #4]
 800278c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002790:	2b00      	cmp	r3, #0
 8002792:	d003      	beq.n	800279c <HAL_GPIO_Init+0x320>
        {
          temp |= iocurrent;
 8002794:	69ba      	ldr	r2, [r7, #24]
 8002796:	693b      	ldr	r3, [r7, #16]
 8002798:	4313      	orrs	r3, r2
 800279a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR1 = temp;
 800279c:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80027a0:	69bb      	ldr	r3, [r7, #24]
 80027a2:	6053      	str	r3, [r2, #4]
      }
    }

    position++;
 80027a4:	69fb      	ldr	r3, [r7, #28]
 80027a6:	3301      	adds	r3, #1
 80027a8:	61fb      	str	r3, [r7, #28]
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 80027aa:	683b      	ldr	r3, [r7, #0]
 80027ac:	681a      	ldr	r2, [r3, #0]
 80027ae:	69fb      	ldr	r3, [r7, #28]
 80027b0:	fa22 f303 	lsr.w	r3, r2, r3
 80027b4:	2b00      	cmp	r3, #0
 80027b6:	f47f ae6b 	bne.w	8002490 <HAL_GPIO_Init+0x14>
  }
}
 80027ba:	bf00      	nop
 80027bc:	bf00      	nop
 80027be:	3724      	adds	r7, #36	; 0x24
 80027c0:	46bd      	mov	sp, r7
 80027c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027c6:	4770      	bx	lr
 80027c8:	58000400 	.word	0x58000400

080027cc <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80027cc:	b480      	push	{r7}
 80027ce:	b083      	sub	sp, #12
 80027d0:	af00      	add	r7, sp, #0
 80027d2:	6078      	str	r0, [r7, #4]
 80027d4:	460b      	mov	r3, r1
 80027d6:	807b      	strh	r3, [r7, #2]
 80027d8:	4613      	mov	r3, r2
 80027da:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80027dc:	787b      	ldrb	r3, [r7, #1]
 80027de:	2b00      	cmp	r3, #0
 80027e0:	d003      	beq.n	80027ea <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80027e2:	887a      	ldrh	r2, [r7, #2]
 80027e4:	687b      	ldr	r3, [r7, #4]
 80027e6:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
  }
}
 80027e8:	e003      	b.n	80027f2 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 80027ea:	887b      	ldrh	r3, [r7, #2]
 80027ec:	041a      	lsls	r2, r3, #16
 80027ee:	687b      	ldr	r3, [r7, #4]
 80027f0:	619a      	str	r2, [r3, #24]
}
 80027f2:	bf00      	nop
 80027f4:	370c      	adds	r7, #12
 80027f6:	46bd      	mov	sp, r7
 80027f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027fc:	4770      	bx	lr
	...

08002800 <HAL_NOR_Init>:
  * @param  ExtTiming pointer to NOR extended mode timing structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_NOR_Init(NOR_HandleTypeDef *hnor, FMC_NORSRAM_TimingTypeDef *Timing,
                               FMC_NORSRAM_TimingTypeDef *ExtTiming)
{
 8002800:	b580      	push	{r7, lr}
 8002802:	b086      	sub	sp, #24
 8002804:	af00      	add	r7, sp, #0
 8002806:	60f8      	str	r0, [r7, #12]
 8002808:	60b9      	str	r1, [r7, #8]
 800280a:	607a      	str	r2, [r7, #4]
  uint32_t deviceaddress;

  /* Check the NOR handle parameter */
  if (hnor == NULL)
 800280c:	68fb      	ldr	r3, [r7, #12]
 800280e:	2b00      	cmp	r3, #0
 8002810:	d101      	bne.n	8002816 <HAL_NOR_Init+0x16>
  {
    return HAL_ERROR;
 8002812:	2301      	movs	r3, #1
 8002814:	e083      	b.n	800291e <HAL_NOR_Init+0x11e>
  }

  if (hnor->State == HAL_NOR_STATE_RESET)
 8002816:	68fb      	ldr	r3, [r7, #12]
 8002818:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800281c:	b2db      	uxtb	r3, r3
 800281e:	2b00      	cmp	r3, #0
 8002820:	d106      	bne.n	8002830 <HAL_NOR_Init+0x30>
  {
    /* Allocate lock resource and initialize it */
    hnor->Lock = HAL_UNLOCKED;
 8002822:	68fb      	ldr	r3, [r7, #12]
 8002824:	2200      	movs	r2, #0
 8002826:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44

    /* Init the low level hardware */
    hnor->MspInitCallback(hnor);
#else
    /* Initialize the low level hardware (MSP) */
    HAL_NOR_MspInit(hnor);
 800282a:	68f8      	ldr	r0, [r7, #12]
 800282c:	f7fe fc6e 	bl	800110c <HAL_NOR_MspInit>
#endif /* (USE_HAL_NOR_REGISTER_CALLBACKS) */
  }

  /* Initialize NOR control Interface */
  (void)FMC_NORSRAM_Init(hnor->Instance, &(hnor->Init));
 8002830:	68fb      	ldr	r3, [r7, #12]
 8002832:	681a      	ldr	r2, [r3, #0]
 8002834:	68fb      	ldr	r3, [r7, #12]
 8002836:	3308      	adds	r3, #8
 8002838:	4619      	mov	r1, r3
 800283a:	4610      	mov	r0, r2
 800283c:	f004 f8b2 	bl	80069a4 <FMC_NORSRAM_Init>

  /* Initialize NOR timing Interface */
  (void)FMC_NORSRAM_Timing_Init(hnor->Instance, Timing, hnor->Init.NSBank);
 8002840:	68fb      	ldr	r3, [r7, #12]
 8002842:	6818      	ldr	r0, [r3, #0]
 8002844:	68fb      	ldr	r3, [r7, #12]
 8002846:	689b      	ldr	r3, [r3, #8]
 8002848:	461a      	mov	r2, r3
 800284a:	68b9      	ldr	r1, [r7, #8]
 800284c:	f004 f93a 	bl	8006ac4 <FMC_NORSRAM_Timing_Init>

  /* Initialize NOR extended mode timing Interface */
  (void)FMC_NORSRAM_Extended_Timing_Init(hnor->Extended, ExtTiming, hnor->Init.NSBank, hnor->Init.ExtendedMode);
 8002850:	68fb      	ldr	r3, [r7, #12]
 8002852:	6858      	ldr	r0, [r3, #4]
 8002854:	68fb      	ldr	r3, [r7, #12]
 8002856:	689a      	ldr	r2, [r3, #8]
 8002858:	68fb      	ldr	r3, [r7, #12]
 800285a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800285c:	6879      	ldr	r1, [r7, #4]
 800285e:	f004 f981 	bl	8006b64 <FMC_NORSRAM_Extended_Timing_Init>

  /* Enable the NORSRAM device */
  __FMC_NORSRAM_ENABLE(hnor->Instance, hnor->Init.NSBank);
 8002862:	68fb      	ldr	r3, [r7, #12]
 8002864:	681b      	ldr	r3, [r3, #0]
 8002866:	68fa      	ldr	r2, [r7, #12]
 8002868:	6892      	ldr	r2, [r2, #8]
 800286a:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800286e:	68fb      	ldr	r3, [r7, #12]
 8002870:	681b      	ldr	r3, [r3, #0]
 8002872:	68fa      	ldr	r2, [r7, #12]
 8002874:	6892      	ldr	r2, [r2, #8]
 8002876:	f041 0101 	orr.w	r1, r1, #1
 800287a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

  /* Initialize NOR Memory Data Width*/
  if (hnor->Init.MemoryDataWidth == FMC_NORSRAM_MEM_BUS_WIDTH_8)
 800287e:	68fb      	ldr	r3, [r7, #12]
 8002880:	695b      	ldr	r3, [r3, #20]
 8002882:	2b00      	cmp	r3, #0
 8002884:	d103      	bne.n	800288e <HAL_NOR_Init+0x8e>
  {
    uwNORMemoryDataWidth = NOR_MEMORY_8B;
 8002886:	4b28      	ldr	r3, [pc, #160]	; (8002928 <HAL_NOR_Init+0x128>)
 8002888:	2200      	movs	r2, #0
 800288a:	601a      	str	r2, [r3, #0]
 800288c:	e002      	b.n	8002894 <HAL_NOR_Init+0x94>
  }
  else
  {
    uwNORMemoryDataWidth = NOR_MEMORY_16B;
 800288e:	4b26      	ldr	r3, [pc, #152]	; (8002928 <HAL_NOR_Init+0x128>)
 8002890:	2201      	movs	r2, #1
 8002892:	601a      	str	r2, [r3, #0]
  }

  /* Enable FMC Peripheral */
  __FMC_ENABLE();
 8002894:	4b25      	ldr	r3, [pc, #148]	; (800292c <HAL_NOR_Init+0x12c>)
 8002896:	681b      	ldr	r3, [r3, #0]
 8002898:	4a24      	ldr	r2, [pc, #144]	; (800292c <HAL_NOR_Init+0x12c>)
 800289a:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800289e:	6013      	str	r3, [r2, #0]

  /* Initialize the NOR controller state */
  hnor->State = HAL_NOR_STATE_READY;
 80028a0:	68fb      	ldr	r3, [r7, #12]
 80028a2:	2201      	movs	r2, #1
 80028a4:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Select the NOR device address */
  if (hnor->Init.NSBank == FMC_NORSRAM_BANK1)
 80028a8:	68fb      	ldr	r3, [r7, #12]
 80028aa:	689b      	ldr	r3, [r3, #8]
 80028ac:	2b00      	cmp	r3, #0
 80028ae:	d103      	bne.n	80028b8 <HAL_NOR_Init+0xb8>
  {
    deviceaddress = NOR_MEMORY_ADRESS1;
 80028b0:	f04f 43c0 	mov.w	r3, #1610612736	; 0x60000000
 80028b4:	617b      	str	r3, [r7, #20]
 80028b6:	e012      	b.n	80028de <HAL_NOR_Init+0xde>
  }
  else if (hnor->Init.NSBank == FMC_NORSRAM_BANK2)
 80028b8:	68fb      	ldr	r3, [r7, #12]
 80028ba:	689b      	ldr	r3, [r3, #8]
 80028bc:	2b02      	cmp	r3, #2
 80028be:	d103      	bne.n	80028c8 <HAL_NOR_Init+0xc8>
  {
    deviceaddress = NOR_MEMORY_ADRESS2;
 80028c0:	f04f 43c8 	mov.w	r3, #1677721600	; 0x64000000
 80028c4:	617b      	str	r3, [r7, #20]
 80028c6:	e00a      	b.n	80028de <HAL_NOR_Init+0xde>
  }
  else if (hnor->Init.NSBank == FMC_NORSRAM_BANK3)
 80028c8:	68fb      	ldr	r3, [r7, #12]
 80028ca:	689b      	ldr	r3, [r3, #8]
 80028cc:	2b04      	cmp	r3, #4
 80028ce:	d103      	bne.n	80028d8 <HAL_NOR_Init+0xd8>
  {
    deviceaddress = NOR_MEMORY_ADRESS3;
 80028d0:	f04f 43d0 	mov.w	r3, #1744830464	; 0x68000000
 80028d4:	617b      	str	r3, [r7, #20]
 80028d6:	e002      	b.n	80028de <HAL_NOR_Init+0xde>
  }
  else /* FMC_NORSRAM_BANK4 */
  {
    deviceaddress = NOR_MEMORY_ADRESS4;
 80028d8:	f04f 43d8 	mov.w	r3, #1811939328	; 0x6c000000
 80028dc:	617b      	str	r3, [r7, #20]
  }

  /* Get the value of the command set */
  NOR_WRITE(NOR_ADDR_SHIFT(deviceaddress, uwNORMemoryDataWidth, NOR_CMD_ADDRESS_FIRST_CFI), NOR_CMD_DATA_CFI);
 80028de:	4b12      	ldr	r3, [pc, #72]	; (8002928 <HAL_NOR_Init+0x128>)
 80028e0:	681b      	ldr	r3, [r3, #0]
 80028e2:	2b01      	cmp	r3, #1
 80028e4:	d102      	bne.n	80028ec <HAL_NOR_Init+0xec>
 80028e6:	697b      	ldr	r3, [r7, #20]
 80028e8:	33aa      	adds	r3, #170	; 0xaa
 80028ea:	e001      	b.n	80028f0 <HAL_NOR_Init+0xf0>
 80028ec:	697b      	ldr	r3, [r7, #20]
 80028ee:	3355      	adds	r3, #85	; 0x55
 80028f0:	2298      	movs	r2, #152	; 0x98
 80028f2:	801a      	strh	r2, [r3, #0]
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 80028f4:	f3bf 8f4f 	dsb	sy
}
 80028f8:	bf00      	nop
  hnor->CommandSet = *(__IO uint16_t *) NOR_ADDR_SHIFT(deviceaddress, uwNORMemoryDataWidth, NOR_ADDRESS_COMMAND_SET);
 80028fa:	4b0b      	ldr	r3, [pc, #44]	; (8002928 <HAL_NOR_Init+0x128>)
 80028fc:	681b      	ldr	r3, [r3, #0]
 80028fe:	2b01      	cmp	r3, #1
 8002900:	d102      	bne.n	8002908 <HAL_NOR_Init+0x108>
 8002902:	697b      	ldr	r3, [r7, #20]
 8002904:	3326      	adds	r3, #38	; 0x26
 8002906:	e001      	b.n	800290c <HAL_NOR_Init+0x10c>
 8002908:	697b      	ldr	r3, [r7, #20]
 800290a:	3313      	adds	r3, #19
 800290c:	881b      	ldrh	r3, [r3, #0]
 800290e:	b29b      	uxth	r3, r3
 8002910:	461a      	mov	r2, r3
 8002912:	68fb      	ldr	r3, [r7, #12]
 8002914:	649a      	str	r2, [r3, #72]	; 0x48

  return HAL_NOR_ReturnToReadMode(hnor);
 8002916:	68f8      	ldr	r0, [r7, #12]
 8002918:	f000 f80a 	bl	8002930 <HAL_NOR_ReturnToReadMode>
 800291c:	4603      	mov	r3, r0
}
 800291e:	4618      	mov	r0, r3
 8002920:	3718      	adds	r7, #24
 8002922:	46bd      	mov	sp, r7
 8002924:	bd80      	pop	{r7, pc}
 8002926:	bf00      	nop
 8002928:	200000c0 	.word	0x200000c0
 800292c:	52004000 	.word	0x52004000

08002930 <HAL_NOR_ReturnToReadMode>:
  * @param  hnor pointer to a NOR_HandleTypeDef structure that contains
  *                the configuration information for NOR module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_NOR_ReturnToReadMode(NOR_HandleTypeDef *hnor)
{
 8002930:	b480      	push	{r7}
 8002932:	b085      	sub	sp, #20
 8002934:	af00      	add	r7, sp, #0
 8002936:	6078      	str	r0, [r7, #4]
  uint32_t deviceaddress;
  HAL_NOR_StateTypeDef state;
  HAL_StatusTypeDef status = HAL_OK;
 8002938:	2300      	movs	r3, #0
 800293a:	72fb      	strb	r3, [r7, #11]

  /* Check the NOR controller state */
  state = hnor->State;
 800293c:	687b      	ldr	r3, [r7, #4]
 800293e:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8002942:	72bb      	strb	r3, [r7, #10]
  if (state == HAL_NOR_STATE_BUSY)
 8002944:	7abb      	ldrb	r3, [r7, #10]
 8002946:	2b02      	cmp	r3, #2
 8002948:	d101      	bne.n	800294e <HAL_NOR_ReturnToReadMode+0x1e>
  {
    return HAL_BUSY;
 800294a:	2302      	movs	r3, #2
 800294c:	e04e      	b.n	80029ec <HAL_NOR_ReturnToReadMode+0xbc>
  }
  else if ((state == HAL_NOR_STATE_READY) || (state == HAL_NOR_STATE_PROTECTED))
 800294e:	7abb      	ldrb	r3, [r7, #10]
 8002950:	2b01      	cmp	r3, #1
 8002952:	d002      	beq.n	800295a <HAL_NOR_ReturnToReadMode+0x2a>
 8002954:	7abb      	ldrb	r3, [r7, #10]
 8002956:	2b04      	cmp	r3, #4
 8002958:	d147      	bne.n	80029ea <HAL_NOR_ReturnToReadMode+0xba>
  {
    /* Process Locked */
    __HAL_LOCK(hnor);
 800295a:	687b      	ldr	r3, [r7, #4]
 800295c:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8002960:	2b01      	cmp	r3, #1
 8002962:	d101      	bne.n	8002968 <HAL_NOR_ReturnToReadMode+0x38>
 8002964:	2302      	movs	r3, #2
 8002966:	e041      	b.n	80029ec <HAL_NOR_ReturnToReadMode+0xbc>
 8002968:	687b      	ldr	r3, [r7, #4]
 800296a:	2201      	movs	r2, #1
 800296c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44

    /* Update the NOR controller state */
    hnor->State = HAL_NOR_STATE_BUSY;
 8002970:	687b      	ldr	r3, [r7, #4]
 8002972:	2202      	movs	r2, #2
 8002974:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

    /* Select the NOR device address */
    if (hnor->Init.NSBank == FMC_NORSRAM_BANK1)
 8002978:	687b      	ldr	r3, [r7, #4]
 800297a:	689b      	ldr	r3, [r3, #8]
 800297c:	2b00      	cmp	r3, #0
 800297e:	d103      	bne.n	8002988 <HAL_NOR_ReturnToReadMode+0x58>
    {
      deviceaddress = NOR_MEMORY_ADRESS1;
 8002980:	f04f 43c0 	mov.w	r3, #1610612736	; 0x60000000
 8002984:	60fb      	str	r3, [r7, #12]
 8002986:	e012      	b.n	80029ae <HAL_NOR_ReturnToReadMode+0x7e>
    }
    else if (hnor->Init.NSBank == FMC_NORSRAM_BANK2)
 8002988:	687b      	ldr	r3, [r7, #4]
 800298a:	689b      	ldr	r3, [r3, #8]
 800298c:	2b02      	cmp	r3, #2
 800298e:	d103      	bne.n	8002998 <HAL_NOR_ReturnToReadMode+0x68>
    {
      deviceaddress = NOR_MEMORY_ADRESS2;
 8002990:	f04f 43c8 	mov.w	r3, #1677721600	; 0x64000000
 8002994:	60fb      	str	r3, [r7, #12]
 8002996:	e00a      	b.n	80029ae <HAL_NOR_ReturnToReadMode+0x7e>
    }
    else if (hnor->Init.NSBank == FMC_NORSRAM_BANK3)
 8002998:	687b      	ldr	r3, [r7, #4]
 800299a:	689b      	ldr	r3, [r3, #8]
 800299c:	2b04      	cmp	r3, #4
 800299e:	d103      	bne.n	80029a8 <HAL_NOR_ReturnToReadMode+0x78>
    {
      deviceaddress = NOR_MEMORY_ADRESS3;
 80029a0:	f04f 43d0 	mov.w	r3, #1744830464	; 0x68000000
 80029a4:	60fb      	str	r3, [r7, #12]
 80029a6:	e002      	b.n	80029ae <HAL_NOR_ReturnToReadMode+0x7e>
    }
    else /* FMC_NORSRAM_BANK4 */
    {
      deviceaddress = NOR_MEMORY_ADRESS4;
 80029a8:	f04f 43d8 	mov.w	r3, #1811939328	; 0x6c000000
 80029ac:	60fb      	str	r3, [r7, #12]
    }

    if (hnor->CommandSet == NOR_AMD_FUJITSU_COMMAND_SET)
 80029ae:	687b      	ldr	r3, [r7, #4]
 80029b0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80029b2:	2b02      	cmp	r3, #2
 80029b4:	d105      	bne.n	80029c2 <HAL_NOR_ReturnToReadMode+0x92>
    {
      NOR_WRITE(deviceaddress, NOR_CMD_DATA_READ_RESET);
 80029b6:	68fb      	ldr	r3, [r7, #12]
 80029b8:	22f0      	movs	r2, #240	; 0xf0
 80029ba:	801a      	strh	r2, [r3, #0]
  __ASM volatile ("dsb 0xF":::"memory");
 80029bc:	f3bf 8f4f 	dsb	sy
}
 80029c0:	e009      	b.n	80029d6 <HAL_NOR_ReturnToReadMode+0xa6>
    }
    else if (hnor->CommandSet == NOR_INTEL_SHARP_EXT_COMMAND_SET)
 80029c2:	687b      	ldr	r3, [r7, #4]
 80029c4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80029c6:	2b01      	cmp	r3, #1
 80029c8:	d105      	bne.n	80029d6 <HAL_NOR_ReturnToReadMode+0xa6>
    {
      NOR_WRITE(deviceaddress, NOR_CMD_READ_ARRAY);
 80029ca:	68fb      	ldr	r3, [r7, #12]
 80029cc:	22ff      	movs	r2, #255	; 0xff
 80029ce:	801a      	strh	r2, [r3, #0]
  __ASM volatile ("dsb 0xF":::"memory");
 80029d0:	f3bf 8f4f 	dsb	sy
}
 80029d4:	bf00      	nop
      /* Primary command set not supported by the driver */
      //status = HAL_ERROR;
    }

    /* Check the NOR controller state */
    hnor->State = state;
 80029d6:	687b      	ldr	r3, [r7, #4]
 80029d8:	7aba      	ldrb	r2, [r7, #10]
 80029da:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

    /* Process unlocked */
    __HAL_UNLOCK(hnor);
 80029de:	687b      	ldr	r3, [r7, #4]
 80029e0:	2200      	movs	r2, #0
 80029e2:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  else
  {
    return HAL_ERROR;
  }

  return status;
 80029e6:	7afb      	ldrb	r3, [r7, #11]
 80029e8:	e000      	b.n	80029ec <HAL_NOR_ReturnToReadMode+0xbc>
    return HAL_ERROR;
 80029ea:	2301      	movs	r3, #1
}
 80029ec:	4618      	mov	r0, r3
 80029ee:	3714      	adds	r7, #20
 80029f0:	46bd      	mov	sp, r7
 80029f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029f6:	4770      	bx	lr

080029f8 <HAL_PWREx_ConfigSupply>:
  *         PWR_SMPS_2V5_SUPPLIES_EXT are used only for lines that supports SMPS
  *         regulator.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply (uint32_t SupplySource)
{
 80029f8:	b580      	push	{r7, lr}
 80029fa:	b084      	sub	sp, #16
 80029fc:	af00      	add	r7, sp, #0
 80029fe:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param (IS_PWR_SUPPLY (SupplySource));

  /* Check if supply source was configured */
#if defined (PWR_FLAG_SCUEN)
  if (__HAL_PWR_GET_FLAG (PWR_FLAG_SCUEN) == 0U)
 8002a00:	4b19      	ldr	r3, [pc, #100]	; (8002a68 <HAL_PWREx_ConfigSupply+0x70>)
 8002a02:	68db      	ldr	r3, [r3, #12]
 8002a04:	f003 0304 	and.w	r3, r3, #4
 8002a08:	2b04      	cmp	r3, #4
 8002a0a:	d00a      	beq.n	8002a22 <HAL_PWREx_ConfigSupply+0x2a>
#else
  if ((PWR->CR3 & (PWR_CR3_SMPSEN | PWR_CR3_LDOEN | PWR_CR3_BYPASS)) != (PWR_CR3_SMPSEN | PWR_CR3_LDOEN))
#endif /* defined (PWR_FLAG_SCUEN) */
  {
    /* Check supply configuration */
    if ((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
 8002a0c:	4b16      	ldr	r3, [pc, #88]	; (8002a68 <HAL_PWREx_ConfigSupply+0x70>)
 8002a0e:	68db      	ldr	r3, [r3, #12]
 8002a10:	f003 0307 	and.w	r3, r3, #7
 8002a14:	687a      	ldr	r2, [r7, #4]
 8002a16:	429a      	cmp	r2, r3
 8002a18:	d001      	beq.n	8002a1e <HAL_PWREx_ConfigSupply+0x26>
    {
      /* Supply configuration update locked, can't apply a new supply config */
      return HAL_ERROR;
 8002a1a:	2301      	movs	r3, #1
 8002a1c:	e01f      	b.n	8002a5e <HAL_PWREx_ConfigSupply+0x66>
    else
    {
      /* Supply configuration update locked, but new supply configuration
         matches with old supply configuration : nothing to do
      */
      return HAL_OK;
 8002a1e:	2300      	movs	r3, #0
 8002a20:	e01d      	b.n	8002a5e <HAL_PWREx_ConfigSupply+0x66>
    }
  }

  /* Set the power supply configuration */
  MODIFY_REG (PWR->CR3, PWR_SUPPLY_CONFIG_MASK, SupplySource);
 8002a22:	4b11      	ldr	r3, [pc, #68]	; (8002a68 <HAL_PWREx_ConfigSupply+0x70>)
 8002a24:	68db      	ldr	r3, [r3, #12]
 8002a26:	f023 0207 	bic.w	r2, r3, #7
 8002a2a:	490f      	ldr	r1, [pc, #60]	; (8002a68 <HAL_PWREx_ConfigSupply+0x70>)
 8002a2c:	687b      	ldr	r3, [r7, #4]
 8002a2e:	4313      	orrs	r3, r2
 8002a30:	60cb      	str	r3, [r1, #12]

  /* Get tick */
  tickstart = HAL_GetTick ();
 8002a32:	f7fe fd5d 	bl	80014f0 <HAL_GetTick>
 8002a36:	60f8      	str	r0, [r7, #12]

  /* Wait till voltage level flag is set */
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8002a38:	e009      	b.n	8002a4e <HAL_PWREx_ConfigSupply+0x56>
  {
    if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 8002a3a:	f7fe fd59 	bl	80014f0 <HAL_GetTick>
 8002a3e:	4602      	mov	r2, r0
 8002a40:	68fb      	ldr	r3, [r7, #12]
 8002a42:	1ad3      	subs	r3, r2, r3
 8002a44:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8002a48:	d901      	bls.n	8002a4e <HAL_PWREx_ConfigSupply+0x56>
    {
      return HAL_ERROR;
 8002a4a:	2301      	movs	r3, #1
 8002a4c:	e007      	b.n	8002a5e <HAL_PWREx_ConfigSupply+0x66>
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8002a4e:	4b06      	ldr	r3, [pc, #24]	; (8002a68 <HAL_PWREx_ConfigSupply+0x70>)
 8002a50:	685b      	ldr	r3, [r3, #4]
 8002a52:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8002a56:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002a5a:	d1ee      	bne.n	8002a3a <HAL_PWREx_ConfigSupply+0x42>
      }
    }
  }
#endif /* defined (SMPS) */

  return HAL_OK;
 8002a5c:	2300      	movs	r3, #0
}
 8002a5e:	4618      	mov	r0, r3
 8002a60:	3710      	adds	r7, #16
 8002a62:	46bd      	mov	sp, r7
 8002a64:	bd80      	pop	{r7, pc}
 8002a66:	bf00      	nop
 8002a68:	58024800 	.word	0x58024800

08002a6c <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002a6c:	b580      	push	{r7, lr}
 8002a6e:	b08c      	sub	sp, #48	; 0x30
 8002a70:	af00      	add	r7, sp, #0
 8002a72:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp1_pllckcfg, temp2_pllckcfg;

    /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8002a74:	687b      	ldr	r3, [r7, #4]
 8002a76:	2b00      	cmp	r3, #0
 8002a78:	d101      	bne.n	8002a7e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002a7a:	2301      	movs	r3, #1
 8002a7c:	e37a      	b.n	8003174 <HAL_RCC_OscConfig+0x708>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002a7e:	687b      	ldr	r3, [r7, #4]
 8002a80:	681b      	ldr	r3, [r3, #0]
 8002a82:	f003 0301 	and.w	r3, r3, #1
 8002a86:	2b00      	cmp	r3, #0
 8002a88:	f000 8087 	beq.w	8002b9a <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002a8c:	4ba0      	ldr	r3, [pc, #640]	; (8002d10 <HAL_RCC_OscConfig+0x2a4>)
 8002a8e:	691b      	ldr	r3, [r3, #16]
 8002a90:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8002a94:	62fb      	str	r3, [r7, #44]	; 0x2c
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8002a96:	4b9e      	ldr	r3, [pc, #632]	; (8002d10 <HAL_RCC_OscConfig+0x2a4>)
 8002a98:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002a9a:	62bb      	str	r3, [r7, #40]	; 0x28
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 8002a9c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002a9e:	2b10      	cmp	r3, #16
 8002aa0:	d007      	beq.n	8002ab2 <HAL_RCC_OscConfig+0x46>
 8002aa2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002aa4:	2b18      	cmp	r3, #24
 8002aa6:	d110      	bne.n	8002aca <HAL_RCC_OscConfig+0x5e>
 8002aa8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002aaa:	f003 0303 	and.w	r3, r3, #3
 8002aae:	2b02      	cmp	r3, #2
 8002ab0:	d10b      	bne.n	8002aca <HAL_RCC_OscConfig+0x5e>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002ab2:	4b97      	ldr	r3, [pc, #604]	; (8002d10 <HAL_RCC_OscConfig+0x2a4>)
 8002ab4:	681b      	ldr	r3, [r3, #0]
 8002ab6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002aba:	2b00      	cmp	r3, #0
 8002abc:	d06c      	beq.n	8002b98 <HAL_RCC_OscConfig+0x12c>
 8002abe:	687b      	ldr	r3, [r7, #4]
 8002ac0:	685b      	ldr	r3, [r3, #4]
 8002ac2:	2b00      	cmp	r3, #0
 8002ac4:	d168      	bne.n	8002b98 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8002ac6:	2301      	movs	r3, #1
 8002ac8:	e354      	b.n	8003174 <HAL_RCC_OscConfig+0x708>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002aca:	687b      	ldr	r3, [r7, #4]
 8002acc:	685b      	ldr	r3, [r3, #4]
 8002ace:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002ad2:	d106      	bne.n	8002ae2 <HAL_RCC_OscConfig+0x76>
 8002ad4:	4b8e      	ldr	r3, [pc, #568]	; (8002d10 <HAL_RCC_OscConfig+0x2a4>)
 8002ad6:	681b      	ldr	r3, [r3, #0]
 8002ad8:	4a8d      	ldr	r2, [pc, #564]	; (8002d10 <HAL_RCC_OscConfig+0x2a4>)
 8002ada:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002ade:	6013      	str	r3, [r2, #0]
 8002ae0:	e02e      	b.n	8002b40 <HAL_RCC_OscConfig+0xd4>
 8002ae2:	687b      	ldr	r3, [r7, #4]
 8002ae4:	685b      	ldr	r3, [r3, #4]
 8002ae6:	2b00      	cmp	r3, #0
 8002ae8:	d10c      	bne.n	8002b04 <HAL_RCC_OscConfig+0x98>
 8002aea:	4b89      	ldr	r3, [pc, #548]	; (8002d10 <HAL_RCC_OscConfig+0x2a4>)
 8002aec:	681b      	ldr	r3, [r3, #0]
 8002aee:	4a88      	ldr	r2, [pc, #544]	; (8002d10 <HAL_RCC_OscConfig+0x2a4>)
 8002af0:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002af4:	6013      	str	r3, [r2, #0]
 8002af6:	4b86      	ldr	r3, [pc, #536]	; (8002d10 <HAL_RCC_OscConfig+0x2a4>)
 8002af8:	681b      	ldr	r3, [r3, #0]
 8002afa:	4a85      	ldr	r2, [pc, #532]	; (8002d10 <HAL_RCC_OscConfig+0x2a4>)
 8002afc:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002b00:	6013      	str	r3, [r2, #0]
 8002b02:	e01d      	b.n	8002b40 <HAL_RCC_OscConfig+0xd4>
 8002b04:	687b      	ldr	r3, [r7, #4]
 8002b06:	685b      	ldr	r3, [r3, #4]
 8002b08:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002b0c:	d10c      	bne.n	8002b28 <HAL_RCC_OscConfig+0xbc>
 8002b0e:	4b80      	ldr	r3, [pc, #512]	; (8002d10 <HAL_RCC_OscConfig+0x2a4>)
 8002b10:	681b      	ldr	r3, [r3, #0]
 8002b12:	4a7f      	ldr	r2, [pc, #508]	; (8002d10 <HAL_RCC_OscConfig+0x2a4>)
 8002b14:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002b18:	6013      	str	r3, [r2, #0]
 8002b1a:	4b7d      	ldr	r3, [pc, #500]	; (8002d10 <HAL_RCC_OscConfig+0x2a4>)
 8002b1c:	681b      	ldr	r3, [r3, #0]
 8002b1e:	4a7c      	ldr	r2, [pc, #496]	; (8002d10 <HAL_RCC_OscConfig+0x2a4>)
 8002b20:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002b24:	6013      	str	r3, [r2, #0]
 8002b26:	e00b      	b.n	8002b40 <HAL_RCC_OscConfig+0xd4>
 8002b28:	4b79      	ldr	r3, [pc, #484]	; (8002d10 <HAL_RCC_OscConfig+0x2a4>)
 8002b2a:	681b      	ldr	r3, [r3, #0]
 8002b2c:	4a78      	ldr	r2, [pc, #480]	; (8002d10 <HAL_RCC_OscConfig+0x2a4>)
 8002b2e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002b32:	6013      	str	r3, [r2, #0]
 8002b34:	4b76      	ldr	r3, [pc, #472]	; (8002d10 <HAL_RCC_OscConfig+0x2a4>)
 8002b36:	681b      	ldr	r3, [r3, #0]
 8002b38:	4a75      	ldr	r2, [pc, #468]	; (8002d10 <HAL_RCC_OscConfig+0x2a4>)
 8002b3a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002b3e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002b40:	687b      	ldr	r3, [r7, #4]
 8002b42:	685b      	ldr	r3, [r3, #4]
 8002b44:	2b00      	cmp	r3, #0
 8002b46:	d013      	beq.n	8002b70 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002b48:	f7fe fcd2 	bl	80014f0 <HAL_GetTick>
 8002b4c:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8002b4e:	e008      	b.n	8002b62 <HAL_RCC_OscConfig+0xf6>
        {
          if((uint32_t) (HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002b50:	f7fe fcce 	bl	80014f0 <HAL_GetTick>
 8002b54:	4602      	mov	r2, r0
 8002b56:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002b58:	1ad3      	subs	r3, r2, r3
 8002b5a:	2b64      	cmp	r3, #100	; 0x64
 8002b5c:	d901      	bls.n	8002b62 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8002b5e:	2303      	movs	r3, #3
 8002b60:	e308      	b.n	8003174 <HAL_RCC_OscConfig+0x708>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8002b62:	4b6b      	ldr	r3, [pc, #428]	; (8002d10 <HAL_RCC_OscConfig+0x2a4>)
 8002b64:	681b      	ldr	r3, [r3, #0]
 8002b66:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002b6a:	2b00      	cmp	r3, #0
 8002b6c:	d0f0      	beq.n	8002b50 <HAL_RCC_OscConfig+0xe4>
 8002b6e:	e014      	b.n	8002b9a <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002b70:	f7fe fcbe 	bl	80014f0 <HAL_GetTick>
 8002b74:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8002b76:	e008      	b.n	8002b8a <HAL_RCC_OscConfig+0x11e>
        {
          if((uint32_t) (HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002b78:	f7fe fcba 	bl	80014f0 <HAL_GetTick>
 8002b7c:	4602      	mov	r2, r0
 8002b7e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002b80:	1ad3      	subs	r3, r2, r3
 8002b82:	2b64      	cmp	r3, #100	; 0x64
 8002b84:	d901      	bls.n	8002b8a <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8002b86:	2303      	movs	r3, #3
 8002b88:	e2f4      	b.n	8003174 <HAL_RCC_OscConfig+0x708>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8002b8a:	4b61      	ldr	r3, [pc, #388]	; (8002d10 <HAL_RCC_OscConfig+0x2a4>)
 8002b8c:	681b      	ldr	r3, [r3, #0]
 8002b8e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002b92:	2b00      	cmp	r3, #0
 8002b94:	d1f0      	bne.n	8002b78 <HAL_RCC_OscConfig+0x10c>
 8002b96:	e000      	b.n	8002b9a <HAL_RCC_OscConfig+0x12e>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002b98:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002b9a:	687b      	ldr	r3, [r7, #4]
 8002b9c:	681b      	ldr	r3, [r3, #0]
 8002b9e:	f003 0302 	and.w	r3, r3, #2
 8002ba2:	2b00      	cmp	r3, #0
 8002ba4:	d06d      	beq.n	8002c82 <HAL_RCC_OscConfig+0x216>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSICALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* When the HSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002ba6:	4b5a      	ldr	r3, [pc, #360]	; (8002d10 <HAL_RCC_OscConfig+0x2a4>)
 8002ba8:	691b      	ldr	r3, [r3, #16]
 8002baa:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8002bae:	623b      	str	r3, [r7, #32]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8002bb0:	4b57      	ldr	r3, [pc, #348]	; (8002d10 <HAL_RCC_OscConfig+0x2a4>)
 8002bb2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002bb4:	61fb      	str	r3, [r7, #28]
    if((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 8002bb6:	6a3b      	ldr	r3, [r7, #32]
 8002bb8:	2b00      	cmp	r3, #0
 8002bba:	d007      	beq.n	8002bcc <HAL_RCC_OscConfig+0x160>
 8002bbc:	6a3b      	ldr	r3, [r7, #32]
 8002bbe:	2b18      	cmp	r3, #24
 8002bc0:	d11b      	bne.n	8002bfa <HAL_RCC_OscConfig+0x18e>
 8002bc2:	69fb      	ldr	r3, [r7, #28]
 8002bc4:	f003 0303 	and.w	r3, r3, #3
 8002bc8:	2b00      	cmp	r3, #0
 8002bca:	d116      	bne.n	8002bfa <HAL_RCC_OscConfig+0x18e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8002bcc:	4b50      	ldr	r3, [pc, #320]	; (8002d10 <HAL_RCC_OscConfig+0x2a4>)
 8002bce:	681b      	ldr	r3, [r3, #0]
 8002bd0:	f003 0304 	and.w	r3, r3, #4
 8002bd4:	2b00      	cmp	r3, #0
 8002bd6:	d005      	beq.n	8002be4 <HAL_RCC_OscConfig+0x178>
 8002bd8:	687b      	ldr	r3, [r7, #4]
 8002bda:	68db      	ldr	r3, [r3, #12]
 8002bdc:	2b00      	cmp	r3, #0
 8002bde:	d101      	bne.n	8002be4 <HAL_RCC_OscConfig+0x178>
      {
        return HAL_ERROR;
 8002be0:	2301      	movs	r3, #1
 8002be2:	e2c7      	b.n	8003174 <HAL_RCC_OscConfig+0x708>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002be4:	4b4a      	ldr	r3, [pc, #296]	; (8002d10 <HAL_RCC_OscConfig+0x2a4>)
 8002be6:	685b      	ldr	r3, [r3, #4]
 8002be8:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8002bec:	687b      	ldr	r3, [r7, #4]
 8002bee:	691b      	ldr	r3, [r3, #16]
 8002bf0:	061b      	lsls	r3, r3, #24
 8002bf2:	4947      	ldr	r1, [pc, #284]	; (8002d10 <HAL_RCC_OscConfig+0x2a4>)
 8002bf4:	4313      	orrs	r3, r2
 8002bf6:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8002bf8:	e043      	b.n	8002c82 <HAL_RCC_OscConfig+0x216>
    }

    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8002bfa:	687b      	ldr	r3, [r7, #4]
 8002bfc:	68db      	ldr	r3, [r3, #12]
 8002bfe:	2b00      	cmp	r3, #0
 8002c00:	d026      	beq.n	8002c50 <HAL_RCC_OscConfig+0x1e4>
      {
     /* Enable the Internal High Speed oscillator (HSI, HSIDIV2,HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 8002c02:	4b43      	ldr	r3, [pc, #268]	; (8002d10 <HAL_RCC_OscConfig+0x2a4>)
 8002c04:	681b      	ldr	r3, [r3, #0]
 8002c06:	f023 0219 	bic.w	r2, r3, #25
 8002c0a:	687b      	ldr	r3, [r7, #4]
 8002c0c:	68db      	ldr	r3, [r3, #12]
 8002c0e:	4940      	ldr	r1, [pc, #256]	; (8002d10 <HAL_RCC_OscConfig+0x2a4>)
 8002c10:	4313      	orrs	r3, r2
 8002c12:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002c14:	f7fe fc6c 	bl	80014f0 <HAL_GetTick>
 8002c18:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8002c1a:	e008      	b.n	8002c2e <HAL_RCC_OscConfig+0x1c2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002c1c:	f7fe fc68 	bl	80014f0 <HAL_GetTick>
 8002c20:	4602      	mov	r2, r0
 8002c22:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002c24:	1ad3      	subs	r3, r2, r3
 8002c26:	2b02      	cmp	r3, #2
 8002c28:	d901      	bls.n	8002c2e <HAL_RCC_OscConfig+0x1c2>
          {
            return HAL_TIMEOUT;
 8002c2a:	2303      	movs	r3, #3
 8002c2c:	e2a2      	b.n	8003174 <HAL_RCC_OscConfig+0x708>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8002c2e:	4b38      	ldr	r3, [pc, #224]	; (8002d10 <HAL_RCC_OscConfig+0x2a4>)
 8002c30:	681b      	ldr	r3, [r3, #0]
 8002c32:	f003 0304 	and.w	r3, r3, #4
 8002c36:	2b00      	cmp	r3, #0
 8002c38:	d0f0      	beq.n	8002c1c <HAL_RCC_OscConfig+0x1b0>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002c3a:	4b35      	ldr	r3, [pc, #212]	; (8002d10 <HAL_RCC_OscConfig+0x2a4>)
 8002c3c:	685b      	ldr	r3, [r3, #4]
 8002c3e:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8002c42:	687b      	ldr	r3, [r7, #4]
 8002c44:	691b      	ldr	r3, [r3, #16]
 8002c46:	061b      	lsls	r3, r3, #24
 8002c48:	4931      	ldr	r1, [pc, #196]	; (8002d10 <HAL_RCC_OscConfig+0x2a4>)
 8002c4a:	4313      	orrs	r3, r2
 8002c4c:	604b      	str	r3, [r1, #4]
 8002c4e:	e018      	b.n	8002c82 <HAL_RCC_OscConfig+0x216>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002c50:	4b2f      	ldr	r3, [pc, #188]	; (8002d10 <HAL_RCC_OscConfig+0x2a4>)
 8002c52:	681b      	ldr	r3, [r3, #0]
 8002c54:	4a2e      	ldr	r2, [pc, #184]	; (8002d10 <HAL_RCC_OscConfig+0x2a4>)
 8002c56:	f023 0301 	bic.w	r3, r3, #1
 8002c5a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002c5c:	f7fe fc48 	bl	80014f0 <HAL_GetTick>
 8002c60:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8002c62:	e008      	b.n	8002c76 <HAL_RCC_OscConfig+0x20a>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002c64:	f7fe fc44 	bl	80014f0 <HAL_GetTick>
 8002c68:	4602      	mov	r2, r0
 8002c6a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002c6c:	1ad3      	subs	r3, r2, r3
 8002c6e:	2b02      	cmp	r3, #2
 8002c70:	d901      	bls.n	8002c76 <HAL_RCC_OscConfig+0x20a>
          {
            return HAL_TIMEOUT;
 8002c72:	2303      	movs	r3, #3
 8002c74:	e27e      	b.n	8003174 <HAL_RCC_OscConfig+0x708>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8002c76:	4b26      	ldr	r3, [pc, #152]	; (8002d10 <HAL_RCC_OscConfig+0x2a4>)
 8002c78:	681b      	ldr	r3, [r3, #0]
 8002c7a:	f003 0304 	and.w	r3, r3, #4
 8002c7e:	2b00      	cmp	r3, #0
 8002c80:	d1f0      	bne.n	8002c64 <HAL_RCC_OscConfig+0x1f8>
        }
      }
    }
  }
  /*----------------------------- CSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 8002c82:	687b      	ldr	r3, [r7, #4]
 8002c84:	681b      	ldr	r3, [r3, #0]
 8002c86:	f003 0310 	and.w	r3, r3, #16
 8002c8a:	2b00      	cmp	r3, #0
 8002c8c:	d06c      	beq.n	8002d68 <HAL_RCC_OscConfig+0x2fc>
    /* Check the parameters */
    assert_param(IS_RCC_CSI(RCC_OscInitStruct->CSIState));
    assert_param(IS_RCC_CSICALIBRATION_VALUE(RCC_OscInitStruct->CSICalibrationValue));

    /* When the CSI is used as system clock it will not disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002c8e:	4b20      	ldr	r3, [pc, #128]	; (8002d10 <HAL_RCC_OscConfig+0x2a4>)
 8002c90:	691b      	ldr	r3, [r3, #16]
 8002c92:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8002c96:	61bb      	str	r3, [r7, #24]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8002c98:	4b1d      	ldr	r3, [pc, #116]	; (8002d10 <HAL_RCC_OscConfig+0x2a4>)
 8002c9a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002c9c:	617b      	str	r3, [r7, #20]
    if((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 8002c9e:	69bb      	ldr	r3, [r7, #24]
 8002ca0:	2b08      	cmp	r3, #8
 8002ca2:	d007      	beq.n	8002cb4 <HAL_RCC_OscConfig+0x248>
 8002ca4:	69bb      	ldr	r3, [r7, #24]
 8002ca6:	2b18      	cmp	r3, #24
 8002ca8:	d11b      	bne.n	8002ce2 <HAL_RCC_OscConfig+0x276>
 8002caa:	697b      	ldr	r3, [r7, #20]
 8002cac:	f003 0303 	and.w	r3, r3, #3
 8002cb0:	2b01      	cmp	r3, #1
 8002cb2:	d116      	bne.n	8002ce2 <HAL_RCC_OscConfig+0x276>
    {
      /* When CSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8002cb4:	4b16      	ldr	r3, [pc, #88]	; (8002d10 <HAL_RCC_OscConfig+0x2a4>)
 8002cb6:	681b      	ldr	r3, [r3, #0]
 8002cb8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002cbc:	2b00      	cmp	r3, #0
 8002cbe:	d005      	beq.n	8002ccc <HAL_RCC_OscConfig+0x260>
 8002cc0:	687b      	ldr	r3, [r7, #4]
 8002cc2:	69db      	ldr	r3, [r3, #28]
 8002cc4:	2b80      	cmp	r3, #128	; 0x80
 8002cc6:	d001      	beq.n	8002ccc <HAL_RCC_OscConfig+0x260>
      {
        return HAL_ERROR;
 8002cc8:	2301      	movs	r3, #1
 8002cca:	e253      	b.n	8003174 <HAL_RCC_OscConfig+0x708>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8002ccc:	4b10      	ldr	r3, [pc, #64]	; (8002d10 <HAL_RCC_OscConfig+0x2a4>)
 8002cce:	68db      	ldr	r3, [r3, #12]
 8002cd0:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 8002cd4:	687b      	ldr	r3, [r7, #4]
 8002cd6:	6a1b      	ldr	r3, [r3, #32]
 8002cd8:	061b      	lsls	r3, r3, #24
 8002cda:	490d      	ldr	r1, [pc, #52]	; (8002d10 <HAL_RCC_OscConfig+0x2a4>)
 8002cdc:	4313      	orrs	r3, r2
 8002cde:	60cb      	str	r3, [r1, #12]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8002ce0:	e042      	b.n	8002d68 <HAL_RCC_OscConfig+0x2fc>
      }
    }
    else
    {
      /* Check the CSI State */
      if((RCC_OscInitStruct->CSIState)!= RCC_CSI_OFF)
 8002ce2:	687b      	ldr	r3, [r7, #4]
 8002ce4:	69db      	ldr	r3, [r3, #28]
 8002ce6:	2b00      	cmp	r3, #0
 8002ce8:	d025      	beq.n	8002d36 <HAL_RCC_OscConfig+0x2ca>
      {
        /* Enable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_ENABLE();
 8002cea:	4b09      	ldr	r3, [pc, #36]	; (8002d10 <HAL_RCC_OscConfig+0x2a4>)
 8002cec:	681b      	ldr	r3, [r3, #0]
 8002cee:	4a08      	ldr	r2, [pc, #32]	; (8002d10 <HAL_RCC_OscConfig+0x2a4>)
 8002cf0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002cf4:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002cf6:	f7fe fbfb 	bl	80014f0 <HAL_GetTick>
 8002cfa:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8002cfc:	e00a      	b.n	8002d14 <HAL_RCC_OscConfig+0x2a8>
        {
          if((HAL_GetTick() - tickstart ) > CSI_TIMEOUT_VALUE)
 8002cfe:	f7fe fbf7 	bl	80014f0 <HAL_GetTick>
 8002d02:	4602      	mov	r2, r0
 8002d04:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002d06:	1ad3      	subs	r3, r2, r3
 8002d08:	2b02      	cmp	r3, #2
 8002d0a:	d903      	bls.n	8002d14 <HAL_RCC_OscConfig+0x2a8>
          {
            return HAL_TIMEOUT;
 8002d0c:	2303      	movs	r3, #3
 8002d0e:	e231      	b.n	8003174 <HAL_RCC_OscConfig+0x708>
 8002d10:	58024400 	.word	0x58024400
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8002d14:	4ba3      	ldr	r3, [pc, #652]	; (8002fa4 <HAL_RCC_OscConfig+0x538>)
 8002d16:	681b      	ldr	r3, [r3, #0]
 8002d18:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002d1c:	2b00      	cmp	r3, #0
 8002d1e:	d0ee      	beq.n	8002cfe <HAL_RCC_OscConfig+0x292>
          }
        }

        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8002d20:	4ba0      	ldr	r3, [pc, #640]	; (8002fa4 <HAL_RCC_OscConfig+0x538>)
 8002d22:	68db      	ldr	r3, [r3, #12]
 8002d24:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 8002d28:	687b      	ldr	r3, [r7, #4]
 8002d2a:	6a1b      	ldr	r3, [r3, #32]
 8002d2c:	061b      	lsls	r3, r3, #24
 8002d2e:	499d      	ldr	r1, [pc, #628]	; (8002fa4 <HAL_RCC_OscConfig+0x538>)
 8002d30:	4313      	orrs	r3, r2
 8002d32:	60cb      	str	r3, [r1, #12]
 8002d34:	e018      	b.n	8002d68 <HAL_RCC_OscConfig+0x2fc>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_DISABLE();
 8002d36:	4b9b      	ldr	r3, [pc, #620]	; (8002fa4 <HAL_RCC_OscConfig+0x538>)
 8002d38:	681b      	ldr	r3, [r3, #0]
 8002d3a:	4a9a      	ldr	r2, [pc, #616]	; (8002fa4 <HAL_RCC_OscConfig+0x538>)
 8002d3c:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8002d40:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002d42:	f7fe fbd5 	bl	80014f0 <HAL_GetTick>
 8002d46:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8002d48:	e008      	b.n	8002d5c <HAL_RCC_OscConfig+0x2f0>
        {
          if((HAL_GetTick() - tickstart ) > CSI_TIMEOUT_VALUE)
 8002d4a:	f7fe fbd1 	bl	80014f0 <HAL_GetTick>
 8002d4e:	4602      	mov	r2, r0
 8002d50:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002d52:	1ad3      	subs	r3, r2, r3
 8002d54:	2b02      	cmp	r3, #2
 8002d56:	d901      	bls.n	8002d5c <HAL_RCC_OscConfig+0x2f0>
          {
            return HAL_TIMEOUT;
 8002d58:	2303      	movs	r3, #3
 8002d5a:	e20b      	b.n	8003174 <HAL_RCC_OscConfig+0x708>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8002d5c:	4b91      	ldr	r3, [pc, #580]	; (8002fa4 <HAL_RCC_OscConfig+0x538>)
 8002d5e:	681b      	ldr	r3, [r3, #0]
 8002d60:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002d64:	2b00      	cmp	r3, #0
 8002d66:	d1f0      	bne.n	8002d4a <HAL_RCC_OscConfig+0x2de>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002d68:	687b      	ldr	r3, [r7, #4]
 8002d6a:	681b      	ldr	r3, [r3, #0]
 8002d6c:	f003 0308 	and.w	r3, r3, #8
 8002d70:	2b00      	cmp	r3, #0
 8002d72:	d036      	beq.n	8002de2 <HAL_RCC_OscConfig+0x376>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8002d74:	687b      	ldr	r3, [r7, #4]
 8002d76:	695b      	ldr	r3, [r3, #20]
 8002d78:	2b00      	cmp	r3, #0
 8002d7a:	d019      	beq.n	8002db0 <HAL_RCC_OscConfig+0x344>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002d7c:	4b89      	ldr	r3, [pc, #548]	; (8002fa4 <HAL_RCC_OscConfig+0x538>)
 8002d7e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002d80:	4a88      	ldr	r2, [pc, #544]	; (8002fa4 <HAL_RCC_OscConfig+0x538>)
 8002d82:	f043 0301 	orr.w	r3, r3, #1
 8002d86:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002d88:	f7fe fbb2 	bl	80014f0 <HAL_GetTick>
 8002d8c:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8002d8e:	e008      	b.n	8002da2 <HAL_RCC_OscConfig+0x336>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002d90:	f7fe fbae 	bl	80014f0 <HAL_GetTick>
 8002d94:	4602      	mov	r2, r0
 8002d96:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002d98:	1ad3      	subs	r3, r2, r3
 8002d9a:	2b02      	cmp	r3, #2
 8002d9c:	d901      	bls.n	8002da2 <HAL_RCC_OscConfig+0x336>
        {
          return HAL_TIMEOUT;
 8002d9e:	2303      	movs	r3, #3
 8002da0:	e1e8      	b.n	8003174 <HAL_RCC_OscConfig+0x708>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8002da2:	4b80      	ldr	r3, [pc, #512]	; (8002fa4 <HAL_RCC_OscConfig+0x538>)
 8002da4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002da6:	f003 0302 	and.w	r3, r3, #2
 8002daa:	2b00      	cmp	r3, #0
 8002dac:	d0f0      	beq.n	8002d90 <HAL_RCC_OscConfig+0x324>
 8002dae:	e018      	b.n	8002de2 <HAL_RCC_OscConfig+0x376>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002db0:	4b7c      	ldr	r3, [pc, #496]	; (8002fa4 <HAL_RCC_OscConfig+0x538>)
 8002db2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002db4:	4a7b      	ldr	r2, [pc, #492]	; (8002fa4 <HAL_RCC_OscConfig+0x538>)
 8002db6:	f023 0301 	bic.w	r3, r3, #1
 8002dba:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002dbc:	f7fe fb98 	bl	80014f0 <HAL_GetTick>
 8002dc0:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8002dc2:	e008      	b.n	8002dd6 <HAL_RCC_OscConfig+0x36a>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002dc4:	f7fe fb94 	bl	80014f0 <HAL_GetTick>
 8002dc8:	4602      	mov	r2, r0
 8002dca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002dcc:	1ad3      	subs	r3, r2, r3
 8002dce:	2b02      	cmp	r3, #2
 8002dd0:	d901      	bls.n	8002dd6 <HAL_RCC_OscConfig+0x36a>
        {
          return HAL_TIMEOUT;
 8002dd2:	2303      	movs	r3, #3
 8002dd4:	e1ce      	b.n	8003174 <HAL_RCC_OscConfig+0x708>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8002dd6:	4b73      	ldr	r3, [pc, #460]	; (8002fa4 <HAL_RCC_OscConfig+0x538>)
 8002dd8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002dda:	f003 0302 	and.w	r3, r3, #2
 8002dde:	2b00      	cmp	r3, #0
 8002de0:	d1f0      	bne.n	8002dc4 <HAL_RCC_OscConfig+0x358>
      }
    }
  }

  /*------------------------------ HSI48 Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8002de2:	687b      	ldr	r3, [r7, #4]
 8002de4:	681b      	ldr	r3, [r3, #0]
 8002de6:	f003 0320 	and.w	r3, r3, #32
 8002dea:	2b00      	cmp	r3, #0
 8002dec:	d036      	beq.n	8002e5c <HAL_RCC_OscConfig+0x3f0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if((RCC_OscInitStruct->HSI48State)!= RCC_HSI48_OFF)
 8002dee:	687b      	ldr	r3, [r7, #4]
 8002df0:	699b      	ldr	r3, [r3, #24]
 8002df2:	2b00      	cmp	r3, #0
 8002df4:	d019      	beq.n	8002e2a <HAL_RCC_OscConfig+0x3be>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8002df6:	4b6b      	ldr	r3, [pc, #428]	; (8002fa4 <HAL_RCC_OscConfig+0x538>)
 8002df8:	681b      	ldr	r3, [r3, #0]
 8002dfa:	4a6a      	ldr	r2, [pc, #424]	; (8002fa4 <HAL_RCC_OscConfig+0x538>)
 8002dfc:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8002e00:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8002e02:	f7fe fb75 	bl	80014f0 <HAL_GetTick>
 8002e06:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8002e08:	e008      	b.n	8002e1c <HAL_RCC_OscConfig+0x3b0>
      {
        if((HAL_GetTick() - tickstart ) > HSI48_TIMEOUT_VALUE)
 8002e0a:	f7fe fb71 	bl	80014f0 <HAL_GetTick>
 8002e0e:	4602      	mov	r2, r0
 8002e10:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002e12:	1ad3      	subs	r3, r2, r3
 8002e14:	2b02      	cmp	r3, #2
 8002e16:	d901      	bls.n	8002e1c <HAL_RCC_OscConfig+0x3b0>
        {
          return HAL_TIMEOUT;
 8002e18:	2303      	movs	r3, #3
 8002e1a:	e1ab      	b.n	8003174 <HAL_RCC_OscConfig+0x708>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8002e1c:	4b61      	ldr	r3, [pc, #388]	; (8002fa4 <HAL_RCC_OscConfig+0x538>)
 8002e1e:	681b      	ldr	r3, [r3, #0]
 8002e20:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8002e24:	2b00      	cmp	r3, #0
 8002e26:	d0f0      	beq.n	8002e0a <HAL_RCC_OscConfig+0x39e>
 8002e28:	e018      	b.n	8002e5c <HAL_RCC_OscConfig+0x3f0>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8002e2a:	4b5e      	ldr	r3, [pc, #376]	; (8002fa4 <HAL_RCC_OscConfig+0x538>)
 8002e2c:	681b      	ldr	r3, [r3, #0]
 8002e2e:	4a5d      	ldr	r2, [pc, #372]	; (8002fa4 <HAL_RCC_OscConfig+0x538>)
 8002e30:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8002e34:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8002e36:	f7fe fb5b 	bl	80014f0 <HAL_GetTick>
 8002e3a:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8002e3c:	e008      	b.n	8002e50 <HAL_RCC_OscConfig+0x3e4>
      {
        if((HAL_GetTick() - tickstart ) > HSI48_TIMEOUT_VALUE)
 8002e3e:	f7fe fb57 	bl	80014f0 <HAL_GetTick>
 8002e42:	4602      	mov	r2, r0
 8002e44:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002e46:	1ad3      	subs	r3, r2, r3
 8002e48:	2b02      	cmp	r3, #2
 8002e4a:	d901      	bls.n	8002e50 <HAL_RCC_OscConfig+0x3e4>
        {
          return HAL_TIMEOUT;
 8002e4c:	2303      	movs	r3, #3
 8002e4e:	e191      	b.n	8003174 <HAL_RCC_OscConfig+0x708>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8002e50:	4b54      	ldr	r3, [pc, #336]	; (8002fa4 <HAL_RCC_OscConfig+0x538>)
 8002e52:	681b      	ldr	r3, [r3, #0]
 8002e54:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8002e58:	2b00      	cmp	r3, #0
 8002e5a:	d1f0      	bne.n	8002e3e <HAL_RCC_OscConfig+0x3d2>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002e5c:	687b      	ldr	r3, [r7, #4]
 8002e5e:	681b      	ldr	r3, [r3, #0]
 8002e60:	f003 0304 	and.w	r3, r3, #4
 8002e64:	2b00      	cmp	r3, #0
 8002e66:	f000 8081 	beq.w	8002f6c <HAL_RCC_OscConfig+0x500>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8002e6a:	4b4f      	ldr	r3, [pc, #316]	; (8002fa8 <HAL_RCC_OscConfig+0x53c>)
 8002e6c:	681b      	ldr	r3, [r3, #0]
 8002e6e:	4a4e      	ldr	r2, [pc, #312]	; (8002fa8 <HAL_RCC_OscConfig+0x53c>)
 8002e70:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002e74:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8002e76:	f7fe fb3b 	bl	80014f0 <HAL_GetTick>
 8002e7a:	6278      	str	r0, [r7, #36]	; 0x24

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8002e7c:	e008      	b.n	8002e90 <HAL_RCC_OscConfig+0x424>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 8002e7e:	f7fe fb37 	bl	80014f0 <HAL_GetTick>
 8002e82:	4602      	mov	r2, r0
 8002e84:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002e86:	1ad3      	subs	r3, r2, r3
 8002e88:	2b64      	cmp	r3, #100	; 0x64
 8002e8a:	d901      	bls.n	8002e90 <HAL_RCC_OscConfig+0x424>
      {
        return HAL_TIMEOUT;
 8002e8c:	2303      	movs	r3, #3
 8002e8e:	e171      	b.n	8003174 <HAL_RCC_OscConfig+0x708>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8002e90:	4b45      	ldr	r3, [pc, #276]	; (8002fa8 <HAL_RCC_OscConfig+0x53c>)
 8002e92:	681b      	ldr	r3, [r3, #0]
 8002e94:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002e98:	2b00      	cmp	r3, #0
 8002e9a:	d0f0      	beq.n	8002e7e <HAL_RCC_OscConfig+0x412>
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002e9c:	687b      	ldr	r3, [r7, #4]
 8002e9e:	689b      	ldr	r3, [r3, #8]
 8002ea0:	2b01      	cmp	r3, #1
 8002ea2:	d106      	bne.n	8002eb2 <HAL_RCC_OscConfig+0x446>
 8002ea4:	4b3f      	ldr	r3, [pc, #252]	; (8002fa4 <HAL_RCC_OscConfig+0x538>)
 8002ea6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002ea8:	4a3e      	ldr	r2, [pc, #248]	; (8002fa4 <HAL_RCC_OscConfig+0x538>)
 8002eaa:	f043 0301 	orr.w	r3, r3, #1
 8002eae:	6713      	str	r3, [r2, #112]	; 0x70
 8002eb0:	e02d      	b.n	8002f0e <HAL_RCC_OscConfig+0x4a2>
 8002eb2:	687b      	ldr	r3, [r7, #4]
 8002eb4:	689b      	ldr	r3, [r3, #8]
 8002eb6:	2b00      	cmp	r3, #0
 8002eb8:	d10c      	bne.n	8002ed4 <HAL_RCC_OscConfig+0x468>
 8002eba:	4b3a      	ldr	r3, [pc, #232]	; (8002fa4 <HAL_RCC_OscConfig+0x538>)
 8002ebc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002ebe:	4a39      	ldr	r2, [pc, #228]	; (8002fa4 <HAL_RCC_OscConfig+0x538>)
 8002ec0:	f023 0301 	bic.w	r3, r3, #1
 8002ec4:	6713      	str	r3, [r2, #112]	; 0x70
 8002ec6:	4b37      	ldr	r3, [pc, #220]	; (8002fa4 <HAL_RCC_OscConfig+0x538>)
 8002ec8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002eca:	4a36      	ldr	r2, [pc, #216]	; (8002fa4 <HAL_RCC_OscConfig+0x538>)
 8002ecc:	f023 0304 	bic.w	r3, r3, #4
 8002ed0:	6713      	str	r3, [r2, #112]	; 0x70
 8002ed2:	e01c      	b.n	8002f0e <HAL_RCC_OscConfig+0x4a2>
 8002ed4:	687b      	ldr	r3, [r7, #4]
 8002ed6:	689b      	ldr	r3, [r3, #8]
 8002ed8:	2b05      	cmp	r3, #5
 8002eda:	d10c      	bne.n	8002ef6 <HAL_RCC_OscConfig+0x48a>
 8002edc:	4b31      	ldr	r3, [pc, #196]	; (8002fa4 <HAL_RCC_OscConfig+0x538>)
 8002ede:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002ee0:	4a30      	ldr	r2, [pc, #192]	; (8002fa4 <HAL_RCC_OscConfig+0x538>)
 8002ee2:	f043 0304 	orr.w	r3, r3, #4
 8002ee6:	6713      	str	r3, [r2, #112]	; 0x70
 8002ee8:	4b2e      	ldr	r3, [pc, #184]	; (8002fa4 <HAL_RCC_OscConfig+0x538>)
 8002eea:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002eec:	4a2d      	ldr	r2, [pc, #180]	; (8002fa4 <HAL_RCC_OscConfig+0x538>)
 8002eee:	f043 0301 	orr.w	r3, r3, #1
 8002ef2:	6713      	str	r3, [r2, #112]	; 0x70
 8002ef4:	e00b      	b.n	8002f0e <HAL_RCC_OscConfig+0x4a2>
 8002ef6:	4b2b      	ldr	r3, [pc, #172]	; (8002fa4 <HAL_RCC_OscConfig+0x538>)
 8002ef8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002efa:	4a2a      	ldr	r2, [pc, #168]	; (8002fa4 <HAL_RCC_OscConfig+0x538>)
 8002efc:	f023 0301 	bic.w	r3, r3, #1
 8002f00:	6713      	str	r3, [r2, #112]	; 0x70
 8002f02:	4b28      	ldr	r3, [pc, #160]	; (8002fa4 <HAL_RCC_OscConfig+0x538>)
 8002f04:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002f06:	4a27      	ldr	r2, [pc, #156]	; (8002fa4 <HAL_RCC_OscConfig+0x538>)
 8002f08:	f023 0304 	bic.w	r3, r3, #4
 8002f0c:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8002f0e:	687b      	ldr	r3, [r7, #4]
 8002f10:	689b      	ldr	r3, [r3, #8]
 8002f12:	2b00      	cmp	r3, #0
 8002f14:	d015      	beq.n	8002f42 <HAL_RCC_OscConfig+0x4d6>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002f16:	f7fe faeb 	bl	80014f0 <HAL_GetTick>
 8002f1a:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8002f1c:	e00a      	b.n	8002f34 <HAL_RCC_OscConfig+0x4c8>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002f1e:	f7fe fae7 	bl	80014f0 <HAL_GetTick>
 8002f22:	4602      	mov	r2, r0
 8002f24:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002f26:	1ad3      	subs	r3, r2, r3
 8002f28:	f241 3288 	movw	r2, #5000	; 0x1388
 8002f2c:	4293      	cmp	r3, r2
 8002f2e:	d901      	bls.n	8002f34 <HAL_RCC_OscConfig+0x4c8>
        {
          return HAL_TIMEOUT;
 8002f30:	2303      	movs	r3, #3
 8002f32:	e11f      	b.n	8003174 <HAL_RCC_OscConfig+0x708>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8002f34:	4b1b      	ldr	r3, [pc, #108]	; (8002fa4 <HAL_RCC_OscConfig+0x538>)
 8002f36:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002f38:	f003 0302 	and.w	r3, r3, #2
 8002f3c:	2b00      	cmp	r3, #0
 8002f3e:	d0ee      	beq.n	8002f1e <HAL_RCC_OscConfig+0x4b2>
 8002f40:	e014      	b.n	8002f6c <HAL_RCC_OscConfig+0x500>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002f42:	f7fe fad5 	bl	80014f0 <HAL_GetTick>
 8002f46:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is disabled */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8002f48:	e00a      	b.n	8002f60 <HAL_RCC_OscConfig+0x4f4>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002f4a:	f7fe fad1 	bl	80014f0 <HAL_GetTick>
 8002f4e:	4602      	mov	r2, r0
 8002f50:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002f52:	1ad3      	subs	r3, r2, r3
 8002f54:	f241 3288 	movw	r2, #5000	; 0x1388
 8002f58:	4293      	cmp	r3, r2
 8002f5a:	d901      	bls.n	8002f60 <HAL_RCC_OscConfig+0x4f4>
        {
          return HAL_TIMEOUT;
 8002f5c:	2303      	movs	r3, #3
 8002f5e:	e109      	b.n	8003174 <HAL_RCC_OscConfig+0x708>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8002f60:	4b10      	ldr	r3, [pc, #64]	; (8002fa4 <HAL_RCC_OscConfig+0x538>)
 8002f62:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002f64:	f003 0302 	and.w	r3, r3, #2
 8002f68:	2b00      	cmp	r3, #0
 8002f6a:	d1ee      	bne.n	8002f4a <HAL_RCC_OscConfig+0x4de>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002f6c:	687b      	ldr	r3, [r7, #4]
 8002f6e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002f70:	2b00      	cmp	r3, #0
 8002f72:	f000 80fe 	beq.w	8003172 <HAL_RCC_OscConfig+0x706>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL1)
 8002f76:	4b0b      	ldr	r3, [pc, #44]	; (8002fa4 <HAL_RCC_OscConfig+0x538>)
 8002f78:	691b      	ldr	r3, [r3, #16]
 8002f7a:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8002f7e:	2b18      	cmp	r3, #24
 8002f80:	f000 80b9 	beq.w	80030f6 <HAL_RCC_OscConfig+0x68a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002f84:	687b      	ldr	r3, [r7, #4]
 8002f86:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002f88:	2b02      	cmp	r3, #2
 8002f8a:	f040 809a 	bne.w	80030c2 <HAL_RCC_OscConfig+0x656>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
        assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002f8e:	4b05      	ldr	r3, [pc, #20]	; (8002fa4 <HAL_RCC_OscConfig+0x538>)
 8002f90:	681b      	ldr	r3, [r3, #0]
 8002f92:	4a04      	ldr	r2, [pc, #16]	; (8002fa4 <HAL_RCC_OscConfig+0x538>)
 8002f94:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8002f98:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002f9a:	f7fe faa9 	bl	80014f0 <HAL_GetTick>
 8002f9e:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8002fa0:	e00d      	b.n	8002fbe <HAL_RCC_OscConfig+0x552>
 8002fa2:	bf00      	nop
 8002fa4:	58024400 	.word	0x58024400
 8002fa8:	58024800 	.word	0x58024800
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002fac:	f7fe faa0 	bl	80014f0 <HAL_GetTick>
 8002fb0:	4602      	mov	r2, r0
 8002fb2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002fb4:	1ad3      	subs	r3, r2, r3
 8002fb6:	2b02      	cmp	r3, #2
 8002fb8:	d901      	bls.n	8002fbe <HAL_RCC_OscConfig+0x552>
          {
            return HAL_TIMEOUT;
 8002fba:	2303      	movs	r3, #3
 8002fbc:	e0da      	b.n	8003174 <HAL_RCC_OscConfig+0x708>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8002fbe:	4b6f      	ldr	r3, [pc, #444]	; (800317c <HAL_RCC_OscConfig+0x710>)
 8002fc0:	681b      	ldr	r3, [r3, #0]
 8002fc2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002fc6:	2b00      	cmp	r3, #0
 8002fc8:	d1f0      	bne.n	8002fac <HAL_RCC_OscConfig+0x540>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002fca:	4b6c      	ldr	r3, [pc, #432]	; (800317c <HAL_RCC_OscConfig+0x710>)
 8002fcc:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8002fce:	4b6c      	ldr	r3, [pc, #432]	; (8003180 <HAL_RCC_OscConfig+0x714>)
 8002fd0:	4013      	ands	r3, r2
 8002fd2:	687a      	ldr	r2, [r7, #4]
 8002fd4:	6a91      	ldr	r1, [r2, #40]	; 0x28
 8002fd6:	687a      	ldr	r2, [r7, #4]
 8002fd8:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 8002fda:	0112      	lsls	r2, r2, #4
 8002fdc:	430a      	orrs	r2, r1
 8002fde:	4967      	ldr	r1, [pc, #412]	; (800317c <HAL_RCC_OscConfig+0x710>)
 8002fe0:	4313      	orrs	r3, r2
 8002fe2:	628b      	str	r3, [r1, #40]	; 0x28
 8002fe4:	687b      	ldr	r3, [r7, #4]
 8002fe6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002fe8:	3b01      	subs	r3, #1
 8002fea:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8002fee:	687b      	ldr	r3, [r7, #4]
 8002ff0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002ff2:	3b01      	subs	r3, #1
 8002ff4:	025b      	lsls	r3, r3, #9
 8002ff6:	b29b      	uxth	r3, r3
 8002ff8:	431a      	orrs	r2, r3
 8002ffa:	687b      	ldr	r3, [r7, #4]
 8002ffc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002ffe:	3b01      	subs	r3, #1
 8003000:	041b      	lsls	r3, r3, #16
 8003002:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 8003006:	431a      	orrs	r2, r3
 8003008:	687b      	ldr	r3, [r7, #4]
 800300a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800300c:	3b01      	subs	r3, #1
 800300e:	061b      	lsls	r3, r3, #24
 8003010:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 8003014:	4959      	ldr	r1, [pc, #356]	; (800317c <HAL_RCC_OscConfig+0x710>)
 8003016:	4313      	orrs	r3, r2
 8003018:	630b      	str	r3, [r1, #48]	; 0x30
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

         /* Disable PLLFRACN . */
         __HAL_RCC_PLLFRACN_DISABLE();
 800301a:	4b58      	ldr	r3, [pc, #352]	; (800317c <HAL_RCC_OscConfig+0x710>)
 800301c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800301e:	4a57      	ldr	r2, [pc, #348]	; (800317c <HAL_RCC_OscConfig+0x710>)
 8003020:	f023 0301 	bic.w	r3, r3, #1
 8003024:	62d3      	str	r3, [r2, #44]	; 0x2c

         /* Configure PLL PLL1FRACN */
         __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 8003026:	4b55      	ldr	r3, [pc, #340]	; (800317c <HAL_RCC_OscConfig+0x710>)
 8003028:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800302a:	4b56      	ldr	r3, [pc, #344]	; (8003184 <HAL_RCC_OscConfig+0x718>)
 800302c:	4013      	ands	r3, r2
 800302e:	687a      	ldr	r2, [r7, #4]
 8003030:	6c92      	ldr	r2, [r2, #72]	; 0x48
 8003032:	00d2      	lsls	r2, r2, #3
 8003034:	4951      	ldr	r1, [pc, #324]	; (800317c <HAL_RCC_OscConfig+0x710>)
 8003036:	4313      	orrs	r3, r2
 8003038:	634b      	str	r3, [r1, #52]	; 0x34

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL_VCIRANGE(RCC_OscInitStruct->PLL.PLLRGE) ;
 800303a:	4b50      	ldr	r3, [pc, #320]	; (800317c <HAL_RCC_OscConfig+0x710>)
 800303c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800303e:	f023 020c 	bic.w	r2, r3, #12
 8003042:	687b      	ldr	r3, [r7, #4]
 8003044:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003046:	494d      	ldr	r1, [pc, #308]	; (800317c <HAL_RCC_OscConfig+0x710>)
 8003048:	4313      	orrs	r3, r2
 800304a:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Select PLL1 output frequency range : VCO */
        __HAL_RCC_PLL_VCORANGE(RCC_OscInitStruct->PLL.PLLVCOSEL) ;
 800304c:	4b4b      	ldr	r3, [pc, #300]	; (800317c <HAL_RCC_OscConfig+0x710>)
 800304e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003050:	f023 0202 	bic.w	r2, r3, #2
 8003054:	687b      	ldr	r3, [r7, #4]
 8003056:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003058:	4948      	ldr	r1, [pc, #288]	; (800317c <HAL_RCC_OscConfig+0x710>)
 800305a:	4313      	orrs	r3, r2
 800305c:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 800305e:	4b47      	ldr	r3, [pc, #284]	; (800317c <HAL_RCC_OscConfig+0x710>)
 8003060:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003062:	4a46      	ldr	r2, [pc, #280]	; (800317c <HAL_RCC_OscConfig+0x710>)
 8003064:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003068:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1Q Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800306a:	4b44      	ldr	r3, [pc, #272]	; (800317c <HAL_RCC_OscConfig+0x710>)
 800306c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800306e:	4a43      	ldr	r2, [pc, #268]	; (800317c <HAL_RCC_OscConfig+0x710>)
 8003070:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003074:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1R  Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 8003076:	4b41      	ldr	r3, [pc, #260]	; (800317c <HAL_RCC_OscConfig+0x710>)
 8003078:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800307a:	4a40      	ldr	r2, [pc, #256]	; (800317c <HAL_RCC_OscConfig+0x710>)
 800307c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003080:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1FRACN . */
         __HAL_RCC_PLLFRACN_ENABLE();
 8003082:	4b3e      	ldr	r3, [pc, #248]	; (800317c <HAL_RCC_OscConfig+0x710>)
 8003084:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003086:	4a3d      	ldr	r2, [pc, #244]	; (800317c <HAL_RCC_OscConfig+0x710>)
 8003088:	f043 0301 	orr.w	r3, r3, #1
 800308c:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800308e:	4b3b      	ldr	r3, [pc, #236]	; (800317c <HAL_RCC_OscConfig+0x710>)
 8003090:	681b      	ldr	r3, [r3, #0]
 8003092:	4a3a      	ldr	r2, [pc, #232]	; (800317c <HAL_RCC_OscConfig+0x710>)
 8003094:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8003098:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800309a:	f7fe fa29 	bl	80014f0 <HAL_GetTick>
 800309e:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 80030a0:	e008      	b.n	80030b4 <HAL_RCC_OscConfig+0x648>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80030a2:	f7fe fa25 	bl	80014f0 <HAL_GetTick>
 80030a6:	4602      	mov	r2, r0
 80030a8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80030aa:	1ad3      	subs	r3, r2, r3
 80030ac:	2b02      	cmp	r3, #2
 80030ae:	d901      	bls.n	80030b4 <HAL_RCC_OscConfig+0x648>
          {
            return HAL_TIMEOUT;
 80030b0:	2303      	movs	r3, #3
 80030b2:	e05f      	b.n	8003174 <HAL_RCC_OscConfig+0x708>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 80030b4:	4b31      	ldr	r3, [pc, #196]	; (800317c <HAL_RCC_OscConfig+0x710>)
 80030b6:	681b      	ldr	r3, [r3, #0]
 80030b8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80030bc:	2b00      	cmp	r3, #0
 80030be:	d0f0      	beq.n	80030a2 <HAL_RCC_OscConfig+0x636>
 80030c0:	e057      	b.n	8003172 <HAL_RCC_OscConfig+0x706>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80030c2:	4b2e      	ldr	r3, [pc, #184]	; (800317c <HAL_RCC_OscConfig+0x710>)
 80030c4:	681b      	ldr	r3, [r3, #0]
 80030c6:	4a2d      	ldr	r2, [pc, #180]	; (800317c <HAL_RCC_OscConfig+0x710>)
 80030c8:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80030cc:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80030ce:	f7fe fa0f 	bl	80014f0 <HAL_GetTick>
 80030d2:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 80030d4:	e008      	b.n	80030e8 <HAL_RCC_OscConfig+0x67c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80030d6:	f7fe fa0b 	bl	80014f0 <HAL_GetTick>
 80030da:	4602      	mov	r2, r0
 80030dc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80030de:	1ad3      	subs	r3, r2, r3
 80030e0:	2b02      	cmp	r3, #2
 80030e2:	d901      	bls.n	80030e8 <HAL_RCC_OscConfig+0x67c>
          {
            return HAL_TIMEOUT;
 80030e4:	2303      	movs	r3, #3
 80030e6:	e045      	b.n	8003174 <HAL_RCC_OscConfig+0x708>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 80030e8:	4b24      	ldr	r3, [pc, #144]	; (800317c <HAL_RCC_OscConfig+0x710>)
 80030ea:	681b      	ldr	r3, [r3, #0]
 80030ec:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80030f0:	2b00      	cmp	r3, #0
 80030f2:	d1f0      	bne.n	80030d6 <HAL_RCC_OscConfig+0x66a>
 80030f4:	e03d      	b.n	8003172 <HAL_RCC_OscConfig+0x706>
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLLCKSELR;
 80030f6:	4b21      	ldr	r3, [pc, #132]	; (800317c <HAL_RCC_OscConfig+0x710>)
 80030f8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80030fa:	613b      	str	r3, [r7, #16]
      temp2_pllckcfg = RCC->PLL1DIVR;
 80030fc:	4b1f      	ldr	r3, [pc, #124]	; (800317c <HAL_RCC_OscConfig+0x710>)
 80030fe:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003100:	60fb      	str	r3, [r7, #12]
      if(((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003102:	687b      	ldr	r3, [r7, #4]
 8003104:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003106:	2b01      	cmp	r3, #1
 8003108:	d031      	beq.n	800316e <HAL_RCC_OscConfig+0x702>
	 (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800310a:	693b      	ldr	r3, [r7, #16]
 800310c:	f003 0203 	and.w	r2, r3, #3
 8003110:	687b      	ldr	r3, [r7, #4]
 8003112:	6a9b      	ldr	r3, [r3, #40]	; 0x28
      if(((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003114:	429a      	cmp	r2, r3
 8003116:	d12a      	bne.n	800316e <HAL_RCC_OscConfig+0x702>
         ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8003118:	693b      	ldr	r3, [r7, #16]
 800311a:	091b      	lsrs	r3, r3, #4
 800311c:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8003120:	687b      	ldr	r3, [r7, #4]
 8003122:	6adb      	ldr	r3, [r3, #44]	; 0x2c
	 (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003124:	429a      	cmp	r2, r3
 8003126:	d122      	bne.n	800316e <HAL_RCC_OscConfig+0x702>
         (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8003128:	68fb      	ldr	r3, [r7, #12]
 800312a:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800312e:	687b      	ldr	r3, [r7, #4]
 8003130:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003132:	3b01      	subs	r3, #1
         ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8003134:	429a      	cmp	r2, r3
 8003136:	d11a      	bne.n	800316e <HAL_RCC_OscConfig+0x702>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8003138:	68fb      	ldr	r3, [r7, #12]
 800313a:	0a5b      	lsrs	r3, r3, #9
 800313c:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8003140:	687b      	ldr	r3, [r7, #4]
 8003142:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003144:	3b01      	subs	r3, #1
         (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8003146:	429a      	cmp	r2, r3
 8003148:	d111      	bne.n	800316e <HAL_RCC_OscConfig+0x702>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 800314a:	68fb      	ldr	r3, [r7, #12]
 800314c:	0c1b      	lsrs	r3, r3, #16
 800314e:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8003152:	687b      	ldr	r3, [r7, #4]
 8003154:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003156:	3b01      	subs	r3, #1
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8003158:	429a      	cmp	r2, r3
 800315a:	d108      	bne.n	800316e <HAL_RCC_OscConfig+0x702>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_R1) >> RCC_PLL1DIVR_R1_Pos) != (RCC_OscInitStruct->PLL.PLLR - 1U)))
 800315c:	68fb      	ldr	r3, [r7, #12]
 800315e:	0e1b      	lsrs	r3, r3, #24
 8003160:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8003164:	687b      	ldr	r3, [r7, #4]
 8003166:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003168:	3b01      	subs	r3, #1
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 800316a:	429a      	cmp	r2, r3
 800316c:	d001      	beq.n	8003172 <HAL_RCC_OscConfig+0x706>
      {
        return HAL_ERROR;
 800316e:	2301      	movs	r3, #1
 8003170:	e000      	b.n	8003174 <HAL_RCC_OscConfig+0x708>
      }
    }
  }
  return HAL_OK;
 8003172:	2300      	movs	r3, #0
}
 8003174:	4618      	mov	r0, r3
 8003176:	3730      	adds	r7, #48	; 0x30
 8003178:	46bd      	mov	sp, r7
 800317a:	bd80      	pop	{r7, pc}
 800317c:	58024400 	.word	0x58024400
 8003180:	fffffc0c 	.word	0xfffffc0c
 8003184:	ffff0007 	.word	0xffff0007

08003188 <HAL_RCC_ClockConfig>:
  *         D1CPRE[3:0] bits to ensure that  Domain1 core clock not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003188:	b580      	push	{r7, lr}
 800318a:	b086      	sub	sp, #24
 800318c:	af00      	add	r7, sp, #0
 800318e:	6078      	str	r0, [r7, #4]
 8003190:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef halstatus;
  uint32_t tickstart;
  uint32_t common_system_clock;

   /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8003192:	687b      	ldr	r3, [r7, #4]
 8003194:	2b00      	cmp	r3, #0
 8003196:	d101      	bne.n	800319c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003198:	2301      	movs	r3, #1
 800319a:	e19c      	b.n	80034d6 <HAL_RCC_ClockConfig+0x34e>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 800319c:	4b8a      	ldr	r3, [pc, #552]	; (80033c8 <HAL_RCC_ClockConfig+0x240>)
 800319e:	681b      	ldr	r3, [r3, #0]
 80031a0:	f003 030f 	and.w	r3, r3, #15
 80031a4:	683a      	ldr	r2, [r7, #0]
 80031a6:	429a      	cmp	r2, r3
 80031a8:	d910      	bls.n	80031cc <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80031aa:	4b87      	ldr	r3, [pc, #540]	; (80033c8 <HAL_RCC_ClockConfig+0x240>)
 80031ac:	681b      	ldr	r3, [r3, #0]
 80031ae:	f023 020f 	bic.w	r2, r3, #15
 80031b2:	4985      	ldr	r1, [pc, #532]	; (80033c8 <HAL_RCC_ClockConfig+0x240>)
 80031b4:	683b      	ldr	r3, [r7, #0]
 80031b6:	4313      	orrs	r3, r2
 80031b8:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80031ba:	4b83      	ldr	r3, [pc, #524]	; (80033c8 <HAL_RCC_ClockConfig+0x240>)
 80031bc:	681b      	ldr	r3, [r3, #0]
 80031be:	f003 030f 	and.w	r3, r3, #15
 80031c2:	683a      	ldr	r2, [r7, #0]
 80031c4:	429a      	cmp	r2, r3
 80031c6:	d001      	beq.n	80031cc <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 80031c8:	2301      	movs	r3, #1
 80031ca:	e184      	b.n	80034d6 <HAL_RCC_ClockConfig+0x34e>

  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- D1PCLK1/CDPCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 80031cc:	687b      	ldr	r3, [r7, #4]
 80031ce:	681b      	ldr	r3, [r3, #0]
 80031d0:	f003 0304 	and.w	r3, r3, #4
 80031d4:	2b00      	cmp	r3, #0
 80031d6:	d010      	beq.n	80031fa <HAL_RCC_ClockConfig+0x72>
  {
#if defined (RCC_D1CFGR_D1PPRE)
    if((RCC_ClkInitStruct->APB3CLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 80031d8:	687b      	ldr	r3, [r7, #4]
 80031da:	691a      	ldr	r2, [r3, #16]
 80031dc:	4b7b      	ldr	r3, [pc, #492]	; (80033cc <HAL_RCC_ClockConfig+0x244>)
 80031de:	699b      	ldr	r3, [r3, #24]
 80031e0:	f003 0370 	and.w	r3, r3, #112	; 0x70
 80031e4:	429a      	cmp	r2, r3
 80031e6:	d908      	bls.n	80031fa <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 80031e8:	4b78      	ldr	r3, [pc, #480]	; (80033cc <HAL_RCC_ClockConfig+0x244>)
 80031ea:	699b      	ldr	r3, [r3, #24]
 80031ec:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 80031f0:	687b      	ldr	r3, [r7, #4]
 80031f2:	691b      	ldr	r3, [r3, #16]
 80031f4:	4975      	ldr	r1, [pc, #468]	; (80033cc <HAL_RCC_ClockConfig+0x244>)
 80031f6:	4313      	orrs	r3, r2
 80031f8:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80031fa:	687b      	ldr	r3, [r7, #4]
 80031fc:	681b      	ldr	r3, [r3, #0]
 80031fe:	f003 0308 	and.w	r3, r3, #8
 8003202:	2b00      	cmp	r3, #0
 8003204:	d010      	beq.n	8003228 <HAL_RCC_ClockConfig+0xa0>
  {
#if defined (RCC_D2CFGR_D2PPRE1)
    if((RCC_ClkInitStruct->APB1CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 8003206:	687b      	ldr	r3, [r7, #4]
 8003208:	695a      	ldr	r2, [r3, #20]
 800320a:	4b70      	ldr	r3, [pc, #448]	; (80033cc <HAL_RCC_ClockConfig+0x244>)
 800320c:	69db      	ldr	r3, [r3, #28]
 800320e:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8003212:	429a      	cmp	r2, r3
 8003214:	d908      	bls.n	8003228 <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 8003216:	4b6d      	ldr	r3, [pc, #436]	; (80033cc <HAL_RCC_ClockConfig+0x244>)
 8003218:	69db      	ldr	r3, [r3, #28]
 800321a:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 800321e:	687b      	ldr	r3, [r7, #4]
 8003220:	695b      	ldr	r3, [r3, #20]
 8003222:	496a      	ldr	r1, [pc, #424]	; (80033cc <HAL_RCC_ClockConfig+0x244>)
 8003224:	4313      	orrs	r3, r2
 8003226:	61cb      	str	r3, [r1, #28]
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
  }
#endif
    }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003228:	687b      	ldr	r3, [r7, #4]
 800322a:	681b      	ldr	r3, [r3, #0]
 800322c:	f003 0310 	and.w	r3, r3, #16
 8003230:	2b00      	cmp	r3, #0
 8003232:	d010      	beq.n	8003256 <HAL_RCC_ClockConfig+0xce>
  {
#if defined(RCC_D2CFGR_D2PPRE2)
    if((RCC_ClkInitStruct->APB2CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8003234:	687b      	ldr	r3, [r7, #4]
 8003236:	699a      	ldr	r2, [r3, #24]
 8003238:	4b64      	ldr	r3, [pc, #400]	; (80033cc <HAL_RCC_ClockConfig+0x244>)
 800323a:	69db      	ldr	r3, [r3, #28]
 800323c:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8003240:	429a      	cmp	r2, r3
 8003242:	d908      	bls.n	8003256 <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8003244:	4b61      	ldr	r3, [pc, #388]	; (80033cc <HAL_RCC_ClockConfig+0x244>)
 8003246:	69db      	ldr	r3, [r3, #28]
 8003248:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 800324c:	687b      	ldr	r3, [r7, #4]
 800324e:	699b      	ldr	r3, [r3, #24]
 8003250:	495e      	ldr	r1, [pc, #376]	; (80033cc <HAL_RCC_ClockConfig+0x244>)
 8003252:	4313      	orrs	r3, r2
 8003254:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 8003256:	687b      	ldr	r3, [r7, #4]
 8003258:	681b      	ldr	r3, [r3, #0]
 800325a:	f003 0320 	and.w	r3, r3, #32
 800325e:	2b00      	cmp	r3, #0
 8003260:	d010      	beq.n	8003284 <HAL_RCC_ClockConfig+0xfc>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if((RCC_ClkInitStruct->APB4CLKDivider) > (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 8003262:	687b      	ldr	r3, [r7, #4]
 8003264:	69da      	ldr	r2, [r3, #28]
 8003266:	4b59      	ldr	r3, [pc, #356]	; (80033cc <HAL_RCC_ClockConfig+0x244>)
 8003268:	6a1b      	ldr	r3, [r3, #32]
 800326a:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800326e:	429a      	cmp	r2, r3
 8003270:	d908      	bls.n	8003284 <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider) );
 8003272:	4b56      	ldr	r3, [pc, #344]	; (80033cc <HAL_RCC_ClockConfig+0x244>)
 8003274:	6a1b      	ldr	r3, [r3, #32]
 8003276:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 800327a:	687b      	ldr	r3, [r7, #4]
 800327c:	69db      	ldr	r3, [r3, #28]
 800327e:	4953      	ldr	r1, [pc, #332]	; (80033cc <HAL_RCC_ClockConfig+0x244>)
 8003280:	4313      	orrs	r3, r2
 8003282:	620b      	str	r3, [r1, #32]
    }
#endif
  }

   /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003284:	687b      	ldr	r3, [r7, #4]
 8003286:	681b      	ldr	r3, [r3, #0]
 8003288:	f003 0302 	and.w	r3, r3, #2
 800328c:	2b00      	cmp	r3, #0
 800328e:	d010      	beq.n	80032b2 <HAL_RCC_ClockConfig+0x12a>
  {
#if defined (RCC_D1CFGR_HPRE)
    if((RCC_ClkInitStruct->AHBCLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 8003290:	687b      	ldr	r3, [r7, #4]
 8003292:	68da      	ldr	r2, [r3, #12]
 8003294:	4b4d      	ldr	r3, [pc, #308]	; (80033cc <HAL_RCC_ClockConfig+0x244>)
 8003296:	699b      	ldr	r3, [r3, #24]
 8003298:	f003 030f 	and.w	r3, r3, #15
 800329c:	429a      	cmp	r2, r3
 800329e:	d908      	bls.n	80032b2 <HAL_RCC_ClockConfig+0x12a>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80032a0:	4b4a      	ldr	r3, [pc, #296]	; (80033cc <HAL_RCC_ClockConfig+0x244>)
 80032a2:	699b      	ldr	r3, [r3, #24]
 80032a4:	f023 020f 	bic.w	r2, r3, #15
 80032a8:	687b      	ldr	r3, [r7, #4]
 80032aa:	68db      	ldr	r3, [r3, #12]
 80032ac:	4947      	ldr	r1, [pc, #284]	; (80033cc <HAL_RCC_ClockConfig+0x244>)
 80032ae:	4313      	orrs	r3, r2
 80032b0:	618b      	str	r3, [r1, #24]
    }
#endif
  }

    /*------------------------- SYSCLK Configuration -------------------------*/
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80032b2:	687b      	ldr	r3, [r7, #4]
 80032b4:	681b      	ldr	r3, [r3, #0]
 80032b6:	f003 0301 	and.w	r3, r3, #1
 80032ba:	2b00      	cmp	r3, #0
 80032bc:	d055      	beq.n	800336a <HAL_RCC_ClockConfig+0x1e2>
    {
      assert_param(IS_RCC_SYSCLK(RCC_ClkInitStruct->SYSCLKDivider));
      assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
#if defined(RCC_D1CFGR_D1CPRE)
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1CPRE, RCC_ClkInitStruct->SYSCLKDivider);
 80032be:	4b43      	ldr	r3, [pc, #268]	; (80033cc <HAL_RCC_ClockConfig+0x244>)
 80032c0:	699b      	ldr	r3, [r3, #24]
 80032c2:	f423 6270 	bic.w	r2, r3, #3840	; 0xf00
 80032c6:	687b      	ldr	r3, [r7, #4]
 80032c8:	689b      	ldr	r3, [r3, #8]
 80032ca:	4940      	ldr	r1, [pc, #256]	; (80033cc <HAL_RCC_ClockConfig+0x244>)
 80032cc:	4313      	orrs	r3, r2
 80032ce:	618b      	str	r3, [r1, #24]
#else
      MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDCPRE, RCC_ClkInitStruct->SYSCLKDivider);
#endif
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80032d0:	687b      	ldr	r3, [r7, #4]
 80032d2:	685b      	ldr	r3, [r3, #4]
 80032d4:	2b02      	cmp	r3, #2
 80032d6:	d107      	bne.n	80032e8 <HAL_RCC_ClockConfig+0x160>
      {
        /* Check the HSE ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 80032d8:	4b3c      	ldr	r3, [pc, #240]	; (80033cc <HAL_RCC_ClockConfig+0x244>)
 80032da:	681b      	ldr	r3, [r3, #0]
 80032dc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80032e0:	2b00      	cmp	r3, #0
 80032e2:	d121      	bne.n	8003328 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 80032e4:	2301      	movs	r3, #1
 80032e6:	e0f6      	b.n	80034d6 <HAL_RCC_ClockConfig+0x34e>
        }
      }
      /* PLL is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80032e8:	687b      	ldr	r3, [r7, #4]
 80032ea:	685b      	ldr	r3, [r3, #4]
 80032ec:	2b03      	cmp	r3, #3
 80032ee:	d107      	bne.n	8003300 <HAL_RCC_ClockConfig+0x178>
      {
        /* Check the PLL ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 80032f0:	4b36      	ldr	r3, [pc, #216]	; (80033cc <HAL_RCC_ClockConfig+0x244>)
 80032f2:	681b      	ldr	r3, [r3, #0]
 80032f4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80032f8:	2b00      	cmp	r3, #0
 80032fa:	d115      	bne.n	8003328 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 80032fc:	2301      	movs	r3, #1
 80032fe:	e0ea      	b.n	80034d6 <HAL_RCC_ClockConfig+0x34e>
        }
      }
      /* CSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 8003300:	687b      	ldr	r3, [r7, #4]
 8003302:	685b      	ldr	r3, [r3, #4]
 8003304:	2b01      	cmp	r3, #1
 8003306:	d107      	bne.n	8003318 <HAL_RCC_ClockConfig+0x190>
      {
        /* Check the PLL ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8003308:	4b30      	ldr	r3, [pc, #192]	; (80033cc <HAL_RCC_ClockConfig+0x244>)
 800330a:	681b      	ldr	r3, [r3, #0]
 800330c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003310:	2b00      	cmp	r3, #0
 8003312:	d109      	bne.n	8003328 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 8003314:	2301      	movs	r3, #1
 8003316:	e0de      	b.n	80034d6 <HAL_RCC_ClockConfig+0x34e>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8003318:	4b2c      	ldr	r3, [pc, #176]	; (80033cc <HAL_RCC_ClockConfig+0x244>)
 800331a:	681b      	ldr	r3, [r3, #0]
 800331c:	f003 0304 	and.w	r3, r3, #4
 8003320:	2b00      	cmp	r3, #0
 8003322:	d101      	bne.n	8003328 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 8003324:	2301      	movs	r3, #1
 8003326:	e0d6      	b.n	80034d6 <HAL_RCC_ClockConfig+0x34e>
        }
      }
      MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8003328:	4b28      	ldr	r3, [pc, #160]	; (80033cc <HAL_RCC_ClockConfig+0x244>)
 800332a:	691b      	ldr	r3, [r3, #16]
 800332c:	f023 0207 	bic.w	r2, r3, #7
 8003330:	687b      	ldr	r3, [r7, #4]
 8003332:	685b      	ldr	r3, [r3, #4]
 8003334:	4925      	ldr	r1, [pc, #148]	; (80033cc <HAL_RCC_ClockConfig+0x244>)
 8003336:	4313      	orrs	r3, r2
 8003338:	610b      	str	r3, [r1, #16]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800333a:	f7fe f8d9 	bl	80014f0 <HAL_GetTick>
 800333e:	6178      	str	r0, [r7, #20]

        while (__HAL_RCC_GET_SYSCLK_SOURCE() !=  (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003340:	e00a      	b.n	8003358 <HAL_RCC_ClockConfig+0x1d0>
        {
          if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003342:	f7fe f8d5 	bl	80014f0 <HAL_GetTick>
 8003346:	4602      	mov	r2, r0
 8003348:	697b      	ldr	r3, [r7, #20]
 800334a:	1ad3      	subs	r3, r2, r3
 800334c:	f241 3288 	movw	r2, #5000	; 0x1388
 8003350:	4293      	cmp	r3, r2
 8003352:	d901      	bls.n	8003358 <HAL_RCC_ClockConfig+0x1d0>
          {
            return HAL_TIMEOUT;
 8003354:	2303      	movs	r3, #3
 8003356:	e0be      	b.n	80034d6 <HAL_RCC_ClockConfig+0x34e>
        while (__HAL_RCC_GET_SYSCLK_SOURCE() !=  (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003358:	4b1c      	ldr	r3, [pc, #112]	; (80033cc <HAL_RCC_ClockConfig+0x244>)
 800335a:	691b      	ldr	r3, [r3, #16]
 800335c:	f003 0238 	and.w	r2, r3, #56	; 0x38
 8003360:	687b      	ldr	r3, [r7, #4]
 8003362:	685b      	ldr	r3, [r3, #4]
 8003364:	00db      	lsls	r3, r3, #3
 8003366:	429a      	cmp	r2, r3
 8003368:	d1eb      	bne.n	8003342 <HAL_RCC_ClockConfig+0x1ba>

    }

    /* Decreasing the BUS frequency divider */
   /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800336a:	687b      	ldr	r3, [r7, #4]
 800336c:	681b      	ldr	r3, [r3, #0]
 800336e:	f003 0302 	and.w	r3, r3, #2
 8003372:	2b00      	cmp	r3, #0
 8003374:	d010      	beq.n	8003398 <HAL_RCC_ClockConfig+0x210>
  {
#if defined(RCC_D1CFGR_HPRE)
    if((RCC_ClkInitStruct->AHBCLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 8003376:	687b      	ldr	r3, [r7, #4]
 8003378:	68da      	ldr	r2, [r3, #12]
 800337a:	4b14      	ldr	r3, [pc, #80]	; (80033cc <HAL_RCC_ClockConfig+0x244>)
 800337c:	699b      	ldr	r3, [r3, #24]
 800337e:	f003 030f 	and.w	r3, r3, #15
 8003382:	429a      	cmp	r2, r3
 8003384:	d208      	bcs.n	8003398 <HAL_RCC_ClockConfig+0x210>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003386:	4b11      	ldr	r3, [pc, #68]	; (80033cc <HAL_RCC_ClockConfig+0x244>)
 8003388:	699b      	ldr	r3, [r3, #24]
 800338a:	f023 020f 	bic.w	r2, r3, #15
 800338e:	687b      	ldr	r3, [r7, #4]
 8003390:	68db      	ldr	r3, [r3, #12]
 8003392:	490e      	ldr	r1, [pc, #56]	; (80033cc <HAL_RCC_ClockConfig+0x244>)
 8003394:	4313      	orrs	r3, r2
 8003396:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8003398:	4b0b      	ldr	r3, [pc, #44]	; (80033c8 <HAL_RCC_ClockConfig+0x240>)
 800339a:	681b      	ldr	r3, [r3, #0]
 800339c:	f003 030f 	and.w	r3, r3, #15
 80033a0:	683a      	ldr	r2, [r7, #0]
 80033a2:	429a      	cmp	r2, r3
 80033a4:	d214      	bcs.n	80033d0 <HAL_RCC_ClockConfig+0x248>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80033a6:	4b08      	ldr	r3, [pc, #32]	; (80033c8 <HAL_RCC_ClockConfig+0x240>)
 80033a8:	681b      	ldr	r3, [r3, #0]
 80033aa:	f023 020f 	bic.w	r2, r3, #15
 80033ae:	4906      	ldr	r1, [pc, #24]	; (80033c8 <HAL_RCC_ClockConfig+0x240>)
 80033b0:	683b      	ldr	r3, [r7, #0]
 80033b2:	4313      	orrs	r3, r2
 80033b4:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80033b6:	4b04      	ldr	r3, [pc, #16]	; (80033c8 <HAL_RCC_ClockConfig+0x240>)
 80033b8:	681b      	ldr	r3, [r3, #0]
 80033ba:	f003 030f 	and.w	r3, r3, #15
 80033be:	683a      	ldr	r2, [r7, #0]
 80033c0:	429a      	cmp	r2, r3
 80033c2:	d005      	beq.n	80033d0 <HAL_RCC_ClockConfig+0x248>
    {
      return HAL_ERROR;
 80033c4:	2301      	movs	r3, #1
 80033c6:	e086      	b.n	80034d6 <HAL_RCC_ClockConfig+0x34e>
 80033c8:	52002000 	.word	0x52002000
 80033cc:	58024400 	.word	0x58024400
    }
 }

  /*-------------------------- D1PCLK1/CDPCLK Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 80033d0:	687b      	ldr	r3, [r7, #4]
 80033d2:	681b      	ldr	r3, [r3, #0]
 80033d4:	f003 0304 	and.w	r3, r3, #4
 80033d8:	2b00      	cmp	r3, #0
 80033da:	d010      	beq.n	80033fe <HAL_RCC_ClockConfig+0x276>
 {
#if defined(RCC_D1CFGR_D1PPRE)
   if((RCC_ClkInitStruct->APB3CLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 80033dc:	687b      	ldr	r3, [r7, #4]
 80033de:	691a      	ldr	r2, [r3, #16]
 80033e0:	4b3f      	ldr	r3, [pc, #252]	; (80034e0 <HAL_RCC_ClockConfig+0x358>)
 80033e2:	699b      	ldr	r3, [r3, #24]
 80033e4:	f003 0370 	and.w	r3, r3, #112	; 0x70
 80033e8:	429a      	cmp	r2, r3
 80033ea:	d208      	bcs.n	80033fe <HAL_RCC_ClockConfig+0x276>
   {
     assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
     MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 80033ec:	4b3c      	ldr	r3, [pc, #240]	; (80034e0 <HAL_RCC_ClockConfig+0x358>)
 80033ee:	699b      	ldr	r3, [r3, #24]
 80033f0:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 80033f4:	687b      	ldr	r3, [r7, #4]
 80033f6:	691b      	ldr	r3, [r3, #16]
 80033f8:	4939      	ldr	r1, [pc, #228]	; (80034e0 <HAL_RCC_ClockConfig+0x358>)
 80033fa:	4313      	orrs	r3, r2
 80033fc:	618b      	str	r3, [r1, #24]
   }
#endif
 }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80033fe:	687b      	ldr	r3, [r7, #4]
 8003400:	681b      	ldr	r3, [r3, #0]
 8003402:	f003 0308 	and.w	r3, r3, #8
 8003406:	2b00      	cmp	r3, #0
 8003408:	d010      	beq.n	800342c <HAL_RCC_ClockConfig+0x2a4>
 {
#if defined(RCC_D2CFGR_D2PPRE1)
   if((RCC_ClkInitStruct->APB1CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 800340a:	687b      	ldr	r3, [r7, #4]
 800340c:	695a      	ldr	r2, [r3, #20]
 800340e:	4b34      	ldr	r3, [pc, #208]	; (80034e0 <HAL_RCC_ClockConfig+0x358>)
 8003410:	69db      	ldr	r3, [r3, #28]
 8003412:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8003416:	429a      	cmp	r2, r3
 8003418:	d208      	bcs.n	800342c <HAL_RCC_ClockConfig+0x2a4>
   {
     assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
     MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 800341a:	4b31      	ldr	r3, [pc, #196]	; (80034e0 <HAL_RCC_ClockConfig+0x358>)
 800341c:	69db      	ldr	r3, [r3, #28]
 800341e:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8003422:	687b      	ldr	r3, [r7, #4]
 8003424:	695b      	ldr	r3, [r3, #20]
 8003426:	492e      	ldr	r1, [pc, #184]	; (80034e0 <HAL_RCC_ClockConfig+0x358>)
 8003428:	4313      	orrs	r3, r2
 800342a:	61cb      	str	r3, [r1, #28]
   }
#endif
 }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800342c:	687b      	ldr	r3, [r7, #4]
 800342e:	681b      	ldr	r3, [r3, #0]
 8003430:	f003 0310 	and.w	r3, r3, #16
 8003434:	2b00      	cmp	r3, #0
 8003436:	d010      	beq.n	800345a <HAL_RCC_ClockConfig+0x2d2>
 {
#if defined (RCC_D2CFGR_D2PPRE2)
   if((RCC_ClkInitStruct->APB2CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8003438:	687b      	ldr	r3, [r7, #4]
 800343a:	699a      	ldr	r2, [r3, #24]
 800343c:	4b28      	ldr	r3, [pc, #160]	; (80034e0 <HAL_RCC_ClockConfig+0x358>)
 800343e:	69db      	ldr	r3, [r3, #28]
 8003440:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8003444:	429a      	cmp	r2, r3
 8003446:	d208      	bcs.n	800345a <HAL_RCC_ClockConfig+0x2d2>
   {
     assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
     MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8003448:	4b25      	ldr	r3, [pc, #148]	; (80034e0 <HAL_RCC_ClockConfig+0x358>)
 800344a:	69db      	ldr	r3, [r3, #28]
 800344c:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8003450:	687b      	ldr	r3, [r7, #4]
 8003452:	699b      	ldr	r3, [r3, #24]
 8003454:	4922      	ldr	r1, [pc, #136]	; (80034e0 <HAL_RCC_ClockConfig+0x358>)
 8003456:	4313      	orrs	r3, r2
 8003458:	61cb      	str	r3, [r1, #28]
   }
#endif
 }

  /*-------------------------- D3PCLK1/SRDPCLK1 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 800345a:	687b      	ldr	r3, [r7, #4]
 800345c:	681b      	ldr	r3, [r3, #0]
 800345e:	f003 0320 	and.w	r3, r3, #32
 8003462:	2b00      	cmp	r3, #0
 8003464:	d010      	beq.n	8003488 <HAL_RCC_ClockConfig+0x300>
 {
#if defined(RCC_D3CFGR_D3PPRE)
   if((RCC_ClkInitStruct->APB4CLKDivider) < (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 8003466:	687b      	ldr	r3, [r7, #4]
 8003468:	69da      	ldr	r2, [r3, #28]
 800346a:	4b1d      	ldr	r3, [pc, #116]	; (80034e0 <HAL_RCC_ClockConfig+0x358>)
 800346c:	6a1b      	ldr	r3, [r3, #32]
 800346e:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8003472:	429a      	cmp	r2, r3
 8003474:	d208      	bcs.n	8003488 <HAL_RCC_ClockConfig+0x300>
   {
     assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
     MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider) );
 8003476:	4b1a      	ldr	r3, [pc, #104]	; (80034e0 <HAL_RCC_ClockConfig+0x358>)
 8003478:	6a1b      	ldr	r3, [r3, #32]
 800347a:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 800347e:	687b      	ldr	r3, [r7, #4]
 8003480:	69db      	ldr	r3, [r3, #28]
 8003482:	4917      	ldr	r1, [pc, #92]	; (80034e0 <HAL_RCC_ClockConfig+0x358>)
 8003484:	4313      	orrs	r3, r2
 8003486:	620b      	str	r3, [r1, #32]
#endif
 }

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8003488:	f000 f834 	bl	80034f4 <HAL_RCC_GetSysClockFreq>
 800348c:	4602      	mov	r2, r0
 800348e:	4b14      	ldr	r3, [pc, #80]	; (80034e0 <HAL_RCC_ClockConfig+0x358>)
 8003490:	699b      	ldr	r3, [r3, #24]
 8003492:	0a1b      	lsrs	r3, r3, #8
 8003494:	f003 030f 	and.w	r3, r3, #15
 8003498:	4912      	ldr	r1, [pc, #72]	; (80034e4 <HAL_RCC_ClockConfig+0x35c>)
 800349a:	5ccb      	ldrb	r3, [r1, r3]
 800349c:	f003 031f 	and.w	r3, r3, #31
 80034a0:	fa22 f303 	lsr.w	r3, r2, r3
 80034a4:	613b      	str	r3, [r7, #16]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 80034a6:	4b0e      	ldr	r3, [pc, #56]	; (80034e0 <HAL_RCC_ClockConfig+0x358>)
 80034a8:	699b      	ldr	r3, [r3, #24]
 80034aa:	f003 030f 	and.w	r3, r3, #15
 80034ae:	4a0d      	ldr	r2, [pc, #52]	; (80034e4 <HAL_RCC_ClockConfig+0x35c>)
 80034b0:	5cd3      	ldrb	r3, [r2, r3]
 80034b2:	f003 031f 	and.w	r3, r3, #31
 80034b6:	693a      	ldr	r2, [r7, #16]
 80034b8:	fa22 f303 	lsr.w	r3, r2, r3
 80034bc:	4a0a      	ldr	r2, [pc, #40]	; (80034e8 <HAL_RCC_ClockConfig+0x360>)
 80034be:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 80034c0:	4a0a      	ldr	r2, [pc, #40]	; (80034ec <HAL_RCC_ClockConfig+0x364>)
 80034c2:	693b      	ldr	r3, [r7, #16]
 80034c4:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Configure the source of time base considering new system clocks settings*/
  halstatus = HAL_InitTick (uwTickPrio);
 80034c6:	4b0a      	ldr	r3, [pc, #40]	; (80034f0 <HAL_RCC_ClockConfig+0x368>)
 80034c8:	681b      	ldr	r3, [r3, #0]
 80034ca:	4618      	mov	r0, r3
 80034cc:	f7fd ffc6 	bl	800145c <HAL_InitTick>
 80034d0:	4603      	mov	r3, r0
 80034d2:	73fb      	strb	r3, [r7, #15]

  return halstatus;
 80034d4:	7bfb      	ldrb	r3, [r7, #15]
}
 80034d6:	4618      	mov	r0, r3
 80034d8:	3718      	adds	r7, #24
 80034da:	46bd      	mov	sp, r7
 80034dc:	bd80      	pop	{r7, pc}
 80034de:	bf00      	nop
 80034e0:	58024400 	.word	0x58024400
 80034e4:	08007fa4 	.word	0x08007fa4
 80034e8:	20000004 	.word	0x20000004
 80034ec:	20000000 	.word	0x20000000
 80034f0:	20000008 	.word	0x20000008

080034f4 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80034f4:	b480      	push	{r7}
 80034f6:	b089      	sub	sp, #36	; 0x24
 80034f8:	af00      	add	r7, sp, #0
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 80034fa:	4bb3      	ldr	r3, [pc, #716]	; (80037c8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80034fc:	691b      	ldr	r3, [r3, #16]
 80034fe:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8003502:	2b18      	cmp	r3, #24
 8003504:	f200 8155 	bhi.w	80037b2 <HAL_RCC_GetSysClockFreq+0x2be>
 8003508:	a201      	add	r2, pc, #4	; (adr r2, 8003510 <HAL_RCC_GetSysClockFreq+0x1c>)
 800350a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800350e:	bf00      	nop
 8003510:	08003575 	.word	0x08003575
 8003514:	080037b3 	.word	0x080037b3
 8003518:	080037b3 	.word	0x080037b3
 800351c:	080037b3 	.word	0x080037b3
 8003520:	080037b3 	.word	0x080037b3
 8003524:	080037b3 	.word	0x080037b3
 8003528:	080037b3 	.word	0x080037b3
 800352c:	080037b3 	.word	0x080037b3
 8003530:	0800359b 	.word	0x0800359b
 8003534:	080037b3 	.word	0x080037b3
 8003538:	080037b3 	.word	0x080037b3
 800353c:	080037b3 	.word	0x080037b3
 8003540:	080037b3 	.word	0x080037b3
 8003544:	080037b3 	.word	0x080037b3
 8003548:	080037b3 	.word	0x080037b3
 800354c:	080037b3 	.word	0x080037b3
 8003550:	080035a1 	.word	0x080035a1
 8003554:	080037b3 	.word	0x080037b3
 8003558:	080037b3 	.word	0x080037b3
 800355c:	080037b3 	.word	0x080037b3
 8003560:	080037b3 	.word	0x080037b3
 8003564:	080037b3 	.word	0x080037b3
 8003568:	080037b3 	.word	0x080037b3
 800356c:	080037b3 	.word	0x080037b3
 8003570:	080035a7 	.word	0x080035a7
  {
  case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */

   if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8003574:	4b94      	ldr	r3, [pc, #592]	; (80037c8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003576:	681b      	ldr	r3, [r3, #0]
 8003578:	f003 0320 	and.w	r3, r3, #32
 800357c:	2b00      	cmp	r3, #0
 800357e:	d009      	beq.n	8003594 <HAL_RCC_GetSysClockFreq+0xa0>
      {
        sysclockfreq = (uint32_t) (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8003580:	4b91      	ldr	r3, [pc, #580]	; (80037c8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003582:	681b      	ldr	r3, [r3, #0]
 8003584:	08db      	lsrs	r3, r3, #3
 8003586:	f003 0303 	and.w	r3, r3, #3
 800358a:	4a90      	ldr	r2, [pc, #576]	; (80037cc <HAL_RCC_GetSysClockFreq+0x2d8>)
 800358c:	fa22 f303 	lsr.w	r3, r2, r3
 8003590:	61bb      	str	r3, [r7, #24]
      else
      {
        sysclockfreq = (uint32_t) HSI_VALUE;
      }

    break;
 8003592:	e111      	b.n	80037b8 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = (uint32_t) HSI_VALUE;
 8003594:	4b8d      	ldr	r3, [pc, #564]	; (80037cc <HAL_RCC_GetSysClockFreq+0x2d8>)
 8003596:	61bb      	str	r3, [r7, #24]
    break;
 8003598:	e10e      	b.n	80037b8 <HAL_RCC_GetSysClockFreq+0x2c4>

  case RCC_CFGR_SWS_CSI:  /* CSI used as system clock  source */
    sysclockfreq = CSI_VALUE;
 800359a:	4b8d      	ldr	r3, [pc, #564]	; (80037d0 <HAL_RCC_GetSysClockFreq+0x2dc>)
 800359c:	61bb      	str	r3, [r7, #24]
    break;
 800359e:	e10b      	b.n	80037b8 <HAL_RCC_GetSysClockFreq+0x2c4>

  case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    sysclockfreq = HSE_VALUE;
 80035a0:	4b8c      	ldr	r3, [pc, #560]	; (80037d4 <HAL_RCC_GetSysClockFreq+0x2e0>)
 80035a2:	61bb      	str	r3, [r7, #24]
    break;
 80035a4:	e108      	b.n	80037b8 <HAL_RCC_GetSysClockFreq+0x2c4>
  case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 80035a6:	4b88      	ldr	r3, [pc, #544]	; (80037c8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80035a8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80035aa:	f003 0303 	and.w	r3, r3, #3
 80035ae:	617b      	str	r3, [r7, #20]
    pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1)>> 4)  ;
 80035b0:	4b85      	ldr	r3, [pc, #532]	; (80037c8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80035b2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80035b4:	091b      	lsrs	r3, r3, #4
 80035b6:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80035ba:	613b      	str	r3, [r7, #16]
    pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN)>>RCC_PLLCFGR_PLL1FRACEN_Pos);
 80035bc:	4b82      	ldr	r3, [pc, #520]	; (80037c8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80035be:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80035c0:	f003 0301 	and.w	r3, r3, #1
 80035c4:	60fb      	str	r3, [r7, #12]
    fracn1 = (float_t)(uint32_t)(pllfracen* ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1)>> 3));
 80035c6:	4b80      	ldr	r3, [pc, #512]	; (80037c8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80035c8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80035ca:	08db      	lsrs	r3, r3, #3
 80035cc:	f3c3 030c 	ubfx	r3, r3, #0, #13
 80035d0:	68fa      	ldr	r2, [r7, #12]
 80035d2:	fb02 f303 	mul.w	r3, r2, r3
 80035d6:	ee07 3a90 	vmov	s15, r3
 80035da:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80035de:	edc7 7a02 	vstr	s15, [r7, #8]

    if (pllm != 0U)
 80035e2:	693b      	ldr	r3, [r7, #16]
 80035e4:	2b00      	cmp	r3, #0
 80035e6:	f000 80e1 	beq.w	80037ac <HAL_RCC_GetSysClockFreq+0x2b8>
 80035ea:	697b      	ldr	r3, [r7, #20]
 80035ec:	2b02      	cmp	r3, #2
 80035ee:	f000 8083 	beq.w	80036f8 <HAL_RCC_GetSysClockFreq+0x204>
 80035f2:	697b      	ldr	r3, [r7, #20]
 80035f4:	2b02      	cmp	r3, #2
 80035f6:	f200 80a1 	bhi.w	800373c <HAL_RCC_GetSysClockFreq+0x248>
 80035fa:	697b      	ldr	r3, [r7, #20]
 80035fc:	2b00      	cmp	r3, #0
 80035fe:	d003      	beq.n	8003608 <HAL_RCC_GetSysClockFreq+0x114>
 8003600:	697b      	ldr	r3, [r7, #20]
 8003602:	2b01      	cmp	r3, #1
 8003604:	d056      	beq.n	80036b4 <HAL_RCC_GetSysClockFreq+0x1c0>
 8003606:	e099      	b.n	800373c <HAL_RCC_GetSysClockFreq+0x248>
    {
      switch (pllsource)
      {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

       if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8003608:	4b6f      	ldr	r3, [pc, #444]	; (80037c8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800360a:	681b      	ldr	r3, [r3, #0]
 800360c:	f003 0320 	and.w	r3, r3, #32
 8003610:	2b00      	cmp	r3, #0
 8003612:	d02d      	beq.n	8003670 <HAL_RCC_GetSysClockFreq+0x17c>
        {
          hsivalue= (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8003614:	4b6c      	ldr	r3, [pc, #432]	; (80037c8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003616:	681b      	ldr	r3, [r3, #0]
 8003618:	08db      	lsrs	r3, r3, #3
 800361a:	f003 0303 	and.w	r3, r3, #3
 800361e:	4a6b      	ldr	r2, [pc, #428]	; (80037cc <HAL_RCC_GetSysClockFreq+0x2d8>)
 8003620:	fa22 f303 	lsr.w	r3, r2, r3
 8003624:	607b      	str	r3, [r7, #4]
          pllvco = ( (float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8003626:	687b      	ldr	r3, [r7, #4]
 8003628:	ee07 3a90 	vmov	s15, r3
 800362c:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003630:	693b      	ldr	r3, [r7, #16]
 8003632:	ee07 3a90 	vmov	s15, r3
 8003636:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800363a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800363e:	4b62      	ldr	r3, [pc, #392]	; (80037c8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003640:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003642:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003646:	ee07 3a90 	vmov	s15, r3
 800364a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800364e:	ed97 6a02 	vldr	s12, [r7, #8]
 8003652:	eddf 5a61 	vldr	s11, [pc, #388]	; 80037d8 <HAL_RCC_GetSysClockFreq+0x2e4>
 8003656:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800365a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800365e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8003662:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8003666:	ee67 7a27 	vmul.f32	s15, s14, s15
 800366a:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
        }
        break;
 800366e:	e087      	b.n	8003780 <HAL_RCC_GetSysClockFreq+0x28c>
          pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8003670:	693b      	ldr	r3, [r7, #16]
 8003672:	ee07 3a90 	vmov	s15, r3
 8003676:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800367a:	eddf 6a58 	vldr	s13, [pc, #352]	; 80037dc <HAL_RCC_GetSysClockFreq+0x2e8>
 800367e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8003682:	4b51      	ldr	r3, [pc, #324]	; (80037c8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003684:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003686:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800368a:	ee07 3a90 	vmov	s15, r3
 800368e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003692:	ed97 6a02 	vldr	s12, [r7, #8]
 8003696:	eddf 5a50 	vldr	s11, [pc, #320]	; 80037d8 <HAL_RCC_GetSysClockFreq+0x2e4>
 800369a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800369e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80036a2:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80036a6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80036aa:	ee67 7a27 	vmul.f32	s15, s14, s15
 80036ae:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80036b2:	e065      	b.n	8003780 <HAL_RCC_GetSysClockFreq+0x28c>

      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 80036b4:	693b      	ldr	r3, [r7, #16]
 80036b6:	ee07 3a90 	vmov	s15, r3
 80036ba:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80036be:	eddf 6a48 	vldr	s13, [pc, #288]	; 80037e0 <HAL_RCC_GetSysClockFreq+0x2ec>
 80036c2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80036c6:	4b40      	ldr	r3, [pc, #256]	; (80037c8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80036c8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80036ca:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80036ce:	ee07 3a90 	vmov	s15, r3
 80036d2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80036d6:	ed97 6a02 	vldr	s12, [r7, #8]
 80036da:	eddf 5a3f 	vldr	s11, [pc, #252]	; 80037d8 <HAL_RCC_GetSysClockFreq+0x2e4>
 80036de:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80036e2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80036e6:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80036ea:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80036ee:	ee67 7a27 	vmul.f32	s15, s14, s15
 80036f2:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80036f6:	e043      	b.n	8003780 <HAL_RCC_GetSysClockFreq+0x28c>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 80036f8:	693b      	ldr	r3, [r7, #16]
 80036fa:	ee07 3a90 	vmov	s15, r3
 80036fe:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003702:	eddf 6a38 	vldr	s13, [pc, #224]	; 80037e4 <HAL_RCC_GetSysClockFreq+0x2f0>
 8003706:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800370a:	4b2f      	ldr	r3, [pc, #188]	; (80037c8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800370c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800370e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003712:	ee07 3a90 	vmov	s15, r3
 8003716:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800371a:	ed97 6a02 	vldr	s12, [r7, #8]
 800371e:	eddf 5a2e 	vldr	s11, [pc, #184]	; 80037d8 <HAL_RCC_GetSysClockFreq+0x2e4>
 8003722:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8003726:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800372a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800372e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8003732:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003736:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800373a:	e021      	b.n	8003780 <HAL_RCC_GetSysClockFreq+0x28c>

      default:
        pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 800373c:	693b      	ldr	r3, [r7, #16]
 800373e:	ee07 3a90 	vmov	s15, r3
 8003742:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003746:	eddf 6a26 	vldr	s13, [pc, #152]	; 80037e0 <HAL_RCC_GetSysClockFreq+0x2ec>
 800374a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800374e:	4b1e      	ldr	r3, [pc, #120]	; (80037c8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003750:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003752:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003756:	ee07 3a90 	vmov	s15, r3
 800375a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800375e:	ed97 6a02 	vldr	s12, [r7, #8]
 8003762:	eddf 5a1d 	vldr	s11, [pc, #116]	; 80037d8 <HAL_RCC_GetSysClockFreq+0x2e4>
 8003766:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800376a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800376e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8003772:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8003776:	ee67 7a27 	vmul.f32	s15, s14, s15
 800377a:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800377e:	bf00      	nop
      }
      pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >>9) + 1U ) ;
 8003780:	4b11      	ldr	r3, [pc, #68]	; (80037c8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003782:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003784:	0a5b      	lsrs	r3, r3, #9
 8003786:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800378a:	3301      	adds	r3, #1
 800378c:	603b      	str	r3, [r7, #0]
      sysclockfreq =  (uint32_t)(float_t)(pllvco/(float_t)pllp);
 800378e:	683b      	ldr	r3, [r7, #0]
 8003790:	ee07 3a90 	vmov	s15, r3
 8003794:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8003798:	edd7 6a07 	vldr	s13, [r7, #28]
 800379c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80037a0:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80037a4:	ee17 3a90 	vmov	r3, s15
 80037a8:	61bb      	str	r3, [r7, #24]
    }
    else
    {
      sysclockfreq = 0U;
    }
    break;
 80037aa:	e005      	b.n	80037b8 <HAL_RCC_GetSysClockFreq+0x2c4>
      sysclockfreq = 0U;
 80037ac:	2300      	movs	r3, #0
 80037ae:	61bb      	str	r3, [r7, #24]
    break;
 80037b0:	e002      	b.n	80037b8 <HAL_RCC_GetSysClockFreq+0x2c4>

  default:
    sysclockfreq = CSI_VALUE;
 80037b2:	4b07      	ldr	r3, [pc, #28]	; (80037d0 <HAL_RCC_GetSysClockFreq+0x2dc>)
 80037b4:	61bb      	str	r3, [r7, #24]
    break;
 80037b6:	bf00      	nop
  }

  return sysclockfreq;
 80037b8:	69bb      	ldr	r3, [r7, #24]
}
 80037ba:	4618      	mov	r0, r3
 80037bc:	3724      	adds	r7, #36	; 0x24
 80037be:	46bd      	mov	sp, r7
 80037c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037c4:	4770      	bx	lr
 80037c6:	bf00      	nop
 80037c8:	58024400 	.word	0x58024400
 80037cc:	03d09000 	.word	0x03d09000
 80037d0:	003d0900 	.word	0x003d0900
 80037d4:	007a1200 	.word	0x007a1200
 80037d8:	46000000 	.word	0x46000000
 80037dc:	4c742400 	.word	0x4c742400
 80037e0:	4a742400 	.word	0x4a742400
 80037e4:	4af42400 	.word	0x4af42400

080037e8 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemD2Clock CMSIS variable is used to store System domain2 Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80037e8:	b580      	push	{r7, lr}
 80037ea:	b082      	sub	sp, #8
 80037ec:	af00      	add	r7, sp, #0
uint32_t common_system_clock;

#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 80037ee:	f7ff fe81 	bl	80034f4 <HAL_RCC_GetSysClockFreq>
 80037f2:	4602      	mov	r2, r0
 80037f4:	4b10      	ldr	r3, [pc, #64]	; (8003838 <HAL_RCC_GetHCLKFreq+0x50>)
 80037f6:	699b      	ldr	r3, [r3, #24]
 80037f8:	0a1b      	lsrs	r3, r3, #8
 80037fa:	f003 030f 	and.w	r3, r3, #15
 80037fe:	490f      	ldr	r1, [pc, #60]	; (800383c <HAL_RCC_GetHCLKFreq+0x54>)
 8003800:	5ccb      	ldrb	r3, [r1, r3]
 8003802:	f003 031f 	and.w	r3, r3, #31
 8003806:	fa22 f303 	lsr.w	r3, r2, r3
 800380a:	607b      	str	r3, [r7, #4]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos] & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 800380c:	4b0a      	ldr	r3, [pc, #40]	; (8003838 <HAL_RCC_GetHCLKFreq+0x50>)
 800380e:	699b      	ldr	r3, [r3, #24]
 8003810:	f003 030f 	and.w	r3, r3, #15
 8003814:	4a09      	ldr	r2, [pc, #36]	; (800383c <HAL_RCC_GetHCLKFreq+0x54>)
 8003816:	5cd3      	ldrb	r3, [r2, r3]
 8003818:	f003 031f 	and.w	r3, r3, #31
 800381c:	687a      	ldr	r2, [r7, #4]
 800381e:	fa22 f303 	lsr.w	r3, r2, r3
 8003822:	4a07      	ldr	r2, [pc, #28]	; (8003840 <HAL_RCC_GetHCLKFreq+0x58>)
 8003824:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8003826:	4a07      	ldr	r2, [pc, #28]	; (8003844 <HAL_RCC_GetHCLKFreq+0x5c>)
 8003828:	687b      	ldr	r3, [r7, #4]
 800382a:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  return SystemD2Clock;
 800382c:	4b04      	ldr	r3, [pc, #16]	; (8003840 <HAL_RCC_GetHCLKFreq+0x58>)
 800382e:	681b      	ldr	r3, [r3, #0]
}
 8003830:	4618      	mov	r0, r3
 8003832:	3708      	adds	r7, #8
 8003834:	46bd      	mov	sp, r7
 8003836:	bd80      	pop	{r7, pc}
 8003838:	58024400 	.word	0x58024400
 800383c:	08007fa4 	.word	0x08007fa4
 8003840:	20000004 	.word	0x20000004
 8003844:	20000000 	.word	0x20000000

08003848 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003848:	b580      	push	{r7, lr}
 800384a:	af00      	add	r7, sp, #0
#if defined (RCC_D2CFGR_D2PPRE1)
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1)>> RCC_D2CFGR_D2PPRE1_Pos]) & 0x1FU));
 800384c:	f7ff ffcc 	bl	80037e8 <HAL_RCC_GetHCLKFreq>
 8003850:	4602      	mov	r2, r0
 8003852:	4b06      	ldr	r3, [pc, #24]	; (800386c <HAL_RCC_GetPCLK1Freq+0x24>)
 8003854:	69db      	ldr	r3, [r3, #28]
 8003856:	091b      	lsrs	r3, r3, #4
 8003858:	f003 0307 	and.w	r3, r3, #7
 800385c:	4904      	ldr	r1, [pc, #16]	; (8003870 <HAL_RCC_GetPCLK1Freq+0x28>)
 800385e:	5ccb      	ldrb	r3, [r1, r3]
 8003860:	f003 031f 	and.w	r3, r3, #31
 8003864:	fa22 f303 	lsr.w	r3, r2, r3
#else
 /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1)>> RCC_CDCFGR2_CDPPRE1_Pos]) & 0x1FU));
#endif
}
 8003868:	4618      	mov	r0, r3
 800386a:	bd80      	pop	{r7, pc}
 800386c:	58024400 	.word	0x58024400
 8003870:	08007fa4 	.word	0x08007fa4

08003874 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003874:	b580      	push	{r7, lr}
 8003876:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
#if defined(RCC_D2CFGR_D2PPRE2)
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2)>> RCC_D2CFGR_D2PPRE2_Pos]) & 0x1FU));
 8003878:	f7ff ffb6 	bl	80037e8 <HAL_RCC_GetHCLKFreq>
 800387c:	4602      	mov	r2, r0
 800387e:	4b06      	ldr	r3, [pc, #24]	; (8003898 <HAL_RCC_GetPCLK2Freq+0x24>)
 8003880:	69db      	ldr	r3, [r3, #28]
 8003882:	0a1b      	lsrs	r3, r3, #8
 8003884:	f003 0307 	and.w	r3, r3, #7
 8003888:	4904      	ldr	r1, [pc, #16]	; (800389c <HAL_RCC_GetPCLK2Freq+0x28>)
 800388a:	5ccb      	ldrb	r3, [r1, r3]
 800388c:	f003 031f 	and.w	r3, r3, #31
 8003890:	fa22 f303 	lsr.w	r3, r2, r3
#else
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2)>> RCC_CDCFGR2_CDPPRE2_Pos]) & 0x1FU));
#endif
}
 8003894:	4618      	mov	r0, r3
 8003896:	bd80      	pop	{r7, pc}
 8003898:	58024400 	.word	0x58024400
 800389c:	08007fa4 	.word	0x08007fa4

080038a0 <HAL_RCCEx_PeriphCLKConfig>:
  * (*) : Available on some STM32H7 lines only.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80038a0:	b580      	push	{r7, lr}
 80038a2:	b086      	sub	sp, #24
 80038a4:	af00      	add	r7, sp, #0
 80038a6:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 80038a8:	2300      	movs	r3, #0
 80038aa:	75fb      	strb	r3, [r7, #23]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 80038ac:	2300      	movs	r3, #0
 80038ae:	75bb      	strb	r3, [r7, #22]

  /*---------------------------- SPDIFRX configuration -------------------------------*/

  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 80038b0:	687b      	ldr	r3, [r7, #4]
 80038b2:	681b      	ldr	r3, [r3, #0]
 80038b4:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80038b8:	2b00      	cmp	r3, #0
 80038ba:	d03f      	beq.n	800393c <HAL_RCCEx_PeriphCLKConfig+0x9c>
  {

    switch(PeriphClkInit->SpdifrxClockSelection)
 80038bc:	687b      	ldr	r3, [r7, #4]
 80038be:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80038c0:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 80038c4:	d02a      	beq.n	800391c <HAL_RCCEx_PeriphCLKConfig+0x7c>
 80038c6:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 80038ca:	d824      	bhi.n	8003916 <HAL_RCCEx_PeriphCLKConfig+0x76>
 80038cc:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80038d0:	d018      	beq.n	8003904 <HAL_RCCEx_PeriphCLKConfig+0x64>
 80038d2:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80038d6:	d81e      	bhi.n	8003916 <HAL_RCCEx_PeriphCLKConfig+0x76>
 80038d8:	2b00      	cmp	r3, #0
 80038da:	d003      	beq.n	80038e4 <HAL_RCCEx_PeriphCLKConfig+0x44>
 80038dc:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80038e0:	d007      	beq.n	80038f2 <HAL_RCCEx_PeriphCLKConfig+0x52>
 80038e2:	e018      	b.n	8003916 <HAL_RCCEx_PeriphCLKConfig+0x76>
    {
    case RCC_SPDIFRXCLKSOURCE_PLL:      /* PLL is used as clock source for SPDIFRX*/
      /* Enable PLL1Q Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80038e4:	4bab      	ldr	r3, [pc, #684]	; (8003b94 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 80038e6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80038e8:	4aaa      	ldr	r2, [pc, #680]	; (8003b94 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 80038ea:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80038ee:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 80038f0:	e015      	b.n	800391e <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SPDIFRXCLKSOURCE_PLL2: /* PLL2 is used as clock source for SPDIFRX*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 80038f2:	687b      	ldr	r3, [r7, #4]
 80038f4:	3304      	adds	r3, #4
 80038f6:	2102      	movs	r1, #2
 80038f8:	4618      	mov	r0, r3
 80038fa:	f001 f9df 	bl	8004cbc <RCCEx_PLL2_Config>
 80038fe:	4603      	mov	r3, r0
 8003900:	75fb      	strb	r3, [r7, #23]

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 8003902:	e00c      	b.n	800391e <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SPDIFRXCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPDIFRX*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8003904:	687b      	ldr	r3, [r7, #4]
 8003906:	3324      	adds	r3, #36	; 0x24
 8003908:	2102      	movs	r1, #2
 800390a:	4618      	mov	r0, r3
 800390c:	f001 fa88 	bl	8004e20 <RCCEx_PLL3_Config>
 8003910:	4603      	mov	r3, r0
 8003912:	75fb      	strb	r3, [r7, #23]

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 8003914:	e003      	b.n	800391e <HAL_RCCEx_PeriphCLKConfig+0x7e>
      /* Internal OSC clock is used as source of SPDIFRX clock*/
      /* SPDIFRX clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8003916:	2301      	movs	r3, #1
 8003918:	75fb      	strb	r3, [r7, #23]
      break;
 800391a:	e000      	b.n	800391e <HAL_RCCEx_PeriphCLKConfig+0x7e>
      break;
 800391c:	bf00      	nop
    }

    if(ret == HAL_OK)
 800391e:	7dfb      	ldrb	r3, [r7, #23]
 8003920:	2b00      	cmp	r3, #0
 8003922:	d109      	bne.n	8003938 <HAL_RCCEx_PeriphCLKConfig+0x98>
    {
      /* Set the source of SPDIFRX clock*/
      __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifrxClockSelection);
 8003924:	4b9b      	ldr	r3, [pc, #620]	; (8003b94 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8003926:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003928:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800392c:	687b      	ldr	r3, [r7, #4]
 800392e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003930:	4998      	ldr	r1, [pc, #608]	; (8003b94 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8003932:	4313      	orrs	r3, r2
 8003934:	650b      	str	r3, [r1, #80]	; 0x50
 8003936:	e001      	b.n	800393c <HAL_RCCEx_PeriphCLKConfig+0x9c>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003938:	7dfb      	ldrb	r3, [r7, #23]
 800393a:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SAI1 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 800393c:	687b      	ldr	r3, [r7, #4]
 800393e:	681b      	ldr	r3, [r3, #0]
 8003940:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003944:	2b00      	cmp	r3, #0
 8003946:	d03d      	beq.n	80039c4 <HAL_RCCEx_PeriphCLKConfig+0x124>
  {
    switch(PeriphClkInit->Sai1ClockSelection)
 8003948:	687b      	ldr	r3, [r7, #4]
 800394a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800394c:	2b04      	cmp	r3, #4
 800394e:	d826      	bhi.n	800399e <HAL_RCCEx_PeriphCLKConfig+0xfe>
 8003950:	a201      	add	r2, pc, #4	; (adr r2, 8003958 <HAL_RCCEx_PeriphCLKConfig+0xb8>)
 8003952:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003956:	bf00      	nop
 8003958:	0800396d 	.word	0x0800396d
 800395c:	0800397b 	.word	0x0800397b
 8003960:	0800398d 	.word	0x0800398d
 8003964:	080039a5 	.word	0x080039a5
 8003968:	080039a5 	.word	0x080039a5
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800396c:	4b89      	ldr	r3, [pc, #548]	; (8003b94 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 800396e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003970:	4a88      	ldr	r2, [pc, #544]	; (8003b94 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8003972:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003976:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8003978:	e015      	b.n	80039a6 <HAL_RCCEx_PeriphCLKConfig+0x106>

    case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI1*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 800397a:	687b      	ldr	r3, [r7, #4]
 800397c:	3304      	adds	r3, #4
 800397e:	2100      	movs	r1, #0
 8003980:	4618      	mov	r0, r3
 8003982:	f001 f99b 	bl	8004cbc <RCCEx_PLL2_Config>
 8003986:	4603      	mov	r3, r0
 8003988:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 800398a:	e00c      	b.n	80039a6 <HAL_RCCEx_PeriphCLKConfig+0x106>

    case RCC_SAI1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI1*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 800398c:	687b      	ldr	r3, [r7, #4]
 800398e:	3324      	adds	r3, #36	; 0x24
 8003990:	2100      	movs	r1, #0
 8003992:	4618      	mov	r0, r3
 8003994:	f001 fa44 	bl	8004e20 <RCCEx_PLL3_Config>
 8003998:	4603      	mov	r3, r0
 800399a:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 800399c:	e003      	b.n	80039a6 <HAL_RCCEx_PeriphCLKConfig+0x106>
      /* HSI, HSE, or CSI oscillator is used as source of SAI1 clock */
      /* SAI1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800399e:	2301      	movs	r3, #1
 80039a0:	75fb      	strb	r3, [r7, #23]
      break;
 80039a2:	e000      	b.n	80039a6 <HAL_RCCEx_PeriphCLKConfig+0x106>
      break;
 80039a4:	bf00      	nop
    }

    if(ret == HAL_OK)
 80039a6:	7dfb      	ldrb	r3, [r7, #23]
 80039a8:	2b00      	cmp	r3, #0
 80039aa:	d109      	bne.n	80039c0 <HAL_RCCEx_PeriphCLKConfig+0x120>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 80039ac:	4b79      	ldr	r3, [pc, #484]	; (8003b94 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 80039ae:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80039b0:	f023 0207 	bic.w	r2, r3, #7
 80039b4:	687b      	ldr	r3, [r7, #4]
 80039b6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80039b8:	4976      	ldr	r1, [pc, #472]	; (8003b94 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 80039ba:	4313      	orrs	r3, r2
 80039bc:	650b      	str	r3, [r1, #80]	; 0x50
 80039be:	e001      	b.n	80039c4 <HAL_RCCEx_PeriphCLKConfig+0x124>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80039c0:	7dfb      	ldrb	r3, [r7, #23]
 80039c2:	75bb      	strb	r3, [r7, #22]
  }
#endif  /*SAI2B*/

#if defined(SAI4)
  /*---------------------------- SAI4A configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4A) == RCC_PERIPHCLK_SAI4A)
 80039c4:	687b      	ldr	r3, [r7, #4]
 80039c6:	681b      	ldr	r3, [r3, #0]
 80039c8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80039cc:	2b00      	cmp	r3, #0
 80039ce:	d051      	beq.n	8003a74 <HAL_RCCEx_PeriphCLKConfig+0x1d4>
  {
    switch(PeriphClkInit->Sai4AClockSelection)
 80039d0:	687b      	ldr	r3, [r7, #4]
 80039d2:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 80039d6:	f5b3 0f20 	cmp.w	r3, #10485760	; 0xa00000
 80039da:	d036      	beq.n	8003a4a <HAL_RCCEx_PeriphCLKConfig+0x1aa>
 80039dc:	f5b3 0f20 	cmp.w	r3, #10485760	; 0xa00000
 80039e0:	d830      	bhi.n	8003a44 <HAL_RCCEx_PeriphCLKConfig+0x1a4>
 80039e2:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 80039e6:	d032      	beq.n	8003a4e <HAL_RCCEx_PeriphCLKConfig+0x1ae>
 80039e8:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 80039ec:	d82a      	bhi.n	8003a44 <HAL_RCCEx_PeriphCLKConfig+0x1a4>
 80039ee:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 80039f2:	d02e      	beq.n	8003a52 <HAL_RCCEx_PeriphCLKConfig+0x1b2>
 80039f4:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 80039f8:	d824      	bhi.n	8003a44 <HAL_RCCEx_PeriphCLKConfig+0x1a4>
 80039fa:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80039fe:	d018      	beq.n	8003a32 <HAL_RCCEx_PeriphCLKConfig+0x192>
 8003a00:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003a04:	d81e      	bhi.n	8003a44 <HAL_RCCEx_PeriphCLKConfig+0x1a4>
 8003a06:	2b00      	cmp	r3, #0
 8003a08:	d003      	beq.n	8003a12 <HAL_RCCEx_PeriphCLKConfig+0x172>
 8003a0a:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8003a0e:	d007      	beq.n	8003a20 <HAL_RCCEx_PeriphCLKConfig+0x180>
 8003a10:	e018      	b.n	8003a44 <HAL_RCCEx_PeriphCLKConfig+0x1a4>
    {
    case RCC_SAI4ACLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003a12:	4b60      	ldr	r3, [pc, #384]	; (8003b94 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8003a14:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003a16:	4a5f      	ldr	r2, [pc, #380]	; (8003b94 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8003a18:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003a1c:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8003a1e:	e019      	b.n	8003a54 <HAL_RCCEx_PeriphCLKConfig+0x1b4>

    case RCC_SAI4ACLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8003a20:	687b      	ldr	r3, [r7, #4]
 8003a22:	3304      	adds	r3, #4
 8003a24:	2100      	movs	r1, #0
 8003a26:	4618      	mov	r0, r3
 8003a28:	f001 f948 	bl	8004cbc <RCCEx_PLL2_Config>
 8003a2c:	4603      	mov	r3, r0
 8003a2e:	75fb      	strb	r3, [r7, #23]

      /* SAI2 clock source configuration done later after clock selection check */
      break;
 8003a30:	e010      	b.n	8003a54 <HAL_RCCEx_PeriphCLKConfig+0x1b4>

    case RCC_SAI4ACLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 8003a32:	687b      	ldr	r3, [r7, #4]
 8003a34:	3324      	adds	r3, #36	; 0x24
 8003a36:	2100      	movs	r1, #0
 8003a38:	4618      	mov	r0, r3
 8003a3a:	f001 f9f1 	bl	8004e20 <RCCEx_PLL3_Config>
 8003a3e:	4603      	mov	r3, r0
 8003a40:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8003a42:	e007      	b.n	8003a54 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
      /* SAI4A clock source configuration done later after clock selection check */
      break;
#endif /* RCC_VER_3_0 */

    default:
      ret = HAL_ERROR;
 8003a44:	2301      	movs	r3, #1
 8003a46:	75fb      	strb	r3, [r7, #23]
      break;
 8003a48:	e004      	b.n	8003a54 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
      break;
 8003a4a:	bf00      	nop
 8003a4c:	e002      	b.n	8003a54 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
      break;
 8003a4e:	bf00      	nop
 8003a50:	e000      	b.n	8003a54 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
      break;
 8003a52:	bf00      	nop
    }

    if(ret == HAL_OK)
 8003a54:	7dfb      	ldrb	r3, [r7, #23]
 8003a56:	2b00      	cmp	r3, #0
 8003a58:	d10a      	bne.n	8003a70 <HAL_RCCEx_PeriphCLKConfig+0x1d0>
    {
      /* Set the source of SAI4A clock*/
      __HAL_RCC_SAI4A_CONFIG(PeriphClkInit->Sai4AClockSelection);
 8003a5a:	4b4e      	ldr	r3, [pc, #312]	; (8003b94 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8003a5c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003a5e:	f423 0260 	bic.w	r2, r3, #14680064	; 0xe00000
 8003a62:	687b      	ldr	r3, [r7, #4]
 8003a64:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 8003a68:	494a      	ldr	r1, [pc, #296]	; (8003b94 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8003a6a:	4313      	orrs	r3, r2
 8003a6c:	658b      	str	r3, [r1, #88]	; 0x58
 8003a6e:	e001      	b.n	8003a74 <HAL_RCCEx_PeriphCLKConfig+0x1d4>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003a70:	7dfb      	ldrb	r3, [r7, #23]
 8003a72:	75bb      	strb	r3, [r7, #22]
    }
  }
  /*---------------------------- SAI4B configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4B) == RCC_PERIPHCLK_SAI4B)
 8003a74:	687b      	ldr	r3, [r7, #4]
 8003a76:	681b      	ldr	r3, [r3, #0]
 8003a78:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003a7c:	2b00      	cmp	r3, #0
 8003a7e:	d051      	beq.n	8003b24 <HAL_RCCEx_PeriphCLKConfig+0x284>
  {
    switch(PeriphClkInit->Sai4BClockSelection)
 8003a80:	687b      	ldr	r3, [r7, #4]
 8003a82:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8003a86:	f1b3 6fa0 	cmp.w	r3, #83886080	; 0x5000000
 8003a8a:	d036      	beq.n	8003afa <HAL_RCCEx_PeriphCLKConfig+0x25a>
 8003a8c:	f1b3 6fa0 	cmp.w	r3, #83886080	; 0x5000000
 8003a90:	d830      	bhi.n	8003af4 <HAL_RCCEx_PeriphCLKConfig+0x254>
 8003a92:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8003a96:	d032      	beq.n	8003afe <HAL_RCCEx_PeriphCLKConfig+0x25e>
 8003a98:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8003a9c:	d82a      	bhi.n	8003af4 <HAL_RCCEx_PeriphCLKConfig+0x254>
 8003a9e:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8003aa2:	d02e      	beq.n	8003b02 <HAL_RCCEx_PeriphCLKConfig+0x262>
 8003aa4:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8003aa8:	d824      	bhi.n	8003af4 <HAL_RCCEx_PeriphCLKConfig+0x254>
 8003aaa:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8003aae:	d018      	beq.n	8003ae2 <HAL_RCCEx_PeriphCLKConfig+0x242>
 8003ab0:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8003ab4:	d81e      	bhi.n	8003af4 <HAL_RCCEx_PeriphCLKConfig+0x254>
 8003ab6:	2b00      	cmp	r3, #0
 8003ab8:	d003      	beq.n	8003ac2 <HAL_RCCEx_PeriphCLKConfig+0x222>
 8003aba:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8003abe:	d007      	beq.n	8003ad0 <HAL_RCCEx_PeriphCLKConfig+0x230>
 8003ac0:	e018      	b.n	8003af4 <HAL_RCCEx_PeriphCLKConfig+0x254>
    {
    case RCC_SAI4BCLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003ac2:	4b34      	ldr	r3, [pc, #208]	; (8003b94 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8003ac4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003ac6:	4a33      	ldr	r2, [pc, #204]	; (8003b94 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8003ac8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003acc:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8003ace:	e019      	b.n	8003b04 <HAL_RCCEx_PeriphCLKConfig+0x264>

    case RCC_SAI4BCLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8003ad0:	687b      	ldr	r3, [r7, #4]
 8003ad2:	3304      	adds	r3, #4
 8003ad4:	2100      	movs	r1, #0
 8003ad6:	4618      	mov	r0, r3
 8003ad8:	f001 f8f0 	bl	8004cbc <RCCEx_PLL2_Config>
 8003adc:	4603      	mov	r3, r0
 8003ade:	75fb      	strb	r3, [r7, #23]

      /* SAI2 clock source configuration done later after clock selection check */
      break;
 8003ae0:	e010      	b.n	8003b04 <HAL_RCCEx_PeriphCLKConfig+0x264>

    case RCC_SAI4BCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8003ae2:	687b      	ldr	r3, [r7, #4]
 8003ae4:	3324      	adds	r3, #36	; 0x24
 8003ae6:	2100      	movs	r1, #0
 8003ae8:	4618      	mov	r0, r3
 8003aea:	f001 f999 	bl	8004e20 <RCCEx_PLL3_Config>
 8003aee:	4603      	mov	r3, r0
 8003af0:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8003af2:	e007      	b.n	8003b04 <HAL_RCCEx_PeriphCLKConfig+0x264>
      /* SAI4B clock source configuration done later after clock selection check */
      break;
#endif /* RCC_VER_3_0 */

    default:
      ret = HAL_ERROR;
 8003af4:	2301      	movs	r3, #1
 8003af6:	75fb      	strb	r3, [r7, #23]
      break;
 8003af8:	e004      	b.n	8003b04 <HAL_RCCEx_PeriphCLKConfig+0x264>
      break;
 8003afa:	bf00      	nop
 8003afc:	e002      	b.n	8003b04 <HAL_RCCEx_PeriphCLKConfig+0x264>
      break;
 8003afe:	bf00      	nop
 8003b00:	e000      	b.n	8003b04 <HAL_RCCEx_PeriphCLKConfig+0x264>
      break;
 8003b02:	bf00      	nop
    }

    if(ret == HAL_OK)
 8003b04:	7dfb      	ldrb	r3, [r7, #23]
 8003b06:	2b00      	cmp	r3, #0
 8003b08:	d10a      	bne.n	8003b20 <HAL_RCCEx_PeriphCLKConfig+0x280>
    {
      /* Set the source of SAI4B clock*/
      __HAL_RCC_SAI4B_CONFIG(PeriphClkInit->Sai4BClockSelection);
 8003b0a:	4b22      	ldr	r3, [pc, #136]	; (8003b94 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8003b0c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003b0e:	f023 62e0 	bic.w	r2, r3, #117440512	; 0x7000000
 8003b12:	687b      	ldr	r3, [r7, #4]
 8003b14:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8003b18:	491e      	ldr	r1, [pc, #120]	; (8003b94 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8003b1a:	4313      	orrs	r3, r2
 8003b1c:	658b      	str	r3, [r1, #88]	; 0x58
 8003b1e:	e001      	b.n	8003b24 <HAL_RCCEx_PeriphCLKConfig+0x284>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003b20:	7dfb      	ldrb	r3, [r7, #23]
 8003b22:	75bb      	strb	r3, [r7, #22]
  }
#endif  /*QUADSPI*/

#if defined(OCTOSPI1) || defined(OCTOSPI2)
  /*---------------------------- OCTOSPI configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_OSPI) == RCC_PERIPHCLK_OSPI)
 8003b24:	687b      	ldr	r3, [r7, #4]
 8003b26:	681b      	ldr	r3, [r3, #0]
 8003b28:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003b2c:	2b00      	cmp	r3, #0
 8003b2e:	d035      	beq.n	8003b9c <HAL_RCCEx_PeriphCLKConfig+0x2fc>
  {
    switch(PeriphClkInit->OspiClockSelection)
 8003b30:	687b      	ldr	r3, [r7, #4]
 8003b32:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003b34:	2b30      	cmp	r3, #48	; 0x30
 8003b36:	d01c      	beq.n	8003b72 <HAL_RCCEx_PeriphCLKConfig+0x2d2>
 8003b38:	2b30      	cmp	r3, #48	; 0x30
 8003b3a:	d817      	bhi.n	8003b6c <HAL_RCCEx_PeriphCLKConfig+0x2cc>
 8003b3c:	2b20      	cmp	r3, #32
 8003b3e:	d00c      	beq.n	8003b5a <HAL_RCCEx_PeriphCLKConfig+0x2ba>
 8003b40:	2b20      	cmp	r3, #32
 8003b42:	d813      	bhi.n	8003b6c <HAL_RCCEx_PeriphCLKConfig+0x2cc>
 8003b44:	2b00      	cmp	r3, #0
 8003b46:	d016      	beq.n	8003b76 <HAL_RCCEx_PeriphCLKConfig+0x2d6>
 8003b48:	2b10      	cmp	r3, #16
 8003b4a:	d10f      	bne.n	8003b6c <HAL_RCCEx_PeriphCLKConfig+0x2cc>
    {
    case RCC_OSPICLKSOURCE_PLL:      /* PLL is used as clock source for OSPI*/
      /* Enable OSPI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003b4c:	4b11      	ldr	r3, [pc, #68]	; (8003b94 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8003b4e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003b50:	4a10      	ldr	r2, [pc, #64]	; (8003b94 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8003b52:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003b56:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* OSPI clock source configuration done later after clock selection check */
      break;
 8003b58:	e00e      	b.n	8003b78 <HAL_RCCEx_PeriphCLKConfig+0x2d8>

    case RCC_OSPICLKSOURCE_PLL2: /* PLL2 is used as clock source for OSPI*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 8003b5a:	687b      	ldr	r3, [r7, #4]
 8003b5c:	3304      	adds	r3, #4
 8003b5e:	2102      	movs	r1, #2
 8003b60:	4618      	mov	r0, r3
 8003b62:	f001 f8ab 	bl	8004cbc <RCCEx_PLL2_Config>
 8003b66:	4603      	mov	r3, r0
 8003b68:	75fb      	strb	r3, [r7, #23]

      /* OSPI clock source configuration done later after clock selection check */
      break;
 8003b6a:	e005      	b.n	8003b78 <HAL_RCCEx_PeriphCLKConfig+0x2d8>
    case RCC_OSPICLKSOURCE_HCLK:
      /* HCLK clock selected as OSPI kernel peripheral clock */
      break;

    default:
      ret = HAL_ERROR;
 8003b6c:	2301      	movs	r3, #1
 8003b6e:	75fb      	strb	r3, [r7, #23]
      break;
 8003b70:	e002      	b.n	8003b78 <HAL_RCCEx_PeriphCLKConfig+0x2d8>
      break;
 8003b72:	bf00      	nop
 8003b74:	e000      	b.n	8003b78 <HAL_RCCEx_PeriphCLKConfig+0x2d8>
      break;
 8003b76:	bf00      	nop
    }

    if(ret == HAL_OK)
 8003b78:	7dfb      	ldrb	r3, [r7, #23]
 8003b7a:	2b00      	cmp	r3, #0
 8003b7c:	d10c      	bne.n	8003b98 <HAL_RCCEx_PeriphCLKConfig+0x2f8>
    {
      /* Set the source of OSPI clock*/
      __HAL_RCC_OSPI_CONFIG(PeriphClkInit->OspiClockSelection);
 8003b7e:	4b05      	ldr	r3, [pc, #20]	; (8003b94 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8003b80:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003b82:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8003b86:	687b      	ldr	r3, [r7, #4]
 8003b88:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003b8a:	4902      	ldr	r1, [pc, #8]	; (8003b94 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8003b8c:	4313      	orrs	r3, r2
 8003b8e:	64cb      	str	r3, [r1, #76]	; 0x4c
 8003b90:	e004      	b.n	8003b9c <HAL_RCCEx_PeriphCLKConfig+0x2fc>
 8003b92:	bf00      	nop
 8003b94:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003b98:	7dfb      	ldrb	r3, [r7, #23]
 8003b9a:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif  /*OCTOSPI*/

  /*---------------------------- SPI1/2/3 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI123) == RCC_PERIPHCLK_SPI123)
 8003b9c:	687b      	ldr	r3, [r7, #4]
 8003b9e:	681b      	ldr	r3, [r3, #0]
 8003ba0:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8003ba4:	2b00      	cmp	r3, #0
 8003ba6:	d047      	beq.n	8003c38 <HAL_RCCEx_PeriphCLKConfig+0x398>
  {
    switch(PeriphClkInit->Spi123ClockSelection)
 8003ba8:	687b      	ldr	r3, [r7, #4]
 8003baa:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003bac:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8003bb0:	d030      	beq.n	8003c14 <HAL_RCCEx_PeriphCLKConfig+0x374>
 8003bb2:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8003bb6:	d82a      	bhi.n	8003c0e <HAL_RCCEx_PeriphCLKConfig+0x36e>
 8003bb8:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8003bbc:	d02c      	beq.n	8003c18 <HAL_RCCEx_PeriphCLKConfig+0x378>
 8003bbe:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8003bc2:	d824      	bhi.n	8003c0e <HAL_RCCEx_PeriphCLKConfig+0x36e>
 8003bc4:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003bc8:	d018      	beq.n	8003bfc <HAL_RCCEx_PeriphCLKConfig+0x35c>
 8003bca:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003bce:	d81e      	bhi.n	8003c0e <HAL_RCCEx_PeriphCLKConfig+0x36e>
 8003bd0:	2b00      	cmp	r3, #0
 8003bd2:	d003      	beq.n	8003bdc <HAL_RCCEx_PeriphCLKConfig+0x33c>
 8003bd4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003bd8:	d007      	beq.n	8003bea <HAL_RCCEx_PeriphCLKConfig+0x34a>
 8003bda:	e018      	b.n	8003c0e <HAL_RCCEx_PeriphCLKConfig+0x36e>
    {
    case RCC_SPI123CLKSOURCE_PLL:      /* PLL is used as clock source for SPI1/2/3 */
      /* Enable SPI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003bdc:	4bac      	ldr	r3, [pc, #688]	; (8003e90 <HAL_RCCEx_PeriphCLKConfig+0x5f0>)
 8003bde:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003be0:	4aab      	ldr	r2, [pc, #684]	; (8003e90 <HAL_RCCEx_PeriphCLKConfig+0x5f0>)
 8003be2:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003be6:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 8003be8:	e017      	b.n	8003c1a <HAL_RCCEx_PeriphCLKConfig+0x37a>

    case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI1/2/3 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8003bea:	687b      	ldr	r3, [r7, #4]
 8003bec:	3304      	adds	r3, #4
 8003bee:	2100      	movs	r1, #0
 8003bf0:	4618      	mov	r0, r3
 8003bf2:	f001 f863 	bl	8004cbc <RCCEx_PLL2_Config>
 8003bf6:	4603      	mov	r3, r0
 8003bf8:	75fb      	strb	r3, [r7, #23]

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 8003bfa:	e00e      	b.n	8003c1a <HAL_RCCEx_PeriphCLKConfig+0x37a>

    case RCC_SPI123CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI1/2/3 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 8003bfc:	687b      	ldr	r3, [r7, #4]
 8003bfe:	3324      	adds	r3, #36	; 0x24
 8003c00:	2100      	movs	r1, #0
 8003c02:	4618      	mov	r0, r3
 8003c04:	f001 f90c 	bl	8004e20 <RCCEx_PLL3_Config>
 8003c08:	4603      	mov	r3, r0
 8003c0a:	75fb      	strb	r3, [r7, #23]

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 8003c0c:	e005      	b.n	8003c1a <HAL_RCCEx_PeriphCLKConfig+0x37a>
      /* HSI, HSE, or CSI oscillator is used as source of SPI1/2/3 clock */
      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8003c0e:	2301      	movs	r3, #1
 8003c10:	75fb      	strb	r3, [r7, #23]
      break;
 8003c12:	e002      	b.n	8003c1a <HAL_RCCEx_PeriphCLKConfig+0x37a>
      break;
 8003c14:	bf00      	nop
 8003c16:	e000      	b.n	8003c1a <HAL_RCCEx_PeriphCLKConfig+0x37a>
      break;
 8003c18:	bf00      	nop
    }

    if(ret == HAL_OK)
 8003c1a:	7dfb      	ldrb	r3, [r7, #23]
 8003c1c:	2b00      	cmp	r3, #0
 8003c1e:	d109      	bne.n	8003c34 <HAL_RCCEx_PeriphCLKConfig+0x394>
    {
      /* Set the source of SPI1/2/3 clock*/
      __HAL_RCC_SPI123_CONFIG(PeriphClkInit->Spi123ClockSelection);
 8003c20:	4b9b      	ldr	r3, [pc, #620]	; (8003e90 <HAL_RCCEx_PeriphCLKConfig+0x5f0>)
 8003c22:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003c24:	f423 42e0 	bic.w	r2, r3, #28672	; 0x7000
 8003c28:	687b      	ldr	r3, [r7, #4]
 8003c2a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003c2c:	4998      	ldr	r1, [pc, #608]	; (8003e90 <HAL_RCCEx_PeriphCLKConfig+0x5f0>)
 8003c2e:	4313      	orrs	r3, r2
 8003c30:	650b      	str	r3, [r1, #80]	; 0x50
 8003c32:	e001      	b.n	8003c38 <HAL_RCCEx_PeriphCLKConfig+0x398>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003c34:	7dfb      	ldrb	r3, [r7, #23]
 8003c36:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SPI4/5 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) == RCC_PERIPHCLK_SPI45)
 8003c38:	687b      	ldr	r3, [r7, #4]
 8003c3a:	681b      	ldr	r3, [r3, #0]
 8003c3c:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8003c40:	2b00      	cmp	r3, #0
 8003c42:	d049      	beq.n	8003cd8 <HAL_RCCEx_PeriphCLKConfig+0x438>
  {
    switch(PeriphClkInit->Spi45ClockSelection)
 8003c44:	687b      	ldr	r3, [r7, #4]
 8003c46:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003c48:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8003c4c:	d02e      	beq.n	8003cac <HAL_RCCEx_PeriphCLKConfig+0x40c>
 8003c4e:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8003c52:	d828      	bhi.n	8003ca6 <HAL_RCCEx_PeriphCLKConfig+0x406>
 8003c54:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8003c58:	d02a      	beq.n	8003cb0 <HAL_RCCEx_PeriphCLKConfig+0x410>
 8003c5a:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8003c5e:	d822      	bhi.n	8003ca6 <HAL_RCCEx_PeriphCLKConfig+0x406>
 8003c60:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8003c64:	d026      	beq.n	8003cb4 <HAL_RCCEx_PeriphCLKConfig+0x414>
 8003c66:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8003c6a:	d81c      	bhi.n	8003ca6 <HAL_RCCEx_PeriphCLKConfig+0x406>
 8003c6c:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8003c70:	d010      	beq.n	8003c94 <HAL_RCCEx_PeriphCLKConfig+0x3f4>
 8003c72:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8003c76:	d816      	bhi.n	8003ca6 <HAL_RCCEx_PeriphCLKConfig+0x406>
 8003c78:	2b00      	cmp	r3, #0
 8003c7a:	d01d      	beq.n	8003cb8 <HAL_RCCEx_PeriphCLKConfig+0x418>
 8003c7c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003c80:	d111      	bne.n	8003ca6 <HAL_RCCEx_PeriphCLKConfig+0x406>
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;

    case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI4/5 */

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8003c82:	687b      	ldr	r3, [r7, #4]
 8003c84:	3304      	adds	r3, #4
 8003c86:	2101      	movs	r1, #1
 8003c88:	4618      	mov	r0, r3
 8003c8a:	f001 f817 	bl	8004cbc <RCCEx_PLL2_Config>
 8003c8e:	4603      	mov	r3, r0
 8003c90:	75fb      	strb	r3, [r7, #23]

      /* SPI4/5 clock source configuration done later after clock selection check */
      break;
 8003c92:	e012      	b.n	8003cba <HAL_RCCEx_PeriphCLKConfig+0x41a>
    case RCC_SPI45CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI4/5 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8003c94:	687b      	ldr	r3, [r7, #4]
 8003c96:	3324      	adds	r3, #36	; 0x24
 8003c98:	2101      	movs	r1, #1
 8003c9a:	4618      	mov	r0, r3
 8003c9c:	f001 f8c0 	bl	8004e20 <RCCEx_PLL3_Config>
 8003ca0:	4603      	mov	r3, r0
 8003ca2:	75fb      	strb	r3, [r7, #23]
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;
 8003ca4:	e009      	b.n	8003cba <HAL_RCCEx_PeriphCLKConfig+0x41a>
      /* HSE,  oscillator is used as source of SPI4/5 clock */
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8003ca6:	2301      	movs	r3, #1
 8003ca8:	75fb      	strb	r3, [r7, #23]
      break;
 8003caa:	e006      	b.n	8003cba <HAL_RCCEx_PeriphCLKConfig+0x41a>
      break;
 8003cac:	bf00      	nop
 8003cae:	e004      	b.n	8003cba <HAL_RCCEx_PeriphCLKConfig+0x41a>
      break;
 8003cb0:	bf00      	nop
 8003cb2:	e002      	b.n	8003cba <HAL_RCCEx_PeriphCLKConfig+0x41a>
      break;
 8003cb4:	bf00      	nop
 8003cb6:	e000      	b.n	8003cba <HAL_RCCEx_PeriphCLKConfig+0x41a>
      break;
 8003cb8:	bf00      	nop
    }

    if(ret == HAL_OK)
 8003cba:	7dfb      	ldrb	r3, [r7, #23]
 8003cbc:	2b00      	cmp	r3, #0
 8003cbe:	d109      	bne.n	8003cd4 <HAL_RCCEx_PeriphCLKConfig+0x434>
    {
      /* Set the source of SPI4/5 clock*/
      __HAL_RCC_SPI45_CONFIG(PeriphClkInit->Spi45ClockSelection);
 8003cc0:	4b73      	ldr	r3, [pc, #460]	; (8003e90 <HAL_RCCEx_PeriphCLKConfig+0x5f0>)
 8003cc2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003cc4:	f423 22e0 	bic.w	r2, r3, #458752	; 0x70000
 8003cc8:	687b      	ldr	r3, [r7, #4]
 8003cca:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003ccc:	4970      	ldr	r1, [pc, #448]	; (8003e90 <HAL_RCCEx_PeriphCLKConfig+0x5f0>)
 8003cce:	4313      	orrs	r3, r2
 8003cd0:	650b      	str	r3, [r1, #80]	; 0x50
 8003cd2:	e001      	b.n	8003cd8 <HAL_RCCEx_PeriphCLKConfig+0x438>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003cd4:	7dfb      	ldrb	r3, [r7, #23]
 8003cd6:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SPI6 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 8003cd8:	687b      	ldr	r3, [r7, #4]
 8003cda:	681b      	ldr	r3, [r3, #0]
 8003cdc:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003ce0:	2b00      	cmp	r3, #0
 8003ce2:	d04b      	beq.n	8003d7c <HAL_RCCEx_PeriphCLKConfig+0x4dc>
  {
    switch(PeriphClkInit->Spi6ClockSelection)
 8003ce4:	687b      	ldr	r3, [r7, #4]
 8003ce6:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 8003cea:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8003cee:	d02e      	beq.n	8003d4e <HAL_RCCEx_PeriphCLKConfig+0x4ae>
 8003cf0:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8003cf4:	d828      	bhi.n	8003d48 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
 8003cf6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003cfa:	d02a      	beq.n	8003d52 <HAL_RCCEx_PeriphCLKConfig+0x4b2>
 8003cfc:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003d00:	d822      	bhi.n	8003d48 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
 8003d02:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8003d06:	d026      	beq.n	8003d56 <HAL_RCCEx_PeriphCLKConfig+0x4b6>
 8003d08:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8003d0c:	d81c      	bhi.n	8003d48 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
 8003d0e:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8003d12:	d010      	beq.n	8003d36 <HAL_RCCEx_PeriphCLKConfig+0x496>
 8003d14:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8003d18:	d816      	bhi.n	8003d48 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
 8003d1a:	2b00      	cmp	r3, #0
 8003d1c:	d01d      	beq.n	8003d5a <HAL_RCCEx_PeriphCLKConfig+0x4ba>
 8003d1e:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8003d22:	d111      	bne.n	8003d48 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
      /* SPI6 clock source configuration done later after clock selection check */
      break;

    case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI6*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8003d24:	687b      	ldr	r3, [r7, #4]
 8003d26:	3304      	adds	r3, #4
 8003d28:	2101      	movs	r1, #1
 8003d2a:	4618      	mov	r0, r3
 8003d2c:	f000 ffc6 	bl	8004cbc <RCCEx_PLL2_Config>
 8003d30:	4603      	mov	r3, r0
 8003d32:	75fb      	strb	r3, [r7, #23]

      /* SPI6 clock source configuration done later after clock selection check */
      break;
 8003d34:	e012      	b.n	8003d5c <HAL_RCCEx_PeriphCLKConfig+0x4bc>
    case RCC_SPI6CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI6*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8003d36:	687b      	ldr	r3, [r7, #4]
 8003d38:	3324      	adds	r3, #36	; 0x24
 8003d3a:	2101      	movs	r1, #1
 8003d3c:	4618      	mov	r0, r3
 8003d3e:	f001 f86f 	bl	8004e20 <RCCEx_PLL3_Config>
 8003d42:	4603      	mov	r3, r0
 8003d44:	75fb      	strb	r3, [r7, #23]
      /* SPI6 clock source configuration done later after clock selection check */
      break;
 8003d46:	e009      	b.n	8003d5c <HAL_RCCEx_PeriphCLKConfig+0x4bc>
      /* SPI6 clock source configuration done later after clock selection check */
      break;
#endif

    default:
      ret = HAL_ERROR;
 8003d48:	2301      	movs	r3, #1
 8003d4a:	75fb      	strb	r3, [r7, #23]
      break;
 8003d4c:	e006      	b.n	8003d5c <HAL_RCCEx_PeriphCLKConfig+0x4bc>
      break;
 8003d4e:	bf00      	nop
 8003d50:	e004      	b.n	8003d5c <HAL_RCCEx_PeriphCLKConfig+0x4bc>
      break;
 8003d52:	bf00      	nop
 8003d54:	e002      	b.n	8003d5c <HAL_RCCEx_PeriphCLKConfig+0x4bc>
      break;
 8003d56:	bf00      	nop
 8003d58:	e000      	b.n	8003d5c <HAL_RCCEx_PeriphCLKConfig+0x4bc>
      break;
 8003d5a:	bf00      	nop
    }

    if(ret == HAL_OK)
 8003d5c:	7dfb      	ldrb	r3, [r7, #23]
 8003d5e:	2b00      	cmp	r3, #0
 8003d60:	d10a      	bne.n	8003d78 <HAL_RCCEx_PeriphCLKConfig+0x4d8>
    {
      /* Set the source of SPI6 clock*/
      __HAL_RCC_SPI6_CONFIG(PeriphClkInit->Spi6ClockSelection);
 8003d62:	4b4b      	ldr	r3, [pc, #300]	; (8003e90 <HAL_RCCEx_PeriphCLKConfig+0x5f0>)
 8003d64:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003d66:	f023 42e0 	bic.w	r2, r3, #1879048192	; 0x70000000
 8003d6a:	687b      	ldr	r3, [r7, #4]
 8003d6c:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 8003d70:	4947      	ldr	r1, [pc, #284]	; (8003e90 <HAL_RCCEx_PeriphCLKConfig+0x5f0>)
 8003d72:	4313      	orrs	r3, r2
 8003d74:	658b      	str	r3, [r1, #88]	; 0x58
 8003d76:	e001      	b.n	8003d7c <HAL_RCCEx_PeriphCLKConfig+0x4dc>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003d78:	7dfb      	ldrb	r3, [r7, #23]
 8003d7a:	75bb      	strb	r3, [r7, #22]
  }
#endif /*DSI*/

#if defined(FDCAN1) || defined(FDCAN2)
  /*---------------------------- FDCAN configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8003d7c:	687b      	ldr	r3, [r7, #4]
 8003d7e:	681b      	ldr	r3, [r3, #0]
 8003d80:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8003d84:	2b00      	cmp	r3, #0
 8003d86:	d02f      	beq.n	8003de8 <HAL_RCCEx_PeriphCLKConfig+0x548>
  {
    switch(PeriphClkInit->FdcanClockSelection)
 8003d88:	687b      	ldr	r3, [r7, #4]
 8003d8a:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8003d8c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8003d90:	d00e      	beq.n	8003db0 <HAL_RCCEx_PeriphCLKConfig+0x510>
 8003d92:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8003d96:	d814      	bhi.n	8003dc2 <HAL_RCCEx_PeriphCLKConfig+0x522>
 8003d98:	2b00      	cmp	r3, #0
 8003d9a:	d015      	beq.n	8003dc8 <HAL_RCCEx_PeriphCLKConfig+0x528>
 8003d9c:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8003da0:	d10f      	bne.n	8003dc2 <HAL_RCCEx_PeriphCLKConfig+0x522>
    {
    case RCC_FDCANCLKSOURCE_PLL:      /* PLL is used as clock source for FDCAN*/
      /* Enable FDCAN Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003da2:	4b3b      	ldr	r3, [pc, #236]	; (8003e90 <HAL_RCCEx_PeriphCLKConfig+0x5f0>)
 8003da4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003da6:	4a3a      	ldr	r2, [pc, #232]	; (8003e90 <HAL_RCCEx_PeriphCLKConfig+0x5f0>)
 8003da8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003dac:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* FDCAN clock source configuration done later after clock selection check */
      break;
 8003dae:	e00c      	b.n	8003dca <HAL_RCCEx_PeriphCLKConfig+0x52a>

    case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is used as clock source for FDCAN*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8003db0:	687b      	ldr	r3, [r7, #4]
 8003db2:	3304      	adds	r3, #4
 8003db4:	2101      	movs	r1, #1
 8003db6:	4618      	mov	r0, r3
 8003db8:	f000 ff80 	bl	8004cbc <RCCEx_PLL2_Config>
 8003dbc:	4603      	mov	r3, r0
 8003dbe:	75fb      	strb	r3, [r7, #23]

      /* FDCAN clock source configuration done later after clock selection check */
      break;
 8003dc0:	e003      	b.n	8003dca <HAL_RCCEx_PeriphCLKConfig+0x52a>
      /* HSE is used as clock source for FDCAN*/
      /* FDCAN clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8003dc2:	2301      	movs	r3, #1
 8003dc4:	75fb      	strb	r3, [r7, #23]
      break;
 8003dc6:	e000      	b.n	8003dca <HAL_RCCEx_PeriphCLKConfig+0x52a>
      break;
 8003dc8:	bf00      	nop
    }

    if(ret == HAL_OK)
 8003dca:	7dfb      	ldrb	r3, [r7, #23]
 8003dcc:	2b00      	cmp	r3, #0
 8003dce:	d109      	bne.n	8003de4 <HAL_RCCEx_PeriphCLKConfig+0x544>
    {
      /* Set the source of FDCAN clock*/
      __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 8003dd0:	4b2f      	ldr	r3, [pc, #188]	; (8003e90 <HAL_RCCEx_PeriphCLKConfig+0x5f0>)
 8003dd2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003dd4:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8003dd8:	687b      	ldr	r3, [r7, #4]
 8003dda:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8003ddc:	492c      	ldr	r1, [pc, #176]	; (8003e90 <HAL_RCCEx_PeriphCLKConfig+0x5f0>)
 8003dde:	4313      	orrs	r3, r2
 8003de0:	650b      	str	r3, [r1, #80]	; 0x50
 8003de2:	e001      	b.n	8003de8 <HAL_RCCEx_PeriphCLKConfig+0x548>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003de4:	7dfb      	ldrb	r3, [r7, #23]
 8003de6:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif /*FDCAN1 || FDCAN2*/

  /*---------------------------- FMC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
 8003de8:	687b      	ldr	r3, [r7, #4]
 8003dea:	681b      	ldr	r3, [r3, #0]
 8003dec:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8003df0:	2b00      	cmp	r3, #0
 8003df2:	d032      	beq.n	8003e5a <HAL_RCCEx_PeriphCLKConfig+0x5ba>
  {
    switch(PeriphClkInit->FmcClockSelection)
 8003df4:	687b      	ldr	r3, [r7, #4]
 8003df6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003df8:	2b03      	cmp	r3, #3
 8003dfa:	d81b      	bhi.n	8003e34 <HAL_RCCEx_PeriphCLKConfig+0x594>
 8003dfc:	a201      	add	r2, pc, #4	; (adr r2, 8003e04 <HAL_RCCEx_PeriphCLKConfig+0x564>)
 8003dfe:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003e02:	bf00      	nop
 8003e04:	08003e3b 	.word	0x08003e3b
 8003e08:	08003e15 	.word	0x08003e15
 8003e0c:	08003e23 	.word	0x08003e23
 8003e10:	08003e3b 	.word	0x08003e3b
    {
    case RCC_FMCCLKSOURCE_PLL:      /* PLL is used as clock source for FMC*/
      /* Enable FMC Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003e14:	4b1e      	ldr	r3, [pc, #120]	; (8003e90 <HAL_RCCEx_PeriphCLKConfig+0x5f0>)
 8003e16:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003e18:	4a1d      	ldr	r2, [pc, #116]	; (8003e90 <HAL_RCCEx_PeriphCLKConfig+0x5f0>)
 8003e1a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003e1e:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* FMC clock source configuration done later after clock selection check */
      break;
 8003e20:	e00c      	b.n	8003e3c <HAL_RCCEx_PeriphCLKConfig+0x59c>

    case RCC_FMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for FMC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 8003e22:	687b      	ldr	r3, [r7, #4]
 8003e24:	3304      	adds	r3, #4
 8003e26:	2102      	movs	r1, #2
 8003e28:	4618      	mov	r0, r3
 8003e2a:	f000 ff47 	bl	8004cbc <RCCEx_PLL2_Config>
 8003e2e:	4603      	mov	r3, r0
 8003e30:	75fb      	strb	r3, [r7, #23]

      /* FMC clock source configuration done later after clock selection check */
      break;
 8003e32:	e003      	b.n	8003e3c <HAL_RCCEx_PeriphCLKConfig+0x59c>
    case RCC_FMCCLKSOURCE_HCLK:
      /* D1/CD HCLK  clock selected as FMC kernel peripheral clock */
      break;

    default:
      ret = HAL_ERROR;
 8003e34:	2301      	movs	r3, #1
 8003e36:	75fb      	strb	r3, [r7, #23]
      break;
 8003e38:	e000      	b.n	8003e3c <HAL_RCCEx_PeriphCLKConfig+0x59c>
      break;
 8003e3a:	bf00      	nop
    }

    if(ret == HAL_OK)
 8003e3c:	7dfb      	ldrb	r3, [r7, #23]
 8003e3e:	2b00      	cmp	r3, #0
 8003e40:	d109      	bne.n	8003e56 <HAL_RCCEx_PeriphCLKConfig+0x5b6>
    {
      /* Set the source of FMC clock*/
      __HAL_RCC_FMC_CONFIG(PeriphClkInit->FmcClockSelection);
 8003e42:	4b13      	ldr	r3, [pc, #76]	; (8003e90 <HAL_RCCEx_PeriphCLKConfig+0x5f0>)
 8003e44:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003e46:	f023 0203 	bic.w	r2, r3, #3
 8003e4a:	687b      	ldr	r3, [r7, #4]
 8003e4c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003e4e:	4910      	ldr	r1, [pc, #64]	; (8003e90 <HAL_RCCEx_PeriphCLKConfig+0x5f0>)
 8003e50:	4313      	orrs	r3, r2
 8003e52:	64cb      	str	r3, [r1, #76]	; 0x4c
 8003e54:	e001      	b.n	8003e5a <HAL_RCCEx_PeriphCLKConfig+0x5ba>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003e56:	7dfb      	ldrb	r3, [r7, #23]
 8003e58:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8003e5a:	687b      	ldr	r3, [r7, #4]
 8003e5c:	681b      	ldr	r3, [r3, #0]
 8003e5e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003e62:	2b00      	cmp	r3, #0
 8003e64:	f000 808a 	beq.w	8003f7c <HAL_RCCEx_PeriphCLKConfig+0x6dc>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8003e68:	4b0a      	ldr	r3, [pc, #40]	; (8003e94 <HAL_RCCEx_PeriphCLKConfig+0x5f4>)
 8003e6a:	681b      	ldr	r3, [r3, #0]
 8003e6c:	4a09      	ldr	r2, [pc, #36]	; (8003e94 <HAL_RCCEx_PeriphCLKConfig+0x5f4>)
 8003e6e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003e72:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8003e74:	f7fd fb3c 	bl	80014f0 <HAL_GetTick>
 8003e78:	6138      	str	r0, [r7, #16]

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8003e7a:	e00d      	b.n	8003e98 <HAL_RCCEx_PeriphCLKConfig+0x5f8>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003e7c:	f7fd fb38 	bl	80014f0 <HAL_GetTick>
 8003e80:	4602      	mov	r2, r0
 8003e82:	693b      	ldr	r3, [r7, #16]
 8003e84:	1ad3      	subs	r3, r2, r3
 8003e86:	2b64      	cmp	r3, #100	; 0x64
 8003e88:	d906      	bls.n	8003e98 <HAL_RCCEx_PeriphCLKConfig+0x5f8>
      {
        ret = HAL_TIMEOUT;
 8003e8a:	2303      	movs	r3, #3
 8003e8c:	75fb      	strb	r3, [r7, #23]
        break;
 8003e8e:	e009      	b.n	8003ea4 <HAL_RCCEx_PeriphCLKConfig+0x604>
 8003e90:	58024400 	.word	0x58024400
 8003e94:	58024800 	.word	0x58024800
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8003e98:	4bb9      	ldr	r3, [pc, #740]	; (8004180 <HAL_RCCEx_PeriphCLKConfig+0x8e0>)
 8003e9a:	681b      	ldr	r3, [r3, #0]
 8003e9c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003ea0:	2b00      	cmp	r3, #0
 8003ea2:	d0eb      	beq.n	8003e7c <HAL_RCCEx_PeriphCLKConfig+0x5dc>
      }
    }

    if(ret == HAL_OK)
 8003ea4:	7dfb      	ldrb	r3, [r7, #23]
 8003ea6:	2b00      	cmp	r3, #0
 8003ea8:	d166      	bne.n	8003f78 <HAL_RCCEx_PeriphCLKConfig+0x6d8>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if((RCC->BDCR & RCC_BDCR_RTCSEL) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL))
 8003eaa:	4bb6      	ldr	r3, [pc, #728]	; (8004184 <HAL_RCCEx_PeriphCLKConfig+0x8e4>)
 8003eac:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8003eae:	687b      	ldr	r3, [r7, #4]
 8003eb0:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 8003eb4:	4053      	eors	r3, r2
 8003eb6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003eba:	2b00      	cmp	r3, #0
 8003ebc:	d013      	beq.n	8003ee6 <HAL_RCCEx_PeriphCLKConfig+0x646>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8003ebe:	4bb1      	ldr	r3, [pc, #708]	; (8004184 <HAL_RCCEx_PeriphCLKConfig+0x8e4>)
 8003ec0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003ec2:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003ec6:	60fb      	str	r3, [r7, #12]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8003ec8:	4bae      	ldr	r3, [pc, #696]	; (8004184 <HAL_RCCEx_PeriphCLKConfig+0x8e4>)
 8003eca:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003ecc:	4aad      	ldr	r2, [pc, #692]	; (8004184 <HAL_RCCEx_PeriphCLKConfig+0x8e4>)
 8003ece:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003ed2:	6713      	str	r3, [r2, #112]	; 0x70
        __HAL_RCC_BACKUPRESET_RELEASE();
 8003ed4:	4bab      	ldr	r3, [pc, #684]	; (8004184 <HAL_RCCEx_PeriphCLKConfig+0x8e4>)
 8003ed6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003ed8:	4aaa      	ldr	r2, [pc, #680]	; (8004184 <HAL_RCCEx_PeriphCLKConfig+0x8e4>)
 8003eda:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003ede:	6713      	str	r3, [r2, #112]	; 0x70
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpreg;
 8003ee0:	4aa8      	ldr	r2, [pc, #672]	; (8004184 <HAL_RCCEx_PeriphCLKConfig+0x8e4>)
 8003ee2:	68fb      	ldr	r3, [r7, #12]
 8003ee4:	6713      	str	r3, [r2, #112]	; 0x70
      }

      /* If LSE is selected as RTC clock source (and enabled prior to Backup Domain reset), wait for LSE reactivation */
      if(PeriphClkInit->RTCClockSelection == RCC_RTCCLKSOURCE_LSE)
 8003ee6:	687b      	ldr	r3, [r7, #4]
 8003ee8:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 8003eec:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003ef0:	d115      	bne.n	8003f1e <HAL_RCCEx_PeriphCLKConfig+0x67e>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003ef2:	f7fd fafd 	bl	80014f0 <HAL_GetTick>
 8003ef6:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8003ef8:	e00b      	b.n	8003f12 <HAL_RCCEx_PeriphCLKConfig+0x672>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003efa:	f7fd faf9 	bl	80014f0 <HAL_GetTick>
 8003efe:	4602      	mov	r2, r0
 8003f00:	693b      	ldr	r3, [r7, #16]
 8003f02:	1ad3      	subs	r3, r2, r3
 8003f04:	f241 3288 	movw	r2, #5000	; 0x1388
 8003f08:	4293      	cmp	r3, r2
 8003f0a:	d902      	bls.n	8003f12 <HAL_RCCEx_PeriphCLKConfig+0x672>
          {
            ret = HAL_TIMEOUT;
 8003f0c:	2303      	movs	r3, #3
 8003f0e:	75fb      	strb	r3, [r7, #23]
            break;
 8003f10:	e005      	b.n	8003f1e <HAL_RCCEx_PeriphCLKConfig+0x67e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8003f12:	4b9c      	ldr	r3, [pc, #624]	; (8004184 <HAL_RCCEx_PeriphCLKConfig+0x8e4>)
 8003f14:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003f16:	f003 0302 	and.w	r3, r3, #2
 8003f1a:	2b00      	cmp	r3, #0
 8003f1c:	d0ed      	beq.n	8003efa <HAL_RCCEx_PeriphCLKConfig+0x65a>
          }
        }
      }

      if(ret == HAL_OK)
 8003f1e:	7dfb      	ldrb	r3, [r7, #23]
 8003f20:	2b00      	cmp	r3, #0
 8003f22:	d126      	bne.n	8003f72 <HAL_RCCEx_PeriphCLKConfig+0x6d2>
      {
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8003f24:	687b      	ldr	r3, [r7, #4]
 8003f26:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 8003f2a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003f2e:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8003f32:	d10d      	bne.n	8003f50 <HAL_RCCEx_PeriphCLKConfig+0x6b0>
 8003f34:	4b93      	ldr	r3, [pc, #588]	; (8004184 <HAL_RCCEx_PeriphCLKConfig+0x8e4>)
 8003f36:	691b      	ldr	r3, [r3, #16]
 8003f38:	f423 527c 	bic.w	r2, r3, #16128	; 0x3f00
 8003f3c:	687b      	ldr	r3, [r7, #4]
 8003f3e:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 8003f42:	0919      	lsrs	r1, r3, #4
 8003f44:	4b90      	ldr	r3, [pc, #576]	; (8004188 <HAL_RCCEx_PeriphCLKConfig+0x8e8>)
 8003f46:	400b      	ands	r3, r1
 8003f48:	498e      	ldr	r1, [pc, #568]	; (8004184 <HAL_RCCEx_PeriphCLKConfig+0x8e4>)
 8003f4a:	4313      	orrs	r3, r2
 8003f4c:	610b      	str	r3, [r1, #16]
 8003f4e:	e005      	b.n	8003f5c <HAL_RCCEx_PeriphCLKConfig+0x6bc>
 8003f50:	4b8c      	ldr	r3, [pc, #560]	; (8004184 <HAL_RCCEx_PeriphCLKConfig+0x8e4>)
 8003f52:	691b      	ldr	r3, [r3, #16]
 8003f54:	4a8b      	ldr	r2, [pc, #556]	; (8004184 <HAL_RCCEx_PeriphCLKConfig+0x8e4>)
 8003f56:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 8003f5a:	6113      	str	r3, [r2, #16]
 8003f5c:	4b89      	ldr	r3, [pc, #548]	; (8004184 <HAL_RCCEx_PeriphCLKConfig+0x8e4>)
 8003f5e:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8003f60:	687b      	ldr	r3, [r7, #4]
 8003f62:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 8003f66:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003f6a:	4986      	ldr	r1, [pc, #536]	; (8004184 <HAL_RCCEx_PeriphCLKConfig+0x8e4>)
 8003f6c:	4313      	orrs	r3, r2
 8003f6e:	670b      	str	r3, [r1, #112]	; 0x70
 8003f70:	e004      	b.n	8003f7c <HAL_RCCEx_PeriphCLKConfig+0x6dc>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8003f72:	7dfb      	ldrb	r3, [r7, #23]
 8003f74:	75bb      	strb	r3, [r7, #22]
 8003f76:	e001      	b.n	8003f7c <HAL_RCCEx_PeriphCLKConfig+0x6dc>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003f78:	7dfb      	ldrb	r3, [r7, #23]
 8003f7a:	75bb      	strb	r3, [r7, #22]
    }
  }


  /*-------------------------- USART1/6 configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
 8003f7c:	687b      	ldr	r3, [r7, #4]
 8003f7e:	681b      	ldr	r3, [r3, #0]
 8003f80:	f003 0301 	and.w	r3, r3, #1
 8003f84:	2b00      	cmp	r3, #0
 8003f86:	d07e      	beq.n	8004086 <HAL_RCCEx_PeriphCLKConfig+0x7e6>
  {
    switch(PeriphClkInit->Usart16ClockSelection)
 8003f88:	687b      	ldr	r3, [r7, #4]
 8003f8a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003f8c:	2b28      	cmp	r3, #40	; 0x28
 8003f8e:	d867      	bhi.n	8004060 <HAL_RCCEx_PeriphCLKConfig+0x7c0>
 8003f90:	a201      	add	r2, pc, #4	; (adr r2, 8003f98 <HAL_RCCEx_PeriphCLKConfig+0x6f8>)
 8003f92:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003f96:	bf00      	nop
 8003f98:	08004067 	.word	0x08004067
 8003f9c:	08004061 	.word	0x08004061
 8003fa0:	08004061 	.word	0x08004061
 8003fa4:	08004061 	.word	0x08004061
 8003fa8:	08004061 	.word	0x08004061
 8003fac:	08004061 	.word	0x08004061
 8003fb0:	08004061 	.word	0x08004061
 8003fb4:	08004061 	.word	0x08004061
 8003fb8:	0800403d 	.word	0x0800403d
 8003fbc:	08004061 	.word	0x08004061
 8003fc0:	08004061 	.word	0x08004061
 8003fc4:	08004061 	.word	0x08004061
 8003fc8:	08004061 	.word	0x08004061
 8003fcc:	08004061 	.word	0x08004061
 8003fd0:	08004061 	.word	0x08004061
 8003fd4:	08004061 	.word	0x08004061
 8003fd8:	0800404f 	.word	0x0800404f
 8003fdc:	08004061 	.word	0x08004061
 8003fe0:	08004061 	.word	0x08004061
 8003fe4:	08004061 	.word	0x08004061
 8003fe8:	08004061 	.word	0x08004061
 8003fec:	08004061 	.word	0x08004061
 8003ff0:	08004061 	.word	0x08004061
 8003ff4:	08004061 	.word	0x08004061
 8003ff8:	08004067 	.word	0x08004067
 8003ffc:	08004061 	.word	0x08004061
 8004000:	08004061 	.word	0x08004061
 8004004:	08004061 	.word	0x08004061
 8004008:	08004061 	.word	0x08004061
 800400c:	08004061 	.word	0x08004061
 8004010:	08004061 	.word	0x08004061
 8004014:	08004061 	.word	0x08004061
 8004018:	08004067 	.word	0x08004067
 800401c:	08004061 	.word	0x08004061
 8004020:	08004061 	.word	0x08004061
 8004024:	08004061 	.word	0x08004061
 8004028:	08004061 	.word	0x08004061
 800402c:	08004061 	.word	0x08004061
 8004030:	08004061 	.word	0x08004061
 8004034:	08004061 	.word	0x08004061
 8004038:	08004067 	.word	0x08004067
    case RCC_USART16CLKSOURCE_PCLK2: /* CD/D2 PCLK2 as clock source for USART1/6 */
      /* USART1/6 clock source configuration done later after clock selection check */
      break;

    case RCC_USART16CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART1/6 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 800403c:	687b      	ldr	r3, [r7, #4]
 800403e:	3304      	adds	r3, #4
 8004040:	2101      	movs	r1, #1
 8004042:	4618      	mov	r0, r3
 8004044:	f000 fe3a 	bl	8004cbc <RCCEx_PLL2_Config>
 8004048:	4603      	mov	r3, r0
 800404a:	75fb      	strb	r3, [r7, #23]
      /* USART1/6 clock source configuration done later after clock selection check */
      break;
 800404c:	e00c      	b.n	8004068 <HAL_RCCEx_PeriphCLKConfig+0x7c8>

    case RCC_USART16CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART1/6 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 800404e:	687b      	ldr	r3, [r7, #4]
 8004050:	3324      	adds	r3, #36	; 0x24
 8004052:	2101      	movs	r1, #1
 8004054:	4618      	mov	r0, r3
 8004056:	f000 fee3 	bl	8004e20 <RCCEx_PLL3_Config>
 800405a:	4603      	mov	r3, r0
 800405c:	75fb      	strb	r3, [r7, #23]
      /* USART1/6 clock source configuration done later after clock selection check */
      break;
 800405e:	e003      	b.n	8004068 <HAL_RCCEx_PeriphCLKConfig+0x7c8>
      /* LSE,  oscillator is used as source of USART1/6 clock */
      /* USART1/6 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8004060:	2301      	movs	r3, #1
 8004062:	75fb      	strb	r3, [r7, #23]
      break;
 8004064:	e000      	b.n	8004068 <HAL_RCCEx_PeriphCLKConfig+0x7c8>
      break;
 8004066:	bf00      	nop
    }

    if(ret == HAL_OK)
 8004068:	7dfb      	ldrb	r3, [r7, #23]
 800406a:	2b00      	cmp	r3, #0
 800406c:	d109      	bne.n	8004082 <HAL_RCCEx_PeriphCLKConfig+0x7e2>
    {
      /* Set the source of USART1/6 clock */
      __HAL_RCC_USART16_CONFIG(PeriphClkInit->Usart16ClockSelection);
 800406e:	4b45      	ldr	r3, [pc, #276]	; (8004184 <HAL_RCCEx_PeriphCLKConfig+0x8e4>)
 8004070:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004072:	f023 0238 	bic.w	r2, r3, #56	; 0x38
 8004076:	687b      	ldr	r3, [r7, #4]
 8004078:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800407a:	4942      	ldr	r1, [pc, #264]	; (8004184 <HAL_RCCEx_PeriphCLKConfig+0x8e4>)
 800407c:	4313      	orrs	r3, r2
 800407e:	654b      	str	r3, [r1, #84]	; 0x54
 8004080:	e001      	b.n	8004086 <HAL_RCCEx_PeriphCLKConfig+0x7e6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004082:	7dfb      	ldrb	r3, [r7, #23]
 8004084:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*-------------------------- USART2/3/4/5/7/8 Configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
 8004086:	687b      	ldr	r3, [r7, #4]
 8004088:	681b      	ldr	r3, [r3, #0]
 800408a:	f003 0302 	and.w	r3, r3, #2
 800408e:	2b00      	cmp	r3, #0
 8004090:	d037      	beq.n	8004102 <HAL_RCCEx_PeriphCLKConfig+0x862>
  {
    switch(PeriphClkInit->Usart234578ClockSelection)
 8004092:	687b      	ldr	r3, [r7, #4]
 8004094:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004096:	2b05      	cmp	r3, #5
 8004098:	d820      	bhi.n	80040dc <HAL_RCCEx_PeriphCLKConfig+0x83c>
 800409a:	a201      	add	r2, pc, #4	; (adr r2, 80040a0 <HAL_RCCEx_PeriphCLKConfig+0x800>)
 800409c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80040a0:	080040e3 	.word	0x080040e3
 80040a4:	080040b9 	.word	0x080040b9
 80040a8:	080040cb 	.word	0x080040cb
 80040ac:	080040e3 	.word	0x080040e3
 80040b0:	080040e3 	.word	0x080040e3
 80040b4:	080040e3 	.word	0x080040e3
    case RCC_USART234578CLKSOURCE_PCLK1: /* CD/D2 PCLK1 as clock source for USART2/3/4/5/7/8 */
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;

    case RCC_USART234578CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART2/3/4/5/7/8 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 80040b8:	687b      	ldr	r3, [r7, #4]
 80040ba:	3304      	adds	r3, #4
 80040bc:	2101      	movs	r1, #1
 80040be:	4618      	mov	r0, r3
 80040c0:	f000 fdfc 	bl	8004cbc <RCCEx_PLL2_Config>
 80040c4:	4603      	mov	r3, r0
 80040c6:	75fb      	strb	r3, [r7, #23]
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;
 80040c8:	e00c      	b.n	80040e4 <HAL_RCCEx_PeriphCLKConfig+0x844>

    case RCC_USART234578CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART2/3/4/5/7/8 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 80040ca:	687b      	ldr	r3, [r7, #4]
 80040cc:	3324      	adds	r3, #36	; 0x24
 80040ce:	2101      	movs	r1, #1
 80040d0:	4618      	mov	r0, r3
 80040d2:	f000 fea5 	bl	8004e20 <RCCEx_PLL3_Config>
 80040d6:	4603      	mov	r3, r0
 80040d8:	75fb      	strb	r3, [r7, #23]
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;
 80040da:	e003      	b.n	80040e4 <HAL_RCCEx_PeriphCLKConfig+0x844>
      /* LSE,  oscillator is used as source of USART2/3/4/5/7/8 clock */
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80040dc:	2301      	movs	r3, #1
 80040de:	75fb      	strb	r3, [r7, #23]
      break;
 80040e0:	e000      	b.n	80040e4 <HAL_RCCEx_PeriphCLKConfig+0x844>
      break;
 80040e2:	bf00      	nop
    }

    if(ret == HAL_OK)
 80040e4:	7dfb      	ldrb	r3, [r7, #23]
 80040e6:	2b00      	cmp	r3, #0
 80040e8:	d109      	bne.n	80040fe <HAL_RCCEx_PeriphCLKConfig+0x85e>
    {
      /* Set the source of USART2/3/4/5/7/8 clock */
      __HAL_RCC_USART234578_CONFIG(PeriphClkInit->Usart234578ClockSelection);
 80040ea:	4b26      	ldr	r3, [pc, #152]	; (8004184 <HAL_RCCEx_PeriphCLKConfig+0x8e4>)
 80040ec:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80040ee:	f023 0207 	bic.w	r2, r3, #7
 80040f2:	687b      	ldr	r3, [r7, #4]
 80040f4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80040f6:	4923      	ldr	r1, [pc, #140]	; (8004184 <HAL_RCCEx_PeriphCLKConfig+0x8e4>)
 80040f8:	4313      	orrs	r3, r2
 80040fa:	654b      	str	r3, [r1, #84]	; 0x54
 80040fc:	e001      	b.n	8004102 <HAL_RCCEx_PeriphCLKConfig+0x862>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80040fe:	7dfb      	ldrb	r3, [r7, #23]
 8004100:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*-------------------------- LPUART1 Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8004102:	687b      	ldr	r3, [r7, #4]
 8004104:	681b      	ldr	r3, [r3, #0]
 8004106:	f003 0304 	and.w	r3, r3, #4
 800410a:	2b00      	cmp	r3, #0
 800410c:	d040      	beq.n	8004190 <HAL_RCCEx_PeriphCLKConfig+0x8f0>
  {
    switch(PeriphClkInit->Lpuart1ClockSelection)
 800410e:	687b      	ldr	r3, [r7, #4]
 8004110:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8004114:	2b05      	cmp	r3, #5
 8004116:	d821      	bhi.n	800415c <HAL_RCCEx_PeriphCLKConfig+0x8bc>
 8004118:	a201      	add	r2, pc, #4	; (adr r2, 8004120 <HAL_RCCEx_PeriphCLKConfig+0x880>)
 800411a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800411e:	bf00      	nop
 8004120:	08004163 	.word	0x08004163
 8004124:	08004139 	.word	0x08004139
 8004128:	0800414b 	.word	0x0800414b
 800412c:	08004163 	.word	0x08004163
 8004130:	08004163 	.word	0x08004163
 8004134:	08004163 	.word	0x08004163
    case RCC_LPUART1CLKSOURCE_PCLK4: /* SRD/D3 PCLK1 (PCLK4) as clock source for LPUART1 */
      /* LPUART1 clock source configuration done later after clock selection check */
      break;

    case RCC_LPUART1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPUART1 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8004138:	687b      	ldr	r3, [r7, #4]
 800413a:	3304      	adds	r3, #4
 800413c:	2101      	movs	r1, #1
 800413e:	4618      	mov	r0, r3
 8004140:	f000 fdbc 	bl	8004cbc <RCCEx_PLL2_Config>
 8004144:	4603      	mov	r3, r0
 8004146:	75fb      	strb	r3, [r7, #23]
      /* LPUART1 clock source configuration done later after clock selection check */
      break;
 8004148:	e00c      	b.n	8004164 <HAL_RCCEx_PeriphCLKConfig+0x8c4>

    case RCC_LPUART1CLKSOURCE_PLL3: /* PLL3 is used as clock source for LPUART1 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 800414a:	687b      	ldr	r3, [r7, #4]
 800414c:	3324      	adds	r3, #36	; 0x24
 800414e:	2101      	movs	r1, #1
 8004150:	4618      	mov	r0, r3
 8004152:	f000 fe65 	bl	8004e20 <RCCEx_PLL3_Config>
 8004156:	4603      	mov	r3, r0
 8004158:	75fb      	strb	r3, [r7, #23]
      /* LPUART1 clock source configuration done later after clock selection check */
      break;
 800415a:	e003      	b.n	8004164 <HAL_RCCEx_PeriphCLKConfig+0x8c4>
      /* LSE,  oscillator is used as source of LPUART1 clock */
      /* LPUART1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800415c:	2301      	movs	r3, #1
 800415e:	75fb      	strb	r3, [r7, #23]
      break;
 8004160:	e000      	b.n	8004164 <HAL_RCCEx_PeriphCLKConfig+0x8c4>
      break;
 8004162:	bf00      	nop
    }

    if(ret == HAL_OK)
 8004164:	7dfb      	ldrb	r3, [r7, #23]
 8004166:	2b00      	cmp	r3, #0
 8004168:	d110      	bne.n	800418c <HAL_RCCEx_PeriphCLKConfig+0x8ec>
    {
      /* Set the source of LPUART1 clock */
      __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 800416a:	4b06      	ldr	r3, [pc, #24]	; (8004184 <HAL_RCCEx_PeriphCLKConfig+0x8e4>)
 800416c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800416e:	f023 0207 	bic.w	r2, r3, #7
 8004172:	687b      	ldr	r3, [r7, #4]
 8004174:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8004178:	4902      	ldr	r1, [pc, #8]	; (8004184 <HAL_RCCEx_PeriphCLKConfig+0x8e4>)
 800417a:	4313      	orrs	r3, r2
 800417c:	658b      	str	r3, [r1, #88]	; 0x58
 800417e:	e007      	b.n	8004190 <HAL_RCCEx_PeriphCLKConfig+0x8f0>
 8004180:	58024800 	.word	0x58024800
 8004184:	58024400 	.word	0x58024400
 8004188:	00ffffcf 	.word	0x00ffffcf
    }
    else
    {
      /* set overall return value */
      status = ret;
 800418c:	7dfb      	ldrb	r3, [r7, #23]
 800418e:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM1 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8004190:	687b      	ldr	r3, [r7, #4]
 8004192:	681b      	ldr	r3, [r3, #0]
 8004194:	f003 0320 	and.w	r3, r3, #32
 8004198:	2b00      	cmp	r3, #0
 800419a:	d04b      	beq.n	8004234 <HAL_RCCEx_PeriphCLKConfig+0x994>
  {
    switch(PeriphClkInit->Lptim1ClockSelection)
 800419c:	687b      	ldr	r3, [r7, #4]
 800419e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80041a2:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80041a6:	d02e      	beq.n	8004206 <HAL_RCCEx_PeriphCLKConfig+0x966>
 80041a8:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80041ac:	d828      	bhi.n	8004200 <HAL_RCCEx_PeriphCLKConfig+0x960>
 80041ae:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80041b2:	d02a      	beq.n	800420a <HAL_RCCEx_PeriphCLKConfig+0x96a>
 80041b4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80041b8:	d822      	bhi.n	8004200 <HAL_RCCEx_PeriphCLKConfig+0x960>
 80041ba:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 80041be:	d026      	beq.n	800420e <HAL_RCCEx_PeriphCLKConfig+0x96e>
 80041c0:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 80041c4:	d81c      	bhi.n	8004200 <HAL_RCCEx_PeriphCLKConfig+0x960>
 80041c6:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80041ca:	d010      	beq.n	80041ee <HAL_RCCEx_PeriphCLKConfig+0x94e>
 80041cc:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80041d0:	d816      	bhi.n	8004200 <HAL_RCCEx_PeriphCLKConfig+0x960>
 80041d2:	2b00      	cmp	r3, #0
 80041d4:	d01d      	beq.n	8004212 <HAL_RCCEx_PeriphCLKConfig+0x972>
 80041d6:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80041da:	d111      	bne.n	8004200 <HAL_RCCEx_PeriphCLKConfig+0x960>
      /* LPTIM1 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM1*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 80041dc:	687b      	ldr	r3, [r7, #4]
 80041de:	3304      	adds	r3, #4
 80041e0:	2100      	movs	r1, #0
 80041e2:	4618      	mov	r0, r3
 80041e4:	f000 fd6a 	bl	8004cbc <RCCEx_PLL2_Config>
 80041e8:	4603      	mov	r3, r0
 80041ea:	75fb      	strb	r3, [r7, #23]

      /* LPTIM1 clock source configuration done later after clock selection check */
      break;
 80041ec:	e012      	b.n	8004214 <HAL_RCCEx_PeriphCLKConfig+0x974>

    case RCC_LPTIM1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM1*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 80041ee:	687b      	ldr	r3, [r7, #4]
 80041f0:	3324      	adds	r3, #36	; 0x24
 80041f2:	2102      	movs	r1, #2
 80041f4:	4618      	mov	r0, r3
 80041f6:	f000 fe13 	bl	8004e20 <RCCEx_PLL3_Config>
 80041fa:	4603      	mov	r3, r0
 80041fc:	75fb      	strb	r3, [r7, #23]

      /* LPTIM1 clock source configuration done later after clock selection check */
      break;
 80041fe:	e009      	b.n	8004214 <HAL_RCCEx_PeriphCLKConfig+0x974>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM1 clock */
      /* LPTIM1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8004200:	2301      	movs	r3, #1
 8004202:	75fb      	strb	r3, [r7, #23]
      break;
 8004204:	e006      	b.n	8004214 <HAL_RCCEx_PeriphCLKConfig+0x974>
      break;
 8004206:	bf00      	nop
 8004208:	e004      	b.n	8004214 <HAL_RCCEx_PeriphCLKConfig+0x974>
      break;
 800420a:	bf00      	nop
 800420c:	e002      	b.n	8004214 <HAL_RCCEx_PeriphCLKConfig+0x974>
      break;
 800420e:	bf00      	nop
 8004210:	e000      	b.n	8004214 <HAL_RCCEx_PeriphCLKConfig+0x974>
      break;
 8004212:	bf00      	nop
    }

    if(ret == HAL_OK)
 8004214:	7dfb      	ldrb	r3, [r7, #23]
 8004216:	2b00      	cmp	r3, #0
 8004218:	d10a      	bne.n	8004230 <HAL_RCCEx_PeriphCLKConfig+0x990>
    {
      /* Set the source of LPTIM1 clock*/
      __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 800421a:	4bb2      	ldr	r3, [pc, #712]	; (80044e4 <HAL_RCCEx_PeriphCLKConfig+0xc44>)
 800421c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800421e:	f023 42e0 	bic.w	r2, r3, #1879048192	; 0x70000000
 8004222:	687b      	ldr	r3, [r7, #4]
 8004224:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004228:	49ae      	ldr	r1, [pc, #696]	; (80044e4 <HAL_RCCEx_PeriphCLKConfig+0xc44>)
 800422a:	4313      	orrs	r3, r2
 800422c:	654b      	str	r3, [r1, #84]	; 0x54
 800422e:	e001      	b.n	8004234 <HAL_RCCEx_PeriphCLKConfig+0x994>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004230:	7dfb      	ldrb	r3, [r7, #23]
 8004232:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM2 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 8004234:	687b      	ldr	r3, [r7, #4]
 8004236:	681b      	ldr	r3, [r3, #0]
 8004238:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800423c:	2b00      	cmp	r3, #0
 800423e:	d04b      	beq.n	80042d8 <HAL_RCCEx_PeriphCLKConfig+0xa38>
  {
    switch(PeriphClkInit->Lptim2ClockSelection)
 8004240:	687b      	ldr	r3, [r7, #4]
 8004242:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004246:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 800424a:	d02e      	beq.n	80042aa <HAL_RCCEx_PeriphCLKConfig+0xa0a>
 800424c:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 8004250:	d828      	bhi.n	80042a4 <HAL_RCCEx_PeriphCLKConfig+0xa04>
 8004252:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004256:	d02a      	beq.n	80042ae <HAL_RCCEx_PeriphCLKConfig+0xa0e>
 8004258:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800425c:	d822      	bhi.n	80042a4 <HAL_RCCEx_PeriphCLKConfig+0xa04>
 800425e:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8004262:	d026      	beq.n	80042b2 <HAL_RCCEx_PeriphCLKConfig+0xa12>
 8004264:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8004268:	d81c      	bhi.n	80042a4 <HAL_RCCEx_PeriphCLKConfig+0xa04>
 800426a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800426e:	d010      	beq.n	8004292 <HAL_RCCEx_PeriphCLKConfig+0x9f2>
 8004270:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004274:	d816      	bhi.n	80042a4 <HAL_RCCEx_PeriphCLKConfig+0xa04>
 8004276:	2b00      	cmp	r3, #0
 8004278:	d01d      	beq.n	80042b6 <HAL_RCCEx_PeriphCLKConfig+0xa16>
 800427a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800427e:	d111      	bne.n	80042a4 <HAL_RCCEx_PeriphCLKConfig+0xa04>
      /* LPTIM2 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM2CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8004280:	687b      	ldr	r3, [r7, #4]
 8004282:	3304      	adds	r3, #4
 8004284:	2100      	movs	r1, #0
 8004286:	4618      	mov	r0, r3
 8004288:	f000 fd18 	bl	8004cbc <RCCEx_PLL2_Config>
 800428c:	4603      	mov	r3, r0
 800428e:	75fb      	strb	r3, [r7, #23]

      /* LPTIM2 clock source configuration done later after clock selection check */
      break;
 8004290:	e012      	b.n	80042b8 <HAL_RCCEx_PeriphCLKConfig+0xa18>

    case RCC_LPTIM2CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8004292:	687b      	ldr	r3, [r7, #4]
 8004294:	3324      	adds	r3, #36	; 0x24
 8004296:	2102      	movs	r1, #2
 8004298:	4618      	mov	r0, r3
 800429a:	f000 fdc1 	bl	8004e20 <RCCEx_PLL3_Config>
 800429e:	4603      	mov	r3, r0
 80042a0:	75fb      	strb	r3, [r7, #23]

      /* LPTIM2 clock source configuration done later after clock selection check */
      break;
 80042a2:	e009      	b.n	80042b8 <HAL_RCCEx_PeriphCLKConfig+0xa18>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM2 clock */
      /* LPTIM2 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80042a4:	2301      	movs	r3, #1
 80042a6:	75fb      	strb	r3, [r7, #23]
      break;
 80042a8:	e006      	b.n	80042b8 <HAL_RCCEx_PeriphCLKConfig+0xa18>
      break;
 80042aa:	bf00      	nop
 80042ac:	e004      	b.n	80042b8 <HAL_RCCEx_PeriphCLKConfig+0xa18>
      break;
 80042ae:	bf00      	nop
 80042b0:	e002      	b.n	80042b8 <HAL_RCCEx_PeriphCLKConfig+0xa18>
      break;
 80042b2:	bf00      	nop
 80042b4:	e000      	b.n	80042b8 <HAL_RCCEx_PeriphCLKConfig+0xa18>
      break;
 80042b6:	bf00      	nop
    }

    if(ret == HAL_OK)
 80042b8:	7dfb      	ldrb	r3, [r7, #23]
 80042ba:	2b00      	cmp	r3, #0
 80042bc:	d10a      	bne.n	80042d4 <HAL_RCCEx_PeriphCLKConfig+0xa34>
    {
      /* Set the source of LPTIM2 clock*/
      __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 80042be:	4b89      	ldr	r3, [pc, #548]	; (80044e4 <HAL_RCCEx_PeriphCLKConfig+0xc44>)
 80042c0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80042c2:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 80042c6:	687b      	ldr	r3, [r7, #4]
 80042c8:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80042cc:	4985      	ldr	r1, [pc, #532]	; (80044e4 <HAL_RCCEx_PeriphCLKConfig+0xc44>)
 80042ce:	4313      	orrs	r3, r2
 80042d0:	658b      	str	r3, [r1, #88]	; 0x58
 80042d2:	e001      	b.n	80042d8 <HAL_RCCEx_PeriphCLKConfig+0xa38>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80042d4:	7dfb      	ldrb	r3, [r7, #23]
 80042d6:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM345 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
 80042d8:	687b      	ldr	r3, [r7, #4]
 80042da:	681b      	ldr	r3, [r3, #0]
 80042dc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80042e0:	2b00      	cmp	r3, #0
 80042e2:	d04b      	beq.n	800437c <HAL_RCCEx_PeriphCLKConfig+0xadc>
  {
    switch(PeriphClkInit->Lptim345ClockSelection)
 80042e4:	687b      	ldr	r3, [r7, #4]
 80042e6:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80042ea:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 80042ee:	d02e      	beq.n	800434e <HAL_RCCEx_PeriphCLKConfig+0xaae>
 80042f0:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 80042f4:	d828      	bhi.n	8004348 <HAL_RCCEx_PeriphCLKConfig+0xaa8>
 80042f6:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80042fa:	d02a      	beq.n	8004352 <HAL_RCCEx_PeriphCLKConfig+0xab2>
 80042fc:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004300:	d822      	bhi.n	8004348 <HAL_RCCEx_PeriphCLKConfig+0xaa8>
 8004302:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 8004306:	d026      	beq.n	8004356 <HAL_RCCEx_PeriphCLKConfig+0xab6>
 8004308:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 800430c:	d81c      	bhi.n	8004348 <HAL_RCCEx_PeriphCLKConfig+0xaa8>
 800430e:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8004312:	d010      	beq.n	8004336 <HAL_RCCEx_PeriphCLKConfig+0xa96>
 8004314:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8004318:	d816      	bhi.n	8004348 <HAL_RCCEx_PeriphCLKConfig+0xaa8>
 800431a:	2b00      	cmp	r3, #0
 800431c:	d01d      	beq.n	800435a <HAL_RCCEx_PeriphCLKConfig+0xaba>
 800431e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004322:	d111      	bne.n	8004348 <HAL_RCCEx_PeriphCLKConfig+0xaa8>
    case RCC_LPTIM345CLKSOURCE_PCLK4:      /* SRD/D3 PCLK1 (PCLK4) as clock source for LPTIM3/4/5 */
      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM345CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM3/4/5 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8004324:	687b      	ldr	r3, [r7, #4]
 8004326:	3304      	adds	r3, #4
 8004328:	2100      	movs	r1, #0
 800432a:	4618      	mov	r0, r3
 800432c:	f000 fcc6 	bl	8004cbc <RCCEx_PLL2_Config>
 8004330:	4603      	mov	r3, r0
 8004332:	75fb      	strb	r3, [r7, #23]

      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;
 8004334:	e012      	b.n	800435c <HAL_RCCEx_PeriphCLKConfig+0xabc>

    case RCC_LPTIM345CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM3/4/5 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8004336:	687b      	ldr	r3, [r7, #4]
 8004338:	3324      	adds	r3, #36	; 0x24
 800433a:	2102      	movs	r1, #2
 800433c:	4618      	mov	r0, r3
 800433e:	f000 fd6f 	bl	8004e20 <RCCEx_PLL3_Config>
 8004342:	4603      	mov	r3, r0
 8004344:	75fb      	strb	r3, [r7, #23]

      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;
 8004346:	e009      	b.n	800435c <HAL_RCCEx_PeriphCLKConfig+0xabc>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM3/4/5 clock */
      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8004348:	2301      	movs	r3, #1
 800434a:	75fb      	strb	r3, [r7, #23]
      break;
 800434c:	e006      	b.n	800435c <HAL_RCCEx_PeriphCLKConfig+0xabc>
      break;
 800434e:	bf00      	nop
 8004350:	e004      	b.n	800435c <HAL_RCCEx_PeriphCLKConfig+0xabc>
      break;
 8004352:	bf00      	nop
 8004354:	e002      	b.n	800435c <HAL_RCCEx_PeriphCLKConfig+0xabc>
      break;
 8004356:	bf00      	nop
 8004358:	e000      	b.n	800435c <HAL_RCCEx_PeriphCLKConfig+0xabc>
      break;
 800435a:	bf00      	nop
    }

    if(ret == HAL_OK)
 800435c:	7dfb      	ldrb	r3, [r7, #23]
 800435e:	2b00      	cmp	r3, #0
 8004360:	d10a      	bne.n	8004378 <HAL_RCCEx_PeriphCLKConfig+0xad8>
    {
      /* Set the source of LPTIM3/4/5 clock */
      __HAL_RCC_LPTIM345_CONFIG(PeriphClkInit->Lptim345ClockSelection);
 8004362:	4b60      	ldr	r3, [pc, #384]	; (80044e4 <HAL_RCCEx_PeriphCLKConfig+0xc44>)
 8004364:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004366:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800436a:	687b      	ldr	r3, [r7, #4]
 800436c:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8004370:	495c      	ldr	r1, [pc, #368]	; (80044e4 <HAL_RCCEx_PeriphCLKConfig+0xc44>)
 8004372:	4313      	orrs	r3, r2
 8004374:	658b      	str	r3, [r1, #88]	; 0x58
 8004376:	e001      	b.n	800437c <HAL_RCCEx_PeriphCLKConfig+0xadc>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004378:	7dfb      	ldrb	r3, [r7, #23]
 800437a:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*------------------------------ I2C1/2/3/5* Configuration ------------------------*/
#if defined(I2C5)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1235) == RCC_PERIPHCLK_I2C1235)
 800437c:	687b      	ldr	r3, [r7, #4]
 800437e:	681b      	ldr	r3, [r3, #0]
 8004380:	f003 0308 	and.w	r3, r3, #8
 8004384:	2b00      	cmp	r3, #0
 8004386:	d018      	beq.n	80043ba <HAL_RCCEx_PeriphCLKConfig+0xb1a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1235CLKSOURCE(PeriphClkInit->I2c1235ClockSelection));

    if ((PeriphClkInit->I2c1235ClockSelection )== RCC_I2C1235CLKSOURCE_PLL3 )
 8004388:	687b      	ldr	r3, [r7, #4]
 800438a:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800438c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004390:	d10a      	bne.n	80043a8 <HAL_RCCEx_PeriphCLKConfig+0xb08>
    {
        if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!= HAL_OK)
 8004392:	687b      	ldr	r3, [r7, #4]
 8004394:	3324      	adds	r3, #36	; 0x24
 8004396:	2102      	movs	r1, #2
 8004398:	4618      	mov	r0, r3
 800439a:	f000 fd41 	bl	8004e20 <RCCEx_PLL3_Config>
 800439e:	4603      	mov	r3, r0
 80043a0:	2b00      	cmp	r3, #0
 80043a2:	d001      	beq.n	80043a8 <HAL_RCCEx_PeriphCLKConfig+0xb08>
        {
          status = HAL_ERROR;
 80043a4:	2301      	movs	r3, #1
 80043a6:	75bb      	strb	r3, [r7, #22]
        }
    }

      __HAL_RCC_I2C1235_CONFIG(PeriphClkInit->I2c1235ClockSelection);
 80043a8:	4b4e      	ldr	r3, [pc, #312]	; (80044e4 <HAL_RCCEx_PeriphCLKConfig+0xc44>)
 80043aa:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80043ac:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 80043b0:	687b      	ldr	r3, [r7, #4]
 80043b2:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80043b4:	494b      	ldr	r1, [pc, #300]	; (80044e4 <HAL_RCCEx_PeriphCLKConfig+0xc44>)
 80043b6:	4313      	orrs	r3, r2
 80043b8:	654b      	str	r3, [r1, #84]	; 0x54

  }
#endif /* I2C5 */

  /*------------------------------ I2C4 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 80043ba:	687b      	ldr	r3, [r7, #4]
 80043bc:	681b      	ldr	r3, [r3, #0]
 80043be:	f003 0310 	and.w	r3, r3, #16
 80043c2:	2b00      	cmp	r3, #0
 80043c4:	d01a      	beq.n	80043fc <HAL_RCCEx_PeriphCLKConfig+0xb5c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    if ((PeriphClkInit->I2c4ClockSelection) == RCC_I2C4CLKSOURCE_PLL3 )
 80043c6:	687b      	ldr	r3, [r7, #4]
 80043c8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80043cc:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80043d0:	d10a      	bne.n	80043e8 <HAL_RCCEx_PeriphCLKConfig+0xb48>
    {
      if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!= HAL_OK)
 80043d2:	687b      	ldr	r3, [r7, #4]
 80043d4:	3324      	adds	r3, #36	; 0x24
 80043d6:	2102      	movs	r1, #2
 80043d8:	4618      	mov	r0, r3
 80043da:	f000 fd21 	bl	8004e20 <RCCEx_PLL3_Config>
 80043de:	4603      	mov	r3, r0
 80043e0:	2b00      	cmp	r3, #0
 80043e2:	d001      	beq.n	80043e8 <HAL_RCCEx_PeriphCLKConfig+0xb48>
      {
        status = HAL_ERROR;
 80043e4:	2301      	movs	r3, #1
 80043e6:	75bb      	strb	r3, [r7, #22]
      }
    }

      __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 80043e8:	4b3e      	ldr	r3, [pc, #248]	; (80044e4 <HAL_RCCEx_PeriphCLKConfig+0xc44>)
 80043ea:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80043ec:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80043f0:	687b      	ldr	r3, [r7, #4]
 80043f2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80043f6:	493b      	ldr	r1, [pc, #236]	; (80044e4 <HAL_RCCEx_PeriphCLKConfig+0xc44>)
 80043f8:	4313      	orrs	r3, r2
 80043fa:	658b      	str	r3, [r1, #88]	; 0x58

  }

  /*---------------------------- ADC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 80043fc:	687b      	ldr	r3, [r7, #4]
 80043fe:	681b      	ldr	r3, [r3, #0]
 8004400:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8004404:	2b00      	cmp	r3, #0
 8004406:	d034      	beq.n	8004472 <HAL_RCCEx_PeriphCLKConfig+0xbd2>
  {
    switch(PeriphClkInit->AdcClockSelection)
 8004408:	687b      	ldr	r3, [r7, #4]
 800440a:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800440e:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8004412:	d01d      	beq.n	8004450 <HAL_RCCEx_PeriphCLKConfig+0xbb0>
 8004414:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8004418:	d817      	bhi.n	800444a <HAL_RCCEx_PeriphCLKConfig+0xbaa>
 800441a:	2b00      	cmp	r3, #0
 800441c:	d003      	beq.n	8004426 <HAL_RCCEx_PeriphCLKConfig+0xb86>
 800441e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004422:	d009      	beq.n	8004438 <HAL_RCCEx_PeriphCLKConfig+0xb98>
 8004424:	e011      	b.n	800444a <HAL_RCCEx_PeriphCLKConfig+0xbaa>
    {

    case RCC_ADCCLKSOURCE_PLL2: /* PLL2 is used as clock source for ADC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8004426:	687b      	ldr	r3, [r7, #4]
 8004428:	3304      	adds	r3, #4
 800442a:	2100      	movs	r1, #0
 800442c:	4618      	mov	r0, r3
 800442e:	f000 fc45 	bl	8004cbc <RCCEx_PLL2_Config>
 8004432:	4603      	mov	r3, r0
 8004434:	75fb      	strb	r3, [r7, #23]

      /* ADC clock source configuration done later after clock selection check */
      break;
 8004436:	e00c      	b.n	8004452 <HAL_RCCEx_PeriphCLKConfig+0xbb2>

    case RCC_ADCCLKSOURCE_PLL3:  /* PLL3 is used as clock source for ADC*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8004438:	687b      	ldr	r3, [r7, #4]
 800443a:	3324      	adds	r3, #36	; 0x24
 800443c:	2102      	movs	r1, #2
 800443e:	4618      	mov	r0, r3
 8004440:	f000 fcee 	bl	8004e20 <RCCEx_PLL3_Config>
 8004444:	4603      	mov	r3, r0
 8004446:	75fb      	strb	r3, [r7, #23]

      /* ADC clock source configuration done later after clock selection check */
      break;
 8004448:	e003      	b.n	8004452 <HAL_RCCEx_PeriphCLKConfig+0xbb2>
      /* HSI, HSE, or CSI oscillator is used as source of ADC clock */
      /* ADC clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800444a:	2301      	movs	r3, #1
 800444c:	75fb      	strb	r3, [r7, #23]
      break;
 800444e:	e000      	b.n	8004452 <HAL_RCCEx_PeriphCLKConfig+0xbb2>
      break;
 8004450:	bf00      	nop
    }

    if(ret == HAL_OK)
 8004452:	7dfb      	ldrb	r3, [r7, #23]
 8004454:	2b00      	cmp	r3, #0
 8004456:	d10a      	bne.n	800446e <HAL_RCCEx_PeriphCLKConfig+0xbce>
    {
      /* Set the source of ADC clock*/
      __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8004458:	4b22      	ldr	r3, [pc, #136]	; (80044e4 <HAL_RCCEx_PeriphCLKConfig+0xc44>)
 800445a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800445c:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8004460:	687b      	ldr	r3, [r7, #4]
 8004462:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8004466:	491f      	ldr	r1, [pc, #124]	; (80044e4 <HAL_RCCEx_PeriphCLKConfig+0xc44>)
 8004468:	4313      	orrs	r3, r2
 800446a:	658b      	str	r3, [r1, #88]	; 0x58
 800446c:	e001      	b.n	8004472 <HAL_RCCEx_PeriphCLKConfig+0xbd2>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800446e:	7dfb      	ldrb	r3, [r7, #23]
 8004470:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*------------------------------ USB Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8004472:	687b      	ldr	r3, [r7, #4]
 8004474:	681b      	ldr	r3, [r3, #0]
 8004476:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800447a:	2b00      	cmp	r3, #0
 800447c:	d036      	beq.n	80044ec <HAL_RCCEx_PeriphCLKConfig+0xc4c>
  {

    switch(PeriphClkInit->UsbClockSelection)
 800447e:	687b      	ldr	r3, [r7, #4]
 8004480:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8004484:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8004488:	d01c      	beq.n	80044c4 <HAL_RCCEx_PeriphCLKConfig+0xc24>
 800448a:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 800448e:	d816      	bhi.n	80044be <HAL_RCCEx_PeriphCLKConfig+0xc1e>
 8004490:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8004494:	d003      	beq.n	800449e <HAL_RCCEx_PeriphCLKConfig+0xbfe>
 8004496:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800449a:	d007      	beq.n	80044ac <HAL_RCCEx_PeriphCLKConfig+0xc0c>
 800449c:	e00f      	b.n	80044be <HAL_RCCEx_PeriphCLKConfig+0xc1e>
    {
    case RCC_USBCLKSOURCE_PLL:      /* PLL is used as clock source for USB*/
      /* Enable USB Clock output generated form System USB . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800449e:	4b11      	ldr	r3, [pc, #68]	; (80044e4 <HAL_RCCEx_PeriphCLKConfig+0xc44>)
 80044a0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80044a2:	4a10      	ldr	r2, [pc, #64]	; (80044e4 <HAL_RCCEx_PeriphCLKConfig+0xc44>)
 80044a4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80044a8:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* USB clock source configuration done later after clock selection check */
      break;
 80044aa:	e00c      	b.n	80044c6 <HAL_RCCEx_PeriphCLKConfig+0xc26>

    case RCC_USBCLKSOURCE_PLL3: /* PLL3 is used as clock source for USB*/

      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 80044ac:	687b      	ldr	r3, [r7, #4]
 80044ae:	3324      	adds	r3, #36	; 0x24
 80044b0:	2101      	movs	r1, #1
 80044b2:	4618      	mov	r0, r3
 80044b4:	f000 fcb4 	bl	8004e20 <RCCEx_PLL3_Config>
 80044b8:	4603      	mov	r3, r0
 80044ba:	75fb      	strb	r3, [r7, #23]

      /* USB clock source configuration done later after clock selection check */
      break;
 80044bc:	e003      	b.n	80044c6 <HAL_RCCEx_PeriphCLKConfig+0xc26>
      /* HSI48 oscillator is used as source of USB clock */
      /* USB clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80044be:	2301      	movs	r3, #1
 80044c0:	75fb      	strb	r3, [r7, #23]
      break;
 80044c2:	e000      	b.n	80044c6 <HAL_RCCEx_PeriphCLKConfig+0xc26>
      break;
 80044c4:	bf00      	nop
    }

    if(ret == HAL_OK)
 80044c6:	7dfb      	ldrb	r3, [r7, #23]
 80044c8:	2b00      	cmp	r3, #0
 80044ca:	d10d      	bne.n	80044e8 <HAL_RCCEx_PeriphCLKConfig+0xc48>
    {
      /* Set the source of USB clock*/
      __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 80044cc:	4b05      	ldr	r3, [pc, #20]	; (80044e4 <HAL_RCCEx_PeriphCLKConfig+0xc44>)
 80044ce:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80044d0:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80044d4:	687b      	ldr	r3, [r7, #4]
 80044d6:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80044da:	4902      	ldr	r1, [pc, #8]	; (80044e4 <HAL_RCCEx_PeriphCLKConfig+0xc44>)
 80044dc:	4313      	orrs	r3, r2
 80044de:	654b      	str	r3, [r1, #84]	; 0x54
 80044e0:	e004      	b.n	80044ec <HAL_RCCEx_PeriphCLKConfig+0xc4c>
 80044e2:	bf00      	nop
 80044e4:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 80044e8:	7dfb      	ldrb	r3, [r7, #23]
 80044ea:	75bb      	strb	r3, [r7, #22]
    }

  }

  /*------------------------------------- SDMMC Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == RCC_PERIPHCLK_SDMMC)
 80044ec:	687b      	ldr	r3, [r7, #4]
 80044ee:	681b      	ldr	r3, [r3, #0]
 80044f0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80044f4:	2b00      	cmp	r3, #0
 80044f6:	d029      	beq.n	800454c <HAL_RCCEx_PeriphCLKConfig+0xcac>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC(PeriphClkInit->SdmmcClockSelection));

    switch(PeriphClkInit->SdmmcClockSelection)
 80044f8:	687b      	ldr	r3, [r7, #4]
 80044fa:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80044fc:	2b00      	cmp	r3, #0
 80044fe:	d003      	beq.n	8004508 <HAL_RCCEx_PeriphCLKConfig+0xc68>
 8004500:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004504:	d007      	beq.n	8004516 <HAL_RCCEx_PeriphCLKConfig+0xc76>
 8004506:	e00f      	b.n	8004528 <HAL_RCCEx_PeriphCLKConfig+0xc88>
    {
    case RCC_SDMMCCLKSOURCE_PLL:      /* PLL is used as clock source for SDMMC*/
      /* Enable SDMMC Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8004508:	4b61      	ldr	r3, [pc, #388]	; (8004690 <HAL_RCCEx_PeriphCLKConfig+0xdf0>)
 800450a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800450c:	4a60      	ldr	r2, [pc, #384]	; (8004690 <HAL_RCCEx_PeriphCLKConfig+0xdf0>)
 800450e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004512:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SDMMC clock source configuration done later after clock selection check */
      break;
 8004514:	e00b      	b.n	800452e <HAL_RCCEx_PeriphCLKConfig+0xc8e>

    case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for SDMMC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 8004516:	687b      	ldr	r3, [r7, #4]
 8004518:	3304      	adds	r3, #4
 800451a:	2102      	movs	r1, #2
 800451c:	4618      	mov	r0, r3
 800451e:	f000 fbcd 	bl	8004cbc <RCCEx_PLL2_Config>
 8004522:	4603      	mov	r3, r0
 8004524:	75fb      	strb	r3, [r7, #23]

      /* SDMMC clock source configuration done later after clock selection check */
      break;
 8004526:	e002      	b.n	800452e <HAL_RCCEx_PeriphCLKConfig+0xc8e>

    default:
      ret = HAL_ERROR;
 8004528:	2301      	movs	r3, #1
 800452a:	75fb      	strb	r3, [r7, #23]
      break;
 800452c:	bf00      	nop
    }

    if(ret == HAL_OK)
 800452e:	7dfb      	ldrb	r3, [r7, #23]
 8004530:	2b00      	cmp	r3, #0
 8004532:	d109      	bne.n	8004548 <HAL_RCCEx_PeriphCLKConfig+0xca8>
    {
      /* Set the source of SDMMC clock*/
      __HAL_RCC_SDMMC_CONFIG(PeriphClkInit->SdmmcClockSelection);
 8004534:	4b56      	ldr	r3, [pc, #344]	; (8004690 <HAL_RCCEx_PeriphCLKConfig+0xdf0>)
 8004536:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004538:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 800453c:	687b      	ldr	r3, [r7, #4]
 800453e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004540:	4953      	ldr	r1, [pc, #332]	; (8004690 <HAL_RCCEx_PeriphCLKConfig+0xdf0>)
 8004542:	4313      	orrs	r3, r2
 8004544:	64cb      	str	r3, [r1, #76]	; 0x4c
 8004546:	e001      	b.n	800454c <HAL_RCCEx_PeriphCLKConfig+0xcac>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004548:	7dfb      	ldrb	r3, [r7, #23]
 800454a:	75bb      	strb	r3, [r7, #22]
    }
  }

#if defined(LTDC)
  /*-------------------------------------- LTDC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 800454c:	687b      	ldr	r3, [r7, #4]
 800454e:	681b      	ldr	r3, [r3, #0]
 8004550:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8004554:	2b00      	cmp	r3, #0
 8004556:	d00a      	beq.n	800456e <HAL_RCCEx_PeriphCLKConfig+0xcce>
  {
    if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!=HAL_OK)
 8004558:	687b      	ldr	r3, [r7, #4]
 800455a:	3324      	adds	r3, #36	; 0x24
 800455c:	2102      	movs	r1, #2
 800455e:	4618      	mov	r0, r3
 8004560:	f000 fc5e 	bl	8004e20 <RCCEx_PLL3_Config>
 8004564:	4603      	mov	r3, r0
 8004566:	2b00      	cmp	r3, #0
 8004568:	d001      	beq.n	800456e <HAL_RCCEx_PeriphCLKConfig+0xcce>
    {
      status=HAL_ERROR;
 800456a:	2301      	movs	r3, #1
 800456c:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif /* LTDC */

  /*------------------------------ RNG Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 800456e:	687b      	ldr	r3, [r7, #4]
 8004570:	681b      	ldr	r3, [r3, #0]
 8004572:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004576:	2b00      	cmp	r3, #0
 8004578:	d030      	beq.n	80045dc <HAL_RCCEx_PeriphCLKConfig+0xd3c>
  {

    switch(PeriphClkInit->RngClockSelection)
 800457a:	687b      	ldr	r3, [r7, #4]
 800457c:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800457e:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8004582:	d017      	beq.n	80045b4 <HAL_RCCEx_PeriphCLKConfig+0xd14>
 8004584:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8004588:	d811      	bhi.n	80045ae <HAL_RCCEx_PeriphCLKConfig+0xd0e>
 800458a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800458e:	d013      	beq.n	80045b8 <HAL_RCCEx_PeriphCLKConfig+0xd18>
 8004590:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004594:	d80b      	bhi.n	80045ae <HAL_RCCEx_PeriphCLKConfig+0xd0e>
 8004596:	2b00      	cmp	r3, #0
 8004598:	d010      	beq.n	80045bc <HAL_RCCEx_PeriphCLKConfig+0xd1c>
 800459a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800459e:	d106      	bne.n	80045ae <HAL_RCCEx_PeriphCLKConfig+0xd0e>
    {
    case RCC_RNGCLKSOURCE_PLL:     /* PLL is used as clock source for RNG*/
      /* Enable RNG Clock output generated form System RNG . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80045a0:	4b3b      	ldr	r3, [pc, #236]	; (8004690 <HAL_RCCEx_PeriphCLKConfig+0xdf0>)
 80045a2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80045a4:	4a3a      	ldr	r2, [pc, #232]	; (8004690 <HAL_RCCEx_PeriphCLKConfig+0xdf0>)
 80045a6:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80045aa:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* RNG clock source configuration done later after clock selection check */
      break;
 80045ac:	e007      	b.n	80045be <HAL_RCCEx_PeriphCLKConfig+0xd1e>
      /* HSI48 oscillator is used as source of RNG clock */
      /* RNG clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80045ae:	2301      	movs	r3, #1
 80045b0:	75fb      	strb	r3, [r7, #23]
      break;
 80045b2:	e004      	b.n	80045be <HAL_RCCEx_PeriphCLKConfig+0xd1e>
      break;
 80045b4:	bf00      	nop
 80045b6:	e002      	b.n	80045be <HAL_RCCEx_PeriphCLKConfig+0xd1e>
      break;
 80045b8:	bf00      	nop
 80045ba:	e000      	b.n	80045be <HAL_RCCEx_PeriphCLKConfig+0xd1e>
      break;
 80045bc:	bf00      	nop
    }

    if(ret == HAL_OK)
 80045be:	7dfb      	ldrb	r3, [r7, #23]
 80045c0:	2b00      	cmp	r3, #0
 80045c2:	d109      	bne.n	80045d8 <HAL_RCCEx_PeriphCLKConfig+0xd38>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 80045c4:	4b32      	ldr	r3, [pc, #200]	; (8004690 <HAL_RCCEx_PeriphCLKConfig+0xdf0>)
 80045c6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80045c8:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80045cc:	687b      	ldr	r3, [r7, #4]
 80045ce:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80045d0:	492f      	ldr	r1, [pc, #188]	; (8004690 <HAL_RCCEx_PeriphCLKConfig+0xdf0>)
 80045d2:	4313      	orrs	r3, r2
 80045d4:	654b      	str	r3, [r1, #84]	; 0x54
 80045d6:	e001      	b.n	80045dc <HAL_RCCEx_PeriphCLKConfig+0xd3c>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80045d8:	7dfb      	ldrb	r3, [r7, #23]
 80045da:	75bb      	strb	r3, [r7, #22]
    }

  }

  /*------------------------------ SWPMI1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 80045dc:	687b      	ldr	r3, [r7, #4]
 80045de:	681b      	ldr	r3, [r3, #0]
 80045e0:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80045e4:	2b00      	cmp	r3, #0
 80045e6:	d008      	beq.n	80045fa <HAL_RCCEx_PeriphCLKConfig+0xd5a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 interface clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 80045e8:	4b29      	ldr	r3, [pc, #164]	; (8004690 <HAL_RCCEx_PeriphCLKConfig+0xdf0>)
 80045ea:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80045ec:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 80045f0:	687b      	ldr	r3, [r7, #4]
 80045f2:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80045f4:	4926      	ldr	r1, [pc, #152]	; (8004690 <HAL_RCCEx_PeriphCLKConfig+0xdf0>)
 80045f6:	4313      	orrs	r3, r2
 80045f8:	650b      	str	r3, [r1, #80]	; 0x50
    /* Configure the HRTIM1 clock source */
    __HAL_RCC_HRTIM1_CONFIG(PeriphClkInit->Hrtim1ClockSelection);
  }
#endif  /*HRTIM1*/
  /*------------------------------ DFSDM1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 80045fa:	687b      	ldr	r3, [r7, #4]
 80045fc:	681b      	ldr	r3, [r3, #0]
 80045fe:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8004602:	2b00      	cmp	r3, #0
 8004604:	d008      	beq.n	8004618 <HAL_RCCEx_PeriphCLKConfig+0xd78>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8004606:	4b22      	ldr	r3, [pc, #136]	; (8004690 <HAL_RCCEx_PeriphCLKConfig+0xdf0>)
 8004608:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800460a:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 800460e:	687b      	ldr	r3, [r7, #4]
 8004610:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8004612:	491f      	ldr	r1, [pc, #124]	; (8004690 <HAL_RCCEx_PeriphCLKConfig+0xdf0>)
 8004614:	4313      	orrs	r3, r2
 8004616:	650b      	str	r3, [r1, #80]	; 0x50
    __HAL_RCC_DFSDM2_CONFIG(PeriphClkInit->Dfsdm2ClockSelection);
  }
#endif  /* DFSDM2 */

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
 8004618:	687b      	ldr	r3, [r7, #4]
 800461a:	681b      	ldr	r3, [r3, #0]
 800461c:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8004620:	2b00      	cmp	r3, #0
 8004622:	d00d      	beq.n	8004640 <HAL_RCCEx_PeriphCLKConfig+0xda0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8004624:	4b1a      	ldr	r3, [pc, #104]	; (8004690 <HAL_RCCEx_PeriphCLKConfig+0xdf0>)
 8004626:	691b      	ldr	r3, [r3, #16]
 8004628:	4a19      	ldr	r2, [pc, #100]	; (8004690 <HAL_RCCEx_PeriphCLKConfig+0xdf0>)
 800462a:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 800462e:	6113      	str	r3, [r2, #16]
 8004630:	4b17      	ldr	r3, [pc, #92]	; (8004690 <HAL_RCCEx_PeriphCLKConfig+0xdf0>)
 8004632:	691a      	ldr	r2, [r3, #16]
 8004634:	687b      	ldr	r3, [r7, #4]
 8004636:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 800463a:	4915      	ldr	r1, [pc, #84]	; (8004690 <HAL_RCCEx_PeriphCLKConfig+0xdf0>)
 800463c:	4313      	orrs	r3, r2
 800463e:	610b      	str	r3, [r1, #16]
  }

  /*------------------------------------ CKPER configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
 8004640:	687b      	ldr	r3, [r7, #4]
 8004642:	681b      	ldr	r3, [r3, #0]
 8004644:	2b00      	cmp	r3, #0
 8004646:	da08      	bge.n	800465a <HAL_RCCEx_PeriphCLKConfig+0xdba>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLKPSOURCE(PeriphClkInit->CkperClockSelection));

    /* Configure the CKPER clock source */
    __HAL_RCC_CLKP_CONFIG(PeriphClkInit->CkperClockSelection);
 8004648:	4b11      	ldr	r3, [pc, #68]	; (8004690 <HAL_RCCEx_PeriphCLKConfig+0xdf0>)
 800464a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800464c:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8004650:	687b      	ldr	r3, [r7, #4]
 8004652:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004654:	490e      	ldr	r1, [pc, #56]	; (8004690 <HAL_RCCEx_PeriphCLKConfig+0xdf0>)
 8004656:	4313      	orrs	r3, r2
 8004658:	64cb      	str	r3, [r1, #76]	; 0x4c
  }

  /*------------------------------ CEC Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 800465a:	687b      	ldr	r3, [r7, #4]
 800465c:	681b      	ldr	r3, [r3, #0]
 800465e:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8004662:	2b00      	cmp	r3, #0
 8004664:	d009      	beq.n	800467a <HAL_RCCEx_PeriphCLKConfig+0xdda>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC interface clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8004666:	4b0a      	ldr	r3, [pc, #40]	; (8004690 <HAL_RCCEx_PeriphCLKConfig+0xdf0>)
 8004668:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800466a:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 800466e:	687b      	ldr	r3, [r7, #4]
 8004670:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004674:	4906      	ldr	r1, [pc, #24]	; (8004690 <HAL_RCCEx_PeriphCLKConfig+0xdf0>)
 8004676:	4313      	orrs	r3, r2
 8004678:	654b      	str	r3, [r1, #84]	; 0x54
  }

  if (status == HAL_OK)
 800467a:	7dbb      	ldrb	r3, [r7, #22]
 800467c:	2b00      	cmp	r3, #0
 800467e:	d101      	bne.n	8004684 <HAL_RCCEx_PeriphCLKConfig+0xde4>
  {
    return HAL_OK;
 8004680:	2300      	movs	r3, #0
 8004682:	e000      	b.n	8004686 <HAL_RCCEx_PeriphCLKConfig+0xde6>
  }
  return HAL_ERROR;
 8004684:	2301      	movs	r3, #1
}
 8004686:	4618      	mov	r0, r3
 8004688:	3718      	adds	r7, #24
 800468a:	46bd      	mov	sp, r7
 800468c:	bd80      	pop	{r7, pc}
 800468e:	bf00      	nop
 8004690:	58024400 	.word	0x58024400

08004694 <HAL_RCCEx_GetD3PCLK1Freq>:
  * @note   Each time D3PCLK1 changes, this function must be called to update the
  *         right D3PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval D3PCLK1 frequency
  */
uint32_t HAL_RCCEx_GetD3PCLK1Freq(void)
{
 8004694:	b580      	push	{r7, lr}
 8004696:	af00      	add	r7, sp, #0
#if defined(RCC_D3CFGR_D3PPRE)
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->D3CFGR & RCC_D3CFGR_D3PPRE)>> RCC_D3CFGR_D3PPRE_Pos] & 0x1FU));
 8004698:	f7ff f8a6 	bl	80037e8 <HAL_RCC_GetHCLKFreq>
 800469c:	4602      	mov	r2, r0
 800469e:	4b06      	ldr	r3, [pc, #24]	; (80046b8 <HAL_RCCEx_GetD3PCLK1Freq+0x24>)
 80046a0:	6a1b      	ldr	r3, [r3, #32]
 80046a2:	091b      	lsrs	r3, r3, #4
 80046a4:	f003 0307 	and.w	r3, r3, #7
 80046a8:	4904      	ldr	r1, [pc, #16]	; (80046bc <HAL_RCCEx_GetD3PCLK1Freq+0x28>)
 80046aa:	5ccb      	ldrb	r3, [r1, r3]
 80046ac:	f003 031f 	and.w	r3, r3, #31
 80046b0:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE)>> RCC_SRDCFGR_SRDPPRE_Pos] & 0x1FU));
#endif
}
 80046b4:	4618      	mov	r0, r3
 80046b6:	bd80      	pop	{r7, pc}
 80046b8:	58024400 	.word	0x58024400
 80046bc:	08007fa4 	.word	0x08007fa4

080046c0 <HAL_RCCEx_GetPLL2ClockFreq>:
  *         right PLL2CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL2_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL2ClockFreq(PLL2_ClocksTypeDef* PLL2_Clocks)
{
 80046c0:	b480      	push	{r7}
 80046c2:	b089      	sub	sp, #36	; 0x24
 80046c4:	af00      	add	r7, sp, #0
 80046c6:	6078      	str	r0, [r7, #4]
  float_t fracn2, pll2vco;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL2M) * PLL2N
     PLL2xCLK = PLL2_VCO / PLL2x
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 80046c8:	4ba1      	ldr	r3, [pc, #644]	; (8004950 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80046ca:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80046cc:	f003 0303 	and.w	r3, r3, #3
 80046d0:	61bb      	str	r3, [r7, #24]
  pll2m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM2)>> 12);
 80046d2:	4b9f      	ldr	r3, [pc, #636]	; (8004950 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80046d4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80046d6:	0b1b      	lsrs	r3, r3, #12
 80046d8:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80046dc:	617b      	str	r3, [r7, #20]
  pll2fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL2FRACEN) >> RCC_PLLCFGR_PLL2FRACEN_Pos;
 80046de:	4b9c      	ldr	r3, [pc, #624]	; (8004950 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80046e0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80046e2:	091b      	lsrs	r3, r3, #4
 80046e4:	f003 0301 	and.w	r3, r3, #1
 80046e8:	613b      	str	r3, [r7, #16]
  fracn2 =(float_t)(uint32_t)(pll2fracen* ((RCC->PLL2FRACR & RCC_PLL2FRACR_FRACN2)>> 3));
 80046ea:	4b99      	ldr	r3, [pc, #612]	; (8004950 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80046ec:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80046ee:	08db      	lsrs	r3, r3, #3
 80046f0:	f3c3 030c 	ubfx	r3, r3, #0, #13
 80046f4:	693a      	ldr	r2, [r7, #16]
 80046f6:	fb02 f303 	mul.w	r3, r2, r3
 80046fa:	ee07 3a90 	vmov	s15, r3
 80046fe:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004702:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll2m != 0U)
 8004706:	697b      	ldr	r3, [r7, #20]
 8004708:	2b00      	cmp	r3, #0
 800470a:	f000 8111 	beq.w	8004930 <HAL_RCCEx_GetPLL2ClockFreq+0x270>
  {
    switch (pllsource)
 800470e:	69bb      	ldr	r3, [r7, #24]
 8004710:	2b02      	cmp	r3, #2
 8004712:	f000 8083 	beq.w	800481c <HAL_RCCEx_GetPLL2ClockFreq+0x15c>
 8004716:	69bb      	ldr	r3, [r7, #24]
 8004718:	2b02      	cmp	r3, #2
 800471a:	f200 80a1 	bhi.w	8004860 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
 800471e:	69bb      	ldr	r3, [r7, #24]
 8004720:	2b00      	cmp	r3, #0
 8004722:	d003      	beq.n	800472c <HAL_RCCEx_GetPLL2ClockFreq+0x6c>
 8004724:	69bb      	ldr	r3, [r7, #24]
 8004726:	2b01      	cmp	r3, #1
 8004728:	d056      	beq.n	80047d8 <HAL_RCCEx_GetPLL2ClockFreq+0x118>
 800472a:	e099      	b.n	8004860 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
    {

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800472c:	4b88      	ldr	r3, [pc, #544]	; (8004950 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800472e:	681b      	ldr	r3, [r3, #0]
 8004730:	f003 0320 	and.w	r3, r3, #32
 8004734:	2b00      	cmp	r3, #0
 8004736:	d02d      	beq.n	8004794 <HAL_RCCEx_GetPLL2ClockFreq+0xd4>
      {
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8004738:	4b85      	ldr	r3, [pc, #532]	; (8004950 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800473a:	681b      	ldr	r3, [r3, #0]
 800473c:	08db      	lsrs	r3, r3, #3
 800473e:	f003 0303 	and.w	r3, r3, #3
 8004742:	4a84      	ldr	r2, [pc, #528]	; (8004954 <HAL_RCCEx_GetPLL2ClockFreq+0x294>)
 8004744:	fa22 f303 	lsr.w	r3, r2, r3
 8004748:	60bb      	str	r3, [r7, #8]
        pll2vco = ( (float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 800474a:	68bb      	ldr	r3, [r7, #8]
 800474c:	ee07 3a90 	vmov	s15, r3
 8004750:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004754:	697b      	ldr	r3, [r7, #20]
 8004756:	ee07 3a90 	vmov	s15, r3
 800475a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800475e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004762:	4b7b      	ldr	r3, [pc, #492]	; (8004950 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8004764:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004766:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800476a:	ee07 3a90 	vmov	s15, r3
 800476e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004772:	ed97 6a03 	vldr	s12, [r7, #12]
 8004776:	eddf 5a78 	vldr	s11, [pc, #480]	; 8004958 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800477a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800477e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004782:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8004786:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800478a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800478e:	edc7 7a07 	vstr	s15, [r7, #28]
      }
      else
      {
        pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
      }
      break;
 8004792:	e087      	b.n	80048a4 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>
        pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 8004794:	697b      	ldr	r3, [r7, #20]
 8004796:	ee07 3a90 	vmov	s15, r3
 800479a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800479e:	eddf 6a6f 	vldr	s13, [pc, #444]	; 800495c <HAL_RCCEx_GetPLL2ClockFreq+0x29c>
 80047a2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80047a6:	4b6a      	ldr	r3, [pc, #424]	; (8004950 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80047a8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80047aa:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80047ae:	ee07 3a90 	vmov	s15, r3
 80047b2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80047b6:	ed97 6a03 	vldr	s12, [r7, #12]
 80047ba:	eddf 5a67 	vldr	s11, [pc, #412]	; 8004958 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 80047be:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80047c2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80047c6:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80047ca:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80047ce:	ee67 7a27 	vmul.f32	s15, s14, s15
 80047d2:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 80047d6:	e065      	b.n	80048a4 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

    case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
      pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 80047d8:	697b      	ldr	r3, [r7, #20]
 80047da:	ee07 3a90 	vmov	s15, r3
 80047de:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80047e2:	eddf 6a5f 	vldr	s13, [pc, #380]	; 8004960 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 80047e6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80047ea:	4b59      	ldr	r3, [pc, #356]	; (8004950 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80047ec:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80047ee:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80047f2:	ee07 3a90 	vmov	s15, r3
 80047f6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80047fa:	ed97 6a03 	vldr	s12, [r7, #12]
 80047fe:	eddf 5a56 	vldr	s11, [pc, #344]	; 8004958 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8004802:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004806:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800480a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800480e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004812:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004816:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800481a:	e043      	b.n	80048a4 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 800481c:	697b      	ldr	r3, [r7, #20]
 800481e:	ee07 3a90 	vmov	s15, r3
 8004822:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004826:	eddf 6a4f 	vldr	s13, [pc, #316]	; 8004964 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>
 800482a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800482e:	4b48      	ldr	r3, [pc, #288]	; (8004950 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8004830:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004832:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004836:	ee07 3a90 	vmov	s15, r3
 800483a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800483e:	ed97 6a03 	vldr	s12, [r7, #12]
 8004842:	eddf 5a45 	vldr	s11, [pc, #276]	; 8004958 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8004846:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800484a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800484e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8004852:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004856:	ee67 7a27 	vmul.f32	s15, s14, s15
 800485a:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800485e:	e021      	b.n	80048a4 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

    default:
      pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 8004860:	697b      	ldr	r3, [r7, #20]
 8004862:	ee07 3a90 	vmov	s15, r3
 8004866:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800486a:	eddf 6a3d 	vldr	s13, [pc, #244]	; 8004960 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 800486e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004872:	4b37      	ldr	r3, [pc, #220]	; (8004950 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8004874:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004876:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800487a:	ee07 3a90 	vmov	s15, r3
 800487e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004882:	ed97 6a03 	vldr	s12, [r7, #12]
 8004886:	eddf 5a34 	vldr	s11, [pc, #208]	; 8004958 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800488a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800488e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004892:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8004896:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800489a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800489e:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 80048a2:	bf00      	nop
    }
    PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_P2) >>9)  + (float_t)1 )) ;
 80048a4:	4b2a      	ldr	r3, [pc, #168]	; (8004950 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80048a6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80048a8:	0a5b      	lsrs	r3, r3, #9
 80048aa:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80048ae:	ee07 3a90 	vmov	s15, r3
 80048b2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80048b6:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80048ba:	ee37 7a87 	vadd.f32	s14, s15, s14
 80048be:	edd7 6a07 	vldr	s13, [r7, #28]
 80048c2:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80048c6:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80048ca:	ee17 2a90 	vmov	r2, s15
 80048ce:	687b      	ldr	r3, [r7, #4]
 80048d0:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_Q2) >>16) + (float_t)1 )) ;
 80048d2:	4b1f      	ldr	r3, [pc, #124]	; (8004950 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80048d4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80048d6:	0c1b      	lsrs	r3, r3, #16
 80048d8:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80048dc:	ee07 3a90 	vmov	s15, r3
 80048e0:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80048e4:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80048e8:	ee37 7a87 	vadd.f32	s14, s15, s14
 80048ec:	edd7 6a07 	vldr	s13, [r7, #28]
 80048f0:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80048f4:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80048f8:	ee17 2a90 	vmov	r2, s15
 80048fc:	687b      	ldr	r3, [r7, #4]
 80048fe:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_R2) >>24) + (float_t)1 )) ;
 8004900:	4b13      	ldr	r3, [pc, #76]	; (8004950 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8004902:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004904:	0e1b      	lsrs	r3, r3, #24
 8004906:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800490a:	ee07 3a90 	vmov	s15, r3
 800490e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004912:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8004916:	ee37 7a87 	vadd.f32	s14, s15, s14
 800491a:	edd7 6a07 	vldr	s13, [r7, #28]
 800491e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8004922:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8004926:	ee17 2a90 	vmov	r2, s15
 800492a:	687b      	ldr	r3, [r7, #4]
 800492c:	609a      	str	r2, [r3, #8]
  {
    PLL2_Clocks->PLL2_P_Frequency = 0U;
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
    PLL2_Clocks->PLL2_R_Frequency = 0U;
  }
}
 800492e:	e008      	b.n	8004942 <HAL_RCCEx_GetPLL2ClockFreq+0x282>
    PLL2_Clocks->PLL2_P_Frequency = 0U;
 8004930:	687b      	ldr	r3, [r7, #4]
 8004932:	2200      	movs	r2, #0
 8004934:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
 8004936:	687b      	ldr	r3, [r7, #4]
 8004938:	2200      	movs	r2, #0
 800493a:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = 0U;
 800493c:	687b      	ldr	r3, [r7, #4]
 800493e:	2200      	movs	r2, #0
 8004940:	609a      	str	r2, [r3, #8]
}
 8004942:	bf00      	nop
 8004944:	3724      	adds	r7, #36	; 0x24
 8004946:	46bd      	mov	sp, r7
 8004948:	f85d 7b04 	ldr.w	r7, [sp], #4
 800494c:	4770      	bx	lr
 800494e:	bf00      	nop
 8004950:	58024400 	.word	0x58024400
 8004954:	03d09000 	.word	0x03d09000
 8004958:	46000000 	.word	0x46000000
 800495c:	4c742400 	.word	0x4c742400
 8004960:	4a742400 	.word	0x4a742400
 8004964:	4af42400 	.word	0x4af42400

08004968 <HAL_RCCEx_GetPLL3ClockFreq>:
  *         right PLL3CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL3_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL3ClockFreq(PLL3_ClocksTypeDef* PLL3_Clocks)
{
 8004968:	b480      	push	{r7}
 800496a:	b089      	sub	sp, #36	; 0x24
 800496c:	af00      	add	r7, sp, #0
 800496e:	6078      	str	r0, [r7, #4]
  float_t fracn3, pll3vco;

  /* PLL3_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL3M) * PLL3N
     PLL3xCLK = PLL3_VCO / PLLxR
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8004970:	4ba1      	ldr	r3, [pc, #644]	; (8004bf8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8004972:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004974:	f003 0303 	and.w	r3, r3, #3
 8004978:	61bb      	str	r3, [r7, #24]
  pll3m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM3)>> 20)  ;
 800497a:	4b9f      	ldr	r3, [pc, #636]	; (8004bf8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800497c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800497e:	0d1b      	lsrs	r3, r3, #20
 8004980:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8004984:	617b      	str	r3, [r7, #20]
  pll3fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL3FRACEN) >> RCC_PLLCFGR_PLL3FRACEN_Pos;
 8004986:	4b9c      	ldr	r3, [pc, #624]	; (8004bf8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8004988:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800498a:	0a1b      	lsrs	r3, r3, #8
 800498c:	f003 0301 	and.w	r3, r3, #1
 8004990:	613b      	str	r3, [r7, #16]
  fracn3 = (float_t)(uint32_t)(pll3fracen* ((RCC->PLL3FRACR & RCC_PLL3FRACR_FRACN3)>> 3));
 8004992:	4b99      	ldr	r3, [pc, #612]	; (8004bf8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8004994:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004996:	08db      	lsrs	r3, r3, #3
 8004998:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800499c:	693a      	ldr	r2, [r7, #16]
 800499e:	fb02 f303 	mul.w	r3, r2, r3
 80049a2:	ee07 3a90 	vmov	s15, r3
 80049a6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80049aa:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll3m != 0U)
 80049ae:	697b      	ldr	r3, [r7, #20]
 80049b0:	2b00      	cmp	r3, #0
 80049b2:	f000 8111 	beq.w	8004bd8 <HAL_RCCEx_GetPLL3ClockFreq+0x270>
  {
    switch (pllsource)
 80049b6:	69bb      	ldr	r3, [r7, #24]
 80049b8:	2b02      	cmp	r3, #2
 80049ba:	f000 8083 	beq.w	8004ac4 <HAL_RCCEx_GetPLL3ClockFreq+0x15c>
 80049be:	69bb      	ldr	r3, [r7, #24]
 80049c0:	2b02      	cmp	r3, #2
 80049c2:	f200 80a1 	bhi.w	8004b08 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
 80049c6:	69bb      	ldr	r3, [r7, #24]
 80049c8:	2b00      	cmp	r3, #0
 80049ca:	d003      	beq.n	80049d4 <HAL_RCCEx_GetPLL3ClockFreq+0x6c>
 80049cc:	69bb      	ldr	r3, [r7, #24]
 80049ce:	2b01      	cmp	r3, #1
 80049d0:	d056      	beq.n	8004a80 <HAL_RCCEx_GetPLL3ClockFreq+0x118>
 80049d2:	e099      	b.n	8004b08 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80049d4:	4b88      	ldr	r3, [pc, #544]	; (8004bf8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80049d6:	681b      	ldr	r3, [r3, #0]
 80049d8:	f003 0320 	and.w	r3, r3, #32
 80049dc:	2b00      	cmp	r3, #0
 80049de:	d02d      	beq.n	8004a3c <HAL_RCCEx_GetPLL3ClockFreq+0xd4>
      {
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 80049e0:	4b85      	ldr	r3, [pc, #532]	; (8004bf8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80049e2:	681b      	ldr	r3, [r3, #0]
 80049e4:	08db      	lsrs	r3, r3, #3
 80049e6:	f003 0303 	and.w	r3, r3, #3
 80049ea:	4a84      	ldr	r2, [pc, #528]	; (8004bfc <HAL_RCCEx_GetPLL3ClockFreq+0x294>)
 80049ec:	fa22 f303 	lsr.w	r3, r2, r3
 80049f0:	60bb      	str	r3, [r7, #8]
        pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 80049f2:	68bb      	ldr	r3, [r7, #8]
 80049f4:	ee07 3a90 	vmov	s15, r3
 80049f8:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80049fc:	697b      	ldr	r3, [r7, #20]
 80049fe:	ee07 3a90 	vmov	s15, r3
 8004a02:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004a06:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004a0a:	4b7b      	ldr	r3, [pc, #492]	; (8004bf8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8004a0c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004a0e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004a12:	ee07 3a90 	vmov	s15, r3
 8004a16:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004a1a:	ed97 6a03 	vldr	s12, [r7, #12]
 8004a1e:	eddf 5a78 	vldr	s11, [pc, #480]	; 8004c00 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8004a22:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004a26:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004a2a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8004a2e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004a32:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004a36:	edc7 7a07 	vstr	s15, [r7, #28]
      }
      else
      {
        pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
      }
      break;
 8004a3a:	e087      	b.n	8004b4c <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
        pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 8004a3c:	697b      	ldr	r3, [r7, #20]
 8004a3e:	ee07 3a90 	vmov	s15, r3
 8004a42:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004a46:	eddf 6a6f 	vldr	s13, [pc, #444]	; 8004c04 <HAL_RCCEx_GetPLL3ClockFreq+0x29c>
 8004a4a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004a4e:	4b6a      	ldr	r3, [pc, #424]	; (8004bf8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8004a50:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004a52:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004a56:	ee07 3a90 	vmov	s15, r3
 8004a5a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004a5e:	ed97 6a03 	vldr	s12, [r7, #12]
 8004a62:	eddf 5a67 	vldr	s11, [pc, #412]	; 8004c00 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8004a66:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004a6a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004a6e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8004a72:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004a76:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004a7a:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8004a7e:	e065      	b.n	8004b4c <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
    case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
      pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 8004a80:	697b      	ldr	r3, [r7, #20]
 8004a82:	ee07 3a90 	vmov	s15, r3
 8004a86:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004a8a:	eddf 6a5f 	vldr	s13, [pc, #380]	; 8004c08 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 8004a8e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004a92:	4b59      	ldr	r3, [pc, #356]	; (8004bf8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8004a94:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004a96:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004a9a:	ee07 3a90 	vmov	s15, r3
 8004a9e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004aa2:	ed97 6a03 	vldr	s12, [r7, #12]
 8004aa6:	eddf 5a56 	vldr	s11, [pc, #344]	; 8004c00 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8004aaa:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004aae:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004ab2:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8004ab6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004aba:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004abe:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8004ac2:	e043      	b.n	8004b4c <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 8004ac4:	697b      	ldr	r3, [r7, #20]
 8004ac6:	ee07 3a90 	vmov	s15, r3
 8004aca:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004ace:	eddf 6a4f 	vldr	s13, [pc, #316]	; 8004c0c <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>
 8004ad2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004ad6:	4b48      	ldr	r3, [pc, #288]	; (8004bf8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8004ad8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004ada:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004ade:	ee07 3a90 	vmov	s15, r3
 8004ae2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004ae6:	ed97 6a03 	vldr	s12, [r7, #12]
 8004aea:	eddf 5a45 	vldr	s11, [pc, #276]	; 8004c00 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8004aee:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004af2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004af6:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8004afa:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004afe:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004b02:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8004b06:	e021      	b.n	8004b4c <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

    default:
      pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 8004b08:	697b      	ldr	r3, [r7, #20]
 8004b0a:	ee07 3a90 	vmov	s15, r3
 8004b0e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004b12:	eddf 6a3d 	vldr	s13, [pc, #244]	; 8004c08 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 8004b16:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004b1a:	4b37      	ldr	r3, [pc, #220]	; (8004bf8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8004b1c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004b1e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004b22:	ee07 3a90 	vmov	s15, r3
 8004b26:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004b2a:	ed97 6a03 	vldr	s12, [r7, #12]
 8004b2e:	eddf 5a34 	vldr	s11, [pc, #208]	; 8004c00 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8004b32:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004b36:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004b3a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8004b3e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004b42:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004b46:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8004b4a:	bf00      	nop
    }
    PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_P3) >>9)  + (float_t)1 )) ;
 8004b4c:	4b2a      	ldr	r3, [pc, #168]	; (8004bf8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8004b4e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004b50:	0a5b      	lsrs	r3, r3, #9
 8004b52:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8004b56:	ee07 3a90 	vmov	s15, r3
 8004b5a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004b5e:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8004b62:	ee37 7a87 	vadd.f32	s14, s15, s14
 8004b66:	edd7 6a07 	vldr	s13, [r7, #28]
 8004b6a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8004b6e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8004b72:	ee17 2a90 	vmov	r2, s15
 8004b76:	687b      	ldr	r3, [r7, #4]
 8004b78:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_Q3) >>16) + (float_t)1 )) ;
 8004b7a:	4b1f      	ldr	r3, [pc, #124]	; (8004bf8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8004b7c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004b7e:	0c1b      	lsrs	r3, r3, #16
 8004b80:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8004b84:	ee07 3a90 	vmov	s15, r3
 8004b88:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004b8c:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8004b90:	ee37 7a87 	vadd.f32	s14, s15, s14
 8004b94:	edd7 6a07 	vldr	s13, [r7, #28]
 8004b98:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8004b9c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8004ba0:	ee17 2a90 	vmov	r2, s15
 8004ba4:	687b      	ldr	r3, [r7, #4]
 8004ba6:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_R3) >>24) + (float_t)1 )) ;
 8004ba8:	4b13      	ldr	r3, [pc, #76]	; (8004bf8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8004baa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004bac:	0e1b      	lsrs	r3, r3, #24
 8004bae:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8004bb2:	ee07 3a90 	vmov	s15, r3
 8004bb6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004bba:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8004bbe:	ee37 7a87 	vadd.f32	s14, s15, s14
 8004bc2:	edd7 6a07 	vldr	s13, [r7, #28]
 8004bc6:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8004bca:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8004bce:	ee17 2a90 	vmov	r2, s15
 8004bd2:	687b      	ldr	r3, [r7, #4]
 8004bd4:	609a      	str	r2, [r3, #8]
    PLL3_Clocks->PLL3_P_Frequency = 0U;
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
    PLL3_Clocks->PLL3_R_Frequency = 0U;
  }

}
 8004bd6:	e008      	b.n	8004bea <HAL_RCCEx_GetPLL3ClockFreq+0x282>
    PLL3_Clocks->PLL3_P_Frequency = 0U;
 8004bd8:	687b      	ldr	r3, [r7, #4]
 8004bda:	2200      	movs	r2, #0
 8004bdc:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
 8004bde:	687b      	ldr	r3, [r7, #4]
 8004be0:	2200      	movs	r2, #0
 8004be2:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = 0U;
 8004be4:	687b      	ldr	r3, [r7, #4]
 8004be6:	2200      	movs	r2, #0
 8004be8:	609a      	str	r2, [r3, #8]
}
 8004bea:	bf00      	nop
 8004bec:	3724      	adds	r7, #36	; 0x24
 8004bee:	46bd      	mov	sp, r7
 8004bf0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004bf4:	4770      	bx	lr
 8004bf6:	bf00      	nop
 8004bf8:	58024400 	.word	0x58024400
 8004bfc:	03d09000 	.word	0x03d09000
 8004c00:	46000000 	.word	0x46000000
 8004c04:	4c742400 	.word	0x4c742400
 8004c08:	4a742400 	.word	0x4a742400
 8004c0c:	4af42400 	.word	0x4af42400

08004c10 <HAL_RCCEx_CRSConfig>:
  * @brief  Start automatic synchronization for polling mode
  * @param  pInit Pointer on RCC_CRSInitTypeDef structure
  * @retval None
  */
void HAL_RCCEx_CRSConfig(RCC_CRSInitTypeDef *pInit)
{
 8004c10:	b580      	push	{r7, lr}
 8004c12:	b084      	sub	sp, #16
 8004c14:	af00      	add	r7, sp, #0
 8004c16:	6078      	str	r0, [r7, #4]
  assert_param(IS_RCC_CRS_HSI48CALIBRATION(pInit->HSI48CalibrationValue));

  /* CONFIGURATION */

  /* Before configuration, reset CRS registers to their default values*/
  __HAL_RCC_CRS_FORCE_RESET();
 8004c18:	4b26      	ldr	r3, [pc, #152]	; (8004cb4 <HAL_RCCEx_CRSConfig+0xa4>)
 8004c1a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004c1e:	4a25      	ldr	r2, [pc, #148]	; (8004cb4 <HAL_RCCEx_CRSConfig+0xa4>)
 8004c20:	f043 0302 	orr.w	r3, r3, #2
 8004c24:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
  __HAL_RCC_CRS_RELEASE_RESET();
 8004c28:	4b22      	ldr	r3, [pc, #136]	; (8004cb4 <HAL_RCCEx_CRSConfig+0xa4>)
 8004c2a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004c2e:	4a21      	ldr	r2, [pc, #132]	; (8004cb4 <HAL_RCCEx_CRSConfig+0xa4>)
 8004c30:	f023 0302 	bic.w	r3, r3, #2
 8004c34:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

  /* Set the SYNCDIV[2:0] bits according to Pre-scaler value */
  /* Set the SYNCSRC[1:0] bits according to Source value */
  /* Set the SYNCSPOL bit according to Polarity value */
  if ((HAL_GetREVID() <= REV_ID_Y) && (pInit->Source == RCC_CRS_SYNC_SOURCE_USB2))
 8004c38:	f7fc fc8a 	bl	8001550 <HAL_GetREVID>
 8004c3c:	4603      	mov	r3, r0
 8004c3e:	f241 0203 	movw	r2, #4099	; 0x1003
 8004c42:	4293      	cmp	r3, r2
 8004c44:	d80b      	bhi.n	8004c5e <HAL_RCCEx_CRSConfig+0x4e>
 8004c46:	687b      	ldr	r3, [r7, #4]
 8004c48:	685b      	ldr	r3, [r3, #4]
 8004c4a:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8004c4e:	d106      	bne.n	8004c5e <HAL_RCCEx_CRSConfig+0x4e>
  {
    /* Use Rev.Y value of USB2 */
    value = (pInit->Prescaler | RCC_CRS_SYNC_SOURCE_PIN | pInit->Polarity);
 8004c50:	687b      	ldr	r3, [r7, #4]
 8004c52:	681a      	ldr	r2, [r3, #0]
 8004c54:	687b      	ldr	r3, [r7, #4]
 8004c56:	689b      	ldr	r3, [r3, #8]
 8004c58:	4313      	orrs	r3, r2
 8004c5a:	60fb      	str	r3, [r7, #12]
 8004c5c:	e008      	b.n	8004c70 <HAL_RCCEx_CRSConfig+0x60>
  }
  else
  {
    value = (pInit->Prescaler | pInit->Source | pInit->Polarity);
 8004c5e:	687b      	ldr	r3, [r7, #4]
 8004c60:	681a      	ldr	r2, [r3, #0]
 8004c62:	687b      	ldr	r3, [r7, #4]
 8004c64:	685b      	ldr	r3, [r3, #4]
 8004c66:	431a      	orrs	r2, r3
 8004c68:	687b      	ldr	r3, [r7, #4]
 8004c6a:	689b      	ldr	r3, [r3, #8]
 8004c6c:	4313      	orrs	r3, r2
 8004c6e:	60fb      	str	r3, [r7, #12]
  }
  /* Set the RELOAD[15:0] bits according to ReloadValue value */
  value |= pInit->ReloadValue;
 8004c70:	687b      	ldr	r3, [r7, #4]
 8004c72:	68db      	ldr	r3, [r3, #12]
 8004c74:	68fa      	ldr	r2, [r7, #12]
 8004c76:	4313      	orrs	r3, r2
 8004c78:	60fb      	str	r3, [r7, #12]
  /* Set the FELIM[7:0] bits according to ErrorLimitValue value */
  value |= (pInit->ErrorLimitValue << CRS_CFGR_FELIM_Pos);
 8004c7a:	687b      	ldr	r3, [r7, #4]
 8004c7c:	691b      	ldr	r3, [r3, #16]
 8004c7e:	041b      	lsls	r3, r3, #16
 8004c80:	68fa      	ldr	r2, [r7, #12]
 8004c82:	4313      	orrs	r3, r2
 8004c84:	60fb      	str	r3, [r7, #12]
  WRITE_REG(CRS->CFGR, value);
 8004c86:	4a0c      	ldr	r2, [pc, #48]	; (8004cb8 <HAL_RCCEx_CRSConfig+0xa8>)
 8004c88:	68fb      	ldr	r3, [r7, #12]
 8004c8a:	6053      	str	r3, [r2, #4]

  /* Adjust HSI48 oscillator smooth trimming */
  /* Set the TRIM[5:0] bits according to RCC_CRS_HSI48CalibrationValue value */
  MODIFY_REG(CRS->CR, CRS_CR_TRIM, (pInit->HSI48CalibrationValue << CRS_CR_TRIM_Pos));
 8004c8c:	4b0a      	ldr	r3, [pc, #40]	; (8004cb8 <HAL_RCCEx_CRSConfig+0xa8>)
 8004c8e:	681b      	ldr	r3, [r3, #0]
 8004c90:	f423 527c 	bic.w	r2, r3, #16128	; 0x3f00
 8004c94:	687b      	ldr	r3, [r7, #4]
 8004c96:	695b      	ldr	r3, [r3, #20]
 8004c98:	021b      	lsls	r3, r3, #8
 8004c9a:	4907      	ldr	r1, [pc, #28]	; (8004cb8 <HAL_RCCEx_CRSConfig+0xa8>)
 8004c9c:	4313      	orrs	r3, r2
 8004c9e:	600b      	str	r3, [r1, #0]

  /* START AUTOMATIC SYNCHRONIZATION*/

  /* Enable Automatic trimming & Frequency error counter */
  SET_BIT(CRS->CR, CRS_CR_AUTOTRIMEN | CRS_CR_CEN);
 8004ca0:	4b05      	ldr	r3, [pc, #20]	; (8004cb8 <HAL_RCCEx_CRSConfig+0xa8>)
 8004ca2:	681b      	ldr	r3, [r3, #0]
 8004ca4:	4a04      	ldr	r2, [pc, #16]	; (8004cb8 <HAL_RCCEx_CRSConfig+0xa8>)
 8004ca6:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 8004caa:	6013      	str	r3, [r2, #0]
}
 8004cac:	bf00      	nop
 8004cae:	3710      	adds	r7, #16
 8004cb0:	46bd      	mov	sp, r7
 8004cb2:	bd80      	pop	{r7, pc}
 8004cb4:	58024400 	.word	0x58024400
 8004cb8:	40008400 	.word	0x40008400

08004cbc <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(RCC_PLL2InitTypeDef *pll2, uint32_t Divider)
{
 8004cbc:	b580      	push	{r7, lr}
 8004cbe:	b084      	sub	sp, #16
 8004cc0:	af00      	add	r7, sp, #0
 8004cc2:	6078      	str	r0, [r7, #4]
 8004cc4:	6039      	str	r1, [r7, #0]

  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8004cc6:	2300      	movs	r3, #0
 8004cc8:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL2RGE_VALUE(pll2->PLL2RGE));
  assert_param(IS_RCC_PLL2VCO_VALUE(pll2->PLL2VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll2->PLL2FRACN));

  /* Check that PLL2 OSC clock source is already set */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8004cca:	4b53      	ldr	r3, [pc, #332]	; (8004e18 <RCCEx_PLL2_Config+0x15c>)
 8004ccc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004cce:	f003 0303 	and.w	r3, r3, #3
 8004cd2:	2b03      	cmp	r3, #3
 8004cd4:	d101      	bne.n	8004cda <RCCEx_PLL2_Config+0x1e>
  {
    return HAL_ERROR;
 8004cd6:	2301      	movs	r3, #1
 8004cd8:	e099      	b.n	8004e0e <RCCEx_PLL2_Config+0x152>


  else
  {
    /* Disable  PLL2. */
    __HAL_RCC_PLL2_DISABLE();
 8004cda:	4b4f      	ldr	r3, [pc, #316]	; (8004e18 <RCCEx_PLL2_Config+0x15c>)
 8004cdc:	681b      	ldr	r3, [r3, #0]
 8004cde:	4a4e      	ldr	r2, [pc, #312]	; (8004e18 <RCCEx_PLL2_Config+0x15c>)
 8004ce0:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8004ce4:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004ce6:	f7fc fc03 	bl	80014f0 <HAL_GetTick>
 8004cea:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8004cec:	e008      	b.n	8004d00 <RCCEx_PLL2_Config+0x44>
    {
      if( (HAL_GetTick() - tickstart ) > PLL2_TIMEOUT_VALUE)
 8004cee:	f7fc fbff 	bl	80014f0 <HAL_GetTick>
 8004cf2:	4602      	mov	r2, r0
 8004cf4:	68bb      	ldr	r3, [r7, #8]
 8004cf6:	1ad3      	subs	r3, r2, r3
 8004cf8:	2b02      	cmp	r3, #2
 8004cfa:	d901      	bls.n	8004d00 <RCCEx_PLL2_Config+0x44>
      {
        return HAL_TIMEOUT;
 8004cfc:	2303      	movs	r3, #3
 8004cfe:	e086      	b.n	8004e0e <RCCEx_PLL2_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8004d00:	4b45      	ldr	r3, [pc, #276]	; (8004e18 <RCCEx_PLL2_Config+0x15c>)
 8004d02:	681b      	ldr	r3, [r3, #0]
 8004d04:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8004d08:	2b00      	cmp	r3, #0
 8004d0a:	d1f0      	bne.n	8004cee <RCCEx_PLL2_Config+0x32>
      }
    }

    /* Configure PLL2 multiplication and division factors. */
    __HAL_RCC_PLL2_CONFIG(pll2->PLL2M,
 8004d0c:	4b42      	ldr	r3, [pc, #264]	; (8004e18 <RCCEx_PLL2_Config+0x15c>)
 8004d0e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004d10:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 8004d14:	687b      	ldr	r3, [r7, #4]
 8004d16:	681b      	ldr	r3, [r3, #0]
 8004d18:	031b      	lsls	r3, r3, #12
 8004d1a:	493f      	ldr	r1, [pc, #252]	; (8004e18 <RCCEx_PLL2_Config+0x15c>)
 8004d1c:	4313      	orrs	r3, r2
 8004d1e:	628b      	str	r3, [r1, #40]	; 0x28
 8004d20:	687b      	ldr	r3, [r7, #4]
 8004d22:	685b      	ldr	r3, [r3, #4]
 8004d24:	3b01      	subs	r3, #1
 8004d26:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8004d2a:	687b      	ldr	r3, [r7, #4]
 8004d2c:	689b      	ldr	r3, [r3, #8]
 8004d2e:	3b01      	subs	r3, #1
 8004d30:	025b      	lsls	r3, r3, #9
 8004d32:	b29b      	uxth	r3, r3
 8004d34:	431a      	orrs	r2, r3
 8004d36:	687b      	ldr	r3, [r7, #4]
 8004d38:	68db      	ldr	r3, [r3, #12]
 8004d3a:	3b01      	subs	r3, #1
 8004d3c:	041b      	lsls	r3, r3, #16
 8004d3e:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 8004d42:	431a      	orrs	r2, r3
 8004d44:	687b      	ldr	r3, [r7, #4]
 8004d46:	691b      	ldr	r3, [r3, #16]
 8004d48:	3b01      	subs	r3, #1
 8004d4a:	061b      	lsls	r3, r3, #24
 8004d4c:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 8004d50:	4931      	ldr	r1, [pc, #196]	; (8004e18 <RCCEx_PLL2_Config+0x15c>)
 8004d52:	4313      	orrs	r3, r2
 8004d54:	638b      	str	r3, [r1, #56]	; 0x38
                          pll2->PLL2P,
                          pll2->PLL2Q,
                          pll2->PLL2R);

    /* Select PLL2 input reference frequency range: VCI */
    __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE) ;
 8004d56:	4b30      	ldr	r3, [pc, #192]	; (8004e18 <RCCEx_PLL2_Config+0x15c>)
 8004d58:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004d5a:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8004d5e:	687b      	ldr	r3, [r7, #4]
 8004d60:	695b      	ldr	r3, [r3, #20]
 8004d62:	492d      	ldr	r1, [pc, #180]	; (8004e18 <RCCEx_PLL2_Config+0x15c>)
 8004d64:	4313      	orrs	r3, r2
 8004d66:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL2 output frequency range : VCO */
    __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL) ;
 8004d68:	4b2b      	ldr	r3, [pc, #172]	; (8004e18 <RCCEx_PLL2_Config+0x15c>)
 8004d6a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004d6c:	f023 0220 	bic.w	r2, r3, #32
 8004d70:	687b      	ldr	r3, [r7, #4]
 8004d72:	699b      	ldr	r3, [r3, #24]
 8004d74:	4928      	ldr	r1, [pc, #160]	; (8004e18 <RCCEx_PLL2_Config+0x15c>)
 8004d76:	4313      	orrs	r3, r2
 8004d78:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_DISABLE();
 8004d7a:	4b27      	ldr	r3, [pc, #156]	; (8004e18 <RCCEx_PLL2_Config+0x15c>)
 8004d7c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004d7e:	4a26      	ldr	r2, [pc, #152]	; (8004e18 <RCCEx_PLL2_Config+0x15c>)
 8004d80:	f023 0310 	bic.w	r3, r3, #16
 8004d84:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 8004d86:	4b24      	ldr	r3, [pc, #144]	; (8004e18 <RCCEx_PLL2_Config+0x15c>)
 8004d88:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8004d8a:	4b24      	ldr	r3, [pc, #144]	; (8004e1c <RCCEx_PLL2_Config+0x160>)
 8004d8c:	4013      	ands	r3, r2
 8004d8e:	687a      	ldr	r2, [r7, #4]
 8004d90:	69d2      	ldr	r2, [r2, #28]
 8004d92:	00d2      	lsls	r2, r2, #3
 8004d94:	4920      	ldr	r1, [pc, #128]	; (8004e18 <RCCEx_PLL2_Config+0x15c>)
 8004d96:	4313      	orrs	r3, r2
 8004d98:	63cb      	str	r3, [r1, #60]	; 0x3c

    /* Enable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_ENABLE();
 8004d9a:	4b1f      	ldr	r3, [pc, #124]	; (8004e18 <RCCEx_PLL2_Config+0x15c>)
 8004d9c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004d9e:	4a1e      	ldr	r2, [pc, #120]	; (8004e18 <RCCEx_PLL2_Config+0x15c>)
 8004da0:	f043 0310 	orr.w	r3, r3, #16
 8004da4:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL2 clock output */
    if(Divider == DIVIDER_P_UPDATE)
 8004da6:	683b      	ldr	r3, [r7, #0]
 8004da8:	2b00      	cmp	r3, #0
 8004daa:	d106      	bne.n	8004dba <RCCEx_PLL2_Config+0xfe>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 8004dac:	4b1a      	ldr	r3, [pc, #104]	; (8004e18 <RCCEx_PLL2_Config+0x15c>)
 8004dae:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004db0:	4a19      	ldr	r2, [pc, #100]	; (8004e18 <RCCEx_PLL2_Config+0x15c>)
 8004db2:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8004db6:	62d3      	str	r3, [r2, #44]	; 0x2c
 8004db8:	e00f      	b.n	8004dda <RCCEx_PLL2_Config+0x11e>
    }
    else if(Divider == DIVIDER_Q_UPDATE)
 8004dba:	683b      	ldr	r3, [r7, #0]
 8004dbc:	2b01      	cmp	r3, #1
 8004dbe:	d106      	bne.n	8004dce <RCCEx_PLL2_Config+0x112>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVQ);
 8004dc0:	4b15      	ldr	r3, [pc, #84]	; (8004e18 <RCCEx_PLL2_Config+0x15c>)
 8004dc2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004dc4:	4a14      	ldr	r2, [pc, #80]	; (8004e18 <RCCEx_PLL2_Config+0x15c>)
 8004dc6:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8004dca:	62d3      	str	r3, [r2, #44]	; 0x2c
 8004dcc:	e005      	b.n	8004dda <RCCEx_PLL2_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVR);
 8004dce:	4b12      	ldr	r3, [pc, #72]	; (8004e18 <RCCEx_PLL2_Config+0x15c>)
 8004dd0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004dd2:	4a11      	ldr	r2, [pc, #68]	; (8004e18 <RCCEx_PLL2_Config+0x15c>)
 8004dd4:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8004dd8:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL2. */
    __HAL_RCC_PLL2_ENABLE();
 8004dda:	4b0f      	ldr	r3, [pc, #60]	; (8004e18 <RCCEx_PLL2_Config+0x15c>)
 8004ddc:	681b      	ldr	r3, [r3, #0]
 8004dde:	4a0e      	ldr	r2, [pc, #56]	; (8004e18 <RCCEx_PLL2_Config+0x15c>)
 8004de0:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8004de4:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004de6:	f7fc fb83 	bl	80014f0 <HAL_GetTick>
 8004dea:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL2 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8004dec:	e008      	b.n	8004e00 <RCCEx_PLL2_Config+0x144>
    {
      if( (HAL_GetTick() - tickstart ) > PLL2_TIMEOUT_VALUE)
 8004dee:	f7fc fb7f 	bl	80014f0 <HAL_GetTick>
 8004df2:	4602      	mov	r2, r0
 8004df4:	68bb      	ldr	r3, [r7, #8]
 8004df6:	1ad3      	subs	r3, r2, r3
 8004df8:	2b02      	cmp	r3, #2
 8004dfa:	d901      	bls.n	8004e00 <RCCEx_PLL2_Config+0x144>
      {
        return HAL_TIMEOUT;
 8004dfc:	2303      	movs	r3, #3
 8004dfe:	e006      	b.n	8004e0e <RCCEx_PLL2_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8004e00:	4b05      	ldr	r3, [pc, #20]	; (8004e18 <RCCEx_PLL2_Config+0x15c>)
 8004e02:	681b      	ldr	r3, [r3, #0]
 8004e04:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8004e08:	2b00      	cmp	r3, #0
 8004e0a:	d0f0      	beq.n	8004dee <RCCEx_PLL2_Config+0x132>
    }

  }


  return status;
 8004e0c:	7bfb      	ldrb	r3, [r7, #15]
}
 8004e0e:	4618      	mov	r0, r3
 8004e10:	3710      	adds	r7, #16
 8004e12:	46bd      	mov	sp, r7
 8004e14:	bd80      	pop	{r7, pc}
 8004e16:	bf00      	nop
 8004e18:	58024400 	.word	0x58024400
 8004e1c:	ffff0007 	.word	0xffff0007

08004e20 <RCCEx_PLL3_Config>:
  * @note   PLL3 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(RCC_PLL3InitTypeDef *pll3, uint32_t Divider)
{
 8004e20:	b580      	push	{r7, lr}
 8004e22:	b084      	sub	sp, #16
 8004e24:	af00      	add	r7, sp, #0
 8004e26:	6078      	str	r0, [r7, #4]
 8004e28:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8004e2a:	2300      	movs	r3, #0
 8004e2c:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL3RGE_VALUE(pll3->PLL3RGE));
  assert_param(IS_RCC_PLL3VCO_VALUE(pll3->PLL3VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll3->PLL3FRACN));

  /* Check that PLL3 OSC clock source is already set */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8004e2e:	4b53      	ldr	r3, [pc, #332]	; (8004f7c <RCCEx_PLL3_Config+0x15c>)
 8004e30:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004e32:	f003 0303 	and.w	r3, r3, #3
 8004e36:	2b03      	cmp	r3, #3
 8004e38:	d101      	bne.n	8004e3e <RCCEx_PLL3_Config+0x1e>
  {
    return HAL_ERROR;
 8004e3a:	2301      	movs	r3, #1
 8004e3c:	e099      	b.n	8004f72 <RCCEx_PLL3_Config+0x152>


  else
  {
    /* Disable  PLL3. */
    __HAL_RCC_PLL3_DISABLE();
 8004e3e:	4b4f      	ldr	r3, [pc, #316]	; (8004f7c <RCCEx_PLL3_Config+0x15c>)
 8004e40:	681b      	ldr	r3, [r3, #0]
 8004e42:	4a4e      	ldr	r2, [pc, #312]	; (8004f7c <RCCEx_PLL3_Config+0x15c>)
 8004e44:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004e48:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004e4a:	f7fc fb51 	bl	80014f0 <HAL_GetTick>
 8004e4e:	60b8      	str	r0, [r7, #8]
    /* Wait till PLL3 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8004e50:	e008      	b.n	8004e64 <RCCEx_PLL3_Config+0x44>
    {
      if( (HAL_GetTick() - tickstart ) > PLL3_TIMEOUT_VALUE)
 8004e52:	f7fc fb4d 	bl	80014f0 <HAL_GetTick>
 8004e56:	4602      	mov	r2, r0
 8004e58:	68bb      	ldr	r3, [r7, #8]
 8004e5a:	1ad3      	subs	r3, r2, r3
 8004e5c:	2b02      	cmp	r3, #2
 8004e5e:	d901      	bls.n	8004e64 <RCCEx_PLL3_Config+0x44>
      {
        return HAL_TIMEOUT;
 8004e60:	2303      	movs	r3, #3
 8004e62:	e086      	b.n	8004f72 <RCCEx_PLL3_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8004e64:	4b45      	ldr	r3, [pc, #276]	; (8004f7c <RCCEx_PLL3_Config+0x15c>)
 8004e66:	681b      	ldr	r3, [r3, #0]
 8004e68:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8004e6c:	2b00      	cmp	r3, #0
 8004e6e:	d1f0      	bne.n	8004e52 <RCCEx_PLL3_Config+0x32>
      }
    }

    /* Configure the PLL3  multiplication and division factors. */
    __HAL_RCC_PLL3_CONFIG(pll3->PLL3M,
 8004e70:	4b42      	ldr	r3, [pc, #264]	; (8004f7c <RCCEx_PLL3_Config+0x15c>)
 8004e72:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004e74:	f023 727c 	bic.w	r2, r3, #66060288	; 0x3f00000
 8004e78:	687b      	ldr	r3, [r7, #4]
 8004e7a:	681b      	ldr	r3, [r3, #0]
 8004e7c:	051b      	lsls	r3, r3, #20
 8004e7e:	493f      	ldr	r1, [pc, #252]	; (8004f7c <RCCEx_PLL3_Config+0x15c>)
 8004e80:	4313      	orrs	r3, r2
 8004e82:	628b      	str	r3, [r1, #40]	; 0x28
 8004e84:	687b      	ldr	r3, [r7, #4]
 8004e86:	685b      	ldr	r3, [r3, #4]
 8004e88:	3b01      	subs	r3, #1
 8004e8a:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8004e8e:	687b      	ldr	r3, [r7, #4]
 8004e90:	689b      	ldr	r3, [r3, #8]
 8004e92:	3b01      	subs	r3, #1
 8004e94:	025b      	lsls	r3, r3, #9
 8004e96:	b29b      	uxth	r3, r3
 8004e98:	431a      	orrs	r2, r3
 8004e9a:	687b      	ldr	r3, [r7, #4]
 8004e9c:	68db      	ldr	r3, [r3, #12]
 8004e9e:	3b01      	subs	r3, #1
 8004ea0:	041b      	lsls	r3, r3, #16
 8004ea2:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 8004ea6:	431a      	orrs	r2, r3
 8004ea8:	687b      	ldr	r3, [r7, #4]
 8004eaa:	691b      	ldr	r3, [r3, #16]
 8004eac:	3b01      	subs	r3, #1
 8004eae:	061b      	lsls	r3, r3, #24
 8004eb0:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 8004eb4:	4931      	ldr	r1, [pc, #196]	; (8004f7c <RCCEx_PLL3_Config+0x15c>)
 8004eb6:	4313      	orrs	r3, r2
 8004eb8:	640b      	str	r3, [r1, #64]	; 0x40
                          pll3->PLL3P,
                          pll3->PLL3Q,
                          pll3->PLL3R);

    /* Select PLL3 input reference frequency range: VCI */
    __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE) ;
 8004eba:	4b30      	ldr	r3, [pc, #192]	; (8004f7c <RCCEx_PLL3_Config+0x15c>)
 8004ebc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004ebe:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8004ec2:	687b      	ldr	r3, [r7, #4]
 8004ec4:	695b      	ldr	r3, [r3, #20]
 8004ec6:	492d      	ldr	r1, [pc, #180]	; (8004f7c <RCCEx_PLL3_Config+0x15c>)
 8004ec8:	4313      	orrs	r3, r2
 8004eca:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL3 output frequency range : VCO */
    __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL) ;
 8004ecc:	4b2b      	ldr	r3, [pc, #172]	; (8004f7c <RCCEx_PLL3_Config+0x15c>)
 8004ece:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004ed0:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 8004ed4:	687b      	ldr	r3, [r7, #4]
 8004ed6:	699b      	ldr	r3, [r3, #24]
 8004ed8:	4928      	ldr	r1, [pc, #160]	; (8004f7c <RCCEx_PLL3_Config+0x15c>)
 8004eda:	4313      	orrs	r3, r2
 8004edc:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_DISABLE();
 8004ede:	4b27      	ldr	r3, [pc, #156]	; (8004f7c <RCCEx_PLL3_Config+0x15c>)
 8004ee0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004ee2:	4a26      	ldr	r2, [pc, #152]	; (8004f7c <RCCEx_PLL3_Config+0x15c>)
 8004ee4:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8004ee8:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 8004eea:	4b24      	ldr	r3, [pc, #144]	; (8004f7c <RCCEx_PLL3_Config+0x15c>)
 8004eec:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8004eee:	4b24      	ldr	r3, [pc, #144]	; (8004f80 <RCCEx_PLL3_Config+0x160>)
 8004ef0:	4013      	ands	r3, r2
 8004ef2:	687a      	ldr	r2, [r7, #4]
 8004ef4:	69d2      	ldr	r2, [r2, #28]
 8004ef6:	00d2      	lsls	r2, r2, #3
 8004ef8:	4920      	ldr	r1, [pc, #128]	; (8004f7c <RCCEx_PLL3_Config+0x15c>)
 8004efa:	4313      	orrs	r3, r2
 8004efc:	644b      	str	r3, [r1, #68]	; 0x44

    /* Enable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_ENABLE();
 8004efe:	4b1f      	ldr	r3, [pc, #124]	; (8004f7c <RCCEx_PLL3_Config+0x15c>)
 8004f00:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004f02:	4a1e      	ldr	r2, [pc, #120]	; (8004f7c <RCCEx_PLL3_Config+0x15c>)
 8004f04:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004f08:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL3 clock output */
    if(Divider == DIVIDER_P_UPDATE)
 8004f0a:	683b      	ldr	r3, [r7, #0]
 8004f0c:	2b00      	cmp	r3, #0
 8004f0e:	d106      	bne.n	8004f1e <RCCEx_PLL3_Config+0xfe>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
 8004f10:	4b1a      	ldr	r3, [pc, #104]	; (8004f7c <RCCEx_PLL3_Config+0x15c>)
 8004f12:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004f14:	4a19      	ldr	r2, [pc, #100]	; (8004f7c <RCCEx_PLL3_Config+0x15c>)
 8004f16:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8004f1a:	62d3      	str	r3, [r2, #44]	; 0x2c
 8004f1c:	e00f      	b.n	8004f3e <RCCEx_PLL3_Config+0x11e>
    }
    else if(Divider == DIVIDER_Q_UPDATE)
 8004f1e:	683b      	ldr	r3, [r7, #0]
 8004f20:	2b01      	cmp	r3, #1
 8004f22:	d106      	bne.n	8004f32 <RCCEx_PLL3_Config+0x112>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
 8004f24:	4b15      	ldr	r3, [pc, #84]	; (8004f7c <RCCEx_PLL3_Config+0x15c>)
 8004f26:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004f28:	4a14      	ldr	r2, [pc, #80]	; (8004f7c <RCCEx_PLL3_Config+0x15c>)
 8004f2a:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8004f2e:	62d3      	str	r3, [r2, #44]	; 0x2c
 8004f30:	e005      	b.n	8004f3e <RCCEx_PLL3_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
 8004f32:	4b12      	ldr	r3, [pc, #72]	; (8004f7c <RCCEx_PLL3_Config+0x15c>)
 8004f34:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004f36:	4a11      	ldr	r2, [pc, #68]	; (8004f7c <RCCEx_PLL3_Config+0x15c>)
 8004f38:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8004f3c:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL3. */
    __HAL_RCC_PLL3_ENABLE();
 8004f3e:	4b0f      	ldr	r3, [pc, #60]	; (8004f7c <RCCEx_PLL3_Config+0x15c>)
 8004f40:	681b      	ldr	r3, [r3, #0]
 8004f42:	4a0e      	ldr	r2, [pc, #56]	; (8004f7c <RCCEx_PLL3_Config+0x15c>)
 8004f44:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004f48:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004f4a:	f7fc fad1 	bl	80014f0 <HAL_GetTick>
 8004f4e:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL3 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8004f50:	e008      	b.n	8004f64 <RCCEx_PLL3_Config+0x144>
    {
      if( (HAL_GetTick() - tickstart ) > PLL3_TIMEOUT_VALUE)
 8004f52:	f7fc facd 	bl	80014f0 <HAL_GetTick>
 8004f56:	4602      	mov	r2, r0
 8004f58:	68bb      	ldr	r3, [r7, #8]
 8004f5a:	1ad3      	subs	r3, r2, r3
 8004f5c:	2b02      	cmp	r3, #2
 8004f5e:	d901      	bls.n	8004f64 <RCCEx_PLL3_Config+0x144>
      {
        return HAL_TIMEOUT;
 8004f60:	2303      	movs	r3, #3
 8004f62:	e006      	b.n	8004f72 <RCCEx_PLL3_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8004f64:	4b05      	ldr	r3, [pc, #20]	; (8004f7c <RCCEx_PLL3_Config+0x15c>)
 8004f66:	681b      	ldr	r3, [r3, #0]
 8004f68:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8004f6c:	2b00      	cmp	r3, #0
 8004f6e:	d0f0      	beq.n	8004f52 <RCCEx_PLL3_Config+0x132>
    }

  }


  return status;
 8004f70:	7bfb      	ldrb	r3, [r7, #15]
}
 8004f72:	4618      	mov	r0, r3
 8004f74:	3710      	adds	r7, #16
 8004f76:	46bd      	mov	sp, r7
 8004f78:	bd80      	pop	{r7, pc}
 8004f7a:	bf00      	nop
 8004f7c:	58024400 	.word	0x58024400
 8004f80:	ffff0007 	.word	0xffff0007

08004f84 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8004f84:	b580      	push	{r7, lr}
 8004f86:	b082      	sub	sp, #8
 8004f88:	af00      	add	r7, sp, #0
 8004f8a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8004f8c:	687b      	ldr	r3, [r7, #4]
 8004f8e:	2b00      	cmp	r3, #0
 8004f90:	d101      	bne.n	8004f96 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8004f92:	2301      	movs	r3, #1
 8004f94:	e042      	b.n	800501c <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8004f96:	687b      	ldr	r3, [r7, #4]
 8004f98:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004f9c:	2b00      	cmp	r3, #0
 8004f9e:	d106      	bne.n	8004fae <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8004fa0:	687b      	ldr	r3, [r7, #4]
 8004fa2:	2200      	movs	r2, #0
 8004fa4:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8004fa8:	6878      	ldr	r0, [r7, #4]
 8004faa:	f7fb ff93 	bl	8000ed4 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8004fae:	687b      	ldr	r3, [r7, #4]
 8004fb0:	2224      	movs	r2, #36	; 0x24
 8004fb2:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  __HAL_UART_DISABLE(huart);
 8004fb6:	687b      	ldr	r3, [r7, #4]
 8004fb8:	681b      	ldr	r3, [r3, #0]
 8004fba:	681a      	ldr	r2, [r3, #0]
 8004fbc:	687b      	ldr	r3, [r7, #4]
 8004fbe:	681b      	ldr	r3, [r3, #0]
 8004fc0:	f022 0201 	bic.w	r2, r2, #1
 8004fc4:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8004fc6:	6878      	ldr	r0, [r7, #4]
 8004fc8:	f000 fb9c 	bl	8005704 <UART_SetConfig>
 8004fcc:	4603      	mov	r3, r0
 8004fce:	2b01      	cmp	r3, #1
 8004fd0:	d101      	bne.n	8004fd6 <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 8004fd2:	2301      	movs	r3, #1
 8004fd4:	e022      	b.n	800501c <HAL_UART_Init+0x98>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8004fd6:	687b      	ldr	r3, [r7, #4]
 8004fd8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004fda:	2b00      	cmp	r3, #0
 8004fdc:	d002      	beq.n	8004fe4 <HAL_UART_Init+0x60>
  {
    UART_AdvFeatureConfig(huart);
 8004fde:	6878      	ldr	r0, [r7, #4]
 8004fe0:	f001 f9ee 	bl	80063c0 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8004fe4:	687b      	ldr	r3, [r7, #4]
 8004fe6:	681b      	ldr	r3, [r3, #0]
 8004fe8:	685a      	ldr	r2, [r3, #4]
 8004fea:	687b      	ldr	r3, [r7, #4]
 8004fec:	681b      	ldr	r3, [r3, #0]
 8004fee:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8004ff2:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8004ff4:	687b      	ldr	r3, [r7, #4]
 8004ff6:	681b      	ldr	r3, [r3, #0]
 8004ff8:	689a      	ldr	r2, [r3, #8]
 8004ffa:	687b      	ldr	r3, [r7, #4]
 8004ffc:	681b      	ldr	r3, [r3, #0]
 8004ffe:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8005002:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8005004:	687b      	ldr	r3, [r7, #4]
 8005006:	681b      	ldr	r3, [r3, #0]
 8005008:	681a      	ldr	r2, [r3, #0]
 800500a:	687b      	ldr	r3, [r7, #4]
 800500c:	681b      	ldr	r3, [r3, #0]
 800500e:	f042 0201 	orr.w	r2, r2, #1
 8005012:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8005014:	6878      	ldr	r0, [r7, #4]
 8005016:	f001 fa75 	bl	8006504 <UART_CheckIdleState>
 800501a:	4603      	mov	r3, r0
}
 800501c:	4618      	mov	r0, r3
 800501e:	3708      	adds	r7, #8
 8005020:	46bd      	mov	sp, r7
 8005022:	bd80      	pop	{r7, pc}

08005024 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8005024:	b580      	push	{r7, lr}
 8005026:	b08a      	sub	sp, #40	; 0x28
 8005028:	af02      	add	r7, sp, #8
 800502a:	60f8      	str	r0, [r7, #12]
 800502c:	60b9      	str	r1, [r7, #8]
 800502e:	603b      	str	r3, [r7, #0]
 8005030:	4613      	mov	r3, r2
 8005032:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8005034:	68fb      	ldr	r3, [r7, #12]
 8005036:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800503a:	2b20      	cmp	r3, #32
 800503c:	f040 8083 	bne.w	8005146 <HAL_UART_Transmit+0x122>
  {
    if ((pData == NULL) || (Size == 0U))
 8005040:	68bb      	ldr	r3, [r7, #8]
 8005042:	2b00      	cmp	r3, #0
 8005044:	d002      	beq.n	800504c <HAL_UART_Transmit+0x28>
 8005046:	88fb      	ldrh	r3, [r7, #6]
 8005048:	2b00      	cmp	r3, #0
 800504a:	d101      	bne.n	8005050 <HAL_UART_Transmit+0x2c>
    {
      return  HAL_ERROR;
 800504c:	2301      	movs	r3, #1
 800504e:	e07b      	b.n	8005148 <HAL_UART_Transmit+0x124>
    }

    __HAL_LOCK(huart);
 8005050:	68fb      	ldr	r3, [r7, #12]
 8005052:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8005056:	2b01      	cmp	r3, #1
 8005058:	d101      	bne.n	800505e <HAL_UART_Transmit+0x3a>
 800505a:	2302      	movs	r3, #2
 800505c:	e074      	b.n	8005148 <HAL_UART_Transmit+0x124>
 800505e:	68fb      	ldr	r3, [r7, #12]
 8005060:	2201      	movs	r2, #1
 8005062:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005066:	68fb      	ldr	r3, [r7, #12]
 8005068:	2200      	movs	r2, #0
 800506a:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800506e:	68fb      	ldr	r3, [r7, #12]
 8005070:	2221      	movs	r2, #33	; 0x21
 8005072:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8005076:	f7fc fa3b 	bl	80014f0 <HAL_GetTick>
 800507a:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 800507c:	68fb      	ldr	r3, [r7, #12]
 800507e:	88fa      	ldrh	r2, [r7, #6]
 8005080:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
    huart->TxXferCount = Size;
 8005084:	68fb      	ldr	r3, [r7, #12]
 8005086:	88fa      	ldrh	r2, [r7, #6]
 8005088:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800508c:	68fb      	ldr	r3, [r7, #12]
 800508e:	689b      	ldr	r3, [r3, #8]
 8005090:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005094:	d108      	bne.n	80050a8 <HAL_UART_Transmit+0x84>
 8005096:	68fb      	ldr	r3, [r7, #12]
 8005098:	691b      	ldr	r3, [r3, #16]
 800509a:	2b00      	cmp	r3, #0
 800509c:	d104      	bne.n	80050a8 <HAL_UART_Transmit+0x84>
    {
      pdata8bits  = NULL;
 800509e:	2300      	movs	r3, #0
 80050a0:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 80050a2:	68bb      	ldr	r3, [r7, #8]
 80050a4:	61bb      	str	r3, [r7, #24]
 80050a6:	e003      	b.n	80050b0 <HAL_UART_Transmit+0x8c>
    }
    else
    {
      pdata8bits  = pData;
 80050a8:	68bb      	ldr	r3, [r7, #8]
 80050aa:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80050ac:	2300      	movs	r3, #0
 80050ae:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 80050b0:	68fb      	ldr	r3, [r7, #12]
 80050b2:	2200      	movs	r2, #0
 80050b4:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    while (huart->TxXferCount > 0U)
 80050b8:	e02c      	b.n	8005114 <HAL_UART_Transmit+0xf0>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80050ba:	683b      	ldr	r3, [r7, #0]
 80050bc:	9300      	str	r3, [sp, #0]
 80050be:	697b      	ldr	r3, [r7, #20]
 80050c0:	2200      	movs	r2, #0
 80050c2:	2180      	movs	r1, #128	; 0x80
 80050c4:	68f8      	ldr	r0, [r7, #12]
 80050c6:	f001 fa68 	bl	800659a <UART_WaitOnFlagUntilTimeout>
 80050ca:	4603      	mov	r3, r0
 80050cc:	2b00      	cmp	r3, #0
 80050ce:	d001      	beq.n	80050d4 <HAL_UART_Transmit+0xb0>
      {
        return HAL_TIMEOUT;
 80050d0:	2303      	movs	r3, #3
 80050d2:	e039      	b.n	8005148 <HAL_UART_Transmit+0x124>
      }
      if (pdata8bits == NULL)
 80050d4:	69fb      	ldr	r3, [r7, #28]
 80050d6:	2b00      	cmp	r3, #0
 80050d8:	d10b      	bne.n	80050f2 <HAL_UART_Transmit+0xce>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 80050da:	69bb      	ldr	r3, [r7, #24]
 80050dc:	881b      	ldrh	r3, [r3, #0]
 80050de:	461a      	mov	r2, r3
 80050e0:	68fb      	ldr	r3, [r7, #12]
 80050e2:	681b      	ldr	r3, [r3, #0]
 80050e4:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80050e8:	629a      	str	r2, [r3, #40]	; 0x28
        pdata16bits++;
 80050ea:	69bb      	ldr	r3, [r7, #24]
 80050ec:	3302      	adds	r3, #2
 80050ee:	61bb      	str	r3, [r7, #24]
 80050f0:	e007      	b.n	8005102 <HAL_UART_Transmit+0xde>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 80050f2:	69fb      	ldr	r3, [r7, #28]
 80050f4:	781a      	ldrb	r2, [r3, #0]
 80050f6:	68fb      	ldr	r3, [r7, #12]
 80050f8:	681b      	ldr	r3, [r3, #0]
 80050fa:	629a      	str	r2, [r3, #40]	; 0x28
        pdata8bits++;
 80050fc:	69fb      	ldr	r3, [r7, #28]
 80050fe:	3301      	adds	r3, #1
 8005100:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8005102:	68fb      	ldr	r3, [r7, #12]
 8005104:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 8005108:	b29b      	uxth	r3, r3
 800510a:	3b01      	subs	r3, #1
 800510c:	b29a      	uxth	r2, r3
 800510e:	68fb      	ldr	r3, [r7, #12]
 8005110:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
    while (huart->TxXferCount > 0U)
 8005114:	68fb      	ldr	r3, [r7, #12]
 8005116:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 800511a:	b29b      	uxth	r3, r3
 800511c:	2b00      	cmp	r3, #0
 800511e:	d1cc      	bne.n	80050ba <HAL_UART_Transmit+0x96>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8005120:	683b      	ldr	r3, [r7, #0]
 8005122:	9300      	str	r3, [sp, #0]
 8005124:	697b      	ldr	r3, [r7, #20]
 8005126:	2200      	movs	r2, #0
 8005128:	2140      	movs	r1, #64	; 0x40
 800512a:	68f8      	ldr	r0, [r7, #12]
 800512c:	f001 fa35 	bl	800659a <UART_WaitOnFlagUntilTimeout>
 8005130:	4603      	mov	r3, r0
 8005132:	2b00      	cmp	r3, #0
 8005134:	d001      	beq.n	800513a <HAL_UART_Transmit+0x116>
    {
      return HAL_TIMEOUT;
 8005136:	2303      	movs	r3, #3
 8005138:	e006      	b.n	8005148 <HAL_UART_Transmit+0x124>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800513a:	68fb      	ldr	r3, [r7, #12]
 800513c:	2220      	movs	r2, #32
 800513e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    return HAL_OK;
 8005142:	2300      	movs	r3, #0
 8005144:	e000      	b.n	8005148 <HAL_UART_Transmit+0x124>
  }
  else
  {
    return HAL_BUSY;
 8005146:	2302      	movs	r3, #2
  }
}
 8005148:	4618      	mov	r0, r3
 800514a:	3720      	adds	r7, #32
 800514c:	46bd      	mov	sp, r7
 800514e:	bd80      	pop	{r7, pc}

08005150 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8005150:	b580      	push	{r7, lr}
 8005152:	b088      	sub	sp, #32
 8005154:	af00      	add	r7, sp, #0
 8005156:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8005158:	687b      	ldr	r3, [r7, #4]
 800515a:	681b      	ldr	r3, [r3, #0]
 800515c:	69db      	ldr	r3, [r3, #28]
 800515e:	61fb      	str	r3, [r7, #28]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8005160:	687b      	ldr	r3, [r7, #4]
 8005162:	681b      	ldr	r3, [r3, #0]
 8005164:	681b      	ldr	r3, [r3, #0]
 8005166:	61bb      	str	r3, [r7, #24]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8005168:	687b      	ldr	r3, [r7, #4]
 800516a:	681b      	ldr	r3, [r3, #0]
 800516c:	689b      	ldr	r3, [r3, #8]
 800516e:	617b      	str	r3, [r7, #20]

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 8005170:	69fa      	ldr	r2, [r7, #28]
 8005172:	f640 030f 	movw	r3, #2063	; 0x80f
 8005176:	4013      	ands	r3, r2
 8005178:	613b      	str	r3, [r7, #16]
  if (errorflags == 0U)
 800517a:	693b      	ldr	r3, [r7, #16]
 800517c:	2b00      	cmp	r3, #0
 800517e:	d118      	bne.n	80051b2 <HAL_UART_IRQHandler+0x62>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 8005180:	69fb      	ldr	r3, [r7, #28]
 8005182:	f003 0320 	and.w	r3, r3, #32
 8005186:	2b00      	cmp	r3, #0
 8005188:	d013      	beq.n	80051b2 <HAL_UART_IRQHandler+0x62>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 800518a:	69bb      	ldr	r3, [r7, #24]
 800518c:	f003 0320 	and.w	r3, r3, #32
 8005190:	2b00      	cmp	r3, #0
 8005192:	d104      	bne.n	800519e <HAL_UART_IRQHandler+0x4e>
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 8005194:	697b      	ldr	r3, [r7, #20]
 8005196:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800519a:	2b00      	cmp	r3, #0
 800519c:	d009      	beq.n	80051b2 <HAL_UART_IRQHandler+0x62>
    {
      if (huart->RxISR != NULL)
 800519e:	687b      	ldr	r3, [r7, #4]
 80051a0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80051a2:	2b00      	cmp	r3, #0
 80051a4:	f000 8282 	beq.w	80056ac <HAL_UART_IRQHandler+0x55c>
      {
        huart->RxISR(huart);
 80051a8:	687b      	ldr	r3, [r7, #4]
 80051aa:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80051ac:	6878      	ldr	r0, [r7, #4]
 80051ae:	4798      	blx	r3
      }
      return;
 80051b0:	e27c      	b.n	80056ac <HAL_UART_IRQHandler+0x55c>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 80051b2:	693b      	ldr	r3, [r7, #16]
 80051b4:	2b00      	cmp	r3, #0
 80051b6:	f000 80ef 	beq.w	8005398 <HAL_UART_IRQHandler+0x248>
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
 80051ba:	697a      	ldr	r2, [r7, #20]
 80051bc:	4b73      	ldr	r3, [pc, #460]	; (800538c <HAL_UART_IRQHandler+0x23c>)
 80051be:	4013      	ands	r3, r2
 80051c0:	2b00      	cmp	r3, #0
 80051c2:	d105      	bne.n	80051d0 <HAL_UART_IRQHandler+0x80>
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
 80051c4:	69ba      	ldr	r2, [r7, #24]
 80051c6:	4b72      	ldr	r3, [pc, #456]	; (8005390 <HAL_UART_IRQHandler+0x240>)
 80051c8:	4013      	ands	r3, r2
 80051ca:	2b00      	cmp	r3, #0
 80051cc:	f000 80e4 	beq.w	8005398 <HAL_UART_IRQHandler+0x248>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 80051d0:	69fb      	ldr	r3, [r7, #28]
 80051d2:	f003 0301 	and.w	r3, r3, #1
 80051d6:	2b00      	cmp	r3, #0
 80051d8:	d010      	beq.n	80051fc <HAL_UART_IRQHandler+0xac>
 80051da:	69bb      	ldr	r3, [r7, #24]
 80051dc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80051e0:	2b00      	cmp	r3, #0
 80051e2:	d00b      	beq.n	80051fc <HAL_UART_IRQHandler+0xac>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 80051e4:	687b      	ldr	r3, [r7, #4]
 80051e6:	681b      	ldr	r3, [r3, #0]
 80051e8:	2201      	movs	r2, #1
 80051ea:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 80051ec:	687b      	ldr	r3, [r7, #4]
 80051ee:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80051f2:	f043 0201 	orr.w	r2, r3, #1
 80051f6:	687b      	ldr	r3, [r7, #4]
 80051f8:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 80051fc:	69fb      	ldr	r3, [r7, #28]
 80051fe:	f003 0302 	and.w	r3, r3, #2
 8005202:	2b00      	cmp	r3, #0
 8005204:	d010      	beq.n	8005228 <HAL_UART_IRQHandler+0xd8>
 8005206:	697b      	ldr	r3, [r7, #20]
 8005208:	f003 0301 	and.w	r3, r3, #1
 800520c:	2b00      	cmp	r3, #0
 800520e:	d00b      	beq.n	8005228 <HAL_UART_IRQHandler+0xd8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8005210:	687b      	ldr	r3, [r7, #4]
 8005212:	681b      	ldr	r3, [r3, #0]
 8005214:	2202      	movs	r2, #2
 8005216:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8005218:	687b      	ldr	r3, [r7, #4]
 800521a:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800521e:	f043 0204 	orr.w	r2, r3, #4
 8005222:	687b      	ldr	r3, [r7, #4]
 8005224:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8005228:	69fb      	ldr	r3, [r7, #28]
 800522a:	f003 0304 	and.w	r3, r3, #4
 800522e:	2b00      	cmp	r3, #0
 8005230:	d010      	beq.n	8005254 <HAL_UART_IRQHandler+0x104>
 8005232:	697b      	ldr	r3, [r7, #20]
 8005234:	f003 0301 	and.w	r3, r3, #1
 8005238:	2b00      	cmp	r3, #0
 800523a:	d00b      	beq.n	8005254 <HAL_UART_IRQHandler+0x104>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 800523c:	687b      	ldr	r3, [r7, #4]
 800523e:	681b      	ldr	r3, [r3, #0]
 8005240:	2204      	movs	r2, #4
 8005242:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8005244:	687b      	ldr	r3, [r7, #4]
 8005246:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800524a:	f043 0202 	orr.w	r2, r3, #2
 800524e:	687b      	ldr	r3, [r7, #4]
 8005250:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 8005254:	69fb      	ldr	r3, [r7, #28]
 8005256:	f003 0308 	and.w	r3, r3, #8
 800525a:	2b00      	cmp	r3, #0
 800525c:	d015      	beq.n	800528a <HAL_UART_IRQHandler+0x13a>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 800525e:	69bb      	ldr	r3, [r7, #24]
 8005260:	f003 0320 	and.w	r3, r3, #32
 8005264:	2b00      	cmp	r3, #0
 8005266:	d104      	bne.n	8005272 <HAL_UART_IRQHandler+0x122>
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
 8005268:	697a      	ldr	r2, [r7, #20]
 800526a:	4b48      	ldr	r3, [pc, #288]	; (800538c <HAL_UART_IRQHandler+0x23c>)
 800526c:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 800526e:	2b00      	cmp	r3, #0
 8005270:	d00b      	beq.n	800528a <HAL_UART_IRQHandler+0x13a>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8005272:	687b      	ldr	r3, [r7, #4]
 8005274:	681b      	ldr	r3, [r3, #0]
 8005276:	2208      	movs	r2, #8
 8005278:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800527a:	687b      	ldr	r3, [r7, #4]
 800527c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8005280:	f043 0208 	orr.w	r2, r3, #8
 8005284:	687b      	ldr	r3, [r7, #4]
 8005286:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 800528a:	69fb      	ldr	r3, [r7, #28]
 800528c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8005290:	2b00      	cmp	r3, #0
 8005292:	d011      	beq.n	80052b8 <HAL_UART_IRQHandler+0x168>
 8005294:	69bb      	ldr	r3, [r7, #24]
 8005296:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 800529a:	2b00      	cmp	r3, #0
 800529c:	d00c      	beq.n	80052b8 <HAL_UART_IRQHandler+0x168>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800529e:	687b      	ldr	r3, [r7, #4]
 80052a0:	681b      	ldr	r3, [r3, #0]
 80052a2:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80052a6:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 80052a8:	687b      	ldr	r3, [r7, #4]
 80052aa:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80052ae:	f043 0220 	orr.w	r2, r3, #32
 80052b2:	687b      	ldr	r3, [r7, #4]
 80052b4:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 80052b8:	687b      	ldr	r3, [r7, #4]
 80052ba:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80052be:	2b00      	cmp	r3, #0
 80052c0:	f000 81f6 	beq.w	80056b0 <HAL_UART_IRQHandler+0x560>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 80052c4:	69fb      	ldr	r3, [r7, #28]
 80052c6:	f003 0320 	and.w	r3, r3, #32
 80052ca:	2b00      	cmp	r3, #0
 80052cc:	d011      	beq.n	80052f2 <HAL_UART_IRQHandler+0x1a2>
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 80052ce:	69bb      	ldr	r3, [r7, #24]
 80052d0:	f003 0320 	and.w	r3, r3, #32
 80052d4:	2b00      	cmp	r3, #0
 80052d6:	d104      	bne.n	80052e2 <HAL_UART_IRQHandler+0x192>
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 80052d8:	697b      	ldr	r3, [r7, #20]
 80052da:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80052de:	2b00      	cmp	r3, #0
 80052e0:	d007      	beq.n	80052f2 <HAL_UART_IRQHandler+0x1a2>
      {
        if (huart->RxISR != NULL)
 80052e2:	687b      	ldr	r3, [r7, #4]
 80052e4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80052e6:	2b00      	cmp	r3, #0
 80052e8:	d003      	beq.n	80052f2 <HAL_UART_IRQHandler+0x1a2>
        {
          huart->RxISR(huart);
 80052ea:	687b      	ldr	r3, [r7, #4]
 80052ec:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80052ee:	6878      	ldr	r0, [r7, #4]
 80052f0:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 80052f2:	687b      	ldr	r3, [r7, #4]
 80052f4:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80052f8:	60fb      	str	r3, [r7, #12]
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 80052fa:	687b      	ldr	r3, [r7, #4]
 80052fc:	681b      	ldr	r3, [r3, #0]
 80052fe:	689b      	ldr	r3, [r3, #8]
 8005300:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005304:	2b40      	cmp	r3, #64	; 0x40
 8005306:	d004      	beq.n	8005312 <HAL_UART_IRQHandler+0x1c2>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 8005308:	68fb      	ldr	r3, [r7, #12]
 800530a:	f003 0328 	and.w	r3, r3, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800530e:	2b00      	cmp	r3, #0
 8005310:	d031      	beq.n	8005376 <HAL_UART_IRQHandler+0x226>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8005312:	6878      	ldr	r0, [r7, #4]
 8005314:	f001 f9c2 	bl	800669c <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005318:	687b      	ldr	r3, [r7, #4]
 800531a:	681b      	ldr	r3, [r3, #0]
 800531c:	689b      	ldr	r3, [r3, #8]
 800531e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005322:	2b40      	cmp	r3, #64	; 0x40
 8005324:	d123      	bne.n	800536e <HAL_UART_IRQHandler+0x21e>
        {
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8005326:	687b      	ldr	r3, [r7, #4]
 8005328:	681b      	ldr	r3, [r3, #0]
 800532a:	689a      	ldr	r2, [r3, #8]
 800532c:	687b      	ldr	r3, [r7, #4]
 800532e:	681b      	ldr	r3, [r3, #0]
 8005330:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8005334:	609a      	str	r2, [r3, #8]

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8005336:	687b      	ldr	r3, [r7, #4]
 8005338:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800533a:	2b00      	cmp	r3, #0
 800533c:	d013      	beq.n	8005366 <HAL_UART_IRQHandler+0x216>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800533e:	687b      	ldr	r3, [r7, #4]
 8005340:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8005342:	4a14      	ldr	r2, [pc, #80]	; (8005394 <HAL_UART_IRQHandler+0x244>)
 8005344:	651a      	str	r2, [r3, #80]	; 0x50

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8005346:	687b      	ldr	r3, [r7, #4]
 8005348:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800534a:	4618      	mov	r0, r3
 800534c:	f7fc fd3a 	bl	8001dc4 <HAL_DMA_Abort_IT>
 8005350:	4603      	mov	r3, r0
 8005352:	2b00      	cmp	r3, #0
 8005354:	d017      	beq.n	8005386 <HAL_UART_IRQHandler+0x236>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8005356:	687b      	ldr	r3, [r7, #4]
 8005358:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800535a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800535c:	687a      	ldr	r2, [r7, #4]
 800535e:	6fd2      	ldr	r2, [r2, #124]	; 0x7c
 8005360:	4610      	mov	r0, r2
 8005362:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005364:	e00f      	b.n	8005386 <HAL_UART_IRQHandler+0x236>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8005366:	6878      	ldr	r0, [r7, #4]
 8005368:	f000 f9b6 	bl	80056d8 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800536c:	e00b      	b.n	8005386 <HAL_UART_IRQHandler+0x236>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800536e:	6878      	ldr	r0, [r7, #4]
 8005370:	f000 f9b2 	bl	80056d8 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005374:	e007      	b.n	8005386 <HAL_UART_IRQHandler+0x236>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8005376:	6878      	ldr	r0, [r7, #4]
 8005378:	f000 f9ae 	bl	80056d8 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 800537c:	687b      	ldr	r3, [r7, #4]
 800537e:	2200      	movs	r2, #0
 8005380:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
      }
    }
    return;
 8005384:	e194      	b.n	80056b0 <HAL_UART_IRQHandler+0x560>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005386:	bf00      	nop
    return;
 8005388:	e192      	b.n	80056b0 <HAL_UART_IRQHandler+0x560>
 800538a:	bf00      	nop
 800538c:	10000001 	.word	0x10000001
 8005390:	04000120 	.word	0x04000120
 8005394:	08006701 	.word	0x08006701

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005398:	687b      	ldr	r3, [r7, #4]
 800539a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800539c:	2b01      	cmp	r3, #1
 800539e:	f040 810f 	bne.w	80055c0 <HAL_UART_IRQHandler+0x470>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 80053a2:	69fb      	ldr	r3, [r7, #28]
 80053a4:	f003 0310 	and.w	r3, r3, #16
 80053a8:	2b00      	cmp	r3, #0
 80053aa:	f000 8109 	beq.w	80055c0 <HAL_UART_IRQHandler+0x470>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 80053ae:	69bb      	ldr	r3, [r7, #24]
 80053b0:	f003 0310 	and.w	r3, r3, #16
 80053b4:	2b00      	cmp	r3, #0
 80053b6:	f000 8103 	beq.w	80055c0 <HAL_UART_IRQHandler+0x470>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 80053ba:	687b      	ldr	r3, [r7, #4]
 80053bc:	681b      	ldr	r3, [r3, #0]
 80053be:	2210      	movs	r2, #16
 80053c0:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80053c2:	687b      	ldr	r3, [r7, #4]
 80053c4:	681b      	ldr	r3, [r3, #0]
 80053c6:	689b      	ldr	r3, [r3, #8]
 80053c8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80053cc:	2b40      	cmp	r3, #64	; 0x40
 80053ce:	f040 80bb 	bne.w	8005548 <HAL_UART_IRQHandler+0x3f8>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 80053d2:	687b      	ldr	r3, [r7, #4]
 80053d4:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80053d6:	681b      	ldr	r3, [r3, #0]
 80053d8:	4a96      	ldr	r2, [pc, #600]	; (8005634 <HAL_UART_IRQHandler+0x4e4>)
 80053da:	4293      	cmp	r3, r2
 80053dc:	d059      	beq.n	8005492 <HAL_UART_IRQHandler+0x342>
 80053de:	687b      	ldr	r3, [r7, #4]
 80053e0:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80053e2:	681b      	ldr	r3, [r3, #0]
 80053e4:	4a94      	ldr	r2, [pc, #592]	; (8005638 <HAL_UART_IRQHandler+0x4e8>)
 80053e6:	4293      	cmp	r3, r2
 80053e8:	d053      	beq.n	8005492 <HAL_UART_IRQHandler+0x342>
 80053ea:	687b      	ldr	r3, [r7, #4]
 80053ec:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80053ee:	681b      	ldr	r3, [r3, #0]
 80053f0:	4a92      	ldr	r2, [pc, #584]	; (800563c <HAL_UART_IRQHandler+0x4ec>)
 80053f2:	4293      	cmp	r3, r2
 80053f4:	d04d      	beq.n	8005492 <HAL_UART_IRQHandler+0x342>
 80053f6:	687b      	ldr	r3, [r7, #4]
 80053f8:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80053fa:	681b      	ldr	r3, [r3, #0]
 80053fc:	4a90      	ldr	r2, [pc, #576]	; (8005640 <HAL_UART_IRQHandler+0x4f0>)
 80053fe:	4293      	cmp	r3, r2
 8005400:	d047      	beq.n	8005492 <HAL_UART_IRQHandler+0x342>
 8005402:	687b      	ldr	r3, [r7, #4]
 8005404:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8005406:	681b      	ldr	r3, [r3, #0]
 8005408:	4a8e      	ldr	r2, [pc, #568]	; (8005644 <HAL_UART_IRQHandler+0x4f4>)
 800540a:	4293      	cmp	r3, r2
 800540c:	d041      	beq.n	8005492 <HAL_UART_IRQHandler+0x342>
 800540e:	687b      	ldr	r3, [r7, #4]
 8005410:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8005412:	681b      	ldr	r3, [r3, #0]
 8005414:	4a8c      	ldr	r2, [pc, #560]	; (8005648 <HAL_UART_IRQHandler+0x4f8>)
 8005416:	4293      	cmp	r3, r2
 8005418:	d03b      	beq.n	8005492 <HAL_UART_IRQHandler+0x342>
 800541a:	687b      	ldr	r3, [r7, #4]
 800541c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800541e:	681b      	ldr	r3, [r3, #0]
 8005420:	4a8a      	ldr	r2, [pc, #552]	; (800564c <HAL_UART_IRQHandler+0x4fc>)
 8005422:	4293      	cmp	r3, r2
 8005424:	d035      	beq.n	8005492 <HAL_UART_IRQHandler+0x342>
 8005426:	687b      	ldr	r3, [r7, #4]
 8005428:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800542a:	681b      	ldr	r3, [r3, #0]
 800542c:	4a88      	ldr	r2, [pc, #544]	; (8005650 <HAL_UART_IRQHandler+0x500>)
 800542e:	4293      	cmp	r3, r2
 8005430:	d02f      	beq.n	8005492 <HAL_UART_IRQHandler+0x342>
 8005432:	687b      	ldr	r3, [r7, #4]
 8005434:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8005436:	681b      	ldr	r3, [r3, #0]
 8005438:	4a86      	ldr	r2, [pc, #536]	; (8005654 <HAL_UART_IRQHandler+0x504>)
 800543a:	4293      	cmp	r3, r2
 800543c:	d029      	beq.n	8005492 <HAL_UART_IRQHandler+0x342>
 800543e:	687b      	ldr	r3, [r7, #4]
 8005440:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8005442:	681b      	ldr	r3, [r3, #0]
 8005444:	4a84      	ldr	r2, [pc, #528]	; (8005658 <HAL_UART_IRQHandler+0x508>)
 8005446:	4293      	cmp	r3, r2
 8005448:	d023      	beq.n	8005492 <HAL_UART_IRQHandler+0x342>
 800544a:	687b      	ldr	r3, [r7, #4]
 800544c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800544e:	681b      	ldr	r3, [r3, #0]
 8005450:	4a82      	ldr	r2, [pc, #520]	; (800565c <HAL_UART_IRQHandler+0x50c>)
 8005452:	4293      	cmp	r3, r2
 8005454:	d01d      	beq.n	8005492 <HAL_UART_IRQHandler+0x342>
 8005456:	687b      	ldr	r3, [r7, #4]
 8005458:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800545a:	681b      	ldr	r3, [r3, #0]
 800545c:	4a80      	ldr	r2, [pc, #512]	; (8005660 <HAL_UART_IRQHandler+0x510>)
 800545e:	4293      	cmp	r3, r2
 8005460:	d017      	beq.n	8005492 <HAL_UART_IRQHandler+0x342>
 8005462:	687b      	ldr	r3, [r7, #4]
 8005464:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8005466:	681b      	ldr	r3, [r3, #0]
 8005468:	4a7e      	ldr	r2, [pc, #504]	; (8005664 <HAL_UART_IRQHandler+0x514>)
 800546a:	4293      	cmp	r3, r2
 800546c:	d011      	beq.n	8005492 <HAL_UART_IRQHandler+0x342>
 800546e:	687b      	ldr	r3, [r7, #4]
 8005470:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8005472:	681b      	ldr	r3, [r3, #0]
 8005474:	4a7c      	ldr	r2, [pc, #496]	; (8005668 <HAL_UART_IRQHandler+0x518>)
 8005476:	4293      	cmp	r3, r2
 8005478:	d00b      	beq.n	8005492 <HAL_UART_IRQHandler+0x342>
 800547a:	687b      	ldr	r3, [r7, #4]
 800547c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800547e:	681b      	ldr	r3, [r3, #0]
 8005480:	4a7a      	ldr	r2, [pc, #488]	; (800566c <HAL_UART_IRQHandler+0x51c>)
 8005482:	4293      	cmp	r3, r2
 8005484:	d005      	beq.n	8005492 <HAL_UART_IRQHandler+0x342>
 8005486:	687b      	ldr	r3, [r7, #4]
 8005488:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800548a:	681b      	ldr	r3, [r3, #0]
 800548c:	4a78      	ldr	r2, [pc, #480]	; (8005670 <HAL_UART_IRQHandler+0x520>)
 800548e:	4293      	cmp	r3, r2
 8005490:	d105      	bne.n	800549e <HAL_UART_IRQHandler+0x34e>
 8005492:	687b      	ldr	r3, [r7, #4]
 8005494:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8005496:	681b      	ldr	r3, [r3, #0]
 8005498:	685b      	ldr	r3, [r3, #4]
 800549a:	b29b      	uxth	r3, r3
 800549c:	e004      	b.n	80054a8 <HAL_UART_IRQHandler+0x358>
 800549e:	687b      	ldr	r3, [r7, #4]
 80054a0:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80054a2:	681b      	ldr	r3, [r3, #0]
 80054a4:	685b      	ldr	r3, [r3, #4]
 80054a6:	b29b      	uxth	r3, r3
 80054a8:	813b      	strh	r3, [r7, #8]
      if ((nb_remaining_rx_data > 0U)
 80054aa:	893b      	ldrh	r3, [r7, #8]
 80054ac:	2b00      	cmp	r3, #0
 80054ae:	f000 8101 	beq.w	80056b4 <HAL_UART_IRQHandler+0x564>
          && (nb_remaining_rx_data < huart->RxXferSize))
 80054b2:	687b      	ldr	r3, [r7, #4]
 80054b4:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 80054b8:	893a      	ldrh	r2, [r7, #8]
 80054ba:	429a      	cmp	r2, r3
 80054bc:	f080 80fa 	bcs.w	80056b4 <HAL_UART_IRQHandler+0x564>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 80054c0:	687b      	ldr	r3, [r7, #4]
 80054c2:	893a      	ldrh	r2, [r7, #8]
 80054c4:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 80054c8:	687b      	ldr	r3, [r7, #4]
 80054ca:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80054cc:	69db      	ldr	r3, [r3, #28]
 80054ce:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80054d2:	d02b      	beq.n	800552c <HAL_UART_IRQHandler+0x3dc>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80054d4:	687b      	ldr	r3, [r7, #4]
 80054d6:	681b      	ldr	r3, [r3, #0]
 80054d8:	681a      	ldr	r2, [r3, #0]
 80054da:	687b      	ldr	r3, [r7, #4]
 80054dc:	681b      	ldr	r3, [r3, #0]
 80054de:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80054e2:	601a      	str	r2, [r3, #0]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80054e4:	687b      	ldr	r3, [r7, #4]
 80054e6:	681b      	ldr	r3, [r3, #0]
 80054e8:	689a      	ldr	r2, [r3, #8]
 80054ea:	687b      	ldr	r3, [r7, #4]
 80054ec:	681b      	ldr	r3, [r3, #0]
 80054ee:	f022 0201 	bic.w	r2, r2, #1
 80054f2:	609a      	str	r2, [r3, #8]

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80054f4:	687b      	ldr	r3, [r7, #4]
 80054f6:	681b      	ldr	r3, [r3, #0]
 80054f8:	689a      	ldr	r2, [r3, #8]
 80054fa:	687b      	ldr	r3, [r7, #4]
 80054fc:	681b      	ldr	r3, [r3, #0]
 80054fe:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8005502:	609a      	str	r2, [r3, #8]

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8005504:	687b      	ldr	r3, [r7, #4]
 8005506:	2220      	movs	r2, #32
 8005508:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800550c:	687b      	ldr	r3, [r7, #4]
 800550e:	2200      	movs	r2, #0
 8005510:	66da      	str	r2, [r3, #108]	; 0x6c

          CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005512:	687b      	ldr	r3, [r7, #4]
 8005514:	681b      	ldr	r3, [r3, #0]
 8005516:	681a      	ldr	r2, [r3, #0]
 8005518:	687b      	ldr	r3, [r7, #4]
 800551a:	681b      	ldr	r3, [r3, #0]
 800551c:	f022 0210 	bic.w	r2, r2, #16
 8005520:	601a      	str	r2, [r3, #0]

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8005522:	687b      	ldr	r3, [r7, #4]
 8005524:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8005526:	4618      	mov	r0, r3
 8005528:	f7fc f92e 	bl	8001788 <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 800552c:	687b      	ldr	r3, [r7, #4]
 800552e:	f8b3 205c 	ldrh.w	r2, [r3, #92]	; 0x5c
 8005532:	687b      	ldr	r3, [r7, #4]
 8005534:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8005538:	b29b      	uxth	r3, r3
 800553a:	1ad3      	subs	r3, r2, r3
 800553c:	b29b      	uxth	r3, r3
 800553e:	4619      	mov	r1, r3
 8005540:	6878      	ldr	r0, [r7, #4]
 8005542:	f000 f8d3 	bl	80056ec <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8005546:	e0b5      	b.n	80056b4 <HAL_UART_IRQHandler+0x564>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8005548:	687b      	ldr	r3, [r7, #4]
 800554a:	f8b3 205c 	ldrh.w	r2, [r3, #92]	; 0x5c
 800554e:	687b      	ldr	r3, [r7, #4]
 8005550:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8005554:	b29b      	uxth	r3, r3
 8005556:	1ad3      	subs	r3, r2, r3
 8005558:	817b      	strh	r3, [r7, #10]
      if ((huart->RxXferCount > 0U)
 800555a:	687b      	ldr	r3, [r7, #4]
 800555c:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8005560:	b29b      	uxth	r3, r3
 8005562:	2b00      	cmp	r3, #0
 8005564:	f000 80a8 	beq.w	80056b8 <HAL_UART_IRQHandler+0x568>
          && (nb_rx_data > 0U))
 8005568:	897b      	ldrh	r3, [r7, #10]
 800556a:	2b00      	cmp	r3, #0
 800556c:	f000 80a4 	beq.w	80056b8 <HAL_UART_IRQHandler+0x568>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8005570:	687b      	ldr	r3, [r7, #4]
 8005572:	681b      	ldr	r3, [r3, #0]
 8005574:	681a      	ldr	r2, [r3, #0]
 8005576:	687b      	ldr	r3, [r7, #4]
 8005578:	681b      	ldr	r3, [r3, #0]
 800557a:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 800557e:	601a      	str	r2, [r3, #0]

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8005580:	687b      	ldr	r3, [r7, #4]
 8005582:	681b      	ldr	r3, [r3, #0]
 8005584:	6899      	ldr	r1, [r3, #8]
 8005586:	687b      	ldr	r3, [r7, #4]
 8005588:	681a      	ldr	r2, [r3, #0]
 800558a:	4b3a      	ldr	r3, [pc, #232]	; (8005674 <HAL_UART_IRQHandler+0x524>)
 800558c:	400b      	ands	r3, r1
 800558e:	6093      	str	r3, [r2, #8]

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8005590:	687b      	ldr	r3, [r7, #4]
 8005592:	2220      	movs	r2, #32
 8005594:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005598:	687b      	ldr	r3, [r7, #4]
 800559a:	2200      	movs	r2, #0
 800559c:	66da      	str	r2, [r3, #108]	; 0x6c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 800559e:	687b      	ldr	r3, [r7, #4]
 80055a0:	2200      	movs	r2, #0
 80055a2:	671a      	str	r2, [r3, #112]	; 0x70

        CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80055a4:	687b      	ldr	r3, [r7, #4]
 80055a6:	681b      	ldr	r3, [r3, #0]
 80055a8:	681a      	ldr	r2, [r3, #0]
 80055aa:	687b      	ldr	r3, [r7, #4]
 80055ac:	681b      	ldr	r3, [r3, #0]
 80055ae:	f022 0210 	bic.w	r2, r2, #16
 80055b2:	601a      	str	r2, [r3, #0]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 80055b4:	897b      	ldrh	r3, [r7, #10]
 80055b6:	4619      	mov	r1, r3
 80055b8:	6878      	ldr	r0, [r7, #4]
 80055ba:	f000 f897 	bl	80056ec <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 80055be:	e07b      	b.n	80056b8 <HAL_UART_IRQHandler+0x568>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 80055c0:	69fb      	ldr	r3, [r7, #28]
 80055c2:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80055c6:	2b00      	cmp	r3, #0
 80055c8:	d00d      	beq.n	80055e6 <HAL_UART_IRQHandler+0x496>
 80055ca:	697b      	ldr	r3, [r7, #20]
 80055cc:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80055d0:	2b00      	cmp	r3, #0
 80055d2:	d008      	beq.n	80055e6 <HAL_UART_IRQHandler+0x496>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 80055d4:	687b      	ldr	r3, [r7, #4]
 80055d6:	681b      	ldr	r3, [r3, #0]
 80055d8:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 80055dc:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 80055de:	6878      	ldr	r0, [r7, #4]
 80055e0:	f001 f8be 	bl	8006760 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 80055e4:	e06b      	b.n	80056be <HAL_UART_IRQHandler+0x56e>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
 80055e6:	69fb      	ldr	r3, [r7, #28]
 80055e8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80055ec:	2b00      	cmp	r3, #0
 80055ee:	d012      	beq.n	8005616 <HAL_UART_IRQHandler+0x4c6>
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
 80055f0:	69bb      	ldr	r3, [r7, #24]
 80055f2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80055f6:	2b00      	cmp	r3, #0
 80055f8:	d104      	bne.n	8005604 <HAL_UART_IRQHandler+0x4b4>
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
 80055fa:	697b      	ldr	r3, [r7, #20]
 80055fc:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8005600:	2b00      	cmp	r3, #0
 8005602:	d008      	beq.n	8005616 <HAL_UART_IRQHandler+0x4c6>
  {
    if (huart->TxISR != NULL)
 8005604:	687b      	ldr	r3, [r7, #4]
 8005606:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005608:	2b00      	cmp	r3, #0
 800560a:	d057      	beq.n	80056bc <HAL_UART_IRQHandler+0x56c>
    {
      huart->TxISR(huart);
 800560c:	687b      	ldr	r3, [r7, #4]
 800560e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005610:	6878      	ldr	r0, [r7, #4]
 8005612:	4798      	blx	r3
    }
    return;
 8005614:	e052      	b.n	80056bc <HAL_UART_IRQHandler+0x56c>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 8005616:	69fb      	ldr	r3, [r7, #28]
 8005618:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800561c:	2b00      	cmp	r3, #0
 800561e:	d02b      	beq.n	8005678 <HAL_UART_IRQHandler+0x528>
 8005620:	69bb      	ldr	r3, [r7, #24]
 8005622:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005626:	2b00      	cmp	r3, #0
 8005628:	d026      	beq.n	8005678 <HAL_UART_IRQHandler+0x528>
  {
    UART_EndTransmit_IT(huart);
 800562a:	6878      	ldr	r0, [r7, #4]
 800562c:	f001 f87e 	bl	800672c <UART_EndTransmit_IT>
    return;
 8005630:	e045      	b.n	80056be <HAL_UART_IRQHandler+0x56e>
 8005632:	bf00      	nop
 8005634:	40020010 	.word	0x40020010
 8005638:	40020028 	.word	0x40020028
 800563c:	40020040 	.word	0x40020040
 8005640:	40020058 	.word	0x40020058
 8005644:	40020070 	.word	0x40020070
 8005648:	40020088 	.word	0x40020088
 800564c:	400200a0 	.word	0x400200a0
 8005650:	400200b8 	.word	0x400200b8
 8005654:	40020410 	.word	0x40020410
 8005658:	40020428 	.word	0x40020428
 800565c:	40020440 	.word	0x40020440
 8005660:	40020458 	.word	0x40020458
 8005664:	40020470 	.word	0x40020470
 8005668:	40020488 	.word	0x40020488
 800566c:	400204a0 	.word	0x400204a0
 8005670:	400204b8 	.word	0x400204b8
 8005674:	effffffe 	.word	0xeffffffe
  }

  /* UART TX Fifo Empty occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_TXFE) != 0U) && ((cr1its & USART_CR1_TXFEIE) != 0U))
 8005678:	69fb      	ldr	r3, [r7, #28]
 800567a:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800567e:	2b00      	cmp	r3, #0
 8005680:	d008      	beq.n	8005694 <HAL_UART_IRQHandler+0x544>
 8005682:	69bb      	ldr	r3, [r7, #24]
 8005684:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8005688:	2b00      	cmp	r3, #0
 800568a:	d003      	beq.n	8005694 <HAL_UART_IRQHandler+0x544>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Tx Fifo Empty Callback */
    huart->TxFifoEmptyCallback(huart);
#else
    /* Call legacy weak Tx Fifo Empty Callback */
    HAL_UARTEx_TxFifoEmptyCallback(huart);
 800568c:	6878      	ldr	r0, [r7, #4]
 800568e:	f001 f87b 	bl	8006788 <HAL_UARTEx_TxFifoEmptyCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8005692:	e014      	b.n	80056be <HAL_UART_IRQHandler+0x56e>
  }

  /* UART RX Fifo Full occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_RXFF) != 0U) && ((cr1its & USART_CR1_RXFFIE) != 0U))
 8005694:	69fb      	ldr	r3, [r7, #28]
 8005696:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800569a:	2b00      	cmp	r3, #0
 800569c:	d00f      	beq.n	80056be <HAL_UART_IRQHandler+0x56e>
 800569e:	69bb      	ldr	r3, [r7, #24]
 80056a0:	2b00      	cmp	r3, #0
 80056a2:	da0c      	bge.n	80056be <HAL_UART_IRQHandler+0x56e>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Rx Fifo Full Callback */
    huart->RxFifoFullCallback(huart);
#else
    /* Call legacy weak Rx Fifo Full Callback */
    HAL_UARTEx_RxFifoFullCallback(huart);
 80056a4:	6878      	ldr	r0, [r7, #4]
 80056a6:	f001 f865 	bl	8006774 <HAL_UARTEx_RxFifoFullCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 80056aa:	e008      	b.n	80056be <HAL_UART_IRQHandler+0x56e>
      return;
 80056ac:	bf00      	nop
 80056ae:	e006      	b.n	80056be <HAL_UART_IRQHandler+0x56e>
    return;
 80056b0:	bf00      	nop
 80056b2:	e004      	b.n	80056be <HAL_UART_IRQHandler+0x56e>
      return;
 80056b4:	bf00      	nop
 80056b6:	e002      	b.n	80056be <HAL_UART_IRQHandler+0x56e>
      return;
 80056b8:	bf00      	nop
 80056ba:	e000      	b.n	80056be <HAL_UART_IRQHandler+0x56e>
    return;
 80056bc:	bf00      	nop
  }
}
 80056be:	3720      	adds	r7, #32
 80056c0:	46bd      	mov	sp, r7
 80056c2:	bd80      	pop	{r7, pc}

080056c4 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 80056c4:	b480      	push	{r7}
 80056c6:	b083      	sub	sp, #12
 80056c8:	af00      	add	r7, sp, #0
 80056ca:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 80056cc:	bf00      	nop
 80056ce:	370c      	adds	r7, #12
 80056d0:	46bd      	mov	sp, r7
 80056d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056d6:	4770      	bx	lr

080056d8 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 80056d8:	b480      	push	{r7}
 80056da:	b083      	sub	sp, #12
 80056dc:	af00      	add	r7, sp, #0
 80056de:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 80056e0:	bf00      	nop
 80056e2:	370c      	adds	r7, #12
 80056e4:	46bd      	mov	sp, r7
 80056e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056ea:	4770      	bx	lr

080056ec <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 80056ec:	b480      	push	{r7}
 80056ee:	b083      	sub	sp, #12
 80056f0:	af00      	add	r7, sp, #0
 80056f2:	6078      	str	r0, [r7, #4]
 80056f4:	460b      	mov	r3, r1
 80056f6:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 80056f8:	bf00      	nop
 80056fa:	370c      	adds	r7, #12
 80056fc:	46bd      	mov	sp, r7
 80056fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005702:	4770      	bx	lr

08005704 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8005704:	b5b0      	push	{r4, r5, r7, lr}
 8005706:	b08e      	sub	sp, #56	; 0x38
 8005708:	af00      	add	r7, sp, #0
 800570a:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 800570c:	2300      	movs	r3, #0
 800570e:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8005712:	687b      	ldr	r3, [r7, #4]
 8005714:	689a      	ldr	r2, [r3, #8]
 8005716:	687b      	ldr	r3, [r7, #4]
 8005718:	691b      	ldr	r3, [r3, #16]
 800571a:	431a      	orrs	r2, r3
 800571c:	687b      	ldr	r3, [r7, #4]
 800571e:	695b      	ldr	r3, [r3, #20]
 8005720:	431a      	orrs	r2, r3
 8005722:	687b      	ldr	r3, [r7, #4]
 8005724:	69db      	ldr	r3, [r3, #28]
 8005726:	4313      	orrs	r3, r2
 8005728:	637b      	str	r3, [r7, #52]	; 0x34
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800572a:	687b      	ldr	r3, [r7, #4]
 800572c:	681b      	ldr	r3, [r3, #0]
 800572e:	681a      	ldr	r2, [r3, #0]
 8005730:	4bbf      	ldr	r3, [pc, #764]	; (8005a30 <UART_SetConfig+0x32c>)
 8005732:	4013      	ands	r3, r2
 8005734:	687a      	ldr	r2, [r7, #4]
 8005736:	6812      	ldr	r2, [r2, #0]
 8005738:	6b79      	ldr	r1, [r7, #52]	; 0x34
 800573a:	430b      	orrs	r3, r1
 800573c:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800573e:	687b      	ldr	r3, [r7, #4]
 8005740:	681b      	ldr	r3, [r3, #0]
 8005742:	685b      	ldr	r3, [r3, #4]
 8005744:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8005748:	687b      	ldr	r3, [r7, #4]
 800574a:	68da      	ldr	r2, [r3, #12]
 800574c:	687b      	ldr	r3, [r7, #4]
 800574e:	681b      	ldr	r3, [r3, #0]
 8005750:	430a      	orrs	r2, r1
 8005752:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8005754:	687b      	ldr	r3, [r7, #4]
 8005756:	699b      	ldr	r3, [r3, #24]
 8005758:	637b      	str	r3, [r7, #52]	; 0x34

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 800575a:	687b      	ldr	r3, [r7, #4]
 800575c:	681b      	ldr	r3, [r3, #0]
 800575e:	4ab5      	ldr	r2, [pc, #724]	; (8005a34 <UART_SetConfig+0x330>)
 8005760:	4293      	cmp	r3, r2
 8005762:	d004      	beq.n	800576e <UART_SetConfig+0x6a>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8005764:	687b      	ldr	r3, [r7, #4]
 8005766:	6a1b      	ldr	r3, [r3, #32]
 8005768:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800576a:	4313      	orrs	r3, r2
 800576c:	637b      	str	r3, [r7, #52]	; 0x34
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800576e:	687b      	ldr	r3, [r7, #4]
 8005770:	681b      	ldr	r3, [r3, #0]
 8005772:	689a      	ldr	r2, [r3, #8]
 8005774:	4bb0      	ldr	r3, [pc, #704]	; (8005a38 <UART_SetConfig+0x334>)
 8005776:	4013      	ands	r3, r2
 8005778:	687a      	ldr	r2, [r7, #4]
 800577a:	6812      	ldr	r2, [r2, #0]
 800577c:	6b79      	ldr	r1, [r7, #52]	; 0x34
 800577e:	430b      	orrs	r3, r1
 8005780:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8005782:	687b      	ldr	r3, [r7, #4]
 8005784:	681b      	ldr	r3, [r3, #0]
 8005786:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005788:	f023 010f 	bic.w	r1, r3, #15
 800578c:	687b      	ldr	r3, [r7, #4]
 800578e:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8005790:	687b      	ldr	r3, [r7, #4]
 8005792:	681b      	ldr	r3, [r3, #0]
 8005794:	430a      	orrs	r2, r1
 8005796:	62da      	str	r2, [r3, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8005798:	687b      	ldr	r3, [r7, #4]
 800579a:	681b      	ldr	r3, [r3, #0]
 800579c:	4aa7      	ldr	r2, [pc, #668]	; (8005a3c <UART_SetConfig+0x338>)
 800579e:	4293      	cmp	r3, r2
 80057a0:	d176      	bne.n	8005890 <UART_SetConfig+0x18c>
 80057a2:	4ba7      	ldr	r3, [pc, #668]	; (8005a40 <UART_SetConfig+0x33c>)
 80057a4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80057a6:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80057aa:	2b28      	cmp	r3, #40	; 0x28
 80057ac:	d86c      	bhi.n	8005888 <UART_SetConfig+0x184>
 80057ae:	a201      	add	r2, pc, #4	; (adr r2, 80057b4 <UART_SetConfig+0xb0>)
 80057b0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80057b4:	08005859 	.word	0x08005859
 80057b8:	08005889 	.word	0x08005889
 80057bc:	08005889 	.word	0x08005889
 80057c0:	08005889 	.word	0x08005889
 80057c4:	08005889 	.word	0x08005889
 80057c8:	08005889 	.word	0x08005889
 80057cc:	08005889 	.word	0x08005889
 80057d0:	08005889 	.word	0x08005889
 80057d4:	08005861 	.word	0x08005861
 80057d8:	08005889 	.word	0x08005889
 80057dc:	08005889 	.word	0x08005889
 80057e0:	08005889 	.word	0x08005889
 80057e4:	08005889 	.word	0x08005889
 80057e8:	08005889 	.word	0x08005889
 80057ec:	08005889 	.word	0x08005889
 80057f0:	08005889 	.word	0x08005889
 80057f4:	08005869 	.word	0x08005869
 80057f8:	08005889 	.word	0x08005889
 80057fc:	08005889 	.word	0x08005889
 8005800:	08005889 	.word	0x08005889
 8005804:	08005889 	.word	0x08005889
 8005808:	08005889 	.word	0x08005889
 800580c:	08005889 	.word	0x08005889
 8005810:	08005889 	.word	0x08005889
 8005814:	08005871 	.word	0x08005871
 8005818:	08005889 	.word	0x08005889
 800581c:	08005889 	.word	0x08005889
 8005820:	08005889 	.word	0x08005889
 8005824:	08005889 	.word	0x08005889
 8005828:	08005889 	.word	0x08005889
 800582c:	08005889 	.word	0x08005889
 8005830:	08005889 	.word	0x08005889
 8005834:	08005879 	.word	0x08005879
 8005838:	08005889 	.word	0x08005889
 800583c:	08005889 	.word	0x08005889
 8005840:	08005889 	.word	0x08005889
 8005844:	08005889 	.word	0x08005889
 8005848:	08005889 	.word	0x08005889
 800584c:	08005889 	.word	0x08005889
 8005850:	08005889 	.word	0x08005889
 8005854:	08005881 	.word	0x08005881
 8005858:	2301      	movs	r3, #1
 800585a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800585e:	e326      	b.n	8005eae <UART_SetConfig+0x7aa>
 8005860:	2304      	movs	r3, #4
 8005862:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8005866:	e322      	b.n	8005eae <UART_SetConfig+0x7aa>
 8005868:	2308      	movs	r3, #8
 800586a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800586e:	e31e      	b.n	8005eae <UART_SetConfig+0x7aa>
 8005870:	2310      	movs	r3, #16
 8005872:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8005876:	e31a      	b.n	8005eae <UART_SetConfig+0x7aa>
 8005878:	2320      	movs	r3, #32
 800587a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800587e:	e316      	b.n	8005eae <UART_SetConfig+0x7aa>
 8005880:	2340      	movs	r3, #64	; 0x40
 8005882:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8005886:	e312      	b.n	8005eae <UART_SetConfig+0x7aa>
 8005888:	2380      	movs	r3, #128	; 0x80
 800588a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800588e:	e30e      	b.n	8005eae <UART_SetConfig+0x7aa>
 8005890:	687b      	ldr	r3, [r7, #4]
 8005892:	681b      	ldr	r3, [r3, #0]
 8005894:	4a6b      	ldr	r2, [pc, #428]	; (8005a44 <UART_SetConfig+0x340>)
 8005896:	4293      	cmp	r3, r2
 8005898:	d130      	bne.n	80058fc <UART_SetConfig+0x1f8>
 800589a:	4b69      	ldr	r3, [pc, #420]	; (8005a40 <UART_SetConfig+0x33c>)
 800589c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800589e:	f003 0307 	and.w	r3, r3, #7
 80058a2:	2b05      	cmp	r3, #5
 80058a4:	d826      	bhi.n	80058f4 <UART_SetConfig+0x1f0>
 80058a6:	a201      	add	r2, pc, #4	; (adr r2, 80058ac <UART_SetConfig+0x1a8>)
 80058a8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80058ac:	080058c5 	.word	0x080058c5
 80058b0:	080058cd 	.word	0x080058cd
 80058b4:	080058d5 	.word	0x080058d5
 80058b8:	080058dd 	.word	0x080058dd
 80058bc:	080058e5 	.word	0x080058e5
 80058c0:	080058ed 	.word	0x080058ed
 80058c4:	2300      	movs	r3, #0
 80058c6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80058ca:	e2f0      	b.n	8005eae <UART_SetConfig+0x7aa>
 80058cc:	2304      	movs	r3, #4
 80058ce:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80058d2:	e2ec      	b.n	8005eae <UART_SetConfig+0x7aa>
 80058d4:	2308      	movs	r3, #8
 80058d6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80058da:	e2e8      	b.n	8005eae <UART_SetConfig+0x7aa>
 80058dc:	2310      	movs	r3, #16
 80058de:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80058e2:	e2e4      	b.n	8005eae <UART_SetConfig+0x7aa>
 80058e4:	2320      	movs	r3, #32
 80058e6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80058ea:	e2e0      	b.n	8005eae <UART_SetConfig+0x7aa>
 80058ec:	2340      	movs	r3, #64	; 0x40
 80058ee:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80058f2:	e2dc      	b.n	8005eae <UART_SetConfig+0x7aa>
 80058f4:	2380      	movs	r3, #128	; 0x80
 80058f6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80058fa:	e2d8      	b.n	8005eae <UART_SetConfig+0x7aa>
 80058fc:	687b      	ldr	r3, [r7, #4]
 80058fe:	681b      	ldr	r3, [r3, #0]
 8005900:	4a51      	ldr	r2, [pc, #324]	; (8005a48 <UART_SetConfig+0x344>)
 8005902:	4293      	cmp	r3, r2
 8005904:	d130      	bne.n	8005968 <UART_SetConfig+0x264>
 8005906:	4b4e      	ldr	r3, [pc, #312]	; (8005a40 <UART_SetConfig+0x33c>)
 8005908:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800590a:	f003 0307 	and.w	r3, r3, #7
 800590e:	2b05      	cmp	r3, #5
 8005910:	d826      	bhi.n	8005960 <UART_SetConfig+0x25c>
 8005912:	a201      	add	r2, pc, #4	; (adr r2, 8005918 <UART_SetConfig+0x214>)
 8005914:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005918:	08005931 	.word	0x08005931
 800591c:	08005939 	.word	0x08005939
 8005920:	08005941 	.word	0x08005941
 8005924:	08005949 	.word	0x08005949
 8005928:	08005951 	.word	0x08005951
 800592c:	08005959 	.word	0x08005959
 8005930:	2300      	movs	r3, #0
 8005932:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8005936:	e2ba      	b.n	8005eae <UART_SetConfig+0x7aa>
 8005938:	2304      	movs	r3, #4
 800593a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800593e:	e2b6      	b.n	8005eae <UART_SetConfig+0x7aa>
 8005940:	2308      	movs	r3, #8
 8005942:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8005946:	e2b2      	b.n	8005eae <UART_SetConfig+0x7aa>
 8005948:	2310      	movs	r3, #16
 800594a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800594e:	e2ae      	b.n	8005eae <UART_SetConfig+0x7aa>
 8005950:	2320      	movs	r3, #32
 8005952:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8005956:	e2aa      	b.n	8005eae <UART_SetConfig+0x7aa>
 8005958:	2340      	movs	r3, #64	; 0x40
 800595a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800595e:	e2a6      	b.n	8005eae <UART_SetConfig+0x7aa>
 8005960:	2380      	movs	r3, #128	; 0x80
 8005962:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8005966:	e2a2      	b.n	8005eae <UART_SetConfig+0x7aa>
 8005968:	687b      	ldr	r3, [r7, #4]
 800596a:	681b      	ldr	r3, [r3, #0]
 800596c:	4a37      	ldr	r2, [pc, #220]	; (8005a4c <UART_SetConfig+0x348>)
 800596e:	4293      	cmp	r3, r2
 8005970:	d130      	bne.n	80059d4 <UART_SetConfig+0x2d0>
 8005972:	4b33      	ldr	r3, [pc, #204]	; (8005a40 <UART_SetConfig+0x33c>)
 8005974:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005976:	f003 0307 	and.w	r3, r3, #7
 800597a:	2b05      	cmp	r3, #5
 800597c:	d826      	bhi.n	80059cc <UART_SetConfig+0x2c8>
 800597e:	a201      	add	r2, pc, #4	; (adr r2, 8005984 <UART_SetConfig+0x280>)
 8005980:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005984:	0800599d 	.word	0x0800599d
 8005988:	080059a5 	.word	0x080059a5
 800598c:	080059ad 	.word	0x080059ad
 8005990:	080059b5 	.word	0x080059b5
 8005994:	080059bd 	.word	0x080059bd
 8005998:	080059c5 	.word	0x080059c5
 800599c:	2300      	movs	r3, #0
 800599e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80059a2:	e284      	b.n	8005eae <UART_SetConfig+0x7aa>
 80059a4:	2304      	movs	r3, #4
 80059a6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80059aa:	e280      	b.n	8005eae <UART_SetConfig+0x7aa>
 80059ac:	2308      	movs	r3, #8
 80059ae:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80059b2:	e27c      	b.n	8005eae <UART_SetConfig+0x7aa>
 80059b4:	2310      	movs	r3, #16
 80059b6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80059ba:	e278      	b.n	8005eae <UART_SetConfig+0x7aa>
 80059bc:	2320      	movs	r3, #32
 80059be:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80059c2:	e274      	b.n	8005eae <UART_SetConfig+0x7aa>
 80059c4:	2340      	movs	r3, #64	; 0x40
 80059c6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80059ca:	e270      	b.n	8005eae <UART_SetConfig+0x7aa>
 80059cc:	2380      	movs	r3, #128	; 0x80
 80059ce:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80059d2:	e26c      	b.n	8005eae <UART_SetConfig+0x7aa>
 80059d4:	687b      	ldr	r3, [r7, #4]
 80059d6:	681b      	ldr	r3, [r3, #0]
 80059d8:	4a1d      	ldr	r2, [pc, #116]	; (8005a50 <UART_SetConfig+0x34c>)
 80059da:	4293      	cmp	r3, r2
 80059dc:	d142      	bne.n	8005a64 <UART_SetConfig+0x360>
 80059de:	4b18      	ldr	r3, [pc, #96]	; (8005a40 <UART_SetConfig+0x33c>)
 80059e0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80059e2:	f003 0307 	and.w	r3, r3, #7
 80059e6:	2b05      	cmp	r3, #5
 80059e8:	d838      	bhi.n	8005a5c <UART_SetConfig+0x358>
 80059ea:	a201      	add	r2, pc, #4	; (adr r2, 80059f0 <UART_SetConfig+0x2ec>)
 80059ec:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80059f0:	08005a09 	.word	0x08005a09
 80059f4:	08005a11 	.word	0x08005a11
 80059f8:	08005a19 	.word	0x08005a19
 80059fc:	08005a21 	.word	0x08005a21
 8005a00:	08005a29 	.word	0x08005a29
 8005a04:	08005a55 	.word	0x08005a55
 8005a08:	2300      	movs	r3, #0
 8005a0a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8005a0e:	e24e      	b.n	8005eae <UART_SetConfig+0x7aa>
 8005a10:	2304      	movs	r3, #4
 8005a12:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8005a16:	e24a      	b.n	8005eae <UART_SetConfig+0x7aa>
 8005a18:	2308      	movs	r3, #8
 8005a1a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8005a1e:	e246      	b.n	8005eae <UART_SetConfig+0x7aa>
 8005a20:	2310      	movs	r3, #16
 8005a22:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8005a26:	e242      	b.n	8005eae <UART_SetConfig+0x7aa>
 8005a28:	2320      	movs	r3, #32
 8005a2a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8005a2e:	e23e      	b.n	8005eae <UART_SetConfig+0x7aa>
 8005a30:	cfff69f3 	.word	0xcfff69f3
 8005a34:	58000c00 	.word	0x58000c00
 8005a38:	11fff4ff 	.word	0x11fff4ff
 8005a3c:	40011000 	.word	0x40011000
 8005a40:	58024400 	.word	0x58024400
 8005a44:	40004400 	.word	0x40004400
 8005a48:	40004800 	.word	0x40004800
 8005a4c:	40004c00 	.word	0x40004c00
 8005a50:	40005000 	.word	0x40005000
 8005a54:	2340      	movs	r3, #64	; 0x40
 8005a56:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8005a5a:	e228      	b.n	8005eae <UART_SetConfig+0x7aa>
 8005a5c:	2380      	movs	r3, #128	; 0x80
 8005a5e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8005a62:	e224      	b.n	8005eae <UART_SetConfig+0x7aa>
 8005a64:	687b      	ldr	r3, [r7, #4]
 8005a66:	681b      	ldr	r3, [r3, #0]
 8005a68:	4ab1      	ldr	r2, [pc, #708]	; (8005d30 <UART_SetConfig+0x62c>)
 8005a6a:	4293      	cmp	r3, r2
 8005a6c:	d176      	bne.n	8005b5c <UART_SetConfig+0x458>
 8005a6e:	4bb1      	ldr	r3, [pc, #708]	; (8005d34 <UART_SetConfig+0x630>)
 8005a70:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005a72:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8005a76:	2b28      	cmp	r3, #40	; 0x28
 8005a78:	d86c      	bhi.n	8005b54 <UART_SetConfig+0x450>
 8005a7a:	a201      	add	r2, pc, #4	; (adr r2, 8005a80 <UART_SetConfig+0x37c>)
 8005a7c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005a80:	08005b25 	.word	0x08005b25
 8005a84:	08005b55 	.word	0x08005b55
 8005a88:	08005b55 	.word	0x08005b55
 8005a8c:	08005b55 	.word	0x08005b55
 8005a90:	08005b55 	.word	0x08005b55
 8005a94:	08005b55 	.word	0x08005b55
 8005a98:	08005b55 	.word	0x08005b55
 8005a9c:	08005b55 	.word	0x08005b55
 8005aa0:	08005b2d 	.word	0x08005b2d
 8005aa4:	08005b55 	.word	0x08005b55
 8005aa8:	08005b55 	.word	0x08005b55
 8005aac:	08005b55 	.word	0x08005b55
 8005ab0:	08005b55 	.word	0x08005b55
 8005ab4:	08005b55 	.word	0x08005b55
 8005ab8:	08005b55 	.word	0x08005b55
 8005abc:	08005b55 	.word	0x08005b55
 8005ac0:	08005b35 	.word	0x08005b35
 8005ac4:	08005b55 	.word	0x08005b55
 8005ac8:	08005b55 	.word	0x08005b55
 8005acc:	08005b55 	.word	0x08005b55
 8005ad0:	08005b55 	.word	0x08005b55
 8005ad4:	08005b55 	.word	0x08005b55
 8005ad8:	08005b55 	.word	0x08005b55
 8005adc:	08005b55 	.word	0x08005b55
 8005ae0:	08005b3d 	.word	0x08005b3d
 8005ae4:	08005b55 	.word	0x08005b55
 8005ae8:	08005b55 	.word	0x08005b55
 8005aec:	08005b55 	.word	0x08005b55
 8005af0:	08005b55 	.word	0x08005b55
 8005af4:	08005b55 	.word	0x08005b55
 8005af8:	08005b55 	.word	0x08005b55
 8005afc:	08005b55 	.word	0x08005b55
 8005b00:	08005b45 	.word	0x08005b45
 8005b04:	08005b55 	.word	0x08005b55
 8005b08:	08005b55 	.word	0x08005b55
 8005b0c:	08005b55 	.word	0x08005b55
 8005b10:	08005b55 	.word	0x08005b55
 8005b14:	08005b55 	.word	0x08005b55
 8005b18:	08005b55 	.word	0x08005b55
 8005b1c:	08005b55 	.word	0x08005b55
 8005b20:	08005b4d 	.word	0x08005b4d
 8005b24:	2301      	movs	r3, #1
 8005b26:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8005b2a:	e1c0      	b.n	8005eae <UART_SetConfig+0x7aa>
 8005b2c:	2304      	movs	r3, #4
 8005b2e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8005b32:	e1bc      	b.n	8005eae <UART_SetConfig+0x7aa>
 8005b34:	2308      	movs	r3, #8
 8005b36:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8005b3a:	e1b8      	b.n	8005eae <UART_SetConfig+0x7aa>
 8005b3c:	2310      	movs	r3, #16
 8005b3e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8005b42:	e1b4      	b.n	8005eae <UART_SetConfig+0x7aa>
 8005b44:	2320      	movs	r3, #32
 8005b46:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8005b4a:	e1b0      	b.n	8005eae <UART_SetConfig+0x7aa>
 8005b4c:	2340      	movs	r3, #64	; 0x40
 8005b4e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8005b52:	e1ac      	b.n	8005eae <UART_SetConfig+0x7aa>
 8005b54:	2380      	movs	r3, #128	; 0x80
 8005b56:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8005b5a:	e1a8      	b.n	8005eae <UART_SetConfig+0x7aa>
 8005b5c:	687b      	ldr	r3, [r7, #4]
 8005b5e:	681b      	ldr	r3, [r3, #0]
 8005b60:	4a75      	ldr	r2, [pc, #468]	; (8005d38 <UART_SetConfig+0x634>)
 8005b62:	4293      	cmp	r3, r2
 8005b64:	d130      	bne.n	8005bc8 <UART_SetConfig+0x4c4>
 8005b66:	4b73      	ldr	r3, [pc, #460]	; (8005d34 <UART_SetConfig+0x630>)
 8005b68:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005b6a:	f003 0307 	and.w	r3, r3, #7
 8005b6e:	2b05      	cmp	r3, #5
 8005b70:	d826      	bhi.n	8005bc0 <UART_SetConfig+0x4bc>
 8005b72:	a201      	add	r2, pc, #4	; (adr r2, 8005b78 <UART_SetConfig+0x474>)
 8005b74:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005b78:	08005b91 	.word	0x08005b91
 8005b7c:	08005b99 	.word	0x08005b99
 8005b80:	08005ba1 	.word	0x08005ba1
 8005b84:	08005ba9 	.word	0x08005ba9
 8005b88:	08005bb1 	.word	0x08005bb1
 8005b8c:	08005bb9 	.word	0x08005bb9
 8005b90:	2300      	movs	r3, #0
 8005b92:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8005b96:	e18a      	b.n	8005eae <UART_SetConfig+0x7aa>
 8005b98:	2304      	movs	r3, #4
 8005b9a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8005b9e:	e186      	b.n	8005eae <UART_SetConfig+0x7aa>
 8005ba0:	2308      	movs	r3, #8
 8005ba2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8005ba6:	e182      	b.n	8005eae <UART_SetConfig+0x7aa>
 8005ba8:	2310      	movs	r3, #16
 8005baa:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8005bae:	e17e      	b.n	8005eae <UART_SetConfig+0x7aa>
 8005bb0:	2320      	movs	r3, #32
 8005bb2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8005bb6:	e17a      	b.n	8005eae <UART_SetConfig+0x7aa>
 8005bb8:	2340      	movs	r3, #64	; 0x40
 8005bba:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8005bbe:	e176      	b.n	8005eae <UART_SetConfig+0x7aa>
 8005bc0:	2380      	movs	r3, #128	; 0x80
 8005bc2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8005bc6:	e172      	b.n	8005eae <UART_SetConfig+0x7aa>
 8005bc8:	687b      	ldr	r3, [r7, #4]
 8005bca:	681b      	ldr	r3, [r3, #0]
 8005bcc:	4a5b      	ldr	r2, [pc, #364]	; (8005d3c <UART_SetConfig+0x638>)
 8005bce:	4293      	cmp	r3, r2
 8005bd0:	d130      	bne.n	8005c34 <UART_SetConfig+0x530>
 8005bd2:	4b58      	ldr	r3, [pc, #352]	; (8005d34 <UART_SetConfig+0x630>)
 8005bd4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005bd6:	f003 0307 	and.w	r3, r3, #7
 8005bda:	2b05      	cmp	r3, #5
 8005bdc:	d826      	bhi.n	8005c2c <UART_SetConfig+0x528>
 8005bde:	a201      	add	r2, pc, #4	; (adr r2, 8005be4 <UART_SetConfig+0x4e0>)
 8005be0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005be4:	08005bfd 	.word	0x08005bfd
 8005be8:	08005c05 	.word	0x08005c05
 8005bec:	08005c0d 	.word	0x08005c0d
 8005bf0:	08005c15 	.word	0x08005c15
 8005bf4:	08005c1d 	.word	0x08005c1d
 8005bf8:	08005c25 	.word	0x08005c25
 8005bfc:	2300      	movs	r3, #0
 8005bfe:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8005c02:	e154      	b.n	8005eae <UART_SetConfig+0x7aa>
 8005c04:	2304      	movs	r3, #4
 8005c06:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8005c0a:	e150      	b.n	8005eae <UART_SetConfig+0x7aa>
 8005c0c:	2308      	movs	r3, #8
 8005c0e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8005c12:	e14c      	b.n	8005eae <UART_SetConfig+0x7aa>
 8005c14:	2310      	movs	r3, #16
 8005c16:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8005c1a:	e148      	b.n	8005eae <UART_SetConfig+0x7aa>
 8005c1c:	2320      	movs	r3, #32
 8005c1e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8005c22:	e144      	b.n	8005eae <UART_SetConfig+0x7aa>
 8005c24:	2340      	movs	r3, #64	; 0x40
 8005c26:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8005c2a:	e140      	b.n	8005eae <UART_SetConfig+0x7aa>
 8005c2c:	2380      	movs	r3, #128	; 0x80
 8005c2e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8005c32:	e13c      	b.n	8005eae <UART_SetConfig+0x7aa>
 8005c34:	687b      	ldr	r3, [r7, #4]
 8005c36:	681b      	ldr	r3, [r3, #0]
 8005c38:	4a41      	ldr	r2, [pc, #260]	; (8005d40 <UART_SetConfig+0x63c>)
 8005c3a:	4293      	cmp	r3, r2
 8005c3c:	f040 8082 	bne.w	8005d44 <UART_SetConfig+0x640>
 8005c40:	4b3c      	ldr	r3, [pc, #240]	; (8005d34 <UART_SetConfig+0x630>)
 8005c42:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005c44:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8005c48:	2b28      	cmp	r3, #40	; 0x28
 8005c4a:	d86d      	bhi.n	8005d28 <UART_SetConfig+0x624>
 8005c4c:	a201      	add	r2, pc, #4	; (adr r2, 8005c54 <UART_SetConfig+0x550>)
 8005c4e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005c52:	bf00      	nop
 8005c54:	08005cf9 	.word	0x08005cf9
 8005c58:	08005d29 	.word	0x08005d29
 8005c5c:	08005d29 	.word	0x08005d29
 8005c60:	08005d29 	.word	0x08005d29
 8005c64:	08005d29 	.word	0x08005d29
 8005c68:	08005d29 	.word	0x08005d29
 8005c6c:	08005d29 	.word	0x08005d29
 8005c70:	08005d29 	.word	0x08005d29
 8005c74:	08005d01 	.word	0x08005d01
 8005c78:	08005d29 	.word	0x08005d29
 8005c7c:	08005d29 	.word	0x08005d29
 8005c80:	08005d29 	.word	0x08005d29
 8005c84:	08005d29 	.word	0x08005d29
 8005c88:	08005d29 	.word	0x08005d29
 8005c8c:	08005d29 	.word	0x08005d29
 8005c90:	08005d29 	.word	0x08005d29
 8005c94:	08005d09 	.word	0x08005d09
 8005c98:	08005d29 	.word	0x08005d29
 8005c9c:	08005d29 	.word	0x08005d29
 8005ca0:	08005d29 	.word	0x08005d29
 8005ca4:	08005d29 	.word	0x08005d29
 8005ca8:	08005d29 	.word	0x08005d29
 8005cac:	08005d29 	.word	0x08005d29
 8005cb0:	08005d29 	.word	0x08005d29
 8005cb4:	08005d11 	.word	0x08005d11
 8005cb8:	08005d29 	.word	0x08005d29
 8005cbc:	08005d29 	.word	0x08005d29
 8005cc0:	08005d29 	.word	0x08005d29
 8005cc4:	08005d29 	.word	0x08005d29
 8005cc8:	08005d29 	.word	0x08005d29
 8005ccc:	08005d29 	.word	0x08005d29
 8005cd0:	08005d29 	.word	0x08005d29
 8005cd4:	08005d19 	.word	0x08005d19
 8005cd8:	08005d29 	.word	0x08005d29
 8005cdc:	08005d29 	.word	0x08005d29
 8005ce0:	08005d29 	.word	0x08005d29
 8005ce4:	08005d29 	.word	0x08005d29
 8005ce8:	08005d29 	.word	0x08005d29
 8005cec:	08005d29 	.word	0x08005d29
 8005cf0:	08005d29 	.word	0x08005d29
 8005cf4:	08005d21 	.word	0x08005d21
 8005cf8:	2301      	movs	r3, #1
 8005cfa:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8005cfe:	e0d6      	b.n	8005eae <UART_SetConfig+0x7aa>
 8005d00:	2304      	movs	r3, #4
 8005d02:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8005d06:	e0d2      	b.n	8005eae <UART_SetConfig+0x7aa>
 8005d08:	2308      	movs	r3, #8
 8005d0a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8005d0e:	e0ce      	b.n	8005eae <UART_SetConfig+0x7aa>
 8005d10:	2310      	movs	r3, #16
 8005d12:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8005d16:	e0ca      	b.n	8005eae <UART_SetConfig+0x7aa>
 8005d18:	2320      	movs	r3, #32
 8005d1a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8005d1e:	e0c6      	b.n	8005eae <UART_SetConfig+0x7aa>
 8005d20:	2340      	movs	r3, #64	; 0x40
 8005d22:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8005d26:	e0c2      	b.n	8005eae <UART_SetConfig+0x7aa>
 8005d28:	2380      	movs	r3, #128	; 0x80
 8005d2a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8005d2e:	e0be      	b.n	8005eae <UART_SetConfig+0x7aa>
 8005d30:	40011400 	.word	0x40011400
 8005d34:	58024400 	.word	0x58024400
 8005d38:	40007800 	.word	0x40007800
 8005d3c:	40007c00 	.word	0x40007c00
 8005d40:	40011800 	.word	0x40011800
 8005d44:	687b      	ldr	r3, [r7, #4]
 8005d46:	681b      	ldr	r3, [r3, #0]
 8005d48:	4aad      	ldr	r2, [pc, #692]	; (8006000 <UART_SetConfig+0x8fc>)
 8005d4a:	4293      	cmp	r3, r2
 8005d4c:	d176      	bne.n	8005e3c <UART_SetConfig+0x738>
 8005d4e:	4bad      	ldr	r3, [pc, #692]	; (8006004 <UART_SetConfig+0x900>)
 8005d50:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005d52:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8005d56:	2b28      	cmp	r3, #40	; 0x28
 8005d58:	d86c      	bhi.n	8005e34 <UART_SetConfig+0x730>
 8005d5a:	a201      	add	r2, pc, #4	; (adr r2, 8005d60 <UART_SetConfig+0x65c>)
 8005d5c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005d60:	08005e05 	.word	0x08005e05
 8005d64:	08005e35 	.word	0x08005e35
 8005d68:	08005e35 	.word	0x08005e35
 8005d6c:	08005e35 	.word	0x08005e35
 8005d70:	08005e35 	.word	0x08005e35
 8005d74:	08005e35 	.word	0x08005e35
 8005d78:	08005e35 	.word	0x08005e35
 8005d7c:	08005e35 	.word	0x08005e35
 8005d80:	08005e0d 	.word	0x08005e0d
 8005d84:	08005e35 	.word	0x08005e35
 8005d88:	08005e35 	.word	0x08005e35
 8005d8c:	08005e35 	.word	0x08005e35
 8005d90:	08005e35 	.word	0x08005e35
 8005d94:	08005e35 	.word	0x08005e35
 8005d98:	08005e35 	.word	0x08005e35
 8005d9c:	08005e35 	.word	0x08005e35
 8005da0:	08005e15 	.word	0x08005e15
 8005da4:	08005e35 	.word	0x08005e35
 8005da8:	08005e35 	.word	0x08005e35
 8005dac:	08005e35 	.word	0x08005e35
 8005db0:	08005e35 	.word	0x08005e35
 8005db4:	08005e35 	.word	0x08005e35
 8005db8:	08005e35 	.word	0x08005e35
 8005dbc:	08005e35 	.word	0x08005e35
 8005dc0:	08005e1d 	.word	0x08005e1d
 8005dc4:	08005e35 	.word	0x08005e35
 8005dc8:	08005e35 	.word	0x08005e35
 8005dcc:	08005e35 	.word	0x08005e35
 8005dd0:	08005e35 	.word	0x08005e35
 8005dd4:	08005e35 	.word	0x08005e35
 8005dd8:	08005e35 	.word	0x08005e35
 8005ddc:	08005e35 	.word	0x08005e35
 8005de0:	08005e25 	.word	0x08005e25
 8005de4:	08005e35 	.word	0x08005e35
 8005de8:	08005e35 	.word	0x08005e35
 8005dec:	08005e35 	.word	0x08005e35
 8005df0:	08005e35 	.word	0x08005e35
 8005df4:	08005e35 	.word	0x08005e35
 8005df8:	08005e35 	.word	0x08005e35
 8005dfc:	08005e35 	.word	0x08005e35
 8005e00:	08005e2d 	.word	0x08005e2d
 8005e04:	2301      	movs	r3, #1
 8005e06:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8005e0a:	e050      	b.n	8005eae <UART_SetConfig+0x7aa>
 8005e0c:	2304      	movs	r3, #4
 8005e0e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8005e12:	e04c      	b.n	8005eae <UART_SetConfig+0x7aa>
 8005e14:	2308      	movs	r3, #8
 8005e16:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8005e1a:	e048      	b.n	8005eae <UART_SetConfig+0x7aa>
 8005e1c:	2310      	movs	r3, #16
 8005e1e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8005e22:	e044      	b.n	8005eae <UART_SetConfig+0x7aa>
 8005e24:	2320      	movs	r3, #32
 8005e26:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8005e2a:	e040      	b.n	8005eae <UART_SetConfig+0x7aa>
 8005e2c:	2340      	movs	r3, #64	; 0x40
 8005e2e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8005e32:	e03c      	b.n	8005eae <UART_SetConfig+0x7aa>
 8005e34:	2380      	movs	r3, #128	; 0x80
 8005e36:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8005e3a:	e038      	b.n	8005eae <UART_SetConfig+0x7aa>
 8005e3c:	687b      	ldr	r3, [r7, #4]
 8005e3e:	681b      	ldr	r3, [r3, #0]
 8005e40:	4a71      	ldr	r2, [pc, #452]	; (8006008 <UART_SetConfig+0x904>)
 8005e42:	4293      	cmp	r3, r2
 8005e44:	d130      	bne.n	8005ea8 <UART_SetConfig+0x7a4>
 8005e46:	4b6f      	ldr	r3, [pc, #444]	; (8006004 <UART_SetConfig+0x900>)
 8005e48:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005e4a:	f003 0307 	and.w	r3, r3, #7
 8005e4e:	2b05      	cmp	r3, #5
 8005e50:	d826      	bhi.n	8005ea0 <UART_SetConfig+0x79c>
 8005e52:	a201      	add	r2, pc, #4	; (adr r2, 8005e58 <UART_SetConfig+0x754>)
 8005e54:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005e58:	08005e71 	.word	0x08005e71
 8005e5c:	08005e79 	.word	0x08005e79
 8005e60:	08005e81 	.word	0x08005e81
 8005e64:	08005e89 	.word	0x08005e89
 8005e68:	08005e91 	.word	0x08005e91
 8005e6c:	08005e99 	.word	0x08005e99
 8005e70:	2302      	movs	r3, #2
 8005e72:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8005e76:	e01a      	b.n	8005eae <UART_SetConfig+0x7aa>
 8005e78:	2304      	movs	r3, #4
 8005e7a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8005e7e:	e016      	b.n	8005eae <UART_SetConfig+0x7aa>
 8005e80:	2308      	movs	r3, #8
 8005e82:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8005e86:	e012      	b.n	8005eae <UART_SetConfig+0x7aa>
 8005e88:	2310      	movs	r3, #16
 8005e8a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8005e8e:	e00e      	b.n	8005eae <UART_SetConfig+0x7aa>
 8005e90:	2320      	movs	r3, #32
 8005e92:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8005e96:	e00a      	b.n	8005eae <UART_SetConfig+0x7aa>
 8005e98:	2340      	movs	r3, #64	; 0x40
 8005e9a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8005e9e:	e006      	b.n	8005eae <UART_SetConfig+0x7aa>
 8005ea0:	2380      	movs	r3, #128	; 0x80
 8005ea2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8005ea6:	e002      	b.n	8005eae <UART_SetConfig+0x7aa>
 8005ea8:	2380      	movs	r3, #128	; 0x80
 8005eaa:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8005eae:	687b      	ldr	r3, [r7, #4]
 8005eb0:	681b      	ldr	r3, [r3, #0]
 8005eb2:	4a55      	ldr	r2, [pc, #340]	; (8006008 <UART_SetConfig+0x904>)
 8005eb4:	4293      	cmp	r3, r2
 8005eb6:	f040 80f0 	bne.w	800609a <UART_SetConfig+0x996>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8005eba:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8005ebe:	2b20      	cmp	r3, #32
 8005ec0:	dc46      	bgt.n	8005f50 <UART_SetConfig+0x84c>
 8005ec2:	2b02      	cmp	r3, #2
 8005ec4:	db75      	blt.n	8005fb2 <UART_SetConfig+0x8ae>
 8005ec6:	3b02      	subs	r3, #2
 8005ec8:	2b1e      	cmp	r3, #30
 8005eca:	d872      	bhi.n	8005fb2 <UART_SetConfig+0x8ae>
 8005ecc:	a201      	add	r2, pc, #4	; (adr r2, 8005ed4 <UART_SetConfig+0x7d0>)
 8005ece:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005ed2:	bf00      	nop
 8005ed4:	08005f57 	.word	0x08005f57
 8005ed8:	08005fb3 	.word	0x08005fb3
 8005edc:	08005f5f 	.word	0x08005f5f
 8005ee0:	08005fb3 	.word	0x08005fb3
 8005ee4:	08005fb3 	.word	0x08005fb3
 8005ee8:	08005fb3 	.word	0x08005fb3
 8005eec:	08005f6f 	.word	0x08005f6f
 8005ef0:	08005fb3 	.word	0x08005fb3
 8005ef4:	08005fb3 	.word	0x08005fb3
 8005ef8:	08005fb3 	.word	0x08005fb3
 8005efc:	08005fb3 	.word	0x08005fb3
 8005f00:	08005fb3 	.word	0x08005fb3
 8005f04:	08005fb3 	.word	0x08005fb3
 8005f08:	08005fb3 	.word	0x08005fb3
 8005f0c:	08005f7f 	.word	0x08005f7f
 8005f10:	08005fb3 	.word	0x08005fb3
 8005f14:	08005fb3 	.word	0x08005fb3
 8005f18:	08005fb3 	.word	0x08005fb3
 8005f1c:	08005fb3 	.word	0x08005fb3
 8005f20:	08005fb3 	.word	0x08005fb3
 8005f24:	08005fb3 	.word	0x08005fb3
 8005f28:	08005fb3 	.word	0x08005fb3
 8005f2c:	08005fb3 	.word	0x08005fb3
 8005f30:	08005fb3 	.word	0x08005fb3
 8005f34:	08005fb3 	.word	0x08005fb3
 8005f38:	08005fb3 	.word	0x08005fb3
 8005f3c:	08005fb3 	.word	0x08005fb3
 8005f40:	08005fb3 	.word	0x08005fb3
 8005f44:	08005fb3 	.word	0x08005fb3
 8005f48:	08005fb3 	.word	0x08005fb3
 8005f4c:	08005fa5 	.word	0x08005fa5
 8005f50:	2b40      	cmp	r3, #64	; 0x40
 8005f52:	d02a      	beq.n	8005faa <UART_SetConfig+0x8a6>
 8005f54:	e02d      	b.n	8005fb2 <UART_SetConfig+0x8ae>
    {
      case UART_CLOCKSOURCE_D3PCLK1:
        pclk = HAL_RCCEx_GetD3PCLK1Freq();
 8005f56:	f7fe fb9d 	bl	8004694 <HAL_RCCEx_GetD3PCLK1Freq>
 8005f5a:	62f8      	str	r0, [r7, #44]	; 0x2c
        break;
 8005f5c:	e02f      	b.n	8005fbe <UART_SetConfig+0x8ba>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8005f5e:	f107 0314 	add.w	r3, r7, #20
 8005f62:	4618      	mov	r0, r3
 8005f64:	f7fe fbac 	bl	80046c0 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 8005f68:	69bb      	ldr	r3, [r7, #24]
 8005f6a:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8005f6c:	e027      	b.n	8005fbe <UART_SetConfig+0x8ba>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8005f6e:	f107 0308 	add.w	r3, r7, #8
 8005f72:	4618      	mov	r0, r3
 8005f74:	f7fe fcf8 	bl	8004968 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 8005f78:	68fb      	ldr	r3, [r7, #12]
 8005f7a:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8005f7c:	e01f      	b.n	8005fbe <UART_SetConfig+0x8ba>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8005f7e:	4b21      	ldr	r3, [pc, #132]	; (8006004 <UART_SetConfig+0x900>)
 8005f80:	681b      	ldr	r3, [r3, #0]
 8005f82:	f003 0320 	and.w	r3, r3, #32
 8005f86:	2b00      	cmp	r3, #0
 8005f88:	d009      	beq.n	8005f9e <UART_SetConfig+0x89a>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 8005f8a:	4b1e      	ldr	r3, [pc, #120]	; (8006004 <UART_SetConfig+0x900>)
 8005f8c:	681b      	ldr	r3, [r3, #0]
 8005f8e:	08db      	lsrs	r3, r3, #3
 8005f90:	f003 0303 	and.w	r3, r3, #3
 8005f94:	4a1d      	ldr	r2, [pc, #116]	; (800600c <UART_SetConfig+0x908>)
 8005f96:	fa22 f303 	lsr.w	r3, r2, r3
 8005f9a:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8005f9c:	e00f      	b.n	8005fbe <UART_SetConfig+0x8ba>
          pclk = (uint32_t) HSI_VALUE;
 8005f9e:	4b1b      	ldr	r3, [pc, #108]	; (800600c <UART_SetConfig+0x908>)
 8005fa0:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8005fa2:	e00c      	b.n	8005fbe <UART_SetConfig+0x8ba>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 8005fa4:	4b1a      	ldr	r3, [pc, #104]	; (8006010 <UART_SetConfig+0x90c>)
 8005fa6:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8005fa8:	e009      	b.n	8005fbe <UART_SetConfig+0x8ba>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8005faa:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8005fae:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8005fb0:	e005      	b.n	8005fbe <UART_SetConfig+0x8ba>
      default:
        pclk = 0U;
 8005fb2:	2300      	movs	r3, #0
 8005fb4:	62fb      	str	r3, [r7, #44]	; 0x2c
        ret = HAL_ERROR;
 8005fb6:	2301      	movs	r3, #1
 8005fb8:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
        break;
 8005fbc:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8005fbe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005fc0:	2b00      	cmp	r3, #0
 8005fc2:	f000 81e6 	beq.w	8006392 <UART_SetConfig+0xc8e>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 8005fc6:	687b      	ldr	r3, [r7, #4]
 8005fc8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005fca:	4a12      	ldr	r2, [pc, #72]	; (8006014 <UART_SetConfig+0x910>)
 8005fcc:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8005fd0:	461a      	mov	r2, r3
 8005fd2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005fd4:	fbb3 f3f2 	udiv	r3, r3, r2
 8005fd8:	623b      	str	r3, [r7, #32]

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8005fda:	687b      	ldr	r3, [r7, #4]
 8005fdc:	685a      	ldr	r2, [r3, #4]
 8005fde:	4613      	mov	r3, r2
 8005fe0:	005b      	lsls	r3, r3, #1
 8005fe2:	4413      	add	r3, r2
 8005fe4:	6a3a      	ldr	r2, [r7, #32]
 8005fe6:	429a      	cmp	r2, r3
 8005fe8:	d305      	bcc.n	8005ff6 <UART_SetConfig+0x8f2>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 8005fea:	687b      	ldr	r3, [r7, #4]
 8005fec:	685b      	ldr	r3, [r3, #4]
 8005fee:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8005ff0:	6a3a      	ldr	r2, [r7, #32]
 8005ff2:	429a      	cmp	r2, r3
 8005ff4:	d910      	bls.n	8006018 <UART_SetConfig+0x914>
      {
        ret = HAL_ERROR;
 8005ff6:	2301      	movs	r3, #1
 8005ff8:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
 8005ffc:	e1c9      	b.n	8006392 <UART_SetConfig+0xc8e>
 8005ffe:	bf00      	nop
 8006000:	40011c00 	.word	0x40011c00
 8006004:	58024400 	.word	0x58024400
 8006008:	58000c00 	.word	0x58000c00
 800600c:	03d09000 	.word	0x03d09000
 8006010:	003d0900 	.word	0x003d0900
 8006014:	08007fb4 	.word	0x08007fb4
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8006018:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800601a:	4618      	mov	r0, r3
 800601c:	f04f 0100 	mov.w	r1, #0
 8006020:	687b      	ldr	r3, [r7, #4]
 8006022:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006024:	4ac1      	ldr	r2, [pc, #772]	; (800632c <UART_SetConfig+0xc28>)
 8006026:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800602a:	b29a      	uxth	r2, r3
 800602c:	f04f 0300 	mov.w	r3, #0
 8006030:	f7fa f9be 	bl	80003b0 <__aeabi_uldivmod>
 8006034:	4602      	mov	r2, r0
 8006036:	460b      	mov	r3, r1
 8006038:	4610      	mov	r0, r2
 800603a:	4619      	mov	r1, r3
 800603c:	f04f 0200 	mov.w	r2, #0
 8006040:	f04f 0300 	mov.w	r3, #0
 8006044:	020b      	lsls	r3, r1, #8
 8006046:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 800604a:	0202      	lsls	r2, r0, #8
 800604c:	6879      	ldr	r1, [r7, #4]
 800604e:	6849      	ldr	r1, [r1, #4]
 8006050:	0849      	lsrs	r1, r1, #1
 8006052:	4608      	mov	r0, r1
 8006054:	f04f 0100 	mov.w	r1, #0
 8006058:	1814      	adds	r4, r2, r0
 800605a:	eb43 0501 	adc.w	r5, r3, r1
 800605e:	687b      	ldr	r3, [r7, #4]
 8006060:	685b      	ldr	r3, [r3, #4]
 8006062:	461a      	mov	r2, r3
 8006064:	f04f 0300 	mov.w	r3, #0
 8006068:	4620      	mov	r0, r4
 800606a:	4629      	mov	r1, r5
 800606c:	f7fa f9a0 	bl	80003b0 <__aeabi_uldivmod>
 8006070:	4602      	mov	r2, r0
 8006072:	460b      	mov	r3, r1
 8006074:	4613      	mov	r3, r2
 8006076:	62bb      	str	r3, [r7, #40]	; 0x28
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8006078:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800607a:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800607e:	d308      	bcc.n	8006092 <UART_SetConfig+0x98e>
 8006080:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006082:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8006086:	d204      	bcs.n	8006092 <UART_SetConfig+0x98e>
        {
          huart->Instance->BRR = usartdiv;
 8006088:	687b      	ldr	r3, [r7, #4]
 800608a:	681b      	ldr	r3, [r3, #0]
 800608c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800608e:	60da      	str	r2, [r3, #12]
 8006090:	e17f      	b.n	8006392 <UART_SetConfig+0xc8e>
        }
        else
        {
          ret = HAL_ERROR;
 8006092:	2301      	movs	r3, #1
 8006094:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
 8006098:	e17b      	b.n	8006392 <UART_SetConfig+0xc8e>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800609a:	687b      	ldr	r3, [r7, #4]
 800609c:	69db      	ldr	r3, [r3, #28]
 800609e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80060a2:	f040 80be 	bne.w	8006222 <UART_SetConfig+0xb1e>
  {
    switch (clocksource)
 80060a6:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 80060aa:	2b20      	cmp	r3, #32
 80060ac:	dc48      	bgt.n	8006140 <UART_SetConfig+0xa3c>
 80060ae:	2b00      	cmp	r3, #0
 80060b0:	db7b      	blt.n	80061aa <UART_SetConfig+0xaa6>
 80060b2:	2b20      	cmp	r3, #32
 80060b4:	d879      	bhi.n	80061aa <UART_SetConfig+0xaa6>
 80060b6:	a201      	add	r2, pc, #4	; (adr r2, 80060bc <UART_SetConfig+0x9b8>)
 80060b8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80060bc:	08006147 	.word	0x08006147
 80060c0:	0800614f 	.word	0x0800614f
 80060c4:	080061ab 	.word	0x080061ab
 80060c8:	080061ab 	.word	0x080061ab
 80060cc:	08006157 	.word	0x08006157
 80060d0:	080061ab 	.word	0x080061ab
 80060d4:	080061ab 	.word	0x080061ab
 80060d8:	080061ab 	.word	0x080061ab
 80060dc:	08006167 	.word	0x08006167
 80060e0:	080061ab 	.word	0x080061ab
 80060e4:	080061ab 	.word	0x080061ab
 80060e8:	080061ab 	.word	0x080061ab
 80060ec:	080061ab 	.word	0x080061ab
 80060f0:	080061ab 	.word	0x080061ab
 80060f4:	080061ab 	.word	0x080061ab
 80060f8:	080061ab 	.word	0x080061ab
 80060fc:	08006177 	.word	0x08006177
 8006100:	080061ab 	.word	0x080061ab
 8006104:	080061ab 	.word	0x080061ab
 8006108:	080061ab 	.word	0x080061ab
 800610c:	080061ab 	.word	0x080061ab
 8006110:	080061ab 	.word	0x080061ab
 8006114:	080061ab 	.word	0x080061ab
 8006118:	080061ab 	.word	0x080061ab
 800611c:	080061ab 	.word	0x080061ab
 8006120:	080061ab 	.word	0x080061ab
 8006124:	080061ab 	.word	0x080061ab
 8006128:	080061ab 	.word	0x080061ab
 800612c:	080061ab 	.word	0x080061ab
 8006130:	080061ab 	.word	0x080061ab
 8006134:	080061ab 	.word	0x080061ab
 8006138:	080061ab 	.word	0x080061ab
 800613c:	0800619d 	.word	0x0800619d
 8006140:	2b40      	cmp	r3, #64	; 0x40
 8006142:	d02e      	beq.n	80061a2 <UART_SetConfig+0xa9e>
 8006144:	e031      	b.n	80061aa <UART_SetConfig+0xaa6>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8006146:	f7fd fb7f 	bl	8003848 <HAL_RCC_GetPCLK1Freq>
 800614a:	62f8      	str	r0, [r7, #44]	; 0x2c
        break;
 800614c:	e033      	b.n	80061b6 <UART_SetConfig+0xab2>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800614e:	f7fd fb91 	bl	8003874 <HAL_RCC_GetPCLK2Freq>
 8006152:	62f8      	str	r0, [r7, #44]	; 0x2c
        break;
 8006154:	e02f      	b.n	80061b6 <UART_SetConfig+0xab2>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8006156:	f107 0314 	add.w	r3, r7, #20
 800615a:	4618      	mov	r0, r3
 800615c:	f7fe fab0 	bl	80046c0 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 8006160:	69bb      	ldr	r3, [r7, #24]
 8006162:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8006164:	e027      	b.n	80061b6 <UART_SetConfig+0xab2>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8006166:	f107 0308 	add.w	r3, r7, #8
 800616a:	4618      	mov	r0, r3
 800616c:	f7fe fbfc 	bl	8004968 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 8006170:	68fb      	ldr	r3, [r7, #12]
 8006172:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8006174:	e01f      	b.n	80061b6 <UART_SetConfig+0xab2>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8006176:	4b6e      	ldr	r3, [pc, #440]	; (8006330 <UART_SetConfig+0xc2c>)
 8006178:	681b      	ldr	r3, [r3, #0]
 800617a:	f003 0320 	and.w	r3, r3, #32
 800617e:	2b00      	cmp	r3, #0
 8006180:	d009      	beq.n	8006196 <UART_SetConfig+0xa92>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 8006182:	4b6b      	ldr	r3, [pc, #428]	; (8006330 <UART_SetConfig+0xc2c>)
 8006184:	681b      	ldr	r3, [r3, #0]
 8006186:	08db      	lsrs	r3, r3, #3
 8006188:	f003 0303 	and.w	r3, r3, #3
 800618c:	4a69      	ldr	r2, [pc, #420]	; (8006334 <UART_SetConfig+0xc30>)
 800618e:	fa22 f303 	lsr.w	r3, r2, r3
 8006192:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8006194:	e00f      	b.n	80061b6 <UART_SetConfig+0xab2>
          pclk = (uint32_t) HSI_VALUE;
 8006196:	4b67      	ldr	r3, [pc, #412]	; (8006334 <UART_SetConfig+0xc30>)
 8006198:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800619a:	e00c      	b.n	80061b6 <UART_SetConfig+0xab2>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 800619c:	4b66      	ldr	r3, [pc, #408]	; (8006338 <UART_SetConfig+0xc34>)
 800619e:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 80061a0:	e009      	b.n	80061b6 <UART_SetConfig+0xab2>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80061a2:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80061a6:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 80061a8:	e005      	b.n	80061b6 <UART_SetConfig+0xab2>
      default:
        pclk = 0U;
 80061aa:	2300      	movs	r3, #0
 80061ac:	62fb      	str	r3, [r7, #44]	; 0x2c
        ret = HAL_ERROR;
 80061ae:	2301      	movs	r3, #1
 80061b0:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
        break;
 80061b4:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 80061b6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80061b8:	2b00      	cmp	r3, #0
 80061ba:	f000 80ea 	beq.w	8006392 <UART_SetConfig+0xc8e>
    {
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80061be:	687b      	ldr	r3, [r7, #4]
 80061c0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80061c2:	4a5a      	ldr	r2, [pc, #360]	; (800632c <UART_SetConfig+0xc28>)
 80061c4:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80061c8:	461a      	mov	r2, r3
 80061ca:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80061cc:	fbb3 f3f2 	udiv	r3, r3, r2
 80061d0:	005a      	lsls	r2, r3, #1
 80061d2:	687b      	ldr	r3, [r7, #4]
 80061d4:	685b      	ldr	r3, [r3, #4]
 80061d6:	085b      	lsrs	r3, r3, #1
 80061d8:	441a      	add	r2, r3
 80061da:	687b      	ldr	r3, [r7, #4]
 80061dc:	685b      	ldr	r3, [r3, #4]
 80061de:	fbb2 f3f3 	udiv	r3, r2, r3
 80061e2:	b29b      	uxth	r3, r3
 80061e4:	62bb      	str	r3, [r7, #40]	; 0x28
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80061e6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80061e8:	2b0f      	cmp	r3, #15
 80061ea:	d916      	bls.n	800621a <UART_SetConfig+0xb16>
 80061ec:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80061ee:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80061f2:	d212      	bcs.n	800621a <UART_SetConfig+0xb16>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 80061f4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80061f6:	b29b      	uxth	r3, r3
 80061f8:	f023 030f 	bic.w	r3, r3, #15
 80061fc:	84fb      	strh	r3, [r7, #38]	; 0x26
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 80061fe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006200:	085b      	lsrs	r3, r3, #1
 8006202:	b29b      	uxth	r3, r3
 8006204:	f003 0307 	and.w	r3, r3, #7
 8006208:	b29a      	uxth	r2, r3
 800620a:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 800620c:	4313      	orrs	r3, r2
 800620e:	84fb      	strh	r3, [r7, #38]	; 0x26
        huart->Instance->BRR = brrtemp;
 8006210:	687b      	ldr	r3, [r7, #4]
 8006212:	681b      	ldr	r3, [r3, #0]
 8006214:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 8006216:	60da      	str	r2, [r3, #12]
 8006218:	e0bb      	b.n	8006392 <UART_SetConfig+0xc8e>
      }
      else
      {
        ret = HAL_ERROR;
 800621a:	2301      	movs	r3, #1
 800621c:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
 8006220:	e0b7      	b.n	8006392 <UART_SetConfig+0xc8e>
      }
    }
  }
  else
  {
    switch (clocksource)
 8006222:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8006226:	2b20      	cmp	r3, #32
 8006228:	dc4a      	bgt.n	80062c0 <UART_SetConfig+0xbbc>
 800622a:	2b00      	cmp	r3, #0
 800622c:	f2c0 8086 	blt.w	800633c <UART_SetConfig+0xc38>
 8006230:	2b20      	cmp	r3, #32
 8006232:	f200 8083 	bhi.w	800633c <UART_SetConfig+0xc38>
 8006236:	a201      	add	r2, pc, #4	; (adr r2, 800623c <UART_SetConfig+0xb38>)
 8006238:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800623c:	080062c7 	.word	0x080062c7
 8006240:	080062cf 	.word	0x080062cf
 8006244:	0800633d 	.word	0x0800633d
 8006248:	0800633d 	.word	0x0800633d
 800624c:	080062d7 	.word	0x080062d7
 8006250:	0800633d 	.word	0x0800633d
 8006254:	0800633d 	.word	0x0800633d
 8006258:	0800633d 	.word	0x0800633d
 800625c:	080062e7 	.word	0x080062e7
 8006260:	0800633d 	.word	0x0800633d
 8006264:	0800633d 	.word	0x0800633d
 8006268:	0800633d 	.word	0x0800633d
 800626c:	0800633d 	.word	0x0800633d
 8006270:	0800633d 	.word	0x0800633d
 8006274:	0800633d 	.word	0x0800633d
 8006278:	0800633d 	.word	0x0800633d
 800627c:	080062f7 	.word	0x080062f7
 8006280:	0800633d 	.word	0x0800633d
 8006284:	0800633d 	.word	0x0800633d
 8006288:	0800633d 	.word	0x0800633d
 800628c:	0800633d 	.word	0x0800633d
 8006290:	0800633d 	.word	0x0800633d
 8006294:	0800633d 	.word	0x0800633d
 8006298:	0800633d 	.word	0x0800633d
 800629c:	0800633d 	.word	0x0800633d
 80062a0:	0800633d 	.word	0x0800633d
 80062a4:	0800633d 	.word	0x0800633d
 80062a8:	0800633d 	.word	0x0800633d
 80062ac:	0800633d 	.word	0x0800633d
 80062b0:	0800633d 	.word	0x0800633d
 80062b4:	0800633d 	.word	0x0800633d
 80062b8:	0800633d 	.word	0x0800633d
 80062bc:	0800631d 	.word	0x0800631d
 80062c0:	2b40      	cmp	r3, #64	; 0x40
 80062c2:	d02e      	beq.n	8006322 <UART_SetConfig+0xc1e>
 80062c4:	e03a      	b.n	800633c <UART_SetConfig+0xc38>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80062c6:	f7fd fabf 	bl	8003848 <HAL_RCC_GetPCLK1Freq>
 80062ca:	62f8      	str	r0, [r7, #44]	; 0x2c
        break;
 80062cc:	e03c      	b.n	8006348 <UART_SetConfig+0xc44>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80062ce:	f7fd fad1 	bl	8003874 <HAL_RCC_GetPCLK2Freq>
 80062d2:	62f8      	str	r0, [r7, #44]	; 0x2c
        break;
 80062d4:	e038      	b.n	8006348 <UART_SetConfig+0xc44>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80062d6:	f107 0314 	add.w	r3, r7, #20
 80062da:	4618      	mov	r0, r3
 80062dc:	f7fe f9f0 	bl	80046c0 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 80062e0:	69bb      	ldr	r3, [r7, #24]
 80062e2:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 80062e4:	e030      	b.n	8006348 <UART_SetConfig+0xc44>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 80062e6:	f107 0308 	add.w	r3, r7, #8
 80062ea:	4618      	mov	r0, r3
 80062ec:	f7fe fb3c 	bl	8004968 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 80062f0:	68fb      	ldr	r3, [r7, #12]
 80062f2:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 80062f4:	e028      	b.n	8006348 <UART_SetConfig+0xc44>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80062f6:	4b0e      	ldr	r3, [pc, #56]	; (8006330 <UART_SetConfig+0xc2c>)
 80062f8:	681b      	ldr	r3, [r3, #0]
 80062fa:	f003 0320 	and.w	r3, r3, #32
 80062fe:	2b00      	cmp	r3, #0
 8006300:	d009      	beq.n	8006316 <UART_SetConfig+0xc12>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 8006302:	4b0b      	ldr	r3, [pc, #44]	; (8006330 <UART_SetConfig+0xc2c>)
 8006304:	681b      	ldr	r3, [r3, #0]
 8006306:	08db      	lsrs	r3, r3, #3
 8006308:	f003 0303 	and.w	r3, r3, #3
 800630c:	4a09      	ldr	r2, [pc, #36]	; (8006334 <UART_SetConfig+0xc30>)
 800630e:	fa22 f303 	lsr.w	r3, r2, r3
 8006312:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8006314:	e018      	b.n	8006348 <UART_SetConfig+0xc44>
          pclk = (uint32_t) HSI_VALUE;
 8006316:	4b07      	ldr	r3, [pc, #28]	; (8006334 <UART_SetConfig+0xc30>)
 8006318:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800631a:	e015      	b.n	8006348 <UART_SetConfig+0xc44>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 800631c:	4b06      	ldr	r3, [pc, #24]	; (8006338 <UART_SetConfig+0xc34>)
 800631e:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8006320:	e012      	b.n	8006348 <UART_SetConfig+0xc44>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8006322:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8006326:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8006328:	e00e      	b.n	8006348 <UART_SetConfig+0xc44>
 800632a:	bf00      	nop
 800632c:	08007fb4 	.word	0x08007fb4
 8006330:	58024400 	.word	0x58024400
 8006334:	03d09000 	.word	0x03d09000
 8006338:	003d0900 	.word	0x003d0900
      default:
        pclk = 0U;
 800633c:	2300      	movs	r3, #0
 800633e:	62fb      	str	r3, [r7, #44]	; 0x2c
        ret = HAL_ERROR;
 8006340:	2301      	movs	r3, #1
 8006342:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
        break;
 8006346:	bf00      	nop
    }

    if (pclk != 0U)
 8006348:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800634a:	2b00      	cmp	r3, #0
 800634c:	d021      	beq.n	8006392 <UART_SetConfig+0xc8e>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800634e:	687b      	ldr	r3, [r7, #4]
 8006350:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006352:	4a1a      	ldr	r2, [pc, #104]	; (80063bc <UART_SetConfig+0xcb8>)
 8006354:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8006358:	461a      	mov	r2, r3
 800635a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800635c:	fbb3 f2f2 	udiv	r2, r3, r2
 8006360:	687b      	ldr	r3, [r7, #4]
 8006362:	685b      	ldr	r3, [r3, #4]
 8006364:	085b      	lsrs	r3, r3, #1
 8006366:	441a      	add	r2, r3
 8006368:	687b      	ldr	r3, [r7, #4]
 800636a:	685b      	ldr	r3, [r3, #4]
 800636c:	fbb2 f3f3 	udiv	r3, r2, r3
 8006370:	b29b      	uxth	r3, r3
 8006372:	62bb      	str	r3, [r7, #40]	; 0x28
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8006374:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006376:	2b0f      	cmp	r3, #15
 8006378:	d908      	bls.n	800638c <UART_SetConfig+0xc88>
 800637a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800637c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006380:	d204      	bcs.n	800638c <UART_SetConfig+0xc88>
      {
        huart->Instance->BRR = usartdiv;
 8006382:	687b      	ldr	r3, [r7, #4]
 8006384:	681b      	ldr	r3, [r3, #0]
 8006386:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8006388:	60da      	str	r2, [r3, #12]
 800638a:	e002      	b.n	8006392 <UART_SetConfig+0xc8e>
      }
      else
      {
        ret = HAL_ERROR;
 800638c:	2301      	movs	r3, #1
 800638e:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 8006392:	687b      	ldr	r3, [r7, #4]
 8006394:	2201      	movs	r2, #1
 8006396:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 800639a:	687b      	ldr	r3, [r7, #4]
 800639c:	2201      	movs	r2, #1
 800639e:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 80063a2:	687b      	ldr	r3, [r7, #4]
 80063a4:	2200      	movs	r2, #0
 80063a6:	671a      	str	r2, [r3, #112]	; 0x70
  huart->TxISR = NULL;
 80063a8:	687b      	ldr	r3, [r7, #4]
 80063aa:	2200      	movs	r2, #0
 80063ac:	675a      	str	r2, [r3, #116]	; 0x74

  return ret;
 80063ae:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
}
 80063b2:	4618      	mov	r0, r3
 80063b4:	3738      	adds	r7, #56	; 0x38
 80063b6:	46bd      	mov	sp, r7
 80063b8:	bdb0      	pop	{r4, r5, r7, pc}
 80063ba:	bf00      	nop
 80063bc:	08007fb4 	.word	0x08007fb4

080063c0 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 80063c0:	b480      	push	{r7}
 80063c2:	b083      	sub	sp, #12
 80063c4:	af00      	add	r7, sp, #0
 80063c6:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 80063c8:	687b      	ldr	r3, [r7, #4]
 80063ca:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80063cc:	f003 0301 	and.w	r3, r3, #1
 80063d0:	2b00      	cmp	r3, #0
 80063d2:	d00a      	beq.n	80063ea <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 80063d4:	687b      	ldr	r3, [r7, #4]
 80063d6:	681b      	ldr	r3, [r3, #0]
 80063d8:	685b      	ldr	r3, [r3, #4]
 80063da:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 80063de:	687b      	ldr	r3, [r7, #4]
 80063e0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80063e2:	687b      	ldr	r3, [r7, #4]
 80063e4:	681b      	ldr	r3, [r3, #0]
 80063e6:	430a      	orrs	r2, r1
 80063e8:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 80063ea:	687b      	ldr	r3, [r7, #4]
 80063ec:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80063ee:	f003 0302 	and.w	r3, r3, #2
 80063f2:	2b00      	cmp	r3, #0
 80063f4:	d00a      	beq.n	800640c <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 80063f6:	687b      	ldr	r3, [r7, #4]
 80063f8:	681b      	ldr	r3, [r3, #0]
 80063fa:	685b      	ldr	r3, [r3, #4]
 80063fc:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8006400:	687b      	ldr	r3, [r7, #4]
 8006402:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8006404:	687b      	ldr	r3, [r7, #4]
 8006406:	681b      	ldr	r3, [r3, #0]
 8006408:	430a      	orrs	r2, r1
 800640a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800640c:	687b      	ldr	r3, [r7, #4]
 800640e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006410:	f003 0304 	and.w	r3, r3, #4
 8006414:	2b00      	cmp	r3, #0
 8006416:	d00a      	beq.n	800642e <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8006418:	687b      	ldr	r3, [r7, #4]
 800641a:	681b      	ldr	r3, [r3, #0]
 800641c:	685b      	ldr	r3, [r3, #4]
 800641e:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8006422:	687b      	ldr	r3, [r7, #4]
 8006424:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8006426:	687b      	ldr	r3, [r7, #4]
 8006428:	681b      	ldr	r3, [r3, #0]
 800642a:	430a      	orrs	r2, r1
 800642c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800642e:	687b      	ldr	r3, [r7, #4]
 8006430:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006432:	f003 0308 	and.w	r3, r3, #8
 8006436:	2b00      	cmp	r3, #0
 8006438:	d00a      	beq.n	8006450 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800643a:	687b      	ldr	r3, [r7, #4]
 800643c:	681b      	ldr	r3, [r3, #0]
 800643e:	685b      	ldr	r3, [r3, #4]
 8006440:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8006444:	687b      	ldr	r3, [r7, #4]
 8006446:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8006448:	687b      	ldr	r3, [r7, #4]
 800644a:	681b      	ldr	r3, [r3, #0]
 800644c:	430a      	orrs	r2, r1
 800644e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8006450:	687b      	ldr	r3, [r7, #4]
 8006452:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006454:	f003 0310 	and.w	r3, r3, #16
 8006458:	2b00      	cmp	r3, #0
 800645a:	d00a      	beq.n	8006472 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800645c:	687b      	ldr	r3, [r7, #4]
 800645e:	681b      	ldr	r3, [r3, #0]
 8006460:	689b      	ldr	r3, [r3, #8]
 8006462:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8006466:	687b      	ldr	r3, [r7, #4]
 8006468:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800646a:	687b      	ldr	r3, [r7, #4]
 800646c:	681b      	ldr	r3, [r3, #0]
 800646e:	430a      	orrs	r2, r1
 8006470:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8006472:	687b      	ldr	r3, [r7, #4]
 8006474:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006476:	f003 0320 	and.w	r3, r3, #32
 800647a:	2b00      	cmp	r3, #0
 800647c:	d00a      	beq.n	8006494 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800647e:	687b      	ldr	r3, [r7, #4]
 8006480:	681b      	ldr	r3, [r3, #0]
 8006482:	689b      	ldr	r3, [r3, #8]
 8006484:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8006488:	687b      	ldr	r3, [r7, #4]
 800648a:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800648c:	687b      	ldr	r3, [r7, #4]
 800648e:	681b      	ldr	r3, [r3, #0]
 8006490:	430a      	orrs	r2, r1
 8006492:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8006494:	687b      	ldr	r3, [r7, #4]
 8006496:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006498:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800649c:	2b00      	cmp	r3, #0
 800649e:	d01a      	beq.n	80064d6 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 80064a0:	687b      	ldr	r3, [r7, #4]
 80064a2:	681b      	ldr	r3, [r3, #0]
 80064a4:	685b      	ldr	r3, [r3, #4]
 80064a6:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 80064aa:	687b      	ldr	r3, [r7, #4]
 80064ac:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80064ae:	687b      	ldr	r3, [r7, #4]
 80064b0:	681b      	ldr	r3, [r3, #0]
 80064b2:	430a      	orrs	r2, r1
 80064b4:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 80064b6:	687b      	ldr	r3, [r7, #4]
 80064b8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80064ba:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80064be:	d10a      	bne.n	80064d6 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 80064c0:	687b      	ldr	r3, [r7, #4]
 80064c2:	681b      	ldr	r3, [r3, #0]
 80064c4:	685b      	ldr	r3, [r3, #4]
 80064c6:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 80064ca:	687b      	ldr	r3, [r7, #4]
 80064cc:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 80064ce:	687b      	ldr	r3, [r7, #4]
 80064d0:	681b      	ldr	r3, [r3, #0]
 80064d2:	430a      	orrs	r2, r1
 80064d4:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 80064d6:	687b      	ldr	r3, [r7, #4]
 80064d8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80064da:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80064de:	2b00      	cmp	r3, #0
 80064e0:	d00a      	beq.n	80064f8 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 80064e2:	687b      	ldr	r3, [r7, #4]
 80064e4:	681b      	ldr	r3, [r3, #0]
 80064e6:	685b      	ldr	r3, [r3, #4]
 80064e8:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 80064ec:	687b      	ldr	r3, [r7, #4]
 80064ee:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80064f0:	687b      	ldr	r3, [r7, #4]
 80064f2:	681b      	ldr	r3, [r3, #0]
 80064f4:	430a      	orrs	r2, r1
 80064f6:	605a      	str	r2, [r3, #4]
  }
}
 80064f8:	bf00      	nop
 80064fa:	370c      	adds	r7, #12
 80064fc:	46bd      	mov	sp, r7
 80064fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006502:	4770      	bx	lr

08006504 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8006504:	b580      	push	{r7, lr}
 8006506:	b086      	sub	sp, #24
 8006508:	af02      	add	r7, sp, #8
 800650a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800650c:	687b      	ldr	r3, [r7, #4]
 800650e:	2200      	movs	r2, #0
 8006510:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8006514:	f7fa ffec 	bl	80014f0 <HAL_GetTick>
 8006518:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800651a:	687b      	ldr	r3, [r7, #4]
 800651c:	681b      	ldr	r3, [r3, #0]
 800651e:	681b      	ldr	r3, [r3, #0]
 8006520:	f003 0308 	and.w	r3, r3, #8
 8006524:	2b08      	cmp	r3, #8
 8006526:	d10e      	bne.n	8006546 <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8006528:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800652c:	9300      	str	r3, [sp, #0]
 800652e:	68fb      	ldr	r3, [r7, #12]
 8006530:	2200      	movs	r2, #0
 8006532:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8006536:	6878      	ldr	r0, [r7, #4]
 8006538:	f000 f82f 	bl	800659a <UART_WaitOnFlagUntilTimeout>
 800653c:	4603      	mov	r3, r0
 800653e:	2b00      	cmp	r3, #0
 8006540:	d001      	beq.n	8006546 <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8006542:	2303      	movs	r3, #3
 8006544:	e025      	b.n	8006592 <UART_CheckIdleState+0x8e>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8006546:	687b      	ldr	r3, [r7, #4]
 8006548:	681b      	ldr	r3, [r3, #0]
 800654a:	681b      	ldr	r3, [r3, #0]
 800654c:	f003 0304 	and.w	r3, r3, #4
 8006550:	2b04      	cmp	r3, #4
 8006552:	d10e      	bne.n	8006572 <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8006554:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8006558:	9300      	str	r3, [sp, #0]
 800655a:	68fb      	ldr	r3, [r7, #12]
 800655c:	2200      	movs	r2, #0
 800655e:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8006562:	6878      	ldr	r0, [r7, #4]
 8006564:	f000 f819 	bl	800659a <UART_WaitOnFlagUntilTimeout>
 8006568:	4603      	mov	r3, r0
 800656a:	2b00      	cmp	r3, #0
 800656c:	d001      	beq.n	8006572 <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800656e:	2303      	movs	r3, #3
 8006570:	e00f      	b.n	8006592 <UART_CheckIdleState+0x8e>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8006572:	687b      	ldr	r3, [r7, #4]
 8006574:	2220      	movs	r2, #32
 8006576:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  huart->RxState = HAL_UART_STATE_READY;
 800657a:	687b      	ldr	r3, [r7, #4]
 800657c:	2220      	movs	r2, #32
 800657e:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006582:	687b      	ldr	r3, [r7, #4]
 8006584:	2200      	movs	r2, #0
 8006586:	66da      	str	r2, [r3, #108]	; 0x6c

  __HAL_UNLOCK(huart);
 8006588:	687b      	ldr	r3, [r7, #4]
 800658a:	2200      	movs	r2, #0
 800658c:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 8006590:	2300      	movs	r3, #0
}
 8006592:	4618      	mov	r0, r3
 8006594:	3710      	adds	r7, #16
 8006596:	46bd      	mov	sp, r7
 8006598:	bd80      	pop	{r7, pc}

0800659a <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800659a:	b580      	push	{r7, lr}
 800659c:	b084      	sub	sp, #16
 800659e:	af00      	add	r7, sp, #0
 80065a0:	60f8      	str	r0, [r7, #12]
 80065a2:	60b9      	str	r1, [r7, #8]
 80065a4:	603b      	str	r3, [r7, #0]
 80065a6:	4613      	mov	r3, r2
 80065a8:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80065aa:	e062      	b.n	8006672 <UART_WaitOnFlagUntilTimeout+0xd8>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80065ac:	69bb      	ldr	r3, [r7, #24]
 80065ae:	f1b3 3fff 	cmp.w	r3, #4294967295
 80065b2:	d05e      	beq.n	8006672 <UART_WaitOnFlagUntilTimeout+0xd8>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80065b4:	f7fa ff9c 	bl	80014f0 <HAL_GetTick>
 80065b8:	4602      	mov	r2, r0
 80065ba:	683b      	ldr	r3, [r7, #0]
 80065bc:	1ad3      	subs	r3, r2, r3
 80065be:	69ba      	ldr	r2, [r7, #24]
 80065c0:	429a      	cmp	r2, r3
 80065c2:	d302      	bcc.n	80065ca <UART_WaitOnFlagUntilTimeout+0x30>
 80065c4:	69bb      	ldr	r3, [r7, #24]
 80065c6:	2b00      	cmp	r3, #0
 80065c8:	d11d      	bne.n	8006606 <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
 80065ca:	68fb      	ldr	r3, [r7, #12]
 80065cc:	681b      	ldr	r3, [r3, #0]
 80065ce:	681a      	ldr	r2, [r3, #0]
 80065d0:	68fb      	ldr	r3, [r7, #12]
 80065d2:	681b      	ldr	r3, [r3, #0]
 80065d4:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 80065d8:	601a      	str	r2, [r3, #0]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80065da:	68fb      	ldr	r3, [r7, #12]
 80065dc:	681b      	ldr	r3, [r3, #0]
 80065de:	689a      	ldr	r2, [r3, #8]
 80065e0:	68fb      	ldr	r3, [r7, #12]
 80065e2:	681b      	ldr	r3, [r3, #0]
 80065e4:	f022 0201 	bic.w	r2, r2, #1
 80065e8:	609a      	str	r2, [r3, #8]

        huart->gState = HAL_UART_STATE_READY;
 80065ea:	68fb      	ldr	r3, [r7, #12]
 80065ec:	2220      	movs	r2, #32
 80065ee:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
        huart->RxState = HAL_UART_STATE_READY;
 80065f2:	68fb      	ldr	r3, [r7, #12]
 80065f4:	2220      	movs	r2, #32
 80065f6:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

        __HAL_UNLOCK(huart);
 80065fa:	68fb      	ldr	r3, [r7, #12]
 80065fc:	2200      	movs	r2, #0
 80065fe:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

        return HAL_TIMEOUT;
 8006602:	2303      	movs	r3, #3
 8006604:	e045      	b.n	8006692 <UART_WaitOnFlagUntilTimeout+0xf8>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8006606:	68fb      	ldr	r3, [r7, #12]
 8006608:	681b      	ldr	r3, [r3, #0]
 800660a:	681b      	ldr	r3, [r3, #0]
 800660c:	f003 0304 	and.w	r3, r3, #4
 8006610:	2b00      	cmp	r3, #0
 8006612:	d02e      	beq.n	8006672 <UART_WaitOnFlagUntilTimeout+0xd8>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8006614:	68fb      	ldr	r3, [r7, #12]
 8006616:	681b      	ldr	r3, [r3, #0]
 8006618:	69db      	ldr	r3, [r3, #28]
 800661a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800661e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8006622:	d126      	bne.n	8006672 <UART_WaitOnFlagUntilTimeout+0xd8>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8006624:	68fb      	ldr	r3, [r7, #12]
 8006626:	681b      	ldr	r3, [r3, #0]
 8006628:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800662c:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
 800662e:	68fb      	ldr	r3, [r7, #12]
 8006630:	681b      	ldr	r3, [r3, #0]
 8006632:	681a      	ldr	r2, [r3, #0]
 8006634:	68fb      	ldr	r3, [r7, #12]
 8006636:	681b      	ldr	r3, [r3, #0]
 8006638:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 800663c:	601a      	str	r2, [r3, #0]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800663e:	68fb      	ldr	r3, [r7, #12]
 8006640:	681b      	ldr	r3, [r3, #0]
 8006642:	689a      	ldr	r2, [r3, #8]
 8006644:	68fb      	ldr	r3, [r7, #12]
 8006646:	681b      	ldr	r3, [r3, #0]
 8006648:	f022 0201 	bic.w	r2, r2, #1
 800664c:	609a      	str	r2, [r3, #8]

          huart->gState = HAL_UART_STATE_READY;
 800664e:	68fb      	ldr	r3, [r7, #12]
 8006650:	2220      	movs	r2, #32
 8006652:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          huart->RxState = HAL_UART_STATE_READY;
 8006656:	68fb      	ldr	r3, [r7, #12]
 8006658:	2220      	movs	r2, #32
 800665a:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800665e:	68fb      	ldr	r3, [r7, #12]
 8006660:	2220      	movs	r2, #32
 8006662:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8006666:	68fb      	ldr	r3, [r7, #12]
 8006668:	2200      	movs	r2, #0
 800666a:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

          return HAL_TIMEOUT;
 800666e:	2303      	movs	r3, #3
 8006670:	e00f      	b.n	8006692 <UART_WaitOnFlagUntilTimeout+0xf8>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8006672:	68fb      	ldr	r3, [r7, #12]
 8006674:	681b      	ldr	r3, [r3, #0]
 8006676:	69da      	ldr	r2, [r3, #28]
 8006678:	68bb      	ldr	r3, [r7, #8]
 800667a:	4013      	ands	r3, r2
 800667c:	68ba      	ldr	r2, [r7, #8]
 800667e:	429a      	cmp	r2, r3
 8006680:	bf0c      	ite	eq
 8006682:	2301      	moveq	r3, #1
 8006684:	2300      	movne	r3, #0
 8006686:	b2db      	uxtb	r3, r3
 8006688:	461a      	mov	r2, r3
 800668a:	79fb      	ldrb	r3, [r7, #7]
 800668c:	429a      	cmp	r2, r3
 800668e:	d08d      	beq.n	80065ac <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8006690:	2300      	movs	r3, #0
}
 8006692:	4618      	mov	r0, r3
 8006694:	3710      	adds	r7, #16
 8006696:	46bd      	mov	sp, r7
 8006698:	bd80      	pop	{r7, pc}
	...

0800669c <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800669c:	b480      	push	{r7}
 800669e:	b083      	sub	sp, #12
 80066a0:	af00      	add	r7, sp, #0
 80066a2:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 80066a4:	687b      	ldr	r3, [r7, #4]
 80066a6:	681b      	ldr	r3, [r3, #0]
 80066a8:	681a      	ldr	r2, [r3, #0]
 80066aa:	687b      	ldr	r3, [r7, #4]
 80066ac:	681b      	ldr	r3, [r3, #0]
 80066ae:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 80066b2:	601a      	str	r2, [r3, #0]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 80066b4:	687b      	ldr	r3, [r7, #4]
 80066b6:	681b      	ldr	r3, [r3, #0]
 80066b8:	6899      	ldr	r1, [r3, #8]
 80066ba:	687b      	ldr	r3, [r7, #4]
 80066bc:	681a      	ldr	r2, [r3, #0]
 80066be:	4b0f      	ldr	r3, [pc, #60]	; (80066fc <UART_EndRxTransfer+0x60>)
 80066c0:	400b      	ands	r3, r1
 80066c2:	6093      	str	r3, [r2, #8]

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80066c4:	687b      	ldr	r3, [r7, #4]
 80066c6:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80066c8:	2b01      	cmp	r3, #1
 80066ca:	d107      	bne.n	80066dc <UART_EndRxTransfer+0x40>
  {
    CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80066cc:	687b      	ldr	r3, [r7, #4]
 80066ce:	681b      	ldr	r3, [r3, #0]
 80066d0:	681a      	ldr	r2, [r3, #0]
 80066d2:	687b      	ldr	r3, [r7, #4]
 80066d4:	681b      	ldr	r3, [r3, #0]
 80066d6:	f022 0210 	bic.w	r2, r2, #16
 80066da:	601a      	str	r2, [r3, #0]
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80066dc:	687b      	ldr	r3, [r7, #4]
 80066de:	2220      	movs	r2, #32
 80066e0:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80066e4:	687b      	ldr	r3, [r7, #4]
 80066e6:	2200      	movs	r2, #0
 80066e8:	66da      	str	r2, [r3, #108]	; 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 80066ea:	687b      	ldr	r3, [r7, #4]
 80066ec:	2200      	movs	r2, #0
 80066ee:	671a      	str	r2, [r3, #112]	; 0x70
}
 80066f0:	bf00      	nop
 80066f2:	370c      	adds	r7, #12
 80066f4:	46bd      	mov	sp, r7
 80066f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80066fa:	4770      	bx	lr
 80066fc:	effffffe 	.word	0xeffffffe

08006700 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8006700:	b580      	push	{r7, lr}
 8006702:	b084      	sub	sp, #16
 8006704:	af00      	add	r7, sp, #0
 8006706:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8006708:	687b      	ldr	r3, [r7, #4]
 800670a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800670c:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 800670e:	68fb      	ldr	r3, [r7, #12]
 8006710:	2200      	movs	r2, #0
 8006712:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
  huart->TxXferCount = 0U;
 8006716:	68fb      	ldr	r3, [r7, #12]
 8006718:	2200      	movs	r2, #0
 800671a:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800671e:	68f8      	ldr	r0, [r7, #12]
 8006720:	f7fe ffda 	bl	80056d8 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8006724:	bf00      	nop
 8006726:	3710      	adds	r7, #16
 8006728:	46bd      	mov	sp, r7
 800672a:	bd80      	pop	{r7, pc}

0800672c <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800672c:	b580      	push	{r7, lr}
 800672e:	b082      	sub	sp, #8
 8006730:	af00      	add	r7, sp, #0
 8006732:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8006734:	687b      	ldr	r3, [r7, #4]
 8006736:	681b      	ldr	r3, [r3, #0]
 8006738:	681a      	ldr	r2, [r3, #0]
 800673a:	687b      	ldr	r3, [r7, #4]
 800673c:	681b      	ldr	r3, [r3, #0]
 800673e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8006742:	601a      	str	r2, [r3, #0]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8006744:	687b      	ldr	r3, [r7, #4]
 8006746:	2220      	movs	r2, #32
 8006748:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 800674c:	687b      	ldr	r3, [r7, #4]
 800674e:	2200      	movs	r2, #0
 8006750:	675a      	str	r2, [r3, #116]	; 0x74
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8006752:	6878      	ldr	r0, [r7, #4]
 8006754:	f7fe ffb6 	bl	80056c4 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8006758:	bf00      	nop
 800675a:	3708      	adds	r7, #8
 800675c:	46bd      	mov	sp, r7
 800675e:	bd80      	pop	{r7, pc}

08006760 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 8006760:	b480      	push	{r7}
 8006762:	b083      	sub	sp, #12
 8006764:	af00      	add	r7, sp, #0
 8006766:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 8006768:	bf00      	nop
 800676a:	370c      	adds	r7, #12
 800676c:	46bd      	mov	sp, r7
 800676e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006772:	4770      	bx	lr

08006774 <HAL_UARTEx_RxFifoFullCallback>:
  * @brief  UART RX Fifo full callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_RxFifoFullCallback(UART_HandleTypeDef *huart)
{
 8006774:	b480      	push	{r7}
 8006776:	b083      	sub	sp, #12
 8006778:	af00      	add	r7, sp, #0
 800677a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxFifoFullCallback can be implemented in the user file.
   */
}
 800677c:	bf00      	nop
 800677e:	370c      	adds	r7, #12
 8006780:	46bd      	mov	sp, r7
 8006782:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006786:	4770      	bx	lr

08006788 <HAL_UARTEx_TxFifoEmptyCallback>:
  * @brief  UART TX Fifo empty callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_TxFifoEmptyCallback(UART_HandleTypeDef *huart)
{
 8006788:	b480      	push	{r7}
 800678a:	b083      	sub	sp, #12
 800678c:	af00      	add	r7, sp, #0
 800678e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_TxFifoEmptyCallback can be implemented in the user file.
   */
}
 8006790:	bf00      	nop
 8006792:	370c      	adds	r7, #12
 8006794:	46bd      	mov	sp, r7
 8006796:	f85d 7b04 	ldr.w	r7, [sp], #4
 800679a:	4770      	bx	lr

0800679c <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 800679c:	b480      	push	{r7}
 800679e:	b085      	sub	sp, #20
 80067a0:	af00      	add	r7, sp, #0
 80067a2:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 80067a4:	687b      	ldr	r3, [r7, #4]
 80067a6:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 80067aa:	2b01      	cmp	r3, #1
 80067ac:	d101      	bne.n	80067b2 <HAL_UARTEx_DisableFifoMode+0x16>
 80067ae:	2302      	movs	r3, #2
 80067b0:	e027      	b.n	8006802 <HAL_UARTEx_DisableFifoMode+0x66>
 80067b2:	687b      	ldr	r3, [r7, #4]
 80067b4:	2201      	movs	r2, #1
 80067b6:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 80067ba:	687b      	ldr	r3, [r7, #4]
 80067bc:	2224      	movs	r2, #36	; 0x24
 80067be:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 80067c2:	687b      	ldr	r3, [r7, #4]
 80067c4:	681b      	ldr	r3, [r3, #0]
 80067c6:	681b      	ldr	r3, [r3, #0]
 80067c8:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 80067ca:	687b      	ldr	r3, [r7, #4]
 80067cc:	681b      	ldr	r3, [r3, #0]
 80067ce:	681a      	ldr	r2, [r3, #0]
 80067d0:	687b      	ldr	r3, [r7, #4]
 80067d2:	681b      	ldr	r3, [r3, #0]
 80067d4:	f022 0201 	bic.w	r2, r2, #1
 80067d8:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 80067da:	68fb      	ldr	r3, [r7, #12]
 80067dc:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 80067e0:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 80067e2:	687b      	ldr	r3, [r7, #4]
 80067e4:	2200      	movs	r2, #0
 80067e6:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 80067e8:	687b      	ldr	r3, [r7, #4]
 80067ea:	681b      	ldr	r3, [r3, #0]
 80067ec:	68fa      	ldr	r2, [r7, #12]
 80067ee:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 80067f0:	687b      	ldr	r3, [r7, #4]
 80067f2:	2220      	movs	r2, #32
 80067f4:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80067f8:	687b      	ldr	r3, [r7, #4]
 80067fa:	2200      	movs	r2, #0
 80067fc:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 8006800:	2300      	movs	r3, #0
}
 8006802:	4618      	mov	r0, r3
 8006804:	3714      	adds	r7, #20
 8006806:	46bd      	mov	sp, r7
 8006808:	f85d 7b04 	ldr.w	r7, [sp], #4
 800680c:	4770      	bx	lr

0800680e <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800680e:	b580      	push	{r7, lr}
 8006810:	b084      	sub	sp, #16
 8006812:	af00      	add	r7, sp, #0
 8006814:	6078      	str	r0, [r7, #4]
 8006816:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8006818:	687b      	ldr	r3, [r7, #4]
 800681a:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 800681e:	2b01      	cmp	r3, #1
 8006820:	d101      	bne.n	8006826 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 8006822:	2302      	movs	r3, #2
 8006824:	e02d      	b.n	8006882 <HAL_UARTEx_SetTxFifoThreshold+0x74>
 8006826:	687b      	ldr	r3, [r7, #4]
 8006828:	2201      	movs	r2, #1
 800682a:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 800682e:	687b      	ldr	r3, [r7, #4]
 8006830:	2224      	movs	r2, #36	; 0x24
 8006832:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8006836:	687b      	ldr	r3, [r7, #4]
 8006838:	681b      	ldr	r3, [r3, #0]
 800683a:	681b      	ldr	r3, [r3, #0]
 800683c:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800683e:	687b      	ldr	r3, [r7, #4]
 8006840:	681b      	ldr	r3, [r3, #0]
 8006842:	681a      	ldr	r2, [r3, #0]
 8006844:	687b      	ldr	r3, [r7, #4]
 8006846:	681b      	ldr	r3, [r3, #0]
 8006848:	f022 0201 	bic.w	r2, r2, #1
 800684c:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 800684e:	687b      	ldr	r3, [r7, #4]
 8006850:	681b      	ldr	r3, [r3, #0]
 8006852:	689b      	ldr	r3, [r3, #8]
 8006854:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 8006858:	687b      	ldr	r3, [r7, #4]
 800685a:	681b      	ldr	r3, [r3, #0]
 800685c:	683a      	ldr	r2, [r7, #0]
 800685e:	430a      	orrs	r2, r1
 8006860:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8006862:	6878      	ldr	r0, [r7, #4]
 8006864:	f000 f850 	bl	8006908 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8006868:	687b      	ldr	r3, [r7, #4]
 800686a:	681b      	ldr	r3, [r3, #0]
 800686c:	68fa      	ldr	r2, [r7, #12]
 800686e:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8006870:	687b      	ldr	r3, [r7, #4]
 8006872:	2220      	movs	r2, #32
 8006874:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8006878:	687b      	ldr	r3, [r7, #4]
 800687a:	2200      	movs	r2, #0
 800687c:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 8006880:	2300      	movs	r3, #0
}
 8006882:	4618      	mov	r0, r3
 8006884:	3710      	adds	r7, #16
 8006886:	46bd      	mov	sp, r7
 8006888:	bd80      	pop	{r7, pc}

0800688a <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800688a:	b580      	push	{r7, lr}
 800688c:	b084      	sub	sp, #16
 800688e:	af00      	add	r7, sp, #0
 8006890:	6078      	str	r0, [r7, #4]
 8006892:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8006894:	687b      	ldr	r3, [r7, #4]
 8006896:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 800689a:	2b01      	cmp	r3, #1
 800689c:	d101      	bne.n	80068a2 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 800689e:	2302      	movs	r3, #2
 80068a0:	e02d      	b.n	80068fe <HAL_UARTEx_SetRxFifoThreshold+0x74>
 80068a2:	687b      	ldr	r3, [r7, #4]
 80068a4:	2201      	movs	r2, #1
 80068a6:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 80068aa:	687b      	ldr	r3, [r7, #4]
 80068ac:	2224      	movs	r2, #36	; 0x24
 80068ae:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 80068b2:	687b      	ldr	r3, [r7, #4]
 80068b4:	681b      	ldr	r3, [r3, #0]
 80068b6:	681b      	ldr	r3, [r3, #0]
 80068b8:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 80068ba:	687b      	ldr	r3, [r7, #4]
 80068bc:	681b      	ldr	r3, [r3, #0]
 80068be:	681a      	ldr	r2, [r3, #0]
 80068c0:	687b      	ldr	r3, [r7, #4]
 80068c2:	681b      	ldr	r3, [r3, #0]
 80068c4:	f022 0201 	bic.w	r2, r2, #1
 80068c8:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 80068ca:	687b      	ldr	r3, [r7, #4]
 80068cc:	681b      	ldr	r3, [r3, #0]
 80068ce:	689b      	ldr	r3, [r3, #8]
 80068d0:	f023 6160 	bic.w	r1, r3, #234881024	; 0xe000000
 80068d4:	687b      	ldr	r3, [r7, #4]
 80068d6:	681b      	ldr	r3, [r3, #0]
 80068d8:	683a      	ldr	r2, [r7, #0]
 80068da:	430a      	orrs	r2, r1
 80068dc:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 80068de:	6878      	ldr	r0, [r7, #4]
 80068e0:	f000 f812 	bl	8006908 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 80068e4:	687b      	ldr	r3, [r7, #4]
 80068e6:	681b      	ldr	r3, [r3, #0]
 80068e8:	68fa      	ldr	r2, [r7, #12]
 80068ea:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 80068ec:	687b      	ldr	r3, [r7, #4]
 80068ee:	2220      	movs	r2, #32
 80068f0:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80068f4:	687b      	ldr	r3, [r7, #4]
 80068f6:	2200      	movs	r2, #0
 80068f8:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 80068fc:	2300      	movs	r3, #0
}
 80068fe:	4618      	mov	r0, r3
 8006900:	3710      	adds	r7, #16
 8006902:	46bd      	mov	sp, r7
 8006904:	bd80      	pop	{r7, pc}
	...

08006908 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 8006908:	b480      	push	{r7}
 800690a:	b085      	sub	sp, #20
 800690c:	af00      	add	r7, sp, #0
 800690e:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 8006910:	687b      	ldr	r3, [r7, #4]
 8006912:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8006914:	2b00      	cmp	r3, #0
 8006916:	d108      	bne.n	800692a <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 8006918:	687b      	ldr	r3, [r7, #4]
 800691a:	2201      	movs	r2, #1
 800691c:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
 8006920:	687b      	ldr	r3, [r7, #4]
 8006922:	2201      	movs	r2, #1
 8006924:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 8006928:	e031      	b.n	800698e <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 800692a:	2310      	movs	r3, #16
 800692c:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 800692e:	2310      	movs	r3, #16
 8006930:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 8006932:	687b      	ldr	r3, [r7, #4]
 8006934:	681b      	ldr	r3, [r3, #0]
 8006936:	689b      	ldr	r3, [r3, #8]
 8006938:	0e5b      	lsrs	r3, r3, #25
 800693a:	b2db      	uxtb	r3, r3
 800693c:	f003 0307 	and.w	r3, r3, #7
 8006940:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 8006942:	687b      	ldr	r3, [r7, #4]
 8006944:	681b      	ldr	r3, [r3, #0]
 8006946:	689b      	ldr	r3, [r3, #8]
 8006948:	0f5b      	lsrs	r3, r3, #29
 800694a:	b2db      	uxtb	r3, r3
 800694c:	f003 0307 	and.w	r3, r3, #7
 8006950:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8006952:	7bbb      	ldrb	r3, [r7, #14]
 8006954:	7b3a      	ldrb	r2, [r7, #12]
 8006956:	4911      	ldr	r1, [pc, #68]	; (800699c <UARTEx_SetNbDataToProcess+0x94>)
 8006958:	5c8a      	ldrb	r2, [r1, r2]
 800695a:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 800695e:	7b3a      	ldrb	r2, [r7, #12]
 8006960:	490f      	ldr	r1, [pc, #60]	; (80069a0 <UARTEx_SetNbDataToProcess+0x98>)
 8006962:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8006964:	fb93 f3f2 	sdiv	r3, r3, r2
 8006968:	b29a      	uxth	r2, r3
 800696a:	687b      	ldr	r3, [r7, #4]
 800696c:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8006970:	7bfb      	ldrb	r3, [r7, #15]
 8006972:	7b7a      	ldrb	r2, [r7, #13]
 8006974:	4909      	ldr	r1, [pc, #36]	; (800699c <UARTEx_SetNbDataToProcess+0x94>)
 8006976:	5c8a      	ldrb	r2, [r1, r2]
 8006978:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 800697c:	7b7a      	ldrb	r2, [r7, #13]
 800697e:	4908      	ldr	r1, [pc, #32]	; (80069a0 <UARTEx_SetNbDataToProcess+0x98>)
 8006980:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8006982:	fb93 f3f2 	sdiv	r3, r3, r2
 8006986:	b29a      	uxth	r2, r3
 8006988:	687b      	ldr	r3, [r7, #4]
 800698a:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
}
 800698e:	bf00      	nop
 8006990:	3714      	adds	r7, #20
 8006992:	46bd      	mov	sp, r7
 8006994:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006998:	4770      	bx	lr
 800699a:	bf00      	nop
 800699c:	08007fcc 	.word	0x08007fcc
 80069a0:	08007fd4 	.word	0x08007fd4

080069a4 <FMC_NORSRAM_Init>:
  * @param  Init Pointer to NORSRAM Initialization structure
  * @retval HAL status
  */
HAL_StatusTypeDef  FMC_NORSRAM_Init(FMC_NORSRAM_TypeDef *Device,
                                    FMC_NORSRAM_InitTypeDef *Init)
{
 80069a4:	b480      	push	{r7}
 80069a6:	b087      	sub	sp, #28
 80069a8:	af00      	add	r7, sp, #0
 80069aa:	6078      	str	r0, [r7, #4]
 80069ac:	6039      	str	r1, [r7, #0]
  assert_param(IS_FMC_CONTINOUS_CLOCK(Init->ContinuousClock));
  assert_param(IS_FMC_WRITE_FIFO(Init->WriteFifo));
  assert_param(IS_FMC_PAGESIZE(Init->PageSize));

  /* Disable NORSRAM Device */
  __FMC_NORSRAM_DISABLE(Device, Init->NSBank);
 80069ae:	683b      	ldr	r3, [r7, #0]
 80069b0:	681a      	ldr	r2, [r3, #0]
 80069b2:	687b      	ldr	r3, [r7, #4]
 80069b4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80069b8:	683a      	ldr	r2, [r7, #0]
 80069ba:	6812      	ldr	r2, [r2, #0]
 80069bc:	f023 0101 	bic.w	r1, r3, #1
 80069c0:	687b      	ldr	r3, [r7, #4]
 80069c2:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

  /* Set NORSRAM device control parameters */
  if (Init->MemoryType == FMC_MEMORY_TYPE_NOR)
 80069c6:	683b      	ldr	r3, [r7, #0]
 80069c8:	689b      	ldr	r3, [r3, #8]
 80069ca:	2b08      	cmp	r3, #8
 80069cc:	d102      	bne.n	80069d4 <FMC_NORSRAM_Init+0x30>
  {
    flashaccess = FMC_NORSRAM_FLASH_ACCESS_ENABLE;
 80069ce:	2340      	movs	r3, #64	; 0x40
 80069d0:	617b      	str	r3, [r7, #20]
 80069d2:	e001      	b.n	80069d8 <FMC_NORSRAM_Init+0x34>
  }
  else
  {
    flashaccess = FMC_NORSRAM_FLASH_ACCESS_DISABLE;
 80069d4:	2300      	movs	r3, #0
 80069d6:	617b      	str	r3, [r7, #20]
  }

  btcr_reg = (flashaccess                   | \
              Init->DataAddressMux          | \
 80069d8:	683b      	ldr	r3, [r7, #0]
 80069da:	685a      	ldr	r2, [r3, #4]
  btcr_reg = (flashaccess                   | \
 80069dc:	697b      	ldr	r3, [r7, #20]
 80069de:	431a      	orrs	r2, r3
              Init->MemoryType              | \
 80069e0:	683b      	ldr	r3, [r7, #0]
 80069e2:	689b      	ldr	r3, [r3, #8]
              Init->DataAddressMux          | \
 80069e4:	431a      	orrs	r2, r3
              Init->MemoryDataWidth         | \
 80069e6:	683b      	ldr	r3, [r7, #0]
 80069e8:	68db      	ldr	r3, [r3, #12]
              Init->MemoryType              | \
 80069ea:	431a      	orrs	r2, r3
              Init->BurstAccessMode         | \
 80069ec:	683b      	ldr	r3, [r7, #0]
 80069ee:	691b      	ldr	r3, [r3, #16]
              Init->MemoryDataWidth         | \
 80069f0:	431a      	orrs	r2, r3
              Init->WaitSignalPolarity      | \
 80069f2:	683b      	ldr	r3, [r7, #0]
 80069f4:	695b      	ldr	r3, [r3, #20]
              Init->BurstAccessMode         | \
 80069f6:	431a      	orrs	r2, r3
              Init->WaitSignalActive        | \
 80069f8:	683b      	ldr	r3, [r7, #0]
 80069fa:	699b      	ldr	r3, [r3, #24]
              Init->WaitSignalPolarity      | \
 80069fc:	431a      	orrs	r2, r3
              Init->WriteOperation          | \
 80069fe:	683b      	ldr	r3, [r7, #0]
 8006a00:	69db      	ldr	r3, [r3, #28]
              Init->WaitSignalActive        | \
 8006a02:	431a      	orrs	r2, r3
              Init->WaitSignal              | \
 8006a04:	683b      	ldr	r3, [r7, #0]
 8006a06:	6a1b      	ldr	r3, [r3, #32]
              Init->WriteOperation          | \
 8006a08:	431a      	orrs	r2, r3
              Init->ExtendedMode            | \
 8006a0a:	683b      	ldr	r3, [r7, #0]
 8006a0c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
              Init->WaitSignal              | \
 8006a0e:	431a      	orrs	r2, r3
              Init->AsynchronousWait        | \
 8006a10:	683b      	ldr	r3, [r7, #0]
 8006a12:	6a9b      	ldr	r3, [r3, #40]	; 0x28
              Init->ExtendedMode            | \
 8006a14:	431a      	orrs	r2, r3
              Init->WriteBurst);
 8006a16:	683b      	ldr	r3, [r7, #0]
 8006a18:	6adb      	ldr	r3, [r3, #44]	; 0x2c
  btcr_reg = (flashaccess                   | \
 8006a1a:	4313      	orrs	r3, r2
 8006a1c:	613b      	str	r3, [r7, #16]

  btcr_reg |= Init->ContinuousClock;
 8006a1e:	683b      	ldr	r3, [r7, #0]
 8006a20:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006a22:	693a      	ldr	r2, [r7, #16]
 8006a24:	4313      	orrs	r3, r2
 8006a26:	613b      	str	r3, [r7, #16]
  btcr_reg |= Init->WriteFifo;
 8006a28:	683b      	ldr	r3, [r7, #0]
 8006a2a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006a2c:	693a      	ldr	r2, [r7, #16]
 8006a2e:	4313      	orrs	r3, r2
 8006a30:	613b      	str	r3, [r7, #16]
  btcr_reg |= Init->PageSize;
 8006a32:	683b      	ldr	r3, [r7, #0]
 8006a34:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006a36:	693a      	ldr	r2, [r7, #16]
 8006a38:	4313      	orrs	r3, r2
 8006a3a:	613b      	str	r3, [r7, #16]

  mask = (FMC_BCRx_MBKEN                |
 8006a3c:	4b20      	ldr	r3, [pc, #128]	; (8006ac0 <FMC_NORSRAM_Init+0x11c>)
 8006a3e:	60fb      	str	r3, [r7, #12]
          FMC_BCRx_WAITEN               |
          FMC_BCRx_EXTMOD               |
          FMC_BCRx_ASYNCWAIT            |
          FMC_BCRx_CBURSTRW);

  mask |= FMC_BCR1_CCLKEN;
 8006a40:	68fb      	ldr	r3, [r7, #12]
 8006a42:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8006a46:	60fb      	str	r3, [r7, #12]
  mask |= FMC_BCR1_WFDIS;
 8006a48:	68fb      	ldr	r3, [r7, #12]
 8006a4a:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8006a4e:	60fb      	str	r3, [r7, #12]
  mask |= FMC_BCRx_CPSIZE;
 8006a50:	68fb      	ldr	r3, [r7, #12]
 8006a52:	f443 23e0 	orr.w	r3, r3, #458752	; 0x70000
 8006a56:	60fb      	str	r3, [r7, #12]

  MODIFY_REG(Device->BTCR[Init->NSBank], mask, btcr_reg);
 8006a58:	683b      	ldr	r3, [r7, #0]
 8006a5a:	681a      	ldr	r2, [r3, #0]
 8006a5c:	687b      	ldr	r3, [r7, #4]
 8006a5e:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8006a62:	68fb      	ldr	r3, [r7, #12]
 8006a64:	43db      	mvns	r3, r3
 8006a66:	ea02 0103 	and.w	r1, r2, r3
 8006a6a:	683b      	ldr	r3, [r7, #0]
 8006a6c:	681a      	ldr	r2, [r3, #0]
 8006a6e:	693b      	ldr	r3, [r7, #16]
 8006a70:	4319      	orrs	r1, r3
 8006a72:	687b      	ldr	r3, [r7, #4]
 8006a74:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

  /* Configure synchronous mode when Continuous clock is enabled for bank2..4 */
  if ((Init->ContinuousClock == FMC_CONTINUOUS_CLOCK_SYNC_ASYNC) && (Init->NSBank != FMC_NORSRAM_BANK1))
 8006a78:	683b      	ldr	r3, [r7, #0]
 8006a7a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006a7c:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8006a80:	d10c      	bne.n	8006a9c <FMC_NORSRAM_Init+0xf8>
 8006a82:	683b      	ldr	r3, [r7, #0]
 8006a84:	681b      	ldr	r3, [r3, #0]
 8006a86:	2b00      	cmp	r3, #0
 8006a88:	d008      	beq.n	8006a9c <FMC_NORSRAM_Init+0xf8>
  {
    MODIFY_REG(Device->BTCR[FMC_NORSRAM_BANK1], FMC_BCR1_CCLKEN, Init->ContinuousClock);
 8006a8a:	687b      	ldr	r3, [r7, #4]
 8006a8c:	681b      	ldr	r3, [r3, #0]
 8006a8e:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 8006a92:	683b      	ldr	r3, [r7, #0]
 8006a94:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006a96:	431a      	orrs	r2, r3
 8006a98:	687b      	ldr	r3, [r7, #4]
 8006a9a:	601a      	str	r2, [r3, #0]
  }

  if (Init->NSBank != FMC_NORSRAM_BANK1)
 8006a9c:	683b      	ldr	r3, [r7, #0]
 8006a9e:	681b      	ldr	r3, [r3, #0]
 8006aa0:	2b00      	cmp	r3, #0
 8006aa2:	d006      	beq.n	8006ab2 <FMC_NORSRAM_Init+0x10e>
  {
    /* Configure Write FIFO mode when Write Fifo is enabled for bank2..4 */
    SET_BIT(Device->BTCR[FMC_NORSRAM_BANK1], (uint32_t)(Init->WriteFifo));
 8006aa4:	687b      	ldr	r3, [r7, #4]
 8006aa6:	681a      	ldr	r2, [r3, #0]
 8006aa8:	683b      	ldr	r3, [r7, #0]
 8006aaa:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006aac:	431a      	orrs	r2, r3
 8006aae:	687b      	ldr	r3, [r7, #4]
 8006ab0:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8006ab2:	2300      	movs	r3, #0
}
 8006ab4:	4618      	mov	r0, r3
 8006ab6:	371c      	adds	r7, #28
 8006ab8:	46bd      	mov	sp, r7
 8006aba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006abe:	4770      	bx	lr
 8006ac0:	0008fb7f 	.word	0x0008fb7f

08006ac4 <FMC_NORSRAM_Timing_Init>:
  * @param  Bank NORSRAM bank number
  * @retval HAL status
  */
HAL_StatusTypeDef FMC_NORSRAM_Timing_Init(FMC_NORSRAM_TypeDef *Device,
                                          FMC_NORSRAM_TimingTypeDef *Timing, uint32_t Bank)
{
 8006ac4:	b480      	push	{r7}
 8006ac6:	b087      	sub	sp, #28
 8006ac8:	af00      	add	r7, sp, #0
 8006aca:	60f8      	str	r0, [r7, #12]
 8006acc:	60b9      	str	r1, [r7, #8]
 8006ace:	607a      	str	r2, [r7, #4]
  assert_param(IS_FMC_DATA_LATENCY(Timing->DataLatency));
  assert_param(IS_FMC_ACCESS_MODE(Timing->AccessMode));
  assert_param(IS_FMC_NORSRAM_BANK(Bank));

  /* Set FMC_NORSRAM device timing parameters */
  MODIFY_REG(Device->BTCR[Bank + 1U], BTR_CLEAR_MASK, (Timing->AddressSetupTime                                  |
 8006ad0:	687b      	ldr	r3, [r7, #4]
 8006ad2:	1c5a      	adds	r2, r3, #1
 8006ad4:	68fb      	ldr	r3, [r7, #12]
 8006ad6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006ada:	f003 4140 	and.w	r1, r3, #3221225472	; 0xc0000000
 8006ade:	68bb      	ldr	r3, [r7, #8]
 8006ae0:	681a      	ldr	r2, [r3, #0]
 8006ae2:	68bb      	ldr	r3, [r7, #8]
 8006ae4:	685b      	ldr	r3, [r3, #4]
 8006ae6:	011b      	lsls	r3, r3, #4
 8006ae8:	431a      	orrs	r2, r3
 8006aea:	68bb      	ldr	r3, [r7, #8]
 8006aec:	689b      	ldr	r3, [r3, #8]
 8006aee:	021b      	lsls	r3, r3, #8
 8006af0:	431a      	orrs	r2, r3
 8006af2:	68bb      	ldr	r3, [r7, #8]
 8006af4:	68db      	ldr	r3, [r3, #12]
 8006af6:	041b      	lsls	r3, r3, #16
 8006af8:	431a      	orrs	r2, r3
 8006afa:	68bb      	ldr	r3, [r7, #8]
 8006afc:	691b      	ldr	r3, [r3, #16]
 8006afe:	3b01      	subs	r3, #1
 8006b00:	051b      	lsls	r3, r3, #20
 8006b02:	431a      	orrs	r2, r3
 8006b04:	68bb      	ldr	r3, [r7, #8]
 8006b06:	695b      	ldr	r3, [r3, #20]
 8006b08:	3b02      	subs	r3, #2
 8006b0a:	061b      	lsls	r3, r3, #24
 8006b0c:	431a      	orrs	r2, r3
 8006b0e:	68bb      	ldr	r3, [r7, #8]
 8006b10:	699b      	ldr	r3, [r3, #24]
 8006b12:	4313      	orrs	r3, r2
 8006b14:	687a      	ldr	r2, [r7, #4]
 8006b16:	3201      	adds	r2, #1
 8006b18:	4319      	orrs	r1, r3
 8006b1a:	68fb      	ldr	r3, [r7, #12]
 8006b1c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
                                                       (((Timing->CLKDivision) - 1U)     << FMC_BTRx_CLKDIV_Pos)  |
                                                       (((Timing->DataLatency) - 2U)     << FMC_BTRx_DATLAT_Pos)  |
                                                       (Timing->AccessMode)));

  /* Configure Clock division value (in NORSRAM bank 1) when continuous clock is enabled */
  if (HAL_IS_BIT_SET(Device->BTCR[FMC_NORSRAM_BANK1], FMC_BCR1_CCLKEN))
 8006b20:	68fb      	ldr	r3, [r7, #12]
 8006b22:	681b      	ldr	r3, [r3, #0]
 8006b24:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8006b28:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8006b2c:	d113      	bne.n	8006b56 <FMC_NORSRAM_Timing_Init+0x92>
  {
    tmpr = (uint32_t)(Device->BTCR[FMC_NORSRAM_BANK1 + 1U] & ~((0x0FU) << FMC_BTRx_CLKDIV_Pos));
 8006b2e:	68fb      	ldr	r3, [r7, #12]
 8006b30:	685b      	ldr	r3, [r3, #4]
 8006b32:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 8006b36:	617b      	str	r3, [r7, #20]
    tmpr |= (uint32_t)(((Timing->CLKDivision) - 1U) << FMC_BTRx_CLKDIV_Pos);
 8006b38:	68bb      	ldr	r3, [r7, #8]
 8006b3a:	691b      	ldr	r3, [r3, #16]
 8006b3c:	3b01      	subs	r3, #1
 8006b3e:	051b      	lsls	r3, r3, #20
 8006b40:	697a      	ldr	r2, [r7, #20]
 8006b42:	4313      	orrs	r3, r2
 8006b44:	617b      	str	r3, [r7, #20]
    MODIFY_REG(Device->BTCR[FMC_NORSRAM_BANK1 + 1U], FMC_BTRx_CLKDIV, tmpr);
 8006b46:	68fb      	ldr	r3, [r7, #12]
 8006b48:	685b      	ldr	r3, [r3, #4]
 8006b4a:	f423 0270 	bic.w	r2, r3, #15728640	; 0xf00000
 8006b4e:	697b      	ldr	r3, [r7, #20]
 8006b50:	431a      	orrs	r2, r3
 8006b52:	68fb      	ldr	r3, [r7, #12]
 8006b54:	605a      	str	r2, [r3, #4]
  }

  return HAL_OK;
 8006b56:	2300      	movs	r3, #0
}
 8006b58:	4618      	mov	r0, r3
 8006b5a:	371c      	adds	r7, #28
 8006b5c:	46bd      	mov	sp, r7
 8006b5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b62:	4770      	bx	lr

08006b64 <FMC_NORSRAM_Extended_Timing_Init>:
  * @retval HAL status
  */
HAL_StatusTypeDef FMC_NORSRAM_Extended_Timing_Init(FMC_NORSRAM_EXTENDED_TypeDef *Device,
                                                   FMC_NORSRAM_TimingTypeDef *Timing, uint32_t Bank,
                                                   uint32_t ExtendedMode)
{
 8006b64:	b480      	push	{r7}
 8006b66:	b085      	sub	sp, #20
 8006b68:	af00      	add	r7, sp, #0
 8006b6a:	60f8      	str	r0, [r7, #12]
 8006b6c:	60b9      	str	r1, [r7, #8]
 8006b6e:	607a      	str	r2, [r7, #4]
 8006b70:	603b      	str	r3, [r7, #0]
  /* Check the parameters */
  assert_param(IS_FMC_EXTENDED_MODE(ExtendedMode));

  /* Set NORSRAM device timing register for write configuration, if extended mode is used */
  if (ExtendedMode == FMC_EXTENDED_MODE_ENABLE)
 8006b72:	683b      	ldr	r3, [r7, #0]
 8006b74:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8006b78:	d11d      	bne.n	8006bb6 <FMC_NORSRAM_Extended_Timing_Init+0x52>
    assert_param(IS_FMC_TURNAROUND_TIME(Timing->BusTurnAroundDuration));
    assert_param(IS_FMC_ACCESS_MODE(Timing->AccessMode));
    assert_param(IS_FMC_NORSRAM_BANK(Bank));

    /* Set NORSRAM device timing register for write configuration, if extended mode is used */
    MODIFY_REG(Device->BWTR[Bank], BWTR_CLEAR_MASK, (Timing->AddressSetupTime                                    |
 8006b7a:	68fb      	ldr	r3, [r7, #12]
 8006b7c:	687a      	ldr	r2, [r7, #4]
 8006b7e:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8006b82:	4b13      	ldr	r3, [pc, #76]	; (8006bd0 <FMC_NORSRAM_Extended_Timing_Init+0x6c>)
 8006b84:	4013      	ands	r3, r2
 8006b86:	68ba      	ldr	r2, [r7, #8]
 8006b88:	6811      	ldr	r1, [r2, #0]
 8006b8a:	68ba      	ldr	r2, [r7, #8]
 8006b8c:	6852      	ldr	r2, [r2, #4]
 8006b8e:	0112      	lsls	r2, r2, #4
 8006b90:	4311      	orrs	r1, r2
 8006b92:	68ba      	ldr	r2, [r7, #8]
 8006b94:	6892      	ldr	r2, [r2, #8]
 8006b96:	0212      	lsls	r2, r2, #8
 8006b98:	4311      	orrs	r1, r2
 8006b9a:	68ba      	ldr	r2, [r7, #8]
 8006b9c:	6992      	ldr	r2, [r2, #24]
 8006b9e:	4311      	orrs	r1, r2
 8006ba0:	68ba      	ldr	r2, [r7, #8]
 8006ba2:	68d2      	ldr	r2, [r2, #12]
 8006ba4:	0412      	lsls	r2, r2, #16
 8006ba6:	430a      	orrs	r2, r1
 8006ba8:	ea43 0102 	orr.w	r1, r3, r2
 8006bac:	68fb      	ldr	r3, [r7, #12]
 8006bae:	687a      	ldr	r2, [r7, #4]
 8006bb0:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
 8006bb4:	e005      	b.n	8006bc2 <FMC_NORSRAM_Extended_Timing_Init+0x5e>
                                                     Timing->AccessMode                                          |
                                                     ((Timing->BusTurnAroundDuration)  << FMC_BWTRx_BUSTURN_Pos)));
  }
  else
  {
    Device->BWTR[Bank] = 0x0FFFFFFFU;
 8006bb6:	68fb      	ldr	r3, [r7, #12]
 8006bb8:	687a      	ldr	r2, [r7, #4]
 8006bba:	f06f 4170 	mvn.w	r1, #4026531840	; 0xf0000000
 8006bbe:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  }

  return HAL_OK;
 8006bc2:	2300      	movs	r3, #0
}
 8006bc4:	4618      	mov	r0, r3
 8006bc6:	3714      	adds	r7, #20
 8006bc8:	46bd      	mov	sp, r7
 8006bca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006bce:	4770      	bx	lr
 8006bd0:	cff00000 	.word	0xcff00000

08006bd4 <WIZCHIP_READ>:
   WIZCHIP.CS._d_e_s_e_l_e_c_t_();
   WIZCHIP_CRITICAL_EXIT();
}

uint8_t  WIZCHIP_READ(uint32_t AddrSel)
{
 8006bd4:	b590      	push	{r4, r7, lr}
 8006bd6:	b085      	sub	sp, #20
 8006bd8:	af00      	add	r7, sp, #0
 8006bda:	6078      	str	r0, [r7, #4]
   uint8_t ret;
   uint8_t tAD[3];
   tAD[0] = (uint8_t)((AddrSel & 0x00FF0000) >> 16);
 8006bdc:	687b      	ldr	r3, [r7, #4]
 8006bde:	0c1b      	lsrs	r3, r3, #16
 8006be0:	b2db      	uxtb	r3, r3
 8006be2:	733b      	strb	r3, [r7, #12]
   tAD[1] = (uint8_t)((AddrSel & 0x0000FF00) >> 8);
 8006be4:	687b      	ldr	r3, [r7, #4]
 8006be6:	0a1b      	lsrs	r3, r3, #8
 8006be8:	b2db      	uxtb	r3, r3
 8006bea:	737b      	strb	r3, [r7, #13]
   tAD[2] = (uint8_t)(AddrSel & 0x000000ff);
 8006bec:	687b      	ldr	r3, [r7, #4]
 8006bee:	b2db      	uxtb	r3, r3
 8006bf0:	73bb      	strb	r3, [r7, #14]

   WIZCHIP_CRITICAL_ENTER();
 8006bf2:	4b10      	ldr	r3, [pc, #64]	; (8006c34 <WIZCHIP_READ+0x60>)
 8006bf4:	689b      	ldr	r3, [r3, #8]
 8006bf6:	4798      	blx	r3
   WIZCHIP.CS._s_e_l_e_c_t_();
 8006bf8:	4b0e      	ldr	r3, [pc, #56]	; (8006c34 <WIZCHIP_READ+0x60>)
 8006bfa:	691b      	ldr	r3, [r3, #16]
 8006bfc:	4798      	blx	r3
#if( (_WIZCHIP_IO_MODE_ ==  _WIZCHIP_IO_MODE_SPI_VDM_))
   tAD[2] |= (_W6100_SPI_READ_ | _W6100_SPI_OP_);
   WIZCHIP.IF.SPI._write_byte_buf(tAD, 3);
   ret = WIZCHIP.IF.SPI._read_byte();
#elif ( (_WIZCHIP_IO_MODE_ == _WIZCHIP_IO_MODE_BUS_INDIR_) )
   WIZCHIP.IF.BUS._write_data_buf(IDM_AR0,tAD,3,1);
 8006bfe:	4b0d      	ldr	r3, [pc, #52]	; (8006c34 <WIZCHIP_READ+0x60>)
 8006c00:	6a5c      	ldr	r4, [r3, #36]	; 0x24
 8006c02:	f107 010c 	add.w	r1, r7, #12
 8006c06:	2301      	movs	r3, #1
 8006c08:	2203      	movs	r2, #3
 8006c0a:	f04f 40c0 	mov.w	r0, #1610612736	; 0x60000000
 8006c0e:	47a0      	blx	r4
   ret = WIZCHIP.IF.BUS._read_data(IDM_DR);
 8006c10:	4b08      	ldr	r3, [pc, #32]	; (8006c34 <WIZCHIP_READ+0x60>)
 8006c12:	699b      	ldr	r3, [r3, #24]
 8006c14:	4808      	ldr	r0, [pc, #32]	; (8006c38 <WIZCHIP_READ+0x64>)
 8006c16:	4798      	blx	r3
 8006c18:	4603      	mov	r3, r0
 8006c1a:	73fb      	strb	r3, [r7, #15]
#else
   #error "Unknown _WIZCHIP_IO_MODE_ in W6100. !!!"   
#endif

   WIZCHIP.CS._d_e_s_e_l_e_c_t_();
 8006c1c:	4b05      	ldr	r3, [pc, #20]	; (8006c34 <WIZCHIP_READ+0x60>)
 8006c1e:	695b      	ldr	r3, [r3, #20]
 8006c20:	4798      	blx	r3
   WIZCHIP_CRITICAL_EXIT();
 8006c22:	4b04      	ldr	r3, [pc, #16]	; (8006c34 <WIZCHIP_READ+0x60>)
 8006c24:	68db      	ldr	r3, [r3, #12]
 8006c26:	4798      	blx	r3
   return ret;
 8006c28:	7bfb      	ldrb	r3, [r7, #15]
}
 8006c2a:	4618      	mov	r0, r3
 8006c2c:	3714      	adds	r7, #20
 8006c2e:	46bd      	mov	sp, r7
 8006c30:	bd90      	pop	{r4, r7, pc}
 8006c32:	bf00      	nop
 8006c34:	20000010 	.word	0x20000010
 8006c38:	60000003 	.word	0x60000003

08006c3c <wizchip_cris_enter>:
 * @details @ref wizchip_cris_enter() provides the default protection while @ref _WIZCHIP_ is accessed. \n
 *          but it is null function.
 * @note It can be overwritten with your function or register your functions by calling @ref reg_wizchip_cris_cbfunc().
 * @sa wizchip_cris_exit()
 */
void wizchip_cris_enter(void)   {}
 8006c3c:	b480      	push	{r7}
 8006c3e:	af00      	add	r7, sp, #0
 8006c40:	bf00      	nop
 8006c42:	46bd      	mov	sp, r7
 8006c44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c48:	4770      	bx	lr

08006c4a <wizchip_cris_exit>:
 * @details @ref wizchip_cris_exit provides the default protection while @ref _WIZCHIP_ is accessed\n
 *          but it is null function.
 * @note It can be overwritten with your function or register your functions by calling @ref reg_wizchip_cris_cbfunc().
 * @sa wizchip_cris_enter()
 */
void wizchip_cris_exit(void)   {}
 8006c4a:	b480      	push	{r7}
 8006c4c:	af00      	add	r7, sp, #0
 8006c4e:	bf00      	nop
 8006c50:	46bd      	mov	sp, r7
 8006c52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c56:	4770      	bx	lr

08006c58 <wizchip_cs_select>:
 * @details @ref wizchip_cs_select() provides the default selection @ref _WIZCHIP_,\n
 *          but it is null function.
 * @note It can be overwritten with your function or register your functions by calling @ref reg_wizchip_cs_cbfunc().
 * @sa wizchip_cs_deselect()
 */
void wizchip_cs_select(void)   {}
 8006c58:	b480      	push	{r7}
 8006c5a:	af00      	add	r7, sp, #0
 8006c5c:	bf00      	nop
 8006c5e:	46bd      	mov	sp, r7
 8006c60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c64:	4770      	bx	lr

08006c66 <wizchip_cs_deselect>:
 * @details @ref wizchip_cs_deselect() provides the default de-selection @ref _WIZCHIP_, \n
 *          but it is null function.
 * @note It can be overwritten with your function or register your functions by calling @ref reg_wizchip_cs_cbfunc().
 * @sa wizchip_cs_select()
 */
void wizchip_cs_deselect(void)   {}
 8006c66:	b480      	push	{r7}
 8006c68:	af00      	add	r7, sp, #0
 8006c6a:	bf00      	nop
 8006c6c:	46bd      	mov	sp, r7
 8006c6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c72:	4770      	bx	lr

08006c74 <wizchip_bus_read>:
 * @param AddrSel It specifies the address of register to be read.
 * @return @ref iodata_t  
 * @note It can be overwritten with your function or register your functions by calling @ref reg_wizchip_bus_cbfunc().
 * @sa wizchip_bus_write()
 */
iodata_t wizchip_bus_read(uint32_t AddrSel) { return * ((volatile iodata_t *)((ptrdiff_t) AddrSel)); }
 8006c74:	b480      	push	{r7}
 8006c76:	b083      	sub	sp, #12
 8006c78:	af00      	add	r7, sp, #0
 8006c7a:	6078      	str	r0, [r7, #4]
 8006c7c:	687b      	ldr	r3, [r7, #4]
 8006c7e:	781b      	ldrb	r3, [r3, #0]
 8006c80:	b2db      	uxtb	r3, r3
 8006c82:	4618      	mov	r0, r3
 8006c84:	370c      	adds	r7, #12
 8006c86:	46bd      	mov	sp, r7
 8006c88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c8c:	4770      	bx	lr

08006c8e <wizchip_bus_write>:
 * @param wb @ref iodata_t data to be written
 * @return void
 * @note It can be overwritten with your function or register your functions by calling @ref reg_wizchip_bus_cbfunc().
 * @sa wizchip_bus_read()
 */
void wizchip_bus_write(uint32_t AddrSel, iodata_t wb)  { *((volatile iodata_t*)((ptrdiff_t)AddrSel)) = wb; }
 8006c8e:	b480      	push	{r7}
 8006c90:	b083      	sub	sp, #12
 8006c92:	af00      	add	r7, sp, #0
 8006c94:	6078      	str	r0, [r7, #4]
 8006c96:	460b      	mov	r3, r1
 8006c98:	70fb      	strb	r3, [r7, #3]
 8006c9a:	687b      	ldr	r3, [r7, #4]
 8006c9c:	78fa      	ldrb	r2, [r7, #3]
 8006c9e:	701a      	strb	r2, [r3, #0]
 8006ca0:	bf00      	nop
 8006ca2:	370c      	adds	r7, #12
 8006ca4:	46bd      	mov	sp, r7
 8006ca6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006caa:	4770      	bx	lr

08006cac <wizchip_bus_read_buf>:
 * @return void
 * @note It can be overwritten with your function or register your functions by calling @ref reg_wizchip_bus_cbfunc().
 * @sa wizchip_bus_write_buf()
 */
void wizchip_bus_read_buf(uint32_t AddrSel, iodata_t* buf, datasize_t len, uint8_t addrinc)
{ 
 8006cac:	b590      	push	{r4, r7, lr}
 8006cae:	b087      	sub	sp, #28
 8006cb0:	af00      	add	r7, sp, #0
 8006cb2:	60f8      	str	r0, [r7, #12]
 8006cb4:	60b9      	str	r1, [r7, #8]
 8006cb6:	4611      	mov	r1, r2
 8006cb8:	461a      	mov	r2, r3
 8006cba:	460b      	mov	r3, r1
 8006cbc:	80fb      	strh	r3, [r7, #6]
 8006cbe:	4613      	mov	r3, r2
 8006cc0:	717b      	strb	r3, [r7, #5]
   datasize_t i;
   if(addrinc) addrinc = sizeof(iodata_t);
 8006cc2:	797b      	ldrb	r3, [r7, #5]
 8006cc4:	2b00      	cmp	r3, #0
 8006cc6:	d001      	beq.n	8006ccc <wizchip_bus_read_buf+0x20>
 8006cc8:	2301      	movs	r3, #1
 8006cca:	717b      	strb	r3, [r7, #5]
   for ( i = 0; i < len; i++)
 8006ccc:	2300      	movs	r3, #0
 8006cce:	82fb      	strh	r3, [r7, #22]
 8006cd0:	e012      	b.n	8006cf8 <wizchip_bus_read_buf+0x4c>
   {
      *buf++ = WIZCHIP.IF.BUS._read_data(AddrSel);
 8006cd2:	4b0f      	ldr	r3, [pc, #60]	; (8006d10 <wizchip_bus_read_buf+0x64>)
 8006cd4:	699b      	ldr	r3, [r3, #24]
 8006cd6:	68bc      	ldr	r4, [r7, #8]
 8006cd8:	1c62      	adds	r2, r4, #1
 8006cda:	60ba      	str	r2, [r7, #8]
 8006cdc:	68f8      	ldr	r0, [r7, #12]
 8006cde:	4798      	blx	r3
 8006ce0:	4603      	mov	r3, r0
 8006ce2:	7023      	strb	r3, [r4, #0]
      AddrSel += (uint32_t) addrinc;
 8006ce4:	797b      	ldrb	r3, [r7, #5]
 8006ce6:	68fa      	ldr	r2, [r7, #12]
 8006ce8:	4413      	add	r3, r2
 8006cea:	60fb      	str	r3, [r7, #12]
   for ( i = 0; i < len; i++)
 8006cec:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 8006cf0:	b29b      	uxth	r3, r3
 8006cf2:	3301      	adds	r3, #1
 8006cf4:	b29b      	uxth	r3, r3
 8006cf6:	82fb      	strh	r3, [r7, #22]
 8006cf8:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 8006cfc:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8006d00:	429a      	cmp	r2, r3
 8006d02:	dbe6      	blt.n	8006cd2 <wizchip_bus_read_buf+0x26>
   }
}
 8006d04:	bf00      	nop
 8006d06:	bf00      	nop
 8006d08:	371c      	adds	r7, #28
 8006d0a:	46bd      	mov	sp, r7
 8006d0c:	bd90      	pop	{r4, r7, pc}
 8006d0e:	bf00      	nop
 8006d10:	20000010 	.word	0x20000010

08006d14 <wizchip_bus_write_buf>:
 * @return void
 * @note It can be overwritten with your function or register your functions by calling @ref reg_wizchip_bus_cbfunc().
 * @sa wizchip_bus_read_buf()
 */
void wizchip_bus_write_buf(uint32_t AddrSel, iodata_t* buf, datasize_t len, uint8_t addrinc)
{ 
 8006d14:	b580      	push	{r7, lr}
 8006d16:	b086      	sub	sp, #24
 8006d18:	af00      	add	r7, sp, #0
 8006d1a:	60f8      	str	r0, [r7, #12]
 8006d1c:	60b9      	str	r1, [r7, #8]
 8006d1e:	4611      	mov	r1, r2
 8006d20:	461a      	mov	r2, r3
 8006d22:	460b      	mov	r3, r1
 8006d24:	80fb      	strh	r3, [r7, #6]
 8006d26:	4613      	mov	r3, r2
 8006d28:	717b      	strb	r3, [r7, #5]
   datasize_t i;
   if(addrinc) addrinc = sizeof(iodata_t);
 8006d2a:	797b      	ldrb	r3, [r7, #5]
 8006d2c:	2b00      	cmp	r3, #0
 8006d2e:	d001      	beq.n	8006d34 <wizchip_bus_write_buf+0x20>
 8006d30:	2301      	movs	r3, #1
 8006d32:	717b      	strb	r3, [r7, #5]
   for( i = 0; i < len ; i++)
 8006d34:	2300      	movs	r3, #0
 8006d36:	82fb      	strh	r3, [r7, #22]
 8006d38:	e012      	b.n	8006d60 <wizchip_bus_write_buf+0x4c>
   {
      WIZCHIP.IF.BUS._write_data(AddrSel,*buf++);
 8006d3a:	4b0f      	ldr	r3, [pc, #60]	; (8006d78 <wizchip_bus_write_buf+0x64>)
 8006d3c:	69da      	ldr	r2, [r3, #28]
 8006d3e:	68bb      	ldr	r3, [r7, #8]
 8006d40:	1c59      	adds	r1, r3, #1
 8006d42:	60b9      	str	r1, [r7, #8]
 8006d44:	781b      	ldrb	r3, [r3, #0]
 8006d46:	4619      	mov	r1, r3
 8006d48:	68f8      	ldr	r0, [r7, #12]
 8006d4a:	4790      	blx	r2
      AddrSel += (uint32_t)addrinc;
 8006d4c:	797b      	ldrb	r3, [r7, #5]
 8006d4e:	68fa      	ldr	r2, [r7, #12]
 8006d50:	4413      	add	r3, r2
 8006d52:	60fb      	str	r3, [r7, #12]
   for( i = 0; i < len ; i++)
 8006d54:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 8006d58:	b29b      	uxth	r3, r3
 8006d5a:	3301      	adds	r3, #1
 8006d5c:	b29b      	uxth	r3, r3
 8006d5e:	82fb      	strh	r3, [r7, #22]
 8006d60:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 8006d64:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8006d68:	429a      	cmp	r2, r3
 8006d6a:	dbe6      	blt.n	8006d3a <wizchip_bus_write_buf+0x26>
   }

}
 8006d6c:	bf00      	nop
 8006d6e:	bf00      	nop
 8006d70:	3718      	adds	r7, #24
 8006d72:	46bd      	mov	sp, r7
 8006d74:	bd80      	pop	{r7, pc}
 8006d76:	bf00      	nop
 8006d78:	20000010 	.word	0x20000010

08006d7c <reg_wizchip_cs_cbfunc>:
   if(!cris_ex)   WIZCHIP.CRIS._e_x_i_t_  = wizchip_cris_exit;
   else           WIZCHIP.CRIS._e_x_i_t_  = cris_ex;
}

void reg_wizchip_cs_cbfunc(void(*cs_sel)(void), void(*cs_desel)(void))
{
 8006d7c:	b480      	push	{r7}
 8006d7e:	b083      	sub	sp, #12
 8006d80:	af00      	add	r7, sp, #0
 8006d82:	6078      	str	r0, [r7, #4]
 8006d84:	6039      	str	r1, [r7, #0]
   if(!cs_sel)    WIZCHIP.CS._s_e_l_e_c_t_   = wizchip_cs_select;
 8006d86:	687b      	ldr	r3, [r7, #4]
 8006d88:	2b00      	cmp	r3, #0
 8006d8a:	d103      	bne.n	8006d94 <reg_wizchip_cs_cbfunc+0x18>
 8006d8c:	4b0b      	ldr	r3, [pc, #44]	; (8006dbc <reg_wizchip_cs_cbfunc+0x40>)
 8006d8e:	4a0c      	ldr	r2, [pc, #48]	; (8006dc0 <reg_wizchip_cs_cbfunc+0x44>)
 8006d90:	611a      	str	r2, [r3, #16]
 8006d92:	e002      	b.n	8006d9a <reg_wizchip_cs_cbfunc+0x1e>
   else           WIZCHIP.CS._s_e_l_e_c_t_   = cs_sel; 
 8006d94:	4a09      	ldr	r2, [pc, #36]	; (8006dbc <reg_wizchip_cs_cbfunc+0x40>)
 8006d96:	687b      	ldr	r3, [r7, #4]
 8006d98:	6113      	str	r3, [r2, #16]
   if(!cs_desel)  WIZCHIP.CS._d_e_s_e_l_e_c_t_ = wizchip_cs_deselect;
 8006d9a:	683b      	ldr	r3, [r7, #0]
 8006d9c:	2b00      	cmp	r3, #0
 8006d9e:	d103      	bne.n	8006da8 <reg_wizchip_cs_cbfunc+0x2c>
 8006da0:	4b06      	ldr	r3, [pc, #24]	; (8006dbc <reg_wizchip_cs_cbfunc+0x40>)
 8006da2:	4a08      	ldr	r2, [pc, #32]	; (8006dc4 <reg_wizchip_cs_cbfunc+0x48>)
 8006da4:	615a      	str	r2, [r3, #20]
   else           WIZCHIP.CS._d_e_s_e_l_e_c_t_ = cs_desel;
}
 8006da6:	e002      	b.n	8006dae <reg_wizchip_cs_cbfunc+0x32>
   else           WIZCHIP.CS._d_e_s_e_l_e_c_t_ = cs_desel;
 8006da8:	4a04      	ldr	r2, [pc, #16]	; (8006dbc <reg_wizchip_cs_cbfunc+0x40>)
 8006daa:	683b      	ldr	r3, [r7, #0]
 8006dac:	6153      	str	r3, [r2, #20]
}
 8006dae:	bf00      	nop
 8006db0:	370c      	adds	r7, #12
 8006db2:	46bd      	mov	sp, r7
 8006db4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006db8:	4770      	bx	lr
 8006dba:	bf00      	nop
 8006dbc:	20000010 	.word	0x20000010
 8006dc0:	08006c59 	.word	0x08006c59
 8006dc4:	08006c67 	.word	0x08006c67

08006dc8 <reg_wizchip_bus_cbfunc>:
#if (_WIZCHIP_IO_MODE_ & _WIZCHIP_IO_MODE_BUS_)
void reg_wizchip_bus_cbfunc( iodata_t(*bus_rd)(uint32_t addr), 
                             void (*bus_wd)(uint32_t addr, iodata_t wb),
                             void (*bus_rbuf)(uint32_t AddrSel, uint8_t* buf, datasize_t len, uint8_t inc),
                             void (*bus_wbuf)(uint32_t AddrSel, uint8_t* buf, datasize_t len, uint8_t inc) )
{
 8006dc8:	b480      	push	{r7}
 8006dca:	b085      	sub	sp, #20
 8006dcc:	af00      	add	r7, sp, #0
 8006dce:	60f8      	str	r0, [r7, #12]
 8006dd0:	60b9      	str	r1, [r7, #8]
 8006dd2:	607a      	str	r2, [r7, #4]
 8006dd4:	603b      	str	r3, [r7, #0]
   while(!(WIZCHIP.if_mode & _WIZCHIP_IO_MODE_BUS_));   
 8006dd6:	bf00      	nop
 8006dd8:	4b19      	ldr	r3, [pc, #100]	; (8006e40 <reg_wizchip_bus_cbfunc+0x78>)
 8006dda:	881b      	ldrh	r3, [r3, #0]
 8006ddc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006de0:	2b00      	cmp	r3, #0
 8006de2:	d0f9      	beq.n	8006dd8 <reg_wizchip_bus_cbfunc+0x10>
   if(!bus_rd)  WIZCHIP.IF.BUS._read_data   = wizchip_bus_read;
 8006de4:	68fb      	ldr	r3, [r7, #12]
 8006de6:	2b00      	cmp	r3, #0
 8006de8:	d103      	bne.n	8006df2 <reg_wizchip_bus_cbfunc+0x2a>
 8006dea:	4b15      	ldr	r3, [pc, #84]	; (8006e40 <reg_wizchip_bus_cbfunc+0x78>)
 8006dec:	4a15      	ldr	r2, [pc, #84]	; (8006e44 <reg_wizchip_bus_cbfunc+0x7c>)
 8006dee:	619a      	str	r2, [r3, #24]
 8006df0:	e002      	b.n	8006df8 <reg_wizchip_bus_cbfunc+0x30>
   else         WIZCHIP.IF.BUS._read_data   = bus_rd;
 8006df2:	4a13      	ldr	r2, [pc, #76]	; (8006e40 <reg_wizchip_bus_cbfunc+0x78>)
 8006df4:	68fb      	ldr	r3, [r7, #12]
 8006df6:	6193      	str	r3, [r2, #24]
   if(!bus_wd)  WIZCHIP.IF.BUS._write_data  = wizchip_bus_write;
 8006df8:	68bb      	ldr	r3, [r7, #8]
 8006dfa:	2b00      	cmp	r3, #0
 8006dfc:	d103      	bne.n	8006e06 <reg_wizchip_bus_cbfunc+0x3e>
 8006dfe:	4b10      	ldr	r3, [pc, #64]	; (8006e40 <reg_wizchip_bus_cbfunc+0x78>)
 8006e00:	4a11      	ldr	r2, [pc, #68]	; (8006e48 <reg_wizchip_bus_cbfunc+0x80>)
 8006e02:	61da      	str	r2, [r3, #28]
 8006e04:	e002      	b.n	8006e0c <reg_wizchip_bus_cbfunc+0x44>
   else         WIZCHIP.IF.BUS._write_data  = bus_wd;
 8006e06:	4a0e      	ldr	r2, [pc, #56]	; (8006e40 <reg_wizchip_bus_cbfunc+0x78>)
 8006e08:	68bb      	ldr	r3, [r7, #8]
 8006e0a:	61d3      	str	r3, [r2, #28]

   if(!bus_rbuf)  WIZCHIP.IF.BUS._read_data_buf   = wizchip_bus_read_buf;
 8006e0c:	687b      	ldr	r3, [r7, #4]
 8006e0e:	2b00      	cmp	r3, #0
 8006e10:	d103      	bne.n	8006e1a <reg_wizchip_bus_cbfunc+0x52>
 8006e12:	4b0b      	ldr	r3, [pc, #44]	; (8006e40 <reg_wizchip_bus_cbfunc+0x78>)
 8006e14:	4a0d      	ldr	r2, [pc, #52]	; (8006e4c <reg_wizchip_bus_cbfunc+0x84>)
 8006e16:	621a      	str	r2, [r3, #32]
 8006e18:	e002      	b.n	8006e20 <reg_wizchip_bus_cbfunc+0x58>
   else           WIZCHIP.IF.BUS._read_data_buf   = bus_rbuf;
 8006e1a:	4a09      	ldr	r2, [pc, #36]	; (8006e40 <reg_wizchip_bus_cbfunc+0x78>)
 8006e1c:	687b      	ldr	r3, [r7, #4]
 8006e1e:	6213      	str	r3, [r2, #32]
   if(!bus_wbuf)  WIZCHIP.IF.BUS._write_data_buf  = wizchip_bus_write_buf;
 8006e20:	683b      	ldr	r3, [r7, #0]
 8006e22:	2b00      	cmp	r3, #0
 8006e24:	d103      	bne.n	8006e2e <reg_wizchip_bus_cbfunc+0x66>
 8006e26:	4b06      	ldr	r3, [pc, #24]	; (8006e40 <reg_wizchip_bus_cbfunc+0x78>)
 8006e28:	4a09      	ldr	r2, [pc, #36]	; (8006e50 <reg_wizchip_bus_cbfunc+0x88>)
 8006e2a:	625a      	str	r2, [r3, #36]	; 0x24
   else           WIZCHIP.IF.BUS._write_data_buf  = bus_wbuf;
}
 8006e2c:	e002      	b.n	8006e34 <reg_wizchip_bus_cbfunc+0x6c>
   else           WIZCHIP.IF.BUS._write_data_buf  = bus_wbuf;
 8006e2e:	4a04      	ldr	r2, [pc, #16]	; (8006e40 <reg_wizchip_bus_cbfunc+0x78>)
 8006e30:	683b      	ldr	r3, [r7, #0]
 8006e32:	6253      	str	r3, [r2, #36]	; 0x24
}
 8006e34:	bf00      	nop
 8006e36:	3714      	adds	r7, #20
 8006e38:	46bd      	mov	sp, r7
 8006e3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e3e:	4770      	bx	lr
 8006e40:	20000010 	.word	0x20000010
 8006e44:	08006c75 	.word	0x08006c75
 8006e48:	08006c8f 	.word	0x08006c8f
 8006e4c:	08006cad 	.word	0x08006cad
 8006e50:	08006d15 	.word	0x08006d15

08006e54 <__errno>:
 8006e54:	4b01      	ldr	r3, [pc, #4]	; (8006e5c <__errno+0x8>)
 8006e56:	6818      	ldr	r0, [r3, #0]
 8006e58:	4770      	bx	lr
 8006e5a:	bf00      	nop
 8006e5c:	20000038 	.word	0x20000038

08006e60 <__libc_init_array>:
 8006e60:	b570      	push	{r4, r5, r6, lr}
 8006e62:	4d0d      	ldr	r5, [pc, #52]	; (8006e98 <__libc_init_array+0x38>)
 8006e64:	4c0d      	ldr	r4, [pc, #52]	; (8006e9c <__libc_init_array+0x3c>)
 8006e66:	1b64      	subs	r4, r4, r5
 8006e68:	10a4      	asrs	r4, r4, #2
 8006e6a:	2600      	movs	r6, #0
 8006e6c:	42a6      	cmp	r6, r4
 8006e6e:	d109      	bne.n	8006e84 <__libc_init_array+0x24>
 8006e70:	4d0b      	ldr	r5, [pc, #44]	; (8006ea0 <__libc_init_array+0x40>)
 8006e72:	4c0c      	ldr	r4, [pc, #48]	; (8006ea4 <__libc_init_array+0x44>)
 8006e74:	f000 ffec 	bl	8007e50 <_init>
 8006e78:	1b64      	subs	r4, r4, r5
 8006e7a:	10a4      	asrs	r4, r4, #2
 8006e7c:	2600      	movs	r6, #0
 8006e7e:	42a6      	cmp	r6, r4
 8006e80:	d105      	bne.n	8006e8e <__libc_init_array+0x2e>
 8006e82:	bd70      	pop	{r4, r5, r6, pc}
 8006e84:	f855 3b04 	ldr.w	r3, [r5], #4
 8006e88:	4798      	blx	r3
 8006e8a:	3601      	adds	r6, #1
 8006e8c:	e7ee      	b.n	8006e6c <__libc_init_array+0xc>
 8006e8e:	f855 3b04 	ldr.w	r3, [r5], #4
 8006e92:	4798      	blx	r3
 8006e94:	3601      	adds	r6, #1
 8006e96:	e7f2      	b.n	8006e7e <__libc_init_array+0x1e>
 8006e98:	0800807c 	.word	0x0800807c
 8006e9c:	0800807c 	.word	0x0800807c
 8006ea0:	0800807c 	.word	0x0800807c
 8006ea4:	08008080 	.word	0x08008080

08006ea8 <memset>:
 8006ea8:	4402      	add	r2, r0
 8006eaa:	4603      	mov	r3, r0
 8006eac:	4293      	cmp	r3, r2
 8006eae:	d100      	bne.n	8006eb2 <memset+0xa>
 8006eb0:	4770      	bx	lr
 8006eb2:	f803 1b01 	strb.w	r1, [r3], #1
 8006eb6:	e7f9      	b.n	8006eac <memset+0x4>

08006eb8 <iprintf>:
 8006eb8:	b40f      	push	{r0, r1, r2, r3}
 8006eba:	4b0a      	ldr	r3, [pc, #40]	; (8006ee4 <iprintf+0x2c>)
 8006ebc:	b513      	push	{r0, r1, r4, lr}
 8006ebe:	681c      	ldr	r4, [r3, #0]
 8006ec0:	b124      	cbz	r4, 8006ecc <iprintf+0x14>
 8006ec2:	69a3      	ldr	r3, [r4, #24]
 8006ec4:	b913      	cbnz	r3, 8006ecc <iprintf+0x14>
 8006ec6:	4620      	mov	r0, r4
 8006ec8:	f000 fa5e 	bl	8007388 <__sinit>
 8006ecc:	ab05      	add	r3, sp, #20
 8006ece:	9a04      	ldr	r2, [sp, #16]
 8006ed0:	68a1      	ldr	r1, [r4, #8]
 8006ed2:	9301      	str	r3, [sp, #4]
 8006ed4:	4620      	mov	r0, r4
 8006ed6:	f000 fc2f 	bl	8007738 <_vfiprintf_r>
 8006eda:	b002      	add	sp, #8
 8006edc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8006ee0:	b004      	add	sp, #16
 8006ee2:	4770      	bx	lr
 8006ee4:	20000038 	.word	0x20000038

08006ee8 <_puts_r>:
 8006ee8:	b570      	push	{r4, r5, r6, lr}
 8006eea:	460e      	mov	r6, r1
 8006eec:	4605      	mov	r5, r0
 8006eee:	b118      	cbz	r0, 8006ef8 <_puts_r+0x10>
 8006ef0:	6983      	ldr	r3, [r0, #24]
 8006ef2:	b90b      	cbnz	r3, 8006ef8 <_puts_r+0x10>
 8006ef4:	f000 fa48 	bl	8007388 <__sinit>
 8006ef8:	69ab      	ldr	r3, [r5, #24]
 8006efa:	68ac      	ldr	r4, [r5, #8]
 8006efc:	b913      	cbnz	r3, 8006f04 <_puts_r+0x1c>
 8006efe:	4628      	mov	r0, r5
 8006f00:	f000 fa42 	bl	8007388 <__sinit>
 8006f04:	4b2c      	ldr	r3, [pc, #176]	; (8006fb8 <_puts_r+0xd0>)
 8006f06:	429c      	cmp	r4, r3
 8006f08:	d120      	bne.n	8006f4c <_puts_r+0x64>
 8006f0a:	686c      	ldr	r4, [r5, #4]
 8006f0c:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8006f0e:	07db      	lsls	r3, r3, #31
 8006f10:	d405      	bmi.n	8006f1e <_puts_r+0x36>
 8006f12:	89a3      	ldrh	r3, [r4, #12]
 8006f14:	0598      	lsls	r0, r3, #22
 8006f16:	d402      	bmi.n	8006f1e <_puts_r+0x36>
 8006f18:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8006f1a:	f000 fad3 	bl	80074c4 <__retarget_lock_acquire_recursive>
 8006f1e:	89a3      	ldrh	r3, [r4, #12]
 8006f20:	0719      	lsls	r1, r3, #28
 8006f22:	d51d      	bpl.n	8006f60 <_puts_r+0x78>
 8006f24:	6923      	ldr	r3, [r4, #16]
 8006f26:	b1db      	cbz	r3, 8006f60 <_puts_r+0x78>
 8006f28:	3e01      	subs	r6, #1
 8006f2a:	68a3      	ldr	r3, [r4, #8]
 8006f2c:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 8006f30:	3b01      	subs	r3, #1
 8006f32:	60a3      	str	r3, [r4, #8]
 8006f34:	bb39      	cbnz	r1, 8006f86 <_puts_r+0x9e>
 8006f36:	2b00      	cmp	r3, #0
 8006f38:	da38      	bge.n	8006fac <_puts_r+0xc4>
 8006f3a:	4622      	mov	r2, r4
 8006f3c:	210a      	movs	r1, #10
 8006f3e:	4628      	mov	r0, r5
 8006f40:	f000 f848 	bl	8006fd4 <__swbuf_r>
 8006f44:	3001      	adds	r0, #1
 8006f46:	d011      	beq.n	8006f6c <_puts_r+0x84>
 8006f48:	250a      	movs	r5, #10
 8006f4a:	e011      	b.n	8006f70 <_puts_r+0x88>
 8006f4c:	4b1b      	ldr	r3, [pc, #108]	; (8006fbc <_puts_r+0xd4>)
 8006f4e:	429c      	cmp	r4, r3
 8006f50:	d101      	bne.n	8006f56 <_puts_r+0x6e>
 8006f52:	68ac      	ldr	r4, [r5, #8]
 8006f54:	e7da      	b.n	8006f0c <_puts_r+0x24>
 8006f56:	4b1a      	ldr	r3, [pc, #104]	; (8006fc0 <_puts_r+0xd8>)
 8006f58:	429c      	cmp	r4, r3
 8006f5a:	bf08      	it	eq
 8006f5c:	68ec      	ldreq	r4, [r5, #12]
 8006f5e:	e7d5      	b.n	8006f0c <_puts_r+0x24>
 8006f60:	4621      	mov	r1, r4
 8006f62:	4628      	mov	r0, r5
 8006f64:	f000 f888 	bl	8007078 <__swsetup_r>
 8006f68:	2800      	cmp	r0, #0
 8006f6a:	d0dd      	beq.n	8006f28 <_puts_r+0x40>
 8006f6c:	f04f 35ff 	mov.w	r5, #4294967295
 8006f70:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8006f72:	07da      	lsls	r2, r3, #31
 8006f74:	d405      	bmi.n	8006f82 <_puts_r+0x9a>
 8006f76:	89a3      	ldrh	r3, [r4, #12]
 8006f78:	059b      	lsls	r3, r3, #22
 8006f7a:	d402      	bmi.n	8006f82 <_puts_r+0x9a>
 8006f7c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8006f7e:	f000 faa2 	bl	80074c6 <__retarget_lock_release_recursive>
 8006f82:	4628      	mov	r0, r5
 8006f84:	bd70      	pop	{r4, r5, r6, pc}
 8006f86:	2b00      	cmp	r3, #0
 8006f88:	da04      	bge.n	8006f94 <_puts_r+0xac>
 8006f8a:	69a2      	ldr	r2, [r4, #24]
 8006f8c:	429a      	cmp	r2, r3
 8006f8e:	dc06      	bgt.n	8006f9e <_puts_r+0xb6>
 8006f90:	290a      	cmp	r1, #10
 8006f92:	d004      	beq.n	8006f9e <_puts_r+0xb6>
 8006f94:	6823      	ldr	r3, [r4, #0]
 8006f96:	1c5a      	adds	r2, r3, #1
 8006f98:	6022      	str	r2, [r4, #0]
 8006f9a:	7019      	strb	r1, [r3, #0]
 8006f9c:	e7c5      	b.n	8006f2a <_puts_r+0x42>
 8006f9e:	4622      	mov	r2, r4
 8006fa0:	4628      	mov	r0, r5
 8006fa2:	f000 f817 	bl	8006fd4 <__swbuf_r>
 8006fa6:	3001      	adds	r0, #1
 8006fa8:	d1bf      	bne.n	8006f2a <_puts_r+0x42>
 8006faa:	e7df      	b.n	8006f6c <_puts_r+0x84>
 8006fac:	6823      	ldr	r3, [r4, #0]
 8006fae:	250a      	movs	r5, #10
 8006fb0:	1c5a      	adds	r2, r3, #1
 8006fb2:	6022      	str	r2, [r4, #0]
 8006fb4:	701d      	strb	r5, [r3, #0]
 8006fb6:	e7db      	b.n	8006f70 <_puts_r+0x88>
 8006fb8:	08008000 	.word	0x08008000
 8006fbc:	08008020 	.word	0x08008020
 8006fc0:	08007fe0 	.word	0x08007fe0

08006fc4 <puts>:
 8006fc4:	4b02      	ldr	r3, [pc, #8]	; (8006fd0 <puts+0xc>)
 8006fc6:	4601      	mov	r1, r0
 8006fc8:	6818      	ldr	r0, [r3, #0]
 8006fca:	f7ff bf8d 	b.w	8006ee8 <_puts_r>
 8006fce:	bf00      	nop
 8006fd0:	20000038 	.word	0x20000038

08006fd4 <__swbuf_r>:
 8006fd4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006fd6:	460e      	mov	r6, r1
 8006fd8:	4614      	mov	r4, r2
 8006fda:	4605      	mov	r5, r0
 8006fdc:	b118      	cbz	r0, 8006fe6 <__swbuf_r+0x12>
 8006fde:	6983      	ldr	r3, [r0, #24]
 8006fe0:	b90b      	cbnz	r3, 8006fe6 <__swbuf_r+0x12>
 8006fe2:	f000 f9d1 	bl	8007388 <__sinit>
 8006fe6:	4b21      	ldr	r3, [pc, #132]	; (800706c <__swbuf_r+0x98>)
 8006fe8:	429c      	cmp	r4, r3
 8006fea:	d12b      	bne.n	8007044 <__swbuf_r+0x70>
 8006fec:	686c      	ldr	r4, [r5, #4]
 8006fee:	69a3      	ldr	r3, [r4, #24]
 8006ff0:	60a3      	str	r3, [r4, #8]
 8006ff2:	89a3      	ldrh	r3, [r4, #12]
 8006ff4:	071a      	lsls	r2, r3, #28
 8006ff6:	d52f      	bpl.n	8007058 <__swbuf_r+0x84>
 8006ff8:	6923      	ldr	r3, [r4, #16]
 8006ffa:	b36b      	cbz	r3, 8007058 <__swbuf_r+0x84>
 8006ffc:	6923      	ldr	r3, [r4, #16]
 8006ffe:	6820      	ldr	r0, [r4, #0]
 8007000:	1ac0      	subs	r0, r0, r3
 8007002:	6963      	ldr	r3, [r4, #20]
 8007004:	b2f6      	uxtb	r6, r6
 8007006:	4283      	cmp	r3, r0
 8007008:	4637      	mov	r7, r6
 800700a:	dc04      	bgt.n	8007016 <__swbuf_r+0x42>
 800700c:	4621      	mov	r1, r4
 800700e:	4628      	mov	r0, r5
 8007010:	f000 f926 	bl	8007260 <_fflush_r>
 8007014:	bb30      	cbnz	r0, 8007064 <__swbuf_r+0x90>
 8007016:	68a3      	ldr	r3, [r4, #8]
 8007018:	3b01      	subs	r3, #1
 800701a:	60a3      	str	r3, [r4, #8]
 800701c:	6823      	ldr	r3, [r4, #0]
 800701e:	1c5a      	adds	r2, r3, #1
 8007020:	6022      	str	r2, [r4, #0]
 8007022:	701e      	strb	r6, [r3, #0]
 8007024:	6963      	ldr	r3, [r4, #20]
 8007026:	3001      	adds	r0, #1
 8007028:	4283      	cmp	r3, r0
 800702a:	d004      	beq.n	8007036 <__swbuf_r+0x62>
 800702c:	89a3      	ldrh	r3, [r4, #12]
 800702e:	07db      	lsls	r3, r3, #31
 8007030:	d506      	bpl.n	8007040 <__swbuf_r+0x6c>
 8007032:	2e0a      	cmp	r6, #10
 8007034:	d104      	bne.n	8007040 <__swbuf_r+0x6c>
 8007036:	4621      	mov	r1, r4
 8007038:	4628      	mov	r0, r5
 800703a:	f000 f911 	bl	8007260 <_fflush_r>
 800703e:	b988      	cbnz	r0, 8007064 <__swbuf_r+0x90>
 8007040:	4638      	mov	r0, r7
 8007042:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8007044:	4b0a      	ldr	r3, [pc, #40]	; (8007070 <__swbuf_r+0x9c>)
 8007046:	429c      	cmp	r4, r3
 8007048:	d101      	bne.n	800704e <__swbuf_r+0x7a>
 800704a:	68ac      	ldr	r4, [r5, #8]
 800704c:	e7cf      	b.n	8006fee <__swbuf_r+0x1a>
 800704e:	4b09      	ldr	r3, [pc, #36]	; (8007074 <__swbuf_r+0xa0>)
 8007050:	429c      	cmp	r4, r3
 8007052:	bf08      	it	eq
 8007054:	68ec      	ldreq	r4, [r5, #12]
 8007056:	e7ca      	b.n	8006fee <__swbuf_r+0x1a>
 8007058:	4621      	mov	r1, r4
 800705a:	4628      	mov	r0, r5
 800705c:	f000 f80c 	bl	8007078 <__swsetup_r>
 8007060:	2800      	cmp	r0, #0
 8007062:	d0cb      	beq.n	8006ffc <__swbuf_r+0x28>
 8007064:	f04f 37ff 	mov.w	r7, #4294967295
 8007068:	e7ea      	b.n	8007040 <__swbuf_r+0x6c>
 800706a:	bf00      	nop
 800706c:	08008000 	.word	0x08008000
 8007070:	08008020 	.word	0x08008020
 8007074:	08007fe0 	.word	0x08007fe0

08007078 <__swsetup_r>:
 8007078:	4b32      	ldr	r3, [pc, #200]	; (8007144 <__swsetup_r+0xcc>)
 800707a:	b570      	push	{r4, r5, r6, lr}
 800707c:	681d      	ldr	r5, [r3, #0]
 800707e:	4606      	mov	r6, r0
 8007080:	460c      	mov	r4, r1
 8007082:	b125      	cbz	r5, 800708e <__swsetup_r+0x16>
 8007084:	69ab      	ldr	r3, [r5, #24]
 8007086:	b913      	cbnz	r3, 800708e <__swsetup_r+0x16>
 8007088:	4628      	mov	r0, r5
 800708a:	f000 f97d 	bl	8007388 <__sinit>
 800708e:	4b2e      	ldr	r3, [pc, #184]	; (8007148 <__swsetup_r+0xd0>)
 8007090:	429c      	cmp	r4, r3
 8007092:	d10f      	bne.n	80070b4 <__swsetup_r+0x3c>
 8007094:	686c      	ldr	r4, [r5, #4]
 8007096:	89a3      	ldrh	r3, [r4, #12]
 8007098:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800709c:	0719      	lsls	r1, r3, #28
 800709e:	d42c      	bmi.n	80070fa <__swsetup_r+0x82>
 80070a0:	06dd      	lsls	r5, r3, #27
 80070a2:	d411      	bmi.n	80070c8 <__swsetup_r+0x50>
 80070a4:	2309      	movs	r3, #9
 80070a6:	6033      	str	r3, [r6, #0]
 80070a8:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 80070ac:	81a3      	strh	r3, [r4, #12]
 80070ae:	f04f 30ff 	mov.w	r0, #4294967295
 80070b2:	e03e      	b.n	8007132 <__swsetup_r+0xba>
 80070b4:	4b25      	ldr	r3, [pc, #148]	; (800714c <__swsetup_r+0xd4>)
 80070b6:	429c      	cmp	r4, r3
 80070b8:	d101      	bne.n	80070be <__swsetup_r+0x46>
 80070ba:	68ac      	ldr	r4, [r5, #8]
 80070bc:	e7eb      	b.n	8007096 <__swsetup_r+0x1e>
 80070be:	4b24      	ldr	r3, [pc, #144]	; (8007150 <__swsetup_r+0xd8>)
 80070c0:	429c      	cmp	r4, r3
 80070c2:	bf08      	it	eq
 80070c4:	68ec      	ldreq	r4, [r5, #12]
 80070c6:	e7e6      	b.n	8007096 <__swsetup_r+0x1e>
 80070c8:	0758      	lsls	r0, r3, #29
 80070ca:	d512      	bpl.n	80070f2 <__swsetup_r+0x7a>
 80070cc:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80070ce:	b141      	cbz	r1, 80070e2 <__swsetup_r+0x6a>
 80070d0:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80070d4:	4299      	cmp	r1, r3
 80070d6:	d002      	beq.n	80070de <__swsetup_r+0x66>
 80070d8:	4630      	mov	r0, r6
 80070da:	f000 fa59 	bl	8007590 <_free_r>
 80070de:	2300      	movs	r3, #0
 80070e0:	6363      	str	r3, [r4, #52]	; 0x34
 80070e2:	89a3      	ldrh	r3, [r4, #12]
 80070e4:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 80070e8:	81a3      	strh	r3, [r4, #12]
 80070ea:	2300      	movs	r3, #0
 80070ec:	6063      	str	r3, [r4, #4]
 80070ee:	6923      	ldr	r3, [r4, #16]
 80070f0:	6023      	str	r3, [r4, #0]
 80070f2:	89a3      	ldrh	r3, [r4, #12]
 80070f4:	f043 0308 	orr.w	r3, r3, #8
 80070f8:	81a3      	strh	r3, [r4, #12]
 80070fa:	6923      	ldr	r3, [r4, #16]
 80070fc:	b94b      	cbnz	r3, 8007112 <__swsetup_r+0x9a>
 80070fe:	89a3      	ldrh	r3, [r4, #12]
 8007100:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8007104:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8007108:	d003      	beq.n	8007112 <__swsetup_r+0x9a>
 800710a:	4621      	mov	r1, r4
 800710c:	4630      	mov	r0, r6
 800710e:	f000 f9ff 	bl	8007510 <__smakebuf_r>
 8007112:	89a0      	ldrh	r0, [r4, #12]
 8007114:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8007118:	f010 0301 	ands.w	r3, r0, #1
 800711c:	d00a      	beq.n	8007134 <__swsetup_r+0xbc>
 800711e:	2300      	movs	r3, #0
 8007120:	60a3      	str	r3, [r4, #8]
 8007122:	6963      	ldr	r3, [r4, #20]
 8007124:	425b      	negs	r3, r3
 8007126:	61a3      	str	r3, [r4, #24]
 8007128:	6923      	ldr	r3, [r4, #16]
 800712a:	b943      	cbnz	r3, 800713e <__swsetup_r+0xc6>
 800712c:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8007130:	d1ba      	bne.n	80070a8 <__swsetup_r+0x30>
 8007132:	bd70      	pop	{r4, r5, r6, pc}
 8007134:	0781      	lsls	r1, r0, #30
 8007136:	bf58      	it	pl
 8007138:	6963      	ldrpl	r3, [r4, #20]
 800713a:	60a3      	str	r3, [r4, #8]
 800713c:	e7f4      	b.n	8007128 <__swsetup_r+0xb0>
 800713e:	2000      	movs	r0, #0
 8007140:	e7f7      	b.n	8007132 <__swsetup_r+0xba>
 8007142:	bf00      	nop
 8007144:	20000038 	.word	0x20000038
 8007148:	08008000 	.word	0x08008000
 800714c:	08008020 	.word	0x08008020
 8007150:	08007fe0 	.word	0x08007fe0

08007154 <__sflush_r>:
 8007154:	898a      	ldrh	r2, [r1, #12]
 8007156:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800715a:	4605      	mov	r5, r0
 800715c:	0710      	lsls	r0, r2, #28
 800715e:	460c      	mov	r4, r1
 8007160:	d458      	bmi.n	8007214 <__sflush_r+0xc0>
 8007162:	684b      	ldr	r3, [r1, #4]
 8007164:	2b00      	cmp	r3, #0
 8007166:	dc05      	bgt.n	8007174 <__sflush_r+0x20>
 8007168:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800716a:	2b00      	cmp	r3, #0
 800716c:	dc02      	bgt.n	8007174 <__sflush_r+0x20>
 800716e:	2000      	movs	r0, #0
 8007170:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8007174:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8007176:	2e00      	cmp	r6, #0
 8007178:	d0f9      	beq.n	800716e <__sflush_r+0x1a>
 800717a:	2300      	movs	r3, #0
 800717c:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8007180:	682f      	ldr	r7, [r5, #0]
 8007182:	602b      	str	r3, [r5, #0]
 8007184:	d032      	beq.n	80071ec <__sflush_r+0x98>
 8007186:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8007188:	89a3      	ldrh	r3, [r4, #12]
 800718a:	075a      	lsls	r2, r3, #29
 800718c:	d505      	bpl.n	800719a <__sflush_r+0x46>
 800718e:	6863      	ldr	r3, [r4, #4]
 8007190:	1ac0      	subs	r0, r0, r3
 8007192:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8007194:	b10b      	cbz	r3, 800719a <__sflush_r+0x46>
 8007196:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8007198:	1ac0      	subs	r0, r0, r3
 800719a:	2300      	movs	r3, #0
 800719c:	4602      	mov	r2, r0
 800719e:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80071a0:	6a21      	ldr	r1, [r4, #32]
 80071a2:	4628      	mov	r0, r5
 80071a4:	47b0      	blx	r6
 80071a6:	1c43      	adds	r3, r0, #1
 80071a8:	89a3      	ldrh	r3, [r4, #12]
 80071aa:	d106      	bne.n	80071ba <__sflush_r+0x66>
 80071ac:	6829      	ldr	r1, [r5, #0]
 80071ae:	291d      	cmp	r1, #29
 80071b0:	d82c      	bhi.n	800720c <__sflush_r+0xb8>
 80071b2:	4a2a      	ldr	r2, [pc, #168]	; (800725c <__sflush_r+0x108>)
 80071b4:	40ca      	lsrs	r2, r1
 80071b6:	07d6      	lsls	r6, r2, #31
 80071b8:	d528      	bpl.n	800720c <__sflush_r+0xb8>
 80071ba:	2200      	movs	r2, #0
 80071bc:	6062      	str	r2, [r4, #4]
 80071be:	04d9      	lsls	r1, r3, #19
 80071c0:	6922      	ldr	r2, [r4, #16]
 80071c2:	6022      	str	r2, [r4, #0]
 80071c4:	d504      	bpl.n	80071d0 <__sflush_r+0x7c>
 80071c6:	1c42      	adds	r2, r0, #1
 80071c8:	d101      	bne.n	80071ce <__sflush_r+0x7a>
 80071ca:	682b      	ldr	r3, [r5, #0]
 80071cc:	b903      	cbnz	r3, 80071d0 <__sflush_r+0x7c>
 80071ce:	6560      	str	r0, [r4, #84]	; 0x54
 80071d0:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80071d2:	602f      	str	r7, [r5, #0]
 80071d4:	2900      	cmp	r1, #0
 80071d6:	d0ca      	beq.n	800716e <__sflush_r+0x1a>
 80071d8:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80071dc:	4299      	cmp	r1, r3
 80071de:	d002      	beq.n	80071e6 <__sflush_r+0x92>
 80071e0:	4628      	mov	r0, r5
 80071e2:	f000 f9d5 	bl	8007590 <_free_r>
 80071e6:	2000      	movs	r0, #0
 80071e8:	6360      	str	r0, [r4, #52]	; 0x34
 80071ea:	e7c1      	b.n	8007170 <__sflush_r+0x1c>
 80071ec:	6a21      	ldr	r1, [r4, #32]
 80071ee:	2301      	movs	r3, #1
 80071f0:	4628      	mov	r0, r5
 80071f2:	47b0      	blx	r6
 80071f4:	1c41      	adds	r1, r0, #1
 80071f6:	d1c7      	bne.n	8007188 <__sflush_r+0x34>
 80071f8:	682b      	ldr	r3, [r5, #0]
 80071fa:	2b00      	cmp	r3, #0
 80071fc:	d0c4      	beq.n	8007188 <__sflush_r+0x34>
 80071fe:	2b1d      	cmp	r3, #29
 8007200:	d001      	beq.n	8007206 <__sflush_r+0xb2>
 8007202:	2b16      	cmp	r3, #22
 8007204:	d101      	bne.n	800720a <__sflush_r+0xb6>
 8007206:	602f      	str	r7, [r5, #0]
 8007208:	e7b1      	b.n	800716e <__sflush_r+0x1a>
 800720a:	89a3      	ldrh	r3, [r4, #12]
 800720c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8007210:	81a3      	strh	r3, [r4, #12]
 8007212:	e7ad      	b.n	8007170 <__sflush_r+0x1c>
 8007214:	690f      	ldr	r7, [r1, #16]
 8007216:	2f00      	cmp	r7, #0
 8007218:	d0a9      	beq.n	800716e <__sflush_r+0x1a>
 800721a:	0793      	lsls	r3, r2, #30
 800721c:	680e      	ldr	r6, [r1, #0]
 800721e:	bf08      	it	eq
 8007220:	694b      	ldreq	r3, [r1, #20]
 8007222:	600f      	str	r7, [r1, #0]
 8007224:	bf18      	it	ne
 8007226:	2300      	movne	r3, #0
 8007228:	eba6 0807 	sub.w	r8, r6, r7
 800722c:	608b      	str	r3, [r1, #8]
 800722e:	f1b8 0f00 	cmp.w	r8, #0
 8007232:	dd9c      	ble.n	800716e <__sflush_r+0x1a>
 8007234:	6a21      	ldr	r1, [r4, #32]
 8007236:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8007238:	4643      	mov	r3, r8
 800723a:	463a      	mov	r2, r7
 800723c:	4628      	mov	r0, r5
 800723e:	47b0      	blx	r6
 8007240:	2800      	cmp	r0, #0
 8007242:	dc06      	bgt.n	8007252 <__sflush_r+0xfe>
 8007244:	89a3      	ldrh	r3, [r4, #12]
 8007246:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800724a:	81a3      	strh	r3, [r4, #12]
 800724c:	f04f 30ff 	mov.w	r0, #4294967295
 8007250:	e78e      	b.n	8007170 <__sflush_r+0x1c>
 8007252:	4407      	add	r7, r0
 8007254:	eba8 0800 	sub.w	r8, r8, r0
 8007258:	e7e9      	b.n	800722e <__sflush_r+0xda>
 800725a:	bf00      	nop
 800725c:	20400001 	.word	0x20400001

08007260 <_fflush_r>:
 8007260:	b538      	push	{r3, r4, r5, lr}
 8007262:	690b      	ldr	r3, [r1, #16]
 8007264:	4605      	mov	r5, r0
 8007266:	460c      	mov	r4, r1
 8007268:	b913      	cbnz	r3, 8007270 <_fflush_r+0x10>
 800726a:	2500      	movs	r5, #0
 800726c:	4628      	mov	r0, r5
 800726e:	bd38      	pop	{r3, r4, r5, pc}
 8007270:	b118      	cbz	r0, 800727a <_fflush_r+0x1a>
 8007272:	6983      	ldr	r3, [r0, #24]
 8007274:	b90b      	cbnz	r3, 800727a <_fflush_r+0x1a>
 8007276:	f000 f887 	bl	8007388 <__sinit>
 800727a:	4b14      	ldr	r3, [pc, #80]	; (80072cc <_fflush_r+0x6c>)
 800727c:	429c      	cmp	r4, r3
 800727e:	d11b      	bne.n	80072b8 <_fflush_r+0x58>
 8007280:	686c      	ldr	r4, [r5, #4]
 8007282:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8007286:	2b00      	cmp	r3, #0
 8007288:	d0ef      	beq.n	800726a <_fflush_r+0xa>
 800728a:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800728c:	07d0      	lsls	r0, r2, #31
 800728e:	d404      	bmi.n	800729a <_fflush_r+0x3a>
 8007290:	0599      	lsls	r1, r3, #22
 8007292:	d402      	bmi.n	800729a <_fflush_r+0x3a>
 8007294:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8007296:	f000 f915 	bl	80074c4 <__retarget_lock_acquire_recursive>
 800729a:	4628      	mov	r0, r5
 800729c:	4621      	mov	r1, r4
 800729e:	f7ff ff59 	bl	8007154 <__sflush_r>
 80072a2:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80072a4:	07da      	lsls	r2, r3, #31
 80072a6:	4605      	mov	r5, r0
 80072a8:	d4e0      	bmi.n	800726c <_fflush_r+0xc>
 80072aa:	89a3      	ldrh	r3, [r4, #12]
 80072ac:	059b      	lsls	r3, r3, #22
 80072ae:	d4dd      	bmi.n	800726c <_fflush_r+0xc>
 80072b0:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80072b2:	f000 f908 	bl	80074c6 <__retarget_lock_release_recursive>
 80072b6:	e7d9      	b.n	800726c <_fflush_r+0xc>
 80072b8:	4b05      	ldr	r3, [pc, #20]	; (80072d0 <_fflush_r+0x70>)
 80072ba:	429c      	cmp	r4, r3
 80072bc:	d101      	bne.n	80072c2 <_fflush_r+0x62>
 80072be:	68ac      	ldr	r4, [r5, #8]
 80072c0:	e7df      	b.n	8007282 <_fflush_r+0x22>
 80072c2:	4b04      	ldr	r3, [pc, #16]	; (80072d4 <_fflush_r+0x74>)
 80072c4:	429c      	cmp	r4, r3
 80072c6:	bf08      	it	eq
 80072c8:	68ec      	ldreq	r4, [r5, #12]
 80072ca:	e7da      	b.n	8007282 <_fflush_r+0x22>
 80072cc:	08008000 	.word	0x08008000
 80072d0:	08008020 	.word	0x08008020
 80072d4:	08007fe0 	.word	0x08007fe0

080072d8 <std>:
 80072d8:	2300      	movs	r3, #0
 80072da:	b510      	push	{r4, lr}
 80072dc:	4604      	mov	r4, r0
 80072de:	e9c0 3300 	strd	r3, r3, [r0]
 80072e2:	e9c0 3304 	strd	r3, r3, [r0, #16]
 80072e6:	6083      	str	r3, [r0, #8]
 80072e8:	8181      	strh	r1, [r0, #12]
 80072ea:	6643      	str	r3, [r0, #100]	; 0x64
 80072ec:	81c2      	strh	r2, [r0, #14]
 80072ee:	6183      	str	r3, [r0, #24]
 80072f0:	4619      	mov	r1, r3
 80072f2:	2208      	movs	r2, #8
 80072f4:	305c      	adds	r0, #92	; 0x5c
 80072f6:	f7ff fdd7 	bl	8006ea8 <memset>
 80072fa:	4b05      	ldr	r3, [pc, #20]	; (8007310 <std+0x38>)
 80072fc:	6263      	str	r3, [r4, #36]	; 0x24
 80072fe:	4b05      	ldr	r3, [pc, #20]	; (8007314 <std+0x3c>)
 8007300:	62a3      	str	r3, [r4, #40]	; 0x28
 8007302:	4b05      	ldr	r3, [pc, #20]	; (8007318 <std+0x40>)
 8007304:	62e3      	str	r3, [r4, #44]	; 0x2c
 8007306:	4b05      	ldr	r3, [pc, #20]	; (800731c <std+0x44>)
 8007308:	6224      	str	r4, [r4, #32]
 800730a:	6323      	str	r3, [r4, #48]	; 0x30
 800730c:	bd10      	pop	{r4, pc}
 800730e:	bf00      	nop
 8007310:	08007ce1 	.word	0x08007ce1
 8007314:	08007d03 	.word	0x08007d03
 8007318:	08007d3b 	.word	0x08007d3b
 800731c:	08007d5f 	.word	0x08007d5f

08007320 <_cleanup_r>:
 8007320:	4901      	ldr	r1, [pc, #4]	; (8007328 <_cleanup_r+0x8>)
 8007322:	f000 b8af 	b.w	8007484 <_fwalk_reent>
 8007326:	bf00      	nop
 8007328:	08007261 	.word	0x08007261

0800732c <__sfmoreglue>:
 800732c:	b570      	push	{r4, r5, r6, lr}
 800732e:	1e4a      	subs	r2, r1, #1
 8007330:	2568      	movs	r5, #104	; 0x68
 8007332:	4355      	muls	r5, r2
 8007334:	460e      	mov	r6, r1
 8007336:	f105 0174 	add.w	r1, r5, #116	; 0x74
 800733a:	f000 f979 	bl	8007630 <_malloc_r>
 800733e:	4604      	mov	r4, r0
 8007340:	b140      	cbz	r0, 8007354 <__sfmoreglue+0x28>
 8007342:	2100      	movs	r1, #0
 8007344:	e9c0 1600 	strd	r1, r6, [r0]
 8007348:	300c      	adds	r0, #12
 800734a:	60a0      	str	r0, [r4, #8]
 800734c:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8007350:	f7ff fdaa 	bl	8006ea8 <memset>
 8007354:	4620      	mov	r0, r4
 8007356:	bd70      	pop	{r4, r5, r6, pc}

08007358 <__sfp_lock_acquire>:
 8007358:	4801      	ldr	r0, [pc, #4]	; (8007360 <__sfp_lock_acquire+0x8>)
 800735a:	f000 b8b3 	b.w	80074c4 <__retarget_lock_acquire_recursive>
 800735e:	bf00      	nop
 8007360:	20002430 	.word	0x20002430

08007364 <__sfp_lock_release>:
 8007364:	4801      	ldr	r0, [pc, #4]	; (800736c <__sfp_lock_release+0x8>)
 8007366:	f000 b8ae 	b.w	80074c6 <__retarget_lock_release_recursive>
 800736a:	bf00      	nop
 800736c:	20002430 	.word	0x20002430

08007370 <__sinit_lock_acquire>:
 8007370:	4801      	ldr	r0, [pc, #4]	; (8007378 <__sinit_lock_acquire+0x8>)
 8007372:	f000 b8a7 	b.w	80074c4 <__retarget_lock_acquire_recursive>
 8007376:	bf00      	nop
 8007378:	2000242b 	.word	0x2000242b

0800737c <__sinit_lock_release>:
 800737c:	4801      	ldr	r0, [pc, #4]	; (8007384 <__sinit_lock_release+0x8>)
 800737e:	f000 b8a2 	b.w	80074c6 <__retarget_lock_release_recursive>
 8007382:	bf00      	nop
 8007384:	2000242b 	.word	0x2000242b

08007388 <__sinit>:
 8007388:	b510      	push	{r4, lr}
 800738a:	4604      	mov	r4, r0
 800738c:	f7ff fff0 	bl	8007370 <__sinit_lock_acquire>
 8007390:	69a3      	ldr	r3, [r4, #24]
 8007392:	b11b      	cbz	r3, 800739c <__sinit+0x14>
 8007394:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8007398:	f7ff bff0 	b.w	800737c <__sinit_lock_release>
 800739c:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 80073a0:	6523      	str	r3, [r4, #80]	; 0x50
 80073a2:	4b13      	ldr	r3, [pc, #76]	; (80073f0 <__sinit+0x68>)
 80073a4:	4a13      	ldr	r2, [pc, #76]	; (80073f4 <__sinit+0x6c>)
 80073a6:	681b      	ldr	r3, [r3, #0]
 80073a8:	62a2      	str	r2, [r4, #40]	; 0x28
 80073aa:	42a3      	cmp	r3, r4
 80073ac:	bf04      	itt	eq
 80073ae:	2301      	moveq	r3, #1
 80073b0:	61a3      	streq	r3, [r4, #24]
 80073b2:	4620      	mov	r0, r4
 80073b4:	f000 f820 	bl	80073f8 <__sfp>
 80073b8:	6060      	str	r0, [r4, #4]
 80073ba:	4620      	mov	r0, r4
 80073bc:	f000 f81c 	bl	80073f8 <__sfp>
 80073c0:	60a0      	str	r0, [r4, #8]
 80073c2:	4620      	mov	r0, r4
 80073c4:	f000 f818 	bl	80073f8 <__sfp>
 80073c8:	2200      	movs	r2, #0
 80073ca:	60e0      	str	r0, [r4, #12]
 80073cc:	2104      	movs	r1, #4
 80073ce:	6860      	ldr	r0, [r4, #4]
 80073d0:	f7ff ff82 	bl	80072d8 <std>
 80073d4:	68a0      	ldr	r0, [r4, #8]
 80073d6:	2201      	movs	r2, #1
 80073d8:	2109      	movs	r1, #9
 80073da:	f7ff ff7d 	bl	80072d8 <std>
 80073de:	68e0      	ldr	r0, [r4, #12]
 80073e0:	2202      	movs	r2, #2
 80073e2:	2112      	movs	r1, #18
 80073e4:	f7ff ff78 	bl	80072d8 <std>
 80073e8:	2301      	movs	r3, #1
 80073ea:	61a3      	str	r3, [r4, #24]
 80073ec:	e7d2      	b.n	8007394 <__sinit+0xc>
 80073ee:	bf00      	nop
 80073f0:	08007fdc 	.word	0x08007fdc
 80073f4:	08007321 	.word	0x08007321

080073f8 <__sfp>:
 80073f8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80073fa:	4607      	mov	r7, r0
 80073fc:	f7ff ffac 	bl	8007358 <__sfp_lock_acquire>
 8007400:	4b1e      	ldr	r3, [pc, #120]	; (800747c <__sfp+0x84>)
 8007402:	681e      	ldr	r6, [r3, #0]
 8007404:	69b3      	ldr	r3, [r6, #24]
 8007406:	b913      	cbnz	r3, 800740e <__sfp+0x16>
 8007408:	4630      	mov	r0, r6
 800740a:	f7ff ffbd 	bl	8007388 <__sinit>
 800740e:	3648      	adds	r6, #72	; 0x48
 8007410:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8007414:	3b01      	subs	r3, #1
 8007416:	d503      	bpl.n	8007420 <__sfp+0x28>
 8007418:	6833      	ldr	r3, [r6, #0]
 800741a:	b30b      	cbz	r3, 8007460 <__sfp+0x68>
 800741c:	6836      	ldr	r6, [r6, #0]
 800741e:	e7f7      	b.n	8007410 <__sfp+0x18>
 8007420:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8007424:	b9d5      	cbnz	r5, 800745c <__sfp+0x64>
 8007426:	4b16      	ldr	r3, [pc, #88]	; (8007480 <__sfp+0x88>)
 8007428:	60e3      	str	r3, [r4, #12]
 800742a:	f104 0058 	add.w	r0, r4, #88	; 0x58
 800742e:	6665      	str	r5, [r4, #100]	; 0x64
 8007430:	f000 f847 	bl	80074c2 <__retarget_lock_init_recursive>
 8007434:	f7ff ff96 	bl	8007364 <__sfp_lock_release>
 8007438:	e9c4 5501 	strd	r5, r5, [r4, #4]
 800743c:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8007440:	6025      	str	r5, [r4, #0]
 8007442:	61a5      	str	r5, [r4, #24]
 8007444:	2208      	movs	r2, #8
 8007446:	4629      	mov	r1, r5
 8007448:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 800744c:	f7ff fd2c 	bl	8006ea8 <memset>
 8007450:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8007454:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8007458:	4620      	mov	r0, r4
 800745a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800745c:	3468      	adds	r4, #104	; 0x68
 800745e:	e7d9      	b.n	8007414 <__sfp+0x1c>
 8007460:	2104      	movs	r1, #4
 8007462:	4638      	mov	r0, r7
 8007464:	f7ff ff62 	bl	800732c <__sfmoreglue>
 8007468:	4604      	mov	r4, r0
 800746a:	6030      	str	r0, [r6, #0]
 800746c:	2800      	cmp	r0, #0
 800746e:	d1d5      	bne.n	800741c <__sfp+0x24>
 8007470:	f7ff ff78 	bl	8007364 <__sfp_lock_release>
 8007474:	230c      	movs	r3, #12
 8007476:	603b      	str	r3, [r7, #0]
 8007478:	e7ee      	b.n	8007458 <__sfp+0x60>
 800747a:	bf00      	nop
 800747c:	08007fdc 	.word	0x08007fdc
 8007480:	ffff0001 	.word	0xffff0001

08007484 <_fwalk_reent>:
 8007484:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8007488:	4606      	mov	r6, r0
 800748a:	4688      	mov	r8, r1
 800748c:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8007490:	2700      	movs	r7, #0
 8007492:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8007496:	f1b9 0901 	subs.w	r9, r9, #1
 800749a:	d505      	bpl.n	80074a8 <_fwalk_reent+0x24>
 800749c:	6824      	ldr	r4, [r4, #0]
 800749e:	2c00      	cmp	r4, #0
 80074a0:	d1f7      	bne.n	8007492 <_fwalk_reent+0xe>
 80074a2:	4638      	mov	r0, r7
 80074a4:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80074a8:	89ab      	ldrh	r3, [r5, #12]
 80074aa:	2b01      	cmp	r3, #1
 80074ac:	d907      	bls.n	80074be <_fwalk_reent+0x3a>
 80074ae:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 80074b2:	3301      	adds	r3, #1
 80074b4:	d003      	beq.n	80074be <_fwalk_reent+0x3a>
 80074b6:	4629      	mov	r1, r5
 80074b8:	4630      	mov	r0, r6
 80074ba:	47c0      	blx	r8
 80074bc:	4307      	orrs	r7, r0
 80074be:	3568      	adds	r5, #104	; 0x68
 80074c0:	e7e9      	b.n	8007496 <_fwalk_reent+0x12>

080074c2 <__retarget_lock_init_recursive>:
 80074c2:	4770      	bx	lr

080074c4 <__retarget_lock_acquire_recursive>:
 80074c4:	4770      	bx	lr

080074c6 <__retarget_lock_release_recursive>:
 80074c6:	4770      	bx	lr

080074c8 <__swhatbuf_r>:
 80074c8:	b570      	push	{r4, r5, r6, lr}
 80074ca:	460e      	mov	r6, r1
 80074cc:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80074d0:	2900      	cmp	r1, #0
 80074d2:	b096      	sub	sp, #88	; 0x58
 80074d4:	4614      	mov	r4, r2
 80074d6:	461d      	mov	r5, r3
 80074d8:	da07      	bge.n	80074ea <__swhatbuf_r+0x22>
 80074da:	2300      	movs	r3, #0
 80074dc:	602b      	str	r3, [r5, #0]
 80074de:	89b3      	ldrh	r3, [r6, #12]
 80074e0:	061a      	lsls	r2, r3, #24
 80074e2:	d410      	bmi.n	8007506 <__swhatbuf_r+0x3e>
 80074e4:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80074e8:	e00e      	b.n	8007508 <__swhatbuf_r+0x40>
 80074ea:	466a      	mov	r2, sp
 80074ec:	f000 fc5e 	bl	8007dac <_fstat_r>
 80074f0:	2800      	cmp	r0, #0
 80074f2:	dbf2      	blt.n	80074da <__swhatbuf_r+0x12>
 80074f4:	9a01      	ldr	r2, [sp, #4]
 80074f6:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 80074fa:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 80074fe:	425a      	negs	r2, r3
 8007500:	415a      	adcs	r2, r3
 8007502:	602a      	str	r2, [r5, #0]
 8007504:	e7ee      	b.n	80074e4 <__swhatbuf_r+0x1c>
 8007506:	2340      	movs	r3, #64	; 0x40
 8007508:	2000      	movs	r0, #0
 800750a:	6023      	str	r3, [r4, #0]
 800750c:	b016      	add	sp, #88	; 0x58
 800750e:	bd70      	pop	{r4, r5, r6, pc}

08007510 <__smakebuf_r>:
 8007510:	898b      	ldrh	r3, [r1, #12]
 8007512:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8007514:	079d      	lsls	r5, r3, #30
 8007516:	4606      	mov	r6, r0
 8007518:	460c      	mov	r4, r1
 800751a:	d507      	bpl.n	800752c <__smakebuf_r+0x1c>
 800751c:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8007520:	6023      	str	r3, [r4, #0]
 8007522:	6123      	str	r3, [r4, #16]
 8007524:	2301      	movs	r3, #1
 8007526:	6163      	str	r3, [r4, #20]
 8007528:	b002      	add	sp, #8
 800752a:	bd70      	pop	{r4, r5, r6, pc}
 800752c:	ab01      	add	r3, sp, #4
 800752e:	466a      	mov	r2, sp
 8007530:	f7ff ffca 	bl	80074c8 <__swhatbuf_r>
 8007534:	9900      	ldr	r1, [sp, #0]
 8007536:	4605      	mov	r5, r0
 8007538:	4630      	mov	r0, r6
 800753a:	f000 f879 	bl	8007630 <_malloc_r>
 800753e:	b948      	cbnz	r0, 8007554 <__smakebuf_r+0x44>
 8007540:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8007544:	059a      	lsls	r2, r3, #22
 8007546:	d4ef      	bmi.n	8007528 <__smakebuf_r+0x18>
 8007548:	f023 0303 	bic.w	r3, r3, #3
 800754c:	f043 0302 	orr.w	r3, r3, #2
 8007550:	81a3      	strh	r3, [r4, #12]
 8007552:	e7e3      	b.n	800751c <__smakebuf_r+0xc>
 8007554:	4b0d      	ldr	r3, [pc, #52]	; (800758c <__smakebuf_r+0x7c>)
 8007556:	62b3      	str	r3, [r6, #40]	; 0x28
 8007558:	89a3      	ldrh	r3, [r4, #12]
 800755a:	6020      	str	r0, [r4, #0]
 800755c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007560:	81a3      	strh	r3, [r4, #12]
 8007562:	9b00      	ldr	r3, [sp, #0]
 8007564:	6163      	str	r3, [r4, #20]
 8007566:	9b01      	ldr	r3, [sp, #4]
 8007568:	6120      	str	r0, [r4, #16]
 800756a:	b15b      	cbz	r3, 8007584 <__smakebuf_r+0x74>
 800756c:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8007570:	4630      	mov	r0, r6
 8007572:	f000 fc2d 	bl	8007dd0 <_isatty_r>
 8007576:	b128      	cbz	r0, 8007584 <__smakebuf_r+0x74>
 8007578:	89a3      	ldrh	r3, [r4, #12]
 800757a:	f023 0303 	bic.w	r3, r3, #3
 800757e:	f043 0301 	orr.w	r3, r3, #1
 8007582:	81a3      	strh	r3, [r4, #12]
 8007584:	89a0      	ldrh	r0, [r4, #12]
 8007586:	4305      	orrs	r5, r0
 8007588:	81a5      	strh	r5, [r4, #12]
 800758a:	e7cd      	b.n	8007528 <__smakebuf_r+0x18>
 800758c:	08007321 	.word	0x08007321

08007590 <_free_r>:
 8007590:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8007592:	2900      	cmp	r1, #0
 8007594:	d048      	beq.n	8007628 <_free_r+0x98>
 8007596:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800759a:	9001      	str	r0, [sp, #4]
 800759c:	2b00      	cmp	r3, #0
 800759e:	f1a1 0404 	sub.w	r4, r1, #4
 80075a2:	bfb8      	it	lt
 80075a4:	18e4      	addlt	r4, r4, r3
 80075a6:	f000 fc35 	bl	8007e14 <__malloc_lock>
 80075aa:	4a20      	ldr	r2, [pc, #128]	; (800762c <_free_r+0x9c>)
 80075ac:	9801      	ldr	r0, [sp, #4]
 80075ae:	6813      	ldr	r3, [r2, #0]
 80075b0:	4615      	mov	r5, r2
 80075b2:	b933      	cbnz	r3, 80075c2 <_free_r+0x32>
 80075b4:	6063      	str	r3, [r4, #4]
 80075b6:	6014      	str	r4, [r2, #0]
 80075b8:	b003      	add	sp, #12
 80075ba:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 80075be:	f000 bc2f 	b.w	8007e20 <__malloc_unlock>
 80075c2:	42a3      	cmp	r3, r4
 80075c4:	d90b      	bls.n	80075de <_free_r+0x4e>
 80075c6:	6821      	ldr	r1, [r4, #0]
 80075c8:	1862      	adds	r2, r4, r1
 80075ca:	4293      	cmp	r3, r2
 80075cc:	bf04      	itt	eq
 80075ce:	681a      	ldreq	r2, [r3, #0]
 80075d0:	685b      	ldreq	r3, [r3, #4]
 80075d2:	6063      	str	r3, [r4, #4]
 80075d4:	bf04      	itt	eq
 80075d6:	1852      	addeq	r2, r2, r1
 80075d8:	6022      	streq	r2, [r4, #0]
 80075da:	602c      	str	r4, [r5, #0]
 80075dc:	e7ec      	b.n	80075b8 <_free_r+0x28>
 80075de:	461a      	mov	r2, r3
 80075e0:	685b      	ldr	r3, [r3, #4]
 80075e2:	b10b      	cbz	r3, 80075e8 <_free_r+0x58>
 80075e4:	42a3      	cmp	r3, r4
 80075e6:	d9fa      	bls.n	80075de <_free_r+0x4e>
 80075e8:	6811      	ldr	r1, [r2, #0]
 80075ea:	1855      	adds	r5, r2, r1
 80075ec:	42a5      	cmp	r5, r4
 80075ee:	d10b      	bne.n	8007608 <_free_r+0x78>
 80075f0:	6824      	ldr	r4, [r4, #0]
 80075f2:	4421      	add	r1, r4
 80075f4:	1854      	adds	r4, r2, r1
 80075f6:	42a3      	cmp	r3, r4
 80075f8:	6011      	str	r1, [r2, #0]
 80075fa:	d1dd      	bne.n	80075b8 <_free_r+0x28>
 80075fc:	681c      	ldr	r4, [r3, #0]
 80075fe:	685b      	ldr	r3, [r3, #4]
 8007600:	6053      	str	r3, [r2, #4]
 8007602:	4421      	add	r1, r4
 8007604:	6011      	str	r1, [r2, #0]
 8007606:	e7d7      	b.n	80075b8 <_free_r+0x28>
 8007608:	d902      	bls.n	8007610 <_free_r+0x80>
 800760a:	230c      	movs	r3, #12
 800760c:	6003      	str	r3, [r0, #0]
 800760e:	e7d3      	b.n	80075b8 <_free_r+0x28>
 8007610:	6825      	ldr	r5, [r4, #0]
 8007612:	1961      	adds	r1, r4, r5
 8007614:	428b      	cmp	r3, r1
 8007616:	bf04      	itt	eq
 8007618:	6819      	ldreq	r1, [r3, #0]
 800761a:	685b      	ldreq	r3, [r3, #4]
 800761c:	6063      	str	r3, [r4, #4]
 800761e:	bf04      	itt	eq
 8007620:	1949      	addeq	r1, r1, r5
 8007622:	6021      	streq	r1, [r4, #0]
 8007624:	6054      	str	r4, [r2, #4]
 8007626:	e7c7      	b.n	80075b8 <_free_r+0x28>
 8007628:	b003      	add	sp, #12
 800762a:	bd30      	pop	{r4, r5, pc}
 800762c:	200000c4 	.word	0x200000c4

08007630 <_malloc_r>:
 8007630:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007632:	1ccd      	adds	r5, r1, #3
 8007634:	f025 0503 	bic.w	r5, r5, #3
 8007638:	3508      	adds	r5, #8
 800763a:	2d0c      	cmp	r5, #12
 800763c:	bf38      	it	cc
 800763e:	250c      	movcc	r5, #12
 8007640:	2d00      	cmp	r5, #0
 8007642:	4606      	mov	r6, r0
 8007644:	db01      	blt.n	800764a <_malloc_r+0x1a>
 8007646:	42a9      	cmp	r1, r5
 8007648:	d903      	bls.n	8007652 <_malloc_r+0x22>
 800764a:	230c      	movs	r3, #12
 800764c:	6033      	str	r3, [r6, #0]
 800764e:	2000      	movs	r0, #0
 8007650:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8007652:	f000 fbdf 	bl	8007e14 <__malloc_lock>
 8007656:	4921      	ldr	r1, [pc, #132]	; (80076dc <_malloc_r+0xac>)
 8007658:	680a      	ldr	r2, [r1, #0]
 800765a:	4614      	mov	r4, r2
 800765c:	b99c      	cbnz	r4, 8007686 <_malloc_r+0x56>
 800765e:	4f20      	ldr	r7, [pc, #128]	; (80076e0 <_malloc_r+0xb0>)
 8007660:	683b      	ldr	r3, [r7, #0]
 8007662:	b923      	cbnz	r3, 800766e <_malloc_r+0x3e>
 8007664:	4621      	mov	r1, r4
 8007666:	4630      	mov	r0, r6
 8007668:	f000 fb2a 	bl	8007cc0 <_sbrk_r>
 800766c:	6038      	str	r0, [r7, #0]
 800766e:	4629      	mov	r1, r5
 8007670:	4630      	mov	r0, r6
 8007672:	f000 fb25 	bl	8007cc0 <_sbrk_r>
 8007676:	1c43      	adds	r3, r0, #1
 8007678:	d123      	bne.n	80076c2 <_malloc_r+0x92>
 800767a:	230c      	movs	r3, #12
 800767c:	6033      	str	r3, [r6, #0]
 800767e:	4630      	mov	r0, r6
 8007680:	f000 fbce 	bl	8007e20 <__malloc_unlock>
 8007684:	e7e3      	b.n	800764e <_malloc_r+0x1e>
 8007686:	6823      	ldr	r3, [r4, #0]
 8007688:	1b5b      	subs	r3, r3, r5
 800768a:	d417      	bmi.n	80076bc <_malloc_r+0x8c>
 800768c:	2b0b      	cmp	r3, #11
 800768e:	d903      	bls.n	8007698 <_malloc_r+0x68>
 8007690:	6023      	str	r3, [r4, #0]
 8007692:	441c      	add	r4, r3
 8007694:	6025      	str	r5, [r4, #0]
 8007696:	e004      	b.n	80076a2 <_malloc_r+0x72>
 8007698:	6863      	ldr	r3, [r4, #4]
 800769a:	42a2      	cmp	r2, r4
 800769c:	bf0c      	ite	eq
 800769e:	600b      	streq	r3, [r1, #0]
 80076a0:	6053      	strne	r3, [r2, #4]
 80076a2:	4630      	mov	r0, r6
 80076a4:	f000 fbbc 	bl	8007e20 <__malloc_unlock>
 80076a8:	f104 000b 	add.w	r0, r4, #11
 80076ac:	1d23      	adds	r3, r4, #4
 80076ae:	f020 0007 	bic.w	r0, r0, #7
 80076b2:	1ac2      	subs	r2, r0, r3
 80076b4:	d0cc      	beq.n	8007650 <_malloc_r+0x20>
 80076b6:	1a1b      	subs	r3, r3, r0
 80076b8:	50a3      	str	r3, [r4, r2]
 80076ba:	e7c9      	b.n	8007650 <_malloc_r+0x20>
 80076bc:	4622      	mov	r2, r4
 80076be:	6864      	ldr	r4, [r4, #4]
 80076c0:	e7cc      	b.n	800765c <_malloc_r+0x2c>
 80076c2:	1cc4      	adds	r4, r0, #3
 80076c4:	f024 0403 	bic.w	r4, r4, #3
 80076c8:	42a0      	cmp	r0, r4
 80076ca:	d0e3      	beq.n	8007694 <_malloc_r+0x64>
 80076cc:	1a21      	subs	r1, r4, r0
 80076ce:	4630      	mov	r0, r6
 80076d0:	f000 faf6 	bl	8007cc0 <_sbrk_r>
 80076d4:	3001      	adds	r0, #1
 80076d6:	d1dd      	bne.n	8007694 <_malloc_r+0x64>
 80076d8:	e7cf      	b.n	800767a <_malloc_r+0x4a>
 80076da:	bf00      	nop
 80076dc:	200000c4 	.word	0x200000c4
 80076e0:	200000c8 	.word	0x200000c8

080076e4 <__sfputc_r>:
 80076e4:	6893      	ldr	r3, [r2, #8]
 80076e6:	3b01      	subs	r3, #1
 80076e8:	2b00      	cmp	r3, #0
 80076ea:	b410      	push	{r4}
 80076ec:	6093      	str	r3, [r2, #8]
 80076ee:	da08      	bge.n	8007702 <__sfputc_r+0x1e>
 80076f0:	6994      	ldr	r4, [r2, #24]
 80076f2:	42a3      	cmp	r3, r4
 80076f4:	db01      	blt.n	80076fa <__sfputc_r+0x16>
 80076f6:	290a      	cmp	r1, #10
 80076f8:	d103      	bne.n	8007702 <__sfputc_r+0x1e>
 80076fa:	f85d 4b04 	ldr.w	r4, [sp], #4
 80076fe:	f7ff bc69 	b.w	8006fd4 <__swbuf_r>
 8007702:	6813      	ldr	r3, [r2, #0]
 8007704:	1c58      	adds	r0, r3, #1
 8007706:	6010      	str	r0, [r2, #0]
 8007708:	7019      	strb	r1, [r3, #0]
 800770a:	4608      	mov	r0, r1
 800770c:	f85d 4b04 	ldr.w	r4, [sp], #4
 8007710:	4770      	bx	lr

08007712 <__sfputs_r>:
 8007712:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007714:	4606      	mov	r6, r0
 8007716:	460f      	mov	r7, r1
 8007718:	4614      	mov	r4, r2
 800771a:	18d5      	adds	r5, r2, r3
 800771c:	42ac      	cmp	r4, r5
 800771e:	d101      	bne.n	8007724 <__sfputs_r+0x12>
 8007720:	2000      	movs	r0, #0
 8007722:	e007      	b.n	8007734 <__sfputs_r+0x22>
 8007724:	f814 1b01 	ldrb.w	r1, [r4], #1
 8007728:	463a      	mov	r2, r7
 800772a:	4630      	mov	r0, r6
 800772c:	f7ff ffda 	bl	80076e4 <__sfputc_r>
 8007730:	1c43      	adds	r3, r0, #1
 8007732:	d1f3      	bne.n	800771c <__sfputs_r+0xa>
 8007734:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08007738 <_vfiprintf_r>:
 8007738:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800773c:	460d      	mov	r5, r1
 800773e:	b09d      	sub	sp, #116	; 0x74
 8007740:	4614      	mov	r4, r2
 8007742:	4698      	mov	r8, r3
 8007744:	4606      	mov	r6, r0
 8007746:	b118      	cbz	r0, 8007750 <_vfiprintf_r+0x18>
 8007748:	6983      	ldr	r3, [r0, #24]
 800774a:	b90b      	cbnz	r3, 8007750 <_vfiprintf_r+0x18>
 800774c:	f7ff fe1c 	bl	8007388 <__sinit>
 8007750:	4b89      	ldr	r3, [pc, #548]	; (8007978 <_vfiprintf_r+0x240>)
 8007752:	429d      	cmp	r5, r3
 8007754:	d11b      	bne.n	800778e <_vfiprintf_r+0x56>
 8007756:	6875      	ldr	r5, [r6, #4]
 8007758:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800775a:	07d9      	lsls	r1, r3, #31
 800775c:	d405      	bmi.n	800776a <_vfiprintf_r+0x32>
 800775e:	89ab      	ldrh	r3, [r5, #12]
 8007760:	059a      	lsls	r2, r3, #22
 8007762:	d402      	bmi.n	800776a <_vfiprintf_r+0x32>
 8007764:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8007766:	f7ff fead 	bl	80074c4 <__retarget_lock_acquire_recursive>
 800776a:	89ab      	ldrh	r3, [r5, #12]
 800776c:	071b      	lsls	r3, r3, #28
 800776e:	d501      	bpl.n	8007774 <_vfiprintf_r+0x3c>
 8007770:	692b      	ldr	r3, [r5, #16]
 8007772:	b9eb      	cbnz	r3, 80077b0 <_vfiprintf_r+0x78>
 8007774:	4629      	mov	r1, r5
 8007776:	4630      	mov	r0, r6
 8007778:	f7ff fc7e 	bl	8007078 <__swsetup_r>
 800777c:	b1c0      	cbz	r0, 80077b0 <_vfiprintf_r+0x78>
 800777e:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8007780:	07dc      	lsls	r4, r3, #31
 8007782:	d50e      	bpl.n	80077a2 <_vfiprintf_r+0x6a>
 8007784:	f04f 30ff 	mov.w	r0, #4294967295
 8007788:	b01d      	add	sp, #116	; 0x74
 800778a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800778e:	4b7b      	ldr	r3, [pc, #492]	; (800797c <_vfiprintf_r+0x244>)
 8007790:	429d      	cmp	r5, r3
 8007792:	d101      	bne.n	8007798 <_vfiprintf_r+0x60>
 8007794:	68b5      	ldr	r5, [r6, #8]
 8007796:	e7df      	b.n	8007758 <_vfiprintf_r+0x20>
 8007798:	4b79      	ldr	r3, [pc, #484]	; (8007980 <_vfiprintf_r+0x248>)
 800779a:	429d      	cmp	r5, r3
 800779c:	bf08      	it	eq
 800779e:	68f5      	ldreq	r5, [r6, #12]
 80077a0:	e7da      	b.n	8007758 <_vfiprintf_r+0x20>
 80077a2:	89ab      	ldrh	r3, [r5, #12]
 80077a4:	0598      	lsls	r0, r3, #22
 80077a6:	d4ed      	bmi.n	8007784 <_vfiprintf_r+0x4c>
 80077a8:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80077aa:	f7ff fe8c 	bl	80074c6 <__retarget_lock_release_recursive>
 80077ae:	e7e9      	b.n	8007784 <_vfiprintf_r+0x4c>
 80077b0:	2300      	movs	r3, #0
 80077b2:	9309      	str	r3, [sp, #36]	; 0x24
 80077b4:	2320      	movs	r3, #32
 80077b6:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80077ba:	f8cd 800c 	str.w	r8, [sp, #12]
 80077be:	2330      	movs	r3, #48	; 0x30
 80077c0:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 8007984 <_vfiprintf_r+0x24c>
 80077c4:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80077c8:	f04f 0901 	mov.w	r9, #1
 80077cc:	4623      	mov	r3, r4
 80077ce:	469a      	mov	sl, r3
 80077d0:	f813 2b01 	ldrb.w	r2, [r3], #1
 80077d4:	b10a      	cbz	r2, 80077da <_vfiprintf_r+0xa2>
 80077d6:	2a25      	cmp	r2, #37	; 0x25
 80077d8:	d1f9      	bne.n	80077ce <_vfiprintf_r+0x96>
 80077da:	ebba 0b04 	subs.w	fp, sl, r4
 80077de:	d00b      	beq.n	80077f8 <_vfiprintf_r+0xc0>
 80077e0:	465b      	mov	r3, fp
 80077e2:	4622      	mov	r2, r4
 80077e4:	4629      	mov	r1, r5
 80077e6:	4630      	mov	r0, r6
 80077e8:	f7ff ff93 	bl	8007712 <__sfputs_r>
 80077ec:	3001      	adds	r0, #1
 80077ee:	f000 80aa 	beq.w	8007946 <_vfiprintf_r+0x20e>
 80077f2:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80077f4:	445a      	add	r2, fp
 80077f6:	9209      	str	r2, [sp, #36]	; 0x24
 80077f8:	f89a 3000 	ldrb.w	r3, [sl]
 80077fc:	2b00      	cmp	r3, #0
 80077fe:	f000 80a2 	beq.w	8007946 <_vfiprintf_r+0x20e>
 8007802:	2300      	movs	r3, #0
 8007804:	f04f 32ff 	mov.w	r2, #4294967295
 8007808:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800780c:	f10a 0a01 	add.w	sl, sl, #1
 8007810:	9304      	str	r3, [sp, #16]
 8007812:	9307      	str	r3, [sp, #28]
 8007814:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8007818:	931a      	str	r3, [sp, #104]	; 0x68
 800781a:	4654      	mov	r4, sl
 800781c:	2205      	movs	r2, #5
 800781e:	f814 1b01 	ldrb.w	r1, [r4], #1
 8007822:	4858      	ldr	r0, [pc, #352]	; (8007984 <_vfiprintf_r+0x24c>)
 8007824:	f7f8 fd74 	bl	8000310 <memchr>
 8007828:	9a04      	ldr	r2, [sp, #16]
 800782a:	b9d8      	cbnz	r0, 8007864 <_vfiprintf_r+0x12c>
 800782c:	06d1      	lsls	r1, r2, #27
 800782e:	bf44      	itt	mi
 8007830:	2320      	movmi	r3, #32
 8007832:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8007836:	0713      	lsls	r3, r2, #28
 8007838:	bf44      	itt	mi
 800783a:	232b      	movmi	r3, #43	; 0x2b
 800783c:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8007840:	f89a 3000 	ldrb.w	r3, [sl]
 8007844:	2b2a      	cmp	r3, #42	; 0x2a
 8007846:	d015      	beq.n	8007874 <_vfiprintf_r+0x13c>
 8007848:	9a07      	ldr	r2, [sp, #28]
 800784a:	4654      	mov	r4, sl
 800784c:	2000      	movs	r0, #0
 800784e:	f04f 0c0a 	mov.w	ip, #10
 8007852:	4621      	mov	r1, r4
 8007854:	f811 3b01 	ldrb.w	r3, [r1], #1
 8007858:	3b30      	subs	r3, #48	; 0x30
 800785a:	2b09      	cmp	r3, #9
 800785c:	d94e      	bls.n	80078fc <_vfiprintf_r+0x1c4>
 800785e:	b1b0      	cbz	r0, 800788e <_vfiprintf_r+0x156>
 8007860:	9207      	str	r2, [sp, #28]
 8007862:	e014      	b.n	800788e <_vfiprintf_r+0x156>
 8007864:	eba0 0308 	sub.w	r3, r0, r8
 8007868:	fa09 f303 	lsl.w	r3, r9, r3
 800786c:	4313      	orrs	r3, r2
 800786e:	9304      	str	r3, [sp, #16]
 8007870:	46a2      	mov	sl, r4
 8007872:	e7d2      	b.n	800781a <_vfiprintf_r+0xe2>
 8007874:	9b03      	ldr	r3, [sp, #12]
 8007876:	1d19      	adds	r1, r3, #4
 8007878:	681b      	ldr	r3, [r3, #0]
 800787a:	9103      	str	r1, [sp, #12]
 800787c:	2b00      	cmp	r3, #0
 800787e:	bfbb      	ittet	lt
 8007880:	425b      	neglt	r3, r3
 8007882:	f042 0202 	orrlt.w	r2, r2, #2
 8007886:	9307      	strge	r3, [sp, #28]
 8007888:	9307      	strlt	r3, [sp, #28]
 800788a:	bfb8      	it	lt
 800788c:	9204      	strlt	r2, [sp, #16]
 800788e:	7823      	ldrb	r3, [r4, #0]
 8007890:	2b2e      	cmp	r3, #46	; 0x2e
 8007892:	d10c      	bne.n	80078ae <_vfiprintf_r+0x176>
 8007894:	7863      	ldrb	r3, [r4, #1]
 8007896:	2b2a      	cmp	r3, #42	; 0x2a
 8007898:	d135      	bne.n	8007906 <_vfiprintf_r+0x1ce>
 800789a:	9b03      	ldr	r3, [sp, #12]
 800789c:	1d1a      	adds	r2, r3, #4
 800789e:	681b      	ldr	r3, [r3, #0]
 80078a0:	9203      	str	r2, [sp, #12]
 80078a2:	2b00      	cmp	r3, #0
 80078a4:	bfb8      	it	lt
 80078a6:	f04f 33ff 	movlt.w	r3, #4294967295
 80078aa:	3402      	adds	r4, #2
 80078ac:	9305      	str	r3, [sp, #20]
 80078ae:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 8007994 <_vfiprintf_r+0x25c>
 80078b2:	7821      	ldrb	r1, [r4, #0]
 80078b4:	2203      	movs	r2, #3
 80078b6:	4650      	mov	r0, sl
 80078b8:	f7f8 fd2a 	bl	8000310 <memchr>
 80078bc:	b140      	cbz	r0, 80078d0 <_vfiprintf_r+0x198>
 80078be:	2340      	movs	r3, #64	; 0x40
 80078c0:	eba0 000a 	sub.w	r0, r0, sl
 80078c4:	fa03 f000 	lsl.w	r0, r3, r0
 80078c8:	9b04      	ldr	r3, [sp, #16]
 80078ca:	4303      	orrs	r3, r0
 80078cc:	3401      	adds	r4, #1
 80078ce:	9304      	str	r3, [sp, #16]
 80078d0:	f814 1b01 	ldrb.w	r1, [r4], #1
 80078d4:	482c      	ldr	r0, [pc, #176]	; (8007988 <_vfiprintf_r+0x250>)
 80078d6:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80078da:	2206      	movs	r2, #6
 80078dc:	f7f8 fd18 	bl	8000310 <memchr>
 80078e0:	2800      	cmp	r0, #0
 80078e2:	d03f      	beq.n	8007964 <_vfiprintf_r+0x22c>
 80078e4:	4b29      	ldr	r3, [pc, #164]	; (800798c <_vfiprintf_r+0x254>)
 80078e6:	bb1b      	cbnz	r3, 8007930 <_vfiprintf_r+0x1f8>
 80078e8:	9b03      	ldr	r3, [sp, #12]
 80078ea:	3307      	adds	r3, #7
 80078ec:	f023 0307 	bic.w	r3, r3, #7
 80078f0:	3308      	adds	r3, #8
 80078f2:	9303      	str	r3, [sp, #12]
 80078f4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80078f6:	443b      	add	r3, r7
 80078f8:	9309      	str	r3, [sp, #36]	; 0x24
 80078fa:	e767      	b.n	80077cc <_vfiprintf_r+0x94>
 80078fc:	fb0c 3202 	mla	r2, ip, r2, r3
 8007900:	460c      	mov	r4, r1
 8007902:	2001      	movs	r0, #1
 8007904:	e7a5      	b.n	8007852 <_vfiprintf_r+0x11a>
 8007906:	2300      	movs	r3, #0
 8007908:	3401      	adds	r4, #1
 800790a:	9305      	str	r3, [sp, #20]
 800790c:	4619      	mov	r1, r3
 800790e:	f04f 0c0a 	mov.w	ip, #10
 8007912:	4620      	mov	r0, r4
 8007914:	f810 2b01 	ldrb.w	r2, [r0], #1
 8007918:	3a30      	subs	r2, #48	; 0x30
 800791a:	2a09      	cmp	r2, #9
 800791c:	d903      	bls.n	8007926 <_vfiprintf_r+0x1ee>
 800791e:	2b00      	cmp	r3, #0
 8007920:	d0c5      	beq.n	80078ae <_vfiprintf_r+0x176>
 8007922:	9105      	str	r1, [sp, #20]
 8007924:	e7c3      	b.n	80078ae <_vfiprintf_r+0x176>
 8007926:	fb0c 2101 	mla	r1, ip, r1, r2
 800792a:	4604      	mov	r4, r0
 800792c:	2301      	movs	r3, #1
 800792e:	e7f0      	b.n	8007912 <_vfiprintf_r+0x1da>
 8007930:	ab03      	add	r3, sp, #12
 8007932:	9300      	str	r3, [sp, #0]
 8007934:	462a      	mov	r2, r5
 8007936:	4b16      	ldr	r3, [pc, #88]	; (8007990 <_vfiprintf_r+0x258>)
 8007938:	a904      	add	r1, sp, #16
 800793a:	4630      	mov	r0, r6
 800793c:	f3af 8000 	nop.w
 8007940:	4607      	mov	r7, r0
 8007942:	1c78      	adds	r0, r7, #1
 8007944:	d1d6      	bne.n	80078f4 <_vfiprintf_r+0x1bc>
 8007946:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8007948:	07d9      	lsls	r1, r3, #31
 800794a:	d405      	bmi.n	8007958 <_vfiprintf_r+0x220>
 800794c:	89ab      	ldrh	r3, [r5, #12]
 800794e:	059a      	lsls	r2, r3, #22
 8007950:	d402      	bmi.n	8007958 <_vfiprintf_r+0x220>
 8007952:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8007954:	f7ff fdb7 	bl	80074c6 <__retarget_lock_release_recursive>
 8007958:	89ab      	ldrh	r3, [r5, #12]
 800795a:	065b      	lsls	r3, r3, #25
 800795c:	f53f af12 	bmi.w	8007784 <_vfiprintf_r+0x4c>
 8007960:	9809      	ldr	r0, [sp, #36]	; 0x24
 8007962:	e711      	b.n	8007788 <_vfiprintf_r+0x50>
 8007964:	ab03      	add	r3, sp, #12
 8007966:	9300      	str	r3, [sp, #0]
 8007968:	462a      	mov	r2, r5
 800796a:	4b09      	ldr	r3, [pc, #36]	; (8007990 <_vfiprintf_r+0x258>)
 800796c:	a904      	add	r1, sp, #16
 800796e:	4630      	mov	r0, r6
 8007970:	f000 f880 	bl	8007a74 <_printf_i>
 8007974:	e7e4      	b.n	8007940 <_vfiprintf_r+0x208>
 8007976:	bf00      	nop
 8007978:	08008000 	.word	0x08008000
 800797c:	08008020 	.word	0x08008020
 8007980:	08007fe0 	.word	0x08007fe0
 8007984:	08008040 	.word	0x08008040
 8007988:	0800804a 	.word	0x0800804a
 800798c:	00000000 	.word	0x00000000
 8007990:	08007713 	.word	0x08007713
 8007994:	08008046 	.word	0x08008046

08007998 <_printf_common>:
 8007998:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800799c:	4616      	mov	r6, r2
 800799e:	4699      	mov	r9, r3
 80079a0:	688a      	ldr	r2, [r1, #8]
 80079a2:	690b      	ldr	r3, [r1, #16]
 80079a4:	f8dd 8020 	ldr.w	r8, [sp, #32]
 80079a8:	4293      	cmp	r3, r2
 80079aa:	bfb8      	it	lt
 80079ac:	4613      	movlt	r3, r2
 80079ae:	6033      	str	r3, [r6, #0]
 80079b0:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 80079b4:	4607      	mov	r7, r0
 80079b6:	460c      	mov	r4, r1
 80079b8:	b10a      	cbz	r2, 80079be <_printf_common+0x26>
 80079ba:	3301      	adds	r3, #1
 80079bc:	6033      	str	r3, [r6, #0]
 80079be:	6823      	ldr	r3, [r4, #0]
 80079c0:	0699      	lsls	r1, r3, #26
 80079c2:	bf42      	ittt	mi
 80079c4:	6833      	ldrmi	r3, [r6, #0]
 80079c6:	3302      	addmi	r3, #2
 80079c8:	6033      	strmi	r3, [r6, #0]
 80079ca:	6825      	ldr	r5, [r4, #0]
 80079cc:	f015 0506 	ands.w	r5, r5, #6
 80079d0:	d106      	bne.n	80079e0 <_printf_common+0x48>
 80079d2:	f104 0a19 	add.w	sl, r4, #25
 80079d6:	68e3      	ldr	r3, [r4, #12]
 80079d8:	6832      	ldr	r2, [r6, #0]
 80079da:	1a9b      	subs	r3, r3, r2
 80079dc:	42ab      	cmp	r3, r5
 80079de:	dc26      	bgt.n	8007a2e <_printf_common+0x96>
 80079e0:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 80079e4:	1e13      	subs	r3, r2, #0
 80079e6:	6822      	ldr	r2, [r4, #0]
 80079e8:	bf18      	it	ne
 80079ea:	2301      	movne	r3, #1
 80079ec:	0692      	lsls	r2, r2, #26
 80079ee:	d42b      	bmi.n	8007a48 <_printf_common+0xb0>
 80079f0:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80079f4:	4649      	mov	r1, r9
 80079f6:	4638      	mov	r0, r7
 80079f8:	47c0      	blx	r8
 80079fa:	3001      	adds	r0, #1
 80079fc:	d01e      	beq.n	8007a3c <_printf_common+0xa4>
 80079fe:	6823      	ldr	r3, [r4, #0]
 8007a00:	68e5      	ldr	r5, [r4, #12]
 8007a02:	6832      	ldr	r2, [r6, #0]
 8007a04:	f003 0306 	and.w	r3, r3, #6
 8007a08:	2b04      	cmp	r3, #4
 8007a0a:	bf08      	it	eq
 8007a0c:	1aad      	subeq	r5, r5, r2
 8007a0e:	68a3      	ldr	r3, [r4, #8]
 8007a10:	6922      	ldr	r2, [r4, #16]
 8007a12:	bf0c      	ite	eq
 8007a14:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8007a18:	2500      	movne	r5, #0
 8007a1a:	4293      	cmp	r3, r2
 8007a1c:	bfc4      	itt	gt
 8007a1e:	1a9b      	subgt	r3, r3, r2
 8007a20:	18ed      	addgt	r5, r5, r3
 8007a22:	2600      	movs	r6, #0
 8007a24:	341a      	adds	r4, #26
 8007a26:	42b5      	cmp	r5, r6
 8007a28:	d11a      	bne.n	8007a60 <_printf_common+0xc8>
 8007a2a:	2000      	movs	r0, #0
 8007a2c:	e008      	b.n	8007a40 <_printf_common+0xa8>
 8007a2e:	2301      	movs	r3, #1
 8007a30:	4652      	mov	r2, sl
 8007a32:	4649      	mov	r1, r9
 8007a34:	4638      	mov	r0, r7
 8007a36:	47c0      	blx	r8
 8007a38:	3001      	adds	r0, #1
 8007a3a:	d103      	bne.n	8007a44 <_printf_common+0xac>
 8007a3c:	f04f 30ff 	mov.w	r0, #4294967295
 8007a40:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007a44:	3501      	adds	r5, #1
 8007a46:	e7c6      	b.n	80079d6 <_printf_common+0x3e>
 8007a48:	18e1      	adds	r1, r4, r3
 8007a4a:	1c5a      	adds	r2, r3, #1
 8007a4c:	2030      	movs	r0, #48	; 0x30
 8007a4e:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8007a52:	4422      	add	r2, r4
 8007a54:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8007a58:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8007a5c:	3302      	adds	r3, #2
 8007a5e:	e7c7      	b.n	80079f0 <_printf_common+0x58>
 8007a60:	2301      	movs	r3, #1
 8007a62:	4622      	mov	r2, r4
 8007a64:	4649      	mov	r1, r9
 8007a66:	4638      	mov	r0, r7
 8007a68:	47c0      	blx	r8
 8007a6a:	3001      	adds	r0, #1
 8007a6c:	d0e6      	beq.n	8007a3c <_printf_common+0xa4>
 8007a6e:	3601      	adds	r6, #1
 8007a70:	e7d9      	b.n	8007a26 <_printf_common+0x8e>
	...

08007a74 <_printf_i>:
 8007a74:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8007a78:	460c      	mov	r4, r1
 8007a7a:	4691      	mov	r9, r2
 8007a7c:	7e27      	ldrb	r7, [r4, #24]
 8007a7e:	990c      	ldr	r1, [sp, #48]	; 0x30
 8007a80:	2f78      	cmp	r7, #120	; 0x78
 8007a82:	4680      	mov	r8, r0
 8007a84:	469a      	mov	sl, r3
 8007a86:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8007a8a:	d807      	bhi.n	8007a9c <_printf_i+0x28>
 8007a8c:	2f62      	cmp	r7, #98	; 0x62
 8007a8e:	d80a      	bhi.n	8007aa6 <_printf_i+0x32>
 8007a90:	2f00      	cmp	r7, #0
 8007a92:	f000 80d8 	beq.w	8007c46 <_printf_i+0x1d2>
 8007a96:	2f58      	cmp	r7, #88	; 0x58
 8007a98:	f000 80a3 	beq.w	8007be2 <_printf_i+0x16e>
 8007a9c:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8007aa0:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8007aa4:	e03a      	b.n	8007b1c <_printf_i+0xa8>
 8007aa6:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8007aaa:	2b15      	cmp	r3, #21
 8007aac:	d8f6      	bhi.n	8007a9c <_printf_i+0x28>
 8007aae:	a001      	add	r0, pc, #4	; (adr r0, 8007ab4 <_printf_i+0x40>)
 8007ab0:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 8007ab4:	08007b0d 	.word	0x08007b0d
 8007ab8:	08007b21 	.word	0x08007b21
 8007abc:	08007a9d 	.word	0x08007a9d
 8007ac0:	08007a9d 	.word	0x08007a9d
 8007ac4:	08007a9d 	.word	0x08007a9d
 8007ac8:	08007a9d 	.word	0x08007a9d
 8007acc:	08007b21 	.word	0x08007b21
 8007ad0:	08007a9d 	.word	0x08007a9d
 8007ad4:	08007a9d 	.word	0x08007a9d
 8007ad8:	08007a9d 	.word	0x08007a9d
 8007adc:	08007a9d 	.word	0x08007a9d
 8007ae0:	08007c2d 	.word	0x08007c2d
 8007ae4:	08007b51 	.word	0x08007b51
 8007ae8:	08007c0f 	.word	0x08007c0f
 8007aec:	08007a9d 	.word	0x08007a9d
 8007af0:	08007a9d 	.word	0x08007a9d
 8007af4:	08007c4f 	.word	0x08007c4f
 8007af8:	08007a9d 	.word	0x08007a9d
 8007afc:	08007b51 	.word	0x08007b51
 8007b00:	08007a9d 	.word	0x08007a9d
 8007b04:	08007a9d 	.word	0x08007a9d
 8007b08:	08007c17 	.word	0x08007c17
 8007b0c:	680b      	ldr	r3, [r1, #0]
 8007b0e:	1d1a      	adds	r2, r3, #4
 8007b10:	681b      	ldr	r3, [r3, #0]
 8007b12:	600a      	str	r2, [r1, #0]
 8007b14:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8007b18:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8007b1c:	2301      	movs	r3, #1
 8007b1e:	e0a3      	b.n	8007c68 <_printf_i+0x1f4>
 8007b20:	6825      	ldr	r5, [r4, #0]
 8007b22:	6808      	ldr	r0, [r1, #0]
 8007b24:	062e      	lsls	r6, r5, #24
 8007b26:	f100 0304 	add.w	r3, r0, #4
 8007b2a:	d50a      	bpl.n	8007b42 <_printf_i+0xce>
 8007b2c:	6805      	ldr	r5, [r0, #0]
 8007b2e:	600b      	str	r3, [r1, #0]
 8007b30:	2d00      	cmp	r5, #0
 8007b32:	da03      	bge.n	8007b3c <_printf_i+0xc8>
 8007b34:	232d      	movs	r3, #45	; 0x2d
 8007b36:	426d      	negs	r5, r5
 8007b38:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8007b3c:	485e      	ldr	r0, [pc, #376]	; (8007cb8 <_printf_i+0x244>)
 8007b3e:	230a      	movs	r3, #10
 8007b40:	e019      	b.n	8007b76 <_printf_i+0x102>
 8007b42:	f015 0f40 	tst.w	r5, #64	; 0x40
 8007b46:	6805      	ldr	r5, [r0, #0]
 8007b48:	600b      	str	r3, [r1, #0]
 8007b4a:	bf18      	it	ne
 8007b4c:	b22d      	sxthne	r5, r5
 8007b4e:	e7ef      	b.n	8007b30 <_printf_i+0xbc>
 8007b50:	680b      	ldr	r3, [r1, #0]
 8007b52:	6825      	ldr	r5, [r4, #0]
 8007b54:	1d18      	adds	r0, r3, #4
 8007b56:	6008      	str	r0, [r1, #0]
 8007b58:	0628      	lsls	r0, r5, #24
 8007b5a:	d501      	bpl.n	8007b60 <_printf_i+0xec>
 8007b5c:	681d      	ldr	r5, [r3, #0]
 8007b5e:	e002      	b.n	8007b66 <_printf_i+0xf2>
 8007b60:	0669      	lsls	r1, r5, #25
 8007b62:	d5fb      	bpl.n	8007b5c <_printf_i+0xe8>
 8007b64:	881d      	ldrh	r5, [r3, #0]
 8007b66:	4854      	ldr	r0, [pc, #336]	; (8007cb8 <_printf_i+0x244>)
 8007b68:	2f6f      	cmp	r7, #111	; 0x6f
 8007b6a:	bf0c      	ite	eq
 8007b6c:	2308      	moveq	r3, #8
 8007b6e:	230a      	movne	r3, #10
 8007b70:	2100      	movs	r1, #0
 8007b72:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8007b76:	6866      	ldr	r6, [r4, #4]
 8007b78:	60a6      	str	r6, [r4, #8]
 8007b7a:	2e00      	cmp	r6, #0
 8007b7c:	bfa2      	ittt	ge
 8007b7e:	6821      	ldrge	r1, [r4, #0]
 8007b80:	f021 0104 	bicge.w	r1, r1, #4
 8007b84:	6021      	strge	r1, [r4, #0]
 8007b86:	b90d      	cbnz	r5, 8007b8c <_printf_i+0x118>
 8007b88:	2e00      	cmp	r6, #0
 8007b8a:	d04d      	beq.n	8007c28 <_printf_i+0x1b4>
 8007b8c:	4616      	mov	r6, r2
 8007b8e:	fbb5 f1f3 	udiv	r1, r5, r3
 8007b92:	fb03 5711 	mls	r7, r3, r1, r5
 8007b96:	5dc7      	ldrb	r7, [r0, r7]
 8007b98:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8007b9c:	462f      	mov	r7, r5
 8007b9e:	42bb      	cmp	r3, r7
 8007ba0:	460d      	mov	r5, r1
 8007ba2:	d9f4      	bls.n	8007b8e <_printf_i+0x11a>
 8007ba4:	2b08      	cmp	r3, #8
 8007ba6:	d10b      	bne.n	8007bc0 <_printf_i+0x14c>
 8007ba8:	6823      	ldr	r3, [r4, #0]
 8007baa:	07df      	lsls	r7, r3, #31
 8007bac:	d508      	bpl.n	8007bc0 <_printf_i+0x14c>
 8007bae:	6923      	ldr	r3, [r4, #16]
 8007bb0:	6861      	ldr	r1, [r4, #4]
 8007bb2:	4299      	cmp	r1, r3
 8007bb4:	bfde      	ittt	le
 8007bb6:	2330      	movle	r3, #48	; 0x30
 8007bb8:	f806 3c01 	strble.w	r3, [r6, #-1]
 8007bbc:	f106 36ff 	addle.w	r6, r6, #4294967295
 8007bc0:	1b92      	subs	r2, r2, r6
 8007bc2:	6122      	str	r2, [r4, #16]
 8007bc4:	f8cd a000 	str.w	sl, [sp]
 8007bc8:	464b      	mov	r3, r9
 8007bca:	aa03      	add	r2, sp, #12
 8007bcc:	4621      	mov	r1, r4
 8007bce:	4640      	mov	r0, r8
 8007bd0:	f7ff fee2 	bl	8007998 <_printf_common>
 8007bd4:	3001      	adds	r0, #1
 8007bd6:	d14c      	bne.n	8007c72 <_printf_i+0x1fe>
 8007bd8:	f04f 30ff 	mov.w	r0, #4294967295
 8007bdc:	b004      	add	sp, #16
 8007bde:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007be2:	4835      	ldr	r0, [pc, #212]	; (8007cb8 <_printf_i+0x244>)
 8007be4:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8007be8:	6823      	ldr	r3, [r4, #0]
 8007bea:	680e      	ldr	r6, [r1, #0]
 8007bec:	061f      	lsls	r7, r3, #24
 8007bee:	f856 5b04 	ldr.w	r5, [r6], #4
 8007bf2:	600e      	str	r6, [r1, #0]
 8007bf4:	d514      	bpl.n	8007c20 <_printf_i+0x1ac>
 8007bf6:	07d9      	lsls	r1, r3, #31
 8007bf8:	bf44      	itt	mi
 8007bfa:	f043 0320 	orrmi.w	r3, r3, #32
 8007bfe:	6023      	strmi	r3, [r4, #0]
 8007c00:	b91d      	cbnz	r5, 8007c0a <_printf_i+0x196>
 8007c02:	6823      	ldr	r3, [r4, #0]
 8007c04:	f023 0320 	bic.w	r3, r3, #32
 8007c08:	6023      	str	r3, [r4, #0]
 8007c0a:	2310      	movs	r3, #16
 8007c0c:	e7b0      	b.n	8007b70 <_printf_i+0xfc>
 8007c0e:	6823      	ldr	r3, [r4, #0]
 8007c10:	f043 0320 	orr.w	r3, r3, #32
 8007c14:	6023      	str	r3, [r4, #0]
 8007c16:	2378      	movs	r3, #120	; 0x78
 8007c18:	4828      	ldr	r0, [pc, #160]	; (8007cbc <_printf_i+0x248>)
 8007c1a:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8007c1e:	e7e3      	b.n	8007be8 <_printf_i+0x174>
 8007c20:	065e      	lsls	r6, r3, #25
 8007c22:	bf48      	it	mi
 8007c24:	b2ad      	uxthmi	r5, r5
 8007c26:	e7e6      	b.n	8007bf6 <_printf_i+0x182>
 8007c28:	4616      	mov	r6, r2
 8007c2a:	e7bb      	b.n	8007ba4 <_printf_i+0x130>
 8007c2c:	680b      	ldr	r3, [r1, #0]
 8007c2e:	6826      	ldr	r6, [r4, #0]
 8007c30:	6960      	ldr	r0, [r4, #20]
 8007c32:	1d1d      	adds	r5, r3, #4
 8007c34:	600d      	str	r5, [r1, #0]
 8007c36:	0635      	lsls	r5, r6, #24
 8007c38:	681b      	ldr	r3, [r3, #0]
 8007c3a:	d501      	bpl.n	8007c40 <_printf_i+0x1cc>
 8007c3c:	6018      	str	r0, [r3, #0]
 8007c3e:	e002      	b.n	8007c46 <_printf_i+0x1d2>
 8007c40:	0671      	lsls	r1, r6, #25
 8007c42:	d5fb      	bpl.n	8007c3c <_printf_i+0x1c8>
 8007c44:	8018      	strh	r0, [r3, #0]
 8007c46:	2300      	movs	r3, #0
 8007c48:	6123      	str	r3, [r4, #16]
 8007c4a:	4616      	mov	r6, r2
 8007c4c:	e7ba      	b.n	8007bc4 <_printf_i+0x150>
 8007c4e:	680b      	ldr	r3, [r1, #0]
 8007c50:	1d1a      	adds	r2, r3, #4
 8007c52:	600a      	str	r2, [r1, #0]
 8007c54:	681e      	ldr	r6, [r3, #0]
 8007c56:	6862      	ldr	r2, [r4, #4]
 8007c58:	2100      	movs	r1, #0
 8007c5a:	4630      	mov	r0, r6
 8007c5c:	f7f8 fb58 	bl	8000310 <memchr>
 8007c60:	b108      	cbz	r0, 8007c66 <_printf_i+0x1f2>
 8007c62:	1b80      	subs	r0, r0, r6
 8007c64:	6060      	str	r0, [r4, #4]
 8007c66:	6863      	ldr	r3, [r4, #4]
 8007c68:	6123      	str	r3, [r4, #16]
 8007c6a:	2300      	movs	r3, #0
 8007c6c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8007c70:	e7a8      	b.n	8007bc4 <_printf_i+0x150>
 8007c72:	6923      	ldr	r3, [r4, #16]
 8007c74:	4632      	mov	r2, r6
 8007c76:	4649      	mov	r1, r9
 8007c78:	4640      	mov	r0, r8
 8007c7a:	47d0      	blx	sl
 8007c7c:	3001      	adds	r0, #1
 8007c7e:	d0ab      	beq.n	8007bd8 <_printf_i+0x164>
 8007c80:	6823      	ldr	r3, [r4, #0]
 8007c82:	079b      	lsls	r3, r3, #30
 8007c84:	d413      	bmi.n	8007cae <_printf_i+0x23a>
 8007c86:	68e0      	ldr	r0, [r4, #12]
 8007c88:	9b03      	ldr	r3, [sp, #12]
 8007c8a:	4298      	cmp	r0, r3
 8007c8c:	bfb8      	it	lt
 8007c8e:	4618      	movlt	r0, r3
 8007c90:	e7a4      	b.n	8007bdc <_printf_i+0x168>
 8007c92:	2301      	movs	r3, #1
 8007c94:	4632      	mov	r2, r6
 8007c96:	4649      	mov	r1, r9
 8007c98:	4640      	mov	r0, r8
 8007c9a:	47d0      	blx	sl
 8007c9c:	3001      	adds	r0, #1
 8007c9e:	d09b      	beq.n	8007bd8 <_printf_i+0x164>
 8007ca0:	3501      	adds	r5, #1
 8007ca2:	68e3      	ldr	r3, [r4, #12]
 8007ca4:	9903      	ldr	r1, [sp, #12]
 8007ca6:	1a5b      	subs	r3, r3, r1
 8007ca8:	42ab      	cmp	r3, r5
 8007caa:	dcf2      	bgt.n	8007c92 <_printf_i+0x21e>
 8007cac:	e7eb      	b.n	8007c86 <_printf_i+0x212>
 8007cae:	2500      	movs	r5, #0
 8007cb0:	f104 0619 	add.w	r6, r4, #25
 8007cb4:	e7f5      	b.n	8007ca2 <_printf_i+0x22e>
 8007cb6:	bf00      	nop
 8007cb8:	08008051 	.word	0x08008051
 8007cbc:	08008062 	.word	0x08008062

08007cc0 <_sbrk_r>:
 8007cc0:	b538      	push	{r3, r4, r5, lr}
 8007cc2:	4d06      	ldr	r5, [pc, #24]	; (8007cdc <_sbrk_r+0x1c>)
 8007cc4:	2300      	movs	r3, #0
 8007cc6:	4604      	mov	r4, r0
 8007cc8:	4608      	mov	r0, r1
 8007cca:	602b      	str	r3, [r5, #0]
 8007ccc:	f7f9 faae 	bl	800122c <_sbrk>
 8007cd0:	1c43      	adds	r3, r0, #1
 8007cd2:	d102      	bne.n	8007cda <_sbrk_r+0x1a>
 8007cd4:	682b      	ldr	r3, [r5, #0]
 8007cd6:	b103      	cbz	r3, 8007cda <_sbrk_r+0x1a>
 8007cd8:	6023      	str	r3, [r4, #0]
 8007cda:	bd38      	pop	{r3, r4, r5, pc}
 8007cdc:	20002434 	.word	0x20002434

08007ce0 <__sread>:
 8007ce0:	b510      	push	{r4, lr}
 8007ce2:	460c      	mov	r4, r1
 8007ce4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007ce8:	f000 f8a0 	bl	8007e2c <_read_r>
 8007cec:	2800      	cmp	r0, #0
 8007cee:	bfab      	itete	ge
 8007cf0:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8007cf2:	89a3      	ldrhlt	r3, [r4, #12]
 8007cf4:	181b      	addge	r3, r3, r0
 8007cf6:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8007cfa:	bfac      	ite	ge
 8007cfc:	6563      	strge	r3, [r4, #84]	; 0x54
 8007cfe:	81a3      	strhlt	r3, [r4, #12]
 8007d00:	bd10      	pop	{r4, pc}

08007d02 <__swrite>:
 8007d02:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007d06:	461f      	mov	r7, r3
 8007d08:	898b      	ldrh	r3, [r1, #12]
 8007d0a:	05db      	lsls	r3, r3, #23
 8007d0c:	4605      	mov	r5, r0
 8007d0e:	460c      	mov	r4, r1
 8007d10:	4616      	mov	r6, r2
 8007d12:	d505      	bpl.n	8007d20 <__swrite+0x1e>
 8007d14:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007d18:	2302      	movs	r3, #2
 8007d1a:	2200      	movs	r2, #0
 8007d1c:	f000 f868 	bl	8007df0 <_lseek_r>
 8007d20:	89a3      	ldrh	r3, [r4, #12]
 8007d22:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8007d26:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8007d2a:	81a3      	strh	r3, [r4, #12]
 8007d2c:	4632      	mov	r2, r6
 8007d2e:	463b      	mov	r3, r7
 8007d30:	4628      	mov	r0, r5
 8007d32:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8007d36:	f000 b817 	b.w	8007d68 <_write_r>

08007d3a <__sseek>:
 8007d3a:	b510      	push	{r4, lr}
 8007d3c:	460c      	mov	r4, r1
 8007d3e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007d42:	f000 f855 	bl	8007df0 <_lseek_r>
 8007d46:	1c43      	adds	r3, r0, #1
 8007d48:	89a3      	ldrh	r3, [r4, #12]
 8007d4a:	bf15      	itete	ne
 8007d4c:	6560      	strne	r0, [r4, #84]	; 0x54
 8007d4e:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8007d52:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8007d56:	81a3      	strheq	r3, [r4, #12]
 8007d58:	bf18      	it	ne
 8007d5a:	81a3      	strhne	r3, [r4, #12]
 8007d5c:	bd10      	pop	{r4, pc}

08007d5e <__sclose>:
 8007d5e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007d62:	f000 b813 	b.w	8007d8c <_close_r>
	...

08007d68 <_write_r>:
 8007d68:	b538      	push	{r3, r4, r5, lr}
 8007d6a:	4d07      	ldr	r5, [pc, #28]	; (8007d88 <_write_r+0x20>)
 8007d6c:	4604      	mov	r4, r0
 8007d6e:	4608      	mov	r0, r1
 8007d70:	4611      	mov	r1, r2
 8007d72:	2200      	movs	r2, #0
 8007d74:	602a      	str	r2, [r5, #0]
 8007d76:	461a      	mov	r2, r3
 8007d78:	f7f8 fcba 	bl	80006f0 <_write>
 8007d7c:	1c43      	adds	r3, r0, #1
 8007d7e:	d102      	bne.n	8007d86 <_write_r+0x1e>
 8007d80:	682b      	ldr	r3, [r5, #0]
 8007d82:	b103      	cbz	r3, 8007d86 <_write_r+0x1e>
 8007d84:	6023      	str	r3, [r4, #0]
 8007d86:	bd38      	pop	{r3, r4, r5, pc}
 8007d88:	20002434 	.word	0x20002434

08007d8c <_close_r>:
 8007d8c:	b538      	push	{r3, r4, r5, lr}
 8007d8e:	4d06      	ldr	r5, [pc, #24]	; (8007da8 <_close_r+0x1c>)
 8007d90:	2300      	movs	r3, #0
 8007d92:	4604      	mov	r4, r0
 8007d94:	4608      	mov	r0, r1
 8007d96:	602b      	str	r3, [r5, #0]
 8007d98:	f7f9 fa13 	bl	80011c2 <_close>
 8007d9c:	1c43      	adds	r3, r0, #1
 8007d9e:	d102      	bne.n	8007da6 <_close_r+0x1a>
 8007da0:	682b      	ldr	r3, [r5, #0]
 8007da2:	b103      	cbz	r3, 8007da6 <_close_r+0x1a>
 8007da4:	6023      	str	r3, [r4, #0]
 8007da6:	bd38      	pop	{r3, r4, r5, pc}
 8007da8:	20002434 	.word	0x20002434

08007dac <_fstat_r>:
 8007dac:	b538      	push	{r3, r4, r5, lr}
 8007dae:	4d07      	ldr	r5, [pc, #28]	; (8007dcc <_fstat_r+0x20>)
 8007db0:	2300      	movs	r3, #0
 8007db2:	4604      	mov	r4, r0
 8007db4:	4608      	mov	r0, r1
 8007db6:	4611      	mov	r1, r2
 8007db8:	602b      	str	r3, [r5, #0]
 8007dba:	f7f9 fa0e 	bl	80011da <_fstat>
 8007dbe:	1c43      	adds	r3, r0, #1
 8007dc0:	d102      	bne.n	8007dc8 <_fstat_r+0x1c>
 8007dc2:	682b      	ldr	r3, [r5, #0]
 8007dc4:	b103      	cbz	r3, 8007dc8 <_fstat_r+0x1c>
 8007dc6:	6023      	str	r3, [r4, #0]
 8007dc8:	bd38      	pop	{r3, r4, r5, pc}
 8007dca:	bf00      	nop
 8007dcc:	20002434 	.word	0x20002434

08007dd0 <_isatty_r>:
 8007dd0:	b538      	push	{r3, r4, r5, lr}
 8007dd2:	4d06      	ldr	r5, [pc, #24]	; (8007dec <_isatty_r+0x1c>)
 8007dd4:	2300      	movs	r3, #0
 8007dd6:	4604      	mov	r4, r0
 8007dd8:	4608      	mov	r0, r1
 8007dda:	602b      	str	r3, [r5, #0]
 8007ddc:	f7f9 fa0d 	bl	80011fa <_isatty>
 8007de0:	1c43      	adds	r3, r0, #1
 8007de2:	d102      	bne.n	8007dea <_isatty_r+0x1a>
 8007de4:	682b      	ldr	r3, [r5, #0]
 8007de6:	b103      	cbz	r3, 8007dea <_isatty_r+0x1a>
 8007de8:	6023      	str	r3, [r4, #0]
 8007dea:	bd38      	pop	{r3, r4, r5, pc}
 8007dec:	20002434 	.word	0x20002434

08007df0 <_lseek_r>:
 8007df0:	b538      	push	{r3, r4, r5, lr}
 8007df2:	4d07      	ldr	r5, [pc, #28]	; (8007e10 <_lseek_r+0x20>)
 8007df4:	4604      	mov	r4, r0
 8007df6:	4608      	mov	r0, r1
 8007df8:	4611      	mov	r1, r2
 8007dfa:	2200      	movs	r2, #0
 8007dfc:	602a      	str	r2, [r5, #0]
 8007dfe:	461a      	mov	r2, r3
 8007e00:	f7f9 fa06 	bl	8001210 <_lseek>
 8007e04:	1c43      	adds	r3, r0, #1
 8007e06:	d102      	bne.n	8007e0e <_lseek_r+0x1e>
 8007e08:	682b      	ldr	r3, [r5, #0]
 8007e0a:	b103      	cbz	r3, 8007e0e <_lseek_r+0x1e>
 8007e0c:	6023      	str	r3, [r4, #0]
 8007e0e:	bd38      	pop	{r3, r4, r5, pc}
 8007e10:	20002434 	.word	0x20002434

08007e14 <__malloc_lock>:
 8007e14:	4801      	ldr	r0, [pc, #4]	; (8007e1c <__malloc_lock+0x8>)
 8007e16:	f7ff bb55 	b.w	80074c4 <__retarget_lock_acquire_recursive>
 8007e1a:	bf00      	nop
 8007e1c:	2000242c 	.word	0x2000242c

08007e20 <__malloc_unlock>:
 8007e20:	4801      	ldr	r0, [pc, #4]	; (8007e28 <__malloc_unlock+0x8>)
 8007e22:	f7ff bb50 	b.w	80074c6 <__retarget_lock_release_recursive>
 8007e26:	bf00      	nop
 8007e28:	2000242c 	.word	0x2000242c

08007e2c <_read_r>:
 8007e2c:	b538      	push	{r3, r4, r5, lr}
 8007e2e:	4d07      	ldr	r5, [pc, #28]	; (8007e4c <_read_r+0x20>)
 8007e30:	4604      	mov	r4, r0
 8007e32:	4608      	mov	r0, r1
 8007e34:	4611      	mov	r1, r2
 8007e36:	2200      	movs	r2, #0
 8007e38:	602a      	str	r2, [r5, #0]
 8007e3a:	461a      	mov	r2, r3
 8007e3c:	f7f9 f9a4 	bl	8001188 <_read>
 8007e40:	1c43      	adds	r3, r0, #1
 8007e42:	d102      	bne.n	8007e4a <_read_r+0x1e>
 8007e44:	682b      	ldr	r3, [r5, #0]
 8007e46:	b103      	cbz	r3, 8007e4a <_read_r+0x1e>
 8007e48:	6023      	str	r3, [r4, #0]
 8007e4a:	bd38      	pop	{r3, r4, r5, pc}
 8007e4c:	20002434 	.word	0x20002434

08007e50 <_init>:
 8007e50:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007e52:	bf00      	nop
 8007e54:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007e56:	bc08      	pop	{r3}
 8007e58:	469e      	mov	lr, r3
 8007e5a:	4770      	bx	lr

08007e5c <_fini>:
 8007e5c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007e5e:	bf00      	nop
 8007e60:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007e62:	bc08      	pop	{r3}
 8007e64:	469e      	mov	lr, r3
 8007e66:	4770      	bx	lr
