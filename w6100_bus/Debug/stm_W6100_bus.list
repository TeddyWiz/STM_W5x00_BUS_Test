
stm_W6100_bus.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000002cc  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000077fc  080002d0  080002d0  000102d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000214  08007acc  08007acc  00017acc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  08007ce0  08007ce0  00017ce0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000004  08007ce8  08007ce8  00017ce8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .fini_array   00000004  08007cec  08007cec  00017cec  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .data         0000009c  20000000  08007cf0  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .bss          00002b88  2000009c  08007d8c  0002009c  2**2
                  ALLOC
  8 ._user_heap_stack 00000604  20002c24  08007d8c  00022c24  2**0
                  ALLOC
  9 .ARM.attributes 0000002e  00000000  00000000  0002009c  2**0
                  CONTENTS, READONLY
 10 .debug_info   0001f53d  00000000  00000000  000200ca  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 11 .debug_abbrev 00003805  00000000  00000000  0003f607  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_aranges 00001058  00000000  00000000  00042e10  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_ranges 00000f40  00000000  00000000  00043e68  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_macro  0003474b  00000000  00000000  00044da8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_line   00013bba  00000000  00000000  000794f3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_str    0014d4bd  00000000  00000000  0008d0ad  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .comment      00000053  00000000  00000000  001da56a  2**0
                  CONTENTS, READONLY
 18 .debug_frame  00004bb0  00000000  00000000  001da5c0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080002d0 <__do_global_dtors_aux>:
 80002d0:	b510      	push	{r4, lr}
 80002d2:	4c05      	ldr	r4, [pc, #20]	; (80002e8 <__do_global_dtors_aux+0x18>)
 80002d4:	7823      	ldrb	r3, [r4, #0]
 80002d6:	b933      	cbnz	r3, 80002e6 <__do_global_dtors_aux+0x16>
 80002d8:	4b04      	ldr	r3, [pc, #16]	; (80002ec <__do_global_dtors_aux+0x1c>)
 80002da:	b113      	cbz	r3, 80002e2 <__do_global_dtors_aux+0x12>
 80002dc:	4804      	ldr	r0, [pc, #16]	; (80002f0 <__do_global_dtors_aux+0x20>)
 80002de:	f3af 8000 	nop.w
 80002e2:	2301      	movs	r3, #1
 80002e4:	7023      	strb	r3, [r4, #0]
 80002e6:	bd10      	pop	{r4, pc}
 80002e8:	2000009c 	.word	0x2000009c
 80002ec:	00000000 	.word	0x00000000
 80002f0:	08007ab4 	.word	0x08007ab4

080002f4 <frame_dummy>:
 80002f4:	b508      	push	{r3, lr}
 80002f6:	4b03      	ldr	r3, [pc, #12]	; (8000304 <frame_dummy+0x10>)
 80002f8:	b11b      	cbz	r3, 8000302 <frame_dummy+0xe>
 80002fa:	4903      	ldr	r1, [pc, #12]	; (8000308 <frame_dummy+0x14>)
 80002fc:	4803      	ldr	r0, [pc, #12]	; (800030c <frame_dummy+0x18>)
 80002fe:	f3af 8000 	nop.w
 8000302:	bd08      	pop	{r3, pc}
 8000304:	00000000 	.word	0x00000000
 8000308:	200000a0 	.word	0x200000a0
 800030c:	08007ab4 	.word	0x08007ab4

08000310 <memchr>:
 8000310:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000314:	2a10      	cmp	r2, #16
 8000316:	db2b      	blt.n	8000370 <memchr+0x60>
 8000318:	f010 0f07 	tst.w	r0, #7
 800031c:	d008      	beq.n	8000330 <memchr+0x20>
 800031e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000322:	3a01      	subs	r2, #1
 8000324:	428b      	cmp	r3, r1
 8000326:	d02d      	beq.n	8000384 <memchr+0x74>
 8000328:	f010 0f07 	tst.w	r0, #7
 800032c:	b342      	cbz	r2, 8000380 <memchr+0x70>
 800032e:	d1f6      	bne.n	800031e <memchr+0xe>
 8000330:	b4f0      	push	{r4, r5, r6, r7}
 8000332:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000336:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800033a:	f022 0407 	bic.w	r4, r2, #7
 800033e:	f07f 0700 	mvns.w	r7, #0
 8000342:	2300      	movs	r3, #0
 8000344:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000348:	3c08      	subs	r4, #8
 800034a:	ea85 0501 	eor.w	r5, r5, r1
 800034e:	ea86 0601 	eor.w	r6, r6, r1
 8000352:	fa85 f547 	uadd8	r5, r5, r7
 8000356:	faa3 f587 	sel	r5, r3, r7
 800035a:	fa86 f647 	uadd8	r6, r6, r7
 800035e:	faa5 f687 	sel	r6, r5, r7
 8000362:	b98e      	cbnz	r6, 8000388 <memchr+0x78>
 8000364:	d1ee      	bne.n	8000344 <memchr+0x34>
 8000366:	bcf0      	pop	{r4, r5, r6, r7}
 8000368:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800036c:	f002 0207 	and.w	r2, r2, #7
 8000370:	b132      	cbz	r2, 8000380 <memchr+0x70>
 8000372:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000376:	3a01      	subs	r2, #1
 8000378:	ea83 0301 	eor.w	r3, r3, r1
 800037c:	b113      	cbz	r3, 8000384 <memchr+0x74>
 800037e:	d1f8      	bne.n	8000372 <memchr+0x62>
 8000380:	2000      	movs	r0, #0
 8000382:	4770      	bx	lr
 8000384:	3801      	subs	r0, #1
 8000386:	4770      	bx	lr
 8000388:	2d00      	cmp	r5, #0
 800038a:	bf06      	itte	eq
 800038c:	4635      	moveq	r5, r6
 800038e:	3803      	subeq	r0, #3
 8000390:	3807      	subne	r0, #7
 8000392:	f015 0f01 	tst.w	r5, #1
 8000396:	d107      	bne.n	80003a8 <memchr+0x98>
 8000398:	3001      	adds	r0, #1
 800039a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800039e:	bf02      	ittt	eq
 80003a0:	3001      	addeq	r0, #1
 80003a2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80003a6:	3001      	addeq	r0, #1
 80003a8:	bcf0      	pop	{r4, r5, r6, r7}
 80003aa:	3801      	subs	r0, #1
 80003ac:	4770      	bx	lr
 80003ae:	bf00      	nop

080003b0 <__aeabi_uldivmod>:
 80003b0:	b953      	cbnz	r3, 80003c8 <__aeabi_uldivmod+0x18>
 80003b2:	b94a      	cbnz	r2, 80003c8 <__aeabi_uldivmod+0x18>
 80003b4:	2900      	cmp	r1, #0
 80003b6:	bf08      	it	eq
 80003b8:	2800      	cmpeq	r0, #0
 80003ba:	bf1c      	itt	ne
 80003bc:	f04f 31ff 	movne.w	r1, #4294967295
 80003c0:	f04f 30ff 	movne.w	r0, #4294967295
 80003c4:	f000 b96e 	b.w	80006a4 <__aeabi_idiv0>
 80003c8:	f1ad 0c08 	sub.w	ip, sp, #8
 80003cc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80003d0:	f000 f806 	bl	80003e0 <__udivmoddi4>
 80003d4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80003d8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80003dc:	b004      	add	sp, #16
 80003de:	4770      	bx	lr

080003e0 <__udivmoddi4>:
 80003e0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80003e4:	9d08      	ldr	r5, [sp, #32]
 80003e6:	4604      	mov	r4, r0
 80003e8:	468c      	mov	ip, r1
 80003ea:	2b00      	cmp	r3, #0
 80003ec:	f040 8083 	bne.w	80004f6 <__udivmoddi4+0x116>
 80003f0:	428a      	cmp	r2, r1
 80003f2:	4617      	mov	r7, r2
 80003f4:	d947      	bls.n	8000486 <__udivmoddi4+0xa6>
 80003f6:	fab2 f282 	clz	r2, r2
 80003fa:	b142      	cbz	r2, 800040e <__udivmoddi4+0x2e>
 80003fc:	f1c2 0020 	rsb	r0, r2, #32
 8000400:	fa24 f000 	lsr.w	r0, r4, r0
 8000404:	4091      	lsls	r1, r2
 8000406:	4097      	lsls	r7, r2
 8000408:	ea40 0c01 	orr.w	ip, r0, r1
 800040c:	4094      	lsls	r4, r2
 800040e:	ea4f 4817 	mov.w	r8, r7, lsr #16
 8000412:	0c23      	lsrs	r3, r4, #16
 8000414:	fbbc f6f8 	udiv	r6, ip, r8
 8000418:	fa1f fe87 	uxth.w	lr, r7
 800041c:	fb08 c116 	mls	r1, r8, r6, ip
 8000420:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000424:	fb06 f10e 	mul.w	r1, r6, lr
 8000428:	4299      	cmp	r1, r3
 800042a:	d909      	bls.n	8000440 <__udivmoddi4+0x60>
 800042c:	18fb      	adds	r3, r7, r3
 800042e:	f106 30ff 	add.w	r0, r6, #4294967295
 8000432:	f080 8119 	bcs.w	8000668 <__udivmoddi4+0x288>
 8000436:	4299      	cmp	r1, r3
 8000438:	f240 8116 	bls.w	8000668 <__udivmoddi4+0x288>
 800043c:	3e02      	subs	r6, #2
 800043e:	443b      	add	r3, r7
 8000440:	1a5b      	subs	r3, r3, r1
 8000442:	b2a4      	uxth	r4, r4
 8000444:	fbb3 f0f8 	udiv	r0, r3, r8
 8000448:	fb08 3310 	mls	r3, r8, r0, r3
 800044c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000450:	fb00 fe0e 	mul.w	lr, r0, lr
 8000454:	45a6      	cmp	lr, r4
 8000456:	d909      	bls.n	800046c <__udivmoddi4+0x8c>
 8000458:	193c      	adds	r4, r7, r4
 800045a:	f100 33ff 	add.w	r3, r0, #4294967295
 800045e:	f080 8105 	bcs.w	800066c <__udivmoddi4+0x28c>
 8000462:	45a6      	cmp	lr, r4
 8000464:	f240 8102 	bls.w	800066c <__udivmoddi4+0x28c>
 8000468:	3802      	subs	r0, #2
 800046a:	443c      	add	r4, r7
 800046c:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000470:	eba4 040e 	sub.w	r4, r4, lr
 8000474:	2600      	movs	r6, #0
 8000476:	b11d      	cbz	r5, 8000480 <__udivmoddi4+0xa0>
 8000478:	40d4      	lsrs	r4, r2
 800047a:	2300      	movs	r3, #0
 800047c:	e9c5 4300 	strd	r4, r3, [r5]
 8000480:	4631      	mov	r1, r6
 8000482:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000486:	b902      	cbnz	r2, 800048a <__udivmoddi4+0xaa>
 8000488:	deff      	udf	#255	; 0xff
 800048a:	fab2 f282 	clz	r2, r2
 800048e:	2a00      	cmp	r2, #0
 8000490:	d150      	bne.n	8000534 <__udivmoddi4+0x154>
 8000492:	1bcb      	subs	r3, r1, r7
 8000494:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000498:	fa1f f887 	uxth.w	r8, r7
 800049c:	2601      	movs	r6, #1
 800049e:	fbb3 fcfe 	udiv	ip, r3, lr
 80004a2:	0c21      	lsrs	r1, r4, #16
 80004a4:	fb0e 331c 	mls	r3, lr, ip, r3
 80004a8:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80004ac:	fb08 f30c 	mul.w	r3, r8, ip
 80004b0:	428b      	cmp	r3, r1
 80004b2:	d907      	bls.n	80004c4 <__udivmoddi4+0xe4>
 80004b4:	1879      	adds	r1, r7, r1
 80004b6:	f10c 30ff 	add.w	r0, ip, #4294967295
 80004ba:	d202      	bcs.n	80004c2 <__udivmoddi4+0xe2>
 80004bc:	428b      	cmp	r3, r1
 80004be:	f200 80e9 	bhi.w	8000694 <__udivmoddi4+0x2b4>
 80004c2:	4684      	mov	ip, r0
 80004c4:	1ac9      	subs	r1, r1, r3
 80004c6:	b2a3      	uxth	r3, r4
 80004c8:	fbb1 f0fe 	udiv	r0, r1, lr
 80004cc:	fb0e 1110 	mls	r1, lr, r0, r1
 80004d0:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 80004d4:	fb08 f800 	mul.w	r8, r8, r0
 80004d8:	45a0      	cmp	r8, r4
 80004da:	d907      	bls.n	80004ec <__udivmoddi4+0x10c>
 80004dc:	193c      	adds	r4, r7, r4
 80004de:	f100 33ff 	add.w	r3, r0, #4294967295
 80004e2:	d202      	bcs.n	80004ea <__udivmoddi4+0x10a>
 80004e4:	45a0      	cmp	r8, r4
 80004e6:	f200 80d9 	bhi.w	800069c <__udivmoddi4+0x2bc>
 80004ea:	4618      	mov	r0, r3
 80004ec:	eba4 0408 	sub.w	r4, r4, r8
 80004f0:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 80004f4:	e7bf      	b.n	8000476 <__udivmoddi4+0x96>
 80004f6:	428b      	cmp	r3, r1
 80004f8:	d909      	bls.n	800050e <__udivmoddi4+0x12e>
 80004fa:	2d00      	cmp	r5, #0
 80004fc:	f000 80b1 	beq.w	8000662 <__udivmoddi4+0x282>
 8000500:	2600      	movs	r6, #0
 8000502:	e9c5 0100 	strd	r0, r1, [r5]
 8000506:	4630      	mov	r0, r6
 8000508:	4631      	mov	r1, r6
 800050a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800050e:	fab3 f683 	clz	r6, r3
 8000512:	2e00      	cmp	r6, #0
 8000514:	d14a      	bne.n	80005ac <__udivmoddi4+0x1cc>
 8000516:	428b      	cmp	r3, r1
 8000518:	d302      	bcc.n	8000520 <__udivmoddi4+0x140>
 800051a:	4282      	cmp	r2, r0
 800051c:	f200 80b8 	bhi.w	8000690 <__udivmoddi4+0x2b0>
 8000520:	1a84      	subs	r4, r0, r2
 8000522:	eb61 0103 	sbc.w	r1, r1, r3
 8000526:	2001      	movs	r0, #1
 8000528:	468c      	mov	ip, r1
 800052a:	2d00      	cmp	r5, #0
 800052c:	d0a8      	beq.n	8000480 <__udivmoddi4+0xa0>
 800052e:	e9c5 4c00 	strd	r4, ip, [r5]
 8000532:	e7a5      	b.n	8000480 <__udivmoddi4+0xa0>
 8000534:	f1c2 0320 	rsb	r3, r2, #32
 8000538:	fa20 f603 	lsr.w	r6, r0, r3
 800053c:	4097      	lsls	r7, r2
 800053e:	fa01 f002 	lsl.w	r0, r1, r2
 8000542:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000546:	40d9      	lsrs	r1, r3
 8000548:	4330      	orrs	r0, r6
 800054a:	0c03      	lsrs	r3, r0, #16
 800054c:	fbb1 f6fe 	udiv	r6, r1, lr
 8000550:	fa1f f887 	uxth.w	r8, r7
 8000554:	fb0e 1116 	mls	r1, lr, r6, r1
 8000558:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800055c:	fb06 f108 	mul.w	r1, r6, r8
 8000560:	4299      	cmp	r1, r3
 8000562:	fa04 f402 	lsl.w	r4, r4, r2
 8000566:	d909      	bls.n	800057c <__udivmoddi4+0x19c>
 8000568:	18fb      	adds	r3, r7, r3
 800056a:	f106 3cff 	add.w	ip, r6, #4294967295
 800056e:	f080 808d 	bcs.w	800068c <__udivmoddi4+0x2ac>
 8000572:	4299      	cmp	r1, r3
 8000574:	f240 808a 	bls.w	800068c <__udivmoddi4+0x2ac>
 8000578:	3e02      	subs	r6, #2
 800057a:	443b      	add	r3, r7
 800057c:	1a5b      	subs	r3, r3, r1
 800057e:	b281      	uxth	r1, r0
 8000580:	fbb3 f0fe 	udiv	r0, r3, lr
 8000584:	fb0e 3310 	mls	r3, lr, r0, r3
 8000588:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800058c:	fb00 f308 	mul.w	r3, r0, r8
 8000590:	428b      	cmp	r3, r1
 8000592:	d907      	bls.n	80005a4 <__udivmoddi4+0x1c4>
 8000594:	1879      	adds	r1, r7, r1
 8000596:	f100 3cff 	add.w	ip, r0, #4294967295
 800059a:	d273      	bcs.n	8000684 <__udivmoddi4+0x2a4>
 800059c:	428b      	cmp	r3, r1
 800059e:	d971      	bls.n	8000684 <__udivmoddi4+0x2a4>
 80005a0:	3802      	subs	r0, #2
 80005a2:	4439      	add	r1, r7
 80005a4:	1acb      	subs	r3, r1, r3
 80005a6:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 80005aa:	e778      	b.n	800049e <__udivmoddi4+0xbe>
 80005ac:	f1c6 0c20 	rsb	ip, r6, #32
 80005b0:	fa03 f406 	lsl.w	r4, r3, r6
 80005b4:	fa22 f30c 	lsr.w	r3, r2, ip
 80005b8:	431c      	orrs	r4, r3
 80005ba:	fa20 f70c 	lsr.w	r7, r0, ip
 80005be:	fa01 f306 	lsl.w	r3, r1, r6
 80005c2:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 80005c6:	fa21 f10c 	lsr.w	r1, r1, ip
 80005ca:	431f      	orrs	r7, r3
 80005cc:	0c3b      	lsrs	r3, r7, #16
 80005ce:	fbb1 f9fe 	udiv	r9, r1, lr
 80005d2:	fa1f f884 	uxth.w	r8, r4
 80005d6:	fb0e 1119 	mls	r1, lr, r9, r1
 80005da:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 80005de:	fb09 fa08 	mul.w	sl, r9, r8
 80005e2:	458a      	cmp	sl, r1
 80005e4:	fa02 f206 	lsl.w	r2, r2, r6
 80005e8:	fa00 f306 	lsl.w	r3, r0, r6
 80005ec:	d908      	bls.n	8000600 <__udivmoddi4+0x220>
 80005ee:	1861      	adds	r1, r4, r1
 80005f0:	f109 30ff 	add.w	r0, r9, #4294967295
 80005f4:	d248      	bcs.n	8000688 <__udivmoddi4+0x2a8>
 80005f6:	458a      	cmp	sl, r1
 80005f8:	d946      	bls.n	8000688 <__udivmoddi4+0x2a8>
 80005fa:	f1a9 0902 	sub.w	r9, r9, #2
 80005fe:	4421      	add	r1, r4
 8000600:	eba1 010a 	sub.w	r1, r1, sl
 8000604:	b2bf      	uxth	r7, r7
 8000606:	fbb1 f0fe 	udiv	r0, r1, lr
 800060a:	fb0e 1110 	mls	r1, lr, r0, r1
 800060e:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 8000612:	fb00 f808 	mul.w	r8, r0, r8
 8000616:	45b8      	cmp	r8, r7
 8000618:	d907      	bls.n	800062a <__udivmoddi4+0x24a>
 800061a:	19e7      	adds	r7, r4, r7
 800061c:	f100 31ff 	add.w	r1, r0, #4294967295
 8000620:	d22e      	bcs.n	8000680 <__udivmoddi4+0x2a0>
 8000622:	45b8      	cmp	r8, r7
 8000624:	d92c      	bls.n	8000680 <__udivmoddi4+0x2a0>
 8000626:	3802      	subs	r0, #2
 8000628:	4427      	add	r7, r4
 800062a:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 800062e:	eba7 0708 	sub.w	r7, r7, r8
 8000632:	fba0 8902 	umull	r8, r9, r0, r2
 8000636:	454f      	cmp	r7, r9
 8000638:	46c6      	mov	lr, r8
 800063a:	4649      	mov	r1, r9
 800063c:	d31a      	bcc.n	8000674 <__udivmoddi4+0x294>
 800063e:	d017      	beq.n	8000670 <__udivmoddi4+0x290>
 8000640:	b15d      	cbz	r5, 800065a <__udivmoddi4+0x27a>
 8000642:	ebb3 020e 	subs.w	r2, r3, lr
 8000646:	eb67 0701 	sbc.w	r7, r7, r1
 800064a:	fa07 fc0c 	lsl.w	ip, r7, ip
 800064e:	40f2      	lsrs	r2, r6
 8000650:	ea4c 0202 	orr.w	r2, ip, r2
 8000654:	40f7      	lsrs	r7, r6
 8000656:	e9c5 2700 	strd	r2, r7, [r5]
 800065a:	2600      	movs	r6, #0
 800065c:	4631      	mov	r1, r6
 800065e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000662:	462e      	mov	r6, r5
 8000664:	4628      	mov	r0, r5
 8000666:	e70b      	b.n	8000480 <__udivmoddi4+0xa0>
 8000668:	4606      	mov	r6, r0
 800066a:	e6e9      	b.n	8000440 <__udivmoddi4+0x60>
 800066c:	4618      	mov	r0, r3
 800066e:	e6fd      	b.n	800046c <__udivmoddi4+0x8c>
 8000670:	4543      	cmp	r3, r8
 8000672:	d2e5      	bcs.n	8000640 <__udivmoddi4+0x260>
 8000674:	ebb8 0e02 	subs.w	lr, r8, r2
 8000678:	eb69 0104 	sbc.w	r1, r9, r4
 800067c:	3801      	subs	r0, #1
 800067e:	e7df      	b.n	8000640 <__udivmoddi4+0x260>
 8000680:	4608      	mov	r0, r1
 8000682:	e7d2      	b.n	800062a <__udivmoddi4+0x24a>
 8000684:	4660      	mov	r0, ip
 8000686:	e78d      	b.n	80005a4 <__udivmoddi4+0x1c4>
 8000688:	4681      	mov	r9, r0
 800068a:	e7b9      	b.n	8000600 <__udivmoddi4+0x220>
 800068c:	4666      	mov	r6, ip
 800068e:	e775      	b.n	800057c <__udivmoddi4+0x19c>
 8000690:	4630      	mov	r0, r6
 8000692:	e74a      	b.n	800052a <__udivmoddi4+0x14a>
 8000694:	f1ac 0c02 	sub.w	ip, ip, #2
 8000698:	4439      	add	r1, r7
 800069a:	e713      	b.n	80004c4 <__udivmoddi4+0xe4>
 800069c:	3802      	subs	r0, #2
 800069e:	443c      	add	r4, r7
 80006a0:	e724      	b.n	80004ec <__udivmoddi4+0x10c>
 80006a2:	bf00      	nop

080006a4 <__aeabi_idiv0>:
 80006a4:	4770      	bx	lr
 80006a6:	bf00      	nop

080006a8 <Fill_Buffer>:
#define WRITE_READ_ADDR     ((uint32_t)0x0800)
uint32_t aTxBuffer[BUFFER_SIZE];
uint32_t aRxBuffer[BUFFER_SIZE];

static void Fill_Buffer(uint32_t *pBuffer, uint32_t uwBufferLength, uint16_t uwOffset)
{
 80006a8:	b480      	push	{r7}
 80006aa:	b087      	sub	sp, #28
 80006ac:	af00      	add	r7, sp, #0
 80006ae:	60f8      	str	r0, [r7, #12]
 80006b0:	60b9      	str	r1, [r7, #8]
 80006b2:	4613      	mov	r3, r2
 80006b4:	80fb      	strh	r3, [r7, #6]
  uint16_t tmpIndex = 0;
 80006b6:	2300      	movs	r3, #0
 80006b8:	82fb      	strh	r3, [r7, #22]

  /* Put in global buffer different values */
  for (tmpIndex = 0; tmpIndex < uwBufferLength; tmpIndex++)
 80006ba:	2300      	movs	r3, #0
 80006bc:	82fb      	strh	r3, [r7, #22]
 80006be:	e00b      	b.n	80006d8 <Fill_Buffer+0x30>
  {
    pBuffer[tmpIndex] = tmpIndex + uwOffset;
 80006c0:	8afa      	ldrh	r2, [r7, #22]
 80006c2:	88fb      	ldrh	r3, [r7, #6]
 80006c4:	18d1      	adds	r1, r2, r3
 80006c6:	8afb      	ldrh	r3, [r7, #22]
 80006c8:	009b      	lsls	r3, r3, #2
 80006ca:	68fa      	ldr	r2, [r7, #12]
 80006cc:	4413      	add	r3, r2
 80006ce:	460a      	mov	r2, r1
 80006d0:	601a      	str	r2, [r3, #0]
  for (tmpIndex = 0; tmpIndex < uwBufferLength; tmpIndex++)
 80006d2:	8afb      	ldrh	r3, [r7, #22]
 80006d4:	3301      	adds	r3, #1
 80006d6:	82fb      	strh	r3, [r7, #22]
 80006d8:	8afb      	ldrh	r3, [r7, #22]
 80006da:	68ba      	ldr	r2, [r7, #8]
 80006dc:	429a      	cmp	r2, r3
 80006de:	d8ef      	bhi.n	80006c0 <Fill_Buffer+0x18>
  }
}
 80006e0:	bf00      	nop
 80006e2:	bf00      	nop
 80006e4:	371c      	adds	r7, #28
 80006e6:	46bd      	mov	sp, r7
 80006e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006ec:	4770      	bx	lr
	...

080006f0 <_write>:
    #endif
  #endif

  #ifdef True_STD
  int _write(int fd, char *str, int len)
  {
 80006f0:	b580      	push	{r7, lr}
 80006f2:	b086      	sub	sp, #24
 80006f4:	af00      	add	r7, sp, #0
 80006f6:	60f8      	str	r0, [r7, #12]
 80006f8:	60b9      	str	r1, [r7, #8]
 80006fa:	607a      	str	r2, [r7, #4]
    for(int i=0; i<len; i++)
 80006fc:	2300      	movs	r3, #0
 80006fe:	617b      	str	r3, [r7, #20]
 8000700:	e00b      	b.n	800071a <_write+0x2a>
    {
      HAL_UART_Transmit(&huart3, (uint8_t *)&str[i], 1, 0xFFFF);
 8000702:	697b      	ldr	r3, [r7, #20]
 8000704:	68ba      	ldr	r2, [r7, #8]
 8000706:	18d1      	adds	r1, r2, r3
 8000708:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800070c:	2201      	movs	r2, #1
 800070e:	4807      	ldr	r0, [pc, #28]	; (800072c <_write+0x3c>)
 8000710:	f004 fae0 	bl	8004cd4 <HAL_UART_Transmit>
    for(int i=0; i<len; i++)
 8000714:	697b      	ldr	r3, [r7, #20]
 8000716:	3301      	adds	r3, #1
 8000718:	617b      	str	r3, [r7, #20]
 800071a:	697a      	ldr	r2, [r7, #20]
 800071c:	687b      	ldr	r3, [r7, #4]
 800071e:	429a      	cmp	r2, r3
 8000720:	dbef      	blt.n	8000702 <_write+0x12>
    }
    return len;
 8000722:	687b      	ldr	r3, [r7, #4]
  }
 8000724:	4618      	mov	r0, r3
 8000726:	3718      	adds	r7, #24
 8000728:	46bd      	mov	sp, r7
 800072a:	bd80      	pop	{r7, pc}
 800072c:	200008cc 	.word	0x200008cc

08000730 <W6100BusWriteByte>:
	  {
		URX_BUF_Flag = 1;
	  }
 }
void W6100BusWriteByte(uint32_t addr, iodata_t data)
{
 8000730:	b480      	push	{r7}
 8000732:	b083      	sub	sp, #12
 8000734:	af00      	add	r7, sp, #0
 8000736:	6078      	str	r0, [r7, #4]
 8000738:	460b      	mov	r3, r1
 800073a:	70fb      	strb	r3, [r7, #3]
	#if 1	//teddy 210422
	(*(volatile uint8_t*)(addr)) = data;
 800073c:	687b      	ldr	r3, [r7, #4]
 800073e:	78fa      	ldrb	r2, [r7, #3]
 8000740:	701a      	strb	r2, [r3, #0]
	Indata[0] = data;
	printf("W%x:%x ",addr, data);
	if(HAL_SRAM_Write_8b(&hsram1, (uint32_t *)addr, (uint16_t *)data, 1) != HAL_OK)
		printf("BusWritError \r\n");
	#endif
}
 8000742:	bf00      	nop
 8000744:	370c      	adds	r7, #12
 8000746:	46bd      	mov	sp, r7
 8000748:	f85d 7b04 	ldr.w	r7, [sp], #4
 800074c:	4770      	bx	lr

0800074e <W6100BusReadByte>:

iodata_t W6100BusReadByte(uint32_t addr)
{
 800074e:	b480      	push	{r7}
 8000750:	b083      	sub	sp, #12
 8000752:	af00      	add	r7, sp, #0
 8000754:	6078      	str	r0, [r7, #4]
	#if 1	//teddy 210422
	return (*((volatile uint8_t*)(addr)));
 8000756:	687b      	ldr	r3, [r7, #4]
 8000758:	781b      	ldrb	r3, [r3, #0]
 800075a:	b2db      	uxtb	r3, r3
	if(HAL_SRAM_Read_8b(&hsram1, (uint32_t *)addr, (uint16_t *)result, 1) != HAL_OK)
		printf("BussReadError \r\n");
	printf("R%x:%x ", addr, result[0]);
	return result[0];
	#endif
}
 800075c:	4618      	mov	r0, r3
 800075e:	370c      	adds	r7, #12
 8000760:	46bd      	mov	sp, r7
 8000762:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000766:	4770      	bx	lr

08000768 <W6100Initialze>:
	if(HAL_SRAM_Read_8b(&hsram1, (uint32_t *)addr, pBuf, len) != HAL_OK)
			printf("BussReadError \r\n");

}
void W6100Initialze(void)
{
 8000768:	b590      	push	{r4, r7, lr}
 800076a:	b087      	sub	sp, #28
 800076c:	af00      	add	r7, sp, #0
#else
	/* Indirect bus method callback registration */
	#if defined BUS_DMA
		reg_wizchip_bus_cbfunc(W6100BusReadByte, W6100BusWriteByte, W6100BusReadBurst, W6100BusWriteBurst);
	#else
		reg_wizchip_bus_cbfunc(W6100BusReadByte, W6100BusWriteByte, 0, 0);
 800076e:	2300      	movs	r3, #0
 8000770:	2200      	movs	r2, #0
 8000772:	491c      	ldr	r1, [pc, #112]	; (80007e4 <W6100Initialze+0x7c>)
 8000774:	481c      	ldr	r0, [pc, #112]	; (80007e8 <W6100Initialze+0x80>)
 8000776:	f006 f959 	bl	8006a2c <reg_wizchip_bus_cbfunc>
	#endif
#endif
		uint8_t temp;
		unsigned char W6100_AdrSet[2][8] = {{2, 2, 2, 2, 2, 2, 2, 2}, {2, 2, 2, 2, 2, 2, 2, 2}};
 800077a:	4b1c      	ldr	r3, [pc, #112]	; (80007ec <W6100Initialze+0x84>)
 800077c:	1d3c      	adds	r4, r7, #4
 800077e:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8000780:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
			{
				printf("Unknown PHY link status.\r\n");
			}
		} while (temp == PHY_LINK_OFF);
	 	#endif
		uint16_t RegTemp = 0;
 8000784:	2300      	movs	r3, #0
 8000786:	82fb      	strh	r3, [r7, #22]
		//RegTemp = (uint16_t)WIZCHIP_READ(_CIDR_);
		//printf("CIDR_ = %04x \r\n", RegTemp);	
		RegTemp = getCIDR();
 8000788:	f04f 40c0 	mov.w	r0, #1610612736	; 0x60000000
 800078c:	f006 f87a 	bl	8006884 <WIZCHIP_READ>
 8000790:	4603      	mov	r3, r0
 8000792:	b29b      	uxth	r3, r3
 8000794:	021b      	lsls	r3, r3, #8
 8000796:	b29c      	uxth	r4, r3
 8000798:	4815      	ldr	r0, [pc, #84]	; (80007f0 <W6100Initialze+0x88>)
 800079a:	f006 f873 	bl	8006884 <WIZCHIP_READ>
 800079e:	4603      	mov	r3, r0
 80007a0:	b29b      	uxth	r3, r3
 80007a2:	4423      	add	r3, r4
 80007a4:	82fb      	strh	r3, [r7, #22]
		printf("CIDR = %d \r\n", RegTemp);
 80007a6:	8afb      	ldrh	r3, [r7, #22]
 80007a8:	4619      	mov	r1, r3
 80007aa:	4812      	ldr	r0, [pc, #72]	; (80007f4 <W6100Initialze+0x8c>)
 80007ac:	f006 f9b6 	bl	8006b1c <iprintf>
		RegTemp = getVER();
 80007b0:	4811      	ldr	r0, [pc, #68]	; (80007f8 <W6100Initialze+0x90>)
 80007b2:	f006 f867 	bl	8006884 <WIZCHIP_READ>
 80007b6:	4603      	mov	r3, r0
 80007b8:	b29b      	uxth	r3, r3
 80007ba:	021b      	lsls	r3, r3, #8
 80007bc:	b29c      	uxth	r4, r3
 80007be:	480f      	ldr	r0, [pc, #60]	; (80007fc <W6100Initialze+0x94>)
 80007c0:	f006 f860 	bl	8006884 <WIZCHIP_READ>
 80007c4:	4603      	mov	r3, r0
 80007c6:	b29b      	uxth	r3, r3
 80007c8:	4423      	add	r3, r4
 80007ca:	82fb      	strh	r3, [r7, #22]
		printf("VER = %d \r\n", RegTemp);
 80007cc:	8afb      	ldrh	r3, [r7, #22]
 80007ce:	4619      	mov	r1, r3
 80007d0:	480b      	ldr	r0, [pc, #44]	; (8000800 <W6100Initialze+0x98>)
 80007d2:	f006 f9a3 	bl	8006b1c <iprintf>
		printf("PHY OK.\r\n");
 80007d6:	480b      	ldr	r0, [pc, #44]	; (8000804 <W6100Initialze+0x9c>)
 80007d8:	f006 fa26 	bl	8006c28 <puts>
	
	
}
 80007dc:	bf00      	nop
 80007de:	371c      	adds	r7, #28
 80007e0:	46bd      	mov	sp, r7
 80007e2:	bd90      	pop	{r4, r7, pc}
 80007e4:	08000731 	.word	0x08000731
 80007e8:	0800074f 	.word	0x0800074f
 80007ec:	08007b14 	.word	0x08007b14
 80007f0:	60000100 	.word	0x60000100
 80007f4:	08007aec 	.word	0x08007aec
 80007f8:	60000200 	.word	0x60000200
 80007fc:	60000300 	.word	0x60000300
 8000800:	08007afc 	.word	0x08007afc
 8000804:	08007b08 	.word	0x08007b08

08000808 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000808:	b580      	push	{r7, lr}
 800080a:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800080c:	f000 fd50 	bl	80012b0 <HAL_Init>
  /* USER CODE BEGIN Init */
  
  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000810:	f000 f840 	bl	8000894 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000814:	f000 f9a2 	bl	8000b5c <MX_GPIO_Init>
  MX_USART3_UART_Init();
 8000818:	f000 f8e8 	bl	80009ec <MX_USART3_UART_Init>
  MX_USB_OTG_HS_USB_Init();
 800081c:	f000 f932 	bl	8000a84 <MX_USB_OTG_HS_USB_Init>
  MX_FMC_Init();
 8000820:	f000 f938 	bl	8000a94 <MX_FMC_Init>
  MX_DMA2D_Init();
 8000824:	f000 f8a8 	bl	8000978 <MX_DMA2D_Init>
  /* USER CODE BEGIN 2 */
  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_11|GPIO_PIN_3, GPIO_PIN_SET);
 8000828:	2201      	movs	r2, #1
 800082a:	f640 0108 	movw	r1, #2056	; 0x808
 800082e:	4815      	ldr	r0, [pc, #84]	; (8000884 <main+0x7c>)
 8000830:	f001 ff26 	bl	8002680 <HAL_GPIO_WritePin>
  HAL_Delay(100);
 8000834:	2064      	movs	r0, #100	; 0x64
 8000836:	f000 fdcd 	bl	80013d4 <HAL_Delay>
  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_11, GPIO_PIN_RESET);
 800083a:	2200      	movs	r2, #0
 800083c:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8000840:	4810      	ldr	r0, [pc, #64]	; (8000884 <main+0x7c>)
 8000842:	f001 ff1d 	bl	8002680 <HAL_GPIO_WritePin>
  HAL_Delay(500);
 8000846:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 800084a:	f000 fdc3 	bl	80013d4 <HAL_Delay>
  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_11, GPIO_PIN_SET);
 800084e:	2201      	movs	r2, #1
 8000850:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8000854:	480b      	ldr	r0, [pc, #44]	; (8000884 <main+0x7c>)
 8000856:	f001 ff13 	bl	8002680 <HAL_GPIO_WritePin>
  HAL_Delay(500);
 800085a:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 800085e:	f000 fdb9 	bl	80013d4 <HAL_Delay>
printf("Hello Start!!\r\n");
 8000862:	4809      	ldr	r0, [pc, #36]	; (8000888 <main+0x80>)
 8000864:	f006 f9e0 	bl	8006c28 <puts>
  Fill_Buffer(aTxBuffer, BUFFER_SIZE, 0xC20F);
 8000868:	f24c 220f 	movw	r2, #49679	; 0xc20f
 800086c:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000870:	4806      	ldr	r0, [pc, #24]	; (800088c <main+0x84>)
 8000872:	f7ff ff19 	bl	80006a8 <Fill_Buffer>
  //HAL_SRAM_Write_16b(&hsram1, (uint32_t *)(SRAM_BANK_ADDR + WRITE_READ_ADDR), (uint16_t *)aTxBuffer, BUFFER_SIZE*2);

  W6100Initialze();
 8000876:	f7ff ff77 	bl	8000768 <W6100Initialze>
  //ctlnetwork(CN_SET_NETINFO,&gWIZNETINFO);
  printf("Register value after W6100 initialize!\r\n");
 800087a:	4805      	ldr	r0, [pc, #20]	; (8000890 <main+0x88>)
 800087c:	f006 f9d4 	bl	8006c28 <puts>
  //print_network_information();
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000880:	e7fe      	b.n	8000880 <main+0x78>
 8000882:	bf00      	nop
 8000884:	58020c00 	.word	0x58020c00
 8000888:	08007b24 	.word	0x08007b24
 800088c:	20002810 	.word	0x20002810
 8000890:	08007b34 	.word	0x08007b34

08000894 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000894:	b580      	push	{r7, lr}
 8000896:	b09c      	sub	sp, #112	; 0x70
 8000898:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800089a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800089e:	224c      	movs	r2, #76	; 0x4c
 80008a0:	2100      	movs	r1, #0
 80008a2:	4618      	mov	r0, r3
 80008a4:	f006 f932 	bl	8006b0c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80008a8:	1d3b      	adds	r3, r7, #4
 80008aa:	2220      	movs	r2, #32
 80008ac:	2100      	movs	r1, #0
 80008ae:	4618      	mov	r0, r3
 80008b0:	f006 f92c 	bl	8006b0c <memset>

  /** Supply configuration update enable
  */
  HAL_PWREx_ConfigSupply(PWR_LDO_SUPPLY);
 80008b4:	2002      	movs	r0, #2
 80008b6:	f001 fefd 	bl	80026b4 <HAL_PWREx_ConfigSupply>
  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE2);
 80008ba:	2300      	movs	r3, #0
 80008bc:	603b      	str	r3, [r7, #0]
 80008be:	4b2d      	ldr	r3, [pc, #180]	; (8000974 <SystemClock_Config+0xe0>)
 80008c0:	699b      	ldr	r3, [r3, #24]
 80008c2:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 80008c6:	4a2b      	ldr	r2, [pc, #172]	; (8000974 <SystemClock_Config+0xe0>)
 80008c8:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80008cc:	6193      	str	r3, [r2, #24]
 80008ce:	4b29      	ldr	r3, [pc, #164]	; (8000974 <SystemClock_Config+0xe0>)
 80008d0:	699b      	ldr	r3, [r3, #24]
 80008d2:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 80008d6:	603b      	str	r3, [r7, #0]
 80008d8:	683b      	ldr	r3, [r7, #0]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 80008da:	bf00      	nop
 80008dc:	4b25      	ldr	r3, [pc, #148]	; (8000974 <SystemClock_Config+0xe0>)
 80008de:	699b      	ldr	r3, [r3, #24]
 80008e0:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80008e4:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80008e8:	d1f8      	bne.n	80008dc <SystemClock_Config+0x48>
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI48|RCC_OSCILLATORTYPE_HSI;
 80008ea:	2322      	movs	r3, #34	; 0x22
 80008ec:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.HSIState = RCC_HSI_DIV1;
 80008ee:	2301      	movs	r3, #1
 80008f0:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80008f2:	2340      	movs	r3, #64	; 0x40
 80008f4:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.HSI48State = RCC_HSI48_ON;
 80008f6:	2301      	movs	r3, #1
 80008f8:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80008fa:	2302      	movs	r3, #2
 80008fc:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 80008fe:	2300      	movs	r3, #0
 8000900:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLM = 4;
 8000902:	2304      	movs	r3, #4
 8000904:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLN = 12;
 8000906:	230c      	movs	r3, #12
 8000908:	657b      	str	r3, [r7, #84]	; 0x54
  RCC_OscInitStruct.PLL.PLLP = 1;
 800090a:	2301      	movs	r3, #1
 800090c:	65bb      	str	r3, [r7, #88]	; 0x58
  RCC_OscInitStruct.PLL.PLLQ = 4;
 800090e:	2304      	movs	r3, #4
 8000910:	65fb      	str	r3, [r7, #92]	; 0x5c
  RCC_OscInitStruct.PLL.PLLR = 2;
 8000912:	2302      	movs	r3, #2
 8000914:	663b      	str	r3, [r7, #96]	; 0x60
  RCC_OscInitStruct.PLL.PLLRGE = RCC_PLL1VCIRANGE_3;
 8000916:	230c      	movs	r3, #12
 8000918:	667b      	str	r3, [r7, #100]	; 0x64
  RCC_OscInitStruct.PLL.PLLVCOSEL = RCC_PLL1VCOWIDE;
 800091a:	2300      	movs	r3, #0
 800091c:	66bb      	str	r3, [r7, #104]	; 0x68
  RCC_OscInitStruct.PLL.PLLFRACN = 0;
 800091e:	2300      	movs	r3, #0
 8000920:	66fb      	str	r3, [r7, #108]	; 0x6c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000922:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000926:	4618      	mov	r0, r3
 8000928:	f001 fefe 	bl	8002728 <HAL_RCC_OscConfig>
 800092c:	4603      	mov	r3, r0
 800092e:	2b00      	cmp	r3, #0
 8000930:	d001      	beq.n	8000936 <SystemClock_Config+0xa2>
  {
    Error_Handler();
 8000932:	f000 fa03 	bl	8000d3c <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000936:	233f      	movs	r3, #63	; 0x3f
 8000938:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
                              |RCC_CLOCKTYPE_D3PCLK1|RCC_CLOCKTYPE_D1PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800093a:	2303      	movs	r3, #3
 800093c:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV1;
 800093e:	2300      	movs	r3, #0
 8000940:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV2;
 8000942:	2308      	movs	r3, #8
 8000944:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB3CLKDivider = RCC_APB3_DIV2;
 8000946:	2340      	movs	r3, #64	; 0x40
 8000948:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV2;
 800094a:	2340      	movs	r3, #64	; 0x40
 800094c:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_APB2_DIV2;
 800094e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000952:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB4CLKDivider = RCC_APB4_DIV2;
 8000954:	2340      	movs	r3, #64	; 0x40
 8000956:	623b      	str	r3, [r7, #32]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 8000958:	1d3b      	adds	r3, r7, #4
 800095a:	2101      	movs	r1, #1
 800095c:	4618      	mov	r0, r3
 800095e:	f002 fa71 	bl	8002e44 <HAL_RCC_ClockConfig>
 8000962:	4603      	mov	r3, r0
 8000964:	2b00      	cmp	r3, #0
 8000966:	d001      	beq.n	800096c <SystemClock_Config+0xd8>
  {
    Error_Handler();
 8000968:	f000 f9e8 	bl	8000d3c <Error_Handler>
  }
}
 800096c:	bf00      	nop
 800096e:	3770      	adds	r7, #112	; 0x70
 8000970:	46bd      	mov	sp, r7
 8000972:	bd80      	pop	{r7, pc}
 8000974:	58024800 	.word	0x58024800

08000978 <MX_DMA2D_Init>:
  * @brief DMA2D Initialization Function
  * @param None
  * @retval None
  */
static void MX_DMA2D_Init(void)
{
 8000978:	b580      	push	{r7, lr}
 800097a:	af00      	add	r7, sp, #0
  /* USER CODE END DMA2D_Init 0 */

  /* USER CODE BEGIN DMA2D_Init 1 */

  /* USER CODE END DMA2D_Init 1 */
  hdma2d.Instance = DMA2D;
 800097c:	4b19      	ldr	r3, [pc, #100]	; (80009e4 <MX_DMA2D_Init+0x6c>)
 800097e:	4a1a      	ldr	r2, [pc, #104]	; (80009e8 <MX_DMA2D_Init+0x70>)
 8000980:	601a      	str	r2, [r3, #0]
  hdma2d.Init.Mode = DMA2D_M2M;
 8000982:	4b18      	ldr	r3, [pc, #96]	; (80009e4 <MX_DMA2D_Init+0x6c>)
 8000984:	2200      	movs	r2, #0
 8000986:	605a      	str	r2, [r3, #4]
  hdma2d.Init.ColorMode = DMA2D_OUTPUT_ARGB8888;
 8000988:	4b16      	ldr	r3, [pc, #88]	; (80009e4 <MX_DMA2D_Init+0x6c>)
 800098a:	2200      	movs	r2, #0
 800098c:	609a      	str	r2, [r3, #8]
  hdma2d.Init.OutputOffset = 0;
 800098e:	4b15      	ldr	r3, [pc, #84]	; (80009e4 <MX_DMA2D_Init+0x6c>)
 8000990:	2200      	movs	r2, #0
 8000992:	60da      	str	r2, [r3, #12]
  hdma2d.LayerCfg[1].InputOffset = 0;
 8000994:	4b13      	ldr	r3, [pc, #76]	; (80009e4 <MX_DMA2D_Init+0x6c>)
 8000996:	2200      	movs	r2, #0
 8000998:	645a      	str	r2, [r3, #68]	; 0x44
  hdma2d.LayerCfg[1].InputColorMode = DMA2D_INPUT_ARGB8888;
 800099a:	4b12      	ldr	r3, [pc, #72]	; (80009e4 <MX_DMA2D_Init+0x6c>)
 800099c:	2200      	movs	r2, #0
 800099e:	649a      	str	r2, [r3, #72]	; 0x48
  hdma2d.LayerCfg[1].AlphaMode = DMA2D_NO_MODIF_ALPHA;
 80009a0:	4b10      	ldr	r3, [pc, #64]	; (80009e4 <MX_DMA2D_Init+0x6c>)
 80009a2:	2200      	movs	r2, #0
 80009a4:	64da      	str	r2, [r3, #76]	; 0x4c
  hdma2d.LayerCfg[1].InputAlpha = 0;
 80009a6:	4b0f      	ldr	r3, [pc, #60]	; (80009e4 <MX_DMA2D_Init+0x6c>)
 80009a8:	2200      	movs	r2, #0
 80009aa:	651a      	str	r2, [r3, #80]	; 0x50
  hdma2d.LayerCfg[1].AlphaInverted = DMA2D_REGULAR_ALPHA;
 80009ac:	4b0d      	ldr	r3, [pc, #52]	; (80009e4 <MX_DMA2D_Init+0x6c>)
 80009ae:	2200      	movs	r2, #0
 80009b0:	655a      	str	r2, [r3, #84]	; 0x54
  hdma2d.LayerCfg[1].RedBlueSwap = DMA2D_RB_REGULAR;
 80009b2:	4b0c      	ldr	r3, [pc, #48]	; (80009e4 <MX_DMA2D_Init+0x6c>)
 80009b4:	2200      	movs	r2, #0
 80009b6:	659a      	str	r2, [r3, #88]	; 0x58
  hdma2d.LayerCfg[1].ChromaSubSampling = DMA2D_NO_CSS;
 80009b8:	4b0a      	ldr	r3, [pc, #40]	; (80009e4 <MX_DMA2D_Init+0x6c>)
 80009ba:	2200      	movs	r2, #0
 80009bc:	65da      	str	r2, [r3, #92]	; 0x5c
  if (HAL_DMA2D_Init(&hdma2d) != HAL_OK)
 80009be:	4809      	ldr	r0, [pc, #36]	; (80009e4 <MX_DMA2D_Init+0x6c>)
 80009c0:	f001 fb9e 	bl	8002100 <HAL_DMA2D_Init>
 80009c4:	4603      	mov	r3, r0
 80009c6:	2b00      	cmp	r3, #0
 80009c8:	d001      	beq.n	80009ce <MX_DMA2D_Init+0x56>
  {
    Error_Handler();
 80009ca:	f000 f9b7 	bl	8000d3c <Error_Handler>
  }
  if (HAL_DMA2D_ConfigLayer(&hdma2d, 1) != HAL_OK)
 80009ce:	2101      	movs	r1, #1
 80009d0:	4804      	ldr	r0, [pc, #16]	; (80009e4 <MX_DMA2D_Init+0x6c>)
 80009d2:	f001 fbf9 	bl	80021c8 <HAL_DMA2D_ConfigLayer>
 80009d6:	4603      	mov	r3, r0
 80009d8:	2b00      	cmp	r3, #0
 80009da:	d001      	beq.n	80009e0 <MX_DMA2D_Init+0x68>
  {
    Error_Handler();
 80009dc:	f000 f9ae 	bl	8000d3c <Error_Handler>
  }
  /* USER CODE BEGIN DMA2D_Init 2 */

  /* USER CODE END DMA2D_Init 2 */

}
 80009e0:	bf00      	nop
 80009e2:	bd80      	pop	{r7, pc}
 80009e4:	20001ba8 	.word	0x20001ba8
 80009e8:	52001000 	.word	0x52001000

080009ec <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 80009ec:	b580      	push	{r7, lr}
 80009ee:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 80009f0:	4b22      	ldr	r3, [pc, #136]	; (8000a7c <MX_USART3_UART_Init+0x90>)
 80009f2:	4a23      	ldr	r2, [pc, #140]	; (8000a80 <MX_USART3_UART_Init+0x94>)
 80009f4:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 80009f6:	4b21      	ldr	r3, [pc, #132]	; (8000a7c <MX_USART3_UART_Init+0x90>)
 80009f8:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80009fc:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 80009fe:	4b1f      	ldr	r3, [pc, #124]	; (8000a7c <MX_USART3_UART_Init+0x90>)
 8000a00:	2200      	movs	r2, #0
 8000a02:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8000a04:	4b1d      	ldr	r3, [pc, #116]	; (8000a7c <MX_USART3_UART_Init+0x90>)
 8000a06:	2200      	movs	r2, #0
 8000a08:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8000a0a:	4b1c      	ldr	r3, [pc, #112]	; (8000a7c <MX_USART3_UART_Init+0x90>)
 8000a0c:	2200      	movs	r2, #0
 8000a0e:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8000a10:	4b1a      	ldr	r3, [pc, #104]	; (8000a7c <MX_USART3_UART_Init+0x90>)
 8000a12:	220c      	movs	r2, #12
 8000a14:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000a16:	4b19      	ldr	r3, [pc, #100]	; (8000a7c <MX_USART3_UART_Init+0x90>)
 8000a18:	2200      	movs	r2, #0
 8000a1a:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8000a1c:	4b17      	ldr	r3, [pc, #92]	; (8000a7c <MX_USART3_UART_Init+0x90>)
 8000a1e:	2200      	movs	r2, #0
 8000a20:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000a22:	4b16      	ldr	r3, [pc, #88]	; (8000a7c <MX_USART3_UART_Init+0x90>)
 8000a24:	2200      	movs	r2, #0
 8000a26:	621a      	str	r2, [r3, #32]
  huart3.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8000a28:	4b14      	ldr	r3, [pc, #80]	; (8000a7c <MX_USART3_UART_Init+0x90>)
 8000a2a:	2200      	movs	r2, #0
 8000a2c:	625a      	str	r2, [r3, #36]	; 0x24
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000a2e:	4b13      	ldr	r3, [pc, #76]	; (8000a7c <MX_USART3_UART_Init+0x90>)
 8000a30:	2200      	movs	r2, #0
 8000a32:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8000a34:	4811      	ldr	r0, [pc, #68]	; (8000a7c <MX_USART3_UART_Init+0x90>)
 8000a36:	f004 f8fd 	bl	8004c34 <HAL_UART_Init>
 8000a3a:	4603      	mov	r3, r0
 8000a3c:	2b00      	cmp	r3, #0
 8000a3e:	d001      	beq.n	8000a44 <MX_USART3_UART_Init+0x58>
  {
    Error_Handler();
 8000a40:	f000 f97c 	bl	8000d3c <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart3, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000a44:	2100      	movs	r1, #0
 8000a46:	480d      	ldr	r0, [pc, #52]	; (8000a7c <MX_USART3_UART_Init+0x90>)
 8000a48:	f005 fd39 	bl	80064be <HAL_UARTEx_SetTxFifoThreshold>
 8000a4c:	4603      	mov	r3, r0
 8000a4e:	2b00      	cmp	r3, #0
 8000a50:	d001      	beq.n	8000a56 <MX_USART3_UART_Init+0x6a>
  {
    Error_Handler();
 8000a52:	f000 f973 	bl	8000d3c <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart3, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000a56:	2100      	movs	r1, #0
 8000a58:	4808      	ldr	r0, [pc, #32]	; (8000a7c <MX_USART3_UART_Init+0x90>)
 8000a5a:	f005 fd6e 	bl	800653a <HAL_UARTEx_SetRxFifoThreshold>
 8000a5e:	4603      	mov	r3, r0
 8000a60:	2b00      	cmp	r3, #0
 8000a62:	d001      	beq.n	8000a68 <MX_USART3_UART_Init+0x7c>
  {
    Error_Handler();
 8000a64:	f000 f96a 	bl	8000d3c <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart3) != HAL_OK)
 8000a68:	4804      	ldr	r0, [pc, #16]	; (8000a7c <MX_USART3_UART_Init+0x90>)
 8000a6a:	f005 fcef 	bl	800644c <HAL_UARTEx_DisableFifoMode>
 8000a6e:	4603      	mov	r3, r0
 8000a70:	2b00      	cmp	r3, #0
 8000a72:	d001      	beq.n	8000a78 <MX_USART3_UART_Init+0x8c>
  {
    Error_Handler();
 8000a74:	f000 f962 	bl	8000d3c <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8000a78:	bf00      	nop
 8000a7a:	bd80      	pop	{r7, pc}
 8000a7c:	200008cc 	.word	0x200008cc
 8000a80:	40004800 	.word	0x40004800

08000a84 <MX_USB_OTG_HS_USB_Init>:
  * @brief USB_OTG_HS Initialization Function
  * @param None
  * @retval None
  */
static void MX_USB_OTG_HS_USB_Init(void)
{
 8000a84:	b480      	push	{r7}
 8000a86:	af00      	add	r7, sp, #0
  /* USER CODE END USB_OTG_HS_Init 1 */
  /* USER CODE BEGIN USB_OTG_HS_Init 2 */

  /* USER CODE END USB_OTG_HS_Init 2 */

}
 8000a88:	bf00      	nop
 8000a8a:	46bd      	mov	sp, r7
 8000a8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a90:	4770      	bx	lr
	...

08000a94 <MX_FMC_Init>:

/* FMC initialization function */
static void MX_FMC_Init(void)
{
 8000a94:	b580      	push	{r7, lr}
 8000a96:	b088      	sub	sp, #32
 8000a98:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN FMC_Init 0 */

  /* USER CODE END FMC_Init 0 */

  FMC_NORSRAM_TimingTypeDef Timing = {0};
 8000a9a:	1d3b      	adds	r3, r7, #4
 8000a9c:	2200      	movs	r2, #0
 8000a9e:	601a      	str	r2, [r3, #0]
 8000aa0:	605a      	str	r2, [r3, #4]
 8000aa2:	609a      	str	r2, [r3, #8]
 8000aa4:	60da      	str	r2, [r3, #12]
 8000aa6:	611a      	str	r2, [r3, #16]
 8000aa8:	615a      	str	r2, [r3, #20]
 8000aaa:	619a      	str	r2, [r3, #24]

  /* USER CODE END FMC_Init 1 */

  /** Perform the SRAM1 memory initialization sequence
  */
  hsram1.Instance = FMC_NORSRAM_DEVICE;
 8000aac:	4b28      	ldr	r3, [pc, #160]	; (8000b50 <MX_FMC_Init+0xbc>)
 8000aae:	4a29      	ldr	r2, [pc, #164]	; (8000b54 <MX_FMC_Init+0xc0>)
 8000ab0:	601a      	str	r2, [r3, #0]
  hsram1.Extended = FMC_NORSRAM_EXTENDED_DEVICE;
 8000ab2:	4b27      	ldr	r3, [pc, #156]	; (8000b50 <MX_FMC_Init+0xbc>)
 8000ab4:	4a28      	ldr	r2, [pc, #160]	; (8000b58 <MX_FMC_Init+0xc4>)
 8000ab6:	605a      	str	r2, [r3, #4]
  /* hsram1.Init */
  hsram1.Init.NSBank = FMC_NORSRAM_BANK1;
 8000ab8:	4b25      	ldr	r3, [pc, #148]	; (8000b50 <MX_FMC_Init+0xbc>)
 8000aba:	2200      	movs	r2, #0
 8000abc:	609a      	str	r2, [r3, #8]
  hsram1.Init.DataAddressMux = FMC_DATA_ADDRESS_MUX_DISABLE;
 8000abe:	4b24      	ldr	r3, [pc, #144]	; (8000b50 <MX_FMC_Init+0xbc>)
 8000ac0:	2200      	movs	r2, #0
 8000ac2:	60da      	str	r2, [r3, #12]
  hsram1.Init.MemoryType = FMC_MEMORY_TYPE_SRAM;
 8000ac4:	4b22      	ldr	r3, [pc, #136]	; (8000b50 <MX_FMC_Init+0xbc>)
 8000ac6:	2200      	movs	r2, #0
 8000ac8:	611a      	str	r2, [r3, #16]
  hsram1.Init.MemoryDataWidth = FMC_NORSRAM_MEM_BUS_WIDTH_8;
 8000aca:	4b21      	ldr	r3, [pc, #132]	; (8000b50 <MX_FMC_Init+0xbc>)
 8000acc:	2200      	movs	r2, #0
 8000ace:	615a      	str	r2, [r3, #20]
  hsram1.Init.BurstAccessMode = FMC_BURST_ACCESS_MODE_DISABLE;
 8000ad0:	4b1f      	ldr	r3, [pc, #124]	; (8000b50 <MX_FMC_Init+0xbc>)
 8000ad2:	2200      	movs	r2, #0
 8000ad4:	619a      	str	r2, [r3, #24]
  hsram1.Init.WaitSignalPolarity = FMC_WAIT_SIGNAL_POLARITY_LOW;
 8000ad6:	4b1e      	ldr	r3, [pc, #120]	; (8000b50 <MX_FMC_Init+0xbc>)
 8000ad8:	2200      	movs	r2, #0
 8000ada:	61da      	str	r2, [r3, #28]
  hsram1.Init.WaitSignalActive = FMC_WAIT_TIMING_BEFORE_WS;
 8000adc:	4b1c      	ldr	r3, [pc, #112]	; (8000b50 <MX_FMC_Init+0xbc>)
 8000ade:	2200      	movs	r2, #0
 8000ae0:	621a      	str	r2, [r3, #32]
  hsram1.Init.WriteOperation = FMC_WRITE_OPERATION_ENABLE;
 8000ae2:	4b1b      	ldr	r3, [pc, #108]	; (8000b50 <MX_FMC_Init+0xbc>)
 8000ae4:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8000ae8:	625a      	str	r2, [r3, #36]	; 0x24
  hsram1.Init.WaitSignal = FMC_WAIT_SIGNAL_DISABLE;
 8000aea:	4b19      	ldr	r3, [pc, #100]	; (8000b50 <MX_FMC_Init+0xbc>)
 8000aec:	2200      	movs	r2, #0
 8000aee:	629a      	str	r2, [r3, #40]	; 0x28
  hsram1.Init.ExtendedMode = FMC_EXTENDED_MODE_DISABLE;
 8000af0:	4b17      	ldr	r3, [pc, #92]	; (8000b50 <MX_FMC_Init+0xbc>)
 8000af2:	2200      	movs	r2, #0
 8000af4:	62da      	str	r2, [r3, #44]	; 0x2c
  hsram1.Init.AsynchronousWait = FMC_ASYNCHRONOUS_WAIT_DISABLE;
 8000af6:	4b16      	ldr	r3, [pc, #88]	; (8000b50 <MX_FMC_Init+0xbc>)
 8000af8:	2200      	movs	r2, #0
 8000afa:	631a      	str	r2, [r3, #48]	; 0x30
  hsram1.Init.WriteBurst = FMC_WRITE_BURST_DISABLE;
 8000afc:	4b14      	ldr	r3, [pc, #80]	; (8000b50 <MX_FMC_Init+0xbc>)
 8000afe:	2200      	movs	r2, #0
 8000b00:	635a      	str	r2, [r3, #52]	; 0x34
  hsram1.Init.ContinuousClock = FMC_CONTINUOUS_CLOCK_SYNC_ONLY;
 8000b02:	4b13      	ldr	r3, [pc, #76]	; (8000b50 <MX_FMC_Init+0xbc>)
 8000b04:	2200      	movs	r2, #0
 8000b06:	639a      	str	r2, [r3, #56]	; 0x38
  hsram1.Init.WriteFifo = FMC_WRITE_FIFO_DISABLE;
 8000b08:	4b11      	ldr	r3, [pc, #68]	; (8000b50 <MX_FMC_Init+0xbc>)
 8000b0a:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 8000b0e:	63da      	str	r2, [r3, #60]	; 0x3c
  hsram1.Init.PageSize = FMC_PAGE_SIZE_NONE;
 8000b10:	4b0f      	ldr	r3, [pc, #60]	; (8000b50 <MX_FMC_Init+0xbc>)
 8000b12:	2200      	movs	r2, #0
 8000b14:	641a      	str	r2, [r3, #64]	; 0x40
  /* Timing */
  Timing.AddressSetupTime = 4;
 8000b16:	2304      	movs	r3, #4
 8000b18:	607b      	str	r3, [r7, #4]
  Timing.AddressHoldTime = 15;
 8000b1a:	230f      	movs	r3, #15
 8000b1c:	60bb      	str	r3, [r7, #8]
  Timing.DataSetupTime = 2;
 8000b1e:	2302      	movs	r3, #2
 8000b20:	60fb      	str	r3, [r7, #12]
  Timing.BusTurnAroundDuration = 1;
 8000b22:	2301      	movs	r3, #1
 8000b24:	613b      	str	r3, [r7, #16]
  Timing.CLKDivision = 16;
 8000b26:	2310      	movs	r3, #16
 8000b28:	617b      	str	r3, [r7, #20]
  Timing.DataLatency = 17;
 8000b2a:	2311      	movs	r3, #17
 8000b2c:	61bb      	str	r3, [r7, #24]
  Timing.AccessMode = FMC_ACCESS_MODE_A;
 8000b2e:	2300      	movs	r3, #0
 8000b30:	61fb      	str	r3, [r7, #28]
  /* ExtTiming */

  if (HAL_SRAM_Init(&hsram1, &Timing, NULL) != HAL_OK)
 8000b32:	1d3b      	adds	r3, r7, #4
 8000b34:	2200      	movs	r2, #0
 8000b36:	4619      	mov	r1, r3
 8000b38:	4805      	ldr	r0, [pc, #20]	; (8000b50 <MX_FMC_Init+0xbc>)
 8000b3a:	f004 f82b 	bl	8004b94 <HAL_SRAM_Init>
 8000b3e:	4603      	mov	r3, r0
 8000b40:	2b00      	cmp	r3, #0
 8000b42:	d001      	beq.n	8000b48 <MX_FMC_Init+0xb4>
  {
    Error_Handler( );
 8000b44:	f000 f8fa 	bl	8000d3c <Error_Handler>
  }

  /* USER CODE BEGIN FMC_Init 2 */

  /* USER CODE END FMC_Init 2 */
}
 8000b48:	bf00      	nop
 8000b4a:	3720      	adds	r7, #32
 8000b4c:	46bd      	mov	sp, r7
 8000b4e:	bd80      	pop	{r7, pc}
 8000b50:	20000d5c 	.word	0x20000d5c
 8000b54:	52004000 	.word	0x52004000
 8000b58:	52004104 	.word	0x52004104

08000b5c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000b5c:	b580      	push	{r7, lr}
 8000b5e:	b08c      	sub	sp, #48	; 0x30
 8000b60:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000b62:	f107 031c 	add.w	r3, r7, #28
 8000b66:	2200      	movs	r2, #0
 8000b68:	601a      	str	r2, [r3, #0]
 8000b6a:	605a      	str	r2, [r3, #4]
 8000b6c:	609a      	str	r2, [r3, #8]
 8000b6e:	60da      	str	r2, [r3, #12]
 8000b70:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000b72:	4b6a      	ldr	r3, [pc, #424]	; (8000d1c <MX_GPIO_Init+0x1c0>)
 8000b74:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000b78:	4a68      	ldr	r2, [pc, #416]	; (8000d1c <MX_GPIO_Init+0x1c0>)
 8000b7a:	f043 0304 	orr.w	r3, r3, #4
 8000b7e:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000b82:	4b66      	ldr	r3, [pc, #408]	; (8000d1c <MX_GPIO_Init+0x1c0>)
 8000b84:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000b88:	f003 0304 	and.w	r3, r3, #4
 8000b8c:	61bb      	str	r3, [r7, #24]
 8000b8e:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8000b90:	4b62      	ldr	r3, [pc, #392]	; (8000d1c <MX_GPIO_Init+0x1c0>)
 8000b92:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000b96:	4a61      	ldr	r2, [pc, #388]	; (8000d1c <MX_GPIO_Init+0x1c0>)
 8000b98:	f043 0320 	orr.w	r3, r3, #32
 8000b9c:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000ba0:	4b5e      	ldr	r3, [pc, #376]	; (8000d1c <MX_GPIO_Init+0x1c0>)
 8000ba2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000ba6:	f003 0320 	and.w	r3, r3, #32
 8000baa:	617b      	str	r3, [r7, #20]
 8000bac:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000bae:	4b5b      	ldr	r3, [pc, #364]	; (8000d1c <MX_GPIO_Init+0x1c0>)
 8000bb0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000bb4:	4a59      	ldr	r2, [pc, #356]	; (8000d1c <MX_GPIO_Init+0x1c0>)
 8000bb6:	f043 0302 	orr.w	r3, r3, #2
 8000bba:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000bbe:	4b57      	ldr	r3, [pc, #348]	; (8000d1c <MX_GPIO_Init+0x1c0>)
 8000bc0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000bc4:	f003 0302 	and.w	r3, r3, #2
 8000bc8:	613b      	str	r3, [r7, #16]
 8000bca:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8000bcc:	4b53      	ldr	r3, [pc, #332]	; (8000d1c <MX_GPIO_Init+0x1c0>)
 8000bce:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000bd2:	4a52      	ldr	r2, [pc, #328]	; (8000d1c <MX_GPIO_Init+0x1c0>)
 8000bd4:	f043 0310 	orr.w	r3, r3, #16
 8000bd8:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000bdc:	4b4f      	ldr	r3, [pc, #316]	; (8000d1c <MX_GPIO_Init+0x1c0>)
 8000bde:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000be2:	f003 0310 	and.w	r3, r3, #16
 8000be6:	60fb      	str	r3, [r7, #12]
 8000be8:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000bea:	4b4c      	ldr	r3, [pc, #304]	; (8000d1c <MX_GPIO_Init+0x1c0>)
 8000bec:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000bf0:	4a4a      	ldr	r2, [pc, #296]	; (8000d1c <MX_GPIO_Init+0x1c0>)
 8000bf2:	f043 0308 	orr.w	r3, r3, #8
 8000bf6:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000bfa:	4b48      	ldr	r3, [pc, #288]	; (8000d1c <MX_GPIO_Init+0x1c0>)
 8000bfc:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000c00:	f003 0308 	and.w	r3, r3, #8
 8000c04:	60bb      	str	r3, [r7, #8]
 8000c06:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8000c08:	4b44      	ldr	r3, [pc, #272]	; (8000d1c <MX_GPIO_Init+0x1c0>)
 8000c0a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000c0e:	4a43      	ldr	r2, [pc, #268]	; (8000d1c <MX_GPIO_Init+0x1c0>)
 8000c10:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000c14:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000c18:	4b40      	ldr	r3, [pc, #256]	; (8000d1c <MX_GPIO_Init+0x1c0>)
 8000c1a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000c1e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000c22:	607b      	str	r3, [r7, #4]
 8000c24:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000c26:	4b3d      	ldr	r3, [pc, #244]	; (8000d1c <MX_GPIO_Init+0x1c0>)
 8000c28:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000c2c:	4a3b      	ldr	r2, [pc, #236]	; (8000d1c <MX_GPIO_Init+0x1c0>)
 8000c2e:	f043 0301 	orr.w	r3, r3, #1
 8000c32:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000c36:	4b39      	ldr	r3, [pc, #228]	; (8000d1c <MX_GPIO_Init+0x1c0>)
 8000c38:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000c3c:	f003 0301 	and.w	r3, r3, #1
 8000c40:	603b      	str	r3, [r7, #0]
 8000c42:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LED_GREEN_Pin|LED_RED_Pin, GPIO_PIN_RESET);
 8000c44:	2200      	movs	r2, #0
 8000c46:	f244 0101 	movw	r1, #16385	; 0x4001
 8000c4a:	4835      	ldr	r0, [pc, #212]	; (8000d20 <MX_GPIO_Init+0x1c4>)
 8000c4c:	f001 fd18 	bl	8002680 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, USB_FS_PWR_EN_Pin|GPIO_PIN_11|GPIO_PIN_3, GPIO_PIN_RESET);
 8000c50:	2200      	movs	r2, #0
 8000c52:	f640 4108 	movw	r1, #3080	; 0xc08
 8000c56:	4833      	ldr	r0, [pc, #204]	; (8000d24 <MX_GPIO_Init+0x1c8>)
 8000c58:	f001 fd12 	bl	8002680 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED_YELLOW_GPIO_Port, LED_YELLOW_Pin, GPIO_PIN_RESET);
 8000c5c:	2200      	movs	r2, #0
 8000c5e:	2102      	movs	r1, #2
 8000c60:	4831      	ldr	r0, [pc, #196]	; (8000d28 <MX_GPIO_Init+0x1cc>)
 8000c62:	f001 fd0d 	bl	8002680 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8000c66:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000c6a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000c6c:	2300      	movs	r3, #0
 8000c6e:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c70:	2300      	movs	r3, #0
 8000c72:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8000c74:	f107 031c 	add.w	r3, r7, #28
 8000c78:	4619      	mov	r1, r3
 8000c7a:	482c      	ldr	r0, [pc, #176]	; (8000d2c <MX_GPIO_Init+0x1d0>)
 8000c7c:	f001 fb58 	bl	8002330 <HAL_GPIO_Init>

  /*Configure GPIO pins : LED_GREEN_Pin LED_RED_Pin */
  GPIO_InitStruct.Pin = LED_GREEN_Pin|LED_RED_Pin;
 8000c80:	f244 0301 	movw	r3, #16385	; 0x4001
 8000c84:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000c86:	2301      	movs	r3, #1
 8000c88:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c8a:	2300      	movs	r3, #0
 8000c8c:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000c8e:	2300      	movs	r3, #0
 8000c90:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000c92:	f107 031c 	add.w	r3, r7, #28
 8000c96:	4619      	mov	r1, r3
 8000c98:	4821      	ldr	r0, [pc, #132]	; (8000d20 <MX_GPIO_Init+0x1c4>)
 8000c9a:	f001 fb49 	bl	8002330 <HAL_GPIO_Init>

  /*Configure GPIO pins : USB_FS_PWR_EN_Pin PD11 PD3 */
  GPIO_InitStruct.Pin = USB_FS_PWR_EN_Pin|GPIO_PIN_11|GPIO_PIN_3;
 8000c9e:	f640 4308 	movw	r3, #3080	; 0xc08
 8000ca2:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000ca4:	2301      	movs	r3, #1
 8000ca6:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ca8:	2300      	movs	r3, #0
 8000caa:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000cac:	2300      	movs	r3, #0
 8000cae:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000cb0:	f107 031c 	add.w	r3, r7, #28
 8000cb4:	4619      	mov	r1, r3
 8000cb6:	481b      	ldr	r0, [pc, #108]	; (8000d24 <MX_GPIO_Init+0x1c8>)
 8000cb8:	f001 fb3a 	bl	8002330 <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_FS_OVCR_Pin */
  GPIO_InitStruct.Pin = USB_FS_OVCR_Pin;
 8000cbc:	2380      	movs	r3, #128	; 0x80
 8000cbe:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000cc0:	4b1b      	ldr	r3, [pc, #108]	; (8000d30 <MX_GPIO_Init+0x1d4>)
 8000cc2:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000cc4:	2300      	movs	r3, #0
 8000cc6:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(USB_FS_OVCR_GPIO_Port, &GPIO_InitStruct);
 8000cc8:	f107 031c 	add.w	r3, r7, #28
 8000ccc:	4619      	mov	r1, r3
 8000cce:	4819      	ldr	r0, [pc, #100]	; (8000d34 <MX_GPIO_Init+0x1d8>)
 8000cd0:	f001 fb2e 	bl	8002330 <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_FS_ID_Pin */
  GPIO_InitStruct.Pin = USB_FS_ID_Pin;
 8000cd4:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000cd8:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000cda:	2302      	movs	r3, #2
 8000cdc:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000cde:	2300      	movs	r3, #0
 8000ce0:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000ce2:	2300      	movs	r3, #0
 8000ce4:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG1_HS;
 8000ce6:	230a      	movs	r3, #10
 8000ce8:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(USB_FS_ID_GPIO_Port, &GPIO_InitStruct);
 8000cea:	f107 031c 	add.w	r3, r7, #28
 8000cee:	4619      	mov	r1, r3
 8000cf0:	4811      	ldr	r0, [pc, #68]	; (8000d38 <MX_GPIO_Init+0x1dc>)
 8000cf2:	f001 fb1d 	bl	8002330 <HAL_GPIO_Init>

  /*Configure GPIO pin : LED_YELLOW_Pin */
  GPIO_InitStruct.Pin = LED_YELLOW_Pin;
 8000cf6:	2302      	movs	r3, #2
 8000cf8:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000cfa:	2301      	movs	r3, #1
 8000cfc:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000cfe:	2300      	movs	r3, #0
 8000d00:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000d02:	2300      	movs	r3, #0
 8000d04:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(LED_YELLOW_GPIO_Port, &GPIO_InitStruct);
 8000d06:	f107 031c 	add.w	r3, r7, #28
 8000d0a:	4619      	mov	r1, r3
 8000d0c:	4806      	ldr	r0, [pc, #24]	; (8000d28 <MX_GPIO_Init+0x1cc>)
 8000d0e:	f001 fb0f 	bl	8002330 <HAL_GPIO_Init>

}
 8000d12:	bf00      	nop
 8000d14:	3730      	adds	r7, #48	; 0x30
 8000d16:	46bd      	mov	sp, r7
 8000d18:	bd80      	pop	{r7, pc}
 8000d1a:	bf00      	nop
 8000d1c:	58024400 	.word	0x58024400
 8000d20:	58020400 	.word	0x58020400
 8000d24:	58020c00 	.word	0x58020c00
 8000d28:	58021000 	.word	0x58021000
 8000d2c:	58020800 	.word	0x58020800
 8000d30:	11110000 	.word	0x11110000
 8000d34:	58021800 	.word	0x58021800
 8000d38:	58020000 	.word	0x58020000

08000d3c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000d3c:	b480      	push	{r7}
 8000d3e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000d40:	b672      	cpsid	i
}
 8000d42:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000d44:	e7fe      	b.n	8000d44 <Error_Handler+0x8>
	...

08000d48 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000d48:	b480      	push	{r7}
 8000d4a:	b083      	sub	sp, #12
 8000d4c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000d4e:	4b0a      	ldr	r3, [pc, #40]	; (8000d78 <HAL_MspInit+0x30>)
 8000d50:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8000d54:	4a08      	ldr	r2, [pc, #32]	; (8000d78 <HAL_MspInit+0x30>)
 8000d56:	f043 0302 	orr.w	r3, r3, #2
 8000d5a:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 8000d5e:	4b06      	ldr	r3, [pc, #24]	; (8000d78 <HAL_MspInit+0x30>)
 8000d60:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8000d64:	f003 0302 	and.w	r3, r3, #2
 8000d68:	607b      	str	r3, [r7, #4]
 8000d6a:	687b      	ldr	r3, [r7, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000d6c:	bf00      	nop
 8000d6e:	370c      	adds	r7, #12
 8000d70:	46bd      	mov	sp, r7
 8000d72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d76:	4770      	bx	lr
 8000d78:	58024400 	.word	0x58024400

08000d7c <HAL_DMA2D_MspInit>:
* This function configures the hardware resources used in this example
* @param hdma2d: DMA2D handle pointer
* @retval None
*/
void HAL_DMA2D_MspInit(DMA2D_HandleTypeDef* hdma2d)
{
 8000d7c:	b480      	push	{r7}
 8000d7e:	b085      	sub	sp, #20
 8000d80:	af00      	add	r7, sp, #0
 8000d82:	6078      	str	r0, [r7, #4]
  if(hdma2d->Instance==DMA2D)
 8000d84:	687b      	ldr	r3, [r7, #4]
 8000d86:	681b      	ldr	r3, [r3, #0]
 8000d88:	4a0b      	ldr	r2, [pc, #44]	; (8000db8 <HAL_DMA2D_MspInit+0x3c>)
 8000d8a:	4293      	cmp	r3, r2
 8000d8c:	d10e      	bne.n	8000dac <HAL_DMA2D_MspInit+0x30>
  {
  /* USER CODE BEGIN DMA2D_MspInit 0 */

  /* USER CODE END DMA2D_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_DMA2D_CLK_ENABLE();
 8000d8e:	4b0b      	ldr	r3, [pc, #44]	; (8000dbc <HAL_DMA2D_MspInit+0x40>)
 8000d90:	f8d3 30d4 	ldr.w	r3, [r3, #212]	; 0xd4
 8000d94:	4a09      	ldr	r2, [pc, #36]	; (8000dbc <HAL_DMA2D_MspInit+0x40>)
 8000d96:	f043 0310 	orr.w	r3, r3, #16
 8000d9a:	f8c2 30d4 	str.w	r3, [r2, #212]	; 0xd4
 8000d9e:	4b07      	ldr	r3, [pc, #28]	; (8000dbc <HAL_DMA2D_MspInit+0x40>)
 8000da0:	f8d3 30d4 	ldr.w	r3, [r3, #212]	; 0xd4
 8000da4:	f003 0310 	and.w	r3, r3, #16
 8000da8:	60fb      	str	r3, [r7, #12]
 8000daa:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN DMA2D_MspInit 1 */

  /* USER CODE END DMA2D_MspInit 1 */
  }

}
 8000dac:	bf00      	nop
 8000dae:	3714      	adds	r7, #20
 8000db0:	46bd      	mov	sp, r7
 8000db2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000db6:	4770      	bx	lr
 8000db8:	52001000 	.word	0x52001000
 8000dbc:	58024400 	.word	0x58024400

08000dc0 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000dc0:	b580      	push	{r7, lr}
 8000dc2:	b0b6      	sub	sp, #216	; 0xd8
 8000dc4:	af00      	add	r7, sp, #0
 8000dc6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000dc8:	f107 03c4 	add.w	r3, r7, #196	; 0xc4
 8000dcc:	2200      	movs	r2, #0
 8000dce:	601a      	str	r2, [r3, #0]
 8000dd0:	605a      	str	r2, [r3, #4]
 8000dd2:	609a      	str	r2, [r3, #8]
 8000dd4:	60da      	str	r2, [r3, #12]
 8000dd6:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000dd8:	f107 0310 	add.w	r3, r7, #16
 8000ddc:	22b4      	movs	r2, #180	; 0xb4
 8000dde:	2100      	movs	r1, #0
 8000de0:	4618      	mov	r0, r3
 8000de2:	f005 fe93 	bl	8006b0c <memset>
  if(huart->Instance==USART3)
 8000de6:	687b      	ldr	r3, [r7, #4]
 8000de8:	681b      	ldr	r3, [r3, #0]
 8000dea:	4a29      	ldr	r2, [pc, #164]	; (8000e90 <HAL_UART_MspInit+0xd0>)
 8000dec:	4293      	cmp	r3, r2
 8000dee:	d14a      	bne.n	8000e86 <HAL_UART_MspInit+0xc6>
  /* USER CODE BEGIN USART3_MspInit 0 */

  /* USER CODE END USART3_MspInit 0 */
  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 8000df0:	2302      	movs	r3, #2
 8000df2:	613b      	str	r3, [r7, #16]
    PeriphClkInitStruct.Usart234578ClockSelection = RCC_USART234578CLKSOURCE_D2PCLK1;
 8000df4:	2300      	movs	r3, #0
 8000df6:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000dfa:	f107 0310 	add.w	r3, r7, #16
 8000dfe:	4618      	mov	r0, r3
 8000e00:	f002 fbac 	bl	800355c <HAL_RCCEx_PeriphCLKConfig>
 8000e04:	4603      	mov	r3, r0
 8000e06:	2b00      	cmp	r3, #0
 8000e08:	d001      	beq.n	8000e0e <HAL_UART_MspInit+0x4e>
    {
      Error_Handler();
 8000e0a:	f7ff ff97 	bl	8000d3c <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 8000e0e:	4b21      	ldr	r3, [pc, #132]	; (8000e94 <HAL_UART_MspInit+0xd4>)
 8000e10:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8000e14:	4a1f      	ldr	r2, [pc, #124]	; (8000e94 <HAL_UART_MspInit+0xd4>)
 8000e16:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000e1a:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8000e1e:	4b1d      	ldr	r3, [pc, #116]	; (8000e94 <HAL_UART_MspInit+0xd4>)
 8000e20:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8000e24:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8000e28:	60fb      	str	r3, [r7, #12]
 8000e2a:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 8000e2c:	4b19      	ldr	r3, [pc, #100]	; (8000e94 <HAL_UART_MspInit+0xd4>)
 8000e2e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000e32:	4a18      	ldr	r2, [pc, #96]	; (8000e94 <HAL_UART_MspInit+0xd4>)
 8000e34:	f043 0308 	orr.w	r3, r3, #8
 8000e38:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000e3c:	4b15      	ldr	r3, [pc, #84]	; (8000e94 <HAL_UART_MspInit+0xd4>)
 8000e3e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000e42:	f003 0308 	and.w	r3, r3, #8
 8000e46:	60bb      	str	r3, [r7, #8]
 8000e48:	68bb      	ldr	r3, [r7, #8]
    /**USART3 GPIO Configuration
    PD8     ------> USART3_TX
    PD9     ------> USART3_RX
    */
    GPIO_InitStruct.Pin = STLK_VCP_RX_Pin|STLK_VCP_TX_Pin;
 8000e4a:	f44f 7340 	mov.w	r3, #768	; 0x300
 8000e4e:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000e52:	2302      	movs	r3, #2
 8000e54:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e58:	2300      	movs	r3, #0
 8000e5a:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000e5e:	2300      	movs	r3, #0
 8000e60:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8000e64:	2307      	movs	r3, #7
 8000e66:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000e6a:	f107 03c4 	add.w	r3, r7, #196	; 0xc4
 8000e6e:	4619      	mov	r1, r3
 8000e70:	4809      	ldr	r0, [pc, #36]	; (8000e98 <HAL_UART_MspInit+0xd8>)
 8000e72:	f001 fa5d 	bl	8002330 <HAL_GPIO_Init>

    /* USART3 interrupt Init */
    HAL_NVIC_SetPriority(USART3_IRQn, 0, 0);
 8000e76:	2200      	movs	r2, #0
 8000e78:	2100      	movs	r1, #0
 8000e7a:	2027      	movs	r0, #39	; 0x27
 8000e7c:	f000 fba9 	bl	80015d2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART3_IRQn);
 8000e80:	2027      	movs	r0, #39	; 0x27
 8000e82:	f000 fbc0 	bl	8001606 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 8000e86:	bf00      	nop
 8000e88:	37d8      	adds	r7, #216	; 0xd8
 8000e8a:	46bd      	mov	sp, r7
 8000e8c:	bd80      	pop	{r7, pc}
 8000e8e:	bf00      	nop
 8000e90:	40004800 	.word	0x40004800
 8000e94:	58024400 	.word	0x58024400
 8000e98:	58020c00 	.word	0x58020c00

08000e9c <HAL_FMC_MspInit>:

}

static uint32_t FMC_Initialized = 0;

static void HAL_FMC_MspInit(void){
 8000e9c:	b580      	push	{r7, lr}
 8000e9e:	b0b4      	sub	sp, #208	; 0xd0
 8000ea0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN FMC_MspInit 0 */

  /* USER CODE END FMC_MspInit 0 */
  GPIO_InitTypeDef GPIO_InitStruct ={0};
 8000ea2:	f107 03bc 	add.w	r3, r7, #188	; 0xbc
 8000ea6:	2200      	movs	r2, #0
 8000ea8:	601a      	str	r2, [r3, #0]
 8000eaa:	605a      	str	r2, [r3, #4]
 8000eac:	609a      	str	r2, [r3, #8]
 8000eae:	60da      	str	r2, [r3, #12]
 8000eb0:	611a      	str	r2, [r3, #16]
  if (FMC_Initialized) {
 8000eb2:	4b43      	ldr	r3, [pc, #268]	; (8000fc0 <HAL_FMC_MspInit+0x124>)
 8000eb4:	681b      	ldr	r3, [r3, #0]
 8000eb6:	2b00      	cmp	r3, #0
 8000eb8:	d17e      	bne.n	8000fb8 <HAL_FMC_MspInit+0x11c>
    return;
  }
  FMC_Initialized = 1;
 8000eba:	4b41      	ldr	r3, [pc, #260]	; (8000fc0 <HAL_FMC_MspInit+0x124>)
 8000ebc:	2201      	movs	r2, #1
 8000ebe:	601a      	str	r2, [r3, #0]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000ec0:	f107 0308 	add.w	r3, r7, #8
 8000ec4:	22b4      	movs	r2, #180	; 0xb4
 8000ec6:	2100      	movs	r1, #0
 8000ec8:	4618      	mov	r0, r3
 8000eca:	f005 fe1f 	bl	8006b0c <memset>

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_FMC;
 8000ece:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8000ed2:	60bb      	str	r3, [r7, #8]
    PeriphClkInitStruct.FmcClockSelection = RCC_FMCCLKSOURCE_D1HCLK;
 8000ed4:	2300      	movs	r3, #0
 8000ed6:	64fb      	str	r3, [r7, #76]	; 0x4c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000ed8:	f107 0308 	add.w	r3, r7, #8
 8000edc:	4618      	mov	r0, r3
 8000ede:	f002 fb3d 	bl	800355c <HAL_RCCEx_PeriphCLKConfig>
 8000ee2:	4603      	mov	r3, r0
 8000ee4:	2b00      	cmp	r3, #0
 8000ee6:	d001      	beq.n	8000eec <HAL_FMC_MspInit+0x50>
    {
      Error_Handler();
 8000ee8:	f7ff ff28 	bl	8000d3c <Error_Handler>
    }

  /* Peripheral clock enable */
  __HAL_RCC_FMC_CLK_ENABLE();
 8000eec:	4b35      	ldr	r3, [pc, #212]	; (8000fc4 <HAL_FMC_MspInit+0x128>)
 8000eee:	f8d3 30d4 	ldr.w	r3, [r3, #212]	; 0xd4
 8000ef2:	4a34      	ldr	r2, [pc, #208]	; (8000fc4 <HAL_FMC_MspInit+0x128>)
 8000ef4:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8000ef8:	f8c2 30d4 	str.w	r3, [r2, #212]	; 0xd4
 8000efc:	4b31      	ldr	r3, [pc, #196]	; (8000fc4 <HAL_FMC_MspInit+0x128>)
 8000efe:	f8d3 30d4 	ldr.w	r3, [r3, #212]	; 0xd4
 8000f02:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8000f06:	607b      	str	r3, [r7, #4]
 8000f08:	687b      	ldr	r3, [r7, #4]
  PD0   ------> FMC_D2
  PD1   ------> FMC_D3
  PD4   ------> FMC_NOE
  PD5   ------> FMC_NWE
  */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8000f0a:	2303      	movs	r3, #3
 8000f0c:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000f10:	2302      	movs	r3, #2
 8000f12:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f16:	2300      	movs	r3, #0
 8000f18:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000f1c:	2303      	movs	r3, #3
 8000f1e:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8000f22:	230c      	movs	r3, #12
 8000f24:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8000f28:	f107 03bc 	add.w	r3, r7, #188	; 0xbc
 8000f2c:	4619      	mov	r1, r3
 8000f2e:	4826      	ldr	r0, [pc, #152]	; (8000fc8 <HAL_FMC_MspInit+0x12c>)
 8000f30:	f001 f9fe 	bl	8002330 <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = GPIO_PIN_7|GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10;
 8000f34:	f44f 63f0 	mov.w	r3, #1920	; 0x780
 8000f38:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000f3c:	2302      	movs	r3, #2
 8000f3e:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f42:	2300      	movs	r3, #0
 8000f44:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000f48:	2303      	movs	r3, #3
 8000f4a:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8000f4e:	230c      	movs	r3, #12
 8000f50:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8000f54:	f107 03bc 	add.w	r3, r7, #188	; 0xbc
 8000f58:	4619      	mov	r1, r3
 8000f5a:	481c      	ldr	r0, [pc, #112]	; (8000fcc <HAL_FMC_MspInit+0x130>)
 8000f5c:	f001 f9e8 	bl	8002330 <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = GPIO_PIN_14|GPIO_PIN_15|GPIO_PIN_0|GPIO_PIN_1
 8000f60:	f24c 0333 	movw	r3, #49203	; 0xc033
 8000f64:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
                          |GPIO_PIN_4|GPIO_PIN_5;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000f68:	2302      	movs	r3, #2
 8000f6a:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f6e:	2300      	movs	r3, #0
 8000f70:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000f74:	2303      	movs	r3, #3
 8000f76:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8000f7a:	230c      	movs	r3, #12
 8000f7c:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000f80:	f107 03bc 	add.w	r3, r7, #188	; 0xbc
 8000f84:	4619      	mov	r1, r3
 8000f86:	4812      	ldr	r0, [pc, #72]	; (8000fd0 <HAL_FMC_MspInit+0x134>)
 8000f88:	f001 f9d2 	bl	8002330 <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = GPIO_PIN_7;
 8000f8c:	2380      	movs	r3, #128	; 0x80
 8000f8e:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000f92:	2302      	movs	r3, #2
 8000f94:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f98:	2300      	movs	r3, #0
 8000f9a:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000f9e:	2303      	movs	r3, #3
 8000fa0:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
  GPIO_InitStruct.Alternate = GPIO_AF9_FMC;
 8000fa4:	2309      	movs	r3, #9
 8000fa6:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000faa:	f107 03bc 	add.w	r3, r7, #188	; 0xbc
 8000fae:	4619      	mov	r1, r3
 8000fb0:	4808      	ldr	r0, [pc, #32]	; (8000fd4 <HAL_FMC_MspInit+0x138>)
 8000fb2:	f001 f9bd 	bl	8002330 <HAL_GPIO_Init>
 8000fb6:	e000      	b.n	8000fba <HAL_FMC_MspInit+0x11e>
    return;
 8000fb8:	bf00      	nop

  /* USER CODE BEGIN FMC_MspInit 1 */

  /* USER CODE END FMC_MspInit 1 */
}
 8000fba:	37d0      	adds	r7, #208	; 0xd0
 8000fbc:	46bd      	mov	sp, r7
 8000fbe:	bd80      	pop	{r7, pc}
 8000fc0:	200000b8 	.word	0x200000b8
 8000fc4:	58024400 	.word	0x58024400
 8000fc8:	58021400 	.word	0x58021400
 8000fcc:	58021000 	.word	0x58021000
 8000fd0:	58020c00 	.word	0x58020c00
 8000fd4:	58020800 	.word	0x58020800

08000fd8 <HAL_SRAM_MspInit>:

void HAL_SRAM_MspInit(SRAM_HandleTypeDef* hsram){
 8000fd8:	b580      	push	{r7, lr}
 8000fda:	b082      	sub	sp, #8
 8000fdc:	af00      	add	r7, sp, #0
 8000fde:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN SRAM_MspInit 0 */

  /* USER CODE END SRAM_MspInit 0 */
  HAL_FMC_MspInit();
 8000fe0:	f7ff ff5c 	bl	8000e9c <HAL_FMC_MspInit>
  /* USER CODE BEGIN SRAM_MspInit 1 */

  /* USER CODE END SRAM_MspInit 1 */
}
 8000fe4:	bf00      	nop
 8000fe6:	3708      	adds	r7, #8
 8000fe8:	46bd      	mov	sp, r7
 8000fea:	bd80      	pop	{r7, pc}

08000fec <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000fec:	b480      	push	{r7}
 8000fee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000ff0:	e7fe      	b.n	8000ff0 <NMI_Handler+0x4>

08000ff2 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000ff2:	b480      	push	{r7}
 8000ff4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000ff6:	e7fe      	b.n	8000ff6 <HardFault_Handler+0x4>

08000ff8 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000ff8:	b480      	push	{r7}
 8000ffa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000ffc:	e7fe      	b.n	8000ffc <MemManage_Handler+0x4>

08000ffe <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000ffe:	b480      	push	{r7}
 8001000:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001002:	e7fe      	b.n	8001002 <BusFault_Handler+0x4>

08001004 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001004:	b480      	push	{r7}
 8001006:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001008:	e7fe      	b.n	8001008 <UsageFault_Handler+0x4>

0800100a <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800100a:	b480      	push	{r7}
 800100c:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800100e:	bf00      	nop
 8001010:	46bd      	mov	sp, r7
 8001012:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001016:	4770      	bx	lr

08001018 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001018:	b480      	push	{r7}
 800101a:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800101c:	bf00      	nop
 800101e:	46bd      	mov	sp, r7
 8001020:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001024:	4770      	bx	lr

08001026 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001026:	b480      	push	{r7}
 8001028:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800102a:	bf00      	nop
 800102c:	46bd      	mov	sp, r7
 800102e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001032:	4770      	bx	lr

08001034 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001034:	b580      	push	{r7, lr}
 8001036:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001038:	f000 f9ac 	bl	8001394 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800103c:	bf00      	nop
 800103e:	bd80      	pop	{r7, pc}

08001040 <USART3_IRQHandler>:

/**
  * @brief This function handles USART3 global interrupt.
  */
void USART3_IRQHandler(void)
{
 8001040:	b580      	push	{r7, lr}
 8001042:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART3_IRQn 0 */

  /* USER CODE END USART3_IRQn 0 */
  HAL_UART_IRQHandler(&huart3);
 8001044:	4802      	ldr	r0, [pc, #8]	; (8001050 <USART3_IRQHandler+0x10>)
 8001046:	f003 fedb 	bl	8004e00 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART3_IRQn 1 */

  /* USER CODE END USART3_IRQn 1 */
}
 800104a:	bf00      	nop
 800104c:	bd80      	pop	{r7, pc}
 800104e:	bf00      	nop
 8001050:	200008cc 	.word	0x200008cc

08001054 <_read>:
	_kill(status, -1);
	while (1) {}		/* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001054:	b580      	push	{r7, lr}
 8001056:	b086      	sub	sp, #24
 8001058:	af00      	add	r7, sp, #0
 800105a:	60f8      	str	r0, [r7, #12]
 800105c:	60b9      	str	r1, [r7, #8]
 800105e:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001060:	2300      	movs	r3, #0
 8001062:	617b      	str	r3, [r7, #20]
 8001064:	e00a      	b.n	800107c <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8001066:	f3af 8000 	nop.w
 800106a:	4601      	mov	r1, r0
 800106c:	68bb      	ldr	r3, [r7, #8]
 800106e:	1c5a      	adds	r2, r3, #1
 8001070:	60ba      	str	r2, [r7, #8]
 8001072:	b2ca      	uxtb	r2, r1
 8001074:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001076:	697b      	ldr	r3, [r7, #20]
 8001078:	3301      	adds	r3, #1
 800107a:	617b      	str	r3, [r7, #20]
 800107c:	697a      	ldr	r2, [r7, #20]
 800107e:	687b      	ldr	r3, [r7, #4]
 8001080:	429a      	cmp	r2, r3
 8001082:	dbf0      	blt.n	8001066 <_read+0x12>
	}

return len;
 8001084:	687b      	ldr	r3, [r7, #4]
}
 8001086:	4618      	mov	r0, r3
 8001088:	3718      	adds	r7, #24
 800108a:	46bd      	mov	sp, r7
 800108c:	bd80      	pop	{r7, pc}

0800108e <_close>:
	}
	return len;
}

int _close(int file)
{
 800108e:	b480      	push	{r7}
 8001090:	b083      	sub	sp, #12
 8001092:	af00      	add	r7, sp, #0
 8001094:	6078      	str	r0, [r7, #4]
	return -1;
 8001096:	f04f 33ff 	mov.w	r3, #4294967295
}
 800109a:	4618      	mov	r0, r3
 800109c:	370c      	adds	r7, #12
 800109e:	46bd      	mov	sp, r7
 80010a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010a4:	4770      	bx	lr

080010a6 <_fstat>:


int _fstat(int file, struct stat *st)
{
 80010a6:	b480      	push	{r7}
 80010a8:	b083      	sub	sp, #12
 80010aa:	af00      	add	r7, sp, #0
 80010ac:	6078      	str	r0, [r7, #4]
 80010ae:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 80010b0:	683b      	ldr	r3, [r7, #0]
 80010b2:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80010b6:	605a      	str	r2, [r3, #4]
	return 0;
 80010b8:	2300      	movs	r3, #0
}
 80010ba:	4618      	mov	r0, r3
 80010bc:	370c      	adds	r7, #12
 80010be:	46bd      	mov	sp, r7
 80010c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010c4:	4770      	bx	lr

080010c6 <_isatty>:

int _isatty(int file)
{
 80010c6:	b480      	push	{r7}
 80010c8:	b083      	sub	sp, #12
 80010ca:	af00      	add	r7, sp, #0
 80010cc:	6078      	str	r0, [r7, #4]
	return 1;
 80010ce:	2301      	movs	r3, #1
}
 80010d0:	4618      	mov	r0, r3
 80010d2:	370c      	adds	r7, #12
 80010d4:	46bd      	mov	sp, r7
 80010d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010da:	4770      	bx	lr

080010dc <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80010dc:	b480      	push	{r7}
 80010de:	b085      	sub	sp, #20
 80010e0:	af00      	add	r7, sp, #0
 80010e2:	60f8      	str	r0, [r7, #12]
 80010e4:	60b9      	str	r1, [r7, #8]
 80010e6:	607a      	str	r2, [r7, #4]
	return 0;
 80010e8:	2300      	movs	r3, #0
}
 80010ea:	4618      	mov	r0, r3
 80010ec:	3714      	adds	r7, #20
 80010ee:	46bd      	mov	sp, r7
 80010f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010f4:	4770      	bx	lr
	...

080010f8 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80010f8:	b580      	push	{r7, lr}
 80010fa:	b086      	sub	sp, #24
 80010fc:	af00      	add	r7, sp, #0
 80010fe:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001100:	4a14      	ldr	r2, [pc, #80]	; (8001154 <_sbrk+0x5c>)
 8001102:	4b15      	ldr	r3, [pc, #84]	; (8001158 <_sbrk+0x60>)
 8001104:	1ad3      	subs	r3, r2, r3
 8001106:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001108:	697b      	ldr	r3, [r7, #20]
 800110a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 800110c:	4b13      	ldr	r3, [pc, #76]	; (800115c <_sbrk+0x64>)
 800110e:	681b      	ldr	r3, [r3, #0]
 8001110:	2b00      	cmp	r3, #0
 8001112:	d102      	bne.n	800111a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001114:	4b11      	ldr	r3, [pc, #68]	; (800115c <_sbrk+0x64>)
 8001116:	4a12      	ldr	r2, [pc, #72]	; (8001160 <_sbrk+0x68>)
 8001118:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800111a:	4b10      	ldr	r3, [pc, #64]	; (800115c <_sbrk+0x64>)
 800111c:	681a      	ldr	r2, [r3, #0]
 800111e:	687b      	ldr	r3, [r7, #4]
 8001120:	4413      	add	r3, r2
 8001122:	693a      	ldr	r2, [r7, #16]
 8001124:	429a      	cmp	r2, r3
 8001126:	d207      	bcs.n	8001138 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001128:	f005 fcc6 	bl	8006ab8 <__errno>
 800112c:	4603      	mov	r3, r0
 800112e:	220c      	movs	r2, #12
 8001130:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001132:	f04f 33ff 	mov.w	r3, #4294967295
 8001136:	e009      	b.n	800114c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001138:	4b08      	ldr	r3, [pc, #32]	; (800115c <_sbrk+0x64>)
 800113a:	681b      	ldr	r3, [r3, #0]
 800113c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800113e:	4b07      	ldr	r3, [pc, #28]	; (800115c <_sbrk+0x64>)
 8001140:	681a      	ldr	r2, [r3, #0]
 8001142:	687b      	ldr	r3, [r7, #4]
 8001144:	4413      	add	r3, r2
 8001146:	4a05      	ldr	r2, [pc, #20]	; (800115c <_sbrk+0x64>)
 8001148:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800114a:	68fb      	ldr	r3, [r7, #12]
}
 800114c:	4618      	mov	r0, r3
 800114e:	3718      	adds	r7, #24
 8001150:	46bd      	mov	sp, r7
 8001152:	bd80      	pop	{r7, pc}
 8001154:	20020000 	.word	0x20020000
 8001158:	00000400 	.word	0x00000400
 800115c:	200000bc 	.word	0x200000bc
 8001160:	20002c28 	.word	0x20002c28

08001164 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8001164:	b480      	push	{r7}
 8001166:	af00      	add	r7, sp, #0
 __IO uint32_t tmpreg;
#endif /* DATA_IN_D2_SRAM */

  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8001168:	4b34      	ldr	r3, [pc, #208]	; (800123c <SystemInit+0xd8>)
 800116a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800116e:	4a33      	ldr	r2, [pc, #204]	; (800123c <SystemInit+0xd8>)
 8001170:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001174:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/

   /* Increasing the CPU frequency */
  if(FLASH_LATENCY_DEFAULT  > (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 8001178:	4b31      	ldr	r3, [pc, #196]	; (8001240 <SystemInit+0xdc>)
 800117a:	681b      	ldr	r3, [r3, #0]
 800117c:	f003 030f 	and.w	r3, r3, #15
 8001180:	2b06      	cmp	r3, #6
 8001182:	d807      	bhi.n	8001194 <SystemInit+0x30>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
	MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 8001184:	4b2e      	ldr	r3, [pc, #184]	; (8001240 <SystemInit+0xdc>)
 8001186:	681b      	ldr	r3, [r3, #0]
 8001188:	f023 030f 	bic.w	r3, r3, #15
 800118c:	4a2c      	ldr	r2, [pc, #176]	; (8001240 <SystemInit+0xdc>)
 800118e:	f043 0307 	orr.w	r3, r3, #7
 8001192:	6013      	str	r3, [r2, #0]
  }

  /* Set HSION bit */
  RCC->CR |= RCC_CR_HSION;
 8001194:	4b2b      	ldr	r3, [pc, #172]	; (8001244 <SystemInit+0xe0>)
 8001196:	681b      	ldr	r3, [r3, #0]
 8001198:	4a2a      	ldr	r2, [pc, #168]	; (8001244 <SystemInit+0xe0>)
 800119a:	f043 0301 	orr.w	r3, r3, #1
 800119e:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 80011a0:	4b28      	ldr	r3, [pc, #160]	; (8001244 <SystemInit+0xe0>)
 80011a2:	2200      	movs	r2, #0
 80011a4:	611a      	str	r2, [r3, #16]

  /* Reset HSEON, HSECSSON, CSION, HSI48ON, CSIKERON, PLL1ON, PLL2ON and PLL3ON bits */
  RCC->CR &= 0xEAF6ED7FU;
 80011a6:	4b27      	ldr	r3, [pc, #156]	; (8001244 <SystemInit+0xe0>)
 80011a8:	681a      	ldr	r2, [r3, #0]
 80011aa:	4926      	ldr	r1, [pc, #152]	; (8001244 <SystemInit+0xe0>)
 80011ac:	4b26      	ldr	r3, [pc, #152]	; (8001248 <SystemInit+0xe4>)
 80011ae:	4013      	ands	r3, r2
 80011b0:	600b      	str	r3, [r1, #0]
  
   /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLASH_LATENCY_DEFAULT  < (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 80011b2:	4b23      	ldr	r3, [pc, #140]	; (8001240 <SystemInit+0xdc>)
 80011b4:	681b      	ldr	r3, [r3, #0]
 80011b6:	f003 0308 	and.w	r3, r3, #8
 80011ba:	2b00      	cmp	r3, #0
 80011bc:	d007      	beq.n	80011ce <SystemInit+0x6a>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
	MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 80011be:	4b20      	ldr	r3, [pc, #128]	; (8001240 <SystemInit+0xdc>)
 80011c0:	681b      	ldr	r3, [r3, #0]
 80011c2:	f023 030f 	bic.w	r3, r3, #15
 80011c6:	4a1e      	ldr	r2, [pc, #120]	; (8001240 <SystemInit+0xdc>)
 80011c8:	f043 0307 	orr.w	r3, r3, #7
 80011cc:	6013      	str	r3, [r2, #0]
  }

#if defined(D3_SRAM_BASE)
  /* Reset D1CFGR register */
  RCC->D1CFGR = 0x00000000;
 80011ce:	4b1d      	ldr	r3, [pc, #116]	; (8001244 <SystemInit+0xe0>)
 80011d0:	2200      	movs	r2, #0
 80011d2:	619a      	str	r2, [r3, #24]

  /* Reset D2CFGR register */
  RCC->D2CFGR = 0x00000000;
 80011d4:	4b1b      	ldr	r3, [pc, #108]	; (8001244 <SystemInit+0xe0>)
 80011d6:	2200      	movs	r2, #0
 80011d8:	61da      	str	r2, [r3, #28]

  /* Reset D3CFGR register */
  RCC->D3CFGR = 0x00000000;
 80011da:	4b1a      	ldr	r3, [pc, #104]	; (8001244 <SystemInit+0xe0>)
 80011dc:	2200      	movs	r2, #0
 80011de:	621a      	str	r2, [r3, #32]

  /* Reset SRDCFGR register */
  RCC->SRDCFGR = 0x00000000;
#endif
  /* Reset PLLCKSELR register */
  RCC->PLLCKSELR = 0x02020200;
 80011e0:	4b18      	ldr	r3, [pc, #96]	; (8001244 <SystemInit+0xe0>)
 80011e2:	4a1a      	ldr	r2, [pc, #104]	; (800124c <SystemInit+0xe8>)
 80011e4:	629a      	str	r2, [r3, #40]	; 0x28

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x01FF0000;
 80011e6:	4b17      	ldr	r3, [pc, #92]	; (8001244 <SystemInit+0xe0>)
 80011e8:	4a19      	ldr	r2, [pc, #100]	; (8001250 <SystemInit+0xec>)
 80011ea:	62da      	str	r2, [r3, #44]	; 0x2c
  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x01010280;
 80011ec:	4b15      	ldr	r3, [pc, #84]	; (8001244 <SystemInit+0xe0>)
 80011ee:	4a19      	ldr	r2, [pc, #100]	; (8001254 <SystemInit+0xf0>)
 80011f0:	631a      	str	r2, [r3, #48]	; 0x30
  /* Reset PLL1FRACR register */
  RCC->PLL1FRACR = 0x00000000;
 80011f2:	4b14      	ldr	r3, [pc, #80]	; (8001244 <SystemInit+0xe0>)
 80011f4:	2200      	movs	r2, #0
 80011f6:	635a      	str	r2, [r3, #52]	; 0x34

  /* Reset PLL2DIVR register */
  RCC->PLL2DIVR = 0x01010280;
 80011f8:	4b12      	ldr	r3, [pc, #72]	; (8001244 <SystemInit+0xe0>)
 80011fa:	4a16      	ldr	r2, [pc, #88]	; (8001254 <SystemInit+0xf0>)
 80011fc:	639a      	str	r2, [r3, #56]	; 0x38

  /* Reset PLL2FRACR register */

  RCC->PLL2FRACR = 0x00000000;
 80011fe:	4b11      	ldr	r3, [pc, #68]	; (8001244 <SystemInit+0xe0>)
 8001200:	2200      	movs	r2, #0
 8001202:	63da      	str	r2, [r3, #60]	; 0x3c
  /* Reset PLL3DIVR register */
  RCC->PLL3DIVR = 0x01010280;
 8001204:	4b0f      	ldr	r3, [pc, #60]	; (8001244 <SystemInit+0xe0>)
 8001206:	4a13      	ldr	r2, [pc, #76]	; (8001254 <SystemInit+0xf0>)
 8001208:	641a      	str	r2, [r3, #64]	; 0x40

  /* Reset PLL3FRACR register */
  RCC->PLL3FRACR = 0x00000000;
 800120a:	4b0e      	ldr	r3, [pc, #56]	; (8001244 <SystemInit+0xe0>)
 800120c:	2200      	movs	r2, #0
 800120e:	645a      	str	r2, [r3, #68]	; 0x44

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8001210:	4b0c      	ldr	r3, [pc, #48]	; (8001244 <SystemInit+0xe0>)
 8001212:	681b      	ldr	r3, [r3, #0]
 8001214:	4a0b      	ldr	r2, [pc, #44]	; (8001244 <SystemInit+0xe0>)
 8001216:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800121a:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 800121c:	4b09      	ldr	r3, [pc, #36]	; (8001244 <SystemInit+0xe0>)
 800121e:	2200      	movs	r2, #0
 8001220:	661a      	str	r2, [r3, #96]	; 0x60
  /*
   * Disable the FMC bank1 (enabled after reset).
   * This, prevents CPU speculation access on this bank which blocks the use of FMC during
   * 24us. During this time the others FMC master (such as LTDC) cannot use it!
   */
  FMC_Bank1_R->BTCR[0] = 0x000030D2;
 8001222:	4b0d      	ldr	r3, [pc, #52]	; (8001258 <SystemInit+0xf4>)
 8001224:	f243 02d2 	movw	r2, #12498	; 0x30d2
 8001228:	601a      	str	r2, [r3, #0]

  /* Configure the Vector Table location add offset address for cortex-M7 ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = D1_AXISRAM_BASE  | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal AXI-RAM */
#else
  SCB->VTOR = FLASH_BANK1_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 800122a:	4b04      	ldr	r3, [pc, #16]	; (800123c <SystemInit+0xd8>)
 800122c:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8001230:	609a      	str	r2, [r3, #8]
#endif

#endif /*DUAL_CORE && CORE_CM4*/

}
 8001232:	bf00      	nop
 8001234:	46bd      	mov	sp, r7
 8001236:	f85d 7b04 	ldr.w	r7, [sp], #4
 800123a:	4770      	bx	lr
 800123c:	e000ed00 	.word	0xe000ed00
 8001240:	52002000 	.word	0x52002000
 8001244:	58024400 	.word	0x58024400
 8001248:	eaf6ed7f 	.word	0xeaf6ed7f
 800124c:	02020200 	.word	0x02020200
 8001250:	01ff0000 	.word	0x01ff0000
 8001254:	01010280 	.word	0x01010280
 8001258:	52004000 	.word	0x52004000

0800125c <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack      /* set stack pointer */
 800125c:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001294 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit
 8001260:	f7ff ff80 	bl	8001164 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001264:	480c      	ldr	r0, [pc, #48]	; (8001298 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8001266:	490d      	ldr	r1, [pc, #52]	; (800129c <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8001268:	4a0d      	ldr	r2, [pc, #52]	; (80012a0 <LoopFillZerobss+0x1a>)
  movs r3, #0
 800126a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800126c:	e002      	b.n	8001274 <LoopCopyDataInit>

0800126e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800126e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001270:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001272:	3304      	adds	r3, #4

08001274 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001274:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001276:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001278:	d3f9      	bcc.n	800126e <CopyDataInit>
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800127a:	4a0a      	ldr	r2, [pc, #40]	; (80012a4 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 800127c:	4c0a      	ldr	r4, [pc, #40]	; (80012a8 <LoopFillZerobss+0x22>)
  movs r3, #0
 800127e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001280:	e001      	b.n	8001286 <LoopFillZerobss>

08001282 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001282:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001284:	3204      	adds	r2, #4

08001286 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001286:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001288:	d3fb      	bcc.n	8001282 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 800128a:	f005 fc1b 	bl	8006ac4 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800128e:	f7ff fabb 	bl	8000808 <main>
  bx  lr
 8001292:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8001294:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8001298:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800129c:	2000009c 	.word	0x2000009c
  ldr r2, =_sidata
 80012a0:	08007cf0 	.word	0x08007cf0
  ldr r2, =_sbss
 80012a4:	2000009c 	.word	0x2000009c
  ldr r4, =_ebss
 80012a8:	20002c24 	.word	0x20002c24

080012ac <ADC3_IRQHandler>:
 * @retval None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80012ac:	e7fe      	b.n	80012ac <ADC3_IRQHandler>
	...

080012b0 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80012b0:	b580      	push	{r7, lr}
 80012b2:	b082      	sub	sp, #8
 80012b4:	af00      	add	r7, sp, #0
   __HAL_ART_CONFIG_BASE_ADDRESS(0x08100000UL);  /* Configure the Cortex-M4 ART Base address to the Flash Bank 2 : */
   __HAL_ART_ENABLE();                           /* Enable the Cortex-M4 ART */
#endif /* DUAL_CORE &&  CORE_CM4 */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80012b6:	2003      	movs	r0, #3
 80012b8:	f000 f980 	bl	80015bc <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 80012bc:	f001 ff78 	bl	80031b0 <HAL_RCC_GetSysClockFreq>
 80012c0:	4602      	mov	r2, r0
 80012c2:	4b15      	ldr	r3, [pc, #84]	; (8001318 <HAL_Init+0x68>)
 80012c4:	699b      	ldr	r3, [r3, #24]
 80012c6:	0a1b      	lsrs	r3, r3, #8
 80012c8:	f003 030f 	and.w	r3, r3, #15
 80012cc:	4913      	ldr	r1, [pc, #76]	; (800131c <HAL_Init+0x6c>)
 80012ce:	5ccb      	ldrb	r3, [r1, r3]
 80012d0:	f003 031f 	and.w	r3, r3, #31
 80012d4:	fa22 f303 	lsr.w	r3, r2, r3
 80012d8:	607b      	str	r3, [r7, #4]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

  /* Update the SystemD2Clock global variable */
#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 80012da:	4b0f      	ldr	r3, [pc, #60]	; (8001318 <HAL_Init+0x68>)
 80012dc:	699b      	ldr	r3, [r3, #24]
 80012de:	f003 030f 	and.w	r3, r3, #15
 80012e2:	4a0e      	ldr	r2, [pc, #56]	; (800131c <HAL_Init+0x6c>)
 80012e4:	5cd3      	ldrb	r3, [r2, r3]
 80012e6:	f003 031f 	and.w	r3, r3, #31
 80012ea:	687a      	ldr	r2, [r7, #4]
 80012ec:	fa22 f303 	lsr.w	r3, r2, r3
 80012f0:	4a0b      	ldr	r2, [pc, #44]	; (8001320 <HAL_Init+0x70>)
 80012f2:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 80012f4:	4a0b      	ldr	r2, [pc, #44]	; (8001324 <HAL_Init+0x74>)
 80012f6:	687b      	ldr	r3, [r7, #4]
 80012f8:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 80012fa:	2000      	movs	r0, #0
 80012fc:	f000 f814 	bl	8001328 <HAL_InitTick>
 8001300:	4603      	mov	r3, r0
 8001302:	2b00      	cmp	r3, #0
 8001304:	d001      	beq.n	800130a <HAL_Init+0x5a>
  {
    return HAL_ERROR;
 8001306:	2301      	movs	r3, #1
 8001308:	e002      	b.n	8001310 <HAL_Init+0x60>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 800130a:	f7ff fd1d 	bl	8000d48 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800130e:	2300      	movs	r3, #0
}
 8001310:	4618      	mov	r0, r3
 8001312:	3708      	adds	r7, #8
 8001314:	46bd      	mov	sp, r7
 8001316:	bd80      	pop	{r7, pc}
 8001318:	58024400 	.word	0x58024400
 800131c:	08007c10 	.word	0x08007c10
 8001320:	20000004 	.word	0x20000004
 8001324:	20000000 	.word	0x20000000

08001328 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001328:	b580      	push	{r7, lr}
 800132a:	b082      	sub	sp, #8
 800132c:	af00      	add	r7, sp, #0
 800132e:	6078      	str	r0, [r7, #4]
  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that don't take the value zero)*/
  if((uint32_t)uwTickFreq == 0UL)
 8001330:	4b15      	ldr	r3, [pc, #84]	; (8001388 <HAL_InitTick+0x60>)
 8001332:	781b      	ldrb	r3, [r3, #0]
 8001334:	2b00      	cmp	r3, #0
 8001336:	d101      	bne.n	800133c <HAL_InitTick+0x14>
  {
    return HAL_ERROR;
 8001338:	2301      	movs	r3, #1
 800133a:	e021      	b.n	8001380 <HAL_InitTick+0x58>
  }

    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000UL / (uint32_t)uwTickFreq)) > 0U)
 800133c:	4b13      	ldr	r3, [pc, #76]	; (800138c <HAL_InitTick+0x64>)
 800133e:	681a      	ldr	r2, [r3, #0]
 8001340:	4b11      	ldr	r3, [pc, #68]	; (8001388 <HAL_InitTick+0x60>)
 8001342:	781b      	ldrb	r3, [r3, #0]
 8001344:	4619      	mov	r1, r3
 8001346:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800134a:	fbb3 f3f1 	udiv	r3, r3, r1
 800134e:	fbb2 f3f3 	udiv	r3, r2, r3
 8001352:	4618      	mov	r0, r3
 8001354:	f000 f965 	bl	8001622 <HAL_SYSTICK_Config>
 8001358:	4603      	mov	r3, r0
 800135a:	2b00      	cmp	r3, #0
 800135c:	d001      	beq.n	8001362 <HAL_InitTick+0x3a>
    {
      return HAL_ERROR;
 800135e:	2301      	movs	r3, #1
 8001360:	e00e      	b.n	8001380 <HAL_InitTick+0x58>
    }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001362:	687b      	ldr	r3, [r7, #4]
 8001364:	2b0f      	cmp	r3, #15
 8001366:	d80a      	bhi.n	800137e <HAL_InitTick+0x56>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001368:	2200      	movs	r2, #0
 800136a:	6879      	ldr	r1, [r7, #4]
 800136c:	f04f 30ff 	mov.w	r0, #4294967295
 8001370:	f000 f92f 	bl	80015d2 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001374:	4a06      	ldr	r2, [pc, #24]	; (8001390 <HAL_InitTick+0x68>)
 8001376:	687b      	ldr	r3, [r7, #4]
 8001378:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800137a:	2300      	movs	r3, #0
 800137c:	e000      	b.n	8001380 <HAL_InitTick+0x58>
    return HAL_ERROR;
 800137e:	2301      	movs	r3, #1
}
 8001380:	4618      	mov	r0, r3
 8001382:	3708      	adds	r7, #8
 8001384:	46bd      	mov	sp, r7
 8001386:	bd80      	pop	{r7, pc}
 8001388:	2000000c 	.word	0x2000000c
 800138c:	20000000 	.word	0x20000000
 8001390:	20000008 	.word	0x20000008

08001394 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001394:	b480      	push	{r7}
 8001396:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8001398:	4b06      	ldr	r3, [pc, #24]	; (80013b4 <HAL_IncTick+0x20>)
 800139a:	781b      	ldrb	r3, [r3, #0]
 800139c:	461a      	mov	r2, r3
 800139e:	4b06      	ldr	r3, [pc, #24]	; (80013b8 <HAL_IncTick+0x24>)
 80013a0:	681b      	ldr	r3, [r3, #0]
 80013a2:	4413      	add	r3, r2
 80013a4:	4a04      	ldr	r2, [pc, #16]	; (80013b8 <HAL_IncTick+0x24>)
 80013a6:	6013      	str	r3, [r2, #0]
}
 80013a8:	bf00      	nop
 80013aa:	46bd      	mov	sp, r7
 80013ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013b0:	4770      	bx	lr
 80013b2:	bf00      	nop
 80013b4:	2000000c 	.word	0x2000000c
 80013b8:	20002c10 	.word	0x20002c10

080013bc <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80013bc:	b480      	push	{r7}
 80013be:	af00      	add	r7, sp, #0
  return uwTick;
 80013c0:	4b03      	ldr	r3, [pc, #12]	; (80013d0 <HAL_GetTick+0x14>)
 80013c2:	681b      	ldr	r3, [r3, #0]
}
 80013c4:	4618      	mov	r0, r3
 80013c6:	46bd      	mov	sp, r7
 80013c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013cc:	4770      	bx	lr
 80013ce:	bf00      	nop
 80013d0:	20002c10 	.word	0x20002c10

080013d4 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80013d4:	b580      	push	{r7, lr}
 80013d6:	b084      	sub	sp, #16
 80013d8:	af00      	add	r7, sp, #0
 80013da:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80013dc:	f7ff ffee 	bl	80013bc <HAL_GetTick>
 80013e0:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80013e2:	687b      	ldr	r3, [r7, #4]
 80013e4:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80013e6:	68fb      	ldr	r3, [r7, #12]
 80013e8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80013ec:	d005      	beq.n	80013fa <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80013ee:	4b0a      	ldr	r3, [pc, #40]	; (8001418 <HAL_Delay+0x44>)
 80013f0:	781b      	ldrb	r3, [r3, #0]
 80013f2:	461a      	mov	r2, r3
 80013f4:	68fb      	ldr	r3, [r7, #12]
 80013f6:	4413      	add	r3, r2
 80013f8:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80013fa:	bf00      	nop
 80013fc:	f7ff ffde 	bl	80013bc <HAL_GetTick>
 8001400:	4602      	mov	r2, r0
 8001402:	68bb      	ldr	r3, [r7, #8]
 8001404:	1ad3      	subs	r3, r2, r3
 8001406:	68fa      	ldr	r2, [r7, #12]
 8001408:	429a      	cmp	r2, r3
 800140a:	d8f7      	bhi.n	80013fc <HAL_Delay+0x28>
  {
  }
}
 800140c:	bf00      	nop
 800140e:	bf00      	nop
 8001410:	3710      	adds	r7, #16
 8001412:	46bd      	mov	sp, r7
 8001414:	bd80      	pop	{r7, pc}
 8001416:	bf00      	nop
 8001418:	2000000c 	.word	0x2000000c

0800141c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800141c:	b480      	push	{r7}
 800141e:	b085      	sub	sp, #20
 8001420:	af00      	add	r7, sp, #0
 8001422:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001424:	687b      	ldr	r3, [r7, #4]
 8001426:	f003 0307 	and.w	r3, r3, #7
 800142a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800142c:	4b0b      	ldr	r3, [pc, #44]	; (800145c <__NVIC_SetPriorityGrouping+0x40>)
 800142e:	68db      	ldr	r3, [r3, #12]
 8001430:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001432:	68ba      	ldr	r2, [r7, #8]
 8001434:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001438:	4013      	ands	r3, r2
 800143a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800143c:	68fb      	ldr	r3, [r7, #12]
 800143e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001440:	68bb      	ldr	r3, [r7, #8]
 8001442:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8001444:	4b06      	ldr	r3, [pc, #24]	; (8001460 <__NVIC_SetPriorityGrouping+0x44>)
 8001446:	4313      	orrs	r3, r2
 8001448:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800144a:	4a04      	ldr	r2, [pc, #16]	; (800145c <__NVIC_SetPriorityGrouping+0x40>)
 800144c:	68bb      	ldr	r3, [r7, #8]
 800144e:	60d3      	str	r3, [r2, #12]
}
 8001450:	bf00      	nop
 8001452:	3714      	adds	r7, #20
 8001454:	46bd      	mov	sp, r7
 8001456:	f85d 7b04 	ldr.w	r7, [sp], #4
 800145a:	4770      	bx	lr
 800145c:	e000ed00 	.word	0xe000ed00
 8001460:	05fa0000 	.word	0x05fa0000

08001464 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001464:	b480      	push	{r7}
 8001466:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001468:	4b04      	ldr	r3, [pc, #16]	; (800147c <__NVIC_GetPriorityGrouping+0x18>)
 800146a:	68db      	ldr	r3, [r3, #12]
 800146c:	0a1b      	lsrs	r3, r3, #8
 800146e:	f003 0307 	and.w	r3, r3, #7
}
 8001472:	4618      	mov	r0, r3
 8001474:	46bd      	mov	sp, r7
 8001476:	f85d 7b04 	ldr.w	r7, [sp], #4
 800147a:	4770      	bx	lr
 800147c:	e000ed00 	.word	0xe000ed00

08001480 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001480:	b480      	push	{r7}
 8001482:	b083      	sub	sp, #12
 8001484:	af00      	add	r7, sp, #0
 8001486:	4603      	mov	r3, r0
 8001488:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 800148a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800148e:	2b00      	cmp	r3, #0
 8001490:	db0b      	blt.n	80014aa <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001492:	88fb      	ldrh	r3, [r7, #6]
 8001494:	f003 021f 	and.w	r2, r3, #31
 8001498:	4907      	ldr	r1, [pc, #28]	; (80014b8 <__NVIC_EnableIRQ+0x38>)
 800149a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800149e:	095b      	lsrs	r3, r3, #5
 80014a0:	2001      	movs	r0, #1
 80014a2:	fa00 f202 	lsl.w	r2, r0, r2
 80014a6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 80014aa:	bf00      	nop
 80014ac:	370c      	adds	r7, #12
 80014ae:	46bd      	mov	sp, r7
 80014b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014b4:	4770      	bx	lr
 80014b6:	bf00      	nop
 80014b8:	e000e100 	.word	0xe000e100

080014bc <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80014bc:	b480      	push	{r7}
 80014be:	b083      	sub	sp, #12
 80014c0:	af00      	add	r7, sp, #0
 80014c2:	4603      	mov	r3, r0
 80014c4:	6039      	str	r1, [r7, #0]
 80014c6:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 80014c8:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80014cc:	2b00      	cmp	r3, #0
 80014ce:	db0a      	blt.n	80014e6 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80014d0:	683b      	ldr	r3, [r7, #0]
 80014d2:	b2da      	uxtb	r2, r3
 80014d4:	490c      	ldr	r1, [pc, #48]	; (8001508 <__NVIC_SetPriority+0x4c>)
 80014d6:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80014da:	0112      	lsls	r2, r2, #4
 80014dc:	b2d2      	uxtb	r2, r2
 80014de:	440b      	add	r3, r1
 80014e0:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80014e4:	e00a      	b.n	80014fc <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80014e6:	683b      	ldr	r3, [r7, #0]
 80014e8:	b2da      	uxtb	r2, r3
 80014ea:	4908      	ldr	r1, [pc, #32]	; (800150c <__NVIC_SetPriority+0x50>)
 80014ec:	88fb      	ldrh	r3, [r7, #6]
 80014ee:	f003 030f 	and.w	r3, r3, #15
 80014f2:	3b04      	subs	r3, #4
 80014f4:	0112      	lsls	r2, r2, #4
 80014f6:	b2d2      	uxtb	r2, r2
 80014f8:	440b      	add	r3, r1
 80014fa:	761a      	strb	r2, [r3, #24]
}
 80014fc:	bf00      	nop
 80014fe:	370c      	adds	r7, #12
 8001500:	46bd      	mov	sp, r7
 8001502:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001506:	4770      	bx	lr
 8001508:	e000e100 	.word	0xe000e100
 800150c:	e000ed00 	.word	0xe000ed00

08001510 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001510:	b480      	push	{r7}
 8001512:	b089      	sub	sp, #36	; 0x24
 8001514:	af00      	add	r7, sp, #0
 8001516:	60f8      	str	r0, [r7, #12]
 8001518:	60b9      	str	r1, [r7, #8]
 800151a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800151c:	68fb      	ldr	r3, [r7, #12]
 800151e:	f003 0307 	and.w	r3, r3, #7
 8001522:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001524:	69fb      	ldr	r3, [r7, #28]
 8001526:	f1c3 0307 	rsb	r3, r3, #7
 800152a:	2b04      	cmp	r3, #4
 800152c:	bf28      	it	cs
 800152e:	2304      	movcs	r3, #4
 8001530:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001532:	69fb      	ldr	r3, [r7, #28]
 8001534:	3304      	adds	r3, #4
 8001536:	2b06      	cmp	r3, #6
 8001538:	d902      	bls.n	8001540 <NVIC_EncodePriority+0x30>
 800153a:	69fb      	ldr	r3, [r7, #28]
 800153c:	3b03      	subs	r3, #3
 800153e:	e000      	b.n	8001542 <NVIC_EncodePriority+0x32>
 8001540:	2300      	movs	r3, #0
 8001542:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001544:	f04f 32ff 	mov.w	r2, #4294967295
 8001548:	69bb      	ldr	r3, [r7, #24]
 800154a:	fa02 f303 	lsl.w	r3, r2, r3
 800154e:	43da      	mvns	r2, r3
 8001550:	68bb      	ldr	r3, [r7, #8]
 8001552:	401a      	ands	r2, r3
 8001554:	697b      	ldr	r3, [r7, #20]
 8001556:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001558:	f04f 31ff 	mov.w	r1, #4294967295
 800155c:	697b      	ldr	r3, [r7, #20]
 800155e:	fa01 f303 	lsl.w	r3, r1, r3
 8001562:	43d9      	mvns	r1, r3
 8001564:	687b      	ldr	r3, [r7, #4]
 8001566:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001568:	4313      	orrs	r3, r2
         );
}
 800156a:	4618      	mov	r0, r3
 800156c:	3724      	adds	r7, #36	; 0x24
 800156e:	46bd      	mov	sp, r7
 8001570:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001574:	4770      	bx	lr
	...

08001578 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001578:	b580      	push	{r7, lr}
 800157a:	b082      	sub	sp, #8
 800157c:	af00      	add	r7, sp, #0
 800157e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001580:	687b      	ldr	r3, [r7, #4]
 8001582:	3b01      	subs	r3, #1
 8001584:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001588:	d301      	bcc.n	800158e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800158a:	2301      	movs	r3, #1
 800158c:	e00f      	b.n	80015ae <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800158e:	4a0a      	ldr	r2, [pc, #40]	; (80015b8 <SysTick_Config+0x40>)
 8001590:	687b      	ldr	r3, [r7, #4]
 8001592:	3b01      	subs	r3, #1
 8001594:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001596:	210f      	movs	r1, #15
 8001598:	f04f 30ff 	mov.w	r0, #4294967295
 800159c:	f7ff ff8e 	bl	80014bc <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80015a0:	4b05      	ldr	r3, [pc, #20]	; (80015b8 <SysTick_Config+0x40>)
 80015a2:	2200      	movs	r2, #0
 80015a4:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80015a6:	4b04      	ldr	r3, [pc, #16]	; (80015b8 <SysTick_Config+0x40>)
 80015a8:	2207      	movs	r2, #7
 80015aa:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80015ac:	2300      	movs	r3, #0
}
 80015ae:	4618      	mov	r0, r3
 80015b0:	3708      	adds	r7, #8
 80015b2:	46bd      	mov	sp, r7
 80015b4:	bd80      	pop	{r7, pc}
 80015b6:	bf00      	nop
 80015b8:	e000e010 	.word	0xe000e010

080015bc <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80015bc:	b580      	push	{r7, lr}
 80015be:	b082      	sub	sp, #8
 80015c0:	af00      	add	r7, sp, #0
 80015c2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80015c4:	6878      	ldr	r0, [r7, #4]
 80015c6:	f7ff ff29 	bl	800141c <__NVIC_SetPriorityGrouping>
}
 80015ca:	bf00      	nop
 80015cc:	3708      	adds	r7, #8
 80015ce:	46bd      	mov	sp, r7
 80015d0:	bd80      	pop	{r7, pc}

080015d2 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80015d2:	b580      	push	{r7, lr}
 80015d4:	b086      	sub	sp, #24
 80015d6:	af00      	add	r7, sp, #0
 80015d8:	4603      	mov	r3, r0
 80015da:	60b9      	str	r1, [r7, #8]
 80015dc:	607a      	str	r2, [r7, #4]
 80015de:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 80015e0:	f7ff ff40 	bl	8001464 <__NVIC_GetPriorityGrouping>
 80015e4:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80015e6:	687a      	ldr	r2, [r7, #4]
 80015e8:	68b9      	ldr	r1, [r7, #8]
 80015ea:	6978      	ldr	r0, [r7, #20]
 80015ec:	f7ff ff90 	bl	8001510 <NVIC_EncodePriority>
 80015f0:	4602      	mov	r2, r0
 80015f2:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 80015f6:	4611      	mov	r1, r2
 80015f8:	4618      	mov	r0, r3
 80015fa:	f7ff ff5f 	bl	80014bc <__NVIC_SetPriority>
}
 80015fe:	bf00      	nop
 8001600:	3718      	adds	r7, #24
 8001602:	46bd      	mov	sp, r7
 8001604:	bd80      	pop	{r7, pc}

08001606 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32h7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001606:	b580      	push	{r7, lr}
 8001608:	b082      	sub	sp, #8
 800160a:	af00      	add	r7, sp, #0
 800160c:	4603      	mov	r3, r0
 800160e:	80fb      	strh	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001610:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001614:	4618      	mov	r0, r3
 8001616:	f7ff ff33 	bl	8001480 <__NVIC_EnableIRQ>
}
 800161a:	bf00      	nop
 800161c:	3708      	adds	r7, #8
 800161e:	46bd      	mov	sp, r7
 8001620:	bd80      	pop	{r7, pc}

08001622 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status   - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001622:	b580      	push	{r7, lr}
 8001624:	b082      	sub	sp, #8
 8001626:	af00      	add	r7, sp, #0
 8001628:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800162a:	6878      	ldr	r0, [r7, #4]
 800162c:	f7ff ffa4 	bl	8001578 <SysTick_Config>
 8001630:	4603      	mov	r3, r0
}
 8001632:	4618      	mov	r0, r3
 8001634:	3708      	adds	r7, #8
 8001636:	46bd      	mov	sp, r7
 8001638:	bd80      	pop	{r7, pc}
	...

0800163c <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 800163c:	b580      	push	{r7, lr}
 800163e:	b086      	sub	sp, #24
 8001640:	af00      	add	r7, sp, #0
 8001642:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs_dma;
  BDMA_Base_Registers *regs_bdma;
  const __IO uint32_t *enableRegister;

  uint32_t tickstart = HAL_GetTick();
 8001644:	f7ff feba 	bl	80013bc <HAL_GetTick>
 8001648:	6138      	str	r0, [r7, #16]

 /* Check the DMA peripheral handle */
  if(hdma == NULL)
 800164a:	687b      	ldr	r3, [r7, #4]
 800164c:	2b00      	cmp	r3, #0
 800164e:	d101      	bne.n	8001654 <HAL_DMA_Abort+0x18>
  {
    return HAL_ERROR;
 8001650:	2301      	movs	r3, #1
 8001652:	e2dc      	b.n	8001c0e <HAL_DMA_Abort+0x5d2>
  }

  /* Check the DMA peripheral state */
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8001654:	687b      	ldr	r3, [r7, #4]
 8001656:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800165a:	b2db      	uxtb	r3, r3
 800165c:	2b02      	cmp	r3, #2
 800165e:	d008      	beq.n	8001672 <HAL_DMA_Abort+0x36>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001660:	687b      	ldr	r3, [r7, #4]
 8001662:	2280      	movs	r2, #128	; 0x80
 8001664:	655a      	str	r2, [r3, #84]	; 0x54

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001666:	687b      	ldr	r3, [r7, #4]
 8001668:	2200      	movs	r2, #0
 800166a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    return HAL_ERROR;
 800166e:	2301      	movs	r3, #1
 8001670:	e2cd      	b.n	8001c0e <HAL_DMA_Abort+0x5d2>
  }
  else
  {
    /* Disable all the transfer interrupts */
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8001672:	687b      	ldr	r3, [r7, #4]
 8001674:	681b      	ldr	r3, [r3, #0]
 8001676:	4a76      	ldr	r2, [pc, #472]	; (8001850 <HAL_DMA_Abort+0x214>)
 8001678:	4293      	cmp	r3, r2
 800167a:	d04a      	beq.n	8001712 <HAL_DMA_Abort+0xd6>
 800167c:	687b      	ldr	r3, [r7, #4]
 800167e:	681b      	ldr	r3, [r3, #0]
 8001680:	4a74      	ldr	r2, [pc, #464]	; (8001854 <HAL_DMA_Abort+0x218>)
 8001682:	4293      	cmp	r3, r2
 8001684:	d045      	beq.n	8001712 <HAL_DMA_Abort+0xd6>
 8001686:	687b      	ldr	r3, [r7, #4]
 8001688:	681b      	ldr	r3, [r3, #0]
 800168a:	4a73      	ldr	r2, [pc, #460]	; (8001858 <HAL_DMA_Abort+0x21c>)
 800168c:	4293      	cmp	r3, r2
 800168e:	d040      	beq.n	8001712 <HAL_DMA_Abort+0xd6>
 8001690:	687b      	ldr	r3, [r7, #4]
 8001692:	681b      	ldr	r3, [r3, #0]
 8001694:	4a71      	ldr	r2, [pc, #452]	; (800185c <HAL_DMA_Abort+0x220>)
 8001696:	4293      	cmp	r3, r2
 8001698:	d03b      	beq.n	8001712 <HAL_DMA_Abort+0xd6>
 800169a:	687b      	ldr	r3, [r7, #4]
 800169c:	681b      	ldr	r3, [r3, #0]
 800169e:	4a70      	ldr	r2, [pc, #448]	; (8001860 <HAL_DMA_Abort+0x224>)
 80016a0:	4293      	cmp	r3, r2
 80016a2:	d036      	beq.n	8001712 <HAL_DMA_Abort+0xd6>
 80016a4:	687b      	ldr	r3, [r7, #4]
 80016a6:	681b      	ldr	r3, [r3, #0]
 80016a8:	4a6e      	ldr	r2, [pc, #440]	; (8001864 <HAL_DMA_Abort+0x228>)
 80016aa:	4293      	cmp	r3, r2
 80016ac:	d031      	beq.n	8001712 <HAL_DMA_Abort+0xd6>
 80016ae:	687b      	ldr	r3, [r7, #4]
 80016b0:	681b      	ldr	r3, [r3, #0]
 80016b2:	4a6d      	ldr	r2, [pc, #436]	; (8001868 <HAL_DMA_Abort+0x22c>)
 80016b4:	4293      	cmp	r3, r2
 80016b6:	d02c      	beq.n	8001712 <HAL_DMA_Abort+0xd6>
 80016b8:	687b      	ldr	r3, [r7, #4]
 80016ba:	681b      	ldr	r3, [r3, #0]
 80016bc:	4a6b      	ldr	r2, [pc, #428]	; (800186c <HAL_DMA_Abort+0x230>)
 80016be:	4293      	cmp	r3, r2
 80016c0:	d027      	beq.n	8001712 <HAL_DMA_Abort+0xd6>
 80016c2:	687b      	ldr	r3, [r7, #4]
 80016c4:	681b      	ldr	r3, [r3, #0]
 80016c6:	4a6a      	ldr	r2, [pc, #424]	; (8001870 <HAL_DMA_Abort+0x234>)
 80016c8:	4293      	cmp	r3, r2
 80016ca:	d022      	beq.n	8001712 <HAL_DMA_Abort+0xd6>
 80016cc:	687b      	ldr	r3, [r7, #4]
 80016ce:	681b      	ldr	r3, [r3, #0]
 80016d0:	4a68      	ldr	r2, [pc, #416]	; (8001874 <HAL_DMA_Abort+0x238>)
 80016d2:	4293      	cmp	r3, r2
 80016d4:	d01d      	beq.n	8001712 <HAL_DMA_Abort+0xd6>
 80016d6:	687b      	ldr	r3, [r7, #4]
 80016d8:	681b      	ldr	r3, [r3, #0]
 80016da:	4a67      	ldr	r2, [pc, #412]	; (8001878 <HAL_DMA_Abort+0x23c>)
 80016dc:	4293      	cmp	r3, r2
 80016de:	d018      	beq.n	8001712 <HAL_DMA_Abort+0xd6>
 80016e0:	687b      	ldr	r3, [r7, #4]
 80016e2:	681b      	ldr	r3, [r3, #0]
 80016e4:	4a65      	ldr	r2, [pc, #404]	; (800187c <HAL_DMA_Abort+0x240>)
 80016e6:	4293      	cmp	r3, r2
 80016e8:	d013      	beq.n	8001712 <HAL_DMA_Abort+0xd6>
 80016ea:	687b      	ldr	r3, [r7, #4]
 80016ec:	681b      	ldr	r3, [r3, #0]
 80016ee:	4a64      	ldr	r2, [pc, #400]	; (8001880 <HAL_DMA_Abort+0x244>)
 80016f0:	4293      	cmp	r3, r2
 80016f2:	d00e      	beq.n	8001712 <HAL_DMA_Abort+0xd6>
 80016f4:	687b      	ldr	r3, [r7, #4]
 80016f6:	681b      	ldr	r3, [r3, #0]
 80016f8:	4a62      	ldr	r2, [pc, #392]	; (8001884 <HAL_DMA_Abort+0x248>)
 80016fa:	4293      	cmp	r3, r2
 80016fc:	d009      	beq.n	8001712 <HAL_DMA_Abort+0xd6>
 80016fe:	687b      	ldr	r3, [r7, #4]
 8001700:	681b      	ldr	r3, [r3, #0]
 8001702:	4a61      	ldr	r2, [pc, #388]	; (8001888 <HAL_DMA_Abort+0x24c>)
 8001704:	4293      	cmp	r3, r2
 8001706:	d004      	beq.n	8001712 <HAL_DMA_Abort+0xd6>
 8001708:	687b      	ldr	r3, [r7, #4]
 800170a:	681b      	ldr	r3, [r3, #0]
 800170c:	4a5f      	ldr	r2, [pc, #380]	; (800188c <HAL_DMA_Abort+0x250>)
 800170e:	4293      	cmp	r3, r2
 8001710:	d101      	bne.n	8001716 <HAL_DMA_Abort+0xda>
 8001712:	2301      	movs	r3, #1
 8001714:	e000      	b.n	8001718 <HAL_DMA_Abort+0xdc>
 8001716:	2300      	movs	r3, #0
 8001718:	2b00      	cmp	r3, #0
 800171a:	d013      	beq.n	8001744 <HAL_DMA_Abort+0x108>
    {
       /* Disable DMA All Interrupts  */
      ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME | DMA_IT_HT);
 800171c:	687b      	ldr	r3, [r7, #4]
 800171e:	681b      	ldr	r3, [r3, #0]
 8001720:	681a      	ldr	r2, [r3, #0]
 8001722:	687b      	ldr	r3, [r7, #4]
 8001724:	681b      	ldr	r3, [r3, #0]
 8001726:	f022 021e 	bic.w	r2, r2, #30
 800172a:	601a      	str	r2, [r3, #0]
      ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR &= ~(DMA_IT_FE);
 800172c:	687b      	ldr	r3, [r7, #4]
 800172e:	681b      	ldr	r3, [r3, #0]
 8001730:	695a      	ldr	r2, [r3, #20]
 8001732:	687b      	ldr	r3, [r7, #4]
 8001734:	681b      	ldr	r3, [r3, #0]
 8001736:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800173a:	615a      	str	r2, [r3, #20]

      enableRegister = (__IO uint32_t *)(&(((DMA_Stream_TypeDef   *)hdma->Instance)->CR));
 800173c:	687b      	ldr	r3, [r7, #4]
 800173e:	681b      	ldr	r3, [r3, #0]
 8001740:	617b      	str	r3, [r7, #20]
 8001742:	e00a      	b.n	800175a <HAL_DMA_Abort+0x11e>
    }
    else /* BDMA channel */
    {
      /* Disable DMA All Interrupts */
      ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  &= ~(BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE);
 8001744:	687b      	ldr	r3, [r7, #4]
 8001746:	681b      	ldr	r3, [r3, #0]
 8001748:	681a      	ldr	r2, [r3, #0]
 800174a:	687b      	ldr	r3, [r7, #4]
 800174c:	681b      	ldr	r3, [r3, #0]
 800174e:	f022 020e 	bic.w	r2, r2, #14
 8001752:	601a      	str	r2, [r3, #0]

      enableRegister = (__IO uint32_t *)(&(((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR));
 8001754:	687b      	ldr	r3, [r7, #4]
 8001756:	681b      	ldr	r3, [r3, #0]
 8001758:	617b      	str	r3, [r7, #20]
    }

    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 800175a:	687b      	ldr	r3, [r7, #4]
 800175c:	681b      	ldr	r3, [r3, #0]
 800175e:	4a3c      	ldr	r2, [pc, #240]	; (8001850 <HAL_DMA_Abort+0x214>)
 8001760:	4293      	cmp	r3, r2
 8001762:	d072      	beq.n	800184a <HAL_DMA_Abort+0x20e>
 8001764:	687b      	ldr	r3, [r7, #4]
 8001766:	681b      	ldr	r3, [r3, #0]
 8001768:	4a3a      	ldr	r2, [pc, #232]	; (8001854 <HAL_DMA_Abort+0x218>)
 800176a:	4293      	cmp	r3, r2
 800176c:	d06d      	beq.n	800184a <HAL_DMA_Abort+0x20e>
 800176e:	687b      	ldr	r3, [r7, #4]
 8001770:	681b      	ldr	r3, [r3, #0]
 8001772:	4a39      	ldr	r2, [pc, #228]	; (8001858 <HAL_DMA_Abort+0x21c>)
 8001774:	4293      	cmp	r3, r2
 8001776:	d068      	beq.n	800184a <HAL_DMA_Abort+0x20e>
 8001778:	687b      	ldr	r3, [r7, #4]
 800177a:	681b      	ldr	r3, [r3, #0]
 800177c:	4a37      	ldr	r2, [pc, #220]	; (800185c <HAL_DMA_Abort+0x220>)
 800177e:	4293      	cmp	r3, r2
 8001780:	d063      	beq.n	800184a <HAL_DMA_Abort+0x20e>
 8001782:	687b      	ldr	r3, [r7, #4]
 8001784:	681b      	ldr	r3, [r3, #0]
 8001786:	4a36      	ldr	r2, [pc, #216]	; (8001860 <HAL_DMA_Abort+0x224>)
 8001788:	4293      	cmp	r3, r2
 800178a:	d05e      	beq.n	800184a <HAL_DMA_Abort+0x20e>
 800178c:	687b      	ldr	r3, [r7, #4]
 800178e:	681b      	ldr	r3, [r3, #0]
 8001790:	4a34      	ldr	r2, [pc, #208]	; (8001864 <HAL_DMA_Abort+0x228>)
 8001792:	4293      	cmp	r3, r2
 8001794:	d059      	beq.n	800184a <HAL_DMA_Abort+0x20e>
 8001796:	687b      	ldr	r3, [r7, #4]
 8001798:	681b      	ldr	r3, [r3, #0]
 800179a:	4a33      	ldr	r2, [pc, #204]	; (8001868 <HAL_DMA_Abort+0x22c>)
 800179c:	4293      	cmp	r3, r2
 800179e:	d054      	beq.n	800184a <HAL_DMA_Abort+0x20e>
 80017a0:	687b      	ldr	r3, [r7, #4]
 80017a2:	681b      	ldr	r3, [r3, #0]
 80017a4:	4a31      	ldr	r2, [pc, #196]	; (800186c <HAL_DMA_Abort+0x230>)
 80017a6:	4293      	cmp	r3, r2
 80017a8:	d04f      	beq.n	800184a <HAL_DMA_Abort+0x20e>
 80017aa:	687b      	ldr	r3, [r7, #4]
 80017ac:	681b      	ldr	r3, [r3, #0]
 80017ae:	4a30      	ldr	r2, [pc, #192]	; (8001870 <HAL_DMA_Abort+0x234>)
 80017b0:	4293      	cmp	r3, r2
 80017b2:	d04a      	beq.n	800184a <HAL_DMA_Abort+0x20e>
 80017b4:	687b      	ldr	r3, [r7, #4]
 80017b6:	681b      	ldr	r3, [r3, #0]
 80017b8:	4a2e      	ldr	r2, [pc, #184]	; (8001874 <HAL_DMA_Abort+0x238>)
 80017ba:	4293      	cmp	r3, r2
 80017bc:	d045      	beq.n	800184a <HAL_DMA_Abort+0x20e>
 80017be:	687b      	ldr	r3, [r7, #4]
 80017c0:	681b      	ldr	r3, [r3, #0]
 80017c2:	4a2d      	ldr	r2, [pc, #180]	; (8001878 <HAL_DMA_Abort+0x23c>)
 80017c4:	4293      	cmp	r3, r2
 80017c6:	d040      	beq.n	800184a <HAL_DMA_Abort+0x20e>
 80017c8:	687b      	ldr	r3, [r7, #4]
 80017ca:	681b      	ldr	r3, [r3, #0]
 80017cc:	4a2b      	ldr	r2, [pc, #172]	; (800187c <HAL_DMA_Abort+0x240>)
 80017ce:	4293      	cmp	r3, r2
 80017d0:	d03b      	beq.n	800184a <HAL_DMA_Abort+0x20e>
 80017d2:	687b      	ldr	r3, [r7, #4]
 80017d4:	681b      	ldr	r3, [r3, #0]
 80017d6:	4a2a      	ldr	r2, [pc, #168]	; (8001880 <HAL_DMA_Abort+0x244>)
 80017d8:	4293      	cmp	r3, r2
 80017da:	d036      	beq.n	800184a <HAL_DMA_Abort+0x20e>
 80017dc:	687b      	ldr	r3, [r7, #4]
 80017de:	681b      	ldr	r3, [r3, #0]
 80017e0:	4a28      	ldr	r2, [pc, #160]	; (8001884 <HAL_DMA_Abort+0x248>)
 80017e2:	4293      	cmp	r3, r2
 80017e4:	d031      	beq.n	800184a <HAL_DMA_Abort+0x20e>
 80017e6:	687b      	ldr	r3, [r7, #4]
 80017e8:	681b      	ldr	r3, [r3, #0]
 80017ea:	4a27      	ldr	r2, [pc, #156]	; (8001888 <HAL_DMA_Abort+0x24c>)
 80017ec:	4293      	cmp	r3, r2
 80017ee:	d02c      	beq.n	800184a <HAL_DMA_Abort+0x20e>
 80017f0:	687b      	ldr	r3, [r7, #4]
 80017f2:	681b      	ldr	r3, [r3, #0]
 80017f4:	4a25      	ldr	r2, [pc, #148]	; (800188c <HAL_DMA_Abort+0x250>)
 80017f6:	4293      	cmp	r3, r2
 80017f8:	d027      	beq.n	800184a <HAL_DMA_Abort+0x20e>
 80017fa:	687b      	ldr	r3, [r7, #4]
 80017fc:	681b      	ldr	r3, [r3, #0]
 80017fe:	4a24      	ldr	r2, [pc, #144]	; (8001890 <HAL_DMA_Abort+0x254>)
 8001800:	4293      	cmp	r3, r2
 8001802:	d022      	beq.n	800184a <HAL_DMA_Abort+0x20e>
 8001804:	687b      	ldr	r3, [r7, #4]
 8001806:	681b      	ldr	r3, [r3, #0]
 8001808:	4a22      	ldr	r2, [pc, #136]	; (8001894 <HAL_DMA_Abort+0x258>)
 800180a:	4293      	cmp	r3, r2
 800180c:	d01d      	beq.n	800184a <HAL_DMA_Abort+0x20e>
 800180e:	687b      	ldr	r3, [r7, #4]
 8001810:	681b      	ldr	r3, [r3, #0]
 8001812:	4a21      	ldr	r2, [pc, #132]	; (8001898 <HAL_DMA_Abort+0x25c>)
 8001814:	4293      	cmp	r3, r2
 8001816:	d018      	beq.n	800184a <HAL_DMA_Abort+0x20e>
 8001818:	687b      	ldr	r3, [r7, #4]
 800181a:	681b      	ldr	r3, [r3, #0]
 800181c:	4a1f      	ldr	r2, [pc, #124]	; (800189c <HAL_DMA_Abort+0x260>)
 800181e:	4293      	cmp	r3, r2
 8001820:	d013      	beq.n	800184a <HAL_DMA_Abort+0x20e>
 8001822:	687b      	ldr	r3, [r7, #4]
 8001824:	681b      	ldr	r3, [r3, #0]
 8001826:	4a1e      	ldr	r2, [pc, #120]	; (80018a0 <HAL_DMA_Abort+0x264>)
 8001828:	4293      	cmp	r3, r2
 800182a:	d00e      	beq.n	800184a <HAL_DMA_Abort+0x20e>
 800182c:	687b      	ldr	r3, [r7, #4]
 800182e:	681b      	ldr	r3, [r3, #0]
 8001830:	4a1c      	ldr	r2, [pc, #112]	; (80018a4 <HAL_DMA_Abort+0x268>)
 8001832:	4293      	cmp	r3, r2
 8001834:	d009      	beq.n	800184a <HAL_DMA_Abort+0x20e>
 8001836:	687b      	ldr	r3, [r7, #4]
 8001838:	681b      	ldr	r3, [r3, #0]
 800183a:	4a1b      	ldr	r2, [pc, #108]	; (80018a8 <HAL_DMA_Abort+0x26c>)
 800183c:	4293      	cmp	r3, r2
 800183e:	d004      	beq.n	800184a <HAL_DMA_Abort+0x20e>
 8001840:	687b      	ldr	r3, [r7, #4]
 8001842:	681b      	ldr	r3, [r3, #0]
 8001844:	4a19      	ldr	r2, [pc, #100]	; (80018ac <HAL_DMA_Abort+0x270>)
 8001846:	4293      	cmp	r3, r2
 8001848:	d132      	bne.n	80018b0 <HAL_DMA_Abort+0x274>
 800184a:	2301      	movs	r3, #1
 800184c:	e031      	b.n	80018b2 <HAL_DMA_Abort+0x276>
 800184e:	bf00      	nop
 8001850:	40020010 	.word	0x40020010
 8001854:	40020028 	.word	0x40020028
 8001858:	40020040 	.word	0x40020040
 800185c:	40020058 	.word	0x40020058
 8001860:	40020070 	.word	0x40020070
 8001864:	40020088 	.word	0x40020088
 8001868:	400200a0 	.word	0x400200a0
 800186c:	400200b8 	.word	0x400200b8
 8001870:	40020410 	.word	0x40020410
 8001874:	40020428 	.word	0x40020428
 8001878:	40020440 	.word	0x40020440
 800187c:	40020458 	.word	0x40020458
 8001880:	40020470 	.word	0x40020470
 8001884:	40020488 	.word	0x40020488
 8001888:	400204a0 	.word	0x400204a0
 800188c:	400204b8 	.word	0x400204b8
 8001890:	58025408 	.word	0x58025408
 8001894:	5802541c 	.word	0x5802541c
 8001898:	58025430 	.word	0x58025430
 800189c:	58025444 	.word	0x58025444
 80018a0:	58025458 	.word	0x58025458
 80018a4:	5802546c 	.word	0x5802546c
 80018a8:	58025480 	.word	0x58025480
 80018ac:	58025494 	.word	0x58025494
 80018b0:	2300      	movs	r3, #0
 80018b2:	2b00      	cmp	r3, #0
 80018b4:	d007      	beq.n	80018c6 <HAL_DMA_Abort+0x28a>
    {
      /* disable the DMAMUX sync overrun IT */
      hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 80018b6:	687b      	ldr	r3, [r7, #4]
 80018b8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80018ba:	681a      	ldr	r2, [r3, #0]
 80018bc:	687b      	ldr	r3, [r7, #4]
 80018be:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80018c0:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80018c4:	601a      	str	r2, [r3, #0]
    }

    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 80018c6:	687b      	ldr	r3, [r7, #4]
 80018c8:	681b      	ldr	r3, [r3, #0]
 80018ca:	4a6d      	ldr	r2, [pc, #436]	; (8001a80 <HAL_DMA_Abort+0x444>)
 80018cc:	4293      	cmp	r3, r2
 80018ce:	d04a      	beq.n	8001966 <HAL_DMA_Abort+0x32a>
 80018d0:	687b      	ldr	r3, [r7, #4]
 80018d2:	681b      	ldr	r3, [r3, #0]
 80018d4:	4a6b      	ldr	r2, [pc, #428]	; (8001a84 <HAL_DMA_Abort+0x448>)
 80018d6:	4293      	cmp	r3, r2
 80018d8:	d045      	beq.n	8001966 <HAL_DMA_Abort+0x32a>
 80018da:	687b      	ldr	r3, [r7, #4]
 80018dc:	681b      	ldr	r3, [r3, #0]
 80018de:	4a6a      	ldr	r2, [pc, #424]	; (8001a88 <HAL_DMA_Abort+0x44c>)
 80018e0:	4293      	cmp	r3, r2
 80018e2:	d040      	beq.n	8001966 <HAL_DMA_Abort+0x32a>
 80018e4:	687b      	ldr	r3, [r7, #4]
 80018e6:	681b      	ldr	r3, [r3, #0]
 80018e8:	4a68      	ldr	r2, [pc, #416]	; (8001a8c <HAL_DMA_Abort+0x450>)
 80018ea:	4293      	cmp	r3, r2
 80018ec:	d03b      	beq.n	8001966 <HAL_DMA_Abort+0x32a>
 80018ee:	687b      	ldr	r3, [r7, #4]
 80018f0:	681b      	ldr	r3, [r3, #0]
 80018f2:	4a67      	ldr	r2, [pc, #412]	; (8001a90 <HAL_DMA_Abort+0x454>)
 80018f4:	4293      	cmp	r3, r2
 80018f6:	d036      	beq.n	8001966 <HAL_DMA_Abort+0x32a>
 80018f8:	687b      	ldr	r3, [r7, #4]
 80018fa:	681b      	ldr	r3, [r3, #0]
 80018fc:	4a65      	ldr	r2, [pc, #404]	; (8001a94 <HAL_DMA_Abort+0x458>)
 80018fe:	4293      	cmp	r3, r2
 8001900:	d031      	beq.n	8001966 <HAL_DMA_Abort+0x32a>
 8001902:	687b      	ldr	r3, [r7, #4]
 8001904:	681b      	ldr	r3, [r3, #0]
 8001906:	4a64      	ldr	r2, [pc, #400]	; (8001a98 <HAL_DMA_Abort+0x45c>)
 8001908:	4293      	cmp	r3, r2
 800190a:	d02c      	beq.n	8001966 <HAL_DMA_Abort+0x32a>
 800190c:	687b      	ldr	r3, [r7, #4]
 800190e:	681b      	ldr	r3, [r3, #0]
 8001910:	4a62      	ldr	r2, [pc, #392]	; (8001a9c <HAL_DMA_Abort+0x460>)
 8001912:	4293      	cmp	r3, r2
 8001914:	d027      	beq.n	8001966 <HAL_DMA_Abort+0x32a>
 8001916:	687b      	ldr	r3, [r7, #4]
 8001918:	681b      	ldr	r3, [r3, #0]
 800191a:	4a61      	ldr	r2, [pc, #388]	; (8001aa0 <HAL_DMA_Abort+0x464>)
 800191c:	4293      	cmp	r3, r2
 800191e:	d022      	beq.n	8001966 <HAL_DMA_Abort+0x32a>
 8001920:	687b      	ldr	r3, [r7, #4]
 8001922:	681b      	ldr	r3, [r3, #0]
 8001924:	4a5f      	ldr	r2, [pc, #380]	; (8001aa4 <HAL_DMA_Abort+0x468>)
 8001926:	4293      	cmp	r3, r2
 8001928:	d01d      	beq.n	8001966 <HAL_DMA_Abort+0x32a>
 800192a:	687b      	ldr	r3, [r7, #4]
 800192c:	681b      	ldr	r3, [r3, #0]
 800192e:	4a5e      	ldr	r2, [pc, #376]	; (8001aa8 <HAL_DMA_Abort+0x46c>)
 8001930:	4293      	cmp	r3, r2
 8001932:	d018      	beq.n	8001966 <HAL_DMA_Abort+0x32a>
 8001934:	687b      	ldr	r3, [r7, #4]
 8001936:	681b      	ldr	r3, [r3, #0]
 8001938:	4a5c      	ldr	r2, [pc, #368]	; (8001aac <HAL_DMA_Abort+0x470>)
 800193a:	4293      	cmp	r3, r2
 800193c:	d013      	beq.n	8001966 <HAL_DMA_Abort+0x32a>
 800193e:	687b      	ldr	r3, [r7, #4]
 8001940:	681b      	ldr	r3, [r3, #0]
 8001942:	4a5b      	ldr	r2, [pc, #364]	; (8001ab0 <HAL_DMA_Abort+0x474>)
 8001944:	4293      	cmp	r3, r2
 8001946:	d00e      	beq.n	8001966 <HAL_DMA_Abort+0x32a>
 8001948:	687b      	ldr	r3, [r7, #4]
 800194a:	681b      	ldr	r3, [r3, #0]
 800194c:	4a59      	ldr	r2, [pc, #356]	; (8001ab4 <HAL_DMA_Abort+0x478>)
 800194e:	4293      	cmp	r3, r2
 8001950:	d009      	beq.n	8001966 <HAL_DMA_Abort+0x32a>
 8001952:	687b      	ldr	r3, [r7, #4]
 8001954:	681b      	ldr	r3, [r3, #0]
 8001956:	4a58      	ldr	r2, [pc, #352]	; (8001ab8 <HAL_DMA_Abort+0x47c>)
 8001958:	4293      	cmp	r3, r2
 800195a:	d004      	beq.n	8001966 <HAL_DMA_Abort+0x32a>
 800195c:	687b      	ldr	r3, [r7, #4]
 800195e:	681b      	ldr	r3, [r3, #0]
 8001960:	4a56      	ldr	r2, [pc, #344]	; (8001abc <HAL_DMA_Abort+0x480>)
 8001962:	4293      	cmp	r3, r2
 8001964:	d108      	bne.n	8001978 <HAL_DMA_Abort+0x33c>
 8001966:	687b      	ldr	r3, [r7, #4]
 8001968:	681b      	ldr	r3, [r3, #0]
 800196a:	681a      	ldr	r2, [r3, #0]
 800196c:	687b      	ldr	r3, [r7, #4]
 800196e:	681b      	ldr	r3, [r3, #0]
 8001970:	f022 0201 	bic.w	r2, r2, #1
 8001974:	601a      	str	r2, [r3, #0]
 8001976:	e007      	b.n	8001988 <HAL_DMA_Abort+0x34c>
 8001978:	687b      	ldr	r3, [r7, #4]
 800197a:	681b      	ldr	r3, [r3, #0]
 800197c:	681a      	ldr	r2, [r3, #0]
 800197e:	687b      	ldr	r3, [r7, #4]
 8001980:	681b      	ldr	r3, [r3, #0]
 8001982:	f022 0201 	bic.w	r2, r2, #1
 8001986:	601a      	str	r2, [r3, #0]

    /* Check if the DMA Stream is effectively disabled */
    while(((*enableRegister) & DMA_SxCR_EN) != 0U)
 8001988:	e013      	b.n	80019b2 <HAL_DMA_Abort+0x376>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 800198a:	f7ff fd17 	bl	80013bc <HAL_GetTick>
 800198e:	4602      	mov	r2, r0
 8001990:	693b      	ldr	r3, [r7, #16]
 8001992:	1ad3      	subs	r3, r2, r3
 8001994:	2b05      	cmp	r3, #5
 8001996:	d90c      	bls.n	80019b2 <HAL_DMA_Abort+0x376>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8001998:	687b      	ldr	r3, [r7, #4]
 800199a:	2220      	movs	r2, #32
 800199c:	655a      	str	r2, [r3, #84]	; 0x54

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 800199e:	687b      	ldr	r3, [r7, #4]
 80019a0:	2200      	movs	r2, #0
 80019a2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_ERROR;
 80019a6:	687b      	ldr	r3, [r7, #4]
 80019a8:	2203      	movs	r2, #3
 80019aa:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        return HAL_ERROR;
 80019ae:	2301      	movs	r3, #1
 80019b0:	e12d      	b.n	8001c0e <HAL_DMA_Abort+0x5d2>
    while(((*enableRegister) & DMA_SxCR_EN) != 0U)
 80019b2:	697b      	ldr	r3, [r7, #20]
 80019b4:	681b      	ldr	r3, [r3, #0]
 80019b6:	f003 0301 	and.w	r3, r3, #1
 80019ba:	2b00      	cmp	r3, #0
 80019bc:	d1e5      	bne.n	800198a <HAL_DMA_Abort+0x34e>
      }
    }

    /* Clear all interrupt flags at correct offset within the register */
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 80019be:	687b      	ldr	r3, [r7, #4]
 80019c0:	681b      	ldr	r3, [r3, #0]
 80019c2:	4a2f      	ldr	r2, [pc, #188]	; (8001a80 <HAL_DMA_Abort+0x444>)
 80019c4:	4293      	cmp	r3, r2
 80019c6:	d04a      	beq.n	8001a5e <HAL_DMA_Abort+0x422>
 80019c8:	687b      	ldr	r3, [r7, #4]
 80019ca:	681b      	ldr	r3, [r3, #0]
 80019cc:	4a2d      	ldr	r2, [pc, #180]	; (8001a84 <HAL_DMA_Abort+0x448>)
 80019ce:	4293      	cmp	r3, r2
 80019d0:	d045      	beq.n	8001a5e <HAL_DMA_Abort+0x422>
 80019d2:	687b      	ldr	r3, [r7, #4]
 80019d4:	681b      	ldr	r3, [r3, #0]
 80019d6:	4a2c      	ldr	r2, [pc, #176]	; (8001a88 <HAL_DMA_Abort+0x44c>)
 80019d8:	4293      	cmp	r3, r2
 80019da:	d040      	beq.n	8001a5e <HAL_DMA_Abort+0x422>
 80019dc:	687b      	ldr	r3, [r7, #4]
 80019de:	681b      	ldr	r3, [r3, #0]
 80019e0:	4a2a      	ldr	r2, [pc, #168]	; (8001a8c <HAL_DMA_Abort+0x450>)
 80019e2:	4293      	cmp	r3, r2
 80019e4:	d03b      	beq.n	8001a5e <HAL_DMA_Abort+0x422>
 80019e6:	687b      	ldr	r3, [r7, #4]
 80019e8:	681b      	ldr	r3, [r3, #0]
 80019ea:	4a29      	ldr	r2, [pc, #164]	; (8001a90 <HAL_DMA_Abort+0x454>)
 80019ec:	4293      	cmp	r3, r2
 80019ee:	d036      	beq.n	8001a5e <HAL_DMA_Abort+0x422>
 80019f0:	687b      	ldr	r3, [r7, #4]
 80019f2:	681b      	ldr	r3, [r3, #0]
 80019f4:	4a27      	ldr	r2, [pc, #156]	; (8001a94 <HAL_DMA_Abort+0x458>)
 80019f6:	4293      	cmp	r3, r2
 80019f8:	d031      	beq.n	8001a5e <HAL_DMA_Abort+0x422>
 80019fa:	687b      	ldr	r3, [r7, #4]
 80019fc:	681b      	ldr	r3, [r3, #0]
 80019fe:	4a26      	ldr	r2, [pc, #152]	; (8001a98 <HAL_DMA_Abort+0x45c>)
 8001a00:	4293      	cmp	r3, r2
 8001a02:	d02c      	beq.n	8001a5e <HAL_DMA_Abort+0x422>
 8001a04:	687b      	ldr	r3, [r7, #4]
 8001a06:	681b      	ldr	r3, [r3, #0]
 8001a08:	4a24      	ldr	r2, [pc, #144]	; (8001a9c <HAL_DMA_Abort+0x460>)
 8001a0a:	4293      	cmp	r3, r2
 8001a0c:	d027      	beq.n	8001a5e <HAL_DMA_Abort+0x422>
 8001a0e:	687b      	ldr	r3, [r7, #4]
 8001a10:	681b      	ldr	r3, [r3, #0]
 8001a12:	4a23      	ldr	r2, [pc, #140]	; (8001aa0 <HAL_DMA_Abort+0x464>)
 8001a14:	4293      	cmp	r3, r2
 8001a16:	d022      	beq.n	8001a5e <HAL_DMA_Abort+0x422>
 8001a18:	687b      	ldr	r3, [r7, #4]
 8001a1a:	681b      	ldr	r3, [r3, #0]
 8001a1c:	4a21      	ldr	r2, [pc, #132]	; (8001aa4 <HAL_DMA_Abort+0x468>)
 8001a1e:	4293      	cmp	r3, r2
 8001a20:	d01d      	beq.n	8001a5e <HAL_DMA_Abort+0x422>
 8001a22:	687b      	ldr	r3, [r7, #4]
 8001a24:	681b      	ldr	r3, [r3, #0]
 8001a26:	4a20      	ldr	r2, [pc, #128]	; (8001aa8 <HAL_DMA_Abort+0x46c>)
 8001a28:	4293      	cmp	r3, r2
 8001a2a:	d018      	beq.n	8001a5e <HAL_DMA_Abort+0x422>
 8001a2c:	687b      	ldr	r3, [r7, #4]
 8001a2e:	681b      	ldr	r3, [r3, #0]
 8001a30:	4a1e      	ldr	r2, [pc, #120]	; (8001aac <HAL_DMA_Abort+0x470>)
 8001a32:	4293      	cmp	r3, r2
 8001a34:	d013      	beq.n	8001a5e <HAL_DMA_Abort+0x422>
 8001a36:	687b      	ldr	r3, [r7, #4]
 8001a38:	681b      	ldr	r3, [r3, #0]
 8001a3a:	4a1d      	ldr	r2, [pc, #116]	; (8001ab0 <HAL_DMA_Abort+0x474>)
 8001a3c:	4293      	cmp	r3, r2
 8001a3e:	d00e      	beq.n	8001a5e <HAL_DMA_Abort+0x422>
 8001a40:	687b      	ldr	r3, [r7, #4]
 8001a42:	681b      	ldr	r3, [r3, #0]
 8001a44:	4a1b      	ldr	r2, [pc, #108]	; (8001ab4 <HAL_DMA_Abort+0x478>)
 8001a46:	4293      	cmp	r3, r2
 8001a48:	d009      	beq.n	8001a5e <HAL_DMA_Abort+0x422>
 8001a4a:	687b      	ldr	r3, [r7, #4]
 8001a4c:	681b      	ldr	r3, [r3, #0]
 8001a4e:	4a1a      	ldr	r2, [pc, #104]	; (8001ab8 <HAL_DMA_Abort+0x47c>)
 8001a50:	4293      	cmp	r3, r2
 8001a52:	d004      	beq.n	8001a5e <HAL_DMA_Abort+0x422>
 8001a54:	687b      	ldr	r3, [r7, #4]
 8001a56:	681b      	ldr	r3, [r3, #0]
 8001a58:	4a18      	ldr	r2, [pc, #96]	; (8001abc <HAL_DMA_Abort+0x480>)
 8001a5a:	4293      	cmp	r3, r2
 8001a5c:	d101      	bne.n	8001a62 <HAL_DMA_Abort+0x426>
 8001a5e:	2301      	movs	r3, #1
 8001a60:	e000      	b.n	8001a64 <HAL_DMA_Abort+0x428>
 8001a62:	2300      	movs	r3, #0
 8001a64:	2b00      	cmp	r3, #0
 8001a66:	d02b      	beq.n	8001ac0 <HAL_DMA_Abort+0x484>
    {
      regs_dma = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8001a68:	687b      	ldr	r3, [r7, #4]
 8001a6a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001a6c:	60bb      	str	r3, [r7, #8]
      regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 8001a6e:	687b      	ldr	r3, [r7, #4]
 8001a70:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001a72:	f003 031f 	and.w	r3, r3, #31
 8001a76:	223f      	movs	r2, #63	; 0x3f
 8001a78:	409a      	lsls	r2, r3
 8001a7a:	68bb      	ldr	r3, [r7, #8]
 8001a7c:	609a      	str	r2, [r3, #8]
 8001a7e:	e02a      	b.n	8001ad6 <HAL_DMA_Abort+0x49a>
 8001a80:	40020010 	.word	0x40020010
 8001a84:	40020028 	.word	0x40020028
 8001a88:	40020040 	.word	0x40020040
 8001a8c:	40020058 	.word	0x40020058
 8001a90:	40020070 	.word	0x40020070
 8001a94:	40020088 	.word	0x40020088
 8001a98:	400200a0 	.word	0x400200a0
 8001a9c:	400200b8 	.word	0x400200b8
 8001aa0:	40020410 	.word	0x40020410
 8001aa4:	40020428 	.word	0x40020428
 8001aa8:	40020440 	.word	0x40020440
 8001aac:	40020458 	.word	0x40020458
 8001ab0:	40020470 	.word	0x40020470
 8001ab4:	40020488 	.word	0x40020488
 8001ab8:	400204a0 	.word	0x400204a0
 8001abc:	400204b8 	.word	0x400204b8
    }
    else /* BDMA channel */
    {
      regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 8001ac0:	687b      	ldr	r3, [r7, #4]
 8001ac2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001ac4:	60fb      	str	r3, [r7, #12]
      regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 8001ac6:	687b      	ldr	r3, [r7, #4]
 8001ac8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001aca:	f003 031f 	and.w	r3, r3, #31
 8001ace:	2201      	movs	r2, #1
 8001ad0:	409a      	lsls	r2, r3
 8001ad2:	68fb      	ldr	r3, [r7, #12]
 8001ad4:	605a      	str	r2, [r3, #4]
    }

    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8001ad6:	687b      	ldr	r3, [r7, #4]
 8001ad8:	681b      	ldr	r3, [r3, #0]
 8001ada:	4a4f      	ldr	r2, [pc, #316]	; (8001c18 <HAL_DMA_Abort+0x5dc>)
 8001adc:	4293      	cmp	r3, r2
 8001ade:	d072      	beq.n	8001bc6 <HAL_DMA_Abort+0x58a>
 8001ae0:	687b      	ldr	r3, [r7, #4]
 8001ae2:	681b      	ldr	r3, [r3, #0]
 8001ae4:	4a4d      	ldr	r2, [pc, #308]	; (8001c1c <HAL_DMA_Abort+0x5e0>)
 8001ae6:	4293      	cmp	r3, r2
 8001ae8:	d06d      	beq.n	8001bc6 <HAL_DMA_Abort+0x58a>
 8001aea:	687b      	ldr	r3, [r7, #4]
 8001aec:	681b      	ldr	r3, [r3, #0]
 8001aee:	4a4c      	ldr	r2, [pc, #304]	; (8001c20 <HAL_DMA_Abort+0x5e4>)
 8001af0:	4293      	cmp	r3, r2
 8001af2:	d068      	beq.n	8001bc6 <HAL_DMA_Abort+0x58a>
 8001af4:	687b      	ldr	r3, [r7, #4]
 8001af6:	681b      	ldr	r3, [r3, #0]
 8001af8:	4a4a      	ldr	r2, [pc, #296]	; (8001c24 <HAL_DMA_Abort+0x5e8>)
 8001afa:	4293      	cmp	r3, r2
 8001afc:	d063      	beq.n	8001bc6 <HAL_DMA_Abort+0x58a>
 8001afe:	687b      	ldr	r3, [r7, #4]
 8001b00:	681b      	ldr	r3, [r3, #0]
 8001b02:	4a49      	ldr	r2, [pc, #292]	; (8001c28 <HAL_DMA_Abort+0x5ec>)
 8001b04:	4293      	cmp	r3, r2
 8001b06:	d05e      	beq.n	8001bc6 <HAL_DMA_Abort+0x58a>
 8001b08:	687b      	ldr	r3, [r7, #4]
 8001b0a:	681b      	ldr	r3, [r3, #0]
 8001b0c:	4a47      	ldr	r2, [pc, #284]	; (8001c2c <HAL_DMA_Abort+0x5f0>)
 8001b0e:	4293      	cmp	r3, r2
 8001b10:	d059      	beq.n	8001bc6 <HAL_DMA_Abort+0x58a>
 8001b12:	687b      	ldr	r3, [r7, #4]
 8001b14:	681b      	ldr	r3, [r3, #0]
 8001b16:	4a46      	ldr	r2, [pc, #280]	; (8001c30 <HAL_DMA_Abort+0x5f4>)
 8001b18:	4293      	cmp	r3, r2
 8001b1a:	d054      	beq.n	8001bc6 <HAL_DMA_Abort+0x58a>
 8001b1c:	687b      	ldr	r3, [r7, #4]
 8001b1e:	681b      	ldr	r3, [r3, #0]
 8001b20:	4a44      	ldr	r2, [pc, #272]	; (8001c34 <HAL_DMA_Abort+0x5f8>)
 8001b22:	4293      	cmp	r3, r2
 8001b24:	d04f      	beq.n	8001bc6 <HAL_DMA_Abort+0x58a>
 8001b26:	687b      	ldr	r3, [r7, #4]
 8001b28:	681b      	ldr	r3, [r3, #0]
 8001b2a:	4a43      	ldr	r2, [pc, #268]	; (8001c38 <HAL_DMA_Abort+0x5fc>)
 8001b2c:	4293      	cmp	r3, r2
 8001b2e:	d04a      	beq.n	8001bc6 <HAL_DMA_Abort+0x58a>
 8001b30:	687b      	ldr	r3, [r7, #4]
 8001b32:	681b      	ldr	r3, [r3, #0]
 8001b34:	4a41      	ldr	r2, [pc, #260]	; (8001c3c <HAL_DMA_Abort+0x600>)
 8001b36:	4293      	cmp	r3, r2
 8001b38:	d045      	beq.n	8001bc6 <HAL_DMA_Abort+0x58a>
 8001b3a:	687b      	ldr	r3, [r7, #4]
 8001b3c:	681b      	ldr	r3, [r3, #0]
 8001b3e:	4a40      	ldr	r2, [pc, #256]	; (8001c40 <HAL_DMA_Abort+0x604>)
 8001b40:	4293      	cmp	r3, r2
 8001b42:	d040      	beq.n	8001bc6 <HAL_DMA_Abort+0x58a>
 8001b44:	687b      	ldr	r3, [r7, #4]
 8001b46:	681b      	ldr	r3, [r3, #0]
 8001b48:	4a3e      	ldr	r2, [pc, #248]	; (8001c44 <HAL_DMA_Abort+0x608>)
 8001b4a:	4293      	cmp	r3, r2
 8001b4c:	d03b      	beq.n	8001bc6 <HAL_DMA_Abort+0x58a>
 8001b4e:	687b      	ldr	r3, [r7, #4]
 8001b50:	681b      	ldr	r3, [r3, #0]
 8001b52:	4a3d      	ldr	r2, [pc, #244]	; (8001c48 <HAL_DMA_Abort+0x60c>)
 8001b54:	4293      	cmp	r3, r2
 8001b56:	d036      	beq.n	8001bc6 <HAL_DMA_Abort+0x58a>
 8001b58:	687b      	ldr	r3, [r7, #4]
 8001b5a:	681b      	ldr	r3, [r3, #0]
 8001b5c:	4a3b      	ldr	r2, [pc, #236]	; (8001c4c <HAL_DMA_Abort+0x610>)
 8001b5e:	4293      	cmp	r3, r2
 8001b60:	d031      	beq.n	8001bc6 <HAL_DMA_Abort+0x58a>
 8001b62:	687b      	ldr	r3, [r7, #4]
 8001b64:	681b      	ldr	r3, [r3, #0]
 8001b66:	4a3a      	ldr	r2, [pc, #232]	; (8001c50 <HAL_DMA_Abort+0x614>)
 8001b68:	4293      	cmp	r3, r2
 8001b6a:	d02c      	beq.n	8001bc6 <HAL_DMA_Abort+0x58a>
 8001b6c:	687b      	ldr	r3, [r7, #4]
 8001b6e:	681b      	ldr	r3, [r3, #0]
 8001b70:	4a38      	ldr	r2, [pc, #224]	; (8001c54 <HAL_DMA_Abort+0x618>)
 8001b72:	4293      	cmp	r3, r2
 8001b74:	d027      	beq.n	8001bc6 <HAL_DMA_Abort+0x58a>
 8001b76:	687b      	ldr	r3, [r7, #4]
 8001b78:	681b      	ldr	r3, [r3, #0]
 8001b7a:	4a37      	ldr	r2, [pc, #220]	; (8001c58 <HAL_DMA_Abort+0x61c>)
 8001b7c:	4293      	cmp	r3, r2
 8001b7e:	d022      	beq.n	8001bc6 <HAL_DMA_Abort+0x58a>
 8001b80:	687b      	ldr	r3, [r7, #4]
 8001b82:	681b      	ldr	r3, [r3, #0]
 8001b84:	4a35      	ldr	r2, [pc, #212]	; (8001c5c <HAL_DMA_Abort+0x620>)
 8001b86:	4293      	cmp	r3, r2
 8001b88:	d01d      	beq.n	8001bc6 <HAL_DMA_Abort+0x58a>
 8001b8a:	687b      	ldr	r3, [r7, #4]
 8001b8c:	681b      	ldr	r3, [r3, #0]
 8001b8e:	4a34      	ldr	r2, [pc, #208]	; (8001c60 <HAL_DMA_Abort+0x624>)
 8001b90:	4293      	cmp	r3, r2
 8001b92:	d018      	beq.n	8001bc6 <HAL_DMA_Abort+0x58a>
 8001b94:	687b      	ldr	r3, [r7, #4]
 8001b96:	681b      	ldr	r3, [r3, #0]
 8001b98:	4a32      	ldr	r2, [pc, #200]	; (8001c64 <HAL_DMA_Abort+0x628>)
 8001b9a:	4293      	cmp	r3, r2
 8001b9c:	d013      	beq.n	8001bc6 <HAL_DMA_Abort+0x58a>
 8001b9e:	687b      	ldr	r3, [r7, #4]
 8001ba0:	681b      	ldr	r3, [r3, #0]
 8001ba2:	4a31      	ldr	r2, [pc, #196]	; (8001c68 <HAL_DMA_Abort+0x62c>)
 8001ba4:	4293      	cmp	r3, r2
 8001ba6:	d00e      	beq.n	8001bc6 <HAL_DMA_Abort+0x58a>
 8001ba8:	687b      	ldr	r3, [r7, #4]
 8001baa:	681b      	ldr	r3, [r3, #0]
 8001bac:	4a2f      	ldr	r2, [pc, #188]	; (8001c6c <HAL_DMA_Abort+0x630>)
 8001bae:	4293      	cmp	r3, r2
 8001bb0:	d009      	beq.n	8001bc6 <HAL_DMA_Abort+0x58a>
 8001bb2:	687b      	ldr	r3, [r7, #4]
 8001bb4:	681b      	ldr	r3, [r3, #0]
 8001bb6:	4a2e      	ldr	r2, [pc, #184]	; (8001c70 <HAL_DMA_Abort+0x634>)
 8001bb8:	4293      	cmp	r3, r2
 8001bba:	d004      	beq.n	8001bc6 <HAL_DMA_Abort+0x58a>
 8001bbc:	687b      	ldr	r3, [r7, #4]
 8001bbe:	681b      	ldr	r3, [r3, #0]
 8001bc0:	4a2c      	ldr	r2, [pc, #176]	; (8001c74 <HAL_DMA_Abort+0x638>)
 8001bc2:	4293      	cmp	r3, r2
 8001bc4:	d101      	bne.n	8001bca <HAL_DMA_Abort+0x58e>
 8001bc6:	2301      	movs	r3, #1
 8001bc8:	e000      	b.n	8001bcc <HAL_DMA_Abort+0x590>
 8001bca:	2300      	movs	r3, #0
 8001bcc:	2b00      	cmp	r3, #0
 8001bce:	d015      	beq.n	8001bfc <HAL_DMA_Abort+0x5c0>
    {
      /* Clear the DMAMUX synchro overrun flag */
      hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8001bd0:	687b      	ldr	r3, [r7, #4]
 8001bd2:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8001bd4:	687a      	ldr	r2, [r7, #4]
 8001bd6:	6e92      	ldr	r2, [r2, #104]	; 0x68
 8001bd8:	605a      	str	r2, [r3, #4]

      if(hdma->DMAmuxRequestGen != 0U)
 8001bda:	687b      	ldr	r3, [r7, #4]
 8001bdc:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8001bde:	2b00      	cmp	r3, #0
 8001be0:	d00c      	beq.n	8001bfc <HAL_DMA_Abort+0x5c0>
      {
        /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT */
        /* disable the request gen overrun IT */
        hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8001be2:	687b      	ldr	r3, [r7, #4]
 8001be4:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8001be6:	681a      	ldr	r2, [r3, #0]
 8001be8:	687b      	ldr	r3, [r7, #4]
 8001bea:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8001bec:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8001bf0:	601a      	str	r2, [r3, #0]

        /* Clear the DMAMUX request generator overrun flag */
        hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8001bf2:	687b      	ldr	r3, [r7, #4]
 8001bf4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001bf6:	687a      	ldr	r2, [r7, #4]
 8001bf8:	6f52      	ldr	r2, [r2, #116]	; 0x74
 8001bfa:	605a      	str	r2, [r3, #4]
      }
    }

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001bfc:	687b      	ldr	r3, [r7, #4]
 8001bfe:	2200      	movs	r2, #0
 8001c00:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8001c04:	687b      	ldr	r3, [r7, #4]
 8001c06:	2201      	movs	r2, #1
 8001c08:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
  }

  return HAL_OK;
 8001c0c:	2300      	movs	r3, #0
}
 8001c0e:	4618      	mov	r0, r3
 8001c10:	3718      	adds	r7, #24
 8001c12:	46bd      	mov	sp, r7
 8001c14:	bd80      	pop	{r7, pc}
 8001c16:	bf00      	nop
 8001c18:	40020010 	.word	0x40020010
 8001c1c:	40020028 	.word	0x40020028
 8001c20:	40020040 	.word	0x40020040
 8001c24:	40020058 	.word	0x40020058
 8001c28:	40020070 	.word	0x40020070
 8001c2c:	40020088 	.word	0x40020088
 8001c30:	400200a0 	.word	0x400200a0
 8001c34:	400200b8 	.word	0x400200b8
 8001c38:	40020410 	.word	0x40020410
 8001c3c:	40020428 	.word	0x40020428
 8001c40:	40020440 	.word	0x40020440
 8001c44:	40020458 	.word	0x40020458
 8001c48:	40020470 	.word	0x40020470
 8001c4c:	40020488 	.word	0x40020488
 8001c50:	400204a0 	.word	0x400204a0
 8001c54:	400204b8 	.word	0x400204b8
 8001c58:	58025408 	.word	0x58025408
 8001c5c:	5802541c 	.word	0x5802541c
 8001c60:	58025430 	.word	0x58025430
 8001c64:	58025444 	.word	0x58025444
 8001c68:	58025458 	.word	0x58025458
 8001c6c:	5802546c 	.word	0x5802546c
 8001c70:	58025480 	.word	0x58025480
 8001c74:	58025494 	.word	0x58025494

08001c78 <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8001c78:	b580      	push	{r7, lr}
 8001c7a:	b084      	sub	sp, #16
 8001c7c:	af00      	add	r7, sp, #0
 8001c7e:	6078      	str	r0, [r7, #4]
  BDMA_Base_Registers *regs_bdma;

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 8001c80:	687b      	ldr	r3, [r7, #4]
 8001c82:	2b00      	cmp	r3, #0
 8001c84:	d101      	bne.n	8001c8a <HAL_DMA_Abort_IT+0x12>
  {
    return HAL_ERROR;
 8001c86:	2301      	movs	r3, #1
 8001c88:	e205      	b.n	8002096 <HAL_DMA_Abort_IT+0x41e>
  }

  if(hdma->State != HAL_DMA_STATE_BUSY)
 8001c8a:	687b      	ldr	r3, [r7, #4]
 8001c8c:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8001c90:	b2db      	uxtb	r3, r3
 8001c92:	2b02      	cmp	r3, #2
 8001c94:	d004      	beq.n	8001ca0 <HAL_DMA_Abort_IT+0x28>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001c96:	687b      	ldr	r3, [r7, #4]
 8001c98:	2280      	movs	r2, #128	; 0x80
 8001c9a:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8001c9c:	2301      	movs	r3, #1
 8001c9e:	e1fa      	b.n	8002096 <HAL_DMA_Abort_IT+0x41e>
  }
  else
  {
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8001ca0:	687b      	ldr	r3, [r7, #4]
 8001ca2:	681b      	ldr	r3, [r3, #0]
 8001ca4:	4a8c      	ldr	r2, [pc, #560]	; (8001ed8 <HAL_DMA_Abort_IT+0x260>)
 8001ca6:	4293      	cmp	r3, r2
 8001ca8:	d04a      	beq.n	8001d40 <HAL_DMA_Abort_IT+0xc8>
 8001caa:	687b      	ldr	r3, [r7, #4]
 8001cac:	681b      	ldr	r3, [r3, #0]
 8001cae:	4a8b      	ldr	r2, [pc, #556]	; (8001edc <HAL_DMA_Abort_IT+0x264>)
 8001cb0:	4293      	cmp	r3, r2
 8001cb2:	d045      	beq.n	8001d40 <HAL_DMA_Abort_IT+0xc8>
 8001cb4:	687b      	ldr	r3, [r7, #4]
 8001cb6:	681b      	ldr	r3, [r3, #0]
 8001cb8:	4a89      	ldr	r2, [pc, #548]	; (8001ee0 <HAL_DMA_Abort_IT+0x268>)
 8001cba:	4293      	cmp	r3, r2
 8001cbc:	d040      	beq.n	8001d40 <HAL_DMA_Abort_IT+0xc8>
 8001cbe:	687b      	ldr	r3, [r7, #4]
 8001cc0:	681b      	ldr	r3, [r3, #0]
 8001cc2:	4a88      	ldr	r2, [pc, #544]	; (8001ee4 <HAL_DMA_Abort_IT+0x26c>)
 8001cc4:	4293      	cmp	r3, r2
 8001cc6:	d03b      	beq.n	8001d40 <HAL_DMA_Abort_IT+0xc8>
 8001cc8:	687b      	ldr	r3, [r7, #4]
 8001cca:	681b      	ldr	r3, [r3, #0]
 8001ccc:	4a86      	ldr	r2, [pc, #536]	; (8001ee8 <HAL_DMA_Abort_IT+0x270>)
 8001cce:	4293      	cmp	r3, r2
 8001cd0:	d036      	beq.n	8001d40 <HAL_DMA_Abort_IT+0xc8>
 8001cd2:	687b      	ldr	r3, [r7, #4]
 8001cd4:	681b      	ldr	r3, [r3, #0]
 8001cd6:	4a85      	ldr	r2, [pc, #532]	; (8001eec <HAL_DMA_Abort_IT+0x274>)
 8001cd8:	4293      	cmp	r3, r2
 8001cda:	d031      	beq.n	8001d40 <HAL_DMA_Abort_IT+0xc8>
 8001cdc:	687b      	ldr	r3, [r7, #4]
 8001cde:	681b      	ldr	r3, [r3, #0]
 8001ce0:	4a83      	ldr	r2, [pc, #524]	; (8001ef0 <HAL_DMA_Abort_IT+0x278>)
 8001ce2:	4293      	cmp	r3, r2
 8001ce4:	d02c      	beq.n	8001d40 <HAL_DMA_Abort_IT+0xc8>
 8001ce6:	687b      	ldr	r3, [r7, #4]
 8001ce8:	681b      	ldr	r3, [r3, #0]
 8001cea:	4a82      	ldr	r2, [pc, #520]	; (8001ef4 <HAL_DMA_Abort_IT+0x27c>)
 8001cec:	4293      	cmp	r3, r2
 8001cee:	d027      	beq.n	8001d40 <HAL_DMA_Abort_IT+0xc8>
 8001cf0:	687b      	ldr	r3, [r7, #4]
 8001cf2:	681b      	ldr	r3, [r3, #0]
 8001cf4:	4a80      	ldr	r2, [pc, #512]	; (8001ef8 <HAL_DMA_Abort_IT+0x280>)
 8001cf6:	4293      	cmp	r3, r2
 8001cf8:	d022      	beq.n	8001d40 <HAL_DMA_Abort_IT+0xc8>
 8001cfa:	687b      	ldr	r3, [r7, #4]
 8001cfc:	681b      	ldr	r3, [r3, #0]
 8001cfe:	4a7f      	ldr	r2, [pc, #508]	; (8001efc <HAL_DMA_Abort_IT+0x284>)
 8001d00:	4293      	cmp	r3, r2
 8001d02:	d01d      	beq.n	8001d40 <HAL_DMA_Abort_IT+0xc8>
 8001d04:	687b      	ldr	r3, [r7, #4]
 8001d06:	681b      	ldr	r3, [r3, #0]
 8001d08:	4a7d      	ldr	r2, [pc, #500]	; (8001f00 <HAL_DMA_Abort_IT+0x288>)
 8001d0a:	4293      	cmp	r3, r2
 8001d0c:	d018      	beq.n	8001d40 <HAL_DMA_Abort_IT+0xc8>
 8001d0e:	687b      	ldr	r3, [r7, #4]
 8001d10:	681b      	ldr	r3, [r3, #0]
 8001d12:	4a7c      	ldr	r2, [pc, #496]	; (8001f04 <HAL_DMA_Abort_IT+0x28c>)
 8001d14:	4293      	cmp	r3, r2
 8001d16:	d013      	beq.n	8001d40 <HAL_DMA_Abort_IT+0xc8>
 8001d18:	687b      	ldr	r3, [r7, #4]
 8001d1a:	681b      	ldr	r3, [r3, #0]
 8001d1c:	4a7a      	ldr	r2, [pc, #488]	; (8001f08 <HAL_DMA_Abort_IT+0x290>)
 8001d1e:	4293      	cmp	r3, r2
 8001d20:	d00e      	beq.n	8001d40 <HAL_DMA_Abort_IT+0xc8>
 8001d22:	687b      	ldr	r3, [r7, #4]
 8001d24:	681b      	ldr	r3, [r3, #0]
 8001d26:	4a79      	ldr	r2, [pc, #484]	; (8001f0c <HAL_DMA_Abort_IT+0x294>)
 8001d28:	4293      	cmp	r3, r2
 8001d2a:	d009      	beq.n	8001d40 <HAL_DMA_Abort_IT+0xc8>
 8001d2c:	687b      	ldr	r3, [r7, #4]
 8001d2e:	681b      	ldr	r3, [r3, #0]
 8001d30:	4a77      	ldr	r2, [pc, #476]	; (8001f10 <HAL_DMA_Abort_IT+0x298>)
 8001d32:	4293      	cmp	r3, r2
 8001d34:	d004      	beq.n	8001d40 <HAL_DMA_Abort_IT+0xc8>
 8001d36:	687b      	ldr	r3, [r7, #4]
 8001d38:	681b      	ldr	r3, [r3, #0]
 8001d3a:	4a76      	ldr	r2, [pc, #472]	; (8001f14 <HAL_DMA_Abort_IT+0x29c>)
 8001d3c:	4293      	cmp	r3, r2
 8001d3e:	d101      	bne.n	8001d44 <HAL_DMA_Abort_IT+0xcc>
 8001d40:	2301      	movs	r3, #1
 8001d42:	e000      	b.n	8001d46 <HAL_DMA_Abort_IT+0xce>
 8001d44:	2300      	movs	r3, #0
 8001d46:	2b00      	cmp	r3, #0
 8001d48:	d065      	beq.n	8001e16 <HAL_DMA_Abort_IT+0x19e>
    {
      /* Set Abort State  */
      hdma->State = HAL_DMA_STATE_ABORT;
 8001d4a:	687b      	ldr	r3, [r7, #4]
 8001d4c:	2204      	movs	r2, #4
 8001d4e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8001d52:	687b      	ldr	r3, [r7, #4]
 8001d54:	681b      	ldr	r3, [r3, #0]
 8001d56:	4a60      	ldr	r2, [pc, #384]	; (8001ed8 <HAL_DMA_Abort_IT+0x260>)
 8001d58:	4293      	cmp	r3, r2
 8001d5a:	d04a      	beq.n	8001df2 <HAL_DMA_Abort_IT+0x17a>
 8001d5c:	687b      	ldr	r3, [r7, #4]
 8001d5e:	681b      	ldr	r3, [r3, #0]
 8001d60:	4a5e      	ldr	r2, [pc, #376]	; (8001edc <HAL_DMA_Abort_IT+0x264>)
 8001d62:	4293      	cmp	r3, r2
 8001d64:	d045      	beq.n	8001df2 <HAL_DMA_Abort_IT+0x17a>
 8001d66:	687b      	ldr	r3, [r7, #4]
 8001d68:	681b      	ldr	r3, [r3, #0]
 8001d6a:	4a5d      	ldr	r2, [pc, #372]	; (8001ee0 <HAL_DMA_Abort_IT+0x268>)
 8001d6c:	4293      	cmp	r3, r2
 8001d6e:	d040      	beq.n	8001df2 <HAL_DMA_Abort_IT+0x17a>
 8001d70:	687b      	ldr	r3, [r7, #4]
 8001d72:	681b      	ldr	r3, [r3, #0]
 8001d74:	4a5b      	ldr	r2, [pc, #364]	; (8001ee4 <HAL_DMA_Abort_IT+0x26c>)
 8001d76:	4293      	cmp	r3, r2
 8001d78:	d03b      	beq.n	8001df2 <HAL_DMA_Abort_IT+0x17a>
 8001d7a:	687b      	ldr	r3, [r7, #4]
 8001d7c:	681b      	ldr	r3, [r3, #0]
 8001d7e:	4a5a      	ldr	r2, [pc, #360]	; (8001ee8 <HAL_DMA_Abort_IT+0x270>)
 8001d80:	4293      	cmp	r3, r2
 8001d82:	d036      	beq.n	8001df2 <HAL_DMA_Abort_IT+0x17a>
 8001d84:	687b      	ldr	r3, [r7, #4]
 8001d86:	681b      	ldr	r3, [r3, #0]
 8001d88:	4a58      	ldr	r2, [pc, #352]	; (8001eec <HAL_DMA_Abort_IT+0x274>)
 8001d8a:	4293      	cmp	r3, r2
 8001d8c:	d031      	beq.n	8001df2 <HAL_DMA_Abort_IT+0x17a>
 8001d8e:	687b      	ldr	r3, [r7, #4]
 8001d90:	681b      	ldr	r3, [r3, #0]
 8001d92:	4a57      	ldr	r2, [pc, #348]	; (8001ef0 <HAL_DMA_Abort_IT+0x278>)
 8001d94:	4293      	cmp	r3, r2
 8001d96:	d02c      	beq.n	8001df2 <HAL_DMA_Abort_IT+0x17a>
 8001d98:	687b      	ldr	r3, [r7, #4]
 8001d9a:	681b      	ldr	r3, [r3, #0]
 8001d9c:	4a55      	ldr	r2, [pc, #340]	; (8001ef4 <HAL_DMA_Abort_IT+0x27c>)
 8001d9e:	4293      	cmp	r3, r2
 8001da0:	d027      	beq.n	8001df2 <HAL_DMA_Abort_IT+0x17a>
 8001da2:	687b      	ldr	r3, [r7, #4]
 8001da4:	681b      	ldr	r3, [r3, #0]
 8001da6:	4a54      	ldr	r2, [pc, #336]	; (8001ef8 <HAL_DMA_Abort_IT+0x280>)
 8001da8:	4293      	cmp	r3, r2
 8001daa:	d022      	beq.n	8001df2 <HAL_DMA_Abort_IT+0x17a>
 8001dac:	687b      	ldr	r3, [r7, #4]
 8001dae:	681b      	ldr	r3, [r3, #0]
 8001db0:	4a52      	ldr	r2, [pc, #328]	; (8001efc <HAL_DMA_Abort_IT+0x284>)
 8001db2:	4293      	cmp	r3, r2
 8001db4:	d01d      	beq.n	8001df2 <HAL_DMA_Abort_IT+0x17a>
 8001db6:	687b      	ldr	r3, [r7, #4]
 8001db8:	681b      	ldr	r3, [r3, #0]
 8001dba:	4a51      	ldr	r2, [pc, #324]	; (8001f00 <HAL_DMA_Abort_IT+0x288>)
 8001dbc:	4293      	cmp	r3, r2
 8001dbe:	d018      	beq.n	8001df2 <HAL_DMA_Abort_IT+0x17a>
 8001dc0:	687b      	ldr	r3, [r7, #4]
 8001dc2:	681b      	ldr	r3, [r3, #0]
 8001dc4:	4a4f      	ldr	r2, [pc, #316]	; (8001f04 <HAL_DMA_Abort_IT+0x28c>)
 8001dc6:	4293      	cmp	r3, r2
 8001dc8:	d013      	beq.n	8001df2 <HAL_DMA_Abort_IT+0x17a>
 8001dca:	687b      	ldr	r3, [r7, #4]
 8001dcc:	681b      	ldr	r3, [r3, #0]
 8001dce:	4a4e      	ldr	r2, [pc, #312]	; (8001f08 <HAL_DMA_Abort_IT+0x290>)
 8001dd0:	4293      	cmp	r3, r2
 8001dd2:	d00e      	beq.n	8001df2 <HAL_DMA_Abort_IT+0x17a>
 8001dd4:	687b      	ldr	r3, [r7, #4]
 8001dd6:	681b      	ldr	r3, [r3, #0]
 8001dd8:	4a4c      	ldr	r2, [pc, #304]	; (8001f0c <HAL_DMA_Abort_IT+0x294>)
 8001dda:	4293      	cmp	r3, r2
 8001ddc:	d009      	beq.n	8001df2 <HAL_DMA_Abort_IT+0x17a>
 8001dde:	687b      	ldr	r3, [r7, #4]
 8001de0:	681b      	ldr	r3, [r3, #0]
 8001de2:	4a4b      	ldr	r2, [pc, #300]	; (8001f10 <HAL_DMA_Abort_IT+0x298>)
 8001de4:	4293      	cmp	r3, r2
 8001de6:	d004      	beq.n	8001df2 <HAL_DMA_Abort_IT+0x17a>
 8001de8:	687b      	ldr	r3, [r7, #4]
 8001dea:	681b      	ldr	r3, [r3, #0]
 8001dec:	4a49      	ldr	r2, [pc, #292]	; (8001f14 <HAL_DMA_Abort_IT+0x29c>)
 8001dee:	4293      	cmp	r3, r2
 8001df0:	d108      	bne.n	8001e04 <HAL_DMA_Abort_IT+0x18c>
 8001df2:	687b      	ldr	r3, [r7, #4]
 8001df4:	681b      	ldr	r3, [r3, #0]
 8001df6:	681a      	ldr	r2, [r3, #0]
 8001df8:	687b      	ldr	r3, [r7, #4]
 8001dfa:	681b      	ldr	r3, [r3, #0]
 8001dfc:	f022 0201 	bic.w	r2, r2, #1
 8001e00:	601a      	str	r2, [r3, #0]
 8001e02:	e147      	b.n	8002094 <HAL_DMA_Abort_IT+0x41c>
 8001e04:	687b      	ldr	r3, [r7, #4]
 8001e06:	681b      	ldr	r3, [r3, #0]
 8001e08:	681a      	ldr	r2, [r3, #0]
 8001e0a:	687b      	ldr	r3, [r7, #4]
 8001e0c:	681b      	ldr	r3, [r3, #0]
 8001e0e:	f022 0201 	bic.w	r2, r2, #1
 8001e12:	601a      	str	r2, [r3, #0]
 8001e14:	e13e      	b.n	8002094 <HAL_DMA_Abort_IT+0x41c>
    }
    else /* BDMA channel */
    {
      /* Disable DMA All Interrupts  */
      ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  &= ~(BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE);
 8001e16:	687b      	ldr	r3, [r7, #4]
 8001e18:	681b      	ldr	r3, [r3, #0]
 8001e1a:	681a      	ldr	r2, [r3, #0]
 8001e1c:	687b      	ldr	r3, [r7, #4]
 8001e1e:	681b      	ldr	r3, [r3, #0]
 8001e20:	f022 020e 	bic.w	r2, r2, #14
 8001e24:	601a      	str	r2, [r3, #0]

      /* Disable the channel */
      __HAL_DMA_DISABLE(hdma);
 8001e26:	687b      	ldr	r3, [r7, #4]
 8001e28:	681b      	ldr	r3, [r3, #0]
 8001e2a:	4a2b      	ldr	r2, [pc, #172]	; (8001ed8 <HAL_DMA_Abort_IT+0x260>)
 8001e2c:	4293      	cmp	r3, r2
 8001e2e:	d04a      	beq.n	8001ec6 <HAL_DMA_Abort_IT+0x24e>
 8001e30:	687b      	ldr	r3, [r7, #4]
 8001e32:	681b      	ldr	r3, [r3, #0]
 8001e34:	4a29      	ldr	r2, [pc, #164]	; (8001edc <HAL_DMA_Abort_IT+0x264>)
 8001e36:	4293      	cmp	r3, r2
 8001e38:	d045      	beq.n	8001ec6 <HAL_DMA_Abort_IT+0x24e>
 8001e3a:	687b      	ldr	r3, [r7, #4]
 8001e3c:	681b      	ldr	r3, [r3, #0]
 8001e3e:	4a28      	ldr	r2, [pc, #160]	; (8001ee0 <HAL_DMA_Abort_IT+0x268>)
 8001e40:	4293      	cmp	r3, r2
 8001e42:	d040      	beq.n	8001ec6 <HAL_DMA_Abort_IT+0x24e>
 8001e44:	687b      	ldr	r3, [r7, #4]
 8001e46:	681b      	ldr	r3, [r3, #0]
 8001e48:	4a26      	ldr	r2, [pc, #152]	; (8001ee4 <HAL_DMA_Abort_IT+0x26c>)
 8001e4a:	4293      	cmp	r3, r2
 8001e4c:	d03b      	beq.n	8001ec6 <HAL_DMA_Abort_IT+0x24e>
 8001e4e:	687b      	ldr	r3, [r7, #4]
 8001e50:	681b      	ldr	r3, [r3, #0]
 8001e52:	4a25      	ldr	r2, [pc, #148]	; (8001ee8 <HAL_DMA_Abort_IT+0x270>)
 8001e54:	4293      	cmp	r3, r2
 8001e56:	d036      	beq.n	8001ec6 <HAL_DMA_Abort_IT+0x24e>
 8001e58:	687b      	ldr	r3, [r7, #4]
 8001e5a:	681b      	ldr	r3, [r3, #0]
 8001e5c:	4a23      	ldr	r2, [pc, #140]	; (8001eec <HAL_DMA_Abort_IT+0x274>)
 8001e5e:	4293      	cmp	r3, r2
 8001e60:	d031      	beq.n	8001ec6 <HAL_DMA_Abort_IT+0x24e>
 8001e62:	687b      	ldr	r3, [r7, #4]
 8001e64:	681b      	ldr	r3, [r3, #0]
 8001e66:	4a22      	ldr	r2, [pc, #136]	; (8001ef0 <HAL_DMA_Abort_IT+0x278>)
 8001e68:	4293      	cmp	r3, r2
 8001e6a:	d02c      	beq.n	8001ec6 <HAL_DMA_Abort_IT+0x24e>
 8001e6c:	687b      	ldr	r3, [r7, #4]
 8001e6e:	681b      	ldr	r3, [r3, #0]
 8001e70:	4a20      	ldr	r2, [pc, #128]	; (8001ef4 <HAL_DMA_Abort_IT+0x27c>)
 8001e72:	4293      	cmp	r3, r2
 8001e74:	d027      	beq.n	8001ec6 <HAL_DMA_Abort_IT+0x24e>
 8001e76:	687b      	ldr	r3, [r7, #4]
 8001e78:	681b      	ldr	r3, [r3, #0]
 8001e7a:	4a1f      	ldr	r2, [pc, #124]	; (8001ef8 <HAL_DMA_Abort_IT+0x280>)
 8001e7c:	4293      	cmp	r3, r2
 8001e7e:	d022      	beq.n	8001ec6 <HAL_DMA_Abort_IT+0x24e>
 8001e80:	687b      	ldr	r3, [r7, #4]
 8001e82:	681b      	ldr	r3, [r3, #0]
 8001e84:	4a1d      	ldr	r2, [pc, #116]	; (8001efc <HAL_DMA_Abort_IT+0x284>)
 8001e86:	4293      	cmp	r3, r2
 8001e88:	d01d      	beq.n	8001ec6 <HAL_DMA_Abort_IT+0x24e>
 8001e8a:	687b      	ldr	r3, [r7, #4]
 8001e8c:	681b      	ldr	r3, [r3, #0]
 8001e8e:	4a1c      	ldr	r2, [pc, #112]	; (8001f00 <HAL_DMA_Abort_IT+0x288>)
 8001e90:	4293      	cmp	r3, r2
 8001e92:	d018      	beq.n	8001ec6 <HAL_DMA_Abort_IT+0x24e>
 8001e94:	687b      	ldr	r3, [r7, #4]
 8001e96:	681b      	ldr	r3, [r3, #0]
 8001e98:	4a1a      	ldr	r2, [pc, #104]	; (8001f04 <HAL_DMA_Abort_IT+0x28c>)
 8001e9a:	4293      	cmp	r3, r2
 8001e9c:	d013      	beq.n	8001ec6 <HAL_DMA_Abort_IT+0x24e>
 8001e9e:	687b      	ldr	r3, [r7, #4]
 8001ea0:	681b      	ldr	r3, [r3, #0]
 8001ea2:	4a19      	ldr	r2, [pc, #100]	; (8001f08 <HAL_DMA_Abort_IT+0x290>)
 8001ea4:	4293      	cmp	r3, r2
 8001ea6:	d00e      	beq.n	8001ec6 <HAL_DMA_Abort_IT+0x24e>
 8001ea8:	687b      	ldr	r3, [r7, #4]
 8001eaa:	681b      	ldr	r3, [r3, #0]
 8001eac:	4a17      	ldr	r2, [pc, #92]	; (8001f0c <HAL_DMA_Abort_IT+0x294>)
 8001eae:	4293      	cmp	r3, r2
 8001eb0:	d009      	beq.n	8001ec6 <HAL_DMA_Abort_IT+0x24e>
 8001eb2:	687b      	ldr	r3, [r7, #4]
 8001eb4:	681b      	ldr	r3, [r3, #0]
 8001eb6:	4a16      	ldr	r2, [pc, #88]	; (8001f10 <HAL_DMA_Abort_IT+0x298>)
 8001eb8:	4293      	cmp	r3, r2
 8001eba:	d004      	beq.n	8001ec6 <HAL_DMA_Abort_IT+0x24e>
 8001ebc:	687b      	ldr	r3, [r7, #4]
 8001ebe:	681b      	ldr	r3, [r3, #0]
 8001ec0:	4a14      	ldr	r2, [pc, #80]	; (8001f14 <HAL_DMA_Abort_IT+0x29c>)
 8001ec2:	4293      	cmp	r3, r2
 8001ec4:	d128      	bne.n	8001f18 <HAL_DMA_Abort_IT+0x2a0>
 8001ec6:	687b      	ldr	r3, [r7, #4]
 8001ec8:	681b      	ldr	r3, [r3, #0]
 8001eca:	681a      	ldr	r2, [r3, #0]
 8001ecc:	687b      	ldr	r3, [r7, #4]
 8001ece:	681b      	ldr	r3, [r3, #0]
 8001ed0:	f022 0201 	bic.w	r2, r2, #1
 8001ed4:	601a      	str	r2, [r3, #0]
 8001ed6:	e027      	b.n	8001f28 <HAL_DMA_Abort_IT+0x2b0>
 8001ed8:	40020010 	.word	0x40020010
 8001edc:	40020028 	.word	0x40020028
 8001ee0:	40020040 	.word	0x40020040
 8001ee4:	40020058 	.word	0x40020058
 8001ee8:	40020070 	.word	0x40020070
 8001eec:	40020088 	.word	0x40020088
 8001ef0:	400200a0 	.word	0x400200a0
 8001ef4:	400200b8 	.word	0x400200b8
 8001ef8:	40020410 	.word	0x40020410
 8001efc:	40020428 	.word	0x40020428
 8001f00:	40020440 	.word	0x40020440
 8001f04:	40020458 	.word	0x40020458
 8001f08:	40020470 	.word	0x40020470
 8001f0c:	40020488 	.word	0x40020488
 8001f10:	400204a0 	.word	0x400204a0
 8001f14:	400204b8 	.word	0x400204b8
 8001f18:	687b      	ldr	r3, [r7, #4]
 8001f1a:	681b      	ldr	r3, [r3, #0]
 8001f1c:	681a      	ldr	r2, [r3, #0]
 8001f1e:	687b      	ldr	r3, [r7, #4]
 8001f20:	681b      	ldr	r3, [r3, #0]
 8001f22:	f022 0201 	bic.w	r2, r2, #1
 8001f26:	601a      	str	r2, [r3, #0]

      if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8001f28:	687b      	ldr	r3, [r7, #4]
 8001f2a:	681b      	ldr	r3, [r3, #0]
 8001f2c:	4a5c      	ldr	r2, [pc, #368]	; (80020a0 <HAL_DMA_Abort_IT+0x428>)
 8001f2e:	4293      	cmp	r3, r2
 8001f30:	d072      	beq.n	8002018 <HAL_DMA_Abort_IT+0x3a0>
 8001f32:	687b      	ldr	r3, [r7, #4]
 8001f34:	681b      	ldr	r3, [r3, #0]
 8001f36:	4a5b      	ldr	r2, [pc, #364]	; (80020a4 <HAL_DMA_Abort_IT+0x42c>)
 8001f38:	4293      	cmp	r3, r2
 8001f3a:	d06d      	beq.n	8002018 <HAL_DMA_Abort_IT+0x3a0>
 8001f3c:	687b      	ldr	r3, [r7, #4]
 8001f3e:	681b      	ldr	r3, [r3, #0]
 8001f40:	4a59      	ldr	r2, [pc, #356]	; (80020a8 <HAL_DMA_Abort_IT+0x430>)
 8001f42:	4293      	cmp	r3, r2
 8001f44:	d068      	beq.n	8002018 <HAL_DMA_Abort_IT+0x3a0>
 8001f46:	687b      	ldr	r3, [r7, #4]
 8001f48:	681b      	ldr	r3, [r3, #0]
 8001f4a:	4a58      	ldr	r2, [pc, #352]	; (80020ac <HAL_DMA_Abort_IT+0x434>)
 8001f4c:	4293      	cmp	r3, r2
 8001f4e:	d063      	beq.n	8002018 <HAL_DMA_Abort_IT+0x3a0>
 8001f50:	687b      	ldr	r3, [r7, #4]
 8001f52:	681b      	ldr	r3, [r3, #0]
 8001f54:	4a56      	ldr	r2, [pc, #344]	; (80020b0 <HAL_DMA_Abort_IT+0x438>)
 8001f56:	4293      	cmp	r3, r2
 8001f58:	d05e      	beq.n	8002018 <HAL_DMA_Abort_IT+0x3a0>
 8001f5a:	687b      	ldr	r3, [r7, #4]
 8001f5c:	681b      	ldr	r3, [r3, #0]
 8001f5e:	4a55      	ldr	r2, [pc, #340]	; (80020b4 <HAL_DMA_Abort_IT+0x43c>)
 8001f60:	4293      	cmp	r3, r2
 8001f62:	d059      	beq.n	8002018 <HAL_DMA_Abort_IT+0x3a0>
 8001f64:	687b      	ldr	r3, [r7, #4]
 8001f66:	681b      	ldr	r3, [r3, #0]
 8001f68:	4a53      	ldr	r2, [pc, #332]	; (80020b8 <HAL_DMA_Abort_IT+0x440>)
 8001f6a:	4293      	cmp	r3, r2
 8001f6c:	d054      	beq.n	8002018 <HAL_DMA_Abort_IT+0x3a0>
 8001f6e:	687b      	ldr	r3, [r7, #4]
 8001f70:	681b      	ldr	r3, [r3, #0]
 8001f72:	4a52      	ldr	r2, [pc, #328]	; (80020bc <HAL_DMA_Abort_IT+0x444>)
 8001f74:	4293      	cmp	r3, r2
 8001f76:	d04f      	beq.n	8002018 <HAL_DMA_Abort_IT+0x3a0>
 8001f78:	687b      	ldr	r3, [r7, #4]
 8001f7a:	681b      	ldr	r3, [r3, #0]
 8001f7c:	4a50      	ldr	r2, [pc, #320]	; (80020c0 <HAL_DMA_Abort_IT+0x448>)
 8001f7e:	4293      	cmp	r3, r2
 8001f80:	d04a      	beq.n	8002018 <HAL_DMA_Abort_IT+0x3a0>
 8001f82:	687b      	ldr	r3, [r7, #4]
 8001f84:	681b      	ldr	r3, [r3, #0]
 8001f86:	4a4f      	ldr	r2, [pc, #316]	; (80020c4 <HAL_DMA_Abort_IT+0x44c>)
 8001f88:	4293      	cmp	r3, r2
 8001f8a:	d045      	beq.n	8002018 <HAL_DMA_Abort_IT+0x3a0>
 8001f8c:	687b      	ldr	r3, [r7, #4]
 8001f8e:	681b      	ldr	r3, [r3, #0]
 8001f90:	4a4d      	ldr	r2, [pc, #308]	; (80020c8 <HAL_DMA_Abort_IT+0x450>)
 8001f92:	4293      	cmp	r3, r2
 8001f94:	d040      	beq.n	8002018 <HAL_DMA_Abort_IT+0x3a0>
 8001f96:	687b      	ldr	r3, [r7, #4]
 8001f98:	681b      	ldr	r3, [r3, #0]
 8001f9a:	4a4c      	ldr	r2, [pc, #304]	; (80020cc <HAL_DMA_Abort_IT+0x454>)
 8001f9c:	4293      	cmp	r3, r2
 8001f9e:	d03b      	beq.n	8002018 <HAL_DMA_Abort_IT+0x3a0>
 8001fa0:	687b      	ldr	r3, [r7, #4]
 8001fa2:	681b      	ldr	r3, [r3, #0]
 8001fa4:	4a4a      	ldr	r2, [pc, #296]	; (80020d0 <HAL_DMA_Abort_IT+0x458>)
 8001fa6:	4293      	cmp	r3, r2
 8001fa8:	d036      	beq.n	8002018 <HAL_DMA_Abort_IT+0x3a0>
 8001faa:	687b      	ldr	r3, [r7, #4]
 8001fac:	681b      	ldr	r3, [r3, #0]
 8001fae:	4a49      	ldr	r2, [pc, #292]	; (80020d4 <HAL_DMA_Abort_IT+0x45c>)
 8001fb0:	4293      	cmp	r3, r2
 8001fb2:	d031      	beq.n	8002018 <HAL_DMA_Abort_IT+0x3a0>
 8001fb4:	687b      	ldr	r3, [r7, #4]
 8001fb6:	681b      	ldr	r3, [r3, #0]
 8001fb8:	4a47      	ldr	r2, [pc, #284]	; (80020d8 <HAL_DMA_Abort_IT+0x460>)
 8001fba:	4293      	cmp	r3, r2
 8001fbc:	d02c      	beq.n	8002018 <HAL_DMA_Abort_IT+0x3a0>
 8001fbe:	687b      	ldr	r3, [r7, #4]
 8001fc0:	681b      	ldr	r3, [r3, #0]
 8001fc2:	4a46      	ldr	r2, [pc, #280]	; (80020dc <HAL_DMA_Abort_IT+0x464>)
 8001fc4:	4293      	cmp	r3, r2
 8001fc6:	d027      	beq.n	8002018 <HAL_DMA_Abort_IT+0x3a0>
 8001fc8:	687b      	ldr	r3, [r7, #4]
 8001fca:	681b      	ldr	r3, [r3, #0]
 8001fcc:	4a44      	ldr	r2, [pc, #272]	; (80020e0 <HAL_DMA_Abort_IT+0x468>)
 8001fce:	4293      	cmp	r3, r2
 8001fd0:	d022      	beq.n	8002018 <HAL_DMA_Abort_IT+0x3a0>
 8001fd2:	687b      	ldr	r3, [r7, #4]
 8001fd4:	681b      	ldr	r3, [r3, #0]
 8001fd6:	4a43      	ldr	r2, [pc, #268]	; (80020e4 <HAL_DMA_Abort_IT+0x46c>)
 8001fd8:	4293      	cmp	r3, r2
 8001fda:	d01d      	beq.n	8002018 <HAL_DMA_Abort_IT+0x3a0>
 8001fdc:	687b      	ldr	r3, [r7, #4]
 8001fde:	681b      	ldr	r3, [r3, #0]
 8001fe0:	4a41      	ldr	r2, [pc, #260]	; (80020e8 <HAL_DMA_Abort_IT+0x470>)
 8001fe2:	4293      	cmp	r3, r2
 8001fe4:	d018      	beq.n	8002018 <HAL_DMA_Abort_IT+0x3a0>
 8001fe6:	687b      	ldr	r3, [r7, #4]
 8001fe8:	681b      	ldr	r3, [r3, #0]
 8001fea:	4a40      	ldr	r2, [pc, #256]	; (80020ec <HAL_DMA_Abort_IT+0x474>)
 8001fec:	4293      	cmp	r3, r2
 8001fee:	d013      	beq.n	8002018 <HAL_DMA_Abort_IT+0x3a0>
 8001ff0:	687b      	ldr	r3, [r7, #4]
 8001ff2:	681b      	ldr	r3, [r3, #0]
 8001ff4:	4a3e      	ldr	r2, [pc, #248]	; (80020f0 <HAL_DMA_Abort_IT+0x478>)
 8001ff6:	4293      	cmp	r3, r2
 8001ff8:	d00e      	beq.n	8002018 <HAL_DMA_Abort_IT+0x3a0>
 8001ffa:	687b      	ldr	r3, [r7, #4]
 8001ffc:	681b      	ldr	r3, [r3, #0]
 8001ffe:	4a3d      	ldr	r2, [pc, #244]	; (80020f4 <HAL_DMA_Abort_IT+0x47c>)
 8002000:	4293      	cmp	r3, r2
 8002002:	d009      	beq.n	8002018 <HAL_DMA_Abort_IT+0x3a0>
 8002004:	687b      	ldr	r3, [r7, #4]
 8002006:	681b      	ldr	r3, [r3, #0]
 8002008:	4a3b      	ldr	r2, [pc, #236]	; (80020f8 <HAL_DMA_Abort_IT+0x480>)
 800200a:	4293      	cmp	r3, r2
 800200c:	d004      	beq.n	8002018 <HAL_DMA_Abort_IT+0x3a0>
 800200e:	687b      	ldr	r3, [r7, #4]
 8002010:	681b      	ldr	r3, [r3, #0]
 8002012:	4a3a      	ldr	r2, [pc, #232]	; (80020fc <HAL_DMA_Abort_IT+0x484>)
 8002014:	4293      	cmp	r3, r2
 8002016:	d101      	bne.n	800201c <HAL_DMA_Abort_IT+0x3a4>
 8002018:	2301      	movs	r3, #1
 800201a:	e000      	b.n	800201e <HAL_DMA_Abort_IT+0x3a6>
 800201c:	2300      	movs	r3, #0
 800201e:	2b00      	cmp	r3, #0
 8002020:	d028      	beq.n	8002074 <HAL_DMA_Abort_IT+0x3fc>
      {
        /* disable the DMAMUX sync overrun IT */
        hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8002022:	687b      	ldr	r3, [r7, #4]
 8002024:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002026:	681a      	ldr	r2, [r3, #0]
 8002028:	687b      	ldr	r3, [r7, #4]
 800202a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800202c:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8002030:	601a      	str	r2, [r3, #0]

        /* Clear all flags */
        regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 8002032:	687b      	ldr	r3, [r7, #4]
 8002034:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002036:	60fb      	str	r3, [r7, #12]
        regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 8002038:	687b      	ldr	r3, [r7, #4]
 800203a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800203c:	f003 031f 	and.w	r3, r3, #31
 8002040:	2201      	movs	r2, #1
 8002042:	409a      	lsls	r2, r3
 8002044:	68fb      	ldr	r3, [r7, #12]
 8002046:	605a      	str	r2, [r3, #4]

        /* Clear the DMAMUX synchro overrun flag */
        hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8002048:	687b      	ldr	r3, [r7, #4]
 800204a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800204c:	687a      	ldr	r2, [r7, #4]
 800204e:	6e92      	ldr	r2, [r2, #104]	; 0x68
 8002050:	605a      	str	r2, [r3, #4]

        if(hdma->DMAmuxRequestGen != 0U)
 8002052:	687b      	ldr	r3, [r7, #4]
 8002054:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8002056:	2b00      	cmp	r3, #0
 8002058:	d00c      	beq.n	8002074 <HAL_DMA_Abort_IT+0x3fc>
        {
          /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
          /* disable the request gen overrun IT */
          hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 800205a:	687b      	ldr	r3, [r7, #4]
 800205c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800205e:	681a      	ldr	r2, [r3, #0]
 8002060:	687b      	ldr	r3, [r7, #4]
 8002062:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8002064:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8002068:	601a      	str	r2, [r3, #0]

          /* Clear the DMAMUX request generator overrun flag */
          hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 800206a:	687b      	ldr	r3, [r7, #4]
 800206c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800206e:	687a      	ldr	r2, [r7, #4]
 8002070:	6f52      	ldr	r2, [r2, #116]	; 0x74
 8002072:	605a      	str	r2, [r3, #4]
        }
      }

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8002074:	687b      	ldr	r3, [r7, #4]
 8002076:	2200      	movs	r2, #0
 8002078:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 800207c:	687b      	ldr	r3, [r7, #4]
 800207e:	2201      	movs	r2, #1
 8002080:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Call User Abort callback */
      if(hdma->XferAbortCallback != NULL)
 8002084:	687b      	ldr	r3, [r7, #4]
 8002086:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002088:	2b00      	cmp	r3, #0
 800208a:	d003      	beq.n	8002094 <HAL_DMA_Abort_IT+0x41c>
      {
        hdma->XferAbortCallback(hdma);
 800208c:	687b      	ldr	r3, [r7, #4]
 800208e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002090:	6878      	ldr	r0, [r7, #4]
 8002092:	4798      	blx	r3
      }
    }
  }

  return HAL_OK;
 8002094:	2300      	movs	r3, #0
}
 8002096:	4618      	mov	r0, r3
 8002098:	3710      	adds	r7, #16
 800209a:	46bd      	mov	sp, r7
 800209c:	bd80      	pop	{r7, pc}
 800209e:	bf00      	nop
 80020a0:	40020010 	.word	0x40020010
 80020a4:	40020028 	.word	0x40020028
 80020a8:	40020040 	.word	0x40020040
 80020ac:	40020058 	.word	0x40020058
 80020b0:	40020070 	.word	0x40020070
 80020b4:	40020088 	.word	0x40020088
 80020b8:	400200a0 	.word	0x400200a0
 80020bc:	400200b8 	.word	0x400200b8
 80020c0:	40020410 	.word	0x40020410
 80020c4:	40020428 	.word	0x40020428
 80020c8:	40020440 	.word	0x40020440
 80020cc:	40020458 	.word	0x40020458
 80020d0:	40020470 	.word	0x40020470
 80020d4:	40020488 	.word	0x40020488
 80020d8:	400204a0 	.word	0x400204a0
 80020dc:	400204b8 	.word	0x400204b8
 80020e0:	58025408 	.word	0x58025408
 80020e4:	5802541c 	.word	0x5802541c
 80020e8:	58025430 	.word	0x58025430
 80020ec:	58025444 	.word	0x58025444
 80020f0:	58025458 	.word	0x58025458
 80020f4:	5802546c 	.word	0x5802546c
 80020f8:	58025480 	.word	0x58025480
 80020fc:	58025494 	.word	0x58025494

08002100 <HAL_DMA2D_Init>:
  * @param  hdma2d pointer to a DMA2D_HandleTypeDef structure that contains
  *                 the configuration information for the DMA2D.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA2D_Init(DMA2D_HandleTypeDef *hdma2d)
{
 8002100:	b580      	push	{r7, lr}
 8002102:	b082      	sub	sp, #8
 8002104:	af00      	add	r7, sp, #0
 8002106:	6078      	str	r0, [r7, #4]
  /* Check the DMA2D peripheral state */
  if (hdma2d == NULL)
 8002108:	687b      	ldr	r3, [r7, #4]
 800210a:	2b00      	cmp	r3, #0
 800210c:	d101      	bne.n	8002112 <HAL_DMA2D_Init+0x12>
  {
    return HAL_ERROR;
 800210e:	2301      	movs	r3, #1
 8002110:	e04f      	b.n	80021b2 <HAL_DMA2D_Init+0xb2>

    /* Init the low level hardware */
    hdma2d->MspInitCallback(hdma2d);
  }
#else
  if (hdma2d->State == HAL_DMA2D_STATE_RESET)
 8002112:	687b      	ldr	r3, [r7, #4]
 8002114:	f893 3061 	ldrb.w	r3, [r3, #97]	; 0x61
 8002118:	b2db      	uxtb	r3, r3
 800211a:	2b00      	cmp	r3, #0
 800211c:	d106      	bne.n	800212c <HAL_DMA2D_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hdma2d->Lock = HAL_UNLOCKED;
 800211e:	687b      	ldr	r3, [r7, #4]
 8002120:	2200      	movs	r2, #0
 8002122:	f883 2060 	strb.w	r2, [r3, #96]	; 0x60
    /* Init the low level hardware */
    HAL_DMA2D_MspInit(hdma2d);
 8002126:	6878      	ldr	r0, [r7, #4]
 8002128:	f7fe fe28 	bl	8000d7c <HAL_DMA2D_MspInit>
  }
#endif /* (USE_HAL_DMA2D_REGISTER_CALLBACKS) */

  /* Change DMA2D peripheral state */
  hdma2d->State = HAL_DMA2D_STATE_BUSY;
 800212c:	687b      	ldr	r3, [r7, #4]
 800212e:	2202      	movs	r2, #2
 8002130:	f883 2061 	strb.w	r2, [r3, #97]	; 0x61

  /* DMA2D CR register configuration -------------------------------------------*/
  MODIFY_REG(hdma2d->Instance->CR, DMA2D_CR_MODE | DMA2D_CR_LOM, hdma2d->Init.Mode | hdma2d->Init.LineOffsetMode);
 8002134:	687b      	ldr	r3, [r7, #4]
 8002136:	681b      	ldr	r3, [r3, #0]
 8002138:	681a      	ldr	r2, [r3, #0]
 800213a:	4b20      	ldr	r3, [pc, #128]	; (80021bc <HAL_DMA2D_Init+0xbc>)
 800213c:	4013      	ands	r3, r2
 800213e:	687a      	ldr	r2, [r7, #4]
 8002140:	6851      	ldr	r1, [r2, #4]
 8002142:	687a      	ldr	r2, [r7, #4]
 8002144:	69d2      	ldr	r2, [r2, #28]
 8002146:	4311      	orrs	r1, r2
 8002148:	687a      	ldr	r2, [r7, #4]
 800214a:	6812      	ldr	r2, [r2, #0]
 800214c:	430b      	orrs	r3, r1
 800214e:	6013      	str	r3, [r2, #0]

  /* DMA2D OPFCCR register configuration ---------------------------------------*/
  MODIFY_REG(hdma2d->Instance->OPFCCR, DMA2D_OPFCCR_CM | DMA2D_OPFCCR_SB,
 8002150:	687b      	ldr	r3, [r7, #4]
 8002152:	681b      	ldr	r3, [r3, #0]
 8002154:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002156:	4b1a      	ldr	r3, [pc, #104]	; (80021c0 <HAL_DMA2D_Init+0xc0>)
 8002158:	4013      	ands	r3, r2
 800215a:	687a      	ldr	r2, [r7, #4]
 800215c:	6891      	ldr	r1, [r2, #8]
 800215e:	687a      	ldr	r2, [r7, #4]
 8002160:	6992      	ldr	r2, [r2, #24]
 8002162:	4311      	orrs	r1, r2
 8002164:	687a      	ldr	r2, [r7, #4]
 8002166:	6812      	ldr	r2, [r2, #0]
 8002168:	430b      	orrs	r3, r1
 800216a:	6353      	str	r3, [r2, #52]	; 0x34
             hdma2d->Init.ColorMode | hdma2d->Init.BytesSwap);

  /* DMA2D OOR register configuration ------------------------------------------*/
  MODIFY_REG(hdma2d->Instance->OOR, DMA2D_OOR_LO, hdma2d->Init.OutputOffset);
 800216c:	687b      	ldr	r3, [r7, #4]
 800216e:	681b      	ldr	r3, [r3, #0]
 8002170:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8002172:	4b14      	ldr	r3, [pc, #80]	; (80021c4 <HAL_DMA2D_Init+0xc4>)
 8002174:	4013      	ands	r3, r2
 8002176:	687a      	ldr	r2, [r7, #4]
 8002178:	68d1      	ldr	r1, [r2, #12]
 800217a:	687a      	ldr	r2, [r7, #4]
 800217c:	6812      	ldr	r2, [r2, #0]
 800217e:	430b      	orrs	r3, r1
 8002180:	6413      	str	r3, [r2, #64]	; 0x40
  /* DMA2D OPFCCR AI and RBS fields setting (Output Alpha Inversion)*/
  MODIFY_REG(hdma2d->Instance->OPFCCR, (DMA2D_OPFCCR_AI | DMA2D_OPFCCR_RBS),
 8002182:	687b      	ldr	r3, [r7, #4]
 8002184:	681b      	ldr	r3, [r3, #0]
 8002186:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002188:	f423 1140 	bic.w	r1, r3, #3145728	; 0x300000
 800218c:	687b      	ldr	r3, [r7, #4]
 800218e:	691b      	ldr	r3, [r3, #16]
 8002190:	051a      	lsls	r2, r3, #20
 8002192:	687b      	ldr	r3, [r7, #4]
 8002194:	695b      	ldr	r3, [r3, #20]
 8002196:	055b      	lsls	r3, r3, #21
 8002198:	431a      	orrs	r2, r3
 800219a:	687b      	ldr	r3, [r7, #4]
 800219c:	681b      	ldr	r3, [r3, #0]
 800219e:	430a      	orrs	r2, r1
 80021a0:	635a      	str	r2, [r3, #52]	; 0x34
             ((hdma2d->Init.AlphaInverted << DMA2D_OPFCCR_AI_Pos) | \
              (hdma2d->Init.RedBlueSwap << DMA2D_OPFCCR_RBS_Pos)));


  /* Update error code */
  hdma2d->ErrorCode = HAL_DMA2D_ERROR_NONE;
 80021a2:	687b      	ldr	r3, [r7, #4]
 80021a4:	2200      	movs	r2, #0
 80021a6:	665a      	str	r2, [r3, #100]	; 0x64

  /* Initialize the DMA2D state*/
  hdma2d->State  = HAL_DMA2D_STATE_READY;
 80021a8:	687b      	ldr	r3, [r7, #4]
 80021aa:	2201      	movs	r2, #1
 80021ac:	f883 2061 	strb.w	r2, [r3, #97]	; 0x61

  return HAL_OK;
 80021b0:	2300      	movs	r3, #0
}
 80021b2:	4618      	mov	r0, r3
 80021b4:	3708      	adds	r7, #8
 80021b6:	46bd      	mov	sp, r7
 80021b8:	bd80      	pop	{r7, pc}
 80021ba:	bf00      	nop
 80021bc:	fff8ffbf 	.word	0xfff8ffbf
 80021c0:	fffffef8 	.word	0xfffffef8
 80021c4:	ffff0000 	.word	0xffff0000

080021c8 <HAL_DMA2D_ConfigLayer>:
  *                   This parameter can be one of the following values:
  *                   DMA2D_BACKGROUND_LAYER(0) / DMA2D_FOREGROUND_LAYER(1)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA2D_ConfigLayer(DMA2D_HandleTypeDef *hdma2d, uint32_t LayerIdx)
{
 80021c8:	b480      	push	{r7}
 80021ca:	b087      	sub	sp, #28
 80021cc:	af00      	add	r7, sp, #0
 80021ce:	6078      	str	r0, [r7, #4]
 80021d0:	6039      	str	r1, [r7, #0]
  uint32_t regValue;

  /* Check the parameters */
  assert_param(IS_DMA2D_LAYER(LayerIdx));
  assert_param(IS_DMA2D_OFFSET(hdma2d->LayerCfg[LayerIdx].InputOffset));
  if (hdma2d->Init.Mode != DMA2D_R2M)
 80021d2:	687b      	ldr	r3, [r7, #4]
 80021d4:	685b      	ldr	r3, [r3, #4]
 80021d6:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
    }
  }
  assert_param(IS_DMA2D_ALPHA_INVERTED(hdma2d->LayerCfg[LayerIdx].AlphaInverted));
  assert_param(IS_DMA2D_RB_SWAP(hdma2d->LayerCfg[LayerIdx].RedBlueSwap));

  if ((LayerIdx == DMA2D_FOREGROUND_LAYER) && (hdma2d->LayerCfg[LayerIdx].InputColorMode == DMA2D_INPUT_YCBCR))
 80021da:	683b      	ldr	r3, [r7, #0]
 80021dc:	2b01      	cmp	r3, #1
 80021de:	d104      	bne.n	80021ea <HAL_DMA2D_ConfigLayer+0x22>
 80021e0:	683a      	ldr	r2, [r7, #0]
 80021e2:	4613      	mov	r3, r2
 80021e4:	00db      	lsls	r3, r3, #3
 80021e6:	1a9b      	subs	r3, r3, r2
 80021e8:	009b      	lsls	r3, r3, #2
  {
    assert_param(IS_DMA2D_CHROMA_SUB_SAMPLING(hdma2d->LayerCfg[LayerIdx].ChromaSubSampling));
  }

  /* Process locked */
  __HAL_LOCK(hdma2d);
 80021ea:	687b      	ldr	r3, [r7, #4]
 80021ec:	f893 3060 	ldrb.w	r3, [r3, #96]	; 0x60
 80021f0:	2b01      	cmp	r3, #1
 80021f2:	d101      	bne.n	80021f8 <HAL_DMA2D_ConfigLayer+0x30>
 80021f4:	2302      	movs	r3, #2
 80021f6:	e092      	b.n	800231e <HAL_DMA2D_ConfigLayer+0x156>
 80021f8:	687b      	ldr	r3, [r7, #4]
 80021fa:	2201      	movs	r2, #1
 80021fc:	f883 2060 	strb.w	r2, [r3, #96]	; 0x60

  /* Change DMA2D peripheral state */
  hdma2d->State = HAL_DMA2D_STATE_BUSY;
 8002200:	687b      	ldr	r3, [r7, #4]
 8002202:	2202      	movs	r2, #2
 8002204:	f883 2061 	strb.w	r2, [r3, #97]	; 0x61

  pLayerCfg = &hdma2d->LayerCfg[LayerIdx];
 8002208:	683a      	ldr	r2, [r7, #0]
 800220a:	4613      	mov	r3, r2
 800220c:	00db      	lsls	r3, r3, #3
 800220e:	1a9b      	subs	r3, r3, r2
 8002210:	009b      	lsls	r3, r3, #2
 8002212:	3328      	adds	r3, #40	; 0x28
 8002214:	687a      	ldr	r2, [r7, #4]
 8002216:	4413      	add	r3, r2
 8002218:	60fb      	str	r3, [r7, #12]

  /* Prepare the value to be written to the BGPFCCR or FGPFCCR register */
  regValue = pLayerCfg->InputColorMode | (pLayerCfg->AlphaMode << DMA2D_BGPFCCR_AM_Pos) | \
 800221a:	68fb      	ldr	r3, [r7, #12]
 800221c:	685a      	ldr	r2, [r3, #4]
 800221e:	68fb      	ldr	r3, [r7, #12]
 8002220:	689b      	ldr	r3, [r3, #8]
 8002222:	041b      	lsls	r3, r3, #16
 8002224:	431a      	orrs	r2, r3
             (pLayerCfg->AlphaInverted << DMA2D_BGPFCCR_AI_Pos) | (pLayerCfg->RedBlueSwap << DMA2D_BGPFCCR_RBS_Pos);
 8002226:	68fb      	ldr	r3, [r7, #12]
 8002228:	691b      	ldr	r3, [r3, #16]
 800222a:	051b      	lsls	r3, r3, #20
  regValue = pLayerCfg->InputColorMode | (pLayerCfg->AlphaMode << DMA2D_BGPFCCR_AM_Pos) | \
 800222c:	431a      	orrs	r2, r3
             (pLayerCfg->AlphaInverted << DMA2D_BGPFCCR_AI_Pos) | (pLayerCfg->RedBlueSwap << DMA2D_BGPFCCR_RBS_Pos);
 800222e:	68fb      	ldr	r3, [r7, #12]
 8002230:	695b      	ldr	r3, [r3, #20]
 8002232:	055b      	lsls	r3, r3, #21
  regValue = pLayerCfg->InputColorMode | (pLayerCfg->AlphaMode << DMA2D_BGPFCCR_AM_Pos) | \
 8002234:	4313      	orrs	r3, r2
 8002236:	613b      	str	r3, [r7, #16]
  regMask  = (DMA2D_BGPFCCR_CM | DMA2D_BGPFCCR_AM | DMA2D_BGPFCCR_ALPHA | DMA2D_BGPFCCR_AI | DMA2D_BGPFCCR_RBS);
 8002238:	4b3c      	ldr	r3, [pc, #240]	; (800232c <HAL_DMA2D_ConfigLayer+0x164>)
 800223a:	617b      	str	r3, [r7, #20]


  if ((pLayerCfg->InputColorMode == DMA2D_INPUT_A4) || (pLayerCfg->InputColorMode == DMA2D_INPUT_A8))
 800223c:	68fb      	ldr	r3, [r7, #12]
 800223e:	685b      	ldr	r3, [r3, #4]
 8002240:	2b0a      	cmp	r3, #10
 8002242:	d003      	beq.n	800224c <HAL_DMA2D_ConfigLayer+0x84>
 8002244:	68fb      	ldr	r3, [r7, #12]
 8002246:	685b      	ldr	r3, [r3, #4]
 8002248:	2b09      	cmp	r3, #9
 800224a:	d107      	bne.n	800225c <HAL_DMA2D_ConfigLayer+0x94>
  {
    regValue |= (pLayerCfg->InputAlpha & DMA2D_BGPFCCR_ALPHA);
 800224c:	68fb      	ldr	r3, [r7, #12]
 800224e:	68db      	ldr	r3, [r3, #12]
 8002250:	f003 437f 	and.w	r3, r3, #4278190080	; 0xff000000
 8002254:	693a      	ldr	r2, [r7, #16]
 8002256:	4313      	orrs	r3, r2
 8002258:	613b      	str	r3, [r7, #16]
 800225a:	e005      	b.n	8002268 <HAL_DMA2D_ConfigLayer+0xa0>
  }
  else
  {
    regValue |= (pLayerCfg->InputAlpha << DMA2D_BGPFCCR_ALPHA_Pos);
 800225c:	68fb      	ldr	r3, [r7, #12]
 800225e:	68db      	ldr	r3, [r3, #12]
 8002260:	061b      	lsls	r3, r3, #24
 8002262:	693a      	ldr	r2, [r7, #16]
 8002264:	4313      	orrs	r3, r2
 8002266:	613b      	str	r3, [r7, #16]
  }

  /* Configure the background DMA2D layer */
  if (LayerIdx == DMA2D_BACKGROUND_LAYER)
 8002268:	683b      	ldr	r3, [r7, #0]
 800226a:	2b00      	cmp	r3, #0
 800226c:	d120      	bne.n	80022b0 <HAL_DMA2D_ConfigLayer+0xe8>
  {
    /* Write DMA2D BGPFCCR register */
    MODIFY_REG(hdma2d->Instance->BGPFCCR, regMask, regValue);
 800226e:	687b      	ldr	r3, [r7, #4]
 8002270:	681b      	ldr	r3, [r3, #0]
 8002272:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8002274:	697b      	ldr	r3, [r7, #20]
 8002276:	43db      	mvns	r3, r3
 8002278:	ea02 0103 	and.w	r1, r2, r3
 800227c:	687b      	ldr	r3, [r7, #4]
 800227e:	681b      	ldr	r3, [r3, #0]
 8002280:	693a      	ldr	r2, [r7, #16]
 8002282:	430a      	orrs	r2, r1
 8002284:	625a      	str	r2, [r3, #36]	; 0x24

    /* DMA2D BGOR register configuration -------------------------------------*/
    WRITE_REG(hdma2d->Instance->BGOR, pLayerCfg->InputOffset);
 8002286:	687b      	ldr	r3, [r7, #4]
 8002288:	681b      	ldr	r3, [r3, #0]
 800228a:	68fa      	ldr	r2, [r7, #12]
 800228c:	6812      	ldr	r2, [r2, #0]
 800228e:	619a      	str	r2, [r3, #24]

    /* DMA2D BGCOLR register configuration -------------------------------------*/
    if ((pLayerCfg->InputColorMode == DMA2D_INPUT_A4) || (pLayerCfg->InputColorMode == DMA2D_INPUT_A8))
 8002290:	68fb      	ldr	r3, [r7, #12]
 8002292:	685b      	ldr	r3, [r3, #4]
 8002294:	2b0a      	cmp	r3, #10
 8002296:	d003      	beq.n	80022a0 <HAL_DMA2D_ConfigLayer+0xd8>
 8002298:	68fb      	ldr	r3, [r7, #12]
 800229a:	685b      	ldr	r3, [r3, #4]
 800229c:	2b09      	cmp	r3, #9
 800229e:	d135      	bne.n	800230c <HAL_DMA2D_ConfigLayer+0x144>
    {
      WRITE_REG(hdma2d->Instance->BGCOLR, pLayerCfg->InputAlpha & (DMA2D_BGCOLR_BLUE | DMA2D_BGCOLR_GREEN | \
 80022a0:	68fb      	ldr	r3, [r7, #12]
 80022a2:	68da      	ldr	r2, [r3, #12]
 80022a4:	687b      	ldr	r3, [r7, #4]
 80022a6:	681b      	ldr	r3, [r3, #0]
 80022a8:	f022 427f 	bic.w	r2, r2, #4278190080	; 0xff000000
 80022ac:	629a      	str	r2, [r3, #40]	; 0x28
 80022ae:	e02d      	b.n	800230c <HAL_DMA2D_ConfigLayer+0x144>
  }
  /* Configure the foreground DMA2D layer */
  else
  {

    if (pLayerCfg->InputColorMode == DMA2D_INPUT_YCBCR)
 80022b0:	68fb      	ldr	r3, [r7, #12]
 80022b2:	685b      	ldr	r3, [r3, #4]
 80022b4:	2b0b      	cmp	r3, #11
 80022b6:	d109      	bne.n	80022cc <HAL_DMA2D_ConfigLayer+0x104>
    {
      regValue |= (pLayerCfg->ChromaSubSampling << DMA2D_FGPFCCR_CSS_Pos);
 80022b8:	68fb      	ldr	r3, [r7, #12]
 80022ba:	699b      	ldr	r3, [r3, #24]
 80022bc:	049b      	lsls	r3, r3, #18
 80022be:	693a      	ldr	r2, [r7, #16]
 80022c0:	4313      	orrs	r3, r2
 80022c2:	613b      	str	r3, [r7, #16]
      regMask  |= DMA2D_FGPFCCR_CSS;
 80022c4:	697b      	ldr	r3, [r7, #20]
 80022c6:	f443 2340 	orr.w	r3, r3, #786432	; 0xc0000
 80022ca:	617b      	str	r3, [r7, #20]
    }

    /* Write DMA2D FGPFCCR register */
    MODIFY_REG(hdma2d->Instance->FGPFCCR, regMask, regValue);
 80022cc:	687b      	ldr	r3, [r7, #4]
 80022ce:	681b      	ldr	r3, [r3, #0]
 80022d0:	69da      	ldr	r2, [r3, #28]
 80022d2:	697b      	ldr	r3, [r7, #20]
 80022d4:	43db      	mvns	r3, r3
 80022d6:	ea02 0103 	and.w	r1, r2, r3
 80022da:	687b      	ldr	r3, [r7, #4]
 80022dc:	681b      	ldr	r3, [r3, #0]
 80022de:	693a      	ldr	r2, [r7, #16]
 80022e0:	430a      	orrs	r2, r1
 80022e2:	61da      	str	r2, [r3, #28]

    /* DMA2D FGOR register configuration -------------------------------------*/
    WRITE_REG(hdma2d->Instance->FGOR, pLayerCfg->InputOffset);
 80022e4:	687b      	ldr	r3, [r7, #4]
 80022e6:	681b      	ldr	r3, [r3, #0]
 80022e8:	68fa      	ldr	r2, [r7, #12]
 80022ea:	6812      	ldr	r2, [r2, #0]
 80022ec:	611a      	str	r2, [r3, #16]

    /* DMA2D FGCOLR register configuration -------------------------------------*/
    if ((pLayerCfg->InputColorMode == DMA2D_INPUT_A4) || (pLayerCfg->InputColorMode == DMA2D_INPUT_A8))
 80022ee:	68fb      	ldr	r3, [r7, #12]
 80022f0:	685b      	ldr	r3, [r3, #4]
 80022f2:	2b0a      	cmp	r3, #10
 80022f4:	d003      	beq.n	80022fe <HAL_DMA2D_ConfigLayer+0x136>
 80022f6:	68fb      	ldr	r3, [r7, #12]
 80022f8:	685b      	ldr	r3, [r3, #4]
 80022fa:	2b09      	cmp	r3, #9
 80022fc:	d106      	bne.n	800230c <HAL_DMA2D_ConfigLayer+0x144>
    {
      WRITE_REG(hdma2d->Instance->FGCOLR, pLayerCfg->InputAlpha & (DMA2D_FGCOLR_BLUE | DMA2D_FGCOLR_GREEN | \
 80022fe:	68fb      	ldr	r3, [r7, #12]
 8002300:	68da      	ldr	r2, [r3, #12]
 8002302:	687b      	ldr	r3, [r7, #4]
 8002304:	681b      	ldr	r3, [r3, #0]
 8002306:	f022 427f 	bic.w	r2, r2, #4278190080	; 0xff000000
 800230a:	621a      	str	r2, [r3, #32]
                                                                   DMA2D_FGCOLR_RED));
    }
  }
  /* Initialize the DMA2D state*/
  hdma2d->State = HAL_DMA2D_STATE_READY;
 800230c:	687b      	ldr	r3, [r7, #4]
 800230e:	2201      	movs	r2, #1
 8002310:	f883 2061 	strb.w	r2, [r3, #97]	; 0x61

  /* Process unlocked */
  __HAL_UNLOCK(hdma2d);
 8002314:	687b      	ldr	r3, [r7, #4]
 8002316:	2200      	movs	r2, #0
 8002318:	f883 2060 	strb.w	r2, [r3, #96]	; 0x60

  return HAL_OK;
 800231c:	2300      	movs	r3, #0
}
 800231e:	4618      	mov	r0, r3
 8002320:	371c      	adds	r7, #28
 8002322:	46bd      	mov	sp, r7
 8002324:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002328:	4770      	bx	lr
 800232a:	bf00      	nop
 800232c:	ff33000f 	.word	0xff33000f

08002330 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002330:	b480      	push	{r7}
 8002332:	b089      	sub	sp, #36	; 0x24
 8002334:	af00      	add	r7, sp, #0
 8002336:	6078      	str	r0, [r7, #4]
 8002338:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 800233a:	2300      	movs	r3, #0
 800233c:	61fb      	str	r3, [r7, #28]
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
#else
  EXTI_CurrentCPU = EXTI_D1; /* EXTI for CM7 CPU */
 800233e:	4b86      	ldr	r3, [pc, #536]	; (8002558 <HAL_GPIO_Init+0x228>)
 8002340:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8002342:	e18c      	b.n	800265e <HAL_GPIO_Init+0x32e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8002344:	683b      	ldr	r3, [r7, #0]
 8002346:	681a      	ldr	r2, [r3, #0]
 8002348:	2101      	movs	r1, #1
 800234a:	69fb      	ldr	r3, [r7, #28]
 800234c:	fa01 f303 	lsl.w	r3, r1, r3
 8002350:	4013      	ands	r3, r2
 8002352:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00U)
 8002354:	693b      	ldr	r3, [r7, #16]
 8002356:	2b00      	cmp	r3, #0
 8002358:	f000 817e 	beq.w	8002658 <HAL_GPIO_Init+0x328>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if ((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 800235c:	683b      	ldr	r3, [r7, #0]
 800235e:	685b      	ldr	r3, [r3, #4]
 8002360:	2b01      	cmp	r3, #1
 8002362:	d00b      	beq.n	800237c <HAL_GPIO_Init+0x4c>
 8002364:	683b      	ldr	r3, [r7, #0]
 8002366:	685b      	ldr	r3, [r3, #4]
 8002368:	2b02      	cmp	r3, #2
 800236a:	d007      	beq.n	800237c <HAL_GPIO_Init+0x4c>
          (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 800236c:	683b      	ldr	r3, [r7, #0]
 800236e:	685b      	ldr	r3, [r3, #4]
      if ((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8002370:	2b11      	cmp	r3, #17
 8002372:	d003      	beq.n	800237c <HAL_GPIO_Init+0x4c>
          (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8002374:	683b      	ldr	r3, [r7, #0]
 8002376:	685b      	ldr	r3, [r3, #4]
 8002378:	2b12      	cmp	r3, #18
 800237a:	d130      	bne.n	80023de <HAL_GPIO_Init+0xae>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 800237c:	687b      	ldr	r3, [r7, #4]
 800237e:	689b      	ldr	r3, [r3, #8]
 8002380:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8002382:	69fb      	ldr	r3, [r7, #28]
 8002384:	005b      	lsls	r3, r3, #1
 8002386:	2203      	movs	r2, #3
 8002388:	fa02 f303 	lsl.w	r3, r2, r3
 800238c:	43db      	mvns	r3, r3
 800238e:	69ba      	ldr	r2, [r7, #24]
 8002390:	4013      	ands	r3, r2
 8002392:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8002394:	683b      	ldr	r3, [r7, #0]
 8002396:	68da      	ldr	r2, [r3, #12]
 8002398:	69fb      	ldr	r3, [r7, #28]
 800239a:	005b      	lsls	r3, r3, #1
 800239c:	fa02 f303 	lsl.w	r3, r2, r3
 80023a0:	69ba      	ldr	r2, [r7, #24]
 80023a2:	4313      	orrs	r3, r2
 80023a4:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80023a6:	687b      	ldr	r3, [r7, #4]
 80023a8:	69ba      	ldr	r2, [r7, #24]
 80023aa:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80023ac:	687b      	ldr	r3, [r7, #4]
 80023ae:	685b      	ldr	r3, [r3, #4]
 80023b0:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 80023b2:	2201      	movs	r2, #1
 80023b4:	69fb      	ldr	r3, [r7, #28]
 80023b6:	fa02 f303 	lsl.w	r3, r2, r3
 80023ba:	43db      	mvns	r3, r3
 80023bc:	69ba      	ldr	r2, [r7, #24]
 80023be:	4013      	ands	r3, r2
 80023c0:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 80023c2:	683b      	ldr	r3, [r7, #0]
 80023c4:	685b      	ldr	r3, [r3, #4]
 80023c6:	091b      	lsrs	r3, r3, #4
 80023c8:	f003 0201 	and.w	r2, r3, #1
 80023cc:	69fb      	ldr	r3, [r7, #28]
 80023ce:	fa02 f303 	lsl.w	r3, r2, r3
 80023d2:	69ba      	ldr	r2, [r7, #24]
 80023d4:	4313      	orrs	r3, r2
 80023d6:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80023d8:	687b      	ldr	r3, [r7, #4]
 80023da:	69ba      	ldr	r2, [r7, #24]
 80023dc:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 80023de:	687b      	ldr	r3, [r7, #4]
 80023e0:	68db      	ldr	r3, [r3, #12]
 80023e2:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 80023e4:	69fb      	ldr	r3, [r7, #28]
 80023e6:	005b      	lsls	r3, r3, #1
 80023e8:	2203      	movs	r2, #3
 80023ea:	fa02 f303 	lsl.w	r3, r2, r3
 80023ee:	43db      	mvns	r3, r3
 80023f0:	69ba      	ldr	r2, [r7, #24]
 80023f2:	4013      	ands	r3, r2
 80023f4:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 80023f6:	683b      	ldr	r3, [r7, #0]
 80023f8:	689a      	ldr	r2, [r3, #8]
 80023fa:	69fb      	ldr	r3, [r7, #28]
 80023fc:	005b      	lsls	r3, r3, #1
 80023fe:	fa02 f303 	lsl.w	r3, r2, r3
 8002402:	69ba      	ldr	r2, [r7, #24]
 8002404:	4313      	orrs	r3, r2
 8002406:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8002408:	687b      	ldr	r3, [r7, #4]
 800240a:	69ba      	ldr	r2, [r7, #24]
 800240c:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 800240e:	683b      	ldr	r3, [r7, #0]
 8002410:	685b      	ldr	r3, [r3, #4]
 8002412:	2b02      	cmp	r3, #2
 8002414:	d003      	beq.n	800241e <HAL_GPIO_Init+0xee>
 8002416:	683b      	ldr	r3, [r7, #0]
 8002418:	685b      	ldr	r3, [r3, #4]
 800241a:	2b12      	cmp	r3, #18
 800241c:	d123      	bne.n	8002466 <HAL_GPIO_Init+0x136>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 800241e:	69fb      	ldr	r3, [r7, #28]
 8002420:	08da      	lsrs	r2, r3, #3
 8002422:	687b      	ldr	r3, [r7, #4]
 8002424:	3208      	adds	r2, #8
 8002426:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800242a:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 800242c:	69fb      	ldr	r3, [r7, #28]
 800242e:	f003 0307 	and.w	r3, r3, #7
 8002432:	009b      	lsls	r3, r3, #2
 8002434:	220f      	movs	r2, #15
 8002436:	fa02 f303 	lsl.w	r3, r2, r3
 800243a:	43db      	mvns	r3, r3
 800243c:	69ba      	ldr	r2, [r7, #24]
 800243e:	4013      	ands	r3, r2
 8002440:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8002442:	683b      	ldr	r3, [r7, #0]
 8002444:	691a      	ldr	r2, [r3, #16]
 8002446:	69fb      	ldr	r3, [r7, #28]
 8002448:	f003 0307 	and.w	r3, r3, #7
 800244c:	009b      	lsls	r3, r3, #2
 800244e:	fa02 f303 	lsl.w	r3, r2, r3
 8002452:	69ba      	ldr	r2, [r7, #24]
 8002454:	4313      	orrs	r3, r2
 8002456:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8002458:	69fb      	ldr	r3, [r7, #28]
 800245a:	08da      	lsrs	r2, r3, #3
 800245c:	687b      	ldr	r3, [r7, #4]
 800245e:	3208      	adds	r2, #8
 8002460:	69b9      	ldr	r1, [r7, #24]
 8002462:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002466:	687b      	ldr	r3, [r7, #4]
 8002468:	681b      	ldr	r3, [r3, #0]
 800246a:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 800246c:	69fb      	ldr	r3, [r7, #28]
 800246e:	005b      	lsls	r3, r3, #1
 8002470:	2203      	movs	r2, #3
 8002472:	fa02 f303 	lsl.w	r3, r2, r3
 8002476:	43db      	mvns	r3, r3
 8002478:	69ba      	ldr	r2, [r7, #24]
 800247a:	4013      	ands	r3, r2
 800247c:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800247e:	683b      	ldr	r3, [r7, #0]
 8002480:	685b      	ldr	r3, [r3, #4]
 8002482:	f003 0203 	and.w	r2, r3, #3
 8002486:	69fb      	ldr	r3, [r7, #28]
 8002488:	005b      	lsls	r3, r3, #1
 800248a:	fa02 f303 	lsl.w	r3, r2, r3
 800248e:	69ba      	ldr	r2, [r7, #24]
 8002490:	4313      	orrs	r3, r2
 8002492:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8002494:	687b      	ldr	r3, [r7, #4]
 8002496:	69ba      	ldr	r2, [r7, #24]
 8002498:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 800249a:	683b      	ldr	r3, [r7, #0]
 800249c:	685b      	ldr	r3, [r3, #4]
 800249e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80024a2:	2b00      	cmp	r3, #0
 80024a4:	f000 80d8 	beq.w	8002658 <HAL_GPIO_Init+0x328>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80024a8:	4b2c      	ldr	r3, [pc, #176]	; (800255c <HAL_GPIO_Init+0x22c>)
 80024aa:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 80024ae:	4a2b      	ldr	r2, [pc, #172]	; (800255c <HAL_GPIO_Init+0x22c>)
 80024b0:	f043 0302 	orr.w	r3, r3, #2
 80024b4:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 80024b8:	4b28      	ldr	r3, [pc, #160]	; (800255c <HAL_GPIO_Init+0x22c>)
 80024ba:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 80024be:	f003 0302 	and.w	r3, r3, #2
 80024c2:	60fb      	str	r3, [r7, #12]
 80024c4:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80024c6:	4a26      	ldr	r2, [pc, #152]	; (8002560 <HAL_GPIO_Init+0x230>)
 80024c8:	69fb      	ldr	r3, [r7, #28]
 80024ca:	089b      	lsrs	r3, r3, #2
 80024cc:	3302      	adds	r3, #2
 80024ce:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80024d2:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 80024d4:	69fb      	ldr	r3, [r7, #28]
 80024d6:	f003 0303 	and.w	r3, r3, #3
 80024da:	009b      	lsls	r3, r3, #2
 80024dc:	220f      	movs	r2, #15
 80024de:	fa02 f303 	lsl.w	r3, r2, r3
 80024e2:	43db      	mvns	r3, r3
 80024e4:	69ba      	ldr	r2, [r7, #24]
 80024e6:	4013      	ands	r3, r2
 80024e8:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 80024ea:	687b      	ldr	r3, [r7, #4]
 80024ec:	4a1d      	ldr	r2, [pc, #116]	; (8002564 <HAL_GPIO_Init+0x234>)
 80024ee:	4293      	cmp	r3, r2
 80024f0:	d04a      	beq.n	8002588 <HAL_GPIO_Init+0x258>
 80024f2:	687b      	ldr	r3, [r7, #4]
 80024f4:	4a1c      	ldr	r2, [pc, #112]	; (8002568 <HAL_GPIO_Init+0x238>)
 80024f6:	4293      	cmp	r3, r2
 80024f8:	d02b      	beq.n	8002552 <HAL_GPIO_Init+0x222>
 80024fa:	687b      	ldr	r3, [r7, #4]
 80024fc:	4a1b      	ldr	r2, [pc, #108]	; (800256c <HAL_GPIO_Init+0x23c>)
 80024fe:	4293      	cmp	r3, r2
 8002500:	d025      	beq.n	800254e <HAL_GPIO_Init+0x21e>
 8002502:	687b      	ldr	r3, [r7, #4]
 8002504:	4a1a      	ldr	r2, [pc, #104]	; (8002570 <HAL_GPIO_Init+0x240>)
 8002506:	4293      	cmp	r3, r2
 8002508:	d01f      	beq.n	800254a <HAL_GPIO_Init+0x21a>
 800250a:	687b      	ldr	r3, [r7, #4]
 800250c:	4a19      	ldr	r2, [pc, #100]	; (8002574 <HAL_GPIO_Init+0x244>)
 800250e:	4293      	cmp	r3, r2
 8002510:	d019      	beq.n	8002546 <HAL_GPIO_Init+0x216>
 8002512:	687b      	ldr	r3, [r7, #4]
 8002514:	4a18      	ldr	r2, [pc, #96]	; (8002578 <HAL_GPIO_Init+0x248>)
 8002516:	4293      	cmp	r3, r2
 8002518:	d013      	beq.n	8002542 <HAL_GPIO_Init+0x212>
 800251a:	687b      	ldr	r3, [r7, #4]
 800251c:	4a17      	ldr	r2, [pc, #92]	; (800257c <HAL_GPIO_Init+0x24c>)
 800251e:	4293      	cmp	r3, r2
 8002520:	d00d      	beq.n	800253e <HAL_GPIO_Init+0x20e>
 8002522:	687b      	ldr	r3, [r7, #4]
 8002524:	4a16      	ldr	r2, [pc, #88]	; (8002580 <HAL_GPIO_Init+0x250>)
 8002526:	4293      	cmp	r3, r2
 8002528:	d007      	beq.n	800253a <HAL_GPIO_Init+0x20a>
 800252a:	687b      	ldr	r3, [r7, #4]
 800252c:	4a15      	ldr	r2, [pc, #84]	; (8002584 <HAL_GPIO_Init+0x254>)
 800252e:	4293      	cmp	r3, r2
 8002530:	d101      	bne.n	8002536 <HAL_GPIO_Init+0x206>
 8002532:	2309      	movs	r3, #9
 8002534:	e029      	b.n	800258a <HAL_GPIO_Init+0x25a>
 8002536:	230a      	movs	r3, #10
 8002538:	e027      	b.n	800258a <HAL_GPIO_Init+0x25a>
 800253a:	2307      	movs	r3, #7
 800253c:	e025      	b.n	800258a <HAL_GPIO_Init+0x25a>
 800253e:	2306      	movs	r3, #6
 8002540:	e023      	b.n	800258a <HAL_GPIO_Init+0x25a>
 8002542:	2305      	movs	r3, #5
 8002544:	e021      	b.n	800258a <HAL_GPIO_Init+0x25a>
 8002546:	2304      	movs	r3, #4
 8002548:	e01f      	b.n	800258a <HAL_GPIO_Init+0x25a>
 800254a:	2303      	movs	r3, #3
 800254c:	e01d      	b.n	800258a <HAL_GPIO_Init+0x25a>
 800254e:	2302      	movs	r3, #2
 8002550:	e01b      	b.n	800258a <HAL_GPIO_Init+0x25a>
 8002552:	2301      	movs	r3, #1
 8002554:	e019      	b.n	800258a <HAL_GPIO_Init+0x25a>
 8002556:	bf00      	nop
 8002558:	58000080 	.word	0x58000080
 800255c:	58024400 	.word	0x58024400
 8002560:	58000400 	.word	0x58000400
 8002564:	58020000 	.word	0x58020000
 8002568:	58020400 	.word	0x58020400
 800256c:	58020800 	.word	0x58020800
 8002570:	58020c00 	.word	0x58020c00
 8002574:	58021000 	.word	0x58021000
 8002578:	58021400 	.word	0x58021400
 800257c:	58021800 	.word	0x58021800
 8002580:	58021c00 	.word	0x58021c00
 8002584:	58022400 	.word	0x58022400
 8002588:	2300      	movs	r3, #0
 800258a:	69fa      	ldr	r2, [r7, #28]
 800258c:	f002 0203 	and.w	r2, r2, #3
 8002590:	0092      	lsls	r2, r2, #2
 8002592:	4093      	lsls	r3, r2
 8002594:	69ba      	ldr	r2, [r7, #24]
 8002596:	4313      	orrs	r3, r2
 8002598:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 800259a:	4938      	ldr	r1, [pc, #224]	; (800267c <HAL_GPIO_Init+0x34c>)
 800259c:	69fb      	ldr	r3, [r7, #28]
 800259e:	089b      	lsrs	r3, r3, #2
 80025a0:	3302      	adds	r3, #2
 80025a2:	69ba      	ldr	r2, [r7, #24]
 80025a4:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
 80025a8:	697b      	ldr	r3, [r7, #20]
 80025aa:	681b      	ldr	r3, [r3, #0]
 80025ac:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 80025ae:	693b      	ldr	r3, [r7, #16]
 80025b0:	43db      	mvns	r3, r3
 80025b2:	69ba      	ldr	r2, [r7, #24]
 80025b4:	4013      	ands	r3, r2
 80025b6:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80025b8:	683b      	ldr	r3, [r7, #0]
 80025ba:	685b      	ldr	r3, [r3, #4]
 80025bc:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80025c0:	2b00      	cmp	r3, #0
 80025c2:	d003      	beq.n	80025cc <HAL_GPIO_Init+0x29c>
        {
          temp |= iocurrent;
 80025c4:	69ba      	ldr	r2, [r7, #24]
 80025c6:	693b      	ldr	r3, [r7, #16]
 80025c8:	4313      	orrs	r3, r2
 80025ca:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->IMR1 = temp;
 80025cc:	697b      	ldr	r3, [r7, #20]
 80025ce:	69ba      	ldr	r2, [r7, #24]
 80025d0:	601a      	str	r2, [r3, #0]

        temp = EXTI_CurrentCPU->EMR1;
 80025d2:	697b      	ldr	r3, [r7, #20]
 80025d4:	685b      	ldr	r3, [r3, #4]
 80025d6:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 80025d8:	693b      	ldr	r3, [r7, #16]
 80025da:	43db      	mvns	r3, r3
 80025dc:	69ba      	ldr	r2, [r7, #24]
 80025de:	4013      	ands	r3, r2
 80025e0:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80025e2:	683b      	ldr	r3, [r7, #0]
 80025e4:	685b      	ldr	r3, [r3, #4]
 80025e6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80025ea:	2b00      	cmp	r3, #0
 80025ec:	d003      	beq.n	80025f6 <HAL_GPIO_Init+0x2c6>
        {
          temp |= iocurrent;
 80025ee:	69ba      	ldr	r2, [r7, #24]
 80025f0:	693b      	ldr	r3, [r7, #16]
 80025f2:	4313      	orrs	r3, r2
 80025f4:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->EMR1 = temp;
 80025f6:	697b      	ldr	r3, [r7, #20]
 80025f8:	69ba      	ldr	r2, [r7, #24]
 80025fa:	605a      	str	r2, [r3, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 80025fc:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002600:	681b      	ldr	r3, [r3, #0]
 8002602:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8002604:	693b      	ldr	r3, [r7, #16]
 8002606:	43db      	mvns	r3, r3
 8002608:	69ba      	ldr	r2, [r7, #24]
 800260a:	4013      	ands	r3, r2
 800260c:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 800260e:	683b      	ldr	r3, [r7, #0]
 8002610:	685b      	ldr	r3, [r3, #4]
 8002612:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002616:	2b00      	cmp	r3, #0
 8002618:	d003      	beq.n	8002622 <HAL_GPIO_Init+0x2f2>
        {
          temp |= iocurrent;
 800261a:	69ba      	ldr	r2, [r7, #24]
 800261c:	693b      	ldr	r3, [r7, #16]
 800261e:	4313      	orrs	r3, r2
 8002620:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR1 = temp;
 8002622:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8002626:	69bb      	ldr	r3, [r7, #24]
 8002628:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 800262a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800262e:	685b      	ldr	r3, [r3, #4]
 8002630:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8002632:	693b      	ldr	r3, [r7, #16]
 8002634:	43db      	mvns	r3, r3
 8002636:	69ba      	ldr	r2, [r7, #24]
 8002638:	4013      	ands	r3, r2
 800263a:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 800263c:	683b      	ldr	r3, [r7, #0]
 800263e:	685b      	ldr	r3, [r3, #4]
 8002640:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002644:	2b00      	cmp	r3, #0
 8002646:	d003      	beq.n	8002650 <HAL_GPIO_Init+0x320>
        {
          temp |= iocurrent;
 8002648:	69ba      	ldr	r2, [r7, #24]
 800264a:	693b      	ldr	r3, [r7, #16]
 800264c:	4313      	orrs	r3, r2
 800264e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR1 = temp;
 8002650:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8002654:	69bb      	ldr	r3, [r7, #24]
 8002656:	6053      	str	r3, [r2, #4]
      }
    }

    position++;
 8002658:	69fb      	ldr	r3, [r7, #28]
 800265a:	3301      	adds	r3, #1
 800265c:	61fb      	str	r3, [r7, #28]
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 800265e:	683b      	ldr	r3, [r7, #0]
 8002660:	681a      	ldr	r2, [r3, #0]
 8002662:	69fb      	ldr	r3, [r7, #28]
 8002664:	fa22 f303 	lsr.w	r3, r2, r3
 8002668:	2b00      	cmp	r3, #0
 800266a:	f47f ae6b 	bne.w	8002344 <HAL_GPIO_Init+0x14>
  }
}
 800266e:	bf00      	nop
 8002670:	bf00      	nop
 8002672:	3724      	adds	r7, #36	; 0x24
 8002674:	46bd      	mov	sp, r7
 8002676:	f85d 7b04 	ldr.w	r7, [sp], #4
 800267a:	4770      	bx	lr
 800267c:	58000400 	.word	0x58000400

08002680 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002680:	b480      	push	{r7}
 8002682:	b083      	sub	sp, #12
 8002684:	af00      	add	r7, sp, #0
 8002686:	6078      	str	r0, [r7, #4]
 8002688:	460b      	mov	r3, r1
 800268a:	807b      	strh	r3, [r7, #2]
 800268c:	4613      	mov	r3, r2
 800268e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8002690:	787b      	ldrb	r3, [r7, #1]
 8002692:	2b00      	cmp	r3, #0
 8002694:	d003      	beq.n	800269e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8002696:	887a      	ldrh	r2, [r7, #2]
 8002698:	687b      	ldr	r3, [r7, #4]
 800269a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
  }
}
 800269c:	e003      	b.n	80026a6 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 800269e:	887b      	ldrh	r3, [r7, #2]
 80026a0:	041a      	lsls	r2, r3, #16
 80026a2:	687b      	ldr	r3, [r7, #4]
 80026a4:	619a      	str	r2, [r3, #24]
}
 80026a6:	bf00      	nop
 80026a8:	370c      	adds	r7, #12
 80026aa:	46bd      	mov	sp, r7
 80026ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026b0:	4770      	bx	lr
	...

080026b4 <HAL_PWREx_ConfigSupply>:
  *         PWR_SMPS_2V5_SUPPLIES_EXT are used only for lines that supports SMPS
  *         regulator.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply (uint32_t SupplySource)
{
 80026b4:	b580      	push	{r7, lr}
 80026b6:	b084      	sub	sp, #16
 80026b8:	af00      	add	r7, sp, #0
 80026ba:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param (IS_PWR_SUPPLY (SupplySource));

  /* Check if supply source was configured */
#if defined (PWR_FLAG_SCUEN)
  if (__HAL_PWR_GET_FLAG (PWR_FLAG_SCUEN) == 0U)
 80026bc:	4b19      	ldr	r3, [pc, #100]	; (8002724 <HAL_PWREx_ConfigSupply+0x70>)
 80026be:	68db      	ldr	r3, [r3, #12]
 80026c0:	f003 0304 	and.w	r3, r3, #4
 80026c4:	2b04      	cmp	r3, #4
 80026c6:	d00a      	beq.n	80026de <HAL_PWREx_ConfigSupply+0x2a>
#else
  if ((PWR->CR3 & (PWR_CR3_SMPSEN | PWR_CR3_LDOEN | PWR_CR3_BYPASS)) != (PWR_CR3_SMPSEN | PWR_CR3_LDOEN))
#endif /* defined (PWR_FLAG_SCUEN) */
  {
    /* Check supply configuration */
    if ((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
 80026c8:	4b16      	ldr	r3, [pc, #88]	; (8002724 <HAL_PWREx_ConfigSupply+0x70>)
 80026ca:	68db      	ldr	r3, [r3, #12]
 80026cc:	f003 0307 	and.w	r3, r3, #7
 80026d0:	687a      	ldr	r2, [r7, #4]
 80026d2:	429a      	cmp	r2, r3
 80026d4:	d001      	beq.n	80026da <HAL_PWREx_ConfigSupply+0x26>
    {
      /* Supply configuration update locked, can't apply a new supply config */
      return HAL_ERROR;
 80026d6:	2301      	movs	r3, #1
 80026d8:	e01f      	b.n	800271a <HAL_PWREx_ConfigSupply+0x66>
    else
    {
      /* Supply configuration update locked, but new supply configuration
         matches with old supply configuration : nothing to do
      */
      return HAL_OK;
 80026da:	2300      	movs	r3, #0
 80026dc:	e01d      	b.n	800271a <HAL_PWREx_ConfigSupply+0x66>
    }
  }

  /* Set the power supply configuration */
  MODIFY_REG (PWR->CR3, PWR_SUPPLY_CONFIG_MASK, SupplySource);
 80026de:	4b11      	ldr	r3, [pc, #68]	; (8002724 <HAL_PWREx_ConfigSupply+0x70>)
 80026e0:	68db      	ldr	r3, [r3, #12]
 80026e2:	f023 0207 	bic.w	r2, r3, #7
 80026e6:	490f      	ldr	r1, [pc, #60]	; (8002724 <HAL_PWREx_ConfigSupply+0x70>)
 80026e8:	687b      	ldr	r3, [r7, #4]
 80026ea:	4313      	orrs	r3, r2
 80026ec:	60cb      	str	r3, [r1, #12]

  /* Get tick */
  tickstart = HAL_GetTick ();
 80026ee:	f7fe fe65 	bl	80013bc <HAL_GetTick>
 80026f2:	60f8      	str	r0, [r7, #12]

  /* Wait till voltage level flag is set */
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 80026f4:	e009      	b.n	800270a <HAL_PWREx_ConfigSupply+0x56>
  {
    if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 80026f6:	f7fe fe61 	bl	80013bc <HAL_GetTick>
 80026fa:	4602      	mov	r2, r0
 80026fc:	68fb      	ldr	r3, [r7, #12]
 80026fe:	1ad3      	subs	r3, r2, r3
 8002700:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8002704:	d901      	bls.n	800270a <HAL_PWREx_ConfigSupply+0x56>
    {
      return HAL_ERROR;
 8002706:	2301      	movs	r3, #1
 8002708:	e007      	b.n	800271a <HAL_PWREx_ConfigSupply+0x66>
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 800270a:	4b06      	ldr	r3, [pc, #24]	; (8002724 <HAL_PWREx_ConfigSupply+0x70>)
 800270c:	685b      	ldr	r3, [r3, #4]
 800270e:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8002712:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002716:	d1ee      	bne.n	80026f6 <HAL_PWREx_ConfigSupply+0x42>
      }
    }
  }
#endif /* defined (SMPS) */

  return HAL_OK;
 8002718:	2300      	movs	r3, #0
}
 800271a:	4618      	mov	r0, r3
 800271c:	3710      	adds	r7, #16
 800271e:	46bd      	mov	sp, r7
 8002720:	bd80      	pop	{r7, pc}
 8002722:	bf00      	nop
 8002724:	58024800 	.word	0x58024800

08002728 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002728:	b580      	push	{r7, lr}
 800272a:	b08c      	sub	sp, #48	; 0x30
 800272c:	af00      	add	r7, sp, #0
 800272e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp1_pllckcfg, temp2_pllckcfg;

    /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8002730:	687b      	ldr	r3, [r7, #4]
 8002732:	2b00      	cmp	r3, #0
 8002734:	d101      	bne.n	800273a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002736:	2301      	movs	r3, #1
 8002738:	e37a      	b.n	8002e30 <HAL_RCC_OscConfig+0x708>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800273a:	687b      	ldr	r3, [r7, #4]
 800273c:	681b      	ldr	r3, [r3, #0]
 800273e:	f003 0301 	and.w	r3, r3, #1
 8002742:	2b00      	cmp	r3, #0
 8002744:	f000 8087 	beq.w	8002856 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002748:	4ba0      	ldr	r3, [pc, #640]	; (80029cc <HAL_RCC_OscConfig+0x2a4>)
 800274a:	691b      	ldr	r3, [r3, #16]
 800274c:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8002750:	62fb      	str	r3, [r7, #44]	; 0x2c
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8002752:	4b9e      	ldr	r3, [pc, #632]	; (80029cc <HAL_RCC_OscConfig+0x2a4>)
 8002754:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002756:	62bb      	str	r3, [r7, #40]	; 0x28
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 8002758:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800275a:	2b10      	cmp	r3, #16
 800275c:	d007      	beq.n	800276e <HAL_RCC_OscConfig+0x46>
 800275e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002760:	2b18      	cmp	r3, #24
 8002762:	d110      	bne.n	8002786 <HAL_RCC_OscConfig+0x5e>
 8002764:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002766:	f003 0303 	and.w	r3, r3, #3
 800276a:	2b02      	cmp	r3, #2
 800276c:	d10b      	bne.n	8002786 <HAL_RCC_OscConfig+0x5e>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800276e:	4b97      	ldr	r3, [pc, #604]	; (80029cc <HAL_RCC_OscConfig+0x2a4>)
 8002770:	681b      	ldr	r3, [r3, #0]
 8002772:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002776:	2b00      	cmp	r3, #0
 8002778:	d06c      	beq.n	8002854 <HAL_RCC_OscConfig+0x12c>
 800277a:	687b      	ldr	r3, [r7, #4]
 800277c:	685b      	ldr	r3, [r3, #4]
 800277e:	2b00      	cmp	r3, #0
 8002780:	d168      	bne.n	8002854 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8002782:	2301      	movs	r3, #1
 8002784:	e354      	b.n	8002e30 <HAL_RCC_OscConfig+0x708>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002786:	687b      	ldr	r3, [r7, #4]
 8002788:	685b      	ldr	r3, [r3, #4]
 800278a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800278e:	d106      	bne.n	800279e <HAL_RCC_OscConfig+0x76>
 8002790:	4b8e      	ldr	r3, [pc, #568]	; (80029cc <HAL_RCC_OscConfig+0x2a4>)
 8002792:	681b      	ldr	r3, [r3, #0]
 8002794:	4a8d      	ldr	r2, [pc, #564]	; (80029cc <HAL_RCC_OscConfig+0x2a4>)
 8002796:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800279a:	6013      	str	r3, [r2, #0]
 800279c:	e02e      	b.n	80027fc <HAL_RCC_OscConfig+0xd4>
 800279e:	687b      	ldr	r3, [r7, #4]
 80027a0:	685b      	ldr	r3, [r3, #4]
 80027a2:	2b00      	cmp	r3, #0
 80027a4:	d10c      	bne.n	80027c0 <HAL_RCC_OscConfig+0x98>
 80027a6:	4b89      	ldr	r3, [pc, #548]	; (80029cc <HAL_RCC_OscConfig+0x2a4>)
 80027a8:	681b      	ldr	r3, [r3, #0]
 80027aa:	4a88      	ldr	r2, [pc, #544]	; (80029cc <HAL_RCC_OscConfig+0x2a4>)
 80027ac:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80027b0:	6013      	str	r3, [r2, #0]
 80027b2:	4b86      	ldr	r3, [pc, #536]	; (80029cc <HAL_RCC_OscConfig+0x2a4>)
 80027b4:	681b      	ldr	r3, [r3, #0]
 80027b6:	4a85      	ldr	r2, [pc, #532]	; (80029cc <HAL_RCC_OscConfig+0x2a4>)
 80027b8:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80027bc:	6013      	str	r3, [r2, #0]
 80027be:	e01d      	b.n	80027fc <HAL_RCC_OscConfig+0xd4>
 80027c0:	687b      	ldr	r3, [r7, #4]
 80027c2:	685b      	ldr	r3, [r3, #4]
 80027c4:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80027c8:	d10c      	bne.n	80027e4 <HAL_RCC_OscConfig+0xbc>
 80027ca:	4b80      	ldr	r3, [pc, #512]	; (80029cc <HAL_RCC_OscConfig+0x2a4>)
 80027cc:	681b      	ldr	r3, [r3, #0]
 80027ce:	4a7f      	ldr	r2, [pc, #508]	; (80029cc <HAL_RCC_OscConfig+0x2a4>)
 80027d0:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80027d4:	6013      	str	r3, [r2, #0]
 80027d6:	4b7d      	ldr	r3, [pc, #500]	; (80029cc <HAL_RCC_OscConfig+0x2a4>)
 80027d8:	681b      	ldr	r3, [r3, #0]
 80027da:	4a7c      	ldr	r2, [pc, #496]	; (80029cc <HAL_RCC_OscConfig+0x2a4>)
 80027dc:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80027e0:	6013      	str	r3, [r2, #0]
 80027e2:	e00b      	b.n	80027fc <HAL_RCC_OscConfig+0xd4>
 80027e4:	4b79      	ldr	r3, [pc, #484]	; (80029cc <HAL_RCC_OscConfig+0x2a4>)
 80027e6:	681b      	ldr	r3, [r3, #0]
 80027e8:	4a78      	ldr	r2, [pc, #480]	; (80029cc <HAL_RCC_OscConfig+0x2a4>)
 80027ea:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80027ee:	6013      	str	r3, [r2, #0]
 80027f0:	4b76      	ldr	r3, [pc, #472]	; (80029cc <HAL_RCC_OscConfig+0x2a4>)
 80027f2:	681b      	ldr	r3, [r3, #0]
 80027f4:	4a75      	ldr	r2, [pc, #468]	; (80029cc <HAL_RCC_OscConfig+0x2a4>)
 80027f6:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80027fa:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80027fc:	687b      	ldr	r3, [r7, #4]
 80027fe:	685b      	ldr	r3, [r3, #4]
 8002800:	2b00      	cmp	r3, #0
 8002802:	d013      	beq.n	800282c <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002804:	f7fe fdda 	bl	80013bc <HAL_GetTick>
 8002808:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 800280a:	e008      	b.n	800281e <HAL_RCC_OscConfig+0xf6>
        {
          if((uint32_t) (HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800280c:	f7fe fdd6 	bl	80013bc <HAL_GetTick>
 8002810:	4602      	mov	r2, r0
 8002812:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002814:	1ad3      	subs	r3, r2, r3
 8002816:	2b64      	cmp	r3, #100	; 0x64
 8002818:	d901      	bls.n	800281e <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 800281a:	2303      	movs	r3, #3
 800281c:	e308      	b.n	8002e30 <HAL_RCC_OscConfig+0x708>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 800281e:	4b6b      	ldr	r3, [pc, #428]	; (80029cc <HAL_RCC_OscConfig+0x2a4>)
 8002820:	681b      	ldr	r3, [r3, #0]
 8002822:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002826:	2b00      	cmp	r3, #0
 8002828:	d0f0      	beq.n	800280c <HAL_RCC_OscConfig+0xe4>
 800282a:	e014      	b.n	8002856 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800282c:	f7fe fdc6 	bl	80013bc <HAL_GetTick>
 8002830:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8002832:	e008      	b.n	8002846 <HAL_RCC_OscConfig+0x11e>
        {
          if((uint32_t) (HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002834:	f7fe fdc2 	bl	80013bc <HAL_GetTick>
 8002838:	4602      	mov	r2, r0
 800283a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800283c:	1ad3      	subs	r3, r2, r3
 800283e:	2b64      	cmp	r3, #100	; 0x64
 8002840:	d901      	bls.n	8002846 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8002842:	2303      	movs	r3, #3
 8002844:	e2f4      	b.n	8002e30 <HAL_RCC_OscConfig+0x708>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8002846:	4b61      	ldr	r3, [pc, #388]	; (80029cc <HAL_RCC_OscConfig+0x2a4>)
 8002848:	681b      	ldr	r3, [r3, #0]
 800284a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800284e:	2b00      	cmp	r3, #0
 8002850:	d1f0      	bne.n	8002834 <HAL_RCC_OscConfig+0x10c>
 8002852:	e000      	b.n	8002856 <HAL_RCC_OscConfig+0x12e>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002854:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002856:	687b      	ldr	r3, [r7, #4]
 8002858:	681b      	ldr	r3, [r3, #0]
 800285a:	f003 0302 	and.w	r3, r3, #2
 800285e:	2b00      	cmp	r3, #0
 8002860:	d06d      	beq.n	800293e <HAL_RCC_OscConfig+0x216>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSICALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* When the HSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002862:	4b5a      	ldr	r3, [pc, #360]	; (80029cc <HAL_RCC_OscConfig+0x2a4>)
 8002864:	691b      	ldr	r3, [r3, #16]
 8002866:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800286a:	623b      	str	r3, [r7, #32]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 800286c:	4b57      	ldr	r3, [pc, #348]	; (80029cc <HAL_RCC_OscConfig+0x2a4>)
 800286e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002870:	61fb      	str	r3, [r7, #28]
    if((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 8002872:	6a3b      	ldr	r3, [r7, #32]
 8002874:	2b00      	cmp	r3, #0
 8002876:	d007      	beq.n	8002888 <HAL_RCC_OscConfig+0x160>
 8002878:	6a3b      	ldr	r3, [r7, #32]
 800287a:	2b18      	cmp	r3, #24
 800287c:	d11b      	bne.n	80028b6 <HAL_RCC_OscConfig+0x18e>
 800287e:	69fb      	ldr	r3, [r7, #28]
 8002880:	f003 0303 	and.w	r3, r3, #3
 8002884:	2b00      	cmp	r3, #0
 8002886:	d116      	bne.n	80028b6 <HAL_RCC_OscConfig+0x18e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8002888:	4b50      	ldr	r3, [pc, #320]	; (80029cc <HAL_RCC_OscConfig+0x2a4>)
 800288a:	681b      	ldr	r3, [r3, #0]
 800288c:	f003 0304 	and.w	r3, r3, #4
 8002890:	2b00      	cmp	r3, #0
 8002892:	d005      	beq.n	80028a0 <HAL_RCC_OscConfig+0x178>
 8002894:	687b      	ldr	r3, [r7, #4]
 8002896:	68db      	ldr	r3, [r3, #12]
 8002898:	2b00      	cmp	r3, #0
 800289a:	d101      	bne.n	80028a0 <HAL_RCC_OscConfig+0x178>
      {
        return HAL_ERROR;
 800289c:	2301      	movs	r3, #1
 800289e:	e2c7      	b.n	8002e30 <HAL_RCC_OscConfig+0x708>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80028a0:	4b4a      	ldr	r3, [pc, #296]	; (80029cc <HAL_RCC_OscConfig+0x2a4>)
 80028a2:	685b      	ldr	r3, [r3, #4]
 80028a4:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 80028a8:	687b      	ldr	r3, [r7, #4]
 80028aa:	691b      	ldr	r3, [r3, #16]
 80028ac:	061b      	lsls	r3, r3, #24
 80028ae:	4947      	ldr	r1, [pc, #284]	; (80029cc <HAL_RCC_OscConfig+0x2a4>)
 80028b0:	4313      	orrs	r3, r2
 80028b2:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80028b4:	e043      	b.n	800293e <HAL_RCC_OscConfig+0x216>
    }

    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 80028b6:	687b      	ldr	r3, [r7, #4]
 80028b8:	68db      	ldr	r3, [r3, #12]
 80028ba:	2b00      	cmp	r3, #0
 80028bc:	d026      	beq.n	800290c <HAL_RCC_OscConfig+0x1e4>
      {
     /* Enable the Internal High Speed oscillator (HSI, HSIDIV2,HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 80028be:	4b43      	ldr	r3, [pc, #268]	; (80029cc <HAL_RCC_OscConfig+0x2a4>)
 80028c0:	681b      	ldr	r3, [r3, #0]
 80028c2:	f023 0219 	bic.w	r2, r3, #25
 80028c6:	687b      	ldr	r3, [r7, #4]
 80028c8:	68db      	ldr	r3, [r3, #12]
 80028ca:	4940      	ldr	r1, [pc, #256]	; (80029cc <HAL_RCC_OscConfig+0x2a4>)
 80028cc:	4313      	orrs	r3, r2
 80028ce:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80028d0:	f7fe fd74 	bl	80013bc <HAL_GetTick>
 80028d4:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80028d6:	e008      	b.n	80028ea <HAL_RCC_OscConfig+0x1c2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80028d8:	f7fe fd70 	bl	80013bc <HAL_GetTick>
 80028dc:	4602      	mov	r2, r0
 80028de:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80028e0:	1ad3      	subs	r3, r2, r3
 80028e2:	2b02      	cmp	r3, #2
 80028e4:	d901      	bls.n	80028ea <HAL_RCC_OscConfig+0x1c2>
          {
            return HAL_TIMEOUT;
 80028e6:	2303      	movs	r3, #3
 80028e8:	e2a2      	b.n	8002e30 <HAL_RCC_OscConfig+0x708>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80028ea:	4b38      	ldr	r3, [pc, #224]	; (80029cc <HAL_RCC_OscConfig+0x2a4>)
 80028ec:	681b      	ldr	r3, [r3, #0]
 80028ee:	f003 0304 	and.w	r3, r3, #4
 80028f2:	2b00      	cmp	r3, #0
 80028f4:	d0f0      	beq.n	80028d8 <HAL_RCC_OscConfig+0x1b0>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80028f6:	4b35      	ldr	r3, [pc, #212]	; (80029cc <HAL_RCC_OscConfig+0x2a4>)
 80028f8:	685b      	ldr	r3, [r3, #4]
 80028fa:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 80028fe:	687b      	ldr	r3, [r7, #4]
 8002900:	691b      	ldr	r3, [r3, #16]
 8002902:	061b      	lsls	r3, r3, #24
 8002904:	4931      	ldr	r1, [pc, #196]	; (80029cc <HAL_RCC_OscConfig+0x2a4>)
 8002906:	4313      	orrs	r3, r2
 8002908:	604b      	str	r3, [r1, #4]
 800290a:	e018      	b.n	800293e <HAL_RCC_OscConfig+0x216>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800290c:	4b2f      	ldr	r3, [pc, #188]	; (80029cc <HAL_RCC_OscConfig+0x2a4>)
 800290e:	681b      	ldr	r3, [r3, #0]
 8002910:	4a2e      	ldr	r2, [pc, #184]	; (80029cc <HAL_RCC_OscConfig+0x2a4>)
 8002912:	f023 0301 	bic.w	r3, r3, #1
 8002916:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002918:	f7fe fd50 	bl	80013bc <HAL_GetTick>
 800291c:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 800291e:	e008      	b.n	8002932 <HAL_RCC_OscConfig+0x20a>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002920:	f7fe fd4c 	bl	80013bc <HAL_GetTick>
 8002924:	4602      	mov	r2, r0
 8002926:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002928:	1ad3      	subs	r3, r2, r3
 800292a:	2b02      	cmp	r3, #2
 800292c:	d901      	bls.n	8002932 <HAL_RCC_OscConfig+0x20a>
          {
            return HAL_TIMEOUT;
 800292e:	2303      	movs	r3, #3
 8002930:	e27e      	b.n	8002e30 <HAL_RCC_OscConfig+0x708>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8002932:	4b26      	ldr	r3, [pc, #152]	; (80029cc <HAL_RCC_OscConfig+0x2a4>)
 8002934:	681b      	ldr	r3, [r3, #0]
 8002936:	f003 0304 	and.w	r3, r3, #4
 800293a:	2b00      	cmp	r3, #0
 800293c:	d1f0      	bne.n	8002920 <HAL_RCC_OscConfig+0x1f8>
        }
      }
    }
  }
  /*----------------------------- CSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 800293e:	687b      	ldr	r3, [r7, #4]
 8002940:	681b      	ldr	r3, [r3, #0]
 8002942:	f003 0310 	and.w	r3, r3, #16
 8002946:	2b00      	cmp	r3, #0
 8002948:	d06c      	beq.n	8002a24 <HAL_RCC_OscConfig+0x2fc>
    /* Check the parameters */
    assert_param(IS_RCC_CSI(RCC_OscInitStruct->CSIState));
    assert_param(IS_RCC_CSICALIBRATION_VALUE(RCC_OscInitStruct->CSICalibrationValue));

    /* When the CSI is used as system clock it will not disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800294a:	4b20      	ldr	r3, [pc, #128]	; (80029cc <HAL_RCC_OscConfig+0x2a4>)
 800294c:	691b      	ldr	r3, [r3, #16]
 800294e:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8002952:	61bb      	str	r3, [r7, #24]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8002954:	4b1d      	ldr	r3, [pc, #116]	; (80029cc <HAL_RCC_OscConfig+0x2a4>)
 8002956:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002958:	617b      	str	r3, [r7, #20]
    if((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 800295a:	69bb      	ldr	r3, [r7, #24]
 800295c:	2b08      	cmp	r3, #8
 800295e:	d007      	beq.n	8002970 <HAL_RCC_OscConfig+0x248>
 8002960:	69bb      	ldr	r3, [r7, #24]
 8002962:	2b18      	cmp	r3, #24
 8002964:	d11b      	bne.n	800299e <HAL_RCC_OscConfig+0x276>
 8002966:	697b      	ldr	r3, [r7, #20]
 8002968:	f003 0303 	and.w	r3, r3, #3
 800296c:	2b01      	cmp	r3, #1
 800296e:	d116      	bne.n	800299e <HAL_RCC_OscConfig+0x276>
    {
      /* When CSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8002970:	4b16      	ldr	r3, [pc, #88]	; (80029cc <HAL_RCC_OscConfig+0x2a4>)
 8002972:	681b      	ldr	r3, [r3, #0]
 8002974:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002978:	2b00      	cmp	r3, #0
 800297a:	d005      	beq.n	8002988 <HAL_RCC_OscConfig+0x260>
 800297c:	687b      	ldr	r3, [r7, #4]
 800297e:	69db      	ldr	r3, [r3, #28]
 8002980:	2b80      	cmp	r3, #128	; 0x80
 8002982:	d001      	beq.n	8002988 <HAL_RCC_OscConfig+0x260>
      {
        return HAL_ERROR;
 8002984:	2301      	movs	r3, #1
 8002986:	e253      	b.n	8002e30 <HAL_RCC_OscConfig+0x708>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8002988:	4b10      	ldr	r3, [pc, #64]	; (80029cc <HAL_RCC_OscConfig+0x2a4>)
 800298a:	68db      	ldr	r3, [r3, #12]
 800298c:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 8002990:	687b      	ldr	r3, [r7, #4]
 8002992:	6a1b      	ldr	r3, [r3, #32]
 8002994:	061b      	lsls	r3, r3, #24
 8002996:	490d      	ldr	r1, [pc, #52]	; (80029cc <HAL_RCC_OscConfig+0x2a4>)
 8002998:	4313      	orrs	r3, r2
 800299a:	60cb      	str	r3, [r1, #12]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 800299c:	e042      	b.n	8002a24 <HAL_RCC_OscConfig+0x2fc>
      }
    }
    else
    {
      /* Check the CSI State */
      if((RCC_OscInitStruct->CSIState)!= RCC_CSI_OFF)
 800299e:	687b      	ldr	r3, [r7, #4]
 80029a0:	69db      	ldr	r3, [r3, #28]
 80029a2:	2b00      	cmp	r3, #0
 80029a4:	d025      	beq.n	80029f2 <HAL_RCC_OscConfig+0x2ca>
      {
        /* Enable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_ENABLE();
 80029a6:	4b09      	ldr	r3, [pc, #36]	; (80029cc <HAL_RCC_OscConfig+0x2a4>)
 80029a8:	681b      	ldr	r3, [r3, #0]
 80029aa:	4a08      	ldr	r2, [pc, #32]	; (80029cc <HAL_RCC_OscConfig+0x2a4>)
 80029ac:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80029b0:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80029b2:	f7fe fd03 	bl	80013bc <HAL_GetTick>
 80029b6:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 80029b8:	e00a      	b.n	80029d0 <HAL_RCC_OscConfig+0x2a8>
        {
          if((HAL_GetTick() - tickstart ) > CSI_TIMEOUT_VALUE)
 80029ba:	f7fe fcff 	bl	80013bc <HAL_GetTick>
 80029be:	4602      	mov	r2, r0
 80029c0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80029c2:	1ad3      	subs	r3, r2, r3
 80029c4:	2b02      	cmp	r3, #2
 80029c6:	d903      	bls.n	80029d0 <HAL_RCC_OscConfig+0x2a8>
          {
            return HAL_TIMEOUT;
 80029c8:	2303      	movs	r3, #3
 80029ca:	e231      	b.n	8002e30 <HAL_RCC_OscConfig+0x708>
 80029cc:	58024400 	.word	0x58024400
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 80029d0:	4ba3      	ldr	r3, [pc, #652]	; (8002c60 <HAL_RCC_OscConfig+0x538>)
 80029d2:	681b      	ldr	r3, [r3, #0]
 80029d4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80029d8:	2b00      	cmp	r3, #0
 80029da:	d0ee      	beq.n	80029ba <HAL_RCC_OscConfig+0x292>
          }
        }

        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 80029dc:	4ba0      	ldr	r3, [pc, #640]	; (8002c60 <HAL_RCC_OscConfig+0x538>)
 80029de:	68db      	ldr	r3, [r3, #12]
 80029e0:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 80029e4:	687b      	ldr	r3, [r7, #4]
 80029e6:	6a1b      	ldr	r3, [r3, #32]
 80029e8:	061b      	lsls	r3, r3, #24
 80029ea:	499d      	ldr	r1, [pc, #628]	; (8002c60 <HAL_RCC_OscConfig+0x538>)
 80029ec:	4313      	orrs	r3, r2
 80029ee:	60cb      	str	r3, [r1, #12]
 80029f0:	e018      	b.n	8002a24 <HAL_RCC_OscConfig+0x2fc>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_DISABLE();
 80029f2:	4b9b      	ldr	r3, [pc, #620]	; (8002c60 <HAL_RCC_OscConfig+0x538>)
 80029f4:	681b      	ldr	r3, [r3, #0]
 80029f6:	4a9a      	ldr	r2, [pc, #616]	; (8002c60 <HAL_RCC_OscConfig+0x538>)
 80029f8:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80029fc:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80029fe:	f7fe fcdd 	bl	80013bc <HAL_GetTick>
 8002a02:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8002a04:	e008      	b.n	8002a18 <HAL_RCC_OscConfig+0x2f0>
        {
          if((HAL_GetTick() - tickstart ) > CSI_TIMEOUT_VALUE)
 8002a06:	f7fe fcd9 	bl	80013bc <HAL_GetTick>
 8002a0a:	4602      	mov	r2, r0
 8002a0c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002a0e:	1ad3      	subs	r3, r2, r3
 8002a10:	2b02      	cmp	r3, #2
 8002a12:	d901      	bls.n	8002a18 <HAL_RCC_OscConfig+0x2f0>
          {
            return HAL_TIMEOUT;
 8002a14:	2303      	movs	r3, #3
 8002a16:	e20b      	b.n	8002e30 <HAL_RCC_OscConfig+0x708>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8002a18:	4b91      	ldr	r3, [pc, #580]	; (8002c60 <HAL_RCC_OscConfig+0x538>)
 8002a1a:	681b      	ldr	r3, [r3, #0]
 8002a1c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002a20:	2b00      	cmp	r3, #0
 8002a22:	d1f0      	bne.n	8002a06 <HAL_RCC_OscConfig+0x2de>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002a24:	687b      	ldr	r3, [r7, #4]
 8002a26:	681b      	ldr	r3, [r3, #0]
 8002a28:	f003 0308 	and.w	r3, r3, #8
 8002a2c:	2b00      	cmp	r3, #0
 8002a2e:	d036      	beq.n	8002a9e <HAL_RCC_OscConfig+0x376>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8002a30:	687b      	ldr	r3, [r7, #4]
 8002a32:	695b      	ldr	r3, [r3, #20]
 8002a34:	2b00      	cmp	r3, #0
 8002a36:	d019      	beq.n	8002a6c <HAL_RCC_OscConfig+0x344>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002a38:	4b89      	ldr	r3, [pc, #548]	; (8002c60 <HAL_RCC_OscConfig+0x538>)
 8002a3a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002a3c:	4a88      	ldr	r2, [pc, #544]	; (8002c60 <HAL_RCC_OscConfig+0x538>)
 8002a3e:	f043 0301 	orr.w	r3, r3, #1
 8002a42:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002a44:	f7fe fcba 	bl	80013bc <HAL_GetTick>
 8002a48:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8002a4a:	e008      	b.n	8002a5e <HAL_RCC_OscConfig+0x336>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002a4c:	f7fe fcb6 	bl	80013bc <HAL_GetTick>
 8002a50:	4602      	mov	r2, r0
 8002a52:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002a54:	1ad3      	subs	r3, r2, r3
 8002a56:	2b02      	cmp	r3, #2
 8002a58:	d901      	bls.n	8002a5e <HAL_RCC_OscConfig+0x336>
        {
          return HAL_TIMEOUT;
 8002a5a:	2303      	movs	r3, #3
 8002a5c:	e1e8      	b.n	8002e30 <HAL_RCC_OscConfig+0x708>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8002a5e:	4b80      	ldr	r3, [pc, #512]	; (8002c60 <HAL_RCC_OscConfig+0x538>)
 8002a60:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002a62:	f003 0302 	and.w	r3, r3, #2
 8002a66:	2b00      	cmp	r3, #0
 8002a68:	d0f0      	beq.n	8002a4c <HAL_RCC_OscConfig+0x324>
 8002a6a:	e018      	b.n	8002a9e <HAL_RCC_OscConfig+0x376>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002a6c:	4b7c      	ldr	r3, [pc, #496]	; (8002c60 <HAL_RCC_OscConfig+0x538>)
 8002a6e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002a70:	4a7b      	ldr	r2, [pc, #492]	; (8002c60 <HAL_RCC_OscConfig+0x538>)
 8002a72:	f023 0301 	bic.w	r3, r3, #1
 8002a76:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002a78:	f7fe fca0 	bl	80013bc <HAL_GetTick>
 8002a7c:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8002a7e:	e008      	b.n	8002a92 <HAL_RCC_OscConfig+0x36a>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002a80:	f7fe fc9c 	bl	80013bc <HAL_GetTick>
 8002a84:	4602      	mov	r2, r0
 8002a86:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002a88:	1ad3      	subs	r3, r2, r3
 8002a8a:	2b02      	cmp	r3, #2
 8002a8c:	d901      	bls.n	8002a92 <HAL_RCC_OscConfig+0x36a>
        {
          return HAL_TIMEOUT;
 8002a8e:	2303      	movs	r3, #3
 8002a90:	e1ce      	b.n	8002e30 <HAL_RCC_OscConfig+0x708>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8002a92:	4b73      	ldr	r3, [pc, #460]	; (8002c60 <HAL_RCC_OscConfig+0x538>)
 8002a94:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002a96:	f003 0302 	and.w	r3, r3, #2
 8002a9a:	2b00      	cmp	r3, #0
 8002a9c:	d1f0      	bne.n	8002a80 <HAL_RCC_OscConfig+0x358>
      }
    }
  }

  /*------------------------------ HSI48 Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8002a9e:	687b      	ldr	r3, [r7, #4]
 8002aa0:	681b      	ldr	r3, [r3, #0]
 8002aa2:	f003 0320 	and.w	r3, r3, #32
 8002aa6:	2b00      	cmp	r3, #0
 8002aa8:	d036      	beq.n	8002b18 <HAL_RCC_OscConfig+0x3f0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if((RCC_OscInitStruct->HSI48State)!= RCC_HSI48_OFF)
 8002aaa:	687b      	ldr	r3, [r7, #4]
 8002aac:	699b      	ldr	r3, [r3, #24]
 8002aae:	2b00      	cmp	r3, #0
 8002ab0:	d019      	beq.n	8002ae6 <HAL_RCC_OscConfig+0x3be>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8002ab2:	4b6b      	ldr	r3, [pc, #428]	; (8002c60 <HAL_RCC_OscConfig+0x538>)
 8002ab4:	681b      	ldr	r3, [r3, #0]
 8002ab6:	4a6a      	ldr	r2, [pc, #424]	; (8002c60 <HAL_RCC_OscConfig+0x538>)
 8002ab8:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8002abc:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8002abe:	f7fe fc7d 	bl	80013bc <HAL_GetTick>
 8002ac2:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8002ac4:	e008      	b.n	8002ad8 <HAL_RCC_OscConfig+0x3b0>
      {
        if((HAL_GetTick() - tickstart ) > HSI48_TIMEOUT_VALUE)
 8002ac6:	f7fe fc79 	bl	80013bc <HAL_GetTick>
 8002aca:	4602      	mov	r2, r0
 8002acc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002ace:	1ad3      	subs	r3, r2, r3
 8002ad0:	2b02      	cmp	r3, #2
 8002ad2:	d901      	bls.n	8002ad8 <HAL_RCC_OscConfig+0x3b0>
        {
          return HAL_TIMEOUT;
 8002ad4:	2303      	movs	r3, #3
 8002ad6:	e1ab      	b.n	8002e30 <HAL_RCC_OscConfig+0x708>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8002ad8:	4b61      	ldr	r3, [pc, #388]	; (8002c60 <HAL_RCC_OscConfig+0x538>)
 8002ada:	681b      	ldr	r3, [r3, #0]
 8002adc:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8002ae0:	2b00      	cmp	r3, #0
 8002ae2:	d0f0      	beq.n	8002ac6 <HAL_RCC_OscConfig+0x39e>
 8002ae4:	e018      	b.n	8002b18 <HAL_RCC_OscConfig+0x3f0>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8002ae6:	4b5e      	ldr	r3, [pc, #376]	; (8002c60 <HAL_RCC_OscConfig+0x538>)
 8002ae8:	681b      	ldr	r3, [r3, #0]
 8002aea:	4a5d      	ldr	r2, [pc, #372]	; (8002c60 <HAL_RCC_OscConfig+0x538>)
 8002aec:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8002af0:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8002af2:	f7fe fc63 	bl	80013bc <HAL_GetTick>
 8002af6:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8002af8:	e008      	b.n	8002b0c <HAL_RCC_OscConfig+0x3e4>
      {
        if((HAL_GetTick() - tickstart ) > HSI48_TIMEOUT_VALUE)
 8002afa:	f7fe fc5f 	bl	80013bc <HAL_GetTick>
 8002afe:	4602      	mov	r2, r0
 8002b00:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002b02:	1ad3      	subs	r3, r2, r3
 8002b04:	2b02      	cmp	r3, #2
 8002b06:	d901      	bls.n	8002b0c <HAL_RCC_OscConfig+0x3e4>
        {
          return HAL_TIMEOUT;
 8002b08:	2303      	movs	r3, #3
 8002b0a:	e191      	b.n	8002e30 <HAL_RCC_OscConfig+0x708>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8002b0c:	4b54      	ldr	r3, [pc, #336]	; (8002c60 <HAL_RCC_OscConfig+0x538>)
 8002b0e:	681b      	ldr	r3, [r3, #0]
 8002b10:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8002b14:	2b00      	cmp	r3, #0
 8002b16:	d1f0      	bne.n	8002afa <HAL_RCC_OscConfig+0x3d2>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002b18:	687b      	ldr	r3, [r7, #4]
 8002b1a:	681b      	ldr	r3, [r3, #0]
 8002b1c:	f003 0304 	and.w	r3, r3, #4
 8002b20:	2b00      	cmp	r3, #0
 8002b22:	f000 8081 	beq.w	8002c28 <HAL_RCC_OscConfig+0x500>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8002b26:	4b4f      	ldr	r3, [pc, #316]	; (8002c64 <HAL_RCC_OscConfig+0x53c>)
 8002b28:	681b      	ldr	r3, [r3, #0]
 8002b2a:	4a4e      	ldr	r2, [pc, #312]	; (8002c64 <HAL_RCC_OscConfig+0x53c>)
 8002b2c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002b30:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8002b32:	f7fe fc43 	bl	80013bc <HAL_GetTick>
 8002b36:	6278      	str	r0, [r7, #36]	; 0x24

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8002b38:	e008      	b.n	8002b4c <HAL_RCC_OscConfig+0x424>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 8002b3a:	f7fe fc3f 	bl	80013bc <HAL_GetTick>
 8002b3e:	4602      	mov	r2, r0
 8002b40:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002b42:	1ad3      	subs	r3, r2, r3
 8002b44:	2b64      	cmp	r3, #100	; 0x64
 8002b46:	d901      	bls.n	8002b4c <HAL_RCC_OscConfig+0x424>
      {
        return HAL_TIMEOUT;
 8002b48:	2303      	movs	r3, #3
 8002b4a:	e171      	b.n	8002e30 <HAL_RCC_OscConfig+0x708>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8002b4c:	4b45      	ldr	r3, [pc, #276]	; (8002c64 <HAL_RCC_OscConfig+0x53c>)
 8002b4e:	681b      	ldr	r3, [r3, #0]
 8002b50:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002b54:	2b00      	cmp	r3, #0
 8002b56:	d0f0      	beq.n	8002b3a <HAL_RCC_OscConfig+0x412>
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002b58:	687b      	ldr	r3, [r7, #4]
 8002b5a:	689b      	ldr	r3, [r3, #8]
 8002b5c:	2b01      	cmp	r3, #1
 8002b5e:	d106      	bne.n	8002b6e <HAL_RCC_OscConfig+0x446>
 8002b60:	4b3f      	ldr	r3, [pc, #252]	; (8002c60 <HAL_RCC_OscConfig+0x538>)
 8002b62:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002b64:	4a3e      	ldr	r2, [pc, #248]	; (8002c60 <HAL_RCC_OscConfig+0x538>)
 8002b66:	f043 0301 	orr.w	r3, r3, #1
 8002b6a:	6713      	str	r3, [r2, #112]	; 0x70
 8002b6c:	e02d      	b.n	8002bca <HAL_RCC_OscConfig+0x4a2>
 8002b6e:	687b      	ldr	r3, [r7, #4]
 8002b70:	689b      	ldr	r3, [r3, #8]
 8002b72:	2b00      	cmp	r3, #0
 8002b74:	d10c      	bne.n	8002b90 <HAL_RCC_OscConfig+0x468>
 8002b76:	4b3a      	ldr	r3, [pc, #232]	; (8002c60 <HAL_RCC_OscConfig+0x538>)
 8002b78:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002b7a:	4a39      	ldr	r2, [pc, #228]	; (8002c60 <HAL_RCC_OscConfig+0x538>)
 8002b7c:	f023 0301 	bic.w	r3, r3, #1
 8002b80:	6713      	str	r3, [r2, #112]	; 0x70
 8002b82:	4b37      	ldr	r3, [pc, #220]	; (8002c60 <HAL_RCC_OscConfig+0x538>)
 8002b84:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002b86:	4a36      	ldr	r2, [pc, #216]	; (8002c60 <HAL_RCC_OscConfig+0x538>)
 8002b88:	f023 0304 	bic.w	r3, r3, #4
 8002b8c:	6713      	str	r3, [r2, #112]	; 0x70
 8002b8e:	e01c      	b.n	8002bca <HAL_RCC_OscConfig+0x4a2>
 8002b90:	687b      	ldr	r3, [r7, #4]
 8002b92:	689b      	ldr	r3, [r3, #8]
 8002b94:	2b05      	cmp	r3, #5
 8002b96:	d10c      	bne.n	8002bb2 <HAL_RCC_OscConfig+0x48a>
 8002b98:	4b31      	ldr	r3, [pc, #196]	; (8002c60 <HAL_RCC_OscConfig+0x538>)
 8002b9a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002b9c:	4a30      	ldr	r2, [pc, #192]	; (8002c60 <HAL_RCC_OscConfig+0x538>)
 8002b9e:	f043 0304 	orr.w	r3, r3, #4
 8002ba2:	6713      	str	r3, [r2, #112]	; 0x70
 8002ba4:	4b2e      	ldr	r3, [pc, #184]	; (8002c60 <HAL_RCC_OscConfig+0x538>)
 8002ba6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002ba8:	4a2d      	ldr	r2, [pc, #180]	; (8002c60 <HAL_RCC_OscConfig+0x538>)
 8002baa:	f043 0301 	orr.w	r3, r3, #1
 8002bae:	6713      	str	r3, [r2, #112]	; 0x70
 8002bb0:	e00b      	b.n	8002bca <HAL_RCC_OscConfig+0x4a2>
 8002bb2:	4b2b      	ldr	r3, [pc, #172]	; (8002c60 <HAL_RCC_OscConfig+0x538>)
 8002bb4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002bb6:	4a2a      	ldr	r2, [pc, #168]	; (8002c60 <HAL_RCC_OscConfig+0x538>)
 8002bb8:	f023 0301 	bic.w	r3, r3, #1
 8002bbc:	6713      	str	r3, [r2, #112]	; 0x70
 8002bbe:	4b28      	ldr	r3, [pc, #160]	; (8002c60 <HAL_RCC_OscConfig+0x538>)
 8002bc0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002bc2:	4a27      	ldr	r2, [pc, #156]	; (8002c60 <HAL_RCC_OscConfig+0x538>)
 8002bc4:	f023 0304 	bic.w	r3, r3, #4
 8002bc8:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8002bca:	687b      	ldr	r3, [r7, #4]
 8002bcc:	689b      	ldr	r3, [r3, #8]
 8002bce:	2b00      	cmp	r3, #0
 8002bd0:	d015      	beq.n	8002bfe <HAL_RCC_OscConfig+0x4d6>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002bd2:	f7fe fbf3 	bl	80013bc <HAL_GetTick>
 8002bd6:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8002bd8:	e00a      	b.n	8002bf0 <HAL_RCC_OscConfig+0x4c8>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002bda:	f7fe fbef 	bl	80013bc <HAL_GetTick>
 8002bde:	4602      	mov	r2, r0
 8002be0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002be2:	1ad3      	subs	r3, r2, r3
 8002be4:	f241 3288 	movw	r2, #5000	; 0x1388
 8002be8:	4293      	cmp	r3, r2
 8002bea:	d901      	bls.n	8002bf0 <HAL_RCC_OscConfig+0x4c8>
        {
          return HAL_TIMEOUT;
 8002bec:	2303      	movs	r3, #3
 8002bee:	e11f      	b.n	8002e30 <HAL_RCC_OscConfig+0x708>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8002bf0:	4b1b      	ldr	r3, [pc, #108]	; (8002c60 <HAL_RCC_OscConfig+0x538>)
 8002bf2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002bf4:	f003 0302 	and.w	r3, r3, #2
 8002bf8:	2b00      	cmp	r3, #0
 8002bfa:	d0ee      	beq.n	8002bda <HAL_RCC_OscConfig+0x4b2>
 8002bfc:	e014      	b.n	8002c28 <HAL_RCC_OscConfig+0x500>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002bfe:	f7fe fbdd 	bl	80013bc <HAL_GetTick>
 8002c02:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is disabled */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8002c04:	e00a      	b.n	8002c1c <HAL_RCC_OscConfig+0x4f4>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002c06:	f7fe fbd9 	bl	80013bc <HAL_GetTick>
 8002c0a:	4602      	mov	r2, r0
 8002c0c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002c0e:	1ad3      	subs	r3, r2, r3
 8002c10:	f241 3288 	movw	r2, #5000	; 0x1388
 8002c14:	4293      	cmp	r3, r2
 8002c16:	d901      	bls.n	8002c1c <HAL_RCC_OscConfig+0x4f4>
        {
          return HAL_TIMEOUT;
 8002c18:	2303      	movs	r3, #3
 8002c1a:	e109      	b.n	8002e30 <HAL_RCC_OscConfig+0x708>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8002c1c:	4b10      	ldr	r3, [pc, #64]	; (8002c60 <HAL_RCC_OscConfig+0x538>)
 8002c1e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002c20:	f003 0302 	and.w	r3, r3, #2
 8002c24:	2b00      	cmp	r3, #0
 8002c26:	d1ee      	bne.n	8002c06 <HAL_RCC_OscConfig+0x4de>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002c28:	687b      	ldr	r3, [r7, #4]
 8002c2a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002c2c:	2b00      	cmp	r3, #0
 8002c2e:	f000 80fe 	beq.w	8002e2e <HAL_RCC_OscConfig+0x706>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL1)
 8002c32:	4b0b      	ldr	r3, [pc, #44]	; (8002c60 <HAL_RCC_OscConfig+0x538>)
 8002c34:	691b      	ldr	r3, [r3, #16]
 8002c36:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8002c3a:	2b18      	cmp	r3, #24
 8002c3c:	f000 80b9 	beq.w	8002db2 <HAL_RCC_OscConfig+0x68a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002c40:	687b      	ldr	r3, [r7, #4]
 8002c42:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002c44:	2b02      	cmp	r3, #2
 8002c46:	f040 809a 	bne.w	8002d7e <HAL_RCC_OscConfig+0x656>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
        assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002c4a:	4b05      	ldr	r3, [pc, #20]	; (8002c60 <HAL_RCC_OscConfig+0x538>)
 8002c4c:	681b      	ldr	r3, [r3, #0]
 8002c4e:	4a04      	ldr	r2, [pc, #16]	; (8002c60 <HAL_RCC_OscConfig+0x538>)
 8002c50:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8002c54:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002c56:	f7fe fbb1 	bl	80013bc <HAL_GetTick>
 8002c5a:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8002c5c:	e00d      	b.n	8002c7a <HAL_RCC_OscConfig+0x552>
 8002c5e:	bf00      	nop
 8002c60:	58024400 	.word	0x58024400
 8002c64:	58024800 	.word	0x58024800
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002c68:	f7fe fba8 	bl	80013bc <HAL_GetTick>
 8002c6c:	4602      	mov	r2, r0
 8002c6e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002c70:	1ad3      	subs	r3, r2, r3
 8002c72:	2b02      	cmp	r3, #2
 8002c74:	d901      	bls.n	8002c7a <HAL_RCC_OscConfig+0x552>
          {
            return HAL_TIMEOUT;
 8002c76:	2303      	movs	r3, #3
 8002c78:	e0da      	b.n	8002e30 <HAL_RCC_OscConfig+0x708>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8002c7a:	4b6f      	ldr	r3, [pc, #444]	; (8002e38 <HAL_RCC_OscConfig+0x710>)
 8002c7c:	681b      	ldr	r3, [r3, #0]
 8002c7e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002c82:	2b00      	cmp	r3, #0
 8002c84:	d1f0      	bne.n	8002c68 <HAL_RCC_OscConfig+0x540>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002c86:	4b6c      	ldr	r3, [pc, #432]	; (8002e38 <HAL_RCC_OscConfig+0x710>)
 8002c88:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8002c8a:	4b6c      	ldr	r3, [pc, #432]	; (8002e3c <HAL_RCC_OscConfig+0x714>)
 8002c8c:	4013      	ands	r3, r2
 8002c8e:	687a      	ldr	r2, [r7, #4]
 8002c90:	6a91      	ldr	r1, [r2, #40]	; 0x28
 8002c92:	687a      	ldr	r2, [r7, #4]
 8002c94:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 8002c96:	0112      	lsls	r2, r2, #4
 8002c98:	430a      	orrs	r2, r1
 8002c9a:	4967      	ldr	r1, [pc, #412]	; (8002e38 <HAL_RCC_OscConfig+0x710>)
 8002c9c:	4313      	orrs	r3, r2
 8002c9e:	628b      	str	r3, [r1, #40]	; 0x28
 8002ca0:	687b      	ldr	r3, [r7, #4]
 8002ca2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002ca4:	3b01      	subs	r3, #1
 8002ca6:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8002caa:	687b      	ldr	r3, [r7, #4]
 8002cac:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002cae:	3b01      	subs	r3, #1
 8002cb0:	025b      	lsls	r3, r3, #9
 8002cb2:	b29b      	uxth	r3, r3
 8002cb4:	431a      	orrs	r2, r3
 8002cb6:	687b      	ldr	r3, [r7, #4]
 8002cb8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002cba:	3b01      	subs	r3, #1
 8002cbc:	041b      	lsls	r3, r3, #16
 8002cbe:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 8002cc2:	431a      	orrs	r2, r3
 8002cc4:	687b      	ldr	r3, [r7, #4]
 8002cc6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002cc8:	3b01      	subs	r3, #1
 8002cca:	061b      	lsls	r3, r3, #24
 8002ccc:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 8002cd0:	4959      	ldr	r1, [pc, #356]	; (8002e38 <HAL_RCC_OscConfig+0x710>)
 8002cd2:	4313      	orrs	r3, r2
 8002cd4:	630b      	str	r3, [r1, #48]	; 0x30
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

         /* Disable PLLFRACN . */
         __HAL_RCC_PLLFRACN_DISABLE();
 8002cd6:	4b58      	ldr	r3, [pc, #352]	; (8002e38 <HAL_RCC_OscConfig+0x710>)
 8002cd8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002cda:	4a57      	ldr	r2, [pc, #348]	; (8002e38 <HAL_RCC_OscConfig+0x710>)
 8002cdc:	f023 0301 	bic.w	r3, r3, #1
 8002ce0:	62d3      	str	r3, [r2, #44]	; 0x2c

         /* Configure PLL PLL1FRACN */
         __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 8002ce2:	4b55      	ldr	r3, [pc, #340]	; (8002e38 <HAL_RCC_OscConfig+0x710>)
 8002ce4:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002ce6:	4b56      	ldr	r3, [pc, #344]	; (8002e40 <HAL_RCC_OscConfig+0x718>)
 8002ce8:	4013      	ands	r3, r2
 8002cea:	687a      	ldr	r2, [r7, #4]
 8002cec:	6c92      	ldr	r2, [r2, #72]	; 0x48
 8002cee:	00d2      	lsls	r2, r2, #3
 8002cf0:	4951      	ldr	r1, [pc, #324]	; (8002e38 <HAL_RCC_OscConfig+0x710>)
 8002cf2:	4313      	orrs	r3, r2
 8002cf4:	634b      	str	r3, [r1, #52]	; 0x34

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL_VCIRANGE(RCC_OscInitStruct->PLL.PLLRGE) ;
 8002cf6:	4b50      	ldr	r3, [pc, #320]	; (8002e38 <HAL_RCC_OscConfig+0x710>)
 8002cf8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002cfa:	f023 020c 	bic.w	r2, r3, #12
 8002cfe:	687b      	ldr	r3, [r7, #4]
 8002d00:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002d02:	494d      	ldr	r1, [pc, #308]	; (8002e38 <HAL_RCC_OscConfig+0x710>)
 8002d04:	4313      	orrs	r3, r2
 8002d06:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Select PLL1 output frequency range : VCO */
        __HAL_RCC_PLL_VCORANGE(RCC_OscInitStruct->PLL.PLLVCOSEL) ;
 8002d08:	4b4b      	ldr	r3, [pc, #300]	; (8002e38 <HAL_RCC_OscConfig+0x710>)
 8002d0a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002d0c:	f023 0202 	bic.w	r2, r3, #2
 8002d10:	687b      	ldr	r3, [r7, #4]
 8002d12:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002d14:	4948      	ldr	r1, [pc, #288]	; (8002e38 <HAL_RCC_OscConfig+0x710>)
 8002d16:	4313      	orrs	r3, r2
 8002d18:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 8002d1a:	4b47      	ldr	r3, [pc, #284]	; (8002e38 <HAL_RCC_OscConfig+0x710>)
 8002d1c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002d1e:	4a46      	ldr	r2, [pc, #280]	; (8002e38 <HAL_RCC_OscConfig+0x710>)
 8002d20:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002d24:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1Q Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8002d26:	4b44      	ldr	r3, [pc, #272]	; (8002e38 <HAL_RCC_OscConfig+0x710>)
 8002d28:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002d2a:	4a43      	ldr	r2, [pc, #268]	; (8002e38 <HAL_RCC_OscConfig+0x710>)
 8002d2c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002d30:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1R  Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 8002d32:	4b41      	ldr	r3, [pc, #260]	; (8002e38 <HAL_RCC_OscConfig+0x710>)
 8002d34:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002d36:	4a40      	ldr	r2, [pc, #256]	; (8002e38 <HAL_RCC_OscConfig+0x710>)
 8002d38:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002d3c:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1FRACN . */
         __HAL_RCC_PLLFRACN_ENABLE();
 8002d3e:	4b3e      	ldr	r3, [pc, #248]	; (8002e38 <HAL_RCC_OscConfig+0x710>)
 8002d40:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002d42:	4a3d      	ldr	r2, [pc, #244]	; (8002e38 <HAL_RCC_OscConfig+0x710>)
 8002d44:	f043 0301 	orr.w	r3, r3, #1
 8002d48:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002d4a:	4b3b      	ldr	r3, [pc, #236]	; (8002e38 <HAL_RCC_OscConfig+0x710>)
 8002d4c:	681b      	ldr	r3, [r3, #0]
 8002d4e:	4a3a      	ldr	r2, [pc, #232]	; (8002e38 <HAL_RCC_OscConfig+0x710>)
 8002d50:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002d54:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002d56:	f7fe fb31 	bl	80013bc <HAL_GetTick>
 8002d5a:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8002d5c:	e008      	b.n	8002d70 <HAL_RCC_OscConfig+0x648>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002d5e:	f7fe fb2d 	bl	80013bc <HAL_GetTick>
 8002d62:	4602      	mov	r2, r0
 8002d64:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002d66:	1ad3      	subs	r3, r2, r3
 8002d68:	2b02      	cmp	r3, #2
 8002d6a:	d901      	bls.n	8002d70 <HAL_RCC_OscConfig+0x648>
          {
            return HAL_TIMEOUT;
 8002d6c:	2303      	movs	r3, #3
 8002d6e:	e05f      	b.n	8002e30 <HAL_RCC_OscConfig+0x708>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8002d70:	4b31      	ldr	r3, [pc, #196]	; (8002e38 <HAL_RCC_OscConfig+0x710>)
 8002d72:	681b      	ldr	r3, [r3, #0]
 8002d74:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002d78:	2b00      	cmp	r3, #0
 8002d7a:	d0f0      	beq.n	8002d5e <HAL_RCC_OscConfig+0x636>
 8002d7c:	e057      	b.n	8002e2e <HAL_RCC_OscConfig+0x706>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002d7e:	4b2e      	ldr	r3, [pc, #184]	; (8002e38 <HAL_RCC_OscConfig+0x710>)
 8002d80:	681b      	ldr	r3, [r3, #0]
 8002d82:	4a2d      	ldr	r2, [pc, #180]	; (8002e38 <HAL_RCC_OscConfig+0x710>)
 8002d84:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8002d88:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002d8a:	f7fe fb17 	bl	80013bc <HAL_GetTick>
 8002d8e:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8002d90:	e008      	b.n	8002da4 <HAL_RCC_OscConfig+0x67c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002d92:	f7fe fb13 	bl	80013bc <HAL_GetTick>
 8002d96:	4602      	mov	r2, r0
 8002d98:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002d9a:	1ad3      	subs	r3, r2, r3
 8002d9c:	2b02      	cmp	r3, #2
 8002d9e:	d901      	bls.n	8002da4 <HAL_RCC_OscConfig+0x67c>
          {
            return HAL_TIMEOUT;
 8002da0:	2303      	movs	r3, #3
 8002da2:	e045      	b.n	8002e30 <HAL_RCC_OscConfig+0x708>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8002da4:	4b24      	ldr	r3, [pc, #144]	; (8002e38 <HAL_RCC_OscConfig+0x710>)
 8002da6:	681b      	ldr	r3, [r3, #0]
 8002da8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002dac:	2b00      	cmp	r3, #0
 8002dae:	d1f0      	bne.n	8002d92 <HAL_RCC_OscConfig+0x66a>
 8002db0:	e03d      	b.n	8002e2e <HAL_RCC_OscConfig+0x706>
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLLCKSELR;
 8002db2:	4b21      	ldr	r3, [pc, #132]	; (8002e38 <HAL_RCC_OscConfig+0x710>)
 8002db4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002db6:	613b      	str	r3, [r7, #16]
      temp2_pllckcfg = RCC->PLL1DIVR;
 8002db8:	4b1f      	ldr	r3, [pc, #124]	; (8002e38 <HAL_RCC_OscConfig+0x710>)
 8002dba:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002dbc:	60fb      	str	r3, [r7, #12]
      if(((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002dbe:	687b      	ldr	r3, [r7, #4]
 8002dc0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002dc2:	2b01      	cmp	r3, #1
 8002dc4:	d031      	beq.n	8002e2a <HAL_RCC_OscConfig+0x702>
	 (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002dc6:	693b      	ldr	r3, [r7, #16]
 8002dc8:	f003 0203 	and.w	r2, r3, #3
 8002dcc:	687b      	ldr	r3, [r7, #4]
 8002dce:	6a9b      	ldr	r3, [r3, #40]	; 0x28
      if(((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002dd0:	429a      	cmp	r2, r3
 8002dd2:	d12a      	bne.n	8002e2a <HAL_RCC_OscConfig+0x702>
         ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8002dd4:	693b      	ldr	r3, [r7, #16]
 8002dd6:	091b      	lsrs	r3, r3, #4
 8002dd8:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8002ddc:	687b      	ldr	r3, [r7, #4]
 8002dde:	6adb      	ldr	r3, [r3, #44]	; 0x2c
	 (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002de0:	429a      	cmp	r2, r3
 8002de2:	d122      	bne.n	8002e2a <HAL_RCC_OscConfig+0x702>
         (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8002de4:	68fb      	ldr	r3, [r7, #12]
 8002de6:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8002dea:	687b      	ldr	r3, [r7, #4]
 8002dec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002dee:	3b01      	subs	r3, #1
         ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8002df0:	429a      	cmp	r2, r3
 8002df2:	d11a      	bne.n	8002e2a <HAL_RCC_OscConfig+0x702>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8002df4:	68fb      	ldr	r3, [r7, #12]
 8002df6:	0a5b      	lsrs	r3, r3, #9
 8002df8:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8002dfc:	687b      	ldr	r3, [r7, #4]
 8002dfe:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002e00:	3b01      	subs	r3, #1
         (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8002e02:	429a      	cmp	r2, r3
 8002e04:	d111      	bne.n	8002e2a <HAL_RCC_OscConfig+0x702>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8002e06:	68fb      	ldr	r3, [r7, #12]
 8002e08:	0c1b      	lsrs	r3, r3, #16
 8002e0a:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8002e0e:	687b      	ldr	r3, [r7, #4]
 8002e10:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002e12:	3b01      	subs	r3, #1
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8002e14:	429a      	cmp	r2, r3
 8002e16:	d108      	bne.n	8002e2a <HAL_RCC_OscConfig+0x702>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_R1) >> RCC_PLL1DIVR_R1_Pos) != (RCC_OscInitStruct->PLL.PLLR - 1U)))
 8002e18:	68fb      	ldr	r3, [r7, #12]
 8002e1a:	0e1b      	lsrs	r3, r3, #24
 8002e1c:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8002e20:	687b      	ldr	r3, [r7, #4]
 8002e22:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002e24:	3b01      	subs	r3, #1
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8002e26:	429a      	cmp	r2, r3
 8002e28:	d001      	beq.n	8002e2e <HAL_RCC_OscConfig+0x706>
      {
        return HAL_ERROR;
 8002e2a:	2301      	movs	r3, #1
 8002e2c:	e000      	b.n	8002e30 <HAL_RCC_OscConfig+0x708>
      }
    }
  }
  return HAL_OK;
 8002e2e:	2300      	movs	r3, #0
}
 8002e30:	4618      	mov	r0, r3
 8002e32:	3730      	adds	r7, #48	; 0x30
 8002e34:	46bd      	mov	sp, r7
 8002e36:	bd80      	pop	{r7, pc}
 8002e38:	58024400 	.word	0x58024400
 8002e3c:	fffffc0c 	.word	0xfffffc0c
 8002e40:	ffff0007 	.word	0xffff0007

08002e44 <HAL_RCC_ClockConfig>:
  *         D1CPRE[3:0] bits to ensure that  Domain1 core clock not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002e44:	b580      	push	{r7, lr}
 8002e46:	b086      	sub	sp, #24
 8002e48:	af00      	add	r7, sp, #0
 8002e4a:	6078      	str	r0, [r7, #4]
 8002e4c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef halstatus;
  uint32_t tickstart;
  uint32_t common_system_clock;

   /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8002e4e:	687b      	ldr	r3, [r7, #4]
 8002e50:	2b00      	cmp	r3, #0
 8002e52:	d101      	bne.n	8002e58 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002e54:	2301      	movs	r3, #1
 8002e56:	e19c      	b.n	8003192 <HAL_RCC_ClockConfig+0x34e>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8002e58:	4b8a      	ldr	r3, [pc, #552]	; (8003084 <HAL_RCC_ClockConfig+0x240>)
 8002e5a:	681b      	ldr	r3, [r3, #0]
 8002e5c:	f003 030f 	and.w	r3, r3, #15
 8002e60:	683a      	ldr	r2, [r7, #0]
 8002e62:	429a      	cmp	r2, r3
 8002e64:	d910      	bls.n	8002e88 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002e66:	4b87      	ldr	r3, [pc, #540]	; (8003084 <HAL_RCC_ClockConfig+0x240>)
 8002e68:	681b      	ldr	r3, [r3, #0]
 8002e6a:	f023 020f 	bic.w	r2, r3, #15
 8002e6e:	4985      	ldr	r1, [pc, #532]	; (8003084 <HAL_RCC_ClockConfig+0x240>)
 8002e70:	683b      	ldr	r3, [r7, #0]
 8002e72:	4313      	orrs	r3, r2
 8002e74:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002e76:	4b83      	ldr	r3, [pc, #524]	; (8003084 <HAL_RCC_ClockConfig+0x240>)
 8002e78:	681b      	ldr	r3, [r3, #0]
 8002e7a:	f003 030f 	and.w	r3, r3, #15
 8002e7e:	683a      	ldr	r2, [r7, #0]
 8002e80:	429a      	cmp	r2, r3
 8002e82:	d001      	beq.n	8002e88 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8002e84:	2301      	movs	r3, #1
 8002e86:	e184      	b.n	8003192 <HAL_RCC_ClockConfig+0x34e>

  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- D1PCLK1/CDPCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8002e88:	687b      	ldr	r3, [r7, #4]
 8002e8a:	681b      	ldr	r3, [r3, #0]
 8002e8c:	f003 0304 	and.w	r3, r3, #4
 8002e90:	2b00      	cmp	r3, #0
 8002e92:	d010      	beq.n	8002eb6 <HAL_RCC_ClockConfig+0x72>
  {
#if defined (RCC_D1CFGR_D1PPRE)
    if((RCC_ClkInitStruct->APB3CLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8002e94:	687b      	ldr	r3, [r7, #4]
 8002e96:	691a      	ldr	r2, [r3, #16]
 8002e98:	4b7b      	ldr	r3, [pc, #492]	; (8003088 <HAL_RCC_ClockConfig+0x244>)
 8002e9a:	699b      	ldr	r3, [r3, #24]
 8002e9c:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8002ea0:	429a      	cmp	r2, r3
 8002ea2:	d908      	bls.n	8002eb6 <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8002ea4:	4b78      	ldr	r3, [pc, #480]	; (8003088 <HAL_RCC_ClockConfig+0x244>)
 8002ea6:	699b      	ldr	r3, [r3, #24]
 8002ea8:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8002eac:	687b      	ldr	r3, [r7, #4]
 8002eae:	691b      	ldr	r3, [r3, #16]
 8002eb0:	4975      	ldr	r1, [pc, #468]	; (8003088 <HAL_RCC_ClockConfig+0x244>)
 8002eb2:	4313      	orrs	r3, r2
 8002eb4:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002eb6:	687b      	ldr	r3, [r7, #4]
 8002eb8:	681b      	ldr	r3, [r3, #0]
 8002eba:	f003 0308 	and.w	r3, r3, #8
 8002ebe:	2b00      	cmp	r3, #0
 8002ec0:	d010      	beq.n	8002ee4 <HAL_RCC_ClockConfig+0xa0>
  {
#if defined (RCC_D2CFGR_D2PPRE1)
    if((RCC_ClkInitStruct->APB1CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 8002ec2:	687b      	ldr	r3, [r7, #4]
 8002ec4:	695a      	ldr	r2, [r3, #20]
 8002ec6:	4b70      	ldr	r3, [pc, #448]	; (8003088 <HAL_RCC_ClockConfig+0x244>)
 8002ec8:	69db      	ldr	r3, [r3, #28]
 8002eca:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8002ece:	429a      	cmp	r2, r3
 8002ed0:	d908      	bls.n	8002ee4 <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 8002ed2:	4b6d      	ldr	r3, [pc, #436]	; (8003088 <HAL_RCC_ClockConfig+0x244>)
 8002ed4:	69db      	ldr	r3, [r3, #28]
 8002ed6:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8002eda:	687b      	ldr	r3, [r7, #4]
 8002edc:	695b      	ldr	r3, [r3, #20]
 8002ede:	496a      	ldr	r1, [pc, #424]	; (8003088 <HAL_RCC_ClockConfig+0x244>)
 8002ee0:	4313      	orrs	r3, r2
 8002ee2:	61cb      	str	r3, [r1, #28]
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
  }
#endif
    }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002ee4:	687b      	ldr	r3, [r7, #4]
 8002ee6:	681b      	ldr	r3, [r3, #0]
 8002ee8:	f003 0310 	and.w	r3, r3, #16
 8002eec:	2b00      	cmp	r3, #0
 8002eee:	d010      	beq.n	8002f12 <HAL_RCC_ClockConfig+0xce>
  {
#if defined(RCC_D2CFGR_D2PPRE2)
    if((RCC_ClkInitStruct->APB2CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8002ef0:	687b      	ldr	r3, [r7, #4]
 8002ef2:	699a      	ldr	r2, [r3, #24]
 8002ef4:	4b64      	ldr	r3, [pc, #400]	; (8003088 <HAL_RCC_ClockConfig+0x244>)
 8002ef6:	69db      	ldr	r3, [r3, #28]
 8002ef8:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8002efc:	429a      	cmp	r2, r3
 8002efe:	d908      	bls.n	8002f12 <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8002f00:	4b61      	ldr	r3, [pc, #388]	; (8003088 <HAL_RCC_ClockConfig+0x244>)
 8002f02:	69db      	ldr	r3, [r3, #28]
 8002f04:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8002f08:	687b      	ldr	r3, [r7, #4]
 8002f0a:	699b      	ldr	r3, [r3, #24]
 8002f0c:	495e      	ldr	r1, [pc, #376]	; (8003088 <HAL_RCC_ClockConfig+0x244>)
 8002f0e:	4313      	orrs	r3, r2
 8002f10:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 8002f12:	687b      	ldr	r3, [r7, #4]
 8002f14:	681b      	ldr	r3, [r3, #0]
 8002f16:	f003 0320 	and.w	r3, r3, #32
 8002f1a:	2b00      	cmp	r3, #0
 8002f1c:	d010      	beq.n	8002f40 <HAL_RCC_ClockConfig+0xfc>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if((RCC_ClkInitStruct->APB4CLKDivider) > (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 8002f1e:	687b      	ldr	r3, [r7, #4]
 8002f20:	69da      	ldr	r2, [r3, #28]
 8002f22:	4b59      	ldr	r3, [pc, #356]	; (8003088 <HAL_RCC_ClockConfig+0x244>)
 8002f24:	6a1b      	ldr	r3, [r3, #32]
 8002f26:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8002f2a:	429a      	cmp	r2, r3
 8002f2c:	d908      	bls.n	8002f40 <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider) );
 8002f2e:	4b56      	ldr	r3, [pc, #344]	; (8003088 <HAL_RCC_ClockConfig+0x244>)
 8002f30:	6a1b      	ldr	r3, [r3, #32]
 8002f32:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8002f36:	687b      	ldr	r3, [r7, #4]
 8002f38:	69db      	ldr	r3, [r3, #28]
 8002f3a:	4953      	ldr	r1, [pc, #332]	; (8003088 <HAL_RCC_ClockConfig+0x244>)
 8002f3c:	4313      	orrs	r3, r2
 8002f3e:	620b      	str	r3, [r1, #32]
    }
#endif
  }

   /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002f40:	687b      	ldr	r3, [r7, #4]
 8002f42:	681b      	ldr	r3, [r3, #0]
 8002f44:	f003 0302 	and.w	r3, r3, #2
 8002f48:	2b00      	cmp	r3, #0
 8002f4a:	d010      	beq.n	8002f6e <HAL_RCC_ClockConfig+0x12a>
  {
#if defined (RCC_D1CFGR_HPRE)
    if((RCC_ClkInitStruct->AHBCLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 8002f4c:	687b      	ldr	r3, [r7, #4]
 8002f4e:	68da      	ldr	r2, [r3, #12]
 8002f50:	4b4d      	ldr	r3, [pc, #308]	; (8003088 <HAL_RCC_ClockConfig+0x244>)
 8002f52:	699b      	ldr	r3, [r3, #24]
 8002f54:	f003 030f 	and.w	r3, r3, #15
 8002f58:	429a      	cmp	r2, r3
 8002f5a:	d908      	bls.n	8002f6e <HAL_RCC_ClockConfig+0x12a>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002f5c:	4b4a      	ldr	r3, [pc, #296]	; (8003088 <HAL_RCC_ClockConfig+0x244>)
 8002f5e:	699b      	ldr	r3, [r3, #24]
 8002f60:	f023 020f 	bic.w	r2, r3, #15
 8002f64:	687b      	ldr	r3, [r7, #4]
 8002f66:	68db      	ldr	r3, [r3, #12]
 8002f68:	4947      	ldr	r1, [pc, #284]	; (8003088 <HAL_RCC_ClockConfig+0x244>)
 8002f6a:	4313      	orrs	r3, r2
 8002f6c:	618b      	str	r3, [r1, #24]
    }
#endif
  }

    /*------------------------- SYSCLK Configuration -------------------------*/
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002f6e:	687b      	ldr	r3, [r7, #4]
 8002f70:	681b      	ldr	r3, [r3, #0]
 8002f72:	f003 0301 	and.w	r3, r3, #1
 8002f76:	2b00      	cmp	r3, #0
 8002f78:	d055      	beq.n	8003026 <HAL_RCC_ClockConfig+0x1e2>
    {
      assert_param(IS_RCC_SYSCLK(RCC_ClkInitStruct->SYSCLKDivider));
      assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
#if defined(RCC_D1CFGR_D1CPRE)
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1CPRE, RCC_ClkInitStruct->SYSCLKDivider);
 8002f7a:	4b43      	ldr	r3, [pc, #268]	; (8003088 <HAL_RCC_ClockConfig+0x244>)
 8002f7c:	699b      	ldr	r3, [r3, #24]
 8002f7e:	f423 6270 	bic.w	r2, r3, #3840	; 0xf00
 8002f82:	687b      	ldr	r3, [r7, #4]
 8002f84:	689b      	ldr	r3, [r3, #8]
 8002f86:	4940      	ldr	r1, [pc, #256]	; (8003088 <HAL_RCC_ClockConfig+0x244>)
 8002f88:	4313      	orrs	r3, r2
 8002f8a:	618b      	str	r3, [r1, #24]
#else
      MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDCPRE, RCC_ClkInitStruct->SYSCLKDivider);
#endif
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002f8c:	687b      	ldr	r3, [r7, #4]
 8002f8e:	685b      	ldr	r3, [r3, #4]
 8002f90:	2b02      	cmp	r3, #2
 8002f92:	d107      	bne.n	8002fa4 <HAL_RCC_ClockConfig+0x160>
      {
        /* Check the HSE ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8002f94:	4b3c      	ldr	r3, [pc, #240]	; (8003088 <HAL_RCC_ClockConfig+0x244>)
 8002f96:	681b      	ldr	r3, [r3, #0]
 8002f98:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002f9c:	2b00      	cmp	r3, #0
 8002f9e:	d121      	bne.n	8002fe4 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 8002fa0:	2301      	movs	r3, #1
 8002fa2:	e0f6      	b.n	8003192 <HAL_RCC_ClockConfig+0x34e>
        }
      }
      /* PLL is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002fa4:	687b      	ldr	r3, [r7, #4]
 8002fa6:	685b      	ldr	r3, [r3, #4]
 8002fa8:	2b03      	cmp	r3, #3
 8002faa:	d107      	bne.n	8002fbc <HAL_RCC_ClockConfig+0x178>
      {
        /* Check the PLL ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8002fac:	4b36      	ldr	r3, [pc, #216]	; (8003088 <HAL_RCC_ClockConfig+0x244>)
 8002fae:	681b      	ldr	r3, [r3, #0]
 8002fb0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002fb4:	2b00      	cmp	r3, #0
 8002fb6:	d115      	bne.n	8002fe4 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 8002fb8:	2301      	movs	r3, #1
 8002fba:	e0ea      	b.n	8003192 <HAL_RCC_ClockConfig+0x34e>
        }
      }
      /* CSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 8002fbc:	687b      	ldr	r3, [r7, #4]
 8002fbe:	685b      	ldr	r3, [r3, #4]
 8002fc0:	2b01      	cmp	r3, #1
 8002fc2:	d107      	bne.n	8002fd4 <HAL_RCC_ClockConfig+0x190>
      {
        /* Check the PLL ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8002fc4:	4b30      	ldr	r3, [pc, #192]	; (8003088 <HAL_RCC_ClockConfig+0x244>)
 8002fc6:	681b      	ldr	r3, [r3, #0]
 8002fc8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002fcc:	2b00      	cmp	r3, #0
 8002fce:	d109      	bne.n	8002fe4 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 8002fd0:	2301      	movs	r3, #1
 8002fd2:	e0de      	b.n	8003192 <HAL_RCC_ClockConfig+0x34e>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8002fd4:	4b2c      	ldr	r3, [pc, #176]	; (8003088 <HAL_RCC_ClockConfig+0x244>)
 8002fd6:	681b      	ldr	r3, [r3, #0]
 8002fd8:	f003 0304 	and.w	r3, r3, #4
 8002fdc:	2b00      	cmp	r3, #0
 8002fde:	d101      	bne.n	8002fe4 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 8002fe0:	2301      	movs	r3, #1
 8002fe2:	e0d6      	b.n	8003192 <HAL_RCC_ClockConfig+0x34e>
        }
      }
      MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8002fe4:	4b28      	ldr	r3, [pc, #160]	; (8003088 <HAL_RCC_ClockConfig+0x244>)
 8002fe6:	691b      	ldr	r3, [r3, #16]
 8002fe8:	f023 0207 	bic.w	r2, r3, #7
 8002fec:	687b      	ldr	r3, [r7, #4]
 8002fee:	685b      	ldr	r3, [r3, #4]
 8002ff0:	4925      	ldr	r1, [pc, #148]	; (8003088 <HAL_RCC_ClockConfig+0x244>)
 8002ff2:	4313      	orrs	r3, r2
 8002ff4:	610b      	str	r3, [r1, #16]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002ff6:	f7fe f9e1 	bl	80013bc <HAL_GetTick>
 8002ffa:	6178      	str	r0, [r7, #20]

        while (__HAL_RCC_GET_SYSCLK_SOURCE() !=  (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002ffc:	e00a      	b.n	8003014 <HAL_RCC_ClockConfig+0x1d0>
        {
          if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002ffe:	f7fe f9dd 	bl	80013bc <HAL_GetTick>
 8003002:	4602      	mov	r2, r0
 8003004:	697b      	ldr	r3, [r7, #20]
 8003006:	1ad3      	subs	r3, r2, r3
 8003008:	f241 3288 	movw	r2, #5000	; 0x1388
 800300c:	4293      	cmp	r3, r2
 800300e:	d901      	bls.n	8003014 <HAL_RCC_ClockConfig+0x1d0>
          {
            return HAL_TIMEOUT;
 8003010:	2303      	movs	r3, #3
 8003012:	e0be      	b.n	8003192 <HAL_RCC_ClockConfig+0x34e>
        while (__HAL_RCC_GET_SYSCLK_SOURCE() !=  (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003014:	4b1c      	ldr	r3, [pc, #112]	; (8003088 <HAL_RCC_ClockConfig+0x244>)
 8003016:	691b      	ldr	r3, [r3, #16]
 8003018:	f003 0238 	and.w	r2, r3, #56	; 0x38
 800301c:	687b      	ldr	r3, [r7, #4]
 800301e:	685b      	ldr	r3, [r3, #4]
 8003020:	00db      	lsls	r3, r3, #3
 8003022:	429a      	cmp	r2, r3
 8003024:	d1eb      	bne.n	8002ffe <HAL_RCC_ClockConfig+0x1ba>

    }

    /* Decreasing the BUS frequency divider */
   /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003026:	687b      	ldr	r3, [r7, #4]
 8003028:	681b      	ldr	r3, [r3, #0]
 800302a:	f003 0302 	and.w	r3, r3, #2
 800302e:	2b00      	cmp	r3, #0
 8003030:	d010      	beq.n	8003054 <HAL_RCC_ClockConfig+0x210>
  {
#if defined(RCC_D1CFGR_HPRE)
    if((RCC_ClkInitStruct->AHBCLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 8003032:	687b      	ldr	r3, [r7, #4]
 8003034:	68da      	ldr	r2, [r3, #12]
 8003036:	4b14      	ldr	r3, [pc, #80]	; (8003088 <HAL_RCC_ClockConfig+0x244>)
 8003038:	699b      	ldr	r3, [r3, #24]
 800303a:	f003 030f 	and.w	r3, r3, #15
 800303e:	429a      	cmp	r2, r3
 8003040:	d208      	bcs.n	8003054 <HAL_RCC_ClockConfig+0x210>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003042:	4b11      	ldr	r3, [pc, #68]	; (8003088 <HAL_RCC_ClockConfig+0x244>)
 8003044:	699b      	ldr	r3, [r3, #24]
 8003046:	f023 020f 	bic.w	r2, r3, #15
 800304a:	687b      	ldr	r3, [r7, #4]
 800304c:	68db      	ldr	r3, [r3, #12]
 800304e:	490e      	ldr	r1, [pc, #56]	; (8003088 <HAL_RCC_ClockConfig+0x244>)
 8003050:	4313      	orrs	r3, r2
 8003052:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8003054:	4b0b      	ldr	r3, [pc, #44]	; (8003084 <HAL_RCC_ClockConfig+0x240>)
 8003056:	681b      	ldr	r3, [r3, #0]
 8003058:	f003 030f 	and.w	r3, r3, #15
 800305c:	683a      	ldr	r2, [r7, #0]
 800305e:	429a      	cmp	r2, r3
 8003060:	d214      	bcs.n	800308c <HAL_RCC_ClockConfig+0x248>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003062:	4b08      	ldr	r3, [pc, #32]	; (8003084 <HAL_RCC_ClockConfig+0x240>)
 8003064:	681b      	ldr	r3, [r3, #0]
 8003066:	f023 020f 	bic.w	r2, r3, #15
 800306a:	4906      	ldr	r1, [pc, #24]	; (8003084 <HAL_RCC_ClockConfig+0x240>)
 800306c:	683b      	ldr	r3, [r7, #0]
 800306e:	4313      	orrs	r3, r2
 8003070:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003072:	4b04      	ldr	r3, [pc, #16]	; (8003084 <HAL_RCC_ClockConfig+0x240>)
 8003074:	681b      	ldr	r3, [r3, #0]
 8003076:	f003 030f 	and.w	r3, r3, #15
 800307a:	683a      	ldr	r2, [r7, #0]
 800307c:	429a      	cmp	r2, r3
 800307e:	d005      	beq.n	800308c <HAL_RCC_ClockConfig+0x248>
    {
      return HAL_ERROR;
 8003080:	2301      	movs	r3, #1
 8003082:	e086      	b.n	8003192 <HAL_RCC_ClockConfig+0x34e>
 8003084:	52002000 	.word	0x52002000
 8003088:	58024400 	.word	0x58024400
    }
 }

  /*-------------------------- D1PCLK1/CDPCLK Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 800308c:	687b      	ldr	r3, [r7, #4]
 800308e:	681b      	ldr	r3, [r3, #0]
 8003090:	f003 0304 	and.w	r3, r3, #4
 8003094:	2b00      	cmp	r3, #0
 8003096:	d010      	beq.n	80030ba <HAL_RCC_ClockConfig+0x276>
 {
#if defined(RCC_D1CFGR_D1PPRE)
   if((RCC_ClkInitStruct->APB3CLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8003098:	687b      	ldr	r3, [r7, #4]
 800309a:	691a      	ldr	r2, [r3, #16]
 800309c:	4b3f      	ldr	r3, [pc, #252]	; (800319c <HAL_RCC_ClockConfig+0x358>)
 800309e:	699b      	ldr	r3, [r3, #24]
 80030a0:	f003 0370 	and.w	r3, r3, #112	; 0x70
 80030a4:	429a      	cmp	r2, r3
 80030a6:	d208      	bcs.n	80030ba <HAL_RCC_ClockConfig+0x276>
   {
     assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
     MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 80030a8:	4b3c      	ldr	r3, [pc, #240]	; (800319c <HAL_RCC_ClockConfig+0x358>)
 80030aa:	699b      	ldr	r3, [r3, #24]
 80030ac:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 80030b0:	687b      	ldr	r3, [r7, #4]
 80030b2:	691b      	ldr	r3, [r3, #16]
 80030b4:	4939      	ldr	r1, [pc, #228]	; (800319c <HAL_RCC_ClockConfig+0x358>)
 80030b6:	4313      	orrs	r3, r2
 80030b8:	618b      	str	r3, [r1, #24]
   }
#endif
 }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80030ba:	687b      	ldr	r3, [r7, #4]
 80030bc:	681b      	ldr	r3, [r3, #0]
 80030be:	f003 0308 	and.w	r3, r3, #8
 80030c2:	2b00      	cmp	r3, #0
 80030c4:	d010      	beq.n	80030e8 <HAL_RCC_ClockConfig+0x2a4>
 {
#if defined(RCC_D2CFGR_D2PPRE1)
   if((RCC_ClkInitStruct->APB1CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 80030c6:	687b      	ldr	r3, [r7, #4]
 80030c8:	695a      	ldr	r2, [r3, #20]
 80030ca:	4b34      	ldr	r3, [pc, #208]	; (800319c <HAL_RCC_ClockConfig+0x358>)
 80030cc:	69db      	ldr	r3, [r3, #28]
 80030ce:	f003 0370 	and.w	r3, r3, #112	; 0x70
 80030d2:	429a      	cmp	r2, r3
 80030d4:	d208      	bcs.n	80030e8 <HAL_RCC_ClockConfig+0x2a4>
   {
     assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
     MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 80030d6:	4b31      	ldr	r3, [pc, #196]	; (800319c <HAL_RCC_ClockConfig+0x358>)
 80030d8:	69db      	ldr	r3, [r3, #28]
 80030da:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 80030de:	687b      	ldr	r3, [r7, #4]
 80030e0:	695b      	ldr	r3, [r3, #20]
 80030e2:	492e      	ldr	r1, [pc, #184]	; (800319c <HAL_RCC_ClockConfig+0x358>)
 80030e4:	4313      	orrs	r3, r2
 80030e6:	61cb      	str	r3, [r1, #28]
   }
#endif
 }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80030e8:	687b      	ldr	r3, [r7, #4]
 80030ea:	681b      	ldr	r3, [r3, #0]
 80030ec:	f003 0310 	and.w	r3, r3, #16
 80030f0:	2b00      	cmp	r3, #0
 80030f2:	d010      	beq.n	8003116 <HAL_RCC_ClockConfig+0x2d2>
 {
#if defined (RCC_D2CFGR_D2PPRE2)
   if((RCC_ClkInitStruct->APB2CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 80030f4:	687b      	ldr	r3, [r7, #4]
 80030f6:	699a      	ldr	r2, [r3, #24]
 80030f8:	4b28      	ldr	r3, [pc, #160]	; (800319c <HAL_RCC_ClockConfig+0x358>)
 80030fa:	69db      	ldr	r3, [r3, #28]
 80030fc:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8003100:	429a      	cmp	r2, r3
 8003102:	d208      	bcs.n	8003116 <HAL_RCC_ClockConfig+0x2d2>
   {
     assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
     MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8003104:	4b25      	ldr	r3, [pc, #148]	; (800319c <HAL_RCC_ClockConfig+0x358>)
 8003106:	69db      	ldr	r3, [r3, #28]
 8003108:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 800310c:	687b      	ldr	r3, [r7, #4]
 800310e:	699b      	ldr	r3, [r3, #24]
 8003110:	4922      	ldr	r1, [pc, #136]	; (800319c <HAL_RCC_ClockConfig+0x358>)
 8003112:	4313      	orrs	r3, r2
 8003114:	61cb      	str	r3, [r1, #28]
   }
#endif
 }

  /*-------------------------- D3PCLK1/SRDPCLK1 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 8003116:	687b      	ldr	r3, [r7, #4]
 8003118:	681b      	ldr	r3, [r3, #0]
 800311a:	f003 0320 	and.w	r3, r3, #32
 800311e:	2b00      	cmp	r3, #0
 8003120:	d010      	beq.n	8003144 <HAL_RCC_ClockConfig+0x300>
 {
#if defined(RCC_D3CFGR_D3PPRE)
   if((RCC_ClkInitStruct->APB4CLKDivider) < (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 8003122:	687b      	ldr	r3, [r7, #4]
 8003124:	69da      	ldr	r2, [r3, #28]
 8003126:	4b1d      	ldr	r3, [pc, #116]	; (800319c <HAL_RCC_ClockConfig+0x358>)
 8003128:	6a1b      	ldr	r3, [r3, #32]
 800312a:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800312e:	429a      	cmp	r2, r3
 8003130:	d208      	bcs.n	8003144 <HAL_RCC_ClockConfig+0x300>
   {
     assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
     MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider) );
 8003132:	4b1a      	ldr	r3, [pc, #104]	; (800319c <HAL_RCC_ClockConfig+0x358>)
 8003134:	6a1b      	ldr	r3, [r3, #32]
 8003136:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 800313a:	687b      	ldr	r3, [r7, #4]
 800313c:	69db      	ldr	r3, [r3, #28]
 800313e:	4917      	ldr	r1, [pc, #92]	; (800319c <HAL_RCC_ClockConfig+0x358>)
 8003140:	4313      	orrs	r3, r2
 8003142:	620b      	str	r3, [r1, #32]
#endif
 }

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8003144:	f000 f834 	bl	80031b0 <HAL_RCC_GetSysClockFreq>
 8003148:	4602      	mov	r2, r0
 800314a:	4b14      	ldr	r3, [pc, #80]	; (800319c <HAL_RCC_ClockConfig+0x358>)
 800314c:	699b      	ldr	r3, [r3, #24]
 800314e:	0a1b      	lsrs	r3, r3, #8
 8003150:	f003 030f 	and.w	r3, r3, #15
 8003154:	4912      	ldr	r1, [pc, #72]	; (80031a0 <HAL_RCC_ClockConfig+0x35c>)
 8003156:	5ccb      	ldrb	r3, [r1, r3]
 8003158:	f003 031f 	and.w	r3, r3, #31
 800315c:	fa22 f303 	lsr.w	r3, r2, r3
 8003160:	613b      	str	r3, [r7, #16]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8003162:	4b0e      	ldr	r3, [pc, #56]	; (800319c <HAL_RCC_ClockConfig+0x358>)
 8003164:	699b      	ldr	r3, [r3, #24]
 8003166:	f003 030f 	and.w	r3, r3, #15
 800316a:	4a0d      	ldr	r2, [pc, #52]	; (80031a0 <HAL_RCC_ClockConfig+0x35c>)
 800316c:	5cd3      	ldrb	r3, [r2, r3]
 800316e:	f003 031f 	and.w	r3, r3, #31
 8003172:	693a      	ldr	r2, [r7, #16]
 8003174:	fa22 f303 	lsr.w	r3, r2, r3
 8003178:	4a0a      	ldr	r2, [pc, #40]	; (80031a4 <HAL_RCC_ClockConfig+0x360>)
 800317a:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 800317c:	4a0a      	ldr	r2, [pc, #40]	; (80031a8 <HAL_RCC_ClockConfig+0x364>)
 800317e:	693b      	ldr	r3, [r7, #16]
 8003180:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Configure the source of time base considering new system clocks settings*/
  halstatus = HAL_InitTick (uwTickPrio);
 8003182:	4b0a      	ldr	r3, [pc, #40]	; (80031ac <HAL_RCC_ClockConfig+0x368>)
 8003184:	681b      	ldr	r3, [r3, #0]
 8003186:	4618      	mov	r0, r3
 8003188:	f7fe f8ce 	bl	8001328 <HAL_InitTick>
 800318c:	4603      	mov	r3, r0
 800318e:	73fb      	strb	r3, [r7, #15]

  return halstatus;
 8003190:	7bfb      	ldrb	r3, [r7, #15]
}
 8003192:	4618      	mov	r0, r3
 8003194:	3718      	adds	r7, #24
 8003196:	46bd      	mov	sp, r7
 8003198:	bd80      	pop	{r7, pc}
 800319a:	bf00      	nop
 800319c:	58024400 	.word	0x58024400
 80031a0:	08007c10 	.word	0x08007c10
 80031a4:	20000004 	.word	0x20000004
 80031a8:	20000000 	.word	0x20000000
 80031ac:	20000008 	.word	0x20000008

080031b0 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80031b0:	b480      	push	{r7}
 80031b2:	b089      	sub	sp, #36	; 0x24
 80031b4:	af00      	add	r7, sp, #0
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 80031b6:	4bb3      	ldr	r3, [pc, #716]	; (8003484 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80031b8:	691b      	ldr	r3, [r3, #16]
 80031ba:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80031be:	2b18      	cmp	r3, #24
 80031c0:	f200 8155 	bhi.w	800346e <HAL_RCC_GetSysClockFreq+0x2be>
 80031c4:	a201      	add	r2, pc, #4	; (adr r2, 80031cc <HAL_RCC_GetSysClockFreq+0x1c>)
 80031c6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80031ca:	bf00      	nop
 80031cc:	08003231 	.word	0x08003231
 80031d0:	0800346f 	.word	0x0800346f
 80031d4:	0800346f 	.word	0x0800346f
 80031d8:	0800346f 	.word	0x0800346f
 80031dc:	0800346f 	.word	0x0800346f
 80031e0:	0800346f 	.word	0x0800346f
 80031e4:	0800346f 	.word	0x0800346f
 80031e8:	0800346f 	.word	0x0800346f
 80031ec:	08003257 	.word	0x08003257
 80031f0:	0800346f 	.word	0x0800346f
 80031f4:	0800346f 	.word	0x0800346f
 80031f8:	0800346f 	.word	0x0800346f
 80031fc:	0800346f 	.word	0x0800346f
 8003200:	0800346f 	.word	0x0800346f
 8003204:	0800346f 	.word	0x0800346f
 8003208:	0800346f 	.word	0x0800346f
 800320c:	0800325d 	.word	0x0800325d
 8003210:	0800346f 	.word	0x0800346f
 8003214:	0800346f 	.word	0x0800346f
 8003218:	0800346f 	.word	0x0800346f
 800321c:	0800346f 	.word	0x0800346f
 8003220:	0800346f 	.word	0x0800346f
 8003224:	0800346f 	.word	0x0800346f
 8003228:	0800346f 	.word	0x0800346f
 800322c:	08003263 	.word	0x08003263
  {
  case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */

   if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8003230:	4b94      	ldr	r3, [pc, #592]	; (8003484 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003232:	681b      	ldr	r3, [r3, #0]
 8003234:	f003 0320 	and.w	r3, r3, #32
 8003238:	2b00      	cmp	r3, #0
 800323a:	d009      	beq.n	8003250 <HAL_RCC_GetSysClockFreq+0xa0>
      {
        sysclockfreq = (uint32_t) (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 800323c:	4b91      	ldr	r3, [pc, #580]	; (8003484 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800323e:	681b      	ldr	r3, [r3, #0]
 8003240:	08db      	lsrs	r3, r3, #3
 8003242:	f003 0303 	and.w	r3, r3, #3
 8003246:	4a90      	ldr	r2, [pc, #576]	; (8003488 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8003248:	fa22 f303 	lsr.w	r3, r2, r3
 800324c:	61bb      	str	r3, [r7, #24]
      else
      {
        sysclockfreq = (uint32_t) HSI_VALUE;
      }

    break;
 800324e:	e111      	b.n	8003474 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = (uint32_t) HSI_VALUE;
 8003250:	4b8d      	ldr	r3, [pc, #564]	; (8003488 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8003252:	61bb      	str	r3, [r7, #24]
    break;
 8003254:	e10e      	b.n	8003474 <HAL_RCC_GetSysClockFreq+0x2c4>

  case RCC_CFGR_SWS_CSI:  /* CSI used as system clock  source */
    sysclockfreq = CSI_VALUE;
 8003256:	4b8d      	ldr	r3, [pc, #564]	; (800348c <HAL_RCC_GetSysClockFreq+0x2dc>)
 8003258:	61bb      	str	r3, [r7, #24]
    break;
 800325a:	e10b      	b.n	8003474 <HAL_RCC_GetSysClockFreq+0x2c4>

  case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    sysclockfreq = HSE_VALUE;
 800325c:	4b8c      	ldr	r3, [pc, #560]	; (8003490 <HAL_RCC_GetSysClockFreq+0x2e0>)
 800325e:	61bb      	str	r3, [r7, #24]
    break;
 8003260:	e108      	b.n	8003474 <HAL_RCC_GetSysClockFreq+0x2c4>
  case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8003262:	4b88      	ldr	r3, [pc, #544]	; (8003484 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003264:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003266:	f003 0303 	and.w	r3, r3, #3
 800326a:	617b      	str	r3, [r7, #20]
    pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1)>> 4)  ;
 800326c:	4b85      	ldr	r3, [pc, #532]	; (8003484 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800326e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003270:	091b      	lsrs	r3, r3, #4
 8003272:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8003276:	613b      	str	r3, [r7, #16]
    pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN)>>RCC_PLLCFGR_PLL1FRACEN_Pos);
 8003278:	4b82      	ldr	r3, [pc, #520]	; (8003484 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800327a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800327c:	f003 0301 	and.w	r3, r3, #1
 8003280:	60fb      	str	r3, [r7, #12]
    fracn1 = (float_t)(uint32_t)(pllfracen* ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1)>> 3));
 8003282:	4b80      	ldr	r3, [pc, #512]	; (8003484 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003284:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003286:	08db      	lsrs	r3, r3, #3
 8003288:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800328c:	68fa      	ldr	r2, [r7, #12]
 800328e:	fb02 f303 	mul.w	r3, r2, r3
 8003292:	ee07 3a90 	vmov	s15, r3
 8003296:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800329a:	edc7 7a02 	vstr	s15, [r7, #8]

    if (pllm != 0U)
 800329e:	693b      	ldr	r3, [r7, #16]
 80032a0:	2b00      	cmp	r3, #0
 80032a2:	f000 80e1 	beq.w	8003468 <HAL_RCC_GetSysClockFreq+0x2b8>
 80032a6:	697b      	ldr	r3, [r7, #20]
 80032a8:	2b02      	cmp	r3, #2
 80032aa:	f000 8083 	beq.w	80033b4 <HAL_RCC_GetSysClockFreq+0x204>
 80032ae:	697b      	ldr	r3, [r7, #20]
 80032b0:	2b02      	cmp	r3, #2
 80032b2:	f200 80a1 	bhi.w	80033f8 <HAL_RCC_GetSysClockFreq+0x248>
 80032b6:	697b      	ldr	r3, [r7, #20]
 80032b8:	2b00      	cmp	r3, #0
 80032ba:	d003      	beq.n	80032c4 <HAL_RCC_GetSysClockFreq+0x114>
 80032bc:	697b      	ldr	r3, [r7, #20]
 80032be:	2b01      	cmp	r3, #1
 80032c0:	d056      	beq.n	8003370 <HAL_RCC_GetSysClockFreq+0x1c0>
 80032c2:	e099      	b.n	80033f8 <HAL_RCC_GetSysClockFreq+0x248>
    {
      switch (pllsource)
      {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

       if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80032c4:	4b6f      	ldr	r3, [pc, #444]	; (8003484 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80032c6:	681b      	ldr	r3, [r3, #0]
 80032c8:	f003 0320 	and.w	r3, r3, #32
 80032cc:	2b00      	cmp	r3, #0
 80032ce:	d02d      	beq.n	800332c <HAL_RCC_GetSysClockFreq+0x17c>
        {
          hsivalue= (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 80032d0:	4b6c      	ldr	r3, [pc, #432]	; (8003484 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80032d2:	681b      	ldr	r3, [r3, #0]
 80032d4:	08db      	lsrs	r3, r3, #3
 80032d6:	f003 0303 	and.w	r3, r3, #3
 80032da:	4a6b      	ldr	r2, [pc, #428]	; (8003488 <HAL_RCC_GetSysClockFreq+0x2d8>)
 80032dc:	fa22 f303 	lsr.w	r3, r2, r3
 80032e0:	607b      	str	r3, [r7, #4]
          pllvco = ( (float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 80032e2:	687b      	ldr	r3, [r7, #4]
 80032e4:	ee07 3a90 	vmov	s15, r3
 80032e8:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80032ec:	693b      	ldr	r3, [r7, #16]
 80032ee:	ee07 3a90 	vmov	s15, r3
 80032f2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80032f6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80032fa:	4b62      	ldr	r3, [pc, #392]	; (8003484 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80032fc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80032fe:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003302:	ee07 3a90 	vmov	s15, r3
 8003306:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800330a:	ed97 6a02 	vldr	s12, [r7, #8]
 800330e:	eddf 5a61 	vldr	s11, [pc, #388]	; 8003494 <HAL_RCC_GetSysClockFreq+0x2e4>
 8003312:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8003316:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800331a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800331e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8003322:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003326:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
        }
        break;
 800332a:	e087      	b.n	800343c <HAL_RCC_GetSysClockFreq+0x28c>
          pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 800332c:	693b      	ldr	r3, [r7, #16]
 800332e:	ee07 3a90 	vmov	s15, r3
 8003332:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003336:	eddf 6a58 	vldr	s13, [pc, #352]	; 8003498 <HAL_RCC_GetSysClockFreq+0x2e8>
 800333a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800333e:	4b51      	ldr	r3, [pc, #324]	; (8003484 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003340:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003342:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003346:	ee07 3a90 	vmov	s15, r3
 800334a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800334e:	ed97 6a02 	vldr	s12, [r7, #8]
 8003352:	eddf 5a50 	vldr	s11, [pc, #320]	; 8003494 <HAL_RCC_GetSysClockFreq+0x2e4>
 8003356:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800335a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800335e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8003362:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8003366:	ee67 7a27 	vmul.f32	s15, s14, s15
 800336a:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800336e:	e065      	b.n	800343c <HAL_RCC_GetSysClockFreq+0x28c>

      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8003370:	693b      	ldr	r3, [r7, #16]
 8003372:	ee07 3a90 	vmov	s15, r3
 8003376:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800337a:	eddf 6a48 	vldr	s13, [pc, #288]	; 800349c <HAL_RCC_GetSysClockFreq+0x2ec>
 800337e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8003382:	4b40      	ldr	r3, [pc, #256]	; (8003484 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003384:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003386:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800338a:	ee07 3a90 	vmov	s15, r3
 800338e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003392:	ed97 6a02 	vldr	s12, [r7, #8]
 8003396:	eddf 5a3f 	vldr	s11, [pc, #252]	; 8003494 <HAL_RCC_GetSysClockFreq+0x2e4>
 800339a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800339e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80033a2:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80033a6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80033aa:	ee67 7a27 	vmul.f32	s15, s14, s15
 80033ae:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80033b2:	e043      	b.n	800343c <HAL_RCC_GetSysClockFreq+0x28c>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 80033b4:	693b      	ldr	r3, [r7, #16]
 80033b6:	ee07 3a90 	vmov	s15, r3
 80033ba:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80033be:	eddf 6a38 	vldr	s13, [pc, #224]	; 80034a0 <HAL_RCC_GetSysClockFreq+0x2f0>
 80033c2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80033c6:	4b2f      	ldr	r3, [pc, #188]	; (8003484 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80033c8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80033ca:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80033ce:	ee07 3a90 	vmov	s15, r3
 80033d2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80033d6:	ed97 6a02 	vldr	s12, [r7, #8]
 80033da:	eddf 5a2e 	vldr	s11, [pc, #184]	; 8003494 <HAL_RCC_GetSysClockFreq+0x2e4>
 80033de:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80033e2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80033e6:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80033ea:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80033ee:	ee67 7a27 	vmul.f32	s15, s14, s15
 80033f2:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80033f6:	e021      	b.n	800343c <HAL_RCC_GetSysClockFreq+0x28c>

      default:
        pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 80033f8:	693b      	ldr	r3, [r7, #16]
 80033fa:	ee07 3a90 	vmov	s15, r3
 80033fe:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003402:	eddf 6a26 	vldr	s13, [pc, #152]	; 800349c <HAL_RCC_GetSysClockFreq+0x2ec>
 8003406:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800340a:	4b1e      	ldr	r3, [pc, #120]	; (8003484 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800340c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800340e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003412:	ee07 3a90 	vmov	s15, r3
 8003416:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800341a:	ed97 6a02 	vldr	s12, [r7, #8]
 800341e:	eddf 5a1d 	vldr	s11, [pc, #116]	; 8003494 <HAL_RCC_GetSysClockFreq+0x2e4>
 8003422:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8003426:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800342a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800342e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8003432:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003436:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800343a:	bf00      	nop
      }
      pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >>9) + 1U ) ;
 800343c:	4b11      	ldr	r3, [pc, #68]	; (8003484 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800343e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003440:	0a5b      	lsrs	r3, r3, #9
 8003442:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8003446:	3301      	adds	r3, #1
 8003448:	603b      	str	r3, [r7, #0]
      sysclockfreq =  (uint32_t)(float_t)(pllvco/(float_t)pllp);
 800344a:	683b      	ldr	r3, [r7, #0]
 800344c:	ee07 3a90 	vmov	s15, r3
 8003450:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8003454:	edd7 6a07 	vldr	s13, [r7, #28]
 8003458:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800345c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8003460:	ee17 3a90 	vmov	r3, s15
 8003464:	61bb      	str	r3, [r7, #24]
    }
    else
    {
      sysclockfreq = 0U;
    }
    break;
 8003466:	e005      	b.n	8003474 <HAL_RCC_GetSysClockFreq+0x2c4>
      sysclockfreq = 0U;
 8003468:	2300      	movs	r3, #0
 800346a:	61bb      	str	r3, [r7, #24]
    break;
 800346c:	e002      	b.n	8003474 <HAL_RCC_GetSysClockFreq+0x2c4>

  default:
    sysclockfreq = CSI_VALUE;
 800346e:	4b07      	ldr	r3, [pc, #28]	; (800348c <HAL_RCC_GetSysClockFreq+0x2dc>)
 8003470:	61bb      	str	r3, [r7, #24]
    break;
 8003472:	bf00      	nop
  }

  return sysclockfreq;
 8003474:	69bb      	ldr	r3, [r7, #24]
}
 8003476:	4618      	mov	r0, r3
 8003478:	3724      	adds	r7, #36	; 0x24
 800347a:	46bd      	mov	sp, r7
 800347c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003480:	4770      	bx	lr
 8003482:	bf00      	nop
 8003484:	58024400 	.word	0x58024400
 8003488:	03d09000 	.word	0x03d09000
 800348c:	003d0900 	.word	0x003d0900
 8003490:	007a1200 	.word	0x007a1200
 8003494:	46000000 	.word	0x46000000
 8003498:	4c742400 	.word	0x4c742400
 800349c:	4a742400 	.word	0x4a742400
 80034a0:	4af42400 	.word	0x4af42400

080034a4 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemD2Clock CMSIS variable is used to store System domain2 Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80034a4:	b580      	push	{r7, lr}
 80034a6:	b082      	sub	sp, #8
 80034a8:	af00      	add	r7, sp, #0
uint32_t common_system_clock;

#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 80034aa:	f7ff fe81 	bl	80031b0 <HAL_RCC_GetSysClockFreq>
 80034ae:	4602      	mov	r2, r0
 80034b0:	4b10      	ldr	r3, [pc, #64]	; (80034f4 <HAL_RCC_GetHCLKFreq+0x50>)
 80034b2:	699b      	ldr	r3, [r3, #24]
 80034b4:	0a1b      	lsrs	r3, r3, #8
 80034b6:	f003 030f 	and.w	r3, r3, #15
 80034ba:	490f      	ldr	r1, [pc, #60]	; (80034f8 <HAL_RCC_GetHCLKFreq+0x54>)
 80034bc:	5ccb      	ldrb	r3, [r1, r3]
 80034be:	f003 031f 	and.w	r3, r3, #31
 80034c2:	fa22 f303 	lsr.w	r3, r2, r3
 80034c6:	607b      	str	r3, [r7, #4]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos] & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 80034c8:	4b0a      	ldr	r3, [pc, #40]	; (80034f4 <HAL_RCC_GetHCLKFreq+0x50>)
 80034ca:	699b      	ldr	r3, [r3, #24]
 80034cc:	f003 030f 	and.w	r3, r3, #15
 80034d0:	4a09      	ldr	r2, [pc, #36]	; (80034f8 <HAL_RCC_GetHCLKFreq+0x54>)
 80034d2:	5cd3      	ldrb	r3, [r2, r3]
 80034d4:	f003 031f 	and.w	r3, r3, #31
 80034d8:	687a      	ldr	r2, [r7, #4]
 80034da:	fa22 f303 	lsr.w	r3, r2, r3
 80034de:	4a07      	ldr	r2, [pc, #28]	; (80034fc <HAL_RCC_GetHCLKFreq+0x58>)
 80034e0:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 80034e2:	4a07      	ldr	r2, [pc, #28]	; (8003500 <HAL_RCC_GetHCLKFreq+0x5c>)
 80034e4:	687b      	ldr	r3, [r7, #4]
 80034e6:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  return SystemD2Clock;
 80034e8:	4b04      	ldr	r3, [pc, #16]	; (80034fc <HAL_RCC_GetHCLKFreq+0x58>)
 80034ea:	681b      	ldr	r3, [r3, #0]
}
 80034ec:	4618      	mov	r0, r3
 80034ee:	3708      	adds	r7, #8
 80034f0:	46bd      	mov	sp, r7
 80034f2:	bd80      	pop	{r7, pc}
 80034f4:	58024400 	.word	0x58024400
 80034f8:	08007c10 	.word	0x08007c10
 80034fc:	20000004 	.word	0x20000004
 8003500:	20000000 	.word	0x20000000

08003504 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003504:	b580      	push	{r7, lr}
 8003506:	af00      	add	r7, sp, #0
#if defined (RCC_D2CFGR_D2PPRE1)
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1)>> RCC_D2CFGR_D2PPRE1_Pos]) & 0x1FU));
 8003508:	f7ff ffcc 	bl	80034a4 <HAL_RCC_GetHCLKFreq>
 800350c:	4602      	mov	r2, r0
 800350e:	4b06      	ldr	r3, [pc, #24]	; (8003528 <HAL_RCC_GetPCLK1Freq+0x24>)
 8003510:	69db      	ldr	r3, [r3, #28]
 8003512:	091b      	lsrs	r3, r3, #4
 8003514:	f003 0307 	and.w	r3, r3, #7
 8003518:	4904      	ldr	r1, [pc, #16]	; (800352c <HAL_RCC_GetPCLK1Freq+0x28>)
 800351a:	5ccb      	ldrb	r3, [r1, r3]
 800351c:	f003 031f 	and.w	r3, r3, #31
 8003520:	fa22 f303 	lsr.w	r3, r2, r3
#else
 /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1)>> RCC_CDCFGR2_CDPPRE1_Pos]) & 0x1FU));
#endif
}
 8003524:	4618      	mov	r0, r3
 8003526:	bd80      	pop	{r7, pc}
 8003528:	58024400 	.word	0x58024400
 800352c:	08007c10 	.word	0x08007c10

08003530 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003530:	b580      	push	{r7, lr}
 8003532:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
#if defined(RCC_D2CFGR_D2PPRE2)
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2)>> RCC_D2CFGR_D2PPRE2_Pos]) & 0x1FU));
 8003534:	f7ff ffb6 	bl	80034a4 <HAL_RCC_GetHCLKFreq>
 8003538:	4602      	mov	r2, r0
 800353a:	4b06      	ldr	r3, [pc, #24]	; (8003554 <HAL_RCC_GetPCLK2Freq+0x24>)
 800353c:	69db      	ldr	r3, [r3, #28]
 800353e:	0a1b      	lsrs	r3, r3, #8
 8003540:	f003 0307 	and.w	r3, r3, #7
 8003544:	4904      	ldr	r1, [pc, #16]	; (8003558 <HAL_RCC_GetPCLK2Freq+0x28>)
 8003546:	5ccb      	ldrb	r3, [r1, r3]
 8003548:	f003 031f 	and.w	r3, r3, #31
 800354c:	fa22 f303 	lsr.w	r3, r2, r3
#else
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2)>> RCC_CDCFGR2_CDPPRE2_Pos]) & 0x1FU));
#endif
}
 8003550:	4618      	mov	r0, r3
 8003552:	bd80      	pop	{r7, pc}
 8003554:	58024400 	.word	0x58024400
 8003558:	08007c10 	.word	0x08007c10

0800355c <HAL_RCCEx_PeriphCLKConfig>:
  * (*) : Available on some STM32H7 lines only.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 800355c:	b580      	push	{r7, lr}
 800355e:	b086      	sub	sp, #24
 8003560:	af00      	add	r7, sp, #0
 8003562:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8003564:	2300      	movs	r3, #0
 8003566:	75fb      	strb	r3, [r7, #23]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8003568:	2300      	movs	r3, #0
 800356a:	75bb      	strb	r3, [r7, #22]

  /*---------------------------- SPDIFRX configuration -------------------------------*/

  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 800356c:	687b      	ldr	r3, [r7, #4]
 800356e:	681b      	ldr	r3, [r3, #0]
 8003570:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8003574:	2b00      	cmp	r3, #0
 8003576:	d03f      	beq.n	80035f8 <HAL_RCCEx_PeriphCLKConfig+0x9c>
  {

    switch(PeriphClkInit->SpdifrxClockSelection)
 8003578:	687b      	ldr	r3, [r7, #4]
 800357a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800357c:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8003580:	d02a      	beq.n	80035d8 <HAL_RCCEx_PeriphCLKConfig+0x7c>
 8003582:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8003586:	d824      	bhi.n	80035d2 <HAL_RCCEx_PeriphCLKConfig+0x76>
 8003588:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800358c:	d018      	beq.n	80035c0 <HAL_RCCEx_PeriphCLKConfig+0x64>
 800358e:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8003592:	d81e      	bhi.n	80035d2 <HAL_RCCEx_PeriphCLKConfig+0x76>
 8003594:	2b00      	cmp	r3, #0
 8003596:	d003      	beq.n	80035a0 <HAL_RCCEx_PeriphCLKConfig+0x44>
 8003598:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800359c:	d007      	beq.n	80035ae <HAL_RCCEx_PeriphCLKConfig+0x52>
 800359e:	e018      	b.n	80035d2 <HAL_RCCEx_PeriphCLKConfig+0x76>
    {
    case RCC_SPDIFRXCLKSOURCE_PLL:      /* PLL is used as clock source for SPDIFRX*/
      /* Enable PLL1Q Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80035a0:	4bab      	ldr	r3, [pc, #684]	; (8003850 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 80035a2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80035a4:	4aaa      	ldr	r2, [pc, #680]	; (8003850 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 80035a6:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80035aa:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 80035ac:	e015      	b.n	80035da <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SPDIFRXCLKSOURCE_PLL2: /* PLL2 is used as clock source for SPDIFRX*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 80035ae:	687b      	ldr	r3, [r7, #4]
 80035b0:	3304      	adds	r3, #4
 80035b2:	2102      	movs	r1, #2
 80035b4:	4618      	mov	r0, r3
 80035b6:	f001 f989 	bl	80048cc <RCCEx_PLL2_Config>
 80035ba:	4603      	mov	r3, r0
 80035bc:	75fb      	strb	r3, [r7, #23]

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 80035be:	e00c      	b.n	80035da <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SPDIFRXCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPDIFRX*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 80035c0:	687b      	ldr	r3, [r7, #4]
 80035c2:	3324      	adds	r3, #36	; 0x24
 80035c4:	2102      	movs	r1, #2
 80035c6:	4618      	mov	r0, r3
 80035c8:	f001 fa32 	bl	8004a30 <RCCEx_PLL3_Config>
 80035cc:	4603      	mov	r3, r0
 80035ce:	75fb      	strb	r3, [r7, #23]

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 80035d0:	e003      	b.n	80035da <HAL_RCCEx_PeriphCLKConfig+0x7e>
      /* Internal OSC clock is used as source of SPDIFRX clock*/
      /* SPDIFRX clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80035d2:	2301      	movs	r3, #1
 80035d4:	75fb      	strb	r3, [r7, #23]
      break;
 80035d6:	e000      	b.n	80035da <HAL_RCCEx_PeriphCLKConfig+0x7e>
      break;
 80035d8:	bf00      	nop
    }

    if(ret == HAL_OK)
 80035da:	7dfb      	ldrb	r3, [r7, #23]
 80035dc:	2b00      	cmp	r3, #0
 80035de:	d109      	bne.n	80035f4 <HAL_RCCEx_PeriphCLKConfig+0x98>
    {
      /* Set the source of SPDIFRX clock*/
      __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifrxClockSelection);
 80035e0:	4b9b      	ldr	r3, [pc, #620]	; (8003850 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 80035e2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80035e4:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80035e8:	687b      	ldr	r3, [r7, #4]
 80035ea:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80035ec:	4998      	ldr	r1, [pc, #608]	; (8003850 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 80035ee:	4313      	orrs	r3, r2
 80035f0:	650b      	str	r3, [r1, #80]	; 0x50
 80035f2:	e001      	b.n	80035f8 <HAL_RCCEx_PeriphCLKConfig+0x9c>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80035f4:	7dfb      	ldrb	r3, [r7, #23]
 80035f6:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SAI1 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 80035f8:	687b      	ldr	r3, [r7, #4]
 80035fa:	681b      	ldr	r3, [r3, #0]
 80035fc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003600:	2b00      	cmp	r3, #0
 8003602:	d03d      	beq.n	8003680 <HAL_RCCEx_PeriphCLKConfig+0x124>
  {
    switch(PeriphClkInit->Sai1ClockSelection)
 8003604:	687b      	ldr	r3, [r7, #4]
 8003606:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003608:	2b04      	cmp	r3, #4
 800360a:	d826      	bhi.n	800365a <HAL_RCCEx_PeriphCLKConfig+0xfe>
 800360c:	a201      	add	r2, pc, #4	; (adr r2, 8003614 <HAL_RCCEx_PeriphCLKConfig+0xb8>)
 800360e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003612:	bf00      	nop
 8003614:	08003629 	.word	0x08003629
 8003618:	08003637 	.word	0x08003637
 800361c:	08003649 	.word	0x08003649
 8003620:	08003661 	.word	0x08003661
 8003624:	08003661 	.word	0x08003661
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003628:	4b89      	ldr	r3, [pc, #548]	; (8003850 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 800362a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800362c:	4a88      	ldr	r2, [pc, #544]	; (8003850 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 800362e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003632:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8003634:	e015      	b.n	8003662 <HAL_RCCEx_PeriphCLKConfig+0x106>

    case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI1*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8003636:	687b      	ldr	r3, [r7, #4]
 8003638:	3304      	adds	r3, #4
 800363a:	2100      	movs	r1, #0
 800363c:	4618      	mov	r0, r3
 800363e:	f001 f945 	bl	80048cc <RCCEx_PLL2_Config>
 8003642:	4603      	mov	r3, r0
 8003644:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8003646:	e00c      	b.n	8003662 <HAL_RCCEx_PeriphCLKConfig+0x106>

    case RCC_SAI1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI1*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 8003648:	687b      	ldr	r3, [r7, #4]
 800364a:	3324      	adds	r3, #36	; 0x24
 800364c:	2100      	movs	r1, #0
 800364e:	4618      	mov	r0, r3
 8003650:	f001 f9ee 	bl	8004a30 <RCCEx_PLL3_Config>
 8003654:	4603      	mov	r3, r0
 8003656:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8003658:	e003      	b.n	8003662 <HAL_RCCEx_PeriphCLKConfig+0x106>
      /* HSI, HSE, or CSI oscillator is used as source of SAI1 clock */
      /* SAI1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800365a:	2301      	movs	r3, #1
 800365c:	75fb      	strb	r3, [r7, #23]
      break;
 800365e:	e000      	b.n	8003662 <HAL_RCCEx_PeriphCLKConfig+0x106>
      break;
 8003660:	bf00      	nop
    }

    if(ret == HAL_OK)
 8003662:	7dfb      	ldrb	r3, [r7, #23]
 8003664:	2b00      	cmp	r3, #0
 8003666:	d109      	bne.n	800367c <HAL_RCCEx_PeriphCLKConfig+0x120>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8003668:	4b79      	ldr	r3, [pc, #484]	; (8003850 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 800366a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800366c:	f023 0207 	bic.w	r2, r3, #7
 8003670:	687b      	ldr	r3, [r7, #4]
 8003672:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003674:	4976      	ldr	r1, [pc, #472]	; (8003850 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8003676:	4313      	orrs	r3, r2
 8003678:	650b      	str	r3, [r1, #80]	; 0x50
 800367a:	e001      	b.n	8003680 <HAL_RCCEx_PeriphCLKConfig+0x124>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800367c:	7dfb      	ldrb	r3, [r7, #23]
 800367e:	75bb      	strb	r3, [r7, #22]
  }
#endif  /*SAI2B*/

#if defined(SAI4)
  /*---------------------------- SAI4A configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4A) == RCC_PERIPHCLK_SAI4A)
 8003680:	687b      	ldr	r3, [r7, #4]
 8003682:	681b      	ldr	r3, [r3, #0]
 8003684:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003688:	2b00      	cmp	r3, #0
 800368a:	d051      	beq.n	8003730 <HAL_RCCEx_PeriphCLKConfig+0x1d4>
  {
    switch(PeriphClkInit->Sai4AClockSelection)
 800368c:	687b      	ldr	r3, [r7, #4]
 800368e:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 8003692:	f5b3 0f20 	cmp.w	r3, #10485760	; 0xa00000
 8003696:	d036      	beq.n	8003706 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
 8003698:	f5b3 0f20 	cmp.w	r3, #10485760	; 0xa00000
 800369c:	d830      	bhi.n	8003700 <HAL_RCCEx_PeriphCLKConfig+0x1a4>
 800369e:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 80036a2:	d032      	beq.n	800370a <HAL_RCCEx_PeriphCLKConfig+0x1ae>
 80036a4:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 80036a8:	d82a      	bhi.n	8003700 <HAL_RCCEx_PeriphCLKConfig+0x1a4>
 80036aa:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 80036ae:	d02e      	beq.n	800370e <HAL_RCCEx_PeriphCLKConfig+0x1b2>
 80036b0:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 80036b4:	d824      	bhi.n	8003700 <HAL_RCCEx_PeriphCLKConfig+0x1a4>
 80036b6:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80036ba:	d018      	beq.n	80036ee <HAL_RCCEx_PeriphCLKConfig+0x192>
 80036bc:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80036c0:	d81e      	bhi.n	8003700 <HAL_RCCEx_PeriphCLKConfig+0x1a4>
 80036c2:	2b00      	cmp	r3, #0
 80036c4:	d003      	beq.n	80036ce <HAL_RCCEx_PeriphCLKConfig+0x172>
 80036c6:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80036ca:	d007      	beq.n	80036dc <HAL_RCCEx_PeriphCLKConfig+0x180>
 80036cc:	e018      	b.n	8003700 <HAL_RCCEx_PeriphCLKConfig+0x1a4>
    {
    case RCC_SAI4ACLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80036ce:	4b60      	ldr	r3, [pc, #384]	; (8003850 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 80036d0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80036d2:	4a5f      	ldr	r2, [pc, #380]	; (8003850 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 80036d4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80036d8:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 80036da:	e019      	b.n	8003710 <HAL_RCCEx_PeriphCLKConfig+0x1b4>

    case RCC_SAI4ACLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 80036dc:	687b      	ldr	r3, [r7, #4]
 80036de:	3304      	adds	r3, #4
 80036e0:	2100      	movs	r1, #0
 80036e2:	4618      	mov	r0, r3
 80036e4:	f001 f8f2 	bl	80048cc <RCCEx_PLL2_Config>
 80036e8:	4603      	mov	r3, r0
 80036ea:	75fb      	strb	r3, [r7, #23]

      /* SAI2 clock source configuration done later after clock selection check */
      break;
 80036ec:	e010      	b.n	8003710 <HAL_RCCEx_PeriphCLKConfig+0x1b4>

    case RCC_SAI4ACLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 80036ee:	687b      	ldr	r3, [r7, #4]
 80036f0:	3324      	adds	r3, #36	; 0x24
 80036f2:	2100      	movs	r1, #0
 80036f4:	4618      	mov	r0, r3
 80036f6:	f001 f99b 	bl	8004a30 <RCCEx_PLL3_Config>
 80036fa:	4603      	mov	r3, r0
 80036fc:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 80036fe:	e007      	b.n	8003710 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
      /* SAI4A clock source configuration done later after clock selection check */
      break;
#endif /* RCC_VER_3_0 */

    default:
      ret = HAL_ERROR;
 8003700:	2301      	movs	r3, #1
 8003702:	75fb      	strb	r3, [r7, #23]
      break;
 8003704:	e004      	b.n	8003710 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
      break;
 8003706:	bf00      	nop
 8003708:	e002      	b.n	8003710 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
      break;
 800370a:	bf00      	nop
 800370c:	e000      	b.n	8003710 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
      break;
 800370e:	bf00      	nop
    }

    if(ret == HAL_OK)
 8003710:	7dfb      	ldrb	r3, [r7, #23]
 8003712:	2b00      	cmp	r3, #0
 8003714:	d10a      	bne.n	800372c <HAL_RCCEx_PeriphCLKConfig+0x1d0>
    {
      /* Set the source of SAI4A clock*/
      __HAL_RCC_SAI4A_CONFIG(PeriphClkInit->Sai4AClockSelection);
 8003716:	4b4e      	ldr	r3, [pc, #312]	; (8003850 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8003718:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800371a:	f423 0260 	bic.w	r2, r3, #14680064	; 0xe00000
 800371e:	687b      	ldr	r3, [r7, #4]
 8003720:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 8003724:	494a      	ldr	r1, [pc, #296]	; (8003850 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8003726:	4313      	orrs	r3, r2
 8003728:	658b      	str	r3, [r1, #88]	; 0x58
 800372a:	e001      	b.n	8003730 <HAL_RCCEx_PeriphCLKConfig+0x1d4>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800372c:	7dfb      	ldrb	r3, [r7, #23]
 800372e:	75bb      	strb	r3, [r7, #22]
    }
  }
  /*---------------------------- SAI4B configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4B) == RCC_PERIPHCLK_SAI4B)
 8003730:	687b      	ldr	r3, [r7, #4]
 8003732:	681b      	ldr	r3, [r3, #0]
 8003734:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003738:	2b00      	cmp	r3, #0
 800373a:	d051      	beq.n	80037e0 <HAL_RCCEx_PeriphCLKConfig+0x284>
  {
    switch(PeriphClkInit->Sai4BClockSelection)
 800373c:	687b      	ldr	r3, [r7, #4]
 800373e:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8003742:	f1b3 6fa0 	cmp.w	r3, #83886080	; 0x5000000
 8003746:	d036      	beq.n	80037b6 <HAL_RCCEx_PeriphCLKConfig+0x25a>
 8003748:	f1b3 6fa0 	cmp.w	r3, #83886080	; 0x5000000
 800374c:	d830      	bhi.n	80037b0 <HAL_RCCEx_PeriphCLKConfig+0x254>
 800374e:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8003752:	d032      	beq.n	80037ba <HAL_RCCEx_PeriphCLKConfig+0x25e>
 8003754:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8003758:	d82a      	bhi.n	80037b0 <HAL_RCCEx_PeriphCLKConfig+0x254>
 800375a:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 800375e:	d02e      	beq.n	80037be <HAL_RCCEx_PeriphCLKConfig+0x262>
 8003760:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8003764:	d824      	bhi.n	80037b0 <HAL_RCCEx_PeriphCLKConfig+0x254>
 8003766:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800376a:	d018      	beq.n	800379e <HAL_RCCEx_PeriphCLKConfig+0x242>
 800376c:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8003770:	d81e      	bhi.n	80037b0 <HAL_RCCEx_PeriphCLKConfig+0x254>
 8003772:	2b00      	cmp	r3, #0
 8003774:	d003      	beq.n	800377e <HAL_RCCEx_PeriphCLKConfig+0x222>
 8003776:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800377a:	d007      	beq.n	800378c <HAL_RCCEx_PeriphCLKConfig+0x230>
 800377c:	e018      	b.n	80037b0 <HAL_RCCEx_PeriphCLKConfig+0x254>
    {
    case RCC_SAI4BCLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800377e:	4b34      	ldr	r3, [pc, #208]	; (8003850 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8003780:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003782:	4a33      	ldr	r2, [pc, #204]	; (8003850 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8003784:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003788:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 800378a:	e019      	b.n	80037c0 <HAL_RCCEx_PeriphCLKConfig+0x264>

    case RCC_SAI4BCLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 800378c:	687b      	ldr	r3, [r7, #4]
 800378e:	3304      	adds	r3, #4
 8003790:	2100      	movs	r1, #0
 8003792:	4618      	mov	r0, r3
 8003794:	f001 f89a 	bl	80048cc <RCCEx_PLL2_Config>
 8003798:	4603      	mov	r3, r0
 800379a:	75fb      	strb	r3, [r7, #23]

      /* SAI2 clock source configuration done later after clock selection check */
      break;
 800379c:	e010      	b.n	80037c0 <HAL_RCCEx_PeriphCLKConfig+0x264>

    case RCC_SAI4BCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 800379e:	687b      	ldr	r3, [r7, #4]
 80037a0:	3324      	adds	r3, #36	; 0x24
 80037a2:	2100      	movs	r1, #0
 80037a4:	4618      	mov	r0, r3
 80037a6:	f001 f943 	bl	8004a30 <RCCEx_PLL3_Config>
 80037aa:	4603      	mov	r3, r0
 80037ac:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 80037ae:	e007      	b.n	80037c0 <HAL_RCCEx_PeriphCLKConfig+0x264>
      /* SAI4B clock source configuration done later after clock selection check */
      break;
#endif /* RCC_VER_3_0 */

    default:
      ret = HAL_ERROR;
 80037b0:	2301      	movs	r3, #1
 80037b2:	75fb      	strb	r3, [r7, #23]
      break;
 80037b4:	e004      	b.n	80037c0 <HAL_RCCEx_PeriphCLKConfig+0x264>
      break;
 80037b6:	bf00      	nop
 80037b8:	e002      	b.n	80037c0 <HAL_RCCEx_PeriphCLKConfig+0x264>
      break;
 80037ba:	bf00      	nop
 80037bc:	e000      	b.n	80037c0 <HAL_RCCEx_PeriphCLKConfig+0x264>
      break;
 80037be:	bf00      	nop
    }

    if(ret == HAL_OK)
 80037c0:	7dfb      	ldrb	r3, [r7, #23]
 80037c2:	2b00      	cmp	r3, #0
 80037c4:	d10a      	bne.n	80037dc <HAL_RCCEx_PeriphCLKConfig+0x280>
    {
      /* Set the source of SAI4B clock*/
      __HAL_RCC_SAI4B_CONFIG(PeriphClkInit->Sai4BClockSelection);
 80037c6:	4b22      	ldr	r3, [pc, #136]	; (8003850 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 80037c8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80037ca:	f023 62e0 	bic.w	r2, r3, #117440512	; 0x7000000
 80037ce:	687b      	ldr	r3, [r7, #4]
 80037d0:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 80037d4:	491e      	ldr	r1, [pc, #120]	; (8003850 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 80037d6:	4313      	orrs	r3, r2
 80037d8:	658b      	str	r3, [r1, #88]	; 0x58
 80037da:	e001      	b.n	80037e0 <HAL_RCCEx_PeriphCLKConfig+0x284>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80037dc:	7dfb      	ldrb	r3, [r7, #23]
 80037de:	75bb      	strb	r3, [r7, #22]
  }
#endif  /*QUADSPI*/

#if defined(OCTOSPI1) || defined(OCTOSPI2)
  /*---------------------------- OCTOSPI configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_OSPI) == RCC_PERIPHCLK_OSPI)
 80037e0:	687b      	ldr	r3, [r7, #4]
 80037e2:	681b      	ldr	r3, [r3, #0]
 80037e4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80037e8:	2b00      	cmp	r3, #0
 80037ea:	d035      	beq.n	8003858 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
  {
    switch(PeriphClkInit->OspiClockSelection)
 80037ec:	687b      	ldr	r3, [r7, #4]
 80037ee:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80037f0:	2b30      	cmp	r3, #48	; 0x30
 80037f2:	d01c      	beq.n	800382e <HAL_RCCEx_PeriphCLKConfig+0x2d2>
 80037f4:	2b30      	cmp	r3, #48	; 0x30
 80037f6:	d817      	bhi.n	8003828 <HAL_RCCEx_PeriphCLKConfig+0x2cc>
 80037f8:	2b20      	cmp	r3, #32
 80037fa:	d00c      	beq.n	8003816 <HAL_RCCEx_PeriphCLKConfig+0x2ba>
 80037fc:	2b20      	cmp	r3, #32
 80037fe:	d813      	bhi.n	8003828 <HAL_RCCEx_PeriphCLKConfig+0x2cc>
 8003800:	2b00      	cmp	r3, #0
 8003802:	d016      	beq.n	8003832 <HAL_RCCEx_PeriphCLKConfig+0x2d6>
 8003804:	2b10      	cmp	r3, #16
 8003806:	d10f      	bne.n	8003828 <HAL_RCCEx_PeriphCLKConfig+0x2cc>
    {
    case RCC_OSPICLKSOURCE_PLL:      /* PLL is used as clock source for OSPI*/
      /* Enable OSPI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003808:	4b11      	ldr	r3, [pc, #68]	; (8003850 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 800380a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800380c:	4a10      	ldr	r2, [pc, #64]	; (8003850 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 800380e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003812:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* OSPI clock source configuration done later after clock selection check */
      break;
 8003814:	e00e      	b.n	8003834 <HAL_RCCEx_PeriphCLKConfig+0x2d8>

    case RCC_OSPICLKSOURCE_PLL2: /* PLL2 is used as clock source for OSPI*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 8003816:	687b      	ldr	r3, [r7, #4]
 8003818:	3304      	adds	r3, #4
 800381a:	2102      	movs	r1, #2
 800381c:	4618      	mov	r0, r3
 800381e:	f001 f855 	bl	80048cc <RCCEx_PLL2_Config>
 8003822:	4603      	mov	r3, r0
 8003824:	75fb      	strb	r3, [r7, #23]

      /* OSPI clock source configuration done later after clock selection check */
      break;
 8003826:	e005      	b.n	8003834 <HAL_RCCEx_PeriphCLKConfig+0x2d8>
    case RCC_OSPICLKSOURCE_HCLK:
      /* HCLK clock selected as OSPI kernel peripheral clock */
      break;

    default:
      ret = HAL_ERROR;
 8003828:	2301      	movs	r3, #1
 800382a:	75fb      	strb	r3, [r7, #23]
      break;
 800382c:	e002      	b.n	8003834 <HAL_RCCEx_PeriphCLKConfig+0x2d8>
      break;
 800382e:	bf00      	nop
 8003830:	e000      	b.n	8003834 <HAL_RCCEx_PeriphCLKConfig+0x2d8>
      break;
 8003832:	bf00      	nop
    }

    if(ret == HAL_OK)
 8003834:	7dfb      	ldrb	r3, [r7, #23]
 8003836:	2b00      	cmp	r3, #0
 8003838:	d10c      	bne.n	8003854 <HAL_RCCEx_PeriphCLKConfig+0x2f8>
    {
      /* Set the source of OSPI clock*/
      __HAL_RCC_OSPI_CONFIG(PeriphClkInit->OspiClockSelection);
 800383a:	4b05      	ldr	r3, [pc, #20]	; (8003850 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 800383c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800383e:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8003842:	687b      	ldr	r3, [r7, #4]
 8003844:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003846:	4902      	ldr	r1, [pc, #8]	; (8003850 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8003848:	4313      	orrs	r3, r2
 800384a:	64cb      	str	r3, [r1, #76]	; 0x4c
 800384c:	e004      	b.n	8003858 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
 800384e:	bf00      	nop
 8003850:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003854:	7dfb      	ldrb	r3, [r7, #23]
 8003856:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif  /*OCTOSPI*/

  /*---------------------------- SPI1/2/3 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI123) == RCC_PERIPHCLK_SPI123)
 8003858:	687b      	ldr	r3, [r7, #4]
 800385a:	681b      	ldr	r3, [r3, #0]
 800385c:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8003860:	2b00      	cmp	r3, #0
 8003862:	d047      	beq.n	80038f4 <HAL_RCCEx_PeriphCLKConfig+0x398>
  {
    switch(PeriphClkInit->Spi123ClockSelection)
 8003864:	687b      	ldr	r3, [r7, #4]
 8003866:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003868:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800386c:	d030      	beq.n	80038d0 <HAL_RCCEx_PeriphCLKConfig+0x374>
 800386e:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8003872:	d82a      	bhi.n	80038ca <HAL_RCCEx_PeriphCLKConfig+0x36e>
 8003874:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8003878:	d02c      	beq.n	80038d4 <HAL_RCCEx_PeriphCLKConfig+0x378>
 800387a:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 800387e:	d824      	bhi.n	80038ca <HAL_RCCEx_PeriphCLKConfig+0x36e>
 8003880:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003884:	d018      	beq.n	80038b8 <HAL_RCCEx_PeriphCLKConfig+0x35c>
 8003886:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800388a:	d81e      	bhi.n	80038ca <HAL_RCCEx_PeriphCLKConfig+0x36e>
 800388c:	2b00      	cmp	r3, #0
 800388e:	d003      	beq.n	8003898 <HAL_RCCEx_PeriphCLKConfig+0x33c>
 8003890:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003894:	d007      	beq.n	80038a6 <HAL_RCCEx_PeriphCLKConfig+0x34a>
 8003896:	e018      	b.n	80038ca <HAL_RCCEx_PeriphCLKConfig+0x36e>
    {
    case RCC_SPI123CLKSOURCE_PLL:      /* PLL is used as clock source for SPI1/2/3 */
      /* Enable SPI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003898:	4bac      	ldr	r3, [pc, #688]	; (8003b4c <HAL_RCCEx_PeriphCLKConfig+0x5f0>)
 800389a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800389c:	4aab      	ldr	r2, [pc, #684]	; (8003b4c <HAL_RCCEx_PeriphCLKConfig+0x5f0>)
 800389e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80038a2:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 80038a4:	e017      	b.n	80038d6 <HAL_RCCEx_PeriphCLKConfig+0x37a>

    case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI1/2/3 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 80038a6:	687b      	ldr	r3, [r7, #4]
 80038a8:	3304      	adds	r3, #4
 80038aa:	2100      	movs	r1, #0
 80038ac:	4618      	mov	r0, r3
 80038ae:	f001 f80d 	bl	80048cc <RCCEx_PLL2_Config>
 80038b2:	4603      	mov	r3, r0
 80038b4:	75fb      	strb	r3, [r7, #23]

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 80038b6:	e00e      	b.n	80038d6 <HAL_RCCEx_PeriphCLKConfig+0x37a>

    case RCC_SPI123CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI1/2/3 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 80038b8:	687b      	ldr	r3, [r7, #4]
 80038ba:	3324      	adds	r3, #36	; 0x24
 80038bc:	2100      	movs	r1, #0
 80038be:	4618      	mov	r0, r3
 80038c0:	f001 f8b6 	bl	8004a30 <RCCEx_PLL3_Config>
 80038c4:	4603      	mov	r3, r0
 80038c6:	75fb      	strb	r3, [r7, #23]

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 80038c8:	e005      	b.n	80038d6 <HAL_RCCEx_PeriphCLKConfig+0x37a>
      /* HSI, HSE, or CSI oscillator is used as source of SPI1/2/3 clock */
      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80038ca:	2301      	movs	r3, #1
 80038cc:	75fb      	strb	r3, [r7, #23]
      break;
 80038ce:	e002      	b.n	80038d6 <HAL_RCCEx_PeriphCLKConfig+0x37a>
      break;
 80038d0:	bf00      	nop
 80038d2:	e000      	b.n	80038d6 <HAL_RCCEx_PeriphCLKConfig+0x37a>
      break;
 80038d4:	bf00      	nop
    }

    if(ret == HAL_OK)
 80038d6:	7dfb      	ldrb	r3, [r7, #23]
 80038d8:	2b00      	cmp	r3, #0
 80038da:	d109      	bne.n	80038f0 <HAL_RCCEx_PeriphCLKConfig+0x394>
    {
      /* Set the source of SPI1/2/3 clock*/
      __HAL_RCC_SPI123_CONFIG(PeriphClkInit->Spi123ClockSelection);
 80038dc:	4b9b      	ldr	r3, [pc, #620]	; (8003b4c <HAL_RCCEx_PeriphCLKConfig+0x5f0>)
 80038de:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80038e0:	f423 42e0 	bic.w	r2, r3, #28672	; 0x7000
 80038e4:	687b      	ldr	r3, [r7, #4]
 80038e6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80038e8:	4998      	ldr	r1, [pc, #608]	; (8003b4c <HAL_RCCEx_PeriphCLKConfig+0x5f0>)
 80038ea:	4313      	orrs	r3, r2
 80038ec:	650b      	str	r3, [r1, #80]	; 0x50
 80038ee:	e001      	b.n	80038f4 <HAL_RCCEx_PeriphCLKConfig+0x398>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80038f0:	7dfb      	ldrb	r3, [r7, #23]
 80038f2:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SPI4/5 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) == RCC_PERIPHCLK_SPI45)
 80038f4:	687b      	ldr	r3, [r7, #4]
 80038f6:	681b      	ldr	r3, [r3, #0]
 80038f8:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80038fc:	2b00      	cmp	r3, #0
 80038fe:	d049      	beq.n	8003994 <HAL_RCCEx_PeriphCLKConfig+0x438>
  {
    switch(PeriphClkInit->Spi45ClockSelection)
 8003900:	687b      	ldr	r3, [r7, #4]
 8003902:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003904:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8003908:	d02e      	beq.n	8003968 <HAL_RCCEx_PeriphCLKConfig+0x40c>
 800390a:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800390e:	d828      	bhi.n	8003962 <HAL_RCCEx_PeriphCLKConfig+0x406>
 8003910:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8003914:	d02a      	beq.n	800396c <HAL_RCCEx_PeriphCLKConfig+0x410>
 8003916:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 800391a:	d822      	bhi.n	8003962 <HAL_RCCEx_PeriphCLKConfig+0x406>
 800391c:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8003920:	d026      	beq.n	8003970 <HAL_RCCEx_PeriphCLKConfig+0x414>
 8003922:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8003926:	d81c      	bhi.n	8003962 <HAL_RCCEx_PeriphCLKConfig+0x406>
 8003928:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800392c:	d010      	beq.n	8003950 <HAL_RCCEx_PeriphCLKConfig+0x3f4>
 800392e:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8003932:	d816      	bhi.n	8003962 <HAL_RCCEx_PeriphCLKConfig+0x406>
 8003934:	2b00      	cmp	r3, #0
 8003936:	d01d      	beq.n	8003974 <HAL_RCCEx_PeriphCLKConfig+0x418>
 8003938:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800393c:	d111      	bne.n	8003962 <HAL_RCCEx_PeriphCLKConfig+0x406>
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;

    case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI4/5 */

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 800393e:	687b      	ldr	r3, [r7, #4]
 8003940:	3304      	adds	r3, #4
 8003942:	2101      	movs	r1, #1
 8003944:	4618      	mov	r0, r3
 8003946:	f000 ffc1 	bl	80048cc <RCCEx_PLL2_Config>
 800394a:	4603      	mov	r3, r0
 800394c:	75fb      	strb	r3, [r7, #23]

      /* SPI4/5 clock source configuration done later after clock selection check */
      break;
 800394e:	e012      	b.n	8003976 <HAL_RCCEx_PeriphCLKConfig+0x41a>
    case RCC_SPI45CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI4/5 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8003950:	687b      	ldr	r3, [r7, #4]
 8003952:	3324      	adds	r3, #36	; 0x24
 8003954:	2101      	movs	r1, #1
 8003956:	4618      	mov	r0, r3
 8003958:	f001 f86a 	bl	8004a30 <RCCEx_PLL3_Config>
 800395c:	4603      	mov	r3, r0
 800395e:	75fb      	strb	r3, [r7, #23]
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;
 8003960:	e009      	b.n	8003976 <HAL_RCCEx_PeriphCLKConfig+0x41a>
      /* HSE,  oscillator is used as source of SPI4/5 clock */
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8003962:	2301      	movs	r3, #1
 8003964:	75fb      	strb	r3, [r7, #23]
      break;
 8003966:	e006      	b.n	8003976 <HAL_RCCEx_PeriphCLKConfig+0x41a>
      break;
 8003968:	bf00      	nop
 800396a:	e004      	b.n	8003976 <HAL_RCCEx_PeriphCLKConfig+0x41a>
      break;
 800396c:	bf00      	nop
 800396e:	e002      	b.n	8003976 <HAL_RCCEx_PeriphCLKConfig+0x41a>
      break;
 8003970:	bf00      	nop
 8003972:	e000      	b.n	8003976 <HAL_RCCEx_PeriphCLKConfig+0x41a>
      break;
 8003974:	bf00      	nop
    }

    if(ret == HAL_OK)
 8003976:	7dfb      	ldrb	r3, [r7, #23]
 8003978:	2b00      	cmp	r3, #0
 800397a:	d109      	bne.n	8003990 <HAL_RCCEx_PeriphCLKConfig+0x434>
    {
      /* Set the source of SPI4/5 clock*/
      __HAL_RCC_SPI45_CONFIG(PeriphClkInit->Spi45ClockSelection);
 800397c:	4b73      	ldr	r3, [pc, #460]	; (8003b4c <HAL_RCCEx_PeriphCLKConfig+0x5f0>)
 800397e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003980:	f423 22e0 	bic.w	r2, r3, #458752	; 0x70000
 8003984:	687b      	ldr	r3, [r7, #4]
 8003986:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003988:	4970      	ldr	r1, [pc, #448]	; (8003b4c <HAL_RCCEx_PeriphCLKConfig+0x5f0>)
 800398a:	4313      	orrs	r3, r2
 800398c:	650b      	str	r3, [r1, #80]	; 0x50
 800398e:	e001      	b.n	8003994 <HAL_RCCEx_PeriphCLKConfig+0x438>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003990:	7dfb      	ldrb	r3, [r7, #23]
 8003992:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SPI6 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 8003994:	687b      	ldr	r3, [r7, #4]
 8003996:	681b      	ldr	r3, [r3, #0]
 8003998:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800399c:	2b00      	cmp	r3, #0
 800399e:	d04b      	beq.n	8003a38 <HAL_RCCEx_PeriphCLKConfig+0x4dc>
  {
    switch(PeriphClkInit->Spi6ClockSelection)
 80039a0:	687b      	ldr	r3, [r7, #4]
 80039a2:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 80039a6:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80039aa:	d02e      	beq.n	8003a0a <HAL_RCCEx_PeriphCLKConfig+0x4ae>
 80039ac:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80039b0:	d828      	bhi.n	8003a04 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
 80039b2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80039b6:	d02a      	beq.n	8003a0e <HAL_RCCEx_PeriphCLKConfig+0x4b2>
 80039b8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80039bc:	d822      	bhi.n	8003a04 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
 80039be:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 80039c2:	d026      	beq.n	8003a12 <HAL_RCCEx_PeriphCLKConfig+0x4b6>
 80039c4:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 80039c8:	d81c      	bhi.n	8003a04 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
 80039ca:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80039ce:	d010      	beq.n	80039f2 <HAL_RCCEx_PeriphCLKConfig+0x496>
 80039d0:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80039d4:	d816      	bhi.n	8003a04 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
 80039d6:	2b00      	cmp	r3, #0
 80039d8:	d01d      	beq.n	8003a16 <HAL_RCCEx_PeriphCLKConfig+0x4ba>
 80039da:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80039de:	d111      	bne.n	8003a04 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
      /* SPI6 clock source configuration done later after clock selection check */
      break;

    case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI6*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 80039e0:	687b      	ldr	r3, [r7, #4]
 80039e2:	3304      	adds	r3, #4
 80039e4:	2101      	movs	r1, #1
 80039e6:	4618      	mov	r0, r3
 80039e8:	f000 ff70 	bl	80048cc <RCCEx_PLL2_Config>
 80039ec:	4603      	mov	r3, r0
 80039ee:	75fb      	strb	r3, [r7, #23]

      /* SPI6 clock source configuration done later after clock selection check */
      break;
 80039f0:	e012      	b.n	8003a18 <HAL_RCCEx_PeriphCLKConfig+0x4bc>
    case RCC_SPI6CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI6*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 80039f2:	687b      	ldr	r3, [r7, #4]
 80039f4:	3324      	adds	r3, #36	; 0x24
 80039f6:	2101      	movs	r1, #1
 80039f8:	4618      	mov	r0, r3
 80039fa:	f001 f819 	bl	8004a30 <RCCEx_PLL3_Config>
 80039fe:	4603      	mov	r3, r0
 8003a00:	75fb      	strb	r3, [r7, #23]
      /* SPI6 clock source configuration done later after clock selection check */
      break;
 8003a02:	e009      	b.n	8003a18 <HAL_RCCEx_PeriphCLKConfig+0x4bc>
      /* SPI6 clock source configuration done later after clock selection check */
      break;
#endif

    default:
      ret = HAL_ERROR;
 8003a04:	2301      	movs	r3, #1
 8003a06:	75fb      	strb	r3, [r7, #23]
      break;
 8003a08:	e006      	b.n	8003a18 <HAL_RCCEx_PeriphCLKConfig+0x4bc>
      break;
 8003a0a:	bf00      	nop
 8003a0c:	e004      	b.n	8003a18 <HAL_RCCEx_PeriphCLKConfig+0x4bc>
      break;
 8003a0e:	bf00      	nop
 8003a10:	e002      	b.n	8003a18 <HAL_RCCEx_PeriphCLKConfig+0x4bc>
      break;
 8003a12:	bf00      	nop
 8003a14:	e000      	b.n	8003a18 <HAL_RCCEx_PeriphCLKConfig+0x4bc>
      break;
 8003a16:	bf00      	nop
    }

    if(ret == HAL_OK)
 8003a18:	7dfb      	ldrb	r3, [r7, #23]
 8003a1a:	2b00      	cmp	r3, #0
 8003a1c:	d10a      	bne.n	8003a34 <HAL_RCCEx_PeriphCLKConfig+0x4d8>
    {
      /* Set the source of SPI6 clock*/
      __HAL_RCC_SPI6_CONFIG(PeriphClkInit->Spi6ClockSelection);
 8003a1e:	4b4b      	ldr	r3, [pc, #300]	; (8003b4c <HAL_RCCEx_PeriphCLKConfig+0x5f0>)
 8003a20:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003a22:	f023 42e0 	bic.w	r2, r3, #1879048192	; 0x70000000
 8003a26:	687b      	ldr	r3, [r7, #4]
 8003a28:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 8003a2c:	4947      	ldr	r1, [pc, #284]	; (8003b4c <HAL_RCCEx_PeriphCLKConfig+0x5f0>)
 8003a2e:	4313      	orrs	r3, r2
 8003a30:	658b      	str	r3, [r1, #88]	; 0x58
 8003a32:	e001      	b.n	8003a38 <HAL_RCCEx_PeriphCLKConfig+0x4dc>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003a34:	7dfb      	ldrb	r3, [r7, #23]
 8003a36:	75bb      	strb	r3, [r7, #22]
  }
#endif /*DSI*/

#if defined(FDCAN1) || defined(FDCAN2)
  /*---------------------------- FDCAN configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8003a38:	687b      	ldr	r3, [r7, #4]
 8003a3a:	681b      	ldr	r3, [r3, #0]
 8003a3c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8003a40:	2b00      	cmp	r3, #0
 8003a42:	d02f      	beq.n	8003aa4 <HAL_RCCEx_PeriphCLKConfig+0x548>
  {
    switch(PeriphClkInit->FdcanClockSelection)
 8003a44:	687b      	ldr	r3, [r7, #4]
 8003a46:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8003a48:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8003a4c:	d00e      	beq.n	8003a6c <HAL_RCCEx_PeriphCLKConfig+0x510>
 8003a4e:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8003a52:	d814      	bhi.n	8003a7e <HAL_RCCEx_PeriphCLKConfig+0x522>
 8003a54:	2b00      	cmp	r3, #0
 8003a56:	d015      	beq.n	8003a84 <HAL_RCCEx_PeriphCLKConfig+0x528>
 8003a58:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8003a5c:	d10f      	bne.n	8003a7e <HAL_RCCEx_PeriphCLKConfig+0x522>
    {
    case RCC_FDCANCLKSOURCE_PLL:      /* PLL is used as clock source for FDCAN*/
      /* Enable FDCAN Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003a5e:	4b3b      	ldr	r3, [pc, #236]	; (8003b4c <HAL_RCCEx_PeriphCLKConfig+0x5f0>)
 8003a60:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003a62:	4a3a      	ldr	r2, [pc, #232]	; (8003b4c <HAL_RCCEx_PeriphCLKConfig+0x5f0>)
 8003a64:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003a68:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* FDCAN clock source configuration done later after clock selection check */
      break;
 8003a6a:	e00c      	b.n	8003a86 <HAL_RCCEx_PeriphCLKConfig+0x52a>

    case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is used as clock source for FDCAN*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8003a6c:	687b      	ldr	r3, [r7, #4]
 8003a6e:	3304      	adds	r3, #4
 8003a70:	2101      	movs	r1, #1
 8003a72:	4618      	mov	r0, r3
 8003a74:	f000 ff2a 	bl	80048cc <RCCEx_PLL2_Config>
 8003a78:	4603      	mov	r3, r0
 8003a7a:	75fb      	strb	r3, [r7, #23]

      /* FDCAN clock source configuration done later after clock selection check */
      break;
 8003a7c:	e003      	b.n	8003a86 <HAL_RCCEx_PeriphCLKConfig+0x52a>
      /* HSE is used as clock source for FDCAN*/
      /* FDCAN clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8003a7e:	2301      	movs	r3, #1
 8003a80:	75fb      	strb	r3, [r7, #23]
      break;
 8003a82:	e000      	b.n	8003a86 <HAL_RCCEx_PeriphCLKConfig+0x52a>
      break;
 8003a84:	bf00      	nop
    }

    if(ret == HAL_OK)
 8003a86:	7dfb      	ldrb	r3, [r7, #23]
 8003a88:	2b00      	cmp	r3, #0
 8003a8a:	d109      	bne.n	8003aa0 <HAL_RCCEx_PeriphCLKConfig+0x544>
    {
      /* Set the source of FDCAN clock*/
      __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 8003a8c:	4b2f      	ldr	r3, [pc, #188]	; (8003b4c <HAL_RCCEx_PeriphCLKConfig+0x5f0>)
 8003a8e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003a90:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8003a94:	687b      	ldr	r3, [r7, #4]
 8003a96:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8003a98:	492c      	ldr	r1, [pc, #176]	; (8003b4c <HAL_RCCEx_PeriphCLKConfig+0x5f0>)
 8003a9a:	4313      	orrs	r3, r2
 8003a9c:	650b      	str	r3, [r1, #80]	; 0x50
 8003a9e:	e001      	b.n	8003aa4 <HAL_RCCEx_PeriphCLKConfig+0x548>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003aa0:	7dfb      	ldrb	r3, [r7, #23]
 8003aa2:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif /*FDCAN1 || FDCAN2*/

  /*---------------------------- FMC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
 8003aa4:	687b      	ldr	r3, [r7, #4]
 8003aa6:	681b      	ldr	r3, [r3, #0]
 8003aa8:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8003aac:	2b00      	cmp	r3, #0
 8003aae:	d032      	beq.n	8003b16 <HAL_RCCEx_PeriphCLKConfig+0x5ba>
  {
    switch(PeriphClkInit->FmcClockSelection)
 8003ab0:	687b      	ldr	r3, [r7, #4]
 8003ab2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003ab4:	2b03      	cmp	r3, #3
 8003ab6:	d81b      	bhi.n	8003af0 <HAL_RCCEx_PeriphCLKConfig+0x594>
 8003ab8:	a201      	add	r2, pc, #4	; (adr r2, 8003ac0 <HAL_RCCEx_PeriphCLKConfig+0x564>)
 8003aba:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003abe:	bf00      	nop
 8003ac0:	08003af7 	.word	0x08003af7
 8003ac4:	08003ad1 	.word	0x08003ad1
 8003ac8:	08003adf 	.word	0x08003adf
 8003acc:	08003af7 	.word	0x08003af7
    {
    case RCC_FMCCLKSOURCE_PLL:      /* PLL is used as clock source for FMC*/
      /* Enable FMC Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003ad0:	4b1e      	ldr	r3, [pc, #120]	; (8003b4c <HAL_RCCEx_PeriphCLKConfig+0x5f0>)
 8003ad2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003ad4:	4a1d      	ldr	r2, [pc, #116]	; (8003b4c <HAL_RCCEx_PeriphCLKConfig+0x5f0>)
 8003ad6:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003ada:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* FMC clock source configuration done later after clock selection check */
      break;
 8003adc:	e00c      	b.n	8003af8 <HAL_RCCEx_PeriphCLKConfig+0x59c>

    case RCC_FMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for FMC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 8003ade:	687b      	ldr	r3, [r7, #4]
 8003ae0:	3304      	adds	r3, #4
 8003ae2:	2102      	movs	r1, #2
 8003ae4:	4618      	mov	r0, r3
 8003ae6:	f000 fef1 	bl	80048cc <RCCEx_PLL2_Config>
 8003aea:	4603      	mov	r3, r0
 8003aec:	75fb      	strb	r3, [r7, #23]

      /* FMC clock source configuration done later after clock selection check */
      break;
 8003aee:	e003      	b.n	8003af8 <HAL_RCCEx_PeriphCLKConfig+0x59c>
    case RCC_FMCCLKSOURCE_HCLK:
      /* D1/CD HCLK  clock selected as FMC kernel peripheral clock */
      break;

    default:
      ret = HAL_ERROR;
 8003af0:	2301      	movs	r3, #1
 8003af2:	75fb      	strb	r3, [r7, #23]
      break;
 8003af4:	e000      	b.n	8003af8 <HAL_RCCEx_PeriphCLKConfig+0x59c>
      break;
 8003af6:	bf00      	nop
    }

    if(ret == HAL_OK)
 8003af8:	7dfb      	ldrb	r3, [r7, #23]
 8003afa:	2b00      	cmp	r3, #0
 8003afc:	d109      	bne.n	8003b12 <HAL_RCCEx_PeriphCLKConfig+0x5b6>
    {
      /* Set the source of FMC clock*/
      __HAL_RCC_FMC_CONFIG(PeriphClkInit->FmcClockSelection);
 8003afe:	4b13      	ldr	r3, [pc, #76]	; (8003b4c <HAL_RCCEx_PeriphCLKConfig+0x5f0>)
 8003b00:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003b02:	f023 0203 	bic.w	r2, r3, #3
 8003b06:	687b      	ldr	r3, [r7, #4]
 8003b08:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003b0a:	4910      	ldr	r1, [pc, #64]	; (8003b4c <HAL_RCCEx_PeriphCLKConfig+0x5f0>)
 8003b0c:	4313      	orrs	r3, r2
 8003b0e:	64cb      	str	r3, [r1, #76]	; 0x4c
 8003b10:	e001      	b.n	8003b16 <HAL_RCCEx_PeriphCLKConfig+0x5ba>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003b12:	7dfb      	ldrb	r3, [r7, #23]
 8003b14:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8003b16:	687b      	ldr	r3, [r7, #4]
 8003b18:	681b      	ldr	r3, [r3, #0]
 8003b1a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003b1e:	2b00      	cmp	r3, #0
 8003b20:	f000 808a 	beq.w	8003c38 <HAL_RCCEx_PeriphCLKConfig+0x6dc>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8003b24:	4b0a      	ldr	r3, [pc, #40]	; (8003b50 <HAL_RCCEx_PeriphCLKConfig+0x5f4>)
 8003b26:	681b      	ldr	r3, [r3, #0]
 8003b28:	4a09      	ldr	r2, [pc, #36]	; (8003b50 <HAL_RCCEx_PeriphCLKConfig+0x5f4>)
 8003b2a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003b2e:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8003b30:	f7fd fc44 	bl	80013bc <HAL_GetTick>
 8003b34:	6138      	str	r0, [r7, #16]

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8003b36:	e00d      	b.n	8003b54 <HAL_RCCEx_PeriphCLKConfig+0x5f8>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003b38:	f7fd fc40 	bl	80013bc <HAL_GetTick>
 8003b3c:	4602      	mov	r2, r0
 8003b3e:	693b      	ldr	r3, [r7, #16]
 8003b40:	1ad3      	subs	r3, r2, r3
 8003b42:	2b64      	cmp	r3, #100	; 0x64
 8003b44:	d906      	bls.n	8003b54 <HAL_RCCEx_PeriphCLKConfig+0x5f8>
      {
        ret = HAL_TIMEOUT;
 8003b46:	2303      	movs	r3, #3
 8003b48:	75fb      	strb	r3, [r7, #23]
        break;
 8003b4a:	e009      	b.n	8003b60 <HAL_RCCEx_PeriphCLKConfig+0x604>
 8003b4c:	58024400 	.word	0x58024400
 8003b50:	58024800 	.word	0x58024800
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8003b54:	4bb9      	ldr	r3, [pc, #740]	; (8003e3c <HAL_RCCEx_PeriphCLKConfig+0x8e0>)
 8003b56:	681b      	ldr	r3, [r3, #0]
 8003b58:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003b5c:	2b00      	cmp	r3, #0
 8003b5e:	d0eb      	beq.n	8003b38 <HAL_RCCEx_PeriphCLKConfig+0x5dc>
      }
    }

    if(ret == HAL_OK)
 8003b60:	7dfb      	ldrb	r3, [r7, #23]
 8003b62:	2b00      	cmp	r3, #0
 8003b64:	d166      	bne.n	8003c34 <HAL_RCCEx_PeriphCLKConfig+0x6d8>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if((RCC->BDCR & RCC_BDCR_RTCSEL) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL))
 8003b66:	4bb6      	ldr	r3, [pc, #728]	; (8003e40 <HAL_RCCEx_PeriphCLKConfig+0x8e4>)
 8003b68:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8003b6a:	687b      	ldr	r3, [r7, #4]
 8003b6c:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 8003b70:	4053      	eors	r3, r2
 8003b72:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003b76:	2b00      	cmp	r3, #0
 8003b78:	d013      	beq.n	8003ba2 <HAL_RCCEx_PeriphCLKConfig+0x646>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8003b7a:	4bb1      	ldr	r3, [pc, #708]	; (8003e40 <HAL_RCCEx_PeriphCLKConfig+0x8e4>)
 8003b7c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003b7e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003b82:	60fb      	str	r3, [r7, #12]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8003b84:	4bae      	ldr	r3, [pc, #696]	; (8003e40 <HAL_RCCEx_PeriphCLKConfig+0x8e4>)
 8003b86:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003b88:	4aad      	ldr	r2, [pc, #692]	; (8003e40 <HAL_RCCEx_PeriphCLKConfig+0x8e4>)
 8003b8a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003b8e:	6713      	str	r3, [r2, #112]	; 0x70
        __HAL_RCC_BACKUPRESET_RELEASE();
 8003b90:	4bab      	ldr	r3, [pc, #684]	; (8003e40 <HAL_RCCEx_PeriphCLKConfig+0x8e4>)
 8003b92:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003b94:	4aaa      	ldr	r2, [pc, #680]	; (8003e40 <HAL_RCCEx_PeriphCLKConfig+0x8e4>)
 8003b96:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003b9a:	6713      	str	r3, [r2, #112]	; 0x70
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpreg;
 8003b9c:	4aa8      	ldr	r2, [pc, #672]	; (8003e40 <HAL_RCCEx_PeriphCLKConfig+0x8e4>)
 8003b9e:	68fb      	ldr	r3, [r7, #12]
 8003ba0:	6713      	str	r3, [r2, #112]	; 0x70
      }

      /* If LSE is selected as RTC clock source (and enabled prior to Backup Domain reset), wait for LSE reactivation */
      if(PeriphClkInit->RTCClockSelection == RCC_RTCCLKSOURCE_LSE)
 8003ba2:	687b      	ldr	r3, [r7, #4]
 8003ba4:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 8003ba8:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003bac:	d115      	bne.n	8003bda <HAL_RCCEx_PeriphCLKConfig+0x67e>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003bae:	f7fd fc05 	bl	80013bc <HAL_GetTick>
 8003bb2:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8003bb4:	e00b      	b.n	8003bce <HAL_RCCEx_PeriphCLKConfig+0x672>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003bb6:	f7fd fc01 	bl	80013bc <HAL_GetTick>
 8003bba:	4602      	mov	r2, r0
 8003bbc:	693b      	ldr	r3, [r7, #16]
 8003bbe:	1ad3      	subs	r3, r2, r3
 8003bc0:	f241 3288 	movw	r2, #5000	; 0x1388
 8003bc4:	4293      	cmp	r3, r2
 8003bc6:	d902      	bls.n	8003bce <HAL_RCCEx_PeriphCLKConfig+0x672>
          {
            ret = HAL_TIMEOUT;
 8003bc8:	2303      	movs	r3, #3
 8003bca:	75fb      	strb	r3, [r7, #23]
            break;
 8003bcc:	e005      	b.n	8003bda <HAL_RCCEx_PeriphCLKConfig+0x67e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8003bce:	4b9c      	ldr	r3, [pc, #624]	; (8003e40 <HAL_RCCEx_PeriphCLKConfig+0x8e4>)
 8003bd0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003bd2:	f003 0302 	and.w	r3, r3, #2
 8003bd6:	2b00      	cmp	r3, #0
 8003bd8:	d0ed      	beq.n	8003bb6 <HAL_RCCEx_PeriphCLKConfig+0x65a>
          }
        }
      }

      if(ret == HAL_OK)
 8003bda:	7dfb      	ldrb	r3, [r7, #23]
 8003bdc:	2b00      	cmp	r3, #0
 8003bde:	d126      	bne.n	8003c2e <HAL_RCCEx_PeriphCLKConfig+0x6d2>
      {
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8003be0:	687b      	ldr	r3, [r7, #4]
 8003be2:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 8003be6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003bea:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8003bee:	d10d      	bne.n	8003c0c <HAL_RCCEx_PeriphCLKConfig+0x6b0>
 8003bf0:	4b93      	ldr	r3, [pc, #588]	; (8003e40 <HAL_RCCEx_PeriphCLKConfig+0x8e4>)
 8003bf2:	691b      	ldr	r3, [r3, #16]
 8003bf4:	f423 527c 	bic.w	r2, r3, #16128	; 0x3f00
 8003bf8:	687b      	ldr	r3, [r7, #4]
 8003bfa:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 8003bfe:	0919      	lsrs	r1, r3, #4
 8003c00:	4b90      	ldr	r3, [pc, #576]	; (8003e44 <HAL_RCCEx_PeriphCLKConfig+0x8e8>)
 8003c02:	400b      	ands	r3, r1
 8003c04:	498e      	ldr	r1, [pc, #568]	; (8003e40 <HAL_RCCEx_PeriphCLKConfig+0x8e4>)
 8003c06:	4313      	orrs	r3, r2
 8003c08:	610b      	str	r3, [r1, #16]
 8003c0a:	e005      	b.n	8003c18 <HAL_RCCEx_PeriphCLKConfig+0x6bc>
 8003c0c:	4b8c      	ldr	r3, [pc, #560]	; (8003e40 <HAL_RCCEx_PeriphCLKConfig+0x8e4>)
 8003c0e:	691b      	ldr	r3, [r3, #16]
 8003c10:	4a8b      	ldr	r2, [pc, #556]	; (8003e40 <HAL_RCCEx_PeriphCLKConfig+0x8e4>)
 8003c12:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 8003c16:	6113      	str	r3, [r2, #16]
 8003c18:	4b89      	ldr	r3, [pc, #548]	; (8003e40 <HAL_RCCEx_PeriphCLKConfig+0x8e4>)
 8003c1a:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8003c1c:	687b      	ldr	r3, [r7, #4]
 8003c1e:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 8003c22:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003c26:	4986      	ldr	r1, [pc, #536]	; (8003e40 <HAL_RCCEx_PeriphCLKConfig+0x8e4>)
 8003c28:	4313      	orrs	r3, r2
 8003c2a:	670b      	str	r3, [r1, #112]	; 0x70
 8003c2c:	e004      	b.n	8003c38 <HAL_RCCEx_PeriphCLKConfig+0x6dc>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8003c2e:	7dfb      	ldrb	r3, [r7, #23]
 8003c30:	75bb      	strb	r3, [r7, #22]
 8003c32:	e001      	b.n	8003c38 <HAL_RCCEx_PeriphCLKConfig+0x6dc>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003c34:	7dfb      	ldrb	r3, [r7, #23]
 8003c36:	75bb      	strb	r3, [r7, #22]
    }
  }


  /*-------------------------- USART1/6 configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
 8003c38:	687b      	ldr	r3, [r7, #4]
 8003c3a:	681b      	ldr	r3, [r3, #0]
 8003c3c:	f003 0301 	and.w	r3, r3, #1
 8003c40:	2b00      	cmp	r3, #0
 8003c42:	d07e      	beq.n	8003d42 <HAL_RCCEx_PeriphCLKConfig+0x7e6>
  {
    switch(PeriphClkInit->Usart16ClockSelection)
 8003c44:	687b      	ldr	r3, [r7, #4]
 8003c46:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003c48:	2b28      	cmp	r3, #40	; 0x28
 8003c4a:	d867      	bhi.n	8003d1c <HAL_RCCEx_PeriphCLKConfig+0x7c0>
 8003c4c:	a201      	add	r2, pc, #4	; (adr r2, 8003c54 <HAL_RCCEx_PeriphCLKConfig+0x6f8>)
 8003c4e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003c52:	bf00      	nop
 8003c54:	08003d23 	.word	0x08003d23
 8003c58:	08003d1d 	.word	0x08003d1d
 8003c5c:	08003d1d 	.word	0x08003d1d
 8003c60:	08003d1d 	.word	0x08003d1d
 8003c64:	08003d1d 	.word	0x08003d1d
 8003c68:	08003d1d 	.word	0x08003d1d
 8003c6c:	08003d1d 	.word	0x08003d1d
 8003c70:	08003d1d 	.word	0x08003d1d
 8003c74:	08003cf9 	.word	0x08003cf9
 8003c78:	08003d1d 	.word	0x08003d1d
 8003c7c:	08003d1d 	.word	0x08003d1d
 8003c80:	08003d1d 	.word	0x08003d1d
 8003c84:	08003d1d 	.word	0x08003d1d
 8003c88:	08003d1d 	.word	0x08003d1d
 8003c8c:	08003d1d 	.word	0x08003d1d
 8003c90:	08003d1d 	.word	0x08003d1d
 8003c94:	08003d0b 	.word	0x08003d0b
 8003c98:	08003d1d 	.word	0x08003d1d
 8003c9c:	08003d1d 	.word	0x08003d1d
 8003ca0:	08003d1d 	.word	0x08003d1d
 8003ca4:	08003d1d 	.word	0x08003d1d
 8003ca8:	08003d1d 	.word	0x08003d1d
 8003cac:	08003d1d 	.word	0x08003d1d
 8003cb0:	08003d1d 	.word	0x08003d1d
 8003cb4:	08003d23 	.word	0x08003d23
 8003cb8:	08003d1d 	.word	0x08003d1d
 8003cbc:	08003d1d 	.word	0x08003d1d
 8003cc0:	08003d1d 	.word	0x08003d1d
 8003cc4:	08003d1d 	.word	0x08003d1d
 8003cc8:	08003d1d 	.word	0x08003d1d
 8003ccc:	08003d1d 	.word	0x08003d1d
 8003cd0:	08003d1d 	.word	0x08003d1d
 8003cd4:	08003d23 	.word	0x08003d23
 8003cd8:	08003d1d 	.word	0x08003d1d
 8003cdc:	08003d1d 	.word	0x08003d1d
 8003ce0:	08003d1d 	.word	0x08003d1d
 8003ce4:	08003d1d 	.word	0x08003d1d
 8003ce8:	08003d1d 	.word	0x08003d1d
 8003cec:	08003d1d 	.word	0x08003d1d
 8003cf0:	08003d1d 	.word	0x08003d1d
 8003cf4:	08003d23 	.word	0x08003d23
    case RCC_USART16CLKSOURCE_PCLK2: /* CD/D2 PCLK2 as clock source for USART1/6 */
      /* USART1/6 clock source configuration done later after clock selection check */
      break;

    case RCC_USART16CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART1/6 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8003cf8:	687b      	ldr	r3, [r7, #4]
 8003cfa:	3304      	adds	r3, #4
 8003cfc:	2101      	movs	r1, #1
 8003cfe:	4618      	mov	r0, r3
 8003d00:	f000 fde4 	bl	80048cc <RCCEx_PLL2_Config>
 8003d04:	4603      	mov	r3, r0
 8003d06:	75fb      	strb	r3, [r7, #23]
      /* USART1/6 clock source configuration done later after clock selection check */
      break;
 8003d08:	e00c      	b.n	8003d24 <HAL_RCCEx_PeriphCLKConfig+0x7c8>

    case RCC_USART16CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART1/6 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8003d0a:	687b      	ldr	r3, [r7, #4]
 8003d0c:	3324      	adds	r3, #36	; 0x24
 8003d0e:	2101      	movs	r1, #1
 8003d10:	4618      	mov	r0, r3
 8003d12:	f000 fe8d 	bl	8004a30 <RCCEx_PLL3_Config>
 8003d16:	4603      	mov	r3, r0
 8003d18:	75fb      	strb	r3, [r7, #23]
      /* USART1/6 clock source configuration done later after clock selection check */
      break;
 8003d1a:	e003      	b.n	8003d24 <HAL_RCCEx_PeriphCLKConfig+0x7c8>
      /* LSE,  oscillator is used as source of USART1/6 clock */
      /* USART1/6 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8003d1c:	2301      	movs	r3, #1
 8003d1e:	75fb      	strb	r3, [r7, #23]
      break;
 8003d20:	e000      	b.n	8003d24 <HAL_RCCEx_PeriphCLKConfig+0x7c8>
      break;
 8003d22:	bf00      	nop
    }

    if(ret == HAL_OK)
 8003d24:	7dfb      	ldrb	r3, [r7, #23]
 8003d26:	2b00      	cmp	r3, #0
 8003d28:	d109      	bne.n	8003d3e <HAL_RCCEx_PeriphCLKConfig+0x7e2>
    {
      /* Set the source of USART1/6 clock */
      __HAL_RCC_USART16_CONFIG(PeriphClkInit->Usart16ClockSelection);
 8003d2a:	4b45      	ldr	r3, [pc, #276]	; (8003e40 <HAL_RCCEx_PeriphCLKConfig+0x8e4>)
 8003d2c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003d2e:	f023 0238 	bic.w	r2, r3, #56	; 0x38
 8003d32:	687b      	ldr	r3, [r7, #4]
 8003d34:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003d36:	4942      	ldr	r1, [pc, #264]	; (8003e40 <HAL_RCCEx_PeriphCLKConfig+0x8e4>)
 8003d38:	4313      	orrs	r3, r2
 8003d3a:	654b      	str	r3, [r1, #84]	; 0x54
 8003d3c:	e001      	b.n	8003d42 <HAL_RCCEx_PeriphCLKConfig+0x7e6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003d3e:	7dfb      	ldrb	r3, [r7, #23]
 8003d40:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*-------------------------- USART2/3/4/5/7/8 Configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
 8003d42:	687b      	ldr	r3, [r7, #4]
 8003d44:	681b      	ldr	r3, [r3, #0]
 8003d46:	f003 0302 	and.w	r3, r3, #2
 8003d4a:	2b00      	cmp	r3, #0
 8003d4c:	d037      	beq.n	8003dbe <HAL_RCCEx_PeriphCLKConfig+0x862>
  {
    switch(PeriphClkInit->Usart234578ClockSelection)
 8003d4e:	687b      	ldr	r3, [r7, #4]
 8003d50:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003d52:	2b05      	cmp	r3, #5
 8003d54:	d820      	bhi.n	8003d98 <HAL_RCCEx_PeriphCLKConfig+0x83c>
 8003d56:	a201      	add	r2, pc, #4	; (adr r2, 8003d5c <HAL_RCCEx_PeriphCLKConfig+0x800>)
 8003d58:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003d5c:	08003d9f 	.word	0x08003d9f
 8003d60:	08003d75 	.word	0x08003d75
 8003d64:	08003d87 	.word	0x08003d87
 8003d68:	08003d9f 	.word	0x08003d9f
 8003d6c:	08003d9f 	.word	0x08003d9f
 8003d70:	08003d9f 	.word	0x08003d9f
    case RCC_USART234578CLKSOURCE_PCLK1: /* CD/D2 PCLK1 as clock source for USART2/3/4/5/7/8 */
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;

    case RCC_USART234578CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART2/3/4/5/7/8 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8003d74:	687b      	ldr	r3, [r7, #4]
 8003d76:	3304      	adds	r3, #4
 8003d78:	2101      	movs	r1, #1
 8003d7a:	4618      	mov	r0, r3
 8003d7c:	f000 fda6 	bl	80048cc <RCCEx_PLL2_Config>
 8003d80:	4603      	mov	r3, r0
 8003d82:	75fb      	strb	r3, [r7, #23]
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;
 8003d84:	e00c      	b.n	8003da0 <HAL_RCCEx_PeriphCLKConfig+0x844>

    case RCC_USART234578CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART2/3/4/5/7/8 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8003d86:	687b      	ldr	r3, [r7, #4]
 8003d88:	3324      	adds	r3, #36	; 0x24
 8003d8a:	2101      	movs	r1, #1
 8003d8c:	4618      	mov	r0, r3
 8003d8e:	f000 fe4f 	bl	8004a30 <RCCEx_PLL3_Config>
 8003d92:	4603      	mov	r3, r0
 8003d94:	75fb      	strb	r3, [r7, #23]
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;
 8003d96:	e003      	b.n	8003da0 <HAL_RCCEx_PeriphCLKConfig+0x844>
      /* LSE,  oscillator is used as source of USART2/3/4/5/7/8 clock */
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8003d98:	2301      	movs	r3, #1
 8003d9a:	75fb      	strb	r3, [r7, #23]
      break;
 8003d9c:	e000      	b.n	8003da0 <HAL_RCCEx_PeriphCLKConfig+0x844>
      break;
 8003d9e:	bf00      	nop
    }

    if(ret == HAL_OK)
 8003da0:	7dfb      	ldrb	r3, [r7, #23]
 8003da2:	2b00      	cmp	r3, #0
 8003da4:	d109      	bne.n	8003dba <HAL_RCCEx_PeriphCLKConfig+0x85e>
    {
      /* Set the source of USART2/3/4/5/7/8 clock */
      __HAL_RCC_USART234578_CONFIG(PeriphClkInit->Usart234578ClockSelection);
 8003da6:	4b26      	ldr	r3, [pc, #152]	; (8003e40 <HAL_RCCEx_PeriphCLKConfig+0x8e4>)
 8003da8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003daa:	f023 0207 	bic.w	r2, r3, #7
 8003dae:	687b      	ldr	r3, [r7, #4]
 8003db0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003db2:	4923      	ldr	r1, [pc, #140]	; (8003e40 <HAL_RCCEx_PeriphCLKConfig+0x8e4>)
 8003db4:	4313      	orrs	r3, r2
 8003db6:	654b      	str	r3, [r1, #84]	; 0x54
 8003db8:	e001      	b.n	8003dbe <HAL_RCCEx_PeriphCLKConfig+0x862>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003dba:	7dfb      	ldrb	r3, [r7, #23]
 8003dbc:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*-------------------------- LPUART1 Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8003dbe:	687b      	ldr	r3, [r7, #4]
 8003dc0:	681b      	ldr	r3, [r3, #0]
 8003dc2:	f003 0304 	and.w	r3, r3, #4
 8003dc6:	2b00      	cmp	r3, #0
 8003dc8:	d040      	beq.n	8003e4c <HAL_RCCEx_PeriphCLKConfig+0x8f0>
  {
    switch(PeriphClkInit->Lpuart1ClockSelection)
 8003dca:	687b      	ldr	r3, [r7, #4]
 8003dcc:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8003dd0:	2b05      	cmp	r3, #5
 8003dd2:	d821      	bhi.n	8003e18 <HAL_RCCEx_PeriphCLKConfig+0x8bc>
 8003dd4:	a201      	add	r2, pc, #4	; (adr r2, 8003ddc <HAL_RCCEx_PeriphCLKConfig+0x880>)
 8003dd6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003dda:	bf00      	nop
 8003ddc:	08003e1f 	.word	0x08003e1f
 8003de0:	08003df5 	.word	0x08003df5
 8003de4:	08003e07 	.word	0x08003e07
 8003de8:	08003e1f 	.word	0x08003e1f
 8003dec:	08003e1f 	.word	0x08003e1f
 8003df0:	08003e1f 	.word	0x08003e1f
    case RCC_LPUART1CLKSOURCE_PCLK4: /* SRD/D3 PCLK1 (PCLK4) as clock source for LPUART1 */
      /* LPUART1 clock source configuration done later after clock selection check */
      break;

    case RCC_LPUART1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPUART1 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8003df4:	687b      	ldr	r3, [r7, #4]
 8003df6:	3304      	adds	r3, #4
 8003df8:	2101      	movs	r1, #1
 8003dfa:	4618      	mov	r0, r3
 8003dfc:	f000 fd66 	bl	80048cc <RCCEx_PLL2_Config>
 8003e00:	4603      	mov	r3, r0
 8003e02:	75fb      	strb	r3, [r7, #23]
      /* LPUART1 clock source configuration done later after clock selection check */
      break;
 8003e04:	e00c      	b.n	8003e20 <HAL_RCCEx_PeriphCLKConfig+0x8c4>

    case RCC_LPUART1CLKSOURCE_PLL3: /* PLL3 is used as clock source for LPUART1 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8003e06:	687b      	ldr	r3, [r7, #4]
 8003e08:	3324      	adds	r3, #36	; 0x24
 8003e0a:	2101      	movs	r1, #1
 8003e0c:	4618      	mov	r0, r3
 8003e0e:	f000 fe0f 	bl	8004a30 <RCCEx_PLL3_Config>
 8003e12:	4603      	mov	r3, r0
 8003e14:	75fb      	strb	r3, [r7, #23]
      /* LPUART1 clock source configuration done later after clock selection check */
      break;
 8003e16:	e003      	b.n	8003e20 <HAL_RCCEx_PeriphCLKConfig+0x8c4>
      /* LSE,  oscillator is used as source of LPUART1 clock */
      /* LPUART1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8003e18:	2301      	movs	r3, #1
 8003e1a:	75fb      	strb	r3, [r7, #23]
      break;
 8003e1c:	e000      	b.n	8003e20 <HAL_RCCEx_PeriphCLKConfig+0x8c4>
      break;
 8003e1e:	bf00      	nop
    }

    if(ret == HAL_OK)
 8003e20:	7dfb      	ldrb	r3, [r7, #23]
 8003e22:	2b00      	cmp	r3, #0
 8003e24:	d110      	bne.n	8003e48 <HAL_RCCEx_PeriphCLKConfig+0x8ec>
    {
      /* Set the source of LPUART1 clock */
      __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8003e26:	4b06      	ldr	r3, [pc, #24]	; (8003e40 <HAL_RCCEx_PeriphCLKConfig+0x8e4>)
 8003e28:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003e2a:	f023 0207 	bic.w	r2, r3, #7
 8003e2e:	687b      	ldr	r3, [r7, #4]
 8003e30:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8003e34:	4902      	ldr	r1, [pc, #8]	; (8003e40 <HAL_RCCEx_PeriphCLKConfig+0x8e4>)
 8003e36:	4313      	orrs	r3, r2
 8003e38:	658b      	str	r3, [r1, #88]	; 0x58
 8003e3a:	e007      	b.n	8003e4c <HAL_RCCEx_PeriphCLKConfig+0x8f0>
 8003e3c:	58024800 	.word	0x58024800
 8003e40:	58024400 	.word	0x58024400
 8003e44:	00ffffcf 	.word	0x00ffffcf
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003e48:	7dfb      	ldrb	r3, [r7, #23]
 8003e4a:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM1 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8003e4c:	687b      	ldr	r3, [r7, #4]
 8003e4e:	681b      	ldr	r3, [r3, #0]
 8003e50:	f003 0320 	and.w	r3, r3, #32
 8003e54:	2b00      	cmp	r3, #0
 8003e56:	d04b      	beq.n	8003ef0 <HAL_RCCEx_PeriphCLKConfig+0x994>
  {
    switch(PeriphClkInit->Lptim1ClockSelection)
 8003e58:	687b      	ldr	r3, [r7, #4]
 8003e5a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003e5e:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8003e62:	d02e      	beq.n	8003ec2 <HAL_RCCEx_PeriphCLKConfig+0x966>
 8003e64:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8003e68:	d828      	bhi.n	8003ebc <HAL_RCCEx_PeriphCLKConfig+0x960>
 8003e6a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003e6e:	d02a      	beq.n	8003ec6 <HAL_RCCEx_PeriphCLKConfig+0x96a>
 8003e70:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003e74:	d822      	bhi.n	8003ebc <HAL_RCCEx_PeriphCLKConfig+0x960>
 8003e76:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8003e7a:	d026      	beq.n	8003eca <HAL_RCCEx_PeriphCLKConfig+0x96e>
 8003e7c:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8003e80:	d81c      	bhi.n	8003ebc <HAL_RCCEx_PeriphCLKConfig+0x960>
 8003e82:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8003e86:	d010      	beq.n	8003eaa <HAL_RCCEx_PeriphCLKConfig+0x94e>
 8003e88:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8003e8c:	d816      	bhi.n	8003ebc <HAL_RCCEx_PeriphCLKConfig+0x960>
 8003e8e:	2b00      	cmp	r3, #0
 8003e90:	d01d      	beq.n	8003ece <HAL_RCCEx_PeriphCLKConfig+0x972>
 8003e92:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8003e96:	d111      	bne.n	8003ebc <HAL_RCCEx_PeriphCLKConfig+0x960>
      /* LPTIM1 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM1*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8003e98:	687b      	ldr	r3, [r7, #4]
 8003e9a:	3304      	adds	r3, #4
 8003e9c:	2100      	movs	r1, #0
 8003e9e:	4618      	mov	r0, r3
 8003ea0:	f000 fd14 	bl	80048cc <RCCEx_PLL2_Config>
 8003ea4:	4603      	mov	r3, r0
 8003ea6:	75fb      	strb	r3, [r7, #23]

      /* LPTIM1 clock source configuration done later after clock selection check */
      break;
 8003ea8:	e012      	b.n	8003ed0 <HAL_RCCEx_PeriphCLKConfig+0x974>

    case RCC_LPTIM1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM1*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8003eaa:	687b      	ldr	r3, [r7, #4]
 8003eac:	3324      	adds	r3, #36	; 0x24
 8003eae:	2102      	movs	r1, #2
 8003eb0:	4618      	mov	r0, r3
 8003eb2:	f000 fdbd 	bl	8004a30 <RCCEx_PLL3_Config>
 8003eb6:	4603      	mov	r3, r0
 8003eb8:	75fb      	strb	r3, [r7, #23]

      /* LPTIM1 clock source configuration done later after clock selection check */
      break;
 8003eba:	e009      	b.n	8003ed0 <HAL_RCCEx_PeriphCLKConfig+0x974>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM1 clock */
      /* LPTIM1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8003ebc:	2301      	movs	r3, #1
 8003ebe:	75fb      	strb	r3, [r7, #23]
      break;
 8003ec0:	e006      	b.n	8003ed0 <HAL_RCCEx_PeriphCLKConfig+0x974>
      break;
 8003ec2:	bf00      	nop
 8003ec4:	e004      	b.n	8003ed0 <HAL_RCCEx_PeriphCLKConfig+0x974>
      break;
 8003ec6:	bf00      	nop
 8003ec8:	e002      	b.n	8003ed0 <HAL_RCCEx_PeriphCLKConfig+0x974>
      break;
 8003eca:	bf00      	nop
 8003ecc:	e000      	b.n	8003ed0 <HAL_RCCEx_PeriphCLKConfig+0x974>
      break;
 8003ece:	bf00      	nop
    }

    if(ret == HAL_OK)
 8003ed0:	7dfb      	ldrb	r3, [r7, #23]
 8003ed2:	2b00      	cmp	r3, #0
 8003ed4:	d10a      	bne.n	8003eec <HAL_RCCEx_PeriphCLKConfig+0x990>
    {
      /* Set the source of LPTIM1 clock*/
      __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8003ed6:	4bb2      	ldr	r3, [pc, #712]	; (80041a0 <HAL_RCCEx_PeriphCLKConfig+0xc44>)
 8003ed8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003eda:	f023 42e0 	bic.w	r2, r3, #1879048192	; 0x70000000
 8003ede:	687b      	ldr	r3, [r7, #4]
 8003ee0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003ee4:	49ae      	ldr	r1, [pc, #696]	; (80041a0 <HAL_RCCEx_PeriphCLKConfig+0xc44>)
 8003ee6:	4313      	orrs	r3, r2
 8003ee8:	654b      	str	r3, [r1, #84]	; 0x54
 8003eea:	e001      	b.n	8003ef0 <HAL_RCCEx_PeriphCLKConfig+0x994>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003eec:	7dfb      	ldrb	r3, [r7, #23]
 8003eee:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM2 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 8003ef0:	687b      	ldr	r3, [r7, #4]
 8003ef2:	681b      	ldr	r3, [r3, #0]
 8003ef4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003ef8:	2b00      	cmp	r3, #0
 8003efa:	d04b      	beq.n	8003f94 <HAL_RCCEx_PeriphCLKConfig+0xa38>
  {
    switch(PeriphClkInit->Lptim2ClockSelection)
 8003efc:	687b      	ldr	r3, [r7, #4]
 8003efe:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003f02:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 8003f06:	d02e      	beq.n	8003f66 <HAL_RCCEx_PeriphCLKConfig+0xa0a>
 8003f08:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 8003f0c:	d828      	bhi.n	8003f60 <HAL_RCCEx_PeriphCLKConfig+0xa04>
 8003f0e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003f12:	d02a      	beq.n	8003f6a <HAL_RCCEx_PeriphCLKConfig+0xa0e>
 8003f14:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003f18:	d822      	bhi.n	8003f60 <HAL_RCCEx_PeriphCLKConfig+0xa04>
 8003f1a:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8003f1e:	d026      	beq.n	8003f6e <HAL_RCCEx_PeriphCLKConfig+0xa12>
 8003f20:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8003f24:	d81c      	bhi.n	8003f60 <HAL_RCCEx_PeriphCLKConfig+0xa04>
 8003f26:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003f2a:	d010      	beq.n	8003f4e <HAL_RCCEx_PeriphCLKConfig+0x9f2>
 8003f2c:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003f30:	d816      	bhi.n	8003f60 <HAL_RCCEx_PeriphCLKConfig+0xa04>
 8003f32:	2b00      	cmp	r3, #0
 8003f34:	d01d      	beq.n	8003f72 <HAL_RCCEx_PeriphCLKConfig+0xa16>
 8003f36:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003f3a:	d111      	bne.n	8003f60 <HAL_RCCEx_PeriphCLKConfig+0xa04>
      /* LPTIM2 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM2CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8003f3c:	687b      	ldr	r3, [r7, #4]
 8003f3e:	3304      	adds	r3, #4
 8003f40:	2100      	movs	r1, #0
 8003f42:	4618      	mov	r0, r3
 8003f44:	f000 fcc2 	bl	80048cc <RCCEx_PLL2_Config>
 8003f48:	4603      	mov	r3, r0
 8003f4a:	75fb      	strb	r3, [r7, #23]

      /* LPTIM2 clock source configuration done later after clock selection check */
      break;
 8003f4c:	e012      	b.n	8003f74 <HAL_RCCEx_PeriphCLKConfig+0xa18>

    case RCC_LPTIM2CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8003f4e:	687b      	ldr	r3, [r7, #4]
 8003f50:	3324      	adds	r3, #36	; 0x24
 8003f52:	2102      	movs	r1, #2
 8003f54:	4618      	mov	r0, r3
 8003f56:	f000 fd6b 	bl	8004a30 <RCCEx_PLL3_Config>
 8003f5a:	4603      	mov	r3, r0
 8003f5c:	75fb      	strb	r3, [r7, #23]

      /* LPTIM2 clock source configuration done later after clock selection check */
      break;
 8003f5e:	e009      	b.n	8003f74 <HAL_RCCEx_PeriphCLKConfig+0xa18>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM2 clock */
      /* LPTIM2 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8003f60:	2301      	movs	r3, #1
 8003f62:	75fb      	strb	r3, [r7, #23]
      break;
 8003f64:	e006      	b.n	8003f74 <HAL_RCCEx_PeriphCLKConfig+0xa18>
      break;
 8003f66:	bf00      	nop
 8003f68:	e004      	b.n	8003f74 <HAL_RCCEx_PeriphCLKConfig+0xa18>
      break;
 8003f6a:	bf00      	nop
 8003f6c:	e002      	b.n	8003f74 <HAL_RCCEx_PeriphCLKConfig+0xa18>
      break;
 8003f6e:	bf00      	nop
 8003f70:	e000      	b.n	8003f74 <HAL_RCCEx_PeriphCLKConfig+0xa18>
      break;
 8003f72:	bf00      	nop
    }

    if(ret == HAL_OK)
 8003f74:	7dfb      	ldrb	r3, [r7, #23]
 8003f76:	2b00      	cmp	r3, #0
 8003f78:	d10a      	bne.n	8003f90 <HAL_RCCEx_PeriphCLKConfig+0xa34>
    {
      /* Set the source of LPTIM2 clock*/
      __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8003f7a:	4b89      	ldr	r3, [pc, #548]	; (80041a0 <HAL_RCCEx_PeriphCLKConfig+0xc44>)
 8003f7c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003f7e:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8003f82:	687b      	ldr	r3, [r7, #4]
 8003f84:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003f88:	4985      	ldr	r1, [pc, #532]	; (80041a0 <HAL_RCCEx_PeriphCLKConfig+0xc44>)
 8003f8a:	4313      	orrs	r3, r2
 8003f8c:	658b      	str	r3, [r1, #88]	; 0x58
 8003f8e:	e001      	b.n	8003f94 <HAL_RCCEx_PeriphCLKConfig+0xa38>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003f90:	7dfb      	ldrb	r3, [r7, #23]
 8003f92:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM345 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
 8003f94:	687b      	ldr	r3, [r7, #4]
 8003f96:	681b      	ldr	r3, [r3, #0]
 8003f98:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003f9c:	2b00      	cmp	r3, #0
 8003f9e:	d04b      	beq.n	8004038 <HAL_RCCEx_PeriphCLKConfig+0xadc>
  {
    switch(PeriphClkInit->Lptim345ClockSelection)
 8003fa0:	687b      	ldr	r3, [r7, #4]
 8003fa2:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8003fa6:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 8003faa:	d02e      	beq.n	800400a <HAL_RCCEx_PeriphCLKConfig+0xaae>
 8003fac:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 8003fb0:	d828      	bhi.n	8004004 <HAL_RCCEx_PeriphCLKConfig+0xaa8>
 8003fb2:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003fb6:	d02a      	beq.n	800400e <HAL_RCCEx_PeriphCLKConfig+0xab2>
 8003fb8:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003fbc:	d822      	bhi.n	8004004 <HAL_RCCEx_PeriphCLKConfig+0xaa8>
 8003fbe:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 8003fc2:	d026      	beq.n	8004012 <HAL_RCCEx_PeriphCLKConfig+0xab6>
 8003fc4:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 8003fc8:	d81c      	bhi.n	8004004 <HAL_RCCEx_PeriphCLKConfig+0xaa8>
 8003fca:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8003fce:	d010      	beq.n	8003ff2 <HAL_RCCEx_PeriphCLKConfig+0xa96>
 8003fd0:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8003fd4:	d816      	bhi.n	8004004 <HAL_RCCEx_PeriphCLKConfig+0xaa8>
 8003fd6:	2b00      	cmp	r3, #0
 8003fd8:	d01d      	beq.n	8004016 <HAL_RCCEx_PeriphCLKConfig+0xaba>
 8003fda:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003fde:	d111      	bne.n	8004004 <HAL_RCCEx_PeriphCLKConfig+0xaa8>
    case RCC_LPTIM345CLKSOURCE_PCLK4:      /* SRD/D3 PCLK1 (PCLK4) as clock source for LPTIM3/4/5 */
      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM345CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM3/4/5 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8003fe0:	687b      	ldr	r3, [r7, #4]
 8003fe2:	3304      	adds	r3, #4
 8003fe4:	2100      	movs	r1, #0
 8003fe6:	4618      	mov	r0, r3
 8003fe8:	f000 fc70 	bl	80048cc <RCCEx_PLL2_Config>
 8003fec:	4603      	mov	r3, r0
 8003fee:	75fb      	strb	r3, [r7, #23]

      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;
 8003ff0:	e012      	b.n	8004018 <HAL_RCCEx_PeriphCLKConfig+0xabc>

    case RCC_LPTIM345CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM3/4/5 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8003ff2:	687b      	ldr	r3, [r7, #4]
 8003ff4:	3324      	adds	r3, #36	; 0x24
 8003ff6:	2102      	movs	r1, #2
 8003ff8:	4618      	mov	r0, r3
 8003ffa:	f000 fd19 	bl	8004a30 <RCCEx_PLL3_Config>
 8003ffe:	4603      	mov	r3, r0
 8004000:	75fb      	strb	r3, [r7, #23]

      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;
 8004002:	e009      	b.n	8004018 <HAL_RCCEx_PeriphCLKConfig+0xabc>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM3/4/5 clock */
      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8004004:	2301      	movs	r3, #1
 8004006:	75fb      	strb	r3, [r7, #23]
      break;
 8004008:	e006      	b.n	8004018 <HAL_RCCEx_PeriphCLKConfig+0xabc>
      break;
 800400a:	bf00      	nop
 800400c:	e004      	b.n	8004018 <HAL_RCCEx_PeriphCLKConfig+0xabc>
      break;
 800400e:	bf00      	nop
 8004010:	e002      	b.n	8004018 <HAL_RCCEx_PeriphCLKConfig+0xabc>
      break;
 8004012:	bf00      	nop
 8004014:	e000      	b.n	8004018 <HAL_RCCEx_PeriphCLKConfig+0xabc>
      break;
 8004016:	bf00      	nop
    }

    if(ret == HAL_OK)
 8004018:	7dfb      	ldrb	r3, [r7, #23]
 800401a:	2b00      	cmp	r3, #0
 800401c:	d10a      	bne.n	8004034 <HAL_RCCEx_PeriphCLKConfig+0xad8>
    {
      /* Set the source of LPTIM3/4/5 clock */
      __HAL_RCC_LPTIM345_CONFIG(PeriphClkInit->Lptim345ClockSelection);
 800401e:	4b60      	ldr	r3, [pc, #384]	; (80041a0 <HAL_RCCEx_PeriphCLKConfig+0xc44>)
 8004020:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004022:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8004026:	687b      	ldr	r3, [r7, #4]
 8004028:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800402c:	495c      	ldr	r1, [pc, #368]	; (80041a0 <HAL_RCCEx_PeriphCLKConfig+0xc44>)
 800402e:	4313      	orrs	r3, r2
 8004030:	658b      	str	r3, [r1, #88]	; 0x58
 8004032:	e001      	b.n	8004038 <HAL_RCCEx_PeriphCLKConfig+0xadc>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004034:	7dfb      	ldrb	r3, [r7, #23]
 8004036:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*------------------------------ I2C1/2/3/5* Configuration ------------------------*/
#if defined(I2C5)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1235) == RCC_PERIPHCLK_I2C1235)
 8004038:	687b      	ldr	r3, [r7, #4]
 800403a:	681b      	ldr	r3, [r3, #0]
 800403c:	f003 0308 	and.w	r3, r3, #8
 8004040:	2b00      	cmp	r3, #0
 8004042:	d018      	beq.n	8004076 <HAL_RCCEx_PeriphCLKConfig+0xb1a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1235CLKSOURCE(PeriphClkInit->I2c1235ClockSelection));

    if ((PeriphClkInit->I2c1235ClockSelection )== RCC_I2C1235CLKSOURCE_PLL3 )
 8004044:	687b      	ldr	r3, [r7, #4]
 8004046:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8004048:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800404c:	d10a      	bne.n	8004064 <HAL_RCCEx_PeriphCLKConfig+0xb08>
    {
        if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!= HAL_OK)
 800404e:	687b      	ldr	r3, [r7, #4]
 8004050:	3324      	adds	r3, #36	; 0x24
 8004052:	2102      	movs	r1, #2
 8004054:	4618      	mov	r0, r3
 8004056:	f000 fceb 	bl	8004a30 <RCCEx_PLL3_Config>
 800405a:	4603      	mov	r3, r0
 800405c:	2b00      	cmp	r3, #0
 800405e:	d001      	beq.n	8004064 <HAL_RCCEx_PeriphCLKConfig+0xb08>
        {
          status = HAL_ERROR;
 8004060:	2301      	movs	r3, #1
 8004062:	75bb      	strb	r3, [r7, #22]
        }
    }

      __HAL_RCC_I2C1235_CONFIG(PeriphClkInit->I2c1235ClockSelection);
 8004064:	4b4e      	ldr	r3, [pc, #312]	; (80041a0 <HAL_RCCEx_PeriphCLKConfig+0xc44>)
 8004066:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004068:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 800406c:	687b      	ldr	r3, [r7, #4]
 800406e:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8004070:	494b      	ldr	r1, [pc, #300]	; (80041a0 <HAL_RCCEx_PeriphCLKConfig+0xc44>)
 8004072:	4313      	orrs	r3, r2
 8004074:	654b      	str	r3, [r1, #84]	; 0x54

  }
#endif /* I2C5 */

  /*------------------------------ I2C4 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8004076:	687b      	ldr	r3, [r7, #4]
 8004078:	681b      	ldr	r3, [r3, #0]
 800407a:	f003 0310 	and.w	r3, r3, #16
 800407e:	2b00      	cmp	r3, #0
 8004080:	d01a      	beq.n	80040b8 <HAL_RCCEx_PeriphCLKConfig+0xb5c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    if ((PeriphClkInit->I2c4ClockSelection) == RCC_I2C4CLKSOURCE_PLL3 )
 8004082:	687b      	ldr	r3, [r7, #4]
 8004084:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004088:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800408c:	d10a      	bne.n	80040a4 <HAL_RCCEx_PeriphCLKConfig+0xb48>
    {
      if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!= HAL_OK)
 800408e:	687b      	ldr	r3, [r7, #4]
 8004090:	3324      	adds	r3, #36	; 0x24
 8004092:	2102      	movs	r1, #2
 8004094:	4618      	mov	r0, r3
 8004096:	f000 fccb 	bl	8004a30 <RCCEx_PLL3_Config>
 800409a:	4603      	mov	r3, r0
 800409c:	2b00      	cmp	r3, #0
 800409e:	d001      	beq.n	80040a4 <HAL_RCCEx_PeriphCLKConfig+0xb48>
      {
        status = HAL_ERROR;
 80040a0:	2301      	movs	r3, #1
 80040a2:	75bb      	strb	r3, [r7, #22]
      }
    }

      __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 80040a4:	4b3e      	ldr	r3, [pc, #248]	; (80041a0 <HAL_RCCEx_PeriphCLKConfig+0xc44>)
 80040a6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80040a8:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80040ac:	687b      	ldr	r3, [r7, #4]
 80040ae:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80040b2:	493b      	ldr	r1, [pc, #236]	; (80041a0 <HAL_RCCEx_PeriphCLKConfig+0xc44>)
 80040b4:	4313      	orrs	r3, r2
 80040b6:	658b      	str	r3, [r1, #88]	; 0x58

  }

  /*---------------------------- ADC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 80040b8:	687b      	ldr	r3, [r7, #4]
 80040ba:	681b      	ldr	r3, [r3, #0]
 80040bc:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80040c0:	2b00      	cmp	r3, #0
 80040c2:	d034      	beq.n	800412e <HAL_RCCEx_PeriphCLKConfig+0xbd2>
  {
    switch(PeriphClkInit->AdcClockSelection)
 80040c4:	687b      	ldr	r3, [r7, #4]
 80040c6:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80040ca:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80040ce:	d01d      	beq.n	800410c <HAL_RCCEx_PeriphCLKConfig+0xbb0>
 80040d0:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80040d4:	d817      	bhi.n	8004106 <HAL_RCCEx_PeriphCLKConfig+0xbaa>
 80040d6:	2b00      	cmp	r3, #0
 80040d8:	d003      	beq.n	80040e2 <HAL_RCCEx_PeriphCLKConfig+0xb86>
 80040da:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80040de:	d009      	beq.n	80040f4 <HAL_RCCEx_PeriphCLKConfig+0xb98>
 80040e0:	e011      	b.n	8004106 <HAL_RCCEx_PeriphCLKConfig+0xbaa>
    {

    case RCC_ADCCLKSOURCE_PLL2: /* PLL2 is used as clock source for ADC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 80040e2:	687b      	ldr	r3, [r7, #4]
 80040e4:	3304      	adds	r3, #4
 80040e6:	2100      	movs	r1, #0
 80040e8:	4618      	mov	r0, r3
 80040ea:	f000 fbef 	bl	80048cc <RCCEx_PLL2_Config>
 80040ee:	4603      	mov	r3, r0
 80040f0:	75fb      	strb	r3, [r7, #23]

      /* ADC clock source configuration done later after clock selection check */
      break;
 80040f2:	e00c      	b.n	800410e <HAL_RCCEx_PeriphCLKConfig+0xbb2>

    case RCC_ADCCLKSOURCE_PLL3:  /* PLL3 is used as clock source for ADC*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 80040f4:	687b      	ldr	r3, [r7, #4]
 80040f6:	3324      	adds	r3, #36	; 0x24
 80040f8:	2102      	movs	r1, #2
 80040fa:	4618      	mov	r0, r3
 80040fc:	f000 fc98 	bl	8004a30 <RCCEx_PLL3_Config>
 8004100:	4603      	mov	r3, r0
 8004102:	75fb      	strb	r3, [r7, #23]

      /* ADC clock source configuration done later after clock selection check */
      break;
 8004104:	e003      	b.n	800410e <HAL_RCCEx_PeriphCLKConfig+0xbb2>
      /* HSI, HSE, or CSI oscillator is used as source of ADC clock */
      /* ADC clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8004106:	2301      	movs	r3, #1
 8004108:	75fb      	strb	r3, [r7, #23]
      break;
 800410a:	e000      	b.n	800410e <HAL_RCCEx_PeriphCLKConfig+0xbb2>
      break;
 800410c:	bf00      	nop
    }

    if(ret == HAL_OK)
 800410e:	7dfb      	ldrb	r3, [r7, #23]
 8004110:	2b00      	cmp	r3, #0
 8004112:	d10a      	bne.n	800412a <HAL_RCCEx_PeriphCLKConfig+0xbce>
    {
      /* Set the source of ADC clock*/
      __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8004114:	4b22      	ldr	r3, [pc, #136]	; (80041a0 <HAL_RCCEx_PeriphCLKConfig+0xc44>)
 8004116:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004118:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 800411c:	687b      	ldr	r3, [r7, #4]
 800411e:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8004122:	491f      	ldr	r1, [pc, #124]	; (80041a0 <HAL_RCCEx_PeriphCLKConfig+0xc44>)
 8004124:	4313      	orrs	r3, r2
 8004126:	658b      	str	r3, [r1, #88]	; 0x58
 8004128:	e001      	b.n	800412e <HAL_RCCEx_PeriphCLKConfig+0xbd2>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800412a:	7dfb      	ldrb	r3, [r7, #23]
 800412c:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*------------------------------ USB Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 800412e:	687b      	ldr	r3, [r7, #4]
 8004130:	681b      	ldr	r3, [r3, #0]
 8004132:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8004136:	2b00      	cmp	r3, #0
 8004138:	d036      	beq.n	80041a8 <HAL_RCCEx_PeriphCLKConfig+0xc4c>
  {

    switch(PeriphClkInit->UsbClockSelection)
 800413a:	687b      	ldr	r3, [r7, #4]
 800413c:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8004140:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8004144:	d01c      	beq.n	8004180 <HAL_RCCEx_PeriphCLKConfig+0xc24>
 8004146:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 800414a:	d816      	bhi.n	800417a <HAL_RCCEx_PeriphCLKConfig+0xc1e>
 800414c:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8004150:	d003      	beq.n	800415a <HAL_RCCEx_PeriphCLKConfig+0xbfe>
 8004152:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8004156:	d007      	beq.n	8004168 <HAL_RCCEx_PeriphCLKConfig+0xc0c>
 8004158:	e00f      	b.n	800417a <HAL_RCCEx_PeriphCLKConfig+0xc1e>
    {
    case RCC_USBCLKSOURCE_PLL:      /* PLL is used as clock source for USB*/
      /* Enable USB Clock output generated form System USB . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800415a:	4b11      	ldr	r3, [pc, #68]	; (80041a0 <HAL_RCCEx_PeriphCLKConfig+0xc44>)
 800415c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800415e:	4a10      	ldr	r2, [pc, #64]	; (80041a0 <HAL_RCCEx_PeriphCLKConfig+0xc44>)
 8004160:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004164:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* USB clock source configuration done later after clock selection check */
      break;
 8004166:	e00c      	b.n	8004182 <HAL_RCCEx_PeriphCLKConfig+0xc26>

    case RCC_USBCLKSOURCE_PLL3: /* PLL3 is used as clock source for USB*/

      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8004168:	687b      	ldr	r3, [r7, #4]
 800416a:	3324      	adds	r3, #36	; 0x24
 800416c:	2101      	movs	r1, #1
 800416e:	4618      	mov	r0, r3
 8004170:	f000 fc5e 	bl	8004a30 <RCCEx_PLL3_Config>
 8004174:	4603      	mov	r3, r0
 8004176:	75fb      	strb	r3, [r7, #23]

      /* USB clock source configuration done later after clock selection check */
      break;
 8004178:	e003      	b.n	8004182 <HAL_RCCEx_PeriphCLKConfig+0xc26>
      /* HSI48 oscillator is used as source of USB clock */
      /* USB clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800417a:	2301      	movs	r3, #1
 800417c:	75fb      	strb	r3, [r7, #23]
      break;
 800417e:	e000      	b.n	8004182 <HAL_RCCEx_PeriphCLKConfig+0xc26>
      break;
 8004180:	bf00      	nop
    }

    if(ret == HAL_OK)
 8004182:	7dfb      	ldrb	r3, [r7, #23]
 8004184:	2b00      	cmp	r3, #0
 8004186:	d10d      	bne.n	80041a4 <HAL_RCCEx_PeriphCLKConfig+0xc48>
    {
      /* Set the source of USB clock*/
      __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8004188:	4b05      	ldr	r3, [pc, #20]	; (80041a0 <HAL_RCCEx_PeriphCLKConfig+0xc44>)
 800418a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800418c:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8004190:	687b      	ldr	r3, [r7, #4]
 8004192:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8004196:	4902      	ldr	r1, [pc, #8]	; (80041a0 <HAL_RCCEx_PeriphCLKConfig+0xc44>)
 8004198:	4313      	orrs	r3, r2
 800419a:	654b      	str	r3, [r1, #84]	; 0x54
 800419c:	e004      	b.n	80041a8 <HAL_RCCEx_PeriphCLKConfig+0xc4c>
 800419e:	bf00      	nop
 80041a0:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 80041a4:	7dfb      	ldrb	r3, [r7, #23]
 80041a6:	75bb      	strb	r3, [r7, #22]
    }

  }

  /*------------------------------------- SDMMC Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == RCC_PERIPHCLK_SDMMC)
 80041a8:	687b      	ldr	r3, [r7, #4]
 80041aa:	681b      	ldr	r3, [r3, #0]
 80041ac:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80041b0:	2b00      	cmp	r3, #0
 80041b2:	d029      	beq.n	8004208 <HAL_RCCEx_PeriphCLKConfig+0xcac>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC(PeriphClkInit->SdmmcClockSelection));

    switch(PeriphClkInit->SdmmcClockSelection)
 80041b4:	687b      	ldr	r3, [r7, #4]
 80041b6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80041b8:	2b00      	cmp	r3, #0
 80041ba:	d003      	beq.n	80041c4 <HAL_RCCEx_PeriphCLKConfig+0xc68>
 80041bc:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80041c0:	d007      	beq.n	80041d2 <HAL_RCCEx_PeriphCLKConfig+0xc76>
 80041c2:	e00f      	b.n	80041e4 <HAL_RCCEx_PeriphCLKConfig+0xc88>
    {
    case RCC_SDMMCCLKSOURCE_PLL:      /* PLL is used as clock source for SDMMC*/
      /* Enable SDMMC Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80041c4:	4b61      	ldr	r3, [pc, #388]	; (800434c <HAL_RCCEx_PeriphCLKConfig+0xdf0>)
 80041c6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80041c8:	4a60      	ldr	r2, [pc, #384]	; (800434c <HAL_RCCEx_PeriphCLKConfig+0xdf0>)
 80041ca:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80041ce:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SDMMC clock source configuration done later after clock selection check */
      break;
 80041d0:	e00b      	b.n	80041ea <HAL_RCCEx_PeriphCLKConfig+0xc8e>

    case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for SDMMC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 80041d2:	687b      	ldr	r3, [r7, #4]
 80041d4:	3304      	adds	r3, #4
 80041d6:	2102      	movs	r1, #2
 80041d8:	4618      	mov	r0, r3
 80041da:	f000 fb77 	bl	80048cc <RCCEx_PLL2_Config>
 80041de:	4603      	mov	r3, r0
 80041e0:	75fb      	strb	r3, [r7, #23]

      /* SDMMC clock source configuration done later after clock selection check */
      break;
 80041e2:	e002      	b.n	80041ea <HAL_RCCEx_PeriphCLKConfig+0xc8e>

    default:
      ret = HAL_ERROR;
 80041e4:	2301      	movs	r3, #1
 80041e6:	75fb      	strb	r3, [r7, #23]
      break;
 80041e8:	bf00      	nop
    }

    if(ret == HAL_OK)
 80041ea:	7dfb      	ldrb	r3, [r7, #23]
 80041ec:	2b00      	cmp	r3, #0
 80041ee:	d109      	bne.n	8004204 <HAL_RCCEx_PeriphCLKConfig+0xca8>
    {
      /* Set the source of SDMMC clock*/
      __HAL_RCC_SDMMC_CONFIG(PeriphClkInit->SdmmcClockSelection);
 80041f0:	4b56      	ldr	r3, [pc, #344]	; (800434c <HAL_RCCEx_PeriphCLKConfig+0xdf0>)
 80041f2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80041f4:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 80041f8:	687b      	ldr	r3, [r7, #4]
 80041fa:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80041fc:	4953      	ldr	r1, [pc, #332]	; (800434c <HAL_RCCEx_PeriphCLKConfig+0xdf0>)
 80041fe:	4313      	orrs	r3, r2
 8004200:	64cb      	str	r3, [r1, #76]	; 0x4c
 8004202:	e001      	b.n	8004208 <HAL_RCCEx_PeriphCLKConfig+0xcac>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004204:	7dfb      	ldrb	r3, [r7, #23]
 8004206:	75bb      	strb	r3, [r7, #22]
    }
  }

#if defined(LTDC)
  /*-------------------------------------- LTDC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 8004208:	687b      	ldr	r3, [r7, #4]
 800420a:	681b      	ldr	r3, [r3, #0]
 800420c:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8004210:	2b00      	cmp	r3, #0
 8004212:	d00a      	beq.n	800422a <HAL_RCCEx_PeriphCLKConfig+0xcce>
  {
    if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!=HAL_OK)
 8004214:	687b      	ldr	r3, [r7, #4]
 8004216:	3324      	adds	r3, #36	; 0x24
 8004218:	2102      	movs	r1, #2
 800421a:	4618      	mov	r0, r3
 800421c:	f000 fc08 	bl	8004a30 <RCCEx_PLL3_Config>
 8004220:	4603      	mov	r3, r0
 8004222:	2b00      	cmp	r3, #0
 8004224:	d001      	beq.n	800422a <HAL_RCCEx_PeriphCLKConfig+0xcce>
    {
      status=HAL_ERROR;
 8004226:	2301      	movs	r3, #1
 8004228:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif /* LTDC */

  /*------------------------------ RNG Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 800422a:	687b      	ldr	r3, [r7, #4]
 800422c:	681b      	ldr	r3, [r3, #0]
 800422e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004232:	2b00      	cmp	r3, #0
 8004234:	d030      	beq.n	8004298 <HAL_RCCEx_PeriphCLKConfig+0xd3c>
  {

    switch(PeriphClkInit->RngClockSelection)
 8004236:	687b      	ldr	r3, [r7, #4]
 8004238:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800423a:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800423e:	d017      	beq.n	8004270 <HAL_RCCEx_PeriphCLKConfig+0xd14>
 8004240:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8004244:	d811      	bhi.n	800426a <HAL_RCCEx_PeriphCLKConfig+0xd0e>
 8004246:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800424a:	d013      	beq.n	8004274 <HAL_RCCEx_PeriphCLKConfig+0xd18>
 800424c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004250:	d80b      	bhi.n	800426a <HAL_RCCEx_PeriphCLKConfig+0xd0e>
 8004252:	2b00      	cmp	r3, #0
 8004254:	d010      	beq.n	8004278 <HAL_RCCEx_PeriphCLKConfig+0xd1c>
 8004256:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800425a:	d106      	bne.n	800426a <HAL_RCCEx_PeriphCLKConfig+0xd0e>
    {
    case RCC_RNGCLKSOURCE_PLL:     /* PLL is used as clock source for RNG*/
      /* Enable RNG Clock output generated form System RNG . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800425c:	4b3b      	ldr	r3, [pc, #236]	; (800434c <HAL_RCCEx_PeriphCLKConfig+0xdf0>)
 800425e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004260:	4a3a      	ldr	r2, [pc, #232]	; (800434c <HAL_RCCEx_PeriphCLKConfig+0xdf0>)
 8004262:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004266:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* RNG clock source configuration done later after clock selection check */
      break;
 8004268:	e007      	b.n	800427a <HAL_RCCEx_PeriphCLKConfig+0xd1e>
      /* HSI48 oscillator is used as source of RNG clock */
      /* RNG clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800426a:	2301      	movs	r3, #1
 800426c:	75fb      	strb	r3, [r7, #23]
      break;
 800426e:	e004      	b.n	800427a <HAL_RCCEx_PeriphCLKConfig+0xd1e>
      break;
 8004270:	bf00      	nop
 8004272:	e002      	b.n	800427a <HAL_RCCEx_PeriphCLKConfig+0xd1e>
      break;
 8004274:	bf00      	nop
 8004276:	e000      	b.n	800427a <HAL_RCCEx_PeriphCLKConfig+0xd1e>
      break;
 8004278:	bf00      	nop
    }

    if(ret == HAL_OK)
 800427a:	7dfb      	ldrb	r3, [r7, #23]
 800427c:	2b00      	cmp	r3, #0
 800427e:	d109      	bne.n	8004294 <HAL_RCCEx_PeriphCLKConfig+0xd38>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8004280:	4b32      	ldr	r3, [pc, #200]	; (800434c <HAL_RCCEx_PeriphCLKConfig+0xdf0>)
 8004282:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004284:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8004288:	687b      	ldr	r3, [r7, #4]
 800428a:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800428c:	492f      	ldr	r1, [pc, #188]	; (800434c <HAL_RCCEx_PeriphCLKConfig+0xdf0>)
 800428e:	4313      	orrs	r3, r2
 8004290:	654b      	str	r3, [r1, #84]	; 0x54
 8004292:	e001      	b.n	8004298 <HAL_RCCEx_PeriphCLKConfig+0xd3c>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004294:	7dfb      	ldrb	r3, [r7, #23]
 8004296:	75bb      	strb	r3, [r7, #22]
    }

  }

  /*------------------------------ SWPMI1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8004298:	687b      	ldr	r3, [r7, #4]
 800429a:	681b      	ldr	r3, [r3, #0]
 800429c:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80042a0:	2b00      	cmp	r3, #0
 80042a2:	d008      	beq.n	80042b6 <HAL_RCCEx_PeriphCLKConfig+0xd5a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 interface clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 80042a4:	4b29      	ldr	r3, [pc, #164]	; (800434c <HAL_RCCEx_PeriphCLKConfig+0xdf0>)
 80042a6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80042a8:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 80042ac:	687b      	ldr	r3, [r7, #4]
 80042ae:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80042b0:	4926      	ldr	r1, [pc, #152]	; (800434c <HAL_RCCEx_PeriphCLKConfig+0xdf0>)
 80042b2:	4313      	orrs	r3, r2
 80042b4:	650b      	str	r3, [r1, #80]	; 0x50
    /* Configure the HRTIM1 clock source */
    __HAL_RCC_HRTIM1_CONFIG(PeriphClkInit->Hrtim1ClockSelection);
  }
#endif  /*HRTIM1*/
  /*------------------------------ DFSDM1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 80042b6:	687b      	ldr	r3, [r7, #4]
 80042b8:	681b      	ldr	r3, [r3, #0]
 80042ba:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80042be:	2b00      	cmp	r3, #0
 80042c0:	d008      	beq.n	80042d4 <HAL_RCCEx_PeriphCLKConfig+0xd78>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 80042c2:	4b22      	ldr	r3, [pc, #136]	; (800434c <HAL_RCCEx_PeriphCLKConfig+0xdf0>)
 80042c4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80042c6:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 80042ca:	687b      	ldr	r3, [r7, #4]
 80042cc:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80042ce:	491f      	ldr	r1, [pc, #124]	; (800434c <HAL_RCCEx_PeriphCLKConfig+0xdf0>)
 80042d0:	4313      	orrs	r3, r2
 80042d2:	650b      	str	r3, [r1, #80]	; 0x50
    __HAL_RCC_DFSDM2_CONFIG(PeriphClkInit->Dfsdm2ClockSelection);
  }
#endif  /* DFSDM2 */

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
 80042d4:	687b      	ldr	r3, [r7, #4]
 80042d6:	681b      	ldr	r3, [r3, #0]
 80042d8:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 80042dc:	2b00      	cmp	r3, #0
 80042de:	d00d      	beq.n	80042fc <HAL_RCCEx_PeriphCLKConfig+0xda0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 80042e0:	4b1a      	ldr	r3, [pc, #104]	; (800434c <HAL_RCCEx_PeriphCLKConfig+0xdf0>)
 80042e2:	691b      	ldr	r3, [r3, #16]
 80042e4:	4a19      	ldr	r2, [pc, #100]	; (800434c <HAL_RCCEx_PeriphCLKConfig+0xdf0>)
 80042e6:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 80042ea:	6113      	str	r3, [r2, #16]
 80042ec:	4b17      	ldr	r3, [pc, #92]	; (800434c <HAL_RCCEx_PeriphCLKConfig+0xdf0>)
 80042ee:	691a      	ldr	r2, [r3, #16]
 80042f0:	687b      	ldr	r3, [r7, #4]
 80042f2:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 80042f6:	4915      	ldr	r1, [pc, #84]	; (800434c <HAL_RCCEx_PeriphCLKConfig+0xdf0>)
 80042f8:	4313      	orrs	r3, r2
 80042fa:	610b      	str	r3, [r1, #16]
  }

  /*------------------------------------ CKPER configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
 80042fc:	687b      	ldr	r3, [r7, #4]
 80042fe:	681b      	ldr	r3, [r3, #0]
 8004300:	2b00      	cmp	r3, #0
 8004302:	da08      	bge.n	8004316 <HAL_RCCEx_PeriphCLKConfig+0xdba>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLKPSOURCE(PeriphClkInit->CkperClockSelection));

    /* Configure the CKPER clock source */
    __HAL_RCC_CLKP_CONFIG(PeriphClkInit->CkperClockSelection);
 8004304:	4b11      	ldr	r3, [pc, #68]	; (800434c <HAL_RCCEx_PeriphCLKConfig+0xdf0>)
 8004306:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004308:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 800430c:	687b      	ldr	r3, [r7, #4]
 800430e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004310:	490e      	ldr	r1, [pc, #56]	; (800434c <HAL_RCCEx_PeriphCLKConfig+0xdf0>)
 8004312:	4313      	orrs	r3, r2
 8004314:	64cb      	str	r3, [r1, #76]	; 0x4c
  }

  /*------------------------------ CEC Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8004316:	687b      	ldr	r3, [r7, #4]
 8004318:	681b      	ldr	r3, [r3, #0]
 800431a:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800431e:	2b00      	cmp	r3, #0
 8004320:	d009      	beq.n	8004336 <HAL_RCCEx_PeriphCLKConfig+0xdda>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC interface clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8004322:	4b0a      	ldr	r3, [pc, #40]	; (800434c <HAL_RCCEx_PeriphCLKConfig+0xdf0>)
 8004324:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004326:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 800432a:	687b      	ldr	r3, [r7, #4]
 800432c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004330:	4906      	ldr	r1, [pc, #24]	; (800434c <HAL_RCCEx_PeriphCLKConfig+0xdf0>)
 8004332:	4313      	orrs	r3, r2
 8004334:	654b      	str	r3, [r1, #84]	; 0x54
  }

  if (status == HAL_OK)
 8004336:	7dbb      	ldrb	r3, [r7, #22]
 8004338:	2b00      	cmp	r3, #0
 800433a:	d101      	bne.n	8004340 <HAL_RCCEx_PeriphCLKConfig+0xde4>
  {
    return HAL_OK;
 800433c:	2300      	movs	r3, #0
 800433e:	e000      	b.n	8004342 <HAL_RCCEx_PeriphCLKConfig+0xde6>
  }
  return HAL_ERROR;
 8004340:	2301      	movs	r3, #1
}
 8004342:	4618      	mov	r0, r3
 8004344:	3718      	adds	r7, #24
 8004346:	46bd      	mov	sp, r7
 8004348:	bd80      	pop	{r7, pc}
 800434a:	bf00      	nop
 800434c:	58024400 	.word	0x58024400

08004350 <HAL_RCCEx_GetD3PCLK1Freq>:
  * @note   Each time D3PCLK1 changes, this function must be called to update the
  *         right D3PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval D3PCLK1 frequency
  */
uint32_t HAL_RCCEx_GetD3PCLK1Freq(void)
{
 8004350:	b580      	push	{r7, lr}
 8004352:	af00      	add	r7, sp, #0
#if defined(RCC_D3CFGR_D3PPRE)
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->D3CFGR & RCC_D3CFGR_D3PPRE)>> RCC_D3CFGR_D3PPRE_Pos] & 0x1FU));
 8004354:	f7ff f8a6 	bl	80034a4 <HAL_RCC_GetHCLKFreq>
 8004358:	4602      	mov	r2, r0
 800435a:	4b06      	ldr	r3, [pc, #24]	; (8004374 <HAL_RCCEx_GetD3PCLK1Freq+0x24>)
 800435c:	6a1b      	ldr	r3, [r3, #32]
 800435e:	091b      	lsrs	r3, r3, #4
 8004360:	f003 0307 	and.w	r3, r3, #7
 8004364:	4904      	ldr	r1, [pc, #16]	; (8004378 <HAL_RCCEx_GetD3PCLK1Freq+0x28>)
 8004366:	5ccb      	ldrb	r3, [r1, r3]
 8004368:	f003 031f 	and.w	r3, r3, #31
 800436c:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE)>> RCC_SRDCFGR_SRDPPRE_Pos] & 0x1FU));
#endif
}
 8004370:	4618      	mov	r0, r3
 8004372:	bd80      	pop	{r7, pc}
 8004374:	58024400 	.word	0x58024400
 8004378:	08007c10 	.word	0x08007c10

0800437c <HAL_RCCEx_GetPLL2ClockFreq>:
  *         right PLL2CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL2_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL2ClockFreq(PLL2_ClocksTypeDef* PLL2_Clocks)
{
 800437c:	b480      	push	{r7}
 800437e:	b089      	sub	sp, #36	; 0x24
 8004380:	af00      	add	r7, sp, #0
 8004382:	6078      	str	r0, [r7, #4]
  float_t fracn2, pll2vco;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL2M) * PLL2N
     PLL2xCLK = PLL2_VCO / PLL2x
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8004384:	4ba1      	ldr	r3, [pc, #644]	; (800460c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8004386:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004388:	f003 0303 	and.w	r3, r3, #3
 800438c:	61bb      	str	r3, [r7, #24]
  pll2m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM2)>> 12);
 800438e:	4b9f      	ldr	r3, [pc, #636]	; (800460c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8004390:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004392:	0b1b      	lsrs	r3, r3, #12
 8004394:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8004398:	617b      	str	r3, [r7, #20]
  pll2fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL2FRACEN) >> RCC_PLLCFGR_PLL2FRACEN_Pos;
 800439a:	4b9c      	ldr	r3, [pc, #624]	; (800460c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800439c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800439e:	091b      	lsrs	r3, r3, #4
 80043a0:	f003 0301 	and.w	r3, r3, #1
 80043a4:	613b      	str	r3, [r7, #16]
  fracn2 =(float_t)(uint32_t)(pll2fracen* ((RCC->PLL2FRACR & RCC_PLL2FRACR_FRACN2)>> 3));
 80043a6:	4b99      	ldr	r3, [pc, #612]	; (800460c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80043a8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80043aa:	08db      	lsrs	r3, r3, #3
 80043ac:	f3c3 030c 	ubfx	r3, r3, #0, #13
 80043b0:	693a      	ldr	r2, [r7, #16]
 80043b2:	fb02 f303 	mul.w	r3, r2, r3
 80043b6:	ee07 3a90 	vmov	s15, r3
 80043ba:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80043be:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll2m != 0U)
 80043c2:	697b      	ldr	r3, [r7, #20]
 80043c4:	2b00      	cmp	r3, #0
 80043c6:	f000 8111 	beq.w	80045ec <HAL_RCCEx_GetPLL2ClockFreq+0x270>
  {
    switch (pllsource)
 80043ca:	69bb      	ldr	r3, [r7, #24]
 80043cc:	2b02      	cmp	r3, #2
 80043ce:	f000 8083 	beq.w	80044d8 <HAL_RCCEx_GetPLL2ClockFreq+0x15c>
 80043d2:	69bb      	ldr	r3, [r7, #24]
 80043d4:	2b02      	cmp	r3, #2
 80043d6:	f200 80a1 	bhi.w	800451c <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
 80043da:	69bb      	ldr	r3, [r7, #24]
 80043dc:	2b00      	cmp	r3, #0
 80043de:	d003      	beq.n	80043e8 <HAL_RCCEx_GetPLL2ClockFreq+0x6c>
 80043e0:	69bb      	ldr	r3, [r7, #24]
 80043e2:	2b01      	cmp	r3, #1
 80043e4:	d056      	beq.n	8004494 <HAL_RCCEx_GetPLL2ClockFreq+0x118>
 80043e6:	e099      	b.n	800451c <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
    {

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80043e8:	4b88      	ldr	r3, [pc, #544]	; (800460c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80043ea:	681b      	ldr	r3, [r3, #0]
 80043ec:	f003 0320 	and.w	r3, r3, #32
 80043f0:	2b00      	cmp	r3, #0
 80043f2:	d02d      	beq.n	8004450 <HAL_RCCEx_GetPLL2ClockFreq+0xd4>
      {
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 80043f4:	4b85      	ldr	r3, [pc, #532]	; (800460c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80043f6:	681b      	ldr	r3, [r3, #0]
 80043f8:	08db      	lsrs	r3, r3, #3
 80043fa:	f003 0303 	and.w	r3, r3, #3
 80043fe:	4a84      	ldr	r2, [pc, #528]	; (8004610 <HAL_RCCEx_GetPLL2ClockFreq+0x294>)
 8004400:	fa22 f303 	lsr.w	r3, r2, r3
 8004404:	60bb      	str	r3, [r7, #8]
        pll2vco = ( (float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 8004406:	68bb      	ldr	r3, [r7, #8]
 8004408:	ee07 3a90 	vmov	s15, r3
 800440c:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004410:	697b      	ldr	r3, [r7, #20]
 8004412:	ee07 3a90 	vmov	s15, r3
 8004416:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800441a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800441e:	4b7b      	ldr	r3, [pc, #492]	; (800460c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8004420:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004422:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004426:	ee07 3a90 	vmov	s15, r3
 800442a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800442e:	ed97 6a03 	vldr	s12, [r7, #12]
 8004432:	eddf 5a78 	vldr	s11, [pc, #480]	; 8004614 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8004436:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800443a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800443e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8004442:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004446:	ee67 7a27 	vmul.f32	s15, s14, s15
 800444a:	edc7 7a07 	vstr	s15, [r7, #28]
      }
      else
      {
        pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
      }
      break;
 800444e:	e087      	b.n	8004560 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>
        pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 8004450:	697b      	ldr	r3, [r7, #20]
 8004452:	ee07 3a90 	vmov	s15, r3
 8004456:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800445a:	eddf 6a6f 	vldr	s13, [pc, #444]	; 8004618 <HAL_RCCEx_GetPLL2ClockFreq+0x29c>
 800445e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004462:	4b6a      	ldr	r3, [pc, #424]	; (800460c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8004464:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004466:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800446a:	ee07 3a90 	vmov	s15, r3
 800446e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004472:	ed97 6a03 	vldr	s12, [r7, #12]
 8004476:	eddf 5a67 	vldr	s11, [pc, #412]	; 8004614 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800447a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800447e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004482:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8004486:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800448a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800448e:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8004492:	e065      	b.n	8004560 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

    case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
      pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 8004494:	697b      	ldr	r3, [r7, #20]
 8004496:	ee07 3a90 	vmov	s15, r3
 800449a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800449e:	eddf 6a5f 	vldr	s13, [pc, #380]	; 800461c <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 80044a2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80044a6:	4b59      	ldr	r3, [pc, #356]	; (800460c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80044a8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80044aa:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80044ae:	ee07 3a90 	vmov	s15, r3
 80044b2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80044b6:	ed97 6a03 	vldr	s12, [r7, #12]
 80044ba:	eddf 5a56 	vldr	s11, [pc, #344]	; 8004614 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 80044be:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80044c2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80044c6:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80044ca:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80044ce:	ee67 7a27 	vmul.f32	s15, s14, s15
 80044d2:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 80044d6:	e043      	b.n	8004560 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 80044d8:	697b      	ldr	r3, [r7, #20]
 80044da:	ee07 3a90 	vmov	s15, r3
 80044de:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80044e2:	eddf 6a4f 	vldr	s13, [pc, #316]	; 8004620 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>
 80044e6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80044ea:	4b48      	ldr	r3, [pc, #288]	; (800460c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80044ec:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80044ee:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80044f2:	ee07 3a90 	vmov	s15, r3
 80044f6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80044fa:	ed97 6a03 	vldr	s12, [r7, #12]
 80044fe:	eddf 5a45 	vldr	s11, [pc, #276]	; 8004614 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8004502:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004506:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800450a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800450e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004512:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004516:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800451a:	e021      	b.n	8004560 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

    default:
      pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 800451c:	697b      	ldr	r3, [r7, #20]
 800451e:	ee07 3a90 	vmov	s15, r3
 8004522:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004526:	eddf 6a3d 	vldr	s13, [pc, #244]	; 800461c <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 800452a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800452e:	4b37      	ldr	r3, [pc, #220]	; (800460c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8004530:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004532:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004536:	ee07 3a90 	vmov	s15, r3
 800453a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800453e:	ed97 6a03 	vldr	s12, [r7, #12]
 8004542:	eddf 5a34 	vldr	s11, [pc, #208]	; 8004614 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8004546:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800454a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800454e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8004552:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004556:	ee67 7a27 	vmul.f32	s15, s14, s15
 800455a:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800455e:	bf00      	nop
    }
    PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_P2) >>9)  + (float_t)1 )) ;
 8004560:	4b2a      	ldr	r3, [pc, #168]	; (800460c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8004562:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004564:	0a5b      	lsrs	r3, r3, #9
 8004566:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800456a:	ee07 3a90 	vmov	s15, r3
 800456e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004572:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8004576:	ee37 7a87 	vadd.f32	s14, s15, s14
 800457a:	edd7 6a07 	vldr	s13, [r7, #28]
 800457e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8004582:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8004586:	ee17 2a90 	vmov	r2, s15
 800458a:	687b      	ldr	r3, [r7, #4]
 800458c:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_Q2) >>16) + (float_t)1 )) ;
 800458e:	4b1f      	ldr	r3, [pc, #124]	; (800460c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8004590:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004592:	0c1b      	lsrs	r3, r3, #16
 8004594:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8004598:	ee07 3a90 	vmov	s15, r3
 800459c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80045a0:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80045a4:	ee37 7a87 	vadd.f32	s14, s15, s14
 80045a8:	edd7 6a07 	vldr	s13, [r7, #28]
 80045ac:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80045b0:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80045b4:	ee17 2a90 	vmov	r2, s15
 80045b8:	687b      	ldr	r3, [r7, #4]
 80045ba:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_R2) >>24) + (float_t)1 )) ;
 80045bc:	4b13      	ldr	r3, [pc, #76]	; (800460c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80045be:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80045c0:	0e1b      	lsrs	r3, r3, #24
 80045c2:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80045c6:	ee07 3a90 	vmov	s15, r3
 80045ca:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80045ce:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80045d2:	ee37 7a87 	vadd.f32	s14, s15, s14
 80045d6:	edd7 6a07 	vldr	s13, [r7, #28]
 80045da:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80045de:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80045e2:	ee17 2a90 	vmov	r2, s15
 80045e6:	687b      	ldr	r3, [r7, #4]
 80045e8:	609a      	str	r2, [r3, #8]
  {
    PLL2_Clocks->PLL2_P_Frequency = 0U;
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
    PLL2_Clocks->PLL2_R_Frequency = 0U;
  }
}
 80045ea:	e008      	b.n	80045fe <HAL_RCCEx_GetPLL2ClockFreq+0x282>
    PLL2_Clocks->PLL2_P_Frequency = 0U;
 80045ec:	687b      	ldr	r3, [r7, #4]
 80045ee:	2200      	movs	r2, #0
 80045f0:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
 80045f2:	687b      	ldr	r3, [r7, #4]
 80045f4:	2200      	movs	r2, #0
 80045f6:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = 0U;
 80045f8:	687b      	ldr	r3, [r7, #4]
 80045fa:	2200      	movs	r2, #0
 80045fc:	609a      	str	r2, [r3, #8]
}
 80045fe:	bf00      	nop
 8004600:	3724      	adds	r7, #36	; 0x24
 8004602:	46bd      	mov	sp, r7
 8004604:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004608:	4770      	bx	lr
 800460a:	bf00      	nop
 800460c:	58024400 	.word	0x58024400
 8004610:	03d09000 	.word	0x03d09000
 8004614:	46000000 	.word	0x46000000
 8004618:	4c742400 	.word	0x4c742400
 800461c:	4a742400 	.word	0x4a742400
 8004620:	4af42400 	.word	0x4af42400

08004624 <HAL_RCCEx_GetPLL3ClockFreq>:
  *         right PLL3CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL3_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL3ClockFreq(PLL3_ClocksTypeDef* PLL3_Clocks)
{
 8004624:	b480      	push	{r7}
 8004626:	b089      	sub	sp, #36	; 0x24
 8004628:	af00      	add	r7, sp, #0
 800462a:	6078      	str	r0, [r7, #4]
  float_t fracn3, pll3vco;

  /* PLL3_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL3M) * PLL3N
     PLL3xCLK = PLL3_VCO / PLLxR
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 800462c:	4ba1      	ldr	r3, [pc, #644]	; (80048b4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800462e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004630:	f003 0303 	and.w	r3, r3, #3
 8004634:	61bb      	str	r3, [r7, #24]
  pll3m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM3)>> 20)  ;
 8004636:	4b9f      	ldr	r3, [pc, #636]	; (80048b4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8004638:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800463a:	0d1b      	lsrs	r3, r3, #20
 800463c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8004640:	617b      	str	r3, [r7, #20]
  pll3fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL3FRACEN) >> RCC_PLLCFGR_PLL3FRACEN_Pos;
 8004642:	4b9c      	ldr	r3, [pc, #624]	; (80048b4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8004644:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004646:	0a1b      	lsrs	r3, r3, #8
 8004648:	f003 0301 	and.w	r3, r3, #1
 800464c:	613b      	str	r3, [r7, #16]
  fracn3 = (float_t)(uint32_t)(pll3fracen* ((RCC->PLL3FRACR & RCC_PLL3FRACR_FRACN3)>> 3));
 800464e:	4b99      	ldr	r3, [pc, #612]	; (80048b4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8004650:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004652:	08db      	lsrs	r3, r3, #3
 8004654:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8004658:	693a      	ldr	r2, [r7, #16]
 800465a:	fb02 f303 	mul.w	r3, r2, r3
 800465e:	ee07 3a90 	vmov	s15, r3
 8004662:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004666:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll3m != 0U)
 800466a:	697b      	ldr	r3, [r7, #20]
 800466c:	2b00      	cmp	r3, #0
 800466e:	f000 8111 	beq.w	8004894 <HAL_RCCEx_GetPLL3ClockFreq+0x270>
  {
    switch (pllsource)
 8004672:	69bb      	ldr	r3, [r7, #24]
 8004674:	2b02      	cmp	r3, #2
 8004676:	f000 8083 	beq.w	8004780 <HAL_RCCEx_GetPLL3ClockFreq+0x15c>
 800467a:	69bb      	ldr	r3, [r7, #24]
 800467c:	2b02      	cmp	r3, #2
 800467e:	f200 80a1 	bhi.w	80047c4 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
 8004682:	69bb      	ldr	r3, [r7, #24]
 8004684:	2b00      	cmp	r3, #0
 8004686:	d003      	beq.n	8004690 <HAL_RCCEx_GetPLL3ClockFreq+0x6c>
 8004688:	69bb      	ldr	r3, [r7, #24]
 800468a:	2b01      	cmp	r3, #1
 800468c:	d056      	beq.n	800473c <HAL_RCCEx_GetPLL3ClockFreq+0x118>
 800468e:	e099      	b.n	80047c4 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8004690:	4b88      	ldr	r3, [pc, #544]	; (80048b4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8004692:	681b      	ldr	r3, [r3, #0]
 8004694:	f003 0320 	and.w	r3, r3, #32
 8004698:	2b00      	cmp	r3, #0
 800469a:	d02d      	beq.n	80046f8 <HAL_RCCEx_GetPLL3ClockFreq+0xd4>
      {
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 800469c:	4b85      	ldr	r3, [pc, #532]	; (80048b4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800469e:	681b      	ldr	r3, [r3, #0]
 80046a0:	08db      	lsrs	r3, r3, #3
 80046a2:	f003 0303 	and.w	r3, r3, #3
 80046a6:	4a84      	ldr	r2, [pc, #528]	; (80048b8 <HAL_RCCEx_GetPLL3ClockFreq+0x294>)
 80046a8:	fa22 f303 	lsr.w	r3, r2, r3
 80046ac:	60bb      	str	r3, [r7, #8]
        pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 80046ae:	68bb      	ldr	r3, [r7, #8]
 80046b0:	ee07 3a90 	vmov	s15, r3
 80046b4:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80046b8:	697b      	ldr	r3, [r7, #20]
 80046ba:	ee07 3a90 	vmov	s15, r3
 80046be:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80046c2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80046c6:	4b7b      	ldr	r3, [pc, #492]	; (80048b4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80046c8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80046ca:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80046ce:	ee07 3a90 	vmov	s15, r3
 80046d2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80046d6:	ed97 6a03 	vldr	s12, [r7, #12]
 80046da:	eddf 5a78 	vldr	s11, [pc, #480]	; 80048bc <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 80046de:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80046e2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80046e6:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80046ea:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80046ee:	ee67 7a27 	vmul.f32	s15, s14, s15
 80046f2:	edc7 7a07 	vstr	s15, [r7, #28]
      }
      else
      {
        pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
      }
      break;
 80046f6:	e087      	b.n	8004808 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
        pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 80046f8:	697b      	ldr	r3, [r7, #20]
 80046fa:	ee07 3a90 	vmov	s15, r3
 80046fe:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004702:	eddf 6a6f 	vldr	s13, [pc, #444]	; 80048c0 <HAL_RCCEx_GetPLL3ClockFreq+0x29c>
 8004706:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800470a:	4b6a      	ldr	r3, [pc, #424]	; (80048b4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800470c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800470e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004712:	ee07 3a90 	vmov	s15, r3
 8004716:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800471a:	ed97 6a03 	vldr	s12, [r7, #12]
 800471e:	eddf 5a67 	vldr	s11, [pc, #412]	; 80048bc <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8004722:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004726:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800472a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800472e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004732:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004736:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800473a:	e065      	b.n	8004808 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
    case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
      pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 800473c:	697b      	ldr	r3, [r7, #20]
 800473e:	ee07 3a90 	vmov	s15, r3
 8004742:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004746:	eddf 6a5f 	vldr	s13, [pc, #380]	; 80048c4 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 800474a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800474e:	4b59      	ldr	r3, [pc, #356]	; (80048b4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8004750:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004752:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004756:	ee07 3a90 	vmov	s15, r3
 800475a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800475e:	ed97 6a03 	vldr	s12, [r7, #12]
 8004762:	eddf 5a56 	vldr	s11, [pc, #344]	; 80048bc <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8004766:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800476a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800476e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8004772:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004776:	ee67 7a27 	vmul.f32	s15, s14, s15
 800477a:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800477e:	e043      	b.n	8004808 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 8004780:	697b      	ldr	r3, [r7, #20]
 8004782:	ee07 3a90 	vmov	s15, r3
 8004786:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800478a:	eddf 6a4f 	vldr	s13, [pc, #316]	; 80048c8 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>
 800478e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004792:	4b48      	ldr	r3, [pc, #288]	; (80048b4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8004794:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004796:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800479a:	ee07 3a90 	vmov	s15, r3
 800479e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80047a2:	ed97 6a03 	vldr	s12, [r7, #12]
 80047a6:	eddf 5a45 	vldr	s11, [pc, #276]	; 80048bc <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 80047aa:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80047ae:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80047b2:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80047b6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80047ba:	ee67 7a27 	vmul.f32	s15, s14, s15
 80047be:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 80047c2:	e021      	b.n	8004808 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

    default:
      pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 80047c4:	697b      	ldr	r3, [r7, #20]
 80047c6:	ee07 3a90 	vmov	s15, r3
 80047ca:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80047ce:	eddf 6a3d 	vldr	s13, [pc, #244]	; 80048c4 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 80047d2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80047d6:	4b37      	ldr	r3, [pc, #220]	; (80048b4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80047d8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80047da:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80047de:	ee07 3a90 	vmov	s15, r3
 80047e2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80047e6:	ed97 6a03 	vldr	s12, [r7, #12]
 80047ea:	eddf 5a34 	vldr	s11, [pc, #208]	; 80048bc <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 80047ee:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80047f2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80047f6:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80047fa:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80047fe:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004802:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8004806:	bf00      	nop
    }
    PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_P3) >>9)  + (float_t)1 )) ;
 8004808:	4b2a      	ldr	r3, [pc, #168]	; (80048b4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800480a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800480c:	0a5b      	lsrs	r3, r3, #9
 800480e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8004812:	ee07 3a90 	vmov	s15, r3
 8004816:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800481a:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800481e:	ee37 7a87 	vadd.f32	s14, s15, s14
 8004822:	edd7 6a07 	vldr	s13, [r7, #28]
 8004826:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800482a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800482e:	ee17 2a90 	vmov	r2, s15
 8004832:	687b      	ldr	r3, [r7, #4]
 8004834:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_Q3) >>16) + (float_t)1 )) ;
 8004836:	4b1f      	ldr	r3, [pc, #124]	; (80048b4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8004838:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800483a:	0c1b      	lsrs	r3, r3, #16
 800483c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8004840:	ee07 3a90 	vmov	s15, r3
 8004844:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004848:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800484c:	ee37 7a87 	vadd.f32	s14, s15, s14
 8004850:	edd7 6a07 	vldr	s13, [r7, #28]
 8004854:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8004858:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800485c:	ee17 2a90 	vmov	r2, s15
 8004860:	687b      	ldr	r3, [r7, #4]
 8004862:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_R3) >>24) + (float_t)1 )) ;
 8004864:	4b13      	ldr	r3, [pc, #76]	; (80048b4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8004866:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004868:	0e1b      	lsrs	r3, r3, #24
 800486a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800486e:	ee07 3a90 	vmov	s15, r3
 8004872:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004876:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800487a:	ee37 7a87 	vadd.f32	s14, s15, s14
 800487e:	edd7 6a07 	vldr	s13, [r7, #28]
 8004882:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8004886:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800488a:	ee17 2a90 	vmov	r2, s15
 800488e:	687b      	ldr	r3, [r7, #4]
 8004890:	609a      	str	r2, [r3, #8]
    PLL3_Clocks->PLL3_P_Frequency = 0U;
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
    PLL3_Clocks->PLL3_R_Frequency = 0U;
  }

}
 8004892:	e008      	b.n	80048a6 <HAL_RCCEx_GetPLL3ClockFreq+0x282>
    PLL3_Clocks->PLL3_P_Frequency = 0U;
 8004894:	687b      	ldr	r3, [r7, #4]
 8004896:	2200      	movs	r2, #0
 8004898:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
 800489a:	687b      	ldr	r3, [r7, #4]
 800489c:	2200      	movs	r2, #0
 800489e:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = 0U;
 80048a0:	687b      	ldr	r3, [r7, #4]
 80048a2:	2200      	movs	r2, #0
 80048a4:	609a      	str	r2, [r3, #8]
}
 80048a6:	bf00      	nop
 80048a8:	3724      	adds	r7, #36	; 0x24
 80048aa:	46bd      	mov	sp, r7
 80048ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048b0:	4770      	bx	lr
 80048b2:	bf00      	nop
 80048b4:	58024400 	.word	0x58024400
 80048b8:	03d09000 	.word	0x03d09000
 80048bc:	46000000 	.word	0x46000000
 80048c0:	4c742400 	.word	0x4c742400
 80048c4:	4a742400 	.word	0x4a742400
 80048c8:	4af42400 	.word	0x4af42400

080048cc <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(RCC_PLL2InitTypeDef *pll2, uint32_t Divider)
{
 80048cc:	b580      	push	{r7, lr}
 80048ce:	b084      	sub	sp, #16
 80048d0:	af00      	add	r7, sp, #0
 80048d2:	6078      	str	r0, [r7, #4]
 80048d4:	6039      	str	r1, [r7, #0]

  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 80048d6:	2300      	movs	r3, #0
 80048d8:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL2RGE_VALUE(pll2->PLL2RGE));
  assert_param(IS_RCC_PLL2VCO_VALUE(pll2->PLL2VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll2->PLL2FRACN));

  /* Check that PLL2 OSC clock source is already set */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 80048da:	4b53      	ldr	r3, [pc, #332]	; (8004a28 <RCCEx_PLL2_Config+0x15c>)
 80048dc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80048de:	f003 0303 	and.w	r3, r3, #3
 80048e2:	2b03      	cmp	r3, #3
 80048e4:	d101      	bne.n	80048ea <RCCEx_PLL2_Config+0x1e>
  {
    return HAL_ERROR;
 80048e6:	2301      	movs	r3, #1
 80048e8:	e099      	b.n	8004a1e <RCCEx_PLL2_Config+0x152>


  else
  {
    /* Disable  PLL2. */
    __HAL_RCC_PLL2_DISABLE();
 80048ea:	4b4f      	ldr	r3, [pc, #316]	; (8004a28 <RCCEx_PLL2_Config+0x15c>)
 80048ec:	681b      	ldr	r3, [r3, #0]
 80048ee:	4a4e      	ldr	r2, [pc, #312]	; (8004a28 <RCCEx_PLL2_Config+0x15c>)
 80048f0:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 80048f4:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80048f6:	f7fc fd61 	bl	80013bc <HAL_GetTick>
 80048fa:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 80048fc:	e008      	b.n	8004910 <RCCEx_PLL2_Config+0x44>
    {
      if( (HAL_GetTick() - tickstart ) > PLL2_TIMEOUT_VALUE)
 80048fe:	f7fc fd5d 	bl	80013bc <HAL_GetTick>
 8004902:	4602      	mov	r2, r0
 8004904:	68bb      	ldr	r3, [r7, #8]
 8004906:	1ad3      	subs	r3, r2, r3
 8004908:	2b02      	cmp	r3, #2
 800490a:	d901      	bls.n	8004910 <RCCEx_PLL2_Config+0x44>
      {
        return HAL_TIMEOUT;
 800490c:	2303      	movs	r3, #3
 800490e:	e086      	b.n	8004a1e <RCCEx_PLL2_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8004910:	4b45      	ldr	r3, [pc, #276]	; (8004a28 <RCCEx_PLL2_Config+0x15c>)
 8004912:	681b      	ldr	r3, [r3, #0]
 8004914:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8004918:	2b00      	cmp	r3, #0
 800491a:	d1f0      	bne.n	80048fe <RCCEx_PLL2_Config+0x32>
      }
    }

    /* Configure PLL2 multiplication and division factors. */
    __HAL_RCC_PLL2_CONFIG(pll2->PLL2M,
 800491c:	4b42      	ldr	r3, [pc, #264]	; (8004a28 <RCCEx_PLL2_Config+0x15c>)
 800491e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004920:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 8004924:	687b      	ldr	r3, [r7, #4]
 8004926:	681b      	ldr	r3, [r3, #0]
 8004928:	031b      	lsls	r3, r3, #12
 800492a:	493f      	ldr	r1, [pc, #252]	; (8004a28 <RCCEx_PLL2_Config+0x15c>)
 800492c:	4313      	orrs	r3, r2
 800492e:	628b      	str	r3, [r1, #40]	; 0x28
 8004930:	687b      	ldr	r3, [r7, #4]
 8004932:	685b      	ldr	r3, [r3, #4]
 8004934:	3b01      	subs	r3, #1
 8004936:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800493a:	687b      	ldr	r3, [r7, #4]
 800493c:	689b      	ldr	r3, [r3, #8]
 800493e:	3b01      	subs	r3, #1
 8004940:	025b      	lsls	r3, r3, #9
 8004942:	b29b      	uxth	r3, r3
 8004944:	431a      	orrs	r2, r3
 8004946:	687b      	ldr	r3, [r7, #4]
 8004948:	68db      	ldr	r3, [r3, #12]
 800494a:	3b01      	subs	r3, #1
 800494c:	041b      	lsls	r3, r3, #16
 800494e:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 8004952:	431a      	orrs	r2, r3
 8004954:	687b      	ldr	r3, [r7, #4]
 8004956:	691b      	ldr	r3, [r3, #16]
 8004958:	3b01      	subs	r3, #1
 800495a:	061b      	lsls	r3, r3, #24
 800495c:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 8004960:	4931      	ldr	r1, [pc, #196]	; (8004a28 <RCCEx_PLL2_Config+0x15c>)
 8004962:	4313      	orrs	r3, r2
 8004964:	638b      	str	r3, [r1, #56]	; 0x38
                          pll2->PLL2P,
                          pll2->PLL2Q,
                          pll2->PLL2R);

    /* Select PLL2 input reference frequency range: VCI */
    __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE) ;
 8004966:	4b30      	ldr	r3, [pc, #192]	; (8004a28 <RCCEx_PLL2_Config+0x15c>)
 8004968:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800496a:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 800496e:	687b      	ldr	r3, [r7, #4]
 8004970:	695b      	ldr	r3, [r3, #20]
 8004972:	492d      	ldr	r1, [pc, #180]	; (8004a28 <RCCEx_PLL2_Config+0x15c>)
 8004974:	4313      	orrs	r3, r2
 8004976:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL2 output frequency range : VCO */
    __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL) ;
 8004978:	4b2b      	ldr	r3, [pc, #172]	; (8004a28 <RCCEx_PLL2_Config+0x15c>)
 800497a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800497c:	f023 0220 	bic.w	r2, r3, #32
 8004980:	687b      	ldr	r3, [r7, #4]
 8004982:	699b      	ldr	r3, [r3, #24]
 8004984:	4928      	ldr	r1, [pc, #160]	; (8004a28 <RCCEx_PLL2_Config+0x15c>)
 8004986:	4313      	orrs	r3, r2
 8004988:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_DISABLE();
 800498a:	4b27      	ldr	r3, [pc, #156]	; (8004a28 <RCCEx_PLL2_Config+0x15c>)
 800498c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800498e:	4a26      	ldr	r2, [pc, #152]	; (8004a28 <RCCEx_PLL2_Config+0x15c>)
 8004990:	f023 0310 	bic.w	r3, r3, #16
 8004994:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 8004996:	4b24      	ldr	r3, [pc, #144]	; (8004a28 <RCCEx_PLL2_Config+0x15c>)
 8004998:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800499a:	4b24      	ldr	r3, [pc, #144]	; (8004a2c <RCCEx_PLL2_Config+0x160>)
 800499c:	4013      	ands	r3, r2
 800499e:	687a      	ldr	r2, [r7, #4]
 80049a0:	69d2      	ldr	r2, [r2, #28]
 80049a2:	00d2      	lsls	r2, r2, #3
 80049a4:	4920      	ldr	r1, [pc, #128]	; (8004a28 <RCCEx_PLL2_Config+0x15c>)
 80049a6:	4313      	orrs	r3, r2
 80049a8:	63cb      	str	r3, [r1, #60]	; 0x3c

    /* Enable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_ENABLE();
 80049aa:	4b1f      	ldr	r3, [pc, #124]	; (8004a28 <RCCEx_PLL2_Config+0x15c>)
 80049ac:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80049ae:	4a1e      	ldr	r2, [pc, #120]	; (8004a28 <RCCEx_PLL2_Config+0x15c>)
 80049b0:	f043 0310 	orr.w	r3, r3, #16
 80049b4:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL2 clock output */
    if(Divider == DIVIDER_P_UPDATE)
 80049b6:	683b      	ldr	r3, [r7, #0]
 80049b8:	2b00      	cmp	r3, #0
 80049ba:	d106      	bne.n	80049ca <RCCEx_PLL2_Config+0xfe>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 80049bc:	4b1a      	ldr	r3, [pc, #104]	; (8004a28 <RCCEx_PLL2_Config+0x15c>)
 80049be:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80049c0:	4a19      	ldr	r2, [pc, #100]	; (8004a28 <RCCEx_PLL2_Config+0x15c>)
 80049c2:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80049c6:	62d3      	str	r3, [r2, #44]	; 0x2c
 80049c8:	e00f      	b.n	80049ea <RCCEx_PLL2_Config+0x11e>
    }
    else if(Divider == DIVIDER_Q_UPDATE)
 80049ca:	683b      	ldr	r3, [r7, #0]
 80049cc:	2b01      	cmp	r3, #1
 80049ce:	d106      	bne.n	80049de <RCCEx_PLL2_Config+0x112>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVQ);
 80049d0:	4b15      	ldr	r3, [pc, #84]	; (8004a28 <RCCEx_PLL2_Config+0x15c>)
 80049d2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80049d4:	4a14      	ldr	r2, [pc, #80]	; (8004a28 <RCCEx_PLL2_Config+0x15c>)
 80049d6:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80049da:	62d3      	str	r3, [r2, #44]	; 0x2c
 80049dc:	e005      	b.n	80049ea <RCCEx_PLL2_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVR);
 80049de:	4b12      	ldr	r3, [pc, #72]	; (8004a28 <RCCEx_PLL2_Config+0x15c>)
 80049e0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80049e2:	4a11      	ldr	r2, [pc, #68]	; (8004a28 <RCCEx_PLL2_Config+0x15c>)
 80049e4:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80049e8:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL2. */
    __HAL_RCC_PLL2_ENABLE();
 80049ea:	4b0f      	ldr	r3, [pc, #60]	; (8004a28 <RCCEx_PLL2_Config+0x15c>)
 80049ec:	681b      	ldr	r3, [r3, #0]
 80049ee:	4a0e      	ldr	r2, [pc, #56]	; (8004a28 <RCCEx_PLL2_Config+0x15c>)
 80049f0:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 80049f4:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80049f6:	f7fc fce1 	bl	80013bc <HAL_GetTick>
 80049fa:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL2 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 80049fc:	e008      	b.n	8004a10 <RCCEx_PLL2_Config+0x144>
    {
      if( (HAL_GetTick() - tickstart ) > PLL2_TIMEOUT_VALUE)
 80049fe:	f7fc fcdd 	bl	80013bc <HAL_GetTick>
 8004a02:	4602      	mov	r2, r0
 8004a04:	68bb      	ldr	r3, [r7, #8]
 8004a06:	1ad3      	subs	r3, r2, r3
 8004a08:	2b02      	cmp	r3, #2
 8004a0a:	d901      	bls.n	8004a10 <RCCEx_PLL2_Config+0x144>
      {
        return HAL_TIMEOUT;
 8004a0c:	2303      	movs	r3, #3
 8004a0e:	e006      	b.n	8004a1e <RCCEx_PLL2_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8004a10:	4b05      	ldr	r3, [pc, #20]	; (8004a28 <RCCEx_PLL2_Config+0x15c>)
 8004a12:	681b      	ldr	r3, [r3, #0]
 8004a14:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8004a18:	2b00      	cmp	r3, #0
 8004a1a:	d0f0      	beq.n	80049fe <RCCEx_PLL2_Config+0x132>
    }

  }


  return status;
 8004a1c:	7bfb      	ldrb	r3, [r7, #15]
}
 8004a1e:	4618      	mov	r0, r3
 8004a20:	3710      	adds	r7, #16
 8004a22:	46bd      	mov	sp, r7
 8004a24:	bd80      	pop	{r7, pc}
 8004a26:	bf00      	nop
 8004a28:	58024400 	.word	0x58024400
 8004a2c:	ffff0007 	.word	0xffff0007

08004a30 <RCCEx_PLL3_Config>:
  * @note   PLL3 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(RCC_PLL3InitTypeDef *pll3, uint32_t Divider)
{
 8004a30:	b580      	push	{r7, lr}
 8004a32:	b084      	sub	sp, #16
 8004a34:	af00      	add	r7, sp, #0
 8004a36:	6078      	str	r0, [r7, #4]
 8004a38:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8004a3a:	2300      	movs	r3, #0
 8004a3c:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL3RGE_VALUE(pll3->PLL3RGE));
  assert_param(IS_RCC_PLL3VCO_VALUE(pll3->PLL3VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll3->PLL3FRACN));

  /* Check that PLL3 OSC clock source is already set */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8004a3e:	4b53      	ldr	r3, [pc, #332]	; (8004b8c <RCCEx_PLL3_Config+0x15c>)
 8004a40:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004a42:	f003 0303 	and.w	r3, r3, #3
 8004a46:	2b03      	cmp	r3, #3
 8004a48:	d101      	bne.n	8004a4e <RCCEx_PLL3_Config+0x1e>
  {
    return HAL_ERROR;
 8004a4a:	2301      	movs	r3, #1
 8004a4c:	e099      	b.n	8004b82 <RCCEx_PLL3_Config+0x152>


  else
  {
    /* Disable  PLL3. */
    __HAL_RCC_PLL3_DISABLE();
 8004a4e:	4b4f      	ldr	r3, [pc, #316]	; (8004b8c <RCCEx_PLL3_Config+0x15c>)
 8004a50:	681b      	ldr	r3, [r3, #0]
 8004a52:	4a4e      	ldr	r2, [pc, #312]	; (8004b8c <RCCEx_PLL3_Config+0x15c>)
 8004a54:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004a58:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004a5a:	f7fc fcaf 	bl	80013bc <HAL_GetTick>
 8004a5e:	60b8      	str	r0, [r7, #8]
    /* Wait till PLL3 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8004a60:	e008      	b.n	8004a74 <RCCEx_PLL3_Config+0x44>
    {
      if( (HAL_GetTick() - tickstart ) > PLL3_TIMEOUT_VALUE)
 8004a62:	f7fc fcab 	bl	80013bc <HAL_GetTick>
 8004a66:	4602      	mov	r2, r0
 8004a68:	68bb      	ldr	r3, [r7, #8]
 8004a6a:	1ad3      	subs	r3, r2, r3
 8004a6c:	2b02      	cmp	r3, #2
 8004a6e:	d901      	bls.n	8004a74 <RCCEx_PLL3_Config+0x44>
      {
        return HAL_TIMEOUT;
 8004a70:	2303      	movs	r3, #3
 8004a72:	e086      	b.n	8004b82 <RCCEx_PLL3_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8004a74:	4b45      	ldr	r3, [pc, #276]	; (8004b8c <RCCEx_PLL3_Config+0x15c>)
 8004a76:	681b      	ldr	r3, [r3, #0]
 8004a78:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8004a7c:	2b00      	cmp	r3, #0
 8004a7e:	d1f0      	bne.n	8004a62 <RCCEx_PLL3_Config+0x32>
      }
    }

    /* Configure the PLL3  multiplication and division factors. */
    __HAL_RCC_PLL3_CONFIG(pll3->PLL3M,
 8004a80:	4b42      	ldr	r3, [pc, #264]	; (8004b8c <RCCEx_PLL3_Config+0x15c>)
 8004a82:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004a84:	f023 727c 	bic.w	r2, r3, #66060288	; 0x3f00000
 8004a88:	687b      	ldr	r3, [r7, #4]
 8004a8a:	681b      	ldr	r3, [r3, #0]
 8004a8c:	051b      	lsls	r3, r3, #20
 8004a8e:	493f      	ldr	r1, [pc, #252]	; (8004b8c <RCCEx_PLL3_Config+0x15c>)
 8004a90:	4313      	orrs	r3, r2
 8004a92:	628b      	str	r3, [r1, #40]	; 0x28
 8004a94:	687b      	ldr	r3, [r7, #4]
 8004a96:	685b      	ldr	r3, [r3, #4]
 8004a98:	3b01      	subs	r3, #1
 8004a9a:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8004a9e:	687b      	ldr	r3, [r7, #4]
 8004aa0:	689b      	ldr	r3, [r3, #8]
 8004aa2:	3b01      	subs	r3, #1
 8004aa4:	025b      	lsls	r3, r3, #9
 8004aa6:	b29b      	uxth	r3, r3
 8004aa8:	431a      	orrs	r2, r3
 8004aaa:	687b      	ldr	r3, [r7, #4]
 8004aac:	68db      	ldr	r3, [r3, #12]
 8004aae:	3b01      	subs	r3, #1
 8004ab0:	041b      	lsls	r3, r3, #16
 8004ab2:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 8004ab6:	431a      	orrs	r2, r3
 8004ab8:	687b      	ldr	r3, [r7, #4]
 8004aba:	691b      	ldr	r3, [r3, #16]
 8004abc:	3b01      	subs	r3, #1
 8004abe:	061b      	lsls	r3, r3, #24
 8004ac0:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 8004ac4:	4931      	ldr	r1, [pc, #196]	; (8004b8c <RCCEx_PLL3_Config+0x15c>)
 8004ac6:	4313      	orrs	r3, r2
 8004ac8:	640b      	str	r3, [r1, #64]	; 0x40
                          pll3->PLL3P,
                          pll3->PLL3Q,
                          pll3->PLL3R);

    /* Select PLL3 input reference frequency range: VCI */
    __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE) ;
 8004aca:	4b30      	ldr	r3, [pc, #192]	; (8004b8c <RCCEx_PLL3_Config+0x15c>)
 8004acc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004ace:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8004ad2:	687b      	ldr	r3, [r7, #4]
 8004ad4:	695b      	ldr	r3, [r3, #20]
 8004ad6:	492d      	ldr	r1, [pc, #180]	; (8004b8c <RCCEx_PLL3_Config+0x15c>)
 8004ad8:	4313      	orrs	r3, r2
 8004ada:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL3 output frequency range : VCO */
    __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL) ;
 8004adc:	4b2b      	ldr	r3, [pc, #172]	; (8004b8c <RCCEx_PLL3_Config+0x15c>)
 8004ade:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004ae0:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 8004ae4:	687b      	ldr	r3, [r7, #4]
 8004ae6:	699b      	ldr	r3, [r3, #24]
 8004ae8:	4928      	ldr	r1, [pc, #160]	; (8004b8c <RCCEx_PLL3_Config+0x15c>)
 8004aea:	4313      	orrs	r3, r2
 8004aec:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_DISABLE();
 8004aee:	4b27      	ldr	r3, [pc, #156]	; (8004b8c <RCCEx_PLL3_Config+0x15c>)
 8004af0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004af2:	4a26      	ldr	r2, [pc, #152]	; (8004b8c <RCCEx_PLL3_Config+0x15c>)
 8004af4:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8004af8:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 8004afa:	4b24      	ldr	r3, [pc, #144]	; (8004b8c <RCCEx_PLL3_Config+0x15c>)
 8004afc:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8004afe:	4b24      	ldr	r3, [pc, #144]	; (8004b90 <RCCEx_PLL3_Config+0x160>)
 8004b00:	4013      	ands	r3, r2
 8004b02:	687a      	ldr	r2, [r7, #4]
 8004b04:	69d2      	ldr	r2, [r2, #28]
 8004b06:	00d2      	lsls	r2, r2, #3
 8004b08:	4920      	ldr	r1, [pc, #128]	; (8004b8c <RCCEx_PLL3_Config+0x15c>)
 8004b0a:	4313      	orrs	r3, r2
 8004b0c:	644b      	str	r3, [r1, #68]	; 0x44

    /* Enable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_ENABLE();
 8004b0e:	4b1f      	ldr	r3, [pc, #124]	; (8004b8c <RCCEx_PLL3_Config+0x15c>)
 8004b10:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004b12:	4a1e      	ldr	r2, [pc, #120]	; (8004b8c <RCCEx_PLL3_Config+0x15c>)
 8004b14:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004b18:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL3 clock output */
    if(Divider == DIVIDER_P_UPDATE)
 8004b1a:	683b      	ldr	r3, [r7, #0]
 8004b1c:	2b00      	cmp	r3, #0
 8004b1e:	d106      	bne.n	8004b2e <RCCEx_PLL3_Config+0xfe>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
 8004b20:	4b1a      	ldr	r3, [pc, #104]	; (8004b8c <RCCEx_PLL3_Config+0x15c>)
 8004b22:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004b24:	4a19      	ldr	r2, [pc, #100]	; (8004b8c <RCCEx_PLL3_Config+0x15c>)
 8004b26:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8004b2a:	62d3      	str	r3, [r2, #44]	; 0x2c
 8004b2c:	e00f      	b.n	8004b4e <RCCEx_PLL3_Config+0x11e>
    }
    else if(Divider == DIVIDER_Q_UPDATE)
 8004b2e:	683b      	ldr	r3, [r7, #0]
 8004b30:	2b01      	cmp	r3, #1
 8004b32:	d106      	bne.n	8004b42 <RCCEx_PLL3_Config+0x112>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
 8004b34:	4b15      	ldr	r3, [pc, #84]	; (8004b8c <RCCEx_PLL3_Config+0x15c>)
 8004b36:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004b38:	4a14      	ldr	r2, [pc, #80]	; (8004b8c <RCCEx_PLL3_Config+0x15c>)
 8004b3a:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8004b3e:	62d3      	str	r3, [r2, #44]	; 0x2c
 8004b40:	e005      	b.n	8004b4e <RCCEx_PLL3_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
 8004b42:	4b12      	ldr	r3, [pc, #72]	; (8004b8c <RCCEx_PLL3_Config+0x15c>)
 8004b44:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004b46:	4a11      	ldr	r2, [pc, #68]	; (8004b8c <RCCEx_PLL3_Config+0x15c>)
 8004b48:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8004b4c:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL3. */
    __HAL_RCC_PLL3_ENABLE();
 8004b4e:	4b0f      	ldr	r3, [pc, #60]	; (8004b8c <RCCEx_PLL3_Config+0x15c>)
 8004b50:	681b      	ldr	r3, [r3, #0]
 8004b52:	4a0e      	ldr	r2, [pc, #56]	; (8004b8c <RCCEx_PLL3_Config+0x15c>)
 8004b54:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004b58:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004b5a:	f7fc fc2f 	bl	80013bc <HAL_GetTick>
 8004b5e:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL3 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8004b60:	e008      	b.n	8004b74 <RCCEx_PLL3_Config+0x144>
    {
      if( (HAL_GetTick() - tickstart ) > PLL3_TIMEOUT_VALUE)
 8004b62:	f7fc fc2b 	bl	80013bc <HAL_GetTick>
 8004b66:	4602      	mov	r2, r0
 8004b68:	68bb      	ldr	r3, [r7, #8]
 8004b6a:	1ad3      	subs	r3, r2, r3
 8004b6c:	2b02      	cmp	r3, #2
 8004b6e:	d901      	bls.n	8004b74 <RCCEx_PLL3_Config+0x144>
      {
        return HAL_TIMEOUT;
 8004b70:	2303      	movs	r3, #3
 8004b72:	e006      	b.n	8004b82 <RCCEx_PLL3_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8004b74:	4b05      	ldr	r3, [pc, #20]	; (8004b8c <RCCEx_PLL3_Config+0x15c>)
 8004b76:	681b      	ldr	r3, [r3, #0]
 8004b78:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8004b7c:	2b00      	cmp	r3, #0
 8004b7e:	d0f0      	beq.n	8004b62 <RCCEx_PLL3_Config+0x132>
    }

  }


  return status;
 8004b80:	7bfb      	ldrb	r3, [r7, #15]
}
 8004b82:	4618      	mov	r0, r3
 8004b84:	3710      	adds	r7, #16
 8004b86:	46bd      	mov	sp, r7
 8004b88:	bd80      	pop	{r7, pc}
 8004b8a:	bf00      	nop
 8004b8c:	58024400 	.word	0x58024400
 8004b90:	ffff0007 	.word	0xffff0007

08004b94 <HAL_SRAM_Init>:
  * @param  ExtTiming Pointer to SRAM extended mode timing structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SRAM_Init(SRAM_HandleTypeDef *hsram, FMC_NORSRAM_TimingTypeDef *Timing,
                                FMC_NORSRAM_TimingTypeDef *ExtTiming)
{
 8004b94:	b580      	push	{r7, lr}
 8004b96:	b084      	sub	sp, #16
 8004b98:	af00      	add	r7, sp, #0
 8004b9a:	60f8      	str	r0, [r7, #12]
 8004b9c:	60b9      	str	r1, [r7, #8]
 8004b9e:	607a      	str	r2, [r7, #4]
  /* Check the SRAM handle parameter */
  if (hsram == NULL)
 8004ba0:	68fb      	ldr	r3, [r7, #12]
 8004ba2:	2b00      	cmp	r3, #0
 8004ba4:	d101      	bne.n	8004baa <HAL_SRAM_Init+0x16>
  {
    return HAL_ERROR;
 8004ba6:	2301      	movs	r3, #1
 8004ba8:	e03e      	b.n	8004c28 <HAL_SRAM_Init+0x94>
  }

  if (hsram->State == HAL_SRAM_STATE_RESET)
 8004baa:	68fb      	ldr	r3, [r7, #12]
 8004bac:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8004bb0:	b2db      	uxtb	r3, r3
 8004bb2:	2b00      	cmp	r3, #0
 8004bb4:	d106      	bne.n	8004bc4 <HAL_SRAM_Init+0x30>
  {
    /* Allocate lock resource and initialize it */
    hsram->Lock = HAL_UNLOCKED;
 8004bb6:	68fb      	ldr	r3, [r7, #12]
 8004bb8:	2200      	movs	r2, #0
 8004bba:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44

    /* Init the low level hardware */
    hsram->MspInitCallback(hsram);
#else
    /* Initialize the low level hardware (MSP) */
    HAL_SRAM_MspInit(hsram);
 8004bbe:	68f8      	ldr	r0, [r7, #12]
 8004bc0:	f7fc fa0a 	bl	8000fd8 <HAL_SRAM_MspInit>
#endif /* USE_HAL_SRAM_REGISTER_CALLBACKS */
  }

  /* Initialize SRAM control Interface */
  (void)FMC_NORSRAM_Init(hsram->Instance, &(hsram->Init));
 8004bc4:	68fb      	ldr	r3, [r7, #12]
 8004bc6:	681a      	ldr	r2, [r3, #0]
 8004bc8:	68fb      	ldr	r3, [r7, #12]
 8004bca:	3308      	adds	r3, #8
 8004bcc:	4619      	mov	r1, r3
 8004bce:	4610      	mov	r0, r2
 8004bd0:	f001 fd40 	bl	8006654 <FMC_NORSRAM_Init>

  /* Initialize SRAM timing Interface */
  (void)FMC_NORSRAM_Timing_Init(hsram->Instance, Timing, hsram->Init.NSBank);
 8004bd4:	68fb      	ldr	r3, [r7, #12]
 8004bd6:	6818      	ldr	r0, [r3, #0]
 8004bd8:	68fb      	ldr	r3, [r7, #12]
 8004bda:	689b      	ldr	r3, [r3, #8]
 8004bdc:	461a      	mov	r2, r3
 8004bde:	68b9      	ldr	r1, [r7, #8]
 8004be0:	f001 fdc8 	bl	8006774 <FMC_NORSRAM_Timing_Init>

  /* Initialize SRAM extended mode timing Interface */
  (void)FMC_NORSRAM_Extended_Timing_Init(hsram->Extended, ExtTiming, hsram->Init.NSBank,
 8004be4:	68fb      	ldr	r3, [r7, #12]
 8004be6:	6858      	ldr	r0, [r3, #4]
 8004be8:	68fb      	ldr	r3, [r7, #12]
 8004bea:	689a      	ldr	r2, [r3, #8]
 8004bec:	68fb      	ldr	r3, [r7, #12]
 8004bee:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004bf0:	6879      	ldr	r1, [r7, #4]
 8004bf2:	f001 fe0f 	bl	8006814 <FMC_NORSRAM_Extended_Timing_Init>
                                         hsram->Init.ExtendedMode);

  /* Enable the NORSRAM device */
  __FMC_NORSRAM_ENABLE(hsram->Instance, hsram->Init.NSBank);
 8004bf6:	68fb      	ldr	r3, [r7, #12]
 8004bf8:	681b      	ldr	r3, [r3, #0]
 8004bfa:	68fa      	ldr	r2, [r7, #12]
 8004bfc:	6892      	ldr	r2, [r2, #8]
 8004bfe:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8004c02:	68fb      	ldr	r3, [r7, #12]
 8004c04:	681b      	ldr	r3, [r3, #0]
 8004c06:	68fa      	ldr	r2, [r7, #12]
 8004c08:	6892      	ldr	r2, [r2, #8]
 8004c0a:	f041 0101 	orr.w	r1, r1, #1
 8004c0e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

  /* Enable FMC Peripheral */
  __FMC_ENABLE();
 8004c12:	4b07      	ldr	r3, [pc, #28]	; (8004c30 <HAL_SRAM_Init+0x9c>)
 8004c14:	681b      	ldr	r3, [r3, #0]
 8004c16:	4a06      	ldr	r2, [pc, #24]	; (8004c30 <HAL_SRAM_Init+0x9c>)
 8004c18:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8004c1c:	6013      	str	r3, [r2, #0]

  /* Initialize the SRAM controller state */
  hsram->State = HAL_SRAM_STATE_READY;
 8004c1e:	68fb      	ldr	r3, [r7, #12]
 8004c20:	2201      	movs	r2, #1
 8004c22:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  return HAL_OK;
 8004c26:	2300      	movs	r3, #0
}
 8004c28:	4618      	mov	r0, r3
 8004c2a:	3710      	adds	r7, #16
 8004c2c:	46bd      	mov	sp, r7
 8004c2e:	bd80      	pop	{r7, pc}
 8004c30:	52004000 	.word	0x52004000

08004c34 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8004c34:	b580      	push	{r7, lr}
 8004c36:	b082      	sub	sp, #8
 8004c38:	af00      	add	r7, sp, #0
 8004c3a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8004c3c:	687b      	ldr	r3, [r7, #4]
 8004c3e:	2b00      	cmp	r3, #0
 8004c40:	d101      	bne.n	8004c46 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8004c42:	2301      	movs	r3, #1
 8004c44:	e042      	b.n	8004ccc <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8004c46:	687b      	ldr	r3, [r7, #4]
 8004c48:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004c4c:	2b00      	cmp	r3, #0
 8004c4e:	d106      	bne.n	8004c5e <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8004c50:	687b      	ldr	r3, [r7, #4]
 8004c52:	2200      	movs	r2, #0
 8004c54:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8004c58:	6878      	ldr	r0, [r7, #4]
 8004c5a:	f7fc f8b1 	bl	8000dc0 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8004c5e:	687b      	ldr	r3, [r7, #4]
 8004c60:	2224      	movs	r2, #36	; 0x24
 8004c62:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  __HAL_UART_DISABLE(huart);
 8004c66:	687b      	ldr	r3, [r7, #4]
 8004c68:	681b      	ldr	r3, [r3, #0]
 8004c6a:	681a      	ldr	r2, [r3, #0]
 8004c6c:	687b      	ldr	r3, [r7, #4]
 8004c6e:	681b      	ldr	r3, [r3, #0]
 8004c70:	f022 0201 	bic.w	r2, r2, #1
 8004c74:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8004c76:	6878      	ldr	r0, [r7, #4]
 8004c78:	f000 fb9c 	bl	80053b4 <UART_SetConfig>
 8004c7c:	4603      	mov	r3, r0
 8004c7e:	2b01      	cmp	r3, #1
 8004c80:	d101      	bne.n	8004c86 <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 8004c82:	2301      	movs	r3, #1
 8004c84:	e022      	b.n	8004ccc <HAL_UART_Init+0x98>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8004c86:	687b      	ldr	r3, [r7, #4]
 8004c88:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004c8a:	2b00      	cmp	r3, #0
 8004c8c:	d002      	beq.n	8004c94 <HAL_UART_Init+0x60>
  {
    UART_AdvFeatureConfig(huart);
 8004c8e:	6878      	ldr	r0, [r7, #4]
 8004c90:	f001 f9ee 	bl	8006070 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8004c94:	687b      	ldr	r3, [r7, #4]
 8004c96:	681b      	ldr	r3, [r3, #0]
 8004c98:	685a      	ldr	r2, [r3, #4]
 8004c9a:	687b      	ldr	r3, [r7, #4]
 8004c9c:	681b      	ldr	r3, [r3, #0]
 8004c9e:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8004ca2:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8004ca4:	687b      	ldr	r3, [r7, #4]
 8004ca6:	681b      	ldr	r3, [r3, #0]
 8004ca8:	689a      	ldr	r2, [r3, #8]
 8004caa:	687b      	ldr	r3, [r7, #4]
 8004cac:	681b      	ldr	r3, [r3, #0]
 8004cae:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8004cb2:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8004cb4:	687b      	ldr	r3, [r7, #4]
 8004cb6:	681b      	ldr	r3, [r3, #0]
 8004cb8:	681a      	ldr	r2, [r3, #0]
 8004cba:	687b      	ldr	r3, [r7, #4]
 8004cbc:	681b      	ldr	r3, [r3, #0]
 8004cbe:	f042 0201 	orr.w	r2, r2, #1
 8004cc2:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8004cc4:	6878      	ldr	r0, [r7, #4]
 8004cc6:	f001 fa75 	bl	80061b4 <UART_CheckIdleState>
 8004cca:	4603      	mov	r3, r0
}
 8004ccc:	4618      	mov	r0, r3
 8004cce:	3708      	adds	r7, #8
 8004cd0:	46bd      	mov	sp, r7
 8004cd2:	bd80      	pop	{r7, pc}

08004cd4 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004cd4:	b580      	push	{r7, lr}
 8004cd6:	b08a      	sub	sp, #40	; 0x28
 8004cd8:	af02      	add	r7, sp, #8
 8004cda:	60f8      	str	r0, [r7, #12]
 8004cdc:	60b9      	str	r1, [r7, #8]
 8004cde:	603b      	str	r3, [r7, #0]
 8004ce0:	4613      	mov	r3, r2
 8004ce2:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8004ce4:	68fb      	ldr	r3, [r7, #12]
 8004ce6:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004cea:	2b20      	cmp	r3, #32
 8004cec:	f040 8083 	bne.w	8004df6 <HAL_UART_Transmit+0x122>
  {
    if ((pData == NULL) || (Size == 0U))
 8004cf0:	68bb      	ldr	r3, [r7, #8]
 8004cf2:	2b00      	cmp	r3, #0
 8004cf4:	d002      	beq.n	8004cfc <HAL_UART_Transmit+0x28>
 8004cf6:	88fb      	ldrh	r3, [r7, #6]
 8004cf8:	2b00      	cmp	r3, #0
 8004cfa:	d101      	bne.n	8004d00 <HAL_UART_Transmit+0x2c>
    {
      return  HAL_ERROR;
 8004cfc:	2301      	movs	r3, #1
 8004cfe:	e07b      	b.n	8004df8 <HAL_UART_Transmit+0x124>
    }

    __HAL_LOCK(huart);
 8004d00:	68fb      	ldr	r3, [r7, #12]
 8004d02:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8004d06:	2b01      	cmp	r3, #1
 8004d08:	d101      	bne.n	8004d0e <HAL_UART_Transmit+0x3a>
 8004d0a:	2302      	movs	r3, #2
 8004d0c:	e074      	b.n	8004df8 <HAL_UART_Transmit+0x124>
 8004d0e:	68fb      	ldr	r3, [r7, #12]
 8004d10:	2201      	movs	r2, #1
 8004d12:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004d16:	68fb      	ldr	r3, [r7, #12]
 8004d18:	2200      	movs	r2, #0
 8004d1a:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8004d1e:	68fb      	ldr	r3, [r7, #12]
 8004d20:	2221      	movs	r2, #33	; 0x21
 8004d22:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8004d26:	f7fc fb49 	bl	80013bc <HAL_GetTick>
 8004d2a:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8004d2c:	68fb      	ldr	r3, [r7, #12]
 8004d2e:	88fa      	ldrh	r2, [r7, #6]
 8004d30:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
    huart->TxXferCount = Size;
 8004d34:	68fb      	ldr	r3, [r7, #12]
 8004d36:	88fa      	ldrh	r2, [r7, #6]
 8004d38:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004d3c:	68fb      	ldr	r3, [r7, #12]
 8004d3e:	689b      	ldr	r3, [r3, #8]
 8004d40:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004d44:	d108      	bne.n	8004d58 <HAL_UART_Transmit+0x84>
 8004d46:	68fb      	ldr	r3, [r7, #12]
 8004d48:	691b      	ldr	r3, [r3, #16]
 8004d4a:	2b00      	cmp	r3, #0
 8004d4c:	d104      	bne.n	8004d58 <HAL_UART_Transmit+0x84>
    {
      pdata8bits  = NULL;
 8004d4e:	2300      	movs	r3, #0
 8004d50:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8004d52:	68bb      	ldr	r3, [r7, #8]
 8004d54:	61bb      	str	r3, [r7, #24]
 8004d56:	e003      	b.n	8004d60 <HAL_UART_Transmit+0x8c>
    }
    else
    {
      pdata8bits  = pData;
 8004d58:	68bb      	ldr	r3, [r7, #8]
 8004d5a:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8004d5c:	2300      	movs	r3, #0
 8004d5e:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 8004d60:	68fb      	ldr	r3, [r7, #12]
 8004d62:	2200      	movs	r2, #0
 8004d64:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    while (huart->TxXferCount > 0U)
 8004d68:	e02c      	b.n	8004dc4 <HAL_UART_Transmit+0xf0>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8004d6a:	683b      	ldr	r3, [r7, #0]
 8004d6c:	9300      	str	r3, [sp, #0]
 8004d6e:	697b      	ldr	r3, [r7, #20]
 8004d70:	2200      	movs	r2, #0
 8004d72:	2180      	movs	r1, #128	; 0x80
 8004d74:	68f8      	ldr	r0, [r7, #12]
 8004d76:	f001 fa68 	bl	800624a <UART_WaitOnFlagUntilTimeout>
 8004d7a:	4603      	mov	r3, r0
 8004d7c:	2b00      	cmp	r3, #0
 8004d7e:	d001      	beq.n	8004d84 <HAL_UART_Transmit+0xb0>
      {
        return HAL_TIMEOUT;
 8004d80:	2303      	movs	r3, #3
 8004d82:	e039      	b.n	8004df8 <HAL_UART_Transmit+0x124>
      }
      if (pdata8bits == NULL)
 8004d84:	69fb      	ldr	r3, [r7, #28]
 8004d86:	2b00      	cmp	r3, #0
 8004d88:	d10b      	bne.n	8004da2 <HAL_UART_Transmit+0xce>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8004d8a:	69bb      	ldr	r3, [r7, #24]
 8004d8c:	881b      	ldrh	r3, [r3, #0]
 8004d8e:	461a      	mov	r2, r3
 8004d90:	68fb      	ldr	r3, [r7, #12]
 8004d92:	681b      	ldr	r3, [r3, #0]
 8004d94:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8004d98:	629a      	str	r2, [r3, #40]	; 0x28
        pdata16bits++;
 8004d9a:	69bb      	ldr	r3, [r7, #24]
 8004d9c:	3302      	adds	r3, #2
 8004d9e:	61bb      	str	r3, [r7, #24]
 8004da0:	e007      	b.n	8004db2 <HAL_UART_Transmit+0xde>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8004da2:	69fb      	ldr	r3, [r7, #28]
 8004da4:	781a      	ldrb	r2, [r3, #0]
 8004da6:	68fb      	ldr	r3, [r7, #12]
 8004da8:	681b      	ldr	r3, [r3, #0]
 8004daa:	629a      	str	r2, [r3, #40]	; 0x28
        pdata8bits++;
 8004dac:	69fb      	ldr	r3, [r7, #28]
 8004dae:	3301      	adds	r3, #1
 8004db0:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8004db2:	68fb      	ldr	r3, [r7, #12]
 8004db4:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 8004db8:	b29b      	uxth	r3, r3
 8004dba:	3b01      	subs	r3, #1
 8004dbc:	b29a      	uxth	r2, r3
 8004dbe:	68fb      	ldr	r3, [r7, #12]
 8004dc0:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
    while (huart->TxXferCount > 0U)
 8004dc4:	68fb      	ldr	r3, [r7, #12]
 8004dc6:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 8004dca:	b29b      	uxth	r3, r3
 8004dcc:	2b00      	cmp	r3, #0
 8004dce:	d1cc      	bne.n	8004d6a <HAL_UART_Transmit+0x96>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8004dd0:	683b      	ldr	r3, [r7, #0]
 8004dd2:	9300      	str	r3, [sp, #0]
 8004dd4:	697b      	ldr	r3, [r7, #20]
 8004dd6:	2200      	movs	r2, #0
 8004dd8:	2140      	movs	r1, #64	; 0x40
 8004dda:	68f8      	ldr	r0, [r7, #12]
 8004ddc:	f001 fa35 	bl	800624a <UART_WaitOnFlagUntilTimeout>
 8004de0:	4603      	mov	r3, r0
 8004de2:	2b00      	cmp	r3, #0
 8004de4:	d001      	beq.n	8004dea <HAL_UART_Transmit+0x116>
    {
      return HAL_TIMEOUT;
 8004de6:	2303      	movs	r3, #3
 8004de8:	e006      	b.n	8004df8 <HAL_UART_Transmit+0x124>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8004dea:	68fb      	ldr	r3, [r7, #12]
 8004dec:	2220      	movs	r2, #32
 8004dee:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    return HAL_OK;
 8004df2:	2300      	movs	r3, #0
 8004df4:	e000      	b.n	8004df8 <HAL_UART_Transmit+0x124>
  }
  else
  {
    return HAL_BUSY;
 8004df6:	2302      	movs	r3, #2
  }
}
 8004df8:	4618      	mov	r0, r3
 8004dfa:	3720      	adds	r7, #32
 8004dfc:	46bd      	mov	sp, r7
 8004dfe:	bd80      	pop	{r7, pc}

08004e00 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8004e00:	b580      	push	{r7, lr}
 8004e02:	b088      	sub	sp, #32
 8004e04:	af00      	add	r7, sp, #0
 8004e06:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8004e08:	687b      	ldr	r3, [r7, #4]
 8004e0a:	681b      	ldr	r3, [r3, #0]
 8004e0c:	69db      	ldr	r3, [r3, #28]
 8004e0e:	61fb      	str	r3, [r7, #28]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8004e10:	687b      	ldr	r3, [r7, #4]
 8004e12:	681b      	ldr	r3, [r3, #0]
 8004e14:	681b      	ldr	r3, [r3, #0]
 8004e16:	61bb      	str	r3, [r7, #24]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8004e18:	687b      	ldr	r3, [r7, #4]
 8004e1a:	681b      	ldr	r3, [r3, #0]
 8004e1c:	689b      	ldr	r3, [r3, #8]
 8004e1e:	617b      	str	r3, [r7, #20]

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 8004e20:	69fa      	ldr	r2, [r7, #28]
 8004e22:	f640 030f 	movw	r3, #2063	; 0x80f
 8004e26:	4013      	ands	r3, r2
 8004e28:	613b      	str	r3, [r7, #16]
  if (errorflags == 0U)
 8004e2a:	693b      	ldr	r3, [r7, #16]
 8004e2c:	2b00      	cmp	r3, #0
 8004e2e:	d118      	bne.n	8004e62 <HAL_UART_IRQHandler+0x62>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 8004e30:	69fb      	ldr	r3, [r7, #28]
 8004e32:	f003 0320 	and.w	r3, r3, #32
 8004e36:	2b00      	cmp	r3, #0
 8004e38:	d013      	beq.n	8004e62 <HAL_UART_IRQHandler+0x62>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 8004e3a:	69bb      	ldr	r3, [r7, #24]
 8004e3c:	f003 0320 	and.w	r3, r3, #32
 8004e40:	2b00      	cmp	r3, #0
 8004e42:	d104      	bne.n	8004e4e <HAL_UART_IRQHandler+0x4e>
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 8004e44:	697b      	ldr	r3, [r7, #20]
 8004e46:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004e4a:	2b00      	cmp	r3, #0
 8004e4c:	d009      	beq.n	8004e62 <HAL_UART_IRQHandler+0x62>
    {
      if (huart->RxISR != NULL)
 8004e4e:	687b      	ldr	r3, [r7, #4]
 8004e50:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004e52:	2b00      	cmp	r3, #0
 8004e54:	f000 8282 	beq.w	800535c <HAL_UART_IRQHandler+0x55c>
      {
        huart->RxISR(huart);
 8004e58:	687b      	ldr	r3, [r7, #4]
 8004e5a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004e5c:	6878      	ldr	r0, [r7, #4]
 8004e5e:	4798      	blx	r3
      }
      return;
 8004e60:	e27c      	b.n	800535c <HAL_UART_IRQHandler+0x55c>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 8004e62:	693b      	ldr	r3, [r7, #16]
 8004e64:	2b00      	cmp	r3, #0
 8004e66:	f000 80ef 	beq.w	8005048 <HAL_UART_IRQHandler+0x248>
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
 8004e6a:	697a      	ldr	r2, [r7, #20]
 8004e6c:	4b73      	ldr	r3, [pc, #460]	; (800503c <HAL_UART_IRQHandler+0x23c>)
 8004e6e:	4013      	ands	r3, r2
 8004e70:	2b00      	cmp	r3, #0
 8004e72:	d105      	bne.n	8004e80 <HAL_UART_IRQHandler+0x80>
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
 8004e74:	69ba      	ldr	r2, [r7, #24]
 8004e76:	4b72      	ldr	r3, [pc, #456]	; (8005040 <HAL_UART_IRQHandler+0x240>)
 8004e78:	4013      	ands	r3, r2
 8004e7a:	2b00      	cmp	r3, #0
 8004e7c:	f000 80e4 	beq.w	8005048 <HAL_UART_IRQHandler+0x248>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8004e80:	69fb      	ldr	r3, [r7, #28]
 8004e82:	f003 0301 	and.w	r3, r3, #1
 8004e86:	2b00      	cmp	r3, #0
 8004e88:	d010      	beq.n	8004eac <HAL_UART_IRQHandler+0xac>
 8004e8a:	69bb      	ldr	r3, [r7, #24]
 8004e8c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004e90:	2b00      	cmp	r3, #0
 8004e92:	d00b      	beq.n	8004eac <HAL_UART_IRQHandler+0xac>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8004e94:	687b      	ldr	r3, [r7, #4]
 8004e96:	681b      	ldr	r3, [r3, #0]
 8004e98:	2201      	movs	r2, #1
 8004e9a:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8004e9c:	687b      	ldr	r3, [r7, #4]
 8004e9e:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8004ea2:	f043 0201 	orr.w	r2, r3, #1
 8004ea6:	687b      	ldr	r3, [r7, #4]
 8004ea8:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8004eac:	69fb      	ldr	r3, [r7, #28]
 8004eae:	f003 0302 	and.w	r3, r3, #2
 8004eb2:	2b00      	cmp	r3, #0
 8004eb4:	d010      	beq.n	8004ed8 <HAL_UART_IRQHandler+0xd8>
 8004eb6:	697b      	ldr	r3, [r7, #20]
 8004eb8:	f003 0301 	and.w	r3, r3, #1
 8004ebc:	2b00      	cmp	r3, #0
 8004ebe:	d00b      	beq.n	8004ed8 <HAL_UART_IRQHandler+0xd8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8004ec0:	687b      	ldr	r3, [r7, #4]
 8004ec2:	681b      	ldr	r3, [r3, #0]
 8004ec4:	2202      	movs	r2, #2
 8004ec6:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8004ec8:	687b      	ldr	r3, [r7, #4]
 8004eca:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8004ece:	f043 0204 	orr.w	r2, r3, #4
 8004ed2:	687b      	ldr	r3, [r7, #4]
 8004ed4:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8004ed8:	69fb      	ldr	r3, [r7, #28]
 8004eda:	f003 0304 	and.w	r3, r3, #4
 8004ede:	2b00      	cmp	r3, #0
 8004ee0:	d010      	beq.n	8004f04 <HAL_UART_IRQHandler+0x104>
 8004ee2:	697b      	ldr	r3, [r7, #20]
 8004ee4:	f003 0301 	and.w	r3, r3, #1
 8004ee8:	2b00      	cmp	r3, #0
 8004eea:	d00b      	beq.n	8004f04 <HAL_UART_IRQHandler+0x104>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8004eec:	687b      	ldr	r3, [r7, #4]
 8004eee:	681b      	ldr	r3, [r3, #0]
 8004ef0:	2204      	movs	r2, #4
 8004ef2:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8004ef4:	687b      	ldr	r3, [r7, #4]
 8004ef6:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8004efa:	f043 0202 	orr.w	r2, r3, #2
 8004efe:	687b      	ldr	r3, [r7, #4]
 8004f00:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 8004f04:	69fb      	ldr	r3, [r7, #28]
 8004f06:	f003 0308 	and.w	r3, r3, #8
 8004f0a:	2b00      	cmp	r3, #0
 8004f0c:	d015      	beq.n	8004f3a <HAL_UART_IRQHandler+0x13a>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 8004f0e:	69bb      	ldr	r3, [r7, #24]
 8004f10:	f003 0320 	and.w	r3, r3, #32
 8004f14:	2b00      	cmp	r3, #0
 8004f16:	d104      	bne.n	8004f22 <HAL_UART_IRQHandler+0x122>
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
 8004f18:	697a      	ldr	r2, [r7, #20]
 8004f1a:	4b48      	ldr	r3, [pc, #288]	; (800503c <HAL_UART_IRQHandler+0x23c>)
 8004f1c:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 8004f1e:	2b00      	cmp	r3, #0
 8004f20:	d00b      	beq.n	8004f3a <HAL_UART_IRQHandler+0x13a>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8004f22:	687b      	ldr	r3, [r7, #4]
 8004f24:	681b      	ldr	r3, [r3, #0]
 8004f26:	2208      	movs	r2, #8
 8004f28:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8004f2a:	687b      	ldr	r3, [r7, #4]
 8004f2c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8004f30:	f043 0208 	orr.w	r2, r3, #8
 8004f34:	687b      	ldr	r3, [r7, #4]
 8004f36:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 8004f3a:	69fb      	ldr	r3, [r7, #28]
 8004f3c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004f40:	2b00      	cmp	r3, #0
 8004f42:	d011      	beq.n	8004f68 <HAL_UART_IRQHandler+0x168>
 8004f44:	69bb      	ldr	r3, [r7, #24]
 8004f46:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8004f4a:	2b00      	cmp	r3, #0
 8004f4c:	d00c      	beq.n	8004f68 <HAL_UART_IRQHandler+0x168>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8004f4e:	687b      	ldr	r3, [r7, #4]
 8004f50:	681b      	ldr	r3, [r3, #0]
 8004f52:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8004f56:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 8004f58:	687b      	ldr	r3, [r7, #4]
 8004f5a:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8004f5e:	f043 0220 	orr.w	r2, r3, #32
 8004f62:	687b      	ldr	r3, [r7, #4]
 8004f64:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8004f68:	687b      	ldr	r3, [r7, #4]
 8004f6a:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8004f6e:	2b00      	cmp	r3, #0
 8004f70:	f000 81f6 	beq.w	8005360 <HAL_UART_IRQHandler+0x560>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 8004f74:	69fb      	ldr	r3, [r7, #28]
 8004f76:	f003 0320 	and.w	r3, r3, #32
 8004f7a:	2b00      	cmp	r3, #0
 8004f7c:	d011      	beq.n	8004fa2 <HAL_UART_IRQHandler+0x1a2>
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 8004f7e:	69bb      	ldr	r3, [r7, #24]
 8004f80:	f003 0320 	and.w	r3, r3, #32
 8004f84:	2b00      	cmp	r3, #0
 8004f86:	d104      	bne.n	8004f92 <HAL_UART_IRQHandler+0x192>
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 8004f88:	697b      	ldr	r3, [r7, #20]
 8004f8a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004f8e:	2b00      	cmp	r3, #0
 8004f90:	d007      	beq.n	8004fa2 <HAL_UART_IRQHandler+0x1a2>
      {
        if (huart->RxISR != NULL)
 8004f92:	687b      	ldr	r3, [r7, #4]
 8004f94:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004f96:	2b00      	cmp	r3, #0
 8004f98:	d003      	beq.n	8004fa2 <HAL_UART_IRQHandler+0x1a2>
        {
          huart->RxISR(huart);
 8004f9a:	687b      	ldr	r3, [r7, #4]
 8004f9c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004f9e:	6878      	ldr	r0, [r7, #4]
 8004fa0:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 8004fa2:	687b      	ldr	r3, [r7, #4]
 8004fa4:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8004fa8:	60fb      	str	r3, [r7, #12]
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8004faa:	687b      	ldr	r3, [r7, #4]
 8004fac:	681b      	ldr	r3, [r3, #0]
 8004fae:	689b      	ldr	r3, [r3, #8]
 8004fb0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004fb4:	2b40      	cmp	r3, #64	; 0x40
 8004fb6:	d004      	beq.n	8004fc2 <HAL_UART_IRQHandler+0x1c2>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 8004fb8:	68fb      	ldr	r3, [r7, #12]
 8004fba:	f003 0328 	and.w	r3, r3, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8004fbe:	2b00      	cmp	r3, #0
 8004fc0:	d031      	beq.n	8005026 <HAL_UART_IRQHandler+0x226>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8004fc2:	6878      	ldr	r0, [r7, #4]
 8004fc4:	f001 f9c2 	bl	800634c <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004fc8:	687b      	ldr	r3, [r7, #4]
 8004fca:	681b      	ldr	r3, [r3, #0]
 8004fcc:	689b      	ldr	r3, [r3, #8]
 8004fce:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004fd2:	2b40      	cmp	r3, #64	; 0x40
 8004fd4:	d123      	bne.n	800501e <HAL_UART_IRQHandler+0x21e>
        {
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8004fd6:	687b      	ldr	r3, [r7, #4]
 8004fd8:	681b      	ldr	r3, [r3, #0]
 8004fda:	689a      	ldr	r2, [r3, #8]
 8004fdc:	687b      	ldr	r3, [r7, #4]
 8004fde:	681b      	ldr	r3, [r3, #0]
 8004fe0:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004fe4:	609a      	str	r2, [r3, #8]

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8004fe6:	687b      	ldr	r3, [r7, #4]
 8004fe8:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8004fea:	2b00      	cmp	r3, #0
 8004fec:	d013      	beq.n	8005016 <HAL_UART_IRQHandler+0x216>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8004fee:	687b      	ldr	r3, [r7, #4]
 8004ff0:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8004ff2:	4a14      	ldr	r2, [pc, #80]	; (8005044 <HAL_UART_IRQHandler+0x244>)
 8004ff4:	651a      	str	r2, [r3, #80]	; 0x50

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8004ff6:	687b      	ldr	r3, [r7, #4]
 8004ff8:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8004ffa:	4618      	mov	r0, r3
 8004ffc:	f7fc fe3c 	bl	8001c78 <HAL_DMA_Abort_IT>
 8005000:	4603      	mov	r3, r0
 8005002:	2b00      	cmp	r3, #0
 8005004:	d017      	beq.n	8005036 <HAL_UART_IRQHandler+0x236>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8005006:	687b      	ldr	r3, [r7, #4]
 8005008:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800500a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800500c:	687a      	ldr	r2, [r7, #4]
 800500e:	6fd2      	ldr	r2, [r2, #124]	; 0x7c
 8005010:	4610      	mov	r0, r2
 8005012:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005014:	e00f      	b.n	8005036 <HAL_UART_IRQHandler+0x236>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8005016:	6878      	ldr	r0, [r7, #4]
 8005018:	f000 f9b6 	bl	8005388 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800501c:	e00b      	b.n	8005036 <HAL_UART_IRQHandler+0x236>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800501e:	6878      	ldr	r0, [r7, #4]
 8005020:	f000 f9b2 	bl	8005388 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005024:	e007      	b.n	8005036 <HAL_UART_IRQHandler+0x236>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8005026:	6878      	ldr	r0, [r7, #4]
 8005028:	f000 f9ae 	bl	8005388 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 800502c:	687b      	ldr	r3, [r7, #4]
 800502e:	2200      	movs	r2, #0
 8005030:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
      }
    }
    return;
 8005034:	e194      	b.n	8005360 <HAL_UART_IRQHandler+0x560>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005036:	bf00      	nop
    return;
 8005038:	e192      	b.n	8005360 <HAL_UART_IRQHandler+0x560>
 800503a:	bf00      	nop
 800503c:	10000001 	.word	0x10000001
 8005040:	04000120 	.word	0x04000120
 8005044:	080063b1 	.word	0x080063b1

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005048:	687b      	ldr	r3, [r7, #4]
 800504a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800504c:	2b01      	cmp	r3, #1
 800504e:	f040 810f 	bne.w	8005270 <HAL_UART_IRQHandler+0x470>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 8005052:	69fb      	ldr	r3, [r7, #28]
 8005054:	f003 0310 	and.w	r3, r3, #16
 8005058:	2b00      	cmp	r3, #0
 800505a:	f000 8109 	beq.w	8005270 <HAL_UART_IRQHandler+0x470>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 800505e:	69bb      	ldr	r3, [r7, #24]
 8005060:	f003 0310 	and.w	r3, r3, #16
 8005064:	2b00      	cmp	r3, #0
 8005066:	f000 8103 	beq.w	8005270 <HAL_UART_IRQHandler+0x470>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800506a:	687b      	ldr	r3, [r7, #4]
 800506c:	681b      	ldr	r3, [r3, #0]
 800506e:	2210      	movs	r2, #16
 8005070:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005072:	687b      	ldr	r3, [r7, #4]
 8005074:	681b      	ldr	r3, [r3, #0]
 8005076:	689b      	ldr	r3, [r3, #8]
 8005078:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800507c:	2b40      	cmp	r3, #64	; 0x40
 800507e:	f040 80bb 	bne.w	80051f8 <HAL_UART_IRQHandler+0x3f8>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8005082:	687b      	ldr	r3, [r7, #4]
 8005084:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8005086:	681b      	ldr	r3, [r3, #0]
 8005088:	4a96      	ldr	r2, [pc, #600]	; (80052e4 <HAL_UART_IRQHandler+0x4e4>)
 800508a:	4293      	cmp	r3, r2
 800508c:	d059      	beq.n	8005142 <HAL_UART_IRQHandler+0x342>
 800508e:	687b      	ldr	r3, [r7, #4]
 8005090:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8005092:	681b      	ldr	r3, [r3, #0]
 8005094:	4a94      	ldr	r2, [pc, #592]	; (80052e8 <HAL_UART_IRQHandler+0x4e8>)
 8005096:	4293      	cmp	r3, r2
 8005098:	d053      	beq.n	8005142 <HAL_UART_IRQHandler+0x342>
 800509a:	687b      	ldr	r3, [r7, #4]
 800509c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800509e:	681b      	ldr	r3, [r3, #0]
 80050a0:	4a92      	ldr	r2, [pc, #584]	; (80052ec <HAL_UART_IRQHandler+0x4ec>)
 80050a2:	4293      	cmp	r3, r2
 80050a4:	d04d      	beq.n	8005142 <HAL_UART_IRQHandler+0x342>
 80050a6:	687b      	ldr	r3, [r7, #4]
 80050a8:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80050aa:	681b      	ldr	r3, [r3, #0]
 80050ac:	4a90      	ldr	r2, [pc, #576]	; (80052f0 <HAL_UART_IRQHandler+0x4f0>)
 80050ae:	4293      	cmp	r3, r2
 80050b0:	d047      	beq.n	8005142 <HAL_UART_IRQHandler+0x342>
 80050b2:	687b      	ldr	r3, [r7, #4]
 80050b4:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80050b6:	681b      	ldr	r3, [r3, #0]
 80050b8:	4a8e      	ldr	r2, [pc, #568]	; (80052f4 <HAL_UART_IRQHandler+0x4f4>)
 80050ba:	4293      	cmp	r3, r2
 80050bc:	d041      	beq.n	8005142 <HAL_UART_IRQHandler+0x342>
 80050be:	687b      	ldr	r3, [r7, #4]
 80050c0:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80050c2:	681b      	ldr	r3, [r3, #0]
 80050c4:	4a8c      	ldr	r2, [pc, #560]	; (80052f8 <HAL_UART_IRQHandler+0x4f8>)
 80050c6:	4293      	cmp	r3, r2
 80050c8:	d03b      	beq.n	8005142 <HAL_UART_IRQHandler+0x342>
 80050ca:	687b      	ldr	r3, [r7, #4]
 80050cc:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80050ce:	681b      	ldr	r3, [r3, #0]
 80050d0:	4a8a      	ldr	r2, [pc, #552]	; (80052fc <HAL_UART_IRQHandler+0x4fc>)
 80050d2:	4293      	cmp	r3, r2
 80050d4:	d035      	beq.n	8005142 <HAL_UART_IRQHandler+0x342>
 80050d6:	687b      	ldr	r3, [r7, #4]
 80050d8:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80050da:	681b      	ldr	r3, [r3, #0]
 80050dc:	4a88      	ldr	r2, [pc, #544]	; (8005300 <HAL_UART_IRQHandler+0x500>)
 80050de:	4293      	cmp	r3, r2
 80050e0:	d02f      	beq.n	8005142 <HAL_UART_IRQHandler+0x342>
 80050e2:	687b      	ldr	r3, [r7, #4]
 80050e4:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80050e6:	681b      	ldr	r3, [r3, #0]
 80050e8:	4a86      	ldr	r2, [pc, #536]	; (8005304 <HAL_UART_IRQHandler+0x504>)
 80050ea:	4293      	cmp	r3, r2
 80050ec:	d029      	beq.n	8005142 <HAL_UART_IRQHandler+0x342>
 80050ee:	687b      	ldr	r3, [r7, #4]
 80050f0:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80050f2:	681b      	ldr	r3, [r3, #0]
 80050f4:	4a84      	ldr	r2, [pc, #528]	; (8005308 <HAL_UART_IRQHandler+0x508>)
 80050f6:	4293      	cmp	r3, r2
 80050f8:	d023      	beq.n	8005142 <HAL_UART_IRQHandler+0x342>
 80050fa:	687b      	ldr	r3, [r7, #4]
 80050fc:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80050fe:	681b      	ldr	r3, [r3, #0]
 8005100:	4a82      	ldr	r2, [pc, #520]	; (800530c <HAL_UART_IRQHandler+0x50c>)
 8005102:	4293      	cmp	r3, r2
 8005104:	d01d      	beq.n	8005142 <HAL_UART_IRQHandler+0x342>
 8005106:	687b      	ldr	r3, [r7, #4]
 8005108:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800510a:	681b      	ldr	r3, [r3, #0]
 800510c:	4a80      	ldr	r2, [pc, #512]	; (8005310 <HAL_UART_IRQHandler+0x510>)
 800510e:	4293      	cmp	r3, r2
 8005110:	d017      	beq.n	8005142 <HAL_UART_IRQHandler+0x342>
 8005112:	687b      	ldr	r3, [r7, #4]
 8005114:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8005116:	681b      	ldr	r3, [r3, #0]
 8005118:	4a7e      	ldr	r2, [pc, #504]	; (8005314 <HAL_UART_IRQHandler+0x514>)
 800511a:	4293      	cmp	r3, r2
 800511c:	d011      	beq.n	8005142 <HAL_UART_IRQHandler+0x342>
 800511e:	687b      	ldr	r3, [r7, #4]
 8005120:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8005122:	681b      	ldr	r3, [r3, #0]
 8005124:	4a7c      	ldr	r2, [pc, #496]	; (8005318 <HAL_UART_IRQHandler+0x518>)
 8005126:	4293      	cmp	r3, r2
 8005128:	d00b      	beq.n	8005142 <HAL_UART_IRQHandler+0x342>
 800512a:	687b      	ldr	r3, [r7, #4]
 800512c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800512e:	681b      	ldr	r3, [r3, #0]
 8005130:	4a7a      	ldr	r2, [pc, #488]	; (800531c <HAL_UART_IRQHandler+0x51c>)
 8005132:	4293      	cmp	r3, r2
 8005134:	d005      	beq.n	8005142 <HAL_UART_IRQHandler+0x342>
 8005136:	687b      	ldr	r3, [r7, #4]
 8005138:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800513a:	681b      	ldr	r3, [r3, #0]
 800513c:	4a78      	ldr	r2, [pc, #480]	; (8005320 <HAL_UART_IRQHandler+0x520>)
 800513e:	4293      	cmp	r3, r2
 8005140:	d105      	bne.n	800514e <HAL_UART_IRQHandler+0x34e>
 8005142:	687b      	ldr	r3, [r7, #4]
 8005144:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8005146:	681b      	ldr	r3, [r3, #0]
 8005148:	685b      	ldr	r3, [r3, #4]
 800514a:	b29b      	uxth	r3, r3
 800514c:	e004      	b.n	8005158 <HAL_UART_IRQHandler+0x358>
 800514e:	687b      	ldr	r3, [r7, #4]
 8005150:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8005152:	681b      	ldr	r3, [r3, #0]
 8005154:	685b      	ldr	r3, [r3, #4]
 8005156:	b29b      	uxth	r3, r3
 8005158:	813b      	strh	r3, [r7, #8]
      if ((nb_remaining_rx_data > 0U)
 800515a:	893b      	ldrh	r3, [r7, #8]
 800515c:	2b00      	cmp	r3, #0
 800515e:	f000 8101 	beq.w	8005364 <HAL_UART_IRQHandler+0x564>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8005162:	687b      	ldr	r3, [r7, #4]
 8005164:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8005168:	893a      	ldrh	r2, [r7, #8]
 800516a:	429a      	cmp	r2, r3
 800516c:	f080 80fa 	bcs.w	8005364 <HAL_UART_IRQHandler+0x564>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8005170:	687b      	ldr	r3, [r7, #4]
 8005172:	893a      	ldrh	r2, [r7, #8]
 8005174:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8005178:	687b      	ldr	r3, [r7, #4]
 800517a:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800517c:	69db      	ldr	r3, [r3, #28]
 800517e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005182:	d02b      	beq.n	80051dc <HAL_UART_IRQHandler+0x3dc>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8005184:	687b      	ldr	r3, [r7, #4]
 8005186:	681b      	ldr	r3, [r3, #0]
 8005188:	681a      	ldr	r2, [r3, #0]
 800518a:	687b      	ldr	r3, [r7, #4]
 800518c:	681b      	ldr	r3, [r3, #0]
 800518e:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8005192:	601a      	str	r2, [r3, #0]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005194:	687b      	ldr	r3, [r7, #4]
 8005196:	681b      	ldr	r3, [r3, #0]
 8005198:	689a      	ldr	r2, [r3, #8]
 800519a:	687b      	ldr	r3, [r7, #4]
 800519c:	681b      	ldr	r3, [r3, #0]
 800519e:	f022 0201 	bic.w	r2, r2, #1
 80051a2:	609a      	str	r2, [r3, #8]

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80051a4:	687b      	ldr	r3, [r7, #4]
 80051a6:	681b      	ldr	r3, [r3, #0]
 80051a8:	689a      	ldr	r2, [r3, #8]
 80051aa:	687b      	ldr	r3, [r7, #4]
 80051ac:	681b      	ldr	r3, [r3, #0]
 80051ae:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80051b2:	609a      	str	r2, [r3, #8]

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 80051b4:	687b      	ldr	r3, [r7, #4]
 80051b6:	2220      	movs	r2, #32
 80051b8:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80051bc:	687b      	ldr	r3, [r7, #4]
 80051be:	2200      	movs	r2, #0
 80051c0:	66da      	str	r2, [r3, #108]	; 0x6c

          CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80051c2:	687b      	ldr	r3, [r7, #4]
 80051c4:	681b      	ldr	r3, [r3, #0]
 80051c6:	681a      	ldr	r2, [r3, #0]
 80051c8:	687b      	ldr	r3, [r7, #4]
 80051ca:	681b      	ldr	r3, [r3, #0]
 80051cc:	f022 0210 	bic.w	r2, r2, #16
 80051d0:	601a      	str	r2, [r3, #0]

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 80051d2:	687b      	ldr	r3, [r7, #4]
 80051d4:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80051d6:	4618      	mov	r0, r3
 80051d8:	f7fc fa30 	bl	800163c <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 80051dc:	687b      	ldr	r3, [r7, #4]
 80051de:	f8b3 205c 	ldrh.w	r2, [r3, #92]	; 0x5c
 80051e2:	687b      	ldr	r3, [r7, #4]
 80051e4:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 80051e8:	b29b      	uxth	r3, r3
 80051ea:	1ad3      	subs	r3, r2, r3
 80051ec:	b29b      	uxth	r3, r3
 80051ee:	4619      	mov	r1, r3
 80051f0:	6878      	ldr	r0, [r7, #4]
 80051f2:	f000 f8d3 	bl	800539c <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 80051f6:	e0b5      	b.n	8005364 <HAL_UART_IRQHandler+0x564>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 80051f8:	687b      	ldr	r3, [r7, #4]
 80051fa:	f8b3 205c 	ldrh.w	r2, [r3, #92]	; 0x5c
 80051fe:	687b      	ldr	r3, [r7, #4]
 8005200:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8005204:	b29b      	uxth	r3, r3
 8005206:	1ad3      	subs	r3, r2, r3
 8005208:	817b      	strh	r3, [r7, #10]
      if ((huart->RxXferCount > 0U)
 800520a:	687b      	ldr	r3, [r7, #4]
 800520c:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8005210:	b29b      	uxth	r3, r3
 8005212:	2b00      	cmp	r3, #0
 8005214:	f000 80a8 	beq.w	8005368 <HAL_UART_IRQHandler+0x568>
          && (nb_rx_data > 0U))
 8005218:	897b      	ldrh	r3, [r7, #10]
 800521a:	2b00      	cmp	r3, #0
 800521c:	f000 80a4 	beq.w	8005368 <HAL_UART_IRQHandler+0x568>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8005220:	687b      	ldr	r3, [r7, #4]
 8005222:	681b      	ldr	r3, [r3, #0]
 8005224:	681a      	ldr	r2, [r3, #0]
 8005226:	687b      	ldr	r3, [r7, #4]
 8005228:	681b      	ldr	r3, [r3, #0]
 800522a:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 800522e:	601a      	str	r2, [r3, #0]

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8005230:	687b      	ldr	r3, [r7, #4]
 8005232:	681b      	ldr	r3, [r3, #0]
 8005234:	6899      	ldr	r1, [r3, #8]
 8005236:	687b      	ldr	r3, [r7, #4]
 8005238:	681a      	ldr	r2, [r3, #0]
 800523a:	4b3a      	ldr	r3, [pc, #232]	; (8005324 <HAL_UART_IRQHandler+0x524>)
 800523c:	400b      	ands	r3, r1
 800523e:	6093      	str	r3, [r2, #8]

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8005240:	687b      	ldr	r3, [r7, #4]
 8005242:	2220      	movs	r2, #32
 8005244:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005248:	687b      	ldr	r3, [r7, #4]
 800524a:	2200      	movs	r2, #0
 800524c:	66da      	str	r2, [r3, #108]	; 0x6c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 800524e:	687b      	ldr	r3, [r7, #4]
 8005250:	2200      	movs	r2, #0
 8005252:	671a      	str	r2, [r3, #112]	; 0x70

        CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005254:	687b      	ldr	r3, [r7, #4]
 8005256:	681b      	ldr	r3, [r3, #0]
 8005258:	681a      	ldr	r2, [r3, #0]
 800525a:	687b      	ldr	r3, [r7, #4]
 800525c:	681b      	ldr	r3, [r3, #0]
 800525e:	f022 0210 	bic.w	r2, r2, #16
 8005262:	601a      	str	r2, [r3, #0]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8005264:	897b      	ldrh	r3, [r7, #10]
 8005266:	4619      	mov	r1, r3
 8005268:	6878      	ldr	r0, [r7, #4]
 800526a:	f000 f897 	bl	800539c <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 800526e:	e07b      	b.n	8005368 <HAL_UART_IRQHandler+0x568>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 8005270:	69fb      	ldr	r3, [r7, #28]
 8005272:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8005276:	2b00      	cmp	r3, #0
 8005278:	d00d      	beq.n	8005296 <HAL_UART_IRQHandler+0x496>
 800527a:	697b      	ldr	r3, [r7, #20]
 800527c:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8005280:	2b00      	cmp	r3, #0
 8005282:	d008      	beq.n	8005296 <HAL_UART_IRQHandler+0x496>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 8005284:	687b      	ldr	r3, [r7, #4]
 8005286:	681b      	ldr	r3, [r3, #0]
 8005288:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 800528c:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 800528e:	6878      	ldr	r0, [r7, #4]
 8005290:	f001 f8be 	bl	8006410 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8005294:	e06b      	b.n	800536e <HAL_UART_IRQHandler+0x56e>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
 8005296:	69fb      	ldr	r3, [r7, #28]
 8005298:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800529c:	2b00      	cmp	r3, #0
 800529e:	d012      	beq.n	80052c6 <HAL_UART_IRQHandler+0x4c6>
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
 80052a0:	69bb      	ldr	r3, [r7, #24]
 80052a2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80052a6:	2b00      	cmp	r3, #0
 80052a8:	d104      	bne.n	80052b4 <HAL_UART_IRQHandler+0x4b4>
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
 80052aa:	697b      	ldr	r3, [r7, #20]
 80052ac:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80052b0:	2b00      	cmp	r3, #0
 80052b2:	d008      	beq.n	80052c6 <HAL_UART_IRQHandler+0x4c6>
  {
    if (huart->TxISR != NULL)
 80052b4:	687b      	ldr	r3, [r7, #4]
 80052b6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80052b8:	2b00      	cmp	r3, #0
 80052ba:	d057      	beq.n	800536c <HAL_UART_IRQHandler+0x56c>
    {
      huart->TxISR(huart);
 80052bc:	687b      	ldr	r3, [r7, #4]
 80052be:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80052c0:	6878      	ldr	r0, [r7, #4]
 80052c2:	4798      	blx	r3
    }
    return;
 80052c4:	e052      	b.n	800536c <HAL_UART_IRQHandler+0x56c>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 80052c6:	69fb      	ldr	r3, [r7, #28]
 80052c8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80052cc:	2b00      	cmp	r3, #0
 80052ce:	d02b      	beq.n	8005328 <HAL_UART_IRQHandler+0x528>
 80052d0:	69bb      	ldr	r3, [r7, #24]
 80052d2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80052d6:	2b00      	cmp	r3, #0
 80052d8:	d026      	beq.n	8005328 <HAL_UART_IRQHandler+0x528>
  {
    UART_EndTransmit_IT(huart);
 80052da:	6878      	ldr	r0, [r7, #4]
 80052dc:	f001 f87e 	bl	80063dc <UART_EndTransmit_IT>
    return;
 80052e0:	e045      	b.n	800536e <HAL_UART_IRQHandler+0x56e>
 80052e2:	bf00      	nop
 80052e4:	40020010 	.word	0x40020010
 80052e8:	40020028 	.word	0x40020028
 80052ec:	40020040 	.word	0x40020040
 80052f0:	40020058 	.word	0x40020058
 80052f4:	40020070 	.word	0x40020070
 80052f8:	40020088 	.word	0x40020088
 80052fc:	400200a0 	.word	0x400200a0
 8005300:	400200b8 	.word	0x400200b8
 8005304:	40020410 	.word	0x40020410
 8005308:	40020428 	.word	0x40020428
 800530c:	40020440 	.word	0x40020440
 8005310:	40020458 	.word	0x40020458
 8005314:	40020470 	.word	0x40020470
 8005318:	40020488 	.word	0x40020488
 800531c:	400204a0 	.word	0x400204a0
 8005320:	400204b8 	.word	0x400204b8
 8005324:	effffffe 	.word	0xeffffffe
  }

  /* UART TX Fifo Empty occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_TXFE) != 0U) && ((cr1its & USART_CR1_TXFEIE) != 0U))
 8005328:	69fb      	ldr	r3, [r7, #28]
 800532a:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800532e:	2b00      	cmp	r3, #0
 8005330:	d008      	beq.n	8005344 <HAL_UART_IRQHandler+0x544>
 8005332:	69bb      	ldr	r3, [r7, #24]
 8005334:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8005338:	2b00      	cmp	r3, #0
 800533a:	d003      	beq.n	8005344 <HAL_UART_IRQHandler+0x544>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Tx Fifo Empty Callback */
    huart->TxFifoEmptyCallback(huart);
#else
    /* Call legacy weak Tx Fifo Empty Callback */
    HAL_UARTEx_TxFifoEmptyCallback(huart);
 800533c:	6878      	ldr	r0, [r7, #4]
 800533e:	f001 f87b 	bl	8006438 <HAL_UARTEx_TxFifoEmptyCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8005342:	e014      	b.n	800536e <HAL_UART_IRQHandler+0x56e>
  }

  /* UART RX Fifo Full occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_RXFF) != 0U) && ((cr1its & USART_CR1_RXFFIE) != 0U))
 8005344:	69fb      	ldr	r3, [r7, #28]
 8005346:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800534a:	2b00      	cmp	r3, #0
 800534c:	d00f      	beq.n	800536e <HAL_UART_IRQHandler+0x56e>
 800534e:	69bb      	ldr	r3, [r7, #24]
 8005350:	2b00      	cmp	r3, #0
 8005352:	da0c      	bge.n	800536e <HAL_UART_IRQHandler+0x56e>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Rx Fifo Full Callback */
    huart->RxFifoFullCallback(huart);
#else
    /* Call legacy weak Rx Fifo Full Callback */
    HAL_UARTEx_RxFifoFullCallback(huart);
 8005354:	6878      	ldr	r0, [r7, #4]
 8005356:	f001 f865 	bl	8006424 <HAL_UARTEx_RxFifoFullCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800535a:	e008      	b.n	800536e <HAL_UART_IRQHandler+0x56e>
      return;
 800535c:	bf00      	nop
 800535e:	e006      	b.n	800536e <HAL_UART_IRQHandler+0x56e>
    return;
 8005360:	bf00      	nop
 8005362:	e004      	b.n	800536e <HAL_UART_IRQHandler+0x56e>
      return;
 8005364:	bf00      	nop
 8005366:	e002      	b.n	800536e <HAL_UART_IRQHandler+0x56e>
      return;
 8005368:	bf00      	nop
 800536a:	e000      	b.n	800536e <HAL_UART_IRQHandler+0x56e>
    return;
 800536c:	bf00      	nop
  }
}
 800536e:	3720      	adds	r7, #32
 8005370:	46bd      	mov	sp, r7
 8005372:	bd80      	pop	{r7, pc}

08005374 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8005374:	b480      	push	{r7}
 8005376:	b083      	sub	sp, #12
 8005378:	af00      	add	r7, sp, #0
 800537a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 800537c:	bf00      	nop
 800537e:	370c      	adds	r7, #12
 8005380:	46bd      	mov	sp, r7
 8005382:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005386:	4770      	bx	lr

08005388 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8005388:	b480      	push	{r7}
 800538a:	b083      	sub	sp, #12
 800538c:	af00      	add	r7, sp, #0
 800538e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 8005390:	bf00      	nop
 8005392:	370c      	adds	r7, #12
 8005394:	46bd      	mov	sp, r7
 8005396:	f85d 7b04 	ldr.w	r7, [sp], #4
 800539a:	4770      	bx	lr

0800539c <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 800539c:	b480      	push	{r7}
 800539e:	b083      	sub	sp, #12
 80053a0:	af00      	add	r7, sp, #0
 80053a2:	6078      	str	r0, [r7, #4]
 80053a4:	460b      	mov	r3, r1
 80053a6:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 80053a8:	bf00      	nop
 80053aa:	370c      	adds	r7, #12
 80053ac:	46bd      	mov	sp, r7
 80053ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053b2:	4770      	bx	lr

080053b4 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 80053b4:	b5b0      	push	{r4, r5, r7, lr}
 80053b6:	b08e      	sub	sp, #56	; 0x38
 80053b8:	af00      	add	r7, sp, #0
 80053ba:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 80053bc:	2300      	movs	r3, #0
 80053be:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80053c2:	687b      	ldr	r3, [r7, #4]
 80053c4:	689a      	ldr	r2, [r3, #8]
 80053c6:	687b      	ldr	r3, [r7, #4]
 80053c8:	691b      	ldr	r3, [r3, #16]
 80053ca:	431a      	orrs	r2, r3
 80053cc:	687b      	ldr	r3, [r7, #4]
 80053ce:	695b      	ldr	r3, [r3, #20]
 80053d0:	431a      	orrs	r2, r3
 80053d2:	687b      	ldr	r3, [r7, #4]
 80053d4:	69db      	ldr	r3, [r3, #28]
 80053d6:	4313      	orrs	r3, r2
 80053d8:	637b      	str	r3, [r7, #52]	; 0x34
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 80053da:	687b      	ldr	r3, [r7, #4]
 80053dc:	681b      	ldr	r3, [r3, #0]
 80053de:	681a      	ldr	r2, [r3, #0]
 80053e0:	4bbf      	ldr	r3, [pc, #764]	; (80056e0 <UART_SetConfig+0x32c>)
 80053e2:	4013      	ands	r3, r2
 80053e4:	687a      	ldr	r2, [r7, #4]
 80053e6:	6812      	ldr	r2, [r2, #0]
 80053e8:	6b79      	ldr	r1, [r7, #52]	; 0x34
 80053ea:	430b      	orrs	r3, r1
 80053ec:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80053ee:	687b      	ldr	r3, [r7, #4]
 80053f0:	681b      	ldr	r3, [r3, #0]
 80053f2:	685b      	ldr	r3, [r3, #4]
 80053f4:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 80053f8:	687b      	ldr	r3, [r7, #4]
 80053fa:	68da      	ldr	r2, [r3, #12]
 80053fc:	687b      	ldr	r3, [r7, #4]
 80053fe:	681b      	ldr	r3, [r3, #0]
 8005400:	430a      	orrs	r2, r1
 8005402:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8005404:	687b      	ldr	r3, [r7, #4]
 8005406:	699b      	ldr	r3, [r3, #24]
 8005408:	637b      	str	r3, [r7, #52]	; 0x34

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 800540a:	687b      	ldr	r3, [r7, #4]
 800540c:	681b      	ldr	r3, [r3, #0]
 800540e:	4ab5      	ldr	r2, [pc, #724]	; (80056e4 <UART_SetConfig+0x330>)
 8005410:	4293      	cmp	r3, r2
 8005412:	d004      	beq.n	800541e <UART_SetConfig+0x6a>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8005414:	687b      	ldr	r3, [r7, #4]
 8005416:	6a1b      	ldr	r3, [r3, #32]
 8005418:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800541a:	4313      	orrs	r3, r2
 800541c:	637b      	str	r3, [r7, #52]	; 0x34
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800541e:	687b      	ldr	r3, [r7, #4]
 8005420:	681b      	ldr	r3, [r3, #0]
 8005422:	689a      	ldr	r2, [r3, #8]
 8005424:	4bb0      	ldr	r3, [pc, #704]	; (80056e8 <UART_SetConfig+0x334>)
 8005426:	4013      	ands	r3, r2
 8005428:	687a      	ldr	r2, [r7, #4]
 800542a:	6812      	ldr	r2, [r2, #0]
 800542c:	6b79      	ldr	r1, [r7, #52]	; 0x34
 800542e:	430b      	orrs	r3, r1
 8005430:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8005432:	687b      	ldr	r3, [r7, #4]
 8005434:	681b      	ldr	r3, [r3, #0]
 8005436:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005438:	f023 010f 	bic.w	r1, r3, #15
 800543c:	687b      	ldr	r3, [r7, #4]
 800543e:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8005440:	687b      	ldr	r3, [r7, #4]
 8005442:	681b      	ldr	r3, [r3, #0]
 8005444:	430a      	orrs	r2, r1
 8005446:	62da      	str	r2, [r3, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8005448:	687b      	ldr	r3, [r7, #4]
 800544a:	681b      	ldr	r3, [r3, #0]
 800544c:	4aa7      	ldr	r2, [pc, #668]	; (80056ec <UART_SetConfig+0x338>)
 800544e:	4293      	cmp	r3, r2
 8005450:	d176      	bne.n	8005540 <UART_SetConfig+0x18c>
 8005452:	4ba7      	ldr	r3, [pc, #668]	; (80056f0 <UART_SetConfig+0x33c>)
 8005454:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005456:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800545a:	2b28      	cmp	r3, #40	; 0x28
 800545c:	d86c      	bhi.n	8005538 <UART_SetConfig+0x184>
 800545e:	a201      	add	r2, pc, #4	; (adr r2, 8005464 <UART_SetConfig+0xb0>)
 8005460:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005464:	08005509 	.word	0x08005509
 8005468:	08005539 	.word	0x08005539
 800546c:	08005539 	.word	0x08005539
 8005470:	08005539 	.word	0x08005539
 8005474:	08005539 	.word	0x08005539
 8005478:	08005539 	.word	0x08005539
 800547c:	08005539 	.word	0x08005539
 8005480:	08005539 	.word	0x08005539
 8005484:	08005511 	.word	0x08005511
 8005488:	08005539 	.word	0x08005539
 800548c:	08005539 	.word	0x08005539
 8005490:	08005539 	.word	0x08005539
 8005494:	08005539 	.word	0x08005539
 8005498:	08005539 	.word	0x08005539
 800549c:	08005539 	.word	0x08005539
 80054a0:	08005539 	.word	0x08005539
 80054a4:	08005519 	.word	0x08005519
 80054a8:	08005539 	.word	0x08005539
 80054ac:	08005539 	.word	0x08005539
 80054b0:	08005539 	.word	0x08005539
 80054b4:	08005539 	.word	0x08005539
 80054b8:	08005539 	.word	0x08005539
 80054bc:	08005539 	.word	0x08005539
 80054c0:	08005539 	.word	0x08005539
 80054c4:	08005521 	.word	0x08005521
 80054c8:	08005539 	.word	0x08005539
 80054cc:	08005539 	.word	0x08005539
 80054d0:	08005539 	.word	0x08005539
 80054d4:	08005539 	.word	0x08005539
 80054d8:	08005539 	.word	0x08005539
 80054dc:	08005539 	.word	0x08005539
 80054e0:	08005539 	.word	0x08005539
 80054e4:	08005529 	.word	0x08005529
 80054e8:	08005539 	.word	0x08005539
 80054ec:	08005539 	.word	0x08005539
 80054f0:	08005539 	.word	0x08005539
 80054f4:	08005539 	.word	0x08005539
 80054f8:	08005539 	.word	0x08005539
 80054fc:	08005539 	.word	0x08005539
 8005500:	08005539 	.word	0x08005539
 8005504:	08005531 	.word	0x08005531
 8005508:	2301      	movs	r3, #1
 800550a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800550e:	e326      	b.n	8005b5e <UART_SetConfig+0x7aa>
 8005510:	2304      	movs	r3, #4
 8005512:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8005516:	e322      	b.n	8005b5e <UART_SetConfig+0x7aa>
 8005518:	2308      	movs	r3, #8
 800551a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800551e:	e31e      	b.n	8005b5e <UART_SetConfig+0x7aa>
 8005520:	2310      	movs	r3, #16
 8005522:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8005526:	e31a      	b.n	8005b5e <UART_SetConfig+0x7aa>
 8005528:	2320      	movs	r3, #32
 800552a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800552e:	e316      	b.n	8005b5e <UART_SetConfig+0x7aa>
 8005530:	2340      	movs	r3, #64	; 0x40
 8005532:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8005536:	e312      	b.n	8005b5e <UART_SetConfig+0x7aa>
 8005538:	2380      	movs	r3, #128	; 0x80
 800553a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800553e:	e30e      	b.n	8005b5e <UART_SetConfig+0x7aa>
 8005540:	687b      	ldr	r3, [r7, #4]
 8005542:	681b      	ldr	r3, [r3, #0]
 8005544:	4a6b      	ldr	r2, [pc, #428]	; (80056f4 <UART_SetConfig+0x340>)
 8005546:	4293      	cmp	r3, r2
 8005548:	d130      	bne.n	80055ac <UART_SetConfig+0x1f8>
 800554a:	4b69      	ldr	r3, [pc, #420]	; (80056f0 <UART_SetConfig+0x33c>)
 800554c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800554e:	f003 0307 	and.w	r3, r3, #7
 8005552:	2b05      	cmp	r3, #5
 8005554:	d826      	bhi.n	80055a4 <UART_SetConfig+0x1f0>
 8005556:	a201      	add	r2, pc, #4	; (adr r2, 800555c <UART_SetConfig+0x1a8>)
 8005558:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800555c:	08005575 	.word	0x08005575
 8005560:	0800557d 	.word	0x0800557d
 8005564:	08005585 	.word	0x08005585
 8005568:	0800558d 	.word	0x0800558d
 800556c:	08005595 	.word	0x08005595
 8005570:	0800559d 	.word	0x0800559d
 8005574:	2300      	movs	r3, #0
 8005576:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800557a:	e2f0      	b.n	8005b5e <UART_SetConfig+0x7aa>
 800557c:	2304      	movs	r3, #4
 800557e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8005582:	e2ec      	b.n	8005b5e <UART_SetConfig+0x7aa>
 8005584:	2308      	movs	r3, #8
 8005586:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800558a:	e2e8      	b.n	8005b5e <UART_SetConfig+0x7aa>
 800558c:	2310      	movs	r3, #16
 800558e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8005592:	e2e4      	b.n	8005b5e <UART_SetConfig+0x7aa>
 8005594:	2320      	movs	r3, #32
 8005596:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800559a:	e2e0      	b.n	8005b5e <UART_SetConfig+0x7aa>
 800559c:	2340      	movs	r3, #64	; 0x40
 800559e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80055a2:	e2dc      	b.n	8005b5e <UART_SetConfig+0x7aa>
 80055a4:	2380      	movs	r3, #128	; 0x80
 80055a6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80055aa:	e2d8      	b.n	8005b5e <UART_SetConfig+0x7aa>
 80055ac:	687b      	ldr	r3, [r7, #4]
 80055ae:	681b      	ldr	r3, [r3, #0]
 80055b0:	4a51      	ldr	r2, [pc, #324]	; (80056f8 <UART_SetConfig+0x344>)
 80055b2:	4293      	cmp	r3, r2
 80055b4:	d130      	bne.n	8005618 <UART_SetConfig+0x264>
 80055b6:	4b4e      	ldr	r3, [pc, #312]	; (80056f0 <UART_SetConfig+0x33c>)
 80055b8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80055ba:	f003 0307 	and.w	r3, r3, #7
 80055be:	2b05      	cmp	r3, #5
 80055c0:	d826      	bhi.n	8005610 <UART_SetConfig+0x25c>
 80055c2:	a201      	add	r2, pc, #4	; (adr r2, 80055c8 <UART_SetConfig+0x214>)
 80055c4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80055c8:	080055e1 	.word	0x080055e1
 80055cc:	080055e9 	.word	0x080055e9
 80055d0:	080055f1 	.word	0x080055f1
 80055d4:	080055f9 	.word	0x080055f9
 80055d8:	08005601 	.word	0x08005601
 80055dc:	08005609 	.word	0x08005609
 80055e0:	2300      	movs	r3, #0
 80055e2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80055e6:	e2ba      	b.n	8005b5e <UART_SetConfig+0x7aa>
 80055e8:	2304      	movs	r3, #4
 80055ea:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80055ee:	e2b6      	b.n	8005b5e <UART_SetConfig+0x7aa>
 80055f0:	2308      	movs	r3, #8
 80055f2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80055f6:	e2b2      	b.n	8005b5e <UART_SetConfig+0x7aa>
 80055f8:	2310      	movs	r3, #16
 80055fa:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80055fe:	e2ae      	b.n	8005b5e <UART_SetConfig+0x7aa>
 8005600:	2320      	movs	r3, #32
 8005602:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8005606:	e2aa      	b.n	8005b5e <UART_SetConfig+0x7aa>
 8005608:	2340      	movs	r3, #64	; 0x40
 800560a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800560e:	e2a6      	b.n	8005b5e <UART_SetConfig+0x7aa>
 8005610:	2380      	movs	r3, #128	; 0x80
 8005612:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8005616:	e2a2      	b.n	8005b5e <UART_SetConfig+0x7aa>
 8005618:	687b      	ldr	r3, [r7, #4]
 800561a:	681b      	ldr	r3, [r3, #0]
 800561c:	4a37      	ldr	r2, [pc, #220]	; (80056fc <UART_SetConfig+0x348>)
 800561e:	4293      	cmp	r3, r2
 8005620:	d130      	bne.n	8005684 <UART_SetConfig+0x2d0>
 8005622:	4b33      	ldr	r3, [pc, #204]	; (80056f0 <UART_SetConfig+0x33c>)
 8005624:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005626:	f003 0307 	and.w	r3, r3, #7
 800562a:	2b05      	cmp	r3, #5
 800562c:	d826      	bhi.n	800567c <UART_SetConfig+0x2c8>
 800562e:	a201      	add	r2, pc, #4	; (adr r2, 8005634 <UART_SetConfig+0x280>)
 8005630:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005634:	0800564d 	.word	0x0800564d
 8005638:	08005655 	.word	0x08005655
 800563c:	0800565d 	.word	0x0800565d
 8005640:	08005665 	.word	0x08005665
 8005644:	0800566d 	.word	0x0800566d
 8005648:	08005675 	.word	0x08005675
 800564c:	2300      	movs	r3, #0
 800564e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8005652:	e284      	b.n	8005b5e <UART_SetConfig+0x7aa>
 8005654:	2304      	movs	r3, #4
 8005656:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800565a:	e280      	b.n	8005b5e <UART_SetConfig+0x7aa>
 800565c:	2308      	movs	r3, #8
 800565e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8005662:	e27c      	b.n	8005b5e <UART_SetConfig+0x7aa>
 8005664:	2310      	movs	r3, #16
 8005666:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800566a:	e278      	b.n	8005b5e <UART_SetConfig+0x7aa>
 800566c:	2320      	movs	r3, #32
 800566e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8005672:	e274      	b.n	8005b5e <UART_SetConfig+0x7aa>
 8005674:	2340      	movs	r3, #64	; 0x40
 8005676:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800567a:	e270      	b.n	8005b5e <UART_SetConfig+0x7aa>
 800567c:	2380      	movs	r3, #128	; 0x80
 800567e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8005682:	e26c      	b.n	8005b5e <UART_SetConfig+0x7aa>
 8005684:	687b      	ldr	r3, [r7, #4]
 8005686:	681b      	ldr	r3, [r3, #0]
 8005688:	4a1d      	ldr	r2, [pc, #116]	; (8005700 <UART_SetConfig+0x34c>)
 800568a:	4293      	cmp	r3, r2
 800568c:	d142      	bne.n	8005714 <UART_SetConfig+0x360>
 800568e:	4b18      	ldr	r3, [pc, #96]	; (80056f0 <UART_SetConfig+0x33c>)
 8005690:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005692:	f003 0307 	and.w	r3, r3, #7
 8005696:	2b05      	cmp	r3, #5
 8005698:	d838      	bhi.n	800570c <UART_SetConfig+0x358>
 800569a:	a201      	add	r2, pc, #4	; (adr r2, 80056a0 <UART_SetConfig+0x2ec>)
 800569c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80056a0:	080056b9 	.word	0x080056b9
 80056a4:	080056c1 	.word	0x080056c1
 80056a8:	080056c9 	.word	0x080056c9
 80056ac:	080056d1 	.word	0x080056d1
 80056b0:	080056d9 	.word	0x080056d9
 80056b4:	08005705 	.word	0x08005705
 80056b8:	2300      	movs	r3, #0
 80056ba:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80056be:	e24e      	b.n	8005b5e <UART_SetConfig+0x7aa>
 80056c0:	2304      	movs	r3, #4
 80056c2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80056c6:	e24a      	b.n	8005b5e <UART_SetConfig+0x7aa>
 80056c8:	2308      	movs	r3, #8
 80056ca:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80056ce:	e246      	b.n	8005b5e <UART_SetConfig+0x7aa>
 80056d0:	2310      	movs	r3, #16
 80056d2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80056d6:	e242      	b.n	8005b5e <UART_SetConfig+0x7aa>
 80056d8:	2320      	movs	r3, #32
 80056da:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80056de:	e23e      	b.n	8005b5e <UART_SetConfig+0x7aa>
 80056e0:	cfff69f3 	.word	0xcfff69f3
 80056e4:	58000c00 	.word	0x58000c00
 80056e8:	11fff4ff 	.word	0x11fff4ff
 80056ec:	40011000 	.word	0x40011000
 80056f0:	58024400 	.word	0x58024400
 80056f4:	40004400 	.word	0x40004400
 80056f8:	40004800 	.word	0x40004800
 80056fc:	40004c00 	.word	0x40004c00
 8005700:	40005000 	.word	0x40005000
 8005704:	2340      	movs	r3, #64	; 0x40
 8005706:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800570a:	e228      	b.n	8005b5e <UART_SetConfig+0x7aa>
 800570c:	2380      	movs	r3, #128	; 0x80
 800570e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8005712:	e224      	b.n	8005b5e <UART_SetConfig+0x7aa>
 8005714:	687b      	ldr	r3, [r7, #4]
 8005716:	681b      	ldr	r3, [r3, #0]
 8005718:	4ab1      	ldr	r2, [pc, #708]	; (80059e0 <UART_SetConfig+0x62c>)
 800571a:	4293      	cmp	r3, r2
 800571c:	d176      	bne.n	800580c <UART_SetConfig+0x458>
 800571e:	4bb1      	ldr	r3, [pc, #708]	; (80059e4 <UART_SetConfig+0x630>)
 8005720:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005722:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8005726:	2b28      	cmp	r3, #40	; 0x28
 8005728:	d86c      	bhi.n	8005804 <UART_SetConfig+0x450>
 800572a:	a201      	add	r2, pc, #4	; (adr r2, 8005730 <UART_SetConfig+0x37c>)
 800572c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005730:	080057d5 	.word	0x080057d5
 8005734:	08005805 	.word	0x08005805
 8005738:	08005805 	.word	0x08005805
 800573c:	08005805 	.word	0x08005805
 8005740:	08005805 	.word	0x08005805
 8005744:	08005805 	.word	0x08005805
 8005748:	08005805 	.word	0x08005805
 800574c:	08005805 	.word	0x08005805
 8005750:	080057dd 	.word	0x080057dd
 8005754:	08005805 	.word	0x08005805
 8005758:	08005805 	.word	0x08005805
 800575c:	08005805 	.word	0x08005805
 8005760:	08005805 	.word	0x08005805
 8005764:	08005805 	.word	0x08005805
 8005768:	08005805 	.word	0x08005805
 800576c:	08005805 	.word	0x08005805
 8005770:	080057e5 	.word	0x080057e5
 8005774:	08005805 	.word	0x08005805
 8005778:	08005805 	.word	0x08005805
 800577c:	08005805 	.word	0x08005805
 8005780:	08005805 	.word	0x08005805
 8005784:	08005805 	.word	0x08005805
 8005788:	08005805 	.word	0x08005805
 800578c:	08005805 	.word	0x08005805
 8005790:	080057ed 	.word	0x080057ed
 8005794:	08005805 	.word	0x08005805
 8005798:	08005805 	.word	0x08005805
 800579c:	08005805 	.word	0x08005805
 80057a0:	08005805 	.word	0x08005805
 80057a4:	08005805 	.word	0x08005805
 80057a8:	08005805 	.word	0x08005805
 80057ac:	08005805 	.word	0x08005805
 80057b0:	080057f5 	.word	0x080057f5
 80057b4:	08005805 	.word	0x08005805
 80057b8:	08005805 	.word	0x08005805
 80057bc:	08005805 	.word	0x08005805
 80057c0:	08005805 	.word	0x08005805
 80057c4:	08005805 	.word	0x08005805
 80057c8:	08005805 	.word	0x08005805
 80057cc:	08005805 	.word	0x08005805
 80057d0:	080057fd 	.word	0x080057fd
 80057d4:	2301      	movs	r3, #1
 80057d6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80057da:	e1c0      	b.n	8005b5e <UART_SetConfig+0x7aa>
 80057dc:	2304      	movs	r3, #4
 80057de:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80057e2:	e1bc      	b.n	8005b5e <UART_SetConfig+0x7aa>
 80057e4:	2308      	movs	r3, #8
 80057e6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80057ea:	e1b8      	b.n	8005b5e <UART_SetConfig+0x7aa>
 80057ec:	2310      	movs	r3, #16
 80057ee:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80057f2:	e1b4      	b.n	8005b5e <UART_SetConfig+0x7aa>
 80057f4:	2320      	movs	r3, #32
 80057f6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80057fa:	e1b0      	b.n	8005b5e <UART_SetConfig+0x7aa>
 80057fc:	2340      	movs	r3, #64	; 0x40
 80057fe:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8005802:	e1ac      	b.n	8005b5e <UART_SetConfig+0x7aa>
 8005804:	2380      	movs	r3, #128	; 0x80
 8005806:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800580a:	e1a8      	b.n	8005b5e <UART_SetConfig+0x7aa>
 800580c:	687b      	ldr	r3, [r7, #4]
 800580e:	681b      	ldr	r3, [r3, #0]
 8005810:	4a75      	ldr	r2, [pc, #468]	; (80059e8 <UART_SetConfig+0x634>)
 8005812:	4293      	cmp	r3, r2
 8005814:	d130      	bne.n	8005878 <UART_SetConfig+0x4c4>
 8005816:	4b73      	ldr	r3, [pc, #460]	; (80059e4 <UART_SetConfig+0x630>)
 8005818:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800581a:	f003 0307 	and.w	r3, r3, #7
 800581e:	2b05      	cmp	r3, #5
 8005820:	d826      	bhi.n	8005870 <UART_SetConfig+0x4bc>
 8005822:	a201      	add	r2, pc, #4	; (adr r2, 8005828 <UART_SetConfig+0x474>)
 8005824:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005828:	08005841 	.word	0x08005841
 800582c:	08005849 	.word	0x08005849
 8005830:	08005851 	.word	0x08005851
 8005834:	08005859 	.word	0x08005859
 8005838:	08005861 	.word	0x08005861
 800583c:	08005869 	.word	0x08005869
 8005840:	2300      	movs	r3, #0
 8005842:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8005846:	e18a      	b.n	8005b5e <UART_SetConfig+0x7aa>
 8005848:	2304      	movs	r3, #4
 800584a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800584e:	e186      	b.n	8005b5e <UART_SetConfig+0x7aa>
 8005850:	2308      	movs	r3, #8
 8005852:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8005856:	e182      	b.n	8005b5e <UART_SetConfig+0x7aa>
 8005858:	2310      	movs	r3, #16
 800585a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800585e:	e17e      	b.n	8005b5e <UART_SetConfig+0x7aa>
 8005860:	2320      	movs	r3, #32
 8005862:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8005866:	e17a      	b.n	8005b5e <UART_SetConfig+0x7aa>
 8005868:	2340      	movs	r3, #64	; 0x40
 800586a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800586e:	e176      	b.n	8005b5e <UART_SetConfig+0x7aa>
 8005870:	2380      	movs	r3, #128	; 0x80
 8005872:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8005876:	e172      	b.n	8005b5e <UART_SetConfig+0x7aa>
 8005878:	687b      	ldr	r3, [r7, #4]
 800587a:	681b      	ldr	r3, [r3, #0]
 800587c:	4a5b      	ldr	r2, [pc, #364]	; (80059ec <UART_SetConfig+0x638>)
 800587e:	4293      	cmp	r3, r2
 8005880:	d130      	bne.n	80058e4 <UART_SetConfig+0x530>
 8005882:	4b58      	ldr	r3, [pc, #352]	; (80059e4 <UART_SetConfig+0x630>)
 8005884:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005886:	f003 0307 	and.w	r3, r3, #7
 800588a:	2b05      	cmp	r3, #5
 800588c:	d826      	bhi.n	80058dc <UART_SetConfig+0x528>
 800588e:	a201      	add	r2, pc, #4	; (adr r2, 8005894 <UART_SetConfig+0x4e0>)
 8005890:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005894:	080058ad 	.word	0x080058ad
 8005898:	080058b5 	.word	0x080058b5
 800589c:	080058bd 	.word	0x080058bd
 80058a0:	080058c5 	.word	0x080058c5
 80058a4:	080058cd 	.word	0x080058cd
 80058a8:	080058d5 	.word	0x080058d5
 80058ac:	2300      	movs	r3, #0
 80058ae:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80058b2:	e154      	b.n	8005b5e <UART_SetConfig+0x7aa>
 80058b4:	2304      	movs	r3, #4
 80058b6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80058ba:	e150      	b.n	8005b5e <UART_SetConfig+0x7aa>
 80058bc:	2308      	movs	r3, #8
 80058be:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80058c2:	e14c      	b.n	8005b5e <UART_SetConfig+0x7aa>
 80058c4:	2310      	movs	r3, #16
 80058c6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80058ca:	e148      	b.n	8005b5e <UART_SetConfig+0x7aa>
 80058cc:	2320      	movs	r3, #32
 80058ce:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80058d2:	e144      	b.n	8005b5e <UART_SetConfig+0x7aa>
 80058d4:	2340      	movs	r3, #64	; 0x40
 80058d6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80058da:	e140      	b.n	8005b5e <UART_SetConfig+0x7aa>
 80058dc:	2380      	movs	r3, #128	; 0x80
 80058de:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80058e2:	e13c      	b.n	8005b5e <UART_SetConfig+0x7aa>
 80058e4:	687b      	ldr	r3, [r7, #4]
 80058e6:	681b      	ldr	r3, [r3, #0]
 80058e8:	4a41      	ldr	r2, [pc, #260]	; (80059f0 <UART_SetConfig+0x63c>)
 80058ea:	4293      	cmp	r3, r2
 80058ec:	f040 8082 	bne.w	80059f4 <UART_SetConfig+0x640>
 80058f0:	4b3c      	ldr	r3, [pc, #240]	; (80059e4 <UART_SetConfig+0x630>)
 80058f2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80058f4:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80058f8:	2b28      	cmp	r3, #40	; 0x28
 80058fa:	d86d      	bhi.n	80059d8 <UART_SetConfig+0x624>
 80058fc:	a201      	add	r2, pc, #4	; (adr r2, 8005904 <UART_SetConfig+0x550>)
 80058fe:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005902:	bf00      	nop
 8005904:	080059a9 	.word	0x080059a9
 8005908:	080059d9 	.word	0x080059d9
 800590c:	080059d9 	.word	0x080059d9
 8005910:	080059d9 	.word	0x080059d9
 8005914:	080059d9 	.word	0x080059d9
 8005918:	080059d9 	.word	0x080059d9
 800591c:	080059d9 	.word	0x080059d9
 8005920:	080059d9 	.word	0x080059d9
 8005924:	080059b1 	.word	0x080059b1
 8005928:	080059d9 	.word	0x080059d9
 800592c:	080059d9 	.word	0x080059d9
 8005930:	080059d9 	.word	0x080059d9
 8005934:	080059d9 	.word	0x080059d9
 8005938:	080059d9 	.word	0x080059d9
 800593c:	080059d9 	.word	0x080059d9
 8005940:	080059d9 	.word	0x080059d9
 8005944:	080059b9 	.word	0x080059b9
 8005948:	080059d9 	.word	0x080059d9
 800594c:	080059d9 	.word	0x080059d9
 8005950:	080059d9 	.word	0x080059d9
 8005954:	080059d9 	.word	0x080059d9
 8005958:	080059d9 	.word	0x080059d9
 800595c:	080059d9 	.word	0x080059d9
 8005960:	080059d9 	.word	0x080059d9
 8005964:	080059c1 	.word	0x080059c1
 8005968:	080059d9 	.word	0x080059d9
 800596c:	080059d9 	.word	0x080059d9
 8005970:	080059d9 	.word	0x080059d9
 8005974:	080059d9 	.word	0x080059d9
 8005978:	080059d9 	.word	0x080059d9
 800597c:	080059d9 	.word	0x080059d9
 8005980:	080059d9 	.word	0x080059d9
 8005984:	080059c9 	.word	0x080059c9
 8005988:	080059d9 	.word	0x080059d9
 800598c:	080059d9 	.word	0x080059d9
 8005990:	080059d9 	.word	0x080059d9
 8005994:	080059d9 	.word	0x080059d9
 8005998:	080059d9 	.word	0x080059d9
 800599c:	080059d9 	.word	0x080059d9
 80059a0:	080059d9 	.word	0x080059d9
 80059a4:	080059d1 	.word	0x080059d1
 80059a8:	2301      	movs	r3, #1
 80059aa:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80059ae:	e0d6      	b.n	8005b5e <UART_SetConfig+0x7aa>
 80059b0:	2304      	movs	r3, #4
 80059b2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80059b6:	e0d2      	b.n	8005b5e <UART_SetConfig+0x7aa>
 80059b8:	2308      	movs	r3, #8
 80059ba:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80059be:	e0ce      	b.n	8005b5e <UART_SetConfig+0x7aa>
 80059c0:	2310      	movs	r3, #16
 80059c2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80059c6:	e0ca      	b.n	8005b5e <UART_SetConfig+0x7aa>
 80059c8:	2320      	movs	r3, #32
 80059ca:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80059ce:	e0c6      	b.n	8005b5e <UART_SetConfig+0x7aa>
 80059d0:	2340      	movs	r3, #64	; 0x40
 80059d2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80059d6:	e0c2      	b.n	8005b5e <UART_SetConfig+0x7aa>
 80059d8:	2380      	movs	r3, #128	; 0x80
 80059da:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80059de:	e0be      	b.n	8005b5e <UART_SetConfig+0x7aa>
 80059e0:	40011400 	.word	0x40011400
 80059e4:	58024400 	.word	0x58024400
 80059e8:	40007800 	.word	0x40007800
 80059ec:	40007c00 	.word	0x40007c00
 80059f0:	40011800 	.word	0x40011800
 80059f4:	687b      	ldr	r3, [r7, #4]
 80059f6:	681b      	ldr	r3, [r3, #0]
 80059f8:	4aad      	ldr	r2, [pc, #692]	; (8005cb0 <UART_SetConfig+0x8fc>)
 80059fa:	4293      	cmp	r3, r2
 80059fc:	d176      	bne.n	8005aec <UART_SetConfig+0x738>
 80059fe:	4bad      	ldr	r3, [pc, #692]	; (8005cb4 <UART_SetConfig+0x900>)
 8005a00:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005a02:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8005a06:	2b28      	cmp	r3, #40	; 0x28
 8005a08:	d86c      	bhi.n	8005ae4 <UART_SetConfig+0x730>
 8005a0a:	a201      	add	r2, pc, #4	; (adr r2, 8005a10 <UART_SetConfig+0x65c>)
 8005a0c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005a10:	08005ab5 	.word	0x08005ab5
 8005a14:	08005ae5 	.word	0x08005ae5
 8005a18:	08005ae5 	.word	0x08005ae5
 8005a1c:	08005ae5 	.word	0x08005ae5
 8005a20:	08005ae5 	.word	0x08005ae5
 8005a24:	08005ae5 	.word	0x08005ae5
 8005a28:	08005ae5 	.word	0x08005ae5
 8005a2c:	08005ae5 	.word	0x08005ae5
 8005a30:	08005abd 	.word	0x08005abd
 8005a34:	08005ae5 	.word	0x08005ae5
 8005a38:	08005ae5 	.word	0x08005ae5
 8005a3c:	08005ae5 	.word	0x08005ae5
 8005a40:	08005ae5 	.word	0x08005ae5
 8005a44:	08005ae5 	.word	0x08005ae5
 8005a48:	08005ae5 	.word	0x08005ae5
 8005a4c:	08005ae5 	.word	0x08005ae5
 8005a50:	08005ac5 	.word	0x08005ac5
 8005a54:	08005ae5 	.word	0x08005ae5
 8005a58:	08005ae5 	.word	0x08005ae5
 8005a5c:	08005ae5 	.word	0x08005ae5
 8005a60:	08005ae5 	.word	0x08005ae5
 8005a64:	08005ae5 	.word	0x08005ae5
 8005a68:	08005ae5 	.word	0x08005ae5
 8005a6c:	08005ae5 	.word	0x08005ae5
 8005a70:	08005acd 	.word	0x08005acd
 8005a74:	08005ae5 	.word	0x08005ae5
 8005a78:	08005ae5 	.word	0x08005ae5
 8005a7c:	08005ae5 	.word	0x08005ae5
 8005a80:	08005ae5 	.word	0x08005ae5
 8005a84:	08005ae5 	.word	0x08005ae5
 8005a88:	08005ae5 	.word	0x08005ae5
 8005a8c:	08005ae5 	.word	0x08005ae5
 8005a90:	08005ad5 	.word	0x08005ad5
 8005a94:	08005ae5 	.word	0x08005ae5
 8005a98:	08005ae5 	.word	0x08005ae5
 8005a9c:	08005ae5 	.word	0x08005ae5
 8005aa0:	08005ae5 	.word	0x08005ae5
 8005aa4:	08005ae5 	.word	0x08005ae5
 8005aa8:	08005ae5 	.word	0x08005ae5
 8005aac:	08005ae5 	.word	0x08005ae5
 8005ab0:	08005add 	.word	0x08005add
 8005ab4:	2301      	movs	r3, #1
 8005ab6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8005aba:	e050      	b.n	8005b5e <UART_SetConfig+0x7aa>
 8005abc:	2304      	movs	r3, #4
 8005abe:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8005ac2:	e04c      	b.n	8005b5e <UART_SetConfig+0x7aa>
 8005ac4:	2308      	movs	r3, #8
 8005ac6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8005aca:	e048      	b.n	8005b5e <UART_SetConfig+0x7aa>
 8005acc:	2310      	movs	r3, #16
 8005ace:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8005ad2:	e044      	b.n	8005b5e <UART_SetConfig+0x7aa>
 8005ad4:	2320      	movs	r3, #32
 8005ad6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8005ada:	e040      	b.n	8005b5e <UART_SetConfig+0x7aa>
 8005adc:	2340      	movs	r3, #64	; 0x40
 8005ade:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8005ae2:	e03c      	b.n	8005b5e <UART_SetConfig+0x7aa>
 8005ae4:	2380      	movs	r3, #128	; 0x80
 8005ae6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8005aea:	e038      	b.n	8005b5e <UART_SetConfig+0x7aa>
 8005aec:	687b      	ldr	r3, [r7, #4]
 8005aee:	681b      	ldr	r3, [r3, #0]
 8005af0:	4a71      	ldr	r2, [pc, #452]	; (8005cb8 <UART_SetConfig+0x904>)
 8005af2:	4293      	cmp	r3, r2
 8005af4:	d130      	bne.n	8005b58 <UART_SetConfig+0x7a4>
 8005af6:	4b6f      	ldr	r3, [pc, #444]	; (8005cb4 <UART_SetConfig+0x900>)
 8005af8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005afa:	f003 0307 	and.w	r3, r3, #7
 8005afe:	2b05      	cmp	r3, #5
 8005b00:	d826      	bhi.n	8005b50 <UART_SetConfig+0x79c>
 8005b02:	a201      	add	r2, pc, #4	; (adr r2, 8005b08 <UART_SetConfig+0x754>)
 8005b04:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005b08:	08005b21 	.word	0x08005b21
 8005b0c:	08005b29 	.word	0x08005b29
 8005b10:	08005b31 	.word	0x08005b31
 8005b14:	08005b39 	.word	0x08005b39
 8005b18:	08005b41 	.word	0x08005b41
 8005b1c:	08005b49 	.word	0x08005b49
 8005b20:	2302      	movs	r3, #2
 8005b22:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8005b26:	e01a      	b.n	8005b5e <UART_SetConfig+0x7aa>
 8005b28:	2304      	movs	r3, #4
 8005b2a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8005b2e:	e016      	b.n	8005b5e <UART_SetConfig+0x7aa>
 8005b30:	2308      	movs	r3, #8
 8005b32:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8005b36:	e012      	b.n	8005b5e <UART_SetConfig+0x7aa>
 8005b38:	2310      	movs	r3, #16
 8005b3a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8005b3e:	e00e      	b.n	8005b5e <UART_SetConfig+0x7aa>
 8005b40:	2320      	movs	r3, #32
 8005b42:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8005b46:	e00a      	b.n	8005b5e <UART_SetConfig+0x7aa>
 8005b48:	2340      	movs	r3, #64	; 0x40
 8005b4a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8005b4e:	e006      	b.n	8005b5e <UART_SetConfig+0x7aa>
 8005b50:	2380      	movs	r3, #128	; 0x80
 8005b52:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8005b56:	e002      	b.n	8005b5e <UART_SetConfig+0x7aa>
 8005b58:	2380      	movs	r3, #128	; 0x80
 8005b5a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8005b5e:	687b      	ldr	r3, [r7, #4]
 8005b60:	681b      	ldr	r3, [r3, #0]
 8005b62:	4a55      	ldr	r2, [pc, #340]	; (8005cb8 <UART_SetConfig+0x904>)
 8005b64:	4293      	cmp	r3, r2
 8005b66:	f040 80f0 	bne.w	8005d4a <UART_SetConfig+0x996>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8005b6a:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8005b6e:	2b20      	cmp	r3, #32
 8005b70:	dc46      	bgt.n	8005c00 <UART_SetConfig+0x84c>
 8005b72:	2b02      	cmp	r3, #2
 8005b74:	db75      	blt.n	8005c62 <UART_SetConfig+0x8ae>
 8005b76:	3b02      	subs	r3, #2
 8005b78:	2b1e      	cmp	r3, #30
 8005b7a:	d872      	bhi.n	8005c62 <UART_SetConfig+0x8ae>
 8005b7c:	a201      	add	r2, pc, #4	; (adr r2, 8005b84 <UART_SetConfig+0x7d0>)
 8005b7e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005b82:	bf00      	nop
 8005b84:	08005c07 	.word	0x08005c07
 8005b88:	08005c63 	.word	0x08005c63
 8005b8c:	08005c0f 	.word	0x08005c0f
 8005b90:	08005c63 	.word	0x08005c63
 8005b94:	08005c63 	.word	0x08005c63
 8005b98:	08005c63 	.word	0x08005c63
 8005b9c:	08005c1f 	.word	0x08005c1f
 8005ba0:	08005c63 	.word	0x08005c63
 8005ba4:	08005c63 	.word	0x08005c63
 8005ba8:	08005c63 	.word	0x08005c63
 8005bac:	08005c63 	.word	0x08005c63
 8005bb0:	08005c63 	.word	0x08005c63
 8005bb4:	08005c63 	.word	0x08005c63
 8005bb8:	08005c63 	.word	0x08005c63
 8005bbc:	08005c2f 	.word	0x08005c2f
 8005bc0:	08005c63 	.word	0x08005c63
 8005bc4:	08005c63 	.word	0x08005c63
 8005bc8:	08005c63 	.word	0x08005c63
 8005bcc:	08005c63 	.word	0x08005c63
 8005bd0:	08005c63 	.word	0x08005c63
 8005bd4:	08005c63 	.word	0x08005c63
 8005bd8:	08005c63 	.word	0x08005c63
 8005bdc:	08005c63 	.word	0x08005c63
 8005be0:	08005c63 	.word	0x08005c63
 8005be4:	08005c63 	.word	0x08005c63
 8005be8:	08005c63 	.word	0x08005c63
 8005bec:	08005c63 	.word	0x08005c63
 8005bf0:	08005c63 	.word	0x08005c63
 8005bf4:	08005c63 	.word	0x08005c63
 8005bf8:	08005c63 	.word	0x08005c63
 8005bfc:	08005c55 	.word	0x08005c55
 8005c00:	2b40      	cmp	r3, #64	; 0x40
 8005c02:	d02a      	beq.n	8005c5a <UART_SetConfig+0x8a6>
 8005c04:	e02d      	b.n	8005c62 <UART_SetConfig+0x8ae>
    {
      case UART_CLOCKSOURCE_D3PCLK1:
        pclk = HAL_RCCEx_GetD3PCLK1Freq();
 8005c06:	f7fe fba3 	bl	8004350 <HAL_RCCEx_GetD3PCLK1Freq>
 8005c0a:	62f8      	str	r0, [r7, #44]	; 0x2c
        break;
 8005c0c:	e02f      	b.n	8005c6e <UART_SetConfig+0x8ba>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8005c0e:	f107 0314 	add.w	r3, r7, #20
 8005c12:	4618      	mov	r0, r3
 8005c14:	f7fe fbb2 	bl	800437c <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 8005c18:	69bb      	ldr	r3, [r7, #24]
 8005c1a:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8005c1c:	e027      	b.n	8005c6e <UART_SetConfig+0x8ba>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8005c1e:	f107 0308 	add.w	r3, r7, #8
 8005c22:	4618      	mov	r0, r3
 8005c24:	f7fe fcfe 	bl	8004624 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 8005c28:	68fb      	ldr	r3, [r7, #12]
 8005c2a:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8005c2c:	e01f      	b.n	8005c6e <UART_SetConfig+0x8ba>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8005c2e:	4b21      	ldr	r3, [pc, #132]	; (8005cb4 <UART_SetConfig+0x900>)
 8005c30:	681b      	ldr	r3, [r3, #0]
 8005c32:	f003 0320 	and.w	r3, r3, #32
 8005c36:	2b00      	cmp	r3, #0
 8005c38:	d009      	beq.n	8005c4e <UART_SetConfig+0x89a>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 8005c3a:	4b1e      	ldr	r3, [pc, #120]	; (8005cb4 <UART_SetConfig+0x900>)
 8005c3c:	681b      	ldr	r3, [r3, #0]
 8005c3e:	08db      	lsrs	r3, r3, #3
 8005c40:	f003 0303 	and.w	r3, r3, #3
 8005c44:	4a1d      	ldr	r2, [pc, #116]	; (8005cbc <UART_SetConfig+0x908>)
 8005c46:	fa22 f303 	lsr.w	r3, r2, r3
 8005c4a:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8005c4c:	e00f      	b.n	8005c6e <UART_SetConfig+0x8ba>
          pclk = (uint32_t) HSI_VALUE;
 8005c4e:	4b1b      	ldr	r3, [pc, #108]	; (8005cbc <UART_SetConfig+0x908>)
 8005c50:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8005c52:	e00c      	b.n	8005c6e <UART_SetConfig+0x8ba>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 8005c54:	4b1a      	ldr	r3, [pc, #104]	; (8005cc0 <UART_SetConfig+0x90c>)
 8005c56:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8005c58:	e009      	b.n	8005c6e <UART_SetConfig+0x8ba>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8005c5a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8005c5e:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8005c60:	e005      	b.n	8005c6e <UART_SetConfig+0x8ba>
      default:
        pclk = 0U;
 8005c62:	2300      	movs	r3, #0
 8005c64:	62fb      	str	r3, [r7, #44]	; 0x2c
        ret = HAL_ERROR;
 8005c66:	2301      	movs	r3, #1
 8005c68:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
        break;
 8005c6c:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8005c6e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005c70:	2b00      	cmp	r3, #0
 8005c72:	f000 81e6 	beq.w	8006042 <UART_SetConfig+0xc8e>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 8005c76:	687b      	ldr	r3, [r7, #4]
 8005c78:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005c7a:	4a12      	ldr	r2, [pc, #72]	; (8005cc4 <UART_SetConfig+0x910>)
 8005c7c:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8005c80:	461a      	mov	r2, r3
 8005c82:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005c84:	fbb3 f3f2 	udiv	r3, r3, r2
 8005c88:	623b      	str	r3, [r7, #32]

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8005c8a:	687b      	ldr	r3, [r7, #4]
 8005c8c:	685a      	ldr	r2, [r3, #4]
 8005c8e:	4613      	mov	r3, r2
 8005c90:	005b      	lsls	r3, r3, #1
 8005c92:	4413      	add	r3, r2
 8005c94:	6a3a      	ldr	r2, [r7, #32]
 8005c96:	429a      	cmp	r2, r3
 8005c98:	d305      	bcc.n	8005ca6 <UART_SetConfig+0x8f2>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 8005c9a:	687b      	ldr	r3, [r7, #4]
 8005c9c:	685b      	ldr	r3, [r3, #4]
 8005c9e:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8005ca0:	6a3a      	ldr	r2, [r7, #32]
 8005ca2:	429a      	cmp	r2, r3
 8005ca4:	d910      	bls.n	8005cc8 <UART_SetConfig+0x914>
      {
        ret = HAL_ERROR;
 8005ca6:	2301      	movs	r3, #1
 8005ca8:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
 8005cac:	e1c9      	b.n	8006042 <UART_SetConfig+0xc8e>
 8005cae:	bf00      	nop
 8005cb0:	40011c00 	.word	0x40011c00
 8005cb4:	58024400 	.word	0x58024400
 8005cb8:	58000c00 	.word	0x58000c00
 8005cbc:	03d09000 	.word	0x03d09000
 8005cc0:	003d0900 	.word	0x003d0900
 8005cc4:	08007c20 	.word	0x08007c20
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8005cc8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005cca:	4618      	mov	r0, r3
 8005ccc:	f04f 0100 	mov.w	r1, #0
 8005cd0:	687b      	ldr	r3, [r7, #4]
 8005cd2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005cd4:	4ac1      	ldr	r2, [pc, #772]	; (8005fdc <UART_SetConfig+0xc28>)
 8005cd6:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8005cda:	b29a      	uxth	r2, r3
 8005cdc:	f04f 0300 	mov.w	r3, #0
 8005ce0:	f7fa fb66 	bl	80003b0 <__aeabi_uldivmod>
 8005ce4:	4602      	mov	r2, r0
 8005ce6:	460b      	mov	r3, r1
 8005ce8:	4610      	mov	r0, r2
 8005cea:	4619      	mov	r1, r3
 8005cec:	f04f 0200 	mov.w	r2, #0
 8005cf0:	f04f 0300 	mov.w	r3, #0
 8005cf4:	020b      	lsls	r3, r1, #8
 8005cf6:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 8005cfa:	0202      	lsls	r2, r0, #8
 8005cfc:	6879      	ldr	r1, [r7, #4]
 8005cfe:	6849      	ldr	r1, [r1, #4]
 8005d00:	0849      	lsrs	r1, r1, #1
 8005d02:	4608      	mov	r0, r1
 8005d04:	f04f 0100 	mov.w	r1, #0
 8005d08:	1814      	adds	r4, r2, r0
 8005d0a:	eb43 0501 	adc.w	r5, r3, r1
 8005d0e:	687b      	ldr	r3, [r7, #4]
 8005d10:	685b      	ldr	r3, [r3, #4]
 8005d12:	461a      	mov	r2, r3
 8005d14:	f04f 0300 	mov.w	r3, #0
 8005d18:	4620      	mov	r0, r4
 8005d1a:	4629      	mov	r1, r5
 8005d1c:	f7fa fb48 	bl	80003b0 <__aeabi_uldivmod>
 8005d20:	4602      	mov	r2, r0
 8005d22:	460b      	mov	r3, r1
 8005d24:	4613      	mov	r3, r2
 8005d26:	62bb      	str	r3, [r7, #40]	; 0x28
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8005d28:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005d2a:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8005d2e:	d308      	bcc.n	8005d42 <UART_SetConfig+0x98e>
 8005d30:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005d32:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8005d36:	d204      	bcs.n	8005d42 <UART_SetConfig+0x98e>
        {
          huart->Instance->BRR = usartdiv;
 8005d38:	687b      	ldr	r3, [r7, #4]
 8005d3a:	681b      	ldr	r3, [r3, #0]
 8005d3c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8005d3e:	60da      	str	r2, [r3, #12]
 8005d40:	e17f      	b.n	8006042 <UART_SetConfig+0xc8e>
        }
        else
        {
          ret = HAL_ERROR;
 8005d42:	2301      	movs	r3, #1
 8005d44:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
 8005d48:	e17b      	b.n	8006042 <UART_SetConfig+0xc8e>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8005d4a:	687b      	ldr	r3, [r7, #4]
 8005d4c:	69db      	ldr	r3, [r3, #28]
 8005d4e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005d52:	f040 80be 	bne.w	8005ed2 <UART_SetConfig+0xb1e>
  {
    switch (clocksource)
 8005d56:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8005d5a:	2b20      	cmp	r3, #32
 8005d5c:	dc48      	bgt.n	8005df0 <UART_SetConfig+0xa3c>
 8005d5e:	2b00      	cmp	r3, #0
 8005d60:	db7b      	blt.n	8005e5a <UART_SetConfig+0xaa6>
 8005d62:	2b20      	cmp	r3, #32
 8005d64:	d879      	bhi.n	8005e5a <UART_SetConfig+0xaa6>
 8005d66:	a201      	add	r2, pc, #4	; (adr r2, 8005d6c <UART_SetConfig+0x9b8>)
 8005d68:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005d6c:	08005df7 	.word	0x08005df7
 8005d70:	08005dff 	.word	0x08005dff
 8005d74:	08005e5b 	.word	0x08005e5b
 8005d78:	08005e5b 	.word	0x08005e5b
 8005d7c:	08005e07 	.word	0x08005e07
 8005d80:	08005e5b 	.word	0x08005e5b
 8005d84:	08005e5b 	.word	0x08005e5b
 8005d88:	08005e5b 	.word	0x08005e5b
 8005d8c:	08005e17 	.word	0x08005e17
 8005d90:	08005e5b 	.word	0x08005e5b
 8005d94:	08005e5b 	.word	0x08005e5b
 8005d98:	08005e5b 	.word	0x08005e5b
 8005d9c:	08005e5b 	.word	0x08005e5b
 8005da0:	08005e5b 	.word	0x08005e5b
 8005da4:	08005e5b 	.word	0x08005e5b
 8005da8:	08005e5b 	.word	0x08005e5b
 8005dac:	08005e27 	.word	0x08005e27
 8005db0:	08005e5b 	.word	0x08005e5b
 8005db4:	08005e5b 	.word	0x08005e5b
 8005db8:	08005e5b 	.word	0x08005e5b
 8005dbc:	08005e5b 	.word	0x08005e5b
 8005dc0:	08005e5b 	.word	0x08005e5b
 8005dc4:	08005e5b 	.word	0x08005e5b
 8005dc8:	08005e5b 	.word	0x08005e5b
 8005dcc:	08005e5b 	.word	0x08005e5b
 8005dd0:	08005e5b 	.word	0x08005e5b
 8005dd4:	08005e5b 	.word	0x08005e5b
 8005dd8:	08005e5b 	.word	0x08005e5b
 8005ddc:	08005e5b 	.word	0x08005e5b
 8005de0:	08005e5b 	.word	0x08005e5b
 8005de4:	08005e5b 	.word	0x08005e5b
 8005de8:	08005e5b 	.word	0x08005e5b
 8005dec:	08005e4d 	.word	0x08005e4d
 8005df0:	2b40      	cmp	r3, #64	; 0x40
 8005df2:	d02e      	beq.n	8005e52 <UART_SetConfig+0xa9e>
 8005df4:	e031      	b.n	8005e5a <UART_SetConfig+0xaa6>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8005df6:	f7fd fb85 	bl	8003504 <HAL_RCC_GetPCLK1Freq>
 8005dfa:	62f8      	str	r0, [r7, #44]	; 0x2c
        break;
 8005dfc:	e033      	b.n	8005e66 <UART_SetConfig+0xab2>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8005dfe:	f7fd fb97 	bl	8003530 <HAL_RCC_GetPCLK2Freq>
 8005e02:	62f8      	str	r0, [r7, #44]	; 0x2c
        break;
 8005e04:	e02f      	b.n	8005e66 <UART_SetConfig+0xab2>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8005e06:	f107 0314 	add.w	r3, r7, #20
 8005e0a:	4618      	mov	r0, r3
 8005e0c:	f7fe fab6 	bl	800437c <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 8005e10:	69bb      	ldr	r3, [r7, #24]
 8005e12:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8005e14:	e027      	b.n	8005e66 <UART_SetConfig+0xab2>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8005e16:	f107 0308 	add.w	r3, r7, #8
 8005e1a:	4618      	mov	r0, r3
 8005e1c:	f7fe fc02 	bl	8004624 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 8005e20:	68fb      	ldr	r3, [r7, #12]
 8005e22:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8005e24:	e01f      	b.n	8005e66 <UART_SetConfig+0xab2>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8005e26:	4b6e      	ldr	r3, [pc, #440]	; (8005fe0 <UART_SetConfig+0xc2c>)
 8005e28:	681b      	ldr	r3, [r3, #0]
 8005e2a:	f003 0320 	and.w	r3, r3, #32
 8005e2e:	2b00      	cmp	r3, #0
 8005e30:	d009      	beq.n	8005e46 <UART_SetConfig+0xa92>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 8005e32:	4b6b      	ldr	r3, [pc, #428]	; (8005fe0 <UART_SetConfig+0xc2c>)
 8005e34:	681b      	ldr	r3, [r3, #0]
 8005e36:	08db      	lsrs	r3, r3, #3
 8005e38:	f003 0303 	and.w	r3, r3, #3
 8005e3c:	4a69      	ldr	r2, [pc, #420]	; (8005fe4 <UART_SetConfig+0xc30>)
 8005e3e:	fa22 f303 	lsr.w	r3, r2, r3
 8005e42:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8005e44:	e00f      	b.n	8005e66 <UART_SetConfig+0xab2>
          pclk = (uint32_t) HSI_VALUE;
 8005e46:	4b67      	ldr	r3, [pc, #412]	; (8005fe4 <UART_SetConfig+0xc30>)
 8005e48:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8005e4a:	e00c      	b.n	8005e66 <UART_SetConfig+0xab2>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 8005e4c:	4b66      	ldr	r3, [pc, #408]	; (8005fe8 <UART_SetConfig+0xc34>)
 8005e4e:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8005e50:	e009      	b.n	8005e66 <UART_SetConfig+0xab2>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8005e52:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8005e56:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8005e58:	e005      	b.n	8005e66 <UART_SetConfig+0xab2>
      default:
        pclk = 0U;
 8005e5a:	2300      	movs	r3, #0
 8005e5c:	62fb      	str	r3, [r7, #44]	; 0x2c
        ret = HAL_ERROR;
 8005e5e:	2301      	movs	r3, #1
 8005e60:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
        break;
 8005e64:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8005e66:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005e68:	2b00      	cmp	r3, #0
 8005e6a:	f000 80ea 	beq.w	8006042 <UART_SetConfig+0xc8e>
    {
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8005e6e:	687b      	ldr	r3, [r7, #4]
 8005e70:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005e72:	4a5a      	ldr	r2, [pc, #360]	; (8005fdc <UART_SetConfig+0xc28>)
 8005e74:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8005e78:	461a      	mov	r2, r3
 8005e7a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005e7c:	fbb3 f3f2 	udiv	r3, r3, r2
 8005e80:	005a      	lsls	r2, r3, #1
 8005e82:	687b      	ldr	r3, [r7, #4]
 8005e84:	685b      	ldr	r3, [r3, #4]
 8005e86:	085b      	lsrs	r3, r3, #1
 8005e88:	441a      	add	r2, r3
 8005e8a:	687b      	ldr	r3, [r7, #4]
 8005e8c:	685b      	ldr	r3, [r3, #4]
 8005e8e:	fbb2 f3f3 	udiv	r3, r2, r3
 8005e92:	b29b      	uxth	r3, r3
 8005e94:	62bb      	str	r3, [r7, #40]	; 0x28
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8005e96:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005e98:	2b0f      	cmp	r3, #15
 8005e9a:	d916      	bls.n	8005eca <UART_SetConfig+0xb16>
 8005e9c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005e9e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005ea2:	d212      	bcs.n	8005eca <UART_SetConfig+0xb16>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8005ea4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005ea6:	b29b      	uxth	r3, r3
 8005ea8:	f023 030f 	bic.w	r3, r3, #15
 8005eac:	84fb      	strh	r3, [r7, #38]	; 0x26
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8005eae:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005eb0:	085b      	lsrs	r3, r3, #1
 8005eb2:	b29b      	uxth	r3, r3
 8005eb4:	f003 0307 	and.w	r3, r3, #7
 8005eb8:	b29a      	uxth	r2, r3
 8005eba:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8005ebc:	4313      	orrs	r3, r2
 8005ebe:	84fb      	strh	r3, [r7, #38]	; 0x26
        huart->Instance->BRR = brrtemp;
 8005ec0:	687b      	ldr	r3, [r7, #4]
 8005ec2:	681b      	ldr	r3, [r3, #0]
 8005ec4:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 8005ec6:	60da      	str	r2, [r3, #12]
 8005ec8:	e0bb      	b.n	8006042 <UART_SetConfig+0xc8e>
      }
      else
      {
        ret = HAL_ERROR;
 8005eca:	2301      	movs	r3, #1
 8005ecc:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
 8005ed0:	e0b7      	b.n	8006042 <UART_SetConfig+0xc8e>
      }
    }
  }
  else
  {
    switch (clocksource)
 8005ed2:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8005ed6:	2b20      	cmp	r3, #32
 8005ed8:	dc4a      	bgt.n	8005f70 <UART_SetConfig+0xbbc>
 8005eda:	2b00      	cmp	r3, #0
 8005edc:	f2c0 8086 	blt.w	8005fec <UART_SetConfig+0xc38>
 8005ee0:	2b20      	cmp	r3, #32
 8005ee2:	f200 8083 	bhi.w	8005fec <UART_SetConfig+0xc38>
 8005ee6:	a201      	add	r2, pc, #4	; (adr r2, 8005eec <UART_SetConfig+0xb38>)
 8005ee8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005eec:	08005f77 	.word	0x08005f77
 8005ef0:	08005f7f 	.word	0x08005f7f
 8005ef4:	08005fed 	.word	0x08005fed
 8005ef8:	08005fed 	.word	0x08005fed
 8005efc:	08005f87 	.word	0x08005f87
 8005f00:	08005fed 	.word	0x08005fed
 8005f04:	08005fed 	.word	0x08005fed
 8005f08:	08005fed 	.word	0x08005fed
 8005f0c:	08005f97 	.word	0x08005f97
 8005f10:	08005fed 	.word	0x08005fed
 8005f14:	08005fed 	.word	0x08005fed
 8005f18:	08005fed 	.word	0x08005fed
 8005f1c:	08005fed 	.word	0x08005fed
 8005f20:	08005fed 	.word	0x08005fed
 8005f24:	08005fed 	.word	0x08005fed
 8005f28:	08005fed 	.word	0x08005fed
 8005f2c:	08005fa7 	.word	0x08005fa7
 8005f30:	08005fed 	.word	0x08005fed
 8005f34:	08005fed 	.word	0x08005fed
 8005f38:	08005fed 	.word	0x08005fed
 8005f3c:	08005fed 	.word	0x08005fed
 8005f40:	08005fed 	.word	0x08005fed
 8005f44:	08005fed 	.word	0x08005fed
 8005f48:	08005fed 	.word	0x08005fed
 8005f4c:	08005fed 	.word	0x08005fed
 8005f50:	08005fed 	.word	0x08005fed
 8005f54:	08005fed 	.word	0x08005fed
 8005f58:	08005fed 	.word	0x08005fed
 8005f5c:	08005fed 	.word	0x08005fed
 8005f60:	08005fed 	.word	0x08005fed
 8005f64:	08005fed 	.word	0x08005fed
 8005f68:	08005fed 	.word	0x08005fed
 8005f6c:	08005fcd 	.word	0x08005fcd
 8005f70:	2b40      	cmp	r3, #64	; 0x40
 8005f72:	d02e      	beq.n	8005fd2 <UART_SetConfig+0xc1e>
 8005f74:	e03a      	b.n	8005fec <UART_SetConfig+0xc38>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8005f76:	f7fd fac5 	bl	8003504 <HAL_RCC_GetPCLK1Freq>
 8005f7a:	62f8      	str	r0, [r7, #44]	; 0x2c
        break;
 8005f7c:	e03c      	b.n	8005ff8 <UART_SetConfig+0xc44>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8005f7e:	f7fd fad7 	bl	8003530 <HAL_RCC_GetPCLK2Freq>
 8005f82:	62f8      	str	r0, [r7, #44]	; 0x2c
        break;
 8005f84:	e038      	b.n	8005ff8 <UART_SetConfig+0xc44>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8005f86:	f107 0314 	add.w	r3, r7, #20
 8005f8a:	4618      	mov	r0, r3
 8005f8c:	f7fe f9f6 	bl	800437c <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 8005f90:	69bb      	ldr	r3, [r7, #24]
 8005f92:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8005f94:	e030      	b.n	8005ff8 <UART_SetConfig+0xc44>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8005f96:	f107 0308 	add.w	r3, r7, #8
 8005f9a:	4618      	mov	r0, r3
 8005f9c:	f7fe fb42 	bl	8004624 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 8005fa0:	68fb      	ldr	r3, [r7, #12]
 8005fa2:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8005fa4:	e028      	b.n	8005ff8 <UART_SetConfig+0xc44>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8005fa6:	4b0e      	ldr	r3, [pc, #56]	; (8005fe0 <UART_SetConfig+0xc2c>)
 8005fa8:	681b      	ldr	r3, [r3, #0]
 8005faa:	f003 0320 	and.w	r3, r3, #32
 8005fae:	2b00      	cmp	r3, #0
 8005fb0:	d009      	beq.n	8005fc6 <UART_SetConfig+0xc12>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 8005fb2:	4b0b      	ldr	r3, [pc, #44]	; (8005fe0 <UART_SetConfig+0xc2c>)
 8005fb4:	681b      	ldr	r3, [r3, #0]
 8005fb6:	08db      	lsrs	r3, r3, #3
 8005fb8:	f003 0303 	and.w	r3, r3, #3
 8005fbc:	4a09      	ldr	r2, [pc, #36]	; (8005fe4 <UART_SetConfig+0xc30>)
 8005fbe:	fa22 f303 	lsr.w	r3, r2, r3
 8005fc2:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8005fc4:	e018      	b.n	8005ff8 <UART_SetConfig+0xc44>
          pclk = (uint32_t) HSI_VALUE;
 8005fc6:	4b07      	ldr	r3, [pc, #28]	; (8005fe4 <UART_SetConfig+0xc30>)
 8005fc8:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8005fca:	e015      	b.n	8005ff8 <UART_SetConfig+0xc44>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 8005fcc:	4b06      	ldr	r3, [pc, #24]	; (8005fe8 <UART_SetConfig+0xc34>)
 8005fce:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8005fd0:	e012      	b.n	8005ff8 <UART_SetConfig+0xc44>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8005fd2:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8005fd6:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8005fd8:	e00e      	b.n	8005ff8 <UART_SetConfig+0xc44>
 8005fda:	bf00      	nop
 8005fdc:	08007c20 	.word	0x08007c20
 8005fe0:	58024400 	.word	0x58024400
 8005fe4:	03d09000 	.word	0x03d09000
 8005fe8:	003d0900 	.word	0x003d0900
      default:
        pclk = 0U;
 8005fec:	2300      	movs	r3, #0
 8005fee:	62fb      	str	r3, [r7, #44]	; 0x2c
        ret = HAL_ERROR;
 8005ff0:	2301      	movs	r3, #1
 8005ff2:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
        break;
 8005ff6:	bf00      	nop
    }

    if (pclk != 0U)
 8005ff8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005ffa:	2b00      	cmp	r3, #0
 8005ffc:	d021      	beq.n	8006042 <UART_SetConfig+0xc8e>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8005ffe:	687b      	ldr	r3, [r7, #4]
 8006000:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006002:	4a1a      	ldr	r2, [pc, #104]	; (800606c <UART_SetConfig+0xcb8>)
 8006004:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8006008:	461a      	mov	r2, r3
 800600a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800600c:	fbb3 f2f2 	udiv	r2, r3, r2
 8006010:	687b      	ldr	r3, [r7, #4]
 8006012:	685b      	ldr	r3, [r3, #4]
 8006014:	085b      	lsrs	r3, r3, #1
 8006016:	441a      	add	r2, r3
 8006018:	687b      	ldr	r3, [r7, #4]
 800601a:	685b      	ldr	r3, [r3, #4]
 800601c:	fbb2 f3f3 	udiv	r3, r2, r3
 8006020:	b29b      	uxth	r3, r3
 8006022:	62bb      	str	r3, [r7, #40]	; 0x28
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8006024:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006026:	2b0f      	cmp	r3, #15
 8006028:	d908      	bls.n	800603c <UART_SetConfig+0xc88>
 800602a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800602c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006030:	d204      	bcs.n	800603c <UART_SetConfig+0xc88>
      {
        huart->Instance->BRR = usartdiv;
 8006032:	687b      	ldr	r3, [r7, #4]
 8006034:	681b      	ldr	r3, [r3, #0]
 8006036:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8006038:	60da      	str	r2, [r3, #12]
 800603a:	e002      	b.n	8006042 <UART_SetConfig+0xc8e>
      }
      else
      {
        ret = HAL_ERROR;
 800603c:	2301      	movs	r3, #1
 800603e:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 8006042:	687b      	ldr	r3, [r7, #4]
 8006044:	2201      	movs	r2, #1
 8006046:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 800604a:	687b      	ldr	r3, [r7, #4]
 800604c:	2201      	movs	r2, #1
 800604e:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8006052:	687b      	ldr	r3, [r7, #4]
 8006054:	2200      	movs	r2, #0
 8006056:	671a      	str	r2, [r3, #112]	; 0x70
  huart->TxISR = NULL;
 8006058:	687b      	ldr	r3, [r7, #4]
 800605a:	2200      	movs	r2, #0
 800605c:	675a      	str	r2, [r3, #116]	; 0x74

  return ret;
 800605e:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
}
 8006062:	4618      	mov	r0, r3
 8006064:	3738      	adds	r7, #56	; 0x38
 8006066:	46bd      	mov	sp, r7
 8006068:	bdb0      	pop	{r4, r5, r7, pc}
 800606a:	bf00      	nop
 800606c:	08007c20 	.word	0x08007c20

08006070 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8006070:	b480      	push	{r7}
 8006072:	b083      	sub	sp, #12
 8006074:	af00      	add	r7, sp, #0
 8006076:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8006078:	687b      	ldr	r3, [r7, #4]
 800607a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800607c:	f003 0301 	and.w	r3, r3, #1
 8006080:	2b00      	cmp	r3, #0
 8006082:	d00a      	beq.n	800609a <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8006084:	687b      	ldr	r3, [r7, #4]
 8006086:	681b      	ldr	r3, [r3, #0]
 8006088:	685b      	ldr	r3, [r3, #4]
 800608a:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 800608e:	687b      	ldr	r3, [r7, #4]
 8006090:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006092:	687b      	ldr	r3, [r7, #4]
 8006094:	681b      	ldr	r3, [r3, #0]
 8006096:	430a      	orrs	r2, r1
 8006098:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800609a:	687b      	ldr	r3, [r7, #4]
 800609c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800609e:	f003 0302 	and.w	r3, r3, #2
 80060a2:	2b00      	cmp	r3, #0
 80060a4:	d00a      	beq.n	80060bc <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 80060a6:	687b      	ldr	r3, [r7, #4]
 80060a8:	681b      	ldr	r3, [r3, #0]
 80060aa:	685b      	ldr	r3, [r3, #4]
 80060ac:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 80060b0:	687b      	ldr	r3, [r7, #4]
 80060b2:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80060b4:	687b      	ldr	r3, [r7, #4]
 80060b6:	681b      	ldr	r3, [r3, #0]
 80060b8:	430a      	orrs	r2, r1
 80060ba:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 80060bc:	687b      	ldr	r3, [r7, #4]
 80060be:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80060c0:	f003 0304 	and.w	r3, r3, #4
 80060c4:	2b00      	cmp	r3, #0
 80060c6:	d00a      	beq.n	80060de <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 80060c8:	687b      	ldr	r3, [r7, #4]
 80060ca:	681b      	ldr	r3, [r3, #0]
 80060cc:	685b      	ldr	r3, [r3, #4]
 80060ce:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 80060d2:	687b      	ldr	r3, [r7, #4]
 80060d4:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80060d6:	687b      	ldr	r3, [r7, #4]
 80060d8:	681b      	ldr	r3, [r3, #0]
 80060da:	430a      	orrs	r2, r1
 80060dc:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 80060de:	687b      	ldr	r3, [r7, #4]
 80060e0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80060e2:	f003 0308 	and.w	r3, r3, #8
 80060e6:	2b00      	cmp	r3, #0
 80060e8:	d00a      	beq.n	8006100 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 80060ea:	687b      	ldr	r3, [r7, #4]
 80060ec:	681b      	ldr	r3, [r3, #0]
 80060ee:	685b      	ldr	r3, [r3, #4]
 80060f0:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 80060f4:	687b      	ldr	r3, [r7, #4]
 80060f6:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80060f8:	687b      	ldr	r3, [r7, #4]
 80060fa:	681b      	ldr	r3, [r3, #0]
 80060fc:	430a      	orrs	r2, r1
 80060fe:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8006100:	687b      	ldr	r3, [r7, #4]
 8006102:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006104:	f003 0310 	and.w	r3, r3, #16
 8006108:	2b00      	cmp	r3, #0
 800610a:	d00a      	beq.n	8006122 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800610c:	687b      	ldr	r3, [r7, #4]
 800610e:	681b      	ldr	r3, [r3, #0]
 8006110:	689b      	ldr	r3, [r3, #8]
 8006112:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8006116:	687b      	ldr	r3, [r7, #4]
 8006118:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800611a:	687b      	ldr	r3, [r7, #4]
 800611c:	681b      	ldr	r3, [r3, #0]
 800611e:	430a      	orrs	r2, r1
 8006120:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8006122:	687b      	ldr	r3, [r7, #4]
 8006124:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006126:	f003 0320 	and.w	r3, r3, #32
 800612a:	2b00      	cmp	r3, #0
 800612c:	d00a      	beq.n	8006144 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800612e:	687b      	ldr	r3, [r7, #4]
 8006130:	681b      	ldr	r3, [r3, #0]
 8006132:	689b      	ldr	r3, [r3, #8]
 8006134:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8006138:	687b      	ldr	r3, [r7, #4]
 800613a:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800613c:	687b      	ldr	r3, [r7, #4]
 800613e:	681b      	ldr	r3, [r3, #0]
 8006140:	430a      	orrs	r2, r1
 8006142:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8006144:	687b      	ldr	r3, [r7, #4]
 8006146:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006148:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800614c:	2b00      	cmp	r3, #0
 800614e:	d01a      	beq.n	8006186 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8006150:	687b      	ldr	r3, [r7, #4]
 8006152:	681b      	ldr	r3, [r3, #0]
 8006154:	685b      	ldr	r3, [r3, #4]
 8006156:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 800615a:	687b      	ldr	r3, [r7, #4]
 800615c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800615e:	687b      	ldr	r3, [r7, #4]
 8006160:	681b      	ldr	r3, [r3, #0]
 8006162:	430a      	orrs	r2, r1
 8006164:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8006166:	687b      	ldr	r3, [r7, #4]
 8006168:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800616a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800616e:	d10a      	bne.n	8006186 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8006170:	687b      	ldr	r3, [r7, #4]
 8006172:	681b      	ldr	r3, [r3, #0]
 8006174:	685b      	ldr	r3, [r3, #4]
 8006176:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 800617a:	687b      	ldr	r3, [r7, #4]
 800617c:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800617e:	687b      	ldr	r3, [r7, #4]
 8006180:	681b      	ldr	r3, [r3, #0]
 8006182:	430a      	orrs	r2, r1
 8006184:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8006186:	687b      	ldr	r3, [r7, #4]
 8006188:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800618a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800618e:	2b00      	cmp	r3, #0
 8006190:	d00a      	beq.n	80061a8 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8006192:	687b      	ldr	r3, [r7, #4]
 8006194:	681b      	ldr	r3, [r3, #0]
 8006196:	685b      	ldr	r3, [r3, #4]
 8006198:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 800619c:	687b      	ldr	r3, [r7, #4]
 800619e:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80061a0:	687b      	ldr	r3, [r7, #4]
 80061a2:	681b      	ldr	r3, [r3, #0]
 80061a4:	430a      	orrs	r2, r1
 80061a6:	605a      	str	r2, [r3, #4]
  }
}
 80061a8:	bf00      	nop
 80061aa:	370c      	adds	r7, #12
 80061ac:	46bd      	mov	sp, r7
 80061ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061b2:	4770      	bx	lr

080061b4 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 80061b4:	b580      	push	{r7, lr}
 80061b6:	b086      	sub	sp, #24
 80061b8:	af02      	add	r7, sp, #8
 80061ba:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80061bc:	687b      	ldr	r3, [r7, #4]
 80061be:	2200      	movs	r2, #0
 80061c0:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 80061c4:	f7fb f8fa 	bl	80013bc <HAL_GetTick>
 80061c8:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 80061ca:	687b      	ldr	r3, [r7, #4]
 80061cc:	681b      	ldr	r3, [r3, #0]
 80061ce:	681b      	ldr	r3, [r3, #0]
 80061d0:	f003 0308 	and.w	r3, r3, #8
 80061d4:	2b08      	cmp	r3, #8
 80061d6:	d10e      	bne.n	80061f6 <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80061d8:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 80061dc:	9300      	str	r3, [sp, #0]
 80061de:	68fb      	ldr	r3, [r7, #12]
 80061e0:	2200      	movs	r2, #0
 80061e2:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 80061e6:	6878      	ldr	r0, [r7, #4]
 80061e8:	f000 f82f 	bl	800624a <UART_WaitOnFlagUntilTimeout>
 80061ec:	4603      	mov	r3, r0
 80061ee:	2b00      	cmp	r3, #0
 80061f0:	d001      	beq.n	80061f6 <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 80061f2:	2303      	movs	r3, #3
 80061f4:	e025      	b.n	8006242 <UART_CheckIdleState+0x8e>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 80061f6:	687b      	ldr	r3, [r7, #4]
 80061f8:	681b      	ldr	r3, [r3, #0]
 80061fa:	681b      	ldr	r3, [r3, #0]
 80061fc:	f003 0304 	and.w	r3, r3, #4
 8006200:	2b04      	cmp	r3, #4
 8006202:	d10e      	bne.n	8006222 <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8006204:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8006208:	9300      	str	r3, [sp, #0]
 800620a:	68fb      	ldr	r3, [r7, #12]
 800620c:	2200      	movs	r2, #0
 800620e:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8006212:	6878      	ldr	r0, [r7, #4]
 8006214:	f000 f819 	bl	800624a <UART_WaitOnFlagUntilTimeout>
 8006218:	4603      	mov	r3, r0
 800621a:	2b00      	cmp	r3, #0
 800621c:	d001      	beq.n	8006222 <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800621e:	2303      	movs	r3, #3
 8006220:	e00f      	b.n	8006242 <UART_CheckIdleState+0x8e>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8006222:	687b      	ldr	r3, [r7, #4]
 8006224:	2220      	movs	r2, #32
 8006226:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  huart->RxState = HAL_UART_STATE_READY;
 800622a:	687b      	ldr	r3, [r7, #4]
 800622c:	2220      	movs	r2, #32
 800622e:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006232:	687b      	ldr	r3, [r7, #4]
 8006234:	2200      	movs	r2, #0
 8006236:	66da      	str	r2, [r3, #108]	; 0x6c

  __HAL_UNLOCK(huart);
 8006238:	687b      	ldr	r3, [r7, #4]
 800623a:	2200      	movs	r2, #0
 800623c:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 8006240:	2300      	movs	r3, #0
}
 8006242:	4618      	mov	r0, r3
 8006244:	3710      	adds	r7, #16
 8006246:	46bd      	mov	sp, r7
 8006248:	bd80      	pop	{r7, pc}

0800624a <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800624a:	b580      	push	{r7, lr}
 800624c:	b084      	sub	sp, #16
 800624e:	af00      	add	r7, sp, #0
 8006250:	60f8      	str	r0, [r7, #12]
 8006252:	60b9      	str	r1, [r7, #8]
 8006254:	603b      	str	r3, [r7, #0]
 8006256:	4613      	mov	r3, r2
 8006258:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800625a:	e062      	b.n	8006322 <UART_WaitOnFlagUntilTimeout+0xd8>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800625c:	69bb      	ldr	r3, [r7, #24]
 800625e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006262:	d05e      	beq.n	8006322 <UART_WaitOnFlagUntilTimeout+0xd8>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8006264:	f7fb f8aa 	bl	80013bc <HAL_GetTick>
 8006268:	4602      	mov	r2, r0
 800626a:	683b      	ldr	r3, [r7, #0]
 800626c:	1ad3      	subs	r3, r2, r3
 800626e:	69ba      	ldr	r2, [r7, #24]
 8006270:	429a      	cmp	r2, r3
 8006272:	d302      	bcc.n	800627a <UART_WaitOnFlagUntilTimeout+0x30>
 8006274:	69bb      	ldr	r3, [r7, #24]
 8006276:	2b00      	cmp	r3, #0
 8006278:	d11d      	bne.n	80062b6 <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
 800627a:	68fb      	ldr	r3, [r7, #12]
 800627c:	681b      	ldr	r3, [r3, #0]
 800627e:	681a      	ldr	r2, [r3, #0]
 8006280:	68fb      	ldr	r3, [r7, #12]
 8006282:	681b      	ldr	r3, [r3, #0]
 8006284:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8006288:	601a      	str	r2, [r3, #0]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800628a:	68fb      	ldr	r3, [r7, #12]
 800628c:	681b      	ldr	r3, [r3, #0]
 800628e:	689a      	ldr	r2, [r3, #8]
 8006290:	68fb      	ldr	r3, [r7, #12]
 8006292:	681b      	ldr	r3, [r3, #0]
 8006294:	f022 0201 	bic.w	r2, r2, #1
 8006298:	609a      	str	r2, [r3, #8]

        huart->gState = HAL_UART_STATE_READY;
 800629a:	68fb      	ldr	r3, [r7, #12]
 800629c:	2220      	movs	r2, #32
 800629e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
        huart->RxState = HAL_UART_STATE_READY;
 80062a2:	68fb      	ldr	r3, [r7, #12]
 80062a4:	2220      	movs	r2, #32
 80062a6:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

        __HAL_UNLOCK(huart);
 80062aa:	68fb      	ldr	r3, [r7, #12]
 80062ac:	2200      	movs	r2, #0
 80062ae:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

        return HAL_TIMEOUT;
 80062b2:	2303      	movs	r3, #3
 80062b4:	e045      	b.n	8006342 <UART_WaitOnFlagUntilTimeout+0xf8>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 80062b6:	68fb      	ldr	r3, [r7, #12]
 80062b8:	681b      	ldr	r3, [r3, #0]
 80062ba:	681b      	ldr	r3, [r3, #0]
 80062bc:	f003 0304 	and.w	r3, r3, #4
 80062c0:	2b00      	cmp	r3, #0
 80062c2:	d02e      	beq.n	8006322 <UART_WaitOnFlagUntilTimeout+0xd8>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 80062c4:	68fb      	ldr	r3, [r7, #12]
 80062c6:	681b      	ldr	r3, [r3, #0]
 80062c8:	69db      	ldr	r3, [r3, #28]
 80062ca:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80062ce:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80062d2:	d126      	bne.n	8006322 <UART_WaitOnFlagUntilTimeout+0xd8>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80062d4:	68fb      	ldr	r3, [r7, #12]
 80062d6:	681b      	ldr	r3, [r3, #0]
 80062d8:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80062dc:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
 80062de:	68fb      	ldr	r3, [r7, #12]
 80062e0:	681b      	ldr	r3, [r3, #0]
 80062e2:	681a      	ldr	r2, [r3, #0]
 80062e4:	68fb      	ldr	r3, [r7, #12]
 80062e6:	681b      	ldr	r3, [r3, #0]
 80062e8:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 80062ec:	601a      	str	r2, [r3, #0]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80062ee:	68fb      	ldr	r3, [r7, #12]
 80062f0:	681b      	ldr	r3, [r3, #0]
 80062f2:	689a      	ldr	r2, [r3, #8]
 80062f4:	68fb      	ldr	r3, [r7, #12]
 80062f6:	681b      	ldr	r3, [r3, #0]
 80062f8:	f022 0201 	bic.w	r2, r2, #1
 80062fc:	609a      	str	r2, [r3, #8]

          huart->gState = HAL_UART_STATE_READY;
 80062fe:	68fb      	ldr	r3, [r7, #12]
 8006300:	2220      	movs	r2, #32
 8006302:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          huart->RxState = HAL_UART_STATE_READY;
 8006306:	68fb      	ldr	r3, [r7, #12]
 8006308:	2220      	movs	r2, #32
 800630a:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800630e:	68fb      	ldr	r3, [r7, #12]
 8006310:	2220      	movs	r2, #32
 8006312:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8006316:	68fb      	ldr	r3, [r7, #12]
 8006318:	2200      	movs	r2, #0
 800631a:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

          return HAL_TIMEOUT;
 800631e:	2303      	movs	r3, #3
 8006320:	e00f      	b.n	8006342 <UART_WaitOnFlagUntilTimeout+0xf8>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8006322:	68fb      	ldr	r3, [r7, #12]
 8006324:	681b      	ldr	r3, [r3, #0]
 8006326:	69da      	ldr	r2, [r3, #28]
 8006328:	68bb      	ldr	r3, [r7, #8]
 800632a:	4013      	ands	r3, r2
 800632c:	68ba      	ldr	r2, [r7, #8]
 800632e:	429a      	cmp	r2, r3
 8006330:	bf0c      	ite	eq
 8006332:	2301      	moveq	r3, #1
 8006334:	2300      	movne	r3, #0
 8006336:	b2db      	uxtb	r3, r3
 8006338:	461a      	mov	r2, r3
 800633a:	79fb      	ldrb	r3, [r7, #7]
 800633c:	429a      	cmp	r2, r3
 800633e:	d08d      	beq.n	800625c <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8006340:	2300      	movs	r3, #0
}
 8006342:	4618      	mov	r0, r3
 8006344:	3710      	adds	r7, #16
 8006346:	46bd      	mov	sp, r7
 8006348:	bd80      	pop	{r7, pc}
	...

0800634c <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800634c:	b480      	push	{r7}
 800634e:	b083      	sub	sp, #12
 8006350:	af00      	add	r7, sp, #0
 8006352:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8006354:	687b      	ldr	r3, [r7, #4]
 8006356:	681b      	ldr	r3, [r3, #0]
 8006358:	681a      	ldr	r2, [r3, #0]
 800635a:	687b      	ldr	r3, [r7, #4]
 800635c:	681b      	ldr	r3, [r3, #0]
 800635e:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 8006362:	601a      	str	r2, [r3, #0]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8006364:	687b      	ldr	r3, [r7, #4]
 8006366:	681b      	ldr	r3, [r3, #0]
 8006368:	6899      	ldr	r1, [r3, #8]
 800636a:	687b      	ldr	r3, [r7, #4]
 800636c:	681a      	ldr	r2, [r3, #0]
 800636e:	4b0f      	ldr	r3, [pc, #60]	; (80063ac <UART_EndRxTransfer+0x60>)
 8006370:	400b      	ands	r3, r1
 8006372:	6093      	str	r3, [r2, #8]

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006374:	687b      	ldr	r3, [r7, #4]
 8006376:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8006378:	2b01      	cmp	r3, #1
 800637a:	d107      	bne.n	800638c <UART_EndRxTransfer+0x40>
  {
    CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800637c:	687b      	ldr	r3, [r7, #4]
 800637e:	681b      	ldr	r3, [r3, #0]
 8006380:	681a      	ldr	r2, [r3, #0]
 8006382:	687b      	ldr	r3, [r7, #4]
 8006384:	681b      	ldr	r3, [r3, #0]
 8006386:	f022 0210 	bic.w	r2, r2, #16
 800638a:	601a      	str	r2, [r3, #0]
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800638c:	687b      	ldr	r3, [r7, #4]
 800638e:	2220      	movs	r2, #32
 8006390:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006394:	687b      	ldr	r3, [r7, #4]
 8006396:	2200      	movs	r2, #0
 8006398:	66da      	str	r2, [r3, #108]	; 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 800639a:	687b      	ldr	r3, [r7, #4]
 800639c:	2200      	movs	r2, #0
 800639e:	671a      	str	r2, [r3, #112]	; 0x70
}
 80063a0:	bf00      	nop
 80063a2:	370c      	adds	r7, #12
 80063a4:	46bd      	mov	sp, r7
 80063a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063aa:	4770      	bx	lr
 80063ac:	effffffe 	.word	0xeffffffe

080063b0 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 80063b0:	b580      	push	{r7, lr}
 80063b2:	b084      	sub	sp, #16
 80063b4:	af00      	add	r7, sp, #0
 80063b6:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 80063b8:	687b      	ldr	r3, [r7, #4]
 80063ba:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80063bc:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 80063be:	68fb      	ldr	r3, [r7, #12]
 80063c0:	2200      	movs	r2, #0
 80063c2:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
  huart->TxXferCount = 0U;
 80063c6:	68fb      	ldr	r3, [r7, #12]
 80063c8:	2200      	movs	r2, #0
 80063ca:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 80063ce:	68f8      	ldr	r0, [r7, #12]
 80063d0:	f7fe ffda 	bl	8005388 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80063d4:	bf00      	nop
 80063d6:	3710      	adds	r7, #16
 80063d8:	46bd      	mov	sp, r7
 80063da:	bd80      	pop	{r7, pc}

080063dc <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 80063dc:	b580      	push	{r7, lr}
 80063de:	b082      	sub	sp, #8
 80063e0:	af00      	add	r7, sp, #0
 80063e2:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 80063e4:	687b      	ldr	r3, [r7, #4]
 80063e6:	681b      	ldr	r3, [r3, #0]
 80063e8:	681a      	ldr	r2, [r3, #0]
 80063ea:	687b      	ldr	r3, [r7, #4]
 80063ec:	681b      	ldr	r3, [r3, #0]
 80063ee:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80063f2:	601a      	str	r2, [r3, #0]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80063f4:	687b      	ldr	r3, [r7, #4]
 80063f6:	2220      	movs	r2, #32
 80063f8:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 80063fc:	687b      	ldr	r3, [r7, #4]
 80063fe:	2200      	movs	r2, #0
 8006400:	675a      	str	r2, [r3, #116]	; 0x74
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8006402:	6878      	ldr	r0, [r7, #4]
 8006404:	f7fe ffb6 	bl	8005374 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8006408:	bf00      	nop
 800640a:	3708      	adds	r7, #8
 800640c:	46bd      	mov	sp, r7
 800640e:	bd80      	pop	{r7, pc}

08006410 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 8006410:	b480      	push	{r7}
 8006412:	b083      	sub	sp, #12
 8006414:	af00      	add	r7, sp, #0
 8006416:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 8006418:	bf00      	nop
 800641a:	370c      	adds	r7, #12
 800641c:	46bd      	mov	sp, r7
 800641e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006422:	4770      	bx	lr

08006424 <HAL_UARTEx_RxFifoFullCallback>:
  * @brief  UART RX Fifo full callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_RxFifoFullCallback(UART_HandleTypeDef *huart)
{
 8006424:	b480      	push	{r7}
 8006426:	b083      	sub	sp, #12
 8006428:	af00      	add	r7, sp, #0
 800642a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxFifoFullCallback can be implemented in the user file.
   */
}
 800642c:	bf00      	nop
 800642e:	370c      	adds	r7, #12
 8006430:	46bd      	mov	sp, r7
 8006432:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006436:	4770      	bx	lr

08006438 <HAL_UARTEx_TxFifoEmptyCallback>:
  * @brief  UART TX Fifo empty callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_TxFifoEmptyCallback(UART_HandleTypeDef *huart)
{
 8006438:	b480      	push	{r7}
 800643a:	b083      	sub	sp, #12
 800643c:	af00      	add	r7, sp, #0
 800643e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_TxFifoEmptyCallback can be implemented in the user file.
   */
}
 8006440:	bf00      	nop
 8006442:	370c      	adds	r7, #12
 8006444:	46bd      	mov	sp, r7
 8006446:	f85d 7b04 	ldr.w	r7, [sp], #4
 800644a:	4770      	bx	lr

0800644c <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 800644c:	b480      	push	{r7}
 800644e:	b085      	sub	sp, #20
 8006450:	af00      	add	r7, sp, #0
 8006452:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 8006454:	687b      	ldr	r3, [r7, #4]
 8006456:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 800645a:	2b01      	cmp	r3, #1
 800645c:	d101      	bne.n	8006462 <HAL_UARTEx_DisableFifoMode+0x16>
 800645e:	2302      	movs	r3, #2
 8006460:	e027      	b.n	80064b2 <HAL_UARTEx_DisableFifoMode+0x66>
 8006462:	687b      	ldr	r3, [r7, #4]
 8006464:	2201      	movs	r2, #1
 8006466:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 800646a:	687b      	ldr	r3, [r7, #4]
 800646c:	2224      	movs	r2, #36	; 0x24
 800646e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8006472:	687b      	ldr	r3, [r7, #4]
 8006474:	681b      	ldr	r3, [r3, #0]
 8006476:	681b      	ldr	r3, [r3, #0]
 8006478:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800647a:	687b      	ldr	r3, [r7, #4]
 800647c:	681b      	ldr	r3, [r3, #0]
 800647e:	681a      	ldr	r2, [r3, #0]
 8006480:	687b      	ldr	r3, [r7, #4]
 8006482:	681b      	ldr	r3, [r3, #0]
 8006484:	f022 0201 	bic.w	r2, r2, #1
 8006488:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 800648a:	68fb      	ldr	r3, [r7, #12]
 800648c:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 8006490:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 8006492:	687b      	ldr	r3, [r7, #4]
 8006494:	2200      	movs	r2, #0
 8006496:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8006498:	687b      	ldr	r3, [r7, #4]
 800649a:	681b      	ldr	r3, [r3, #0]
 800649c:	68fa      	ldr	r2, [r7, #12]
 800649e:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 80064a0:	687b      	ldr	r3, [r7, #4]
 80064a2:	2220      	movs	r2, #32
 80064a4:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80064a8:	687b      	ldr	r3, [r7, #4]
 80064aa:	2200      	movs	r2, #0
 80064ac:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 80064b0:	2300      	movs	r3, #0
}
 80064b2:	4618      	mov	r0, r3
 80064b4:	3714      	adds	r7, #20
 80064b6:	46bd      	mov	sp, r7
 80064b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80064bc:	4770      	bx	lr

080064be <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 80064be:	b580      	push	{r7, lr}
 80064c0:	b084      	sub	sp, #16
 80064c2:	af00      	add	r7, sp, #0
 80064c4:	6078      	str	r0, [r7, #4]
 80064c6:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 80064c8:	687b      	ldr	r3, [r7, #4]
 80064ca:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 80064ce:	2b01      	cmp	r3, #1
 80064d0:	d101      	bne.n	80064d6 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 80064d2:	2302      	movs	r3, #2
 80064d4:	e02d      	b.n	8006532 <HAL_UARTEx_SetTxFifoThreshold+0x74>
 80064d6:	687b      	ldr	r3, [r7, #4]
 80064d8:	2201      	movs	r2, #1
 80064da:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 80064de:	687b      	ldr	r3, [r7, #4]
 80064e0:	2224      	movs	r2, #36	; 0x24
 80064e2:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 80064e6:	687b      	ldr	r3, [r7, #4]
 80064e8:	681b      	ldr	r3, [r3, #0]
 80064ea:	681b      	ldr	r3, [r3, #0]
 80064ec:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 80064ee:	687b      	ldr	r3, [r7, #4]
 80064f0:	681b      	ldr	r3, [r3, #0]
 80064f2:	681a      	ldr	r2, [r3, #0]
 80064f4:	687b      	ldr	r3, [r7, #4]
 80064f6:	681b      	ldr	r3, [r3, #0]
 80064f8:	f022 0201 	bic.w	r2, r2, #1
 80064fc:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 80064fe:	687b      	ldr	r3, [r7, #4]
 8006500:	681b      	ldr	r3, [r3, #0]
 8006502:	689b      	ldr	r3, [r3, #8]
 8006504:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 8006508:	687b      	ldr	r3, [r7, #4]
 800650a:	681b      	ldr	r3, [r3, #0]
 800650c:	683a      	ldr	r2, [r7, #0]
 800650e:	430a      	orrs	r2, r1
 8006510:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8006512:	6878      	ldr	r0, [r7, #4]
 8006514:	f000 f850 	bl	80065b8 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8006518:	687b      	ldr	r3, [r7, #4]
 800651a:	681b      	ldr	r3, [r3, #0]
 800651c:	68fa      	ldr	r2, [r7, #12]
 800651e:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8006520:	687b      	ldr	r3, [r7, #4]
 8006522:	2220      	movs	r2, #32
 8006524:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8006528:	687b      	ldr	r3, [r7, #4]
 800652a:	2200      	movs	r2, #0
 800652c:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 8006530:	2300      	movs	r3, #0
}
 8006532:	4618      	mov	r0, r3
 8006534:	3710      	adds	r7, #16
 8006536:	46bd      	mov	sp, r7
 8006538:	bd80      	pop	{r7, pc}

0800653a <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800653a:	b580      	push	{r7, lr}
 800653c:	b084      	sub	sp, #16
 800653e:	af00      	add	r7, sp, #0
 8006540:	6078      	str	r0, [r7, #4]
 8006542:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8006544:	687b      	ldr	r3, [r7, #4]
 8006546:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 800654a:	2b01      	cmp	r3, #1
 800654c:	d101      	bne.n	8006552 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 800654e:	2302      	movs	r3, #2
 8006550:	e02d      	b.n	80065ae <HAL_UARTEx_SetRxFifoThreshold+0x74>
 8006552:	687b      	ldr	r3, [r7, #4]
 8006554:	2201      	movs	r2, #1
 8006556:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 800655a:	687b      	ldr	r3, [r7, #4]
 800655c:	2224      	movs	r2, #36	; 0x24
 800655e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8006562:	687b      	ldr	r3, [r7, #4]
 8006564:	681b      	ldr	r3, [r3, #0]
 8006566:	681b      	ldr	r3, [r3, #0]
 8006568:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800656a:	687b      	ldr	r3, [r7, #4]
 800656c:	681b      	ldr	r3, [r3, #0]
 800656e:	681a      	ldr	r2, [r3, #0]
 8006570:	687b      	ldr	r3, [r7, #4]
 8006572:	681b      	ldr	r3, [r3, #0]
 8006574:	f022 0201 	bic.w	r2, r2, #1
 8006578:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 800657a:	687b      	ldr	r3, [r7, #4]
 800657c:	681b      	ldr	r3, [r3, #0]
 800657e:	689b      	ldr	r3, [r3, #8]
 8006580:	f023 6160 	bic.w	r1, r3, #234881024	; 0xe000000
 8006584:	687b      	ldr	r3, [r7, #4]
 8006586:	681b      	ldr	r3, [r3, #0]
 8006588:	683a      	ldr	r2, [r7, #0]
 800658a:	430a      	orrs	r2, r1
 800658c:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800658e:	6878      	ldr	r0, [r7, #4]
 8006590:	f000 f812 	bl	80065b8 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8006594:	687b      	ldr	r3, [r7, #4]
 8006596:	681b      	ldr	r3, [r3, #0]
 8006598:	68fa      	ldr	r2, [r7, #12]
 800659a:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800659c:	687b      	ldr	r3, [r7, #4]
 800659e:	2220      	movs	r2, #32
 80065a0:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80065a4:	687b      	ldr	r3, [r7, #4]
 80065a6:	2200      	movs	r2, #0
 80065a8:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 80065ac:	2300      	movs	r3, #0
}
 80065ae:	4618      	mov	r0, r3
 80065b0:	3710      	adds	r7, #16
 80065b2:	46bd      	mov	sp, r7
 80065b4:	bd80      	pop	{r7, pc}
	...

080065b8 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 80065b8:	b480      	push	{r7}
 80065ba:	b085      	sub	sp, #20
 80065bc:	af00      	add	r7, sp, #0
 80065be:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 80065c0:	687b      	ldr	r3, [r7, #4]
 80065c2:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80065c4:	2b00      	cmp	r3, #0
 80065c6:	d108      	bne.n	80065da <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 80065c8:	687b      	ldr	r3, [r7, #4]
 80065ca:	2201      	movs	r2, #1
 80065cc:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
 80065d0:	687b      	ldr	r3, [r7, #4]
 80065d2:	2201      	movs	r2, #1
 80065d4:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 80065d8:	e031      	b.n	800663e <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 80065da:	2310      	movs	r3, #16
 80065dc:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 80065de:	2310      	movs	r3, #16
 80065e0:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 80065e2:	687b      	ldr	r3, [r7, #4]
 80065e4:	681b      	ldr	r3, [r3, #0]
 80065e6:	689b      	ldr	r3, [r3, #8]
 80065e8:	0e5b      	lsrs	r3, r3, #25
 80065ea:	b2db      	uxtb	r3, r3
 80065ec:	f003 0307 	and.w	r3, r3, #7
 80065f0:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 80065f2:	687b      	ldr	r3, [r7, #4]
 80065f4:	681b      	ldr	r3, [r3, #0]
 80065f6:	689b      	ldr	r3, [r3, #8]
 80065f8:	0f5b      	lsrs	r3, r3, #29
 80065fa:	b2db      	uxtb	r3, r3
 80065fc:	f003 0307 	and.w	r3, r3, #7
 8006600:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8006602:	7bbb      	ldrb	r3, [r7, #14]
 8006604:	7b3a      	ldrb	r2, [r7, #12]
 8006606:	4911      	ldr	r1, [pc, #68]	; (800664c <UARTEx_SetNbDataToProcess+0x94>)
 8006608:	5c8a      	ldrb	r2, [r1, r2]
 800660a:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 800660e:	7b3a      	ldrb	r2, [r7, #12]
 8006610:	490f      	ldr	r1, [pc, #60]	; (8006650 <UARTEx_SetNbDataToProcess+0x98>)
 8006612:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8006614:	fb93 f3f2 	sdiv	r3, r3, r2
 8006618:	b29a      	uxth	r2, r3
 800661a:	687b      	ldr	r3, [r7, #4]
 800661c:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8006620:	7bfb      	ldrb	r3, [r7, #15]
 8006622:	7b7a      	ldrb	r2, [r7, #13]
 8006624:	4909      	ldr	r1, [pc, #36]	; (800664c <UARTEx_SetNbDataToProcess+0x94>)
 8006626:	5c8a      	ldrb	r2, [r1, r2]
 8006628:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 800662c:	7b7a      	ldrb	r2, [r7, #13]
 800662e:	4908      	ldr	r1, [pc, #32]	; (8006650 <UARTEx_SetNbDataToProcess+0x98>)
 8006630:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8006632:	fb93 f3f2 	sdiv	r3, r3, r2
 8006636:	b29a      	uxth	r2, r3
 8006638:	687b      	ldr	r3, [r7, #4]
 800663a:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
}
 800663e:	bf00      	nop
 8006640:	3714      	adds	r7, #20
 8006642:	46bd      	mov	sp, r7
 8006644:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006648:	4770      	bx	lr
 800664a:	bf00      	nop
 800664c:	08007c38 	.word	0x08007c38
 8006650:	08007c40 	.word	0x08007c40

08006654 <FMC_NORSRAM_Init>:
  * @param  Init Pointer to NORSRAM Initialization structure
  * @retval HAL status
  */
HAL_StatusTypeDef  FMC_NORSRAM_Init(FMC_NORSRAM_TypeDef *Device,
                                    FMC_NORSRAM_InitTypeDef *Init)
{
 8006654:	b480      	push	{r7}
 8006656:	b087      	sub	sp, #28
 8006658:	af00      	add	r7, sp, #0
 800665a:	6078      	str	r0, [r7, #4]
 800665c:	6039      	str	r1, [r7, #0]
  assert_param(IS_FMC_CONTINOUS_CLOCK(Init->ContinuousClock));
  assert_param(IS_FMC_WRITE_FIFO(Init->WriteFifo));
  assert_param(IS_FMC_PAGESIZE(Init->PageSize));

  /* Disable NORSRAM Device */
  __FMC_NORSRAM_DISABLE(Device, Init->NSBank);
 800665e:	683b      	ldr	r3, [r7, #0]
 8006660:	681a      	ldr	r2, [r3, #0]
 8006662:	687b      	ldr	r3, [r7, #4]
 8006664:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006668:	683a      	ldr	r2, [r7, #0]
 800666a:	6812      	ldr	r2, [r2, #0]
 800666c:	f023 0101 	bic.w	r1, r3, #1
 8006670:	687b      	ldr	r3, [r7, #4]
 8006672:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

  /* Set NORSRAM device control parameters */
  if (Init->MemoryType == FMC_MEMORY_TYPE_NOR)
 8006676:	683b      	ldr	r3, [r7, #0]
 8006678:	689b      	ldr	r3, [r3, #8]
 800667a:	2b08      	cmp	r3, #8
 800667c:	d102      	bne.n	8006684 <FMC_NORSRAM_Init+0x30>
  {
    flashaccess = FMC_NORSRAM_FLASH_ACCESS_ENABLE;
 800667e:	2340      	movs	r3, #64	; 0x40
 8006680:	617b      	str	r3, [r7, #20]
 8006682:	e001      	b.n	8006688 <FMC_NORSRAM_Init+0x34>
  }
  else
  {
    flashaccess = FMC_NORSRAM_FLASH_ACCESS_DISABLE;
 8006684:	2300      	movs	r3, #0
 8006686:	617b      	str	r3, [r7, #20]
  }

  btcr_reg = (flashaccess                   | \
              Init->DataAddressMux          | \
 8006688:	683b      	ldr	r3, [r7, #0]
 800668a:	685a      	ldr	r2, [r3, #4]
  btcr_reg = (flashaccess                   | \
 800668c:	697b      	ldr	r3, [r7, #20]
 800668e:	431a      	orrs	r2, r3
              Init->MemoryType              | \
 8006690:	683b      	ldr	r3, [r7, #0]
 8006692:	689b      	ldr	r3, [r3, #8]
              Init->DataAddressMux          | \
 8006694:	431a      	orrs	r2, r3
              Init->MemoryDataWidth         | \
 8006696:	683b      	ldr	r3, [r7, #0]
 8006698:	68db      	ldr	r3, [r3, #12]
              Init->MemoryType              | \
 800669a:	431a      	orrs	r2, r3
              Init->BurstAccessMode         | \
 800669c:	683b      	ldr	r3, [r7, #0]
 800669e:	691b      	ldr	r3, [r3, #16]
              Init->MemoryDataWidth         | \
 80066a0:	431a      	orrs	r2, r3
              Init->WaitSignalPolarity      | \
 80066a2:	683b      	ldr	r3, [r7, #0]
 80066a4:	695b      	ldr	r3, [r3, #20]
              Init->BurstAccessMode         | \
 80066a6:	431a      	orrs	r2, r3
              Init->WaitSignalActive        | \
 80066a8:	683b      	ldr	r3, [r7, #0]
 80066aa:	699b      	ldr	r3, [r3, #24]
              Init->WaitSignalPolarity      | \
 80066ac:	431a      	orrs	r2, r3
              Init->WriteOperation          | \
 80066ae:	683b      	ldr	r3, [r7, #0]
 80066b0:	69db      	ldr	r3, [r3, #28]
              Init->WaitSignalActive        | \
 80066b2:	431a      	orrs	r2, r3
              Init->WaitSignal              | \
 80066b4:	683b      	ldr	r3, [r7, #0]
 80066b6:	6a1b      	ldr	r3, [r3, #32]
              Init->WriteOperation          | \
 80066b8:	431a      	orrs	r2, r3
              Init->ExtendedMode            | \
 80066ba:	683b      	ldr	r3, [r7, #0]
 80066bc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
              Init->WaitSignal              | \
 80066be:	431a      	orrs	r2, r3
              Init->AsynchronousWait        | \
 80066c0:	683b      	ldr	r3, [r7, #0]
 80066c2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
              Init->ExtendedMode            | \
 80066c4:	431a      	orrs	r2, r3
              Init->WriteBurst);
 80066c6:	683b      	ldr	r3, [r7, #0]
 80066c8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
  btcr_reg = (flashaccess                   | \
 80066ca:	4313      	orrs	r3, r2
 80066cc:	613b      	str	r3, [r7, #16]

  btcr_reg |= Init->ContinuousClock;
 80066ce:	683b      	ldr	r3, [r7, #0]
 80066d0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80066d2:	693a      	ldr	r2, [r7, #16]
 80066d4:	4313      	orrs	r3, r2
 80066d6:	613b      	str	r3, [r7, #16]
  btcr_reg |= Init->WriteFifo;
 80066d8:	683b      	ldr	r3, [r7, #0]
 80066da:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80066dc:	693a      	ldr	r2, [r7, #16]
 80066de:	4313      	orrs	r3, r2
 80066e0:	613b      	str	r3, [r7, #16]
  btcr_reg |= Init->PageSize;
 80066e2:	683b      	ldr	r3, [r7, #0]
 80066e4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80066e6:	693a      	ldr	r2, [r7, #16]
 80066e8:	4313      	orrs	r3, r2
 80066ea:	613b      	str	r3, [r7, #16]

  mask = (FMC_BCRx_MBKEN                |
 80066ec:	4b20      	ldr	r3, [pc, #128]	; (8006770 <FMC_NORSRAM_Init+0x11c>)
 80066ee:	60fb      	str	r3, [r7, #12]
          FMC_BCRx_WAITEN               |
          FMC_BCRx_EXTMOD               |
          FMC_BCRx_ASYNCWAIT            |
          FMC_BCRx_CBURSTRW);

  mask |= FMC_BCR1_CCLKEN;
 80066f0:	68fb      	ldr	r3, [r7, #12]
 80066f2:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80066f6:	60fb      	str	r3, [r7, #12]
  mask |= FMC_BCR1_WFDIS;
 80066f8:	68fb      	ldr	r3, [r7, #12]
 80066fa:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80066fe:	60fb      	str	r3, [r7, #12]
  mask |= FMC_BCRx_CPSIZE;
 8006700:	68fb      	ldr	r3, [r7, #12]
 8006702:	f443 23e0 	orr.w	r3, r3, #458752	; 0x70000
 8006706:	60fb      	str	r3, [r7, #12]

  MODIFY_REG(Device->BTCR[Init->NSBank], mask, btcr_reg);
 8006708:	683b      	ldr	r3, [r7, #0]
 800670a:	681a      	ldr	r2, [r3, #0]
 800670c:	687b      	ldr	r3, [r7, #4]
 800670e:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8006712:	68fb      	ldr	r3, [r7, #12]
 8006714:	43db      	mvns	r3, r3
 8006716:	ea02 0103 	and.w	r1, r2, r3
 800671a:	683b      	ldr	r3, [r7, #0]
 800671c:	681a      	ldr	r2, [r3, #0]
 800671e:	693b      	ldr	r3, [r7, #16]
 8006720:	4319      	orrs	r1, r3
 8006722:	687b      	ldr	r3, [r7, #4]
 8006724:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

  /* Configure synchronous mode when Continuous clock is enabled for bank2..4 */
  if ((Init->ContinuousClock == FMC_CONTINUOUS_CLOCK_SYNC_ASYNC) && (Init->NSBank != FMC_NORSRAM_BANK1))
 8006728:	683b      	ldr	r3, [r7, #0]
 800672a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800672c:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8006730:	d10c      	bne.n	800674c <FMC_NORSRAM_Init+0xf8>
 8006732:	683b      	ldr	r3, [r7, #0]
 8006734:	681b      	ldr	r3, [r3, #0]
 8006736:	2b00      	cmp	r3, #0
 8006738:	d008      	beq.n	800674c <FMC_NORSRAM_Init+0xf8>
  {
    MODIFY_REG(Device->BTCR[FMC_NORSRAM_BANK1], FMC_BCR1_CCLKEN, Init->ContinuousClock);
 800673a:	687b      	ldr	r3, [r7, #4]
 800673c:	681b      	ldr	r3, [r3, #0]
 800673e:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 8006742:	683b      	ldr	r3, [r7, #0]
 8006744:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006746:	431a      	orrs	r2, r3
 8006748:	687b      	ldr	r3, [r7, #4]
 800674a:	601a      	str	r2, [r3, #0]
  }

  if (Init->NSBank != FMC_NORSRAM_BANK1)
 800674c:	683b      	ldr	r3, [r7, #0]
 800674e:	681b      	ldr	r3, [r3, #0]
 8006750:	2b00      	cmp	r3, #0
 8006752:	d006      	beq.n	8006762 <FMC_NORSRAM_Init+0x10e>
  {
    /* Configure Write FIFO mode when Write Fifo is enabled for bank2..4 */
    SET_BIT(Device->BTCR[FMC_NORSRAM_BANK1], (uint32_t)(Init->WriteFifo));
 8006754:	687b      	ldr	r3, [r7, #4]
 8006756:	681a      	ldr	r2, [r3, #0]
 8006758:	683b      	ldr	r3, [r7, #0]
 800675a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800675c:	431a      	orrs	r2, r3
 800675e:	687b      	ldr	r3, [r7, #4]
 8006760:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8006762:	2300      	movs	r3, #0
}
 8006764:	4618      	mov	r0, r3
 8006766:	371c      	adds	r7, #28
 8006768:	46bd      	mov	sp, r7
 800676a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800676e:	4770      	bx	lr
 8006770:	0008fb7f 	.word	0x0008fb7f

08006774 <FMC_NORSRAM_Timing_Init>:
  * @param  Bank NORSRAM bank number
  * @retval HAL status
  */
HAL_StatusTypeDef FMC_NORSRAM_Timing_Init(FMC_NORSRAM_TypeDef *Device,
                                          FMC_NORSRAM_TimingTypeDef *Timing, uint32_t Bank)
{
 8006774:	b480      	push	{r7}
 8006776:	b087      	sub	sp, #28
 8006778:	af00      	add	r7, sp, #0
 800677a:	60f8      	str	r0, [r7, #12]
 800677c:	60b9      	str	r1, [r7, #8]
 800677e:	607a      	str	r2, [r7, #4]
  assert_param(IS_FMC_DATA_LATENCY(Timing->DataLatency));
  assert_param(IS_FMC_ACCESS_MODE(Timing->AccessMode));
  assert_param(IS_FMC_NORSRAM_BANK(Bank));

  /* Set FMC_NORSRAM device timing parameters */
  MODIFY_REG(Device->BTCR[Bank + 1U], BTR_CLEAR_MASK, (Timing->AddressSetupTime                                  |
 8006780:	687b      	ldr	r3, [r7, #4]
 8006782:	1c5a      	adds	r2, r3, #1
 8006784:	68fb      	ldr	r3, [r7, #12]
 8006786:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800678a:	f003 4140 	and.w	r1, r3, #3221225472	; 0xc0000000
 800678e:	68bb      	ldr	r3, [r7, #8]
 8006790:	681a      	ldr	r2, [r3, #0]
 8006792:	68bb      	ldr	r3, [r7, #8]
 8006794:	685b      	ldr	r3, [r3, #4]
 8006796:	011b      	lsls	r3, r3, #4
 8006798:	431a      	orrs	r2, r3
 800679a:	68bb      	ldr	r3, [r7, #8]
 800679c:	689b      	ldr	r3, [r3, #8]
 800679e:	021b      	lsls	r3, r3, #8
 80067a0:	431a      	orrs	r2, r3
 80067a2:	68bb      	ldr	r3, [r7, #8]
 80067a4:	68db      	ldr	r3, [r3, #12]
 80067a6:	041b      	lsls	r3, r3, #16
 80067a8:	431a      	orrs	r2, r3
 80067aa:	68bb      	ldr	r3, [r7, #8]
 80067ac:	691b      	ldr	r3, [r3, #16]
 80067ae:	3b01      	subs	r3, #1
 80067b0:	051b      	lsls	r3, r3, #20
 80067b2:	431a      	orrs	r2, r3
 80067b4:	68bb      	ldr	r3, [r7, #8]
 80067b6:	695b      	ldr	r3, [r3, #20]
 80067b8:	3b02      	subs	r3, #2
 80067ba:	061b      	lsls	r3, r3, #24
 80067bc:	431a      	orrs	r2, r3
 80067be:	68bb      	ldr	r3, [r7, #8]
 80067c0:	699b      	ldr	r3, [r3, #24]
 80067c2:	4313      	orrs	r3, r2
 80067c4:	687a      	ldr	r2, [r7, #4]
 80067c6:	3201      	adds	r2, #1
 80067c8:	4319      	orrs	r1, r3
 80067ca:	68fb      	ldr	r3, [r7, #12]
 80067cc:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
                                                       (((Timing->CLKDivision) - 1U)     << FMC_BTRx_CLKDIV_Pos)  |
                                                       (((Timing->DataLatency) - 2U)     << FMC_BTRx_DATLAT_Pos)  |
                                                       (Timing->AccessMode)));

  /* Configure Clock division value (in NORSRAM bank 1) when continuous clock is enabled */
  if (HAL_IS_BIT_SET(Device->BTCR[FMC_NORSRAM_BANK1], FMC_BCR1_CCLKEN))
 80067d0:	68fb      	ldr	r3, [r7, #12]
 80067d2:	681b      	ldr	r3, [r3, #0]
 80067d4:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80067d8:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80067dc:	d113      	bne.n	8006806 <FMC_NORSRAM_Timing_Init+0x92>
  {
    tmpr = (uint32_t)(Device->BTCR[FMC_NORSRAM_BANK1 + 1U] & ~((0x0FU) << FMC_BTRx_CLKDIV_Pos));
 80067de:	68fb      	ldr	r3, [r7, #12]
 80067e0:	685b      	ldr	r3, [r3, #4]
 80067e2:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 80067e6:	617b      	str	r3, [r7, #20]
    tmpr |= (uint32_t)(((Timing->CLKDivision) - 1U) << FMC_BTRx_CLKDIV_Pos);
 80067e8:	68bb      	ldr	r3, [r7, #8]
 80067ea:	691b      	ldr	r3, [r3, #16]
 80067ec:	3b01      	subs	r3, #1
 80067ee:	051b      	lsls	r3, r3, #20
 80067f0:	697a      	ldr	r2, [r7, #20]
 80067f2:	4313      	orrs	r3, r2
 80067f4:	617b      	str	r3, [r7, #20]
    MODIFY_REG(Device->BTCR[FMC_NORSRAM_BANK1 + 1U], FMC_BTRx_CLKDIV, tmpr);
 80067f6:	68fb      	ldr	r3, [r7, #12]
 80067f8:	685b      	ldr	r3, [r3, #4]
 80067fa:	f423 0270 	bic.w	r2, r3, #15728640	; 0xf00000
 80067fe:	697b      	ldr	r3, [r7, #20]
 8006800:	431a      	orrs	r2, r3
 8006802:	68fb      	ldr	r3, [r7, #12]
 8006804:	605a      	str	r2, [r3, #4]
  }

  return HAL_OK;
 8006806:	2300      	movs	r3, #0
}
 8006808:	4618      	mov	r0, r3
 800680a:	371c      	adds	r7, #28
 800680c:	46bd      	mov	sp, r7
 800680e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006812:	4770      	bx	lr

08006814 <FMC_NORSRAM_Extended_Timing_Init>:
  * @retval HAL status
  */
HAL_StatusTypeDef FMC_NORSRAM_Extended_Timing_Init(FMC_NORSRAM_EXTENDED_TypeDef *Device,
                                                   FMC_NORSRAM_TimingTypeDef *Timing, uint32_t Bank,
                                                   uint32_t ExtendedMode)
{
 8006814:	b480      	push	{r7}
 8006816:	b085      	sub	sp, #20
 8006818:	af00      	add	r7, sp, #0
 800681a:	60f8      	str	r0, [r7, #12]
 800681c:	60b9      	str	r1, [r7, #8]
 800681e:	607a      	str	r2, [r7, #4]
 8006820:	603b      	str	r3, [r7, #0]
  /* Check the parameters */
  assert_param(IS_FMC_EXTENDED_MODE(ExtendedMode));

  /* Set NORSRAM device timing register for write configuration, if extended mode is used */
  if (ExtendedMode == FMC_EXTENDED_MODE_ENABLE)
 8006822:	683b      	ldr	r3, [r7, #0]
 8006824:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8006828:	d11d      	bne.n	8006866 <FMC_NORSRAM_Extended_Timing_Init+0x52>
    assert_param(IS_FMC_TURNAROUND_TIME(Timing->BusTurnAroundDuration));
    assert_param(IS_FMC_ACCESS_MODE(Timing->AccessMode));
    assert_param(IS_FMC_NORSRAM_BANK(Bank));

    /* Set NORSRAM device timing register for write configuration, if extended mode is used */
    MODIFY_REG(Device->BWTR[Bank], BWTR_CLEAR_MASK, (Timing->AddressSetupTime                                    |
 800682a:	68fb      	ldr	r3, [r7, #12]
 800682c:	687a      	ldr	r2, [r7, #4]
 800682e:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8006832:	4b13      	ldr	r3, [pc, #76]	; (8006880 <FMC_NORSRAM_Extended_Timing_Init+0x6c>)
 8006834:	4013      	ands	r3, r2
 8006836:	68ba      	ldr	r2, [r7, #8]
 8006838:	6811      	ldr	r1, [r2, #0]
 800683a:	68ba      	ldr	r2, [r7, #8]
 800683c:	6852      	ldr	r2, [r2, #4]
 800683e:	0112      	lsls	r2, r2, #4
 8006840:	4311      	orrs	r1, r2
 8006842:	68ba      	ldr	r2, [r7, #8]
 8006844:	6892      	ldr	r2, [r2, #8]
 8006846:	0212      	lsls	r2, r2, #8
 8006848:	4311      	orrs	r1, r2
 800684a:	68ba      	ldr	r2, [r7, #8]
 800684c:	6992      	ldr	r2, [r2, #24]
 800684e:	4311      	orrs	r1, r2
 8006850:	68ba      	ldr	r2, [r7, #8]
 8006852:	68d2      	ldr	r2, [r2, #12]
 8006854:	0412      	lsls	r2, r2, #16
 8006856:	430a      	orrs	r2, r1
 8006858:	ea43 0102 	orr.w	r1, r3, r2
 800685c:	68fb      	ldr	r3, [r7, #12]
 800685e:	687a      	ldr	r2, [r7, #4]
 8006860:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
 8006864:	e005      	b.n	8006872 <FMC_NORSRAM_Extended_Timing_Init+0x5e>
                                                     Timing->AccessMode                                          |
                                                     ((Timing->BusTurnAroundDuration)  << FMC_BWTRx_BUSTURN_Pos)));
  }
  else
  {
    Device->BWTR[Bank] = 0x0FFFFFFFU;
 8006866:	68fb      	ldr	r3, [r7, #12]
 8006868:	687a      	ldr	r2, [r7, #4]
 800686a:	f06f 4170 	mvn.w	r1, #4026531840	; 0xf0000000
 800686e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  }

  return HAL_OK;
 8006872:	2300      	movs	r3, #0
}
 8006874:	4618      	mov	r0, r3
 8006876:	3714      	adds	r7, #20
 8006878:	46bd      	mov	sp, r7
 800687a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800687e:	4770      	bx	lr
 8006880:	cff00000 	.word	0xcff00000

08006884 <WIZCHIP_READ>:
   WIZCHIP.CS._d_e_s_e_l_e_c_t_();
   WIZCHIP_CRITICAL_EXIT();
}

uint8_t  WIZCHIP_READ(uint32_t AddrSel)
{
 8006884:	b590      	push	{r4, r7, lr}
 8006886:	b085      	sub	sp, #20
 8006888:	af00      	add	r7, sp, #0
 800688a:	6078      	str	r0, [r7, #4]
   uint8_t ret;
   uint8_t tAD[3];
   tAD[0] = (uint8_t)((AddrSel & 0x00FF0000) >> 16);
 800688c:	687b      	ldr	r3, [r7, #4]
 800688e:	0c1b      	lsrs	r3, r3, #16
 8006890:	b2db      	uxtb	r3, r3
 8006892:	733b      	strb	r3, [r7, #12]
   tAD[1] = (uint8_t)((AddrSel & 0x0000FF00) >> 8);
 8006894:	687b      	ldr	r3, [r7, #4]
 8006896:	0a1b      	lsrs	r3, r3, #8
 8006898:	b2db      	uxtb	r3, r3
 800689a:	737b      	strb	r3, [r7, #13]
   tAD[2] = (uint8_t)(AddrSel & 0x000000ff);
 800689c:	687b      	ldr	r3, [r7, #4]
 800689e:	b2db      	uxtb	r3, r3
 80068a0:	73bb      	strb	r3, [r7, #14]

   WIZCHIP_CRITICAL_ENTER();
 80068a2:	4b10      	ldr	r3, [pc, #64]	; (80068e4 <WIZCHIP_READ+0x60>)
 80068a4:	689b      	ldr	r3, [r3, #8]
 80068a6:	4798      	blx	r3
   WIZCHIP.CS._s_e_l_e_c_t_();
 80068a8:	4b0e      	ldr	r3, [pc, #56]	; (80068e4 <WIZCHIP_READ+0x60>)
 80068aa:	691b      	ldr	r3, [r3, #16]
 80068ac:	4798      	blx	r3
#if( (_WIZCHIP_IO_MODE_ ==  _WIZCHIP_IO_MODE_SPI_VDM_))
   tAD[2] |= (_W6100_SPI_READ_ | _W6100_SPI_OP_);
   WIZCHIP.IF.SPI._write_byte_buf(tAD, 3);
   ret = WIZCHIP.IF.SPI._read_byte();
#elif ( (_WIZCHIP_IO_MODE_ == _WIZCHIP_IO_MODE_BUS_INDIR_) )
   WIZCHIP.IF.BUS._write_data_buf(IDM_AR0,tAD,3,1);
 80068ae:	4b0d      	ldr	r3, [pc, #52]	; (80068e4 <WIZCHIP_READ+0x60>)
 80068b0:	6a5c      	ldr	r4, [r3, #36]	; 0x24
 80068b2:	f107 010c 	add.w	r1, r7, #12
 80068b6:	2301      	movs	r3, #1
 80068b8:	2203      	movs	r2, #3
 80068ba:	f04f 40c0 	mov.w	r0, #1610612736	; 0x60000000
 80068be:	47a0      	blx	r4
   ret = WIZCHIP.IF.BUS._read_data(IDM_DR);
 80068c0:	4b08      	ldr	r3, [pc, #32]	; (80068e4 <WIZCHIP_READ+0x60>)
 80068c2:	699b      	ldr	r3, [r3, #24]
 80068c4:	4808      	ldr	r0, [pc, #32]	; (80068e8 <WIZCHIP_READ+0x64>)
 80068c6:	4798      	blx	r3
 80068c8:	4603      	mov	r3, r0
 80068ca:	73fb      	strb	r3, [r7, #15]
#else
   #error "Unknown _WIZCHIP_IO_MODE_ in W6100. !!!"   
#endif

   WIZCHIP.CS._d_e_s_e_l_e_c_t_();
 80068cc:	4b05      	ldr	r3, [pc, #20]	; (80068e4 <WIZCHIP_READ+0x60>)
 80068ce:	695b      	ldr	r3, [r3, #20]
 80068d0:	4798      	blx	r3
   WIZCHIP_CRITICAL_EXIT();
 80068d2:	4b04      	ldr	r3, [pc, #16]	; (80068e4 <WIZCHIP_READ+0x60>)
 80068d4:	68db      	ldr	r3, [r3, #12]
 80068d6:	4798      	blx	r3
   return ret;
 80068d8:	7bfb      	ldrb	r3, [r7, #15]
}
 80068da:	4618      	mov	r0, r3
 80068dc:	3714      	adds	r7, #20
 80068de:	46bd      	mov	sp, r7
 80068e0:	bd90      	pop	{r4, r7, pc}
 80068e2:	bf00      	nop
 80068e4:	20000010 	.word	0x20000010
 80068e8:	60000003 	.word	0x60000003

080068ec <wizchip_cris_enter>:
 * @details @ref wizchip_cris_enter() provides the default protection while @ref _WIZCHIP_ is accessed. \n
 *          but it is null function.
 * @note It can be overwritten with your function or register your functions by calling @ref reg_wizchip_cris_cbfunc().
 * @sa wizchip_cris_exit()
 */
void wizchip_cris_enter(void)   {}
 80068ec:	b480      	push	{r7}
 80068ee:	af00      	add	r7, sp, #0
 80068f0:	bf00      	nop
 80068f2:	46bd      	mov	sp, r7
 80068f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80068f8:	4770      	bx	lr

080068fa <wizchip_cris_exit>:
 * @details @ref wizchip_cris_exit provides the default protection while @ref _WIZCHIP_ is accessed\n
 *          but it is null function.
 * @note It can be overwritten with your function or register your functions by calling @ref reg_wizchip_cris_cbfunc().
 * @sa wizchip_cris_enter()
 */
void wizchip_cris_exit(void)   {}
 80068fa:	b480      	push	{r7}
 80068fc:	af00      	add	r7, sp, #0
 80068fe:	bf00      	nop
 8006900:	46bd      	mov	sp, r7
 8006902:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006906:	4770      	bx	lr

08006908 <wizchip_cs_select>:
 * @details @ref wizchip_cs_select() provides the default selection @ref _WIZCHIP_,\n
 *          but it is null function.
 * @note It can be overwritten with your function or register your functions by calling @ref reg_wizchip_cs_cbfunc().
 * @sa wizchip_cs_deselect()
 */
void wizchip_cs_select(void)   {}
 8006908:	b480      	push	{r7}
 800690a:	af00      	add	r7, sp, #0
 800690c:	bf00      	nop
 800690e:	46bd      	mov	sp, r7
 8006910:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006914:	4770      	bx	lr

08006916 <wizchip_cs_deselect>:
 * @details @ref wizchip_cs_deselect() provides the default de-selection @ref _WIZCHIP_, \n
 *          but it is null function.
 * @note It can be overwritten with your function or register your functions by calling @ref reg_wizchip_cs_cbfunc().
 * @sa wizchip_cs_select()
 */
void wizchip_cs_deselect(void)   {}
 8006916:	b480      	push	{r7}
 8006918:	af00      	add	r7, sp, #0
 800691a:	bf00      	nop
 800691c:	46bd      	mov	sp, r7
 800691e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006922:	4770      	bx	lr

08006924 <wizchip_bus_read>:
 * @param AddrSel It specifies the address of register to be read.
 * @return @ref iodata_t  
 * @note It can be overwritten with your function or register your functions by calling @ref reg_wizchip_bus_cbfunc().
 * @sa wizchip_bus_write()
 */
iodata_t wizchip_bus_read(uint32_t AddrSel) { return * ((volatile iodata_t *)((ptrdiff_t) AddrSel)); }
 8006924:	b480      	push	{r7}
 8006926:	b083      	sub	sp, #12
 8006928:	af00      	add	r7, sp, #0
 800692a:	6078      	str	r0, [r7, #4]
 800692c:	687b      	ldr	r3, [r7, #4]
 800692e:	781b      	ldrb	r3, [r3, #0]
 8006930:	b2db      	uxtb	r3, r3
 8006932:	4618      	mov	r0, r3
 8006934:	370c      	adds	r7, #12
 8006936:	46bd      	mov	sp, r7
 8006938:	f85d 7b04 	ldr.w	r7, [sp], #4
 800693c:	4770      	bx	lr

0800693e <wizchip_bus_write>:
 * @param wb @ref iodata_t data to be written
 * @return void
 * @note It can be overwritten with your function or register your functions by calling @ref reg_wizchip_bus_cbfunc().
 * @sa wizchip_bus_read()
 */
void wizchip_bus_write(uint32_t AddrSel, iodata_t wb)  { *((volatile iodata_t*)((ptrdiff_t)AddrSel)) = wb; }
 800693e:	b480      	push	{r7}
 8006940:	b083      	sub	sp, #12
 8006942:	af00      	add	r7, sp, #0
 8006944:	6078      	str	r0, [r7, #4]
 8006946:	460b      	mov	r3, r1
 8006948:	70fb      	strb	r3, [r7, #3]
 800694a:	687b      	ldr	r3, [r7, #4]
 800694c:	78fa      	ldrb	r2, [r7, #3]
 800694e:	701a      	strb	r2, [r3, #0]
 8006950:	bf00      	nop
 8006952:	370c      	adds	r7, #12
 8006954:	46bd      	mov	sp, r7
 8006956:	f85d 7b04 	ldr.w	r7, [sp], #4
 800695a:	4770      	bx	lr

0800695c <wizchip_bus_read_buf>:
 * @return void
 * @note It can be overwritten with your function or register your functions by calling @ref reg_wizchip_bus_cbfunc().
 * @sa wizchip_bus_write_buf()
 */
void wizchip_bus_read_buf(uint32_t AddrSel, iodata_t* buf, datasize_t len, uint8_t addrinc)
{ 
 800695c:	b590      	push	{r4, r7, lr}
 800695e:	b087      	sub	sp, #28
 8006960:	af00      	add	r7, sp, #0
 8006962:	60f8      	str	r0, [r7, #12]
 8006964:	60b9      	str	r1, [r7, #8]
 8006966:	4611      	mov	r1, r2
 8006968:	461a      	mov	r2, r3
 800696a:	460b      	mov	r3, r1
 800696c:	80fb      	strh	r3, [r7, #6]
 800696e:	4613      	mov	r3, r2
 8006970:	717b      	strb	r3, [r7, #5]
   datasize_t i;
   if(addrinc) addrinc = sizeof(iodata_t);
 8006972:	797b      	ldrb	r3, [r7, #5]
 8006974:	2b00      	cmp	r3, #0
 8006976:	d001      	beq.n	800697c <wizchip_bus_read_buf+0x20>
 8006978:	2301      	movs	r3, #1
 800697a:	717b      	strb	r3, [r7, #5]
   for ( i = 0; i < len; i++)
 800697c:	2300      	movs	r3, #0
 800697e:	82fb      	strh	r3, [r7, #22]
 8006980:	e012      	b.n	80069a8 <wizchip_bus_read_buf+0x4c>
   {
      *buf++ = WIZCHIP.IF.BUS._read_data(AddrSel);
 8006982:	4b0f      	ldr	r3, [pc, #60]	; (80069c0 <wizchip_bus_read_buf+0x64>)
 8006984:	699b      	ldr	r3, [r3, #24]
 8006986:	68bc      	ldr	r4, [r7, #8]
 8006988:	1c62      	adds	r2, r4, #1
 800698a:	60ba      	str	r2, [r7, #8]
 800698c:	68f8      	ldr	r0, [r7, #12]
 800698e:	4798      	blx	r3
 8006990:	4603      	mov	r3, r0
 8006992:	7023      	strb	r3, [r4, #0]
      AddrSel += (uint32_t) addrinc;
 8006994:	797b      	ldrb	r3, [r7, #5]
 8006996:	68fa      	ldr	r2, [r7, #12]
 8006998:	4413      	add	r3, r2
 800699a:	60fb      	str	r3, [r7, #12]
   for ( i = 0; i < len; i++)
 800699c:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 80069a0:	b29b      	uxth	r3, r3
 80069a2:	3301      	adds	r3, #1
 80069a4:	b29b      	uxth	r3, r3
 80069a6:	82fb      	strh	r3, [r7, #22]
 80069a8:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 80069ac:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80069b0:	429a      	cmp	r2, r3
 80069b2:	dbe6      	blt.n	8006982 <wizchip_bus_read_buf+0x26>
   }
}
 80069b4:	bf00      	nop
 80069b6:	bf00      	nop
 80069b8:	371c      	adds	r7, #28
 80069ba:	46bd      	mov	sp, r7
 80069bc:	bd90      	pop	{r4, r7, pc}
 80069be:	bf00      	nop
 80069c0:	20000010 	.word	0x20000010

080069c4 <wizchip_bus_write_buf>:
 * @return void
 * @note It can be overwritten with your function or register your functions by calling @ref reg_wizchip_bus_cbfunc().
 * @sa wizchip_bus_read_buf()
 */
void wizchip_bus_write_buf(uint32_t AddrSel, iodata_t* buf, datasize_t len, uint8_t addrinc)
{ 
 80069c4:	b580      	push	{r7, lr}
 80069c6:	b086      	sub	sp, #24
 80069c8:	af00      	add	r7, sp, #0
 80069ca:	60f8      	str	r0, [r7, #12]
 80069cc:	60b9      	str	r1, [r7, #8]
 80069ce:	4611      	mov	r1, r2
 80069d0:	461a      	mov	r2, r3
 80069d2:	460b      	mov	r3, r1
 80069d4:	80fb      	strh	r3, [r7, #6]
 80069d6:	4613      	mov	r3, r2
 80069d8:	717b      	strb	r3, [r7, #5]
   datasize_t i;
   if(addrinc) addrinc = sizeof(iodata_t);
 80069da:	797b      	ldrb	r3, [r7, #5]
 80069dc:	2b00      	cmp	r3, #0
 80069de:	d001      	beq.n	80069e4 <wizchip_bus_write_buf+0x20>
 80069e0:	2301      	movs	r3, #1
 80069e2:	717b      	strb	r3, [r7, #5]
   for( i = 0; i < len ; i++)
 80069e4:	2300      	movs	r3, #0
 80069e6:	82fb      	strh	r3, [r7, #22]
 80069e8:	e012      	b.n	8006a10 <wizchip_bus_write_buf+0x4c>
   {
      WIZCHIP.IF.BUS._write_data(AddrSel,*buf++);
 80069ea:	4b0f      	ldr	r3, [pc, #60]	; (8006a28 <wizchip_bus_write_buf+0x64>)
 80069ec:	69da      	ldr	r2, [r3, #28]
 80069ee:	68bb      	ldr	r3, [r7, #8]
 80069f0:	1c59      	adds	r1, r3, #1
 80069f2:	60b9      	str	r1, [r7, #8]
 80069f4:	781b      	ldrb	r3, [r3, #0]
 80069f6:	4619      	mov	r1, r3
 80069f8:	68f8      	ldr	r0, [r7, #12]
 80069fa:	4790      	blx	r2
      AddrSel += (uint32_t)addrinc;
 80069fc:	797b      	ldrb	r3, [r7, #5]
 80069fe:	68fa      	ldr	r2, [r7, #12]
 8006a00:	4413      	add	r3, r2
 8006a02:	60fb      	str	r3, [r7, #12]
   for( i = 0; i < len ; i++)
 8006a04:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 8006a08:	b29b      	uxth	r3, r3
 8006a0a:	3301      	adds	r3, #1
 8006a0c:	b29b      	uxth	r3, r3
 8006a0e:	82fb      	strh	r3, [r7, #22]
 8006a10:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 8006a14:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8006a18:	429a      	cmp	r2, r3
 8006a1a:	dbe6      	blt.n	80069ea <wizchip_bus_write_buf+0x26>
   }

}
 8006a1c:	bf00      	nop
 8006a1e:	bf00      	nop
 8006a20:	3718      	adds	r7, #24
 8006a22:	46bd      	mov	sp, r7
 8006a24:	bd80      	pop	{r7, pc}
 8006a26:	bf00      	nop
 8006a28:	20000010 	.word	0x20000010

08006a2c <reg_wizchip_bus_cbfunc>:
#if (_WIZCHIP_IO_MODE_ & _WIZCHIP_IO_MODE_BUS_)
void reg_wizchip_bus_cbfunc( iodata_t(*bus_rd)(uint32_t addr), 
                             void (*bus_wd)(uint32_t addr, iodata_t wb),
                             void (*bus_rbuf)(uint32_t AddrSel, uint8_t* buf, datasize_t len, uint8_t inc),
                             void (*bus_wbuf)(uint32_t AddrSel, uint8_t* buf, datasize_t len, uint8_t inc) )
{
 8006a2c:	b480      	push	{r7}
 8006a2e:	b085      	sub	sp, #20
 8006a30:	af00      	add	r7, sp, #0
 8006a32:	60f8      	str	r0, [r7, #12]
 8006a34:	60b9      	str	r1, [r7, #8]
 8006a36:	607a      	str	r2, [r7, #4]
 8006a38:	603b      	str	r3, [r7, #0]
   while(!(WIZCHIP.if_mode & _WIZCHIP_IO_MODE_BUS_));   
 8006a3a:	bf00      	nop
 8006a3c:	4b19      	ldr	r3, [pc, #100]	; (8006aa4 <reg_wizchip_bus_cbfunc+0x78>)
 8006a3e:	881b      	ldrh	r3, [r3, #0]
 8006a40:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006a44:	2b00      	cmp	r3, #0
 8006a46:	d0f9      	beq.n	8006a3c <reg_wizchip_bus_cbfunc+0x10>
   if(!bus_rd)  WIZCHIP.IF.BUS._read_data   = wizchip_bus_read;
 8006a48:	68fb      	ldr	r3, [r7, #12]
 8006a4a:	2b00      	cmp	r3, #0
 8006a4c:	d103      	bne.n	8006a56 <reg_wizchip_bus_cbfunc+0x2a>
 8006a4e:	4b15      	ldr	r3, [pc, #84]	; (8006aa4 <reg_wizchip_bus_cbfunc+0x78>)
 8006a50:	4a15      	ldr	r2, [pc, #84]	; (8006aa8 <reg_wizchip_bus_cbfunc+0x7c>)
 8006a52:	619a      	str	r2, [r3, #24]
 8006a54:	e002      	b.n	8006a5c <reg_wizchip_bus_cbfunc+0x30>
   else         WIZCHIP.IF.BUS._read_data   = bus_rd;
 8006a56:	4a13      	ldr	r2, [pc, #76]	; (8006aa4 <reg_wizchip_bus_cbfunc+0x78>)
 8006a58:	68fb      	ldr	r3, [r7, #12]
 8006a5a:	6193      	str	r3, [r2, #24]
   if(!bus_wd)  WIZCHIP.IF.BUS._write_data  = wizchip_bus_write;
 8006a5c:	68bb      	ldr	r3, [r7, #8]
 8006a5e:	2b00      	cmp	r3, #0
 8006a60:	d103      	bne.n	8006a6a <reg_wizchip_bus_cbfunc+0x3e>
 8006a62:	4b10      	ldr	r3, [pc, #64]	; (8006aa4 <reg_wizchip_bus_cbfunc+0x78>)
 8006a64:	4a11      	ldr	r2, [pc, #68]	; (8006aac <reg_wizchip_bus_cbfunc+0x80>)
 8006a66:	61da      	str	r2, [r3, #28]
 8006a68:	e002      	b.n	8006a70 <reg_wizchip_bus_cbfunc+0x44>
   else         WIZCHIP.IF.BUS._write_data  = bus_wd;
 8006a6a:	4a0e      	ldr	r2, [pc, #56]	; (8006aa4 <reg_wizchip_bus_cbfunc+0x78>)
 8006a6c:	68bb      	ldr	r3, [r7, #8]
 8006a6e:	61d3      	str	r3, [r2, #28]

   if(!bus_rbuf)  WIZCHIP.IF.BUS._read_data_buf   = wizchip_bus_read_buf;
 8006a70:	687b      	ldr	r3, [r7, #4]
 8006a72:	2b00      	cmp	r3, #0
 8006a74:	d103      	bne.n	8006a7e <reg_wizchip_bus_cbfunc+0x52>
 8006a76:	4b0b      	ldr	r3, [pc, #44]	; (8006aa4 <reg_wizchip_bus_cbfunc+0x78>)
 8006a78:	4a0d      	ldr	r2, [pc, #52]	; (8006ab0 <reg_wizchip_bus_cbfunc+0x84>)
 8006a7a:	621a      	str	r2, [r3, #32]
 8006a7c:	e002      	b.n	8006a84 <reg_wizchip_bus_cbfunc+0x58>
   else           WIZCHIP.IF.BUS._read_data_buf   = bus_rbuf;
 8006a7e:	4a09      	ldr	r2, [pc, #36]	; (8006aa4 <reg_wizchip_bus_cbfunc+0x78>)
 8006a80:	687b      	ldr	r3, [r7, #4]
 8006a82:	6213      	str	r3, [r2, #32]
   if(!bus_wbuf)  WIZCHIP.IF.BUS._write_data_buf  = wizchip_bus_write_buf;
 8006a84:	683b      	ldr	r3, [r7, #0]
 8006a86:	2b00      	cmp	r3, #0
 8006a88:	d103      	bne.n	8006a92 <reg_wizchip_bus_cbfunc+0x66>
 8006a8a:	4b06      	ldr	r3, [pc, #24]	; (8006aa4 <reg_wizchip_bus_cbfunc+0x78>)
 8006a8c:	4a09      	ldr	r2, [pc, #36]	; (8006ab4 <reg_wizchip_bus_cbfunc+0x88>)
 8006a8e:	625a      	str	r2, [r3, #36]	; 0x24
   else           WIZCHIP.IF.BUS._write_data_buf  = bus_wbuf;
}
 8006a90:	e002      	b.n	8006a98 <reg_wizchip_bus_cbfunc+0x6c>
   else           WIZCHIP.IF.BUS._write_data_buf  = bus_wbuf;
 8006a92:	4a04      	ldr	r2, [pc, #16]	; (8006aa4 <reg_wizchip_bus_cbfunc+0x78>)
 8006a94:	683b      	ldr	r3, [r7, #0]
 8006a96:	6253      	str	r3, [r2, #36]	; 0x24
}
 8006a98:	bf00      	nop
 8006a9a:	3714      	adds	r7, #20
 8006a9c:	46bd      	mov	sp, r7
 8006a9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006aa2:	4770      	bx	lr
 8006aa4:	20000010 	.word	0x20000010
 8006aa8:	08006925 	.word	0x08006925
 8006aac:	0800693f 	.word	0x0800693f
 8006ab0:	0800695d 	.word	0x0800695d
 8006ab4:	080069c5 	.word	0x080069c5

08006ab8 <__errno>:
 8006ab8:	4b01      	ldr	r3, [pc, #4]	; (8006ac0 <__errno+0x8>)
 8006aba:	6818      	ldr	r0, [r3, #0]
 8006abc:	4770      	bx	lr
 8006abe:	bf00      	nop
 8006ac0:	20000038 	.word	0x20000038

08006ac4 <__libc_init_array>:
 8006ac4:	b570      	push	{r4, r5, r6, lr}
 8006ac6:	4d0d      	ldr	r5, [pc, #52]	; (8006afc <__libc_init_array+0x38>)
 8006ac8:	4c0d      	ldr	r4, [pc, #52]	; (8006b00 <__libc_init_array+0x3c>)
 8006aca:	1b64      	subs	r4, r4, r5
 8006acc:	10a4      	asrs	r4, r4, #2
 8006ace:	2600      	movs	r6, #0
 8006ad0:	42a6      	cmp	r6, r4
 8006ad2:	d109      	bne.n	8006ae8 <__libc_init_array+0x24>
 8006ad4:	4d0b      	ldr	r5, [pc, #44]	; (8006b04 <__libc_init_array+0x40>)
 8006ad6:	4c0c      	ldr	r4, [pc, #48]	; (8006b08 <__libc_init_array+0x44>)
 8006ad8:	f000 ffec 	bl	8007ab4 <_init>
 8006adc:	1b64      	subs	r4, r4, r5
 8006ade:	10a4      	asrs	r4, r4, #2
 8006ae0:	2600      	movs	r6, #0
 8006ae2:	42a6      	cmp	r6, r4
 8006ae4:	d105      	bne.n	8006af2 <__libc_init_array+0x2e>
 8006ae6:	bd70      	pop	{r4, r5, r6, pc}
 8006ae8:	f855 3b04 	ldr.w	r3, [r5], #4
 8006aec:	4798      	blx	r3
 8006aee:	3601      	adds	r6, #1
 8006af0:	e7ee      	b.n	8006ad0 <__libc_init_array+0xc>
 8006af2:	f855 3b04 	ldr.w	r3, [r5], #4
 8006af6:	4798      	blx	r3
 8006af8:	3601      	adds	r6, #1
 8006afa:	e7f2      	b.n	8006ae2 <__libc_init_array+0x1e>
 8006afc:	08007ce8 	.word	0x08007ce8
 8006b00:	08007ce8 	.word	0x08007ce8
 8006b04:	08007ce8 	.word	0x08007ce8
 8006b08:	08007cec 	.word	0x08007cec

08006b0c <memset>:
 8006b0c:	4402      	add	r2, r0
 8006b0e:	4603      	mov	r3, r0
 8006b10:	4293      	cmp	r3, r2
 8006b12:	d100      	bne.n	8006b16 <memset+0xa>
 8006b14:	4770      	bx	lr
 8006b16:	f803 1b01 	strb.w	r1, [r3], #1
 8006b1a:	e7f9      	b.n	8006b10 <memset+0x4>

08006b1c <iprintf>:
 8006b1c:	b40f      	push	{r0, r1, r2, r3}
 8006b1e:	4b0a      	ldr	r3, [pc, #40]	; (8006b48 <iprintf+0x2c>)
 8006b20:	b513      	push	{r0, r1, r4, lr}
 8006b22:	681c      	ldr	r4, [r3, #0]
 8006b24:	b124      	cbz	r4, 8006b30 <iprintf+0x14>
 8006b26:	69a3      	ldr	r3, [r4, #24]
 8006b28:	b913      	cbnz	r3, 8006b30 <iprintf+0x14>
 8006b2a:	4620      	mov	r0, r4
 8006b2c:	f000 fa5e 	bl	8006fec <__sinit>
 8006b30:	ab05      	add	r3, sp, #20
 8006b32:	9a04      	ldr	r2, [sp, #16]
 8006b34:	68a1      	ldr	r1, [r4, #8]
 8006b36:	9301      	str	r3, [sp, #4]
 8006b38:	4620      	mov	r0, r4
 8006b3a:	f000 fc2f 	bl	800739c <_vfiprintf_r>
 8006b3e:	b002      	add	sp, #8
 8006b40:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8006b44:	b004      	add	sp, #16
 8006b46:	4770      	bx	lr
 8006b48:	20000038 	.word	0x20000038

08006b4c <_puts_r>:
 8006b4c:	b570      	push	{r4, r5, r6, lr}
 8006b4e:	460e      	mov	r6, r1
 8006b50:	4605      	mov	r5, r0
 8006b52:	b118      	cbz	r0, 8006b5c <_puts_r+0x10>
 8006b54:	6983      	ldr	r3, [r0, #24]
 8006b56:	b90b      	cbnz	r3, 8006b5c <_puts_r+0x10>
 8006b58:	f000 fa48 	bl	8006fec <__sinit>
 8006b5c:	69ab      	ldr	r3, [r5, #24]
 8006b5e:	68ac      	ldr	r4, [r5, #8]
 8006b60:	b913      	cbnz	r3, 8006b68 <_puts_r+0x1c>
 8006b62:	4628      	mov	r0, r5
 8006b64:	f000 fa42 	bl	8006fec <__sinit>
 8006b68:	4b2c      	ldr	r3, [pc, #176]	; (8006c1c <_puts_r+0xd0>)
 8006b6a:	429c      	cmp	r4, r3
 8006b6c:	d120      	bne.n	8006bb0 <_puts_r+0x64>
 8006b6e:	686c      	ldr	r4, [r5, #4]
 8006b70:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8006b72:	07db      	lsls	r3, r3, #31
 8006b74:	d405      	bmi.n	8006b82 <_puts_r+0x36>
 8006b76:	89a3      	ldrh	r3, [r4, #12]
 8006b78:	0598      	lsls	r0, r3, #22
 8006b7a:	d402      	bmi.n	8006b82 <_puts_r+0x36>
 8006b7c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8006b7e:	f000 fad3 	bl	8007128 <__retarget_lock_acquire_recursive>
 8006b82:	89a3      	ldrh	r3, [r4, #12]
 8006b84:	0719      	lsls	r1, r3, #28
 8006b86:	d51d      	bpl.n	8006bc4 <_puts_r+0x78>
 8006b88:	6923      	ldr	r3, [r4, #16]
 8006b8a:	b1db      	cbz	r3, 8006bc4 <_puts_r+0x78>
 8006b8c:	3e01      	subs	r6, #1
 8006b8e:	68a3      	ldr	r3, [r4, #8]
 8006b90:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 8006b94:	3b01      	subs	r3, #1
 8006b96:	60a3      	str	r3, [r4, #8]
 8006b98:	bb39      	cbnz	r1, 8006bea <_puts_r+0x9e>
 8006b9a:	2b00      	cmp	r3, #0
 8006b9c:	da38      	bge.n	8006c10 <_puts_r+0xc4>
 8006b9e:	4622      	mov	r2, r4
 8006ba0:	210a      	movs	r1, #10
 8006ba2:	4628      	mov	r0, r5
 8006ba4:	f000 f848 	bl	8006c38 <__swbuf_r>
 8006ba8:	3001      	adds	r0, #1
 8006baa:	d011      	beq.n	8006bd0 <_puts_r+0x84>
 8006bac:	250a      	movs	r5, #10
 8006bae:	e011      	b.n	8006bd4 <_puts_r+0x88>
 8006bb0:	4b1b      	ldr	r3, [pc, #108]	; (8006c20 <_puts_r+0xd4>)
 8006bb2:	429c      	cmp	r4, r3
 8006bb4:	d101      	bne.n	8006bba <_puts_r+0x6e>
 8006bb6:	68ac      	ldr	r4, [r5, #8]
 8006bb8:	e7da      	b.n	8006b70 <_puts_r+0x24>
 8006bba:	4b1a      	ldr	r3, [pc, #104]	; (8006c24 <_puts_r+0xd8>)
 8006bbc:	429c      	cmp	r4, r3
 8006bbe:	bf08      	it	eq
 8006bc0:	68ec      	ldreq	r4, [r5, #12]
 8006bc2:	e7d5      	b.n	8006b70 <_puts_r+0x24>
 8006bc4:	4621      	mov	r1, r4
 8006bc6:	4628      	mov	r0, r5
 8006bc8:	f000 f888 	bl	8006cdc <__swsetup_r>
 8006bcc:	2800      	cmp	r0, #0
 8006bce:	d0dd      	beq.n	8006b8c <_puts_r+0x40>
 8006bd0:	f04f 35ff 	mov.w	r5, #4294967295
 8006bd4:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8006bd6:	07da      	lsls	r2, r3, #31
 8006bd8:	d405      	bmi.n	8006be6 <_puts_r+0x9a>
 8006bda:	89a3      	ldrh	r3, [r4, #12]
 8006bdc:	059b      	lsls	r3, r3, #22
 8006bde:	d402      	bmi.n	8006be6 <_puts_r+0x9a>
 8006be0:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8006be2:	f000 faa2 	bl	800712a <__retarget_lock_release_recursive>
 8006be6:	4628      	mov	r0, r5
 8006be8:	bd70      	pop	{r4, r5, r6, pc}
 8006bea:	2b00      	cmp	r3, #0
 8006bec:	da04      	bge.n	8006bf8 <_puts_r+0xac>
 8006bee:	69a2      	ldr	r2, [r4, #24]
 8006bf0:	429a      	cmp	r2, r3
 8006bf2:	dc06      	bgt.n	8006c02 <_puts_r+0xb6>
 8006bf4:	290a      	cmp	r1, #10
 8006bf6:	d004      	beq.n	8006c02 <_puts_r+0xb6>
 8006bf8:	6823      	ldr	r3, [r4, #0]
 8006bfa:	1c5a      	adds	r2, r3, #1
 8006bfc:	6022      	str	r2, [r4, #0]
 8006bfe:	7019      	strb	r1, [r3, #0]
 8006c00:	e7c5      	b.n	8006b8e <_puts_r+0x42>
 8006c02:	4622      	mov	r2, r4
 8006c04:	4628      	mov	r0, r5
 8006c06:	f000 f817 	bl	8006c38 <__swbuf_r>
 8006c0a:	3001      	adds	r0, #1
 8006c0c:	d1bf      	bne.n	8006b8e <_puts_r+0x42>
 8006c0e:	e7df      	b.n	8006bd0 <_puts_r+0x84>
 8006c10:	6823      	ldr	r3, [r4, #0]
 8006c12:	250a      	movs	r5, #10
 8006c14:	1c5a      	adds	r2, r3, #1
 8006c16:	6022      	str	r2, [r4, #0]
 8006c18:	701d      	strb	r5, [r3, #0]
 8006c1a:	e7db      	b.n	8006bd4 <_puts_r+0x88>
 8006c1c:	08007c6c 	.word	0x08007c6c
 8006c20:	08007c8c 	.word	0x08007c8c
 8006c24:	08007c4c 	.word	0x08007c4c

08006c28 <puts>:
 8006c28:	4b02      	ldr	r3, [pc, #8]	; (8006c34 <puts+0xc>)
 8006c2a:	4601      	mov	r1, r0
 8006c2c:	6818      	ldr	r0, [r3, #0]
 8006c2e:	f7ff bf8d 	b.w	8006b4c <_puts_r>
 8006c32:	bf00      	nop
 8006c34:	20000038 	.word	0x20000038

08006c38 <__swbuf_r>:
 8006c38:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006c3a:	460e      	mov	r6, r1
 8006c3c:	4614      	mov	r4, r2
 8006c3e:	4605      	mov	r5, r0
 8006c40:	b118      	cbz	r0, 8006c4a <__swbuf_r+0x12>
 8006c42:	6983      	ldr	r3, [r0, #24]
 8006c44:	b90b      	cbnz	r3, 8006c4a <__swbuf_r+0x12>
 8006c46:	f000 f9d1 	bl	8006fec <__sinit>
 8006c4a:	4b21      	ldr	r3, [pc, #132]	; (8006cd0 <__swbuf_r+0x98>)
 8006c4c:	429c      	cmp	r4, r3
 8006c4e:	d12b      	bne.n	8006ca8 <__swbuf_r+0x70>
 8006c50:	686c      	ldr	r4, [r5, #4]
 8006c52:	69a3      	ldr	r3, [r4, #24]
 8006c54:	60a3      	str	r3, [r4, #8]
 8006c56:	89a3      	ldrh	r3, [r4, #12]
 8006c58:	071a      	lsls	r2, r3, #28
 8006c5a:	d52f      	bpl.n	8006cbc <__swbuf_r+0x84>
 8006c5c:	6923      	ldr	r3, [r4, #16]
 8006c5e:	b36b      	cbz	r3, 8006cbc <__swbuf_r+0x84>
 8006c60:	6923      	ldr	r3, [r4, #16]
 8006c62:	6820      	ldr	r0, [r4, #0]
 8006c64:	1ac0      	subs	r0, r0, r3
 8006c66:	6963      	ldr	r3, [r4, #20]
 8006c68:	b2f6      	uxtb	r6, r6
 8006c6a:	4283      	cmp	r3, r0
 8006c6c:	4637      	mov	r7, r6
 8006c6e:	dc04      	bgt.n	8006c7a <__swbuf_r+0x42>
 8006c70:	4621      	mov	r1, r4
 8006c72:	4628      	mov	r0, r5
 8006c74:	f000 f926 	bl	8006ec4 <_fflush_r>
 8006c78:	bb30      	cbnz	r0, 8006cc8 <__swbuf_r+0x90>
 8006c7a:	68a3      	ldr	r3, [r4, #8]
 8006c7c:	3b01      	subs	r3, #1
 8006c7e:	60a3      	str	r3, [r4, #8]
 8006c80:	6823      	ldr	r3, [r4, #0]
 8006c82:	1c5a      	adds	r2, r3, #1
 8006c84:	6022      	str	r2, [r4, #0]
 8006c86:	701e      	strb	r6, [r3, #0]
 8006c88:	6963      	ldr	r3, [r4, #20]
 8006c8a:	3001      	adds	r0, #1
 8006c8c:	4283      	cmp	r3, r0
 8006c8e:	d004      	beq.n	8006c9a <__swbuf_r+0x62>
 8006c90:	89a3      	ldrh	r3, [r4, #12]
 8006c92:	07db      	lsls	r3, r3, #31
 8006c94:	d506      	bpl.n	8006ca4 <__swbuf_r+0x6c>
 8006c96:	2e0a      	cmp	r6, #10
 8006c98:	d104      	bne.n	8006ca4 <__swbuf_r+0x6c>
 8006c9a:	4621      	mov	r1, r4
 8006c9c:	4628      	mov	r0, r5
 8006c9e:	f000 f911 	bl	8006ec4 <_fflush_r>
 8006ca2:	b988      	cbnz	r0, 8006cc8 <__swbuf_r+0x90>
 8006ca4:	4638      	mov	r0, r7
 8006ca6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8006ca8:	4b0a      	ldr	r3, [pc, #40]	; (8006cd4 <__swbuf_r+0x9c>)
 8006caa:	429c      	cmp	r4, r3
 8006cac:	d101      	bne.n	8006cb2 <__swbuf_r+0x7a>
 8006cae:	68ac      	ldr	r4, [r5, #8]
 8006cb0:	e7cf      	b.n	8006c52 <__swbuf_r+0x1a>
 8006cb2:	4b09      	ldr	r3, [pc, #36]	; (8006cd8 <__swbuf_r+0xa0>)
 8006cb4:	429c      	cmp	r4, r3
 8006cb6:	bf08      	it	eq
 8006cb8:	68ec      	ldreq	r4, [r5, #12]
 8006cba:	e7ca      	b.n	8006c52 <__swbuf_r+0x1a>
 8006cbc:	4621      	mov	r1, r4
 8006cbe:	4628      	mov	r0, r5
 8006cc0:	f000 f80c 	bl	8006cdc <__swsetup_r>
 8006cc4:	2800      	cmp	r0, #0
 8006cc6:	d0cb      	beq.n	8006c60 <__swbuf_r+0x28>
 8006cc8:	f04f 37ff 	mov.w	r7, #4294967295
 8006ccc:	e7ea      	b.n	8006ca4 <__swbuf_r+0x6c>
 8006cce:	bf00      	nop
 8006cd0:	08007c6c 	.word	0x08007c6c
 8006cd4:	08007c8c 	.word	0x08007c8c
 8006cd8:	08007c4c 	.word	0x08007c4c

08006cdc <__swsetup_r>:
 8006cdc:	4b32      	ldr	r3, [pc, #200]	; (8006da8 <__swsetup_r+0xcc>)
 8006cde:	b570      	push	{r4, r5, r6, lr}
 8006ce0:	681d      	ldr	r5, [r3, #0]
 8006ce2:	4606      	mov	r6, r0
 8006ce4:	460c      	mov	r4, r1
 8006ce6:	b125      	cbz	r5, 8006cf2 <__swsetup_r+0x16>
 8006ce8:	69ab      	ldr	r3, [r5, #24]
 8006cea:	b913      	cbnz	r3, 8006cf2 <__swsetup_r+0x16>
 8006cec:	4628      	mov	r0, r5
 8006cee:	f000 f97d 	bl	8006fec <__sinit>
 8006cf2:	4b2e      	ldr	r3, [pc, #184]	; (8006dac <__swsetup_r+0xd0>)
 8006cf4:	429c      	cmp	r4, r3
 8006cf6:	d10f      	bne.n	8006d18 <__swsetup_r+0x3c>
 8006cf8:	686c      	ldr	r4, [r5, #4]
 8006cfa:	89a3      	ldrh	r3, [r4, #12]
 8006cfc:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8006d00:	0719      	lsls	r1, r3, #28
 8006d02:	d42c      	bmi.n	8006d5e <__swsetup_r+0x82>
 8006d04:	06dd      	lsls	r5, r3, #27
 8006d06:	d411      	bmi.n	8006d2c <__swsetup_r+0x50>
 8006d08:	2309      	movs	r3, #9
 8006d0a:	6033      	str	r3, [r6, #0]
 8006d0c:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8006d10:	81a3      	strh	r3, [r4, #12]
 8006d12:	f04f 30ff 	mov.w	r0, #4294967295
 8006d16:	e03e      	b.n	8006d96 <__swsetup_r+0xba>
 8006d18:	4b25      	ldr	r3, [pc, #148]	; (8006db0 <__swsetup_r+0xd4>)
 8006d1a:	429c      	cmp	r4, r3
 8006d1c:	d101      	bne.n	8006d22 <__swsetup_r+0x46>
 8006d1e:	68ac      	ldr	r4, [r5, #8]
 8006d20:	e7eb      	b.n	8006cfa <__swsetup_r+0x1e>
 8006d22:	4b24      	ldr	r3, [pc, #144]	; (8006db4 <__swsetup_r+0xd8>)
 8006d24:	429c      	cmp	r4, r3
 8006d26:	bf08      	it	eq
 8006d28:	68ec      	ldreq	r4, [r5, #12]
 8006d2a:	e7e6      	b.n	8006cfa <__swsetup_r+0x1e>
 8006d2c:	0758      	lsls	r0, r3, #29
 8006d2e:	d512      	bpl.n	8006d56 <__swsetup_r+0x7a>
 8006d30:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8006d32:	b141      	cbz	r1, 8006d46 <__swsetup_r+0x6a>
 8006d34:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8006d38:	4299      	cmp	r1, r3
 8006d3a:	d002      	beq.n	8006d42 <__swsetup_r+0x66>
 8006d3c:	4630      	mov	r0, r6
 8006d3e:	f000 fa59 	bl	80071f4 <_free_r>
 8006d42:	2300      	movs	r3, #0
 8006d44:	6363      	str	r3, [r4, #52]	; 0x34
 8006d46:	89a3      	ldrh	r3, [r4, #12]
 8006d48:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8006d4c:	81a3      	strh	r3, [r4, #12]
 8006d4e:	2300      	movs	r3, #0
 8006d50:	6063      	str	r3, [r4, #4]
 8006d52:	6923      	ldr	r3, [r4, #16]
 8006d54:	6023      	str	r3, [r4, #0]
 8006d56:	89a3      	ldrh	r3, [r4, #12]
 8006d58:	f043 0308 	orr.w	r3, r3, #8
 8006d5c:	81a3      	strh	r3, [r4, #12]
 8006d5e:	6923      	ldr	r3, [r4, #16]
 8006d60:	b94b      	cbnz	r3, 8006d76 <__swsetup_r+0x9a>
 8006d62:	89a3      	ldrh	r3, [r4, #12]
 8006d64:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8006d68:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8006d6c:	d003      	beq.n	8006d76 <__swsetup_r+0x9a>
 8006d6e:	4621      	mov	r1, r4
 8006d70:	4630      	mov	r0, r6
 8006d72:	f000 f9ff 	bl	8007174 <__smakebuf_r>
 8006d76:	89a0      	ldrh	r0, [r4, #12]
 8006d78:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8006d7c:	f010 0301 	ands.w	r3, r0, #1
 8006d80:	d00a      	beq.n	8006d98 <__swsetup_r+0xbc>
 8006d82:	2300      	movs	r3, #0
 8006d84:	60a3      	str	r3, [r4, #8]
 8006d86:	6963      	ldr	r3, [r4, #20]
 8006d88:	425b      	negs	r3, r3
 8006d8a:	61a3      	str	r3, [r4, #24]
 8006d8c:	6923      	ldr	r3, [r4, #16]
 8006d8e:	b943      	cbnz	r3, 8006da2 <__swsetup_r+0xc6>
 8006d90:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8006d94:	d1ba      	bne.n	8006d0c <__swsetup_r+0x30>
 8006d96:	bd70      	pop	{r4, r5, r6, pc}
 8006d98:	0781      	lsls	r1, r0, #30
 8006d9a:	bf58      	it	pl
 8006d9c:	6963      	ldrpl	r3, [r4, #20]
 8006d9e:	60a3      	str	r3, [r4, #8]
 8006da0:	e7f4      	b.n	8006d8c <__swsetup_r+0xb0>
 8006da2:	2000      	movs	r0, #0
 8006da4:	e7f7      	b.n	8006d96 <__swsetup_r+0xba>
 8006da6:	bf00      	nop
 8006da8:	20000038 	.word	0x20000038
 8006dac:	08007c6c 	.word	0x08007c6c
 8006db0:	08007c8c 	.word	0x08007c8c
 8006db4:	08007c4c 	.word	0x08007c4c

08006db8 <__sflush_r>:
 8006db8:	898a      	ldrh	r2, [r1, #12]
 8006dba:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006dbe:	4605      	mov	r5, r0
 8006dc0:	0710      	lsls	r0, r2, #28
 8006dc2:	460c      	mov	r4, r1
 8006dc4:	d458      	bmi.n	8006e78 <__sflush_r+0xc0>
 8006dc6:	684b      	ldr	r3, [r1, #4]
 8006dc8:	2b00      	cmp	r3, #0
 8006dca:	dc05      	bgt.n	8006dd8 <__sflush_r+0x20>
 8006dcc:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8006dce:	2b00      	cmp	r3, #0
 8006dd0:	dc02      	bgt.n	8006dd8 <__sflush_r+0x20>
 8006dd2:	2000      	movs	r0, #0
 8006dd4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8006dd8:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8006dda:	2e00      	cmp	r6, #0
 8006ddc:	d0f9      	beq.n	8006dd2 <__sflush_r+0x1a>
 8006dde:	2300      	movs	r3, #0
 8006de0:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8006de4:	682f      	ldr	r7, [r5, #0]
 8006de6:	602b      	str	r3, [r5, #0]
 8006de8:	d032      	beq.n	8006e50 <__sflush_r+0x98>
 8006dea:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8006dec:	89a3      	ldrh	r3, [r4, #12]
 8006dee:	075a      	lsls	r2, r3, #29
 8006df0:	d505      	bpl.n	8006dfe <__sflush_r+0x46>
 8006df2:	6863      	ldr	r3, [r4, #4]
 8006df4:	1ac0      	subs	r0, r0, r3
 8006df6:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8006df8:	b10b      	cbz	r3, 8006dfe <__sflush_r+0x46>
 8006dfa:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8006dfc:	1ac0      	subs	r0, r0, r3
 8006dfe:	2300      	movs	r3, #0
 8006e00:	4602      	mov	r2, r0
 8006e02:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8006e04:	6a21      	ldr	r1, [r4, #32]
 8006e06:	4628      	mov	r0, r5
 8006e08:	47b0      	blx	r6
 8006e0a:	1c43      	adds	r3, r0, #1
 8006e0c:	89a3      	ldrh	r3, [r4, #12]
 8006e0e:	d106      	bne.n	8006e1e <__sflush_r+0x66>
 8006e10:	6829      	ldr	r1, [r5, #0]
 8006e12:	291d      	cmp	r1, #29
 8006e14:	d82c      	bhi.n	8006e70 <__sflush_r+0xb8>
 8006e16:	4a2a      	ldr	r2, [pc, #168]	; (8006ec0 <__sflush_r+0x108>)
 8006e18:	40ca      	lsrs	r2, r1
 8006e1a:	07d6      	lsls	r6, r2, #31
 8006e1c:	d528      	bpl.n	8006e70 <__sflush_r+0xb8>
 8006e1e:	2200      	movs	r2, #0
 8006e20:	6062      	str	r2, [r4, #4]
 8006e22:	04d9      	lsls	r1, r3, #19
 8006e24:	6922      	ldr	r2, [r4, #16]
 8006e26:	6022      	str	r2, [r4, #0]
 8006e28:	d504      	bpl.n	8006e34 <__sflush_r+0x7c>
 8006e2a:	1c42      	adds	r2, r0, #1
 8006e2c:	d101      	bne.n	8006e32 <__sflush_r+0x7a>
 8006e2e:	682b      	ldr	r3, [r5, #0]
 8006e30:	b903      	cbnz	r3, 8006e34 <__sflush_r+0x7c>
 8006e32:	6560      	str	r0, [r4, #84]	; 0x54
 8006e34:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8006e36:	602f      	str	r7, [r5, #0]
 8006e38:	2900      	cmp	r1, #0
 8006e3a:	d0ca      	beq.n	8006dd2 <__sflush_r+0x1a>
 8006e3c:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8006e40:	4299      	cmp	r1, r3
 8006e42:	d002      	beq.n	8006e4a <__sflush_r+0x92>
 8006e44:	4628      	mov	r0, r5
 8006e46:	f000 f9d5 	bl	80071f4 <_free_r>
 8006e4a:	2000      	movs	r0, #0
 8006e4c:	6360      	str	r0, [r4, #52]	; 0x34
 8006e4e:	e7c1      	b.n	8006dd4 <__sflush_r+0x1c>
 8006e50:	6a21      	ldr	r1, [r4, #32]
 8006e52:	2301      	movs	r3, #1
 8006e54:	4628      	mov	r0, r5
 8006e56:	47b0      	blx	r6
 8006e58:	1c41      	adds	r1, r0, #1
 8006e5a:	d1c7      	bne.n	8006dec <__sflush_r+0x34>
 8006e5c:	682b      	ldr	r3, [r5, #0]
 8006e5e:	2b00      	cmp	r3, #0
 8006e60:	d0c4      	beq.n	8006dec <__sflush_r+0x34>
 8006e62:	2b1d      	cmp	r3, #29
 8006e64:	d001      	beq.n	8006e6a <__sflush_r+0xb2>
 8006e66:	2b16      	cmp	r3, #22
 8006e68:	d101      	bne.n	8006e6e <__sflush_r+0xb6>
 8006e6a:	602f      	str	r7, [r5, #0]
 8006e6c:	e7b1      	b.n	8006dd2 <__sflush_r+0x1a>
 8006e6e:	89a3      	ldrh	r3, [r4, #12]
 8006e70:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8006e74:	81a3      	strh	r3, [r4, #12]
 8006e76:	e7ad      	b.n	8006dd4 <__sflush_r+0x1c>
 8006e78:	690f      	ldr	r7, [r1, #16]
 8006e7a:	2f00      	cmp	r7, #0
 8006e7c:	d0a9      	beq.n	8006dd2 <__sflush_r+0x1a>
 8006e7e:	0793      	lsls	r3, r2, #30
 8006e80:	680e      	ldr	r6, [r1, #0]
 8006e82:	bf08      	it	eq
 8006e84:	694b      	ldreq	r3, [r1, #20]
 8006e86:	600f      	str	r7, [r1, #0]
 8006e88:	bf18      	it	ne
 8006e8a:	2300      	movne	r3, #0
 8006e8c:	eba6 0807 	sub.w	r8, r6, r7
 8006e90:	608b      	str	r3, [r1, #8]
 8006e92:	f1b8 0f00 	cmp.w	r8, #0
 8006e96:	dd9c      	ble.n	8006dd2 <__sflush_r+0x1a>
 8006e98:	6a21      	ldr	r1, [r4, #32]
 8006e9a:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8006e9c:	4643      	mov	r3, r8
 8006e9e:	463a      	mov	r2, r7
 8006ea0:	4628      	mov	r0, r5
 8006ea2:	47b0      	blx	r6
 8006ea4:	2800      	cmp	r0, #0
 8006ea6:	dc06      	bgt.n	8006eb6 <__sflush_r+0xfe>
 8006ea8:	89a3      	ldrh	r3, [r4, #12]
 8006eaa:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8006eae:	81a3      	strh	r3, [r4, #12]
 8006eb0:	f04f 30ff 	mov.w	r0, #4294967295
 8006eb4:	e78e      	b.n	8006dd4 <__sflush_r+0x1c>
 8006eb6:	4407      	add	r7, r0
 8006eb8:	eba8 0800 	sub.w	r8, r8, r0
 8006ebc:	e7e9      	b.n	8006e92 <__sflush_r+0xda>
 8006ebe:	bf00      	nop
 8006ec0:	20400001 	.word	0x20400001

08006ec4 <_fflush_r>:
 8006ec4:	b538      	push	{r3, r4, r5, lr}
 8006ec6:	690b      	ldr	r3, [r1, #16]
 8006ec8:	4605      	mov	r5, r0
 8006eca:	460c      	mov	r4, r1
 8006ecc:	b913      	cbnz	r3, 8006ed4 <_fflush_r+0x10>
 8006ece:	2500      	movs	r5, #0
 8006ed0:	4628      	mov	r0, r5
 8006ed2:	bd38      	pop	{r3, r4, r5, pc}
 8006ed4:	b118      	cbz	r0, 8006ede <_fflush_r+0x1a>
 8006ed6:	6983      	ldr	r3, [r0, #24]
 8006ed8:	b90b      	cbnz	r3, 8006ede <_fflush_r+0x1a>
 8006eda:	f000 f887 	bl	8006fec <__sinit>
 8006ede:	4b14      	ldr	r3, [pc, #80]	; (8006f30 <_fflush_r+0x6c>)
 8006ee0:	429c      	cmp	r4, r3
 8006ee2:	d11b      	bne.n	8006f1c <_fflush_r+0x58>
 8006ee4:	686c      	ldr	r4, [r5, #4]
 8006ee6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8006eea:	2b00      	cmp	r3, #0
 8006eec:	d0ef      	beq.n	8006ece <_fflush_r+0xa>
 8006eee:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8006ef0:	07d0      	lsls	r0, r2, #31
 8006ef2:	d404      	bmi.n	8006efe <_fflush_r+0x3a>
 8006ef4:	0599      	lsls	r1, r3, #22
 8006ef6:	d402      	bmi.n	8006efe <_fflush_r+0x3a>
 8006ef8:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8006efa:	f000 f915 	bl	8007128 <__retarget_lock_acquire_recursive>
 8006efe:	4628      	mov	r0, r5
 8006f00:	4621      	mov	r1, r4
 8006f02:	f7ff ff59 	bl	8006db8 <__sflush_r>
 8006f06:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8006f08:	07da      	lsls	r2, r3, #31
 8006f0a:	4605      	mov	r5, r0
 8006f0c:	d4e0      	bmi.n	8006ed0 <_fflush_r+0xc>
 8006f0e:	89a3      	ldrh	r3, [r4, #12]
 8006f10:	059b      	lsls	r3, r3, #22
 8006f12:	d4dd      	bmi.n	8006ed0 <_fflush_r+0xc>
 8006f14:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8006f16:	f000 f908 	bl	800712a <__retarget_lock_release_recursive>
 8006f1a:	e7d9      	b.n	8006ed0 <_fflush_r+0xc>
 8006f1c:	4b05      	ldr	r3, [pc, #20]	; (8006f34 <_fflush_r+0x70>)
 8006f1e:	429c      	cmp	r4, r3
 8006f20:	d101      	bne.n	8006f26 <_fflush_r+0x62>
 8006f22:	68ac      	ldr	r4, [r5, #8]
 8006f24:	e7df      	b.n	8006ee6 <_fflush_r+0x22>
 8006f26:	4b04      	ldr	r3, [pc, #16]	; (8006f38 <_fflush_r+0x74>)
 8006f28:	429c      	cmp	r4, r3
 8006f2a:	bf08      	it	eq
 8006f2c:	68ec      	ldreq	r4, [r5, #12]
 8006f2e:	e7da      	b.n	8006ee6 <_fflush_r+0x22>
 8006f30:	08007c6c 	.word	0x08007c6c
 8006f34:	08007c8c 	.word	0x08007c8c
 8006f38:	08007c4c 	.word	0x08007c4c

08006f3c <std>:
 8006f3c:	2300      	movs	r3, #0
 8006f3e:	b510      	push	{r4, lr}
 8006f40:	4604      	mov	r4, r0
 8006f42:	e9c0 3300 	strd	r3, r3, [r0]
 8006f46:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8006f4a:	6083      	str	r3, [r0, #8]
 8006f4c:	8181      	strh	r1, [r0, #12]
 8006f4e:	6643      	str	r3, [r0, #100]	; 0x64
 8006f50:	81c2      	strh	r2, [r0, #14]
 8006f52:	6183      	str	r3, [r0, #24]
 8006f54:	4619      	mov	r1, r3
 8006f56:	2208      	movs	r2, #8
 8006f58:	305c      	adds	r0, #92	; 0x5c
 8006f5a:	f7ff fdd7 	bl	8006b0c <memset>
 8006f5e:	4b05      	ldr	r3, [pc, #20]	; (8006f74 <std+0x38>)
 8006f60:	6263      	str	r3, [r4, #36]	; 0x24
 8006f62:	4b05      	ldr	r3, [pc, #20]	; (8006f78 <std+0x3c>)
 8006f64:	62a3      	str	r3, [r4, #40]	; 0x28
 8006f66:	4b05      	ldr	r3, [pc, #20]	; (8006f7c <std+0x40>)
 8006f68:	62e3      	str	r3, [r4, #44]	; 0x2c
 8006f6a:	4b05      	ldr	r3, [pc, #20]	; (8006f80 <std+0x44>)
 8006f6c:	6224      	str	r4, [r4, #32]
 8006f6e:	6323      	str	r3, [r4, #48]	; 0x30
 8006f70:	bd10      	pop	{r4, pc}
 8006f72:	bf00      	nop
 8006f74:	08007945 	.word	0x08007945
 8006f78:	08007967 	.word	0x08007967
 8006f7c:	0800799f 	.word	0x0800799f
 8006f80:	080079c3 	.word	0x080079c3

08006f84 <_cleanup_r>:
 8006f84:	4901      	ldr	r1, [pc, #4]	; (8006f8c <_cleanup_r+0x8>)
 8006f86:	f000 b8af 	b.w	80070e8 <_fwalk_reent>
 8006f8a:	bf00      	nop
 8006f8c:	08006ec5 	.word	0x08006ec5

08006f90 <__sfmoreglue>:
 8006f90:	b570      	push	{r4, r5, r6, lr}
 8006f92:	1e4a      	subs	r2, r1, #1
 8006f94:	2568      	movs	r5, #104	; 0x68
 8006f96:	4355      	muls	r5, r2
 8006f98:	460e      	mov	r6, r1
 8006f9a:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8006f9e:	f000 f979 	bl	8007294 <_malloc_r>
 8006fa2:	4604      	mov	r4, r0
 8006fa4:	b140      	cbz	r0, 8006fb8 <__sfmoreglue+0x28>
 8006fa6:	2100      	movs	r1, #0
 8006fa8:	e9c0 1600 	strd	r1, r6, [r0]
 8006fac:	300c      	adds	r0, #12
 8006fae:	60a0      	str	r0, [r4, #8]
 8006fb0:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8006fb4:	f7ff fdaa 	bl	8006b0c <memset>
 8006fb8:	4620      	mov	r0, r4
 8006fba:	bd70      	pop	{r4, r5, r6, pc}

08006fbc <__sfp_lock_acquire>:
 8006fbc:	4801      	ldr	r0, [pc, #4]	; (8006fc4 <__sfp_lock_acquire+0x8>)
 8006fbe:	f000 b8b3 	b.w	8007128 <__retarget_lock_acquire_recursive>
 8006fc2:	bf00      	nop
 8006fc4:	20002c1c 	.word	0x20002c1c

08006fc8 <__sfp_lock_release>:
 8006fc8:	4801      	ldr	r0, [pc, #4]	; (8006fd0 <__sfp_lock_release+0x8>)
 8006fca:	f000 b8ae 	b.w	800712a <__retarget_lock_release_recursive>
 8006fce:	bf00      	nop
 8006fd0:	20002c1c 	.word	0x20002c1c

08006fd4 <__sinit_lock_acquire>:
 8006fd4:	4801      	ldr	r0, [pc, #4]	; (8006fdc <__sinit_lock_acquire+0x8>)
 8006fd6:	f000 b8a7 	b.w	8007128 <__retarget_lock_acquire_recursive>
 8006fda:	bf00      	nop
 8006fdc:	20002c17 	.word	0x20002c17

08006fe0 <__sinit_lock_release>:
 8006fe0:	4801      	ldr	r0, [pc, #4]	; (8006fe8 <__sinit_lock_release+0x8>)
 8006fe2:	f000 b8a2 	b.w	800712a <__retarget_lock_release_recursive>
 8006fe6:	bf00      	nop
 8006fe8:	20002c17 	.word	0x20002c17

08006fec <__sinit>:
 8006fec:	b510      	push	{r4, lr}
 8006fee:	4604      	mov	r4, r0
 8006ff0:	f7ff fff0 	bl	8006fd4 <__sinit_lock_acquire>
 8006ff4:	69a3      	ldr	r3, [r4, #24]
 8006ff6:	b11b      	cbz	r3, 8007000 <__sinit+0x14>
 8006ff8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8006ffc:	f7ff bff0 	b.w	8006fe0 <__sinit_lock_release>
 8007000:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8007004:	6523      	str	r3, [r4, #80]	; 0x50
 8007006:	4b13      	ldr	r3, [pc, #76]	; (8007054 <__sinit+0x68>)
 8007008:	4a13      	ldr	r2, [pc, #76]	; (8007058 <__sinit+0x6c>)
 800700a:	681b      	ldr	r3, [r3, #0]
 800700c:	62a2      	str	r2, [r4, #40]	; 0x28
 800700e:	42a3      	cmp	r3, r4
 8007010:	bf04      	itt	eq
 8007012:	2301      	moveq	r3, #1
 8007014:	61a3      	streq	r3, [r4, #24]
 8007016:	4620      	mov	r0, r4
 8007018:	f000 f820 	bl	800705c <__sfp>
 800701c:	6060      	str	r0, [r4, #4]
 800701e:	4620      	mov	r0, r4
 8007020:	f000 f81c 	bl	800705c <__sfp>
 8007024:	60a0      	str	r0, [r4, #8]
 8007026:	4620      	mov	r0, r4
 8007028:	f000 f818 	bl	800705c <__sfp>
 800702c:	2200      	movs	r2, #0
 800702e:	60e0      	str	r0, [r4, #12]
 8007030:	2104      	movs	r1, #4
 8007032:	6860      	ldr	r0, [r4, #4]
 8007034:	f7ff ff82 	bl	8006f3c <std>
 8007038:	68a0      	ldr	r0, [r4, #8]
 800703a:	2201      	movs	r2, #1
 800703c:	2109      	movs	r1, #9
 800703e:	f7ff ff7d 	bl	8006f3c <std>
 8007042:	68e0      	ldr	r0, [r4, #12]
 8007044:	2202      	movs	r2, #2
 8007046:	2112      	movs	r1, #18
 8007048:	f7ff ff78 	bl	8006f3c <std>
 800704c:	2301      	movs	r3, #1
 800704e:	61a3      	str	r3, [r4, #24]
 8007050:	e7d2      	b.n	8006ff8 <__sinit+0xc>
 8007052:	bf00      	nop
 8007054:	08007c48 	.word	0x08007c48
 8007058:	08006f85 	.word	0x08006f85

0800705c <__sfp>:
 800705c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800705e:	4607      	mov	r7, r0
 8007060:	f7ff ffac 	bl	8006fbc <__sfp_lock_acquire>
 8007064:	4b1e      	ldr	r3, [pc, #120]	; (80070e0 <__sfp+0x84>)
 8007066:	681e      	ldr	r6, [r3, #0]
 8007068:	69b3      	ldr	r3, [r6, #24]
 800706a:	b913      	cbnz	r3, 8007072 <__sfp+0x16>
 800706c:	4630      	mov	r0, r6
 800706e:	f7ff ffbd 	bl	8006fec <__sinit>
 8007072:	3648      	adds	r6, #72	; 0x48
 8007074:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8007078:	3b01      	subs	r3, #1
 800707a:	d503      	bpl.n	8007084 <__sfp+0x28>
 800707c:	6833      	ldr	r3, [r6, #0]
 800707e:	b30b      	cbz	r3, 80070c4 <__sfp+0x68>
 8007080:	6836      	ldr	r6, [r6, #0]
 8007082:	e7f7      	b.n	8007074 <__sfp+0x18>
 8007084:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8007088:	b9d5      	cbnz	r5, 80070c0 <__sfp+0x64>
 800708a:	4b16      	ldr	r3, [pc, #88]	; (80070e4 <__sfp+0x88>)
 800708c:	60e3      	str	r3, [r4, #12]
 800708e:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8007092:	6665      	str	r5, [r4, #100]	; 0x64
 8007094:	f000 f847 	bl	8007126 <__retarget_lock_init_recursive>
 8007098:	f7ff ff96 	bl	8006fc8 <__sfp_lock_release>
 800709c:	e9c4 5501 	strd	r5, r5, [r4, #4]
 80070a0:	e9c4 5504 	strd	r5, r5, [r4, #16]
 80070a4:	6025      	str	r5, [r4, #0]
 80070a6:	61a5      	str	r5, [r4, #24]
 80070a8:	2208      	movs	r2, #8
 80070aa:	4629      	mov	r1, r5
 80070ac:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 80070b0:	f7ff fd2c 	bl	8006b0c <memset>
 80070b4:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 80070b8:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 80070bc:	4620      	mov	r0, r4
 80070be:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80070c0:	3468      	adds	r4, #104	; 0x68
 80070c2:	e7d9      	b.n	8007078 <__sfp+0x1c>
 80070c4:	2104      	movs	r1, #4
 80070c6:	4638      	mov	r0, r7
 80070c8:	f7ff ff62 	bl	8006f90 <__sfmoreglue>
 80070cc:	4604      	mov	r4, r0
 80070ce:	6030      	str	r0, [r6, #0]
 80070d0:	2800      	cmp	r0, #0
 80070d2:	d1d5      	bne.n	8007080 <__sfp+0x24>
 80070d4:	f7ff ff78 	bl	8006fc8 <__sfp_lock_release>
 80070d8:	230c      	movs	r3, #12
 80070da:	603b      	str	r3, [r7, #0]
 80070dc:	e7ee      	b.n	80070bc <__sfp+0x60>
 80070de:	bf00      	nop
 80070e0:	08007c48 	.word	0x08007c48
 80070e4:	ffff0001 	.word	0xffff0001

080070e8 <_fwalk_reent>:
 80070e8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80070ec:	4606      	mov	r6, r0
 80070ee:	4688      	mov	r8, r1
 80070f0:	f100 0448 	add.w	r4, r0, #72	; 0x48
 80070f4:	2700      	movs	r7, #0
 80070f6:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 80070fa:	f1b9 0901 	subs.w	r9, r9, #1
 80070fe:	d505      	bpl.n	800710c <_fwalk_reent+0x24>
 8007100:	6824      	ldr	r4, [r4, #0]
 8007102:	2c00      	cmp	r4, #0
 8007104:	d1f7      	bne.n	80070f6 <_fwalk_reent+0xe>
 8007106:	4638      	mov	r0, r7
 8007108:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800710c:	89ab      	ldrh	r3, [r5, #12]
 800710e:	2b01      	cmp	r3, #1
 8007110:	d907      	bls.n	8007122 <_fwalk_reent+0x3a>
 8007112:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8007116:	3301      	adds	r3, #1
 8007118:	d003      	beq.n	8007122 <_fwalk_reent+0x3a>
 800711a:	4629      	mov	r1, r5
 800711c:	4630      	mov	r0, r6
 800711e:	47c0      	blx	r8
 8007120:	4307      	orrs	r7, r0
 8007122:	3568      	adds	r5, #104	; 0x68
 8007124:	e7e9      	b.n	80070fa <_fwalk_reent+0x12>

08007126 <__retarget_lock_init_recursive>:
 8007126:	4770      	bx	lr

08007128 <__retarget_lock_acquire_recursive>:
 8007128:	4770      	bx	lr

0800712a <__retarget_lock_release_recursive>:
 800712a:	4770      	bx	lr

0800712c <__swhatbuf_r>:
 800712c:	b570      	push	{r4, r5, r6, lr}
 800712e:	460e      	mov	r6, r1
 8007130:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007134:	2900      	cmp	r1, #0
 8007136:	b096      	sub	sp, #88	; 0x58
 8007138:	4614      	mov	r4, r2
 800713a:	461d      	mov	r5, r3
 800713c:	da07      	bge.n	800714e <__swhatbuf_r+0x22>
 800713e:	2300      	movs	r3, #0
 8007140:	602b      	str	r3, [r5, #0]
 8007142:	89b3      	ldrh	r3, [r6, #12]
 8007144:	061a      	lsls	r2, r3, #24
 8007146:	d410      	bmi.n	800716a <__swhatbuf_r+0x3e>
 8007148:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800714c:	e00e      	b.n	800716c <__swhatbuf_r+0x40>
 800714e:	466a      	mov	r2, sp
 8007150:	f000 fc5e 	bl	8007a10 <_fstat_r>
 8007154:	2800      	cmp	r0, #0
 8007156:	dbf2      	blt.n	800713e <__swhatbuf_r+0x12>
 8007158:	9a01      	ldr	r2, [sp, #4]
 800715a:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 800715e:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8007162:	425a      	negs	r2, r3
 8007164:	415a      	adcs	r2, r3
 8007166:	602a      	str	r2, [r5, #0]
 8007168:	e7ee      	b.n	8007148 <__swhatbuf_r+0x1c>
 800716a:	2340      	movs	r3, #64	; 0x40
 800716c:	2000      	movs	r0, #0
 800716e:	6023      	str	r3, [r4, #0]
 8007170:	b016      	add	sp, #88	; 0x58
 8007172:	bd70      	pop	{r4, r5, r6, pc}

08007174 <__smakebuf_r>:
 8007174:	898b      	ldrh	r3, [r1, #12]
 8007176:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8007178:	079d      	lsls	r5, r3, #30
 800717a:	4606      	mov	r6, r0
 800717c:	460c      	mov	r4, r1
 800717e:	d507      	bpl.n	8007190 <__smakebuf_r+0x1c>
 8007180:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8007184:	6023      	str	r3, [r4, #0]
 8007186:	6123      	str	r3, [r4, #16]
 8007188:	2301      	movs	r3, #1
 800718a:	6163      	str	r3, [r4, #20]
 800718c:	b002      	add	sp, #8
 800718e:	bd70      	pop	{r4, r5, r6, pc}
 8007190:	ab01      	add	r3, sp, #4
 8007192:	466a      	mov	r2, sp
 8007194:	f7ff ffca 	bl	800712c <__swhatbuf_r>
 8007198:	9900      	ldr	r1, [sp, #0]
 800719a:	4605      	mov	r5, r0
 800719c:	4630      	mov	r0, r6
 800719e:	f000 f879 	bl	8007294 <_malloc_r>
 80071a2:	b948      	cbnz	r0, 80071b8 <__smakebuf_r+0x44>
 80071a4:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80071a8:	059a      	lsls	r2, r3, #22
 80071aa:	d4ef      	bmi.n	800718c <__smakebuf_r+0x18>
 80071ac:	f023 0303 	bic.w	r3, r3, #3
 80071b0:	f043 0302 	orr.w	r3, r3, #2
 80071b4:	81a3      	strh	r3, [r4, #12]
 80071b6:	e7e3      	b.n	8007180 <__smakebuf_r+0xc>
 80071b8:	4b0d      	ldr	r3, [pc, #52]	; (80071f0 <__smakebuf_r+0x7c>)
 80071ba:	62b3      	str	r3, [r6, #40]	; 0x28
 80071bc:	89a3      	ldrh	r3, [r4, #12]
 80071be:	6020      	str	r0, [r4, #0]
 80071c0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80071c4:	81a3      	strh	r3, [r4, #12]
 80071c6:	9b00      	ldr	r3, [sp, #0]
 80071c8:	6163      	str	r3, [r4, #20]
 80071ca:	9b01      	ldr	r3, [sp, #4]
 80071cc:	6120      	str	r0, [r4, #16]
 80071ce:	b15b      	cbz	r3, 80071e8 <__smakebuf_r+0x74>
 80071d0:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80071d4:	4630      	mov	r0, r6
 80071d6:	f000 fc2d 	bl	8007a34 <_isatty_r>
 80071da:	b128      	cbz	r0, 80071e8 <__smakebuf_r+0x74>
 80071dc:	89a3      	ldrh	r3, [r4, #12]
 80071de:	f023 0303 	bic.w	r3, r3, #3
 80071e2:	f043 0301 	orr.w	r3, r3, #1
 80071e6:	81a3      	strh	r3, [r4, #12]
 80071e8:	89a0      	ldrh	r0, [r4, #12]
 80071ea:	4305      	orrs	r5, r0
 80071ec:	81a5      	strh	r5, [r4, #12]
 80071ee:	e7cd      	b.n	800718c <__smakebuf_r+0x18>
 80071f0:	08006f85 	.word	0x08006f85

080071f4 <_free_r>:
 80071f4:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80071f6:	2900      	cmp	r1, #0
 80071f8:	d048      	beq.n	800728c <_free_r+0x98>
 80071fa:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80071fe:	9001      	str	r0, [sp, #4]
 8007200:	2b00      	cmp	r3, #0
 8007202:	f1a1 0404 	sub.w	r4, r1, #4
 8007206:	bfb8      	it	lt
 8007208:	18e4      	addlt	r4, r4, r3
 800720a:	f000 fc35 	bl	8007a78 <__malloc_lock>
 800720e:	4a20      	ldr	r2, [pc, #128]	; (8007290 <_free_r+0x9c>)
 8007210:	9801      	ldr	r0, [sp, #4]
 8007212:	6813      	ldr	r3, [r2, #0]
 8007214:	4615      	mov	r5, r2
 8007216:	b933      	cbnz	r3, 8007226 <_free_r+0x32>
 8007218:	6063      	str	r3, [r4, #4]
 800721a:	6014      	str	r4, [r2, #0]
 800721c:	b003      	add	sp, #12
 800721e:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8007222:	f000 bc2f 	b.w	8007a84 <__malloc_unlock>
 8007226:	42a3      	cmp	r3, r4
 8007228:	d90b      	bls.n	8007242 <_free_r+0x4e>
 800722a:	6821      	ldr	r1, [r4, #0]
 800722c:	1862      	adds	r2, r4, r1
 800722e:	4293      	cmp	r3, r2
 8007230:	bf04      	itt	eq
 8007232:	681a      	ldreq	r2, [r3, #0]
 8007234:	685b      	ldreq	r3, [r3, #4]
 8007236:	6063      	str	r3, [r4, #4]
 8007238:	bf04      	itt	eq
 800723a:	1852      	addeq	r2, r2, r1
 800723c:	6022      	streq	r2, [r4, #0]
 800723e:	602c      	str	r4, [r5, #0]
 8007240:	e7ec      	b.n	800721c <_free_r+0x28>
 8007242:	461a      	mov	r2, r3
 8007244:	685b      	ldr	r3, [r3, #4]
 8007246:	b10b      	cbz	r3, 800724c <_free_r+0x58>
 8007248:	42a3      	cmp	r3, r4
 800724a:	d9fa      	bls.n	8007242 <_free_r+0x4e>
 800724c:	6811      	ldr	r1, [r2, #0]
 800724e:	1855      	adds	r5, r2, r1
 8007250:	42a5      	cmp	r5, r4
 8007252:	d10b      	bne.n	800726c <_free_r+0x78>
 8007254:	6824      	ldr	r4, [r4, #0]
 8007256:	4421      	add	r1, r4
 8007258:	1854      	adds	r4, r2, r1
 800725a:	42a3      	cmp	r3, r4
 800725c:	6011      	str	r1, [r2, #0]
 800725e:	d1dd      	bne.n	800721c <_free_r+0x28>
 8007260:	681c      	ldr	r4, [r3, #0]
 8007262:	685b      	ldr	r3, [r3, #4]
 8007264:	6053      	str	r3, [r2, #4]
 8007266:	4421      	add	r1, r4
 8007268:	6011      	str	r1, [r2, #0]
 800726a:	e7d7      	b.n	800721c <_free_r+0x28>
 800726c:	d902      	bls.n	8007274 <_free_r+0x80>
 800726e:	230c      	movs	r3, #12
 8007270:	6003      	str	r3, [r0, #0]
 8007272:	e7d3      	b.n	800721c <_free_r+0x28>
 8007274:	6825      	ldr	r5, [r4, #0]
 8007276:	1961      	adds	r1, r4, r5
 8007278:	428b      	cmp	r3, r1
 800727a:	bf04      	itt	eq
 800727c:	6819      	ldreq	r1, [r3, #0]
 800727e:	685b      	ldreq	r3, [r3, #4]
 8007280:	6063      	str	r3, [r4, #4]
 8007282:	bf04      	itt	eq
 8007284:	1949      	addeq	r1, r1, r5
 8007286:	6021      	streq	r1, [r4, #0]
 8007288:	6054      	str	r4, [r2, #4]
 800728a:	e7c7      	b.n	800721c <_free_r+0x28>
 800728c:	b003      	add	sp, #12
 800728e:	bd30      	pop	{r4, r5, pc}
 8007290:	200000c0 	.word	0x200000c0

08007294 <_malloc_r>:
 8007294:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007296:	1ccd      	adds	r5, r1, #3
 8007298:	f025 0503 	bic.w	r5, r5, #3
 800729c:	3508      	adds	r5, #8
 800729e:	2d0c      	cmp	r5, #12
 80072a0:	bf38      	it	cc
 80072a2:	250c      	movcc	r5, #12
 80072a4:	2d00      	cmp	r5, #0
 80072a6:	4606      	mov	r6, r0
 80072a8:	db01      	blt.n	80072ae <_malloc_r+0x1a>
 80072aa:	42a9      	cmp	r1, r5
 80072ac:	d903      	bls.n	80072b6 <_malloc_r+0x22>
 80072ae:	230c      	movs	r3, #12
 80072b0:	6033      	str	r3, [r6, #0]
 80072b2:	2000      	movs	r0, #0
 80072b4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80072b6:	f000 fbdf 	bl	8007a78 <__malloc_lock>
 80072ba:	4921      	ldr	r1, [pc, #132]	; (8007340 <_malloc_r+0xac>)
 80072bc:	680a      	ldr	r2, [r1, #0]
 80072be:	4614      	mov	r4, r2
 80072c0:	b99c      	cbnz	r4, 80072ea <_malloc_r+0x56>
 80072c2:	4f20      	ldr	r7, [pc, #128]	; (8007344 <_malloc_r+0xb0>)
 80072c4:	683b      	ldr	r3, [r7, #0]
 80072c6:	b923      	cbnz	r3, 80072d2 <_malloc_r+0x3e>
 80072c8:	4621      	mov	r1, r4
 80072ca:	4630      	mov	r0, r6
 80072cc:	f000 fb2a 	bl	8007924 <_sbrk_r>
 80072d0:	6038      	str	r0, [r7, #0]
 80072d2:	4629      	mov	r1, r5
 80072d4:	4630      	mov	r0, r6
 80072d6:	f000 fb25 	bl	8007924 <_sbrk_r>
 80072da:	1c43      	adds	r3, r0, #1
 80072dc:	d123      	bne.n	8007326 <_malloc_r+0x92>
 80072de:	230c      	movs	r3, #12
 80072e0:	6033      	str	r3, [r6, #0]
 80072e2:	4630      	mov	r0, r6
 80072e4:	f000 fbce 	bl	8007a84 <__malloc_unlock>
 80072e8:	e7e3      	b.n	80072b2 <_malloc_r+0x1e>
 80072ea:	6823      	ldr	r3, [r4, #0]
 80072ec:	1b5b      	subs	r3, r3, r5
 80072ee:	d417      	bmi.n	8007320 <_malloc_r+0x8c>
 80072f0:	2b0b      	cmp	r3, #11
 80072f2:	d903      	bls.n	80072fc <_malloc_r+0x68>
 80072f4:	6023      	str	r3, [r4, #0]
 80072f6:	441c      	add	r4, r3
 80072f8:	6025      	str	r5, [r4, #0]
 80072fa:	e004      	b.n	8007306 <_malloc_r+0x72>
 80072fc:	6863      	ldr	r3, [r4, #4]
 80072fe:	42a2      	cmp	r2, r4
 8007300:	bf0c      	ite	eq
 8007302:	600b      	streq	r3, [r1, #0]
 8007304:	6053      	strne	r3, [r2, #4]
 8007306:	4630      	mov	r0, r6
 8007308:	f000 fbbc 	bl	8007a84 <__malloc_unlock>
 800730c:	f104 000b 	add.w	r0, r4, #11
 8007310:	1d23      	adds	r3, r4, #4
 8007312:	f020 0007 	bic.w	r0, r0, #7
 8007316:	1ac2      	subs	r2, r0, r3
 8007318:	d0cc      	beq.n	80072b4 <_malloc_r+0x20>
 800731a:	1a1b      	subs	r3, r3, r0
 800731c:	50a3      	str	r3, [r4, r2]
 800731e:	e7c9      	b.n	80072b4 <_malloc_r+0x20>
 8007320:	4622      	mov	r2, r4
 8007322:	6864      	ldr	r4, [r4, #4]
 8007324:	e7cc      	b.n	80072c0 <_malloc_r+0x2c>
 8007326:	1cc4      	adds	r4, r0, #3
 8007328:	f024 0403 	bic.w	r4, r4, #3
 800732c:	42a0      	cmp	r0, r4
 800732e:	d0e3      	beq.n	80072f8 <_malloc_r+0x64>
 8007330:	1a21      	subs	r1, r4, r0
 8007332:	4630      	mov	r0, r6
 8007334:	f000 faf6 	bl	8007924 <_sbrk_r>
 8007338:	3001      	adds	r0, #1
 800733a:	d1dd      	bne.n	80072f8 <_malloc_r+0x64>
 800733c:	e7cf      	b.n	80072de <_malloc_r+0x4a>
 800733e:	bf00      	nop
 8007340:	200000c0 	.word	0x200000c0
 8007344:	200000c4 	.word	0x200000c4

08007348 <__sfputc_r>:
 8007348:	6893      	ldr	r3, [r2, #8]
 800734a:	3b01      	subs	r3, #1
 800734c:	2b00      	cmp	r3, #0
 800734e:	b410      	push	{r4}
 8007350:	6093      	str	r3, [r2, #8]
 8007352:	da08      	bge.n	8007366 <__sfputc_r+0x1e>
 8007354:	6994      	ldr	r4, [r2, #24]
 8007356:	42a3      	cmp	r3, r4
 8007358:	db01      	blt.n	800735e <__sfputc_r+0x16>
 800735a:	290a      	cmp	r1, #10
 800735c:	d103      	bne.n	8007366 <__sfputc_r+0x1e>
 800735e:	f85d 4b04 	ldr.w	r4, [sp], #4
 8007362:	f7ff bc69 	b.w	8006c38 <__swbuf_r>
 8007366:	6813      	ldr	r3, [r2, #0]
 8007368:	1c58      	adds	r0, r3, #1
 800736a:	6010      	str	r0, [r2, #0]
 800736c:	7019      	strb	r1, [r3, #0]
 800736e:	4608      	mov	r0, r1
 8007370:	f85d 4b04 	ldr.w	r4, [sp], #4
 8007374:	4770      	bx	lr

08007376 <__sfputs_r>:
 8007376:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007378:	4606      	mov	r6, r0
 800737a:	460f      	mov	r7, r1
 800737c:	4614      	mov	r4, r2
 800737e:	18d5      	adds	r5, r2, r3
 8007380:	42ac      	cmp	r4, r5
 8007382:	d101      	bne.n	8007388 <__sfputs_r+0x12>
 8007384:	2000      	movs	r0, #0
 8007386:	e007      	b.n	8007398 <__sfputs_r+0x22>
 8007388:	f814 1b01 	ldrb.w	r1, [r4], #1
 800738c:	463a      	mov	r2, r7
 800738e:	4630      	mov	r0, r6
 8007390:	f7ff ffda 	bl	8007348 <__sfputc_r>
 8007394:	1c43      	adds	r3, r0, #1
 8007396:	d1f3      	bne.n	8007380 <__sfputs_r+0xa>
 8007398:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800739c <_vfiprintf_r>:
 800739c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80073a0:	460d      	mov	r5, r1
 80073a2:	b09d      	sub	sp, #116	; 0x74
 80073a4:	4614      	mov	r4, r2
 80073a6:	4698      	mov	r8, r3
 80073a8:	4606      	mov	r6, r0
 80073aa:	b118      	cbz	r0, 80073b4 <_vfiprintf_r+0x18>
 80073ac:	6983      	ldr	r3, [r0, #24]
 80073ae:	b90b      	cbnz	r3, 80073b4 <_vfiprintf_r+0x18>
 80073b0:	f7ff fe1c 	bl	8006fec <__sinit>
 80073b4:	4b89      	ldr	r3, [pc, #548]	; (80075dc <_vfiprintf_r+0x240>)
 80073b6:	429d      	cmp	r5, r3
 80073b8:	d11b      	bne.n	80073f2 <_vfiprintf_r+0x56>
 80073ba:	6875      	ldr	r5, [r6, #4]
 80073bc:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80073be:	07d9      	lsls	r1, r3, #31
 80073c0:	d405      	bmi.n	80073ce <_vfiprintf_r+0x32>
 80073c2:	89ab      	ldrh	r3, [r5, #12]
 80073c4:	059a      	lsls	r2, r3, #22
 80073c6:	d402      	bmi.n	80073ce <_vfiprintf_r+0x32>
 80073c8:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80073ca:	f7ff fead 	bl	8007128 <__retarget_lock_acquire_recursive>
 80073ce:	89ab      	ldrh	r3, [r5, #12]
 80073d0:	071b      	lsls	r3, r3, #28
 80073d2:	d501      	bpl.n	80073d8 <_vfiprintf_r+0x3c>
 80073d4:	692b      	ldr	r3, [r5, #16]
 80073d6:	b9eb      	cbnz	r3, 8007414 <_vfiprintf_r+0x78>
 80073d8:	4629      	mov	r1, r5
 80073da:	4630      	mov	r0, r6
 80073dc:	f7ff fc7e 	bl	8006cdc <__swsetup_r>
 80073e0:	b1c0      	cbz	r0, 8007414 <_vfiprintf_r+0x78>
 80073e2:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80073e4:	07dc      	lsls	r4, r3, #31
 80073e6:	d50e      	bpl.n	8007406 <_vfiprintf_r+0x6a>
 80073e8:	f04f 30ff 	mov.w	r0, #4294967295
 80073ec:	b01d      	add	sp, #116	; 0x74
 80073ee:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80073f2:	4b7b      	ldr	r3, [pc, #492]	; (80075e0 <_vfiprintf_r+0x244>)
 80073f4:	429d      	cmp	r5, r3
 80073f6:	d101      	bne.n	80073fc <_vfiprintf_r+0x60>
 80073f8:	68b5      	ldr	r5, [r6, #8]
 80073fa:	e7df      	b.n	80073bc <_vfiprintf_r+0x20>
 80073fc:	4b79      	ldr	r3, [pc, #484]	; (80075e4 <_vfiprintf_r+0x248>)
 80073fe:	429d      	cmp	r5, r3
 8007400:	bf08      	it	eq
 8007402:	68f5      	ldreq	r5, [r6, #12]
 8007404:	e7da      	b.n	80073bc <_vfiprintf_r+0x20>
 8007406:	89ab      	ldrh	r3, [r5, #12]
 8007408:	0598      	lsls	r0, r3, #22
 800740a:	d4ed      	bmi.n	80073e8 <_vfiprintf_r+0x4c>
 800740c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800740e:	f7ff fe8c 	bl	800712a <__retarget_lock_release_recursive>
 8007412:	e7e9      	b.n	80073e8 <_vfiprintf_r+0x4c>
 8007414:	2300      	movs	r3, #0
 8007416:	9309      	str	r3, [sp, #36]	; 0x24
 8007418:	2320      	movs	r3, #32
 800741a:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800741e:	f8cd 800c 	str.w	r8, [sp, #12]
 8007422:	2330      	movs	r3, #48	; 0x30
 8007424:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 80075e8 <_vfiprintf_r+0x24c>
 8007428:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800742c:	f04f 0901 	mov.w	r9, #1
 8007430:	4623      	mov	r3, r4
 8007432:	469a      	mov	sl, r3
 8007434:	f813 2b01 	ldrb.w	r2, [r3], #1
 8007438:	b10a      	cbz	r2, 800743e <_vfiprintf_r+0xa2>
 800743a:	2a25      	cmp	r2, #37	; 0x25
 800743c:	d1f9      	bne.n	8007432 <_vfiprintf_r+0x96>
 800743e:	ebba 0b04 	subs.w	fp, sl, r4
 8007442:	d00b      	beq.n	800745c <_vfiprintf_r+0xc0>
 8007444:	465b      	mov	r3, fp
 8007446:	4622      	mov	r2, r4
 8007448:	4629      	mov	r1, r5
 800744a:	4630      	mov	r0, r6
 800744c:	f7ff ff93 	bl	8007376 <__sfputs_r>
 8007450:	3001      	adds	r0, #1
 8007452:	f000 80aa 	beq.w	80075aa <_vfiprintf_r+0x20e>
 8007456:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8007458:	445a      	add	r2, fp
 800745a:	9209      	str	r2, [sp, #36]	; 0x24
 800745c:	f89a 3000 	ldrb.w	r3, [sl]
 8007460:	2b00      	cmp	r3, #0
 8007462:	f000 80a2 	beq.w	80075aa <_vfiprintf_r+0x20e>
 8007466:	2300      	movs	r3, #0
 8007468:	f04f 32ff 	mov.w	r2, #4294967295
 800746c:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8007470:	f10a 0a01 	add.w	sl, sl, #1
 8007474:	9304      	str	r3, [sp, #16]
 8007476:	9307      	str	r3, [sp, #28]
 8007478:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800747c:	931a      	str	r3, [sp, #104]	; 0x68
 800747e:	4654      	mov	r4, sl
 8007480:	2205      	movs	r2, #5
 8007482:	f814 1b01 	ldrb.w	r1, [r4], #1
 8007486:	4858      	ldr	r0, [pc, #352]	; (80075e8 <_vfiprintf_r+0x24c>)
 8007488:	f7f8 ff42 	bl	8000310 <memchr>
 800748c:	9a04      	ldr	r2, [sp, #16]
 800748e:	b9d8      	cbnz	r0, 80074c8 <_vfiprintf_r+0x12c>
 8007490:	06d1      	lsls	r1, r2, #27
 8007492:	bf44      	itt	mi
 8007494:	2320      	movmi	r3, #32
 8007496:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800749a:	0713      	lsls	r3, r2, #28
 800749c:	bf44      	itt	mi
 800749e:	232b      	movmi	r3, #43	; 0x2b
 80074a0:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80074a4:	f89a 3000 	ldrb.w	r3, [sl]
 80074a8:	2b2a      	cmp	r3, #42	; 0x2a
 80074aa:	d015      	beq.n	80074d8 <_vfiprintf_r+0x13c>
 80074ac:	9a07      	ldr	r2, [sp, #28]
 80074ae:	4654      	mov	r4, sl
 80074b0:	2000      	movs	r0, #0
 80074b2:	f04f 0c0a 	mov.w	ip, #10
 80074b6:	4621      	mov	r1, r4
 80074b8:	f811 3b01 	ldrb.w	r3, [r1], #1
 80074bc:	3b30      	subs	r3, #48	; 0x30
 80074be:	2b09      	cmp	r3, #9
 80074c0:	d94e      	bls.n	8007560 <_vfiprintf_r+0x1c4>
 80074c2:	b1b0      	cbz	r0, 80074f2 <_vfiprintf_r+0x156>
 80074c4:	9207      	str	r2, [sp, #28]
 80074c6:	e014      	b.n	80074f2 <_vfiprintf_r+0x156>
 80074c8:	eba0 0308 	sub.w	r3, r0, r8
 80074cc:	fa09 f303 	lsl.w	r3, r9, r3
 80074d0:	4313      	orrs	r3, r2
 80074d2:	9304      	str	r3, [sp, #16]
 80074d4:	46a2      	mov	sl, r4
 80074d6:	e7d2      	b.n	800747e <_vfiprintf_r+0xe2>
 80074d8:	9b03      	ldr	r3, [sp, #12]
 80074da:	1d19      	adds	r1, r3, #4
 80074dc:	681b      	ldr	r3, [r3, #0]
 80074de:	9103      	str	r1, [sp, #12]
 80074e0:	2b00      	cmp	r3, #0
 80074e2:	bfbb      	ittet	lt
 80074e4:	425b      	neglt	r3, r3
 80074e6:	f042 0202 	orrlt.w	r2, r2, #2
 80074ea:	9307      	strge	r3, [sp, #28]
 80074ec:	9307      	strlt	r3, [sp, #28]
 80074ee:	bfb8      	it	lt
 80074f0:	9204      	strlt	r2, [sp, #16]
 80074f2:	7823      	ldrb	r3, [r4, #0]
 80074f4:	2b2e      	cmp	r3, #46	; 0x2e
 80074f6:	d10c      	bne.n	8007512 <_vfiprintf_r+0x176>
 80074f8:	7863      	ldrb	r3, [r4, #1]
 80074fa:	2b2a      	cmp	r3, #42	; 0x2a
 80074fc:	d135      	bne.n	800756a <_vfiprintf_r+0x1ce>
 80074fe:	9b03      	ldr	r3, [sp, #12]
 8007500:	1d1a      	adds	r2, r3, #4
 8007502:	681b      	ldr	r3, [r3, #0]
 8007504:	9203      	str	r2, [sp, #12]
 8007506:	2b00      	cmp	r3, #0
 8007508:	bfb8      	it	lt
 800750a:	f04f 33ff 	movlt.w	r3, #4294967295
 800750e:	3402      	adds	r4, #2
 8007510:	9305      	str	r3, [sp, #20]
 8007512:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 80075f8 <_vfiprintf_r+0x25c>
 8007516:	7821      	ldrb	r1, [r4, #0]
 8007518:	2203      	movs	r2, #3
 800751a:	4650      	mov	r0, sl
 800751c:	f7f8 fef8 	bl	8000310 <memchr>
 8007520:	b140      	cbz	r0, 8007534 <_vfiprintf_r+0x198>
 8007522:	2340      	movs	r3, #64	; 0x40
 8007524:	eba0 000a 	sub.w	r0, r0, sl
 8007528:	fa03 f000 	lsl.w	r0, r3, r0
 800752c:	9b04      	ldr	r3, [sp, #16]
 800752e:	4303      	orrs	r3, r0
 8007530:	3401      	adds	r4, #1
 8007532:	9304      	str	r3, [sp, #16]
 8007534:	f814 1b01 	ldrb.w	r1, [r4], #1
 8007538:	482c      	ldr	r0, [pc, #176]	; (80075ec <_vfiprintf_r+0x250>)
 800753a:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800753e:	2206      	movs	r2, #6
 8007540:	f7f8 fee6 	bl	8000310 <memchr>
 8007544:	2800      	cmp	r0, #0
 8007546:	d03f      	beq.n	80075c8 <_vfiprintf_r+0x22c>
 8007548:	4b29      	ldr	r3, [pc, #164]	; (80075f0 <_vfiprintf_r+0x254>)
 800754a:	bb1b      	cbnz	r3, 8007594 <_vfiprintf_r+0x1f8>
 800754c:	9b03      	ldr	r3, [sp, #12]
 800754e:	3307      	adds	r3, #7
 8007550:	f023 0307 	bic.w	r3, r3, #7
 8007554:	3308      	adds	r3, #8
 8007556:	9303      	str	r3, [sp, #12]
 8007558:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800755a:	443b      	add	r3, r7
 800755c:	9309      	str	r3, [sp, #36]	; 0x24
 800755e:	e767      	b.n	8007430 <_vfiprintf_r+0x94>
 8007560:	fb0c 3202 	mla	r2, ip, r2, r3
 8007564:	460c      	mov	r4, r1
 8007566:	2001      	movs	r0, #1
 8007568:	e7a5      	b.n	80074b6 <_vfiprintf_r+0x11a>
 800756a:	2300      	movs	r3, #0
 800756c:	3401      	adds	r4, #1
 800756e:	9305      	str	r3, [sp, #20]
 8007570:	4619      	mov	r1, r3
 8007572:	f04f 0c0a 	mov.w	ip, #10
 8007576:	4620      	mov	r0, r4
 8007578:	f810 2b01 	ldrb.w	r2, [r0], #1
 800757c:	3a30      	subs	r2, #48	; 0x30
 800757e:	2a09      	cmp	r2, #9
 8007580:	d903      	bls.n	800758a <_vfiprintf_r+0x1ee>
 8007582:	2b00      	cmp	r3, #0
 8007584:	d0c5      	beq.n	8007512 <_vfiprintf_r+0x176>
 8007586:	9105      	str	r1, [sp, #20]
 8007588:	e7c3      	b.n	8007512 <_vfiprintf_r+0x176>
 800758a:	fb0c 2101 	mla	r1, ip, r1, r2
 800758e:	4604      	mov	r4, r0
 8007590:	2301      	movs	r3, #1
 8007592:	e7f0      	b.n	8007576 <_vfiprintf_r+0x1da>
 8007594:	ab03      	add	r3, sp, #12
 8007596:	9300      	str	r3, [sp, #0]
 8007598:	462a      	mov	r2, r5
 800759a:	4b16      	ldr	r3, [pc, #88]	; (80075f4 <_vfiprintf_r+0x258>)
 800759c:	a904      	add	r1, sp, #16
 800759e:	4630      	mov	r0, r6
 80075a0:	f3af 8000 	nop.w
 80075a4:	4607      	mov	r7, r0
 80075a6:	1c78      	adds	r0, r7, #1
 80075a8:	d1d6      	bne.n	8007558 <_vfiprintf_r+0x1bc>
 80075aa:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80075ac:	07d9      	lsls	r1, r3, #31
 80075ae:	d405      	bmi.n	80075bc <_vfiprintf_r+0x220>
 80075b0:	89ab      	ldrh	r3, [r5, #12]
 80075b2:	059a      	lsls	r2, r3, #22
 80075b4:	d402      	bmi.n	80075bc <_vfiprintf_r+0x220>
 80075b6:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80075b8:	f7ff fdb7 	bl	800712a <__retarget_lock_release_recursive>
 80075bc:	89ab      	ldrh	r3, [r5, #12]
 80075be:	065b      	lsls	r3, r3, #25
 80075c0:	f53f af12 	bmi.w	80073e8 <_vfiprintf_r+0x4c>
 80075c4:	9809      	ldr	r0, [sp, #36]	; 0x24
 80075c6:	e711      	b.n	80073ec <_vfiprintf_r+0x50>
 80075c8:	ab03      	add	r3, sp, #12
 80075ca:	9300      	str	r3, [sp, #0]
 80075cc:	462a      	mov	r2, r5
 80075ce:	4b09      	ldr	r3, [pc, #36]	; (80075f4 <_vfiprintf_r+0x258>)
 80075d0:	a904      	add	r1, sp, #16
 80075d2:	4630      	mov	r0, r6
 80075d4:	f000 f880 	bl	80076d8 <_printf_i>
 80075d8:	e7e4      	b.n	80075a4 <_vfiprintf_r+0x208>
 80075da:	bf00      	nop
 80075dc:	08007c6c 	.word	0x08007c6c
 80075e0:	08007c8c 	.word	0x08007c8c
 80075e4:	08007c4c 	.word	0x08007c4c
 80075e8:	08007cac 	.word	0x08007cac
 80075ec:	08007cb6 	.word	0x08007cb6
 80075f0:	00000000 	.word	0x00000000
 80075f4:	08007377 	.word	0x08007377
 80075f8:	08007cb2 	.word	0x08007cb2

080075fc <_printf_common>:
 80075fc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007600:	4616      	mov	r6, r2
 8007602:	4699      	mov	r9, r3
 8007604:	688a      	ldr	r2, [r1, #8]
 8007606:	690b      	ldr	r3, [r1, #16]
 8007608:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800760c:	4293      	cmp	r3, r2
 800760e:	bfb8      	it	lt
 8007610:	4613      	movlt	r3, r2
 8007612:	6033      	str	r3, [r6, #0]
 8007614:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8007618:	4607      	mov	r7, r0
 800761a:	460c      	mov	r4, r1
 800761c:	b10a      	cbz	r2, 8007622 <_printf_common+0x26>
 800761e:	3301      	adds	r3, #1
 8007620:	6033      	str	r3, [r6, #0]
 8007622:	6823      	ldr	r3, [r4, #0]
 8007624:	0699      	lsls	r1, r3, #26
 8007626:	bf42      	ittt	mi
 8007628:	6833      	ldrmi	r3, [r6, #0]
 800762a:	3302      	addmi	r3, #2
 800762c:	6033      	strmi	r3, [r6, #0]
 800762e:	6825      	ldr	r5, [r4, #0]
 8007630:	f015 0506 	ands.w	r5, r5, #6
 8007634:	d106      	bne.n	8007644 <_printf_common+0x48>
 8007636:	f104 0a19 	add.w	sl, r4, #25
 800763a:	68e3      	ldr	r3, [r4, #12]
 800763c:	6832      	ldr	r2, [r6, #0]
 800763e:	1a9b      	subs	r3, r3, r2
 8007640:	42ab      	cmp	r3, r5
 8007642:	dc26      	bgt.n	8007692 <_printf_common+0x96>
 8007644:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8007648:	1e13      	subs	r3, r2, #0
 800764a:	6822      	ldr	r2, [r4, #0]
 800764c:	bf18      	it	ne
 800764e:	2301      	movne	r3, #1
 8007650:	0692      	lsls	r2, r2, #26
 8007652:	d42b      	bmi.n	80076ac <_printf_common+0xb0>
 8007654:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8007658:	4649      	mov	r1, r9
 800765a:	4638      	mov	r0, r7
 800765c:	47c0      	blx	r8
 800765e:	3001      	adds	r0, #1
 8007660:	d01e      	beq.n	80076a0 <_printf_common+0xa4>
 8007662:	6823      	ldr	r3, [r4, #0]
 8007664:	68e5      	ldr	r5, [r4, #12]
 8007666:	6832      	ldr	r2, [r6, #0]
 8007668:	f003 0306 	and.w	r3, r3, #6
 800766c:	2b04      	cmp	r3, #4
 800766e:	bf08      	it	eq
 8007670:	1aad      	subeq	r5, r5, r2
 8007672:	68a3      	ldr	r3, [r4, #8]
 8007674:	6922      	ldr	r2, [r4, #16]
 8007676:	bf0c      	ite	eq
 8007678:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800767c:	2500      	movne	r5, #0
 800767e:	4293      	cmp	r3, r2
 8007680:	bfc4      	itt	gt
 8007682:	1a9b      	subgt	r3, r3, r2
 8007684:	18ed      	addgt	r5, r5, r3
 8007686:	2600      	movs	r6, #0
 8007688:	341a      	adds	r4, #26
 800768a:	42b5      	cmp	r5, r6
 800768c:	d11a      	bne.n	80076c4 <_printf_common+0xc8>
 800768e:	2000      	movs	r0, #0
 8007690:	e008      	b.n	80076a4 <_printf_common+0xa8>
 8007692:	2301      	movs	r3, #1
 8007694:	4652      	mov	r2, sl
 8007696:	4649      	mov	r1, r9
 8007698:	4638      	mov	r0, r7
 800769a:	47c0      	blx	r8
 800769c:	3001      	adds	r0, #1
 800769e:	d103      	bne.n	80076a8 <_printf_common+0xac>
 80076a0:	f04f 30ff 	mov.w	r0, #4294967295
 80076a4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80076a8:	3501      	adds	r5, #1
 80076aa:	e7c6      	b.n	800763a <_printf_common+0x3e>
 80076ac:	18e1      	adds	r1, r4, r3
 80076ae:	1c5a      	adds	r2, r3, #1
 80076b0:	2030      	movs	r0, #48	; 0x30
 80076b2:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 80076b6:	4422      	add	r2, r4
 80076b8:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 80076bc:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 80076c0:	3302      	adds	r3, #2
 80076c2:	e7c7      	b.n	8007654 <_printf_common+0x58>
 80076c4:	2301      	movs	r3, #1
 80076c6:	4622      	mov	r2, r4
 80076c8:	4649      	mov	r1, r9
 80076ca:	4638      	mov	r0, r7
 80076cc:	47c0      	blx	r8
 80076ce:	3001      	adds	r0, #1
 80076d0:	d0e6      	beq.n	80076a0 <_printf_common+0xa4>
 80076d2:	3601      	adds	r6, #1
 80076d4:	e7d9      	b.n	800768a <_printf_common+0x8e>
	...

080076d8 <_printf_i>:
 80076d8:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80076dc:	460c      	mov	r4, r1
 80076de:	4691      	mov	r9, r2
 80076e0:	7e27      	ldrb	r7, [r4, #24]
 80076e2:	990c      	ldr	r1, [sp, #48]	; 0x30
 80076e4:	2f78      	cmp	r7, #120	; 0x78
 80076e6:	4680      	mov	r8, r0
 80076e8:	469a      	mov	sl, r3
 80076ea:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80076ee:	d807      	bhi.n	8007700 <_printf_i+0x28>
 80076f0:	2f62      	cmp	r7, #98	; 0x62
 80076f2:	d80a      	bhi.n	800770a <_printf_i+0x32>
 80076f4:	2f00      	cmp	r7, #0
 80076f6:	f000 80d8 	beq.w	80078aa <_printf_i+0x1d2>
 80076fa:	2f58      	cmp	r7, #88	; 0x58
 80076fc:	f000 80a3 	beq.w	8007846 <_printf_i+0x16e>
 8007700:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8007704:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8007708:	e03a      	b.n	8007780 <_printf_i+0xa8>
 800770a:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800770e:	2b15      	cmp	r3, #21
 8007710:	d8f6      	bhi.n	8007700 <_printf_i+0x28>
 8007712:	a001      	add	r0, pc, #4	; (adr r0, 8007718 <_printf_i+0x40>)
 8007714:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 8007718:	08007771 	.word	0x08007771
 800771c:	08007785 	.word	0x08007785
 8007720:	08007701 	.word	0x08007701
 8007724:	08007701 	.word	0x08007701
 8007728:	08007701 	.word	0x08007701
 800772c:	08007701 	.word	0x08007701
 8007730:	08007785 	.word	0x08007785
 8007734:	08007701 	.word	0x08007701
 8007738:	08007701 	.word	0x08007701
 800773c:	08007701 	.word	0x08007701
 8007740:	08007701 	.word	0x08007701
 8007744:	08007891 	.word	0x08007891
 8007748:	080077b5 	.word	0x080077b5
 800774c:	08007873 	.word	0x08007873
 8007750:	08007701 	.word	0x08007701
 8007754:	08007701 	.word	0x08007701
 8007758:	080078b3 	.word	0x080078b3
 800775c:	08007701 	.word	0x08007701
 8007760:	080077b5 	.word	0x080077b5
 8007764:	08007701 	.word	0x08007701
 8007768:	08007701 	.word	0x08007701
 800776c:	0800787b 	.word	0x0800787b
 8007770:	680b      	ldr	r3, [r1, #0]
 8007772:	1d1a      	adds	r2, r3, #4
 8007774:	681b      	ldr	r3, [r3, #0]
 8007776:	600a      	str	r2, [r1, #0]
 8007778:	f104 0642 	add.w	r6, r4, #66	; 0x42
 800777c:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8007780:	2301      	movs	r3, #1
 8007782:	e0a3      	b.n	80078cc <_printf_i+0x1f4>
 8007784:	6825      	ldr	r5, [r4, #0]
 8007786:	6808      	ldr	r0, [r1, #0]
 8007788:	062e      	lsls	r6, r5, #24
 800778a:	f100 0304 	add.w	r3, r0, #4
 800778e:	d50a      	bpl.n	80077a6 <_printf_i+0xce>
 8007790:	6805      	ldr	r5, [r0, #0]
 8007792:	600b      	str	r3, [r1, #0]
 8007794:	2d00      	cmp	r5, #0
 8007796:	da03      	bge.n	80077a0 <_printf_i+0xc8>
 8007798:	232d      	movs	r3, #45	; 0x2d
 800779a:	426d      	negs	r5, r5
 800779c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80077a0:	485e      	ldr	r0, [pc, #376]	; (800791c <_printf_i+0x244>)
 80077a2:	230a      	movs	r3, #10
 80077a4:	e019      	b.n	80077da <_printf_i+0x102>
 80077a6:	f015 0f40 	tst.w	r5, #64	; 0x40
 80077aa:	6805      	ldr	r5, [r0, #0]
 80077ac:	600b      	str	r3, [r1, #0]
 80077ae:	bf18      	it	ne
 80077b0:	b22d      	sxthne	r5, r5
 80077b2:	e7ef      	b.n	8007794 <_printf_i+0xbc>
 80077b4:	680b      	ldr	r3, [r1, #0]
 80077b6:	6825      	ldr	r5, [r4, #0]
 80077b8:	1d18      	adds	r0, r3, #4
 80077ba:	6008      	str	r0, [r1, #0]
 80077bc:	0628      	lsls	r0, r5, #24
 80077be:	d501      	bpl.n	80077c4 <_printf_i+0xec>
 80077c0:	681d      	ldr	r5, [r3, #0]
 80077c2:	e002      	b.n	80077ca <_printf_i+0xf2>
 80077c4:	0669      	lsls	r1, r5, #25
 80077c6:	d5fb      	bpl.n	80077c0 <_printf_i+0xe8>
 80077c8:	881d      	ldrh	r5, [r3, #0]
 80077ca:	4854      	ldr	r0, [pc, #336]	; (800791c <_printf_i+0x244>)
 80077cc:	2f6f      	cmp	r7, #111	; 0x6f
 80077ce:	bf0c      	ite	eq
 80077d0:	2308      	moveq	r3, #8
 80077d2:	230a      	movne	r3, #10
 80077d4:	2100      	movs	r1, #0
 80077d6:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 80077da:	6866      	ldr	r6, [r4, #4]
 80077dc:	60a6      	str	r6, [r4, #8]
 80077de:	2e00      	cmp	r6, #0
 80077e0:	bfa2      	ittt	ge
 80077e2:	6821      	ldrge	r1, [r4, #0]
 80077e4:	f021 0104 	bicge.w	r1, r1, #4
 80077e8:	6021      	strge	r1, [r4, #0]
 80077ea:	b90d      	cbnz	r5, 80077f0 <_printf_i+0x118>
 80077ec:	2e00      	cmp	r6, #0
 80077ee:	d04d      	beq.n	800788c <_printf_i+0x1b4>
 80077f0:	4616      	mov	r6, r2
 80077f2:	fbb5 f1f3 	udiv	r1, r5, r3
 80077f6:	fb03 5711 	mls	r7, r3, r1, r5
 80077fa:	5dc7      	ldrb	r7, [r0, r7]
 80077fc:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8007800:	462f      	mov	r7, r5
 8007802:	42bb      	cmp	r3, r7
 8007804:	460d      	mov	r5, r1
 8007806:	d9f4      	bls.n	80077f2 <_printf_i+0x11a>
 8007808:	2b08      	cmp	r3, #8
 800780a:	d10b      	bne.n	8007824 <_printf_i+0x14c>
 800780c:	6823      	ldr	r3, [r4, #0]
 800780e:	07df      	lsls	r7, r3, #31
 8007810:	d508      	bpl.n	8007824 <_printf_i+0x14c>
 8007812:	6923      	ldr	r3, [r4, #16]
 8007814:	6861      	ldr	r1, [r4, #4]
 8007816:	4299      	cmp	r1, r3
 8007818:	bfde      	ittt	le
 800781a:	2330      	movle	r3, #48	; 0x30
 800781c:	f806 3c01 	strble.w	r3, [r6, #-1]
 8007820:	f106 36ff 	addle.w	r6, r6, #4294967295
 8007824:	1b92      	subs	r2, r2, r6
 8007826:	6122      	str	r2, [r4, #16]
 8007828:	f8cd a000 	str.w	sl, [sp]
 800782c:	464b      	mov	r3, r9
 800782e:	aa03      	add	r2, sp, #12
 8007830:	4621      	mov	r1, r4
 8007832:	4640      	mov	r0, r8
 8007834:	f7ff fee2 	bl	80075fc <_printf_common>
 8007838:	3001      	adds	r0, #1
 800783a:	d14c      	bne.n	80078d6 <_printf_i+0x1fe>
 800783c:	f04f 30ff 	mov.w	r0, #4294967295
 8007840:	b004      	add	sp, #16
 8007842:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007846:	4835      	ldr	r0, [pc, #212]	; (800791c <_printf_i+0x244>)
 8007848:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 800784c:	6823      	ldr	r3, [r4, #0]
 800784e:	680e      	ldr	r6, [r1, #0]
 8007850:	061f      	lsls	r7, r3, #24
 8007852:	f856 5b04 	ldr.w	r5, [r6], #4
 8007856:	600e      	str	r6, [r1, #0]
 8007858:	d514      	bpl.n	8007884 <_printf_i+0x1ac>
 800785a:	07d9      	lsls	r1, r3, #31
 800785c:	bf44      	itt	mi
 800785e:	f043 0320 	orrmi.w	r3, r3, #32
 8007862:	6023      	strmi	r3, [r4, #0]
 8007864:	b91d      	cbnz	r5, 800786e <_printf_i+0x196>
 8007866:	6823      	ldr	r3, [r4, #0]
 8007868:	f023 0320 	bic.w	r3, r3, #32
 800786c:	6023      	str	r3, [r4, #0]
 800786e:	2310      	movs	r3, #16
 8007870:	e7b0      	b.n	80077d4 <_printf_i+0xfc>
 8007872:	6823      	ldr	r3, [r4, #0]
 8007874:	f043 0320 	orr.w	r3, r3, #32
 8007878:	6023      	str	r3, [r4, #0]
 800787a:	2378      	movs	r3, #120	; 0x78
 800787c:	4828      	ldr	r0, [pc, #160]	; (8007920 <_printf_i+0x248>)
 800787e:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8007882:	e7e3      	b.n	800784c <_printf_i+0x174>
 8007884:	065e      	lsls	r6, r3, #25
 8007886:	bf48      	it	mi
 8007888:	b2ad      	uxthmi	r5, r5
 800788a:	e7e6      	b.n	800785a <_printf_i+0x182>
 800788c:	4616      	mov	r6, r2
 800788e:	e7bb      	b.n	8007808 <_printf_i+0x130>
 8007890:	680b      	ldr	r3, [r1, #0]
 8007892:	6826      	ldr	r6, [r4, #0]
 8007894:	6960      	ldr	r0, [r4, #20]
 8007896:	1d1d      	adds	r5, r3, #4
 8007898:	600d      	str	r5, [r1, #0]
 800789a:	0635      	lsls	r5, r6, #24
 800789c:	681b      	ldr	r3, [r3, #0]
 800789e:	d501      	bpl.n	80078a4 <_printf_i+0x1cc>
 80078a0:	6018      	str	r0, [r3, #0]
 80078a2:	e002      	b.n	80078aa <_printf_i+0x1d2>
 80078a4:	0671      	lsls	r1, r6, #25
 80078a6:	d5fb      	bpl.n	80078a0 <_printf_i+0x1c8>
 80078a8:	8018      	strh	r0, [r3, #0]
 80078aa:	2300      	movs	r3, #0
 80078ac:	6123      	str	r3, [r4, #16]
 80078ae:	4616      	mov	r6, r2
 80078b0:	e7ba      	b.n	8007828 <_printf_i+0x150>
 80078b2:	680b      	ldr	r3, [r1, #0]
 80078b4:	1d1a      	adds	r2, r3, #4
 80078b6:	600a      	str	r2, [r1, #0]
 80078b8:	681e      	ldr	r6, [r3, #0]
 80078ba:	6862      	ldr	r2, [r4, #4]
 80078bc:	2100      	movs	r1, #0
 80078be:	4630      	mov	r0, r6
 80078c0:	f7f8 fd26 	bl	8000310 <memchr>
 80078c4:	b108      	cbz	r0, 80078ca <_printf_i+0x1f2>
 80078c6:	1b80      	subs	r0, r0, r6
 80078c8:	6060      	str	r0, [r4, #4]
 80078ca:	6863      	ldr	r3, [r4, #4]
 80078cc:	6123      	str	r3, [r4, #16]
 80078ce:	2300      	movs	r3, #0
 80078d0:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80078d4:	e7a8      	b.n	8007828 <_printf_i+0x150>
 80078d6:	6923      	ldr	r3, [r4, #16]
 80078d8:	4632      	mov	r2, r6
 80078da:	4649      	mov	r1, r9
 80078dc:	4640      	mov	r0, r8
 80078de:	47d0      	blx	sl
 80078e0:	3001      	adds	r0, #1
 80078e2:	d0ab      	beq.n	800783c <_printf_i+0x164>
 80078e4:	6823      	ldr	r3, [r4, #0]
 80078e6:	079b      	lsls	r3, r3, #30
 80078e8:	d413      	bmi.n	8007912 <_printf_i+0x23a>
 80078ea:	68e0      	ldr	r0, [r4, #12]
 80078ec:	9b03      	ldr	r3, [sp, #12]
 80078ee:	4298      	cmp	r0, r3
 80078f0:	bfb8      	it	lt
 80078f2:	4618      	movlt	r0, r3
 80078f4:	e7a4      	b.n	8007840 <_printf_i+0x168>
 80078f6:	2301      	movs	r3, #1
 80078f8:	4632      	mov	r2, r6
 80078fa:	4649      	mov	r1, r9
 80078fc:	4640      	mov	r0, r8
 80078fe:	47d0      	blx	sl
 8007900:	3001      	adds	r0, #1
 8007902:	d09b      	beq.n	800783c <_printf_i+0x164>
 8007904:	3501      	adds	r5, #1
 8007906:	68e3      	ldr	r3, [r4, #12]
 8007908:	9903      	ldr	r1, [sp, #12]
 800790a:	1a5b      	subs	r3, r3, r1
 800790c:	42ab      	cmp	r3, r5
 800790e:	dcf2      	bgt.n	80078f6 <_printf_i+0x21e>
 8007910:	e7eb      	b.n	80078ea <_printf_i+0x212>
 8007912:	2500      	movs	r5, #0
 8007914:	f104 0619 	add.w	r6, r4, #25
 8007918:	e7f5      	b.n	8007906 <_printf_i+0x22e>
 800791a:	bf00      	nop
 800791c:	08007cbd 	.word	0x08007cbd
 8007920:	08007cce 	.word	0x08007cce

08007924 <_sbrk_r>:
 8007924:	b538      	push	{r3, r4, r5, lr}
 8007926:	4d06      	ldr	r5, [pc, #24]	; (8007940 <_sbrk_r+0x1c>)
 8007928:	2300      	movs	r3, #0
 800792a:	4604      	mov	r4, r0
 800792c:	4608      	mov	r0, r1
 800792e:	602b      	str	r3, [r5, #0]
 8007930:	f7f9 fbe2 	bl	80010f8 <_sbrk>
 8007934:	1c43      	adds	r3, r0, #1
 8007936:	d102      	bne.n	800793e <_sbrk_r+0x1a>
 8007938:	682b      	ldr	r3, [r5, #0]
 800793a:	b103      	cbz	r3, 800793e <_sbrk_r+0x1a>
 800793c:	6023      	str	r3, [r4, #0]
 800793e:	bd38      	pop	{r3, r4, r5, pc}
 8007940:	20002c20 	.word	0x20002c20

08007944 <__sread>:
 8007944:	b510      	push	{r4, lr}
 8007946:	460c      	mov	r4, r1
 8007948:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800794c:	f000 f8a0 	bl	8007a90 <_read_r>
 8007950:	2800      	cmp	r0, #0
 8007952:	bfab      	itete	ge
 8007954:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8007956:	89a3      	ldrhlt	r3, [r4, #12]
 8007958:	181b      	addge	r3, r3, r0
 800795a:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800795e:	bfac      	ite	ge
 8007960:	6563      	strge	r3, [r4, #84]	; 0x54
 8007962:	81a3      	strhlt	r3, [r4, #12]
 8007964:	bd10      	pop	{r4, pc}

08007966 <__swrite>:
 8007966:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800796a:	461f      	mov	r7, r3
 800796c:	898b      	ldrh	r3, [r1, #12]
 800796e:	05db      	lsls	r3, r3, #23
 8007970:	4605      	mov	r5, r0
 8007972:	460c      	mov	r4, r1
 8007974:	4616      	mov	r6, r2
 8007976:	d505      	bpl.n	8007984 <__swrite+0x1e>
 8007978:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800797c:	2302      	movs	r3, #2
 800797e:	2200      	movs	r2, #0
 8007980:	f000 f868 	bl	8007a54 <_lseek_r>
 8007984:	89a3      	ldrh	r3, [r4, #12]
 8007986:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800798a:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800798e:	81a3      	strh	r3, [r4, #12]
 8007990:	4632      	mov	r2, r6
 8007992:	463b      	mov	r3, r7
 8007994:	4628      	mov	r0, r5
 8007996:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800799a:	f000 b817 	b.w	80079cc <_write_r>

0800799e <__sseek>:
 800799e:	b510      	push	{r4, lr}
 80079a0:	460c      	mov	r4, r1
 80079a2:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80079a6:	f000 f855 	bl	8007a54 <_lseek_r>
 80079aa:	1c43      	adds	r3, r0, #1
 80079ac:	89a3      	ldrh	r3, [r4, #12]
 80079ae:	bf15      	itete	ne
 80079b0:	6560      	strne	r0, [r4, #84]	; 0x54
 80079b2:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 80079b6:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 80079ba:	81a3      	strheq	r3, [r4, #12]
 80079bc:	bf18      	it	ne
 80079be:	81a3      	strhne	r3, [r4, #12]
 80079c0:	bd10      	pop	{r4, pc}

080079c2 <__sclose>:
 80079c2:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80079c6:	f000 b813 	b.w	80079f0 <_close_r>
	...

080079cc <_write_r>:
 80079cc:	b538      	push	{r3, r4, r5, lr}
 80079ce:	4d07      	ldr	r5, [pc, #28]	; (80079ec <_write_r+0x20>)
 80079d0:	4604      	mov	r4, r0
 80079d2:	4608      	mov	r0, r1
 80079d4:	4611      	mov	r1, r2
 80079d6:	2200      	movs	r2, #0
 80079d8:	602a      	str	r2, [r5, #0]
 80079da:	461a      	mov	r2, r3
 80079dc:	f7f8 fe88 	bl	80006f0 <_write>
 80079e0:	1c43      	adds	r3, r0, #1
 80079e2:	d102      	bne.n	80079ea <_write_r+0x1e>
 80079e4:	682b      	ldr	r3, [r5, #0]
 80079e6:	b103      	cbz	r3, 80079ea <_write_r+0x1e>
 80079e8:	6023      	str	r3, [r4, #0]
 80079ea:	bd38      	pop	{r3, r4, r5, pc}
 80079ec:	20002c20 	.word	0x20002c20

080079f0 <_close_r>:
 80079f0:	b538      	push	{r3, r4, r5, lr}
 80079f2:	4d06      	ldr	r5, [pc, #24]	; (8007a0c <_close_r+0x1c>)
 80079f4:	2300      	movs	r3, #0
 80079f6:	4604      	mov	r4, r0
 80079f8:	4608      	mov	r0, r1
 80079fa:	602b      	str	r3, [r5, #0]
 80079fc:	f7f9 fb47 	bl	800108e <_close>
 8007a00:	1c43      	adds	r3, r0, #1
 8007a02:	d102      	bne.n	8007a0a <_close_r+0x1a>
 8007a04:	682b      	ldr	r3, [r5, #0]
 8007a06:	b103      	cbz	r3, 8007a0a <_close_r+0x1a>
 8007a08:	6023      	str	r3, [r4, #0]
 8007a0a:	bd38      	pop	{r3, r4, r5, pc}
 8007a0c:	20002c20 	.word	0x20002c20

08007a10 <_fstat_r>:
 8007a10:	b538      	push	{r3, r4, r5, lr}
 8007a12:	4d07      	ldr	r5, [pc, #28]	; (8007a30 <_fstat_r+0x20>)
 8007a14:	2300      	movs	r3, #0
 8007a16:	4604      	mov	r4, r0
 8007a18:	4608      	mov	r0, r1
 8007a1a:	4611      	mov	r1, r2
 8007a1c:	602b      	str	r3, [r5, #0]
 8007a1e:	f7f9 fb42 	bl	80010a6 <_fstat>
 8007a22:	1c43      	adds	r3, r0, #1
 8007a24:	d102      	bne.n	8007a2c <_fstat_r+0x1c>
 8007a26:	682b      	ldr	r3, [r5, #0]
 8007a28:	b103      	cbz	r3, 8007a2c <_fstat_r+0x1c>
 8007a2a:	6023      	str	r3, [r4, #0]
 8007a2c:	bd38      	pop	{r3, r4, r5, pc}
 8007a2e:	bf00      	nop
 8007a30:	20002c20 	.word	0x20002c20

08007a34 <_isatty_r>:
 8007a34:	b538      	push	{r3, r4, r5, lr}
 8007a36:	4d06      	ldr	r5, [pc, #24]	; (8007a50 <_isatty_r+0x1c>)
 8007a38:	2300      	movs	r3, #0
 8007a3a:	4604      	mov	r4, r0
 8007a3c:	4608      	mov	r0, r1
 8007a3e:	602b      	str	r3, [r5, #0]
 8007a40:	f7f9 fb41 	bl	80010c6 <_isatty>
 8007a44:	1c43      	adds	r3, r0, #1
 8007a46:	d102      	bne.n	8007a4e <_isatty_r+0x1a>
 8007a48:	682b      	ldr	r3, [r5, #0]
 8007a4a:	b103      	cbz	r3, 8007a4e <_isatty_r+0x1a>
 8007a4c:	6023      	str	r3, [r4, #0]
 8007a4e:	bd38      	pop	{r3, r4, r5, pc}
 8007a50:	20002c20 	.word	0x20002c20

08007a54 <_lseek_r>:
 8007a54:	b538      	push	{r3, r4, r5, lr}
 8007a56:	4d07      	ldr	r5, [pc, #28]	; (8007a74 <_lseek_r+0x20>)
 8007a58:	4604      	mov	r4, r0
 8007a5a:	4608      	mov	r0, r1
 8007a5c:	4611      	mov	r1, r2
 8007a5e:	2200      	movs	r2, #0
 8007a60:	602a      	str	r2, [r5, #0]
 8007a62:	461a      	mov	r2, r3
 8007a64:	f7f9 fb3a 	bl	80010dc <_lseek>
 8007a68:	1c43      	adds	r3, r0, #1
 8007a6a:	d102      	bne.n	8007a72 <_lseek_r+0x1e>
 8007a6c:	682b      	ldr	r3, [r5, #0]
 8007a6e:	b103      	cbz	r3, 8007a72 <_lseek_r+0x1e>
 8007a70:	6023      	str	r3, [r4, #0]
 8007a72:	bd38      	pop	{r3, r4, r5, pc}
 8007a74:	20002c20 	.word	0x20002c20

08007a78 <__malloc_lock>:
 8007a78:	4801      	ldr	r0, [pc, #4]	; (8007a80 <__malloc_lock+0x8>)
 8007a7a:	f7ff bb55 	b.w	8007128 <__retarget_lock_acquire_recursive>
 8007a7e:	bf00      	nop
 8007a80:	20002c18 	.word	0x20002c18

08007a84 <__malloc_unlock>:
 8007a84:	4801      	ldr	r0, [pc, #4]	; (8007a8c <__malloc_unlock+0x8>)
 8007a86:	f7ff bb50 	b.w	800712a <__retarget_lock_release_recursive>
 8007a8a:	bf00      	nop
 8007a8c:	20002c18 	.word	0x20002c18

08007a90 <_read_r>:
 8007a90:	b538      	push	{r3, r4, r5, lr}
 8007a92:	4d07      	ldr	r5, [pc, #28]	; (8007ab0 <_read_r+0x20>)
 8007a94:	4604      	mov	r4, r0
 8007a96:	4608      	mov	r0, r1
 8007a98:	4611      	mov	r1, r2
 8007a9a:	2200      	movs	r2, #0
 8007a9c:	602a      	str	r2, [r5, #0]
 8007a9e:	461a      	mov	r2, r3
 8007aa0:	f7f9 fad8 	bl	8001054 <_read>
 8007aa4:	1c43      	adds	r3, r0, #1
 8007aa6:	d102      	bne.n	8007aae <_read_r+0x1e>
 8007aa8:	682b      	ldr	r3, [r5, #0]
 8007aaa:	b103      	cbz	r3, 8007aae <_read_r+0x1e>
 8007aac:	6023      	str	r3, [r4, #0]
 8007aae:	bd38      	pop	{r3, r4, r5, pc}
 8007ab0:	20002c20 	.word	0x20002c20

08007ab4 <_init>:
 8007ab4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007ab6:	bf00      	nop
 8007ab8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007aba:	bc08      	pop	{r3}
 8007abc:	469e      	mov	lr, r3
 8007abe:	4770      	bx	lr

08007ac0 <_fini>:
 8007ac0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007ac2:	bf00      	nop
 8007ac4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007ac6:	bc08      	pop	{r3}
 8007ac8:	469e      	mov	lr, r3
 8007aca:	4770      	bx	lr
