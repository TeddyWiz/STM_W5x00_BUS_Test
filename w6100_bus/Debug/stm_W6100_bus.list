
stm_W6100_bus.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000002cc  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00006914  080002cc  080002cc  000102cc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000038  08006be0  08006be0  00016be0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  08006c18  08006c18  00016c18  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000004  08006c20  08006c20  00016c20  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .fini_array   00000004  08006c24  08006c24  00016c24  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .data         00000010  20000000  08006c28  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .RxDecripSection 00000060  20000010  08006c38  00020010  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .TxDecripSection 00000060  20000070  08006c98  00020070  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000001bc  200000d0  08006cf8  000200d0  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000028c  08006cf8  0002028c  2**0
                  ALLOC
 11 .ARM.attributes 0000002e  00000000  00000000  000200d0  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001e8b2  00000000  00000000  000200fe  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002e43  00000000  00000000  0003e9b0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000e30  00000000  00000000  000417f8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000d58  00000000  00000000  00042628  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00032d10  00000000  00000000  00043380  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   000120d3  00000000  00000000  00076090  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00149a05  00000000  00000000  00088163  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  001d1b68  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00003b44  00000000  00000000  001d1bbc  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080002cc <__do_global_dtors_aux>:
 80002cc:	b510      	push	{r4, lr}
 80002ce:	4c05      	ldr	r4, [pc, #20]	; (80002e4 <__do_global_dtors_aux+0x18>)
 80002d0:	7823      	ldrb	r3, [r4, #0]
 80002d2:	b933      	cbnz	r3, 80002e2 <__do_global_dtors_aux+0x16>
 80002d4:	4b04      	ldr	r3, [pc, #16]	; (80002e8 <__do_global_dtors_aux+0x1c>)
 80002d6:	b113      	cbz	r3, 80002de <__do_global_dtors_aux+0x12>
 80002d8:	4804      	ldr	r0, [pc, #16]	; (80002ec <__do_global_dtors_aux+0x20>)
 80002da:	f3af 8000 	nop.w
 80002de:	2301      	movs	r3, #1
 80002e0:	7023      	strb	r3, [r4, #0]
 80002e2:	bd10      	pop	{r4, pc}
 80002e4:	200000d0 	.word	0x200000d0
 80002e8:	00000000 	.word	0x00000000
 80002ec:	08006bc8 	.word	0x08006bc8

080002f0 <frame_dummy>:
 80002f0:	b508      	push	{r3, lr}
 80002f2:	4b03      	ldr	r3, [pc, #12]	; (8000300 <frame_dummy+0x10>)
 80002f4:	b11b      	cbz	r3, 80002fe <frame_dummy+0xe>
 80002f6:	4903      	ldr	r1, [pc, #12]	; (8000304 <frame_dummy+0x14>)
 80002f8:	4803      	ldr	r0, [pc, #12]	; (8000308 <frame_dummy+0x18>)
 80002fa:	f3af 8000 	nop.w
 80002fe:	bd08      	pop	{r3, pc}
 8000300:	00000000 	.word	0x00000000
 8000304:	200000d4 	.word	0x200000d4
 8000308:	08006bc8 	.word	0x08006bc8

0800030c <__aeabi_uldivmod>:
 800030c:	b953      	cbnz	r3, 8000324 <__aeabi_uldivmod+0x18>
 800030e:	b94a      	cbnz	r2, 8000324 <__aeabi_uldivmod+0x18>
 8000310:	2900      	cmp	r1, #0
 8000312:	bf08      	it	eq
 8000314:	2800      	cmpeq	r0, #0
 8000316:	bf1c      	itt	ne
 8000318:	f04f 31ff 	movne.w	r1, #4294967295
 800031c:	f04f 30ff 	movne.w	r0, #4294967295
 8000320:	f000 b96e 	b.w	8000600 <__aeabi_idiv0>
 8000324:	f1ad 0c08 	sub.w	ip, sp, #8
 8000328:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 800032c:	f000 f806 	bl	800033c <__udivmoddi4>
 8000330:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000334:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000338:	b004      	add	sp, #16
 800033a:	4770      	bx	lr

0800033c <__udivmoddi4>:
 800033c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000340:	9d08      	ldr	r5, [sp, #32]
 8000342:	4604      	mov	r4, r0
 8000344:	468c      	mov	ip, r1
 8000346:	2b00      	cmp	r3, #0
 8000348:	f040 8083 	bne.w	8000452 <__udivmoddi4+0x116>
 800034c:	428a      	cmp	r2, r1
 800034e:	4617      	mov	r7, r2
 8000350:	d947      	bls.n	80003e2 <__udivmoddi4+0xa6>
 8000352:	fab2 f282 	clz	r2, r2
 8000356:	b142      	cbz	r2, 800036a <__udivmoddi4+0x2e>
 8000358:	f1c2 0020 	rsb	r0, r2, #32
 800035c:	fa24 f000 	lsr.w	r0, r4, r0
 8000360:	4091      	lsls	r1, r2
 8000362:	4097      	lsls	r7, r2
 8000364:	ea40 0c01 	orr.w	ip, r0, r1
 8000368:	4094      	lsls	r4, r2
 800036a:	ea4f 4817 	mov.w	r8, r7, lsr #16
 800036e:	0c23      	lsrs	r3, r4, #16
 8000370:	fbbc f6f8 	udiv	r6, ip, r8
 8000374:	fa1f fe87 	uxth.w	lr, r7
 8000378:	fb08 c116 	mls	r1, r8, r6, ip
 800037c:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000380:	fb06 f10e 	mul.w	r1, r6, lr
 8000384:	4299      	cmp	r1, r3
 8000386:	d909      	bls.n	800039c <__udivmoddi4+0x60>
 8000388:	18fb      	adds	r3, r7, r3
 800038a:	f106 30ff 	add.w	r0, r6, #4294967295
 800038e:	f080 8119 	bcs.w	80005c4 <__udivmoddi4+0x288>
 8000392:	4299      	cmp	r1, r3
 8000394:	f240 8116 	bls.w	80005c4 <__udivmoddi4+0x288>
 8000398:	3e02      	subs	r6, #2
 800039a:	443b      	add	r3, r7
 800039c:	1a5b      	subs	r3, r3, r1
 800039e:	b2a4      	uxth	r4, r4
 80003a0:	fbb3 f0f8 	udiv	r0, r3, r8
 80003a4:	fb08 3310 	mls	r3, r8, r0, r3
 80003a8:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 80003ac:	fb00 fe0e 	mul.w	lr, r0, lr
 80003b0:	45a6      	cmp	lr, r4
 80003b2:	d909      	bls.n	80003c8 <__udivmoddi4+0x8c>
 80003b4:	193c      	adds	r4, r7, r4
 80003b6:	f100 33ff 	add.w	r3, r0, #4294967295
 80003ba:	f080 8105 	bcs.w	80005c8 <__udivmoddi4+0x28c>
 80003be:	45a6      	cmp	lr, r4
 80003c0:	f240 8102 	bls.w	80005c8 <__udivmoddi4+0x28c>
 80003c4:	3802      	subs	r0, #2
 80003c6:	443c      	add	r4, r7
 80003c8:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 80003cc:	eba4 040e 	sub.w	r4, r4, lr
 80003d0:	2600      	movs	r6, #0
 80003d2:	b11d      	cbz	r5, 80003dc <__udivmoddi4+0xa0>
 80003d4:	40d4      	lsrs	r4, r2
 80003d6:	2300      	movs	r3, #0
 80003d8:	e9c5 4300 	strd	r4, r3, [r5]
 80003dc:	4631      	mov	r1, r6
 80003de:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003e2:	b902      	cbnz	r2, 80003e6 <__udivmoddi4+0xaa>
 80003e4:	deff      	udf	#255	; 0xff
 80003e6:	fab2 f282 	clz	r2, r2
 80003ea:	2a00      	cmp	r2, #0
 80003ec:	d150      	bne.n	8000490 <__udivmoddi4+0x154>
 80003ee:	1bcb      	subs	r3, r1, r7
 80003f0:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80003f4:	fa1f f887 	uxth.w	r8, r7
 80003f8:	2601      	movs	r6, #1
 80003fa:	fbb3 fcfe 	udiv	ip, r3, lr
 80003fe:	0c21      	lsrs	r1, r4, #16
 8000400:	fb0e 331c 	mls	r3, lr, ip, r3
 8000404:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000408:	fb08 f30c 	mul.w	r3, r8, ip
 800040c:	428b      	cmp	r3, r1
 800040e:	d907      	bls.n	8000420 <__udivmoddi4+0xe4>
 8000410:	1879      	adds	r1, r7, r1
 8000412:	f10c 30ff 	add.w	r0, ip, #4294967295
 8000416:	d202      	bcs.n	800041e <__udivmoddi4+0xe2>
 8000418:	428b      	cmp	r3, r1
 800041a:	f200 80e9 	bhi.w	80005f0 <__udivmoddi4+0x2b4>
 800041e:	4684      	mov	ip, r0
 8000420:	1ac9      	subs	r1, r1, r3
 8000422:	b2a3      	uxth	r3, r4
 8000424:	fbb1 f0fe 	udiv	r0, r1, lr
 8000428:	fb0e 1110 	mls	r1, lr, r0, r1
 800042c:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 8000430:	fb08 f800 	mul.w	r8, r8, r0
 8000434:	45a0      	cmp	r8, r4
 8000436:	d907      	bls.n	8000448 <__udivmoddi4+0x10c>
 8000438:	193c      	adds	r4, r7, r4
 800043a:	f100 33ff 	add.w	r3, r0, #4294967295
 800043e:	d202      	bcs.n	8000446 <__udivmoddi4+0x10a>
 8000440:	45a0      	cmp	r8, r4
 8000442:	f200 80d9 	bhi.w	80005f8 <__udivmoddi4+0x2bc>
 8000446:	4618      	mov	r0, r3
 8000448:	eba4 0408 	sub.w	r4, r4, r8
 800044c:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000450:	e7bf      	b.n	80003d2 <__udivmoddi4+0x96>
 8000452:	428b      	cmp	r3, r1
 8000454:	d909      	bls.n	800046a <__udivmoddi4+0x12e>
 8000456:	2d00      	cmp	r5, #0
 8000458:	f000 80b1 	beq.w	80005be <__udivmoddi4+0x282>
 800045c:	2600      	movs	r6, #0
 800045e:	e9c5 0100 	strd	r0, r1, [r5]
 8000462:	4630      	mov	r0, r6
 8000464:	4631      	mov	r1, r6
 8000466:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800046a:	fab3 f683 	clz	r6, r3
 800046e:	2e00      	cmp	r6, #0
 8000470:	d14a      	bne.n	8000508 <__udivmoddi4+0x1cc>
 8000472:	428b      	cmp	r3, r1
 8000474:	d302      	bcc.n	800047c <__udivmoddi4+0x140>
 8000476:	4282      	cmp	r2, r0
 8000478:	f200 80b8 	bhi.w	80005ec <__udivmoddi4+0x2b0>
 800047c:	1a84      	subs	r4, r0, r2
 800047e:	eb61 0103 	sbc.w	r1, r1, r3
 8000482:	2001      	movs	r0, #1
 8000484:	468c      	mov	ip, r1
 8000486:	2d00      	cmp	r5, #0
 8000488:	d0a8      	beq.n	80003dc <__udivmoddi4+0xa0>
 800048a:	e9c5 4c00 	strd	r4, ip, [r5]
 800048e:	e7a5      	b.n	80003dc <__udivmoddi4+0xa0>
 8000490:	f1c2 0320 	rsb	r3, r2, #32
 8000494:	fa20 f603 	lsr.w	r6, r0, r3
 8000498:	4097      	lsls	r7, r2
 800049a:	fa01 f002 	lsl.w	r0, r1, r2
 800049e:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80004a2:	40d9      	lsrs	r1, r3
 80004a4:	4330      	orrs	r0, r6
 80004a6:	0c03      	lsrs	r3, r0, #16
 80004a8:	fbb1 f6fe 	udiv	r6, r1, lr
 80004ac:	fa1f f887 	uxth.w	r8, r7
 80004b0:	fb0e 1116 	mls	r1, lr, r6, r1
 80004b4:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80004b8:	fb06 f108 	mul.w	r1, r6, r8
 80004bc:	4299      	cmp	r1, r3
 80004be:	fa04 f402 	lsl.w	r4, r4, r2
 80004c2:	d909      	bls.n	80004d8 <__udivmoddi4+0x19c>
 80004c4:	18fb      	adds	r3, r7, r3
 80004c6:	f106 3cff 	add.w	ip, r6, #4294967295
 80004ca:	f080 808d 	bcs.w	80005e8 <__udivmoddi4+0x2ac>
 80004ce:	4299      	cmp	r1, r3
 80004d0:	f240 808a 	bls.w	80005e8 <__udivmoddi4+0x2ac>
 80004d4:	3e02      	subs	r6, #2
 80004d6:	443b      	add	r3, r7
 80004d8:	1a5b      	subs	r3, r3, r1
 80004da:	b281      	uxth	r1, r0
 80004dc:	fbb3 f0fe 	udiv	r0, r3, lr
 80004e0:	fb0e 3310 	mls	r3, lr, r0, r3
 80004e4:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80004e8:	fb00 f308 	mul.w	r3, r0, r8
 80004ec:	428b      	cmp	r3, r1
 80004ee:	d907      	bls.n	8000500 <__udivmoddi4+0x1c4>
 80004f0:	1879      	adds	r1, r7, r1
 80004f2:	f100 3cff 	add.w	ip, r0, #4294967295
 80004f6:	d273      	bcs.n	80005e0 <__udivmoddi4+0x2a4>
 80004f8:	428b      	cmp	r3, r1
 80004fa:	d971      	bls.n	80005e0 <__udivmoddi4+0x2a4>
 80004fc:	3802      	subs	r0, #2
 80004fe:	4439      	add	r1, r7
 8000500:	1acb      	subs	r3, r1, r3
 8000502:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 8000506:	e778      	b.n	80003fa <__udivmoddi4+0xbe>
 8000508:	f1c6 0c20 	rsb	ip, r6, #32
 800050c:	fa03 f406 	lsl.w	r4, r3, r6
 8000510:	fa22 f30c 	lsr.w	r3, r2, ip
 8000514:	431c      	orrs	r4, r3
 8000516:	fa20 f70c 	lsr.w	r7, r0, ip
 800051a:	fa01 f306 	lsl.w	r3, r1, r6
 800051e:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 8000522:	fa21 f10c 	lsr.w	r1, r1, ip
 8000526:	431f      	orrs	r7, r3
 8000528:	0c3b      	lsrs	r3, r7, #16
 800052a:	fbb1 f9fe 	udiv	r9, r1, lr
 800052e:	fa1f f884 	uxth.w	r8, r4
 8000532:	fb0e 1119 	mls	r1, lr, r9, r1
 8000536:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 800053a:	fb09 fa08 	mul.w	sl, r9, r8
 800053e:	458a      	cmp	sl, r1
 8000540:	fa02 f206 	lsl.w	r2, r2, r6
 8000544:	fa00 f306 	lsl.w	r3, r0, r6
 8000548:	d908      	bls.n	800055c <__udivmoddi4+0x220>
 800054a:	1861      	adds	r1, r4, r1
 800054c:	f109 30ff 	add.w	r0, r9, #4294967295
 8000550:	d248      	bcs.n	80005e4 <__udivmoddi4+0x2a8>
 8000552:	458a      	cmp	sl, r1
 8000554:	d946      	bls.n	80005e4 <__udivmoddi4+0x2a8>
 8000556:	f1a9 0902 	sub.w	r9, r9, #2
 800055a:	4421      	add	r1, r4
 800055c:	eba1 010a 	sub.w	r1, r1, sl
 8000560:	b2bf      	uxth	r7, r7
 8000562:	fbb1 f0fe 	udiv	r0, r1, lr
 8000566:	fb0e 1110 	mls	r1, lr, r0, r1
 800056a:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 800056e:	fb00 f808 	mul.w	r8, r0, r8
 8000572:	45b8      	cmp	r8, r7
 8000574:	d907      	bls.n	8000586 <__udivmoddi4+0x24a>
 8000576:	19e7      	adds	r7, r4, r7
 8000578:	f100 31ff 	add.w	r1, r0, #4294967295
 800057c:	d22e      	bcs.n	80005dc <__udivmoddi4+0x2a0>
 800057e:	45b8      	cmp	r8, r7
 8000580:	d92c      	bls.n	80005dc <__udivmoddi4+0x2a0>
 8000582:	3802      	subs	r0, #2
 8000584:	4427      	add	r7, r4
 8000586:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 800058a:	eba7 0708 	sub.w	r7, r7, r8
 800058e:	fba0 8902 	umull	r8, r9, r0, r2
 8000592:	454f      	cmp	r7, r9
 8000594:	46c6      	mov	lr, r8
 8000596:	4649      	mov	r1, r9
 8000598:	d31a      	bcc.n	80005d0 <__udivmoddi4+0x294>
 800059a:	d017      	beq.n	80005cc <__udivmoddi4+0x290>
 800059c:	b15d      	cbz	r5, 80005b6 <__udivmoddi4+0x27a>
 800059e:	ebb3 020e 	subs.w	r2, r3, lr
 80005a2:	eb67 0701 	sbc.w	r7, r7, r1
 80005a6:	fa07 fc0c 	lsl.w	ip, r7, ip
 80005aa:	40f2      	lsrs	r2, r6
 80005ac:	ea4c 0202 	orr.w	r2, ip, r2
 80005b0:	40f7      	lsrs	r7, r6
 80005b2:	e9c5 2700 	strd	r2, r7, [r5]
 80005b6:	2600      	movs	r6, #0
 80005b8:	4631      	mov	r1, r6
 80005ba:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80005be:	462e      	mov	r6, r5
 80005c0:	4628      	mov	r0, r5
 80005c2:	e70b      	b.n	80003dc <__udivmoddi4+0xa0>
 80005c4:	4606      	mov	r6, r0
 80005c6:	e6e9      	b.n	800039c <__udivmoddi4+0x60>
 80005c8:	4618      	mov	r0, r3
 80005ca:	e6fd      	b.n	80003c8 <__udivmoddi4+0x8c>
 80005cc:	4543      	cmp	r3, r8
 80005ce:	d2e5      	bcs.n	800059c <__udivmoddi4+0x260>
 80005d0:	ebb8 0e02 	subs.w	lr, r8, r2
 80005d4:	eb69 0104 	sbc.w	r1, r9, r4
 80005d8:	3801      	subs	r0, #1
 80005da:	e7df      	b.n	800059c <__udivmoddi4+0x260>
 80005dc:	4608      	mov	r0, r1
 80005de:	e7d2      	b.n	8000586 <__udivmoddi4+0x24a>
 80005e0:	4660      	mov	r0, ip
 80005e2:	e78d      	b.n	8000500 <__udivmoddi4+0x1c4>
 80005e4:	4681      	mov	r9, r0
 80005e6:	e7b9      	b.n	800055c <__udivmoddi4+0x220>
 80005e8:	4666      	mov	r6, ip
 80005ea:	e775      	b.n	80004d8 <__udivmoddi4+0x19c>
 80005ec:	4630      	mov	r0, r6
 80005ee:	e74a      	b.n	8000486 <__udivmoddi4+0x14a>
 80005f0:	f1ac 0c02 	sub.w	ip, ip, #2
 80005f4:	4439      	add	r1, r7
 80005f6:	e713      	b.n	8000420 <__udivmoddi4+0xe4>
 80005f8:	3802      	subs	r0, #2
 80005fa:	443c      	add	r4, r7
 80005fc:	e724      	b.n	8000448 <__udivmoddi4+0x10c>
 80005fe:	bf00      	nop

08000600 <__aeabi_idiv0>:
 8000600:	4770      	bx	lr
 8000602:	bf00      	nop

08000604 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000604:	b580      	push	{r7, lr}
 8000606:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000608:	f000 fd70 	bl	80010ec <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800060c:	f000 f80c 	bl	8000628 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000610:	f000 f982 	bl	8000918 <MX_GPIO_Init>
  MX_ETH_Init();
 8000614:	f000 f878 	bl	8000708 <MX_ETH_Init>
  MX_USART3_UART_Init();
 8000618:	f000 f8c8 	bl	80007ac <MX_USART3_UART_Init>
  MX_USB_OTG_HS_USB_Init();
 800061c:	f000 f912 	bl	8000844 <MX_USB_OTG_HS_USB_Init>
  MX_FMC_Init();
 8000620:	f000 f918 	bl	8000854 <MX_FMC_Init>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000624:	e7fe      	b.n	8000624 <main+0x20>
	...

08000628 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000628:	b580      	push	{r7, lr}
 800062a:	b09c      	sub	sp, #112	; 0x70
 800062c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800062e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000632:	224c      	movs	r2, #76	; 0x4c
 8000634:	2100      	movs	r1, #0
 8000636:	4618      	mov	r0, r3
 8000638:	f006 fabe 	bl	8006bb8 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800063c:	1d3b      	adds	r3, r7, #4
 800063e:	2220      	movs	r2, #32
 8000640:	2100      	movs	r1, #0
 8000642:	4618      	mov	r0, r3
 8000644:	f006 fab8 	bl	8006bb8 <memset>

  /** Supply configuration update enable
  */
  HAL_PWREx_ConfigSupply(PWR_LDO_SUPPLY);
 8000648:	2002      	movs	r0, #2
 800064a:	f002 fa3f 	bl	8002acc <HAL_PWREx_ConfigSupply>
  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE0);
 800064e:	2300      	movs	r3, #0
 8000650:	603b      	str	r3, [r7, #0]
 8000652:	4b2c      	ldr	r3, [pc, #176]	; (8000704 <SystemClock_Config+0xdc>)
 8000654:	699b      	ldr	r3, [r3, #24]
 8000656:	4a2b      	ldr	r2, [pc, #172]	; (8000704 <SystemClock_Config+0xdc>)
 8000658:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 800065c:	6193      	str	r3, [r2, #24]
 800065e:	4b29      	ldr	r3, [pc, #164]	; (8000704 <SystemClock_Config+0xdc>)
 8000660:	699b      	ldr	r3, [r3, #24]
 8000662:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8000666:	603b      	str	r3, [r7, #0]
 8000668:	683b      	ldr	r3, [r7, #0]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 800066a:	bf00      	nop
 800066c:	4b25      	ldr	r3, [pc, #148]	; (8000704 <SystemClock_Config+0xdc>)
 800066e:	699b      	ldr	r3, [r3, #24]
 8000670:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8000674:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8000678:	d1f8      	bne.n	800066c <SystemClock_Config+0x44>
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI48|RCC_OSCILLATORTYPE_HSE;
 800067a:	2321      	movs	r3, #33	; 0x21
 800067c:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 800067e:	f44f 23a0 	mov.w	r3, #327680	; 0x50000
 8000682:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSI48State = RCC_HSI48_ON;
 8000684:	2301      	movs	r3, #1
 8000686:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000688:	2302      	movs	r3, #2
 800068a:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800068c:	2302      	movs	r3, #2
 800068e:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLM = 4;
 8000690:	2304      	movs	r3, #4
 8000692:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLN = 275;
 8000694:	f240 1313 	movw	r3, #275	; 0x113
 8000698:	657b      	str	r3, [r7, #84]	; 0x54
  RCC_OscInitStruct.PLL.PLLP = 1;
 800069a:	2301      	movs	r3, #1
 800069c:	65bb      	str	r3, [r7, #88]	; 0x58
  RCC_OscInitStruct.PLL.PLLQ = 4;
 800069e:	2304      	movs	r3, #4
 80006a0:	65fb      	str	r3, [r7, #92]	; 0x5c
  RCC_OscInitStruct.PLL.PLLR = 2;
 80006a2:	2302      	movs	r3, #2
 80006a4:	663b      	str	r3, [r7, #96]	; 0x60
  RCC_OscInitStruct.PLL.PLLRGE = RCC_PLL1VCIRANGE_1;
 80006a6:	2304      	movs	r3, #4
 80006a8:	667b      	str	r3, [r7, #100]	; 0x64
  RCC_OscInitStruct.PLL.PLLVCOSEL = RCC_PLL1VCOWIDE;
 80006aa:	2300      	movs	r3, #0
 80006ac:	66bb      	str	r3, [r7, #104]	; 0x68
  RCC_OscInitStruct.PLL.PLLFRACN = 0;
 80006ae:	2300      	movs	r3, #0
 80006b0:	66fb      	str	r3, [r7, #108]	; 0x6c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80006b2:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80006b6:	4618      	mov	r0, r3
 80006b8:	f002 fa42 	bl	8002b40 <HAL_RCC_OscConfig>
 80006bc:	4603      	mov	r3, r0
 80006be:	2b00      	cmp	r3, #0
 80006c0:	d001      	beq.n	80006c6 <SystemClock_Config+0x9e>
  {
    Error_Handler();
 80006c2:	f000 fa35 	bl	8000b30 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80006c6:	233f      	movs	r3, #63	; 0x3f
 80006c8:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
                              |RCC_CLOCKTYPE_D3PCLK1|RCC_CLOCKTYPE_D1PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80006ca:	2303      	movs	r3, #3
 80006cc:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV1;
 80006ce:	2300      	movs	r3, #0
 80006d0:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV2;
 80006d2:	2308      	movs	r3, #8
 80006d4:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB3CLKDivider = RCC_APB3_DIV2;
 80006d6:	2340      	movs	r3, #64	; 0x40
 80006d8:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV2;
 80006da:	2340      	movs	r3, #64	; 0x40
 80006dc:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_APB2_DIV2;
 80006de:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80006e2:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB4CLKDivider = RCC_APB4_DIV2;
 80006e4:	2340      	movs	r3, #64	; 0x40
 80006e6:	623b      	str	r3, [r7, #32]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 80006e8:	1d3b      	adds	r3, r7, #4
 80006ea:	2103      	movs	r1, #3
 80006ec:	4618      	mov	r0, r3
 80006ee:	f002 fdb5 	bl	800325c <HAL_RCC_ClockConfig>
 80006f2:	4603      	mov	r3, r0
 80006f4:	2b00      	cmp	r3, #0
 80006f6:	d001      	beq.n	80006fc <SystemClock_Config+0xd4>
  {
    Error_Handler();
 80006f8:	f000 fa1a 	bl	8000b30 <Error_Handler>
  }
}
 80006fc:	bf00      	nop
 80006fe:	3770      	adds	r7, #112	; 0x70
 8000700:	46bd      	mov	sp, r7
 8000702:	bd80      	pop	{r7, pc}
 8000704:	58024800 	.word	0x58024800

08000708 <MX_ETH_Init>:
  * @brief ETH Initialization Function
  * @param None
  * @retval None
  */
static void MX_ETH_Init(void)
{
 8000708:	b580      	push	{r7, lr}
 800070a:	af00      	add	r7, sp, #0
  /* USER CODE END ETH_Init 0 */

  /* USER CODE BEGIN ETH_Init 1 */

  /* USER CODE END ETH_Init 1 */
  heth.Instance = ETH;
 800070c:	4b22      	ldr	r3, [pc, #136]	; (8000798 <MX_ETH_Init+0x90>)
 800070e:	4a23      	ldr	r2, [pc, #140]	; (800079c <MX_ETH_Init+0x94>)
 8000710:	601a      	str	r2, [r3, #0]
  heth.Init.MACAddr[0] =   0x00;
 8000712:	4b21      	ldr	r3, [pc, #132]	; (8000798 <MX_ETH_Init+0x90>)
 8000714:	685b      	ldr	r3, [r3, #4]
 8000716:	2200      	movs	r2, #0
 8000718:	701a      	strb	r2, [r3, #0]
  heth.Init.MACAddr[1] =   0x80;
 800071a:	4b1f      	ldr	r3, [pc, #124]	; (8000798 <MX_ETH_Init+0x90>)
 800071c:	685b      	ldr	r3, [r3, #4]
 800071e:	3301      	adds	r3, #1
 8000720:	2280      	movs	r2, #128	; 0x80
 8000722:	701a      	strb	r2, [r3, #0]
  heth.Init.MACAddr[2] =   0xE1;
 8000724:	4b1c      	ldr	r3, [pc, #112]	; (8000798 <MX_ETH_Init+0x90>)
 8000726:	685b      	ldr	r3, [r3, #4]
 8000728:	3302      	adds	r3, #2
 800072a:	22e1      	movs	r2, #225	; 0xe1
 800072c:	701a      	strb	r2, [r3, #0]
  heth.Init.MACAddr[3] =   0x00;
 800072e:	4b1a      	ldr	r3, [pc, #104]	; (8000798 <MX_ETH_Init+0x90>)
 8000730:	685b      	ldr	r3, [r3, #4]
 8000732:	3303      	adds	r3, #3
 8000734:	2200      	movs	r2, #0
 8000736:	701a      	strb	r2, [r3, #0]
  heth.Init.MACAddr[4] =   0x00;
 8000738:	4b17      	ldr	r3, [pc, #92]	; (8000798 <MX_ETH_Init+0x90>)
 800073a:	685b      	ldr	r3, [r3, #4]
 800073c:	3304      	adds	r3, #4
 800073e:	2200      	movs	r2, #0
 8000740:	701a      	strb	r2, [r3, #0]
  heth.Init.MACAddr[5] =   0x00;
 8000742:	4b15      	ldr	r3, [pc, #84]	; (8000798 <MX_ETH_Init+0x90>)
 8000744:	685b      	ldr	r3, [r3, #4]
 8000746:	3305      	adds	r3, #5
 8000748:	2200      	movs	r2, #0
 800074a:	701a      	strb	r2, [r3, #0]
  heth.Init.MediaInterface = HAL_ETH_RMII_MODE;
 800074c:	4b12      	ldr	r3, [pc, #72]	; (8000798 <MX_ETH_Init+0x90>)
 800074e:	2201      	movs	r2, #1
 8000750:	721a      	strb	r2, [r3, #8]
  heth.Init.TxDesc = DMATxDscrTab;
 8000752:	4b11      	ldr	r3, [pc, #68]	; (8000798 <MX_ETH_Init+0x90>)
 8000754:	4a12      	ldr	r2, [pc, #72]	; (80007a0 <MX_ETH_Init+0x98>)
 8000756:	60da      	str	r2, [r3, #12]
  heth.Init.RxDesc = DMARxDscrTab;
 8000758:	4b0f      	ldr	r3, [pc, #60]	; (8000798 <MX_ETH_Init+0x90>)
 800075a:	4a12      	ldr	r2, [pc, #72]	; (80007a4 <MX_ETH_Init+0x9c>)
 800075c:	611a      	str	r2, [r3, #16]
  heth.Init.RxBuffLen = 1524;
 800075e:	4b0e      	ldr	r3, [pc, #56]	; (8000798 <MX_ETH_Init+0x90>)
 8000760:	f240 52f4 	movw	r2, #1524	; 0x5f4
 8000764:	615a      	str	r2, [r3, #20]

  /* USER CODE BEGIN MACADDRESS */

  /* USER CODE END MACADDRESS */

  if (HAL_ETH_Init(&heth) != HAL_OK)
 8000766:	480c      	ldr	r0, [pc, #48]	; (8000798 <MX_ETH_Init+0x90>)
 8000768:	f001 fbd8 	bl	8001f1c <HAL_ETH_Init>
 800076c:	4603      	mov	r3, r0
 800076e:	2b00      	cmp	r3, #0
 8000770:	d001      	beq.n	8000776 <MX_ETH_Init+0x6e>
  {
    Error_Handler();
 8000772:	f000 f9dd 	bl	8000b30 <Error_Handler>
  }

  memset(&TxConfig, 0 , sizeof(ETH_TxPacketConfig));
 8000776:	2234      	movs	r2, #52	; 0x34
 8000778:	2100      	movs	r1, #0
 800077a:	480b      	ldr	r0, [pc, #44]	; (80007a8 <MX_ETH_Init+0xa0>)
 800077c:	f006 fa1c 	bl	8006bb8 <memset>
  TxConfig.Attributes = ETH_TX_PACKETS_FEATURES_CSUM | ETH_TX_PACKETS_FEATURES_CRCPAD;
 8000780:	4b09      	ldr	r3, [pc, #36]	; (80007a8 <MX_ETH_Init+0xa0>)
 8000782:	2221      	movs	r2, #33	; 0x21
 8000784:	601a      	str	r2, [r3, #0]
  TxConfig.ChecksumCtrl = ETH_CHECKSUM_IPHDR_PAYLOAD_INSERT_PHDR_CALC;
 8000786:	4b08      	ldr	r3, [pc, #32]	; (80007a8 <MX_ETH_Init+0xa0>)
 8000788:	f44f 3240 	mov.w	r2, #196608	; 0x30000
 800078c:	615a      	str	r2, [r3, #20]
  TxConfig.CRCPadCtrl = ETH_CRC_PAD_INSERT;
 800078e:	4b06      	ldr	r3, [pc, #24]	; (80007a8 <MX_ETH_Init+0xa0>)
 8000790:	2200      	movs	r2, #0
 8000792:	611a      	str	r2, [r3, #16]
  /* USER CODE BEGIN ETH_Init 2 */

  /* USER CODE END ETH_Init 2 */

}
 8000794:	bf00      	nop
 8000796:	bd80      	pop	{r7, pc}
 8000798:	200001cc 	.word	0x200001cc
 800079c:	40028000 	.word	0x40028000
 80007a0:	20000070 	.word	0x20000070
 80007a4:	20000010 	.word	0x20000010
 80007a8:	20000254 	.word	0x20000254

080007ac <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 80007ac:	b580      	push	{r7, lr}
 80007ae:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 80007b0:	4b22      	ldr	r3, [pc, #136]	; (800083c <MX_USART3_UART_Init+0x90>)
 80007b2:	4a23      	ldr	r2, [pc, #140]	; (8000840 <MX_USART3_UART_Init+0x94>)
 80007b4:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 80007b6:	4b21      	ldr	r3, [pc, #132]	; (800083c <MX_USART3_UART_Init+0x90>)
 80007b8:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80007bc:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 80007be:	4b1f      	ldr	r3, [pc, #124]	; (800083c <MX_USART3_UART_Init+0x90>)
 80007c0:	2200      	movs	r2, #0
 80007c2:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 80007c4:	4b1d      	ldr	r3, [pc, #116]	; (800083c <MX_USART3_UART_Init+0x90>)
 80007c6:	2200      	movs	r2, #0
 80007c8:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 80007ca:	4b1c      	ldr	r3, [pc, #112]	; (800083c <MX_USART3_UART_Init+0x90>)
 80007cc:	2200      	movs	r2, #0
 80007ce:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 80007d0:	4b1a      	ldr	r3, [pc, #104]	; (800083c <MX_USART3_UART_Init+0x90>)
 80007d2:	220c      	movs	r2, #12
 80007d4:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80007d6:	4b19      	ldr	r3, [pc, #100]	; (800083c <MX_USART3_UART_Init+0x90>)
 80007d8:	2200      	movs	r2, #0
 80007da:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 80007dc:	4b17      	ldr	r3, [pc, #92]	; (800083c <MX_USART3_UART_Init+0x90>)
 80007de:	2200      	movs	r2, #0
 80007e0:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80007e2:	4b16      	ldr	r3, [pc, #88]	; (800083c <MX_USART3_UART_Init+0x90>)
 80007e4:	2200      	movs	r2, #0
 80007e6:	621a      	str	r2, [r3, #32]
  huart3.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 80007e8:	4b14      	ldr	r3, [pc, #80]	; (800083c <MX_USART3_UART_Init+0x90>)
 80007ea:	2200      	movs	r2, #0
 80007ec:	625a      	str	r2, [r3, #36]	; 0x24
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80007ee:	4b13      	ldr	r3, [pc, #76]	; (800083c <MX_USART3_UART_Init+0x90>)
 80007f0:	2200      	movs	r2, #0
 80007f2:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart3) != HAL_OK)
 80007f4:	4811      	ldr	r0, [pc, #68]	; (800083c <MX_USART3_UART_Init+0x90>)
 80007f6:	f004 fc29 	bl	800504c <HAL_UART_Init>
 80007fa:	4603      	mov	r3, r0
 80007fc:	2b00      	cmp	r3, #0
 80007fe:	d001      	beq.n	8000804 <MX_USART3_UART_Init+0x58>
  {
    Error_Handler();
 8000800:	f000 f996 	bl	8000b30 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart3, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000804:	2100      	movs	r1, #0
 8000806:	480d      	ldr	r0, [pc, #52]	; (800083c <MX_USART3_UART_Init+0x90>)
 8000808:	f005 ffcf 	bl	80067aa <HAL_UARTEx_SetTxFifoThreshold>
 800080c:	4603      	mov	r3, r0
 800080e:	2b00      	cmp	r3, #0
 8000810:	d001      	beq.n	8000816 <MX_USART3_UART_Init+0x6a>
  {
    Error_Handler();
 8000812:	f000 f98d 	bl	8000b30 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart3, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000816:	2100      	movs	r1, #0
 8000818:	4808      	ldr	r0, [pc, #32]	; (800083c <MX_USART3_UART_Init+0x90>)
 800081a:	f006 f804 	bl	8006826 <HAL_UARTEx_SetRxFifoThreshold>
 800081e:	4603      	mov	r3, r0
 8000820:	2b00      	cmp	r3, #0
 8000822:	d001      	beq.n	8000828 <MX_USART3_UART_Init+0x7c>
  {
    Error_Handler();
 8000824:	f000 f984 	bl	8000b30 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart3) != HAL_OK)
 8000828:	4804      	ldr	r0, [pc, #16]	; (800083c <MX_USART3_UART_Init+0x90>)
 800082a:	f005 ff85 	bl	8006738 <HAL_UARTEx_DisableFifoMode>
 800082e:	4603      	mov	r3, r0
 8000830:	2b00      	cmp	r3, #0
 8000832:	d001      	beq.n	8000838 <MX_USART3_UART_Init+0x8c>
  {
    Error_Handler();
 8000834:	f000 f97c 	bl	8000b30 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8000838:	bf00      	nop
 800083a:	bd80      	pop	{r7, pc}
 800083c:	200000f0 	.word	0x200000f0
 8000840:	40004800 	.word	0x40004800

08000844 <MX_USB_OTG_HS_USB_Init>:
  * @brief USB_OTG_HS Initialization Function
  * @param None
  * @retval None
  */
static void MX_USB_OTG_HS_USB_Init(void)
{
 8000844:	b480      	push	{r7}
 8000846:	af00      	add	r7, sp, #0
  /* USER CODE END USB_OTG_HS_Init 1 */
  /* USER CODE BEGIN USB_OTG_HS_Init 2 */

  /* USER CODE END USB_OTG_HS_Init 2 */

}
 8000848:	bf00      	nop
 800084a:	46bd      	mov	sp, r7
 800084c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000850:	4770      	bx	lr
	...

08000854 <MX_FMC_Init>:

/* FMC initialization function */
static void MX_FMC_Init(void)
{
 8000854:	b580      	push	{r7, lr}
 8000856:	b088      	sub	sp, #32
 8000858:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN FMC_Init 0 */

  /* USER CODE END FMC_Init 0 */

  FMC_NORSRAM_TimingTypeDef Timing = {0};
 800085a:	1d3b      	adds	r3, r7, #4
 800085c:	2200      	movs	r2, #0
 800085e:	601a      	str	r2, [r3, #0]
 8000860:	605a      	str	r2, [r3, #4]
 8000862:	609a      	str	r2, [r3, #8]
 8000864:	60da      	str	r2, [r3, #12]
 8000866:	611a      	str	r2, [r3, #16]
 8000868:	615a      	str	r2, [r3, #20]
 800086a:	619a      	str	r2, [r3, #24]

  /* USER CODE END FMC_Init 1 */

  /** Perform the SRAM1 memory initialization sequence
  */
  hsram1.Instance = FMC_NORSRAM_DEVICE;
 800086c:	4b27      	ldr	r3, [pc, #156]	; (800090c <MX_FMC_Init+0xb8>)
 800086e:	4a28      	ldr	r2, [pc, #160]	; (8000910 <MX_FMC_Init+0xbc>)
 8000870:	601a      	str	r2, [r3, #0]
  hsram1.Extended = FMC_NORSRAM_EXTENDED_DEVICE;
 8000872:	4b26      	ldr	r3, [pc, #152]	; (800090c <MX_FMC_Init+0xb8>)
 8000874:	4a27      	ldr	r2, [pc, #156]	; (8000914 <MX_FMC_Init+0xc0>)
 8000876:	605a      	str	r2, [r3, #4]
  /* hsram1.Init */
  hsram1.Init.NSBank = FMC_NORSRAM_BANK1;
 8000878:	4b24      	ldr	r3, [pc, #144]	; (800090c <MX_FMC_Init+0xb8>)
 800087a:	2200      	movs	r2, #0
 800087c:	609a      	str	r2, [r3, #8]
  hsram1.Init.DataAddressMux = FMC_DATA_ADDRESS_MUX_DISABLE;
 800087e:	4b23      	ldr	r3, [pc, #140]	; (800090c <MX_FMC_Init+0xb8>)
 8000880:	2200      	movs	r2, #0
 8000882:	60da      	str	r2, [r3, #12]
  hsram1.Init.MemoryType = FMC_MEMORY_TYPE_SRAM;
 8000884:	4b21      	ldr	r3, [pc, #132]	; (800090c <MX_FMC_Init+0xb8>)
 8000886:	2200      	movs	r2, #0
 8000888:	611a      	str	r2, [r3, #16]
  hsram1.Init.MemoryDataWidth = FMC_NORSRAM_MEM_BUS_WIDTH_8;
 800088a:	4b20      	ldr	r3, [pc, #128]	; (800090c <MX_FMC_Init+0xb8>)
 800088c:	2200      	movs	r2, #0
 800088e:	615a      	str	r2, [r3, #20]
  hsram1.Init.BurstAccessMode = FMC_BURST_ACCESS_MODE_DISABLE;
 8000890:	4b1e      	ldr	r3, [pc, #120]	; (800090c <MX_FMC_Init+0xb8>)
 8000892:	2200      	movs	r2, #0
 8000894:	619a      	str	r2, [r3, #24]
  hsram1.Init.WaitSignalPolarity = FMC_WAIT_SIGNAL_POLARITY_LOW;
 8000896:	4b1d      	ldr	r3, [pc, #116]	; (800090c <MX_FMC_Init+0xb8>)
 8000898:	2200      	movs	r2, #0
 800089a:	61da      	str	r2, [r3, #28]
  hsram1.Init.WaitSignalActive = FMC_WAIT_TIMING_BEFORE_WS;
 800089c:	4b1b      	ldr	r3, [pc, #108]	; (800090c <MX_FMC_Init+0xb8>)
 800089e:	2200      	movs	r2, #0
 80008a0:	621a      	str	r2, [r3, #32]
  hsram1.Init.WriteOperation = FMC_WRITE_OPERATION_DISABLE;
 80008a2:	4b1a      	ldr	r3, [pc, #104]	; (800090c <MX_FMC_Init+0xb8>)
 80008a4:	2200      	movs	r2, #0
 80008a6:	625a      	str	r2, [r3, #36]	; 0x24
  hsram1.Init.WaitSignal = FMC_WAIT_SIGNAL_DISABLE;
 80008a8:	4b18      	ldr	r3, [pc, #96]	; (800090c <MX_FMC_Init+0xb8>)
 80008aa:	2200      	movs	r2, #0
 80008ac:	629a      	str	r2, [r3, #40]	; 0x28
  hsram1.Init.ExtendedMode = FMC_EXTENDED_MODE_DISABLE;
 80008ae:	4b17      	ldr	r3, [pc, #92]	; (800090c <MX_FMC_Init+0xb8>)
 80008b0:	2200      	movs	r2, #0
 80008b2:	62da      	str	r2, [r3, #44]	; 0x2c
  hsram1.Init.AsynchronousWait = FMC_ASYNCHRONOUS_WAIT_DISABLE;
 80008b4:	4b15      	ldr	r3, [pc, #84]	; (800090c <MX_FMC_Init+0xb8>)
 80008b6:	2200      	movs	r2, #0
 80008b8:	631a      	str	r2, [r3, #48]	; 0x30
  hsram1.Init.WriteBurst = FMC_WRITE_BURST_DISABLE;
 80008ba:	4b14      	ldr	r3, [pc, #80]	; (800090c <MX_FMC_Init+0xb8>)
 80008bc:	2200      	movs	r2, #0
 80008be:	635a      	str	r2, [r3, #52]	; 0x34
  hsram1.Init.ContinuousClock = FMC_CONTINUOUS_CLOCK_SYNC_ONLY;
 80008c0:	4b12      	ldr	r3, [pc, #72]	; (800090c <MX_FMC_Init+0xb8>)
 80008c2:	2200      	movs	r2, #0
 80008c4:	639a      	str	r2, [r3, #56]	; 0x38
  hsram1.Init.WriteFifo = FMC_WRITE_FIFO_ENABLE;
 80008c6:	4b11      	ldr	r3, [pc, #68]	; (800090c <MX_FMC_Init+0xb8>)
 80008c8:	2200      	movs	r2, #0
 80008ca:	63da      	str	r2, [r3, #60]	; 0x3c
  hsram1.Init.PageSize = FMC_PAGE_SIZE_NONE;
 80008cc:	4b0f      	ldr	r3, [pc, #60]	; (800090c <MX_FMC_Init+0xb8>)
 80008ce:	2200      	movs	r2, #0
 80008d0:	641a      	str	r2, [r3, #64]	; 0x40
  /* Timing */
  Timing.AddressSetupTime = 15;
 80008d2:	230f      	movs	r3, #15
 80008d4:	607b      	str	r3, [r7, #4]
  Timing.AddressHoldTime = 15;
 80008d6:	230f      	movs	r3, #15
 80008d8:	60bb      	str	r3, [r7, #8]
  Timing.DataSetupTime = 255;
 80008da:	23ff      	movs	r3, #255	; 0xff
 80008dc:	60fb      	str	r3, [r7, #12]
  Timing.BusTurnAroundDuration = 15;
 80008de:	230f      	movs	r3, #15
 80008e0:	613b      	str	r3, [r7, #16]
  Timing.CLKDivision = 16;
 80008e2:	2310      	movs	r3, #16
 80008e4:	617b      	str	r3, [r7, #20]
  Timing.DataLatency = 17;
 80008e6:	2311      	movs	r3, #17
 80008e8:	61bb      	str	r3, [r7, #24]
  Timing.AccessMode = FMC_ACCESS_MODE_A;
 80008ea:	2300      	movs	r3, #0
 80008ec:	61fb      	str	r3, [r7, #28]
  /* ExtTiming */

  if (HAL_SRAM_Init(&hsram1, &Timing, NULL) != HAL_OK)
 80008ee:	1d3b      	adds	r3, r7, #4
 80008f0:	2200      	movs	r2, #0
 80008f2:	4619      	mov	r1, r3
 80008f4:	4805      	ldr	r0, [pc, #20]	; (800090c <MX_FMC_Init+0xb8>)
 80008f6:	f004 fb59 	bl	8004fac <HAL_SRAM_Init>
 80008fa:	4603      	mov	r3, r0
 80008fc:	2b00      	cmp	r3, #0
 80008fe:	d001      	beq.n	8000904 <MX_FMC_Init+0xb0>
  {
    Error_Handler( );
 8000900:	f000 f916 	bl	8000b30 <Error_Handler>
  }

  /* USER CODE BEGIN FMC_Init 2 */

  /* USER CODE END FMC_Init 2 */
}
 8000904:	bf00      	nop
 8000906:	3720      	adds	r7, #32
 8000908:	46bd      	mov	sp, r7
 800090a:	bd80      	pop	{r7, pc}
 800090c:	20000180 	.word	0x20000180
 8000910:	52004000 	.word	0x52004000
 8000914:	52004104 	.word	0x52004104

08000918 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000918:	b580      	push	{r7, lr}
 800091a:	b08e      	sub	sp, #56	; 0x38
 800091c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800091e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000922:	2200      	movs	r2, #0
 8000924:	601a      	str	r2, [r3, #0]
 8000926:	605a      	str	r2, [r3, #4]
 8000928:	609a      	str	r2, [r3, #8]
 800092a:	60da      	str	r2, [r3, #12]
 800092c:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800092e:	4b78      	ldr	r3, [pc, #480]	; (8000b10 <MX_GPIO_Init+0x1f8>)
 8000930:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000934:	4a76      	ldr	r2, [pc, #472]	; (8000b10 <MX_GPIO_Init+0x1f8>)
 8000936:	f043 0304 	orr.w	r3, r3, #4
 800093a:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800093e:	4b74      	ldr	r3, [pc, #464]	; (8000b10 <MX_GPIO_Init+0x1f8>)
 8000940:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000944:	f003 0304 	and.w	r3, r3, #4
 8000948:	623b      	str	r3, [r7, #32]
 800094a:	6a3b      	ldr	r3, [r7, #32]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 800094c:	4b70      	ldr	r3, [pc, #448]	; (8000b10 <MX_GPIO_Init+0x1f8>)
 800094e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000952:	4a6f      	ldr	r2, [pc, #444]	; (8000b10 <MX_GPIO_Init+0x1f8>)
 8000954:	f043 0320 	orr.w	r3, r3, #32
 8000958:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800095c:	4b6c      	ldr	r3, [pc, #432]	; (8000b10 <MX_GPIO_Init+0x1f8>)
 800095e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000962:	f003 0320 	and.w	r3, r3, #32
 8000966:	61fb      	str	r3, [r7, #28]
 8000968:	69fb      	ldr	r3, [r7, #28]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800096a:	4b69      	ldr	r3, [pc, #420]	; (8000b10 <MX_GPIO_Init+0x1f8>)
 800096c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000970:	4a67      	ldr	r2, [pc, #412]	; (8000b10 <MX_GPIO_Init+0x1f8>)
 8000972:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000976:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800097a:	4b65      	ldr	r3, [pc, #404]	; (8000b10 <MX_GPIO_Init+0x1f8>)
 800097c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000980:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000984:	61bb      	str	r3, [r7, #24]
 8000986:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000988:	4b61      	ldr	r3, [pc, #388]	; (8000b10 <MX_GPIO_Init+0x1f8>)
 800098a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800098e:	4a60      	ldr	r2, [pc, #384]	; (8000b10 <MX_GPIO_Init+0x1f8>)
 8000990:	f043 0301 	orr.w	r3, r3, #1
 8000994:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000998:	4b5d      	ldr	r3, [pc, #372]	; (8000b10 <MX_GPIO_Init+0x1f8>)
 800099a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800099e:	f003 0301 	and.w	r3, r3, #1
 80009a2:	617b      	str	r3, [r7, #20]
 80009a4:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80009a6:	4b5a      	ldr	r3, [pc, #360]	; (8000b10 <MX_GPIO_Init+0x1f8>)
 80009a8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80009ac:	4a58      	ldr	r2, [pc, #352]	; (8000b10 <MX_GPIO_Init+0x1f8>)
 80009ae:	f043 0302 	orr.w	r3, r3, #2
 80009b2:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80009b6:	4b56      	ldr	r3, [pc, #344]	; (8000b10 <MX_GPIO_Init+0x1f8>)
 80009b8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80009bc:	f003 0302 	and.w	r3, r3, #2
 80009c0:	613b      	str	r3, [r7, #16]
 80009c2:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 80009c4:	4b52      	ldr	r3, [pc, #328]	; (8000b10 <MX_GPIO_Init+0x1f8>)
 80009c6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80009ca:	4a51      	ldr	r2, [pc, #324]	; (8000b10 <MX_GPIO_Init+0x1f8>)
 80009cc:	f043 0310 	orr.w	r3, r3, #16
 80009d0:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80009d4:	4b4e      	ldr	r3, [pc, #312]	; (8000b10 <MX_GPIO_Init+0x1f8>)
 80009d6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80009da:	f003 0310 	and.w	r3, r3, #16
 80009de:	60fb      	str	r3, [r7, #12]
 80009e0:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80009e2:	4b4b      	ldr	r3, [pc, #300]	; (8000b10 <MX_GPIO_Init+0x1f8>)
 80009e4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80009e8:	4a49      	ldr	r2, [pc, #292]	; (8000b10 <MX_GPIO_Init+0x1f8>)
 80009ea:	f043 0308 	orr.w	r3, r3, #8
 80009ee:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80009f2:	4b47      	ldr	r3, [pc, #284]	; (8000b10 <MX_GPIO_Init+0x1f8>)
 80009f4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80009f8:	f003 0308 	and.w	r3, r3, #8
 80009fc:	60bb      	str	r3, [r7, #8]
 80009fe:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8000a00:	4b43      	ldr	r3, [pc, #268]	; (8000b10 <MX_GPIO_Init+0x1f8>)
 8000a02:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000a06:	4a42      	ldr	r2, [pc, #264]	; (8000b10 <MX_GPIO_Init+0x1f8>)
 8000a08:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000a0c:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000a10:	4b3f      	ldr	r3, [pc, #252]	; (8000b10 <MX_GPIO_Init+0x1f8>)
 8000a12:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000a16:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000a1a:	607b      	str	r3, [r7, #4]
 8000a1c:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LED_GREEN_Pin|LED_RED_Pin, GPIO_PIN_RESET);
 8000a1e:	2200      	movs	r2, #0
 8000a20:	f244 0101 	movw	r1, #16385	; 0x4001
 8000a24:	483b      	ldr	r0, [pc, #236]	; (8000b14 <MX_GPIO_Init+0x1fc>)
 8000a26:	f002 f837 	bl	8002a98 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, USB_FS_PWR_EN_Pin|GPIO_PIN_11|GPIO_PIN_3, GPIO_PIN_RESET);
 8000a2a:	2200      	movs	r2, #0
 8000a2c:	f640 4108 	movw	r1, #3080	; 0xc08
 8000a30:	4839      	ldr	r0, [pc, #228]	; (8000b18 <MX_GPIO_Init+0x200>)
 8000a32:	f002 f831 	bl	8002a98 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED_YELLOW_GPIO_Port, LED_YELLOW_Pin, GPIO_PIN_RESET);
 8000a36:	2200      	movs	r2, #0
 8000a38:	2102      	movs	r1, #2
 8000a3a:	4838      	ldr	r0, [pc, #224]	; (8000b1c <MX_GPIO_Init+0x204>)
 8000a3c:	f002 f82c 	bl	8002a98 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8000a40:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000a44:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000a46:	2300      	movs	r3, #0
 8000a48:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a4a:	2300      	movs	r3, #0
 8000a4c:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8000a4e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000a52:	4619      	mov	r1, r3
 8000a54:	4832      	ldr	r0, [pc, #200]	; (8000b20 <MX_GPIO_Init+0x208>)
 8000a56:	f001 fe77 	bl	8002748 <HAL_GPIO_Init>

  /*Configure GPIO pins : LED_GREEN_Pin LED_RED_Pin */
  GPIO_InitStruct.Pin = LED_GREEN_Pin|LED_RED_Pin;
 8000a5a:	f244 0301 	movw	r3, #16385	; 0x4001
 8000a5e:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000a60:	2301      	movs	r3, #1
 8000a62:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a64:	2300      	movs	r3, #0
 8000a66:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000a68:	2300      	movs	r3, #0
 8000a6a:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000a6c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000a70:	4619      	mov	r1, r3
 8000a72:	4828      	ldr	r0, [pc, #160]	; (8000b14 <MX_GPIO_Init+0x1fc>)
 8000a74:	f001 fe68 	bl	8002748 <HAL_GPIO_Init>

  /*Configure GPIO pins : USB_FS_PWR_EN_Pin PD11 PD3 */
  GPIO_InitStruct.Pin = USB_FS_PWR_EN_Pin|GPIO_PIN_11|GPIO_PIN_3;
 8000a78:	f640 4308 	movw	r3, #3080	; 0xc08
 8000a7c:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000a7e:	2301      	movs	r3, #1
 8000a80:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a82:	2300      	movs	r3, #0
 8000a84:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000a86:	2300      	movs	r3, #0
 8000a88:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000a8a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000a8e:	4619      	mov	r1, r3
 8000a90:	4821      	ldr	r0, [pc, #132]	; (8000b18 <MX_GPIO_Init+0x200>)
 8000a92:	f001 fe59 	bl	8002748 <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_FS_OVCR_Pin */
  GPIO_InitStruct.Pin = USB_FS_OVCR_Pin;
 8000a96:	2380      	movs	r3, #128	; 0x80
 8000a98:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000a9a:	4b22      	ldr	r3, [pc, #136]	; (8000b24 <MX_GPIO_Init+0x20c>)
 8000a9c:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a9e:	2300      	movs	r3, #0
 8000aa0:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(USB_FS_OVCR_GPIO_Port, &GPIO_InitStruct);
 8000aa2:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000aa6:	4619      	mov	r1, r3
 8000aa8:	481f      	ldr	r0, [pc, #124]	; (8000b28 <MX_GPIO_Init+0x210>)
 8000aaa:	f001 fe4d 	bl	8002748 <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_FS_VBUS_Pin */
  GPIO_InitStruct.Pin = USB_FS_VBUS_Pin;
 8000aae:	f44f 7300 	mov.w	r3, #512	; 0x200
 8000ab2:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000ab4:	2300      	movs	r3, #0
 8000ab6:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ab8:	2300      	movs	r3, #0
 8000aba:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(USB_FS_VBUS_GPIO_Port, &GPIO_InitStruct);
 8000abc:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000ac0:	4619      	mov	r1, r3
 8000ac2:	481a      	ldr	r0, [pc, #104]	; (8000b2c <MX_GPIO_Init+0x214>)
 8000ac4:	f001 fe40 	bl	8002748 <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_FS_ID_Pin */
  GPIO_InitStruct.Pin = USB_FS_ID_Pin;
 8000ac8:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000acc:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000ace:	2302      	movs	r3, #2
 8000ad0:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ad2:	2300      	movs	r3, #0
 8000ad4:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000ad6:	2300      	movs	r3, #0
 8000ad8:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG1_HS;
 8000ada:	230a      	movs	r3, #10
 8000adc:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(USB_FS_ID_GPIO_Port, &GPIO_InitStruct);
 8000ade:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000ae2:	4619      	mov	r1, r3
 8000ae4:	4811      	ldr	r0, [pc, #68]	; (8000b2c <MX_GPIO_Init+0x214>)
 8000ae6:	f001 fe2f 	bl	8002748 <HAL_GPIO_Init>

  /*Configure GPIO pin : LED_YELLOW_Pin */
  GPIO_InitStruct.Pin = LED_YELLOW_Pin;
 8000aea:	2302      	movs	r3, #2
 8000aec:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000aee:	2301      	movs	r3, #1
 8000af0:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000af2:	2300      	movs	r3, #0
 8000af4:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000af6:	2300      	movs	r3, #0
 8000af8:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(LED_YELLOW_GPIO_Port, &GPIO_InitStruct);
 8000afa:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000afe:	4619      	mov	r1, r3
 8000b00:	4806      	ldr	r0, [pc, #24]	; (8000b1c <MX_GPIO_Init+0x204>)
 8000b02:	f001 fe21 	bl	8002748 <HAL_GPIO_Init>

}
 8000b06:	bf00      	nop
 8000b08:	3738      	adds	r7, #56	; 0x38
 8000b0a:	46bd      	mov	sp, r7
 8000b0c:	bd80      	pop	{r7, pc}
 8000b0e:	bf00      	nop
 8000b10:	58024400 	.word	0x58024400
 8000b14:	58020400 	.word	0x58020400
 8000b18:	58020c00 	.word	0x58020c00
 8000b1c:	58021000 	.word	0x58021000
 8000b20:	58020800 	.word	0x58020800
 8000b24:	11110000 	.word	0x11110000
 8000b28:	58021800 	.word	0x58021800
 8000b2c:	58020000 	.word	0x58020000

08000b30 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000b30:	b480      	push	{r7}
 8000b32:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000b34:	b672      	cpsid	i
}
 8000b36:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000b38:	e7fe      	b.n	8000b38 <Error_Handler+0x8>
	...

08000b3c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000b3c:	b480      	push	{r7}
 8000b3e:	b083      	sub	sp, #12
 8000b40:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000b42:	4b0a      	ldr	r3, [pc, #40]	; (8000b6c <HAL_MspInit+0x30>)
 8000b44:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8000b48:	4a08      	ldr	r2, [pc, #32]	; (8000b6c <HAL_MspInit+0x30>)
 8000b4a:	f043 0302 	orr.w	r3, r3, #2
 8000b4e:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 8000b52:	4b06      	ldr	r3, [pc, #24]	; (8000b6c <HAL_MspInit+0x30>)
 8000b54:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8000b58:	f003 0302 	and.w	r3, r3, #2
 8000b5c:	607b      	str	r3, [r7, #4]
 8000b5e:	687b      	ldr	r3, [r7, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000b60:	bf00      	nop
 8000b62:	370c      	adds	r7, #12
 8000b64:	46bd      	mov	sp, r7
 8000b66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b6a:	4770      	bx	lr
 8000b6c:	58024400 	.word	0x58024400

08000b70 <HAL_ETH_MspInit>:
* This function configures the hardware resources used in this example
* @param heth: ETH handle pointer
* @retval None
*/
void HAL_ETH_MspInit(ETH_HandleTypeDef* heth)
{
 8000b70:	b580      	push	{r7, lr}
 8000b72:	b08e      	sub	sp, #56	; 0x38
 8000b74:	af00      	add	r7, sp, #0
 8000b76:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000b78:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000b7c:	2200      	movs	r2, #0
 8000b7e:	601a      	str	r2, [r3, #0]
 8000b80:	605a      	str	r2, [r3, #4]
 8000b82:	609a      	str	r2, [r3, #8]
 8000b84:	60da      	str	r2, [r3, #12]
 8000b86:	611a      	str	r2, [r3, #16]
  if(heth->Instance==ETH)
 8000b88:	687b      	ldr	r3, [r7, #4]
 8000b8a:	681b      	ldr	r3, [r3, #0]
 8000b8c:	4a59      	ldr	r2, [pc, #356]	; (8000cf4 <HAL_ETH_MspInit+0x184>)
 8000b8e:	4293      	cmp	r3, r2
 8000b90:	f040 80ab 	bne.w	8000cea <HAL_ETH_MspInit+0x17a>
  {
  /* USER CODE BEGIN ETH_MspInit 0 */

  /* USER CODE END ETH_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ETH1MAC_CLK_ENABLE();
 8000b94:	4b58      	ldr	r3, [pc, #352]	; (8000cf8 <HAL_ETH_MspInit+0x188>)
 8000b96:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8000b9a:	4a57      	ldr	r2, [pc, #348]	; (8000cf8 <HAL_ETH_MspInit+0x188>)
 8000b9c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8000ba0:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 8000ba4:	4b54      	ldr	r3, [pc, #336]	; (8000cf8 <HAL_ETH_MspInit+0x188>)
 8000ba6:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8000baa:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8000bae:	623b      	str	r3, [r7, #32]
 8000bb0:	6a3b      	ldr	r3, [r7, #32]
    __HAL_RCC_ETH1TX_CLK_ENABLE();
 8000bb2:	4b51      	ldr	r3, [pc, #324]	; (8000cf8 <HAL_ETH_MspInit+0x188>)
 8000bb4:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8000bb8:	4a4f      	ldr	r2, [pc, #316]	; (8000cf8 <HAL_ETH_MspInit+0x188>)
 8000bba:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000bbe:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 8000bc2:	4b4d      	ldr	r3, [pc, #308]	; (8000cf8 <HAL_ETH_MspInit+0x188>)
 8000bc4:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8000bc8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000bcc:	61fb      	str	r3, [r7, #28]
 8000bce:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_ETH1RX_CLK_ENABLE();
 8000bd0:	4b49      	ldr	r3, [pc, #292]	; (8000cf8 <HAL_ETH_MspInit+0x188>)
 8000bd2:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8000bd6:	4a48      	ldr	r2, [pc, #288]	; (8000cf8 <HAL_ETH_MspInit+0x188>)
 8000bd8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000bdc:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 8000be0:	4b45      	ldr	r3, [pc, #276]	; (8000cf8 <HAL_ETH_MspInit+0x188>)
 8000be2:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8000be6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000bea:	61bb      	str	r3, [r7, #24]
 8000bec:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000bee:	4b42      	ldr	r3, [pc, #264]	; (8000cf8 <HAL_ETH_MspInit+0x188>)
 8000bf0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000bf4:	4a40      	ldr	r2, [pc, #256]	; (8000cf8 <HAL_ETH_MspInit+0x188>)
 8000bf6:	f043 0304 	orr.w	r3, r3, #4
 8000bfa:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000bfe:	4b3e      	ldr	r3, [pc, #248]	; (8000cf8 <HAL_ETH_MspInit+0x188>)
 8000c00:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000c04:	f003 0304 	and.w	r3, r3, #4
 8000c08:	617b      	str	r3, [r7, #20]
 8000c0a:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000c0c:	4b3a      	ldr	r3, [pc, #232]	; (8000cf8 <HAL_ETH_MspInit+0x188>)
 8000c0e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000c12:	4a39      	ldr	r2, [pc, #228]	; (8000cf8 <HAL_ETH_MspInit+0x188>)
 8000c14:	f043 0301 	orr.w	r3, r3, #1
 8000c18:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000c1c:	4b36      	ldr	r3, [pc, #216]	; (8000cf8 <HAL_ETH_MspInit+0x188>)
 8000c1e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000c22:	f003 0301 	and.w	r3, r3, #1
 8000c26:	613b      	str	r3, [r7, #16]
 8000c28:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000c2a:	4b33      	ldr	r3, [pc, #204]	; (8000cf8 <HAL_ETH_MspInit+0x188>)
 8000c2c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000c30:	4a31      	ldr	r2, [pc, #196]	; (8000cf8 <HAL_ETH_MspInit+0x188>)
 8000c32:	f043 0302 	orr.w	r3, r3, #2
 8000c36:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000c3a:	4b2f      	ldr	r3, [pc, #188]	; (8000cf8 <HAL_ETH_MspInit+0x188>)
 8000c3c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000c40:	f003 0302 	and.w	r3, r3, #2
 8000c44:	60fb      	str	r3, [r7, #12]
 8000c46:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOG_CLK_ENABLE();
 8000c48:	4b2b      	ldr	r3, [pc, #172]	; (8000cf8 <HAL_ETH_MspInit+0x188>)
 8000c4a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000c4e:	4a2a      	ldr	r2, [pc, #168]	; (8000cf8 <HAL_ETH_MspInit+0x188>)
 8000c50:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000c54:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000c58:	4b27      	ldr	r3, [pc, #156]	; (8000cf8 <HAL_ETH_MspInit+0x188>)
 8000c5a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000c5e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000c62:	60bb      	str	r3, [r7, #8]
 8000c64:	68bb      	ldr	r3, [r7, #8]
    PC5     ------> ETH_RXD1
    PB13     ------> ETH_TXD1
    PG11     ------> ETH_TX_EN
    PG13     ------> ETH_TXD0
    */
    GPIO_InitStruct.Pin = RMII_MDC_Pin|RMII_RXD0_Pin|RMII_RXD1_Pin;
 8000c66:	2332      	movs	r3, #50	; 0x32
 8000c68:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000c6a:	2302      	movs	r3, #2
 8000c6c:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c6e:	2300      	movs	r3, #0
 8000c70:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000c72:	2300      	movs	r3, #0
 8000c74:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8000c76:	230b      	movs	r3, #11
 8000c78:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000c7a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000c7e:	4619      	mov	r1, r3
 8000c80:	481e      	ldr	r0, [pc, #120]	; (8000cfc <HAL_ETH_MspInit+0x18c>)
 8000c82:	f001 fd61 	bl	8002748 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = RMII_REF_CLK_Pin|RMII_MDIO_Pin|RMII_CRS_DV_Pin;
 8000c86:	2386      	movs	r3, #134	; 0x86
 8000c88:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000c8a:	2302      	movs	r3, #2
 8000c8c:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c8e:	2300      	movs	r3, #0
 8000c90:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000c92:	2300      	movs	r3, #0
 8000c94:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8000c96:	230b      	movs	r3, #11
 8000c98:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000c9a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000c9e:	4619      	mov	r1, r3
 8000ca0:	4817      	ldr	r0, [pc, #92]	; (8000d00 <HAL_ETH_MspInit+0x190>)
 8000ca2:	f001 fd51 	bl	8002748 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = RMII_TXD1_Pin;
 8000ca6:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000caa:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000cac:	2302      	movs	r3, #2
 8000cae:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000cb0:	2300      	movs	r3, #0
 8000cb2:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000cb4:	2300      	movs	r3, #0
 8000cb6:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8000cb8:	230b      	movs	r3, #11
 8000cba:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(RMII_TXD1_GPIO_Port, &GPIO_InitStruct);
 8000cbc:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000cc0:	4619      	mov	r1, r3
 8000cc2:	4810      	ldr	r0, [pc, #64]	; (8000d04 <HAL_ETH_MspInit+0x194>)
 8000cc4:	f001 fd40 	bl	8002748 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = RMII_TX_EN_Pin|RMII_TXD0_Pin;
 8000cc8:	f44f 5320 	mov.w	r3, #10240	; 0x2800
 8000ccc:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000cce:	2302      	movs	r3, #2
 8000cd0:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000cd2:	2300      	movs	r3, #0
 8000cd4:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000cd6:	2300      	movs	r3, #0
 8000cd8:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8000cda:	230b      	movs	r3, #11
 8000cdc:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8000cde:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000ce2:	4619      	mov	r1, r3
 8000ce4:	4808      	ldr	r0, [pc, #32]	; (8000d08 <HAL_ETH_MspInit+0x198>)
 8000ce6:	f001 fd2f 	bl	8002748 <HAL_GPIO_Init>
  /* USER CODE BEGIN ETH_MspInit 1 */

  /* USER CODE END ETH_MspInit 1 */
  }

}
 8000cea:	bf00      	nop
 8000cec:	3738      	adds	r7, #56	; 0x38
 8000cee:	46bd      	mov	sp, r7
 8000cf0:	bd80      	pop	{r7, pc}
 8000cf2:	bf00      	nop
 8000cf4:	40028000 	.word	0x40028000
 8000cf8:	58024400 	.word	0x58024400
 8000cfc:	58020800 	.word	0x58020800
 8000d00:	58020000 	.word	0x58020000
 8000d04:	58020400 	.word	0x58020400
 8000d08:	58021800 	.word	0x58021800

08000d0c <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000d0c:	b580      	push	{r7, lr}
 8000d0e:	b0b6      	sub	sp, #216	; 0xd8
 8000d10:	af00      	add	r7, sp, #0
 8000d12:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000d14:	f107 03c4 	add.w	r3, r7, #196	; 0xc4
 8000d18:	2200      	movs	r2, #0
 8000d1a:	601a      	str	r2, [r3, #0]
 8000d1c:	605a      	str	r2, [r3, #4]
 8000d1e:	609a      	str	r2, [r3, #8]
 8000d20:	60da      	str	r2, [r3, #12]
 8000d22:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000d24:	f107 0310 	add.w	r3, r7, #16
 8000d28:	22b4      	movs	r2, #180	; 0xb4
 8000d2a:	2100      	movs	r1, #0
 8000d2c:	4618      	mov	r0, r3
 8000d2e:	f005 ff43 	bl	8006bb8 <memset>
  if(huart->Instance==USART3)
 8000d32:	687b      	ldr	r3, [r7, #4]
 8000d34:	681b      	ldr	r3, [r3, #0]
 8000d36:	4a29      	ldr	r2, [pc, #164]	; (8000ddc <HAL_UART_MspInit+0xd0>)
 8000d38:	4293      	cmp	r3, r2
 8000d3a:	d14a      	bne.n	8000dd2 <HAL_UART_MspInit+0xc6>
  /* USER CODE BEGIN USART3_MspInit 0 */

  /* USER CODE END USART3_MspInit 0 */
  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 8000d3c:	2302      	movs	r3, #2
 8000d3e:	613b      	str	r3, [r7, #16]
    PeriphClkInitStruct.Usart234578ClockSelection = RCC_USART234578CLKSOURCE_D2PCLK1;
 8000d40:	2300      	movs	r3, #0
 8000d42:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000d46:	f107 0310 	add.w	r3, r7, #16
 8000d4a:	4618      	mov	r0, r3
 8000d4c:	f002 fe12 	bl	8003974 <HAL_RCCEx_PeriphCLKConfig>
 8000d50:	4603      	mov	r3, r0
 8000d52:	2b00      	cmp	r3, #0
 8000d54:	d001      	beq.n	8000d5a <HAL_UART_MspInit+0x4e>
    {
      Error_Handler();
 8000d56:	f7ff feeb 	bl	8000b30 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 8000d5a:	4b21      	ldr	r3, [pc, #132]	; (8000de0 <HAL_UART_MspInit+0xd4>)
 8000d5c:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8000d60:	4a1f      	ldr	r2, [pc, #124]	; (8000de0 <HAL_UART_MspInit+0xd4>)
 8000d62:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000d66:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8000d6a:	4b1d      	ldr	r3, [pc, #116]	; (8000de0 <HAL_UART_MspInit+0xd4>)
 8000d6c:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8000d70:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8000d74:	60fb      	str	r3, [r7, #12]
 8000d76:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 8000d78:	4b19      	ldr	r3, [pc, #100]	; (8000de0 <HAL_UART_MspInit+0xd4>)
 8000d7a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000d7e:	4a18      	ldr	r2, [pc, #96]	; (8000de0 <HAL_UART_MspInit+0xd4>)
 8000d80:	f043 0308 	orr.w	r3, r3, #8
 8000d84:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000d88:	4b15      	ldr	r3, [pc, #84]	; (8000de0 <HAL_UART_MspInit+0xd4>)
 8000d8a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000d8e:	f003 0308 	and.w	r3, r3, #8
 8000d92:	60bb      	str	r3, [r7, #8]
 8000d94:	68bb      	ldr	r3, [r7, #8]
    /**USART3 GPIO Configuration
    PD8     ------> USART3_TX
    PD9     ------> USART3_RX
    */
    GPIO_InitStruct.Pin = STLK_VCP_RX_Pin|STLK_VCP_TX_Pin;
 8000d96:	f44f 7340 	mov.w	r3, #768	; 0x300
 8000d9a:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000d9e:	2302      	movs	r3, #2
 8000da0:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000da4:	2300      	movs	r3, #0
 8000da6:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000daa:	2300      	movs	r3, #0
 8000dac:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8000db0:	2307      	movs	r3, #7
 8000db2:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000db6:	f107 03c4 	add.w	r3, r7, #196	; 0xc4
 8000dba:	4619      	mov	r1, r3
 8000dbc:	4809      	ldr	r0, [pc, #36]	; (8000de4 <HAL_UART_MspInit+0xd8>)
 8000dbe:	f001 fcc3 	bl	8002748 <HAL_GPIO_Init>

    /* USART3 interrupt Init */
    HAL_NVIC_SetPriority(USART3_IRQn, 0, 0);
 8000dc2:	2200      	movs	r2, #0
 8000dc4:	2100      	movs	r1, #0
 8000dc6:	2027      	movs	r0, #39	; 0x27
 8000dc8:	f000 fb11 	bl	80013ee <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART3_IRQn);
 8000dcc:	2027      	movs	r0, #39	; 0x27
 8000dce:	f000 fb28 	bl	8001422 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 8000dd2:	bf00      	nop
 8000dd4:	37d8      	adds	r7, #216	; 0xd8
 8000dd6:	46bd      	mov	sp, r7
 8000dd8:	bd80      	pop	{r7, pc}
 8000dda:	bf00      	nop
 8000ddc:	40004800 	.word	0x40004800
 8000de0:	58024400 	.word	0x58024400
 8000de4:	58020c00 	.word	0x58020c00

08000de8 <HAL_FMC_MspInit>:

}

static uint32_t FMC_Initialized = 0;

static void HAL_FMC_MspInit(void){
 8000de8:	b580      	push	{r7, lr}
 8000dea:	b0b4      	sub	sp, #208	; 0xd0
 8000dec:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN FMC_MspInit 0 */

  /* USER CODE END FMC_MspInit 0 */
  GPIO_InitTypeDef GPIO_InitStruct ={0};
 8000dee:	f107 03bc 	add.w	r3, r7, #188	; 0xbc
 8000df2:	2200      	movs	r2, #0
 8000df4:	601a      	str	r2, [r3, #0]
 8000df6:	605a      	str	r2, [r3, #4]
 8000df8:	609a      	str	r2, [r3, #8]
 8000dfa:	60da      	str	r2, [r3, #12]
 8000dfc:	611a      	str	r2, [r3, #16]
  if (FMC_Initialized) {
 8000dfe:	4b43      	ldr	r3, [pc, #268]	; (8000f0c <HAL_FMC_MspInit+0x124>)
 8000e00:	681b      	ldr	r3, [r3, #0]
 8000e02:	2b00      	cmp	r3, #0
 8000e04:	d17e      	bne.n	8000f04 <HAL_FMC_MspInit+0x11c>
    return;
  }
  FMC_Initialized = 1;
 8000e06:	4b41      	ldr	r3, [pc, #260]	; (8000f0c <HAL_FMC_MspInit+0x124>)
 8000e08:	2201      	movs	r2, #1
 8000e0a:	601a      	str	r2, [r3, #0]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000e0c:	f107 0308 	add.w	r3, r7, #8
 8000e10:	22b4      	movs	r2, #180	; 0xb4
 8000e12:	2100      	movs	r1, #0
 8000e14:	4618      	mov	r0, r3
 8000e16:	f005 fecf 	bl	8006bb8 <memset>

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_FMC;
 8000e1a:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8000e1e:	60bb      	str	r3, [r7, #8]
    PeriphClkInitStruct.FmcClockSelection = RCC_FMCCLKSOURCE_D1HCLK;
 8000e20:	2300      	movs	r3, #0
 8000e22:	64fb      	str	r3, [r7, #76]	; 0x4c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000e24:	f107 0308 	add.w	r3, r7, #8
 8000e28:	4618      	mov	r0, r3
 8000e2a:	f002 fda3 	bl	8003974 <HAL_RCCEx_PeriphCLKConfig>
 8000e2e:	4603      	mov	r3, r0
 8000e30:	2b00      	cmp	r3, #0
 8000e32:	d001      	beq.n	8000e38 <HAL_FMC_MspInit+0x50>
    {
      Error_Handler();
 8000e34:	f7ff fe7c 	bl	8000b30 <Error_Handler>
    }

  /* Peripheral clock enable */
  __HAL_RCC_FMC_CLK_ENABLE();
 8000e38:	4b35      	ldr	r3, [pc, #212]	; (8000f10 <HAL_FMC_MspInit+0x128>)
 8000e3a:	f8d3 30d4 	ldr.w	r3, [r3, #212]	; 0xd4
 8000e3e:	4a34      	ldr	r2, [pc, #208]	; (8000f10 <HAL_FMC_MspInit+0x128>)
 8000e40:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8000e44:	f8c2 30d4 	str.w	r3, [r2, #212]	; 0xd4
 8000e48:	4b31      	ldr	r3, [pc, #196]	; (8000f10 <HAL_FMC_MspInit+0x128>)
 8000e4a:	f8d3 30d4 	ldr.w	r3, [r3, #212]	; 0xd4
 8000e4e:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8000e52:	607b      	str	r3, [r7, #4]
 8000e54:	687b      	ldr	r3, [r7, #4]
  PD0   ------> FMC_D2
  PD1   ------> FMC_D3
  PD4   ------> FMC_NOE
  PD5   ------> FMC_NWE
  */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8000e56:	2303      	movs	r3, #3
 8000e58:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000e5c:	2302      	movs	r3, #2
 8000e5e:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e62:	2300      	movs	r3, #0
 8000e64:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000e68:	2303      	movs	r3, #3
 8000e6a:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8000e6e:	230c      	movs	r3, #12
 8000e70:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8000e74:	f107 03bc 	add.w	r3, r7, #188	; 0xbc
 8000e78:	4619      	mov	r1, r3
 8000e7a:	4826      	ldr	r0, [pc, #152]	; (8000f14 <HAL_FMC_MspInit+0x12c>)
 8000e7c:	f001 fc64 	bl	8002748 <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = GPIO_PIN_7|GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10;
 8000e80:	f44f 63f0 	mov.w	r3, #1920	; 0x780
 8000e84:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000e88:	2302      	movs	r3, #2
 8000e8a:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e8e:	2300      	movs	r3, #0
 8000e90:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000e94:	2303      	movs	r3, #3
 8000e96:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8000e9a:	230c      	movs	r3, #12
 8000e9c:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8000ea0:	f107 03bc 	add.w	r3, r7, #188	; 0xbc
 8000ea4:	4619      	mov	r1, r3
 8000ea6:	481c      	ldr	r0, [pc, #112]	; (8000f18 <HAL_FMC_MspInit+0x130>)
 8000ea8:	f001 fc4e 	bl	8002748 <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = GPIO_PIN_14|GPIO_PIN_15|GPIO_PIN_0|GPIO_PIN_1
 8000eac:	f24c 0333 	movw	r3, #49203	; 0xc033
 8000eb0:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
                          |GPIO_PIN_4|GPIO_PIN_5;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000eb4:	2302      	movs	r3, #2
 8000eb6:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000eba:	2300      	movs	r3, #0
 8000ebc:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000ec0:	2303      	movs	r3, #3
 8000ec2:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8000ec6:	230c      	movs	r3, #12
 8000ec8:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000ecc:	f107 03bc 	add.w	r3, r7, #188	; 0xbc
 8000ed0:	4619      	mov	r1, r3
 8000ed2:	4812      	ldr	r0, [pc, #72]	; (8000f1c <HAL_FMC_MspInit+0x134>)
 8000ed4:	f001 fc38 	bl	8002748 <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = GPIO_PIN_7;
 8000ed8:	2380      	movs	r3, #128	; 0x80
 8000eda:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000ede:	2302      	movs	r3, #2
 8000ee0:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ee4:	2300      	movs	r3, #0
 8000ee6:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000eea:	2303      	movs	r3, #3
 8000eec:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
  GPIO_InitStruct.Alternate = GPIO_AF9_FMC;
 8000ef0:	2309      	movs	r3, #9
 8000ef2:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000ef6:	f107 03bc 	add.w	r3, r7, #188	; 0xbc
 8000efa:	4619      	mov	r1, r3
 8000efc:	4808      	ldr	r0, [pc, #32]	; (8000f20 <HAL_FMC_MspInit+0x138>)
 8000efe:	f001 fc23 	bl	8002748 <HAL_GPIO_Init>
 8000f02:	e000      	b.n	8000f06 <HAL_FMC_MspInit+0x11e>
    return;
 8000f04:	bf00      	nop

  /* USER CODE BEGIN FMC_MspInit 1 */

  /* USER CODE END FMC_MspInit 1 */
}
 8000f06:	37d0      	adds	r7, #208	; 0xd0
 8000f08:	46bd      	mov	sp, r7
 8000f0a:	bd80      	pop	{r7, pc}
 8000f0c:	200000ec 	.word	0x200000ec
 8000f10:	58024400 	.word	0x58024400
 8000f14:	58021400 	.word	0x58021400
 8000f18:	58021000 	.word	0x58021000
 8000f1c:	58020c00 	.word	0x58020c00
 8000f20:	58020800 	.word	0x58020800

08000f24 <HAL_SRAM_MspInit>:

void HAL_SRAM_MspInit(SRAM_HandleTypeDef* hsram){
 8000f24:	b580      	push	{r7, lr}
 8000f26:	b082      	sub	sp, #8
 8000f28:	af00      	add	r7, sp, #0
 8000f2a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN SRAM_MspInit 0 */

  /* USER CODE END SRAM_MspInit 0 */
  HAL_FMC_MspInit();
 8000f2c:	f7ff ff5c 	bl	8000de8 <HAL_FMC_MspInit>
  /* USER CODE BEGIN SRAM_MspInit 1 */

  /* USER CODE END SRAM_MspInit 1 */
}
 8000f30:	bf00      	nop
 8000f32:	3708      	adds	r7, #8
 8000f34:	46bd      	mov	sp, r7
 8000f36:	bd80      	pop	{r7, pc}

08000f38 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000f38:	b480      	push	{r7}
 8000f3a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000f3c:	e7fe      	b.n	8000f3c <NMI_Handler+0x4>

08000f3e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000f3e:	b480      	push	{r7}
 8000f40:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000f42:	e7fe      	b.n	8000f42 <HardFault_Handler+0x4>

08000f44 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000f44:	b480      	push	{r7}
 8000f46:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000f48:	e7fe      	b.n	8000f48 <MemManage_Handler+0x4>

08000f4a <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000f4a:	b480      	push	{r7}
 8000f4c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000f4e:	e7fe      	b.n	8000f4e <BusFault_Handler+0x4>

08000f50 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000f50:	b480      	push	{r7}
 8000f52:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000f54:	e7fe      	b.n	8000f54 <UsageFault_Handler+0x4>

08000f56 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000f56:	b480      	push	{r7}
 8000f58:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000f5a:	bf00      	nop
 8000f5c:	46bd      	mov	sp, r7
 8000f5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f62:	4770      	bx	lr

08000f64 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000f64:	b480      	push	{r7}
 8000f66:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000f68:	bf00      	nop
 8000f6a:	46bd      	mov	sp, r7
 8000f6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f70:	4770      	bx	lr

08000f72 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000f72:	b480      	push	{r7}
 8000f74:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000f76:	bf00      	nop
 8000f78:	46bd      	mov	sp, r7
 8000f7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f7e:	4770      	bx	lr

08000f80 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000f80:	b580      	push	{r7, lr}
 8000f82:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000f84:	f000 f924 	bl	80011d0 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000f88:	bf00      	nop
 8000f8a:	bd80      	pop	{r7, pc}

08000f8c <USART3_IRQHandler>:

/**
  * @brief This function handles USART3 global interrupt.
  */
void USART3_IRQHandler(void)
{
 8000f8c:	b580      	push	{r7, lr}
 8000f8e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART3_IRQn 0 */

  /* USER CODE END USART3_IRQn 0 */
  HAL_UART_IRQHandler(&huart3);
 8000f90:	4802      	ldr	r0, [pc, #8]	; (8000f9c <USART3_IRQHandler+0x10>)
 8000f92:	f004 f8ab 	bl	80050ec <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART3_IRQn 1 */

  /* USER CODE END USART3_IRQn 1 */
}
 8000f96:	bf00      	nop
 8000f98:	bd80      	pop	{r7, pc}
 8000f9a:	bf00      	nop
 8000f9c:	200000f0 	.word	0x200000f0

08000fa0 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8000fa0:	b480      	push	{r7}
 8000fa2:	af00      	add	r7, sp, #0
 __IO uint32_t tmpreg;
#endif /* DATA_IN_D2_SRAM */

  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8000fa4:	4b34      	ldr	r3, [pc, #208]	; (8001078 <SystemInit+0xd8>)
 8000fa6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000faa:	4a33      	ldr	r2, [pc, #204]	; (8001078 <SystemInit+0xd8>)
 8000fac:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000fb0:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/

   /* Increasing the CPU frequency */
  if(FLASH_LATENCY_DEFAULT  > (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 8000fb4:	4b31      	ldr	r3, [pc, #196]	; (800107c <SystemInit+0xdc>)
 8000fb6:	681b      	ldr	r3, [r3, #0]
 8000fb8:	f003 030f 	and.w	r3, r3, #15
 8000fbc:	2b06      	cmp	r3, #6
 8000fbe:	d807      	bhi.n	8000fd0 <SystemInit+0x30>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
	MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 8000fc0:	4b2e      	ldr	r3, [pc, #184]	; (800107c <SystemInit+0xdc>)
 8000fc2:	681b      	ldr	r3, [r3, #0]
 8000fc4:	f023 030f 	bic.w	r3, r3, #15
 8000fc8:	4a2c      	ldr	r2, [pc, #176]	; (800107c <SystemInit+0xdc>)
 8000fca:	f043 0307 	orr.w	r3, r3, #7
 8000fce:	6013      	str	r3, [r2, #0]
  }

  /* Set HSION bit */
  RCC->CR |= RCC_CR_HSION;
 8000fd0:	4b2b      	ldr	r3, [pc, #172]	; (8001080 <SystemInit+0xe0>)
 8000fd2:	681b      	ldr	r3, [r3, #0]
 8000fd4:	4a2a      	ldr	r2, [pc, #168]	; (8001080 <SystemInit+0xe0>)
 8000fd6:	f043 0301 	orr.w	r3, r3, #1
 8000fda:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 8000fdc:	4b28      	ldr	r3, [pc, #160]	; (8001080 <SystemInit+0xe0>)
 8000fde:	2200      	movs	r2, #0
 8000fe0:	611a      	str	r2, [r3, #16]

  /* Reset HSEON, HSECSSON, CSION, HSI48ON, CSIKERON, PLL1ON, PLL2ON and PLL3ON bits */
  RCC->CR &= 0xEAF6ED7FU;
 8000fe2:	4b27      	ldr	r3, [pc, #156]	; (8001080 <SystemInit+0xe0>)
 8000fe4:	681a      	ldr	r2, [r3, #0]
 8000fe6:	4926      	ldr	r1, [pc, #152]	; (8001080 <SystemInit+0xe0>)
 8000fe8:	4b26      	ldr	r3, [pc, #152]	; (8001084 <SystemInit+0xe4>)
 8000fea:	4013      	ands	r3, r2
 8000fec:	600b      	str	r3, [r1, #0]
  
   /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLASH_LATENCY_DEFAULT  < (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 8000fee:	4b23      	ldr	r3, [pc, #140]	; (800107c <SystemInit+0xdc>)
 8000ff0:	681b      	ldr	r3, [r3, #0]
 8000ff2:	f003 0308 	and.w	r3, r3, #8
 8000ff6:	2b00      	cmp	r3, #0
 8000ff8:	d007      	beq.n	800100a <SystemInit+0x6a>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
	MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 8000ffa:	4b20      	ldr	r3, [pc, #128]	; (800107c <SystemInit+0xdc>)
 8000ffc:	681b      	ldr	r3, [r3, #0]
 8000ffe:	f023 030f 	bic.w	r3, r3, #15
 8001002:	4a1e      	ldr	r2, [pc, #120]	; (800107c <SystemInit+0xdc>)
 8001004:	f043 0307 	orr.w	r3, r3, #7
 8001008:	6013      	str	r3, [r2, #0]
  }

#if defined(D3_SRAM_BASE)
  /* Reset D1CFGR register */
  RCC->D1CFGR = 0x00000000;
 800100a:	4b1d      	ldr	r3, [pc, #116]	; (8001080 <SystemInit+0xe0>)
 800100c:	2200      	movs	r2, #0
 800100e:	619a      	str	r2, [r3, #24]

  /* Reset D2CFGR register */
  RCC->D2CFGR = 0x00000000;
 8001010:	4b1b      	ldr	r3, [pc, #108]	; (8001080 <SystemInit+0xe0>)
 8001012:	2200      	movs	r2, #0
 8001014:	61da      	str	r2, [r3, #28]

  /* Reset D3CFGR register */
  RCC->D3CFGR = 0x00000000;
 8001016:	4b1a      	ldr	r3, [pc, #104]	; (8001080 <SystemInit+0xe0>)
 8001018:	2200      	movs	r2, #0
 800101a:	621a      	str	r2, [r3, #32]

  /* Reset SRDCFGR register */
  RCC->SRDCFGR = 0x00000000;
#endif
  /* Reset PLLCKSELR register */
  RCC->PLLCKSELR = 0x02020200;
 800101c:	4b18      	ldr	r3, [pc, #96]	; (8001080 <SystemInit+0xe0>)
 800101e:	4a1a      	ldr	r2, [pc, #104]	; (8001088 <SystemInit+0xe8>)
 8001020:	629a      	str	r2, [r3, #40]	; 0x28

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x01FF0000;
 8001022:	4b17      	ldr	r3, [pc, #92]	; (8001080 <SystemInit+0xe0>)
 8001024:	4a19      	ldr	r2, [pc, #100]	; (800108c <SystemInit+0xec>)
 8001026:	62da      	str	r2, [r3, #44]	; 0x2c
  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x01010280;
 8001028:	4b15      	ldr	r3, [pc, #84]	; (8001080 <SystemInit+0xe0>)
 800102a:	4a19      	ldr	r2, [pc, #100]	; (8001090 <SystemInit+0xf0>)
 800102c:	631a      	str	r2, [r3, #48]	; 0x30
  /* Reset PLL1FRACR register */
  RCC->PLL1FRACR = 0x00000000;
 800102e:	4b14      	ldr	r3, [pc, #80]	; (8001080 <SystemInit+0xe0>)
 8001030:	2200      	movs	r2, #0
 8001032:	635a      	str	r2, [r3, #52]	; 0x34

  /* Reset PLL2DIVR register */
  RCC->PLL2DIVR = 0x01010280;
 8001034:	4b12      	ldr	r3, [pc, #72]	; (8001080 <SystemInit+0xe0>)
 8001036:	4a16      	ldr	r2, [pc, #88]	; (8001090 <SystemInit+0xf0>)
 8001038:	639a      	str	r2, [r3, #56]	; 0x38

  /* Reset PLL2FRACR register */

  RCC->PLL2FRACR = 0x00000000;
 800103a:	4b11      	ldr	r3, [pc, #68]	; (8001080 <SystemInit+0xe0>)
 800103c:	2200      	movs	r2, #0
 800103e:	63da      	str	r2, [r3, #60]	; 0x3c
  /* Reset PLL3DIVR register */
  RCC->PLL3DIVR = 0x01010280;
 8001040:	4b0f      	ldr	r3, [pc, #60]	; (8001080 <SystemInit+0xe0>)
 8001042:	4a13      	ldr	r2, [pc, #76]	; (8001090 <SystemInit+0xf0>)
 8001044:	641a      	str	r2, [r3, #64]	; 0x40

  /* Reset PLL3FRACR register */
  RCC->PLL3FRACR = 0x00000000;
 8001046:	4b0e      	ldr	r3, [pc, #56]	; (8001080 <SystemInit+0xe0>)
 8001048:	2200      	movs	r2, #0
 800104a:	645a      	str	r2, [r3, #68]	; 0x44

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 800104c:	4b0c      	ldr	r3, [pc, #48]	; (8001080 <SystemInit+0xe0>)
 800104e:	681b      	ldr	r3, [r3, #0]
 8001050:	4a0b      	ldr	r2, [pc, #44]	; (8001080 <SystemInit+0xe0>)
 8001052:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001056:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 8001058:	4b09      	ldr	r3, [pc, #36]	; (8001080 <SystemInit+0xe0>)
 800105a:	2200      	movs	r2, #0
 800105c:	661a      	str	r2, [r3, #96]	; 0x60
  /*
   * Disable the FMC bank1 (enabled after reset).
   * This, prevents CPU speculation access on this bank which blocks the use of FMC during
   * 24us. During this time the others FMC master (such as LTDC) cannot use it!
   */
  FMC_Bank1_R->BTCR[0] = 0x000030D2;
 800105e:	4b0d      	ldr	r3, [pc, #52]	; (8001094 <SystemInit+0xf4>)
 8001060:	f243 02d2 	movw	r2, #12498	; 0x30d2
 8001064:	601a      	str	r2, [r3, #0]

  /* Configure the Vector Table location add offset address for cortex-M7 ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = D1_AXISRAM_BASE  | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal AXI-RAM */
#else
  SCB->VTOR = FLASH_BANK1_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8001066:	4b04      	ldr	r3, [pc, #16]	; (8001078 <SystemInit+0xd8>)
 8001068:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 800106c:	609a      	str	r2, [r3, #8]
#endif

#endif /*DUAL_CORE && CORE_CM4*/

}
 800106e:	bf00      	nop
 8001070:	46bd      	mov	sp, r7
 8001072:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001076:	4770      	bx	lr
 8001078:	e000ed00 	.word	0xe000ed00
 800107c:	52002000 	.word	0x52002000
 8001080:	58024400 	.word	0x58024400
 8001084:	eaf6ed7f 	.word	0xeaf6ed7f
 8001088:	02020200 	.word	0x02020200
 800108c:	01ff0000 	.word	0x01ff0000
 8001090:	01010280 	.word	0x01010280
 8001094:	52004000 	.word	0x52004000

08001098 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack      /* set stack pointer */
 8001098:	f8df d034 	ldr.w	sp, [pc, #52]	; 80010d0 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit
 800109c:	f7ff ff80 	bl	8000fa0 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80010a0:	480c      	ldr	r0, [pc, #48]	; (80010d4 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 80010a2:	490d      	ldr	r1, [pc, #52]	; (80010d8 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 80010a4:	4a0d      	ldr	r2, [pc, #52]	; (80010dc <LoopFillZerobss+0x1a>)
  movs r3, #0
 80010a6:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80010a8:	e002      	b.n	80010b0 <LoopCopyDataInit>

080010aa <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80010aa:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80010ac:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80010ae:	3304      	adds	r3, #4

080010b0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80010b0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80010b2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80010b4:	d3f9      	bcc.n	80010aa <CopyDataInit>
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80010b6:	4a0a      	ldr	r2, [pc, #40]	; (80010e0 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 80010b8:	4c0a      	ldr	r4, [pc, #40]	; (80010e4 <LoopFillZerobss+0x22>)
  movs r3, #0
 80010ba:	2300      	movs	r3, #0
  b LoopFillZerobss
 80010bc:	e001      	b.n	80010c2 <LoopFillZerobss>

080010be <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80010be:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80010c0:	3204      	adds	r2, #4

080010c2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80010c2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80010c4:	d3fb      	bcc.n	80010be <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80010c6:	f005 fd53 	bl	8006b70 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80010ca:	f7ff fa9b 	bl	8000604 <main>
  bx  lr
 80010ce:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 80010d0:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 80010d4:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80010d8:	20000010 	.word	0x20000010
  ldr r2, =_sidata
 80010dc:	08006c28 	.word	0x08006c28
  ldr r2, =_sbss
 80010e0:	200000d0 	.word	0x200000d0
  ldr r4, =_ebss
 80010e4:	2000028c 	.word	0x2000028c

080010e8 <ADC3_IRQHandler>:
 * @retval None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80010e8:	e7fe      	b.n	80010e8 <ADC3_IRQHandler>
	...

080010ec <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80010ec:	b580      	push	{r7, lr}
 80010ee:	b082      	sub	sp, #8
 80010f0:	af00      	add	r7, sp, #0
   __HAL_ART_CONFIG_BASE_ADDRESS(0x08100000UL);  /* Configure the Cortex-M4 ART Base address to the Flash Bank 2 : */
   __HAL_ART_ENABLE();                           /* Enable the Cortex-M4 ART */
#endif /* DUAL_CORE &&  CORE_CM4 */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80010f2:	2003      	movs	r0, #3
 80010f4:	f000 f970 	bl	80013d8 <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 80010f8:	f002 fa66 	bl	80035c8 <HAL_RCC_GetSysClockFreq>
 80010fc:	4602      	mov	r2, r0
 80010fe:	4b15      	ldr	r3, [pc, #84]	; (8001154 <HAL_Init+0x68>)
 8001100:	699b      	ldr	r3, [r3, #24]
 8001102:	0a1b      	lsrs	r3, r3, #8
 8001104:	f003 030f 	and.w	r3, r3, #15
 8001108:	4913      	ldr	r1, [pc, #76]	; (8001158 <HAL_Init+0x6c>)
 800110a:	5ccb      	ldrb	r3, [r1, r3]
 800110c:	f003 031f 	and.w	r3, r3, #31
 8001110:	fa22 f303 	lsr.w	r3, r2, r3
 8001114:	607b      	str	r3, [r7, #4]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

  /* Update the SystemD2Clock global variable */
#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8001116:	4b0f      	ldr	r3, [pc, #60]	; (8001154 <HAL_Init+0x68>)
 8001118:	699b      	ldr	r3, [r3, #24]
 800111a:	f003 030f 	and.w	r3, r3, #15
 800111e:	4a0e      	ldr	r2, [pc, #56]	; (8001158 <HAL_Init+0x6c>)
 8001120:	5cd3      	ldrb	r3, [r2, r3]
 8001122:	f003 031f 	and.w	r3, r3, #31
 8001126:	687a      	ldr	r2, [r7, #4]
 8001128:	fa22 f303 	lsr.w	r3, r2, r3
 800112c:	4a0b      	ldr	r2, [pc, #44]	; (800115c <HAL_Init+0x70>)
 800112e:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8001130:	4a0b      	ldr	r2, [pc, #44]	; (8001160 <HAL_Init+0x74>)
 8001132:	687b      	ldr	r3, [r7, #4]
 8001134:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8001136:	2000      	movs	r0, #0
 8001138:	f000 f814 	bl	8001164 <HAL_InitTick>
 800113c:	4603      	mov	r3, r0
 800113e:	2b00      	cmp	r3, #0
 8001140:	d001      	beq.n	8001146 <HAL_Init+0x5a>
  {
    return HAL_ERROR;
 8001142:	2301      	movs	r3, #1
 8001144:	e002      	b.n	800114c <HAL_Init+0x60>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 8001146:	f7ff fcf9 	bl	8000b3c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800114a:	2300      	movs	r3, #0
}
 800114c:	4618      	mov	r0, r3
 800114e:	3708      	adds	r7, #8
 8001150:	46bd      	mov	sp, r7
 8001152:	bd80      	pop	{r7, pc}
 8001154:	58024400 	.word	0x58024400
 8001158:	08006be0 	.word	0x08006be0
 800115c:	20000004 	.word	0x20000004
 8001160:	20000000 	.word	0x20000000

08001164 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001164:	b580      	push	{r7, lr}
 8001166:	b082      	sub	sp, #8
 8001168:	af00      	add	r7, sp, #0
 800116a:	6078      	str	r0, [r7, #4]
  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that don't take the value zero)*/
  if((uint32_t)uwTickFreq == 0UL)
 800116c:	4b15      	ldr	r3, [pc, #84]	; (80011c4 <HAL_InitTick+0x60>)
 800116e:	781b      	ldrb	r3, [r3, #0]
 8001170:	2b00      	cmp	r3, #0
 8001172:	d101      	bne.n	8001178 <HAL_InitTick+0x14>
  {
    return HAL_ERROR;
 8001174:	2301      	movs	r3, #1
 8001176:	e021      	b.n	80011bc <HAL_InitTick+0x58>
  }

    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000UL / (uint32_t)uwTickFreq)) > 0U)
 8001178:	4b13      	ldr	r3, [pc, #76]	; (80011c8 <HAL_InitTick+0x64>)
 800117a:	681a      	ldr	r2, [r3, #0]
 800117c:	4b11      	ldr	r3, [pc, #68]	; (80011c4 <HAL_InitTick+0x60>)
 800117e:	781b      	ldrb	r3, [r3, #0]
 8001180:	4619      	mov	r1, r3
 8001182:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001186:	fbb3 f3f1 	udiv	r3, r3, r1
 800118a:	fbb2 f3f3 	udiv	r3, r2, r3
 800118e:	4618      	mov	r0, r3
 8001190:	f000 f955 	bl	800143e <HAL_SYSTICK_Config>
 8001194:	4603      	mov	r3, r0
 8001196:	2b00      	cmp	r3, #0
 8001198:	d001      	beq.n	800119e <HAL_InitTick+0x3a>
    {
      return HAL_ERROR;
 800119a:	2301      	movs	r3, #1
 800119c:	e00e      	b.n	80011bc <HAL_InitTick+0x58>
    }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800119e:	687b      	ldr	r3, [r7, #4]
 80011a0:	2b0f      	cmp	r3, #15
 80011a2:	d80a      	bhi.n	80011ba <HAL_InitTick+0x56>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80011a4:	2200      	movs	r2, #0
 80011a6:	6879      	ldr	r1, [r7, #4]
 80011a8:	f04f 30ff 	mov.w	r0, #4294967295
 80011ac:	f000 f91f 	bl	80013ee <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80011b0:	4a06      	ldr	r2, [pc, #24]	; (80011cc <HAL_InitTick+0x68>)
 80011b2:	687b      	ldr	r3, [r7, #4]
 80011b4:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80011b6:	2300      	movs	r3, #0
 80011b8:	e000      	b.n	80011bc <HAL_InitTick+0x58>
    return HAL_ERROR;
 80011ba:	2301      	movs	r3, #1
}
 80011bc:	4618      	mov	r0, r3
 80011be:	3708      	adds	r7, #8
 80011c0:	46bd      	mov	sp, r7
 80011c2:	bd80      	pop	{r7, pc}
 80011c4:	2000000c 	.word	0x2000000c
 80011c8:	20000000 	.word	0x20000000
 80011cc:	20000008 	.word	0x20000008

080011d0 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80011d0:	b480      	push	{r7}
 80011d2:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 80011d4:	4b06      	ldr	r3, [pc, #24]	; (80011f0 <HAL_IncTick+0x20>)
 80011d6:	781b      	ldrb	r3, [r3, #0]
 80011d8:	461a      	mov	r2, r3
 80011da:	4b06      	ldr	r3, [pc, #24]	; (80011f4 <HAL_IncTick+0x24>)
 80011dc:	681b      	ldr	r3, [r3, #0]
 80011de:	4413      	add	r3, r2
 80011e0:	4a04      	ldr	r2, [pc, #16]	; (80011f4 <HAL_IncTick+0x24>)
 80011e2:	6013      	str	r3, [r2, #0]
}
 80011e4:	bf00      	nop
 80011e6:	46bd      	mov	sp, r7
 80011e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011ec:	4770      	bx	lr
 80011ee:	bf00      	nop
 80011f0:	2000000c 	.word	0x2000000c
 80011f4:	20000288 	.word	0x20000288

080011f8 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80011f8:	b480      	push	{r7}
 80011fa:	af00      	add	r7, sp, #0
  return uwTick;
 80011fc:	4b03      	ldr	r3, [pc, #12]	; (800120c <HAL_GetTick+0x14>)
 80011fe:	681b      	ldr	r3, [r3, #0]
}
 8001200:	4618      	mov	r0, r3
 8001202:	46bd      	mov	sp, r7
 8001204:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001208:	4770      	bx	lr
 800120a:	bf00      	nop
 800120c:	20000288 	.word	0x20000288

08001210 <HAL_SYSCFG_ETHInterfaceSelect>:
  *   @arg SYSCFG_ETH_MII : Select the Media Independent Interface
  *   @arg SYSCFG_ETH_RMII: Select the Reduced Media Independent Interface
  * @retval None
  */
void HAL_SYSCFG_ETHInterfaceSelect(uint32_t SYSCFG_ETHInterface)
{
 8001210:	b480      	push	{r7}
 8001212:	b083      	sub	sp, #12
 8001214:	af00      	add	r7, sp, #0
 8001216:	6078      	str	r0, [r7, #4]
  /* Check the parameter */
  assert_param(IS_SYSCFG_ETHERNET_CONFIG(SYSCFG_ETHInterface));

  MODIFY_REG(SYSCFG->PMCR, SYSCFG_PMCR_EPIS_SEL, (uint32_t)(SYSCFG_ETHInterface));
 8001218:	4b06      	ldr	r3, [pc, #24]	; (8001234 <HAL_SYSCFG_ETHInterfaceSelect+0x24>)
 800121a:	685b      	ldr	r3, [r3, #4]
 800121c:	f423 0260 	bic.w	r2, r3, #14680064	; 0xe00000
 8001220:	4904      	ldr	r1, [pc, #16]	; (8001234 <HAL_SYSCFG_ETHInterfaceSelect+0x24>)
 8001222:	687b      	ldr	r3, [r7, #4]
 8001224:	4313      	orrs	r3, r2
 8001226:	604b      	str	r3, [r1, #4]
}
 8001228:	bf00      	nop
 800122a:	370c      	adds	r7, #12
 800122c:	46bd      	mov	sp, r7
 800122e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001232:	4770      	bx	lr
 8001234:	58000400 	.word	0x58000400

08001238 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001238:	b480      	push	{r7}
 800123a:	b085      	sub	sp, #20
 800123c:	af00      	add	r7, sp, #0
 800123e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001240:	687b      	ldr	r3, [r7, #4]
 8001242:	f003 0307 	and.w	r3, r3, #7
 8001246:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001248:	4b0b      	ldr	r3, [pc, #44]	; (8001278 <__NVIC_SetPriorityGrouping+0x40>)
 800124a:	68db      	ldr	r3, [r3, #12]
 800124c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800124e:	68ba      	ldr	r2, [r7, #8]
 8001250:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001254:	4013      	ands	r3, r2
 8001256:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001258:	68fb      	ldr	r3, [r7, #12]
 800125a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800125c:	68bb      	ldr	r3, [r7, #8]
 800125e:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8001260:	4b06      	ldr	r3, [pc, #24]	; (800127c <__NVIC_SetPriorityGrouping+0x44>)
 8001262:	4313      	orrs	r3, r2
 8001264:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001266:	4a04      	ldr	r2, [pc, #16]	; (8001278 <__NVIC_SetPriorityGrouping+0x40>)
 8001268:	68bb      	ldr	r3, [r7, #8]
 800126a:	60d3      	str	r3, [r2, #12]
}
 800126c:	bf00      	nop
 800126e:	3714      	adds	r7, #20
 8001270:	46bd      	mov	sp, r7
 8001272:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001276:	4770      	bx	lr
 8001278:	e000ed00 	.word	0xe000ed00
 800127c:	05fa0000 	.word	0x05fa0000

08001280 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001280:	b480      	push	{r7}
 8001282:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001284:	4b04      	ldr	r3, [pc, #16]	; (8001298 <__NVIC_GetPriorityGrouping+0x18>)
 8001286:	68db      	ldr	r3, [r3, #12]
 8001288:	0a1b      	lsrs	r3, r3, #8
 800128a:	f003 0307 	and.w	r3, r3, #7
}
 800128e:	4618      	mov	r0, r3
 8001290:	46bd      	mov	sp, r7
 8001292:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001296:	4770      	bx	lr
 8001298:	e000ed00 	.word	0xe000ed00

0800129c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800129c:	b480      	push	{r7}
 800129e:	b083      	sub	sp, #12
 80012a0:	af00      	add	r7, sp, #0
 80012a2:	4603      	mov	r3, r0
 80012a4:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 80012a6:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80012aa:	2b00      	cmp	r3, #0
 80012ac:	db0b      	blt.n	80012c6 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80012ae:	88fb      	ldrh	r3, [r7, #6]
 80012b0:	f003 021f 	and.w	r2, r3, #31
 80012b4:	4907      	ldr	r1, [pc, #28]	; (80012d4 <__NVIC_EnableIRQ+0x38>)
 80012b6:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80012ba:	095b      	lsrs	r3, r3, #5
 80012bc:	2001      	movs	r0, #1
 80012be:	fa00 f202 	lsl.w	r2, r0, r2
 80012c2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 80012c6:	bf00      	nop
 80012c8:	370c      	adds	r7, #12
 80012ca:	46bd      	mov	sp, r7
 80012cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012d0:	4770      	bx	lr
 80012d2:	bf00      	nop
 80012d4:	e000e100 	.word	0xe000e100

080012d8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80012d8:	b480      	push	{r7}
 80012da:	b083      	sub	sp, #12
 80012dc:	af00      	add	r7, sp, #0
 80012de:	4603      	mov	r3, r0
 80012e0:	6039      	str	r1, [r7, #0]
 80012e2:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 80012e4:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80012e8:	2b00      	cmp	r3, #0
 80012ea:	db0a      	blt.n	8001302 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80012ec:	683b      	ldr	r3, [r7, #0]
 80012ee:	b2da      	uxtb	r2, r3
 80012f0:	490c      	ldr	r1, [pc, #48]	; (8001324 <__NVIC_SetPriority+0x4c>)
 80012f2:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80012f6:	0112      	lsls	r2, r2, #4
 80012f8:	b2d2      	uxtb	r2, r2
 80012fa:	440b      	add	r3, r1
 80012fc:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001300:	e00a      	b.n	8001318 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001302:	683b      	ldr	r3, [r7, #0]
 8001304:	b2da      	uxtb	r2, r3
 8001306:	4908      	ldr	r1, [pc, #32]	; (8001328 <__NVIC_SetPriority+0x50>)
 8001308:	88fb      	ldrh	r3, [r7, #6]
 800130a:	f003 030f 	and.w	r3, r3, #15
 800130e:	3b04      	subs	r3, #4
 8001310:	0112      	lsls	r2, r2, #4
 8001312:	b2d2      	uxtb	r2, r2
 8001314:	440b      	add	r3, r1
 8001316:	761a      	strb	r2, [r3, #24]
}
 8001318:	bf00      	nop
 800131a:	370c      	adds	r7, #12
 800131c:	46bd      	mov	sp, r7
 800131e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001322:	4770      	bx	lr
 8001324:	e000e100 	.word	0xe000e100
 8001328:	e000ed00 	.word	0xe000ed00

0800132c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800132c:	b480      	push	{r7}
 800132e:	b089      	sub	sp, #36	; 0x24
 8001330:	af00      	add	r7, sp, #0
 8001332:	60f8      	str	r0, [r7, #12]
 8001334:	60b9      	str	r1, [r7, #8]
 8001336:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001338:	68fb      	ldr	r3, [r7, #12]
 800133a:	f003 0307 	and.w	r3, r3, #7
 800133e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001340:	69fb      	ldr	r3, [r7, #28]
 8001342:	f1c3 0307 	rsb	r3, r3, #7
 8001346:	2b04      	cmp	r3, #4
 8001348:	bf28      	it	cs
 800134a:	2304      	movcs	r3, #4
 800134c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800134e:	69fb      	ldr	r3, [r7, #28]
 8001350:	3304      	adds	r3, #4
 8001352:	2b06      	cmp	r3, #6
 8001354:	d902      	bls.n	800135c <NVIC_EncodePriority+0x30>
 8001356:	69fb      	ldr	r3, [r7, #28]
 8001358:	3b03      	subs	r3, #3
 800135a:	e000      	b.n	800135e <NVIC_EncodePriority+0x32>
 800135c:	2300      	movs	r3, #0
 800135e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001360:	f04f 32ff 	mov.w	r2, #4294967295
 8001364:	69bb      	ldr	r3, [r7, #24]
 8001366:	fa02 f303 	lsl.w	r3, r2, r3
 800136a:	43da      	mvns	r2, r3
 800136c:	68bb      	ldr	r3, [r7, #8]
 800136e:	401a      	ands	r2, r3
 8001370:	697b      	ldr	r3, [r7, #20]
 8001372:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001374:	f04f 31ff 	mov.w	r1, #4294967295
 8001378:	697b      	ldr	r3, [r7, #20]
 800137a:	fa01 f303 	lsl.w	r3, r1, r3
 800137e:	43d9      	mvns	r1, r3
 8001380:	687b      	ldr	r3, [r7, #4]
 8001382:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001384:	4313      	orrs	r3, r2
         );
}
 8001386:	4618      	mov	r0, r3
 8001388:	3724      	adds	r7, #36	; 0x24
 800138a:	46bd      	mov	sp, r7
 800138c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001390:	4770      	bx	lr
	...

08001394 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001394:	b580      	push	{r7, lr}
 8001396:	b082      	sub	sp, #8
 8001398:	af00      	add	r7, sp, #0
 800139a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800139c:	687b      	ldr	r3, [r7, #4]
 800139e:	3b01      	subs	r3, #1
 80013a0:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80013a4:	d301      	bcc.n	80013aa <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80013a6:	2301      	movs	r3, #1
 80013a8:	e00f      	b.n	80013ca <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80013aa:	4a0a      	ldr	r2, [pc, #40]	; (80013d4 <SysTick_Config+0x40>)
 80013ac:	687b      	ldr	r3, [r7, #4]
 80013ae:	3b01      	subs	r3, #1
 80013b0:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80013b2:	210f      	movs	r1, #15
 80013b4:	f04f 30ff 	mov.w	r0, #4294967295
 80013b8:	f7ff ff8e 	bl	80012d8 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80013bc:	4b05      	ldr	r3, [pc, #20]	; (80013d4 <SysTick_Config+0x40>)
 80013be:	2200      	movs	r2, #0
 80013c0:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80013c2:	4b04      	ldr	r3, [pc, #16]	; (80013d4 <SysTick_Config+0x40>)
 80013c4:	2207      	movs	r2, #7
 80013c6:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80013c8:	2300      	movs	r3, #0
}
 80013ca:	4618      	mov	r0, r3
 80013cc:	3708      	adds	r7, #8
 80013ce:	46bd      	mov	sp, r7
 80013d0:	bd80      	pop	{r7, pc}
 80013d2:	bf00      	nop
 80013d4:	e000e010 	.word	0xe000e010

080013d8 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80013d8:	b580      	push	{r7, lr}
 80013da:	b082      	sub	sp, #8
 80013dc:	af00      	add	r7, sp, #0
 80013de:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80013e0:	6878      	ldr	r0, [r7, #4]
 80013e2:	f7ff ff29 	bl	8001238 <__NVIC_SetPriorityGrouping>
}
 80013e6:	bf00      	nop
 80013e8:	3708      	adds	r7, #8
 80013ea:	46bd      	mov	sp, r7
 80013ec:	bd80      	pop	{r7, pc}

080013ee <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80013ee:	b580      	push	{r7, lr}
 80013f0:	b086      	sub	sp, #24
 80013f2:	af00      	add	r7, sp, #0
 80013f4:	4603      	mov	r3, r0
 80013f6:	60b9      	str	r1, [r7, #8]
 80013f8:	607a      	str	r2, [r7, #4]
 80013fa:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 80013fc:	f7ff ff40 	bl	8001280 <__NVIC_GetPriorityGrouping>
 8001400:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001402:	687a      	ldr	r2, [r7, #4]
 8001404:	68b9      	ldr	r1, [r7, #8]
 8001406:	6978      	ldr	r0, [r7, #20]
 8001408:	f7ff ff90 	bl	800132c <NVIC_EncodePriority>
 800140c:	4602      	mov	r2, r0
 800140e:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8001412:	4611      	mov	r1, r2
 8001414:	4618      	mov	r0, r3
 8001416:	f7ff ff5f 	bl	80012d8 <__NVIC_SetPriority>
}
 800141a:	bf00      	nop
 800141c:	3718      	adds	r7, #24
 800141e:	46bd      	mov	sp, r7
 8001420:	bd80      	pop	{r7, pc}

08001422 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32h7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001422:	b580      	push	{r7, lr}
 8001424:	b082      	sub	sp, #8
 8001426:	af00      	add	r7, sp, #0
 8001428:	4603      	mov	r3, r0
 800142a:	80fb      	strh	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800142c:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001430:	4618      	mov	r0, r3
 8001432:	f7ff ff33 	bl	800129c <__NVIC_EnableIRQ>
}
 8001436:	bf00      	nop
 8001438:	3708      	adds	r7, #8
 800143a:	46bd      	mov	sp, r7
 800143c:	bd80      	pop	{r7, pc}

0800143e <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status   - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800143e:	b580      	push	{r7, lr}
 8001440:	b082      	sub	sp, #8
 8001442:	af00      	add	r7, sp, #0
 8001444:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001446:	6878      	ldr	r0, [r7, #4]
 8001448:	f7ff ffa4 	bl	8001394 <SysTick_Config>
 800144c:	4603      	mov	r3, r0
}
 800144e:	4618      	mov	r0, r3
 8001450:	3708      	adds	r7, #8
 8001452:	46bd      	mov	sp, r7
 8001454:	bd80      	pop	{r7, pc}
	...

08001458 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8001458:	b580      	push	{r7, lr}
 800145a:	b086      	sub	sp, #24
 800145c:	af00      	add	r7, sp, #0
 800145e:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs_dma;
  BDMA_Base_Registers *regs_bdma;
  const __IO uint32_t *enableRegister;

  uint32_t tickstart = HAL_GetTick();
 8001460:	f7ff feca 	bl	80011f8 <HAL_GetTick>
 8001464:	6138      	str	r0, [r7, #16]

 /* Check the DMA peripheral handle */
  if(hdma == NULL)
 8001466:	687b      	ldr	r3, [r7, #4]
 8001468:	2b00      	cmp	r3, #0
 800146a:	d101      	bne.n	8001470 <HAL_DMA_Abort+0x18>
  {
    return HAL_ERROR;
 800146c:	2301      	movs	r3, #1
 800146e:	e2dc      	b.n	8001a2a <HAL_DMA_Abort+0x5d2>
  }

  /* Check the DMA peripheral state */
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8001470:	687b      	ldr	r3, [r7, #4]
 8001472:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8001476:	b2db      	uxtb	r3, r3
 8001478:	2b02      	cmp	r3, #2
 800147a:	d008      	beq.n	800148e <HAL_DMA_Abort+0x36>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800147c:	687b      	ldr	r3, [r7, #4]
 800147e:	2280      	movs	r2, #128	; 0x80
 8001480:	655a      	str	r2, [r3, #84]	; 0x54

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001482:	687b      	ldr	r3, [r7, #4]
 8001484:	2200      	movs	r2, #0
 8001486:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    return HAL_ERROR;
 800148a:	2301      	movs	r3, #1
 800148c:	e2cd      	b.n	8001a2a <HAL_DMA_Abort+0x5d2>
  }
  else
  {
    /* Disable all the transfer interrupts */
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 800148e:	687b      	ldr	r3, [r7, #4]
 8001490:	681b      	ldr	r3, [r3, #0]
 8001492:	4a76      	ldr	r2, [pc, #472]	; (800166c <HAL_DMA_Abort+0x214>)
 8001494:	4293      	cmp	r3, r2
 8001496:	d04a      	beq.n	800152e <HAL_DMA_Abort+0xd6>
 8001498:	687b      	ldr	r3, [r7, #4]
 800149a:	681b      	ldr	r3, [r3, #0]
 800149c:	4a74      	ldr	r2, [pc, #464]	; (8001670 <HAL_DMA_Abort+0x218>)
 800149e:	4293      	cmp	r3, r2
 80014a0:	d045      	beq.n	800152e <HAL_DMA_Abort+0xd6>
 80014a2:	687b      	ldr	r3, [r7, #4]
 80014a4:	681b      	ldr	r3, [r3, #0]
 80014a6:	4a73      	ldr	r2, [pc, #460]	; (8001674 <HAL_DMA_Abort+0x21c>)
 80014a8:	4293      	cmp	r3, r2
 80014aa:	d040      	beq.n	800152e <HAL_DMA_Abort+0xd6>
 80014ac:	687b      	ldr	r3, [r7, #4]
 80014ae:	681b      	ldr	r3, [r3, #0]
 80014b0:	4a71      	ldr	r2, [pc, #452]	; (8001678 <HAL_DMA_Abort+0x220>)
 80014b2:	4293      	cmp	r3, r2
 80014b4:	d03b      	beq.n	800152e <HAL_DMA_Abort+0xd6>
 80014b6:	687b      	ldr	r3, [r7, #4]
 80014b8:	681b      	ldr	r3, [r3, #0]
 80014ba:	4a70      	ldr	r2, [pc, #448]	; (800167c <HAL_DMA_Abort+0x224>)
 80014bc:	4293      	cmp	r3, r2
 80014be:	d036      	beq.n	800152e <HAL_DMA_Abort+0xd6>
 80014c0:	687b      	ldr	r3, [r7, #4]
 80014c2:	681b      	ldr	r3, [r3, #0]
 80014c4:	4a6e      	ldr	r2, [pc, #440]	; (8001680 <HAL_DMA_Abort+0x228>)
 80014c6:	4293      	cmp	r3, r2
 80014c8:	d031      	beq.n	800152e <HAL_DMA_Abort+0xd6>
 80014ca:	687b      	ldr	r3, [r7, #4]
 80014cc:	681b      	ldr	r3, [r3, #0]
 80014ce:	4a6d      	ldr	r2, [pc, #436]	; (8001684 <HAL_DMA_Abort+0x22c>)
 80014d0:	4293      	cmp	r3, r2
 80014d2:	d02c      	beq.n	800152e <HAL_DMA_Abort+0xd6>
 80014d4:	687b      	ldr	r3, [r7, #4]
 80014d6:	681b      	ldr	r3, [r3, #0]
 80014d8:	4a6b      	ldr	r2, [pc, #428]	; (8001688 <HAL_DMA_Abort+0x230>)
 80014da:	4293      	cmp	r3, r2
 80014dc:	d027      	beq.n	800152e <HAL_DMA_Abort+0xd6>
 80014de:	687b      	ldr	r3, [r7, #4]
 80014e0:	681b      	ldr	r3, [r3, #0]
 80014e2:	4a6a      	ldr	r2, [pc, #424]	; (800168c <HAL_DMA_Abort+0x234>)
 80014e4:	4293      	cmp	r3, r2
 80014e6:	d022      	beq.n	800152e <HAL_DMA_Abort+0xd6>
 80014e8:	687b      	ldr	r3, [r7, #4]
 80014ea:	681b      	ldr	r3, [r3, #0]
 80014ec:	4a68      	ldr	r2, [pc, #416]	; (8001690 <HAL_DMA_Abort+0x238>)
 80014ee:	4293      	cmp	r3, r2
 80014f0:	d01d      	beq.n	800152e <HAL_DMA_Abort+0xd6>
 80014f2:	687b      	ldr	r3, [r7, #4]
 80014f4:	681b      	ldr	r3, [r3, #0]
 80014f6:	4a67      	ldr	r2, [pc, #412]	; (8001694 <HAL_DMA_Abort+0x23c>)
 80014f8:	4293      	cmp	r3, r2
 80014fa:	d018      	beq.n	800152e <HAL_DMA_Abort+0xd6>
 80014fc:	687b      	ldr	r3, [r7, #4]
 80014fe:	681b      	ldr	r3, [r3, #0]
 8001500:	4a65      	ldr	r2, [pc, #404]	; (8001698 <HAL_DMA_Abort+0x240>)
 8001502:	4293      	cmp	r3, r2
 8001504:	d013      	beq.n	800152e <HAL_DMA_Abort+0xd6>
 8001506:	687b      	ldr	r3, [r7, #4]
 8001508:	681b      	ldr	r3, [r3, #0]
 800150a:	4a64      	ldr	r2, [pc, #400]	; (800169c <HAL_DMA_Abort+0x244>)
 800150c:	4293      	cmp	r3, r2
 800150e:	d00e      	beq.n	800152e <HAL_DMA_Abort+0xd6>
 8001510:	687b      	ldr	r3, [r7, #4]
 8001512:	681b      	ldr	r3, [r3, #0]
 8001514:	4a62      	ldr	r2, [pc, #392]	; (80016a0 <HAL_DMA_Abort+0x248>)
 8001516:	4293      	cmp	r3, r2
 8001518:	d009      	beq.n	800152e <HAL_DMA_Abort+0xd6>
 800151a:	687b      	ldr	r3, [r7, #4]
 800151c:	681b      	ldr	r3, [r3, #0]
 800151e:	4a61      	ldr	r2, [pc, #388]	; (80016a4 <HAL_DMA_Abort+0x24c>)
 8001520:	4293      	cmp	r3, r2
 8001522:	d004      	beq.n	800152e <HAL_DMA_Abort+0xd6>
 8001524:	687b      	ldr	r3, [r7, #4]
 8001526:	681b      	ldr	r3, [r3, #0]
 8001528:	4a5f      	ldr	r2, [pc, #380]	; (80016a8 <HAL_DMA_Abort+0x250>)
 800152a:	4293      	cmp	r3, r2
 800152c:	d101      	bne.n	8001532 <HAL_DMA_Abort+0xda>
 800152e:	2301      	movs	r3, #1
 8001530:	e000      	b.n	8001534 <HAL_DMA_Abort+0xdc>
 8001532:	2300      	movs	r3, #0
 8001534:	2b00      	cmp	r3, #0
 8001536:	d013      	beq.n	8001560 <HAL_DMA_Abort+0x108>
    {
       /* Disable DMA All Interrupts  */
      ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME | DMA_IT_HT);
 8001538:	687b      	ldr	r3, [r7, #4]
 800153a:	681b      	ldr	r3, [r3, #0]
 800153c:	681a      	ldr	r2, [r3, #0]
 800153e:	687b      	ldr	r3, [r7, #4]
 8001540:	681b      	ldr	r3, [r3, #0]
 8001542:	f022 021e 	bic.w	r2, r2, #30
 8001546:	601a      	str	r2, [r3, #0]
      ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR &= ~(DMA_IT_FE);
 8001548:	687b      	ldr	r3, [r7, #4]
 800154a:	681b      	ldr	r3, [r3, #0]
 800154c:	695a      	ldr	r2, [r3, #20]
 800154e:	687b      	ldr	r3, [r7, #4]
 8001550:	681b      	ldr	r3, [r3, #0]
 8001552:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8001556:	615a      	str	r2, [r3, #20]

      enableRegister = (__IO uint32_t *)(&(((DMA_Stream_TypeDef   *)hdma->Instance)->CR));
 8001558:	687b      	ldr	r3, [r7, #4]
 800155a:	681b      	ldr	r3, [r3, #0]
 800155c:	617b      	str	r3, [r7, #20]
 800155e:	e00a      	b.n	8001576 <HAL_DMA_Abort+0x11e>
    }
    else /* BDMA channel */
    {
      /* Disable DMA All Interrupts */
      ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  &= ~(BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE);
 8001560:	687b      	ldr	r3, [r7, #4]
 8001562:	681b      	ldr	r3, [r3, #0]
 8001564:	681a      	ldr	r2, [r3, #0]
 8001566:	687b      	ldr	r3, [r7, #4]
 8001568:	681b      	ldr	r3, [r3, #0]
 800156a:	f022 020e 	bic.w	r2, r2, #14
 800156e:	601a      	str	r2, [r3, #0]

      enableRegister = (__IO uint32_t *)(&(((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR));
 8001570:	687b      	ldr	r3, [r7, #4]
 8001572:	681b      	ldr	r3, [r3, #0]
 8001574:	617b      	str	r3, [r7, #20]
    }

    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8001576:	687b      	ldr	r3, [r7, #4]
 8001578:	681b      	ldr	r3, [r3, #0]
 800157a:	4a3c      	ldr	r2, [pc, #240]	; (800166c <HAL_DMA_Abort+0x214>)
 800157c:	4293      	cmp	r3, r2
 800157e:	d072      	beq.n	8001666 <HAL_DMA_Abort+0x20e>
 8001580:	687b      	ldr	r3, [r7, #4]
 8001582:	681b      	ldr	r3, [r3, #0]
 8001584:	4a3a      	ldr	r2, [pc, #232]	; (8001670 <HAL_DMA_Abort+0x218>)
 8001586:	4293      	cmp	r3, r2
 8001588:	d06d      	beq.n	8001666 <HAL_DMA_Abort+0x20e>
 800158a:	687b      	ldr	r3, [r7, #4]
 800158c:	681b      	ldr	r3, [r3, #0]
 800158e:	4a39      	ldr	r2, [pc, #228]	; (8001674 <HAL_DMA_Abort+0x21c>)
 8001590:	4293      	cmp	r3, r2
 8001592:	d068      	beq.n	8001666 <HAL_DMA_Abort+0x20e>
 8001594:	687b      	ldr	r3, [r7, #4]
 8001596:	681b      	ldr	r3, [r3, #0]
 8001598:	4a37      	ldr	r2, [pc, #220]	; (8001678 <HAL_DMA_Abort+0x220>)
 800159a:	4293      	cmp	r3, r2
 800159c:	d063      	beq.n	8001666 <HAL_DMA_Abort+0x20e>
 800159e:	687b      	ldr	r3, [r7, #4]
 80015a0:	681b      	ldr	r3, [r3, #0]
 80015a2:	4a36      	ldr	r2, [pc, #216]	; (800167c <HAL_DMA_Abort+0x224>)
 80015a4:	4293      	cmp	r3, r2
 80015a6:	d05e      	beq.n	8001666 <HAL_DMA_Abort+0x20e>
 80015a8:	687b      	ldr	r3, [r7, #4]
 80015aa:	681b      	ldr	r3, [r3, #0]
 80015ac:	4a34      	ldr	r2, [pc, #208]	; (8001680 <HAL_DMA_Abort+0x228>)
 80015ae:	4293      	cmp	r3, r2
 80015b0:	d059      	beq.n	8001666 <HAL_DMA_Abort+0x20e>
 80015b2:	687b      	ldr	r3, [r7, #4]
 80015b4:	681b      	ldr	r3, [r3, #0]
 80015b6:	4a33      	ldr	r2, [pc, #204]	; (8001684 <HAL_DMA_Abort+0x22c>)
 80015b8:	4293      	cmp	r3, r2
 80015ba:	d054      	beq.n	8001666 <HAL_DMA_Abort+0x20e>
 80015bc:	687b      	ldr	r3, [r7, #4]
 80015be:	681b      	ldr	r3, [r3, #0]
 80015c0:	4a31      	ldr	r2, [pc, #196]	; (8001688 <HAL_DMA_Abort+0x230>)
 80015c2:	4293      	cmp	r3, r2
 80015c4:	d04f      	beq.n	8001666 <HAL_DMA_Abort+0x20e>
 80015c6:	687b      	ldr	r3, [r7, #4]
 80015c8:	681b      	ldr	r3, [r3, #0]
 80015ca:	4a30      	ldr	r2, [pc, #192]	; (800168c <HAL_DMA_Abort+0x234>)
 80015cc:	4293      	cmp	r3, r2
 80015ce:	d04a      	beq.n	8001666 <HAL_DMA_Abort+0x20e>
 80015d0:	687b      	ldr	r3, [r7, #4]
 80015d2:	681b      	ldr	r3, [r3, #0]
 80015d4:	4a2e      	ldr	r2, [pc, #184]	; (8001690 <HAL_DMA_Abort+0x238>)
 80015d6:	4293      	cmp	r3, r2
 80015d8:	d045      	beq.n	8001666 <HAL_DMA_Abort+0x20e>
 80015da:	687b      	ldr	r3, [r7, #4]
 80015dc:	681b      	ldr	r3, [r3, #0]
 80015de:	4a2d      	ldr	r2, [pc, #180]	; (8001694 <HAL_DMA_Abort+0x23c>)
 80015e0:	4293      	cmp	r3, r2
 80015e2:	d040      	beq.n	8001666 <HAL_DMA_Abort+0x20e>
 80015e4:	687b      	ldr	r3, [r7, #4]
 80015e6:	681b      	ldr	r3, [r3, #0]
 80015e8:	4a2b      	ldr	r2, [pc, #172]	; (8001698 <HAL_DMA_Abort+0x240>)
 80015ea:	4293      	cmp	r3, r2
 80015ec:	d03b      	beq.n	8001666 <HAL_DMA_Abort+0x20e>
 80015ee:	687b      	ldr	r3, [r7, #4]
 80015f0:	681b      	ldr	r3, [r3, #0]
 80015f2:	4a2a      	ldr	r2, [pc, #168]	; (800169c <HAL_DMA_Abort+0x244>)
 80015f4:	4293      	cmp	r3, r2
 80015f6:	d036      	beq.n	8001666 <HAL_DMA_Abort+0x20e>
 80015f8:	687b      	ldr	r3, [r7, #4]
 80015fa:	681b      	ldr	r3, [r3, #0]
 80015fc:	4a28      	ldr	r2, [pc, #160]	; (80016a0 <HAL_DMA_Abort+0x248>)
 80015fe:	4293      	cmp	r3, r2
 8001600:	d031      	beq.n	8001666 <HAL_DMA_Abort+0x20e>
 8001602:	687b      	ldr	r3, [r7, #4]
 8001604:	681b      	ldr	r3, [r3, #0]
 8001606:	4a27      	ldr	r2, [pc, #156]	; (80016a4 <HAL_DMA_Abort+0x24c>)
 8001608:	4293      	cmp	r3, r2
 800160a:	d02c      	beq.n	8001666 <HAL_DMA_Abort+0x20e>
 800160c:	687b      	ldr	r3, [r7, #4]
 800160e:	681b      	ldr	r3, [r3, #0]
 8001610:	4a25      	ldr	r2, [pc, #148]	; (80016a8 <HAL_DMA_Abort+0x250>)
 8001612:	4293      	cmp	r3, r2
 8001614:	d027      	beq.n	8001666 <HAL_DMA_Abort+0x20e>
 8001616:	687b      	ldr	r3, [r7, #4]
 8001618:	681b      	ldr	r3, [r3, #0]
 800161a:	4a24      	ldr	r2, [pc, #144]	; (80016ac <HAL_DMA_Abort+0x254>)
 800161c:	4293      	cmp	r3, r2
 800161e:	d022      	beq.n	8001666 <HAL_DMA_Abort+0x20e>
 8001620:	687b      	ldr	r3, [r7, #4]
 8001622:	681b      	ldr	r3, [r3, #0]
 8001624:	4a22      	ldr	r2, [pc, #136]	; (80016b0 <HAL_DMA_Abort+0x258>)
 8001626:	4293      	cmp	r3, r2
 8001628:	d01d      	beq.n	8001666 <HAL_DMA_Abort+0x20e>
 800162a:	687b      	ldr	r3, [r7, #4]
 800162c:	681b      	ldr	r3, [r3, #0]
 800162e:	4a21      	ldr	r2, [pc, #132]	; (80016b4 <HAL_DMA_Abort+0x25c>)
 8001630:	4293      	cmp	r3, r2
 8001632:	d018      	beq.n	8001666 <HAL_DMA_Abort+0x20e>
 8001634:	687b      	ldr	r3, [r7, #4]
 8001636:	681b      	ldr	r3, [r3, #0]
 8001638:	4a1f      	ldr	r2, [pc, #124]	; (80016b8 <HAL_DMA_Abort+0x260>)
 800163a:	4293      	cmp	r3, r2
 800163c:	d013      	beq.n	8001666 <HAL_DMA_Abort+0x20e>
 800163e:	687b      	ldr	r3, [r7, #4]
 8001640:	681b      	ldr	r3, [r3, #0]
 8001642:	4a1e      	ldr	r2, [pc, #120]	; (80016bc <HAL_DMA_Abort+0x264>)
 8001644:	4293      	cmp	r3, r2
 8001646:	d00e      	beq.n	8001666 <HAL_DMA_Abort+0x20e>
 8001648:	687b      	ldr	r3, [r7, #4]
 800164a:	681b      	ldr	r3, [r3, #0]
 800164c:	4a1c      	ldr	r2, [pc, #112]	; (80016c0 <HAL_DMA_Abort+0x268>)
 800164e:	4293      	cmp	r3, r2
 8001650:	d009      	beq.n	8001666 <HAL_DMA_Abort+0x20e>
 8001652:	687b      	ldr	r3, [r7, #4]
 8001654:	681b      	ldr	r3, [r3, #0]
 8001656:	4a1b      	ldr	r2, [pc, #108]	; (80016c4 <HAL_DMA_Abort+0x26c>)
 8001658:	4293      	cmp	r3, r2
 800165a:	d004      	beq.n	8001666 <HAL_DMA_Abort+0x20e>
 800165c:	687b      	ldr	r3, [r7, #4]
 800165e:	681b      	ldr	r3, [r3, #0]
 8001660:	4a19      	ldr	r2, [pc, #100]	; (80016c8 <HAL_DMA_Abort+0x270>)
 8001662:	4293      	cmp	r3, r2
 8001664:	d132      	bne.n	80016cc <HAL_DMA_Abort+0x274>
 8001666:	2301      	movs	r3, #1
 8001668:	e031      	b.n	80016ce <HAL_DMA_Abort+0x276>
 800166a:	bf00      	nop
 800166c:	40020010 	.word	0x40020010
 8001670:	40020028 	.word	0x40020028
 8001674:	40020040 	.word	0x40020040
 8001678:	40020058 	.word	0x40020058
 800167c:	40020070 	.word	0x40020070
 8001680:	40020088 	.word	0x40020088
 8001684:	400200a0 	.word	0x400200a0
 8001688:	400200b8 	.word	0x400200b8
 800168c:	40020410 	.word	0x40020410
 8001690:	40020428 	.word	0x40020428
 8001694:	40020440 	.word	0x40020440
 8001698:	40020458 	.word	0x40020458
 800169c:	40020470 	.word	0x40020470
 80016a0:	40020488 	.word	0x40020488
 80016a4:	400204a0 	.word	0x400204a0
 80016a8:	400204b8 	.word	0x400204b8
 80016ac:	58025408 	.word	0x58025408
 80016b0:	5802541c 	.word	0x5802541c
 80016b4:	58025430 	.word	0x58025430
 80016b8:	58025444 	.word	0x58025444
 80016bc:	58025458 	.word	0x58025458
 80016c0:	5802546c 	.word	0x5802546c
 80016c4:	58025480 	.word	0x58025480
 80016c8:	58025494 	.word	0x58025494
 80016cc:	2300      	movs	r3, #0
 80016ce:	2b00      	cmp	r3, #0
 80016d0:	d007      	beq.n	80016e2 <HAL_DMA_Abort+0x28a>
    {
      /* disable the DMAMUX sync overrun IT */
      hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 80016d2:	687b      	ldr	r3, [r7, #4]
 80016d4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80016d6:	681a      	ldr	r2, [r3, #0]
 80016d8:	687b      	ldr	r3, [r7, #4]
 80016da:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80016dc:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80016e0:	601a      	str	r2, [r3, #0]
    }

    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 80016e2:	687b      	ldr	r3, [r7, #4]
 80016e4:	681b      	ldr	r3, [r3, #0]
 80016e6:	4a6d      	ldr	r2, [pc, #436]	; (800189c <HAL_DMA_Abort+0x444>)
 80016e8:	4293      	cmp	r3, r2
 80016ea:	d04a      	beq.n	8001782 <HAL_DMA_Abort+0x32a>
 80016ec:	687b      	ldr	r3, [r7, #4]
 80016ee:	681b      	ldr	r3, [r3, #0]
 80016f0:	4a6b      	ldr	r2, [pc, #428]	; (80018a0 <HAL_DMA_Abort+0x448>)
 80016f2:	4293      	cmp	r3, r2
 80016f4:	d045      	beq.n	8001782 <HAL_DMA_Abort+0x32a>
 80016f6:	687b      	ldr	r3, [r7, #4]
 80016f8:	681b      	ldr	r3, [r3, #0]
 80016fa:	4a6a      	ldr	r2, [pc, #424]	; (80018a4 <HAL_DMA_Abort+0x44c>)
 80016fc:	4293      	cmp	r3, r2
 80016fe:	d040      	beq.n	8001782 <HAL_DMA_Abort+0x32a>
 8001700:	687b      	ldr	r3, [r7, #4]
 8001702:	681b      	ldr	r3, [r3, #0]
 8001704:	4a68      	ldr	r2, [pc, #416]	; (80018a8 <HAL_DMA_Abort+0x450>)
 8001706:	4293      	cmp	r3, r2
 8001708:	d03b      	beq.n	8001782 <HAL_DMA_Abort+0x32a>
 800170a:	687b      	ldr	r3, [r7, #4]
 800170c:	681b      	ldr	r3, [r3, #0]
 800170e:	4a67      	ldr	r2, [pc, #412]	; (80018ac <HAL_DMA_Abort+0x454>)
 8001710:	4293      	cmp	r3, r2
 8001712:	d036      	beq.n	8001782 <HAL_DMA_Abort+0x32a>
 8001714:	687b      	ldr	r3, [r7, #4]
 8001716:	681b      	ldr	r3, [r3, #0]
 8001718:	4a65      	ldr	r2, [pc, #404]	; (80018b0 <HAL_DMA_Abort+0x458>)
 800171a:	4293      	cmp	r3, r2
 800171c:	d031      	beq.n	8001782 <HAL_DMA_Abort+0x32a>
 800171e:	687b      	ldr	r3, [r7, #4]
 8001720:	681b      	ldr	r3, [r3, #0]
 8001722:	4a64      	ldr	r2, [pc, #400]	; (80018b4 <HAL_DMA_Abort+0x45c>)
 8001724:	4293      	cmp	r3, r2
 8001726:	d02c      	beq.n	8001782 <HAL_DMA_Abort+0x32a>
 8001728:	687b      	ldr	r3, [r7, #4]
 800172a:	681b      	ldr	r3, [r3, #0]
 800172c:	4a62      	ldr	r2, [pc, #392]	; (80018b8 <HAL_DMA_Abort+0x460>)
 800172e:	4293      	cmp	r3, r2
 8001730:	d027      	beq.n	8001782 <HAL_DMA_Abort+0x32a>
 8001732:	687b      	ldr	r3, [r7, #4]
 8001734:	681b      	ldr	r3, [r3, #0]
 8001736:	4a61      	ldr	r2, [pc, #388]	; (80018bc <HAL_DMA_Abort+0x464>)
 8001738:	4293      	cmp	r3, r2
 800173a:	d022      	beq.n	8001782 <HAL_DMA_Abort+0x32a>
 800173c:	687b      	ldr	r3, [r7, #4]
 800173e:	681b      	ldr	r3, [r3, #0]
 8001740:	4a5f      	ldr	r2, [pc, #380]	; (80018c0 <HAL_DMA_Abort+0x468>)
 8001742:	4293      	cmp	r3, r2
 8001744:	d01d      	beq.n	8001782 <HAL_DMA_Abort+0x32a>
 8001746:	687b      	ldr	r3, [r7, #4]
 8001748:	681b      	ldr	r3, [r3, #0]
 800174a:	4a5e      	ldr	r2, [pc, #376]	; (80018c4 <HAL_DMA_Abort+0x46c>)
 800174c:	4293      	cmp	r3, r2
 800174e:	d018      	beq.n	8001782 <HAL_DMA_Abort+0x32a>
 8001750:	687b      	ldr	r3, [r7, #4]
 8001752:	681b      	ldr	r3, [r3, #0]
 8001754:	4a5c      	ldr	r2, [pc, #368]	; (80018c8 <HAL_DMA_Abort+0x470>)
 8001756:	4293      	cmp	r3, r2
 8001758:	d013      	beq.n	8001782 <HAL_DMA_Abort+0x32a>
 800175a:	687b      	ldr	r3, [r7, #4]
 800175c:	681b      	ldr	r3, [r3, #0]
 800175e:	4a5b      	ldr	r2, [pc, #364]	; (80018cc <HAL_DMA_Abort+0x474>)
 8001760:	4293      	cmp	r3, r2
 8001762:	d00e      	beq.n	8001782 <HAL_DMA_Abort+0x32a>
 8001764:	687b      	ldr	r3, [r7, #4]
 8001766:	681b      	ldr	r3, [r3, #0]
 8001768:	4a59      	ldr	r2, [pc, #356]	; (80018d0 <HAL_DMA_Abort+0x478>)
 800176a:	4293      	cmp	r3, r2
 800176c:	d009      	beq.n	8001782 <HAL_DMA_Abort+0x32a>
 800176e:	687b      	ldr	r3, [r7, #4]
 8001770:	681b      	ldr	r3, [r3, #0]
 8001772:	4a58      	ldr	r2, [pc, #352]	; (80018d4 <HAL_DMA_Abort+0x47c>)
 8001774:	4293      	cmp	r3, r2
 8001776:	d004      	beq.n	8001782 <HAL_DMA_Abort+0x32a>
 8001778:	687b      	ldr	r3, [r7, #4]
 800177a:	681b      	ldr	r3, [r3, #0]
 800177c:	4a56      	ldr	r2, [pc, #344]	; (80018d8 <HAL_DMA_Abort+0x480>)
 800177e:	4293      	cmp	r3, r2
 8001780:	d108      	bne.n	8001794 <HAL_DMA_Abort+0x33c>
 8001782:	687b      	ldr	r3, [r7, #4]
 8001784:	681b      	ldr	r3, [r3, #0]
 8001786:	681a      	ldr	r2, [r3, #0]
 8001788:	687b      	ldr	r3, [r7, #4]
 800178a:	681b      	ldr	r3, [r3, #0]
 800178c:	f022 0201 	bic.w	r2, r2, #1
 8001790:	601a      	str	r2, [r3, #0]
 8001792:	e007      	b.n	80017a4 <HAL_DMA_Abort+0x34c>
 8001794:	687b      	ldr	r3, [r7, #4]
 8001796:	681b      	ldr	r3, [r3, #0]
 8001798:	681a      	ldr	r2, [r3, #0]
 800179a:	687b      	ldr	r3, [r7, #4]
 800179c:	681b      	ldr	r3, [r3, #0]
 800179e:	f022 0201 	bic.w	r2, r2, #1
 80017a2:	601a      	str	r2, [r3, #0]

    /* Check if the DMA Stream is effectively disabled */
    while(((*enableRegister) & DMA_SxCR_EN) != 0U)
 80017a4:	e013      	b.n	80017ce <HAL_DMA_Abort+0x376>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 80017a6:	f7ff fd27 	bl	80011f8 <HAL_GetTick>
 80017aa:	4602      	mov	r2, r0
 80017ac:	693b      	ldr	r3, [r7, #16]
 80017ae:	1ad3      	subs	r3, r2, r3
 80017b0:	2b05      	cmp	r3, #5
 80017b2:	d90c      	bls.n	80017ce <HAL_DMA_Abort+0x376>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80017b4:	687b      	ldr	r3, [r7, #4]
 80017b6:	2220      	movs	r2, #32
 80017b8:	655a      	str	r2, [r3, #84]	; 0x54

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 80017ba:	687b      	ldr	r3, [r7, #4]
 80017bc:	2200      	movs	r2, #0
 80017be:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_ERROR;
 80017c2:	687b      	ldr	r3, [r7, #4]
 80017c4:	2203      	movs	r2, #3
 80017c6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        return HAL_ERROR;
 80017ca:	2301      	movs	r3, #1
 80017cc:	e12d      	b.n	8001a2a <HAL_DMA_Abort+0x5d2>
    while(((*enableRegister) & DMA_SxCR_EN) != 0U)
 80017ce:	697b      	ldr	r3, [r7, #20]
 80017d0:	681b      	ldr	r3, [r3, #0]
 80017d2:	f003 0301 	and.w	r3, r3, #1
 80017d6:	2b00      	cmp	r3, #0
 80017d8:	d1e5      	bne.n	80017a6 <HAL_DMA_Abort+0x34e>
      }
    }

    /* Clear all interrupt flags at correct offset within the register */
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 80017da:	687b      	ldr	r3, [r7, #4]
 80017dc:	681b      	ldr	r3, [r3, #0]
 80017de:	4a2f      	ldr	r2, [pc, #188]	; (800189c <HAL_DMA_Abort+0x444>)
 80017e0:	4293      	cmp	r3, r2
 80017e2:	d04a      	beq.n	800187a <HAL_DMA_Abort+0x422>
 80017e4:	687b      	ldr	r3, [r7, #4]
 80017e6:	681b      	ldr	r3, [r3, #0]
 80017e8:	4a2d      	ldr	r2, [pc, #180]	; (80018a0 <HAL_DMA_Abort+0x448>)
 80017ea:	4293      	cmp	r3, r2
 80017ec:	d045      	beq.n	800187a <HAL_DMA_Abort+0x422>
 80017ee:	687b      	ldr	r3, [r7, #4]
 80017f0:	681b      	ldr	r3, [r3, #0]
 80017f2:	4a2c      	ldr	r2, [pc, #176]	; (80018a4 <HAL_DMA_Abort+0x44c>)
 80017f4:	4293      	cmp	r3, r2
 80017f6:	d040      	beq.n	800187a <HAL_DMA_Abort+0x422>
 80017f8:	687b      	ldr	r3, [r7, #4]
 80017fa:	681b      	ldr	r3, [r3, #0]
 80017fc:	4a2a      	ldr	r2, [pc, #168]	; (80018a8 <HAL_DMA_Abort+0x450>)
 80017fe:	4293      	cmp	r3, r2
 8001800:	d03b      	beq.n	800187a <HAL_DMA_Abort+0x422>
 8001802:	687b      	ldr	r3, [r7, #4]
 8001804:	681b      	ldr	r3, [r3, #0]
 8001806:	4a29      	ldr	r2, [pc, #164]	; (80018ac <HAL_DMA_Abort+0x454>)
 8001808:	4293      	cmp	r3, r2
 800180a:	d036      	beq.n	800187a <HAL_DMA_Abort+0x422>
 800180c:	687b      	ldr	r3, [r7, #4]
 800180e:	681b      	ldr	r3, [r3, #0]
 8001810:	4a27      	ldr	r2, [pc, #156]	; (80018b0 <HAL_DMA_Abort+0x458>)
 8001812:	4293      	cmp	r3, r2
 8001814:	d031      	beq.n	800187a <HAL_DMA_Abort+0x422>
 8001816:	687b      	ldr	r3, [r7, #4]
 8001818:	681b      	ldr	r3, [r3, #0]
 800181a:	4a26      	ldr	r2, [pc, #152]	; (80018b4 <HAL_DMA_Abort+0x45c>)
 800181c:	4293      	cmp	r3, r2
 800181e:	d02c      	beq.n	800187a <HAL_DMA_Abort+0x422>
 8001820:	687b      	ldr	r3, [r7, #4]
 8001822:	681b      	ldr	r3, [r3, #0]
 8001824:	4a24      	ldr	r2, [pc, #144]	; (80018b8 <HAL_DMA_Abort+0x460>)
 8001826:	4293      	cmp	r3, r2
 8001828:	d027      	beq.n	800187a <HAL_DMA_Abort+0x422>
 800182a:	687b      	ldr	r3, [r7, #4]
 800182c:	681b      	ldr	r3, [r3, #0]
 800182e:	4a23      	ldr	r2, [pc, #140]	; (80018bc <HAL_DMA_Abort+0x464>)
 8001830:	4293      	cmp	r3, r2
 8001832:	d022      	beq.n	800187a <HAL_DMA_Abort+0x422>
 8001834:	687b      	ldr	r3, [r7, #4]
 8001836:	681b      	ldr	r3, [r3, #0]
 8001838:	4a21      	ldr	r2, [pc, #132]	; (80018c0 <HAL_DMA_Abort+0x468>)
 800183a:	4293      	cmp	r3, r2
 800183c:	d01d      	beq.n	800187a <HAL_DMA_Abort+0x422>
 800183e:	687b      	ldr	r3, [r7, #4]
 8001840:	681b      	ldr	r3, [r3, #0]
 8001842:	4a20      	ldr	r2, [pc, #128]	; (80018c4 <HAL_DMA_Abort+0x46c>)
 8001844:	4293      	cmp	r3, r2
 8001846:	d018      	beq.n	800187a <HAL_DMA_Abort+0x422>
 8001848:	687b      	ldr	r3, [r7, #4]
 800184a:	681b      	ldr	r3, [r3, #0]
 800184c:	4a1e      	ldr	r2, [pc, #120]	; (80018c8 <HAL_DMA_Abort+0x470>)
 800184e:	4293      	cmp	r3, r2
 8001850:	d013      	beq.n	800187a <HAL_DMA_Abort+0x422>
 8001852:	687b      	ldr	r3, [r7, #4]
 8001854:	681b      	ldr	r3, [r3, #0]
 8001856:	4a1d      	ldr	r2, [pc, #116]	; (80018cc <HAL_DMA_Abort+0x474>)
 8001858:	4293      	cmp	r3, r2
 800185a:	d00e      	beq.n	800187a <HAL_DMA_Abort+0x422>
 800185c:	687b      	ldr	r3, [r7, #4]
 800185e:	681b      	ldr	r3, [r3, #0]
 8001860:	4a1b      	ldr	r2, [pc, #108]	; (80018d0 <HAL_DMA_Abort+0x478>)
 8001862:	4293      	cmp	r3, r2
 8001864:	d009      	beq.n	800187a <HAL_DMA_Abort+0x422>
 8001866:	687b      	ldr	r3, [r7, #4]
 8001868:	681b      	ldr	r3, [r3, #0]
 800186a:	4a1a      	ldr	r2, [pc, #104]	; (80018d4 <HAL_DMA_Abort+0x47c>)
 800186c:	4293      	cmp	r3, r2
 800186e:	d004      	beq.n	800187a <HAL_DMA_Abort+0x422>
 8001870:	687b      	ldr	r3, [r7, #4]
 8001872:	681b      	ldr	r3, [r3, #0]
 8001874:	4a18      	ldr	r2, [pc, #96]	; (80018d8 <HAL_DMA_Abort+0x480>)
 8001876:	4293      	cmp	r3, r2
 8001878:	d101      	bne.n	800187e <HAL_DMA_Abort+0x426>
 800187a:	2301      	movs	r3, #1
 800187c:	e000      	b.n	8001880 <HAL_DMA_Abort+0x428>
 800187e:	2300      	movs	r3, #0
 8001880:	2b00      	cmp	r3, #0
 8001882:	d02b      	beq.n	80018dc <HAL_DMA_Abort+0x484>
    {
      regs_dma = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8001884:	687b      	ldr	r3, [r7, #4]
 8001886:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001888:	60bb      	str	r3, [r7, #8]
      regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 800188a:	687b      	ldr	r3, [r7, #4]
 800188c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800188e:	f003 031f 	and.w	r3, r3, #31
 8001892:	223f      	movs	r2, #63	; 0x3f
 8001894:	409a      	lsls	r2, r3
 8001896:	68bb      	ldr	r3, [r7, #8]
 8001898:	609a      	str	r2, [r3, #8]
 800189a:	e02a      	b.n	80018f2 <HAL_DMA_Abort+0x49a>
 800189c:	40020010 	.word	0x40020010
 80018a0:	40020028 	.word	0x40020028
 80018a4:	40020040 	.word	0x40020040
 80018a8:	40020058 	.word	0x40020058
 80018ac:	40020070 	.word	0x40020070
 80018b0:	40020088 	.word	0x40020088
 80018b4:	400200a0 	.word	0x400200a0
 80018b8:	400200b8 	.word	0x400200b8
 80018bc:	40020410 	.word	0x40020410
 80018c0:	40020428 	.word	0x40020428
 80018c4:	40020440 	.word	0x40020440
 80018c8:	40020458 	.word	0x40020458
 80018cc:	40020470 	.word	0x40020470
 80018d0:	40020488 	.word	0x40020488
 80018d4:	400204a0 	.word	0x400204a0
 80018d8:	400204b8 	.word	0x400204b8
    }
    else /* BDMA channel */
    {
      regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 80018dc:	687b      	ldr	r3, [r7, #4]
 80018de:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80018e0:	60fb      	str	r3, [r7, #12]
      regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 80018e2:	687b      	ldr	r3, [r7, #4]
 80018e4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80018e6:	f003 031f 	and.w	r3, r3, #31
 80018ea:	2201      	movs	r2, #1
 80018ec:	409a      	lsls	r2, r3
 80018ee:	68fb      	ldr	r3, [r7, #12]
 80018f0:	605a      	str	r2, [r3, #4]
    }

    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 80018f2:	687b      	ldr	r3, [r7, #4]
 80018f4:	681b      	ldr	r3, [r3, #0]
 80018f6:	4a4f      	ldr	r2, [pc, #316]	; (8001a34 <HAL_DMA_Abort+0x5dc>)
 80018f8:	4293      	cmp	r3, r2
 80018fa:	d072      	beq.n	80019e2 <HAL_DMA_Abort+0x58a>
 80018fc:	687b      	ldr	r3, [r7, #4]
 80018fe:	681b      	ldr	r3, [r3, #0]
 8001900:	4a4d      	ldr	r2, [pc, #308]	; (8001a38 <HAL_DMA_Abort+0x5e0>)
 8001902:	4293      	cmp	r3, r2
 8001904:	d06d      	beq.n	80019e2 <HAL_DMA_Abort+0x58a>
 8001906:	687b      	ldr	r3, [r7, #4]
 8001908:	681b      	ldr	r3, [r3, #0]
 800190a:	4a4c      	ldr	r2, [pc, #304]	; (8001a3c <HAL_DMA_Abort+0x5e4>)
 800190c:	4293      	cmp	r3, r2
 800190e:	d068      	beq.n	80019e2 <HAL_DMA_Abort+0x58a>
 8001910:	687b      	ldr	r3, [r7, #4]
 8001912:	681b      	ldr	r3, [r3, #0]
 8001914:	4a4a      	ldr	r2, [pc, #296]	; (8001a40 <HAL_DMA_Abort+0x5e8>)
 8001916:	4293      	cmp	r3, r2
 8001918:	d063      	beq.n	80019e2 <HAL_DMA_Abort+0x58a>
 800191a:	687b      	ldr	r3, [r7, #4]
 800191c:	681b      	ldr	r3, [r3, #0]
 800191e:	4a49      	ldr	r2, [pc, #292]	; (8001a44 <HAL_DMA_Abort+0x5ec>)
 8001920:	4293      	cmp	r3, r2
 8001922:	d05e      	beq.n	80019e2 <HAL_DMA_Abort+0x58a>
 8001924:	687b      	ldr	r3, [r7, #4]
 8001926:	681b      	ldr	r3, [r3, #0]
 8001928:	4a47      	ldr	r2, [pc, #284]	; (8001a48 <HAL_DMA_Abort+0x5f0>)
 800192a:	4293      	cmp	r3, r2
 800192c:	d059      	beq.n	80019e2 <HAL_DMA_Abort+0x58a>
 800192e:	687b      	ldr	r3, [r7, #4]
 8001930:	681b      	ldr	r3, [r3, #0]
 8001932:	4a46      	ldr	r2, [pc, #280]	; (8001a4c <HAL_DMA_Abort+0x5f4>)
 8001934:	4293      	cmp	r3, r2
 8001936:	d054      	beq.n	80019e2 <HAL_DMA_Abort+0x58a>
 8001938:	687b      	ldr	r3, [r7, #4]
 800193a:	681b      	ldr	r3, [r3, #0]
 800193c:	4a44      	ldr	r2, [pc, #272]	; (8001a50 <HAL_DMA_Abort+0x5f8>)
 800193e:	4293      	cmp	r3, r2
 8001940:	d04f      	beq.n	80019e2 <HAL_DMA_Abort+0x58a>
 8001942:	687b      	ldr	r3, [r7, #4]
 8001944:	681b      	ldr	r3, [r3, #0]
 8001946:	4a43      	ldr	r2, [pc, #268]	; (8001a54 <HAL_DMA_Abort+0x5fc>)
 8001948:	4293      	cmp	r3, r2
 800194a:	d04a      	beq.n	80019e2 <HAL_DMA_Abort+0x58a>
 800194c:	687b      	ldr	r3, [r7, #4]
 800194e:	681b      	ldr	r3, [r3, #0]
 8001950:	4a41      	ldr	r2, [pc, #260]	; (8001a58 <HAL_DMA_Abort+0x600>)
 8001952:	4293      	cmp	r3, r2
 8001954:	d045      	beq.n	80019e2 <HAL_DMA_Abort+0x58a>
 8001956:	687b      	ldr	r3, [r7, #4]
 8001958:	681b      	ldr	r3, [r3, #0]
 800195a:	4a40      	ldr	r2, [pc, #256]	; (8001a5c <HAL_DMA_Abort+0x604>)
 800195c:	4293      	cmp	r3, r2
 800195e:	d040      	beq.n	80019e2 <HAL_DMA_Abort+0x58a>
 8001960:	687b      	ldr	r3, [r7, #4]
 8001962:	681b      	ldr	r3, [r3, #0]
 8001964:	4a3e      	ldr	r2, [pc, #248]	; (8001a60 <HAL_DMA_Abort+0x608>)
 8001966:	4293      	cmp	r3, r2
 8001968:	d03b      	beq.n	80019e2 <HAL_DMA_Abort+0x58a>
 800196a:	687b      	ldr	r3, [r7, #4]
 800196c:	681b      	ldr	r3, [r3, #0]
 800196e:	4a3d      	ldr	r2, [pc, #244]	; (8001a64 <HAL_DMA_Abort+0x60c>)
 8001970:	4293      	cmp	r3, r2
 8001972:	d036      	beq.n	80019e2 <HAL_DMA_Abort+0x58a>
 8001974:	687b      	ldr	r3, [r7, #4]
 8001976:	681b      	ldr	r3, [r3, #0]
 8001978:	4a3b      	ldr	r2, [pc, #236]	; (8001a68 <HAL_DMA_Abort+0x610>)
 800197a:	4293      	cmp	r3, r2
 800197c:	d031      	beq.n	80019e2 <HAL_DMA_Abort+0x58a>
 800197e:	687b      	ldr	r3, [r7, #4]
 8001980:	681b      	ldr	r3, [r3, #0]
 8001982:	4a3a      	ldr	r2, [pc, #232]	; (8001a6c <HAL_DMA_Abort+0x614>)
 8001984:	4293      	cmp	r3, r2
 8001986:	d02c      	beq.n	80019e2 <HAL_DMA_Abort+0x58a>
 8001988:	687b      	ldr	r3, [r7, #4]
 800198a:	681b      	ldr	r3, [r3, #0]
 800198c:	4a38      	ldr	r2, [pc, #224]	; (8001a70 <HAL_DMA_Abort+0x618>)
 800198e:	4293      	cmp	r3, r2
 8001990:	d027      	beq.n	80019e2 <HAL_DMA_Abort+0x58a>
 8001992:	687b      	ldr	r3, [r7, #4]
 8001994:	681b      	ldr	r3, [r3, #0]
 8001996:	4a37      	ldr	r2, [pc, #220]	; (8001a74 <HAL_DMA_Abort+0x61c>)
 8001998:	4293      	cmp	r3, r2
 800199a:	d022      	beq.n	80019e2 <HAL_DMA_Abort+0x58a>
 800199c:	687b      	ldr	r3, [r7, #4]
 800199e:	681b      	ldr	r3, [r3, #0]
 80019a0:	4a35      	ldr	r2, [pc, #212]	; (8001a78 <HAL_DMA_Abort+0x620>)
 80019a2:	4293      	cmp	r3, r2
 80019a4:	d01d      	beq.n	80019e2 <HAL_DMA_Abort+0x58a>
 80019a6:	687b      	ldr	r3, [r7, #4]
 80019a8:	681b      	ldr	r3, [r3, #0]
 80019aa:	4a34      	ldr	r2, [pc, #208]	; (8001a7c <HAL_DMA_Abort+0x624>)
 80019ac:	4293      	cmp	r3, r2
 80019ae:	d018      	beq.n	80019e2 <HAL_DMA_Abort+0x58a>
 80019b0:	687b      	ldr	r3, [r7, #4]
 80019b2:	681b      	ldr	r3, [r3, #0]
 80019b4:	4a32      	ldr	r2, [pc, #200]	; (8001a80 <HAL_DMA_Abort+0x628>)
 80019b6:	4293      	cmp	r3, r2
 80019b8:	d013      	beq.n	80019e2 <HAL_DMA_Abort+0x58a>
 80019ba:	687b      	ldr	r3, [r7, #4]
 80019bc:	681b      	ldr	r3, [r3, #0]
 80019be:	4a31      	ldr	r2, [pc, #196]	; (8001a84 <HAL_DMA_Abort+0x62c>)
 80019c0:	4293      	cmp	r3, r2
 80019c2:	d00e      	beq.n	80019e2 <HAL_DMA_Abort+0x58a>
 80019c4:	687b      	ldr	r3, [r7, #4]
 80019c6:	681b      	ldr	r3, [r3, #0]
 80019c8:	4a2f      	ldr	r2, [pc, #188]	; (8001a88 <HAL_DMA_Abort+0x630>)
 80019ca:	4293      	cmp	r3, r2
 80019cc:	d009      	beq.n	80019e2 <HAL_DMA_Abort+0x58a>
 80019ce:	687b      	ldr	r3, [r7, #4]
 80019d0:	681b      	ldr	r3, [r3, #0]
 80019d2:	4a2e      	ldr	r2, [pc, #184]	; (8001a8c <HAL_DMA_Abort+0x634>)
 80019d4:	4293      	cmp	r3, r2
 80019d6:	d004      	beq.n	80019e2 <HAL_DMA_Abort+0x58a>
 80019d8:	687b      	ldr	r3, [r7, #4]
 80019da:	681b      	ldr	r3, [r3, #0]
 80019dc:	4a2c      	ldr	r2, [pc, #176]	; (8001a90 <HAL_DMA_Abort+0x638>)
 80019de:	4293      	cmp	r3, r2
 80019e0:	d101      	bne.n	80019e6 <HAL_DMA_Abort+0x58e>
 80019e2:	2301      	movs	r3, #1
 80019e4:	e000      	b.n	80019e8 <HAL_DMA_Abort+0x590>
 80019e6:	2300      	movs	r3, #0
 80019e8:	2b00      	cmp	r3, #0
 80019ea:	d015      	beq.n	8001a18 <HAL_DMA_Abort+0x5c0>
    {
      /* Clear the DMAMUX synchro overrun flag */
      hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 80019ec:	687b      	ldr	r3, [r7, #4]
 80019ee:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80019f0:	687a      	ldr	r2, [r7, #4]
 80019f2:	6e92      	ldr	r2, [r2, #104]	; 0x68
 80019f4:	605a      	str	r2, [r3, #4]

      if(hdma->DMAmuxRequestGen != 0U)
 80019f6:	687b      	ldr	r3, [r7, #4]
 80019f8:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80019fa:	2b00      	cmp	r3, #0
 80019fc:	d00c      	beq.n	8001a18 <HAL_DMA_Abort+0x5c0>
      {
        /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT */
        /* disable the request gen overrun IT */
        hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 80019fe:	687b      	ldr	r3, [r7, #4]
 8001a00:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8001a02:	681a      	ldr	r2, [r3, #0]
 8001a04:	687b      	ldr	r3, [r7, #4]
 8001a06:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8001a08:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8001a0c:	601a      	str	r2, [r3, #0]

        /* Clear the DMAMUX request generator overrun flag */
        hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8001a0e:	687b      	ldr	r3, [r7, #4]
 8001a10:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001a12:	687a      	ldr	r2, [r7, #4]
 8001a14:	6f52      	ldr	r2, [r2, #116]	; 0x74
 8001a16:	605a      	str	r2, [r3, #4]
      }
    }

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001a18:	687b      	ldr	r3, [r7, #4]
 8001a1a:	2200      	movs	r2, #0
 8001a1c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8001a20:	687b      	ldr	r3, [r7, #4]
 8001a22:	2201      	movs	r2, #1
 8001a24:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
  }

  return HAL_OK;
 8001a28:	2300      	movs	r3, #0
}
 8001a2a:	4618      	mov	r0, r3
 8001a2c:	3718      	adds	r7, #24
 8001a2e:	46bd      	mov	sp, r7
 8001a30:	bd80      	pop	{r7, pc}
 8001a32:	bf00      	nop
 8001a34:	40020010 	.word	0x40020010
 8001a38:	40020028 	.word	0x40020028
 8001a3c:	40020040 	.word	0x40020040
 8001a40:	40020058 	.word	0x40020058
 8001a44:	40020070 	.word	0x40020070
 8001a48:	40020088 	.word	0x40020088
 8001a4c:	400200a0 	.word	0x400200a0
 8001a50:	400200b8 	.word	0x400200b8
 8001a54:	40020410 	.word	0x40020410
 8001a58:	40020428 	.word	0x40020428
 8001a5c:	40020440 	.word	0x40020440
 8001a60:	40020458 	.word	0x40020458
 8001a64:	40020470 	.word	0x40020470
 8001a68:	40020488 	.word	0x40020488
 8001a6c:	400204a0 	.word	0x400204a0
 8001a70:	400204b8 	.word	0x400204b8
 8001a74:	58025408 	.word	0x58025408
 8001a78:	5802541c 	.word	0x5802541c
 8001a7c:	58025430 	.word	0x58025430
 8001a80:	58025444 	.word	0x58025444
 8001a84:	58025458 	.word	0x58025458
 8001a88:	5802546c 	.word	0x5802546c
 8001a8c:	58025480 	.word	0x58025480
 8001a90:	58025494 	.word	0x58025494

08001a94 <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8001a94:	b580      	push	{r7, lr}
 8001a96:	b084      	sub	sp, #16
 8001a98:	af00      	add	r7, sp, #0
 8001a9a:	6078      	str	r0, [r7, #4]
  BDMA_Base_Registers *regs_bdma;

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 8001a9c:	687b      	ldr	r3, [r7, #4]
 8001a9e:	2b00      	cmp	r3, #0
 8001aa0:	d101      	bne.n	8001aa6 <HAL_DMA_Abort_IT+0x12>
  {
    return HAL_ERROR;
 8001aa2:	2301      	movs	r3, #1
 8001aa4:	e205      	b.n	8001eb2 <HAL_DMA_Abort_IT+0x41e>
  }

  if(hdma->State != HAL_DMA_STATE_BUSY)
 8001aa6:	687b      	ldr	r3, [r7, #4]
 8001aa8:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8001aac:	b2db      	uxtb	r3, r3
 8001aae:	2b02      	cmp	r3, #2
 8001ab0:	d004      	beq.n	8001abc <HAL_DMA_Abort_IT+0x28>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001ab2:	687b      	ldr	r3, [r7, #4]
 8001ab4:	2280      	movs	r2, #128	; 0x80
 8001ab6:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8001ab8:	2301      	movs	r3, #1
 8001aba:	e1fa      	b.n	8001eb2 <HAL_DMA_Abort_IT+0x41e>
  }
  else
  {
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8001abc:	687b      	ldr	r3, [r7, #4]
 8001abe:	681b      	ldr	r3, [r3, #0]
 8001ac0:	4a8c      	ldr	r2, [pc, #560]	; (8001cf4 <HAL_DMA_Abort_IT+0x260>)
 8001ac2:	4293      	cmp	r3, r2
 8001ac4:	d04a      	beq.n	8001b5c <HAL_DMA_Abort_IT+0xc8>
 8001ac6:	687b      	ldr	r3, [r7, #4]
 8001ac8:	681b      	ldr	r3, [r3, #0]
 8001aca:	4a8b      	ldr	r2, [pc, #556]	; (8001cf8 <HAL_DMA_Abort_IT+0x264>)
 8001acc:	4293      	cmp	r3, r2
 8001ace:	d045      	beq.n	8001b5c <HAL_DMA_Abort_IT+0xc8>
 8001ad0:	687b      	ldr	r3, [r7, #4]
 8001ad2:	681b      	ldr	r3, [r3, #0]
 8001ad4:	4a89      	ldr	r2, [pc, #548]	; (8001cfc <HAL_DMA_Abort_IT+0x268>)
 8001ad6:	4293      	cmp	r3, r2
 8001ad8:	d040      	beq.n	8001b5c <HAL_DMA_Abort_IT+0xc8>
 8001ada:	687b      	ldr	r3, [r7, #4]
 8001adc:	681b      	ldr	r3, [r3, #0]
 8001ade:	4a88      	ldr	r2, [pc, #544]	; (8001d00 <HAL_DMA_Abort_IT+0x26c>)
 8001ae0:	4293      	cmp	r3, r2
 8001ae2:	d03b      	beq.n	8001b5c <HAL_DMA_Abort_IT+0xc8>
 8001ae4:	687b      	ldr	r3, [r7, #4]
 8001ae6:	681b      	ldr	r3, [r3, #0]
 8001ae8:	4a86      	ldr	r2, [pc, #536]	; (8001d04 <HAL_DMA_Abort_IT+0x270>)
 8001aea:	4293      	cmp	r3, r2
 8001aec:	d036      	beq.n	8001b5c <HAL_DMA_Abort_IT+0xc8>
 8001aee:	687b      	ldr	r3, [r7, #4]
 8001af0:	681b      	ldr	r3, [r3, #0]
 8001af2:	4a85      	ldr	r2, [pc, #532]	; (8001d08 <HAL_DMA_Abort_IT+0x274>)
 8001af4:	4293      	cmp	r3, r2
 8001af6:	d031      	beq.n	8001b5c <HAL_DMA_Abort_IT+0xc8>
 8001af8:	687b      	ldr	r3, [r7, #4]
 8001afa:	681b      	ldr	r3, [r3, #0]
 8001afc:	4a83      	ldr	r2, [pc, #524]	; (8001d0c <HAL_DMA_Abort_IT+0x278>)
 8001afe:	4293      	cmp	r3, r2
 8001b00:	d02c      	beq.n	8001b5c <HAL_DMA_Abort_IT+0xc8>
 8001b02:	687b      	ldr	r3, [r7, #4]
 8001b04:	681b      	ldr	r3, [r3, #0]
 8001b06:	4a82      	ldr	r2, [pc, #520]	; (8001d10 <HAL_DMA_Abort_IT+0x27c>)
 8001b08:	4293      	cmp	r3, r2
 8001b0a:	d027      	beq.n	8001b5c <HAL_DMA_Abort_IT+0xc8>
 8001b0c:	687b      	ldr	r3, [r7, #4]
 8001b0e:	681b      	ldr	r3, [r3, #0]
 8001b10:	4a80      	ldr	r2, [pc, #512]	; (8001d14 <HAL_DMA_Abort_IT+0x280>)
 8001b12:	4293      	cmp	r3, r2
 8001b14:	d022      	beq.n	8001b5c <HAL_DMA_Abort_IT+0xc8>
 8001b16:	687b      	ldr	r3, [r7, #4]
 8001b18:	681b      	ldr	r3, [r3, #0]
 8001b1a:	4a7f      	ldr	r2, [pc, #508]	; (8001d18 <HAL_DMA_Abort_IT+0x284>)
 8001b1c:	4293      	cmp	r3, r2
 8001b1e:	d01d      	beq.n	8001b5c <HAL_DMA_Abort_IT+0xc8>
 8001b20:	687b      	ldr	r3, [r7, #4]
 8001b22:	681b      	ldr	r3, [r3, #0]
 8001b24:	4a7d      	ldr	r2, [pc, #500]	; (8001d1c <HAL_DMA_Abort_IT+0x288>)
 8001b26:	4293      	cmp	r3, r2
 8001b28:	d018      	beq.n	8001b5c <HAL_DMA_Abort_IT+0xc8>
 8001b2a:	687b      	ldr	r3, [r7, #4]
 8001b2c:	681b      	ldr	r3, [r3, #0]
 8001b2e:	4a7c      	ldr	r2, [pc, #496]	; (8001d20 <HAL_DMA_Abort_IT+0x28c>)
 8001b30:	4293      	cmp	r3, r2
 8001b32:	d013      	beq.n	8001b5c <HAL_DMA_Abort_IT+0xc8>
 8001b34:	687b      	ldr	r3, [r7, #4]
 8001b36:	681b      	ldr	r3, [r3, #0]
 8001b38:	4a7a      	ldr	r2, [pc, #488]	; (8001d24 <HAL_DMA_Abort_IT+0x290>)
 8001b3a:	4293      	cmp	r3, r2
 8001b3c:	d00e      	beq.n	8001b5c <HAL_DMA_Abort_IT+0xc8>
 8001b3e:	687b      	ldr	r3, [r7, #4]
 8001b40:	681b      	ldr	r3, [r3, #0]
 8001b42:	4a79      	ldr	r2, [pc, #484]	; (8001d28 <HAL_DMA_Abort_IT+0x294>)
 8001b44:	4293      	cmp	r3, r2
 8001b46:	d009      	beq.n	8001b5c <HAL_DMA_Abort_IT+0xc8>
 8001b48:	687b      	ldr	r3, [r7, #4]
 8001b4a:	681b      	ldr	r3, [r3, #0]
 8001b4c:	4a77      	ldr	r2, [pc, #476]	; (8001d2c <HAL_DMA_Abort_IT+0x298>)
 8001b4e:	4293      	cmp	r3, r2
 8001b50:	d004      	beq.n	8001b5c <HAL_DMA_Abort_IT+0xc8>
 8001b52:	687b      	ldr	r3, [r7, #4]
 8001b54:	681b      	ldr	r3, [r3, #0]
 8001b56:	4a76      	ldr	r2, [pc, #472]	; (8001d30 <HAL_DMA_Abort_IT+0x29c>)
 8001b58:	4293      	cmp	r3, r2
 8001b5a:	d101      	bne.n	8001b60 <HAL_DMA_Abort_IT+0xcc>
 8001b5c:	2301      	movs	r3, #1
 8001b5e:	e000      	b.n	8001b62 <HAL_DMA_Abort_IT+0xce>
 8001b60:	2300      	movs	r3, #0
 8001b62:	2b00      	cmp	r3, #0
 8001b64:	d065      	beq.n	8001c32 <HAL_DMA_Abort_IT+0x19e>
    {
      /* Set Abort State  */
      hdma->State = HAL_DMA_STATE_ABORT;
 8001b66:	687b      	ldr	r3, [r7, #4]
 8001b68:	2204      	movs	r2, #4
 8001b6a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8001b6e:	687b      	ldr	r3, [r7, #4]
 8001b70:	681b      	ldr	r3, [r3, #0]
 8001b72:	4a60      	ldr	r2, [pc, #384]	; (8001cf4 <HAL_DMA_Abort_IT+0x260>)
 8001b74:	4293      	cmp	r3, r2
 8001b76:	d04a      	beq.n	8001c0e <HAL_DMA_Abort_IT+0x17a>
 8001b78:	687b      	ldr	r3, [r7, #4]
 8001b7a:	681b      	ldr	r3, [r3, #0]
 8001b7c:	4a5e      	ldr	r2, [pc, #376]	; (8001cf8 <HAL_DMA_Abort_IT+0x264>)
 8001b7e:	4293      	cmp	r3, r2
 8001b80:	d045      	beq.n	8001c0e <HAL_DMA_Abort_IT+0x17a>
 8001b82:	687b      	ldr	r3, [r7, #4]
 8001b84:	681b      	ldr	r3, [r3, #0]
 8001b86:	4a5d      	ldr	r2, [pc, #372]	; (8001cfc <HAL_DMA_Abort_IT+0x268>)
 8001b88:	4293      	cmp	r3, r2
 8001b8a:	d040      	beq.n	8001c0e <HAL_DMA_Abort_IT+0x17a>
 8001b8c:	687b      	ldr	r3, [r7, #4]
 8001b8e:	681b      	ldr	r3, [r3, #0]
 8001b90:	4a5b      	ldr	r2, [pc, #364]	; (8001d00 <HAL_DMA_Abort_IT+0x26c>)
 8001b92:	4293      	cmp	r3, r2
 8001b94:	d03b      	beq.n	8001c0e <HAL_DMA_Abort_IT+0x17a>
 8001b96:	687b      	ldr	r3, [r7, #4]
 8001b98:	681b      	ldr	r3, [r3, #0]
 8001b9a:	4a5a      	ldr	r2, [pc, #360]	; (8001d04 <HAL_DMA_Abort_IT+0x270>)
 8001b9c:	4293      	cmp	r3, r2
 8001b9e:	d036      	beq.n	8001c0e <HAL_DMA_Abort_IT+0x17a>
 8001ba0:	687b      	ldr	r3, [r7, #4]
 8001ba2:	681b      	ldr	r3, [r3, #0]
 8001ba4:	4a58      	ldr	r2, [pc, #352]	; (8001d08 <HAL_DMA_Abort_IT+0x274>)
 8001ba6:	4293      	cmp	r3, r2
 8001ba8:	d031      	beq.n	8001c0e <HAL_DMA_Abort_IT+0x17a>
 8001baa:	687b      	ldr	r3, [r7, #4]
 8001bac:	681b      	ldr	r3, [r3, #0]
 8001bae:	4a57      	ldr	r2, [pc, #348]	; (8001d0c <HAL_DMA_Abort_IT+0x278>)
 8001bb0:	4293      	cmp	r3, r2
 8001bb2:	d02c      	beq.n	8001c0e <HAL_DMA_Abort_IT+0x17a>
 8001bb4:	687b      	ldr	r3, [r7, #4]
 8001bb6:	681b      	ldr	r3, [r3, #0]
 8001bb8:	4a55      	ldr	r2, [pc, #340]	; (8001d10 <HAL_DMA_Abort_IT+0x27c>)
 8001bba:	4293      	cmp	r3, r2
 8001bbc:	d027      	beq.n	8001c0e <HAL_DMA_Abort_IT+0x17a>
 8001bbe:	687b      	ldr	r3, [r7, #4]
 8001bc0:	681b      	ldr	r3, [r3, #0]
 8001bc2:	4a54      	ldr	r2, [pc, #336]	; (8001d14 <HAL_DMA_Abort_IT+0x280>)
 8001bc4:	4293      	cmp	r3, r2
 8001bc6:	d022      	beq.n	8001c0e <HAL_DMA_Abort_IT+0x17a>
 8001bc8:	687b      	ldr	r3, [r7, #4]
 8001bca:	681b      	ldr	r3, [r3, #0]
 8001bcc:	4a52      	ldr	r2, [pc, #328]	; (8001d18 <HAL_DMA_Abort_IT+0x284>)
 8001bce:	4293      	cmp	r3, r2
 8001bd0:	d01d      	beq.n	8001c0e <HAL_DMA_Abort_IT+0x17a>
 8001bd2:	687b      	ldr	r3, [r7, #4]
 8001bd4:	681b      	ldr	r3, [r3, #0]
 8001bd6:	4a51      	ldr	r2, [pc, #324]	; (8001d1c <HAL_DMA_Abort_IT+0x288>)
 8001bd8:	4293      	cmp	r3, r2
 8001bda:	d018      	beq.n	8001c0e <HAL_DMA_Abort_IT+0x17a>
 8001bdc:	687b      	ldr	r3, [r7, #4]
 8001bde:	681b      	ldr	r3, [r3, #0]
 8001be0:	4a4f      	ldr	r2, [pc, #316]	; (8001d20 <HAL_DMA_Abort_IT+0x28c>)
 8001be2:	4293      	cmp	r3, r2
 8001be4:	d013      	beq.n	8001c0e <HAL_DMA_Abort_IT+0x17a>
 8001be6:	687b      	ldr	r3, [r7, #4]
 8001be8:	681b      	ldr	r3, [r3, #0]
 8001bea:	4a4e      	ldr	r2, [pc, #312]	; (8001d24 <HAL_DMA_Abort_IT+0x290>)
 8001bec:	4293      	cmp	r3, r2
 8001bee:	d00e      	beq.n	8001c0e <HAL_DMA_Abort_IT+0x17a>
 8001bf0:	687b      	ldr	r3, [r7, #4]
 8001bf2:	681b      	ldr	r3, [r3, #0]
 8001bf4:	4a4c      	ldr	r2, [pc, #304]	; (8001d28 <HAL_DMA_Abort_IT+0x294>)
 8001bf6:	4293      	cmp	r3, r2
 8001bf8:	d009      	beq.n	8001c0e <HAL_DMA_Abort_IT+0x17a>
 8001bfa:	687b      	ldr	r3, [r7, #4]
 8001bfc:	681b      	ldr	r3, [r3, #0]
 8001bfe:	4a4b      	ldr	r2, [pc, #300]	; (8001d2c <HAL_DMA_Abort_IT+0x298>)
 8001c00:	4293      	cmp	r3, r2
 8001c02:	d004      	beq.n	8001c0e <HAL_DMA_Abort_IT+0x17a>
 8001c04:	687b      	ldr	r3, [r7, #4]
 8001c06:	681b      	ldr	r3, [r3, #0]
 8001c08:	4a49      	ldr	r2, [pc, #292]	; (8001d30 <HAL_DMA_Abort_IT+0x29c>)
 8001c0a:	4293      	cmp	r3, r2
 8001c0c:	d108      	bne.n	8001c20 <HAL_DMA_Abort_IT+0x18c>
 8001c0e:	687b      	ldr	r3, [r7, #4]
 8001c10:	681b      	ldr	r3, [r3, #0]
 8001c12:	681a      	ldr	r2, [r3, #0]
 8001c14:	687b      	ldr	r3, [r7, #4]
 8001c16:	681b      	ldr	r3, [r3, #0]
 8001c18:	f022 0201 	bic.w	r2, r2, #1
 8001c1c:	601a      	str	r2, [r3, #0]
 8001c1e:	e147      	b.n	8001eb0 <HAL_DMA_Abort_IT+0x41c>
 8001c20:	687b      	ldr	r3, [r7, #4]
 8001c22:	681b      	ldr	r3, [r3, #0]
 8001c24:	681a      	ldr	r2, [r3, #0]
 8001c26:	687b      	ldr	r3, [r7, #4]
 8001c28:	681b      	ldr	r3, [r3, #0]
 8001c2a:	f022 0201 	bic.w	r2, r2, #1
 8001c2e:	601a      	str	r2, [r3, #0]
 8001c30:	e13e      	b.n	8001eb0 <HAL_DMA_Abort_IT+0x41c>
    }
    else /* BDMA channel */
    {
      /* Disable DMA All Interrupts  */
      ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  &= ~(BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE);
 8001c32:	687b      	ldr	r3, [r7, #4]
 8001c34:	681b      	ldr	r3, [r3, #0]
 8001c36:	681a      	ldr	r2, [r3, #0]
 8001c38:	687b      	ldr	r3, [r7, #4]
 8001c3a:	681b      	ldr	r3, [r3, #0]
 8001c3c:	f022 020e 	bic.w	r2, r2, #14
 8001c40:	601a      	str	r2, [r3, #0]

      /* Disable the channel */
      __HAL_DMA_DISABLE(hdma);
 8001c42:	687b      	ldr	r3, [r7, #4]
 8001c44:	681b      	ldr	r3, [r3, #0]
 8001c46:	4a2b      	ldr	r2, [pc, #172]	; (8001cf4 <HAL_DMA_Abort_IT+0x260>)
 8001c48:	4293      	cmp	r3, r2
 8001c4a:	d04a      	beq.n	8001ce2 <HAL_DMA_Abort_IT+0x24e>
 8001c4c:	687b      	ldr	r3, [r7, #4]
 8001c4e:	681b      	ldr	r3, [r3, #0]
 8001c50:	4a29      	ldr	r2, [pc, #164]	; (8001cf8 <HAL_DMA_Abort_IT+0x264>)
 8001c52:	4293      	cmp	r3, r2
 8001c54:	d045      	beq.n	8001ce2 <HAL_DMA_Abort_IT+0x24e>
 8001c56:	687b      	ldr	r3, [r7, #4]
 8001c58:	681b      	ldr	r3, [r3, #0]
 8001c5a:	4a28      	ldr	r2, [pc, #160]	; (8001cfc <HAL_DMA_Abort_IT+0x268>)
 8001c5c:	4293      	cmp	r3, r2
 8001c5e:	d040      	beq.n	8001ce2 <HAL_DMA_Abort_IT+0x24e>
 8001c60:	687b      	ldr	r3, [r7, #4]
 8001c62:	681b      	ldr	r3, [r3, #0]
 8001c64:	4a26      	ldr	r2, [pc, #152]	; (8001d00 <HAL_DMA_Abort_IT+0x26c>)
 8001c66:	4293      	cmp	r3, r2
 8001c68:	d03b      	beq.n	8001ce2 <HAL_DMA_Abort_IT+0x24e>
 8001c6a:	687b      	ldr	r3, [r7, #4]
 8001c6c:	681b      	ldr	r3, [r3, #0]
 8001c6e:	4a25      	ldr	r2, [pc, #148]	; (8001d04 <HAL_DMA_Abort_IT+0x270>)
 8001c70:	4293      	cmp	r3, r2
 8001c72:	d036      	beq.n	8001ce2 <HAL_DMA_Abort_IT+0x24e>
 8001c74:	687b      	ldr	r3, [r7, #4]
 8001c76:	681b      	ldr	r3, [r3, #0]
 8001c78:	4a23      	ldr	r2, [pc, #140]	; (8001d08 <HAL_DMA_Abort_IT+0x274>)
 8001c7a:	4293      	cmp	r3, r2
 8001c7c:	d031      	beq.n	8001ce2 <HAL_DMA_Abort_IT+0x24e>
 8001c7e:	687b      	ldr	r3, [r7, #4]
 8001c80:	681b      	ldr	r3, [r3, #0]
 8001c82:	4a22      	ldr	r2, [pc, #136]	; (8001d0c <HAL_DMA_Abort_IT+0x278>)
 8001c84:	4293      	cmp	r3, r2
 8001c86:	d02c      	beq.n	8001ce2 <HAL_DMA_Abort_IT+0x24e>
 8001c88:	687b      	ldr	r3, [r7, #4]
 8001c8a:	681b      	ldr	r3, [r3, #0]
 8001c8c:	4a20      	ldr	r2, [pc, #128]	; (8001d10 <HAL_DMA_Abort_IT+0x27c>)
 8001c8e:	4293      	cmp	r3, r2
 8001c90:	d027      	beq.n	8001ce2 <HAL_DMA_Abort_IT+0x24e>
 8001c92:	687b      	ldr	r3, [r7, #4]
 8001c94:	681b      	ldr	r3, [r3, #0]
 8001c96:	4a1f      	ldr	r2, [pc, #124]	; (8001d14 <HAL_DMA_Abort_IT+0x280>)
 8001c98:	4293      	cmp	r3, r2
 8001c9a:	d022      	beq.n	8001ce2 <HAL_DMA_Abort_IT+0x24e>
 8001c9c:	687b      	ldr	r3, [r7, #4]
 8001c9e:	681b      	ldr	r3, [r3, #0]
 8001ca0:	4a1d      	ldr	r2, [pc, #116]	; (8001d18 <HAL_DMA_Abort_IT+0x284>)
 8001ca2:	4293      	cmp	r3, r2
 8001ca4:	d01d      	beq.n	8001ce2 <HAL_DMA_Abort_IT+0x24e>
 8001ca6:	687b      	ldr	r3, [r7, #4]
 8001ca8:	681b      	ldr	r3, [r3, #0]
 8001caa:	4a1c      	ldr	r2, [pc, #112]	; (8001d1c <HAL_DMA_Abort_IT+0x288>)
 8001cac:	4293      	cmp	r3, r2
 8001cae:	d018      	beq.n	8001ce2 <HAL_DMA_Abort_IT+0x24e>
 8001cb0:	687b      	ldr	r3, [r7, #4]
 8001cb2:	681b      	ldr	r3, [r3, #0]
 8001cb4:	4a1a      	ldr	r2, [pc, #104]	; (8001d20 <HAL_DMA_Abort_IT+0x28c>)
 8001cb6:	4293      	cmp	r3, r2
 8001cb8:	d013      	beq.n	8001ce2 <HAL_DMA_Abort_IT+0x24e>
 8001cba:	687b      	ldr	r3, [r7, #4]
 8001cbc:	681b      	ldr	r3, [r3, #0]
 8001cbe:	4a19      	ldr	r2, [pc, #100]	; (8001d24 <HAL_DMA_Abort_IT+0x290>)
 8001cc0:	4293      	cmp	r3, r2
 8001cc2:	d00e      	beq.n	8001ce2 <HAL_DMA_Abort_IT+0x24e>
 8001cc4:	687b      	ldr	r3, [r7, #4]
 8001cc6:	681b      	ldr	r3, [r3, #0]
 8001cc8:	4a17      	ldr	r2, [pc, #92]	; (8001d28 <HAL_DMA_Abort_IT+0x294>)
 8001cca:	4293      	cmp	r3, r2
 8001ccc:	d009      	beq.n	8001ce2 <HAL_DMA_Abort_IT+0x24e>
 8001cce:	687b      	ldr	r3, [r7, #4]
 8001cd0:	681b      	ldr	r3, [r3, #0]
 8001cd2:	4a16      	ldr	r2, [pc, #88]	; (8001d2c <HAL_DMA_Abort_IT+0x298>)
 8001cd4:	4293      	cmp	r3, r2
 8001cd6:	d004      	beq.n	8001ce2 <HAL_DMA_Abort_IT+0x24e>
 8001cd8:	687b      	ldr	r3, [r7, #4]
 8001cda:	681b      	ldr	r3, [r3, #0]
 8001cdc:	4a14      	ldr	r2, [pc, #80]	; (8001d30 <HAL_DMA_Abort_IT+0x29c>)
 8001cde:	4293      	cmp	r3, r2
 8001ce0:	d128      	bne.n	8001d34 <HAL_DMA_Abort_IT+0x2a0>
 8001ce2:	687b      	ldr	r3, [r7, #4]
 8001ce4:	681b      	ldr	r3, [r3, #0]
 8001ce6:	681a      	ldr	r2, [r3, #0]
 8001ce8:	687b      	ldr	r3, [r7, #4]
 8001cea:	681b      	ldr	r3, [r3, #0]
 8001cec:	f022 0201 	bic.w	r2, r2, #1
 8001cf0:	601a      	str	r2, [r3, #0]
 8001cf2:	e027      	b.n	8001d44 <HAL_DMA_Abort_IT+0x2b0>
 8001cf4:	40020010 	.word	0x40020010
 8001cf8:	40020028 	.word	0x40020028
 8001cfc:	40020040 	.word	0x40020040
 8001d00:	40020058 	.word	0x40020058
 8001d04:	40020070 	.word	0x40020070
 8001d08:	40020088 	.word	0x40020088
 8001d0c:	400200a0 	.word	0x400200a0
 8001d10:	400200b8 	.word	0x400200b8
 8001d14:	40020410 	.word	0x40020410
 8001d18:	40020428 	.word	0x40020428
 8001d1c:	40020440 	.word	0x40020440
 8001d20:	40020458 	.word	0x40020458
 8001d24:	40020470 	.word	0x40020470
 8001d28:	40020488 	.word	0x40020488
 8001d2c:	400204a0 	.word	0x400204a0
 8001d30:	400204b8 	.word	0x400204b8
 8001d34:	687b      	ldr	r3, [r7, #4]
 8001d36:	681b      	ldr	r3, [r3, #0]
 8001d38:	681a      	ldr	r2, [r3, #0]
 8001d3a:	687b      	ldr	r3, [r7, #4]
 8001d3c:	681b      	ldr	r3, [r3, #0]
 8001d3e:	f022 0201 	bic.w	r2, r2, #1
 8001d42:	601a      	str	r2, [r3, #0]

      if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8001d44:	687b      	ldr	r3, [r7, #4]
 8001d46:	681b      	ldr	r3, [r3, #0]
 8001d48:	4a5c      	ldr	r2, [pc, #368]	; (8001ebc <HAL_DMA_Abort_IT+0x428>)
 8001d4a:	4293      	cmp	r3, r2
 8001d4c:	d072      	beq.n	8001e34 <HAL_DMA_Abort_IT+0x3a0>
 8001d4e:	687b      	ldr	r3, [r7, #4]
 8001d50:	681b      	ldr	r3, [r3, #0]
 8001d52:	4a5b      	ldr	r2, [pc, #364]	; (8001ec0 <HAL_DMA_Abort_IT+0x42c>)
 8001d54:	4293      	cmp	r3, r2
 8001d56:	d06d      	beq.n	8001e34 <HAL_DMA_Abort_IT+0x3a0>
 8001d58:	687b      	ldr	r3, [r7, #4]
 8001d5a:	681b      	ldr	r3, [r3, #0]
 8001d5c:	4a59      	ldr	r2, [pc, #356]	; (8001ec4 <HAL_DMA_Abort_IT+0x430>)
 8001d5e:	4293      	cmp	r3, r2
 8001d60:	d068      	beq.n	8001e34 <HAL_DMA_Abort_IT+0x3a0>
 8001d62:	687b      	ldr	r3, [r7, #4]
 8001d64:	681b      	ldr	r3, [r3, #0]
 8001d66:	4a58      	ldr	r2, [pc, #352]	; (8001ec8 <HAL_DMA_Abort_IT+0x434>)
 8001d68:	4293      	cmp	r3, r2
 8001d6a:	d063      	beq.n	8001e34 <HAL_DMA_Abort_IT+0x3a0>
 8001d6c:	687b      	ldr	r3, [r7, #4]
 8001d6e:	681b      	ldr	r3, [r3, #0]
 8001d70:	4a56      	ldr	r2, [pc, #344]	; (8001ecc <HAL_DMA_Abort_IT+0x438>)
 8001d72:	4293      	cmp	r3, r2
 8001d74:	d05e      	beq.n	8001e34 <HAL_DMA_Abort_IT+0x3a0>
 8001d76:	687b      	ldr	r3, [r7, #4]
 8001d78:	681b      	ldr	r3, [r3, #0]
 8001d7a:	4a55      	ldr	r2, [pc, #340]	; (8001ed0 <HAL_DMA_Abort_IT+0x43c>)
 8001d7c:	4293      	cmp	r3, r2
 8001d7e:	d059      	beq.n	8001e34 <HAL_DMA_Abort_IT+0x3a0>
 8001d80:	687b      	ldr	r3, [r7, #4]
 8001d82:	681b      	ldr	r3, [r3, #0]
 8001d84:	4a53      	ldr	r2, [pc, #332]	; (8001ed4 <HAL_DMA_Abort_IT+0x440>)
 8001d86:	4293      	cmp	r3, r2
 8001d88:	d054      	beq.n	8001e34 <HAL_DMA_Abort_IT+0x3a0>
 8001d8a:	687b      	ldr	r3, [r7, #4]
 8001d8c:	681b      	ldr	r3, [r3, #0]
 8001d8e:	4a52      	ldr	r2, [pc, #328]	; (8001ed8 <HAL_DMA_Abort_IT+0x444>)
 8001d90:	4293      	cmp	r3, r2
 8001d92:	d04f      	beq.n	8001e34 <HAL_DMA_Abort_IT+0x3a0>
 8001d94:	687b      	ldr	r3, [r7, #4]
 8001d96:	681b      	ldr	r3, [r3, #0]
 8001d98:	4a50      	ldr	r2, [pc, #320]	; (8001edc <HAL_DMA_Abort_IT+0x448>)
 8001d9a:	4293      	cmp	r3, r2
 8001d9c:	d04a      	beq.n	8001e34 <HAL_DMA_Abort_IT+0x3a0>
 8001d9e:	687b      	ldr	r3, [r7, #4]
 8001da0:	681b      	ldr	r3, [r3, #0]
 8001da2:	4a4f      	ldr	r2, [pc, #316]	; (8001ee0 <HAL_DMA_Abort_IT+0x44c>)
 8001da4:	4293      	cmp	r3, r2
 8001da6:	d045      	beq.n	8001e34 <HAL_DMA_Abort_IT+0x3a0>
 8001da8:	687b      	ldr	r3, [r7, #4]
 8001daa:	681b      	ldr	r3, [r3, #0]
 8001dac:	4a4d      	ldr	r2, [pc, #308]	; (8001ee4 <HAL_DMA_Abort_IT+0x450>)
 8001dae:	4293      	cmp	r3, r2
 8001db0:	d040      	beq.n	8001e34 <HAL_DMA_Abort_IT+0x3a0>
 8001db2:	687b      	ldr	r3, [r7, #4]
 8001db4:	681b      	ldr	r3, [r3, #0]
 8001db6:	4a4c      	ldr	r2, [pc, #304]	; (8001ee8 <HAL_DMA_Abort_IT+0x454>)
 8001db8:	4293      	cmp	r3, r2
 8001dba:	d03b      	beq.n	8001e34 <HAL_DMA_Abort_IT+0x3a0>
 8001dbc:	687b      	ldr	r3, [r7, #4]
 8001dbe:	681b      	ldr	r3, [r3, #0]
 8001dc0:	4a4a      	ldr	r2, [pc, #296]	; (8001eec <HAL_DMA_Abort_IT+0x458>)
 8001dc2:	4293      	cmp	r3, r2
 8001dc4:	d036      	beq.n	8001e34 <HAL_DMA_Abort_IT+0x3a0>
 8001dc6:	687b      	ldr	r3, [r7, #4]
 8001dc8:	681b      	ldr	r3, [r3, #0]
 8001dca:	4a49      	ldr	r2, [pc, #292]	; (8001ef0 <HAL_DMA_Abort_IT+0x45c>)
 8001dcc:	4293      	cmp	r3, r2
 8001dce:	d031      	beq.n	8001e34 <HAL_DMA_Abort_IT+0x3a0>
 8001dd0:	687b      	ldr	r3, [r7, #4]
 8001dd2:	681b      	ldr	r3, [r3, #0]
 8001dd4:	4a47      	ldr	r2, [pc, #284]	; (8001ef4 <HAL_DMA_Abort_IT+0x460>)
 8001dd6:	4293      	cmp	r3, r2
 8001dd8:	d02c      	beq.n	8001e34 <HAL_DMA_Abort_IT+0x3a0>
 8001dda:	687b      	ldr	r3, [r7, #4]
 8001ddc:	681b      	ldr	r3, [r3, #0]
 8001dde:	4a46      	ldr	r2, [pc, #280]	; (8001ef8 <HAL_DMA_Abort_IT+0x464>)
 8001de0:	4293      	cmp	r3, r2
 8001de2:	d027      	beq.n	8001e34 <HAL_DMA_Abort_IT+0x3a0>
 8001de4:	687b      	ldr	r3, [r7, #4]
 8001de6:	681b      	ldr	r3, [r3, #0]
 8001de8:	4a44      	ldr	r2, [pc, #272]	; (8001efc <HAL_DMA_Abort_IT+0x468>)
 8001dea:	4293      	cmp	r3, r2
 8001dec:	d022      	beq.n	8001e34 <HAL_DMA_Abort_IT+0x3a0>
 8001dee:	687b      	ldr	r3, [r7, #4]
 8001df0:	681b      	ldr	r3, [r3, #0]
 8001df2:	4a43      	ldr	r2, [pc, #268]	; (8001f00 <HAL_DMA_Abort_IT+0x46c>)
 8001df4:	4293      	cmp	r3, r2
 8001df6:	d01d      	beq.n	8001e34 <HAL_DMA_Abort_IT+0x3a0>
 8001df8:	687b      	ldr	r3, [r7, #4]
 8001dfa:	681b      	ldr	r3, [r3, #0]
 8001dfc:	4a41      	ldr	r2, [pc, #260]	; (8001f04 <HAL_DMA_Abort_IT+0x470>)
 8001dfe:	4293      	cmp	r3, r2
 8001e00:	d018      	beq.n	8001e34 <HAL_DMA_Abort_IT+0x3a0>
 8001e02:	687b      	ldr	r3, [r7, #4]
 8001e04:	681b      	ldr	r3, [r3, #0]
 8001e06:	4a40      	ldr	r2, [pc, #256]	; (8001f08 <HAL_DMA_Abort_IT+0x474>)
 8001e08:	4293      	cmp	r3, r2
 8001e0a:	d013      	beq.n	8001e34 <HAL_DMA_Abort_IT+0x3a0>
 8001e0c:	687b      	ldr	r3, [r7, #4]
 8001e0e:	681b      	ldr	r3, [r3, #0]
 8001e10:	4a3e      	ldr	r2, [pc, #248]	; (8001f0c <HAL_DMA_Abort_IT+0x478>)
 8001e12:	4293      	cmp	r3, r2
 8001e14:	d00e      	beq.n	8001e34 <HAL_DMA_Abort_IT+0x3a0>
 8001e16:	687b      	ldr	r3, [r7, #4]
 8001e18:	681b      	ldr	r3, [r3, #0]
 8001e1a:	4a3d      	ldr	r2, [pc, #244]	; (8001f10 <HAL_DMA_Abort_IT+0x47c>)
 8001e1c:	4293      	cmp	r3, r2
 8001e1e:	d009      	beq.n	8001e34 <HAL_DMA_Abort_IT+0x3a0>
 8001e20:	687b      	ldr	r3, [r7, #4]
 8001e22:	681b      	ldr	r3, [r3, #0]
 8001e24:	4a3b      	ldr	r2, [pc, #236]	; (8001f14 <HAL_DMA_Abort_IT+0x480>)
 8001e26:	4293      	cmp	r3, r2
 8001e28:	d004      	beq.n	8001e34 <HAL_DMA_Abort_IT+0x3a0>
 8001e2a:	687b      	ldr	r3, [r7, #4]
 8001e2c:	681b      	ldr	r3, [r3, #0]
 8001e2e:	4a3a      	ldr	r2, [pc, #232]	; (8001f18 <HAL_DMA_Abort_IT+0x484>)
 8001e30:	4293      	cmp	r3, r2
 8001e32:	d101      	bne.n	8001e38 <HAL_DMA_Abort_IT+0x3a4>
 8001e34:	2301      	movs	r3, #1
 8001e36:	e000      	b.n	8001e3a <HAL_DMA_Abort_IT+0x3a6>
 8001e38:	2300      	movs	r3, #0
 8001e3a:	2b00      	cmp	r3, #0
 8001e3c:	d028      	beq.n	8001e90 <HAL_DMA_Abort_IT+0x3fc>
      {
        /* disable the DMAMUX sync overrun IT */
        hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8001e3e:	687b      	ldr	r3, [r7, #4]
 8001e40:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001e42:	681a      	ldr	r2, [r3, #0]
 8001e44:	687b      	ldr	r3, [r7, #4]
 8001e46:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001e48:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8001e4c:	601a      	str	r2, [r3, #0]

        /* Clear all flags */
        regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 8001e4e:	687b      	ldr	r3, [r7, #4]
 8001e50:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001e52:	60fb      	str	r3, [r7, #12]
        regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 8001e54:	687b      	ldr	r3, [r7, #4]
 8001e56:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001e58:	f003 031f 	and.w	r3, r3, #31
 8001e5c:	2201      	movs	r2, #1
 8001e5e:	409a      	lsls	r2, r3
 8001e60:	68fb      	ldr	r3, [r7, #12]
 8001e62:	605a      	str	r2, [r3, #4]

        /* Clear the DMAMUX synchro overrun flag */
        hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8001e64:	687b      	ldr	r3, [r7, #4]
 8001e66:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8001e68:	687a      	ldr	r2, [r7, #4]
 8001e6a:	6e92      	ldr	r2, [r2, #104]	; 0x68
 8001e6c:	605a      	str	r2, [r3, #4]

        if(hdma->DMAmuxRequestGen != 0U)
 8001e6e:	687b      	ldr	r3, [r7, #4]
 8001e70:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8001e72:	2b00      	cmp	r3, #0
 8001e74:	d00c      	beq.n	8001e90 <HAL_DMA_Abort_IT+0x3fc>
        {
          /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
          /* disable the request gen overrun IT */
          hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8001e76:	687b      	ldr	r3, [r7, #4]
 8001e78:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8001e7a:	681a      	ldr	r2, [r3, #0]
 8001e7c:	687b      	ldr	r3, [r7, #4]
 8001e7e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8001e80:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8001e84:	601a      	str	r2, [r3, #0]

          /* Clear the DMAMUX request generator overrun flag */
          hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8001e86:	687b      	ldr	r3, [r7, #4]
 8001e88:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001e8a:	687a      	ldr	r2, [r7, #4]
 8001e8c:	6f52      	ldr	r2, [r2, #116]	; 0x74
 8001e8e:	605a      	str	r2, [r3, #4]
        }
      }

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8001e90:	687b      	ldr	r3, [r7, #4]
 8001e92:	2200      	movs	r2, #0
 8001e94:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8001e98:	687b      	ldr	r3, [r7, #4]
 8001e9a:	2201      	movs	r2, #1
 8001e9c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Call User Abort callback */
      if(hdma->XferAbortCallback != NULL)
 8001ea0:	687b      	ldr	r3, [r7, #4]
 8001ea2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001ea4:	2b00      	cmp	r3, #0
 8001ea6:	d003      	beq.n	8001eb0 <HAL_DMA_Abort_IT+0x41c>
      {
        hdma->XferAbortCallback(hdma);
 8001ea8:	687b      	ldr	r3, [r7, #4]
 8001eaa:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001eac:	6878      	ldr	r0, [r7, #4]
 8001eae:	4798      	blx	r3
      }
    }
  }

  return HAL_OK;
 8001eb0:	2300      	movs	r3, #0
}
 8001eb2:	4618      	mov	r0, r3
 8001eb4:	3710      	adds	r7, #16
 8001eb6:	46bd      	mov	sp, r7
 8001eb8:	bd80      	pop	{r7, pc}
 8001eba:	bf00      	nop
 8001ebc:	40020010 	.word	0x40020010
 8001ec0:	40020028 	.word	0x40020028
 8001ec4:	40020040 	.word	0x40020040
 8001ec8:	40020058 	.word	0x40020058
 8001ecc:	40020070 	.word	0x40020070
 8001ed0:	40020088 	.word	0x40020088
 8001ed4:	400200a0 	.word	0x400200a0
 8001ed8:	400200b8 	.word	0x400200b8
 8001edc:	40020410 	.word	0x40020410
 8001ee0:	40020428 	.word	0x40020428
 8001ee4:	40020440 	.word	0x40020440
 8001ee8:	40020458 	.word	0x40020458
 8001eec:	40020470 	.word	0x40020470
 8001ef0:	40020488 	.word	0x40020488
 8001ef4:	400204a0 	.word	0x400204a0
 8001ef8:	400204b8 	.word	0x400204b8
 8001efc:	58025408 	.word	0x58025408
 8001f00:	5802541c 	.word	0x5802541c
 8001f04:	58025430 	.word	0x58025430
 8001f08:	58025444 	.word	0x58025444
 8001f0c:	58025458 	.word	0x58025458
 8001f10:	5802546c 	.word	0x5802546c
 8001f14:	58025480 	.word	0x58025480
 8001f18:	58025494 	.word	0x58025494

08001f1c <HAL_ETH_Init>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Init(ETH_HandleTypeDef *heth)
{
 8001f1c:	b580      	push	{r7, lr}
 8001f1e:	b084      	sub	sp, #16
 8001f20:	af00      	add	r7, sp, #0
 8001f22:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if(heth == NULL)
 8001f24:	687b      	ldr	r3, [r7, #4]
 8001f26:	2b00      	cmp	r3, #0
 8001f28:	d101      	bne.n	8001f2e <HAL_ETH_Init+0x12>
  {
    return HAL_ERROR;
 8001f2a:	2301      	movs	r3, #1
 8001f2c:	e0c6      	b.n	80020bc <HAL_ETH_Init+0x1a0>
  }

#else

  /* Check the ETH peripheral state */
  if(heth->gState == HAL_ETH_STATE_RESET)
 8001f2e:	687b      	ldr	r3, [r7, #4]
 8001f30:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8001f32:	2b00      	cmp	r3, #0
 8001f34:	d102      	bne.n	8001f3c <HAL_ETH_Init+0x20>
  {
    /* Init the low level hardware : GPIO, CLOCK, NVIC. */
    HAL_ETH_MspInit(heth);
 8001f36:	6878      	ldr	r0, [r7, #4]
 8001f38:	f7fe fe1a 	bl	8000b70 <HAL_ETH_MspInit>
  }
#endif /* (USE_HAL_ETH_REGISTER_CALLBACKS) */

  heth->gState = HAL_ETH_STATE_BUSY;
 8001f3c:	687b      	ldr	r3, [r7, #4]
 8001f3e:	2223      	movs	r2, #35	; 0x23
 8001f40:	66da      	str	r2, [r3, #108]	; 0x6c

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001f42:	4b60      	ldr	r3, [pc, #384]	; (80020c4 <HAL_ETH_Init+0x1a8>)
 8001f44:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8001f48:	4a5e      	ldr	r2, [pc, #376]	; (80020c4 <HAL_ETH_Init+0x1a8>)
 8001f4a:	f043 0302 	orr.w	r3, r3, #2
 8001f4e:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 8001f52:	4b5c      	ldr	r3, [pc, #368]	; (80020c4 <HAL_ETH_Init+0x1a8>)
 8001f54:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8001f58:	f003 0302 	and.w	r3, r3, #2
 8001f5c:	60bb      	str	r3, [r7, #8]
 8001f5e:	68bb      	ldr	r3, [r7, #8]

  if(heth->Init.MediaInterface == HAL_ETH_MII_MODE)
 8001f60:	687b      	ldr	r3, [r7, #4]
 8001f62:	7a1b      	ldrb	r3, [r3, #8]
 8001f64:	2b00      	cmp	r3, #0
 8001f66:	d103      	bne.n	8001f70 <HAL_ETH_Init+0x54>
  {
    HAL_SYSCFG_ETHInterfaceSelect(SYSCFG_ETH_MII);
 8001f68:	2000      	movs	r0, #0
 8001f6a:	f7ff f951 	bl	8001210 <HAL_SYSCFG_ETHInterfaceSelect>
 8001f6e:	e003      	b.n	8001f78 <HAL_ETH_Init+0x5c>
  }
  else
  {
    HAL_SYSCFG_ETHInterfaceSelect(SYSCFG_ETH_RMII);
 8001f70:	f44f 0000 	mov.w	r0, #8388608	; 0x800000
 8001f74:	f7ff f94c 	bl	8001210 <HAL_SYSCFG_ETHInterfaceSelect>
  }

  /* Ethernet Software reset */
  /* Set the SWR bit: resets all MAC subsystem internal registers and logic */
  /* After reset all the registers holds their respective reset values */
  SET_BIT(heth->Instance->DMAMR, ETH_DMAMR_SWR);
 8001f78:	687b      	ldr	r3, [r7, #4]
 8001f7a:	681b      	ldr	r3, [r3, #0]
 8001f7c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001f80:	681a      	ldr	r2, [r3, #0]
 8001f82:	687b      	ldr	r3, [r7, #4]
 8001f84:	681b      	ldr	r3, [r3, #0]
 8001f86:	f042 0201 	orr.w	r2, r2, #1
 8001f8a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001f8e:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8001f90:	f7ff f932 	bl	80011f8 <HAL_GetTick>
 8001f94:	60f8      	str	r0, [r7, #12]

  /* Wait for software reset */
  while (READ_BIT(heth->Instance->DMAMR, ETH_DMAMR_SWR) > 0U)
 8001f96:	e00f      	b.n	8001fb8 <HAL_ETH_Init+0x9c>
  {
    if(((HAL_GetTick() - tickstart ) > ETH_SWRESET_TIMEOUT))
 8001f98:	f7ff f92e 	bl	80011f8 <HAL_GetTick>
 8001f9c:	4602      	mov	r2, r0
 8001f9e:	68fb      	ldr	r3, [r7, #12]
 8001fa0:	1ad3      	subs	r3, r2, r3
 8001fa2:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 8001fa6:	d907      	bls.n	8001fb8 <HAL_ETH_Init+0x9c>
    {
      /* Set Error Code */
      heth->ErrorCode = HAL_ETH_ERROR_TIMEOUT;
 8001fa8:	687b      	ldr	r3, [r7, #4]
 8001faa:	2204      	movs	r2, #4
 8001fac:	675a      	str	r2, [r3, #116]	; 0x74
      /* Set State as Error */
      heth->gState = HAL_ETH_STATE_ERROR;
 8001fae:	687b      	ldr	r3, [r7, #4]
 8001fb0:	22e0      	movs	r2, #224	; 0xe0
 8001fb2:	66da      	str	r2, [r3, #108]	; 0x6c
      /* Return Error */
      return HAL_ERROR;
 8001fb4:	2301      	movs	r3, #1
 8001fb6:	e081      	b.n	80020bc <HAL_ETH_Init+0x1a0>
  while (READ_BIT(heth->Instance->DMAMR, ETH_DMAMR_SWR) > 0U)
 8001fb8:	687b      	ldr	r3, [r7, #4]
 8001fba:	681b      	ldr	r3, [r3, #0]
 8001fbc:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001fc0:	681b      	ldr	r3, [r3, #0]
 8001fc2:	f003 0301 	and.w	r3, r3, #1
 8001fc6:	2b00      	cmp	r3, #0
 8001fc8:	d1e6      	bne.n	8001f98 <HAL_ETH_Init+0x7c>
    }
  }

  /*------------------ MDIO CSR Clock Range Configuration --------------------*/
  ETH_MAC_MDIO_ClkConfig(heth);
 8001fca:	6878      	ldr	r0, [r7, #4]
 8001fcc:	f000 fac0 	bl	8002550 <ETH_MAC_MDIO_ClkConfig>

  /*------------------ MAC LPI 1US Tic Counter Configuration --------------------*/
  WRITE_REG(heth->Instance->MAC1USTCR, (((uint32_t)HAL_RCC_GetHCLKFreq() / ETH_MAC_US_TICK) - 1U));
 8001fd0:	f001 fc74 	bl	80038bc <HAL_RCC_GetHCLKFreq>
 8001fd4:	4603      	mov	r3, r0
 8001fd6:	4a3c      	ldr	r2, [pc, #240]	; (80020c8 <HAL_ETH_Init+0x1ac>)
 8001fd8:	fba2 2303 	umull	r2, r3, r2, r3
 8001fdc:	0c9a      	lsrs	r2, r3, #18
 8001fde:	687b      	ldr	r3, [r7, #4]
 8001fe0:	681b      	ldr	r3, [r3, #0]
 8001fe2:	3a01      	subs	r2, #1
 8001fe4:	f8c3 20dc 	str.w	r2, [r3, #220]	; 0xdc

  /*------------------ MAC, MTL and DMA default Configuration ----------------*/
  ETH_MACDMAConfig(heth);
 8001fe8:	6878      	ldr	r0, [r7, #4]
 8001fea:	f000 fa13 	bl	8002414 <ETH_MACDMAConfig>

  /* SET DSL to 64 bit */
  MODIFY_REG(heth->Instance->DMACCR, ETH_DMACCR_DSL, ETH_DMACCR_DSL_64BIT);
 8001fee:	687b      	ldr	r3, [r7, #4]
 8001ff0:	681b      	ldr	r3, [r3, #0]
 8001ff2:	f503 5388 	add.w	r3, r3, #4352	; 0x1100
 8001ff6:	681b      	ldr	r3, [r3, #0]
 8001ff8:	f423 12e0 	bic.w	r2, r3, #1835008	; 0x1c0000
 8001ffc:	687b      	ldr	r3, [r7, #4]
 8001ffe:	681b      	ldr	r3, [r3, #0]
 8002000:	f442 2200 	orr.w	r2, r2, #524288	; 0x80000
 8002004:	f503 5388 	add.w	r3, r3, #4352	; 0x1100
 8002008:	601a      	str	r2, [r3, #0]

  /* Set Receive Buffers Length (must be a multiple of 4) */
  if ((heth->Init.RxBuffLen % 0x4U) != 0x0U)
 800200a:	687b      	ldr	r3, [r7, #4]
 800200c:	695b      	ldr	r3, [r3, #20]
 800200e:	f003 0303 	and.w	r3, r3, #3
 8002012:	2b00      	cmp	r3, #0
 8002014:	d007      	beq.n	8002026 <HAL_ETH_Init+0x10a>
  {
    /* Set Error Code */
    heth->ErrorCode = HAL_ETH_ERROR_PARAM;
 8002016:	687b      	ldr	r3, [r7, #4]
 8002018:	2201      	movs	r2, #1
 800201a:	675a      	str	r2, [r3, #116]	; 0x74
    /* Set State as Error */
    heth->gState = HAL_ETH_STATE_ERROR;
 800201c:	687b      	ldr	r3, [r7, #4]
 800201e:	22e0      	movs	r2, #224	; 0xe0
 8002020:	66da      	str	r2, [r3, #108]	; 0x6c
    /* Return Error */
    return HAL_ERROR;
 8002022:	2301      	movs	r3, #1
 8002024:	e04a      	b.n	80020bc <HAL_ETH_Init+0x1a0>
  }
  else
  {
    MODIFY_REG(heth->Instance->DMACRCR, ETH_DMACRCR_RBSZ, ((heth->Init.RxBuffLen) << 1));
 8002026:	687b      	ldr	r3, [r7, #4]
 8002028:	681a      	ldr	r2, [r3, #0]
 800202a:	f241 1308 	movw	r3, #4360	; 0x1108
 800202e:	4413      	add	r3, r2
 8002030:	681a      	ldr	r2, [r3, #0]
 8002032:	4b26      	ldr	r3, [pc, #152]	; (80020cc <HAL_ETH_Init+0x1b0>)
 8002034:	4013      	ands	r3, r2
 8002036:	687a      	ldr	r2, [r7, #4]
 8002038:	6952      	ldr	r2, [r2, #20]
 800203a:	0052      	lsls	r2, r2, #1
 800203c:	6879      	ldr	r1, [r7, #4]
 800203e:	6809      	ldr	r1, [r1, #0]
 8002040:	431a      	orrs	r2, r3
 8002042:	f241 1308 	movw	r3, #4360	; 0x1108
 8002046:	440b      	add	r3, r1
 8002048:	601a      	str	r2, [r3, #0]
  }

  /*------------------ DMA Tx Descriptors Configuration ----------------------*/
  ETH_DMATxDescListInit(heth);
 800204a:	6878      	ldr	r0, [r7, #4]
 800204c:	f000 fad8 	bl	8002600 <ETH_DMATxDescListInit>

  /*------------------ DMA Rx Descriptors Configuration ----------------------*/
  ETH_DMARxDescListInit(heth);
 8002050:	6878      	ldr	r0, [r7, #4]
 8002052:	f000 fb1c 	bl	800268e <ETH_DMARxDescListInit>

  /*--------------------- ETHERNET MAC Address Configuration ------------------*/
  /* Set MAC addr bits 32 to 47 */
  heth->Instance->MACA0HR = (((uint32_t)(heth->Init.MACAddr[5]) << 8) | (uint32_t)heth->Init.MACAddr[4]);
 8002056:	687b      	ldr	r3, [r7, #4]
 8002058:	685b      	ldr	r3, [r3, #4]
 800205a:	3305      	adds	r3, #5
 800205c:	781b      	ldrb	r3, [r3, #0]
 800205e:	021a      	lsls	r2, r3, #8
 8002060:	687b      	ldr	r3, [r7, #4]
 8002062:	685b      	ldr	r3, [r3, #4]
 8002064:	3304      	adds	r3, #4
 8002066:	781b      	ldrb	r3, [r3, #0]
 8002068:	4619      	mov	r1, r3
 800206a:	687b      	ldr	r3, [r7, #4]
 800206c:	681b      	ldr	r3, [r3, #0]
 800206e:	430a      	orrs	r2, r1
 8002070:	f8c3 2300 	str.w	r2, [r3, #768]	; 0x300
  /* Set MAC addr bits 0 to 31 */
  heth->Instance->MACA0LR = (((uint32_t)(heth->Init.MACAddr[3]) << 24) | ((uint32_t)(heth->Init.MACAddr[2]) << 16) |
 8002074:	687b      	ldr	r3, [r7, #4]
 8002076:	685b      	ldr	r3, [r3, #4]
 8002078:	3303      	adds	r3, #3
 800207a:	781b      	ldrb	r3, [r3, #0]
 800207c:	061a      	lsls	r2, r3, #24
 800207e:	687b      	ldr	r3, [r7, #4]
 8002080:	685b      	ldr	r3, [r3, #4]
 8002082:	3302      	adds	r3, #2
 8002084:	781b      	ldrb	r3, [r3, #0]
 8002086:	041b      	lsls	r3, r3, #16
 8002088:	431a      	orrs	r2, r3
                             ((uint32_t)(heth->Init.MACAddr[1]) << 8) | (uint32_t)heth->Init.MACAddr[0]);
 800208a:	687b      	ldr	r3, [r7, #4]
 800208c:	685b      	ldr	r3, [r3, #4]
 800208e:	3301      	adds	r3, #1
 8002090:	781b      	ldrb	r3, [r3, #0]
 8002092:	021b      	lsls	r3, r3, #8
  heth->Instance->MACA0LR = (((uint32_t)(heth->Init.MACAddr[3]) << 24) | ((uint32_t)(heth->Init.MACAddr[2]) << 16) |
 8002094:	431a      	orrs	r2, r3
                             ((uint32_t)(heth->Init.MACAddr[1]) << 8) | (uint32_t)heth->Init.MACAddr[0]);
 8002096:	687b      	ldr	r3, [r7, #4]
 8002098:	685b      	ldr	r3, [r3, #4]
 800209a:	781b      	ldrb	r3, [r3, #0]
 800209c:	4619      	mov	r1, r3
  heth->Instance->MACA0LR = (((uint32_t)(heth->Init.MACAddr[3]) << 24) | ((uint32_t)(heth->Init.MACAddr[2]) << 16) |
 800209e:	687b      	ldr	r3, [r7, #4]
 80020a0:	681b      	ldr	r3, [r3, #0]
                             ((uint32_t)(heth->Init.MACAddr[1]) << 8) | (uint32_t)heth->Init.MACAddr[0]);
 80020a2:	430a      	orrs	r2, r1
  heth->Instance->MACA0LR = (((uint32_t)(heth->Init.MACAddr[3]) << 24) | ((uint32_t)(heth->Init.MACAddr[2]) << 16) |
 80020a4:	f8c3 2304 	str.w	r2, [r3, #772]	; 0x304

  heth->ErrorCode = HAL_ETH_ERROR_NONE;
 80020a8:	687b      	ldr	r3, [r7, #4]
 80020aa:	2200      	movs	r2, #0
 80020ac:	675a      	str	r2, [r3, #116]	; 0x74
  heth->gState = HAL_ETH_STATE_READY;
 80020ae:	687b      	ldr	r3, [r7, #4]
 80020b0:	2210      	movs	r2, #16
 80020b2:	66da      	str	r2, [r3, #108]	; 0x6c
  heth->RxState = HAL_ETH_STATE_READY;
 80020b4:	687b      	ldr	r3, [r7, #4]
 80020b6:	2210      	movs	r2, #16
 80020b8:	671a      	str	r2, [r3, #112]	; 0x70

  return HAL_OK;
 80020ba:	2300      	movs	r3, #0
}
 80020bc:	4618      	mov	r0, r3
 80020be:	3710      	adds	r7, #16
 80020c0:	46bd      	mov	sp, r7
 80020c2:	bd80      	pop	{r7, pc}
 80020c4:	58024400 	.word	0x58024400
 80020c8:	431bde83 	.word	0x431bde83
 80020cc:	ffff8001 	.word	0xffff8001

080020d0 <ETH_SetMACConfig>:
/** @addtogroup ETH_Private_Functions   ETH Private Functions
  * @{
  */

static void ETH_SetMACConfig(ETH_HandleTypeDef *heth,  ETH_MACConfigTypeDef *macconf)
{
 80020d0:	b480      	push	{r7}
 80020d2:	b085      	sub	sp, #20
 80020d4:	af00      	add	r7, sp, #0
 80020d6:	6078      	str	r0, [r7, #4]
 80020d8:	6039      	str	r1, [r7, #0]
  uint32_t macregval;

  /*------------------------ MACCR Configuration --------------------*/
  macregval =(macconf->InterPacketGapVal |
 80020da:	683b      	ldr	r3, [r7, #0]
 80020dc:	689a      	ldr	r2, [r3, #8]
              macconf->SourceAddrControl |
 80020de:	683b      	ldr	r3, [r7, #0]
 80020e0:	681b      	ldr	r3, [r3, #0]
  macregval =(macconf->InterPacketGapVal |
 80020e2:	431a      	orrs	r2, r3
                ((uint32_t)macconf->ChecksumOffload<< 27) |
 80020e4:	683b      	ldr	r3, [r7, #0]
 80020e6:	791b      	ldrb	r3, [r3, #4]
 80020e8:	06db      	lsls	r3, r3, #27
              macconf->SourceAddrControl |
 80020ea:	431a      	orrs	r2, r3
                  ((uint32_t)macconf->GiantPacketSizeLimitControl << 23) |
 80020ec:	683b      	ldr	r3, [r7, #0]
 80020ee:	7b1b      	ldrb	r3, [r3, #12]
 80020f0:	05db      	lsls	r3, r3, #23
                ((uint32_t)macconf->ChecksumOffload<< 27) |
 80020f2:	431a      	orrs	r2, r3
                    ((uint32_t)macconf->Support2KPacket  << 22) |
 80020f4:	683b      	ldr	r3, [r7, #0]
 80020f6:	7b5b      	ldrb	r3, [r3, #13]
 80020f8:	059b      	lsls	r3, r3, #22
                  ((uint32_t)macconf->GiantPacketSizeLimitControl << 23) |
 80020fa:	431a      	orrs	r2, r3
                      ((uint32_t)macconf->CRCStripTypePacket << 21) |
 80020fc:	683b      	ldr	r3, [r7, #0]
 80020fe:	7b9b      	ldrb	r3, [r3, #14]
 8002100:	055b      	lsls	r3, r3, #21
                    ((uint32_t)macconf->Support2KPacket  << 22) |
 8002102:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->AutomaticPadCRCStrip << 20) |
 8002104:	683b      	ldr	r3, [r7, #0]
 8002106:	7bdb      	ldrb	r3, [r3, #15]
 8002108:	051b      	lsls	r3, r3, #20
                      ((uint32_t)macconf->CRCStripTypePacket << 21) |
 800210a:	4313      	orrs	r3, r2
                          ((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 19) |
 800210c:	683a      	ldr	r2, [r7, #0]
 800210e:	7c12      	ldrb	r2, [r2, #16]
 8002110:	2a00      	cmp	r2, #0
 8002112:	d102      	bne.n	800211a <ETH_SetMACConfig+0x4a>
 8002114:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 8002118:	e000      	b.n	800211c <ETH_SetMACConfig+0x4c>
 800211a:	2200      	movs	r2, #0
                        ((uint32_t)macconf->AutomaticPadCRCStrip << 20) |
 800211c:	4313      	orrs	r3, r2
                            ((uint32_t)((macconf->Jabber == DISABLE) ? 1U : 0U) << 17) |
 800211e:	683a      	ldr	r2, [r7, #0]
 8002120:	7c52      	ldrb	r2, [r2, #17]
 8002122:	2a00      	cmp	r2, #0
 8002124:	d102      	bne.n	800212c <ETH_SetMACConfig+0x5c>
 8002126:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 800212a:	e000      	b.n	800212e <ETH_SetMACConfig+0x5e>
 800212c:	2200      	movs	r2, #0
                          ((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 19) |
 800212e:	431a      	orrs	r2, r3
                              ((uint32_t)macconf->JumboPacket << 16) |
 8002130:	683b      	ldr	r3, [r7, #0]
 8002132:	7c9b      	ldrb	r3, [r3, #18]
 8002134:	041b      	lsls	r3, r3, #16
                            ((uint32_t)((macconf->Jabber == DISABLE) ? 1U : 0U) << 17) |
 8002136:	431a      	orrs	r2, r3
                                macconf->Speed |
 8002138:	683b      	ldr	r3, [r7, #0]
 800213a:	695b      	ldr	r3, [r3, #20]
                              ((uint32_t)macconf->JumboPacket << 16) |
 800213c:	431a      	orrs	r2, r3
                                  macconf->DuplexMode |
 800213e:	683b      	ldr	r3, [r7, #0]
 8002140:	699b      	ldr	r3, [r3, #24]
                                macconf->Speed |
 8002142:	431a      	orrs	r2, r3
                                    ((uint32_t)macconf->LoopbackMode << 12) |
 8002144:	683b      	ldr	r3, [r7, #0]
 8002146:	7f1b      	ldrb	r3, [r3, #28]
 8002148:	031b      	lsls	r3, r3, #12
                                  macconf->DuplexMode |
 800214a:	431a      	orrs	r2, r3
                                      ((uint32_t)macconf->CarrierSenseBeforeTransmit << 11)|
 800214c:	683b      	ldr	r3, [r7, #0]
 800214e:	7f5b      	ldrb	r3, [r3, #29]
 8002150:	02db      	lsls	r3, r3, #11
                                    ((uint32_t)macconf->LoopbackMode << 12) |
 8002152:	4313      	orrs	r3, r2
                                        ((uint32_t)((macconf->ReceiveOwn == DISABLE) ? 1U : 0U) << 10)|
 8002154:	683a      	ldr	r2, [r7, #0]
 8002156:	7f92      	ldrb	r2, [r2, #30]
 8002158:	2a00      	cmp	r2, #0
 800215a:	d102      	bne.n	8002162 <ETH_SetMACConfig+0x92>
 800215c:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8002160:	e000      	b.n	8002164 <ETH_SetMACConfig+0x94>
 8002162:	2200      	movs	r2, #0
                                      ((uint32_t)macconf->CarrierSenseBeforeTransmit << 11)|
 8002164:	431a      	orrs	r2, r3
                                          ((uint32_t)macconf->CarrierSenseDuringTransmit << 9)|
 8002166:	683b      	ldr	r3, [r7, #0]
 8002168:	7fdb      	ldrb	r3, [r3, #31]
 800216a:	025b      	lsls	r3, r3, #9
                                        ((uint32_t)((macconf->ReceiveOwn == DISABLE) ? 1U : 0U) << 10)|
 800216c:	4313      	orrs	r3, r2
                                            ((uint32_t)((macconf->RetryTransmission == DISABLE) ? 1U : 0U) << 8)|
 800216e:	683a      	ldr	r2, [r7, #0]
 8002170:	f892 2020 	ldrb.w	r2, [r2, #32]
 8002174:	2a00      	cmp	r2, #0
 8002176:	d102      	bne.n	800217e <ETH_SetMACConfig+0xae>
 8002178:	f44f 7280 	mov.w	r2, #256	; 0x100
 800217c:	e000      	b.n	8002180 <ETH_SetMACConfig+0xb0>
 800217e:	2200      	movs	r2, #0
                                          ((uint32_t)macconf->CarrierSenseDuringTransmit << 9)|
 8002180:	431a      	orrs	r2, r3
                                              macconf->BackOffLimit |
 8002182:	683b      	ldr	r3, [r7, #0]
 8002184:	6a5b      	ldr	r3, [r3, #36]	; 0x24
                                            ((uint32_t)((macconf->RetryTransmission == DISABLE) ? 1U : 0U) << 8)|
 8002186:	431a      	orrs	r2, r3
                                                ((uint32_t)macconf->DeferralCheck << 4)|
 8002188:	683b      	ldr	r3, [r7, #0]
 800218a:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800218e:	011b      	lsls	r3, r3, #4
                                              macconf->BackOffLimit |
 8002190:	431a      	orrs	r2, r3
                                                  macconf->PreambleLength);
 8002192:	683b      	ldr	r3, [r7, #0]
 8002194:	6adb      	ldr	r3, [r3, #44]	; 0x2c
  macregval =(macconf->InterPacketGapVal |
 8002196:	4313      	orrs	r3, r2
 8002198:	60fb      	str	r3, [r7, #12]

  /* Write to MACCR */
  MODIFY_REG(heth->Instance->MACCR, ETH_MACCR_MASK, macregval);
 800219a:	687b      	ldr	r3, [r7, #4]
 800219c:	681b      	ldr	r3, [r3, #0]
 800219e:	681a      	ldr	r2, [r3, #0]
 80021a0:	4b56      	ldr	r3, [pc, #344]	; (80022fc <ETH_SetMACConfig+0x22c>)
 80021a2:	4013      	ands	r3, r2
 80021a4:	687a      	ldr	r2, [r7, #4]
 80021a6:	6812      	ldr	r2, [r2, #0]
 80021a8:	68f9      	ldr	r1, [r7, #12]
 80021aa:	430b      	orrs	r3, r1
 80021ac:	6013      	str	r3, [r2, #0]

  /*------------------------ MACECR Configuration --------------------*/
  macregval = ((macconf->ExtendedInterPacketGapVal << 25)|
 80021ae:	683b      	ldr	r3, [r7, #0]
 80021b0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80021b2:	065a      	lsls	r2, r3, #25
               ((uint32_t)macconf->ExtendedInterPacketGap << 24)|
 80021b4:	683b      	ldr	r3, [r7, #0]
 80021b6:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 80021ba:	061b      	lsls	r3, r3, #24
  macregval = ((macconf->ExtendedInterPacketGapVal << 25)|
 80021bc:	431a      	orrs	r2, r3
                 ((uint32_t)macconf->UnicastSlowProtocolPacketDetect << 18)|
 80021be:	683b      	ldr	r3, [r7, #0]
 80021c0:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 80021c4:	049b      	lsls	r3, r3, #18
               ((uint32_t)macconf->ExtendedInterPacketGap << 24)|
 80021c6:	431a      	orrs	r2, r3
                   ((uint32_t)macconf->SlowProtocolDetect << 17)|
 80021c8:	683b      	ldr	r3, [r7, #0]
 80021ca:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 80021ce:	045b      	lsls	r3, r3, #17
                 ((uint32_t)macconf->UnicastSlowProtocolPacketDetect << 18)|
 80021d0:	4313      	orrs	r3, r2
                     ((uint32_t)((macconf->CRCCheckingRxPackets == DISABLE) ? 1U : 0U)<< 16) |
 80021d2:	683a      	ldr	r2, [r7, #0]
 80021d4:	f892 2032 	ldrb.w	r2, [r2, #50]	; 0x32
 80021d8:	2a00      	cmp	r2, #0
 80021da:	d102      	bne.n	80021e2 <ETH_SetMACConfig+0x112>
 80021dc:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 80021e0:	e000      	b.n	80021e4 <ETH_SetMACConfig+0x114>
 80021e2:	2200      	movs	r2, #0
                   ((uint32_t)macconf->SlowProtocolDetect << 17)|
 80021e4:	431a      	orrs	r2, r3
                       macconf->GiantPacketSizeLimit);
 80021e6:	683b      	ldr	r3, [r7, #0]
 80021e8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
  macregval = ((macconf->ExtendedInterPacketGapVal << 25)|
 80021ea:	4313      	orrs	r3, r2
 80021ec:	60fb      	str	r3, [r7, #12]

  /* Write to MACECR */
  MODIFY_REG(heth->Instance->MACECR, ETH_MACECR_MASK, macregval);
 80021ee:	687b      	ldr	r3, [r7, #4]
 80021f0:	681b      	ldr	r3, [r3, #0]
 80021f2:	685a      	ldr	r2, [r3, #4]
 80021f4:	4b42      	ldr	r3, [pc, #264]	; (8002300 <ETH_SetMACConfig+0x230>)
 80021f6:	4013      	ands	r3, r2
 80021f8:	687a      	ldr	r2, [r7, #4]
 80021fa:	6812      	ldr	r2, [r2, #0]
 80021fc:	68f9      	ldr	r1, [r7, #12]
 80021fe:	430b      	orrs	r3, r1
 8002200:	6053      	str	r3, [r2, #4]

  /*------------------------ MACWTR Configuration --------------------*/
  macregval = (((uint32_t)macconf->ProgrammableWatchdog << 8) |
 8002202:	683b      	ldr	r3, [r7, #0]
 8002204:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8002208:	021a      	lsls	r2, r3, #8
               macconf->WatchdogTimeout);
 800220a:	683b      	ldr	r3, [r7, #0]
 800220c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
  macregval = (((uint32_t)macconf->ProgrammableWatchdog << 8) |
 800220e:	4313      	orrs	r3, r2
 8002210:	60fb      	str	r3, [r7, #12]

  /* Write to MACWTR */
  MODIFY_REG(heth->Instance->MACWTR, ETH_MACWTR_MASK, macregval);
 8002212:	687b      	ldr	r3, [r7, #4]
 8002214:	681b      	ldr	r3, [r3, #0]
 8002216:	68da      	ldr	r2, [r3, #12]
 8002218:	4b3a      	ldr	r3, [pc, #232]	; (8002304 <ETH_SetMACConfig+0x234>)
 800221a:	4013      	ands	r3, r2
 800221c:	687a      	ldr	r2, [r7, #4]
 800221e:	6812      	ldr	r2, [r2, #0]
 8002220:	68f9      	ldr	r1, [r7, #12]
 8002222:	430b      	orrs	r3, r1
 8002224:	60d3      	str	r3, [r2, #12]

  /*------------------------ MACTFCR Configuration --------------------*/
  macregval = (((uint32_t)macconf->TransmitFlowControl << 1) |
 8002226:	683b      	ldr	r3, [r7, #0]
 8002228:	f893 3054 	ldrb.w	r3, [r3, #84]	; 0x54
 800222c:	005a      	lsls	r2, r3, #1
               macconf->PauseLowThreshold |
 800222e:	683b      	ldr	r3, [r7, #0]
 8002230:	6d1b      	ldr	r3, [r3, #80]	; 0x50
  macregval = (((uint32_t)macconf->TransmitFlowControl << 1) |
 8002232:	4313      	orrs	r3, r2
                 ((uint32_t)((macconf->ZeroQuantaPause == DISABLE) ? 1U : 0U)<< 7) |
 8002234:	683a      	ldr	r2, [r7, #0]
 8002236:	f892 204c 	ldrb.w	r2, [r2, #76]	; 0x4c
 800223a:	2a00      	cmp	r2, #0
 800223c:	d101      	bne.n	8002242 <ETH_SetMACConfig+0x172>
 800223e:	2280      	movs	r2, #128	; 0x80
 8002240:	e000      	b.n	8002244 <ETH_SetMACConfig+0x174>
 8002242:	2200      	movs	r2, #0
               macconf->PauseLowThreshold |
 8002244:	431a      	orrs	r2, r3
                   (macconf->PauseTime << 16));
 8002246:	683b      	ldr	r3, [r7, #0]
 8002248:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800224a:	041b      	lsls	r3, r3, #16
  macregval = (((uint32_t)macconf->TransmitFlowControl << 1) |
 800224c:	4313      	orrs	r3, r2
 800224e:	60fb      	str	r3, [r7, #12]

  /* Write to MACTFCR */
  MODIFY_REG(heth->Instance->MACTFCR, ETH_MACTFCR_MASK, macregval);
 8002250:	687b      	ldr	r3, [r7, #4]
 8002252:	681b      	ldr	r3, [r3, #0]
 8002254:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8002256:	f64f 730d 	movw	r3, #65293	; 0xff0d
 800225a:	4013      	ands	r3, r2
 800225c:	687a      	ldr	r2, [r7, #4]
 800225e:	6812      	ldr	r2, [r2, #0]
 8002260:	68f9      	ldr	r1, [r7, #12]
 8002262:	430b      	orrs	r3, r1
 8002264:	6713      	str	r3, [r2, #112]	; 0x70

  /*------------------------ MACRFCR Configuration --------------------*/
  macregval = ((uint32_t)macconf->ReceiveFlowControl |
 8002266:	683b      	ldr	r3, [r7, #0]
 8002268:	f893 3056 	ldrb.w	r3, [r3, #86]	; 0x56
 800226c:	461a      	mov	r2, r3
               ((uint32_t)macconf->UnicastPausePacketDetect << 1));
 800226e:	683b      	ldr	r3, [r7, #0]
 8002270:	f893 3055 	ldrb.w	r3, [r3, #85]	; 0x55
 8002274:	005b      	lsls	r3, r3, #1
  macregval = ((uint32_t)macconf->ReceiveFlowControl |
 8002276:	4313      	orrs	r3, r2
 8002278:	60fb      	str	r3, [r7, #12]

  /* Write to MACRFCR */
  MODIFY_REG(heth->Instance->MACRFCR, ETH_MACRFCR_MASK, macregval);
 800227a:	687b      	ldr	r3, [r7, #4]
 800227c:	681b      	ldr	r3, [r3, #0]
 800227e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002282:	f023 0103 	bic.w	r1, r3, #3
 8002286:	687b      	ldr	r3, [r7, #4]
 8002288:	681b      	ldr	r3, [r3, #0]
 800228a:	68fa      	ldr	r2, [r7, #12]
 800228c:	430a      	orrs	r2, r1
 800228e:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

  /*------------------------ MTLTQOMR Configuration --------------------*/
  /* Write to MTLTQOMR */
  MODIFY_REG(heth->Instance->MTLTQOMR, ETH_MTLTQOMR_MASK, macconf->TransmitQueueMode);
 8002292:	687b      	ldr	r3, [r7, #4]
 8002294:	681b      	ldr	r3, [r3, #0]
 8002296:	f8d3 3d00 	ldr.w	r3, [r3, #3328]	; 0xd00
 800229a:	f023 0172 	bic.w	r1, r3, #114	; 0x72
 800229e:	683b      	ldr	r3, [r7, #0]
 80022a0:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 80022a2:	687b      	ldr	r3, [r7, #4]
 80022a4:	681b      	ldr	r3, [r3, #0]
 80022a6:	430a      	orrs	r2, r1
 80022a8:	f8c3 2d00 	str.w	r2, [r3, #3328]	; 0xd00

  /*------------------------ MTLRQOMR Configuration --------------------*/
  macregval = (macconf->ReceiveQueueMode |
 80022ac:	683b      	ldr	r3, [r7, #0]
 80022ae:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
               ((uint32_t)((macconf->DropTCPIPChecksumErrorPacket == DISABLE) ? 1U : 0U) << 6) |
 80022b0:	683a      	ldr	r2, [r7, #0]
 80022b2:	f892 2060 	ldrb.w	r2, [r2, #96]	; 0x60
 80022b6:	2a00      	cmp	r2, #0
 80022b8:	d101      	bne.n	80022be <ETH_SetMACConfig+0x1ee>
 80022ba:	2240      	movs	r2, #64	; 0x40
 80022bc:	e000      	b.n	80022c0 <ETH_SetMACConfig+0x1f0>
 80022be:	2200      	movs	r2, #0
  macregval = (macconf->ReceiveQueueMode |
 80022c0:	431a      	orrs	r2, r3
                 ((uint32_t)macconf->ForwardRxErrorPacket << 4) |
 80022c2:	683b      	ldr	r3, [r7, #0]
 80022c4:	f893 3061 	ldrb.w	r3, [r3, #97]	; 0x61
 80022c8:	011b      	lsls	r3, r3, #4
               ((uint32_t)((macconf->DropTCPIPChecksumErrorPacket == DISABLE) ? 1U : 0U) << 6) |
 80022ca:	431a      	orrs	r2, r3
                   ((uint32_t)macconf->ForwardRxUndersizedGoodPacket << 3));
 80022cc:	683b      	ldr	r3, [r7, #0]
 80022ce:	f893 3062 	ldrb.w	r3, [r3, #98]	; 0x62
 80022d2:	00db      	lsls	r3, r3, #3
  macregval = (macconf->ReceiveQueueMode |
 80022d4:	4313      	orrs	r3, r2
 80022d6:	60fb      	str	r3, [r7, #12]

  /* Write to MTLRQOMR */
  MODIFY_REG(heth->Instance->MTLRQOMR, ETH_MTLRQOMR_MASK, macregval);
 80022d8:	687b      	ldr	r3, [r7, #4]
 80022da:	681b      	ldr	r3, [r3, #0]
 80022dc:	f8d3 3d30 	ldr.w	r3, [r3, #3376]	; 0xd30
 80022e0:	f023 017b 	bic.w	r1, r3, #123	; 0x7b
 80022e4:	687b      	ldr	r3, [r7, #4]
 80022e6:	681b      	ldr	r3, [r3, #0]
 80022e8:	68fa      	ldr	r2, [r7, #12]
 80022ea:	430a      	orrs	r2, r1
 80022ec:	f8c3 2d30 	str.w	r2, [r3, #3376]	; 0xd30
}
 80022f0:	bf00      	nop
 80022f2:	3714      	adds	r7, #20
 80022f4:	46bd      	mov	sp, r7
 80022f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022fa:	4770      	bx	lr
 80022fc:	00048083 	.word	0x00048083
 8002300:	c0f88000 	.word	0xc0f88000
 8002304:	fffffef0 	.word	0xfffffef0

08002308 <ETH_SetDMAConfig>:

static void ETH_SetDMAConfig(ETH_HandleTypeDef *heth,  ETH_DMAConfigTypeDef *dmaconf)
{
 8002308:	b480      	push	{r7}
 800230a:	b085      	sub	sp, #20
 800230c:	af00      	add	r7, sp, #0
 800230e:	6078      	str	r0, [r7, #4]
 8002310:	6039      	str	r1, [r7, #0]
  uint32_t dmaregval;

  /*------------------------ DMAMR Configuration --------------------*/
  MODIFY_REG(heth->Instance->DMAMR, ETH_DMAMR_MASK, dmaconf->DMAArbitration);
 8002312:	687b      	ldr	r3, [r7, #4]
 8002314:	681b      	ldr	r3, [r3, #0]
 8002316:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800231a:	681a      	ldr	r2, [r3, #0]
 800231c:	4b38      	ldr	r3, [pc, #224]	; (8002400 <ETH_SetDMAConfig+0xf8>)
 800231e:	4013      	ands	r3, r2
 8002320:	683a      	ldr	r2, [r7, #0]
 8002322:	6812      	ldr	r2, [r2, #0]
 8002324:	6879      	ldr	r1, [r7, #4]
 8002326:	6809      	ldr	r1, [r1, #0]
 8002328:	431a      	orrs	r2, r3
 800232a:	f501 5380 	add.w	r3, r1, #4096	; 0x1000
 800232e:	601a      	str	r2, [r3, #0]

  /*------------------------ DMASBMR Configuration --------------------*/
  dmaregval = (((uint32_t)dmaconf->AddressAlignedBeats << 12) |
 8002330:	683b      	ldr	r3, [r7, #0]
 8002332:	791b      	ldrb	r3, [r3, #4]
 8002334:	031a      	lsls	r2, r3, #12
               dmaconf->BurstMode |
 8002336:	683b      	ldr	r3, [r7, #0]
 8002338:	689b      	ldr	r3, [r3, #8]
  dmaregval = (((uint32_t)dmaconf->AddressAlignedBeats << 12) |
 800233a:	431a      	orrs	r2, r3
                 ((uint32_t)dmaconf->RebuildINCRxBurst << 15));
 800233c:	683b      	ldr	r3, [r7, #0]
 800233e:	7b1b      	ldrb	r3, [r3, #12]
 8002340:	03db      	lsls	r3, r3, #15
  dmaregval = (((uint32_t)dmaconf->AddressAlignedBeats << 12) |
 8002342:	4313      	orrs	r3, r2
 8002344:	60fb      	str	r3, [r7, #12]

  MODIFY_REG(heth->Instance->DMASBMR, ETH_DMASBMR_MASK, dmaregval);
 8002346:	687b      	ldr	r3, [r7, #4]
 8002348:	681a      	ldr	r2, [r3, #0]
 800234a:	f241 0304 	movw	r3, #4100	; 0x1004
 800234e:	4413      	add	r3, r2
 8002350:	681a      	ldr	r2, [r3, #0]
 8002352:	4b2c      	ldr	r3, [pc, #176]	; (8002404 <ETH_SetDMAConfig+0xfc>)
 8002354:	4013      	ands	r3, r2
 8002356:	687a      	ldr	r2, [r7, #4]
 8002358:	6811      	ldr	r1, [r2, #0]
 800235a:	68fa      	ldr	r2, [r7, #12]
 800235c:	431a      	orrs	r2, r3
 800235e:	f241 0304 	movw	r3, #4100	; 0x1004
 8002362:	440b      	add	r3, r1
 8002364:	601a      	str	r2, [r3, #0]

  /*------------------------ DMACCR Configuration --------------------*/
  dmaregval = (((uint32_t)dmaconf->PBLx8Mode << 16) |
 8002366:	683b      	ldr	r3, [r7, #0]
 8002368:	7b5b      	ldrb	r3, [r3, #13]
 800236a:	041a      	lsls	r2, r3, #16
               dmaconf->MaximumSegmentSize);
 800236c:	683b      	ldr	r3, [r7, #0]
 800236e:	6a1b      	ldr	r3, [r3, #32]
  dmaregval = (((uint32_t)dmaconf->PBLx8Mode << 16) |
 8002370:	4313      	orrs	r3, r2
 8002372:	60fb      	str	r3, [r7, #12]

  MODIFY_REG(heth->Instance->DMACCR, ETH_DMACCR_MASK, dmaregval);
 8002374:	687b      	ldr	r3, [r7, #4]
 8002376:	681b      	ldr	r3, [r3, #0]
 8002378:	f503 5388 	add.w	r3, r3, #4352	; 0x1100
 800237c:	681a      	ldr	r2, [r3, #0]
 800237e:	4b22      	ldr	r3, [pc, #136]	; (8002408 <ETH_SetDMAConfig+0x100>)
 8002380:	4013      	ands	r3, r2
 8002382:	687a      	ldr	r2, [r7, #4]
 8002384:	6811      	ldr	r1, [r2, #0]
 8002386:	68fa      	ldr	r2, [r7, #12]
 8002388:	431a      	orrs	r2, r3
 800238a:	f501 5388 	add.w	r3, r1, #4352	; 0x1100
 800238e:	601a      	str	r2, [r3, #0]

  /*------------------------ DMACTCR Configuration --------------------*/
  dmaregval = (dmaconf->TxDMABurstLength |
 8002390:	683b      	ldr	r3, [r7, #0]
 8002392:	691a      	ldr	r2, [r3, #16]
               ((uint32_t)dmaconf->SecondPacketOperate << 4)|
 8002394:	683b      	ldr	r3, [r7, #0]
 8002396:	7d1b      	ldrb	r3, [r3, #20]
 8002398:	011b      	lsls	r3, r3, #4
  dmaregval = (dmaconf->TxDMABurstLength |
 800239a:	431a      	orrs	r2, r3
                 ((uint32_t)dmaconf->TCPSegmentation << 12));
 800239c:	683b      	ldr	r3, [r7, #0]
 800239e:	7f5b      	ldrb	r3, [r3, #29]
 80023a0:	031b      	lsls	r3, r3, #12
  dmaregval = (dmaconf->TxDMABurstLength |
 80023a2:	4313      	orrs	r3, r2
 80023a4:	60fb      	str	r3, [r7, #12]

  MODIFY_REG(heth->Instance->DMACTCR, ETH_DMACTCR_MASK, dmaregval);
 80023a6:	687b      	ldr	r3, [r7, #4]
 80023a8:	681a      	ldr	r2, [r3, #0]
 80023aa:	f241 1304 	movw	r3, #4356	; 0x1104
 80023ae:	4413      	add	r3, r2
 80023b0:	681a      	ldr	r2, [r3, #0]
 80023b2:	4b16      	ldr	r3, [pc, #88]	; (800240c <ETH_SetDMAConfig+0x104>)
 80023b4:	4013      	ands	r3, r2
 80023b6:	687a      	ldr	r2, [r7, #4]
 80023b8:	6811      	ldr	r1, [r2, #0]
 80023ba:	68fa      	ldr	r2, [r7, #12]
 80023bc:	431a      	orrs	r2, r3
 80023be:	f241 1304 	movw	r3, #4356	; 0x1104
 80023c2:	440b      	add	r3, r1
 80023c4:	601a      	str	r2, [r3, #0]

  /*------------------------ DMACRCR Configuration --------------------*/
  dmaregval = (((uint32_t)dmaconf->FlushRxPacket  << 31) |
 80023c6:	683b      	ldr	r3, [r7, #0]
 80023c8:	7f1b      	ldrb	r3, [r3, #28]
 80023ca:	07da      	lsls	r2, r3, #31
               dmaconf->RxDMABurstLength);
 80023cc:	683b      	ldr	r3, [r7, #0]
 80023ce:	699b      	ldr	r3, [r3, #24]
  dmaregval = (((uint32_t)dmaconf->FlushRxPacket  << 31) |
 80023d0:	4313      	orrs	r3, r2
 80023d2:	60fb      	str	r3, [r7, #12]

  /* Write to DMACRCR */
  MODIFY_REG(heth->Instance->DMACRCR, ETH_DMACRCR_MASK, dmaregval);
 80023d4:	687b      	ldr	r3, [r7, #4]
 80023d6:	681a      	ldr	r2, [r3, #0]
 80023d8:	f241 1308 	movw	r3, #4360	; 0x1108
 80023dc:	4413      	add	r3, r2
 80023de:	681a      	ldr	r2, [r3, #0]
 80023e0:	4b0b      	ldr	r3, [pc, #44]	; (8002410 <ETH_SetDMAConfig+0x108>)
 80023e2:	4013      	ands	r3, r2
 80023e4:	687a      	ldr	r2, [r7, #4]
 80023e6:	6811      	ldr	r1, [r2, #0]
 80023e8:	68fa      	ldr	r2, [r7, #12]
 80023ea:	431a      	orrs	r2, r3
 80023ec:	f241 1308 	movw	r3, #4360	; 0x1108
 80023f0:	440b      	add	r3, r1
 80023f2:	601a      	str	r2, [r3, #0]
}
 80023f4:	bf00      	nop
 80023f6:	3714      	adds	r7, #20
 80023f8:	46bd      	mov	sp, r7
 80023fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023fe:	4770      	bx	lr
 8002400:	ffff87fd 	.word	0xffff87fd
 8002404:	ffff2ffe 	.word	0xffff2ffe
 8002408:	fffec000 	.word	0xfffec000
 800240c:	ffc0efef 	.word	0xffc0efef
 8002410:	7fc0ffff 	.word	0x7fc0ffff

08002414 <ETH_MACDMAConfig>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
static void ETH_MACDMAConfig(ETH_HandleTypeDef *heth)
{
 8002414:	b580      	push	{r7, lr}
 8002416:	b0a4      	sub	sp, #144	; 0x90
 8002418:	af00      	add	r7, sp, #0
 800241a:	6078      	str	r0, [r7, #4]
  ETH_MACConfigTypeDef macDefaultConf;
  ETH_DMAConfigTypeDef dmaDefaultConf;

  /*--------------- ETHERNET MAC registers default Configuration --------------*/
  macDefaultConf.AutomaticPadCRCStrip = ENABLE;
 800241c:	2301      	movs	r3, #1
 800241e:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
  macDefaultConf.BackOffLimit = ETH_BACKOFFLIMIT_10;
 8002422:	2300      	movs	r3, #0
 8002424:	653b      	str	r3, [r7, #80]	; 0x50
  macDefaultConf.CarrierSenseBeforeTransmit = DISABLE;
 8002426:	2300      	movs	r3, #0
 8002428:	f887 3049 	strb.w	r3, [r7, #73]	; 0x49
  macDefaultConf.CarrierSenseDuringTransmit = DISABLE;
 800242c:	2300      	movs	r3, #0
 800242e:	f887 304b 	strb.w	r3, [r7, #75]	; 0x4b
  macDefaultConf.ChecksumOffload = ENABLE;
 8002432:	2301      	movs	r3, #1
 8002434:	f887 3030 	strb.w	r3, [r7, #48]	; 0x30
  macDefaultConf.CRCCheckingRxPackets = ENABLE;
 8002438:	2301      	movs	r3, #1
 800243a:	f887 305e 	strb.w	r3, [r7, #94]	; 0x5e
  macDefaultConf.CRCStripTypePacket = ENABLE;
 800243e:	2301      	movs	r3, #1
 8002440:	f887 303a 	strb.w	r3, [r7, #58]	; 0x3a
  macDefaultConf.DeferralCheck = DISABLE;
 8002444:	2300      	movs	r3, #0
 8002446:	f887 3054 	strb.w	r3, [r7, #84]	; 0x54
  macDefaultConf.DropTCPIPChecksumErrorPacket = ENABLE;
 800244a:	2301      	movs	r3, #1
 800244c:	f887 308c 	strb.w	r3, [r7, #140]	; 0x8c
  macDefaultConf.DuplexMode = ETH_FULLDUPLEX_MODE;
 8002450:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8002454:	647b      	str	r3, [r7, #68]	; 0x44
  macDefaultConf.ExtendedInterPacketGap = DISABLE;
 8002456:	2300      	movs	r3, #0
 8002458:	f887 3064 	strb.w	r3, [r7, #100]	; 0x64
  macDefaultConf.ExtendedInterPacketGapVal = 0x0;
 800245c:	2300      	movs	r3, #0
 800245e:	66bb      	str	r3, [r7, #104]	; 0x68
  macDefaultConf.ForwardRxErrorPacket = DISABLE;
 8002460:	2300      	movs	r3, #0
 8002462:	f887 308d 	strb.w	r3, [r7, #141]	; 0x8d
  macDefaultConf.ForwardRxUndersizedGoodPacket = DISABLE;
 8002466:	2300      	movs	r3, #0
 8002468:	f887 308e 	strb.w	r3, [r7, #142]	; 0x8e
  macDefaultConf.GiantPacketSizeLimit = 0x618;
 800246c:	f44f 63c3 	mov.w	r3, #1560	; 0x618
 8002470:	663b      	str	r3, [r7, #96]	; 0x60
  macDefaultConf.GiantPacketSizeLimitControl = DISABLE;
 8002472:	2300      	movs	r3, #0
 8002474:	f887 3038 	strb.w	r3, [r7, #56]	; 0x38
  macDefaultConf.InterPacketGapVal = ETH_INTERPACKETGAP_96BIT;
 8002478:	2300      	movs	r3, #0
 800247a:	637b      	str	r3, [r7, #52]	; 0x34
  macDefaultConf.Jabber = ENABLE;
 800247c:	2301      	movs	r3, #1
 800247e:	f887 303d 	strb.w	r3, [r7, #61]	; 0x3d
  macDefaultConf.JumboPacket = DISABLE;
 8002482:	2300      	movs	r3, #0
 8002484:	f887 303e 	strb.w	r3, [r7, #62]	; 0x3e
  macDefaultConf.LoopbackMode = DISABLE;
 8002488:	2300      	movs	r3, #0
 800248a:	f887 3048 	strb.w	r3, [r7, #72]	; 0x48
  macDefaultConf.PauseLowThreshold = ETH_PAUSELOWTHRESHOLD_MINUS_4;
 800248e:	2300      	movs	r3, #0
 8002490:	67fb      	str	r3, [r7, #124]	; 0x7c
  macDefaultConf.PauseTime = 0x0;
 8002492:	2300      	movs	r3, #0
 8002494:	677b      	str	r3, [r7, #116]	; 0x74
  macDefaultConf.PreambleLength = ETH_PREAMBLELENGTH_7;
 8002496:	2300      	movs	r3, #0
 8002498:	65bb      	str	r3, [r7, #88]	; 0x58
  macDefaultConf.ProgrammableWatchdog = DISABLE;
 800249a:	2300      	movs	r3, #0
 800249c:	f887 306c 	strb.w	r3, [r7, #108]	; 0x6c
  macDefaultConf.ReceiveFlowControl = DISABLE;
 80024a0:	2300      	movs	r3, #0
 80024a2:	f887 3082 	strb.w	r3, [r7, #130]	; 0x82
  macDefaultConf.ReceiveOwn = ENABLE;
 80024a6:	2301      	movs	r3, #1
 80024a8:	f887 304a 	strb.w	r3, [r7, #74]	; 0x4a
  macDefaultConf.ReceiveQueueMode = ETH_RECEIVESTOREFORWARD;
 80024ac:	2320      	movs	r3, #32
 80024ae:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  macDefaultConf.RetryTransmission = ENABLE;
 80024b2:	2301      	movs	r3, #1
 80024b4:	f887 304c 	strb.w	r3, [r7, #76]	; 0x4c
  macDefaultConf.SlowProtocolDetect = DISABLE;
 80024b8:	2300      	movs	r3, #0
 80024ba:	f887 305d 	strb.w	r3, [r7, #93]	; 0x5d
  macDefaultConf.SourceAddrControl = ETH_SOURCEADDRESS_REPLACE_ADDR0;
 80024be:	f04f 5340 	mov.w	r3, #805306368	; 0x30000000
 80024c2:	62fb      	str	r3, [r7, #44]	; 0x2c
  macDefaultConf.Speed = ETH_SPEED_100M;
 80024c4:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 80024c8:	643b      	str	r3, [r7, #64]	; 0x40
  macDefaultConf.Support2KPacket = DISABLE;
 80024ca:	2300      	movs	r3, #0
 80024cc:	f887 3039 	strb.w	r3, [r7, #57]	; 0x39
  macDefaultConf.TransmitQueueMode = ETH_TRANSMITSTOREFORWARD;
 80024d0:	2302      	movs	r3, #2
 80024d2:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  macDefaultConf.TransmitFlowControl = DISABLE;
 80024d6:	2300      	movs	r3, #0
 80024d8:	f887 3080 	strb.w	r3, [r7, #128]	; 0x80
  macDefaultConf.UnicastPausePacketDetect = DISABLE;
 80024dc:	2300      	movs	r3, #0
 80024de:	f887 3081 	strb.w	r3, [r7, #129]	; 0x81
  macDefaultConf.UnicastSlowProtocolPacketDetect = DISABLE;
 80024e2:	2300      	movs	r3, #0
 80024e4:	f887 305c 	strb.w	r3, [r7, #92]	; 0x5c
  macDefaultConf.Watchdog = ENABLE;
 80024e8:	2301      	movs	r3, #1
 80024ea:	f887 303c 	strb.w	r3, [r7, #60]	; 0x3c
  macDefaultConf.WatchdogTimeout =  ETH_MACWTR_WTO_2KB;
 80024ee:	2300      	movs	r3, #0
 80024f0:	673b      	str	r3, [r7, #112]	; 0x70
  macDefaultConf.ZeroQuantaPause = ENABLE;
 80024f2:	2301      	movs	r3, #1
 80024f4:	f887 3078 	strb.w	r3, [r7, #120]	; 0x78

  /* MAC default configuration */
  ETH_SetMACConfig(heth, &macDefaultConf);
 80024f8:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80024fc:	4619      	mov	r1, r3
 80024fe:	6878      	ldr	r0, [r7, #4]
 8002500:	f7ff fde6 	bl	80020d0 <ETH_SetMACConfig>

  /*--------------- ETHERNET DMA registers default Configuration --------------*/
  dmaDefaultConf.AddressAlignedBeats = ENABLE;
 8002504:	2301      	movs	r3, #1
 8002506:	733b      	strb	r3, [r7, #12]
  dmaDefaultConf.BurstMode = ETH_BURSTLENGTH_FIXED;
 8002508:	2301      	movs	r3, #1
 800250a:	613b      	str	r3, [r7, #16]
  dmaDefaultConf.DMAArbitration = ETH_DMAARBITRATION_RX1_TX1;
 800250c:	2300      	movs	r3, #0
 800250e:	60bb      	str	r3, [r7, #8]
  dmaDefaultConf.FlushRxPacket = DISABLE;
 8002510:	2300      	movs	r3, #0
 8002512:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
  dmaDefaultConf.PBLx8Mode = DISABLE;
 8002516:	2300      	movs	r3, #0
 8002518:	757b      	strb	r3, [r7, #21]
  dmaDefaultConf.RebuildINCRxBurst = DISABLE;
 800251a:	2300      	movs	r3, #0
 800251c:	753b      	strb	r3, [r7, #20]
  dmaDefaultConf.RxDMABurstLength = ETH_RXDMABURSTLENGTH_32BEAT;
 800251e:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8002522:	623b      	str	r3, [r7, #32]
  dmaDefaultConf.SecondPacketOperate = DISABLE;
 8002524:	2300      	movs	r3, #0
 8002526:	773b      	strb	r3, [r7, #28]
  dmaDefaultConf.TxDMABurstLength = ETH_TXDMABURSTLENGTH_32BEAT;
 8002528:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 800252c:	61bb      	str	r3, [r7, #24]
  dmaDefaultConf.TCPSegmentation = DISABLE;
 800252e:	2300      	movs	r3, #0
 8002530:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
  dmaDefaultConf.MaximumSegmentSize = 536;
 8002534:	f44f 7306 	mov.w	r3, #536	; 0x218
 8002538:	62bb      	str	r3, [r7, #40]	; 0x28

  /* DMA default configuration */
  ETH_SetDMAConfig(heth, &dmaDefaultConf);
 800253a:	f107 0308 	add.w	r3, r7, #8
 800253e:	4619      	mov	r1, r3
 8002540:	6878      	ldr	r0, [r7, #4]
 8002542:	f7ff fee1 	bl	8002308 <ETH_SetDMAConfig>
}
 8002546:	bf00      	nop
 8002548:	3790      	adds	r7, #144	; 0x90
 800254a:	46bd      	mov	sp, r7
 800254c:	bd80      	pop	{r7, pc}
	...

08002550 <ETH_MAC_MDIO_ClkConfig>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_MAC_MDIO_ClkConfig(ETH_HandleTypeDef *heth)
{
 8002550:	b580      	push	{r7, lr}
 8002552:	b084      	sub	sp, #16
 8002554:	af00      	add	r7, sp, #0
 8002556:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg, hclk;

  /* Get the ETHERNET MACMDIOAR value */
  tmpreg = (heth->Instance)->MACMDIOAR;
 8002558:	687b      	ldr	r3, [r7, #4]
 800255a:	681b      	ldr	r3, [r3, #0]
 800255c:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8002560:	60fb      	str	r3, [r7, #12]

  /* Clear CSR Clock Range bits */
  tmpreg &= ~ETH_MACMDIOAR_CR;
 8002562:	68fb      	ldr	r3, [r7, #12]
 8002564:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8002568:	60fb      	str	r3, [r7, #12]

  /* Get hclk frequency value */
  hclk = HAL_RCC_GetHCLKFreq();
 800256a:	f001 f9a7 	bl	80038bc <HAL_RCC_GetHCLKFreq>
 800256e:	60b8      	str	r0, [r7, #8]

  /* Set CR bits depending on hclk value */
  if((hclk >= 20000000U)&&(hclk < 35000000U))
 8002570:	68bb      	ldr	r3, [r7, #8]
 8002572:	4a1e      	ldr	r2, [pc, #120]	; (80025ec <ETH_MAC_MDIO_ClkConfig+0x9c>)
 8002574:	4293      	cmp	r3, r2
 8002576:	d908      	bls.n	800258a <ETH_MAC_MDIO_ClkConfig+0x3a>
 8002578:	68bb      	ldr	r3, [r7, #8]
 800257a:	4a1d      	ldr	r2, [pc, #116]	; (80025f0 <ETH_MAC_MDIO_ClkConfig+0xa0>)
 800257c:	4293      	cmp	r3, r2
 800257e:	d804      	bhi.n	800258a <ETH_MAC_MDIO_ClkConfig+0x3a>
  {
    /* CSR Clock Range between 20-35 MHz */
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV16;
 8002580:	68fb      	ldr	r3, [r7, #12]
 8002582:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8002586:	60fb      	str	r3, [r7, #12]
 8002588:	e027      	b.n	80025da <ETH_MAC_MDIO_ClkConfig+0x8a>
  }
  else if((hclk >= 35000000U)&&(hclk < 60000000U))
 800258a:	68bb      	ldr	r3, [r7, #8]
 800258c:	4a18      	ldr	r2, [pc, #96]	; (80025f0 <ETH_MAC_MDIO_ClkConfig+0xa0>)
 800258e:	4293      	cmp	r3, r2
 8002590:	d908      	bls.n	80025a4 <ETH_MAC_MDIO_ClkConfig+0x54>
 8002592:	68bb      	ldr	r3, [r7, #8]
 8002594:	4a17      	ldr	r2, [pc, #92]	; (80025f4 <ETH_MAC_MDIO_ClkConfig+0xa4>)
 8002596:	4293      	cmp	r3, r2
 8002598:	d204      	bcs.n	80025a4 <ETH_MAC_MDIO_ClkConfig+0x54>
  {
    /* CSR Clock Range between 35-60 MHz */
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV26;
 800259a:	68fb      	ldr	r3, [r7, #12]
 800259c:	f443 7340 	orr.w	r3, r3, #768	; 0x300
 80025a0:	60fb      	str	r3, [r7, #12]
 80025a2:	e01a      	b.n	80025da <ETH_MAC_MDIO_ClkConfig+0x8a>
  }
  else if((hclk >= 60000000U)&&(hclk < 100000000U))
 80025a4:	68bb      	ldr	r3, [r7, #8]
 80025a6:	4a13      	ldr	r2, [pc, #76]	; (80025f4 <ETH_MAC_MDIO_ClkConfig+0xa4>)
 80025a8:	4293      	cmp	r3, r2
 80025aa:	d303      	bcc.n	80025b4 <ETH_MAC_MDIO_ClkConfig+0x64>
 80025ac:	68bb      	ldr	r3, [r7, #8]
 80025ae:	4a12      	ldr	r2, [pc, #72]	; (80025f8 <ETH_MAC_MDIO_ClkConfig+0xa8>)
 80025b0:	4293      	cmp	r3, r2
 80025b2:	d911      	bls.n	80025d8 <ETH_MAC_MDIO_ClkConfig+0x88>
  {
    /* CSR Clock Range between 60-100 MHz */
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV42;
  }
  else if((hclk >= 100000000U)&&(hclk < 150000000U))
 80025b4:	68bb      	ldr	r3, [r7, #8]
 80025b6:	4a10      	ldr	r2, [pc, #64]	; (80025f8 <ETH_MAC_MDIO_ClkConfig+0xa8>)
 80025b8:	4293      	cmp	r3, r2
 80025ba:	d908      	bls.n	80025ce <ETH_MAC_MDIO_ClkConfig+0x7e>
 80025bc:	68bb      	ldr	r3, [r7, #8]
 80025be:	4a0f      	ldr	r2, [pc, #60]	; (80025fc <ETH_MAC_MDIO_ClkConfig+0xac>)
 80025c0:	4293      	cmp	r3, r2
 80025c2:	d804      	bhi.n	80025ce <ETH_MAC_MDIO_ClkConfig+0x7e>
  {
    /* CSR Clock Range between 100-150 MHz */
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV62;
 80025c4:	68fb      	ldr	r3, [r7, #12]
 80025c6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80025ca:	60fb      	str	r3, [r7, #12]
 80025cc:	e005      	b.n	80025da <ETH_MAC_MDIO_ClkConfig+0x8a>
  }
  else /* (hclk >= 150000000)&&(hclk <= 200000000) */
  {
    /* CSR Clock Range between 150-200 MHz */
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV102;
 80025ce:	68fb      	ldr	r3, [r7, #12]
 80025d0:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80025d4:	60fb      	str	r3, [r7, #12]
 80025d6:	e000      	b.n	80025da <ETH_MAC_MDIO_ClkConfig+0x8a>
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV42;
 80025d8:	bf00      	nop
  }

  /* Configure the CSR Clock Range */
  (heth->Instance)->MACMDIOAR = (uint32_t)tmpreg;
 80025da:	687b      	ldr	r3, [r7, #4]
 80025dc:	681b      	ldr	r3, [r3, #0]
 80025de:	68fa      	ldr	r2, [r7, #12]
 80025e0:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
}
 80025e4:	bf00      	nop
 80025e6:	3710      	adds	r7, #16
 80025e8:	46bd      	mov	sp, r7
 80025ea:	bd80      	pop	{r7, pc}
 80025ec:	01312cff 	.word	0x01312cff
 80025f0:	02160ebf 	.word	0x02160ebf
 80025f4:	03938700 	.word	0x03938700
 80025f8:	05f5e0ff 	.word	0x05f5e0ff
 80025fc:	08f0d17f 	.word	0x08f0d17f

08002600 <ETH_DMATxDescListInit>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_DMATxDescListInit(ETH_HandleTypeDef *heth)
{
 8002600:	b480      	push	{r7}
 8002602:	b085      	sub	sp, #20
 8002604:	af00      	add	r7, sp, #0
 8002606:	6078      	str	r0, [r7, #4]
  ETH_DMADescTypeDef *dmatxdesc;
  uint32_t i;

  /* Fill each DMATxDesc descriptor with the right values */
  for(i=0; i < (uint32_t)ETH_TX_DESC_CNT; i++)
 8002608:	2300      	movs	r3, #0
 800260a:	60fb      	str	r3, [r7, #12]
 800260c:	e01d      	b.n	800264a <ETH_DMATxDescListInit+0x4a>
  {
    dmatxdesc = heth->Init.TxDesc + i;
 800260e:	687b      	ldr	r3, [r7, #4]
 8002610:	68d9      	ldr	r1, [r3, #12]
 8002612:	68fa      	ldr	r2, [r7, #12]
 8002614:	4613      	mov	r3, r2
 8002616:	005b      	lsls	r3, r3, #1
 8002618:	4413      	add	r3, r2
 800261a:	00db      	lsls	r3, r3, #3
 800261c:	440b      	add	r3, r1
 800261e:	60bb      	str	r3, [r7, #8]

    WRITE_REG(dmatxdesc->DESC0, 0x0);
 8002620:	68bb      	ldr	r3, [r7, #8]
 8002622:	2200      	movs	r2, #0
 8002624:	601a      	str	r2, [r3, #0]
    WRITE_REG(dmatxdesc->DESC1, 0x0);
 8002626:	68bb      	ldr	r3, [r7, #8]
 8002628:	2200      	movs	r2, #0
 800262a:	605a      	str	r2, [r3, #4]
    WRITE_REG(dmatxdesc->DESC2, 0x0);
 800262c:	68bb      	ldr	r3, [r7, #8]
 800262e:	2200      	movs	r2, #0
 8002630:	609a      	str	r2, [r3, #8]
    WRITE_REG(dmatxdesc->DESC3, 0x0);
 8002632:	68bb      	ldr	r3, [r7, #8]
 8002634:	2200      	movs	r2, #0
 8002636:	60da      	str	r2, [r3, #12]

    WRITE_REG(heth->TxDescList.TxDesc[i], (uint32_t)dmatxdesc);
 8002638:	68b9      	ldr	r1, [r7, #8]
 800263a:	687b      	ldr	r3, [r7, #4]
 800263c:	68fa      	ldr	r2, [r7, #12]
 800263e:	3206      	adds	r2, #6
 8002640:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  for(i=0; i < (uint32_t)ETH_TX_DESC_CNT; i++)
 8002644:	68fb      	ldr	r3, [r7, #12]
 8002646:	3301      	adds	r3, #1
 8002648:	60fb      	str	r3, [r7, #12]
 800264a:	68fb      	ldr	r3, [r7, #12]
 800264c:	2b03      	cmp	r3, #3
 800264e:	d9de      	bls.n	800260e <ETH_DMATxDescListInit+0xe>
  }

  heth->TxDescList.CurTxDesc = 0;
 8002650:	687b      	ldr	r3, [r7, #4]
 8002652:	2200      	movs	r2, #0
 8002654:	629a      	str	r2, [r3, #40]	; 0x28

  /* Set Transmit Descriptor Ring Length */
  WRITE_REG(heth->Instance->DMACTDRLR, (ETH_TX_DESC_CNT -1));
 8002656:	687b      	ldr	r3, [r7, #4]
 8002658:	681a      	ldr	r2, [r3, #0]
 800265a:	f241 132c 	movw	r3, #4396	; 0x112c
 800265e:	4413      	add	r3, r2
 8002660:	2203      	movs	r2, #3
 8002662:	601a      	str	r2, [r3, #0]

  /* Set Transmit Descriptor List Address */
  WRITE_REG(heth->Instance->DMACTDLAR, (uint32_t) heth->Init.TxDesc);
 8002664:	687b      	ldr	r3, [r7, #4]
 8002666:	68d9      	ldr	r1, [r3, #12]
 8002668:	687b      	ldr	r3, [r7, #4]
 800266a:	681a      	ldr	r2, [r3, #0]
 800266c:	f241 1314 	movw	r3, #4372	; 0x1114
 8002670:	4413      	add	r3, r2
 8002672:	6019      	str	r1, [r3, #0]

  /* Set Transmit Descriptor Tail pointer */
  WRITE_REG(heth->Instance->DMACTDTPR, (uint32_t) heth->Init.TxDesc);
 8002674:	687b      	ldr	r3, [r7, #4]
 8002676:	68da      	ldr	r2, [r3, #12]
 8002678:	687b      	ldr	r3, [r7, #4]
 800267a:	681b      	ldr	r3, [r3, #0]
 800267c:	f503 5389 	add.w	r3, r3, #4384	; 0x1120
 8002680:	601a      	str	r2, [r3, #0]
}
 8002682:	bf00      	nop
 8002684:	3714      	adds	r7, #20
 8002686:	46bd      	mov	sp, r7
 8002688:	f85d 7b04 	ldr.w	r7, [sp], #4
 800268c:	4770      	bx	lr

0800268e <ETH_DMARxDescListInit>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_DMARxDescListInit(ETH_HandleTypeDef *heth)
{
 800268e:	b480      	push	{r7}
 8002690:	b085      	sub	sp, #20
 8002692:	af00      	add	r7, sp, #0
 8002694:	6078      	str	r0, [r7, #4]
  ETH_DMADescTypeDef *dmarxdesc;
  uint32_t i;

  for(i = 0; i < (uint32_t)ETH_RX_DESC_CNT; i++)
 8002696:	2300      	movs	r3, #0
 8002698:	60fb      	str	r3, [r7, #12]
 800269a:	e024      	b.n	80026e6 <ETH_DMARxDescListInit+0x58>
  {
    dmarxdesc =  heth->Init.RxDesc + i;
 800269c:	687b      	ldr	r3, [r7, #4]
 800269e:	6919      	ldr	r1, [r3, #16]
 80026a0:	68fa      	ldr	r2, [r7, #12]
 80026a2:	4613      	mov	r3, r2
 80026a4:	005b      	lsls	r3, r3, #1
 80026a6:	4413      	add	r3, r2
 80026a8:	00db      	lsls	r3, r3, #3
 80026aa:	440b      	add	r3, r1
 80026ac:	60bb      	str	r3, [r7, #8]

    WRITE_REG(dmarxdesc->DESC0, 0x0);
 80026ae:	68bb      	ldr	r3, [r7, #8]
 80026b0:	2200      	movs	r2, #0
 80026b2:	601a      	str	r2, [r3, #0]
    WRITE_REG(dmarxdesc->DESC1, 0x0);
 80026b4:	68bb      	ldr	r3, [r7, #8]
 80026b6:	2200      	movs	r2, #0
 80026b8:	605a      	str	r2, [r3, #4]
    WRITE_REG(dmarxdesc->DESC2, 0x0);
 80026ba:	68bb      	ldr	r3, [r7, #8]
 80026bc:	2200      	movs	r2, #0
 80026be:	609a      	str	r2, [r3, #8]
    WRITE_REG(dmarxdesc->DESC3, 0x0);
 80026c0:	68bb      	ldr	r3, [r7, #8]
 80026c2:	2200      	movs	r2, #0
 80026c4:	60da      	str	r2, [r3, #12]
    WRITE_REG(dmarxdesc->BackupAddr0, 0x0);
 80026c6:	68bb      	ldr	r3, [r7, #8]
 80026c8:	2200      	movs	r2, #0
 80026ca:	611a      	str	r2, [r3, #16]
    WRITE_REG(dmarxdesc->BackupAddr1, 0x0);
 80026cc:	68bb      	ldr	r3, [r7, #8]
 80026ce:	2200      	movs	r2, #0
 80026d0:	615a      	str	r2, [r3, #20]

    /* Set Rx descritors addresses */
    WRITE_REG(heth->RxDescList.RxDesc[i], (uint32_t)dmarxdesc);
 80026d2:	68ba      	ldr	r2, [r7, #8]
 80026d4:	6879      	ldr	r1, [r7, #4]
 80026d6:	68fb      	ldr	r3, [r7, #12]
 80026d8:	3310      	adds	r3, #16
 80026da:	009b      	lsls	r3, r3, #2
 80026dc:	440b      	add	r3, r1
 80026de:	605a      	str	r2, [r3, #4]
  for(i = 0; i < (uint32_t)ETH_RX_DESC_CNT; i++)
 80026e0:	68fb      	ldr	r3, [r7, #12]
 80026e2:	3301      	adds	r3, #1
 80026e4:	60fb      	str	r3, [r7, #12]
 80026e6:	68fb      	ldr	r3, [r7, #12]
 80026e8:	2b03      	cmp	r3, #3
 80026ea:	d9d7      	bls.n	800269c <ETH_DMARxDescListInit+0xe>
  }

  WRITE_REG(heth->RxDescList.CurRxDesc, 0);
 80026ec:	687b      	ldr	r3, [r7, #4]
 80026ee:	2200      	movs	r2, #0
 80026f0:	655a      	str	r2, [r3, #84]	; 0x54
  WRITE_REG(heth->RxDescList.FirstAppDesc, 0);
 80026f2:	687b      	ldr	r3, [r7, #4]
 80026f4:	2200      	movs	r2, #0
 80026f6:	659a      	str	r2, [r3, #88]	; 0x58
  WRITE_REG(heth->RxDescList.AppDescNbr, 0);
 80026f8:	687b      	ldr	r3, [r7, #4]
 80026fa:	2200      	movs	r2, #0
 80026fc:	65da      	str	r2, [r3, #92]	; 0x5c
  WRITE_REG(heth->RxDescList.ItMode, 0);
 80026fe:	687b      	ldr	r3, [r7, #4]
 8002700:	2200      	movs	r2, #0
 8002702:	665a      	str	r2, [r3, #100]	; 0x64
  WRITE_REG(heth->RxDescList.AppContextDesc, 0);
 8002704:	687b      	ldr	r3, [r7, #4]
 8002706:	2200      	movs	r2, #0
 8002708:	661a      	str	r2, [r3, #96]	; 0x60

  /* Set Receive Descriptor Ring Length */
  WRITE_REG(heth->Instance->DMACRDRLR, ((uint32_t)(ETH_RX_DESC_CNT - 1)));
 800270a:	687b      	ldr	r3, [r7, #4]
 800270c:	681a      	ldr	r2, [r3, #0]
 800270e:	f241 1330 	movw	r3, #4400	; 0x1130
 8002712:	4413      	add	r3, r2
 8002714:	2203      	movs	r2, #3
 8002716:	601a      	str	r2, [r3, #0]

  /* Set Receive Descriptor List Address */
  WRITE_REG(heth->Instance->DMACRDLAR, (uint32_t) heth->Init.RxDesc);
 8002718:	687b      	ldr	r3, [r7, #4]
 800271a:	6919      	ldr	r1, [r3, #16]
 800271c:	687b      	ldr	r3, [r7, #4]
 800271e:	681a      	ldr	r2, [r3, #0]
 8002720:	f241 131c 	movw	r3, #4380	; 0x111c
 8002724:	4413      	add	r3, r2
 8002726:	6019      	str	r1, [r3, #0]

  /* Set Receive Descriptor Tail pointer Address */
  WRITE_REG(heth->Instance->DMACRDTPR, ((uint32_t)(heth->Init.RxDesc + (uint32_t)(ETH_RX_DESC_CNT - 1))));
 8002728:	687b      	ldr	r3, [r7, #4]
 800272a:	691b      	ldr	r3, [r3, #16]
 800272c:	f103 0148 	add.w	r1, r3, #72	; 0x48
 8002730:	687b      	ldr	r3, [r7, #4]
 8002732:	681a      	ldr	r2, [r3, #0]
 8002734:	f241 1328 	movw	r3, #4392	; 0x1128
 8002738:	4413      	add	r3, r2
 800273a:	6019      	str	r1, [r3, #0]
}
 800273c:	bf00      	nop
 800273e:	3714      	adds	r7, #20
 8002740:	46bd      	mov	sp, r7
 8002742:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002746:	4770      	bx	lr

08002748 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002748:	b480      	push	{r7}
 800274a:	b089      	sub	sp, #36	; 0x24
 800274c:	af00      	add	r7, sp, #0
 800274e:	6078      	str	r0, [r7, #4]
 8002750:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8002752:	2300      	movs	r3, #0
 8002754:	61fb      	str	r3, [r7, #28]
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
#else
  EXTI_CurrentCPU = EXTI_D1; /* EXTI for CM7 CPU */
 8002756:	4b86      	ldr	r3, [pc, #536]	; (8002970 <HAL_GPIO_Init+0x228>)
 8002758:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 800275a:	e18c      	b.n	8002a76 <HAL_GPIO_Init+0x32e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 800275c:	683b      	ldr	r3, [r7, #0]
 800275e:	681a      	ldr	r2, [r3, #0]
 8002760:	2101      	movs	r1, #1
 8002762:	69fb      	ldr	r3, [r7, #28]
 8002764:	fa01 f303 	lsl.w	r3, r1, r3
 8002768:	4013      	ands	r3, r2
 800276a:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00U)
 800276c:	693b      	ldr	r3, [r7, #16]
 800276e:	2b00      	cmp	r3, #0
 8002770:	f000 817e 	beq.w	8002a70 <HAL_GPIO_Init+0x328>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if ((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8002774:	683b      	ldr	r3, [r7, #0]
 8002776:	685b      	ldr	r3, [r3, #4]
 8002778:	2b01      	cmp	r3, #1
 800277a:	d00b      	beq.n	8002794 <HAL_GPIO_Init+0x4c>
 800277c:	683b      	ldr	r3, [r7, #0]
 800277e:	685b      	ldr	r3, [r3, #4]
 8002780:	2b02      	cmp	r3, #2
 8002782:	d007      	beq.n	8002794 <HAL_GPIO_Init+0x4c>
          (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8002784:	683b      	ldr	r3, [r7, #0]
 8002786:	685b      	ldr	r3, [r3, #4]
      if ((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8002788:	2b11      	cmp	r3, #17
 800278a:	d003      	beq.n	8002794 <HAL_GPIO_Init+0x4c>
          (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 800278c:	683b      	ldr	r3, [r7, #0]
 800278e:	685b      	ldr	r3, [r3, #4]
 8002790:	2b12      	cmp	r3, #18
 8002792:	d130      	bne.n	80027f6 <HAL_GPIO_Init+0xae>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8002794:	687b      	ldr	r3, [r7, #4]
 8002796:	689b      	ldr	r3, [r3, #8]
 8002798:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 800279a:	69fb      	ldr	r3, [r7, #28]
 800279c:	005b      	lsls	r3, r3, #1
 800279e:	2203      	movs	r2, #3
 80027a0:	fa02 f303 	lsl.w	r3, r2, r3
 80027a4:	43db      	mvns	r3, r3
 80027a6:	69ba      	ldr	r2, [r7, #24]
 80027a8:	4013      	ands	r3, r2
 80027aa:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80027ac:	683b      	ldr	r3, [r7, #0]
 80027ae:	68da      	ldr	r2, [r3, #12]
 80027b0:	69fb      	ldr	r3, [r7, #28]
 80027b2:	005b      	lsls	r3, r3, #1
 80027b4:	fa02 f303 	lsl.w	r3, r2, r3
 80027b8:	69ba      	ldr	r2, [r7, #24]
 80027ba:	4313      	orrs	r3, r2
 80027bc:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80027be:	687b      	ldr	r3, [r7, #4]
 80027c0:	69ba      	ldr	r2, [r7, #24]
 80027c2:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80027c4:	687b      	ldr	r3, [r7, #4]
 80027c6:	685b      	ldr	r3, [r3, #4]
 80027c8:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 80027ca:	2201      	movs	r2, #1
 80027cc:	69fb      	ldr	r3, [r7, #28]
 80027ce:	fa02 f303 	lsl.w	r3, r2, r3
 80027d2:	43db      	mvns	r3, r3
 80027d4:	69ba      	ldr	r2, [r7, #24]
 80027d6:	4013      	ands	r3, r2
 80027d8:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 80027da:	683b      	ldr	r3, [r7, #0]
 80027dc:	685b      	ldr	r3, [r3, #4]
 80027de:	091b      	lsrs	r3, r3, #4
 80027e0:	f003 0201 	and.w	r2, r3, #1
 80027e4:	69fb      	ldr	r3, [r7, #28]
 80027e6:	fa02 f303 	lsl.w	r3, r2, r3
 80027ea:	69ba      	ldr	r2, [r7, #24]
 80027ec:	4313      	orrs	r3, r2
 80027ee:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80027f0:	687b      	ldr	r3, [r7, #4]
 80027f2:	69ba      	ldr	r2, [r7, #24]
 80027f4:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 80027f6:	687b      	ldr	r3, [r7, #4]
 80027f8:	68db      	ldr	r3, [r3, #12]
 80027fa:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 80027fc:	69fb      	ldr	r3, [r7, #28]
 80027fe:	005b      	lsls	r3, r3, #1
 8002800:	2203      	movs	r2, #3
 8002802:	fa02 f303 	lsl.w	r3, r2, r3
 8002806:	43db      	mvns	r3, r3
 8002808:	69ba      	ldr	r2, [r7, #24]
 800280a:	4013      	ands	r3, r2
 800280c:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 800280e:	683b      	ldr	r3, [r7, #0]
 8002810:	689a      	ldr	r2, [r3, #8]
 8002812:	69fb      	ldr	r3, [r7, #28]
 8002814:	005b      	lsls	r3, r3, #1
 8002816:	fa02 f303 	lsl.w	r3, r2, r3
 800281a:	69ba      	ldr	r2, [r7, #24]
 800281c:	4313      	orrs	r3, r2
 800281e:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8002820:	687b      	ldr	r3, [r7, #4]
 8002822:	69ba      	ldr	r2, [r7, #24]
 8002824:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8002826:	683b      	ldr	r3, [r7, #0]
 8002828:	685b      	ldr	r3, [r3, #4]
 800282a:	2b02      	cmp	r3, #2
 800282c:	d003      	beq.n	8002836 <HAL_GPIO_Init+0xee>
 800282e:	683b      	ldr	r3, [r7, #0]
 8002830:	685b      	ldr	r3, [r3, #4]
 8002832:	2b12      	cmp	r3, #18
 8002834:	d123      	bne.n	800287e <HAL_GPIO_Init+0x136>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8002836:	69fb      	ldr	r3, [r7, #28]
 8002838:	08da      	lsrs	r2, r3, #3
 800283a:	687b      	ldr	r3, [r7, #4]
 800283c:	3208      	adds	r2, #8
 800283e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002842:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8002844:	69fb      	ldr	r3, [r7, #28]
 8002846:	f003 0307 	and.w	r3, r3, #7
 800284a:	009b      	lsls	r3, r3, #2
 800284c:	220f      	movs	r2, #15
 800284e:	fa02 f303 	lsl.w	r3, r2, r3
 8002852:	43db      	mvns	r3, r3
 8002854:	69ba      	ldr	r2, [r7, #24]
 8002856:	4013      	ands	r3, r2
 8002858:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 800285a:	683b      	ldr	r3, [r7, #0]
 800285c:	691a      	ldr	r2, [r3, #16]
 800285e:	69fb      	ldr	r3, [r7, #28]
 8002860:	f003 0307 	and.w	r3, r3, #7
 8002864:	009b      	lsls	r3, r3, #2
 8002866:	fa02 f303 	lsl.w	r3, r2, r3
 800286a:	69ba      	ldr	r2, [r7, #24]
 800286c:	4313      	orrs	r3, r2
 800286e:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8002870:	69fb      	ldr	r3, [r7, #28]
 8002872:	08da      	lsrs	r2, r3, #3
 8002874:	687b      	ldr	r3, [r7, #4]
 8002876:	3208      	adds	r2, #8
 8002878:	69b9      	ldr	r1, [r7, #24]
 800287a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800287e:	687b      	ldr	r3, [r7, #4]
 8002880:	681b      	ldr	r3, [r3, #0]
 8002882:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8002884:	69fb      	ldr	r3, [r7, #28]
 8002886:	005b      	lsls	r3, r3, #1
 8002888:	2203      	movs	r2, #3
 800288a:	fa02 f303 	lsl.w	r3, r2, r3
 800288e:	43db      	mvns	r3, r3
 8002890:	69ba      	ldr	r2, [r7, #24]
 8002892:	4013      	ands	r3, r2
 8002894:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8002896:	683b      	ldr	r3, [r7, #0]
 8002898:	685b      	ldr	r3, [r3, #4]
 800289a:	f003 0203 	and.w	r2, r3, #3
 800289e:	69fb      	ldr	r3, [r7, #28]
 80028a0:	005b      	lsls	r3, r3, #1
 80028a2:	fa02 f303 	lsl.w	r3, r2, r3
 80028a6:	69ba      	ldr	r2, [r7, #24]
 80028a8:	4313      	orrs	r3, r2
 80028aa:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80028ac:	687b      	ldr	r3, [r7, #4]
 80028ae:	69ba      	ldr	r2, [r7, #24]
 80028b0:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80028b2:	683b      	ldr	r3, [r7, #0]
 80028b4:	685b      	ldr	r3, [r3, #4]
 80028b6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80028ba:	2b00      	cmp	r3, #0
 80028bc:	f000 80d8 	beq.w	8002a70 <HAL_GPIO_Init+0x328>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80028c0:	4b2c      	ldr	r3, [pc, #176]	; (8002974 <HAL_GPIO_Init+0x22c>)
 80028c2:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 80028c6:	4a2b      	ldr	r2, [pc, #172]	; (8002974 <HAL_GPIO_Init+0x22c>)
 80028c8:	f043 0302 	orr.w	r3, r3, #2
 80028cc:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 80028d0:	4b28      	ldr	r3, [pc, #160]	; (8002974 <HAL_GPIO_Init+0x22c>)
 80028d2:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 80028d6:	f003 0302 	and.w	r3, r3, #2
 80028da:	60fb      	str	r3, [r7, #12]
 80028dc:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80028de:	4a26      	ldr	r2, [pc, #152]	; (8002978 <HAL_GPIO_Init+0x230>)
 80028e0:	69fb      	ldr	r3, [r7, #28]
 80028e2:	089b      	lsrs	r3, r3, #2
 80028e4:	3302      	adds	r3, #2
 80028e6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80028ea:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 80028ec:	69fb      	ldr	r3, [r7, #28]
 80028ee:	f003 0303 	and.w	r3, r3, #3
 80028f2:	009b      	lsls	r3, r3, #2
 80028f4:	220f      	movs	r2, #15
 80028f6:	fa02 f303 	lsl.w	r3, r2, r3
 80028fa:	43db      	mvns	r3, r3
 80028fc:	69ba      	ldr	r2, [r7, #24]
 80028fe:	4013      	ands	r3, r2
 8002900:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8002902:	687b      	ldr	r3, [r7, #4]
 8002904:	4a1d      	ldr	r2, [pc, #116]	; (800297c <HAL_GPIO_Init+0x234>)
 8002906:	4293      	cmp	r3, r2
 8002908:	d04a      	beq.n	80029a0 <HAL_GPIO_Init+0x258>
 800290a:	687b      	ldr	r3, [r7, #4]
 800290c:	4a1c      	ldr	r2, [pc, #112]	; (8002980 <HAL_GPIO_Init+0x238>)
 800290e:	4293      	cmp	r3, r2
 8002910:	d02b      	beq.n	800296a <HAL_GPIO_Init+0x222>
 8002912:	687b      	ldr	r3, [r7, #4]
 8002914:	4a1b      	ldr	r2, [pc, #108]	; (8002984 <HAL_GPIO_Init+0x23c>)
 8002916:	4293      	cmp	r3, r2
 8002918:	d025      	beq.n	8002966 <HAL_GPIO_Init+0x21e>
 800291a:	687b      	ldr	r3, [r7, #4]
 800291c:	4a1a      	ldr	r2, [pc, #104]	; (8002988 <HAL_GPIO_Init+0x240>)
 800291e:	4293      	cmp	r3, r2
 8002920:	d01f      	beq.n	8002962 <HAL_GPIO_Init+0x21a>
 8002922:	687b      	ldr	r3, [r7, #4]
 8002924:	4a19      	ldr	r2, [pc, #100]	; (800298c <HAL_GPIO_Init+0x244>)
 8002926:	4293      	cmp	r3, r2
 8002928:	d019      	beq.n	800295e <HAL_GPIO_Init+0x216>
 800292a:	687b      	ldr	r3, [r7, #4]
 800292c:	4a18      	ldr	r2, [pc, #96]	; (8002990 <HAL_GPIO_Init+0x248>)
 800292e:	4293      	cmp	r3, r2
 8002930:	d013      	beq.n	800295a <HAL_GPIO_Init+0x212>
 8002932:	687b      	ldr	r3, [r7, #4]
 8002934:	4a17      	ldr	r2, [pc, #92]	; (8002994 <HAL_GPIO_Init+0x24c>)
 8002936:	4293      	cmp	r3, r2
 8002938:	d00d      	beq.n	8002956 <HAL_GPIO_Init+0x20e>
 800293a:	687b      	ldr	r3, [r7, #4]
 800293c:	4a16      	ldr	r2, [pc, #88]	; (8002998 <HAL_GPIO_Init+0x250>)
 800293e:	4293      	cmp	r3, r2
 8002940:	d007      	beq.n	8002952 <HAL_GPIO_Init+0x20a>
 8002942:	687b      	ldr	r3, [r7, #4]
 8002944:	4a15      	ldr	r2, [pc, #84]	; (800299c <HAL_GPIO_Init+0x254>)
 8002946:	4293      	cmp	r3, r2
 8002948:	d101      	bne.n	800294e <HAL_GPIO_Init+0x206>
 800294a:	2309      	movs	r3, #9
 800294c:	e029      	b.n	80029a2 <HAL_GPIO_Init+0x25a>
 800294e:	230a      	movs	r3, #10
 8002950:	e027      	b.n	80029a2 <HAL_GPIO_Init+0x25a>
 8002952:	2307      	movs	r3, #7
 8002954:	e025      	b.n	80029a2 <HAL_GPIO_Init+0x25a>
 8002956:	2306      	movs	r3, #6
 8002958:	e023      	b.n	80029a2 <HAL_GPIO_Init+0x25a>
 800295a:	2305      	movs	r3, #5
 800295c:	e021      	b.n	80029a2 <HAL_GPIO_Init+0x25a>
 800295e:	2304      	movs	r3, #4
 8002960:	e01f      	b.n	80029a2 <HAL_GPIO_Init+0x25a>
 8002962:	2303      	movs	r3, #3
 8002964:	e01d      	b.n	80029a2 <HAL_GPIO_Init+0x25a>
 8002966:	2302      	movs	r3, #2
 8002968:	e01b      	b.n	80029a2 <HAL_GPIO_Init+0x25a>
 800296a:	2301      	movs	r3, #1
 800296c:	e019      	b.n	80029a2 <HAL_GPIO_Init+0x25a>
 800296e:	bf00      	nop
 8002970:	58000080 	.word	0x58000080
 8002974:	58024400 	.word	0x58024400
 8002978:	58000400 	.word	0x58000400
 800297c:	58020000 	.word	0x58020000
 8002980:	58020400 	.word	0x58020400
 8002984:	58020800 	.word	0x58020800
 8002988:	58020c00 	.word	0x58020c00
 800298c:	58021000 	.word	0x58021000
 8002990:	58021400 	.word	0x58021400
 8002994:	58021800 	.word	0x58021800
 8002998:	58021c00 	.word	0x58021c00
 800299c:	58022400 	.word	0x58022400
 80029a0:	2300      	movs	r3, #0
 80029a2:	69fa      	ldr	r2, [r7, #28]
 80029a4:	f002 0203 	and.w	r2, r2, #3
 80029a8:	0092      	lsls	r2, r2, #2
 80029aa:	4093      	lsls	r3, r2
 80029ac:	69ba      	ldr	r2, [r7, #24]
 80029ae:	4313      	orrs	r3, r2
 80029b0:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80029b2:	4938      	ldr	r1, [pc, #224]	; (8002a94 <HAL_GPIO_Init+0x34c>)
 80029b4:	69fb      	ldr	r3, [r7, #28]
 80029b6:	089b      	lsrs	r3, r3, #2
 80029b8:	3302      	adds	r3, #2
 80029ba:	69ba      	ldr	r2, [r7, #24]
 80029bc:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
 80029c0:	697b      	ldr	r3, [r7, #20]
 80029c2:	681b      	ldr	r3, [r3, #0]
 80029c4:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 80029c6:	693b      	ldr	r3, [r7, #16]
 80029c8:	43db      	mvns	r3, r3
 80029ca:	69ba      	ldr	r2, [r7, #24]
 80029cc:	4013      	ands	r3, r2
 80029ce:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80029d0:	683b      	ldr	r3, [r7, #0]
 80029d2:	685b      	ldr	r3, [r3, #4]
 80029d4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80029d8:	2b00      	cmp	r3, #0
 80029da:	d003      	beq.n	80029e4 <HAL_GPIO_Init+0x29c>
        {
          temp |= iocurrent;
 80029dc:	69ba      	ldr	r2, [r7, #24]
 80029de:	693b      	ldr	r3, [r7, #16]
 80029e0:	4313      	orrs	r3, r2
 80029e2:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->IMR1 = temp;
 80029e4:	697b      	ldr	r3, [r7, #20]
 80029e6:	69ba      	ldr	r2, [r7, #24]
 80029e8:	601a      	str	r2, [r3, #0]

        temp = EXTI_CurrentCPU->EMR1;
 80029ea:	697b      	ldr	r3, [r7, #20]
 80029ec:	685b      	ldr	r3, [r3, #4]
 80029ee:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 80029f0:	693b      	ldr	r3, [r7, #16]
 80029f2:	43db      	mvns	r3, r3
 80029f4:	69ba      	ldr	r2, [r7, #24]
 80029f6:	4013      	ands	r3, r2
 80029f8:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80029fa:	683b      	ldr	r3, [r7, #0]
 80029fc:	685b      	ldr	r3, [r3, #4]
 80029fe:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002a02:	2b00      	cmp	r3, #0
 8002a04:	d003      	beq.n	8002a0e <HAL_GPIO_Init+0x2c6>
        {
          temp |= iocurrent;
 8002a06:	69ba      	ldr	r2, [r7, #24]
 8002a08:	693b      	ldr	r3, [r7, #16]
 8002a0a:	4313      	orrs	r3, r2
 8002a0c:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->EMR1 = temp;
 8002a0e:	697b      	ldr	r3, [r7, #20]
 8002a10:	69ba      	ldr	r2, [r7, #24]
 8002a12:	605a      	str	r2, [r3, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8002a14:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002a18:	681b      	ldr	r3, [r3, #0]
 8002a1a:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8002a1c:	693b      	ldr	r3, [r7, #16]
 8002a1e:	43db      	mvns	r3, r3
 8002a20:	69ba      	ldr	r2, [r7, #24]
 8002a22:	4013      	ands	r3, r2
 8002a24:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8002a26:	683b      	ldr	r3, [r7, #0]
 8002a28:	685b      	ldr	r3, [r3, #4]
 8002a2a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002a2e:	2b00      	cmp	r3, #0
 8002a30:	d003      	beq.n	8002a3a <HAL_GPIO_Init+0x2f2>
        {
          temp |= iocurrent;
 8002a32:	69ba      	ldr	r2, [r7, #24]
 8002a34:	693b      	ldr	r3, [r7, #16]
 8002a36:	4313      	orrs	r3, r2
 8002a38:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR1 = temp;
 8002a3a:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8002a3e:	69bb      	ldr	r3, [r7, #24]
 8002a40:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 8002a42:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002a46:	685b      	ldr	r3, [r3, #4]
 8002a48:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8002a4a:	693b      	ldr	r3, [r7, #16]
 8002a4c:	43db      	mvns	r3, r3
 8002a4e:	69ba      	ldr	r2, [r7, #24]
 8002a50:	4013      	ands	r3, r2
 8002a52:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8002a54:	683b      	ldr	r3, [r7, #0]
 8002a56:	685b      	ldr	r3, [r3, #4]
 8002a58:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002a5c:	2b00      	cmp	r3, #0
 8002a5e:	d003      	beq.n	8002a68 <HAL_GPIO_Init+0x320>
        {
          temp |= iocurrent;
 8002a60:	69ba      	ldr	r2, [r7, #24]
 8002a62:	693b      	ldr	r3, [r7, #16]
 8002a64:	4313      	orrs	r3, r2
 8002a66:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR1 = temp;
 8002a68:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8002a6c:	69bb      	ldr	r3, [r7, #24]
 8002a6e:	6053      	str	r3, [r2, #4]
      }
    }

    position++;
 8002a70:	69fb      	ldr	r3, [r7, #28]
 8002a72:	3301      	adds	r3, #1
 8002a74:	61fb      	str	r3, [r7, #28]
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8002a76:	683b      	ldr	r3, [r7, #0]
 8002a78:	681a      	ldr	r2, [r3, #0]
 8002a7a:	69fb      	ldr	r3, [r7, #28]
 8002a7c:	fa22 f303 	lsr.w	r3, r2, r3
 8002a80:	2b00      	cmp	r3, #0
 8002a82:	f47f ae6b 	bne.w	800275c <HAL_GPIO_Init+0x14>
  }
}
 8002a86:	bf00      	nop
 8002a88:	bf00      	nop
 8002a8a:	3724      	adds	r7, #36	; 0x24
 8002a8c:	46bd      	mov	sp, r7
 8002a8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a92:	4770      	bx	lr
 8002a94:	58000400 	.word	0x58000400

08002a98 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002a98:	b480      	push	{r7}
 8002a9a:	b083      	sub	sp, #12
 8002a9c:	af00      	add	r7, sp, #0
 8002a9e:	6078      	str	r0, [r7, #4]
 8002aa0:	460b      	mov	r3, r1
 8002aa2:	807b      	strh	r3, [r7, #2]
 8002aa4:	4613      	mov	r3, r2
 8002aa6:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8002aa8:	787b      	ldrb	r3, [r7, #1]
 8002aaa:	2b00      	cmp	r3, #0
 8002aac:	d003      	beq.n	8002ab6 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8002aae:	887a      	ldrh	r2, [r7, #2]
 8002ab0:	687b      	ldr	r3, [r7, #4]
 8002ab2:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
  }
}
 8002ab4:	e003      	b.n	8002abe <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 8002ab6:	887b      	ldrh	r3, [r7, #2]
 8002ab8:	041a      	lsls	r2, r3, #16
 8002aba:	687b      	ldr	r3, [r7, #4]
 8002abc:	619a      	str	r2, [r3, #24]
}
 8002abe:	bf00      	nop
 8002ac0:	370c      	adds	r7, #12
 8002ac2:	46bd      	mov	sp, r7
 8002ac4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ac8:	4770      	bx	lr
	...

08002acc <HAL_PWREx_ConfigSupply>:
  *         PWR_SMPS_2V5_SUPPLIES_EXT are used only for lines that supports SMPS
  *         regulator.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply (uint32_t SupplySource)
{
 8002acc:	b580      	push	{r7, lr}
 8002ace:	b084      	sub	sp, #16
 8002ad0:	af00      	add	r7, sp, #0
 8002ad2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param (IS_PWR_SUPPLY (SupplySource));

  /* Check if supply source was configured */
#if defined (PWR_FLAG_SCUEN)
  if (__HAL_PWR_GET_FLAG (PWR_FLAG_SCUEN) == 0U)
 8002ad4:	4b19      	ldr	r3, [pc, #100]	; (8002b3c <HAL_PWREx_ConfigSupply+0x70>)
 8002ad6:	68db      	ldr	r3, [r3, #12]
 8002ad8:	f003 0304 	and.w	r3, r3, #4
 8002adc:	2b04      	cmp	r3, #4
 8002ade:	d00a      	beq.n	8002af6 <HAL_PWREx_ConfigSupply+0x2a>
#else
  if ((PWR->CR3 & (PWR_CR3_SMPSEN | PWR_CR3_LDOEN | PWR_CR3_BYPASS)) != (PWR_CR3_SMPSEN | PWR_CR3_LDOEN))
#endif /* defined (PWR_FLAG_SCUEN) */
  {
    /* Check supply configuration */
    if ((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
 8002ae0:	4b16      	ldr	r3, [pc, #88]	; (8002b3c <HAL_PWREx_ConfigSupply+0x70>)
 8002ae2:	68db      	ldr	r3, [r3, #12]
 8002ae4:	f003 0307 	and.w	r3, r3, #7
 8002ae8:	687a      	ldr	r2, [r7, #4]
 8002aea:	429a      	cmp	r2, r3
 8002aec:	d001      	beq.n	8002af2 <HAL_PWREx_ConfigSupply+0x26>
    {
      /* Supply configuration update locked, can't apply a new supply config */
      return HAL_ERROR;
 8002aee:	2301      	movs	r3, #1
 8002af0:	e01f      	b.n	8002b32 <HAL_PWREx_ConfigSupply+0x66>
    else
    {
      /* Supply configuration update locked, but new supply configuration
         matches with old supply configuration : nothing to do
      */
      return HAL_OK;
 8002af2:	2300      	movs	r3, #0
 8002af4:	e01d      	b.n	8002b32 <HAL_PWREx_ConfigSupply+0x66>
    }
  }

  /* Set the power supply configuration */
  MODIFY_REG (PWR->CR3, PWR_SUPPLY_CONFIG_MASK, SupplySource);
 8002af6:	4b11      	ldr	r3, [pc, #68]	; (8002b3c <HAL_PWREx_ConfigSupply+0x70>)
 8002af8:	68db      	ldr	r3, [r3, #12]
 8002afa:	f023 0207 	bic.w	r2, r3, #7
 8002afe:	490f      	ldr	r1, [pc, #60]	; (8002b3c <HAL_PWREx_ConfigSupply+0x70>)
 8002b00:	687b      	ldr	r3, [r7, #4]
 8002b02:	4313      	orrs	r3, r2
 8002b04:	60cb      	str	r3, [r1, #12]

  /* Get tick */
  tickstart = HAL_GetTick ();
 8002b06:	f7fe fb77 	bl	80011f8 <HAL_GetTick>
 8002b0a:	60f8      	str	r0, [r7, #12]

  /* Wait till voltage level flag is set */
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8002b0c:	e009      	b.n	8002b22 <HAL_PWREx_ConfigSupply+0x56>
  {
    if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 8002b0e:	f7fe fb73 	bl	80011f8 <HAL_GetTick>
 8002b12:	4602      	mov	r2, r0
 8002b14:	68fb      	ldr	r3, [r7, #12]
 8002b16:	1ad3      	subs	r3, r2, r3
 8002b18:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8002b1c:	d901      	bls.n	8002b22 <HAL_PWREx_ConfigSupply+0x56>
    {
      return HAL_ERROR;
 8002b1e:	2301      	movs	r3, #1
 8002b20:	e007      	b.n	8002b32 <HAL_PWREx_ConfigSupply+0x66>
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8002b22:	4b06      	ldr	r3, [pc, #24]	; (8002b3c <HAL_PWREx_ConfigSupply+0x70>)
 8002b24:	685b      	ldr	r3, [r3, #4]
 8002b26:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8002b2a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002b2e:	d1ee      	bne.n	8002b0e <HAL_PWREx_ConfigSupply+0x42>
      }
    }
  }
#endif /* defined (SMPS) */

  return HAL_OK;
 8002b30:	2300      	movs	r3, #0
}
 8002b32:	4618      	mov	r0, r3
 8002b34:	3710      	adds	r7, #16
 8002b36:	46bd      	mov	sp, r7
 8002b38:	bd80      	pop	{r7, pc}
 8002b3a:	bf00      	nop
 8002b3c:	58024800 	.word	0x58024800

08002b40 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002b40:	b580      	push	{r7, lr}
 8002b42:	b08c      	sub	sp, #48	; 0x30
 8002b44:	af00      	add	r7, sp, #0
 8002b46:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp1_pllckcfg, temp2_pllckcfg;

    /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8002b48:	687b      	ldr	r3, [r7, #4]
 8002b4a:	2b00      	cmp	r3, #0
 8002b4c:	d101      	bne.n	8002b52 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002b4e:	2301      	movs	r3, #1
 8002b50:	e37a      	b.n	8003248 <HAL_RCC_OscConfig+0x708>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002b52:	687b      	ldr	r3, [r7, #4]
 8002b54:	681b      	ldr	r3, [r3, #0]
 8002b56:	f003 0301 	and.w	r3, r3, #1
 8002b5a:	2b00      	cmp	r3, #0
 8002b5c:	f000 8087 	beq.w	8002c6e <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002b60:	4ba0      	ldr	r3, [pc, #640]	; (8002de4 <HAL_RCC_OscConfig+0x2a4>)
 8002b62:	691b      	ldr	r3, [r3, #16]
 8002b64:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8002b68:	62fb      	str	r3, [r7, #44]	; 0x2c
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8002b6a:	4b9e      	ldr	r3, [pc, #632]	; (8002de4 <HAL_RCC_OscConfig+0x2a4>)
 8002b6c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002b6e:	62bb      	str	r3, [r7, #40]	; 0x28
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 8002b70:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002b72:	2b10      	cmp	r3, #16
 8002b74:	d007      	beq.n	8002b86 <HAL_RCC_OscConfig+0x46>
 8002b76:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002b78:	2b18      	cmp	r3, #24
 8002b7a:	d110      	bne.n	8002b9e <HAL_RCC_OscConfig+0x5e>
 8002b7c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002b7e:	f003 0303 	and.w	r3, r3, #3
 8002b82:	2b02      	cmp	r3, #2
 8002b84:	d10b      	bne.n	8002b9e <HAL_RCC_OscConfig+0x5e>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002b86:	4b97      	ldr	r3, [pc, #604]	; (8002de4 <HAL_RCC_OscConfig+0x2a4>)
 8002b88:	681b      	ldr	r3, [r3, #0]
 8002b8a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002b8e:	2b00      	cmp	r3, #0
 8002b90:	d06c      	beq.n	8002c6c <HAL_RCC_OscConfig+0x12c>
 8002b92:	687b      	ldr	r3, [r7, #4]
 8002b94:	685b      	ldr	r3, [r3, #4]
 8002b96:	2b00      	cmp	r3, #0
 8002b98:	d168      	bne.n	8002c6c <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8002b9a:	2301      	movs	r3, #1
 8002b9c:	e354      	b.n	8003248 <HAL_RCC_OscConfig+0x708>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002b9e:	687b      	ldr	r3, [r7, #4]
 8002ba0:	685b      	ldr	r3, [r3, #4]
 8002ba2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002ba6:	d106      	bne.n	8002bb6 <HAL_RCC_OscConfig+0x76>
 8002ba8:	4b8e      	ldr	r3, [pc, #568]	; (8002de4 <HAL_RCC_OscConfig+0x2a4>)
 8002baa:	681b      	ldr	r3, [r3, #0]
 8002bac:	4a8d      	ldr	r2, [pc, #564]	; (8002de4 <HAL_RCC_OscConfig+0x2a4>)
 8002bae:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002bb2:	6013      	str	r3, [r2, #0]
 8002bb4:	e02e      	b.n	8002c14 <HAL_RCC_OscConfig+0xd4>
 8002bb6:	687b      	ldr	r3, [r7, #4]
 8002bb8:	685b      	ldr	r3, [r3, #4]
 8002bba:	2b00      	cmp	r3, #0
 8002bbc:	d10c      	bne.n	8002bd8 <HAL_RCC_OscConfig+0x98>
 8002bbe:	4b89      	ldr	r3, [pc, #548]	; (8002de4 <HAL_RCC_OscConfig+0x2a4>)
 8002bc0:	681b      	ldr	r3, [r3, #0]
 8002bc2:	4a88      	ldr	r2, [pc, #544]	; (8002de4 <HAL_RCC_OscConfig+0x2a4>)
 8002bc4:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002bc8:	6013      	str	r3, [r2, #0]
 8002bca:	4b86      	ldr	r3, [pc, #536]	; (8002de4 <HAL_RCC_OscConfig+0x2a4>)
 8002bcc:	681b      	ldr	r3, [r3, #0]
 8002bce:	4a85      	ldr	r2, [pc, #532]	; (8002de4 <HAL_RCC_OscConfig+0x2a4>)
 8002bd0:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002bd4:	6013      	str	r3, [r2, #0]
 8002bd6:	e01d      	b.n	8002c14 <HAL_RCC_OscConfig+0xd4>
 8002bd8:	687b      	ldr	r3, [r7, #4]
 8002bda:	685b      	ldr	r3, [r3, #4]
 8002bdc:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002be0:	d10c      	bne.n	8002bfc <HAL_RCC_OscConfig+0xbc>
 8002be2:	4b80      	ldr	r3, [pc, #512]	; (8002de4 <HAL_RCC_OscConfig+0x2a4>)
 8002be4:	681b      	ldr	r3, [r3, #0]
 8002be6:	4a7f      	ldr	r2, [pc, #508]	; (8002de4 <HAL_RCC_OscConfig+0x2a4>)
 8002be8:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002bec:	6013      	str	r3, [r2, #0]
 8002bee:	4b7d      	ldr	r3, [pc, #500]	; (8002de4 <HAL_RCC_OscConfig+0x2a4>)
 8002bf0:	681b      	ldr	r3, [r3, #0]
 8002bf2:	4a7c      	ldr	r2, [pc, #496]	; (8002de4 <HAL_RCC_OscConfig+0x2a4>)
 8002bf4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002bf8:	6013      	str	r3, [r2, #0]
 8002bfa:	e00b      	b.n	8002c14 <HAL_RCC_OscConfig+0xd4>
 8002bfc:	4b79      	ldr	r3, [pc, #484]	; (8002de4 <HAL_RCC_OscConfig+0x2a4>)
 8002bfe:	681b      	ldr	r3, [r3, #0]
 8002c00:	4a78      	ldr	r2, [pc, #480]	; (8002de4 <HAL_RCC_OscConfig+0x2a4>)
 8002c02:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002c06:	6013      	str	r3, [r2, #0]
 8002c08:	4b76      	ldr	r3, [pc, #472]	; (8002de4 <HAL_RCC_OscConfig+0x2a4>)
 8002c0a:	681b      	ldr	r3, [r3, #0]
 8002c0c:	4a75      	ldr	r2, [pc, #468]	; (8002de4 <HAL_RCC_OscConfig+0x2a4>)
 8002c0e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002c12:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002c14:	687b      	ldr	r3, [r7, #4]
 8002c16:	685b      	ldr	r3, [r3, #4]
 8002c18:	2b00      	cmp	r3, #0
 8002c1a:	d013      	beq.n	8002c44 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002c1c:	f7fe faec 	bl	80011f8 <HAL_GetTick>
 8002c20:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8002c22:	e008      	b.n	8002c36 <HAL_RCC_OscConfig+0xf6>
        {
          if((uint32_t) (HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002c24:	f7fe fae8 	bl	80011f8 <HAL_GetTick>
 8002c28:	4602      	mov	r2, r0
 8002c2a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002c2c:	1ad3      	subs	r3, r2, r3
 8002c2e:	2b64      	cmp	r3, #100	; 0x64
 8002c30:	d901      	bls.n	8002c36 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8002c32:	2303      	movs	r3, #3
 8002c34:	e308      	b.n	8003248 <HAL_RCC_OscConfig+0x708>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8002c36:	4b6b      	ldr	r3, [pc, #428]	; (8002de4 <HAL_RCC_OscConfig+0x2a4>)
 8002c38:	681b      	ldr	r3, [r3, #0]
 8002c3a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002c3e:	2b00      	cmp	r3, #0
 8002c40:	d0f0      	beq.n	8002c24 <HAL_RCC_OscConfig+0xe4>
 8002c42:	e014      	b.n	8002c6e <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002c44:	f7fe fad8 	bl	80011f8 <HAL_GetTick>
 8002c48:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8002c4a:	e008      	b.n	8002c5e <HAL_RCC_OscConfig+0x11e>
        {
          if((uint32_t) (HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002c4c:	f7fe fad4 	bl	80011f8 <HAL_GetTick>
 8002c50:	4602      	mov	r2, r0
 8002c52:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002c54:	1ad3      	subs	r3, r2, r3
 8002c56:	2b64      	cmp	r3, #100	; 0x64
 8002c58:	d901      	bls.n	8002c5e <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8002c5a:	2303      	movs	r3, #3
 8002c5c:	e2f4      	b.n	8003248 <HAL_RCC_OscConfig+0x708>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8002c5e:	4b61      	ldr	r3, [pc, #388]	; (8002de4 <HAL_RCC_OscConfig+0x2a4>)
 8002c60:	681b      	ldr	r3, [r3, #0]
 8002c62:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002c66:	2b00      	cmp	r3, #0
 8002c68:	d1f0      	bne.n	8002c4c <HAL_RCC_OscConfig+0x10c>
 8002c6a:	e000      	b.n	8002c6e <HAL_RCC_OscConfig+0x12e>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002c6c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002c6e:	687b      	ldr	r3, [r7, #4]
 8002c70:	681b      	ldr	r3, [r3, #0]
 8002c72:	f003 0302 	and.w	r3, r3, #2
 8002c76:	2b00      	cmp	r3, #0
 8002c78:	d06d      	beq.n	8002d56 <HAL_RCC_OscConfig+0x216>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSICALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* When the HSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002c7a:	4b5a      	ldr	r3, [pc, #360]	; (8002de4 <HAL_RCC_OscConfig+0x2a4>)
 8002c7c:	691b      	ldr	r3, [r3, #16]
 8002c7e:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8002c82:	623b      	str	r3, [r7, #32]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8002c84:	4b57      	ldr	r3, [pc, #348]	; (8002de4 <HAL_RCC_OscConfig+0x2a4>)
 8002c86:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002c88:	61fb      	str	r3, [r7, #28]
    if((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 8002c8a:	6a3b      	ldr	r3, [r7, #32]
 8002c8c:	2b00      	cmp	r3, #0
 8002c8e:	d007      	beq.n	8002ca0 <HAL_RCC_OscConfig+0x160>
 8002c90:	6a3b      	ldr	r3, [r7, #32]
 8002c92:	2b18      	cmp	r3, #24
 8002c94:	d11b      	bne.n	8002cce <HAL_RCC_OscConfig+0x18e>
 8002c96:	69fb      	ldr	r3, [r7, #28]
 8002c98:	f003 0303 	and.w	r3, r3, #3
 8002c9c:	2b00      	cmp	r3, #0
 8002c9e:	d116      	bne.n	8002cce <HAL_RCC_OscConfig+0x18e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8002ca0:	4b50      	ldr	r3, [pc, #320]	; (8002de4 <HAL_RCC_OscConfig+0x2a4>)
 8002ca2:	681b      	ldr	r3, [r3, #0]
 8002ca4:	f003 0304 	and.w	r3, r3, #4
 8002ca8:	2b00      	cmp	r3, #0
 8002caa:	d005      	beq.n	8002cb8 <HAL_RCC_OscConfig+0x178>
 8002cac:	687b      	ldr	r3, [r7, #4]
 8002cae:	68db      	ldr	r3, [r3, #12]
 8002cb0:	2b00      	cmp	r3, #0
 8002cb2:	d101      	bne.n	8002cb8 <HAL_RCC_OscConfig+0x178>
      {
        return HAL_ERROR;
 8002cb4:	2301      	movs	r3, #1
 8002cb6:	e2c7      	b.n	8003248 <HAL_RCC_OscConfig+0x708>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002cb8:	4b4a      	ldr	r3, [pc, #296]	; (8002de4 <HAL_RCC_OscConfig+0x2a4>)
 8002cba:	685b      	ldr	r3, [r3, #4]
 8002cbc:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8002cc0:	687b      	ldr	r3, [r7, #4]
 8002cc2:	691b      	ldr	r3, [r3, #16]
 8002cc4:	061b      	lsls	r3, r3, #24
 8002cc6:	4947      	ldr	r1, [pc, #284]	; (8002de4 <HAL_RCC_OscConfig+0x2a4>)
 8002cc8:	4313      	orrs	r3, r2
 8002cca:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8002ccc:	e043      	b.n	8002d56 <HAL_RCC_OscConfig+0x216>
    }

    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8002cce:	687b      	ldr	r3, [r7, #4]
 8002cd0:	68db      	ldr	r3, [r3, #12]
 8002cd2:	2b00      	cmp	r3, #0
 8002cd4:	d026      	beq.n	8002d24 <HAL_RCC_OscConfig+0x1e4>
      {
     /* Enable the Internal High Speed oscillator (HSI, HSIDIV2,HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 8002cd6:	4b43      	ldr	r3, [pc, #268]	; (8002de4 <HAL_RCC_OscConfig+0x2a4>)
 8002cd8:	681b      	ldr	r3, [r3, #0]
 8002cda:	f023 0219 	bic.w	r2, r3, #25
 8002cde:	687b      	ldr	r3, [r7, #4]
 8002ce0:	68db      	ldr	r3, [r3, #12]
 8002ce2:	4940      	ldr	r1, [pc, #256]	; (8002de4 <HAL_RCC_OscConfig+0x2a4>)
 8002ce4:	4313      	orrs	r3, r2
 8002ce6:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002ce8:	f7fe fa86 	bl	80011f8 <HAL_GetTick>
 8002cec:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8002cee:	e008      	b.n	8002d02 <HAL_RCC_OscConfig+0x1c2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002cf0:	f7fe fa82 	bl	80011f8 <HAL_GetTick>
 8002cf4:	4602      	mov	r2, r0
 8002cf6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002cf8:	1ad3      	subs	r3, r2, r3
 8002cfa:	2b02      	cmp	r3, #2
 8002cfc:	d901      	bls.n	8002d02 <HAL_RCC_OscConfig+0x1c2>
          {
            return HAL_TIMEOUT;
 8002cfe:	2303      	movs	r3, #3
 8002d00:	e2a2      	b.n	8003248 <HAL_RCC_OscConfig+0x708>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8002d02:	4b38      	ldr	r3, [pc, #224]	; (8002de4 <HAL_RCC_OscConfig+0x2a4>)
 8002d04:	681b      	ldr	r3, [r3, #0]
 8002d06:	f003 0304 	and.w	r3, r3, #4
 8002d0a:	2b00      	cmp	r3, #0
 8002d0c:	d0f0      	beq.n	8002cf0 <HAL_RCC_OscConfig+0x1b0>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002d0e:	4b35      	ldr	r3, [pc, #212]	; (8002de4 <HAL_RCC_OscConfig+0x2a4>)
 8002d10:	685b      	ldr	r3, [r3, #4]
 8002d12:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8002d16:	687b      	ldr	r3, [r7, #4]
 8002d18:	691b      	ldr	r3, [r3, #16]
 8002d1a:	061b      	lsls	r3, r3, #24
 8002d1c:	4931      	ldr	r1, [pc, #196]	; (8002de4 <HAL_RCC_OscConfig+0x2a4>)
 8002d1e:	4313      	orrs	r3, r2
 8002d20:	604b      	str	r3, [r1, #4]
 8002d22:	e018      	b.n	8002d56 <HAL_RCC_OscConfig+0x216>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002d24:	4b2f      	ldr	r3, [pc, #188]	; (8002de4 <HAL_RCC_OscConfig+0x2a4>)
 8002d26:	681b      	ldr	r3, [r3, #0]
 8002d28:	4a2e      	ldr	r2, [pc, #184]	; (8002de4 <HAL_RCC_OscConfig+0x2a4>)
 8002d2a:	f023 0301 	bic.w	r3, r3, #1
 8002d2e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002d30:	f7fe fa62 	bl	80011f8 <HAL_GetTick>
 8002d34:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8002d36:	e008      	b.n	8002d4a <HAL_RCC_OscConfig+0x20a>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002d38:	f7fe fa5e 	bl	80011f8 <HAL_GetTick>
 8002d3c:	4602      	mov	r2, r0
 8002d3e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002d40:	1ad3      	subs	r3, r2, r3
 8002d42:	2b02      	cmp	r3, #2
 8002d44:	d901      	bls.n	8002d4a <HAL_RCC_OscConfig+0x20a>
          {
            return HAL_TIMEOUT;
 8002d46:	2303      	movs	r3, #3
 8002d48:	e27e      	b.n	8003248 <HAL_RCC_OscConfig+0x708>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8002d4a:	4b26      	ldr	r3, [pc, #152]	; (8002de4 <HAL_RCC_OscConfig+0x2a4>)
 8002d4c:	681b      	ldr	r3, [r3, #0]
 8002d4e:	f003 0304 	and.w	r3, r3, #4
 8002d52:	2b00      	cmp	r3, #0
 8002d54:	d1f0      	bne.n	8002d38 <HAL_RCC_OscConfig+0x1f8>
        }
      }
    }
  }
  /*----------------------------- CSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 8002d56:	687b      	ldr	r3, [r7, #4]
 8002d58:	681b      	ldr	r3, [r3, #0]
 8002d5a:	f003 0310 	and.w	r3, r3, #16
 8002d5e:	2b00      	cmp	r3, #0
 8002d60:	d06c      	beq.n	8002e3c <HAL_RCC_OscConfig+0x2fc>
    /* Check the parameters */
    assert_param(IS_RCC_CSI(RCC_OscInitStruct->CSIState));
    assert_param(IS_RCC_CSICALIBRATION_VALUE(RCC_OscInitStruct->CSICalibrationValue));

    /* When the CSI is used as system clock it will not disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002d62:	4b20      	ldr	r3, [pc, #128]	; (8002de4 <HAL_RCC_OscConfig+0x2a4>)
 8002d64:	691b      	ldr	r3, [r3, #16]
 8002d66:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8002d6a:	61bb      	str	r3, [r7, #24]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8002d6c:	4b1d      	ldr	r3, [pc, #116]	; (8002de4 <HAL_RCC_OscConfig+0x2a4>)
 8002d6e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002d70:	617b      	str	r3, [r7, #20]
    if((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 8002d72:	69bb      	ldr	r3, [r7, #24]
 8002d74:	2b08      	cmp	r3, #8
 8002d76:	d007      	beq.n	8002d88 <HAL_RCC_OscConfig+0x248>
 8002d78:	69bb      	ldr	r3, [r7, #24]
 8002d7a:	2b18      	cmp	r3, #24
 8002d7c:	d11b      	bne.n	8002db6 <HAL_RCC_OscConfig+0x276>
 8002d7e:	697b      	ldr	r3, [r7, #20]
 8002d80:	f003 0303 	and.w	r3, r3, #3
 8002d84:	2b01      	cmp	r3, #1
 8002d86:	d116      	bne.n	8002db6 <HAL_RCC_OscConfig+0x276>
    {
      /* When CSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8002d88:	4b16      	ldr	r3, [pc, #88]	; (8002de4 <HAL_RCC_OscConfig+0x2a4>)
 8002d8a:	681b      	ldr	r3, [r3, #0]
 8002d8c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002d90:	2b00      	cmp	r3, #0
 8002d92:	d005      	beq.n	8002da0 <HAL_RCC_OscConfig+0x260>
 8002d94:	687b      	ldr	r3, [r7, #4]
 8002d96:	69db      	ldr	r3, [r3, #28]
 8002d98:	2b80      	cmp	r3, #128	; 0x80
 8002d9a:	d001      	beq.n	8002da0 <HAL_RCC_OscConfig+0x260>
      {
        return HAL_ERROR;
 8002d9c:	2301      	movs	r3, #1
 8002d9e:	e253      	b.n	8003248 <HAL_RCC_OscConfig+0x708>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8002da0:	4b10      	ldr	r3, [pc, #64]	; (8002de4 <HAL_RCC_OscConfig+0x2a4>)
 8002da2:	68db      	ldr	r3, [r3, #12]
 8002da4:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 8002da8:	687b      	ldr	r3, [r7, #4]
 8002daa:	6a1b      	ldr	r3, [r3, #32]
 8002dac:	061b      	lsls	r3, r3, #24
 8002dae:	490d      	ldr	r1, [pc, #52]	; (8002de4 <HAL_RCC_OscConfig+0x2a4>)
 8002db0:	4313      	orrs	r3, r2
 8002db2:	60cb      	str	r3, [r1, #12]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8002db4:	e042      	b.n	8002e3c <HAL_RCC_OscConfig+0x2fc>
      }
    }
    else
    {
      /* Check the CSI State */
      if((RCC_OscInitStruct->CSIState)!= RCC_CSI_OFF)
 8002db6:	687b      	ldr	r3, [r7, #4]
 8002db8:	69db      	ldr	r3, [r3, #28]
 8002dba:	2b00      	cmp	r3, #0
 8002dbc:	d025      	beq.n	8002e0a <HAL_RCC_OscConfig+0x2ca>
      {
        /* Enable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_ENABLE();
 8002dbe:	4b09      	ldr	r3, [pc, #36]	; (8002de4 <HAL_RCC_OscConfig+0x2a4>)
 8002dc0:	681b      	ldr	r3, [r3, #0]
 8002dc2:	4a08      	ldr	r2, [pc, #32]	; (8002de4 <HAL_RCC_OscConfig+0x2a4>)
 8002dc4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002dc8:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002dca:	f7fe fa15 	bl	80011f8 <HAL_GetTick>
 8002dce:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8002dd0:	e00a      	b.n	8002de8 <HAL_RCC_OscConfig+0x2a8>
        {
          if((HAL_GetTick() - tickstart ) > CSI_TIMEOUT_VALUE)
 8002dd2:	f7fe fa11 	bl	80011f8 <HAL_GetTick>
 8002dd6:	4602      	mov	r2, r0
 8002dd8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002dda:	1ad3      	subs	r3, r2, r3
 8002ddc:	2b02      	cmp	r3, #2
 8002dde:	d903      	bls.n	8002de8 <HAL_RCC_OscConfig+0x2a8>
          {
            return HAL_TIMEOUT;
 8002de0:	2303      	movs	r3, #3
 8002de2:	e231      	b.n	8003248 <HAL_RCC_OscConfig+0x708>
 8002de4:	58024400 	.word	0x58024400
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8002de8:	4ba3      	ldr	r3, [pc, #652]	; (8003078 <HAL_RCC_OscConfig+0x538>)
 8002dea:	681b      	ldr	r3, [r3, #0]
 8002dec:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002df0:	2b00      	cmp	r3, #0
 8002df2:	d0ee      	beq.n	8002dd2 <HAL_RCC_OscConfig+0x292>
          }
        }

        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8002df4:	4ba0      	ldr	r3, [pc, #640]	; (8003078 <HAL_RCC_OscConfig+0x538>)
 8002df6:	68db      	ldr	r3, [r3, #12]
 8002df8:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 8002dfc:	687b      	ldr	r3, [r7, #4]
 8002dfe:	6a1b      	ldr	r3, [r3, #32]
 8002e00:	061b      	lsls	r3, r3, #24
 8002e02:	499d      	ldr	r1, [pc, #628]	; (8003078 <HAL_RCC_OscConfig+0x538>)
 8002e04:	4313      	orrs	r3, r2
 8002e06:	60cb      	str	r3, [r1, #12]
 8002e08:	e018      	b.n	8002e3c <HAL_RCC_OscConfig+0x2fc>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_DISABLE();
 8002e0a:	4b9b      	ldr	r3, [pc, #620]	; (8003078 <HAL_RCC_OscConfig+0x538>)
 8002e0c:	681b      	ldr	r3, [r3, #0]
 8002e0e:	4a9a      	ldr	r2, [pc, #616]	; (8003078 <HAL_RCC_OscConfig+0x538>)
 8002e10:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8002e14:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002e16:	f7fe f9ef 	bl	80011f8 <HAL_GetTick>
 8002e1a:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8002e1c:	e008      	b.n	8002e30 <HAL_RCC_OscConfig+0x2f0>
        {
          if((HAL_GetTick() - tickstart ) > CSI_TIMEOUT_VALUE)
 8002e1e:	f7fe f9eb 	bl	80011f8 <HAL_GetTick>
 8002e22:	4602      	mov	r2, r0
 8002e24:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002e26:	1ad3      	subs	r3, r2, r3
 8002e28:	2b02      	cmp	r3, #2
 8002e2a:	d901      	bls.n	8002e30 <HAL_RCC_OscConfig+0x2f0>
          {
            return HAL_TIMEOUT;
 8002e2c:	2303      	movs	r3, #3
 8002e2e:	e20b      	b.n	8003248 <HAL_RCC_OscConfig+0x708>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8002e30:	4b91      	ldr	r3, [pc, #580]	; (8003078 <HAL_RCC_OscConfig+0x538>)
 8002e32:	681b      	ldr	r3, [r3, #0]
 8002e34:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002e38:	2b00      	cmp	r3, #0
 8002e3a:	d1f0      	bne.n	8002e1e <HAL_RCC_OscConfig+0x2de>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002e3c:	687b      	ldr	r3, [r7, #4]
 8002e3e:	681b      	ldr	r3, [r3, #0]
 8002e40:	f003 0308 	and.w	r3, r3, #8
 8002e44:	2b00      	cmp	r3, #0
 8002e46:	d036      	beq.n	8002eb6 <HAL_RCC_OscConfig+0x376>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8002e48:	687b      	ldr	r3, [r7, #4]
 8002e4a:	695b      	ldr	r3, [r3, #20]
 8002e4c:	2b00      	cmp	r3, #0
 8002e4e:	d019      	beq.n	8002e84 <HAL_RCC_OscConfig+0x344>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002e50:	4b89      	ldr	r3, [pc, #548]	; (8003078 <HAL_RCC_OscConfig+0x538>)
 8002e52:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002e54:	4a88      	ldr	r2, [pc, #544]	; (8003078 <HAL_RCC_OscConfig+0x538>)
 8002e56:	f043 0301 	orr.w	r3, r3, #1
 8002e5a:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002e5c:	f7fe f9cc 	bl	80011f8 <HAL_GetTick>
 8002e60:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8002e62:	e008      	b.n	8002e76 <HAL_RCC_OscConfig+0x336>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002e64:	f7fe f9c8 	bl	80011f8 <HAL_GetTick>
 8002e68:	4602      	mov	r2, r0
 8002e6a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002e6c:	1ad3      	subs	r3, r2, r3
 8002e6e:	2b02      	cmp	r3, #2
 8002e70:	d901      	bls.n	8002e76 <HAL_RCC_OscConfig+0x336>
        {
          return HAL_TIMEOUT;
 8002e72:	2303      	movs	r3, #3
 8002e74:	e1e8      	b.n	8003248 <HAL_RCC_OscConfig+0x708>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8002e76:	4b80      	ldr	r3, [pc, #512]	; (8003078 <HAL_RCC_OscConfig+0x538>)
 8002e78:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002e7a:	f003 0302 	and.w	r3, r3, #2
 8002e7e:	2b00      	cmp	r3, #0
 8002e80:	d0f0      	beq.n	8002e64 <HAL_RCC_OscConfig+0x324>
 8002e82:	e018      	b.n	8002eb6 <HAL_RCC_OscConfig+0x376>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002e84:	4b7c      	ldr	r3, [pc, #496]	; (8003078 <HAL_RCC_OscConfig+0x538>)
 8002e86:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002e88:	4a7b      	ldr	r2, [pc, #492]	; (8003078 <HAL_RCC_OscConfig+0x538>)
 8002e8a:	f023 0301 	bic.w	r3, r3, #1
 8002e8e:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002e90:	f7fe f9b2 	bl	80011f8 <HAL_GetTick>
 8002e94:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8002e96:	e008      	b.n	8002eaa <HAL_RCC_OscConfig+0x36a>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002e98:	f7fe f9ae 	bl	80011f8 <HAL_GetTick>
 8002e9c:	4602      	mov	r2, r0
 8002e9e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002ea0:	1ad3      	subs	r3, r2, r3
 8002ea2:	2b02      	cmp	r3, #2
 8002ea4:	d901      	bls.n	8002eaa <HAL_RCC_OscConfig+0x36a>
        {
          return HAL_TIMEOUT;
 8002ea6:	2303      	movs	r3, #3
 8002ea8:	e1ce      	b.n	8003248 <HAL_RCC_OscConfig+0x708>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8002eaa:	4b73      	ldr	r3, [pc, #460]	; (8003078 <HAL_RCC_OscConfig+0x538>)
 8002eac:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002eae:	f003 0302 	and.w	r3, r3, #2
 8002eb2:	2b00      	cmp	r3, #0
 8002eb4:	d1f0      	bne.n	8002e98 <HAL_RCC_OscConfig+0x358>
      }
    }
  }

  /*------------------------------ HSI48 Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8002eb6:	687b      	ldr	r3, [r7, #4]
 8002eb8:	681b      	ldr	r3, [r3, #0]
 8002eba:	f003 0320 	and.w	r3, r3, #32
 8002ebe:	2b00      	cmp	r3, #0
 8002ec0:	d036      	beq.n	8002f30 <HAL_RCC_OscConfig+0x3f0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if((RCC_OscInitStruct->HSI48State)!= RCC_HSI48_OFF)
 8002ec2:	687b      	ldr	r3, [r7, #4]
 8002ec4:	699b      	ldr	r3, [r3, #24]
 8002ec6:	2b00      	cmp	r3, #0
 8002ec8:	d019      	beq.n	8002efe <HAL_RCC_OscConfig+0x3be>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8002eca:	4b6b      	ldr	r3, [pc, #428]	; (8003078 <HAL_RCC_OscConfig+0x538>)
 8002ecc:	681b      	ldr	r3, [r3, #0]
 8002ece:	4a6a      	ldr	r2, [pc, #424]	; (8003078 <HAL_RCC_OscConfig+0x538>)
 8002ed0:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8002ed4:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8002ed6:	f7fe f98f 	bl	80011f8 <HAL_GetTick>
 8002eda:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8002edc:	e008      	b.n	8002ef0 <HAL_RCC_OscConfig+0x3b0>
      {
        if((HAL_GetTick() - tickstart ) > HSI48_TIMEOUT_VALUE)
 8002ede:	f7fe f98b 	bl	80011f8 <HAL_GetTick>
 8002ee2:	4602      	mov	r2, r0
 8002ee4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002ee6:	1ad3      	subs	r3, r2, r3
 8002ee8:	2b02      	cmp	r3, #2
 8002eea:	d901      	bls.n	8002ef0 <HAL_RCC_OscConfig+0x3b0>
        {
          return HAL_TIMEOUT;
 8002eec:	2303      	movs	r3, #3
 8002eee:	e1ab      	b.n	8003248 <HAL_RCC_OscConfig+0x708>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8002ef0:	4b61      	ldr	r3, [pc, #388]	; (8003078 <HAL_RCC_OscConfig+0x538>)
 8002ef2:	681b      	ldr	r3, [r3, #0]
 8002ef4:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8002ef8:	2b00      	cmp	r3, #0
 8002efa:	d0f0      	beq.n	8002ede <HAL_RCC_OscConfig+0x39e>
 8002efc:	e018      	b.n	8002f30 <HAL_RCC_OscConfig+0x3f0>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8002efe:	4b5e      	ldr	r3, [pc, #376]	; (8003078 <HAL_RCC_OscConfig+0x538>)
 8002f00:	681b      	ldr	r3, [r3, #0]
 8002f02:	4a5d      	ldr	r2, [pc, #372]	; (8003078 <HAL_RCC_OscConfig+0x538>)
 8002f04:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8002f08:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8002f0a:	f7fe f975 	bl	80011f8 <HAL_GetTick>
 8002f0e:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8002f10:	e008      	b.n	8002f24 <HAL_RCC_OscConfig+0x3e4>
      {
        if((HAL_GetTick() - tickstart ) > HSI48_TIMEOUT_VALUE)
 8002f12:	f7fe f971 	bl	80011f8 <HAL_GetTick>
 8002f16:	4602      	mov	r2, r0
 8002f18:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002f1a:	1ad3      	subs	r3, r2, r3
 8002f1c:	2b02      	cmp	r3, #2
 8002f1e:	d901      	bls.n	8002f24 <HAL_RCC_OscConfig+0x3e4>
        {
          return HAL_TIMEOUT;
 8002f20:	2303      	movs	r3, #3
 8002f22:	e191      	b.n	8003248 <HAL_RCC_OscConfig+0x708>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8002f24:	4b54      	ldr	r3, [pc, #336]	; (8003078 <HAL_RCC_OscConfig+0x538>)
 8002f26:	681b      	ldr	r3, [r3, #0]
 8002f28:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8002f2c:	2b00      	cmp	r3, #0
 8002f2e:	d1f0      	bne.n	8002f12 <HAL_RCC_OscConfig+0x3d2>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002f30:	687b      	ldr	r3, [r7, #4]
 8002f32:	681b      	ldr	r3, [r3, #0]
 8002f34:	f003 0304 	and.w	r3, r3, #4
 8002f38:	2b00      	cmp	r3, #0
 8002f3a:	f000 8081 	beq.w	8003040 <HAL_RCC_OscConfig+0x500>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8002f3e:	4b4f      	ldr	r3, [pc, #316]	; (800307c <HAL_RCC_OscConfig+0x53c>)
 8002f40:	681b      	ldr	r3, [r3, #0]
 8002f42:	4a4e      	ldr	r2, [pc, #312]	; (800307c <HAL_RCC_OscConfig+0x53c>)
 8002f44:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002f48:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8002f4a:	f7fe f955 	bl	80011f8 <HAL_GetTick>
 8002f4e:	6278      	str	r0, [r7, #36]	; 0x24

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8002f50:	e008      	b.n	8002f64 <HAL_RCC_OscConfig+0x424>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 8002f52:	f7fe f951 	bl	80011f8 <HAL_GetTick>
 8002f56:	4602      	mov	r2, r0
 8002f58:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002f5a:	1ad3      	subs	r3, r2, r3
 8002f5c:	2b64      	cmp	r3, #100	; 0x64
 8002f5e:	d901      	bls.n	8002f64 <HAL_RCC_OscConfig+0x424>
      {
        return HAL_TIMEOUT;
 8002f60:	2303      	movs	r3, #3
 8002f62:	e171      	b.n	8003248 <HAL_RCC_OscConfig+0x708>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8002f64:	4b45      	ldr	r3, [pc, #276]	; (800307c <HAL_RCC_OscConfig+0x53c>)
 8002f66:	681b      	ldr	r3, [r3, #0]
 8002f68:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002f6c:	2b00      	cmp	r3, #0
 8002f6e:	d0f0      	beq.n	8002f52 <HAL_RCC_OscConfig+0x412>
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002f70:	687b      	ldr	r3, [r7, #4]
 8002f72:	689b      	ldr	r3, [r3, #8]
 8002f74:	2b01      	cmp	r3, #1
 8002f76:	d106      	bne.n	8002f86 <HAL_RCC_OscConfig+0x446>
 8002f78:	4b3f      	ldr	r3, [pc, #252]	; (8003078 <HAL_RCC_OscConfig+0x538>)
 8002f7a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002f7c:	4a3e      	ldr	r2, [pc, #248]	; (8003078 <HAL_RCC_OscConfig+0x538>)
 8002f7e:	f043 0301 	orr.w	r3, r3, #1
 8002f82:	6713      	str	r3, [r2, #112]	; 0x70
 8002f84:	e02d      	b.n	8002fe2 <HAL_RCC_OscConfig+0x4a2>
 8002f86:	687b      	ldr	r3, [r7, #4]
 8002f88:	689b      	ldr	r3, [r3, #8]
 8002f8a:	2b00      	cmp	r3, #0
 8002f8c:	d10c      	bne.n	8002fa8 <HAL_RCC_OscConfig+0x468>
 8002f8e:	4b3a      	ldr	r3, [pc, #232]	; (8003078 <HAL_RCC_OscConfig+0x538>)
 8002f90:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002f92:	4a39      	ldr	r2, [pc, #228]	; (8003078 <HAL_RCC_OscConfig+0x538>)
 8002f94:	f023 0301 	bic.w	r3, r3, #1
 8002f98:	6713      	str	r3, [r2, #112]	; 0x70
 8002f9a:	4b37      	ldr	r3, [pc, #220]	; (8003078 <HAL_RCC_OscConfig+0x538>)
 8002f9c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002f9e:	4a36      	ldr	r2, [pc, #216]	; (8003078 <HAL_RCC_OscConfig+0x538>)
 8002fa0:	f023 0304 	bic.w	r3, r3, #4
 8002fa4:	6713      	str	r3, [r2, #112]	; 0x70
 8002fa6:	e01c      	b.n	8002fe2 <HAL_RCC_OscConfig+0x4a2>
 8002fa8:	687b      	ldr	r3, [r7, #4]
 8002faa:	689b      	ldr	r3, [r3, #8]
 8002fac:	2b05      	cmp	r3, #5
 8002fae:	d10c      	bne.n	8002fca <HAL_RCC_OscConfig+0x48a>
 8002fb0:	4b31      	ldr	r3, [pc, #196]	; (8003078 <HAL_RCC_OscConfig+0x538>)
 8002fb2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002fb4:	4a30      	ldr	r2, [pc, #192]	; (8003078 <HAL_RCC_OscConfig+0x538>)
 8002fb6:	f043 0304 	orr.w	r3, r3, #4
 8002fba:	6713      	str	r3, [r2, #112]	; 0x70
 8002fbc:	4b2e      	ldr	r3, [pc, #184]	; (8003078 <HAL_RCC_OscConfig+0x538>)
 8002fbe:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002fc0:	4a2d      	ldr	r2, [pc, #180]	; (8003078 <HAL_RCC_OscConfig+0x538>)
 8002fc2:	f043 0301 	orr.w	r3, r3, #1
 8002fc6:	6713      	str	r3, [r2, #112]	; 0x70
 8002fc8:	e00b      	b.n	8002fe2 <HAL_RCC_OscConfig+0x4a2>
 8002fca:	4b2b      	ldr	r3, [pc, #172]	; (8003078 <HAL_RCC_OscConfig+0x538>)
 8002fcc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002fce:	4a2a      	ldr	r2, [pc, #168]	; (8003078 <HAL_RCC_OscConfig+0x538>)
 8002fd0:	f023 0301 	bic.w	r3, r3, #1
 8002fd4:	6713      	str	r3, [r2, #112]	; 0x70
 8002fd6:	4b28      	ldr	r3, [pc, #160]	; (8003078 <HAL_RCC_OscConfig+0x538>)
 8002fd8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002fda:	4a27      	ldr	r2, [pc, #156]	; (8003078 <HAL_RCC_OscConfig+0x538>)
 8002fdc:	f023 0304 	bic.w	r3, r3, #4
 8002fe0:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8002fe2:	687b      	ldr	r3, [r7, #4]
 8002fe4:	689b      	ldr	r3, [r3, #8]
 8002fe6:	2b00      	cmp	r3, #0
 8002fe8:	d015      	beq.n	8003016 <HAL_RCC_OscConfig+0x4d6>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002fea:	f7fe f905 	bl	80011f8 <HAL_GetTick>
 8002fee:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8002ff0:	e00a      	b.n	8003008 <HAL_RCC_OscConfig+0x4c8>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002ff2:	f7fe f901 	bl	80011f8 <HAL_GetTick>
 8002ff6:	4602      	mov	r2, r0
 8002ff8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002ffa:	1ad3      	subs	r3, r2, r3
 8002ffc:	f241 3288 	movw	r2, #5000	; 0x1388
 8003000:	4293      	cmp	r3, r2
 8003002:	d901      	bls.n	8003008 <HAL_RCC_OscConfig+0x4c8>
        {
          return HAL_TIMEOUT;
 8003004:	2303      	movs	r3, #3
 8003006:	e11f      	b.n	8003248 <HAL_RCC_OscConfig+0x708>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8003008:	4b1b      	ldr	r3, [pc, #108]	; (8003078 <HAL_RCC_OscConfig+0x538>)
 800300a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800300c:	f003 0302 	and.w	r3, r3, #2
 8003010:	2b00      	cmp	r3, #0
 8003012:	d0ee      	beq.n	8002ff2 <HAL_RCC_OscConfig+0x4b2>
 8003014:	e014      	b.n	8003040 <HAL_RCC_OscConfig+0x500>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003016:	f7fe f8ef 	bl	80011f8 <HAL_GetTick>
 800301a:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is disabled */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 800301c:	e00a      	b.n	8003034 <HAL_RCC_OscConfig+0x4f4>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800301e:	f7fe f8eb 	bl	80011f8 <HAL_GetTick>
 8003022:	4602      	mov	r2, r0
 8003024:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003026:	1ad3      	subs	r3, r2, r3
 8003028:	f241 3288 	movw	r2, #5000	; 0x1388
 800302c:	4293      	cmp	r3, r2
 800302e:	d901      	bls.n	8003034 <HAL_RCC_OscConfig+0x4f4>
        {
          return HAL_TIMEOUT;
 8003030:	2303      	movs	r3, #3
 8003032:	e109      	b.n	8003248 <HAL_RCC_OscConfig+0x708>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8003034:	4b10      	ldr	r3, [pc, #64]	; (8003078 <HAL_RCC_OscConfig+0x538>)
 8003036:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003038:	f003 0302 	and.w	r3, r3, #2
 800303c:	2b00      	cmp	r3, #0
 800303e:	d1ee      	bne.n	800301e <HAL_RCC_OscConfig+0x4de>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003040:	687b      	ldr	r3, [r7, #4]
 8003042:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003044:	2b00      	cmp	r3, #0
 8003046:	f000 80fe 	beq.w	8003246 <HAL_RCC_OscConfig+0x706>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL1)
 800304a:	4b0b      	ldr	r3, [pc, #44]	; (8003078 <HAL_RCC_OscConfig+0x538>)
 800304c:	691b      	ldr	r3, [r3, #16]
 800304e:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8003052:	2b18      	cmp	r3, #24
 8003054:	f000 80b9 	beq.w	80031ca <HAL_RCC_OscConfig+0x68a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003058:	687b      	ldr	r3, [r7, #4]
 800305a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800305c:	2b02      	cmp	r3, #2
 800305e:	f040 809a 	bne.w	8003196 <HAL_RCC_OscConfig+0x656>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
        assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003062:	4b05      	ldr	r3, [pc, #20]	; (8003078 <HAL_RCC_OscConfig+0x538>)
 8003064:	681b      	ldr	r3, [r3, #0]
 8003066:	4a04      	ldr	r2, [pc, #16]	; (8003078 <HAL_RCC_OscConfig+0x538>)
 8003068:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800306c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800306e:	f7fe f8c3 	bl	80011f8 <HAL_GetTick>
 8003072:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8003074:	e00d      	b.n	8003092 <HAL_RCC_OscConfig+0x552>
 8003076:	bf00      	nop
 8003078:	58024400 	.word	0x58024400
 800307c:	58024800 	.word	0x58024800
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003080:	f7fe f8ba 	bl	80011f8 <HAL_GetTick>
 8003084:	4602      	mov	r2, r0
 8003086:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003088:	1ad3      	subs	r3, r2, r3
 800308a:	2b02      	cmp	r3, #2
 800308c:	d901      	bls.n	8003092 <HAL_RCC_OscConfig+0x552>
          {
            return HAL_TIMEOUT;
 800308e:	2303      	movs	r3, #3
 8003090:	e0da      	b.n	8003248 <HAL_RCC_OscConfig+0x708>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8003092:	4b6f      	ldr	r3, [pc, #444]	; (8003250 <HAL_RCC_OscConfig+0x710>)
 8003094:	681b      	ldr	r3, [r3, #0]
 8003096:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800309a:	2b00      	cmp	r3, #0
 800309c:	d1f0      	bne.n	8003080 <HAL_RCC_OscConfig+0x540>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800309e:	4b6c      	ldr	r3, [pc, #432]	; (8003250 <HAL_RCC_OscConfig+0x710>)
 80030a0:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80030a2:	4b6c      	ldr	r3, [pc, #432]	; (8003254 <HAL_RCC_OscConfig+0x714>)
 80030a4:	4013      	ands	r3, r2
 80030a6:	687a      	ldr	r2, [r7, #4]
 80030a8:	6a91      	ldr	r1, [r2, #40]	; 0x28
 80030aa:	687a      	ldr	r2, [r7, #4]
 80030ac:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 80030ae:	0112      	lsls	r2, r2, #4
 80030b0:	430a      	orrs	r2, r1
 80030b2:	4967      	ldr	r1, [pc, #412]	; (8003250 <HAL_RCC_OscConfig+0x710>)
 80030b4:	4313      	orrs	r3, r2
 80030b6:	628b      	str	r3, [r1, #40]	; 0x28
 80030b8:	687b      	ldr	r3, [r7, #4]
 80030ba:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80030bc:	3b01      	subs	r3, #1
 80030be:	f3c3 0208 	ubfx	r2, r3, #0, #9
 80030c2:	687b      	ldr	r3, [r7, #4]
 80030c4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80030c6:	3b01      	subs	r3, #1
 80030c8:	025b      	lsls	r3, r3, #9
 80030ca:	b29b      	uxth	r3, r3
 80030cc:	431a      	orrs	r2, r3
 80030ce:	687b      	ldr	r3, [r7, #4]
 80030d0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80030d2:	3b01      	subs	r3, #1
 80030d4:	041b      	lsls	r3, r3, #16
 80030d6:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 80030da:	431a      	orrs	r2, r3
 80030dc:	687b      	ldr	r3, [r7, #4]
 80030de:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80030e0:	3b01      	subs	r3, #1
 80030e2:	061b      	lsls	r3, r3, #24
 80030e4:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 80030e8:	4959      	ldr	r1, [pc, #356]	; (8003250 <HAL_RCC_OscConfig+0x710>)
 80030ea:	4313      	orrs	r3, r2
 80030ec:	630b      	str	r3, [r1, #48]	; 0x30
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

         /* Disable PLLFRACN . */
         __HAL_RCC_PLLFRACN_DISABLE();
 80030ee:	4b58      	ldr	r3, [pc, #352]	; (8003250 <HAL_RCC_OscConfig+0x710>)
 80030f0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80030f2:	4a57      	ldr	r2, [pc, #348]	; (8003250 <HAL_RCC_OscConfig+0x710>)
 80030f4:	f023 0301 	bic.w	r3, r3, #1
 80030f8:	62d3      	str	r3, [r2, #44]	; 0x2c

         /* Configure PLL PLL1FRACN */
         __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 80030fa:	4b55      	ldr	r3, [pc, #340]	; (8003250 <HAL_RCC_OscConfig+0x710>)
 80030fc:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80030fe:	4b56      	ldr	r3, [pc, #344]	; (8003258 <HAL_RCC_OscConfig+0x718>)
 8003100:	4013      	ands	r3, r2
 8003102:	687a      	ldr	r2, [r7, #4]
 8003104:	6c92      	ldr	r2, [r2, #72]	; 0x48
 8003106:	00d2      	lsls	r2, r2, #3
 8003108:	4951      	ldr	r1, [pc, #324]	; (8003250 <HAL_RCC_OscConfig+0x710>)
 800310a:	4313      	orrs	r3, r2
 800310c:	634b      	str	r3, [r1, #52]	; 0x34

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL_VCIRANGE(RCC_OscInitStruct->PLL.PLLRGE) ;
 800310e:	4b50      	ldr	r3, [pc, #320]	; (8003250 <HAL_RCC_OscConfig+0x710>)
 8003110:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003112:	f023 020c 	bic.w	r2, r3, #12
 8003116:	687b      	ldr	r3, [r7, #4]
 8003118:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800311a:	494d      	ldr	r1, [pc, #308]	; (8003250 <HAL_RCC_OscConfig+0x710>)
 800311c:	4313      	orrs	r3, r2
 800311e:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Select PLL1 output frequency range : VCO */
        __HAL_RCC_PLL_VCORANGE(RCC_OscInitStruct->PLL.PLLVCOSEL) ;
 8003120:	4b4b      	ldr	r3, [pc, #300]	; (8003250 <HAL_RCC_OscConfig+0x710>)
 8003122:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003124:	f023 0202 	bic.w	r2, r3, #2
 8003128:	687b      	ldr	r3, [r7, #4]
 800312a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800312c:	4948      	ldr	r1, [pc, #288]	; (8003250 <HAL_RCC_OscConfig+0x710>)
 800312e:	4313      	orrs	r3, r2
 8003130:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 8003132:	4b47      	ldr	r3, [pc, #284]	; (8003250 <HAL_RCC_OscConfig+0x710>)
 8003134:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003136:	4a46      	ldr	r2, [pc, #280]	; (8003250 <HAL_RCC_OscConfig+0x710>)
 8003138:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800313c:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1Q Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800313e:	4b44      	ldr	r3, [pc, #272]	; (8003250 <HAL_RCC_OscConfig+0x710>)
 8003140:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003142:	4a43      	ldr	r2, [pc, #268]	; (8003250 <HAL_RCC_OscConfig+0x710>)
 8003144:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003148:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1R  Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 800314a:	4b41      	ldr	r3, [pc, #260]	; (8003250 <HAL_RCC_OscConfig+0x710>)
 800314c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800314e:	4a40      	ldr	r2, [pc, #256]	; (8003250 <HAL_RCC_OscConfig+0x710>)
 8003150:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003154:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1FRACN . */
         __HAL_RCC_PLLFRACN_ENABLE();
 8003156:	4b3e      	ldr	r3, [pc, #248]	; (8003250 <HAL_RCC_OscConfig+0x710>)
 8003158:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800315a:	4a3d      	ldr	r2, [pc, #244]	; (8003250 <HAL_RCC_OscConfig+0x710>)
 800315c:	f043 0301 	orr.w	r3, r3, #1
 8003160:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003162:	4b3b      	ldr	r3, [pc, #236]	; (8003250 <HAL_RCC_OscConfig+0x710>)
 8003164:	681b      	ldr	r3, [r3, #0]
 8003166:	4a3a      	ldr	r2, [pc, #232]	; (8003250 <HAL_RCC_OscConfig+0x710>)
 8003168:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800316c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800316e:	f7fe f843 	bl	80011f8 <HAL_GetTick>
 8003172:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8003174:	e008      	b.n	8003188 <HAL_RCC_OscConfig+0x648>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003176:	f7fe f83f 	bl	80011f8 <HAL_GetTick>
 800317a:	4602      	mov	r2, r0
 800317c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800317e:	1ad3      	subs	r3, r2, r3
 8003180:	2b02      	cmp	r3, #2
 8003182:	d901      	bls.n	8003188 <HAL_RCC_OscConfig+0x648>
          {
            return HAL_TIMEOUT;
 8003184:	2303      	movs	r3, #3
 8003186:	e05f      	b.n	8003248 <HAL_RCC_OscConfig+0x708>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8003188:	4b31      	ldr	r3, [pc, #196]	; (8003250 <HAL_RCC_OscConfig+0x710>)
 800318a:	681b      	ldr	r3, [r3, #0]
 800318c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003190:	2b00      	cmp	r3, #0
 8003192:	d0f0      	beq.n	8003176 <HAL_RCC_OscConfig+0x636>
 8003194:	e057      	b.n	8003246 <HAL_RCC_OscConfig+0x706>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003196:	4b2e      	ldr	r3, [pc, #184]	; (8003250 <HAL_RCC_OscConfig+0x710>)
 8003198:	681b      	ldr	r3, [r3, #0]
 800319a:	4a2d      	ldr	r2, [pc, #180]	; (8003250 <HAL_RCC_OscConfig+0x710>)
 800319c:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80031a0:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80031a2:	f7fe f829 	bl	80011f8 <HAL_GetTick>
 80031a6:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 80031a8:	e008      	b.n	80031bc <HAL_RCC_OscConfig+0x67c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80031aa:	f7fe f825 	bl	80011f8 <HAL_GetTick>
 80031ae:	4602      	mov	r2, r0
 80031b0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80031b2:	1ad3      	subs	r3, r2, r3
 80031b4:	2b02      	cmp	r3, #2
 80031b6:	d901      	bls.n	80031bc <HAL_RCC_OscConfig+0x67c>
          {
            return HAL_TIMEOUT;
 80031b8:	2303      	movs	r3, #3
 80031ba:	e045      	b.n	8003248 <HAL_RCC_OscConfig+0x708>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 80031bc:	4b24      	ldr	r3, [pc, #144]	; (8003250 <HAL_RCC_OscConfig+0x710>)
 80031be:	681b      	ldr	r3, [r3, #0]
 80031c0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80031c4:	2b00      	cmp	r3, #0
 80031c6:	d1f0      	bne.n	80031aa <HAL_RCC_OscConfig+0x66a>
 80031c8:	e03d      	b.n	8003246 <HAL_RCC_OscConfig+0x706>
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLLCKSELR;
 80031ca:	4b21      	ldr	r3, [pc, #132]	; (8003250 <HAL_RCC_OscConfig+0x710>)
 80031cc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80031ce:	613b      	str	r3, [r7, #16]
      temp2_pllckcfg = RCC->PLL1DIVR;
 80031d0:	4b1f      	ldr	r3, [pc, #124]	; (8003250 <HAL_RCC_OscConfig+0x710>)
 80031d2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80031d4:	60fb      	str	r3, [r7, #12]
      if(((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80031d6:	687b      	ldr	r3, [r7, #4]
 80031d8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80031da:	2b01      	cmp	r3, #1
 80031dc:	d031      	beq.n	8003242 <HAL_RCC_OscConfig+0x702>
	 (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80031de:	693b      	ldr	r3, [r7, #16]
 80031e0:	f003 0203 	and.w	r2, r3, #3
 80031e4:	687b      	ldr	r3, [r7, #4]
 80031e6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
      if(((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80031e8:	429a      	cmp	r2, r3
 80031ea:	d12a      	bne.n	8003242 <HAL_RCC_OscConfig+0x702>
         ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 80031ec:	693b      	ldr	r3, [r7, #16]
 80031ee:	091b      	lsrs	r3, r3, #4
 80031f0:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 80031f4:	687b      	ldr	r3, [r7, #4]
 80031f6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
	 (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80031f8:	429a      	cmp	r2, r3
 80031fa:	d122      	bne.n	8003242 <HAL_RCC_OscConfig+0x702>
         (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 80031fc:	68fb      	ldr	r3, [r7, #12]
 80031fe:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8003202:	687b      	ldr	r3, [r7, #4]
 8003204:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003206:	3b01      	subs	r3, #1
         ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8003208:	429a      	cmp	r2, r3
 800320a:	d11a      	bne.n	8003242 <HAL_RCC_OscConfig+0x702>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 800320c:	68fb      	ldr	r3, [r7, #12]
 800320e:	0a5b      	lsrs	r3, r3, #9
 8003210:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8003214:	687b      	ldr	r3, [r7, #4]
 8003216:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003218:	3b01      	subs	r3, #1
         (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 800321a:	429a      	cmp	r2, r3
 800321c:	d111      	bne.n	8003242 <HAL_RCC_OscConfig+0x702>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 800321e:	68fb      	ldr	r3, [r7, #12]
 8003220:	0c1b      	lsrs	r3, r3, #16
 8003222:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8003226:	687b      	ldr	r3, [r7, #4]
 8003228:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800322a:	3b01      	subs	r3, #1
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 800322c:	429a      	cmp	r2, r3
 800322e:	d108      	bne.n	8003242 <HAL_RCC_OscConfig+0x702>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_R1) >> RCC_PLL1DIVR_R1_Pos) != (RCC_OscInitStruct->PLL.PLLR - 1U)))
 8003230:	68fb      	ldr	r3, [r7, #12]
 8003232:	0e1b      	lsrs	r3, r3, #24
 8003234:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8003238:	687b      	ldr	r3, [r7, #4]
 800323a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800323c:	3b01      	subs	r3, #1
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 800323e:	429a      	cmp	r2, r3
 8003240:	d001      	beq.n	8003246 <HAL_RCC_OscConfig+0x706>
      {
        return HAL_ERROR;
 8003242:	2301      	movs	r3, #1
 8003244:	e000      	b.n	8003248 <HAL_RCC_OscConfig+0x708>
      }
    }
  }
  return HAL_OK;
 8003246:	2300      	movs	r3, #0
}
 8003248:	4618      	mov	r0, r3
 800324a:	3730      	adds	r7, #48	; 0x30
 800324c:	46bd      	mov	sp, r7
 800324e:	bd80      	pop	{r7, pc}
 8003250:	58024400 	.word	0x58024400
 8003254:	fffffc0c 	.word	0xfffffc0c
 8003258:	ffff0007 	.word	0xffff0007

0800325c <HAL_RCC_ClockConfig>:
  *         D1CPRE[3:0] bits to ensure that  Domain1 core clock not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800325c:	b580      	push	{r7, lr}
 800325e:	b086      	sub	sp, #24
 8003260:	af00      	add	r7, sp, #0
 8003262:	6078      	str	r0, [r7, #4]
 8003264:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef halstatus;
  uint32_t tickstart;
  uint32_t common_system_clock;

   /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8003266:	687b      	ldr	r3, [r7, #4]
 8003268:	2b00      	cmp	r3, #0
 800326a:	d101      	bne.n	8003270 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800326c:	2301      	movs	r3, #1
 800326e:	e19c      	b.n	80035aa <HAL_RCC_ClockConfig+0x34e>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8003270:	4b8a      	ldr	r3, [pc, #552]	; (800349c <HAL_RCC_ClockConfig+0x240>)
 8003272:	681b      	ldr	r3, [r3, #0]
 8003274:	f003 030f 	and.w	r3, r3, #15
 8003278:	683a      	ldr	r2, [r7, #0]
 800327a:	429a      	cmp	r2, r3
 800327c:	d910      	bls.n	80032a0 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800327e:	4b87      	ldr	r3, [pc, #540]	; (800349c <HAL_RCC_ClockConfig+0x240>)
 8003280:	681b      	ldr	r3, [r3, #0]
 8003282:	f023 020f 	bic.w	r2, r3, #15
 8003286:	4985      	ldr	r1, [pc, #532]	; (800349c <HAL_RCC_ClockConfig+0x240>)
 8003288:	683b      	ldr	r3, [r7, #0]
 800328a:	4313      	orrs	r3, r2
 800328c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800328e:	4b83      	ldr	r3, [pc, #524]	; (800349c <HAL_RCC_ClockConfig+0x240>)
 8003290:	681b      	ldr	r3, [r3, #0]
 8003292:	f003 030f 	and.w	r3, r3, #15
 8003296:	683a      	ldr	r2, [r7, #0]
 8003298:	429a      	cmp	r2, r3
 800329a:	d001      	beq.n	80032a0 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 800329c:	2301      	movs	r3, #1
 800329e:	e184      	b.n	80035aa <HAL_RCC_ClockConfig+0x34e>

  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- D1PCLK1/CDPCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 80032a0:	687b      	ldr	r3, [r7, #4]
 80032a2:	681b      	ldr	r3, [r3, #0]
 80032a4:	f003 0304 	and.w	r3, r3, #4
 80032a8:	2b00      	cmp	r3, #0
 80032aa:	d010      	beq.n	80032ce <HAL_RCC_ClockConfig+0x72>
  {
#if defined (RCC_D1CFGR_D1PPRE)
    if((RCC_ClkInitStruct->APB3CLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 80032ac:	687b      	ldr	r3, [r7, #4]
 80032ae:	691a      	ldr	r2, [r3, #16]
 80032b0:	4b7b      	ldr	r3, [pc, #492]	; (80034a0 <HAL_RCC_ClockConfig+0x244>)
 80032b2:	699b      	ldr	r3, [r3, #24]
 80032b4:	f003 0370 	and.w	r3, r3, #112	; 0x70
 80032b8:	429a      	cmp	r2, r3
 80032ba:	d908      	bls.n	80032ce <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 80032bc:	4b78      	ldr	r3, [pc, #480]	; (80034a0 <HAL_RCC_ClockConfig+0x244>)
 80032be:	699b      	ldr	r3, [r3, #24]
 80032c0:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 80032c4:	687b      	ldr	r3, [r7, #4]
 80032c6:	691b      	ldr	r3, [r3, #16]
 80032c8:	4975      	ldr	r1, [pc, #468]	; (80034a0 <HAL_RCC_ClockConfig+0x244>)
 80032ca:	4313      	orrs	r3, r2
 80032cc:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80032ce:	687b      	ldr	r3, [r7, #4]
 80032d0:	681b      	ldr	r3, [r3, #0]
 80032d2:	f003 0308 	and.w	r3, r3, #8
 80032d6:	2b00      	cmp	r3, #0
 80032d8:	d010      	beq.n	80032fc <HAL_RCC_ClockConfig+0xa0>
  {
#if defined (RCC_D2CFGR_D2PPRE1)
    if((RCC_ClkInitStruct->APB1CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 80032da:	687b      	ldr	r3, [r7, #4]
 80032dc:	695a      	ldr	r2, [r3, #20]
 80032de:	4b70      	ldr	r3, [pc, #448]	; (80034a0 <HAL_RCC_ClockConfig+0x244>)
 80032e0:	69db      	ldr	r3, [r3, #28]
 80032e2:	f003 0370 	and.w	r3, r3, #112	; 0x70
 80032e6:	429a      	cmp	r2, r3
 80032e8:	d908      	bls.n	80032fc <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 80032ea:	4b6d      	ldr	r3, [pc, #436]	; (80034a0 <HAL_RCC_ClockConfig+0x244>)
 80032ec:	69db      	ldr	r3, [r3, #28]
 80032ee:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 80032f2:	687b      	ldr	r3, [r7, #4]
 80032f4:	695b      	ldr	r3, [r3, #20]
 80032f6:	496a      	ldr	r1, [pc, #424]	; (80034a0 <HAL_RCC_ClockConfig+0x244>)
 80032f8:	4313      	orrs	r3, r2
 80032fa:	61cb      	str	r3, [r1, #28]
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
  }
#endif
    }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80032fc:	687b      	ldr	r3, [r7, #4]
 80032fe:	681b      	ldr	r3, [r3, #0]
 8003300:	f003 0310 	and.w	r3, r3, #16
 8003304:	2b00      	cmp	r3, #0
 8003306:	d010      	beq.n	800332a <HAL_RCC_ClockConfig+0xce>
  {
#if defined(RCC_D2CFGR_D2PPRE2)
    if((RCC_ClkInitStruct->APB2CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8003308:	687b      	ldr	r3, [r7, #4]
 800330a:	699a      	ldr	r2, [r3, #24]
 800330c:	4b64      	ldr	r3, [pc, #400]	; (80034a0 <HAL_RCC_ClockConfig+0x244>)
 800330e:	69db      	ldr	r3, [r3, #28]
 8003310:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8003314:	429a      	cmp	r2, r3
 8003316:	d908      	bls.n	800332a <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8003318:	4b61      	ldr	r3, [pc, #388]	; (80034a0 <HAL_RCC_ClockConfig+0x244>)
 800331a:	69db      	ldr	r3, [r3, #28]
 800331c:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8003320:	687b      	ldr	r3, [r7, #4]
 8003322:	699b      	ldr	r3, [r3, #24]
 8003324:	495e      	ldr	r1, [pc, #376]	; (80034a0 <HAL_RCC_ClockConfig+0x244>)
 8003326:	4313      	orrs	r3, r2
 8003328:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 800332a:	687b      	ldr	r3, [r7, #4]
 800332c:	681b      	ldr	r3, [r3, #0]
 800332e:	f003 0320 	and.w	r3, r3, #32
 8003332:	2b00      	cmp	r3, #0
 8003334:	d010      	beq.n	8003358 <HAL_RCC_ClockConfig+0xfc>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if((RCC_ClkInitStruct->APB4CLKDivider) > (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 8003336:	687b      	ldr	r3, [r7, #4]
 8003338:	69da      	ldr	r2, [r3, #28]
 800333a:	4b59      	ldr	r3, [pc, #356]	; (80034a0 <HAL_RCC_ClockConfig+0x244>)
 800333c:	6a1b      	ldr	r3, [r3, #32]
 800333e:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8003342:	429a      	cmp	r2, r3
 8003344:	d908      	bls.n	8003358 <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider) );
 8003346:	4b56      	ldr	r3, [pc, #344]	; (80034a0 <HAL_RCC_ClockConfig+0x244>)
 8003348:	6a1b      	ldr	r3, [r3, #32]
 800334a:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 800334e:	687b      	ldr	r3, [r7, #4]
 8003350:	69db      	ldr	r3, [r3, #28]
 8003352:	4953      	ldr	r1, [pc, #332]	; (80034a0 <HAL_RCC_ClockConfig+0x244>)
 8003354:	4313      	orrs	r3, r2
 8003356:	620b      	str	r3, [r1, #32]
    }
#endif
  }

   /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003358:	687b      	ldr	r3, [r7, #4]
 800335a:	681b      	ldr	r3, [r3, #0]
 800335c:	f003 0302 	and.w	r3, r3, #2
 8003360:	2b00      	cmp	r3, #0
 8003362:	d010      	beq.n	8003386 <HAL_RCC_ClockConfig+0x12a>
  {
#if defined (RCC_D1CFGR_HPRE)
    if((RCC_ClkInitStruct->AHBCLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 8003364:	687b      	ldr	r3, [r7, #4]
 8003366:	68da      	ldr	r2, [r3, #12]
 8003368:	4b4d      	ldr	r3, [pc, #308]	; (80034a0 <HAL_RCC_ClockConfig+0x244>)
 800336a:	699b      	ldr	r3, [r3, #24]
 800336c:	f003 030f 	and.w	r3, r3, #15
 8003370:	429a      	cmp	r2, r3
 8003372:	d908      	bls.n	8003386 <HAL_RCC_ClockConfig+0x12a>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003374:	4b4a      	ldr	r3, [pc, #296]	; (80034a0 <HAL_RCC_ClockConfig+0x244>)
 8003376:	699b      	ldr	r3, [r3, #24]
 8003378:	f023 020f 	bic.w	r2, r3, #15
 800337c:	687b      	ldr	r3, [r7, #4]
 800337e:	68db      	ldr	r3, [r3, #12]
 8003380:	4947      	ldr	r1, [pc, #284]	; (80034a0 <HAL_RCC_ClockConfig+0x244>)
 8003382:	4313      	orrs	r3, r2
 8003384:	618b      	str	r3, [r1, #24]
    }
#endif
  }

    /*------------------------- SYSCLK Configuration -------------------------*/
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003386:	687b      	ldr	r3, [r7, #4]
 8003388:	681b      	ldr	r3, [r3, #0]
 800338a:	f003 0301 	and.w	r3, r3, #1
 800338e:	2b00      	cmp	r3, #0
 8003390:	d055      	beq.n	800343e <HAL_RCC_ClockConfig+0x1e2>
    {
      assert_param(IS_RCC_SYSCLK(RCC_ClkInitStruct->SYSCLKDivider));
      assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
#if defined(RCC_D1CFGR_D1CPRE)
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1CPRE, RCC_ClkInitStruct->SYSCLKDivider);
 8003392:	4b43      	ldr	r3, [pc, #268]	; (80034a0 <HAL_RCC_ClockConfig+0x244>)
 8003394:	699b      	ldr	r3, [r3, #24]
 8003396:	f423 6270 	bic.w	r2, r3, #3840	; 0xf00
 800339a:	687b      	ldr	r3, [r7, #4]
 800339c:	689b      	ldr	r3, [r3, #8]
 800339e:	4940      	ldr	r1, [pc, #256]	; (80034a0 <HAL_RCC_ClockConfig+0x244>)
 80033a0:	4313      	orrs	r3, r2
 80033a2:	618b      	str	r3, [r1, #24]
#else
      MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDCPRE, RCC_ClkInitStruct->SYSCLKDivider);
#endif
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80033a4:	687b      	ldr	r3, [r7, #4]
 80033a6:	685b      	ldr	r3, [r3, #4]
 80033a8:	2b02      	cmp	r3, #2
 80033aa:	d107      	bne.n	80033bc <HAL_RCC_ClockConfig+0x160>
      {
        /* Check the HSE ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 80033ac:	4b3c      	ldr	r3, [pc, #240]	; (80034a0 <HAL_RCC_ClockConfig+0x244>)
 80033ae:	681b      	ldr	r3, [r3, #0]
 80033b0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80033b4:	2b00      	cmp	r3, #0
 80033b6:	d121      	bne.n	80033fc <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 80033b8:	2301      	movs	r3, #1
 80033ba:	e0f6      	b.n	80035aa <HAL_RCC_ClockConfig+0x34e>
        }
      }
      /* PLL is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80033bc:	687b      	ldr	r3, [r7, #4]
 80033be:	685b      	ldr	r3, [r3, #4]
 80033c0:	2b03      	cmp	r3, #3
 80033c2:	d107      	bne.n	80033d4 <HAL_RCC_ClockConfig+0x178>
      {
        /* Check the PLL ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 80033c4:	4b36      	ldr	r3, [pc, #216]	; (80034a0 <HAL_RCC_ClockConfig+0x244>)
 80033c6:	681b      	ldr	r3, [r3, #0]
 80033c8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80033cc:	2b00      	cmp	r3, #0
 80033ce:	d115      	bne.n	80033fc <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 80033d0:	2301      	movs	r3, #1
 80033d2:	e0ea      	b.n	80035aa <HAL_RCC_ClockConfig+0x34e>
        }
      }
      /* CSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 80033d4:	687b      	ldr	r3, [r7, #4]
 80033d6:	685b      	ldr	r3, [r3, #4]
 80033d8:	2b01      	cmp	r3, #1
 80033da:	d107      	bne.n	80033ec <HAL_RCC_ClockConfig+0x190>
      {
        /* Check the PLL ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 80033dc:	4b30      	ldr	r3, [pc, #192]	; (80034a0 <HAL_RCC_ClockConfig+0x244>)
 80033de:	681b      	ldr	r3, [r3, #0]
 80033e0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80033e4:	2b00      	cmp	r3, #0
 80033e6:	d109      	bne.n	80033fc <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 80033e8:	2301      	movs	r3, #1
 80033ea:	e0de      	b.n	80035aa <HAL_RCC_ClockConfig+0x34e>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80033ec:	4b2c      	ldr	r3, [pc, #176]	; (80034a0 <HAL_RCC_ClockConfig+0x244>)
 80033ee:	681b      	ldr	r3, [r3, #0]
 80033f0:	f003 0304 	and.w	r3, r3, #4
 80033f4:	2b00      	cmp	r3, #0
 80033f6:	d101      	bne.n	80033fc <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 80033f8:	2301      	movs	r3, #1
 80033fa:	e0d6      	b.n	80035aa <HAL_RCC_ClockConfig+0x34e>
        }
      }
      MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 80033fc:	4b28      	ldr	r3, [pc, #160]	; (80034a0 <HAL_RCC_ClockConfig+0x244>)
 80033fe:	691b      	ldr	r3, [r3, #16]
 8003400:	f023 0207 	bic.w	r2, r3, #7
 8003404:	687b      	ldr	r3, [r7, #4]
 8003406:	685b      	ldr	r3, [r3, #4]
 8003408:	4925      	ldr	r1, [pc, #148]	; (80034a0 <HAL_RCC_ClockConfig+0x244>)
 800340a:	4313      	orrs	r3, r2
 800340c:	610b      	str	r3, [r1, #16]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800340e:	f7fd fef3 	bl	80011f8 <HAL_GetTick>
 8003412:	6178      	str	r0, [r7, #20]

        while (__HAL_RCC_GET_SYSCLK_SOURCE() !=  (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003414:	e00a      	b.n	800342c <HAL_RCC_ClockConfig+0x1d0>
        {
          if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003416:	f7fd feef 	bl	80011f8 <HAL_GetTick>
 800341a:	4602      	mov	r2, r0
 800341c:	697b      	ldr	r3, [r7, #20]
 800341e:	1ad3      	subs	r3, r2, r3
 8003420:	f241 3288 	movw	r2, #5000	; 0x1388
 8003424:	4293      	cmp	r3, r2
 8003426:	d901      	bls.n	800342c <HAL_RCC_ClockConfig+0x1d0>
          {
            return HAL_TIMEOUT;
 8003428:	2303      	movs	r3, #3
 800342a:	e0be      	b.n	80035aa <HAL_RCC_ClockConfig+0x34e>
        while (__HAL_RCC_GET_SYSCLK_SOURCE() !=  (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800342c:	4b1c      	ldr	r3, [pc, #112]	; (80034a0 <HAL_RCC_ClockConfig+0x244>)
 800342e:	691b      	ldr	r3, [r3, #16]
 8003430:	f003 0238 	and.w	r2, r3, #56	; 0x38
 8003434:	687b      	ldr	r3, [r7, #4]
 8003436:	685b      	ldr	r3, [r3, #4]
 8003438:	00db      	lsls	r3, r3, #3
 800343a:	429a      	cmp	r2, r3
 800343c:	d1eb      	bne.n	8003416 <HAL_RCC_ClockConfig+0x1ba>

    }

    /* Decreasing the BUS frequency divider */
   /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800343e:	687b      	ldr	r3, [r7, #4]
 8003440:	681b      	ldr	r3, [r3, #0]
 8003442:	f003 0302 	and.w	r3, r3, #2
 8003446:	2b00      	cmp	r3, #0
 8003448:	d010      	beq.n	800346c <HAL_RCC_ClockConfig+0x210>
  {
#if defined(RCC_D1CFGR_HPRE)
    if((RCC_ClkInitStruct->AHBCLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 800344a:	687b      	ldr	r3, [r7, #4]
 800344c:	68da      	ldr	r2, [r3, #12]
 800344e:	4b14      	ldr	r3, [pc, #80]	; (80034a0 <HAL_RCC_ClockConfig+0x244>)
 8003450:	699b      	ldr	r3, [r3, #24]
 8003452:	f003 030f 	and.w	r3, r3, #15
 8003456:	429a      	cmp	r2, r3
 8003458:	d208      	bcs.n	800346c <HAL_RCC_ClockConfig+0x210>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800345a:	4b11      	ldr	r3, [pc, #68]	; (80034a0 <HAL_RCC_ClockConfig+0x244>)
 800345c:	699b      	ldr	r3, [r3, #24]
 800345e:	f023 020f 	bic.w	r2, r3, #15
 8003462:	687b      	ldr	r3, [r7, #4]
 8003464:	68db      	ldr	r3, [r3, #12]
 8003466:	490e      	ldr	r1, [pc, #56]	; (80034a0 <HAL_RCC_ClockConfig+0x244>)
 8003468:	4313      	orrs	r3, r2
 800346a:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 800346c:	4b0b      	ldr	r3, [pc, #44]	; (800349c <HAL_RCC_ClockConfig+0x240>)
 800346e:	681b      	ldr	r3, [r3, #0]
 8003470:	f003 030f 	and.w	r3, r3, #15
 8003474:	683a      	ldr	r2, [r7, #0]
 8003476:	429a      	cmp	r2, r3
 8003478:	d214      	bcs.n	80034a4 <HAL_RCC_ClockConfig+0x248>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800347a:	4b08      	ldr	r3, [pc, #32]	; (800349c <HAL_RCC_ClockConfig+0x240>)
 800347c:	681b      	ldr	r3, [r3, #0]
 800347e:	f023 020f 	bic.w	r2, r3, #15
 8003482:	4906      	ldr	r1, [pc, #24]	; (800349c <HAL_RCC_ClockConfig+0x240>)
 8003484:	683b      	ldr	r3, [r7, #0]
 8003486:	4313      	orrs	r3, r2
 8003488:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800348a:	4b04      	ldr	r3, [pc, #16]	; (800349c <HAL_RCC_ClockConfig+0x240>)
 800348c:	681b      	ldr	r3, [r3, #0]
 800348e:	f003 030f 	and.w	r3, r3, #15
 8003492:	683a      	ldr	r2, [r7, #0]
 8003494:	429a      	cmp	r2, r3
 8003496:	d005      	beq.n	80034a4 <HAL_RCC_ClockConfig+0x248>
    {
      return HAL_ERROR;
 8003498:	2301      	movs	r3, #1
 800349a:	e086      	b.n	80035aa <HAL_RCC_ClockConfig+0x34e>
 800349c:	52002000 	.word	0x52002000
 80034a0:	58024400 	.word	0x58024400
    }
 }

  /*-------------------------- D1PCLK1/CDPCLK Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 80034a4:	687b      	ldr	r3, [r7, #4]
 80034a6:	681b      	ldr	r3, [r3, #0]
 80034a8:	f003 0304 	and.w	r3, r3, #4
 80034ac:	2b00      	cmp	r3, #0
 80034ae:	d010      	beq.n	80034d2 <HAL_RCC_ClockConfig+0x276>
 {
#if defined(RCC_D1CFGR_D1PPRE)
   if((RCC_ClkInitStruct->APB3CLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 80034b0:	687b      	ldr	r3, [r7, #4]
 80034b2:	691a      	ldr	r2, [r3, #16]
 80034b4:	4b3f      	ldr	r3, [pc, #252]	; (80035b4 <HAL_RCC_ClockConfig+0x358>)
 80034b6:	699b      	ldr	r3, [r3, #24]
 80034b8:	f003 0370 	and.w	r3, r3, #112	; 0x70
 80034bc:	429a      	cmp	r2, r3
 80034be:	d208      	bcs.n	80034d2 <HAL_RCC_ClockConfig+0x276>
   {
     assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
     MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 80034c0:	4b3c      	ldr	r3, [pc, #240]	; (80035b4 <HAL_RCC_ClockConfig+0x358>)
 80034c2:	699b      	ldr	r3, [r3, #24]
 80034c4:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 80034c8:	687b      	ldr	r3, [r7, #4]
 80034ca:	691b      	ldr	r3, [r3, #16]
 80034cc:	4939      	ldr	r1, [pc, #228]	; (80035b4 <HAL_RCC_ClockConfig+0x358>)
 80034ce:	4313      	orrs	r3, r2
 80034d0:	618b      	str	r3, [r1, #24]
   }
#endif
 }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80034d2:	687b      	ldr	r3, [r7, #4]
 80034d4:	681b      	ldr	r3, [r3, #0]
 80034d6:	f003 0308 	and.w	r3, r3, #8
 80034da:	2b00      	cmp	r3, #0
 80034dc:	d010      	beq.n	8003500 <HAL_RCC_ClockConfig+0x2a4>
 {
#if defined(RCC_D2CFGR_D2PPRE1)
   if((RCC_ClkInitStruct->APB1CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 80034de:	687b      	ldr	r3, [r7, #4]
 80034e0:	695a      	ldr	r2, [r3, #20]
 80034e2:	4b34      	ldr	r3, [pc, #208]	; (80035b4 <HAL_RCC_ClockConfig+0x358>)
 80034e4:	69db      	ldr	r3, [r3, #28]
 80034e6:	f003 0370 	and.w	r3, r3, #112	; 0x70
 80034ea:	429a      	cmp	r2, r3
 80034ec:	d208      	bcs.n	8003500 <HAL_RCC_ClockConfig+0x2a4>
   {
     assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
     MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 80034ee:	4b31      	ldr	r3, [pc, #196]	; (80035b4 <HAL_RCC_ClockConfig+0x358>)
 80034f0:	69db      	ldr	r3, [r3, #28]
 80034f2:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 80034f6:	687b      	ldr	r3, [r7, #4]
 80034f8:	695b      	ldr	r3, [r3, #20]
 80034fa:	492e      	ldr	r1, [pc, #184]	; (80035b4 <HAL_RCC_ClockConfig+0x358>)
 80034fc:	4313      	orrs	r3, r2
 80034fe:	61cb      	str	r3, [r1, #28]
   }
#endif
 }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003500:	687b      	ldr	r3, [r7, #4]
 8003502:	681b      	ldr	r3, [r3, #0]
 8003504:	f003 0310 	and.w	r3, r3, #16
 8003508:	2b00      	cmp	r3, #0
 800350a:	d010      	beq.n	800352e <HAL_RCC_ClockConfig+0x2d2>
 {
#if defined (RCC_D2CFGR_D2PPRE2)
   if((RCC_ClkInitStruct->APB2CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 800350c:	687b      	ldr	r3, [r7, #4]
 800350e:	699a      	ldr	r2, [r3, #24]
 8003510:	4b28      	ldr	r3, [pc, #160]	; (80035b4 <HAL_RCC_ClockConfig+0x358>)
 8003512:	69db      	ldr	r3, [r3, #28]
 8003514:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8003518:	429a      	cmp	r2, r3
 800351a:	d208      	bcs.n	800352e <HAL_RCC_ClockConfig+0x2d2>
   {
     assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
     MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 800351c:	4b25      	ldr	r3, [pc, #148]	; (80035b4 <HAL_RCC_ClockConfig+0x358>)
 800351e:	69db      	ldr	r3, [r3, #28]
 8003520:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8003524:	687b      	ldr	r3, [r7, #4]
 8003526:	699b      	ldr	r3, [r3, #24]
 8003528:	4922      	ldr	r1, [pc, #136]	; (80035b4 <HAL_RCC_ClockConfig+0x358>)
 800352a:	4313      	orrs	r3, r2
 800352c:	61cb      	str	r3, [r1, #28]
   }
#endif
 }

  /*-------------------------- D3PCLK1/SRDPCLK1 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 800352e:	687b      	ldr	r3, [r7, #4]
 8003530:	681b      	ldr	r3, [r3, #0]
 8003532:	f003 0320 	and.w	r3, r3, #32
 8003536:	2b00      	cmp	r3, #0
 8003538:	d010      	beq.n	800355c <HAL_RCC_ClockConfig+0x300>
 {
#if defined(RCC_D3CFGR_D3PPRE)
   if((RCC_ClkInitStruct->APB4CLKDivider) < (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 800353a:	687b      	ldr	r3, [r7, #4]
 800353c:	69da      	ldr	r2, [r3, #28]
 800353e:	4b1d      	ldr	r3, [pc, #116]	; (80035b4 <HAL_RCC_ClockConfig+0x358>)
 8003540:	6a1b      	ldr	r3, [r3, #32]
 8003542:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8003546:	429a      	cmp	r2, r3
 8003548:	d208      	bcs.n	800355c <HAL_RCC_ClockConfig+0x300>
   {
     assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
     MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider) );
 800354a:	4b1a      	ldr	r3, [pc, #104]	; (80035b4 <HAL_RCC_ClockConfig+0x358>)
 800354c:	6a1b      	ldr	r3, [r3, #32]
 800354e:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8003552:	687b      	ldr	r3, [r7, #4]
 8003554:	69db      	ldr	r3, [r3, #28]
 8003556:	4917      	ldr	r1, [pc, #92]	; (80035b4 <HAL_RCC_ClockConfig+0x358>)
 8003558:	4313      	orrs	r3, r2
 800355a:	620b      	str	r3, [r1, #32]
#endif
 }

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 800355c:	f000 f834 	bl	80035c8 <HAL_RCC_GetSysClockFreq>
 8003560:	4602      	mov	r2, r0
 8003562:	4b14      	ldr	r3, [pc, #80]	; (80035b4 <HAL_RCC_ClockConfig+0x358>)
 8003564:	699b      	ldr	r3, [r3, #24]
 8003566:	0a1b      	lsrs	r3, r3, #8
 8003568:	f003 030f 	and.w	r3, r3, #15
 800356c:	4912      	ldr	r1, [pc, #72]	; (80035b8 <HAL_RCC_ClockConfig+0x35c>)
 800356e:	5ccb      	ldrb	r3, [r1, r3]
 8003570:	f003 031f 	and.w	r3, r3, #31
 8003574:	fa22 f303 	lsr.w	r3, r2, r3
 8003578:	613b      	str	r3, [r7, #16]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 800357a:	4b0e      	ldr	r3, [pc, #56]	; (80035b4 <HAL_RCC_ClockConfig+0x358>)
 800357c:	699b      	ldr	r3, [r3, #24]
 800357e:	f003 030f 	and.w	r3, r3, #15
 8003582:	4a0d      	ldr	r2, [pc, #52]	; (80035b8 <HAL_RCC_ClockConfig+0x35c>)
 8003584:	5cd3      	ldrb	r3, [r2, r3]
 8003586:	f003 031f 	and.w	r3, r3, #31
 800358a:	693a      	ldr	r2, [r7, #16]
 800358c:	fa22 f303 	lsr.w	r3, r2, r3
 8003590:	4a0a      	ldr	r2, [pc, #40]	; (80035bc <HAL_RCC_ClockConfig+0x360>)
 8003592:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8003594:	4a0a      	ldr	r2, [pc, #40]	; (80035c0 <HAL_RCC_ClockConfig+0x364>)
 8003596:	693b      	ldr	r3, [r7, #16]
 8003598:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Configure the source of time base considering new system clocks settings*/
  halstatus = HAL_InitTick (uwTickPrio);
 800359a:	4b0a      	ldr	r3, [pc, #40]	; (80035c4 <HAL_RCC_ClockConfig+0x368>)
 800359c:	681b      	ldr	r3, [r3, #0]
 800359e:	4618      	mov	r0, r3
 80035a0:	f7fd fde0 	bl	8001164 <HAL_InitTick>
 80035a4:	4603      	mov	r3, r0
 80035a6:	73fb      	strb	r3, [r7, #15]

  return halstatus;
 80035a8:	7bfb      	ldrb	r3, [r7, #15]
}
 80035aa:	4618      	mov	r0, r3
 80035ac:	3718      	adds	r7, #24
 80035ae:	46bd      	mov	sp, r7
 80035b0:	bd80      	pop	{r7, pc}
 80035b2:	bf00      	nop
 80035b4:	58024400 	.word	0x58024400
 80035b8:	08006be0 	.word	0x08006be0
 80035bc:	20000004 	.word	0x20000004
 80035c0:	20000000 	.word	0x20000000
 80035c4:	20000008 	.word	0x20000008

080035c8 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80035c8:	b480      	push	{r7}
 80035ca:	b089      	sub	sp, #36	; 0x24
 80035cc:	af00      	add	r7, sp, #0
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 80035ce:	4bb3      	ldr	r3, [pc, #716]	; (800389c <HAL_RCC_GetSysClockFreq+0x2d4>)
 80035d0:	691b      	ldr	r3, [r3, #16]
 80035d2:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80035d6:	2b18      	cmp	r3, #24
 80035d8:	f200 8155 	bhi.w	8003886 <HAL_RCC_GetSysClockFreq+0x2be>
 80035dc:	a201      	add	r2, pc, #4	; (adr r2, 80035e4 <HAL_RCC_GetSysClockFreq+0x1c>)
 80035de:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80035e2:	bf00      	nop
 80035e4:	08003649 	.word	0x08003649
 80035e8:	08003887 	.word	0x08003887
 80035ec:	08003887 	.word	0x08003887
 80035f0:	08003887 	.word	0x08003887
 80035f4:	08003887 	.word	0x08003887
 80035f8:	08003887 	.word	0x08003887
 80035fc:	08003887 	.word	0x08003887
 8003600:	08003887 	.word	0x08003887
 8003604:	0800366f 	.word	0x0800366f
 8003608:	08003887 	.word	0x08003887
 800360c:	08003887 	.word	0x08003887
 8003610:	08003887 	.word	0x08003887
 8003614:	08003887 	.word	0x08003887
 8003618:	08003887 	.word	0x08003887
 800361c:	08003887 	.word	0x08003887
 8003620:	08003887 	.word	0x08003887
 8003624:	08003675 	.word	0x08003675
 8003628:	08003887 	.word	0x08003887
 800362c:	08003887 	.word	0x08003887
 8003630:	08003887 	.word	0x08003887
 8003634:	08003887 	.word	0x08003887
 8003638:	08003887 	.word	0x08003887
 800363c:	08003887 	.word	0x08003887
 8003640:	08003887 	.word	0x08003887
 8003644:	0800367b 	.word	0x0800367b
  {
  case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */

   if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8003648:	4b94      	ldr	r3, [pc, #592]	; (800389c <HAL_RCC_GetSysClockFreq+0x2d4>)
 800364a:	681b      	ldr	r3, [r3, #0]
 800364c:	f003 0320 	and.w	r3, r3, #32
 8003650:	2b00      	cmp	r3, #0
 8003652:	d009      	beq.n	8003668 <HAL_RCC_GetSysClockFreq+0xa0>
      {
        sysclockfreq = (uint32_t) (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8003654:	4b91      	ldr	r3, [pc, #580]	; (800389c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003656:	681b      	ldr	r3, [r3, #0]
 8003658:	08db      	lsrs	r3, r3, #3
 800365a:	f003 0303 	and.w	r3, r3, #3
 800365e:	4a90      	ldr	r2, [pc, #576]	; (80038a0 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8003660:	fa22 f303 	lsr.w	r3, r2, r3
 8003664:	61bb      	str	r3, [r7, #24]
      else
      {
        sysclockfreq = (uint32_t) HSI_VALUE;
      }

    break;
 8003666:	e111      	b.n	800388c <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = (uint32_t) HSI_VALUE;
 8003668:	4b8d      	ldr	r3, [pc, #564]	; (80038a0 <HAL_RCC_GetSysClockFreq+0x2d8>)
 800366a:	61bb      	str	r3, [r7, #24]
    break;
 800366c:	e10e      	b.n	800388c <HAL_RCC_GetSysClockFreq+0x2c4>

  case RCC_CFGR_SWS_CSI:  /* CSI used as system clock  source */
    sysclockfreq = CSI_VALUE;
 800366e:	4b8d      	ldr	r3, [pc, #564]	; (80038a4 <HAL_RCC_GetSysClockFreq+0x2dc>)
 8003670:	61bb      	str	r3, [r7, #24]
    break;
 8003672:	e10b      	b.n	800388c <HAL_RCC_GetSysClockFreq+0x2c4>

  case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    sysclockfreq = HSE_VALUE;
 8003674:	4b8c      	ldr	r3, [pc, #560]	; (80038a8 <HAL_RCC_GetSysClockFreq+0x2e0>)
 8003676:	61bb      	str	r3, [r7, #24]
    break;
 8003678:	e108      	b.n	800388c <HAL_RCC_GetSysClockFreq+0x2c4>
  case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 800367a:	4b88      	ldr	r3, [pc, #544]	; (800389c <HAL_RCC_GetSysClockFreq+0x2d4>)
 800367c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800367e:	f003 0303 	and.w	r3, r3, #3
 8003682:	617b      	str	r3, [r7, #20]
    pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1)>> 4)  ;
 8003684:	4b85      	ldr	r3, [pc, #532]	; (800389c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003686:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003688:	091b      	lsrs	r3, r3, #4
 800368a:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800368e:	613b      	str	r3, [r7, #16]
    pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN)>>RCC_PLLCFGR_PLL1FRACEN_Pos);
 8003690:	4b82      	ldr	r3, [pc, #520]	; (800389c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003692:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003694:	f003 0301 	and.w	r3, r3, #1
 8003698:	60fb      	str	r3, [r7, #12]
    fracn1 = (float_t)(uint32_t)(pllfracen* ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1)>> 3));
 800369a:	4b80      	ldr	r3, [pc, #512]	; (800389c <HAL_RCC_GetSysClockFreq+0x2d4>)
 800369c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800369e:	08db      	lsrs	r3, r3, #3
 80036a0:	f3c3 030c 	ubfx	r3, r3, #0, #13
 80036a4:	68fa      	ldr	r2, [r7, #12]
 80036a6:	fb02 f303 	mul.w	r3, r2, r3
 80036aa:	ee07 3a90 	vmov	s15, r3
 80036ae:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80036b2:	edc7 7a02 	vstr	s15, [r7, #8]

    if (pllm != 0U)
 80036b6:	693b      	ldr	r3, [r7, #16]
 80036b8:	2b00      	cmp	r3, #0
 80036ba:	f000 80e1 	beq.w	8003880 <HAL_RCC_GetSysClockFreq+0x2b8>
 80036be:	697b      	ldr	r3, [r7, #20]
 80036c0:	2b02      	cmp	r3, #2
 80036c2:	f000 8083 	beq.w	80037cc <HAL_RCC_GetSysClockFreq+0x204>
 80036c6:	697b      	ldr	r3, [r7, #20]
 80036c8:	2b02      	cmp	r3, #2
 80036ca:	f200 80a1 	bhi.w	8003810 <HAL_RCC_GetSysClockFreq+0x248>
 80036ce:	697b      	ldr	r3, [r7, #20]
 80036d0:	2b00      	cmp	r3, #0
 80036d2:	d003      	beq.n	80036dc <HAL_RCC_GetSysClockFreq+0x114>
 80036d4:	697b      	ldr	r3, [r7, #20]
 80036d6:	2b01      	cmp	r3, #1
 80036d8:	d056      	beq.n	8003788 <HAL_RCC_GetSysClockFreq+0x1c0>
 80036da:	e099      	b.n	8003810 <HAL_RCC_GetSysClockFreq+0x248>
    {
      switch (pllsource)
      {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

       if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80036dc:	4b6f      	ldr	r3, [pc, #444]	; (800389c <HAL_RCC_GetSysClockFreq+0x2d4>)
 80036de:	681b      	ldr	r3, [r3, #0]
 80036e0:	f003 0320 	and.w	r3, r3, #32
 80036e4:	2b00      	cmp	r3, #0
 80036e6:	d02d      	beq.n	8003744 <HAL_RCC_GetSysClockFreq+0x17c>
        {
          hsivalue= (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 80036e8:	4b6c      	ldr	r3, [pc, #432]	; (800389c <HAL_RCC_GetSysClockFreq+0x2d4>)
 80036ea:	681b      	ldr	r3, [r3, #0]
 80036ec:	08db      	lsrs	r3, r3, #3
 80036ee:	f003 0303 	and.w	r3, r3, #3
 80036f2:	4a6b      	ldr	r2, [pc, #428]	; (80038a0 <HAL_RCC_GetSysClockFreq+0x2d8>)
 80036f4:	fa22 f303 	lsr.w	r3, r2, r3
 80036f8:	607b      	str	r3, [r7, #4]
          pllvco = ( (float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 80036fa:	687b      	ldr	r3, [r7, #4]
 80036fc:	ee07 3a90 	vmov	s15, r3
 8003700:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003704:	693b      	ldr	r3, [r7, #16]
 8003706:	ee07 3a90 	vmov	s15, r3
 800370a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800370e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8003712:	4b62      	ldr	r3, [pc, #392]	; (800389c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003714:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003716:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800371a:	ee07 3a90 	vmov	s15, r3
 800371e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003722:	ed97 6a02 	vldr	s12, [r7, #8]
 8003726:	eddf 5a61 	vldr	s11, [pc, #388]	; 80038ac <HAL_RCC_GetSysClockFreq+0x2e4>
 800372a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800372e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8003732:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8003736:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800373a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800373e:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
        }
        break;
 8003742:	e087      	b.n	8003854 <HAL_RCC_GetSysClockFreq+0x28c>
          pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8003744:	693b      	ldr	r3, [r7, #16]
 8003746:	ee07 3a90 	vmov	s15, r3
 800374a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800374e:	eddf 6a58 	vldr	s13, [pc, #352]	; 80038b0 <HAL_RCC_GetSysClockFreq+0x2e8>
 8003752:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8003756:	4b51      	ldr	r3, [pc, #324]	; (800389c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003758:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800375a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800375e:	ee07 3a90 	vmov	s15, r3
 8003762:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003766:	ed97 6a02 	vldr	s12, [r7, #8]
 800376a:	eddf 5a50 	vldr	s11, [pc, #320]	; 80038ac <HAL_RCC_GetSysClockFreq+0x2e4>
 800376e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8003772:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8003776:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800377a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800377e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003782:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8003786:	e065      	b.n	8003854 <HAL_RCC_GetSysClockFreq+0x28c>

      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8003788:	693b      	ldr	r3, [r7, #16]
 800378a:	ee07 3a90 	vmov	s15, r3
 800378e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003792:	eddf 6a48 	vldr	s13, [pc, #288]	; 80038b4 <HAL_RCC_GetSysClockFreq+0x2ec>
 8003796:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800379a:	4b40      	ldr	r3, [pc, #256]	; (800389c <HAL_RCC_GetSysClockFreq+0x2d4>)
 800379c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800379e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80037a2:	ee07 3a90 	vmov	s15, r3
 80037a6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80037aa:	ed97 6a02 	vldr	s12, [r7, #8]
 80037ae:	eddf 5a3f 	vldr	s11, [pc, #252]	; 80038ac <HAL_RCC_GetSysClockFreq+0x2e4>
 80037b2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80037b6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80037ba:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80037be:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80037c2:	ee67 7a27 	vmul.f32	s15, s14, s15
 80037c6:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80037ca:	e043      	b.n	8003854 <HAL_RCC_GetSysClockFreq+0x28c>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 80037cc:	693b      	ldr	r3, [r7, #16]
 80037ce:	ee07 3a90 	vmov	s15, r3
 80037d2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80037d6:	eddf 6a38 	vldr	s13, [pc, #224]	; 80038b8 <HAL_RCC_GetSysClockFreq+0x2f0>
 80037da:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80037de:	4b2f      	ldr	r3, [pc, #188]	; (800389c <HAL_RCC_GetSysClockFreq+0x2d4>)
 80037e0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80037e2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80037e6:	ee07 3a90 	vmov	s15, r3
 80037ea:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80037ee:	ed97 6a02 	vldr	s12, [r7, #8]
 80037f2:	eddf 5a2e 	vldr	s11, [pc, #184]	; 80038ac <HAL_RCC_GetSysClockFreq+0x2e4>
 80037f6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80037fa:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80037fe:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8003802:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8003806:	ee67 7a27 	vmul.f32	s15, s14, s15
 800380a:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800380e:	e021      	b.n	8003854 <HAL_RCC_GetSysClockFreq+0x28c>

      default:
        pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8003810:	693b      	ldr	r3, [r7, #16]
 8003812:	ee07 3a90 	vmov	s15, r3
 8003816:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800381a:	eddf 6a26 	vldr	s13, [pc, #152]	; 80038b4 <HAL_RCC_GetSysClockFreq+0x2ec>
 800381e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8003822:	4b1e      	ldr	r3, [pc, #120]	; (800389c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003824:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003826:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800382a:	ee07 3a90 	vmov	s15, r3
 800382e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003832:	ed97 6a02 	vldr	s12, [r7, #8]
 8003836:	eddf 5a1d 	vldr	s11, [pc, #116]	; 80038ac <HAL_RCC_GetSysClockFreq+0x2e4>
 800383a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800383e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8003842:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8003846:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800384a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800384e:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8003852:	bf00      	nop
      }
      pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >>9) + 1U ) ;
 8003854:	4b11      	ldr	r3, [pc, #68]	; (800389c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003856:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003858:	0a5b      	lsrs	r3, r3, #9
 800385a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800385e:	3301      	adds	r3, #1
 8003860:	603b      	str	r3, [r7, #0]
      sysclockfreq =  (uint32_t)(float_t)(pllvco/(float_t)pllp);
 8003862:	683b      	ldr	r3, [r7, #0]
 8003864:	ee07 3a90 	vmov	s15, r3
 8003868:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 800386c:	edd7 6a07 	vldr	s13, [r7, #28]
 8003870:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8003874:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8003878:	ee17 3a90 	vmov	r3, s15
 800387c:	61bb      	str	r3, [r7, #24]
    }
    else
    {
      sysclockfreq = 0U;
    }
    break;
 800387e:	e005      	b.n	800388c <HAL_RCC_GetSysClockFreq+0x2c4>
      sysclockfreq = 0U;
 8003880:	2300      	movs	r3, #0
 8003882:	61bb      	str	r3, [r7, #24]
    break;
 8003884:	e002      	b.n	800388c <HAL_RCC_GetSysClockFreq+0x2c4>

  default:
    sysclockfreq = CSI_VALUE;
 8003886:	4b07      	ldr	r3, [pc, #28]	; (80038a4 <HAL_RCC_GetSysClockFreq+0x2dc>)
 8003888:	61bb      	str	r3, [r7, #24]
    break;
 800388a:	bf00      	nop
  }

  return sysclockfreq;
 800388c:	69bb      	ldr	r3, [r7, #24]
}
 800388e:	4618      	mov	r0, r3
 8003890:	3724      	adds	r7, #36	; 0x24
 8003892:	46bd      	mov	sp, r7
 8003894:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003898:	4770      	bx	lr
 800389a:	bf00      	nop
 800389c:	58024400 	.word	0x58024400
 80038a0:	03d09000 	.word	0x03d09000
 80038a4:	003d0900 	.word	0x003d0900
 80038a8:	007a1200 	.word	0x007a1200
 80038ac:	46000000 	.word	0x46000000
 80038b0:	4c742400 	.word	0x4c742400
 80038b4:	4a742400 	.word	0x4a742400
 80038b8:	4af42400 	.word	0x4af42400

080038bc <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemD2Clock CMSIS variable is used to store System domain2 Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80038bc:	b580      	push	{r7, lr}
 80038be:	b082      	sub	sp, #8
 80038c0:	af00      	add	r7, sp, #0
uint32_t common_system_clock;

#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 80038c2:	f7ff fe81 	bl	80035c8 <HAL_RCC_GetSysClockFreq>
 80038c6:	4602      	mov	r2, r0
 80038c8:	4b10      	ldr	r3, [pc, #64]	; (800390c <HAL_RCC_GetHCLKFreq+0x50>)
 80038ca:	699b      	ldr	r3, [r3, #24]
 80038cc:	0a1b      	lsrs	r3, r3, #8
 80038ce:	f003 030f 	and.w	r3, r3, #15
 80038d2:	490f      	ldr	r1, [pc, #60]	; (8003910 <HAL_RCC_GetHCLKFreq+0x54>)
 80038d4:	5ccb      	ldrb	r3, [r1, r3]
 80038d6:	f003 031f 	and.w	r3, r3, #31
 80038da:	fa22 f303 	lsr.w	r3, r2, r3
 80038de:	607b      	str	r3, [r7, #4]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos] & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 80038e0:	4b0a      	ldr	r3, [pc, #40]	; (800390c <HAL_RCC_GetHCLKFreq+0x50>)
 80038e2:	699b      	ldr	r3, [r3, #24]
 80038e4:	f003 030f 	and.w	r3, r3, #15
 80038e8:	4a09      	ldr	r2, [pc, #36]	; (8003910 <HAL_RCC_GetHCLKFreq+0x54>)
 80038ea:	5cd3      	ldrb	r3, [r2, r3]
 80038ec:	f003 031f 	and.w	r3, r3, #31
 80038f0:	687a      	ldr	r2, [r7, #4]
 80038f2:	fa22 f303 	lsr.w	r3, r2, r3
 80038f6:	4a07      	ldr	r2, [pc, #28]	; (8003914 <HAL_RCC_GetHCLKFreq+0x58>)
 80038f8:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 80038fa:	4a07      	ldr	r2, [pc, #28]	; (8003918 <HAL_RCC_GetHCLKFreq+0x5c>)
 80038fc:	687b      	ldr	r3, [r7, #4]
 80038fe:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  return SystemD2Clock;
 8003900:	4b04      	ldr	r3, [pc, #16]	; (8003914 <HAL_RCC_GetHCLKFreq+0x58>)
 8003902:	681b      	ldr	r3, [r3, #0]
}
 8003904:	4618      	mov	r0, r3
 8003906:	3708      	adds	r7, #8
 8003908:	46bd      	mov	sp, r7
 800390a:	bd80      	pop	{r7, pc}
 800390c:	58024400 	.word	0x58024400
 8003910:	08006be0 	.word	0x08006be0
 8003914:	20000004 	.word	0x20000004
 8003918:	20000000 	.word	0x20000000

0800391c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800391c:	b580      	push	{r7, lr}
 800391e:	af00      	add	r7, sp, #0
#if defined (RCC_D2CFGR_D2PPRE1)
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1)>> RCC_D2CFGR_D2PPRE1_Pos]) & 0x1FU));
 8003920:	f7ff ffcc 	bl	80038bc <HAL_RCC_GetHCLKFreq>
 8003924:	4602      	mov	r2, r0
 8003926:	4b06      	ldr	r3, [pc, #24]	; (8003940 <HAL_RCC_GetPCLK1Freq+0x24>)
 8003928:	69db      	ldr	r3, [r3, #28]
 800392a:	091b      	lsrs	r3, r3, #4
 800392c:	f003 0307 	and.w	r3, r3, #7
 8003930:	4904      	ldr	r1, [pc, #16]	; (8003944 <HAL_RCC_GetPCLK1Freq+0x28>)
 8003932:	5ccb      	ldrb	r3, [r1, r3]
 8003934:	f003 031f 	and.w	r3, r3, #31
 8003938:	fa22 f303 	lsr.w	r3, r2, r3
#else
 /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1)>> RCC_CDCFGR2_CDPPRE1_Pos]) & 0x1FU));
#endif
}
 800393c:	4618      	mov	r0, r3
 800393e:	bd80      	pop	{r7, pc}
 8003940:	58024400 	.word	0x58024400
 8003944:	08006be0 	.word	0x08006be0

08003948 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003948:	b580      	push	{r7, lr}
 800394a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
#if defined(RCC_D2CFGR_D2PPRE2)
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2)>> RCC_D2CFGR_D2PPRE2_Pos]) & 0x1FU));
 800394c:	f7ff ffb6 	bl	80038bc <HAL_RCC_GetHCLKFreq>
 8003950:	4602      	mov	r2, r0
 8003952:	4b06      	ldr	r3, [pc, #24]	; (800396c <HAL_RCC_GetPCLK2Freq+0x24>)
 8003954:	69db      	ldr	r3, [r3, #28]
 8003956:	0a1b      	lsrs	r3, r3, #8
 8003958:	f003 0307 	and.w	r3, r3, #7
 800395c:	4904      	ldr	r1, [pc, #16]	; (8003970 <HAL_RCC_GetPCLK2Freq+0x28>)
 800395e:	5ccb      	ldrb	r3, [r1, r3]
 8003960:	f003 031f 	and.w	r3, r3, #31
 8003964:	fa22 f303 	lsr.w	r3, r2, r3
#else
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2)>> RCC_CDCFGR2_CDPPRE2_Pos]) & 0x1FU));
#endif
}
 8003968:	4618      	mov	r0, r3
 800396a:	bd80      	pop	{r7, pc}
 800396c:	58024400 	.word	0x58024400
 8003970:	08006be0 	.word	0x08006be0

08003974 <HAL_RCCEx_PeriphCLKConfig>:
  * (*) : Available on some STM32H7 lines only.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8003974:	b580      	push	{r7, lr}
 8003976:	b086      	sub	sp, #24
 8003978:	af00      	add	r7, sp, #0
 800397a:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 800397c:	2300      	movs	r3, #0
 800397e:	75fb      	strb	r3, [r7, #23]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8003980:	2300      	movs	r3, #0
 8003982:	75bb      	strb	r3, [r7, #22]

  /*---------------------------- SPDIFRX configuration -------------------------------*/

  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8003984:	687b      	ldr	r3, [r7, #4]
 8003986:	681b      	ldr	r3, [r3, #0]
 8003988:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800398c:	2b00      	cmp	r3, #0
 800398e:	d03f      	beq.n	8003a10 <HAL_RCCEx_PeriphCLKConfig+0x9c>
  {

    switch(PeriphClkInit->SpdifrxClockSelection)
 8003990:	687b      	ldr	r3, [r7, #4]
 8003992:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003994:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8003998:	d02a      	beq.n	80039f0 <HAL_RCCEx_PeriphCLKConfig+0x7c>
 800399a:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 800399e:	d824      	bhi.n	80039ea <HAL_RCCEx_PeriphCLKConfig+0x76>
 80039a0:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80039a4:	d018      	beq.n	80039d8 <HAL_RCCEx_PeriphCLKConfig+0x64>
 80039a6:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80039aa:	d81e      	bhi.n	80039ea <HAL_RCCEx_PeriphCLKConfig+0x76>
 80039ac:	2b00      	cmp	r3, #0
 80039ae:	d003      	beq.n	80039b8 <HAL_RCCEx_PeriphCLKConfig+0x44>
 80039b0:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80039b4:	d007      	beq.n	80039c6 <HAL_RCCEx_PeriphCLKConfig+0x52>
 80039b6:	e018      	b.n	80039ea <HAL_RCCEx_PeriphCLKConfig+0x76>
    {
    case RCC_SPDIFRXCLKSOURCE_PLL:      /* PLL is used as clock source for SPDIFRX*/
      /* Enable PLL1Q Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80039b8:	4bab      	ldr	r3, [pc, #684]	; (8003c68 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 80039ba:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80039bc:	4aaa      	ldr	r2, [pc, #680]	; (8003c68 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 80039be:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80039c2:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 80039c4:	e015      	b.n	80039f2 <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SPDIFRXCLKSOURCE_PLL2: /* PLL2 is used as clock source for SPDIFRX*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 80039c6:	687b      	ldr	r3, [r7, #4]
 80039c8:	3304      	adds	r3, #4
 80039ca:	2102      	movs	r1, #2
 80039cc:	4618      	mov	r0, r3
 80039ce:	f001 f989 	bl	8004ce4 <RCCEx_PLL2_Config>
 80039d2:	4603      	mov	r3, r0
 80039d4:	75fb      	strb	r3, [r7, #23]

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 80039d6:	e00c      	b.n	80039f2 <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SPDIFRXCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPDIFRX*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 80039d8:	687b      	ldr	r3, [r7, #4]
 80039da:	3324      	adds	r3, #36	; 0x24
 80039dc:	2102      	movs	r1, #2
 80039de:	4618      	mov	r0, r3
 80039e0:	f001 fa32 	bl	8004e48 <RCCEx_PLL3_Config>
 80039e4:	4603      	mov	r3, r0
 80039e6:	75fb      	strb	r3, [r7, #23]

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 80039e8:	e003      	b.n	80039f2 <HAL_RCCEx_PeriphCLKConfig+0x7e>
      /* Internal OSC clock is used as source of SPDIFRX clock*/
      /* SPDIFRX clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80039ea:	2301      	movs	r3, #1
 80039ec:	75fb      	strb	r3, [r7, #23]
      break;
 80039ee:	e000      	b.n	80039f2 <HAL_RCCEx_PeriphCLKConfig+0x7e>
      break;
 80039f0:	bf00      	nop
    }

    if(ret == HAL_OK)
 80039f2:	7dfb      	ldrb	r3, [r7, #23]
 80039f4:	2b00      	cmp	r3, #0
 80039f6:	d109      	bne.n	8003a0c <HAL_RCCEx_PeriphCLKConfig+0x98>
    {
      /* Set the source of SPDIFRX clock*/
      __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifrxClockSelection);
 80039f8:	4b9b      	ldr	r3, [pc, #620]	; (8003c68 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 80039fa:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80039fc:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8003a00:	687b      	ldr	r3, [r7, #4]
 8003a02:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003a04:	4998      	ldr	r1, [pc, #608]	; (8003c68 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8003a06:	4313      	orrs	r3, r2
 8003a08:	650b      	str	r3, [r1, #80]	; 0x50
 8003a0a:	e001      	b.n	8003a10 <HAL_RCCEx_PeriphCLKConfig+0x9c>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003a0c:	7dfb      	ldrb	r3, [r7, #23]
 8003a0e:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SAI1 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 8003a10:	687b      	ldr	r3, [r7, #4]
 8003a12:	681b      	ldr	r3, [r3, #0]
 8003a14:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003a18:	2b00      	cmp	r3, #0
 8003a1a:	d03d      	beq.n	8003a98 <HAL_RCCEx_PeriphCLKConfig+0x124>
  {
    switch(PeriphClkInit->Sai1ClockSelection)
 8003a1c:	687b      	ldr	r3, [r7, #4]
 8003a1e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003a20:	2b04      	cmp	r3, #4
 8003a22:	d826      	bhi.n	8003a72 <HAL_RCCEx_PeriphCLKConfig+0xfe>
 8003a24:	a201      	add	r2, pc, #4	; (adr r2, 8003a2c <HAL_RCCEx_PeriphCLKConfig+0xb8>)
 8003a26:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003a2a:	bf00      	nop
 8003a2c:	08003a41 	.word	0x08003a41
 8003a30:	08003a4f 	.word	0x08003a4f
 8003a34:	08003a61 	.word	0x08003a61
 8003a38:	08003a79 	.word	0x08003a79
 8003a3c:	08003a79 	.word	0x08003a79
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003a40:	4b89      	ldr	r3, [pc, #548]	; (8003c68 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8003a42:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003a44:	4a88      	ldr	r2, [pc, #544]	; (8003c68 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8003a46:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003a4a:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8003a4c:	e015      	b.n	8003a7a <HAL_RCCEx_PeriphCLKConfig+0x106>

    case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI1*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8003a4e:	687b      	ldr	r3, [r7, #4]
 8003a50:	3304      	adds	r3, #4
 8003a52:	2100      	movs	r1, #0
 8003a54:	4618      	mov	r0, r3
 8003a56:	f001 f945 	bl	8004ce4 <RCCEx_PLL2_Config>
 8003a5a:	4603      	mov	r3, r0
 8003a5c:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8003a5e:	e00c      	b.n	8003a7a <HAL_RCCEx_PeriphCLKConfig+0x106>

    case RCC_SAI1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI1*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 8003a60:	687b      	ldr	r3, [r7, #4]
 8003a62:	3324      	adds	r3, #36	; 0x24
 8003a64:	2100      	movs	r1, #0
 8003a66:	4618      	mov	r0, r3
 8003a68:	f001 f9ee 	bl	8004e48 <RCCEx_PLL3_Config>
 8003a6c:	4603      	mov	r3, r0
 8003a6e:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8003a70:	e003      	b.n	8003a7a <HAL_RCCEx_PeriphCLKConfig+0x106>
      /* HSI, HSE, or CSI oscillator is used as source of SAI1 clock */
      /* SAI1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8003a72:	2301      	movs	r3, #1
 8003a74:	75fb      	strb	r3, [r7, #23]
      break;
 8003a76:	e000      	b.n	8003a7a <HAL_RCCEx_PeriphCLKConfig+0x106>
      break;
 8003a78:	bf00      	nop
    }

    if(ret == HAL_OK)
 8003a7a:	7dfb      	ldrb	r3, [r7, #23]
 8003a7c:	2b00      	cmp	r3, #0
 8003a7e:	d109      	bne.n	8003a94 <HAL_RCCEx_PeriphCLKConfig+0x120>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8003a80:	4b79      	ldr	r3, [pc, #484]	; (8003c68 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8003a82:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003a84:	f023 0207 	bic.w	r2, r3, #7
 8003a88:	687b      	ldr	r3, [r7, #4]
 8003a8a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003a8c:	4976      	ldr	r1, [pc, #472]	; (8003c68 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8003a8e:	4313      	orrs	r3, r2
 8003a90:	650b      	str	r3, [r1, #80]	; 0x50
 8003a92:	e001      	b.n	8003a98 <HAL_RCCEx_PeriphCLKConfig+0x124>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003a94:	7dfb      	ldrb	r3, [r7, #23]
 8003a96:	75bb      	strb	r3, [r7, #22]
  }
#endif  /*SAI2B*/

#if defined(SAI4)
  /*---------------------------- SAI4A configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4A) == RCC_PERIPHCLK_SAI4A)
 8003a98:	687b      	ldr	r3, [r7, #4]
 8003a9a:	681b      	ldr	r3, [r3, #0]
 8003a9c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003aa0:	2b00      	cmp	r3, #0
 8003aa2:	d051      	beq.n	8003b48 <HAL_RCCEx_PeriphCLKConfig+0x1d4>
  {
    switch(PeriphClkInit->Sai4AClockSelection)
 8003aa4:	687b      	ldr	r3, [r7, #4]
 8003aa6:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 8003aaa:	f5b3 0f20 	cmp.w	r3, #10485760	; 0xa00000
 8003aae:	d036      	beq.n	8003b1e <HAL_RCCEx_PeriphCLKConfig+0x1aa>
 8003ab0:	f5b3 0f20 	cmp.w	r3, #10485760	; 0xa00000
 8003ab4:	d830      	bhi.n	8003b18 <HAL_RCCEx_PeriphCLKConfig+0x1a4>
 8003ab6:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8003aba:	d032      	beq.n	8003b22 <HAL_RCCEx_PeriphCLKConfig+0x1ae>
 8003abc:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8003ac0:	d82a      	bhi.n	8003b18 <HAL_RCCEx_PeriphCLKConfig+0x1a4>
 8003ac2:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 8003ac6:	d02e      	beq.n	8003b26 <HAL_RCCEx_PeriphCLKConfig+0x1b2>
 8003ac8:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 8003acc:	d824      	bhi.n	8003b18 <HAL_RCCEx_PeriphCLKConfig+0x1a4>
 8003ace:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003ad2:	d018      	beq.n	8003b06 <HAL_RCCEx_PeriphCLKConfig+0x192>
 8003ad4:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003ad8:	d81e      	bhi.n	8003b18 <HAL_RCCEx_PeriphCLKConfig+0x1a4>
 8003ada:	2b00      	cmp	r3, #0
 8003adc:	d003      	beq.n	8003ae6 <HAL_RCCEx_PeriphCLKConfig+0x172>
 8003ade:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8003ae2:	d007      	beq.n	8003af4 <HAL_RCCEx_PeriphCLKConfig+0x180>
 8003ae4:	e018      	b.n	8003b18 <HAL_RCCEx_PeriphCLKConfig+0x1a4>
    {
    case RCC_SAI4ACLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003ae6:	4b60      	ldr	r3, [pc, #384]	; (8003c68 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8003ae8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003aea:	4a5f      	ldr	r2, [pc, #380]	; (8003c68 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8003aec:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003af0:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8003af2:	e019      	b.n	8003b28 <HAL_RCCEx_PeriphCLKConfig+0x1b4>

    case RCC_SAI4ACLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8003af4:	687b      	ldr	r3, [r7, #4]
 8003af6:	3304      	adds	r3, #4
 8003af8:	2100      	movs	r1, #0
 8003afa:	4618      	mov	r0, r3
 8003afc:	f001 f8f2 	bl	8004ce4 <RCCEx_PLL2_Config>
 8003b00:	4603      	mov	r3, r0
 8003b02:	75fb      	strb	r3, [r7, #23]

      /* SAI2 clock source configuration done later after clock selection check */
      break;
 8003b04:	e010      	b.n	8003b28 <HAL_RCCEx_PeriphCLKConfig+0x1b4>

    case RCC_SAI4ACLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 8003b06:	687b      	ldr	r3, [r7, #4]
 8003b08:	3324      	adds	r3, #36	; 0x24
 8003b0a:	2100      	movs	r1, #0
 8003b0c:	4618      	mov	r0, r3
 8003b0e:	f001 f99b 	bl	8004e48 <RCCEx_PLL3_Config>
 8003b12:	4603      	mov	r3, r0
 8003b14:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8003b16:	e007      	b.n	8003b28 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
      /* SAI4A clock source configuration done later after clock selection check */
      break;
#endif /* RCC_VER_3_0 */

    default:
      ret = HAL_ERROR;
 8003b18:	2301      	movs	r3, #1
 8003b1a:	75fb      	strb	r3, [r7, #23]
      break;
 8003b1c:	e004      	b.n	8003b28 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
      break;
 8003b1e:	bf00      	nop
 8003b20:	e002      	b.n	8003b28 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
      break;
 8003b22:	bf00      	nop
 8003b24:	e000      	b.n	8003b28 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
      break;
 8003b26:	bf00      	nop
    }

    if(ret == HAL_OK)
 8003b28:	7dfb      	ldrb	r3, [r7, #23]
 8003b2a:	2b00      	cmp	r3, #0
 8003b2c:	d10a      	bne.n	8003b44 <HAL_RCCEx_PeriphCLKConfig+0x1d0>
    {
      /* Set the source of SAI4A clock*/
      __HAL_RCC_SAI4A_CONFIG(PeriphClkInit->Sai4AClockSelection);
 8003b2e:	4b4e      	ldr	r3, [pc, #312]	; (8003c68 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8003b30:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003b32:	f423 0260 	bic.w	r2, r3, #14680064	; 0xe00000
 8003b36:	687b      	ldr	r3, [r7, #4]
 8003b38:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 8003b3c:	494a      	ldr	r1, [pc, #296]	; (8003c68 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8003b3e:	4313      	orrs	r3, r2
 8003b40:	658b      	str	r3, [r1, #88]	; 0x58
 8003b42:	e001      	b.n	8003b48 <HAL_RCCEx_PeriphCLKConfig+0x1d4>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003b44:	7dfb      	ldrb	r3, [r7, #23]
 8003b46:	75bb      	strb	r3, [r7, #22]
    }
  }
  /*---------------------------- SAI4B configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4B) == RCC_PERIPHCLK_SAI4B)
 8003b48:	687b      	ldr	r3, [r7, #4]
 8003b4a:	681b      	ldr	r3, [r3, #0]
 8003b4c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003b50:	2b00      	cmp	r3, #0
 8003b52:	d051      	beq.n	8003bf8 <HAL_RCCEx_PeriphCLKConfig+0x284>
  {
    switch(PeriphClkInit->Sai4BClockSelection)
 8003b54:	687b      	ldr	r3, [r7, #4]
 8003b56:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8003b5a:	f1b3 6fa0 	cmp.w	r3, #83886080	; 0x5000000
 8003b5e:	d036      	beq.n	8003bce <HAL_RCCEx_PeriphCLKConfig+0x25a>
 8003b60:	f1b3 6fa0 	cmp.w	r3, #83886080	; 0x5000000
 8003b64:	d830      	bhi.n	8003bc8 <HAL_RCCEx_PeriphCLKConfig+0x254>
 8003b66:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8003b6a:	d032      	beq.n	8003bd2 <HAL_RCCEx_PeriphCLKConfig+0x25e>
 8003b6c:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8003b70:	d82a      	bhi.n	8003bc8 <HAL_RCCEx_PeriphCLKConfig+0x254>
 8003b72:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8003b76:	d02e      	beq.n	8003bd6 <HAL_RCCEx_PeriphCLKConfig+0x262>
 8003b78:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8003b7c:	d824      	bhi.n	8003bc8 <HAL_RCCEx_PeriphCLKConfig+0x254>
 8003b7e:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8003b82:	d018      	beq.n	8003bb6 <HAL_RCCEx_PeriphCLKConfig+0x242>
 8003b84:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8003b88:	d81e      	bhi.n	8003bc8 <HAL_RCCEx_PeriphCLKConfig+0x254>
 8003b8a:	2b00      	cmp	r3, #0
 8003b8c:	d003      	beq.n	8003b96 <HAL_RCCEx_PeriphCLKConfig+0x222>
 8003b8e:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8003b92:	d007      	beq.n	8003ba4 <HAL_RCCEx_PeriphCLKConfig+0x230>
 8003b94:	e018      	b.n	8003bc8 <HAL_RCCEx_PeriphCLKConfig+0x254>
    {
    case RCC_SAI4BCLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003b96:	4b34      	ldr	r3, [pc, #208]	; (8003c68 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8003b98:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003b9a:	4a33      	ldr	r2, [pc, #204]	; (8003c68 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8003b9c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003ba0:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8003ba2:	e019      	b.n	8003bd8 <HAL_RCCEx_PeriphCLKConfig+0x264>

    case RCC_SAI4BCLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8003ba4:	687b      	ldr	r3, [r7, #4]
 8003ba6:	3304      	adds	r3, #4
 8003ba8:	2100      	movs	r1, #0
 8003baa:	4618      	mov	r0, r3
 8003bac:	f001 f89a 	bl	8004ce4 <RCCEx_PLL2_Config>
 8003bb0:	4603      	mov	r3, r0
 8003bb2:	75fb      	strb	r3, [r7, #23]

      /* SAI2 clock source configuration done later after clock selection check */
      break;
 8003bb4:	e010      	b.n	8003bd8 <HAL_RCCEx_PeriphCLKConfig+0x264>

    case RCC_SAI4BCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8003bb6:	687b      	ldr	r3, [r7, #4]
 8003bb8:	3324      	adds	r3, #36	; 0x24
 8003bba:	2100      	movs	r1, #0
 8003bbc:	4618      	mov	r0, r3
 8003bbe:	f001 f943 	bl	8004e48 <RCCEx_PLL3_Config>
 8003bc2:	4603      	mov	r3, r0
 8003bc4:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8003bc6:	e007      	b.n	8003bd8 <HAL_RCCEx_PeriphCLKConfig+0x264>
      /* SAI4B clock source configuration done later after clock selection check */
      break;
#endif /* RCC_VER_3_0 */

    default:
      ret = HAL_ERROR;
 8003bc8:	2301      	movs	r3, #1
 8003bca:	75fb      	strb	r3, [r7, #23]
      break;
 8003bcc:	e004      	b.n	8003bd8 <HAL_RCCEx_PeriphCLKConfig+0x264>
      break;
 8003bce:	bf00      	nop
 8003bd0:	e002      	b.n	8003bd8 <HAL_RCCEx_PeriphCLKConfig+0x264>
      break;
 8003bd2:	bf00      	nop
 8003bd4:	e000      	b.n	8003bd8 <HAL_RCCEx_PeriphCLKConfig+0x264>
      break;
 8003bd6:	bf00      	nop
    }

    if(ret == HAL_OK)
 8003bd8:	7dfb      	ldrb	r3, [r7, #23]
 8003bda:	2b00      	cmp	r3, #0
 8003bdc:	d10a      	bne.n	8003bf4 <HAL_RCCEx_PeriphCLKConfig+0x280>
    {
      /* Set the source of SAI4B clock*/
      __HAL_RCC_SAI4B_CONFIG(PeriphClkInit->Sai4BClockSelection);
 8003bde:	4b22      	ldr	r3, [pc, #136]	; (8003c68 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8003be0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003be2:	f023 62e0 	bic.w	r2, r3, #117440512	; 0x7000000
 8003be6:	687b      	ldr	r3, [r7, #4]
 8003be8:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8003bec:	491e      	ldr	r1, [pc, #120]	; (8003c68 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8003bee:	4313      	orrs	r3, r2
 8003bf0:	658b      	str	r3, [r1, #88]	; 0x58
 8003bf2:	e001      	b.n	8003bf8 <HAL_RCCEx_PeriphCLKConfig+0x284>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003bf4:	7dfb      	ldrb	r3, [r7, #23]
 8003bf6:	75bb      	strb	r3, [r7, #22]
  }
#endif  /*QUADSPI*/

#if defined(OCTOSPI1) || defined(OCTOSPI2)
  /*---------------------------- OCTOSPI configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_OSPI) == RCC_PERIPHCLK_OSPI)
 8003bf8:	687b      	ldr	r3, [r7, #4]
 8003bfa:	681b      	ldr	r3, [r3, #0]
 8003bfc:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003c00:	2b00      	cmp	r3, #0
 8003c02:	d035      	beq.n	8003c70 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
  {
    switch(PeriphClkInit->OspiClockSelection)
 8003c04:	687b      	ldr	r3, [r7, #4]
 8003c06:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003c08:	2b30      	cmp	r3, #48	; 0x30
 8003c0a:	d01c      	beq.n	8003c46 <HAL_RCCEx_PeriphCLKConfig+0x2d2>
 8003c0c:	2b30      	cmp	r3, #48	; 0x30
 8003c0e:	d817      	bhi.n	8003c40 <HAL_RCCEx_PeriphCLKConfig+0x2cc>
 8003c10:	2b20      	cmp	r3, #32
 8003c12:	d00c      	beq.n	8003c2e <HAL_RCCEx_PeriphCLKConfig+0x2ba>
 8003c14:	2b20      	cmp	r3, #32
 8003c16:	d813      	bhi.n	8003c40 <HAL_RCCEx_PeriphCLKConfig+0x2cc>
 8003c18:	2b00      	cmp	r3, #0
 8003c1a:	d016      	beq.n	8003c4a <HAL_RCCEx_PeriphCLKConfig+0x2d6>
 8003c1c:	2b10      	cmp	r3, #16
 8003c1e:	d10f      	bne.n	8003c40 <HAL_RCCEx_PeriphCLKConfig+0x2cc>
    {
    case RCC_OSPICLKSOURCE_PLL:      /* PLL is used as clock source for OSPI*/
      /* Enable OSPI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003c20:	4b11      	ldr	r3, [pc, #68]	; (8003c68 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8003c22:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003c24:	4a10      	ldr	r2, [pc, #64]	; (8003c68 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8003c26:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003c2a:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* OSPI clock source configuration done later after clock selection check */
      break;
 8003c2c:	e00e      	b.n	8003c4c <HAL_RCCEx_PeriphCLKConfig+0x2d8>

    case RCC_OSPICLKSOURCE_PLL2: /* PLL2 is used as clock source for OSPI*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 8003c2e:	687b      	ldr	r3, [r7, #4]
 8003c30:	3304      	adds	r3, #4
 8003c32:	2102      	movs	r1, #2
 8003c34:	4618      	mov	r0, r3
 8003c36:	f001 f855 	bl	8004ce4 <RCCEx_PLL2_Config>
 8003c3a:	4603      	mov	r3, r0
 8003c3c:	75fb      	strb	r3, [r7, #23]

      /* OSPI clock source configuration done later after clock selection check */
      break;
 8003c3e:	e005      	b.n	8003c4c <HAL_RCCEx_PeriphCLKConfig+0x2d8>
    case RCC_OSPICLKSOURCE_HCLK:
      /* HCLK clock selected as OSPI kernel peripheral clock */
      break;

    default:
      ret = HAL_ERROR;
 8003c40:	2301      	movs	r3, #1
 8003c42:	75fb      	strb	r3, [r7, #23]
      break;
 8003c44:	e002      	b.n	8003c4c <HAL_RCCEx_PeriphCLKConfig+0x2d8>
      break;
 8003c46:	bf00      	nop
 8003c48:	e000      	b.n	8003c4c <HAL_RCCEx_PeriphCLKConfig+0x2d8>
      break;
 8003c4a:	bf00      	nop
    }

    if(ret == HAL_OK)
 8003c4c:	7dfb      	ldrb	r3, [r7, #23]
 8003c4e:	2b00      	cmp	r3, #0
 8003c50:	d10c      	bne.n	8003c6c <HAL_RCCEx_PeriphCLKConfig+0x2f8>
    {
      /* Set the source of OSPI clock*/
      __HAL_RCC_OSPI_CONFIG(PeriphClkInit->OspiClockSelection);
 8003c52:	4b05      	ldr	r3, [pc, #20]	; (8003c68 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8003c54:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003c56:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8003c5a:	687b      	ldr	r3, [r7, #4]
 8003c5c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003c5e:	4902      	ldr	r1, [pc, #8]	; (8003c68 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8003c60:	4313      	orrs	r3, r2
 8003c62:	64cb      	str	r3, [r1, #76]	; 0x4c
 8003c64:	e004      	b.n	8003c70 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
 8003c66:	bf00      	nop
 8003c68:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003c6c:	7dfb      	ldrb	r3, [r7, #23]
 8003c6e:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif  /*OCTOSPI*/

  /*---------------------------- SPI1/2/3 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI123) == RCC_PERIPHCLK_SPI123)
 8003c70:	687b      	ldr	r3, [r7, #4]
 8003c72:	681b      	ldr	r3, [r3, #0]
 8003c74:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8003c78:	2b00      	cmp	r3, #0
 8003c7a:	d047      	beq.n	8003d0c <HAL_RCCEx_PeriphCLKConfig+0x398>
  {
    switch(PeriphClkInit->Spi123ClockSelection)
 8003c7c:	687b      	ldr	r3, [r7, #4]
 8003c7e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003c80:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8003c84:	d030      	beq.n	8003ce8 <HAL_RCCEx_PeriphCLKConfig+0x374>
 8003c86:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8003c8a:	d82a      	bhi.n	8003ce2 <HAL_RCCEx_PeriphCLKConfig+0x36e>
 8003c8c:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8003c90:	d02c      	beq.n	8003cec <HAL_RCCEx_PeriphCLKConfig+0x378>
 8003c92:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8003c96:	d824      	bhi.n	8003ce2 <HAL_RCCEx_PeriphCLKConfig+0x36e>
 8003c98:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003c9c:	d018      	beq.n	8003cd0 <HAL_RCCEx_PeriphCLKConfig+0x35c>
 8003c9e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003ca2:	d81e      	bhi.n	8003ce2 <HAL_RCCEx_PeriphCLKConfig+0x36e>
 8003ca4:	2b00      	cmp	r3, #0
 8003ca6:	d003      	beq.n	8003cb0 <HAL_RCCEx_PeriphCLKConfig+0x33c>
 8003ca8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003cac:	d007      	beq.n	8003cbe <HAL_RCCEx_PeriphCLKConfig+0x34a>
 8003cae:	e018      	b.n	8003ce2 <HAL_RCCEx_PeriphCLKConfig+0x36e>
    {
    case RCC_SPI123CLKSOURCE_PLL:      /* PLL is used as clock source for SPI1/2/3 */
      /* Enable SPI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003cb0:	4bac      	ldr	r3, [pc, #688]	; (8003f64 <HAL_RCCEx_PeriphCLKConfig+0x5f0>)
 8003cb2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003cb4:	4aab      	ldr	r2, [pc, #684]	; (8003f64 <HAL_RCCEx_PeriphCLKConfig+0x5f0>)
 8003cb6:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003cba:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 8003cbc:	e017      	b.n	8003cee <HAL_RCCEx_PeriphCLKConfig+0x37a>

    case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI1/2/3 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8003cbe:	687b      	ldr	r3, [r7, #4]
 8003cc0:	3304      	adds	r3, #4
 8003cc2:	2100      	movs	r1, #0
 8003cc4:	4618      	mov	r0, r3
 8003cc6:	f001 f80d 	bl	8004ce4 <RCCEx_PLL2_Config>
 8003cca:	4603      	mov	r3, r0
 8003ccc:	75fb      	strb	r3, [r7, #23]

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 8003cce:	e00e      	b.n	8003cee <HAL_RCCEx_PeriphCLKConfig+0x37a>

    case RCC_SPI123CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI1/2/3 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 8003cd0:	687b      	ldr	r3, [r7, #4]
 8003cd2:	3324      	adds	r3, #36	; 0x24
 8003cd4:	2100      	movs	r1, #0
 8003cd6:	4618      	mov	r0, r3
 8003cd8:	f001 f8b6 	bl	8004e48 <RCCEx_PLL3_Config>
 8003cdc:	4603      	mov	r3, r0
 8003cde:	75fb      	strb	r3, [r7, #23]

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 8003ce0:	e005      	b.n	8003cee <HAL_RCCEx_PeriphCLKConfig+0x37a>
      /* HSI, HSE, or CSI oscillator is used as source of SPI1/2/3 clock */
      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8003ce2:	2301      	movs	r3, #1
 8003ce4:	75fb      	strb	r3, [r7, #23]
      break;
 8003ce6:	e002      	b.n	8003cee <HAL_RCCEx_PeriphCLKConfig+0x37a>
      break;
 8003ce8:	bf00      	nop
 8003cea:	e000      	b.n	8003cee <HAL_RCCEx_PeriphCLKConfig+0x37a>
      break;
 8003cec:	bf00      	nop
    }

    if(ret == HAL_OK)
 8003cee:	7dfb      	ldrb	r3, [r7, #23]
 8003cf0:	2b00      	cmp	r3, #0
 8003cf2:	d109      	bne.n	8003d08 <HAL_RCCEx_PeriphCLKConfig+0x394>
    {
      /* Set the source of SPI1/2/3 clock*/
      __HAL_RCC_SPI123_CONFIG(PeriphClkInit->Spi123ClockSelection);
 8003cf4:	4b9b      	ldr	r3, [pc, #620]	; (8003f64 <HAL_RCCEx_PeriphCLKConfig+0x5f0>)
 8003cf6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003cf8:	f423 42e0 	bic.w	r2, r3, #28672	; 0x7000
 8003cfc:	687b      	ldr	r3, [r7, #4]
 8003cfe:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003d00:	4998      	ldr	r1, [pc, #608]	; (8003f64 <HAL_RCCEx_PeriphCLKConfig+0x5f0>)
 8003d02:	4313      	orrs	r3, r2
 8003d04:	650b      	str	r3, [r1, #80]	; 0x50
 8003d06:	e001      	b.n	8003d0c <HAL_RCCEx_PeriphCLKConfig+0x398>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003d08:	7dfb      	ldrb	r3, [r7, #23]
 8003d0a:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SPI4/5 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) == RCC_PERIPHCLK_SPI45)
 8003d0c:	687b      	ldr	r3, [r7, #4]
 8003d0e:	681b      	ldr	r3, [r3, #0]
 8003d10:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8003d14:	2b00      	cmp	r3, #0
 8003d16:	d049      	beq.n	8003dac <HAL_RCCEx_PeriphCLKConfig+0x438>
  {
    switch(PeriphClkInit->Spi45ClockSelection)
 8003d18:	687b      	ldr	r3, [r7, #4]
 8003d1a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003d1c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8003d20:	d02e      	beq.n	8003d80 <HAL_RCCEx_PeriphCLKConfig+0x40c>
 8003d22:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8003d26:	d828      	bhi.n	8003d7a <HAL_RCCEx_PeriphCLKConfig+0x406>
 8003d28:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8003d2c:	d02a      	beq.n	8003d84 <HAL_RCCEx_PeriphCLKConfig+0x410>
 8003d2e:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8003d32:	d822      	bhi.n	8003d7a <HAL_RCCEx_PeriphCLKConfig+0x406>
 8003d34:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8003d38:	d026      	beq.n	8003d88 <HAL_RCCEx_PeriphCLKConfig+0x414>
 8003d3a:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8003d3e:	d81c      	bhi.n	8003d7a <HAL_RCCEx_PeriphCLKConfig+0x406>
 8003d40:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8003d44:	d010      	beq.n	8003d68 <HAL_RCCEx_PeriphCLKConfig+0x3f4>
 8003d46:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8003d4a:	d816      	bhi.n	8003d7a <HAL_RCCEx_PeriphCLKConfig+0x406>
 8003d4c:	2b00      	cmp	r3, #0
 8003d4e:	d01d      	beq.n	8003d8c <HAL_RCCEx_PeriphCLKConfig+0x418>
 8003d50:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003d54:	d111      	bne.n	8003d7a <HAL_RCCEx_PeriphCLKConfig+0x406>
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;

    case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI4/5 */

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8003d56:	687b      	ldr	r3, [r7, #4]
 8003d58:	3304      	adds	r3, #4
 8003d5a:	2101      	movs	r1, #1
 8003d5c:	4618      	mov	r0, r3
 8003d5e:	f000 ffc1 	bl	8004ce4 <RCCEx_PLL2_Config>
 8003d62:	4603      	mov	r3, r0
 8003d64:	75fb      	strb	r3, [r7, #23]

      /* SPI4/5 clock source configuration done later after clock selection check */
      break;
 8003d66:	e012      	b.n	8003d8e <HAL_RCCEx_PeriphCLKConfig+0x41a>
    case RCC_SPI45CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI4/5 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8003d68:	687b      	ldr	r3, [r7, #4]
 8003d6a:	3324      	adds	r3, #36	; 0x24
 8003d6c:	2101      	movs	r1, #1
 8003d6e:	4618      	mov	r0, r3
 8003d70:	f001 f86a 	bl	8004e48 <RCCEx_PLL3_Config>
 8003d74:	4603      	mov	r3, r0
 8003d76:	75fb      	strb	r3, [r7, #23]
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;
 8003d78:	e009      	b.n	8003d8e <HAL_RCCEx_PeriphCLKConfig+0x41a>
      /* HSE,  oscillator is used as source of SPI4/5 clock */
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8003d7a:	2301      	movs	r3, #1
 8003d7c:	75fb      	strb	r3, [r7, #23]
      break;
 8003d7e:	e006      	b.n	8003d8e <HAL_RCCEx_PeriphCLKConfig+0x41a>
      break;
 8003d80:	bf00      	nop
 8003d82:	e004      	b.n	8003d8e <HAL_RCCEx_PeriphCLKConfig+0x41a>
      break;
 8003d84:	bf00      	nop
 8003d86:	e002      	b.n	8003d8e <HAL_RCCEx_PeriphCLKConfig+0x41a>
      break;
 8003d88:	bf00      	nop
 8003d8a:	e000      	b.n	8003d8e <HAL_RCCEx_PeriphCLKConfig+0x41a>
      break;
 8003d8c:	bf00      	nop
    }

    if(ret == HAL_OK)
 8003d8e:	7dfb      	ldrb	r3, [r7, #23]
 8003d90:	2b00      	cmp	r3, #0
 8003d92:	d109      	bne.n	8003da8 <HAL_RCCEx_PeriphCLKConfig+0x434>
    {
      /* Set the source of SPI4/5 clock*/
      __HAL_RCC_SPI45_CONFIG(PeriphClkInit->Spi45ClockSelection);
 8003d94:	4b73      	ldr	r3, [pc, #460]	; (8003f64 <HAL_RCCEx_PeriphCLKConfig+0x5f0>)
 8003d96:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003d98:	f423 22e0 	bic.w	r2, r3, #458752	; 0x70000
 8003d9c:	687b      	ldr	r3, [r7, #4]
 8003d9e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003da0:	4970      	ldr	r1, [pc, #448]	; (8003f64 <HAL_RCCEx_PeriphCLKConfig+0x5f0>)
 8003da2:	4313      	orrs	r3, r2
 8003da4:	650b      	str	r3, [r1, #80]	; 0x50
 8003da6:	e001      	b.n	8003dac <HAL_RCCEx_PeriphCLKConfig+0x438>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003da8:	7dfb      	ldrb	r3, [r7, #23]
 8003daa:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SPI6 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 8003dac:	687b      	ldr	r3, [r7, #4]
 8003dae:	681b      	ldr	r3, [r3, #0]
 8003db0:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003db4:	2b00      	cmp	r3, #0
 8003db6:	d04b      	beq.n	8003e50 <HAL_RCCEx_PeriphCLKConfig+0x4dc>
  {
    switch(PeriphClkInit->Spi6ClockSelection)
 8003db8:	687b      	ldr	r3, [r7, #4]
 8003dba:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 8003dbe:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8003dc2:	d02e      	beq.n	8003e22 <HAL_RCCEx_PeriphCLKConfig+0x4ae>
 8003dc4:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8003dc8:	d828      	bhi.n	8003e1c <HAL_RCCEx_PeriphCLKConfig+0x4a8>
 8003dca:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003dce:	d02a      	beq.n	8003e26 <HAL_RCCEx_PeriphCLKConfig+0x4b2>
 8003dd0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003dd4:	d822      	bhi.n	8003e1c <HAL_RCCEx_PeriphCLKConfig+0x4a8>
 8003dd6:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8003dda:	d026      	beq.n	8003e2a <HAL_RCCEx_PeriphCLKConfig+0x4b6>
 8003ddc:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8003de0:	d81c      	bhi.n	8003e1c <HAL_RCCEx_PeriphCLKConfig+0x4a8>
 8003de2:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8003de6:	d010      	beq.n	8003e0a <HAL_RCCEx_PeriphCLKConfig+0x496>
 8003de8:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8003dec:	d816      	bhi.n	8003e1c <HAL_RCCEx_PeriphCLKConfig+0x4a8>
 8003dee:	2b00      	cmp	r3, #0
 8003df0:	d01d      	beq.n	8003e2e <HAL_RCCEx_PeriphCLKConfig+0x4ba>
 8003df2:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8003df6:	d111      	bne.n	8003e1c <HAL_RCCEx_PeriphCLKConfig+0x4a8>
      /* SPI6 clock source configuration done later after clock selection check */
      break;

    case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI6*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8003df8:	687b      	ldr	r3, [r7, #4]
 8003dfa:	3304      	adds	r3, #4
 8003dfc:	2101      	movs	r1, #1
 8003dfe:	4618      	mov	r0, r3
 8003e00:	f000 ff70 	bl	8004ce4 <RCCEx_PLL2_Config>
 8003e04:	4603      	mov	r3, r0
 8003e06:	75fb      	strb	r3, [r7, #23]

      /* SPI6 clock source configuration done later after clock selection check */
      break;
 8003e08:	e012      	b.n	8003e30 <HAL_RCCEx_PeriphCLKConfig+0x4bc>
    case RCC_SPI6CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI6*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8003e0a:	687b      	ldr	r3, [r7, #4]
 8003e0c:	3324      	adds	r3, #36	; 0x24
 8003e0e:	2101      	movs	r1, #1
 8003e10:	4618      	mov	r0, r3
 8003e12:	f001 f819 	bl	8004e48 <RCCEx_PLL3_Config>
 8003e16:	4603      	mov	r3, r0
 8003e18:	75fb      	strb	r3, [r7, #23]
      /* SPI6 clock source configuration done later after clock selection check */
      break;
 8003e1a:	e009      	b.n	8003e30 <HAL_RCCEx_PeriphCLKConfig+0x4bc>
      /* SPI6 clock source configuration done later after clock selection check */
      break;
#endif

    default:
      ret = HAL_ERROR;
 8003e1c:	2301      	movs	r3, #1
 8003e1e:	75fb      	strb	r3, [r7, #23]
      break;
 8003e20:	e006      	b.n	8003e30 <HAL_RCCEx_PeriphCLKConfig+0x4bc>
      break;
 8003e22:	bf00      	nop
 8003e24:	e004      	b.n	8003e30 <HAL_RCCEx_PeriphCLKConfig+0x4bc>
      break;
 8003e26:	bf00      	nop
 8003e28:	e002      	b.n	8003e30 <HAL_RCCEx_PeriphCLKConfig+0x4bc>
      break;
 8003e2a:	bf00      	nop
 8003e2c:	e000      	b.n	8003e30 <HAL_RCCEx_PeriphCLKConfig+0x4bc>
      break;
 8003e2e:	bf00      	nop
    }

    if(ret == HAL_OK)
 8003e30:	7dfb      	ldrb	r3, [r7, #23]
 8003e32:	2b00      	cmp	r3, #0
 8003e34:	d10a      	bne.n	8003e4c <HAL_RCCEx_PeriphCLKConfig+0x4d8>
    {
      /* Set the source of SPI6 clock*/
      __HAL_RCC_SPI6_CONFIG(PeriphClkInit->Spi6ClockSelection);
 8003e36:	4b4b      	ldr	r3, [pc, #300]	; (8003f64 <HAL_RCCEx_PeriphCLKConfig+0x5f0>)
 8003e38:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003e3a:	f023 42e0 	bic.w	r2, r3, #1879048192	; 0x70000000
 8003e3e:	687b      	ldr	r3, [r7, #4]
 8003e40:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 8003e44:	4947      	ldr	r1, [pc, #284]	; (8003f64 <HAL_RCCEx_PeriphCLKConfig+0x5f0>)
 8003e46:	4313      	orrs	r3, r2
 8003e48:	658b      	str	r3, [r1, #88]	; 0x58
 8003e4a:	e001      	b.n	8003e50 <HAL_RCCEx_PeriphCLKConfig+0x4dc>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003e4c:	7dfb      	ldrb	r3, [r7, #23]
 8003e4e:	75bb      	strb	r3, [r7, #22]
  }
#endif /*DSI*/

#if defined(FDCAN1) || defined(FDCAN2)
  /*---------------------------- FDCAN configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8003e50:	687b      	ldr	r3, [r7, #4]
 8003e52:	681b      	ldr	r3, [r3, #0]
 8003e54:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8003e58:	2b00      	cmp	r3, #0
 8003e5a:	d02f      	beq.n	8003ebc <HAL_RCCEx_PeriphCLKConfig+0x548>
  {
    switch(PeriphClkInit->FdcanClockSelection)
 8003e5c:	687b      	ldr	r3, [r7, #4]
 8003e5e:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8003e60:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8003e64:	d00e      	beq.n	8003e84 <HAL_RCCEx_PeriphCLKConfig+0x510>
 8003e66:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8003e6a:	d814      	bhi.n	8003e96 <HAL_RCCEx_PeriphCLKConfig+0x522>
 8003e6c:	2b00      	cmp	r3, #0
 8003e6e:	d015      	beq.n	8003e9c <HAL_RCCEx_PeriphCLKConfig+0x528>
 8003e70:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8003e74:	d10f      	bne.n	8003e96 <HAL_RCCEx_PeriphCLKConfig+0x522>
    {
    case RCC_FDCANCLKSOURCE_PLL:      /* PLL is used as clock source for FDCAN*/
      /* Enable FDCAN Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003e76:	4b3b      	ldr	r3, [pc, #236]	; (8003f64 <HAL_RCCEx_PeriphCLKConfig+0x5f0>)
 8003e78:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003e7a:	4a3a      	ldr	r2, [pc, #232]	; (8003f64 <HAL_RCCEx_PeriphCLKConfig+0x5f0>)
 8003e7c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003e80:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* FDCAN clock source configuration done later after clock selection check */
      break;
 8003e82:	e00c      	b.n	8003e9e <HAL_RCCEx_PeriphCLKConfig+0x52a>

    case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is used as clock source for FDCAN*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8003e84:	687b      	ldr	r3, [r7, #4]
 8003e86:	3304      	adds	r3, #4
 8003e88:	2101      	movs	r1, #1
 8003e8a:	4618      	mov	r0, r3
 8003e8c:	f000 ff2a 	bl	8004ce4 <RCCEx_PLL2_Config>
 8003e90:	4603      	mov	r3, r0
 8003e92:	75fb      	strb	r3, [r7, #23]

      /* FDCAN clock source configuration done later after clock selection check */
      break;
 8003e94:	e003      	b.n	8003e9e <HAL_RCCEx_PeriphCLKConfig+0x52a>
      /* HSE is used as clock source for FDCAN*/
      /* FDCAN clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8003e96:	2301      	movs	r3, #1
 8003e98:	75fb      	strb	r3, [r7, #23]
      break;
 8003e9a:	e000      	b.n	8003e9e <HAL_RCCEx_PeriphCLKConfig+0x52a>
      break;
 8003e9c:	bf00      	nop
    }

    if(ret == HAL_OK)
 8003e9e:	7dfb      	ldrb	r3, [r7, #23]
 8003ea0:	2b00      	cmp	r3, #0
 8003ea2:	d109      	bne.n	8003eb8 <HAL_RCCEx_PeriphCLKConfig+0x544>
    {
      /* Set the source of FDCAN clock*/
      __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 8003ea4:	4b2f      	ldr	r3, [pc, #188]	; (8003f64 <HAL_RCCEx_PeriphCLKConfig+0x5f0>)
 8003ea6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003ea8:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8003eac:	687b      	ldr	r3, [r7, #4]
 8003eae:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8003eb0:	492c      	ldr	r1, [pc, #176]	; (8003f64 <HAL_RCCEx_PeriphCLKConfig+0x5f0>)
 8003eb2:	4313      	orrs	r3, r2
 8003eb4:	650b      	str	r3, [r1, #80]	; 0x50
 8003eb6:	e001      	b.n	8003ebc <HAL_RCCEx_PeriphCLKConfig+0x548>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003eb8:	7dfb      	ldrb	r3, [r7, #23]
 8003eba:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif /*FDCAN1 || FDCAN2*/

  /*---------------------------- FMC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
 8003ebc:	687b      	ldr	r3, [r7, #4]
 8003ebe:	681b      	ldr	r3, [r3, #0]
 8003ec0:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8003ec4:	2b00      	cmp	r3, #0
 8003ec6:	d032      	beq.n	8003f2e <HAL_RCCEx_PeriphCLKConfig+0x5ba>
  {
    switch(PeriphClkInit->FmcClockSelection)
 8003ec8:	687b      	ldr	r3, [r7, #4]
 8003eca:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003ecc:	2b03      	cmp	r3, #3
 8003ece:	d81b      	bhi.n	8003f08 <HAL_RCCEx_PeriphCLKConfig+0x594>
 8003ed0:	a201      	add	r2, pc, #4	; (adr r2, 8003ed8 <HAL_RCCEx_PeriphCLKConfig+0x564>)
 8003ed2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003ed6:	bf00      	nop
 8003ed8:	08003f0f 	.word	0x08003f0f
 8003edc:	08003ee9 	.word	0x08003ee9
 8003ee0:	08003ef7 	.word	0x08003ef7
 8003ee4:	08003f0f 	.word	0x08003f0f
    {
    case RCC_FMCCLKSOURCE_PLL:      /* PLL is used as clock source for FMC*/
      /* Enable FMC Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003ee8:	4b1e      	ldr	r3, [pc, #120]	; (8003f64 <HAL_RCCEx_PeriphCLKConfig+0x5f0>)
 8003eea:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003eec:	4a1d      	ldr	r2, [pc, #116]	; (8003f64 <HAL_RCCEx_PeriphCLKConfig+0x5f0>)
 8003eee:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003ef2:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* FMC clock source configuration done later after clock selection check */
      break;
 8003ef4:	e00c      	b.n	8003f10 <HAL_RCCEx_PeriphCLKConfig+0x59c>

    case RCC_FMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for FMC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 8003ef6:	687b      	ldr	r3, [r7, #4]
 8003ef8:	3304      	adds	r3, #4
 8003efa:	2102      	movs	r1, #2
 8003efc:	4618      	mov	r0, r3
 8003efe:	f000 fef1 	bl	8004ce4 <RCCEx_PLL2_Config>
 8003f02:	4603      	mov	r3, r0
 8003f04:	75fb      	strb	r3, [r7, #23]

      /* FMC clock source configuration done later after clock selection check */
      break;
 8003f06:	e003      	b.n	8003f10 <HAL_RCCEx_PeriphCLKConfig+0x59c>
    case RCC_FMCCLKSOURCE_HCLK:
      /* D1/CD HCLK  clock selected as FMC kernel peripheral clock */
      break;

    default:
      ret = HAL_ERROR;
 8003f08:	2301      	movs	r3, #1
 8003f0a:	75fb      	strb	r3, [r7, #23]
      break;
 8003f0c:	e000      	b.n	8003f10 <HAL_RCCEx_PeriphCLKConfig+0x59c>
      break;
 8003f0e:	bf00      	nop
    }

    if(ret == HAL_OK)
 8003f10:	7dfb      	ldrb	r3, [r7, #23]
 8003f12:	2b00      	cmp	r3, #0
 8003f14:	d109      	bne.n	8003f2a <HAL_RCCEx_PeriphCLKConfig+0x5b6>
    {
      /* Set the source of FMC clock*/
      __HAL_RCC_FMC_CONFIG(PeriphClkInit->FmcClockSelection);
 8003f16:	4b13      	ldr	r3, [pc, #76]	; (8003f64 <HAL_RCCEx_PeriphCLKConfig+0x5f0>)
 8003f18:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003f1a:	f023 0203 	bic.w	r2, r3, #3
 8003f1e:	687b      	ldr	r3, [r7, #4]
 8003f20:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003f22:	4910      	ldr	r1, [pc, #64]	; (8003f64 <HAL_RCCEx_PeriphCLKConfig+0x5f0>)
 8003f24:	4313      	orrs	r3, r2
 8003f26:	64cb      	str	r3, [r1, #76]	; 0x4c
 8003f28:	e001      	b.n	8003f2e <HAL_RCCEx_PeriphCLKConfig+0x5ba>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003f2a:	7dfb      	ldrb	r3, [r7, #23]
 8003f2c:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8003f2e:	687b      	ldr	r3, [r7, #4]
 8003f30:	681b      	ldr	r3, [r3, #0]
 8003f32:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003f36:	2b00      	cmp	r3, #0
 8003f38:	f000 808a 	beq.w	8004050 <HAL_RCCEx_PeriphCLKConfig+0x6dc>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8003f3c:	4b0a      	ldr	r3, [pc, #40]	; (8003f68 <HAL_RCCEx_PeriphCLKConfig+0x5f4>)
 8003f3e:	681b      	ldr	r3, [r3, #0]
 8003f40:	4a09      	ldr	r2, [pc, #36]	; (8003f68 <HAL_RCCEx_PeriphCLKConfig+0x5f4>)
 8003f42:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003f46:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8003f48:	f7fd f956 	bl	80011f8 <HAL_GetTick>
 8003f4c:	6138      	str	r0, [r7, #16]

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8003f4e:	e00d      	b.n	8003f6c <HAL_RCCEx_PeriphCLKConfig+0x5f8>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003f50:	f7fd f952 	bl	80011f8 <HAL_GetTick>
 8003f54:	4602      	mov	r2, r0
 8003f56:	693b      	ldr	r3, [r7, #16]
 8003f58:	1ad3      	subs	r3, r2, r3
 8003f5a:	2b64      	cmp	r3, #100	; 0x64
 8003f5c:	d906      	bls.n	8003f6c <HAL_RCCEx_PeriphCLKConfig+0x5f8>
      {
        ret = HAL_TIMEOUT;
 8003f5e:	2303      	movs	r3, #3
 8003f60:	75fb      	strb	r3, [r7, #23]
        break;
 8003f62:	e009      	b.n	8003f78 <HAL_RCCEx_PeriphCLKConfig+0x604>
 8003f64:	58024400 	.word	0x58024400
 8003f68:	58024800 	.word	0x58024800
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8003f6c:	4bb9      	ldr	r3, [pc, #740]	; (8004254 <HAL_RCCEx_PeriphCLKConfig+0x8e0>)
 8003f6e:	681b      	ldr	r3, [r3, #0]
 8003f70:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003f74:	2b00      	cmp	r3, #0
 8003f76:	d0eb      	beq.n	8003f50 <HAL_RCCEx_PeriphCLKConfig+0x5dc>
      }
    }

    if(ret == HAL_OK)
 8003f78:	7dfb      	ldrb	r3, [r7, #23]
 8003f7a:	2b00      	cmp	r3, #0
 8003f7c:	d166      	bne.n	800404c <HAL_RCCEx_PeriphCLKConfig+0x6d8>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if((RCC->BDCR & RCC_BDCR_RTCSEL) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL))
 8003f7e:	4bb6      	ldr	r3, [pc, #728]	; (8004258 <HAL_RCCEx_PeriphCLKConfig+0x8e4>)
 8003f80:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8003f82:	687b      	ldr	r3, [r7, #4]
 8003f84:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 8003f88:	4053      	eors	r3, r2
 8003f8a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003f8e:	2b00      	cmp	r3, #0
 8003f90:	d013      	beq.n	8003fba <HAL_RCCEx_PeriphCLKConfig+0x646>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8003f92:	4bb1      	ldr	r3, [pc, #708]	; (8004258 <HAL_RCCEx_PeriphCLKConfig+0x8e4>)
 8003f94:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003f96:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003f9a:	60fb      	str	r3, [r7, #12]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8003f9c:	4bae      	ldr	r3, [pc, #696]	; (8004258 <HAL_RCCEx_PeriphCLKConfig+0x8e4>)
 8003f9e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003fa0:	4aad      	ldr	r2, [pc, #692]	; (8004258 <HAL_RCCEx_PeriphCLKConfig+0x8e4>)
 8003fa2:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003fa6:	6713      	str	r3, [r2, #112]	; 0x70
        __HAL_RCC_BACKUPRESET_RELEASE();
 8003fa8:	4bab      	ldr	r3, [pc, #684]	; (8004258 <HAL_RCCEx_PeriphCLKConfig+0x8e4>)
 8003faa:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003fac:	4aaa      	ldr	r2, [pc, #680]	; (8004258 <HAL_RCCEx_PeriphCLKConfig+0x8e4>)
 8003fae:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003fb2:	6713      	str	r3, [r2, #112]	; 0x70
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpreg;
 8003fb4:	4aa8      	ldr	r2, [pc, #672]	; (8004258 <HAL_RCCEx_PeriphCLKConfig+0x8e4>)
 8003fb6:	68fb      	ldr	r3, [r7, #12]
 8003fb8:	6713      	str	r3, [r2, #112]	; 0x70
      }

      /* If LSE is selected as RTC clock source (and enabled prior to Backup Domain reset), wait for LSE reactivation */
      if(PeriphClkInit->RTCClockSelection == RCC_RTCCLKSOURCE_LSE)
 8003fba:	687b      	ldr	r3, [r7, #4]
 8003fbc:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 8003fc0:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003fc4:	d115      	bne.n	8003ff2 <HAL_RCCEx_PeriphCLKConfig+0x67e>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003fc6:	f7fd f917 	bl	80011f8 <HAL_GetTick>
 8003fca:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8003fcc:	e00b      	b.n	8003fe6 <HAL_RCCEx_PeriphCLKConfig+0x672>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003fce:	f7fd f913 	bl	80011f8 <HAL_GetTick>
 8003fd2:	4602      	mov	r2, r0
 8003fd4:	693b      	ldr	r3, [r7, #16]
 8003fd6:	1ad3      	subs	r3, r2, r3
 8003fd8:	f241 3288 	movw	r2, #5000	; 0x1388
 8003fdc:	4293      	cmp	r3, r2
 8003fde:	d902      	bls.n	8003fe6 <HAL_RCCEx_PeriphCLKConfig+0x672>
          {
            ret = HAL_TIMEOUT;
 8003fe0:	2303      	movs	r3, #3
 8003fe2:	75fb      	strb	r3, [r7, #23]
            break;
 8003fe4:	e005      	b.n	8003ff2 <HAL_RCCEx_PeriphCLKConfig+0x67e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8003fe6:	4b9c      	ldr	r3, [pc, #624]	; (8004258 <HAL_RCCEx_PeriphCLKConfig+0x8e4>)
 8003fe8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003fea:	f003 0302 	and.w	r3, r3, #2
 8003fee:	2b00      	cmp	r3, #0
 8003ff0:	d0ed      	beq.n	8003fce <HAL_RCCEx_PeriphCLKConfig+0x65a>
          }
        }
      }

      if(ret == HAL_OK)
 8003ff2:	7dfb      	ldrb	r3, [r7, #23]
 8003ff4:	2b00      	cmp	r3, #0
 8003ff6:	d126      	bne.n	8004046 <HAL_RCCEx_PeriphCLKConfig+0x6d2>
      {
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8003ff8:	687b      	ldr	r3, [r7, #4]
 8003ffa:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 8003ffe:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004002:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8004006:	d10d      	bne.n	8004024 <HAL_RCCEx_PeriphCLKConfig+0x6b0>
 8004008:	4b93      	ldr	r3, [pc, #588]	; (8004258 <HAL_RCCEx_PeriphCLKConfig+0x8e4>)
 800400a:	691b      	ldr	r3, [r3, #16]
 800400c:	f423 527c 	bic.w	r2, r3, #16128	; 0x3f00
 8004010:	687b      	ldr	r3, [r7, #4]
 8004012:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 8004016:	0919      	lsrs	r1, r3, #4
 8004018:	4b90      	ldr	r3, [pc, #576]	; (800425c <HAL_RCCEx_PeriphCLKConfig+0x8e8>)
 800401a:	400b      	ands	r3, r1
 800401c:	498e      	ldr	r1, [pc, #568]	; (8004258 <HAL_RCCEx_PeriphCLKConfig+0x8e4>)
 800401e:	4313      	orrs	r3, r2
 8004020:	610b      	str	r3, [r1, #16]
 8004022:	e005      	b.n	8004030 <HAL_RCCEx_PeriphCLKConfig+0x6bc>
 8004024:	4b8c      	ldr	r3, [pc, #560]	; (8004258 <HAL_RCCEx_PeriphCLKConfig+0x8e4>)
 8004026:	691b      	ldr	r3, [r3, #16]
 8004028:	4a8b      	ldr	r2, [pc, #556]	; (8004258 <HAL_RCCEx_PeriphCLKConfig+0x8e4>)
 800402a:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 800402e:	6113      	str	r3, [r2, #16]
 8004030:	4b89      	ldr	r3, [pc, #548]	; (8004258 <HAL_RCCEx_PeriphCLKConfig+0x8e4>)
 8004032:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8004034:	687b      	ldr	r3, [r7, #4]
 8004036:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 800403a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800403e:	4986      	ldr	r1, [pc, #536]	; (8004258 <HAL_RCCEx_PeriphCLKConfig+0x8e4>)
 8004040:	4313      	orrs	r3, r2
 8004042:	670b      	str	r3, [r1, #112]	; 0x70
 8004044:	e004      	b.n	8004050 <HAL_RCCEx_PeriphCLKConfig+0x6dc>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8004046:	7dfb      	ldrb	r3, [r7, #23]
 8004048:	75bb      	strb	r3, [r7, #22]
 800404a:	e001      	b.n	8004050 <HAL_RCCEx_PeriphCLKConfig+0x6dc>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 800404c:	7dfb      	ldrb	r3, [r7, #23]
 800404e:	75bb      	strb	r3, [r7, #22]
    }
  }


  /*-------------------------- USART1/6 configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
 8004050:	687b      	ldr	r3, [r7, #4]
 8004052:	681b      	ldr	r3, [r3, #0]
 8004054:	f003 0301 	and.w	r3, r3, #1
 8004058:	2b00      	cmp	r3, #0
 800405a:	d07e      	beq.n	800415a <HAL_RCCEx_PeriphCLKConfig+0x7e6>
  {
    switch(PeriphClkInit->Usart16ClockSelection)
 800405c:	687b      	ldr	r3, [r7, #4]
 800405e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004060:	2b28      	cmp	r3, #40	; 0x28
 8004062:	d867      	bhi.n	8004134 <HAL_RCCEx_PeriphCLKConfig+0x7c0>
 8004064:	a201      	add	r2, pc, #4	; (adr r2, 800406c <HAL_RCCEx_PeriphCLKConfig+0x6f8>)
 8004066:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800406a:	bf00      	nop
 800406c:	0800413b 	.word	0x0800413b
 8004070:	08004135 	.word	0x08004135
 8004074:	08004135 	.word	0x08004135
 8004078:	08004135 	.word	0x08004135
 800407c:	08004135 	.word	0x08004135
 8004080:	08004135 	.word	0x08004135
 8004084:	08004135 	.word	0x08004135
 8004088:	08004135 	.word	0x08004135
 800408c:	08004111 	.word	0x08004111
 8004090:	08004135 	.word	0x08004135
 8004094:	08004135 	.word	0x08004135
 8004098:	08004135 	.word	0x08004135
 800409c:	08004135 	.word	0x08004135
 80040a0:	08004135 	.word	0x08004135
 80040a4:	08004135 	.word	0x08004135
 80040a8:	08004135 	.word	0x08004135
 80040ac:	08004123 	.word	0x08004123
 80040b0:	08004135 	.word	0x08004135
 80040b4:	08004135 	.word	0x08004135
 80040b8:	08004135 	.word	0x08004135
 80040bc:	08004135 	.word	0x08004135
 80040c0:	08004135 	.word	0x08004135
 80040c4:	08004135 	.word	0x08004135
 80040c8:	08004135 	.word	0x08004135
 80040cc:	0800413b 	.word	0x0800413b
 80040d0:	08004135 	.word	0x08004135
 80040d4:	08004135 	.word	0x08004135
 80040d8:	08004135 	.word	0x08004135
 80040dc:	08004135 	.word	0x08004135
 80040e0:	08004135 	.word	0x08004135
 80040e4:	08004135 	.word	0x08004135
 80040e8:	08004135 	.word	0x08004135
 80040ec:	0800413b 	.word	0x0800413b
 80040f0:	08004135 	.word	0x08004135
 80040f4:	08004135 	.word	0x08004135
 80040f8:	08004135 	.word	0x08004135
 80040fc:	08004135 	.word	0x08004135
 8004100:	08004135 	.word	0x08004135
 8004104:	08004135 	.word	0x08004135
 8004108:	08004135 	.word	0x08004135
 800410c:	0800413b 	.word	0x0800413b
    case RCC_USART16CLKSOURCE_PCLK2: /* CD/D2 PCLK2 as clock source for USART1/6 */
      /* USART1/6 clock source configuration done later after clock selection check */
      break;

    case RCC_USART16CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART1/6 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8004110:	687b      	ldr	r3, [r7, #4]
 8004112:	3304      	adds	r3, #4
 8004114:	2101      	movs	r1, #1
 8004116:	4618      	mov	r0, r3
 8004118:	f000 fde4 	bl	8004ce4 <RCCEx_PLL2_Config>
 800411c:	4603      	mov	r3, r0
 800411e:	75fb      	strb	r3, [r7, #23]
      /* USART1/6 clock source configuration done later after clock selection check */
      break;
 8004120:	e00c      	b.n	800413c <HAL_RCCEx_PeriphCLKConfig+0x7c8>

    case RCC_USART16CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART1/6 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8004122:	687b      	ldr	r3, [r7, #4]
 8004124:	3324      	adds	r3, #36	; 0x24
 8004126:	2101      	movs	r1, #1
 8004128:	4618      	mov	r0, r3
 800412a:	f000 fe8d 	bl	8004e48 <RCCEx_PLL3_Config>
 800412e:	4603      	mov	r3, r0
 8004130:	75fb      	strb	r3, [r7, #23]
      /* USART1/6 clock source configuration done later after clock selection check */
      break;
 8004132:	e003      	b.n	800413c <HAL_RCCEx_PeriphCLKConfig+0x7c8>
      /* LSE,  oscillator is used as source of USART1/6 clock */
      /* USART1/6 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8004134:	2301      	movs	r3, #1
 8004136:	75fb      	strb	r3, [r7, #23]
      break;
 8004138:	e000      	b.n	800413c <HAL_RCCEx_PeriphCLKConfig+0x7c8>
      break;
 800413a:	bf00      	nop
    }

    if(ret == HAL_OK)
 800413c:	7dfb      	ldrb	r3, [r7, #23]
 800413e:	2b00      	cmp	r3, #0
 8004140:	d109      	bne.n	8004156 <HAL_RCCEx_PeriphCLKConfig+0x7e2>
    {
      /* Set the source of USART1/6 clock */
      __HAL_RCC_USART16_CONFIG(PeriphClkInit->Usart16ClockSelection);
 8004142:	4b45      	ldr	r3, [pc, #276]	; (8004258 <HAL_RCCEx_PeriphCLKConfig+0x8e4>)
 8004144:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004146:	f023 0238 	bic.w	r2, r3, #56	; 0x38
 800414a:	687b      	ldr	r3, [r7, #4]
 800414c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800414e:	4942      	ldr	r1, [pc, #264]	; (8004258 <HAL_RCCEx_PeriphCLKConfig+0x8e4>)
 8004150:	4313      	orrs	r3, r2
 8004152:	654b      	str	r3, [r1, #84]	; 0x54
 8004154:	e001      	b.n	800415a <HAL_RCCEx_PeriphCLKConfig+0x7e6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004156:	7dfb      	ldrb	r3, [r7, #23]
 8004158:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*-------------------------- USART2/3/4/5/7/8 Configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
 800415a:	687b      	ldr	r3, [r7, #4]
 800415c:	681b      	ldr	r3, [r3, #0]
 800415e:	f003 0302 	and.w	r3, r3, #2
 8004162:	2b00      	cmp	r3, #0
 8004164:	d037      	beq.n	80041d6 <HAL_RCCEx_PeriphCLKConfig+0x862>
  {
    switch(PeriphClkInit->Usart234578ClockSelection)
 8004166:	687b      	ldr	r3, [r7, #4]
 8004168:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800416a:	2b05      	cmp	r3, #5
 800416c:	d820      	bhi.n	80041b0 <HAL_RCCEx_PeriphCLKConfig+0x83c>
 800416e:	a201      	add	r2, pc, #4	; (adr r2, 8004174 <HAL_RCCEx_PeriphCLKConfig+0x800>)
 8004170:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004174:	080041b7 	.word	0x080041b7
 8004178:	0800418d 	.word	0x0800418d
 800417c:	0800419f 	.word	0x0800419f
 8004180:	080041b7 	.word	0x080041b7
 8004184:	080041b7 	.word	0x080041b7
 8004188:	080041b7 	.word	0x080041b7
    case RCC_USART234578CLKSOURCE_PCLK1: /* CD/D2 PCLK1 as clock source for USART2/3/4/5/7/8 */
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;

    case RCC_USART234578CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART2/3/4/5/7/8 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 800418c:	687b      	ldr	r3, [r7, #4]
 800418e:	3304      	adds	r3, #4
 8004190:	2101      	movs	r1, #1
 8004192:	4618      	mov	r0, r3
 8004194:	f000 fda6 	bl	8004ce4 <RCCEx_PLL2_Config>
 8004198:	4603      	mov	r3, r0
 800419a:	75fb      	strb	r3, [r7, #23]
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;
 800419c:	e00c      	b.n	80041b8 <HAL_RCCEx_PeriphCLKConfig+0x844>

    case RCC_USART234578CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART2/3/4/5/7/8 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 800419e:	687b      	ldr	r3, [r7, #4]
 80041a0:	3324      	adds	r3, #36	; 0x24
 80041a2:	2101      	movs	r1, #1
 80041a4:	4618      	mov	r0, r3
 80041a6:	f000 fe4f 	bl	8004e48 <RCCEx_PLL3_Config>
 80041aa:	4603      	mov	r3, r0
 80041ac:	75fb      	strb	r3, [r7, #23]
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;
 80041ae:	e003      	b.n	80041b8 <HAL_RCCEx_PeriphCLKConfig+0x844>
      /* LSE,  oscillator is used as source of USART2/3/4/5/7/8 clock */
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80041b0:	2301      	movs	r3, #1
 80041b2:	75fb      	strb	r3, [r7, #23]
      break;
 80041b4:	e000      	b.n	80041b8 <HAL_RCCEx_PeriphCLKConfig+0x844>
      break;
 80041b6:	bf00      	nop
    }

    if(ret == HAL_OK)
 80041b8:	7dfb      	ldrb	r3, [r7, #23]
 80041ba:	2b00      	cmp	r3, #0
 80041bc:	d109      	bne.n	80041d2 <HAL_RCCEx_PeriphCLKConfig+0x85e>
    {
      /* Set the source of USART2/3/4/5/7/8 clock */
      __HAL_RCC_USART234578_CONFIG(PeriphClkInit->Usart234578ClockSelection);
 80041be:	4b26      	ldr	r3, [pc, #152]	; (8004258 <HAL_RCCEx_PeriphCLKConfig+0x8e4>)
 80041c0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80041c2:	f023 0207 	bic.w	r2, r3, #7
 80041c6:	687b      	ldr	r3, [r7, #4]
 80041c8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80041ca:	4923      	ldr	r1, [pc, #140]	; (8004258 <HAL_RCCEx_PeriphCLKConfig+0x8e4>)
 80041cc:	4313      	orrs	r3, r2
 80041ce:	654b      	str	r3, [r1, #84]	; 0x54
 80041d0:	e001      	b.n	80041d6 <HAL_RCCEx_PeriphCLKConfig+0x862>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80041d2:	7dfb      	ldrb	r3, [r7, #23]
 80041d4:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*-------------------------- LPUART1 Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 80041d6:	687b      	ldr	r3, [r7, #4]
 80041d8:	681b      	ldr	r3, [r3, #0]
 80041da:	f003 0304 	and.w	r3, r3, #4
 80041de:	2b00      	cmp	r3, #0
 80041e0:	d040      	beq.n	8004264 <HAL_RCCEx_PeriphCLKConfig+0x8f0>
  {
    switch(PeriphClkInit->Lpuart1ClockSelection)
 80041e2:	687b      	ldr	r3, [r7, #4]
 80041e4:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80041e8:	2b05      	cmp	r3, #5
 80041ea:	d821      	bhi.n	8004230 <HAL_RCCEx_PeriphCLKConfig+0x8bc>
 80041ec:	a201      	add	r2, pc, #4	; (adr r2, 80041f4 <HAL_RCCEx_PeriphCLKConfig+0x880>)
 80041ee:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80041f2:	bf00      	nop
 80041f4:	08004237 	.word	0x08004237
 80041f8:	0800420d 	.word	0x0800420d
 80041fc:	0800421f 	.word	0x0800421f
 8004200:	08004237 	.word	0x08004237
 8004204:	08004237 	.word	0x08004237
 8004208:	08004237 	.word	0x08004237
    case RCC_LPUART1CLKSOURCE_PCLK4: /* SRD/D3 PCLK1 (PCLK4) as clock source for LPUART1 */
      /* LPUART1 clock source configuration done later after clock selection check */
      break;

    case RCC_LPUART1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPUART1 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 800420c:	687b      	ldr	r3, [r7, #4]
 800420e:	3304      	adds	r3, #4
 8004210:	2101      	movs	r1, #1
 8004212:	4618      	mov	r0, r3
 8004214:	f000 fd66 	bl	8004ce4 <RCCEx_PLL2_Config>
 8004218:	4603      	mov	r3, r0
 800421a:	75fb      	strb	r3, [r7, #23]
      /* LPUART1 clock source configuration done later after clock selection check */
      break;
 800421c:	e00c      	b.n	8004238 <HAL_RCCEx_PeriphCLKConfig+0x8c4>

    case RCC_LPUART1CLKSOURCE_PLL3: /* PLL3 is used as clock source for LPUART1 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 800421e:	687b      	ldr	r3, [r7, #4]
 8004220:	3324      	adds	r3, #36	; 0x24
 8004222:	2101      	movs	r1, #1
 8004224:	4618      	mov	r0, r3
 8004226:	f000 fe0f 	bl	8004e48 <RCCEx_PLL3_Config>
 800422a:	4603      	mov	r3, r0
 800422c:	75fb      	strb	r3, [r7, #23]
      /* LPUART1 clock source configuration done later after clock selection check */
      break;
 800422e:	e003      	b.n	8004238 <HAL_RCCEx_PeriphCLKConfig+0x8c4>
      /* LSE,  oscillator is used as source of LPUART1 clock */
      /* LPUART1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8004230:	2301      	movs	r3, #1
 8004232:	75fb      	strb	r3, [r7, #23]
      break;
 8004234:	e000      	b.n	8004238 <HAL_RCCEx_PeriphCLKConfig+0x8c4>
      break;
 8004236:	bf00      	nop
    }

    if(ret == HAL_OK)
 8004238:	7dfb      	ldrb	r3, [r7, #23]
 800423a:	2b00      	cmp	r3, #0
 800423c:	d110      	bne.n	8004260 <HAL_RCCEx_PeriphCLKConfig+0x8ec>
    {
      /* Set the source of LPUART1 clock */
      __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 800423e:	4b06      	ldr	r3, [pc, #24]	; (8004258 <HAL_RCCEx_PeriphCLKConfig+0x8e4>)
 8004240:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004242:	f023 0207 	bic.w	r2, r3, #7
 8004246:	687b      	ldr	r3, [r7, #4]
 8004248:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800424c:	4902      	ldr	r1, [pc, #8]	; (8004258 <HAL_RCCEx_PeriphCLKConfig+0x8e4>)
 800424e:	4313      	orrs	r3, r2
 8004250:	658b      	str	r3, [r1, #88]	; 0x58
 8004252:	e007      	b.n	8004264 <HAL_RCCEx_PeriphCLKConfig+0x8f0>
 8004254:	58024800 	.word	0x58024800
 8004258:	58024400 	.word	0x58024400
 800425c:	00ffffcf 	.word	0x00ffffcf
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004260:	7dfb      	ldrb	r3, [r7, #23]
 8004262:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM1 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8004264:	687b      	ldr	r3, [r7, #4]
 8004266:	681b      	ldr	r3, [r3, #0]
 8004268:	f003 0320 	and.w	r3, r3, #32
 800426c:	2b00      	cmp	r3, #0
 800426e:	d04b      	beq.n	8004308 <HAL_RCCEx_PeriphCLKConfig+0x994>
  {
    switch(PeriphClkInit->Lptim1ClockSelection)
 8004270:	687b      	ldr	r3, [r7, #4]
 8004272:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004276:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800427a:	d02e      	beq.n	80042da <HAL_RCCEx_PeriphCLKConfig+0x966>
 800427c:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8004280:	d828      	bhi.n	80042d4 <HAL_RCCEx_PeriphCLKConfig+0x960>
 8004282:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004286:	d02a      	beq.n	80042de <HAL_RCCEx_PeriphCLKConfig+0x96a>
 8004288:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800428c:	d822      	bhi.n	80042d4 <HAL_RCCEx_PeriphCLKConfig+0x960>
 800428e:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8004292:	d026      	beq.n	80042e2 <HAL_RCCEx_PeriphCLKConfig+0x96e>
 8004294:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8004298:	d81c      	bhi.n	80042d4 <HAL_RCCEx_PeriphCLKConfig+0x960>
 800429a:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800429e:	d010      	beq.n	80042c2 <HAL_RCCEx_PeriphCLKConfig+0x94e>
 80042a0:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80042a4:	d816      	bhi.n	80042d4 <HAL_RCCEx_PeriphCLKConfig+0x960>
 80042a6:	2b00      	cmp	r3, #0
 80042a8:	d01d      	beq.n	80042e6 <HAL_RCCEx_PeriphCLKConfig+0x972>
 80042aa:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80042ae:	d111      	bne.n	80042d4 <HAL_RCCEx_PeriphCLKConfig+0x960>
      /* LPTIM1 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM1*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 80042b0:	687b      	ldr	r3, [r7, #4]
 80042b2:	3304      	adds	r3, #4
 80042b4:	2100      	movs	r1, #0
 80042b6:	4618      	mov	r0, r3
 80042b8:	f000 fd14 	bl	8004ce4 <RCCEx_PLL2_Config>
 80042bc:	4603      	mov	r3, r0
 80042be:	75fb      	strb	r3, [r7, #23]

      /* LPTIM1 clock source configuration done later after clock selection check */
      break;
 80042c0:	e012      	b.n	80042e8 <HAL_RCCEx_PeriphCLKConfig+0x974>

    case RCC_LPTIM1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM1*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 80042c2:	687b      	ldr	r3, [r7, #4]
 80042c4:	3324      	adds	r3, #36	; 0x24
 80042c6:	2102      	movs	r1, #2
 80042c8:	4618      	mov	r0, r3
 80042ca:	f000 fdbd 	bl	8004e48 <RCCEx_PLL3_Config>
 80042ce:	4603      	mov	r3, r0
 80042d0:	75fb      	strb	r3, [r7, #23]

      /* LPTIM1 clock source configuration done later after clock selection check */
      break;
 80042d2:	e009      	b.n	80042e8 <HAL_RCCEx_PeriphCLKConfig+0x974>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM1 clock */
      /* LPTIM1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80042d4:	2301      	movs	r3, #1
 80042d6:	75fb      	strb	r3, [r7, #23]
      break;
 80042d8:	e006      	b.n	80042e8 <HAL_RCCEx_PeriphCLKConfig+0x974>
      break;
 80042da:	bf00      	nop
 80042dc:	e004      	b.n	80042e8 <HAL_RCCEx_PeriphCLKConfig+0x974>
      break;
 80042de:	bf00      	nop
 80042e0:	e002      	b.n	80042e8 <HAL_RCCEx_PeriphCLKConfig+0x974>
      break;
 80042e2:	bf00      	nop
 80042e4:	e000      	b.n	80042e8 <HAL_RCCEx_PeriphCLKConfig+0x974>
      break;
 80042e6:	bf00      	nop
    }

    if(ret == HAL_OK)
 80042e8:	7dfb      	ldrb	r3, [r7, #23]
 80042ea:	2b00      	cmp	r3, #0
 80042ec:	d10a      	bne.n	8004304 <HAL_RCCEx_PeriphCLKConfig+0x990>
    {
      /* Set the source of LPTIM1 clock*/
      __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 80042ee:	4bb2      	ldr	r3, [pc, #712]	; (80045b8 <HAL_RCCEx_PeriphCLKConfig+0xc44>)
 80042f0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80042f2:	f023 42e0 	bic.w	r2, r3, #1879048192	; 0x70000000
 80042f6:	687b      	ldr	r3, [r7, #4]
 80042f8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80042fc:	49ae      	ldr	r1, [pc, #696]	; (80045b8 <HAL_RCCEx_PeriphCLKConfig+0xc44>)
 80042fe:	4313      	orrs	r3, r2
 8004300:	654b      	str	r3, [r1, #84]	; 0x54
 8004302:	e001      	b.n	8004308 <HAL_RCCEx_PeriphCLKConfig+0x994>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004304:	7dfb      	ldrb	r3, [r7, #23]
 8004306:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM2 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 8004308:	687b      	ldr	r3, [r7, #4]
 800430a:	681b      	ldr	r3, [r3, #0]
 800430c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004310:	2b00      	cmp	r3, #0
 8004312:	d04b      	beq.n	80043ac <HAL_RCCEx_PeriphCLKConfig+0xa38>
  {
    switch(PeriphClkInit->Lptim2ClockSelection)
 8004314:	687b      	ldr	r3, [r7, #4]
 8004316:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800431a:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 800431e:	d02e      	beq.n	800437e <HAL_RCCEx_PeriphCLKConfig+0xa0a>
 8004320:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 8004324:	d828      	bhi.n	8004378 <HAL_RCCEx_PeriphCLKConfig+0xa04>
 8004326:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800432a:	d02a      	beq.n	8004382 <HAL_RCCEx_PeriphCLKConfig+0xa0e>
 800432c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004330:	d822      	bhi.n	8004378 <HAL_RCCEx_PeriphCLKConfig+0xa04>
 8004332:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8004336:	d026      	beq.n	8004386 <HAL_RCCEx_PeriphCLKConfig+0xa12>
 8004338:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800433c:	d81c      	bhi.n	8004378 <HAL_RCCEx_PeriphCLKConfig+0xa04>
 800433e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004342:	d010      	beq.n	8004366 <HAL_RCCEx_PeriphCLKConfig+0x9f2>
 8004344:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004348:	d816      	bhi.n	8004378 <HAL_RCCEx_PeriphCLKConfig+0xa04>
 800434a:	2b00      	cmp	r3, #0
 800434c:	d01d      	beq.n	800438a <HAL_RCCEx_PeriphCLKConfig+0xa16>
 800434e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004352:	d111      	bne.n	8004378 <HAL_RCCEx_PeriphCLKConfig+0xa04>
      /* LPTIM2 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM2CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8004354:	687b      	ldr	r3, [r7, #4]
 8004356:	3304      	adds	r3, #4
 8004358:	2100      	movs	r1, #0
 800435a:	4618      	mov	r0, r3
 800435c:	f000 fcc2 	bl	8004ce4 <RCCEx_PLL2_Config>
 8004360:	4603      	mov	r3, r0
 8004362:	75fb      	strb	r3, [r7, #23]

      /* LPTIM2 clock source configuration done later after clock selection check */
      break;
 8004364:	e012      	b.n	800438c <HAL_RCCEx_PeriphCLKConfig+0xa18>

    case RCC_LPTIM2CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8004366:	687b      	ldr	r3, [r7, #4]
 8004368:	3324      	adds	r3, #36	; 0x24
 800436a:	2102      	movs	r1, #2
 800436c:	4618      	mov	r0, r3
 800436e:	f000 fd6b 	bl	8004e48 <RCCEx_PLL3_Config>
 8004372:	4603      	mov	r3, r0
 8004374:	75fb      	strb	r3, [r7, #23]

      /* LPTIM2 clock source configuration done later after clock selection check */
      break;
 8004376:	e009      	b.n	800438c <HAL_RCCEx_PeriphCLKConfig+0xa18>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM2 clock */
      /* LPTIM2 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8004378:	2301      	movs	r3, #1
 800437a:	75fb      	strb	r3, [r7, #23]
      break;
 800437c:	e006      	b.n	800438c <HAL_RCCEx_PeriphCLKConfig+0xa18>
      break;
 800437e:	bf00      	nop
 8004380:	e004      	b.n	800438c <HAL_RCCEx_PeriphCLKConfig+0xa18>
      break;
 8004382:	bf00      	nop
 8004384:	e002      	b.n	800438c <HAL_RCCEx_PeriphCLKConfig+0xa18>
      break;
 8004386:	bf00      	nop
 8004388:	e000      	b.n	800438c <HAL_RCCEx_PeriphCLKConfig+0xa18>
      break;
 800438a:	bf00      	nop
    }

    if(ret == HAL_OK)
 800438c:	7dfb      	ldrb	r3, [r7, #23]
 800438e:	2b00      	cmp	r3, #0
 8004390:	d10a      	bne.n	80043a8 <HAL_RCCEx_PeriphCLKConfig+0xa34>
    {
      /* Set the source of LPTIM2 clock*/
      __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8004392:	4b89      	ldr	r3, [pc, #548]	; (80045b8 <HAL_RCCEx_PeriphCLKConfig+0xc44>)
 8004394:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004396:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 800439a:	687b      	ldr	r3, [r7, #4]
 800439c:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80043a0:	4985      	ldr	r1, [pc, #532]	; (80045b8 <HAL_RCCEx_PeriphCLKConfig+0xc44>)
 80043a2:	4313      	orrs	r3, r2
 80043a4:	658b      	str	r3, [r1, #88]	; 0x58
 80043a6:	e001      	b.n	80043ac <HAL_RCCEx_PeriphCLKConfig+0xa38>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80043a8:	7dfb      	ldrb	r3, [r7, #23]
 80043aa:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM345 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
 80043ac:	687b      	ldr	r3, [r7, #4]
 80043ae:	681b      	ldr	r3, [r3, #0]
 80043b0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80043b4:	2b00      	cmp	r3, #0
 80043b6:	d04b      	beq.n	8004450 <HAL_RCCEx_PeriphCLKConfig+0xadc>
  {
    switch(PeriphClkInit->Lptim345ClockSelection)
 80043b8:	687b      	ldr	r3, [r7, #4]
 80043ba:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80043be:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 80043c2:	d02e      	beq.n	8004422 <HAL_RCCEx_PeriphCLKConfig+0xaae>
 80043c4:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 80043c8:	d828      	bhi.n	800441c <HAL_RCCEx_PeriphCLKConfig+0xaa8>
 80043ca:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80043ce:	d02a      	beq.n	8004426 <HAL_RCCEx_PeriphCLKConfig+0xab2>
 80043d0:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80043d4:	d822      	bhi.n	800441c <HAL_RCCEx_PeriphCLKConfig+0xaa8>
 80043d6:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 80043da:	d026      	beq.n	800442a <HAL_RCCEx_PeriphCLKConfig+0xab6>
 80043dc:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 80043e0:	d81c      	bhi.n	800441c <HAL_RCCEx_PeriphCLKConfig+0xaa8>
 80043e2:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80043e6:	d010      	beq.n	800440a <HAL_RCCEx_PeriphCLKConfig+0xa96>
 80043e8:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80043ec:	d816      	bhi.n	800441c <HAL_RCCEx_PeriphCLKConfig+0xaa8>
 80043ee:	2b00      	cmp	r3, #0
 80043f0:	d01d      	beq.n	800442e <HAL_RCCEx_PeriphCLKConfig+0xaba>
 80043f2:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80043f6:	d111      	bne.n	800441c <HAL_RCCEx_PeriphCLKConfig+0xaa8>
    case RCC_LPTIM345CLKSOURCE_PCLK4:      /* SRD/D3 PCLK1 (PCLK4) as clock source for LPTIM3/4/5 */
      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM345CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM3/4/5 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 80043f8:	687b      	ldr	r3, [r7, #4]
 80043fa:	3304      	adds	r3, #4
 80043fc:	2100      	movs	r1, #0
 80043fe:	4618      	mov	r0, r3
 8004400:	f000 fc70 	bl	8004ce4 <RCCEx_PLL2_Config>
 8004404:	4603      	mov	r3, r0
 8004406:	75fb      	strb	r3, [r7, #23]

      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;
 8004408:	e012      	b.n	8004430 <HAL_RCCEx_PeriphCLKConfig+0xabc>

    case RCC_LPTIM345CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM3/4/5 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 800440a:	687b      	ldr	r3, [r7, #4]
 800440c:	3324      	adds	r3, #36	; 0x24
 800440e:	2102      	movs	r1, #2
 8004410:	4618      	mov	r0, r3
 8004412:	f000 fd19 	bl	8004e48 <RCCEx_PLL3_Config>
 8004416:	4603      	mov	r3, r0
 8004418:	75fb      	strb	r3, [r7, #23]

      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;
 800441a:	e009      	b.n	8004430 <HAL_RCCEx_PeriphCLKConfig+0xabc>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM3/4/5 clock */
      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800441c:	2301      	movs	r3, #1
 800441e:	75fb      	strb	r3, [r7, #23]
      break;
 8004420:	e006      	b.n	8004430 <HAL_RCCEx_PeriphCLKConfig+0xabc>
      break;
 8004422:	bf00      	nop
 8004424:	e004      	b.n	8004430 <HAL_RCCEx_PeriphCLKConfig+0xabc>
      break;
 8004426:	bf00      	nop
 8004428:	e002      	b.n	8004430 <HAL_RCCEx_PeriphCLKConfig+0xabc>
      break;
 800442a:	bf00      	nop
 800442c:	e000      	b.n	8004430 <HAL_RCCEx_PeriphCLKConfig+0xabc>
      break;
 800442e:	bf00      	nop
    }

    if(ret == HAL_OK)
 8004430:	7dfb      	ldrb	r3, [r7, #23]
 8004432:	2b00      	cmp	r3, #0
 8004434:	d10a      	bne.n	800444c <HAL_RCCEx_PeriphCLKConfig+0xad8>
    {
      /* Set the source of LPTIM3/4/5 clock */
      __HAL_RCC_LPTIM345_CONFIG(PeriphClkInit->Lptim345ClockSelection);
 8004436:	4b60      	ldr	r3, [pc, #384]	; (80045b8 <HAL_RCCEx_PeriphCLKConfig+0xc44>)
 8004438:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800443a:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800443e:	687b      	ldr	r3, [r7, #4]
 8004440:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8004444:	495c      	ldr	r1, [pc, #368]	; (80045b8 <HAL_RCCEx_PeriphCLKConfig+0xc44>)
 8004446:	4313      	orrs	r3, r2
 8004448:	658b      	str	r3, [r1, #88]	; 0x58
 800444a:	e001      	b.n	8004450 <HAL_RCCEx_PeriphCLKConfig+0xadc>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800444c:	7dfb      	ldrb	r3, [r7, #23]
 800444e:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*------------------------------ I2C1/2/3/5* Configuration ------------------------*/
#if defined(I2C5)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1235) == RCC_PERIPHCLK_I2C1235)
 8004450:	687b      	ldr	r3, [r7, #4]
 8004452:	681b      	ldr	r3, [r3, #0]
 8004454:	f003 0308 	and.w	r3, r3, #8
 8004458:	2b00      	cmp	r3, #0
 800445a:	d018      	beq.n	800448e <HAL_RCCEx_PeriphCLKConfig+0xb1a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1235CLKSOURCE(PeriphClkInit->I2c1235ClockSelection));

    if ((PeriphClkInit->I2c1235ClockSelection )== RCC_I2C1235CLKSOURCE_PLL3 )
 800445c:	687b      	ldr	r3, [r7, #4]
 800445e:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8004460:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004464:	d10a      	bne.n	800447c <HAL_RCCEx_PeriphCLKConfig+0xb08>
    {
        if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!= HAL_OK)
 8004466:	687b      	ldr	r3, [r7, #4]
 8004468:	3324      	adds	r3, #36	; 0x24
 800446a:	2102      	movs	r1, #2
 800446c:	4618      	mov	r0, r3
 800446e:	f000 fceb 	bl	8004e48 <RCCEx_PLL3_Config>
 8004472:	4603      	mov	r3, r0
 8004474:	2b00      	cmp	r3, #0
 8004476:	d001      	beq.n	800447c <HAL_RCCEx_PeriphCLKConfig+0xb08>
        {
          status = HAL_ERROR;
 8004478:	2301      	movs	r3, #1
 800447a:	75bb      	strb	r3, [r7, #22]
        }
    }

      __HAL_RCC_I2C1235_CONFIG(PeriphClkInit->I2c1235ClockSelection);
 800447c:	4b4e      	ldr	r3, [pc, #312]	; (80045b8 <HAL_RCCEx_PeriphCLKConfig+0xc44>)
 800447e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004480:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8004484:	687b      	ldr	r3, [r7, #4]
 8004486:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8004488:	494b      	ldr	r1, [pc, #300]	; (80045b8 <HAL_RCCEx_PeriphCLKConfig+0xc44>)
 800448a:	4313      	orrs	r3, r2
 800448c:	654b      	str	r3, [r1, #84]	; 0x54

  }
#endif /* I2C5 */

  /*------------------------------ I2C4 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 800448e:	687b      	ldr	r3, [r7, #4]
 8004490:	681b      	ldr	r3, [r3, #0]
 8004492:	f003 0310 	and.w	r3, r3, #16
 8004496:	2b00      	cmp	r3, #0
 8004498:	d01a      	beq.n	80044d0 <HAL_RCCEx_PeriphCLKConfig+0xb5c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    if ((PeriphClkInit->I2c4ClockSelection) == RCC_I2C4CLKSOURCE_PLL3 )
 800449a:	687b      	ldr	r3, [r7, #4]
 800449c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80044a0:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80044a4:	d10a      	bne.n	80044bc <HAL_RCCEx_PeriphCLKConfig+0xb48>
    {
      if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!= HAL_OK)
 80044a6:	687b      	ldr	r3, [r7, #4]
 80044a8:	3324      	adds	r3, #36	; 0x24
 80044aa:	2102      	movs	r1, #2
 80044ac:	4618      	mov	r0, r3
 80044ae:	f000 fccb 	bl	8004e48 <RCCEx_PLL3_Config>
 80044b2:	4603      	mov	r3, r0
 80044b4:	2b00      	cmp	r3, #0
 80044b6:	d001      	beq.n	80044bc <HAL_RCCEx_PeriphCLKConfig+0xb48>
      {
        status = HAL_ERROR;
 80044b8:	2301      	movs	r3, #1
 80044ba:	75bb      	strb	r3, [r7, #22]
      }
    }

      __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 80044bc:	4b3e      	ldr	r3, [pc, #248]	; (80045b8 <HAL_RCCEx_PeriphCLKConfig+0xc44>)
 80044be:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80044c0:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80044c4:	687b      	ldr	r3, [r7, #4]
 80044c6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80044ca:	493b      	ldr	r1, [pc, #236]	; (80045b8 <HAL_RCCEx_PeriphCLKConfig+0xc44>)
 80044cc:	4313      	orrs	r3, r2
 80044ce:	658b      	str	r3, [r1, #88]	; 0x58

  }

  /*---------------------------- ADC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 80044d0:	687b      	ldr	r3, [r7, #4]
 80044d2:	681b      	ldr	r3, [r3, #0]
 80044d4:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80044d8:	2b00      	cmp	r3, #0
 80044da:	d034      	beq.n	8004546 <HAL_RCCEx_PeriphCLKConfig+0xbd2>
  {
    switch(PeriphClkInit->AdcClockSelection)
 80044dc:	687b      	ldr	r3, [r7, #4]
 80044de:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80044e2:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80044e6:	d01d      	beq.n	8004524 <HAL_RCCEx_PeriphCLKConfig+0xbb0>
 80044e8:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80044ec:	d817      	bhi.n	800451e <HAL_RCCEx_PeriphCLKConfig+0xbaa>
 80044ee:	2b00      	cmp	r3, #0
 80044f0:	d003      	beq.n	80044fa <HAL_RCCEx_PeriphCLKConfig+0xb86>
 80044f2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80044f6:	d009      	beq.n	800450c <HAL_RCCEx_PeriphCLKConfig+0xb98>
 80044f8:	e011      	b.n	800451e <HAL_RCCEx_PeriphCLKConfig+0xbaa>
    {

    case RCC_ADCCLKSOURCE_PLL2: /* PLL2 is used as clock source for ADC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 80044fa:	687b      	ldr	r3, [r7, #4]
 80044fc:	3304      	adds	r3, #4
 80044fe:	2100      	movs	r1, #0
 8004500:	4618      	mov	r0, r3
 8004502:	f000 fbef 	bl	8004ce4 <RCCEx_PLL2_Config>
 8004506:	4603      	mov	r3, r0
 8004508:	75fb      	strb	r3, [r7, #23]

      /* ADC clock source configuration done later after clock selection check */
      break;
 800450a:	e00c      	b.n	8004526 <HAL_RCCEx_PeriphCLKConfig+0xbb2>

    case RCC_ADCCLKSOURCE_PLL3:  /* PLL3 is used as clock source for ADC*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 800450c:	687b      	ldr	r3, [r7, #4]
 800450e:	3324      	adds	r3, #36	; 0x24
 8004510:	2102      	movs	r1, #2
 8004512:	4618      	mov	r0, r3
 8004514:	f000 fc98 	bl	8004e48 <RCCEx_PLL3_Config>
 8004518:	4603      	mov	r3, r0
 800451a:	75fb      	strb	r3, [r7, #23]

      /* ADC clock source configuration done later after clock selection check */
      break;
 800451c:	e003      	b.n	8004526 <HAL_RCCEx_PeriphCLKConfig+0xbb2>
      /* HSI, HSE, or CSI oscillator is used as source of ADC clock */
      /* ADC clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800451e:	2301      	movs	r3, #1
 8004520:	75fb      	strb	r3, [r7, #23]
      break;
 8004522:	e000      	b.n	8004526 <HAL_RCCEx_PeriphCLKConfig+0xbb2>
      break;
 8004524:	bf00      	nop
    }

    if(ret == HAL_OK)
 8004526:	7dfb      	ldrb	r3, [r7, #23]
 8004528:	2b00      	cmp	r3, #0
 800452a:	d10a      	bne.n	8004542 <HAL_RCCEx_PeriphCLKConfig+0xbce>
    {
      /* Set the source of ADC clock*/
      __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 800452c:	4b22      	ldr	r3, [pc, #136]	; (80045b8 <HAL_RCCEx_PeriphCLKConfig+0xc44>)
 800452e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004530:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8004534:	687b      	ldr	r3, [r7, #4]
 8004536:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800453a:	491f      	ldr	r1, [pc, #124]	; (80045b8 <HAL_RCCEx_PeriphCLKConfig+0xc44>)
 800453c:	4313      	orrs	r3, r2
 800453e:	658b      	str	r3, [r1, #88]	; 0x58
 8004540:	e001      	b.n	8004546 <HAL_RCCEx_PeriphCLKConfig+0xbd2>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004542:	7dfb      	ldrb	r3, [r7, #23]
 8004544:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*------------------------------ USB Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8004546:	687b      	ldr	r3, [r7, #4]
 8004548:	681b      	ldr	r3, [r3, #0]
 800454a:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800454e:	2b00      	cmp	r3, #0
 8004550:	d036      	beq.n	80045c0 <HAL_RCCEx_PeriphCLKConfig+0xc4c>
  {

    switch(PeriphClkInit->UsbClockSelection)
 8004552:	687b      	ldr	r3, [r7, #4]
 8004554:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8004558:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 800455c:	d01c      	beq.n	8004598 <HAL_RCCEx_PeriphCLKConfig+0xc24>
 800455e:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8004562:	d816      	bhi.n	8004592 <HAL_RCCEx_PeriphCLKConfig+0xc1e>
 8004564:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8004568:	d003      	beq.n	8004572 <HAL_RCCEx_PeriphCLKConfig+0xbfe>
 800456a:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800456e:	d007      	beq.n	8004580 <HAL_RCCEx_PeriphCLKConfig+0xc0c>
 8004570:	e00f      	b.n	8004592 <HAL_RCCEx_PeriphCLKConfig+0xc1e>
    {
    case RCC_USBCLKSOURCE_PLL:      /* PLL is used as clock source for USB*/
      /* Enable USB Clock output generated form System USB . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8004572:	4b11      	ldr	r3, [pc, #68]	; (80045b8 <HAL_RCCEx_PeriphCLKConfig+0xc44>)
 8004574:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004576:	4a10      	ldr	r2, [pc, #64]	; (80045b8 <HAL_RCCEx_PeriphCLKConfig+0xc44>)
 8004578:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800457c:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* USB clock source configuration done later after clock selection check */
      break;
 800457e:	e00c      	b.n	800459a <HAL_RCCEx_PeriphCLKConfig+0xc26>

    case RCC_USBCLKSOURCE_PLL3: /* PLL3 is used as clock source for USB*/

      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8004580:	687b      	ldr	r3, [r7, #4]
 8004582:	3324      	adds	r3, #36	; 0x24
 8004584:	2101      	movs	r1, #1
 8004586:	4618      	mov	r0, r3
 8004588:	f000 fc5e 	bl	8004e48 <RCCEx_PLL3_Config>
 800458c:	4603      	mov	r3, r0
 800458e:	75fb      	strb	r3, [r7, #23]

      /* USB clock source configuration done later after clock selection check */
      break;
 8004590:	e003      	b.n	800459a <HAL_RCCEx_PeriphCLKConfig+0xc26>
      /* HSI48 oscillator is used as source of USB clock */
      /* USB clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8004592:	2301      	movs	r3, #1
 8004594:	75fb      	strb	r3, [r7, #23]
      break;
 8004596:	e000      	b.n	800459a <HAL_RCCEx_PeriphCLKConfig+0xc26>
      break;
 8004598:	bf00      	nop
    }

    if(ret == HAL_OK)
 800459a:	7dfb      	ldrb	r3, [r7, #23]
 800459c:	2b00      	cmp	r3, #0
 800459e:	d10d      	bne.n	80045bc <HAL_RCCEx_PeriphCLKConfig+0xc48>
    {
      /* Set the source of USB clock*/
      __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 80045a0:	4b05      	ldr	r3, [pc, #20]	; (80045b8 <HAL_RCCEx_PeriphCLKConfig+0xc44>)
 80045a2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80045a4:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80045a8:	687b      	ldr	r3, [r7, #4]
 80045aa:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80045ae:	4902      	ldr	r1, [pc, #8]	; (80045b8 <HAL_RCCEx_PeriphCLKConfig+0xc44>)
 80045b0:	4313      	orrs	r3, r2
 80045b2:	654b      	str	r3, [r1, #84]	; 0x54
 80045b4:	e004      	b.n	80045c0 <HAL_RCCEx_PeriphCLKConfig+0xc4c>
 80045b6:	bf00      	nop
 80045b8:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 80045bc:	7dfb      	ldrb	r3, [r7, #23]
 80045be:	75bb      	strb	r3, [r7, #22]
    }

  }

  /*------------------------------------- SDMMC Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == RCC_PERIPHCLK_SDMMC)
 80045c0:	687b      	ldr	r3, [r7, #4]
 80045c2:	681b      	ldr	r3, [r3, #0]
 80045c4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80045c8:	2b00      	cmp	r3, #0
 80045ca:	d029      	beq.n	8004620 <HAL_RCCEx_PeriphCLKConfig+0xcac>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC(PeriphClkInit->SdmmcClockSelection));

    switch(PeriphClkInit->SdmmcClockSelection)
 80045cc:	687b      	ldr	r3, [r7, #4]
 80045ce:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80045d0:	2b00      	cmp	r3, #0
 80045d2:	d003      	beq.n	80045dc <HAL_RCCEx_PeriphCLKConfig+0xc68>
 80045d4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80045d8:	d007      	beq.n	80045ea <HAL_RCCEx_PeriphCLKConfig+0xc76>
 80045da:	e00f      	b.n	80045fc <HAL_RCCEx_PeriphCLKConfig+0xc88>
    {
    case RCC_SDMMCCLKSOURCE_PLL:      /* PLL is used as clock source for SDMMC*/
      /* Enable SDMMC Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80045dc:	4b61      	ldr	r3, [pc, #388]	; (8004764 <HAL_RCCEx_PeriphCLKConfig+0xdf0>)
 80045de:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80045e0:	4a60      	ldr	r2, [pc, #384]	; (8004764 <HAL_RCCEx_PeriphCLKConfig+0xdf0>)
 80045e2:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80045e6:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SDMMC clock source configuration done later after clock selection check */
      break;
 80045e8:	e00b      	b.n	8004602 <HAL_RCCEx_PeriphCLKConfig+0xc8e>

    case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for SDMMC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 80045ea:	687b      	ldr	r3, [r7, #4]
 80045ec:	3304      	adds	r3, #4
 80045ee:	2102      	movs	r1, #2
 80045f0:	4618      	mov	r0, r3
 80045f2:	f000 fb77 	bl	8004ce4 <RCCEx_PLL2_Config>
 80045f6:	4603      	mov	r3, r0
 80045f8:	75fb      	strb	r3, [r7, #23]

      /* SDMMC clock source configuration done later after clock selection check */
      break;
 80045fa:	e002      	b.n	8004602 <HAL_RCCEx_PeriphCLKConfig+0xc8e>

    default:
      ret = HAL_ERROR;
 80045fc:	2301      	movs	r3, #1
 80045fe:	75fb      	strb	r3, [r7, #23]
      break;
 8004600:	bf00      	nop
    }

    if(ret == HAL_OK)
 8004602:	7dfb      	ldrb	r3, [r7, #23]
 8004604:	2b00      	cmp	r3, #0
 8004606:	d109      	bne.n	800461c <HAL_RCCEx_PeriphCLKConfig+0xca8>
    {
      /* Set the source of SDMMC clock*/
      __HAL_RCC_SDMMC_CONFIG(PeriphClkInit->SdmmcClockSelection);
 8004608:	4b56      	ldr	r3, [pc, #344]	; (8004764 <HAL_RCCEx_PeriphCLKConfig+0xdf0>)
 800460a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800460c:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8004610:	687b      	ldr	r3, [r7, #4]
 8004612:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004614:	4953      	ldr	r1, [pc, #332]	; (8004764 <HAL_RCCEx_PeriphCLKConfig+0xdf0>)
 8004616:	4313      	orrs	r3, r2
 8004618:	64cb      	str	r3, [r1, #76]	; 0x4c
 800461a:	e001      	b.n	8004620 <HAL_RCCEx_PeriphCLKConfig+0xcac>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800461c:	7dfb      	ldrb	r3, [r7, #23]
 800461e:	75bb      	strb	r3, [r7, #22]
    }
  }

#if defined(LTDC)
  /*-------------------------------------- LTDC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 8004620:	687b      	ldr	r3, [r7, #4]
 8004622:	681b      	ldr	r3, [r3, #0]
 8004624:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8004628:	2b00      	cmp	r3, #0
 800462a:	d00a      	beq.n	8004642 <HAL_RCCEx_PeriphCLKConfig+0xcce>
  {
    if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!=HAL_OK)
 800462c:	687b      	ldr	r3, [r7, #4]
 800462e:	3324      	adds	r3, #36	; 0x24
 8004630:	2102      	movs	r1, #2
 8004632:	4618      	mov	r0, r3
 8004634:	f000 fc08 	bl	8004e48 <RCCEx_PLL3_Config>
 8004638:	4603      	mov	r3, r0
 800463a:	2b00      	cmp	r3, #0
 800463c:	d001      	beq.n	8004642 <HAL_RCCEx_PeriphCLKConfig+0xcce>
    {
      status=HAL_ERROR;
 800463e:	2301      	movs	r3, #1
 8004640:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif /* LTDC */

  /*------------------------------ RNG Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 8004642:	687b      	ldr	r3, [r7, #4]
 8004644:	681b      	ldr	r3, [r3, #0]
 8004646:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800464a:	2b00      	cmp	r3, #0
 800464c:	d030      	beq.n	80046b0 <HAL_RCCEx_PeriphCLKConfig+0xd3c>
  {

    switch(PeriphClkInit->RngClockSelection)
 800464e:	687b      	ldr	r3, [r7, #4]
 8004650:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8004652:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8004656:	d017      	beq.n	8004688 <HAL_RCCEx_PeriphCLKConfig+0xd14>
 8004658:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800465c:	d811      	bhi.n	8004682 <HAL_RCCEx_PeriphCLKConfig+0xd0e>
 800465e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004662:	d013      	beq.n	800468c <HAL_RCCEx_PeriphCLKConfig+0xd18>
 8004664:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004668:	d80b      	bhi.n	8004682 <HAL_RCCEx_PeriphCLKConfig+0xd0e>
 800466a:	2b00      	cmp	r3, #0
 800466c:	d010      	beq.n	8004690 <HAL_RCCEx_PeriphCLKConfig+0xd1c>
 800466e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004672:	d106      	bne.n	8004682 <HAL_RCCEx_PeriphCLKConfig+0xd0e>
    {
    case RCC_RNGCLKSOURCE_PLL:     /* PLL is used as clock source for RNG*/
      /* Enable RNG Clock output generated form System RNG . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8004674:	4b3b      	ldr	r3, [pc, #236]	; (8004764 <HAL_RCCEx_PeriphCLKConfig+0xdf0>)
 8004676:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004678:	4a3a      	ldr	r2, [pc, #232]	; (8004764 <HAL_RCCEx_PeriphCLKConfig+0xdf0>)
 800467a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800467e:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* RNG clock source configuration done later after clock selection check */
      break;
 8004680:	e007      	b.n	8004692 <HAL_RCCEx_PeriphCLKConfig+0xd1e>
      /* HSI48 oscillator is used as source of RNG clock */
      /* RNG clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8004682:	2301      	movs	r3, #1
 8004684:	75fb      	strb	r3, [r7, #23]
      break;
 8004686:	e004      	b.n	8004692 <HAL_RCCEx_PeriphCLKConfig+0xd1e>
      break;
 8004688:	bf00      	nop
 800468a:	e002      	b.n	8004692 <HAL_RCCEx_PeriphCLKConfig+0xd1e>
      break;
 800468c:	bf00      	nop
 800468e:	e000      	b.n	8004692 <HAL_RCCEx_PeriphCLKConfig+0xd1e>
      break;
 8004690:	bf00      	nop
    }

    if(ret == HAL_OK)
 8004692:	7dfb      	ldrb	r3, [r7, #23]
 8004694:	2b00      	cmp	r3, #0
 8004696:	d109      	bne.n	80046ac <HAL_RCCEx_PeriphCLKConfig+0xd38>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8004698:	4b32      	ldr	r3, [pc, #200]	; (8004764 <HAL_RCCEx_PeriphCLKConfig+0xdf0>)
 800469a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800469c:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80046a0:	687b      	ldr	r3, [r7, #4]
 80046a2:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80046a4:	492f      	ldr	r1, [pc, #188]	; (8004764 <HAL_RCCEx_PeriphCLKConfig+0xdf0>)
 80046a6:	4313      	orrs	r3, r2
 80046a8:	654b      	str	r3, [r1, #84]	; 0x54
 80046aa:	e001      	b.n	80046b0 <HAL_RCCEx_PeriphCLKConfig+0xd3c>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80046ac:	7dfb      	ldrb	r3, [r7, #23]
 80046ae:	75bb      	strb	r3, [r7, #22]
    }

  }

  /*------------------------------ SWPMI1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 80046b0:	687b      	ldr	r3, [r7, #4]
 80046b2:	681b      	ldr	r3, [r3, #0]
 80046b4:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80046b8:	2b00      	cmp	r3, #0
 80046ba:	d008      	beq.n	80046ce <HAL_RCCEx_PeriphCLKConfig+0xd5a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 interface clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 80046bc:	4b29      	ldr	r3, [pc, #164]	; (8004764 <HAL_RCCEx_PeriphCLKConfig+0xdf0>)
 80046be:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80046c0:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 80046c4:	687b      	ldr	r3, [r7, #4]
 80046c6:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80046c8:	4926      	ldr	r1, [pc, #152]	; (8004764 <HAL_RCCEx_PeriphCLKConfig+0xdf0>)
 80046ca:	4313      	orrs	r3, r2
 80046cc:	650b      	str	r3, [r1, #80]	; 0x50
    /* Configure the HRTIM1 clock source */
    __HAL_RCC_HRTIM1_CONFIG(PeriphClkInit->Hrtim1ClockSelection);
  }
#endif  /*HRTIM1*/
  /*------------------------------ DFSDM1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 80046ce:	687b      	ldr	r3, [r7, #4]
 80046d0:	681b      	ldr	r3, [r3, #0]
 80046d2:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80046d6:	2b00      	cmp	r3, #0
 80046d8:	d008      	beq.n	80046ec <HAL_RCCEx_PeriphCLKConfig+0xd78>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 80046da:	4b22      	ldr	r3, [pc, #136]	; (8004764 <HAL_RCCEx_PeriphCLKConfig+0xdf0>)
 80046dc:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80046de:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 80046e2:	687b      	ldr	r3, [r7, #4]
 80046e4:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80046e6:	491f      	ldr	r1, [pc, #124]	; (8004764 <HAL_RCCEx_PeriphCLKConfig+0xdf0>)
 80046e8:	4313      	orrs	r3, r2
 80046ea:	650b      	str	r3, [r1, #80]	; 0x50
    __HAL_RCC_DFSDM2_CONFIG(PeriphClkInit->Dfsdm2ClockSelection);
  }
#endif  /* DFSDM2 */

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
 80046ec:	687b      	ldr	r3, [r7, #4]
 80046ee:	681b      	ldr	r3, [r3, #0]
 80046f0:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 80046f4:	2b00      	cmp	r3, #0
 80046f6:	d00d      	beq.n	8004714 <HAL_RCCEx_PeriphCLKConfig+0xda0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 80046f8:	4b1a      	ldr	r3, [pc, #104]	; (8004764 <HAL_RCCEx_PeriphCLKConfig+0xdf0>)
 80046fa:	691b      	ldr	r3, [r3, #16]
 80046fc:	4a19      	ldr	r2, [pc, #100]	; (8004764 <HAL_RCCEx_PeriphCLKConfig+0xdf0>)
 80046fe:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8004702:	6113      	str	r3, [r2, #16]
 8004704:	4b17      	ldr	r3, [pc, #92]	; (8004764 <HAL_RCCEx_PeriphCLKConfig+0xdf0>)
 8004706:	691a      	ldr	r2, [r3, #16]
 8004708:	687b      	ldr	r3, [r7, #4]
 800470a:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 800470e:	4915      	ldr	r1, [pc, #84]	; (8004764 <HAL_RCCEx_PeriphCLKConfig+0xdf0>)
 8004710:	4313      	orrs	r3, r2
 8004712:	610b      	str	r3, [r1, #16]
  }

  /*------------------------------------ CKPER configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
 8004714:	687b      	ldr	r3, [r7, #4]
 8004716:	681b      	ldr	r3, [r3, #0]
 8004718:	2b00      	cmp	r3, #0
 800471a:	da08      	bge.n	800472e <HAL_RCCEx_PeriphCLKConfig+0xdba>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLKPSOURCE(PeriphClkInit->CkperClockSelection));

    /* Configure the CKPER clock source */
    __HAL_RCC_CLKP_CONFIG(PeriphClkInit->CkperClockSelection);
 800471c:	4b11      	ldr	r3, [pc, #68]	; (8004764 <HAL_RCCEx_PeriphCLKConfig+0xdf0>)
 800471e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004720:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8004724:	687b      	ldr	r3, [r7, #4]
 8004726:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004728:	490e      	ldr	r1, [pc, #56]	; (8004764 <HAL_RCCEx_PeriphCLKConfig+0xdf0>)
 800472a:	4313      	orrs	r3, r2
 800472c:	64cb      	str	r3, [r1, #76]	; 0x4c
  }

  /*------------------------------ CEC Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 800472e:	687b      	ldr	r3, [r7, #4]
 8004730:	681b      	ldr	r3, [r3, #0]
 8004732:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8004736:	2b00      	cmp	r3, #0
 8004738:	d009      	beq.n	800474e <HAL_RCCEx_PeriphCLKConfig+0xdda>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC interface clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 800473a:	4b0a      	ldr	r3, [pc, #40]	; (8004764 <HAL_RCCEx_PeriphCLKConfig+0xdf0>)
 800473c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800473e:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8004742:	687b      	ldr	r3, [r7, #4]
 8004744:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004748:	4906      	ldr	r1, [pc, #24]	; (8004764 <HAL_RCCEx_PeriphCLKConfig+0xdf0>)
 800474a:	4313      	orrs	r3, r2
 800474c:	654b      	str	r3, [r1, #84]	; 0x54
  }

  if (status == HAL_OK)
 800474e:	7dbb      	ldrb	r3, [r7, #22]
 8004750:	2b00      	cmp	r3, #0
 8004752:	d101      	bne.n	8004758 <HAL_RCCEx_PeriphCLKConfig+0xde4>
  {
    return HAL_OK;
 8004754:	2300      	movs	r3, #0
 8004756:	e000      	b.n	800475a <HAL_RCCEx_PeriphCLKConfig+0xde6>
  }
  return HAL_ERROR;
 8004758:	2301      	movs	r3, #1
}
 800475a:	4618      	mov	r0, r3
 800475c:	3718      	adds	r7, #24
 800475e:	46bd      	mov	sp, r7
 8004760:	bd80      	pop	{r7, pc}
 8004762:	bf00      	nop
 8004764:	58024400 	.word	0x58024400

08004768 <HAL_RCCEx_GetD3PCLK1Freq>:
  * @note   Each time D3PCLK1 changes, this function must be called to update the
  *         right D3PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval D3PCLK1 frequency
  */
uint32_t HAL_RCCEx_GetD3PCLK1Freq(void)
{
 8004768:	b580      	push	{r7, lr}
 800476a:	af00      	add	r7, sp, #0
#if defined(RCC_D3CFGR_D3PPRE)
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->D3CFGR & RCC_D3CFGR_D3PPRE)>> RCC_D3CFGR_D3PPRE_Pos] & 0x1FU));
 800476c:	f7ff f8a6 	bl	80038bc <HAL_RCC_GetHCLKFreq>
 8004770:	4602      	mov	r2, r0
 8004772:	4b06      	ldr	r3, [pc, #24]	; (800478c <HAL_RCCEx_GetD3PCLK1Freq+0x24>)
 8004774:	6a1b      	ldr	r3, [r3, #32]
 8004776:	091b      	lsrs	r3, r3, #4
 8004778:	f003 0307 	and.w	r3, r3, #7
 800477c:	4904      	ldr	r1, [pc, #16]	; (8004790 <HAL_RCCEx_GetD3PCLK1Freq+0x28>)
 800477e:	5ccb      	ldrb	r3, [r1, r3]
 8004780:	f003 031f 	and.w	r3, r3, #31
 8004784:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE)>> RCC_SRDCFGR_SRDPPRE_Pos] & 0x1FU));
#endif
}
 8004788:	4618      	mov	r0, r3
 800478a:	bd80      	pop	{r7, pc}
 800478c:	58024400 	.word	0x58024400
 8004790:	08006be0 	.word	0x08006be0

08004794 <HAL_RCCEx_GetPLL2ClockFreq>:
  *         right PLL2CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL2_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL2ClockFreq(PLL2_ClocksTypeDef* PLL2_Clocks)
{
 8004794:	b480      	push	{r7}
 8004796:	b089      	sub	sp, #36	; 0x24
 8004798:	af00      	add	r7, sp, #0
 800479a:	6078      	str	r0, [r7, #4]
  float_t fracn2, pll2vco;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL2M) * PLL2N
     PLL2xCLK = PLL2_VCO / PLL2x
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 800479c:	4ba1      	ldr	r3, [pc, #644]	; (8004a24 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800479e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80047a0:	f003 0303 	and.w	r3, r3, #3
 80047a4:	61bb      	str	r3, [r7, #24]
  pll2m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM2)>> 12);
 80047a6:	4b9f      	ldr	r3, [pc, #636]	; (8004a24 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80047a8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80047aa:	0b1b      	lsrs	r3, r3, #12
 80047ac:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80047b0:	617b      	str	r3, [r7, #20]
  pll2fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL2FRACEN) >> RCC_PLLCFGR_PLL2FRACEN_Pos;
 80047b2:	4b9c      	ldr	r3, [pc, #624]	; (8004a24 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80047b4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80047b6:	091b      	lsrs	r3, r3, #4
 80047b8:	f003 0301 	and.w	r3, r3, #1
 80047bc:	613b      	str	r3, [r7, #16]
  fracn2 =(float_t)(uint32_t)(pll2fracen* ((RCC->PLL2FRACR & RCC_PLL2FRACR_FRACN2)>> 3));
 80047be:	4b99      	ldr	r3, [pc, #612]	; (8004a24 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80047c0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80047c2:	08db      	lsrs	r3, r3, #3
 80047c4:	f3c3 030c 	ubfx	r3, r3, #0, #13
 80047c8:	693a      	ldr	r2, [r7, #16]
 80047ca:	fb02 f303 	mul.w	r3, r2, r3
 80047ce:	ee07 3a90 	vmov	s15, r3
 80047d2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80047d6:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll2m != 0U)
 80047da:	697b      	ldr	r3, [r7, #20]
 80047dc:	2b00      	cmp	r3, #0
 80047de:	f000 8111 	beq.w	8004a04 <HAL_RCCEx_GetPLL2ClockFreq+0x270>
  {
    switch (pllsource)
 80047e2:	69bb      	ldr	r3, [r7, #24]
 80047e4:	2b02      	cmp	r3, #2
 80047e6:	f000 8083 	beq.w	80048f0 <HAL_RCCEx_GetPLL2ClockFreq+0x15c>
 80047ea:	69bb      	ldr	r3, [r7, #24]
 80047ec:	2b02      	cmp	r3, #2
 80047ee:	f200 80a1 	bhi.w	8004934 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
 80047f2:	69bb      	ldr	r3, [r7, #24]
 80047f4:	2b00      	cmp	r3, #0
 80047f6:	d003      	beq.n	8004800 <HAL_RCCEx_GetPLL2ClockFreq+0x6c>
 80047f8:	69bb      	ldr	r3, [r7, #24]
 80047fa:	2b01      	cmp	r3, #1
 80047fc:	d056      	beq.n	80048ac <HAL_RCCEx_GetPLL2ClockFreq+0x118>
 80047fe:	e099      	b.n	8004934 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
    {

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8004800:	4b88      	ldr	r3, [pc, #544]	; (8004a24 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8004802:	681b      	ldr	r3, [r3, #0]
 8004804:	f003 0320 	and.w	r3, r3, #32
 8004808:	2b00      	cmp	r3, #0
 800480a:	d02d      	beq.n	8004868 <HAL_RCCEx_GetPLL2ClockFreq+0xd4>
      {
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 800480c:	4b85      	ldr	r3, [pc, #532]	; (8004a24 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800480e:	681b      	ldr	r3, [r3, #0]
 8004810:	08db      	lsrs	r3, r3, #3
 8004812:	f003 0303 	and.w	r3, r3, #3
 8004816:	4a84      	ldr	r2, [pc, #528]	; (8004a28 <HAL_RCCEx_GetPLL2ClockFreq+0x294>)
 8004818:	fa22 f303 	lsr.w	r3, r2, r3
 800481c:	60bb      	str	r3, [r7, #8]
        pll2vco = ( (float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 800481e:	68bb      	ldr	r3, [r7, #8]
 8004820:	ee07 3a90 	vmov	s15, r3
 8004824:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004828:	697b      	ldr	r3, [r7, #20]
 800482a:	ee07 3a90 	vmov	s15, r3
 800482e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004832:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004836:	4b7b      	ldr	r3, [pc, #492]	; (8004a24 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8004838:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800483a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800483e:	ee07 3a90 	vmov	s15, r3
 8004842:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004846:	ed97 6a03 	vldr	s12, [r7, #12]
 800484a:	eddf 5a78 	vldr	s11, [pc, #480]	; 8004a2c <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800484e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004852:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004856:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800485a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800485e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004862:	edc7 7a07 	vstr	s15, [r7, #28]
      }
      else
      {
        pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
      }
      break;
 8004866:	e087      	b.n	8004978 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>
        pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 8004868:	697b      	ldr	r3, [r7, #20]
 800486a:	ee07 3a90 	vmov	s15, r3
 800486e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004872:	eddf 6a6f 	vldr	s13, [pc, #444]	; 8004a30 <HAL_RCCEx_GetPLL2ClockFreq+0x29c>
 8004876:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800487a:	4b6a      	ldr	r3, [pc, #424]	; (8004a24 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800487c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800487e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004882:	ee07 3a90 	vmov	s15, r3
 8004886:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800488a:	ed97 6a03 	vldr	s12, [r7, #12]
 800488e:	eddf 5a67 	vldr	s11, [pc, #412]	; 8004a2c <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8004892:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004896:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800489a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800489e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80048a2:	ee67 7a27 	vmul.f32	s15, s14, s15
 80048a6:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 80048aa:	e065      	b.n	8004978 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

    case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
      pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 80048ac:	697b      	ldr	r3, [r7, #20]
 80048ae:	ee07 3a90 	vmov	s15, r3
 80048b2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80048b6:	eddf 6a5f 	vldr	s13, [pc, #380]	; 8004a34 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 80048ba:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80048be:	4b59      	ldr	r3, [pc, #356]	; (8004a24 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80048c0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80048c2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80048c6:	ee07 3a90 	vmov	s15, r3
 80048ca:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80048ce:	ed97 6a03 	vldr	s12, [r7, #12]
 80048d2:	eddf 5a56 	vldr	s11, [pc, #344]	; 8004a2c <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 80048d6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80048da:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80048de:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80048e2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80048e6:	ee67 7a27 	vmul.f32	s15, s14, s15
 80048ea:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 80048ee:	e043      	b.n	8004978 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 80048f0:	697b      	ldr	r3, [r7, #20]
 80048f2:	ee07 3a90 	vmov	s15, r3
 80048f6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80048fa:	eddf 6a4f 	vldr	s13, [pc, #316]	; 8004a38 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>
 80048fe:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004902:	4b48      	ldr	r3, [pc, #288]	; (8004a24 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8004904:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004906:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800490a:	ee07 3a90 	vmov	s15, r3
 800490e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004912:	ed97 6a03 	vldr	s12, [r7, #12]
 8004916:	eddf 5a45 	vldr	s11, [pc, #276]	; 8004a2c <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800491a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800491e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004922:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8004926:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800492a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800492e:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8004932:	e021      	b.n	8004978 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

    default:
      pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 8004934:	697b      	ldr	r3, [r7, #20]
 8004936:	ee07 3a90 	vmov	s15, r3
 800493a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800493e:	eddf 6a3d 	vldr	s13, [pc, #244]	; 8004a34 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 8004942:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004946:	4b37      	ldr	r3, [pc, #220]	; (8004a24 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8004948:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800494a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800494e:	ee07 3a90 	vmov	s15, r3
 8004952:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004956:	ed97 6a03 	vldr	s12, [r7, #12]
 800495a:	eddf 5a34 	vldr	s11, [pc, #208]	; 8004a2c <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800495e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004962:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004966:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800496a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800496e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004972:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8004976:	bf00      	nop
    }
    PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_P2) >>9)  + (float_t)1 )) ;
 8004978:	4b2a      	ldr	r3, [pc, #168]	; (8004a24 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800497a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800497c:	0a5b      	lsrs	r3, r3, #9
 800497e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8004982:	ee07 3a90 	vmov	s15, r3
 8004986:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800498a:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800498e:	ee37 7a87 	vadd.f32	s14, s15, s14
 8004992:	edd7 6a07 	vldr	s13, [r7, #28]
 8004996:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800499a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800499e:	ee17 2a90 	vmov	r2, s15
 80049a2:	687b      	ldr	r3, [r7, #4]
 80049a4:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_Q2) >>16) + (float_t)1 )) ;
 80049a6:	4b1f      	ldr	r3, [pc, #124]	; (8004a24 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80049a8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80049aa:	0c1b      	lsrs	r3, r3, #16
 80049ac:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80049b0:	ee07 3a90 	vmov	s15, r3
 80049b4:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80049b8:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80049bc:	ee37 7a87 	vadd.f32	s14, s15, s14
 80049c0:	edd7 6a07 	vldr	s13, [r7, #28]
 80049c4:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80049c8:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80049cc:	ee17 2a90 	vmov	r2, s15
 80049d0:	687b      	ldr	r3, [r7, #4]
 80049d2:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_R2) >>24) + (float_t)1 )) ;
 80049d4:	4b13      	ldr	r3, [pc, #76]	; (8004a24 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80049d6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80049d8:	0e1b      	lsrs	r3, r3, #24
 80049da:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80049de:	ee07 3a90 	vmov	s15, r3
 80049e2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80049e6:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80049ea:	ee37 7a87 	vadd.f32	s14, s15, s14
 80049ee:	edd7 6a07 	vldr	s13, [r7, #28]
 80049f2:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80049f6:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80049fa:	ee17 2a90 	vmov	r2, s15
 80049fe:	687b      	ldr	r3, [r7, #4]
 8004a00:	609a      	str	r2, [r3, #8]
  {
    PLL2_Clocks->PLL2_P_Frequency = 0U;
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
    PLL2_Clocks->PLL2_R_Frequency = 0U;
  }
}
 8004a02:	e008      	b.n	8004a16 <HAL_RCCEx_GetPLL2ClockFreq+0x282>
    PLL2_Clocks->PLL2_P_Frequency = 0U;
 8004a04:	687b      	ldr	r3, [r7, #4]
 8004a06:	2200      	movs	r2, #0
 8004a08:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
 8004a0a:	687b      	ldr	r3, [r7, #4]
 8004a0c:	2200      	movs	r2, #0
 8004a0e:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = 0U;
 8004a10:	687b      	ldr	r3, [r7, #4]
 8004a12:	2200      	movs	r2, #0
 8004a14:	609a      	str	r2, [r3, #8]
}
 8004a16:	bf00      	nop
 8004a18:	3724      	adds	r7, #36	; 0x24
 8004a1a:	46bd      	mov	sp, r7
 8004a1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a20:	4770      	bx	lr
 8004a22:	bf00      	nop
 8004a24:	58024400 	.word	0x58024400
 8004a28:	03d09000 	.word	0x03d09000
 8004a2c:	46000000 	.word	0x46000000
 8004a30:	4c742400 	.word	0x4c742400
 8004a34:	4a742400 	.word	0x4a742400
 8004a38:	4af42400 	.word	0x4af42400

08004a3c <HAL_RCCEx_GetPLL3ClockFreq>:
  *         right PLL3CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL3_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL3ClockFreq(PLL3_ClocksTypeDef* PLL3_Clocks)
{
 8004a3c:	b480      	push	{r7}
 8004a3e:	b089      	sub	sp, #36	; 0x24
 8004a40:	af00      	add	r7, sp, #0
 8004a42:	6078      	str	r0, [r7, #4]
  float_t fracn3, pll3vco;

  /* PLL3_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL3M) * PLL3N
     PLL3xCLK = PLL3_VCO / PLLxR
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8004a44:	4ba1      	ldr	r3, [pc, #644]	; (8004ccc <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8004a46:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004a48:	f003 0303 	and.w	r3, r3, #3
 8004a4c:	61bb      	str	r3, [r7, #24]
  pll3m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM3)>> 20)  ;
 8004a4e:	4b9f      	ldr	r3, [pc, #636]	; (8004ccc <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8004a50:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004a52:	0d1b      	lsrs	r3, r3, #20
 8004a54:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8004a58:	617b      	str	r3, [r7, #20]
  pll3fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL3FRACEN) >> RCC_PLLCFGR_PLL3FRACEN_Pos;
 8004a5a:	4b9c      	ldr	r3, [pc, #624]	; (8004ccc <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8004a5c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004a5e:	0a1b      	lsrs	r3, r3, #8
 8004a60:	f003 0301 	and.w	r3, r3, #1
 8004a64:	613b      	str	r3, [r7, #16]
  fracn3 = (float_t)(uint32_t)(pll3fracen* ((RCC->PLL3FRACR & RCC_PLL3FRACR_FRACN3)>> 3));
 8004a66:	4b99      	ldr	r3, [pc, #612]	; (8004ccc <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8004a68:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004a6a:	08db      	lsrs	r3, r3, #3
 8004a6c:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8004a70:	693a      	ldr	r2, [r7, #16]
 8004a72:	fb02 f303 	mul.w	r3, r2, r3
 8004a76:	ee07 3a90 	vmov	s15, r3
 8004a7a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004a7e:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll3m != 0U)
 8004a82:	697b      	ldr	r3, [r7, #20]
 8004a84:	2b00      	cmp	r3, #0
 8004a86:	f000 8111 	beq.w	8004cac <HAL_RCCEx_GetPLL3ClockFreq+0x270>
  {
    switch (pllsource)
 8004a8a:	69bb      	ldr	r3, [r7, #24]
 8004a8c:	2b02      	cmp	r3, #2
 8004a8e:	f000 8083 	beq.w	8004b98 <HAL_RCCEx_GetPLL3ClockFreq+0x15c>
 8004a92:	69bb      	ldr	r3, [r7, #24]
 8004a94:	2b02      	cmp	r3, #2
 8004a96:	f200 80a1 	bhi.w	8004bdc <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
 8004a9a:	69bb      	ldr	r3, [r7, #24]
 8004a9c:	2b00      	cmp	r3, #0
 8004a9e:	d003      	beq.n	8004aa8 <HAL_RCCEx_GetPLL3ClockFreq+0x6c>
 8004aa0:	69bb      	ldr	r3, [r7, #24]
 8004aa2:	2b01      	cmp	r3, #1
 8004aa4:	d056      	beq.n	8004b54 <HAL_RCCEx_GetPLL3ClockFreq+0x118>
 8004aa6:	e099      	b.n	8004bdc <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8004aa8:	4b88      	ldr	r3, [pc, #544]	; (8004ccc <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8004aaa:	681b      	ldr	r3, [r3, #0]
 8004aac:	f003 0320 	and.w	r3, r3, #32
 8004ab0:	2b00      	cmp	r3, #0
 8004ab2:	d02d      	beq.n	8004b10 <HAL_RCCEx_GetPLL3ClockFreq+0xd4>
      {
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8004ab4:	4b85      	ldr	r3, [pc, #532]	; (8004ccc <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8004ab6:	681b      	ldr	r3, [r3, #0]
 8004ab8:	08db      	lsrs	r3, r3, #3
 8004aba:	f003 0303 	and.w	r3, r3, #3
 8004abe:	4a84      	ldr	r2, [pc, #528]	; (8004cd0 <HAL_RCCEx_GetPLL3ClockFreq+0x294>)
 8004ac0:	fa22 f303 	lsr.w	r3, r2, r3
 8004ac4:	60bb      	str	r3, [r7, #8]
        pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 8004ac6:	68bb      	ldr	r3, [r7, #8]
 8004ac8:	ee07 3a90 	vmov	s15, r3
 8004acc:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004ad0:	697b      	ldr	r3, [r7, #20]
 8004ad2:	ee07 3a90 	vmov	s15, r3
 8004ad6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004ada:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004ade:	4b7b      	ldr	r3, [pc, #492]	; (8004ccc <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8004ae0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004ae2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004ae6:	ee07 3a90 	vmov	s15, r3
 8004aea:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004aee:	ed97 6a03 	vldr	s12, [r7, #12]
 8004af2:	eddf 5a78 	vldr	s11, [pc, #480]	; 8004cd4 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8004af6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004afa:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004afe:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8004b02:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004b06:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004b0a:	edc7 7a07 	vstr	s15, [r7, #28]
      }
      else
      {
        pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
      }
      break;
 8004b0e:	e087      	b.n	8004c20 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
        pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 8004b10:	697b      	ldr	r3, [r7, #20]
 8004b12:	ee07 3a90 	vmov	s15, r3
 8004b16:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004b1a:	eddf 6a6f 	vldr	s13, [pc, #444]	; 8004cd8 <HAL_RCCEx_GetPLL3ClockFreq+0x29c>
 8004b1e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004b22:	4b6a      	ldr	r3, [pc, #424]	; (8004ccc <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8004b24:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004b26:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004b2a:	ee07 3a90 	vmov	s15, r3
 8004b2e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004b32:	ed97 6a03 	vldr	s12, [r7, #12]
 8004b36:	eddf 5a67 	vldr	s11, [pc, #412]	; 8004cd4 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8004b3a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004b3e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004b42:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8004b46:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004b4a:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004b4e:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8004b52:	e065      	b.n	8004c20 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
    case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
      pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 8004b54:	697b      	ldr	r3, [r7, #20]
 8004b56:	ee07 3a90 	vmov	s15, r3
 8004b5a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004b5e:	eddf 6a5f 	vldr	s13, [pc, #380]	; 8004cdc <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 8004b62:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004b66:	4b59      	ldr	r3, [pc, #356]	; (8004ccc <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8004b68:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004b6a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004b6e:	ee07 3a90 	vmov	s15, r3
 8004b72:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004b76:	ed97 6a03 	vldr	s12, [r7, #12]
 8004b7a:	eddf 5a56 	vldr	s11, [pc, #344]	; 8004cd4 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8004b7e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004b82:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004b86:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8004b8a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004b8e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004b92:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8004b96:	e043      	b.n	8004c20 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 8004b98:	697b      	ldr	r3, [r7, #20]
 8004b9a:	ee07 3a90 	vmov	s15, r3
 8004b9e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004ba2:	eddf 6a4f 	vldr	s13, [pc, #316]	; 8004ce0 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>
 8004ba6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004baa:	4b48      	ldr	r3, [pc, #288]	; (8004ccc <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8004bac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004bae:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004bb2:	ee07 3a90 	vmov	s15, r3
 8004bb6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004bba:	ed97 6a03 	vldr	s12, [r7, #12]
 8004bbe:	eddf 5a45 	vldr	s11, [pc, #276]	; 8004cd4 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8004bc2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004bc6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004bca:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8004bce:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004bd2:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004bd6:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8004bda:	e021      	b.n	8004c20 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

    default:
      pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 8004bdc:	697b      	ldr	r3, [r7, #20]
 8004bde:	ee07 3a90 	vmov	s15, r3
 8004be2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004be6:	eddf 6a3d 	vldr	s13, [pc, #244]	; 8004cdc <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 8004bea:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004bee:	4b37      	ldr	r3, [pc, #220]	; (8004ccc <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8004bf0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004bf2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004bf6:	ee07 3a90 	vmov	s15, r3
 8004bfa:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004bfe:	ed97 6a03 	vldr	s12, [r7, #12]
 8004c02:	eddf 5a34 	vldr	s11, [pc, #208]	; 8004cd4 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8004c06:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004c0a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004c0e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8004c12:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004c16:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004c1a:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8004c1e:	bf00      	nop
    }
    PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_P3) >>9)  + (float_t)1 )) ;
 8004c20:	4b2a      	ldr	r3, [pc, #168]	; (8004ccc <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8004c22:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004c24:	0a5b      	lsrs	r3, r3, #9
 8004c26:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8004c2a:	ee07 3a90 	vmov	s15, r3
 8004c2e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004c32:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8004c36:	ee37 7a87 	vadd.f32	s14, s15, s14
 8004c3a:	edd7 6a07 	vldr	s13, [r7, #28]
 8004c3e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8004c42:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8004c46:	ee17 2a90 	vmov	r2, s15
 8004c4a:	687b      	ldr	r3, [r7, #4]
 8004c4c:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_Q3) >>16) + (float_t)1 )) ;
 8004c4e:	4b1f      	ldr	r3, [pc, #124]	; (8004ccc <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8004c50:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004c52:	0c1b      	lsrs	r3, r3, #16
 8004c54:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8004c58:	ee07 3a90 	vmov	s15, r3
 8004c5c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004c60:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8004c64:	ee37 7a87 	vadd.f32	s14, s15, s14
 8004c68:	edd7 6a07 	vldr	s13, [r7, #28]
 8004c6c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8004c70:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8004c74:	ee17 2a90 	vmov	r2, s15
 8004c78:	687b      	ldr	r3, [r7, #4]
 8004c7a:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_R3) >>24) + (float_t)1 )) ;
 8004c7c:	4b13      	ldr	r3, [pc, #76]	; (8004ccc <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8004c7e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004c80:	0e1b      	lsrs	r3, r3, #24
 8004c82:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8004c86:	ee07 3a90 	vmov	s15, r3
 8004c8a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004c8e:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8004c92:	ee37 7a87 	vadd.f32	s14, s15, s14
 8004c96:	edd7 6a07 	vldr	s13, [r7, #28]
 8004c9a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8004c9e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8004ca2:	ee17 2a90 	vmov	r2, s15
 8004ca6:	687b      	ldr	r3, [r7, #4]
 8004ca8:	609a      	str	r2, [r3, #8]
    PLL3_Clocks->PLL3_P_Frequency = 0U;
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
    PLL3_Clocks->PLL3_R_Frequency = 0U;
  }

}
 8004caa:	e008      	b.n	8004cbe <HAL_RCCEx_GetPLL3ClockFreq+0x282>
    PLL3_Clocks->PLL3_P_Frequency = 0U;
 8004cac:	687b      	ldr	r3, [r7, #4]
 8004cae:	2200      	movs	r2, #0
 8004cb0:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
 8004cb2:	687b      	ldr	r3, [r7, #4]
 8004cb4:	2200      	movs	r2, #0
 8004cb6:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = 0U;
 8004cb8:	687b      	ldr	r3, [r7, #4]
 8004cba:	2200      	movs	r2, #0
 8004cbc:	609a      	str	r2, [r3, #8]
}
 8004cbe:	bf00      	nop
 8004cc0:	3724      	adds	r7, #36	; 0x24
 8004cc2:	46bd      	mov	sp, r7
 8004cc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004cc8:	4770      	bx	lr
 8004cca:	bf00      	nop
 8004ccc:	58024400 	.word	0x58024400
 8004cd0:	03d09000 	.word	0x03d09000
 8004cd4:	46000000 	.word	0x46000000
 8004cd8:	4c742400 	.word	0x4c742400
 8004cdc:	4a742400 	.word	0x4a742400
 8004ce0:	4af42400 	.word	0x4af42400

08004ce4 <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(RCC_PLL2InitTypeDef *pll2, uint32_t Divider)
{
 8004ce4:	b580      	push	{r7, lr}
 8004ce6:	b084      	sub	sp, #16
 8004ce8:	af00      	add	r7, sp, #0
 8004cea:	6078      	str	r0, [r7, #4]
 8004cec:	6039      	str	r1, [r7, #0]

  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8004cee:	2300      	movs	r3, #0
 8004cf0:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL2RGE_VALUE(pll2->PLL2RGE));
  assert_param(IS_RCC_PLL2VCO_VALUE(pll2->PLL2VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll2->PLL2FRACN));

  /* Check that PLL2 OSC clock source is already set */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8004cf2:	4b53      	ldr	r3, [pc, #332]	; (8004e40 <RCCEx_PLL2_Config+0x15c>)
 8004cf4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004cf6:	f003 0303 	and.w	r3, r3, #3
 8004cfa:	2b03      	cmp	r3, #3
 8004cfc:	d101      	bne.n	8004d02 <RCCEx_PLL2_Config+0x1e>
  {
    return HAL_ERROR;
 8004cfe:	2301      	movs	r3, #1
 8004d00:	e099      	b.n	8004e36 <RCCEx_PLL2_Config+0x152>


  else
  {
    /* Disable  PLL2. */
    __HAL_RCC_PLL2_DISABLE();
 8004d02:	4b4f      	ldr	r3, [pc, #316]	; (8004e40 <RCCEx_PLL2_Config+0x15c>)
 8004d04:	681b      	ldr	r3, [r3, #0]
 8004d06:	4a4e      	ldr	r2, [pc, #312]	; (8004e40 <RCCEx_PLL2_Config+0x15c>)
 8004d08:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8004d0c:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004d0e:	f7fc fa73 	bl	80011f8 <HAL_GetTick>
 8004d12:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8004d14:	e008      	b.n	8004d28 <RCCEx_PLL2_Config+0x44>
    {
      if( (HAL_GetTick() - tickstart ) > PLL2_TIMEOUT_VALUE)
 8004d16:	f7fc fa6f 	bl	80011f8 <HAL_GetTick>
 8004d1a:	4602      	mov	r2, r0
 8004d1c:	68bb      	ldr	r3, [r7, #8]
 8004d1e:	1ad3      	subs	r3, r2, r3
 8004d20:	2b02      	cmp	r3, #2
 8004d22:	d901      	bls.n	8004d28 <RCCEx_PLL2_Config+0x44>
      {
        return HAL_TIMEOUT;
 8004d24:	2303      	movs	r3, #3
 8004d26:	e086      	b.n	8004e36 <RCCEx_PLL2_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8004d28:	4b45      	ldr	r3, [pc, #276]	; (8004e40 <RCCEx_PLL2_Config+0x15c>)
 8004d2a:	681b      	ldr	r3, [r3, #0]
 8004d2c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8004d30:	2b00      	cmp	r3, #0
 8004d32:	d1f0      	bne.n	8004d16 <RCCEx_PLL2_Config+0x32>
      }
    }

    /* Configure PLL2 multiplication and division factors. */
    __HAL_RCC_PLL2_CONFIG(pll2->PLL2M,
 8004d34:	4b42      	ldr	r3, [pc, #264]	; (8004e40 <RCCEx_PLL2_Config+0x15c>)
 8004d36:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004d38:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 8004d3c:	687b      	ldr	r3, [r7, #4]
 8004d3e:	681b      	ldr	r3, [r3, #0]
 8004d40:	031b      	lsls	r3, r3, #12
 8004d42:	493f      	ldr	r1, [pc, #252]	; (8004e40 <RCCEx_PLL2_Config+0x15c>)
 8004d44:	4313      	orrs	r3, r2
 8004d46:	628b      	str	r3, [r1, #40]	; 0x28
 8004d48:	687b      	ldr	r3, [r7, #4]
 8004d4a:	685b      	ldr	r3, [r3, #4]
 8004d4c:	3b01      	subs	r3, #1
 8004d4e:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8004d52:	687b      	ldr	r3, [r7, #4]
 8004d54:	689b      	ldr	r3, [r3, #8]
 8004d56:	3b01      	subs	r3, #1
 8004d58:	025b      	lsls	r3, r3, #9
 8004d5a:	b29b      	uxth	r3, r3
 8004d5c:	431a      	orrs	r2, r3
 8004d5e:	687b      	ldr	r3, [r7, #4]
 8004d60:	68db      	ldr	r3, [r3, #12]
 8004d62:	3b01      	subs	r3, #1
 8004d64:	041b      	lsls	r3, r3, #16
 8004d66:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 8004d6a:	431a      	orrs	r2, r3
 8004d6c:	687b      	ldr	r3, [r7, #4]
 8004d6e:	691b      	ldr	r3, [r3, #16]
 8004d70:	3b01      	subs	r3, #1
 8004d72:	061b      	lsls	r3, r3, #24
 8004d74:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 8004d78:	4931      	ldr	r1, [pc, #196]	; (8004e40 <RCCEx_PLL2_Config+0x15c>)
 8004d7a:	4313      	orrs	r3, r2
 8004d7c:	638b      	str	r3, [r1, #56]	; 0x38
                          pll2->PLL2P,
                          pll2->PLL2Q,
                          pll2->PLL2R);

    /* Select PLL2 input reference frequency range: VCI */
    __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE) ;
 8004d7e:	4b30      	ldr	r3, [pc, #192]	; (8004e40 <RCCEx_PLL2_Config+0x15c>)
 8004d80:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004d82:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8004d86:	687b      	ldr	r3, [r7, #4]
 8004d88:	695b      	ldr	r3, [r3, #20]
 8004d8a:	492d      	ldr	r1, [pc, #180]	; (8004e40 <RCCEx_PLL2_Config+0x15c>)
 8004d8c:	4313      	orrs	r3, r2
 8004d8e:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL2 output frequency range : VCO */
    __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL) ;
 8004d90:	4b2b      	ldr	r3, [pc, #172]	; (8004e40 <RCCEx_PLL2_Config+0x15c>)
 8004d92:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004d94:	f023 0220 	bic.w	r2, r3, #32
 8004d98:	687b      	ldr	r3, [r7, #4]
 8004d9a:	699b      	ldr	r3, [r3, #24]
 8004d9c:	4928      	ldr	r1, [pc, #160]	; (8004e40 <RCCEx_PLL2_Config+0x15c>)
 8004d9e:	4313      	orrs	r3, r2
 8004da0:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_DISABLE();
 8004da2:	4b27      	ldr	r3, [pc, #156]	; (8004e40 <RCCEx_PLL2_Config+0x15c>)
 8004da4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004da6:	4a26      	ldr	r2, [pc, #152]	; (8004e40 <RCCEx_PLL2_Config+0x15c>)
 8004da8:	f023 0310 	bic.w	r3, r3, #16
 8004dac:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 8004dae:	4b24      	ldr	r3, [pc, #144]	; (8004e40 <RCCEx_PLL2_Config+0x15c>)
 8004db0:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8004db2:	4b24      	ldr	r3, [pc, #144]	; (8004e44 <RCCEx_PLL2_Config+0x160>)
 8004db4:	4013      	ands	r3, r2
 8004db6:	687a      	ldr	r2, [r7, #4]
 8004db8:	69d2      	ldr	r2, [r2, #28]
 8004dba:	00d2      	lsls	r2, r2, #3
 8004dbc:	4920      	ldr	r1, [pc, #128]	; (8004e40 <RCCEx_PLL2_Config+0x15c>)
 8004dbe:	4313      	orrs	r3, r2
 8004dc0:	63cb      	str	r3, [r1, #60]	; 0x3c

    /* Enable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_ENABLE();
 8004dc2:	4b1f      	ldr	r3, [pc, #124]	; (8004e40 <RCCEx_PLL2_Config+0x15c>)
 8004dc4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004dc6:	4a1e      	ldr	r2, [pc, #120]	; (8004e40 <RCCEx_PLL2_Config+0x15c>)
 8004dc8:	f043 0310 	orr.w	r3, r3, #16
 8004dcc:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL2 clock output */
    if(Divider == DIVIDER_P_UPDATE)
 8004dce:	683b      	ldr	r3, [r7, #0]
 8004dd0:	2b00      	cmp	r3, #0
 8004dd2:	d106      	bne.n	8004de2 <RCCEx_PLL2_Config+0xfe>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 8004dd4:	4b1a      	ldr	r3, [pc, #104]	; (8004e40 <RCCEx_PLL2_Config+0x15c>)
 8004dd6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004dd8:	4a19      	ldr	r2, [pc, #100]	; (8004e40 <RCCEx_PLL2_Config+0x15c>)
 8004dda:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8004dde:	62d3      	str	r3, [r2, #44]	; 0x2c
 8004de0:	e00f      	b.n	8004e02 <RCCEx_PLL2_Config+0x11e>
    }
    else if(Divider == DIVIDER_Q_UPDATE)
 8004de2:	683b      	ldr	r3, [r7, #0]
 8004de4:	2b01      	cmp	r3, #1
 8004de6:	d106      	bne.n	8004df6 <RCCEx_PLL2_Config+0x112>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVQ);
 8004de8:	4b15      	ldr	r3, [pc, #84]	; (8004e40 <RCCEx_PLL2_Config+0x15c>)
 8004dea:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004dec:	4a14      	ldr	r2, [pc, #80]	; (8004e40 <RCCEx_PLL2_Config+0x15c>)
 8004dee:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8004df2:	62d3      	str	r3, [r2, #44]	; 0x2c
 8004df4:	e005      	b.n	8004e02 <RCCEx_PLL2_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVR);
 8004df6:	4b12      	ldr	r3, [pc, #72]	; (8004e40 <RCCEx_PLL2_Config+0x15c>)
 8004df8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004dfa:	4a11      	ldr	r2, [pc, #68]	; (8004e40 <RCCEx_PLL2_Config+0x15c>)
 8004dfc:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8004e00:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL2. */
    __HAL_RCC_PLL2_ENABLE();
 8004e02:	4b0f      	ldr	r3, [pc, #60]	; (8004e40 <RCCEx_PLL2_Config+0x15c>)
 8004e04:	681b      	ldr	r3, [r3, #0]
 8004e06:	4a0e      	ldr	r2, [pc, #56]	; (8004e40 <RCCEx_PLL2_Config+0x15c>)
 8004e08:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8004e0c:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004e0e:	f7fc f9f3 	bl	80011f8 <HAL_GetTick>
 8004e12:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL2 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8004e14:	e008      	b.n	8004e28 <RCCEx_PLL2_Config+0x144>
    {
      if( (HAL_GetTick() - tickstart ) > PLL2_TIMEOUT_VALUE)
 8004e16:	f7fc f9ef 	bl	80011f8 <HAL_GetTick>
 8004e1a:	4602      	mov	r2, r0
 8004e1c:	68bb      	ldr	r3, [r7, #8]
 8004e1e:	1ad3      	subs	r3, r2, r3
 8004e20:	2b02      	cmp	r3, #2
 8004e22:	d901      	bls.n	8004e28 <RCCEx_PLL2_Config+0x144>
      {
        return HAL_TIMEOUT;
 8004e24:	2303      	movs	r3, #3
 8004e26:	e006      	b.n	8004e36 <RCCEx_PLL2_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8004e28:	4b05      	ldr	r3, [pc, #20]	; (8004e40 <RCCEx_PLL2_Config+0x15c>)
 8004e2a:	681b      	ldr	r3, [r3, #0]
 8004e2c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8004e30:	2b00      	cmp	r3, #0
 8004e32:	d0f0      	beq.n	8004e16 <RCCEx_PLL2_Config+0x132>
    }

  }


  return status;
 8004e34:	7bfb      	ldrb	r3, [r7, #15]
}
 8004e36:	4618      	mov	r0, r3
 8004e38:	3710      	adds	r7, #16
 8004e3a:	46bd      	mov	sp, r7
 8004e3c:	bd80      	pop	{r7, pc}
 8004e3e:	bf00      	nop
 8004e40:	58024400 	.word	0x58024400
 8004e44:	ffff0007 	.word	0xffff0007

08004e48 <RCCEx_PLL3_Config>:
  * @note   PLL3 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(RCC_PLL3InitTypeDef *pll3, uint32_t Divider)
{
 8004e48:	b580      	push	{r7, lr}
 8004e4a:	b084      	sub	sp, #16
 8004e4c:	af00      	add	r7, sp, #0
 8004e4e:	6078      	str	r0, [r7, #4]
 8004e50:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8004e52:	2300      	movs	r3, #0
 8004e54:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL3RGE_VALUE(pll3->PLL3RGE));
  assert_param(IS_RCC_PLL3VCO_VALUE(pll3->PLL3VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll3->PLL3FRACN));

  /* Check that PLL3 OSC clock source is already set */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8004e56:	4b53      	ldr	r3, [pc, #332]	; (8004fa4 <RCCEx_PLL3_Config+0x15c>)
 8004e58:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004e5a:	f003 0303 	and.w	r3, r3, #3
 8004e5e:	2b03      	cmp	r3, #3
 8004e60:	d101      	bne.n	8004e66 <RCCEx_PLL3_Config+0x1e>
  {
    return HAL_ERROR;
 8004e62:	2301      	movs	r3, #1
 8004e64:	e099      	b.n	8004f9a <RCCEx_PLL3_Config+0x152>


  else
  {
    /* Disable  PLL3. */
    __HAL_RCC_PLL3_DISABLE();
 8004e66:	4b4f      	ldr	r3, [pc, #316]	; (8004fa4 <RCCEx_PLL3_Config+0x15c>)
 8004e68:	681b      	ldr	r3, [r3, #0]
 8004e6a:	4a4e      	ldr	r2, [pc, #312]	; (8004fa4 <RCCEx_PLL3_Config+0x15c>)
 8004e6c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004e70:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004e72:	f7fc f9c1 	bl	80011f8 <HAL_GetTick>
 8004e76:	60b8      	str	r0, [r7, #8]
    /* Wait till PLL3 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8004e78:	e008      	b.n	8004e8c <RCCEx_PLL3_Config+0x44>
    {
      if( (HAL_GetTick() - tickstart ) > PLL3_TIMEOUT_VALUE)
 8004e7a:	f7fc f9bd 	bl	80011f8 <HAL_GetTick>
 8004e7e:	4602      	mov	r2, r0
 8004e80:	68bb      	ldr	r3, [r7, #8]
 8004e82:	1ad3      	subs	r3, r2, r3
 8004e84:	2b02      	cmp	r3, #2
 8004e86:	d901      	bls.n	8004e8c <RCCEx_PLL3_Config+0x44>
      {
        return HAL_TIMEOUT;
 8004e88:	2303      	movs	r3, #3
 8004e8a:	e086      	b.n	8004f9a <RCCEx_PLL3_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8004e8c:	4b45      	ldr	r3, [pc, #276]	; (8004fa4 <RCCEx_PLL3_Config+0x15c>)
 8004e8e:	681b      	ldr	r3, [r3, #0]
 8004e90:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8004e94:	2b00      	cmp	r3, #0
 8004e96:	d1f0      	bne.n	8004e7a <RCCEx_PLL3_Config+0x32>
      }
    }

    /* Configure the PLL3  multiplication and division factors. */
    __HAL_RCC_PLL3_CONFIG(pll3->PLL3M,
 8004e98:	4b42      	ldr	r3, [pc, #264]	; (8004fa4 <RCCEx_PLL3_Config+0x15c>)
 8004e9a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004e9c:	f023 727c 	bic.w	r2, r3, #66060288	; 0x3f00000
 8004ea0:	687b      	ldr	r3, [r7, #4]
 8004ea2:	681b      	ldr	r3, [r3, #0]
 8004ea4:	051b      	lsls	r3, r3, #20
 8004ea6:	493f      	ldr	r1, [pc, #252]	; (8004fa4 <RCCEx_PLL3_Config+0x15c>)
 8004ea8:	4313      	orrs	r3, r2
 8004eaa:	628b      	str	r3, [r1, #40]	; 0x28
 8004eac:	687b      	ldr	r3, [r7, #4]
 8004eae:	685b      	ldr	r3, [r3, #4]
 8004eb0:	3b01      	subs	r3, #1
 8004eb2:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8004eb6:	687b      	ldr	r3, [r7, #4]
 8004eb8:	689b      	ldr	r3, [r3, #8]
 8004eba:	3b01      	subs	r3, #1
 8004ebc:	025b      	lsls	r3, r3, #9
 8004ebe:	b29b      	uxth	r3, r3
 8004ec0:	431a      	orrs	r2, r3
 8004ec2:	687b      	ldr	r3, [r7, #4]
 8004ec4:	68db      	ldr	r3, [r3, #12]
 8004ec6:	3b01      	subs	r3, #1
 8004ec8:	041b      	lsls	r3, r3, #16
 8004eca:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 8004ece:	431a      	orrs	r2, r3
 8004ed0:	687b      	ldr	r3, [r7, #4]
 8004ed2:	691b      	ldr	r3, [r3, #16]
 8004ed4:	3b01      	subs	r3, #1
 8004ed6:	061b      	lsls	r3, r3, #24
 8004ed8:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 8004edc:	4931      	ldr	r1, [pc, #196]	; (8004fa4 <RCCEx_PLL3_Config+0x15c>)
 8004ede:	4313      	orrs	r3, r2
 8004ee0:	640b      	str	r3, [r1, #64]	; 0x40
                          pll3->PLL3P,
                          pll3->PLL3Q,
                          pll3->PLL3R);

    /* Select PLL3 input reference frequency range: VCI */
    __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE) ;
 8004ee2:	4b30      	ldr	r3, [pc, #192]	; (8004fa4 <RCCEx_PLL3_Config+0x15c>)
 8004ee4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004ee6:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8004eea:	687b      	ldr	r3, [r7, #4]
 8004eec:	695b      	ldr	r3, [r3, #20]
 8004eee:	492d      	ldr	r1, [pc, #180]	; (8004fa4 <RCCEx_PLL3_Config+0x15c>)
 8004ef0:	4313      	orrs	r3, r2
 8004ef2:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL3 output frequency range : VCO */
    __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL) ;
 8004ef4:	4b2b      	ldr	r3, [pc, #172]	; (8004fa4 <RCCEx_PLL3_Config+0x15c>)
 8004ef6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004ef8:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 8004efc:	687b      	ldr	r3, [r7, #4]
 8004efe:	699b      	ldr	r3, [r3, #24]
 8004f00:	4928      	ldr	r1, [pc, #160]	; (8004fa4 <RCCEx_PLL3_Config+0x15c>)
 8004f02:	4313      	orrs	r3, r2
 8004f04:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_DISABLE();
 8004f06:	4b27      	ldr	r3, [pc, #156]	; (8004fa4 <RCCEx_PLL3_Config+0x15c>)
 8004f08:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004f0a:	4a26      	ldr	r2, [pc, #152]	; (8004fa4 <RCCEx_PLL3_Config+0x15c>)
 8004f0c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8004f10:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 8004f12:	4b24      	ldr	r3, [pc, #144]	; (8004fa4 <RCCEx_PLL3_Config+0x15c>)
 8004f14:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8004f16:	4b24      	ldr	r3, [pc, #144]	; (8004fa8 <RCCEx_PLL3_Config+0x160>)
 8004f18:	4013      	ands	r3, r2
 8004f1a:	687a      	ldr	r2, [r7, #4]
 8004f1c:	69d2      	ldr	r2, [r2, #28]
 8004f1e:	00d2      	lsls	r2, r2, #3
 8004f20:	4920      	ldr	r1, [pc, #128]	; (8004fa4 <RCCEx_PLL3_Config+0x15c>)
 8004f22:	4313      	orrs	r3, r2
 8004f24:	644b      	str	r3, [r1, #68]	; 0x44

    /* Enable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_ENABLE();
 8004f26:	4b1f      	ldr	r3, [pc, #124]	; (8004fa4 <RCCEx_PLL3_Config+0x15c>)
 8004f28:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004f2a:	4a1e      	ldr	r2, [pc, #120]	; (8004fa4 <RCCEx_PLL3_Config+0x15c>)
 8004f2c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004f30:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL3 clock output */
    if(Divider == DIVIDER_P_UPDATE)
 8004f32:	683b      	ldr	r3, [r7, #0]
 8004f34:	2b00      	cmp	r3, #0
 8004f36:	d106      	bne.n	8004f46 <RCCEx_PLL3_Config+0xfe>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
 8004f38:	4b1a      	ldr	r3, [pc, #104]	; (8004fa4 <RCCEx_PLL3_Config+0x15c>)
 8004f3a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004f3c:	4a19      	ldr	r2, [pc, #100]	; (8004fa4 <RCCEx_PLL3_Config+0x15c>)
 8004f3e:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8004f42:	62d3      	str	r3, [r2, #44]	; 0x2c
 8004f44:	e00f      	b.n	8004f66 <RCCEx_PLL3_Config+0x11e>
    }
    else if(Divider == DIVIDER_Q_UPDATE)
 8004f46:	683b      	ldr	r3, [r7, #0]
 8004f48:	2b01      	cmp	r3, #1
 8004f4a:	d106      	bne.n	8004f5a <RCCEx_PLL3_Config+0x112>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
 8004f4c:	4b15      	ldr	r3, [pc, #84]	; (8004fa4 <RCCEx_PLL3_Config+0x15c>)
 8004f4e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004f50:	4a14      	ldr	r2, [pc, #80]	; (8004fa4 <RCCEx_PLL3_Config+0x15c>)
 8004f52:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8004f56:	62d3      	str	r3, [r2, #44]	; 0x2c
 8004f58:	e005      	b.n	8004f66 <RCCEx_PLL3_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
 8004f5a:	4b12      	ldr	r3, [pc, #72]	; (8004fa4 <RCCEx_PLL3_Config+0x15c>)
 8004f5c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004f5e:	4a11      	ldr	r2, [pc, #68]	; (8004fa4 <RCCEx_PLL3_Config+0x15c>)
 8004f60:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8004f64:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL3. */
    __HAL_RCC_PLL3_ENABLE();
 8004f66:	4b0f      	ldr	r3, [pc, #60]	; (8004fa4 <RCCEx_PLL3_Config+0x15c>)
 8004f68:	681b      	ldr	r3, [r3, #0]
 8004f6a:	4a0e      	ldr	r2, [pc, #56]	; (8004fa4 <RCCEx_PLL3_Config+0x15c>)
 8004f6c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004f70:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004f72:	f7fc f941 	bl	80011f8 <HAL_GetTick>
 8004f76:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL3 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8004f78:	e008      	b.n	8004f8c <RCCEx_PLL3_Config+0x144>
    {
      if( (HAL_GetTick() - tickstart ) > PLL3_TIMEOUT_VALUE)
 8004f7a:	f7fc f93d 	bl	80011f8 <HAL_GetTick>
 8004f7e:	4602      	mov	r2, r0
 8004f80:	68bb      	ldr	r3, [r7, #8]
 8004f82:	1ad3      	subs	r3, r2, r3
 8004f84:	2b02      	cmp	r3, #2
 8004f86:	d901      	bls.n	8004f8c <RCCEx_PLL3_Config+0x144>
      {
        return HAL_TIMEOUT;
 8004f88:	2303      	movs	r3, #3
 8004f8a:	e006      	b.n	8004f9a <RCCEx_PLL3_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8004f8c:	4b05      	ldr	r3, [pc, #20]	; (8004fa4 <RCCEx_PLL3_Config+0x15c>)
 8004f8e:	681b      	ldr	r3, [r3, #0]
 8004f90:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8004f94:	2b00      	cmp	r3, #0
 8004f96:	d0f0      	beq.n	8004f7a <RCCEx_PLL3_Config+0x132>
    }

  }


  return status;
 8004f98:	7bfb      	ldrb	r3, [r7, #15]
}
 8004f9a:	4618      	mov	r0, r3
 8004f9c:	3710      	adds	r7, #16
 8004f9e:	46bd      	mov	sp, r7
 8004fa0:	bd80      	pop	{r7, pc}
 8004fa2:	bf00      	nop
 8004fa4:	58024400 	.word	0x58024400
 8004fa8:	ffff0007 	.word	0xffff0007

08004fac <HAL_SRAM_Init>:
  * @param  ExtTiming Pointer to SRAM extended mode timing structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SRAM_Init(SRAM_HandleTypeDef *hsram, FMC_NORSRAM_TimingTypeDef *Timing,
                                FMC_NORSRAM_TimingTypeDef *ExtTiming)
{
 8004fac:	b580      	push	{r7, lr}
 8004fae:	b084      	sub	sp, #16
 8004fb0:	af00      	add	r7, sp, #0
 8004fb2:	60f8      	str	r0, [r7, #12]
 8004fb4:	60b9      	str	r1, [r7, #8]
 8004fb6:	607a      	str	r2, [r7, #4]
  /* Check the SRAM handle parameter */
  if (hsram == NULL)
 8004fb8:	68fb      	ldr	r3, [r7, #12]
 8004fba:	2b00      	cmp	r3, #0
 8004fbc:	d101      	bne.n	8004fc2 <HAL_SRAM_Init+0x16>
  {
    return HAL_ERROR;
 8004fbe:	2301      	movs	r3, #1
 8004fc0:	e03e      	b.n	8005040 <HAL_SRAM_Init+0x94>
  }

  if (hsram->State == HAL_SRAM_STATE_RESET)
 8004fc2:	68fb      	ldr	r3, [r7, #12]
 8004fc4:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8004fc8:	b2db      	uxtb	r3, r3
 8004fca:	2b00      	cmp	r3, #0
 8004fcc:	d106      	bne.n	8004fdc <HAL_SRAM_Init+0x30>
  {
    /* Allocate lock resource and initialize it */
    hsram->Lock = HAL_UNLOCKED;
 8004fce:	68fb      	ldr	r3, [r7, #12]
 8004fd0:	2200      	movs	r2, #0
 8004fd2:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44

    /* Init the low level hardware */
    hsram->MspInitCallback(hsram);
#else
    /* Initialize the low level hardware (MSP) */
    HAL_SRAM_MspInit(hsram);
 8004fd6:	68f8      	ldr	r0, [r7, #12]
 8004fd8:	f7fb ffa4 	bl	8000f24 <HAL_SRAM_MspInit>
#endif /* USE_HAL_SRAM_REGISTER_CALLBACKS */
  }

  /* Initialize SRAM control Interface */
  (void)FMC_NORSRAM_Init(hsram->Instance, &(hsram->Init));
 8004fdc:	68fb      	ldr	r3, [r7, #12]
 8004fde:	681a      	ldr	r2, [r3, #0]
 8004fe0:	68fb      	ldr	r3, [r7, #12]
 8004fe2:	3308      	adds	r3, #8
 8004fe4:	4619      	mov	r1, r3
 8004fe6:	4610      	mov	r0, r2
 8004fe8:	f001 fcaa 	bl	8006940 <FMC_NORSRAM_Init>

  /* Initialize SRAM timing Interface */
  (void)FMC_NORSRAM_Timing_Init(hsram->Instance, Timing, hsram->Init.NSBank);
 8004fec:	68fb      	ldr	r3, [r7, #12]
 8004fee:	6818      	ldr	r0, [r3, #0]
 8004ff0:	68fb      	ldr	r3, [r7, #12]
 8004ff2:	689b      	ldr	r3, [r3, #8]
 8004ff4:	461a      	mov	r2, r3
 8004ff6:	68b9      	ldr	r1, [r7, #8]
 8004ff8:	f001 fd32 	bl	8006a60 <FMC_NORSRAM_Timing_Init>

  /* Initialize SRAM extended mode timing Interface */
  (void)FMC_NORSRAM_Extended_Timing_Init(hsram->Extended, ExtTiming, hsram->Init.NSBank,
 8004ffc:	68fb      	ldr	r3, [r7, #12]
 8004ffe:	6858      	ldr	r0, [r3, #4]
 8005000:	68fb      	ldr	r3, [r7, #12]
 8005002:	689a      	ldr	r2, [r3, #8]
 8005004:	68fb      	ldr	r3, [r7, #12]
 8005006:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005008:	6879      	ldr	r1, [r7, #4]
 800500a:	f001 fd79 	bl	8006b00 <FMC_NORSRAM_Extended_Timing_Init>
                                         hsram->Init.ExtendedMode);

  /* Enable the NORSRAM device */
  __FMC_NORSRAM_ENABLE(hsram->Instance, hsram->Init.NSBank);
 800500e:	68fb      	ldr	r3, [r7, #12]
 8005010:	681b      	ldr	r3, [r3, #0]
 8005012:	68fa      	ldr	r2, [r7, #12]
 8005014:	6892      	ldr	r2, [r2, #8]
 8005016:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800501a:	68fb      	ldr	r3, [r7, #12]
 800501c:	681b      	ldr	r3, [r3, #0]
 800501e:	68fa      	ldr	r2, [r7, #12]
 8005020:	6892      	ldr	r2, [r2, #8]
 8005022:	f041 0101 	orr.w	r1, r1, #1
 8005026:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

  /* Enable FMC Peripheral */
  __FMC_ENABLE();
 800502a:	4b07      	ldr	r3, [pc, #28]	; (8005048 <HAL_SRAM_Init+0x9c>)
 800502c:	681b      	ldr	r3, [r3, #0]
 800502e:	4a06      	ldr	r2, [pc, #24]	; (8005048 <HAL_SRAM_Init+0x9c>)
 8005030:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8005034:	6013      	str	r3, [r2, #0]

  /* Initialize the SRAM controller state */
  hsram->State = HAL_SRAM_STATE_READY;
 8005036:	68fb      	ldr	r3, [r7, #12]
 8005038:	2201      	movs	r2, #1
 800503a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  return HAL_OK;
 800503e:	2300      	movs	r3, #0
}
 8005040:	4618      	mov	r0, r3
 8005042:	3710      	adds	r7, #16
 8005044:	46bd      	mov	sp, r7
 8005046:	bd80      	pop	{r7, pc}
 8005048:	52004000 	.word	0x52004000

0800504c <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800504c:	b580      	push	{r7, lr}
 800504e:	b082      	sub	sp, #8
 8005050:	af00      	add	r7, sp, #0
 8005052:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8005054:	687b      	ldr	r3, [r7, #4]
 8005056:	2b00      	cmp	r3, #0
 8005058:	d101      	bne.n	800505e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800505a:	2301      	movs	r3, #1
 800505c:	e042      	b.n	80050e4 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800505e:	687b      	ldr	r3, [r7, #4]
 8005060:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8005064:	2b00      	cmp	r3, #0
 8005066:	d106      	bne.n	8005076 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8005068:	687b      	ldr	r3, [r7, #4]
 800506a:	2200      	movs	r2, #0
 800506c:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8005070:	6878      	ldr	r0, [r7, #4]
 8005072:	f7fb fe4b 	bl	8000d0c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8005076:	687b      	ldr	r3, [r7, #4]
 8005078:	2224      	movs	r2, #36	; 0x24
 800507a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  __HAL_UART_DISABLE(huart);
 800507e:	687b      	ldr	r3, [r7, #4]
 8005080:	681b      	ldr	r3, [r3, #0]
 8005082:	681a      	ldr	r2, [r3, #0]
 8005084:	687b      	ldr	r3, [r7, #4]
 8005086:	681b      	ldr	r3, [r3, #0]
 8005088:	f022 0201 	bic.w	r2, r2, #1
 800508c:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800508e:	6878      	ldr	r0, [r7, #4]
 8005090:	f000 fb06 	bl	80056a0 <UART_SetConfig>
 8005094:	4603      	mov	r3, r0
 8005096:	2b01      	cmp	r3, #1
 8005098:	d101      	bne.n	800509e <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 800509a:	2301      	movs	r3, #1
 800509c:	e022      	b.n	80050e4 <HAL_UART_Init+0x98>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800509e:	687b      	ldr	r3, [r7, #4]
 80050a0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80050a2:	2b00      	cmp	r3, #0
 80050a4:	d002      	beq.n	80050ac <HAL_UART_Init+0x60>
  {
    UART_AdvFeatureConfig(huart);
 80050a6:	6878      	ldr	r0, [r7, #4]
 80050a8:	f001 f958 	bl	800635c <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80050ac:	687b      	ldr	r3, [r7, #4]
 80050ae:	681b      	ldr	r3, [r3, #0]
 80050b0:	685a      	ldr	r2, [r3, #4]
 80050b2:	687b      	ldr	r3, [r7, #4]
 80050b4:	681b      	ldr	r3, [r3, #0]
 80050b6:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80050ba:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80050bc:	687b      	ldr	r3, [r7, #4]
 80050be:	681b      	ldr	r3, [r3, #0]
 80050c0:	689a      	ldr	r2, [r3, #8]
 80050c2:	687b      	ldr	r3, [r7, #4]
 80050c4:	681b      	ldr	r3, [r3, #0]
 80050c6:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80050ca:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 80050cc:	687b      	ldr	r3, [r7, #4]
 80050ce:	681b      	ldr	r3, [r3, #0]
 80050d0:	681a      	ldr	r2, [r3, #0]
 80050d2:	687b      	ldr	r3, [r7, #4]
 80050d4:	681b      	ldr	r3, [r3, #0]
 80050d6:	f042 0201 	orr.w	r2, r2, #1
 80050da:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 80050dc:	6878      	ldr	r0, [r7, #4]
 80050de:	f001 f9df 	bl	80064a0 <UART_CheckIdleState>
 80050e2:	4603      	mov	r3, r0
}
 80050e4:	4618      	mov	r0, r3
 80050e6:	3708      	adds	r7, #8
 80050e8:	46bd      	mov	sp, r7
 80050ea:	bd80      	pop	{r7, pc}

080050ec <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 80050ec:	b580      	push	{r7, lr}
 80050ee:	b088      	sub	sp, #32
 80050f0:	af00      	add	r7, sp, #0
 80050f2:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 80050f4:	687b      	ldr	r3, [r7, #4]
 80050f6:	681b      	ldr	r3, [r3, #0]
 80050f8:	69db      	ldr	r3, [r3, #28]
 80050fa:	61fb      	str	r3, [r7, #28]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 80050fc:	687b      	ldr	r3, [r7, #4]
 80050fe:	681b      	ldr	r3, [r3, #0]
 8005100:	681b      	ldr	r3, [r3, #0]
 8005102:	61bb      	str	r3, [r7, #24]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8005104:	687b      	ldr	r3, [r7, #4]
 8005106:	681b      	ldr	r3, [r3, #0]
 8005108:	689b      	ldr	r3, [r3, #8]
 800510a:	617b      	str	r3, [r7, #20]

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 800510c:	69fa      	ldr	r2, [r7, #28]
 800510e:	f640 030f 	movw	r3, #2063	; 0x80f
 8005112:	4013      	ands	r3, r2
 8005114:	613b      	str	r3, [r7, #16]
  if (errorflags == 0U)
 8005116:	693b      	ldr	r3, [r7, #16]
 8005118:	2b00      	cmp	r3, #0
 800511a:	d118      	bne.n	800514e <HAL_UART_IRQHandler+0x62>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 800511c:	69fb      	ldr	r3, [r7, #28]
 800511e:	f003 0320 	and.w	r3, r3, #32
 8005122:	2b00      	cmp	r3, #0
 8005124:	d013      	beq.n	800514e <HAL_UART_IRQHandler+0x62>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 8005126:	69bb      	ldr	r3, [r7, #24]
 8005128:	f003 0320 	and.w	r3, r3, #32
 800512c:	2b00      	cmp	r3, #0
 800512e:	d104      	bne.n	800513a <HAL_UART_IRQHandler+0x4e>
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 8005130:	697b      	ldr	r3, [r7, #20]
 8005132:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005136:	2b00      	cmp	r3, #0
 8005138:	d009      	beq.n	800514e <HAL_UART_IRQHandler+0x62>
    {
      if (huart->RxISR != NULL)
 800513a:	687b      	ldr	r3, [r7, #4]
 800513c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800513e:	2b00      	cmp	r3, #0
 8005140:	f000 8282 	beq.w	8005648 <HAL_UART_IRQHandler+0x55c>
      {
        huart->RxISR(huart);
 8005144:	687b      	ldr	r3, [r7, #4]
 8005146:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005148:	6878      	ldr	r0, [r7, #4]
 800514a:	4798      	blx	r3
      }
      return;
 800514c:	e27c      	b.n	8005648 <HAL_UART_IRQHandler+0x55c>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 800514e:	693b      	ldr	r3, [r7, #16]
 8005150:	2b00      	cmp	r3, #0
 8005152:	f000 80ef 	beq.w	8005334 <HAL_UART_IRQHandler+0x248>
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
 8005156:	697a      	ldr	r2, [r7, #20]
 8005158:	4b73      	ldr	r3, [pc, #460]	; (8005328 <HAL_UART_IRQHandler+0x23c>)
 800515a:	4013      	ands	r3, r2
 800515c:	2b00      	cmp	r3, #0
 800515e:	d105      	bne.n	800516c <HAL_UART_IRQHandler+0x80>
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
 8005160:	69ba      	ldr	r2, [r7, #24]
 8005162:	4b72      	ldr	r3, [pc, #456]	; (800532c <HAL_UART_IRQHandler+0x240>)
 8005164:	4013      	ands	r3, r2
 8005166:	2b00      	cmp	r3, #0
 8005168:	f000 80e4 	beq.w	8005334 <HAL_UART_IRQHandler+0x248>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 800516c:	69fb      	ldr	r3, [r7, #28]
 800516e:	f003 0301 	and.w	r3, r3, #1
 8005172:	2b00      	cmp	r3, #0
 8005174:	d010      	beq.n	8005198 <HAL_UART_IRQHandler+0xac>
 8005176:	69bb      	ldr	r3, [r7, #24]
 8005178:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800517c:	2b00      	cmp	r3, #0
 800517e:	d00b      	beq.n	8005198 <HAL_UART_IRQHandler+0xac>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8005180:	687b      	ldr	r3, [r7, #4]
 8005182:	681b      	ldr	r3, [r3, #0]
 8005184:	2201      	movs	r2, #1
 8005186:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8005188:	687b      	ldr	r3, [r7, #4]
 800518a:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800518e:	f043 0201 	orr.w	r2, r3, #1
 8005192:	687b      	ldr	r3, [r7, #4]
 8005194:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8005198:	69fb      	ldr	r3, [r7, #28]
 800519a:	f003 0302 	and.w	r3, r3, #2
 800519e:	2b00      	cmp	r3, #0
 80051a0:	d010      	beq.n	80051c4 <HAL_UART_IRQHandler+0xd8>
 80051a2:	697b      	ldr	r3, [r7, #20]
 80051a4:	f003 0301 	and.w	r3, r3, #1
 80051a8:	2b00      	cmp	r3, #0
 80051aa:	d00b      	beq.n	80051c4 <HAL_UART_IRQHandler+0xd8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 80051ac:	687b      	ldr	r3, [r7, #4]
 80051ae:	681b      	ldr	r3, [r3, #0]
 80051b0:	2202      	movs	r2, #2
 80051b2:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 80051b4:	687b      	ldr	r3, [r7, #4]
 80051b6:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80051ba:	f043 0204 	orr.w	r2, r3, #4
 80051be:	687b      	ldr	r3, [r7, #4]
 80051c0:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 80051c4:	69fb      	ldr	r3, [r7, #28]
 80051c6:	f003 0304 	and.w	r3, r3, #4
 80051ca:	2b00      	cmp	r3, #0
 80051cc:	d010      	beq.n	80051f0 <HAL_UART_IRQHandler+0x104>
 80051ce:	697b      	ldr	r3, [r7, #20]
 80051d0:	f003 0301 	and.w	r3, r3, #1
 80051d4:	2b00      	cmp	r3, #0
 80051d6:	d00b      	beq.n	80051f0 <HAL_UART_IRQHandler+0x104>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 80051d8:	687b      	ldr	r3, [r7, #4]
 80051da:	681b      	ldr	r3, [r3, #0]
 80051dc:	2204      	movs	r2, #4
 80051de:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 80051e0:	687b      	ldr	r3, [r7, #4]
 80051e2:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80051e6:	f043 0202 	orr.w	r2, r3, #2
 80051ea:	687b      	ldr	r3, [r7, #4]
 80051ec:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 80051f0:	69fb      	ldr	r3, [r7, #28]
 80051f2:	f003 0308 	and.w	r3, r3, #8
 80051f6:	2b00      	cmp	r3, #0
 80051f8:	d015      	beq.n	8005226 <HAL_UART_IRQHandler+0x13a>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 80051fa:	69bb      	ldr	r3, [r7, #24]
 80051fc:	f003 0320 	and.w	r3, r3, #32
 8005200:	2b00      	cmp	r3, #0
 8005202:	d104      	bne.n	800520e <HAL_UART_IRQHandler+0x122>
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
 8005204:	697a      	ldr	r2, [r7, #20]
 8005206:	4b48      	ldr	r3, [pc, #288]	; (8005328 <HAL_UART_IRQHandler+0x23c>)
 8005208:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 800520a:	2b00      	cmp	r3, #0
 800520c:	d00b      	beq.n	8005226 <HAL_UART_IRQHandler+0x13a>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 800520e:	687b      	ldr	r3, [r7, #4]
 8005210:	681b      	ldr	r3, [r3, #0]
 8005212:	2208      	movs	r2, #8
 8005214:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8005216:	687b      	ldr	r3, [r7, #4]
 8005218:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800521c:	f043 0208 	orr.w	r2, r3, #8
 8005220:	687b      	ldr	r3, [r7, #4]
 8005222:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 8005226:	69fb      	ldr	r3, [r7, #28]
 8005228:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800522c:	2b00      	cmp	r3, #0
 800522e:	d011      	beq.n	8005254 <HAL_UART_IRQHandler+0x168>
 8005230:	69bb      	ldr	r3, [r7, #24]
 8005232:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8005236:	2b00      	cmp	r3, #0
 8005238:	d00c      	beq.n	8005254 <HAL_UART_IRQHandler+0x168>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800523a:	687b      	ldr	r3, [r7, #4]
 800523c:	681b      	ldr	r3, [r3, #0]
 800523e:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8005242:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 8005244:	687b      	ldr	r3, [r7, #4]
 8005246:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800524a:	f043 0220 	orr.w	r2, r3, #32
 800524e:	687b      	ldr	r3, [r7, #4]
 8005250:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8005254:	687b      	ldr	r3, [r7, #4]
 8005256:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800525a:	2b00      	cmp	r3, #0
 800525c:	f000 81f6 	beq.w	800564c <HAL_UART_IRQHandler+0x560>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 8005260:	69fb      	ldr	r3, [r7, #28]
 8005262:	f003 0320 	and.w	r3, r3, #32
 8005266:	2b00      	cmp	r3, #0
 8005268:	d011      	beq.n	800528e <HAL_UART_IRQHandler+0x1a2>
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 800526a:	69bb      	ldr	r3, [r7, #24]
 800526c:	f003 0320 	and.w	r3, r3, #32
 8005270:	2b00      	cmp	r3, #0
 8005272:	d104      	bne.n	800527e <HAL_UART_IRQHandler+0x192>
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 8005274:	697b      	ldr	r3, [r7, #20]
 8005276:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800527a:	2b00      	cmp	r3, #0
 800527c:	d007      	beq.n	800528e <HAL_UART_IRQHandler+0x1a2>
      {
        if (huart->RxISR != NULL)
 800527e:	687b      	ldr	r3, [r7, #4]
 8005280:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005282:	2b00      	cmp	r3, #0
 8005284:	d003      	beq.n	800528e <HAL_UART_IRQHandler+0x1a2>
        {
          huart->RxISR(huart);
 8005286:	687b      	ldr	r3, [r7, #4]
 8005288:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800528a:	6878      	ldr	r0, [r7, #4]
 800528c:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 800528e:	687b      	ldr	r3, [r7, #4]
 8005290:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8005294:	60fb      	str	r3, [r7, #12]
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8005296:	687b      	ldr	r3, [r7, #4]
 8005298:	681b      	ldr	r3, [r3, #0]
 800529a:	689b      	ldr	r3, [r3, #8]
 800529c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80052a0:	2b40      	cmp	r3, #64	; 0x40
 80052a2:	d004      	beq.n	80052ae <HAL_UART_IRQHandler+0x1c2>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 80052a4:	68fb      	ldr	r3, [r7, #12]
 80052a6:	f003 0328 	and.w	r3, r3, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 80052aa:	2b00      	cmp	r3, #0
 80052ac:	d031      	beq.n	8005312 <HAL_UART_IRQHandler+0x226>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 80052ae:	6878      	ldr	r0, [r7, #4]
 80052b0:	f001 f9c2 	bl	8006638 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80052b4:	687b      	ldr	r3, [r7, #4]
 80052b6:	681b      	ldr	r3, [r3, #0]
 80052b8:	689b      	ldr	r3, [r3, #8]
 80052ba:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80052be:	2b40      	cmp	r3, #64	; 0x40
 80052c0:	d123      	bne.n	800530a <HAL_UART_IRQHandler+0x21e>
        {
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80052c2:	687b      	ldr	r3, [r7, #4]
 80052c4:	681b      	ldr	r3, [r3, #0]
 80052c6:	689a      	ldr	r2, [r3, #8]
 80052c8:	687b      	ldr	r3, [r7, #4]
 80052ca:	681b      	ldr	r3, [r3, #0]
 80052cc:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80052d0:	609a      	str	r2, [r3, #8]

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 80052d2:	687b      	ldr	r3, [r7, #4]
 80052d4:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80052d6:	2b00      	cmp	r3, #0
 80052d8:	d013      	beq.n	8005302 <HAL_UART_IRQHandler+0x216>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 80052da:	687b      	ldr	r3, [r7, #4]
 80052dc:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80052de:	4a14      	ldr	r2, [pc, #80]	; (8005330 <HAL_UART_IRQHandler+0x244>)
 80052e0:	651a      	str	r2, [r3, #80]	; 0x50

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 80052e2:	687b      	ldr	r3, [r7, #4]
 80052e4:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80052e6:	4618      	mov	r0, r3
 80052e8:	f7fc fbd4 	bl	8001a94 <HAL_DMA_Abort_IT>
 80052ec:	4603      	mov	r3, r0
 80052ee:	2b00      	cmp	r3, #0
 80052f0:	d017      	beq.n	8005322 <HAL_UART_IRQHandler+0x236>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 80052f2:	687b      	ldr	r3, [r7, #4]
 80052f4:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80052f6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80052f8:	687a      	ldr	r2, [r7, #4]
 80052fa:	6fd2      	ldr	r2, [r2, #124]	; 0x7c
 80052fc:	4610      	mov	r0, r2
 80052fe:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005300:	e00f      	b.n	8005322 <HAL_UART_IRQHandler+0x236>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8005302:	6878      	ldr	r0, [r7, #4]
 8005304:	f000 f9b6 	bl	8005674 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005308:	e00b      	b.n	8005322 <HAL_UART_IRQHandler+0x236>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800530a:	6878      	ldr	r0, [r7, #4]
 800530c:	f000 f9b2 	bl	8005674 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005310:	e007      	b.n	8005322 <HAL_UART_IRQHandler+0x236>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8005312:	6878      	ldr	r0, [r7, #4]
 8005314:	f000 f9ae 	bl	8005674 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005318:	687b      	ldr	r3, [r7, #4]
 800531a:	2200      	movs	r2, #0
 800531c:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
      }
    }
    return;
 8005320:	e194      	b.n	800564c <HAL_UART_IRQHandler+0x560>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005322:	bf00      	nop
    return;
 8005324:	e192      	b.n	800564c <HAL_UART_IRQHandler+0x560>
 8005326:	bf00      	nop
 8005328:	10000001 	.word	0x10000001
 800532c:	04000120 	.word	0x04000120
 8005330:	0800669d 	.word	0x0800669d

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005334:	687b      	ldr	r3, [r7, #4]
 8005336:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8005338:	2b01      	cmp	r3, #1
 800533a:	f040 810f 	bne.w	800555c <HAL_UART_IRQHandler+0x470>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 800533e:	69fb      	ldr	r3, [r7, #28]
 8005340:	f003 0310 	and.w	r3, r3, #16
 8005344:	2b00      	cmp	r3, #0
 8005346:	f000 8109 	beq.w	800555c <HAL_UART_IRQHandler+0x470>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 800534a:	69bb      	ldr	r3, [r7, #24]
 800534c:	f003 0310 	and.w	r3, r3, #16
 8005350:	2b00      	cmp	r3, #0
 8005352:	f000 8103 	beq.w	800555c <HAL_UART_IRQHandler+0x470>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8005356:	687b      	ldr	r3, [r7, #4]
 8005358:	681b      	ldr	r3, [r3, #0]
 800535a:	2210      	movs	r2, #16
 800535c:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800535e:	687b      	ldr	r3, [r7, #4]
 8005360:	681b      	ldr	r3, [r3, #0]
 8005362:	689b      	ldr	r3, [r3, #8]
 8005364:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005368:	2b40      	cmp	r3, #64	; 0x40
 800536a:	f040 80bb 	bne.w	80054e4 <HAL_UART_IRQHandler+0x3f8>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 800536e:	687b      	ldr	r3, [r7, #4]
 8005370:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8005372:	681b      	ldr	r3, [r3, #0]
 8005374:	4a96      	ldr	r2, [pc, #600]	; (80055d0 <HAL_UART_IRQHandler+0x4e4>)
 8005376:	4293      	cmp	r3, r2
 8005378:	d059      	beq.n	800542e <HAL_UART_IRQHandler+0x342>
 800537a:	687b      	ldr	r3, [r7, #4]
 800537c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800537e:	681b      	ldr	r3, [r3, #0]
 8005380:	4a94      	ldr	r2, [pc, #592]	; (80055d4 <HAL_UART_IRQHandler+0x4e8>)
 8005382:	4293      	cmp	r3, r2
 8005384:	d053      	beq.n	800542e <HAL_UART_IRQHandler+0x342>
 8005386:	687b      	ldr	r3, [r7, #4]
 8005388:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800538a:	681b      	ldr	r3, [r3, #0]
 800538c:	4a92      	ldr	r2, [pc, #584]	; (80055d8 <HAL_UART_IRQHandler+0x4ec>)
 800538e:	4293      	cmp	r3, r2
 8005390:	d04d      	beq.n	800542e <HAL_UART_IRQHandler+0x342>
 8005392:	687b      	ldr	r3, [r7, #4]
 8005394:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8005396:	681b      	ldr	r3, [r3, #0]
 8005398:	4a90      	ldr	r2, [pc, #576]	; (80055dc <HAL_UART_IRQHandler+0x4f0>)
 800539a:	4293      	cmp	r3, r2
 800539c:	d047      	beq.n	800542e <HAL_UART_IRQHandler+0x342>
 800539e:	687b      	ldr	r3, [r7, #4]
 80053a0:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80053a2:	681b      	ldr	r3, [r3, #0]
 80053a4:	4a8e      	ldr	r2, [pc, #568]	; (80055e0 <HAL_UART_IRQHandler+0x4f4>)
 80053a6:	4293      	cmp	r3, r2
 80053a8:	d041      	beq.n	800542e <HAL_UART_IRQHandler+0x342>
 80053aa:	687b      	ldr	r3, [r7, #4]
 80053ac:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80053ae:	681b      	ldr	r3, [r3, #0]
 80053b0:	4a8c      	ldr	r2, [pc, #560]	; (80055e4 <HAL_UART_IRQHandler+0x4f8>)
 80053b2:	4293      	cmp	r3, r2
 80053b4:	d03b      	beq.n	800542e <HAL_UART_IRQHandler+0x342>
 80053b6:	687b      	ldr	r3, [r7, #4]
 80053b8:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80053ba:	681b      	ldr	r3, [r3, #0]
 80053bc:	4a8a      	ldr	r2, [pc, #552]	; (80055e8 <HAL_UART_IRQHandler+0x4fc>)
 80053be:	4293      	cmp	r3, r2
 80053c0:	d035      	beq.n	800542e <HAL_UART_IRQHandler+0x342>
 80053c2:	687b      	ldr	r3, [r7, #4]
 80053c4:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80053c6:	681b      	ldr	r3, [r3, #0]
 80053c8:	4a88      	ldr	r2, [pc, #544]	; (80055ec <HAL_UART_IRQHandler+0x500>)
 80053ca:	4293      	cmp	r3, r2
 80053cc:	d02f      	beq.n	800542e <HAL_UART_IRQHandler+0x342>
 80053ce:	687b      	ldr	r3, [r7, #4]
 80053d0:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80053d2:	681b      	ldr	r3, [r3, #0]
 80053d4:	4a86      	ldr	r2, [pc, #536]	; (80055f0 <HAL_UART_IRQHandler+0x504>)
 80053d6:	4293      	cmp	r3, r2
 80053d8:	d029      	beq.n	800542e <HAL_UART_IRQHandler+0x342>
 80053da:	687b      	ldr	r3, [r7, #4]
 80053dc:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80053de:	681b      	ldr	r3, [r3, #0]
 80053e0:	4a84      	ldr	r2, [pc, #528]	; (80055f4 <HAL_UART_IRQHandler+0x508>)
 80053e2:	4293      	cmp	r3, r2
 80053e4:	d023      	beq.n	800542e <HAL_UART_IRQHandler+0x342>
 80053e6:	687b      	ldr	r3, [r7, #4]
 80053e8:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80053ea:	681b      	ldr	r3, [r3, #0]
 80053ec:	4a82      	ldr	r2, [pc, #520]	; (80055f8 <HAL_UART_IRQHandler+0x50c>)
 80053ee:	4293      	cmp	r3, r2
 80053f0:	d01d      	beq.n	800542e <HAL_UART_IRQHandler+0x342>
 80053f2:	687b      	ldr	r3, [r7, #4]
 80053f4:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80053f6:	681b      	ldr	r3, [r3, #0]
 80053f8:	4a80      	ldr	r2, [pc, #512]	; (80055fc <HAL_UART_IRQHandler+0x510>)
 80053fa:	4293      	cmp	r3, r2
 80053fc:	d017      	beq.n	800542e <HAL_UART_IRQHandler+0x342>
 80053fe:	687b      	ldr	r3, [r7, #4]
 8005400:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8005402:	681b      	ldr	r3, [r3, #0]
 8005404:	4a7e      	ldr	r2, [pc, #504]	; (8005600 <HAL_UART_IRQHandler+0x514>)
 8005406:	4293      	cmp	r3, r2
 8005408:	d011      	beq.n	800542e <HAL_UART_IRQHandler+0x342>
 800540a:	687b      	ldr	r3, [r7, #4]
 800540c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800540e:	681b      	ldr	r3, [r3, #0]
 8005410:	4a7c      	ldr	r2, [pc, #496]	; (8005604 <HAL_UART_IRQHandler+0x518>)
 8005412:	4293      	cmp	r3, r2
 8005414:	d00b      	beq.n	800542e <HAL_UART_IRQHandler+0x342>
 8005416:	687b      	ldr	r3, [r7, #4]
 8005418:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800541a:	681b      	ldr	r3, [r3, #0]
 800541c:	4a7a      	ldr	r2, [pc, #488]	; (8005608 <HAL_UART_IRQHandler+0x51c>)
 800541e:	4293      	cmp	r3, r2
 8005420:	d005      	beq.n	800542e <HAL_UART_IRQHandler+0x342>
 8005422:	687b      	ldr	r3, [r7, #4]
 8005424:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8005426:	681b      	ldr	r3, [r3, #0]
 8005428:	4a78      	ldr	r2, [pc, #480]	; (800560c <HAL_UART_IRQHandler+0x520>)
 800542a:	4293      	cmp	r3, r2
 800542c:	d105      	bne.n	800543a <HAL_UART_IRQHandler+0x34e>
 800542e:	687b      	ldr	r3, [r7, #4]
 8005430:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8005432:	681b      	ldr	r3, [r3, #0]
 8005434:	685b      	ldr	r3, [r3, #4]
 8005436:	b29b      	uxth	r3, r3
 8005438:	e004      	b.n	8005444 <HAL_UART_IRQHandler+0x358>
 800543a:	687b      	ldr	r3, [r7, #4]
 800543c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800543e:	681b      	ldr	r3, [r3, #0]
 8005440:	685b      	ldr	r3, [r3, #4]
 8005442:	b29b      	uxth	r3, r3
 8005444:	813b      	strh	r3, [r7, #8]
      if ((nb_remaining_rx_data > 0U)
 8005446:	893b      	ldrh	r3, [r7, #8]
 8005448:	2b00      	cmp	r3, #0
 800544a:	f000 8101 	beq.w	8005650 <HAL_UART_IRQHandler+0x564>
          && (nb_remaining_rx_data < huart->RxXferSize))
 800544e:	687b      	ldr	r3, [r7, #4]
 8005450:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8005454:	893a      	ldrh	r2, [r7, #8]
 8005456:	429a      	cmp	r2, r3
 8005458:	f080 80fa 	bcs.w	8005650 <HAL_UART_IRQHandler+0x564>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 800545c:	687b      	ldr	r3, [r7, #4]
 800545e:	893a      	ldrh	r2, [r7, #8]
 8005460:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8005464:	687b      	ldr	r3, [r7, #4]
 8005466:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8005468:	69db      	ldr	r3, [r3, #28]
 800546a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800546e:	d02b      	beq.n	80054c8 <HAL_UART_IRQHandler+0x3dc>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8005470:	687b      	ldr	r3, [r7, #4]
 8005472:	681b      	ldr	r3, [r3, #0]
 8005474:	681a      	ldr	r2, [r3, #0]
 8005476:	687b      	ldr	r3, [r7, #4]
 8005478:	681b      	ldr	r3, [r3, #0]
 800547a:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800547e:	601a      	str	r2, [r3, #0]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005480:	687b      	ldr	r3, [r7, #4]
 8005482:	681b      	ldr	r3, [r3, #0]
 8005484:	689a      	ldr	r2, [r3, #8]
 8005486:	687b      	ldr	r3, [r7, #4]
 8005488:	681b      	ldr	r3, [r3, #0]
 800548a:	f022 0201 	bic.w	r2, r2, #1
 800548e:	609a      	str	r2, [r3, #8]

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8005490:	687b      	ldr	r3, [r7, #4]
 8005492:	681b      	ldr	r3, [r3, #0]
 8005494:	689a      	ldr	r2, [r3, #8]
 8005496:	687b      	ldr	r3, [r7, #4]
 8005498:	681b      	ldr	r3, [r3, #0]
 800549a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800549e:	609a      	str	r2, [r3, #8]

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 80054a0:	687b      	ldr	r3, [r7, #4]
 80054a2:	2220      	movs	r2, #32
 80054a4:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80054a8:	687b      	ldr	r3, [r7, #4]
 80054aa:	2200      	movs	r2, #0
 80054ac:	66da      	str	r2, [r3, #108]	; 0x6c

          CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80054ae:	687b      	ldr	r3, [r7, #4]
 80054b0:	681b      	ldr	r3, [r3, #0]
 80054b2:	681a      	ldr	r2, [r3, #0]
 80054b4:	687b      	ldr	r3, [r7, #4]
 80054b6:	681b      	ldr	r3, [r3, #0]
 80054b8:	f022 0210 	bic.w	r2, r2, #16
 80054bc:	601a      	str	r2, [r3, #0]

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 80054be:	687b      	ldr	r3, [r7, #4]
 80054c0:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80054c2:	4618      	mov	r0, r3
 80054c4:	f7fb ffc8 	bl	8001458 <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 80054c8:	687b      	ldr	r3, [r7, #4]
 80054ca:	f8b3 205c 	ldrh.w	r2, [r3, #92]	; 0x5c
 80054ce:	687b      	ldr	r3, [r7, #4]
 80054d0:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 80054d4:	b29b      	uxth	r3, r3
 80054d6:	1ad3      	subs	r3, r2, r3
 80054d8:	b29b      	uxth	r3, r3
 80054da:	4619      	mov	r1, r3
 80054dc:	6878      	ldr	r0, [r7, #4]
 80054de:	f000 f8d3 	bl	8005688 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 80054e2:	e0b5      	b.n	8005650 <HAL_UART_IRQHandler+0x564>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 80054e4:	687b      	ldr	r3, [r7, #4]
 80054e6:	f8b3 205c 	ldrh.w	r2, [r3, #92]	; 0x5c
 80054ea:	687b      	ldr	r3, [r7, #4]
 80054ec:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 80054f0:	b29b      	uxth	r3, r3
 80054f2:	1ad3      	subs	r3, r2, r3
 80054f4:	817b      	strh	r3, [r7, #10]
      if ((huart->RxXferCount > 0U)
 80054f6:	687b      	ldr	r3, [r7, #4]
 80054f8:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 80054fc:	b29b      	uxth	r3, r3
 80054fe:	2b00      	cmp	r3, #0
 8005500:	f000 80a8 	beq.w	8005654 <HAL_UART_IRQHandler+0x568>
          && (nb_rx_data > 0U))
 8005504:	897b      	ldrh	r3, [r7, #10]
 8005506:	2b00      	cmp	r3, #0
 8005508:	f000 80a4 	beq.w	8005654 <HAL_UART_IRQHandler+0x568>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800550c:	687b      	ldr	r3, [r7, #4]
 800550e:	681b      	ldr	r3, [r3, #0]
 8005510:	681a      	ldr	r2, [r3, #0]
 8005512:	687b      	ldr	r3, [r7, #4]
 8005514:	681b      	ldr	r3, [r3, #0]
 8005516:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 800551a:	601a      	str	r2, [r3, #0]

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800551c:	687b      	ldr	r3, [r7, #4]
 800551e:	681b      	ldr	r3, [r3, #0]
 8005520:	6899      	ldr	r1, [r3, #8]
 8005522:	687b      	ldr	r3, [r7, #4]
 8005524:	681a      	ldr	r2, [r3, #0]
 8005526:	4b3a      	ldr	r3, [pc, #232]	; (8005610 <HAL_UART_IRQHandler+0x524>)
 8005528:	400b      	ands	r3, r1
 800552a:	6093      	str	r3, [r2, #8]

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800552c:	687b      	ldr	r3, [r7, #4]
 800552e:	2220      	movs	r2, #32
 8005530:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005534:	687b      	ldr	r3, [r7, #4]
 8005536:	2200      	movs	r2, #0
 8005538:	66da      	str	r2, [r3, #108]	; 0x6c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 800553a:	687b      	ldr	r3, [r7, #4]
 800553c:	2200      	movs	r2, #0
 800553e:	671a      	str	r2, [r3, #112]	; 0x70

        CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005540:	687b      	ldr	r3, [r7, #4]
 8005542:	681b      	ldr	r3, [r3, #0]
 8005544:	681a      	ldr	r2, [r3, #0]
 8005546:	687b      	ldr	r3, [r7, #4]
 8005548:	681b      	ldr	r3, [r3, #0]
 800554a:	f022 0210 	bic.w	r2, r2, #16
 800554e:	601a      	str	r2, [r3, #0]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8005550:	897b      	ldrh	r3, [r7, #10]
 8005552:	4619      	mov	r1, r3
 8005554:	6878      	ldr	r0, [r7, #4]
 8005556:	f000 f897 	bl	8005688 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 800555a:	e07b      	b.n	8005654 <HAL_UART_IRQHandler+0x568>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 800555c:	69fb      	ldr	r3, [r7, #28]
 800555e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8005562:	2b00      	cmp	r3, #0
 8005564:	d00d      	beq.n	8005582 <HAL_UART_IRQHandler+0x496>
 8005566:	697b      	ldr	r3, [r7, #20]
 8005568:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800556c:	2b00      	cmp	r3, #0
 800556e:	d008      	beq.n	8005582 <HAL_UART_IRQHandler+0x496>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 8005570:	687b      	ldr	r3, [r7, #4]
 8005572:	681b      	ldr	r3, [r3, #0]
 8005574:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8005578:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 800557a:	6878      	ldr	r0, [r7, #4]
 800557c:	f001 f8be 	bl	80066fc <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8005580:	e06b      	b.n	800565a <HAL_UART_IRQHandler+0x56e>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
 8005582:	69fb      	ldr	r3, [r7, #28]
 8005584:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005588:	2b00      	cmp	r3, #0
 800558a:	d012      	beq.n	80055b2 <HAL_UART_IRQHandler+0x4c6>
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
 800558c:	69bb      	ldr	r3, [r7, #24]
 800558e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005592:	2b00      	cmp	r3, #0
 8005594:	d104      	bne.n	80055a0 <HAL_UART_IRQHandler+0x4b4>
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
 8005596:	697b      	ldr	r3, [r7, #20]
 8005598:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800559c:	2b00      	cmp	r3, #0
 800559e:	d008      	beq.n	80055b2 <HAL_UART_IRQHandler+0x4c6>
  {
    if (huart->TxISR != NULL)
 80055a0:	687b      	ldr	r3, [r7, #4]
 80055a2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80055a4:	2b00      	cmp	r3, #0
 80055a6:	d057      	beq.n	8005658 <HAL_UART_IRQHandler+0x56c>
    {
      huart->TxISR(huart);
 80055a8:	687b      	ldr	r3, [r7, #4]
 80055aa:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80055ac:	6878      	ldr	r0, [r7, #4]
 80055ae:	4798      	blx	r3
    }
    return;
 80055b0:	e052      	b.n	8005658 <HAL_UART_IRQHandler+0x56c>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 80055b2:	69fb      	ldr	r3, [r7, #28]
 80055b4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80055b8:	2b00      	cmp	r3, #0
 80055ba:	d02b      	beq.n	8005614 <HAL_UART_IRQHandler+0x528>
 80055bc:	69bb      	ldr	r3, [r7, #24]
 80055be:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80055c2:	2b00      	cmp	r3, #0
 80055c4:	d026      	beq.n	8005614 <HAL_UART_IRQHandler+0x528>
  {
    UART_EndTransmit_IT(huart);
 80055c6:	6878      	ldr	r0, [r7, #4]
 80055c8:	f001 f87e 	bl	80066c8 <UART_EndTransmit_IT>
    return;
 80055cc:	e045      	b.n	800565a <HAL_UART_IRQHandler+0x56e>
 80055ce:	bf00      	nop
 80055d0:	40020010 	.word	0x40020010
 80055d4:	40020028 	.word	0x40020028
 80055d8:	40020040 	.word	0x40020040
 80055dc:	40020058 	.word	0x40020058
 80055e0:	40020070 	.word	0x40020070
 80055e4:	40020088 	.word	0x40020088
 80055e8:	400200a0 	.word	0x400200a0
 80055ec:	400200b8 	.word	0x400200b8
 80055f0:	40020410 	.word	0x40020410
 80055f4:	40020428 	.word	0x40020428
 80055f8:	40020440 	.word	0x40020440
 80055fc:	40020458 	.word	0x40020458
 8005600:	40020470 	.word	0x40020470
 8005604:	40020488 	.word	0x40020488
 8005608:	400204a0 	.word	0x400204a0
 800560c:	400204b8 	.word	0x400204b8
 8005610:	effffffe 	.word	0xeffffffe
  }

  /* UART TX Fifo Empty occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_TXFE) != 0U) && ((cr1its & USART_CR1_TXFEIE) != 0U))
 8005614:	69fb      	ldr	r3, [r7, #28]
 8005616:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800561a:	2b00      	cmp	r3, #0
 800561c:	d008      	beq.n	8005630 <HAL_UART_IRQHandler+0x544>
 800561e:	69bb      	ldr	r3, [r7, #24]
 8005620:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8005624:	2b00      	cmp	r3, #0
 8005626:	d003      	beq.n	8005630 <HAL_UART_IRQHandler+0x544>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Tx Fifo Empty Callback */
    huart->TxFifoEmptyCallback(huart);
#else
    /* Call legacy weak Tx Fifo Empty Callback */
    HAL_UARTEx_TxFifoEmptyCallback(huart);
 8005628:	6878      	ldr	r0, [r7, #4]
 800562a:	f001 f87b 	bl	8006724 <HAL_UARTEx_TxFifoEmptyCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800562e:	e014      	b.n	800565a <HAL_UART_IRQHandler+0x56e>
  }

  /* UART RX Fifo Full occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_RXFF) != 0U) && ((cr1its & USART_CR1_RXFFIE) != 0U))
 8005630:	69fb      	ldr	r3, [r7, #28]
 8005632:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8005636:	2b00      	cmp	r3, #0
 8005638:	d00f      	beq.n	800565a <HAL_UART_IRQHandler+0x56e>
 800563a:	69bb      	ldr	r3, [r7, #24]
 800563c:	2b00      	cmp	r3, #0
 800563e:	da0c      	bge.n	800565a <HAL_UART_IRQHandler+0x56e>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Rx Fifo Full Callback */
    huart->RxFifoFullCallback(huart);
#else
    /* Call legacy weak Rx Fifo Full Callback */
    HAL_UARTEx_RxFifoFullCallback(huart);
 8005640:	6878      	ldr	r0, [r7, #4]
 8005642:	f001 f865 	bl	8006710 <HAL_UARTEx_RxFifoFullCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8005646:	e008      	b.n	800565a <HAL_UART_IRQHandler+0x56e>
      return;
 8005648:	bf00      	nop
 800564a:	e006      	b.n	800565a <HAL_UART_IRQHandler+0x56e>
    return;
 800564c:	bf00      	nop
 800564e:	e004      	b.n	800565a <HAL_UART_IRQHandler+0x56e>
      return;
 8005650:	bf00      	nop
 8005652:	e002      	b.n	800565a <HAL_UART_IRQHandler+0x56e>
      return;
 8005654:	bf00      	nop
 8005656:	e000      	b.n	800565a <HAL_UART_IRQHandler+0x56e>
    return;
 8005658:	bf00      	nop
  }
}
 800565a:	3720      	adds	r7, #32
 800565c:	46bd      	mov	sp, r7
 800565e:	bd80      	pop	{r7, pc}

08005660 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8005660:	b480      	push	{r7}
 8005662:	b083      	sub	sp, #12
 8005664:	af00      	add	r7, sp, #0
 8005666:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 8005668:	bf00      	nop
 800566a:	370c      	adds	r7, #12
 800566c:	46bd      	mov	sp, r7
 800566e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005672:	4770      	bx	lr

08005674 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8005674:	b480      	push	{r7}
 8005676:	b083      	sub	sp, #12
 8005678:	af00      	add	r7, sp, #0
 800567a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 800567c:	bf00      	nop
 800567e:	370c      	adds	r7, #12
 8005680:	46bd      	mov	sp, r7
 8005682:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005686:	4770      	bx	lr

08005688 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8005688:	b480      	push	{r7}
 800568a:	b083      	sub	sp, #12
 800568c:	af00      	add	r7, sp, #0
 800568e:	6078      	str	r0, [r7, #4]
 8005690:	460b      	mov	r3, r1
 8005692:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8005694:	bf00      	nop
 8005696:	370c      	adds	r7, #12
 8005698:	46bd      	mov	sp, r7
 800569a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800569e:	4770      	bx	lr

080056a0 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 80056a0:	b5b0      	push	{r4, r5, r7, lr}
 80056a2:	b08e      	sub	sp, #56	; 0x38
 80056a4:	af00      	add	r7, sp, #0
 80056a6:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 80056a8:	2300      	movs	r3, #0
 80056aa:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80056ae:	687b      	ldr	r3, [r7, #4]
 80056b0:	689a      	ldr	r2, [r3, #8]
 80056b2:	687b      	ldr	r3, [r7, #4]
 80056b4:	691b      	ldr	r3, [r3, #16]
 80056b6:	431a      	orrs	r2, r3
 80056b8:	687b      	ldr	r3, [r7, #4]
 80056ba:	695b      	ldr	r3, [r3, #20]
 80056bc:	431a      	orrs	r2, r3
 80056be:	687b      	ldr	r3, [r7, #4]
 80056c0:	69db      	ldr	r3, [r3, #28]
 80056c2:	4313      	orrs	r3, r2
 80056c4:	637b      	str	r3, [r7, #52]	; 0x34
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 80056c6:	687b      	ldr	r3, [r7, #4]
 80056c8:	681b      	ldr	r3, [r3, #0]
 80056ca:	681a      	ldr	r2, [r3, #0]
 80056cc:	4bbf      	ldr	r3, [pc, #764]	; (80059cc <UART_SetConfig+0x32c>)
 80056ce:	4013      	ands	r3, r2
 80056d0:	687a      	ldr	r2, [r7, #4]
 80056d2:	6812      	ldr	r2, [r2, #0]
 80056d4:	6b79      	ldr	r1, [r7, #52]	; 0x34
 80056d6:	430b      	orrs	r3, r1
 80056d8:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80056da:	687b      	ldr	r3, [r7, #4]
 80056dc:	681b      	ldr	r3, [r3, #0]
 80056de:	685b      	ldr	r3, [r3, #4]
 80056e0:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 80056e4:	687b      	ldr	r3, [r7, #4]
 80056e6:	68da      	ldr	r2, [r3, #12]
 80056e8:	687b      	ldr	r3, [r7, #4]
 80056ea:	681b      	ldr	r3, [r3, #0]
 80056ec:	430a      	orrs	r2, r1
 80056ee:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 80056f0:	687b      	ldr	r3, [r7, #4]
 80056f2:	699b      	ldr	r3, [r3, #24]
 80056f4:	637b      	str	r3, [r7, #52]	; 0x34

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 80056f6:	687b      	ldr	r3, [r7, #4]
 80056f8:	681b      	ldr	r3, [r3, #0]
 80056fa:	4ab5      	ldr	r2, [pc, #724]	; (80059d0 <UART_SetConfig+0x330>)
 80056fc:	4293      	cmp	r3, r2
 80056fe:	d004      	beq.n	800570a <UART_SetConfig+0x6a>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8005700:	687b      	ldr	r3, [r7, #4]
 8005702:	6a1b      	ldr	r3, [r3, #32]
 8005704:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8005706:	4313      	orrs	r3, r2
 8005708:	637b      	str	r3, [r7, #52]	; 0x34
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800570a:	687b      	ldr	r3, [r7, #4]
 800570c:	681b      	ldr	r3, [r3, #0]
 800570e:	689a      	ldr	r2, [r3, #8]
 8005710:	4bb0      	ldr	r3, [pc, #704]	; (80059d4 <UART_SetConfig+0x334>)
 8005712:	4013      	ands	r3, r2
 8005714:	687a      	ldr	r2, [r7, #4]
 8005716:	6812      	ldr	r2, [r2, #0]
 8005718:	6b79      	ldr	r1, [r7, #52]	; 0x34
 800571a:	430b      	orrs	r3, r1
 800571c:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 800571e:	687b      	ldr	r3, [r7, #4]
 8005720:	681b      	ldr	r3, [r3, #0]
 8005722:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005724:	f023 010f 	bic.w	r1, r3, #15
 8005728:	687b      	ldr	r3, [r7, #4]
 800572a:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800572c:	687b      	ldr	r3, [r7, #4]
 800572e:	681b      	ldr	r3, [r3, #0]
 8005730:	430a      	orrs	r2, r1
 8005732:	62da      	str	r2, [r3, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8005734:	687b      	ldr	r3, [r7, #4]
 8005736:	681b      	ldr	r3, [r3, #0]
 8005738:	4aa7      	ldr	r2, [pc, #668]	; (80059d8 <UART_SetConfig+0x338>)
 800573a:	4293      	cmp	r3, r2
 800573c:	d176      	bne.n	800582c <UART_SetConfig+0x18c>
 800573e:	4ba7      	ldr	r3, [pc, #668]	; (80059dc <UART_SetConfig+0x33c>)
 8005740:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005742:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8005746:	2b28      	cmp	r3, #40	; 0x28
 8005748:	d86c      	bhi.n	8005824 <UART_SetConfig+0x184>
 800574a:	a201      	add	r2, pc, #4	; (adr r2, 8005750 <UART_SetConfig+0xb0>)
 800574c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005750:	080057f5 	.word	0x080057f5
 8005754:	08005825 	.word	0x08005825
 8005758:	08005825 	.word	0x08005825
 800575c:	08005825 	.word	0x08005825
 8005760:	08005825 	.word	0x08005825
 8005764:	08005825 	.word	0x08005825
 8005768:	08005825 	.word	0x08005825
 800576c:	08005825 	.word	0x08005825
 8005770:	080057fd 	.word	0x080057fd
 8005774:	08005825 	.word	0x08005825
 8005778:	08005825 	.word	0x08005825
 800577c:	08005825 	.word	0x08005825
 8005780:	08005825 	.word	0x08005825
 8005784:	08005825 	.word	0x08005825
 8005788:	08005825 	.word	0x08005825
 800578c:	08005825 	.word	0x08005825
 8005790:	08005805 	.word	0x08005805
 8005794:	08005825 	.word	0x08005825
 8005798:	08005825 	.word	0x08005825
 800579c:	08005825 	.word	0x08005825
 80057a0:	08005825 	.word	0x08005825
 80057a4:	08005825 	.word	0x08005825
 80057a8:	08005825 	.word	0x08005825
 80057ac:	08005825 	.word	0x08005825
 80057b0:	0800580d 	.word	0x0800580d
 80057b4:	08005825 	.word	0x08005825
 80057b8:	08005825 	.word	0x08005825
 80057bc:	08005825 	.word	0x08005825
 80057c0:	08005825 	.word	0x08005825
 80057c4:	08005825 	.word	0x08005825
 80057c8:	08005825 	.word	0x08005825
 80057cc:	08005825 	.word	0x08005825
 80057d0:	08005815 	.word	0x08005815
 80057d4:	08005825 	.word	0x08005825
 80057d8:	08005825 	.word	0x08005825
 80057dc:	08005825 	.word	0x08005825
 80057e0:	08005825 	.word	0x08005825
 80057e4:	08005825 	.word	0x08005825
 80057e8:	08005825 	.word	0x08005825
 80057ec:	08005825 	.word	0x08005825
 80057f0:	0800581d 	.word	0x0800581d
 80057f4:	2301      	movs	r3, #1
 80057f6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80057fa:	e326      	b.n	8005e4a <UART_SetConfig+0x7aa>
 80057fc:	2304      	movs	r3, #4
 80057fe:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8005802:	e322      	b.n	8005e4a <UART_SetConfig+0x7aa>
 8005804:	2308      	movs	r3, #8
 8005806:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800580a:	e31e      	b.n	8005e4a <UART_SetConfig+0x7aa>
 800580c:	2310      	movs	r3, #16
 800580e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8005812:	e31a      	b.n	8005e4a <UART_SetConfig+0x7aa>
 8005814:	2320      	movs	r3, #32
 8005816:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800581a:	e316      	b.n	8005e4a <UART_SetConfig+0x7aa>
 800581c:	2340      	movs	r3, #64	; 0x40
 800581e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8005822:	e312      	b.n	8005e4a <UART_SetConfig+0x7aa>
 8005824:	2380      	movs	r3, #128	; 0x80
 8005826:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800582a:	e30e      	b.n	8005e4a <UART_SetConfig+0x7aa>
 800582c:	687b      	ldr	r3, [r7, #4]
 800582e:	681b      	ldr	r3, [r3, #0]
 8005830:	4a6b      	ldr	r2, [pc, #428]	; (80059e0 <UART_SetConfig+0x340>)
 8005832:	4293      	cmp	r3, r2
 8005834:	d130      	bne.n	8005898 <UART_SetConfig+0x1f8>
 8005836:	4b69      	ldr	r3, [pc, #420]	; (80059dc <UART_SetConfig+0x33c>)
 8005838:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800583a:	f003 0307 	and.w	r3, r3, #7
 800583e:	2b05      	cmp	r3, #5
 8005840:	d826      	bhi.n	8005890 <UART_SetConfig+0x1f0>
 8005842:	a201      	add	r2, pc, #4	; (adr r2, 8005848 <UART_SetConfig+0x1a8>)
 8005844:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005848:	08005861 	.word	0x08005861
 800584c:	08005869 	.word	0x08005869
 8005850:	08005871 	.word	0x08005871
 8005854:	08005879 	.word	0x08005879
 8005858:	08005881 	.word	0x08005881
 800585c:	08005889 	.word	0x08005889
 8005860:	2300      	movs	r3, #0
 8005862:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8005866:	e2f0      	b.n	8005e4a <UART_SetConfig+0x7aa>
 8005868:	2304      	movs	r3, #4
 800586a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800586e:	e2ec      	b.n	8005e4a <UART_SetConfig+0x7aa>
 8005870:	2308      	movs	r3, #8
 8005872:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8005876:	e2e8      	b.n	8005e4a <UART_SetConfig+0x7aa>
 8005878:	2310      	movs	r3, #16
 800587a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800587e:	e2e4      	b.n	8005e4a <UART_SetConfig+0x7aa>
 8005880:	2320      	movs	r3, #32
 8005882:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8005886:	e2e0      	b.n	8005e4a <UART_SetConfig+0x7aa>
 8005888:	2340      	movs	r3, #64	; 0x40
 800588a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800588e:	e2dc      	b.n	8005e4a <UART_SetConfig+0x7aa>
 8005890:	2380      	movs	r3, #128	; 0x80
 8005892:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8005896:	e2d8      	b.n	8005e4a <UART_SetConfig+0x7aa>
 8005898:	687b      	ldr	r3, [r7, #4]
 800589a:	681b      	ldr	r3, [r3, #0]
 800589c:	4a51      	ldr	r2, [pc, #324]	; (80059e4 <UART_SetConfig+0x344>)
 800589e:	4293      	cmp	r3, r2
 80058a0:	d130      	bne.n	8005904 <UART_SetConfig+0x264>
 80058a2:	4b4e      	ldr	r3, [pc, #312]	; (80059dc <UART_SetConfig+0x33c>)
 80058a4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80058a6:	f003 0307 	and.w	r3, r3, #7
 80058aa:	2b05      	cmp	r3, #5
 80058ac:	d826      	bhi.n	80058fc <UART_SetConfig+0x25c>
 80058ae:	a201      	add	r2, pc, #4	; (adr r2, 80058b4 <UART_SetConfig+0x214>)
 80058b0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80058b4:	080058cd 	.word	0x080058cd
 80058b8:	080058d5 	.word	0x080058d5
 80058bc:	080058dd 	.word	0x080058dd
 80058c0:	080058e5 	.word	0x080058e5
 80058c4:	080058ed 	.word	0x080058ed
 80058c8:	080058f5 	.word	0x080058f5
 80058cc:	2300      	movs	r3, #0
 80058ce:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80058d2:	e2ba      	b.n	8005e4a <UART_SetConfig+0x7aa>
 80058d4:	2304      	movs	r3, #4
 80058d6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80058da:	e2b6      	b.n	8005e4a <UART_SetConfig+0x7aa>
 80058dc:	2308      	movs	r3, #8
 80058de:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80058e2:	e2b2      	b.n	8005e4a <UART_SetConfig+0x7aa>
 80058e4:	2310      	movs	r3, #16
 80058e6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80058ea:	e2ae      	b.n	8005e4a <UART_SetConfig+0x7aa>
 80058ec:	2320      	movs	r3, #32
 80058ee:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80058f2:	e2aa      	b.n	8005e4a <UART_SetConfig+0x7aa>
 80058f4:	2340      	movs	r3, #64	; 0x40
 80058f6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80058fa:	e2a6      	b.n	8005e4a <UART_SetConfig+0x7aa>
 80058fc:	2380      	movs	r3, #128	; 0x80
 80058fe:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8005902:	e2a2      	b.n	8005e4a <UART_SetConfig+0x7aa>
 8005904:	687b      	ldr	r3, [r7, #4]
 8005906:	681b      	ldr	r3, [r3, #0]
 8005908:	4a37      	ldr	r2, [pc, #220]	; (80059e8 <UART_SetConfig+0x348>)
 800590a:	4293      	cmp	r3, r2
 800590c:	d130      	bne.n	8005970 <UART_SetConfig+0x2d0>
 800590e:	4b33      	ldr	r3, [pc, #204]	; (80059dc <UART_SetConfig+0x33c>)
 8005910:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005912:	f003 0307 	and.w	r3, r3, #7
 8005916:	2b05      	cmp	r3, #5
 8005918:	d826      	bhi.n	8005968 <UART_SetConfig+0x2c8>
 800591a:	a201      	add	r2, pc, #4	; (adr r2, 8005920 <UART_SetConfig+0x280>)
 800591c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005920:	08005939 	.word	0x08005939
 8005924:	08005941 	.word	0x08005941
 8005928:	08005949 	.word	0x08005949
 800592c:	08005951 	.word	0x08005951
 8005930:	08005959 	.word	0x08005959
 8005934:	08005961 	.word	0x08005961
 8005938:	2300      	movs	r3, #0
 800593a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800593e:	e284      	b.n	8005e4a <UART_SetConfig+0x7aa>
 8005940:	2304      	movs	r3, #4
 8005942:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8005946:	e280      	b.n	8005e4a <UART_SetConfig+0x7aa>
 8005948:	2308      	movs	r3, #8
 800594a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800594e:	e27c      	b.n	8005e4a <UART_SetConfig+0x7aa>
 8005950:	2310      	movs	r3, #16
 8005952:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8005956:	e278      	b.n	8005e4a <UART_SetConfig+0x7aa>
 8005958:	2320      	movs	r3, #32
 800595a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800595e:	e274      	b.n	8005e4a <UART_SetConfig+0x7aa>
 8005960:	2340      	movs	r3, #64	; 0x40
 8005962:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8005966:	e270      	b.n	8005e4a <UART_SetConfig+0x7aa>
 8005968:	2380      	movs	r3, #128	; 0x80
 800596a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800596e:	e26c      	b.n	8005e4a <UART_SetConfig+0x7aa>
 8005970:	687b      	ldr	r3, [r7, #4]
 8005972:	681b      	ldr	r3, [r3, #0]
 8005974:	4a1d      	ldr	r2, [pc, #116]	; (80059ec <UART_SetConfig+0x34c>)
 8005976:	4293      	cmp	r3, r2
 8005978:	d142      	bne.n	8005a00 <UART_SetConfig+0x360>
 800597a:	4b18      	ldr	r3, [pc, #96]	; (80059dc <UART_SetConfig+0x33c>)
 800597c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800597e:	f003 0307 	and.w	r3, r3, #7
 8005982:	2b05      	cmp	r3, #5
 8005984:	d838      	bhi.n	80059f8 <UART_SetConfig+0x358>
 8005986:	a201      	add	r2, pc, #4	; (adr r2, 800598c <UART_SetConfig+0x2ec>)
 8005988:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800598c:	080059a5 	.word	0x080059a5
 8005990:	080059ad 	.word	0x080059ad
 8005994:	080059b5 	.word	0x080059b5
 8005998:	080059bd 	.word	0x080059bd
 800599c:	080059c5 	.word	0x080059c5
 80059a0:	080059f1 	.word	0x080059f1
 80059a4:	2300      	movs	r3, #0
 80059a6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80059aa:	e24e      	b.n	8005e4a <UART_SetConfig+0x7aa>
 80059ac:	2304      	movs	r3, #4
 80059ae:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80059b2:	e24a      	b.n	8005e4a <UART_SetConfig+0x7aa>
 80059b4:	2308      	movs	r3, #8
 80059b6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80059ba:	e246      	b.n	8005e4a <UART_SetConfig+0x7aa>
 80059bc:	2310      	movs	r3, #16
 80059be:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80059c2:	e242      	b.n	8005e4a <UART_SetConfig+0x7aa>
 80059c4:	2320      	movs	r3, #32
 80059c6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80059ca:	e23e      	b.n	8005e4a <UART_SetConfig+0x7aa>
 80059cc:	cfff69f3 	.word	0xcfff69f3
 80059d0:	58000c00 	.word	0x58000c00
 80059d4:	11fff4ff 	.word	0x11fff4ff
 80059d8:	40011000 	.word	0x40011000
 80059dc:	58024400 	.word	0x58024400
 80059e0:	40004400 	.word	0x40004400
 80059e4:	40004800 	.word	0x40004800
 80059e8:	40004c00 	.word	0x40004c00
 80059ec:	40005000 	.word	0x40005000
 80059f0:	2340      	movs	r3, #64	; 0x40
 80059f2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80059f6:	e228      	b.n	8005e4a <UART_SetConfig+0x7aa>
 80059f8:	2380      	movs	r3, #128	; 0x80
 80059fa:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80059fe:	e224      	b.n	8005e4a <UART_SetConfig+0x7aa>
 8005a00:	687b      	ldr	r3, [r7, #4]
 8005a02:	681b      	ldr	r3, [r3, #0]
 8005a04:	4ab1      	ldr	r2, [pc, #708]	; (8005ccc <UART_SetConfig+0x62c>)
 8005a06:	4293      	cmp	r3, r2
 8005a08:	d176      	bne.n	8005af8 <UART_SetConfig+0x458>
 8005a0a:	4bb1      	ldr	r3, [pc, #708]	; (8005cd0 <UART_SetConfig+0x630>)
 8005a0c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005a0e:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8005a12:	2b28      	cmp	r3, #40	; 0x28
 8005a14:	d86c      	bhi.n	8005af0 <UART_SetConfig+0x450>
 8005a16:	a201      	add	r2, pc, #4	; (adr r2, 8005a1c <UART_SetConfig+0x37c>)
 8005a18:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005a1c:	08005ac1 	.word	0x08005ac1
 8005a20:	08005af1 	.word	0x08005af1
 8005a24:	08005af1 	.word	0x08005af1
 8005a28:	08005af1 	.word	0x08005af1
 8005a2c:	08005af1 	.word	0x08005af1
 8005a30:	08005af1 	.word	0x08005af1
 8005a34:	08005af1 	.word	0x08005af1
 8005a38:	08005af1 	.word	0x08005af1
 8005a3c:	08005ac9 	.word	0x08005ac9
 8005a40:	08005af1 	.word	0x08005af1
 8005a44:	08005af1 	.word	0x08005af1
 8005a48:	08005af1 	.word	0x08005af1
 8005a4c:	08005af1 	.word	0x08005af1
 8005a50:	08005af1 	.word	0x08005af1
 8005a54:	08005af1 	.word	0x08005af1
 8005a58:	08005af1 	.word	0x08005af1
 8005a5c:	08005ad1 	.word	0x08005ad1
 8005a60:	08005af1 	.word	0x08005af1
 8005a64:	08005af1 	.word	0x08005af1
 8005a68:	08005af1 	.word	0x08005af1
 8005a6c:	08005af1 	.word	0x08005af1
 8005a70:	08005af1 	.word	0x08005af1
 8005a74:	08005af1 	.word	0x08005af1
 8005a78:	08005af1 	.word	0x08005af1
 8005a7c:	08005ad9 	.word	0x08005ad9
 8005a80:	08005af1 	.word	0x08005af1
 8005a84:	08005af1 	.word	0x08005af1
 8005a88:	08005af1 	.word	0x08005af1
 8005a8c:	08005af1 	.word	0x08005af1
 8005a90:	08005af1 	.word	0x08005af1
 8005a94:	08005af1 	.word	0x08005af1
 8005a98:	08005af1 	.word	0x08005af1
 8005a9c:	08005ae1 	.word	0x08005ae1
 8005aa0:	08005af1 	.word	0x08005af1
 8005aa4:	08005af1 	.word	0x08005af1
 8005aa8:	08005af1 	.word	0x08005af1
 8005aac:	08005af1 	.word	0x08005af1
 8005ab0:	08005af1 	.word	0x08005af1
 8005ab4:	08005af1 	.word	0x08005af1
 8005ab8:	08005af1 	.word	0x08005af1
 8005abc:	08005ae9 	.word	0x08005ae9
 8005ac0:	2301      	movs	r3, #1
 8005ac2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8005ac6:	e1c0      	b.n	8005e4a <UART_SetConfig+0x7aa>
 8005ac8:	2304      	movs	r3, #4
 8005aca:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8005ace:	e1bc      	b.n	8005e4a <UART_SetConfig+0x7aa>
 8005ad0:	2308      	movs	r3, #8
 8005ad2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8005ad6:	e1b8      	b.n	8005e4a <UART_SetConfig+0x7aa>
 8005ad8:	2310      	movs	r3, #16
 8005ada:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8005ade:	e1b4      	b.n	8005e4a <UART_SetConfig+0x7aa>
 8005ae0:	2320      	movs	r3, #32
 8005ae2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8005ae6:	e1b0      	b.n	8005e4a <UART_SetConfig+0x7aa>
 8005ae8:	2340      	movs	r3, #64	; 0x40
 8005aea:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8005aee:	e1ac      	b.n	8005e4a <UART_SetConfig+0x7aa>
 8005af0:	2380      	movs	r3, #128	; 0x80
 8005af2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8005af6:	e1a8      	b.n	8005e4a <UART_SetConfig+0x7aa>
 8005af8:	687b      	ldr	r3, [r7, #4]
 8005afa:	681b      	ldr	r3, [r3, #0]
 8005afc:	4a75      	ldr	r2, [pc, #468]	; (8005cd4 <UART_SetConfig+0x634>)
 8005afe:	4293      	cmp	r3, r2
 8005b00:	d130      	bne.n	8005b64 <UART_SetConfig+0x4c4>
 8005b02:	4b73      	ldr	r3, [pc, #460]	; (8005cd0 <UART_SetConfig+0x630>)
 8005b04:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005b06:	f003 0307 	and.w	r3, r3, #7
 8005b0a:	2b05      	cmp	r3, #5
 8005b0c:	d826      	bhi.n	8005b5c <UART_SetConfig+0x4bc>
 8005b0e:	a201      	add	r2, pc, #4	; (adr r2, 8005b14 <UART_SetConfig+0x474>)
 8005b10:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005b14:	08005b2d 	.word	0x08005b2d
 8005b18:	08005b35 	.word	0x08005b35
 8005b1c:	08005b3d 	.word	0x08005b3d
 8005b20:	08005b45 	.word	0x08005b45
 8005b24:	08005b4d 	.word	0x08005b4d
 8005b28:	08005b55 	.word	0x08005b55
 8005b2c:	2300      	movs	r3, #0
 8005b2e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8005b32:	e18a      	b.n	8005e4a <UART_SetConfig+0x7aa>
 8005b34:	2304      	movs	r3, #4
 8005b36:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8005b3a:	e186      	b.n	8005e4a <UART_SetConfig+0x7aa>
 8005b3c:	2308      	movs	r3, #8
 8005b3e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8005b42:	e182      	b.n	8005e4a <UART_SetConfig+0x7aa>
 8005b44:	2310      	movs	r3, #16
 8005b46:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8005b4a:	e17e      	b.n	8005e4a <UART_SetConfig+0x7aa>
 8005b4c:	2320      	movs	r3, #32
 8005b4e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8005b52:	e17a      	b.n	8005e4a <UART_SetConfig+0x7aa>
 8005b54:	2340      	movs	r3, #64	; 0x40
 8005b56:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8005b5a:	e176      	b.n	8005e4a <UART_SetConfig+0x7aa>
 8005b5c:	2380      	movs	r3, #128	; 0x80
 8005b5e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8005b62:	e172      	b.n	8005e4a <UART_SetConfig+0x7aa>
 8005b64:	687b      	ldr	r3, [r7, #4]
 8005b66:	681b      	ldr	r3, [r3, #0]
 8005b68:	4a5b      	ldr	r2, [pc, #364]	; (8005cd8 <UART_SetConfig+0x638>)
 8005b6a:	4293      	cmp	r3, r2
 8005b6c:	d130      	bne.n	8005bd0 <UART_SetConfig+0x530>
 8005b6e:	4b58      	ldr	r3, [pc, #352]	; (8005cd0 <UART_SetConfig+0x630>)
 8005b70:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005b72:	f003 0307 	and.w	r3, r3, #7
 8005b76:	2b05      	cmp	r3, #5
 8005b78:	d826      	bhi.n	8005bc8 <UART_SetConfig+0x528>
 8005b7a:	a201      	add	r2, pc, #4	; (adr r2, 8005b80 <UART_SetConfig+0x4e0>)
 8005b7c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005b80:	08005b99 	.word	0x08005b99
 8005b84:	08005ba1 	.word	0x08005ba1
 8005b88:	08005ba9 	.word	0x08005ba9
 8005b8c:	08005bb1 	.word	0x08005bb1
 8005b90:	08005bb9 	.word	0x08005bb9
 8005b94:	08005bc1 	.word	0x08005bc1
 8005b98:	2300      	movs	r3, #0
 8005b9a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8005b9e:	e154      	b.n	8005e4a <UART_SetConfig+0x7aa>
 8005ba0:	2304      	movs	r3, #4
 8005ba2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8005ba6:	e150      	b.n	8005e4a <UART_SetConfig+0x7aa>
 8005ba8:	2308      	movs	r3, #8
 8005baa:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8005bae:	e14c      	b.n	8005e4a <UART_SetConfig+0x7aa>
 8005bb0:	2310      	movs	r3, #16
 8005bb2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8005bb6:	e148      	b.n	8005e4a <UART_SetConfig+0x7aa>
 8005bb8:	2320      	movs	r3, #32
 8005bba:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8005bbe:	e144      	b.n	8005e4a <UART_SetConfig+0x7aa>
 8005bc0:	2340      	movs	r3, #64	; 0x40
 8005bc2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8005bc6:	e140      	b.n	8005e4a <UART_SetConfig+0x7aa>
 8005bc8:	2380      	movs	r3, #128	; 0x80
 8005bca:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8005bce:	e13c      	b.n	8005e4a <UART_SetConfig+0x7aa>
 8005bd0:	687b      	ldr	r3, [r7, #4]
 8005bd2:	681b      	ldr	r3, [r3, #0]
 8005bd4:	4a41      	ldr	r2, [pc, #260]	; (8005cdc <UART_SetConfig+0x63c>)
 8005bd6:	4293      	cmp	r3, r2
 8005bd8:	f040 8082 	bne.w	8005ce0 <UART_SetConfig+0x640>
 8005bdc:	4b3c      	ldr	r3, [pc, #240]	; (8005cd0 <UART_SetConfig+0x630>)
 8005bde:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005be0:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8005be4:	2b28      	cmp	r3, #40	; 0x28
 8005be6:	d86d      	bhi.n	8005cc4 <UART_SetConfig+0x624>
 8005be8:	a201      	add	r2, pc, #4	; (adr r2, 8005bf0 <UART_SetConfig+0x550>)
 8005bea:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005bee:	bf00      	nop
 8005bf0:	08005c95 	.word	0x08005c95
 8005bf4:	08005cc5 	.word	0x08005cc5
 8005bf8:	08005cc5 	.word	0x08005cc5
 8005bfc:	08005cc5 	.word	0x08005cc5
 8005c00:	08005cc5 	.word	0x08005cc5
 8005c04:	08005cc5 	.word	0x08005cc5
 8005c08:	08005cc5 	.word	0x08005cc5
 8005c0c:	08005cc5 	.word	0x08005cc5
 8005c10:	08005c9d 	.word	0x08005c9d
 8005c14:	08005cc5 	.word	0x08005cc5
 8005c18:	08005cc5 	.word	0x08005cc5
 8005c1c:	08005cc5 	.word	0x08005cc5
 8005c20:	08005cc5 	.word	0x08005cc5
 8005c24:	08005cc5 	.word	0x08005cc5
 8005c28:	08005cc5 	.word	0x08005cc5
 8005c2c:	08005cc5 	.word	0x08005cc5
 8005c30:	08005ca5 	.word	0x08005ca5
 8005c34:	08005cc5 	.word	0x08005cc5
 8005c38:	08005cc5 	.word	0x08005cc5
 8005c3c:	08005cc5 	.word	0x08005cc5
 8005c40:	08005cc5 	.word	0x08005cc5
 8005c44:	08005cc5 	.word	0x08005cc5
 8005c48:	08005cc5 	.word	0x08005cc5
 8005c4c:	08005cc5 	.word	0x08005cc5
 8005c50:	08005cad 	.word	0x08005cad
 8005c54:	08005cc5 	.word	0x08005cc5
 8005c58:	08005cc5 	.word	0x08005cc5
 8005c5c:	08005cc5 	.word	0x08005cc5
 8005c60:	08005cc5 	.word	0x08005cc5
 8005c64:	08005cc5 	.word	0x08005cc5
 8005c68:	08005cc5 	.word	0x08005cc5
 8005c6c:	08005cc5 	.word	0x08005cc5
 8005c70:	08005cb5 	.word	0x08005cb5
 8005c74:	08005cc5 	.word	0x08005cc5
 8005c78:	08005cc5 	.word	0x08005cc5
 8005c7c:	08005cc5 	.word	0x08005cc5
 8005c80:	08005cc5 	.word	0x08005cc5
 8005c84:	08005cc5 	.word	0x08005cc5
 8005c88:	08005cc5 	.word	0x08005cc5
 8005c8c:	08005cc5 	.word	0x08005cc5
 8005c90:	08005cbd 	.word	0x08005cbd
 8005c94:	2301      	movs	r3, #1
 8005c96:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8005c9a:	e0d6      	b.n	8005e4a <UART_SetConfig+0x7aa>
 8005c9c:	2304      	movs	r3, #4
 8005c9e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8005ca2:	e0d2      	b.n	8005e4a <UART_SetConfig+0x7aa>
 8005ca4:	2308      	movs	r3, #8
 8005ca6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8005caa:	e0ce      	b.n	8005e4a <UART_SetConfig+0x7aa>
 8005cac:	2310      	movs	r3, #16
 8005cae:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8005cb2:	e0ca      	b.n	8005e4a <UART_SetConfig+0x7aa>
 8005cb4:	2320      	movs	r3, #32
 8005cb6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8005cba:	e0c6      	b.n	8005e4a <UART_SetConfig+0x7aa>
 8005cbc:	2340      	movs	r3, #64	; 0x40
 8005cbe:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8005cc2:	e0c2      	b.n	8005e4a <UART_SetConfig+0x7aa>
 8005cc4:	2380      	movs	r3, #128	; 0x80
 8005cc6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8005cca:	e0be      	b.n	8005e4a <UART_SetConfig+0x7aa>
 8005ccc:	40011400 	.word	0x40011400
 8005cd0:	58024400 	.word	0x58024400
 8005cd4:	40007800 	.word	0x40007800
 8005cd8:	40007c00 	.word	0x40007c00
 8005cdc:	40011800 	.word	0x40011800
 8005ce0:	687b      	ldr	r3, [r7, #4]
 8005ce2:	681b      	ldr	r3, [r3, #0]
 8005ce4:	4aad      	ldr	r2, [pc, #692]	; (8005f9c <UART_SetConfig+0x8fc>)
 8005ce6:	4293      	cmp	r3, r2
 8005ce8:	d176      	bne.n	8005dd8 <UART_SetConfig+0x738>
 8005cea:	4bad      	ldr	r3, [pc, #692]	; (8005fa0 <UART_SetConfig+0x900>)
 8005cec:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005cee:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8005cf2:	2b28      	cmp	r3, #40	; 0x28
 8005cf4:	d86c      	bhi.n	8005dd0 <UART_SetConfig+0x730>
 8005cf6:	a201      	add	r2, pc, #4	; (adr r2, 8005cfc <UART_SetConfig+0x65c>)
 8005cf8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005cfc:	08005da1 	.word	0x08005da1
 8005d00:	08005dd1 	.word	0x08005dd1
 8005d04:	08005dd1 	.word	0x08005dd1
 8005d08:	08005dd1 	.word	0x08005dd1
 8005d0c:	08005dd1 	.word	0x08005dd1
 8005d10:	08005dd1 	.word	0x08005dd1
 8005d14:	08005dd1 	.word	0x08005dd1
 8005d18:	08005dd1 	.word	0x08005dd1
 8005d1c:	08005da9 	.word	0x08005da9
 8005d20:	08005dd1 	.word	0x08005dd1
 8005d24:	08005dd1 	.word	0x08005dd1
 8005d28:	08005dd1 	.word	0x08005dd1
 8005d2c:	08005dd1 	.word	0x08005dd1
 8005d30:	08005dd1 	.word	0x08005dd1
 8005d34:	08005dd1 	.word	0x08005dd1
 8005d38:	08005dd1 	.word	0x08005dd1
 8005d3c:	08005db1 	.word	0x08005db1
 8005d40:	08005dd1 	.word	0x08005dd1
 8005d44:	08005dd1 	.word	0x08005dd1
 8005d48:	08005dd1 	.word	0x08005dd1
 8005d4c:	08005dd1 	.word	0x08005dd1
 8005d50:	08005dd1 	.word	0x08005dd1
 8005d54:	08005dd1 	.word	0x08005dd1
 8005d58:	08005dd1 	.word	0x08005dd1
 8005d5c:	08005db9 	.word	0x08005db9
 8005d60:	08005dd1 	.word	0x08005dd1
 8005d64:	08005dd1 	.word	0x08005dd1
 8005d68:	08005dd1 	.word	0x08005dd1
 8005d6c:	08005dd1 	.word	0x08005dd1
 8005d70:	08005dd1 	.word	0x08005dd1
 8005d74:	08005dd1 	.word	0x08005dd1
 8005d78:	08005dd1 	.word	0x08005dd1
 8005d7c:	08005dc1 	.word	0x08005dc1
 8005d80:	08005dd1 	.word	0x08005dd1
 8005d84:	08005dd1 	.word	0x08005dd1
 8005d88:	08005dd1 	.word	0x08005dd1
 8005d8c:	08005dd1 	.word	0x08005dd1
 8005d90:	08005dd1 	.word	0x08005dd1
 8005d94:	08005dd1 	.word	0x08005dd1
 8005d98:	08005dd1 	.word	0x08005dd1
 8005d9c:	08005dc9 	.word	0x08005dc9
 8005da0:	2301      	movs	r3, #1
 8005da2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8005da6:	e050      	b.n	8005e4a <UART_SetConfig+0x7aa>
 8005da8:	2304      	movs	r3, #4
 8005daa:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8005dae:	e04c      	b.n	8005e4a <UART_SetConfig+0x7aa>
 8005db0:	2308      	movs	r3, #8
 8005db2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8005db6:	e048      	b.n	8005e4a <UART_SetConfig+0x7aa>
 8005db8:	2310      	movs	r3, #16
 8005dba:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8005dbe:	e044      	b.n	8005e4a <UART_SetConfig+0x7aa>
 8005dc0:	2320      	movs	r3, #32
 8005dc2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8005dc6:	e040      	b.n	8005e4a <UART_SetConfig+0x7aa>
 8005dc8:	2340      	movs	r3, #64	; 0x40
 8005dca:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8005dce:	e03c      	b.n	8005e4a <UART_SetConfig+0x7aa>
 8005dd0:	2380      	movs	r3, #128	; 0x80
 8005dd2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8005dd6:	e038      	b.n	8005e4a <UART_SetConfig+0x7aa>
 8005dd8:	687b      	ldr	r3, [r7, #4]
 8005dda:	681b      	ldr	r3, [r3, #0]
 8005ddc:	4a71      	ldr	r2, [pc, #452]	; (8005fa4 <UART_SetConfig+0x904>)
 8005dde:	4293      	cmp	r3, r2
 8005de0:	d130      	bne.n	8005e44 <UART_SetConfig+0x7a4>
 8005de2:	4b6f      	ldr	r3, [pc, #444]	; (8005fa0 <UART_SetConfig+0x900>)
 8005de4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005de6:	f003 0307 	and.w	r3, r3, #7
 8005dea:	2b05      	cmp	r3, #5
 8005dec:	d826      	bhi.n	8005e3c <UART_SetConfig+0x79c>
 8005dee:	a201      	add	r2, pc, #4	; (adr r2, 8005df4 <UART_SetConfig+0x754>)
 8005df0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005df4:	08005e0d 	.word	0x08005e0d
 8005df8:	08005e15 	.word	0x08005e15
 8005dfc:	08005e1d 	.word	0x08005e1d
 8005e00:	08005e25 	.word	0x08005e25
 8005e04:	08005e2d 	.word	0x08005e2d
 8005e08:	08005e35 	.word	0x08005e35
 8005e0c:	2302      	movs	r3, #2
 8005e0e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8005e12:	e01a      	b.n	8005e4a <UART_SetConfig+0x7aa>
 8005e14:	2304      	movs	r3, #4
 8005e16:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8005e1a:	e016      	b.n	8005e4a <UART_SetConfig+0x7aa>
 8005e1c:	2308      	movs	r3, #8
 8005e1e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8005e22:	e012      	b.n	8005e4a <UART_SetConfig+0x7aa>
 8005e24:	2310      	movs	r3, #16
 8005e26:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8005e2a:	e00e      	b.n	8005e4a <UART_SetConfig+0x7aa>
 8005e2c:	2320      	movs	r3, #32
 8005e2e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8005e32:	e00a      	b.n	8005e4a <UART_SetConfig+0x7aa>
 8005e34:	2340      	movs	r3, #64	; 0x40
 8005e36:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8005e3a:	e006      	b.n	8005e4a <UART_SetConfig+0x7aa>
 8005e3c:	2380      	movs	r3, #128	; 0x80
 8005e3e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8005e42:	e002      	b.n	8005e4a <UART_SetConfig+0x7aa>
 8005e44:	2380      	movs	r3, #128	; 0x80
 8005e46:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8005e4a:	687b      	ldr	r3, [r7, #4]
 8005e4c:	681b      	ldr	r3, [r3, #0]
 8005e4e:	4a55      	ldr	r2, [pc, #340]	; (8005fa4 <UART_SetConfig+0x904>)
 8005e50:	4293      	cmp	r3, r2
 8005e52:	f040 80f0 	bne.w	8006036 <UART_SetConfig+0x996>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8005e56:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8005e5a:	2b20      	cmp	r3, #32
 8005e5c:	dc46      	bgt.n	8005eec <UART_SetConfig+0x84c>
 8005e5e:	2b02      	cmp	r3, #2
 8005e60:	db75      	blt.n	8005f4e <UART_SetConfig+0x8ae>
 8005e62:	3b02      	subs	r3, #2
 8005e64:	2b1e      	cmp	r3, #30
 8005e66:	d872      	bhi.n	8005f4e <UART_SetConfig+0x8ae>
 8005e68:	a201      	add	r2, pc, #4	; (adr r2, 8005e70 <UART_SetConfig+0x7d0>)
 8005e6a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005e6e:	bf00      	nop
 8005e70:	08005ef3 	.word	0x08005ef3
 8005e74:	08005f4f 	.word	0x08005f4f
 8005e78:	08005efb 	.word	0x08005efb
 8005e7c:	08005f4f 	.word	0x08005f4f
 8005e80:	08005f4f 	.word	0x08005f4f
 8005e84:	08005f4f 	.word	0x08005f4f
 8005e88:	08005f0b 	.word	0x08005f0b
 8005e8c:	08005f4f 	.word	0x08005f4f
 8005e90:	08005f4f 	.word	0x08005f4f
 8005e94:	08005f4f 	.word	0x08005f4f
 8005e98:	08005f4f 	.word	0x08005f4f
 8005e9c:	08005f4f 	.word	0x08005f4f
 8005ea0:	08005f4f 	.word	0x08005f4f
 8005ea4:	08005f4f 	.word	0x08005f4f
 8005ea8:	08005f1b 	.word	0x08005f1b
 8005eac:	08005f4f 	.word	0x08005f4f
 8005eb0:	08005f4f 	.word	0x08005f4f
 8005eb4:	08005f4f 	.word	0x08005f4f
 8005eb8:	08005f4f 	.word	0x08005f4f
 8005ebc:	08005f4f 	.word	0x08005f4f
 8005ec0:	08005f4f 	.word	0x08005f4f
 8005ec4:	08005f4f 	.word	0x08005f4f
 8005ec8:	08005f4f 	.word	0x08005f4f
 8005ecc:	08005f4f 	.word	0x08005f4f
 8005ed0:	08005f4f 	.word	0x08005f4f
 8005ed4:	08005f4f 	.word	0x08005f4f
 8005ed8:	08005f4f 	.word	0x08005f4f
 8005edc:	08005f4f 	.word	0x08005f4f
 8005ee0:	08005f4f 	.word	0x08005f4f
 8005ee4:	08005f4f 	.word	0x08005f4f
 8005ee8:	08005f41 	.word	0x08005f41
 8005eec:	2b40      	cmp	r3, #64	; 0x40
 8005eee:	d02a      	beq.n	8005f46 <UART_SetConfig+0x8a6>
 8005ef0:	e02d      	b.n	8005f4e <UART_SetConfig+0x8ae>
    {
      case UART_CLOCKSOURCE_D3PCLK1:
        pclk = HAL_RCCEx_GetD3PCLK1Freq();
 8005ef2:	f7fe fc39 	bl	8004768 <HAL_RCCEx_GetD3PCLK1Freq>
 8005ef6:	62f8      	str	r0, [r7, #44]	; 0x2c
        break;
 8005ef8:	e02f      	b.n	8005f5a <UART_SetConfig+0x8ba>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8005efa:	f107 0314 	add.w	r3, r7, #20
 8005efe:	4618      	mov	r0, r3
 8005f00:	f7fe fc48 	bl	8004794 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 8005f04:	69bb      	ldr	r3, [r7, #24]
 8005f06:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8005f08:	e027      	b.n	8005f5a <UART_SetConfig+0x8ba>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8005f0a:	f107 0308 	add.w	r3, r7, #8
 8005f0e:	4618      	mov	r0, r3
 8005f10:	f7fe fd94 	bl	8004a3c <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 8005f14:	68fb      	ldr	r3, [r7, #12]
 8005f16:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8005f18:	e01f      	b.n	8005f5a <UART_SetConfig+0x8ba>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8005f1a:	4b21      	ldr	r3, [pc, #132]	; (8005fa0 <UART_SetConfig+0x900>)
 8005f1c:	681b      	ldr	r3, [r3, #0]
 8005f1e:	f003 0320 	and.w	r3, r3, #32
 8005f22:	2b00      	cmp	r3, #0
 8005f24:	d009      	beq.n	8005f3a <UART_SetConfig+0x89a>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 8005f26:	4b1e      	ldr	r3, [pc, #120]	; (8005fa0 <UART_SetConfig+0x900>)
 8005f28:	681b      	ldr	r3, [r3, #0]
 8005f2a:	08db      	lsrs	r3, r3, #3
 8005f2c:	f003 0303 	and.w	r3, r3, #3
 8005f30:	4a1d      	ldr	r2, [pc, #116]	; (8005fa8 <UART_SetConfig+0x908>)
 8005f32:	fa22 f303 	lsr.w	r3, r2, r3
 8005f36:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8005f38:	e00f      	b.n	8005f5a <UART_SetConfig+0x8ba>
          pclk = (uint32_t) HSI_VALUE;
 8005f3a:	4b1b      	ldr	r3, [pc, #108]	; (8005fa8 <UART_SetConfig+0x908>)
 8005f3c:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8005f3e:	e00c      	b.n	8005f5a <UART_SetConfig+0x8ba>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 8005f40:	4b1a      	ldr	r3, [pc, #104]	; (8005fac <UART_SetConfig+0x90c>)
 8005f42:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8005f44:	e009      	b.n	8005f5a <UART_SetConfig+0x8ba>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8005f46:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8005f4a:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8005f4c:	e005      	b.n	8005f5a <UART_SetConfig+0x8ba>
      default:
        pclk = 0U;
 8005f4e:	2300      	movs	r3, #0
 8005f50:	62fb      	str	r3, [r7, #44]	; 0x2c
        ret = HAL_ERROR;
 8005f52:	2301      	movs	r3, #1
 8005f54:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
        break;
 8005f58:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8005f5a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005f5c:	2b00      	cmp	r3, #0
 8005f5e:	f000 81e6 	beq.w	800632e <UART_SetConfig+0xc8e>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 8005f62:	687b      	ldr	r3, [r7, #4]
 8005f64:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005f66:	4a12      	ldr	r2, [pc, #72]	; (8005fb0 <UART_SetConfig+0x910>)
 8005f68:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8005f6c:	461a      	mov	r2, r3
 8005f6e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005f70:	fbb3 f3f2 	udiv	r3, r3, r2
 8005f74:	623b      	str	r3, [r7, #32]

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8005f76:	687b      	ldr	r3, [r7, #4]
 8005f78:	685a      	ldr	r2, [r3, #4]
 8005f7a:	4613      	mov	r3, r2
 8005f7c:	005b      	lsls	r3, r3, #1
 8005f7e:	4413      	add	r3, r2
 8005f80:	6a3a      	ldr	r2, [r7, #32]
 8005f82:	429a      	cmp	r2, r3
 8005f84:	d305      	bcc.n	8005f92 <UART_SetConfig+0x8f2>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 8005f86:	687b      	ldr	r3, [r7, #4]
 8005f88:	685b      	ldr	r3, [r3, #4]
 8005f8a:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8005f8c:	6a3a      	ldr	r2, [r7, #32]
 8005f8e:	429a      	cmp	r2, r3
 8005f90:	d910      	bls.n	8005fb4 <UART_SetConfig+0x914>
      {
        ret = HAL_ERROR;
 8005f92:	2301      	movs	r3, #1
 8005f94:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
 8005f98:	e1c9      	b.n	800632e <UART_SetConfig+0xc8e>
 8005f9a:	bf00      	nop
 8005f9c:	40011c00 	.word	0x40011c00
 8005fa0:	58024400 	.word	0x58024400
 8005fa4:	58000c00 	.word	0x58000c00
 8005fa8:	03d09000 	.word	0x03d09000
 8005fac:	003d0900 	.word	0x003d0900
 8005fb0:	08006bf0 	.word	0x08006bf0
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8005fb4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005fb6:	4618      	mov	r0, r3
 8005fb8:	f04f 0100 	mov.w	r1, #0
 8005fbc:	687b      	ldr	r3, [r7, #4]
 8005fbe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005fc0:	4ac1      	ldr	r2, [pc, #772]	; (80062c8 <UART_SetConfig+0xc28>)
 8005fc2:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8005fc6:	b29a      	uxth	r2, r3
 8005fc8:	f04f 0300 	mov.w	r3, #0
 8005fcc:	f7fa f99e 	bl	800030c <__aeabi_uldivmod>
 8005fd0:	4602      	mov	r2, r0
 8005fd2:	460b      	mov	r3, r1
 8005fd4:	4610      	mov	r0, r2
 8005fd6:	4619      	mov	r1, r3
 8005fd8:	f04f 0200 	mov.w	r2, #0
 8005fdc:	f04f 0300 	mov.w	r3, #0
 8005fe0:	020b      	lsls	r3, r1, #8
 8005fe2:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 8005fe6:	0202      	lsls	r2, r0, #8
 8005fe8:	6879      	ldr	r1, [r7, #4]
 8005fea:	6849      	ldr	r1, [r1, #4]
 8005fec:	0849      	lsrs	r1, r1, #1
 8005fee:	4608      	mov	r0, r1
 8005ff0:	f04f 0100 	mov.w	r1, #0
 8005ff4:	1814      	adds	r4, r2, r0
 8005ff6:	eb43 0501 	adc.w	r5, r3, r1
 8005ffa:	687b      	ldr	r3, [r7, #4]
 8005ffc:	685b      	ldr	r3, [r3, #4]
 8005ffe:	461a      	mov	r2, r3
 8006000:	f04f 0300 	mov.w	r3, #0
 8006004:	4620      	mov	r0, r4
 8006006:	4629      	mov	r1, r5
 8006008:	f7fa f980 	bl	800030c <__aeabi_uldivmod>
 800600c:	4602      	mov	r2, r0
 800600e:	460b      	mov	r3, r1
 8006010:	4613      	mov	r3, r2
 8006012:	62bb      	str	r3, [r7, #40]	; 0x28
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8006014:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006016:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800601a:	d308      	bcc.n	800602e <UART_SetConfig+0x98e>
 800601c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800601e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8006022:	d204      	bcs.n	800602e <UART_SetConfig+0x98e>
        {
          huart->Instance->BRR = usartdiv;
 8006024:	687b      	ldr	r3, [r7, #4]
 8006026:	681b      	ldr	r3, [r3, #0]
 8006028:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800602a:	60da      	str	r2, [r3, #12]
 800602c:	e17f      	b.n	800632e <UART_SetConfig+0xc8e>
        }
        else
        {
          ret = HAL_ERROR;
 800602e:	2301      	movs	r3, #1
 8006030:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
 8006034:	e17b      	b.n	800632e <UART_SetConfig+0xc8e>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8006036:	687b      	ldr	r3, [r7, #4]
 8006038:	69db      	ldr	r3, [r3, #28]
 800603a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800603e:	f040 80be 	bne.w	80061be <UART_SetConfig+0xb1e>
  {
    switch (clocksource)
 8006042:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8006046:	2b20      	cmp	r3, #32
 8006048:	dc48      	bgt.n	80060dc <UART_SetConfig+0xa3c>
 800604a:	2b00      	cmp	r3, #0
 800604c:	db7b      	blt.n	8006146 <UART_SetConfig+0xaa6>
 800604e:	2b20      	cmp	r3, #32
 8006050:	d879      	bhi.n	8006146 <UART_SetConfig+0xaa6>
 8006052:	a201      	add	r2, pc, #4	; (adr r2, 8006058 <UART_SetConfig+0x9b8>)
 8006054:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006058:	080060e3 	.word	0x080060e3
 800605c:	080060eb 	.word	0x080060eb
 8006060:	08006147 	.word	0x08006147
 8006064:	08006147 	.word	0x08006147
 8006068:	080060f3 	.word	0x080060f3
 800606c:	08006147 	.word	0x08006147
 8006070:	08006147 	.word	0x08006147
 8006074:	08006147 	.word	0x08006147
 8006078:	08006103 	.word	0x08006103
 800607c:	08006147 	.word	0x08006147
 8006080:	08006147 	.word	0x08006147
 8006084:	08006147 	.word	0x08006147
 8006088:	08006147 	.word	0x08006147
 800608c:	08006147 	.word	0x08006147
 8006090:	08006147 	.word	0x08006147
 8006094:	08006147 	.word	0x08006147
 8006098:	08006113 	.word	0x08006113
 800609c:	08006147 	.word	0x08006147
 80060a0:	08006147 	.word	0x08006147
 80060a4:	08006147 	.word	0x08006147
 80060a8:	08006147 	.word	0x08006147
 80060ac:	08006147 	.word	0x08006147
 80060b0:	08006147 	.word	0x08006147
 80060b4:	08006147 	.word	0x08006147
 80060b8:	08006147 	.word	0x08006147
 80060bc:	08006147 	.word	0x08006147
 80060c0:	08006147 	.word	0x08006147
 80060c4:	08006147 	.word	0x08006147
 80060c8:	08006147 	.word	0x08006147
 80060cc:	08006147 	.word	0x08006147
 80060d0:	08006147 	.word	0x08006147
 80060d4:	08006147 	.word	0x08006147
 80060d8:	08006139 	.word	0x08006139
 80060dc:	2b40      	cmp	r3, #64	; 0x40
 80060de:	d02e      	beq.n	800613e <UART_SetConfig+0xa9e>
 80060e0:	e031      	b.n	8006146 <UART_SetConfig+0xaa6>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80060e2:	f7fd fc1b 	bl	800391c <HAL_RCC_GetPCLK1Freq>
 80060e6:	62f8      	str	r0, [r7, #44]	; 0x2c
        break;
 80060e8:	e033      	b.n	8006152 <UART_SetConfig+0xab2>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80060ea:	f7fd fc2d 	bl	8003948 <HAL_RCC_GetPCLK2Freq>
 80060ee:	62f8      	str	r0, [r7, #44]	; 0x2c
        break;
 80060f0:	e02f      	b.n	8006152 <UART_SetConfig+0xab2>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80060f2:	f107 0314 	add.w	r3, r7, #20
 80060f6:	4618      	mov	r0, r3
 80060f8:	f7fe fb4c 	bl	8004794 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 80060fc:	69bb      	ldr	r3, [r7, #24]
 80060fe:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8006100:	e027      	b.n	8006152 <UART_SetConfig+0xab2>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8006102:	f107 0308 	add.w	r3, r7, #8
 8006106:	4618      	mov	r0, r3
 8006108:	f7fe fc98 	bl	8004a3c <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 800610c:	68fb      	ldr	r3, [r7, #12]
 800610e:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8006110:	e01f      	b.n	8006152 <UART_SetConfig+0xab2>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8006112:	4b6e      	ldr	r3, [pc, #440]	; (80062cc <UART_SetConfig+0xc2c>)
 8006114:	681b      	ldr	r3, [r3, #0]
 8006116:	f003 0320 	and.w	r3, r3, #32
 800611a:	2b00      	cmp	r3, #0
 800611c:	d009      	beq.n	8006132 <UART_SetConfig+0xa92>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 800611e:	4b6b      	ldr	r3, [pc, #428]	; (80062cc <UART_SetConfig+0xc2c>)
 8006120:	681b      	ldr	r3, [r3, #0]
 8006122:	08db      	lsrs	r3, r3, #3
 8006124:	f003 0303 	and.w	r3, r3, #3
 8006128:	4a69      	ldr	r2, [pc, #420]	; (80062d0 <UART_SetConfig+0xc30>)
 800612a:	fa22 f303 	lsr.w	r3, r2, r3
 800612e:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8006130:	e00f      	b.n	8006152 <UART_SetConfig+0xab2>
          pclk = (uint32_t) HSI_VALUE;
 8006132:	4b67      	ldr	r3, [pc, #412]	; (80062d0 <UART_SetConfig+0xc30>)
 8006134:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8006136:	e00c      	b.n	8006152 <UART_SetConfig+0xab2>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 8006138:	4b66      	ldr	r3, [pc, #408]	; (80062d4 <UART_SetConfig+0xc34>)
 800613a:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800613c:	e009      	b.n	8006152 <UART_SetConfig+0xab2>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800613e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8006142:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8006144:	e005      	b.n	8006152 <UART_SetConfig+0xab2>
      default:
        pclk = 0U;
 8006146:	2300      	movs	r3, #0
 8006148:	62fb      	str	r3, [r7, #44]	; 0x2c
        ret = HAL_ERROR;
 800614a:	2301      	movs	r3, #1
 800614c:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
        break;
 8006150:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8006152:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006154:	2b00      	cmp	r3, #0
 8006156:	f000 80ea 	beq.w	800632e <UART_SetConfig+0xc8e>
    {
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800615a:	687b      	ldr	r3, [r7, #4]
 800615c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800615e:	4a5a      	ldr	r2, [pc, #360]	; (80062c8 <UART_SetConfig+0xc28>)
 8006160:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8006164:	461a      	mov	r2, r3
 8006166:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006168:	fbb3 f3f2 	udiv	r3, r3, r2
 800616c:	005a      	lsls	r2, r3, #1
 800616e:	687b      	ldr	r3, [r7, #4]
 8006170:	685b      	ldr	r3, [r3, #4]
 8006172:	085b      	lsrs	r3, r3, #1
 8006174:	441a      	add	r2, r3
 8006176:	687b      	ldr	r3, [r7, #4]
 8006178:	685b      	ldr	r3, [r3, #4]
 800617a:	fbb2 f3f3 	udiv	r3, r2, r3
 800617e:	b29b      	uxth	r3, r3
 8006180:	62bb      	str	r3, [r7, #40]	; 0x28
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8006182:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006184:	2b0f      	cmp	r3, #15
 8006186:	d916      	bls.n	80061b6 <UART_SetConfig+0xb16>
 8006188:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800618a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800618e:	d212      	bcs.n	80061b6 <UART_SetConfig+0xb16>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8006190:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006192:	b29b      	uxth	r3, r3
 8006194:	f023 030f 	bic.w	r3, r3, #15
 8006198:	84fb      	strh	r3, [r7, #38]	; 0x26
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800619a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800619c:	085b      	lsrs	r3, r3, #1
 800619e:	b29b      	uxth	r3, r3
 80061a0:	f003 0307 	and.w	r3, r3, #7
 80061a4:	b29a      	uxth	r2, r3
 80061a6:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 80061a8:	4313      	orrs	r3, r2
 80061aa:	84fb      	strh	r3, [r7, #38]	; 0x26
        huart->Instance->BRR = brrtemp;
 80061ac:	687b      	ldr	r3, [r7, #4]
 80061ae:	681b      	ldr	r3, [r3, #0]
 80061b0:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 80061b2:	60da      	str	r2, [r3, #12]
 80061b4:	e0bb      	b.n	800632e <UART_SetConfig+0xc8e>
      }
      else
      {
        ret = HAL_ERROR;
 80061b6:	2301      	movs	r3, #1
 80061b8:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
 80061bc:	e0b7      	b.n	800632e <UART_SetConfig+0xc8e>
      }
    }
  }
  else
  {
    switch (clocksource)
 80061be:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 80061c2:	2b20      	cmp	r3, #32
 80061c4:	dc4a      	bgt.n	800625c <UART_SetConfig+0xbbc>
 80061c6:	2b00      	cmp	r3, #0
 80061c8:	f2c0 8086 	blt.w	80062d8 <UART_SetConfig+0xc38>
 80061cc:	2b20      	cmp	r3, #32
 80061ce:	f200 8083 	bhi.w	80062d8 <UART_SetConfig+0xc38>
 80061d2:	a201      	add	r2, pc, #4	; (adr r2, 80061d8 <UART_SetConfig+0xb38>)
 80061d4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80061d8:	08006263 	.word	0x08006263
 80061dc:	0800626b 	.word	0x0800626b
 80061e0:	080062d9 	.word	0x080062d9
 80061e4:	080062d9 	.word	0x080062d9
 80061e8:	08006273 	.word	0x08006273
 80061ec:	080062d9 	.word	0x080062d9
 80061f0:	080062d9 	.word	0x080062d9
 80061f4:	080062d9 	.word	0x080062d9
 80061f8:	08006283 	.word	0x08006283
 80061fc:	080062d9 	.word	0x080062d9
 8006200:	080062d9 	.word	0x080062d9
 8006204:	080062d9 	.word	0x080062d9
 8006208:	080062d9 	.word	0x080062d9
 800620c:	080062d9 	.word	0x080062d9
 8006210:	080062d9 	.word	0x080062d9
 8006214:	080062d9 	.word	0x080062d9
 8006218:	08006293 	.word	0x08006293
 800621c:	080062d9 	.word	0x080062d9
 8006220:	080062d9 	.word	0x080062d9
 8006224:	080062d9 	.word	0x080062d9
 8006228:	080062d9 	.word	0x080062d9
 800622c:	080062d9 	.word	0x080062d9
 8006230:	080062d9 	.word	0x080062d9
 8006234:	080062d9 	.word	0x080062d9
 8006238:	080062d9 	.word	0x080062d9
 800623c:	080062d9 	.word	0x080062d9
 8006240:	080062d9 	.word	0x080062d9
 8006244:	080062d9 	.word	0x080062d9
 8006248:	080062d9 	.word	0x080062d9
 800624c:	080062d9 	.word	0x080062d9
 8006250:	080062d9 	.word	0x080062d9
 8006254:	080062d9 	.word	0x080062d9
 8006258:	080062b9 	.word	0x080062b9
 800625c:	2b40      	cmp	r3, #64	; 0x40
 800625e:	d02e      	beq.n	80062be <UART_SetConfig+0xc1e>
 8006260:	e03a      	b.n	80062d8 <UART_SetConfig+0xc38>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8006262:	f7fd fb5b 	bl	800391c <HAL_RCC_GetPCLK1Freq>
 8006266:	62f8      	str	r0, [r7, #44]	; 0x2c
        break;
 8006268:	e03c      	b.n	80062e4 <UART_SetConfig+0xc44>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800626a:	f7fd fb6d 	bl	8003948 <HAL_RCC_GetPCLK2Freq>
 800626e:	62f8      	str	r0, [r7, #44]	; 0x2c
        break;
 8006270:	e038      	b.n	80062e4 <UART_SetConfig+0xc44>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8006272:	f107 0314 	add.w	r3, r7, #20
 8006276:	4618      	mov	r0, r3
 8006278:	f7fe fa8c 	bl	8004794 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 800627c:	69bb      	ldr	r3, [r7, #24]
 800627e:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8006280:	e030      	b.n	80062e4 <UART_SetConfig+0xc44>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8006282:	f107 0308 	add.w	r3, r7, #8
 8006286:	4618      	mov	r0, r3
 8006288:	f7fe fbd8 	bl	8004a3c <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 800628c:	68fb      	ldr	r3, [r7, #12]
 800628e:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8006290:	e028      	b.n	80062e4 <UART_SetConfig+0xc44>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8006292:	4b0e      	ldr	r3, [pc, #56]	; (80062cc <UART_SetConfig+0xc2c>)
 8006294:	681b      	ldr	r3, [r3, #0]
 8006296:	f003 0320 	and.w	r3, r3, #32
 800629a:	2b00      	cmp	r3, #0
 800629c:	d009      	beq.n	80062b2 <UART_SetConfig+0xc12>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 800629e:	4b0b      	ldr	r3, [pc, #44]	; (80062cc <UART_SetConfig+0xc2c>)
 80062a0:	681b      	ldr	r3, [r3, #0]
 80062a2:	08db      	lsrs	r3, r3, #3
 80062a4:	f003 0303 	and.w	r3, r3, #3
 80062a8:	4a09      	ldr	r2, [pc, #36]	; (80062d0 <UART_SetConfig+0xc30>)
 80062aa:	fa22 f303 	lsr.w	r3, r2, r3
 80062ae:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 80062b0:	e018      	b.n	80062e4 <UART_SetConfig+0xc44>
          pclk = (uint32_t) HSI_VALUE;
 80062b2:	4b07      	ldr	r3, [pc, #28]	; (80062d0 <UART_SetConfig+0xc30>)
 80062b4:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 80062b6:	e015      	b.n	80062e4 <UART_SetConfig+0xc44>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 80062b8:	4b06      	ldr	r3, [pc, #24]	; (80062d4 <UART_SetConfig+0xc34>)
 80062ba:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 80062bc:	e012      	b.n	80062e4 <UART_SetConfig+0xc44>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80062be:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80062c2:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 80062c4:	e00e      	b.n	80062e4 <UART_SetConfig+0xc44>
 80062c6:	bf00      	nop
 80062c8:	08006bf0 	.word	0x08006bf0
 80062cc:	58024400 	.word	0x58024400
 80062d0:	03d09000 	.word	0x03d09000
 80062d4:	003d0900 	.word	0x003d0900
      default:
        pclk = 0U;
 80062d8:	2300      	movs	r3, #0
 80062da:	62fb      	str	r3, [r7, #44]	; 0x2c
        ret = HAL_ERROR;
 80062dc:	2301      	movs	r3, #1
 80062de:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
        break;
 80062e2:	bf00      	nop
    }

    if (pclk != 0U)
 80062e4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80062e6:	2b00      	cmp	r3, #0
 80062e8:	d021      	beq.n	800632e <UART_SetConfig+0xc8e>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80062ea:	687b      	ldr	r3, [r7, #4]
 80062ec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80062ee:	4a1a      	ldr	r2, [pc, #104]	; (8006358 <UART_SetConfig+0xcb8>)
 80062f0:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80062f4:	461a      	mov	r2, r3
 80062f6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80062f8:	fbb3 f2f2 	udiv	r2, r3, r2
 80062fc:	687b      	ldr	r3, [r7, #4]
 80062fe:	685b      	ldr	r3, [r3, #4]
 8006300:	085b      	lsrs	r3, r3, #1
 8006302:	441a      	add	r2, r3
 8006304:	687b      	ldr	r3, [r7, #4]
 8006306:	685b      	ldr	r3, [r3, #4]
 8006308:	fbb2 f3f3 	udiv	r3, r2, r3
 800630c:	b29b      	uxth	r3, r3
 800630e:	62bb      	str	r3, [r7, #40]	; 0x28
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8006310:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006312:	2b0f      	cmp	r3, #15
 8006314:	d908      	bls.n	8006328 <UART_SetConfig+0xc88>
 8006316:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006318:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800631c:	d204      	bcs.n	8006328 <UART_SetConfig+0xc88>
      {
        huart->Instance->BRR = usartdiv;
 800631e:	687b      	ldr	r3, [r7, #4]
 8006320:	681b      	ldr	r3, [r3, #0]
 8006322:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8006324:	60da      	str	r2, [r3, #12]
 8006326:	e002      	b.n	800632e <UART_SetConfig+0xc8e>
      }
      else
      {
        ret = HAL_ERROR;
 8006328:	2301      	movs	r3, #1
 800632a:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 800632e:	687b      	ldr	r3, [r7, #4]
 8006330:	2201      	movs	r2, #1
 8006332:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 8006336:	687b      	ldr	r3, [r7, #4]
 8006338:	2201      	movs	r2, #1
 800633a:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800633e:	687b      	ldr	r3, [r7, #4]
 8006340:	2200      	movs	r2, #0
 8006342:	671a      	str	r2, [r3, #112]	; 0x70
  huart->TxISR = NULL;
 8006344:	687b      	ldr	r3, [r7, #4]
 8006346:	2200      	movs	r2, #0
 8006348:	675a      	str	r2, [r3, #116]	; 0x74

  return ret;
 800634a:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
}
 800634e:	4618      	mov	r0, r3
 8006350:	3738      	adds	r7, #56	; 0x38
 8006352:	46bd      	mov	sp, r7
 8006354:	bdb0      	pop	{r4, r5, r7, pc}
 8006356:	bf00      	nop
 8006358:	08006bf0 	.word	0x08006bf0

0800635c <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 800635c:	b480      	push	{r7}
 800635e:	b083      	sub	sp, #12
 8006360:	af00      	add	r7, sp, #0
 8006362:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8006364:	687b      	ldr	r3, [r7, #4]
 8006366:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006368:	f003 0301 	and.w	r3, r3, #1
 800636c:	2b00      	cmp	r3, #0
 800636e:	d00a      	beq.n	8006386 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8006370:	687b      	ldr	r3, [r7, #4]
 8006372:	681b      	ldr	r3, [r3, #0]
 8006374:	685b      	ldr	r3, [r3, #4]
 8006376:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 800637a:	687b      	ldr	r3, [r7, #4]
 800637c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800637e:	687b      	ldr	r3, [r7, #4]
 8006380:	681b      	ldr	r3, [r3, #0]
 8006382:	430a      	orrs	r2, r1
 8006384:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8006386:	687b      	ldr	r3, [r7, #4]
 8006388:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800638a:	f003 0302 	and.w	r3, r3, #2
 800638e:	2b00      	cmp	r3, #0
 8006390:	d00a      	beq.n	80063a8 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8006392:	687b      	ldr	r3, [r7, #4]
 8006394:	681b      	ldr	r3, [r3, #0]
 8006396:	685b      	ldr	r3, [r3, #4]
 8006398:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 800639c:	687b      	ldr	r3, [r7, #4]
 800639e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80063a0:	687b      	ldr	r3, [r7, #4]
 80063a2:	681b      	ldr	r3, [r3, #0]
 80063a4:	430a      	orrs	r2, r1
 80063a6:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 80063a8:	687b      	ldr	r3, [r7, #4]
 80063aa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80063ac:	f003 0304 	and.w	r3, r3, #4
 80063b0:	2b00      	cmp	r3, #0
 80063b2:	d00a      	beq.n	80063ca <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 80063b4:	687b      	ldr	r3, [r7, #4]
 80063b6:	681b      	ldr	r3, [r3, #0]
 80063b8:	685b      	ldr	r3, [r3, #4]
 80063ba:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 80063be:	687b      	ldr	r3, [r7, #4]
 80063c0:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80063c2:	687b      	ldr	r3, [r7, #4]
 80063c4:	681b      	ldr	r3, [r3, #0]
 80063c6:	430a      	orrs	r2, r1
 80063c8:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 80063ca:	687b      	ldr	r3, [r7, #4]
 80063cc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80063ce:	f003 0308 	and.w	r3, r3, #8
 80063d2:	2b00      	cmp	r3, #0
 80063d4:	d00a      	beq.n	80063ec <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 80063d6:	687b      	ldr	r3, [r7, #4]
 80063d8:	681b      	ldr	r3, [r3, #0]
 80063da:	685b      	ldr	r3, [r3, #4]
 80063dc:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 80063e0:	687b      	ldr	r3, [r7, #4]
 80063e2:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80063e4:	687b      	ldr	r3, [r7, #4]
 80063e6:	681b      	ldr	r3, [r3, #0]
 80063e8:	430a      	orrs	r2, r1
 80063ea:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 80063ec:	687b      	ldr	r3, [r7, #4]
 80063ee:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80063f0:	f003 0310 	and.w	r3, r3, #16
 80063f4:	2b00      	cmp	r3, #0
 80063f6:	d00a      	beq.n	800640e <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 80063f8:	687b      	ldr	r3, [r7, #4]
 80063fa:	681b      	ldr	r3, [r3, #0]
 80063fc:	689b      	ldr	r3, [r3, #8]
 80063fe:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8006402:	687b      	ldr	r3, [r7, #4]
 8006404:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8006406:	687b      	ldr	r3, [r7, #4]
 8006408:	681b      	ldr	r3, [r3, #0]
 800640a:	430a      	orrs	r2, r1
 800640c:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800640e:	687b      	ldr	r3, [r7, #4]
 8006410:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006412:	f003 0320 	and.w	r3, r3, #32
 8006416:	2b00      	cmp	r3, #0
 8006418:	d00a      	beq.n	8006430 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800641a:	687b      	ldr	r3, [r7, #4]
 800641c:	681b      	ldr	r3, [r3, #0]
 800641e:	689b      	ldr	r3, [r3, #8]
 8006420:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8006424:	687b      	ldr	r3, [r7, #4]
 8006426:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8006428:	687b      	ldr	r3, [r7, #4]
 800642a:	681b      	ldr	r3, [r3, #0]
 800642c:	430a      	orrs	r2, r1
 800642e:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8006430:	687b      	ldr	r3, [r7, #4]
 8006432:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006434:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006438:	2b00      	cmp	r3, #0
 800643a:	d01a      	beq.n	8006472 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800643c:	687b      	ldr	r3, [r7, #4]
 800643e:	681b      	ldr	r3, [r3, #0]
 8006440:	685b      	ldr	r3, [r3, #4]
 8006442:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8006446:	687b      	ldr	r3, [r7, #4]
 8006448:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800644a:	687b      	ldr	r3, [r7, #4]
 800644c:	681b      	ldr	r3, [r3, #0]
 800644e:	430a      	orrs	r2, r1
 8006450:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8006452:	687b      	ldr	r3, [r7, #4]
 8006454:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006456:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800645a:	d10a      	bne.n	8006472 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800645c:	687b      	ldr	r3, [r7, #4]
 800645e:	681b      	ldr	r3, [r3, #0]
 8006460:	685b      	ldr	r3, [r3, #4]
 8006462:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8006466:	687b      	ldr	r3, [r7, #4]
 8006468:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800646a:	687b      	ldr	r3, [r7, #4]
 800646c:	681b      	ldr	r3, [r3, #0]
 800646e:	430a      	orrs	r2, r1
 8006470:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8006472:	687b      	ldr	r3, [r7, #4]
 8006474:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006476:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800647a:	2b00      	cmp	r3, #0
 800647c:	d00a      	beq.n	8006494 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800647e:	687b      	ldr	r3, [r7, #4]
 8006480:	681b      	ldr	r3, [r3, #0]
 8006482:	685b      	ldr	r3, [r3, #4]
 8006484:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8006488:	687b      	ldr	r3, [r7, #4]
 800648a:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800648c:	687b      	ldr	r3, [r7, #4]
 800648e:	681b      	ldr	r3, [r3, #0]
 8006490:	430a      	orrs	r2, r1
 8006492:	605a      	str	r2, [r3, #4]
  }
}
 8006494:	bf00      	nop
 8006496:	370c      	adds	r7, #12
 8006498:	46bd      	mov	sp, r7
 800649a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800649e:	4770      	bx	lr

080064a0 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 80064a0:	b580      	push	{r7, lr}
 80064a2:	b086      	sub	sp, #24
 80064a4:	af02      	add	r7, sp, #8
 80064a6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80064a8:	687b      	ldr	r3, [r7, #4]
 80064aa:	2200      	movs	r2, #0
 80064ac:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 80064b0:	f7fa fea2 	bl	80011f8 <HAL_GetTick>
 80064b4:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 80064b6:	687b      	ldr	r3, [r7, #4]
 80064b8:	681b      	ldr	r3, [r3, #0]
 80064ba:	681b      	ldr	r3, [r3, #0]
 80064bc:	f003 0308 	and.w	r3, r3, #8
 80064c0:	2b08      	cmp	r3, #8
 80064c2:	d10e      	bne.n	80064e2 <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80064c4:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 80064c8:	9300      	str	r3, [sp, #0]
 80064ca:	68fb      	ldr	r3, [r7, #12]
 80064cc:	2200      	movs	r2, #0
 80064ce:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 80064d2:	6878      	ldr	r0, [r7, #4]
 80064d4:	f000 f82f 	bl	8006536 <UART_WaitOnFlagUntilTimeout>
 80064d8:	4603      	mov	r3, r0
 80064da:	2b00      	cmp	r3, #0
 80064dc:	d001      	beq.n	80064e2 <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 80064de:	2303      	movs	r3, #3
 80064e0:	e025      	b.n	800652e <UART_CheckIdleState+0x8e>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 80064e2:	687b      	ldr	r3, [r7, #4]
 80064e4:	681b      	ldr	r3, [r3, #0]
 80064e6:	681b      	ldr	r3, [r3, #0]
 80064e8:	f003 0304 	and.w	r3, r3, #4
 80064ec:	2b04      	cmp	r3, #4
 80064ee:	d10e      	bne.n	800650e <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80064f0:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 80064f4:	9300      	str	r3, [sp, #0]
 80064f6:	68fb      	ldr	r3, [r7, #12]
 80064f8:	2200      	movs	r2, #0
 80064fa:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 80064fe:	6878      	ldr	r0, [r7, #4]
 8006500:	f000 f819 	bl	8006536 <UART_WaitOnFlagUntilTimeout>
 8006504:	4603      	mov	r3, r0
 8006506:	2b00      	cmp	r3, #0
 8006508:	d001      	beq.n	800650e <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800650a:	2303      	movs	r3, #3
 800650c:	e00f      	b.n	800652e <UART_CheckIdleState+0x8e>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800650e:	687b      	ldr	r3, [r7, #4]
 8006510:	2220      	movs	r2, #32
 8006512:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  huart->RxState = HAL_UART_STATE_READY;
 8006516:	687b      	ldr	r3, [r7, #4]
 8006518:	2220      	movs	r2, #32
 800651a:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800651e:	687b      	ldr	r3, [r7, #4]
 8006520:	2200      	movs	r2, #0
 8006522:	66da      	str	r2, [r3, #108]	; 0x6c

  __HAL_UNLOCK(huart);
 8006524:	687b      	ldr	r3, [r7, #4]
 8006526:	2200      	movs	r2, #0
 8006528:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 800652c:	2300      	movs	r3, #0
}
 800652e:	4618      	mov	r0, r3
 8006530:	3710      	adds	r7, #16
 8006532:	46bd      	mov	sp, r7
 8006534:	bd80      	pop	{r7, pc}

08006536 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8006536:	b580      	push	{r7, lr}
 8006538:	b084      	sub	sp, #16
 800653a:	af00      	add	r7, sp, #0
 800653c:	60f8      	str	r0, [r7, #12]
 800653e:	60b9      	str	r1, [r7, #8]
 8006540:	603b      	str	r3, [r7, #0]
 8006542:	4613      	mov	r3, r2
 8006544:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8006546:	e062      	b.n	800660e <UART_WaitOnFlagUntilTimeout+0xd8>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8006548:	69bb      	ldr	r3, [r7, #24]
 800654a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800654e:	d05e      	beq.n	800660e <UART_WaitOnFlagUntilTimeout+0xd8>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8006550:	f7fa fe52 	bl	80011f8 <HAL_GetTick>
 8006554:	4602      	mov	r2, r0
 8006556:	683b      	ldr	r3, [r7, #0]
 8006558:	1ad3      	subs	r3, r2, r3
 800655a:	69ba      	ldr	r2, [r7, #24]
 800655c:	429a      	cmp	r2, r3
 800655e:	d302      	bcc.n	8006566 <UART_WaitOnFlagUntilTimeout+0x30>
 8006560:	69bb      	ldr	r3, [r7, #24]
 8006562:	2b00      	cmp	r3, #0
 8006564:	d11d      	bne.n	80065a2 <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
 8006566:	68fb      	ldr	r3, [r7, #12]
 8006568:	681b      	ldr	r3, [r3, #0]
 800656a:	681a      	ldr	r2, [r3, #0]
 800656c:	68fb      	ldr	r3, [r7, #12]
 800656e:	681b      	ldr	r3, [r3, #0]
 8006570:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8006574:	601a      	str	r2, [r3, #0]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006576:	68fb      	ldr	r3, [r7, #12]
 8006578:	681b      	ldr	r3, [r3, #0]
 800657a:	689a      	ldr	r2, [r3, #8]
 800657c:	68fb      	ldr	r3, [r7, #12]
 800657e:	681b      	ldr	r3, [r3, #0]
 8006580:	f022 0201 	bic.w	r2, r2, #1
 8006584:	609a      	str	r2, [r3, #8]

        huart->gState = HAL_UART_STATE_READY;
 8006586:	68fb      	ldr	r3, [r7, #12]
 8006588:	2220      	movs	r2, #32
 800658a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
        huart->RxState = HAL_UART_STATE_READY;
 800658e:	68fb      	ldr	r3, [r7, #12]
 8006590:	2220      	movs	r2, #32
 8006592:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

        __HAL_UNLOCK(huart);
 8006596:	68fb      	ldr	r3, [r7, #12]
 8006598:	2200      	movs	r2, #0
 800659a:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

        return HAL_TIMEOUT;
 800659e:	2303      	movs	r3, #3
 80065a0:	e045      	b.n	800662e <UART_WaitOnFlagUntilTimeout+0xf8>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 80065a2:	68fb      	ldr	r3, [r7, #12]
 80065a4:	681b      	ldr	r3, [r3, #0]
 80065a6:	681b      	ldr	r3, [r3, #0]
 80065a8:	f003 0304 	and.w	r3, r3, #4
 80065ac:	2b00      	cmp	r3, #0
 80065ae:	d02e      	beq.n	800660e <UART_WaitOnFlagUntilTimeout+0xd8>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 80065b0:	68fb      	ldr	r3, [r7, #12]
 80065b2:	681b      	ldr	r3, [r3, #0]
 80065b4:	69db      	ldr	r3, [r3, #28]
 80065b6:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80065ba:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80065be:	d126      	bne.n	800660e <UART_WaitOnFlagUntilTimeout+0xd8>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80065c0:	68fb      	ldr	r3, [r7, #12]
 80065c2:	681b      	ldr	r3, [r3, #0]
 80065c4:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80065c8:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
 80065ca:	68fb      	ldr	r3, [r7, #12]
 80065cc:	681b      	ldr	r3, [r3, #0]
 80065ce:	681a      	ldr	r2, [r3, #0]
 80065d0:	68fb      	ldr	r3, [r7, #12]
 80065d2:	681b      	ldr	r3, [r3, #0]
 80065d4:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 80065d8:	601a      	str	r2, [r3, #0]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80065da:	68fb      	ldr	r3, [r7, #12]
 80065dc:	681b      	ldr	r3, [r3, #0]
 80065de:	689a      	ldr	r2, [r3, #8]
 80065e0:	68fb      	ldr	r3, [r7, #12]
 80065e2:	681b      	ldr	r3, [r3, #0]
 80065e4:	f022 0201 	bic.w	r2, r2, #1
 80065e8:	609a      	str	r2, [r3, #8]

          huart->gState = HAL_UART_STATE_READY;
 80065ea:	68fb      	ldr	r3, [r7, #12]
 80065ec:	2220      	movs	r2, #32
 80065ee:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          huart->RxState = HAL_UART_STATE_READY;
 80065f2:	68fb      	ldr	r3, [r7, #12]
 80065f4:	2220      	movs	r2, #32
 80065f6:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 80065fa:	68fb      	ldr	r3, [r7, #12]
 80065fc:	2220      	movs	r2, #32
 80065fe:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8006602:	68fb      	ldr	r3, [r7, #12]
 8006604:	2200      	movs	r2, #0
 8006606:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

          return HAL_TIMEOUT;
 800660a:	2303      	movs	r3, #3
 800660c:	e00f      	b.n	800662e <UART_WaitOnFlagUntilTimeout+0xf8>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800660e:	68fb      	ldr	r3, [r7, #12]
 8006610:	681b      	ldr	r3, [r3, #0]
 8006612:	69da      	ldr	r2, [r3, #28]
 8006614:	68bb      	ldr	r3, [r7, #8]
 8006616:	4013      	ands	r3, r2
 8006618:	68ba      	ldr	r2, [r7, #8]
 800661a:	429a      	cmp	r2, r3
 800661c:	bf0c      	ite	eq
 800661e:	2301      	moveq	r3, #1
 8006620:	2300      	movne	r3, #0
 8006622:	b2db      	uxtb	r3, r3
 8006624:	461a      	mov	r2, r3
 8006626:	79fb      	ldrb	r3, [r7, #7]
 8006628:	429a      	cmp	r2, r3
 800662a:	d08d      	beq.n	8006548 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800662c:	2300      	movs	r3, #0
}
 800662e:	4618      	mov	r0, r3
 8006630:	3710      	adds	r7, #16
 8006632:	46bd      	mov	sp, r7
 8006634:	bd80      	pop	{r7, pc}
	...

08006638 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8006638:	b480      	push	{r7}
 800663a:	b083      	sub	sp, #12
 800663c:	af00      	add	r7, sp, #0
 800663e:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8006640:	687b      	ldr	r3, [r7, #4]
 8006642:	681b      	ldr	r3, [r3, #0]
 8006644:	681a      	ldr	r2, [r3, #0]
 8006646:	687b      	ldr	r3, [r7, #4]
 8006648:	681b      	ldr	r3, [r3, #0]
 800664a:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 800664e:	601a      	str	r2, [r3, #0]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8006650:	687b      	ldr	r3, [r7, #4]
 8006652:	681b      	ldr	r3, [r3, #0]
 8006654:	6899      	ldr	r1, [r3, #8]
 8006656:	687b      	ldr	r3, [r7, #4]
 8006658:	681a      	ldr	r2, [r3, #0]
 800665a:	4b0f      	ldr	r3, [pc, #60]	; (8006698 <UART_EndRxTransfer+0x60>)
 800665c:	400b      	ands	r3, r1
 800665e:	6093      	str	r3, [r2, #8]

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006660:	687b      	ldr	r3, [r7, #4]
 8006662:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8006664:	2b01      	cmp	r3, #1
 8006666:	d107      	bne.n	8006678 <UART_EndRxTransfer+0x40>
  {
    CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006668:	687b      	ldr	r3, [r7, #4]
 800666a:	681b      	ldr	r3, [r3, #0]
 800666c:	681a      	ldr	r2, [r3, #0]
 800666e:	687b      	ldr	r3, [r7, #4]
 8006670:	681b      	ldr	r3, [r3, #0]
 8006672:	f022 0210 	bic.w	r2, r2, #16
 8006676:	601a      	str	r2, [r3, #0]
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8006678:	687b      	ldr	r3, [r7, #4]
 800667a:	2220      	movs	r2, #32
 800667c:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006680:	687b      	ldr	r3, [r7, #4]
 8006682:	2200      	movs	r2, #0
 8006684:	66da      	str	r2, [r3, #108]	; 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8006686:	687b      	ldr	r3, [r7, #4]
 8006688:	2200      	movs	r2, #0
 800668a:	671a      	str	r2, [r3, #112]	; 0x70
}
 800668c:	bf00      	nop
 800668e:	370c      	adds	r7, #12
 8006690:	46bd      	mov	sp, r7
 8006692:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006696:	4770      	bx	lr
 8006698:	effffffe 	.word	0xeffffffe

0800669c <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800669c:	b580      	push	{r7, lr}
 800669e:	b084      	sub	sp, #16
 80066a0:	af00      	add	r7, sp, #0
 80066a2:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 80066a4:	687b      	ldr	r3, [r7, #4]
 80066a6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80066a8:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 80066aa:	68fb      	ldr	r3, [r7, #12]
 80066ac:	2200      	movs	r2, #0
 80066ae:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
  huart->TxXferCount = 0U;
 80066b2:	68fb      	ldr	r3, [r7, #12]
 80066b4:	2200      	movs	r2, #0
 80066b6:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 80066ba:	68f8      	ldr	r0, [r7, #12]
 80066bc:	f7fe ffda 	bl	8005674 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80066c0:	bf00      	nop
 80066c2:	3710      	adds	r7, #16
 80066c4:	46bd      	mov	sp, r7
 80066c6:	bd80      	pop	{r7, pc}

080066c8 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 80066c8:	b580      	push	{r7, lr}
 80066ca:	b082      	sub	sp, #8
 80066cc:	af00      	add	r7, sp, #0
 80066ce:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 80066d0:	687b      	ldr	r3, [r7, #4]
 80066d2:	681b      	ldr	r3, [r3, #0]
 80066d4:	681a      	ldr	r2, [r3, #0]
 80066d6:	687b      	ldr	r3, [r7, #4]
 80066d8:	681b      	ldr	r3, [r3, #0]
 80066da:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80066de:	601a      	str	r2, [r3, #0]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80066e0:	687b      	ldr	r3, [r7, #4]
 80066e2:	2220      	movs	r2, #32
 80066e4:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 80066e8:	687b      	ldr	r3, [r7, #4]
 80066ea:	2200      	movs	r2, #0
 80066ec:	675a      	str	r2, [r3, #116]	; 0x74
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 80066ee:	6878      	ldr	r0, [r7, #4]
 80066f0:	f7fe ffb6 	bl	8005660 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80066f4:	bf00      	nop
 80066f6:	3708      	adds	r7, #8
 80066f8:	46bd      	mov	sp, r7
 80066fa:	bd80      	pop	{r7, pc}

080066fc <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 80066fc:	b480      	push	{r7}
 80066fe:	b083      	sub	sp, #12
 8006700:	af00      	add	r7, sp, #0
 8006702:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 8006704:	bf00      	nop
 8006706:	370c      	adds	r7, #12
 8006708:	46bd      	mov	sp, r7
 800670a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800670e:	4770      	bx	lr

08006710 <HAL_UARTEx_RxFifoFullCallback>:
  * @brief  UART RX Fifo full callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_RxFifoFullCallback(UART_HandleTypeDef *huart)
{
 8006710:	b480      	push	{r7}
 8006712:	b083      	sub	sp, #12
 8006714:	af00      	add	r7, sp, #0
 8006716:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxFifoFullCallback can be implemented in the user file.
   */
}
 8006718:	bf00      	nop
 800671a:	370c      	adds	r7, #12
 800671c:	46bd      	mov	sp, r7
 800671e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006722:	4770      	bx	lr

08006724 <HAL_UARTEx_TxFifoEmptyCallback>:
  * @brief  UART TX Fifo empty callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_TxFifoEmptyCallback(UART_HandleTypeDef *huart)
{
 8006724:	b480      	push	{r7}
 8006726:	b083      	sub	sp, #12
 8006728:	af00      	add	r7, sp, #0
 800672a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_TxFifoEmptyCallback can be implemented in the user file.
   */
}
 800672c:	bf00      	nop
 800672e:	370c      	adds	r7, #12
 8006730:	46bd      	mov	sp, r7
 8006732:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006736:	4770      	bx	lr

08006738 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 8006738:	b480      	push	{r7}
 800673a:	b085      	sub	sp, #20
 800673c:	af00      	add	r7, sp, #0
 800673e:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 8006740:	687b      	ldr	r3, [r7, #4]
 8006742:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8006746:	2b01      	cmp	r3, #1
 8006748:	d101      	bne.n	800674e <HAL_UARTEx_DisableFifoMode+0x16>
 800674a:	2302      	movs	r3, #2
 800674c:	e027      	b.n	800679e <HAL_UARTEx_DisableFifoMode+0x66>
 800674e:	687b      	ldr	r3, [r7, #4]
 8006750:	2201      	movs	r2, #1
 8006752:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 8006756:	687b      	ldr	r3, [r7, #4]
 8006758:	2224      	movs	r2, #36	; 0x24
 800675a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800675e:	687b      	ldr	r3, [r7, #4]
 8006760:	681b      	ldr	r3, [r3, #0]
 8006762:	681b      	ldr	r3, [r3, #0]
 8006764:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8006766:	687b      	ldr	r3, [r7, #4]
 8006768:	681b      	ldr	r3, [r3, #0]
 800676a:	681a      	ldr	r2, [r3, #0]
 800676c:	687b      	ldr	r3, [r7, #4]
 800676e:	681b      	ldr	r3, [r3, #0]
 8006770:	f022 0201 	bic.w	r2, r2, #1
 8006774:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 8006776:	68fb      	ldr	r3, [r7, #12]
 8006778:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 800677c:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 800677e:	687b      	ldr	r3, [r7, #4]
 8006780:	2200      	movs	r2, #0
 8006782:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8006784:	687b      	ldr	r3, [r7, #4]
 8006786:	681b      	ldr	r3, [r3, #0]
 8006788:	68fa      	ldr	r2, [r7, #12]
 800678a:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800678c:	687b      	ldr	r3, [r7, #4]
 800678e:	2220      	movs	r2, #32
 8006790:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8006794:	687b      	ldr	r3, [r7, #4]
 8006796:	2200      	movs	r2, #0
 8006798:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 800679c:	2300      	movs	r3, #0
}
 800679e:	4618      	mov	r0, r3
 80067a0:	3714      	adds	r7, #20
 80067a2:	46bd      	mov	sp, r7
 80067a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80067a8:	4770      	bx	lr

080067aa <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 80067aa:	b580      	push	{r7, lr}
 80067ac:	b084      	sub	sp, #16
 80067ae:	af00      	add	r7, sp, #0
 80067b0:	6078      	str	r0, [r7, #4]
 80067b2:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 80067b4:	687b      	ldr	r3, [r7, #4]
 80067b6:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 80067ba:	2b01      	cmp	r3, #1
 80067bc:	d101      	bne.n	80067c2 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 80067be:	2302      	movs	r3, #2
 80067c0:	e02d      	b.n	800681e <HAL_UARTEx_SetTxFifoThreshold+0x74>
 80067c2:	687b      	ldr	r3, [r7, #4]
 80067c4:	2201      	movs	r2, #1
 80067c6:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 80067ca:	687b      	ldr	r3, [r7, #4]
 80067cc:	2224      	movs	r2, #36	; 0x24
 80067ce:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 80067d2:	687b      	ldr	r3, [r7, #4]
 80067d4:	681b      	ldr	r3, [r3, #0]
 80067d6:	681b      	ldr	r3, [r3, #0]
 80067d8:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 80067da:	687b      	ldr	r3, [r7, #4]
 80067dc:	681b      	ldr	r3, [r3, #0]
 80067de:	681a      	ldr	r2, [r3, #0]
 80067e0:	687b      	ldr	r3, [r7, #4]
 80067e2:	681b      	ldr	r3, [r3, #0]
 80067e4:	f022 0201 	bic.w	r2, r2, #1
 80067e8:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 80067ea:	687b      	ldr	r3, [r7, #4]
 80067ec:	681b      	ldr	r3, [r3, #0]
 80067ee:	689b      	ldr	r3, [r3, #8]
 80067f0:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 80067f4:	687b      	ldr	r3, [r7, #4]
 80067f6:	681b      	ldr	r3, [r3, #0]
 80067f8:	683a      	ldr	r2, [r7, #0]
 80067fa:	430a      	orrs	r2, r1
 80067fc:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 80067fe:	6878      	ldr	r0, [r7, #4]
 8006800:	f000 f850 	bl	80068a4 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8006804:	687b      	ldr	r3, [r7, #4]
 8006806:	681b      	ldr	r3, [r3, #0]
 8006808:	68fa      	ldr	r2, [r7, #12]
 800680a:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800680c:	687b      	ldr	r3, [r7, #4]
 800680e:	2220      	movs	r2, #32
 8006810:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8006814:	687b      	ldr	r3, [r7, #4]
 8006816:	2200      	movs	r2, #0
 8006818:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 800681c:	2300      	movs	r3, #0
}
 800681e:	4618      	mov	r0, r3
 8006820:	3710      	adds	r7, #16
 8006822:	46bd      	mov	sp, r7
 8006824:	bd80      	pop	{r7, pc}

08006826 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8006826:	b580      	push	{r7, lr}
 8006828:	b084      	sub	sp, #16
 800682a:	af00      	add	r7, sp, #0
 800682c:	6078      	str	r0, [r7, #4]
 800682e:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8006830:	687b      	ldr	r3, [r7, #4]
 8006832:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8006836:	2b01      	cmp	r3, #1
 8006838:	d101      	bne.n	800683e <HAL_UARTEx_SetRxFifoThreshold+0x18>
 800683a:	2302      	movs	r3, #2
 800683c:	e02d      	b.n	800689a <HAL_UARTEx_SetRxFifoThreshold+0x74>
 800683e:	687b      	ldr	r3, [r7, #4]
 8006840:	2201      	movs	r2, #1
 8006842:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 8006846:	687b      	ldr	r3, [r7, #4]
 8006848:	2224      	movs	r2, #36	; 0x24
 800684a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800684e:	687b      	ldr	r3, [r7, #4]
 8006850:	681b      	ldr	r3, [r3, #0]
 8006852:	681b      	ldr	r3, [r3, #0]
 8006854:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8006856:	687b      	ldr	r3, [r7, #4]
 8006858:	681b      	ldr	r3, [r3, #0]
 800685a:	681a      	ldr	r2, [r3, #0]
 800685c:	687b      	ldr	r3, [r7, #4]
 800685e:	681b      	ldr	r3, [r3, #0]
 8006860:	f022 0201 	bic.w	r2, r2, #1
 8006864:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 8006866:	687b      	ldr	r3, [r7, #4]
 8006868:	681b      	ldr	r3, [r3, #0]
 800686a:	689b      	ldr	r3, [r3, #8]
 800686c:	f023 6160 	bic.w	r1, r3, #234881024	; 0xe000000
 8006870:	687b      	ldr	r3, [r7, #4]
 8006872:	681b      	ldr	r3, [r3, #0]
 8006874:	683a      	ldr	r2, [r7, #0]
 8006876:	430a      	orrs	r2, r1
 8006878:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800687a:	6878      	ldr	r0, [r7, #4]
 800687c:	f000 f812 	bl	80068a4 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8006880:	687b      	ldr	r3, [r7, #4]
 8006882:	681b      	ldr	r3, [r3, #0]
 8006884:	68fa      	ldr	r2, [r7, #12]
 8006886:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8006888:	687b      	ldr	r3, [r7, #4]
 800688a:	2220      	movs	r2, #32
 800688c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8006890:	687b      	ldr	r3, [r7, #4]
 8006892:	2200      	movs	r2, #0
 8006894:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 8006898:	2300      	movs	r3, #0
}
 800689a:	4618      	mov	r0, r3
 800689c:	3710      	adds	r7, #16
 800689e:	46bd      	mov	sp, r7
 80068a0:	bd80      	pop	{r7, pc}
	...

080068a4 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 80068a4:	b480      	push	{r7}
 80068a6:	b085      	sub	sp, #20
 80068a8:	af00      	add	r7, sp, #0
 80068aa:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 80068ac:	687b      	ldr	r3, [r7, #4]
 80068ae:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80068b0:	2b00      	cmp	r3, #0
 80068b2:	d108      	bne.n	80068c6 <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 80068b4:	687b      	ldr	r3, [r7, #4]
 80068b6:	2201      	movs	r2, #1
 80068b8:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
 80068bc:	687b      	ldr	r3, [r7, #4]
 80068be:	2201      	movs	r2, #1
 80068c0:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 80068c4:	e031      	b.n	800692a <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 80068c6:	2310      	movs	r3, #16
 80068c8:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 80068ca:	2310      	movs	r3, #16
 80068cc:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 80068ce:	687b      	ldr	r3, [r7, #4]
 80068d0:	681b      	ldr	r3, [r3, #0]
 80068d2:	689b      	ldr	r3, [r3, #8]
 80068d4:	0e5b      	lsrs	r3, r3, #25
 80068d6:	b2db      	uxtb	r3, r3
 80068d8:	f003 0307 	and.w	r3, r3, #7
 80068dc:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 80068de:	687b      	ldr	r3, [r7, #4]
 80068e0:	681b      	ldr	r3, [r3, #0]
 80068e2:	689b      	ldr	r3, [r3, #8]
 80068e4:	0f5b      	lsrs	r3, r3, #29
 80068e6:	b2db      	uxtb	r3, r3
 80068e8:	f003 0307 	and.w	r3, r3, #7
 80068ec:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 80068ee:	7bbb      	ldrb	r3, [r7, #14]
 80068f0:	7b3a      	ldrb	r2, [r7, #12]
 80068f2:	4911      	ldr	r1, [pc, #68]	; (8006938 <UARTEx_SetNbDataToProcess+0x94>)
 80068f4:	5c8a      	ldrb	r2, [r1, r2]
 80068f6:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 80068fa:	7b3a      	ldrb	r2, [r7, #12]
 80068fc:	490f      	ldr	r1, [pc, #60]	; (800693c <UARTEx_SetNbDataToProcess+0x98>)
 80068fe:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8006900:	fb93 f3f2 	sdiv	r3, r3, r2
 8006904:	b29a      	uxth	r2, r3
 8006906:	687b      	ldr	r3, [r7, #4]
 8006908:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800690c:	7bfb      	ldrb	r3, [r7, #15]
 800690e:	7b7a      	ldrb	r2, [r7, #13]
 8006910:	4909      	ldr	r1, [pc, #36]	; (8006938 <UARTEx_SetNbDataToProcess+0x94>)
 8006912:	5c8a      	ldrb	r2, [r1, r2]
 8006914:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 8006918:	7b7a      	ldrb	r2, [r7, #13]
 800691a:	4908      	ldr	r1, [pc, #32]	; (800693c <UARTEx_SetNbDataToProcess+0x98>)
 800691c:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800691e:	fb93 f3f2 	sdiv	r3, r3, r2
 8006922:	b29a      	uxth	r2, r3
 8006924:	687b      	ldr	r3, [r7, #4]
 8006926:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
}
 800692a:	bf00      	nop
 800692c:	3714      	adds	r7, #20
 800692e:	46bd      	mov	sp, r7
 8006930:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006934:	4770      	bx	lr
 8006936:	bf00      	nop
 8006938:	08006c08 	.word	0x08006c08
 800693c:	08006c10 	.word	0x08006c10

08006940 <FMC_NORSRAM_Init>:
  * @param  Init Pointer to NORSRAM Initialization structure
  * @retval HAL status
  */
HAL_StatusTypeDef  FMC_NORSRAM_Init(FMC_NORSRAM_TypeDef *Device,
                                    FMC_NORSRAM_InitTypeDef *Init)
{
 8006940:	b480      	push	{r7}
 8006942:	b087      	sub	sp, #28
 8006944:	af00      	add	r7, sp, #0
 8006946:	6078      	str	r0, [r7, #4]
 8006948:	6039      	str	r1, [r7, #0]
  assert_param(IS_FMC_CONTINOUS_CLOCK(Init->ContinuousClock));
  assert_param(IS_FMC_WRITE_FIFO(Init->WriteFifo));
  assert_param(IS_FMC_PAGESIZE(Init->PageSize));

  /* Disable NORSRAM Device */
  __FMC_NORSRAM_DISABLE(Device, Init->NSBank);
 800694a:	683b      	ldr	r3, [r7, #0]
 800694c:	681a      	ldr	r2, [r3, #0]
 800694e:	687b      	ldr	r3, [r7, #4]
 8006950:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006954:	683a      	ldr	r2, [r7, #0]
 8006956:	6812      	ldr	r2, [r2, #0]
 8006958:	f023 0101 	bic.w	r1, r3, #1
 800695c:	687b      	ldr	r3, [r7, #4]
 800695e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

  /* Set NORSRAM device control parameters */
  if (Init->MemoryType == FMC_MEMORY_TYPE_NOR)
 8006962:	683b      	ldr	r3, [r7, #0]
 8006964:	689b      	ldr	r3, [r3, #8]
 8006966:	2b08      	cmp	r3, #8
 8006968:	d102      	bne.n	8006970 <FMC_NORSRAM_Init+0x30>
  {
    flashaccess = FMC_NORSRAM_FLASH_ACCESS_ENABLE;
 800696a:	2340      	movs	r3, #64	; 0x40
 800696c:	617b      	str	r3, [r7, #20]
 800696e:	e001      	b.n	8006974 <FMC_NORSRAM_Init+0x34>
  }
  else
  {
    flashaccess = FMC_NORSRAM_FLASH_ACCESS_DISABLE;
 8006970:	2300      	movs	r3, #0
 8006972:	617b      	str	r3, [r7, #20]
  }

  btcr_reg = (flashaccess                   | \
              Init->DataAddressMux          | \
 8006974:	683b      	ldr	r3, [r7, #0]
 8006976:	685a      	ldr	r2, [r3, #4]
  btcr_reg = (flashaccess                   | \
 8006978:	697b      	ldr	r3, [r7, #20]
 800697a:	431a      	orrs	r2, r3
              Init->MemoryType              | \
 800697c:	683b      	ldr	r3, [r7, #0]
 800697e:	689b      	ldr	r3, [r3, #8]
              Init->DataAddressMux          | \
 8006980:	431a      	orrs	r2, r3
              Init->MemoryDataWidth         | \
 8006982:	683b      	ldr	r3, [r7, #0]
 8006984:	68db      	ldr	r3, [r3, #12]
              Init->MemoryType              | \
 8006986:	431a      	orrs	r2, r3
              Init->BurstAccessMode         | \
 8006988:	683b      	ldr	r3, [r7, #0]
 800698a:	691b      	ldr	r3, [r3, #16]
              Init->MemoryDataWidth         | \
 800698c:	431a      	orrs	r2, r3
              Init->WaitSignalPolarity      | \
 800698e:	683b      	ldr	r3, [r7, #0]
 8006990:	695b      	ldr	r3, [r3, #20]
              Init->BurstAccessMode         | \
 8006992:	431a      	orrs	r2, r3
              Init->WaitSignalActive        | \
 8006994:	683b      	ldr	r3, [r7, #0]
 8006996:	699b      	ldr	r3, [r3, #24]
              Init->WaitSignalPolarity      | \
 8006998:	431a      	orrs	r2, r3
              Init->WriteOperation          | \
 800699a:	683b      	ldr	r3, [r7, #0]
 800699c:	69db      	ldr	r3, [r3, #28]
              Init->WaitSignalActive        | \
 800699e:	431a      	orrs	r2, r3
              Init->WaitSignal              | \
 80069a0:	683b      	ldr	r3, [r7, #0]
 80069a2:	6a1b      	ldr	r3, [r3, #32]
              Init->WriteOperation          | \
 80069a4:	431a      	orrs	r2, r3
              Init->ExtendedMode            | \
 80069a6:	683b      	ldr	r3, [r7, #0]
 80069a8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
              Init->WaitSignal              | \
 80069aa:	431a      	orrs	r2, r3
              Init->AsynchronousWait        | \
 80069ac:	683b      	ldr	r3, [r7, #0]
 80069ae:	6a9b      	ldr	r3, [r3, #40]	; 0x28
              Init->ExtendedMode            | \
 80069b0:	431a      	orrs	r2, r3
              Init->WriteBurst);
 80069b2:	683b      	ldr	r3, [r7, #0]
 80069b4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
  btcr_reg = (flashaccess                   | \
 80069b6:	4313      	orrs	r3, r2
 80069b8:	613b      	str	r3, [r7, #16]

  btcr_reg |= Init->ContinuousClock;
 80069ba:	683b      	ldr	r3, [r7, #0]
 80069bc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80069be:	693a      	ldr	r2, [r7, #16]
 80069c0:	4313      	orrs	r3, r2
 80069c2:	613b      	str	r3, [r7, #16]
  btcr_reg |= Init->WriteFifo;
 80069c4:	683b      	ldr	r3, [r7, #0]
 80069c6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80069c8:	693a      	ldr	r2, [r7, #16]
 80069ca:	4313      	orrs	r3, r2
 80069cc:	613b      	str	r3, [r7, #16]
  btcr_reg |= Init->PageSize;
 80069ce:	683b      	ldr	r3, [r7, #0]
 80069d0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80069d2:	693a      	ldr	r2, [r7, #16]
 80069d4:	4313      	orrs	r3, r2
 80069d6:	613b      	str	r3, [r7, #16]

  mask = (FMC_BCRx_MBKEN                |
 80069d8:	4b20      	ldr	r3, [pc, #128]	; (8006a5c <FMC_NORSRAM_Init+0x11c>)
 80069da:	60fb      	str	r3, [r7, #12]
          FMC_BCRx_WAITEN               |
          FMC_BCRx_EXTMOD               |
          FMC_BCRx_ASYNCWAIT            |
          FMC_BCRx_CBURSTRW);

  mask |= FMC_BCR1_CCLKEN;
 80069dc:	68fb      	ldr	r3, [r7, #12]
 80069de:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80069e2:	60fb      	str	r3, [r7, #12]
  mask |= FMC_BCR1_WFDIS;
 80069e4:	68fb      	ldr	r3, [r7, #12]
 80069e6:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80069ea:	60fb      	str	r3, [r7, #12]
  mask |= FMC_BCRx_CPSIZE;
 80069ec:	68fb      	ldr	r3, [r7, #12]
 80069ee:	f443 23e0 	orr.w	r3, r3, #458752	; 0x70000
 80069f2:	60fb      	str	r3, [r7, #12]

  MODIFY_REG(Device->BTCR[Init->NSBank], mask, btcr_reg);
 80069f4:	683b      	ldr	r3, [r7, #0]
 80069f6:	681a      	ldr	r2, [r3, #0]
 80069f8:	687b      	ldr	r3, [r7, #4]
 80069fa:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 80069fe:	68fb      	ldr	r3, [r7, #12]
 8006a00:	43db      	mvns	r3, r3
 8006a02:	ea02 0103 	and.w	r1, r2, r3
 8006a06:	683b      	ldr	r3, [r7, #0]
 8006a08:	681a      	ldr	r2, [r3, #0]
 8006a0a:	693b      	ldr	r3, [r7, #16]
 8006a0c:	4319      	orrs	r1, r3
 8006a0e:	687b      	ldr	r3, [r7, #4]
 8006a10:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

  /* Configure synchronous mode when Continuous clock is enabled for bank2..4 */
  if ((Init->ContinuousClock == FMC_CONTINUOUS_CLOCK_SYNC_ASYNC) && (Init->NSBank != FMC_NORSRAM_BANK1))
 8006a14:	683b      	ldr	r3, [r7, #0]
 8006a16:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006a18:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8006a1c:	d10c      	bne.n	8006a38 <FMC_NORSRAM_Init+0xf8>
 8006a1e:	683b      	ldr	r3, [r7, #0]
 8006a20:	681b      	ldr	r3, [r3, #0]
 8006a22:	2b00      	cmp	r3, #0
 8006a24:	d008      	beq.n	8006a38 <FMC_NORSRAM_Init+0xf8>
  {
    MODIFY_REG(Device->BTCR[FMC_NORSRAM_BANK1], FMC_BCR1_CCLKEN, Init->ContinuousClock);
 8006a26:	687b      	ldr	r3, [r7, #4]
 8006a28:	681b      	ldr	r3, [r3, #0]
 8006a2a:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 8006a2e:	683b      	ldr	r3, [r7, #0]
 8006a30:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006a32:	431a      	orrs	r2, r3
 8006a34:	687b      	ldr	r3, [r7, #4]
 8006a36:	601a      	str	r2, [r3, #0]
  }

  if (Init->NSBank != FMC_NORSRAM_BANK1)
 8006a38:	683b      	ldr	r3, [r7, #0]
 8006a3a:	681b      	ldr	r3, [r3, #0]
 8006a3c:	2b00      	cmp	r3, #0
 8006a3e:	d006      	beq.n	8006a4e <FMC_NORSRAM_Init+0x10e>
  {
    /* Configure Write FIFO mode when Write Fifo is enabled for bank2..4 */
    SET_BIT(Device->BTCR[FMC_NORSRAM_BANK1], (uint32_t)(Init->WriteFifo));
 8006a40:	687b      	ldr	r3, [r7, #4]
 8006a42:	681a      	ldr	r2, [r3, #0]
 8006a44:	683b      	ldr	r3, [r7, #0]
 8006a46:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006a48:	431a      	orrs	r2, r3
 8006a4a:	687b      	ldr	r3, [r7, #4]
 8006a4c:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8006a4e:	2300      	movs	r3, #0
}
 8006a50:	4618      	mov	r0, r3
 8006a52:	371c      	adds	r7, #28
 8006a54:	46bd      	mov	sp, r7
 8006a56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a5a:	4770      	bx	lr
 8006a5c:	0008fb7f 	.word	0x0008fb7f

08006a60 <FMC_NORSRAM_Timing_Init>:
  * @param  Bank NORSRAM bank number
  * @retval HAL status
  */
HAL_StatusTypeDef FMC_NORSRAM_Timing_Init(FMC_NORSRAM_TypeDef *Device,
                                          FMC_NORSRAM_TimingTypeDef *Timing, uint32_t Bank)
{
 8006a60:	b480      	push	{r7}
 8006a62:	b087      	sub	sp, #28
 8006a64:	af00      	add	r7, sp, #0
 8006a66:	60f8      	str	r0, [r7, #12]
 8006a68:	60b9      	str	r1, [r7, #8]
 8006a6a:	607a      	str	r2, [r7, #4]
  assert_param(IS_FMC_DATA_LATENCY(Timing->DataLatency));
  assert_param(IS_FMC_ACCESS_MODE(Timing->AccessMode));
  assert_param(IS_FMC_NORSRAM_BANK(Bank));

  /* Set FMC_NORSRAM device timing parameters */
  MODIFY_REG(Device->BTCR[Bank + 1U], BTR_CLEAR_MASK, (Timing->AddressSetupTime                                  |
 8006a6c:	687b      	ldr	r3, [r7, #4]
 8006a6e:	1c5a      	adds	r2, r3, #1
 8006a70:	68fb      	ldr	r3, [r7, #12]
 8006a72:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006a76:	f003 4140 	and.w	r1, r3, #3221225472	; 0xc0000000
 8006a7a:	68bb      	ldr	r3, [r7, #8]
 8006a7c:	681a      	ldr	r2, [r3, #0]
 8006a7e:	68bb      	ldr	r3, [r7, #8]
 8006a80:	685b      	ldr	r3, [r3, #4]
 8006a82:	011b      	lsls	r3, r3, #4
 8006a84:	431a      	orrs	r2, r3
 8006a86:	68bb      	ldr	r3, [r7, #8]
 8006a88:	689b      	ldr	r3, [r3, #8]
 8006a8a:	021b      	lsls	r3, r3, #8
 8006a8c:	431a      	orrs	r2, r3
 8006a8e:	68bb      	ldr	r3, [r7, #8]
 8006a90:	68db      	ldr	r3, [r3, #12]
 8006a92:	041b      	lsls	r3, r3, #16
 8006a94:	431a      	orrs	r2, r3
 8006a96:	68bb      	ldr	r3, [r7, #8]
 8006a98:	691b      	ldr	r3, [r3, #16]
 8006a9a:	3b01      	subs	r3, #1
 8006a9c:	051b      	lsls	r3, r3, #20
 8006a9e:	431a      	orrs	r2, r3
 8006aa0:	68bb      	ldr	r3, [r7, #8]
 8006aa2:	695b      	ldr	r3, [r3, #20]
 8006aa4:	3b02      	subs	r3, #2
 8006aa6:	061b      	lsls	r3, r3, #24
 8006aa8:	431a      	orrs	r2, r3
 8006aaa:	68bb      	ldr	r3, [r7, #8]
 8006aac:	699b      	ldr	r3, [r3, #24]
 8006aae:	4313      	orrs	r3, r2
 8006ab0:	687a      	ldr	r2, [r7, #4]
 8006ab2:	3201      	adds	r2, #1
 8006ab4:	4319      	orrs	r1, r3
 8006ab6:	68fb      	ldr	r3, [r7, #12]
 8006ab8:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
                                                       (((Timing->CLKDivision) - 1U)     << FMC_BTRx_CLKDIV_Pos)  |
                                                       (((Timing->DataLatency) - 2U)     << FMC_BTRx_DATLAT_Pos)  |
                                                       (Timing->AccessMode)));

  /* Configure Clock division value (in NORSRAM bank 1) when continuous clock is enabled */
  if (HAL_IS_BIT_SET(Device->BTCR[FMC_NORSRAM_BANK1], FMC_BCR1_CCLKEN))
 8006abc:	68fb      	ldr	r3, [r7, #12]
 8006abe:	681b      	ldr	r3, [r3, #0]
 8006ac0:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8006ac4:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8006ac8:	d113      	bne.n	8006af2 <FMC_NORSRAM_Timing_Init+0x92>
  {
    tmpr = (uint32_t)(Device->BTCR[FMC_NORSRAM_BANK1 + 1U] & ~((0x0FU) << FMC_BTRx_CLKDIV_Pos));
 8006aca:	68fb      	ldr	r3, [r7, #12]
 8006acc:	685b      	ldr	r3, [r3, #4]
 8006ace:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 8006ad2:	617b      	str	r3, [r7, #20]
    tmpr |= (uint32_t)(((Timing->CLKDivision) - 1U) << FMC_BTRx_CLKDIV_Pos);
 8006ad4:	68bb      	ldr	r3, [r7, #8]
 8006ad6:	691b      	ldr	r3, [r3, #16]
 8006ad8:	3b01      	subs	r3, #1
 8006ada:	051b      	lsls	r3, r3, #20
 8006adc:	697a      	ldr	r2, [r7, #20]
 8006ade:	4313      	orrs	r3, r2
 8006ae0:	617b      	str	r3, [r7, #20]
    MODIFY_REG(Device->BTCR[FMC_NORSRAM_BANK1 + 1U], FMC_BTRx_CLKDIV, tmpr);
 8006ae2:	68fb      	ldr	r3, [r7, #12]
 8006ae4:	685b      	ldr	r3, [r3, #4]
 8006ae6:	f423 0270 	bic.w	r2, r3, #15728640	; 0xf00000
 8006aea:	697b      	ldr	r3, [r7, #20]
 8006aec:	431a      	orrs	r2, r3
 8006aee:	68fb      	ldr	r3, [r7, #12]
 8006af0:	605a      	str	r2, [r3, #4]
  }

  return HAL_OK;
 8006af2:	2300      	movs	r3, #0
}
 8006af4:	4618      	mov	r0, r3
 8006af6:	371c      	adds	r7, #28
 8006af8:	46bd      	mov	sp, r7
 8006afa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006afe:	4770      	bx	lr

08006b00 <FMC_NORSRAM_Extended_Timing_Init>:
  * @retval HAL status
  */
HAL_StatusTypeDef FMC_NORSRAM_Extended_Timing_Init(FMC_NORSRAM_EXTENDED_TypeDef *Device,
                                                   FMC_NORSRAM_TimingTypeDef *Timing, uint32_t Bank,
                                                   uint32_t ExtendedMode)
{
 8006b00:	b480      	push	{r7}
 8006b02:	b085      	sub	sp, #20
 8006b04:	af00      	add	r7, sp, #0
 8006b06:	60f8      	str	r0, [r7, #12]
 8006b08:	60b9      	str	r1, [r7, #8]
 8006b0a:	607a      	str	r2, [r7, #4]
 8006b0c:	603b      	str	r3, [r7, #0]
  /* Check the parameters */
  assert_param(IS_FMC_EXTENDED_MODE(ExtendedMode));

  /* Set NORSRAM device timing register for write configuration, if extended mode is used */
  if (ExtendedMode == FMC_EXTENDED_MODE_ENABLE)
 8006b0e:	683b      	ldr	r3, [r7, #0]
 8006b10:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8006b14:	d11d      	bne.n	8006b52 <FMC_NORSRAM_Extended_Timing_Init+0x52>
    assert_param(IS_FMC_TURNAROUND_TIME(Timing->BusTurnAroundDuration));
    assert_param(IS_FMC_ACCESS_MODE(Timing->AccessMode));
    assert_param(IS_FMC_NORSRAM_BANK(Bank));

    /* Set NORSRAM device timing register for write configuration, if extended mode is used */
    MODIFY_REG(Device->BWTR[Bank], BWTR_CLEAR_MASK, (Timing->AddressSetupTime                                    |
 8006b16:	68fb      	ldr	r3, [r7, #12]
 8006b18:	687a      	ldr	r2, [r7, #4]
 8006b1a:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8006b1e:	4b13      	ldr	r3, [pc, #76]	; (8006b6c <FMC_NORSRAM_Extended_Timing_Init+0x6c>)
 8006b20:	4013      	ands	r3, r2
 8006b22:	68ba      	ldr	r2, [r7, #8]
 8006b24:	6811      	ldr	r1, [r2, #0]
 8006b26:	68ba      	ldr	r2, [r7, #8]
 8006b28:	6852      	ldr	r2, [r2, #4]
 8006b2a:	0112      	lsls	r2, r2, #4
 8006b2c:	4311      	orrs	r1, r2
 8006b2e:	68ba      	ldr	r2, [r7, #8]
 8006b30:	6892      	ldr	r2, [r2, #8]
 8006b32:	0212      	lsls	r2, r2, #8
 8006b34:	4311      	orrs	r1, r2
 8006b36:	68ba      	ldr	r2, [r7, #8]
 8006b38:	6992      	ldr	r2, [r2, #24]
 8006b3a:	4311      	orrs	r1, r2
 8006b3c:	68ba      	ldr	r2, [r7, #8]
 8006b3e:	68d2      	ldr	r2, [r2, #12]
 8006b40:	0412      	lsls	r2, r2, #16
 8006b42:	430a      	orrs	r2, r1
 8006b44:	ea43 0102 	orr.w	r1, r3, r2
 8006b48:	68fb      	ldr	r3, [r7, #12]
 8006b4a:	687a      	ldr	r2, [r7, #4]
 8006b4c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
 8006b50:	e005      	b.n	8006b5e <FMC_NORSRAM_Extended_Timing_Init+0x5e>
                                                     Timing->AccessMode                                          |
                                                     ((Timing->BusTurnAroundDuration)  << FMC_BWTRx_BUSTURN_Pos)));
  }
  else
  {
    Device->BWTR[Bank] = 0x0FFFFFFFU;
 8006b52:	68fb      	ldr	r3, [r7, #12]
 8006b54:	687a      	ldr	r2, [r7, #4]
 8006b56:	f06f 4170 	mvn.w	r1, #4026531840	; 0xf0000000
 8006b5a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  }

  return HAL_OK;
 8006b5e:	2300      	movs	r3, #0
}
 8006b60:	4618      	mov	r0, r3
 8006b62:	3714      	adds	r7, #20
 8006b64:	46bd      	mov	sp, r7
 8006b66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b6a:	4770      	bx	lr
 8006b6c:	cff00000 	.word	0xcff00000

08006b70 <__libc_init_array>:
 8006b70:	b570      	push	{r4, r5, r6, lr}
 8006b72:	4d0d      	ldr	r5, [pc, #52]	; (8006ba8 <__libc_init_array+0x38>)
 8006b74:	4c0d      	ldr	r4, [pc, #52]	; (8006bac <__libc_init_array+0x3c>)
 8006b76:	1b64      	subs	r4, r4, r5
 8006b78:	10a4      	asrs	r4, r4, #2
 8006b7a:	2600      	movs	r6, #0
 8006b7c:	42a6      	cmp	r6, r4
 8006b7e:	d109      	bne.n	8006b94 <__libc_init_array+0x24>
 8006b80:	4d0b      	ldr	r5, [pc, #44]	; (8006bb0 <__libc_init_array+0x40>)
 8006b82:	4c0c      	ldr	r4, [pc, #48]	; (8006bb4 <__libc_init_array+0x44>)
 8006b84:	f000 f820 	bl	8006bc8 <_init>
 8006b88:	1b64      	subs	r4, r4, r5
 8006b8a:	10a4      	asrs	r4, r4, #2
 8006b8c:	2600      	movs	r6, #0
 8006b8e:	42a6      	cmp	r6, r4
 8006b90:	d105      	bne.n	8006b9e <__libc_init_array+0x2e>
 8006b92:	bd70      	pop	{r4, r5, r6, pc}
 8006b94:	f855 3b04 	ldr.w	r3, [r5], #4
 8006b98:	4798      	blx	r3
 8006b9a:	3601      	adds	r6, #1
 8006b9c:	e7ee      	b.n	8006b7c <__libc_init_array+0xc>
 8006b9e:	f855 3b04 	ldr.w	r3, [r5], #4
 8006ba2:	4798      	blx	r3
 8006ba4:	3601      	adds	r6, #1
 8006ba6:	e7f2      	b.n	8006b8e <__libc_init_array+0x1e>
 8006ba8:	08006c20 	.word	0x08006c20
 8006bac:	08006c20 	.word	0x08006c20
 8006bb0:	08006c20 	.word	0x08006c20
 8006bb4:	08006c24 	.word	0x08006c24

08006bb8 <memset>:
 8006bb8:	4402      	add	r2, r0
 8006bba:	4603      	mov	r3, r0
 8006bbc:	4293      	cmp	r3, r2
 8006bbe:	d100      	bne.n	8006bc2 <memset+0xa>
 8006bc0:	4770      	bx	lr
 8006bc2:	f803 1b01 	strb.w	r1, [r3], #1
 8006bc6:	e7f9      	b.n	8006bbc <memset+0x4>

08006bc8 <_init>:
 8006bc8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006bca:	bf00      	nop
 8006bcc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006bce:	bc08      	pop	{r3}
 8006bd0:	469e      	mov	lr, r3
 8006bd2:	4770      	bx	lr

08006bd4 <_fini>:
 8006bd4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006bd6:	bf00      	nop
 8006bd8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006bda:	bc08      	pop	{r3}
 8006bdc:	469e      	mov	lr, r3
 8006bde:	4770      	bx	lr
