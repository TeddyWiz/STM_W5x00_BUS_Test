
stm_W6100_bus.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000002cc  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000089fc  080002d0  080002d0  000102d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000218  08008ccc  08008ccc  00018ccc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  08008ee4  08008ee4  00018ee4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000004  08008eec  08008eec  00018eec  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .fini_array   00000004  08008ef0  08008ef0  00018ef0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .data         00000104  20000000  08008ef4  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .RxDecripSection 00000060  20000104  08008ff8  00020104  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .TxDecripSection 00000060  20000164  08009058  00020164  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000245c  200001c4  080090b8  000201c4  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20002620  080090b8  00022620  2**0
                  ALLOC
 11 .ARM.attributes 0000002e  00000000  00000000  000201c4  2**0
                  CONTENTS, READONLY
 12 .debug_info   0002455e  00000000  00000000  000201f2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00003b08  00000000  00000000  00044750  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001218  00000000  00000000  00048258  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 000010f0  00000000  00000000  00049470  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0003585c  00000000  00000000  0004a560  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00015bfe  00000000  00000000  0007fdbc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00154300  00000000  00000000  000959ba  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  001e9cba  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000053bc  00000000  00000000  001e9d10  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080002d0 <__do_global_dtors_aux>:
 80002d0:	b510      	push	{r4, lr}
 80002d2:	4c05      	ldr	r4, [pc, #20]	; (80002e8 <__do_global_dtors_aux+0x18>)
 80002d4:	7823      	ldrb	r3, [r4, #0]
 80002d6:	b933      	cbnz	r3, 80002e6 <__do_global_dtors_aux+0x16>
 80002d8:	4b04      	ldr	r3, [pc, #16]	; (80002ec <__do_global_dtors_aux+0x1c>)
 80002da:	b113      	cbz	r3, 80002e2 <__do_global_dtors_aux+0x12>
 80002dc:	4804      	ldr	r0, [pc, #16]	; (80002f0 <__do_global_dtors_aux+0x20>)
 80002de:	f3af 8000 	nop.w
 80002e2:	2301      	movs	r3, #1
 80002e4:	7023      	strb	r3, [r4, #0]
 80002e6:	bd10      	pop	{r4, pc}
 80002e8:	200001c4 	.word	0x200001c4
 80002ec:	00000000 	.word	0x00000000
 80002f0:	08008cb4 	.word	0x08008cb4

080002f4 <frame_dummy>:
 80002f4:	b508      	push	{r3, lr}
 80002f6:	4b03      	ldr	r3, [pc, #12]	; (8000304 <frame_dummy+0x10>)
 80002f8:	b11b      	cbz	r3, 8000302 <frame_dummy+0xe>
 80002fa:	4903      	ldr	r1, [pc, #12]	; (8000308 <frame_dummy+0x14>)
 80002fc:	4803      	ldr	r0, [pc, #12]	; (800030c <frame_dummy+0x18>)
 80002fe:	f3af 8000 	nop.w
 8000302:	bd08      	pop	{r3, pc}
 8000304:	00000000 	.word	0x00000000
 8000308:	200001c8 	.word	0x200001c8
 800030c:	08008cb4 	.word	0x08008cb4

08000310 <memchr>:
 8000310:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000314:	2a10      	cmp	r2, #16
 8000316:	db2b      	blt.n	8000370 <memchr+0x60>
 8000318:	f010 0f07 	tst.w	r0, #7
 800031c:	d008      	beq.n	8000330 <memchr+0x20>
 800031e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000322:	3a01      	subs	r2, #1
 8000324:	428b      	cmp	r3, r1
 8000326:	d02d      	beq.n	8000384 <memchr+0x74>
 8000328:	f010 0f07 	tst.w	r0, #7
 800032c:	b342      	cbz	r2, 8000380 <memchr+0x70>
 800032e:	d1f6      	bne.n	800031e <memchr+0xe>
 8000330:	b4f0      	push	{r4, r5, r6, r7}
 8000332:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000336:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800033a:	f022 0407 	bic.w	r4, r2, #7
 800033e:	f07f 0700 	mvns.w	r7, #0
 8000342:	2300      	movs	r3, #0
 8000344:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000348:	3c08      	subs	r4, #8
 800034a:	ea85 0501 	eor.w	r5, r5, r1
 800034e:	ea86 0601 	eor.w	r6, r6, r1
 8000352:	fa85 f547 	uadd8	r5, r5, r7
 8000356:	faa3 f587 	sel	r5, r3, r7
 800035a:	fa86 f647 	uadd8	r6, r6, r7
 800035e:	faa5 f687 	sel	r6, r5, r7
 8000362:	b98e      	cbnz	r6, 8000388 <memchr+0x78>
 8000364:	d1ee      	bne.n	8000344 <memchr+0x34>
 8000366:	bcf0      	pop	{r4, r5, r6, r7}
 8000368:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800036c:	f002 0207 	and.w	r2, r2, #7
 8000370:	b132      	cbz	r2, 8000380 <memchr+0x70>
 8000372:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000376:	3a01      	subs	r2, #1
 8000378:	ea83 0301 	eor.w	r3, r3, r1
 800037c:	b113      	cbz	r3, 8000384 <memchr+0x74>
 800037e:	d1f8      	bne.n	8000372 <memchr+0x62>
 8000380:	2000      	movs	r0, #0
 8000382:	4770      	bx	lr
 8000384:	3801      	subs	r0, #1
 8000386:	4770      	bx	lr
 8000388:	2d00      	cmp	r5, #0
 800038a:	bf06      	itte	eq
 800038c:	4635      	moveq	r5, r6
 800038e:	3803      	subeq	r0, #3
 8000390:	3807      	subne	r0, #7
 8000392:	f015 0f01 	tst.w	r5, #1
 8000396:	d107      	bne.n	80003a8 <memchr+0x98>
 8000398:	3001      	adds	r0, #1
 800039a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800039e:	bf02      	ittt	eq
 80003a0:	3001      	addeq	r0, #1
 80003a2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80003a6:	3001      	addeq	r0, #1
 80003a8:	bcf0      	pop	{r4, r5, r6, r7}
 80003aa:	3801      	subs	r0, #1
 80003ac:	4770      	bx	lr
 80003ae:	bf00      	nop

080003b0 <__aeabi_uldivmod>:
 80003b0:	b953      	cbnz	r3, 80003c8 <__aeabi_uldivmod+0x18>
 80003b2:	b94a      	cbnz	r2, 80003c8 <__aeabi_uldivmod+0x18>
 80003b4:	2900      	cmp	r1, #0
 80003b6:	bf08      	it	eq
 80003b8:	2800      	cmpeq	r0, #0
 80003ba:	bf1c      	itt	ne
 80003bc:	f04f 31ff 	movne.w	r1, #4294967295
 80003c0:	f04f 30ff 	movne.w	r0, #4294967295
 80003c4:	f000 b96e 	b.w	80006a4 <__aeabi_idiv0>
 80003c8:	f1ad 0c08 	sub.w	ip, sp, #8
 80003cc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80003d0:	f000 f806 	bl	80003e0 <__udivmoddi4>
 80003d4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80003d8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80003dc:	b004      	add	sp, #16
 80003de:	4770      	bx	lr

080003e0 <__udivmoddi4>:
 80003e0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80003e4:	9d08      	ldr	r5, [sp, #32]
 80003e6:	4604      	mov	r4, r0
 80003e8:	468c      	mov	ip, r1
 80003ea:	2b00      	cmp	r3, #0
 80003ec:	f040 8083 	bne.w	80004f6 <__udivmoddi4+0x116>
 80003f0:	428a      	cmp	r2, r1
 80003f2:	4617      	mov	r7, r2
 80003f4:	d947      	bls.n	8000486 <__udivmoddi4+0xa6>
 80003f6:	fab2 f282 	clz	r2, r2
 80003fa:	b142      	cbz	r2, 800040e <__udivmoddi4+0x2e>
 80003fc:	f1c2 0020 	rsb	r0, r2, #32
 8000400:	fa24 f000 	lsr.w	r0, r4, r0
 8000404:	4091      	lsls	r1, r2
 8000406:	4097      	lsls	r7, r2
 8000408:	ea40 0c01 	orr.w	ip, r0, r1
 800040c:	4094      	lsls	r4, r2
 800040e:	ea4f 4817 	mov.w	r8, r7, lsr #16
 8000412:	0c23      	lsrs	r3, r4, #16
 8000414:	fbbc f6f8 	udiv	r6, ip, r8
 8000418:	fa1f fe87 	uxth.w	lr, r7
 800041c:	fb08 c116 	mls	r1, r8, r6, ip
 8000420:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000424:	fb06 f10e 	mul.w	r1, r6, lr
 8000428:	4299      	cmp	r1, r3
 800042a:	d909      	bls.n	8000440 <__udivmoddi4+0x60>
 800042c:	18fb      	adds	r3, r7, r3
 800042e:	f106 30ff 	add.w	r0, r6, #4294967295
 8000432:	f080 8119 	bcs.w	8000668 <__udivmoddi4+0x288>
 8000436:	4299      	cmp	r1, r3
 8000438:	f240 8116 	bls.w	8000668 <__udivmoddi4+0x288>
 800043c:	3e02      	subs	r6, #2
 800043e:	443b      	add	r3, r7
 8000440:	1a5b      	subs	r3, r3, r1
 8000442:	b2a4      	uxth	r4, r4
 8000444:	fbb3 f0f8 	udiv	r0, r3, r8
 8000448:	fb08 3310 	mls	r3, r8, r0, r3
 800044c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000450:	fb00 fe0e 	mul.w	lr, r0, lr
 8000454:	45a6      	cmp	lr, r4
 8000456:	d909      	bls.n	800046c <__udivmoddi4+0x8c>
 8000458:	193c      	adds	r4, r7, r4
 800045a:	f100 33ff 	add.w	r3, r0, #4294967295
 800045e:	f080 8105 	bcs.w	800066c <__udivmoddi4+0x28c>
 8000462:	45a6      	cmp	lr, r4
 8000464:	f240 8102 	bls.w	800066c <__udivmoddi4+0x28c>
 8000468:	3802      	subs	r0, #2
 800046a:	443c      	add	r4, r7
 800046c:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000470:	eba4 040e 	sub.w	r4, r4, lr
 8000474:	2600      	movs	r6, #0
 8000476:	b11d      	cbz	r5, 8000480 <__udivmoddi4+0xa0>
 8000478:	40d4      	lsrs	r4, r2
 800047a:	2300      	movs	r3, #0
 800047c:	e9c5 4300 	strd	r4, r3, [r5]
 8000480:	4631      	mov	r1, r6
 8000482:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000486:	b902      	cbnz	r2, 800048a <__udivmoddi4+0xaa>
 8000488:	deff      	udf	#255	; 0xff
 800048a:	fab2 f282 	clz	r2, r2
 800048e:	2a00      	cmp	r2, #0
 8000490:	d150      	bne.n	8000534 <__udivmoddi4+0x154>
 8000492:	1bcb      	subs	r3, r1, r7
 8000494:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000498:	fa1f f887 	uxth.w	r8, r7
 800049c:	2601      	movs	r6, #1
 800049e:	fbb3 fcfe 	udiv	ip, r3, lr
 80004a2:	0c21      	lsrs	r1, r4, #16
 80004a4:	fb0e 331c 	mls	r3, lr, ip, r3
 80004a8:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80004ac:	fb08 f30c 	mul.w	r3, r8, ip
 80004b0:	428b      	cmp	r3, r1
 80004b2:	d907      	bls.n	80004c4 <__udivmoddi4+0xe4>
 80004b4:	1879      	adds	r1, r7, r1
 80004b6:	f10c 30ff 	add.w	r0, ip, #4294967295
 80004ba:	d202      	bcs.n	80004c2 <__udivmoddi4+0xe2>
 80004bc:	428b      	cmp	r3, r1
 80004be:	f200 80e9 	bhi.w	8000694 <__udivmoddi4+0x2b4>
 80004c2:	4684      	mov	ip, r0
 80004c4:	1ac9      	subs	r1, r1, r3
 80004c6:	b2a3      	uxth	r3, r4
 80004c8:	fbb1 f0fe 	udiv	r0, r1, lr
 80004cc:	fb0e 1110 	mls	r1, lr, r0, r1
 80004d0:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 80004d4:	fb08 f800 	mul.w	r8, r8, r0
 80004d8:	45a0      	cmp	r8, r4
 80004da:	d907      	bls.n	80004ec <__udivmoddi4+0x10c>
 80004dc:	193c      	adds	r4, r7, r4
 80004de:	f100 33ff 	add.w	r3, r0, #4294967295
 80004e2:	d202      	bcs.n	80004ea <__udivmoddi4+0x10a>
 80004e4:	45a0      	cmp	r8, r4
 80004e6:	f200 80d9 	bhi.w	800069c <__udivmoddi4+0x2bc>
 80004ea:	4618      	mov	r0, r3
 80004ec:	eba4 0408 	sub.w	r4, r4, r8
 80004f0:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 80004f4:	e7bf      	b.n	8000476 <__udivmoddi4+0x96>
 80004f6:	428b      	cmp	r3, r1
 80004f8:	d909      	bls.n	800050e <__udivmoddi4+0x12e>
 80004fa:	2d00      	cmp	r5, #0
 80004fc:	f000 80b1 	beq.w	8000662 <__udivmoddi4+0x282>
 8000500:	2600      	movs	r6, #0
 8000502:	e9c5 0100 	strd	r0, r1, [r5]
 8000506:	4630      	mov	r0, r6
 8000508:	4631      	mov	r1, r6
 800050a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800050e:	fab3 f683 	clz	r6, r3
 8000512:	2e00      	cmp	r6, #0
 8000514:	d14a      	bne.n	80005ac <__udivmoddi4+0x1cc>
 8000516:	428b      	cmp	r3, r1
 8000518:	d302      	bcc.n	8000520 <__udivmoddi4+0x140>
 800051a:	4282      	cmp	r2, r0
 800051c:	f200 80b8 	bhi.w	8000690 <__udivmoddi4+0x2b0>
 8000520:	1a84      	subs	r4, r0, r2
 8000522:	eb61 0103 	sbc.w	r1, r1, r3
 8000526:	2001      	movs	r0, #1
 8000528:	468c      	mov	ip, r1
 800052a:	2d00      	cmp	r5, #0
 800052c:	d0a8      	beq.n	8000480 <__udivmoddi4+0xa0>
 800052e:	e9c5 4c00 	strd	r4, ip, [r5]
 8000532:	e7a5      	b.n	8000480 <__udivmoddi4+0xa0>
 8000534:	f1c2 0320 	rsb	r3, r2, #32
 8000538:	fa20 f603 	lsr.w	r6, r0, r3
 800053c:	4097      	lsls	r7, r2
 800053e:	fa01 f002 	lsl.w	r0, r1, r2
 8000542:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000546:	40d9      	lsrs	r1, r3
 8000548:	4330      	orrs	r0, r6
 800054a:	0c03      	lsrs	r3, r0, #16
 800054c:	fbb1 f6fe 	udiv	r6, r1, lr
 8000550:	fa1f f887 	uxth.w	r8, r7
 8000554:	fb0e 1116 	mls	r1, lr, r6, r1
 8000558:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800055c:	fb06 f108 	mul.w	r1, r6, r8
 8000560:	4299      	cmp	r1, r3
 8000562:	fa04 f402 	lsl.w	r4, r4, r2
 8000566:	d909      	bls.n	800057c <__udivmoddi4+0x19c>
 8000568:	18fb      	adds	r3, r7, r3
 800056a:	f106 3cff 	add.w	ip, r6, #4294967295
 800056e:	f080 808d 	bcs.w	800068c <__udivmoddi4+0x2ac>
 8000572:	4299      	cmp	r1, r3
 8000574:	f240 808a 	bls.w	800068c <__udivmoddi4+0x2ac>
 8000578:	3e02      	subs	r6, #2
 800057a:	443b      	add	r3, r7
 800057c:	1a5b      	subs	r3, r3, r1
 800057e:	b281      	uxth	r1, r0
 8000580:	fbb3 f0fe 	udiv	r0, r3, lr
 8000584:	fb0e 3310 	mls	r3, lr, r0, r3
 8000588:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800058c:	fb00 f308 	mul.w	r3, r0, r8
 8000590:	428b      	cmp	r3, r1
 8000592:	d907      	bls.n	80005a4 <__udivmoddi4+0x1c4>
 8000594:	1879      	adds	r1, r7, r1
 8000596:	f100 3cff 	add.w	ip, r0, #4294967295
 800059a:	d273      	bcs.n	8000684 <__udivmoddi4+0x2a4>
 800059c:	428b      	cmp	r3, r1
 800059e:	d971      	bls.n	8000684 <__udivmoddi4+0x2a4>
 80005a0:	3802      	subs	r0, #2
 80005a2:	4439      	add	r1, r7
 80005a4:	1acb      	subs	r3, r1, r3
 80005a6:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 80005aa:	e778      	b.n	800049e <__udivmoddi4+0xbe>
 80005ac:	f1c6 0c20 	rsb	ip, r6, #32
 80005b0:	fa03 f406 	lsl.w	r4, r3, r6
 80005b4:	fa22 f30c 	lsr.w	r3, r2, ip
 80005b8:	431c      	orrs	r4, r3
 80005ba:	fa20 f70c 	lsr.w	r7, r0, ip
 80005be:	fa01 f306 	lsl.w	r3, r1, r6
 80005c2:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 80005c6:	fa21 f10c 	lsr.w	r1, r1, ip
 80005ca:	431f      	orrs	r7, r3
 80005cc:	0c3b      	lsrs	r3, r7, #16
 80005ce:	fbb1 f9fe 	udiv	r9, r1, lr
 80005d2:	fa1f f884 	uxth.w	r8, r4
 80005d6:	fb0e 1119 	mls	r1, lr, r9, r1
 80005da:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 80005de:	fb09 fa08 	mul.w	sl, r9, r8
 80005e2:	458a      	cmp	sl, r1
 80005e4:	fa02 f206 	lsl.w	r2, r2, r6
 80005e8:	fa00 f306 	lsl.w	r3, r0, r6
 80005ec:	d908      	bls.n	8000600 <__udivmoddi4+0x220>
 80005ee:	1861      	adds	r1, r4, r1
 80005f0:	f109 30ff 	add.w	r0, r9, #4294967295
 80005f4:	d248      	bcs.n	8000688 <__udivmoddi4+0x2a8>
 80005f6:	458a      	cmp	sl, r1
 80005f8:	d946      	bls.n	8000688 <__udivmoddi4+0x2a8>
 80005fa:	f1a9 0902 	sub.w	r9, r9, #2
 80005fe:	4421      	add	r1, r4
 8000600:	eba1 010a 	sub.w	r1, r1, sl
 8000604:	b2bf      	uxth	r7, r7
 8000606:	fbb1 f0fe 	udiv	r0, r1, lr
 800060a:	fb0e 1110 	mls	r1, lr, r0, r1
 800060e:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 8000612:	fb00 f808 	mul.w	r8, r0, r8
 8000616:	45b8      	cmp	r8, r7
 8000618:	d907      	bls.n	800062a <__udivmoddi4+0x24a>
 800061a:	19e7      	adds	r7, r4, r7
 800061c:	f100 31ff 	add.w	r1, r0, #4294967295
 8000620:	d22e      	bcs.n	8000680 <__udivmoddi4+0x2a0>
 8000622:	45b8      	cmp	r8, r7
 8000624:	d92c      	bls.n	8000680 <__udivmoddi4+0x2a0>
 8000626:	3802      	subs	r0, #2
 8000628:	4427      	add	r7, r4
 800062a:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 800062e:	eba7 0708 	sub.w	r7, r7, r8
 8000632:	fba0 8902 	umull	r8, r9, r0, r2
 8000636:	454f      	cmp	r7, r9
 8000638:	46c6      	mov	lr, r8
 800063a:	4649      	mov	r1, r9
 800063c:	d31a      	bcc.n	8000674 <__udivmoddi4+0x294>
 800063e:	d017      	beq.n	8000670 <__udivmoddi4+0x290>
 8000640:	b15d      	cbz	r5, 800065a <__udivmoddi4+0x27a>
 8000642:	ebb3 020e 	subs.w	r2, r3, lr
 8000646:	eb67 0701 	sbc.w	r7, r7, r1
 800064a:	fa07 fc0c 	lsl.w	ip, r7, ip
 800064e:	40f2      	lsrs	r2, r6
 8000650:	ea4c 0202 	orr.w	r2, ip, r2
 8000654:	40f7      	lsrs	r7, r6
 8000656:	e9c5 2700 	strd	r2, r7, [r5]
 800065a:	2600      	movs	r6, #0
 800065c:	4631      	mov	r1, r6
 800065e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000662:	462e      	mov	r6, r5
 8000664:	4628      	mov	r0, r5
 8000666:	e70b      	b.n	8000480 <__udivmoddi4+0xa0>
 8000668:	4606      	mov	r6, r0
 800066a:	e6e9      	b.n	8000440 <__udivmoddi4+0x60>
 800066c:	4618      	mov	r0, r3
 800066e:	e6fd      	b.n	800046c <__udivmoddi4+0x8c>
 8000670:	4543      	cmp	r3, r8
 8000672:	d2e5      	bcs.n	8000640 <__udivmoddi4+0x260>
 8000674:	ebb8 0e02 	subs.w	lr, r8, r2
 8000678:	eb69 0104 	sbc.w	r1, r9, r4
 800067c:	3801      	subs	r0, #1
 800067e:	e7df      	b.n	8000640 <__udivmoddi4+0x260>
 8000680:	4608      	mov	r0, r1
 8000682:	e7d2      	b.n	800062a <__udivmoddi4+0x24a>
 8000684:	4660      	mov	r0, ip
 8000686:	e78d      	b.n	80005a4 <__udivmoddi4+0x1c4>
 8000688:	4681      	mov	r9, r0
 800068a:	e7b9      	b.n	8000600 <__udivmoddi4+0x220>
 800068c:	4666      	mov	r6, ip
 800068e:	e775      	b.n	800057c <__udivmoddi4+0x19c>
 8000690:	4630      	mov	r0, r6
 8000692:	e74a      	b.n	800052a <__udivmoddi4+0x14a>
 8000694:	f1ac 0c02 	sub.w	ip, ip, #2
 8000698:	4439      	add	r1, r7
 800069a:	e713      	b.n	80004c4 <__udivmoddi4+0xe4>
 800069c:	3802      	subs	r0, #2
 800069e:	443c      	add	r4, r7
 80006a0:	e724      	b.n	80004ec <__udivmoddi4+0x10c>
 80006a2:	bf00      	nop

080006a4 <__aeabi_idiv0>:
 80006a4:	4770      	bx	lr
 80006a6:	bf00      	nop

080006a8 <_write>:
    #endif
  #endif

  #ifdef True_STD
  int _write(int fd, char *str, int len)
  {
 80006a8:	b580      	push	{r7, lr}
 80006aa:	b086      	sub	sp, #24
 80006ac:	af00      	add	r7, sp, #0
 80006ae:	60f8      	str	r0, [r7, #12]
 80006b0:	60b9      	str	r1, [r7, #8]
 80006b2:	607a      	str	r2, [r7, #4]
    for(int i=0; i<len; i++)
 80006b4:	2300      	movs	r3, #0
 80006b6:	617b      	str	r3, [r7, #20]
 80006b8:	e00b      	b.n	80006d2 <_write+0x2a>
    {
      HAL_UART_Transmit(&huart3, (uint8_t *)&str[i], 1, 0xFFFF);
 80006ba:	697b      	ldr	r3, [r7, #20]
 80006bc:	68ba      	ldr	r2, [r7, #8]
 80006be:	18d1      	adds	r1, r2, r3
 80006c0:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80006c4:	2201      	movs	r2, #1
 80006c6:	4807      	ldr	r0, [pc, #28]	; (80006e4 <_write+0x3c>)
 80006c8:	f005 f935 	bl	8005936 <HAL_UART_Transmit>
    for(int i=0; i<len; i++)
 80006cc:	697b      	ldr	r3, [r7, #20]
 80006ce:	3301      	adds	r3, #1
 80006d0:	617b      	str	r3, [r7, #20]
 80006d2:	697a      	ldr	r2, [r7, #20]
 80006d4:	687b      	ldr	r3, [r7, #4]
 80006d6:	429a      	cmp	r2, r3
 80006d8:	dbef      	blt.n	80006ba <_write+0x12>
    }
    return len;
 80006da:	687b      	ldr	r3, [r7, #4]
  }
 80006dc:	4618      	mov	r0, r3
 80006de:	3718      	adds	r7, #24
 80006e0:	46bd      	mov	sp, r7
 80006e2:	bd80      	pop	{r7, pc}
 80006e4:	20000a0c 	.word	0x20000a0c

080006e8 <W6100BusWriteByte>:
	  {
		URX_BUF_Flag = 1;
	  }
 }
void W6100BusWriteByte(uint32_t addr, iodata_t data)
{
 80006e8:	b580      	push	{r7, lr}
 80006ea:	b082      	sub	sp, #8
 80006ec:	af00      	add	r7, sp, #0
 80006ee:	6078      	str	r0, [r7, #4]
 80006f0:	460b      	mov	r3, r1
 80006f2:	70fb      	strb	r3, [r7, #3]
	#if 0	//teddy 210422
	(*(volatile uint8_t*)(addr)) = data;
	#endif
	if(HAL_SRAM_Write_8b(&hsram1, &addr, &data, 1) != HAL_OK)
 80006f4:	1cfa      	adds	r2, r7, #3
 80006f6:	1d39      	adds	r1, r7, #4
 80006f8:	2301      	movs	r3, #1
 80006fa:	4806      	ldr	r0, [pc, #24]	; (8000714 <W6100BusWriteByte+0x2c>)
 80006fc:	f005 f887 	bl	800580e <HAL_SRAM_Write_8b>
 8000700:	4603      	mov	r3, r0
 8000702:	2b00      	cmp	r3, #0
 8000704:	d002      	beq.n	800070c <W6100BusWriteByte+0x24>
		printf("BusWritError \r\n");
 8000706:	4804      	ldr	r0, [pc, #16]	; (8000718 <W6100BusWriteByte+0x30>)
 8000708:	f007 fb8e 	bl	8007e28 <puts>
}
 800070c:	bf00      	nop
 800070e:	3708      	adds	r7, #8
 8000710:	46bd      	mov	sp, r7
 8000712:	bd80      	pop	{r7, pc}
 8000714:	20000e9c 	.word	0x20000e9c
 8000718:	08008ccc 	.word	0x08008ccc

0800071c <W6100BusReadByte>:

iodata_t W6100BusReadByte(uint32_t addr)
{
 800071c:	b580      	push	{r7, lr}
 800071e:	b084      	sub	sp, #16
 8000720:	af00      	add	r7, sp, #0
 8000722:	6078      	str	r0, [r7, #4]
	#if 0	//teddy 210422
	return (*((volatile uint8_t*)(addr)));
	#endif
	iodata_t result = 0;
 8000724:	2300      	movs	r3, #0
 8000726:	73fb      	strb	r3, [r7, #15]
	if(HAL_SRAM_Read_8b(&hsram1, &addr, &result, 1) != HAL_OK)
 8000728:	f107 020f 	add.w	r2, r7, #15
 800072c:	1d39      	adds	r1, r7, #4
 800072e:	2301      	movs	r3, #1
 8000730:	4806      	ldr	r0, [pc, #24]	; (800074c <W6100BusReadByte+0x30>)
 8000732:	f005 f823 	bl	800577c <HAL_SRAM_Read_8b>
 8000736:	4603      	mov	r3, r0
 8000738:	2b00      	cmp	r3, #0
 800073a:	d002      	beq.n	8000742 <W6100BusReadByte+0x26>
		printf("BussReadError \r\n");
 800073c:	4804      	ldr	r0, [pc, #16]	; (8000750 <W6100BusReadByte+0x34>)
 800073e:	f007 fb73 	bl	8007e28 <puts>
	return result;
 8000742:	7bfb      	ldrb	r3, [r7, #15]
}
 8000744:	4618      	mov	r0, r3
 8000746:	3710      	adds	r7, #16
 8000748:	46bd      	mov	sp, r7
 800074a:	bd80      	pop	{r7, pc}
 800074c:	20000e9c 	.word	0x20000e9c
 8000750:	08008cdc 	.word	0x08008cdc

08000754 <W6100Initialze>:

	

}
void W6100Initialze(void)
{
 8000754:	b590      	push	{r4, r7, lr}
 8000756:	b087      	sub	sp, #28
 8000758:	af00      	add	r7, sp, #0
#else
	/* Indirect bus method callback registration */
	#if defined BUS_DMA
		reg_wizchip_bus_cbfunc(W6100BusReadByte, W6100BusWriteByte, W6100BusReadBurst, W6100BusWriteBurst);
	#else
		reg_wizchip_bus_cbfunc(W6100BusReadByte, W6100BusWriteByte, 0, 0);
 800075a:	2300      	movs	r3, #0
 800075c:	2200      	movs	r2, #0
 800075e:	491c      	ldr	r1, [pc, #112]	; (80007d0 <W6100Initialze+0x7c>)
 8000760:	481c      	ldr	r0, [pc, #112]	; (80007d4 <W6100Initialze+0x80>)
 8000762:	f007 f833 	bl	80077cc <reg_wizchip_bus_cbfunc>
	#endif
#endif
		uint8_t temp;
		unsigned char W6100_AdrSet[2][8] = {{2, 2, 2, 2, 2, 2, 2, 2}, {2, 2, 2, 2, 2, 2, 2, 2}};
 8000766:	4b1c      	ldr	r3, [pc, #112]	; (80007d8 <W6100Initialze+0x84>)
 8000768:	1d3c      	adds	r4, r7, #4
 800076a:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800076c:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
			{
				printf("Unknown PHY link status.\r\n");
			}
		} while (temp == PHY_LINK_OFF);
	 	#endif
		uint16_t RegTemp = 0;
 8000770:	2300      	movs	r3, #0
 8000772:	82fb      	strh	r3, [r7, #22]
		RegTemp = getCIDR();
 8000774:	f04f 40c0 	mov.w	r0, #1610612736	; 0x60000000
 8000778:	f006 fee4 	bl	8007544 <WIZCHIP_READ>
 800077c:	4603      	mov	r3, r0
 800077e:	b29b      	uxth	r3, r3
 8000780:	021b      	lsls	r3, r3, #8
 8000782:	b29c      	uxth	r4, r3
 8000784:	4815      	ldr	r0, [pc, #84]	; (80007dc <W6100Initialze+0x88>)
 8000786:	f006 fedd 	bl	8007544 <WIZCHIP_READ>
 800078a:	4603      	mov	r3, r0
 800078c:	b29b      	uxth	r3, r3
 800078e:	4423      	add	r3, r4
 8000790:	82fb      	strh	r3, [r7, #22]
		printf("CIDR = %04x \r\n", RegTemp);
 8000792:	8afb      	ldrh	r3, [r7, #22]
 8000794:	4619      	mov	r1, r3
 8000796:	4812      	ldr	r0, [pc, #72]	; (80007e0 <W6100Initialze+0x8c>)
 8000798:	f007 fac0 	bl	8007d1c <iprintf>
		RegTemp = getVER();
 800079c:	4811      	ldr	r0, [pc, #68]	; (80007e4 <W6100Initialze+0x90>)
 800079e:	f006 fed1 	bl	8007544 <WIZCHIP_READ>
 80007a2:	4603      	mov	r3, r0
 80007a4:	b29b      	uxth	r3, r3
 80007a6:	021b      	lsls	r3, r3, #8
 80007a8:	b29c      	uxth	r4, r3
 80007aa:	480f      	ldr	r0, [pc, #60]	; (80007e8 <W6100Initialze+0x94>)
 80007ac:	f006 feca 	bl	8007544 <WIZCHIP_READ>
 80007b0:	4603      	mov	r3, r0
 80007b2:	b29b      	uxth	r3, r3
 80007b4:	4423      	add	r3, r4
 80007b6:	82fb      	strh	r3, [r7, #22]
		printf("VER = %04x \r\n", RegTemp);
 80007b8:	8afb      	ldrh	r3, [r7, #22]
 80007ba:	4619      	mov	r1, r3
 80007bc:	480b      	ldr	r0, [pc, #44]	; (80007ec <W6100Initialze+0x98>)
 80007be:	f007 faad 	bl	8007d1c <iprintf>
		printf("PHY OK.\r\n");
 80007c2:	480b      	ldr	r0, [pc, #44]	; (80007f0 <W6100Initialze+0x9c>)
 80007c4:	f007 fb30 	bl	8007e28 <puts>
	
	
}
 80007c8:	bf00      	nop
 80007ca:	371c      	adds	r7, #28
 80007cc:	46bd      	mov	sp, r7
 80007ce:	bd90      	pop	{r4, r7, pc}
 80007d0:	080006e9 	.word	0x080006e9
 80007d4:	0800071d 	.word	0x0800071d
 80007d8:	08008d18 	.word	0x08008d18
 80007dc:	60000100 	.word	0x60000100
 80007e0:	08008cec 	.word	0x08008cec
 80007e4:	60000200 	.word	0x60000200
 80007e8:	60000300 	.word	0x60000300
 80007ec:	08008cfc 	.word	0x08008cfc
 80007f0:	08008d0c 	.word	0x08008d0c

080007f4 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80007f4:	b580      	push	{r7, lr}
 80007f6:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80007f8:	f000 fef8 	bl	80015ec <HAL_Init>
  /* USER CODE BEGIN Init */
  
  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80007fc:	f000 f82a 	bl	8000854 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000800:	f000 f9de 	bl	8000bc0 <MX_GPIO_Init>
  MX_ETH_Init();
 8000804:	f000 f8d2 	bl	80009ac <MX_ETH_Init>
  MX_USART3_UART_Init();
 8000808:	f000 f922 	bl	8000a50 <MX_USART3_UART_Init>
  MX_USB_OTG_HS_USB_Init();
 800080c:	f000 f96c 	bl	8000ae8 <MX_USB_OTG_HS_USB_Init>
  MX_FMC_Init();
 8000810:	f000 f972 	bl	8000af8 <MX_FMC_Init>
  MX_DMA2D_Init();
 8000814:	f000 f890 	bl	8000938 <MX_DMA2D_Init>
  /* USER CODE BEGIN 2 */
  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_11|GPIO_PIN_3, GPIO_PIN_SET);
 8000818:	2201      	movs	r2, #1
 800081a:	f640 0108 	movw	r1, #2056	; 0x808
 800081e:	4809      	ldr	r0, [pc, #36]	; (8000844 <main+0x50>)
 8000820:	f002 fcd2 	bl	80031c8 <HAL_GPIO_WritePin>
printf("Hello Start!!\r\n");
 8000824:	4808      	ldr	r0, [pc, #32]	; (8000848 <main+0x54>)
 8000826:	f007 faff 	bl	8007e28 <puts>
  W6100Initialze();
 800082a:	f7ff ff93 	bl	8000754 <W6100Initialze>
  ctlnetwork(CN_SET_NETINFO,&gWIZNETINFO);
 800082e:	4907      	ldr	r1, [pc, #28]	; (800084c <main+0x58>)
 8000830:	2000      	movs	r0, #0
 8000832:	f007 f811 	bl	8007858 <ctlnetwork>
  printf("Register value after W6100 initialize!\r\n");
 8000836:	4806      	ldr	r0, [pc, #24]	; (8000850 <main+0x5c>)
 8000838:	f007 faf6 	bl	8007e28 <puts>
  print_network_information();
 800083c:	f000 facc 	bl	8000dd8 <print_network_information>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000840:	e7fe      	b.n	8000840 <main+0x4c>
 8000842:	bf00      	nop
 8000844:	58020c00 	.word	0x58020c00
 8000848:	08008d28 	.word	0x08008d28
 800084c:	20000000 	.word	0x20000000
 8000850:	08008d38 	.word	0x08008d38

08000854 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000854:	b580      	push	{r7, lr}
 8000856:	b09c      	sub	sp, #112	; 0x70
 8000858:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800085a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800085e:	224c      	movs	r2, #76	; 0x4c
 8000860:	2100      	movs	r1, #0
 8000862:	4618      	mov	r0, r3
 8000864:	f007 fa52 	bl	8007d0c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000868:	1d3b      	adds	r3, r7, #4
 800086a:	2220      	movs	r2, #32
 800086c:	2100      	movs	r1, #0
 800086e:	4618      	mov	r0, r3
 8000870:	f007 fa4c 	bl	8007d0c <memset>

  /** Supply configuration update enable
  */
  HAL_PWREx_ConfigSupply(PWR_LDO_SUPPLY);
 8000874:	2002      	movs	r0, #2
 8000876:	f002 fcc1 	bl	80031fc <HAL_PWREx_ConfigSupply>
  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE2);
 800087a:	2300      	movs	r3, #0
 800087c:	603b      	str	r3, [r7, #0]
 800087e:	4b2d      	ldr	r3, [pc, #180]	; (8000934 <SystemClock_Config+0xe0>)
 8000880:	699b      	ldr	r3, [r3, #24]
 8000882:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8000886:	4a2b      	ldr	r2, [pc, #172]	; (8000934 <SystemClock_Config+0xe0>)
 8000888:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800088c:	6193      	str	r3, [r2, #24]
 800088e:	4b29      	ldr	r3, [pc, #164]	; (8000934 <SystemClock_Config+0xe0>)
 8000890:	699b      	ldr	r3, [r3, #24]
 8000892:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8000896:	603b      	str	r3, [r7, #0]
 8000898:	683b      	ldr	r3, [r7, #0]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 800089a:	bf00      	nop
 800089c:	4b25      	ldr	r3, [pc, #148]	; (8000934 <SystemClock_Config+0xe0>)
 800089e:	699b      	ldr	r3, [r3, #24]
 80008a0:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80008a4:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80008a8:	d1f8      	bne.n	800089c <SystemClock_Config+0x48>
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI48|RCC_OSCILLATORTYPE_HSE;
 80008aa:	2321      	movs	r3, #33	; 0x21
 80008ac:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 80008ae:	f44f 23a0 	mov.w	r3, #327680	; 0x50000
 80008b2:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSI48State = RCC_HSI48_ON;
 80008b4:	2301      	movs	r3, #1
 80008b6:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80008b8:	2302      	movs	r3, #2
 80008ba:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80008bc:	2302      	movs	r3, #2
 80008be:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLM = 1;
 80008c0:	2301      	movs	r3, #1
 80008c2:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLN = 24;
 80008c4:	2318      	movs	r3, #24
 80008c6:	657b      	str	r3, [r7, #84]	; 0x54
  RCC_OscInitStruct.PLL.PLLP = 1;
 80008c8:	2301      	movs	r3, #1
 80008ca:	65bb      	str	r3, [r7, #88]	; 0x58
  RCC_OscInitStruct.PLL.PLLQ = 4;
 80008cc:	2304      	movs	r3, #4
 80008ce:	65fb      	str	r3, [r7, #92]	; 0x5c
  RCC_OscInitStruct.PLL.PLLR = 2;
 80008d0:	2302      	movs	r3, #2
 80008d2:	663b      	str	r3, [r7, #96]	; 0x60
  RCC_OscInitStruct.PLL.PLLRGE = RCC_PLL1VCIRANGE_3;
 80008d4:	230c      	movs	r3, #12
 80008d6:	667b      	str	r3, [r7, #100]	; 0x64
  RCC_OscInitStruct.PLL.PLLVCOSEL = RCC_PLL1VCOWIDE;
 80008d8:	2300      	movs	r3, #0
 80008da:	66bb      	str	r3, [r7, #104]	; 0x68
  RCC_OscInitStruct.PLL.PLLFRACN = 0;
 80008dc:	2300      	movs	r3, #0
 80008de:	66fb      	str	r3, [r7, #108]	; 0x6c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80008e0:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80008e4:	4618      	mov	r0, r3
 80008e6:	f002 fcc3 	bl	8003270 <HAL_RCC_OscConfig>
 80008ea:	4603      	mov	r3, r0
 80008ec:	2b00      	cmp	r3, #0
 80008ee:	d001      	beq.n	80008f4 <SystemClock_Config+0xa0>
  {
    Error_Handler();
 80008f0:	f000 faf4 	bl	8000edc <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80008f4:	233f      	movs	r3, #63	; 0x3f
 80008f6:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
                              |RCC_CLOCKTYPE_D3PCLK1|RCC_CLOCKTYPE_D1PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80008f8:	2303      	movs	r3, #3
 80008fa:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV1;
 80008fc:	2300      	movs	r3, #0
 80008fe:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV2;
 8000900:	2308      	movs	r3, #8
 8000902:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB3CLKDivider = RCC_APB3_DIV2;
 8000904:	2340      	movs	r3, #64	; 0x40
 8000906:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV2;
 8000908:	2340      	movs	r3, #64	; 0x40
 800090a:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_APB2_DIV2;
 800090c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000910:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB4CLKDivider = RCC_APB4_DIV2;
 8000912:	2340      	movs	r3, #64	; 0x40
 8000914:	623b      	str	r3, [r7, #32]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 8000916:	1d3b      	adds	r3, r7, #4
 8000918:	2101      	movs	r1, #1
 800091a:	4618      	mov	r0, r3
 800091c:	f003 f836 	bl	800398c <HAL_RCC_ClockConfig>
 8000920:	4603      	mov	r3, r0
 8000922:	2b00      	cmp	r3, #0
 8000924:	d001      	beq.n	800092a <SystemClock_Config+0xd6>
  {
    Error_Handler();
 8000926:	f000 fad9 	bl	8000edc <Error_Handler>
  }
}
 800092a:	bf00      	nop
 800092c:	3770      	adds	r7, #112	; 0x70
 800092e:	46bd      	mov	sp, r7
 8000930:	bd80      	pop	{r7, pc}
 8000932:	bf00      	nop
 8000934:	58024800 	.word	0x58024800

08000938 <MX_DMA2D_Init>:
  * @brief DMA2D Initialization Function
  * @param None
  * @retval None
  */
static void MX_DMA2D_Init(void)
{
 8000938:	b580      	push	{r7, lr}
 800093a:	af00      	add	r7, sp, #0
  /* USER CODE END DMA2D_Init 0 */

  /* USER CODE BEGIN DMA2D_Init 1 */

  /* USER CODE END DMA2D_Init 1 */
  hdma2d.Instance = DMA2D;
 800093c:	4b19      	ldr	r3, [pc, #100]	; (80009a4 <MX_DMA2D_Init+0x6c>)
 800093e:	4a1a      	ldr	r2, [pc, #104]	; (80009a8 <MX_DMA2D_Init+0x70>)
 8000940:	601a      	str	r2, [r3, #0]
  hdma2d.Init.Mode = DMA2D_M2M;
 8000942:	4b18      	ldr	r3, [pc, #96]	; (80009a4 <MX_DMA2D_Init+0x6c>)
 8000944:	2200      	movs	r2, #0
 8000946:	605a      	str	r2, [r3, #4]
  hdma2d.Init.ColorMode = DMA2D_OUTPUT_ARGB8888;
 8000948:	4b16      	ldr	r3, [pc, #88]	; (80009a4 <MX_DMA2D_Init+0x6c>)
 800094a:	2200      	movs	r2, #0
 800094c:	609a      	str	r2, [r3, #8]
  hdma2d.Init.OutputOffset = 0;
 800094e:	4b15      	ldr	r3, [pc, #84]	; (80009a4 <MX_DMA2D_Init+0x6c>)
 8000950:	2200      	movs	r2, #0
 8000952:	60da      	str	r2, [r3, #12]
  hdma2d.LayerCfg[1].InputOffset = 0;
 8000954:	4b13      	ldr	r3, [pc, #76]	; (80009a4 <MX_DMA2D_Init+0x6c>)
 8000956:	2200      	movs	r2, #0
 8000958:	645a      	str	r2, [r3, #68]	; 0x44
  hdma2d.LayerCfg[1].InputColorMode = DMA2D_INPUT_ARGB8888;
 800095a:	4b12      	ldr	r3, [pc, #72]	; (80009a4 <MX_DMA2D_Init+0x6c>)
 800095c:	2200      	movs	r2, #0
 800095e:	649a      	str	r2, [r3, #72]	; 0x48
  hdma2d.LayerCfg[1].AlphaMode = DMA2D_NO_MODIF_ALPHA;
 8000960:	4b10      	ldr	r3, [pc, #64]	; (80009a4 <MX_DMA2D_Init+0x6c>)
 8000962:	2200      	movs	r2, #0
 8000964:	64da      	str	r2, [r3, #76]	; 0x4c
  hdma2d.LayerCfg[1].InputAlpha = 0;
 8000966:	4b0f      	ldr	r3, [pc, #60]	; (80009a4 <MX_DMA2D_Init+0x6c>)
 8000968:	2200      	movs	r2, #0
 800096a:	651a      	str	r2, [r3, #80]	; 0x50
  hdma2d.LayerCfg[1].AlphaInverted = DMA2D_REGULAR_ALPHA;
 800096c:	4b0d      	ldr	r3, [pc, #52]	; (80009a4 <MX_DMA2D_Init+0x6c>)
 800096e:	2200      	movs	r2, #0
 8000970:	655a      	str	r2, [r3, #84]	; 0x54
  hdma2d.LayerCfg[1].RedBlueSwap = DMA2D_RB_REGULAR;
 8000972:	4b0c      	ldr	r3, [pc, #48]	; (80009a4 <MX_DMA2D_Init+0x6c>)
 8000974:	2200      	movs	r2, #0
 8000976:	659a      	str	r2, [r3, #88]	; 0x58
  hdma2d.LayerCfg[1].ChromaSubSampling = DMA2D_NO_CSS;
 8000978:	4b0a      	ldr	r3, [pc, #40]	; (80009a4 <MX_DMA2D_Init+0x6c>)
 800097a:	2200      	movs	r2, #0
 800097c:	65da      	str	r2, [r3, #92]	; 0x5c
  if (HAL_DMA2D_Init(&hdma2d) != HAL_OK)
 800097e:	4809      	ldr	r0, [pc, #36]	; (80009a4 <MX_DMA2D_Init+0x6c>)
 8000980:	f001 fd4c 	bl	800241c <HAL_DMA2D_Init>
 8000984:	4603      	mov	r3, r0
 8000986:	2b00      	cmp	r3, #0
 8000988:	d001      	beq.n	800098e <MX_DMA2D_Init+0x56>
  {
    Error_Handler();
 800098a:	f000 faa7 	bl	8000edc <Error_Handler>
  }
  if (HAL_DMA2D_ConfigLayer(&hdma2d, 1) != HAL_OK)
 800098e:	2101      	movs	r1, #1
 8000990:	4804      	ldr	r0, [pc, #16]	; (80009a4 <MX_DMA2D_Init+0x6c>)
 8000992:	f001 fda7 	bl	80024e4 <HAL_DMA2D_ConfigLayer>
 8000996:	4603      	mov	r3, r0
 8000998:	2b00      	cmp	r3, #0
 800099a:	d001      	beq.n	80009a0 <MX_DMA2D_Init+0x68>
  {
    Error_Handler();
 800099c:	f000 fa9e 	bl	8000edc <Error_Handler>
  }
  /* USER CODE BEGIN DMA2D_Init 2 */

  /* USER CODE END DMA2D_Init 2 */

}
 80009a0:	bf00      	nop
 80009a2:	bd80      	pop	{r7, pc}
 80009a4:	200018e8 	.word	0x200018e8
 80009a8:	52001000 	.word	0x52001000

080009ac <MX_ETH_Init>:
  * @brief ETH Initialization Function
  * @param None
  * @retval None
  */
static void MX_ETH_Init(void)
{
 80009ac:	b580      	push	{r7, lr}
 80009ae:	af00      	add	r7, sp, #0
  /* USER CODE END ETH_Init 0 */

  /* USER CODE BEGIN ETH_Init 1 */

  /* USER CODE END ETH_Init 1 */
  heth.Instance = ETH;
 80009b0:	4b22      	ldr	r3, [pc, #136]	; (8000a3c <MX_ETH_Init+0x90>)
 80009b2:	4a23      	ldr	r2, [pc, #140]	; (8000a40 <MX_ETH_Init+0x94>)
 80009b4:	601a      	str	r2, [r3, #0]
  heth.Init.MACAddr[0] =   0x00;
 80009b6:	4b21      	ldr	r3, [pc, #132]	; (8000a3c <MX_ETH_Init+0x90>)
 80009b8:	685b      	ldr	r3, [r3, #4]
 80009ba:	2200      	movs	r2, #0
 80009bc:	701a      	strb	r2, [r3, #0]
  heth.Init.MACAddr[1] =   0x80;
 80009be:	4b1f      	ldr	r3, [pc, #124]	; (8000a3c <MX_ETH_Init+0x90>)
 80009c0:	685b      	ldr	r3, [r3, #4]
 80009c2:	3301      	adds	r3, #1
 80009c4:	2280      	movs	r2, #128	; 0x80
 80009c6:	701a      	strb	r2, [r3, #0]
  heth.Init.MACAddr[2] =   0xE1;
 80009c8:	4b1c      	ldr	r3, [pc, #112]	; (8000a3c <MX_ETH_Init+0x90>)
 80009ca:	685b      	ldr	r3, [r3, #4]
 80009cc:	3302      	adds	r3, #2
 80009ce:	22e1      	movs	r2, #225	; 0xe1
 80009d0:	701a      	strb	r2, [r3, #0]
  heth.Init.MACAddr[3] =   0x00;
 80009d2:	4b1a      	ldr	r3, [pc, #104]	; (8000a3c <MX_ETH_Init+0x90>)
 80009d4:	685b      	ldr	r3, [r3, #4]
 80009d6:	3303      	adds	r3, #3
 80009d8:	2200      	movs	r2, #0
 80009da:	701a      	strb	r2, [r3, #0]
  heth.Init.MACAddr[4] =   0x00;
 80009dc:	4b17      	ldr	r3, [pc, #92]	; (8000a3c <MX_ETH_Init+0x90>)
 80009de:	685b      	ldr	r3, [r3, #4]
 80009e0:	3304      	adds	r3, #4
 80009e2:	2200      	movs	r2, #0
 80009e4:	701a      	strb	r2, [r3, #0]
  heth.Init.MACAddr[5] =   0x00;
 80009e6:	4b15      	ldr	r3, [pc, #84]	; (8000a3c <MX_ETH_Init+0x90>)
 80009e8:	685b      	ldr	r3, [r3, #4]
 80009ea:	3305      	adds	r3, #5
 80009ec:	2200      	movs	r2, #0
 80009ee:	701a      	strb	r2, [r3, #0]
  heth.Init.MediaInterface = HAL_ETH_RMII_MODE;
 80009f0:	4b12      	ldr	r3, [pc, #72]	; (8000a3c <MX_ETH_Init+0x90>)
 80009f2:	2201      	movs	r2, #1
 80009f4:	721a      	strb	r2, [r3, #8]
  heth.Init.TxDesc = DMATxDscrTab;
 80009f6:	4b11      	ldr	r3, [pc, #68]	; (8000a3c <MX_ETH_Init+0x90>)
 80009f8:	4a12      	ldr	r2, [pc, #72]	; (8000a44 <MX_ETH_Init+0x98>)
 80009fa:	60da      	str	r2, [r3, #12]
  heth.Init.RxDesc = DMARxDscrTab;
 80009fc:	4b0f      	ldr	r3, [pc, #60]	; (8000a3c <MX_ETH_Init+0x90>)
 80009fe:	4a12      	ldr	r2, [pc, #72]	; (8000a48 <MX_ETH_Init+0x9c>)
 8000a00:	611a      	str	r2, [r3, #16]
  heth.Init.RxBuffLen = 1524;
 8000a02:	4b0e      	ldr	r3, [pc, #56]	; (8000a3c <MX_ETH_Init+0x90>)
 8000a04:	f240 52f4 	movw	r2, #1524	; 0x5f4
 8000a08:	615a      	str	r2, [r3, #20]

  /* USER CODE BEGIN MACADDRESS */

  /* USER CODE END MACADDRESS */

  if (HAL_ETH_Init(&heth) != HAL_OK)
 8000a0a:	480c      	ldr	r0, [pc, #48]	; (8000a3c <MX_ETH_Init+0x90>)
 8000a0c:	f001 fe1e 	bl	800264c <HAL_ETH_Init>
 8000a10:	4603      	mov	r3, r0
 8000a12:	2b00      	cmp	r3, #0
 8000a14:	d001      	beq.n	8000a1a <MX_ETH_Init+0x6e>
  {
    Error_Handler();
 8000a16:	f000 fa61 	bl	8000edc <Error_Handler>
  }

  memset(&TxConfig, 0 , sizeof(ETH_TxPacketConfig));
 8000a1a:	2234      	movs	r2, #52	; 0x34
 8000a1c:	2100      	movs	r1, #0
 8000a1e:	480b      	ldr	r0, [pc, #44]	; (8000a4c <MX_ETH_Init+0xa0>)
 8000a20:	f007 f974 	bl	8007d0c <memset>
  TxConfig.Attributes = ETH_TX_PACKETS_FEATURES_CSUM | ETH_TX_PACKETS_FEATURES_CRCPAD;
 8000a24:	4b09      	ldr	r3, [pc, #36]	; (8000a4c <MX_ETH_Init+0xa0>)
 8000a26:	2221      	movs	r2, #33	; 0x21
 8000a28:	601a      	str	r2, [r3, #0]
  TxConfig.ChecksumCtrl = ETH_CHECKSUM_IPHDR_PAYLOAD_INSERT_PHDR_CALC;
 8000a2a:	4b08      	ldr	r3, [pc, #32]	; (8000a4c <MX_ETH_Init+0xa0>)
 8000a2c:	f44f 3240 	mov.w	r2, #196608	; 0x30000
 8000a30:	615a      	str	r2, [r3, #20]
  TxConfig.CRCPadCtrl = ETH_CRC_PAD_INSERT;
 8000a32:	4b06      	ldr	r3, [pc, #24]	; (8000a4c <MX_ETH_Init+0xa0>)
 8000a34:	2200      	movs	r2, #0
 8000a36:	611a      	str	r2, [r3, #16]
  /* USER CODE BEGIN ETH_Init 2 */

  /* USER CODE END ETH_Init 2 */

}
 8000a38:	bf00      	nop
 8000a3a:	bd80      	pop	{r7, pc}
 8000a3c:	20002150 	.word	0x20002150
 8000a40:	40028000 	.word	0x40028000
 8000a44:	20000164 	.word	0x20000164
 8000a48:	20000104 	.word	0x20000104
 8000a4c:	200021d8 	.word	0x200021d8

08000a50 <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 8000a50:	b580      	push	{r7, lr}
 8000a52:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8000a54:	4b22      	ldr	r3, [pc, #136]	; (8000ae0 <MX_USART3_UART_Init+0x90>)
 8000a56:	4a23      	ldr	r2, [pc, #140]	; (8000ae4 <MX_USART3_UART_Init+0x94>)
 8000a58:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 8000a5a:	4b21      	ldr	r3, [pc, #132]	; (8000ae0 <MX_USART3_UART_Init+0x90>)
 8000a5c:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000a60:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8000a62:	4b1f      	ldr	r3, [pc, #124]	; (8000ae0 <MX_USART3_UART_Init+0x90>)
 8000a64:	2200      	movs	r2, #0
 8000a66:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8000a68:	4b1d      	ldr	r3, [pc, #116]	; (8000ae0 <MX_USART3_UART_Init+0x90>)
 8000a6a:	2200      	movs	r2, #0
 8000a6c:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8000a6e:	4b1c      	ldr	r3, [pc, #112]	; (8000ae0 <MX_USART3_UART_Init+0x90>)
 8000a70:	2200      	movs	r2, #0
 8000a72:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8000a74:	4b1a      	ldr	r3, [pc, #104]	; (8000ae0 <MX_USART3_UART_Init+0x90>)
 8000a76:	220c      	movs	r2, #12
 8000a78:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000a7a:	4b19      	ldr	r3, [pc, #100]	; (8000ae0 <MX_USART3_UART_Init+0x90>)
 8000a7c:	2200      	movs	r2, #0
 8000a7e:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8000a80:	4b17      	ldr	r3, [pc, #92]	; (8000ae0 <MX_USART3_UART_Init+0x90>)
 8000a82:	2200      	movs	r2, #0
 8000a84:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000a86:	4b16      	ldr	r3, [pc, #88]	; (8000ae0 <MX_USART3_UART_Init+0x90>)
 8000a88:	2200      	movs	r2, #0
 8000a8a:	621a      	str	r2, [r3, #32]
  huart3.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8000a8c:	4b14      	ldr	r3, [pc, #80]	; (8000ae0 <MX_USART3_UART_Init+0x90>)
 8000a8e:	2200      	movs	r2, #0
 8000a90:	625a      	str	r2, [r3, #36]	; 0x24
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000a92:	4b13      	ldr	r3, [pc, #76]	; (8000ae0 <MX_USART3_UART_Init+0x90>)
 8000a94:	2200      	movs	r2, #0
 8000a96:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8000a98:	4811      	ldr	r0, [pc, #68]	; (8000ae0 <MX_USART3_UART_Init+0x90>)
 8000a9a:	f004 fefc 	bl	8005896 <HAL_UART_Init>
 8000a9e:	4603      	mov	r3, r0
 8000aa0:	2b00      	cmp	r3, #0
 8000aa2:	d001      	beq.n	8000aa8 <MX_USART3_UART_Init+0x58>
  {
    Error_Handler();
 8000aa4:	f000 fa1a 	bl	8000edc <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart3, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000aa8:	2100      	movs	r1, #0
 8000aaa:	480d      	ldr	r0, [pc, #52]	; (8000ae0 <MX_USART3_UART_Init+0x90>)
 8000aac:	f006 fb39 	bl	8007122 <HAL_UARTEx_SetTxFifoThreshold>
 8000ab0:	4603      	mov	r3, r0
 8000ab2:	2b00      	cmp	r3, #0
 8000ab4:	d001      	beq.n	8000aba <MX_USART3_UART_Init+0x6a>
  {
    Error_Handler();
 8000ab6:	f000 fa11 	bl	8000edc <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart3, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000aba:	2100      	movs	r1, #0
 8000abc:	4808      	ldr	r0, [pc, #32]	; (8000ae0 <MX_USART3_UART_Init+0x90>)
 8000abe:	f006 fb6e 	bl	800719e <HAL_UARTEx_SetRxFifoThreshold>
 8000ac2:	4603      	mov	r3, r0
 8000ac4:	2b00      	cmp	r3, #0
 8000ac6:	d001      	beq.n	8000acc <MX_USART3_UART_Init+0x7c>
  {
    Error_Handler();
 8000ac8:	f000 fa08 	bl	8000edc <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart3) != HAL_OK)
 8000acc:	4804      	ldr	r0, [pc, #16]	; (8000ae0 <MX_USART3_UART_Init+0x90>)
 8000ace:	f006 faef 	bl	80070b0 <HAL_UARTEx_DisableFifoMode>
 8000ad2:	4603      	mov	r3, r0
 8000ad4:	2b00      	cmp	r3, #0
 8000ad6:	d001      	beq.n	8000adc <MX_USART3_UART_Init+0x8c>
  {
    Error_Handler();
 8000ad8:	f000 fa00 	bl	8000edc <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8000adc:	bf00      	nop
 8000ade:	bd80      	pop	{r7, pc}
 8000ae0:	20000a0c 	.word	0x20000a0c
 8000ae4:	40004800 	.word	0x40004800

08000ae8 <MX_USB_OTG_HS_USB_Init>:
  * @brief USB_OTG_HS Initialization Function
  * @param None
  * @retval None
  */
static void MX_USB_OTG_HS_USB_Init(void)
{
 8000ae8:	b480      	push	{r7}
 8000aea:	af00      	add	r7, sp, #0
  /* USER CODE END USB_OTG_HS_Init 1 */
  /* USER CODE BEGIN USB_OTG_HS_Init 2 */

  /* USER CODE END USB_OTG_HS_Init 2 */

}
 8000aec:	bf00      	nop
 8000aee:	46bd      	mov	sp, r7
 8000af0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000af4:	4770      	bx	lr
	...

08000af8 <MX_FMC_Init>:

/* FMC initialization function */
static void MX_FMC_Init(void)
{
 8000af8:	b580      	push	{r7, lr}
 8000afa:	b088      	sub	sp, #32
 8000afc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN FMC_Init 0 */

  /* USER CODE END FMC_Init 0 */

  FMC_NORSRAM_TimingTypeDef Timing = {0};
 8000afe:	1d3b      	adds	r3, r7, #4
 8000b00:	2200      	movs	r2, #0
 8000b02:	601a      	str	r2, [r3, #0]
 8000b04:	605a      	str	r2, [r3, #4]
 8000b06:	609a      	str	r2, [r3, #8]
 8000b08:	60da      	str	r2, [r3, #12]
 8000b0a:	611a      	str	r2, [r3, #16]
 8000b0c:	615a      	str	r2, [r3, #20]
 8000b0e:	619a      	str	r2, [r3, #24]

  /* USER CODE END FMC_Init 1 */

  /** Perform the SRAM1 memory initialization sequence
  */
  hsram1.Instance = FMC_NORSRAM_DEVICE;
 8000b10:	4b28      	ldr	r3, [pc, #160]	; (8000bb4 <MX_FMC_Init+0xbc>)
 8000b12:	4a29      	ldr	r2, [pc, #164]	; (8000bb8 <MX_FMC_Init+0xc0>)
 8000b14:	601a      	str	r2, [r3, #0]
  hsram1.Extended = FMC_NORSRAM_EXTENDED_DEVICE;
 8000b16:	4b27      	ldr	r3, [pc, #156]	; (8000bb4 <MX_FMC_Init+0xbc>)
 8000b18:	4a28      	ldr	r2, [pc, #160]	; (8000bbc <MX_FMC_Init+0xc4>)
 8000b1a:	605a      	str	r2, [r3, #4]
  /* hsram1.Init */
  hsram1.Init.NSBank = FMC_NORSRAM_BANK1;
 8000b1c:	4b25      	ldr	r3, [pc, #148]	; (8000bb4 <MX_FMC_Init+0xbc>)
 8000b1e:	2200      	movs	r2, #0
 8000b20:	609a      	str	r2, [r3, #8]
  hsram1.Init.DataAddressMux = FMC_DATA_ADDRESS_MUX_DISABLE;
 8000b22:	4b24      	ldr	r3, [pc, #144]	; (8000bb4 <MX_FMC_Init+0xbc>)
 8000b24:	2200      	movs	r2, #0
 8000b26:	60da      	str	r2, [r3, #12]
  hsram1.Init.MemoryType = FMC_MEMORY_TYPE_SRAM;
 8000b28:	4b22      	ldr	r3, [pc, #136]	; (8000bb4 <MX_FMC_Init+0xbc>)
 8000b2a:	2200      	movs	r2, #0
 8000b2c:	611a      	str	r2, [r3, #16]
  hsram1.Init.MemoryDataWidth = FMC_NORSRAM_MEM_BUS_WIDTH_8;
 8000b2e:	4b21      	ldr	r3, [pc, #132]	; (8000bb4 <MX_FMC_Init+0xbc>)
 8000b30:	2200      	movs	r2, #0
 8000b32:	615a      	str	r2, [r3, #20]
  hsram1.Init.BurstAccessMode = FMC_BURST_ACCESS_MODE_DISABLE;
 8000b34:	4b1f      	ldr	r3, [pc, #124]	; (8000bb4 <MX_FMC_Init+0xbc>)
 8000b36:	2200      	movs	r2, #0
 8000b38:	619a      	str	r2, [r3, #24]
  hsram1.Init.WaitSignalPolarity = FMC_WAIT_SIGNAL_POLARITY_LOW;
 8000b3a:	4b1e      	ldr	r3, [pc, #120]	; (8000bb4 <MX_FMC_Init+0xbc>)
 8000b3c:	2200      	movs	r2, #0
 8000b3e:	61da      	str	r2, [r3, #28]
  hsram1.Init.WaitSignalActive = FMC_WAIT_TIMING_BEFORE_WS;
 8000b40:	4b1c      	ldr	r3, [pc, #112]	; (8000bb4 <MX_FMC_Init+0xbc>)
 8000b42:	2200      	movs	r2, #0
 8000b44:	621a      	str	r2, [r3, #32]
  hsram1.Init.WriteOperation = FMC_WRITE_OPERATION_ENABLE;
 8000b46:	4b1b      	ldr	r3, [pc, #108]	; (8000bb4 <MX_FMC_Init+0xbc>)
 8000b48:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8000b4c:	625a      	str	r2, [r3, #36]	; 0x24
  hsram1.Init.WaitSignal = FMC_WAIT_SIGNAL_DISABLE;
 8000b4e:	4b19      	ldr	r3, [pc, #100]	; (8000bb4 <MX_FMC_Init+0xbc>)
 8000b50:	2200      	movs	r2, #0
 8000b52:	629a      	str	r2, [r3, #40]	; 0x28
  hsram1.Init.ExtendedMode = FMC_EXTENDED_MODE_DISABLE;
 8000b54:	4b17      	ldr	r3, [pc, #92]	; (8000bb4 <MX_FMC_Init+0xbc>)
 8000b56:	2200      	movs	r2, #0
 8000b58:	62da      	str	r2, [r3, #44]	; 0x2c
  hsram1.Init.AsynchronousWait = FMC_ASYNCHRONOUS_WAIT_DISABLE;
 8000b5a:	4b16      	ldr	r3, [pc, #88]	; (8000bb4 <MX_FMC_Init+0xbc>)
 8000b5c:	2200      	movs	r2, #0
 8000b5e:	631a      	str	r2, [r3, #48]	; 0x30
  hsram1.Init.WriteBurst = FMC_WRITE_BURST_DISABLE;
 8000b60:	4b14      	ldr	r3, [pc, #80]	; (8000bb4 <MX_FMC_Init+0xbc>)
 8000b62:	2200      	movs	r2, #0
 8000b64:	635a      	str	r2, [r3, #52]	; 0x34
  hsram1.Init.ContinuousClock = FMC_CONTINUOUS_CLOCK_SYNC_ONLY;
 8000b66:	4b13      	ldr	r3, [pc, #76]	; (8000bb4 <MX_FMC_Init+0xbc>)
 8000b68:	2200      	movs	r2, #0
 8000b6a:	639a      	str	r2, [r3, #56]	; 0x38
  hsram1.Init.WriteFifo = FMC_WRITE_FIFO_DISABLE;
 8000b6c:	4b11      	ldr	r3, [pc, #68]	; (8000bb4 <MX_FMC_Init+0xbc>)
 8000b6e:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 8000b72:	63da      	str	r2, [r3, #60]	; 0x3c
  hsram1.Init.PageSize = FMC_PAGE_SIZE_NONE;
 8000b74:	4b0f      	ldr	r3, [pc, #60]	; (8000bb4 <MX_FMC_Init+0xbc>)
 8000b76:	2200      	movs	r2, #0
 8000b78:	641a      	str	r2, [r3, #64]	; 0x40
  /* Timing */
  Timing.AddressSetupTime = 4;
 8000b7a:	2304      	movs	r3, #4
 8000b7c:	607b      	str	r3, [r7, #4]
  Timing.AddressHoldTime = 15;
 8000b7e:	230f      	movs	r3, #15
 8000b80:	60bb      	str	r3, [r7, #8]
  Timing.DataSetupTime = 2;
 8000b82:	2302      	movs	r3, #2
 8000b84:	60fb      	str	r3, [r7, #12]
  Timing.BusTurnAroundDuration = 1;
 8000b86:	2301      	movs	r3, #1
 8000b88:	613b      	str	r3, [r7, #16]
  Timing.CLKDivision = 16;
 8000b8a:	2310      	movs	r3, #16
 8000b8c:	617b      	str	r3, [r7, #20]
  Timing.DataLatency = 17;
 8000b8e:	2311      	movs	r3, #17
 8000b90:	61bb      	str	r3, [r7, #24]
  Timing.AccessMode = FMC_ACCESS_MODE_A;
 8000b92:	2300      	movs	r3, #0
 8000b94:	61fb      	str	r3, [r7, #28]
  /* ExtTiming */

  if (HAL_SRAM_Init(&hsram1, &Timing, NULL) != HAL_OK)
 8000b96:	1d3b      	adds	r3, r7, #4
 8000b98:	2200      	movs	r2, #0
 8000b9a:	4619      	mov	r1, r3
 8000b9c:	4805      	ldr	r0, [pc, #20]	; (8000bb4 <MX_FMC_Init+0xbc>)
 8000b9e:	f004 fd9d 	bl	80056dc <HAL_SRAM_Init>
 8000ba2:	4603      	mov	r3, r0
 8000ba4:	2b00      	cmp	r3, #0
 8000ba6:	d001      	beq.n	8000bac <MX_FMC_Init+0xb4>
  {
    Error_Handler( );
 8000ba8:	f000 f998 	bl	8000edc <Error_Handler>
  }

  /* USER CODE BEGIN FMC_Init 2 */

  /* USER CODE END FMC_Init 2 */
}
 8000bac:	bf00      	nop
 8000bae:	3720      	adds	r7, #32
 8000bb0:	46bd      	mov	sp, r7
 8000bb2:	bd80      	pop	{r7, pc}
 8000bb4:	20000e9c 	.word	0x20000e9c
 8000bb8:	52004000 	.word	0x52004000
 8000bbc:	52004104 	.word	0x52004104

08000bc0 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000bc0:	b580      	push	{r7, lr}
 8000bc2:	b08e      	sub	sp, #56	; 0x38
 8000bc4:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000bc6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000bca:	2200      	movs	r2, #0
 8000bcc:	601a      	str	r2, [r3, #0]
 8000bce:	605a      	str	r2, [r3, #4]
 8000bd0:	609a      	str	r2, [r3, #8]
 8000bd2:	60da      	str	r2, [r3, #12]
 8000bd4:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000bd6:	4b78      	ldr	r3, [pc, #480]	; (8000db8 <MX_GPIO_Init+0x1f8>)
 8000bd8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000bdc:	4a76      	ldr	r2, [pc, #472]	; (8000db8 <MX_GPIO_Init+0x1f8>)
 8000bde:	f043 0304 	orr.w	r3, r3, #4
 8000be2:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000be6:	4b74      	ldr	r3, [pc, #464]	; (8000db8 <MX_GPIO_Init+0x1f8>)
 8000be8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000bec:	f003 0304 	and.w	r3, r3, #4
 8000bf0:	623b      	str	r3, [r7, #32]
 8000bf2:	6a3b      	ldr	r3, [r7, #32]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8000bf4:	4b70      	ldr	r3, [pc, #448]	; (8000db8 <MX_GPIO_Init+0x1f8>)
 8000bf6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000bfa:	4a6f      	ldr	r2, [pc, #444]	; (8000db8 <MX_GPIO_Init+0x1f8>)
 8000bfc:	f043 0320 	orr.w	r3, r3, #32
 8000c00:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000c04:	4b6c      	ldr	r3, [pc, #432]	; (8000db8 <MX_GPIO_Init+0x1f8>)
 8000c06:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000c0a:	f003 0320 	and.w	r3, r3, #32
 8000c0e:	61fb      	str	r3, [r7, #28]
 8000c10:	69fb      	ldr	r3, [r7, #28]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000c12:	4b69      	ldr	r3, [pc, #420]	; (8000db8 <MX_GPIO_Init+0x1f8>)
 8000c14:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000c18:	4a67      	ldr	r2, [pc, #412]	; (8000db8 <MX_GPIO_Init+0x1f8>)
 8000c1a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000c1e:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000c22:	4b65      	ldr	r3, [pc, #404]	; (8000db8 <MX_GPIO_Init+0x1f8>)
 8000c24:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000c28:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000c2c:	61bb      	str	r3, [r7, #24]
 8000c2e:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000c30:	4b61      	ldr	r3, [pc, #388]	; (8000db8 <MX_GPIO_Init+0x1f8>)
 8000c32:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000c36:	4a60      	ldr	r2, [pc, #384]	; (8000db8 <MX_GPIO_Init+0x1f8>)
 8000c38:	f043 0301 	orr.w	r3, r3, #1
 8000c3c:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000c40:	4b5d      	ldr	r3, [pc, #372]	; (8000db8 <MX_GPIO_Init+0x1f8>)
 8000c42:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000c46:	f003 0301 	and.w	r3, r3, #1
 8000c4a:	617b      	str	r3, [r7, #20]
 8000c4c:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000c4e:	4b5a      	ldr	r3, [pc, #360]	; (8000db8 <MX_GPIO_Init+0x1f8>)
 8000c50:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000c54:	4a58      	ldr	r2, [pc, #352]	; (8000db8 <MX_GPIO_Init+0x1f8>)
 8000c56:	f043 0302 	orr.w	r3, r3, #2
 8000c5a:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000c5e:	4b56      	ldr	r3, [pc, #344]	; (8000db8 <MX_GPIO_Init+0x1f8>)
 8000c60:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000c64:	f003 0302 	and.w	r3, r3, #2
 8000c68:	613b      	str	r3, [r7, #16]
 8000c6a:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8000c6c:	4b52      	ldr	r3, [pc, #328]	; (8000db8 <MX_GPIO_Init+0x1f8>)
 8000c6e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000c72:	4a51      	ldr	r2, [pc, #324]	; (8000db8 <MX_GPIO_Init+0x1f8>)
 8000c74:	f043 0310 	orr.w	r3, r3, #16
 8000c78:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000c7c:	4b4e      	ldr	r3, [pc, #312]	; (8000db8 <MX_GPIO_Init+0x1f8>)
 8000c7e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000c82:	f003 0310 	and.w	r3, r3, #16
 8000c86:	60fb      	str	r3, [r7, #12]
 8000c88:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000c8a:	4b4b      	ldr	r3, [pc, #300]	; (8000db8 <MX_GPIO_Init+0x1f8>)
 8000c8c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000c90:	4a49      	ldr	r2, [pc, #292]	; (8000db8 <MX_GPIO_Init+0x1f8>)
 8000c92:	f043 0308 	orr.w	r3, r3, #8
 8000c96:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000c9a:	4b47      	ldr	r3, [pc, #284]	; (8000db8 <MX_GPIO_Init+0x1f8>)
 8000c9c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000ca0:	f003 0308 	and.w	r3, r3, #8
 8000ca4:	60bb      	str	r3, [r7, #8]
 8000ca6:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8000ca8:	4b43      	ldr	r3, [pc, #268]	; (8000db8 <MX_GPIO_Init+0x1f8>)
 8000caa:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000cae:	4a42      	ldr	r2, [pc, #264]	; (8000db8 <MX_GPIO_Init+0x1f8>)
 8000cb0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000cb4:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000cb8:	4b3f      	ldr	r3, [pc, #252]	; (8000db8 <MX_GPIO_Init+0x1f8>)
 8000cba:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000cbe:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000cc2:	607b      	str	r3, [r7, #4]
 8000cc4:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LED_GREEN_Pin|LED_RED_Pin, GPIO_PIN_RESET);
 8000cc6:	2200      	movs	r2, #0
 8000cc8:	f244 0101 	movw	r1, #16385	; 0x4001
 8000ccc:	483b      	ldr	r0, [pc, #236]	; (8000dbc <MX_GPIO_Init+0x1fc>)
 8000cce:	f002 fa7b 	bl	80031c8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, USB_FS_PWR_EN_Pin|GPIO_PIN_11|GPIO_PIN_3, GPIO_PIN_RESET);
 8000cd2:	2200      	movs	r2, #0
 8000cd4:	f640 4108 	movw	r1, #3080	; 0xc08
 8000cd8:	4839      	ldr	r0, [pc, #228]	; (8000dc0 <MX_GPIO_Init+0x200>)
 8000cda:	f002 fa75 	bl	80031c8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED_YELLOW_GPIO_Port, LED_YELLOW_Pin, GPIO_PIN_RESET);
 8000cde:	2200      	movs	r2, #0
 8000ce0:	2102      	movs	r1, #2
 8000ce2:	4838      	ldr	r0, [pc, #224]	; (8000dc4 <MX_GPIO_Init+0x204>)
 8000ce4:	f002 fa70 	bl	80031c8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8000ce8:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000cec:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000cee:	2300      	movs	r3, #0
 8000cf0:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000cf2:	2300      	movs	r3, #0
 8000cf4:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8000cf6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000cfa:	4619      	mov	r1, r3
 8000cfc:	4832      	ldr	r0, [pc, #200]	; (8000dc8 <MX_GPIO_Init+0x208>)
 8000cfe:	f002 f8bb 	bl	8002e78 <HAL_GPIO_Init>

  /*Configure GPIO pins : LED_GREEN_Pin LED_RED_Pin */
  GPIO_InitStruct.Pin = LED_GREEN_Pin|LED_RED_Pin;
 8000d02:	f244 0301 	movw	r3, #16385	; 0x4001
 8000d06:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000d08:	2301      	movs	r3, #1
 8000d0a:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d0c:	2300      	movs	r3, #0
 8000d0e:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000d10:	2300      	movs	r3, #0
 8000d12:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000d14:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000d18:	4619      	mov	r1, r3
 8000d1a:	4828      	ldr	r0, [pc, #160]	; (8000dbc <MX_GPIO_Init+0x1fc>)
 8000d1c:	f002 f8ac 	bl	8002e78 <HAL_GPIO_Init>

  /*Configure GPIO pins : USB_FS_PWR_EN_Pin PD11 PD3 */
  GPIO_InitStruct.Pin = USB_FS_PWR_EN_Pin|GPIO_PIN_11|GPIO_PIN_3;
 8000d20:	f640 4308 	movw	r3, #3080	; 0xc08
 8000d24:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000d26:	2301      	movs	r3, #1
 8000d28:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d2a:	2300      	movs	r3, #0
 8000d2c:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000d2e:	2300      	movs	r3, #0
 8000d30:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000d32:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000d36:	4619      	mov	r1, r3
 8000d38:	4821      	ldr	r0, [pc, #132]	; (8000dc0 <MX_GPIO_Init+0x200>)
 8000d3a:	f002 f89d 	bl	8002e78 <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_FS_OVCR_Pin */
  GPIO_InitStruct.Pin = USB_FS_OVCR_Pin;
 8000d3e:	2380      	movs	r3, #128	; 0x80
 8000d40:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000d42:	4b22      	ldr	r3, [pc, #136]	; (8000dcc <MX_GPIO_Init+0x20c>)
 8000d44:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d46:	2300      	movs	r3, #0
 8000d48:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(USB_FS_OVCR_GPIO_Port, &GPIO_InitStruct);
 8000d4a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000d4e:	4619      	mov	r1, r3
 8000d50:	481f      	ldr	r0, [pc, #124]	; (8000dd0 <MX_GPIO_Init+0x210>)
 8000d52:	f002 f891 	bl	8002e78 <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_FS_VBUS_Pin */
  GPIO_InitStruct.Pin = USB_FS_VBUS_Pin;
 8000d56:	f44f 7300 	mov.w	r3, #512	; 0x200
 8000d5a:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000d5c:	2300      	movs	r3, #0
 8000d5e:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d60:	2300      	movs	r3, #0
 8000d62:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(USB_FS_VBUS_GPIO_Port, &GPIO_InitStruct);
 8000d64:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000d68:	4619      	mov	r1, r3
 8000d6a:	481a      	ldr	r0, [pc, #104]	; (8000dd4 <MX_GPIO_Init+0x214>)
 8000d6c:	f002 f884 	bl	8002e78 <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_FS_ID_Pin */
  GPIO_InitStruct.Pin = USB_FS_ID_Pin;
 8000d70:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000d74:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000d76:	2302      	movs	r3, #2
 8000d78:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d7a:	2300      	movs	r3, #0
 8000d7c:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000d7e:	2300      	movs	r3, #0
 8000d80:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG1_HS;
 8000d82:	230a      	movs	r3, #10
 8000d84:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(USB_FS_ID_GPIO_Port, &GPIO_InitStruct);
 8000d86:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000d8a:	4619      	mov	r1, r3
 8000d8c:	4811      	ldr	r0, [pc, #68]	; (8000dd4 <MX_GPIO_Init+0x214>)
 8000d8e:	f002 f873 	bl	8002e78 <HAL_GPIO_Init>

  /*Configure GPIO pin : LED_YELLOW_Pin */
  GPIO_InitStruct.Pin = LED_YELLOW_Pin;
 8000d92:	2302      	movs	r3, #2
 8000d94:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000d96:	2301      	movs	r3, #1
 8000d98:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d9a:	2300      	movs	r3, #0
 8000d9c:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000d9e:	2300      	movs	r3, #0
 8000da0:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(LED_YELLOW_GPIO_Port, &GPIO_InitStruct);
 8000da2:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000da6:	4619      	mov	r1, r3
 8000da8:	4806      	ldr	r0, [pc, #24]	; (8000dc4 <MX_GPIO_Init+0x204>)
 8000daa:	f002 f865 	bl	8002e78 <HAL_GPIO_Init>

}
 8000dae:	bf00      	nop
 8000db0:	3738      	adds	r7, #56	; 0x38
 8000db2:	46bd      	mov	sp, r7
 8000db4:	bd80      	pop	{r7, pc}
 8000db6:	bf00      	nop
 8000db8:	58024400 	.word	0x58024400
 8000dbc:	58020400 	.word	0x58020400
 8000dc0:	58020c00 	.word	0x58020c00
 8000dc4:	58021000 	.word	0x58021000
 8000dc8:	58020800 	.word	0x58020800
 8000dcc:	11110000 	.word	0x11110000
 8000dd0:	58021800 	.word	0x58021800
 8000dd4:	58020000 	.word	0x58020000

08000dd8 <print_network_information>:

/* USER CODE BEGIN 4 */
void print_network_information(void)
{
 8000dd8:	b5b0      	push	{r4, r5, r7, lr}
 8000dda:	b084      	sub	sp, #16
 8000ddc:	af04      	add	r7, sp, #16
	wizchip_getnetinfo(&gWIZNETINFO);
 8000dde:	4837      	ldr	r0, [pc, #220]	; (8000ebc <print_network_information+0xe4>)
 8000de0:	f006 fe0a 	bl	80079f8 <wizchip_getnetinfo>

	printf("Mac address: %02x:%02x:%02x:%02x:%02x:%02x\n\r",gWIZNETINFO.mac[0],gWIZNETINFO.mac[1],gWIZNETINFO.mac[2],gWIZNETINFO.mac[3],gWIZNETINFO.mac[4],gWIZNETINFO.mac[5]);
 8000de4:	4b35      	ldr	r3, [pc, #212]	; (8000ebc <print_network_information+0xe4>)
 8000de6:	781b      	ldrb	r3, [r3, #0]
 8000de8:	4618      	mov	r0, r3
 8000dea:	4b34      	ldr	r3, [pc, #208]	; (8000ebc <print_network_information+0xe4>)
 8000dec:	785b      	ldrb	r3, [r3, #1]
 8000dee:	461c      	mov	r4, r3
 8000df0:	4b32      	ldr	r3, [pc, #200]	; (8000ebc <print_network_information+0xe4>)
 8000df2:	789b      	ldrb	r3, [r3, #2]
 8000df4:	461d      	mov	r5, r3
 8000df6:	4b31      	ldr	r3, [pc, #196]	; (8000ebc <print_network_information+0xe4>)
 8000df8:	78db      	ldrb	r3, [r3, #3]
 8000dfa:	461a      	mov	r2, r3
 8000dfc:	4b2f      	ldr	r3, [pc, #188]	; (8000ebc <print_network_information+0xe4>)
 8000dfe:	791b      	ldrb	r3, [r3, #4]
 8000e00:	4619      	mov	r1, r3
 8000e02:	4b2e      	ldr	r3, [pc, #184]	; (8000ebc <print_network_information+0xe4>)
 8000e04:	795b      	ldrb	r3, [r3, #5]
 8000e06:	9302      	str	r3, [sp, #8]
 8000e08:	9101      	str	r1, [sp, #4]
 8000e0a:	9200      	str	r2, [sp, #0]
 8000e0c:	462b      	mov	r3, r5
 8000e0e:	4622      	mov	r2, r4
 8000e10:	4601      	mov	r1, r0
 8000e12:	482b      	ldr	r0, [pc, #172]	; (8000ec0 <print_network_information+0xe8>)
 8000e14:	f006 ff82 	bl	8007d1c <iprintf>
	printf("IP address : %d.%d.%d.%d\n\r",gWIZNETINFO.ip[0],gWIZNETINFO.ip[1],gWIZNETINFO.ip[2],gWIZNETINFO.ip[3]);
 8000e18:	4b28      	ldr	r3, [pc, #160]	; (8000ebc <print_network_information+0xe4>)
 8000e1a:	799b      	ldrb	r3, [r3, #6]
 8000e1c:	4619      	mov	r1, r3
 8000e1e:	4b27      	ldr	r3, [pc, #156]	; (8000ebc <print_network_information+0xe4>)
 8000e20:	79db      	ldrb	r3, [r3, #7]
 8000e22:	461a      	mov	r2, r3
 8000e24:	4b25      	ldr	r3, [pc, #148]	; (8000ebc <print_network_information+0xe4>)
 8000e26:	7a1b      	ldrb	r3, [r3, #8]
 8000e28:	4618      	mov	r0, r3
 8000e2a:	4b24      	ldr	r3, [pc, #144]	; (8000ebc <print_network_information+0xe4>)
 8000e2c:	7a5b      	ldrb	r3, [r3, #9]
 8000e2e:	9300      	str	r3, [sp, #0]
 8000e30:	4603      	mov	r3, r0
 8000e32:	4824      	ldr	r0, [pc, #144]	; (8000ec4 <print_network_information+0xec>)
 8000e34:	f006 ff72 	bl	8007d1c <iprintf>
	printf("SM Mask    : %d.%d.%d.%d\n\r",gWIZNETINFO.sn[0],gWIZNETINFO.sn[1],gWIZNETINFO.sn[2],gWIZNETINFO.sn[3]);
 8000e38:	4b20      	ldr	r3, [pc, #128]	; (8000ebc <print_network_information+0xe4>)
 8000e3a:	7a9b      	ldrb	r3, [r3, #10]
 8000e3c:	4619      	mov	r1, r3
 8000e3e:	4b1f      	ldr	r3, [pc, #124]	; (8000ebc <print_network_information+0xe4>)
 8000e40:	7adb      	ldrb	r3, [r3, #11]
 8000e42:	461a      	mov	r2, r3
 8000e44:	4b1d      	ldr	r3, [pc, #116]	; (8000ebc <print_network_information+0xe4>)
 8000e46:	7b1b      	ldrb	r3, [r3, #12]
 8000e48:	4618      	mov	r0, r3
 8000e4a:	4b1c      	ldr	r3, [pc, #112]	; (8000ebc <print_network_information+0xe4>)
 8000e4c:	7b5b      	ldrb	r3, [r3, #13]
 8000e4e:	9300      	str	r3, [sp, #0]
 8000e50:	4603      	mov	r3, r0
 8000e52:	481d      	ldr	r0, [pc, #116]	; (8000ec8 <print_network_information+0xf0>)
 8000e54:	f006 ff62 	bl	8007d1c <iprintf>
	printf("Gate way   : %d.%d.%d.%d\n\r",gWIZNETINFO.gw[0],gWIZNETINFO.gw[1],gWIZNETINFO.gw[2],gWIZNETINFO.gw[3]);
 8000e58:	4b18      	ldr	r3, [pc, #96]	; (8000ebc <print_network_information+0xe4>)
 8000e5a:	7b9b      	ldrb	r3, [r3, #14]
 8000e5c:	4619      	mov	r1, r3
 8000e5e:	4b17      	ldr	r3, [pc, #92]	; (8000ebc <print_network_information+0xe4>)
 8000e60:	7bdb      	ldrb	r3, [r3, #15]
 8000e62:	461a      	mov	r2, r3
 8000e64:	4b15      	ldr	r3, [pc, #84]	; (8000ebc <print_network_information+0xe4>)
 8000e66:	7c1b      	ldrb	r3, [r3, #16]
 8000e68:	4618      	mov	r0, r3
 8000e6a:	4b14      	ldr	r3, [pc, #80]	; (8000ebc <print_network_information+0xe4>)
 8000e6c:	7c5b      	ldrb	r3, [r3, #17]
 8000e6e:	9300      	str	r3, [sp, #0]
 8000e70:	4603      	mov	r3, r0
 8000e72:	4816      	ldr	r0, [pc, #88]	; (8000ecc <print_network_information+0xf4>)
 8000e74:	f006 ff52 	bl	8007d1c <iprintf>
	printf("DNS Server : %d.%d.%d.%d\n\r",gWIZNETINFO.dns[0],gWIZNETINFO.dns[1],gWIZNETINFO.dns[2],gWIZNETINFO.dns[3]);
 8000e78:	4b10      	ldr	r3, [pc, #64]	; (8000ebc <print_network_information+0xe4>)
 8000e7a:	f893 3052 	ldrb.w	r3, [r3, #82]	; 0x52
 8000e7e:	4619      	mov	r1, r3
 8000e80:	4b0e      	ldr	r3, [pc, #56]	; (8000ebc <print_network_information+0xe4>)
 8000e82:	f893 3053 	ldrb.w	r3, [r3, #83]	; 0x53
 8000e86:	461a      	mov	r2, r3
 8000e88:	4b0c      	ldr	r3, [pc, #48]	; (8000ebc <print_network_information+0xe4>)
 8000e8a:	f893 3054 	ldrb.w	r3, [r3, #84]	; 0x54
 8000e8e:	4618      	mov	r0, r3
 8000e90:	4b0a      	ldr	r3, [pc, #40]	; (8000ebc <print_network_information+0xe4>)
 8000e92:	f893 3055 	ldrb.w	r3, [r3, #85]	; 0x55
 8000e96:	9300      	str	r3, [sp, #0]
 8000e98:	4603      	mov	r3, r0
 8000e9a:	480d      	ldr	r0, [pc, #52]	; (8000ed0 <print_network_information+0xf8>)
 8000e9c:	f006 ff3e 	bl	8007d1c <iprintf>
	print_ipv6_addr("LLA ", gWIZNETINFO.lla);
	print_ipv6_addr("GUA ", gWIZNETINFO.gua);
	print_ipv6_addr("SUB6", gWIZNETINFO.sn6);
	*/

	printf("\r\nNETCFGLOCK : %x\r\n", getNETLCKR());
 8000ea0:	480c      	ldr	r0, [pc, #48]	; (8000ed4 <print_network_information+0xfc>)
 8000ea2:	f006 fb4f 	bl	8007544 <WIZCHIP_READ>
 8000ea6:	4603      	mov	r3, r0
 8000ea8:	119b      	asrs	r3, r3, #6
 8000eaa:	f003 0301 	and.w	r3, r3, #1
 8000eae:	4619      	mov	r1, r3
 8000eb0:	4809      	ldr	r0, [pc, #36]	; (8000ed8 <print_network_information+0x100>)
 8000eb2:	f006 ff33 	bl	8007d1c <iprintf>
}
 8000eb6:	bf00      	nop
 8000eb8:	46bd      	mov	sp, r7
 8000eba:	bdb0      	pop	{r4, r5, r7, pc}
 8000ebc:	20000000 	.word	0x20000000
 8000ec0:	08008d60 	.word	0x08008d60
 8000ec4:	08008d90 	.word	0x08008d90
 8000ec8:	08008dac 	.word	0x08008dac
 8000ecc:	08008dc8 	.word	0x08008dc8
 8000ed0:	08008de4 	.word	0x08008de4
 8000ed4:	60200000 	.word	0x60200000
 8000ed8:	08008e00 	.word	0x08008e00

08000edc <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000edc:	b480      	push	{r7}
 8000ede:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000ee0:	b672      	cpsid	i
}
 8000ee2:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000ee4:	e7fe      	b.n	8000ee4 <Error_Handler+0x8>
	...

08000ee8 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000ee8:	b480      	push	{r7}
 8000eea:	b083      	sub	sp, #12
 8000eec:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000eee:	4b0a      	ldr	r3, [pc, #40]	; (8000f18 <HAL_MspInit+0x30>)
 8000ef0:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8000ef4:	4a08      	ldr	r2, [pc, #32]	; (8000f18 <HAL_MspInit+0x30>)
 8000ef6:	f043 0302 	orr.w	r3, r3, #2
 8000efa:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 8000efe:	4b06      	ldr	r3, [pc, #24]	; (8000f18 <HAL_MspInit+0x30>)
 8000f00:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8000f04:	f003 0302 	and.w	r3, r3, #2
 8000f08:	607b      	str	r3, [r7, #4]
 8000f0a:	687b      	ldr	r3, [r7, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000f0c:	bf00      	nop
 8000f0e:	370c      	adds	r7, #12
 8000f10:	46bd      	mov	sp, r7
 8000f12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f16:	4770      	bx	lr
 8000f18:	58024400 	.word	0x58024400

08000f1c <HAL_DMA2D_MspInit>:
* This function configures the hardware resources used in this example
* @param hdma2d: DMA2D handle pointer
* @retval None
*/
void HAL_DMA2D_MspInit(DMA2D_HandleTypeDef* hdma2d)
{
 8000f1c:	b480      	push	{r7}
 8000f1e:	b085      	sub	sp, #20
 8000f20:	af00      	add	r7, sp, #0
 8000f22:	6078      	str	r0, [r7, #4]
  if(hdma2d->Instance==DMA2D)
 8000f24:	687b      	ldr	r3, [r7, #4]
 8000f26:	681b      	ldr	r3, [r3, #0]
 8000f28:	4a0b      	ldr	r2, [pc, #44]	; (8000f58 <HAL_DMA2D_MspInit+0x3c>)
 8000f2a:	4293      	cmp	r3, r2
 8000f2c:	d10e      	bne.n	8000f4c <HAL_DMA2D_MspInit+0x30>
  {
  /* USER CODE BEGIN DMA2D_MspInit 0 */

  /* USER CODE END DMA2D_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_DMA2D_CLK_ENABLE();
 8000f2e:	4b0b      	ldr	r3, [pc, #44]	; (8000f5c <HAL_DMA2D_MspInit+0x40>)
 8000f30:	f8d3 30d4 	ldr.w	r3, [r3, #212]	; 0xd4
 8000f34:	4a09      	ldr	r2, [pc, #36]	; (8000f5c <HAL_DMA2D_MspInit+0x40>)
 8000f36:	f043 0310 	orr.w	r3, r3, #16
 8000f3a:	f8c2 30d4 	str.w	r3, [r2, #212]	; 0xd4
 8000f3e:	4b07      	ldr	r3, [pc, #28]	; (8000f5c <HAL_DMA2D_MspInit+0x40>)
 8000f40:	f8d3 30d4 	ldr.w	r3, [r3, #212]	; 0xd4
 8000f44:	f003 0310 	and.w	r3, r3, #16
 8000f48:	60fb      	str	r3, [r7, #12]
 8000f4a:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN DMA2D_MspInit 1 */

  /* USER CODE END DMA2D_MspInit 1 */
  }

}
 8000f4c:	bf00      	nop
 8000f4e:	3714      	adds	r7, #20
 8000f50:	46bd      	mov	sp, r7
 8000f52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f56:	4770      	bx	lr
 8000f58:	52001000 	.word	0x52001000
 8000f5c:	58024400 	.word	0x58024400

08000f60 <HAL_ETH_MspInit>:
* This function configures the hardware resources used in this example
* @param heth: ETH handle pointer
* @retval None
*/
void HAL_ETH_MspInit(ETH_HandleTypeDef* heth)
{
 8000f60:	b580      	push	{r7, lr}
 8000f62:	b08e      	sub	sp, #56	; 0x38
 8000f64:	af00      	add	r7, sp, #0
 8000f66:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000f68:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000f6c:	2200      	movs	r2, #0
 8000f6e:	601a      	str	r2, [r3, #0]
 8000f70:	605a      	str	r2, [r3, #4]
 8000f72:	609a      	str	r2, [r3, #8]
 8000f74:	60da      	str	r2, [r3, #12]
 8000f76:	611a      	str	r2, [r3, #16]
  if(heth->Instance==ETH)
 8000f78:	687b      	ldr	r3, [r7, #4]
 8000f7a:	681b      	ldr	r3, [r3, #0]
 8000f7c:	4a59      	ldr	r2, [pc, #356]	; (80010e4 <HAL_ETH_MspInit+0x184>)
 8000f7e:	4293      	cmp	r3, r2
 8000f80:	f040 80ab 	bne.w	80010da <HAL_ETH_MspInit+0x17a>
  {
  /* USER CODE BEGIN ETH_MspInit 0 */

  /* USER CODE END ETH_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ETH1MAC_CLK_ENABLE();
 8000f84:	4b58      	ldr	r3, [pc, #352]	; (80010e8 <HAL_ETH_MspInit+0x188>)
 8000f86:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8000f8a:	4a57      	ldr	r2, [pc, #348]	; (80010e8 <HAL_ETH_MspInit+0x188>)
 8000f8c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8000f90:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 8000f94:	4b54      	ldr	r3, [pc, #336]	; (80010e8 <HAL_ETH_MspInit+0x188>)
 8000f96:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8000f9a:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8000f9e:	623b      	str	r3, [r7, #32]
 8000fa0:	6a3b      	ldr	r3, [r7, #32]
    __HAL_RCC_ETH1TX_CLK_ENABLE();
 8000fa2:	4b51      	ldr	r3, [pc, #324]	; (80010e8 <HAL_ETH_MspInit+0x188>)
 8000fa4:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8000fa8:	4a4f      	ldr	r2, [pc, #316]	; (80010e8 <HAL_ETH_MspInit+0x188>)
 8000faa:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000fae:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 8000fb2:	4b4d      	ldr	r3, [pc, #308]	; (80010e8 <HAL_ETH_MspInit+0x188>)
 8000fb4:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8000fb8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000fbc:	61fb      	str	r3, [r7, #28]
 8000fbe:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_ETH1RX_CLK_ENABLE();
 8000fc0:	4b49      	ldr	r3, [pc, #292]	; (80010e8 <HAL_ETH_MspInit+0x188>)
 8000fc2:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8000fc6:	4a48      	ldr	r2, [pc, #288]	; (80010e8 <HAL_ETH_MspInit+0x188>)
 8000fc8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000fcc:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 8000fd0:	4b45      	ldr	r3, [pc, #276]	; (80010e8 <HAL_ETH_MspInit+0x188>)
 8000fd2:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8000fd6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000fda:	61bb      	str	r3, [r7, #24]
 8000fdc:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000fde:	4b42      	ldr	r3, [pc, #264]	; (80010e8 <HAL_ETH_MspInit+0x188>)
 8000fe0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000fe4:	4a40      	ldr	r2, [pc, #256]	; (80010e8 <HAL_ETH_MspInit+0x188>)
 8000fe6:	f043 0304 	orr.w	r3, r3, #4
 8000fea:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000fee:	4b3e      	ldr	r3, [pc, #248]	; (80010e8 <HAL_ETH_MspInit+0x188>)
 8000ff0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000ff4:	f003 0304 	and.w	r3, r3, #4
 8000ff8:	617b      	str	r3, [r7, #20]
 8000ffa:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000ffc:	4b3a      	ldr	r3, [pc, #232]	; (80010e8 <HAL_ETH_MspInit+0x188>)
 8000ffe:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001002:	4a39      	ldr	r2, [pc, #228]	; (80010e8 <HAL_ETH_MspInit+0x188>)
 8001004:	f043 0301 	orr.w	r3, r3, #1
 8001008:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800100c:	4b36      	ldr	r3, [pc, #216]	; (80010e8 <HAL_ETH_MspInit+0x188>)
 800100e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001012:	f003 0301 	and.w	r3, r3, #1
 8001016:	613b      	str	r3, [r7, #16]
 8001018:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800101a:	4b33      	ldr	r3, [pc, #204]	; (80010e8 <HAL_ETH_MspInit+0x188>)
 800101c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001020:	4a31      	ldr	r2, [pc, #196]	; (80010e8 <HAL_ETH_MspInit+0x188>)
 8001022:	f043 0302 	orr.w	r3, r3, #2
 8001026:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800102a:	4b2f      	ldr	r3, [pc, #188]	; (80010e8 <HAL_ETH_MspInit+0x188>)
 800102c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001030:	f003 0302 	and.w	r3, r3, #2
 8001034:	60fb      	str	r3, [r7, #12]
 8001036:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOG_CLK_ENABLE();
 8001038:	4b2b      	ldr	r3, [pc, #172]	; (80010e8 <HAL_ETH_MspInit+0x188>)
 800103a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800103e:	4a2a      	ldr	r2, [pc, #168]	; (80010e8 <HAL_ETH_MspInit+0x188>)
 8001040:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8001044:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001048:	4b27      	ldr	r3, [pc, #156]	; (80010e8 <HAL_ETH_MspInit+0x188>)
 800104a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800104e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001052:	60bb      	str	r3, [r7, #8]
 8001054:	68bb      	ldr	r3, [r7, #8]
    PC5     ------> ETH_RXD1
    PB13     ------> ETH_TXD1
    PG11     ------> ETH_TX_EN
    PG13     ------> ETH_TXD0
    */
    GPIO_InitStruct.Pin = RMII_MDC_Pin|RMII_RXD0_Pin|RMII_RXD1_Pin;
 8001056:	2332      	movs	r3, #50	; 0x32
 8001058:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800105a:	2302      	movs	r3, #2
 800105c:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800105e:	2300      	movs	r3, #0
 8001060:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001062:	2300      	movs	r3, #0
 8001064:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8001066:	230b      	movs	r3, #11
 8001068:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800106a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800106e:	4619      	mov	r1, r3
 8001070:	481e      	ldr	r0, [pc, #120]	; (80010ec <HAL_ETH_MspInit+0x18c>)
 8001072:	f001 ff01 	bl	8002e78 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = RMII_REF_CLK_Pin|RMII_MDIO_Pin|RMII_CRS_DV_Pin;
 8001076:	2386      	movs	r3, #134	; 0x86
 8001078:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800107a:	2302      	movs	r3, #2
 800107c:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800107e:	2300      	movs	r3, #0
 8001080:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001082:	2300      	movs	r3, #0
 8001084:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8001086:	230b      	movs	r3, #11
 8001088:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800108a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800108e:	4619      	mov	r1, r3
 8001090:	4817      	ldr	r0, [pc, #92]	; (80010f0 <HAL_ETH_MspInit+0x190>)
 8001092:	f001 fef1 	bl	8002e78 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = RMII_TXD1_Pin;
 8001096:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800109a:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800109c:	2302      	movs	r3, #2
 800109e:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80010a0:	2300      	movs	r3, #0
 80010a2:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80010a4:	2300      	movs	r3, #0
 80010a6:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 80010a8:	230b      	movs	r3, #11
 80010aa:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(RMII_TXD1_GPIO_Port, &GPIO_InitStruct);
 80010ac:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80010b0:	4619      	mov	r1, r3
 80010b2:	4810      	ldr	r0, [pc, #64]	; (80010f4 <HAL_ETH_MspInit+0x194>)
 80010b4:	f001 fee0 	bl	8002e78 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = RMII_TX_EN_Pin|RMII_TXD0_Pin;
 80010b8:	f44f 5320 	mov.w	r3, #10240	; 0x2800
 80010bc:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80010be:	2302      	movs	r3, #2
 80010c0:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80010c2:	2300      	movs	r3, #0
 80010c4:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80010c6:	2300      	movs	r3, #0
 80010c8:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 80010ca:	230b      	movs	r3, #11
 80010cc:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 80010ce:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80010d2:	4619      	mov	r1, r3
 80010d4:	4808      	ldr	r0, [pc, #32]	; (80010f8 <HAL_ETH_MspInit+0x198>)
 80010d6:	f001 fecf 	bl	8002e78 <HAL_GPIO_Init>
  /* USER CODE BEGIN ETH_MspInit 1 */

  /* USER CODE END ETH_MspInit 1 */
  }

}
 80010da:	bf00      	nop
 80010dc:	3738      	adds	r7, #56	; 0x38
 80010de:	46bd      	mov	sp, r7
 80010e0:	bd80      	pop	{r7, pc}
 80010e2:	bf00      	nop
 80010e4:	40028000 	.word	0x40028000
 80010e8:	58024400 	.word	0x58024400
 80010ec:	58020800 	.word	0x58020800
 80010f0:	58020000 	.word	0x58020000
 80010f4:	58020400 	.word	0x58020400
 80010f8:	58021800 	.word	0x58021800

080010fc <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80010fc:	b580      	push	{r7, lr}
 80010fe:	b0b6      	sub	sp, #216	; 0xd8
 8001100:	af00      	add	r7, sp, #0
 8001102:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001104:	f107 03c4 	add.w	r3, r7, #196	; 0xc4
 8001108:	2200      	movs	r2, #0
 800110a:	601a      	str	r2, [r3, #0]
 800110c:	605a      	str	r2, [r3, #4]
 800110e:	609a      	str	r2, [r3, #8]
 8001110:	60da      	str	r2, [r3, #12]
 8001112:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001114:	f107 0310 	add.w	r3, r7, #16
 8001118:	22b4      	movs	r2, #180	; 0xb4
 800111a:	2100      	movs	r1, #0
 800111c:	4618      	mov	r0, r3
 800111e:	f006 fdf5 	bl	8007d0c <memset>
  if(huart->Instance==USART3)
 8001122:	687b      	ldr	r3, [r7, #4]
 8001124:	681b      	ldr	r3, [r3, #0]
 8001126:	4a29      	ldr	r2, [pc, #164]	; (80011cc <HAL_UART_MspInit+0xd0>)
 8001128:	4293      	cmp	r3, r2
 800112a:	d14a      	bne.n	80011c2 <HAL_UART_MspInit+0xc6>
  /* USER CODE BEGIN USART3_MspInit 0 */

  /* USER CODE END USART3_MspInit 0 */
  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 800112c:	2302      	movs	r3, #2
 800112e:	613b      	str	r3, [r7, #16]
    PeriphClkInitStruct.Usart234578ClockSelection = RCC_USART234578CLKSOURCE_D2PCLK1;
 8001130:	2300      	movs	r3, #0
 8001132:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001136:	f107 0310 	add.w	r3, r7, #16
 800113a:	4618      	mov	r0, r3
 800113c:	f002 ffb2 	bl	80040a4 <HAL_RCCEx_PeriphCLKConfig>
 8001140:	4603      	mov	r3, r0
 8001142:	2b00      	cmp	r3, #0
 8001144:	d001      	beq.n	800114a <HAL_UART_MspInit+0x4e>
    {
      Error_Handler();
 8001146:	f7ff fec9 	bl	8000edc <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 800114a:	4b21      	ldr	r3, [pc, #132]	; (80011d0 <HAL_UART_MspInit+0xd4>)
 800114c:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8001150:	4a1f      	ldr	r2, [pc, #124]	; (80011d0 <HAL_UART_MspInit+0xd4>)
 8001152:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001156:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 800115a:	4b1d      	ldr	r3, [pc, #116]	; (80011d0 <HAL_UART_MspInit+0xd4>)
 800115c:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8001160:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8001164:	60fb      	str	r3, [r7, #12]
 8001166:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 8001168:	4b19      	ldr	r3, [pc, #100]	; (80011d0 <HAL_UART_MspInit+0xd4>)
 800116a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800116e:	4a18      	ldr	r2, [pc, #96]	; (80011d0 <HAL_UART_MspInit+0xd4>)
 8001170:	f043 0308 	orr.w	r3, r3, #8
 8001174:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001178:	4b15      	ldr	r3, [pc, #84]	; (80011d0 <HAL_UART_MspInit+0xd4>)
 800117a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800117e:	f003 0308 	and.w	r3, r3, #8
 8001182:	60bb      	str	r3, [r7, #8]
 8001184:	68bb      	ldr	r3, [r7, #8]
    /**USART3 GPIO Configuration
    PD8     ------> USART3_TX
    PD9     ------> USART3_RX
    */
    GPIO_InitStruct.Pin = STLK_VCP_RX_Pin|STLK_VCP_TX_Pin;
 8001186:	f44f 7340 	mov.w	r3, #768	; 0x300
 800118a:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800118e:	2302      	movs	r3, #2
 8001190:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001194:	2300      	movs	r3, #0
 8001196:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800119a:	2300      	movs	r3, #0
 800119c:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 80011a0:	2307      	movs	r3, #7
 80011a2:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80011a6:	f107 03c4 	add.w	r3, r7, #196	; 0xc4
 80011aa:	4619      	mov	r1, r3
 80011ac:	4809      	ldr	r0, [pc, #36]	; (80011d4 <HAL_UART_MspInit+0xd8>)
 80011ae:	f001 fe63 	bl	8002e78 <HAL_GPIO_Init>

    /* USART3 interrupt Init */
    HAL_NVIC_SetPriority(USART3_IRQn, 0, 0);
 80011b2:	2200      	movs	r2, #0
 80011b4:	2100      	movs	r1, #0
 80011b6:	2027      	movs	r0, #39	; 0x27
 80011b8:	f000 fb99 	bl	80018ee <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART3_IRQn);
 80011bc:	2027      	movs	r0, #39	; 0x27
 80011be:	f000 fbb0 	bl	8001922 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 80011c2:	bf00      	nop
 80011c4:	37d8      	adds	r7, #216	; 0xd8
 80011c6:	46bd      	mov	sp, r7
 80011c8:	bd80      	pop	{r7, pc}
 80011ca:	bf00      	nop
 80011cc:	40004800 	.word	0x40004800
 80011d0:	58024400 	.word	0x58024400
 80011d4:	58020c00 	.word	0x58020c00

080011d8 <HAL_FMC_MspInit>:

}

static uint32_t FMC_Initialized = 0;

static void HAL_FMC_MspInit(void){
 80011d8:	b580      	push	{r7, lr}
 80011da:	b0b4      	sub	sp, #208	; 0xd0
 80011dc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN FMC_MspInit 0 */

  /* USER CODE END FMC_MspInit 0 */
  GPIO_InitTypeDef GPIO_InitStruct ={0};
 80011de:	f107 03bc 	add.w	r3, r7, #188	; 0xbc
 80011e2:	2200      	movs	r2, #0
 80011e4:	601a      	str	r2, [r3, #0]
 80011e6:	605a      	str	r2, [r3, #4]
 80011e8:	609a      	str	r2, [r3, #8]
 80011ea:	60da      	str	r2, [r3, #12]
 80011ec:	611a      	str	r2, [r3, #16]
  if (FMC_Initialized) {
 80011ee:	4b43      	ldr	r3, [pc, #268]	; (80012fc <HAL_FMC_MspInit+0x124>)
 80011f0:	681b      	ldr	r3, [r3, #0]
 80011f2:	2b00      	cmp	r3, #0
 80011f4:	d17e      	bne.n	80012f4 <HAL_FMC_MspInit+0x11c>
    return;
  }
  FMC_Initialized = 1;
 80011f6:	4b41      	ldr	r3, [pc, #260]	; (80012fc <HAL_FMC_MspInit+0x124>)
 80011f8:	2201      	movs	r2, #1
 80011fa:	601a      	str	r2, [r3, #0]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80011fc:	f107 0308 	add.w	r3, r7, #8
 8001200:	22b4      	movs	r2, #180	; 0xb4
 8001202:	2100      	movs	r1, #0
 8001204:	4618      	mov	r0, r3
 8001206:	f006 fd81 	bl	8007d0c <memset>

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_FMC;
 800120a:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800120e:	60bb      	str	r3, [r7, #8]
    PeriphClkInitStruct.FmcClockSelection = RCC_FMCCLKSOURCE_D1HCLK;
 8001210:	2300      	movs	r3, #0
 8001212:	64fb      	str	r3, [r7, #76]	; 0x4c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001214:	f107 0308 	add.w	r3, r7, #8
 8001218:	4618      	mov	r0, r3
 800121a:	f002 ff43 	bl	80040a4 <HAL_RCCEx_PeriphCLKConfig>
 800121e:	4603      	mov	r3, r0
 8001220:	2b00      	cmp	r3, #0
 8001222:	d001      	beq.n	8001228 <HAL_FMC_MspInit+0x50>
    {
      Error_Handler();
 8001224:	f7ff fe5a 	bl	8000edc <Error_Handler>
    }

  /* Peripheral clock enable */
  __HAL_RCC_FMC_CLK_ENABLE();
 8001228:	4b35      	ldr	r3, [pc, #212]	; (8001300 <HAL_FMC_MspInit+0x128>)
 800122a:	f8d3 30d4 	ldr.w	r3, [r3, #212]	; 0xd4
 800122e:	4a34      	ldr	r2, [pc, #208]	; (8001300 <HAL_FMC_MspInit+0x128>)
 8001230:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8001234:	f8c2 30d4 	str.w	r3, [r2, #212]	; 0xd4
 8001238:	4b31      	ldr	r3, [pc, #196]	; (8001300 <HAL_FMC_MspInit+0x128>)
 800123a:	f8d3 30d4 	ldr.w	r3, [r3, #212]	; 0xd4
 800123e:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001242:	607b      	str	r3, [r7, #4]
 8001244:	687b      	ldr	r3, [r7, #4]
  PD0   ------> FMC_D2
  PD1   ------> FMC_D3
  PD4   ------> FMC_NOE
  PD5   ------> FMC_NWE
  */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8001246:	2303      	movs	r3, #3
 8001248:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800124c:	2302      	movs	r3, #2
 800124e:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001252:	2300      	movs	r3, #0
 8001254:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001258:	2303      	movs	r3, #3
 800125a:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 800125e:	230c      	movs	r3, #12
 8001260:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8001264:	f107 03bc 	add.w	r3, r7, #188	; 0xbc
 8001268:	4619      	mov	r1, r3
 800126a:	4826      	ldr	r0, [pc, #152]	; (8001304 <HAL_FMC_MspInit+0x12c>)
 800126c:	f001 fe04 	bl	8002e78 <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = GPIO_PIN_7|GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10;
 8001270:	f44f 63f0 	mov.w	r3, #1920	; 0x780
 8001274:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001278:	2302      	movs	r3, #2
 800127a:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800127e:	2300      	movs	r3, #0
 8001280:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001284:	2303      	movs	r3, #3
 8001286:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 800128a:	230c      	movs	r3, #12
 800128c:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8001290:	f107 03bc 	add.w	r3, r7, #188	; 0xbc
 8001294:	4619      	mov	r1, r3
 8001296:	481c      	ldr	r0, [pc, #112]	; (8001308 <HAL_FMC_MspInit+0x130>)
 8001298:	f001 fdee 	bl	8002e78 <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = GPIO_PIN_14|GPIO_PIN_15|GPIO_PIN_0|GPIO_PIN_1
 800129c:	f24c 0333 	movw	r3, #49203	; 0xc033
 80012a0:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
                          |GPIO_PIN_4|GPIO_PIN_5;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80012a4:	2302      	movs	r3, #2
 80012a6:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80012aa:	2300      	movs	r3, #0
 80012ac:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80012b0:	2303      	movs	r3, #3
 80012b2:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 80012b6:	230c      	movs	r3, #12
 80012b8:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80012bc:	f107 03bc 	add.w	r3, r7, #188	; 0xbc
 80012c0:	4619      	mov	r1, r3
 80012c2:	4812      	ldr	r0, [pc, #72]	; (800130c <HAL_FMC_MspInit+0x134>)
 80012c4:	f001 fdd8 	bl	8002e78 <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = GPIO_PIN_7;
 80012c8:	2380      	movs	r3, #128	; 0x80
 80012ca:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80012ce:	2302      	movs	r3, #2
 80012d0:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80012d4:	2300      	movs	r3, #0
 80012d6:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80012da:	2303      	movs	r3, #3
 80012dc:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
  GPIO_InitStruct.Alternate = GPIO_AF9_FMC;
 80012e0:	2309      	movs	r3, #9
 80012e2:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80012e6:	f107 03bc 	add.w	r3, r7, #188	; 0xbc
 80012ea:	4619      	mov	r1, r3
 80012ec:	4808      	ldr	r0, [pc, #32]	; (8001310 <HAL_FMC_MspInit+0x138>)
 80012ee:	f001 fdc3 	bl	8002e78 <HAL_GPIO_Init>
 80012f2:	e000      	b.n	80012f6 <HAL_FMC_MspInit+0x11e>
    return;
 80012f4:	bf00      	nop

  /* USER CODE BEGIN FMC_MspInit 1 */

  /* USER CODE END FMC_MspInit 1 */
}
 80012f6:	37d0      	adds	r7, #208	; 0xd0
 80012f8:	46bd      	mov	sp, r7
 80012fa:	bd80      	pop	{r7, pc}
 80012fc:	200001e0 	.word	0x200001e0
 8001300:	58024400 	.word	0x58024400
 8001304:	58021400 	.word	0x58021400
 8001308:	58021000 	.word	0x58021000
 800130c:	58020c00 	.word	0x58020c00
 8001310:	58020800 	.word	0x58020800

08001314 <HAL_SRAM_MspInit>:

void HAL_SRAM_MspInit(SRAM_HandleTypeDef* hsram){
 8001314:	b580      	push	{r7, lr}
 8001316:	b082      	sub	sp, #8
 8001318:	af00      	add	r7, sp, #0
 800131a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN SRAM_MspInit 0 */

  /* USER CODE END SRAM_MspInit 0 */
  HAL_FMC_MspInit();
 800131c:	f7ff ff5c 	bl	80011d8 <HAL_FMC_MspInit>
  /* USER CODE BEGIN SRAM_MspInit 1 */

  /* USER CODE END SRAM_MspInit 1 */
}
 8001320:	bf00      	nop
 8001322:	3708      	adds	r7, #8
 8001324:	46bd      	mov	sp, r7
 8001326:	bd80      	pop	{r7, pc}

08001328 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001328:	b480      	push	{r7}
 800132a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 800132c:	e7fe      	b.n	800132c <NMI_Handler+0x4>

0800132e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800132e:	b480      	push	{r7}
 8001330:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001332:	e7fe      	b.n	8001332 <HardFault_Handler+0x4>

08001334 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001334:	b480      	push	{r7}
 8001336:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001338:	e7fe      	b.n	8001338 <MemManage_Handler+0x4>

0800133a <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800133a:	b480      	push	{r7}
 800133c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800133e:	e7fe      	b.n	800133e <BusFault_Handler+0x4>

08001340 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001340:	b480      	push	{r7}
 8001342:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001344:	e7fe      	b.n	8001344 <UsageFault_Handler+0x4>

08001346 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001346:	b480      	push	{r7}
 8001348:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800134a:	bf00      	nop
 800134c:	46bd      	mov	sp, r7
 800134e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001352:	4770      	bx	lr

08001354 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001354:	b480      	push	{r7}
 8001356:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001358:	bf00      	nop
 800135a:	46bd      	mov	sp, r7
 800135c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001360:	4770      	bx	lr

08001362 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001362:	b480      	push	{r7}
 8001364:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001366:	bf00      	nop
 8001368:	46bd      	mov	sp, r7
 800136a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800136e:	4770      	bx	lr

08001370 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001370:	b580      	push	{r7, lr}
 8001372:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001374:	f000 f9ac 	bl	80016d0 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001378:	bf00      	nop
 800137a:	bd80      	pop	{r7, pc}

0800137c <USART3_IRQHandler>:

/**
  * @brief This function handles USART3 global interrupt.
  */
void USART3_IRQHandler(void)
{
 800137c:	b580      	push	{r7, lr}
 800137e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART3_IRQn 0 */

  /* USER CODE END USART3_IRQn 0 */
  HAL_UART_IRQHandler(&huart3);
 8001380:	4802      	ldr	r0, [pc, #8]	; (800138c <USART3_IRQHandler+0x10>)
 8001382:	f004 fb6f 	bl	8005a64 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART3_IRQn 1 */

  /* USER CODE END USART3_IRQn 1 */
}
 8001386:	bf00      	nop
 8001388:	bd80      	pop	{r7, pc}
 800138a:	bf00      	nop
 800138c:	20000a0c 	.word	0x20000a0c

08001390 <_read>:
	_kill(status, -1);
	while (1) {}		/* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001390:	b580      	push	{r7, lr}
 8001392:	b086      	sub	sp, #24
 8001394:	af00      	add	r7, sp, #0
 8001396:	60f8      	str	r0, [r7, #12]
 8001398:	60b9      	str	r1, [r7, #8]
 800139a:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800139c:	2300      	movs	r3, #0
 800139e:	617b      	str	r3, [r7, #20]
 80013a0:	e00a      	b.n	80013b8 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 80013a2:	f3af 8000 	nop.w
 80013a6:	4601      	mov	r1, r0
 80013a8:	68bb      	ldr	r3, [r7, #8]
 80013aa:	1c5a      	adds	r2, r3, #1
 80013ac:	60ba      	str	r2, [r7, #8]
 80013ae:	b2ca      	uxtb	r2, r1
 80013b0:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80013b2:	697b      	ldr	r3, [r7, #20]
 80013b4:	3301      	adds	r3, #1
 80013b6:	617b      	str	r3, [r7, #20]
 80013b8:	697a      	ldr	r2, [r7, #20]
 80013ba:	687b      	ldr	r3, [r7, #4]
 80013bc:	429a      	cmp	r2, r3
 80013be:	dbf0      	blt.n	80013a2 <_read+0x12>
	}

return len;
 80013c0:	687b      	ldr	r3, [r7, #4]
}
 80013c2:	4618      	mov	r0, r3
 80013c4:	3718      	adds	r7, #24
 80013c6:	46bd      	mov	sp, r7
 80013c8:	bd80      	pop	{r7, pc}

080013ca <_close>:
	}
	return len;
}

int _close(int file)
{
 80013ca:	b480      	push	{r7}
 80013cc:	b083      	sub	sp, #12
 80013ce:	af00      	add	r7, sp, #0
 80013d0:	6078      	str	r0, [r7, #4]
	return -1;
 80013d2:	f04f 33ff 	mov.w	r3, #4294967295
}
 80013d6:	4618      	mov	r0, r3
 80013d8:	370c      	adds	r7, #12
 80013da:	46bd      	mov	sp, r7
 80013dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013e0:	4770      	bx	lr

080013e2 <_fstat>:


int _fstat(int file, struct stat *st)
{
 80013e2:	b480      	push	{r7}
 80013e4:	b083      	sub	sp, #12
 80013e6:	af00      	add	r7, sp, #0
 80013e8:	6078      	str	r0, [r7, #4]
 80013ea:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 80013ec:	683b      	ldr	r3, [r7, #0]
 80013ee:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80013f2:	605a      	str	r2, [r3, #4]
	return 0;
 80013f4:	2300      	movs	r3, #0
}
 80013f6:	4618      	mov	r0, r3
 80013f8:	370c      	adds	r7, #12
 80013fa:	46bd      	mov	sp, r7
 80013fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001400:	4770      	bx	lr

08001402 <_isatty>:

int _isatty(int file)
{
 8001402:	b480      	push	{r7}
 8001404:	b083      	sub	sp, #12
 8001406:	af00      	add	r7, sp, #0
 8001408:	6078      	str	r0, [r7, #4]
	return 1;
 800140a:	2301      	movs	r3, #1
}
 800140c:	4618      	mov	r0, r3
 800140e:	370c      	adds	r7, #12
 8001410:	46bd      	mov	sp, r7
 8001412:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001416:	4770      	bx	lr

08001418 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001418:	b480      	push	{r7}
 800141a:	b085      	sub	sp, #20
 800141c:	af00      	add	r7, sp, #0
 800141e:	60f8      	str	r0, [r7, #12]
 8001420:	60b9      	str	r1, [r7, #8]
 8001422:	607a      	str	r2, [r7, #4]
	return 0;
 8001424:	2300      	movs	r3, #0
}
 8001426:	4618      	mov	r0, r3
 8001428:	3714      	adds	r7, #20
 800142a:	46bd      	mov	sp, r7
 800142c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001430:	4770      	bx	lr
	...

08001434 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001434:	b580      	push	{r7, lr}
 8001436:	b086      	sub	sp, #24
 8001438:	af00      	add	r7, sp, #0
 800143a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 800143c:	4a14      	ldr	r2, [pc, #80]	; (8001490 <_sbrk+0x5c>)
 800143e:	4b15      	ldr	r3, [pc, #84]	; (8001494 <_sbrk+0x60>)
 8001440:	1ad3      	subs	r3, r2, r3
 8001442:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001444:	697b      	ldr	r3, [r7, #20]
 8001446:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001448:	4b13      	ldr	r3, [pc, #76]	; (8001498 <_sbrk+0x64>)
 800144a:	681b      	ldr	r3, [r3, #0]
 800144c:	2b00      	cmp	r3, #0
 800144e:	d102      	bne.n	8001456 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001450:	4b11      	ldr	r3, [pc, #68]	; (8001498 <_sbrk+0x64>)
 8001452:	4a12      	ldr	r2, [pc, #72]	; (800149c <_sbrk+0x68>)
 8001454:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001456:	4b10      	ldr	r3, [pc, #64]	; (8001498 <_sbrk+0x64>)
 8001458:	681a      	ldr	r2, [r3, #0]
 800145a:	687b      	ldr	r3, [r7, #4]
 800145c:	4413      	add	r3, r2
 800145e:	693a      	ldr	r2, [r7, #16]
 8001460:	429a      	cmp	r2, r3
 8001462:	d207      	bcs.n	8001474 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001464:	f006 fc28 	bl	8007cb8 <__errno>
 8001468:	4603      	mov	r3, r0
 800146a:	220c      	movs	r2, #12
 800146c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800146e:	f04f 33ff 	mov.w	r3, #4294967295
 8001472:	e009      	b.n	8001488 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001474:	4b08      	ldr	r3, [pc, #32]	; (8001498 <_sbrk+0x64>)
 8001476:	681b      	ldr	r3, [r3, #0]
 8001478:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800147a:	4b07      	ldr	r3, [pc, #28]	; (8001498 <_sbrk+0x64>)
 800147c:	681a      	ldr	r2, [r3, #0]
 800147e:	687b      	ldr	r3, [r7, #4]
 8001480:	4413      	add	r3, r2
 8001482:	4a05      	ldr	r2, [pc, #20]	; (8001498 <_sbrk+0x64>)
 8001484:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001486:	68fb      	ldr	r3, [r7, #12]
}
 8001488:	4618      	mov	r0, r3
 800148a:	3718      	adds	r7, #24
 800148c:	46bd      	mov	sp, r7
 800148e:	bd80      	pop	{r7, pc}
 8001490:	20020000 	.word	0x20020000
 8001494:	00000400 	.word	0x00000400
 8001498:	200001e4 	.word	0x200001e4
 800149c:	20002620 	.word	0x20002620

080014a0 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 80014a0:	b480      	push	{r7}
 80014a2:	af00      	add	r7, sp, #0
 __IO uint32_t tmpreg;
#endif /* DATA_IN_D2_SRAM */

  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 80014a4:	4b34      	ldr	r3, [pc, #208]	; (8001578 <SystemInit+0xd8>)
 80014a6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80014aa:	4a33      	ldr	r2, [pc, #204]	; (8001578 <SystemInit+0xd8>)
 80014ac:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80014b0:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/

   /* Increasing the CPU frequency */
  if(FLASH_LATENCY_DEFAULT  > (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 80014b4:	4b31      	ldr	r3, [pc, #196]	; (800157c <SystemInit+0xdc>)
 80014b6:	681b      	ldr	r3, [r3, #0]
 80014b8:	f003 030f 	and.w	r3, r3, #15
 80014bc:	2b06      	cmp	r3, #6
 80014be:	d807      	bhi.n	80014d0 <SystemInit+0x30>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
	MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 80014c0:	4b2e      	ldr	r3, [pc, #184]	; (800157c <SystemInit+0xdc>)
 80014c2:	681b      	ldr	r3, [r3, #0]
 80014c4:	f023 030f 	bic.w	r3, r3, #15
 80014c8:	4a2c      	ldr	r2, [pc, #176]	; (800157c <SystemInit+0xdc>)
 80014ca:	f043 0307 	orr.w	r3, r3, #7
 80014ce:	6013      	str	r3, [r2, #0]
  }

  /* Set HSION bit */
  RCC->CR |= RCC_CR_HSION;
 80014d0:	4b2b      	ldr	r3, [pc, #172]	; (8001580 <SystemInit+0xe0>)
 80014d2:	681b      	ldr	r3, [r3, #0]
 80014d4:	4a2a      	ldr	r2, [pc, #168]	; (8001580 <SystemInit+0xe0>)
 80014d6:	f043 0301 	orr.w	r3, r3, #1
 80014da:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 80014dc:	4b28      	ldr	r3, [pc, #160]	; (8001580 <SystemInit+0xe0>)
 80014de:	2200      	movs	r2, #0
 80014e0:	611a      	str	r2, [r3, #16]

  /* Reset HSEON, HSECSSON, CSION, HSI48ON, CSIKERON, PLL1ON, PLL2ON and PLL3ON bits */
  RCC->CR &= 0xEAF6ED7FU;
 80014e2:	4b27      	ldr	r3, [pc, #156]	; (8001580 <SystemInit+0xe0>)
 80014e4:	681a      	ldr	r2, [r3, #0]
 80014e6:	4926      	ldr	r1, [pc, #152]	; (8001580 <SystemInit+0xe0>)
 80014e8:	4b26      	ldr	r3, [pc, #152]	; (8001584 <SystemInit+0xe4>)
 80014ea:	4013      	ands	r3, r2
 80014ec:	600b      	str	r3, [r1, #0]
  
   /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLASH_LATENCY_DEFAULT  < (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 80014ee:	4b23      	ldr	r3, [pc, #140]	; (800157c <SystemInit+0xdc>)
 80014f0:	681b      	ldr	r3, [r3, #0]
 80014f2:	f003 0308 	and.w	r3, r3, #8
 80014f6:	2b00      	cmp	r3, #0
 80014f8:	d007      	beq.n	800150a <SystemInit+0x6a>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
	MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 80014fa:	4b20      	ldr	r3, [pc, #128]	; (800157c <SystemInit+0xdc>)
 80014fc:	681b      	ldr	r3, [r3, #0]
 80014fe:	f023 030f 	bic.w	r3, r3, #15
 8001502:	4a1e      	ldr	r2, [pc, #120]	; (800157c <SystemInit+0xdc>)
 8001504:	f043 0307 	orr.w	r3, r3, #7
 8001508:	6013      	str	r3, [r2, #0]
  }

#if defined(D3_SRAM_BASE)
  /* Reset D1CFGR register */
  RCC->D1CFGR = 0x00000000;
 800150a:	4b1d      	ldr	r3, [pc, #116]	; (8001580 <SystemInit+0xe0>)
 800150c:	2200      	movs	r2, #0
 800150e:	619a      	str	r2, [r3, #24]

  /* Reset D2CFGR register */
  RCC->D2CFGR = 0x00000000;
 8001510:	4b1b      	ldr	r3, [pc, #108]	; (8001580 <SystemInit+0xe0>)
 8001512:	2200      	movs	r2, #0
 8001514:	61da      	str	r2, [r3, #28]

  /* Reset D3CFGR register */
  RCC->D3CFGR = 0x00000000;
 8001516:	4b1a      	ldr	r3, [pc, #104]	; (8001580 <SystemInit+0xe0>)
 8001518:	2200      	movs	r2, #0
 800151a:	621a      	str	r2, [r3, #32]

  /* Reset SRDCFGR register */
  RCC->SRDCFGR = 0x00000000;
#endif
  /* Reset PLLCKSELR register */
  RCC->PLLCKSELR = 0x02020200;
 800151c:	4b18      	ldr	r3, [pc, #96]	; (8001580 <SystemInit+0xe0>)
 800151e:	4a1a      	ldr	r2, [pc, #104]	; (8001588 <SystemInit+0xe8>)
 8001520:	629a      	str	r2, [r3, #40]	; 0x28

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x01FF0000;
 8001522:	4b17      	ldr	r3, [pc, #92]	; (8001580 <SystemInit+0xe0>)
 8001524:	4a19      	ldr	r2, [pc, #100]	; (800158c <SystemInit+0xec>)
 8001526:	62da      	str	r2, [r3, #44]	; 0x2c
  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x01010280;
 8001528:	4b15      	ldr	r3, [pc, #84]	; (8001580 <SystemInit+0xe0>)
 800152a:	4a19      	ldr	r2, [pc, #100]	; (8001590 <SystemInit+0xf0>)
 800152c:	631a      	str	r2, [r3, #48]	; 0x30
  /* Reset PLL1FRACR register */
  RCC->PLL1FRACR = 0x00000000;
 800152e:	4b14      	ldr	r3, [pc, #80]	; (8001580 <SystemInit+0xe0>)
 8001530:	2200      	movs	r2, #0
 8001532:	635a      	str	r2, [r3, #52]	; 0x34

  /* Reset PLL2DIVR register */
  RCC->PLL2DIVR = 0x01010280;
 8001534:	4b12      	ldr	r3, [pc, #72]	; (8001580 <SystemInit+0xe0>)
 8001536:	4a16      	ldr	r2, [pc, #88]	; (8001590 <SystemInit+0xf0>)
 8001538:	639a      	str	r2, [r3, #56]	; 0x38

  /* Reset PLL2FRACR register */

  RCC->PLL2FRACR = 0x00000000;
 800153a:	4b11      	ldr	r3, [pc, #68]	; (8001580 <SystemInit+0xe0>)
 800153c:	2200      	movs	r2, #0
 800153e:	63da      	str	r2, [r3, #60]	; 0x3c
  /* Reset PLL3DIVR register */
  RCC->PLL3DIVR = 0x01010280;
 8001540:	4b0f      	ldr	r3, [pc, #60]	; (8001580 <SystemInit+0xe0>)
 8001542:	4a13      	ldr	r2, [pc, #76]	; (8001590 <SystemInit+0xf0>)
 8001544:	641a      	str	r2, [r3, #64]	; 0x40

  /* Reset PLL3FRACR register */
  RCC->PLL3FRACR = 0x00000000;
 8001546:	4b0e      	ldr	r3, [pc, #56]	; (8001580 <SystemInit+0xe0>)
 8001548:	2200      	movs	r2, #0
 800154a:	645a      	str	r2, [r3, #68]	; 0x44

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 800154c:	4b0c      	ldr	r3, [pc, #48]	; (8001580 <SystemInit+0xe0>)
 800154e:	681b      	ldr	r3, [r3, #0]
 8001550:	4a0b      	ldr	r2, [pc, #44]	; (8001580 <SystemInit+0xe0>)
 8001552:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001556:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 8001558:	4b09      	ldr	r3, [pc, #36]	; (8001580 <SystemInit+0xe0>)
 800155a:	2200      	movs	r2, #0
 800155c:	661a      	str	r2, [r3, #96]	; 0x60
  /*
   * Disable the FMC bank1 (enabled after reset).
   * This, prevents CPU speculation access on this bank which blocks the use of FMC during
   * 24us. During this time the others FMC master (such as LTDC) cannot use it!
   */
  FMC_Bank1_R->BTCR[0] = 0x000030D2;
 800155e:	4b0d      	ldr	r3, [pc, #52]	; (8001594 <SystemInit+0xf4>)
 8001560:	f243 02d2 	movw	r2, #12498	; 0x30d2
 8001564:	601a      	str	r2, [r3, #0]

  /* Configure the Vector Table location add offset address for cortex-M7 ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = D1_AXISRAM_BASE  | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal AXI-RAM */
#else
  SCB->VTOR = FLASH_BANK1_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8001566:	4b04      	ldr	r3, [pc, #16]	; (8001578 <SystemInit+0xd8>)
 8001568:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 800156c:	609a      	str	r2, [r3, #8]
#endif

#endif /*DUAL_CORE && CORE_CM4*/

}
 800156e:	bf00      	nop
 8001570:	46bd      	mov	sp, r7
 8001572:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001576:	4770      	bx	lr
 8001578:	e000ed00 	.word	0xe000ed00
 800157c:	52002000 	.word	0x52002000
 8001580:	58024400 	.word	0x58024400
 8001584:	eaf6ed7f 	.word	0xeaf6ed7f
 8001588:	02020200 	.word	0x02020200
 800158c:	01ff0000 	.word	0x01ff0000
 8001590:	01010280 	.word	0x01010280
 8001594:	52004000 	.word	0x52004000

08001598 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack      /* set stack pointer */
 8001598:	f8df d034 	ldr.w	sp, [pc, #52]	; 80015d0 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit
 800159c:	f7ff ff80 	bl	80014a0 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80015a0:	480c      	ldr	r0, [pc, #48]	; (80015d4 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 80015a2:	490d      	ldr	r1, [pc, #52]	; (80015d8 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 80015a4:	4a0d      	ldr	r2, [pc, #52]	; (80015dc <LoopFillZerobss+0x1a>)
  movs r3, #0
 80015a6:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80015a8:	e002      	b.n	80015b0 <LoopCopyDataInit>

080015aa <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80015aa:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80015ac:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80015ae:	3304      	adds	r3, #4

080015b0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80015b0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80015b2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80015b4:	d3f9      	bcc.n	80015aa <CopyDataInit>
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80015b6:	4a0a      	ldr	r2, [pc, #40]	; (80015e0 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 80015b8:	4c0a      	ldr	r4, [pc, #40]	; (80015e4 <LoopFillZerobss+0x22>)
  movs r3, #0
 80015ba:	2300      	movs	r3, #0
  b LoopFillZerobss
 80015bc:	e001      	b.n	80015c2 <LoopFillZerobss>

080015be <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80015be:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80015c0:	3204      	adds	r2, #4

080015c2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80015c2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80015c4:	d3fb      	bcc.n	80015be <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80015c6:	f006 fb7d 	bl	8007cc4 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80015ca:	f7ff f913 	bl	80007f4 <main>
  bx  lr
 80015ce:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 80015d0:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 80015d4:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80015d8:	20000104 	.word	0x20000104
  ldr r2, =_sidata
 80015dc:	08008ef4 	.word	0x08008ef4
  ldr r2, =_sbss
 80015e0:	200001c4 	.word	0x200001c4
  ldr r4, =_ebss
 80015e4:	20002620 	.word	0x20002620

080015e8 <ADC3_IRQHandler>:
 * @retval None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80015e8:	e7fe      	b.n	80015e8 <ADC3_IRQHandler>
	...

080015ec <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80015ec:	b580      	push	{r7, lr}
 80015ee:	b082      	sub	sp, #8
 80015f0:	af00      	add	r7, sp, #0
   __HAL_ART_CONFIG_BASE_ADDRESS(0x08100000UL);  /* Configure the Cortex-M4 ART Base address to the Flash Bank 2 : */
   __HAL_ART_ENABLE();                           /* Enable the Cortex-M4 ART */
#endif /* DUAL_CORE &&  CORE_CM4 */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80015f2:	2003      	movs	r0, #3
 80015f4:	f000 f970 	bl	80018d8 <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 80015f8:	f002 fb7e 	bl	8003cf8 <HAL_RCC_GetSysClockFreq>
 80015fc:	4602      	mov	r2, r0
 80015fe:	4b15      	ldr	r3, [pc, #84]	; (8001654 <HAL_Init+0x68>)
 8001600:	699b      	ldr	r3, [r3, #24]
 8001602:	0a1b      	lsrs	r3, r3, #8
 8001604:	f003 030f 	and.w	r3, r3, #15
 8001608:	4913      	ldr	r1, [pc, #76]	; (8001658 <HAL_Init+0x6c>)
 800160a:	5ccb      	ldrb	r3, [r1, r3]
 800160c:	f003 031f 	and.w	r3, r3, #31
 8001610:	fa22 f303 	lsr.w	r3, r2, r3
 8001614:	607b      	str	r3, [r7, #4]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

  /* Update the SystemD2Clock global variable */
#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8001616:	4b0f      	ldr	r3, [pc, #60]	; (8001654 <HAL_Init+0x68>)
 8001618:	699b      	ldr	r3, [r3, #24]
 800161a:	f003 030f 	and.w	r3, r3, #15
 800161e:	4a0e      	ldr	r2, [pc, #56]	; (8001658 <HAL_Init+0x6c>)
 8001620:	5cd3      	ldrb	r3, [r2, r3]
 8001622:	f003 031f 	and.w	r3, r3, #31
 8001626:	687a      	ldr	r2, [r7, #4]
 8001628:	fa22 f303 	lsr.w	r3, r2, r3
 800162c:	4a0b      	ldr	r2, [pc, #44]	; (800165c <HAL_Init+0x70>)
 800162e:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8001630:	4a0b      	ldr	r2, [pc, #44]	; (8001660 <HAL_Init+0x74>)
 8001632:	687b      	ldr	r3, [r7, #4]
 8001634:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8001636:	2000      	movs	r0, #0
 8001638:	f000 f814 	bl	8001664 <HAL_InitTick>
 800163c:	4603      	mov	r3, r0
 800163e:	2b00      	cmp	r3, #0
 8001640:	d001      	beq.n	8001646 <HAL_Init+0x5a>
  {
    return HAL_ERROR;
 8001642:	2301      	movs	r3, #1
 8001644:	e002      	b.n	800164c <HAL_Init+0x60>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 8001646:	f7ff fc4f 	bl	8000ee8 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800164a:	2300      	movs	r3, #0
}
 800164c:	4618      	mov	r0, r3
 800164e:	3708      	adds	r7, #8
 8001650:	46bd      	mov	sp, r7
 8001652:	bd80      	pop	{r7, pc}
 8001654:	58024400 	.word	0x58024400
 8001658:	08008e14 	.word	0x08008e14
 800165c:	2000006c 	.word	0x2000006c
 8001660:	20000068 	.word	0x20000068

08001664 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001664:	b580      	push	{r7, lr}
 8001666:	b082      	sub	sp, #8
 8001668:	af00      	add	r7, sp, #0
 800166a:	6078      	str	r0, [r7, #4]
  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that don't take the value zero)*/
  if((uint32_t)uwTickFreq == 0UL)
 800166c:	4b15      	ldr	r3, [pc, #84]	; (80016c4 <HAL_InitTick+0x60>)
 800166e:	781b      	ldrb	r3, [r3, #0]
 8001670:	2b00      	cmp	r3, #0
 8001672:	d101      	bne.n	8001678 <HAL_InitTick+0x14>
  {
    return HAL_ERROR;
 8001674:	2301      	movs	r3, #1
 8001676:	e021      	b.n	80016bc <HAL_InitTick+0x58>
  }

    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000UL / (uint32_t)uwTickFreq)) > 0U)
 8001678:	4b13      	ldr	r3, [pc, #76]	; (80016c8 <HAL_InitTick+0x64>)
 800167a:	681a      	ldr	r2, [r3, #0]
 800167c:	4b11      	ldr	r3, [pc, #68]	; (80016c4 <HAL_InitTick+0x60>)
 800167e:	781b      	ldrb	r3, [r3, #0]
 8001680:	4619      	mov	r1, r3
 8001682:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001686:	fbb3 f3f1 	udiv	r3, r3, r1
 800168a:	fbb2 f3f3 	udiv	r3, r2, r3
 800168e:	4618      	mov	r0, r3
 8001690:	f000 f955 	bl	800193e <HAL_SYSTICK_Config>
 8001694:	4603      	mov	r3, r0
 8001696:	2b00      	cmp	r3, #0
 8001698:	d001      	beq.n	800169e <HAL_InitTick+0x3a>
    {
      return HAL_ERROR;
 800169a:	2301      	movs	r3, #1
 800169c:	e00e      	b.n	80016bc <HAL_InitTick+0x58>
    }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800169e:	687b      	ldr	r3, [r7, #4]
 80016a0:	2b0f      	cmp	r3, #15
 80016a2:	d80a      	bhi.n	80016ba <HAL_InitTick+0x56>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80016a4:	2200      	movs	r2, #0
 80016a6:	6879      	ldr	r1, [r7, #4]
 80016a8:	f04f 30ff 	mov.w	r0, #4294967295
 80016ac:	f000 f91f 	bl	80018ee <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80016b0:	4a06      	ldr	r2, [pc, #24]	; (80016cc <HAL_InitTick+0x68>)
 80016b2:	687b      	ldr	r3, [r7, #4]
 80016b4:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80016b6:	2300      	movs	r3, #0
 80016b8:	e000      	b.n	80016bc <HAL_InitTick+0x58>
    return HAL_ERROR;
 80016ba:	2301      	movs	r3, #1
}
 80016bc:	4618      	mov	r0, r3
 80016be:	3708      	adds	r7, #8
 80016c0:	46bd      	mov	sp, r7
 80016c2:	bd80      	pop	{r7, pc}
 80016c4:	20000074 	.word	0x20000074
 80016c8:	20000068 	.word	0x20000068
 80016cc:	20000070 	.word	0x20000070

080016d0 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80016d0:	b480      	push	{r7}
 80016d2:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 80016d4:	4b06      	ldr	r3, [pc, #24]	; (80016f0 <HAL_IncTick+0x20>)
 80016d6:	781b      	ldrb	r3, [r3, #0]
 80016d8:	461a      	mov	r2, r3
 80016da:	4b06      	ldr	r3, [pc, #24]	; (80016f4 <HAL_IncTick+0x24>)
 80016dc:	681b      	ldr	r3, [r3, #0]
 80016de:	4413      	add	r3, r2
 80016e0:	4a04      	ldr	r2, [pc, #16]	; (80016f4 <HAL_IncTick+0x24>)
 80016e2:	6013      	str	r3, [r2, #0]
}
 80016e4:	bf00      	nop
 80016e6:	46bd      	mov	sp, r7
 80016e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016ec:	4770      	bx	lr
 80016ee:	bf00      	nop
 80016f0:	20000074 	.word	0x20000074
 80016f4:	2000260c 	.word	0x2000260c

080016f8 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80016f8:	b480      	push	{r7}
 80016fa:	af00      	add	r7, sp, #0
  return uwTick;
 80016fc:	4b03      	ldr	r3, [pc, #12]	; (800170c <HAL_GetTick+0x14>)
 80016fe:	681b      	ldr	r3, [r3, #0]
}
 8001700:	4618      	mov	r0, r3
 8001702:	46bd      	mov	sp, r7
 8001704:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001708:	4770      	bx	lr
 800170a:	bf00      	nop
 800170c:	2000260c 	.word	0x2000260c

08001710 <HAL_SYSCFG_ETHInterfaceSelect>:
  *   @arg SYSCFG_ETH_MII : Select the Media Independent Interface
  *   @arg SYSCFG_ETH_RMII: Select the Reduced Media Independent Interface
  * @retval None
  */
void HAL_SYSCFG_ETHInterfaceSelect(uint32_t SYSCFG_ETHInterface)
{
 8001710:	b480      	push	{r7}
 8001712:	b083      	sub	sp, #12
 8001714:	af00      	add	r7, sp, #0
 8001716:	6078      	str	r0, [r7, #4]
  /* Check the parameter */
  assert_param(IS_SYSCFG_ETHERNET_CONFIG(SYSCFG_ETHInterface));

  MODIFY_REG(SYSCFG->PMCR, SYSCFG_PMCR_EPIS_SEL, (uint32_t)(SYSCFG_ETHInterface));
 8001718:	4b06      	ldr	r3, [pc, #24]	; (8001734 <HAL_SYSCFG_ETHInterfaceSelect+0x24>)
 800171a:	685b      	ldr	r3, [r3, #4]
 800171c:	f423 0260 	bic.w	r2, r3, #14680064	; 0xe00000
 8001720:	4904      	ldr	r1, [pc, #16]	; (8001734 <HAL_SYSCFG_ETHInterfaceSelect+0x24>)
 8001722:	687b      	ldr	r3, [r7, #4]
 8001724:	4313      	orrs	r3, r2
 8001726:	604b      	str	r3, [r1, #4]
}
 8001728:	bf00      	nop
 800172a:	370c      	adds	r7, #12
 800172c:	46bd      	mov	sp, r7
 800172e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001732:	4770      	bx	lr
 8001734:	58000400 	.word	0x58000400

08001738 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001738:	b480      	push	{r7}
 800173a:	b085      	sub	sp, #20
 800173c:	af00      	add	r7, sp, #0
 800173e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001740:	687b      	ldr	r3, [r7, #4]
 8001742:	f003 0307 	and.w	r3, r3, #7
 8001746:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001748:	4b0b      	ldr	r3, [pc, #44]	; (8001778 <__NVIC_SetPriorityGrouping+0x40>)
 800174a:	68db      	ldr	r3, [r3, #12]
 800174c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800174e:	68ba      	ldr	r2, [r7, #8]
 8001750:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001754:	4013      	ands	r3, r2
 8001756:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001758:	68fb      	ldr	r3, [r7, #12]
 800175a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800175c:	68bb      	ldr	r3, [r7, #8]
 800175e:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8001760:	4b06      	ldr	r3, [pc, #24]	; (800177c <__NVIC_SetPriorityGrouping+0x44>)
 8001762:	4313      	orrs	r3, r2
 8001764:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001766:	4a04      	ldr	r2, [pc, #16]	; (8001778 <__NVIC_SetPriorityGrouping+0x40>)
 8001768:	68bb      	ldr	r3, [r7, #8]
 800176a:	60d3      	str	r3, [r2, #12]
}
 800176c:	bf00      	nop
 800176e:	3714      	adds	r7, #20
 8001770:	46bd      	mov	sp, r7
 8001772:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001776:	4770      	bx	lr
 8001778:	e000ed00 	.word	0xe000ed00
 800177c:	05fa0000 	.word	0x05fa0000

08001780 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001780:	b480      	push	{r7}
 8001782:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001784:	4b04      	ldr	r3, [pc, #16]	; (8001798 <__NVIC_GetPriorityGrouping+0x18>)
 8001786:	68db      	ldr	r3, [r3, #12]
 8001788:	0a1b      	lsrs	r3, r3, #8
 800178a:	f003 0307 	and.w	r3, r3, #7
}
 800178e:	4618      	mov	r0, r3
 8001790:	46bd      	mov	sp, r7
 8001792:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001796:	4770      	bx	lr
 8001798:	e000ed00 	.word	0xe000ed00

0800179c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800179c:	b480      	push	{r7}
 800179e:	b083      	sub	sp, #12
 80017a0:	af00      	add	r7, sp, #0
 80017a2:	4603      	mov	r3, r0
 80017a4:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 80017a6:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80017aa:	2b00      	cmp	r3, #0
 80017ac:	db0b      	blt.n	80017c6 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80017ae:	88fb      	ldrh	r3, [r7, #6]
 80017b0:	f003 021f 	and.w	r2, r3, #31
 80017b4:	4907      	ldr	r1, [pc, #28]	; (80017d4 <__NVIC_EnableIRQ+0x38>)
 80017b6:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80017ba:	095b      	lsrs	r3, r3, #5
 80017bc:	2001      	movs	r0, #1
 80017be:	fa00 f202 	lsl.w	r2, r0, r2
 80017c2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 80017c6:	bf00      	nop
 80017c8:	370c      	adds	r7, #12
 80017ca:	46bd      	mov	sp, r7
 80017cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017d0:	4770      	bx	lr
 80017d2:	bf00      	nop
 80017d4:	e000e100 	.word	0xe000e100

080017d8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80017d8:	b480      	push	{r7}
 80017da:	b083      	sub	sp, #12
 80017dc:	af00      	add	r7, sp, #0
 80017de:	4603      	mov	r3, r0
 80017e0:	6039      	str	r1, [r7, #0]
 80017e2:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 80017e4:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80017e8:	2b00      	cmp	r3, #0
 80017ea:	db0a      	blt.n	8001802 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80017ec:	683b      	ldr	r3, [r7, #0]
 80017ee:	b2da      	uxtb	r2, r3
 80017f0:	490c      	ldr	r1, [pc, #48]	; (8001824 <__NVIC_SetPriority+0x4c>)
 80017f2:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80017f6:	0112      	lsls	r2, r2, #4
 80017f8:	b2d2      	uxtb	r2, r2
 80017fa:	440b      	add	r3, r1
 80017fc:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001800:	e00a      	b.n	8001818 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001802:	683b      	ldr	r3, [r7, #0]
 8001804:	b2da      	uxtb	r2, r3
 8001806:	4908      	ldr	r1, [pc, #32]	; (8001828 <__NVIC_SetPriority+0x50>)
 8001808:	88fb      	ldrh	r3, [r7, #6]
 800180a:	f003 030f 	and.w	r3, r3, #15
 800180e:	3b04      	subs	r3, #4
 8001810:	0112      	lsls	r2, r2, #4
 8001812:	b2d2      	uxtb	r2, r2
 8001814:	440b      	add	r3, r1
 8001816:	761a      	strb	r2, [r3, #24]
}
 8001818:	bf00      	nop
 800181a:	370c      	adds	r7, #12
 800181c:	46bd      	mov	sp, r7
 800181e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001822:	4770      	bx	lr
 8001824:	e000e100 	.word	0xe000e100
 8001828:	e000ed00 	.word	0xe000ed00

0800182c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800182c:	b480      	push	{r7}
 800182e:	b089      	sub	sp, #36	; 0x24
 8001830:	af00      	add	r7, sp, #0
 8001832:	60f8      	str	r0, [r7, #12]
 8001834:	60b9      	str	r1, [r7, #8]
 8001836:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001838:	68fb      	ldr	r3, [r7, #12]
 800183a:	f003 0307 	and.w	r3, r3, #7
 800183e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001840:	69fb      	ldr	r3, [r7, #28]
 8001842:	f1c3 0307 	rsb	r3, r3, #7
 8001846:	2b04      	cmp	r3, #4
 8001848:	bf28      	it	cs
 800184a:	2304      	movcs	r3, #4
 800184c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800184e:	69fb      	ldr	r3, [r7, #28]
 8001850:	3304      	adds	r3, #4
 8001852:	2b06      	cmp	r3, #6
 8001854:	d902      	bls.n	800185c <NVIC_EncodePriority+0x30>
 8001856:	69fb      	ldr	r3, [r7, #28]
 8001858:	3b03      	subs	r3, #3
 800185a:	e000      	b.n	800185e <NVIC_EncodePriority+0x32>
 800185c:	2300      	movs	r3, #0
 800185e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001860:	f04f 32ff 	mov.w	r2, #4294967295
 8001864:	69bb      	ldr	r3, [r7, #24]
 8001866:	fa02 f303 	lsl.w	r3, r2, r3
 800186a:	43da      	mvns	r2, r3
 800186c:	68bb      	ldr	r3, [r7, #8]
 800186e:	401a      	ands	r2, r3
 8001870:	697b      	ldr	r3, [r7, #20]
 8001872:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001874:	f04f 31ff 	mov.w	r1, #4294967295
 8001878:	697b      	ldr	r3, [r7, #20]
 800187a:	fa01 f303 	lsl.w	r3, r1, r3
 800187e:	43d9      	mvns	r1, r3
 8001880:	687b      	ldr	r3, [r7, #4]
 8001882:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001884:	4313      	orrs	r3, r2
         );
}
 8001886:	4618      	mov	r0, r3
 8001888:	3724      	adds	r7, #36	; 0x24
 800188a:	46bd      	mov	sp, r7
 800188c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001890:	4770      	bx	lr
	...

08001894 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001894:	b580      	push	{r7, lr}
 8001896:	b082      	sub	sp, #8
 8001898:	af00      	add	r7, sp, #0
 800189a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800189c:	687b      	ldr	r3, [r7, #4]
 800189e:	3b01      	subs	r3, #1
 80018a0:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80018a4:	d301      	bcc.n	80018aa <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80018a6:	2301      	movs	r3, #1
 80018a8:	e00f      	b.n	80018ca <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80018aa:	4a0a      	ldr	r2, [pc, #40]	; (80018d4 <SysTick_Config+0x40>)
 80018ac:	687b      	ldr	r3, [r7, #4]
 80018ae:	3b01      	subs	r3, #1
 80018b0:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80018b2:	210f      	movs	r1, #15
 80018b4:	f04f 30ff 	mov.w	r0, #4294967295
 80018b8:	f7ff ff8e 	bl	80017d8 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80018bc:	4b05      	ldr	r3, [pc, #20]	; (80018d4 <SysTick_Config+0x40>)
 80018be:	2200      	movs	r2, #0
 80018c0:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80018c2:	4b04      	ldr	r3, [pc, #16]	; (80018d4 <SysTick_Config+0x40>)
 80018c4:	2207      	movs	r2, #7
 80018c6:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80018c8:	2300      	movs	r3, #0
}
 80018ca:	4618      	mov	r0, r3
 80018cc:	3708      	adds	r7, #8
 80018ce:	46bd      	mov	sp, r7
 80018d0:	bd80      	pop	{r7, pc}
 80018d2:	bf00      	nop
 80018d4:	e000e010 	.word	0xe000e010

080018d8 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80018d8:	b580      	push	{r7, lr}
 80018da:	b082      	sub	sp, #8
 80018dc:	af00      	add	r7, sp, #0
 80018de:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80018e0:	6878      	ldr	r0, [r7, #4]
 80018e2:	f7ff ff29 	bl	8001738 <__NVIC_SetPriorityGrouping>
}
 80018e6:	bf00      	nop
 80018e8:	3708      	adds	r7, #8
 80018ea:	46bd      	mov	sp, r7
 80018ec:	bd80      	pop	{r7, pc}

080018ee <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80018ee:	b580      	push	{r7, lr}
 80018f0:	b086      	sub	sp, #24
 80018f2:	af00      	add	r7, sp, #0
 80018f4:	4603      	mov	r3, r0
 80018f6:	60b9      	str	r1, [r7, #8]
 80018f8:	607a      	str	r2, [r7, #4]
 80018fa:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 80018fc:	f7ff ff40 	bl	8001780 <__NVIC_GetPriorityGrouping>
 8001900:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001902:	687a      	ldr	r2, [r7, #4]
 8001904:	68b9      	ldr	r1, [r7, #8]
 8001906:	6978      	ldr	r0, [r7, #20]
 8001908:	f7ff ff90 	bl	800182c <NVIC_EncodePriority>
 800190c:	4602      	mov	r2, r0
 800190e:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8001912:	4611      	mov	r1, r2
 8001914:	4618      	mov	r0, r3
 8001916:	f7ff ff5f 	bl	80017d8 <__NVIC_SetPriority>
}
 800191a:	bf00      	nop
 800191c:	3718      	adds	r7, #24
 800191e:	46bd      	mov	sp, r7
 8001920:	bd80      	pop	{r7, pc}

08001922 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32h7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001922:	b580      	push	{r7, lr}
 8001924:	b082      	sub	sp, #8
 8001926:	af00      	add	r7, sp, #0
 8001928:	4603      	mov	r3, r0
 800192a:	80fb      	strh	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800192c:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001930:	4618      	mov	r0, r3
 8001932:	f7ff ff33 	bl	800179c <__NVIC_EnableIRQ>
}
 8001936:	bf00      	nop
 8001938:	3708      	adds	r7, #8
 800193a:	46bd      	mov	sp, r7
 800193c:	bd80      	pop	{r7, pc}

0800193e <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status   - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800193e:	b580      	push	{r7, lr}
 8001940:	b082      	sub	sp, #8
 8001942:	af00      	add	r7, sp, #0
 8001944:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001946:	6878      	ldr	r0, [r7, #4]
 8001948:	f7ff ffa4 	bl	8001894 <SysTick_Config>
 800194c:	4603      	mov	r3, r0
}
 800194e:	4618      	mov	r0, r3
 8001950:	3708      	adds	r7, #8
 8001952:	46bd      	mov	sp, r7
 8001954:	bd80      	pop	{r7, pc}
	...

08001958 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8001958:	b580      	push	{r7, lr}
 800195a:	b086      	sub	sp, #24
 800195c:	af00      	add	r7, sp, #0
 800195e:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs_dma;
  BDMA_Base_Registers *regs_bdma;
  const __IO uint32_t *enableRegister;

  uint32_t tickstart = HAL_GetTick();
 8001960:	f7ff feca 	bl	80016f8 <HAL_GetTick>
 8001964:	6138      	str	r0, [r7, #16]

 /* Check the DMA peripheral handle */
  if(hdma == NULL)
 8001966:	687b      	ldr	r3, [r7, #4]
 8001968:	2b00      	cmp	r3, #0
 800196a:	d101      	bne.n	8001970 <HAL_DMA_Abort+0x18>
  {
    return HAL_ERROR;
 800196c:	2301      	movs	r3, #1
 800196e:	e2dc      	b.n	8001f2a <HAL_DMA_Abort+0x5d2>
  }

  /* Check the DMA peripheral state */
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8001970:	687b      	ldr	r3, [r7, #4]
 8001972:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8001976:	b2db      	uxtb	r3, r3
 8001978:	2b02      	cmp	r3, #2
 800197a:	d008      	beq.n	800198e <HAL_DMA_Abort+0x36>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800197c:	687b      	ldr	r3, [r7, #4]
 800197e:	2280      	movs	r2, #128	; 0x80
 8001980:	655a      	str	r2, [r3, #84]	; 0x54

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001982:	687b      	ldr	r3, [r7, #4]
 8001984:	2200      	movs	r2, #0
 8001986:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    return HAL_ERROR;
 800198a:	2301      	movs	r3, #1
 800198c:	e2cd      	b.n	8001f2a <HAL_DMA_Abort+0x5d2>
  }
  else
  {
    /* Disable all the transfer interrupts */
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 800198e:	687b      	ldr	r3, [r7, #4]
 8001990:	681b      	ldr	r3, [r3, #0]
 8001992:	4a76      	ldr	r2, [pc, #472]	; (8001b6c <HAL_DMA_Abort+0x214>)
 8001994:	4293      	cmp	r3, r2
 8001996:	d04a      	beq.n	8001a2e <HAL_DMA_Abort+0xd6>
 8001998:	687b      	ldr	r3, [r7, #4]
 800199a:	681b      	ldr	r3, [r3, #0]
 800199c:	4a74      	ldr	r2, [pc, #464]	; (8001b70 <HAL_DMA_Abort+0x218>)
 800199e:	4293      	cmp	r3, r2
 80019a0:	d045      	beq.n	8001a2e <HAL_DMA_Abort+0xd6>
 80019a2:	687b      	ldr	r3, [r7, #4]
 80019a4:	681b      	ldr	r3, [r3, #0]
 80019a6:	4a73      	ldr	r2, [pc, #460]	; (8001b74 <HAL_DMA_Abort+0x21c>)
 80019a8:	4293      	cmp	r3, r2
 80019aa:	d040      	beq.n	8001a2e <HAL_DMA_Abort+0xd6>
 80019ac:	687b      	ldr	r3, [r7, #4]
 80019ae:	681b      	ldr	r3, [r3, #0]
 80019b0:	4a71      	ldr	r2, [pc, #452]	; (8001b78 <HAL_DMA_Abort+0x220>)
 80019b2:	4293      	cmp	r3, r2
 80019b4:	d03b      	beq.n	8001a2e <HAL_DMA_Abort+0xd6>
 80019b6:	687b      	ldr	r3, [r7, #4]
 80019b8:	681b      	ldr	r3, [r3, #0]
 80019ba:	4a70      	ldr	r2, [pc, #448]	; (8001b7c <HAL_DMA_Abort+0x224>)
 80019bc:	4293      	cmp	r3, r2
 80019be:	d036      	beq.n	8001a2e <HAL_DMA_Abort+0xd6>
 80019c0:	687b      	ldr	r3, [r7, #4]
 80019c2:	681b      	ldr	r3, [r3, #0]
 80019c4:	4a6e      	ldr	r2, [pc, #440]	; (8001b80 <HAL_DMA_Abort+0x228>)
 80019c6:	4293      	cmp	r3, r2
 80019c8:	d031      	beq.n	8001a2e <HAL_DMA_Abort+0xd6>
 80019ca:	687b      	ldr	r3, [r7, #4]
 80019cc:	681b      	ldr	r3, [r3, #0]
 80019ce:	4a6d      	ldr	r2, [pc, #436]	; (8001b84 <HAL_DMA_Abort+0x22c>)
 80019d0:	4293      	cmp	r3, r2
 80019d2:	d02c      	beq.n	8001a2e <HAL_DMA_Abort+0xd6>
 80019d4:	687b      	ldr	r3, [r7, #4]
 80019d6:	681b      	ldr	r3, [r3, #0]
 80019d8:	4a6b      	ldr	r2, [pc, #428]	; (8001b88 <HAL_DMA_Abort+0x230>)
 80019da:	4293      	cmp	r3, r2
 80019dc:	d027      	beq.n	8001a2e <HAL_DMA_Abort+0xd6>
 80019de:	687b      	ldr	r3, [r7, #4]
 80019e0:	681b      	ldr	r3, [r3, #0]
 80019e2:	4a6a      	ldr	r2, [pc, #424]	; (8001b8c <HAL_DMA_Abort+0x234>)
 80019e4:	4293      	cmp	r3, r2
 80019e6:	d022      	beq.n	8001a2e <HAL_DMA_Abort+0xd6>
 80019e8:	687b      	ldr	r3, [r7, #4]
 80019ea:	681b      	ldr	r3, [r3, #0]
 80019ec:	4a68      	ldr	r2, [pc, #416]	; (8001b90 <HAL_DMA_Abort+0x238>)
 80019ee:	4293      	cmp	r3, r2
 80019f0:	d01d      	beq.n	8001a2e <HAL_DMA_Abort+0xd6>
 80019f2:	687b      	ldr	r3, [r7, #4]
 80019f4:	681b      	ldr	r3, [r3, #0]
 80019f6:	4a67      	ldr	r2, [pc, #412]	; (8001b94 <HAL_DMA_Abort+0x23c>)
 80019f8:	4293      	cmp	r3, r2
 80019fa:	d018      	beq.n	8001a2e <HAL_DMA_Abort+0xd6>
 80019fc:	687b      	ldr	r3, [r7, #4]
 80019fe:	681b      	ldr	r3, [r3, #0]
 8001a00:	4a65      	ldr	r2, [pc, #404]	; (8001b98 <HAL_DMA_Abort+0x240>)
 8001a02:	4293      	cmp	r3, r2
 8001a04:	d013      	beq.n	8001a2e <HAL_DMA_Abort+0xd6>
 8001a06:	687b      	ldr	r3, [r7, #4]
 8001a08:	681b      	ldr	r3, [r3, #0]
 8001a0a:	4a64      	ldr	r2, [pc, #400]	; (8001b9c <HAL_DMA_Abort+0x244>)
 8001a0c:	4293      	cmp	r3, r2
 8001a0e:	d00e      	beq.n	8001a2e <HAL_DMA_Abort+0xd6>
 8001a10:	687b      	ldr	r3, [r7, #4]
 8001a12:	681b      	ldr	r3, [r3, #0]
 8001a14:	4a62      	ldr	r2, [pc, #392]	; (8001ba0 <HAL_DMA_Abort+0x248>)
 8001a16:	4293      	cmp	r3, r2
 8001a18:	d009      	beq.n	8001a2e <HAL_DMA_Abort+0xd6>
 8001a1a:	687b      	ldr	r3, [r7, #4]
 8001a1c:	681b      	ldr	r3, [r3, #0]
 8001a1e:	4a61      	ldr	r2, [pc, #388]	; (8001ba4 <HAL_DMA_Abort+0x24c>)
 8001a20:	4293      	cmp	r3, r2
 8001a22:	d004      	beq.n	8001a2e <HAL_DMA_Abort+0xd6>
 8001a24:	687b      	ldr	r3, [r7, #4]
 8001a26:	681b      	ldr	r3, [r3, #0]
 8001a28:	4a5f      	ldr	r2, [pc, #380]	; (8001ba8 <HAL_DMA_Abort+0x250>)
 8001a2a:	4293      	cmp	r3, r2
 8001a2c:	d101      	bne.n	8001a32 <HAL_DMA_Abort+0xda>
 8001a2e:	2301      	movs	r3, #1
 8001a30:	e000      	b.n	8001a34 <HAL_DMA_Abort+0xdc>
 8001a32:	2300      	movs	r3, #0
 8001a34:	2b00      	cmp	r3, #0
 8001a36:	d013      	beq.n	8001a60 <HAL_DMA_Abort+0x108>
    {
       /* Disable DMA All Interrupts  */
      ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME | DMA_IT_HT);
 8001a38:	687b      	ldr	r3, [r7, #4]
 8001a3a:	681b      	ldr	r3, [r3, #0]
 8001a3c:	681a      	ldr	r2, [r3, #0]
 8001a3e:	687b      	ldr	r3, [r7, #4]
 8001a40:	681b      	ldr	r3, [r3, #0]
 8001a42:	f022 021e 	bic.w	r2, r2, #30
 8001a46:	601a      	str	r2, [r3, #0]
      ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR &= ~(DMA_IT_FE);
 8001a48:	687b      	ldr	r3, [r7, #4]
 8001a4a:	681b      	ldr	r3, [r3, #0]
 8001a4c:	695a      	ldr	r2, [r3, #20]
 8001a4e:	687b      	ldr	r3, [r7, #4]
 8001a50:	681b      	ldr	r3, [r3, #0]
 8001a52:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8001a56:	615a      	str	r2, [r3, #20]

      enableRegister = (__IO uint32_t *)(&(((DMA_Stream_TypeDef   *)hdma->Instance)->CR));
 8001a58:	687b      	ldr	r3, [r7, #4]
 8001a5a:	681b      	ldr	r3, [r3, #0]
 8001a5c:	617b      	str	r3, [r7, #20]
 8001a5e:	e00a      	b.n	8001a76 <HAL_DMA_Abort+0x11e>
    }
    else /* BDMA channel */
    {
      /* Disable DMA All Interrupts */
      ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  &= ~(BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE);
 8001a60:	687b      	ldr	r3, [r7, #4]
 8001a62:	681b      	ldr	r3, [r3, #0]
 8001a64:	681a      	ldr	r2, [r3, #0]
 8001a66:	687b      	ldr	r3, [r7, #4]
 8001a68:	681b      	ldr	r3, [r3, #0]
 8001a6a:	f022 020e 	bic.w	r2, r2, #14
 8001a6e:	601a      	str	r2, [r3, #0]

      enableRegister = (__IO uint32_t *)(&(((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR));
 8001a70:	687b      	ldr	r3, [r7, #4]
 8001a72:	681b      	ldr	r3, [r3, #0]
 8001a74:	617b      	str	r3, [r7, #20]
    }

    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8001a76:	687b      	ldr	r3, [r7, #4]
 8001a78:	681b      	ldr	r3, [r3, #0]
 8001a7a:	4a3c      	ldr	r2, [pc, #240]	; (8001b6c <HAL_DMA_Abort+0x214>)
 8001a7c:	4293      	cmp	r3, r2
 8001a7e:	d072      	beq.n	8001b66 <HAL_DMA_Abort+0x20e>
 8001a80:	687b      	ldr	r3, [r7, #4]
 8001a82:	681b      	ldr	r3, [r3, #0]
 8001a84:	4a3a      	ldr	r2, [pc, #232]	; (8001b70 <HAL_DMA_Abort+0x218>)
 8001a86:	4293      	cmp	r3, r2
 8001a88:	d06d      	beq.n	8001b66 <HAL_DMA_Abort+0x20e>
 8001a8a:	687b      	ldr	r3, [r7, #4]
 8001a8c:	681b      	ldr	r3, [r3, #0]
 8001a8e:	4a39      	ldr	r2, [pc, #228]	; (8001b74 <HAL_DMA_Abort+0x21c>)
 8001a90:	4293      	cmp	r3, r2
 8001a92:	d068      	beq.n	8001b66 <HAL_DMA_Abort+0x20e>
 8001a94:	687b      	ldr	r3, [r7, #4]
 8001a96:	681b      	ldr	r3, [r3, #0]
 8001a98:	4a37      	ldr	r2, [pc, #220]	; (8001b78 <HAL_DMA_Abort+0x220>)
 8001a9a:	4293      	cmp	r3, r2
 8001a9c:	d063      	beq.n	8001b66 <HAL_DMA_Abort+0x20e>
 8001a9e:	687b      	ldr	r3, [r7, #4]
 8001aa0:	681b      	ldr	r3, [r3, #0]
 8001aa2:	4a36      	ldr	r2, [pc, #216]	; (8001b7c <HAL_DMA_Abort+0x224>)
 8001aa4:	4293      	cmp	r3, r2
 8001aa6:	d05e      	beq.n	8001b66 <HAL_DMA_Abort+0x20e>
 8001aa8:	687b      	ldr	r3, [r7, #4]
 8001aaa:	681b      	ldr	r3, [r3, #0]
 8001aac:	4a34      	ldr	r2, [pc, #208]	; (8001b80 <HAL_DMA_Abort+0x228>)
 8001aae:	4293      	cmp	r3, r2
 8001ab0:	d059      	beq.n	8001b66 <HAL_DMA_Abort+0x20e>
 8001ab2:	687b      	ldr	r3, [r7, #4]
 8001ab4:	681b      	ldr	r3, [r3, #0]
 8001ab6:	4a33      	ldr	r2, [pc, #204]	; (8001b84 <HAL_DMA_Abort+0x22c>)
 8001ab8:	4293      	cmp	r3, r2
 8001aba:	d054      	beq.n	8001b66 <HAL_DMA_Abort+0x20e>
 8001abc:	687b      	ldr	r3, [r7, #4]
 8001abe:	681b      	ldr	r3, [r3, #0]
 8001ac0:	4a31      	ldr	r2, [pc, #196]	; (8001b88 <HAL_DMA_Abort+0x230>)
 8001ac2:	4293      	cmp	r3, r2
 8001ac4:	d04f      	beq.n	8001b66 <HAL_DMA_Abort+0x20e>
 8001ac6:	687b      	ldr	r3, [r7, #4]
 8001ac8:	681b      	ldr	r3, [r3, #0]
 8001aca:	4a30      	ldr	r2, [pc, #192]	; (8001b8c <HAL_DMA_Abort+0x234>)
 8001acc:	4293      	cmp	r3, r2
 8001ace:	d04a      	beq.n	8001b66 <HAL_DMA_Abort+0x20e>
 8001ad0:	687b      	ldr	r3, [r7, #4]
 8001ad2:	681b      	ldr	r3, [r3, #0]
 8001ad4:	4a2e      	ldr	r2, [pc, #184]	; (8001b90 <HAL_DMA_Abort+0x238>)
 8001ad6:	4293      	cmp	r3, r2
 8001ad8:	d045      	beq.n	8001b66 <HAL_DMA_Abort+0x20e>
 8001ada:	687b      	ldr	r3, [r7, #4]
 8001adc:	681b      	ldr	r3, [r3, #0]
 8001ade:	4a2d      	ldr	r2, [pc, #180]	; (8001b94 <HAL_DMA_Abort+0x23c>)
 8001ae0:	4293      	cmp	r3, r2
 8001ae2:	d040      	beq.n	8001b66 <HAL_DMA_Abort+0x20e>
 8001ae4:	687b      	ldr	r3, [r7, #4]
 8001ae6:	681b      	ldr	r3, [r3, #0]
 8001ae8:	4a2b      	ldr	r2, [pc, #172]	; (8001b98 <HAL_DMA_Abort+0x240>)
 8001aea:	4293      	cmp	r3, r2
 8001aec:	d03b      	beq.n	8001b66 <HAL_DMA_Abort+0x20e>
 8001aee:	687b      	ldr	r3, [r7, #4]
 8001af0:	681b      	ldr	r3, [r3, #0]
 8001af2:	4a2a      	ldr	r2, [pc, #168]	; (8001b9c <HAL_DMA_Abort+0x244>)
 8001af4:	4293      	cmp	r3, r2
 8001af6:	d036      	beq.n	8001b66 <HAL_DMA_Abort+0x20e>
 8001af8:	687b      	ldr	r3, [r7, #4]
 8001afa:	681b      	ldr	r3, [r3, #0]
 8001afc:	4a28      	ldr	r2, [pc, #160]	; (8001ba0 <HAL_DMA_Abort+0x248>)
 8001afe:	4293      	cmp	r3, r2
 8001b00:	d031      	beq.n	8001b66 <HAL_DMA_Abort+0x20e>
 8001b02:	687b      	ldr	r3, [r7, #4]
 8001b04:	681b      	ldr	r3, [r3, #0]
 8001b06:	4a27      	ldr	r2, [pc, #156]	; (8001ba4 <HAL_DMA_Abort+0x24c>)
 8001b08:	4293      	cmp	r3, r2
 8001b0a:	d02c      	beq.n	8001b66 <HAL_DMA_Abort+0x20e>
 8001b0c:	687b      	ldr	r3, [r7, #4]
 8001b0e:	681b      	ldr	r3, [r3, #0]
 8001b10:	4a25      	ldr	r2, [pc, #148]	; (8001ba8 <HAL_DMA_Abort+0x250>)
 8001b12:	4293      	cmp	r3, r2
 8001b14:	d027      	beq.n	8001b66 <HAL_DMA_Abort+0x20e>
 8001b16:	687b      	ldr	r3, [r7, #4]
 8001b18:	681b      	ldr	r3, [r3, #0]
 8001b1a:	4a24      	ldr	r2, [pc, #144]	; (8001bac <HAL_DMA_Abort+0x254>)
 8001b1c:	4293      	cmp	r3, r2
 8001b1e:	d022      	beq.n	8001b66 <HAL_DMA_Abort+0x20e>
 8001b20:	687b      	ldr	r3, [r7, #4]
 8001b22:	681b      	ldr	r3, [r3, #0]
 8001b24:	4a22      	ldr	r2, [pc, #136]	; (8001bb0 <HAL_DMA_Abort+0x258>)
 8001b26:	4293      	cmp	r3, r2
 8001b28:	d01d      	beq.n	8001b66 <HAL_DMA_Abort+0x20e>
 8001b2a:	687b      	ldr	r3, [r7, #4]
 8001b2c:	681b      	ldr	r3, [r3, #0]
 8001b2e:	4a21      	ldr	r2, [pc, #132]	; (8001bb4 <HAL_DMA_Abort+0x25c>)
 8001b30:	4293      	cmp	r3, r2
 8001b32:	d018      	beq.n	8001b66 <HAL_DMA_Abort+0x20e>
 8001b34:	687b      	ldr	r3, [r7, #4]
 8001b36:	681b      	ldr	r3, [r3, #0]
 8001b38:	4a1f      	ldr	r2, [pc, #124]	; (8001bb8 <HAL_DMA_Abort+0x260>)
 8001b3a:	4293      	cmp	r3, r2
 8001b3c:	d013      	beq.n	8001b66 <HAL_DMA_Abort+0x20e>
 8001b3e:	687b      	ldr	r3, [r7, #4]
 8001b40:	681b      	ldr	r3, [r3, #0]
 8001b42:	4a1e      	ldr	r2, [pc, #120]	; (8001bbc <HAL_DMA_Abort+0x264>)
 8001b44:	4293      	cmp	r3, r2
 8001b46:	d00e      	beq.n	8001b66 <HAL_DMA_Abort+0x20e>
 8001b48:	687b      	ldr	r3, [r7, #4]
 8001b4a:	681b      	ldr	r3, [r3, #0]
 8001b4c:	4a1c      	ldr	r2, [pc, #112]	; (8001bc0 <HAL_DMA_Abort+0x268>)
 8001b4e:	4293      	cmp	r3, r2
 8001b50:	d009      	beq.n	8001b66 <HAL_DMA_Abort+0x20e>
 8001b52:	687b      	ldr	r3, [r7, #4]
 8001b54:	681b      	ldr	r3, [r3, #0]
 8001b56:	4a1b      	ldr	r2, [pc, #108]	; (8001bc4 <HAL_DMA_Abort+0x26c>)
 8001b58:	4293      	cmp	r3, r2
 8001b5a:	d004      	beq.n	8001b66 <HAL_DMA_Abort+0x20e>
 8001b5c:	687b      	ldr	r3, [r7, #4]
 8001b5e:	681b      	ldr	r3, [r3, #0]
 8001b60:	4a19      	ldr	r2, [pc, #100]	; (8001bc8 <HAL_DMA_Abort+0x270>)
 8001b62:	4293      	cmp	r3, r2
 8001b64:	d132      	bne.n	8001bcc <HAL_DMA_Abort+0x274>
 8001b66:	2301      	movs	r3, #1
 8001b68:	e031      	b.n	8001bce <HAL_DMA_Abort+0x276>
 8001b6a:	bf00      	nop
 8001b6c:	40020010 	.word	0x40020010
 8001b70:	40020028 	.word	0x40020028
 8001b74:	40020040 	.word	0x40020040
 8001b78:	40020058 	.word	0x40020058
 8001b7c:	40020070 	.word	0x40020070
 8001b80:	40020088 	.word	0x40020088
 8001b84:	400200a0 	.word	0x400200a0
 8001b88:	400200b8 	.word	0x400200b8
 8001b8c:	40020410 	.word	0x40020410
 8001b90:	40020428 	.word	0x40020428
 8001b94:	40020440 	.word	0x40020440
 8001b98:	40020458 	.word	0x40020458
 8001b9c:	40020470 	.word	0x40020470
 8001ba0:	40020488 	.word	0x40020488
 8001ba4:	400204a0 	.word	0x400204a0
 8001ba8:	400204b8 	.word	0x400204b8
 8001bac:	58025408 	.word	0x58025408
 8001bb0:	5802541c 	.word	0x5802541c
 8001bb4:	58025430 	.word	0x58025430
 8001bb8:	58025444 	.word	0x58025444
 8001bbc:	58025458 	.word	0x58025458
 8001bc0:	5802546c 	.word	0x5802546c
 8001bc4:	58025480 	.word	0x58025480
 8001bc8:	58025494 	.word	0x58025494
 8001bcc:	2300      	movs	r3, #0
 8001bce:	2b00      	cmp	r3, #0
 8001bd0:	d007      	beq.n	8001be2 <HAL_DMA_Abort+0x28a>
    {
      /* disable the DMAMUX sync overrun IT */
      hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8001bd2:	687b      	ldr	r3, [r7, #4]
 8001bd4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001bd6:	681a      	ldr	r2, [r3, #0]
 8001bd8:	687b      	ldr	r3, [r7, #4]
 8001bda:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001bdc:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8001be0:	601a      	str	r2, [r3, #0]
    }

    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8001be2:	687b      	ldr	r3, [r7, #4]
 8001be4:	681b      	ldr	r3, [r3, #0]
 8001be6:	4a6d      	ldr	r2, [pc, #436]	; (8001d9c <HAL_DMA_Abort+0x444>)
 8001be8:	4293      	cmp	r3, r2
 8001bea:	d04a      	beq.n	8001c82 <HAL_DMA_Abort+0x32a>
 8001bec:	687b      	ldr	r3, [r7, #4]
 8001bee:	681b      	ldr	r3, [r3, #0]
 8001bf0:	4a6b      	ldr	r2, [pc, #428]	; (8001da0 <HAL_DMA_Abort+0x448>)
 8001bf2:	4293      	cmp	r3, r2
 8001bf4:	d045      	beq.n	8001c82 <HAL_DMA_Abort+0x32a>
 8001bf6:	687b      	ldr	r3, [r7, #4]
 8001bf8:	681b      	ldr	r3, [r3, #0]
 8001bfa:	4a6a      	ldr	r2, [pc, #424]	; (8001da4 <HAL_DMA_Abort+0x44c>)
 8001bfc:	4293      	cmp	r3, r2
 8001bfe:	d040      	beq.n	8001c82 <HAL_DMA_Abort+0x32a>
 8001c00:	687b      	ldr	r3, [r7, #4]
 8001c02:	681b      	ldr	r3, [r3, #0]
 8001c04:	4a68      	ldr	r2, [pc, #416]	; (8001da8 <HAL_DMA_Abort+0x450>)
 8001c06:	4293      	cmp	r3, r2
 8001c08:	d03b      	beq.n	8001c82 <HAL_DMA_Abort+0x32a>
 8001c0a:	687b      	ldr	r3, [r7, #4]
 8001c0c:	681b      	ldr	r3, [r3, #0]
 8001c0e:	4a67      	ldr	r2, [pc, #412]	; (8001dac <HAL_DMA_Abort+0x454>)
 8001c10:	4293      	cmp	r3, r2
 8001c12:	d036      	beq.n	8001c82 <HAL_DMA_Abort+0x32a>
 8001c14:	687b      	ldr	r3, [r7, #4]
 8001c16:	681b      	ldr	r3, [r3, #0]
 8001c18:	4a65      	ldr	r2, [pc, #404]	; (8001db0 <HAL_DMA_Abort+0x458>)
 8001c1a:	4293      	cmp	r3, r2
 8001c1c:	d031      	beq.n	8001c82 <HAL_DMA_Abort+0x32a>
 8001c1e:	687b      	ldr	r3, [r7, #4]
 8001c20:	681b      	ldr	r3, [r3, #0]
 8001c22:	4a64      	ldr	r2, [pc, #400]	; (8001db4 <HAL_DMA_Abort+0x45c>)
 8001c24:	4293      	cmp	r3, r2
 8001c26:	d02c      	beq.n	8001c82 <HAL_DMA_Abort+0x32a>
 8001c28:	687b      	ldr	r3, [r7, #4]
 8001c2a:	681b      	ldr	r3, [r3, #0]
 8001c2c:	4a62      	ldr	r2, [pc, #392]	; (8001db8 <HAL_DMA_Abort+0x460>)
 8001c2e:	4293      	cmp	r3, r2
 8001c30:	d027      	beq.n	8001c82 <HAL_DMA_Abort+0x32a>
 8001c32:	687b      	ldr	r3, [r7, #4]
 8001c34:	681b      	ldr	r3, [r3, #0]
 8001c36:	4a61      	ldr	r2, [pc, #388]	; (8001dbc <HAL_DMA_Abort+0x464>)
 8001c38:	4293      	cmp	r3, r2
 8001c3a:	d022      	beq.n	8001c82 <HAL_DMA_Abort+0x32a>
 8001c3c:	687b      	ldr	r3, [r7, #4]
 8001c3e:	681b      	ldr	r3, [r3, #0]
 8001c40:	4a5f      	ldr	r2, [pc, #380]	; (8001dc0 <HAL_DMA_Abort+0x468>)
 8001c42:	4293      	cmp	r3, r2
 8001c44:	d01d      	beq.n	8001c82 <HAL_DMA_Abort+0x32a>
 8001c46:	687b      	ldr	r3, [r7, #4]
 8001c48:	681b      	ldr	r3, [r3, #0]
 8001c4a:	4a5e      	ldr	r2, [pc, #376]	; (8001dc4 <HAL_DMA_Abort+0x46c>)
 8001c4c:	4293      	cmp	r3, r2
 8001c4e:	d018      	beq.n	8001c82 <HAL_DMA_Abort+0x32a>
 8001c50:	687b      	ldr	r3, [r7, #4]
 8001c52:	681b      	ldr	r3, [r3, #0]
 8001c54:	4a5c      	ldr	r2, [pc, #368]	; (8001dc8 <HAL_DMA_Abort+0x470>)
 8001c56:	4293      	cmp	r3, r2
 8001c58:	d013      	beq.n	8001c82 <HAL_DMA_Abort+0x32a>
 8001c5a:	687b      	ldr	r3, [r7, #4]
 8001c5c:	681b      	ldr	r3, [r3, #0]
 8001c5e:	4a5b      	ldr	r2, [pc, #364]	; (8001dcc <HAL_DMA_Abort+0x474>)
 8001c60:	4293      	cmp	r3, r2
 8001c62:	d00e      	beq.n	8001c82 <HAL_DMA_Abort+0x32a>
 8001c64:	687b      	ldr	r3, [r7, #4]
 8001c66:	681b      	ldr	r3, [r3, #0]
 8001c68:	4a59      	ldr	r2, [pc, #356]	; (8001dd0 <HAL_DMA_Abort+0x478>)
 8001c6a:	4293      	cmp	r3, r2
 8001c6c:	d009      	beq.n	8001c82 <HAL_DMA_Abort+0x32a>
 8001c6e:	687b      	ldr	r3, [r7, #4]
 8001c70:	681b      	ldr	r3, [r3, #0]
 8001c72:	4a58      	ldr	r2, [pc, #352]	; (8001dd4 <HAL_DMA_Abort+0x47c>)
 8001c74:	4293      	cmp	r3, r2
 8001c76:	d004      	beq.n	8001c82 <HAL_DMA_Abort+0x32a>
 8001c78:	687b      	ldr	r3, [r7, #4]
 8001c7a:	681b      	ldr	r3, [r3, #0]
 8001c7c:	4a56      	ldr	r2, [pc, #344]	; (8001dd8 <HAL_DMA_Abort+0x480>)
 8001c7e:	4293      	cmp	r3, r2
 8001c80:	d108      	bne.n	8001c94 <HAL_DMA_Abort+0x33c>
 8001c82:	687b      	ldr	r3, [r7, #4]
 8001c84:	681b      	ldr	r3, [r3, #0]
 8001c86:	681a      	ldr	r2, [r3, #0]
 8001c88:	687b      	ldr	r3, [r7, #4]
 8001c8a:	681b      	ldr	r3, [r3, #0]
 8001c8c:	f022 0201 	bic.w	r2, r2, #1
 8001c90:	601a      	str	r2, [r3, #0]
 8001c92:	e007      	b.n	8001ca4 <HAL_DMA_Abort+0x34c>
 8001c94:	687b      	ldr	r3, [r7, #4]
 8001c96:	681b      	ldr	r3, [r3, #0]
 8001c98:	681a      	ldr	r2, [r3, #0]
 8001c9a:	687b      	ldr	r3, [r7, #4]
 8001c9c:	681b      	ldr	r3, [r3, #0]
 8001c9e:	f022 0201 	bic.w	r2, r2, #1
 8001ca2:	601a      	str	r2, [r3, #0]

    /* Check if the DMA Stream is effectively disabled */
    while(((*enableRegister) & DMA_SxCR_EN) != 0U)
 8001ca4:	e013      	b.n	8001cce <HAL_DMA_Abort+0x376>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8001ca6:	f7ff fd27 	bl	80016f8 <HAL_GetTick>
 8001caa:	4602      	mov	r2, r0
 8001cac:	693b      	ldr	r3, [r7, #16]
 8001cae:	1ad3      	subs	r3, r2, r3
 8001cb0:	2b05      	cmp	r3, #5
 8001cb2:	d90c      	bls.n	8001cce <HAL_DMA_Abort+0x376>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8001cb4:	687b      	ldr	r3, [r7, #4]
 8001cb6:	2220      	movs	r2, #32
 8001cb8:	655a      	str	r2, [r3, #84]	; 0x54

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8001cba:	687b      	ldr	r3, [r7, #4]
 8001cbc:	2200      	movs	r2, #0
 8001cbe:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_ERROR;
 8001cc2:	687b      	ldr	r3, [r7, #4]
 8001cc4:	2203      	movs	r2, #3
 8001cc6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        return HAL_ERROR;
 8001cca:	2301      	movs	r3, #1
 8001ccc:	e12d      	b.n	8001f2a <HAL_DMA_Abort+0x5d2>
    while(((*enableRegister) & DMA_SxCR_EN) != 0U)
 8001cce:	697b      	ldr	r3, [r7, #20]
 8001cd0:	681b      	ldr	r3, [r3, #0]
 8001cd2:	f003 0301 	and.w	r3, r3, #1
 8001cd6:	2b00      	cmp	r3, #0
 8001cd8:	d1e5      	bne.n	8001ca6 <HAL_DMA_Abort+0x34e>
      }
    }

    /* Clear all interrupt flags at correct offset within the register */
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8001cda:	687b      	ldr	r3, [r7, #4]
 8001cdc:	681b      	ldr	r3, [r3, #0]
 8001cde:	4a2f      	ldr	r2, [pc, #188]	; (8001d9c <HAL_DMA_Abort+0x444>)
 8001ce0:	4293      	cmp	r3, r2
 8001ce2:	d04a      	beq.n	8001d7a <HAL_DMA_Abort+0x422>
 8001ce4:	687b      	ldr	r3, [r7, #4]
 8001ce6:	681b      	ldr	r3, [r3, #0]
 8001ce8:	4a2d      	ldr	r2, [pc, #180]	; (8001da0 <HAL_DMA_Abort+0x448>)
 8001cea:	4293      	cmp	r3, r2
 8001cec:	d045      	beq.n	8001d7a <HAL_DMA_Abort+0x422>
 8001cee:	687b      	ldr	r3, [r7, #4]
 8001cf0:	681b      	ldr	r3, [r3, #0]
 8001cf2:	4a2c      	ldr	r2, [pc, #176]	; (8001da4 <HAL_DMA_Abort+0x44c>)
 8001cf4:	4293      	cmp	r3, r2
 8001cf6:	d040      	beq.n	8001d7a <HAL_DMA_Abort+0x422>
 8001cf8:	687b      	ldr	r3, [r7, #4]
 8001cfa:	681b      	ldr	r3, [r3, #0]
 8001cfc:	4a2a      	ldr	r2, [pc, #168]	; (8001da8 <HAL_DMA_Abort+0x450>)
 8001cfe:	4293      	cmp	r3, r2
 8001d00:	d03b      	beq.n	8001d7a <HAL_DMA_Abort+0x422>
 8001d02:	687b      	ldr	r3, [r7, #4]
 8001d04:	681b      	ldr	r3, [r3, #0]
 8001d06:	4a29      	ldr	r2, [pc, #164]	; (8001dac <HAL_DMA_Abort+0x454>)
 8001d08:	4293      	cmp	r3, r2
 8001d0a:	d036      	beq.n	8001d7a <HAL_DMA_Abort+0x422>
 8001d0c:	687b      	ldr	r3, [r7, #4]
 8001d0e:	681b      	ldr	r3, [r3, #0]
 8001d10:	4a27      	ldr	r2, [pc, #156]	; (8001db0 <HAL_DMA_Abort+0x458>)
 8001d12:	4293      	cmp	r3, r2
 8001d14:	d031      	beq.n	8001d7a <HAL_DMA_Abort+0x422>
 8001d16:	687b      	ldr	r3, [r7, #4]
 8001d18:	681b      	ldr	r3, [r3, #0]
 8001d1a:	4a26      	ldr	r2, [pc, #152]	; (8001db4 <HAL_DMA_Abort+0x45c>)
 8001d1c:	4293      	cmp	r3, r2
 8001d1e:	d02c      	beq.n	8001d7a <HAL_DMA_Abort+0x422>
 8001d20:	687b      	ldr	r3, [r7, #4]
 8001d22:	681b      	ldr	r3, [r3, #0]
 8001d24:	4a24      	ldr	r2, [pc, #144]	; (8001db8 <HAL_DMA_Abort+0x460>)
 8001d26:	4293      	cmp	r3, r2
 8001d28:	d027      	beq.n	8001d7a <HAL_DMA_Abort+0x422>
 8001d2a:	687b      	ldr	r3, [r7, #4]
 8001d2c:	681b      	ldr	r3, [r3, #0]
 8001d2e:	4a23      	ldr	r2, [pc, #140]	; (8001dbc <HAL_DMA_Abort+0x464>)
 8001d30:	4293      	cmp	r3, r2
 8001d32:	d022      	beq.n	8001d7a <HAL_DMA_Abort+0x422>
 8001d34:	687b      	ldr	r3, [r7, #4]
 8001d36:	681b      	ldr	r3, [r3, #0]
 8001d38:	4a21      	ldr	r2, [pc, #132]	; (8001dc0 <HAL_DMA_Abort+0x468>)
 8001d3a:	4293      	cmp	r3, r2
 8001d3c:	d01d      	beq.n	8001d7a <HAL_DMA_Abort+0x422>
 8001d3e:	687b      	ldr	r3, [r7, #4]
 8001d40:	681b      	ldr	r3, [r3, #0]
 8001d42:	4a20      	ldr	r2, [pc, #128]	; (8001dc4 <HAL_DMA_Abort+0x46c>)
 8001d44:	4293      	cmp	r3, r2
 8001d46:	d018      	beq.n	8001d7a <HAL_DMA_Abort+0x422>
 8001d48:	687b      	ldr	r3, [r7, #4]
 8001d4a:	681b      	ldr	r3, [r3, #0]
 8001d4c:	4a1e      	ldr	r2, [pc, #120]	; (8001dc8 <HAL_DMA_Abort+0x470>)
 8001d4e:	4293      	cmp	r3, r2
 8001d50:	d013      	beq.n	8001d7a <HAL_DMA_Abort+0x422>
 8001d52:	687b      	ldr	r3, [r7, #4]
 8001d54:	681b      	ldr	r3, [r3, #0]
 8001d56:	4a1d      	ldr	r2, [pc, #116]	; (8001dcc <HAL_DMA_Abort+0x474>)
 8001d58:	4293      	cmp	r3, r2
 8001d5a:	d00e      	beq.n	8001d7a <HAL_DMA_Abort+0x422>
 8001d5c:	687b      	ldr	r3, [r7, #4]
 8001d5e:	681b      	ldr	r3, [r3, #0]
 8001d60:	4a1b      	ldr	r2, [pc, #108]	; (8001dd0 <HAL_DMA_Abort+0x478>)
 8001d62:	4293      	cmp	r3, r2
 8001d64:	d009      	beq.n	8001d7a <HAL_DMA_Abort+0x422>
 8001d66:	687b      	ldr	r3, [r7, #4]
 8001d68:	681b      	ldr	r3, [r3, #0]
 8001d6a:	4a1a      	ldr	r2, [pc, #104]	; (8001dd4 <HAL_DMA_Abort+0x47c>)
 8001d6c:	4293      	cmp	r3, r2
 8001d6e:	d004      	beq.n	8001d7a <HAL_DMA_Abort+0x422>
 8001d70:	687b      	ldr	r3, [r7, #4]
 8001d72:	681b      	ldr	r3, [r3, #0]
 8001d74:	4a18      	ldr	r2, [pc, #96]	; (8001dd8 <HAL_DMA_Abort+0x480>)
 8001d76:	4293      	cmp	r3, r2
 8001d78:	d101      	bne.n	8001d7e <HAL_DMA_Abort+0x426>
 8001d7a:	2301      	movs	r3, #1
 8001d7c:	e000      	b.n	8001d80 <HAL_DMA_Abort+0x428>
 8001d7e:	2300      	movs	r3, #0
 8001d80:	2b00      	cmp	r3, #0
 8001d82:	d02b      	beq.n	8001ddc <HAL_DMA_Abort+0x484>
    {
      regs_dma = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8001d84:	687b      	ldr	r3, [r7, #4]
 8001d86:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001d88:	60bb      	str	r3, [r7, #8]
      regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 8001d8a:	687b      	ldr	r3, [r7, #4]
 8001d8c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001d8e:	f003 031f 	and.w	r3, r3, #31
 8001d92:	223f      	movs	r2, #63	; 0x3f
 8001d94:	409a      	lsls	r2, r3
 8001d96:	68bb      	ldr	r3, [r7, #8]
 8001d98:	609a      	str	r2, [r3, #8]
 8001d9a:	e02a      	b.n	8001df2 <HAL_DMA_Abort+0x49a>
 8001d9c:	40020010 	.word	0x40020010
 8001da0:	40020028 	.word	0x40020028
 8001da4:	40020040 	.word	0x40020040
 8001da8:	40020058 	.word	0x40020058
 8001dac:	40020070 	.word	0x40020070
 8001db0:	40020088 	.word	0x40020088
 8001db4:	400200a0 	.word	0x400200a0
 8001db8:	400200b8 	.word	0x400200b8
 8001dbc:	40020410 	.word	0x40020410
 8001dc0:	40020428 	.word	0x40020428
 8001dc4:	40020440 	.word	0x40020440
 8001dc8:	40020458 	.word	0x40020458
 8001dcc:	40020470 	.word	0x40020470
 8001dd0:	40020488 	.word	0x40020488
 8001dd4:	400204a0 	.word	0x400204a0
 8001dd8:	400204b8 	.word	0x400204b8
    }
    else /* BDMA channel */
    {
      regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 8001ddc:	687b      	ldr	r3, [r7, #4]
 8001dde:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001de0:	60fb      	str	r3, [r7, #12]
      regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 8001de2:	687b      	ldr	r3, [r7, #4]
 8001de4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001de6:	f003 031f 	and.w	r3, r3, #31
 8001dea:	2201      	movs	r2, #1
 8001dec:	409a      	lsls	r2, r3
 8001dee:	68fb      	ldr	r3, [r7, #12]
 8001df0:	605a      	str	r2, [r3, #4]
    }

    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8001df2:	687b      	ldr	r3, [r7, #4]
 8001df4:	681b      	ldr	r3, [r3, #0]
 8001df6:	4a4f      	ldr	r2, [pc, #316]	; (8001f34 <HAL_DMA_Abort+0x5dc>)
 8001df8:	4293      	cmp	r3, r2
 8001dfa:	d072      	beq.n	8001ee2 <HAL_DMA_Abort+0x58a>
 8001dfc:	687b      	ldr	r3, [r7, #4]
 8001dfe:	681b      	ldr	r3, [r3, #0]
 8001e00:	4a4d      	ldr	r2, [pc, #308]	; (8001f38 <HAL_DMA_Abort+0x5e0>)
 8001e02:	4293      	cmp	r3, r2
 8001e04:	d06d      	beq.n	8001ee2 <HAL_DMA_Abort+0x58a>
 8001e06:	687b      	ldr	r3, [r7, #4]
 8001e08:	681b      	ldr	r3, [r3, #0]
 8001e0a:	4a4c      	ldr	r2, [pc, #304]	; (8001f3c <HAL_DMA_Abort+0x5e4>)
 8001e0c:	4293      	cmp	r3, r2
 8001e0e:	d068      	beq.n	8001ee2 <HAL_DMA_Abort+0x58a>
 8001e10:	687b      	ldr	r3, [r7, #4]
 8001e12:	681b      	ldr	r3, [r3, #0]
 8001e14:	4a4a      	ldr	r2, [pc, #296]	; (8001f40 <HAL_DMA_Abort+0x5e8>)
 8001e16:	4293      	cmp	r3, r2
 8001e18:	d063      	beq.n	8001ee2 <HAL_DMA_Abort+0x58a>
 8001e1a:	687b      	ldr	r3, [r7, #4]
 8001e1c:	681b      	ldr	r3, [r3, #0]
 8001e1e:	4a49      	ldr	r2, [pc, #292]	; (8001f44 <HAL_DMA_Abort+0x5ec>)
 8001e20:	4293      	cmp	r3, r2
 8001e22:	d05e      	beq.n	8001ee2 <HAL_DMA_Abort+0x58a>
 8001e24:	687b      	ldr	r3, [r7, #4]
 8001e26:	681b      	ldr	r3, [r3, #0]
 8001e28:	4a47      	ldr	r2, [pc, #284]	; (8001f48 <HAL_DMA_Abort+0x5f0>)
 8001e2a:	4293      	cmp	r3, r2
 8001e2c:	d059      	beq.n	8001ee2 <HAL_DMA_Abort+0x58a>
 8001e2e:	687b      	ldr	r3, [r7, #4]
 8001e30:	681b      	ldr	r3, [r3, #0]
 8001e32:	4a46      	ldr	r2, [pc, #280]	; (8001f4c <HAL_DMA_Abort+0x5f4>)
 8001e34:	4293      	cmp	r3, r2
 8001e36:	d054      	beq.n	8001ee2 <HAL_DMA_Abort+0x58a>
 8001e38:	687b      	ldr	r3, [r7, #4]
 8001e3a:	681b      	ldr	r3, [r3, #0]
 8001e3c:	4a44      	ldr	r2, [pc, #272]	; (8001f50 <HAL_DMA_Abort+0x5f8>)
 8001e3e:	4293      	cmp	r3, r2
 8001e40:	d04f      	beq.n	8001ee2 <HAL_DMA_Abort+0x58a>
 8001e42:	687b      	ldr	r3, [r7, #4]
 8001e44:	681b      	ldr	r3, [r3, #0]
 8001e46:	4a43      	ldr	r2, [pc, #268]	; (8001f54 <HAL_DMA_Abort+0x5fc>)
 8001e48:	4293      	cmp	r3, r2
 8001e4a:	d04a      	beq.n	8001ee2 <HAL_DMA_Abort+0x58a>
 8001e4c:	687b      	ldr	r3, [r7, #4]
 8001e4e:	681b      	ldr	r3, [r3, #0]
 8001e50:	4a41      	ldr	r2, [pc, #260]	; (8001f58 <HAL_DMA_Abort+0x600>)
 8001e52:	4293      	cmp	r3, r2
 8001e54:	d045      	beq.n	8001ee2 <HAL_DMA_Abort+0x58a>
 8001e56:	687b      	ldr	r3, [r7, #4]
 8001e58:	681b      	ldr	r3, [r3, #0]
 8001e5a:	4a40      	ldr	r2, [pc, #256]	; (8001f5c <HAL_DMA_Abort+0x604>)
 8001e5c:	4293      	cmp	r3, r2
 8001e5e:	d040      	beq.n	8001ee2 <HAL_DMA_Abort+0x58a>
 8001e60:	687b      	ldr	r3, [r7, #4]
 8001e62:	681b      	ldr	r3, [r3, #0]
 8001e64:	4a3e      	ldr	r2, [pc, #248]	; (8001f60 <HAL_DMA_Abort+0x608>)
 8001e66:	4293      	cmp	r3, r2
 8001e68:	d03b      	beq.n	8001ee2 <HAL_DMA_Abort+0x58a>
 8001e6a:	687b      	ldr	r3, [r7, #4]
 8001e6c:	681b      	ldr	r3, [r3, #0]
 8001e6e:	4a3d      	ldr	r2, [pc, #244]	; (8001f64 <HAL_DMA_Abort+0x60c>)
 8001e70:	4293      	cmp	r3, r2
 8001e72:	d036      	beq.n	8001ee2 <HAL_DMA_Abort+0x58a>
 8001e74:	687b      	ldr	r3, [r7, #4]
 8001e76:	681b      	ldr	r3, [r3, #0]
 8001e78:	4a3b      	ldr	r2, [pc, #236]	; (8001f68 <HAL_DMA_Abort+0x610>)
 8001e7a:	4293      	cmp	r3, r2
 8001e7c:	d031      	beq.n	8001ee2 <HAL_DMA_Abort+0x58a>
 8001e7e:	687b      	ldr	r3, [r7, #4]
 8001e80:	681b      	ldr	r3, [r3, #0]
 8001e82:	4a3a      	ldr	r2, [pc, #232]	; (8001f6c <HAL_DMA_Abort+0x614>)
 8001e84:	4293      	cmp	r3, r2
 8001e86:	d02c      	beq.n	8001ee2 <HAL_DMA_Abort+0x58a>
 8001e88:	687b      	ldr	r3, [r7, #4]
 8001e8a:	681b      	ldr	r3, [r3, #0]
 8001e8c:	4a38      	ldr	r2, [pc, #224]	; (8001f70 <HAL_DMA_Abort+0x618>)
 8001e8e:	4293      	cmp	r3, r2
 8001e90:	d027      	beq.n	8001ee2 <HAL_DMA_Abort+0x58a>
 8001e92:	687b      	ldr	r3, [r7, #4]
 8001e94:	681b      	ldr	r3, [r3, #0]
 8001e96:	4a37      	ldr	r2, [pc, #220]	; (8001f74 <HAL_DMA_Abort+0x61c>)
 8001e98:	4293      	cmp	r3, r2
 8001e9a:	d022      	beq.n	8001ee2 <HAL_DMA_Abort+0x58a>
 8001e9c:	687b      	ldr	r3, [r7, #4]
 8001e9e:	681b      	ldr	r3, [r3, #0]
 8001ea0:	4a35      	ldr	r2, [pc, #212]	; (8001f78 <HAL_DMA_Abort+0x620>)
 8001ea2:	4293      	cmp	r3, r2
 8001ea4:	d01d      	beq.n	8001ee2 <HAL_DMA_Abort+0x58a>
 8001ea6:	687b      	ldr	r3, [r7, #4]
 8001ea8:	681b      	ldr	r3, [r3, #0]
 8001eaa:	4a34      	ldr	r2, [pc, #208]	; (8001f7c <HAL_DMA_Abort+0x624>)
 8001eac:	4293      	cmp	r3, r2
 8001eae:	d018      	beq.n	8001ee2 <HAL_DMA_Abort+0x58a>
 8001eb0:	687b      	ldr	r3, [r7, #4]
 8001eb2:	681b      	ldr	r3, [r3, #0]
 8001eb4:	4a32      	ldr	r2, [pc, #200]	; (8001f80 <HAL_DMA_Abort+0x628>)
 8001eb6:	4293      	cmp	r3, r2
 8001eb8:	d013      	beq.n	8001ee2 <HAL_DMA_Abort+0x58a>
 8001eba:	687b      	ldr	r3, [r7, #4]
 8001ebc:	681b      	ldr	r3, [r3, #0]
 8001ebe:	4a31      	ldr	r2, [pc, #196]	; (8001f84 <HAL_DMA_Abort+0x62c>)
 8001ec0:	4293      	cmp	r3, r2
 8001ec2:	d00e      	beq.n	8001ee2 <HAL_DMA_Abort+0x58a>
 8001ec4:	687b      	ldr	r3, [r7, #4]
 8001ec6:	681b      	ldr	r3, [r3, #0]
 8001ec8:	4a2f      	ldr	r2, [pc, #188]	; (8001f88 <HAL_DMA_Abort+0x630>)
 8001eca:	4293      	cmp	r3, r2
 8001ecc:	d009      	beq.n	8001ee2 <HAL_DMA_Abort+0x58a>
 8001ece:	687b      	ldr	r3, [r7, #4]
 8001ed0:	681b      	ldr	r3, [r3, #0]
 8001ed2:	4a2e      	ldr	r2, [pc, #184]	; (8001f8c <HAL_DMA_Abort+0x634>)
 8001ed4:	4293      	cmp	r3, r2
 8001ed6:	d004      	beq.n	8001ee2 <HAL_DMA_Abort+0x58a>
 8001ed8:	687b      	ldr	r3, [r7, #4]
 8001eda:	681b      	ldr	r3, [r3, #0]
 8001edc:	4a2c      	ldr	r2, [pc, #176]	; (8001f90 <HAL_DMA_Abort+0x638>)
 8001ede:	4293      	cmp	r3, r2
 8001ee0:	d101      	bne.n	8001ee6 <HAL_DMA_Abort+0x58e>
 8001ee2:	2301      	movs	r3, #1
 8001ee4:	e000      	b.n	8001ee8 <HAL_DMA_Abort+0x590>
 8001ee6:	2300      	movs	r3, #0
 8001ee8:	2b00      	cmp	r3, #0
 8001eea:	d015      	beq.n	8001f18 <HAL_DMA_Abort+0x5c0>
    {
      /* Clear the DMAMUX synchro overrun flag */
      hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8001eec:	687b      	ldr	r3, [r7, #4]
 8001eee:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8001ef0:	687a      	ldr	r2, [r7, #4]
 8001ef2:	6e92      	ldr	r2, [r2, #104]	; 0x68
 8001ef4:	605a      	str	r2, [r3, #4]

      if(hdma->DMAmuxRequestGen != 0U)
 8001ef6:	687b      	ldr	r3, [r7, #4]
 8001ef8:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8001efa:	2b00      	cmp	r3, #0
 8001efc:	d00c      	beq.n	8001f18 <HAL_DMA_Abort+0x5c0>
      {
        /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT */
        /* disable the request gen overrun IT */
        hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8001efe:	687b      	ldr	r3, [r7, #4]
 8001f00:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8001f02:	681a      	ldr	r2, [r3, #0]
 8001f04:	687b      	ldr	r3, [r7, #4]
 8001f06:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8001f08:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8001f0c:	601a      	str	r2, [r3, #0]

        /* Clear the DMAMUX request generator overrun flag */
        hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8001f0e:	687b      	ldr	r3, [r7, #4]
 8001f10:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001f12:	687a      	ldr	r2, [r7, #4]
 8001f14:	6f52      	ldr	r2, [r2, #116]	; 0x74
 8001f16:	605a      	str	r2, [r3, #4]
      }
    }

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001f18:	687b      	ldr	r3, [r7, #4]
 8001f1a:	2200      	movs	r2, #0
 8001f1c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8001f20:	687b      	ldr	r3, [r7, #4]
 8001f22:	2201      	movs	r2, #1
 8001f24:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
  }

  return HAL_OK;
 8001f28:	2300      	movs	r3, #0
}
 8001f2a:	4618      	mov	r0, r3
 8001f2c:	3718      	adds	r7, #24
 8001f2e:	46bd      	mov	sp, r7
 8001f30:	bd80      	pop	{r7, pc}
 8001f32:	bf00      	nop
 8001f34:	40020010 	.word	0x40020010
 8001f38:	40020028 	.word	0x40020028
 8001f3c:	40020040 	.word	0x40020040
 8001f40:	40020058 	.word	0x40020058
 8001f44:	40020070 	.word	0x40020070
 8001f48:	40020088 	.word	0x40020088
 8001f4c:	400200a0 	.word	0x400200a0
 8001f50:	400200b8 	.word	0x400200b8
 8001f54:	40020410 	.word	0x40020410
 8001f58:	40020428 	.word	0x40020428
 8001f5c:	40020440 	.word	0x40020440
 8001f60:	40020458 	.word	0x40020458
 8001f64:	40020470 	.word	0x40020470
 8001f68:	40020488 	.word	0x40020488
 8001f6c:	400204a0 	.word	0x400204a0
 8001f70:	400204b8 	.word	0x400204b8
 8001f74:	58025408 	.word	0x58025408
 8001f78:	5802541c 	.word	0x5802541c
 8001f7c:	58025430 	.word	0x58025430
 8001f80:	58025444 	.word	0x58025444
 8001f84:	58025458 	.word	0x58025458
 8001f88:	5802546c 	.word	0x5802546c
 8001f8c:	58025480 	.word	0x58025480
 8001f90:	58025494 	.word	0x58025494

08001f94 <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8001f94:	b580      	push	{r7, lr}
 8001f96:	b084      	sub	sp, #16
 8001f98:	af00      	add	r7, sp, #0
 8001f9a:	6078      	str	r0, [r7, #4]
  BDMA_Base_Registers *regs_bdma;

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 8001f9c:	687b      	ldr	r3, [r7, #4]
 8001f9e:	2b00      	cmp	r3, #0
 8001fa0:	d101      	bne.n	8001fa6 <HAL_DMA_Abort_IT+0x12>
  {
    return HAL_ERROR;
 8001fa2:	2301      	movs	r3, #1
 8001fa4:	e205      	b.n	80023b2 <HAL_DMA_Abort_IT+0x41e>
  }

  if(hdma->State != HAL_DMA_STATE_BUSY)
 8001fa6:	687b      	ldr	r3, [r7, #4]
 8001fa8:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8001fac:	b2db      	uxtb	r3, r3
 8001fae:	2b02      	cmp	r3, #2
 8001fb0:	d004      	beq.n	8001fbc <HAL_DMA_Abort_IT+0x28>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001fb2:	687b      	ldr	r3, [r7, #4]
 8001fb4:	2280      	movs	r2, #128	; 0x80
 8001fb6:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8001fb8:	2301      	movs	r3, #1
 8001fba:	e1fa      	b.n	80023b2 <HAL_DMA_Abort_IT+0x41e>
  }
  else
  {
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8001fbc:	687b      	ldr	r3, [r7, #4]
 8001fbe:	681b      	ldr	r3, [r3, #0]
 8001fc0:	4a8c      	ldr	r2, [pc, #560]	; (80021f4 <HAL_DMA_Abort_IT+0x260>)
 8001fc2:	4293      	cmp	r3, r2
 8001fc4:	d04a      	beq.n	800205c <HAL_DMA_Abort_IT+0xc8>
 8001fc6:	687b      	ldr	r3, [r7, #4]
 8001fc8:	681b      	ldr	r3, [r3, #0]
 8001fca:	4a8b      	ldr	r2, [pc, #556]	; (80021f8 <HAL_DMA_Abort_IT+0x264>)
 8001fcc:	4293      	cmp	r3, r2
 8001fce:	d045      	beq.n	800205c <HAL_DMA_Abort_IT+0xc8>
 8001fd0:	687b      	ldr	r3, [r7, #4]
 8001fd2:	681b      	ldr	r3, [r3, #0]
 8001fd4:	4a89      	ldr	r2, [pc, #548]	; (80021fc <HAL_DMA_Abort_IT+0x268>)
 8001fd6:	4293      	cmp	r3, r2
 8001fd8:	d040      	beq.n	800205c <HAL_DMA_Abort_IT+0xc8>
 8001fda:	687b      	ldr	r3, [r7, #4]
 8001fdc:	681b      	ldr	r3, [r3, #0]
 8001fde:	4a88      	ldr	r2, [pc, #544]	; (8002200 <HAL_DMA_Abort_IT+0x26c>)
 8001fe0:	4293      	cmp	r3, r2
 8001fe2:	d03b      	beq.n	800205c <HAL_DMA_Abort_IT+0xc8>
 8001fe4:	687b      	ldr	r3, [r7, #4]
 8001fe6:	681b      	ldr	r3, [r3, #0]
 8001fe8:	4a86      	ldr	r2, [pc, #536]	; (8002204 <HAL_DMA_Abort_IT+0x270>)
 8001fea:	4293      	cmp	r3, r2
 8001fec:	d036      	beq.n	800205c <HAL_DMA_Abort_IT+0xc8>
 8001fee:	687b      	ldr	r3, [r7, #4]
 8001ff0:	681b      	ldr	r3, [r3, #0]
 8001ff2:	4a85      	ldr	r2, [pc, #532]	; (8002208 <HAL_DMA_Abort_IT+0x274>)
 8001ff4:	4293      	cmp	r3, r2
 8001ff6:	d031      	beq.n	800205c <HAL_DMA_Abort_IT+0xc8>
 8001ff8:	687b      	ldr	r3, [r7, #4]
 8001ffa:	681b      	ldr	r3, [r3, #0]
 8001ffc:	4a83      	ldr	r2, [pc, #524]	; (800220c <HAL_DMA_Abort_IT+0x278>)
 8001ffe:	4293      	cmp	r3, r2
 8002000:	d02c      	beq.n	800205c <HAL_DMA_Abort_IT+0xc8>
 8002002:	687b      	ldr	r3, [r7, #4]
 8002004:	681b      	ldr	r3, [r3, #0]
 8002006:	4a82      	ldr	r2, [pc, #520]	; (8002210 <HAL_DMA_Abort_IT+0x27c>)
 8002008:	4293      	cmp	r3, r2
 800200a:	d027      	beq.n	800205c <HAL_DMA_Abort_IT+0xc8>
 800200c:	687b      	ldr	r3, [r7, #4]
 800200e:	681b      	ldr	r3, [r3, #0]
 8002010:	4a80      	ldr	r2, [pc, #512]	; (8002214 <HAL_DMA_Abort_IT+0x280>)
 8002012:	4293      	cmp	r3, r2
 8002014:	d022      	beq.n	800205c <HAL_DMA_Abort_IT+0xc8>
 8002016:	687b      	ldr	r3, [r7, #4]
 8002018:	681b      	ldr	r3, [r3, #0]
 800201a:	4a7f      	ldr	r2, [pc, #508]	; (8002218 <HAL_DMA_Abort_IT+0x284>)
 800201c:	4293      	cmp	r3, r2
 800201e:	d01d      	beq.n	800205c <HAL_DMA_Abort_IT+0xc8>
 8002020:	687b      	ldr	r3, [r7, #4]
 8002022:	681b      	ldr	r3, [r3, #0]
 8002024:	4a7d      	ldr	r2, [pc, #500]	; (800221c <HAL_DMA_Abort_IT+0x288>)
 8002026:	4293      	cmp	r3, r2
 8002028:	d018      	beq.n	800205c <HAL_DMA_Abort_IT+0xc8>
 800202a:	687b      	ldr	r3, [r7, #4]
 800202c:	681b      	ldr	r3, [r3, #0]
 800202e:	4a7c      	ldr	r2, [pc, #496]	; (8002220 <HAL_DMA_Abort_IT+0x28c>)
 8002030:	4293      	cmp	r3, r2
 8002032:	d013      	beq.n	800205c <HAL_DMA_Abort_IT+0xc8>
 8002034:	687b      	ldr	r3, [r7, #4]
 8002036:	681b      	ldr	r3, [r3, #0]
 8002038:	4a7a      	ldr	r2, [pc, #488]	; (8002224 <HAL_DMA_Abort_IT+0x290>)
 800203a:	4293      	cmp	r3, r2
 800203c:	d00e      	beq.n	800205c <HAL_DMA_Abort_IT+0xc8>
 800203e:	687b      	ldr	r3, [r7, #4]
 8002040:	681b      	ldr	r3, [r3, #0]
 8002042:	4a79      	ldr	r2, [pc, #484]	; (8002228 <HAL_DMA_Abort_IT+0x294>)
 8002044:	4293      	cmp	r3, r2
 8002046:	d009      	beq.n	800205c <HAL_DMA_Abort_IT+0xc8>
 8002048:	687b      	ldr	r3, [r7, #4]
 800204a:	681b      	ldr	r3, [r3, #0]
 800204c:	4a77      	ldr	r2, [pc, #476]	; (800222c <HAL_DMA_Abort_IT+0x298>)
 800204e:	4293      	cmp	r3, r2
 8002050:	d004      	beq.n	800205c <HAL_DMA_Abort_IT+0xc8>
 8002052:	687b      	ldr	r3, [r7, #4]
 8002054:	681b      	ldr	r3, [r3, #0]
 8002056:	4a76      	ldr	r2, [pc, #472]	; (8002230 <HAL_DMA_Abort_IT+0x29c>)
 8002058:	4293      	cmp	r3, r2
 800205a:	d101      	bne.n	8002060 <HAL_DMA_Abort_IT+0xcc>
 800205c:	2301      	movs	r3, #1
 800205e:	e000      	b.n	8002062 <HAL_DMA_Abort_IT+0xce>
 8002060:	2300      	movs	r3, #0
 8002062:	2b00      	cmp	r3, #0
 8002064:	d065      	beq.n	8002132 <HAL_DMA_Abort_IT+0x19e>
    {
      /* Set Abort State  */
      hdma->State = HAL_DMA_STATE_ABORT;
 8002066:	687b      	ldr	r3, [r7, #4]
 8002068:	2204      	movs	r2, #4
 800206a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 800206e:	687b      	ldr	r3, [r7, #4]
 8002070:	681b      	ldr	r3, [r3, #0]
 8002072:	4a60      	ldr	r2, [pc, #384]	; (80021f4 <HAL_DMA_Abort_IT+0x260>)
 8002074:	4293      	cmp	r3, r2
 8002076:	d04a      	beq.n	800210e <HAL_DMA_Abort_IT+0x17a>
 8002078:	687b      	ldr	r3, [r7, #4]
 800207a:	681b      	ldr	r3, [r3, #0]
 800207c:	4a5e      	ldr	r2, [pc, #376]	; (80021f8 <HAL_DMA_Abort_IT+0x264>)
 800207e:	4293      	cmp	r3, r2
 8002080:	d045      	beq.n	800210e <HAL_DMA_Abort_IT+0x17a>
 8002082:	687b      	ldr	r3, [r7, #4]
 8002084:	681b      	ldr	r3, [r3, #0]
 8002086:	4a5d      	ldr	r2, [pc, #372]	; (80021fc <HAL_DMA_Abort_IT+0x268>)
 8002088:	4293      	cmp	r3, r2
 800208a:	d040      	beq.n	800210e <HAL_DMA_Abort_IT+0x17a>
 800208c:	687b      	ldr	r3, [r7, #4]
 800208e:	681b      	ldr	r3, [r3, #0]
 8002090:	4a5b      	ldr	r2, [pc, #364]	; (8002200 <HAL_DMA_Abort_IT+0x26c>)
 8002092:	4293      	cmp	r3, r2
 8002094:	d03b      	beq.n	800210e <HAL_DMA_Abort_IT+0x17a>
 8002096:	687b      	ldr	r3, [r7, #4]
 8002098:	681b      	ldr	r3, [r3, #0]
 800209a:	4a5a      	ldr	r2, [pc, #360]	; (8002204 <HAL_DMA_Abort_IT+0x270>)
 800209c:	4293      	cmp	r3, r2
 800209e:	d036      	beq.n	800210e <HAL_DMA_Abort_IT+0x17a>
 80020a0:	687b      	ldr	r3, [r7, #4]
 80020a2:	681b      	ldr	r3, [r3, #0]
 80020a4:	4a58      	ldr	r2, [pc, #352]	; (8002208 <HAL_DMA_Abort_IT+0x274>)
 80020a6:	4293      	cmp	r3, r2
 80020a8:	d031      	beq.n	800210e <HAL_DMA_Abort_IT+0x17a>
 80020aa:	687b      	ldr	r3, [r7, #4]
 80020ac:	681b      	ldr	r3, [r3, #0]
 80020ae:	4a57      	ldr	r2, [pc, #348]	; (800220c <HAL_DMA_Abort_IT+0x278>)
 80020b0:	4293      	cmp	r3, r2
 80020b2:	d02c      	beq.n	800210e <HAL_DMA_Abort_IT+0x17a>
 80020b4:	687b      	ldr	r3, [r7, #4]
 80020b6:	681b      	ldr	r3, [r3, #0]
 80020b8:	4a55      	ldr	r2, [pc, #340]	; (8002210 <HAL_DMA_Abort_IT+0x27c>)
 80020ba:	4293      	cmp	r3, r2
 80020bc:	d027      	beq.n	800210e <HAL_DMA_Abort_IT+0x17a>
 80020be:	687b      	ldr	r3, [r7, #4]
 80020c0:	681b      	ldr	r3, [r3, #0]
 80020c2:	4a54      	ldr	r2, [pc, #336]	; (8002214 <HAL_DMA_Abort_IT+0x280>)
 80020c4:	4293      	cmp	r3, r2
 80020c6:	d022      	beq.n	800210e <HAL_DMA_Abort_IT+0x17a>
 80020c8:	687b      	ldr	r3, [r7, #4]
 80020ca:	681b      	ldr	r3, [r3, #0]
 80020cc:	4a52      	ldr	r2, [pc, #328]	; (8002218 <HAL_DMA_Abort_IT+0x284>)
 80020ce:	4293      	cmp	r3, r2
 80020d0:	d01d      	beq.n	800210e <HAL_DMA_Abort_IT+0x17a>
 80020d2:	687b      	ldr	r3, [r7, #4]
 80020d4:	681b      	ldr	r3, [r3, #0]
 80020d6:	4a51      	ldr	r2, [pc, #324]	; (800221c <HAL_DMA_Abort_IT+0x288>)
 80020d8:	4293      	cmp	r3, r2
 80020da:	d018      	beq.n	800210e <HAL_DMA_Abort_IT+0x17a>
 80020dc:	687b      	ldr	r3, [r7, #4]
 80020de:	681b      	ldr	r3, [r3, #0]
 80020e0:	4a4f      	ldr	r2, [pc, #316]	; (8002220 <HAL_DMA_Abort_IT+0x28c>)
 80020e2:	4293      	cmp	r3, r2
 80020e4:	d013      	beq.n	800210e <HAL_DMA_Abort_IT+0x17a>
 80020e6:	687b      	ldr	r3, [r7, #4]
 80020e8:	681b      	ldr	r3, [r3, #0]
 80020ea:	4a4e      	ldr	r2, [pc, #312]	; (8002224 <HAL_DMA_Abort_IT+0x290>)
 80020ec:	4293      	cmp	r3, r2
 80020ee:	d00e      	beq.n	800210e <HAL_DMA_Abort_IT+0x17a>
 80020f0:	687b      	ldr	r3, [r7, #4]
 80020f2:	681b      	ldr	r3, [r3, #0]
 80020f4:	4a4c      	ldr	r2, [pc, #304]	; (8002228 <HAL_DMA_Abort_IT+0x294>)
 80020f6:	4293      	cmp	r3, r2
 80020f8:	d009      	beq.n	800210e <HAL_DMA_Abort_IT+0x17a>
 80020fa:	687b      	ldr	r3, [r7, #4]
 80020fc:	681b      	ldr	r3, [r3, #0]
 80020fe:	4a4b      	ldr	r2, [pc, #300]	; (800222c <HAL_DMA_Abort_IT+0x298>)
 8002100:	4293      	cmp	r3, r2
 8002102:	d004      	beq.n	800210e <HAL_DMA_Abort_IT+0x17a>
 8002104:	687b      	ldr	r3, [r7, #4]
 8002106:	681b      	ldr	r3, [r3, #0]
 8002108:	4a49      	ldr	r2, [pc, #292]	; (8002230 <HAL_DMA_Abort_IT+0x29c>)
 800210a:	4293      	cmp	r3, r2
 800210c:	d108      	bne.n	8002120 <HAL_DMA_Abort_IT+0x18c>
 800210e:	687b      	ldr	r3, [r7, #4]
 8002110:	681b      	ldr	r3, [r3, #0]
 8002112:	681a      	ldr	r2, [r3, #0]
 8002114:	687b      	ldr	r3, [r7, #4]
 8002116:	681b      	ldr	r3, [r3, #0]
 8002118:	f022 0201 	bic.w	r2, r2, #1
 800211c:	601a      	str	r2, [r3, #0]
 800211e:	e147      	b.n	80023b0 <HAL_DMA_Abort_IT+0x41c>
 8002120:	687b      	ldr	r3, [r7, #4]
 8002122:	681b      	ldr	r3, [r3, #0]
 8002124:	681a      	ldr	r2, [r3, #0]
 8002126:	687b      	ldr	r3, [r7, #4]
 8002128:	681b      	ldr	r3, [r3, #0]
 800212a:	f022 0201 	bic.w	r2, r2, #1
 800212e:	601a      	str	r2, [r3, #0]
 8002130:	e13e      	b.n	80023b0 <HAL_DMA_Abort_IT+0x41c>
    }
    else /* BDMA channel */
    {
      /* Disable DMA All Interrupts  */
      ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  &= ~(BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE);
 8002132:	687b      	ldr	r3, [r7, #4]
 8002134:	681b      	ldr	r3, [r3, #0]
 8002136:	681a      	ldr	r2, [r3, #0]
 8002138:	687b      	ldr	r3, [r7, #4]
 800213a:	681b      	ldr	r3, [r3, #0]
 800213c:	f022 020e 	bic.w	r2, r2, #14
 8002140:	601a      	str	r2, [r3, #0]

      /* Disable the channel */
      __HAL_DMA_DISABLE(hdma);
 8002142:	687b      	ldr	r3, [r7, #4]
 8002144:	681b      	ldr	r3, [r3, #0]
 8002146:	4a2b      	ldr	r2, [pc, #172]	; (80021f4 <HAL_DMA_Abort_IT+0x260>)
 8002148:	4293      	cmp	r3, r2
 800214a:	d04a      	beq.n	80021e2 <HAL_DMA_Abort_IT+0x24e>
 800214c:	687b      	ldr	r3, [r7, #4]
 800214e:	681b      	ldr	r3, [r3, #0]
 8002150:	4a29      	ldr	r2, [pc, #164]	; (80021f8 <HAL_DMA_Abort_IT+0x264>)
 8002152:	4293      	cmp	r3, r2
 8002154:	d045      	beq.n	80021e2 <HAL_DMA_Abort_IT+0x24e>
 8002156:	687b      	ldr	r3, [r7, #4]
 8002158:	681b      	ldr	r3, [r3, #0]
 800215a:	4a28      	ldr	r2, [pc, #160]	; (80021fc <HAL_DMA_Abort_IT+0x268>)
 800215c:	4293      	cmp	r3, r2
 800215e:	d040      	beq.n	80021e2 <HAL_DMA_Abort_IT+0x24e>
 8002160:	687b      	ldr	r3, [r7, #4]
 8002162:	681b      	ldr	r3, [r3, #0]
 8002164:	4a26      	ldr	r2, [pc, #152]	; (8002200 <HAL_DMA_Abort_IT+0x26c>)
 8002166:	4293      	cmp	r3, r2
 8002168:	d03b      	beq.n	80021e2 <HAL_DMA_Abort_IT+0x24e>
 800216a:	687b      	ldr	r3, [r7, #4]
 800216c:	681b      	ldr	r3, [r3, #0]
 800216e:	4a25      	ldr	r2, [pc, #148]	; (8002204 <HAL_DMA_Abort_IT+0x270>)
 8002170:	4293      	cmp	r3, r2
 8002172:	d036      	beq.n	80021e2 <HAL_DMA_Abort_IT+0x24e>
 8002174:	687b      	ldr	r3, [r7, #4]
 8002176:	681b      	ldr	r3, [r3, #0]
 8002178:	4a23      	ldr	r2, [pc, #140]	; (8002208 <HAL_DMA_Abort_IT+0x274>)
 800217a:	4293      	cmp	r3, r2
 800217c:	d031      	beq.n	80021e2 <HAL_DMA_Abort_IT+0x24e>
 800217e:	687b      	ldr	r3, [r7, #4]
 8002180:	681b      	ldr	r3, [r3, #0]
 8002182:	4a22      	ldr	r2, [pc, #136]	; (800220c <HAL_DMA_Abort_IT+0x278>)
 8002184:	4293      	cmp	r3, r2
 8002186:	d02c      	beq.n	80021e2 <HAL_DMA_Abort_IT+0x24e>
 8002188:	687b      	ldr	r3, [r7, #4]
 800218a:	681b      	ldr	r3, [r3, #0]
 800218c:	4a20      	ldr	r2, [pc, #128]	; (8002210 <HAL_DMA_Abort_IT+0x27c>)
 800218e:	4293      	cmp	r3, r2
 8002190:	d027      	beq.n	80021e2 <HAL_DMA_Abort_IT+0x24e>
 8002192:	687b      	ldr	r3, [r7, #4]
 8002194:	681b      	ldr	r3, [r3, #0]
 8002196:	4a1f      	ldr	r2, [pc, #124]	; (8002214 <HAL_DMA_Abort_IT+0x280>)
 8002198:	4293      	cmp	r3, r2
 800219a:	d022      	beq.n	80021e2 <HAL_DMA_Abort_IT+0x24e>
 800219c:	687b      	ldr	r3, [r7, #4]
 800219e:	681b      	ldr	r3, [r3, #0]
 80021a0:	4a1d      	ldr	r2, [pc, #116]	; (8002218 <HAL_DMA_Abort_IT+0x284>)
 80021a2:	4293      	cmp	r3, r2
 80021a4:	d01d      	beq.n	80021e2 <HAL_DMA_Abort_IT+0x24e>
 80021a6:	687b      	ldr	r3, [r7, #4]
 80021a8:	681b      	ldr	r3, [r3, #0]
 80021aa:	4a1c      	ldr	r2, [pc, #112]	; (800221c <HAL_DMA_Abort_IT+0x288>)
 80021ac:	4293      	cmp	r3, r2
 80021ae:	d018      	beq.n	80021e2 <HAL_DMA_Abort_IT+0x24e>
 80021b0:	687b      	ldr	r3, [r7, #4]
 80021b2:	681b      	ldr	r3, [r3, #0]
 80021b4:	4a1a      	ldr	r2, [pc, #104]	; (8002220 <HAL_DMA_Abort_IT+0x28c>)
 80021b6:	4293      	cmp	r3, r2
 80021b8:	d013      	beq.n	80021e2 <HAL_DMA_Abort_IT+0x24e>
 80021ba:	687b      	ldr	r3, [r7, #4]
 80021bc:	681b      	ldr	r3, [r3, #0]
 80021be:	4a19      	ldr	r2, [pc, #100]	; (8002224 <HAL_DMA_Abort_IT+0x290>)
 80021c0:	4293      	cmp	r3, r2
 80021c2:	d00e      	beq.n	80021e2 <HAL_DMA_Abort_IT+0x24e>
 80021c4:	687b      	ldr	r3, [r7, #4]
 80021c6:	681b      	ldr	r3, [r3, #0]
 80021c8:	4a17      	ldr	r2, [pc, #92]	; (8002228 <HAL_DMA_Abort_IT+0x294>)
 80021ca:	4293      	cmp	r3, r2
 80021cc:	d009      	beq.n	80021e2 <HAL_DMA_Abort_IT+0x24e>
 80021ce:	687b      	ldr	r3, [r7, #4]
 80021d0:	681b      	ldr	r3, [r3, #0]
 80021d2:	4a16      	ldr	r2, [pc, #88]	; (800222c <HAL_DMA_Abort_IT+0x298>)
 80021d4:	4293      	cmp	r3, r2
 80021d6:	d004      	beq.n	80021e2 <HAL_DMA_Abort_IT+0x24e>
 80021d8:	687b      	ldr	r3, [r7, #4]
 80021da:	681b      	ldr	r3, [r3, #0]
 80021dc:	4a14      	ldr	r2, [pc, #80]	; (8002230 <HAL_DMA_Abort_IT+0x29c>)
 80021de:	4293      	cmp	r3, r2
 80021e0:	d128      	bne.n	8002234 <HAL_DMA_Abort_IT+0x2a0>
 80021e2:	687b      	ldr	r3, [r7, #4]
 80021e4:	681b      	ldr	r3, [r3, #0]
 80021e6:	681a      	ldr	r2, [r3, #0]
 80021e8:	687b      	ldr	r3, [r7, #4]
 80021ea:	681b      	ldr	r3, [r3, #0]
 80021ec:	f022 0201 	bic.w	r2, r2, #1
 80021f0:	601a      	str	r2, [r3, #0]
 80021f2:	e027      	b.n	8002244 <HAL_DMA_Abort_IT+0x2b0>
 80021f4:	40020010 	.word	0x40020010
 80021f8:	40020028 	.word	0x40020028
 80021fc:	40020040 	.word	0x40020040
 8002200:	40020058 	.word	0x40020058
 8002204:	40020070 	.word	0x40020070
 8002208:	40020088 	.word	0x40020088
 800220c:	400200a0 	.word	0x400200a0
 8002210:	400200b8 	.word	0x400200b8
 8002214:	40020410 	.word	0x40020410
 8002218:	40020428 	.word	0x40020428
 800221c:	40020440 	.word	0x40020440
 8002220:	40020458 	.word	0x40020458
 8002224:	40020470 	.word	0x40020470
 8002228:	40020488 	.word	0x40020488
 800222c:	400204a0 	.word	0x400204a0
 8002230:	400204b8 	.word	0x400204b8
 8002234:	687b      	ldr	r3, [r7, #4]
 8002236:	681b      	ldr	r3, [r3, #0]
 8002238:	681a      	ldr	r2, [r3, #0]
 800223a:	687b      	ldr	r3, [r7, #4]
 800223c:	681b      	ldr	r3, [r3, #0]
 800223e:	f022 0201 	bic.w	r2, r2, #1
 8002242:	601a      	str	r2, [r3, #0]

      if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8002244:	687b      	ldr	r3, [r7, #4]
 8002246:	681b      	ldr	r3, [r3, #0]
 8002248:	4a5c      	ldr	r2, [pc, #368]	; (80023bc <HAL_DMA_Abort_IT+0x428>)
 800224a:	4293      	cmp	r3, r2
 800224c:	d072      	beq.n	8002334 <HAL_DMA_Abort_IT+0x3a0>
 800224e:	687b      	ldr	r3, [r7, #4]
 8002250:	681b      	ldr	r3, [r3, #0]
 8002252:	4a5b      	ldr	r2, [pc, #364]	; (80023c0 <HAL_DMA_Abort_IT+0x42c>)
 8002254:	4293      	cmp	r3, r2
 8002256:	d06d      	beq.n	8002334 <HAL_DMA_Abort_IT+0x3a0>
 8002258:	687b      	ldr	r3, [r7, #4]
 800225a:	681b      	ldr	r3, [r3, #0]
 800225c:	4a59      	ldr	r2, [pc, #356]	; (80023c4 <HAL_DMA_Abort_IT+0x430>)
 800225e:	4293      	cmp	r3, r2
 8002260:	d068      	beq.n	8002334 <HAL_DMA_Abort_IT+0x3a0>
 8002262:	687b      	ldr	r3, [r7, #4]
 8002264:	681b      	ldr	r3, [r3, #0]
 8002266:	4a58      	ldr	r2, [pc, #352]	; (80023c8 <HAL_DMA_Abort_IT+0x434>)
 8002268:	4293      	cmp	r3, r2
 800226a:	d063      	beq.n	8002334 <HAL_DMA_Abort_IT+0x3a0>
 800226c:	687b      	ldr	r3, [r7, #4]
 800226e:	681b      	ldr	r3, [r3, #0]
 8002270:	4a56      	ldr	r2, [pc, #344]	; (80023cc <HAL_DMA_Abort_IT+0x438>)
 8002272:	4293      	cmp	r3, r2
 8002274:	d05e      	beq.n	8002334 <HAL_DMA_Abort_IT+0x3a0>
 8002276:	687b      	ldr	r3, [r7, #4]
 8002278:	681b      	ldr	r3, [r3, #0]
 800227a:	4a55      	ldr	r2, [pc, #340]	; (80023d0 <HAL_DMA_Abort_IT+0x43c>)
 800227c:	4293      	cmp	r3, r2
 800227e:	d059      	beq.n	8002334 <HAL_DMA_Abort_IT+0x3a0>
 8002280:	687b      	ldr	r3, [r7, #4]
 8002282:	681b      	ldr	r3, [r3, #0]
 8002284:	4a53      	ldr	r2, [pc, #332]	; (80023d4 <HAL_DMA_Abort_IT+0x440>)
 8002286:	4293      	cmp	r3, r2
 8002288:	d054      	beq.n	8002334 <HAL_DMA_Abort_IT+0x3a0>
 800228a:	687b      	ldr	r3, [r7, #4]
 800228c:	681b      	ldr	r3, [r3, #0]
 800228e:	4a52      	ldr	r2, [pc, #328]	; (80023d8 <HAL_DMA_Abort_IT+0x444>)
 8002290:	4293      	cmp	r3, r2
 8002292:	d04f      	beq.n	8002334 <HAL_DMA_Abort_IT+0x3a0>
 8002294:	687b      	ldr	r3, [r7, #4]
 8002296:	681b      	ldr	r3, [r3, #0]
 8002298:	4a50      	ldr	r2, [pc, #320]	; (80023dc <HAL_DMA_Abort_IT+0x448>)
 800229a:	4293      	cmp	r3, r2
 800229c:	d04a      	beq.n	8002334 <HAL_DMA_Abort_IT+0x3a0>
 800229e:	687b      	ldr	r3, [r7, #4]
 80022a0:	681b      	ldr	r3, [r3, #0]
 80022a2:	4a4f      	ldr	r2, [pc, #316]	; (80023e0 <HAL_DMA_Abort_IT+0x44c>)
 80022a4:	4293      	cmp	r3, r2
 80022a6:	d045      	beq.n	8002334 <HAL_DMA_Abort_IT+0x3a0>
 80022a8:	687b      	ldr	r3, [r7, #4]
 80022aa:	681b      	ldr	r3, [r3, #0]
 80022ac:	4a4d      	ldr	r2, [pc, #308]	; (80023e4 <HAL_DMA_Abort_IT+0x450>)
 80022ae:	4293      	cmp	r3, r2
 80022b0:	d040      	beq.n	8002334 <HAL_DMA_Abort_IT+0x3a0>
 80022b2:	687b      	ldr	r3, [r7, #4]
 80022b4:	681b      	ldr	r3, [r3, #0]
 80022b6:	4a4c      	ldr	r2, [pc, #304]	; (80023e8 <HAL_DMA_Abort_IT+0x454>)
 80022b8:	4293      	cmp	r3, r2
 80022ba:	d03b      	beq.n	8002334 <HAL_DMA_Abort_IT+0x3a0>
 80022bc:	687b      	ldr	r3, [r7, #4]
 80022be:	681b      	ldr	r3, [r3, #0]
 80022c0:	4a4a      	ldr	r2, [pc, #296]	; (80023ec <HAL_DMA_Abort_IT+0x458>)
 80022c2:	4293      	cmp	r3, r2
 80022c4:	d036      	beq.n	8002334 <HAL_DMA_Abort_IT+0x3a0>
 80022c6:	687b      	ldr	r3, [r7, #4]
 80022c8:	681b      	ldr	r3, [r3, #0]
 80022ca:	4a49      	ldr	r2, [pc, #292]	; (80023f0 <HAL_DMA_Abort_IT+0x45c>)
 80022cc:	4293      	cmp	r3, r2
 80022ce:	d031      	beq.n	8002334 <HAL_DMA_Abort_IT+0x3a0>
 80022d0:	687b      	ldr	r3, [r7, #4]
 80022d2:	681b      	ldr	r3, [r3, #0]
 80022d4:	4a47      	ldr	r2, [pc, #284]	; (80023f4 <HAL_DMA_Abort_IT+0x460>)
 80022d6:	4293      	cmp	r3, r2
 80022d8:	d02c      	beq.n	8002334 <HAL_DMA_Abort_IT+0x3a0>
 80022da:	687b      	ldr	r3, [r7, #4]
 80022dc:	681b      	ldr	r3, [r3, #0]
 80022de:	4a46      	ldr	r2, [pc, #280]	; (80023f8 <HAL_DMA_Abort_IT+0x464>)
 80022e0:	4293      	cmp	r3, r2
 80022e2:	d027      	beq.n	8002334 <HAL_DMA_Abort_IT+0x3a0>
 80022e4:	687b      	ldr	r3, [r7, #4]
 80022e6:	681b      	ldr	r3, [r3, #0]
 80022e8:	4a44      	ldr	r2, [pc, #272]	; (80023fc <HAL_DMA_Abort_IT+0x468>)
 80022ea:	4293      	cmp	r3, r2
 80022ec:	d022      	beq.n	8002334 <HAL_DMA_Abort_IT+0x3a0>
 80022ee:	687b      	ldr	r3, [r7, #4]
 80022f0:	681b      	ldr	r3, [r3, #0]
 80022f2:	4a43      	ldr	r2, [pc, #268]	; (8002400 <HAL_DMA_Abort_IT+0x46c>)
 80022f4:	4293      	cmp	r3, r2
 80022f6:	d01d      	beq.n	8002334 <HAL_DMA_Abort_IT+0x3a0>
 80022f8:	687b      	ldr	r3, [r7, #4]
 80022fa:	681b      	ldr	r3, [r3, #0]
 80022fc:	4a41      	ldr	r2, [pc, #260]	; (8002404 <HAL_DMA_Abort_IT+0x470>)
 80022fe:	4293      	cmp	r3, r2
 8002300:	d018      	beq.n	8002334 <HAL_DMA_Abort_IT+0x3a0>
 8002302:	687b      	ldr	r3, [r7, #4]
 8002304:	681b      	ldr	r3, [r3, #0]
 8002306:	4a40      	ldr	r2, [pc, #256]	; (8002408 <HAL_DMA_Abort_IT+0x474>)
 8002308:	4293      	cmp	r3, r2
 800230a:	d013      	beq.n	8002334 <HAL_DMA_Abort_IT+0x3a0>
 800230c:	687b      	ldr	r3, [r7, #4]
 800230e:	681b      	ldr	r3, [r3, #0]
 8002310:	4a3e      	ldr	r2, [pc, #248]	; (800240c <HAL_DMA_Abort_IT+0x478>)
 8002312:	4293      	cmp	r3, r2
 8002314:	d00e      	beq.n	8002334 <HAL_DMA_Abort_IT+0x3a0>
 8002316:	687b      	ldr	r3, [r7, #4]
 8002318:	681b      	ldr	r3, [r3, #0]
 800231a:	4a3d      	ldr	r2, [pc, #244]	; (8002410 <HAL_DMA_Abort_IT+0x47c>)
 800231c:	4293      	cmp	r3, r2
 800231e:	d009      	beq.n	8002334 <HAL_DMA_Abort_IT+0x3a0>
 8002320:	687b      	ldr	r3, [r7, #4]
 8002322:	681b      	ldr	r3, [r3, #0]
 8002324:	4a3b      	ldr	r2, [pc, #236]	; (8002414 <HAL_DMA_Abort_IT+0x480>)
 8002326:	4293      	cmp	r3, r2
 8002328:	d004      	beq.n	8002334 <HAL_DMA_Abort_IT+0x3a0>
 800232a:	687b      	ldr	r3, [r7, #4]
 800232c:	681b      	ldr	r3, [r3, #0]
 800232e:	4a3a      	ldr	r2, [pc, #232]	; (8002418 <HAL_DMA_Abort_IT+0x484>)
 8002330:	4293      	cmp	r3, r2
 8002332:	d101      	bne.n	8002338 <HAL_DMA_Abort_IT+0x3a4>
 8002334:	2301      	movs	r3, #1
 8002336:	e000      	b.n	800233a <HAL_DMA_Abort_IT+0x3a6>
 8002338:	2300      	movs	r3, #0
 800233a:	2b00      	cmp	r3, #0
 800233c:	d028      	beq.n	8002390 <HAL_DMA_Abort_IT+0x3fc>
      {
        /* disable the DMAMUX sync overrun IT */
        hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 800233e:	687b      	ldr	r3, [r7, #4]
 8002340:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002342:	681a      	ldr	r2, [r3, #0]
 8002344:	687b      	ldr	r3, [r7, #4]
 8002346:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002348:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800234c:	601a      	str	r2, [r3, #0]

        /* Clear all flags */
        regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 800234e:	687b      	ldr	r3, [r7, #4]
 8002350:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002352:	60fb      	str	r3, [r7, #12]
        regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 8002354:	687b      	ldr	r3, [r7, #4]
 8002356:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002358:	f003 031f 	and.w	r3, r3, #31
 800235c:	2201      	movs	r2, #1
 800235e:	409a      	lsls	r2, r3
 8002360:	68fb      	ldr	r3, [r7, #12]
 8002362:	605a      	str	r2, [r3, #4]

        /* Clear the DMAMUX synchro overrun flag */
        hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8002364:	687b      	ldr	r3, [r7, #4]
 8002366:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8002368:	687a      	ldr	r2, [r7, #4]
 800236a:	6e92      	ldr	r2, [r2, #104]	; 0x68
 800236c:	605a      	str	r2, [r3, #4]

        if(hdma->DMAmuxRequestGen != 0U)
 800236e:	687b      	ldr	r3, [r7, #4]
 8002370:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8002372:	2b00      	cmp	r3, #0
 8002374:	d00c      	beq.n	8002390 <HAL_DMA_Abort_IT+0x3fc>
        {
          /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
          /* disable the request gen overrun IT */
          hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8002376:	687b      	ldr	r3, [r7, #4]
 8002378:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800237a:	681a      	ldr	r2, [r3, #0]
 800237c:	687b      	ldr	r3, [r7, #4]
 800237e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8002380:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8002384:	601a      	str	r2, [r3, #0]

          /* Clear the DMAMUX request generator overrun flag */
          hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8002386:	687b      	ldr	r3, [r7, #4]
 8002388:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800238a:	687a      	ldr	r2, [r7, #4]
 800238c:	6f52      	ldr	r2, [r2, #116]	; 0x74
 800238e:	605a      	str	r2, [r3, #4]
        }
      }

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8002390:	687b      	ldr	r3, [r7, #4]
 8002392:	2200      	movs	r2, #0
 8002394:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8002398:	687b      	ldr	r3, [r7, #4]
 800239a:	2201      	movs	r2, #1
 800239c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Call User Abort callback */
      if(hdma->XferAbortCallback != NULL)
 80023a0:	687b      	ldr	r3, [r7, #4]
 80023a2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80023a4:	2b00      	cmp	r3, #0
 80023a6:	d003      	beq.n	80023b0 <HAL_DMA_Abort_IT+0x41c>
      {
        hdma->XferAbortCallback(hdma);
 80023a8:	687b      	ldr	r3, [r7, #4]
 80023aa:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80023ac:	6878      	ldr	r0, [r7, #4]
 80023ae:	4798      	blx	r3
      }
    }
  }

  return HAL_OK;
 80023b0:	2300      	movs	r3, #0
}
 80023b2:	4618      	mov	r0, r3
 80023b4:	3710      	adds	r7, #16
 80023b6:	46bd      	mov	sp, r7
 80023b8:	bd80      	pop	{r7, pc}
 80023ba:	bf00      	nop
 80023bc:	40020010 	.word	0x40020010
 80023c0:	40020028 	.word	0x40020028
 80023c4:	40020040 	.word	0x40020040
 80023c8:	40020058 	.word	0x40020058
 80023cc:	40020070 	.word	0x40020070
 80023d0:	40020088 	.word	0x40020088
 80023d4:	400200a0 	.word	0x400200a0
 80023d8:	400200b8 	.word	0x400200b8
 80023dc:	40020410 	.word	0x40020410
 80023e0:	40020428 	.word	0x40020428
 80023e4:	40020440 	.word	0x40020440
 80023e8:	40020458 	.word	0x40020458
 80023ec:	40020470 	.word	0x40020470
 80023f0:	40020488 	.word	0x40020488
 80023f4:	400204a0 	.word	0x400204a0
 80023f8:	400204b8 	.word	0x400204b8
 80023fc:	58025408 	.word	0x58025408
 8002400:	5802541c 	.word	0x5802541c
 8002404:	58025430 	.word	0x58025430
 8002408:	58025444 	.word	0x58025444
 800240c:	58025458 	.word	0x58025458
 8002410:	5802546c 	.word	0x5802546c
 8002414:	58025480 	.word	0x58025480
 8002418:	58025494 	.word	0x58025494

0800241c <HAL_DMA2D_Init>:
  * @param  hdma2d pointer to a DMA2D_HandleTypeDef structure that contains
  *                 the configuration information for the DMA2D.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA2D_Init(DMA2D_HandleTypeDef *hdma2d)
{
 800241c:	b580      	push	{r7, lr}
 800241e:	b082      	sub	sp, #8
 8002420:	af00      	add	r7, sp, #0
 8002422:	6078      	str	r0, [r7, #4]
  /* Check the DMA2D peripheral state */
  if (hdma2d == NULL)
 8002424:	687b      	ldr	r3, [r7, #4]
 8002426:	2b00      	cmp	r3, #0
 8002428:	d101      	bne.n	800242e <HAL_DMA2D_Init+0x12>
  {
    return HAL_ERROR;
 800242a:	2301      	movs	r3, #1
 800242c:	e04f      	b.n	80024ce <HAL_DMA2D_Init+0xb2>

    /* Init the low level hardware */
    hdma2d->MspInitCallback(hdma2d);
  }
#else
  if (hdma2d->State == HAL_DMA2D_STATE_RESET)
 800242e:	687b      	ldr	r3, [r7, #4]
 8002430:	f893 3061 	ldrb.w	r3, [r3, #97]	; 0x61
 8002434:	b2db      	uxtb	r3, r3
 8002436:	2b00      	cmp	r3, #0
 8002438:	d106      	bne.n	8002448 <HAL_DMA2D_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hdma2d->Lock = HAL_UNLOCKED;
 800243a:	687b      	ldr	r3, [r7, #4]
 800243c:	2200      	movs	r2, #0
 800243e:	f883 2060 	strb.w	r2, [r3, #96]	; 0x60
    /* Init the low level hardware */
    HAL_DMA2D_MspInit(hdma2d);
 8002442:	6878      	ldr	r0, [r7, #4]
 8002444:	f7fe fd6a 	bl	8000f1c <HAL_DMA2D_MspInit>
  }
#endif /* (USE_HAL_DMA2D_REGISTER_CALLBACKS) */

  /* Change DMA2D peripheral state */
  hdma2d->State = HAL_DMA2D_STATE_BUSY;
 8002448:	687b      	ldr	r3, [r7, #4]
 800244a:	2202      	movs	r2, #2
 800244c:	f883 2061 	strb.w	r2, [r3, #97]	; 0x61

  /* DMA2D CR register configuration -------------------------------------------*/
  MODIFY_REG(hdma2d->Instance->CR, DMA2D_CR_MODE | DMA2D_CR_LOM, hdma2d->Init.Mode | hdma2d->Init.LineOffsetMode);
 8002450:	687b      	ldr	r3, [r7, #4]
 8002452:	681b      	ldr	r3, [r3, #0]
 8002454:	681a      	ldr	r2, [r3, #0]
 8002456:	4b20      	ldr	r3, [pc, #128]	; (80024d8 <HAL_DMA2D_Init+0xbc>)
 8002458:	4013      	ands	r3, r2
 800245a:	687a      	ldr	r2, [r7, #4]
 800245c:	6851      	ldr	r1, [r2, #4]
 800245e:	687a      	ldr	r2, [r7, #4]
 8002460:	69d2      	ldr	r2, [r2, #28]
 8002462:	4311      	orrs	r1, r2
 8002464:	687a      	ldr	r2, [r7, #4]
 8002466:	6812      	ldr	r2, [r2, #0]
 8002468:	430b      	orrs	r3, r1
 800246a:	6013      	str	r3, [r2, #0]

  /* DMA2D OPFCCR register configuration ---------------------------------------*/
  MODIFY_REG(hdma2d->Instance->OPFCCR, DMA2D_OPFCCR_CM | DMA2D_OPFCCR_SB,
 800246c:	687b      	ldr	r3, [r7, #4]
 800246e:	681b      	ldr	r3, [r3, #0]
 8002470:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002472:	4b1a      	ldr	r3, [pc, #104]	; (80024dc <HAL_DMA2D_Init+0xc0>)
 8002474:	4013      	ands	r3, r2
 8002476:	687a      	ldr	r2, [r7, #4]
 8002478:	6891      	ldr	r1, [r2, #8]
 800247a:	687a      	ldr	r2, [r7, #4]
 800247c:	6992      	ldr	r2, [r2, #24]
 800247e:	4311      	orrs	r1, r2
 8002480:	687a      	ldr	r2, [r7, #4]
 8002482:	6812      	ldr	r2, [r2, #0]
 8002484:	430b      	orrs	r3, r1
 8002486:	6353      	str	r3, [r2, #52]	; 0x34
             hdma2d->Init.ColorMode | hdma2d->Init.BytesSwap);

  /* DMA2D OOR register configuration ------------------------------------------*/
  MODIFY_REG(hdma2d->Instance->OOR, DMA2D_OOR_LO, hdma2d->Init.OutputOffset);
 8002488:	687b      	ldr	r3, [r7, #4]
 800248a:	681b      	ldr	r3, [r3, #0]
 800248c:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800248e:	4b14      	ldr	r3, [pc, #80]	; (80024e0 <HAL_DMA2D_Init+0xc4>)
 8002490:	4013      	ands	r3, r2
 8002492:	687a      	ldr	r2, [r7, #4]
 8002494:	68d1      	ldr	r1, [r2, #12]
 8002496:	687a      	ldr	r2, [r7, #4]
 8002498:	6812      	ldr	r2, [r2, #0]
 800249a:	430b      	orrs	r3, r1
 800249c:	6413      	str	r3, [r2, #64]	; 0x40
  /* DMA2D OPFCCR AI and RBS fields setting (Output Alpha Inversion)*/
  MODIFY_REG(hdma2d->Instance->OPFCCR, (DMA2D_OPFCCR_AI | DMA2D_OPFCCR_RBS),
 800249e:	687b      	ldr	r3, [r7, #4]
 80024a0:	681b      	ldr	r3, [r3, #0]
 80024a2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80024a4:	f423 1140 	bic.w	r1, r3, #3145728	; 0x300000
 80024a8:	687b      	ldr	r3, [r7, #4]
 80024aa:	691b      	ldr	r3, [r3, #16]
 80024ac:	051a      	lsls	r2, r3, #20
 80024ae:	687b      	ldr	r3, [r7, #4]
 80024b0:	695b      	ldr	r3, [r3, #20]
 80024b2:	055b      	lsls	r3, r3, #21
 80024b4:	431a      	orrs	r2, r3
 80024b6:	687b      	ldr	r3, [r7, #4]
 80024b8:	681b      	ldr	r3, [r3, #0]
 80024ba:	430a      	orrs	r2, r1
 80024bc:	635a      	str	r2, [r3, #52]	; 0x34
             ((hdma2d->Init.AlphaInverted << DMA2D_OPFCCR_AI_Pos) | \
              (hdma2d->Init.RedBlueSwap << DMA2D_OPFCCR_RBS_Pos)));


  /* Update error code */
  hdma2d->ErrorCode = HAL_DMA2D_ERROR_NONE;
 80024be:	687b      	ldr	r3, [r7, #4]
 80024c0:	2200      	movs	r2, #0
 80024c2:	665a      	str	r2, [r3, #100]	; 0x64

  /* Initialize the DMA2D state*/
  hdma2d->State  = HAL_DMA2D_STATE_READY;
 80024c4:	687b      	ldr	r3, [r7, #4]
 80024c6:	2201      	movs	r2, #1
 80024c8:	f883 2061 	strb.w	r2, [r3, #97]	; 0x61

  return HAL_OK;
 80024cc:	2300      	movs	r3, #0
}
 80024ce:	4618      	mov	r0, r3
 80024d0:	3708      	adds	r7, #8
 80024d2:	46bd      	mov	sp, r7
 80024d4:	bd80      	pop	{r7, pc}
 80024d6:	bf00      	nop
 80024d8:	fff8ffbf 	.word	0xfff8ffbf
 80024dc:	fffffef8 	.word	0xfffffef8
 80024e0:	ffff0000 	.word	0xffff0000

080024e4 <HAL_DMA2D_ConfigLayer>:
  *                   This parameter can be one of the following values:
  *                   DMA2D_BACKGROUND_LAYER(0) / DMA2D_FOREGROUND_LAYER(1)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA2D_ConfigLayer(DMA2D_HandleTypeDef *hdma2d, uint32_t LayerIdx)
{
 80024e4:	b480      	push	{r7}
 80024e6:	b087      	sub	sp, #28
 80024e8:	af00      	add	r7, sp, #0
 80024ea:	6078      	str	r0, [r7, #4]
 80024ec:	6039      	str	r1, [r7, #0]
  uint32_t regValue;

  /* Check the parameters */
  assert_param(IS_DMA2D_LAYER(LayerIdx));
  assert_param(IS_DMA2D_OFFSET(hdma2d->LayerCfg[LayerIdx].InputOffset));
  if (hdma2d->Init.Mode != DMA2D_R2M)
 80024ee:	687b      	ldr	r3, [r7, #4]
 80024f0:	685b      	ldr	r3, [r3, #4]
 80024f2:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
    }
  }
  assert_param(IS_DMA2D_ALPHA_INVERTED(hdma2d->LayerCfg[LayerIdx].AlphaInverted));
  assert_param(IS_DMA2D_RB_SWAP(hdma2d->LayerCfg[LayerIdx].RedBlueSwap));

  if ((LayerIdx == DMA2D_FOREGROUND_LAYER) && (hdma2d->LayerCfg[LayerIdx].InputColorMode == DMA2D_INPUT_YCBCR))
 80024f6:	683b      	ldr	r3, [r7, #0]
 80024f8:	2b01      	cmp	r3, #1
 80024fa:	d104      	bne.n	8002506 <HAL_DMA2D_ConfigLayer+0x22>
 80024fc:	683a      	ldr	r2, [r7, #0]
 80024fe:	4613      	mov	r3, r2
 8002500:	00db      	lsls	r3, r3, #3
 8002502:	1a9b      	subs	r3, r3, r2
 8002504:	009b      	lsls	r3, r3, #2
  {
    assert_param(IS_DMA2D_CHROMA_SUB_SAMPLING(hdma2d->LayerCfg[LayerIdx].ChromaSubSampling));
  }

  /* Process locked */
  __HAL_LOCK(hdma2d);
 8002506:	687b      	ldr	r3, [r7, #4]
 8002508:	f893 3060 	ldrb.w	r3, [r3, #96]	; 0x60
 800250c:	2b01      	cmp	r3, #1
 800250e:	d101      	bne.n	8002514 <HAL_DMA2D_ConfigLayer+0x30>
 8002510:	2302      	movs	r3, #2
 8002512:	e092      	b.n	800263a <HAL_DMA2D_ConfigLayer+0x156>
 8002514:	687b      	ldr	r3, [r7, #4]
 8002516:	2201      	movs	r2, #1
 8002518:	f883 2060 	strb.w	r2, [r3, #96]	; 0x60

  /* Change DMA2D peripheral state */
  hdma2d->State = HAL_DMA2D_STATE_BUSY;
 800251c:	687b      	ldr	r3, [r7, #4]
 800251e:	2202      	movs	r2, #2
 8002520:	f883 2061 	strb.w	r2, [r3, #97]	; 0x61

  pLayerCfg = &hdma2d->LayerCfg[LayerIdx];
 8002524:	683a      	ldr	r2, [r7, #0]
 8002526:	4613      	mov	r3, r2
 8002528:	00db      	lsls	r3, r3, #3
 800252a:	1a9b      	subs	r3, r3, r2
 800252c:	009b      	lsls	r3, r3, #2
 800252e:	3328      	adds	r3, #40	; 0x28
 8002530:	687a      	ldr	r2, [r7, #4]
 8002532:	4413      	add	r3, r2
 8002534:	60fb      	str	r3, [r7, #12]

  /* Prepare the value to be written to the BGPFCCR or FGPFCCR register */
  regValue = pLayerCfg->InputColorMode | (pLayerCfg->AlphaMode << DMA2D_BGPFCCR_AM_Pos) | \
 8002536:	68fb      	ldr	r3, [r7, #12]
 8002538:	685a      	ldr	r2, [r3, #4]
 800253a:	68fb      	ldr	r3, [r7, #12]
 800253c:	689b      	ldr	r3, [r3, #8]
 800253e:	041b      	lsls	r3, r3, #16
 8002540:	431a      	orrs	r2, r3
             (pLayerCfg->AlphaInverted << DMA2D_BGPFCCR_AI_Pos) | (pLayerCfg->RedBlueSwap << DMA2D_BGPFCCR_RBS_Pos);
 8002542:	68fb      	ldr	r3, [r7, #12]
 8002544:	691b      	ldr	r3, [r3, #16]
 8002546:	051b      	lsls	r3, r3, #20
  regValue = pLayerCfg->InputColorMode | (pLayerCfg->AlphaMode << DMA2D_BGPFCCR_AM_Pos) | \
 8002548:	431a      	orrs	r2, r3
             (pLayerCfg->AlphaInverted << DMA2D_BGPFCCR_AI_Pos) | (pLayerCfg->RedBlueSwap << DMA2D_BGPFCCR_RBS_Pos);
 800254a:	68fb      	ldr	r3, [r7, #12]
 800254c:	695b      	ldr	r3, [r3, #20]
 800254e:	055b      	lsls	r3, r3, #21
  regValue = pLayerCfg->InputColorMode | (pLayerCfg->AlphaMode << DMA2D_BGPFCCR_AM_Pos) | \
 8002550:	4313      	orrs	r3, r2
 8002552:	613b      	str	r3, [r7, #16]
  regMask  = (DMA2D_BGPFCCR_CM | DMA2D_BGPFCCR_AM | DMA2D_BGPFCCR_ALPHA | DMA2D_BGPFCCR_AI | DMA2D_BGPFCCR_RBS);
 8002554:	4b3c      	ldr	r3, [pc, #240]	; (8002648 <HAL_DMA2D_ConfigLayer+0x164>)
 8002556:	617b      	str	r3, [r7, #20]


  if ((pLayerCfg->InputColorMode == DMA2D_INPUT_A4) || (pLayerCfg->InputColorMode == DMA2D_INPUT_A8))
 8002558:	68fb      	ldr	r3, [r7, #12]
 800255a:	685b      	ldr	r3, [r3, #4]
 800255c:	2b0a      	cmp	r3, #10
 800255e:	d003      	beq.n	8002568 <HAL_DMA2D_ConfigLayer+0x84>
 8002560:	68fb      	ldr	r3, [r7, #12]
 8002562:	685b      	ldr	r3, [r3, #4]
 8002564:	2b09      	cmp	r3, #9
 8002566:	d107      	bne.n	8002578 <HAL_DMA2D_ConfigLayer+0x94>
  {
    regValue |= (pLayerCfg->InputAlpha & DMA2D_BGPFCCR_ALPHA);
 8002568:	68fb      	ldr	r3, [r7, #12]
 800256a:	68db      	ldr	r3, [r3, #12]
 800256c:	f003 437f 	and.w	r3, r3, #4278190080	; 0xff000000
 8002570:	693a      	ldr	r2, [r7, #16]
 8002572:	4313      	orrs	r3, r2
 8002574:	613b      	str	r3, [r7, #16]
 8002576:	e005      	b.n	8002584 <HAL_DMA2D_ConfigLayer+0xa0>
  }
  else
  {
    regValue |= (pLayerCfg->InputAlpha << DMA2D_BGPFCCR_ALPHA_Pos);
 8002578:	68fb      	ldr	r3, [r7, #12]
 800257a:	68db      	ldr	r3, [r3, #12]
 800257c:	061b      	lsls	r3, r3, #24
 800257e:	693a      	ldr	r2, [r7, #16]
 8002580:	4313      	orrs	r3, r2
 8002582:	613b      	str	r3, [r7, #16]
  }

  /* Configure the background DMA2D layer */
  if (LayerIdx == DMA2D_BACKGROUND_LAYER)
 8002584:	683b      	ldr	r3, [r7, #0]
 8002586:	2b00      	cmp	r3, #0
 8002588:	d120      	bne.n	80025cc <HAL_DMA2D_ConfigLayer+0xe8>
  {
    /* Write DMA2D BGPFCCR register */
    MODIFY_REG(hdma2d->Instance->BGPFCCR, regMask, regValue);
 800258a:	687b      	ldr	r3, [r7, #4]
 800258c:	681b      	ldr	r3, [r3, #0]
 800258e:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8002590:	697b      	ldr	r3, [r7, #20]
 8002592:	43db      	mvns	r3, r3
 8002594:	ea02 0103 	and.w	r1, r2, r3
 8002598:	687b      	ldr	r3, [r7, #4]
 800259a:	681b      	ldr	r3, [r3, #0]
 800259c:	693a      	ldr	r2, [r7, #16]
 800259e:	430a      	orrs	r2, r1
 80025a0:	625a      	str	r2, [r3, #36]	; 0x24

    /* DMA2D BGOR register configuration -------------------------------------*/
    WRITE_REG(hdma2d->Instance->BGOR, pLayerCfg->InputOffset);
 80025a2:	687b      	ldr	r3, [r7, #4]
 80025a4:	681b      	ldr	r3, [r3, #0]
 80025a6:	68fa      	ldr	r2, [r7, #12]
 80025a8:	6812      	ldr	r2, [r2, #0]
 80025aa:	619a      	str	r2, [r3, #24]

    /* DMA2D BGCOLR register configuration -------------------------------------*/
    if ((pLayerCfg->InputColorMode == DMA2D_INPUT_A4) || (pLayerCfg->InputColorMode == DMA2D_INPUT_A8))
 80025ac:	68fb      	ldr	r3, [r7, #12]
 80025ae:	685b      	ldr	r3, [r3, #4]
 80025b0:	2b0a      	cmp	r3, #10
 80025b2:	d003      	beq.n	80025bc <HAL_DMA2D_ConfigLayer+0xd8>
 80025b4:	68fb      	ldr	r3, [r7, #12]
 80025b6:	685b      	ldr	r3, [r3, #4]
 80025b8:	2b09      	cmp	r3, #9
 80025ba:	d135      	bne.n	8002628 <HAL_DMA2D_ConfigLayer+0x144>
    {
      WRITE_REG(hdma2d->Instance->BGCOLR, pLayerCfg->InputAlpha & (DMA2D_BGCOLR_BLUE | DMA2D_BGCOLR_GREEN | \
 80025bc:	68fb      	ldr	r3, [r7, #12]
 80025be:	68da      	ldr	r2, [r3, #12]
 80025c0:	687b      	ldr	r3, [r7, #4]
 80025c2:	681b      	ldr	r3, [r3, #0]
 80025c4:	f022 427f 	bic.w	r2, r2, #4278190080	; 0xff000000
 80025c8:	629a      	str	r2, [r3, #40]	; 0x28
 80025ca:	e02d      	b.n	8002628 <HAL_DMA2D_ConfigLayer+0x144>
  }
  /* Configure the foreground DMA2D layer */
  else
  {

    if (pLayerCfg->InputColorMode == DMA2D_INPUT_YCBCR)
 80025cc:	68fb      	ldr	r3, [r7, #12]
 80025ce:	685b      	ldr	r3, [r3, #4]
 80025d0:	2b0b      	cmp	r3, #11
 80025d2:	d109      	bne.n	80025e8 <HAL_DMA2D_ConfigLayer+0x104>
    {
      regValue |= (pLayerCfg->ChromaSubSampling << DMA2D_FGPFCCR_CSS_Pos);
 80025d4:	68fb      	ldr	r3, [r7, #12]
 80025d6:	699b      	ldr	r3, [r3, #24]
 80025d8:	049b      	lsls	r3, r3, #18
 80025da:	693a      	ldr	r2, [r7, #16]
 80025dc:	4313      	orrs	r3, r2
 80025de:	613b      	str	r3, [r7, #16]
      regMask  |= DMA2D_FGPFCCR_CSS;
 80025e0:	697b      	ldr	r3, [r7, #20]
 80025e2:	f443 2340 	orr.w	r3, r3, #786432	; 0xc0000
 80025e6:	617b      	str	r3, [r7, #20]
    }

    /* Write DMA2D FGPFCCR register */
    MODIFY_REG(hdma2d->Instance->FGPFCCR, regMask, regValue);
 80025e8:	687b      	ldr	r3, [r7, #4]
 80025ea:	681b      	ldr	r3, [r3, #0]
 80025ec:	69da      	ldr	r2, [r3, #28]
 80025ee:	697b      	ldr	r3, [r7, #20]
 80025f0:	43db      	mvns	r3, r3
 80025f2:	ea02 0103 	and.w	r1, r2, r3
 80025f6:	687b      	ldr	r3, [r7, #4]
 80025f8:	681b      	ldr	r3, [r3, #0]
 80025fa:	693a      	ldr	r2, [r7, #16]
 80025fc:	430a      	orrs	r2, r1
 80025fe:	61da      	str	r2, [r3, #28]

    /* DMA2D FGOR register configuration -------------------------------------*/
    WRITE_REG(hdma2d->Instance->FGOR, pLayerCfg->InputOffset);
 8002600:	687b      	ldr	r3, [r7, #4]
 8002602:	681b      	ldr	r3, [r3, #0]
 8002604:	68fa      	ldr	r2, [r7, #12]
 8002606:	6812      	ldr	r2, [r2, #0]
 8002608:	611a      	str	r2, [r3, #16]

    /* DMA2D FGCOLR register configuration -------------------------------------*/
    if ((pLayerCfg->InputColorMode == DMA2D_INPUT_A4) || (pLayerCfg->InputColorMode == DMA2D_INPUT_A8))
 800260a:	68fb      	ldr	r3, [r7, #12]
 800260c:	685b      	ldr	r3, [r3, #4]
 800260e:	2b0a      	cmp	r3, #10
 8002610:	d003      	beq.n	800261a <HAL_DMA2D_ConfigLayer+0x136>
 8002612:	68fb      	ldr	r3, [r7, #12]
 8002614:	685b      	ldr	r3, [r3, #4]
 8002616:	2b09      	cmp	r3, #9
 8002618:	d106      	bne.n	8002628 <HAL_DMA2D_ConfigLayer+0x144>
    {
      WRITE_REG(hdma2d->Instance->FGCOLR, pLayerCfg->InputAlpha & (DMA2D_FGCOLR_BLUE | DMA2D_FGCOLR_GREEN | \
 800261a:	68fb      	ldr	r3, [r7, #12]
 800261c:	68da      	ldr	r2, [r3, #12]
 800261e:	687b      	ldr	r3, [r7, #4]
 8002620:	681b      	ldr	r3, [r3, #0]
 8002622:	f022 427f 	bic.w	r2, r2, #4278190080	; 0xff000000
 8002626:	621a      	str	r2, [r3, #32]
                                                                   DMA2D_FGCOLR_RED));
    }
  }
  /* Initialize the DMA2D state*/
  hdma2d->State = HAL_DMA2D_STATE_READY;
 8002628:	687b      	ldr	r3, [r7, #4]
 800262a:	2201      	movs	r2, #1
 800262c:	f883 2061 	strb.w	r2, [r3, #97]	; 0x61

  /* Process unlocked */
  __HAL_UNLOCK(hdma2d);
 8002630:	687b      	ldr	r3, [r7, #4]
 8002632:	2200      	movs	r2, #0
 8002634:	f883 2060 	strb.w	r2, [r3, #96]	; 0x60

  return HAL_OK;
 8002638:	2300      	movs	r3, #0
}
 800263a:	4618      	mov	r0, r3
 800263c:	371c      	adds	r7, #28
 800263e:	46bd      	mov	sp, r7
 8002640:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002644:	4770      	bx	lr
 8002646:	bf00      	nop
 8002648:	ff33000f 	.word	0xff33000f

0800264c <HAL_ETH_Init>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Init(ETH_HandleTypeDef *heth)
{
 800264c:	b580      	push	{r7, lr}
 800264e:	b084      	sub	sp, #16
 8002650:	af00      	add	r7, sp, #0
 8002652:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if(heth == NULL)
 8002654:	687b      	ldr	r3, [r7, #4]
 8002656:	2b00      	cmp	r3, #0
 8002658:	d101      	bne.n	800265e <HAL_ETH_Init+0x12>
  {
    return HAL_ERROR;
 800265a:	2301      	movs	r3, #1
 800265c:	e0c6      	b.n	80027ec <HAL_ETH_Init+0x1a0>
  }

#else

  /* Check the ETH peripheral state */
  if(heth->gState == HAL_ETH_STATE_RESET)
 800265e:	687b      	ldr	r3, [r7, #4]
 8002660:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8002662:	2b00      	cmp	r3, #0
 8002664:	d102      	bne.n	800266c <HAL_ETH_Init+0x20>
  {
    /* Init the low level hardware : GPIO, CLOCK, NVIC. */
    HAL_ETH_MspInit(heth);
 8002666:	6878      	ldr	r0, [r7, #4]
 8002668:	f7fe fc7a 	bl	8000f60 <HAL_ETH_MspInit>
  }
#endif /* (USE_HAL_ETH_REGISTER_CALLBACKS) */

  heth->gState = HAL_ETH_STATE_BUSY;
 800266c:	687b      	ldr	r3, [r7, #4]
 800266e:	2223      	movs	r2, #35	; 0x23
 8002670:	66da      	str	r2, [r3, #108]	; 0x6c

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002672:	4b60      	ldr	r3, [pc, #384]	; (80027f4 <HAL_ETH_Init+0x1a8>)
 8002674:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8002678:	4a5e      	ldr	r2, [pc, #376]	; (80027f4 <HAL_ETH_Init+0x1a8>)
 800267a:	f043 0302 	orr.w	r3, r3, #2
 800267e:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 8002682:	4b5c      	ldr	r3, [pc, #368]	; (80027f4 <HAL_ETH_Init+0x1a8>)
 8002684:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8002688:	f003 0302 	and.w	r3, r3, #2
 800268c:	60bb      	str	r3, [r7, #8]
 800268e:	68bb      	ldr	r3, [r7, #8]

  if(heth->Init.MediaInterface == HAL_ETH_MII_MODE)
 8002690:	687b      	ldr	r3, [r7, #4]
 8002692:	7a1b      	ldrb	r3, [r3, #8]
 8002694:	2b00      	cmp	r3, #0
 8002696:	d103      	bne.n	80026a0 <HAL_ETH_Init+0x54>
  {
    HAL_SYSCFG_ETHInterfaceSelect(SYSCFG_ETH_MII);
 8002698:	2000      	movs	r0, #0
 800269a:	f7ff f839 	bl	8001710 <HAL_SYSCFG_ETHInterfaceSelect>
 800269e:	e003      	b.n	80026a8 <HAL_ETH_Init+0x5c>
  }
  else
  {
    HAL_SYSCFG_ETHInterfaceSelect(SYSCFG_ETH_RMII);
 80026a0:	f44f 0000 	mov.w	r0, #8388608	; 0x800000
 80026a4:	f7ff f834 	bl	8001710 <HAL_SYSCFG_ETHInterfaceSelect>
  }

  /* Ethernet Software reset */
  /* Set the SWR bit: resets all MAC subsystem internal registers and logic */
  /* After reset all the registers holds their respective reset values */
  SET_BIT(heth->Instance->DMAMR, ETH_DMAMR_SWR);
 80026a8:	687b      	ldr	r3, [r7, #4]
 80026aa:	681b      	ldr	r3, [r3, #0]
 80026ac:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80026b0:	681a      	ldr	r2, [r3, #0]
 80026b2:	687b      	ldr	r3, [r7, #4]
 80026b4:	681b      	ldr	r3, [r3, #0]
 80026b6:	f042 0201 	orr.w	r2, r2, #1
 80026ba:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80026be:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 80026c0:	f7ff f81a 	bl	80016f8 <HAL_GetTick>
 80026c4:	60f8      	str	r0, [r7, #12]

  /* Wait for software reset */
  while (READ_BIT(heth->Instance->DMAMR, ETH_DMAMR_SWR) > 0U)
 80026c6:	e00f      	b.n	80026e8 <HAL_ETH_Init+0x9c>
  {
    if(((HAL_GetTick() - tickstart ) > ETH_SWRESET_TIMEOUT))
 80026c8:	f7ff f816 	bl	80016f8 <HAL_GetTick>
 80026cc:	4602      	mov	r2, r0
 80026ce:	68fb      	ldr	r3, [r7, #12]
 80026d0:	1ad3      	subs	r3, r2, r3
 80026d2:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 80026d6:	d907      	bls.n	80026e8 <HAL_ETH_Init+0x9c>
    {
      /* Set Error Code */
      heth->ErrorCode = HAL_ETH_ERROR_TIMEOUT;
 80026d8:	687b      	ldr	r3, [r7, #4]
 80026da:	2204      	movs	r2, #4
 80026dc:	675a      	str	r2, [r3, #116]	; 0x74
      /* Set State as Error */
      heth->gState = HAL_ETH_STATE_ERROR;
 80026de:	687b      	ldr	r3, [r7, #4]
 80026e0:	22e0      	movs	r2, #224	; 0xe0
 80026e2:	66da      	str	r2, [r3, #108]	; 0x6c
      /* Return Error */
      return HAL_ERROR;
 80026e4:	2301      	movs	r3, #1
 80026e6:	e081      	b.n	80027ec <HAL_ETH_Init+0x1a0>
  while (READ_BIT(heth->Instance->DMAMR, ETH_DMAMR_SWR) > 0U)
 80026e8:	687b      	ldr	r3, [r7, #4]
 80026ea:	681b      	ldr	r3, [r3, #0]
 80026ec:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80026f0:	681b      	ldr	r3, [r3, #0]
 80026f2:	f003 0301 	and.w	r3, r3, #1
 80026f6:	2b00      	cmp	r3, #0
 80026f8:	d1e6      	bne.n	80026c8 <HAL_ETH_Init+0x7c>
    }
  }

  /*------------------ MDIO CSR Clock Range Configuration --------------------*/
  ETH_MAC_MDIO_ClkConfig(heth);
 80026fa:	6878      	ldr	r0, [r7, #4]
 80026fc:	f000 fac0 	bl	8002c80 <ETH_MAC_MDIO_ClkConfig>

  /*------------------ MAC LPI 1US Tic Counter Configuration --------------------*/
  WRITE_REG(heth->Instance->MAC1USTCR, (((uint32_t)HAL_RCC_GetHCLKFreq() / ETH_MAC_US_TICK) - 1U));
 8002700:	f001 fc74 	bl	8003fec <HAL_RCC_GetHCLKFreq>
 8002704:	4603      	mov	r3, r0
 8002706:	4a3c      	ldr	r2, [pc, #240]	; (80027f8 <HAL_ETH_Init+0x1ac>)
 8002708:	fba2 2303 	umull	r2, r3, r2, r3
 800270c:	0c9a      	lsrs	r2, r3, #18
 800270e:	687b      	ldr	r3, [r7, #4]
 8002710:	681b      	ldr	r3, [r3, #0]
 8002712:	3a01      	subs	r2, #1
 8002714:	f8c3 20dc 	str.w	r2, [r3, #220]	; 0xdc

  /*------------------ MAC, MTL and DMA default Configuration ----------------*/
  ETH_MACDMAConfig(heth);
 8002718:	6878      	ldr	r0, [r7, #4]
 800271a:	f000 fa13 	bl	8002b44 <ETH_MACDMAConfig>

  /* SET DSL to 64 bit */
  MODIFY_REG(heth->Instance->DMACCR, ETH_DMACCR_DSL, ETH_DMACCR_DSL_64BIT);
 800271e:	687b      	ldr	r3, [r7, #4]
 8002720:	681b      	ldr	r3, [r3, #0]
 8002722:	f503 5388 	add.w	r3, r3, #4352	; 0x1100
 8002726:	681b      	ldr	r3, [r3, #0]
 8002728:	f423 12e0 	bic.w	r2, r3, #1835008	; 0x1c0000
 800272c:	687b      	ldr	r3, [r7, #4]
 800272e:	681b      	ldr	r3, [r3, #0]
 8002730:	f442 2200 	orr.w	r2, r2, #524288	; 0x80000
 8002734:	f503 5388 	add.w	r3, r3, #4352	; 0x1100
 8002738:	601a      	str	r2, [r3, #0]

  /* Set Receive Buffers Length (must be a multiple of 4) */
  if ((heth->Init.RxBuffLen % 0x4U) != 0x0U)
 800273a:	687b      	ldr	r3, [r7, #4]
 800273c:	695b      	ldr	r3, [r3, #20]
 800273e:	f003 0303 	and.w	r3, r3, #3
 8002742:	2b00      	cmp	r3, #0
 8002744:	d007      	beq.n	8002756 <HAL_ETH_Init+0x10a>
  {
    /* Set Error Code */
    heth->ErrorCode = HAL_ETH_ERROR_PARAM;
 8002746:	687b      	ldr	r3, [r7, #4]
 8002748:	2201      	movs	r2, #1
 800274a:	675a      	str	r2, [r3, #116]	; 0x74
    /* Set State as Error */
    heth->gState = HAL_ETH_STATE_ERROR;
 800274c:	687b      	ldr	r3, [r7, #4]
 800274e:	22e0      	movs	r2, #224	; 0xe0
 8002750:	66da      	str	r2, [r3, #108]	; 0x6c
    /* Return Error */
    return HAL_ERROR;
 8002752:	2301      	movs	r3, #1
 8002754:	e04a      	b.n	80027ec <HAL_ETH_Init+0x1a0>
  }
  else
  {
    MODIFY_REG(heth->Instance->DMACRCR, ETH_DMACRCR_RBSZ, ((heth->Init.RxBuffLen) << 1));
 8002756:	687b      	ldr	r3, [r7, #4]
 8002758:	681a      	ldr	r2, [r3, #0]
 800275a:	f241 1308 	movw	r3, #4360	; 0x1108
 800275e:	4413      	add	r3, r2
 8002760:	681a      	ldr	r2, [r3, #0]
 8002762:	4b26      	ldr	r3, [pc, #152]	; (80027fc <HAL_ETH_Init+0x1b0>)
 8002764:	4013      	ands	r3, r2
 8002766:	687a      	ldr	r2, [r7, #4]
 8002768:	6952      	ldr	r2, [r2, #20]
 800276a:	0052      	lsls	r2, r2, #1
 800276c:	6879      	ldr	r1, [r7, #4]
 800276e:	6809      	ldr	r1, [r1, #0]
 8002770:	431a      	orrs	r2, r3
 8002772:	f241 1308 	movw	r3, #4360	; 0x1108
 8002776:	440b      	add	r3, r1
 8002778:	601a      	str	r2, [r3, #0]
  }

  /*------------------ DMA Tx Descriptors Configuration ----------------------*/
  ETH_DMATxDescListInit(heth);
 800277a:	6878      	ldr	r0, [r7, #4]
 800277c:	f000 fad8 	bl	8002d30 <ETH_DMATxDescListInit>

  /*------------------ DMA Rx Descriptors Configuration ----------------------*/
  ETH_DMARxDescListInit(heth);
 8002780:	6878      	ldr	r0, [r7, #4]
 8002782:	f000 fb1c 	bl	8002dbe <ETH_DMARxDescListInit>

  /*--------------------- ETHERNET MAC Address Configuration ------------------*/
  /* Set MAC addr bits 32 to 47 */
  heth->Instance->MACA0HR = (((uint32_t)(heth->Init.MACAddr[5]) << 8) | (uint32_t)heth->Init.MACAddr[4]);
 8002786:	687b      	ldr	r3, [r7, #4]
 8002788:	685b      	ldr	r3, [r3, #4]
 800278a:	3305      	adds	r3, #5
 800278c:	781b      	ldrb	r3, [r3, #0]
 800278e:	021a      	lsls	r2, r3, #8
 8002790:	687b      	ldr	r3, [r7, #4]
 8002792:	685b      	ldr	r3, [r3, #4]
 8002794:	3304      	adds	r3, #4
 8002796:	781b      	ldrb	r3, [r3, #0]
 8002798:	4619      	mov	r1, r3
 800279a:	687b      	ldr	r3, [r7, #4]
 800279c:	681b      	ldr	r3, [r3, #0]
 800279e:	430a      	orrs	r2, r1
 80027a0:	f8c3 2300 	str.w	r2, [r3, #768]	; 0x300
  /* Set MAC addr bits 0 to 31 */
  heth->Instance->MACA0LR = (((uint32_t)(heth->Init.MACAddr[3]) << 24) | ((uint32_t)(heth->Init.MACAddr[2]) << 16) |
 80027a4:	687b      	ldr	r3, [r7, #4]
 80027a6:	685b      	ldr	r3, [r3, #4]
 80027a8:	3303      	adds	r3, #3
 80027aa:	781b      	ldrb	r3, [r3, #0]
 80027ac:	061a      	lsls	r2, r3, #24
 80027ae:	687b      	ldr	r3, [r7, #4]
 80027b0:	685b      	ldr	r3, [r3, #4]
 80027b2:	3302      	adds	r3, #2
 80027b4:	781b      	ldrb	r3, [r3, #0]
 80027b6:	041b      	lsls	r3, r3, #16
 80027b8:	431a      	orrs	r2, r3
                             ((uint32_t)(heth->Init.MACAddr[1]) << 8) | (uint32_t)heth->Init.MACAddr[0]);
 80027ba:	687b      	ldr	r3, [r7, #4]
 80027bc:	685b      	ldr	r3, [r3, #4]
 80027be:	3301      	adds	r3, #1
 80027c0:	781b      	ldrb	r3, [r3, #0]
 80027c2:	021b      	lsls	r3, r3, #8
  heth->Instance->MACA0LR = (((uint32_t)(heth->Init.MACAddr[3]) << 24) | ((uint32_t)(heth->Init.MACAddr[2]) << 16) |
 80027c4:	431a      	orrs	r2, r3
                             ((uint32_t)(heth->Init.MACAddr[1]) << 8) | (uint32_t)heth->Init.MACAddr[0]);
 80027c6:	687b      	ldr	r3, [r7, #4]
 80027c8:	685b      	ldr	r3, [r3, #4]
 80027ca:	781b      	ldrb	r3, [r3, #0]
 80027cc:	4619      	mov	r1, r3
  heth->Instance->MACA0LR = (((uint32_t)(heth->Init.MACAddr[3]) << 24) | ((uint32_t)(heth->Init.MACAddr[2]) << 16) |
 80027ce:	687b      	ldr	r3, [r7, #4]
 80027d0:	681b      	ldr	r3, [r3, #0]
                             ((uint32_t)(heth->Init.MACAddr[1]) << 8) | (uint32_t)heth->Init.MACAddr[0]);
 80027d2:	430a      	orrs	r2, r1
  heth->Instance->MACA0LR = (((uint32_t)(heth->Init.MACAddr[3]) << 24) | ((uint32_t)(heth->Init.MACAddr[2]) << 16) |
 80027d4:	f8c3 2304 	str.w	r2, [r3, #772]	; 0x304

  heth->ErrorCode = HAL_ETH_ERROR_NONE;
 80027d8:	687b      	ldr	r3, [r7, #4]
 80027da:	2200      	movs	r2, #0
 80027dc:	675a      	str	r2, [r3, #116]	; 0x74
  heth->gState = HAL_ETH_STATE_READY;
 80027de:	687b      	ldr	r3, [r7, #4]
 80027e0:	2210      	movs	r2, #16
 80027e2:	66da      	str	r2, [r3, #108]	; 0x6c
  heth->RxState = HAL_ETH_STATE_READY;
 80027e4:	687b      	ldr	r3, [r7, #4]
 80027e6:	2210      	movs	r2, #16
 80027e8:	671a      	str	r2, [r3, #112]	; 0x70

  return HAL_OK;
 80027ea:	2300      	movs	r3, #0
}
 80027ec:	4618      	mov	r0, r3
 80027ee:	3710      	adds	r7, #16
 80027f0:	46bd      	mov	sp, r7
 80027f2:	bd80      	pop	{r7, pc}
 80027f4:	58024400 	.word	0x58024400
 80027f8:	431bde83 	.word	0x431bde83
 80027fc:	ffff8001 	.word	0xffff8001

08002800 <ETH_SetMACConfig>:
/** @addtogroup ETH_Private_Functions   ETH Private Functions
  * @{
  */

static void ETH_SetMACConfig(ETH_HandleTypeDef *heth,  ETH_MACConfigTypeDef *macconf)
{
 8002800:	b480      	push	{r7}
 8002802:	b085      	sub	sp, #20
 8002804:	af00      	add	r7, sp, #0
 8002806:	6078      	str	r0, [r7, #4]
 8002808:	6039      	str	r1, [r7, #0]
  uint32_t macregval;

  /*------------------------ MACCR Configuration --------------------*/
  macregval =(macconf->InterPacketGapVal |
 800280a:	683b      	ldr	r3, [r7, #0]
 800280c:	689a      	ldr	r2, [r3, #8]
              macconf->SourceAddrControl |
 800280e:	683b      	ldr	r3, [r7, #0]
 8002810:	681b      	ldr	r3, [r3, #0]
  macregval =(macconf->InterPacketGapVal |
 8002812:	431a      	orrs	r2, r3
                ((uint32_t)macconf->ChecksumOffload<< 27) |
 8002814:	683b      	ldr	r3, [r7, #0]
 8002816:	791b      	ldrb	r3, [r3, #4]
 8002818:	06db      	lsls	r3, r3, #27
              macconf->SourceAddrControl |
 800281a:	431a      	orrs	r2, r3
                  ((uint32_t)macconf->GiantPacketSizeLimitControl << 23) |
 800281c:	683b      	ldr	r3, [r7, #0]
 800281e:	7b1b      	ldrb	r3, [r3, #12]
 8002820:	05db      	lsls	r3, r3, #23
                ((uint32_t)macconf->ChecksumOffload<< 27) |
 8002822:	431a      	orrs	r2, r3
                    ((uint32_t)macconf->Support2KPacket  << 22) |
 8002824:	683b      	ldr	r3, [r7, #0]
 8002826:	7b5b      	ldrb	r3, [r3, #13]
 8002828:	059b      	lsls	r3, r3, #22
                  ((uint32_t)macconf->GiantPacketSizeLimitControl << 23) |
 800282a:	431a      	orrs	r2, r3
                      ((uint32_t)macconf->CRCStripTypePacket << 21) |
 800282c:	683b      	ldr	r3, [r7, #0]
 800282e:	7b9b      	ldrb	r3, [r3, #14]
 8002830:	055b      	lsls	r3, r3, #21
                    ((uint32_t)macconf->Support2KPacket  << 22) |
 8002832:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->AutomaticPadCRCStrip << 20) |
 8002834:	683b      	ldr	r3, [r7, #0]
 8002836:	7bdb      	ldrb	r3, [r3, #15]
 8002838:	051b      	lsls	r3, r3, #20
                      ((uint32_t)macconf->CRCStripTypePacket << 21) |
 800283a:	4313      	orrs	r3, r2
                          ((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 19) |
 800283c:	683a      	ldr	r2, [r7, #0]
 800283e:	7c12      	ldrb	r2, [r2, #16]
 8002840:	2a00      	cmp	r2, #0
 8002842:	d102      	bne.n	800284a <ETH_SetMACConfig+0x4a>
 8002844:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 8002848:	e000      	b.n	800284c <ETH_SetMACConfig+0x4c>
 800284a:	2200      	movs	r2, #0
                        ((uint32_t)macconf->AutomaticPadCRCStrip << 20) |
 800284c:	4313      	orrs	r3, r2
                            ((uint32_t)((macconf->Jabber == DISABLE) ? 1U : 0U) << 17) |
 800284e:	683a      	ldr	r2, [r7, #0]
 8002850:	7c52      	ldrb	r2, [r2, #17]
 8002852:	2a00      	cmp	r2, #0
 8002854:	d102      	bne.n	800285c <ETH_SetMACConfig+0x5c>
 8002856:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 800285a:	e000      	b.n	800285e <ETH_SetMACConfig+0x5e>
 800285c:	2200      	movs	r2, #0
                          ((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 19) |
 800285e:	431a      	orrs	r2, r3
                              ((uint32_t)macconf->JumboPacket << 16) |
 8002860:	683b      	ldr	r3, [r7, #0]
 8002862:	7c9b      	ldrb	r3, [r3, #18]
 8002864:	041b      	lsls	r3, r3, #16
                            ((uint32_t)((macconf->Jabber == DISABLE) ? 1U : 0U) << 17) |
 8002866:	431a      	orrs	r2, r3
                                macconf->Speed |
 8002868:	683b      	ldr	r3, [r7, #0]
 800286a:	695b      	ldr	r3, [r3, #20]
                              ((uint32_t)macconf->JumboPacket << 16) |
 800286c:	431a      	orrs	r2, r3
                                  macconf->DuplexMode |
 800286e:	683b      	ldr	r3, [r7, #0]
 8002870:	699b      	ldr	r3, [r3, #24]
                                macconf->Speed |
 8002872:	431a      	orrs	r2, r3
                                    ((uint32_t)macconf->LoopbackMode << 12) |
 8002874:	683b      	ldr	r3, [r7, #0]
 8002876:	7f1b      	ldrb	r3, [r3, #28]
 8002878:	031b      	lsls	r3, r3, #12
                                  macconf->DuplexMode |
 800287a:	431a      	orrs	r2, r3
                                      ((uint32_t)macconf->CarrierSenseBeforeTransmit << 11)|
 800287c:	683b      	ldr	r3, [r7, #0]
 800287e:	7f5b      	ldrb	r3, [r3, #29]
 8002880:	02db      	lsls	r3, r3, #11
                                    ((uint32_t)macconf->LoopbackMode << 12) |
 8002882:	4313      	orrs	r3, r2
                                        ((uint32_t)((macconf->ReceiveOwn == DISABLE) ? 1U : 0U) << 10)|
 8002884:	683a      	ldr	r2, [r7, #0]
 8002886:	7f92      	ldrb	r2, [r2, #30]
 8002888:	2a00      	cmp	r2, #0
 800288a:	d102      	bne.n	8002892 <ETH_SetMACConfig+0x92>
 800288c:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8002890:	e000      	b.n	8002894 <ETH_SetMACConfig+0x94>
 8002892:	2200      	movs	r2, #0
                                      ((uint32_t)macconf->CarrierSenseBeforeTransmit << 11)|
 8002894:	431a      	orrs	r2, r3
                                          ((uint32_t)macconf->CarrierSenseDuringTransmit << 9)|
 8002896:	683b      	ldr	r3, [r7, #0]
 8002898:	7fdb      	ldrb	r3, [r3, #31]
 800289a:	025b      	lsls	r3, r3, #9
                                        ((uint32_t)((macconf->ReceiveOwn == DISABLE) ? 1U : 0U) << 10)|
 800289c:	4313      	orrs	r3, r2
                                            ((uint32_t)((macconf->RetryTransmission == DISABLE) ? 1U : 0U) << 8)|
 800289e:	683a      	ldr	r2, [r7, #0]
 80028a0:	f892 2020 	ldrb.w	r2, [r2, #32]
 80028a4:	2a00      	cmp	r2, #0
 80028a6:	d102      	bne.n	80028ae <ETH_SetMACConfig+0xae>
 80028a8:	f44f 7280 	mov.w	r2, #256	; 0x100
 80028ac:	e000      	b.n	80028b0 <ETH_SetMACConfig+0xb0>
 80028ae:	2200      	movs	r2, #0
                                          ((uint32_t)macconf->CarrierSenseDuringTransmit << 9)|
 80028b0:	431a      	orrs	r2, r3
                                              macconf->BackOffLimit |
 80028b2:	683b      	ldr	r3, [r7, #0]
 80028b4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
                                            ((uint32_t)((macconf->RetryTransmission == DISABLE) ? 1U : 0U) << 8)|
 80028b6:	431a      	orrs	r2, r3
                                                ((uint32_t)macconf->DeferralCheck << 4)|
 80028b8:	683b      	ldr	r3, [r7, #0]
 80028ba:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80028be:	011b      	lsls	r3, r3, #4
                                              macconf->BackOffLimit |
 80028c0:	431a      	orrs	r2, r3
                                                  macconf->PreambleLength);
 80028c2:	683b      	ldr	r3, [r7, #0]
 80028c4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
  macregval =(macconf->InterPacketGapVal |
 80028c6:	4313      	orrs	r3, r2
 80028c8:	60fb      	str	r3, [r7, #12]

  /* Write to MACCR */
  MODIFY_REG(heth->Instance->MACCR, ETH_MACCR_MASK, macregval);
 80028ca:	687b      	ldr	r3, [r7, #4]
 80028cc:	681b      	ldr	r3, [r3, #0]
 80028ce:	681a      	ldr	r2, [r3, #0]
 80028d0:	4b56      	ldr	r3, [pc, #344]	; (8002a2c <ETH_SetMACConfig+0x22c>)
 80028d2:	4013      	ands	r3, r2
 80028d4:	687a      	ldr	r2, [r7, #4]
 80028d6:	6812      	ldr	r2, [r2, #0]
 80028d8:	68f9      	ldr	r1, [r7, #12]
 80028da:	430b      	orrs	r3, r1
 80028dc:	6013      	str	r3, [r2, #0]

  /*------------------------ MACECR Configuration --------------------*/
  macregval = ((macconf->ExtendedInterPacketGapVal << 25)|
 80028de:	683b      	ldr	r3, [r7, #0]
 80028e0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80028e2:	065a      	lsls	r2, r3, #25
               ((uint32_t)macconf->ExtendedInterPacketGap << 24)|
 80028e4:	683b      	ldr	r3, [r7, #0]
 80028e6:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 80028ea:	061b      	lsls	r3, r3, #24
  macregval = ((macconf->ExtendedInterPacketGapVal << 25)|
 80028ec:	431a      	orrs	r2, r3
                 ((uint32_t)macconf->UnicastSlowProtocolPacketDetect << 18)|
 80028ee:	683b      	ldr	r3, [r7, #0]
 80028f0:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 80028f4:	049b      	lsls	r3, r3, #18
               ((uint32_t)macconf->ExtendedInterPacketGap << 24)|
 80028f6:	431a      	orrs	r2, r3
                   ((uint32_t)macconf->SlowProtocolDetect << 17)|
 80028f8:	683b      	ldr	r3, [r7, #0]
 80028fa:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 80028fe:	045b      	lsls	r3, r3, #17
                 ((uint32_t)macconf->UnicastSlowProtocolPacketDetect << 18)|
 8002900:	4313      	orrs	r3, r2
                     ((uint32_t)((macconf->CRCCheckingRxPackets == DISABLE) ? 1U : 0U)<< 16) |
 8002902:	683a      	ldr	r2, [r7, #0]
 8002904:	f892 2032 	ldrb.w	r2, [r2, #50]	; 0x32
 8002908:	2a00      	cmp	r2, #0
 800290a:	d102      	bne.n	8002912 <ETH_SetMACConfig+0x112>
 800290c:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8002910:	e000      	b.n	8002914 <ETH_SetMACConfig+0x114>
 8002912:	2200      	movs	r2, #0
                   ((uint32_t)macconf->SlowProtocolDetect << 17)|
 8002914:	431a      	orrs	r2, r3
                       macconf->GiantPacketSizeLimit);
 8002916:	683b      	ldr	r3, [r7, #0]
 8002918:	6b5b      	ldr	r3, [r3, #52]	; 0x34
  macregval = ((macconf->ExtendedInterPacketGapVal << 25)|
 800291a:	4313      	orrs	r3, r2
 800291c:	60fb      	str	r3, [r7, #12]

  /* Write to MACECR */
  MODIFY_REG(heth->Instance->MACECR, ETH_MACECR_MASK, macregval);
 800291e:	687b      	ldr	r3, [r7, #4]
 8002920:	681b      	ldr	r3, [r3, #0]
 8002922:	685a      	ldr	r2, [r3, #4]
 8002924:	4b42      	ldr	r3, [pc, #264]	; (8002a30 <ETH_SetMACConfig+0x230>)
 8002926:	4013      	ands	r3, r2
 8002928:	687a      	ldr	r2, [r7, #4]
 800292a:	6812      	ldr	r2, [r2, #0]
 800292c:	68f9      	ldr	r1, [r7, #12]
 800292e:	430b      	orrs	r3, r1
 8002930:	6053      	str	r3, [r2, #4]

  /*------------------------ MACWTR Configuration --------------------*/
  macregval = (((uint32_t)macconf->ProgrammableWatchdog << 8) |
 8002932:	683b      	ldr	r3, [r7, #0]
 8002934:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8002938:	021a      	lsls	r2, r3, #8
               macconf->WatchdogTimeout);
 800293a:	683b      	ldr	r3, [r7, #0]
 800293c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
  macregval = (((uint32_t)macconf->ProgrammableWatchdog << 8) |
 800293e:	4313      	orrs	r3, r2
 8002940:	60fb      	str	r3, [r7, #12]

  /* Write to MACWTR */
  MODIFY_REG(heth->Instance->MACWTR, ETH_MACWTR_MASK, macregval);
 8002942:	687b      	ldr	r3, [r7, #4]
 8002944:	681b      	ldr	r3, [r3, #0]
 8002946:	68da      	ldr	r2, [r3, #12]
 8002948:	4b3a      	ldr	r3, [pc, #232]	; (8002a34 <ETH_SetMACConfig+0x234>)
 800294a:	4013      	ands	r3, r2
 800294c:	687a      	ldr	r2, [r7, #4]
 800294e:	6812      	ldr	r2, [r2, #0]
 8002950:	68f9      	ldr	r1, [r7, #12]
 8002952:	430b      	orrs	r3, r1
 8002954:	60d3      	str	r3, [r2, #12]

  /*------------------------ MACTFCR Configuration --------------------*/
  macregval = (((uint32_t)macconf->TransmitFlowControl << 1) |
 8002956:	683b      	ldr	r3, [r7, #0]
 8002958:	f893 3054 	ldrb.w	r3, [r3, #84]	; 0x54
 800295c:	005a      	lsls	r2, r3, #1
               macconf->PauseLowThreshold |
 800295e:	683b      	ldr	r3, [r7, #0]
 8002960:	6d1b      	ldr	r3, [r3, #80]	; 0x50
  macregval = (((uint32_t)macconf->TransmitFlowControl << 1) |
 8002962:	4313      	orrs	r3, r2
                 ((uint32_t)((macconf->ZeroQuantaPause == DISABLE) ? 1U : 0U)<< 7) |
 8002964:	683a      	ldr	r2, [r7, #0]
 8002966:	f892 204c 	ldrb.w	r2, [r2, #76]	; 0x4c
 800296a:	2a00      	cmp	r2, #0
 800296c:	d101      	bne.n	8002972 <ETH_SetMACConfig+0x172>
 800296e:	2280      	movs	r2, #128	; 0x80
 8002970:	e000      	b.n	8002974 <ETH_SetMACConfig+0x174>
 8002972:	2200      	movs	r2, #0
               macconf->PauseLowThreshold |
 8002974:	431a      	orrs	r2, r3
                   (macconf->PauseTime << 16));
 8002976:	683b      	ldr	r3, [r7, #0]
 8002978:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800297a:	041b      	lsls	r3, r3, #16
  macregval = (((uint32_t)macconf->TransmitFlowControl << 1) |
 800297c:	4313      	orrs	r3, r2
 800297e:	60fb      	str	r3, [r7, #12]

  /* Write to MACTFCR */
  MODIFY_REG(heth->Instance->MACTFCR, ETH_MACTFCR_MASK, macregval);
 8002980:	687b      	ldr	r3, [r7, #4]
 8002982:	681b      	ldr	r3, [r3, #0]
 8002984:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8002986:	f64f 730d 	movw	r3, #65293	; 0xff0d
 800298a:	4013      	ands	r3, r2
 800298c:	687a      	ldr	r2, [r7, #4]
 800298e:	6812      	ldr	r2, [r2, #0]
 8002990:	68f9      	ldr	r1, [r7, #12]
 8002992:	430b      	orrs	r3, r1
 8002994:	6713      	str	r3, [r2, #112]	; 0x70

  /*------------------------ MACRFCR Configuration --------------------*/
  macregval = ((uint32_t)macconf->ReceiveFlowControl |
 8002996:	683b      	ldr	r3, [r7, #0]
 8002998:	f893 3056 	ldrb.w	r3, [r3, #86]	; 0x56
 800299c:	461a      	mov	r2, r3
               ((uint32_t)macconf->UnicastPausePacketDetect << 1));
 800299e:	683b      	ldr	r3, [r7, #0]
 80029a0:	f893 3055 	ldrb.w	r3, [r3, #85]	; 0x55
 80029a4:	005b      	lsls	r3, r3, #1
  macregval = ((uint32_t)macconf->ReceiveFlowControl |
 80029a6:	4313      	orrs	r3, r2
 80029a8:	60fb      	str	r3, [r7, #12]

  /* Write to MACRFCR */
  MODIFY_REG(heth->Instance->MACRFCR, ETH_MACRFCR_MASK, macregval);
 80029aa:	687b      	ldr	r3, [r7, #4]
 80029ac:	681b      	ldr	r3, [r3, #0]
 80029ae:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80029b2:	f023 0103 	bic.w	r1, r3, #3
 80029b6:	687b      	ldr	r3, [r7, #4]
 80029b8:	681b      	ldr	r3, [r3, #0]
 80029ba:	68fa      	ldr	r2, [r7, #12]
 80029bc:	430a      	orrs	r2, r1
 80029be:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

  /*------------------------ MTLTQOMR Configuration --------------------*/
  /* Write to MTLTQOMR */
  MODIFY_REG(heth->Instance->MTLTQOMR, ETH_MTLTQOMR_MASK, macconf->TransmitQueueMode);
 80029c2:	687b      	ldr	r3, [r7, #4]
 80029c4:	681b      	ldr	r3, [r3, #0]
 80029c6:	f8d3 3d00 	ldr.w	r3, [r3, #3328]	; 0xd00
 80029ca:	f023 0172 	bic.w	r1, r3, #114	; 0x72
 80029ce:	683b      	ldr	r3, [r7, #0]
 80029d0:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 80029d2:	687b      	ldr	r3, [r7, #4]
 80029d4:	681b      	ldr	r3, [r3, #0]
 80029d6:	430a      	orrs	r2, r1
 80029d8:	f8c3 2d00 	str.w	r2, [r3, #3328]	; 0xd00

  /*------------------------ MTLRQOMR Configuration --------------------*/
  macregval = (macconf->ReceiveQueueMode |
 80029dc:	683b      	ldr	r3, [r7, #0]
 80029de:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
               ((uint32_t)((macconf->DropTCPIPChecksumErrorPacket == DISABLE) ? 1U : 0U) << 6) |
 80029e0:	683a      	ldr	r2, [r7, #0]
 80029e2:	f892 2060 	ldrb.w	r2, [r2, #96]	; 0x60
 80029e6:	2a00      	cmp	r2, #0
 80029e8:	d101      	bne.n	80029ee <ETH_SetMACConfig+0x1ee>
 80029ea:	2240      	movs	r2, #64	; 0x40
 80029ec:	e000      	b.n	80029f0 <ETH_SetMACConfig+0x1f0>
 80029ee:	2200      	movs	r2, #0
  macregval = (macconf->ReceiveQueueMode |
 80029f0:	431a      	orrs	r2, r3
                 ((uint32_t)macconf->ForwardRxErrorPacket << 4) |
 80029f2:	683b      	ldr	r3, [r7, #0]
 80029f4:	f893 3061 	ldrb.w	r3, [r3, #97]	; 0x61
 80029f8:	011b      	lsls	r3, r3, #4
               ((uint32_t)((macconf->DropTCPIPChecksumErrorPacket == DISABLE) ? 1U : 0U) << 6) |
 80029fa:	431a      	orrs	r2, r3
                   ((uint32_t)macconf->ForwardRxUndersizedGoodPacket << 3));
 80029fc:	683b      	ldr	r3, [r7, #0]
 80029fe:	f893 3062 	ldrb.w	r3, [r3, #98]	; 0x62
 8002a02:	00db      	lsls	r3, r3, #3
  macregval = (macconf->ReceiveQueueMode |
 8002a04:	4313      	orrs	r3, r2
 8002a06:	60fb      	str	r3, [r7, #12]

  /* Write to MTLRQOMR */
  MODIFY_REG(heth->Instance->MTLRQOMR, ETH_MTLRQOMR_MASK, macregval);
 8002a08:	687b      	ldr	r3, [r7, #4]
 8002a0a:	681b      	ldr	r3, [r3, #0]
 8002a0c:	f8d3 3d30 	ldr.w	r3, [r3, #3376]	; 0xd30
 8002a10:	f023 017b 	bic.w	r1, r3, #123	; 0x7b
 8002a14:	687b      	ldr	r3, [r7, #4]
 8002a16:	681b      	ldr	r3, [r3, #0]
 8002a18:	68fa      	ldr	r2, [r7, #12]
 8002a1a:	430a      	orrs	r2, r1
 8002a1c:	f8c3 2d30 	str.w	r2, [r3, #3376]	; 0xd30
}
 8002a20:	bf00      	nop
 8002a22:	3714      	adds	r7, #20
 8002a24:	46bd      	mov	sp, r7
 8002a26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a2a:	4770      	bx	lr
 8002a2c:	00048083 	.word	0x00048083
 8002a30:	c0f88000 	.word	0xc0f88000
 8002a34:	fffffef0 	.word	0xfffffef0

08002a38 <ETH_SetDMAConfig>:

static void ETH_SetDMAConfig(ETH_HandleTypeDef *heth,  ETH_DMAConfigTypeDef *dmaconf)
{
 8002a38:	b480      	push	{r7}
 8002a3a:	b085      	sub	sp, #20
 8002a3c:	af00      	add	r7, sp, #0
 8002a3e:	6078      	str	r0, [r7, #4]
 8002a40:	6039      	str	r1, [r7, #0]
  uint32_t dmaregval;

  /*------------------------ DMAMR Configuration --------------------*/
  MODIFY_REG(heth->Instance->DMAMR, ETH_DMAMR_MASK, dmaconf->DMAArbitration);
 8002a42:	687b      	ldr	r3, [r7, #4]
 8002a44:	681b      	ldr	r3, [r3, #0]
 8002a46:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002a4a:	681a      	ldr	r2, [r3, #0]
 8002a4c:	4b38      	ldr	r3, [pc, #224]	; (8002b30 <ETH_SetDMAConfig+0xf8>)
 8002a4e:	4013      	ands	r3, r2
 8002a50:	683a      	ldr	r2, [r7, #0]
 8002a52:	6812      	ldr	r2, [r2, #0]
 8002a54:	6879      	ldr	r1, [r7, #4]
 8002a56:	6809      	ldr	r1, [r1, #0]
 8002a58:	431a      	orrs	r2, r3
 8002a5a:	f501 5380 	add.w	r3, r1, #4096	; 0x1000
 8002a5e:	601a      	str	r2, [r3, #0]

  /*------------------------ DMASBMR Configuration --------------------*/
  dmaregval = (((uint32_t)dmaconf->AddressAlignedBeats << 12) |
 8002a60:	683b      	ldr	r3, [r7, #0]
 8002a62:	791b      	ldrb	r3, [r3, #4]
 8002a64:	031a      	lsls	r2, r3, #12
               dmaconf->BurstMode |
 8002a66:	683b      	ldr	r3, [r7, #0]
 8002a68:	689b      	ldr	r3, [r3, #8]
  dmaregval = (((uint32_t)dmaconf->AddressAlignedBeats << 12) |
 8002a6a:	431a      	orrs	r2, r3
                 ((uint32_t)dmaconf->RebuildINCRxBurst << 15));
 8002a6c:	683b      	ldr	r3, [r7, #0]
 8002a6e:	7b1b      	ldrb	r3, [r3, #12]
 8002a70:	03db      	lsls	r3, r3, #15
  dmaregval = (((uint32_t)dmaconf->AddressAlignedBeats << 12) |
 8002a72:	4313      	orrs	r3, r2
 8002a74:	60fb      	str	r3, [r7, #12]

  MODIFY_REG(heth->Instance->DMASBMR, ETH_DMASBMR_MASK, dmaregval);
 8002a76:	687b      	ldr	r3, [r7, #4]
 8002a78:	681a      	ldr	r2, [r3, #0]
 8002a7a:	f241 0304 	movw	r3, #4100	; 0x1004
 8002a7e:	4413      	add	r3, r2
 8002a80:	681a      	ldr	r2, [r3, #0]
 8002a82:	4b2c      	ldr	r3, [pc, #176]	; (8002b34 <ETH_SetDMAConfig+0xfc>)
 8002a84:	4013      	ands	r3, r2
 8002a86:	687a      	ldr	r2, [r7, #4]
 8002a88:	6811      	ldr	r1, [r2, #0]
 8002a8a:	68fa      	ldr	r2, [r7, #12]
 8002a8c:	431a      	orrs	r2, r3
 8002a8e:	f241 0304 	movw	r3, #4100	; 0x1004
 8002a92:	440b      	add	r3, r1
 8002a94:	601a      	str	r2, [r3, #0]

  /*------------------------ DMACCR Configuration --------------------*/
  dmaregval = (((uint32_t)dmaconf->PBLx8Mode << 16) |
 8002a96:	683b      	ldr	r3, [r7, #0]
 8002a98:	7b5b      	ldrb	r3, [r3, #13]
 8002a9a:	041a      	lsls	r2, r3, #16
               dmaconf->MaximumSegmentSize);
 8002a9c:	683b      	ldr	r3, [r7, #0]
 8002a9e:	6a1b      	ldr	r3, [r3, #32]
  dmaregval = (((uint32_t)dmaconf->PBLx8Mode << 16) |
 8002aa0:	4313      	orrs	r3, r2
 8002aa2:	60fb      	str	r3, [r7, #12]

  MODIFY_REG(heth->Instance->DMACCR, ETH_DMACCR_MASK, dmaregval);
 8002aa4:	687b      	ldr	r3, [r7, #4]
 8002aa6:	681b      	ldr	r3, [r3, #0]
 8002aa8:	f503 5388 	add.w	r3, r3, #4352	; 0x1100
 8002aac:	681a      	ldr	r2, [r3, #0]
 8002aae:	4b22      	ldr	r3, [pc, #136]	; (8002b38 <ETH_SetDMAConfig+0x100>)
 8002ab0:	4013      	ands	r3, r2
 8002ab2:	687a      	ldr	r2, [r7, #4]
 8002ab4:	6811      	ldr	r1, [r2, #0]
 8002ab6:	68fa      	ldr	r2, [r7, #12]
 8002ab8:	431a      	orrs	r2, r3
 8002aba:	f501 5388 	add.w	r3, r1, #4352	; 0x1100
 8002abe:	601a      	str	r2, [r3, #0]

  /*------------------------ DMACTCR Configuration --------------------*/
  dmaregval = (dmaconf->TxDMABurstLength |
 8002ac0:	683b      	ldr	r3, [r7, #0]
 8002ac2:	691a      	ldr	r2, [r3, #16]
               ((uint32_t)dmaconf->SecondPacketOperate << 4)|
 8002ac4:	683b      	ldr	r3, [r7, #0]
 8002ac6:	7d1b      	ldrb	r3, [r3, #20]
 8002ac8:	011b      	lsls	r3, r3, #4
  dmaregval = (dmaconf->TxDMABurstLength |
 8002aca:	431a      	orrs	r2, r3
                 ((uint32_t)dmaconf->TCPSegmentation << 12));
 8002acc:	683b      	ldr	r3, [r7, #0]
 8002ace:	7f5b      	ldrb	r3, [r3, #29]
 8002ad0:	031b      	lsls	r3, r3, #12
  dmaregval = (dmaconf->TxDMABurstLength |
 8002ad2:	4313      	orrs	r3, r2
 8002ad4:	60fb      	str	r3, [r7, #12]

  MODIFY_REG(heth->Instance->DMACTCR, ETH_DMACTCR_MASK, dmaregval);
 8002ad6:	687b      	ldr	r3, [r7, #4]
 8002ad8:	681a      	ldr	r2, [r3, #0]
 8002ada:	f241 1304 	movw	r3, #4356	; 0x1104
 8002ade:	4413      	add	r3, r2
 8002ae0:	681a      	ldr	r2, [r3, #0]
 8002ae2:	4b16      	ldr	r3, [pc, #88]	; (8002b3c <ETH_SetDMAConfig+0x104>)
 8002ae4:	4013      	ands	r3, r2
 8002ae6:	687a      	ldr	r2, [r7, #4]
 8002ae8:	6811      	ldr	r1, [r2, #0]
 8002aea:	68fa      	ldr	r2, [r7, #12]
 8002aec:	431a      	orrs	r2, r3
 8002aee:	f241 1304 	movw	r3, #4356	; 0x1104
 8002af2:	440b      	add	r3, r1
 8002af4:	601a      	str	r2, [r3, #0]

  /*------------------------ DMACRCR Configuration --------------------*/
  dmaregval = (((uint32_t)dmaconf->FlushRxPacket  << 31) |
 8002af6:	683b      	ldr	r3, [r7, #0]
 8002af8:	7f1b      	ldrb	r3, [r3, #28]
 8002afa:	07da      	lsls	r2, r3, #31
               dmaconf->RxDMABurstLength);
 8002afc:	683b      	ldr	r3, [r7, #0]
 8002afe:	699b      	ldr	r3, [r3, #24]
  dmaregval = (((uint32_t)dmaconf->FlushRxPacket  << 31) |
 8002b00:	4313      	orrs	r3, r2
 8002b02:	60fb      	str	r3, [r7, #12]

  /* Write to DMACRCR */
  MODIFY_REG(heth->Instance->DMACRCR, ETH_DMACRCR_MASK, dmaregval);
 8002b04:	687b      	ldr	r3, [r7, #4]
 8002b06:	681a      	ldr	r2, [r3, #0]
 8002b08:	f241 1308 	movw	r3, #4360	; 0x1108
 8002b0c:	4413      	add	r3, r2
 8002b0e:	681a      	ldr	r2, [r3, #0]
 8002b10:	4b0b      	ldr	r3, [pc, #44]	; (8002b40 <ETH_SetDMAConfig+0x108>)
 8002b12:	4013      	ands	r3, r2
 8002b14:	687a      	ldr	r2, [r7, #4]
 8002b16:	6811      	ldr	r1, [r2, #0]
 8002b18:	68fa      	ldr	r2, [r7, #12]
 8002b1a:	431a      	orrs	r2, r3
 8002b1c:	f241 1308 	movw	r3, #4360	; 0x1108
 8002b20:	440b      	add	r3, r1
 8002b22:	601a      	str	r2, [r3, #0]
}
 8002b24:	bf00      	nop
 8002b26:	3714      	adds	r7, #20
 8002b28:	46bd      	mov	sp, r7
 8002b2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b2e:	4770      	bx	lr
 8002b30:	ffff87fd 	.word	0xffff87fd
 8002b34:	ffff2ffe 	.word	0xffff2ffe
 8002b38:	fffec000 	.word	0xfffec000
 8002b3c:	ffc0efef 	.word	0xffc0efef
 8002b40:	7fc0ffff 	.word	0x7fc0ffff

08002b44 <ETH_MACDMAConfig>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
static void ETH_MACDMAConfig(ETH_HandleTypeDef *heth)
{
 8002b44:	b580      	push	{r7, lr}
 8002b46:	b0a4      	sub	sp, #144	; 0x90
 8002b48:	af00      	add	r7, sp, #0
 8002b4a:	6078      	str	r0, [r7, #4]
  ETH_MACConfigTypeDef macDefaultConf;
  ETH_DMAConfigTypeDef dmaDefaultConf;

  /*--------------- ETHERNET MAC registers default Configuration --------------*/
  macDefaultConf.AutomaticPadCRCStrip = ENABLE;
 8002b4c:	2301      	movs	r3, #1
 8002b4e:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
  macDefaultConf.BackOffLimit = ETH_BACKOFFLIMIT_10;
 8002b52:	2300      	movs	r3, #0
 8002b54:	653b      	str	r3, [r7, #80]	; 0x50
  macDefaultConf.CarrierSenseBeforeTransmit = DISABLE;
 8002b56:	2300      	movs	r3, #0
 8002b58:	f887 3049 	strb.w	r3, [r7, #73]	; 0x49
  macDefaultConf.CarrierSenseDuringTransmit = DISABLE;
 8002b5c:	2300      	movs	r3, #0
 8002b5e:	f887 304b 	strb.w	r3, [r7, #75]	; 0x4b
  macDefaultConf.ChecksumOffload = ENABLE;
 8002b62:	2301      	movs	r3, #1
 8002b64:	f887 3030 	strb.w	r3, [r7, #48]	; 0x30
  macDefaultConf.CRCCheckingRxPackets = ENABLE;
 8002b68:	2301      	movs	r3, #1
 8002b6a:	f887 305e 	strb.w	r3, [r7, #94]	; 0x5e
  macDefaultConf.CRCStripTypePacket = ENABLE;
 8002b6e:	2301      	movs	r3, #1
 8002b70:	f887 303a 	strb.w	r3, [r7, #58]	; 0x3a
  macDefaultConf.DeferralCheck = DISABLE;
 8002b74:	2300      	movs	r3, #0
 8002b76:	f887 3054 	strb.w	r3, [r7, #84]	; 0x54
  macDefaultConf.DropTCPIPChecksumErrorPacket = ENABLE;
 8002b7a:	2301      	movs	r3, #1
 8002b7c:	f887 308c 	strb.w	r3, [r7, #140]	; 0x8c
  macDefaultConf.DuplexMode = ETH_FULLDUPLEX_MODE;
 8002b80:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8002b84:	647b      	str	r3, [r7, #68]	; 0x44
  macDefaultConf.ExtendedInterPacketGap = DISABLE;
 8002b86:	2300      	movs	r3, #0
 8002b88:	f887 3064 	strb.w	r3, [r7, #100]	; 0x64
  macDefaultConf.ExtendedInterPacketGapVal = 0x0;
 8002b8c:	2300      	movs	r3, #0
 8002b8e:	66bb      	str	r3, [r7, #104]	; 0x68
  macDefaultConf.ForwardRxErrorPacket = DISABLE;
 8002b90:	2300      	movs	r3, #0
 8002b92:	f887 308d 	strb.w	r3, [r7, #141]	; 0x8d
  macDefaultConf.ForwardRxUndersizedGoodPacket = DISABLE;
 8002b96:	2300      	movs	r3, #0
 8002b98:	f887 308e 	strb.w	r3, [r7, #142]	; 0x8e
  macDefaultConf.GiantPacketSizeLimit = 0x618;
 8002b9c:	f44f 63c3 	mov.w	r3, #1560	; 0x618
 8002ba0:	663b      	str	r3, [r7, #96]	; 0x60
  macDefaultConf.GiantPacketSizeLimitControl = DISABLE;
 8002ba2:	2300      	movs	r3, #0
 8002ba4:	f887 3038 	strb.w	r3, [r7, #56]	; 0x38
  macDefaultConf.InterPacketGapVal = ETH_INTERPACKETGAP_96BIT;
 8002ba8:	2300      	movs	r3, #0
 8002baa:	637b      	str	r3, [r7, #52]	; 0x34
  macDefaultConf.Jabber = ENABLE;
 8002bac:	2301      	movs	r3, #1
 8002bae:	f887 303d 	strb.w	r3, [r7, #61]	; 0x3d
  macDefaultConf.JumboPacket = DISABLE;
 8002bb2:	2300      	movs	r3, #0
 8002bb4:	f887 303e 	strb.w	r3, [r7, #62]	; 0x3e
  macDefaultConf.LoopbackMode = DISABLE;
 8002bb8:	2300      	movs	r3, #0
 8002bba:	f887 3048 	strb.w	r3, [r7, #72]	; 0x48
  macDefaultConf.PauseLowThreshold = ETH_PAUSELOWTHRESHOLD_MINUS_4;
 8002bbe:	2300      	movs	r3, #0
 8002bc0:	67fb      	str	r3, [r7, #124]	; 0x7c
  macDefaultConf.PauseTime = 0x0;
 8002bc2:	2300      	movs	r3, #0
 8002bc4:	677b      	str	r3, [r7, #116]	; 0x74
  macDefaultConf.PreambleLength = ETH_PREAMBLELENGTH_7;
 8002bc6:	2300      	movs	r3, #0
 8002bc8:	65bb      	str	r3, [r7, #88]	; 0x58
  macDefaultConf.ProgrammableWatchdog = DISABLE;
 8002bca:	2300      	movs	r3, #0
 8002bcc:	f887 306c 	strb.w	r3, [r7, #108]	; 0x6c
  macDefaultConf.ReceiveFlowControl = DISABLE;
 8002bd0:	2300      	movs	r3, #0
 8002bd2:	f887 3082 	strb.w	r3, [r7, #130]	; 0x82
  macDefaultConf.ReceiveOwn = ENABLE;
 8002bd6:	2301      	movs	r3, #1
 8002bd8:	f887 304a 	strb.w	r3, [r7, #74]	; 0x4a
  macDefaultConf.ReceiveQueueMode = ETH_RECEIVESTOREFORWARD;
 8002bdc:	2320      	movs	r3, #32
 8002bde:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  macDefaultConf.RetryTransmission = ENABLE;
 8002be2:	2301      	movs	r3, #1
 8002be4:	f887 304c 	strb.w	r3, [r7, #76]	; 0x4c
  macDefaultConf.SlowProtocolDetect = DISABLE;
 8002be8:	2300      	movs	r3, #0
 8002bea:	f887 305d 	strb.w	r3, [r7, #93]	; 0x5d
  macDefaultConf.SourceAddrControl = ETH_SOURCEADDRESS_REPLACE_ADDR0;
 8002bee:	f04f 5340 	mov.w	r3, #805306368	; 0x30000000
 8002bf2:	62fb      	str	r3, [r7, #44]	; 0x2c
  macDefaultConf.Speed = ETH_SPEED_100M;
 8002bf4:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8002bf8:	643b      	str	r3, [r7, #64]	; 0x40
  macDefaultConf.Support2KPacket = DISABLE;
 8002bfa:	2300      	movs	r3, #0
 8002bfc:	f887 3039 	strb.w	r3, [r7, #57]	; 0x39
  macDefaultConf.TransmitQueueMode = ETH_TRANSMITSTOREFORWARD;
 8002c00:	2302      	movs	r3, #2
 8002c02:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  macDefaultConf.TransmitFlowControl = DISABLE;
 8002c06:	2300      	movs	r3, #0
 8002c08:	f887 3080 	strb.w	r3, [r7, #128]	; 0x80
  macDefaultConf.UnicastPausePacketDetect = DISABLE;
 8002c0c:	2300      	movs	r3, #0
 8002c0e:	f887 3081 	strb.w	r3, [r7, #129]	; 0x81
  macDefaultConf.UnicastSlowProtocolPacketDetect = DISABLE;
 8002c12:	2300      	movs	r3, #0
 8002c14:	f887 305c 	strb.w	r3, [r7, #92]	; 0x5c
  macDefaultConf.Watchdog = ENABLE;
 8002c18:	2301      	movs	r3, #1
 8002c1a:	f887 303c 	strb.w	r3, [r7, #60]	; 0x3c
  macDefaultConf.WatchdogTimeout =  ETH_MACWTR_WTO_2KB;
 8002c1e:	2300      	movs	r3, #0
 8002c20:	673b      	str	r3, [r7, #112]	; 0x70
  macDefaultConf.ZeroQuantaPause = ENABLE;
 8002c22:	2301      	movs	r3, #1
 8002c24:	f887 3078 	strb.w	r3, [r7, #120]	; 0x78

  /* MAC default configuration */
  ETH_SetMACConfig(heth, &macDefaultConf);
 8002c28:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8002c2c:	4619      	mov	r1, r3
 8002c2e:	6878      	ldr	r0, [r7, #4]
 8002c30:	f7ff fde6 	bl	8002800 <ETH_SetMACConfig>

  /*--------------- ETHERNET DMA registers default Configuration --------------*/
  dmaDefaultConf.AddressAlignedBeats = ENABLE;
 8002c34:	2301      	movs	r3, #1
 8002c36:	733b      	strb	r3, [r7, #12]
  dmaDefaultConf.BurstMode = ETH_BURSTLENGTH_FIXED;
 8002c38:	2301      	movs	r3, #1
 8002c3a:	613b      	str	r3, [r7, #16]
  dmaDefaultConf.DMAArbitration = ETH_DMAARBITRATION_RX1_TX1;
 8002c3c:	2300      	movs	r3, #0
 8002c3e:	60bb      	str	r3, [r7, #8]
  dmaDefaultConf.FlushRxPacket = DISABLE;
 8002c40:	2300      	movs	r3, #0
 8002c42:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
  dmaDefaultConf.PBLx8Mode = DISABLE;
 8002c46:	2300      	movs	r3, #0
 8002c48:	757b      	strb	r3, [r7, #21]
  dmaDefaultConf.RebuildINCRxBurst = DISABLE;
 8002c4a:	2300      	movs	r3, #0
 8002c4c:	753b      	strb	r3, [r7, #20]
  dmaDefaultConf.RxDMABurstLength = ETH_RXDMABURSTLENGTH_32BEAT;
 8002c4e:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8002c52:	623b      	str	r3, [r7, #32]
  dmaDefaultConf.SecondPacketOperate = DISABLE;
 8002c54:	2300      	movs	r3, #0
 8002c56:	773b      	strb	r3, [r7, #28]
  dmaDefaultConf.TxDMABurstLength = ETH_TXDMABURSTLENGTH_32BEAT;
 8002c58:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8002c5c:	61bb      	str	r3, [r7, #24]
  dmaDefaultConf.TCPSegmentation = DISABLE;
 8002c5e:	2300      	movs	r3, #0
 8002c60:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
  dmaDefaultConf.MaximumSegmentSize = 536;
 8002c64:	f44f 7306 	mov.w	r3, #536	; 0x218
 8002c68:	62bb      	str	r3, [r7, #40]	; 0x28

  /* DMA default configuration */
  ETH_SetDMAConfig(heth, &dmaDefaultConf);
 8002c6a:	f107 0308 	add.w	r3, r7, #8
 8002c6e:	4619      	mov	r1, r3
 8002c70:	6878      	ldr	r0, [r7, #4]
 8002c72:	f7ff fee1 	bl	8002a38 <ETH_SetDMAConfig>
}
 8002c76:	bf00      	nop
 8002c78:	3790      	adds	r7, #144	; 0x90
 8002c7a:	46bd      	mov	sp, r7
 8002c7c:	bd80      	pop	{r7, pc}
	...

08002c80 <ETH_MAC_MDIO_ClkConfig>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_MAC_MDIO_ClkConfig(ETH_HandleTypeDef *heth)
{
 8002c80:	b580      	push	{r7, lr}
 8002c82:	b084      	sub	sp, #16
 8002c84:	af00      	add	r7, sp, #0
 8002c86:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg, hclk;

  /* Get the ETHERNET MACMDIOAR value */
  tmpreg = (heth->Instance)->MACMDIOAR;
 8002c88:	687b      	ldr	r3, [r7, #4]
 8002c8a:	681b      	ldr	r3, [r3, #0]
 8002c8c:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8002c90:	60fb      	str	r3, [r7, #12]

  /* Clear CSR Clock Range bits */
  tmpreg &= ~ETH_MACMDIOAR_CR;
 8002c92:	68fb      	ldr	r3, [r7, #12]
 8002c94:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8002c98:	60fb      	str	r3, [r7, #12]

  /* Get hclk frequency value */
  hclk = HAL_RCC_GetHCLKFreq();
 8002c9a:	f001 f9a7 	bl	8003fec <HAL_RCC_GetHCLKFreq>
 8002c9e:	60b8      	str	r0, [r7, #8]

  /* Set CR bits depending on hclk value */
  if((hclk >= 20000000U)&&(hclk < 35000000U))
 8002ca0:	68bb      	ldr	r3, [r7, #8]
 8002ca2:	4a1e      	ldr	r2, [pc, #120]	; (8002d1c <ETH_MAC_MDIO_ClkConfig+0x9c>)
 8002ca4:	4293      	cmp	r3, r2
 8002ca6:	d908      	bls.n	8002cba <ETH_MAC_MDIO_ClkConfig+0x3a>
 8002ca8:	68bb      	ldr	r3, [r7, #8]
 8002caa:	4a1d      	ldr	r2, [pc, #116]	; (8002d20 <ETH_MAC_MDIO_ClkConfig+0xa0>)
 8002cac:	4293      	cmp	r3, r2
 8002cae:	d804      	bhi.n	8002cba <ETH_MAC_MDIO_ClkConfig+0x3a>
  {
    /* CSR Clock Range between 20-35 MHz */
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV16;
 8002cb0:	68fb      	ldr	r3, [r7, #12]
 8002cb2:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8002cb6:	60fb      	str	r3, [r7, #12]
 8002cb8:	e027      	b.n	8002d0a <ETH_MAC_MDIO_ClkConfig+0x8a>
  }
  else if((hclk >= 35000000U)&&(hclk < 60000000U))
 8002cba:	68bb      	ldr	r3, [r7, #8]
 8002cbc:	4a18      	ldr	r2, [pc, #96]	; (8002d20 <ETH_MAC_MDIO_ClkConfig+0xa0>)
 8002cbe:	4293      	cmp	r3, r2
 8002cc0:	d908      	bls.n	8002cd4 <ETH_MAC_MDIO_ClkConfig+0x54>
 8002cc2:	68bb      	ldr	r3, [r7, #8]
 8002cc4:	4a17      	ldr	r2, [pc, #92]	; (8002d24 <ETH_MAC_MDIO_ClkConfig+0xa4>)
 8002cc6:	4293      	cmp	r3, r2
 8002cc8:	d204      	bcs.n	8002cd4 <ETH_MAC_MDIO_ClkConfig+0x54>
  {
    /* CSR Clock Range between 35-60 MHz */
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV26;
 8002cca:	68fb      	ldr	r3, [r7, #12]
 8002ccc:	f443 7340 	orr.w	r3, r3, #768	; 0x300
 8002cd0:	60fb      	str	r3, [r7, #12]
 8002cd2:	e01a      	b.n	8002d0a <ETH_MAC_MDIO_ClkConfig+0x8a>
  }
  else if((hclk >= 60000000U)&&(hclk < 100000000U))
 8002cd4:	68bb      	ldr	r3, [r7, #8]
 8002cd6:	4a13      	ldr	r2, [pc, #76]	; (8002d24 <ETH_MAC_MDIO_ClkConfig+0xa4>)
 8002cd8:	4293      	cmp	r3, r2
 8002cda:	d303      	bcc.n	8002ce4 <ETH_MAC_MDIO_ClkConfig+0x64>
 8002cdc:	68bb      	ldr	r3, [r7, #8]
 8002cde:	4a12      	ldr	r2, [pc, #72]	; (8002d28 <ETH_MAC_MDIO_ClkConfig+0xa8>)
 8002ce0:	4293      	cmp	r3, r2
 8002ce2:	d911      	bls.n	8002d08 <ETH_MAC_MDIO_ClkConfig+0x88>
  {
    /* CSR Clock Range between 60-100 MHz */
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV42;
  }
  else if((hclk >= 100000000U)&&(hclk < 150000000U))
 8002ce4:	68bb      	ldr	r3, [r7, #8]
 8002ce6:	4a10      	ldr	r2, [pc, #64]	; (8002d28 <ETH_MAC_MDIO_ClkConfig+0xa8>)
 8002ce8:	4293      	cmp	r3, r2
 8002cea:	d908      	bls.n	8002cfe <ETH_MAC_MDIO_ClkConfig+0x7e>
 8002cec:	68bb      	ldr	r3, [r7, #8]
 8002cee:	4a0f      	ldr	r2, [pc, #60]	; (8002d2c <ETH_MAC_MDIO_ClkConfig+0xac>)
 8002cf0:	4293      	cmp	r3, r2
 8002cf2:	d804      	bhi.n	8002cfe <ETH_MAC_MDIO_ClkConfig+0x7e>
  {
    /* CSR Clock Range between 100-150 MHz */
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV62;
 8002cf4:	68fb      	ldr	r3, [r7, #12]
 8002cf6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002cfa:	60fb      	str	r3, [r7, #12]
 8002cfc:	e005      	b.n	8002d0a <ETH_MAC_MDIO_ClkConfig+0x8a>
  }
  else /* (hclk >= 150000000)&&(hclk <= 200000000) */
  {
    /* CSR Clock Range between 150-200 MHz */
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV102;
 8002cfe:	68fb      	ldr	r3, [r7, #12]
 8002d00:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8002d04:	60fb      	str	r3, [r7, #12]
 8002d06:	e000      	b.n	8002d0a <ETH_MAC_MDIO_ClkConfig+0x8a>
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV42;
 8002d08:	bf00      	nop
  }

  /* Configure the CSR Clock Range */
  (heth->Instance)->MACMDIOAR = (uint32_t)tmpreg;
 8002d0a:	687b      	ldr	r3, [r7, #4]
 8002d0c:	681b      	ldr	r3, [r3, #0]
 8002d0e:	68fa      	ldr	r2, [r7, #12]
 8002d10:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
}
 8002d14:	bf00      	nop
 8002d16:	3710      	adds	r7, #16
 8002d18:	46bd      	mov	sp, r7
 8002d1a:	bd80      	pop	{r7, pc}
 8002d1c:	01312cff 	.word	0x01312cff
 8002d20:	02160ebf 	.word	0x02160ebf
 8002d24:	03938700 	.word	0x03938700
 8002d28:	05f5e0ff 	.word	0x05f5e0ff
 8002d2c:	08f0d17f 	.word	0x08f0d17f

08002d30 <ETH_DMATxDescListInit>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_DMATxDescListInit(ETH_HandleTypeDef *heth)
{
 8002d30:	b480      	push	{r7}
 8002d32:	b085      	sub	sp, #20
 8002d34:	af00      	add	r7, sp, #0
 8002d36:	6078      	str	r0, [r7, #4]
  ETH_DMADescTypeDef *dmatxdesc;
  uint32_t i;

  /* Fill each DMATxDesc descriptor with the right values */
  for(i=0; i < (uint32_t)ETH_TX_DESC_CNT; i++)
 8002d38:	2300      	movs	r3, #0
 8002d3a:	60fb      	str	r3, [r7, #12]
 8002d3c:	e01d      	b.n	8002d7a <ETH_DMATxDescListInit+0x4a>
  {
    dmatxdesc = heth->Init.TxDesc + i;
 8002d3e:	687b      	ldr	r3, [r7, #4]
 8002d40:	68d9      	ldr	r1, [r3, #12]
 8002d42:	68fa      	ldr	r2, [r7, #12]
 8002d44:	4613      	mov	r3, r2
 8002d46:	005b      	lsls	r3, r3, #1
 8002d48:	4413      	add	r3, r2
 8002d4a:	00db      	lsls	r3, r3, #3
 8002d4c:	440b      	add	r3, r1
 8002d4e:	60bb      	str	r3, [r7, #8]

    WRITE_REG(dmatxdesc->DESC0, 0x0);
 8002d50:	68bb      	ldr	r3, [r7, #8]
 8002d52:	2200      	movs	r2, #0
 8002d54:	601a      	str	r2, [r3, #0]
    WRITE_REG(dmatxdesc->DESC1, 0x0);
 8002d56:	68bb      	ldr	r3, [r7, #8]
 8002d58:	2200      	movs	r2, #0
 8002d5a:	605a      	str	r2, [r3, #4]
    WRITE_REG(dmatxdesc->DESC2, 0x0);
 8002d5c:	68bb      	ldr	r3, [r7, #8]
 8002d5e:	2200      	movs	r2, #0
 8002d60:	609a      	str	r2, [r3, #8]
    WRITE_REG(dmatxdesc->DESC3, 0x0);
 8002d62:	68bb      	ldr	r3, [r7, #8]
 8002d64:	2200      	movs	r2, #0
 8002d66:	60da      	str	r2, [r3, #12]

    WRITE_REG(heth->TxDescList.TxDesc[i], (uint32_t)dmatxdesc);
 8002d68:	68b9      	ldr	r1, [r7, #8]
 8002d6a:	687b      	ldr	r3, [r7, #4]
 8002d6c:	68fa      	ldr	r2, [r7, #12]
 8002d6e:	3206      	adds	r2, #6
 8002d70:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  for(i=0; i < (uint32_t)ETH_TX_DESC_CNT; i++)
 8002d74:	68fb      	ldr	r3, [r7, #12]
 8002d76:	3301      	adds	r3, #1
 8002d78:	60fb      	str	r3, [r7, #12]
 8002d7a:	68fb      	ldr	r3, [r7, #12]
 8002d7c:	2b03      	cmp	r3, #3
 8002d7e:	d9de      	bls.n	8002d3e <ETH_DMATxDescListInit+0xe>
  }

  heth->TxDescList.CurTxDesc = 0;
 8002d80:	687b      	ldr	r3, [r7, #4]
 8002d82:	2200      	movs	r2, #0
 8002d84:	629a      	str	r2, [r3, #40]	; 0x28

  /* Set Transmit Descriptor Ring Length */
  WRITE_REG(heth->Instance->DMACTDRLR, (ETH_TX_DESC_CNT -1));
 8002d86:	687b      	ldr	r3, [r7, #4]
 8002d88:	681a      	ldr	r2, [r3, #0]
 8002d8a:	f241 132c 	movw	r3, #4396	; 0x112c
 8002d8e:	4413      	add	r3, r2
 8002d90:	2203      	movs	r2, #3
 8002d92:	601a      	str	r2, [r3, #0]

  /* Set Transmit Descriptor List Address */
  WRITE_REG(heth->Instance->DMACTDLAR, (uint32_t) heth->Init.TxDesc);
 8002d94:	687b      	ldr	r3, [r7, #4]
 8002d96:	68d9      	ldr	r1, [r3, #12]
 8002d98:	687b      	ldr	r3, [r7, #4]
 8002d9a:	681a      	ldr	r2, [r3, #0]
 8002d9c:	f241 1314 	movw	r3, #4372	; 0x1114
 8002da0:	4413      	add	r3, r2
 8002da2:	6019      	str	r1, [r3, #0]

  /* Set Transmit Descriptor Tail pointer */
  WRITE_REG(heth->Instance->DMACTDTPR, (uint32_t) heth->Init.TxDesc);
 8002da4:	687b      	ldr	r3, [r7, #4]
 8002da6:	68da      	ldr	r2, [r3, #12]
 8002da8:	687b      	ldr	r3, [r7, #4]
 8002daa:	681b      	ldr	r3, [r3, #0]
 8002dac:	f503 5389 	add.w	r3, r3, #4384	; 0x1120
 8002db0:	601a      	str	r2, [r3, #0]
}
 8002db2:	bf00      	nop
 8002db4:	3714      	adds	r7, #20
 8002db6:	46bd      	mov	sp, r7
 8002db8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002dbc:	4770      	bx	lr

08002dbe <ETH_DMARxDescListInit>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_DMARxDescListInit(ETH_HandleTypeDef *heth)
{
 8002dbe:	b480      	push	{r7}
 8002dc0:	b085      	sub	sp, #20
 8002dc2:	af00      	add	r7, sp, #0
 8002dc4:	6078      	str	r0, [r7, #4]
  ETH_DMADescTypeDef *dmarxdesc;
  uint32_t i;

  for(i = 0; i < (uint32_t)ETH_RX_DESC_CNT; i++)
 8002dc6:	2300      	movs	r3, #0
 8002dc8:	60fb      	str	r3, [r7, #12]
 8002dca:	e024      	b.n	8002e16 <ETH_DMARxDescListInit+0x58>
  {
    dmarxdesc =  heth->Init.RxDesc + i;
 8002dcc:	687b      	ldr	r3, [r7, #4]
 8002dce:	6919      	ldr	r1, [r3, #16]
 8002dd0:	68fa      	ldr	r2, [r7, #12]
 8002dd2:	4613      	mov	r3, r2
 8002dd4:	005b      	lsls	r3, r3, #1
 8002dd6:	4413      	add	r3, r2
 8002dd8:	00db      	lsls	r3, r3, #3
 8002dda:	440b      	add	r3, r1
 8002ddc:	60bb      	str	r3, [r7, #8]

    WRITE_REG(dmarxdesc->DESC0, 0x0);
 8002dde:	68bb      	ldr	r3, [r7, #8]
 8002de0:	2200      	movs	r2, #0
 8002de2:	601a      	str	r2, [r3, #0]
    WRITE_REG(dmarxdesc->DESC1, 0x0);
 8002de4:	68bb      	ldr	r3, [r7, #8]
 8002de6:	2200      	movs	r2, #0
 8002de8:	605a      	str	r2, [r3, #4]
    WRITE_REG(dmarxdesc->DESC2, 0x0);
 8002dea:	68bb      	ldr	r3, [r7, #8]
 8002dec:	2200      	movs	r2, #0
 8002dee:	609a      	str	r2, [r3, #8]
    WRITE_REG(dmarxdesc->DESC3, 0x0);
 8002df0:	68bb      	ldr	r3, [r7, #8]
 8002df2:	2200      	movs	r2, #0
 8002df4:	60da      	str	r2, [r3, #12]
    WRITE_REG(dmarxdesc->BackupAddr0, 0x0);
 8002df6:	68bb      	ldr	r3, [r7, #8]
 8002df8:	2200      	movs	r2, #0
 8002dfa:	611a      	str	r2, [r3, #16]
    WRITE_REG(dmarxdesc->BackupAddr1, 0x0);
 8002dfc:	68bb      	ldr	r3, [r7, #8]
 8002dfe:	2200      	movs	r2, #0
 8002e00:	615a      	str	r2, [r3, #20]

    /* Set Rx descritors addresses */
    WRITE_REG(heth->RxDescList.RxDesc[i], (uint32_t)dmarxdesc);
 8002e02:	68ba      	ldr	r2, [r7, #8]
 8002e04:	6879      	ldr	r1, [r7, #4]
 8002e06:	68fb      	ldr	r3, [r7, #12]
 8002e08:	3310      	adds	r3, #16
 8002e0a:	009b      	lsls	r3, r3, #2
 8002e0c:	440b      	add	r3, r1
 8002e0e:	605a      	str	r2, [r3, #4]
  for(i = 0; i < (uint32_t)ETH_RX_DESC_CNT; i++)
 8002e10:	68fb      	ldr	r3, [r7, #12]
 8002e12:	3301      	adds	r3, #1
 8002e14:	60fb      	str	r3, [r7, #12]
 8002e16:	68fb      	ldr	r3, [r7, #12]
 8002e18:	2b03      	cmp	r3, #3
 8002e1a:	d9d7      	bls.n	8002dcc <ETH_DMARxDescListInit+0xe>
  }

  WRITE_REG(heth->RxDescList.CurRxDesc, 0);
 8002e1c:	687b      	ldr	r3, [r7, #4]
 8002e1e:	2200      	movs	r2, #0
 8002e20:	655a      	str	r2, [r3, #84]	; 0x54
  WRITE_REG(heth->RxDescList.FirstAppDesc, 0);
 8002e22:	687b      	ldr	r3, [r7, #4]
 8002e24:	2200      	movs	r2, #0
 8002e26:	659a      	str	r2, [r3, #88]	; 0x58
  WRITE_REG(heth->RxDescList.AppDescNbr, 0);
 8002e28:	687b      	ldr	r3, [r7, #4]
 8002e2a:	2200      	movs	r2, #0
 8002e2c:	65da      	str	r2, [r3, #92]	; 0x5c
  WRITE_REG(heth->RxDescList.ItMode, 0);
 8002e2e:	687b      	ldr	r3, [r7, #4]
 8002e30:	2200      	movs	r2, #0
 8002e32:	665a      	str	r2, [r3, #100]	; 0x64
  WRITE_REG(heth->RxDescList.AppContextDesc, 0);
 8002e34:	687b      	ldr	r3, [r7, #4]
 8002e36:	2200      	movs	r2, #0
 8002e38:	661a      	str	r2, [r3, #96]	; 0x60

  /* Set Receive Descriptor Ring Length */
  WRITE_REG(heth->Instance->DMACRDRLR, ((uint32_t)(ETH_RX_DESC_CNT - 1)));
 8002e3a:	687b      	ldr	r3, [r7, #4]
 8002e3c:	681a      	ldr	r2, [r3, #0]
 8002e3e:	f241 1330 	movw	r3, #4400	; 0x1130
 8002e42:	4413      	add	r3, r2
 8002e44:	2203      	movs	r2, #3
 8002e46:	601a      	str	r2, [r3, #0]

  /* Set Receive Descriptor List Address */
  WRITE_REG(heth->Instance->DMACRDLAR, (uint32_t) heth->Init.RxDesc);
 8002e48:	687b      	ldr	r3, [r7, #4]
 8002e4a:	6919      	ldr	r1, [r3, #16]
 8002e4c:	687b      	ldr	r3, [r7, #4]
 8002e4e:	681a      	ldr	r2, [r3, #0]
 8002e50:	f241 131c 	movw	r3, #4380	; 0x111c
 8002e54:	4413      	add	r3, r2
 8002e56:	6019      	str	r1, [r3, #0]

  /* Set Receive Descriptor Tail pointer Address */
  WRITE_REG(heth->Instance->DMACRDTPR, ((uint32_t)(heth->Init.RxDesc + (uint32_t)(ETH_RX_DESC_CNT - 1))));
 8002e58:	687b      	ldr	r3, [r7, #4]
 8002e5a:	691b      	ldr	r3, [r3, #16]
 8002e5c:	f103 0148 	add.w	r1, r3, #72	; 0x48
 8002e60:	687b      	ldr	r3, [r7, #4]
 8002e62:	681a      	ldr	r2, [r3, #0]
 8002e64:	f241 1328 	movw	r3, #4392	; 0x1128
 8002e68:	4413      	add	r3, r2
 8002e6a:	6019      	str	r1, [r3, #0]
}
 8002e6c:	bf00      	nop
 8002e6e:	3714      	adds	r7, #20
 8002e70:	46bd      	mov	sp, r7
 8002e72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e76:	4770      	bx	lr

08002e78 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002e78:	b480      	push	{r7}
 8002e7a:	b089      	sub	sp, #36	; 0x24
 8002e7c:	af00      	add	r7, sp, #0
 8002e7e:	6078      	str	r0, [r7, #4]
 8002e80:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8002e82:	2300      	movs	r3, #0
 8002e84:	61fb      	str	r3, [r7, #28]
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
#else
  EXTI_CurrentCPU = EXTI_D1; /* EXTI for CM7 CPU */
 8002e86:	4b86      	ldr	r3, [pc, #536]	; (80030a0 <HAL_GPIO_Init+0x228>)
 8002e88:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8002e8a:	e18c      	b.n	80031a6 <HAL_GPIO_Init+0x32e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8002e8c:	683b      	ldr	r3, [r7, #0]
 8002e8e:	681a      	ldr	r2, [r3, #0]
 8002e90:	2101      	movs	r1, #1
 8002e92:	69fb      	ldr	r3, [r7, #28]
 8002e94:	fa01 f303 	lsl.w	r3, r1, r3
 8002e98:	4013      	ands	r3, r2
 8002e9a:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00U)
 8002e9c:	693b      	ldr	r3, [r7, #16]
 8002e9e:	2b00      	cmp	r3, #0
 8002ea0:	f000 817e 	beq.w	80031a0 <HAL_GPIO_Init+0x328>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if ((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8002ea4:	683b      	ldr	r3, [r7, #0]
 8002ea6:	685b      	ldr	r3, [r3, #4]
 8002ea8:	2b01      	cmp	r3, #1
 8002eaa:	d00b      	beq.n	8002ec4 <HAL_GPIO_Init+0x4c>
 8002eac:	683b      	ldr	r3, [r7, #0]
 8002eae:	685b      	ldr	r3, [r3, #4]
 8002eb0:	2b02      	cmp	r3, #2
 8002eb2:	d007      	beq.n	8002ec4 <HAL_GPIO_Init+0x4c>
          (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8002eb4:	683b      	ldr	r3, [r7, #0]
 8002eb6:	685b      	ldr	r3, [r3, #4]
      if ((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8002eb8:	2b11      	cmp	r3, #17
 8002eba:	d003      	beq.n	8002ec4 <HAL_GPIO_Init+0x4c>
          (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8002ebc:	683b      	ldr	r3, [r7, #0]
 8002ebe:	685b      	ldr	r3, [r3, #4]
 8002ec0:	2b12      	cmp	r3, #18
 8002ec2:	d130      	bne.n	8002f26 <HAL_GPIO_Init+0xae>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8002ec4:	687b      	ldr	r3, [r7, #4]
 8002ec6:	689b      	ldr	r3, [r3, #8]
 8002ec8:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8002eca:	69fb      	ldr	r3, [r7, #28]
 8002ecc:	005b      	lsls	r3, r3, #1
 8002ece:	2203      	movs	r2, #3
 8002ed0:	fa02 f303 	lsl.w	r3, r2, r3
 8002ed4:	43db      	mvns	r3, r3
 8002ed6:	69ba      	ldr	r2, [r7, #24]
 8002ed8:	4013      	ands	r3, r2
 8002eda:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8002edc:	683b      	ldr	r3, [r7, #0]
 8002ede:	68da      	ldr	r2, [r3, #12]
 8002ee0:	69fb      	ldr	r3, [r7, #28]
 8002ee2:	005b      	lsls	r3, r3, #1
 8002ee4:	fa02 f303 	lsl.w	r3, r2, r3
 8002ee8:	69ba      	ldr	r2, [r7, #24]
 8002eea:	4313      	orrs	r3, r2
 8002eec:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8002eee:	687b      	ldr	r3, [r7, #4]
 8002ef0:	69ba      	ldr	r2, [r7, #24]
 8002ef2:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002ef4:	687b      	ldr	r3, [r7, #4]
 8002ef6:	685b      	ldr	r3, [r3, #4]
 8002ef8:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8002efa:	2201      	movs	r2, #1
 8002efc:	69fb      	ldr	r3, [r7, #28]
 8002efe:	fa02 f303 	lsl.w	r3, r2, r3
 8002f02:	43db      	mvns	r3, r3
 8002f04:	69ba      	ldr	r2, [r7, #24]
 8002f06:	4013      	ands	r3, r2
 8002f08:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8002f0a:	683b      	ldr	r3, [r7, #0]
 8002f0c:	685b      	ldr	r3, [r3, #4]
 8002f0e:	091b      	lsrs	r3, r3, #4
 8002f10:	f003 0201 	and.w	r2, r3, #1
 8002f14:	69fb      	ldr	r3, [r7, #28]
 8002f16:	fa02 f303 	lsl.w	r3, r2, r3
 8002f1a:	69ba      	ldr	r2, [r7, #24]
 8002f1c:	4313      	orrs	r3, r2
 8002f1e:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8002f20:	687b      	ldr	r3, [r7, #4]
 8002f22:	69ba      	ldr	r2, [r7, #24]
 8002f24:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8002f26:	687b      	ldr	r3, [r7, #4]
 8002f28:	68db      	ldr	r3, [r3, #12]
 8002f2a:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8002f2c:	69fb      	ldr	r3, [r7, #28]
 8002f2e:	005b      	lsls	r3, r3, #1
 8002f30:	2203      	movs	r2, #3
 8002f32:	fa02 f303 	lsl.w	r3, r2, r3
 8002f36:	43db      	mvns	r3, r3
 8002f38:	69ba      	ldr	r2, [r7, #24]
 8002f3a:	4013      	ands	r3, r2
 8002f3c:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8002f3e:	683b      	ldr	r3, [r7, #0]
 8002f40:	689a      	ldr	r2, [r3, #8]
 8002f42:	69fb      	ldr	r3, [r7, #28]
 8002f44:	005b      	lsls	r3, r3, #1
 8002f46:	fa02 f303 	lsl.w	r3, r2, r3
 8002f4a:	69ba      	ldr	r2, [r7, #24]
 8002f4c:	4313      	orrs	r3, r2
 8002f4e:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8002f50:	687b      	ldr	r3, [r7, #4]
 8002f52:	69ba      	ldr	r2, [r7, #24]
 8002f54:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8002f56:	683b      	ldr	r3, [r7, #0]
 8002f58:	685b      	ldr	r3, [r3, #4]
 8002f5a:	2b02      	cmp	r3, #2
 8002f5c:	d003      	beq.n	8002f66 <HAL_GPIO_Init+0xee>
 8002f5e:	683b      	ldr	r3, [r7, #0]
 8002f60:	685b      	ldr	r3, [r3, #4]
 8002f62:	2b12      	cmp	r3, #18
 8002f64:	d123      	bne.n	8002fae <HAL_GPIO_Init+0x136>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8002f66:	69fb      	ldr	r3, [r7, #28]
 8002f68:	08da      	lsrs	r2, r3, #3
 8002f6a:	687b      	ldr	r3, [r7, #4]
 8002f6c:	3208      	adds	r2, #8
 8002f6e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002f72:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8002f74:	69fb      	ldr	r3, [r7, #28]
 8002f76:	f003 0307 	and.w	r3, r3, #7
 8002f7a:	009b      	lsls	r3, r3, #2
 8002f7c:	220f      	movs	r2, #15
 8002f7e:	fa02 f303 	lsl.w	r3, r2, r3
 8002f82:	43db      	mvns	r3, r3
 8002f84:	69ba      	ldr	r2, [r7, #24]
 8002f86:	4013      	ands	r3, r2
 8002f88:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8002f8a:	683b      	ldr	r3, [r7, #0]
 8002f8c:	691a      	ldr	r2, [r3, #16]
 8002f8e:	69fb      	ldr	r3, [r7, #28]
 8002f90:	f003 0307 	and.w	r3, r3, #7
 8002f94:	009b      	lsls	r3, r3, #2
 8002f96:	fa02 f303 	lsl.w	r3, r2, r3
 8002f9a:	69ba      	ldr	r2, [r7, #24]
 8002f9c:	4313      	orrs	r3, r2
 8002f9e:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8002fa0:	69fb      	ldr	r3, [r7, #28]
 8002fa2:	08da      	lsrs	r2, r3, #3
 8002fa4:	687b      	ldr	r3, [r7, #4]
 8002fa6:	3208      	adds	r2, #8
 8002fa8:	69b9      	ldr	r1, [r7, #24]
 8002faa:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002fae:	687b      	ldr	r3, [r7, #4]
 8002fb0:	681b      	ldr	r3, [r3, #0]
 8002fb2:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8002fb4:	69fb      	ldr	r3, [r7, #28]
 8002fb6:	005b      	lsls	r3, r3, #1
 8002fb8:	2203      	movs	r2, #3
 8002fba:	fa02 f303 	lsl.w	r3, r2, r3
 8002fbe:	43db      	mvns	r3, r3
 8002fc0:	69ba      	ldr	r2, [r7, #24]
 8002fc2:	4013      	ands	r3, r2
 8002fc4:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8002fc6:	683b      	ldr	r3, [r7, #0]
 8002fc8:	685b      	ldr	r3, [r3, #4]
 8002fca:	f003 0203 	and.w	r2, r3, #3
 8002fce:	69fb      	ldr	r3, [r7, #28]
 8002fd0:	005b      	lsls	r3, r3, #1
 8002fd2:	fa02 f303 	lsl.w	r3, r2, r3
 8002fd6:	69ba      	ldr	r2, [r7, #24]
 8002fd8:	4313      	orrs	r3, r2
 8002fda:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8002fdc:	687b      	ldr	r3, [r7, #4]
 8002fde:	69ba      	ldr	r2, [r7, #24]
 8002fe0:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8002fe2:	683b      	ldr	r3, [r7, #0]
 8002fe4:	685b      	ldr	r3, [r3, #4]
 8002fe6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002fea:	2b00      	cmp	r3, #0
 8002fec:	f000 80d8 	beq.w	80031a0 <HAL_GPIO_Init+0x328>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002ff0:	4b2c      	ldr	r3, [pc, #176]	; (80030a4 <HAL_GPIO_Init+0x22c>)
 8002ff2:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8002ff6:	4a2b      	ldr	r2, [pc, #172]	; (80030a4 <HAL_GPIO_Init+0x22c>)
 8002ff8:	f043 0302 	orr.w	r3, r3, #2
 8002ffc:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 8003000:	4b28      	ldr	r3, [pc, #160]	; (80030a4 <HAL_GPIO_Init+0x22c>)
 8003002:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8003006:	f003 0302 	and.w	r3, r3, #2
 800300a:	60fb      	str	r3, [r7, #12]
 800300c:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800300e:	4a26      	ldr	r2, [pc, #152]	; (80030a8 <HAL_GPIO_Init+0x230>)
 8003010:	69fb      	ldr	r3, [r7, #28]
 8003012:	089b      	lsrs	r3, r3, #2
 8003014:	3302      	adds	r3, #2
 8003016:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800301a:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 800301c:	69fb      	ldr	r3, [r7, #28]
 800301e:	f003 0303 	and.w	r3, r3, #3
 8003022:	009b      	lsls	r3, r3, #2
 8003024:	220f      	movs	r2, #15
 8003026:	fa02 f303 	lsl.w	r3, r2, r3
 800302a:	43db      	mvns	r3, r3
 800302c:	69ba      	ldr	r2, [r7, #24]
 800302e:	4013      	ands	r3, r2
 8003030:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8003032:	687b      	ldr	r3, [r7, #4]
 8003034:	4a1d      	ldr	r2, [pc, #116]	; (80030ac <HAL_GPIO_Init+0x234>)
 8003036:	4293      	cmp	r3, r2
 8003038:	d04a      	beq.n	80030d0 <HAL_GPIO_Init+0x258>
 800303a:	687b      	ldr	r3, [r7, #4]
 800303c:	4a1c      	ldr	r2, [pc, #112]	; (80030b0 <HAL_GPIO_Init+0x238>)
 800303e:	4293      	cmp	r3, r2
 8003040:	d02b      	beq.n	800309a <HAL_GPIO_Init+0x222>
 8003042:	687b      	ldr	r3, [r7, #4]
 8003044:	4a1b      	ldr	r2, [pc, #108]	; (80030b4 <HAL_GPIO_Init+0x23c>)
 8003046:	4293      	cmp	r3, r2
 8003048:	d025      	beq.n	8003096 <HAL_GPIO_Init+0x21e>
 800304a:	687b      	ldr	r3, [r7, #4]
 800304c:	4a1a      	ldr	r2, [pc, #104]	; (80030b8 <HAL_GPIO_Init+0x240>)
 800304e:	4293      	cmp	r3, r2
 8003050:	d01f      	beq.n	8003092 <HAL_GPIO_Init+0x21a>
 8003052:	687b      	ldr	r3, [r7, #4]
 8003054:	4a19      	ldr	r2, [pc, #100]	; (80030bc <HAL_GPIO_Init+0x244>)
 8003056:	4293      	cmp	r3, r2
 8003058:	d019      	beq.n	800308e <HAL_GPIO_Init+0x216>
 800305a:	687b      	ldr	r3, [r7, #4]
 800305c:	4a18      	ldr	r2, [pc, #96]	; (80030c0 <HAL_GPIO_Init+0x248>)
 800305e:	4293      	cmp	r3, r2
 8003060:	d013      	beq.n	800308a <HAL_GPIO_Init+0x212>
 8003062:	687b      	ldr	r3, [r7, #4]
 8003064:	4a17      	ldr	r2, [pc, #92]	; (80030c4 <HAL_GPIO_Init+0x24c>)
 8003066:	4293      	cmp	r3, r2
 8003068:	d00d      	beq.n	8003086 <HAL_GPIO_Init+0x20e>
 800306a:	687b      	ldr	r3, [r7, #4]
 800306c:	4a16      	ldr	r2, [pc, #88]	; (80030c8 <HAL_GPIO_Init+0x250>)
 800306e:	4293      	cmp	r3, r2
 8003070:	d007      	beq.n	8003082 <HAL_GPIO_Init+0x20a>
 8003072:	687b      	ldr	r3, [r7, #4]
 8003074:	4a15      	ldr	r2, [pc, #84]	; (80030cc <HAL_GPIO_Init+0x254>)
 8003076:	4293      	cmp	r3, r2
 8003078:	d101      	bne.n	800307e <HAL_GPIO_Init+0x206>
 800307a:	2309      	movs	r3, #9
 800307c:	e029      	b.n	80030d2 <HAL_GPIO_Init+0x25a>
 800307e:	230a      	movs	r3, #10
 8003080:	e027      	b.n	80030d2 <HAL_GPIO_Init+0x25a>
 8003082:	2307      	movs	r3, #7
 8003084:	e025      	b.n	80030d2 <HAL_GPIO_Init+0x25a>
 8003086:	2306      	movs	r3, #6
 8003088:	e023      	b.n	80030d2 <HAL_GPIO_Init+0x25a>
 800308a:	2305      	movs	r3, #5
 800308c:	e021      	b.n	80030d2 <HAL_GPIO_Init+0x25a>
 800308e:	2304      	movs	r3, #4
 8003090:	e01f      	b.n	80030d2 <HAL_GPIO_Init+0x25a>
 8003092:	2303      	movs	r3, #3
 8003094:	e01d      	b.n	80030d2 <HAL_GPIO_Init+0x25a>
 8003096:	2302      	movs	r3, #2
 8003098:	e01b      	b.n	80030d2 <HAL_GPIO_Init+0x25a>
 800309a:	2301      	movs	r3, #1
 800309c:	e019      	b.n	80030d2 <HAL_GPIO_Init+0x25a>
 800309e:	bf00      	nop
 80030a0:	58000080 	.word	0x58000080
 80030a4:	58024400 	.word	0x58024400
 80030a8:	58000400 	.word	0x58000400
 80030ac:	58020000 	.word	0x58020000
 80030b0:	58020400 	.word	0x58020400
 80030b4:	58020800 	.word	0x58020800
 80030b8:	58020c00 	.word	0x58020c00
 80030bc:	58021000 	.word	0x58021000
 80030c0:	58021400 	.word	0x58021400
 80030c4:	58021800 	.word	0x58021800
 80030c8:	58021c00 	.word	0x58021c00
 80030cc:	58022400 	.word	0x58022400
 80030d0:	2300      	movs	r3, #0
 80030d2:	69fa      	ldr	r2, [r7, #28]
 80030d4:	f002 0203 	and.w	r2, r2, #3
 80030d8:	0092      	lsls	r2, r2, #2
 80030da:	4093      	lsls	r3, r2
 80030dc:	69ba      	ldr	r2, [r7, #24]
 80030de:	4313      	orrs	r3, r2
 80030e0:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80030e2:	4938      	ldr	r1, [pc, #224]	; (80031c4 <HAL_GPIO_Init+0x34c>)
 80030e4:	69fb      	ldr	r3, [r7, #28]
 80030e6:	089b      	lsrs	r3, r3, #2
 80030e8:	3302      	adds	r3, #2
 80030ea:	69ba      	ldr	r2, [r7, #24]
 80030ec:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
 80030f0:	697b      	ldr	r3, [r7, #20]
 80030f2:	681b      	ldr	r3, [r3, #0]
 80030f4:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 80030f6:	693b      	ldr	r3, [r7, #16]
 80030f8:	43db      	mvns	r3, r3
 80030fa:	69ba      	ldr	r2, [r7, #24]
 80030fc:	4013      	ands	r3, r2
 80030fe:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8003100:	683b      	ldr	r3, [r7, #0]
 8003102:	685b      	ldr	r3, [r3, #4]
 8003104:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003108:	2b00      	cmp	r3, #0
 800310a:	d003      	beq.n	8003114 <HAL_GPIO_Init+0x29c>
        {
          temp |= iocurrent;
 800310c:	69ba      	ldr	r2, [r7, #24]
 800310e:	693b      	ldr	r3, [r7, #16]
 8003110:	4313      	orrs	r3, r2
 8003112:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->IMR1 = temp;
 8003114:	697b      	ldr	r3, [r7, #20]
 8003116:	69ba      	ldr	r2, [r7, #24]
 8003118:	601a      	str	r2, [r3, #0]

        temp = EXTI_CurrentCPU->EMR1;
 800311a:	697b      	ldr	r3, [r7, #20]
 800311c:	685b      	ldr	r3, [r3, #4]
 800311e:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8003120:	693b      	ldr	r3, [r7, #16]
 8003122:	43db      	mvns	r3, r3
 8003124:	69ba      	ldr	r2, [r7, #24]
 8003126:	4013      	ands	r3, r2
 8003128:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 800312a:	683b      	ldr	r3, [r7, #0]
 800312c:	685b      	ldr	r3, [r3, #4]
 800312e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003132:	2b00      	cmp	r3, #0
 8003134:	d003      	beq.n	800313e <HAL_GPIO_Init+0x2c6>
        {
          temp |= iocurrent;
 8003136:	69ba      	ldr	r2, [r7, #24]
 8003138:	693b      	ldr	r3, [r7, #16]
 800313a:	4313      	orrs	r3, r2
 800313c:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->EMR1 = temp;
 800313e:	697b      	ldr	r3, [r7, #20]
 8003140:	69ba      	ldr	r2, [r7, #24]
 8003142:	605a      	str	r2, [r3, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8003144:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003148:	681b      	ldr	r3, [r3, #0]
 800314a:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 800314c:	693b      	ldr	r3, [r7, #16]
 800314e:	43db      	mvns	r3, r3
 8003150:	69ba      	ldr	r2, [r7, #24]
 8003152:	4013      	ands	r3, r2
 8003154:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8003156:	683b      	ldr	r3, [r7, #0]
 8003158:	685b      	ldr	r3, [r3, #4]
 800315a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800315e:	2b00      	cmp	r3, #0
 8003160:	d003      	beq.n	800316a <HAL_GPIO_Init+0x2f2>
        {
          temp |= iocurrent;
 8003162:	69ba      	ldr	r2, [r7, #24]
 8003164:	693b      	ldr	r3, [r7, #16]
 8003166:	4313      	orrs	r3, r2
 8003168:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR1 = temp;
 800316a:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800316e:	69bb      	ldr	r3, [r7, #24]
 8003170:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 8003172:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003176:	685b      	ldr	r3, [r3, #4]
 8003178:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 800317a:	693b      	ldr	r3, [r7, #16]
 800317c:	43db      	mvns	r3, r3
 800317e:	69ba      	ldr	r2, [r7, #24]
 8003180:	4013      	ands	r3, r2
 8003182:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8003184:	683b      	ldr	r3, [r7, #0]
 8003186:	685b      	ldr	r3, [r3, #4]
 8003188:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800318c:	2b00      	cmp	r3, #0
 800318e:	d003      	beq.n	8003198 <HAL_GPIO_Init+0x320>
        {
          temp |= iocurrent;
 8003190:	69ba      	ldr	r2, [r7, #24]
 8003192:	693b      	ldr	r3, [r7, #16]
 8003194:	4313      	orrs	r3, r2
 8003196:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR1 = temp;
 8003198:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800319c:	69bb      	ldr	r3, [r7, #24]
 800319e:	6053      	str	r3, [r2, #4]
      }
    }

    position++;
 80031a0:	69fb      	ldr	r3, [r7, #28]
 80031a2:	3301      	adds	r3, #1
 80031a4:	61fb      	str	r3, [r7, #28]
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 80031a6:	683b      	ldr	r3, [r7, #0]
 80031a8:	681a      	ldr	r2, [r3, #0]
 80031aa:	69fb      	ldr	r3, [r7, #28]
 80031ac:	fa22 f303 	lsr.w	r3, r2, r3
 80031b0:	2b00      	cmp	r3, #0
 80031b2:	f47f ae6b 	bne.w	8002e8c <HAL_GPIO_Init+0x14>
  }
}
 80031b6:	bf00      	nop
 80031b8:	bf00      	nop
 80031ba:	3724      	adds	r7, #36	; 0x24
 80031bc:	46bd      	mov	sp, r7
 80031be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031c2:	4770      	bx	lr
 80031c4:	58000400 	.word	0x58000400

080031c8 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80031c8:	b480      	push	{r7}
 80031ca:	b083      	sub	sp, #12
 80031cc:	af00      	add	r7, sp, #0
 80031ce:	6078      	str	r0, [r7, #4]
 80031d0:	460b      	mov	r3, r1
 80031d2:	807b      	strh	r3, [r7, #2]
 80031d4:	4613      	mov	r3, r2
 80031d6:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80031d8:	787b      	ldrb	r3, [r7, #1]
 80031da:	2b00      	cmp	r3, #0
 80031dc:	d003      	beq.n	80031e6 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80031de:	887a      	ldrh	r2, [r7, #2]
 80031e0:	687b      	ldr	r3, [r7, #4]
 80031e2:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
  }
}
 80031e4:	e003      	b.n	80031ee <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 80031e6:	887b      	ldrh	r3, [r7, #2]
 80031e8:	041a      	lsls	r2, r3, #16
 80031ea:	687b      	ldr	r3, [r7, #4]
 80031ec:	619a      	str	r2, [r3, #24]
}
 80031ee:	bf00      	nop
 80031f0:	370c      	adds	r7, #12
 80031f2:	46bd      	mov	sp, r7
 80031f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031f8:	4770      	bx	lr
	...

080031fc <HAL_PWREx_ConfigSupply>:
  *         PWR_SMPS_2V5_SUPPLIES_EXT are used only for lines that supports SMPS
  *         regulator.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply (uint32_t SupplySource)
{
 80031fc:	b580      	push	{r7, lr}
 80031fe:	b084      	sub	sp, #16
 8003200:	af00      	add	r7, sp, #0
 8003202:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param (IS_PWR_SUPPLY (SupplySource));

  /* Check if supply source was configured */
#if defined (PWR_FLAG_SCUEN)
  if (__HAL_PWR_GET_FLAG (PWR_FLAG_SCUEN) == 0U)
 8003204:	4b19      	ldr	r3, [pc, #100]	; (800326c <HAL_PWREx_ConfigSupply+0x70>)
 8003206:	68db      	ldr	r3, [r3, #12]
 8003208:	f003 0304 	and.w	r3, r3, #4
 800320c:	2b04      	cmp	r3, #4
 800320e:	d00a      	beq.n	8003226 <HAL_PWREx_ConfigSupply+0x2a>
#else
  if ((PWR->CR3 & (PWR_CR3_SMPSEN | PWR_CR3_LDOEN | PWR_CR3_BYPASS)) != (PWR_CR3_SMPSEN | PWR_CR3_LDOEN))
#endif /* defined (PWR_FLAG_SCUEN) */
  {
    /* Check supply configuration */
    if ((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
 8003210:	4b16      	ldr	r3, [pc, #88]	; (800326c <HAL_PWREx_ConfigSupply+0x70>)
 8003212:	68db      	ldr	r3, [r3, #12]
 8003214:	f003 0307 	and.w	r3, r3, #7
 8003218:	687a      	ldr	r2, [r7, #4]
 800321a:	429a      	cmp	r2, r3
 800321c:	d001      	beq.n	8003222 <HAL_PWREx_ConfigSupply+0x26>
    {
      /* Supply configuration update locked, can't apply a new supply config */
      return HAL_ERROR;
 800321e:	2301      	movs	r3, #1
 8003220:	e01f      	b.n	8003262 <HAL_PWREx_ConfigSupply+0x66>
    else
    {
      /* Supply configuration update locked, but new supply configuration
         matches with old supply configuration : nothing to do
      */
      return HAL_OK;
 8003222:	2300      	movs	r3, #0
 8003224:	e01d      	b.n	8003262 <HAL_PWREx_ConfigSupply+0x66>
    }
  }

  /* Set the power supply configuration */
  MODIFY_REG (PWR->CR3, PWR_SUPPLY_CONFIG_MASK, SupplySource);
 8003226:	4b11      	ldr	r3, [pc, #68]	; (800326c <HAL_PWREx_ConfigSupply+0x70>)
 8003228:	68db      	ldr	r3, [r3, #12]
 800322a:	f023 0207 	bic.w	r2, r3, #7
 800322e:	490f      	ldr	r1, [pc, #60]	; (800326c <HAL_PWREx_ConfigSupply+0x70>)
 8003230:	687b      	ldr	r3, [r7, #4]
 8003232:	4313      	orrs	r3, r2
 8003234:	60cb      	str	r3, [r1, #12]

  /* Get tick */
  tickstart = HAL_GetTick ();
 8003236:	f7fe fa5f 	bl	80016f8 <HAL_GetTick>
 800323a:	60f8      	str	r0, [r7, #12]

  /* Wait till voltage level flag is set */
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 800323c:	e009      	b.n	8003252 <HAL_PWREx_ConfigSupply+0x56>
  {
    if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 800323e:	f7fe fa5b 	bl	80016f8 <HAL_GetTick>
 8003242:	4602      	mov	r2, r0
 8003244:	68fb      	ldr	r3, [r7, #12]
 8003246:	1ad3      	subs	r3, r2, r3
 8003248:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800324c:	d901      	bls.n	8003252 <HAL_PWREx_ConfigSupply+0x56>
    {
      return HAL_ERROR;
 800324e:	2301      	movs	r3, #1
 8003250:	e007      	b.n	8003262 <HAL_PWREx_ConfigSupply+0x66>
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8003252:	4b06      	ldr	r3, [pc, #24]	; (800326c <HAL_PWREx_ConfigSupply+0x70>)
 8003254:	685b      	ldr	r3, [r3, #4]
 8003256:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800325a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800325e:	d1ee      	bne.n	800323e <HAL_PWREx_ConfigSupply+0x42>
      }
    }
  }
#endif /* defined (SMPS) */

  return HAL_OK;
 8003260:	2300      	movs	r3, #0
}
 8003262:	4618      	mov	r0, r3
 8003264:	3710      	adds	r7, #16
 8003266:	46bd      	mov	sp, r7
 8003268:	bd80      	pop	{r7, pc}
 800326a:	bf00      	nop
 800326c:	58024800 	.word	0x58024800

08003270 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003270:	b580      	push	{r7, lr}
 8003272:	b08c      	sub	sp, #48	; 0x30
 8003274:	af00      	add	r7, sp, #0
 8003276:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp1_pllckcfg, temp2_pllckcfg;

    /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8003278:	687b      	ldr	r3, [r7, #4]
 800327a:	2b00      	cmp	r3, #0
 800327c:	d101      	bne.n	8003282 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800327e:	2301      	movs	r3, #1
 8003280:	e37a      	b.n	8003978 <HAL_RCC_OscConfig+0x708>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003282:	687b      	ldr	r3, [r7, #4]
 8003284:	681b      	ldr	r3, [r3, #0]
 8003286:	f003 0301 	and.w	r3, r3, #1
 800328a:	2b00      	cmp	r3, #0
 800328c:	f000 8087 	beq.w	800339e <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8003290:	4ba0      	ldr	r3, [pc, #640]	; (8003514 <HAL_RCC_OscConfig+0x2a4>)
 8003292:	691b      	ldr	r3, [r3, #16]
 8003294:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8003298:	62fb      	str	r3, [r7, #44]	; 0x2c
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 800329a:	4b9e      	ldr	r3, [pc, #632]	; (8003514 <HAL_RCC_OscConfig+0x2a4>)
 800329c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800329e:	62bb      	str	r3, [r7, #40]	; 0x28
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 80032a0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80032a2:	2b10      	cmp	r3, #16
 80032a4:	d007      	beq.n	80032b6 <HAL_RCC_OscConfig+0x46>
 80032a6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80032a8:	2b18      	cmp	r3, #24
 80032aa:	d110      	bne.n	80032ce <HAL_RCC_OscConfig+0x5e>
 80032ac:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80032ae:	f003 0303 	and.w	r3, r3, #3
 80032b2:	2b02      	cmp	r3, #2
 80032b4:	d10b      	bne.n	80032ce <HAL_RCC_OscConfig+0x5e>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80032b6:	4b97      	ldr	r3, [pc, #604]	; (8003514 <HAL_RCC_OscConfig+0x2a4>)
 80032b8:	681b      	ldr	r3, [r3, #0]
 80032ba:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80032be:	2b00      	cmp	r3, #0
 80032c0:	d06c      	beq.n	800339c <HAL_RCC_OscConfig+0x12c>
 80032c2:	687b      	ldr	r3, [r7, #4]
 80032c4:	685b      	ldr	r3, [r3, #4]
 80032c6:	2b00      	cmp	r3, #0
 80032c8:	d168      	bne.n	800339c <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 80032ca:	2301      	movs	r3, #1
 80032cc:	e354      	b.n	8003978 <HAL_RCC_OscConfig+0x708>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80032ce:	687b      	ldr	r3, [r7, #4]
 80032d0:	685b      	ldr	r3, [r3, #4]
 80032d2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80032d6:	d106      	bne.n	80032e6 <HAL_RCC_OscConfig+0x76>
 80032d8:	4b8e      	ldr	r3, [pc, #568]	; (8003514 <HAL_RCC_OscConfig+0x2a4>)
 80032da:	681b      	ldr	r3, [r3, #0]
 80032dc:	4a8d      	ldr	r2, [pc, #564]	; (8003514 <HAL_RCC_OscConfig+0x2a4>)
 80032de:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80032e2:	6013      	str	r3, [r2, #0]
 80032e4:	e02e      	b.n	8003344 <HAL_RCC_OscConfig+0xd4>
 80032e6:	687b      	ldr	r3, [r7, #4]
 80032e8:	685b      	ldr	r3, [r3, #4]
 80032ea:	2b00      	cmp	r3, #0
 80032ec:	d10c      	bne.n	8003308 <HAL_RCC_OscConfig+0x98>
 80032ee:	4b89      	ldr	r3, [pc, #548]	; (8003514 <HAL_RCC_OscConfig+0x2a4>)
 80032f0:	681b      	ldr	r3, [r3, #0]
 80032f2:	4a88      	ldr	r2, [pc, #544]	; (8003514 <HAL_RCC_OscConfig+0x2a4>)
 80032f4:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80032f8:	6013      	str	r3, [r2, #0]
 80032fa:	4b86      	ldr	r3, [pc, #536]	; (8003514 <HAL_RCC_OscConfig+0x2a4>)
 80032fc:	681b      	ldr	r3, [r3, #0]
 80032fe:	4a85      	ldr	r2, [pc, #532]	; (8003514 <HAL_RCC_OscConfig+0x2a4>)
 8003300:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003304:	6013      	str	r3, [r2, #0]
 8003306:	e01d      	b.n	8003344 <HAL_RCC_OscConfig+0xd4>
 8003308:	687b      	ldr	r3, [r7, #4]
 800330a:	685b      	ldr	r3, [r3, #4]
 800330c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8003310:	d10c      	bne.n	800332c <HAL_RCC_OscConfig+0xbc>
 8003312:	4b80      	ldr	r3, [pc, #512]	; (8003514 <HAL_RCC_OscConfig+0x2a4>)
 8003314:	681b      	ldr	r3, [r3, #0]
 8003316:	4a7f      	ldr	r2, [pc, #508]	; (8003514 <HAL_RCC_OscConfig+0x2a4>)
 8003318:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800331c:	6013      	str	r3, [r2, #0]
 800331e:	4b7d      	ldr	r3, [pc, #500]	; (8003514 <HAL_RCC_OscConfig+0x2a4>)
 8003320:	681b      	ldr	r3, [r3, #0]
 8003322:	4a7c      	ldr	r2, [pc, #496]	; (8003514 <HAL_RCC_OscConfig+0x2a4>)
 8003324:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003328:	6013      	str	r3, [r2, #0]
 800332a:	e00b      	b.n	8003344 <HAL_RCC_OscConfig+0xd4>
 800332c:	4b79      	ldr	r3, [pc, #484]	; (8003514 <HAL_RCC_OscConfig+0x2a4>)
 800332e:	681b      	ldr	r3, [r3, #0]
 8003330:	4a78      	ldr	r2, [pc, #480]	; (8003514 <HAL_RCC_OscConfig+0x2a4>)
 8003332:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003336:	6013      	str	r3, [r2, #0]
 8003338:	4b76      	ldr	r3, [pc, #472]	; (8003514 <HAL_RCC_OscConfig+0x2a4>)
 800333a:	681b      	ldr	r3, [r3, #0]
 800333c:	4a75      	ldr	r2, [pc, #468]	; (8003514 <HAL_RCC_OscConfig+0x2a4>)
 800333e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003342:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8003344:	687b      	ldr	r3, [r7, #4]
 8003346:	685b      	ldr	r3, [r3, #4]
 8003348:	2b00      	cmp	r3, #0
 800334a:	d013      	beq.n	8003374 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800334c:	f7fe f9d4 	bl	80016f8 <HAL_GetTick>
 8003350:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8003352:	e008      	b.n	8003366 <HAL_RCC_OscConfig+0xf6>
        {
          if((uint32_t) (HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003354:	f7fe f9d0 	bl	80016f8 <HAL_GetTick>
 8003358:	4602      	mov	r2, r0
 800335a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800335c:	1ad3      	subs	r3, r2, r3
 800335e:	2b64      	cmp	r3, #100	; 0x64
 8003360:	d901      	bls.n	8003366 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8003362:	2303      	movs	r3, #3
 8003364:	e308      	b.n	8003978 <HAL_RCC_OscConfig+0x708>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8003366:	4b6b      	ldr	r3, [pc, #428]	; (8003514 <HAL_RCC_OscConfig+0x2a4>)
 8003368:	681b      	ldr	r3, [r3, #0]
 800336a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800336e:	2b00      	cmp	r3, #0
 8003370:	d0f0      	beq.n	8003354 <HAL_RCC_OscConfig+0xe4>
 8003372:	e014      	b.n	800339e <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003374:	f7fe f9c0 	bl	80016f8 <HAL_GetTick>
 8003378:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 800337a:	e008      	b.n	800338e <HAL_RCC_OscConfig+0x11e>
        {
          if((uint32_t) (HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800337c:	f7fe f9bc 	bl	80016f8 <HAL_GetTick>
 8003380:	4602      	mov	r2, r0
 8003382:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003384:	1ad3      	subs	r3, r2, r3
 8003386:	2b64      	cmp	r3, #100	; 0x64
 8003388:	d901      	bls.n	800338e <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 800338a:	2303      	movs	r3, #3
 800338c:	e2f4      	b.n	8003978 <HAL_RCC_OscConfig+0x708>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 800338e:	4b61      	ldr	r3, [pc, #388]	; (8003514 <HAL_RCC_OscConfig+0x2a4>)
 8003390:	681b      	ldr	r3, [r3, #0]
 8003392:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003396:	2b00      	cmp	r3, #0
 8003398:	d1f0      	bne.n	800337c <HAL_RCC_OscConfig+0x10c>
 800339a:	e000      	b.n	800339e <HAL_RCC_OscConfig+0x12e>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800339c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800339e:	687b      	ldr	r3, [r7, #4]
 80033a0:	681b      	ldr	r3, [r3, #0]
 80033a2:	f003 0302 	and.w	r3, r3, #2
 80033a6:	2b00      	cmp	r3, #0
 80033a8:	d06d      	beq.n	8003486 <HAL_RCC_OscConfig+0x216>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSICALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* When the HSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80033aa:	4b5a      	ldr	r3, [pc, #360]	; (8003514 <HAL_RCC_OscConfig+0x2a4>)
 80033ac:	691b      	ldr	r3, [r3, #16]
 80033ae:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80033b2:	623b      	str	r3, [r7, #32]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 80033b4:	4b57      	ldr	r3, [pc, #348]	; (8003514 <HAL_RCC_OscConfig+0x2a4>)
 80033b6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80033b8:	61fb      	str	r3, [r7, #28]
    if((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 80033ba:	6a3b      	ldr	r3, [r7, #32]
 80033bc:	2b00      	cmp	r3, #0
 80033be:	d007      	beq.n	80033d0 <HAL_RCC_OscConfig+0x160>
 80033c0:	6a3b      	ldr	r3, [r7, #32]
 80033c2:	2b18      	cmp	r3, #24
 80033c4:	d11b      	bne.n	80033fe <HAL_RCC_OscConfig+0x18e>
 80033c6:	69fb      	ldr	r3, [r7, #28]
 80033c8:	f003 0303 	and.w	r3, r3, #3
 80033cc:	2b00      	cmp	r3, #0
 80033ce:	d116      	bne.n	80033fe <HAL_RCC_OscConfig+0x18e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80033d0:	4b50      	ldr	r3, [pc, #320]	; (8003514 <HAL_RCC_OscConfig+0x2a4>)
 80033d2:	681b      	ldr	r3, [r3, #0]
 80033d4:	f003 0304 	and.w	r3, r3, #4
 80033d8:	2b00      	cmp	r3, #0
 80033da:	d005      	beq.n	80033e8 <HAL_RCC_OscConfig+0x178>
 80033dc:	687b      	ldr	r3, [r7, #4]
 80033de:	68db      	ldr	r3, [r3, #12]
 80033e0:	2b00      	cmp	r3, #0
 80033e2:	d101      	bne.n	80033e8 <HAL_RCC_OscConfig+0x178>
      {
        return HAL_ERROR;
 80033e4:	2301      	movs	r3, #1
 80033e6:	e2c7      	b.n	8003978 <HAL_RCC_OscConfig+0x708>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80033e8:	4b4a      	ldr	r3, [pc, #296]	; (8003514 <HAL_RCC_OscConfig+0x2a4>)
 80033ea:	685b      	ldr	r3, [r3, #4]
 80033ec:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 80033f0:	687b      	ldr	r3, [r7, #4]
 80033f2:	691b      	ldr	r3, [r3, #16]
 80033f4:	061b      	lsls	r3, r3, #24
 80033f6:	4947      	ldr	r1, [pc, #284]	; (8003514 <HAL_RCC_OscConfig+0x2a4>)
 80033f8:	4313      	orrs	r3, r2
 80033fa:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80033fc:	e043      	b.n	8003486 <HAL_RCC_OscConfig+0x216>
    }

    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 80033fe:	687b      	ldr	r3, [r7, #4]
 8003400:	68db      	ldr	r3, [r3, #12]
 8003402:	2b00      	cmp	r3, #0
 8003404:	d026      	beq.n	8003454 <HAL_RCC_OscConfig+0x1e4>
      {
     /* Enable the Internal High Speed oscillator (HSI, HSIDIV2,HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 8003406:	4b43      	ldr	r3, [pc, #268]	; (8003514 <HAL_RCC_OscConfig+0x2a4>)
 8003408:	681b      	ldr	r3, [r3, #0]
 800340a:	f023 0219 	bic.w	r2, r3, #25
 800340e:	687b      	ldr	r3, [r7, #4]
 8003410:	68db      	ldr	r3, [r3, #12]
 8003412:	4940      	ldr	r1, [pc, #256]	; (8003514 <HAL_RCC_OscConfig+0x2a4>)
 8003414:	4313      	orrs	r3, r2
 8003416:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003418:	f7fe f96e 	bl	80016f8 <HAL_GetTick>
 800341c:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800341e:	e008      	b.n	8003432 <HAL_RCC_OscConfig+0x1c2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003420:	f7fe f96a 	bl	80016f8 <HAL_GetTick>
 8003424:	4602      	mov	r2, r0
 8003426:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003428:	1ad3      	subs	r3, r2, r3
 800342a:	2b02      	cmp	r3, #2
 800342c:	d901      	bls.n	8003432 <HAL_RCC_OscConfig+0x1c2>
          {
            return HAL_TIMEOUT;
 800342e:	2303      	movs	r3, #3
 8003430:	e2a2      	b.n	8003978 <HAL_RCC_OscConfig+0x708>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8003432:	4b38      	ldr	r3, [pc, #224]	; (8003514 <HAL_RCC_OscConfig+0x2a4>)
 8003434:	681b      	ldr	r3, [r3, #0]
 8003436:	f003 0304 	and.w	r3, r3, #4
 800343a:	2b00      	cmp	r3, #0
 800343c:	d0f0      	beq.n	8003420 <HAL_RCC_OscConfig+0x1b0>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800343e:	4b35      	ldr	r3, [pc, #212]	; (8003514 <HAL_RCC_OscConfig+0x2a4>)
 8003440:	685b      	ldr	r3, [r3, #4]
 8003442:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8003446:	687b      	ldr	r3, [r7, #4]
 8003448:	691b      	ldr	r3, [r3, #16]
 800344a:	061b      	lsls	r3, r3, #24
 800344c:	4931      	ldr	r1, [pc, #196]	; (8003514 <HAL_RCC_OscConfig+0x2a4>)
 800344e:	4313      	orrs	r3, r2
 8003450:	604b      	str	r3, [r1, #4]
 8003452:	e018      	b.n	8003486 <HAL_RCC_OscConfig+0x216>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003454:	4b2f      	ldr	r3, [pc, #188]	; (8003514 <HAL_RCC_OscConfig+0x2a4>)
 8003456:	681b      	ldr	r3, [r3, #0]
 8003458:	4a2e      	ldr	r2, [pc, #184]	; (8003514 <HAL_RCC_OscConfig+0x2a4>)
 800345a:	f023 0301 	bic.w	r3, r3, #1
 800345e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003460:	f7fe f94a 	bl	80016f8 <HAL_GetTick>
 8003464:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8003466:	e008      	b.n	800347a <HAL_RCC_OscConfig+0x20a>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003468:	f7fe f946 	bl	80016f8 <HAL_GetTick>
 800346c:	4602      	mov	r2, r0
 800346e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003470:	1ad3      	subs	r3, r2, r3
 8003472:	2b02      	cmp	r3, #2
 8003474:	d901      	bls.n	800347a <HAL_RCC_OscConfig+0x20a>
          {
            return HAL_TIMEOUT;
 8003476:	2303      	movs	r3, #3
 8003478:	e27e      	b.n	8003978 <HAL_RCC_OscConfig+0x708>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 800347a:	4b26      	ldr	r3, [pc, #152]	; (8003514 <HAL_RCC_OscConfig+0x2a4>)
 800347c:	681b      	ldr	r3, [r3, #0]
 800347e:	f003 0304 	and.w	r3, r3, #4
 8003482:	2b00      	cmp	r3, #0
 8003484:	d1f0      	bne.n	8003468 <HAL_RCC_OscConfig+0x1f8>
        }
      }
    }
  }
  /*----------------------------- CSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 8003486:	687b      	ldr	r3, [r7, #4]
 8003488:	681b      	ldr	r3, [r3, #0]
 800348a:	f003 0310 	and.w	r3, r3, #16
 800348e:	2b00      	cmp	r3, #0
 8003490:	d06c      	beq.n	800356c <HAL_RCC_OscConfig+0x2fc>
    /* Check the parameters */
    assert_param(IS_RCC_CSI(RCC_OscInitStruct->CSIState));
    assert_param(IS_RCC_CSICALIBRATION_VALUE(RCC_OscInitStruct->CSICalibrationValue));

    /* When the CSI is used as system clock it will not disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8003492:	4b20      	ldr	r3, [pc, #128]	; (8003514 <HAL_RCC_OscConfig+0x2a4>)
 8003494:	691b      	ldr	r3, [r3, #16]
 8003496:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800349a:	61bb      	str	r3, [r7, #24]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 800349c:	4b1d      	ldr	r3, [pc, #116]	; (8003514 <HAL_RCC_OscConfig+0x2a4>)
 800349e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80034a0:	617b      	str	r3, [r7, #20]
    if((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 80034a2:	69bb      	ldr	r3, [r7, #24]
 80034a4:	2b08      	cmp	r3, #8
 80034a6:	d007      	beq.n	80034b8 <HAL_RCC_OscConfig+0x248>
 80034a8:	69bb      	ldr	r3, [r7, #24]
 80034aa:	2b18      	cmp	r3, #24
 80034ac:	d11b      	bne.n	80034e6 <HAL_RCC_OscConfig+0x276>
 80034ae:	697b      	ldr	r3, [r7, #20]
 80034b0:	f003 0303 	and.w	r3, r3, #3
 80034b4:	2b01      	cmp	r3, #1
 80034b6:	d116      	bne.n	80034e6 <HAL_RCC_OscConfig+0x276>
    {
      /* When CSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 80034b8:	4b16      	ldr	r3, [pc, #88]	; (8003514 <HAL_RCC_OscConfig+0x2a4>)
 80034ba:	681b      	ldr	r3, [r3, #0]
 80034bc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80034c0:	2b00      	cmp	r3, #0
 80034c2:	d005      	beq.n	80034d0 <HAL_RCC_OscConfig+0x260>
 80034c4:	687b      	ldr	r3, [r7, #4]
 80034c6:	69db      	ldr	r3, [r3, #28]
 80034c8:	2b80      	cmp	r3, #128	; 0x80
 80034ca:	d001      	beq.n	80034d0 <HAL_RCC_OscConfig+0x260>
      {
        return HAL_ERROR;
 80034cc:	2301      	movs	r3, #1
 80034ce:	e253      	b.n	8003978 <HAL_RCC_OscConfig+0x708>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 80034d0:	4b10      	ldr	r3, [pc, #64]	; (8003514 <HAL_RCC_OscConfig+0x2a4>)
 80034d2:	68db      	ldr	r3, [r3, #12]
 80034d4:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 80034d8:	687b      	ldr	r3, [r7, #4]
 80034da:	6a1b      	ldr	r3, [r3, #32]
 80034dc:	061b      	lsls	r3, r3, #24
 80034de:	490d      	ldr	r1, [pc, #52]	; (8003514 <HAL_RCC_OscConfig+0x2a4>)
 80034e0:	4313      	orrs	r3, r2
 80034e2:	60cb      	str	r3, [r1, #12]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 80034e4:	e042      	b.n	800356c <HAL_RCC_OscConfig+0x2fc>
      }
    }
    else
    {
      /* Check the CSI State */
      if((RCC_OscInitStruct->CSIState)!= RCC_CSI_OFF)
 80034e6:	687b      	ldr	r3, [r7, #4]
 80034e8:	69db      	ldr	r3, [r3, #28]
 80034ea:	2b00      	cmp	r3, #0
 80034ec:	d025      	beq.n	800353a <HAL_RCC_OscConfig+0x2ca>
      {
        /* Enable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_ENABLE();
 80034ee:	4b09      	ldr	r3, [pc, #36]	; (8003514 <HAL_RCC_OscConfig+0x2a4>)
 80034f0:	681b      	ldr	r3, [r3, #0]
 80034f2:	4a08      	ldr	r2, [pc, #32]	; (8003514 <HAL_RCC_OscConfig+0x2a4>)
 80034f4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80034f8:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80034fa:	f7fe f8fd 	bl	80016f8 <HAL_GetTick>
 80034fe:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8003500:	e00a      	b.n	8003518 <HAL_RCC_OscConfig+0x2a8>
        {
          if((HAL_GetTick() - tickstart ) > CSI_TIMEOUT_VALUE)
 8003502:	f7fe f8f9 	bl	80016f8 <HAL_GetTick>
 8003506:	4602      	mov	r2, r0
 8003508:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800350a:	1ad3      	subs	r3, r2, r3
 800350c:	2b02      	cmp	r3, #2
 800350e:	d903      	bls.n	8003518 <HAL_RCC_OscConfig+0x2a8>
          {
            return HAL_TIMEOUT;
 8003510:	2303      	movs	r3, #3
 8003512:	e231      	b.n	8003978 <HAL_RCC_OscConfig+0x708>
 8003514:	58024400 	.word	0x58024400
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8003518:	4ba3      	ldr	r3, [pc, #652]	; (80037a8 <HAL_RCC_OscConfig+0x538>)
 800351a:	681b      	ldr	r3, [r3, #0]
 800351c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003520:	2b00      	cmp	r3, #0
 8003522:	d0ee      	beq.n	8003502 <HAL_RCC_OscConfig+0x292>
          }
        }

        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8003524:	4ba0      	ldr	r3, [pc, #640]	; (80037a8 <HAL_RCC_OscConfig+0x538>)
 8003526:	68db      	ldr	r3, [r3, #12]
 8003528:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 800352c:	687b      	ldr	r3, [r7, #4]
 800352e:	6a1b      	ldr	r3, [r3, #32]
 8003530:	061b      	lsls	r3, r3, #24
 8003532:	499d      	ldr	r1, [pc, #628]	; (80037a8 <HAL_RCC_OscConfig+0x538>)
 8003534:	4313      	orrs	r3, r2
 8003536:	60cb      	str	r3, [r1, #12]
 8003538:	e018      	b.n	800356c <HAL_RCC_OscConfig+0x2fc>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_DISABLE();
 800353a:	4b9b      	ldr	r3, [pc, #620]	; (80037a8 <HAL_RCC_OscConfig+0x538>)
 800353c:	681b      	ldr	r3, [r3, #0]
 800353e:	4a9a      	ldr	r2, [pc, #616]	; (80037a8 <HAL_RCC_OscConfig+0x538>)
 8003540:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8003544:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003546:	f7fe f8d7 	bl	80016f8 <HAL_GetTick>
 800354a:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 800354c:	e008      	b.n	8003560 <HAL_RCC_OscConfig+0x2f0>
        {
          if((HAL_GetTick() - tickstart ) > CSI_TIMEOUT_VALUE)
 800354e:	f7fe f8d3 	bl	80016f8 <HAL_GetTick>
 8003552:	4602      	mov	r2, r0
 8003554:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003556:	1ad3      	subs	r3, r2, r3
 8003558:	2b02      	cmp	r3, #2
 800355a:	d901      	bls.n	8003560 <HAL_RCC_OscConfig+0x2f0>
          {
            return HAL_TIMEOUT;
 800355c:	2303      	movs	r3, #3
 800355e:	e20b      	b.n	8003978 <HAL_RCC_OscConfig+0x708>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8003560:	4b91      	ldr	r3, [pc, #580]	; (80037a8 <HAL_RCC_OscConfig+0x538>)
 8003562:	681b      	ldr	r3, [r3, #0]
 8003564:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003568:	2b00      	cmp	r3, #0
 800356a:	d1f0      	bne.n	800354e <HAL_RCC_OscConfig+0x2de>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800356c:	687b      	ldr	r3, [r7, #4]
 800356e:	681b      	ldr	r3, [r3, #0]
 8003570:	f003 0308 	and.w	r3, r3, #8
 8003574:	2b00      	cmp	r3, #0
 8003576:	d036      	beq.n	80035e6 <HAL_RCC_OscConfig+0x376>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8003578:	687b      	ldr	r3, [r7, #4]
 800357a:	695b      	ldr	r3, [r3, #20]
 800357c:	2b00      	cmp	r3, #0
 800357e:	d019      	beq.n	80035b4 <HAL_RCC_OscConfig+0x344>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003580:	4b89      	ldr	r3, [pc, #548]	; (80037a8 <HAL_RCC_OscConfig+0x538>)
 8003582:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003584:	4a88      	ldr	r2, [pc, #544]	; (80037a8 <HAL_RCC_OscConfig+0x538>)
 8003586:	f043 0301 	orr.w	r3, r3, #1
 800358a:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800358c:	f7fe f8b4 	bl	80016f8 <HAL_GetTick>
 8003590:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8003592:	e008      	b.n	80035a6 <HAL_RCC_OscConfig+0x336>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003594:	f7fe f8b0 	bl	80016f8 <HAL_GetTick>
 8003598:	4602      	mov	r2, r0
 800359a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800359c:	1ad3      	subs	r3, r2, r3
 800359e:	2b02      	cmp	r3, #2
 80035a0:	d901      	bls.n	80035a6 <HAL_RCC_OscConfig+0x336>
        {
          return HAL_TIMEOUT;
 80035a2:	2303      	movs	r3, #3
 80035a4:	e1e8      	b.n	8003978 <HAL_RCC_OscConfig+0x708>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 80035a6:	4b80      	ldr	r3, [pc, #512]	; (80037a8 <HAL_RCC_OscConfig+0x538>)
 80035a8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80035aa:	f003 0302 	and.w	r3, r3, #2
 80035ae:	2b00      	cmp	r3, #0
 80035b0:	d0f0      	beq.n	8003594 <HAL_RCC_OscConfig+0x324>
 80035b2:	e018      	b.n	80035e6 <HAL_RCC_OscConfig+0x376>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80035b4:	4b7c      	ldr	r3, [pc, #496]	; (80037a8 <HAL_RCC_OscConfig+0x538>)
 80035b6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80035b8:	4a7b      	ldr	r2, [pc, #492]	; (80037a8 <HAL_RCC_OscConfig+0x538>)
 80035ba:	f023 0301 	bic.w	r3, r3, #1
 80035be:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80035c0:	f7fe f89a 	bl	80016f8 <HAL_GetTick>
 80035c4:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 80035c6:	e008      	b.n	80035da <HAL_RCC_OscConfig+0x36a>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80035c8:	f7fe f896 	bl	80016f8 <HAL_GetTick>
 80035cc:	4602      	mov	r2, r0
 80035ce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80035d0:	1ad3      	subs	r3, r2, r3
 80035d2:	2b02      	cmp	r3, #2
 80035d4:	d901      	bls.n	80035da <HAL_RCC_OscConfig+0x36a>
        {
          return HAL_TIMEOUT;
 80035d6:	2303      	movs	r3, #3
 80035d8:	e1ce      	b.n	8003978 <HAL_RCC_OscConfig+0x708>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 80035da:	4b73      	ldr	r3, [pc, #460]	; (80037a8 <HAL_RCC_OscConfig+0x538>)
 80035dc:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80035de:	f003 0302 	and.w	r3, r3, #2
 80035e2:	2b00      	cmp	r3, #0
 80035e4:	d1f0      	bne.n	80035c8 <HAL_RCC_OscConfig+0x358>
      }
    }
  }

  /*------------------------------ HSI48 Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 80035e6:	687b      	ldr	r3, [r7, #4]
 80035e8:	681b      	ldr	r3, [r3, #0]
 80035ea:	f003 0320 	and.w	r3, r3, #32
 80035ee:	2b00      	cmp	r3, #0
 80035f0:	d036      	beq.n	8003660 <HAL_RCC_OscConfig+0x3f0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if((RCC_OscInitStruct->HSI48State)!= RCC_HSI48_OFF)
 80035f2:	687b      	ldr	r3, [r7, #4]
 80035f4:	699b      	ldr	r3, [r3, #24]
 80035f6:	2b00      	cmp	r3, #0
 80035f8:	d019      	beq.n	800362e <HAL_RCC_OscConfig+0x3be>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 80035fa:	4b6b      	ldr	r3, [pc, #428]	; (80037a8 <HAL_RCC_OscConfig+0x538>)
 80035fc:	681b      	ldr	r3, [r3, #0]
 80035fe:	4a6a      	ldr	r2, [pc, #424]	; (80037a8 <HAL_RCC_OscConfig+0x538>)
 8003600:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8003604:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8003606:	f7fe f877 	bl	80016f8 <HAL_GetTick>
 800360a:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 800360c:	e008      	b.n	8003620 <HAL_RCC_OscConfig+0x3b0>
      {
        if((HAL_GetTick() - tickstart ) > HSI48_TIMEOUT_VALUE)
 800360e:	f7fe f873 	bl	80016f8 <HAL_GetTick>
 8003612:	4602      	mov	r2, r0
 8003614:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003616:	1ad3      	subs	r3, r2, r3
 8003618:	2b02      	cmp	r3, #2
 800361a:	d901      	bls.n	8003620 <HAL_RCC_OscConfig+0x3b0>
        {
          return HAL_TIMEOUT;
 800361c:	2303      	movs	r3, #3
 800361e:	e1ab      	b.n	8003978 <HAL_RCC_OscConfig+0x708>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8003620:	4b61      	ldr	r3, [pc, #388]	; (80037a8 <HAL_RCC_OscConfig+0x538>)
 8003622:	681b      	ldr	r3, [r3, #0]
 8003624:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8003628:	2b00      	cmp	r3, #0
 800362a:	d0f0      	beq.n	800360e <HAL_RCC_OscConfig+0x39e>
 800362c:	e018      	b.n	8003660 <HAL_RCC_OscConfig+0x3f0>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 800362e:	4b5e      	ldr	r3, [pc, #376]	; (80037a8 <HAL_RCC_OscConfig+0x538>)
 8003630:	681b      	ldr	r3, [r3, #0]
 8003632:	4a5d      	ldr	r2, [pc, #372]	; (80037a8 <HAL_RCC_OscConfig+0x538>)
 8003634:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8003638:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 800363a:	f7fe f85d 	bl	80016f8 <HAL_GetTick>
 800363e:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8003640:	e008      	b.n	8003654 <HAL_RCC_OscConfig+0x3e4>
      {
        if((HAL_GetTick() - tickstart ) > HSI48_TIMEOUT_VALUE)
 8003642:	f7fe f859 	bl	80016f8 <HAL_GetTick>
 8003646:	4602      	mov	r2, r0
 8003648:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800364a:	1ad3      	subs	r3, r2, r3
 800364c:	2b02      	cmp	r3, #2
 800364e:	d901      	bls.n	8003654 <HAL_RCC_OscConfig+0x3e4>
        {
          return HAL_TIMEOUT;
 8003650:	2303      	movs	r3, #3
 8003652:	e191      	b.n	8003978 <HAL_RCC_OscConfig+0x708>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8003654:	4b54      	ldr	r3, [pc, #336]	; (80037a8 <HAL_RCC_OscConfig+0x538>)
 8003656:	681b      	ldr	r3, [r3, #0]
 8003658:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800365c:	2b00      	cmp	r3, #0
 800365e:	d1f0      	bne.n	8003642 <HAL_RCC_OscConfig+0x3d2>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003660:	687b      	ldr	r3, [r7, #4]
 8003662:	681b      	ldr	r3, [r3, #0]
 8003664:	f003 0304 	and.w	r3, r3, #4
 8003668:	2b00      	cmp	r3, #0
 800366a:	f000 8081 	beq.w	8003770 <HAL_RCC_OscConfig+0x500>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 800366e:	4b4f      	ldr	r3, [pc, #316]	; (80037ac <HAL_RCC_OscConfig+0x53c>)
 8003670:	681b      	ldr	r3, [r3, #0]
 8003672:	4a4e      	ldr	r2, [pc, #312]	; (80037ac <HAL_RCC_OscConfig+0x53c>)
 8003674:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003678:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 800367a:	f7fe f83d 	bl	80016f8 <HAL_GetTick>
 800367e:	6278      	str	r0, [r7, #36]	; 0x24

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8003680:	e008      	b.n	8003694 <HAL_RCC_OscConfig+0x424>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 8003682:	f7fe f839 	bl	80016f8 <HAL_GetTick>
 8003686:	4602      	mov	r2, r0
 8003688:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800368a:	1ad3      	subs	r3, r2, r3
 800368c:	2b64      	cmp	r3, #100	; 0x64
 800368e:	d901      	bls.n	8003694 <HAL_RCC_OscConfig+0x424>
      {
        return HAL_TIMEOUT;
 8003690:	2303      	movs	r3, #3
 8003692:	e171      	b.n	8003978 <HAL_RCC_OscConfig+0x708>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8003694:	4b45      	ldr	r3, [pc, #276]	; (80037ac <HAL_RCC_OscConfig+0x53c>)
 8003696:	681b      	ldr	r3, [r3, #0]
 8003698:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800369c:	2b00      	cmp	r3, #0
 800369e:	d0f0      	beq.n	8003682 <HAL_RCC_OscConfig+0x412>
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80036a0:	687b      	ldr	r3, [r7, #4]
 80036a2:	689b      	ldr	r3, [r3, #8]
 80036a4:	2b01      	cmp	r3, #1
 80036a6:	d106      	bne.n	80036b6 <HAL_RCC_OscConfig+0x446>
 80036a8:	4b3f      	ldr	r3, [pc, #252]	; (80037a8 <HAL_RCC_OscConfig+0x538>)
 80036aa:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80036ac:	4a3e      	ldr	r2, [pc, #248]	; (80037a8 <HAL_RCC_OscConfig+0x538>)
 80036ae:	f043 0301 	orr.w	r3, r3, #1
 80036b2:	6713      	str	r3, [r2, #112]	; 0x70
 80036b4:	e02d      	b.n	8003712 <HAL_RCC_OscConfig+0x4a2>
 80036b6:	687b      	ldr	r3, [r7, #4]
 80036b8:	689b      	ldr	r3, [r3, #8]
 80036ba:	2b00      	cmp	r3, #0
 80036bc:	d10c      	bne.n	80036d8 <HAL_RCC_OscConfig+0x468>
 80036be:	4b3a      	ldr	r3, [pc, #232]	; (80037a8 <HAL_RCC_OscConfig+0x538>)
 80036c0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80036c2:	4a39      	ldr	r2, [pc, #228]	; (80037a8 <HAL_RCC_OscConfig+0x538>)
 80036c4:	f023 0301 	bic.w	r3, r3, #1
 80036c8:	6713      	str	r3, [r2, #112]	; 0x70
 80036ca:	4b37      	ldr	r3, [pc, #220]	; (80037a8 <HAL_RCC_OscConfig+0x538>)
 80036cc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80036ce:	4a36      	ldr	r2, [pc, #216]	; (80037a8 <HAL_RCC_OscConfig+0x538>)
 80036d0:	f023 0304 	bic.w	r3, r3, #4
 80036d4:	6713      	str	r3, [r2, #112]	; 0x70
 80036d6:	e01c      	b.n	8003712 <HAL_RCC_OscConfig+0x4a2>
 80036d8:	687b      	ldr	r3, [r7, #4]
 80036da:	689b      	ldr	r3, [r3, #8]
 80036dc:	2b05      	cmp	r3, #5
 80036de:	d10c      	bne.n	80036fa <HAL_RCC_OscConfig+0x48a>
 80036e0:	4b31      	ldr	r3, [pc, #196]	; (80037a8 <HAL_RCC_OscConfig+0x538>)
 80036e2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80036e4:	4a30      	ldr	r2, [pc, #192]	; (80037a8 <HAL_RCC_OscConfig+0x538>)
 80036e6:	f043 0304 	orr.w	r3, r3, #4
 80036ea:	6713      	str	r3, [r2, #112]	; 0x70
 80036ec:	4b2e      	ldr	r3, [pc, #184]	; (80037a8 <HAL_RCC_OscConfig+0x538>)
 80036ee:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80036f0:	4a2d      	ldr	r2, [pc, #180]	; (80037a8 <HAL_RCC_OscConfig+0x538>)
 80036f2:	f043 0301 	orr.w	r3, r3, #1
 80036f6:	6713      	str	r3, [r2, #112]	; 0x70
 80036f8:	e00b      	b.n	8003712 <HAL_RCC_OscConfig+0x4a2>
 80036fa:	4b2b      	ldr	r3, [pc, #172]	; (80037a8 <HAL_RCC_OscConfig+0x538>)
 80036fc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80036fe:	4a2a      	ldr	r2, [pc, #168]	; (80037a8 <HAL_RCC_OscConfig+0x538>)
 8003700:	f023 0301 	bic.w	r3, r3, #1
 8003704:	6713      	str	r3, [r2, #112]	; 0x70
 8003706:	4b28      	ldr	r3, [pc, #160]	; (80037a8 <HAL_RCC_OscConfig+0x538>)
 8003708:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800370a:	4a27      	ldr	r2, [pc, #156]	; (80037a8 <HAL_RCC_OscConfig+0x538>)
 800370c:	f023 0304 	bic.w	r3, r3, #4
 8003710:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8003712:	687b      	ldr	r3, [r7, #4]
 8003714:	689b      	ldr	r3, [r3, #8]
 8003716:	2b00      	cmp	r3, #0
 8003718:	d015      	beq.n	8003746 <HAL_RCC_OscConfig+0x4d6>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800371a:	f7fd ffed 	bl	80016f8 <HAL_GetTick>
 800371e:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8003720:	e00a      	b.n	8003738 <HAL_RCC_OscConfig+0x4c8>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003722:	f7fd ffe9 	bl	80016f8 <HAL_GetTick>
 8003726:	4602      	mov	r2, r0
 8003728:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800372a:	1ad3      	subs	r3, r2, r3
 800372c:	f241 3288 	movw	r2, #5000	; 0x1388
 8003730:	4293      	cmp	r3, r2
 8003732:	d901      	bls.n	8003738 <HAL_RCC_OscConfig+0x4c8>
        {
          return HAL_TIMEOUT;
 8003734:	2303      	movs	r3, #3
 8003736:	e11f      	b.n	8003978 <HAL_RCC_OscConfig+0x708>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8003738:	4b1b      	ldr	r3, [pc, #108]	; (80037a8 <HAL_RCC_OscConfig+0x538>)
 800373a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800373c:	f003 0302 	and.w	r3, r3, #2
 8003740:	2b00      	cmp	r3, #0
 8003742:	d0ee      	beq.n	8003722 <HAL_RCC_OscConfig+0x4b2>
 8003744:	e014      	b.n	8003770 <HAL_RCC_OscConfig+0x500>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003746:	f7fd ffd7 	bl	80016f8 <HAL_GetTick>
 800374a:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is disabled */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 800374c:	e00a      	b.n	8003764 <HAL_RCC_OscConfig+0x4f4>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800374e:	f7fd ffd3 	bl	80016f8 <HAL_GetTick>
 8003752:	4602      	mov	r2, r0
 8003754:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003756:	1ad3      	subs	r3, r2, r3
 8003758:	f241 3288 	movw	r2, #5000	; 0x1388
 800375c:	4293      	cmp	r3, r2
 800375e:	d901      	bls.n	8003764 <HAL_RCC_OscConfig+0x4f4>
        {
          return HAL_TIMEOUT;
 8003760:	2303      	movs	r3, #3
 8003762:	e109      	b.n	8003978 <HAL_RCC_OscConfig+0x708>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8003764:	4b10      	ldr	r3, [pc, #64]	; (80037a8 <HAL_RCC_OscConfig+0x538>)
 8003766:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003768:	f003 0302 	and.w	r3, r3, #2
 800376c:	2b00      	cmp	r3, #0
 800376e:	d1ee      	bne.n	800374e <HAL_RCC_OscConfig+0x4de>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003770:	687b      	ldr	r3, [r7, #4]
 8003772:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003774:	2b00      	cmp	r3, #0
 8003776:	f000 80fe 	beq.w	8003976 <HAL_RCC_OscConfig+0x706>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL1)
 800377a:	4b0b      	ldr	r3, [pc, #44]	; (80037a8 <HAL_RCC_OscConfig+0x538>)
 800377c:	691b      	ldr	r3, [r3, #16]
 800377e:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8003782:	2b18      	cmp	r3, #24
 8003784:	f000 80b9 	beq.w	80038fa <HAL_RCC_OscConfig+0x68a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003788:	687b      	ldr	r3, [r7, #4]
 800378a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800378c:	2b02      	cmp	r3, #2
 800378e:	f040 809a 	bne.w	80038c6 <HAL_RCC_OscConfig+0x656>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
        assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003792:	4b05      	ldr	r3, [pc, #20]	; (80037a8 <HAL_RCC_OscConfig+0x538>)
 8003794:	681b      	ldr	r3, [r3, #0]
 8003796:	4a04      	ldr	r2, [pc, #16]	; (80037a8 <HAL_RCC_OscConfig+0x538>)
 8003798:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800379c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800379e:	f7fd ffab 	bl	80016f8 <HAL_GetTick>
 80037a2:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 80037a4:	e00d      	b.n	80037c2 <HAL_RCC_OscConfig+0x552>
 80037a6:	bf00      	nop
 80037a8:	58024400 	.word	0x58024400
 80037ac:	58024800 	.word	0x58024800
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80037b0:	f7fd ffa2 	bl	80016f8 <HAL_GetTick>
 80037b4:	4602      	mov	r2, r0
 80037b6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80037b8:	1ad3      	subs	r3, r2, r3
 80037ba:	2b02      	cmp	r3, #2
 80037bc:	d901      	bls.n	80037c2 <HAL_RCC_OscConfig+0x552>
          {
            return HAL_TIMEOUT;
 80037be:	2303      	movs	r3, #3
 80037c0:	e0da      	b.n	8003978 <HAL_RCC_OscConfig+0x708>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 80037c2:	4b6f      	ldr	r3, [pc, #444]	; (8003980 <HAL_RCC_OscConfig+0x710>)
 80037c4:	681b      	ldr	r3, [r3, #0]
 80037c6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80037ca:	2b00      	cmp	r3, #0
 80037cc:	d1f0      	bne.n	80037b0 <HAL_RCC_OscConfig+0x540>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80037ce:	4b6c      	ldr	r3, [pc, #432]	; (8003980 <HAL_RCC_OscConfig+0x710>)
 80037d0:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80037d2:	4b6c      	ldr	r3, [pc, #432]	; (8003984 <HAL_RCC_OscConfig+0x714>)
 80037d4:	4013      	ands	r3, r2
 80037d6:	687a      	ldr	r2, [r7, #4]
 80037d8:	6a91      	ldr	r1, [r2, #40]	; 0x28
 80037da:	687a      	ldr	r2, [r7, #4]
 80037dc:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 80037de:	0112      	lsls	r2, r2, #4
 80037e0:	430a      	orrs	r2, r1
 80037e2:	4967      	ldr	r1, [pc, #412]	; (8003980 <HAL_RCC_OscConfig+0x710>)
 80037e4:	4313      	orrs	r3, r2
 80037e6:	628b      	str	r3, [r1, #40]	; 0x28
 80037e8:	687b      	ldr	r3, [r7, #4]
 80037ea:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80037ec:	3b01      	subs	r3, #1
 80037ee:	f3c3 0208 	ubfx	r2, r3, #0, #9
 80037f2:	687b      	ldr	r3, [r7, #4]
 80037f4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80037f6:	3b01      	subs	r3, #1
 80037f8:	025b      	lsls	r3, r3, #9
 80037fa:	b29b      	uxth	r3, r3
 80037fc:	431a      	orrs	r2, r3
 80037fe:	687b      	ldr	r3, [r7, #4]
 8003800:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003802:	3b01      	subs	r3, #1
 8003804:	041b      	lsls	r3, r3, #16
 8003806:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 800380a:	431a      	orrs	r2, r3
 800380c:	687b      	ldr	r3, [r7, #4]
 800380e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003810:	3b01      	subs	r3, #1
 8003812:	061b      	lsls	r3, r3, #24
 8003814:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 8003818:	4959      	ldr	r1, [pc, #356]	; (8003980 <HAL_RCC_OscConfig+0x710>)
 800381a:	4313      	orrs	r3, r2
 800381c:	630b      	str	r3, [r1, #48]	; 0x30
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

         /* Disable PLLFRACN . */
         __HAL_RCC_PLLFRACN_DISABLE();
 800381e:	4b58      	ldr	r3, [pc, #352]	; (8003980 <HAL_RCC_OscConfig+0x710>)
 8003820:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003822:	4a57      	ldr	r2, [pc, #348]	; (8003980 <HAL_RCC_OscConfig+0x710>)
 8003824:	f023 0301 	bic.w	r3, r3, #1
 8003828:	62d3      	str	r3, [r2, #44]	; 0x2c

         /* Configure PLL PLL1FRACN */
         __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 800382a:	4b55      	ldr	r3, [pc, #340]	; (8003980 <HAL_RCC_OscConfig+0x710>)
 800382c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800382e:	4b56      	ldr	r3, [pc, #344]	; (8003988 <HAL_RCC_OscConfig+0x718>)
 8003830:	4013      	ands	r3, r2
 8003832:	687a      	ldr	r2, [r7, #4]
 8003834:	6c92      	ldr	r2, [r2, #72]	; 0x48
 8003836:	00d2      	lsls	r2, r2, #3
 8003838:	4951      	ldr	r1, [pc, #324]	; (8003980 <HAL_RCC_OscConfig+0x710>)
 800383a:	4313      	orrs	r3, r2
 800383c:	634b      	str	r3, [r1, #52]	; 0x34

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL_VCIRANGE(RCC_OscInitStruct->PLL.PLLRGE) ;
 800383e:	4b50      	ldr	r3, [pc, #320]	; (8003980 <HAL_RCC_OscConfig+0x710>)
 8003840:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003842:	f023 020c 	bic.w	r2, r3, #12
 8003846:	687b      	ldr	r3, [r7, #4]
 8003848:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800384a:	494d      	ldr	r1, [pc, #308]	; (8003980 <HAL_RCC_OscConfig+0x710>)
 800384c:	4313      	orrs	r3, r2
 800384e:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Select PLL1 output frequency range : VCO */
        __HAL_RCC_PLL_VCORANGE(RCC_OscInitStruct->PLL.PLLVCOSEL) ;
 8003850:	4b4b      	ldr	r3, [pc, #300]	; (8003980 <HAL_RCC_OscConfig+0x710>)
 8003852:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003854:	f023 0202 	bic.w	r2, r3, #2
 8003858:	687b      	ldr	r3, [r7, #4]
 800385a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800385c:	4948      	ldr	r1, [pc, #288]	; (8003980 <HAL_RCC_OscConfig+0x710>)
 800385e:	4313      	orrs	r3, r2
 8003860:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 8003862:	4b47      	ldr	r3, [pc, #284]	; (8003980 <HAL_RCC_OscConfig+0x710>)
 8003864:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003866:	4a46      	ldr	r2, [pc, #280]	; (8003980 <HAL_RCC_OscConfig+0x710>)
 8003868:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800386c:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1Q Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800386e:	4b44      	ldr	r3, [pc, #272]	; (8003980 <HAL_RCC_OscConfig+0x710>)
 8003870:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003872:	4a43      	ldr	r2, [pc, #268]	; (8003980 <HAL_RCC_OscConfig+0x710>)
 8003874:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003878:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1R  Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 800387a:	4b41      	ldr	r3, [pc, #260]	; (8003980 <HAL_RCC_OscConfig+0x710>)
 800387c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800387e:	4a40      	ldr	r2, [pc, #256]	; (8003980 <HAL_RCC_OscConfig+0x710>)
 8003880:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003884:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1FRACN . */
         __HAL_RCC_PLLFRACN_ENABLE();
 8003886:	4b3e      	ldr	r3, [pc, #248]	; (8003980 <HAL_RCC_OscConfig+0x710>)
 8003888:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800388a:	4a3d      	ldr	r2, [pc, #244]	; (8003980 <HAL_RCC_OscConfig+0x710>)
 800388c:	f043 0301 	orr.w	r3, r3, #1
 8003890:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003892:	4b3b      	ldr	r3, [pc, #236]	; (8003980 <HAL_RCC_OscConfig+0x710>)
 8003894:	681b      	ldr	r3, [r3, #0]
 8003896:	4a3a      	ldr	r2, [pc, #232]	; (8003980 <HAL_RCC_OscConfig+0x710>)
 8003898:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800389c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800389e:	f7fd ff2b 	bl	80016f8 <HAL_GetTick>
 80038a2:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 80038a4:	e008      	b.n	80038b8 <HAL_RCC_OscConfig+0x648>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80038a6:	f7fd ff27 	bl	80016f8 <HAL_GetTick>
 80038aa:	4602      	mov	r2, r0
 80038ac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80038ae:	1ad3      	subs	r3, r2, r3
 80038b0:	2b02      	cmp	r3, #2
 80038b2:	d901      	bls.n	80038b8 <HAL_RCC_OscConfig+0x648>
          {
            return HAL_TIMEOUT;
 80038b4:	2303      	movs	r3, #3
 80038b6:	e05f      	b.n	8003978 <HAL_RCC_OscConfig+0x708>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 80038b8:	4b31      	ldr	r3, [pc, #196]	; (8003980 <HAL_RCC_OscConfig+0x710>)
 80038ba:	681b      	ldr	r3, [r3, #0]
 80038bc:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80038c0:	2b00      	cmp	r3, #0
 80038c2:	d0f0      	beq.n	80038a6 <HAL_RCC_OscConfig+0x636>
 80038c4:	e057      	b.n	8003976 <HAL_RCC_OscConfig+0x706>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80038c6:	4b2e      	ldr	r3, [pc, #184]	; (8003980 <HAL_RCC_OscConfig+0x710>)
 80038c8:	681b      	ldr	r3, [r3, #0]
 80038ca:	4a2d      	ldr	r2, [pc, #180]	; (8003980 <HAL_RCC_OscConfig+0x710>)
 80038cc:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80038d0:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80038d2:	f7fd ff11 	bl	80016f8 <HAL_GetTick>
 80038d6:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 80038d8:	e008      	b.n	80038ec <HAL_RCC_OscConfig+0x67c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80038da:	f7fd ff0d 	bl	80016f8 <HAL_GetTick>
 80038de:	4602      	mov	r2, r0
 80038e0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80038e2:	1ad3      	subs	r3, r2, r3
 80038e4:	2b02      	cmp	r3, #2
 80038e6:	d901      	bls.n	80038ec <HAL_RCC_OscConfig+0x67c>
          {
            return HAL_TIMEOUT;
 80038e8:	2303      	movs	r3, #3
 80038ea:	e045      	b.n	8003978 <HAL_RCC_OscConfig+0x708>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 80038ec:	4b24      	ldr	r3, [pc, #144]	; (8003980 <HAL_RCC_OscConfig+0x710>)
 80038ee:	681b      	ldr	r3, [r3, #0]
 80038f0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80038f4:	2b00      	cmp	r3, #0
 80038f6:	d1f0      	bne.n	80038da <HAL_RCC_OscConfig+0x66a>
 80038f8:	e03d      	b.n	8003976 <HAL_RCC_OscConfig+0x706>
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLLCKSELR;
 80038fa:	4b21      	ldr	r3, [pc, #132]	; (8003980 <HAL_RCC_OscConfig+0x710>)
 80038fc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80038fe:	613b      	str	r3, [r7, #16]
      temp2_pllckcfg = RCC->PLL1DIVR;
 8003900:	4b1f      	ldr	r3, [pc, #124]	; (8003980 <HAL_RCC_OscConfig+0x710>)
 8003902:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003904:	60fb      	str	r3, [r7, #12]
      if(((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003906:	687b      	ldr	r3, [r7, #4]
 8003908:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800390a:	2b01      	cmp	r3, #1
 800390c:	d031      	beq.n	8003972 <HAL_RCC_OscConfig+0x702>
	 (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800390e:	693b      	ldr	r3, [r7, #16]
 8003910:	f003 0203 	and.w	r2, r3, #3
 8003914:	687b      	ldr	r3, [r7, #4]
 8003916:	6a9b      	ldr	r3, [r3, #40]	; 0x28
      if(((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003918:	429a      	cmp	r2, r3
 800391a:	d12a      	bne.n	8003972 <HAL_RCC_OscConfig+0x702>
         ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 800391c:	693b      	ldr	r3, [r7, #16]
 800391e:	091b      	lsrs	r3, r3, #4
 8003920:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8003924:	687b      	ldr	r3, [r7, #4]
 8003926:	6adb      	ldr	r3, [r3, #44]	; 0x2c
	 (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003928:	429a      	cmp	r2, r3
 800392a:	d122      	bne.n	8003972 <HAL_RCC_OscConfig+0x702>
         (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 800392c:	68fb      	ldr	r3, [r7, #12]
 800392e:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8003932:	687b      	ldr	r3, [r7, #4]
 8003934:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003936:	3b01      	subs	r3, #1
         ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8003938:	429a      	cmp	r2, r3
 800393a:	d11a      	bne.n	8003972 <HAL_RCC_OscConfig+0x702>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 800393c:	68fb      	ldr	r3, [r7, #12]
 800393e:	0a5b      	lsrs	r3, r3, #9
 8003940:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8003944:	687b      	ldr	r3, [r7, #4]
 8003946:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003948:	3b01      	subs	r3, #1
         (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 800394a:	429a      	cmp	r2, r3
 800394c:	d111      	bne.n	8003972 <HAL_RCC_OscConfig+0x702>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 800394e:	68fb      	ldr	r3, [r7, #12]
 8003950:	0c1b      	lsrs	r3, r3, #16
 8003952:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8003956:	687b      	ldr	r3, [r7, #4]
 8003958:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800395a:	3b01      	subs	r3, #1
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 800395c:	429a      	cmp	r2, r3
 800395e:	d108      	bne.n	8003972 <HAL_RCC_OscConfig+0x702>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_R1) >> RCC_PLL1DIVR_R1_Pos) != (RCC_OscInitStruct->PLL.PLLR - 1U)))
 8003960:	68fb      	ldr	r3, [r7, #12]
 8003962:	0e1b      	lsrs	r3, r3, #24
 8003964:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8003968:	687b      	ldr	r3, [r7, #4]
 800396a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800396c:	3b01      	subs	r3, #1
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 800396e:	429a      	cmp	r2, r3
 8003970:	d001      	beq.n	8003976 <HAL_RCC_OscConfig+0x706>
      {
        return HAL_ERROR;
 8003972:	2301      	movs	r3, #1
 8003974:	e000      	b.n	8003978 <HAL_RCC_OscConfig+0x708>
      }
    }
  }
  return HAL_OK;
 8003976:	2300      	movs	r3, #0
}
 8003978:	4618      	mov	r0, r3
 800397a:	3730      	adds	r7, #48	; 0x30
 800397c:	46bd      	mov	sp, r7
 800397e:	bd80      	pop	{r7, pc}
 8003980:	58024400 	.word	0x58024400
 8003984:	fffffc0c 	.word	0xfffffc0c
 8003988:	ffff0007 	.word	0xffff0007

0800398c <HAL_RCC_ClockConfig>:
  *         D1CPRE[3:0] bits to ensure that  Domain1 core clock not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800398c:	b580      	push	{r7, lr}
 800398e:	b086      	sub	sp, #24
 8003990:	af00      	add	r7, sp, #0
 8003992:	6078      	str	r0, [r7, #4]
 8003994:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef halstatus;
  uint32_t tickstart;
  uint32_t common_system_clock;

   /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8003996:	687b      	ldr	r3, [r7, #4]
 8003998:	2b00      	cmp	r3, #0
 800399a:	d101      	bne.n	80039a0 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800399c:	2301      	movs	r3, #1
 800399e:	e19c      	b.n	8003cda <HAL_RCC_ClockConfig+0x34e>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80039a0:	4b8a      	ldr	r3, [pc, #552]	; (8003bcc <HAL_RCC_ClockConfig+0x240>)
 80039a2:	681b      	ldr	r3, [r3, #0]
 80039a4:	f003 030f 	and.w	r3, r3, #15
 80039a8:	683a      	ldr	r2, [r7, #0]
 80039aa:	429a      	cmp	r2, r3
 80039ac:	d910      	bls.n	80039d0 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80039ae:	4b87      	ldr	r3, [pc, #540]	; (8003bcc <HAL_RCC_ClockConfig+0x240>)
 80039b0:	681b      	ldr	r3, [r3, #0]
 80039b2:	f023 020f 	bic.w	r2, r3, #15
 80039b6:	4985      	ldr	r1, [pc, #532]	; (8003bcc <HAL_RCC_ClockConfig+0x240>)
 80039b8:	683b      	ldr	r3, [r7, #0]
 80039ba:	4313      	orrs	r3, r2
 80039bc:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80039be:	4b83      	ldr	r3, [pc, #524]	; (8003bcc <HAL_RCC_ClockConfig+0x240>)
 80039c0:	681b      	ldr	r3, [r3, #0]
 80039c2:	f003 030f 	and.w	r3, r3, #15
 80039c6:	683a      	ldr	r2, [r7, #0]
 80039c8:	429a      	cmp	r2, r3
 80039ca:	d001      	beq.n	80039d0 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 80039cc:	2301      	movs	r3, #1
 80039ce:	e184      	b.n	8003cda <HAL_RCC_ClockConfig+0x34e>

  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- D1PCLK1/CDPCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 80039d0:	687b      	ldr	r3, [r7, #4]
 80039d2:	681b      	ldr	r3, [r3, #0]
 80039d4:	f003 0304 	and.w	r3, r3, #4
 80039d8:	2b00      	cmp	r3, #0
 80039da:	d010      	beq.n	80039fe <HAL_RCC_ClockConfig+0x72>
  {
#if defined (RCC_D1CFGR_D1PPRE)
    if((RCC_ClkInitStruct->APB3CLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 80039dc:	687b      	ldr	r3, [r7, #4]
 80039de:	691a      	ldr	r2, [r3, #16]
 80039e0:	4b7b      	ldr	r3, [pc, #492]	; (8003bd0 <HAL_RCC_ClockConfig+0x244>)
 80039e2:	699b      	ldr	r3, [r3, #24]
 80039e4:	f003 0370 	and.w	r3, r3, #112	; 0x70
 80039e8:	429a      	cmp	r2, r3
 80039ea:	d908      	bls.n	80039fe <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 80039ec:	4b78      	ldr	r3, [pc, #480]	; (8003bd0 <HAL_RCC_ClockConfig+0x244>)
 80039ee:	699b      	ldr	r3, [r3, #24]
 80039f0:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 80039f4:	687b      	ldr	r3, [r7, #4]
 80039f6:	691b      	ldr	r3, [r3, #16]
 80039f8:	4975      	ldr	r1, [pc, #468]	; (8003bd0 <HAL_RCC_ClockConfig+0x244>)
 80039fa:	4313      	orrs	r3, r2
 80039fc:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80039fe:	687b      	ldr	r3, [r7, #4]
 8003a00:	681b      	ldr	r3, [r3, #0]
 8003a02:	f003 0308 	and.w	r3, r3, #8
 8003a06:	2b00      	cmp	r3, #0
 8003a08:	d010      	beq.n	8003a2c <HAL_RCC_ClockConfig+0xa0>
  {
#if defined (RCC_D2CFGR_D2PPRE1)
    if((RCC_ClkInitStruct->APB1CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 8003a0a:	687b      	ldr	r3, [r7, #4]
 8003a0c:	695a      	ldr	r2, [r3, #20]
 8003a0e:	4b70      	ldr	r3, [pc, #448]	; (8003bd0 <HAL_RCC_ClockConfig+0x244>)
 8003a10:	69db      	ldr	r3, [r3, #28]
 8003a12:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8003a16:	429a      	cmp	r2, r3
 8003a18:	d908      	bls.n	8003a2c <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 8003a1a:	4b6d      	ldr	r3, [pc, #436]	; (8003bd0 <HAL_RCC_ClockConfig+0x244>)
 8003a1c:	69db      	ldr	r3, [r3, #28]
 8003a1e:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8003a22:	687b      	ldr	r3, [r7, #4]
 8003a24:	695b      	ldr	r3, [r3, #20]
 8003a26:	496a      	ldr	r1, [pc, #424]	; (8003bd0 <HAL_RCC_ClockConfig+0x244>)
 8003a28:	4313      	orrs	r3, r2
 8003a2a:	61cb      	str	r3, [r1, #28]
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
  }
#endif
    }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003a2c:	687b      	ldr	r3, [r7, #4]
 8003a2e:	681b      	ldr	r3, [r3, #0]
 8003a30:	f003 0310 	and.w	r3, r3, #16
 8003a34:	2b00      	cmp	r3, #0
 8003a36:	d010      	beq.n	8003a5a <HAL_RCC_ClockConfig+0xce>
  {
#if defined(RCC_D2CFGR_D2PPRE2)
    if((RCC_ClkInitStruct->APB2CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8003a38:	687b      	ldr	r3, [r7, #4]
 8003a3a:	699a      	ldr	r2, [r3, #24]
 8003a3c:	4b64      	ldr	r3, [pc, #400]	; (8003bd0 <HAL_RCC_ClockConfig+0x244>)
 8003a3e:	69db      	ldr	r3, [r3, #28]
 8003a40:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8003a44:	429a      	cmp	r2, r3
 8003a46:	d908      	bls.n	8003a5a <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8003a48:	4b61      	ldr	r3, [pc, #388]	; (8003bd0 <HAL_RCC_ClockConfig+0x244>)
 8003a4a:	69db      	ldr	r3, [r3, #28]
 8003a4c:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8003a50:	687b      	ldr	r3, [r7, #4]
 8003a52:	699b      	ldr	r3, [r3, #24]
 8003a54:	495e      	ldr	r1, [pc, #376]	; (8003bd0 <HAL_RCC_ClockConfig+0x244>)
 8003a56:	4313      	orrs	r3, r2
 8003a58:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 8003a5a:	687b      	ldr	r3, [r7, #4]
 8003a5c:	681b      	ldr	r3, [r3, #0]
 8003a5e:	f003 0320 	and.w	r3, r3, #32
 8003a62:	2b00      	cmp	r3, #0
 8003a64:	d010      	beq.n	8003a88 <HAL_RCC_ClockConfig+0xfc>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if((RCC_ClkInitStruct->APB4CLKDivider) > (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 8003a66:	687b      	ldr	r3, [r7, #4]
 8003a68:	69da      	ldr	r2, [r3, #28]
 8003a6a:	4b59      	ldr	r3, [pc, #356]	; (8003bd0 <HAL_RCC_ClockConfig+0x244>)
 8003a6c:	6a1b      	ldr	r3, [r3, #32]
 8003a6e:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8003a72:	429a      	cmp	r2, r3
 8003a74:	d908      	bls.n	8003a88 <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider) );
 8003a76:	4b56      	ldr	r3, [pc, #344]	; (8003bd0 <HAL_RCC_ClockConfig+0x244>)
 8003a78:	6a1b      	ldr	r3, [r3, #32]
 8003a7a:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8003a7e:	687b      	ldr	r3, [r7, #4]
 8003a80:	69db      	ldr	r3, [r3, #28]
 8003a82:	4953      	ldr	r1, [pc, #332]	; (8003bd0 <HAL_RCC_ClockConfig+0x244>)
 8003a84:	4313      	orrs	r3, r2
 8003a86:	620b      	str	r3, [r1, #32]
    }
#endif
  }

   /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003a88:	687b      	ldr	r3, [r7, #4]
 8003a8a:	681b      	ldr	r3, [r3, #0]
 8003a8c:	f003 0302 	and.w	r3, r3, #2
 8003a90:	2b00      	cmp	r3, #0
 8003a92:	d010      	beq.n	8003ab6 <HAL_RCC_ClockConfig+0x12a>
  {
#if defined (RCC_D1CFGR_HPRE)
    if((RCC_ClkInitStruct->AHBCLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 8003a94:	687b      	ldr	r3, [r7, #4]
 8003a96:	68da      	ldr	r2, [r3, #12]
 8003a98:	4b4d      	ldr	r3, [pc, #308]	; (8003bd0 <HAL_RCC_ClockConfig+0x244>)
 8003a9a:	699b      	ldr	r3, [r3, #24]
 8003a9c:	f003 030f 	and.w	r3, r3, #15
 8003aa0:	429a      	cmp	r2, r3
 8003aa2:	d908      	bls.n	8003ab6 <HAL_RCC_ClockConfig+0x12a>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003aa4:	4b4a      	ldr	r3, [pc, #296]	; (8003bd0 <HAL_RCC_ClockConfig+0x244>)
 8003aa6:	699b      	ldr	r3, [r3, #24]
 8003aa8:	f023 020f 	bic.w	r2, r3, #15
 8003aac:	687b      	ldr	r3, [r7, #4]
 8003aae:	68db      	ldr	r3, [r3, #12]
 8003ab0:	4947      	ldr	r1, [pc, #284]	; (8003bd0 <HAL_RCC_ClockConfig+0x244>)
 8003ab2:	4313      	orrs	r3, r2
 8003ab4:	618b      	str	r3, [r1, #24]
    }
#endif
  }

    /*------------------------- SYSCLK Configuration -------------------------*/
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003ab6:	687b      	ldr	r3, [r7, #4]
 8003ab8:	681b      	ldr	r3, [r3, #0]
 8003aba:	f003 0301 	and.w	r3, r3, #1
 8003abe:	2b00      	cmp	r3, #0
 8003ac0:	d055      	beq.n	8003b6e <HAL_RCC_ClockConfig+0x1e2>
    {
      assert_param(IS_RCC_SYSCLK(RCC_ClkInitStruct->SYSCLKDivider));
      assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
#if defined(RCC_D1CFGR_D1CPRE)
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1CPRE, RCC_ClkInitStruct->SYSCLKDivider);
 8003ac2:	4b43      	ldr	r3, [pc, #268]	; (8003bd0 <HAL_RCC_ClockConfig+0x244>)
 8003ac4:	699b      	ldr	r3, [r3, #24]
 8003ac6:	f423 6270 	bic.w	r2, r3, #3840	; 0xf00
 8003aca:	687b      	ldr	r3, [r7, #4]
 8003acc:	689b      	ldr	r3, [r3, #8]
 8003ace:	4940      	ldr	r1, [pc, #256]	; (8003bd0 <HAL_RCC_ClockConfig+0x244>)
 8003ad0:	4313      	orrs	r3, r2
 8003ad2:	618b      	str	r3, [r1, #24]
#else
      MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDCPRE, RCC_ClkInitStruct->SYSCLKDivider);
#endif
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003ad4:	687b      	ldr	r3, [r7, #4]
 8003ad6:	685b      	ldr	r3, [r3, #4]
 8003ad8:	2b02      	cmp	r3, #2
 8003ada:	d107      	bne.n	8003aec <HAL_RCC_ClockConfig+0x160>
      {
        /* Check the HSE ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8003adc:	4b3c      	ldr	r3, [pc, #240]	; (8003bd0 <HAL_RCC_ClockConfig+0x244>)
 8003ade:	681b      	ldr	r3, [r3, #0]
 8003ae0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003ae4:	2b00      	cmp	r3, #0
 8003ae6:	d121      	bne.n	8003b2c <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 8003ae8:	2301      	movs	r3, #1
 8003aea:	e0f6      	b.n	8003cda <HAL_RCC_ClockConfig+0x34e>
        }
      }
      /* PLL is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8003aec:	687b      	ldr	r3, [r7, #4]
 8003aee:	685b      	ldr	r3, [r3, #4]
 8003af0:	2b03      	cmp	r3, #3
 8003af2:	d107      	bne.n	8003b04 <HAL_RCC_ClockConfig+0x178>
      {
        /* Check the PLL ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8003af4:	4b36      	ldr	r3, [pc, #216]	; (8003bd0 <HAL_RCC_ClockConfig+0x244>)
 8003af6:	681b      	ldr	r3, [r3, #0]
 8003af8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003afc:	2b00      	cmp	r3, #0
 8003afe:	d115      	bne.n	8003b2c <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 8003b00:	2301      	movs	r3, #1
 8003b02:	e0ea      	b.n	8003cda <HAL_RCC_ClockConfig+0x34e>
        }
      }
      /* CSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 8003b04:	687b      	ldr	r3, [r7, #4]
 8003b06:	685b      	ldr	r3, [r3, #4]
 8003b08:	2b01      	cmp	r3, #1
 8003b0a:	d107      	bne.n	8003b1c <HAL_RCC_ClockConfig+0x190>
      {
        /* Check the PLL ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8003b0c:	4b30      	ldr	r3, [pc, #192]	; (8003bd0 <HAL_RCC_ClockConfig+0x244>)
 8003b0e:	681b      	ldr	r3, [r3, #0]
 8003b10:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003b14:	2b00      	cmp	r3, #0
 8003b16:	d109      	bne.n	8003b2c <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 8003b18:	2301      	movs	r3, #1
 8003b1a:	e0de      	b.n	8003cda <HAL_RCC_ClockConfig+0x34e>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8003b1c:	4b2c      	ldr	r3, [pc, #176]	; (8003bd0 <HAL_RCC_ClockConfig+0x244>)
 8003b1e:	681b      	ldr	r3, [r3, #0]
 8003b20:	f003 0304 	and.w	r3, r3, #4
 8003b24:	2b00      	cmp	r3, #0
 8003b26:	d101      	bne.n	8003b2c <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 8003b28:	2301      	movs	r3, #1
 8003b2a:	e0d6      	b.n	8003cda <HAL_RCC_ClockConfig+0x34e>
        }
      }
      MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8003b2c:	4b28      	ldr	r3, [pc, #160]	; (8003bd0 <HAL_RCC_ClockConfig+0x244>)
 8003b2e:	691b      	ldr	r3, [r3, #16]
 8003b30:	f023 0207 	bic.w	r2, r3, #7
 8003b34:	687b      	ldr	r3, [r7, #4]
 8003b36:	685b      	ldr	r3, [r3, #4]
 8003b38:	4925      	ldr	r1, [pc, #148]	; (8003bd0 <HAL_RCC_ClockConfig+0x244>)
 8003b3a:	4313      	orrs	r3, r2
 8003b3c:	610b      	str	r3, [r1, #16]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003b3e:	f7fd fddb 	bl	80016f8 <HAL_GetTick>
 8003b42:	6178      	str	r0, [r7, #20]

        while (__HAL_RCC_GET_SYSCLK_SOURCE() !=  (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003b44:	e00a      	b.n	8003b5c <HAL_RCC_ClockConfig+0x1d0>
        {
          if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003b46:	f7fd fdd7 	bl	80016f8 <HAL_GetTick>
 8003b4a:	4602      	mov	r2, r0
 8003b4c:	697b      	ldr	r3, [r7, #20]
 8003b4e:	1ad3      	subs	r3, r2, r3
 8003b50:	f241 3288 	movw	r2, #5000	; 0x1388
 8003b54:	4293      	cmp	r3, r2
 8003b56:	d901      	bls.n	8003b5c <HAL_RCC_ClockConfig+0x1d0>
          {
            return HAL_TIMEOUT;
 8003b58:	2303      	movs	r3, #3
 8003b5a:	e0be      	b.n	8003cda <HAL_RCC_ClockConfig+0x34e>
        while (__HAL_RCC_GET_SYSCLK_SOURCE() !=  (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003b5c:	4b1c      	ldr	r3, [pc, #112]	; (8003bd0 <HAL_RCC_ClockConfig+0x244>)
 8003b5e:	691b      	ldr	r3, [r3, #16]
 8003b60:	f003 0238 	and.w	r2, r3, #56	; 0x38
 8003b64:	687b      	ldr	r3, [r7, #4]
 8003b66:	685b      	ldr	r3, [r3, #4]
 8003b68:	00db      	lsls	r3, r3, #3
 8003b6a:	429a      	cmp	r2, r3
 8003b6c:	d1eb      	bne.n	8003b46 <HAL_RCC_ClockConfig+0x1ba>

    }

    /* Decreasing the BUS frequency divider */
   /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003b6e:	687b      	ldr	r3, [r7, #4]
 8003b70:	681b      	ldr	r3, [r3, #0]
 8003b72:	f003 0302 	and.w	r3, r3, #2
 8003b76:	2b00      	cmp	r3, #0
 8003b78:	d010      	beq.n	8003b9c <HAL_RCC_ClockConfig+0x210>
  {
#if defined(RCC_D1CFGR_HPRE)
    if((RCC_ClkInitStruct->AHBCLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 8003b7a:	687b      	ldr	r3, [r7, #4]
 8003b7c:	68da      	ldr	r2, [r3, #12]
 8003b7e:	4b14      	ldr	r3, [pc, #80]	; (8003bd0 <HAL_RCC_ClockConfig+0x244>)
 8003b80:	699b      	ldr	r3, [r3, #24]
 8003b82:	f003 030f 	and.w	r3, r3, #15
 8003b86:	429a      	cmp	r2, r3
 8003b88:	d208      	bcs.n	8003b9c <HAL_RCC_ClockConfig+0x210>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003b8a:	4b11      	ldr	r3, [pc, #68]	; (8003bd0 <HAL_RCC_ClockConfig+0x244>)
 8003b8c:	699b      	ldr	r3, [r3, #24]
 8003b8e:	f023 020f 	bic.w	r2, r3, #15
 8003b92:	687b      	ldr	r3, [r7, #4]
 8003b94:	68db      	ldr	r3, [r3, #12]
 8003b96:	490e      	ldr	r1, [pc, #56]	; (8003bd0 <HAL_RCC_ClockConfig+0x244>)
 8003b98:	4313      	orrs	r3, r2
 8003b9a:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8003b9c:	4b0b      	ldr	r3, [pc, #44]	; (8003bcc <HAL_RCC_ClockConfig+0x240>)
 8003b9e:	681b      	ldr	r3, [r3, #0]
 8003ba0:	f003 030f 	and.w	r3, r3, #15
 8003ba4:	683a      	ldr	r2, [r7, #0]
 8003ba6:	429a      	cmp	r2, r3
 8003ba8:	d214      	bcs.n	8003bd4 <HAL_RCC_ClockConfig+0x248>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003baa:	4b08      	ldr	r3, [pc, #32]	; (8003bcc <HAL_RCC_ClockConfig+0x240>)
 8003bac:	681b      	ldr	r3, [r3, #0]
 8003bae:	f023 020f 	bic.w	r2, r3, #15
 8003bb2:	4906      	ldr	r1, [pc, #24]	; (8003bcc <HAL_RCC_ClockConfig+0x240>)
 8003bb4:	683b      	ldr	r3, [r7, #0]
 8003bb6:	4313      	orrs	r3, r2
 8003bb8:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003bba:	4b04      	ldr	r3, [pc, #16]	; (8003bcc <HAL_RCC_ClockConfig+0x240>)
 8003bbc:	681b      	ldr	r3, [r3, #0]
 8003bbe:	f003 030f 	and.w	r3, r3, #15
 8003bc2:	683a      	ldr	r2, [r7, #0]
 8003bc4:	429a      	cmp	r2, r3
 8003bc6:	d005      	beq.n	8003bd4 <HAL_RCC_ClockConfig+0x248>
    {
      return HAL_ERROR;
 8003bc8:	2301      	movs	r3, #1
 8003bca:	e086      	b.n	8003cda <HAL_RCC_ClockConfig+0x34e>
 8003bcc:	52002000 	.word	0x52002000
 8003bd0:	58024400 	.word	0x58024400
    }
 }

  /*-------------------------- D1PCLK1/CDPCLK Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8003bd4:	687b      	ldr	r3, [r7, #4]
 8003bd6:	681b      	ldr	r3, [r3, #0]
 8003bd8:	f003 0304 	and.w	r3, r3, #4
 8003bdc:	2b00      	cmp	r3, #0
 8003bde:	d010      	beq.n	8003c02 <HAL_RCC_ClockConfig+0x276>
 {
#if defined(RCC_D1CFGR_D1PPRE)
   if((RCC_ClkInitStruct->APB3CLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8003be0:	687b      	ldr	r3, [r7, #4]
 8003be2:	691a      	ldr	r2, [r3, #16]
 8003be4:	4b3f      	ldr	r3, [pc, #252]	; (8003ce4 <HAL_RCC_ClockConfig+0x358>)
 8003be6:	699b      	ldr	r3, [r3, #24]
 8003be8:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8003bec:	429a      	cmp	r2, r3
 8003bee:	d208      	bcs.n	8003c02 <HAL_RCC_ClockConfig+0x276>
   {
     assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
     MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8003bf0:	4b3c      	ldr	r3, [pc, #240]	; (8003ce4 <HAL_RCC_ClockConfig+0x358>)
 8003bf2:	699b      	ldr	r3, [r3, #24]
 8003bf4:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8003bf8:	687b      	ldr	r3, [r7, #4]
 8003bfa:	691b      	ldr	r3, [r3, #16]
 8003bfc:	4939      	ldr	r1, [pc, #228]	; (8003ce4 <HAL_RCC_ClockConfig+0x358>)
 8003bfe:	4313      	orrs	r3, r2
 8003c00:	618b      	str	r3, [r1, #24]
   }
#endif
 }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003c02:	687b      	ldr	r3, [r7, #4]
 8003c04:	681b      	ldr	r3, [r3, #0]
 8003c06:	f003 0308 	and.w	r3, r3, #8
 8003c0a:	2b00      	cmp	r3, #0
 8003c0c:	d010      	beq.n	8003c30 <HAL_RCC_ClockConfig+0x2a4>
 {
#if defined(RCC_D2CFGR_D2PPRE1)
   if((RCC_ClkInitStruct->APB1CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 8003c0e:	687b      	ldr	r3, [r7, #4]
 8003c10:	695a      	ldr	r2, [r3, #20]
 8003c12:	4b34      	ldr	r3, [pc, #208]	; (8003ce4 <HAL_RCC_ClockConfig+0x358>)
 8003c14:	69db      	ldr	r3, [r3, #28]
 8003c16:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8003c1a:	429a      	cmp	r2, r3
 8003c1c:	d208      	bcs.n	8003c30 <HAL_RCC_ClockConfig+0x2a4>
   {
     assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
     MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 8003c1e:	4b31      	ldr	r3, [pc, #196]	; (8003ce4 <HAL_RCC_ClockConfig+0x358>)
 8003c20:	69db      	ldr	r3, [r3, #28]
 8003c22:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8003c26:	687b      	ldr	r3, [r7, #4]
 8003c28:	695b      	ldr	r3, [r3, #20]
 8003c2a:	492e      	ldr	r1, [pc, #184]	; (8003ce4 <HAL_RCC_ClockConfig+0x358>)
 8003c2c:	4313      	orrs	r3, r2
 8003c2e:	61cb      	str	r3, [r1, #28]
   }
#endif
 }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003c30:	687b      	ldr	r3, [r7, #4]
 8003c32:	681b      	ldr	r3, [r3, #0]
 8003c34:	f003 0310 	and.w	r3, r3, #16
 8003c38:	2b00      	cmp	r3, #0
 8003c3a:	d010      	beq.n	8003c5e <HAL_RCC_ClockConfig+0x2d2>
 {
#if defined (RCC_D2CFGR_D2PPRE2)
   if((RCC_ClkInitStruct->APB2CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8003c3c:	687b      	ldr	r3, [r7, #4]
 8003c3e:	699a      	ldr	r2, [r3, #24]
 8003c40:	4b28      	ldr	r3, [pc, #160]	; (8003ce4 <HAL_RCC_ClockConfig+0x358>)
 8003c42:	69db      	ldr	r3, [r3, #28]
 8003c44:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8003c48:	429a      	cmp	r2, r3
 8003c4a:	d208      	bcs.n	8003c5e <HAL_RCC_ClockConfig+0x2d2>
   {
     assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
     MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8003c4c:	4b25      	ldr	r3, [pc, #148]	; (8003ce4 <HAL_RCC_ClockConfig+0x358>)
 8003c4e:	69db      	ldr	r3, [r3, #28]
 8003c50:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8003c54:	687b      	ldr	r3, [r7, #4]
 8003c56:	699b      	ldr	r3, [r3, #24]
 8003c58:	4922      	ldr	r1, [pc, #136]	; (8003ce4 <HAL_RCC_ClockConfig+0x358>)
 8003c5a:	4313      	orrs	r3, r2
 8003c5c:	61cb      	str	r3, [r1, #28]
   }
#endif
 }

  /*-------------------------- D3PCLK1/SRDPCLK1 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 8003c5e:	687b      	ldr	r3, [r7, #4]
 8003c60:	681b      	ldr	r3, [r3, #0]
 8003c62:	f003 0320 	and.w	r3, r3, #32
 8003c66:	2b00      	cmp	r3, #0
 8003c68:	d010      	beq.n	8003c8c <HAL_RCC_ClockConfig+0x300>
 {
#if defined(RCC_D3CFGR_D3PPRE)
   if((RCC_ClkInitStruct->APB4CLKDivider) < (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 8003c6a:	687b      	ldr	r3, [r7, #4]
 8003c6c:	69da      	ldr	r2, [r3, #28]
 8003c6e:	4b1d      	ldr	r3, [pc, #116]	; (8003ce4 <HAL_RCC_ClockConfig+0x358>)
 8003c70:	6a1b      	ldr	r3, [r3, #32]
 8003c72:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8003c76:	429a      	cmp	r2, r3
 8003c78:	d208      	bcs.n	8003c8c <HAL_RCC_ClockConfig+0x300>
   {
     assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
     MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider) );
 8003c7a:	4b1a      	ldr	r3, [pc, #104]	; (8003ce4 <HAL_RCC_ClockConfig+0x358>)
 8003c7c:	6a1b      	ldr	r3, [r3, #32]
 8003c7e:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8003c82:	687b      	ldr	r3, [r7, #4]
 8003c84:	69db      	ldr	r3, [r3, #28]
 8003c86:	4917      	ldr	r1, [pc, #92]	; (8003ce4 <HAL_RCC_ClockConfig+0x358>)
 8003c88:	4313      	orrs	r3, r2
 8003c8a:	620b      	str	r3, [r1, #32]
#endif
 }

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8003c8c:	f000 f834 	bl	8003cf8 <HAL_RCC_GetSysClockFreq>
 8003c90:	4602      	mov	r2, r0
 8003c92:	4b14      	ldr	r3, [pc, #80]	; (8003ce4 <HAL_RCC_ClockConfig+0x358>)
 8003c94:	699b      	ldr	r3, [r3, #24]
 8003c96:	0a1b      	lsrs	r3, r3, #8
 8003c98:	f003 030f 	and.w	r3, r3, #15
 8003c9c:	4912      	ldr	r1, [pc, #72]	; (8003ce8 <HAL_RCC_ClockConfig+0x35c>)
 8003c9e:	5ccb      	ldrb	r3, [r1, r3]
 8003ca0:	f003 031f 	and.w	r3, r3, #31
 8003ca4:	fa22 f303 	lsr.w	r3, r2, r3
 8003ca8:	613b      	str	r3, [r7, #16]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8003caa:	4b0e      	ldr	r3, [pc, #56]	; (8003ce4 <HAL_RCC_ClockConfig+0x358>)
 8003cac:	699b      	ldr	r3, [r3, #24]
 8003cae:	f003 030f 	and.w	r3, r3, #15
 8003cb2:	4a0d      	ldr	r2, [pc, #52]	; (8003ce8 <HAL_RCC_ClockConfig+0x35c>)
 8003cb4:	5cd3      	ldrb	r3, [r2, r3]
 8003cb6:	f003 031f 	and.w	r3, r3, #31
 8003cba:	693a      	ldr	r2, [r7, #16]
 8003cbc:	fa22 f303 	lsr.w	r3, r2, r3
 8003cc0:	4a0a      	ldr	r2, [pc, #40]	; (8003cec <HAL_RCC_ClockConfig+0x360>)
 8003cc2:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8003cc4:	4a0a      	ldr	r2, [pc, #40]	; (8003cf0 <HAL_RCC_ClockConfig+0x364>)
 8003cc6:	693b      	ldr	r3, [r7, #16]
 8003cc8:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Configure the source of time base considering new system clocks settings*/
  halstatus = HAL_InitTick (uwTickPrio);
 8003cca:	4b0a      	ldr	r3, [pc, #40]	; (8003cf4 <HAL_RCC_ClockConfig+0x368>)
 8003ccc:	681b      	ldr	r3, [r3, #0]
 8003cce:	4618      	mov	r0, r3
 8003cd0:	f7fd fcc8 	bl	8001664 <HAL_InitTick>
 8003cd4:	4603      	mov	r3, r0
 8003cd6:	73fb      	strb	r3, [r7, #15]

  return halstatus;
 8003cd8:	7bfb      	ldrb	r3, [r7, #15]
}
 8003cda:	4618      	mov	r0, r3
 8003cdc:	3718      	adds	r7, #24
 8003cde:	46bd      	mov	sp, r7
 8003ce0:	bd80      	pop	{r7, pc}
 8003ce2:	bf00      	nop
 8003ce4:	58024400 	.word	0x58024400
 8003ce8:	08008e14 	.word	0x08008e14
 8003cec:	2000006c 	.word	0x2000006c
 8003cf0:	20000068 	.word	0x20000068
 8003cf4:	20000070 	.word	0x20000070

08003cf8 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003cf8:	b480      	push	{r7}
 8003cfa:	b089      	sub	sp, #36	; 0x24
 8003cfc:	af00      	add	r7, sp, #0
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 8003cfe:	4bb3      	ldr	r3, [pc, #716]	; (8003fcc <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003d00:	691b      	ldr	r3, [r3, #16]
 8003d02:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8003d06:	2b18      	cmp	r3, #24
 8003d08:	f200 8155 	bhi.w	8003fb6 <HAL_RCC_GetSysClockFreq+0x2be>
 8003d0c:	a201      	add	r2, pc, #4	; (adr r2, 8003d14 <HAL_RCC_GetSysClockFreq+0x1c>)
 8003d0e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003d12:	bf00      	nop
 8003d14:	08003d79 	.word	0x08003d79
 8003d18:	08003fb7 	.word	0x08003fb7
 8003d1c:	08003fb7 	.word	0x08003fb7
 8003d20:	08003fb7 	.word	0x08003fb7
 8003d24:	08003fb7 	.word	0x08003fb7
 8003d28:	08003fb7 	.word	0x08003fb7
 8003d2c:	08003fb7 	.word	0x08003fb7
 8003d30:	08003fb7 	.word	0x08003fb7
 8003d34:	08003d9f 	.word	0x08003d9f
 8003d38:	08003fb7 	.word	0x08003fb7
 8003d3c:	08003fb7 	.word	0x08003fb7
 8003d40:	08003fb7 	.word	0x08003fb7
 8003d44:	08003fb7 	.word	0x08003fb7
 8003d48:	08003fb7 	.word	0x08003fb7
 8003d4c:	08003fb7 	.word	0x08003fb7
 8003d50:	08003fb7 	.word	0x08003fb7
 8003d54:	08003da5 	.word	0x08003da5
 8003d58:	08003fb7 	.word	0x08003fb7
 8003d5c:	08003fb7 	.word	0x08003fb7
 8003d60:	08003fb7 	.word	0x08003fb7
 8003d64:	08003fb7 	.word	0x08003fb7
 8003d68:	08003fb7 	.word	0x08003fb7
 8003d6c:	08003fb7 	.word	0x08003fb7
 8003d70:	08003fb7 	.word	0x08003fb7
 8003d74:	08003dab 	.word	0x08003dab
  {
  case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */

   if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8003d78:	4b94      	ldr	r3, [pc, #592]	; (8003fcc <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003d7a:	681b      	ldr	r3, [r3, #0]
 8003d7c:	f003 0320 	and.w	r3, r3, #32
 8003d80:	2b00      	cmp	r3, #0
 8003d82:	d009      	beq.n	8003d98 <HAL_RCC_GetSysClockFreq+0xa0>
      {
        sysclockfreq = (uint32_t) (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8003d84:	4b91      	ldr	r3, [pc, #580]	; (8003fcc <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003d86:	681b      	ldr	r3, [r3, #0]
 8003d88:	08db      	lsrs	r3, r3, #3
 8003d8a:	f003 0303 	and.w	r3, r3, #3
 8003d8e:	4a90      	ldr	r2, [pc, #576]	; (8003fd0 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8003d90:	fa22 f303 	lsr.w	r3, r2, r3
 8003d94:	61bb      	str	r3, [r7, #24]
      else
      {
        sysclockfreq = (uint32_t) HSI_VALUE;
      }

    break;
 8003d96:	e111      	b.n	8003fbc <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = (uint32_t) HSI_VALUE;
 8003d98:	4b8d      	ldr	r3, [pc, #564]	; (8003fd0 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8003d9a:	61bb      	str	r3, [r7, #24]
    break;
 8003d9c:	e10e      	b.n	8003fbc <HAL_RCC_GetSysClockFreq+0x2c4>

  case RCC_CFGR_SWS_CSI:  /* CSI used as system clock  source */
    sysclockfreq = CSI_VALUE;
 8003d9e:	4b8d      	ldr	r3, [pc, #564]	; (8003fd4 <HAL_RCC_GetSysClockFreq+0x2dc>)
 8003da0:	61bb      	str	r3, [r7, #24]
    break;
 8003da2:	e10b      	b.n	8003fbc <HAL_RCC_GetSysClockFreq+0x2c4>

  case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    sysclockfreq = HSE_VALUE;
 8003da4:	4b8c      	ldr	r3, [pc, #560]	; (8003fd8 <HAL_RCC_GetSysClockFreq+0x2e0>)
 8003da6:	61bb      	str	r3, [r7, #24]
    break;
 8003da8:	e108      	b.n	8003fbc <HAL_RCC_GetSysClockFreq+0x2c4>
  case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8003daa:	4b88      	ldr	r3, [pc, #544]	; (8003fcc <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003dac:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003dae:	f003 0303 	and.w	r3, r3, #3
 8003db2:	617b      	str	r3, [r7, #20]
    pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1)>> 4)  ;
 8003db4:	4b85      	ldr	r3, [pc, #532]	; (8003fcc <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003db6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003db8:	091b      	lsrs	r3, r3, #4
 8003dba:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8003dbe:	613b      	str	r3, [r7, #16]
    pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN)>>RCC_PLLCFGR_PLL1FRACEN_Pos);
 8003dc0:	4b82      	ldr	r3, [pc, #520]	; (8003fcc <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003dc2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003dc4:	f003 0301 	and.w	r3, r3, #1
 8003dc8:	60fb      	str	r3, [r7, #12]
    fracn1 = (float_t)(uint32_t)(pllfracen* ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1)>> 3));
 8003dca:	4b80      	ldr	r3, [pc, #512]	; (8003fcc <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003dcc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003dce:	08db      	lsrs	r3, r3, #3
 8003dd0:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8003dd4:	68fa      	ldr	r2, [r7, #12]
 8003dd6:	fb02 f303 	mul.w	r3, r2, r3
 8003dda:	ee07 3a90 	vmov	s15, r3
 8003dde:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003de2:	edc7 7a02 	vstr	s15, [r7, #8]

    if (pllm != 0U)
 8003de6:	693b      	ldr	r3, [r7, #16]
 8003de8:	2b00      	cmp	r3, #0
 8003dea:	f000 80e1 	beq.w	8003fb0 <HAL_RCC_GetSysClockFreq+0x2b8>
 8003dee:	697b      	ldr	r3, [r7, #20]
 8003df0:	2b02      	cmp	r3, #2
 8003df2:	f000 8083 	beq.w	8003efc <HAL_RCC_GetSysClockFreq+0x204>
 8003df6:	697b      	ldr	r3, [r7, #20]
 8003df8:	2b02      	cmp	r3, #2
 8003dfa:	f200 80a1 	bhi.w	8003f40 <HAL_RCC_GetSysClockFreq+0x248>
 8003dfe:	697b      	ldr	r3, [r7, #20]
 8003e00:	2b00      	cmp	r3, #0
 8003e02:	d003      	beq.n	8003e0c <HAL_RCC_GetSysClockFreq+0x114>
 8003e04:	697b      	ldr	r3, [r7, #20]
 8003e06:	2b01      	cmp	r3, #1
 8003e08:	d056      	beq.n	8003eb8 <HAL_RCC_GetSysClockFreq+0x1c0>
 8003e0a:	e099      	b.n	8003f40 <HAL_RCC_GetSysClockFreq+0x248>
    {
      switch (pllsource)
      {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

       if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8003e0c:	4b6f      	ldr	r3, [pc, #444]	; (8003fcc <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003e0e:	681b      	ldr	r3, [r3, #0]
 8003e10:	f003 0320 	and.w	r3, r3, #32
 8003e14:	2b00      	cmp	r3, #0
 8003e16:	d02d      	beq.n	8003e74 <HAL_RCC_GetSysClockFreq+0x17c>
        {
          hsivalue= (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8003e18:	4b6c      	ldr	r3, [pc, #432]	; (8003fcc <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003e1a:	681b      	ldr	r3, [r3, #0]
 8003e1c:	08db      	lsrs	r3, r3, #3
 8003e1e:	f003 0303 	and.w	r3, r3, #3
 8003e22:	4a6b      	ldr	r2, [pc, #428]	; (8003fd0 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8003e24:	fa22 f303 	lsr.w	r3, r2, r3
 8003e28:	607b      	str	r3, [r7, #4]
          pllvco = ( (float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8003e2a:	687b      	ldr	r3, [r7, #4]
 8003e2c:	ee07 3a90 	vmov	s15, r3
 8003e30:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003e34:	693b      	ldr	r3, [r7, #16]
 8003e36:	ee07 3a90 	vmov	s15, r3
 8003e3a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003e3e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8003e42:	4b62      	ldr	r3, [pc, #392]	; (8003fcc <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003e44:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003e46:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003e4a:	ee07 3a90 	vmov	s15, r3
 8003e4e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003e52:	ed97 6a02 	vldr	s12, [r7, #8]
 8003e56:	eddf 5a61 	vldr	s11, [pc, #388]	; 8003fdc <HAL_RCC_GetSysClockFreq+0x2e4>
 8003e5a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8003e5e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8003e62:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8003e66:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8003e6a:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003e6e:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
        }
        break;
 8003e72:	e087      	b.n	8003f84 <HAL_RCC_GetSysClockFreq+0x28c>
          pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8003e74:	693b      	ldr	r3, [r7, #16]
 8003e76:	ee07 3a90 	vmov	s15, r3
 8003e7a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003e7e:	eddf 6a58 	vldr	s13, [pc, #352]	; 8003fe0 <HAL_RCC_GetSysClockFreq+0x2e8>
 8003e82:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8003e86:	4b51      	ldr	r3, [pc, #324]	; (8003fcc <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003e88:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003e8a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003e8e:	ee07 3a90 	vmov	s15, r3
 8003e92:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003e96:	ed97 6a02 	vldr	s12, [r7, #8]
 8003e9a:	eddf 5a50 	vldr	s11, [pc, #320]	; 8003fdc <HAL_RCC_GetSysClockFreq+0x2e4>
 8003e9e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8003ea2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8003ea6:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8003eaa:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8003eae:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003eb2:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8003eb6:	e065      	b.n	8003f84 <HAL_RCC_GetSysClockFreq+0x28c>

      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8003eb8:	693b      	ldr	r3, [r7, #16]
 8003eba:	ee07 3a90 	vmov	s15, r3
 8003ebe:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003ec2:	eddf 6a48 	vldr	s13, [pc, #288]	; 8003fe4 <HAL_RCC_GetSysClockFreq+0x2ec>
 8003ec6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8003eca:	4b40      	ldr	r3, [pc, #256]	; (8003fcc <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003ecc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003ece:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003ed2:	ee07 3a90 	vmov	s15, r3
 8003ed6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003eda:	ed97 6a02 	vldr	s12, [r7, #8]
 8003ede:	eddf 5a3f 	vldr	s11, [pc, #252]	; 8003fdc <HAL_RCC_GetSysClockFreq+0x2e4>
 8003ee2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8003ee6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8003eea:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8003eee:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8003ef2:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003ef6:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8003efa:	e043      	b.n	8003f84 <HAL_RCC_GetSysClockFreq+0x28c>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8003efc:	693b      	ldr	r3, [r7, #16]
 8003efe:	ee07 3a90 	vmov	s15, r3
 8003f02:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003f06:	eddf 6a38 	vldr	s13, [pc, #224]	; 8003fe8 <HAL_RCC_GetSysClockFreq+0x2f0>
 8003f0a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8003f0e:	4b2f      	ldr	r3, [pc, #188]	; (8003fcc <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003f10:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003f12:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003f16:	ee07 3a90 	vmov	s15, r3
 8003f1a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003f1e:	ed97 6a02 	vldr	s12, [r7, #8]
 8003f22:	eddf 5a2e 	vldr	s11, [pc, #184]	; 8003fdc <HAL_RCC_GetSysClockFreq+0x2e4>
 8003f26:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8003f2a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8003f2e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8003f32:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8003f36:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003f3a:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8003f3e:	e021      	b.n	8003f84 <HAL_RCC_GetSysClockFreq+0x28c>

      default:
        pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8003f40:	693b      	ldr	r3, [r7, #16]
 8003f42:	ee07 3a90 	vmov	s15, r3
 8003f46:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003f4a:	eddf 6a26 	vldr	s13, [pc, #152]	; 8003fe4 <HAL_RCC_GetSysClockFreq+0x2ec>
 8003f4e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8003f52:	4b1e      	ldr	r3, [pc, #120]	; (8003fcc <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003f54:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003f56:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003f5a:	ee07 3a90 	vmov	s15, r3
 8003f5e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003f62:	ed97 6a02 	vldr	s12, [r7, #8]
 8003f66:	eddf 5a1d 	vldr	s11, [pc, #116]	; 8003fdc <HAL_RCC_GetSysClockFreq+0x2e4>
 8003f6a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8003f6e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8003f72:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8003f76:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8003f7a:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003f7e:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8003f82:	bf00      	nop
      }
      pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >>9) + 1U ) ;
 8003f84:	4b11      	ldr	r3, [pc, #68]	; (8003fcc <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003f86:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003f88:	0a5b      	lsrs	r3, r3, #9
 8003f8a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8003f8e:	3301      	adds	r3, #1
 8003f90:	603b      	str	r3, [r7, #0]
      sysclockfreq =  (uint32_t)(float_t)(pllvco/(float_t)pllp);
 8003f92:	683b      	ldr	r3, [r7, #0]
 8003f94:	ee07 3a90 	vmov	s15, r3
 8003f98:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8003f9c:	edd7 6a07 	vldr	s13, [r7, #28]
 8003fa0:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8003fa4:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8003fa8:	ee17 3a90 	vmov	r3, s15
 8003fac:	61bb      	str	r3, [r7, #24]
    }
    else
    {
      sysclockfreq = 0U;
    }
    break;
 8003fae:	e005      	b.n	8003fbc <HAL_RCC_GetSysClockFreq+0x2c4>
      sysclockfreq = 0U;
 8003fb0:	2300      	movs	r3, #0
 8003fb2:	61bb      	str	r3, [r7, #24]
    break;
 8003fb4:	e002      	b.n	8003fbc <HAL_RCC_GetSysClockFreq+0x2c4>

  default:
    sysclockfreq = CSI_VALUE;
 8003fb6:	4b07      	ldr	r3, [pc, #28]	; (8003fd4 <HAL_RCC_GetSysClockFreq+0x2dc>)
 8003fb8:	61bb      	str	r3, [r7, #24]
    break;
 8003fba:	bf00      	nop
  }

  return sysclockfreq;
 8003fbc:	69bb      	ldr	r3, [r7, #24]
}
 8003fbe:	4618      	mov	r0, r3
 8003fc0:	3724      	adds	r7, #36	; 0x24
 8003fc2:	46bd      	mov	sp, r7
 8003fc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fc8:	4770      	bx	lr
 8003fca:	bf00      	nop
 8003fcc:	58024400 	.word	0x58024400
 8003fd0:	03d09000 	.word	0x03d09000
 8003fd4:	003d0900 	.word	0x003d0900
 8003fd8:	007a1200 	.word	0x007a1200
 8003fdc:	46000000 	.word	0x46000000
 8003fe0:	4c742400 	.word	0x4c742400
 8003fe4:	4a742400 	.word	0x4a742400
 8003fe8:	4af42400 	.word	0x4af42400

08003fec <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemD2Clock CMSIS variable is used to store System domain2 Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003fec:	b580      	push	{r7, lr}
 8003fee:	b082      	sub	sp, #8
 8003ff0:	af00      	add	r7, sp, #0
uint32_t common_system_clock;

#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 8003ff2:	f7ff fe81 	bl	8003cf8 <HAL_RCC_GetSysClockFreq>
 8003ff6:	4602      	mov	r2, r0
 8003ff8:	4b10      	ldr	r3, [pc, #64]	; (800403c <HAL_RCC_GetHCLKFreq+0x50>)
 8003ffa:	699b      	ldr	r3, [r3, #24]
 8003ffc:	0a1b      	lsrs	r3, r3, #8
 8003ffe:	f003 030f 	and.w	r3, r3, #15
 8004002:	490f      	ldr	r1, [pc, #60]	; (8004040 <HAL_RCC_GetHCLKFreq+0x54>)
 8004004:	5ccb      	ldrb	r3, [r1, r3]
 8004006:	f003 031f 	and.w	r3, r3, #31
 800400a:	fa22 f303 	lsr.w	r3, r2, r3
 800400e:	607b      	str	r3, [r7, #4]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos] & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8004010:	4b0a      	ldr	r3, [pc, #40]	; (800403c <HAL_RCC_GetHCLKFreq+0x50>)
 8004012:	699b      	ldr	r3, [r3, #24]
 8004014:	f003 030f 	and.w	r3, r3, #15
 8004018:	4a09      	ldr	r2, [pc, #36]	; (8004040 <HAL_RCC_GetHCLKFreq+0x54>)
 800401a:	5cd3      	ldrb	r3, [r2, r3]
 800401c:	f003 031f 	and.w	r3, r3, #31
 8004020:	687a      	ldr	r2, [r7, #4]
 8004022:	fa22 f303 	lsr.w	r3, r2, r3
 8004026:	4a07      	ldr	r2, [pc, #28]	; (8004044 <HAL_RCC_GetHCLKFreq+0x58>)
 8004028:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 800402a:	4a07      	ldr	r2, [pc, #28]	; (8004048 <HAL_RCC_GetHCLKFreq+0x5c>)
 800402c:	687b      	ldr	r3, [r7, #4]
 800402e:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  return SystemD2Clock;
 8004030:	4b04      	ldr	r3, [pc, #16]	; (8004044 <HAL_RCC_GetHCLKFreq+0x58>)
 8004032:	681b      	ldr	r3, [r3, #0]
}
 8004034:	4618      	mov	r0, r3
 8004036:	3708      	adds	r7, #8
 8004038:	46bd      	mov	sp, r7
 800403a:	bd80      	pop	{r7, pc}
 800403c:	58024400 	.word	0x58024400
 8004040:	08008e14 	.word	0x08008e14
 8004044:	2000006c 	.word	0x2000006c
 8004048:	20000068 	.word	0x20000068

0800404c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800404c:	b580      	push	{r7, lr}
 800404e:	af00      	add	r7, sp, #0
#if defined (RCC_D2CFGR_D2PPRE1)
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1)>> RCC_D2CFGR_D2PPRE1_Pos]) & 0x1FU));
 8004050:	f7ff ffcc 	bl	8003fec <HAL_RCC_GetHCLKFreq>
 8004054:	4602      	mov	r2, r0
 8004056:	4b06      	ldr	r3, [pc, #24]	; (8004070 <HAL_RCC_GetPCLK1Freq+0x24>)
 8004058:	69db      	ldr	r3, [r3, #28]
 800405a:	091b      	lsrs	r3, r3, #4
 800405c:	f003 0307 	and.w	r3, r3, #7
 8004060:	4904      	ldr	r1, [pc, #16]	; (8004074 <HAL_RCC_GetPCLK1Freq+0x28>)
 8004062:	5ccb      	ldrb	r3, [r1, r3]
 8004064:	f003 031f 	and.w	r3, r3, #31
 8004068:	fa22 f303 	lsr.w	r3, r2, r3
#else
 /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1)>> RCC_CDCFGR2_CDPPRE1_Pos]) & 0x1FU));
#endif
}
 800406c:	4618      	mov	r0, r3
 800406e:	bd80      	pop	{r7, pc}
 8004070:	58024400 	.word	0x58024400
 8004074:	08008e14 	.word	0x08008e14

08004078 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8004078:	b580      	push	{r7, lr}
 800407a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
#if defined(RCC_D2CFGR_D2PPRE2)
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2)>> RCC_D2CFGR_D2PPRE2_Pos]) & 0x1FU));
 800407c:	f7ff ffb6 	bl	8003fec <HAL_RCC_GetHCLKFreq>
 8004080:	4602      	mov	r2, r0
 8004082:	4b06      	ldr	r3, [pc, #24]	; (800409c <HAL_RCC_GetPCLK2Freq+0x24>)
 8004084:	69db      	ldr	r3, [r3, #28]
 8004086:	0a1b      	lsrs	r3, r3, #8
 8004088:	f003 0307 	and.w	r3, r3, #7
 800408c:	4904      	ldr	r1, [pc, #16]	; (80040a0 <HAL_RCC_GetPCLK2Freq+0x28>)
 800408e:	5ccb      	ldrb	r3, [r1, r3]
 8004090:	f003 031f 	and.w	r3, r3, #31
 8004094:	fa22 f303 	lsr.w	r3, r2, r3
#else
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2)>> RCC_CDCFGR2_CDPPRE2_Pos]) & 0x1FU));
#endif
}
 8004098:	4618      	mov	r0, r3
 800409a:	bd80      	pop	{r7, pc}
 800409c:	58024400 	.word	0x58024400
 80040a0:	08008e14 	.word	0x08008e14

080040a4 <HAL_RCCEx_PeriphCLKConfig>:
  * (*) : Available on some STM32H7 lines only.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80040a4:	b580      	push	{r7, lr}
 80040a6:	b086      	sub	sp, #24
 80040a8:	af00      	add	r7, sp, #0
 80040aa:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 80040ac:	2300      	movs	r3, #0
 80040ae:	75fb      	strb	r3, [r7, #23]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 80040b0:	2300      	movs	r3, #0
 80040b2:	75bb      	strb	r3, [r7, #22]

  /*---------------------------- SPDIFRX configuration -------------------------------*/

  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 80040b4:	687b      	ldr	r3, [r7, #4]
 80040b6:	681b      	ldr	r3, [r3, #0]
 80040b8:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80040bc:	2b00      	cmp	r3, #0
 80040be:	d03f      	beq.n	8004140 <HAL_RCCEx_PeriphCLKConfig+0x9c>
  {

    switch(PeriphClkInit->SpdifrxClockSelection)
 80040c0:	687b      	ldr	r3, [r7, #4]
 80040c2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80040c4:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 80040c8:	d02a      	beq.n	8004120 <HAL_RCCEx_PeriphCLKConfig+0x7c>
 80040ca:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 80040ce:	d824      	bhi.n	800411a <HAL_RCCEx_PeriphCLKConfig+0x76>
 80040d0:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80040d4:	d018      	beq.n	8004108 <HAL_RCCEx_PeriphCLKConfig+0x64>
 80040d6:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80040da:	d81e      	bhi.n	800411a <HAL_RCCEx_PeriphCLKConfig+0x76>
 80040dc:	2b00      	cmp	r3, #0
 80040de:	d003      	beq.n	80040e8 <HAL_RCCEx_PeriphCLKConfig+0x44>
 80040e0:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80040e4:	d007      	beq.n	80040f6 <HAL_RCCEx_PeriphCLKConfig+0x52>
 80040e6:	e018      	b.n	800411a <HAL_RCCEx_PeriphCLKConfig+0x76>
    {
    case RCC_SPDIFRXCLKSOURCE_PLL:      /* PLL is used as clock source for SPDIFRX*/
      /* Enable PLL1Q Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80040e8:	4bab      	ldr	r3, [pc, #684]	; (8004398 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 80040ea:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80040ec:	4aaa      	ldr	r2, [pc, #680]	; (8004398 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 80040ee:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80040f2:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 80040f4:	e015      	b.n	8004122 <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SPDIFRXCLKSOURCE_PLL2: /* PLL2 is used as clock source for SPDIFRX*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 80040f6:	687b      	ldr	r3, [r7, #4]
 80040f8:	3304      	adds	r3, #4
 80040fa:	2102      	movs	r1, #2
 80040fc:	4618      	mov	r0, r3
 80040fe:	f001 f989 	bl	8005414 <RCCEx_PLL2_Config>
 8004102:	4603      	mov	r3, r0
 8004104:	75fb      	strb	r3, [r7, #23]

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 8004106:	e00c      	b.n	8004122 <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SPDIFRXCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPDIFRX*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8004108:	687b      	ldr	r3, [r7, #4]
 800410a:	3324      	adds	r3, #36	; 0x24
 800410c:	2102      	movs	r1, #2
 800410e:	4618      	mov	r0, r3
 8004110:	f001 fa32 	bl	8005578 <RCCEx_PLL3_Config>
 8004114:	4603      	mov	r3, r0
 8004116:	75fb      	strb	r3, [r7, #23]

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 8004118:	e003      	b.n	8004122 <HAL_RCCEx_PeriphCLKConfig+0x7e>
      /* Internal OSC clock is used as source of SPDIFRX clock*/
      /* SPDIFRX clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800411a:	2301      	movs	r3, #1
 800411c:	75fb      	strb	r3, [r7, #23]
      break;
 800411e:	e000      	b.n	8004122 <HAL_RCCEx_PeriphCLKConfig+0x7e>
      break;
 8004120:	bf00      	nop
    }

    if(ret == HAL_OK)
 8004122:	7dfb      	ldrb	r3, [r7, #23]
 8004124:	2b00      	cmp	r3, #0
 8004126:	d109      	bne.n	800413c <HAL_RCCEx_PeriphCLKConfig+0x98>
    {
      /* Set the source of SPDIFRX clock*/
      __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifrxClockSelection);
 8004128:	4b9b      	ldr	r3, [pc, #620]	; (8004398 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 800412a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800412c:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8004130:	687b      	ldr	r3, [r7, #4]
 8004132:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004134:	4998      	ldr	r1, [pc, #608]	; (8004398 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8004136:	4313      	orrs	r3, r2
 8004138:	650b      	str	r3, [r1, #80]	; 0x50
 800413a:	e001      	b.n	8004140 <HAL_RCCEx_PeriphCLKConfig+0x9c>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800413c:	7dfb      	ldrb	r3, [r7, #23]
 800413e:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SAI1 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 8004140:	687b      	ldr	r3, [r7, #4]
 8004142:	681b      	ldr	r3, [r3, #0]
 8004144:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004148:	2b00      	cmp	r3, #0
 800414a:	d03d      	beq.n	80041c8 <HAL_RCCEx_PeriphCLKConfig+0x124>
  {
    switch(PeriphClkInit->Sai1ClockSelection)
 800414c:	687b      	ldr	r3, [r7, #4]
 800414e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004150:	2b04      	cmp	r3, #4
 8004152:	d826      	bhi.n	80041a2 <HAL_RCCEx_PeriphCLKConfig+0xfe>
 8004154:	a201      	add	r2, pc, #4	; (adr r2, 800415c <HAL_RCCEx_PeriphCLKConfig+0xb8>)
 8004156:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800415a:	bf00      	nop
 800415c:	08004171 	.word	0x08004171
 8004160:	0800417f 	.word	0x0800417f
 8004164:	08004191 	.word	0x08004191
 8004168:	080041a9 	.word	0x080041a9
 800416c:	080041a9 	.word	0x080041a9
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8004170:	4b89      	ldr	r3, [pc, #548]	; (8004398 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8004172:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004174:	4a88      	ldr	r2, [pc, #544]	; (8004398 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8004176:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800417a:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 800417c:	e015      	b.n	80041aa <HAL_RCCEx_PeriphCLKConfig+0x106>

    case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI1*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 800417e:	687b      	ldr	r3, [r7, #4]
 8004180:	3304      	adds	r3, #4
 8004182:	2100      	movs	r1, #0
 8004184:	4618      	mov	r0, r3
 8004186:	f001 f945 	bl	8005414 <RCCEx_PLL2_Config>
 800418a:	4603      	mov	r3, r0
 800418c:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 800418e:	e00c      	b.n	80041aa <HAL_RCCEx_PeriphCLKConfig+0x106>

    case RCC_SAI1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI1*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 8004190:	687b      	ldr	r3, [r7, #4]
 8004192:	3324      	adds	r3, #36	; 0x24
 8004194:	2100      	movs	r1, #0
 8004196:	4618      	mov	r0, r3
 8004198:	f001 f9ee 	bl	8005578 <RCCEx_PLL3_Config>
 800419c:	4603      	mov	r3, r0
 800419e:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 80041a0:	e003      	b.n	80041aa <HAL_RCCEx_PeriphCLKConfig+0x106>
      /* HSI, HSE, or CSI oscillator is used as source of SAI1 clock */
      /* SAI1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80041a2:	2301      	movs	r3, #1
 80041a4:	75fb      	strb	r3, [r7, #23]
      break;
 80041a6:	e000      	b.n	80041aa <HAL_RCCEx_PeriphCLKConfig+0x106>
      break;
 80041a8:	bf00      	nop
    }

    if(ret == HAL_OK)
 80041aa:	7dfb      	ldrb	r3, [r7, #23]
 80041ac:	2b00      	cmp	r3, #0
 80041ae:	d109      	bne.n	80041c4 <HAL_RCCEx_PeriphCLKConfig+0x120>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 80041b0:	4b79      	ldr	r3, [pc, #484]	; (8004398 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 80041b2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80041b4:	f023 0207 	bic.w	r2, r3, #7
 80041b8:	687b      	ldr	r3, [r7, #4]
 80041ba:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80041bc:	4976      	ldr	r1, [pc, #472]	; (8004398 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 80041be:	4313      	orrs	r3, r2
 80041c0:	650b      	str	r3, [r1, #80]	; 0x50
 80041c2:	e001      	b.n	80041c8 <HAL_RCCEx_PeriphCLKConfig+0x124>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80041c4:	7dfb      	ldrb	r3, [r7, #23]
 80041c6:	75bb      	strb	r3, [r7, #22]
  }
#endif  /*SAI2B*/

#if defined(SAI4)
  /*---------------------------- SAI4A configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4A) == RCC_PERIPHCLK_SAI4A)
 80041c8:	687b      	ldr	r3, [r7, #4]
 80041ca:	681b      	ldr	r3, [r3, #0]
 80041cc:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80041d0:	2b00      	cmp	r3, #0
 80041d2:	d051      	beq.n	8004278 <HAL_RCCEx_PeriphCLKConfig+0x1d4>
  {
    switch(PeriphClkInit->Sai4AClockSelection)
 80041d4:	687b      	ldr	r3, [r7, #4]
 80041d6:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 80041da:	f5b3 0f20 	cmp.w	r3, #10485760	; 0xa00000
 80041de:	d036      	beq.n	800424e <HAL_RCCEx_PeriphCLKConfig+0x1aa>
 80041e0:	f5b3 0f20 	cmp.w	r3, #10485760	; 0xa00000
 80041e4:	d830      	bhi.n	8004248 <HAL_RCCEx_PeriphCLKConfig+0x1a4>
 80041e6:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 80041ea:	d032      	beq.n	8004252 <HAL_RCCEx_PeriphCLKConfig+0x1ae>
 80041ec:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 80041f0:	d82a      	bhi.n	8004248 <HAL_RCCEx_PeriphCLKConfig+0x1a4>
 80041f2:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 80041f6:	d02e      	beq.n	8004256 <HAL_RCCEx_PeriphCLKConfig+0x1b2>
 80041f8:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 80041fc:	d824      	bhi.n	8004248 <HAL_RCCEx_PeriphCLKConfig+0x1a4>
 80041fe:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8004202:	d018      	beq.n	8004236 <HAL_RCCEx_PeriphCLKConfig+0x192>
 8004204:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8004208:	d81e      	bhi.n	8004248 <HAL_RCCEx_PeriphCLKConfig+0x1a4>
 800420a:	2b00      	cmp	r3, #0
 800420c:	d003      	beq.n	8004216 <HAL_RCCEx_PeriphCLKConfig+0x172>
 800420e:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8004212:	d007      	beq.n	8004224 <HAL_RCCEx_PeriphCLKConfig+0x180>
 8004214:	e018      	b.n	8004248 <HAL_RCCEx_PeriphCLKConfig+0x1a4>
    {
    case RCC_SAI4ACLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8004216:	4b60      	ldr	r3, [pc, #384]	; (8004398 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8004218:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800421a:	4a5f      	ldr	r2, [pc, #380]	; (8004398 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 800421c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004220:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8004222:	e019      	b.n	8004258 <HAL_RCCEx_PeriphCLKConfig+0x1b4>

    case RCC_SAI4ACLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8004224:	687b      	ldr	r3, [r7, #4]
 8004226:	3304      	adds	r3, #4
 8004228:	2100      	movs	r1, #0
 800422a:	4618      	mov	r0, r3
 800422c:	f001 f8f2 	bl	8005414 <RCCEx_PLL2_Config>
 8004230:	4603      	mov	r3, r0
 8004232:	75fb      	strb	r3, [r7, #23]

      /* SAI2 clock source configuration done later after clock selection check */
      break;
 8004234:	e010      	b.n	8004258 <HAL_RCCEx_PeriphCLKConfig+0x1b4>

    case RCC_SAI4ACLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 8004236:	687b      	ldr	r3, [r7, #4]
 8004238:	3324      	adds	r3, #36	; 0x24
 800423a:	2100      	movs	r1, #0
 800423c:	4618      	mov	r0, r3
 800423e:	f001 f99b 	bl	8005578 <RCCEx_PLL3_Config>
 8004242:	4603      	mov	r3, r0
 8004244:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8004246:	e007      	b.n	8004258 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
      /* SAI4A clock source configuration done later after clock selection check */
      break;
#endif /* RCC_VER_3_0 */

    default:
      ret = HAL_ERROR;
 8004248:	2301      	movs	r3, #1
 800424a:	75fb      	strb	r3, [r7, #23]
      break;
 800424c:	e004      	b.n	8004258 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
      break;
 800424e:	bf00      	nop
 8004250:	e002      	b.n	8004258 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
      break;
 8004252:	bf00      	nop
 8004254:	e000      	b.n	8004258 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
      break;
 8004256:	bf00      	nop
    }

    if(ret == HAL_OK)
 8004258:	7dfb      	ldrb	r3, [r7, #23]
 800425a:	2b00      	cmp	r3, #0
 800425c:	d10a      	bne.n	8004274 <HAL_RCCEx_PeriphCLKConfig+0x1d0>
    {
      /* Set the source of SAI4A clock*/
      __HAL_RCC_SAI4A_CONFIG(PeriphClkInit->Sai4AClockSelection);
 800425e:	4b4e      	ldr	r3, [pc, #312]	; (8004398 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8004260:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004262:	f423 0260 	bic.w	r2, r3, #14680064	; 0xe00000
 8004266:	687b      	ldr	r3, [r7, #4]
 8004268:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 800426c:	494a      	ldr	r1, [pc, #296]	; (8004398 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 800426e:	4313      	orrs	r3, r2
 8004270:	658b      	str	r3, [r1, #88]	; 0x58
 8004272:	e001      	b.n	8004278 <HAL_RCCEx_PeriphCLKConfig+0x1d4>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004274:	7dfb      	ldrb	r3, [r7, #23]
 8004276:	75bb      	strb	r3, [r7, #22]
    }
  }
  /*---------------------------- SAI4B configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4B) == RCC_PERIPHCLK_SAI4B)
 8004278:	687b      	ldr	r3, [r7, #4]
 800427a:	681b      	ldr	r3, [r3, #0]
 800427c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004280:	2b00      	cmp	r3, #0
 8004282:	d051      	beq.n	8004328 <HAL_RCCEx_PeriphCLKConfig+0x284>
  {
    switch(PeriphClkInit->Sai4BClockSelection)
 8004284:	687b      	ldr	r3, [r7, #4]
 8004286:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 800428a:	f1b3 6fa0 	cmp.w	r3, #83886080	; 0x5000000
 800428e:	d036      	beq.n	80042fe <HAL_RCCEx_PeriphCLKConfig+0x25a>
 8004290:	f1b3 6fa0 	cmp.w	r3, #83886080	; 0x5000000
 8004294:	d830      	bhi.n	80042f8 <HAL_RCCEx_PeriphCLKConfig+0x254>
 8004296:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800429a:	d032      	beq.n	8004302 <HAL_RCCEx_PeriphCLKConfig+0x25e>
 800429c:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80042a0:	d82a      	bhi.n	80042f8 <HAL_RCCEx_PeriphCLKConfig+0x254>
 80042a2:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 80042a6:	d02e      	beq.n	8004306 <HAL_RCCEx_PeriphCLKConfig+0x262>
 80042a8:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 80042ac:	d824      	bhi.n	80042f8 <HAL_RCCEx_PeriphCLKConfig+0x254>
 80042ae:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80042b2:	d018      	beq.n	80042e6 <HAL_RCCEx_PeriphCLKConfig+0x242>
 80042b4:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80042b8:	d81e      	bhi.n	80042f8 <HAL_RCCEx_PeriphCLKConfig+0x254>
 80042ba:	2b00      	cmp	r3, #0
 80042bc:	d003      	beq.n	80042c6 <HAL_RCCEx_PeriphCLKConfig+0x222>
 80042be:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80042c2:	d007      	beq.n	80042d4 <HAL_RCCEx_PeriphCLKConfig+0x230>
 80042c4:	e018      	b.n	80042f8 <HAL_RCCEx_PeriphCLKConfig+0x254>
    {
    case RCC_SAI4BCLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80042c6:	4b34      	ldr	r3, [pc, #208]	; (8004398 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 80042c8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80042ca:	4a33      	ldr	r2, [pc, #204]	; (8004398 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 80042cc:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80042d0:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 80042d2:	e019      	b.n	8004308 <HAL_RCCEx_PeriphCLKConfig+0x264>

    case RCC_SAI4BCLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 80042d4:	687b      	ldr	r3, [r7, #4]
 80042d6:	3304      	adds	r3, #4
 80042d8:	2100      	movs	r1, #0
 80042da:	4618      	mov	r0, r3
 80042dc:	f001 f89a 	bl	8005414 <RCCEx_PLL2_Config>
 80042e0:	4603      	mov	r3, r0
 80042e2:	75fb      	strb	r3, [r7, #23]

      /* SAI2 clock source configuration done later after clock selection check */
      break;
 80042e4:	e010      	b.n	8004308 <HAL_RCCEx_PeriphCLKConfig+0x264>

    case RCC_SAI4BCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 80042e6:	687b      	ldr	r3, [r7, #4]
 80042e8:	3324      	adds	r3, #36	; 0x24
 80042ea:	2100      	movs	r1, #0
 80042ec:	4618      	mov	r0, r3
 80042ee:	f001 f943 	bl	8005578 <RCCEx_PLL3_Config>
 80042f2:	4603      	mov	r3, r0
 80042f4:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 80042f6:	e007      	b.n	8004308 <HAL_RCCEx_PeriphCLKConfig+0x264>
      /* SAI4B clock source configuration done later after clock selection check */
      break;
#endif /* RCC_VER_3_0 */

    default:
      ret = HAL_ERROR;
 80042f8:	2301      	movs	r3, #1
 80042fa:	75fb      	strb	r3, [r7, #23]
      break;
 80042fc:	e004      	b.n	8004308 <HAL_RCCEx_PeriphCLKConfig+0x264>
      break;
 80042fe:	bf00      	nop
 8004300:	e002      	b.n	8004308 <HAL_RCCEx_PeriphCLKConfig+0x264>
      break;
 8004302:	bf00      	nop
 8004304:	e000      	b.n	8004308 <HAL_RCCEx_PeriphCLKConfig+0x264>
      break;
 8004306:	bf00      	nop
    }

    if(ret == HAL_OK)
 8004308:	7dfb      	ldrb	r3, [r7, #23]
 800430a:	2b00      	cmp	r3, #0
 800430c:	d10a      	bne.n	8004324 <HAL_RCCEx_PeriphCLKConfig+0x280>
    {
      /* Set the source of SAI4B clock*/
      __HAL_RCC_SAI4B_CONFIG(PeriphClkInit->Sai4BClockSelection);
 800430e:	4b22      	ldr	r3, [pc, #136]	; (8004398 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8004310:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004312:	f023 62e0 	bic.w	r2, r3, #117440512	; 0x7000000
 8004316:	687b      	ldr	r3, [r7, #4]
 8004318:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 800431c:	491e      	ldr	r1, [pc, #120]	; (8004398 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 800431e:	4313      	orrs	r3, r2
 8004320:	658b      	str	r3, [r1, #88]	; 0x58
 8004322:	e001      	b.n	8004328 <HAL_RCCEx_PeriphCLKConfig+0x284>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004324:	7dfb      	ldrb	r3, [r7, #23]
 8004326:	75bb      	strb	r3, [r7, #22]
  }
#endif  /*QUADSPI*/

#if defined(OCTOSPI1) || defined(OCTOSPI2)
  /*---------------------------- OCTOSPI configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_OSPI) == RCC_PERIPHCLK_OSPI)
 8004328:	687b      	ldr	r3, [r7, #4]
 800432a:	681b      	ldr	r3, [r3, #0]
 800432c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004330:	2b00      	cmp	r3, #0
 8004332:	d035      	beq.n	80043a0 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
  {
    switch(PeriphClkInit->OspiClockSelection)
 8004334:	687b      	ldr	r3, [r7, #4]
 8004336:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004338:	2b30      	cmp	r3, #48	; 0x30
 800433a:	d01c      	beq.n	8004376 <HAL_RCCEx_PeriphCLKConfig+0x2d2>
 800433c:	2b30      	cmp	r3, #48	; 0x30
 800433e:	d817      	bhi.n	8004370 <HAL_RCCEx_PeriphCLKConfig+0x2cc>
 8004340:	2b20      	cmp	r3, #32
 8004342:	d00c      	beq.n	800435e <HAL_RCCEx_PeriphCLKConfig+0x2ba>
 8004344:	2b20      	cmp	r3, #32
 8004346:	d813      	bhi.n	8004370 <HAL_RCCEx_PeriphCLKConfig+0x2cc>
 8004348:	2b00      	cmp	r3, #0
 800434a:	d016      	beq.n	800437a <HAL_RCCEx_PeriphCLKConfig+0x2d6>
 800434c:	2b10      	cmp	r3, #16
 800434e:	d10f      	bne.n	8004370 <HAL_RCCEx_PeriphCLKConfig+0x2cc>
    {
    case RCC_OSPICLKSOURCE_PLL:      /* PLL is used as clock source for OSPI*/
      /* Enable OSPI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8004350:	4b11      	ldr	r3, [pc, #68]	; (8004398 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8004352:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004354:	4a10      	ldr	r2, [pc, #64]	; (8004398 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8004356:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800435a:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* OSPI clock source configuration done later after clock selection check */
      break;
 800435c:	e00e      	b.n	800437c <HAL_RCCEx_PeriphCLKConfig+0x2d8>

    case RCC_OSPICLKSOURCE_PLL2: /* PLL2 is used as clock source for OSPI*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 800435e:	687b      	ldr	r3, [r7, #4]
 8004360:	3304      	adds	r3, #4
 8004362:	2102      	movs	r1, #2
 8004364:	4618      	mov	r0, r3
 8004366:	f001 f855 	bl	8005414 <RCCEx_PLL2_Config>
 800436a:	4603      	mov	r3, r0
 800436c:	75fb      	strb	r3, [r7, #23]

      /* OSPI clock source configuration done later after clock selection check */
      break;
 800436e:	e005      	b.n	800437c <HAL_RCCEx_PeriphCLKConfig+0x2d8>
    case RCC_OSPICLKSOURCE_HCLK:
      /* HCLK clock selected as OSPI kernel peripheral clock */
      break;

    default:
      ret = HAL_ERROR;
 8004370:	2301      	movs	r3, #1
 8004372:	75fb      	strb	r3, [r7, #23]
      break;
 8004374:	e002      	b.n	800437c <HAL_RCCEx_PeriphCLKConfig+0x2d8>
      break;
 8004376:	bf00      	nop
 8004378:	e000      	b.n	800437c <HAL_RCCEx_PeriphCLKConfig+0x2d8>
      break;
 800437a:	bf00      	nop
    }

    if(ret == HAL_OK)
 800437c:	7dfb      	ldrb	r3, [r7, #23]
 800437e:	2b00      	cmp	r3, #0
 8004380:	d10c      	bne.n	800439c <HAL_RCCEx_PeriphCLKConfig+0x2f8>
    {
      /* Set the source of OSPI clock*/
      __HAL_RCC_OSPI_CONFIG(PeriphClkInit->OspiClockSelection);
 8004382:	4b05      	ldr	r3, [pc, #20]	; (8004398 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8004384:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004386:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 800438a:	687b      	ldr	r3, [r7, #4]
 800438c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800438e:	4902      	ldr	r1, [pc, #8]	; (8004398 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8004390:	4313      	orrs	r3, r2
 8004392:	64cb      	str	r3, [r1, #76]	; 0x4c
 8004394:	e004      	b.n	80043a0 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
 8004396:	bf00      	nop
 8004398:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 800439c:	7dfb      	ldrb	r3, [r7, #23]
 800439e:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif  /*OCTOSPI*/

  /*---------------------------- SPI1/2/3 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI123) == RCC_PERIPHCLK_SPI123)
 80043a0:	687b      	ldr	r3, [r7, #4]
 80043a2:	681b      	ldr	r3, [r3, #0]
 80043a4:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80043a8:	2b00      	cmp	r3, #0
 80043aa:	d047      	beq.n	800443c <HAL_RCCEx_PeriphCLKConfig+0x398>
  {
    switch(PeriphClkInit->Spi123ClockSelection)
 80043ac:	687b      	ldr	r3, [r7, #4]
 80043ae:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80043b0:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80043b4:	d030      	beq.n	8004418 <HAL_RCCEx_PeriphCLKConfig+0x374>
 80043b6:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80043ba:	d82a      	bhi.n	8004412 <HAL_RCCEx_PeriphCLKConfig+0x36e>
 80043bc:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 80043c0:	d02c      	beq.n	800441c <HAL_RCCEx_PeriphCLKConfig+0x378>
 80043c2:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 80043c6:	d824      	bhi.n	8004412 <HAL_RCCEx_PeriphCLKConfig+0x36e>
 80043c8:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80043cc:	d018      	beq.n	8004400 <HAL_RCCEx_PeriphCLKConfig+0x35c>
 80043ce:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80043d2:	d81e      	bhi.n	8004412 <HAL_RCCEx_PeriphCLKConfig+0x36e>
 80043d4:	2b00      	cmp	r3, #0
 80043d6:	d003      	beq.n	80043e0 <HAL_RCCEx_PeriphCLKConfig+0x33c>
 80043d8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80043dc:	d007      	beq.n	80043ee <HAL_RCCEx_PeriphCLKConfig+0x34a>
 80043de:	e018      	b.n	8004412 <HAL_RCCEx_PeriphCLKConfig+0x36e>
    {
    case RCC_SPI123CLKSOURCE_PLL:      /* PLL is used as clock source for SPI1/2/3 */
      /* Enable SPI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80043e0:	4bac      	ldr	r3, [pc, #688]	; (8004694 <HAL_RCCEx_PeriphCLKConfig+0x5f0>)
 80043e2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80043e4:	4aab      	ldr	r2, [pc, #684]	; (8004694 <HAL_RCCEx_PeriphCLKConfig+0x5f0>)
 80043e6:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80043ea:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 80043ec:	e017      	b.n	800441e <HAL_RCCEx_PeriphCLKConfig+0x37a>

    case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI1/2/3 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 80043ee:	687b      	ldr	r3, [r7, #4]
 80043f0:	3304      	adds	r3, #4
 80043f2:	2100      	movs	r1, #0
 80043f4:	4618      	mov	r0, r3
 80043f6:	f001 f80d 	bl	8005414 <RCCEx_PLL2_Config>
 80043fa:	4603      	mov	r3, r0
 80043fc:	75fb      	strb	r3, [r7, #23]

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 80043fe:	e00e      	b.n	800441e <HAL_RCCEx_PeriphCLKConfig+0x37a>

    case RCC_SPI123CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI1/2/3 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 8004400:	687b      	ldr	r3, [r7, #4]
 8004402:	3324      	adds	r3, #36	; 0x24
 8004404:	2100      	movs	r1, #0
 8004406:	4618      	mov	r0, r3
 8004408:	f001 f8b6 	bl	8005578 <RCCEx_PLL3_Config>
 800440c:	4603      	mov	r3, r0
 800440e:	75fb      	strb	r3, [r7, #23]

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 8004410:	e005      	b.n	800441e <HAL_RCCEx_PeriphCLKConfig+0x37a>
      /* HSI, HSE, or CSI oscillator is used as source of SPI1/2/3 clock */
      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8004412:	2301      	movs	r3, #1
 8004414:	75fb      	strb	r3, [r7, #23]
      break;
 8004416:	e002      	b.n	800441e <HAL_RCCEx_PeriphCLKConfig+0x37a>
      break;
 8004418:	bf00      	nop
 800441a:	e000      	b.n	800441e <HAL_RCCEx_PeriphCLKConfig+0x37a>
      break;
 800441c:	bf00      	nop
    }

    if(ret == HAL_OK)
 800441e:	7dfb      	ldrb	r3, [r7, #23]
 8004420:	2b00      	cmp	r3, #0
 8004422:	d109      	bne.n	8004438 <HAL_RCCEx_PeriphCLKConfig+0x394>
    {
      /* Set the source of SPI1/2/3 clock*/
      __HAL_RCC_SPI123_CONFIG(PeriphClkInit->Spi123ClockSelection);
 8004424:	4b9b      	ldr	r3, [pc, #620]	; (8004694 <HAL_RCCEx_PeriphCLKConfig+0x5f0>)
 8004426:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004428:	f423 42e0 	bic.w	r2, r3, #28672	; 0x7000
 800442c:	687b      	ldr	r3, [r7, #4]
 800442e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004430:	4998      	ldr	r1, [pc, #608]	; (8004694 <HAL_RCCEx_PeriphCLKConfig+0x5f0>)
 8004432:	4313      	orrs	r3, r2
 8004434:	650b      	str	r3, [r1, #80]	; 0x50
 8004436:	e001      	b.n	800443c <HAL_RCCEx_PeriphCLKConfig+0x398>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004438:	7dfb      	ldrb	r3, [r7, #23]
 800443a:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SPI4/5 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) == RCC_PERIPHCLK_SPI45)
 800443c:	687b      	ldr	r3, [r7, #4]
 800443e:	681b      	ldr	r3, [r3, #0]
 8004440:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8004444:	2b00      	cmp	r3, #0
 8004446:	d049      	beq.n	80044dc <HAL_RCCEx_PeriphCLKConfig+0x438>
  {
    switch(PeriphClkInit->Spi45ClockSelection)
 8004448:	687b      	ldr	r3, [r7, #4]
 800444a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800444c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8004450:	d02e      	beq.n	80044b0 <HAL_RCCEx_PeriphCLKConfig+0x40c>
 8004452:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8004456:	d828      	bhi.n	80044aa <HAL_RCCEx_PeriphCLKConfig+0x406>
 8004458:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 800445c:	d02a      	beq.n	80044b4 <HAL_RCCEx_PeriphCLKConfig+0x410>
 800445e:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8004462:	d822      	bhi.n	80044aa <HAL_RCCEx_PeriphCLKConfig+0x406>
 8004464:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8004468:	d026      	beq.n	80044b8 <HAL_RCCEx_PeriphCLKConfig+0x414>
 800446a:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 800446e:	d81c      	bhi.n	80044aa <HAL_RCCEx_PeriphCLKConfig+0x406>
 8004470:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8004474:	d010      	beq.n	8004498 <HAL_RCCEx_PeriphCLKConfig+0x3f4>
 8004476:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800447a:	d816      	bhi.n	80044aa <HAL_RCCEx_PeriphCLKConfig+0x406>
 800447c:	2b00      	cmp	r3, #0
 800447e:	d01d      	beq.n	80044bc <HAL_RCCEx_PeriphCLKConfig+0x418>
 8004480:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004484:	d111      	bne.n	80044aa <HAL_RCCEx_PeriphCLKConfig+0x406>
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;

    case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI4/5 */

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8004486:	687b      	ldr	r3, [r7, #4]
 8004488:	3304      	adds	r3, #4
 800448a:	2101      	movs	r1, #1
 800448c:	4618      	mov	r0, r3
 800448e:	f000 ffc1 	bl	8005414 <RCCEx_PLL2_Config>
 8004492:	4603      	mov	r3, r0
 8004494:	75fb      	strb	r3, [r7, #23]

      /* SPI4/5 clock source configuration done later after clock selection check */
      break;
 8004496:	e012      	b.n	80044be <HAL_RCCEx_PeriphCLKConfig+0x41a>
    case RCC_SPI45CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI4/5 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8004498:	687b      	ldr	r3, [r7, #4]
 800449a:	3324      	adds	r3, #36	; 0x24
 800449c:	2101      	movs	r1, #1
 800449e:	4618      	mov	r0, r3
 80044a0:	f001 f86a 	bl	8005578 <RCCEx_PLL3_Config>
 80044a4:	4603      	mov	r3, r0
 80044a6:	75fb      	strb	r3, [r7, #23]
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;
 80044a8:	e009      	b.n	80044be <HAL_RCCEx_PeriphCLKConfig+0x41a>
      /* HSE,  oscillator is used as source of SPI4/5 clock */
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80044aa:	2301      	movs	r3, #1
 80044ac:	75fb      	strb	r3, [r7, #23]
      break;
 80044ae:	e006      	b.n	80044be <HAL_RCCEx_PeriphCLKConfig+0x41a>
      break;
 80044b0:	bf00      	nop
 80044b2:	e004      	b.n	80044be <HAL_RCCEx_PeriphCLKConfig+0x41a>
      break;
 80044b4:	bf00      	nop
 80044b6:	e002      	b.n	80044be <HAL_RCCEx_PeriphCLKConfig+0x41a>
      break;
 80044b8:	bf00      	nop
 80044ba:	e000      	b.n	80044be <HAL_RCCEx_PeriphCLKConfig+0x41a>
      break;
 80044bc:	bf00      	nop
    }

    if(ret == HAL_OK)
 80044be:	7dfb      	ldrb	r3, [r7, #23]
 80044c0:	2b00      	cmp	r3, #0
 80044c2:	d109      	bne.n	80044d8 <HAL_RCCEx_PeriphCLKConfig+0x434>
    {
      /* Set the source of SPI4/5 clock*/
      __HAL_RCC_SPI45_CONFIG(PeriphClkInit->Spi45ClockSelection);
 80044c4:	4b73      	ldr	r3, [pc, #460]	; (8004694 <HAL_RCCEx_PeriphCLKConfig+0x5f0>)
 80044c6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80044c8:	f423 22e0 	bic.w	r2, r3, #458752	; 0x70000
 80044cc:	687b      	ldr	r3, [r7, #4]
 80044ce:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80044d0:	4970      	ldr	r1, [pc, #448]	; (8004694 <HAL_RCCEx_PeriphCLKConfig+0x5f0>)
 80044d2:	4313      	orrs	r3, r2
 80044d4:	650b      	str	r3, [r1, #80]	; 0x50
 80044d6:	e001      	b.n	80044dc <HAL_RCCEx_PeriphCLKConfig+0x438>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80044d8:	7dfb      	ldrb	r3, [r7, #23]
 80044da:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SPI6 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 80044dc:	687b      	ldr	r3, [r7, #4]
 80044de:	681b      	ldr	r3, [r3, #0]
 80044e0:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80044e4:	2b00      	cmp	r3, #0
 80044e6:	d04b      	beq.n	8004580 <HAL_RCCEx_PeriphCLKConfig+0x4dc>
  {
    switch(PeriphClkInit->Spi6ClockSelection)
 80044e8:	687b      	ldr	r3, [r7, #4]
 80044ea:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 80044ee:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80044f2:	d02e      	beq.n	8004552 <HAL_RCCEx_PeriphCLKConfig+0x4ae>
 80044f4:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80044f8:	d828      	bhi.n	800454c <HAL_RCCEx_PeriphCLKConfig+0x4a8>
 80044fa:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80044fe:	d02a      	beq.n	8004556 <HAL_RCCEx_PeriphCLKConfig+0x4b2>
 8004500:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004504:	d822      	bhi.n	800454c <HAL_RCCEx_PeriphCLKConfig+0x4a8>
 8004506:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 800450a:	d026      	beq.n	800455a <HAL_RCCEx_PeriphCLKConfig+0x4b6>
 800450c:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8004510:	d81c      	bhi.n	800454c <HAL_RCCEx_PeriphCLKConfig+0x4a8>
 8004512:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8004516:	d010      	beq.n	800453a <HAL_RCCEx_PeriphCLKConfig+0x496>
 8004518:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800451c:	d816      	bhi.n	800454c <HAL_RCCEx_PeriphCLKConfig+0x4a8>
 800451e:	2b00      	cmp	r3, #0
 8004520:	d01d      	beq.n	800455e <HAL_RCCEx_PeriphCLKConfig+0x4ba>
 8004522:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8004526:	d111      	bne.n	800454c <HAL_RCCEx_PeriphCLKConfig+0x4a8>
      /* SPI6 clock source configuration done later after clock selection check */
      break;

    case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI6*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8004528:	687b      	ldr	r3, [r7, #4]
 800452a:	3304      	adds	r3, #4
 800452c:	2101      	movs	r1, #1
 800452e:	4618      	mov	r0, r3
 8004530:	f000 ff70 	bl	8005414 <RCCEx_PLL2_Config>
 8004534:	4603      	mov	r3, r0
 8004536:	75fb      	strb	r3, [r7, #23]

      /* SPI6 clock source configuration done later after clock selection check */
      break;
 8004538:	e012      	b.n	8004560 <HAL_RCCEx_PeriphCLKConfig+0x4bc>
    case RCC_SPI6CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI6*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 800453a:	687b      	ldr	r3, [r7, #4]
 800453c:	3324      	adds	r3, #36	; 0x24
 800453e:	2101      	movs	r1, #1
 8004540:	4618      	mov	r0, r3
 8004542:	f001 f819 	bl	8005578 <RCCEx_PLL3_Config>
 8004546:	4603      	mov	r3, r0
 8004548:	75fb      	strb	r3, [r7, #23]
      /* SPI6 clock source configuration done later after clock selection check */
      break;
 800454a:	e009      	b.n	8004560 <HAL_RCCEx_PeriphCLKConfig+0x4bc>
      /* SPI6 clock source configuration done later after clock selection check */
      break;
#endif

    default:
      ret = HAL_ERROR;
 800454c:	2301      	movs	r3, #1
 800454e:	75fb      	strb	r3, [r7, #23]
      break;
 8004550:	e006      	b.n	8004560 <HAL_RCCEx_PeriphCLKConfig+0x4bc>
      break;
 8004552:	bf00      	nop
 8004554:	e004      	b.n	8004560 <HAL_RCCEx_PeriphCLKConfig+0x4bc>
      break;
 8004556:	bf00      	nop
 8004558:	e002      	b.n	8004560 <HAL_RCCEx_PeriphCLKConfig+0x4bc>
      break;
 800455a:	bf00      	nop
 800455c:	e000      	b.n	8004560 <HAL_RCCEx_PeriphCLKConfig+0x4bc>
      break;
 800455e:	bf00      	nop
    }

    if(ret == HAL_OK)
 8004560:	7dfb      	ldrb	r3, [r7, #23]
 8004562:	2b00      	cmp	r3, #0
 8004564:	d10a      	bne.n	800457c <HAL_RCCEx_PeriphCLKConfig+0x4d8>
    {
      /* Set the source of SPI6 clock*/
      __HAL_RCC_SPI6_CONFIG(PeriphClkInit->Spi6ClockSelection);
 8004566:	4b4b      	ldr	r3, [pc, #300]	; (8004694 <HAL_RCCEx_PeriphCLKConfig+0x5f0>)
 8004568:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800456a:	f023 42e0 	bic.w	r2, r3, #1879048192	; 0x70000000
 800456e:	687b      	ldr	r3, [r7, #4]
 8004570:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 8004574:	4947      	ldr	r1, [pc, #284]	; (8004694 <HAL_RCCEx_PeriphCLKConfig+0x5f0>)
 8004576:	4313      	orrs	r3, r2
 8004578:	658b      	str	r3, [r1, #88]	; 0x58
 800457a:	e001      	b.n	8004580 <HAL_RCCEx_PeriphCLKConfig+0x4dc>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800457c:	7dfb      	ldrb	r3, [r7, #23]
 800457e:	75bb      	strb	r3, [r7, #22]
  }
#endif /*DSI*/

#if defined(FDCAN1) || defined(FDCAN2)
  /*---------------------------- FDCAN configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8004580:	687b      	ldr	r3, [r7, #4]
 8004582:	681b      	ldr	r3, [r3, #0]
 8004584:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8004588:	2b00      	cmp	r3, #0
 800458a:	d02f      	beq.n	80045ec <HAL_RCCEx_PeriphCLKConfig+0x548>
  {
    switch(PeriphClkInit->FdcanClockSelection)
 800458c:	687b      	ldr	r3, [r7, #4]
 800458e:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8004590:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8004594:	d00e      	beq.n	80045b4 <HAL_RCCEx_PeriphCLKConfig+0x510>
 8004596:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800459a:	d814      	bhi.n	80045c6 <HAL_RCCEx_PeriphCLKConfig+0x522>
 800459c:	2b00      	cmp	r3, #0
 800459e:	d015      	beq.n	80045cc <HAL_RCCEx_PeriphCLKConfig+0x528>
 80045a0:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80045a4:	d10f      	bne.n	80045c6 <HAL_RCCEx_PeriphCLKConfig+0x522>
    {
    case RCC_FDCANCLKSOURCE_PLL:      /* PLL is used as clock source for FDCAN*/
      /* Enable FDCAN Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80045a6:	4b3b      	ldr	r3, [pc, #236]	; (8004694 <HAL_RCCEx_PeriphCLKConfig+0x5f0>)
 80045a8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80045aa:	4a3a      	ldr	r2, [pc, #232]	; (8004694 <HAL_RCCEx_PeriphCLKConfig+0x5f0>)
 80045ac:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80045b0:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* FDCAN clock source configuration done later after clock selection check */
      break;
 80045b2:	e00c      	b.n	80045ce <HAL_RCCEx_PeriphCLKConfig+0x52a>

    case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is used as clock source for FDCAN*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 80045b4:	687b      	ldr	r3, [r7, #4]
 80045b6:	3304      	adds	r3, #4
 80045b8:	2101      	movs	r1, #1
 80045ba:	4618      	mov	r0, r3
 80045bc:	f000 ff2a 	bl	8005414 <RCCEx_PLL2_Config>
 80045c0:	4603      	mov	r3, r0
 80045c2:	75fb      	strb	r3, [r7, #23]

      /* FDCAN clock source configuration done later after clock selection check */
      break;
 80045c4:	e003      	b.n	80045ce <HAL_RCCEx_PeriphCLKConfig+0x52a>
      /* HSE is used as clock source for FDCAN*/
      /* FDCAN clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80045c6:	2301      	movs	r3, #1
 80045c8:	75fb      	strb	r3, [r7, #23]
      break;
 80045ca:	e000      	b.n	80045ce <HAL_RCCEx_PeriphCLKConfig+0x52a>
      break;
 80045cc:	bf00      	nop
    }

    if(ret == HAL_OK)
 80045ce:	7dfb      	ldrb	r3, [r7, #23]
 80045d0:	2b00      	cmp	r3, #0
 80045d2:	d109      	bne.n	80045e8 <HAL_RCCEx_PeriphCLKConfig+0x544>
    {
      /* Set the source of FDCAN clock*/
      __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 80045d4:	4b2f      	ldr	r3, [pc, #188]	; (8004694 <HAL_RCCEx_PeriphCLKConfig+0x5f0>)
 80045d6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80045d8:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 80045dc:	687b      	ldr	r3, [r7, #4]
 80045de:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80045e0:	492c      	ldr	r1, [pc, #176]	; (8004694 <HAL_RCCEx_PeriphCLKConfig+0x5f0>)
 80045e2:	4313      	orrs	r3, r2
 80045e4:	650b      	str	r3, [r1, #80]	; 0x50
 80045e6:	e001      	b.n	80045ec <HAL_RCCEx_PeriphCLKConfig+0x548>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80045e8:	7dfb      	ldrb	r3, [r7, #23]
 80045ea:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif /*FDCAN1 || FDCAN2*/

  /*---------------------------- FMC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
 80045ec:	687b      	ldr	r3, [r7, #4]
 80045ee:	681b      	ldr	r3, [r3, #0]
 80045f0:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80045f4:	2b00      	cmp	r3, #0
 80045f6:	d032      	beq.n	800465e <HAL_RCCEx_PeriphCLKConfig+0x5ba>
  {
    switch(PeriphClkInit->FmcClockSelection)
 80045f8:	687b      	ldr	r3, [r7, #4]
 80045fa:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80045fc:	2b03      	cmp	r3, #3
 80045fe:	d81b      	bhi.n	8004638 <HAL_RCCEx_PeriphCLKConfig+0x594>
 8004600:	a201      	add	r2, pc, #4	; (adr r2, 8004608 <HAL_RCCEx_PeriphCLKConfig+0x564>)
 8004602:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004606:	bf00      	nop
 8004608:	0800463f 	.word	0x0800463f
 800460c:	08004619 	.word	0x08004619
 8004610:	08004627 	.word	0x08004627
 8004614:	0800463f 	.word	0x0800463f
    {
    case RCC_FMCCLKSOURCE_PLL:      /* PLL is used as clock source for FMC*/
      /* Enable FMC Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8004618:	4b1e      	ldr	r3, [pc, #120]	; (8004694 <HAL_RCCEx_PeriphCLKConfig+0x5f0>)
 800461a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800461c:	4a1d      	ldr	r2, [pc, #116]	; (8004694 <HAL_RCCEx_PeriphCLKConfig+0x5f0>)
 800461e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004622:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* FMC clock source configuration done later after clock selection check */
      break;
 8004624:	e00c      	b.n	8004640 <HAL_RCCEx_PeriphCLKConfig+0x59c>

    case RCC_FMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for FMC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 8004626:	687b      	ldr	r3, [r7, #4]
 8004628:	3304      	adds	r3, #4
 800462a:	2102      	movs	r1, #2
 800462c:	4618      	mov	r0, r3
 800462e:	f000 fef1 	bl	8005414 <RCCEx_PLL2_Config>
 8004632:	4603      	mov	r3, r0
 8004634:	75fb      	strb	r3, [r7, #23]

      /* FMC clock source configuration done later after clock selection check */
      break;
 8004636:	e003      	b.n	8004640 <HAL_RCCEx_PeriphCLKConfig+0x59c>
    case RCC_FMCCLKSOURCE_HCLK:
      /* D1/CD HCLK  clock selected as FMC kernel peripheral clock */
      break;

    default:
      ret = HAL_ERROR;
 8004638:	2301      	movs	r3, #1
 800463a:	75fb      	strb	r3, [r7, #23]
      break;
 800463c:	e000      	b.n	8004640 <HAL_RCCEx_PeriphCLKConfig+0x59c>
      break;
 800463e:	bf00      	nop
    }

    if(ret == HAL_OK)
 8004640:	7dfb      	ldrb	r3, [r7, #23]
 8004642:	2b00      	cmp	r3, #0
 8004644:	d109      	bne.n	800465a <HAL_RCCEx_PeriphCLKConfig+0x5b6>
    {
      /* Set the source of FMC clock*/
      __HAL_RCC_FMC_CONFIG(PeriphClkInit->FmcClockSelection);
 8004646:	4b13      	ldr	r3, [pc, #76]	; (8004694 <HAL_RCCEx_PeriphCLKConfig+0x5f0>)
 8004648:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800464a:	f023 0203 	bic.w	r2, r3, #3
 800464e:	687b      	ldr	r3, [r7, #4]
 8004650:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004652:	4910      	ldr	r1, [pc, #64]	; (8004694 <HAL_RCCEx_PeriphCLKConfig+0x5f0>)
 8004654:	4313      	orrs	r3, r2
 8004656:	64cb      	str	r3, [r1, #76]	; 0x4c
 8004658:	e001      	b.n	800465e <HAL_RCCEx_PeriphCLKConfig+0x5ba>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800465a:	7dfb      	ldrb	r3, [r7, #23]
 800465c:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 800465e:	687b      	ldr	r3, [r7, #4]
 8004660:	681b      	ldr	r3, [r3, #0]
 8004662:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004666:	2b00      	cmp	r3, #0
 8004668:	f000 808a 	beq.w	8004780 <HAL_RCCEx_PeriphCLKConfig+0x6dc>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800466c:	4b0a      	ldr	r3, [pc, #40]	; (8004698 <HAL_RCCEx_PeriphCLKConfig+0x5f4>)
 800466e:	681b      	ldr	r3, [r3, #0]
 8004670:	4a09      	ldr	r2, [pc, #36]	; (8004698 <HAL_RCCEx_PeriphCLKConfig+0x5f4>)
 8004672:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004676:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8004678:	f7fd f83e 	bl	80016f8 <HAL_GetTick>
 800467c:	6138      	str	r0, [r7, #16]

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800467e:	e00d      	b.n	800469c <HAL_RCCEx_PeriphCLKConfig+0x5f8>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004680:	f7fd f83a 	bl	80016f8 <HAL_GetTick>
 8004684:	4602      	mov	r2, r0
 8004686:	693b      	ldr	r3, [r7, #16]
 8004688:	1ad3      	subs	r3, r2, r3
 800468a:	2b64      	cmp	r3, #100	; 0x64
 800468c:	d906      	bls.n	800469c <HAL_RCCEx_PeriphCLKConfig+0x5f8>
      {
        ret = HAL_TIMEOUT;
 800468e:	2303      	movs	r3, #3
 8004690:	75fb      	strb	r3, [r7, #23]
        break;
 8004692:	e009      	b.n	80046a8 <HAL_RCCEx_PeriphCLKConfig+0x604>
 8004694:	58024400 	.word	0x58024400
 8004698:	58024800 	.word	0x58024800
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800469c:	4bb9      	ldr	r3, [pc, #740]	; (8004984 <HAL_RCCEx_PeriphCLKConfig+0x8e0>)
 800469e:	681b      	ldr	r3, [r3, #0]
 80046a0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80046a4:	2b00      	cmp	r3, #0
 80046a6:	d0eb      	beq.n	8004680 <HAL_RCCEx_PeriphCLKConfig+0x5dc>
      }
    }

    if(ret == HAL_OK)
 80046a8:	7dfb      	ldrb	r3, [r7, #23]
 80046aa:	2b00      	cmp	r3, #0
 80046ac:	d166      	bne.n	800477c <HAL_RCCEx_PeriphCLKConfig+0x6d8>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if((RCC->BDCR & RCC_BDCR_RTCSEL) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL))
 80046ae:	4bb6      	ldr	r3, [pc, #728]	; (8004988 <HAL_RCCEx_PeriphCLKConfig+0x8e4>)
 80046b0:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 80046b2:	687b      	ldr	r3, [r7, #4]
 80046b4:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 80046b8:	4053      	eors	r3, r2
 80046ba:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80046be:	2b00      	cmp	r3, #0
 80046c0:	d013      	beq.n	80046ea <HAL_RCCEx_PeriphCLKConfig+0x646>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 80046c2:	4bb1      	ldr	r3, [pc, #708]	; (8004988 <HAL_RCCEx_PeriphCLKConfig+0x8e4>)
 80046c4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80046c6:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80046ca:	60fb      	str	r3, [r7, #12]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 80046cc:	4bae      	ldr	r3, [pc, #696]	; (8004988 <HAL_RCCEx_PeriphCLKConfig+0x8e4>)
 80046ce:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80046d0:	4aad      	ldr	r2, [pc, #692]	; (8004988 <HAL_RCCEx_PeriphCLKConfig+0x8e4>)
 80046d2:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80046d6:	6713      	str	r3, [r2, #112]	; 0x70
        __HAL_RCC_BACKUPRESET_RELEASE();
 80046d8:	4bab      	ldr	r3, [pc, #684]	; (8004988 <HAL_RCCEx_PeriphCLKConfig+0x8e4>)
 80046da:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80046dc:	4aaa      	ldr	r2, [pc, #680]	; (8004988 <HAL_RCCEx_PeriphCLKConfig+0x8e4>)
 80046de:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80046e2:	6713      	str	r3, [r2, #112]	; 0x70
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpreg;
 80046e4:	4aa8      	ldr	r2, [pc, #672]	; (8004988 <HAL_RCCEx_PeriphCLKConfig+0x8e4>)
 80046e6:	68fb      	ldr	r3, [r7, #12]
 80046e8:	6713      	str	r3, [r2, #112]	; 0x70
      }

      /* If LSE is selected as RTC clock source (and enabled prior to Backup Domain reset), wait for LSE reactivation */
      if(PeriphClkInit->RTCClockSelection == RCC_RTCCLKSOURCE_LSE)
 80046ea:	687b      	ldr	r3, [r7, #4]
 80046ec:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 80046f0:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80046f4:	d115      	bne.n	8004722 <HAL_RCCEx_PeriphCLKConfig+0x67e>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80046f6:	f7fc ffff 	bl	80016f8 <HAL_GetTick>
 80046fa:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80046fc:	e00b      	b.n	8004716 <HAL_RCCEx_PeriphCLKConfig+0x672>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80046fe:	f7fc fffb 	bl	80016f8 <HAL_GetTick>
 8004702:	4602      	mov	r2, r0
 8004704:	693b      	ldr	r3, [r7, #16]
 8004706:	1ad3      	subs	r3, r2, r3
 8004708:	f241 3288 	movw	r2, #5000	; 0x1388
 800470c:	4293      	cmp	r3, r2
 800470e:	d902      	bls.n	8004716 <HAL_RCCEx_PeriphCLKConfig+0x672>
          {
            ret = HAL_TIMEOUT;
 8004710:	2303      	movs	r3, #3
 8004712:	75fb      	strb	r3, [r7, #23]
            break;
 8004714:	e005      	b.n	8004722 <HAL_RCCEx_PeriphCLKConfig+0x67e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8004716:	4b9c      	ldr	r3, [pc, #624]	; (8004988 <HAL_RCCEx_PeriphCLKConfig+0x8e4>)
 8004718:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800471a:	f003 0302 	and.w	r3, r3, #2
 800471e:	2b00      	cmp	r3, #0
 8004720:	d0ed      	beq.n	80046fe <HAL_RCCEx_PeriphCLKConfig+0x65a>
          }
        }
      }

      if(ret == HAL_OK)
 8004722:	7dfb      	ldrb	r3, [r7, #23]
 8004724:	2b00      	cmp	r3, #0
 8004726:	d126      	bne.n	8004776 <HAL_RCCEx_PeriphCLKConfig+0x6d2>
      {
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8004728:	687b      	ldr	r3, [r7, #4]
 800472a:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 800472e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004732:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8004736:	d10d      	bne.n	8004754 <HAL_RCCEx_PeriphCLKConfig+0x6b0>
 8004738:	4b93      	ldr	r3, [pc, #588]	; (8004988 <HAL_RCCEx_PeriphCLKConfig+0x8e4>)
 800473a:	691b      	ldr	r3, [r3, #16]
 800473c:	f423 527c 	bic.w	r2, r3, #16128	; 0x3f00
 8004740:	687b      	ldr	r3, [r7, #4]
 8004742:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 8004746:	0919      	lsrs	r1, r3, #4
 8004748:	4b90      	ldr	r3, [pc, #576]	; (800498c <HAL_RCCEx_PeriphCLKConfig+0x8e8>)
 800474a:	400b      	ands	r3, r1
 800474c:	498e      	ldr	r1, [pc, #568]	; (8004988 <HAL_RCCEx_PeriphCLKConfig+0x8e4>)
 800474e:	4313      	orrs	r3, r2
 8004750:	610b      	str	r3, [r1, #16]
 8004752:	e005      	b.n	8004760 <HAL_RCCEx_PeriphCLKConfig+0x6bc>
 8004754:	4b8c      	ldr	r3, [pc, #560]	; (8004988 <HAL_RCCEx_PeriphCLKConfig+0x8e4>)
 8004756:	691b      	ldr	r3, [r3, #16]
 8004758:	4a8b      	ldr	r2, [pc, #556]	; (8004988 <HAL_RCCEx_PeriphCLKConfig+0x8e4>)
 800475a:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 800475e:	6113      	str	r3, [r2, #16]
 8004760:	4b89      	ldr	r3, [pc, #548]	; (8004988 <HAL_RCCEx_PeriphCLKConfig+0x8e4>)
 8004762:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8004764:	687b      	ldr	r3, [r7, #4]
 8004766:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 800476a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800476e:	4986      	ldr	r1, [pc, #536]	; (8004988 <HAL_RCCEx_PeriphCLKConfig+0x8e4>)
 8004770:	4313      	orrs	r3, r2
 8004772:	670b      	str	r3, [r1, #112]	; 0x70
 8004774:	e004      	b.n	8004780 <HAL_RCCEx_PeriphCLKConfig+0x6dc>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8004776:	7dfb      	ldrb	r3, [r7, #23]
 8004778:	75bb      	strb	r3, [r7, #22]
 800477a:	e001      	b.n	8004780 <HAL_RCCEx_PeriphCLKConfig+0x6dc>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 800477c:	7dfb      	ldrb	r3, [r7, #23]
 800477e:	75bb      	strb	r3, [r7, #22]
    }
  }


  /*-------------------------- USART1/6 configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
 8004780:	687b      	ldr	r3, [r7, #4]
 8004782:	681b      	ldr	r3, [r3, #0]
 8004784:	f003 0301 	and.w	r3, r3, #1
 8004788:	2b00      	cmp	r3, #0
 800478a:	d07e      	beq.n	800488a <HAL_RCCEx_PeriphCLKConfig+0x7e6>
  {
    switch(PeriphClkInit->Usart16ClockSelection)
 800478c:	687b      	ldr	r3, [r7, #4]
 800478e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004790:	2b28      	cmp	r3, #40	; 0x28
 8004792:	d867      	bhi.n	8004864 <HAL_RCCEx_PeriphCLKConfig+0x7c0>
 8004794:	a201      	add	r2, pc, #4	; (adr r2, 800479c <HAL_RCCEx_PeriphCLKConfig+0x6f8>)
 8004796:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800479a:	bf00      	nop
 800479c:	0800486b 	.word	0x0800486b
 80047a0:	08004865 	.word	0x08004865
 80047a4:	08004865 	.word	0x08004865
 80047a8:	08004865 	.word	0x08004865
 80047ac:	08004865 	.word	0x08004865
 80047b0:	08004865 	.word	0x08004865
 80047b4:	08004865 	.word	0x08004865
 80047b8:	08004865 	.word	0x08004865
 80047bc:	08004841 	.word	0x08004841
 80047c0:	08004865 	.word	0x08004865
 80047c4:	08004865 	.word	0x08004865
 80047c8:	08004865 	.word	0x08004865
 80047cc:	08004865 	.word	0x08004865
 80047d0:	08004865 	.word	0x08004865
 80047d4:	08004865 	.word	0x08004865
 80047d8:	08004865 	.word	0x08004865
 80047dc:	08004853 	.word	0x08004853
 80047e0:	08004865 	.word	0x08004865
 80047e4:	08004865 	.word	0x08004865
 80047e8:	08004865 	.word	0x08004865
 80047ec:	08004865 	.word	0x08004865
 80047f0:	08004865 	.word	0x08004865
 80047f4:	08004865 	.word	0x08004865
 80047f8:	08004865 	.word	0x08004865
 80047fc:	0800486b 	.word	0x0800486b
 8004800:	08004865 	.word	0x08004865
 8004804:	08004865 	.word	0x08004865
 8004808:	08004865 	.word	0x08004865
 800480c:	08004865 	.word	0x08004865
 8004810:	08004865 	.word	0x08004865
 8004814:	08004865 	.word	0x08004865
 8004818:	08004865 	.word	0x08004865
 800481c:	0800486b 	.word	0x0800486b
 8004820:	08004865 	.word	0x08004865
 8004824:	08004865 	.word	0x08004865
 8004828:	08004865 	.word	0x08004865
 800482c:	08004865 	.word	0x08004865
 8004830:	08004865 	.word	0x08004865
 8004834:	08004865 	.word	0x08004865
 8004838:	08004865 	.word	0x08004865
 800483c:	0800486b 	.word	0x0800486b
    case RCC_USART16CLKSOURCE_PCLK2: /* CD/D2 PCLK2 as clock source for USART1/6 */
      /* USART1/6 clock source configuration done later after clock selection check */
      break;

    case RCC_USART16CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART1/6 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8004840:	687b      	ldr	r3, [r7, #4]
 8004842:	3304      	adds	r3, #4
 8004844:	2101      	movs	r1, #1
 8004846:	4618      	mov	r0, r3
 8004848:	f000 fde4 	bl	8005414 <RCCEx_PLL2_Config>
 800484c:	4603      	mov	r3, r0
 800484e:	75fb      	strb	r3, [r7, #23]
      /* USART1/6 clock source configuration done later after clock selection check */
      break;
 8004850:	e00c      	b.n	800486c <HAL_RCCEx_PeriphCLKConfig+0x7c8>

    case RCC_USART16CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART1/6 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8004852:	687b      	ldr	r3, [r7, #4]
 8004854:	3324      	adds	r3, #36	; 0x24
 8004856:	2101      	movs	r1, #1
 8004858:	4618      	mov	r0, r3
 800485a:	f000 fe8d 	bl	8005578 <RCCEx_PLL3_Config>
 800485e:	4603      	mov	r3, r0
 8004860:	75fb      	strb	r3, [r7, #23]
      /* USART1/6 clock source configuration done later after clock selection check */
      break;
 8004862:	e003      	b.n	800486c <HAL_RCCEx_PeriphCLKConfig+0x7c8>
      /* LSE,  oscillator is used as source of USART1/6 clock */
      /* USART1/6 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8004864:	2301      	movs	r3, #1
 8004866:	75fb      	strb	r3, [r7, #23]
      break;
 8004868:	e000      	b.n	800486c <HAL_RCCEx_PeriphCLKConfig+0x7c8>
      break;
 800486a:	bf00      	nop
    }

    if(ret == HAL_OK)
 800486c:	7dfb      	ldrb	r3, [r7, #23]
 800486e:	2b00      	cmp	r3, #0
 8004870:	d109      	bne.n	8004886 <HAL_RCCEx_PeriphCLKConfig+0x7e2>
    {
      /* Set the source of USART1/6 clock */
      __HAL_RCC_USART16_CONFIG(PeriphClkInit->Usart16ClockSelection);
 8004872:	4b45      	ldr	r3, [pc, #276]	; (8004988 <HAL_RCCEx_PeriphCLKConfig+0x8e4>)
 8004874:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004876:	f023 0238 	bic.w	r2, r3, #56	; 0x38
 800487a:	687b      	ldr	r3, [r7, #4]
 800487c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800487e:	4942      	ldr	r1, [pc, #264]	; (8004988 <HAL_RCCEx_PeriphCLKConfig+0x8e4>)
 8004880:	4313      	orrs	r3, r2
 8004882:	654b      	str	r3, [r1, #84]	; 0x54
 8004884:	e001      	b.n	800488a <HAL_RCCEx_PeriphCLKConfig+0x7e6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004886:	7dfb      	ldrb	r3, [r7, #23]
 8004888:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*-------------------------- USART2/3/4/5/7/8 Configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
 800488a:	687b      	ldr	r3, [r7, #4]
 800488c:	681b      	ldr	r3, [r3, #0]
 800488e:	f003 0302 	and.w	r3, r3, #2
 8004892:	2b00      	cmp	r3, #0
 8004894:	d037      	beq.n	8004906 <HAL_RCCEx_PeriphCLKConfig+0x862>
  {
    switch(PeriphClkInit->Usart234578ClockSelection)
 8004896:	687b      	ldr	r3, [r7, #4]
 8004898:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800489a:	2b05      	cmp	r3, #5
 800489c:	d820      	bhi.n	80048e0 <HAL_RCCEx_PeriphCLKConfig+0x83c>
 800489e:	a201      	add	r2, pc, #4	; (adr r2, 80048a4 <HAL_RCCEx_PeriphCLKConfig+0x800>)
 80048a0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80048a4:	080048e7 	.word	0x080048e7
 80048a8:	080048bd 	.word	0x080048bd
 80048ac:	080048cf 	.word	0x080048cf
 80048b0:	080048e7 	.word	0x080048e7
 80048b4:	080048e7 	.word	0x080048e7
 80048b8:	080048e7 	.word	0x080048e7
    case RCC_USART234578CLKSOURCE_PCLK1: /* CD/D2 PCLK1 as clock source for USART2/3/4/5/7/8 */
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;

    case RCC_USART234578CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART2/3/4/5/7/8 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 80048bc:	687b      	ldr	r3, [r7, #4]
 80048be:	3304      	adds	r3, #4
 80048c0:	2101      	movs	r1, #1
 80048c2:	4618      	mov	r0, r3
 80048c4:	f000 fda6 	bl	8005414 <RCCEx_PLL2_Config>
 80048c8:	4603      	mov	r3, r0
 80048ca:	75fb      	strb	r3, [r7, #23]
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;
 80048cc:	e00c      	b.n	80048e8 <HAL_RCCEx_PeriphCLKConfig+0x844>

    case RCC_USART234578CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART2/3/4/5/7/8 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 80048ce:	687b      	ldr	r3, [r7, #4]
 80048d0:	3324      	adds	r3, #36	; 0x24
 80048d2:	2101      	movs	r1, #1
 80048d4:	4618      	mov	r0, r3
 80048d6:	f000 fe4f 	bl	8005578 <RCCEx_PLL3_Config>
 80048da:	4603      	mov	r3, r0
 80048dc:	75fb      	strb	r3, [r7, #23]
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;
 80048de:	e003      	b.n	80048e8 <HAL_RCCEx_PeriphCLKConfig+0x844>
      /* LSE,  oscillator is used as source of USART2/3/4/5/7/8 clock */
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80048e0:	2301      	movs	r3, #1
 80048e2:	75fb      	strb	r3, [r7, #23]
      break;
 80048e4:	e000      	b.n	80048e8 <HAL_RCCEx_PeriphCLKConfig+0x844>
      break;
 80048e6:	bf00      	nop
    }

    if(ret == HAL_OK)
 80048e8:	7dfb      	ldrb	r3, [r7, #23]
 80048ea:	2b00      	cmp	r3, #0
 80048ec:	d109      	bne.n	8004902 <HAL_RCCEx_PeriphCLKConfig+0x85e>
    {
      /* Set the source of USART2/3/4/5/7/8 clock */
      __HAL_RCC_USART234578_CONFIG(PeriphClkInit->Usart234578ClockSelection);
 80048ee:	4b26      	ldr	r3, [pc, #152]	; (8004988 <HAL_RCCEx_PeriphCLKConfig+0x8e4>)
 80048f0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80048f2:	f023 0207 	bic.w	r2, r3, #7
 80048f6:	687b      	ldr	r3, [r7, #4]
 80048f8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80048fa:	4923      	ldr	r1, [pc, #140]	; (8004988 <HAL_RCCEx_PeriphCLKConfig+0x8e4>)
 80048fc:	4313      	orrs	r3, r2
 80048fe:	654b      	str	r3, [r1, #84]	; 0x54
 8004900:	e001      	b.n	8004906 <HAL_RCCEx_PeriphCLKConfig+0x862>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004902:	7dfb      	ldrb	r3, [r7, #23]
 8004904:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*-------------------------- LPUART1 Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8004906:	687b      	ldr	r3, [r7, #4]
 8004908:	681b      	ldr	r3, [r3, #0]
 800490a:	f003 0304 	and.w	r3, r3, #4
 800490e:	2b00      	cmp	r3, #0
 8004910:	d040      	beq.n	8004994 <HAL_RCCEx_PeriphCLKConfig+0x8f0>
  {
    switch(PeriphClkInit->Lpuart1ClockSelection)
 8004912:	687b      	ldr	r3, [r7, #4]
 8004914:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8004918:	2b05      	cmp	r3, #5
 800491a:	d821      	bhi.n	8004960 <HAL_RCCEx_PeriphCLKConfig+0x8bc>
 800491c:	a201      	add	r2, pc, #4	; (adr r2, 8004924 <HAL_RCCEx_PeriphCLKConfig+0x880>)
 800491e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004922:	bf00      	nop
 8004924:	08004967 	.word	0x08004967
 8004928:	0800493d 	.word	0x0800493d
 800492c:	0800494f 	.word	0x0800494f
 8004930:	08004967 	.word	0x08004967
 8004934:	08004967 	.word	0x08004967
 8004938:	08004967 	.word	0x08004967
    case RCC_LPUART1CLKSOURCE_PCLK4: /* SRD/D3 PCLK1 (PCLK4) as clock source for LPUART1 */
      /* LPUART1 clock source configuration done later after clock selection check */
      break;

    case RCC_LPUART1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPUART1 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 800493c:	687b      	ldr	r3, [r7, #4]
 800493e:	3304      	adds	r3, #4
 8004940:	2101      	movs	r1, #1
 8004942:	4618      	mov	r0, r3
 8004944:	f000 fd66 	bl	8005414 <RCCEx_PLL2_Config>
 8004948:	4603      	mov	r3, r0
 800494a:	75fb      	strb	r3, [r7, #23]
      /* LPUART1 clock source configuration done later after clock selection check */
      break;
 800494c:	e00c      	b.n	8004968 <HAL_RCCEx_PeriphCLKConfig+0x8c4>

    case RCC_LPUART1CLKSOURCE_PLL3: /* PLL3 is used as clock source for LPUART1 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 800494e:	687b      	ldr	r3, [r7, #4]
 8004950:	3324      	adds	r3, #36	; 0x24
 8004952:	2101      	movs	r1, #1
 8004954:	4618      	mov	r0, r3
 8004956:	f000 fe0f 	bl	8005578 <RCCEx_PLL3_Config>
 800495a:	4603      	mov	r3, r0
 800495c:	75fb      	strb	r3, [r7, #23]
      /* LPUART1 clock source configuration done later after clock selection check */
      break;
 800495e:	e003      	b.n	8004968 <HAL_RCCEx_PeriphCLKConfig+0x8c4>
      /* LSE,  oscillator is used as source of LPUART1 clock */
      /* LPUART1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8004960:	2301      	movs	r3, #1
 8004962:	75fb      	strb	r3, [r7, #23]
      break;
 8004964:	e000      	b.n	8004968 <HAL_RCCEx_PeriphCLKConfig+0x8c4>
      break;
 8004966:	bf00      	nop
    }

    if(ret == HAL_OK)
 8004968:	7dfb      	ldrb	r3, [r7, #23]
 800496a:	2b00      	cmp	r3, #0
 800496c:	d110      	bne.n	8004990 <HAL_RCCEx_PeriphCLKConfig+0x8ec>
    {
      /* Set the source of LPUART1 clock */
      __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 800496e:	4b06      	ldr	r3, [pc, #24]	; (8004988 <HAL_RCCEx_PeriphCLKConfig+0x8e4>)
 8004970:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004972:	f023 0207 	bic.w	r2, r3, #7
 8004976:	687b      	ldr	r3, [r7, #4]
 8004978:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800497c:	4902      	ldr	r1, [pc, #8]	; (8004988 <HAL_RCCEx_PeriphCLKConfig+0x8e4>)
 800497e:	4313      	orrs	r3, r2
 8004980:	658b      	str	r3, [r1, #88]	; 0x58
 8004982:	e007      	b.n	8004994 <HAL_RCCEx_PeriphCLKConfig+0x8f0>
 8004984:	58024800 	.word	0x58024800
 8004988:	58024400 	.word	0x58024400
 800498c:	00ffffcf 	.word	0x00ffffcf
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004990:	7dfb      	ldrb	r3, [r7, #23]
 8004992:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM1 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8004994:	687b      	ldr	r3, [r7, #4]
 8004996:	681b      	ldr	r3, [r3, #0]
 8004998:	f003 0320 	and.w	r3, r3, #32
 800499c:	2b00      	cmp	r3, #0
 800499e:	d04b      	beq.n	8004a38 <HAL_RCCEx_PeriphCLKConfig+0x994>
  {
    switch(PeriphClkInit->Lptim1ClockSelection)
 80049a0:	687b      	ldr	r3, [r7, #4]
 80049a2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80049a6:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80049aa:	d02e      	beq.n	8004a0a <HAL_RCCEx_PeriphCLKConfig+0x966>
 80049ac:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80049b0:	d828      	bhi.n	8004a04 <HAL_RCCEx_PeriphCLKConfig+0x960>
 80049b2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80049b6:	d02a      	beq.n	8004a0e <HAL_RCCEx_PeriphCLKConfig+0x96a>
 80049b8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80049bc:	d822      	bhi.n	8004a04 <HAL_RCCEx_PeriphCLKConfig+0x960>
 80049be:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 80049c2:	d026      	beq.n	8004a12 <HAL_RCCEx_PeriphCLKConfig+0x96e>
 80049c4:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 80049c8:	d81c      	bhi.n	8004a04 <HAL_RCCEx_PeriphCLKConfig+0x960>
 80049ca:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80049ce:	d010      	beq.n	80049f2 <HAL_RCCEx_PeriphCLKConfig+0x94e>
 80049d0:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80049d4:	d816      	bhi.n	8004a04 <HAL_RCCEx_PeriphCLKConfig+0x960>
 80049d6:	2b00      	cmp	r3, #0
 80049d8:	d01d      	beq.n	8004a16 <HAL_RCCEx_PeriphCLKConfig+0x972>
 80049da:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80049de:	d111      	bne.n	8004a04 <HAL_RCCEx_PeriphCLKConfig+0x960>
      /* LPTIM1 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM1*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 80049e0:	687b      	ldr	r3, [r7, #4]
 80049e2:	3304      	adds	r3, #4
 80049e4:	2100      	movs	r1, #0
 80049e6:	4618      	mov	r0, r3
 80049e8:	f000 fd14 	bl	8005414 <RCCEx_PLL2_Config>
 80049ec:	4603      	mov	r3, r0
 80049ee:	75fb      	strb	r3, [r7, #23]

      /* LPTIM1 clock source configuration done later after clock selection check */
      break;
 80049f0:	e012      	b.n	8004a18 <HAL_RCCEx_PeriphCLKConfig+0x974>

    case RCC_LPTIM1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM1*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 80049f2:	687b      	ldr	r3, [r7, #4]
 80049f4:	3324      	adds	r3, #36	; 0x24
 80049f6:	2102      	movs	r1, #2
 80049f8:	4618      	mov	r0, r3
 80049fa:	f000 fdbd 	bl	8005578 <RCCEx_PLL3_Config>
 80049fe:	4603      	mov	r3, r0
 8004a00:	75fb      	strb	r3, [r7, #23]

      /* LPTIM1 clock source configuration done later after clock selection check */
      break;
 8004a02:	e009      	b.n	8004a18 <HAL_RCCEx_PeriphCLKConfig+0x974>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM1 clock */
      /* LPTIM1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8004a04:	2301      	movs	r3, #1
 8004a06:	75fb      	strb	r3, [r7, #23]
      break;
 8004a08:	e006      	b.n	8004a18 <HAL_RCCEx_PeriphCLKConfig+0x974>
      break;
 8004a0a:	bf00      	nop
 8004a0c:	e004      	b.n	8004a18 <HAL_RCCEx_PeriphCLKConfig+0x974>
      break;
 8004a0e:	bf00      	nop
 8004a10:	e002      	b.n	8004a18 <HAL_RCCEx_PeriphCLKConfig+0x974>
      break;
 8004a12:	bf00      	nop
 8004a14:	e000      	b.n	8004a18 <HAL_RCCEx_PeriphCLKConfig+0x974>
      break;
 8004a16:	bf00      	nop
    }

    if(ret == HAL_OK)
 8004a18:	7dfb      	ldrb	r3, [r7, #23]
 8004a1a:	2b00      	cmp	r3, #0
 8004a1c:	d10a      	bne.n	8004a34 <HAL_RCCEx_PeriphCLKConfig+0x990>
    {
      /* Set the source of LPTIM1 clock*/
      __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8004a1e:	4bb2      	ldr	r3, [pc, #712]	; (8004ce8 <HAL_RCCEx_PeriphCLKConfig+0xc44>)
 8004a20:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004a22:	f023 42e0 	bic.w	r2, r3, #1879048192	; 0x70000000
 8004a26:	687b      	ldr	r3, [r7, #4]
 8004a28:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004a2c:	49ae      	ldr	r1, [pc, #696]	; (8004ce8 <HAL_RCCEx_PeriphCLKConfig+0xc44>)
 8004a2e:	4313      	orrs	r3, r2
 8004a30:	654b      	str	r3, [r1, #84]	; 0x54
 8004a32:	e001      	b.n	8004a38 <HAL_RCCEx_PeriphCLKConfig+0x994>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004a34:	7dfb      	ldrb	r3, [r7, #23]
 8004a36:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM2 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 8004a38:	687b      	ldr	r3, [r7, #4]
 8004a3a:	681b      	ldr	r3, [r3, #0]
 8004a3c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004a40:	2b00      	cmp	r3, #0
 8004a42:	d04b      	beq.n	8004adc <HAL_RCCEx_PeriphCLKConfig+0xa38>
  {
    switch(PeriphClkInit->Lptim2ClockSelection)
 8004a44:	687b      	ldr	r3, [r7, #4]
 8004a46:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004a4a:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 8004a4e:	d02e      	beq.n	8004aae <HAL_RCCEx_PeriphCLKConfig+0xa0a>
 8004a50:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 8004a54:	d828      	bhi.n	8004aa8 <HAL_RCCEx_PeriphCLKConfig+0xa04>
 8004a56:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004a5a:	d02a      	beq.n	8004ab2 <HAL_RCCEx_PeriphCLKConfig+0xa0e>
 8004a5c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004a60:	d822      	bhi.n	8004aa8 <HAL_RCCEx_PeriphCLKConfig+0xa04>
 8004a62:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8004a66:	d026      	beq.n	8004ab6 <HAL_RCCEx_PeriphCLKConfig+0xa12>
 8004a68:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8004a6c:	d81c      	bhi.n	8004aa8 <HAL_RCCEx_PeriphCLKConfig+0xa04>
 8004a6e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004a72:	d010      	beq.n	8004a96 <HAL_RCCEx_PeriphCLKConfig+0x9f2>
 8004a74:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004a78:	d816      	bhi.n	8004aa8 <HAL_RCCEx_PeriphCLKConfig+0xa04>
 8004a7a:	2b00      	cmp	r3, #0
 8004a7c:	d01d      	beq.n	8004aba <HAL_RCCEx_PeriphCLKConfig+0xa16>
 8004a7e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004a82:	d111      	bne.n	8004aa8 <HAL_RCCEx_PeriphCLKConfig+0xa04>
      /* LPTIM2 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM2CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8004a84:	687b      	ldr	r3, [r7, #4]
 8004a86:	3304      	adds	r3, #4
 8004a88:	2100      	movs	r1, #0
 8004a8a:	4618      	mov	r0, r3
 8004a8c:	f000 fcc2 	bl	8005414 <RCCEx_PLL2_Config>
 8004a90:	4603      	mov	r3, r0
 8004a92:	75fb      	strb	r3, [r7, #23]

      /* LPTIM2 clock source configuration done later after clock selection check */
      break;
 8004a94:	e012      	b.n	8004abc <HAL_RCCEx_PeriphCLKConfig+0xa18>

    case RCC_LPTIM2CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8004a96:	687b      	ldr	r3, [r7, #4]
 8004a98:	3324      	adds	r3, #36	; 0x24
 8004a9a:	2102      	movs	r1, #2
 8004a9c:	4618      	mov	r0, r3
 8004a9e:	f000 fd6b 	bl	8005578 <RCCEx_PLL3_Config>
 8004aa2:	4603      	mov	r3, r0
 8004aa4:	75fb      	strb	r3, [r7, #23]

      /* LPTIM2 clock source configuration done later after clock selection check */
      break;
 8004aa6:	e009      	b.n	8004abc <HAL_RCCEx_PeriphCLKConfig+0xa18>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM2 clock */
      /* LPTIM2 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8004aa8:	2301      	movs	r3, #1
 8004aaa:	75fb      	strb	r3, [r7, #23]
      break;
 8004aac:	e006      	b.n	8004abc <HAL_RCCEx_PeriphCLKConfig+0xa18>
      break;
 8004aae:	bf00      	nop
 8004ab0:	e004      	b.n	8004abc <HAL_RCCEx_PeriphCLKConfig+0xa18>
      break;
 8004ab2:	bf00      	nop
 8004ab4:	e002      	b.n	8004abc <HAL_RCCEx_PeriphCLKConfig+0xa18>
      break;
 8004ab6:	bf00      	nop
 8004ab8:	e000      	b.n	8004abc <HAL_RCCEx_PeriphCLKConfig+0xa18>
      break;
 8004aba:	bf00      	nop
    }

    if(ret == HAL_OK)
 8004abc:	7dfb      	ldrb	r3, [r7, #23]
 8004abe:	2b00      	cmp	r3, #0
 8004ac0:	d10a      	bne.n	8004ad8 <HAL_RCCEx_PeriphCLKConfig+0xa34>
    {
      /* Set the source of LPTIM2 clock*/
      __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8004ac2:	4b89      	ldr	r3, [pc, #548]	; (8004ce8 <HAL_RCCEx_PeriphCLKConfig+0xc44>)
 8004ac4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004ac6:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8004aca:	687b      	ldr	r3, [r7, #4]
 8004acc:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004ad0:	4985      	ldr	r1, [pc, #532]	; (8004ce8 <HAL_RCCEx_PeriphCLKConfig+0xc44>)
 8004ad2:	4313      	orrs	r3, r2
 8004ad4:	658b      	str	r3, [r1, #88]	; 0x58
 8004ad6:	e001      	b.n	8004adc <HAL_RCCEx_PeriphCLKConfig+0xa38>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004ad8:	7dfb      	ldrb	r3, [r7, #23]
 8004ada:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM345 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
 8004adc:	687b      	ldr	r3, [r7, #4]
 8004ade:	681b      	ldr	r3, [r3, #0]
 8004ae0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004ae4:	2b00      	cmp	r3, #0
 8004ae6:	d04b      	beq.n	8004b80 <HAL_RCCEx_PeriphCLKConfig+0xadc>
  {
    switch(PeriphClkInit->Lptim345ClockSelection)
 8004ae8:	687b      	ldr	r3, [r7, #4]
 8004aea:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8004aee:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 8004af2:	d02e      	beq.n	8004b52 <HAL_RCCEx_PeriphCLKConfig+0xaae>
 8004af4:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 8004af8:	d828      	bhi.n	8004b4c <HAL_RCCEx_PeriphCLKConfig+0xaa8>
 8004afa:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004afe:	d02a      	beq.n	8004b56 <HAL_RCCEx_PeriphCLKConfig+0xab2>
 8004b00:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004b04:	d822      	bhi.n	8004b4c <HAL_RCCEx_PeriphCLKConfig+0xaa8>
 8004b06:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 8004b0a:	d026      	beq.n	8004b5a <HAL_RCCEx_PeriphCLKConfig+0xab6>
 8004b0c:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 8004b10:	d81c      	bhi.n	8004b4c <HAL_RCCEx_PeriphCLKConfig+0xaa8>
 8004b12:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8004b16:	d010      	beq.n	8004b3a <HAL_RCCEx_PeriphCLKConfig+0xa96>
 8004b18:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8004b1c:	d816      	bhi.n	8004b4c <HAL_RCCEx_PeriphCLKConfig+0xaa8>
 8004b1e:	2b00      	cmp	r3, #0
 8004b20:	d01d      	beq.n	8004b5e <HAL_RCCEx_PeriphCLKConfig+0xaba>
 8004b22:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004b26:	d111      	bne.n	8004b4c <HAL_RCCEx_PeriphCLKConfig+0xaa8>
    case RCC_LPTIM345CLKSOURCE_PCLK4:      /* SRD/D3 PCLK1 (PCLK4) as clock source for LPTIM3/4/5 */
      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM345CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM3/4/5 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8004b28:	687b      	ldr	r3, [r7, #4]
 8004b2a:	3304      	adds	r3, #4
 8004b2c:	2100      	movs	r1, #0
 8004b2e:	4618      	mov	r0, r3
 8004b30:	f000 fc70 	bl	8005414 <RCCEx_PLL2_Config>
 8004b34:	4603      	mov	r3, r0
 8004b36:	75fb      	strb	r3, [r7, #23]

      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;
 8004b38:	e012      	b.n	8004b60 <HAL_RCCEx_PeriphCLKConfig+0xabc>

    case RCC_LPTIM345CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM3/4/5 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8004b3a:	687b      	ldr	r3, [r7, #4]
 8004b3c:	3324      	adds	r3, #36	; 0x24
 8004b3e:	2102      	movs	r1, #2
 8004b40:	4618      	mov	r0, r3
 8004b42:	f000 fd19 	bl	8005578 <RCCEx_PLL3_Config>
 8004b46:	4603      	mov	r3, r0
 8004b48:	75fb      	strb	r3, [r7, #23]

      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;
 8004b4a:	e009      	b.n	8004b60 <HAL_RCCEx_PeriphCLKConfig+0xabc>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM3/4/5 clock */
      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8004b4c:	2301      	movs	r3, #1
 8004b4e:	75fb      	strb	r3, [r7, #23]
      break;
 8004b50:	e006      	b.n	8004b60 <HAL_RCCEx_PeriphCLKConfig+0xabc>
      break;
 8004b52:	bf00      	nop
 8004b54:	e004      	b.n	8004b60 <HAL_RCCEx_PeriphCLKConfig+0xabc>
      break;
 8004b56:	bf00      	nop
 8004b58:	e002      	b.n	8004b60 <HAL_RCCEx_PeriphCLKConfig+0xabc>
      break;
 8004b5a:	bf00      	nop
 8004b5c:	e000      	b.n	8004b60 <HAL_RCCEx_PeriphCLKConfig+0xabc>
      break;
 8004b5e:	bf00      	nop
    }

    if(ret == HAL_OK)
 8004b60:	7dfb      	ldrb	r3, [r7, #23]
 8004b62:	2b00      	cmp	r3, #0
 8004b64:	d10a      	bne.n	8004b7c <HAL_RCCEx_PeriphCLKConfig+0xad8>
    {
      /* Set the source of LPTIM3/4/5 clock */
      __HAL_RCC_LPTIM345_CONFIG(PeriphClkInit->Lptim345ClockSelection);
 8004b66:	4b60      	ldr	r3, [pc, #384]	; (8004ce8 <HAL_RCCEx_PeriphCLKConfig+0xc44>)
 8004b68:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004b6a:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8004b6e:	687b      	ldr	r3, [r7, #4]
 8004b70:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8004b74:	495c      	ldr	r1, [pc, #368]	; (8004ce8 <HAL_RCCEx_PeriphCLKConfig+0xc44>)
 8004b76:	4313      	orrs	r3, r2
 8004b78:	658b      	str	r3, [r1, #88]	; 0x58
 8004b7a:	e001      	b.n	8004b80 <HAL_RCCEx_PeriphCLKConfig+0xadc>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004b7c:	7dfb      	ldrb	r3, [r7, #23]
 8004b7e:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*------------------------------ I2C1/2/3/5* Configuration ------------------------*/
#if defined(I2C5)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1235) == RCC_PERIPHCLK_I2C1235)
 8004b80:	687b      	ldr	r3, [r7, #4]
 8004b82:	681b      	ldr	r3, [r3, #0]
 8004b84:	f003 0308 	and.w	r3, r3, #8
 8004b88:	2b00      	cmp	r3, #0
 8004b8a:	d018      	beq.n	8004bbe <HAL_RCCEx_PeriphCLKConfig+0xb1a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1235CLKSOURCE(PeriphClkInit->I2c1235ClockSelection));

    if ((PeriphClkInit->I2c1235ClockSelection )== RCC_I2C1235CLKSOURCE_PLL3 )
 8004b8c:	687b      	ldr	r3, [r7, #4]
 8004b8e:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8004b90:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004b94:	d10a      	bne.n	8004bac <HAL_RCCEx_PeriphCLKConfig+0xb08>
    {
        if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!= HAL_OK)
 8004b96:	687b      	ldr	r3, [r7, #4]
 8004b98:	3324      	adds	r3, #36	; 0x24
 8004b9a:	2102      	movs	r1, #2
 8004b9c:	4618      	mov	r0, r3
 8004b9e:	f000 fceb 	bl	8005578 <RCCEx_PLL3_Config>
 8004ba2:	4603      	mov	r3, r0
 8004ba4:	2b00      	cmp	r3, #0
 8004ba6:	d001      	beq.n	8004bac <HAL_RCCEx_PeriphCLKConfig+0xb08>
        {
          status = HAL_ERROR;
 8004ba8:	2301      	movs	r3, #1
 8004baa:	75bb      	strb	r3, [r7, #22]
        }
    }

      __HAL_RCC_I2C1235_CONFIG(PeriphClkInit->I2c1235ClockSelection);
 8004bac:	4b4e      	ldr	r3, [pc, #312]	; (8004ce8 <HAL_RCCEx_PeriphCLKConfig+0xc44>)
 8004bae:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004bb0:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8004bb4:	687b      	ldr	r3, [r7, #4]
 8004bb6:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8004bb8:	494b      	ldr	r1, [pc, #300]	; (8004ce8 <HAL_RCCEx_PeriphCLKConfig+0xc44>)
 8004bba:	4313      	orrs	r3, r2
 8004bbc:	654b      	str	r3, [r1, #84]	; 0x54

  }
#endif /* I2C5 */

  /*------------------------------ I2C4 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8004bbe:	687b      	ldr	r3, [r7, #4]
 8004bc0:	681b      	ldr	r3, [r3, #0]
 8004bc2:	f003 0310 	and.w	r3, r3, #16
 8004bc6:	2b00      	cmp	r3, #0
 8004bc8:	d01a      	beq.n	8004c00 <HAL_RCCEx_PeriphCLKConfig+0xb5c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    if ((PeriphClkInit->I2c4ClockSelection) == RCC_I2C4CLKSOURCE_PLL3 )
 8004bca:	687b      	ldr	r3, [r7, #4]
 8004bcc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004bd0:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004bd4:	d10a      	bne.n	8004bec <HAL_RCCEx_PeriphCLKConfig+0xb48>
    {
      if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!= HAL_OK)
 8004bd6:	687b      	ldr	r3, [r7, #4]
 8004bd8:	3324      	adds	r3, #36	; 0x24
 8004bda:	2102      	movs	r1, #2
 8004bdc:	4618      	mov	r0, r3
 8004bde:	f000 fccb 	bl	8005578 <RCCEx_PLL3_Config>
 8004be2:	4603      	mov	r3, r0
 8004be4:	2b00      	cmp	r3, #0
 8004be6:	d001      	beq.n	8004bec <HAL_RCCEx_PeriphCLKConfig+0xb48>
      {
        status = HAL_ERROR;
 8004be8:	2301      	movs	r3, #1
 8004bea:	75bb      	strb	r3, [r7, #22]
      }
    }

      __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8004bec:	4b3e      	ldr	r3, [pc, #248]	; (8004ce8 <HAL_RCCEx_PeriphCLKConfig+0xc44>)
 8004bee:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004bf0:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8004bf4:	687b      	ldr	r3, [r7, #4]
 8004bf6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004bfa:	493b      	ldr	r1, [pc, #236]	; (8004ce8 <HAL_RCCEx_PeriphCLKConfig+0xc44>)
 8004bfc:	4313      	orrs	r3, r2
 8004bfe:	658b      	str	r3, [r1, #88]	; 0x58

  }

  /*---------------------------- ADC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8004c00:	687b      	ldr	r3, [r7, #4]
 8004c02:	681b      	ldr	r3, [r3, #0]
 8004c04:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8004c08:	2b00      	cmp	r3, #0
 8004c0a:	d034      	beq.n	8004c76 <HAL_RCCEx_PeriphCLKConfig+0xbd2>
  {
    switch(PeriphClkInit->AdcClockSelection)
 8004c0c:	687b      	ldr	r3, [r7, #4]
 8004c0e:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8004c12:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8004c16:	d01d      	beq.n	8004c54 <HAL_RCCEx_PeriphCLKConfig+0xbb0>
 8004c18:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8004c1c:	d817      	bhi.n	8004c4e <HAL_RCCEx_PeriphCLKConfig+0xbaa>
 8004c1e:	2b00      	cmp	r3, #0
 8004c20:	d003      	beq.n	8004c2a <HAL_RCCEx_PeriphCLKConfig+0xb86>
 8004c22:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004c26:	d009      	beq.n	8004c3c <HAL_RCCEx_PeriphCLKConfig+0xb98>
 8004c28:	e011      	b.n	8004c4e <HAL_RCCEx_PeriphCLKConfig+0xbaa>
    {

    case RCC_ADCCLKSOURCE_PLL2: /* PLL2 is used as clock source for ADC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8004c2a:	687b      	ldr	r3, [r7, #4]
 8004c2c:	3304      	adds	r3, #4
 8004c2e:	2100      	movs	r1, #0
 8004c30:	4618      	mov	r0, r3
 8004c32:	f000 fbef 	bl	8005414 <RCCEx_PLL2_Config>
 8004c36:	4603      	mov	r3, r0
 8004c38:	75fb      	strb	r3, [r7, #23]

      /* ADC clock source configuration done later after clock selection check */
      break;
 8004c3a:	e00c      	b.n	8004c56 <HAL_RCCEx_PeriphCLKConfig+0xbb2>

    case RCC_ADCCLKSOURCE_PLL3:  /* PLL3 is used as clock source for ADC*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8004c3c:	687b      	ldr	r3, [r7, #4]
 8004c3e:	3324      	adds	r3, #36	; 0x24
 8004c40:	2102      	movs	r1, #2
 8004c42:	4618      	mov	r0, r3
 8004c44:	f000 fc98 	bl	8005578 <RCCEx_PLL3_Config>
 8004c48:	4603      	mov	r3, r0
 8004c4a:	75fb      	strb	r3, [r7, #23]

      /* ADC clock source configuration done later after clock selection check */
      break;
 8004c4c:	e003      	b.n	8004c56 <HAL_RCCEx_PeriphCLKConfig+0xbb2>
      /* HSI, HSE, or CSI oscillator is used as source of ADC clock */
      /* ADC clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8004c4e:	2301      	movs	r3, #1
 8004c50:	75fb      	strb	r3, [r7, #23]
      break;
 8004c52:	e000      	b.n	8004c56 <HAL_RCCEx_PeriphCLKConfig+0xbb2>
      break;
 8004c54:	bf00      	nop
    }

    if(ret == HAL_OK)
 8004c56:	7dfb      	ldrb	r3, [r7, #23]
 8004c58:	2b00      	cmp	r3, #0
 8004c5a:	d10a      	bne.n	8004c72 <HAL_RCCEx_PeriphCLKConfig+0xbce>
    {
      /* Set the source of ADC clock*/
      __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8004c5c:	4b22      	ldr	r3, [pc, #136]	; (8004ce8 <HAL_RCCEx_PeriphCLKConfig+0xc44>)
 8004c5e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004c60:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8004c64:	687b      	ldr	r3, [r7, #4]
 8004c66:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8004c6a:	491f      	ldr	r1, [pc, #124]	; (8004ce8 <HAL_RCCEx_PeriphCLKConfig+0xc44>)
 8004c6c:	4313      	orrs	r3, r2
 8004c6e:	658b      	str	r3, [r1, #88]	; 0x58
 8004c70:	e001      	b.n	8004c76 <HAL_RCCEx_PeriphCLKConfig+0xbd2>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004c72:	7dfb      	ldrb	r3, [r7, #23]
 8004c74:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*------------------------------ USB Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8004c76:	687b      	ldr	r3, [r7, #4]
 8004c78:	681b      	ldr	r3, [r3, #0]
 8004c7a:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8004c7e:	2b00      	cmp	r3, #0
 8004c80:	d036      	beq.n	8004cf0 <HAL_RCCEx_PeriphCLKConfig+0xc4c>
  {

    switch(PeriphClkInit->UsbClockSelection)
 8004c82:	687b      	ldr	r3, [r7, #4]
 8004c84:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8004c88:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8004c8c:	d01c      	beq.n	8004cc8 <HAL_RCCEx_PeriphCLKConfig+0xc24>
 8004c8e:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8004c92:	d816      	bhi.n	8004cc2 <HAL_RCCEx_PeriphCLKConfig+0xc1e>
 8004c94:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8004c98:	d003      	beq.n	8004ca2 <HAL_RCCEx_PeriphCLKConfig+0xbfe>
 8004c9a:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8004c9e:	d007      	beq.n	8004cb0 <HAL_RCCEx_PeriphCLKConfig+0xc0c>
 8004ca0:	e00f      	b.n	8004cc2 <HAL_RCCEx_PeriphCLKConfig+0xc1e>
    {
    case RCC_USBCLKSOURCE_PLL:      /* PLL is used as clock source for USB*/
      /* Enable USB Clock output generated form System USB . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8004ca2:	4b11      	ldr	r3, [pc, #68]	; (8004ce8 <HAL_RCCEx_PeriphCLKConfig+0xc44>)
 8004ca4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004ca6:	4a10      	ldr	r2, [pc, #64]	; (8004ce8 <HAL_RCCEx_PeriphCLKConfig+0xc44>)
 8004ca8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004cac:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* USB clock source configuration done later after clock selection check */
      break;
 8004cae:	e00c      	b.n	8004cca <HAL_RCCEx_PeriphCLKConfig+0xc26>

    case RCC_USBCLKSOURCE_PLL3: /* PLL3 is used as clock source for USB*/

      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8004cb0:	687b      	ldr	r3, [r7, #4]
 8004cb2:	3324      	adds	r3, #36	; 0x24
 8004cb4:	2101      	movs	r1, #1
 8004cb6:	4618      	mov	r0, r3
 8004cb8:	f000 fc5e 	bl	8005578 <RCCEx_PLL3_Config>
 8004cbc:	4603      	mov	r3, r0
 8004cbe:	75fb      	strb	r3, [r7, #23]

      /* USB clock source configuration done later after clock selection check */
      break;
 8004cc0:	e003      	b.n	8004cca <HAL_RCCEx_PeriphCLKConfig+0xc26>
      /* HSI48 oscillator is used as source of USB clock */
      /* USB clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8004cc2:	2301      	movs	r3, #1
 8004cc4:	75fb      	strb	r3, [r7, #23]
      break;
 8004cc6:	e000      	b.n	8004cca <HAL_RCCEx_PeriphCLKConfig+0xc26>
      break;
 8004cc8:	bf00      	nop
    }

    if(ret == HAL_OK)
 8004cca:	7dfb      	ldrb	r3, [r7, #23]
 8004ccc:	2b00      	cmp	r3, #0
 8004cce:	d10d      	bne.n	8004cec <HAL_RCCEx_PeriphCLKConfig+0xc48>
    {
      /* Set the source of USB clock*/
      __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8004cd0:	4b05      	ldr	r3, [pc, #20]	; (8004ce8 <HAL_RCCEx_PeriphCLKConfig+0xc44>)
 8004cd2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004cd4:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8004cd8:	687b      	ldr	r3, [r7, #4]
 8004cda:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8004cde:	4902      	ldr	r1, [pc, #8]	; (8004ce8 <HAL_RCCEx_PeriphCLKConfig+0xc44>)
 8004ce0:	4313      	orrs	r3, r2
 8004ce2:	654b      	str	r3, [r1, #84]	; 0x54
 8004ce4:	e004      	b.n	8004cf0 <HAL_RCCEx_PeriphCLKConfig+0xc4c>
 8004ce6:	bf00      	nop
 8004ce8:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004cec:	7dfb      	ldrb	r3, [r7, #23]
 8004cee:	75bb      	strb	r3, [r7, #22]
    }

  }

  /*------------------------------------- SDMMC Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == RCC_PERIPHCLK_SDMMC)
 8004cf0:	687b      	ldr	r3, [r7, #4]
 8004cf2:	681b      	ldr	r3, [r3, #0]
 8004cf4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004cf8:	2b00      	cmp	r3, #0
 8004cfa:	d029      	beq.n	8004d50 <HAL_RCCEx_PeriphCLKConfig+0xcac>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC(PeriphClkInit->SdmmcClockSelection));

    switch(PeriphClkInit->SdmmcClockSelection)
 8004cfc:	687b      	ldr	r3, [r7, #4]
 8004cfe:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004d00:	2b00      	cmp	r3, #0
 8004d02:	d003      	beq.n	8004d0c <HAL_RCCEx_PeriphCLKConfig+0xc68>
 8004d04:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004d08:	d007      	beq.n	8004d1a <HAL_RCCEx_PeriphCLKConfig+0xc76>
 8004d0a:	e00f      	b.n	8004d2c <HAL_RCCEx_PeriphCLKConfig+0xc88>
    {
    case RCC_SDMMCCLKSOURCE_PLL:      /* PLL is used as clock source for SDMMC*/
      /* Enable SDMMC Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8004d0c:	4b61      	ldr	r3, [pc, #388]	; (8004e94 <HAL_RCCEx_PeriphCLKConfig+0xdf0>)
 8004d0e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004d10:	4a60      	ldr	r2, [pc, #384]	; (8004e94 <HAL_RCCEx_PeriphCLKConfig+0xdf0>)
 8004d12:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004d16:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SDMMC clock source configuration done later after clock selection check */
      break;
 8004d18:	e00b      	b.n	8004d32 <HAL_RCCEx_PeriphCLKConfig+0xc8e>

    case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for SDMMC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 8004d1a:	687b      	ldr	r3, [r7, #4]
 8004d1c:	3304      	adds	r3, #4
 8004d1e:	2102      	movs	r1, #2
 8004d20:	4618      	mov	r0, r3
 8004d22:	f000 fb77 	bl	8005414 <RCCEx_PLL2_Config>
 8004d26:	4603      	mov	r3, r0
 8004d28:	75fb      	strb	r3, [r7, #23]

      /* SDMMC clock source configuration done later after clock selection check */
      break;
 8004d2a:	e002      	b.n	8004d32 <HAL_RCCEx_PeriphCLKConfig+0xc8e>

    default:
      ret = HAL_ERROR;
 8004d2c:	2301      	movs	r3, #1
 8004d2e:	75fb      	strb	r3, [r7, #23]
      break;
 8004d30:	bf00      	nop
    }

    if(ret == HAL_OK)
 8004d32:	7dfb      	ldrb	r3, [r7, #23]
 8004d34:	2b00      	cmp	r3, #0
 8004d36:	d109      	bne.n	8004d4c <HAL_RCCEx_PeriphCLKConfig+0xca8>
    {
      /* Set the source of SDMMC clock*/
      __HAL_RCC_SDMMC_CONFIG(PeriphClkInit->SdmmcClockSelection);
 8004d38:	4b56      	ldr	r3, [pc, #344]	; (8004e94 <HAL_RCCEx_PeriphCLKConfig+0xdf0>)
 8004d3a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004d3c:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8004d40:	687b      	ldr	r3, [r7, #4]
 8004d42:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004d44:	4953      	ldr	r1, [pc, #332]	; (8004e94 <HAL_RCCEx_PeriphCLKConfig+0xdf0>)
 8004d46:	4313      	orrs	r3, r2
 8004d48:	64cb      	str	r3, [r1, #76]	; 0x4c
 8004d4a:	e001      	b.n	8004d50 <HAL_RCCEx_PeriphCLKConfig+0xcac>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004d4c:	7dfb      	ldrb	r3, [r7, #23]
 8004d4e:	75bb      	strb	r3, [r7, #22]
    }
  }

#if defined(LTDC)
  /*-------------------------------------- LTDC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 8004d50:	687b      	ldr	r3, [r7, #4]
 8004d52:	681b      	ldr	r3, [r3, #0]
 8004d54:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8004d58:	2b00      	cmp	r3, #0
 8004d5a:	d00a      	beq.n	8004d72 <HAL_RCCEx_PeriphCLKConfig+0xcce>
  {
    if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!=HAL_OK)
 8004d5c:	687b      	ldr	r3, [r7, #4]
 8004d5e:	3324      	adds	r3, #36	; 0x24
 8004d60:	2102      	movs	r1, #2
 8004d62:	4618      	mov	r0, r3
 8004d64:	f000 fc08 	bl	8005578 <RCCEx_PLL3_Config>
 8004d68:	4603      	mov	r3, r0
 8004d6a:	2b00      	cmp	r3, #0
 8004d6c:	d001      	beq.n	8004d72 <HAL_RCCEx_PeriphCLKConfig+0xcce>
    {
      status=HAL_ERROR;
 8004d6e:	2301      	movs	r3, #1
 8004d70:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif /* LTDC */

  /*------------------------------ RNG Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 8004d72:	687b      	ldr	r3, [r7, #4]
 8004d74:	681b      	ldr	r3, [r3, #0]
 8004d76:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004d7a:	2b00      	cmp	r3, #0
 8004d7c:	d030      	beq.n	8004de0 <HAL_RCCEx_PeriphCLKConfig+0xd3c>
  {

    switch(PeriphClkInit->RngClockSelection)
 8004d7e:	687b      	ldr	r3, [r7, #4]
 8004d80:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8004d82:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8004d86:	d017      	beq.n	8004db8 <HAL_RCCEx_PeriphCLKConfig+0xd14>
 8004d88:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8004d8c:	d811      	bhi.n	8004db2 <HAL_RCCEx_PeriphCLKConfig+0xd0e>
 8004d8e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004d92:	d013      	beq.n	8004dbc <HAL_RCCEx_PeriphCLKConfig+0xd18>
 8004d94:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004d98:	d80b      	bhi.n	8004db2 <HAL_RCCEx_PeriphCLKConfig+0xd0e>
 8004d9a:	2b00      	cmp	r3, #0
 8004d9c:	d010      	beq.n	8004dc0 <HAL_RCCEx_PeriphCLKConfig+0xd1c>
 8004d9e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004da2:	d106      	bne.n	8004db2 <HAL_RCCEx_PeriphCLKConfig+0xd0e>
    {
    case RCC_RNGCLKSOURCE_PLL:     /* PLL is used as clock source for RNG*/
      /* Enable RNG Clock output generated form System RNG . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8004da4:	4b3b      	ldr	r3, [pc, #236]	; (8004e94 <HAL_RCCEx_PeriphCLKConfig+0xdf0>)
 8004da6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004da8:	4a3a      	ldr	r2, [pc, #232]	; (8004e94 <HAL_RCCEx_PeriphCLKConfig+0xdf0>)
 8004daa:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004dae:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* RNG clock source configuration done later after clock selection check */
      break;
 8004db0:	e007      	b.n	8004dc2 <HAL_RCCEx_PeriphCLKConfig+0xd1e>
      /* HSI48 oscillator is used as source of RNG clock */
      /* RNG clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8004db2:	2301      	movs	r3, #1
 8004db4:	75fb      	strb	r3, [r7, #23]
      break;
 8004db6:	e004      	b.n	8004dc2 <HAL_RCCEx_PeriphCLKConfig+0xd1e>
      break;
 8004db8:	bf00      	nop
 8004dba:	e002      	b.n	8004dc2 <HAL_RCCEx_PeriphCLKConfig+0xd1e>
      break;
 8004dbc:	bf00      	nop
 8004dbe:	e000      	b.n	8004dc2 <HAL_RCCEx_PeriphCLKConfig+0xd1e>
      break;
 8004dc0:	bf00      	nop
    }

    if(ret == HAL_OK)
 8004dc2:	7dfb      	ldrb	r3, [r7, #23]
 8004dc4:	2b00      	cmp	r3, #0
 8004dc6:	d109      	bne.n	8004ddc <HAL_RCCEx_PeriphCLKConfig+0xd38>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8004dc8:	4b32      	ldr	r3, [pc, #200]	; (8004e94 <HAL_RCCEx_PeriphCLKConfig+0xdf0>)
 8004dca:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004dcc:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8004dd0:	687b      	ldr	r3, [r7, #4]
 8004dd2:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8004dd4:	492f      	ldr	r1, [pc, #188]	; (8004e94 <HAL_RCCEx_PeriphCLKConfig+0xdf0>)
 8004dd6:	4313      	orrs	r3, r2
 8004dd8:	654b      	str	r3, [r1, #84]	; 0x54
 8004dda:	e001      	b.n	8004de0 <HAL_RCCEx_PeriphCLKConfig+0xd3c>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004ddc:	7dfb      	ldrb	r3, [r7, #23]
 8004dde:	75bb      	strb	r3, [r7, #22]
    }

  }

  /*------------------------------ SWPMI1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8004de0:	687b      	ldr	r3, [r7, #4]
 8004de2:	681b      	ldr	r3, [r3, #0]
 8004de4:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8004de8:	2b00      	cmp	r3, #0
 8004dea:	d008      	beq.n	8004dfe <HAL_RCCEx_PeriphCLKConfig+0xd5a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 interface clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8004dec:	4b29      	ldr	r3, [pc, #164]	; (8004e94 <HAL_RCCEx_PeriphCLKConfig+0xdf0>)
 8004dee:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004df0:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8004df4:	687b      	ldr	r3, [r7, #4]
 8004df6:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8004df8:	4926      	ldr	r1, [pc, #152]	; (8004e94 <HAL_RCCEx_PeriphCLKConfig+0xdf0>)
 8004dfa:	4313      	orrs	r3, r2
 8004dfc:	650b      	str	r3, [r1, #80]	; 0x50
    /* Configure the HRTIM1 clock source */
    __HAL_RCC_HRTIM1_CONFIG(PeriphClkInit->Hrtim1ClockSelection);
  }
#endif  /*HRTIM1*/
  /*------------------------------ DFSDM1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8004dfe:	687b      	ldr	r3, [r7, #4]
 8004e00:	681b      	ldr	r3, [r3, #0]
 8004e02:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8004e06:	2b00      	cmp	r3, #0
 8004e08:	d008      	beq.n	8004e1c <HAL_RCCEx_PeriphCLKConfig+0xd78>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8004e0a:	4b22      	ldr	r3, [pc, #136]	; (8004e94 <HAL_RCCEx_PeriphCLKConfig+0xdf0>)
 8004e0c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004e0e:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 8004e12:	687b      	ldr	r3, [r7, #4]
 8004e14:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8004e16:	491f      	ldr	r1, [pc, #124]	; (8004e94 <HAL_RCCEx_PeriphCLKConfig+0xdf0>)
 8004e18:	4313      	orrs	r3, r2
 8004e1a:	650b      	str	r3, [r1, #80]	; 0x50
    __HAL_RCC_DFSDM2_CONFIG(PeriphClkInit->Dfsdm2ClockSelection);
  }
#endif  /* DFSDM2 */

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
 8004e1c:	687b      	ldr	r3, [r7, #4]
 8004e1e:	681b      	ldr	r3, [r3, #0]
 8004e20:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8004e24:	2b00      	cmp	r3, #0
 8004e26:	d00d      	beq.n	8004e44 <HAL_RCCEx_PeriphCLKConfig+0xda0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8004e28:	4b1a      	ldr	r3, [pc, #104]	; (8004e94 <HAL_RCCEx_PeriphCLKConfig+0xdf0>)
 8004e2a:	691b      	ldr	r3, [r3, #16]
 8004e2c:	4a19      	ldr	r2, [pc, #100]	; (8004e94 <HAL_RCCEx_PeriphCLKConfig+0xdf0>)
 8004e2e:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8004e32:	6113      	str	r3, [r2, #16]
 8004e34:	4b17      	ldr	r3, [pc, #92]	; (8004e94 <HAL_RCCEx_PeriphCLKConfig+0xdf0>)
 8004e36:	691a      	ldr	r2, [r3, #16]
 8004e38:	687b      	ldr	r3, [r7, #4]
 8004e3a:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8004e3e:	4915      	ldr	r1, [pc, #84]	; (8004e94 <HAL_RCCEx_PeriphCLKConfig+0xdf0>)
 8004e40:	4313      	orrs	r3, r2
 8004e42:	610b      	str	r3, [r1, #16]
  }

  /*------------------------------------ CKPER configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
 8004e44:	687b      	ldr	r3, [r7, #4]
 8004e46:	681b      	ldr	r3, [r3, #0]
 8004e48:	2b00      	cmp	r3, #0
 8004e4a:	da08      	bge.n	8004e5e <HAL_RCCEx_PeriphCLKConfig+0xdba>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLKPSOURCE(PeriphClkInit->CkperClockSelection));

    /* Configure the CKPER clock source */
    __HAL_RCC_CLKP_CONFIG(PeriphClkInit->CkperClockSelection);
 8004e4c:	4b11      	ldr	r3, [pc, #68]	; (8004e94 <HAL_RCCEx_PeriphCLKConfig+0xdf0>)
 8004e4e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004e50:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8004e54:	687b      	ldr	r3, [r7, #4]
 8004e56:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004e58:	490e      	ldr	r1, [pc, #56]	; (8004e94 <HAL_RCCEx_PeriphCLKConfig+0xdf0>)
 8004e5a:	4313      	orrs	r3, r2
 8004e5c:	64cb      	str	r3, [r1, #76]	; 0x4c
  }

  /*------------------------------ CEC Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8004e5e:	687b      	ldr	r3, [r7, #4]
 8004e60:	681b      	ldr	r3, [r3, #0]
 8004e62:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8004e66:	2b00      	cmp	r3, #0
 8004e68:	d009      	beq.n	8004e7e <HAL_RCCEx_PeriphCLKConfig+0xdda>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC interface clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8004e6a:	4b0a      	ldr	r3, [pc, #40]	; (8004e94 <HAL_RCCEx_PeriphCLKConfig+0xdf0>)
 8004e6c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004e6e:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8004e72:	687b      	ldr	r3, [r7, #4]
 8004e74:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004e78:	4906      	ldr	r1, [pc, #24]	; (8004e94 <HAL_RCCEx_PeriphCLKConfig+0xdf0>)
 8004e7a:	4313      	orrs	r3, r2
 8004e7c:	654b      	str	r3, [r1, #84]	; 0x54
  }

  if (status == HAL_OK)
 8004e7e:	7dbb      	ldrb	r3, [r7, #22]
 8004e80:	2b00      	cmp	r3, #0
 8004e82:	d101      	bne.n	8004e88 <HAL_RCCEx_PeriphCLKConfig+0xde4>
  {
    return HAL_OK;
 8004e84:	2300      	movs	r3, #0
 8004e86:	e000      	b.n	8004e8a <HAL_RCCEx_PeriphCLKConfig+0xde6>
  }
  return HAL_ERROR;
 8004e88:	2301      	movs	r3, #1
}
 8004e8a:	4618      	mov	r0, r3
 8004e8c:	3718      	adds	r7, #24
 8004e8e:	46bd      	mov	sp, r7
 8004e90:	bd80      	pop	{r7, pc}
 8004e92:	bf00      	nop
 8004e94:	58024400 	.word	0x58024400

08004e98 <HAL_RCCEx_GetD3PCLK1Freq>:
  * @note   Each time D3PCLK1 changes, this function must be called to update the
  *         right D3PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval D3PCLK1 frequency
  */
uint32_t HAL_RCCEx_GetD3PCLK1Freq(void)
{
 8004e98:	b580      	push	{r7, lr}
 8004e9a:	af00      	add	r7, sp, #0
#if defined(RCC_D3CFGR_D3PPRE)
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->D3CFGR & RCC_D3CFGR_D3PPRE)>> RCC_D3CFGR_D3PPRE_Pos] & 0x1FU));
 8004e9c:	f7ff f8a6 	bl	8003fec <HAL_RCC_GetHCLKFreq>
 8004ea0:	4602      	mov	r2, r0
 8004ea2:	4b06      	ldr	r3, [pc, #24]	; (8004ebc <HAL_RCCEx_GetD3PCLK1Freq+0x24>)
 8004ea4:	6a1b      	ldr	r3, [r3, #32]
 8004ea6:	091b      	lsrs	r3, r3, #4
 8004ea8:	f003 0307 	and.w	r3, r3, #7
 8004eac:	4904      	ldr	r1, [pc, #16]	; (8004ec0 <HAL_RCCEx_GetD3PCLK1Freq+0x28>)
 8004eae:	5ccb      	ldrb	r3, [r1, r3]
 8004eb0:	f003 031f 	and.w	r3, r3, #31
 8004eb4:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE)>> RCC_SRDCFGR_SRDPPRE_Pos] & 0x1FU));
#endif
}
 8004eb8:	4618      	mov	r0, r3
 8004eba:	bd80      	pop	{r7, pc}
 8004ebc:	58024400 	.word	0x58024400
 8004ec0:	08008e14 	.word	0x08008e14

08004ec4 <HAL_RCCEx_GetPLL2ClockFreq>:
  *         right PLL2CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL2_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL2ClockFreq(PLL2_ClocksTypeDef* PLL2_Clocks)
{
 8004ec4:	b480      	push	{r7}
 8004ec6:	b089      	sub	sp, #36	; 0x24
 8004ec8:	af00      	add	r7, sp, #0
 8004eca:	6078      	str	r0, [r7, #4]
  float_t fracn2, pll2vco;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL2M) * PLL2N
     PLL2xCLK = PLL2_VCO / PLL2x
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8004ecc:	4ba1      	ldr	r3, [pc, #644]	; (8005154 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8004ece:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004ed0:	f003 0303 	and.w	r3, r3, #3
 8004ed4:	61bb      	str	r3, [r7, #24]
  pll2m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM2)>> 12);
 8004ed6:	4b9f      	ldr	r3, [pc, #636]	; (8005154 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8004ed8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004eda:	0b1b      	lsrs	r3, r3, #12
 8004edc:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8004ee0:	617b      	str	r3, [r7, #20]
  pll2fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL2FRACEN) >> RCC_PLLCFGR_PLL2FRACEN_Pos;
 8004ee2:	4b9c      	ldr	r3, [pc, #624]	; (8005154 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8004ee4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004ee6:	091b      	lsrs	r3, r3, #4
 8004ee8:	f003 0301 	and.w	r3, r3, #1
 8004eec:	613b      	str	r3, [r7, #16]
  fracn2 =(float_t)(uint32_t)(pll2fracen* ((RCC->PLL2FRACR & RCC_PLL2FRACR_FRACN2)>> 3));
 8004eee:	4b99      	ldr	r3, [pc, #612]	; (8005154 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8004ef0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004ef2:	08db      	lsrs	r3, r3, #3
 8004ef4:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8004ef8:	693a      	ldr	r2, [r7, #16]
 8004efa:	fb02 f303 	mul.w	r3, r2, r3
 8004efe:	ee07 3a90 	vmov	s15, r3
 8004f02:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004f06:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll2m != 0U)
 8004f0a:	697b      	ldr	r3, [r7, #20]
 8004f0c:	2b00      	cmp	r3, #0
 8004f0e:	f000 8111 	beq.w	8005134 <HAL_RCCEx_GetPLL2ClockFreq+0x270>
  {
    switch (pllsource)
 8004f12:	69bb      	ldr	r3, [r7, #24]
 8004f14:	2b02      	cmp	r3, #2
 8004f16:	f000 8083 	beq.w	8005020 <HAL_RCCEx_GetPLL2ClockFreq+0x15c>
 8004f1a:	69bb      	ldr	r3, [r7, #24]
 8004f1c:	2b02      	cmp	r3, #2
 8004f1e:	f200 80a1 	bhi.w	8005064 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
 8004f22:	69bb      	ldr	r3, [r7, #24]
 8004f24:	2b00      	cmp	r3, #0
 8004f26:	d003      	beq.n	8004f30 <HAL_RCCEx_GetPLL2ClockFreq+0x6c>
 8004f28:	69bb      	ldr	r3, [r7, #24]
 8004f2a:	2b01      	cmp	r3, #1
 8004f2c:	d056      	beq.n	8004fdc <HAL_RCCEx_GetPLL2ClockFreq+0x118>
 8004f2e:	e099      	b.n	8005064 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
    {

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8004f30:	4b88      	ldr	r3, [pc, #544]	; (8005154 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8004f32:	681b      	ldr	r3, [r3, #0]
 8004f34:	f003 0320 	and.w	r3, r3, #32
 8004f38:	2b00      	cmp	r3, #0
 8004f3a:	d02d      	beq.n	8004f98 <HAL_RCCEx_GetPLL2ClockFreq+0xd4>
      {
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8004f3c:	4b85      	ldr	r3, [pc, #532]	; (8005154 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8004f3e:	681b      	ldr	r3, [r3, #0]
 8004f40:	08db      	lsrs	r3, r3, #3
 8004f42:	f003 0303 	and.w	r3, r3, #3
 8004f46:	4a84      	ldr	r2, [pc, #528]	; (8005158 <HAL_RCCEx_GetPLL2ClockFreq+0x294>)
 8004f48:	fa22 f303 	lsr.w	r3, r2, r3
 8004f4c:	60bb      	str	r3, [r7, #8]
        pll2vco = ( (float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 8004f4e:	68bb      	ldr	r3, [r7, #8]
 8004f50:	ee07 3a90 	vmov	s15, r3
 8004f54:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004f58:	697b      	ldr	r3, [r7, #20]
 8004f5a:	ee07 3a90 	vmov	s15, r3
 8004f5e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004f62:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004f66:	4b7b      	ldr	r3, [pc, #492]	; (8005154 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8004f68:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004f6a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004f6e:	ee07 3a90 	vmov	s15, r3
 8004f72:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004f76:	ed97 6a03 	vldr	s12, [r7, #12]
 8004f7a:	eddf 5a78 	vldr	s11, [pc, #480]	; 800515c <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8004f7e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004f82:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004f86:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8004f8a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004f8e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004f92:	edc7 7a07 	vstr	s15, [r7, #28]
      }
      else
      {
        pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
      }
      break;
 8004f96:	e087      	b.n	80050a8 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>
        pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 8004f98:	697b      	ldr	r3, [r7, #20]
 8004f9a:	ee07 3a90 	vmov	s15, r3
 8004f9e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004fa2:	eddf 6a6f 	vldr	s13, [pc, #444]	; 8005160 <HAL_RCCEx_GetPLL2ClockFreq+0x29c>
 8004fa6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004faa:	4b6a      	ldr	r3, [pc, #424]	; (8005154 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8004fac:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004fae:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004fb2:	ee07 3a90 	vmov	s15, r3
 8004fb6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004fba:	ed97 6a03 	vldr	s12, [r7, #12]
 8004fbe:	eddf 5a67 	vldr	s11, [pc, #412]	; 800515c <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8004fc2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004fc6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004fca:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8004fce:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004fd2:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004fd6:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8004fda:	e065      	b.n	80050a8 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

    case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
      pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 8004fdc:	697b      	ldr	r3, [r7, #20]
 8004fde:	ee07 3a90 	vmov	s15, r3
 8004fe2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004fe6:	eddf 6a5f 	vldr	s13, [pc, #380]	; 8005164 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 8004fea:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004fee:	4b59      	ldr	r3, [pc, #356]	; (8005154 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8004ff0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004ff2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004ff6:	ee07 3a90 	vmov	s15, r3
 8004ffa:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004ffe:	ed97 6a03 	vldr	s12, [r7, #12]
 8005002:	eddf 5a56 	vldr	s11, [pc, #344]	; 800515c <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8005006:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800500a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800500e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8005012:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8005016:	ee67 7a27 	vmul.f32	s15, s14, s15
 800501a:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800501e:	e043      	b.n	80050a8 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 8005020:	697b      	ldr	r3, [r7, #20]
 8005022:	ee07 3a90 	vmov	s15, r3
 8005026:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800502a:	eddf 6a4f 	vldr	s13, [pc, #316]	; 8005168 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>
 800502e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005032:	4b48      	ldr	r3, [pc, #288]	; (8005154 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8005034:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005036:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800503a:	ee07 3a90 	vmov	s15, r3
 800503e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005042:	ed97 6a03 	vldr	s12, [r7, #12]
 8005046:	eddf 5a45 	vldr	s11, [pc, #276]	; 800515c <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800504a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800504e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8005052:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8005056:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800505a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800505e:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8005062:	e021      	b.n	80050a8 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

    default:
      pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 8005064:	697b      	ldr	r3, [r7, #20]
 8005066:	ee07 3a90 	vmov	s15, r3
 800506a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800506e:	eddf 6a3d 	vldr	s13, [pc, #244]	; 8005164 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 8005072:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005076:	4b37      	ldr	r3, [pc, #220]	; (8005154 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8005078:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800507a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800507e:	ee07 3a90 	vmov	s15, r3
 8005082:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005086:	ed97 6a03 	vldr	s12, [r7, #12]
 800508a:	eddf 5a34 	vldr	s11, [pc, #208]	; 800515c <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800508e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8005092:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8005096:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800509a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800509e:	ee67 7a27 	vmul.f32	s15, s14, s15
 80050a2:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 80050a6:	bf00      	nop
    }
    PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_P2) >>9)  + (float_t)1 )) ;
 80050a8:	4b2a      	ldr	r3, [pc, #168]	; (8005154 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80050aa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80050ac:	0a5b      	lsrs	r3, r3, #9
 80050ae:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80050b2:	ee07 3a90 	vmov	s15, r3
 80050b6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80050ba:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80050be:	ee37 7a87 	vadd.f32	s14, s15, s14
 80050c2:	edd7 6a07 	vldr	s13, [r7, #28]
 80050c6:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80050ca:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80050ce:	ee17 2a90 	vmov	r2, s15
 80050d2:	687b      	ldr	r3, [r7, #4]
 80050d4:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_Q2) >>16) + (float_t)1 )) ;
 80050d6:	4b1f      	ldr	r3, [pc, #124]	; (8005154 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80050d8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80050da:	0c1b      	lsrs	r3, r3, #16
 80050dc:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80050e0:	ee07 3a90 	vmov	s15, r3
 80050e4:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80050e8:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80050ec:	ee37 7a87 	vadd.f32	s14, s15, s14
 80050f0:	edd7 6a07 	vldr	s13, [r7, #28]
 80050f4:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80050f8:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80050fc:	ee17 2a90 	vmov	r2, s15
 8005100:	687b      	ldr	r3, [r7, #4]
 8005102:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_R2) >>24) + (float_t)1 )) ;
 8005104:	4b13      	ldr	r3, [pc, #76]	; (8005154 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8005106:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005108:	0e1b      	lsrs	r3, r3, #24
 800510a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800510e:	ee07 3a90 	vmov	s15, r3
 8005112:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005116:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800511a:	ee37 7a87 	vadd.f32	s14, s15, s14
 800511e:	edd7 6a07 	vldr	s13, [r7, #28]
 8005122:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8005126:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800512a:	ee17 2a90 	vmov	r2, s15
 800512e:	687b      	ldr	r3, [r7, #4]
 8005130:	609a      	str	r2, [r3, #8]
  {
    PLL2_Clocks->PLL2_P_Frequency = 0U;
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
    PLL2_Clocks->PLL2_R_Frequency = 0U;
  }
}
 8005132:	e008      	b.n	8005146 <HAL_RCCEx_GetPLL2ClockFreq+0x282>
    PLL2_Clocks->PLL2_P_Frequency = 0U;
 8005134:	687b      	ldr	r3, [r7, #4]
 8005136:	2200      	movs	r2, #0
 8005138:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
 800513a:	687b      	ldr	r3, [r7, #4]
 800513c:	2200      	movs	r2, #0
 800513e:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = 0U;
 8005140:	687b      	ldr	r3, [r7, #4]
 8005142:	2200      	movs	r2, #0
 8005144:	609a      	str	r2, [r3, #8]
}
 8005146:	bf00      	nop
 8005148:	3724      	adds	r7, #36	; 0x24
 800514a:	46bd      	mov	sp, r7
 800514c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005150:	4770      	bx	lr
 8005152:	bf00      	nop
 8005154:	58024400 	.word	0x58024400
 8005158:	03d09000 	.word	0x03d09000
 800515c:	46000000 	.word	0x46000000
 8005160:	4c742400 	.word	0x4c742400
 8005164:	4a742400 	.word	0x4a742400
 8005168:	4af42400 	.word	0x4af42400

0800516c <HAL_RCCEx_GetPLL3ClockFreq>:
  *         right PLL3CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL3_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL3ClockFreq(PLL3_ClocksTypeDef* PLL3_Clocks)
{
 800516c:	b480      	push	{r7}
 800516e:	b089      	sub	sp, #36	; 0x24
 8005170:	af00      	add	r7, sp, #0
 8005172:	6078      	str	r0, [r7, #4]
  float_t fracn3, pll3vco;

  /* PLL3_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL3M) * PLL3N
     PLL3xCLK = PLL3_VCO / PLLxR
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8005174:	4ba1      	ldr	r3, [pc, #644]	; (80053fc <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8005176:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005178:	f003 0303 	and.w	r3, r3, #3
 800517c:	61bb      	str	r3, [r7, #24]
  pll3m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM3)>> 20)  ;
 800517e:	4b9f      	ldr	r3, [pc, #636]	; (80053fc <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8005180:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005182:	0d1b      	lsrs	r3, r3, #20
 8005184:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8005188:	617b      	str	r3, [r7, #20]
  pll3fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL3FRACEN) >> RCC_PLLCFGR_PLL3FRACEN_Pos;
 800518a:	4b9c      	ldr	r3, [pc, #624]	; (80053fc <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800518c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800518e:	0a1b      	lsrs	r3, r3, #8
 8005190:	f003 0301 	and.w	r3, r3, #1
 8005194:	613b      	str	r3, [r7, #16]
  fracn3 = (float_t)(uint32_t)(pll3fracen* ((RCC->PLL3FRACR & RCC_PLL3FRACR_FRACN3)>> 3));
 8005196:	4b99      	ldr	r3, [pc, #612]	; (80053fc <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8005198:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800519a:	08db      	lsrs	r3, r3, #3
 800519c:	f3c3 030c 	ubfx	r3, r3, #0, #13
 80051a0:	693a      	ldr	r2, [r7, #16]
 80051a2:	fb02 f303 	mul.w	r3, r2, r3
 80051a6:	ee07 3a90 	vmov	s15, r3
 80051aa:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80051ae:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll3m != 0U)
 80051b2:	697b      	ldr	r3, [r7, #20]
 80051b4:	2b00      	cmp	r3, #0
 80051b6:	f000 8111 	beq.w	80053dc <HAL_RCCEx_GetPLL3ClockFreq+0x270>
  {
    switch (pllsource)
 80051ba:	69bb      	ldr	r3, [r7, #24]
 80051bc:	2b02      	cmp	r3, #2
 80051be:	f000 8083 	beq.w	80052c8 <HAL_RCCEx_GetPLL3ClockFreq+0x15c>
 80051c2:	69bb      	ldr	r3, [r7, #24]
 80051c4:	2b02      	cmp	r3, #2
 80051c6:	f200 80a1 	bhi.w	800530c <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
 80051ca:	69bb      	ldr	r3, [r7, #24]
 80051cc:	2b00      	cmp	r3, #0
 80051ce:	d003      	beq.n	80051d8 <HAL_RCCEx_GetPLL3ClockFreq+0x6c>
 80051d0:	69bb      	ldr	r3, [r7, #24]
 80051d2:	2b01      	cmp	r3, #1
 80051d4:	d056      	beq.n	8005284 <HAL_RCCEx_GetPLL3ClockFreq+0x118>
 80051d6:	e099      	b.n	800530c <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80051d8:	4b88      	ldr	r3, [pc, #544]	; (80053fc <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80051da:	681b      	ldr	r3, [r3, #0]
 80051dc:	f003 0320 	and.w	r3, r3, #32
 80051e0:	2b00      	cmp	r3, #0
 80051e2:	d02d      	beq.n	8005240 <HAL_RCCEx_GetPLL3ClockFreq+0xd4>
      {
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 80051e4:	4b85      	ldr	r3, [pc, #532]	; (80053fc <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80051e6:	681b      	ldr	r3, [r3, #0]
 80051e8:	08db      	lsrs	r3, r3, #3
 80051ea:	f003 0303 	and.w	r3, r3, #3
 80051ee:	4a84      	ldr	r2, [pc, #528]	; (8005400 <HAL_RCCEx_GetPLL3ClockFreq+0x294>)
 80051f0:	fa22 f303 	lsr.w	r3, r2, r3
 80051f4:	60bb      	str	r3, [r7, #8]
        pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 80051f6:	68bb      	ldr	r3, [r7, #8]
 80051f8:	ee07 3a90 	vmov	s15, r3
 80051fc:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005200:	697b      	ldr	r3, [r7, #20]
 8005202:	ee07 3a90 	vmov	s15, r3
 8005206:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800520a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800520e:	4b7b      	ldr	r3, [pc, #492]	; (80053fc <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8005210:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005212:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005216:	ee07 3a90 	vmov	s15, r3
 800521a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800521e:	ed97 6a03 	vldr	s12, [r7, #12]
 8005222:	eddf 5a78 	vldr	s11, [pc, #480]	; 8005404 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8005226:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800522a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800522e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8005232:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8005236:	ee67 7a27 	vmul.f32	s15, s14, s15
 800523a:	edc7 7a07 	vstr	s15, [r7, #28]
      }
      else
      {
        pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
      }
      break;
 800523e:	e087      	b.n	8005350 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
        pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 8005240:	697b      	ldr	r3, [r7, #20]
 8005242:	ee07 3a90 	vmov	s15, r3
 8005246:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800524a:	eddf 6a6f 	vldr	s13, [pc, #444]	; 8005408 <HAL_RCCEx_GetPLL3ClockFreq+0x29c>
 800524e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005252:	4b6a      	ldr	r3, [pc, #424]	; (80053fc <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8005254:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005256:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800525a:	ee07 3a90 	vmov	s15, r3
 800525e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005262:	ed97 6a03 	vldr	s12, [r7, #12]
 8005266:	eddf 5a67 	vldr	s11, [pc, #412]	; 8005404 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800526a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800526e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8005272:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8005276:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800527a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800527e:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8005282:	e065      	b.n	8005350 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
    case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
      pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 8005284:	697b      	ldr	r3, [r7, #20]
 8005286:	ee07 3a90 	vmov	s15, r3
 800528a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800528e:	eddf 6a5f 	vldr	s13, [pc, #380]	; 800540c <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 8005292:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005296:	4b59      	ldr	r3, [pc, #356]	; (80053fc <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8005298:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800529a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800529e:	ee07 3a90 	vmov	s15, r3
 80052a2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80052a6:	ed97 6a03 	vldr	s12, [r7, #12]
 80052aa:	eddf 5a56 	vldr	s11, [pc, #344]	; 8005404 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 80052ae:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80052b2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80052b6:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80052ba:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80052be:	ee67 7a27 	vmul.f32	s15, s14, s15
 80052c2:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 80052c6:	e043      	b.n	8005350 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 80052c8:	697b      	ldr	r3, [r7, #20]
 80052ca:	ee07 3a90 	vmov	s15, r3
 80052ce:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80052d2:	eddf 6a4f 	vldr	s13, [pc, #316]	; 8005410 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>
 80052d6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80052da:	4b48      	ldr	r3, [pc, #288]	; (80053fc <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80052dc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80052de:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80052e2:	ee07 3a90 	vmov	s15, r3
 80052e6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80052ea:	ed97 6a03 	vldr	s12, [r7, #12]
 80052ee:	eddf 5a45 	vldr	s11, [pc, #276]	; 8005404 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 80052f2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80052f6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80052fa:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80052fe:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8005302:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005306:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800530a:	e021      	b.n	8005350 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

    default:
      pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 800530c:	697b      	ldr	r3, [r7, #20]
 800530e:	ee07 3a90 	vmov	s15, r3
 8005312:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005316:	eddf 6a3d 	vldr	s13, [pc, #244]	; 800540c <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 800531a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800531e:	4b37      	ldr	r3, [pc, #220]	; (80053fc <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8005320:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005322:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005326:	ee07 3a90 	vmov	s15, r3
 800532a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800532e:	ed97 6a03 	vldr	s12, [r7, #12]
 8005332:	eddf 5a34 	vldr	s11, [pc, #208]	; 8005404 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8005336:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800533a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800533e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8005342:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8005346:	ee67 7a27 	vmul.f32	s15, s14, s15
 800534a:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800534e:	bf00      	nop
    }
    PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_P3) >>9)  + (float_t)1 )) ;
 8005350:	4b2a      	ldr	r3, [pc, #168]	; (80053fc <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8005352:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005354:	0a5b      	lsrs	r3, r3, #9
 8005356:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800535a:	ee07 3a90 	vmov	s15, r3
 800535e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005362:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8005366:	ee37 7a87 	vadd.f32	s14, s15, s14
 800536a:	edd7 6a07 	vldr	s13, [r7, #28]
 800536e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8005372:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8005376:	ee17 2a90 	vmov	r2, s15
 800537a:	687b      	ldr	r3, [r7, #4]
 800537c:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_Q3) >>16) + (float_t)1 )) ;
 800537e:	4b1f      	ldr	r3, [pc, #124]	; (80053fc <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8005380:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005382:	0c1b      	lsrs	r3, r3, #16
 8005384:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8005388:	ee07 3a90 	vmov	s15, r3
 800538c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005390:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8005394:	ee37 7a87 	vadd.f32	s14, s15, s14
 8005398:	edd7 6a07 	vldr	s13, [r7, #28]
 800539c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80053a0:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80053a4:	ee17 2a90 	vmov	r2, s15
 80053a8:	687b      	ldr	r3, [r7, #4]
 80053aa:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_R3) >>24) + (float_t)1 )) ;
 80053ac:	4b13      	ldr	r3, [pc, #76]	; (80053fc <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80053ae:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80053b0:	0e1b      	lsrs	r3, r3, #24
 80053b2:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80053b6:	ee07 3a90 	vmov	s15, r3
 80053ba:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80053be:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80053c2:	ee37 7a87 	vadd.f32	s14, s15, s14
 80053c6:	edd7 6a07 	vldr	s13, [r7, #28]
 80053ca:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80053ce:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80053d2:	ee17 2a90 	vmov	r2, s15
 80053d6:	687b      	ldr	r3, [r7, #4]
 80053d8:	609a      	str	r2, [r3, #8]
    PLL3_Clocks->PLL3_P_Frequency = 0U;
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
    PLL3_Clocks->PLL3_R_Frequency = 0U;
  }

}
 80053da:	e008      	b.n	80053ee <HAL_RCCEx_GetPLL3ClockFreq+0x282>
    PLL3_Clocks->PLL3_P_Frequency = 0U;
 80053dc:	687b      	ldr	r3, [r7, #4]
 80053de:	2200      	movs	r2, #0
 80053e0:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
 80053e2:	687b      	ldr	r3, [r7, #4]
 80053e4:	2200      	movs	r2, #0
 80053e6:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = 0U;
 80053e8:	687b      	ldr	r3, [r7, #4]
 80053ea:	2200      	movs	r2, #0
 80053ec:	609a      	str	r2, [r3, #8]
}
 80053ee:	bf00      	nop
 80053f0:	3724      	adds	r7, #36	; 0x24
 80053f2:	46bd      	mov	sp, r7
 80053f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053f8:	4770      	bx	lr
 80053fa:	bf00      	nop
 80053fc:	58024400 	.word	0x58024400
 8005400:	03d09000 	.word	0x03d09000
 8005404:	46000000 	.word	0x46000000
 8005408:	4c742400 	.word	0x4c742400
 800540c:	4a742400 	.word	0x4a742400
 8005410:	4af42400 	.word	0x4af42400

08005414 <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(RCC_PLL2InitTypeDef *pll2, uint32_t Divider)
{
 8005414:	b580      	push	{r7, lr}
 8005416:	b084      	sub	sp, #16
 8005418:	af00      	add	r7, sp, #0
 800541a:	6078      	str	r0, [r7, #4]
 800541c:	6039      	str	r1, [r7, #0]

  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800541e:	2300      	movs	r3, #0
 8005420:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL2RGE_VALUE(pll2->PLL2RGE));
  assert_param(IS_RCC_PLL2VCO_VALUE(pll2->PLL2VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll2->PLL2FRACN));

  /* Check that PLL2 OSC clock source is already set */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8005422:	4b53      	ldr	r3, [pc, #332]	; (8005570 <RCCEx_PLL2_Config+0x15c>)
 8005424:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005426:	f003 0303 	and.w	r3, r3, #3
 800542a:	2b03      	cmp	r3, #3
 800542c:	d101      	bne.n	8005432 <RCCEx_PLL2_Config+0x1e>
  {
    return HAL_ERROR;
 800542e:	2301      	movs	r3, #1
 8005430:	e099      	b.n	8005566 <RCCEx_PLL2_Config+0x152>


  else
  {
    /* Disable  PLL2. */
    __HAL_RCC_PLL2_DISABLE();
 8005432:	4b4f      	ldr	r3, [pc, #316]	; (8005570 <RCCEx_PLL2_Config+0x15c>)
 8005434:	681b      	ldr	r3, [r3, #0]
 8005436:	4a4e      	ldr	r2, [pc, #312]	; (8005570 <RCCEx_PLL2_Config+0x15c>)
 8005438:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 800543c:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800543e:	f7fc f95b 	bl	80016f8 <HAL_GetTick>
 8005442:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8005444:	e008      	b.n	8005458 <RCCEx_PLL2_Config+0x44>
    {
      if( (HAL_GetTick() - tickstart ) > PLL2_TIMEOUT_VALUE)
 8005446:	f7fc f957 	bl	80016f8 <HAL_GetTick>
 800544a:	4602      	mov	r2, r0
 800544c:	68bb      	ldr	r3, [r7, #8]
 800544e:	1ad3      	subs	r3, r2, r3
 8005450:	2b02      	cmp	r3, #2
 8005452:	d901      	bls.n	8005458 <RCCEx_PLL2_Config+0x44>
      {
        return HAL_TIMEOUT;
 8005454:	2303      	movs	r3, #3
 8005456:	e086      	b.n	8005566 <RCCEx_PLL2_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8005458:	4b45      	ldr	r3, [pc, #276]	; (8005570 <RCCEx_PLL2_Config+0x15c>)
 800545a:	681b      	ldr	r3, [r3, #0]
 800545c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8005460:	2b00      	cmp	r3, #0
 8005462:	d1f0      	bne.n	8005446 <RCCEx_PLL2_Config+0x32>
      }
    }

    /* Configure PLL2 multiplication and division factors. */
    __HAL_RCC_PLL2_CONFIG(pll2->PLL2M,
 8005464:	4b42      	ldr	r3, [pc, #264]	; (8005570 <RCCEx_PLL2_Config+0x15c>)
 8005466:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005468:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 800546c:	687b      	ldr	r3, [r7, #4]
 800546e:	681b      	ldr	r3, [r3, #0]
 8005470:	031b      	lsls	r3, r3, #12
 8005472:	493f      	ldr	r1, [pc, #252]	; (8005570 <RCCEx_PLL2_Config+0x15c>)
 8005474:	4313      	orrs	r3, r2
 8005476:	628b      	str	r3, [r1, #40]	; 0x28
 8005478:	687b      	ldr	r3, [r7, #4]
 800547a:	685b      	ldr	r3, [r3, #4]
 800547c:	3b01      	subs	r3, #1
 800547e:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8005482:	687b      	ldr	r3, [r7, #4]
 8005484:	689b      	ldr	r3, [r3, #8]
 8005486:	3b01      	subs	r3, #1
 8005488:	025b      	lsls	r3, r3, #9
 800548a:	b29b      	uxth	r3, r3
 800548c:	431a      	orrs	r2, r3
 800548e:	687b      	ldr	r3, [r7, #4]
 8005490:	68db      	ldr	r3, [r3, #12]
 8005492:	3b01      	subs	r3, #1
 8005494:	041b      	lsls	r3, r3, #16
 8005496:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 800549a:	431a      	orrs	r2, r3
 800549c:	687b      	ldr	r3, [r7, #4]
 800549e:	691b      	ldr	r3, [r3, #16]
 80054a0:	3b01      	subs	r3, #1
 80054a2:	061b      	lsls	r3, r3, #24
 80054a4:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 80054a8:	4931      	ldr	r1, [pc, #196]	; (8005570 <RCCEx_PLL2_Config+0x15c>)
 80054aa:	4313      	orrs	r3, r2
 80054ac:	638b      	str	r3, [r1, #56]	; 0x38
                          pll2->PLL2P,
                          pll2->PLL2Q,
                          pll2->PLL2R);

    /* Select PLL2 input reference frequency range: VCI */
    __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE) ;
 80054ae:	4b30      	ldr	r3, [pc, #192]	; (8005570 <RCCEx_PLL2_Config+0x15c>)
 80054b0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80054b2:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 80054b6:	687b      	ldr	r3, [r7, #4]
 80054b8:	695b      	ldr	r3, [r3, #20]
 80054ba:	492d      	ldr	r1, [pc, #180]	; (8005570 <RCCEx_PLL2_Config+0x15c>)
 80054bc:	4313      	orrs	r3, r2
 80054be:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL2 output frequency range : VCO */
    __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL) ;
 80054c0:	4b2b      	ldr	r3, [pc, #172]	; (8005570 <RCCEx_PLL2_Config+0x15c>)
 80054c2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80054c4:	f023 0220 	bic.w	r2, r3, #32
 80054c8:	687b      	ldr	r3, [r7, #4]
 80054ca:	699b      	ldr	r3, [r3, #24]
 80054cc:	4928      	ldr	r1, [pc, #160]	; (8005570 <RCCEx_PLL2_Config+0x15c>)
 80054ce:	4313      	orrs	r3, r2
 80054d0:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_DISABLE();
 80054d2:	4b27      	ldr	r3, [pc, #156]	; (8005570 <RCCEx_PLL2_Config+0x15c>)
 80054d4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80054d6:	4a26      	ldr	r2, [pc, #152]	; (8005570 <RCCEx_PLL2_Config+0x15c>)
 80054d8:	f023 0310 	bic.w	r3, r3, #16
 80054dc:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 80054de:	4b24      	ldr	r3, [pc, #144]	; (8005570 <RCCEx_PLL2_Config+0x15c>)
 80054e0:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80054e2:	4b24      	ldr	r3, [pc, #144]	; (8005574 <RCCEx_PLL2_Config+0x160>)
 80054e4:	4013      	ands	r3, r2
 80054e6:	687a      	ldr	r2, [r7, #4]
 80054e8:	69d2      	ldr	r2, [r2, #28]
 80054ea:	00d2      	lsls	r2, r2, #3
 80054ec:	4920      	ldr	r1, [pc, #128]	; (8005570 <RCCEx_PLL2_Config+0x15c>)
 80054ee:	4313      	orrs	r3, r2
 80054f0:	63cb      	str	r3, [r1, #60]	; 0x3c

    /* Enable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_ENABLE();
 80054f2:	4b1f      	ldr	r3, [pc, #124]	; (8005570 <RCCEx_PLL2_Config+0x15c>)
 80054f4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80054f6:	4a1e      	ldr	r2, [pc, #120]	; (8005570 <RCCEx_PLL2_Config+0x15c>)
 80054f8:	f043 0310 	orr.w	r3, r3, #16
 80054fc:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL2 clock output */
    if(Divider == DIVIDER_P_UPDATE)
 80054fe:	683b      	ldr	r3, [r7, #0]
 8005500:	2b00      	cmp	r3, #0
 8005502:	d106      	bne.n	8005512 <RCCEx_PLL2_Config+0xfe>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 8005504:	4b1a      	ldr	r3, [pc, #104]	; (8005570 <RCCEx_PLL2_Config+0x15c>)
 8005506:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005508:	4a19      	ldr	r2, [pc, #100]	; (8005570 <RCCEx_PLL2_Config+0x15c>)
 800550a:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800550e:	62d3      	str	r3, [r2, #44]	; 0x2c
 8005510:	e00f      	b.n	8005532 <RCCEx_PLL2_Config+0x11e>
    }
    else if(Divider == DIVIDER_Q_UPDATE)
 8005512:	683b      	ldr	r3, [r7, #0]
 8005514:	2b01      	cmp	r3, #1
 8005516:	d106      	bne.n	8005526 <RCCEx_PLL2_Config+0x112>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVQ);
 8005518:	4b15      	ldr	r3, [pc, #84]	; (8005570 <RCCEx_PLL2_Config+0x15c>)
 800551a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800551c:	4a14      	ldr	r2, [pc, #80]	; (8005570 <RCCEx_PLL2_Config+0x15c>)
 800551e:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8005522:	62d3      	str	r3, [r2, #44]	; 0x2c
 8005524:	e005      	b.n	8005532 <RCCEx_PLL2_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVR);
 8005526:	4b12      	ldr	r3, [pc, #72]	; (8005570 <RCCEx_PLL2_Config+0x15c>)
 8005528:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800552a:	4a11      	ldr	r2, [pc, #68]	; (8005570 <RCCEx_PLL2_Config+0x15c>)
 800552c:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8005530:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL2. */
    __HAL_RCC_PLL2_ENABLE();
 8005532:	4b0f      	ldr	r3, [pc, #60]	; (8005570 <RCCEx_PLL2_Config+0x15c>)
 8005534:	681b      	ldr	r3, [r3, #0]
 8005536:	4a0e      	ldr	r2, [pc, #56]	; (8005570 <RCCEx_PLL2_Config+0x15c>)
 8005538:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 800553c:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800553e:	f7fc f8db 	bl	80016f8 <HAL_GetTick>
 8005542:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL2 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8005544:	e008      	b.n	8005558 <RCCEx_PLL2_Config+0x144>
    {
      if( (HAL_GetTick() - tickstart ) > PLL2_TIMEOUT_VALUE)
 8005546:	f7fc f8d7 	bl	80016f8 <HAL_GetTick>
 800554a:	4602      	mov	r2, r0
 800554c:	68bb      	ldr	r3, [r7, #8]
 800554e:	1ad3      	subs	r3, r2, r3
 8005550:	2b02      	cmp	r3, #2
 8005552:	d901      	bls.n	8005558 <RCCEx_PLL2_Config+0x144>
      {
        return HAL_TIMEOUT;
 8005554:	2303      	movs	r3, #3
 8005556:	e006      	b.n	8005566 <RCCEx_PLL2_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8005558:	4b05      	ldr	r3, [pc, #20]	; (8005570 <RCCEx_PLL2_Config+0x15c>)
 800555a:	681b      	ldr	r3, [r3, #0]
 800555c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8005560:	2b00      	cmp	r3, #0
 8005562:	d0f0      	beq.n	8005546 <RCCEx_PLL2_Config+0x132>
    }

  }


  return status;
 8005564:	7bfb      	ldrb	r3, [r7, #15]
}
 8005566:	4618      	mov	r0, r3
 8005568:	3710      	adds	r7, #16
 800556a:	46bd      	mov	sp, r7
 800556c:	bd80      	pop	{r7, pc}
 800556e:	bf00      	nop
 8005570:	58024400 	.word	0x58024400
 8005574:	ffff0007 	.word	0xffff0007

08005578 <RCCEx_PLL3_Config>:
  * @note   PLL3 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(RCC_PLL3InitTypeDef *pll3, uint32_t Divider)
{
 8005578:	b580      	push	{r7, lr}
 800557a:	b084      	sub	sp, #16
 800557c:	af00      	add	r7, sp, #0
 800557e:	6078      	str	r0, [r7, #4]
 8005580:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8005582:	2300      	movs	r3, #0
 8005584:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL3RGE_VALUE(pll3->PLL3RGE));
  assert_param(IS_RCC_PLL3VCO_VALUE(pll3->PLL3VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll3->PLL3FRACN));

  /* Check that PLL3 OSC clock source is already set */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8005586:	4b53      	ldr	r3, [pc, #332]	; (80056d4 <RCCEx_PLL3_Config+0x15c>)
 8005588:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800558a:	f003 0303 	and.w	r3, r3, #3
 800558e:	2b03      	cmp	r3, #3
 8005590:	d101      	bne.n	8005596 <RCCEx_PLL3_Config+0x1e>
  {
    return HAL_ERROR;
 8005592:	2301      	movs	r3, #1
 8005594:	e099      	b.n	80056ca <RCCEx_PLL3_Config+0x152>


  else
  {
    /* Disable  PLL3. */
    __HAL_RCC_PLL3_DISABLE();
 8005596:	4b4f      	ldr	r3, [pc, #316]	; (80056d4 <RCCEx_PLL3_Config+0x15c>)
 8005598:	681b      	ldr	r3, [r3, #0]
 800559a:	4a4e      	ldr	r2, [pc, #312]	; (80056d4 <RCCEx_PLL3_Config+0x15c>)
 800559c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80055a0:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80055a2:	f7fc f8a9 	bl	80016f8 <HAL_GetTick>
 80055a6:	60b8      	str	r0, [r7, #8]
    /* Wait till PLL3 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 80055a8:	e008      	b.n	80055bc <RCCEx_PLL3_Config+0x44>
    {
      if( (HAL_GetTick() - tickstart ) > PLL3_TIMEOUT_VALUE)
 80055aa:	f7fc f8a5 	bl	80016f8 <HAL_GetTick>
 80055ae:	4602      	mov	r2, r0
 80055b0:	68bb      	ldr	r3, [r7, #8]
 80055b2:	1ad3      	subs	r3, r2, r3
 80055b4:	2b02      	cmp	r3, #2
 80055b6:	d901      	bls.n	80055bc <RCCEx_PLL3_Config+0x44>
      {
        return HAL_TIMEOUT;
 80055b8:	2303      	movs	r3, #3
 80055ba:	e086      	b.n	80056ca <RCCEx_PLL3_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 80055bc:	4b45      	ldr	r3, [pc, #276]	; (80056d4 <RCCEx_PLL3_Config+0x15c>)
 80055be:	681b      	ldr	r3, [r3, #0]
 80055c0:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80055c4:	2b00      	cmp	r3, #0
 80055c6:	d1f0      	bne.n	80055aa <RCCEx_PLL3_Config+0x32>
      }
    }

    /* Configure the PLL3  multiplication and division factors. */
    __HAL_RCC_PLL3_CONFIG(pll3->PLL3M,
 80055c8:	4b42      	ldr	r3, [pc, #264]	; (80056d4 <RCCEx_PLL3_Config+0x15c>)
 80055ca:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80055cc:	f023 727c 	bic.w	r2, r3, #66060288	; 0x3f00000
 80055d0:	687b      	ldr	r3, [r7, #4]
 80055d2:	681b      	ldr	r3, [r3, #0]
 80055d4:	051b      	lsls	r3, r3, #20
 80055d6:	493f      	ldr	r1, [pc, #252]	; (80056d4 <RCCEx_PLL3_Config+0x15c>)
 80055d8:	4313      	orrs	r3, r2
 80055da:	628b      	str	r3, [r1, #40]	; 0x28
 80055dc:	687b      	ldr	r3, [r7, #4]
 80055de:	685b      	ldr	r3, [r3, #4]
 80055e0:	3b01      	subs	r3, #1
 80055e2:	f3c3 0208 	ubfx	r2, r3, #0, #9
 80055e6:	687b      	ldr	r3, [r7, #4]
 80055e8:	689b      	ldr	r3, [r3, #8]
 80055ea:	3b01      	subs	r3, #1
 80055ec:	025b      	lsls	r3, r3, #9
 80055ee:	b29b      	uxth	r3, r3
 80055f0:	431a      	orrs	r2, r3
 80055f2:	687b      	ldr	r3, [r7, #4]
 80055f4:	68db      	ldr	r3, [r3, #12]
 80055f6:	3b01      	subs	r3, #1
 80055f8:	041b      	lsls	r3, r3, #16
 80055fa:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 80055fe:	431a      	orrs	r2, r3
 8005600:	687b      	ldr	r3, [r7, #4]
 8005602:	691b      	ldr	r3, [r3, #16]
 8005604:	3b01      	subs	r3, #1
 8005606:	061b      	lsls	r3, r3, #24
 8005608:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 800560c:	4931      	ldr	r1, [pc, #196]	; (80056d4 <RCCEx_PLL3_Config+0x15c>)
 800560e:	4313      	orrs	r3, r2
 8005610:	640b      	str	r3, [r1, #64]	; 0x40
                          pll3->PLL3P,
                          pll3->PLL3Q,
                          pll3->PLL3R);

    /* Select PLL3 input reference frequency range: VCI */
    __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE) ;
 8005612:	4b30      	ldr	r3, [pc, #192]	; (80056d4 <RCCEx_PLL3_Config+0x15c>)
 8005614:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005616:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 800561a:	687b      	ldr	r3, [r7, #4]
 800561c:	695b      	ldr	r3, [r3, #20]
 800561e:	492d      	ldr	r1, [pc, #180]	; (80056d4 <RCCEx_PLL3_Config+0x15c>)
 8005620:	4313      	orrs	r3, r2
 8005622:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL3 output frequency range : VCO */
    __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL) ;
 8005624:	4b2b      	ldr	r3, [pc, #172]	; (80056d4 <RCCEx_PLL3_Config+0x15c>)
 8005626:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005628:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 800562c:	687b      	ldr	r3, [r7, #4]
 800562e:	699b      	ldr	r3, [r3, #24]
 8005630:	4928      	ldr	r1, [pc, #160]	; (80056d4 <RCCEx_PLL3_Config+0x15c>)
 8005632:	4313      	orrs	r3, r2
 8005634:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_DISABLE();
 8005636:	4b27      	ldr	r3, [pc, #156]	; (80056d4 <RCCEx_PLL3_Config+0x15c>)
 8005638:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800563a:	4a26      	ldr	r2, [pc, #152]	; (80056d4 <RCCEx_PLL3_Config+0x15c>)
 800563c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8005640:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 8005642:	4b24      	ldr	r3, [pc, #144]	; (80056d4 <RCCEx_PLL3_Config+0x15c>)
 8005644:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8005646:	4b24      	ldr	r3, [pc, #144]	; (80056d8 <RCCEx_PLL3_Config+0x160>)
 8005648:	4013      	ands	r3, r2
 800564a:	687a      	ldr	r2, [r7, #4]
 800564c:	69d2      	ldr	r2, [r2, #28]
 800564e:	00d2      	lsls	r2, r2, #3
 8005650:	4920      	ldr	r1, [pc, #128]	; (80056d4 <RCCEx_PLL3_Config+0x15c>)
 8005652:	4313      	orrs	r3, r2
 8005654:	644b      	str	r3, [r1, #68]	; 0x44

    /* Enable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_ENABLE();
 8005656:	4b1f      	ldr	r3, [pc, #124]	; (80056d4 <RCCEx_PLL3_Config+0x15c>)
 8005658:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800565a:	4a1e      	ldr	r2, [pc, #120]	; (80056d4 <RCCEx_PLL3_Config+0x15c>)
 800565c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005660:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL3 clock output */
    if(Divider == DIVIDER_P_UPDATE)
 8005662:	683b      	ldr	r3, [r7, #0]
 8005664:	2b00      	cmp	r3, #0
 8005666:	d106      	bne.n	8005676 <RCCEx_PLL3_Config+0xfe>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
 8005668:	4b1a      	ldr	r3, [pc, #104]	; (80056d4 <RCCEx_PLL3_Config+0x15c>)
 800566a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800566c:	4a19      	ldr	r2, [pc, #100]	; (80056d4 <RCCEx_PLL3_Config+0x15c>)
 800566e:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8005672:	62d3      	str	r3, [r2, #44]	; 0x2c
 8005674:	e00f      	b.n	8005696 <RCCEx_PLL3_Config+0x11e>
    }
    else if(Divider == DIVIDER_Q_UPDATE)
 8005676:	683b      	ldr	r3, [r7, #0]
 8005678:	2b01      	cmp	r3, #1
 800567a:	d106      	bne.n	800568a <RCCEx_PLL3_Config+0x112>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
 800567c:	4b15      	ldr	r3, [pc, #84]	; (80056d4 <RCCEx_PLL3_Config+0x15c>)
 800567e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005680:	4a14      	ldr	r2, [pc, #80]	; (80056d4 <RCCEx_PLL3_Config+0x15c>)
 8005682:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8005686:	62d3      	str	r3, [r2, #44]	; 0x2c
 8005688:	e005      	b.n	8005696 <RCCEx_PLL3_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
 800568a:	4b12      	ldr	r3, [pc, #72]	; (80056d4 <RCCEx_PLL3_Config+0x15c>)
 800568c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800568e:	4a11      	ldr	r2, [pc, #68]	; (80056d4 <RCCEx_PLL3_Config+0x15c>)
 8005690:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8005694:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL3. */
    __HAL_RCC_PLL3_ENABLE();
 8005696:	4b0f      	ldr	r3, [pc, #60]	; (80056d4 <RCCEx_PLL3_Config+0x15c>)
 8005698:	681b      	ldr	r3, [r3, #0]
 800569a:	4a0e      	ldr	r2, [pc, #56]	; (80056d4 <RCCEx_PLL3_Config+0x15c>)
 800569c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80056a0:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80056a2:	f7fc f829 	bl	80016f8 <HAL_GetTick>
 80056a6:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL3 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 80056a8:	e008      	b.n	80056bc <RCCEx_PLL3_Config+0x144>
    {
      if( (HAL_GetTick() - tickstart ) > PLL3_TIMEOUT_VALUE)
 80056aa:	f7fc f825 	bl	80016f8 <HAL_GetTick>
 80056ae:	4602      	mov	r2, r0
 80056b0:	68bb      	ldr	r3, [r7, #8]
 80056b2:	1ad3      	subs	r3, r2, r3
 80056b4:	2b02      	cmp	r3, #2
 80056b6:	d901      	bls.n	80056bc <RCCEx_PLL3_Config+0x144>
      {
        return HAL_TIMEOUT;
 80056b8:	2303      	movs	r3, #3
 80056ba:	e006      	b.n	80056ca <RCCEx_PLL3_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 80056bc:	4b05      	ldr	r3, [pc, #20]	; (80056d4 <RCCEx_PLL3_Config+0x15c>)
 80056be:	681b      	ldr	r3, [r3, #0]
 80056c0:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80056c4:	2b00      	cmp	r3, #0
 80056c6:	d0f0      	beq.n	80056aa <RCCEx_PLL3_Config+0x132>
    }

  }


  return status;
 80056c8:	7bfb      	ldrb	r3, [r7, #15]
}
 80056ca:	4618      	mov	r0, r3
 80056cc:	3710      	adds	r7, #16
 80056ce:	46bd      	mov	sp, r7
 80056d0:	bd80      	pop	{r7, pc}
 80056d2:	bf00      	nop
 80056d4:	58024400 	.word	0x58024400
 80056d8:	ffff0007 	.word	0xffff0007

080056dc <HAL_SRAM_Init>:
  * @param  ExtTiming Pointer to SRAM extended mode timing structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SRAM_Init(SRAM_HandleTypeDef *hsram, FMC_NORSRAM_TimingTypeDef *Timing,
                                FMC_NORSRAM_TimingTypeDef *ExtTiming)
{
 80056dc:	b580      	push	{r7, lr}
 80056de:	b084      	sub	sp, #16
 80056e0:	af00      	add	r7, sp, #0
 80056e2:	60f8      	str	r0, [r7, #12]
 80056e4:	60b9      	str	r1, [r7, #8]
 80056e6:	607a      	str	r2, [r7, #4]
  /* Check the SRAM handle parameter */
  if (hsram == NULL)
 80056e8:	68fb      	ldr	r3, [r7, #12]
 80056ea:	2b00      	cmp	r3, #0
 80056ec:	d101      	bne.n	80056f2 <HAL_SRAM_Init+0x16>
  {
    return HAL_ERROR;
 80056ee:	2301      	movs	r3, #1
 80056f0:	e03e      	b.n	8005770 <HAL_SRAM_Init+0x94>
  }

  if (hsram->State == HAL_SRAM_STATE_RESET)
 80056f2:	68fb      	ldr	r3, [r7, #12]
 80056f4:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80056f8:	b2db      	uxtb	r3, r3
 80056fa:	2b00      	cmp	r3, #0
 80056fc:	d106      	bne.n	800570c <HAL_SRAM_Init+0x30>
  {
    /* Allocate lock resource and initialize it */
    hsram->Lock = HAL_UNLOCKED;
 80056fe:	68fb      	ldr	r3, [r7, #12]
 8005700:	2200      	movs	r2, #0
 8005702:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44

    /* Init the low level hardware */
    hsram->MspInitCallback(hsram);
#else
    /* Initialize the low level hardware (MSP) */
    HAL_SRAM_MspInit(hsram);
 8005706:	68f8      	ldr	r0, [r7, #12]
 8005708:	f7fb fe04 	bl	8001314 <HAL_SRAM_MspInit>
#endif /* USE_HAL_SRAM_REGISTER_CALLBACKS */
  }

  /* Initialize SRAM control Interface */
  (void)FMC_NORSRAM_Init(hsram->Instance, &(hsram->Init));
 800570c:	68fb      	ldr	r3, [r7, #12]
 800570e:	681a      	ldr	r2, [r3, #0]
 8005710:	68fb      	ldr	r3, [r7, #12]
 8005712:	3308      	adds	r3, #8
 8005714:	4619      	mov	r1, r3
 8005716:	4610      	mov	r0, r2
 8005718:	f001 fdce 	bl	80072b8 <FMC_NORSRAM_Init>

  /* Initialize SRAM timing Interface */
  (void)FMC_NORSRAM_Timing_Init(hsram->Instance, Timing, hsram->Init.NSBank);
 800571c:	68fb      	ldr	r3, [r7, #12]
 800571e:	6818      	ldr	r0, [r3, #0]
 8005720:	68fb      	ldr	r3, [r7, #12]
 8005722:	689b      	ldr	r3, [r3, #8]
 8005724:	461a      	mov	r2, r3
 8005726:	68b9      	ldr	r1, [r7, #8]
 8005728:	f001 fe56 	bl	80073d8 <FMC_NORSRAM_Timing_Init>

  /* Initialize SRAM extended mode timing Interface */
  (void)FMC_NORSRAM_Extended_Timing_Init(hsram->Extended, ExtTiming, hsram->Init.NSBank,
 800572c:	68fb      	ldr	r3, [r7, #12]
 800572e:	6858      	ldr	r0, [r3, #4]
 8005730:	68fb      	ldr	r3, [r7, #12]
 8005732:	689a      	ldr	r2, [r3, #8]
 8005734:	68fb      	ldr	r3, [r7, #12]
 8005736:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005738:	6879      	ldr	r1, [r7, #4]
 800573a:	f001 fe9d 	bl	8007478 <FMC_NORSRAM_Extended_Timing_Init>
                                         hsram->Init.ExtendedMode);

  /* Enable the NORSRAM device */
  __FMC_NORSRAM_ENABLE(hsram->Instance, hsram->Init.NSBank);
 800573e:	68fb      	ldr	r3, [r7, #12]
 8005740:	681b      	ldr	r3, [r3, #0]
 8005742:	68fa      	ldr	r2, [r7, #12]
 8005744:	6892      	ldr	r2, [r2, #8]
 8005746:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800574a:	68fb      	ldr	r3, [r7, #12]
 800574c:	681b      	ldr	r3, [r3, #0]
 800574e:	68fa      	ldr	r2, [r7, #12]
 8005750:	6892      	ldr	r2, [r2, #8]
 8005752:	f041 0101 	orr.w	r1, r1, #1
 8005756:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

  /* Enable FMC Peripheral */
  __FMC_ENABLE();
 800575a:	4b07      	ldr	r3, [pc, #28]	; (8005778 <HAL_SRAM_Init+0x9c>)
 800575c:	681b      	ldr	r3, [r3, #0]
 800575e:	4a06      	ldr	r2, [pc, #24]	; (8005778 <HAL_SRAM_Init+0x9c>)
 8005760:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8005764:	6013      	str	r3, [r2, #0]

  /* Initialize the SRAM controller state */
  hsram->State = HAL_SRAM_STATE_READY;
 8005766:	68fb      	ldr	r3, [r7, #12]
 8005768:	2201      	movs	r2, #1
 800576a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  return HAL_OK;
 800576e:	2300      	movs	r3, #0
}
 8005770:	4618      	mov	r0, r3
 8005772:	3710      	adds	r7, #16
 8005774:	46bd      	mov	sp, r7
 8005776:	bd80      	pop	{r7, pc}
 8005778:	52004000 	.word	0x52004000

0800577c <HAL_SRAM_Read_8b>:
  * @param  BufferSize Size of the buffer to read from memory
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SRAM_Read_8b(SRAM_HandleTypeDef *hsram, uint32_t *pAddress, uint8_t *pDstBuffer,
                                   uint32_t BufferSize)
{
 800577c:	b480      	push	{r7}
 800577e:	b089      	sub	sp, #36	; 0x24
 8005780:	af00      	add	r7, sp, #0
 8005782:	60f8      	str	r0, [r7, #12]
 8005784:	60b9      	str	r1, [r7, #8]
 8005786:	607a      	str	r2, [r7, #4]
 8005788:	603b      	str	r3, [r7, #0]
  uint32_t size;
  __IO uint8_t *psramaddress = (uint8_t *)pAddress;
 800578a:	68bb      	ldr	r3, [r7, #8]
 800578c:	61bb      	str	r3, [r7, #24]
  uint8_t *pdestbuff = pDstBuffer;
 800578e:	687b      	ldr	r3, [r7, #4]
 8005790:	617b      	str	r3, [r7, #20]
  HAL_SRAM_StateTypeDef state = hsram->State;
 8005792:	68fb      	ldr	r3, [r7, #12]
 8005794:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8005798:	74fb      	strb	r3, [r7, #19]

  /* Check the SRAM controller state */
  if ((state == HAL_SRAM_STATE_READY) || (state == HAL_SRAM_STATE_PROTECTED))
 800579a:	7cfb      	ldrb	r3, [r7, #19]
 800579c:	2b01      	cmp	r3, #1
 800579e:	d002      	beq.n	80057a6 <HAL_SRAM_Read_8b+0x2a>
 80057a0:	7cfb      	ldrb	r3, [r7, #19]
 80057a2:	2b04      	cmp	r3, #4
 80057a4:	d12c      	bne.n	8005800 <HAL_SRAM_Read_8b+0x84>
  {
    /* Process Locked */
    __HAL_LOCK(hsram);
 80057a6:	68fb      	ldr	r3, [r7, #12]
 80057a8:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80057ac:	2b01      	cmp	r3, #1
 80057ae:	d101      	bne.n	80057b4 <HAL_SRAM_Read_8b+0x38>
 80057b0:	2302      	movs	r3, #2
 80057b2:	e026      	b.n	8005802 <HAL_SRAM_Read_8b+0x86>
 80057b4:	68fb      	ldr	r3, [r7, #12]
 80057b6:	2201      	movs	r2, #1
 80057b8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44

    /* Update the SRAM controller state */
    hsram->State = HAL_SRAM_STATE_BUSY;
 80057bc:	68fb      	ldr	r3, [r7, #12]
 80057be:	2202      	movs	r2, #2
 80057c0:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

    /* Read data from memory */
    for (size = BufferSize; size != 0U; size--)
 80057c4:	683b      	ldr	r3, [r7, #0]
 80057c6:	61fb      	str	r3, [r7, #28]
 80057c8:	e00d      	b.n	80057e6 <HAL_SRAM_Read_8b+0x6a>
    {
      *pdestbuff = *psramaddress;
 80057ca:	69bb      	ldr	r3, [r7, #24]
 80057cc:	781b      	ldrb	r3, [r3, #0]
 80057ce:	b2da      	uxtb	r2, r3
 80057d0:	697b      	ldr	r3, [r7, #20]
 80057d2:	701a      	strb	r2, [r3, #0]
      pdestbuff++;
 80057d4:	697b      	ldr	r3, [r7, #20]
 80057d6:	3301      	adds	r3, #1
 80057d8:	617b      	str	r3, [r7, #20]
      psramaddress++;
 80057da:	69bb      	ldr	r3, [r7, #24]
 80057dc:	3301      	adds	r3, #1
 80057de:	61bb      	str	r3, [r7, #24]
    for (size = BufferSize; size != 0U; size--)
 80057e0:	69fb      	ldr	r3, [r7, #28]
 80057e2:	3b01      	subs	r3, #1
 80057e4:	61fb      	str	r3, [r7, #28]
 80057e6:	69fb      	ldr	r3, [r7, #28]
 80057e8:	2b00      	cmp	r3, #0
 80057ea:	d1ee      	bne.n	80057ca <HAL_SRAM_Read_8b+0x4e>
    }

    /* Update the SRAM controller state */
    hsram->State = state;
 80057ec:	68fb      	ldr	r3, [r7, #12]
 80057ee:	7cfa      	ldrb	r2, [r7, #19]
 80057f0:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

    /* Process unlocked */
    __HAL_UNLOCK(hsram);
 80057f4:	68fb      	ldr	r3, [r7, #12]
 80057f6:	2200      	movs	r2, #0
 80057f8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  else
  {
    return HAL_ERROR;
  }

  return HAL_OK;
 80057fc:	2300      	movs	r3, #0
 80057fe:	e000      	b.n	8005802 <HAL_SRAM_Read_8b+0x86>
    return HAL_ERROR;
 8005800:	2301      	movs	r3, #1
}
 8005802:	4618      	mov	r0, r3
 8005804:	3724      	adds	r7, #36	; 0x24
 8005806:	46bd      	mov	sp, r7
 8005808:	f85d 7b04 	ldr.w	r7, [sp], #4
 800580c:	4770      	bx	lr

0800580e <HAL_SRAM_Write_8b>:
  * @param  BufferSize Size of the buffer to write to memory
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SRAM_Write_8b(SRAM_HandleTypeDef *hsram, uint32_t *pAddress, uint8_t *pSrcBuffer,
                                    uint32_t BufferSize)
{
 800580e:	b480      	push	{r7}
 8005810:	b089      	sub	sp, #36	; 0x24
 8005812:	af00      	add	r7, sp, #0
 8005814:	60f8      	str	r0, [r7, #12]
 8005816:	60b9      	str	r1, [r7, #8]
 8005818:	607a      	str	r2, [r7, #4]
 800581a:	603b      	str	r3, [r7, #0]
  uint32_t size;
  __IO uint8_t *psramaddress = (uint8_t *)pAddress;
 800581c:	68bb      	ldr	r3, [r7, #8]
 800581e:	61bb      	str	r3, [r7, #24]
  uint8_t *psrcbuff = pSrcBuffer;
 8005820:	687b      	ldr	r3, [r7, #4]
 8005822:	617b      	str	r3, [r7, #20]

  /* Check the SRAM controller state */
  if (hsram->State == HAL_SRAM_STATE_READY)
 8005824:	68fb      	ldr	r3, [r7, #12]
 8005826:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800582a:	b2db      	uxtb	r3, r3
 800582c:	2b01      	cmp	r3, #1
 800582e:	d12b      	bne.n	8005888 <HAL_SRAM_Write_8b+0x7a>
  {
    /* Process Locked */
    __HAL_LOCK(hsram);
 8005830:	68fb      	ldr	r3, [r7, #12]
 8005832:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8005836:	2b01      	cmp	r3, #1
 8005838:	d101      	bne.n	800583e <HAL_SRAM_Write_8b+0x30>
 800583a:	2302      	movs	r3, #2
 800583c:	e025      	b.n	800588a <HAL_SRAM_Write_8b+0x7c>
 800583e:	68fb      	ldr	r3, [r7, #12]
 8005840:	2201      	movs	r2, #1
 8005842:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44

    /* Update the SRAM controller state */
    hsram->State = HAL_SRAM_STATE_BUSY;
 8005846:	68fb      	ldr	r3, [r7, #12]
 8005848:	2202      	movs	r2, #2
 800584a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

    /* Write data to memory */
    for (size = BufferSize; size != 0U; size--)
 800584e:	683b      	ldr	r3, [r7, #0]
 8005850:	61fb      	str	r3, [r7, #28]
 8005852:	e00c      	b.n	800586e <HAL_SRAM_Write_8b+0x60>
    {
      *psramaddress = *psrcbuff;
 8005854:	697b      	ldr	r3, [r7, #20]
 8005856:	781a      	ldrb	r2, [r3, #0]
 8005858:	69bb      	ldr	r3, [r7, #24]
 800585a:	701a      	strb	r2, [r3, #0]
      psrcbuff++;
 800585c:	697b      	ldr	r3, [r7, #20]
 800585e:	3301      	adds	r3, #1
 8005860:	617b      	str	r3, [r7, #20]
      psramaddress++;
 8005862:	69bb      	ldr	r3, [r7, #24]
 8005864:	3301      	adds	r3, #1
 8005866:	61bb      	str	r3, [r7, #24]
    for (size = BufferSize; size != 0U; size--)
 8005868:	69fb      	ldr	r3, [r7, #28]
 800586a:	3b01      	subs	r3, #1
 800586c:	61fb      	str	r3, [r7, #28]
 800586e:	69fb      	ldr	r3, [r7, #28]
 8005870:	2b00      	cmp	r3, #0
 8005872:	d1ef      	bne.n	8005854 <HAL_SRAM_Write_8b+0x46>
    }

    /* Update the SRAM controller state */
    hsram->State = HAL_SRAM_STATE_READY;
 8005874:	68fb      	ldr	r3, [r7, #12]
 8005876:	2201      	movs	r2, #1
 8005878:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

    /* Process unlocked */
    __HAL_UNLOCK(hsram);
 800587c:	68fb      	ldr	r3, [r7, #12]
 800587e:	2200      	movs	r2, #0
 8005880:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  else
  {
    return HAL_ERROR;
  }

  return HAL_OK;
 8005884:	2300      	movs	r3, #0
 8005886:	e000      	b.n	800588a <HAL_SRAM_Write_8b+0x7c>
    return HAL_ERROR;
 8005888:	2301      	movs	r3, #1
}
 800588a:	4618      	mov	r0, r3
 800588c:	3724      	adds	r7, #36	; 0x24
 800588e:	46bd      	mov	sp, r7
 8005890:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005894:	4770      	bx	lr

08005896 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8005896:	b580      	push	{r7, lr}
 8005898:	b082      	sub	sp, #8
 800589a:	af00      	add	r7, sp, #0
 800589c:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800589e:	687b      	ldr	r3, [r7, #4]
 80058a0:	2b00      	cmp	r3, #0
 80058a2:	d101      	bne.n	80058a8 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80058a4:	2301      	movs	r3, #1
 80058a6:	e042      	b.n	800592e <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 80058a8:	687b      	ldr	r3, [r7, #4]
 80058aa:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80058ae:	2b00      	cmp	r3, #0
 80058b0:	d106      	bne.n	80058c0 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80058b2:	687b      	ldr	r3, [r7, #4]
 80058b4:	2200      	movs	r2, #0
 80058b6:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80058ba:	6878      	ldr	r0, [r7, #4]
 80058bc:	f7fb fc1e 	bl	80010fc <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80058c0:	687b      	ldr	r3, [r7, #4]
 80058c2:	2224      	movs	r2, #36	; 0x24
 80058c4:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  __HAL_UART_DISABLE(huart);
 80058c8:	687b      	ldr	r3, [r7, #4]
 80058ca:	681b      	ldr	r3, [r3, #0]
 80058cc:	681a      	ldr	r2, [r3, #0]
 80058ce:	687b      	ldr	r3, [r7, #4]
 80058d0:	681b      	ldr	r3, [r3, #0]
 80058d2:	f022 0201 	bic.w	r2, r2, #1
 80058d6:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 80058d8:	6878      	ldr	r0, [r7, #4]
 80058da:	f000 fb9d 	bl	8006018 <UART_SetConfig>
 80058de:	4603      	mov	r3, r0
 80058e0:	2b01      	cmp	r3, #1
 80058e2:	d101      	bne.n	80058e8 <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 80058e4:	2301      	movs	r3, #1
 80058e6:	e022      	b.n	800592e <HAL_UART_Init+0x98>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 80058e8:	687b      	ldr	r3, [r7, #4]
 80058ea:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80058ec:	2b00      	cmp	r3, #0
 80058ee:	d002      	beq.n	80058f6 <HAL_UART_Init+0x60>
  {
    UART_AdvFeatureConfig(huart);
 80058f0:	6878      	ldr	r0, [r7, #4]
 80058f2:	f001 f9ef 	bl	8006cd4 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80058f6:	687b      	ldr	r3, [r7, #4]
 80058f8:	681b      	ldr	r3, [r3, #0]
 80058fa:	685a      	ldr	r2, [r3, #4]
 80058fc:	687b      	ldr	r3, [r7, #4]
 80058fe:	681b      	ldr	r3, [r3, #0]
 8005900:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8005904:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8005906:	687b      	ldr	r3, [r7, #4]
 8005908:	681b      	ldr	r3, [r3, #0]
 800590a:	689a      	ldr	r2, [r3, #8]
 800590c:	687b      	ldr	r3, [r7, #4]
 800590e:	681b      	ldr	r3, [r3, #0]
 8005910:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8005914:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8005916:	687b      	ldr	r3, [r7, #4]
 8005918:	681b      	ldr	r3, [r3, #0]
 800591a:	681a      	ldr	r2, [r3, #0]
 800591c:	687b      	ldr	r3, [r7, #4]
 800591e:	681b      	ldr	r3, [r3, #0]
 8005920:	f042 0201 	orr.w	r2, r2, #1
 8005924:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8005926:	6878      	ldr	r0, [r7, #4]
 8005928:	f001 fa76 	bl	8006e18 <UART_CheckIdleState>
 800592c:	4603      	mov	r3, r0
}
 800592e:	4618      	mov	r0, r3
 8005930:	3708      	adds	r7, #8
 8005932:	46bd      	mov	sp, r7
 8005934:	bd80      	pop	{r7, pc}

08005936 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8005936:	b580      	push	{r7, lr}
 8005938:	b08a      	sub	sp, #40	; 0x28
 800593a:	af02      	add	r7, sp, #8
 800593c:	60f8      	str	r0, [r7, #12]
 800593e:	60b9      	str	r1, [r7, #8]
 8005940:	603b      	str	r3, [r7, #0]
 8005942:	4613      	mov	r3, r2
 8005944:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8005946:	68fb      	ldr	r3, [r7, #12]
 8005948:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800594c:	2b20      	cmp	r3, #32
 800594e:	f040 8083 	bne.w	8005a58 <HAL_UART_Transmit+0x122>
  {
    if ((pData == NULL) || (Size == 0U))
 8005952:	68bb      	ldr	r3, [r7, #8]
 8005954:	2b00      	cmp	r3, #0
 8005956:	d002      	beq.n	800595e <HAL_UART_Transmit+0x28>
 8005958:	88fb      	ldrh	r3, [r7, #6]
 800595a:	2b00      	cmp	r3, #0
 800595c:	d101      	bne.n	8005962 <HAL_UART_Transmit+0x2c>
    {
      return  HAL_ERROR;
 800595e:	2301      	movs	r3, #1
 8005960:	e07b      	b.n	8005a5a <HAL_UART_Transmit+0x124>
    }

    __HAL_LOCK(huart);
 8005962:	68fb      	ldr	r3, [r7, #12]
 8005964:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8005968:	2b01      	cmp	r3, #1
 800596a:	d101      	bne.n	8005970 <HAL_UART_Transmit+0x3a>
 800596c:	2302      	movs	r3, #2
 800596e:	e074      	b.n	8005a5a <HAL_UART_Transmit+0x124>
 8005970:	68fb      	ldr	r3, [r7, #12]
 8005972:	2201      	movs	r2, #1
 8005974:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005978:	68fb      	ldr	r3, [r7, #12]
 800597a:	2200      	movs	r2, #0
 800597c:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8005980:	68fb      	ldr	r3, [r7, #12]
 8005982:	2221      	movs	r2, #33	; 0x21
 8005984:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8005988:	f7fb feb6 	bl	80016f8 <HAL_GetTick>
 800598c:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 800598e:	68fb      	ldr	r3, [r7, #12]
 8005990:	88fa      	ldrh	r2, [r7, #6]
 8005992:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
    huart->TxXferCount = Size;
 8005996:	68fb      	ldr	r3, [r7, #12]
 8005998:	88fa      	ldrh	r2, [r7, #6]
 800599a:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800599e:	68fb      	ldr	r3, [r7, #12]
 80059a0:	689b      	ldr	r3, [r3, #8]
 80059a2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80059a6:	d108      	bne.n	80059ba <HAL_UART_Transmit+0x84>
 80059a8:	68fb      	ldr	r3, [r7, #12]
 80059aa:	691b      	ldr	r3, [r3, #16]
 80059ac:	2b00      	cmp	r3, #0
 80059ae:	d104      	bne.n	80059ba <HAL_UART_Transmit+0x84>
    {
      pdata8bits  = NULL;
 80059b0:	2300      	movs	r3, #0
 80059b2:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 80059b4:	68bb      	ldr	r3, [r7, #8]
 80059b6:	61bb      	str	r3, [r7, #24]
 80059b8:	e003      	b.n	80059c2 <HAL_UART_Transmit+0x8c>
    }
    else
    {
      pdata8bits  = pData;
 80059ba:	68bb      	ldr	r3, [r7, #8]
 80059bc:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80059be:	2300      	movs	r3, #0
 80059c0:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 80059c2:	68fb      	ldr	r3, [r7, #12]
 80059c4:	2200      	movs	r2, #0
 80059c6:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    while (huart->TxXferCount > 0U)
 80059ca:	e02c      	b.n	8005a26 <HAL_UART_Transmit+0xf0>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80059cc:	683b      	ldr	r3, [r7, #0]
 80059ce:	9300      	str	r3, [sp, #0]
 80059d0:	697b      	ldr	r3, [r7, #20]
 80059d2:	2200      	movs	r2, #0
 80059d4:	2180      	movs	r1, #128	; 0x80
 80059d6:	68f8      	ldr	r0, [r7, #12]
 80059d8:	f001 fa69 	bl	8006eae <UART_WaitOnFlagUntilTimeout>
 80059dc:	4603      	mov	r3, r0
 80059de:	2b00      	cmp	r3, #0
 80059e0:	d001      	beq.n	80059e6 <HAL_UART_Transmit+0xb0>
      {
        return HAL_TIMEOUT;
 80059e2:	2303      	movs	r3, #3
 80059e4:	e039      	b.n	8005a5a <HAL_UART_Transmit+0x124>
      }
      if (pdata8bits == NULL)
 80059e6:	69fb      	ldr	r3, [r7, #28]
 80059e8:	2b00      	cmp	r3, #0
 80059ea:	d10b      	bne.n	8005a04 <HAL_UART_Transmit+0xce>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 80059ec:	69bb      	ldr	r3, [r7, #24]
 80059ee:	881b      	ldrh	r3, [r3, #0]
 80059f0:	461a      	mov	r2, r3
 80059f2:	68fb      	ldr	r3, [r7, #12]
 80059f4:	681b      	ldr	r3, [r3, #0]
 80059f6:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80059fa:	629a      	str	r2, [r3, #40]	; 0x28
        pdata16bits++;
 80059fc:	69bb      	ldr	r3, [r7, #24]
 80059fe:	3302      	adds	r3, #2
 8005a00:	61bb      	str	r3, [r7, #24]
 8005a02:	e007      	b.n	8005a14 <HAL_UART_Transmit+0xde>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8005a04:	69fb      	ldr	r3, [r7, #28]
 8005a06:	781a      	ldrb	r2, [r3, #0]
 8005a08:	68fb      	ldr	r3, [r7, #12]
 8005a0a:	681b      	ldr	r3, [r3, #0]
 8005a0c:	629a      	str	r2, [r3, #40]	; 0x28
        pdata8bits++;
 8005a0e:	69fb      	ldr	r3, [r7, #28]
 8005a10:	3301      	adds	r3, #1
 8005a12:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8005a14:	68fb      	ldr	r3, [r7, #12]
 8005a16:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 8005a1a:	b29b      	uxth	r3, r3
 8005a1c:	3b01      	subs	r3, #1
 8005a1e:	b29a      	uxth	r2, r3
 8005a20:	68fb      	ldr	r3, [r7, #12]
 8005a22:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
    while (huart->TxXferCount > 0U)
 8005a26:	68fb      	ldr	r3, [r7, #12]
 8005a28:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 8005a2c:	b29b      	uxth	r3, r3
 8005a2e:	2b00      	cmp	r3, #0
 8005a30:	d1cc      	bne.n	80059cc <HAL_UART_Transmit+0x96>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8005a32:	683b      	ldr	r3, [r7, #0]
 8005a34:	9300      	str	r3, [sp, #0]
 8005a36:	697b      	ldr	r3, [r7, #20]
 8005a38:	2200      	movs	r2, #0
 8005a3a:	2140      	movs	r1, #64	; 0x40
 8005a3c:	68f8      	ldr	r0, [r7, #12]
 8005a3e:	f001 fa36 	bl	8006eae <UART_WaitOnFlagUntilTimeout>
 8005a42:	4603      	mov	r3, r0
 8005a44:	2b00      	cmp	r3, #0
 8005a46:	d001      	beq.n	8005a4c <HAL_UART_Transmit+0x116>
    {
      return HAL_TIMEOUT;
 8005a48:	2303      	movs	r3, #3
 8005a4a:	e006      	b.n	8005a5a <HAL_UART_Transmit+0x124>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8005a4c:	68fb      	ldr	r3, [r7, #12]
 8005a4e:	2220      	movs	r2, #32
 8005a50:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    return HAL_OK;
 8005a54:	2300      	movs	r3, #0
 8005a56:	e000      	b.n	8005a5a <HAL_UART_Transmit+0x124>
  }
  else
  {
    return HAL_BUSY;
 8005a58:	2302      	movs	r3, #2
  }
}
 8005a5a:	4618      	mov	r0, r3
 8005a5c:	3720      	adds	r7, #32
 8005a5e:	46bd      	mov	sp, r7
 8005a60:	bd80      	pop	{r7, pc}
	...

08005a64 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8005a64:	b580      	push	{r7, lr}
 8005a66:	b088      	sub	sp, #32
 8005a68:	af00      	add	r7, sp, #0
 8005a6a:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8005a6c:	687b      	ldr	r3, [r7, #4]
 8005a6e:	681b      	ldr	r3, [r3, #0]
 8005a70:	69db      	ldr	r3, [r3, #28]
 8005a72:	61fb      	str	r3, [r7, #28]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8005a74:	687b      	ldr	r3, [r7, #4]
 8005a76:	681b      	ldr	r3, [r3, #0]
 8005a78:	681b      	ldr	r3, [r3, #0]
 8005a7a:	61bb      	str	r3, [r7, #24]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8005a7c:	687b      	ldr	r3, [r7, #4]
 8005a7e:	681b      	ldr	r3, [r3, #0]
 8005a80:	689b      	ldr	r3, [r3, #8]
 8005a82:	617b      	str	r3, [r7, #20]

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 8005a84:	69fa      	ldr	r2, [r7, #28]
 8005a86:	f640 030f 	movw	r3, #2063	; 0x80f
 8005a8a:	4013      	ands	r3, r2
 8005a8c:	613b      	str	r3, [r7, #16]
  if (errorflags == 0U)
 8005a8e:	693b      	ldr	r3, [r7, #16]
 8005a90:	2b00      	cmp	r3, #0
 8005a92:	d118      	bne.n	8005ac6 <HAL_UART_IRQHandler+0x62>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 8005a94:	69fb      	ldr	r3, [r7, #28]
 8005a96:	f003 0320 	and.w	r3, r3, #32
 8005a9a:	2b00      	cmp	r3, #0
 8005a9c:	d013      	beq.n	8005ac6 <HAL_UART_IRQHandler+0x62>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 8005a9e:	69bb      	ldr	r3, [r7, #24]
 8005aa0:	f003 0320 	and.w	r3, r3, #32
 8005aa4:	2b00      	cmp	r3, #0
 8005aa6:	d104      	bne.n	8005ab2 <HAL_UART_IRQHandler+0x4e>
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 8005aa8:	697b      	ldr	r3, [r7, #20]
 8005aaa:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005aae:	2b00      	cmp	r3, #0
 8005ab0:	d009      	beq.n	8005ac6 <HAL_UART_IRQHandler+0x62>
    {
      if (huart->RxISR != NULL)
 8005ab2:	687b      	ldr	r3, [r7, #4]
 8005ab4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005ab6:	2b00      	cmp	r3, #0
 8005ab8:	f000 8282 	beq.w	8005fc0 <HAL_UART_IRQHandler+0x55c>
      {
        huart->RxISR(huart);
 8005abc:	687b      	ldr	r3, [r7, #4]
 8005abe:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005ac0:	6878      	ldr	r0, [r7, #4]
 8005ac2:	4798      	blx	r3
      }
      return;
 8005ac4:	e27c      	b.n	8005fc0 <HAL_UART_IRQHandler+0x55c>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 8005ac6:	693b      	ldr	r3, [r7, #16]
 8005ac8:	2b00      	cmp	r3, #0
 8005aca:	f000 80ef 	beq.w	8005cac <HAL_UART_IRQHandler+0x248>
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
 8005ace:	697a      	ldr	r2, [r7, #20]
 8005ad0:	4b73      	ldr	r3, [pc, #460]	; (8005ca0 <HAL_UART_IRQHandler+0x23c>)
 8005ad2:	4013      	ands	r3, r2
 8005ad4:	2b00      	cmp	r3, #0
 8005ad6:	d105      	bne.n	8005ae4 <HAL_UART_IRQHandler+0x80>
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
 8005ad8:	69ba      	ldr	r2, [r7, #24]
 8005ada:	4b72      	ldr	r3, [pc, #456]	; (8005ca4 <HAL_UART_IRQHandler+0x240>)
 8005adc:	4013      	ands	r3, r2
 8005ade:	2b00      	cmp	r3, #0
 8005ae0:	f000 80e4 	beq.w	8005cac <HAL_UART_IRQHandler+0x248>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8005ae4:	69fb      	ldr	r3, [r7, #28]
 8005ae6:	f003 0301 	and.w	r3, r3, #1
 8005aea:	2b00      	cmp	r3, #0
 8005aec:	d010      	beq.n	8005b10 <HAL_UART_IRQHandler+0xac>
 8005aee:	69bb      	ldr	r3, [r7, #24]
 8005af0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005af4:	2b00      	cmp	r3, #0
 8005af6:	d00b      	beq.n	8005b10 <HAL_UART_IRQHandler+0xac>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8005af8:	687b      	ldr	r3, [r7, #4]
 8005afa:	681b      	ldr	r3, [r3, #0]
 8005afc:	2201      	movs	r2, #1
 8005afe:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8005b00:	687b      	ldr	r3, [r7, #4]
 8005b02:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8005b06:	f043 0201 	orr.w	r2, r3, #1
 8005b0a:	687b      	ldr	r3, [r7, #4]
 8005b0c:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8005b10:	69fb      	ldr	r3, [r7, #28]
 8005b12:	f003 0302 	and.w	r3, r3, #2
 8005b16:	2b00      	cmp	r3, #0
 8005b18:	d010      	beq.n	8005b3c <HAL_UART_IRQHandler+0xd8>
 8005b1a:	697b      	ldr	r3, [r7, #20]
 8005b1c:	f003 0301 	and.w	r3, r3, #1
 8005b20:	2b00      	cmp	r3, #0
 8005b22:	d00b      	beq.n	8005b3c <HAL_UART_IRQHandler+0xd8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8005b24:	687b      	ldr	r3, [r7, #4]
 8005b26:	681b      	ldr	r3, [r3, #0]
 8005b28:	2202      	movs	r2, #2
 8005b2a:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8005b2c:	687b      	ldr	r3, [r7, #4]
 8005b2e:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8005b32:	f043 0204 	orr.w	r2, r3, #4
 8005b36:	687b      	ldr	r3, [r7, #4]
 8005b38:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8005b3c:	69fb      	ldr	r3, [r7, #28]
 8005b3e:	f003 0304 	and.w	r3, r3, #4
 8005b42:	2b00      	cmp	r3, #0
 8005b44:	d010      	beq.n	8005b68 <HAL_UART_IRQHandler+0x104>
 8005b46:	697b      	ldr	r3, [r7, #20]
 8005b48:	f003 0301 	and.w	r3, r3, #1
 8005b4c:	2b00      	cmp	r3, #0
 8005b4e:	d00b      	beq.n	8005b68 <HAL_UART_IRQHandler+0x104>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8005b50:	687b      	ldr	r3, [r7, #4]
 8005b52:	681b      	ldr	r3, [r3, #0]
 8005b54:	2204      	movs	r2, #4
 8005b56:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8005b58:	687b      	ldr	r3, [r7, #4]
 8005b5a:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8005b5e:	f043 0202 	orr.w	r2, r3, #2
 8005b62:	687b      	ldr	r3, [r7, #4]
 8005b64:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 8005b68:	69fb      	ldr	r3, [r7, #28]
 8005b6a:	f003 0308 	and.w	r3, r3, #8
 8005b6e:	2b00      	cmp	r3, #0
 8005b70:	d015      	beq.n	8005b9e <HAL_UART_IRQHandler+0x13a>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 8005b72:	69bb      	ldr	r3, [r7, #24]
 8005b74:	f003 0320 	and.w	r3, r3, #32
 8005b78:	2b00      	cmp	r3, #0
 8005b7a:	d104      	bne.n	8005b86 <HAL_UART_IRQHandler+0x122>
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
 8005b7c:	697a      	ldr	r2, [r7, #20]
 8005b7e:	4b48      	ldr	r3, [pc, #288]	; (8005ca0 <HAL_UART_IRQHandler+0x23c>)
 8005b80:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 8005b82:	2b00      	cmp	r3, #0
 8005b84:	d00b      	beq.n	8005b9e <HAL_UART_IRQHandler+0x13a>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8005b86:	687b      	ldr	r3, [r7, #4]
 8005b88:	681b      	ldr	r3, [r3, #0]
 8005b8a:	2208      	movs	r2, #8
 8005b8c:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8005b8e:	687b      	ldr	r3, [r7, #4]
 8005b90:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8005b94:	f043 0208 	orr.w	r2, r3, #8
 8005b98:	687b      	ldr	r3, [r7, #4]
 8005b9a:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 8005b9e:	69fb      	ldr	r3, [r7, #28]
 8005ba0:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8005ba4:	2b00      	cmp	r3, #0
 8005ba6:	d011      	beq.n	8005bcc <HAL_UART_IRQHandler+0x168>
 8005ba8:	69bb      	ldr	r3, [r7, #24]
 8005baa:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8005bae:	2b00      	cmp	r3, #0
 8005bb0:	d00c      	beq.n	8005bcc <HAL_UART_IRQHandler+0x168>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8005bb2:	687b      	ldr	r3, [r7, #4]
 8005bb4:	681b      	ldr	r3, [r3, #0]
 8005bb6:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8005bba:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 8005bbc:	687b      	ldr	r3, [r7, #4]
 8005bbe:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8005bc2:	f043 0220 	orr.w	r2, r3, #32
 8005bc6:	687b      	ldr	r3, [r7, #4]
 8005bc8:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8005bcc:	687b      	ldr	r3, [r7, #4]
 8005bce:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8005bd2:	2b00      	cmp	r3, #0
 8005bd4:	f000 81f6 	beq.w	8005fc4 <HAL_UART_IRQHandler+0x560>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 8005bd8:	69fb      	ldr	r3, [r7, #28]
 8005bda:	f003 0320 	and.w	r3, r3, #32
 8005bde:	2b00      	cmp	r3, #0
 8005be0:	d011      	beq.n	8005c06 <HAL_UART_IRQHandler+0x1a2>
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 8005be2:	69bb      	ldr	r3, [r7, #24]
 8005be4:	f003 0320 	and.w	r3, r3, #32
 8005be8:	2b00      	cmp	r3, #0
 8005bea:	d104      	bne.n	8005bf6 <HAL_UART_IRQHandler+0x192>
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 8005bec:	697b      	ldr	r3, [r7, #20]
 8005bee:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005bf2:	2b00      	cmp	r3, #0
 8005bf4:	d007      	beq.n	8005c06 <HAL_UART_IRQHandler+0x1a2>
      {
        if (huart->RxISR != NULL)
 8005bf6:	687b      	ldr	r3, [r7, #4]
 8005bf8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005bfa:	2b00      	cmp	r3, #0
 8005bfc:	d003      	beq.n	8005c06 <HAL_UART_IRQHandler+0x1a2>
        {
          huart->RxISR(huart);
 8005bfe:	687b      	ldr	r3, [r7, #4]
 8005c00:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005c02:	6878      	ldr	r0, [r7, #4]
 8005c04:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 8005c06:	687b      	ldr	r3, [r7, #4]
 8005c08:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8005c0c:	60fb      	str	r3, [r7, #12]
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8005c0e:	687b      	ldr	r3, [r7, #4]
 8005c10:	681b      	ldr	r3, [r3, #0]
 8005c12:	689b      	ldr	r3, [r3, #8]
 8005c14:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005c18:	2b40      	cmp	r3, #64	; 0x40
 8005c1a:	d004      	beq.n	8005c26 <HAL_UART_IRQHandler+0x1c2>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 8005c1c:	68fb      	ldr	r3, [r7, #12]
 8005c1e:	f003 0328 	and.w	r3, r3, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8005c22:	2b00      	cmp	r3, #0
 8005c24:	d031      	beq.n	8005c8a <HAL_UART_IRQHandler+0x226>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8005c26:	6878      	ldr	r0, [r7, #4]
 8005c28:	f001 f9c2 	bl	8006fb0 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005c2c:	687b      	ldr	r3, [r7, #4]
 8005c2e:	681b      	ldr	r3, [r3, #0]
 8005c30:	689b      	ldr	r3, [r3, #8]
 8005c32:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005c36:	2b40      	cmp	r3, #64	; 0x40
 8005c38:	d123      	bne.n	8005c82 <HAL_UART_IRQHandler+0x21e>
        {
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8005c3a:	687b      	ldr	r3, [r7, #4]
 8005c3c:	681b      	ldr	r3, [r3, #0]
 8005c3e:	689a      	ldr	r2, [r3, #8]
 8005c40:	687b      	ldr	r3, [r7, #4]
 8005c42:	681b      	ldr	r3, [r3, #0]
 8005c44:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8005c48:	609a      	str	r2, [r3, #8]

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8005c4a:	687b      	ldr	r3, [r7, #4]
 8005c4c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8005c4e:	2b00      	cmp	r3, #0
 8005c50:	d013      	beq.n	8005c7a <HAL_UART_IRQHandler+0x216>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8005c52:	687b      	ldr	r3, [r7, #4]
 8005c54:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8005c56:	4a14      	ldr	r2, [pc, #80]	; (8005ca8 <HAL_UART_IRQHandler+0x244>)
 8005c58:	651a      	str	r2, [r3, #80]	; 0x50

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8005c5a:	687b      	ldr	r3, [r7, #4]
 8005c5c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8005c5e:	4618      	mov	r0, r3
 8005c60:	f7fc f998 	bl	8001f94 <HAL_DMA_Abort_IT>
 8005c64:	4603      	mov	r3, r0
 8005c66:	2b00      	cmp	r3, #0
 8005c68:	d017      	beq.n	8005c9a <HAL_UART_IRQHandler+0x236>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8005c6a:	687b      	ldr	r3, [r7, #4]
 8005c6c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8005c6e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005c70:	687a      	ldr	r2, [r7, #4]
 8005c72:	6fd2      	ldr	r2, [r2, #124]	; 0x7c
 8005c74:	4610      	mov	r0, r2
 8005c76:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005c78:	e00f      	b.n	8005c9a <HAL_UART_IRQHandler+0x236>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8005c7a:	6878      	ldr	r0, [r7, #4]
 8005c7c:	f000 f9b6 	bl	8005fec <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005c80:	e00b      	b.n	8005c9a <HAL_UART_IRQHandler+0x236>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8005c82:	6878      	ldr	r0, [r7, #4]
 8005c84:	f000 f9b2 	bl	8005fec <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005c88:	e007      	b.n	8005c9a <HAL_UART_IRQHandler+0x236>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8005c8a:	6878      	ldr	r0, [r7, #4]
 8005c8c:	f000 f9ae 	bl	8005fec <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005c90:	687b      	ldr	r3, [r7, #4]
 8005c92:	2200      	movs	r2, #0
 8005c94:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
      }
    }
    return;
 8005c98:	e194      	b.n	8005fc4 <HAL_UART_IRQHandler+0x560>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005c9a:	bf00      	nop
    return;
 8005c9c:	e192      	b.n	8005fc4 <HAL_UART_IRQHandler+0x560>
 8005c9e:	bf00      	nop
 8005ca0:	10000001 	.word	0x10000001
 8005ca4:	04000120 	.word	0x04000120
 8005ca8:	08007015 	.word	0x08007015

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005cac:	687b      	ldr	r3, [r7, #4]
 8005cae:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8005cb0:	2b01      	cmp	r3, #1
 8005cb2:	f040 810f 	bne.w	8005ed4 <HAL_UART_IRQHandler+0x470>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 8005cb6:	69fb      	ldr	r3, [r7, #28]
 8005cb8:	f003 0310 	and.w	r3, r3, #16
 8005cbc:	2b00      	cmp	r3, #0
 8005cbe:	f000 8109 	beq.w	8005ed4 <HAL_UART_IRQHandler+0x470>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 8005cc2:	69bb      	ldr	r3, [r7, #24]
 8005cc4:	f003 0310 	and.w	r3, r3, #16
 8005cc8:	2b00      	cmp	r3, #0
 8005cca:	f000 8103 	beq.w	8005ed4 <HAL_UART_IRQHandler+0x470>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8005cce:	687b      	ldr	r3, [r7, #4]
 8005cd0:	681b      	ldr	r3, [r3, #0]
 8005cd2:	2210      	movs	r2, #16
 8005cd4:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005cd6:	687b      	ldr	r3, [r7, #4]
 8005cd8:	681b      	ldr	r3, [r3, #0]
 8005cda:	689b      	ldr	r3, [r3, #8]
 8005cdc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005ce0:	2b40      	cmp	r3, #64	; 0x40
 8005ce2:	f040 80bb 	bne.w	8005e5c <HAL_UART_IRQHandler+0x3f8>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8005ce6:	687b      	ldr	r3, [r7, #4]
 8005ce8:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8005cea:	681b      	ldr	r3, [r3, #0]
 8005cec:	4a96      	ldr	r2, [pc, #600]	; (8005f48 <HAL_UART_IRQHandler+0x4e4>)
 8005cee:	4293      	cmp	r3, r2
 8005cf0:	d059      	beq.n	8005da6 <HAL_UART_IRQHandler+0x342>
 8005cf2:	687b      	ldr	r3, [r7, #4]
 8005cf4:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8005cf6:	681b      	ldr	r3, [r3, #0]
 8005cf8:	4a94      	ldr	r2, [pc, #592]	; (8005f4c <HAL_UART_IRQHandler+0x4e8>)
 8005cfa:	4293      	cmp	r3, r2
 8005cfc:	d053      	beq.n	8005da6 <HAL_UART_IRQHandler+0x342>
 8005cfe:	687b      	ldr	r3, [r7, #4]
 8005d00:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8005d02:	681b      	ldr	r3, [r3, #0]
 8005d04:	4a92      	ldr	r2, [pc, #584]	; (8005f50 <HAL_UART_IRQHandler+0x4ec>)
 8005d06:	4293      	cmp	r3, r2
 8005d08:	d04d      	beq.n	8005da6 <HAL_UART_IRQHandler+0x342>
 8005d0a:	687b      	ldr	r3, [r7, #4]
 8005d0c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8005d0e:	681b      	ldr	r3, [r3, #0]
 8005d10:	4a90      	ldr	r2, [pc, #576]	; (8005f54 <HAL_UART_IRQHandler+0x4f0>)
 8005d12:	4293      	cmp	r3, r2
 8005d14:	d047      	beq.n	8005da6 <HAL_UART_IRQHandler+0x342>
 8005d16:	687b      	ldr	r3, [r7, #4]
 8005d18:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8005d1a:	681b      	ldr	r3, [r3, #0]
 8005d1c:	4a8e      	ldr	r2, [pc, #568]	; (8005f58 <HAL_UART_IRQHandler+0x4f4>)
 8005d1e:	4293      	cmp	r3, r2
 8005d20:	d041      	beq.n	8005da6 <HAL_UART_IRQHandler+0x342>
 8005d22:	687b      	ldr	r3, [r7, #4]
 8005d24:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8005d26:	681b      	ldr	r3, [r3, #0]
 8005d28:	4a8c      	ldr	r2, [pc, #560]	; (8005f5c <HAL_UART_IRQHandler+0x4f8>)
 8005d2a:	4293      	cmp	r3, r2
 8005d2c:	d03b      	beq.n	8005da6 <HAL_UART_IRQHandler+0x342>
 8005d2e:	687b      	ldr	r3, [r7, #4]
 8005d30:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8005d32:	681b      	ldr	r3, [r3, #0]
 8005d34:	4a8a      	ldr	r2, [pc, #552]	; (8005f60 <HAL_UART_IRQHandler+0x4fc>)
 8005d36:	4293      	cmp	r3, r2
 8005d38:	d035      	beq.n	8005da6 <HAL_UART_IRQHandler+0x342>
 8005d3a:	687b      	ldr	r3, [r7, #4]
 8005d3c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8005d3e:	681b      	ldr	r3, [r3, #0]
 8005d40:	4a88      	ldr	r2, [pc, #544]	; (8005f64 <HAL_UART_IRQHandler+0x500>)
 8005d42:	4293      	cmp	r3, r2
 8005d44:	d02f      	beq.n	8005da6 <HAL_UART_IRQHandler+0x342>
 8005d46:	687b      	ldr	r3, [r7, #4]
 8005d48:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8005d4a:	681b      	ldr	r3, [r3, #0]
 8005d4c:	4a86      	ldr	r2, [pc, #536]	; (8005f68 <HAL_UART_IRQHandler+0x504>)
 8005d4e:	4293      	cmp	r3, r2
 8005d50:	d029      	beq.n	8005da6 <HAL_UART_IRQHandler+0x342>
 8005d52:	687b      	ldr	r3, [r7, #4]
 8005d54:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8005d56:	681b      	ldr	r3, [r3, #0]
 8005d58:	4a84      	ldr	r2, [pc, #528]	; (8005f6c <HAL_UART_IRQHandler+0x508>)
 8005d5a:	4293      	cmp	r3, r2
 8005d5c:	d023      	beq.n	8005da6 <HAL_UART_IRQHandler+0x342>
 8005d5e:	687b      	ldr	r3, [r7, #4]
 8005d60:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8005d62:	681b      	ldr	r3, [r3, #0]
 8005d64:	4a82      	ldr	r2, [pc, #520]	; (8005f70 <HAL_UART_IRQHandler+0x50c>)
 8005d66:	4293      	cmp	r3, r2
 8005d68:	d01d      	beq.n	8005da6 <HAL_UART_IRQHandler+0x342>
 8005d6a:	687b      	ldr	r3, [r7, #4]
 8005d6c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8005d6e:	681b      	ldr	r3, [r3, #0]
 8005d70:	4a80      	ldr	r2, [pc, #512]	; (8005f74 <HAL_UART_IRQHandler+0x510>)
 8005d72:	4293      	cmp	r3, r2
 8005d74:	d017      	beq.n	8005da6 <HAL_UART_IRQHandler+0x342>
 8005d76:	687b      	ldr	r3, [r7, #4]
 8005d78:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8005d7a:	681b      	ldr	r3, [r3, #0]
 8005d7c:	4a7e      	ldr	r2, [pc, #504]	; (8005f78 <HAL_UART_IRQHandler+0x514>)
 8005d7e:	4293      	cmp	r3, r2
 8005d80:	d011      	beq.n	8005da6 <HAL_UART_IRQHandler+0x342>
 8005d82:	687b      	ldr	r3, [r7, #4]
 8005d84:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8005d86:	681b      	ldr	r3, [r3, #0]
 8005d88:	4a7c      	ldr	r2, [pc, #496]	; (8005f7c <HAL_UART_IRQHandler+0x518>)
 8005d8a:	4293      	cmp	r3, r2
 8005d8c:	d00b      	beq.n	8005da6 <HAL_UART_IRQHandler+0x342>
 8005d8e:	687b      	ldr	r3, [r7, #4]
 8005d90:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8005d92:	681b      	ldr	r3, [r3, #0]
 8005d94:	4a7a      	ldr	r2, [pc, #488]	; (8005f80 <HAL_UART_IRQHandler+0x51c>)
 8005d96:	4293      	cmp	r3, r2
 8005d98:	d005      	beq.n	8005da6 <HAL_UART_IRQHandler+0x342>
 8005d9a:	687b      	ldr	r3, [r7, #4]
 8005d9c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8005d9e:	681b      	ldr	r3, [r3, #0]
 8005da0:	4a78      	ldr	r2, [pc, #480]	; (8005f84 <HAL_UART_IRQHandler+0x520>)
 8005da2:	4293      	cmp	r3, r2
 8005da4:	d105      	bne.n	8005db2 <HAL_UART_IRQHandler+0x34e>
 8005da6:	687b      	ldr	r3, [r7, #4]
 8005da8:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8005daa:	681b      	ldr	r3, [r3, #0]
 8005dac:	685b      	ldr	r3, [r3, #4]
 8005dae:	b29b      	uxth	r3, r3
 8005db0:	e004      	b.n	8005dbc <HAL_UART_IRQHandler+0x358>
 8005db2:	687b      	ldr	r3, [r7, #4]
 8005db4:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8005db6:	681b      	ldr	r3, [r3, #0]
 8005db8:	685b      	ldr	r3, [r3, #4]
 8005dba:	b29b      	uxth	r3, r3
 8005dbc:	813b      	strh	r3, [r7, #8]
      if ((nb_remaining_rx_data > 0U)
 8005dbe:	893b      	ldrh	r3, [r7, #8]
 8005dc0:	2b00      	cmp	r3, #0
 8005dc2:	f000 8101 	beq.w	8005fc8 <HAL_UART_IRQHandler+0x564>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8005dc6:	687b      	ldr	r3, [r7, #4]
 8005dc8:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8005dcc:	893a      	ldrh	r2, [r7, #8]
 8005dce:	429a      	cmp	r2, r3
 8005dd0:	f080 80fa 	bcs.w	8005fc8 <HAL_UART_IRQHandler+0x564>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8005dd4:	687b      	ldr	r3, [r7, #4]
 8005dd6:	893a      	ldrh	r2, [r7, #8]
 8005dd8:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8005ddc:	687b      	ldr	r3, [r7, #4]
 8005dde:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8005de0:	69db      	ldr	r3, [r3, #28]
 8005de2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005de6:	d02b      	beq.n	8005e40 <HAL_UART_IRQHandler+0x3dc>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8005de8:	687b      	ldr	r3, [r7, #4]
 8005dea:	681b      	ldr	r3, [r3, #0]
 8005dec:	681a      	ldr	r2, [r3, #0]
 8005dee:	687b      	ldr	r3, [r7, #4]
 8005df0:	681b      	ldr	r3, [r3, #0]
 8005df2:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8005df6:	601a      	str	r2, [r3, #0]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005df8:	687b      	ldr	r3, [r7, #4]
 8005dfa:	681b      	ldr	r3, [r3, #0]
 8005dfc:	689a      	ldr	r2, [r3, #8]
 8005dfe:	687b      	ldr	r3, [r7, #4]
 8005e00:	681b      	ldr	r3, [r3, #0]
 8005e02:	f022 0201 	bic.w	r2, r2, #1
 8005e06:	609a      	str	r2, [r3, #8]

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8005e08:	687b      	ldr	r3, [r7, #4]
 8005e0a:	681b      	ldr	r3, [r3, #0]
 8005e0c:	689a      	ldr	r2, [r3, #8]
 8005e0e:	687b      	ldr	r3, [r7, #4]
 8005e10:	681b      	ldr	r3, [r3, #0]
 8005e12:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8005e16:	609a      	str	r2, [r3, #8]

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8005e18:	687b      	ldr	r3, [r7, #4]
 8005e1a:	2220      	movs	r2, #32
 8005e1c:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005e20:	687b      	ldr	r3, [r7, #4]
 8005e22:	2200      	movs	r2, #0
 8005e24:	66da      	str	r2, [r3, #108]	; 0x6c

          CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005e26:	687b      	ldr	r3, [r7, #4]
 8005e28:	681b      	ldr	r3, [r3, #0]
 8005e2a:	681a      	ldr	r2, [r3, #0]
 8005e2c:	687b      	ldr	r3, [r7, #4]
 8005e2e:	681b      	ldr	r3, [r3, #0]
 8005e30:	f022 0210 	bic.w	r2, r2, #16
 8005e34:	601a      	str	r2, [r3, #0]

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8005e36:	687b      	ldr	r3, [r7, #4]
 8005e38:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8005e3a:	4618      	mov	r0, r3
 8005e3c:	f7fb fd8c 	bl	8001958 <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8005e40:	687b      	ldr	r3, [r7, #4]
 8005e42:	f8b3 205c 	ldrh.w	r2, [r3, #92]	; 0x5c
 8005e46:	687b      	ldr	r3, [r7, #4]
 8005e48:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8005e4c:	b29b      	uxth	r3, r3
 8005e4e:	1ad3      	subs	r3, r2, r3
 8005e50:	b29b      	uxth	r3, r3
 8005e52:	4619      	mov	r1, r3
 8005e54:	6878      	ldr	r0, [r7, #4]
 8005e56:	f000 f8d3 	bl	8006000 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8005e5a:	e0b5      	b.n	8005fc8 <HAL_UART_IRQHandler+0x564>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8005e5c:	687b      	ldr	r3, [r7, #4]
 8005e5e:	f8b3 205c 	ldrh.w	r2, [r3, #92]	; 0x5c
 8005e62:	687b      	ldr	r3, [r7, #4]
 8005e64:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8005e68:	b29b      	uxth	r3, r3
 8005e6a:	1ad3      	subs	r3, r2, r3
 8005e6c:	817b      	strh	r3, [r7, #10]
      if ((huart->RxXferCount > 0U)
 8005e6e:	687b      	ldr	r3, [r7, #4]
 8005e70:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8005e74:	b29b      	uxth	r3, r3
 8005e76:	2b00      	cmp	r3, #0
 8005e78:	f000 80a8 	beq.w	8005fcc <HAL_UART_IRQHandler+0x568>
          && (nb_rx_data > 0U))
 8005e7c:	897b      	ldrh	r3, [r7, #10]
 8005e7e:	2b00      	cmp	r3, #0
 8005e80:	f000 80a4 	beq.w	8005fcc <HAL_UART_IRQHandler+0x568>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8005e84:	687b      	ldr	r3, [r7, #4]
 8005e86:	681b      	ldr	r3, [r3, #0]
 8005e88:	681a      	ldr	r2, [r3, #0]
 8005e8a:	687b      	ldr	r3, [r7, #4]
 8005e8c:	681b      	ldr	r3, [r3, #0]
 8005e8e:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 8005e92:	601a      	str	r2, [r3, #0]

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8005e94:	687b      	ldr	r3, [r7, #4]
 8005e96:	681b      	ldr	r3, [r3, #0]
 8005e98:	6899      	ldr	r1, [r3, #8]
 8005e9a:	687b      	ldr	r3, [r7, #4]
 8005e9c:	681a      	ldr	r2, [r3, #0]
 8005e9e:	4b3a      	ldr	r3, [pc, #232]	; (8005f88 <HAL_UART_IRQHandler+0x524>)
 8005ea0:	400b      	ands	r3, r1
 8005ea2:	6093      	str	r3, [r2, #8]

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8005ea4:	687b      	ldr	r3, [r7, #4]
 8005ea6:	2220      	movs	r2, #32
 8005ea8:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005eac:	687b      	ldr	r3, [r7, #4]
 8005eae:	2200      	movs	r2, #0
 8005eb0:	66da      	str	r2, [r3, #108]	; 0x6c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8005eb2:	687b      	ldr	r3, [r7, #4]
 8005eb4:	2200      	movs	r2, #0
 8005eb6:	671a      	str	r2, [r3, #112]	; 0x70

        CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005eb8:	687b      	ldr	r3, [r7, #4]
 8005eba:	681b      	ldr	r3, [r3, #0]
 8005ebc:	681a      	ldr	r2, [r3, #0]
 8005ebe:	687b      	ldr	r3, [r7, #4]
 8005ec0:	681b      	ldr	r3, [r3, #0]
 8005ec2:	f022 0210 	bic.w	r2, r2, #16
 8005ec6:	601a      	str	r2, [r3, #0]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8005ec8:	897b      	ldrh	r3, [r7, #10]
 8005eca:	4619      	mov	r1, r3
 8005ecc:	6878      	ldr	r0, [r7, #4]
 8005ece:	f000 f897 	bl	8006000 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8005ed2:	e07b      	b.n	8005fcc <HAL_UART_IRQHandler+0x568>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 8005ed4:	69fb      	ldr	r3, [r7, #28]
 8005ed6:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8005eda:	2b00      	cmp	r3, #0
 8005edc:	d00d      	beq.n	8005efa <HAL_UART_IRQHandler+0x496>
 8005ede:	697b      	ldr	r3, [r7, #20]
 8005ee0:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8005ee4:	2b00      	cmp	r3, #0
 8005ee6:	d008      	beq.n	8005efa <HAL_UART_IRQHandler+0x496>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 8005ee8:	687b      	ldr	r3, [r7, #4]
 8005eea:	681b      	ldr	r3, [r3, #0]
 8005eec:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8005ef0:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 8005ef2:	6878      	ldr	r0, [r7, #4]
 8005ef4:	f001 f8be 	bl	8007074 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8005ef8:	e06b      	b.n	8005fd2 <HAL_UART_IRQHandler+0x56e>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
 8005efa:	69fb      	ldr	r3, [r7, #28]
 8005efc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005f00:	2b00      	cmp	r3, #0
 8005f02:	d012      	beq.n	8005f2a <HAL_UART_IRQHandler+0x4c6>
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
 8005f04:	69bb      	ldr	r3, [r7, #24]
 8005f06:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005f0a:	2b00      	cmp	r3, #0
 8005f0c:	d104      	bne.n	8005f18 <HAL_UART_IRQHandler+0x4b4>
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
 8005f0e:	697b      	ldr	r3, [r7, #20]
 8005f10:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8005f14:	2b00      	cmp	r3, #0
 8005f16:	d008      	beq.n	8005f2a <HAL_UART_IRQHandler+0x4c6>
  {
    if (huart->TxISR != NULL)
 8005f18:	687b      	ldr	r3, [r7, #4]
 8005f1a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005f1c:	2b00      	cmp	r3, #0
 8005f1e:	d057      	beq.n	8005fd0 <HAL_UART_IRQHandler+0x56c>
    {
      huart->TxISR(huart);
 8005f20:	687b      	ldr	r3, [r7, #4]
 8005f22:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005f24:	6878      	ldr	r0, [r7, #4]
 8005f26:	4798      	blx	r3
    }
    return;
 8005f28:	e052      	b.n	8005fd0 <HAL_UART_IRQHandler+0x56c>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 8005f2a:	69fb      	ldr	r3, [r7, #28]
 8005f2c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005f30:	2b00      	cmp	r3, #0
 8005f32:	d02b      	beq.n	8005f8c <HAL_UART_IRQHandler+0x528>
 8005f34:	69bb      	ldr	r3, [r7, #24]
 8005f36:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005f3a:	2b00      	cmp	r3, #0
 8005f3c:	d026      	beq.n	8005f8c <HAL_UART_IRQHandler+0x528>
  {
    UART_EndTransmit_IT(huart);
 8005f3e:	6878      	ldr	r0, [r7, #4]
 8005f40:	f001 f87e 	bl	8007040 <UART_EndTransmit_IT>
    return;
 8005f44:	e045      	b.n	8005fd2 <HAL_UART_IRQHandler+0x56e>
 8005f46:	bf00      	nop
 8005f48:	40020010 	.word	0x40020010
 8005f4c:	40020028 	.word	0x40020028
 8005f50:	40020040 	.word	0x40020040
 8005f54:	40020058 	.word	0x40020058
 8005f58:	40020070 	.word	0x40020070
 8005f5c:	40020088 	.word	0x40020088
 8005f60:	400200a0 	.word	0x400200a0
 8005f64:	400200b8 	.word	0x400200b8
 8005f68:	40020410 	.word	0x40020410
 8005f6c:	40020428 	.word	0x40020428
 8005f70:	40020440 	.word	0x40020440
 8005f74:	40020458 	.word	0x40020458
 8005f78:	40020470 	.word	0x40020470
 8005f7c:	40020488 	.word	0x40020488
 8005f80:	400204a0 	.word	0x400204a0
 8005f84:	400204b8 	.word	0x400204b8
 8005f88:	effffffe 	.word	0xeffffffe
  }

  /* UART TX Fifo Empty occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_TXFE) != 0U) && ((cr1its & USART_CR1_TXFEIE) != 0U))
 8005f8c:	69fb      	ldr	r3, [r7, #28]
 8005f8e:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8005f92:	2b00      	cmp	r3, #0
 8005f94:	d008      	beq.n	8005fa8 <HAL_UART_IRQHandler+0x544>
 8005f96:	69bb      	ldr	r3, [r7, #24]
 8005f98:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8005f9c:	2b00      	cmp	r3, #0
 8005f9e:	d003      	beq.n	8005fa8 <HAL_UART_IRQHandler+0x544>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Tx Fifo Empty Callback */
    huart->TxFifoEmptyCallback(huart);
#else
    /* Call legacy weak Tx Fifo Empty Callback */
    HAL_UARTEx_TxFifoEmptyCallback(huart);
 8005fa0:	6878      	ldr	r0, [r7, #4]
 8005fa2:	f001 f87b 	bl	800709c <HAL_UARTEx_TxFifoEmptyCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8005fa6:	e014      	b.n	8005fd2 <HAL_UART_IRQHandler+0x56e>
  }

  /* UART RX Fifo Full occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_RXFF) != 0U) && ((cr1its & USART_CR1_RXFFIE) != 0U))
 8005fa8:	69fb      	ldr	r3, [r7, #28]
 8005faa:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8005fae:	2b00      	cmp	r3, #0
 8005fb0:	d00f      	beq.n	8005fd2 <HAL_UART_IRQHandler+0x56e>
 8005fb2:	69bb      	ldr	r3, [r7, #24]
 8005fb4:	2b00      	cmp	r3, #0
 8005fb6:	da0c      	bge.n	8005fd2 <HAL_UART_IRQHandler+0x56e>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Rx Fifo Full Callback */
    huart->RxFifoFullCallback(huart);
#else
    /* Call legacy weak Rx Fifo Full Callback */
    HAL_UARTEx_RxFifoFullCallback(huart);
 8005fb8:	6878      	ldr	r0, [r7, #4]
 8005fba:	f001 f865 	bl	8007088 <HAL_UARTEx_RxFifoFullCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8005fbe:	e008      	b.n	8005fd2 <HAL_UART_IRQHandler+0x56e>
      return;
 8005fc0:	bf00      	nop
 8005fc2:	e006      	b.n	8005fd2 <HAL_UART_IRQHandler+0x56e>
    return;
 8005fc4:	bf00      	nop
 8005fc6:	e004      	b.n	8005fd2 <HAL_UART_IRQHandler+0x56e>
      return;
 8005fc8:	bf00      	nop
 8005fca:	e002      	b.n	8005fd2 <HAL_UART_IRQHandler+0x56e>
      return;
 8005fcc:	bf00      	nop
 8005fce:	e000      	b.n	8005fd2 <HAL_UART_IRQHandler+0x56e>
    return;
 8005fd0:	bf00      	nop
  }
}
 8005fd2:	3720      	adds	r7, #32
 8005fd4:	46bd      	mov	sp, r7
 8005fd6:	bd80      	pop	{r7, pc}

08005fd8 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8005fd8:	b480      	push	{r7}
 8005fda:	b083      	sub	sp, #12
 8005fdc:	af00      	add	r7, sp, #0
 8005fde:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 8005fe0:	bf00      	nop
 8005fe2:	370c      	adds	r7, #12
 8005fe4:	46bd      	mov	sp, r7
 8005fe6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005fea:	4770      	bx	lr

08005fec <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8005fec:	b480      	push	{r7}
 8005fee:	b083      	sub	sp, #12
 8005ff0:	af00      	add	r7, sp, #0
 8005ff2:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 8005ff4:	bf00      	nop
 8005ff6:	370c      	adds	r7, #12
 8005ff8:	46bd      	mov	sp, r7
 8005ffa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ffe:	4770      	bx	lr

08006000 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8006000:	b480      	push	{r7}
 8006002:	b083      	sub	sp, #12
 8006004:	af00      	add	r7, sp, #0
 8006006:	6078      	str	r0, [r7, #4]
 8006008:	460b      	mov	r3, r1
 800600a:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 800600c:	bf00      	nop
 800600e:	370c      	adds	r7, #12
 8006010:	46bd      	mov	sp, r7
 8006012:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006016:	4770      	bx	lr

08006018 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8006018:	b5b0      	push	{r4, r5, r7, lr}
 800601a:	b08e      	sub	sp, #56	; 0x38
 800601c:	af00      	add	r7, sp, #0
 800601e:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8006020:	2300      	movs	r3, #0
 8006022:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8006026:	687b      	ldr	r3, [r7, #4]
 8006028:	689a      	ldr	r2, [r3, #8]
 800602a:	687b      	ldr	r3, [r7, #4]
 800602c:	691b      	ldr	r3, [r3, #16]
 800602e:	431a      	orrs	r2, r3
 8006030:	687b      	ldr	r3, [r7, #4]
 8006032:	695b      	ldr	r3, [r3, #20]
 8006034:	431a      	orrs	r2, r3
 8006036:	687b      	ldr	r3, [r7, #4]
 8006038:	69db      	ldr	r3, [r3, #28]
 800603a:	4313      	orrs	r3, r2
 800603c:	637b      	str	r3, [r7, #52]	; 0x34
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800603e:	687b      	ldr	r3, [r7, #4]
 8006040:	681b      	ldr	r3, [r3, #0]
 8006042:	681a      	ldr	r2, [r3, #0]
 8006044:	4bbf      	ldr	r3, [pc, #764]	; (8006344 <UART_SetConfig+0x32c>)
 8006046:	4013      	ands	r3, r2
 8006048:	687a      	ldr	r2, [r7, #4]
 800604a:	6812      	ldr	r2, [r2, #0]
 800604c:	6b79      	ldr	r1, [r7, #52]	; 0x34
 800604e:	430b      	orrs	r3, r1
 8006050:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8006052:	687b      	ldr	r3, [r7, #4]
 8006054:	681b      	ldr	r3, [r3, #0]
 8006056:	685b      	ldr	r3, [r3, #4]
 8006058:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800605c:	687b      	ldr	r3, [r7, #4]
 800605e:	68da      	ldr	r2, [r3, #12]
 8006060:	687b      	ldr	r3, [r7, #4]
 8006062:	681b      	ldr	r3, [r3, #0]
 8006064:	430a      	orrs	r2, r1
 8006066:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8006068:	687b      	ldr	r3, [r7, #4]
 800606a:	699b      	ldr	r3, [r3, #24]
 800606c:	637b      	str	r3, [r7, #52]	; 0x34

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 800606e:	687b      	ldr	r3, [r7, #4]
 8006070:	681b      	ldr	r3, [r3, #0]
 8006072:	4ab5      	ldr	r2, [pc, #724]	; (8006348 <UART_SetConfig+0x330>)
 8006074:	4293      	cmp	r3, r2
 8006076:	d004      	beq.n	8006082 <UART_SetConfig+0x6a>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8006078:	687b      	ldr	r3, [r7, #4]
 800607a:	6a1b      	ldr	r3, [r3, #32]
 800607c:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800607e:	4313      	orrs	r3, r2
 8006080:	637b      	str	r3, [r7, #52]	; 0x34
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8006082:	687b      	ldr	r3, [r7, #4]
 8006084:	681b      	ldr	r3, [r3, #0]
 8006086:	689a      	ldr	r2, [r3, #8]
 8006088:	4bb0      	ldr	r3, [pc, #704]	; (800634c <UART_SetConfig+0x334>)
 800608a:	4013      	ands	r3, r2
 800608c:	687a      	ldr	r2, [r7, #4]
 800608e:	6812      	ldr	r2, [r2, #0]
 8006090:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8006092:	430b      	orrs	r3, r1
 8006094:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8006096:	687b      	ldr	r3, [r7, #4]
 8006098:	681b      	ldr	r3, [r3, #0]
 800609a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800609c:	f023 010f 	bic.w	r1, r3, #15
 80060a0:	687b      	ldr	r3, [r7, #4]
 80060a2:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80060a4:	687b      	ldr	r3, [r7, #4]
 80060a6:	681b      	ldr	r3, [r3, #0]
 80060a8:	430a      	orrs	r2, r1
 80060aa:	62da      	str	r2, [r3, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 80060ac:	687b      	ldr	r3, [r7, #4]
 80060ae:	681b      	ldr	r3, [r3, #0]
 80060b0:	4aa7      	ldr	r2, [pc, #668]	; (8006350 <UART_SetConfig+0x338>)
 80060b2:	4293      	cmp	r3, r2
 80060b4:	d176      	bne.n	80061a4 <UART_SetConfig+0x18c>
 80060b6:	4ba7      	ldr	r3, [pc, #668]	; (8006354 <UART_SetConfig+0x33c>)
 80060b8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80060ba:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80060be:	2b28      	cmp	r3, #40	; 0x28
 80060c0:	d86c      	bhi.n	800619c <UART_SetConfig+0x184>
 80060c2:	a201      	add	r2, pc, #4	; (adr r2, 80060c8 <UART_SetConfig+0xb0>)
 80060c4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80060c8:	0800616d 	.word	0x0800616d
 80060cc:	0800619d 	.word	0x0800619d
 80060d0:	0800619d 	.word	0x0800619d
 80060d4:	0800619d 	.word	0x0800619d
 80060d8:	0800619d 	.word	0x0800619d
 80060dc:	0800619d 	.word	0x0800619d
 80060e0:	0800619d 	.word	0x0800619d
 80060e4:	0800619d 	.word	0x0800619d
 80060e8:	08006175 	.word	0x08006175
 80060ec:	0800619d 	.word	0x0800619d
 80060f0:	0800619d 	.word	0x0800619d
 80060f4:	0800619d 	.word	0x0800619d
 80060f8:	0800619d 	.word	0x0800619d
 80060fc:	0800619d 	.word	0x0800619d
 8006100:	0800619d 	.word	0x0800619d
 8006104:	0800619d 	.word	0x0800619d
 8006108:	0800617d 	.word	0x0800617d
 800610c:	0800619d 	.word	0x0800619d
 8006110:	0800619d 	.word	0x0800619d
 8006114:	0800619d 	.word	0x0800619d
 8006118:	0800619d 	.word	0x0800619d
 800611c:	0800619d 	.word	0x0800619d
 8006120:	0800619d 	.word	0x0800619d
 8006124:	0800619d 	.word	0x0800619d
 8006128:	08006185 	.word	0x08006185
 800612c:	0800619d 	.word	0x0800619d
 8006130:	0800619d 	.word	0x0800619d
 8006134:	0800619d 	.word	0x0800619d
 8006138:	0800619d 	.word	0x0800619d
 800613c:	0800619d 	.word	0x0800619d
 8006140:	0800619d 	.word	0x0800619d
 8006144:	0800619d 	.word	0x0800619d
 8006148:	0800618d 	.word	0x0800618d
 800614c:	0800619d 	.word	0x0800619d
 8006150:	0800619d 	.word	0x0800619d
 8006154:	0800619d 	.word	0x0800619d
 8006158:	0800619d 	.word	0x0800619d
 800615c:	0800619d 	.word	0x0800619d
 8006160:	0800619d 	.word	0x0800619d
 8006164:	0800619d 	.word	0x0800619d
 8006168:	08006195 	.word	0x08006195
 800616c:	2301      	movs	r3, #1
 800616e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8006172:	e326      	b.n	80067c2 <UART_SetConfig+0x7aa>
 8006174:	2304      	movs	r3, #4
 8006176:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800617a:	e322      	b.n	80067c2 <UART_SetConfig+0x7aa>
 800617c:	2308      	movs	r3, #8
 800617e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8006182:	e31e      	b.n	80067c2 <UART_SetConfig+0x7aa>
 8006184:	2310      	movs	r3, #16
 8006186:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800618a:	e31a      	b.n	80067c2 <UART_SetConfig+0x7aa>
 800618c:	2320      	movs	r3, #32
 800618e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8006192:	e316      	b.n	80067c2 <UART_SetConfig+0x7aa>
 8006194:	2340      	movs	r3, #64	; 0x40
 8006196:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800619a:	e312      	b.n	80067c2 <UART_SetConfig+0x7aa>
 800619c:	2380      	movs	r3, #128	; 0x80
 800619e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80061a2:	e30e      	b.n	80067c2 <UART_SetConfig+0x7aa>
 80061a4:	687b      	ldr	r3, [r7, #4]
 80061a6:	681b      	ldr	r3, [r3, #0]
 80061a8:	4a6b      	ldr	r2, [pc, #428]	; (8006358 <UART_SetConfig+0x340>)
 80061aa:	4293      	cmp	r3, r2
 80061ac:	d130      	bne.n	8006210 <UART_SetConfig+0x1f8>
 80061ae:	4b69      	ldr	r3, [pc, #420]	; (8006354 <UART_SetConfig+0x33c>)
 80061b0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80061b2:	f003 0307 	and.w	r3, r3, #7
 80061b6:	2b05      	cmp	r3, #5
 80061b8:	d826      	bhi.n	8006208 <UART_SetConfig+0x1f0>
 80061ba:	a201      	add	r2, pc, #4	; (adr r2, 80061c0 <UART_SetConfig+0x1a8>)
 80061bc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80061c0:	080061d9 	.word	0x080061d9
 80061c4:	080061e1 	.word	0x080061e1
 80061c8:	080061e9 	.word	0x080061e9
 80061cc:	080061f1 	.word	0x080061f1
 80061d0:	080061f9 	.word	0x080061f9
 80061d4:	08006201 	.word	0x08006201
 80061d8:	2300      	movs	r3, #0
 80061da:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80061de:	e2f0      	b.n	80067c2 <UART_SetConfig+0x7aa>
 80061e0:	2304      	movs	r3, #4
 80061e2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80061e6:	e2ec      	b.n	80067c2 <UART_SetConfig+0x7aa>
 80061e8:	2308      	movs	r3, #8
 80061ea:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80061ee:	e2e8      	b.n	80067c2 <UART_SetConfig+0x7aa>
 80061f0:	2310      	movs	r3, #16
 80061f2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80061f6:	e2e4      	b.n	80067c2 <UART_SetConfig+0x7aa>
 80061f8:	2320      	movs	r3, #32
 80061fa:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80061fe:	e2e0      	b.n	80067c2 <UART_SetConfig+0x7aa>
 8006200:	2340      	movs	r3, #64	; 0x40
 8006202:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8006206:	e2dc      	b.n	80067c2 <UART_SetConfig+0x7aa>
 8006208:	2380      	movs	r3, #128	; 0x80
 800620a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800620e:	e2d8      	b.n	80067c2 <UART_SetConfig+0x7aa>
 8006210:	687b      	ldr	r3, [r7, #4]
 8006212:	681b      	ldr	r3, [r3, #0]
 8006214:	4a51      	ldr	r2, [pc, #324]	; (800635c <UART_SetConfig+0x344>)
 8006216:	4293      	cmp	r3, r2
 8006218:	d130      	bne.n	800627c <UART_SetConfig+0x264>
 800621a:	4b4e      	ldr	r3, [pc, #312]	; (8006354 <UART_SetConfig+0x33c>)
 800621c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800621e:	f003 0307 	and.w	r3, r3, #7
 8006222:	2b05      	cmp	r3, #5
 8006224:	d826      	bhi.n	8006274 <UART_SetConfig+0x25c>
 8006226:	a201      	add	r2, pc, #4	; (adr r2, 800622c <UART_SetConfig+0x214>)
 8006228:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800622c:	08006245 	.word	0x08006245
 8006230:	0800624d 	.word	0x0800624d
 8006234:	08006255 	.word	0x08006255
 8006238:	0800625d 	.word	0x0800625d
 800623c:	08006265 	.word	0x08006265
 8006240:	0800626d 	.word	0x0800626d
 8006244:	2300      	movs	r3, #0
 8006246:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800624a:	e2ba      	b.n	80067c2 <UART_SetConfig+0x7aa>
 800624c:	2304      	movs	r3, #4
 800624e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8006252:	e2b6      	b.n	80067c2 <UART_SetConfig+0x7aa>
 8006254:	2308      	movs	r3, #8
 8006256:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800625a:	e2b2      	b.n	80067c2 <UART_SetConfig+0x7aa>
 800625c:	2310      	movs	r3, #16
 800625e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8006262:	e2ae      	b.n	80067c2 <UART_SetConfig+0x7aa>
 8006264:	2320      	movs	r3, #32
 8006266:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800626a:	e2aa      	b.n	80067c2 <UART_SetConfig+0x7aa>
 800626c:	2340      	movs	r3, #64	; 0x40
 800626e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8006272:	e2a6      	b.n	80067c2 <UART_SetConfig+0x7aa>
 8006274:	2380      	movs	r3, #128	; 0x80
 8006276:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800627a:	e2a2      	b.n	80067c2 <UART_SetConfig+0x7aa>
 800627c:	687b      	ldr	r3, [r7, #4]
 800627e:	681b      	ldr	r3, [r3, #0]
 8006280:	4a37      	ldr	r2, [pc, #220]	; (8006360 <UART_SetConfig+0x348>)
 8006282:	4293      	cmp	r3, r2
 8006284:	d130      	bne.n	80062e8 <UART_SetConfig+0x2d0>
 8006286:	4b33      	ldr	r3, [pc, #204]	; (8006354 <UART_SetConfig+0x33c>)
 8006288:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800628a:	f003 0307 	and.w	r3, r3, #7
 800628e:	2b05      	cmp	r3, #5
 8006290:	d826      	bhi.n	80062e0 <UART_SetConfig+0x2c8>
 8006292:	a201      	add	r2, pc, #4	; (adr r2, 8006298 <UART_SetConfig+0x280>)
 8006294:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006298:	080062b1 	.word	0x080062b1
 800629c:	080062b9 	.word	0x080062b9
 80062a0:	080062c1 	.word	0x080062c1
 80062a4:	080062c9 	.word	0x080062c9
 80062a8:	080062d1 	.word	0x080062d1
 80062ac:	080062d9 	.word	0x080062d9
 80062b0:	2300      	movs	r3, #0
 80062b2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80062b6:	e284      	b.n	80067c2 <UART_SetConfig+0x7aa>
 80062b8:	2304      	movs	r3, #4
 80062ba:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80062be:	e280      	b.n	80067c2 <UART_SetConfig+0x7aa>
 80062c0:	2308      	movs	r3, #8
 80062c2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80062c6:	e27c      	b.n	80067c2 <UART_SetConfig+0x7aa>
 80062c8:	2310      	movs	r3, #16
 80062ca:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80062ce:	e278      	b.n	80067c2 <UART_SetConfig+0x7aa>
 80062d0:	2320      	movs	r3, #32
 80062d2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80062d6:	e274      	b.n	80067c2 <UART_SetConfig+0x7aa>
 80062d8:	2340      	movs	r3, #64	; 0x40
 80062da:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80062de:	e270      	b.n	80067c2 <UART_SetConfig+0x7aa>
 80062e0:	2380      	movs	r3, #128	; 0x80
 80062e2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80062e6:	e26c      	b.n	80067c2 <UART_SetConfig+0x7aa>
 80062e8:	687b      	ldr	r3, [r7, #4]
 80062ea:	681b      	ldr	r3, [r3, #0]
 80062ec:	4a1d      	ldr	r2, [pc, #116]	; (8006364 <UART_SetConfig+0x34c>)
 80062ee:	4293      	cmp	r3, r2
 80062f0:	d142      	bne.n	8006378 <UART_SetConfig+0x360>
 80062f2:	4b18      	ldr	r3, [pc, #96]	; (8006354 <UART_SetConfig+0x33c>)
 80062f4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80062f6:	f003 0307 	and.w	r3, r3, #7
 80062fa:	2b05      	cmp	r3, #5
 80062fc:	d838      	bhi.n	8006370 <UART_SetConfig+0x358>
 80062fe:	a201      	add	r2, pc, #4	; (adr r2, 8006304 <UART_SetConfig+0x2ec>)
 8006300:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006304:	0800631d 	.word	0x0800631d
 8006308:	08006325 	.word	0x08006325
 800630c:	0800632d 	.word	0x0800632d
 8006310:	08006335 	.word	0x08006335
 8006314:	0800633d 	.word	0x0800633d
 8006318:	08006369 	.word	0x08006369
 800631c:	2300      	movs	r3, #0
 800631e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8006322:	e24e      	b.n	80067c2 <UART_SetConfig+0x7aa>
 8006324:	2304      	movs	r3, #4
 8006326:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800632a:	e24a      	b.n	80067c2 <UART_SetConfig+0x7aa>
 800632c:	2308      	movs	r3, #8
 800632e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8006332:	e246      	b.n	80067c2 <UART_SetConfig+0x7aa>
 8006334:	2310      	movs	r3, #16
 8006336:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800633a:	e242      	b.n	80067c2 <UART_SetConfig+0x7aa>
 800633c:	2320      	movs	r3, #32
 800633e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8006342:	e23e      	b.n	80067c2 <UART_SetConfig+0x7aa>
 8006344:	cfff69f3 	.word	0xcfff69f3
 8006348:	58000c00 	.word	0x58000c00
 800634c:	11fff4ff 	.word	0x11fff4ff
 8006350:	40011000 	.word	0x40011000
 8006354:	58024400 	.word	0x58024400
 8006358:	40004400 	.word	0x40004400
 800635c:	40004800 	.word	0x40004800
 8006360:	40004c00 	.word	0x40004c00
 8006364:	40005000 	.word	0x40005000
 8006368:	2340      	movs	r3, #64	; 0x40
 800636a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800636e:	e228      	b.n	80067c2 <UART_SetConfig+0x7aa>
 8006370:	2380      	movs	r3, #128	; 0x80
 8006372:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8006376:	e224      	b.n	80067c2 <UART_SetConfig+0x7aa>
 8006378:	687b      	ldr	r3, [r7, #4]
 800637a:	681b      	ldr	r3, [r3, #0]
 800637c:	4ab1      	ldr	r2, [pc, #708]	; (8006644 <UART_SetConfig+0x62c>)
 800637e:	4293      	cmp	r3, r2
 8006380:	d176      	bne.n	8006470 <UART_SetConfig+0x458>
 8006382:	4bb1      	ldr	r3, [pc, #708]	; (8006648 <UART_SetConfig+0x630>)
 8006384:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006386:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800638a:	2b28      	cmp	r3, #40	; 0x28
 800638c:	d86c      	bhi.n	8006468 <UART_SetConfig+0x450>
 800638e:	a201      	add	r2, pc, #4	; (adr r2, 8006394 <UART_SetConfig+0x37c>)
 8006390:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006394:	08006439 	.word	0x08006439
 8006398:	08006469 	.word	0x08006469
 800639c:	08006469 	.word	0x08006469
 80063a0:	08006469 	.word	0x08006469
 80063a4:	08006469 	.word	0x08006469
 80063a8:	08006469 	.word	0x08006469
 80063ac:	08006469 	.word	0x08006469
 80063b0:	08006469 	.word	0x08006469
 80063b4:	08006441 	.word	0x08006441
 80063b8:	08006469 	.word	0x08006469
 80063bc:	08006469 	.word	0x08006469
 80063c0:	08006469 	.word	0x08006469
 80063c4:	08006469 	.word	0x08006469
 80063c8:	08006469 	.word	0x08006469
 80063cc:	08006469 	.word	0x08006469
 80063d0:	08006469 	.word	0x08006469
 80063d4:	08006449 	.word	0x08006449
 80063d8:	08006469 	.word	0x08006469
 80063dc:	08006469 	.word	0x08006469
 80063e0:	08006469 	.word	0x08006469
 80063e4:	08006469 	.word	0x08006469
 80063e8:	08006469 	.word	0x08006469
 80063ec:	08006469 	.word	0x08006469
 80063f0:	08006469 	.word	0x08006469
 80063f4:	08006451 	.word	0x08006451
 80063f8:	08006469 	.word	0x08006469
 80063fc:	08006469 	.word	0x08006469
 8006400:	08006469 	.word	0x08006469
 8006404:	08006469 	.word	0x08006469
 8006408:	08006469 	.word	0x08006469
 800640c:	08006469 	.word	0x08006469
 8006410:	08006469 	.word	0x08006469
 8006414:	08006459 	.word	0x08006459
 8006418:	08006469 	.word	0x08006469
 800641c:	08006469 	.word	0x08006469
 8006420:	08006469 	.word	0x08006469
 8006424:	08006469 	.word	0x08006469
 8006428:	08006469 	.word	0x08006469
 800642c:	08006469 	.word	0x08006469
 8006430:	08006469 	.word	0x08006469
 8006434:	08006461 	.word	0x08006461
 8006438:	2301      	movs	r3, #1
 800643a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800643e:	e1c0      	b.n	80067c2 <UART_SetConfig+0x7aa>
 8006440:	2304      	movs	r3, #4
 8006442:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8006446:	e1bc      	b.n	80067c2 <UART_SetConfig+0x7aa>
 8006448:	2308      	movs	r3, #8
 800644a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800644e:	e1b8      	b.n	80067c2 <UART_SetConfig+0x7aa>
 8006450:	2310      	movs	r3, #16
 8006452:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8006456:	e1b4      	b.n	80067c2 <UART_SetConfig+0x7aa>
 8006458:	2320      	movs	r3, #32
 800645a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800645e:	e1b0      	b.n	80067c2 <UART_SetConfig+0x7aa>
 8006460:	2340      	movs	r3, #64	; 0x40
 8006462:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8006466:	e1ac      	b.n	80067c2 <UART_SetConfig+0x7aa>
 8006468:	2380      	movs	r3, #128	; 0x80
 800646a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800646e:	e1a8      	b.n	80067c2 <UART_SetConfig+0x7aa>
 8006470:	687b      	ldr	r3, [r7, #4]
 8006472:	681b      	ldr	r3, [r3, #0]
 8006474:	4a75      	ldr	r2, [pc, #468]	; (800664c <UART_SetConfig+0x634>)
 8006476:	4293      	cmp	r3, r2
 8006478:	d130      	bne.n	80064dc <UART_SetConfig+0x4c4>
 800647a:	4b73      	ldr	r3, [pc, #460]	; (8006648 <UART_SetConfig+0x630>)
 800647c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800647e:	f003 0307 	and.w	r3, r3, #7
 8006482:	2b05      	cmp	r3, #5
 8006484:	d826      	bhi.n	80064d4 <UART_SetConfig+0x4bc>
 8006486:	a201      	add	r2, pc, #4	; (adr r2, 800648c <UART_SetConfig+0x474>)
 8006488:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800648c:	080064a5 	.word	0x080064a5
 8006490:	080064ad 	.word	0x080064ad
 8006494:	080064b5 	.word	0x080064b5
 8006498:	080064bd 	.word	0x080064bd
 800649c:	080064c5 	.word	0x080064c5
 80064a0:	080064cd 	.word	0x080064cd
 80064a4:	2300      	movs	r3, #0
 80064a6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80064aa:	e18a      	b.n	80067c2 <UART_SetConfig+0x7aa>
 80064ac:	2304      	movs	r3, #4
 80064ae:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80064b2:	e186      	b.n	80067c2 <UART_SetConfig+0x7aa>
 80064b4:	2308      	movs	r3, #8
 80064b6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80064ba:	e182      	b.n	80067c2 <UART_SetConfig+0x7aa>
 80064bc:	2310      	movs	r3, #16
 80064be:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80064c2:	e17e      	b.n	80067c2 <UART_SetConfig+0x7aa>
 80064c4:	2320      	movs	r3, #32
 80064c6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80064ca:	e17a      	b.n	80067c2 <UART_SetConfig+0x7aa>
 80064cc:	2340      	movs	r3, #64	; 0x40
 80064ce:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80064d2:	e176      	b.n	80067c2 <UART_SetConfig+0x7aa>
 80064d4:	2380      	movs	r3, #128	; 0x80
 80064d6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80064da:	e172      	b.n	80067c2 <UART_SetConfig+0x7aa>
 80064dc:	687b      	ldr	r3, [r7, #4]
 80064de:	681b      	ldr	r3, [r3, #0]
 80064e0:	4a5b      	ldr	r2, [pc, #364]	; (8006650 <UART_SetConfig+0x638>)
 80064e2:	4293      	cmp	r3, r2
 80064e4:	d130      	bne.n	8006548 <UART_SetConfig+0x530>
 80064e6:	4b58      	ldr	r3, [pc, #352]	; (8006648 <UART_SetConfig+0x630>)
 80064e8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80064ea:	f003 0307 	and.w	r3, r3, #7
 80064ee:	2b05      	cmp	r3, #5
 80064f0:	d826      	bhi.n	8006540 <UART_SetConfig+0x528>
 80064f2:	a201      	add	r2, pc, #4	; (adr r2, 80064f8 <UART_SetConfig+0x4e0>)
 80064f4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80064f8:	08006511 	.word	0x08006511
 80064fc:	08006519 	.word	0x08006519
 8006500:	08006521 	.word	0x08006521
 8006504:	08006529 	.word	0x08006529
 8006508:	08006531 	.word	0x08006531
 800650c:	08006539 	.word	0x08006539
 8006510:	2300      	movs	r3, #0
 8006512:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8006516:	e154      	b.n	80067c2 <UART_SetConfig+0x7aa>
 8006518:	2304      	movs	r3, #4
 800651a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800651e:	e150      	b.n	80067c2 <UART_SetConfig+0x7aa>
 8006520:	2308      	movs	r3, #8
 8006522:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8006526:	e14c      	b.n	80067c2 <UART_SetConfig+0x7aa>
 8006528:	2310      	movs	r3, #16
 800652a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800652e:	e148      	b.n	80067c2 <UART_SetConfig+0x7aa>
 8006530:	2320      	movs	r3, #32
 8006532:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8006536:	e144      	b.n	80067c2 <UART_SetConfig+0x7aa>
 8006538:	2340      	movs	r3, #64	; 0x40
 800653a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800653e:	e140      	b.n	80067c2 <UART_SetConfig+0x7aa>
 8006540:	2380      	movs	r3, #128	; 0x80
 8006542:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8006546:	e13c      	b.n	80067c2 <UART_SetConfig+0x7aa>
 8006548:	687b      	ldr	r3, [r7, #4]
 800654a:	681b      	ldr	r3, [r3, #0]
 800654c:	4a41      	ldr	r2, [pc, #260]	; (8006654 <UART_SetConfig+0x63c>)
 800654e:	4293      	cmp	r3, r2
 8006550:	f040 8082 	bne.w	8006658 <UART_SetConfig+0x640>
 8006554:	4b3c      	ldr	r3, [pc, #240]	; (8006648 <UART_SetConfig+0x630>)
 8006556:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006558:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800655c:	2b28      	cmp	r3, #40	; 0x28
 800655e:	d86d      	bhi.n	800663c <UART_SetConfig+0x624>
 8006560:	a201      	add	r2, pc, #4	; (adr r2, 8006568 <UART_SetConfig+0x550>)
 8006562:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006566:	bf00      	nop
 8006568:	0800660d 	.word	0x0800660d
 800656c:	0800663d 	.word	0x0800663d
 8006570:	0800663d 	.word	0x0800663d
 8006574:	0800663d 	.word	0x0800663d
 8006578:	0800663d 	.word	0x0800663d
 800657c:	0800663d 	.word	0x0800663d
 8006580:	0800663d 	.word	0x0800663d
 8006584:	0800663d 	.word	0x0800663d
 8006588:	08006615 	.word	0x08006615
 800658c:	0800663d 	.word	0x0800663d
 8006590:	0800663d 	.word	0x0800663d
 8006594:	0800663d 	.word	0x0800663d
 8006598:	0800663d 	.word	0x0800663d
 800659c:	0800663d 	.word	0x0800663d
 80065a0:	0800663d 	.word	0x0800663d
 80065a4:	0800663d 	.word	0x0800663d
 80065a8:	0800661d 	.word	0x0800661d
 80065ac:	0800663d 	.word	0x0800663d
 80065b0:	0800663d 	.word	0x0800663d
 80065b4:	0800663d 	.word	0x0800663d
 80065b8:	0800663d 	.word	0x0800663d
 80065bc:	0800663d 	.word	0x0800663d
 80065c0:	0800663d 	.word	0x0800663d
 80065c4:	0800663d 	.word	0x0800663d
 80065c8:	08006625 	.word	0x08006625
 80065cc:	0800663d 	.word	0x0800663d
 80065d0:	0800663d 	.word	0x0800663d
 80065d4:	0800663d 	.word	0x0800663d
 80065d8:	0800663d 	.word	0x0800663d
 80065dc:	0800663d 	.word	0x0800663d
 80065e0:	0800663d 	.word	0x0800663d
 80065e4:	0800663d 	.word	0x0800663d
 80065e8:	0800662d 	.word	0x0800662d
 80065ec:	0800663d 	.word	0x0800663d
 80065f0:	0800663d 	.word	0x0800663d
 80065f4:	0800663d 	.word	0x0800663d
 80065f8:	0800663d 	.word	0x0800663d
 80065fc:	0800663d 	.word	0x0800663d
 8006600:	0800663d 	.word	0x0800663d
 8006604:	0800663d 	.word	0x0800663d
 8006608:	08006635 	.word	0x08006635
 800660c:	2301      	movs	r3, #1
 800660e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8006612:	e0d6      	b.n	80067c2 <UART_SetConfig+0x7aa>
 8006614:	2304      	movs	r3, #4
 8006616:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800661a:	e0d2      	b.n	80067c2 <UART_SetConfig+0x7aa>
 800661c:	2308      	movs	r3, #8
 800661e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8006622:	e0ce      	b.n	80067c2 <UART_SetConfig+0x7aa>
 8006624:	2310      	movs	r3, #16
 8006626:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800662a:	e0ca      	b.n	80067c2 <UART_SetConfig+0x7aa>
 800662c:	2320      	movs	r3, #32
 800662e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8006632:	e0c6      	b.n	80067c2 <UART_SetConfig+0x7aa>
 8006634:	2340      	movs	r3, #64	; 0x40
 8006636:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800663a:	e0c2      	b.n	80067c2 <UART_SetConfig+0x7aa>
 800663c:	2380      	movs	r3, #128	; 0x80
 800663e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8006642:	e0be      	b.n	80067c2 <UART_SetConfig+0x7aa>
 8006644:	40011400 	.word	0x40011400
 8006648:	58024400 	.word	0x58024400
 800664c:	40007800 	.word	0x40007800
 8006650:	40007c00 	.word	0x40007c00
 8006654:	40011800 	.word	0x40011800
 8006658:	687b      	ldr	r3, [r7, #4]
 800665a:	681b      	ldr	r3, [r3, #0]
 800665c:	4aad      	ldr	r2, [pc, #692]	; (8006914 <UART_SetConfig+0x8fc>)
 800665e:	4293      	cmp	r3, r2
 8006660:	d176      	bne.n	8006750 <UART_SetConfig+0x738>
 8006662:	4bad      	ldr	r3, [pc, #692]	; (8006918 <UART_SetConfig+0x900>)
 8006664:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006666:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800666a:	2b28      	cmp	r3, #40	; 0x28
 800666c:	d86c      	bhi.n	8006748 <UART_SetConfig+0x730>
 800666e:	a201      	add	r2, pc, #4	; (adr r2, 8006674 <UART_SetConfig+0x65c>)
 8006670:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006674:	08006719 	.word	0x08006719
 8006678:	08006749 	.word	0x08006749
 800667c:	08006749 	.word	0x08006749
 8006680:	08006749 	.word	0x08006749
 8006684:	08006749 	.word	0x08006749
 8006688:	08006749 	.word	0x08006749
 800668c:	08006749 	.word	0x08006749
 8006690:	08006749 	.word	0x08006749
 8006694:	08006721 	.word	0x08006721
 8006698:	08006749 	.word	0x08006749
 800669c:	08006749 	.word	0x08006749
 80066a0:	08006749 	.word	0x08006749
 80066a4:	08006749 	.word	0x08006749
 80066a8:	08006749 	.word	0x08006749
 80066ac:	08006749 	.word	0x08006749
 80066b0:	08006749 	.word	0x08006749
 80066b4:	08006729 	.word	0x08006729
 80066b8:	08006749 	.word	0x08006749
 80066bc:	08006749 	.word	0x08006749
 80066c0:	08006749 	.word	0x08006749
 80066c4:	08006749 	.word	0x08006749
 80066c8:	08006749 	.word	0x08006749
 80066cc:	08006749 	.word	0x08006749
 80066d0:	08006749 	.word	0x08006749
 80066d4:	08006731 	.word	0x08006731
 80066d8:	08006749 	.word	0x08006749
 80066dc:	08006749 	.word	0x08006749
 80066e0:	08006749 	.word	0x08006749
 80066e4:	08006749 	.word	0x08006749
 80066e8:	08006749 	.word	0x08006749
 80066ec:	08006749 	.word	0x08006749
 80066f0:	08006749 	.word	0x08006749
 80066f4:	08006739 	.word	0x08006739
 80066f8:	08006749 	.word	0x08006749
 80066fc:	08006749 	.word	0x08006749
 8006700:	08006749 	.word	0x08006749
 8006704:	08006749 	.word	0x08006749
 8006708:	08006749 	.word	0x08006749
 800670c:	08006749 	.word	0x08006749
 8006710:	08006749 	.word	0x08006749
 8006714:	08006741 	.word	0x08006741
 8006718:	2301      	movs	r3, #1
 800671a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800671e:	e050      	b.n	80067c2 <UART_SetConfig+0x7aa>
 8006720:	2304      	movs	r3, #4
 8006722:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8006726:	e04c      	b.n	80067c2 <UART_SetConfig+0x7aa>
 8006728:	2308      	movs	r3, #8
 800672a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800672e:	e048      	b.n	80067c2 <UART_SetConfig+0x7aa>
 8006730:	2310      	movs	r3, #16
 8006732:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8006736:	e044      	b.n	80067c2 <UART_SetConfig+0x7aa>
 8006738:	2320      	movs	r3, #32
 800673a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800673e:	e040      	b.n	80067c2 <UART_SetConfig+0x7aa>
 8006740:	2340      	movs	r3, #64	; 0x40
 8006742:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8006746:	e03c      	b.n	80067c2 <UART_SetConfig+0x7aa>
 8006748:	2380      	movs	r3, #128	; 0x80
 800674a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800674e:	e038      	b.n	80067c2 <UART_SetConfig+0x7aa>
 8006750:	687b      	ldr	r3, [r7, #4]
 8006752:	681b      	ldr	r3, [r3, #0]
 8006754:	4a71      	ldr	r2, [pc, #452]	; (800691c <UART_SetConfig+0x904>)
 8006756:	4293      	cmp	r3, r2
 8006758:	d130      	bne.n	80067bc <UART_SetConfig+0x7a4>
 800675a:	4b6f      	ldr	r3, [pc, #444]	; (8006918 <UART_SetConfig+0x900>)
 800675c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800675e:	f003 0307 	and.w	r3, r3, #7
 8006762:	2b05      	cmp	r3, #5
 8006764:	d826      	bhi.n	80067b4 <UART_SetConfig+0x79c>
 8006766:	a201      	add	r2, pc, #4	; (adr r2, 800676c <UART_SetConfig+0x754>)
 8006768:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800676c:	08006785 	.word	0x08006785
 8006770:	0800678d 	.word	0x0800678d
 8006774:	08006795 	.word	0x08006795
 8006778:	0800679d 	.word	0x0800679d
 800677c:	080067a5 	.word	0x080067a5
 8006780:	080067ad 	.word	0x080067ad
 8006784:	2302      	movs	r3, #2
 8006786:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800678a:	e01a      	b.n	80067c2 <UART_SetConfig+0x7aa>
 800678c:	2304      	movs	r3, #4
 800678e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8006792:	e016      	b.n	80067c2 <UART_SetConfig+0x7aa>
 8006794:	2308      	movs	r3, #8
 8006796:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800679a:	e012      	b.n	80067c2 <UART_SetConfig+0x7aa>
 800679c:	2310      	movs	r3, #16
 800679e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80067a2:	e00e      	b.n	80067c2 <UART_SetConfig+0x7aa>
 80067a4:	2320      	movs	r3, #32
 80067a6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80067aa:	e00a      	b.n	80067c2 <UART_SetConfig+0x7aa>
 80067ac:	2340      	movs	r3, #64	; 0x40
 80067ae:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80067b2:	e006      	b.n	80067c2 <UART_SetConfig+0x7aa>
 80067b4:	2380      	movs	r3, #128	; 0x80
 80067b6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80067ba:	e002      	b.n	80067c2 <UART_SetConfig+0x7aa>
 80067bc:	2380      	movs	r3, #128	; 0x80
 80067be:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 80067c2:	687b      	ldr	r3, [r7, #4]
 80067c4:	681b      	ldr	r3, [r3, #0]
 80067c6:	4a55      	ldr	r2, [pc, #340]	; (800691c <UART_SetConfig+0x904>)
 80067c8:	4293      	cmp	r3, r2
 80067ca:	f040 80f0 	bne.w	80069ae <UART_SetConfig+0x996>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 80067ce:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 80067d2:	2b20      	cmp	r3, #32
 80067d4:	dc46      	bgt.n	8006864 <UART_SetConfig+0x84c>
 80067d6:	2b02      	cmp	r3, #2
 80067d8:	db75      	blt.n	80068c6 <UART_SetConfig+0x8ae>
 80067da:	3b02      	subs	r3, #2
 80067dc:	2b1e      	cmp	r3, #30
 80067de:	d872      	bhi.n	80068c6 <UART_SetConfig+0x8ae>
 80067e0:	a201      	add	r2, pc, #4	; (adr r2, 80067e8 <UART_SetConfig+0x7d0>)
 80067e2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80067e6:	bf00      	nop
 80067e8:	0800686b 	.word	0x0800686b
 80067ec:	080068c7 	.word	0x080068c7
 80067f0:	08006873 	.word	0x08006873
 80067f4:	080068c7 	.word	0x080068c7
 80067f8:	080068c7 	.word	0x080068c7
 80067fc:	080068c7 	.word	0x080068c7
 8006800:	08006883 	.word	0x08006883
 8006804:	080068c7 	.word	0x080068c7
 8006808:	080068c7 	.word	0x080068c7
 800680c:	080068c7 	.word	0x080068c7
 8006810:	080068c7 	.word	0x080068c7
 8006814:	080068c7 	.word	0x080068c7
 8006818:	080068c7 	.word	0x080068c7
 800681c:	080068c7 	.word	0x080068c7
 8006820:	08006893 	.word	0x08006893
 8006824:	080068c7 	.word	0x080068c7
 8006828:	080068c7 	.word	0x080068c7
 800682c:	080068c7 	.word	0x080068c7
 8006830:	080068c7 	.word	0x080068c7
 8006834:	080068c7 	.word	0x080068c7
 8006838:	080068c7 	.word	0x080068c7
 800683c:	080068c7 	.word	0x080068c7
 8006840:	080068c7 	.word	0x080068c7
 8006844:	080068c7 	.word	0x080068c7
 8006848:	080068c7 	.word	0x080068c7
 800684c:	080068c7 	.word	0x080068c7
 8006850:	080068c7 	.word	0x080068c7
 8006854:	080068c7 	.word	0x080068c7
 8006858:	080068c7 	.word	0x080068c7
 800685c:	080068c7 	.word	0x080068c7
 8006860:	080068b9 	.word	0x080068b9
 8006864:	2b40      	cmp	r3, #64	; 0x40
 8006866:	d02a      	beq.n	80068be <UART_SetConfig+0x8a6>
 8006868:	e02d      	b.n	80068c6 <UART_SetConfig+0x8ae>
    {
      case UART_CLOCKSOURCE_D3PCLK1:
        pclk = HAL_RCCEx_GetD3PCLK1Freq();
 800686a:	f7fe fb15 	bl	8004e98 <HAL_RCCEx_GetD3PCLK1Freq>
 800686e:	62f8      	str	r0, [r7, #44]	; 0x2c
        break;
 8006870:	e02f      	b.n	80068d2 <UART_SetConfig+0x8ba>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8006872:	f107 0314 	add.w	r3, r7, #20
 8006876:	4618      	mov	r0, r3
 8006878:	f7fe fb24 	bl	8004ec4 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 800687c:	69bb      	ldr	r3, [r7, #24]
 800687e:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8006880:	e027      	b.n	80068d2 <UART_SetConfig+0x8ba>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8006882:	f107 0308 	add.w	r3, r7, #8
 8006886:	4618      	mov	r0, r3
 8006888:	f7fe fc70 	bl	800516c <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 800688c:	68fb      	ldr	r3, [r7, #12]
 800688e:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8006890:	e01f      	b.n	80068d2 <UART_SetConfig+0x8ba>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8006892:	4b21      	ldr	r3, [pc, #132]	; (8006918 <UART_SetConfig+0x900>)
 8006894:	681b      	ldr	r3, [r3, #0]
 8006896:	f003 0320 	and.w	r3, r3, #32
 800689a:	2b00      	cmp	r3, #0
 800689c:	d009      	beq.n	80068b2 <UART_SetConfig+0x89a>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 800689e:	4b1e      	ldr	r3, [pc, #120]	; (8006918 <UART_SetConfig+0x900>)
 80068a0:	681b      	ldr	r3, [r3, #0]
 80068a2:	08db      	lsrs	r3, r3, #3
 80068a4:	f003 0303 	and.w	r3, r3, #3
 80068a8:	4a1d      	ldr	r2, [pc, #116]	; (8006920 <UART_SetConfig+0x908>)
 80068aa:	fa22 f303 	lsr.w	r3, r2, r3
 80068ae:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 80068b0:	e00f      	b.n	80068d2 <UART_SetConfig+0x8ba>
          pclk = (uint32_t) HSI_VALUE;
 80068b2:	4b1b      	ldr	r3, [pc, #108]	; (8006920 <UART_SetConfig+0x908>)
 80068b4:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 80068b6:	e00c      	b.n	80068d2 <UART_SetConfig+0x8ba>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 80068b8:	4b1a      	ldr	r3, [pc, #104]	; (8006924 <UART_SetConfig+0x90c>)
 80068ba:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 80068bc:	e009      	b.n	80068d2 <UART_SetConfig+0x8ba>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80068be:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80068c2:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 80068c4:	e005      	b.n	80068d2 <UART_SetConfig+0x8ba>
      default:
        pclk = 0U;
 80068c6:	2300      	movs	r3, #0
 80068c8:	62fb      	str	r3, [r7, #44]	; 0x2c
        ret = HAL_ERROR;
 80068ca:	2301      	movs	r3, #1
 80068cc:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
        break;
 80068d0:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 80068d2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80068d4:	2b00      	cmp	r3, #0
 80068d6:	f000 81e6 	beq.w	8006ca6 <UART_SetConfig+0xc8e>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 80068da:	687b      	ldr	r3, [r7, #4]
 80068dc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80068de:	4a12      	ldr	r2, [pc, #72]	; (8006928 <UART_SetConfig+0x910>)
 80068e0:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80068e4:	461a      	mov	r2, r3
 80068e6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80068e8:	fbb3 f3f2 	udiv	r3, r3, r2
 80068ec:	623b      	str	r3, [r7, #32]

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 80068ee:	687b      	ldr	r3, [r7, #4]
 80068f0:	685a      	ldr	r2, [r3, #4]
 80068f2:	4613      	mov	r3, r2
 80068f4:	005b      	lsls	r3, r3, #1
 80068f6:	4413      	add	r3, r2
 80068f8:	6a3a      	ldr	r2, [r7, #32]
 80068fa:	429a      	cmp	r2, r3
 80068fc:	d305      	bcc.n	800690a <UART_SetConfig+0x8f2>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 80068fe:	687b      	ldr	r3, [r7, #4]
 8006900:	685b      	ldr	r3, [r3, #4]
 8006902:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8006904:	6a3a      	ldr	r2, [r7, #32]
 8006906:	429a      	cmp	r2, r3
 8006908:	d910      	bls.n	800692c <UART_SetConfig+0x914>
      {
        ret = HAL_ERROR;
 800690a:	2301      	movs	r3, #1
 800690c:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
 8006910:	e1c9      	b.n	8006ca6 <UART_SetConfig+0xc8e>
 8006912:	bf00      	nop
 8006914:	40011c00 	.word	0x40011c00
 8006918:	58024400 	.word	0x58024400
 800691c:	58000c00 	.word	0x58000c00
 8006920:	03d09000 	.word	0x03d09000
 8006924:	003d0900 	.word	0x003d0900
 8006928:	08008e24 	.word	0x08008e24
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800692c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800692e:	4618      	mov	r0, r3
 8006930:	f04f 0100 	mov.w	r1, #0
 8006934:	687b      	ldr	r3, [r7, #4]
 8006936:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006938:	4ac1      	ldr	r2, [pc, #772]	; (8006c40 <UART_SetConfig+0xc28>)
 800693a:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800693e:	b29a      	uxth	r2, r3
 8006940:	f04f 0300 	mov.w	r3, #0
 8006944:	f7f9 fd34 	bl	80003b0 <__aeabi_uldivmod>
 8006948:	4602      	mov	r2, r0
 800694a:	460b      	mov	r3, r1
 800694c:	4610      	mov	r0, r2
 800694e:	4619      	mov	r1, r3
 8006950:	f04f 0200 	mov.w	r2, #0
 8006954:	f04f 0300 	mov.w	r3, #0
 8006958:	020b      	lsls	r3, r1, #8
 800695a:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 800695e:	0202      	lsls	r2, r0, #8
 8006960:	6879      	ldr	r1, [r7, #4]
 8006962:	6849      	ldr	r1, [r1, #4]
 8006964:	0849      	lsrs	r1, r1, #1
 8006966:	4608      	mov	r0, r1
 8006968:	f04f 0100 	mov.w	r1, #0
 800696c:	1814      	adds	r4, r2, r0
 800696e:	eb43 0501 	adc.w	r5, r3, r1
 8006972:	687b      	ldr	r3, [r7, #4]
 8006974:	685b      	ldr	r3, [r3, #4]
 8006976:	461a      	mov	r2, r3
 8006978:	f04f 0300 	mov.w	r3, #0
 800697c:	4620      	mov	r0, r4
 800697e:	4629      	mov	r1, r5
 8006980:	f7f9 fd16 	bl	80003b0 <__aeabi_uldivmod>
 8006984:	4602      	mov	r2, r0
 8006986:	460b      	mov	r3, r1
 8006988:	4613      	mov	r3, r2
 800698a:	62bb      	str	r3, [r7, #40]	; 0x28
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 800698c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800698e:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8006992:	d308      	bcc.n	80069a6 <UART_SetConfig+0x98e>
 8006994:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006996:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800699a:	d204      	bcs.n	80069a6 <UART_SetConfig+0x98e>
        {
          huart->Instance->BRR = usartdiv;
 800699c:	687b      	ldr	r3, [r7, #4]
 800699e:	681b      	ldr	r3, [r3, #0]
 80069a0:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80069a2:	60da      	str	r2, [r3, #12]
 80069a4:	e17f      	b.n	8006ca6 <UART_SetConfig+0xc8e>
        }
        else
        {
          ret = HAL_ERROR;
 80069a6:	2301      	movs	r3, #1
 80069a8:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
 80069ac:	e17b      	b.n	8006ca6 <UART_SetConfig+0xc8e>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80069ae:	687b      	ldr	r3, [r7, #4]
 80069b0:	69db      	ldr	r3, [r3, #28]
 80069b2:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80069b6:	f040 80be 	bne.w	8006b36 <UART_SetConfig+0xb1e>
  {
    switch (clocksource)
 80069ba:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 80069be:	2b20      	cmp	r3, #32
 80069c0:	dc48      	bgt.n	8006a54 <UART_SetConfig+0xa3c>
 80069c2:	2b00      	cmp	r3, #0
 80069c4:	db7b      	blt.n	8006abe <UART_SetConfig+0xaa6>
 80069c6:	2b20      	cmp	r3, #32
 80069c8:	d879      	bhi.n	8006abe <UART_SetConfig+0xaa6>
 80069ca:	a201      	add	r2, pc, #4	; (adr r2, 80069d0 <UART_SetConfig+0x9b8>)
 80069cc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80069d0:	08006a5b 	.word	0x08006a5b
 80069d4:	08006a63 	.word	0x08006a63
 80069d8:	08006abf 	.word	0x08006abf
 80069dc:	08006abf 	.word	0x08006abf
 80069e0:	08006a6b 	.word	0x08006a6b
 80069e4:	08006abf 	.word	0x08006abf
 80069e8:	08006abf 	.word	0x08006abf
 80069ec:	08006abf 	.word	0x08006abf
 80069f0:	08006a7b 	.word	0x08006a7b
 80069f4:	08006abf 	.word	0x08006abf
 80069f8:	08006abf 	.word	0x08006abf
 80069fc:	08006abf 	.word	0x08006abf
 8006a00:	08006abf 	.word	0x08006abf
 8006a04:	08006abf 	.word	0x08006abf
 8006a08:	08006abf 	.word	0x08006abf
 8006a0c:	08006abf 	.word	0x08006abf
 8006a10:	08006a8b 	.word	0x08006a8b
 8006a14:	08006abf 	.word	0x08006abf
 8006a18:	08006abf 	.word	0x08006abf
 8006a1c:	08006abf 	.word	0x08006abf
 8006a20:	08006abf 	.word	0x08006abf
 8006a24:	08006abf 	.word	0x08006abf
 8006a28:	08006abf 	.word	0x08006abf
 8006a2c:	08006abf 	.word	0x08006abf
 8006a30:	08006abf 	.word	0x08006abf
 8006a34:	08006abf 	.word	0x08006abf
 8006a38:	08006abf 	.word	0x08006abf
 8006a3c:	08006abf 	.word	0x08006abf
 8006a40:	08006abf 	.word	0x08006abf
 8006a44:	08006abf 	.word	0x08006abf
 8006a48:	08006abf 	.word	0x08006abf
 8006a4c:	08006abf 	.word	0x08006abf
 8006a50:	08006ab1 	.word	0x08006ab1
 8006a54:	2b40      	cmp	r3, #64	; 0x40
 8006a56:	d02e      	beq.n	8006ab6 <UART_SetConfig+0xa9e>
 8006a58:	e031      	b.n	8006abe <UART_SetConfig+0xaa6>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8006a5a:	f7fd faf7 	bl	800404c <HAL_RCC_GetPCLK1Freq>
 8006a5e:	62f8      	str	r0, [r7, #44]	; 0x2c
        break;
 8006a60:	e033      	b.n	8006aca <UART_SetConfig+0xab2>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8006a62:	f7fd fb09 	bl	8004078 <HAL_RCC_GetPCLK2Freq>
 8006a66:	62f8      	str	r0, [r7, #44]	; 0x2c
        break;
 8006a68:	e02f      	b.n	8006aca <UART_SetConfig+0xab2>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8006a6a:	f107 0314 	add.w	r3, r7, #20
 8006a6e:	4618      	mov	r0, r3
 8006a70:	f7fe fa28 	bl	8004ec4 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 8006a74:	69bb      	ldr	r3, [r7, #24]
 8006a76:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8006a78:	e027      	b.n	8006aca <UART_SetConfig+0xab2>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8006a7a:	f107 0308 	add.w	r3, r7, #8
 8006a7e:	4618      	mov	r0, r3
 8006a80:	f7fe fb74 	bl	800516c <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 8006a84:	68fb      	ldr	r3, [r7, #12]
 8006a86:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8006a88:	e01f      	b.n	8006aca <UART_SetConfig+0xab2>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8006a8a:	4b6e      	ldr	r3, [pc, #440]	; (8006c44 <UART_SetConfig+0xc2c>)
 8006a8c:	681b      	ldr	r3, [r3, #0]
 8006a8e:	f003 0320 	and.w	r3, r3, #32
 8006a92:	2b00      	cmp	r3, #0
 8006a94:	d009      	beq.n	8006aaa <UART_SetConfig+0xa92>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 8006a96:	4b6b      	ldr	r3, [pc, #428]	; (8006c44 <UART_SetConfig+0xc2c>)
 8006a98:	681b      	ldr	r3, [r3, #0]
 8006a9a:	08db      	lsrs	r3, r3, #3
 8006a9c:	f003 0303 	and.w	r3, r3, #3
 8006aa0:	4a69      	ldr	r2, [pc, #420]	; (8006c48 <UART_SetConfig+0xc30>)
 8006aa2:	fa22 f303 	lsr.w	r3, r2, r3
 8006aa6:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8006aa8:	e00f      	b.n	8006aca <UART_SetConfig+0xab2>
          pclk = (uint32_t) HSI_VALUE;
 8006aaa:	4b67      	ldr	r3, [pc, #412]	; (8006c48 <UART_SetConfig+0xc30>)
 8006aac:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8006aae:	e00c      	b.n	8006aca <UART_SetConfig+0xab2>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 8006ab0:	4b66      	ldr	r3, [pc, #408]	; (8006c4c <UART_SetConfig+0xc34>)
 8006ab2:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8006ab4:	e009      	b.n	8006aca <UART_SetConfig+0xab2>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8006ab6:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8006aba:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8006abc:	e005      	b.n	8006aca <UART_SetConfig+0xab2>
      default:
        pclk = 0U;
 8006abe:	2300      	movs	r3, #0
 8006ac0:	62fb      	str	r3, [r7, #44]	; 0x2c
        ret = HAL_ERROR;
 8006ac2:	2301      	movs	r3, #1
 8006ac4:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
        break;
 8006ac8:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8006aca:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006acc:	2b00      	cmp	r3, #0
 8006ace:	f000 80ea 	beq.w	8006ca6 <UART_SetConfig+0xc8e>
    {
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8006ad2:	687b      	ldr	r3, [r7, #4]
 8006ad4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006ad6:	4a5a      	ldr	r2, [pc, #360]	; (8006c40 <UART_SetConfig+0xc28>)
 8006ad8:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8006adc:	461a      	mov	r2, r3
 8006ade:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006ae0:	fbb3 f3f2 	udiv	r3, r3, r2
 8006ae4:	005a      	lsls	r2, r3, #1
 8006ae6:	687b      	ldr	r3, [r7, #4]
 8006ae8:	685b      	ldr	r3, [r3, #4]
 8006aea:	085b      	lsrs	r3, r3, #1
 8006aec:	441a      	add	r2, r3
 8006aee:	687b      	ldr	r3, [r7, #4]
 8006af0:	685b      	ldr	r3, [r3, #4]
 8006af2:	fbb2 f3f3 	udiv	r3, r2, r3
 8006af6:	b29b      	uxth	r3, r3
 8006af8:	62bb      	str	r3, [r7, #40]	; 0x28
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8006afa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006afc:	2b0f      	cmp	r3, #15
 8006afe:	d916      	bls.n	8006b2e <UART_SetConfig+0xb16>
 8006b00:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006b02:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006b06:	d212      	bcs.n	8006b2e <UART_SetConfig+0xb16>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8006b08:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006b0a:	b29b      	uxth	r3, r3
 8006b0c:	f023 030f 	bic.w	r3, r3, #15
 8006b10:	84fb      	strh	r3, [r7, #38]	; 0x26
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8006b12:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006b14:	085b      	lsrs	r3, r3, #1
 8006b16:	b29b      	uxth	r3, r3
 8006b18:	f003 0307 	and.w	r3, r3, #7
 8006b1c:	b29a      	uxth	r2, r3
 8006b1e:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8006b20:	4313      	orrs	r3, r2
 8006b22:	84fb      	strh	r3, [r7, #38]	; 0x26
        huart->Instance->BRR = brrtemp;
 8006b24:	687b      	ldr	r3, [r7, #4]
 8006b26:	681b      	ldr	r3, [r3, #0]
 8006b28:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 8006b2a:	60da      	str	r2, [r3, #12]
 8006b2c:	e0bb      	b.n	8006ca6 <UART_SetConfig+0xc8e>
      }
      else
      {
        ret = HAL_ERROR;
 8006b2e:	2301      	movs	r3, #1
 8006b30:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
 8006b34:	e0b7      	b.n	8006ca6 <UART_SetConfig+0xc8e>
      }
    }
  }
  else
  {
    switch (clocksource)
 8006b36:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8006b3a:	2b20      	cmp	r3, #32
 8006b3c:	dc4a      	bgt.n	8006bd4 <UART_SetConfig+0xbbc>
 8006b3e:	2b00      	cmp	r3, #0
 8006b40:	f2c0 8086 	blt.w	8006c50 <UART_SetConfig+0xc38>
 8006b44:	2b20      	cmp	r3, #32
 8006b46:	f200 8083 	bhi.w	8006c50 <UART_SetConfig+0xc38>
 8006b4a:	a201      	add	r2, pc, #4	; (adr r2, 8006b50 <UART_SetConfig+0xb38>)
 8006b4c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006b50:	08006bdb 	.word	0x08006bdb
 8006b54:	08006be3 	.word	0x08006be3
 8006b58:	08006c51 	.word	0x08006c51
 8006b5c:	08006c51 	.word	0x08006c51
 8006b60:	08006beb 	.word	0x08006beb
 8006b64:	08006c51 	.word	0x08006c51
 8006b68:	08006c51 	.word	0x08006c51
 8006b6c:	08006c51 	.word	0x08006c51
 8006b70:	08006bfb 	.word	0x08006bfb
 8006b74:	08006c51 	.word	0x08006c51
 8006b78:	08006c51 	.word	0x08006c51
 8006b7c:	08006c51 	.word	0x08006c51
 8006b80:	08006c51 	.word	0x08006c51
 8006b84:	08006c51 	.word	0x08006c51
 8006b88:	08006c51 	.word	0x08006c51
 8006b8c:	08006c51 	.word	0x08006c51
 8006b90:	08006c0b 	.word	0x08006c0b
 8006b94:	08006c51 	.word	0x08006c51
 8006b98:	08006c51 	.word	0x08006c51
 8006b9c:	08006c51 	.word	0x08006c51
 8006ba0:	08006c51 	.word	0x08006c51
 8006ba4:	08006c51 	.word	0x08006c51
 8006ba8:	08006c51 	.word	0x08006c51
 8006bac:	08006c51 	.word	0x08006c51
 8006bb0:	08006c51 	.word	0x08006c51
 8006bb4:	08006c51 	.word	0x08006c51
 8006bb8:	08006c51 	.word	0x08006c51
 8006bbc:	08006c51 	.word	0x08006c51
 8006bc0:	08006c51 	.word	0x08006c51
 8006bc4:	08006c51 	.word	0x08006c51
 8006bc8:	08006c51 	.word	0x08006c51
 8006bcc:	08006c51 	.word	0x08006c51
 8006bd0:	08006c31 	.word	0x08006c31
 8006bd4:	2b40      	cmp	r3, #64	; 0x40
 8006bd6:	d02e      	beq.n	8006c36 <UART_SetConfig+0xc1e>
 8006bd8:	e03a      	b.n	8006c50 <UART_SetConfig+0xc38>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8006bda:	f7fd fa37 	bl	800404c <HAL_RCC_GetPCLK1Freq>
 8006bde:	62f8      	str	r0, [r7, #44]	; 0x2c
        break;
 8006be0:	e03c      	b.n	8006c5c <UART_SetConfig+0xc44>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8006be2:	f7fd fa49 	bl	8004078 <HAL_RCC_GetPCLK2Freq>
 8006be6:	62f8      	str	r0, [r7, #44]	; 0x2c
        break;
 8006be8:	e038      	b.n	8006c5c <UART_SetConfig+0xc44>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8006bea:	f107 0314 	add.w	r3, r7, #20
 8006bee:	4618      	mov	r0, r3
 8006bf0:	f7fe f968 	bl	8004ec4 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 8006bf4:	69bb      	ldr	r3, [r7, #24]
 8006bf6:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8006bf8:	e030      	b.n	8006c5c <UART_SetConfig+0xc44>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8006bfa:	f107 0308 	add.w	r3, r7, #8
 8006bfe:	4618      	mov	r0, r3
 8006c00:	f7fe fab4 	bl	800516c <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 8006c04:	68fb      	ldr	r3, [r7, #12]
 8006c06:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8006c08:	e028      	b.n	8006c5c <UART_SetConfig+0xc44>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8006c0a:	4b0e      	ldr	r3, [pc, #56]	; (8006c44 <UART_SetConfig+0xc2c>)
 8006c0c:	681b      	ldr	r3, [r3, #0]
 8006c0e:	f003 0320 	and.w	r3, r3, #32
 8006c12:	2b00      	cmp	r3, #0
 8006c14:	d009      	beq.n	8006c2a <UART_SetConfig+0xc12>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 8006c16:	4b0b      	ldr	r3, [pc, #44]	; (8006c44 <UART_SetConfig+0xc2c>)
 8006c18:	681b      	ldr	r3, [r3, #0]
 8006c1a:	08db      	lsrs	r3, r3, #3
 8006c1c:	f003 0303 	and.w	r3, r3, #3
 8006c20:	4a09      	ldr	r2, [pc, #36]	; (8006c48 <UART_SetConfig+0xc30>)
 8006c22:	fa22 f303 	lsr.w	r3, r2, r3
 8006c26:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8006c28:	e018      	b.n	8006c5c <UART_SetConfig+0xc44>
          pclk = (uint32_t) HSI_VALUE;
 8006c2a:	4b07      	ldr	r3, [pc, #28]	; (8006c48 <UART_SetConfig+0xc30>)
 8006c2c:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8006c2e:	e015      	b.n	8006c5c <UART_SetConfig+0xc44>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 8006c30:	4b06      	ldr	r3, [pc, #24]	; (8006c4c <UART_SetConfig+0xc34>)
 8006c32:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8006c34:	e012      	b.n	8006c5c <UART_SetConfig+0xc44>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8006c36:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8006c3a:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8006c3c:	e00e      	b.n	8006c5c <UART_SetConfig+0xc44>
 8006c3e:	bf00      	nop
 8006c40:	08008e24 	.word	0x08008e24
 8006c44:	58024400 	.word	0x58024400
 8006c48:	03d09000 	.word	0x03d09000
 8006c4c:	003d0900 	.word	0x003d0900
      default:
        pclk = 0U;
 8006c50:	2300      	movs	r3, #0
 8006c52:	62fb      	str	r3, [r7, #44]	; 0x2c
        ret = HAL_ERROR;
 8006c54:	2301      	movs	r3, #1
 8006c56:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
        break;
 8006c5a:	bf00      	nop
    }

    if (pclk != 0U)
 8006c5c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006c5e:	2b00      	cmp	r3, #0
 8006c60:	d021      	beq.n	8006ca6 <UART_SetConfig+0xc8e>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8006c62:	687b      	ldr	r3, [r7, #4]
 8006c64:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006c66:	4a1a      	ldr	r2, [pc, #104]	; (8006cd0 <UART_SetConfig+0xcb8>)
 8006c68:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8006c6c:	461a      	mov	r2, r3
 8006c6e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006c70:	fbb3 f2f2 	udiv	r2, r3, r2
 8006c74:	687b      	ldr	r3, [r7, #4]
 8006c76:	685b      	ldr	r3, [r3, #4]
 8006c78:	085b      	lsrs	r3, r3, #1
 8006c7a:	441a      	add	r2, r3
 8006c7c:	687b      	ldr	r3, [r7, #4]
 8006c7e:	685b      	ldr	r3, [r3, #4]
 8006c80:	fbb2 f3f3 	udiv	r3, r2, r3
 8006c84:	b29b      	uxth	r3, r3
 8006c86:	62bb      	str	r3, [r7, #40]	; 0x28
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8006c88:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006c8a:	2b0f      	cmp	r3, #15
 8006c8c:	d908      	bls.n	8006ca0 <UART_SetConfig+0xc88>
 8006c8e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006c90:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006c94:	d204      	bcs.n	8006ca0 <UART_SetConfig+0xc88>
      {
        huart->Instance->BRR = usartdiv;
 8006c96:	687b      	ldr	r3, [r7, #4]
 8006c98:	681b      	ldr	r3, [r3, #0]
 8006c9a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8006c9c:	60da      	str	r2, [r3, #12]
 8006c9e:	e002      	b.n	8006ca6 <UART_SetConfig+0xc8e>
      }
      else
      {
        ret = HAL_ERROR;
 8006ca0:	2301      	movs	r3, #1
 8006ca2:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 8006ca6:	687b      	ldr	r3, [r7, #4]
 8006ca8:	2201      	movs	r2, #1
 8006caa:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 8006cae:	687b      	ldr	r3, [r7, #4]
 8006cb0:	2201      	movs	r2, #1
 8006cb2:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8006cb6:	687b      	ldr	r3, [r7, #4]
 8006cb8:	2200      	movs	r2, #0
 8006cba:	671a      	str	r2, [r3, #112]	; 0x70
  huart->TxISR = NULL;
 8006cbc:	687b      	ldr	r3, [r7, #4]
 8006cbe:	2200      	movs	r2, #0
 8006cc0:	675a      	str	r2, [r3, #116]	; 0x74

  return ret;
 8006cc2:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
}
 8006cc6:	4618      	mov	r0, r3
 8006cc8:	3738      	adds	r7, #56	; 0x38
 8006cca:	46bd      	mov	sp, r7
 8006ccc:	bdb0      	pop	{r4, r5, r7, pc}
 8006cce:	bf00      	nop
 8006cd0:	08008e24 	.word	0x08008e24

08006cd4 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8006cd4:	b480      	push	{r7}
 8006cd6:	b083      	sub	sp, #12
 8006cd8:	af00      	add	r7, sp, #0
 8006cda:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8006cdc:	687b      	ldr	r3, [r7, #4]
 8006cde:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006ce0:	f003 0301 	and.w	r3, r3, #1
 8006ce4:	2b00      	cmp	r3, #0
 8006ce6:	d00a      	beq.n	8006cfe <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8006ce8:	687b      	ldr	r3, [r7, #4]
 8006cea:	681b      	ldr	r3, [r3, #0]
 8006cec:	685b      	ldr	r3, [r3, #4]
 8006cee:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8006cf2:	687b      	ldr	r3, [r7, #4]
 8006cf4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006cf6:	687b      	ldr	r3, [r7, #4]
 8006cf8:	681b      	ldr	r3, [r3, #0]
 8006cfa:	430a      	orrs	r2, r1
 8006cfc:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8006cfe:	687b      	ldr	r3, [r7, #4]
 8006d00:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006d02:	f003 0302 	and.w	r3, r3, #2
 8006d06:	2b00      	cmp	r3, #0
 8006d08:	d00a      	beq.n	8006d20 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8006d0a:	687b      	ldr	r3, [r7, #4]
 8006d0c:	681b      	ldr	r3, [r3, #0]
 8006d0e:	685b      	ldr	r3, [r3, #4]
 8006d10:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8006d14:	687b      	ldr	r3, [r7, #4]
 8006d16:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8006d18:	687b      	ldr	r3, [r7, #4]
 8006d1a:	681b      	ldr	r3, [r3, #0]
 8006d1c:	430a      	orrs	r2, r1
 8006d1e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8006d20:	687b      	ldr	r3, [r7, #4]
 8006d22:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006d24:	f003 0304 	and.w	r3, r3, #4
 8006d28:	2b00      	cmp	r3, #0
 8006d2a:	d00a      	beq.n	8006d42 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8006d2c:	687b      	ldr	r3, [r7, #4]
 8006d2e:	681b      	ldr	r3, [r3, #0]
 8006d30:	685b      	ldr	r3, [r3, #4]
 8006d32:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8006d36:	687b      	ldr	r3, [r7, #4]
 8006d38:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8006d3a:	687b      	ldr	r3, [r7, #4]
 8006d3c:	681b      	ldr	r3, [r3, #0]
 8006d3e:	430a      	orrs	r2, r1
 8006d40:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8006d42:	687b      	ldr	r3, [r7, #4]
 8006d44:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006d46:	f003 0308 	and.w	r3, r3, #8
 8006d4a:	2b00      	cmp	r3, #0
 8006d4c:	d00a      	beq.n	8006d64 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8006d4e:	687b      	ldr	r3, [r7, #4]
 8006d50:	681b      	ldr	r3, [r3, #0]
 8006d52:	685b      	ldr	r3, [r3, #4]
 8006d54:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8006d58:	687b      	ldr	r3, [r7, #4]
 8006d5a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8006d5c:	687b      	ldr	r3, [r7, #4]
 8006d5e:	681b      	ldr	r3, [r3, #0]
 8006d60:	430a      	orrs	r2, r1
 8006d62:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8006d64:	687b      	ldr	r3, [r7, #4]
 8006d66:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006d68:	f003 0310 	and.w	r3, r3, #16
 8006d6c:	2b00      	cmp	r3, #0
 8006d6e:	d00a      	beq.n	8006d86 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8006d70:	687b      	ldr	r3, [r7, #4]
 8006d72:	681b      	ldr	r3, [r3, #0]
 8006d74:	689b      	ldr	r3, [r3, #8]
 8006d76:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8006d7a:	687b      	ldr	r3, [r7, #4]
 8006d7c:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8006d7e:	687b      	ldr	r3, [r7, #4]
 8006d80:	681b      	ldr	r3, [r3, #0]
 8006d82:	430a      	orrs	r2, r1
 8006d84:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8006d86:	687b      	ldr	r3, [r7, #4]
 8006d88:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006d8a:	f003 0320 	and.w	r3, r3, #32
 8006d8e:	2b00      	cmp	r3, #0
 8006d90:	d00a      	beq.n	8006da8 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8006d92:	687b      	ldr	r3, [r7, #4]
 8006d94:	681b      	ldr	r3, [r3, #0]
 8006d96:	689b      	ldr	r3, [r3, #8]
 8006d98:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8006d9c:	687b      	ldr	r3, [r7, #4]
 8006d9e:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8006da0:	687b      	ldr	r3, [r7, #4]
 8006da2:	681b      	ldr	r3, [r3, #0]
 8006da4:	430a      	orrs	r2, r1
 8006da6:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8006da8:	687b      	ldr	r3, [r7, #4]
 8006daa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006dac:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006db0:	2b00      	cmp	r3, #0
 8006db2:	d01a      	beq.n	8006dea <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8006db4:	687b      	ldr	r3, [r7, #4]
 8006db6:	681b      	ldr	r3, [r3, #0]
 8006db8:	685b      	ldr	r3, [r3, #4]
 8006dba:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8006dbe:	687b      	ldr	r3, [r7, #4]
 8006dc0:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8006dc2:	687b      	ldr	r3, [r7, #4]
 8006dc4:	681b      	ldr	r3, [r3, #0]
 8006dc6:	430a      	orrs	r2, r1
 8006dc8:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8006dca:	687b      	ldr	r3, [r7, #4]
 8006dcc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006dce:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8006dd2:	d10a      	bne.n	8006dea <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8006dd4:	687b      	ldr	r3, [r7, #4]
 8006dd6:	681b      	ldr	r3, [r3, #0]
 8006dd8:	685b      	ldr	r3, [r3, #4]
 8006dda:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8006dde:	687b      	ldr	r3, [r7, #4]
 8006de0:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8006de2:	687b      	ldr	r3, [r7, #4]
 8006de4:	681b      	ldr	r3, [r3, #0]
 8006de6:	430a      	orrs	r2, r1
 8006de8:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8006dea:	687b      	ldr	r3, [r7, #4]
 8006dec:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006dee:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006df2:	2b00      	cmp	r3, #0
 8006df4:	d00a      	beq.n	8006e0c <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8006df6:	687b      	ldr	r3, [r7, #4]
 8006df8:	681b      	ldr	r3, [r3, #0]
 8006dfa:	685b      	ldr	r3, [r3, #4]
 8006dfc:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8006e00:	687b      	ldr	r3, [r7, #4]
 8006e02:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8006e04:	687b      	ldr	r3, [r7, #4]
 8006e06:	681b      	ldr	r3, [r3, #0]
 8006e08:	430a      	orrs	r2, r1
 8006e0a:	605a      	str	r2, [r3, #4]
  }
}
 8006e0c:	bf00      	nop
 8006e0e:	370c      	adds	r7, #12
 8006e10:	46bd      	mov	sp, r7
 8006e12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e16:	4770      	bx	lr

08006e18 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8006e18:	b580      	push	{r7, lr}
 8006e1a:	b086      	sub	sp, #24
 8006e1c:	af02      	add	r7, sp, #8
 8006e1e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006e20:	687b      	ldr	r3, [r7, #4]
 8006e22:	2200      	movs	r2, #0
 8006e24:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8006e28:	f7fa fc66 	bl	80016f8 <HAL_GetTick>
 8006e2c:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8006e2e:	687b      	ldr	r3, [r7, #4]
 8006e30:	681b      	ldr	r3, [r3, #0]
 8006e32:	681b      	ldr	r3, [r3, #0]
 8006e34:	f003 0308 	and.w	r3, r3, #8
 8006e38:	2b08      	cmp	r3, #8
 8006e3a:	d10e      	bne.n	8006e5a <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8006e3c:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8006e40:	9300      	str	r3, [sp, #0]
 8006e42:	68fb      	ldr	r3, [r7, #12]
 8006e44:	2200      	movs	r2, #0
 8006e46:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8006e4a:	6878      	ldr	r0, [r7, #4]
 8006e4c:	f000 f82f 	bl	8006eae <UART_WaitOnFlagUntilTimeout>
 8006e50:	4603      	mov	r3, r0
 8006e52:	2b00      	cmp	r3, #0
 8006e54:	d001      	beq.n	8006e5a <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8006e56:	2303      	movs	r3, #3
 8006e58:	e025      	b.n	8006ea6 <UART_CheckIdleState+0x8e>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8006e5a:	687b      	ldr	r3, [r7, #4]
 8006e5c:	681b      	ldr	r3, [r3, #0]
 8006e5e:	681b      	ldr	r3, [r3, #0]
 8006e60:	f003 0304 	and.w	r3, r3, #4
 8006e64:	2b04      	cmp	r3, #4
 8006e66:	d10e      	bne.n	8006e86 <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8006e68:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8006e6c:	9300      	str	r3, [sp, #0]
 8006e6e:	68fb      	ldr	r3, [r7, #12]
 8006e70:	2200      	movs	r2, #0
 8006e72:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8006e76:	6878      	ldr	r0, [r7, #4]
 8006e78:	f000 f819 	bl	8006eae <UART_WaitOnFlagUntilTimeout>
 8006e7c:	4603      	mov	r3, r0
 8006e7e:	2b00      	cmp	r3, #0
 8006e80:	d001      	beq.n	8006e86 <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8006e82:	2303      	movs	r3, #3
 8006e84:	e00f      	b.n	8006ea6 <UART_CheckIdleState+0x8e>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8006e86:	687b      	ldr	r3, [r7, #4]
 8006e88:	2220      	movs	r2, #32
 8006e8a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  huart->RxState = HAL_UART_STATE_READY;
 8006e8e:	687b      	ldr	r3, [r7, #4]
 8006e90:	2220      	movs	r2, #32
 8006e92:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006e96:	687b      	ldr	r3, [r7, #4]
 8006e98:	2200      	movs	r2, #0
 8006e9a:	66da      	str	r2, [r3, #108]	; 0x6c

  __HAL_UNLOCK(huart);
 8006e9c:	687b      	ldr	r3, [r7, #4]
 8006e9e:	2200      	movs	r2, #0
 8006ea0:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 8006ea4:	2300      	movs	r3, #0
}
 8006ea6:	4618      	mov	r0, r3
 8006ea8:	3710      	adds	r7, #16
 8006eaa:	46bd      	mov	sp, r7
 8006eac:	bd80      	pop	{r7, pc}

08006eae <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8006eae:	b580      	push	{r7, lr}
 8006eb0:	b084      	sub	sp, #16
 8006eb2:	af00      	add	r7, sp, #0
 8006eb4:	60f8      	str	r0, [r7, #12]
 8006eb6:	60b9      	str	r1, [r7, #8]
 8006eb8:	603b      	str	r3, [r7, #0]
 8006eba:	4613      	mov	r3, r2
 8006ebc:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8006ebe:	e062      	b.n	8006f86 <UART_WaitOnFlagUntilTimeout+0xd8>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8006ec0:	69bb      	ldr	r3, [r7, #24]
 8006ec2:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006ec6:	d05e      	beq.n	8006f86 <UART_WaitOnFlagUntilTimeout+0xd8>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8006ec8:	f7fa fc16 	bl	80016f8 <HAL_GetTick>
 8006ecc:	4602      	mov	r2, r0
 8006ece:	683b      	ldr	r3, [r7, #0]
 8006ed0:	1ad3      	subs	r3, r2, r3
 8006ed2:	69ba      	ldr	r2, [r7, #24]
 8006ed4:	429a      	cmp	r2, r3
 8006ed6:	d302      	bcc.n	8006ede <UART_WaitOnFlagUntilTimeout+0x30>
 8006ed8:	69bb      	ldr	r3, [r7, #24]
 8006eda:	2b00      	cmp	r3, #0
 8006edc:	d11d      	bne.n	8006f1a <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
 8006ede:	68fb      	ldr	r3, [r7, #12]
 8006ee0:	681b      	ldr	r3, [r3, #0]
 8006ee2:	681a      	ldr	r2, [r3, #0]
 8006ee4:	68fb      	ldr	r3, [r7, #12]
 8006ee6:	681b      	ldr	r3, [r3, #0]
 8006ee8:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8006eec:	601a      	str	r2, [r3, #0]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006eee:	68fb      	ldr	r3, [r7, #12]
 8006ef0:	681b      	ldr	r3, [r3, #0]
 8006ef2:	689a      	ldr	r2, [r3, #8]
 8006ef4:	68fb      	ldr	r3, [r7, #12]
 8006ef6:	681b      	ldr	r3, [r3, #0]
 8006ef8:	f022 0201 	bic.w	r2, r2, #1
 8006efc:	609a      	str	r2, [r3, #8]

        huart->gState = HAL_UART_STATE_READY;
 8006efe:	68fb      	ldr	r3, [r7, #12]
 8006f00:	2220      	movs	r2, #32
 8006f02:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
        huart->RxState = HAL_UART_STATE_READY;
 8006f06:	68fb      	ldr	r3, [r7, #12]
 8006f08:	2220      	movs	r2, #32
 8006f0a:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

        __HAL_UNLOCK(huart);
 8006f0e:	68fb      	ldr	r3, [r7, #12]
 8006f10:	2200      	movs	r2, #0
 8006f12:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

        return HAL_TIMEOUT;
 8006f16:	2303      	movs	r3, #3
 8006f18:	e045      	b.n	8006fa6 <UART_WaitOnFlagUntilTimeout+0xf8>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8006f1a:	68fb      	ldr	r3, [r7, #12]
 8006f1c:	681b      	ldr	r3, [r3, #0]
 8006f1e:	681b      	ldr	r3, [r3, #0]
 8006f20:	f003 0304 	and.w	r3, r3, #4
 8006f24:	2b00      	cmp	r3, #0
 8006f26:	d02e      	beq.n	8006f86 <UART_WaitOnFlagUntilTimeout+0xd8>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8006f28:	68fb      	ldr	r3, [r7, #12]
 8006f2a:	681b      	ldr	r3, [r3, #0]
 8006f2c:	69db      	ldr	r3, [r3, #28]
 8006f2e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8006f32:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8006f36:	d126      	bne.n	8006f86 <UART_WaitOnFlagUntilTimeout+0xd8>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8006f38:	68fb      	ldr	r3, [r7, #12]
 8006f3a:	681b      	ldr	r3, [r3, #0]
 8006f3c:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8006f40:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
 8006f42:	68fb      	ldr	r3, [r7, #12]
 8006f44:	681b      	ldr	r3, [r3, #0]
 8006f46:	681a      	ldr	r2, [r3, #0]
 8006f48:	68fb      	ldr	r3, [r7, #12]
 8006f4a:	681b      	ldr	r3, [r3, #0]
 8006f4c:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8006f50:	601a      	str	r2, [r3, #0]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006f52:	68fb      	ldr	r3, [r7, #12]
 8006f54:	681b      	ldr	r3, [r3, #0]
 8006f56:	689a      	ldr	r2, [r3, #8]
 8006f58:	68fb      	ldr	r3, [r7, #12]
 8006f5a:	681b      	ldr	r3, [r3, #0]
 8006f5c:	f022 0201 	bic.w	r2, r2, #1
 8006f60:	609a      	str	r2, [r3, #8]

          huart->gState = HAL_UART_STATE_READY;
 8006f62:	68fb      	ldr	r3, [r7, #12]
 8006f64:	2220      	movs	r2, #32
 8006f66:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          huart->RxState = HAL_UART_STATE_READY;
 8006f6a:	68fb      	ldr	r3, [r7, #12]
 8006f6c:	2220      	movs	r2, #32
 8006f6e:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8006f72:	68fb      	ldr	r3, [r7, #12]
 8006f74:	2220      	movs	r2, #32
 8006f76:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8006f7a:	68fb      	ldr	r3, [r7, #12]
 8006f7c:	2200      	movs	r2, #0
 8006f7e:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

          return HAL_TIMEOUT;
 8006f82:	2303      	movs	r3, #3
 8006f84:	e00f      	b.n	8006fa6 <UART_WaitOnFlagUntilTimeout+0xf8>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8006f86:	68fb      	ldr	r3, [r7, #12]
 8006f88:	681b      	ldr	r3, [r3, #0]
 8006f8a:	69da      	ldr	r2, [r3, #28]
 8006f8c:	68bb      	ldr	r3, [r7, #8]
 8006f8e:	4013      	ands	r3, r2
 8006f90:	68ba      	ldr	r2, [r7, #8]
 8006f92:	429a      	cmp	r2, r3
 8006f94:	bf0c      	ite	eq
 8006f96:	2301      	moveq	r3, #1
 8006f98:	2300      	movne	r3, #0
 8006f9a:	b2db      	uxtb	r3, r3
 8006f9c:	461a      	mov	r2, r3
 8006f9e:	79fb      	ldrb	r3, [r7, #7]
 8006fa0:	429a      	cmp	r2, r3
 8006fa2:	d08d      	beq.n	8006ec0 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8006fa4:	2300      	movs	r3, #0
}
 8006fa6:	4618      	mov	r0, r3
 8006fa8:	3710      	adds	r7, #16
 8006faa:	46bd      	mov	sp, r7
 8006fac:	bd80      	pop	{r7, pc}
	...

08006fb0 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8006fb0:	b480      	push	{r7}
 8006fb2:	b083      	sub	sp, #12
 8006fb4:	af00      	add	r7, sp, #0
 8006fb6:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8006fb8:	687b      	ldr	r3, [r7, #4]
 8006fba:	681b      	ldr	r3, [r3, #0]
 8006fbc:	681a      	ldr	r2, [r3, #0]
 8006fbe:	687b      	ldr	r3, [r7, #4]
 8006fc0:	681b      	ldr	r3, [r3, #0]
 8006fc2:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 8006fc6:	601a      	str	r2, [r3, #0]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8006fc8:	687b      	ldr	r3, [r7, #4]
 8006fca:	681b      	ldr	r3, [r3, #0]
 8006fcc:	6899      	ldr	r1, [r3, #8]
 8006fce:	687b      	ldr	r3, [r7, #4]
 8006fd0:	681a      	ldr	r2, [r3, #0]
 8006fd2:	4b0f      	ldr	r3, [pc, #60]	; (8007010 <UART_EndRxTransfer+0x60>)
 8006fd4:	400b      	ands	r3, r1
 8006fd6:	6093      	str	r3, [r2, #8]

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006fd8:	687b      	ldr	r3, [r7, #4]
 8006fda:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8006fdc:	2b01      	cmp	r3, #1
 8006fde:	d107      	bne.n	8006ff0 <UART_EndRxTransfer+0x40>
  {
    CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006fe0:	687b      	ldr	r3, [r7, #4]
 8006fe2:	681b      	ldr	r3, [r3, #0]
 8006fe4:	681a      	ldr	r2, [r3, #0]
 8006fe6:	687b      	ldr	r3, [r7, #4]
 8006fe8:	681b      	ldr	r3, [r3, #0]
 8006fea:	f022 0210 	bic.w	r2, r2, #16
 8006fee:	601a      	str	r2, [r3, #0]
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8006ff0:	687b      	ldr	r3, [r7, #4]
 8006ff2:	2220      	movs	r2, #32
 8006ff4:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006ff8:	687b      	ldr	r3, [r7, #4]
 8006ffa:	2200      	movs	r2, #0
 8006ffc:	66da      	str	r2, [r3, #108]	; 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8006ffe:	687b      	ldr	r3, [r7, #4]
 8007000:	2200      	movs	r2, #0
 8007002:	671a      	str	r2, [r3, #112]	; 0x70
}
 8007004:	bf00      	nop
 8007006:	370c      	adds	r7, #12
 8007008:	46bd      	mov	sp, r7
 800700a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800700e:	4770      	bx	lr
 8007010:	effffffe 	.word	0xeffffffe

08007014 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8007014:	b580      	push	{r7, lr}
 8007016:	b084      	sub	sp, #16
 8007018:	af00      	add	r7, sp, #0
 800701a:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800701c:	687b      	ldr	r3, [r7, #4]
 800701e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007020:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 8007022:	68fb      	ldr	r3, [r7, #12]
 8007024:	2200      	movs	r2, #0
 8007026:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
  huart->TxXferCount = 0U;
 800702a:	68fb      	ldr	r3, [r7, #12]
 800702c:	2200      	movs	r2, #0
 800702e:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8007032:	68f8      	ldr	r0, [r7, #12]
 8007034:	f7fe ffda 	bl	8005fec <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8007038:	bf00      	nop
 800703a:	3710      	adds	r7, #16
 800703c:	46bd      	mov	sp, r7
 800703e:	bd80      	pop	{r7, pc}

08007040 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8007040:	b580      	push	{r7, lr}
 8007042:	b082      	sub	sp, #8
 8007044:	af00      	add	r7, sp, #0
 8007046:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8007048:	687b      	ldr	r3, [r7, #4]
 800704a:	681b      	ldr	r3, [r3, #0]
 800704c:	681a      	ldr	r2, [r3, #0]
 800704e:	687b      	ldr	r3, [r7, #4]
 8007050:	681b      	ldr	r3, [r3, #0]
 8007052:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8007056:	601a      	str	r2, [r3, #0]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8007058:	687b      	ldr	r3, [r7, #4]
 800705a:	2220      	movs	r2, #32
 800705c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 8007060:	687b      	ldr	r3, [r7, #4]
 8007062:	2200      	movs	r2, #0
 8007064:	675a      	str	r2, [r3, #116]	; 0x74
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8007066:	6878      	ldr	r0, [r7, #4]
 8007068:	f7fe ffb6 	bl	8005fd8 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800706c:	bf00      	nop
 800706e:	3708      	adds	r7, #8
 8007070:	46bd      	mov	sp, r7
 8007072:	bd80      	pop	{r7, pc}

08007074 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 8007074:	b480      	push	{r7}
 8007076:	b083      	sub	sp, #12
 8007078:	af00      	add	r7, sp, #0
 800707a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 800707c:	bf00      	nop
 800707e:	370c      	adds	r7, #12
 8007080:	46bd      	mov	sp, r7
 8007082:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007086:	4770      	bx	lr

08007088 <HAL_UARTEx_RxFifoFullCallback>:
  * @brief  UART RX Fifo full callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_RxFifoFullCallback(UART_HandleTypeDef *huart)
{
 8007088:	b480      	push	{r7}
 800708a:	b083      	sub	sp, #12
 800708c:	af00      	add	r7, sp, #0
 800708e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxFifoFullCallback can be implemented in the user file.
   */
}
 8007090:	bf00      	nop
 8007092:	370c      	adds	r7, #12
 8007094:	46bd      	mov	sp, r7
 8007096:	f85d 7b04 	ldr.w	r7, [sp], #4
 800709a:	4770      	bx	lr

0800709c <HAL_UARTEx_TxFifoEmptyCallback>:
  * @brief  UART TX Fifo empty callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_TxFifoEmptyCallback(UART_HandleTypeDef *huart)
{
 800709c:	b480      	push	{r7}
 800709e:	b083      	sub	sp, #12
 80070a0:	af00      	add	r7, sp, #0
 80070a2:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_TxFifoEmptyCallback can be implemented in the user file.
   */
}
 80070a4:	bf00      	nop
 80070a6:	370c      	adds	r7, #12
 80070a8:	46bd      	mov	sp, r7
 80070aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80070ae:	4770      	bx	lr

080070b0 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 80070b0:	b480      	push	{r7}
 80070b2:	b085      	sub	sp, #20
 80070b4:	af00      	add	r7, sp, #0
 80070b6:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 80070b8:	687b      	ldr	r3, [r7, #4]
 80070ba:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 80070be:	2b01      	cmp	r3, #1
 80070c0:	d101      	bne.n	80070c6 <HAL_UARTEx_DisableFifoMode+0x16>
 80070c2:	2302      	movs	r3, #2
 80070c4:	e027      	b.n	8007116 <HAL_UARTEx_DisableFifoMode+0x66>
 80070c6:	687b      	ldr	r3, [r7, #4]
 80070c8:	2201      	movs	r2, #1
 80070ca:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 80070ce:	687b      	ldr	r3, [r7, #4]
 80070d0:	2224      	movs	r2, #36	; 0x24
 80070d2:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 80070d6:	687b      	ldr	r3, [r7, #4]
 80070d8:	681b      	ldr	r3, [r3, #0]
 80070da:	681b      	ldr	r3, [r3, #0]
 80070dc:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 80070de:	687b      	ldr	r3, [r7, #4]
 80070e0:	681b      	ldr	r3, [r3, #0]
 80070e2:	681a      	ldr	r2, [r3, #0]
 80070e4:	687b      	ldr	r3, [r7, #4]
 80070e6:	681b      	ldr	r3, [r3, #0]
 80070e8:	f022 0201 	bic.w	r2, r2, #1
 80070ec:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 80070ee:	68fb      	ldr	r3, [r7, #12]
 80070f0:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 80070f4:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 80070f6:	687b      	ldr	r3, [r7, #4]
 80070f8:	2200      	movs	r2, #0
 80070fa:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 80070fc:	687b      	ldr	r3, [r7, #4]
 80070fe:	681b      	ldr	r3, [r3, #0]
 8007100:	68fa      	ldr	r2, [r7, #12]
 8007102:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8007104:	687b      	ldr	r3, [r7, #4]
 8007106:	2220      	movs	r2, #32
 8007108:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800710c:	687b      	ldr	r3, [r7, #4]
 800710e:	2200      	movs	r2, #0
 8007110:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 8007114:	2300      	movs	r3, #0
}
 8007116:	4618      	mov	r0, r3
 8007118:	3714      	adds	r7, #20
 800711a:	46bd      	mov	sp, r7
 800711c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007120:	4770      	bx	lr

08007122 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8007122:	b580      	push	{r7, lr}
 8007124:	b084      	sub	sp, #16
 8007126:	af00      	add	r7, sp, #0
 8007128:	6078      	str	r0, [r7, #4]
 800712a:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800712c:	687b      	ldr	r3, [r7, #4]
 800712e:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8007132:	2b01      	cmp	r3, #1
 8007134:	d101      	bne.n	800713a <HAL_UARTEx_SetTxFifoThreshold+0x18>
 8007136:	2302      	movs	r3, #2
 8007138:	e02d      	b.n	8007196 <HAL_UARTEx_SetTxFifoThreshold+0x74>
 800713a:	687b      	ldr	r3, [r7, #4]
 800713c:	2201      	movs	r2, #1
 800713e:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 8007142:	687b      	ldr	r3, [r7, #4]
 8007144:	2224      	movs	r2, #36	; 0x24
 8007146:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800714a:	687b      	ldr	r3, [r7, #4]
 800714c:	681b      	ldr	r3, [r3, #0]
 800714e:	681b      	ldr	r3, [r3, #0]
 8007150:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8007152:	687b      	ldr	r3, [r7, #4]
 8007154:	681b      	ldr	r3, [r3, #0]
 8007156:	681a      	ldr	r2, [r3, #0]
 8007158:	687b      	ldr	r3, [r7, #4]
 800715a:	681b      	ldr	r3, [r3, #0]
 800715c:	f022 0201 	bic.w	r2, r2, #1
 8007160:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 8007162:	687b      	ldr	r3, [r7, #4]
 8007164:	681b      	ldr	r3, [r3, #0]
 8007166:	689b      	ldr	r3, [r3, #8]
 8007168:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 800716c:	687b      	ldr	r3, [r7, #4]
 800716e:	681b      	ldr	r3, [r3, #0]
 8007170:	683a      	ldr	r2, [r7, #0]
 8007172:	430a      	orrs	r2, r1
 8007174:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8007176:	6878      	ldr	r0, [r7, #4]
 8007178:	f000 f850 	bl	800721c <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800717c:	687b      	ldr	r3, [r7, #4]
 800717e:	681b      	ldr	r3, [r3, #0]
 8007180:	68fa      	ldr	r2, [r7, #12]
 8007182:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8007184:	687b      	ldr	r3, [r7, #4]
 8007186:	2220      	movs	r2, #32
 8007188:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800718c:	687b      	ldr	r3, [r7, #4]
 800718e:	2200      	movs	r2, #0
 8007190:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 8007194:	2300      	movs	r3, #0
}
 8007196:	4618      	mov	r0, r3
 8007198:	3710      	adds	r7, #16
 800719a:	46bd      	mov	sp, r7
 800719c:	bd80      	pop	{r7, pc}

0800719e <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800719e:	b580      	push	{r7, lr}
 80071a0:	b084      	sub	sp, #16
 80071a2:	af00      	add	r7, sp, #0
 80071a4:	6078      	str	r0, [r7, #4]
 80071a6:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 80071a8:	687b      	ldr	r3, [r7, #4]
 80071aa:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 80071ae:	2b01      	cmp	r3, #1
 80071b0:	d101      	bne.n	80071b6 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 80071b2:	2302      	movs	r3, #2
 80071b4:	e02d      	b.n	8007212 <HAL_UARTEx_SetRxFifoThreshold+0x74>
 80071b6:	687b      	ldr	r3, [r7, #4]
 80071b8:	2201      	movs	r2, #1
 80071ba:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 80071be:	687b      	ldr	r3, [r7, #4]
 80071c0:	2224      	movs	r2, #36	; 0x24
 80071c2:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 80071c6:	687b      	ldr	r3, [r7, #4]
 80071c8:	681b      	ldr	r3, [r3, #0]
 80071ca:	681b      	ldr	r3, [r3, #0]
 80071cc:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 80071ce:	687b      	ldr	r3, [r7, #4]
 80071d0:	681b      	ldr	r3, [r3, #0]
 80071d2:	681a      	ldr	r2, [r3, #0]
 80071d4:	687b      	ldr	r3, [r7, #4]
 80071d6:	681b      	ldr	r3, [r3, #0]
 80071d8:	f022 0201 	bic.w	r2, r2, #1
 80071dc:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 80071de:	687b      	ldr	r3, [r7, #4]
 80071e0:	681b      	ldr	r3, [r3, #0]
 80071e2:	689b      	ldr	r3, [r3, #8]
 80071e4:	f023 6160 	bic.w	r1, r3, #234881024	; 0xe000000
 80071e8:	687b      	ldr	r3, [r7, #4]
 80071ea:	681b      	ldr	r3, [r3, #0]
 80071ec:	683a      	ldr	r2, [r7, #0]
 80071ee:	430a      	orrs	r2, r1
 80071f0:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 80071f2:	6878      	ldr	r0, [r7, #4]
 80071f4:	f000 f812 	bl	800721c <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 80071f8:	687b      	ldr	r3, [r7, #4]
 80071fa:	681b      	ldr	r3, [r3, #0]
 80071fc:	68fa      	ldr	r2, [r7, #12]
 80071fe:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8007200:	687b      	ldr	r3, [r7, #4]
 8007202:	2220      	movs	r2, #32
 8007204:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8007208:	687b      	ldr	r3, [r7, #4]
 800720a:	2200      	movs	r2, #0
 800720c:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 8007210:	2300      	movs	r3, #0
}
 8007212:	4618      	mov	r0, r3
 8007214:	3710      	adds	r7, #16
 8007216:	46bd      	mov	sp, r7
 8007218:	bd80      	pop	{r7, pc}
	...

0800721c <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 800721c:	b480      	push	{r7}
 800721e:	b085      	sub	sp, #20
 8007220:	af00      	add	r7, sp, #0
 8007222:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 8007224:	687b      	ldr	r3, [r7, #4]
 8007226:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8007228:	2b00      	cmp	r3, #0
 800722a:	d108      	bne.n	800723e <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 800722c:	687b      	ldr	r3, [r7, #4]
 800722e:	2201      	movs	r2, #1
 8007230:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
 8007234:	687b      	ldr	r3, [r7, #4]
 8007236:	2201      	movs	r2, #1
 8007238:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 800723c:	e031      	b.n	80072a2 <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 800723e:	2310      	movs	r3, #16
 8007240:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 8007242:	2310      	movs	r3, #16
 8007244:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 8007246:	687b      	ldr	r3, [r7, #4]
 8007248:	681b      	ldr	r3, [r3, #0]
 800724a:	689b      	ldr	r3, [r3, #8]
 800724c:	0e5b      	lsrs	r3, r3, #25
 800724e:	b2db      	uxtb	r3, r3
 8007250:	f003 0307 	and.w	r3, r3, #7
 8007254:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 8007256:	687b      	ldr	r3, [r7, #4]
 8007258:	681b      	ldr	r3, [r3, #0]
 800725a:	689b      	ldr	r3, [r3, #8]
 800725c:	0f5b      	lsrs	r3, r3, #29
 800725e:	b2db      	uxtb	r3, r3
 8007260:	f003 0307 	and.w	r3, r3, #7
 8007264:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8007266:	7bbb      	ldrb	r3, [r7, #14]
 8007268:	7b3a      	ldrb	r2, [r7, #12]
 800726a:	4911      	ldr	r1, [pc, #68]	; (80072b0 <UARTEx_SetNbDataToProcess+0x94>)
 800726c:	5c8a      	ldrb	r2, [r1, r2]
 800726e:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 8007272:	7b3a      	ldrb	r2, [r7, #12]
 8007274:	490f      	ldr	r1, [pc, #60]	; (80072b4 <UARTEx_SetNbDataToProcess+0x98>)
 8007276:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8007278:	fb93 f3f2 	sdiv	r3, r3, r2
 800727c:	b29a      	uxth	r2, r3
 800727e:	687b      	ldr	r3, [r7, #4]
 8007280:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8007284:	7bfb      	ldrb	r3, [r7, #15]
 8007286:	7b7a      	ldrb	r2, [r7, #13]
 8007288:	4909      	ldr	r1, [pc, #36]	; (80072b0 <UARTEx_SetNbDataToProcess+0x94>)
 800728a:	5c8a      	ldrb	r2, [r1, r2]
 800728c:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 8007290:	7b7a      	ldrb	r2, [r7, #13]
 8007292:	4908      	ldr	r1, [pc, #32]	; (80072b4 <UARTEx_SetNbDataToProcess+0x98>)
 8007294:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8007296:	fb93 f3f2 	sdiv	r3, r3, r2
 800729a:	b29a      	uxth	r2, r3
 800729c:	687b      	ldr	r3, [r7, #4]
 800729e:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
}
 80072a2:	bf00      	nop
 80072a4:	3714      	adds	r7, #20
 80072a6:	46bd      	mov	sp, r7
 80072a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80072ac:	4770      	bx	lr
 80072ae:	bf00      	nop
 80072b0:	08008e3c 	.word	0x08008e3c
 80072b4:	08008e44 	.word	0x08008e44

080072b8 <FMC_NORSRAM_Init>:
  * @param  Init Pointer to NORSRAM Initialization structure
  * @retval HAL status
  */
HAL_StatusTypeDef  FMC_NORSRAM_Init(FMC_NORSRAM_TypeDef *Device,
                                    FMC_NORSRAM_InitTypeDef *Init)
{
 80072b8:	b480      	push	{r7}
 80072ba:	b087      	sub	sp, #28
 80072bc:	af00      	add	r7, sp, #0
 80072be:	6078      	str	r0, [r7, #4]
 80072c0:	6039      	str	r1, [r7, #0]
  assert_param(IS_FMC_CONTINOUS_CLOCK(Init->ContinuousClock));
  assert_param(IS_FMC_WRITE_FIFO(Init->WriteFifo));
  assert_param(IS_FMC_PAGESIZE(Init->PageSize));

  /* Disable NORSRAM Device */
  __FMC_NORSRAM_DISABLE(Device, Init->NSBank);
 80072c2:	683b      	ldr	r3, [r7, #0]
 80072c4:	681a      	ldr	r2, [r3, #0]
 80072c6:	687b      	ldr	r3, [r7, #4]
 80072c8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80072cc:	683a      	ldr	r2, [r7, #0]
 80072ce:	6812      	ldr	r2, [r2, #0]
 80072d0:	f023 0101 	bic.w	r1, r3, #1
 80072d4:	687b      	ldr	r3, [r7, #4]
 80072d6:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

  /* Set NORSRAM device control parameters */
  if (Init->MemoryType == FMC_MEMORY_TYPE_NOR)
 80072da:	683b      	ldr	r3, [r7, #0]
 80072dc:	689b      	ldr	r3, [r3, #8]
 80072de:	2b08      	cmp	r3, #8
 80072e0:	d102      	bne.n	80072e8 <FMC_NORSRAM_Init+0x30>
  {
    flashaccess = FMC_NORSRAM_FLASH_ACCESS_ENABLE;
 80072e2:	2340      	movs	r3, #64	; 0x40
 80072e4:	617b      	str	r3, [r7, #20]
 80072e6:	e001      	b.n	80072ec <FMC_NORSRAM_Init+0x34>
  }
  else
  {
    flashaccess = FMC_NORSRAM_FLASH_ACCESS_DISABLE;
 80072e8:	2300      	movs	r3, #0
 80072ea:	617b      	str	r3, [r7, #20]
  }

  btcr_reg = (flashaccess                   | \
              Init->DataAddressMux          | \
 80072ec:	683b      	ldr	r3, [r7, #0]
 80072ee:	685a      	ldr	r2, [r3, #4]
  btcr_reg = (flashaccess                   | \
 80072f0:	697b      	ldr	r3, [r7, #20]
 80072f2:	431a      	orrs	r2, r3
              Init->MemoryType              | \
 80072f4:	683b      	ldr	r3, [r7, #0]
 80072f6:	689b      	ldr	r3, [r3, #8]
              Init->DataAddressMux          | \
 80072f8:	431a      	orrs	r2, r3
              Init->MemoryDataWidth         | \
 80072fa:	683b      	ldr	r3, [r7, #0]
 80072fc:	68db      	ldr	r3, [r3, #12]
              Init->MemoryType              | \
 80072fe:	431a      	orrs	r2, r3
              Init->BurstAccessMode         | \
 8007300:	683b      	ldr	r3, [r7, #0]
 8007302:	691b      	ldr	r3, [r3, #16]
              Init->MemoryDataWidth         | \
 8007304:	431a      	orrs	r2, r3
              Init->WaitSignalPolarity      | \
 8007306:	683b      	ldr	r3, [r7, #0]
 8007308:	695b      	ldr	r3, [r3, #20]
              Init->BurstAccessMode         | \
 800730a:	431a      	orrs	r2, r3
              Init->WaitSignalActive        | \
 800730c:	683b      	ldr	r3, [r7, #0]
 800730e:	699b      	ldr	r3, [r3, #24]
              Init->WaitSignalPolarity      | \
 8007310:	431a      	orrs	r2, r3
              Init->WriteOperation          | \
 8007312:	683b      	ldr	r3, [r7, #0]
 8007314:	69db      	ldr	r3, [r3, #28]
              Init->WaitSignalActive        | \
 8007316:	431a      	orrs	r2, r3
              Init->WaitSignal              | \
 8007318:	683b      	ldr	r3, [r7, #0]
 800731a:	6a1b      	ldr	r3, [r3, #32]
              Init->WriteOperation          | \
 800731c:	431a      	orrs	r2, r3
              Init->ExtendedMode            | \
 800731e:	683b      	ldr	r3, [r7, #0]
 8007320:	6a5b      	ldr	r3, [r3, #36]	; 0x24
              Init->WaitSignal              | \
 8007322:	431a      	orrs	r2, r3
              Init->AsynchronousWait        | \
 8007324:	683b      	ldr	r3, [r7, #0]
 8007326:	6a9b      	ldr	r3, [r3, #40]	; 0x28
              Init->ExtendedMode            | \
 8007328:	431a      	orrs	r2, r3
              Init->WriteBurst);
 800732a:	683b      	ldr	r3, [r7, #0]
 800732c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
  btcr_reg = (flashaccess                   | \
 800732e:	4313      	orrs	r3, r2
 8007330:	613b      	str	r3, [r7, #16]

  btcr_reg |= Init->ContinuousClock;
 8007332:	683b      	ldr	r3, [r7, #0]
 8007334:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007336:	693a      	ldr	r2, [r7, #16]
 8007338:	4313      	orrs	r3, r2
 800733a:	613b      	str	r3, [r7, #16]
  btcr_reg |= Init->WriteFifo;
 800733c:	683b      	ldr	r3, [r7, #0]
 800733e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007340:	693a      	ldr	r2, [r7, #16]
 8007342:	4313      	orrs	r3, r2
 8007344:	613b      	str	r3, [r7, #16]
  btcr_reg |= Init->PageSize;
 8007346:	683b      	ldr	r3, [r7, #0]
 8007348:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800734a:	693a      	ldr	r2, [r7, #16]
 800734c:	4313      	orrs	r3, r2
 800734e:	613b      	str	r3, [r7, #16]

  mask = (FMC_BCRx_MBKEN                |
 8007350:	4b20      	ldr	r3, [pc, #128]	; (80073d4 <FMC_NORSRAM_Init+0x11c>)
 8007352:	60fb      	str	r3, [r7, #12]
          FMC_BCRx_WAITEN               |
          FMC_BCRx_EXTMOD               |
          FMC_BCRx_ASYNCWAIT            |
          FMC_BCRx_CBURSTRW);

  mask |= FMC_BCR1_CCLKEN;
 8007354:	68fb      	ldr	r3, [r7, #12]
 8007356:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800735a:	60fb      	str	r3, [r7, #12]
  mask |= FMC_BCR1_WFDIS;
 800735c:	68fb      	ldr	r3, [r7, #12]
 800735e:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8007362:	60fb      	str	r3, [r7, #12]
  mask |= FMC_BCRx_CPSIZE;
 8007364:	68fb      	ldr	r3, [r7, #12]
 8007366:	f443 23e0 	orr.w	r3, r3, #458752	; 0x70000
 800736a:	60fb      	str	r3, [r7, #12]

  MODIFY_REG(Device->BTCR[Init->NSBank], mask, btcr_reg);
 800736c:	683b      	ldr	r3, [r7, #0]
 800736e:	681a      	ldr	r2, [r3, #0]
 8007370:	687b      	ldr	r3, [r7, #4]
 8007372:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8007376:	68fb      	ldr	r3, [r7, #12]
 8007378:	43db      	mvns	r3, r3
 800737a:	ea02 0103 	and.w	r1, r2, r3
 800737e:	683b      	ldr	r3, [r7, #0]
 8007380:	681a      	ldr	r2, [r3, #0]
 8007382:	693b      	ldr	r3, [r7, #16]
 8007384:	4319      	orrs	r1, r3
 8007386:	687b      	ldr	r3, [r7, #4]
 8007388:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

  /* Configure synchronous mode when Continuous clock is enabled for bank2..4 */
  if ((Init->ContinuousClock == FMC_CONTINUOUS_CLOCK_SYNC_ASYNC) && (Init->NSBank != FMC_NORSRAM_BANK1))
 800738c:	683b      	ldr	r3, [r7, #0]
 800738e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007390:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8007394:	d10c      	bne.n	80073b0 <FMC_NORSRAM_Init+0xf8>
 8007396:	683b      	ldr	r3, [r7, #0]
 8007398:	681b      	ldr	r3, [r3, #0]
 800739a:	2b00      	cmp	r3, #0
 800739c:	d008      	beq.n	80073b0 <FMC_NORSRAM_Init+0xf8>
  {
    MODIFY_REG(Device->BTCR[FMC_NORSRAM_BANK1], FMC_BCR1_CCLKEN, Init->ContinuousClock);
 800739e:	687b      	ldr	r3, [r7, #4]
 80073a0:	681b      	ldr	r3, [r3, #0]
 80073a2:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 80073a6:	683b      	ldr	r3, [r7, #0]
 80073a8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80073aa:	431a      	orrs	r2, r3
 80073ac:	687b      	ldr	r3, [r7, #4]
 80073ae:	601a      	str	r2, [r3, #0]
  }

  if (Init->NSBank != FMC_NORSRAM_BANK1)
 80073b0:	683b      	ldr	r3, [r7, #0]
 80073b2:	681b      	ldr	r3, [r3, #0]
 80073b4:	2b00      	cmp	r3, #0
 80073b6:	d006      	beq.n	80073c6 <FMC_NORSRAM_Init+0x10e>
  {
    /* Configure Write FIFO mode when Write Fifo is enabled for bank2..4 */
    SET_BIT(Device->BTCR[FMC_NORSRAM_BANK1], (uint32_t)(Init->WriteFifo));
 80073b8:	687b      	ldr	r3, [r7, #4]
 80073ba:	681a      	ldr	r2, [r3, #0]
 80073bc:	683b      	ldr	r3, [r7, #0]
 80073be:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80073c0:	431a      	orrs	r2, r3
 80073c2:	687b      	ldr	r3, [r7, #4]
 80073c4:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 80073c6:	2300      	movs	r3, #0
}
 80073c8:	4618      	mov	r0, r3
 80073ca:	371c      	adds	r7, #28
 80073cc:	46bd      	mov	sp, r7
 80073ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80073d2:	4770      	bx	lr
 80073d4:	0008fb7f 	.word	0x0008fb7f

080073d8 <FMC_NORSRAM_Timing_Init>:
  * @param  Bank NORSRAM bank number
  * @retval HAL status
  */
HAL_StatusTypeDef FMC_NORSRAM_Timing_Init(FMC_NORSRAM_TypeDef *Device,
                                          FMC_NORSRAM_TimingTypeDef *Timing, uint32_t Bank)
{
 80073d8:	b480      	push	{r7}
 80073da:	b087      	sub	sp, #28
 80073dc:	af00      	add	r7, sp, #0
 80073de:	60f8      	str	r0, [r7, #12]
 80073e0:	60b9      	str	r1, [r7, #8]
 80073e2:	607a      	str	r2, [r7, #4]
  assert_param(IS_FMC_DATA_LATENCY(Timing->DataLatency));
  assert_param(IS_FMC_ACCESS_MODE(Timing->AccessMode));
  assert_param(IS_FMC_NORSRAM_BANK(Bank));

  /* Set FMC_NORSRAM device timing parameters */
  MODIFY_REG(Device->BTCR[Bank + 1U], BTR_CLEAR_MASK, (Timing->AddressSetupTime                                  |
 80073e4:	687b      	ldr	r3, [r7, #4]
 80073e6:	1c5a      	adds	r2, r3, #1
 80073e8:	68fb      	ldr	r3, [r7, #12]
 80073ea:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80073ee:	f003 4140 	and.w	r1, r3, #3221225472	; 0xc0000000
 80073f2:	68bb      	ldr	r3, [r7, #8]
 80073f4:	681a      	ldr	r2, [r3, #0]
 80073f6:	68bb      	ldr	r3, [r7, #8]
 80073f8:	685b      	ldr	r3, [r3, #4]
 80073fa:	011b      	lsls	r3, r3, #4
 80073fc:	431a      	orrs	r2, r3
 80073fe:	68bb      	ldr	r3, [r7, #8]
 8007400:	689b      	ldr	r3, [r3, #8]
 8007402:	021b      	lsls	r3, r3, #8
 8007404:	431a      	orrs	r2, r3
 8007406:	68bb      	ldr	r3, [r7, #8]
 8007408:	68db      	ldr	r3, [r3, #12]
 800740a:	041b      	lsls	r3, r3, #16
 800740c:	431a      	orrs	r2, r3
 800740e:	68bb      	ldr	r3, [r7, #8]
 8007410:	691b      	ldr	r3, [r3, #16]
 8007412:	3b01      	subs	r3, #1
 8007414:	051b      	lsls	r3, r3, #20
 8007416:	431a      	orrs	r2, r3
 8007418:	68bb      	ldr	r3, [r7, #8]
 800741a:	695b      	ldr	r3, [r3, #20]
 800741c:	3b02      	subs	r3, #2
 800741e:	061b      	lsls	r3, r3, #24
 8007420:	431a      	orrs	r2, r3
 8007422:	68bb      	ldr	r3, [r7, #8]
 8007424:	699b      	ldr	r3, [r3, #24]
 8007426:	4313      	orrs	r3, r2
 8007428:	687a      	ldr	r2, [r7, #4]
 800742a:	3201      	adds	r2, #1
 800742c:	4319      	orrs	r1, r3
 800742e:	68fb      	ldr	r3, [r7, #12]
 8007430:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
                                                       (((Timing->CLKDivision) - 1U)     << FMC_BTRx_CLKDIV_Pos)  |
                                                       (((Timing->DataLatency) - 2U)     << FMC_BTRx_DATLAT_Pos)  |
                                                       (Timing->AccessMode)));

  /* Configure Clock division value (in NORSRAM bank 1) when continuous clock is enabled */
  if (HAL_IS_BIT_SET(Device->BTCR[FMC_NORSRAM_BANK1], FMC_BCR1_CCLKEN))
 8007434:	68fb      	ldr	r3, [r7, #12]
 8007436:	681b      	ldr	r3, [r3, #0]
 8007438:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800743c:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8007440:	d113      	bne.n	800746a <FMC_NORSRAM_Timing_Init+0x92>
  {
    tmpr = (uint32_t)(Device->BTCR[FMC_NORSRAM_BANK1 + 1U] & ~((0x0FU) << FMC_BTRx_CLKDIV_Pos));
 8007442:	68fb      	ldr	r3, [r7, #12]
 8007444:	685b      	ldr	r3, [r3, #4]
 8007446:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 800744a:	617b      	str	r3, [r7, #20]
    tmpr |= (uint32_t)(((Timing->CLKDivision) - 1U) << FMC_BTRx_CLKDIV_Pos);
 800744c:	68bb      	ldr	r3, [r7, #8]
 800744e:	691b      	ldr	r3, [r3, #16]
 8007450:	3b01      	subs	r3, #1
 8007452:	051b      	lsls	r3, r3, #20
 8007454:	697a      	ldr	r2, [r7, #20]
 8007456:	4313      	orrs	r3, r2
 8007458:	617b      	str	r3, [r7, #20]
    MODIFY_REG(Device->BTCR[FMC_NORSRAM_BANK1 + 1U], FMC_BTRx_CLKDIV, tmpr);
 800745a:	68fb      	ldr	r3, [r7, #12]
 800745c:	685b      	ldr	r3, [r3, #4]
 800745e:	f423 0270 	bic.w	r2, r3, #15728640	; 0xf00000
 8007462:	697b      	ldr	r3, [r7, #20]
 8007464:	431a      	orrs	r2, r3
 8007466:	68fb      	ldr	r3, [r7, #12]
 8007468:	605a      	str	r2, [r3, #4]
  }

  return HAL_OK;
 800746a:	2300      	movs	r3, #0
}
 800746c:	4618      	mov	r0, r3
 800746e:	371c      	adds	r7, #28
 8007470:	46bd      	mov	sp, r7
 8007472:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007476:	4770      	bx	lr

08007478 <FMC_NORSRAM_Extended_Timing_Init>:
  * @retval HAL status
  */
HAL_StatusTypeDef FMC_NORSRAM_Extended_Timing_Init(FMC_NORSRAM_EXTENDED_TypeDef *Device,
                                                   FMC_NORSRAM_TimingTypeDef *Timing, uint32_t Bank,
                                                   uint32_t ExtendedMode)
{
 8007478:	b480      	push	{r7}
 800747a:	b085      	sub	sp, #20
 800747c:	af00      	add	r7, sp, #0
 800747e:	60f8      	str	r0, [r7, #12]
 8007480:	60b9      	str	r1, [r7, #8]
 8007482:	607a      	str	r2, [r7, #4]
 8007484:	603b      	str	r3, [r7, #0]
  /* Check the parameters */
  assert_param(IS_FMC_EXTENDED_MODE(ExtendedMode));

  /* Set NORSRAM device timing register for write configuration, if extended mode is used */
  if (ExtendedMode == FMC_EXTENDED_MODE_ENABLE)
 8007486:	683b      	ldr	r3, [r7, #0]
 8007488:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800748c:	d11d      	bne.n	80074ca <FMC_NORSRAM_Extended_Timing_Init+0x52>
    assert_param(IS_FMC_TURNAROUND_TIME(Timing->BusTurnAroundDuration));
    assert_param(IS_FMC_ACCESS_MODE(Timing->AccessMode));
    assert_param(IS_FMC_NORSRAM_BANK(Bank));

    /* Set NORSRAM device timing register for write configuration, if extended mode is used */
    MODIFY_REG(Device->BWTR[Bank], BWTR_CLEAR_MASK, (Timing->AddressSetupTime                                    |
 800748e:	68fb      	ldr	r3, [r7, #12]
 8007490:	687a      	ldr	r2, [r7, #4]
 8007492:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8007496:	4b13      	ldr	r3, [pc, #76]	; (80074e4 <FMC_NORSRAM_Extended_Timing_Init+0x6c>)
 8007498:	4013      	ands	r3, r2
 800749a:	68ba      	ldr	r2, [r7, #8]
 800749c:	6811      	ldr	r1, [r2, #0]
 800749e:	68ba      	ldr	r2, [r7, #8]
 80074a0:	6852      	ldr	r2, [r2, #4]
 80074a2:	0112      	lsls	r2, r2, #4
 80074a4:	4311      	orrs	r1, r2
 80074a6:	68ba      	ldr	r2, [r7, #8]
 80074a8:	6892      	ldr	r2, [r2, #8]
 80074aa:	0212      	lsls	r2, r2, #8
 80074ac:	4311      	orrs	r1, r2
 80074ae:	68ba      	ldr	r2, [r7, #8]
 80074b0:	6992      	ldr	r2, [r2, #24]
 80074b2:	4311      	orrs	r1, r2
 80074b4:	68ba      	ldr	r2, [r7, #8]
 80074b6:	68d2      	ldr	r2, [r2, #12]
 80074b8:	0412      	lsls	r2, r2, #16
 80074ba:	430a      	orrs	r2, r1
 80074bc:	ea43 0102 	orr.w	r1, r3, r2
 80074c0:	68fb      	ldr	r3, [r7, #12]
 80074c2:	687a      	ldr	r2, [r7, #4]
 80074c4:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
 80074c8:	e005      	b.n	80074d6 <FMC_NORSRAM_Extended_Timing_Init+0x5e>
                                                     Timing->AccessMode                                          |
                                                     ((Timing->BusTurnAroundDuration)  << FMC_BWTRx_BUSTURN_Pos)));
  }
  else
  {
    Device->BWTR[Bank] = 0x0FFFFFFFU;
 80074ca:	68fb      	ldr	r3, [r7, #12]
 80074cc:	687a      	ldr	r2, [r7, #4]
 80074ce:	f06f 4170 	mvn.w	r1, #4026531840	; 0xf0000000
 80074d2:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  }

  return HAL_OK;
 80074d6:	2300      	movs	r3, #0
}
 80074d8:	4618      	mov	r0, r3
 80074da:	3714      	adds	r7, #20
 80074dc:	46bd      	mov	sp, r7
 80074de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80074e2:	4770      	bx	lr
 80074e4:	cff00000 	.word	0xcff00000

080074e8 <WIZCHIP_WRITE>:

#define _W6100_SPI_OP_          _WIZCHIP_SPI_VDM_OP_

//////////////////////////////////////////////////
void WIZCHIP_WRITE(uint32_t AddrSel, uint8_t wb )
{
 80074e8:	b590      	push	{r4, r7, lr}
 80074ea:	b085      	sub	sp, #20
 80074ec:	af00      	add	r7, sp, #0
 80074ee:	6078      	str	r0, [r7, #4]
 80074f0:	460b      	mov	r3, r1
 80074f2:	70fb      	strb	r3, [r7, #3]
   uint8_t tAD[4];
   tAD[0] = (uint8_t)((AddrSel & 0x00FF0000) >> 16);
 80074f4:	687b      	ldr	r3, [r7, #4]
 80074f6:	0c1b      	lsrs	r3, r3, #16
 80074f8:	b2db      	uxtb	r3, r3
 80074fa:	733b      	strb	r3, [r7, #12]
   tAD[1] = (uint8_t)((AddrSel & 0x0000FF00) >> 8);
 80074fc:	687b      	ldr	r3, [r7, #4]
 80074fe:	0a1b      	lsrs	r3, r3, #8
 8007500:	b2db      	uxtb	r3, r3
 8007502:	737b      	strb	r3, [r7, #13]
   tAD[2] = (uint8_t)(AddrSel & 0x000000ff);
 8007504:	687b      	ldr	r3, [r7, #4]
 8007506:	b2db      	uxtb	r3, r3
 8007508:	73bb      	strb	r3, [r7, #14]
   tAD[3] = wb;
 800750a:	78fb      	ldrb	r3, [r7, #3]
 800750c:	73fb      	strb	r3, [r7, #15]

   WIZCHIP_CRITICAL_ENTER();
 800750e:	4b0c      	ldr	r3, [pc, #48]	; (8007540 <WIZCHIP_WRITE+0x58>)
 8007510:	689b      	ldr	r3, [r3, #8]
 8007512:	4798      	blx	r3
   WIZCHIP.CS._s_e_l_e_c_t_();
 8007514:	4b0a      	ldr	r3, [pc, #40]	; (8007540 <WIZCHIP_WRITE+0x58>)
 8007516:	691b      	ldr	r3, [r3, #16]
 8007518:	4798      	blx	r3
#if( (_WIZCHIP_IO_MODE_ == _WIZCHIP_IO_MODE_SPI_VDM_))
   tAD[2] |= (_W6100_SPI_WRITE_ | _W6100_SPI_OP_);
   WIZCHIP.IF.SPI._write_byte_buf(tAD, 4);

#elif ( (_WIZCHIP_IO_MODE_ == _WIZCHIP_IO_MODE_BUS_INDIR_) )
   WIZCHIP.IF.BUS._write_data_buf(IDM_AR0, tAD, 4, 1);
 800751a:	4b09      	ldr	r3, [pc, #36]	; (8007540 <WIZCHIP_WRITE+0x58>)
 800751c:	6a5c      	ldr	r4, [r3, #36]	; 0x24
 800751e:	f107 010c 	add.w	r1, r7, #12
 8007522:	2301      	movs	r3, #1
 8007524:	2204      	movs	r2, #4
 8007526:	f04f 40c0 	mov.w	r0, #1610612736	; 0x60000000
 800752a:	47a0      	blx	r4
#else
   #error "Unknown _WIZCHIP_IO_MODE_ in W5100. !!!"
#endif

   WIZCHIP.CS._d_e_s_e_l_e_c_t_();
 800752c:	4b04      	ldr	r3, [pc, #16]	; (8007540 <WIZCHIP_WRITE+0x58>)
 800752e:	695b      	ldr	r3, [r3, #20]
 8007530:	4798      	blx	r3
   WIZCHIP_CRITICAL_EXIT();
 8007532:	4b03      	ldr	r3, [pc, #12]	; (8007540 <WIZCHIP_WRITE+0x58>)
 8007534:	68db      	ldr	r3, [r3, #12]
 8007536:	4798      	blx	r3
}
 8007538:	bf00      	nop
 800753a:	3714      	adds	r7, #20
 800753c:	46bd      	mov	sp, r7
 800753e:	bd90      	pop	{r4, r7, pc}
 8007540:	20000078 	.word	0x20000078

08007544 <WIZCHIP_READ>:

uint8_t  WIZCHIP_READ(uint32_t AddrSel)
{
 8007544:	b590      	push	{r4, r7, lr}
 8007546:	b085      	sub	sp, #20
 8007548:	af00      	add	r7, sp, #0
 800754a:	6078      	str	r0, [r7, #4]
   uint8_t ret;
   uint8_t tAD[3];
   tAD[0] = (uint8_t)((AddrSel & 0x00FF0000) >> 16);
 800754c:	687b      	ldr	r3, [r7, #4]
 800754e:	0c1b      	lsrs	r3, r3, #16
 8007550:	b2db      	uxtb	r3, r3
 8007552:	733b      	strb	r3, [r7, #12]
   tAD[1] = (uint8_t)((AddrSel & 0x0000FF00) >> 8);
 8007554:	687b      	ldr	r3, [r7, #4]
 8007556:	0a1b      	lsrs	r3, r3, #8
 8007558:	b2db      	uxtb	r3, r3
 800755a:	737b      	strb	r3, [r7, #13]
   tAD[2] = (uint8_t)(AddrSel & 0x000000ff);
 800755c:	687b      	ldr	r3, [r7, #4]
 800755e:	b2db      	uxtb	r3, r3
 8007560:	73bb      	strb	r3, [r7, #14]

   WIZCHIP_CRITICAL_ENTER();
 8007562:	4b10      	ldr	r3, [pc, #64]	; (80075a4 <WIZCHIP_READ+0x60>)
 8007564:	689b      	ldr	r3, [r3, #8]
 8007566:	4798      	blx	r3
   WIZCHIP.CS._s_e_l_e_c_t_();
 8007568:	4b0e      	ldr	r3, [pc, #56]	; (80075a4 <WIZCHIP_READ+0x60>)
 800756a:	691b      	ldr	r3, [r3, #16]
 800756c:	4798      	blx	r3
#if( (_WIZCHIP_IO_MODE_ ==  _WIZCHIP_IO_MODE_SPI_VDM_))
   tAD[2] |= (_W6100_SPI_READ_ | _W6100_SPI_OP_);
   WIZCHIP.IF.SPI._write_byte_buf(tAD, 3);
   ret = WIZCHIP.IF.SPI._read_byte();
#elif ( (_WIZCHIP_IO_MODE_ == _WIZCHIP_IO_MODE_BUS_INDIR_) )
   WIZCHIP.IF.BUS._write_data_buf(IDM_AR0,tAD,3,1);
 800756e:	4b0d      	ldr	r3, [pc, #52]	; (80075a4 <WIZCHIP_READ+0x60>)
 8007570:	6a5c      	ldr	r4, [r3, #36]	; 0x24
 8007572:	f107 010c 	add.w	r1, r7, #12
 8007576:	2301      	movs	r3, #1
 8007578:	2203      	movs	r2, #3
 800757a:	f04f 40c0 	mov.w	r0, #1610612736	; 0x60000000
 800757e:	47a0      	blx	r4
   ret = WIZCHIP.IF.BUS._read_data(IDM_DR);
 8007580:	4b08      	ldr	r3, [pc, #32]	; (80075a4 <WIZCHIP_READ+0x60>)
 8007582:	699b      	ldr	r3, [r3, #24]
 8007584:	4808      	ldr	r0, [pc, #32]	; (80075a8 <WIZCHIP_READ+0x64>)
 8007586:	4798      	blx	r3
 8007588:	4603      	mov	r3, r0
 800758a:	73fb      	strb	r3, [r7, #15]
#else
   #error "Unknown _WIZCHIP_IO_MODE_ in W6100. !!!"   
#endif

   WIZCHIP.CS._d_e_s_e_l_e_c_t_();
 800758c:	4b05      	ldr	r3, [pc, #20]	; (80075a4 <WIZCHIP_READ+0x60>)
 800758e:	695b      	ldr	r3, [r3, #20]
 8007590:	4798      	blx	r3
   WIZCHIP_CRITICAL_EXIT();
 8007592:	4b04      	ldr	r3, [pc, #16]	; (80075a4 <WIZCHIP_READ+0x60>)
 8007594:	68db      	ldr	r3, [r3, #12]
 8007596:	4798      	blx	r3
   return ret;
 8007598:	7bfb      	ldrb	r3, [r7, #15]
}
 800759a:	4618      	mov	r0, r3
 800759c:	3714      	adds	r7, #20
 800759e:	46bd      	mov	sp, r7
 80075a0:	bd90      	pop	{r4, r7, pc}
 80075a2:	bf00      	nop
 80075a4:	20000078 	.word	0x20000078
 80075a8:	60000003 	.word	0x60000003

080075ac <WIZCHIP_WRITE_BUF>:

void WIZCHIP_WRITE_BUF(uint32_t AddrSel, uint8_t* pBuf, datasize_t len)
{
 80075ac:	b590      	push	{r4, r7, lr}
 80075ae:	b087      	sub	sp, #28
 80075b0:	af00      	add	r7, sp, #0
 80075b2:	60f8      	str	r0, [r7, #12]
 80075b4:	60b9      	str	r1, [r7, #8]
 80075b6:	4613      	mov	r3, r2
 80075b8:	80fb      	strh	r3, [r7, #6]
   uint8_t tAD[3];
   tAD[0] = (uint8_t)((AddrSel & 0x00FF0000) >> 16);
 80075ba:	68fb      	ldr	r3, [r7, #12]
 80075bc:	0c1b      	lsrs	r3, r3, #16
 80075be:	b2db      	uxtb	r3, r3
 80075c0:	753b      	strb	r3, [r7, #20]
   tAD[1] = (uint8_t)((AddrSel & 0x0000FF00) >> 8);
 80075c2:	68fb      	ldr	r3, [r7, #12]
 80075c4:	0a1b      	lsrs	r3, r3, #8
 80075c6:	b2db      	uxtb	r3, r3
 80075c8:	757b      	strb	r3, [r7, #21]
   tAD[2] = (uint8_t)(AddrSel & 0x000000ff);
 80075ca:	68fb      	ldr	r3, [r7, #12]
 80075cc:	b2db      	uxtb	r3, r3
 80075ce:	75bb      	strb	r3, [r7, #22]


   WIZCHIP_CRITICAL_ENTER();
 80075d0:	4b10      	ldr	r3, [pc, #64]	; (8007614 <WIZCHIP_WRITE_BUF+0x68>)
 80075d2:	689b      	ldr	r3, [r3, #8]
 80075d4:	4798      	blx	r3
   WIZCHIP.CS._s_e_l_e_c_t_();
 80075d6:	4b0f      	ldr	r3, [pc, #60]	; (8007614 <WIZCHIP_WRITE_BUF+0x68>)
 80075d8:	691b      	ldr	r3, [r3, #16]
 80075da:	4798      	blx	r3

   WIZCHIP.IF.SPI._write_byte_buf(tAD, 3);
   WIZCHIP.IF.SPI._write_byte_buf(pBuf, len);

#elif ( (_WIZCHIP_IO_MODE_ == _WIZCHIP_IO_MODE_BUS_INDIR_) )
   WIZCHIP.IF.BUS._write_data_buf(IDM_AR0,tAD, 3, 1);
 80075dc:	4b0d      	ldr	r3, [pc, #52]	; (8007614 <WIZCHIP_WRITE_BUF+0x68>)
 80075de:	6a5c      	ldr	r4, [r3, #36]	; 0x24
 80075e0:	f107 0114 	add.w	r1, r7, #20
 80075e4:	2301      	movs	r3, #1
 80075e6:	2203      	movs	r2, #3
 80075e8:	f04f 40c0 	mov.w	r0, #1610612736	; 0x60000000
 80075ec:	47a0      	blx	r4
   WIZCHIP.IF.BUS._write_data_buf(IDM_DR,pBuf,len, 0);
 80075ee:	4b09      	ldr	r3, [pc, #36]	; (8007614 <WIZCHIP_WRITE_BUF+0x68>)
 80075f0:	6a5c      	ldr	r4, [r3, #36]	; 0x24
 80075f2:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 80075f6:	2300      	movs	r3, #0
 80075f8:	68b9      	ldr	r1, [r7, #8]
 80075fa:	4807      	ldr	r0, [pc, #28]	; (8007618 <WIZCHIP_WRITE_BUF+0x6c>)
 80075fc:	47a0      	blx	r4
#else
   #error "Unknown _WIZCHIP_IO_MODE_ in W6100. !!!!"
#endif

   WIZCHIP.CS._d_e_s_e_l_e_c_t_();
 80075fe:	4b05      	ldr	r3, [pc, #20]	; (8007614 <WIZCHIP_WRITE_BUF+0x68>)
 8007600:	695b      	ldr	r3, [r3, #20]
 8007602:	4798      	blx	r3
   WIZCHIP_CRITICAL_EXIT();
 8007604:	4b03      	ldr	r3, [pc, #12]	; (8007614 <WIZCHIP_WRITE_BUF+0x68>)
 8007606:	68db      	ldr	r3, [r3, #12]
 8007608:	4798      	blx	r3
}
 800760a:	bf00      	nop
 800760c:	371c      	adds	r7, #28
 800760e:	46bd      	mov	sp, r7
 8007610:	bd90      	pop	{r4, r7, pc}
 8007612:	bf00      	nop
 8007614:	20000078 	.word	0x20000078
 8007618:	60000003 	.word	0x60000003

0800761c <WIZCHIP_READ_BUF>:

void WIZCHIP_READ_BUF (uint32_t AddrSel, uint8_t* pBuf, datasize_t len)
{
 800761c:	b590      	push	{r4, r7, lr}
 800761e:	b087      	sub	sp, #28
 8007620:	af00      	add	r7, sp, #0
 8007622:	60f8      	str	r0, [r7, #12]
 8007624:	60b9      	str	r1, [r7, #8]
 8007626:	4613      	mov	r3, r2
 8007628:	80fb      	strh	r3, [r7, #6]
   uint8_t tAD[3];
   tAD[0] = (uint8_t)((AddrSel & 0x00FF0000) >> 16);
 800762a:	68fb      	ldr	r3, [r7, #12]
 800762c:	0c1b      	lsrs	r3, r3, #16
 800762e:	b2db      	uxtb	r3, r3
 8007630:	753b      	strb	r3, [r7, #20]
   tAD[1] = (uint8_t)((AddrSel & 0x0000FF00) >> 8);
 8007632:	68fb      	ldr	r3, [r7, #12]
 8007634:	0a1b      	lsrs	r3, r3, #8
 8007636:	b2db      	uxtb	r3, r3
 8007638:	757b      	strb	r3, [r7, #21]
   tAD[2] = (uint8_t)(AddrSel & 0x000000ff);
 800763a:	68fb      	ldr	r3, [r7, #12]
 800763c:	b2db      	uxtb	r3, r3
 800763e:	75bb      	strb	r3, [r7, #22]

   WIZCHIP_CRITICAL_ENTER();
 8007640:	4b10      	ldr	r3, [pc, #64]	; (8007684 <WIZCHIP_READ_BUF+0x68>)
 8007642:	689b      	ldr	r3, [r3, #8]
 8007644:	4798      	blx	r3
   WIZCHIP.CS._s_e_l_e_c_t_();
 8007646:	4b0f      	ldr	r3, [pc, #60]	; (8007684 <WIZCHIP_READ_BUF+0x68>)
 8007648:	691b      	ldr	r3, [r3, #16]
 800764a:	4798      	blx	r3
#if((_WIZCHIP_IO_MODE_ == _WIZCHIP_IO_MODE_SPI_VDM_))
   tAD[2] |= (_W6100_SPI_READ_ | _W6100_SPI_OP_);
   WIZCHIP.IF.SPI._write_byte_buf(tAD,3);
   WIZCHIP.IF.SPI._read_byte_buf(pBuf, len);
#elif ( (_WIZCHIP_IO_MODE_ == _WIZCHIP_IO_MODE_BUS_INDIR_) )
   WIZCHIP.IF.BUS._write_data_buf(IDM_AR0,tAD,3,1);
 800764c:	4b0d      	ldr	r3, [pc, #52]	; (8007684 <WIZCHIP_READ_BUF+0x68>)
 800764e:	6a5c      	ldr	r4, [r3, #36]	; 0x24
 8007650:	f107 0114 	add.w	r1, r7, #20
 8007654:	2301      	movs	r3, #1
 8007656:	2203      	movs	r2, #3
 8007658:	f04f 40c0 	mov.w	r0, #1610612736	; 0x60000000
 800765c:	47a0      	blx	r4
   WIZCHIP.IF.BUS._read_data_buf(IDM_DR,pBuf,len,0);
 800765e:	4b09      	ldr	r3, [pc, #36]	; (8007684 <WIZCHIP_READ_BUF+0x68>)
 8007660:	6a1c      	ldr	r4, [r3, #32]
 8007662:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 8007666:	2300      	movs	r3, #0
 8007668:	68b9      	ldr	r1, [r7, #8]
 800766a:	4807      	ldr	r0, [pc, #28]	; (8007688 <WIZCHIP_READ_BUF+0x6c>)
 800766c:	47a0      	blx	r4
#else
   #error "Unknown _WIZCHIP_IO_MODE_ in W6100. !!!!"
#endif
   WIZCHIP.CS._d_e_s_e_l_e_c_t_();
 800766e:	4b05      	ldr	r3, [pc, #20]	; (8007684 <WIZCHIP_READ_BUF+0x68>)
 8007670:	695b      	ldr	r3, [r3, #20]
 8007672:	4798      	blx	r3
   WIZCHIP_CRITICAL_EXIT();
 8007674:	4b03      	ldr	r3, [pc, #12]	; (8007684 <WIZCHIP_READ_BUF+0x68>)
 8007676:	68db      	ldr	r3, [r3, #12]
 8007678:	4798      	blx	r3
}
 800767a:	bf00      	nop
 800767c:	371c      	adds	r7, #28
 800767e:	46bd      	mov	sp, r7
 8007680:	bd90      	pop	{r4, r7, pc}
 8007682:	bf00      	nop
 8007684:	20000078 	.word	0x20000078
 8007688:	60000003 	.word	0x60000003

0800768c <wizchip_cris_enter>:
 * @details @ref wizchip_cris_enter() provides the default protection while @ref _WIZCHIP_ is accessed. \n
 *          but it is null function.
 * @note It can be overwritten with your function or register your functions by calling @ref reg_wizchip_cris_cbfunc().
 * @sa wizchip_cris_exit()
 */
void wizchip_cris_enter(void)   {}
 800768c:	b480      	push	{r7}
 800768e:	af00      	add	r7, sp, #0
 8007690:	bf00      	nop
 8007692:	46bd      	mov	sp, r7
 8007694:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007698:	4770      	bx	lr

0800769a <wizchip_cris_exit>:
 * @details @ref wizchip_cris_exit provides the default protection while @ref _WIZCHIP_ is accessed\n
 *          but it is null function.
 * @note It can be overwritten with your function or register your functions by calling @ref reg_wizchip_cris_cbfunc().
 * @sa wizchip_cris_enter()
 */
void wizchip_cris_exit(void)   {}
 800769a:	b480      	push	{r7}
 800769c:	af00      	add	r7, sp, #0
 800769e:	bf00      	nop
 80076a0:	46bd      	mov	sp, r7
 80076a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80076a6:	4770      	bx	lr

080076a8 <wizchip_cs_select>:
 * @details @ref wizchip_cs_select() provides the default selection @ref _WIZCHIP_,\n
 *          but it is null function.
 * @note It can be overwritten with your function or register your functions by calling @ref reg_wizchip_cs_cbfunc().
 * @sa wizchip_cs_deselect()
 */
void wizchip_cs_select(void)   {}
 80076a8:	b480      	push	{r7}
 80076aa:	af00      	add	r7, sp, #0
 80076ac:	bf00      	nop
 80076ae:	46bd      	mov	sp, r7
 80076b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80076b4:	4770      	bx	lr

080076b6 <wizchip_cs_deselect>:
 * @details @ref wizchip_cs_deselect() provides the default de-selection @ref _WIZCHIP_, \n
 *          but it is null function.
 * @note It can be overwritten with your function or register your functions by calling @ref reg_wizchip_cs_cbfunc().
 * @sa wizchip_cs_select()
 */
void wizchip_cs_deselect(void)   {}
 80076b6:	b480      	push	{r7}
 80076b8:	af00      	add	r7, sp, #0
 80076ba:	bf00      	nop
 80076bc:	46bd      	mov	sp, r7
 80076be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80076c2:	4770      	bx	lr

080076c4 <wizchip_bus_read>:
 * @param AddrSel It specifies the address of register to be read.
 * @return @ref iodata_t  
 * @note It can be overwritten with your function or register your functions by calling @ref reg_wizchip_bus_cbfunc().
 * @sa wizchip_bus_write()
 */
iodata_t wizchip_bus_read(uint32_t AddrSel) { return * ((volatile iodata_t *)((ptrdiff_t) AddrSel)); }
 80076c4:	b480      	push	{r7}
 80076c6:	b083      	sub	sp, #12
 80076c8:	af00      	add	r7, sp, #0
 80076ca:	6078      	str	r0, [r7, #4]
 80076cc:	687b      	ldr	r3, [r7, #4]
 80076ce:	781b      	ldrb	r3, [r3, #0]
 80076d0:	b2db      	uxtb	r3, r3
 80076d2:	4618      	mov	r0, r3
 80076d4:	370c      	adds	r7, #12
 80076d6:	46bd      	mov	sp, r7
 80076d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80076dc:	4770      	bx	lr

080076de <wizchip_bus_write>:
 * @param wb @ref iodata_t data to be written
 * @return void
 * @note It can be overwritten with your function or register your functions by calling @ref reg_wizchip_bus_cbfunc().
 * @sa wizchip_bus_read()
 */
void wizchip_bus_write(uint32_t AddrSel, iodata_t wb)  { *((volatile iodata_t*)((ptrdiff_t)AddrSel)) = wb; }
 80076de:	b480      	push	{r7}
 80076e0:	b083      	sub	sp, #12
 80076e2:	af00      	add	r7, sp, #0
 80076e4:	6078      	str	r0, [r7, #4]
 80076e6:	460b      	mov	r3, r1
 80076e8:	70fb      	strb	r3, [r7, #3]
 80076ea:	687b      	ldr	r3, [r7, #4]
 80076ec:	78fa      	ldrb	r2, [r7, #3]
 80076ee:	701a      	strb	r2, [r3, #0]
 80076f0:	bf00      	nop
 80076f2:	370c      	adds	r7, #12
 80076f4:	46bd      	mov	sp, r7
 80076f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80076fa:	4770      	bx	lr

080076fc <wizchip_bus_read_buf>:
 * @return void
 * @note It can be overwritten with your function or register your functions by calling @ref reg_wizchip_bus_cbfunc().
 * @sa wizchip_bus_write_buf()
 */
void wizchip_bus_read_buf(uint32_t AddrSel, iodata_t* buf, datasize_t len, uint8_t addrinc)
{ 
 80076fc:	b590      	push	{r4, r7, lr}
 80076fe:	b087      	sub	sp, #28
 8007700:	af00      	add	r7, sp, #0
 8007702:	60f8      	str	r0, [r7, #12]
 8007704:	60b9      	str	r1, [r7, #8]
 8007706:	4611      	mov	r1, r2
 8007708:	461a      	mov	r2, r3
 800770a:	460b      	mov	r3, r1
 800770c:	80fb      	strh	r3, [r7, #6]
 800770e:	4613      	mov	r3, r2
 8007710:	717b      	strb	r3, [r7, #5]
   datasize_t i;
   if(addrinc) addrinc = sizeof(iodata_t);
 8007712:	797b      	ldrb	r3, [r7, #5]
 8007714:	2b00      	cmp	r3, #0
 8007716:	d001      	beq.n	800771c <wizchip_bus_read_buf+0x20>
 8007718:	2301      	movs	r3, #1
 800771a:	717b      	strb	r3, [r7, #5]
   for ( i = 0; i < len; i++)
 800771c:	2300      	movs	r3, #0
 800771e:	82fb      	strh	r3, [r7, #22]
 8007720:	e012      	b.n	8007748 <wizchip_bus_read_buf+0x4c>
   {
      *buf++ = WIZCHIP.IF.BUS._read_data(AddrSel);
 8007722:	4b0f      	ldr	r3, [pc, #60]	; (8007760 <wizchip_bus_read_buf+0x64>)
 8007724:	699b      	ldr	r3, [r3, #24]
 8007726:	68bc      	ldr	r4, [r7, #8]
 8007728:	1c62      	adds	r2, r4, #1
 800772a:	60ba      	str	r2, [r7, #8]
 800772c:	68f8      	ldr	r0, [r7, #12]
 800772e:	4798      	blx	r3
 8007730:	4603      	mov	r3, r0
 8007732:	7023      	strb	r3, [r4, #0]
      AddrSel += (uint32_t) addrinc;
 8007734:	797b      	ldrb	r3, [r7, #5]
 8007736:	68fa      	ldr	r2, [r7, #12]
 8007738:	4413      	add	r3, r2
 800773a:	60fb      	str	r3, [r7, #12]
   for ( i = 0; i < len; i++)
 800773c:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 8007740:	b29b      	uxth	r3, r3
 8007742:	3301      	adds	r3, #1
 8007744:	b29b      	uxth	r3, r3
 8007746:	82fb      	strh	r3, [r7, #22]
 8007748:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 800774c:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8007750:	429a      	cmp	r2, r3
 8007752:	dbe6      	blt.n	8007722 <wizchip_bus_read_buf+0x26>
   }
}
 8007754:	bf00      	nop
 8007756:	bf00      	nop
 8007758:	371c      	adds	r7, #28
 800775a:	46bd      	mov	sp, r7
 800775c:	bd90      	pop	{r4, r7, pc}
 800775e:	bf00      	nop
 8007760:	20000078 	.word	0x20000078

08007764 <wizchip_bus_write_buf>:
 * @return void
 * @note It can be overwritten with your function or register your functions by calling @ref reg_wizchip_bus_cbfunc().
 * @sa wizchip_bus_read_buf()
 */
void wizchip_bus_write_buf(uint32_t AddrSel, iodata_t* buf, datasize_t len, uint8_t addrinc)
{ 
 8007764:	b580      	push	{r7, lr}
 8007766:	b086      	sub	sp, #24
 8007768:	af00      	add	r7, sp, #0
 800776a:	60f8      	str	r0, [r7, #12]
 800776c:	60b9      	str	r1, [r7, #8]
 800776e:	4611      	mov	r1, r2
 8007770:	461a      	mov	r2, r3
 8007772:	460b      	mov	r3, r1
 8007774:	80fb      	strh	r3, [r7, #6]
 8007776:	4613      	mov	r3, r2
 8007778:	717b      	strb	r3, [r7, #5]
   datasize_t i;
   if(addrinc) addrinc = sizeof(iodata_t);
 800777a:	797b      	ldrb	r3, [r7, #5]
 800777c:	2b00      	cmp	r3, #0
 800777e:	d001      	beq.n	8007784 <wizchip_bus_write_buf+0x20>
 8007780:	2301      	movs	r3, #1
 8007782:	717b      	strb	r3, [r7, #5]
   for( i = 0; i < len ; i++)
 8007784:	2300      	movs	r3, #0
 8007786:	82fb      	strh	r3, [r7, #22]
 8007788:	e012      	b.n	80077b0 <wizchip_bus_write_buf+0x4c>
   {
      WIZCHIP.IF.BUS._write_data(AddrSel,*buf++);
 800778a:	4b0f      	ldr	r3, [pc, #60]	; (80077c8 <wizchip_bus_write_buf+0x64>)
 800778c:	69da      	ldr	r2, [r3, #28]
 800778e:	68bb      	ldr	r3, [r7, #8]
 8007790:	1c59      	adds	r1, r3, #1
 8007792:	60b9      	str	r1, [r7, #8]
 8007794:	781b      	ldrb	r3, [r3, #0]
 8007796:	4619      	mov	r1, r3
 8007798:	68f8      	ldr	r0, [r7, #12]
 800779a:	4790      	blx	r2
      AddrSel += (uint32_t)addrinc;
 800779c:	797b      	ldrb	r3, [r7, #5]
 800779e:	68fa      	ldr	r2, [r7, #12]
 80077a0:	4413      	add	r3, r2
 80077a2:	60fb      	str	r3, [r7, #12]
   for( i = 0; i < len ; i++)
 80077a4:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 80077a8:	b29b      	uxth	r3, r3
 80077aa:	3301      	adds	r3, #1
 80077ac:	b29b      	uxth	r3, r3
 80077ae:	82fb      	strh	r3, [r7, #22]
 80077b0:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 80077b4:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80077b8:	429a      	cmp	r2, r3
 80077ba:	dbe6      	blt.n	800778a <wizchip_bus_write_buf+0x26>
   }

}
 80077bc:	bf00      	nop
 80077be:	bf00      	nop
 80077c0:	3718      	adds	r7, #24
 80077c2:	46bd      	mov	sp, r7
 80077c4:	bd80      	pop	{r7, pc}
 80077c6:	bf00      	nop
 80077c8:	20000078 	.word	0x20000078

080077cc <reg_wizchip_bus_cbfunc>:
#if (_WIZCHIP_IO_MODE_ & _WIZCHIP_IO_MODE_BUS_)
void reg_wizchip_bus_cbfunc( iodata_t(*bus_rd)(uint32_t addr), 
                             void (*bus_wd)(uint32_t addr, iodata_t wb),
                             void (*bus_rbuf)(uint32_t AddrSel, uint8_t* buf, datasize_t len, uint8_t inc),
                             void (*bus_wbuf)(uint32_t AddrSel, uint8_t* buf, datasize_t len, uint8_t inc) )
{
 80077cc:	b480      	push	{r7}
 80077ce:	b085      	sub	sp, #20
 80077d0:	af00      	add	r7, sp, #0
 80077d2:	60f8      	str	r0, [r7, #12]
 80077d4:	60b9      	str	r1, [r7, #8]
 80077d6:	607a      	str	r2, [r7, #4]
 80077d8:	603b      	str	r3, [r7, #0]
   while(!(WIZCHIP.if_mode & _WIZCHIP_IO_MODE_BUS_));   
 80077da:	bf00      	nop
 80077dc:	4b19      	ldr	r3, [pc, #100]	; (8007844 <reg_wizchip_bus_cbfunc+0x78>)
 80077de:	881b      	ldrh	r3, [r3, #0]
 80077e0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80077e4:	2b00      	cmp	r3, #0
 80077e6:	d0f9      	beq.n	80077dc <reg_wizchip_bus_cbfunc+0x10>
   if(!bus_rd)  WIZCHIP.IF.BUS._read_data   = wizchip_bus_read;
 80077e8:	68fb      	ldr	r3, [r7, #12]
 80077ea:	2b00      	cmp	r3, #0
 80077ec:	d103      	bne.n	80077f6 <reg_wizchip_bus_cbfunc+0x2a>
 80077ee:	4b15      	ldr	r3, [pc, #84]	; (8007844 <reg_wizchip_bus_cbfunc+0x78>)
 80077f0:	4a15      	ldr	r2, [pc, #84]	; (8007848 <reg_wizchip_bus_cbfunc+0x7c>)
 80077f2:	619a      	str	r2, [r3, #24]
 80077f4:	e002      	b.n	80077fc <reg_wizchip_bus_cbfunc+0x30>
   else         WIZCHIP.IF.BUS._read_data   = bus_rd;
 80077f6:	4a13      	ldr	r2, [pc, #76]	; (8007844 <reg_wizchip_bus_cbfunc+0x78>)
 80077f8:	68fb      	ldr	r3, [r7, #12]
 80077fa:	6193      	str	r3, [r2, #24]
   if(!bus_wd)  WIZCHIP.IF.BUS._write_data  = wizchip_bus_write;
 80077fc:	68bb      	ldr	r3, [r7, #8]
 80077fe:	2b00      	cmp	r3, #0
 8007800:	d103      	bne.n	800780a <reg_wizchip_bus_cbfunc+0x3e>
 8007802:	4b10      	ldr	r3, [pc, #64]	; (8007844 <reg_wizchip_bus_cbfunc+0x78>)
 8007804:	4a11      	ldr	r2, [pc, #68]	; (800784c <reg_wizchip_bus_cbfunc+0x80>)
 8007806:	61da      	str	r2, [r3, #28]
 8007808:	e002      	b.n	8007810 <reg_wizchip_bus_cbfunc+0x44>
   else         WIZCHIP.IF.BUS._write_data  = bus_wd;
 800780a:	4a0e      	ldr	r2, [pc, #56]	; (8007844 <reg_wizchip_bus_cbfunc+0x78>)
 800780c:	68bb      	ldr	r3, [r7, #8]
 800780e:	61d3      	str	r3, [r2, #28]

   if(!bus_rbuf)  WIZCHIP.IF.BUS._read_data_buf   = wizchip_bus_read_buf;
 8007810:	687b      	ldr	r3, [r7, #4]
 8007812:	2b00      	cmp	r3, #0
 8007814:	d103      	bne.n	800781e <reg_wizchip_bus_cbfunc+0x52>
 8007816:	4b0b      	ldr	r3, [pc, #44]	; (8007844 <reg_wizchip_bus_cbfunc+0x78>)
 8007818:	4a0d      	ldr	r2, [pc, #52]	; (8007850 <reg_wizchip_bus_cbfunc+0x84>)
 800781a:	621a      	str	r2, [r3, #32]
 800781c:	e002      	b.n	8007824 <reg_wizchip_bus_cbfunc+0x58>
   else           WIZCHIP.IF.BUS._read_data_buf   = bus_rbuf;
 800781e:	4a09      	ldr	r2, [pc, #36]	; (8007844 <reg_wizchip_bus_cbfunc+0x78>)
 8007820:	687b      	ldr	r3, [r7, #4]
 8007822:	6213      	str	r3, [r2, #32]
   if(!bus_wbuf)  WIZCHIP.IF.BUS._write_data_buf  = wizchip_bus_write_buf;
 8007824:	683b      	ldr	r3, [r7, #0]
 8007826:	2b00      	cmp	r3, #0
 8007828:	d103      	bne.n	8007832 <reg_wizchip_bus_cbfunc+0x66>
 800782a:	4b06      	ldr	r3, [pc, #24]	; (8007844 <reg_wizchip_bus_cbfunc+0x78>)
 800782c:	4a09      	ldr	r2, [pc, #36]	; (8007854 <reg_wizchip_bus_cbfunc+0x88>)
 800782e:	625a      	str	r2, [r3, #36]	; 0x24
   else           WIZCHIP.IF.BUS._write_data_buf  = bus_wbuf;
}
 8007830:	e002      	b.n	8007838 <reg_wizchip_bus_cbfunc+0x6c>
   else           WIZCHIP.IF.BUS._write_data_buf  = bus_wbuf;
 8007832:	4a04      	ldr	r2, [pc, #16]	; (8007844 <reg_wizchip_bus_cbfunc+0x78>)
 8007834:	683b      	ldr	r3, [r7, #0]
 8007836:	6253      	str	r3, [r2, #36]	; 0x24
}
 8007838:	bf00      	nop
 800783a:	3714      	adds	r7, #20
 800783c:	46bd      	mov	sp, r7
 800783e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007842:	4770      	bx	lr
 8007844:	20000078 	.word	0x20000078
 8007848:	080076c5 	.word	0x080076c5
 800784c:	080076df 	.word	0x080076df
 8007850:	080076fd 	.word	0x080076fd
 8007854:	08007765 	.word	0x08007765

08007858 <ctlnetwork>:
   }
   return 0;
}

int8_t ctlnetwork(ctlnetwork_type cntype, void* arg)
{
 8007858:	b580      	push	{r7, lr}
 800785a:	b082      	sub	sp, #8
 800785c:	af00      	add	r7, sp, #0
 800785e:	4603      	mov	r3, r0
 8007860:	6039      	str	r1, [r7, #0]
 8007862:	71fb      	strb	r3, [r7, #7]
   switch(cntype)
 8007864:	79fb      	ldrb	r3, [r7, #7]
 8007866:	2b07      	cmp	r3, #7
 8007868:	d83d      	bhi.n	80078e6 <ctlnetwork+0x8e>
 800786a:	a201      	add	r2, pc, #4	; (adr r2, 8007870 <ctlnetwork+0x18>)
 800786c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007870:	08007891 	.word	0x08007891
 8007874:	08007899 	.word	0x08007899
 8007878:	080078a1 	.word	0x080078a1
 800787c:	080078ad 	.word	0x080078ad
 8007880:	080078b9 	.word	0x080078b9
 8007884:	080078c1 	.word	0x080078c1
 8007888:	080078c9 	.word	0x080078c9
 800788c:	080078d7 	.word	0x080078d7
   {
      case CN_SET_NETINFO:
         wizchip_setnetinfo((wiz_NetInfo*)arg);
 8007890:	6838      	ldr	r0, [r7, #0]
 8007892:	f000 f833 	bl	80078fc <wizchip_setnetinfo>
         break;
 8007896:	e029      	b.n	80078ec <ctlnetwork+0x94>
      case CN_GET_NETINFO:
         wizchip_getnetinfo((wiz_NetInfo*)arg);
 8007898:	6838      	ldr	r0, [r7, #0]
 800789a:	f000 f8ad 	bl	80079f8 <wizchip_getnetinfo>
         break;
 800789e:	e025      	b.n	80078ec <ctlnetwork+0x94>
      case CN_SET_NETMODE:
         wizchip_setnetmode(*(netmode_type*)arg);
 80078a0:	683b      	ldr	r3, [r7, #0]
 80078a2:	681b      	ldr	r3, [r3, #0]
 80078a4:	4618      	mov	r0, r3
 80078a6:	f000 f927 	bl	8007af8 <wizchip_setnetmode>
         break;
 80078aa:	e01f      	b.n	80078ec <ctlnetwork+0x94>
      case CN_GET_NETMODE:
         *(netmode_type*)arg = wizchip_getnetmode();
 80078ac:	f000 f952 	bl	8007b54 <wizchip_getnetmode>
 80078b0:	4602      	mov	r2, r0
 80078b2:	683b      	ldr	r3, [r7, #0]
 80078b4:	601a      	str	r2, [r3, #0]
         break;
 80078b6:	e019      	b.n	80078ec <ctlnetwork+0x94>
      case CN_SET_TIMEOUT:
         wizchip_settimeout((wiz_NetTimeout*)arg);
 80078b8:	6838      	ldr	r0, [r7, #0]
 80078ba:	f000 f97b 	bl	8007bb4 <wizchip_settimeout>
         break;
 80078be:	e015      	b.n	80078ec <ctlnetwork+0x94>
      case CN_GET_TIMEOUT:
         wizchip_gettimeout((wiz_NetTimeout*)arg);
 80078c0:	6838      	ldr	r0, [r7, #0]
 80078c2:	f000 f9b7 	bl	8007c34 <wizchip_gettimeout>
         break;
 80078c6:	e011      	b.n	80078ec <ctlnetwork+0x94>
      case CN_SET_PREFER:
         setSLPSR(*(uint8_t*)arg);
 80078c8:	683b      	ldr	r3, [r7, #0]
 80078ca:	781b      	ldrb	r3, [r3, #0]
 80078cc:	4619      	mov	r1, r3
 80078ce:	480a      	ldr	r0, [pc, #40]	; (80078f8 <ctlnetwork+0xa0>)
 80078d0:	f7ff fe0a 	bl	80074e8 <WIZCHIP_WRITE>
         break;
 80078d4:	e00a      	b.n	80078ec <ctlnetwork+0x94>
      case CN_GET_PREFER:
    	  *(uint8_t*)arg= getSLPSR();
 80078d6:	4808      	ldr	r0, [pc, #32]	; (80078f8 <ctlnetwork+0xa0>)
 80078d8:	f7ff fe34 	bl	8007544 <WIZCHIP_READ>
 80078dc:	4603      	mov	r3, r0
 80078de:	461a      	mov	r2, r3
 80078e0:	683b      	ldr	r3, [r7, #0]
 80078e2:	701a      	strb	r2, [r3, #0]
         break;
 80078e4:	e002      	b.n	80078ec <ctlnetwork+0x94>
      default:
         return -1;
 80078e6:	f04f 33ff 	mov.w	r3, #4294967295
 80078ea:	e000      	b.n	80078ee <ctlnetwork+0x96>
   }
   return 0;
 80078ec:	2300      	movs	r3, #0
}
 80078ee:	4618      	mov	r0, r3
 80078f0:	3708      	adds	r7, #8
 80078f2:	46bd      	mov	sp, r7
 80078f4:	bd80      	pop	{r7, pc}
 80078f6:	bf00      	nop
 80078f8:	60212c00 	.word	0x60212c00

080078fc <wizchip_setnetinfo>:
#endif   
   return PHY_POWER_NORM;
}

void wizchip_setnetinfo(wiz_NetInfo* pnetinfo)
{
 80078fc:	b580      	push	{r7, lr}
 80078fe:	b084      	sub	sp, #16
 8007900:	af00      	add	r7, sp, #0
 8007902:	6078      	str	r0, [r7, #4]
   uint8_t i=0;
 8007904:	2300      	movs	r3, #0
 8007906:	73fb      	strb	r3, [r7, #15]
   setSHAR(pnetinfo->mac);
 8007908:	687b      	ldr	r3, [r7, #4]
 800790a:	2206      	movs	r2, #6
 800790c:	4619      	mov	r1, r3
 800790e:	482f      	ldr	r0, [pc, #188]	; (80079cc <wizchip_setnetinfo+0xd0>)
 8007910:	f7ff fe4c 	bl	80075ac <WIZCHIP_WRITE_BUF>
   setGAR(pnetinfo->gw);
 8007914:	687b      	ldr	r3, [r7, #4]
 8007916:	330e      	adds	r3, #14
 8007918:	2204      	movs	r2, #4
 800791a:	4619      	mov	r1, r3
 800791c:	482c      	ldr	r0, [pc, #176]	; (80079d0 <wizchip_setnetinfo+0xd4>)
 800791e:	f7ff fe45 	bl	80075ac <WIZCHIP_WRITE_BUF>
   setSUBR(pnetinfo->sn);
 8007922:	687b      	ldr	r3, [r7, #4]
 8007924:	330a      	adds	r3, #10
 8007926:	2204      	movs	r2, #4
 8007928:	4619      	mov	r1, r3
 800792a:	482a      	ldr	r0, [pc, #168]	; (80079d4 <wizchip_setnetinfo+0xd8>)
 800792c:	f7ff fe3e 	bl	80075ac <WIZCHIP_WRITE_BUF>
   setSIPR(pnetinfo->ip);   
 8007930:	687b      	ldr	r3, [r7, #4]
 8007932:	3306      	adds	r3, #6
 8007934:	2204      	movs	r2, #4
 8007936:	4619      	mov	r1, r3
 8007938:	4827      	ldr	r0, [pc, #156]	; (80079d8 <wizchip_setnetinfo+0xdc>)
 800793a:	f7ff fe37 	bl	80075ac <WIZCHIP_WRITE_BUF>
   setGA6R(pnetinfo->gw6);
 800793e:	687b      	ldr	r3, [r7, #4]
 8007940:	3342      	adds	r3, #66	; 0x42
 8007942:	2210      	movs	r2, #16
 8007944:	4619      	mov	r1, r3
 8007946:	4825      	ldr	r0, [pc, #148]	; (80079dc <wizchip_setnetinfo+0xe0>)
 8007948:	f7ff fe30 	bl	80075ac <WIZCHIP_WRITE_BUF>
   setSUB6R(pnetinfo->sn6);
 800794c:	687b      	ldr	r3, [r7, #4]
 800794e:	3332      	adds	r3, #50	; 0x32
 8007950:	2210      	movs	r2, #16
 8007952:	4619      	mov	r1, r3
 8007954:	4822      	ldr	r0, [pc, #136]	; (80079e0 <wizchip_setnetinfo+0xe4>)
 8007956:	f7ff fe29 	bl	80075ac <WIZCHIP_WRITE_BUF>
   setLLAR(pnetinfo->lla);
 800795a:	687b      	ldr	r3, [r7, #4]
 800795c:	3312      	adds	r3, #18
 800795e:	2210      	movs	r2, #16
 8007960:	4619      	mov	r1, r3
 8007962:	4820      	ldr	r0, [pc, #128]	; (80079e4 <wizchip_setnetinfo+0xe8>)
 8007964:	f7ff fe22 	bl	80075ac <WIZCHIP_WRITE_BUF>
   setGUAR(pnetinfo->gua);
 8007968:	687b      	ldr	r3, [r7, #4]
 800796a:	3322      	adds	r3, #34	; 0x22
 800796c:	2210      	movs	r2, #16
 800796e:	4619      	mov	r1, r3
 8007970:	481d      	ldr	r0, [pc, #116]	; (80079e8 <wizchip_setnetinfo+0xec>)
 8007972:	f7ff fe1b 	bl	80075ac <WIZCHIP_WRITE_BUF>

   for(i=0; i<4; i++)  _DNS_[i]  = pnetinfo->dns[i];
 8007976:	2300      	movs	r3, #0
 8007978:	73fb      	strb	r3, [r7, #15]
 800797a:	e00a      	b.n	8007992 <wizchip_setnetinfo+0x96>
 800797c:	7bfa      	ldrb	r2, [r7, #15]
 800797e:	7bfb      	ldrb	r3, [r7, #15]
 8007980:	6879      	ldr	r1, [r7, #4]
 8007982:	440a      	add	r2, r1
 8007984:	f892 1052 	ldrb.w	r1, [r2, #82]	; 0x52
 8007988:	4a18      	ldr	r2, [pc, #96]	; (80079ec <wizchip_setnetinfo+0xf0>)
 800798a:	54d1      	strb	r1, [r2, r3]
 800798c:	7bfb      	ldrb	r3, [r7, #15]
 800798e:	3301      	adds	r3, #1
 8007990:	73fb      	strb	r3, [r7, #15]
 8007992:	7bfb      	ldrb	r3, [r7, #15]
 8007994:	2b03      	cmp	r3, #3
 8007996:	d9f1      	bls.n	800797c <wizchip_setnetinfo+0x80>
   for(i=0; i<16; i++) _DNS6_[i] = pnetinfo->dns6[i];
 8007998:	2300      	movs	r3, #0
 800799a:	73fb      	strb	r3, [r7, #15]
 800799c:	e00a      	b.n	80079b4 <wizchip_setnetinfo+0xb8>
 800799e:	7bfa      	ldrb	r2, [r7, #15]
 80079a0:	7bfb      	ldrb	r3, [r7, #15]
 80079a2:	6879      	ldr	r1, [r7, #4]
 80079a4:	440a      	add	r2, r1
 80079a6:	f892 1056 	ldrb.w	r1, [r2, #86]	; 0x56
 80079aa:	4a11      	ldr	r2, [pc, #68]	; (80079f0 <wizchip_setnetinfo+0xf4>)
 80079ac:	54d1      	strb	r1, [r2, r3]
 80079ae:	7bfb      	ldrb	r3, [r7, #15]
 80079b0:	3301      	adds	r3, #1
 80079b2:	73fb      	strb	r3, [r7, #15]
 80079b4:	7bfb      	ldrb	r3, [r7, #15]
 80079b6:	2b0f      	cmp	r3, #15
 80079b8:	d9f1      	bls.n	800799e <wizchip_setnetinfo+0xa2>

   _IPMODE_   = pnetinfo->ipmode;
 80079ba:	687b      	ldr	r3, [r7, #4]
 80079bc:	f893 2066 	ldrb.w	r2, [r3, #102]	; 0x66
 80079c0:	4b0c      	ldr	r3, [pc, #48]	; (80079f4 <wizchip_setnetinfo+0xf8>)
 80079c2:	701a      	strb	r2, [r3, #0]
}
 80079c4:	bf00      	nop
 80079c6:	3710      	adds	r7, #16
 80079c8:	46bd      	mov	sp, r7
 80079ca:	bd80      	pop	{r7, pc}
 80079cc:	60412000 	.word	0x60412000
 80079d0:	60413000 	.word	0x60413000
 80079d4:	60413400 	.word	0x60413400
 80079d8:	60413800 	.word	0x60413800
 80079dc:	60417000 	.word	0x60417000
 80079e0:	60416000 	.word	0x60416000
 80079e4:	60414000 	.word	0x60414000
 80079e8:	60415000 	.word	0x60415000
 80079ec:	200001e8 	.word	0x200001e8
 80079f0:	200001ec 	.word	0x200001ec
 80079f4:	200001fc 	.word	0x200001fc

080079f8 <wizchip_getnetinfo>:

void wizchip_getnetinfo(wiz_NetInfo* pnetinfo)
{
 80079f8:	b580      	push	{r7, lr}
 80079fa:	b084      	sub	sp, #16
 80079fc:	af00      	add	r7, sp, #0
 80079fe:	6078      	str	r0, [r7, #4]
   uint8_t i = 0;
 8007a00:	2300      	movs	r3, #0
 8007a02:	73fb      	strb	r3, [r7, #15]
   getSHAR(pnetinfo->mac);
 8007a04:	687b      	ldr	r3, [r7, #4]
 8007a06:	2206      	movs	r2, #6
 8007a08:	4619      	mov	r1, r3
 8007a0a:	4830      	ldr	r0, [pc, #192]	; (8007acc <wizchip_getnetinfo+0xd4>)
 8007a0c:	f7ff fe06 	bl	800761c <WIZCHIP_READ_BUF>

   getGAR(pnetinfo->gw);
 8007a10:	687b      	ldr	r3, [r7, #4]
 8007a12:	330e      	adds	r3, #14
 8007a14:	2204      	movs	r2, #4
 8007a16:	4619      	mov	r1, r3
 8007a18:	482d      	ldr	r0, [pc, #180]	; (8007ad0 <wizchip_getnetinfo+0xd8>)
 8007a1a:	f7ff fdff 	bl	800761c <WIZCHIP_READ_BUF>
   getSUBR(pnetinfo->sn);
 8007a1e:	687b      	ldr	r3, [r7, #4]
 8007a20:	330a      	adds	r3, #10
 8007a22:	2204      	movs	r2, #4
 8007a24:	4619      	mov	r1, r3
 8007a26:	482b      	ldr	r0, [pc, #172]	; (8007ad4 <wizchip_getnetinfo+0xdc>)
 8007a28:	f7ff fdf8 	bl	800761c <WIZCHIP_READ_BUF>
   getSIPR(pnetinfo->ip);
 8007a2c:	687b      	ldr	r3, [r7, #4]
 8007a2e:	3306      	adds	r3, #6
 8007a30:	2204      	movs	r2, #4
 8007a32:	4619      	mov	r1, r3
 8007a34:	4828      	ldr	r0, [pc, #160]	; (8007ad8 <wizchip_getnetinfo+0xe0>)
 8007a36:	f7ff fdf1 	bl	800761c <WIZCHIP_READ_BUF>
   
   getGA6R(pnetinfo->gw6);
 8007a3a:	687b      	ldr	r3, [r7, #4]
 8007a3c:	3342      	adds	r3, #66	; 0x42
 8007a3e:	2210      	movs	r2, #16
 8007a40:	4619      	mov	r1, r3
 8007a42:	4826      	ldr	r0, [pc, #152]	; (8007adc <wizchip_getnetinfo+0xe4>)
 8007a44:	f7ff fdea 	bl	800761c <WIZCHIP_READ_BUF>
   getSUB6R(pnetinfo->sn6);
 8007a48:	687b      	ldr	r3, [r7, #4]
 8007a4a:	3332      	adds	r3, #50	; 0x32
 8007a4c:	2210      	movs	r2, #16
 8007a4e:	4619      	mov	r1, r3
 8007a50:	4823      	ldr	r0, [pc, #140]	; (8007ae0 <wizchip_getnetinfo+0xe8>)
 8007a52:	f7ff fde3 	bl	800761c <WIZCHIP_READ_BUF>
   getLLAR(pnetinfo->lla);
 8007a56:	687b      	ldr	r3, [r7, #4]
 8007a58:	3312      	adds	r3, #18
 8007a5a:	2210      	movs	r2, #16
 8007a5c:	4619      	mov	r1, r3
 8007a5e:	4821      	ldr	r0, [pc, #132]	; (8007ae4 <wizchip_getnetinfo+0xec>)
 8007a60:	f7ff fddc 	bl	800761c <WIZCHIP_READ_BUF>
   getGUAR(pnetinfo->gua);
 8007a64:	687b      	ldr	r3, [r7, #4]
 8007a66:	3322      	adds	r3, #34	; 0x22
 8007a68:	2210      	movs	r2, #16
 8007a6a:	4619      	mov	r1, r3
 8007a6c:	481e      	ldr	r0, [pc, #120]	; (8007ae8 <wizchip_getnetinfo+0xf0>)
 8007a6e:	f7ff fdd5 	bl	800761c <WIZCHIP_READ_BUF>
   for(i=0; i<4; i++)  pnetinfo->dns[i] = _DNS_[i];
 8007a72:	2300      	movs	r3, #0
 8007a74:	73fb      	strb	r3, [r7, #15]
 8007a76:	e00b      	b.n	8007a90 <wizchip_getnetinfo+0x98>
 8007a78:	7bfa      	ldrb	r2, [r7, #15]
 8007a7a:	7bfb      	ldrb	r3, [r7, #15]
 8007a7c:	491b      	ldr	r1, [pc, #108]	; (8007aec <wizchip_getnetinfo+0xf4>)
 8007a7e:	5c89      	ldrb	r1, [r1, r2]
 8007a80:	687a      	ldr	r2, [r7, #4]
 8007a82:	4413      	add	r3, r2
 8007a84:	460a      	mov	r2, r1
 8007a86:	f883 2052 	strb.w	r2, [r3, #82]	; 0x52
 8007a8a:	7bfb      	ldrb	r3, [r7, #15]
 8007a8c:	3301      	adds	r3, #1
 8007a8e:	73fb      	strb	r3, [r7, #15]
 8007a90:	7bfb      	ldrb	r3, [r7, #15]
 8007a92:	2b03      	cmp	r3, #3
 8007a94:	d9f0      	bls.n	8007a78 <wizchip_getnetinfo+0x80>
   for(i=0; i<16; i++) pnetinfo->dns6[i]  = _DNS6_[i];
 8007a96:	2300      	movs	r3, #0
 8007a98:	73fb      	strb	r3, [r7, #15]
 8007a9a:	e00b      	b.n	8007ab4 <wizchip_getnetinfo+0xbc>
 8007a9c:	7bfa      	ldrb	r2, [r7, #15]
 8007a9e:	7bfb      	ldrb	r3, [r7, #15]
 8007aa0:	4913      	ldr	r1, [pc, #76]	; (8007af0 <wizchip_getnetinfo+0xf8>)
 8007aa2:	5c89      	ldrb	r1, [r1, r2]
 8007aa4:	687a      	ldr	r2, [r7, #4]
 8007aa6:	4413      	add	r3, r2
 8007aa8:	460a      	mov	r2, r1
 8007aaa:	f883 2056 	strb.w	r2, [r3, #86]	; 0x56
 8007aae:	7bfb      	ldrb	r3, [r7, #15]
 8007ab0:	3301      	adds	r3, #1
 8007ab2:	73fb      	strb	r3, [r7, #15]
 8007ab4:	7bfb      	ldrb	r3, [r7, #15]
 8007ab6:	2b0f      	cmp	r3, #15
 8007ab8:	d9f0      	bls.n	8007a9c <wizchip_getnetinfo+0xa4>

   pnetinfo->ipmode = _IPMODE_;
 8007aba:	4b0e      	ldr	r3, [pc, #56]	; (8007af4 <wizchip_getnetinfo+0xfc>)
 8007abc:	781a      	ldrb	r2, [r3, #0]
 8007abe:	687b      	ldr	r3, [r7, #4]
 8007ac0:	f883 2066 	strb.w	r2, [r3, #102]	; 0x66
}
 8007ac4:	bf00      	nop
 8007ac6:	3710      	adds	r7, #16
 8007ac8:	46bd      	mov	sp, r7
 8007aca:	bd80      	pop	{r7, pc}
 8007acc:	60412000 	.word	0x60412000
 8007ad0:	60413000 	.word	0x60413000
 8007ad4:	60413400 	.word	0x60413400
 8007ad8:	60413800 	.word	0x60413800
 8007adc:	60417000 	.word	0x60417000
 8007ae0:	60416000 	.word	0x60416000
 8007ae4:	60414000 	.word	0x60414000
 8007ae8:	60415000 	.word	0x60415000
 8007aec:	200001e8 	.word	0x200001e8
 8007af0:	200001ec 	.word	0x200001ec
 8007af4:	200001fc 	.word	0x200001fc

08007af8 <wizchip_setnetmode>:

void wizchip_setnetmode(netmode_type netmode)
{
 8007af8:	b580      	push	{r7, lr}
 8007afa:	b084      	sub	sp, #16
 8007afc:	af00      	add	r7, sp, #0
 8007afe:	6078      	str	r0, [r7, #4]
   uint32_t tmp = (uint32_t) netmode;
 8007b00:	687b      	ldr	r3, [r7, #4]
 8007b02:	60fb      	str	r3, [r7, #12]
   setNETMR ((uint8_t)tmp);
 8007b04:	68fb      	ldr	r3, [r7, #12]
 8007b06:	b2db      	uxtb	r3, r3
 8007b08:	4619      	mov	r1, r3
 8007b0a:	480e      	ldr	r0, [pc, #56]	; (8007b44 <wizchip_setnetmode+0x4c>)
 8007b0c:	f7ff fcec 	bl	80074e8 <WIZCHIP_WRITE>
   setNETMR2((uint8_t)(tmp>>8));
 8007b10:	68fb      	ldr	r3, [r7, #12]
 8007b12:	0a1b      	lsrs	r3, r3, #8
 8007b14:	b2db      	uxtb	r3, r3
 8007b16:	4619      	mov	r1, r3
 8007b18:	480b      	ldr	r0, [pc, #44]	; (8007b48 <wizchip_setnetmode+0x50>)
 8007b1a:	f7ff fce5 	bl	80074e8 <WIZCHIP_WRITE>
   setNET4MR((uint8_t)(tmp>>16));
 8007b1e:	68fb      	ldr	r3, [r7, #12]
 8007b20:	0c1b      	lsrs	r3, r3, #16
 8007b22:	b2db      	uxtb	r3, r3
 8007b24:	4619      	mov	r1, r3
 8007b26:	4809      	ldr	r0, [pc, #36]	; (8007b4c <wizchip_setnetmode+0x54>)
 8007b28:	f7ff fcde 	bl	80074e8 <WIZCHIP_WRITE>
   setNET6MR((uint8_t)(tmp>>24));
 8007b2c:	68fb      	ldr	r3, [r7, #12]
 8007b2e:	0e1b      	lsrs	r3, r3, #24
 8007b30:	b2db      	uxtb	r3, r3
 8007b32:	4619      	mov	r1, r3
 8007b34:	4806      	ldr	r0, [pc, #24]	; (8007b50 <wizchip_setnetmode+0x58>)
 8007b36:	f7ff fcd7 	bl	80074e8 <WIZCHIP_WRITE>
}
 8007b3a:	bf00      	nop
 8007b3c:	3710      	adds	r7, #16
 8007b3e:	46bd      	mov	sp, r7
 8007b40:	bd80      	pop	{r7, pc}
 8007b42:	bf00      	nop
 8007b44:	60400800 	.word	0x60400800
 8007b48:	60400900 	.word	0x60400900
 8007b4c:	60400000 	.word	0x60400000
 8007b50:	60400400 	.word	0x60400400

08007b54 <wizchip_getnetmode>:

netmode_type wizchip_getnetmode(void)
{
 8007b54:	b590      	push	{r4, r7, lr}
 8007b56:	b083      	sub	sp, #12
 8007b58:	af00      	add	r7, sp, #0
   uint32_t ret = 0;
 8007b5a:	2300      	movs	r3, #0
 8007b5c:	607b      	str	r3, [r7, #4]
   ret = getNETMR();
 8007b5e:	4811      	ldr	r0, [pc, #68]	; (8007ba4 <wizchip_getnetmode+0x50>)
 8007b60:	f7ff fcf0 	bl	8007544 <WIZCHIP_READ>
 8007b64:	4603      	mov	r3, r0
 8007b66:	607b      	str	r3, [r7, #4]
   ret = (ret << 8)  + getNETMR2();
 8007b68:	687b      	ldr	r3, [r7, #4]
 8007b6a:	021c      	lsls	r4, r3, #8
 8007b6c:	480e      	ldr	r0, [pc, #56]	; (8007ba8 <wizchip_getnetmode+0x54>)
 8007b6e:	f7ff fce9 	bl	8007544 <WIZCHIP_READ>
 8007b72:	4603      	mov	r3, r0
 8007b74:	4423      	add	r3, r4
 8007b76:	607b      	str	r3, [r7, #4]
   ret = (ret << 16) + getNET4MR();
 8007b78:	687b      	ldr	r3, [r7, #4]
 8007b7a:	041c      	lsls	r4, r3, #16
 8007b7c:	480b      	ldr	r0, [pc, #44]	; (8007bac <wizchip_getnetmode+0x58>)
 8007b7e:	f7ff fce1 	bl	8007544 <WIZCHIP_READ>
 8007b82:	4603      	mov	r3, r0
 8007b84:	4423      	add	r3, r4
 8007b86:	607b      	str	r3, [r7, #4]
   ret = (ret << 24) + getNET6MR();
 8007b88:	687b      	ldr	r3, [r7, #4]
 8007b8a:	061c      	lsls	r4, r3, #24
 8007b8c:	4808      	ldr	r0, [pc, #32]	; (8007bb0 <wizchip_getnetmode+0x5c>)
 8007b8e:	f7ff fcd9 	bl	8007544 <WIZCHIP_READ>
 8007b92:	4603      	mov	r3, r0
 8007b94:	4423      	add	r3, r4
 8007b96:	607b      	str	r3, [r7, #4]
   return (netmode_type)ret;
 8007b98:	687b      	ldr	r3, [r7, #4]
}
 8007b9a:	4618      	mov	r0, r3
 8007b9c:	370c      	adds	r7, #12
 8007b9e:	46bd      	mov	sp, r7
 8007ba0:	bd90      	pop	{r4, r7, pc}
 8007ba2:	bf00      	nop
 8007ba4:	60400800 	.word	0x60400800
 8007ba8:	60400900 	.word	0x60400900
 8007bac:	60400000 	.word	0x60400000
 8007bb0:	60400400 	.word	0x60400400

08007bb4 <wizchip_settimeout>:

void wizchip_settimeout(wiz_NetTimeout* nettime)
{
 8007bb4:	b580      	push	{r7, lr}
 8007bb6:	b082      	sub	sp, #8
 8007bb8:	af00      	add	r7, sp, #0
 8007bba:	6078      	str	r0, [r7, #4]
   setRCR(nettime->s_retry_cnt);
 8007bbc:	687b      	ldr	r3, [r7, #4]
 8007bbe:	781b      	ldrb	r3, [r3, #0]
 8007bc0:	4619      	mov	r1, r3
 8007bc2:	4816      	ldr	r0, [pc, #88]	; (8007c1c <wizchip_settimeout+0x68>)
 8007bc4:	f7ff fc90 	bl	80074e8 <WIZCHIP_WRITE>
   setRTR(nettime->s_time_100us);
 8007bc8:	687b      	ldr	r3, [r7, #4]
 8007bca:	885b      	ldrh	r3, [r3, #2]
 8007bcc:	0a1b      	lsrs	r3, r3, #8
 8007bce:	b29b      	uxth	r3, r3
 8007bd0:	b2db      	uxtb	r3, r3
 8007bd2:	4619      	mov	r1, r3
 8007bd4:	4812      	ldr	r0, [pc, #72]	; (8007c20 <wizchip_settimeout+0x6c>)
 8007bd6:	f7ff fc87 	bl	80074e8 <WIZCHIP_WRITE>
 8007bda:	687b      	ldr	r3, [r7, #4]
 8007bdc:	885b      	ldrh	r3, [r3, #2]
 8007bde:	b2db      	uxtb	r3, r3
 8007be0:	4619      	mov	r1, r3
 8007be2:	4810      	ldr	r0, [pc, #64]	; (8007c24 <wizchip_settimeout+0x70>)
 8007be4:	f7ff fc80 	bl	80074e8 <WIZCHIP_WRITE>
   setSLRCR(nettime->sl_retry_cnt);
 8007be8:	687b      	ldr	r3, [r7, #4]
 8007bea:	791b      	ldrb	r3, [r3, #4]
 8007bec:	4619      	mov	r1, r3
 8007bee:	480e      	ldr	r0, [pc, #56]	; (8007c28 <wizchip_settimeout+0x74>)
 8007bf0:	f7ff fc7a 	bl	80074e8 <WIZCHIP_WRITE>
   setSLRTR(nettime->sl_time_100us);
 8007bf4:	687b      	ldr	r3, [r7, #4]
 8007bf6:	88db      	ldrh	r3, [r3, #6]
 8007bf8:	0a1b      	lsrs	r3, r3, #8
 8007bfa:	b29b      	uxth	r3, r3
 8007bfc:	b2db      	uxtb	r3, r3
 8007bfe:	4619      	mov	r1, r3
 8007c00:	480a      	ldr	r0, [pc, #40]	; (8007c2c <wizchip_settimeout+0x78>)
 8007c02:	f7ff fc71 	bl	80074e8 <WIZCHIP_WRITE>
 8007c06:	687b      	ldr	r3, [r7, #4]
 8007c08:	88db      	ldrh	r3, [r3, #6]
 8007c0a:	b2db      	uxtb	r3, r3
 8007c0c:	4619      	mov	r1, r3
 8007c0e:	4808      	ldr	r0, [pc, #32]	; (8007c30 <wizchip_settimeout+0x7c>)
 8007c10:	f7ff fc6a 	bl	80074e8 <WIZCHIP_WRITE>
}
 8007c14:	bf00      	nop
 8007c16:	3708      	adds	r7, #8
 8007c18:	46bd      	mov	sp, r7
 8007c1a:	bd80      	pop	{r7, pc}
 8007c1c:	60420400 	.word	0x60420400
 8007c20:	60420000 	.word	0x60420000
 8007c24:	60420100 	.word	0x60420100
 8007c28:	60420c00 	.word	0x60420c00
 8007c2c:	60420800 	.word	0x60420800
 8007c30:	60420900 	.word	0x60420900

08007c34 <wizchip_gettimeout>:

void wizchip_gettimeout(wiz_NetTimeout* nettime)
{
 8007c34:	b590      	push	{r4, r7, lr}
 8007c36:	b083      	sub	sp, #12
 8007c38:	af00      	add	r7, sp, #0
 8007c3a:	6078      	str	r0, [r7, #4]
   nettime->s_retry_cnt   = getRCR();
 8007c3c:	4818      	ldr	r0, [pc, #96]	; (8007ca0 <wizchip_gettimeout+0x6c>)
 8007c3e:	f7ff fc81 	bl	8007544 <WIZCHIP_READ>
 8007c42:	4603      	mov	r3, r0
 8007c44:	461a      	mov	r2, r3
 8007c46:	687b      	ldr	r3, [r7, #4]
 8007c48:	701a      	strb	r2, [r3, #0]
   nettime->s_time_100us  = getRTR();
 8007c4a:	4816      	ldr	r0, [pc, #88]	; (8007ca4 <wizchip_gettimeout+0x70>)
 8007c4c:	f7ff fc7a 	bl	8007544 <WIZCHIP_READ>
 8007c50:	4603      	mov	r3, r0
 8007c52:	b29b      	uxth	r3, r3
 8007c54:	021b      	lsls	r3, r3, #8
 8007c56:	b29c      	uxth	r4, r3
 8007c58:	4813      	ldr	r0, [pc, #76]	; (8007ca8 <wizchip_gettimeout+0x74>)
 8007c5a:	f7ff fc73 	bl	8007544 <WIZCHIP_READ>
 8007c5e:	4603      	mov	r3, r0
 8007c60:	b29b      	uxth	r3, r3
 8007c62:	4423      	add	r3, r4
 8007c64:	b29a      	uxth	r2, r3
 8007c66:	687b      	ldr	r3, [r7, #4]
 8007c68:	805a      	strh	r2, [r3, #2]
   nettime->sl_retry_cnt  = getSLRCR();
 8007c6a:	4810      	ldr	r0, [pc, #64]	; (8007cac <wizchip_gettimeout+0x78>)
 8007c6c:	f7ff fc6a 	bl	8007544 <WIZCHIP_READ>
 8007c70:	4603      	mov	r3, r0
 8007c72:	461a      	mov	r2, r3
 8007c74:	687b      	ldr	r3, [r7, #4]
 8007c76:	711a      	strb	r2, [r3, #4]
   nettime->sl_time_100us = getSLRTR();
 8007c78:	480d      	ldr	r0, [pc, #52]	; (8007cb0 <wizchip_gettimeout+0x7c>)
 8007c7a:	f7ff fc63 	bl	8007544 <WIZCHIP_READ>
 8007c7e:	4603      	mov	r3, r0
 8007c80:	b29b      	uxth	r3, r3
 8007c82:	021b      	lsls	r3, r3, #8
 8007c84:	b29c      	uxth	r4, r3
 8007c86:	480b      	ldr	r0, [pc, #44]	; (8007cb4 <wizchip_gettimeout+0x80>)
 8007c88:	f7ff fc5c 	bl	8007544 <WIZCHIP_READ>
 8007c8c:	4603      	mov	r3, r0
 8007c8e:	b29b      	uxth	r3, r3
 8007c90:	4423      	add	r3, r4
 8007c92:	b29a      	uxth	r2, r3
 8007c94:	687b      	ldr	r3, [r7, #4]
 8007c96:	80da      	strh	r2, [r3, #6]
}
 8007c98:	bf00      	nop
 8007c9a:	370c      	adds	r7, #12
 8007c9c:	46bd      	mov	sp, r7
 8007c9e:	bd90      	pop	{r4, r7, pc}
 8007ca0:	60420400 	.word	0x60420400
 8007ca4:	60420000 	.word	0x60420000
 8007ca8:	60420100 	.word	0x60420100
 8007cac:	60420c00 	.word	0x60420c00
 8007cb0:	60420800 	.word	0x60420800
 8007cb4:	60420900 	.word	0x60420900

08007cb8 <__errno>:
 8007cb8:	4b01      	ldr	r3, [pc, #4]	; (8007cc0 <__errno+0x8>)
 8007cba:	6818      	ldr	r0, [r3, #0]
 8007cbc:	4770      	bx	lr
 8007cbe:	bf00      	nop
 8007cc0:	200000a0 	.word	0x200000a0

08007cc4 <__libc_init_array>:
 8007cc4:	b570      	push	{r4, r5, r6, lr}
 8007cc6:	4d0d      	ldr	r5, [pc, #52]	; (8007cfc <__libc_init_array+0x38>)
 8007cc8:	4c0d      	ldr	r4, [pc, #52]	; (8007d00 <__libc_init_array+0x3c>)
 8007cca:	1b64      	subs	r4, r4, r5
 8007ccc:	10a4      	asrs	r4, r4, #2
 8007cce:	2600      	movs	r6, #0
 8007cd0:	42a6      	cmp	r6, r4
 8007cd2:	d109      	bne.n	8007ce8 <__libc_init_array+0x24>
 8007cd4:	4d0b      	ldr	r5, [pc, #44]	; (8007d04 <__libc_init_array+0x40>)
 8007cd6:	4c0c      	ldr	r4, [pc, #48]	; (8007d08 <__libc_init_array+0x44>)
 8007cd8:	f000 ffec 	bl	8008cb4 <_init>
 8007cdc:	1b64      	subs	r4, r4, r5
 8007cde:	10a4      	asrs	r4, r4, #2
 8007ce0:	2600      	movs	r6, #0
 8007ce2:	42a6      	cmp	r6, r4
 8007ce4:	d105      	bne.n	8007cf2 <__libc_init_array+0x2e>
 8007ce6:	bd70      	pop	{r4, r5, r6, pc}
 8007ce8:	f855 3b04 	ldr.w	r3, [r5], #4
 8007cec:	4798      	blx	r3
 8007cee:	3601      	adds	r6, #1
 8007cf0:	e7ee      	b.n	8007cd0 <__libc_init_array+0xc>
 8007cf2:	f855 3b04 	ldr.w	r3, [r5], #4
 8007cf6:	4798      	blx	r3
 8007cf8:	3601      	adds	r6, #1
 8007cfa:	e7f2      	b.n	8007ce2 <__libc_init_array+0x1e>
 8007cfc:	08008eec 	.word	0x08008eec
 8007d00:	08008eec 	.word	0x08008eec
 8007d04:	08008eec 	.word	0x08008eec
 8007d08:	08008ef0 	.word	0x08008ef0

08007d0c <memset>:
 8007d0c:	4402      	add	r2, r0
 8007d0e:	4603      	mov	r3, r0
 8007d10:	4293      	cmp	r3, r2
 8007d12:	d100      	bne.n	8007d16 <memset+0xa>
 8007d14:	4770      	bx	lr
 8007d16:	f803 1b01 	strb.w	r1, [r3], #1
 8007d1a:	e7f9      	b.n	8007d10 <memset+0x4>

08007d1c <iprintf>:
 8007d1c:	b40f      	push	{r0, r1, r2, r3}
 8007d1e:	4b0a      	ldr	r3, [pc, #40]	; (8007d48 <iprintf+0x2c>)
 8007d20:	b513      	push	{r0, r1, r4, lr}
 8007d22:	681c      	ldr	r4, [r3, #0]
 8007d24:	b124      	cbz	r4, 8007d30 <iprintf+0x14>
 8007d26:	69a3      	ldr	r3, [r4, #24]
 8007d28:	b913      	cbnz	r3, 8007d30 <iprintf+0x14>
 8007d2a:	4620      	mov	r0, r4
 8007d2c:	f000 fa5e 	bl	80081ec <__sinit>
 8007d30:	ab05      	add	r3, sp, #20
 8007d32:	9a04      	ldr	r2, [sp, #16]
 8007d34:	68a1      	ldr	r1, [r4, #8]
 8007d36:	9301      	str	r3, [sp, #4]
 8007d38:	4620      	mov	r0, r4
 8007d3a:	f000 fc2f 	bl	800859c <_vfiprintf_r>
 8007d3e:	b002      	add	sp, #8
 8007d40:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8007d44:	b004      	add	sp, #16
 8007d46:	4770      	bx	lr
 8007d48:	200000a0 	.word	0x200000a0

08007d4c <_puts_r>:
 8007d4c:	b570      	push	{r4, r5, r6, lr}
 8007d4e:	460e      	mov	r6, r1
 8007d50:	4605      	mov	r5, r0
 8007d52:	b118      	cbz	r0, 8007d5c <_puts_r+0x10>
 8007d54:	6983      	ldr	r3, [r0, #24]
 8007d56:	b90b      	cbnz	r3, 8007d5c <_puts_r+0x10>
 8007d58:	f000 fa48 	bl	80081ec <__sinit>
 8007d5c:	69ab      	ldr	r3, [r5, #24]
 8007d5e:	68ac      	ldr	r4, [r5, #8]
 8007d60:	b913      	cbnz	r3, 8007d68 <_puts_r+0x1c>
 8007d62:	4628      	mov	r0, r5
 8007d64:	f000 fa42 	bl	80081ec <__sinit>
 8007d68:	4b2c      	ldr	r3, [pc, #176]	; (8007e1c <_puts_r+0xd0>)
 8007d6a:	429c      	cmp	r4, r3
 8007d6c:	d120      	bne.n	8007db0 <_puts_r+0x64>
 8007d6e:	686c      	ldr	r4, [r5, #4]
 8007d70:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8007d72:	07db      	lsls	r3, r3, #31
 8007d74:	d405      	bmi.n	8007d82 <_puts_r+0x36>
 8007d76:	89a3      	ldrh	r3, [r4, #12]
 8007d78:	0598      	lsls	r0, r3, #22
 8007d7a:	d402      	bmi.n	8007d82 <_puts_r+0x36>
 8007d7c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8007d7e:	f000 fad3 	bl	8008328 <__retarget_lock_acquire_recursive>
 8007d82:	89a3      	ldrh	r3, [r4, #12]
 8007d84:	0719      	lsls	r1, r3, #28
 8007d86:	d51d      	bpl.n	8007dc4 <_puts_r+0x78>
 8007d88:	6923      	ldr	r3, [r4, #16]
 8007d8a:	b1db      	cbz	r3, 8007dc4 <_puts_r+0x78>
 8007d8c:	3e01      	subs	r6, #1
 8007d8e:	68a3      	ldr	r3, [r4, #8]
 8007d90:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 8007d94:	3b01      	subs	r3, #1
 8007d96:	60a3      	str	r3, [r4, #8]
 8007d98:	bb39      	cbnz	r1, 8007dea <_puts_r+0x9e>
 8007d9a:	2b00      	cmp	r3, #0
 8007d9c:	da38      	bge.n	8007e10 <_puts_r+0xc4>
 8007d9e:	4622      	mov	r2, r4
 8007da0:	210a      	movs	r1, #10
 8007da2:	4628      	mov	r0, r5
 8007da4:	f000 f848 	bl	8007e38 <__swbuf_r>
 8007da8:	3001      	adds	r0, #1
 8007daa:	d011      	beq.n	8007dd0 <_puts_r+0x84>
 8007dac:	250a      	movs	r5, #10
 8007dae:	e011      	b.n	8007dd4 <_puts_r+0x88>
 8007db0:	4b1b      	ldr	r3, [pc, #108]	; (8007e20 <_puts_r+0xd4>)
 8007db2:	429c      	cmp	r4, r3
 8007db4:	d101      	bne.n	8007dba <_puts_r+0x6e>
 8007db6:	68ac      	ldr	r4, [r5, #8]
 8007db8:	e7da      	b.n	8007d70 <_puts_r+0x24>
 8007dba:	4b1a      	ldr	r3, [pc, #104]	; (8007e24 <_puts_r+0xd8>)
 8007dbc:	429c      	cmp	r4, r3
 8007dbe:	bf08      	it	eq
 8007dc0:	68ec      	ldreq	r4, [r5, #12]
 8007dc2:	e7d5      	b.n	8007d70 <_puts_r+0x24>
 8007dc4:	4621      	mov	r1, r4
 8007dc6:	4628      	mov	r0, r5
 8007dc8:	f000 f888 	bl	8007edc <__swsetup_r>
 8007dcc:	2800      	cmp	r0, #0
 8007dce:	d0dd      	beq.n	8007d8c <_puts_r+0x40>
 8007dd0:	f04f 35ff 	mov.w	r5, #4294967295
 8007dd4:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8007dd6:	07da      	lsls	r2, r3, #31
 8007dd8:	d405      	bmi.n	8007de6 <_puts_r+0x9a>
 8007dda:	89a3      	ldrh	r3, [r4, #12]
 8007ddc:	059b      	lsls	r3, r3, #22
 8007dde:	d402      	bmi.n	8007de6 <_puts_r+0x9a>
 8007de0:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8007de2:	f000 faa2 	bl	800832a <__retarget_lock_release_recursive>
 8007de6:	4628      	mov	r0, r5
 8007de8:	bd70      	pop	{r4, r5, r6, pc}
 8007dea:	2b00      	cmp	r3, #0
 8007dec:	da04      	bge.n	8007df8 <_puts_r+0xac>
 8007dee:	69a2      	ldr	r2, [r4, #24]
 8007df0:	429a      	cmp	r2, r3
 8007df2:	dc06      	bgt.n	8007e02 <_puts_r+0xb6>
 8007df4:	290a      	cmp	r1, #10
 8007df6:	d004      	beq.n	8007e02 <_puts_r+0xb6>
 8007df8:	6823      	ldr	r3, [r4, #0]
 8007dfa:	1c5a      	adds	r2, r3, #1
 8007dfc:	6022      	str	r2, [r4, #0]
 8007dfe:	7019      	strb	r1, [r3, #0]
 8007e00:	e7c5      	b.n	8007d8e <_puts_r+0x42>
 8007e02:	4622      	mov	r2, r4
 8007e04:	4628      	mov	r0, r5
 8007e06:	f000 f817 	bl	8007e38 <__swbuf_r>
 8007e0a:	3001      	adds	r0, #1
 8007e0c:	d1bf      	bne.n	8007d8e <_puts_r+0x42>
 8007e0e:	e7df      	b.n	8007dd0 <_puts_r+0x84>
 8007e10:	6823      	ldr	r3, [r4, #0]
 8007e12:	250a      	movs	r5, #10
 8007e14:	1c5a      	adds	r2, r3, #1
 8007e16:	6022      	str	r2, [r4, #0]
 8007e18:	701d      	strb	r5, [r3, #0]
 8007e1a:	e7db      	b.n	8007dd4 <_puts_r+0x88>
 8007e1c:	08008e70 	.word	0x08008e70
 8007e20:	08008e90 	.word	0x08008e90
 8007e24:	08008e50 	.word	0x08008e50

08007e28 <puts>:
 8007e28:	4b02      	ldr	r3, [pc, #8]	; (8007e34 <puts+0xc>)
 8007e2a:	4601      	mov	r1, r0
 8007e2c:	6818      	ldr	r0, [r3, #0]
 8007e2e:	f7ff bf8d 	b.w	8007d4c <_puts_r>
 8007e32:	bf00      	nop
 8007e34:	200000a0 	.word	0x200000a0

08007e38 <__swbuf_r>:
 8007e38:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007e3a:	460e      	mov	r6, r1
 8007e3c:	4614      	mov	r4, r2
 8007e3e:	4605      	mov	r5, r0
 8007e40:	b118      	cbz	r0, 8007e4a <__swbuf_r+0x12>
 8007e42:	6983      	ldr	r3, [r0, #24]
 8007e44:	b90b      	cbnz	r3, 8007e4a <__swbuf_r+0x12>
 8007e46:	f000 f9d1 	bl	80081ec <__sinit>
 8007e4a:	4b21      	ldr	r3, [pc, #132]	; (8007ed0 <__swbuf_r+0x98>)
 8007e4c:	429c      	cmp	r4, r3
 8007e4e:	d12b      	bne.n	8007ea8 <__swbuf_r+0x70>
 8007e50:	686c      	ldr	r4, [r5, #4]
 8007e52:	69a3      	ldr	r3, [r4, #24]
 8007e54:	60a3      	str	r3, [r4, #8]
 8007e56:	89a3      	ldrh	r3, [r4, #12]
 8007e58:	071a      	lsls	r2, r3, #28
 8007e5a:	d52f      	bpl.n	8007ebc <__swbuf_r+0x84>
 8007e5c:	6923      	ldr	r3, [r4, #16]
 8007e5e:	b36b      	cbz	r3, 8007ebc <__swbuf_r+0x84>
 8007e60:	6923      	ldr	r3, [r4, #16]
 8007e62:	6820      	ldr	r0, [r4, #0]
 8007e64:	1ac0      	subs	r0, r0, r3
 8007e66:	6963      	ldr	r3, [r4, #20]
 8007e68:	b2f6      	uxtb	r6, r6
 8007e6a:	4283      	cmp	r3, r0
 8007e6c:	4637      	mov	r7, r6
 8007e6e:	dc04      	bgt.n	8007e7a <__swbuf_r+0x42>
 8007e70:	4621      	mov	r1, r4
 8007e72:	4628      	mov	r0, r5
 8007e74:	f000 f926 	bl	80080c4 <_fflush_r>
 8007e78:	bb30      	cbnz	r0, 8007ec8 <__swbuf_r+0x90>
 8007e7a:	68a3      	ldr	r3, [r4, #8]
 8007e7c:	3b01      	subs	r3, #1
 8007e7e:	60a3      	str	r3, [r4, #8]
 8007e80:	6823      	ldr	r3, [r4, #0]
 8007e82:	1c5a      	adds	r2, r3, #1
 8007e84:	6022      	str	r2, [r4, #0]
 8007e86:	701e      	strb	r6, [r3, #0]
 8007e88:	6963      	ldr	r3, [r4, #20]
 8007e8a:	3001      	adds	r0, #1
 8007e8c:	4283      	cmp	r3, r0
 8007e8e:	d004      	beq.n	8007e9a <__swbuf_r+0x62>
 8007e90:	89a3      	ldrh	r3, [r4, #12]
 8007e92:	07db      	lsls	r3, r3, #31
 8007e94:	d506      	bpl.n	8007ea4 <__swbuf_r+0x6c>
 8007e96:	2e0a      	cmp	r6, #10
 8007e98:	d104      	bne.n	8007ea4 <__swbuf_r+0x6c>
 8007e9a:	4621      	mov	r1, r4
 8007e9c:	4628      	mov	r0, r5
 8007e9e:	f000 f911 	bl	80080c4 <_fflush_r>
 8007ea2:	b988      	cbnz	r0, 8007ec8 <__swbuf_r+0x90>
 8007ea4:	4638      	mov	r0, r7
 8007ea6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8007ea8:	4b0a      	ldr	r3, [pc, #40]	; (8007ed4 <__swbuf_r+0x9c>)
 8007eaa:	429c      	cmp	r4, r3
 8007eac:	d101      	bne.n	8007eb2 <__swbuf_r+0x7a>
 8007eae:	68ac      	ldr	r4, [r5, #8]
 8007eb0:	e7cf      	b.n	8007e52 <__swbuf_r+0x1a>
 8007eb2:	4b09      	ldr	r3, [pc, #36]	; (8007ed8 <__swbuf_r+0xa0>)
 8007eb4:	429c      	cmp	r4, r3
 8007eb6:	bf08      	it	eq
 8007eb8:	68ec      	ldreq	r4, [r5, #12]
 8007eba:	e7ca      	b.n	8007e52 <__swbuf_r+0x1a>
 8007ebc:	4621      	mov	r1, r4
 8007ebe:	4628      	mov	r0, r5
 8007ec0:	f000 f80c 	bl	8007edc <__swsetup_r>
 8007ec4:	2800      	cmp	r0, #0
 8007ec6:	d0cb      	beq.n	8007e60 <__swbuf_r+0x28>
 8007ec8:	f04f 37ff 	mov.w	r7, #4294967295
 8007ecc:	e7ea      	b.n	8007ea4 <__swbuf_r+0x6c>
 8007ece:	bf00      	nop
 8007ed0:	08008e70 	.word	0x08008e70
 8007ed4:	08008e90 	.word	0x08008e90
 8007ed8:	08008e50 	.word	0x08008e50

08007edc <__swsetup_r>:
 8007edc:	4b32      	ldr	r3, [pc, #200]	; (8007fa8 <__swsetup_r+0xcc>)
 8007ede:	b570      	push	{r4, r5, r6, lr}
 8007ee0:	681d      	ldr	r5, [r3, #0]
 8007ee2:	4606      	mov	r6, r0
 8007ee4:	460c      	mov	r4, r1
 8007ee6:	b125      	cbz	r5, 8007ef2 <__swsetup_r+0x16>
 8007ee8:	69ab      	ldr	r3, [r5, #24]
 8007eea:	b913      	cbnz	r3, 8007ef2 <__swsetup_r+0x16>
 8007eec:	4628      	mov	r0, r5
 8007eee:	f000 f97d 	bl	80081ec <__sinit>
 8007ef2:	4b2e      	ldr	r3, [pc, #184]	; (8007fac <__swsetup_r+0xd0>)
 8007ef4:	429c      	cmp	r4, r3
 8007ef6:	d10f      	bne.n	8007f18 <__swsetup_r+0x3c>
 8007ef8:	686c      	ldr	r4, [r5, #4]
 8007efa:	89a3      	ldrh	r3, [r4, #12]
 8007efc:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8007f00:	0719      	lsls	r1, r3, #28
 8007f02:	d42c      	bmi.n	8007f5e <__swsetup_r+0x82>
 8007f04:	06dd      	lsls	r5, r3, #27
 8007f06:	d411      	bmi.n	8007f2c <__swsetup_r+0x50>
 8007f08:	2309      	movs	r3, #9
 8007f0a:	6033      	str	r3, [r6, #0]
 8007f0c:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8007f10:	81a3      	strh	r3, [r4, #12]
 8007f12:	f04f 30ff 	mov.w	r0, #4294967295
 8007f16:	e03e      	b.n	8007f96 <__swsetup_r+0xba>
 8007f18:	4b25      	ldr	r3, [pc, #148]	; (8007fb0 <__swsetup_r+0xd4>)
 8007f1a:	429c      	cmp	r4, r3
 8007f1c:	d101      	bne.n	8007f22 <__swsetup_r+0x46>
 8007f1e:	68ac      	ldr	r4, [r5, #8]
 8007f20:	e7eb      	b.n	8007efa <__swsetup_r+0x1e>
 8007f22:	4b24      	ldr	r3, [pc, #144]	; (8007fb4 <__swsetup_r+0xd8>)
 8007f24:	429c      	cmp	r4, r3
 8007f26:	bf08      	it	eq
 8007f28:	68ec      	ldreq	r4, [r5, #12]
 8007f2a:	e7e6      	b.n	8007efa <__swsetup_r+0x1e>
 8007f2c:	0758      	lsls	r0, r3, #29
 8007f2e:	d512      	bpl.n	8007f56 <__swsetup_r+0x7a>
 8007f30:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8007f32:	b141      	cbz	r1, 8007f46 <__swsetup_r+0x6a>
 8007f34:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8007f38:	4299      	cmp	r1, r3
 8007f3a:	d002      	beq.n	8007f42 <__swsetup_r+0x66>
 8007f3c:	4630      	mov	r0, r6
 8007f3e:	f000 fa59 	bl	80083f4 <_free_r>
 8007f42:	2300      	movs	r3, #0
 8007f44:	6363      	str	r3, [r4, #52]	; 0x34
 8007f46:	89a3      	ldrh	r3, [r4, #12]
 8007f48:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8007f4c:	81a3      	strh	r3, [r4, #12]
 8007f4e:	2300      	movs	r3, #0
 8007f50:	6063      	str	r3, [r4, #4]
 8007f52:	6923      	ldr	r3, [r4, #16]
 8007f54:	6023      	str	r3, [r4, #0]
 8007f56:	89a3      	ldrh	r3, [r4, #12]
 8007f58:	f043 0308 	orr.w	r3, r3, #8
 8007f5c:	81a3      	strh	r3, [r4, #12]
 8007f5e:	6923      	ldr	r3, [r4, #16]
 8007f60:	b94b      	cbnz	r3, 8007f76 <__swsetup_r+0x9a>
 8007f62:	89a3      	ldrh	r3, [r4, #12]
 8007f64:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8007f68:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8007f6c:	d003      	beq.n	8007f76 <__swsetup_r+0x9a>
 8007f6e:	4621      	mov	r1, r4
 8007f70:	4630      	mov	r0, r6
 8007f72:	f000 f9ff 	bl	8008374 <__smakebuf_r>
 8007f76:	89a0      	ldrh	r0, [r4, #12]
 8007f78:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8007f7c:	f010 0301 	ands.w	r3, r0, #1
 8007f80:	d00a      	beq.n	8007f98 <__swsetup_r+0xbc>
 8007f82:	2300      	movs	r3, #0
 8007f84:	60a3      	str	r3, [r4, #8]
 8007f86:	6963      	ldr	r3, [r4, #20]
 8007f88:	425b      	negs	r3, r3
 8007f8a:	61a3      	str	r3, [r4, #24]
 8007f8c:	6923      	ldr	r3, [r4, #16]
 8007f8e:	b943      	cbnz	r3, 8007fa2 <__swsetup_r+0xc6>
 8007f90:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8007f94:	d1ba      	bne.n	8007f0c <__swsetup_r+0x30>
 8007f96:	bd70      	pop	{r4, r5, r6, pc}
 8007f98:	0781      	lsls	r1, r0, #30
 8007f9a:	bf58      	it	pl
 8007f9c:	6963      	ldrpl	r3, [r4, #20]
 8007f9e:	60a3      	str	r3, [r4, #8]
 8007fa0:	e7f4      	b.n	8007f8c <__swsetup_r+0xb0>
 8007fa2:	2000      	movs	r0, #0
 8007fa4:	e7f7      	b.n	8007f96 <__swsetup_r+0xba>
 8007fa6:	bf00      	nop
 8007fa8:	200000a0 	.word	0x200000a0
 8007fac:	08008e70 	.word	0x08008e70
 8007fb0:	08008e90 	.word	0x08008e90
 8007fb4:	08008e50 	.word	0x08008e50

08007fb8 <__sflush_r>:
 8007fb8:	898a      	ldrh	r2, [r1, #12]
 8007fba:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007fbe:	4605      	mov	r5, r0
 8007fc0:	0710      	lsls	r0, r2, #28
 8007fc2:	460c      	mov	r4, r1
 8007fc4:	d458      	bmi.n	8008078 <__sflush_r+0xc0>
 8007fc6:	684b      	ldr	r3, [r1, #4]
 8007fc8:	2b00      	cmp	r3, #0
 8007fca:	dc05      	bgt.n	8007fd8 <__sflush_r+0x20>
 8007fcc:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8007fce:	2b00      	cmp	r3, #0
 8007fd0:	dc02      	bgt.n	8007fd8 <__sflush_r+0x20>
 8007fd2:	2000      	movs	r0, #0
 8007fd4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8007fd8:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8007fda:	2e00      	cmp	r6, #0
 8007fdc:	d0f9      	beq.n	8007fd2 <__sflush_r+0x1a>
 8007fde:	2300      	movs	r3, #0
 8007fe0:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8007fe4:	682f      	ldr	r7, [r5, #0]
 8007fe6:	602b      	str	r3, [r5, #0]
 8007fe8:	d032      	beq.n	8008050 <__sflush_r+0x98>
 8007fea:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8007fec:	89a3      	ldrh	r3, [r4, #12]
 8007fee:	075a      	lsls	r2, r3, #29
 8007ff0:	d505      	bpl.n	8007ffe <__sflush_r+0x46>
 8007ff2:	6863      	ldr	r3, [r4, #4]
 8007ff4:	1ac0      	subs	r0, r0, r3
 8007ff6:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8007ff8:	b10b      	cbz	r3, 8007ffe <__sflush_r+0x46>
 8007ffa:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8007ffc:	1ac0      	subs	r0, r0, r3
 8007ffe:	2300      	movs	r3, #0
 8008000:	4602      	mov	r2, r0
 8008002:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8008004:	6a21      	ldr	r1, [r4, #32]
 8008006:	4628      	mov	r0, r5
 8008008:	47b0      	blx	r6
 800800a:	1c43      	adds	r3, r0, #1
 800800c:	89a3      	ldrh	r3, [r4, #12]
 800800e:	d106      	bne.n	800801e <__sflush_r+0x66>
 8008010:	6829      	ldr	r1, [r5, #0]
 8008012:	291d      	cmp	r1, #29
 8008014:	d82c      	bhi.n	8008070 <__sflush_r+0xb8>
 8008016:	4a2a      	ldr	r2, [pc, #168]	; (80080c0 <__sflush_r+0x108>)
 8008018:	40ca      	lsrs	r2, r1
 800801a:	07d6      	lsls	r6, r2, #31
 800801c:	d528      	bpl.n	8008070 <__sflush_r+0xb8>
 800801e:	2200      	movs	r2, #0
 8008020:	6062      	str	r2, [r4, #4]
 8008022:	04d9      	lsls	r1, r3, #19
 8008024:	6922      	ldr	r2, [r4, #16]
 8008026:	6022      	str	r2, [r4, #0]
 8008028:	d504      	bpl.n	8008034 <__sflush_r+0x7c>
 800802a:	1c42      	adds	r2, r0, #1
 800802c:	d101      	bne.n	8008032 <__sflush_r+0x7a>
 800802e:	682b      	ldr	r3, [r5, #0]
 8008030:	b903      	cbnz	r3, 8008034 <__sflush_r+0x7c>
 8008032:	6560      	str	r0, [r4, #84]	; 0x54
 8008034:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8008036:	602f      	str	r7, [r5, #0]
 8008038:	2900      	cmp	r1, #0
 800803a:	d0ca      	beq.n	8007fd2 <__sflush_r+0x1a>
 800803c:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8008040:	4299      	cmp	r1, r3
 8008042:	d002      	beq.n	800804a <__sflush_r+0x92>
 8008044:	4628      	mov	r0, r5
 8008046:	f000 f9d5 	bl	80083f4 <_free_r>
 800804a:	2000      	movs	r0, #0
 800804c:	6360      	str	r0, [r4, #52]	; 0x34
 800804e:	e7c1      	b.n	8007fd4 <__sflush_r+0x1c>
 8008050:	6a21      	ldr	r1, [r4, #32]
 8008052:	2301      	movs	r3, #1
 8008054:	4628      	mov	r0, r5
 8008056:	47b0      	blx	r6
 8008058:	1c41      	adds	r1, r0, #1
 800805a:	d1c7      	bne.n	8007fec <__sflush_r+0x34>
 800805c:	682b      	ldr	r3, [r5, #0]
 800805e:	2b00      	cmp	r3, #0
 8008060:	d0c4      	beq.n	8007fec <__sflush_r+0x34>
 8008062:	2b1d      	cmp	r3, #29
 8008064:	d001      	beq.n	800806a <__sflush_r+0xb2>
 8008066:	2b16      	cmp	r3, #22
 8008068:	d101      	bne.n	800806e <__sflush_r+0xb6>
 800806a:	602f      	str	r7, [r5, #0]
 800806c:	e7b1      	b.n	8007fd2 <__sflush_r+0x1a>
 800806e:	89a3      	ldrh	r3, [r4, #12]
 8008070:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8008074:	81a3      	strh	r3, [r4, #12]
 8008076:	e7ad      	b.n	8007fd4 <__sflush_r+0x1c>
 8008078:	690f      	ldr	r7, [r1, #16]
 800807a:	2f00      	cmp	r7, #0
 800807c:	d0a9      	beq.n	8007fd2 <__sflush_r+0x1a>
 800807e:	0793      	lsls	r3, r2, #30
 8008080:	680e      	ldr	r6, [r1, #0]
 8008082:	bf08      	it	eq
 8008084:	694b      	ldreq	r3, [r1, #20]
 8008086:	600f      	str	r7, [r1, #0]
 8008088:	bf18      	it	ne
 800808a:	2300      	movne	r3, #0
 800808c:	eba6 0807 	sub.w	r8, r6, r7
 8008090:	608b      	str	r3, [r1, #8]
 8008092:	f1b8 0f00 	cmp.w	r8, #0
 8008096:	dd9c      	ble.n	8007fd2 <__sflush_r+0x1a>
 8008098:	6a21      	ldr	r1, [r4, #32]
 800809a:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 800809c:	4643      	mov	r3, r8
 800809e:	463a      	mov	r2, r7
 80080a0:	4628      	mov	r0, r5
 80080a2:	47b0      	blx	r6
 80080a4:	2800      	cmp	r0, #0
 80080a6:	dc06      	bgt.n	80080b6 <__sflush_r+0xfe>
 80080a8:	89a3      	ldrh	r3, [r4, #12]
 80080aa:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80080ae:	81a3      	strh	r3, [r4, #12]
 80080b0:	f04f 30ff 	mov.w	r0, #4294967295
 80080b4:	e78e      	b.n	8007fd4 <__sflush_r+0x1c>
 80080b6:	4407      	add	r7, r0
 80080b8:	eba8 0800 	sub.w	r8, r8, r0
 80080bc:	e7e9      	b.n	8008092 <__sflush_r+0xda>
 80080be:	bf00      	nop
 80080c0:	20400001 	.word	0x20400001

080080c4 <_fflush_r>:
 80080c4:	b538      	push	{r3, r4, r5, lr}
 80080c6:	690b      	ldr	r3, [r1, #16]
 80080c8:	4605      	mov	r5, r0
 80080ca:	460c      	mov	r4, r1
 80080cc:	b913      	cbnz	r3, 80080d4 <_fflush_r+0x10>
 80080ce:	2500      	movs	r5, #0
 80080d0:	4628      	mov	r0, r5
 80080d2:	bd38      	pop	{r3, r4, r5, pc}
 80080d4:	b118      	cbz	r0, 80080de <_fflush_r+0x1a>
 80080d6:	6983      	ldr	r3, [r0, #24]
 80080d8:	b90b      	cbnz	r3, 80080de <_fflush_r+0x1a>
 80080da:	f000 f887 	bl	80081ec <__sinit>
 80080de:	4b14      	ldr	r3, [pc, #80]	; (8008130 <_fflush_r+0x6c>)
 80080e0:	429c      	cmp	r4, r3
 80080e2:	d11b      	bne.n	800811c <_fflush_r+0x58>
 80080e4:	686c      	ldr	r4, [r5, #4]
 80080e6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80080ea:	2b00      	cmp	r3, #0
 80080ec:	d0ef      	beq.n	80080ce <_fflush_r+0xa>
 80080ee:	6e62      	ldr	r2, [r4, #100]	; 0x64
 80080f0:	07d0      	lsls	r0, r2, #31
 80080f2:	d404      	bmi.n	80080fe <_fflush_r+0x3a>
 80080f4:	0599      	lsls	r1, r3, #22
 80080f6:	d402      	bmi.n	80080fe <_fflush_r+0x3a>
 80080f8:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80080fa:	f000 f915 	bl	8008328 <__retarget_lock_acquire_recursive>
 80080fe:	4628      	mov	r0, r5
 8008100:	4621      	mov	r1, r4
 8008102:	f7ff ff59 	bl	8007fb8 <__sflush_r>
 8008106:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8008108:	07da      	lsls	r2, r3, #31
 800810a:	4605      	mov	r5, r0
 800810c:	d4e0      	bmi.n	80080d0 <_fflush_r+0xc>
 800810e:	89a3      	ldrh	r3, [r4, #12]
 8008110:	059b      	lsls	r3, r3, #22
 8008112:	d4dd      	bmi.n	80080d0 <_fflush_r+0xc>
 8008114:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8008116:	f000 f908 	bl	800832a <__retarget_lock_release_recursive>
 800811a:	e7d9      	b.n	80080d0 <_fflush_r+0xc>
 800811c:	4b05      	ldr	r3, [pc, #20]	; (8008134 <_fflush_r+0x70>)
 800811e:	429c      	cmp	r4, r3
 8008120:	d101      	bne.n	8008126 <_fflush_r+0x62>
 8008122:	68ac      	ldr	r4, [r5, #8]
 8008124:	e7df      	b.n	80080e6 <_fflush_r+0x22>
 8008126:	4b04      	ldr	r3, [pc, #16]	; (8008138 <_fflush_r+0x74>)
 8008128:	429c      	cmp	r4, r3
 800812a:	bf08      	it	eq
 800812c:	68ec      	ldreq	r4, [r5, #12]
 800812e:	e7da      	b.n	80080e6 <_fflush_r+0x22>
 8008130:	08008e70 	.word	0x08008e70
 8008134:	08008e90 	.word	0x08008e90
 8008138:	08008e50 	.word	0x08008e50

0800813c <std>:
 800813c:	2300      	movs	r3, #0
 800813e:	b510      	push	{r4, lr}
 8008140:	4604      	mov	r4, r0
 8008142:	e9c0 3300 	strd	r3, r3, [r0]
 8008146:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800814a:	6083      	str	r3, [r0, #8]
 800814c:	8181      	strh	r1, [r0, #12]
 800814e:	6643      	str	r3, [r0, #100]	; 0x64
 8008150:	81c2      	strh	r2, [r0, #14]
 8008152:	6183      	str	r3, [r0, #24]
 8008154:	4619      	mov	r1, r3
 8008156:	2208      	movs	r2, #8
 8008158:	305c      	adds	r0, #92	; 0x5c
 800815a:	f7ff fdd7 	bl	8007d0c <memset>
 800815e:	4b05      	ldr	r3, [pc, #20]	; (8008174 <std+0x38>)
 8008160:	6263      	str	r3, [r4, #36]	; 0x24
 8008162:	4b05      	ldr	r3, [pc, #20]	; (8008178 <std+0x3c>)
 8008164:	62a3      	str	r3, [r4, #40]	; 0x28
 8008166:	4b05      	ldr	r3, [pc, #20]	; (800817c <std+0x40>)
 8008168:	62e3      	str	r3, [r4, #44]	; 0x2c
 800816a:	4b05      	ldr	r3, [pc, #20]	; (8008180 <std+0x44>)
 800816c:	6224      	str	r4, [r4, #32]
 800816e:	6323      	str	r3, [r4, #48]	; 0x30
 8008170:	bd10      	pop	{r4, pc}
 8008172:	bf00      	nop
 8008174:	08008b45 	.word	0x08008b45
 8008178:	08008b67 	.word	0x08008b67
 800817c:	08008b9f 	.word	0x08008b9f
 8008180:	08008bc3 	.word	0x08008bc3

08008184 <_cleanup_r>:
 8008184:	4901      	ldr	r1, [pc, #4]	; (800818c <_cleanup_r+0x8>)
 8008186:	f000 b8af 	b.w	80082e8 <_fwalk_reent>
 800818a:	bf00      	nop
 800818c:	080080c5 	.word	0x080080c5

08008190 <__sfmoreglue>:
 8008190:	b570      	push	{r4, r5, r6, lr}
 8008192:	1e4a      	subs	r2, r1, #1
 8008194:	2568      	movs	r5, #104	; 0x68
 8008196:	4355      	muls	r5, r2
 8008198:	460e      	mov	r6, r1
 800819a:	f105 0174 	add.w	r1, r5, #116	; 0x74
 800819e:	f000 f979 	bl	8008494 <_malloc_r>
 80081a2:	4604      	mov	r4, r0
 80081a4:	b140      	cbz	r0, 80081b8 <__sfmoreglue+0x28>
 80081a6:	2100      	movs	r1, #0
 80081a8:	e9c0 1600 	strd	r1, r6, [r0]
 80081ac:	300c      	adds	r0, #12
 80081ae:	60a0      	str	r0, [r4, #8]
 80081b0:	f105 0268 	add.w	r2, r5, #104	; 0x68
 80081b4:	f7ff fdaa 	bl	8007d0c <memset>
 80081b8:	4620      	mov	r0, r4
 80081ba:	bd70      	pop	{r4, r5, r6, pc}

080081bc <__sfp_lock_acquire>:
 80081bc:	4801      	ldr	r0, [pc, #4]	; (80081c4 <__sfp_lock_acquire+0x8>)
 80081be:	f000 b8b3 	b.w	8008328 <__retarget_lock_acquire_recursive>
 80081c2:	bf00      	nop
 80081c4:	20002618 	.word	0x20002618

080081c8 <__sfp_lock_release>:
 80081c8:	4801      	ldr	r0, [pc, #4]	; (80081d0 <__sfp_lock_release+0x8>)
 80081ca:	f000 b8ae 	b.w	800832a <__retarget_lock_release_recursive>
 80081ce:	bf00      	nop
 80081d0:	20002618 	.word	0x20002618

080081d4 <__sinit_lock_acquire>:
 80081d4:	4801      	ldr	r0, [pc, #4]	; (80081dc <__sinit_lock_acquire+0x8>)
 80081d6:	f000 b8a7 	b.w	8008328 <__retarget_lock_acquire_recursive>
 80081da:	bf00      	nop
 80081dc:	20002613 	.word	0x20002613

080081e0 <__sinit_lock_release>:
 80081e0:	4801      	ldr	r0, [pc, #4]	; (80081e8 <__sinit_lock_release+0x8>)
 80081e2:	f000 b8a2 	b.w	800832a <__retarget_lock_release_recursive>
 80081e6:	bf00      	nop
 80081e8:	20002613 	.word	0x20002613

080081ec <__sinit>:
 80081ec:	b510      	push	{r4, lr}
 80081ee:	4604      	mov	r4, r0
 80081f0:	f7ff fff0 	bl	80081d4 <__sinit_lock_acquire>
 80081f4:	69a3      	ldr	r3, [r4, #24]
 80081f6:	b11b      	cbz	r3, 8008200 <__sinit+0x14>
 80081f8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80081fc:	f7ff bff0 	b.w	80081e0 <__sinit_lock_release>
 8008200:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8008204:	6523      	str	r3, [r4, #80]	; 0x50
 8008206:	4b13      	ldr	r3, [pc, #76]	; (8008254 <__sinit+0x68>)
 8008208:	4a13      	ldr	r2, [pc, #76]	; (8008258 <__sinit+0x6c>)
 800820a:	681b      	ldr	r3, [r3, #0]
 800820c:	62a2      	str	r2, [r4, #40]	; 0x28
 800820e:	42a3      	cmp	r3, r4
 8008210:	bf04      	itt	eq
 8008212:	2301      	moveq	r3, #1
 8008214:	61a3      	streq	r3, [r4, #24]
 8008216:	4620      	mov	r0, r4
 8008218:	f000 f820 	bl	800825c <__sfp>
 800821c:	6060      	str	r0, [r4, #4]
 800821e:	4620      	mov	r0, r4
 8008220:	f000 f81c 	bl	800825c <__sfp>
 8008224:	60a0      	str	r0, [r4, #8]
 8008226:	4620      	mov	r0, r4
 8008228:	f000 f818 	bl	800825c <__sfp>
 800822c:	2200      	movs	r2, #0
 800822e:	60e0      	str	r0, [r4, #12]
 8008230:	2104      	movs	r1, #4
 8008232:	6860      	ldr	r0, [r4, #4]
 8008234:	f7ff ff82 	bl	800813c <std>
 8008238:	68a0      	ldr	r0, [r4, #8]
 800823a:	2201      	movs	r2, #1
 800823c:	2109      	movs	r1, #9
 800823e:	f7ff ff7d 	bl	800813c <std>
 8008242:	68e0      	ldr	r0, [r4, #12]
 8008244:	2202      	movs	r2, #2
 8008246:	2112      	movs	r1, #18
 8008248:	f7ff ff78 	bl	800813c <std>
 800824c:	2301      	movs	r3, #1
 800824e:	61a3      	str	r3, [r4, #24]
 8008250:	e7d2      	b.n	80081f8 <__sinit+0xc>
 8008252:	bf00      	nop
 8008254:	08008e4c 	.word	0x08008e4c
 8008258:	08008185 	.word	0x08008185

0800825c <__sfp>:
 800825c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800825e:	4607      	mov	r7, r0
 8008260:	f7ff ffac 	bl	80081bc <__sfp_lock_acquire>
 8008264:	4b1e      	ldr	r3, [pc, #120]	; (80082e0 <__sfp+0x84>)
 8008266:	681e      	ldr	r6, [r3, #0]
 8008268:	69b3      	ldr	r3, [r6, #24]
 800826a:	b913      	cbnz	r3, 8008272 <__sfp+0x16>
 800826c:	4630      	mov	r0, r6
 800826e:	f7ff ffbd 	bl	80081ec <__sinit>
 8008272:	3648      	adds	r6, #72	; 0x48
 8008274:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8008278:	3b01      	subs	r3, #1
 800827a:	d503      	bpl.n	8008284 <__sfp+0x28>
 800827c:	6833      	ldr	r3, [r6, #0]
 800827e:	b30b      	cbz	r3, 80082c4 <__sfp+0x68>
 8008280:	6836      	ldr	r6, [r6, #0]
 8008282:	e7f7      	b.n	8008274 <__sfp+0x18>
 8008284:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8008288:	b9d5      	cbnz	r5, 80082c0 <__sfp+0x64>
 800828a:	4b16      	ldr	r3, [pc, #88]	; (80082e4 <__sfp+0x88>)
 800828c:	60e3      	str	r3, [r4, #12]
 800828e:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8008292:	6665      	str	r5, [r4, #100]	; 0x64
 8008294:	f000 f847 	bl	8008326 <__retarget_lock_init_recursive>
 8008298:	f7ff ff96 	bl	80081c8 <__sfp_lock_release>
 800829c:	e9c4 5501 	strd	r5, r5, [r4, #4]
 80082a0:	e9c4 5504 	strd	r5, r5, [r4, #16]
 80082a4:	6025      	str	r5, [r4, #0]
 80082a6:	61a5      	str	r5, [r4, #24]
 80082a8:	2208      	movs	r2, #8
 80082aa:	4629      	mov	r1, r5
 80082ac:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 80082b0:	f7ff fd2c 	bl	8007d0c <memset>
 80082b4:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 80082b8:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 80082bc:	4620      	mov	r0, r4
 80082be:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80082c0:	3468      	adds	r4, #104	; 0x68
 80082c2:	e7d9      	b.n	8008278 <__sfp+0x1c>
 80082c4:	2104      	movs	r1, #4
 80082c6:	4638      	mov	r0, r7
 80082c8:	f7ff ff62 	bl	8008190 <__sfmoreglue>
 80082cc:	4604      	mov	r4, r0
 80082ce:	6030      	str	r0, [r6, #0]
 80082d0:	2800      	cmp	r0, #0
 80082d2:	d1d5      	bne.n	8008280 <__sfp+0x24>
 80082d4:	f7ff ff78 	bl	80081c8 <__sfp_lock_release>
 80082d8:	230c      	movs	r3, #12
 80082da:	603b      	str	r3, [r7, #0]
 80082dc:	e7ee      	b.n	80082bc <__sfp+0x60>
 80082de:	bf00      	nop
 80082e0:	08008e4c 	.word	0x08008e4c
 80082e4:	ffff0001 	.word	0xffff0001

080082e8 <_fwalk_reent>:
 80082e8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80082ec:	4606      	mov	r6, r0
 80082ee:	4688      	mov	r8, r1
 80082f0:	f100 0448 	add.w	r4, r0, #72	; 0x48
 80082f4:	2700      	movs	r7, #0
 80082f6:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 80082fa:	f1b9 0901 	subs.w	r9, r9, #1
 80082fe:	d505      	bpl.n	800830c <_fwalk_reent+0x24>
 8008300:	6824      	ldr	r4, [r4, #0]
 8008302:	2c00      	cmp	r4, #0
 8008304:	d1f7      	bne.n	80082f6 <_fwalk_reent+0xe>
 8008306:	4638      	mov	r0, r7
 8008308:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800830c:	89ab      	ldrh	r3, [r5, #12]
 800830e:	2b01      	cmp	r3, #1
 8008310:	d907      	bls.n	8008322 <_fwalk_reent+0x3a>
 8008312:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8008316:	3301      	adds	r3, #1
 8008318:	d003      	beq.n	8008322 <_fwalk_reent+0x3a>
 800831a:	4629      	mov	r1, r5
 800831c:	4630      	mov	r0, r6
 800831e:	47c0      	blx	r8
 8008320:	4307      	orrs	r7, r0
 8008322:	3568      	adds	r5, #104	; 0x68
 8008324:	e7e9      	b.n	80082fa <_fwalk_reent+0x12>

08008326 <__retarget_lock_init_recursive>:
 8008326:	4770      	bx	lr

08008328 <__retarget_lock_acquire_recursive>:
 8008328:	4770      	bx	lr

0800832a <__retarget_lock_release_recursive>:
 800832a:	4770      	bx	lr

0800832c <__swhatbuf_r>:
 800832c:	b570      	push	{r4, r5, r6, lr}
 800832e:	460e      	mov	r6, r1
 8008330:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008334:	2900      	cmp	r1, #0
 8008336:	b096      	sub	sp, #88	; 0x58
 8008338:	4614      	mov	r4, r2
 800833a:	461d      	mov	r5, r3
 800833c:	da07      	bge.n	800834e <__swhatbuf_r+0x22>
 800833e:	2300      	movs	r3, #0
 8008340:	602b      	str	r3, [r5, #0]
 8008342:	89b3      	ldrh	r3, [r6, #12]
 8008344:	061a      	lsls	r2, r3, #24
 8008346:	d410      	bmi.n	800836a <__swhatbuf_r+0x3e>
 8008348:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800834c:	e00e      	b.n	800836c <__swhatbuf_r+0x40>
 800834e:	466a      	mov	r2, sp
 8008350:	f000 fc5e 	bl	8008c10 <_fstat_r>
 8008354:	2800      	cmp	r0, #0
 8008356:	dbf2      	blt.n	800833e <__swhatbuf_r+0x12>
 8008358:	9a01      	ldr	r2, [sp, #4]
 800835a:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 800835e:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8008362:	425a      	negs	r2, r3
 8008364:	415a      	adcs	r2, r3
 8008366:	602a      	str	r2, [r5, #0]
 8008368:	e7ee      	b.n	8008348 <__swhatbuf_r+0x1c>
 800836a:	2340      	movs	r3, #64	; 0x40
 800836c:	2000      	movs	r0, #0
 800836e:	6023      	str	r3, [r4, #0]
 8008370:	b016      	add	sp, #88	; 0x58
 8008372:	bd70      	pop	{r4, r5, r6, pc}

08008374 <__smakebuf_r>:
 8008374:	898b      	ldrh	r3, [r1, #12]
 8008376:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8008378:	079d      	lsls	r5, r3, #30
 800837a:	4606      	mov	r6, r0
 800837c:	460c      	mov	r4, r1
 800837e:	d507      	bpl.n	8008390 <__smakebuf_r+0x1c>
 8008380:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8008384:	6023      	str	r3, [r4, #0]
 8008386:	6123      	str	r3, [r4, #16]
 8008388:	2301      	movs	r3, #1
 800838a:	6163      	str	r3, [r4, #20]
 800838c:	b002      	add	sp, #8
 800838e:	bd70      	pop	{r4, r5, r6, pc}
 8008390:	ab01      	add	r3, sp, #4
 8008392:	466a      	mov	r2, sp
 8008394:	f7ff ffca 	bl	800832c <__swhatbuf_r>
 8008398:	9900      	ldr	r1, [sp, #0]
 800839a:	4605      	mov	r5, r0
 800839c:	4630      	mov	r0, r6
 800839e:	f000 f879 	bl	8008494 <_malloc_r>
 80083a2:	b948      	cbnz	r0, 80083b8 <__smakebuf_r+0x44>
 80083a4:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80083a8:	059a      	lsls	r2, r3, #22
 80083aa:	d4ef      	bmi.n	800838c <__smakebuf_r+0x18>
 80083ac:	f023 0303 	bic.w	r3, r3, #3
 80083b0:	f043 0302 	orr.w	r3, r3, #2
 80083b4:	81a3      	strh	r3, [r4, #12]
 80083b6:	e7e3      	b.n	8008380 <__smakebuf_r+0xc>
 80083b8:	4b0d      	ldr	r3, [pc, #52]	; (80083f0 <__smakebuf_r+0x7c>)
 80083ba:	62b3      	str	r3, [r6, #40]	; 0x28
 80083bc:	89a3      	ldrh	r3, [r4, #12]
 80083be:	6020      	str	r0, [r4, #0]
 80083c0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80083c4:	81a3      	strh	r3, [r4, #12]
 80083c6:	9b00      	ldr	r3, [sp, #0]
 80083c8:	6163      	str	r3, [r4, #20]
 80083ca:	9b01      	ldr	r3, [sp, #4]
 80083cc:	6120      	str	r0, [r4, #16]
 80083ce:	b15b      	cbz	r3, 80083e8 <__smakebuf_r+0x74>
 80083d0:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80083d4:	4630      	mov	r0, r6
 80083d6:	f000 fc2d 	bl	8008c34 <_isatty_r>
 80083da:	b128      	cbz	r0, 80083e8 <__smakebuf_r+0x74>
 80083dc:	89a3      	ldrh	r3, [r4, #12]
 80083de:	f023 0303 	bic.w	r3, r3, #3
 80083e2:	f043 0301 	orr.w	r3, r3, #1
 80083e6:	81a3      	strh	r3, [r4, #12]
 80083e8:	89a0      	ldrh	r0, [r4, #12]
 80083ea:	4305      	orrs	r5, r0
 80083ec:	81a5      	strh	r5, [r4, #12]
 80083ee:	e7cd      	b.n	800838c <__smakebuf_r+0x18>
 80083f0:	08008185 	.word	0x08008185

080083f4 <_free_r>:
 80083f4:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80083f6:	2900      	cmp	r1, #0
 80083f8:	d048      	beq.n	800848c <_free_r+0x98>
 80083fa:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80083fe:	9001      	str	r0, [sp, #4]
 8008400:	2b00      	cmp	r3, #0
 8008402:	f1a1 0404 	sub.w	r4, r1, #4
 8008406:	bfb8      	it	lt
 8008408:	18e4      	addlt	r4, r4, r3
 800840a:	f000 fc35 	bl	8008c78 <__malloc_lock>
 800840e:	4a20      	ldr	r2, [pc, #128]	; (8008490 <_free_r+0x9c>)
 8008410:	9801      	ldr	r0, [sp, #4]
 8008412:	6813      	ldr	r3, [r2, #0]
 8008414:	4615      	mov	r5, r2
 8008416:	b933      	cbnz	r3, 8008426 <_free_r+0x32>
 8008418:	6063      	str	r3, [r4, #4]
 800841a:	6014      	str	r4, [r2, #0]
 800841c:	b003      	add	sp, #12
 800841e:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8008422:	f000 bc2f 	b.w	8008c84 <__malloc_unlock>
 8008426:	42a3      	cmp	r3, r4
 8008428:	d90b      	bls.n	8008442 <_free_r+0x4e>
 800842a:	6821      	ldr	r1, [r4, #0]
 800842c:	1862      	adds	r2, r4, r1
 800842e:	4293      	cmp	r3, r2
 8008430:	bf04      	itt	eq
 8008432:	681a      	ldreq	r2, [r3, #0]
 8008434:	685b      	ldreq	r3, [r3, #4]
 8008436:	6063      	str	r3, [r4, #4]
 8008438:	bf04      	itt	eq
 800843a:	1852      	addeq	r2, r2, r1
 800843c:	6022      	streq	r2, [r4, #0]
 800843e:	602c      	str	r4, [r5, #0]
 8008440:	e7ec      	b.n	800841c <_free_r+0x28>
 8008442:	461a      	mov	r2, r3
 8008444:	685b      	ldr	r3, [r3, #4]
 8008446:	b10b      	cbz	r3, 800844c <_free_r+0x58>
 8008448:	42a3      	cmp	r3, r4
 800844a:	d9fa      	bls.n	8008442 <_free_r+0x4e>
 800844c:	6811      	ldr	r1, [r2, #0]
 800844e:	1855      	adds	r5, r2, r1
 8008450:	42a5      	cmp	r5, r4
 8008452:	d10b      	bne.n	800846c <_free_r+0x78>
 8008454:	6824      	ldr	r4, [r4, #0]
 8008456:	4421      	add	r1, r4
 8008458:	1854      	adds	r4, r2, r1
 800845a:	42a3      	cmp	r3, r4
 800845c:	6011      	str	r1, [r2, #0]
 800845e:	d1dd      	bne.n	800841c <_free_r+0x28>
 8008460:	681c      	ldr	r4, [r3, #0]
 8008462:	685b      	ldr	r3, [r3, #4]
 8008464:	6053      	str	r3, [r2, #4]
 8008466:	4421      	add	r1, r4
 8008468:	6011      	str	r1, [r2, #0]
 800846a:	e7d7      	b.n	800841c <_free_r+0x28>
 800846c:	d902      	bls.n	8008474 <_free_r+0x80>
 800846e:	230c      	movs	r3, #12
 8008470:	6003      	str	r3, [r0, #0]
 8008472:	e7d3      	b.n	800841c <_free_r+0x28>
 8008474:	6825      	ldr	r5, [r4, #0]
 8008476:	1961      	adds	r1, r4, r5
 8008478:	428b      	cmp	r3, r1
 800847a:	bf04      	itt	eq
 800847c:	6819      	ldreq	r1, [r3, #0]
 800847e:	685b      	ldreq	r3, [r3, #4]
 8008480:	6063      	str	r3, [r4, #4]
 8008482:	bf04      	itt	eq
 8008484:	1949      	addeq	r1, r1, r5
 8008486:	6021      	streq	r1, [r4, #0]
 8008488:	6054      	str	r4, [r2, #4]
 800848a:	e7c7      	b.n	800841c <_free_r+0x28>
 800848c:	b003      	add	sp, #12
 800848e:	bd30      	pop	{r4, r5, pc}
 8008490:	20000200 	.word	0x20000200

08008494 <_malloc_r>:
 8008494:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008496:	1ccd      	adds	r5, r1, #3
 8008498:	f025 0503 	bic.w	r5, r5, #3
 800849c:	3508      	adds	r5, #8
 800849e:	2d0c      	cmp	r5, #12
 80084a0:	bf38      	it	cc
 80084a2:	250c      	movcc	r5, #12
 80084a4:	2d00      	cmp	r5, #0
 80084a6:	4606      	mov	r6, r0
 80084a8:	db01      	blt.n	80084ae <_malloc_r+0x1a>
 80084aa:	42a9      	cmp	r1, r5
 80084ac:	d903      	bls.n	80084b6 <_malloc_r+0x22>
 80084ae:	230c      	movs	r3, #12
 80084b0:	6033      	str	r3, [r6, #0]
 80084b2:	2000      	movs	r0, #0
 80084b4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80084b6:	f000 fbdf 	bl	8008c78 <__malloc_lock>
 80084ba:	4921      	ldr	r1, [pc, #132]	; (8008540 <_malloc_r+0xac>)
 80084bc:	680a      	ldr	r2, [r1, #0]
 80084be:	4614      	mov	r4, r2
 80084c0:	b99c      	cbnz	r4, 80084ea <_malloc_r+0x56>
 80084c2:	4f20      	ldr	r7, [pc, #128]	; (8008544 <_malloc_r+0xb0>)
 80084c4:	683b      	ldr	r3, [r7, #0]
 80084c6:	b923      	cbnz	r3, 80084d2 <_malloc_r+0x3e>
 80084c8:	4621      	mov	r1, r4
 80084ca:	4630      	mov	r0, r6
 80084cc:	f000 fb2a 	bl	8008b24 <_sbrk_r>
 80084d0:	6038      	str	r0, [r7, #0]
 80084d2:	4629      	mov	r1, r5
 80084d4:	4630      	mov	r0, r6
 80084d6:	f000 fb25 	bl	8008b24 <_sbrk_r>
 80084da:	1c43      	adds	r3, r0, #1
 80084dc:	d123      	bne.n	8008526 <_malloc_r+0x92>
 80084de:	230c      	movs	r3, #12
 80084e0:	6033      	str	r3, [r6, #0]
 80084e2:	4630      	mov	r0, r6
 80084e4:	f000 fbce 	bl	8008c84 <__malloc_unlock>
 80084e8:	e7e3      	b.n	80084b2 <_malloc_r+0x1e>
 80084ea:	6823      	ldr	r3, [r4, #0]
 80084ec:	1b5b      	subs	r3, r3, r5
 80084ee:	d417      	bmi.n	8008520 <_malloc_r+0x8c>
 80084f0:	2b0b      	cmp	r3, #11
 80084f2:	d903      	bls.n	80084fc <_malloc_r+0x68>
 80084f4:	6023      	str	r3, [r4, #0]
 80084f6:	441c      	add	r4, r3
 80084f8:	6025      	str	r5, [r4, #0]
 80084fa:	e004      	b.n	8008506 <_malloc_r+0x72>
 80084fc:	6863      	ldr	r3, [r4, #4]
 80084fe:	42a2      	cmp	r2, r4
 8008500:	bf0c      	ite	eq
 8008502:	600b      	streq	r3, [r1, #0]
 8008504:	6053      	strne	r3, [r2, #4]
 8008506:	4630      	mov	r0, r6
 8008508:	f000 fbbc 	bl	8008c84 <__malloc_unlock>
 800850c:	f104 000b 	add.w	r0, r4, #11
 8008510:	1d23      	adds	r3, r4, #4
 8008512:	f020 0007 	bic.w	r0, r0, #7
 8008516:	1ac2      	subs	r2, r0, r3
 8008518:	d0cc      	beq.n	80084b4 <_malloc_r+0x20>
 800851a:	1a1b      	subs	r3, r3, r0
 800851c:	50a3      	str	r3, [r4, r2]
 800851e:	e7c9      	b.n	80084b4 <_malloc_r+0x20>
 8008520:	4622      	mov	r2, r4
 8008522:	6864      	ldr	r4, [r4, #4]
 8008524:	e7cc      	b.n	80084c0 <_malloc_r+0x2c>
 8008526:	1cc4      	adds	r4, r0, #3
 8008528:	f024 0403 	bic.w	r4, r4, #3
 800852c:	42a0      	cmp	r0, r4
 800852e:	d0e3      	beq.n	80084f8 <_malloc_r+0x64>
 8008530:	1a21      	subs	r1, r4, r0
 8008532:	4630      	mov	r0, r6
 8008534:	f000 faf6 	bl	8008b24 <_sbrk_r>
 8008538:	3001      	adds	r0, #1
 800853a:	d1dd      	bne.n	80084f8 <_malloc_r+0x64>
 800853c:	e7cf      	b.n	80084de <_malloc_r+0x4a>
 800853e:	bf00      	nop
 8008540:	20000200 	.word	0x20000200
 8008544:	20000204 	.word	0x20000204

08008548 <__sfputc_r>:
 8008548:	6893      	ldr	r3, [r2, #8]
 800854a:	3b01      	subs	r3, #1
 800854c:	2b00      	cmp	r3, #0
 800854e:	b410      	push	{r4}
 8008550:	6093      	str	r3, [r2, #8]
 8008552:	da08      	bge.n	8008566 <__sfputc_r+0x1e>
 8008554:	6994      	ldr	r4, [r2, #24]
 8008556:	42a3      	cmp	r3, r4
 8008558:	db01      	blt.n	800855e <__sfputc_r+0x16>
 800855a:	290a      	cmp	r1, #10
 800855c:	d103      	bne.n	8008566 <__sfputc_r+0x1e>
 800855e:	f85d 4b04 	ldr.w	r4, [sp], #4
 8008562:	f7ff bc69 	b.w	8007e38 <__swbuf_r>
 8008566:	6813      	ldr	r3, [r2, #0]
 8008568:	1c58      	adds	r0, r3, #1
 800856a:	6010      	str	r0, [r2, #0]
 800856c:	7019      	strb	r1, [r3, #0]
 800856e:	4608      	mov	r0, r1
 8008570:	f85d 4b04 	ldr.w	r4, [sp], #4
 8008574:	4770      	bx	lr

08008576 <__sfputs_r>:
 8008576:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008578:	4606      	mov	r6, r0
 800857a:	460f      	mov	r7, r1
 800857c:	4614      	mov	r4, r2
 800857e:	18d5      	adds	r5, r2, r3
 8008580:	42ac      	cmp	r4, r5
 8008582:	d101      	bne.n	8008588 <__sfputs_r+0x12>
 8008584:	2000      	movs	r0, #0
 8008586:	e007      	b.n	8008598 <__sfputs_r+0x22>
 8008588:	f814 1b01 	ldrb.w	r1, [r4], #1
 800858c:	463a      	mov	r2, r7
 800858e:	4630      	mov	r0, r6
 8008590:	f7ff ffda 	bl	8008548 <__sfputc_r>
 8008594:	1c43      	adds	r3, r0, #1
 8008596:	d1f3      	bne.n	8008580 <__sfputs_r+0xa>
 8008598:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800859c <_vfiprintf_r>:
 800859c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80085a0:	460d      	mov	r5, r1
 80085a2:	b09d      	sub	sp, #116	; 0x74
 80085a4:	4614      	mov	r4, r2
 80085a6:	4698      	mov	r8, r3
 80085a8:	4606      	mov	r6, r0
 80085aa:	b118      	cbz	r0, 80085b4 <_vfiprintf_r+0x18>
 80085ac:	6983      	ldr	r3, [r0, #24]
 80085ae:	b90b      	cbnz	r3, 80085b4 <_vfiprintf_r+0x18>
 80085b0:	f7ff fe1c 	bl	80081ec <__sinit>
 80085b4:	4b89      	ldr	r3, [pc, #548]	; (80087dc <_vfiprintf_r+0x240>)
 80085b6:	429d      	cmp	r5, r3
 80085b8:	d11b      	bne.n	80085f2 <_vfiprintf_r+0x56>
 80085ba:	6875      	ldr	r5, [r6, #4]
 80085bc:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80085be:	07d9      	lsls	r1, r3, #31
 80085c0:	d405      	bmi.n	80085ce <_vfiprintf_r+0x32>
 80085c2:	89ab      	ldrh	r3, [r5, #12]
 80085c4:	059a      	lsls	r2, r3, #22
 80085c6:	d402      	bmi.n	80085ce <_vfiprintf_r+0x32>
 80085c8:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80085ca:	f7ff fead 	bl	8008328 <__retarget_lock_acquire_recursive>
 80085ce:	89ab      	ldrh	r3, [r5, #12]
 80085d0:	071b      	lsls	r3, r3, #28
 80085d2:	d501      	bpl.n	80085d8 <_vfiprintf_r+0x3c>
 80085d4:	692b      	ldr	r3, [r5, #16]
 80085d6:	b9eb      	cbnz	r3, 8008614 <_vfiprintf_r+0x78>
 80085d8:	4629      	mov	r1, r5
 80085da:	4630      	mov	r0, r6
 80085dc:	f7ff fc7e 	bl	8007edc <__swsetup_r>
 80085e0:	b1c0      	cbz	r0, 8008614 <_vfiprintf_r+0x78>
 80085e2:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80085e4:	07dc      	lsls	r4, r3, #31
 80085e6:	d50e      	bpl.n	8008606 <_vfiprintf_r+0x6a>
 80085e8:	f04f 30ff 	mov.w	r0, #4294967295
 80085ec:	b01d      	add	sp, #116	; 0x74
 80085ee:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80085f2:	4b7b      	ldr	r3, [pc, #492]	; (80087e0 <_vfiprintf_r+0x244>)
 80085f4:	429d      	cmp	r5, r3
 80085f6:	d101      	bne.n	80085fc <_vfiprintf_r+0x60>
 80085f8:	68b5      	ldr	r5, [r6, #8]
 80085fa:	e7df      	b.n	80085bc <_vfiprintf_r+0x20>
 80085fc:	4b79      	ldr	r3, [pc, #484]	; (80087e4 <_vfiprintf_r+0x248>)
 80085fe:	429d      	cmp	r5, r3
 8008600:	bf08      	it	eq
 8008602:	68f5      	ldreq	r5, [r6, #12]
 8008604:	e7da      	b.n	80085bc <_vfiprintf_r+0x20>
 8008606:	89ab      	ldrh	r3, [r5, #12]
 8008608:	0598      	lsls	r0, r3, #22
 800860a:	d4ed      	bmi.n	80085e8 <_vfiprintf_r+0x4c>
 800860c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800860e:	f7ff fe8c 	bl	800832a <__retarget_lock_release_recursive>
 8008612:	e7e9      	b.n	80085e8 <_vfiprintf_r+0x4c>
 8008614:	2300      	movs	r3, #0
 8008616:	9309      	str	r3, [sp, #36]	; 0x24
 8008618:	2320      	movs	r3, #32
 800861a:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800861e:	f8cd 800c 	str.w	r8, [sp, #12]
 8008622:	2330      	movs	r3, #48	; 0x30
 8008624:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 80087e8 <_vfiprintf_r+0x24c>
 8008628:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800862c:	f04f 0901 	mov.w	r9, #1
 8008630:	4623      	mov	r3, r4
 8008632:	469a      	mov	sl, r3
 8008634:	f813 2b01 	ldrb.w	r2, [r3], #1
 8008638:	b10a      	cbz	r2, 800863e <_vfiprintf_r+0xa2>
 800863a:	2a25      	cmp	r2, #37	; 0x25
 800863c:	d1f9      	bne.n	8008632 <_vfiprintf_r+0x96>
 800863e:	ebba 0b04 	subs.w	fp, sl, r4
 8008642:	d00b      	beq.n	800865c <_vfiprintf_r+0xc0>
 8008644:	465b      	mov	r3, fp
 8008646:	4622      	mov	r2, r4
 8008648:	4629      	mov	r1, r5
 800864a:	4630      	mov	r0, r6
 800864c:	f7ff ff93 	bl	8008576 <__sfputs_r>
 8008650:	3001      	adds	r0, #1
 8008652:	f000 80aa 	beq.w	80087aa <_vfiprintf_r+0x20e>
 8008656:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8008658:	445a      	add	r2, fp
 800865a:	9209      	str	r2, [sp, #36]	; 0x24
 800865c:	f89a 3000 	ldrb.w	r3, [sl]
 8008660:	2b00      	cmp	r3, #0
 8008662:	f000 80a2 	beq.w	80087aa <_vfiprintf_r+0x20e>
 8008666:	2300      	movs	r3, #0
 8008668:	f04f 32ff 	mov.w	r2, #4294967295
 800866c:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8008670:	f10a 0a01 	add.w	sl, sl, #1
 8008674:	9304      	str	r3, [sp, #16]
 8008676:	9307      	str	r3, [sp, #28]
 8008678:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800867c:	931a      	str	r3, [sp, #104]	; 0x68
 800867e:	4654      	mov	r4, sl
 8008680:	2205      	movs	r2, #5
 8008682:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008686:	4858      	ldr	r0, [pc, #352]	; (80087e8 <_vfiprintf_r+0x24c>)
 8008688:	f7f7 fe42 	bl	8000310 <memchr>
 800868c:	9a04      	ldr	r2, [sp, #16]
 800868e:	b9d8      	cbnz	r0, 80086c8 <_vfiprintf_r+0x12c>
 8008690:	06d1      	lsls	r1, r2, #27
 8008692:	bf44      	itt	mi
 8008694:	2320      	movmi	r3, #32
 8008696:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800869a:	0713      	lsls	r3, r2, #28
 800869c:	bf44      	itt	mi
 800869e:	232b      	movmi	r3, #43	; 0x2b
 80086a0:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80086a4:	f89a 3000 	ldrb.w	r3, [sl]
 80086a8:	2b2a      	cmp	r3, #42	; 0x2a
 80086aa:	d015      	beq.n	80086d8 <_vfiprintf_r+0x13c>
 80086ac:	9a07      	ldr	r2, [sp, #28]
 80086ae:	4654      	mov	r4, sl
 80086b0:	2000      	movs	r0, #0
 80086b2:	f04f 0c0a 	mov.w	ip, #10
 80086b6:	4621      	mov	r1, r4
 80086b8:	f811 3b01 	ldrb.w	r3, [r1], #1
 80086bc:	3b30      	subs	r3, #48	; 0x30
 80086be:	2b09      	cmp	r3, #9
 80086c0:	d94e      	bls.n	8008760 <_vfiprintf_r+0x1c4>
 80086c2:	b1b0      	cbz	r0, 80086f2 <_vfiprintf_r+0x156>
 80086c4:	9207      	str	r2, [sp, #28]
 80086c6:	e014      	b.n	80086f2 <_vfiprintf_r+0x156>
 80086c8:	eba0 0308 	sub.w	r3, r0, r8
 80086cc:	fa09 f303 	lsl.w	r3, r9, r3
 80086d0:	4313      	orrs	r3, r2
 80086d2:	9304      	str	r3, [sp, #16]
 80086d4:	46a2      	mov	sl, r4
 80086d6:	e7d2      	b.n	800867e <_vfiprintf_r+0xe2>
 80086d8:	9b03      	ldr	r3, [sp, #12]
 80086da:	1d19      	adds	r1, r3, #4
 80086dc:	681b      	ldr	r3, [r3, #0]
 80086de:	9103      	str	r1, [sp, #12]
 80086e0:	2b00      	cmp	r3, #0
 80086e2:	bfbb      	ittet	lt
 80086e4:	425b      	neglt	r3, r3
 80086e6:	f042 0202 	orrlt.w	r2, r2, #2
 80086ea:	9307      	strge	r3, [sp, #28]
 80086ec:	9307      	strlt	r3, [sp, #28]
 80086ee:	bfb8      	it	lt
 80086f0:	9204      	strlt	r2, [sp, #16]
 80086f2:	7823      	ldrb	r3, [r4, #0]
 80086f4:	2b2e      	cmp	r3, #46	; 0x2e
 80086f6:	d10c      	bne.n	8008712 <_vfiprintf_r+0x176>
 80086f8:	7863      	ldrb	r3, [r4, #1]
 80086fa:	2b2a      	cmp	r3, #42	; 0x2a
 80086fc:	d135      	bne.n	800876a <_vfiprintf_r+0x1ce>
 80086fe:	9b03      	ldr	r3, [sp, #12]
 8008700:	1d1a      	adds	r2, r3, #4
 8008702:	681b      	ldr	r3, [r3, #0]
 8008704:	9203      	str	r2, [sp, #12]
 8008706:	2b00      	cmp	r3, #0
 8008708:	bfb8      	it	lt
 800870a:	f04f 33ff 	movlt.w	r3, #4294967295
 800870e:	3402      	adds	r4, #2
 8008710:	9305      	str	r3, [sp, #20]
 8008712:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 80087f8 <_vfiprintf_r+0x25c>
 8008716:	7821      	ldrb	r1, [r4, #0]
 8008718:	2203      	movs	r2, #3
 800871a:	4650      	mov	r0, sl
 800871c:	f7f7 fdf8 	bl	8000310 <memchr>
 8008720:	b140      	cbz	r0, 8008734 <_vfiprintf_r+0x198>
 8008722:	2340      	movs	r3, #64	; 0x40
 8008724:	eba0 000a 	sub.w	r0, r0, sl
 8008728:	fa03 f000 	lsl.w	r0, r3, r0
 800872c:	9b04      	ldr	r3, [sp, #16]
 800872e:	4303      	orrs	r3, r0
 8008730:	3401      	adds	r4, #1
 8008732:	9304      	str	r3, [sp, #16]
 8008734:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008738:	482c      	ldr	r0, [pc, #176]	; (80087ec <_vfiprintf_r+0x250>)
 800873a:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800873e:	2206      	movs	r2, #6
 8008740:	f7f7 fde6 	bl	8000310 <memchr>
 8008744:	2800      	cmp	r0, #0
 8008746:	d03f      	beq.n	80087c8 <_vfiprintf_r+0x22c>
 8008748:	4b29      	ldr	r3, [pc, #164]	; (80087f0 <_vfiprintf_r+0x254>)
 800874a:	bb1b      	cbnz	r3, 8008794 <_vfiprintf_r+0x1f8>
 800874c:	9b03      	ldr	r3, [sp, #12]
 800874e:	3307      	adds	r3, #7
 8008750:	f023 0307 	bic.w	r3, r3, #7
 8008754:	3308      	adds	r3, #8
 8008756:	9303      	str	r3, [sp, #12]
 8008758:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800875a:	443b      	add	r3, r7
 800875c:	9309      	str	r3, [sp, #36]	; 0x24
 800875e:	e767      	b.n	8008630 <_vfiprintf_r+0x94>
 8008760:	fb0c 3202 	mla	r2, ip, r2, r3
 8008764:	460c      	mov	r4, r1
 8008766:	2001      	movs	r0, #1
 8008768:	e7a5      	b.n	80086b6 <_vfiprintf_r+0x11a>
 800876a:	2300      	movs	r3, #0
 800876c:	3401      	adds	r4, #1
 800876e:	9305      	str	r3, [sp, #20]
 8008770:	4619      	mov	r1, r3
 8008772:	f04f 0c0a 	mov.w	ip, #10
 8008776:	4620      	mov	r0, r4
 8008778:	f810 2b01 	ldrb.w	r2, [r0], #1
 800877c:	3a30      	subs	r2, #48	; 0x30
 800877e:	2a09      	cmp	r2, #9
 8008780:	d903      	bls.n	800878a <_vfiprintf_r+0x1ee>
 8008782:	2b00      	cmp	r3, #0
 8008784:	d0c5      	beq.n	8008712 <_vfiprintf_r+0x176>
 8008786:	9105      	str	r1, [sp, #20]
 8008788:	e7c3      	b.n	8008712 <_vfiprintf_r+0x176>
 800878a:	fb0c 2101 	mla	r1, ip, r1, r2
 800878e:	4604      	mov	r4, r0
 8008790:	2301      	movs	r3, #1
 8008792:	e7f0      	b.n	8008776 <_vfiprintf_r+0x1da>
 8008794:	ab03      	add	r3, sp, #12
 8008796:	9300      	str	r3, [sp, #0]
 8008798:	462a      	mov	r2, r5
 800879a:	4b16      	ldr	r3, [pc, #88]	; (80087f4 <_vfiprintf_r+0x258>)
 800879c:	a904      	add	r1, sp, #16
 800879e:	4630      	mov	r0, r6
 80087a0:	f3af 8000 	nop.w
 80087a4:	4607      	mov	r7, r0
 80087a6:	1c78      	adds	r0, r7, #1
 80087a8:	d1d6      	bne.n	8008758 <_vfiprintf_r+0x1bc>
 80087aa:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80087ac:	07d9      	lsls	r1, r3, #31
 80087ae:	d405      	bmi.n	80087bc <_vfiprintf_r+0x220>
 80087b0:	89ab      	ldrh	r3, [r5, #12]
 80087b2:	059a      	lsls	r2, r3, #22
 80087b4:	d402      	bmi.n	80087bc <_vfiprintf_r+0x220>
 80087b6:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80087b8:	f7ff fdb7 	bl	800832a <__retarget_lock_release_recursive>
 80087bc:	89ab      	ldrh	r3, [r5, #12]
 80087be:	065b      	lsls	r3, r3, #25
 80087c0:	f53f af12 	bmi.w	80085e8 <_vfiprintf_r+0x4c>
 80087c4:	9809      	ldr	r0, [sp, #36]	; 0x24
 80087c6:	e711      	b.n	80085ec <_vfiprintf_r+0x50>
 80087c8:	ab03      	add	r3, sp, #12
 80087ca:	9300      	str	r3, [sp, #0]
 80087cc:	462a      	mov	r2, r5
 80087ce:	4b09      	ldr	r3, [pc, #36]	; (80087f4 <_vfiprintf_r+0x258>)
 80087d0:	a904      	add	r1, sp, #16
 80087d2:	4630      	mov	r0, r6
 80087d4:	f000 f880 	bl	80088d8 <_printf_i>
 80087d8:	e7e4      	b.n	80087a4 <_vfiprintf_r+0x208>
 80087da:	bf00      	nop
 80087dc:	08008e70 	.word	0x08008e70
 80087e0:	08008e90 	.word	0x08008e90
 80087e4:	08008e50 	.word	0x08008e50
 80087e8:	08008eb0 	.word	0x08008eb0
 80087ec:	08008eba 	.word	0x08008eba
 80087f0:	00000000 	.word	0x00000000
 80087f4:	08008577 	.word	0x08008577
 80087f8:	08008eb6 	.word	0x08008eb6

080087fc <_printf_common>:
 80087fc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008800:	4616      	mov	r6, r2
 8008802:	4699      	mov	r9, r3
 8008804:	688a      	ldr	r2, [r1, #8]
 8008806:	690b      	ldr	r3, [r1, #16]
 8008808:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800880c:	4293      	cmp	r3, r2
 800880e:	bfb8      	it	lt
 8008810:	4613      	movlt	r3, r2
 8008812:	6033      	str	r3, [r6, #0]
 8008814:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8008818:	4607      	mov	r7, r0
 800881a:	460c      	mov	r4, r1
 800881c:	b10a      	cbz	r2, 8008822 <_printf_common+0x26>
 800881e:	3301      	adds	r3, #1
 8008820:	6033      	str	r3, [r6, #0]
 8008822:	6823      	ldr	r3, [r4, #0]
 8008824:	0699      	lsls	r1, r3, #26
 8008826:	bf42      	ittt	mi
 8008828:	6833      	ldrmi	r3, [r6, #0]
 800882a:	3302      	addmi	r3, #2
 800882c:	6033      	strmi	r3, [r6, #0]
 800882e:	6825      	ldr	r5, [r4, #0]
 8008830:	f015 0506 	ands.w	r5, r5, #6
 8008834:	d106      	bne.n	8008844 <_printf_common+0x48>
 8008836:	f104 0a19 	add.w	sl, r4, #25
 800883a:	68e3      	ldr	r3, [r4, #12]
 800883c:	6832      	ldr	r2, [r6, #0]
 800883e:	1a9b      	subs	r3, r3, r2
 8008840:	42ab      	cmp	r3, r5
 8008842:	dc26      	bgt.n	8008892 <_printf_common+0x96>
 8008844:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8008848:	1e13      	subs	r3, r2, #0
 800884a:	6822      	ldr	r2, [r4, #0]
 800884c:	bf18      	it	ne
 800884e:	2301      	movne	r3, #1
 8008850:	0692      	lsls	r2, r2, #26
 8008852:	d42b      	bmi.n	80088ac <_printf_common+0xb0>
 8008854:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8008858:	4649      	mov	r1, r9
 800885a:	4638      	mov	r0, r7
 800885c:	47c0      	blx	r8
 800885e:	3001      	adds	r0, #1
 8008860:	d01e      	beq.n	80088a0 <_printf_common+0xa4>
 8008862:	6823      	ldr	r3, [r4, #0]
 8008864:	68e5      	ldr	r5, [r4, #12]
 8008866:	6832      	ldr	r2, [r6, #0]
 8008868:	f003 0306 	and.w	r3, r3, #6
 800886c:	2b04      	cmp	r3, #4
 800886e:	bf08      	it	eq
 8008870:	1aad      	subeq	r5, r5, r2
 8008872:	68a3      	ldr	r3, [r4, #8]
 8008874:	6922      	ldr	r2, [r4, #16]
 8008876:	bf0c      	ite	eq
 8008878:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800887c:	2500      	movne	r5, #0
 800887e:	4293      	cmp	r3, r2
 8008880:	bfc4      	itt	gt
 8008882:	1a9b      	subgt	r3, r3, r2
 8008884:	18ed      	addgt	r5, r5, r3
 8008886:	2600      	movs	r6, #0
 8008888:	341a      	adds	r4, #26
 800888a:	42b5      	cmp	r5, r6
 800888c:	d11a      	bne.n	80088c4 <_printf_common+0xc8>
 800888e:	2000      	movs	r0, #0
 8008890:	e008      	b.n	80088a4 <_printf_common+0xa8>
 8008892:	2301      	movs	r3, #1
 8008894:	4652      	mov	r2, sl
 8008896:	4649      	mov	r1, r9
 8008898:	4638      	mov	r0, r7
 800889a:	47c0      	blx	r8
 800889c:	3001      	adds	r0, #1
 800889e:	d103      	bne.n	80088a8 <_printf_common+0xac>
 80088a0:	f04f 30ff 	mov.w	r0, #4294967295
 80088a4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80088a8:	3501      	adds	r5, #1
 80088aa:	e7c6      	b.n	800883a <_printf_common+0x3e>
 80088ac:	18e1      	adds	r1, r4, r3
 80088ae:	1c5a      	adds	r2, r3, #1
 80088b0:	2030      	movs	r0, #48	; 0x30
 80088b2:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 80088b6:	4422      	add	r2, r4
 80088b8:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 80088bc:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 80088c0:	3302      	adds	r3, #2
 80088c2:	e7c7      	b.n	8008854 <_printf_common+0x58>
 80088c4:	2301      	movs	r3, #1
 80088c6:	4622      	mov	r2, r4
 80088c8:	4649      	mov	r1, r9
 80088ca:	4638      	mov	r0, r7
 80088cc:	47c0      	blx	r8
 80088ce:	3001      	adds	r0, #1
 80088d0:	d0e6      	beq.n	80088a0 <_printf_common+0xa4>
 80088d2:	3601      	adds	r6, #1
 80088d4:	e7d9      	b.n	800888a <_printf_common+0x8e>
	...

080088d8 <_printf_i>:
 80088d8:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80088dc:	460c      	mov	r4, r1
 80088de:	4691      	mov	r9, r2
 80088e0:	7e27      	ldrb	r7, [r4, #24]
 80088e2:	990c      	ldr	r1, [sp, #48]	; 0x30
 80088e4:	2f78      	cmp	r7, #120	; 0x78
 80088e6:	4680      	mov	r8, r0
 80088e8:	469a      	mov	sl, r3
 80088ea:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80088ee:	d807      	bhi.n	8008900 <_printf_i+0x28>
 80088f0:	2f62      	cmp	r7, #98	; 0x62
 80088f2:	d80a      	bhi.n	800890a <_printf_i+0x32>
 80088f4:	2f00      	cmp	r7, #0
 80088f6:	f000 80d8 	beq.w	8008aaa <_printf_i+0x1d2>
 80088fa:	2f58      	cmp	r7, #88	; 0x58
 80088fc:	f000 80a3 	beq.w	8008a46 <_printf_i+0x16e>
 8008900:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8008904:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8008908:	e03a      	b.n	8008980 <_printf_i+0xa8>
 800890a:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800890e:	2b15      	cmp	r3, #21
 8008910:	d8f6      	bhi.n	8008900 <_printf_i+0x28>
 8008912:	a001      	add	r0, pc, #4	; (adr r0, 8008918 <_printf_i+0x40>)
 8008914:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 8008918:	08008971 	.word	0x08008971
 800891c:	08008985 	.word	0x08008985
 8008920:	08008901 	.word	0x08008901
 8008924:	08008901 	.word	0x08008901
 8008928:	08008901 	.word	0x08008901
 800892c:	08008901 	.word	0x08008901
 8008930:	08008985 	.word	0x08008985
 8008934:	08008901 	.word	0x08008901
 8008938:	08008901 	.word	0x08008901
 800893c:	08008901 	.word	0x08008901
 8008940:	08008901 	.word	0x08008901
 8008944:	08008a91 	.word	0x08008a91
 8008948:	080089b5 	.word	0x080089b5
 800894c:	08008a73 	.word	0x08008a73
 8008950:	08008901 	.word	0x08008901
 8008954:	08008901 	.word	0x08008901
 8008958:	08008ab3 	.word	0x08008ab3
 800895c:	08008901 	.word	0x08008901
 8008960:	080089b5 	.word	0x080089b5
 8008964:	08008901 	.word	0x08008901
 8008968:	08008901 	.word	0x08008901
 800896c:	08008a7b 	.word	0x08008a7b
 8008970:	680b      	ldr	r3, [r1, #0]
 8008972:	1d1a      	adds	r2, r3, #4
 8008974:	681b      	ldr	r3, [r3, #0]
 8008976:	600a      	str	r2, [r1, #0]
 8008978:	f104 0642 	add.w	r6, r4, #66	; 0x42
 800897c:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8008980:	2301      	movs	r3, #1
 8008982:	e0a3      	b.n	8008acc <_printf_i+0x1f4>
 8008984:	6825      	ldr	r5, [r4, #0]
 8008986:	6808      	ldr	r0, [r1, #0]
 8008988:	062e      	lsls	r6, r5, #24
 800898a:	f100 0304 	add.w	r3, r0, #4
 800898e:	d50a      	bpl.n	80089a6 <_printf_i+0xce>
 8008990:	6805      	ldr	r5, [r0, #0]
 8008992:	600b      	str	r3, [r1, #0]
 8008994:	2d00      	cmp	r5, #0
 8008996:	da03      	bge.n	80089a0 <_printf_i+0xc8>
 8008998:	232d      	movs	r3, #45	; 0x2d
 800899a:	426d      	negs	r5, r5
 800899c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80089a0:	485e      	ldr	r0, [pc, #376]	; (8008b1c <_printf_i+0x244>)
 80089a2:	230a      	movs	r3, #10
 80089a4:	e019      	b.n	80089da <_printf_i+0x102>
 80089a6:	f015 0f40 	tst.w	r5, #64	; 0x40
 80089aa:	6805      	ldr	r5, [r0, #0]
 80089ac:	600b      	str	r3, [r1, #0]
 80089ae:	bf18      	it	ne
 80089b0:	b22d      	sxthne	r5, r5
 80089b2:	e7ef      	b.n	8008994 <_printf_i+0xbc>
 80089b4:	680b      	ldr	r3, [r1, #0]
 80089b6:	6825      	ldr	r5, [r4, #0]
 80089b8:	1d18      	adds	r0, r3, #4
 80089ba:	6008      	str	r0, [r1, #0]
 80089bc:	0628      	lsls	r0, r5, #24
 80089be:	d501      	bpl.n	80089c4 <_printf_i+0xec>
 80089c0:	681d      	ldr	r5, [r3, #0]
 80089c2:	e002      	b.n	80089ca <_printf_i+0xf2>
 80089c4:	0669      	lsls	r1, r5, #25
 80089c6:	d5fb      	bpl.n	80089c0 <_printf_i+0xe8>
 80089c8:	881d      	ldrh	r5, [r3, #0]
 80089ca:	4854      	ldr	r0, [pc, #336]	; (8008b1c <_printf_i+0x244>)
 80089cc:	2f6f      	cmp	r7, #111	; 0x6f
 80089ce:	bf0c      	ite	eq
 80089d0:	2308      	moveq	r3, #8
 80089d2:	230a      	movne	r3, #10
 80089d4:	2100      	movs	r1, #0
 80089d6:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 80089da:	6866      	ldr	r6, [r4, #4]
 80089dc:	60a6      	str	r6, [r4, #8]
 80089de:	2e00      	cmp	r6, #0
 80089e0:	bfa2      	ittt	ge
 80089e2:	6821      	ldrge	r1, [r4, #0]
 80089e4:	f021 0104 	bicge.w	r1, r1, #4
 80089e8:	6021      	strge	r1, [r4, #0]
 80089ea:	b90d      	cbnz	r5, 80089f0 <_printf_i+0x118>
 80089ec:	2e00      	cmp	r6, #0
 80089ee:	d04d      	beq.n	8008a8c <_printf_i+0x1b4>
 80089f0:	4616      	mov	r6, r2
 80089f2:	fbb5 f1f3 	udiv	r1, r5, r3
 80089f6:	fb03 5711 	mls	r7, r3, r1, r5
 80089fa:	5dc7      	ldrb	r7, [r0, r7]
 80089fc:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8008a00:	462f      	mov	r7, r5
 8008a02:	42bb      	cmp	r3, r7
 8008a04:	460d      	mov	r5, r1
 8008a06:	d9f4      	bls.n	80089f2 <_printf_i+0x11a>
 8008a08:	2b08      	cmp	r3, #8
 8008a0a:	d10b      	bne.n	8008a24 <_printf_i+0x14c>
 8008a0c:	6823      	ldr	r3, [r4, #0]
 8008a0e:	07df      	lsls	r7, r3, #31
 8008a10:	d508      	bpl.n	8008a24 <_printf_i+0x14c>
 8008a12:	6923      	ldr	r3, [r4, #16]
 8008a14:	6861      	ldr	r1, [r4, #4]
 8008a16:	4299      	cmp	r1, r3
 8008a18:	bfde      	ittt	le
 8008a1a:	2330      	movle	r3, #48	; 0x30
 8008a1c:	f806 3c01 	strble.w	r3, [r6, #-1]
 8008a20:	f106 36ff 	addle.w	r6, r6, #4294967295
 8008a24:	1b92      	subs	r2, r2, r6
 8008a26:	6122      	str	r2, [r4, #16]
 8008a28:	f8cd a000 	str.w	sl, [sp]
 8008a2c:	464b      	mov	r3, r9
 8008a2e:	aa03      	add	r2, sp, #12
 8008a30:	4621      	mov	r1, r4
 8008a32:	4640      	mov	r0, r8
 8008a34:	f7ff fee2 	bl	80087fc <_printf_common>
 8008a38:	3001      	adds	r0, #1
 8008a3a:	d14c      	bne.n	8008ad6 <_printf_i+0x1fe>
 8008a3c:	f04f 30ff 	mov.w	r0, #4294967295
 8008a40:	b004      	add	sp, #16
 8008a42:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008a46:	4835      	ldr	r0, [pc, #212]	; (8008b1c <_printf_i+0x244>)
 8008a48:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8008a4c:	6823      	ldr	r3, [r4, #0]
 8008a4e:	680e      	ldr	r6, [r1, #0]
 8008a50:	061f      	lsls	r7, r3, #24
 8008a52:	f856 5b04 	ldr.w	r5, [r6], #4
 8008a56:	600e      	str	r6, [r1, #0]
 8008a58:	d514      	bpl.n	8008a84 <_printf_i+0x1ac>
 8008a5a:	07d9      	lsls	r1, r3, #31
 8008a5c:	bf44      	itt	mi
 8008a5e:	f043 0320 	orrmi.w	r3, r3, #32
 8008a62:	6023      	strmi	r3, [r4, #0]
 8008a64:	b91d      	cbnz	r5, 8008a6e <_printf_i+0x196>
 8008a66:	6823      	ldr	r3, [r4, #0]
 8008a68:	f023 0320 	bic.w	r3, r3, #32
 8008a6c:	6023      	str	r3, [r4, #0]
 8008a6e:	2310      	movs	r3, #16
 8008a70:	e7b0      	b.n	80089d4 <_printf_i+0xfc>
 8008a72:	6823      	ldr	r3, [r4, #0]
 8008a74:	f043 0320 	orr.w	r3, r3, #32
 8008a78:	6023      	str	r3, [r4, #0]
 8008a7a:	2378      	movs	r3, #120	; 0x78
 8008a7c:	4828      	ldr	r0, [pc, #160]	; (8008b20 <_printf_i+0x248>)
 8008a7e:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8008a82:	e7e3      	b.n	8008a4c <_printf_i+0x174>
 8008a84:	065e      	lsls	r6, r3, #25
 8008a86:	bf48      	it	mi
 8008a88:	b2ad      	uxthmi	r5, r5
 8008a8a:	e7e6      	b.n	8008a5a <_printf_i+0x182>
 8008a8c:	4616      	mov	r6, r2
 8008a8e:	e7bb      	b.n	8008a08 <_printf_i+0x130>
 8008a90:	680b      	ldr	r3, [r1, #0]
 8008a92:	6826      	ldr	r6, [r4, #0]
 8008a94:	6960      	ldr	r0, [r4, #20]
 8008a96:	1d1d      	adds	r5, r3, #4
 8008a98:	600d      	str	r5, [r1, #0]
 8008a9a:	0635      	lsls	r5, r6, #24
 8008a9c:	681b      	ldr	r3, [r3, #0]
 8008a9e:	d501      	bpl.n	8008aa4 <_printf_i+0x1cc>
 8008aa0:	6018      	str	r0, [r3, #0]
 8008aa2:	e002      	b.n	8008aaa <_printf_i+0x1d2>
 8008aa4:	0671      	lsls	r1, r6, #25
 8008aa6:	d5fb      	bpl.n	8008aa0 <_printf_i+0x1c8>
 8008aa8:	8018      	strh	r0, [r3, #0]
 8008aaa:	2300      	movs	r3, #0
 8008aac:	6123      	str	r3, [r4, #16]
 8008aae:	4616      	mov	r6, r2
 8008ab0:	e7ba      	b.n	8008a28 <_printf_i+0x150>
 8008ab2:	680b      	ldr	r3, [r1, #0]
 8008ab4:	1d1a      	adds	r2, r3, #4
 8008ab6:	600a      	str	r2, [r1, #0]
 8008ab8:	681e      	ldr	r6, [r3, #0]
 8008aba:	6862      	ldr	r2, [r4, #4]
 8008abc:	2100      	movs	r1, #0
 8008abe:	4630      	mov	r0, r6
 8008ac0:	f7f7 fc26 	bl	8000310 <memchr>
 8008ac4:	b108      	cbz	r0, 8008aca <_printf_i+0x1f2>
 8008ac6:	1b80      	subs	r0, r0, r6
 8008ac8:	6060      	str	r0, [r4, #4]
 8008aca:	6863      	ldr	r3, [r4, #4]
 8008acc:	6123      	str	r3, [r4, #16]
 8008ace:	2300      	movs	r3, #0
 8008ad0:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8008ad4:	e7a8      	b.n	8008a28 <_printf_i+0x150>
 8008ad6:	6923      	ldr	r3, [r4, #16]
 8008ad8:	4632      	mov	r2, r6
 8008ada:	4649      	mov	r1, r9
 8008adc:	4640      	mov	r0, r8
 8008ade:	47d0      	blx	sl
 8008ae0:	3001      	adds	r0, #1
 8008ae2:	d0ab      	beq.n	8008a3c <_printf_i+0x164>
 8008ae4:	6823      	ldr	r3, [r4, #0]
 8008ae6:	079b      	lsls	r3, r3, #30
 8008ae8:	d413      	bmi.n	8008b12 <_printf_i+0x23a>
 8008aea:	68e0      	ldr	r0, [r4, #12]
 8008aec:	9b03      	ldr	r3, [sp, #12]
 8008aee:	4298      	cmp	r0, r3
 8008af0:	bfb8      	it	lt
 8008af2:	4618      	movlt	r0, r3
 8008af4:	e7a4      	b.n	8008a40 <_printf_i+0x168>
 8008af6:	2301      	movs	r3, #1
 8008af8:	4632      	mov	r2, r6
 8008afa:	4649      	mov	r1, r9
 8008afc:	4640      	mov	r0, r8
 8008afe:	47d0      	blx	sl
 8008b00:	3001      	adds	r0, #1
 8008b02:	d09b      	beq.n	8008a3c <_printf_i+0x164>
 8008b04:	3501      	adds	r5, #1
 8008b06:	68e3      	ldr	r3, [r4, #12]
 8008b08:	9903      	ldr	r1, [sp, #12]
 8008b0a:	1a5b      	subs	r3, r3, r1
 8008b0c:	42ab      	cmp	r3, r5
 8008b0e:	dcf2      	bgt.n	8008af6 <_printf_i+0x21e>
 8008b10:	e7eb      	b.n	8008aea <_printf_i+0x212>
 8008b12:	2500      	movs	r5, #0
 8008b14:	f104 0619 	add.w	r6, r4, #25
 8008b18:	e7f5      	b.n	8008b06 <_printf_i+0x22e>
 8008b1a:	bf00      	nop
 8008b1c:	08008ec1 	.word	0x08008ec1
 8008b20:	08008ed2 	.word	0x08008ed2

08008b24 <_sbrk_r>:
 8008b24:	b538      	push	{r3, r4, r5, lr}
 8008b26:	4d06      	ldr	r5, [pc, #24]	; (8008b40 <_sbrk_r+0x1c>)
 8008b28:	2300      	movs	r3, #0
 8008b2a:	4604      	mov	r4, r0
 8008b2c:	4608      	mov	r0, r1
 8008b2e:	602b      	str	r3, [r5, #0]
 8008b30:	f7f8 fc80 	bl	8001434 <_sbrk>
 8008b34:	1c43      	adds	r3, r0, #1
 8008b36:	d102      	bne.n	8008b3e <_sbrk_r+0x1a>
 8008b38:	682b      	ldr	r3, [r5, #0]
 8008b3a:	b103      	cbz	r3, 8008b3e <_sbrk_r+0x1a>
 8008b3c:	6023      	str	r3, [r4, #0]
 8008b3e:	bd38      	pop	{r3, r4, r5, pc}
 8008b40:	2000261c 	.word	0x2000261c

08008b44 <__sread>:
 8008b44:	b510      	push	{r4, lr}
 8008b46:	460c      	mov	r4, r1
 8008b48:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008b4c:	f000 f8a0 	bl	8008c90 <_read_r>
 8008b50:	2800      	cmp	r0, #0
 8008b52:	bfab      	itete	ge
 8008b54:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8008b56:	89a3      	ldrhlt	r3, [r4, #12]
 8008b58:	181b      	addge	r3, r3, r0
 8008b5a:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8008b5e:	bfac      	ite	ge
 8008b60:	6563      	strge	r3, [r4, #84]	; 0x54
 8008b62:	81a3      	strhlt	r3, [r4, #12]
 8008b64:	bd10      	pop	{r4, pc}

08008b66 <__swrite>:
 8008b66:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008b6a:	461f      	mov	r7, r3
 8008b6c:	898b      	ldrh	r3, [r1, #12]
 8008b6e:	05db      	lsls	r3, r3, #23
 8008b70:	4605      	mov	r5, r0
 8008b72:	460c      	mov	r4, r1
 8008b74:	4616      	mov	r6, r2
 8008b76:	d505      	bpl.n	8008b84 <__swrite+0x1e>
 8008b78:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008b7c:	2302      	movs	r3, #2
 8008b7e:	2200      	movs	r2, #0
 8008b80:	f000 f868 	bl	8008c54 <_lseek_r>
 8008b84:	89a3      	ldrh	r3, [r4, #12]
 8008b86:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8008b8a:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8008b8e:	81a3      	strh	r3, [r4, #12]
 8008b90:	4632      	mov	r2, r6
 8008b92:	463b      	mov	r3, r7
 8008b94:	4628      	mov	r0, r5
 8008b96:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8008b9a:	f000 b817 	b.w	8008bcc <_write_r>

08008b9e <__sseek>:
 8008b9e:	b510      	push	{r4, lr}
 8008ba0:	460c      	mov	r4, r1
 8008ba2:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008ba6:	f000 f855 	bl	8008c54 <_lseek_r>
 8008baa:	1c43      	adds	r3, r0, #1
 8008bac:	89a3      	ldrh	r3, [r4, #12]
 8008bae:	bf15      	itete	ne
 8008bb0:	6560      	strne	r0, [r4, #84]	; 0x54
 8008bb2:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8008bb6:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8008bba:	81a3      	strheq	r3, [r4, #12]
 8008bbc:	bf18      	it	ne
 8008bbe:	81a3      	strhne	r3, [r4, #12]
 8008bc0:	bd10      	pop	{r4, pc}

08008bc2 <__sclose>:
 8008bc2:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008bc6:	f000 b813 	b.w	8008bf0 <_close_r>
	...

08008bcc <_write_r>:
 8008bcc:	b538      	push	{r3, r4, r5, lr}
 8008bce:	4d07      	ldr	r5, [pc, #28]	; (8008bec <_write_r+0x20>)
 8008bd0:	4604      	mov	r4, r0
 8008bd2:	4608      	mov	r0, r1
 8008bd4:	4611      	mov	r1, r2
 8008bd6:	2200      	movs	r2, #0
 8008bd8:	602a      	str	r2, [r5, #0]
 8008bda:	461a      	mov	r2, r3
 8008bdc:	f7f7 fd64 	bl	80006a8 <_write>
 8008be0:	1c43      	adds	r3, r0, #1
 8008be2:	d102      	bne.n	8008bea <_write_r+0x1e>
 8008be4:	682b      	ldr	r3, [r5, #0]
 8008be6:	b103      	cbz	r3, 8008bea <_write_r+0x1e>
 8008be8:	6023      	str	r3, [r4, #0]
 8008bea:	bd38      	pop	{r3, r4, r5, pc}
 8008bec:	2000261c 	.word	0x2000261c

08008bf0 <_close_r>:
 8008bf0:	b538      	push	{r3, r4, r5, lr}
 8008bf2:	4d06      	ldr	r5, [pc, #24]	; (8008c0c <_close_r+0x1c>)
 8008bf4:	2300      	movs	r3, #0
 8008bf6:	4604      	mov	r4, r0
 8008bf8:	4608      	mov	r0, r1
 8008bfa:	602b      	str	r3, [r5, #0]
 8008bfc:	f7f8 fbe5 	bl	80013ca <_close>
 8008c00:	1c43      	adds	r3, r0, #1
 8008c02:	d102      	bne.n	8008c0a <_close_r+0x1a>
 8008c04:	682b      	ldr	r3, [r5, #0]
 8008c06:	b103      	cbz	r3, 8008c0a <_close_r+0x1a>
 8008c08:	6023      	str	r3, [r4, #0]
 8008c0a:	bd38      	pop	{r3, r4, r5, pc}
 8008c0c:	2000261c 	.word	0x2000261c

08008c10 <_fstat_r>:
 8008c10:	b538      	push	{r3, r4, r5, lr}
 8008c12:	4d07      	ldr	r5, [pc, #28]	; (8008c30 <_fstat_r+0x20>)
 8008c14:	2300      	movs	r3, #0
 8008c16:	4604      	mov	r4, r0
 8008c18:	4608      	mov	r0, r1
 8008c1a:	4611      	mov	r1, r2
 8008c1c:	602b      	str	r3, [r5, #0]
 8008c1e:	f7f8 fbe0 	bl	80013e2 <_fstat>
 8008c22:	1c43      	adds	r3, r0, #1
 8008c24:	d102      	bne.n	8008c2c <_fstat_r+0x1c>
 8008c26:	682b      	ldr	r3, [r5, #0]
 8008c28:	b103      	cbz	r3, 8008c2c <_fstat_r+0x1c>
 8008c2a:	6023      	str	r3, [r4, #0]
 8008c2c:	bd38      	pop	{r3, r4, r5, pc}
 8008c2e:	bf00      	nop
 8008c30:	2000261c 	.word	0x2000261c

08008c34 <_isatty_r>:
 8008c34:	b538      	push	{r3, r4, r5, lr}
 8008c36:	4d06      	ldr	r5, [pc, #24]	; (8008c50 <_isatty_r+0x1c>)
 8008c38:	2300      	movs	r3, #0
 8008c3a:	4604      	mov	r4, r0
 8008c3c:	4608      	mov	r0, r1
 8008c3e:	602b      	str	r3, [r5, #0]
 8008c40:	f7f8 fbdf 	bl	8001402 <_isatty>
 8008c44:	1c43      	adds	r3, r0, #1
 8008c46:	d102      	bne.n	8008c4e <_isatty_r+0x1a>
 8008c48:	682b      	ldr	r3, [r5, #0]
 8008c4a:	b103      	cbz	r3, 8008c4e <_isatty_r+0x1a>
 8008c4c:	6023      	str	r3, [r4, #0]
 8008c4e:	bd38      	pop	{r3, r4, r5, pc}
 8008c50:	2000261c 	.word	0x2000261c

08008c54 <_lseek_r>:
 8008c54:	b538      	push	{r3, r4, r5, lr}
 8008c56:	4d07      	ldr	r5, [pc, #28]	; (8008c74 <_lseek_r+0x20>)
 8008c58:	4604      	mov	r4, r0
 8008c5a:	4608      	mov	r0, r1
 8008c5c:	4611      	mov	r1, r2
 8008c5e:	2200      	movs	r2, #0
 8008c60:	602a      	str	r2, [r5, #0]
 8008c62:	461a      	mov	r2, r3
 8008c64:	f7f8 fbd8 	bl	8001418 <_lseek>
 8008c68:	1c43      	adds	r3, r0, #1
 8008c6a:	d102      	bne.n	8008c72 <_lseek_r+0x1e>
 8008c6c:	682b      	ldr	r3, [r5, #0]
 8008c6e:	b103      	cbz	r3, 8008c72 <_lseek_r+0x1e>
 8008c70:	6023      	str	r3, [r4, #0]
 8008c72:	bd38      	pop	{r3, r4, r5, pc}
 8008c74:	2000261c 	.word	0x2000261c

08008c78 <__malloc_lock>:
 8008c78:	4801      	ldr	r0, [pc, #4]	; (8008c80 <__malloc_lock+0x8>)
 8008c7a:	f7ff bb55 	b.w	8008328 <__retarget_lock_acquire_recursive>
 8008c7e:	bf00      	nop
 8008c80:	20002614 	.word	0x20002614

08008c84 <__malloc_unlock>:
 8008c84:	4801      	ldr	r0, [pc, #4]	; (8008c8c <__malloc_unlock+0x8>)
 8008c86:	f7ff bb50 	b.w	800832a <__retarget_lock_release_recursive>
 8008c8a:	bf00      	nop
 8008c8c:	20002614 	.word	0x20002614

08008c90 <_read_r>:
 8008c90:	b538      	push	{r3, r4, r5, lr}
 8008c92:	4d07      	ldr	r5, [pc, #28]	; (8008cb0 <_read_r+0x20>)
 8008c94:	4604      	mov	r4, r0
 8008c96:	4608      	mov	r0, r1
 8008c98:	4611      	mov	r1, r2
 8008c9a:	2200      	movs	r2, #0
 8008c9c:	602a      	str	r2, [r5, #0]
 8008c9e:	461a      	mov	r2, r3
 8008ca0:	f7f8 fb76 	bl	8001390 <_read>
 8008ca4:	1c43      	adds	r3, r0, #1
 8008ca6:	d102      	bne.n	8008cae <_read_r+0x1e>
 8008ca8:	682b      	ldr	r3, [r5, #0]
 8008caa:	b103      	cbz	r3, 8008cae <_read_r+0x1e>
 8008cac:	6023      	str	r3, [r4, #0]
 8008cae:	bd38      	pop	{r3, r4, r5, pc}
 8008cb0:	2000261c 	.word	0x2000261c

08008cb4 <_init>:
 8008cb4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008cb6:	bf00      	nop
 8008cb8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008cba:	bc08      	pop	{r3}
 8008cbc:	469e      	mov	lr, r3
 8008cbe:	4770      	bx	lr

08008cc0 <_fini>:
 8008cc0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008cc2:	bf00      	nop
 8008cc4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008cc6:	bc08      	pop	{r3}
 8008cc8:	469e      	mov	lr, r3
 8008cca:	4770      	bx	lr
