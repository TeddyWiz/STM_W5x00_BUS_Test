
stm_W6100_bus.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000002cc  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00008b50  080002d0  080002d0  000102d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000001cc  08008e20  08008e20  00018e20  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  08008fec  08008fec  00018fec  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000004  08008ff4  08008ff4  00018ff4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .fini_array   00000004  08008ff8  08008ff8  00018ff8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .data         00000104  20000000  08008ffc  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .RxDecripSection 00000060  20000104  08009100  00020104  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .TxDecripSection 00000060  20000164  08009160  00020164  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000023f4  200001c4  080091c0  000201c4  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200025b8  080091c0  000225b8  2**0
                  ALLOC
 11 .ARM.attributes 0000002e  00000000  00000000  000201c4  2**0
                  CONTENTS, READONLY
 12 .debug_info   00022203  00000000  00000000  000201f2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000037ff  00000000  00000000  000423f5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000010e8  00000000  00000000  00045bf8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000fd0  00000000  00000000  00046ce0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00035247  00000000  00000000  00047cb0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00014635  00000000  00000000  0007cef7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    001528ac  00000000  00000000  0009152c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  001e3dd8  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00004e70  00000000  00000000  001e3e2c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080002d0 <__do_global_dtors_aux>:
 80002d0:	b510      	push	{r4, lr}
 80002d2:	4c05      	ldr	r4, [pc, #20]	; (80002e8 <__do_global_dtors_aux+0x18>)
 80002d4:	7823      	ldrb	r3, [r4, #0]
 80002d6:	b933      	cbnz	r3, 80002e6 <__do_global_dtors_aux+0x16>
 80002d8:	4b04      	ldr	r3, [pc, #16]	; (80002ec <__do_global_dtors_aux+0x1c>)
 80002da:	b113      	cbz	r3, 80002e2 <__do_global_dtors_aux+0x12>
 80002dc:	4804      	ldr	r0, [pc, #16]	; (80002f0 <__do_global_dtors_aux+0x20>)
 80002de:	f3af 8000 	nop.w
 80002e2:	2301      	movs	r3, #1
 80002e4:	7023      	strb	r3, [r4, #0]
 80002e6:	bd10      	pop	{r4, pc}
 80002e8:	200001c4 	.word	0x200001c4
 80002ec:	00000000 	.word	0x00000000
 80002f0:	08008e08 	.word	0x08008e08

080002f4 <frame_dummy>:
 80002f4:	b508      	push	{r3, lr}
 80002f6:	4b03      	ldr	r3, [pc, #12]	; (8000304 <frame_dummy+0x10>)
 80002f8:	b11b      	cbz	r3, 8000302 <frame_dummy+0xe>
 80002fa:	4903      	ldr	r1, [pc, #12]	; (8000308 <frame_dummy+0x14>)
 80002fc:	4803      	ldr	r0, [pc, #12]	; (800030c <frame_dummy+0x18>)
 80002fe:	f3af 8000 	nop.w
 8000302:	bd08      	pop	{r3, pc}
 8000304:	00000000 	.word	0x00000000
 8000308:	200001c8 	.word	0x200001c8
 800030c:	08008e08 	.word	0x08008e08

08000310 <memchr>:
 8000310:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000314:	2a10      	cmp	r2, #16
 8000316:	db2b      	blt.n	8000370 <memchr+0x60>
 8000318:	f010 0f07 	tst.w	r0, #7
 800031c:	d008      	beq.n	8000330 <memchr+0x20>
 800031e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000322:	3a01      	subs	r2, #1
 8000324:	428b      	cmp	r3, r1
 8000326:	d02d      	beq.n	8000384 <memchr+0x74>
 8000328:	f010 0f07 	tst.w	r0, #7
 800032c:	b342      	cbz	r2, 8000380 <memchr+0x70>
 800032e:	d1f6      	bne.n	800031e <memchr+0xe>
 8000330:	b4f0      	push	{r4, r5, r6, r7}
 8000332:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000336:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800033a:	f022 0407 	bic.w	r4, r2, #7
 800033e:	f07f 0700 	mvns.w	r7, #0
 8000342:	2300      	movs	r3, #0
 8000344:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000348:	3c08      	subs	r4, #8
 800034a:	ea85 0501 	eor.w	r5, r5, r1
 800034e:	ea86 0601 	eor.w	r6, r6, r1
 8000352:	fa85 f547 	uadd8	r5, r5, r7
 8000356:	faa3 f587 	sel	r5, r3, r7
 800035a:	fa86 f647 	uadd8	r6, r6, r7
 800035e:	faa5 f687 	sel	r6, r5, r7
 8000362:	b98e      	cbnz	r6, 8000388 <memchr+0x78>
 8000364:	d1ee      	bne.n	8000344 <memchr+0x34>
 8000366:	bcf0      	pop	{r4, r5, r6, r7}
 8000368:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800036c:	f002 0207 	and.w	r2, r2, #7
 8000370:	b132      	cbz	r2, 8000380 <memchr+0x70>
 8000372:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000376:	3a01      	subs	r2, #1
 8000378:	ea83 0301 	eor.w	r3, r3, r1
 800037c:	b113      	cbz	r3, 8000384 <memchr+0x74>
 800037e:	d1f8      	bne.n	8000372 <memchr+0x62>
 8000380:	2000      	movs	r0, #0
 8000382:	4770      	bx	lr
 8000384:	3801      	subs	r0, #1
 8000386:	4770      	bx	lr
 8000388:	2d00      	cmp	r5, #0
 800038a:	bf06      	itte	eq
 800038c:	4635      	moveq	r5, r6
 800038e:	3803      	subeq	r0, #3
 8000390:	3807      	subne	r0, #7
 8000392:	f015 0f01 	tst.w	r5, #1
 8000396:	d107      	bne.n	80003a8 <memchr+0x98>
 8000398:	3001      	adds	r0, #1
 800039a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800039e:	bf02      	ittt	eq
 80003a0:	3001      	addeq	r0, #1
 80003a2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80003a6:	3001      	addeq	r0, #1
 80003a8:	bcf0      	pop	{r4, r5, r6, r7}
 80003aa:	3801      	subs	r0, #1
 80003ac:	4770      	bx	lr
 80003ae:	bf00      	nop

080003b0 <__aeabi_uldivmod>:
 80003b0:	b953      	cbnz	r3, 80003c8 <__aeabi_uldivmod+0x18>
 80003b2:	b94a      	cbnz	r2, 80003c8 <__aeabi_uldivmod+0x18>
 80003b4:	2900      	cmp	r1, #0
 80003b6:	bf08      	it	eq
 80003b8:	2800      	cmpeq	r0, #0
 80003ba:	bf1c      	itt	ne
 80003bc:	f04f 31ff 	movne.w	r1, #4294967295
 80003c0:	f04f 30ff 	movne.w	r0, #4294967295
 80003c4:	f000 b96e 	b.w	80006a4 <__aeabi_idiv0>
 80003c8:	f1ad 0c08 	sub.w	ip, sp, #8
 80003cc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80003d0:	f000 f806 	bl	80003e0 <__udivmoddi4>
 80003d4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80003d8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80003dc:	b004      	add	sp, #16
 80003de:	4770      	bx	lr

080003e0 <__udivmoddi4>:
 80003e0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80003e4:	9d08      	ldr	r5, [sp, #32]
 80003e6:	4604      	mov	r4, r0
 80003e8:	468c      	mov	ip, r1
 80003ea:	2b00      	cmp	r3, #0
 80003ec:	f040 8083 	bne.w	80004f6 <__udivmoddi4+0x116>
 80003f0:	428a      	cmp	r2, r1
 80003f2:	4617      	mov	r7, r2
 80003f4:	d947      	bls.n	8000486 <__udivmoddi4+0xa6>
 80003f6:	fab2 f282 	clz	r2, r2
 80003fa:	b142      	cbz	r2, 800040e <__udivmoddi4+0x2e>
 80003fc:	f1c2 0020 	rsb	r0, r2, #32
 8000400:	fa24 f000 	lsr.w	r0, r4, r0
 8000404:	4091      	lsls	r1, r2
 8000406:	4097      	lsls	r7, r2
 8000408:	ea40 0c01 	orr.w	ip, r0, r1
 800040c:	4094      	lsls	r4, r2
 800040e:	ea4f 4817 	mov.w	r8, r7, lsr #16
 8000412:	0c23      	lsrs	r3, r4, #16
 8000414:	fbbc f6f8 	udiv	r6, ip, r8
 8000418:	fa1f fe87 	uxth.w	lr, r7
 800041c:	fb08 c116 	mls	r1, r8, r6, ip
 8000420:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000424:	fb06 f10e 	mul.w	r1, r6, lr
 8000428:	4299      	cmp	r1, r3
 800042a:	d909      	bls.n	8000440 <__udivmoddi4+0x60>
 800042c:	18fb      	adds	r3, r7, r3
 800042e:	f106 30ff 	add.w	r0, r6, #4294967295
 8000432:	f080 8119 	bcs.w	8000668 <__udivmoddi4+0x288>
 8000436:	4299      	cmp	r1, r3
 8000438:	f240 8116 	bls.w	8000668 <__udivmoddi4+0x288>
 800043c:	3e02      	subs	r6, #2
 800043e:	443b      	add	r3, r7
 8000440:	1a5b      	subs	r3, r3, r1
 8000442:	b2a4      	uxth	r4, r4
 8000444:	fbb3 f0f8 	udiv	r0, r3, r8
 8000448:	fb08 3310 	mls	r3, r8, r0, r3
 800044c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000450:	fb00 fe0e 	mul.w	lr, r0, lr
 8000454:	45a6      	cmp	lr, r4
 8000456:	d909      	bls.n	800046c <__udivmoddi4+0x8c>
 8000458:	193c      	adds	r4, r7, r4
 800045a:	f100 33ff 	add.w	r3, r0, #4294967295
 800045e:	f080 8105 	bcs.w	800066c <__udivmoddi4+0x28c>
 8000462:	45a6      	cmp	lr, r4
 8000464:	f240 8102 	bls.w	800066c <__udivmoddi4+0x28c>
 8000468:	3802      	subs	r0, #2
 800046a:	443c      	add	r4, r7
 800046c:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000470:	eba4 040e 	sub.w	r4, r4, lr
 8000474:	2600      	movs	r6, #0
 8000476:	b11d      	cbz	r5, 8000480 <__udivmoddi4+0xa0>
 8000478:	40d4      	lsrs	r4, r2
 800047a:	2300      	movs	r3, #0
 800047c:	e9c5 4300 	strd	r4, r3, [r5]
 8000480:	4631      	mov	r1, r6
 8000482:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000486:	b902      	cbnz	r2, 800048a <__udivmoddi4+0xaa>
 8000488:	deff      	udf	#255	; 0xff
 800048a:	fab2 f282 	clz	r2, r2
 800048e:	2a00      	cmp	r2, #0
 8000490:	d150      	bne.n	8000534 <__udivmoddi4+0x154>
 8000492:	1bcb      	subs	r3, r1, r7
 8000494:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000498:	fa1f f887 	uxth.w	r8, r7
 800049c:	2601      	movs	r6, #1
 800049e:	fbb3 fcfe 	udiv	ip, r3, lr
 80004a2:	0c21      	lsrs	r1, r4, #16
 80004a4:	fb0e 331c 	mls	r3, lr, ip, r3
 80004a8:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80004ac:	fb08 f30c 	mul.w	r3, r8, ip
 80004b0:	428b      	cmp	r3, r1
 80004b2:	d907      	bls.n	80004c4 <__udivmoddi4+0xe4>
 80004b4:	1879      	adds	r1, r7, r1
 80004b6:	f10c 30ff 	add.w	r0, ip, #4294967295
 80004ba:	d202      	bcs.n	80004c2 <__udivmoddi4+0xe2>
 80004bc:	428b      	cmp	r3, r1
 80004be:	f200 80e9 	bhi.w	8000694 <__udivmoddi4+0x2b4>
 80004c2:	4684      	mov	ip, r0
 80004c4:	1ac9      	subs	r1, r1, r3
 80004c6:	b2a3      	uxth	r3, r4
 80004c8:	fbb1 f0fe 	udiv	r0, r1, lr
 80004cc:	fb0e 1110 	mls	r1, lr, r0, r1
 80004d0:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 80004d4:	fb08 f800 	mul.w	r8, r8, r0
 80004d8:	45a0      	cmp	r8, r4
 80004da:	d907      	bls.n	80004ec <__udivmoddi4+0x10c>
 80004dc:	193c      	adds	r4, r7, r4
 80004de:	f100 33ff 	add.w	r3, r0, #4294967295
 80004e2:	d202      	bcs.n	80004ea <__udivmoddi4+0x10a>
 80004e4:	45a0      	cmp	r8, r4
 80004e6:	f200 80d9 	bhi.w	800069c <__udivmoddi4+0x2bc>
 80004ea:	4618      	mov	r0, r3
 80004ec:	eba4 0408 	sub.w	r4, r4, r8
 80004f0:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 80004f4:	e7bf      	b.n	8000476 <__udivmoddi4+0x96>
 80004f6:	428b      	cmp	r3, r1
 80004f8:	d909      	bls.n	800050e <__udivmoddi4+0x12e>
 80004fa:	2d00      	cmp	r5, #0
 80004fc:	f000 80b1 	beq.w	8000662 <__udivmoddi4+0x282>
 8000500:	2600      	movs	r6, #0
 8000502:	e9c5 0100 	strd	r0, r1, [r5]
 8000506:	4630      	mov	r0, r6
 8000508:	4631      	mov	r1, r6
 800050a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800050e:	fab3 f683 	clz	r6, r3
 8000512:	2e00      	cmp	r6, #0
 8000514:	d14a      	bne.n	80005ac <__udivmoddi4+0x1cc>
 8000516:	428b      	cmp	r3, r1
 8000518:	d302      	bcc.n	8000520 <__udivmoddi4+0x140>
 800051a:	4282      	cmp	r2, r0
 800051c:	f200 80b8 	bhi.w	8000690 <__udivmoddi4+0x2b0>
 8000520:	1a84      	subs	r4, r0, r2
 8000522:	eb61 0103 	sbc.w	r1, r1, r3
 8000526:	2001      	movs	r0, #1
 8000528:	468c      	mov	ip, r1
 800052a:	2d00      	cmp	r5, #0
 800052c:	d0a8      	beq.n	8000480 <__udivmoddi4+0xa0>
 800052e:	e9c5 4c00 	strd	r4, ip, [r5]
 8000532:	e7a5      	b.n	8000480 <__udivmoddi4+0xa0>
 8000534:	f1c2 0320 	rsb	r3, r2, #32
 8000538:	fa20 f603 	lsr.w	r6, r0, r3
 800053c:	4097      	lsls	r7, r2
 800053e:	fa01 f002 	lsl.w	r0, r1, r2
 8000542:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000546:	40d9      	lsrs	r1, r3
 8000548:	4330      	orrs	r0, r6
 800054a:	0c03      	lsrs	r3, r0, #16
 800054c:	fbb1 f6fe 	udiv	r6, r1, lr
 8000550:	fa1f f887 	uxth.w	r8, r7
 8000554:	fb0e 1116 	mls	r1, lr, r6, r1
 8000558:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800055c:	fb06 f108 	mul.w	r1, r6, r8
 8000560:	4299      	cmp	r1, r3
 8000562:	fa04 f402 	lsl.w	r4, r4, r2
 8000566:	d909      	bls.n	800057c <__udivmoddi4+0x19c>
 8000568:	18fb      	adds	r3, r7, r3
 800056a:	f106 3cff 	add.w	ip, r6, #4294967295
 800056e:	f080 808d 	bcs.w	800068c <__udivmoddi4+0x2ac>
 8000572:	4299      	cmp	r1, r3
 8000574:	f240 808a 	bls.w	800068c <__udivmoddi4+0x2ac>
 8000578:	3e02      	subs	r6, #2
 800057a:	443b      	add	r3, r7
 800057c:	1a5b      	subs	r3, r3, r1
 800057e:	b281      	uxth	r1, r0
 8000580:	fbb3 f0fe 	udiv	r0, r3, lr
 8000584:	fb0e 3310 	mls	r3, lr, r0, r3
 8000588:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800058c:	fb00 f308 	mul.w	r3, r0, r8
 8000590:	428b      	cmp	r3, r1
 8000592:	d907      	bls.n	80005a4 <__udivmoddi4+0x1c4>
 8000594:	1879      	adds	r1, r7, r1
 8000596:	f100 3cff 	add.w	ip, r0, #4294967295
 800059a:	d273      	bcs.n	8000684 <__udivmoddi4+0x2a4>
 800059c:	428b      	cmp	r3, r1
 800059e:	d971      	bls.n	8000684 <__udivmoddi4+0x2a4>
 80005a0:	3802      	subs	r0, #2
 80005a2:	4439      	add	r1, r7
 80005a4:	1acb      	subs	r3, r1, r3
 80005a6:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 80005aa:	e778      	b.n	800049e <__udivmoddi4+0xbe>
 80005ac:	f1c6 0c20 	rsb	ip, r6, #32
 80005b0:	fa03 f406 	lsl.w	r4, r3, r6
 80005b4:	fa22 f30c 	lsr.w	r3, r2, ip
 80005b8:	431c      	orrs	r4, r3
 80005ba:	fa20 f70c 	lsr.w	r7, r0, ip
 80005be:	fa01 f306 	lsl.w	r3, r1, r6
 80005c2:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 80005c6:	fa21 f10c 	lsr.w	r1, r1, ip
 80005ca:	431f      	orrs	r7, r3
 80005cc:	0c3b      	lsrs	r3, r7, #16
 80005ce:	fbb1 f9fe 	udiv	r9, r1, lr
 80005d2:	fa1f f884 	uxth.w	r8, r4
 80005d6:	fb0e 1119 	mls	r1, lr, r9, r1
 80005da:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 80005de:	fb09 fa08 	mul.w	sl, r9, r8
 80005e2:	458a      	cmp	sl, r1
 80005e4:	fa02 f206 	lsl.w	r2, r2, r6
 80005e8:	fa00 f306 	lsl.w	r3, r0, r6
 80005ec:	d908      	bls.n	8000600 <__udivmoddi4+0x220>
 80005ee:	1861      	adds	r1, r4, r1
 80005f0:	f109 30ff 	add.w	r0, r9, #4294967295
 80005f4:	d248      	bcs.n	8000688 <__udivmoddi4+0x2a8>
 80005f6:	458a      	cmp	sl, r1
 80005f8:	d946      	bls.n	8000688 <__udivmoddi4+0x2a8>
 80005fa:	f1a9 0902 	sub.w	r9, r9, #2
 80005fe:	4421      	add	r1, r4
 8000600:	eba1 010a 	sub.w	r1, r1, sl
 8000604:	b2bf      	uxth	r7, r7
 8000606:	fbb1 f0fe 	udiv	r0, r1, lr
 800060a:	fb0e 1110 	mls	r1, lr, r0, r1
 800060e:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 8000612:	fb00 f808 	mul.w	r8, r0, r8
 8000616:	45b8      	cmp	r8, r7
 8000618:	d907      	bls.n	800062a <__udivmoddi4+0x24a>
 800061a:	19e7      	adds	r7, r4, r7
 800061c:	f100 31ff 	add.w	r1, r0, #4294967295
 8000620:	d22e      	bcs.n	8000680 <__udivmoddi4+0x2a0>
 8000622:	45b8      	cmp	r8, r7
 8000624:	d92c      	bls.n	8000680 <__udivmoddi4+0x2a0>
 8000626:	3802      	subs	r0, #2
 8000628:	4427      	add	r7, r4
 800062a:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 800062e:	eba7 0708 	sub.w	r7, r7, r8
 8000632:	fba0 8902 	umull	r8, r9, r0, r2
 8000636:	454f      	cmp	r7, r9
 8000638:	46c6      	mov	lr, r8
 800063a:	4649      	mov	r1, r9
 800063c:	d31a      	bcc.n	8000674 <__udivmoddi4+0x294>
 800063e:	d017      	beq.n	8000670 <__udivmoddi4+0x290>
 8000640:	b15d      	cbz	r5, 800065a <__udivmoddi4+0x27a>
 8000642:	ebb3 020e 	subs.w	r2, r3, lr
 8000646:	eb67 0701 	sbc.w	r7, r7, r1
 800064a:	fa07 fc0c 	lsl.w	ip, r7, ip
 800064e:	40f2      	lsrs	r2, r6
 8000650:	ea4c 0202 	orr.w	r2, ip, r2
 8000654:	40f7      	lsrs	r7, r6
 8000656:	e9c5 2700 	strd	r2, r7, [r5]
 800065a:	2600      	movs	r6, #0
 800065c:	4631      	mov	r1, r6
 800065e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000662:	462e      	mov	r6, r5
 8000664:	4628      	mov	r0, r5
 8000666:	e70b      	b.n	8000480 <__udivmoddi4+0xa0>
 8000668:	4606      	mov	r6, r0
 800066a:	e6e9      	b.n	8000440 <__udivmoddi4+0x60>
 800066c:	4618      	mov	r0, r3
 800066e:	e6fd      	b.n	800046c <__udivmoddi4+0x8c>
 8000670:	4543      	cmp	r3, r8
 8000672:	d2e5      	bcs.n	8000640 <__udivmoddi4+0x260>
 8000674:	ebb8 0e02 	subs.w	lr, r8, r2
 8000678:	eb69 0104 	sbc.w	r1, r9, r4
 800067c:	3801      	subs	r0, #1
 800067e:	e7df      	b.n	8000640 <__udivmoddi4+0x260>
 8000680:	4608      	mov	r0, r1
 8000682:	e7d2      	b.n	800062a <__udivmoddi4+0x24a>
 8000684:	4660      	mov	r0, ip
 8000686:	e78d      	b.n	80005a4 <__udivmoddi4+0x1c4>
 8000688:	4681      	mov	r9, r0
 800068a:	e7b9      	b.n	8000600 <__udivmoddi4+0x220>
 800068c:	4666      	mov	r6, ip
 800068e:	e775      	b.n	800057c <__udivmoddi4+0x19c>
 8000690:	4630      	mov	r0, r6
 8000692:	e74a      	b.n	800052a <__udivmoddi4+0x14a>
 8000694:	f1ac 0c02 	sub.w	ip, ip, #2
 8000698:	4439      	add	r1, r7
 800069a:	e713      	b.n	80004c4 <__udivmoddi4+0xe4>
 800069c:	3802      	subs	r0, #2
 800069e:	443c      	add	r4, r7
 80006a0:	e724      	b.n	80004ec <__udivmoddi4+0x10c>
 80006a2:	bf00      	nop

080006a4 <__aeabi_idiv0>:
 80006a4:	4770      	bx	lr
 80006a6:	bf00      	nop

080006a8 <_write>:
    #endif
  #endif

  #ifdef True_STD
  int _write(int fd, char *str, int len)
  {
 80006a8:	b580      	push	{r7, lr}
 80006aa:	b086      	sub	sp, #24
 80006ac:	af00      	add	r7, sp, #0
 80006ae:	60f8      	str	r0, [r7, #12]
 80006b0:	60b9      	str	r1, [r7, #8]
 80006b2:	607a      	str	r2, [r7, #4]
    for(int i=0; i<len; i++)
 80006b4:	2300      	movs	r3, #0
 80006b6:	617b      	str	r3, [r7, #20]
 80006b8:	e00b      	b.n	80006d2 <_write+0x2a>
    {
      HAL_UART_Transmit(&huart3, (uint8_t *)&str[i], 1, 0xFFFF);
 80006ba:	697b      	ldr	r3, [r7, #20]
 80006bc:	68ba      	ldr	r2, [r7, #8]
 80006be:	18d1      	adds	r1, r2, r3
 80006c0:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80006c4:	2201      	movs	r2, #1
 80006c6:	4807      	ldr	r0, [pc, #28]	; (80006e4 <_write+0x3c>)
 80006c8:	f004 feea 	bl	80054a0 <HAL_UART_Transmit>
    for(int i=0; i<len; i++)
 80006cc:	697b      	ldr	r3, [r7, #20]
 80006ce:	3301      	adds	r3, #1
 80006d0:	617b      	str	r3, [r7, #20]
 80006d2:	697a      	ldr	r2, [r7, #20]
 80006d4:	687b      	ldr	r3, [r7, #4]
 80006d6:	429a      	cmp	r2, r3
 80006d8:	dbef      	blt.n	80006ba <_write+0x12>
    }
    return len;
 80006da:	687b      	ldr	r3, [r7, #4]
  }
 80006dc:	4618      	mov	r0, r3
 80006de:	3718      	adds	r7, #24
 80006e0:	46bd      	mov	sp, r7
 80006e2:	bd80      	pop	{r7, pc}
 80006e4:	20000a0c 	.word	0x20000a0c

080006e8 <W6100BusWriteByte>:
	  {
		URX_BUF_Flag = 1;
	  }
 }
void W6100BusWriteByte(uint32_t addr, iodata_t data)
{
 80006e8:	b480      	push	{r7}
 80006ea:	b083      	sub	sp, #12
 80006ec:	af00      	add	r7, sp, #0
 80006ee:	6078      	str	r0, [r7, #4]
 80006f0:	460b      	mov	r3, r1
 80006f2:	70fb      	strb	r3, [r7, #3]
	(*(volatile uint8_t*)(addr)) = data;
 80006f4:	687b      	ldr	r3, [r7, #4]
 80006f6:	78fa      	ldrb	r2, [r7, #3]
 80006f8:	701a      	strb	r2, [r3, #0]
}
 80006fa:	bf00      	nop
 80006fc:	370c      	adds	r7, #12
 80006fe:	46bd      	mov	sp, r7
 8000700:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000704:	4770      	bx	lr

08000706 <W6100BusReadByte>:

iodata_t W6100BusReadByte(uint32_t addr)
{
 8000706:	b480      	push	{r7}
 8000708:	b083      	sub	sp, #12
 800070a:	af00      	add	r7, sp, #0
 800070c:	6078      	str	r0, [r7, #4]
	return (*((volatile uint8_t*)(addr)));
 800070e:	687b      	ldr	r3, [r7, #4]
 8000710:	781b      	ldrb	r3, [r3, #0]
 8000712:	b2db      	uxtb	r3, r3
}
 8000714:	4618      	mov	r0, r3
 8000716:	370c      	adds	r7, #12
 8000718:	46bd      	mov	sp, r7
 800071a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800071e:	4770      	bx	lr

08000720 <W6100Initialze>:

	

}
void W6100Initialze(void)
{
 8000720:	b590      	push	{r4, r7, lr}
 8000722:	b087      	sub	sp, #28
 8000724:	af00      	add	r7, sp, #0
#else
	/* Indirect bus method callback registration */
	#if defined BUS_DMA
		reg_wizchip_bus_cbfunc(W6100BusReadByte, W6100BusWriteByte, W6100BusReadBurst, W6100BusWriteBurst);
	#else
		reg_wizchip_bus_cbfunc(W6100BusReadByte, W6100BusWriteByte, 0, 0);
 8000726:	2300      	movs	r3, #0
 8000728:	2200      	movs	r2, #0
 800072a:	4910      	ldr	r1, [pc, #64]	; (800076c <W6100Initialze+0x4c>)
 800072c:	4810      	ldr	r0, [pc, #64]	; (8000770 <W6100Initialze+0x50>)
 800072e:	f006 fe01 	bl	8007334 <reg_wizchip_bus_cbfunc>
	#endif
#endif
		uint8_t temp;
		unsigned char W6100_AdrSet[2][8] = {{2, 2, 2, 2, 2, 2, 2, 2}, {2, 2, 2, 2, 2, 2, 2, 2}};
 8000732:	4b10      	ldr	r3, [pc, #64]	; (8000774 <W6100Initialze+0x54>)
 8000734:	1d3c      	adds	r4, r7, #4
 8000736:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8000738:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
		do
		{
			if (ctlwizchip(CW_GET_PHYLINK, (void *)&temp) == -1)
 800073c:	f107 0317 	add.w	r3, r7, #23
 8000740:	4619      	mov	r1, r3
 8000742:	2017      	movs	r0, #23
 8000744:	f006 fe3c 	bl	80073c0 <ctlwizchip>
 8000748:	4603      	mov	r3, r0
 800074a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800074e:	d102      	bne.n	8000756 <W6100Initialze+0x36>
			{
				printf("Unknown PHY link status.\r\n");
 8000750:	4809      	ldr	r0, [pc, #36]	; (8000778 <W6100Initialze+0x58>)
 8000752:	f007 fc13 	bl	8007f7c <puts>
			}
		} while (temp == PHY_LINK_OFF);
 8000756:	7dfb      	ldrb	r3, [r7, #23]
 8000758:	2b00      	cmp	r3, #0
 800075a:	d0ef      	beq.n	800073c <W6100Initialze+0x1c>
		printf("PHY OK.\r\n");
 800075c:	4807      	ldr	r0, [pc, #28]	; (800077c <W6100Initialze+0x5c>)
 800075e:	f007 fc0d 	bl	8007f7c <puts>
	
	
}
 8000762:	bf00      	nop
 8000764:	371c      	adds	r7, #28
 8000766:	46bd      	mov	sp, r7
 8000768:	bd90      	pop	{r4, r7, pc}
 800076a:	bf00      	nop
 800076c:	080006e9 	.word	0x080006e9
 8000770:	08000707 	.word	0x08000707
 8000774:	08008e48 	.word	0x08008e48
 8000778:	08008e20 	.word	0x08008e20
 800077c:	08008e3c 	.word	0x08008e3c

08000780 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000780:	b580      	push	{r7, lr}
 8000782:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000784:	f000 fe8c 	bl	80014a0 <HAL_Init>
  /* USER CODE BEGIN Init */
  
  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000788:	f000 f81c 	bl	80007c4 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800078c:	f000 f994 	bl	8000ab8 <MX_GPIO_Init>
  MX_ETH_Init();
 8000790:	f000 f888 	bl	80008a4 <MX_ETH_Init>
  MX_USART3_UART_Init();
 8000794:	f000 f8d8 	bl	8000948 <MX_USART3_UART_Init>
  MX_USB_OTG_HS_USB_Init();
 8000798:	f000 f922 	bl	80009e0 <MX_USB_OTG_HS_USB_Init>
  MX_FMC_Init();
 800079c:	f000 f928 	bl	80009f0 <MX_FMC_Init>
  /* USER CODE BEGIN 2 */
printf("Hello Start!!\r\n");
 80007a0:	4806      	ldr	r0, [pc, #24]	; (80007bc <main+0x3c>)
 80007a2:	f007 fbeb 	bl	8007f7c <puts>
  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_11, GPIO_PIN_SET);
 80007a6:	2201      	movs	r2, #1
 80007a8:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80007ac:	4804      	ldr	r0, [pc, #16]	; (80007c0 <main+0x40>)
 80007ae:	f002 fb4d 	bl	8002e4c <HAL_GPIO_WritePin>
  W6100Initialze();
 80007b2:	f7ff ffb5 	bl	8000720 <W6100Initialze>
  print_network_information();
 80007b6:	f000 fa8b 	bl	8000cd0 <print_network_information>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 80007ba:	e7fe      	b.n	80007ba <main+0x3a>
 80007bc:	08008e58 	.word	0x08008e58
 80007c0:	58020c00 	.word	0x58020c00

080007c4 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80007c4:	b580      	push	{r7, lr}
 80007c6:	b09c      	sub	sp, #112	; 0x70
 80007c8:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80007ca:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80007ce:	224c      	movs	r2, #76	; 0x4c
 80007d0:	2100      	movs	r1, #0
 80007d2:	4618      	mov	r0, r3
 80007d4:	f007 fb44 	bl	8007e60 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80007d8:	1d3b      	adds	r3, r7, #4
 80007da:	2220      	movs	r2, #32
 80007dc:	2100      	movs	r1, #0
 80007de:	4618      	mov	r0, r3
 80007e0:	f007 fb3e 	bl	8007e60 <memset>

  /** Supply configuration update enable
  */
  HAL_PWREx_ConfigSupply(PWR_LDO_SUPPLY);
 80007e4:	2002      	movs	r0, #2
 80007e6:	f002 fb4b 	bl	8002e80 <HAL_PWREx_ConfigSupply>
  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE0);
 80007ea:	2300      	movs	r3, #0
 80007ec:	603b      	str	r3, [r7, #0]
 80007ee:	4b2c      	ldr	r3, [pc, #176]	; (80008a0 <SystemClock_Config+0xdc>)
 80007f0:	699b      	ldr	r3, [r3, #24]
 80007f2:	4a2b      	ldr	r2, [pc, #172]	; (80008a0 <SystemClock_Config+0xdc>)
 80007f4:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 80007f8:	6193      	str	r3, [r2, #24]
 80007fa:	4b29      	ldr	r3, [pc, #164]	; (80008a0 <SystemClock_Config+0xdc>)
 80007fc:	699b      	ldr	r3, [r3, #24]
 80007fe:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8000802:	603b      	str	r3, [r7, #0]
 8000804:	683b      	ldr	r3, [r7, #0]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 8000806:	bf00      	nop
 8000808:	4b25      	ldr	r3, [pc, #148]	; (80008a0 <SystemClock_Config+0xdc>)
 800080a:	699b      	ldr	r3, [r3, #24]
 800080c:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8000810:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8000814:	d1f8      	bne.n	8000808 <SystemClock_Config+0x44>
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI48|RCC_OSCILLATORTYPE_HSE;
 8000816:	2321      	movs	r3, #33	; 0x21
 8000818:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 800081a:	f44f 23a0 	mov.w	r3, #327680	; 0x50000
 800081e:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSI48State = RCC_HSI48_ON;
 8000820:	2301      	movs	r3, #1
 8000822:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000824:	2302      	movs	r3, #2
 8000826:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000828:	2302      	movs	r3, #2
 800082a:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLM = 4;
 800082c:	2304      	movs	r3, #4
 800082e:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLN = 275;
 8000830:	f240 1313 	movw	r3, #275	; 0x113
 8000834:	657b      	str	r3, [r7, #84]	; 0x54
  RCC_OscInitStruct.PLL.PLLP = 1;
 8000836:	2301      	movs	r3, #1
 8000838:	65bb      	str	r3, [r7, #88]	; 0x58
  RCC_OscInitStruct.PLL.PLLQ = 4;
 800083a:	2304      	movs	r3, #4
 800083c:	65fb      	str	r3, [r7, #92]	; 0x5c
  RCC_OscInitStruct.PLL.PLLR = 2;
 800083e:	2302      	movs	r3, #2
 8000840:	663b      	str	r3, [r7, #96]	; 0x60
  RCC_OscInitStruct.PLL.PLLRGE = RCC_PLL1VCIRANGE_1;
 8000842:	2304      	movs	r3, #4
 8000844:	667b      	str	r3, [r7, #100]	; 0x64
  RCC_OscInitStruct.PLL.PLLVCOSEL = RCC_PLL1VCOWIDE;
 8000846:	2300      	movs	r3, #0
 8000848:	66bb      	str	r3, [r7, #104]	; 0x68
  RCC_OscInitStruct.PLL.PLLFRACN = 0;
 800084a:	2300      	movs	r3, #0
 800084c:	66fb      	str	r3, [r7, #108]	; 0x6c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800084e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000852:	4618      	mov	r0, r3
 8000854:	f002 fb4e 	bl	8002ef4 <HAL_RCC_OscConfig>
 8000858:	4603      	mov	r3, r0
 800085a:	2b00      	cmp	r3, #0
 800085c:	d001      	beq.n	8000862 <SystemClock_Config+0x9e>
  {
    Error_Handler();
 800085e:	f000 fab9 	bl	8000dd4 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000862:	233f      	movs	r3, #63	; 0x3f
 8000864:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
                              |RCC_CLOCKTYPE_D3PCLK1|RCC_CLOCKTYPE_D1PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000866:	2303      	movs	r3, #3
 8000868:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV1;
 800086a:	2300      	movs	r3, #0
 800086c:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV2;
 800086e:	2308      	movs	r3, #8
 8000870:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB3CLKDivider = RCC_APB3_DIV2;
 8000872:	2340      	movs	r3, #64	; 0x40
 8000874:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV2;
 8000876:	2340      	movs	r3, #64	; 0x40
 8000878:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_APB2_DIV2;
 800087a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800087e:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB4CLKDivider = RCC_APB4_DIV2;
 8000880:	2340      	movs	r3, #64	; 0x40
 8000882:	623b      	str	r3, [r7, #32]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 8000884:	1d3b      	adds	r3, r7, #4
 8000886:	2103      	movs	r1, #3
 8000888:	4618      	mov	r0, r3
 800088a:	f002 fec1 	bl	8003610 <HAL_RCC_ClockConfig>
 800088e:	4603      	mov	r3, r0
 8000890:	2b00      	cmp	r3, #0
 8000892:	d001      	beq.n	8000898 <SystemClock_Config+0xd4>
  {
    Error_Handler();
 8000894:	f000 fa9e 	bl	8000dd4 <Error_Handler>
  }
}
 8000898:	bf00      	nop
 800089a:	3770      	adds	r7, #112	; 0x70
 800089c:	46bd      	mov	sp, r7
 800089e:	bd80      	pop	{r7, pc}
 80008a0:	58024800 	.word	0x58024800

080008a4 <MX_ETH_Init>:
  * @brief ETH Initialization Function
  * @param None
  * @retval None
  */
static void MX_ETH_Init(void)
{
 80008a4:	b580      	push	{r7, lr}
 80008a6:	af00      	add	r7, sp, #0
  /* USER CODE END ETH_Init 0 */

  /* USER CODE BEGIN ETH_Init 1 */

  /* USER CODE END ETH_Init 1 */
  heth.Instance = ETH;
 80008a8:	4b22      	ldr	r3, [pc, #136]	; (8000934 <MX_ETH_Init+0x90>)
 80008aa:	4a23      	ldr	r2, [pc, #140]	; (8000938 <MX_ETH_Init+0x94>)
 80008ac:	601a      	str	r2, [r3, #0]
  heth.Init.MACAddr[0] =   0x00;
 80008ae:	4b21      	ldr	r3, [pc, #132]	; (8000934 <MX_ETH_Init+0x90>)
 80008b0:	685b      	ldr	r3, [r3, #4]
 80008b2:	2200      	movs	r2, #0
 80008b4:	701a      	strb	r2, [r3, #0]
  heth.Init.MACAddr[1] =   0x80;
 80008b6:	4b1f      	ldr	r3, [pc, #124]	; (8000934 <MX_ETH_Init+0x90>)
 80008b8:	685b      	ldr	r3, [r3, #4]
 80008ba:	3301      	adds	r3, #1
 80008bc:	2280      	movs	r2, #128	; 0x80
 80008be:	701a      	strb	r2, [r3, #0]
  heth.Init.MACAddr[2] =   0xE1;
 80008c0:	4b1c      	ldr	r3, [pc, #112]	; (8000934 <MX_ETH_Init+0x90>)
 80008c2:	685b      	ldr	r3, [r3, #4]
 80008c4:	3302      	adds	r3, #2
 80008c6:	22e1      	movs	r2, #225	; 0xe1
 80008c8:	701a      	strb	r2, [r3, #0]
  heth.Init.MACAddr[3] =   0x00;
 80008ca:	4b1a      	ldr	r3, [pc, #104]	; (8000934 <MX_ETH_Init+0x90>)
 80008cc:	685b      	ldr	r3, [r3, #4]
 80008ce:	3303      	adds	r3, #3
 80008d0:	2200      	movs	r2, #0
 80008d2:	701a      	strb	r2, [r3, #0]
  heth.Init.MACAddr[4] =   0x00;
 80008d4:	4b17      	ldr	r3, [pc, #92]	; (8000934 <MX_ETH_Init+0x90>)
 80008d6:	685b      	ldr	r3, [r3, #4]
 80008d8:	3304      	adds	r3, #4
 80008da:	2200      	movs	r2, #0
 80008dc:	701a      	strb	r2, [r3, #0]
  heth.Init.MACAddr[5] =   0x00;
 80008de:	4b15      	ldr	r3, [pc, #84]	; (8000934 <MX_ETH_Init+0x90>)
 80008e0:	685b      	ldr	r3, [r3, #4]
 80008e2:	3305      	adds	r3, #5
 80008e4:	2200      	movs	r2, #0
 80008e6:	701a      	strb	r2, [r3, #0]
  heth.Init.MediaInterface = HAL_ETH_RMII_MODE;
 80008e8:	4b12      	ldr	r3, [pc, #72]	; (8000934 <MX_ETH_Init+0x90>)
 80008ea:	2201      	movs	r2, #1
 80008ec:	721a      	strb	r2, [r3, #8]
  heth.Init.TxDesc = DMATxDscrTab;
 80008ee:	4b11      	ldr	r3, [pc, #68]	; (8000934 <MX_ETH_Init+0x90>)
 80008f0:	4a12      	ldr	r2, [pc, #72]	; (800093c <MX_ETH_Init+0x98>)
 80008f2:	60da      	str	r2, [r3, #12]
  heth.Init.RxDesc = DMARxDscrTab;
 80008f4:	4b0f      	ldr	r3, [pc, #60]	; (8000934 <MX_ETH_Init+0x90>)
 80008f6:	4a12      	ldr	r2, [pc, #72]	; (8000940 <MX_ETH_Init+0x9c>)
 80008f8:	611a      	str	r2, [r3, #16]
  heth.Init.RxBuffLen = 1524;
 80008fa:	4b0e      	ldr	r3, [pc, #56]	; (8000934 <MX_ETH_Init+0x90>)
 80008fc:	f240 52f4 	movw	r2, #1524	; 0x5f4
 8000900:	615a      	str	r2, [r3, #20]

  /* USER CODE BEGIN MACADDRESS */

  /* USER CODE END MACADDRESS */

  if (HAL_ETH_Init(&heth) != HAL_OK)
 8000902:	480c      	ldr	r0, [pc, #48]	; (8000934 <MX_ETH_Init+0x90>)
 8000904:	f001 fce4 	bl	80022d0 <HAL_ETH_Init>
 8000908:	4603      	mov	r3, r0
 800090a:	2b00      	cmp	r3, #0
 800090c:	d001      	beq.n	8000912 <MX_ETH_Init+0x6e>
  {
    Error_Handler();
 800090e:	f000 fa61 	bl	8000dd4 <Error_Handler>
  }

  memset(&TxConfig, 0 , sizeof(ETH_TxPacketConfig));
 8000912:	2234      	movs	r2, #52	; 0x34
 8000914:	2100      	movs	r1, #0
 8000916:	480b      	ldr	r0, [pc, #44]	; (8000944 <MX_ETH_Init+0xa0>)
 8000918:	f007 faa2 	bl	8007e60 <memset>
  TxConfig.Attributes = ETH_TX_PACKETS_FEATURES_CSUM | ETH_TX_PACKETS_FEATURES_CRCPAD;
 800091c:	4b09      	ldr	r3, [pc, #36]	; (8000944 <MX_ETH_Init+0xa0>)
 800091e:	2221      	movs	r2, #33	; 0x21
 8000920:	601a      	str	r2, [r3, #0]
  TxConfig.ChecksumCtrl = ETH_CHECKSUM_IPHDR_PAYLOAD_INSERT_PHDR_CALC;
 8000922:	4b08      	ldr	r3, [pc, #32]	; (8000944 <MX_ETH_Init+0xa0>)
 8000924:	f44f 3240 	mov.w	r2, #196608	; 0x30000
 8000928:	615a      	str	r2, [r3, #20]
  TxConfig.CRCPadCtrl = ETH_CRC_PAD_INSERT;
 800092a:	4b06      	ldr	r3, [pc, #24]	; (8000944 <MX_ETH_Init+0xa0>)
 800092c:	2200      	movs	r2, #0
 800092e:	611a      	str	r2, [r3, #16]
  /* USER CODE BEGIN ETH_Init 2 */

  /* USER CODE END ETH_Init 2 */

}
 8000930:	bf00      	nop
 8000932:	bd80      	pop	{r7, pc}
 8000934:	200020e8 	.word	0x200020e8
 8000938:	40028000 	.word	0x40028000
 800093c:	20000164 	.word	0x20000164
 8000940:	20000104 	.word	0x20000104
 8000944:	20002170 	.word	0x20002170

08000948 <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 8000948:	b580      	push	{r7, lr}
 800094a:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 800094c:	4b22      	ldr	r3, [pc, #136]	; (80009d8 <MX_USART3_UART_Init+0x90>)
 800094e:	4a23      	ldr	r2, [pc, #140]	; (80009dc <MX_USART3_UART_Init+0x94>)
 8000950:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 8000952:	4b21      	ldr	r3, [pc, #132]	; (80009d8 <MX_USART3_UART_Init+0x90>)
 8000954:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000958:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 800095a:	4b1f      	ldr	r3, [pc, #124]	; (80009d8 <MX_USART3_UART_Init+0x90>)
 800095c:	2200      	movs	r2, #0
 800095e:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8000960:	4b1d      	ldr	r3, [pc, #116]	; (80009d8 <MX_USART3_UART_Init+0x90>)
 8000962:	2200      	movs	r2, #0
 8000964:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8000966:	4b1c      	ldr	r3, [pc, #112]	; (80009d8 <MX_USART3_UART_Init+0x90>)
 8000968:	2200      	movs	r2, #0
 800096a:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 800096c:	4b1a      	ldr	r3, [pc, #104]	; (80009d8 <MX_USART3_UART_Init+0x90>)
 800096e:	220c      	movs	r2, #12
 8000970:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000972:	4b19      	ldr	r3, [pc, #100]	; (80009d8 <MX_USART3_UART_Init+0x90>)
 8000974:	2200      	movs	r2, #0
 8000976:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8000978:	4b17      	ldr	r3, [pc, #92]	; (80009d8 <MX_USART3_UART_Init+0x90>)
 800097a:	2200      	movs	r2, #0
 800097c:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800097e:	4b16      	ldr	r3, [pc, #88]	; (80009d8 <MX_USART3_UART_Init+0x90>)
 8000980:	2200      	movs	r2, #0
 8000982:	621a      	str	r2, [r3, #32]
  huart3.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8000984:	4b14      	ldr	r3, [pc, #80]	; (80009d8 <MX_USART3_UART_Init+0x90>)
 8000986:	2200      	movs	r2, #0
 8000988:	625a      	str	r2, [r3, #36]	; 0x24
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 800098a:	4b13      	ldr	r3, [pc, #76]	; (80009d8 <MX_USART3_UART_Init+0x90>)
 800098c:	2200      	movs	r2, #0
 800098e:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8000990:	4811      	ldr	r0, [pc, #68]	; (80009d8 <MX_USART3_UART_Init+0x90>)
 8000992:	f004 fd35 	bl	8005400 <HAL_UART_Init>
 8000996:	4603      	mov	r3, r0
 8000998:	2b00      	cmp	r3, #0
 800099a:	d001      	beq.n	80009a0 <MX_USART3_UART_Init+0x58>
  {
    Error_Handler();
 800099c:	f000 fa1a 	bl	8000dd4 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart3, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 80009a0:	2100      	movs	r1, #0
 80009a2:	480d      	ldr	r0, [pc, #52]	; (80009d8 <MX_USART3_UART_Init+0x90>)
 80009a4:	f006 f971 	bl	8006c8a <HAL_UARTEx_SetTxFifoThreshold>
 80009a8:	4603      	mov	r3, r0
 80009aa:	2b00      	cmp	r3, #0
 80009ac:	d001      	beq.n	80009b2 <MX_USART3_UART_Init+0x6a>
  {
    Error_Handler();
 80009ae:	f000 fa11 	bl	8000dd4 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart3, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 80009b2:	2100      	movs	r1, #0
 80009b4:	4808      	ldr	r0, [pc, #32]	; (80009d8 <MX_USART3_UART_Init+0x90>)
 80009b6:	f006 f9a6 	bl	8006d06 <HAL_UARTEx_SetRxFifoThreshold>
 80009ba:	4603      	mov	r3, r0
 80009bc:	2b00      	cmp	r3, #0
 80009be:	d001      	beq.n	80009c4 <MX_USART3_UART_Init+0x7c>
  {
    Error_Handler();
 80009c0:	f000 fa08 	bl	8000dd4 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart3) != HAL_OK)
 80009c4:	4804      	ldr	r0, [pc, #16]	; (80009d8 <MX_USART3_UART_Init+0x90>)
 80009c6:	f006 f927 	bl	8006c18 <HAL_UARTEx_DisableFifoMode>
 80009ca:	4603      	mov	r3, r0
 80009cc:	2b00      	cmp	r3, #0
 80009ce:	d001      	beq.n	80009d4 <MX_USART3_UART_Init+0x8c>
  {
    Error_Handler();
 80009d0:	f000 fa00 	bl	8000dd4 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 80009d4:	bf00      	nop
 80009d6:	bd80      	pop	{r7, pc}
 80009d8:	20000a0c 	.word	0x20000a0c
 80009dc:	40004800 	.word	0x40004800

080009e0 <MX_USB_OTG_HS_USB_Init>:
  * @brief USB_OTG_HS Initialization Function
  * @param None
  * @retval None
  */
static void MX_USB_OTG_HS_USB_Init(void)
{
 80009e0:	b480      	push	{r7}
 80009e2:	af00      	add	r7, sp, #0
  /* USER CODE END USB_OTG_HS_Init 1 */
  /* USER CODE BEGIN USB_OTG_HS_Init 2 */

  /* USER CODE END USB_OTG_HS_Init 2 */

}
 80009e4:	bf00      	nop
 80009e6:	46bd      	mov	sp, r7
 80009e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009ec:	4770      	bx	lr
	...

080009f0 <MX_FMC_Init>:

/* FMC initialization function */
static void MX_FMC_Init(void)
{
 80009f0:	b580      	push	{r7, lr}
 80009f2:	b088      	sub	sp, #32
 80009f4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN FMC_Init 0 */

  /* USER CODE END FMC_Init 0 */

  FMC_NORSRAM_TimingTypeDef Timing = {0};
 80009f6:	1d3b      	adds	r3, r7, #4
 80009f8:	2200      	movs	r2, #0
 80009fa:	601a      	str	r2, [r3, #0]
 80009fc:	605a      	str	r2, [r3, #4]
 80009fe:	609a      	str	r2, [r3, #8]
 8000a00:	60da      	str	r2, [r3, #12]
 8000a02:	611a      	str	r2, [r3, #16]
 8000a04:	615a      	str	r2, [r3, #20]
 8000a06:	619a      	str	r2, [r3, #24]

  /* USER CODE END FMC_Init 1 */

  /** Perform the SRAM1 memory initialization sequence
  */
  hsram1.Instance = FMC_NORSRAM_DEVICE;
 8000a08:	4b28      	ldr	r3, [pc, #160]	; (8000aac <MX_FMC_Init+0xbc>)
 8000a0a:	4a29      	ldr	r2, [pc, #164]	; (8000ab0 <MX_FMC_Init+0xc0>)
 8000a0c:	601a      	str	r2, [r3, #0]
  hsram1.Extended = FMC_NORSRAM_EXTENDED_DEVICE;
 8000a0e:	4b27      	ldr	r3, [pc, #156]	; (8000aac <MX_FMC_Init+0xbc>)
 8000a10:	4a28      	ldr	r2, [pc, #160]	; (8000ab4 <MX_FMC_Init+0xc4>)
 8000a12:	605a      	str	r2, [r3, #4]
  /* hsram1.Init */
  hsram1.Init.NSBank = FMC_NORSRAM_BANK1;
 8000a14:	4b25      	ldr	r3, [pc, #148]	; (8000aac <MX_FMC_Init+0xbc>)
 8000a16:	2200      	movs	r2, #0
 8000a18:	609a      	str	r2, [r3, #8]
  hsram1.Init.DataAddressMux = FMC_DATA_ADDRESS_MUX_DISABLE;
 8000a1a:	4b24      	ldr	r3, [pc, #144]	; (8000aac <MX_FMC_Init+0xbc>)
 8000a1c:	2200      	movs	r2, #0
 8000a1e:	60da      	str	r2, [r3, #12]
  hsram1.Init.MemoryType = FMC_MEMORY_TYPE_SRAM;
 8000a20:	4b22      	ldr	r3, [pc, #136]	; (8000aac <MX_FMC_Init+0xbc>)
 8000a22:	2200      	movs	r2, #0
 8000a24:	611a      	str	r2, [r3, #16]
  hsram1.Init.MemoryDataWidth = FMC_NORSRAM_MEM_BUS_WIDTH_8;
 8000a26:	4b21      	ldr	r3, [pc, #132]	; (8000aac <MX_FMC_Init+0xbc>)
 8000a28:	2200      	movs	r2, #0
 8000a2a:	615a      	str	r2, [r3, #20]
  hsram1.Init.BurstAccessMode = FMC_BURST_ACCESS_MODE_DISABLE;
 8000a2c:	4b1f      	ldr	r3, [pc, #124]	; (8000aac <MX_FMC_Init+0xbc>)
 8000a2e:	2200      	movs	r2, #0
 8000a30:	619a      	str	r2, [r3, #24]
  hsram1.Init.WaitSignalPolarity = FMC_WAIT_SIGNAL_POLARITY_LOW;
 8000a32:	4b1e      	ldr	r3, [pc, #120]	; (8000aac <MX_FMC_Init+0xbc>)
 8000a34:	2200      	movs	r2, #0
 8000a36:	61da      	str	r2, [r3, #28]
  hsram1.Init.WaitSignalActive = FMC_WAIT_TIMING_BEFORE_WS;
 8000a38:	4b1c      	ldr	r3, [pc, #112]	; (8000aac <MX_FMC_Init+0xbc>)
 8000a3a:	2200      	movs	r2, #0
 8000a3c:	621a      	str	r2, [r3, #32]
  hsram1.Init.WriteOperation = FMC_WRITE_OPERATION_DISABLE;
 8000a3e:	4b1b      	ldr	r3, [pc, #108]	; (8000aac <MX_FMC_Init+0xbc>)
 8000a40:	2200      	movs	r2, #0
 8000a42:	625a      	str	r2, [r3, #36]	; 0x24
  hsram1.Init.WaitSignal = FMC_WAIT_SIGNAL_DISABLE;
 8000a44:	4b19      	ldr	r3, [pc, #100]	; (8000aac <MX_FMC_Init+0xbc>)
 8000a46:	2200      	movs	r2, #0
 8000a48:	629a      	str	r2, [r3, #40]	; 0x28
  hsram1.Init.ExtendedMode = FMC_EXTENDED_MODE_DISABLE;
 8000a4a:	4b18      	ldr	r3, [pc, #96]	; (8000aac <MX_FMC_Init+0xbc>)
 8000a4c:	2200      	movs	r2, #0
 8000a4e:	62da      	str	r2, [r3, #44]	; 0x2c
  hsram1.Init.AsynchronousWait = FMC_ASYNCHRONOUS_WAIT_ENABLE;
 8000a50:	4b16      	ldr	r3, [pc, #88]	; (8000aac <MX_FMC_Init+0xbc>)
 8000a52:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 8000a56:	631a      	str	r2, [r3, #48]	; 0x30
  hsram1.Init.WriteBurst = FMC_WRITE_BURST_DISABLE;
 8000a58:	4b14      	ldr	r3, [pc, #80]	; (8000aac <MX_FMC_Init+0xbc>)
 8000a5a:	2200      	movs	r2, #0
 8000a5c:	635a      	str	r2, [r3, #52]	; 0x34
  hsram1.Init.ContinuousClock = FMC_CONTINUOUS_CLOCK_SYNC_ONLY;
 8000a5e:	4b13      	ldr	r3, [pc, #76]	; (8000aac <MX_FMC_Init+0xbc>)
 8000a60:	2200      	movs	r2, #0
 8000a62:	639a      	str	r2, [r3, #56]	; 0x38
  hsram1.Init.WriteFifo = FMC_WRITE_FIFO_ENABLE;
 8000a64:	4b11      	ldr	r3, [pc, #68]	; (8000aac <MX_FMC_Init+0xbc>)
 8000a66:	2200      	movs	r2, #0
 8000a68:	63da      	str	r2, [r3, #60]	; 0x3c
  hsram1.Init.PageSize = FMC_PAGE_SIZE_NONE;
 8000a6a:	4b10      	ldr	r3, [pc, #64]	; (8000aac <MX_FMC_Init+0xbc>)
 8000a6c:	2200      	movs	r2, #0
 8000a6e:	641a      	str	r2, [r3, #64]	; 0x40
  /* Timing */
  Timing.AddressSetupTime = 15;
 8000a70:	230f      	movs	r3, #15
 8000a72:	607b      	str	r3, [r7, #4]
  Timing.AddressHoldTime = 15;
 8000a74:	230f      	movs	r3, #15
 8000a76:	60bb      	str	r3, [r7, #8]
  Timing.DataSetupTime = 255;
 8000a78:	23ff      	movs	r3, #255	; 0xff
 8000a7a:	60fb      	str	r3, [r7, #12]
  Timing.BusTurnAroundDuration = 15;
 8000a7c:	230f      	movs	r3, #15
 8000a7e:	613b      	str	r3, [r7, #16]
  Timing.CLKDivision = 16;
 8000a80:	2310      	movs	r3, #16
 8000a82:	617b      	str	r3, [r7, #20]
  Timing.DataLatency = 17;
 8000a84:	2311      	movs	r3, #17
 8000a86:	61bb      	str	r3, [r7, #24]
  Timing.AccessMode = FMC_ACCESS_MODE_A;
 8000a88:	2300      	movs	r3, #0
 8000a8a:	61fb      	str	r3, [r7, #28]
  /* ExtTiming */

  if (HAL_SRAM_Init(&hsram1, &Timing, NULL) != HAL_OK)
 8000a8c:	1d3b      	adds	r3, r7, #4
 8000a8e:	2200      	movs	r2, #0
 8000a90:	4619      	mov	r1, r3
 8000a92:	4806      	ldr	r0, [pc, #24]	; (8000aac <MX_FMC_Init+0xbc>)
 8000a94:	f004 fc64 	bl	8005360 <HAL_SRAM_Init>
 8000a98:	4603      	mov	r3, r0
 8000a9a:	2b00      	cmp	r3, #0
 8000a9c:	d001      	beq.n	8000aa2 <MX_FMC_Init+0xb2>
  {
    Error_Handler( );
 8000a9e:	f000 f999 	bl	8000dd4 <Error_Handler>
  }

  /* USER CODE BEGIN FMC_Init 2 */

  /* USER CODE END FMC_Init 2 */
}
 8000aa2:	bf00      	nop
 8000aa4:	3720      	adds	r7, #32
 8000aa6:	46bd      	mov	sp, r7
 8000aa8:	bd80      	pop	{r7, pc}
 8000aaa:	bf00      	nop
 8000aac:	20000e9c 	.word	0x20000e9c
 8000ab0:	52004000 	.word	0x52004000
 8000ab4:	52004104 	.word	0x52004104

08000ab8 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000ab8:	b580      	push	{r7, lr}
 8000aba:	b08e      	sub	sp, #56	; 0x38
 8000abc:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000abe:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000ac2:	2200      	movs	r2, #0
 8000ac4:	601a      	str	r2, [r3, #0]
 8000ac6:	605a      	str	r2, [r3, #4]
 8000ac8:	609a      	str	r2, [r3, #8]
 8000aca:	60da      	str	r2, [r3, #12]
 8000acc:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000ace:	4b78      	ldr	r3, [pc, #480]	; (8000cb0 <MX_GPIO_Init+0x1f8>)
 8000ad0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000ad4:	4a76      	ldr	r2, [pc, #472]	; (8000cb0 <MX_GPIO_Init+0x1f8>)
 8000ad6:	f043 0304 	orr.w	r3, r3, #4
 8000ada:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000ade:	4b74      	ldr	r3, [pc, #464]	; (8000cb0 <MX_GPIO_Init+0x1f8>)
 8000ae0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000ae4:	f003 0304 	and.w	r3, r3, #4
 8000ae8:	623b      	str	r3, [r7, #32]
 8000aea:	6a3b      	ldr	r3, [r7, #32]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8000aec:	4b70      	ldr	r3, [pc, #448]	; (8000cb0 <MX_GPIO_Init+0x1f8>)
 8000aee:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000af2:	4a6f      	ldr	r2, [pc, #444]	; (8000cb0 <MX_GPIO_Init+0x1f8>)
 8000af4:	f043 0320 	orr.w	r3, r3, #32
 8000af8:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000afc:	4b6c      	ldr	r3, [pc, #432]	; (8000cb0 <MX_GPIO_Init+0x1f8>)
 8000afe:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000b02:	f003 0320 	and.w	r3, r3, #32
 8000b06:	61fb      	str	r3, [r7, #28]
 8000b08:	69fb      	ldr	r3, [r7, #28]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000b0a:	4b69      	ldr	r3, [pc, #420]	; (8000cb0 <MX_GPIO_Init+0x1f8>)
 8000b0c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000b10:	4a67      	ldr	r2, [pc, #412]	; (8000cb0 <MX_GPIO_Init+0x1f8>)
 8000b12:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000b16:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000b1a:	4b65      	ldr	r3, [pc, #404]	; (8000cb0 <MX_GPIO_Init+0x1f8>)
 8000b1c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000b20:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000b24:	61bb      	str	r3, [r7, #24]
 8000b26:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000b28:	4b61      	ldr	r3, [pc, #388]	; (8000cb0 <MX_GPIO_Init+0x1f8>)
 8000b2a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000b2e:	4a60      	ldr	r2, [pc, #384]	; (8000cb0 <MX_GPIO_Init+0x1f8>)
 8000b30:	f043 0301 	orr.w	r3, r3, #1
 8000b34:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000b38:	4b5d      	ldr	r3, [pc, #372]	; (8000cb0 <MX_GPIO_Init+0x1f8>)
 8000b3a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000b3e:	f003 0301 	and.w	r3, r3, #1
 8000b42:	617b      	str	r3, [r7, #20]
 8000b44:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000b46:	4b5a      	ldr	r3, [pc, #360]	; (8000cb0 <MX_GPIO_Init+0x1f8>)
 8000b48:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000b4c:	4a58      	ldr	r2, [pc, #352]	; (8000cb0 <MX_GPIO_Init+0x1f8>)
 8000b4e:	f043 0302 	orr.w	r3, r3, #2
 8000b52:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000b56:	4b56      	ldr	r3, [pc, #344]	; (8000cb0 <MX_GPIO_Init+0x1f8>)
 8000b58:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000b5c:	f003 0302 	and.w	r3, r3, #2
 8000b60:	613b      	str	r3, [r7, #16]
 8000b62:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8000b64:	4b52      	ldr	r3, [pc, #328]	; (8000cb0 <MX_GPIO_Init+0x1f8>)
 8000b66:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000b6a:	4a51      	ldr	r2, [pc, #324]	; (8000cb0 <MX_GPIO_Init+0x1f8>)
 8000b6c:	f043 0310 	orr.w	r3, r3, #16
 8000b70:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000b74:	4b4e      	ldr	r3, [pc, #312]	; (8000cb0 <MX_GPIO_Init+0x1f8>)
 8000b76:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000b7a:	f003 0310 	and.w	r3, r3, #16
 8000b7e:	60fb      	str	r3, [r7, #12]
 8000b80:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000b82:	4b4b      	ldr	r3, [pc, #300]	; (8000cb0 <MX_GPIO_Init+0x1f8>)
 8000b84:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000b88:	4a49      	ldr	r2, [pc, #292]	; (8000cb0 <MX_GPIO_Init+0x1f8>)
 8000b8a:	f043 0308 	orr.w	r3, r3, #8
 8000b8e:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000b92:	4b47      	ldr	r3, [pc, #284]	; (8000cb0 <MX_GPIO_Init+0x1f8>)
 8000b94:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000b98:	f003 0308 	and.w	r3, r3, #8
 8000b9c:	60bb      	str	r3, [r7, #8]
 8000b9e:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8000ba0:	4b43      	ldr	r3, [pc, #268]	; (8000cb0 <MX_GPIO_Init+0x1f8>)
 8000ba2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000ba6:	4a42      	ldr	r2, [pc, #264]	; (8000cb0 <MX_GPIO_Init+0x1f8>)
 8000ba8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000bac:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000bb0:	4b3f      	ldr	r3, [pc, #252]	; (8000cb0 <MX_GPIO_Init+0x1f8>)
 8000bb2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000bb6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000bba:	607b      	str	r3, [r7, #4]
 8000bbc:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LED_GREEN_Pin|LED_RED_Pin, GPIO_PIN_RESET);
 8000bbe:	2200      	movs	r2, #0
 8000bc0:	f244 0101 	movw	r1, #16385	; 0x4001
 8000bc4:	483b      	ldr	r0, [pc, #236]	; (8000cb4 <MX_GPIO_Init+0x1fc>)
 8000bc6:	f002 f941 	bl	8002e4c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, USB_FS_PWR_EN_Pin|GPIO_PIN_11|GPIO_PIN_3, GPIO_PIN_RESET);
 8000bca:	2200      	movs	r2, #0
 8000bcc:	f640 4108 	movw	r1, #3080	; 0xc08
 8000bd0:	4839      	ldr	r0, [pc, #228]	; (8000cb8 <MX_GPIO_Init+0x200>)
 8000bd2:	f002 f93b 	bl	8002e4c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED_YELLOW_GPIO_Port, LED_YELLOW_Pin, GPIO_PIN_RESET);
 8000bd6:	2200      	movs	r2, #0
 8000bd8:	2102      	movs	r1, #2
 8000bda:	4838      	ldr	r0, [pc, #224]	; (8000cbc <MX_GPIO_Init+0x204>)
 8000bdc:	f002 f936 	bl	8002e4c <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8000be0:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000be4:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000be6:	2300      	movs	r3, #0
 8000be8:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000bea:	2300      	movs	r3, #0
 8000bec:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8000bee:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000bf2:	4619      	mov	r1, r3
 8000bf4:	4832      	ldr	r0, [pc, #200]	; (8000cc0 <MX_GPIO_Init+0x208>)
 8000bf6:	f001 ff81 	bl	8002afc <HAL_GPIO_Init>

  /*Configure GPIO pins : LED_GREEN_Pin LED_RED_Pin */
  GPIO_InitStruct.Pin = LED_GREEN_Pin|LED_RED_Pin;
 8000bfa:	f244 0301 	movw	r3, #16385	; 0x4001
 8000bfe:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000c00:	2301      	movs	r3, #1
 8000c02:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c04:	2300      	movs	r3, #0
 8000c06:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000c08:	2300      	movs	r3, #0
 8000c0a:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000c0c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000c10:	4619      	mov	r1, r3
 8000c12:	4828      	ldr	r0, [pc, #160]	; (8000cb4 <MX_GPIO_Init+0x1fc>)
 8000c14:	f001 ff72 	bl	8002afc <HAL_GPIO_Init>

  /*Configure GPIO pins : USB_FS_PWR_EN_Pin PD11 PD3 */
  GPIO_InitStruct.Pin = USB_FS_PWR_EN_Pin|GPIO_PIN_11|GPIO_PIN_3;
 8000c18:	f640 4308 	movw	r3, #3080	; 0xc08
 8000c1c:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000c1e:	2301      	movs	r3, #1
 8000c20:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c22:	2300      	movs	r3, #0
 8000c24:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000c26:	2300      	movs	r3, #0
 8000c28:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000c2a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000c2e:	4619      	mov	r1, r3
 8000c30:	4821      	ldr	r0, [pc, #132]	; (8000cb8 <MX_GPIO_Init+0x200>)
 8000c32:	f001 ff63 	bl	8002afc <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_FS_OVCR_Pin */
  GPIO_InitStruct.Pin = USB_FS_OVCR_Pin;
 8000c36:	2380      	movs	r3, #128	; 0x80
 8000c38:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000c3a:	4b22      	ldr	r3, [pc, #136]	; (8000cc4 <MX_GPIO_Init+0x20c>)
 8000c3c:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c3e:	2300      	movs	r3, #0
 8000c40:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(USB_FS_OVCR_GPIO_Port, &GPIO_InitStruct);
 8000c42:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000c46:	4619      	mov	r1, r3
 8000c48:	481f      	ldr	r0, [pc, #124]	; (8000cc8 <MX_GPIO_Init+0x210>)
 8000c4a:	f001 ff57 	bl	8002afc <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_FS_VBUS_Pin */
  GPIO_InitStruct.Pin = USB_FS_VBUS_Pin;
 8000c4e:	f44f 7300 	mov.w	r3, #512	; 0x200
 8000c52:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000c54:	2300      	movs	r3, #0
 8000c56:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c58:	2300      	movs	r3, #0
 8000c5a:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(USB_FS_VBUS_GPIO_Port, &GPIO_InitStruct);
 8000c5c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000c60:	4619      	mov	r1, r3
 8000c62:	481a      	ldr	r0, [pc, #104]	; (8000ccc <MX_GPIO_Init+0x214>)
 8000c64:	f001 ff4a 	bl	8002afc <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_FS_ID_Pin */
  GPIO_InitStruct.Pin = USB_FS_ID_Pin;
 8000c68:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000c6c:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000c6e:	2302      	movs	r3, #2
 8000c70:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c72:	2300      	movs	r3, #0
 8000c74:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000c76:	2300      	movs	r3, #0
 8000c78:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG1_HS;
 8000c7a:	230a      	movs	r3, #10
 8000c7c:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(USB_FS_ID_GPIO_Port, &GPIO_InitStruct);
 8000c7e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000c82:	4619      	mov	r1, r3
 8000c84:	4811      	ldr	r0, [pc, #68]	; (8000ccc <MX_GPIO_Init+0x214>)
 8000c86:	f001 ff39 	bl	8002afc <HAL_GPIO_Init>

  /*Configure GPIO pin : LED_YELLOW_Pin */
  GPIO_InitStruct.Pin = LED_YELLOW_Pin;
 8000c8a:	2302      	movs	r3, #2
 8000c8c:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000c8e:	2301      	movs	r3, #1
 8000c90:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c92:	2300      	movs	r3, #0
 8000c94:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000c96:	2300      	movs	r3, #0
 8000c98:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(LED_YELLOW_GPIO_Port, &GPIO_InitStruct);
 8000c9a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000c9e:	4619      	mov	r1, r3
 8000ca0:	4806      	ldr	r0, [pc, #24]	; (8000cbc <MX_GPIO_Init+0x204>)
 8000ca2:	f001 ff2b 	bl	8002afc <HAL_GPIO_Init>

}
 8000ca6:	bf00      	nop
 8000ca8:	3738      	adds	r7, #56	; 0x38
 8000caa:	46bd      	mov	sp, r7
 8000cac:	bd80      	pop	{r7, pc}
 8000cae:	bf00      	nop
 8000cb0:	58024400 	.word	0x58024400
 8000cb4:	58020400 	.word	0x58020400
 8000cb8:	58020c00 	.word	0x58020c00
 8000cbc:	58021000 	.word	0x58021000
 8000cc0:	58020800 	.word	0x58020800
 8000cc4:	11110000 	.word	0x11110000
 8000cc8:	58021800 	.word	0x58021800
 8000ccc:	58020000 	.word	0x58020000

08000cd0 <print_network_information>:

/* USER CODE BEGIN 4 */
void print_network_information(void)
{
 8000cd0:	b5b0      	push	{r4, r5, r7, lr}
 8000cd2:	b084      	sub	sp, #16
 8000cd4:	af04      	add	r7, sp, #16
	wizchip_getnetinfo(&gWIZNETINFO);
 8000cd6:	4837      	ldr	r0, [pc, #220]	; (8000db4 <print_network_information+0xe4>)
 8000cd8:	f007 f818 	bl	8007d0c <wizchip_getnetinfo>

	printf("Mac address: %02x:%02x:%02x:%02x:%02x:%02x\n\r",gWIZNETINFO.mac[0],gWIZNETINFO.mac[1],gWIZNETINFO.mac[2],gWIZNETINFO.mac[3],gWIZNETINFO.mac[4],gWIZNETINFO.mac[5]);
 8000cdc:	4b35      	ldr	r3, [pc, #212]	; (8000db4 <print_network_information+0xe4>)
 8000cde:	781b      	ldrb	r3, [r3, #0]
 8000ce0:	4618      	mov	r0, r3
 8000ce2:	4b34      	ldr	r3, [pc, #208]	; (8000db4 <print_network_information+0xe4>)
 8000ce4:	785b      	ldrb	r3, [r3, #1]
 8000ce6:	461c      	mov	r4, r3
 8000ce8:	4b32      	ldr	r3, [pc, #200]	; (8000db4 <print_network_information+0xe4>)
 8000cea:	789b      	ldrb	r3, [r3, #2]
 8000cec:	461d      	mov	r5, r3
 8000cee:	4b31      	ldr	r3, [pc, #196]	; (8000db4 <print_network_information+0xe4>)
 8000cf0:	78db      	ldrb	r3, [r3, #3]
 8000cf2:	461a      	mov	r2, r3
 8000cf4:	4b2f      	ldr	r3, [pc, #188]	; (8000db4 <print_network_information+0xe4>)
 8000cf6:	791b      	ldrb	r3, [r3, #4]
 8000cf8:	4619      	mov	r1, r3
 8000cfa:	4b2e      	ldr	r3, [pc, #184]	; (8000db4 <print_network_information+0xe4>)
 8000cfc:	795b      	ldrb	r3, [r3, #5]
 8000cfe:	9302      	str	r3, [sp, #8]
 8000d00:	9101      	str	r1, [sp, #4]
 8000d02:	9200      	str	r2, [sp, #0]
 8000d04:	462b      	mov	r3, r5
 8000d06:	4622      	mov	r2, r4
 8000d08:	4601      	mov	r1, r0
 8000d0a:	482b      	ldr	r0, [pc, #172]	; (8000db8 <print_network_information+0xe8>)
 8000d0c:	f007 f8b0 	bl	8007e70 <iprintf>
	printf("IP address : %d.%d.%d.%d\n\r",gWIZNETINFO.ip[0],gWIZNETINFO.ip[1],gWIZNETINFO.ip[2],gWIZNETINFO.ip[3]);
 8000d10:	4b28      	ldr	r3, [pc, #160]	; (8000db4 <print_network_information+0xe4>)
 8000d12:	799b      	ldrb	r3, [r3, #6]
 8000d14:	4619      	mov	r1, r3
 8000d16:	4b27      	ldr	r3, [pc, #156]	; (8000db4 <print_network_information+0xe4>)
 8000d18:	79db      	ldrb	r3, [r3, #7]
 8000d1a:	461a      	mov	r2, r3
 8000d1c:	4b25      	ldr	r3, [pc, #148]	; (8000db4 <print_network_information+0xe4>)
 8000d1e:	7a1b      	ldrb	r3, [r3, #8]
 8000d20:	4618      	mov	r0, r3
 8000d22:	4b24      	ldr	r3, [pc, #144]	; (8000db4 <print_network_information+0xe4>)
 8000d24:	7a5b      	ldrb	r3, [r3, #9]
 8000d26:	9300      	str	r3, [sp, #0]
 8000d28:	4603      	mov	r3, r0
 8000d2a:	4824      	ldr	r0, [pc, #144]	; (8000dbc <print_network_information+0xec>)
 8000d2c:	f007 f8a0 	bl	8007e70 <iprintf>
	printf("SM Mask    : %d.%d.%d.%d\n\r",gWIZNETINFO.sn[0],gWIZNETINFO.sn[1],gWIZNETINFO.sn[2],gWIZNETINFO.sn[3]);
 8000d30:	4b20      	ldr	r3, [pc, #128]	; (8000db4 <print_network_information+0xe4>)
 8000d32:	7a9b      	ldrb	r3, [r3, #10]
 8000d34:	4619      	mov	r1, r3
 8000d36:	4b1f      	ldr	r3, [pc, #124]	; (8000db4 <print_network_information+0xe4>)
 8000d38:	7adb      	ldrb	r3, [r3, #11]
 8000d3a:	461a      	mov	r2, r3
 8000d3c:	4b1d      	ldr	r3, [pc, #116]	; (8000db4 <print_network_information+0xe4>)
 8000d3e:	7b1b      	ldrb	r3, [r3, #12]
 8000d40:	4618      	mov	r0, r3
 8000d42:	4b1c      	ldr	r3, [pc, #112]	; (8000db4 <print_network_information+0xe4>)
 8000d44:	7b5b      	ldrb	r3, [r3, #13]
 8000d46:	9300      	str	r3, [sp, #0]
 8000d48:	4603      	mov	r3, r0
 8000d4a:	481d      	ldr	r0, [pc, #116]	; (8000dc0 <print_network_information+0xf0>)
 8000d4c:	f007 f890 	bl	8007e70 <iprintf>
	printf("Gate way   : %d.%d.%d.%d\n\r",gWIZNETINFO.gw[0],gWIZNETINFO.gw[1],gWIZNETINFO.gw[2],gWIZNETINFO.gw[3]);
 8000d50:	4b18      	ldr	r3, [pc, #96]	; (8000db4 <print_network_information+0xe4>)
 8000d52:	7b9b      	ldrb	r3, [r3, #14]
 8000d54:	4619      	mov	r1, r3
 8000d56:	4b17      	ldr	r3, [pc, #92]	; (8000db4 <print_network_information+0xe4>)
 8000d58:	7bdb      	ldrb	r3, [r3, #15]
 8000d5a:	461a      	mov	r2, r3
 8000d5c:	4b15      	ldr	r3, [pc, #84]	; (8000db4 <print_network_information+0xe4>)
 8000d5e:	7c1b      	ldrb	r3, [r3, #16]
 8000d60:	4618      	mov	r0, r3
 8000d62:	4b14      	ldr	r3, [pc, #80]	; (8000db4 <print_network_information+0xe4>)
 8000d64:	7c5b      	ldrb	r3, [r3, #17]
 8000d66:	9300      	str	r3, [sp, #0]
 8000d68:	4603      	mov	r3, r0
 8000d6a:	4816      	ldr	r0, [pc, #88]	; (8000dc4 <print_network_information+0xf4>)
 8000d6c:	f007 f880 	bl	8007e70 <iprintf>
	printf("DNS Server : %d.%d.%d.%d\n\r",gWIZNETINFO.dns[0],gWIZNETINFO.dns[1],gWIZNETINFO.dns[2],gWIZNETINFO.dns[3]);
 8000d70:	4b10      	ldr	r3, [pc, #64]	; (8000db4 <print_network_information+0xe4>)
 8000d72:	f893 3052 	ldrb.w	r3, [r3, #82]	; 0x52
 8000d76:	4619      	mov	r1, r3
 8000d78:	4b0e      	ldr	r3, [pc, #56]	; (8000db4 <print_network_information+0xe4>)
 8000d7a:	f893 3053 	ldrb.w	r3, [r3, #83]	; 0x53
 8000d7e:	461a      	mov	r2, r3
 8000d80:	4b0c      	ldr	r3, [pc, #48]	; (8000db4 <print_network_information+0xe4>)
 8000d82:	f893 3054 	ldrb.w	r3, [r3, #84]	; 0x54
 8000d86:	4618      	mov	r0, r3
 8000d88:	4b0a      	ldr	r3, [pc, #40]	; (8000db4 <print_network_information+0xe4>)
 8000d8a:	f893 3055 	ldrb.w	r3, [r3, #85]	; 0x55
 8000d8e:	9300      	str	r3, [sp, #0]
 8000d90:	4603      	mov	r3, r0
 8000d92:	480d      	ldr	r0, [pc, #52]	; (8000dc8 <print_network_information+0xf8>)
 8000d94:	f007 f86c 	bl	8007e70 <iprintf>
	print_ipv6_addr("LLA ", gWIZNETINFO.lla);
	print_ipv6_addr("GUA ", gWIZNETINFO.gua);
	print_ipv6_addr("SUB6", gWIZNETINFO.sn6);
	*/

	printf("\r\nNETCFGLOCK : %x\r\n", getNETLCKR());
 8000d98:	480c      	ldr	r0, [pc, #48]	; (8000dcc <print_network_information+0xfc>)
 8000d9a:	f006 f987 	bl	80070ac <WIZCHIP_READ>
 8000d9e:	4603      	mov	r3, r0
 8000da0:	119b      	asrs	r3, r3, #6
 8000da2:	f003 0301 	and.w	r3, r3, #1
 8000da6:	4619      	mov	r1, r3
 8000da8:	4809      	ldr	r0, [pc, #36]	; (8000dd0 <print_network_information+0x100>)
 8000daa:	f007 f861 	bl	8007e70 <iprintf>
}
 8000dae:	bf00      	nop
 8000db0:	46bd      	mov	sp, r7
 8000db2:	bdb0      	pop	{r4, r5, r7, pc}
 8000db4:	20000000 	.word	0x20000000
 8000db8:	08008e68 	.word	0x08008e68
 8000dbc:	08008e98 	.word	0x08008e98
 8000dc0:	08008eb4 	.word	0x08008eb4
 8000dc4:	08008ed0 	.word	0x08008ed0
 8000dc8:	08008eec 	.word	0x08008eec
 8000dcc:	60200000 	.word	0x60200000
 8000dd0:	08008f08 	.word	0x08008f08

08000dd4 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000dd4:	b480      	push	{r7}
 8000dd6:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000dd8:	b672      	cpsid	i
}
 8000dda:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000ddc:	e7fe      	b.n	8000ddc <Error_Handler+0x8>
	...

08000de0 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000de0:	b480      	push	{r7}
 8000de2:	b083      	sub	sp, #12
 8000de4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000de6:	4b0a      	ldr	r3, [pc, #40]	; (8000e10 <HAL_MspInit+0x30>)
 8000de8:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8000dec:	4a08      	ldr	r2, [pc, #32]	; (8000e10 <HAL_MspInit+0x30>)
 8000dee:	f043 0302 	orr.w	r3, r3, #2
 8000df2:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 8000df6:	4b06      	ldr	r3, [pc, #24]	; (8000e10 <HAL_MspInit+0x30>)
 8000df8:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8000dfc:	f003 0302 	and.w	r3, r3, #2
 8000e00:	607b      	str	r3, [r7, #4]
 8000e02:	687b      	ldr	r3, [r7, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000e04:	bf00      	nop
 8000e06:	370c      	adds	r7, #12
 8000e08:	46bd      	mov	sp, r7
 8000e0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e0e:	4770      	bx	lr
 8000e10:	58024400 	.word	0x58024400

08000e14 <HAL_ETH_MspInit>:
* This function configures the hardware resources used in this example
* @param heth: ETH handle pointer
* @retval None
*/
void HAL_ETH_MspInit(ETH_HandleTypeDef* heth)
{
 8000e14:	b580      	push	{r7, lr}
 8000e16:	b08e      	sub	sp, #56	; 0x38
 8000e18:	af00      	add	r7, sp, #0
 8000e1a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000e1c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000e20:	2200      	movs	r2, #0
 8000e22:	601a      	str	r2, [r3, #0]
 8000e24:	605a      	str	r2, [r3, #4]
 8000e26:	609a      	str	r2, [r3, #8]
 8000e28:	60da      	str	r2, [r3, #12]
 8000e2a:	611a      	str	r2, [r3, #16]
  if(heth->Instance==ETH)
 8000e2c:	687b      	ldr	r3, [r7, #4]
 8000e2e:	681b      	ldr	r3, [r3, #0]
 8000e30:	4a59      	ldr	r2, [pc, #356]	; (8000f98 <HAL_ETH_MspInit+0x184>)
 8000e32:	4293      	cmp	r3, r2
 8000e34:	f040 80ab 	bne.w	8000f8e <HAL_ETH_MspInit+0x17a>
  {
  /* USER CODE BEGIN ETH_MspInit 0 */

  /* USER CODE END ETH_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ETH1MAC_CLK_ENABLE();
 8000e38:	4b58      	ldr	r3, [pc, #352]	; (8000f9c <HAL_ETH_MspInit+0x188>)
 8000e3a:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8000e3e:	4a57      	ldr	r2, [pc, #348]	; (8000f9c <HAL_ETH_MspInit+0x188>)
 8000e40:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8000e44:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 8000e48:	4b54      	ldr	r3, [pc, #336]	; (8000f9c <HAL_ETH_MspInit+0x188>)
 8000e4a:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8000e4e:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8000e52:	623b      	str	r3, [r7, #32]
 8000e54:	6a3b      	ldr	r3, [r7, #32]
    __HAL_RCC_ETH1TX_CLK_ENABLE();
 8000e56:	4b51      	ldr	r3, [pc, #324]	; (8000f9c <HAL_ETH_MspInit+0x188>)
 8000e58:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8000e5c:	4a4f      	ldr	r2, [pc, #316]	; (8000f9c <HAL_ETH_MspInit+0x188>)
 8000e5e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000e62:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 8000e66:	4b4d      	ldr	r3, [pc, #308]	; (8000f9c <HAL_ETH_MspInit+0x188>)
 8000e68:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8000e6c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000e70:	61fb      	str	r3, [r7, #28]
 8000e72:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_ETH1RX_CLK_ENABLE();
 8000e74:	4b49      	ldr	r3, [pc, #292]	; (8000f9c <HAL_ETH_MspInit+0x188>)
 8000e76:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8000e7a:	4a48      	ldr	r2, [pc, #288]	; (8000f9c <HAL_ETH_MspInit+0x188>)
 8000e7c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000e80:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 8000e84:	4b45      	ldr	r3, [pc, #276]	; (8000f9c <HAL_ETH_MspInit+0x188>)
 8000e86:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8000e8a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000e8e:	61bb      	str	r3, [r7, #24]
 8000e90:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000e92:	4b42      	ldr	r3, [pc, #264]	; (8000f9c <HAL_ETH_MspInit+0x188>)
 8000e94:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000e98:	4a40      	ldr	r2, [pc, #256]	; (8000f9c <HAL_ETH_MspInit+0x188>)
 8000e9a:	f043 0304 	orr.w	r3, r3, #4
 8000e9e:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000ea2:	4b3e      	ldr	r3, [pc, #248]	; (8000f9c <HAL_ETH_MspInit+0x188>)
 8000ea4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000ea8:	f003 0304 	and.w	r3, r3, #4
 8000eac:	617b      	str	r3, [r7, #20]
 8000eae:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000eb0:	4b3a      	ldr	r3, [pc, #232]	; (8000f9c <HAL_ETH_MspInit+0x188>)
 8000eb2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000eb6:	4a39      	ldr	r2, [pc, #228]	; (8000f9c <HAL_ETH_MspInit+0x188>)
 8000eb8:	f043 0301 	orr.w	r3, r3, #1
 8000ebc:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000ec0:	4b36      	ldr	r3, [pc, #216]	; (8000f9c <HAL_ETH_MspInit+0x188>)
 8000ec2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000ec6:	f003 0301 	and.w	r3, r3, #1
 8000eca:	613b      	str	r3, [r7, #16]
 8000ecc:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000ece:	4b33      	ldr	r3, [pc, #204]	; (8000f9c <HAL_ETH_MspInit+0x188>)
 8000ed0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000ed4:	4a31      	ldr	r2, [pc, #196]	; (8000f9c <HAL_ETH_MspInit+0x188>)
 8000ed6:	f043 0302 	orr.w	r3, r3, #2
 8000eda:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000ede:	4b2f      	ldr	r3, [pc, #188]	; (8000f9c <HAL_ETH_MspInit+0x188>)
 8000ee0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000ee4:	f003 0302 	and.w	r3, r3, #2
 8000ee8:	60fb      	str	r3, [r7, #12]
 8000eea:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOG_CLK_ENABLE();
 8000eec:	4b2b      	ldr	r3, [pc, #172]	; (8000f9c <HAL_ETH_MspInit+0x188>)
 8000eee:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000ef2:	4a2a      	ldr	r2, [pc, #168]	; (8000f9c <HAL_ETH_MspInit+0x188>)
 8000ef4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000ef8:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000efc:	4b27      	ldr	r3, [pc, #156]	; (8000f9c <HAL_ETH_MspInit+0x188>)
 8000efe:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000f02:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000f06:	60bb      	str	r3, [r7, #8]
 8000f08:	68bb      	ldr	r3, [r7, #8]
    PC5     ------> ETH_RXD1
    PB13     ------> ETH_TXD1
    PG11     ------> ETH_TX_EN
    PG13     ------> ETH_TXD0
    */
    GPIO_InitStruct.Pin = RMII_MDC_Pin|RMII_RXD0_Pin|RMII_RXD1_Pin;
 8000f0a:	2332      	movs	r3, #50	; 0x32
 8000f0c:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000f0e:	2302      	movs	r3, #2
 8000f10:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f12:	2300      	movs	r3, #0
 8000f14:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000f16:	2300      	movs	r3, #0
 8000f18:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8000f1a:	230b      	movs	r3, #11
 8000f1c:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000f1e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000f22:	4619      	mov	r1, r3
 8000f24:	481e      	ldr	r0, [pc, #120]	; (8000fa0 <HAL_ETH_MspInit+0x18c>)
 8000f26:	f001 fde9 	bl	8002afc <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = RMII_REF_CLK_Pin|RMII_MDIO_Pin|RMII_CRS_DV_Pin;
 8000f2a:	2386      	movs	r3, #134	; 0x86
 8000f2c:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000f2e:	2302      	movs	r3, #2
 8000f30:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f32:	2300      	movs	r3, #0
 8000f34:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000f36:	2300      	movs	r3, #0
 8000f38:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8000f3a:	230b      	movs	r3, #11
 8000f3c:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000f3e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000f42:	4619      	mov	r1, r3
 8000f44:	4817      	ldr	r0, [pc, #92]	; (8000fa4 <HAL_ETH_MspInit+0x190>)
 8000f46:	f001 fdd9 	bl	8002afc <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = RMII_TXD1_Pin;
 8000f4a:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000f4e:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000f50:	2302      	movs	r3, #2
 8000f52:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f54:	2300      	movs	r3, #0
 8000f56:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000f58:	2300      	movs	r3, #0
 8000f5a:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8000f5c:	230b      	movs	r3, #11
 8000f5e:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(RMII_TXD1_GPIO_Port, &GPIO_InitStruct);
 8000f60:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000f64:	4619      	mov	r1, r3
 8000f66:	4810      	ldr	r0, [pc, #64]	; (8000fa8 <HAL_ETH_MspInit+0x194>)
 8000f68:	f001 fdc8 	bl	8002afc <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = RMII_TX_EN_Pin|RMII_TXD0_Pin;
 8000f6c:	f44f 5320 	mov.w	r3, #10240	; 0x2800
 8000f70:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000f72:	2302      	movs	r3, #2
 8000f74:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f76:	2300      	movs	r3, #0
 8000f78:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000f7a:	2300      	movs	r3, #0
 8000f7c:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8000f7e:	230b      	movs	r3, #11
 8000f80:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8000f82:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000f86:	4619      	mov	r1, r3
 8000f88:	4808      	ldr	r0, [pc, #32]	; (8000fac <HAL_ETH_MspInit+0x198>)
 8000f8a:	f001 fdb7 	bl	8002afc <HAL_GPIO_Init>
  /* USER CODE BEGIN ETH_MspInit 1 */

  /* USER CODE END ETH_MspInit 1 */
  }

}
 8000f8e:	bf00      	nop
 8000f90:	3738      	adds	r7, #56	; 0x38
 8000f92:	46bd      	mov	sp, r7
 8000f94:	bd80      	pop	{r7, pc}
 8000f96:	bf00      	nop
 8000f98:	40028000 	.word	0x40028000
 8000f9c:	58024400 	.word	0x58024400
 8000fa0:	58020800 	.word	0x58020800
 8000fa4:	58020000 	.word	0x58020000
 8000fa8:	58020400 	.word	0x58020400
 8000fac:	58021800 	.word	0x58021800

08000fb0 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000fb0:	b580      	push	{r7, lr}
 8000fb2:	b0b6      	sub	sp, #216	; 0xd8
 8000fb4:	af00      	add	r7, sp, #0
 8000fb6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000fb8:	f107 03c4 	add.w	r3, r7, #196	; 0xc4
 8000fbc:	2200      	movs	r2, #0
 8000fbe:	601a      	str	r2, [r3, #0]
 8000fc0:	605a      	str	r2, [r3, #4]
 8000fc2:	609a      	str	r2, [r3, #8]
 8000fc4:	60da      	str	r2, [r3, #12]
 8000fc6:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000fc8:	f107 0310 	add.w	r3, r7, #16
 8000fcc:	22b4      	movs	r2, #180	; 0xb4
 8000fce:	2100      	movs	r1, #0
 8000fd0:	4618      	mov	r0, r3
 8000fd2:	f006 ff45 	bl	8007e60 <memset>
  if(huart->Instance==USART3)
 8000fd6:	687b      	ldr	r3, [r7, #4]
 8000fd8:	681b      	ldr	r3, [r3, #0]
 8000fda:	4a29      	ldr	r2, [pc, #164]	; (8001080 <HAL_UART_MspInit+0xd0>)
 8000fdc:	4293      	cmp	r3, r2
 8000fde:	d14a      	bne.n	8001076 <HAL_UART_MspInit+0xc6>
  /* USER CODE BEGIN USART3_MspInit 0 */

  /* USER CODE END USART3_MspInit 0 */
  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 8000fe0:	2302      	movs	r3, #2
 8000fe2:	613b      	str	r3, [r7, #16]
    PeriphClkInitStruct.Usart234578ClockSelection = RCC_USART234578CLKSOURCE_D2PCLK1;
 8000fe4:	2300      	movs	r3, #0
 8000fe6:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000fea:	f107 0310 	add.w	r3, r7, #16
 8000fee:	4618      	mov	r0, r3
 8000ff0:	f002 fe9a 	bl	8003d28 <HAL_RCCEx_PeriphCLKConfig>
 8000ff4:	4603      	mov	r3, r0
 8000ff6:	2b00      	cmp	r3, #0
 8000ff8:	d001      	beq.n	8000ffe <HAL_UART_MspInit+0x4e>
    {
      Error_Handler();
 8000ffa:	f7ff feeb 	bl	8000dd4 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 8000ffe:	4b21      	ldr	r3, [pc, #132]	; (8001084 <HAL_UART_MspInit+0xd4>)
 8001000:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8001004:	4a1f      	ldr	r2, [pc, #124]	; (8001084 <HAL_UART_MspInit+0xd4>)
 8001006:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800100a:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 800100e:	4b1d      	ldr	r3, [pc, #116]	; (8001084 <HAL_UART_MspInit+0xd4>)
 8001010:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8001014:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8001018:	60fb      	str	r3, [r7, #12]
 800101a:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 800101c:	4b19      	ldr	r3, [pc, #100]	; (8001084 <HAL_UART_MspInit+0xd4>)
 800101e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001022:	4a18      	ldr	r2, [pc, #96]	; (8001084 <HAL_UART_MspInit+0xd4>)
 8001024:	f043 0308 	orr.w	r3, r3, #8
 8001028:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800102c:	4b15      	ldr	r3, [pc, #84]	; (8001084 <HAL_UART_MspInit+0xd4>)
 800102e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001032:	f003 0308 	and.w	r3, r3, #8
 8001036:	60bb      	str	r3, [r7, #8]
 8001038:	68bb      	ldr	r3, [r7, #8]
    /**USART3 GPIO Configuration
    PD8     ------> USART3_TX
    PD9     ------> USART3_RX
    */
    GPIO_InitStruct.Pin = STLK_VCP_RX_Pin|STLK_VCP_TX_Pin;
 800103a:	f44f 7340 	mov.w	r3, #768	; 0x300
 800103e:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001042:	2302      	movs	r3, #2
 8001044:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001048:	2300      	movs	r3, #0
 800104a:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800104e:	2300      	movs	r3, #0
 8001050:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8001054:	2307      	movs	r3, #7
 8001056:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800105a:	f107 03c4 	add.w	r3, r7, #196	; 0xc4
 800105e:	4619      	mov	r1, r3
 8001060:	4809      	ldr	r0, [pc, #36]	; (8001088 <HAL_UART_MspInit+0xd8>)
 8001062:	f001 fd4b 	bl	8002afc <HAL_GPIO_Init>

    /* USART3 interrupt Init */
    HAL_NVIC_SetPriority(USART3_IRQn, 0, 0);
 8001066:	2200      	movs	r2, #0
 8001068:	2100      	movs	r1, #0
 800106a:	2027      	movs	r0, #39	; 0x27
 800106c:	f000 fb99 	bl	80017a2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART3_IRQn);
 8001070:	2027      	movs	r0, #39	; 0x27
 8001072:	f000 fbb0 	bl	80017d6 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 8001076:	bf00      	nop
 8001078:	37d8      	adds	r7, #216	; 0xd8
 800107a:	46bd      	mov	sp, r7
 800107c:	bd80      	pop	{r7, pc}
 800107e:	bf00      	nop
 8001080:	40004800 	.word	0x40004800
 8001084:	58024400 	.word	0x58024400
 8001088:	58020c00 	.word	0x58020c00

0800108c <HAL_FMC_MspInit>:

}

static uint32_t FMC_Initialized = 0;

static void HAL_FMC_MspInit(void){
 800108c:	b580      	push	{r7, lr}
 800108e:	b0b4      	sub	sp, #208	; 0xd0
 8001090:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN FMC_MspInit 0 */

  /* USER CODE END FMC_MspInit 0 */
  GPIO_InitTypeDef GPIO_InitStruct ={0};
 8001092:	f107 03bc 	add.w	r3, r7, #188	; 0xbc
 8001096:	2200      	movs	r2, #0
 8001098:	601a      	str	r2, [r3, #0]
 800109a:	605a      	str	r2, [r3, #4]
 800109c:	609a      	str	r2, [r3, #8]
 800109e:	60da      	str	r2, [r3, #12]
 80010a0:	611a      	str	r2, [r3, #16]
  if (FMC_Initialized) {
 80010a2:	4b43      	ldr	r3, [pc, #268]	; (80011b0 <HAL_FMC_MspInit+0x124>)
 80010a4:	681b      	ldr	r3, [r3, #0]
 80010a6:	2b00      	cmp	r3, #0
 80010a8:	d17e      	bne.n	80011a8 <HAL_FMC_MspInit+0x11c>
    return;
  }
  FMC_Initialized = 1;
 80010aa:	4b41      	ldr	r3, [pc, #260]	; (80011b0 <HAL_FMC_MspInit+0x124>)
 80010ac:	2201      	movs	r2, #1
 80010ae:	601a      	str	r2, [r3, #0]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80010b0:	f107 0308 	add.w	r3, r7, #8
 80010b4:	22b4      	movs	r2, #180	; 0xb4
 80010b6:	2100      	movs	r1, #0
 80010b8:	4618      	mov	r0, r3
 80010ba:	f006 fed1 	bl	8007e60 <memset>

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_FMC;
 80010be:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80010c2:	60bb      	str	r3, [r7, #8]
    PeriphClkInitStruct.FmcClockSelection = RCC_FMCCLKSOURCE_D1HCLK;
 80010c4:	2300      	movs	r3, #0
 80010c6:	64fb      	str	r3, [r7, #76]	; 0x4c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80010c8:	f107 0308 	add.w	r3, r7, #8
 80010cc:	4618      	mov	r0, r3
 80010ce:	f002 fe2b 	bl	8003d28 <HAL_RCCEx_PeriphCLKConfig>
 80010d2:	4603      	mov	r3, r0
 80010d4:	2b00      	cmp	r3, #0
 80010d6:	d001      	beq.n	80010dc <HAL_FMC_MspInit+0x50>
    {
      Error_Handler();
 80010d8:	f7ff fe7c 	bl	8000dd4 <Error_Handler>
    }

  /* Peripheral clock enable */
  __HAL_RCC_FMC_CLK_ENABLE();
 80010dc:	4b35      	ldr	r3, [pc, #212]	; (80011b4 <HAL_FMC_MspInit+0x128>)
 80010de:	f8d3 30d4 	ldr.w	r3, [r3, #212]	; 0xd4
 80010e2:	4a34      	ldr	r2, [pc, #208]	; (80011b4 <HAL_FMC_MspInit+0x128>)
 80010e4:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 80010e8:	f8c2 30d4 	str.w	r3, [r2, #212]	; 0xd4
 80010ec:	4b31      	ldr	r3, [pc, #196]	; (80011b4 <HAL_FMC_MspInit+0x128>)
 80010ee:	f8d3 30d4 	ldr.w	r3, [r3, #212]	; 0xd4
 80010f2:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80010f6:	607b      	str	r3, [r7, #4]
 80010f8:	687b      	ldr	r3, [r7, #4]
  PD0   ------> FMC_D2
  PD1   ------> FMC_D3
  PD4   ------> FMC_NOE
  PD5   ------> FMC_NWE
  */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 80010fa:	2303      	movs	r3, #3
 80010fc:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001100:	2302      	movs	r3, #2
 8001102:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001106:	2300      	movs	r3, #0
 8001108:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800110c:	2303      	movs	r3, #3
 800110e:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8001112:	230c      	movs	r3, #12
 8001114:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8001118:	f107 03bc 	add.w	r3, r7, #188	; 0xbc
 800111c:	4619      	mov	r1, r3
 800111e:	4826      	ldr	r0, [pc, #152]	; (80011b8 <HAL_FMC_MspInit+0x12c>)
 8001120:	f001 fcec 	bl	8002afc <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = GPIO_PIN_7|GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10;
 8001124:	f44f 63f0 	mov.w	r3, #1920	; 0x780
 8001128:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800112c:	2302      	movs	r3, #2
 800112e:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001132:	2300      	movs	r3, #0
 8001134:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001138:	2303      	movs	r3, #3
 800113a:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 800113e:	230c      	movs	r3, #12
 8001140:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8001144:	f107 03bc 	add.w	r3, r7, #188	; 0xbc
 8001148:	4619      	mov	r1, r3
 800114a:	481c      	ldr	r0, [pc, #112]	; (80011bc <HAL_FMC_MspInit+0x130>)
 800114c:	f001 fcd6 	bl	8002afc <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = GPIO_PIN_14|GPIO_PIN_15|GPIO_PIN_0|GPIO_PIN_1
 8001150:	f24c 0333 	movw	r3, #49203	; 0xc033
 8001154:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
                          |GPIO_PIN_4|GPIO_PIN_5;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001158:	2302      	movs	r3, #2
 800115a:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800115e:	2300      	movs	r3, #0
 8001160:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001164:	2303      	movs	r3, #3
 8001166:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 800116a:	230c      	movs	r3, #12
 800116c:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001170:	f107 03bc 	add.w	r3, r7, #188	; 0xbc
 8001174:	4619      	mov	r1, r3
 8001176:	4812      	ldr	r0, [pc, #72]	; (80011c0 <HAL_FMC_MspInit+0x134>)
 8001178:	f001 fcc0 	bl	8002afc <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 800117c:	23c0      	movs	r3, #192	; 0xc0
 800117e:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001182:	2302      	movs	r3, #2
 8001184:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001188:	2300      	movs	r3, #0
 800118a:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800118e:	2303      	movs	r3, #3
 8001190:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
  GPIO_InitStruct.Alternate = GPIO_AF9_FMC;
 8001194:	2309      	movs	r3, #9
 8001196:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800119a:	f107 03bc 	add.w	r3, r7, #188	; 0xbc
 800119e:	4619      	mov	r1, r3
 80011a0:	4808      	ldr	r0, [pc, #32]	; (80011c4 <HAL_FMC_MspInit+0x138>)
 80011a2:	f001 fcab 	bl	8002afc <HAL_GPIO_Init>
 80011a6:	e000      	b.n	80011aa <HAL_FMC_MspInit+0x11e>
    return;
 80011a8:	bf00      	nop

  /* USER CODE BEGIN FMC_MspInit 1 */

  /* USER CODE END FMC_MspInit 1 */
}
 80011aa:	37d0      	adds	r7, #208	; 0xd0
 80011ac:	46bd      	mov	sp, r7
 80011ae:	bd80      	pop	{r7, pc}
 80011b0:	200001e0 	.word	0x200001e0
 80011b4:	58024400 	.word	0x58024400
 80011b8:	58021400 	.word	0x58021400
 80011bc:	58021000 	.word	0x58021000
 80011c0:	58020c00 	.word	0x58020c00
 80011c4:	58020800 	.word	0x58020800

080011c8 <HAL_SRAM_MspInit>:

void HAL_SRAM_MspInit(SRAM_HandleTypeDef* hsram){
 80011c8:	b580      	push	{r7, lr}
 80011ca:	b082      	sub	sp, #8
 80011cc:	af00      	add	r7, sp, #0
 80011ce:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN SRAM_MspInit 0 */

  /* USER CODE END SRAM_MspInit 0 */
  HAL_FMC_MspInit();
 80011d0:	f7ff ff5c 	bl	800108c <HAL_FMC_MspInit>
  /* USER CODE BEGIN SRAM_MspInit 1 */

  /* USER CODE END SRAM_MspInit 1 */
}
 80011d4:	bf00      	nop
 80011d6:	3708      	adds	r7, #8
 80011d8:	46bd      	mov	sp, r7
 80011da:	bd80      	pop	{r7, pc}

080011dc <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80011dc:	b480      	push	{r7}
 80011de:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80011e0:	e7fe      	b.n	80011e0 <NMI_Handler+0x4>

080011e2 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80011e2:	b480      	push	{r7}
 80011e4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80011e6:	e7fe      	b.n	80011e6 <HardFault_Handler+0x4>

080011e8 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80011e8:	b480      	push	{r7}
 80011ea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80011ec:	e7fe      	b.n	80011ec <MemManage_Handler+0x4>

080011ee <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80011ee:	b480      	push	{r7}
 80011f0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80011f2:	e7fe      	b.n	80011f2 <BusFault_Handler+0x4>

080011f4 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80011f4:	b480      	push	{r7}
 80011f6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80011f8:	e7fe      	b.n	80011f8 <UsageFault_Handler+0x4>

080011fa <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80011fa:	b480      	push	{r7}
 80011fc:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80011fe:	bf00      	nop
 8001200:	46bd      	mov	sp, r7
 8001202:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001206:	4770      	bx	lr

08001208 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001208:	b480      	push	{r7}
 800120a:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800120c:	bf00      	nop
 800120e:	46bd      	mov	sp, r7
 8001210:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001214:	4770      	bx	lr

08001216 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001216:	b480      	push	{r7}
 8001218:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800121a:	bf00      	nop
 800121c:	46bd      	mov	sp, r7
 800121e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001222:	4770      	bx	lr

08001224 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001224:	b580      	push	{r7, lr}
 8001226:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001228:	f000 f9ac 	bl	8001584 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800122c:	bf00      	nop
 800122e:	bd80      	pop	{r7, pc}

08001230 <USART3_IRQHandler>:

/**
  * @brief This function handles USART3 global interrupt.
  */
void USART3_IRQHandler(void)
{
 8001230:	b580      	push	{r7, lr}
 8001232:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART3_IRQn 0 */

  /* USER CODE END USART3_IRQn 0 */
  HAL_UART_IRQHandler(&huart3);
 8001234:	4802      	ldr	r0, [pc, #8]	; (8001240 <USART3_IRQHandler+0x10>)
 8001236:	f004 f9c9 	bl	80055cc <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART3_IRQn 1 */

  /* USER CODE END USART3_IRQn 1 */
}
 800123a:	bf00      	nop
 800123c:	bd80      	pop	{r7, pc}
 800123e:	bf00      	nop
 8001240:	20000a0c 	.word	0x20000a0c

08001244 <_read>:
	_kill(status, -1);
	while (1) {}		/* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001244:	b580      	push	{r7, lr}
 8001246:	b086      	sub	sp, #24
 8001248:	af00      	add	r7, sp, #0
 800124a:	60f8      	str	r0, [r7, #12]
 800124c:	60b9      	str	r1, [r7, #8]
 800124e:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001250:	2300      	movs	r3, #0
 8001252:	617b      	str	r3, [r7, #20]
 8001254:	e00a      	b.n	800126c <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8001256:	f3af 8000 	nop.w
 800125a:	4601      	mov	r1, r0
 800125c:	68bb      	ldr	r3, [r7, #8]
 800125e:	1c5a      	adds	r2, r3, #1
 8001260:	60ba      	str	r2, [r7, #8]
 8001262:	b2ca      	uxtb	r2, r1
 8001264:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001266:	697b      	ldr	r3, [r7, #20]
 8001268:	3301      	adds	r3, #1
 800126a:	617b      	str	r3, [r7, #20]
 800126c:	697a      	ldr	r2, [r7, #20]
 800126e:	687b      	ldr	r3, [r7, #4]
 8001270:	429a      	cmp	r2, r3
 8001272:	dbf0      	blt.n	8001256 <_read+0x12>
	}

return len;
 8001274:	687b      	ldr	r3, [r7, #4]
}
 8001276:	4618      	mov	r0, r3
 8001278:	3718      	adds	r7, #24
 800127a:	46bd      	mov	sp, r7
 800127c:	bd80      	pop	{r7, pc}

0800127e <_close>:
	}
	return len;
}

int _close(int file)
{
 800127e:	b480      	push	{r7}
 8001280:	b083      	sub	sp, #12
 8001282:	af00      	add	r7, sp, #0
 8001284:	6078      	str	r0, [r7, #4]
	return -1;
 8001286:	f04f 33ff 	mov.w	r3, #4294967295
}
 800128a:	4618      	mov	r0, r3
 800128c:	370c      	adds	r7, #12
 800128e:	46bd      	mov	sp, r7
 8001290:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001294:	4770      	bx	lr

08001296 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8001296:	b480      	push	{r7}
 8001298:	b083      	sub	sp, #12
 800129a:	af00      	add	r7, sp, #0
 800129c:	6078      	str	r0, [r7, #4]
 800129e:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 80012a0:	683b      	ldr	r3, [r7, #0]
 80012a2:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80012a6:	605a      	str	r2, [r3, #4]
	return 0;
 80012a8:	2300      	movs	r3, #0
}
 80012aa:	4618      	mov	r0, r3
 80012ac:	370c      	adds	r7, #12
 80012ae:	46bd      	mov	sp, r7
 80012b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012b4:	4770      	bx	lr

080012b6 <_isatty>:

int _isatty(int file)
{
 80012b6:	b480      	push	{r7}
 80012b8:	b083      	sub	sp, #12
 80012ba:	af00      	add	r7, sp, #0
 80012bc:	6078      	str	r0, [r7, #4]
	return 1;
 80012be:	2301      	movs	r3, #1
}
 80012c0:	4618      	mov	r0, r3
 80012c2:	370c      	adds	r7, #12
 80012c4:	46bd      	mov	sp, r7
 80012c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012ca:	4770      	bx	lr

080012cc <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80012cc:	b480      	push	{r7}
 80012ce:	b085      	sub	sp, #20
 80012d0:	af00      	add	r7, sp, #0
 80012d2:	60f8      	str	r0, [r7, #12]
 80012d4:	60b9      	str	r1, [r7, #8]
 80012d6:	607a      	str	r2, [r7, #4]
	return 0;
 80012d8:	2300      	movs	r3, #0
}
 80012da:	4618      	mov	r0, r3
 80012dc:	3714      	adds	r7, #20
 80012de:	46bd      	mov	sp, r7
 80012e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012e4:	4770      	bx	lr
	...

080012e8 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80012e8:	b580      	push	{r7, lr}
 80012ea:	b086      	sub	sp, #24
 80012ec:	af00      	add	r7, sp, #0
 80012ee:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80012f0:	4a14      	ldr	r2, [pc, #80]	; (8001344 <_sbrk+0x5c>)
 80012f2:	4b15      	ldr	r3, [pc, #84]	; (8001348 <_sbrk+0x60>)
 80012f4:	1ad3      	subs	r3, r2, r3
 80012f6:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80012f8:	697b      	ldr	r3, [r7, #20]
 80012fa:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80012fc:	4b13      	ldr	r3, [pc, #76]	; (800134c <_sbrk+0x64>)
 80012fe:	681b      	ldr	r3, [r3, #0]
 8001300:	2b00      	cmp	r3, #0
 8001302:	d102      	bne.n	800130a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001304:	4b11      	ldr	r3, [pc, #68]	; (800134c <_sbrk+0x64>)
 8001306:	4a12      	ldr	r2, [pc, #72]	; (8001350 <_sbrk+0x68>)
 8001308:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800130a:	4b10      	ldr	r3, [pc, #64]	; (800134c <_sbrk+0x64>)
 800130c:	681a      	ldr	r2, [r3, #0]
 800130e:	687b      	ldr	r3, [r7, #4]
 8001310:	4413      	add	r3, r2
 8001312:	693a      	ldr	r2, [r7, #16]
 8001314:	429a      	cmp	r2, r3
 8001316:	d207      	bcs.n	8001328 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001318:	f006 fd78 	bl	8007e0c <__errno>
 800131c:	4603      	mov	r3, r0
 800131e:	220c      	movs	r2, #12
 8001320:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001322:	f04f 33ff 	mov.w	r3, #4294967295
 8001326:	e009      	b.n	800133c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001328:	4b08      	ldr	r3, [pc, #32]	; (800134c <_sbrk+0x64>)
 800132a:	681b      	ldr	r3, [r3, #0]
 800132c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800132e:	4b07      	ldr	r3, [pc, #28]	; (800134c <_sbrk+0x64>)
 8001330:	681a      	ldr	r2, [r3, #0]
 8001332:	687b      	ldr	r3, [r7, #4]
 8001334:	4413      	add	r3, r2
 8001336:	4a05      	ldr	r2, [pc, #20]	; (800134c <_sbrk+0x64>)
 8001338:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800133a:	68fb      	ldr	r3, [r7, #12]
}
 800133c:	4618      	mov	r0, r3
 800133e:	3718      	adds	r7, #24
 8001340:	46bd      	mov	sp, r7
 8001342:	bd80      	pop	{r7, pc}
 8001344:	20020000 	.word	0x20020000
 8001348:	00000400 	.word	0x00000400
 800134c:	200001e4 	.word	0x200001e4
 8001350:	200025b8 	.word	0x200025b8

08001354 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8001354:	b480      	push	{r7}
 8001356:	af00      	add	r7, sp, #0
 __IO uint32_t tmpreg;
#endif /* DATA_IN_D2_SRAM */

  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8001358:	4b34      	ldr	r3, [pc, #208]	; (800142c <SystemInit+0xd8>)
 800135a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800135e:	4a33      	ldr	r2, [pc, #204]	; (800142c <SystemInit+0xd8>)
 8001360:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001364:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/

   /* Increasing the CPU frequency */
  if(FLASH_LATENCY_DEFAULT  > (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 8001368:	4b31      	ldr	r3, [pc, #196]	; (8001430 <SystemInit+0xdc>)
 800136a:	681b      	ldr	r3, [r3, #0]
 800136c:	f003 030f 	and.w	r3, r3, #15
 8001370:	2b06      	cmp	r3, #6
 8001372:	d807      	bhi.n	8001384 <SystemInit+0x30>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
	MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 8001374:	4b2e      	ldr	r3, [pc, #184]	; (8001430 <SystemInit+0xdc>)
 8001376:	681b      	ldr	r3, [r3, #0]
 8001378:	f023 030f 	bic.w	r3, r3, #15
 800137c:	4a2c      	ldr	r2, [pc, #176]	; (8001430 <SystemInit+0xdc>)
 800137e:	f043 0307 	orr.w	r3, r3, #7
 8001382:	6013      	str	r3, [r2, #0]
  }

  /* Set HSION bit */
  RCC->CR |= RCC_CR_HSION;
 8001384:	4b2b      	ldr	r3, [pc, #172]	; (8001434 <SystemInit+0xe0>)
 8001386:	681b      	ldr	r3, [r3, #0]
 8001388:	4a2a      	ldr	r2, [pc, #168]	; (8001434 <SystemInit+0xe0>)
 800138a:	f043 0301 	orr.w	r3, r3, #1
 800138e:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 8001390:	4b28      	ldr	r3, [pc, #160]	; (8001434 <SystemInit+0xe0>)
 8001392:	2200      	movs	r2, #0
 8001394:	611a      	str	r2, [r3, #16]

  /* Reset HSEON, HSECSSON, CSION, HSI48ON, CSIKERON, PLL1ON, PLL2ON and PLL3ON bits */
  RCC->CR &= 0xEAF6ED7FU;
 8001396:	4b27      	ldr	r3, [pc, #156]	; (8001434 <SystemInit+0xe0>)
 8001398:	681a      	ldr	r2, [r3, #0]
 800139a:	4926      	ldr	r1, [pc, #152]	; (8001434 <SystemInit+0xe0>)
 800139c:	4b26      	ldr	r3, [pc, #152]	; (8001438 <SystemInit+0xe4>)
 800139e:	4013      	ands	r3, r2
 80013a0:	600b      	str	r3, [r1, #0]
  
   /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLASH_LATENCY_DEFAULT  < (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 80013a2:	4b23      	ldr	r3, [pc, #140]	; (8001430 <SystemInit+0xdc>)
 80013a4:	681b      	ldr	r3, [r3, #0]
 80013a6:	f003 0308 	and.w	r3, r3, #8
 80013aa:	2b00      	cmp	r3, #0
 80013ac:	d007      	beq.n	80013be <SystemInit+0x6a>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
	MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 80013ae:	4b20      	ldr	r3, [pc, #128]	; (8001430 <SystemInit+0xdc>)
 80013b0:	681b      	ldr	r3, [r3, #0]
 80013b2:	f023 030f 	bic.w	r3, r3, #15
 80013b6:	4a1e      	ldr	r2, [pc, #120]	; (8001430 <SystemInit+0xdc>)
 80013b8:	f043 0307 	orr.w	r3, r3, #7
 80013bc:	6013      	str	r3, [r2, #0]
  }

#if defined(D3_SRAM_BASE)
  /* Reset D1CFGR register */
  RCC->D1CFGR = 0x00000000;
 80013be:	4b1d      	ldr	r3, [pc, #116]	; (8001434 <SystemInit+0xe0>)
 80013c0:	2200      	movs	r2, #0
 80013c2:	619a      	str	r2, [r3, #24]

  /* Reset D2CFGR register */
  RCC->D2CFGR = 0x00000000;
 80013c4:	4b1b      	ldr	r3, [pc, #108]	; (8001434 <SystemInit+0xe0>)
 80013c6:	2200      	movs	r2, #0
 80013c8:	61da      	str	r2, [r3, #28]

  /* Reset D3CFGR register */
  RCC->D3CFGR = 0x00000000;
 80013ca:	4b1a      	ldr	r3, [pc, #104]	; (8001434 <SystemInit+0xe0>)
 80013cc:	2200      	movs	r2, #0
 80013ce:	621a      	str	r2, [r3, #32]

  /* Reset SRDCFGR register */
  RCC->SRDCFGR = 0x00000000;
#endif
  /* Reset PLLCKSELR register */
  RCC->PLLCKSELR = 0x02020200;
 80013d0:	4b18      	ldr	r3, [pc, #96]	; (8001434 <SystemInit+0xe0>)
 80013d2:	4a1a      	ldr	r2, [pc, #104]	; (800143c <SystemInit+0xe8>)
 80013d4:	629a      	str	r2, [r3, #40]	; 0x28

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x01FF0000;
 80013d6:	4b17      	ldr	r3, [pc, #92]	; (8001434 <SystemInit+0xe0>)
 80013d8:	4a19      	ldr	r2, [pc, #100]	; (8001440 <SystemInit+0xec>)
 80013da:	62da      	str	r2, [r3, #44]	; 0x2c
  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x01010280;
 80013dc:	4b15      	ldr	r3, [pc, #84]	; (8001434 <SystemInit+0xe0>)
 80013de:	4a19      	ldr	r2, [pc, #100]	; (8001444 <SystemInit+0xf0>)
 80013e0:	631a      	str	r2, [r3, #48]	; 0x30
  /* Reset PLL1FRACR register */
  RCC->PLL1FRACR = 0x00000000;
 80013e2:	4b14      	ldr	r3, [pc, #80]	; (8001434 <SystemInit+0xe0>)
 80013e4:	2200      	movs	r2, #0
 80013e6:	635a      	str	r2, [r3, #52]	; 0x34

  /* Reset PLL2DIVR register */
  RCC->PLL2DIVR = 0x01010280;
 80013e8:	4b12      	ldr	r3, [pc, #72]	; (8001434 <SystemInit+0xe0>)
 80013ea:	4a16      	ldr	r2, [pc, #88]	; (8001444 <SystemInit+0xf0>)
 80013ec:	639a      	str	r2, [r3, #56]	; 0x38

  /* Reset PLL2FRACR register */

  RCC->PLL2FRACR = 0x00000000;
 80013ee:	4b11      	ldr	r3, [pc, #68]	; (8001434 <SystemInit+0xe0>)
 80013f0:	2200      	movs	r2, #0
 80013f2:	63da      	str	r2, [r3, #60]	; 0x3c
  /* Reset PLL3DIVR register */
  RCC->PLL3DIVR = 0x01010280;
 80013f4:	4b0f      	ldr	r3, [pc, #60]	; (8001434 <SystemInit+0xe0>)
 80013f6:	4a13      	ldr	r2, [pc, #76]	; (8001444 <SystemInit+0xf0>)
 80013f8:	641a      	str	r2, [r3, #64]	; 0x40

  /* Reset PLL3FRACR register */
  RCC->PLL3FRACR = 0x00000000;
 80013fa:	4b0e      	ldr	r3, [pc, #56]	; (8001434 <SystemInit+0xe0>)
 80013fc:	2200      	movs	r2, #0
 80013fe:	645a      	str	r2, [r3, #68]	; 0x44

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8001400:	4b0c      	ldr	r3, [pc, #48]	; (8001434 <SystemInit+0xe0>)
 8001402:	681b      	ldr	r3, [r3, #0]
 8001404:	4a0b      	ldr	r2, [pc, #44]	; (8001434 <SystemInit+0xe0>)
 8001406:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800140a:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 800140c:	4b09      	ldr	r3, [pc, #36]	; (8001434 <SystemInit+0xe0>)
 800140e:	2200      	movs	r2, #0
 8001410:	661a      	str	r2, [r3, #96]	; 0x60
  /*
   * Disable the FMC bank1 (enabled after reset).
   * This, prevents CPU speculation access on this bank which blocks the use of FMC during
   * 24us. During this time the others FMC master (such as LTDC) cannot use it!
   */
  FMC_Bank1_R->BTCR[0] = 0x000030D2;
 8001412:	4b0d      	ldr	r3, [pc, #52]	; (8001448 <SystemInit+0xf4>)
 8001414:	f243 02d2 	movw	r2, #12498	; 0x30d2
 8001418:	601a      	str	r2, [r3, #0]

  /* Configure the Vector Table location add offset address for cortex-M7 ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = D1_AXISRAM_BASE  | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal AXI-RAM */
#else
  SCB->VTOR = FLASH_BANK1_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 800141a:	4b04      	ldr	r3, [pc, #16]	; (800142c <SystemInit+0xd8>)
 800141c:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8001420:	609a      	str	r2, [r3, #8]
#endif

#endif /*DUAL_CORE && CORE_CM4*/

}
 8001422:	bf00      	nop
 8001424:	46bd      	mov	sp, r7
 8001426:	f85d 7b04 	ldr.w	r7, [sp], #4
 800142a:	4770      	bx	lr
 800142c:	e000ed00 	.word	0xe000ed00
 8001430:	52002000 	.word	0x52002000
 8001434:	58024400 	.word	0x58024400
 8001438:	eaf6ed7f 	.word	0xeaf6ed7f
 800143c:	02020200 	.word	0x02020200
 8001440:	01ff0000 	.word	0x01ff0000
 8001444:	01010280 	.word	0x01010280
 8001448:	52004000 	.word	0x52004000

0800144c <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack      /* set stack pointer */
 800144c:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001484 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit
 8001450:	f7ff ff80 	bl	8001354 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001454:	480c      	ldr	r0, [pc, #48]	; (8001488 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8001456:	490d      	ldr	r1, [pc, #52]	; (800148c <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8001458:	4a0d      	ldr	r2, [pc, #52]	; (8001490 <LoopFillZerobss+0x1a>)
  movs r3, #0
 800145a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800145c:	e002      	b.n	8001464 <LoopCopyDataInit>

0800145e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800145e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001460:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001462:	3304      	adds	r3, #4

08001464 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001464:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001466:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001468:	d3f9      	bcc.n	800145e <CopyDataInit>
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800146a:	4a0a      	ldr	r2, [pc, #40]	; (8001494 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 800146c:	4c0a      	ldr	r4, [pc, #40]	; (8001498 <LoopFillZerobss+0x22>)
  movs r3, #0
 800146e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001470:	e001      	b.n	8001476 <LoopFillZerobss>

08001472 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001472:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001474:	3204      	adds	r2, #4

08001476 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001476:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001478:	d3fb      	bcc.n	8001472 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 800147a:	f006 fccd 	bl	8007e18 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800147e:	f7ff f97f 	bl	8000780 <main>
  bx  lr
 8001482:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8001484:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8001488:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800148c:	20000104 	.word	0x20000104
  ldr r2, =_sidata
 8001490:	08008ffc 	.word	0x08008ffc
  ldr r2, =_sbss
 8001494:	200001c4 	.word	0x200001c4
  ldr r4, =_ebss
 8001498:	200025b8 	.word	0x200025b8

0800149c <ADC3_IRQHandler>:
 * @retval None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 800149c:	e7fe      	b.n	800149c <ADC3_IRQHandler>
	...

080014a0 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80014a0:	b580      	push	{r7, lr}
 80014a2:	b082      	sub	sp, #8
 80014a4:	af00      	add	r7, sp, #0
   __HAL_ART_CONFIG_BASE_ADDRESS(0x08100000UL);  /* Configure the Cortex-M4 ART Base address to the Flash Bank 2 : */
   __HAL_ART_ENABLE();                           /* Enable the Cortex-M4 ART */
#endif /* DUAL_CORE &&  CORE_CM4 */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80014a6:	2003      	movs	r0, #3
 80014a8:	f000 f970 	bl	800178c <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 80014ac:	f002 fa66 	bl	800397c <HAL_RCC_GetSysClockFreq>
 80014b0:	4602      	mov	r2, r0
 80014b2:	4b15      	ldr	r3, [pc, #84]	; (8001508 <HAL_Init+0x68>)
 80014b4:	699b      	ldr	r3, [r3, #24]
 80014b6:	0a1b      	lsrs	r3, r3, #8
 80014b8:	f003 030f 	and.w	r3, r3, #15
 80014bc:	4913      	ldr	r1, [pc, #76]	; (800150c <HAL_Init+0x6c>)
 80014be:	5ccb      	ldrb	r3, [r1, r3]
 80014c0:	f003 031f 	and.w	r3, r3, #31
 80014c4:	fa22 f303 	lsr.w	r3, r2, r3
 80014c8:	607b      	str	r3, [r7, #4]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

  /* Update the SystemD2Clock global variable */
#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 80014ca:	4b0f      	ldr	r3, [pc, #60]	; (8001508 <HAL_Init+0x68>)
 80014cc:	699b      	ldr	r3, [r3, #24]
 80014ce:	f003 030f 	and.w	r3, r3, #15
 80014d2:	4a0e      	ldr	r2, [pc, #56]	; (800150c <HAL_Init+0x6c>)
 80014d4:	5cd3      	ldrb	r3, [r2, r3]
 80014d6:	f003 031f 	and.w	r3, r3, #31
 80014da:	687a      	ldr	r2, [r7, #4]
 80014dc:	fa22 f303 	lsr.w	r3, r2, r3
 80014e0:	4a0b      	ldr	r2, [pc, #44]	; (8001510 <HAL_Init+0x70>)
 80014e2:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 80014e4:	4a0b      	ldr	r2, [pc, #44]	; (8001514 <HAL_Init+0x74>)
 80014e6:	687b      	ldr	r3, [r7, #4]
 80014e8:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 80014ea:	2000      	movs	r0, #0
 80014ec:	f000 f814 	bl	8001518 <HAL_InitTick>
 80014f0:	4603      	mov	r3, r0
 80014f2:	2b00      	cmp	r3, #0
 80014f4:	d001      	beq.n	80014fa <HAL_Init+0x5a>
  {
    return HAL_ERROR;
 80014f6:	2301      	movs	r3, #1
 80014f8:	e002      	b.n	8001500 <HAL_Init+0x60>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 80014fa:	f7ff fc71 	bl	8000de0 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80014fe:	2300      	movs	r3, #0
}
 8001500:	4618      	mov	r0, r3
 8001502:	3708      	adds	r7, #8
 8001504:	46bd      	mov	sp, r7
 8001506:	bd80      	pop	{r7, pc}
 8001508:	58024400 	.word	0x58024400
 800150c:	08008f1c 	.word	0x08008f1c
 8001510:	2000006c 	.word	0x2000006c
 8001514:	20000068 	.word	0x20000068

08001518 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001518:	b580      	push	{r7, lr}
 800151a:	b082      	sub	sp, #8
 800151c:	af00      	add	r7, sp, #0
 800151e:	6078      	str	r0, [r7, #4]
  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that don't take the value zero)*/
  if((uint32_t)uwTickFreq == 0UL)
 8001520:	4b15      	ldr	r3, [pc, #84]	; (8001578 <HAL_InitTick+0x60>)
 8001522:	781b      	ldrb	r3, [r3, #0]
 8001524:	2b00      	cmp	r3, #0
 8001526:	d101      	bne.n	800152c <HAL_InitTick+0x14>
  {
    return HAL_ERROR;
 8001528:	2301      	movs	r3, #1
 800152a:	e021      	b.n	8001570 <HAL_InitTick+0x58>
  }

    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000UL / (uint32_t)uwTickFreq)) > 0U)
 800152c:	4b13      	ldr	r3, [pc, #76]	; (800157c <HAL_InitTick+0x64>)
 800152e:	681a      	ldr	r2, [r3, #0]
 8001530:	4b11      	ldr	r3, [pc, #68]	; (8001578 <HAL_InitTick+0x60>)
 8001532:	781b      	ldrb	r3, [r3, #0]
 8001534:	4619      	mov	r1, r3
 8001536:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800153a:	fbb3 f3f1 	udiv	r3, r3, r1
 800153e:	fbb2 f3f3 	udiv	r3, r2, r3
 8001542:	4618      	mov	r0, r3
 8001544:	f000 f955 	bl	80017f2 <HAL_SYSTICK_Config>
 8001548:	4603      	mov	r3, r0
 800154a:	2b00      	cmp	r3, #0
 800154c:	d001      	beq.n	8001552 <HAL_InitTick+0x3a>
    {
      return HAL_ERROR;
 800154e:	2301      	movs	r3, #1
 8001550:	e00e      	b.n	8001570 <HAL_InitTick+0x58>
    }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001552:	687b      	ldr	r3, [r7, #4]
 8001554:	2b0f      	cmp	r3, #15
 8001556:	d80a      	bhi.n	800156e <HAL_InitTick+0x56>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001558:	2200      	movs	r2, #0
 800155a:	6879      	ldr	r1, [r7, #4]
 800155c:	f04f 30ff 	mov.w	r0, #4294967295
 8001560:	f000 f91f 	bl	80017a2 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001564:	4a06      	ldr	r2, [pc, #24]	; (8001580 <HAL_InitTick+0x68>)
 8001566:	687b      	ldr	r3, [r7, #4]
 8001568:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800156a:	2300      	movs	r3, #0
 800156c:	e000      	b.n	8001570 <HAL_InitTick+0x58>
    return HAL_ERROR;
 800156e:	2301      	movs	r3, #1
}
 8001570:	4618      	mov	r0, r3
 8001572:	3708      	adds	r7, #8
 8001574:	46bd      	mov	sp, r7
 8001576:	bd80      	pop	{r7, pc}
 8001578:	20000074 	.word	0x20000074
 800157c:	20000068 	.word	0x20000068
 8001580:	20000070 	.word	0x20000070

08001584 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001584:	b480      	push	{r7}
 8001586:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8001588:	4b06      	ldr	r3, [pc, #24]	; (80015a4 <HAL_IncTick+0x20>)
 800158a:	781b      	ldrb	r3, [r3, #0]
 800158c:	461a      	mov	r2, r3
 800158e:	4b06      	ldr	r3, [pc, #24]	; (80015a8 <HAL_IncTick+0x24>)
 8001590:	681b      	ldr	r3, [r3, #0]
 8001592:	4413      	add	r3, r2
 8001594:	4a04      	ldr	r2, [pc, #16]	; (80015a8 <HAL_IncTick+0x24>)
 8001596:	6013      	str	r3, [r2, #0]
}
 8001598:	bf00      	nop
 800159a:	46bd      	mov	sp, r7
 800159c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015a0:	4770      	bx	lr
 80015a2:	bf00      	nop
 80015a4:	20000074 	.word	0x20000074
 80015a8:	200025a4 	.word	0x200025a4

080015ac <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80015ac:	b480      	push	{r7}
 80015ae:	af00      	add	r7, sp, #0
  return uwTick;
 80015b0:	4b03      	ldr	r3, [pc, #12]	; (80015c0 <HAL_GetTick+0x14>)
 80015b2:	681b      	ldr	r3, [r3, #0]
}
 80015b4:	4618      	mov	r0, r3
 80015b6:	46bd      	mov	sp, r7
 80015b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015bc:	4770      	bx	lr
 80015be:	bf00      	nop
 80015c0:	200025a4 	.word	0x200025a4

080015c4 <HAL_SYSCFG_ETHInterfaceSelect>:
  *   @arg SYSCFG_ETH_MII : Select the Media Independent Interface
  *   @arg SYSCFG_ETH_RMII: Select the Reduced Media Independent Interface
  * @retval None
  */
void HAL_SYSCFG_ETHInterfaceSelect(uint32_t SYSCFG_ETHInterface)
{
 80015c4:	b480      	push	{r7}
 80015c6:	b083      	sub	sp, #12
 80015c8:	af00      	add	r7, sp, #0
 80015ca:	6078      	str	r0, [r7, #4]
  /* Check the parameter */
  assert_param(IS_SYSCFG_ETHERNET_CONFIG(SYSCFG_ETHInterface));

  MODIFY_REG(SYSCFG->PMCR, SYSCFG_PMCR_EPIS_SEL, (uint32_t)(SYSCFG_ETHInterface));
 80015cc:	4b06      	ldr	r3, [pc, #24]	; (80015e8 <HAL_SYSCFG_ETHInterfaceSelect+0x24>)
 80015ce:	685b      	ldr	r3, [r3, #4]
 80015d0:	f423 0260 	bic.w	r2, r3, #14680064	; 0xe00000
 80015d4:	4904      	ldr	r1, [pc, #16]	; (80015e8 <HAL_SYSCFG_ETHInterfaceSelect+0x24>)
 80015d6:	687b      	ldr	r3, [r7, #4]
 80015d8:	4313      	orrs	r3, r2
 80015da:	604b      	str	r3, [r1, #4]
}
 80015dc:	bf00      	nop
 80015de:	370c      	adds	r7, #12
 80015e0:	46bd      	mov	sp, r7
 80015e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015e6:	4770      	bx	lr
 80015e8:	58000400 	.word	0x58000400

080015ec <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80015ec:	b480      	push	{r7}
 80015ee:	b085      	sub	sp, #20
 80015f0:	af00      	add	r7, sp, #0
 80015f2:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80015f4:	687b      	ldr	r3, [r7, #4]
 80015f6:	f003 0307 	and.w	r3, r3, #7
 80015fa:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80015fc:	4b0b      	ldr	r3, [pc, #44]	; (800162c <__NVIC_SetPriorityGrouping+0x40>)
 80015fe:	68db      	ldr	r3, [r3, #12]
 8001600:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001602:	68ba      	ldr	r2, [r7, #8]
 8001604:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001608:	4013      	ands	r3, r2
 800160a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800160c:	68fb      	ldr	r3, [r7, #12]
 800160e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001610:	68bb      	ldr	r3, [r7, #8]
 8001612:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8001614:	4b06      	ldr	r3, [pc, #24]	; (8001630 <__NVIC_SetPriorityGrouping+0x44>)
 8001616:	4313      	orrs	r3, r2
 8001618:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800161a:	4a04      	ldr	r2, [pc, #16]	; (800162c <__NVIC_SetPriorityGrouping+0x40>)
 800161c:	68bb      	ldr	r3, [r7, #8]
 800161e:	60d3      	str	r3, [r2, #12]
}
 8001620:	bf00      	nop
 8001622:	3714      	adds	r7, #20
 8001624:	46bd      	mov	sp, r7
 8001626:	f85d 7b04 	ldr.w	r7, [sp], #4
 800162a:	4770      	bx	lr
 800162c:	e000ed00 	.word	0xe000ed00
 8001630:	05fa0000 	.word	0x05fa0000

08001634 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001634:	b480      	push	{r7}
 8001636:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001638:	4b04      	ldr	r3, [pc, #16]	; (800164c <__NVIC_GetPriorityGrouping+0x18>)
 800163a:	68db      	ldr	r3, [r3, #12]
 800163c:	0a1b      	lsrs	r3, r3, #8
 800163e:	f003 0307 	and.w	r3, r3, #7
}
 8001642:	4618      	mov	r0, r3
 8001644:	46bd      	mov	sp, r7
 8001646:	f85d 7b04 	ldr.w	r7, [sp], #4
 800164a:	4770      	bx	lr
 800164c:	e000ed00 	.word	0xe000ed00

08001650 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001650:	b480      	push	{r7}
 8001652:	b083      	sub	sp, #12
 8001654:	af00      	add	r7, sp, #0
 8001656:	4603      	mov	r3, r0
 8001658:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 800165a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800165e:	2b00      	cmp	r3, #0
 8001660:	db0b      	blt.n	800167a <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001662:	88fb      	ldrh	r3, [r7, #6]
 8001664:	f003 021f 	and.w	r2, r3, #31
 8001668:	4907      	ldr	r1, [pc, #28]	; (8001688 <__NVIC_EnableIRQ+0x38>)
 800166a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800166e:	095b      	lsrs	r3, r3, #5
 8001670:	2001      	movs	r0, #1
 8001672:	fa00 f202 	lsl.w	r2, r0, r2
 8001676:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 800167a:	bf00      	nop
 800167c:	370c      	adds	r7, #12
 800167e:	46bd      	mov	sp, r7
 8001680:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001684:	4770      	bx	lr
 8001686:	bf00      	nop
 8001688:	e000e100 	.word	0xe000e100

0800168c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800168c:	b480      	push	{r7}
 800168e:	b083      	sub	sp, #12
 8001690:	af00      	add	r7, sp, #0
 8001692:	4603      	mov	r3, r0
 8001694:	6039      	str	r1, [r7, #0]
 8001696:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8001698:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800169c:	2b00      	cmp	r3, #0
 800169e:	db0a      	blt.n	80016b6 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80016a0:	683b      	ldr	r3, [r7, #0]
 80016a2:	b2da      	uxtb	r2, r3
 80016a4:	490c      	ldr	r1, [pc, #48]	; (80016d8 <__NVIC_SetPriority+0x4c>)
 80016a6:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80016aa:	0112      	lsls	r2, r2, #4
 80016ac:	b2d2      	uxtb	r2, r2
 80016ae:	440b      	add	r3, r1
 80016b0:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80016b4:	e00a      	b.n	80016cc <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80016b6:	683b      	ldr	r3, [r7, #0]
 80016b8:	b2da      	uxtb	r2, r3
 80016ba:	4908      	ldr	r1, [pc, #32]	; (80016dc <__NVIC_SetPriority+0x50>)
 80016bc:	88fb      	ldrh	r3, [r7, #6]
 80016be:	f003 030f 	and.w	r3, r3, #15
 80016c2:	3b04      	subs	r3, #4
 80016c4:	0112      	lsls	r2, r2, #4
 80016c6:	b2d2      	uxtb	r2, r2
 80016c8:	440b      	add	r3, r1
 80016ca:	761a      	strb	r2, [r3, #24]
}
 80016cc:	bf00      	nop
 80016ce:	370c      	adds	r7, #12
 80016d0:	46bd      	mov	sp, r7
 80016d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016d6:	4770      	bx	lr
 80016d8:	e000e100 	.word	0xe000e100
 80016dc:	e000ed00 	.word	0xe000ed00

080016e0 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80016e0:	b480      	push	{r7}
 80016e2:	b089      	sub	sp, #36	; 0x24
 80016e4:	af00      	add	r7, sp, #0
 80016e6:	60f8      	str	r0, [r7, #12]
 80016e8:	60b9      	str	r1, [r7, #8]
 80016ea:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80016ec:	68fb      	ldr	r3, [r7, #12]
 80016ee:	f003 0307 	and.w	r3, r3, #7
 80016f2:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80016f4:	69fb      	ldr	r3, [r7, #28]
 80016f6:	f1c3 0307 	rsb	r3, r3, #7
 80016fa:	2b04      	cmp	r3, #4
 80016fc:	bf28      	it	cs
 80016fe:	2304      	movcs	r3, #4
 8001700:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001702:	69fb      	ldr	r3, [r7, #28]
 8001704:	3304      	adds	r3, #4
 8001706:	2b06      	cmp	r3, #6
 8001708:	d902      	bls.n	8001710 <NVIC_EncodePriority+0x30>
 800170a:	69fb      	ldr	r3, [r7, #28]
 800170c:	3b03      	subs	r3, #3
 800170e:	e000      	b.n	8001712 <NVIC_EncodePriority+0x32>
 8001710:	2300      	movs	r3, #0
 8001712:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001714:	f04f 32ff 	mov.w	r2, #4294967295
 8001718:	69bb      	ldr	r3, [r7, #24]
 800171a:	fa02 f303 	lsl.w	r3, r2, r3
 800171e:	43da      	mvns	r2, r3
 8001720:	68bb      	ldr	r3, [r7, #8]
 8001722:	401a      	ands	r2, r3
 8001724:	697b      	ldr	r3, [r7, #20]
 8001726:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001728:	f04f 31ff 	mov.w	r1, #4294967295
 800172c:	697b      	ldr	r3, [r7, #20]
 800172e:	fa01 f303 	lsl.w	r3, r1, r3
 8001732:	43d9      	mvns	r1, r3
 8001734:	687b      	ldr	r3, [r7, #4]
 8001736:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001738:	4313      	orrs	r3, r2
         );
}
 800173a:	4618      	mov	r0, r3
 800173c:	3724      	adds	r7, #36	; 0x24
 800173e:	46bd      	mov	sp, r7
 8001740:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001744:	4770      	bx	lr
	...

08001748 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001748:	b580      	push	{r7, lr}
 800174a:	b082      	sub	sp, #8
 800174c:	af00      	add	r7, sp, #0
 800174e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001750:	687b      	ldr	r3, [r7, #4]
 8001752:	3b01      	subs	r3, #1
 8001754:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001758:	d301      	bcc.n	800175e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800175a:	2301      	movs	r3, #1
 800175c:	e00f      	b.n	800177e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800175e:	4a0a      	ldr	r2, [pc, #40]	; (8001788 <SysTick_Config+0x40>)
 8001760:	687b      	ldr	r3, [r7, #4]
 8001762:	3b01      	subs	r3, #1
 8001764:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001766:	210f      	movs	r1, #15
 8001768:	f04f 30ff 	mov.w	r0, #4294967295
 800176c:	f7ff ff8e 	bl	800168c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001770:	4b05      	ldr	r3, [pc, #20]	; (8001788 <SysTick_Config+0x40>)
 8001772:	2200      	movs	r2, #0
 8001774:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001776:	4b04      	ldr	r3, [pc, #16]	; (8001788 <SysTick_Config+0x40>)
 8001778:	2207      	movs	r2, #7
 800177a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800177c:	2300      	movs	r3, #0
}
 800177e:	4618      	mov	r0, r3
 8001780:	3708      	adds	r7, #8
 8001782:	46bd      	mov	sp, r7
 8001784:	bd80      	pop	{r7, pc}
 8001786:	bf00      	nop
 8001788:	e000e010 	.word	0xe000e010

0800178c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800178c:	b580      	push	{r7, lr}
 800178e:	b082      	sub	sp, #8
 8001790:	af00      	add	r7, sp, #0
 8001792:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001794:	6878      	ldr	r0, [r7, #4]
 8001796:	f7ff ff29 	bl	80015ec <__NVIC_SetPriorityGrouping>
}
 800179a:	bf00      	nop
 800179c:	3708      	adds	r7, #8
 800179e:	46bd      	mov	sp, r7
 80017a0:	bd80      	pop	{r7, pc}

080017a2 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80017a2:	b580      	push	{r7, lr}
 80017a4:	b086      	sub	sp, #24
 80017a6:	af00      	add	r7, sp, #0
 80017a8:	4603      	mov	r3, r0
 80017aa:	60b9      	str	r1, [r7, #8]
 80017ac:	607a      	str	r2, [r7, #4]
 80017ae:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 80017b0:	f7ff ff40 	bl	8001634 <__NVIC_GetPriorityGrouping>
 80017b4:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80017b6:	687a      	ldr	r2, [r7, #4]
 80017b8:	68b9      	ldr	r1, [r7, #8]
 80017ba:	6978      	ldr	r0, [r7, #20]
 80017bc:	f7ff ff90 	bl	80016e0 <NVIC_EncodePriority>
 80017c0:	4602      	mov	r2, r0
 80017c2:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 80017c6:	4611      	mov	r1, r2
 80017c8:	4618      	mov	r0, r3
 80017ca:	f7ff ff5f 	bl	800168c <__NVIC_SetPriority>
}
 80017ce:	bf00      	nop
 80017d0:	3718      	adds	r7, #24
 80017d2:	46bd      	mov	sp, r7
 80017d4:	bd80      	pop	{r7, pc}

080017d6 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32h7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80017d6:	b580      	push	{r7, lr}
 80017d8:	b082      	sub	sp, #8
 80017da:	af00      	add	r7, sp, #0
 80017dc:	4603      	mov	r3, r0
 80017de:	80fb      	strh	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80017e0:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80017e4:	4618      	mov	r0, r3
 80017e6:	f7ff ff33 	bl	8001650 <__NVIC_EnableIRQ>
}
 80017ea:	bf00      	nop
 80017ec:	3708      	adds	r7, #8
 80017ee:	46bd      	mov	sp, r7
 80017f0:	bd80      	pop	{r7, pc}

080017f2 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status   - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80017f2:	b580      	push	{r7, lr}
 80017f4:	b082      	sub	sp, #8
 80017f6:	af00      	add	r7, sp, #0
 80017f8:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80017fa:	6878      	ldr	r0, [r7, #4]
 80017fc:	f7ff ffa4 	bl	8001748 <SysTick_Config>
 8001800:	4603      	mov	r3, r0
}
 8001802:	4618      	mov	r0, r3
 8001804:	3708      	adds	r7, #8
 8001806:	46bd      	mov	sp, r7
 8001808:	bd80      	pop	{r7, pc}
	...

0800180c <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 800180c:	b580      	push	{r7, lr}
 800180e:	b086      	sub	sp, #24
 8001810:	af00      	add	r7, sp, #0
 8001812:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs_dma;
  BDMA_Base_Registers *regs_bdma;
  const __IO uint32_t *enableRegister;

  uint32_t tickstart = HAL_GetTick();
 8001814:	f7ff feca 	bl	80015ac <HAL_GetTick>
 8001818:	6138      	str	r0, [r7, #16]

 /* Check the DMA peripheral handle */
  if(hdma == NULL)
 800181a:	687b      	ldr	r3, [r7, #4]
 800181c:	2b00      	cmp	r3, #0
 800181e:	d101      	bne.n	8001824 <HAL_DMA_Abort+0x18>
  {
    return HAL_ERROR;
 8001820:	2301      	movs	r3, #1
 8001822:	e2dc      	b.n	8001dde <HAL_DMA_Abort+0x5d2>
  }

  /* Check the DMA peripheral state */
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8001824:	687b      	ldr	r3, [r7, #4]
 8001826:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800182a:	b2db      	uxtb	r3, r3
 800182c:	2b02      	cmp	r3, #2
 800182e:	d008      	beq.n	8001842 <HAL_DMA_Abort+0x36>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001830:	687b      	ldr	r3, [r7, #4]
 8001832:	2280      	movs	r2, #128	; 0x80
 8001834:	655a      	str	r2, [r3, #84]	; 0x54

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001836:	687b      	ldr	r3, [r7, #4]
 8001838:	2200      	movs	r2, #0
 800183a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    return HAL_ERROR;
 800183e:	2301      	movs	r3, #1
 8001840:	e2cd      	b.n	8001dde <HAL_DMA_Abort+0x5d2>
  }
  else
  {
    /* Disable all the transfer interrupts */
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8001842:	687b      	ldr	r3, [r7, #4]
 8001844:	681b      	ldr	r3, [r3, #0]
 8001846:	4a76      	ldr	r2, [pc, #472]	; (8001a20 <HAL_DMA_Abort+0x214>)
 8001848:	4293      	cmp	r3, r2
 800184a:	d04a      	beq.n	80018e2 <HAL_DMA_Abort+0xd6>
 800184c:	687b      	ldr	r3, [r7, #4]
 800184e:	681b      	ldr	r3, [r3, #0]
 8001850:	4a74      	ldr	r2, [pc, #464]	; (8001a24 <HAL_DMA_Abort+0x218>)
 8001852:	4293      	cmp	r3, r2
 8001854:	d045      	beq.n	80018e2 <HAL_DMA_Abort+0xd6>
 8001856:	687b      	ldr	r3, [r7, #4]
 8001858:	681b      	ldr	r3, [r3, #0]
 800185a:	4a73      	ldr	r2, [pc, #460]	; (8001a28 <HAL_DMA_Abort+0x21c>)
 800185c:	4293      	cmp	r3, r2
 800185e:	d040      	beq.n	80018e2 <HAL_DMA_Abort+0xd6>
 8001860:	687b      	ldr	r3, [r7, #4]
 8001862:	681b      	ldr	r3, [r3, #0]
 8001864:	4a71      	ldr	r2, [pc, #452]	; (8001a2c <HAL_DMA_Abort+0x220>)
 8001866:	4293      	cmp	r3, r2
 8001868:	d03b      	beq.n	80018e2 <HAL_DMA_Abort+0xd6>
 800186a:	687b      	ldr	r3, [r7, #4]
 800186c:	681b      	ldr	r3, [r3, #0]
 800186e:	4a70      	ldr	r2, [pc, #448]	; (8001a30 <HAL_DMA_Abort+0x224>)
 8001870:	4293      	cmp	r3, r2
 8001872:	d036      	beq.n	80018e2 <HAL_DMA_Abort+0xd6>
 8001874:	687b      	ldr	r3, [r7, #4]
 8001876:	681b      	ldr	r3, [r3, #0]
 8001878:	4a6e      	ldr	r2, [pc, #440]	; (8001a34 <HAL_DMA_Abort+0x228>)
 800187a:	4293      	cmp	r3, r2
 800187c:	d031      	beq.n	80018e2 <HAL_DMA_Abort+0xd6>
 800187e:	687b      	ldr	r3, [r7, #4]
 8001880:	681b      	ldr	r3, [r3, #0]
 8001882:	4a6d      	ldr	r2, [pc, #436]	; (8001a38 <HAL_DMA_Abort+0x22c>)
 8001884:	4293      	cmp	r3, r2
 8001886:	d02c      	beq.n	80018e2 <HAL_DMA_Abort+0xd6>
 8001888:	687b      	ldr	r3, [r7, #4]
 800188a:	681b      	ldr	r3, [r3, #0]
 800188c:	4a6b      	ldr	r2, [pc, #428]	; (8001a3c <HAL_DMA_Abort+0x230>)
 800188e:	4293      	cmp	r3, r2
 8001890:	d027      	beq.n	80018e2 <HAL_DMA_Abort+0xd6>
 8001892:	687b      	ldr	r3, [r7, #4]
 8001894:	681b      	ldr	r3, [r3, #0]
 8001896:	4a6a      	ldr	r2, [pc, #424]	; (8001a40 <HAL_DMA_Abort+0x234>)
 8001898:	4293      	cmp	r3, r2
 800189a:	d022      	beq.n	80018e2 <HAL_DMA_Abort+0xd6>
 800189c:	687b      	ldr	r3, [r7, #4]
 800189e:	681b      	ldr	r3, [r3, #0]
 80018a0:	4a68      	ldr	r2, [pc, #416]	; (8001a44 <HAL_DMA_Abort+0x238>)
 80018a2:	4293      	cmp	r3, r2
 80018a4:	d01d      	beq.n	80018e2 <HAL_DMA_Abort+0xd6>
 80018a6:	687b      	ldr	r3, [r7, #4]
 80018a8:	681b      	ldr	r3, [r3, #0]
 80018aa:	4a67      	ldr	r2, [pc, #412]	; (8001a48 <HAL_DMA_Abort+0x23c>)
 80018ac:	4293      	cmp	r3, r2
 80018ae:	d018      	beq.n	80018e2 <HAL_DMA_Abort+0xd6>
 80018b0:	687b      	ldr	r3, [r7, #4]
 80018b2:	681b      	ldr	r3, [r3, #0]
 80018b4:	4a65      	ldr	r2, [pc, #404]	; (8001a4c <HAL_DMA_Abort+0x240>)
 80018b6:	4293      	cmp	r3, r2
 80018b8:	d013      	beq.n	80018e2 <HAL_DMA_Abort+0xd6>
 80018ba:	687b      	ldr	r3, [r7, #4]
 80018bc:	681b      	ldr	r3, [r3, #0]
 80018be:	4a64      	ldr	r2, [pc, #400]	; (8001a50 <HAL_DMA_Abort+0x244>)
 80018c0:	4293      	cmp	r3, r2
 80018c2:	d00e      	beq.n	80018e2 <HAL_DMA_Abort+0xd6>
 80018c4:	687b      	ldr	r3, [r7, #4]
 80018c6:	681b      	ldr	r3, [r3, #0]
 80018c8:	4a62      	ldr	r2, [pc, #392]	; (8001a54 <HAL_DMA_Abort+0x248>)
 80018ca:	4293      	cmp	r3, r2
 80018cc:	d009      	beq.n	80018e2 <HAL_DMA_Abort+0xd6>
 80018ce:	687b      	ldr	r3, [r7, #4]
 80018d0:	681b      	ldr	r3, [r3, #0]
 80018d2:	4a61      	ldr	r2, [pc, #388]	; (8001a58 <HAL_DMA_Abort+0x24c>)
 80018d4:	4293      	cmp	r3, r2
 80018d6:	d004      	beq.n	80018e2 <HAL_DMA_Abort+0xd6>
 80018d8:	687b      	ldr	r3, [r7, #4]
 80018da:	681b      	ldr	r3, [r3, #0]
 80018dc:	4a5f      	ldr	r2, [pc, #380]	; (8001a5c <HAL_DMA_Abort+0x250>)
 80018de:	4293      	cmp	r3, r2
 80018e0:	d101      	bne.n	80018e6 <HAL_DMA_Abort+0xda>
 80018e2:	2301      	movs	r3, #1
 80018e4:	e000      	b.n	80018e8 <HAL_DMA_Abort+0xdc>
 80018e6:	2300      	movs	r3, #0
 80018e8:	2b00      	cmp	r3, #0
 80018ea:	d013      	beq.n	8001914 <HAL_DMA_Abort+0x108>
    {
       /* Disable DMA All Interrupts  */
      ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME | DMA_IT_HT);
 80018ec:	687b      	ldr	r3, [r7, #4]
 80018ee:	681b      	ldr	r3, [r3, #0]
 80018f0:	681a      	ldr	r2, [r3, #0]
 80018f2:	687b      	ldr	r3, [r7, #4]
 80018f4:	681b      	ldr	r3, [r3, #0]
 80018f6:	f022 021e 	bic.w	r2, r2, #30
 80018fa:	601a      	str	r2, [r3, #0]
      ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR &= ~(DMA_IT_FE);
 80018fc:	687b      	ldr	r3, [r7, #4]
 80018fe:	681b      	ldr	r3, [r3, #0]
 8001900:	695a      	ldr	r2, [r3, #20]
 8001902:	687b      	ldr	r3, [r7, #4]
 8001904:	681b      	ldr	r3, [r3, #0]
 8001906:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800190a:	615a      	str	r2, [r3, #20]

      enableRegister = (__IO uint32_t *)(&(((DMA_Stream_TypeDef   *)hdma->Instance)->CR));
 800190c:	687b      	ldr	r3, [r7, #4]
 800190e:	681b      	ldr	r3, [r3, #0]
 8001910:	617b      	str	r3, [r7, #20]
 8001912:	e00a      	b.n	800192a <HAL_DMA_Abort+0x11e>
    }
    else /* BDMA channel */
    {
      /* Disable DMA All Interrupts */
      ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  &= ~(BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE);
 8001914:	687b      	ldr	r3, [r7, #4]
 8001916:	681b      	ldr	r3, [r3, #0]
 8001918:	681a      	ldr	r2, [r3, #0]
 800191a:	687b      	ldr	r3, [r7, #4]
 800191c:	681b      	ldr	r3, [r3, #0]
 800191e:	f022 020e 	bic.w	r2, r2, #14
 8001922:	601a      	str	r2, [r3, #0]

      enableRegister = (__IO uint32_t *)(&(((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR));
 8001924:	687b      	ldr	r3, [r7, #4]
 8001926:	681b      	ldr	r3, [r3, #0]
 8001928:	617b      	str	r3, [r7, #20]
    }

    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 800192a:	687b      	ldr	r3, [r7, #4]
 800192c:	681b      	ldr	r3, [r3, #0]
 800192e:	4a3c      	ldr	r2, [pc, #240]	; (8001a20 <HAL_DMA_Abort+0x214>)
 8001930:	4293      	cmp	r3, r2
 8001932:	d072      	beq.n	8001a1a <HAL_DMA_Abort+0x20e>
 8001934:	687b      	ldr	r3, [r7, #4]
 8001936:	681b      	ldr	r3, [r3, #0]
 8001938:	4a3a      	ldr	r2, [pc, #232]	; (8001a24 <HAL_DMA_Abort+0x218>)
 800193a:	4293      	cmp	r3, r2
 800193c:	d06d      	beq.n	8001a1a <HAL_DMA_Abort+0x20e>
 800193e:	687b      	ldr	r3, [r7, #4]
 8001940:	681b      	ldr	r3, [r3, #0]
 8001942:	4a39      	ldr	r2, [pc, #228]	; (8001a28 <HAL_DMA_Abort+0x21c>)
 8001944:	4293      	cmp	r3, r2
 8001946:	d068      	beq.n	8001a1a <HAL_DMA_Abort+0x20e>
 8001948:	687b      	ldr	r3, [r7, #4]
 800194a:	681b      	ldr	r3, [r3, #0]
 800194c:	4a37      	ldr	r2, [pc, #220]	; (8001a2c <HAL_DMA_Abort+0x220>)
 800194e:	4293      	cmp	r3, r2
 8001950:	d063      	beq.n	8001a1a <HAL_DMA_Abort+0x20e>
 8001952:	687b      	ldr	r3, [r7, #4]
 8001954:	681b      	ldr	r3, [r3, #0]
 8001956:	4a36      	ldr	r2, [pc, #216]	; (8001a30 <HAL_DMA_Abort+0x224>)
 8001958:	4293      	cmp	r3, r2
 800195a:	d05e      	beq.n	8001a1a <HAL_DMA_Abort+0x20e>
 800195c:	687b      	ldr	r3, [r7, #4]
 800195e:	681b      	ldr	r3, [r3, #0]
 8001960:	4a34      	ldr	r2, [pc, #208]	; (8001a34 <HAL_DMA_Abort+0x228>)
 8001962:	4293      	cmp	r3, r2
 8001964:	d059      	beq.n	8001a1a <HAL_DMA_Abort+0x20e>
 8001966:	687b      	ldr	r3, [r7, #4]
 8001968:	681b      	ldr	r3, [r3, #0]
 800196a:	4a33      	ldr	r2, [pc, #204]	; (8001a38 <HAL_DMA_Abort+0x22c>)
 800196c:	4293      	cmp	r3, r2
 800196e:	d054      	beq.n	8001a1a <HAL_DMA_Abort+0x20e>
 8001970:	687b      	ldr	r3, [r7, #4]
 8001972:	681b      	ldr	r3, [r3, #0]
 8001974:	4a31      	ldr	r2, [pc, #196]	; (8001a3c <HAL_DMA_Abort+0x230>)
 8001976:	4293      	cmp	r3, r2
 8001978:	d04f      	beq.n	8001a1a <HAL_DMA_Abort+0x20e>
 800197a:	687b      	ldr	r3, [r7, #4]
 800197c:	681b      	ldr	r3, [r3, #0]
 800197e:	4a30      	ldr	r2, [pc, #192]	; (8001a40 <HAL_DMA_Abort+0x234>)
 8001980:	4293      	cmp	r3, r2
 8001982:	d04a      	beq.n	8001a1a <HAL_DMA_Abort+0x20e>
 8001984:	687b      	ldr	r3, [r7, #4]
 8001986:	681b      	ldr	r3, [r3, #0]
 8001988:	4a2e      	ldr	r2, [pc, #184]	; (8001a44 <HAL_DMA_Abort+0x238>)
 800198a:	4293      	cmp	r3, r2
 800198c:	d045      	beq.n	8001a1a <HAL_DMA_Abort+0x20e>
 800198e:	687b      	ldr	r3, [r7, #4]
 8001990:	681b      	ldr	r3, [r3, #0]
 8001992:	4a2d      	ldr	r2, [pc, #180]	; (8001a48 <HAL_DMA_Abort+0x23c>)
 8001994:	4293      	cmp	r3, r2
 8001996:	d040      	beq.n	8001a1a <HAL_DMA_Abort+0x20e>
 8001998:	687b      	ldr	r3, [r7, #4]
 800199a:	681b      	ldr	r3, [r3, #0]
 800199c:	4a2b      	ldr	r2, [pc, #172]	; (8001a4c <HAL_DMA_Abort+0x240>)
 800199e:	4293      	cmp	r3, r2
 80019a0:	d03b      	beq.n	8001a1a <HAL_DMA_Abort+0x20e>
 80019a2:	687b      	ldr	r3, [r7, #4]
 80019a4:	681b      	ldr	r3, [r3, #0]
 80019a6:	4a2a      	ldr	r2, [pc, #168]	; (8001a50 <HAL_DMA_Abort+0x244>)
 80019a8:	4293      	cmp	r3, r2
 80019aa:	d036      	beq.n	8001a1a <HAL_DMA_Abort+0x20e>
 80019ac:	687b      	ldr	r3, [r7, #4]
 80019ae:	681b      	ldr	r3, [r3, #0]
 80019b0:	4a28      	ldr	r2, [pc, #160]	; (8001a54 <HAL_DMA_Abort+0x248>)
 80019b2:	4293      	cmp	r3, r2
 80019b4:	d031      	beq.n	8001a1a <HAL_DMA_Abort+0x20e>
 80019b6:	687b      	ldr	r3, [r7, #4]
 80019b8:	681b      	ldr	r3, [r3, #0]
 80019ba:	4a27      	ldr	r2, [pc, #156]	; (8001a58 <HAL_DMA_Abort+0x24c>)
 80019bc:	4293      	cmp	r3, r2
 80019be:	d02c      	beq.n	8001a1a <HAL_DMA_Abort+0x20e>
 80019c0:	687b      	ldr	r3, [r7, #4]
 80019c2:	681b      	ldr	r3, [r3, #0]
 80019c4:	4a25      	ldr	r2, [pc, #148]	; (8001a5c <HAL_DMA_Abort+0x250>)
 80019c6:	4293      	cmp	r3, r2
 80019c8:	d027      	beq.n	8001a1a <HAL_DMA_Abort+0x20e>
 80019ca:	687b      	ldr	r3, [r7, #4]
 80019cc:	681b      	ldr	r3, [r3, #0]
 80019ce:	4a24      	ldr	r2, [pc, #144]	; (8001a60 <HAL_DMA_Abort+0x254>)
 80019d0:	4293      	cmp	r3, r2
 80019d2:	d022      	beq.n	8001a1a <HAL_DMA_Abort+0x20e>
 80019d4:	687b      	ldr	r3, [r7, #4]
 80019d6:	681b      	ldr	r3, [r3, #0]
 80019d8:	4a22      	ldr	r2, [pc, #136]	; (8001a64 <HAL_DMA_Abort+0x258>)
 80019da:	4293      	cmp	r3, r2
 80019dc:	d01d      	beq.n	8001a1a <HAL_DMA_Abort+0x20e>
 80019de:	687b      	ldr	r3, [r7, #4]
 80019e0:	681b      	ldr	r3, [r3, #0]
 80019e2:	4a21      	ldr	r2, [pc, #132]	; (8001a68 <HAL_DMA_Abort+0x25c>)
 80019e4:	4293      	cmp	r3, r2
 80019e6:	d018      	beq.n	8001a1a <HAL_DMA_Abort+0x20e>
 80019e8:	687b      	ldr	r3, [r7, #4]
 80019ea:	681b      	ldr	r3, [r3, #0]
 80019ec:	4a1f      	ldr	r2, [pc, #124]	; (8001a6c <HAL_DMA_Abort+0x260>)
 80019ee:	4293      	cmp	r3, r2
 80019f0:	d013      	beq.n	8001a1a <HAL_DMA_Abort+0x20e>
 80019f2:	687b      	ldr	r3, [r7, #4]
 80019f4:	681b      	ldr	r3, [r3, #0]
 80019f6:	4a1e      	ldr	r2, [pc, #120]	; (8001a70 <HAL_DMA_Abort+0x264>)
 80019f8:	4293      	cmp	r3, r2
 80019fa:	d00e      	beq.n	8001a1a <HAL_DMA_Abort+0x20e>
 80019fc:	687b      	ldr	r3, [r7, #4]
 80019fe:	681b      	ldr	r3, [r3, #0]
 8001a00:	4a1c      	ldr	r2, [pc, #112]	; (8001a74 <HAL_DMA_Abort+0x268>)
 8001a02:	4293      	cmp	r3, r2
 8001a04:	d009      	beq.n	8001a1a <HAL_DMA_Abort+0x20e>
 8001a06:	687b      	ldr	r3, [r7, #4]
 8001a08:	681b      	ldr	r3, [r3, #0]
 8001a0a:	4a1b      	ldr	r2, [pc, #108]	; (8001a78 <HAL_DMA_Abort+0x26c>)
 8001a0c:	4293      	cmp	r3, r2
 8001a0e:	d004      	beq.n	8001a1a <HAL_DMA_Abort+0x20e>
 8001a10:	687b      	ldr	r3, [r7, #4]
 8001a12:	681b      	ldr	r3, [r3, #0]
 8001a14:	4a19      	ldr	r2, [pc, #100]	; (8001a7c <HAL_DMA_Abort+0x270>)
 8001a16:	4293      	cmp	r3, r2
 8001a18:	d132      	bne.n	8001a80 <HAL_DMA_Abort+0x274>
 8001a1a:	2301      	movs	r3, #1
 8001a1c:	e031      	b.n	8001a82 <HAL_DMA_Abort+0x276>
 8001a1e:	bf00      	nop
 8001a20:	40020010 	.word	0x40020010
 8001a24:	40020028 	.word	0x40020028
 8001a28:	40020040 	.word	0x40020040
 8001a2c:	40020058 	.word	0x40020058
 8001a30:	40020070 	.word	0x40020070
 8001a34:	40020088 	.word	0x40020088
 8001a38:	400200a0 	.word	0x400200a0
 8001a3c:	400200b8 	.word	0x400200b8
 8001a40:	40020410 	.word	0x40020410
 8001a44:	40020428 	.word	0x40020428
 8001a48:	40020440 	.word	0x40020440
 8001a4c:	40020458 	.word	0x40020458
 8001a50:	40020470 	.word	0x40020470
 8001a54:	40020488 	.word	0x40020488
 8001a58:	400204a0 	.word	0x400204a0
 8001a5c:	400204b8 	.word	0x400204b8
 8001a60:	58025408 	.word	0x58025408
 8001a64:	5802541c 	.word	0x5802541c
 8001a68:	58025430 	.word	0x58025430
 8001a6c:	58025444 	.word	0x58025444
 8001a70:	58025458 	.word	0x58025458
 8001a74:	5802546c 	.word	0x5802546c
 8001a78:	58025480 	.word	0x58025480
 8001a7c:	58025494 	.word	0x58025494
 8001a80:	2300      	movs	r3, #0
 8001a82:	2b00      	cmp	r3, #0
 8001a84:	d007      	beq.n	8001a96 <HAL_DMA_Abort+0x28a>
    {
      /* disable the DMAMUX sync overrun IT */
      hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8001a86:	687b      	ldr	r3, [r7, #4]
 8001a88:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001a8a:	681a      	ldr	r2, [r3, #0]
 8001a8c:	687b      	ldr	r3, [r7, #4]
 8001a8e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001a90:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8001a94:	601a      	str	r2, [r3, #0]
    }

    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8001a96:	687b      	ldr	r3, [r7, #4]
 8001a98:	681b      	ldr	r3, [r3, #0]
 8001a9a:	4a6d      	ldr	r2, [pc, #436]	; (8001c50 <HAL_DMA_Abort+0x444>)
 8001a9c:	4293      	cmp	r3, r2
 8001a9e:	d04a      	beq.n	8001b36 <HAL_DMA_Abort+0x32a>
 8001aa0:	687b      	ldr	r3, [r7, #4]
 8001aa2:	681b      	ldr	r3, [r3, #0]
 8001aa4:	4a6b      	ldr	r2, [pc, #428]	; (8001c54 <HAL_DMA_Abort+0x448>)
 8001aa6:	4293      	cmp	r3, r2
 8001aa8:	d045      	beq.n	8001b36 <HAL_DMA_Abort+0x32a>
 8001aaa:	687b      	ldr	r3, [r7, #4]
 8001aac:	681b      	ldr	r3, [r3, #0]
 8001aae:	4a6a      	ldr	r2, [pc, #424]	; (8001c58 <HAL_DMA_Abort+0x44c>)
 8001ab0:	4293      	cmp	r3, r2
 8001ab2:	d040      	beq.n	8001b36 <HAL_DMA_Abort+0x32a>
 8001ab4:	687b      	ldr	r3, [r7, #4]
 8001ab6:	681b      	ldr	r3, [r3, #0]
 8001ab8:	4a68      	ldr	r2, [pc, #416]	; (8001c5c <HAL_DMA_Abort+0x450>)
 8001aba:	4293      	cmp	r3, r2
 8001abc:	d03b      	beq.n	8001b36 <HAL_DMA_Abort+0x32a>
 8001abe:	687b      	ldr	r3, [r7, #4]
 8001ac0:	681b      	ldr	r3, [r3, #0]
 8001ac2:	4a67      	ldr	r2, [pc, #412]	; (8001c60 <HAL_DMA_Abort+0x454>)
 8001ac4:	4293      	cmp	r3, r2
 8001ac6:	d036      	beq.n	8001b36 <HAL_DMA_Abort+0x32a>
 8001ac8:	687b      	ldr	r3, [r7, #4]
 8001aca:	681b      	ldr	r3, [r3, #0]
 8001acc:	4a65      	ldr	r2, [pc, #404]	; (8001c64 <HAL_DMA_Abort+0x458>)
 8001ace:	4293      	cmp	r3, r2
 8001ad0:	d031      	beq.n	8001b36 <HAL_DMA_Abort+0x32a>
 8001ad2:	687b      	ldr	r3, [r7, #4]
 8001ad4:	681b      	ldr	r3, [r3, #0]
 8001ad6:	4a64      	ldr	r2, [pc, #400]	; (8001c68 <HAL_DMA_Abort+0x45c>)
 8001ad8:	4293      	cmp	r3, r2
 8001ada:	d02c      	beq.n	8001b36 <HAL_DMA_Abort+0x32a>
 8001adc:	687b      	ldr	r3, [r7, #4]
 8001ade:	681b      	ldr	r3, [r3, #0]
 8001ae0:	4a62      	ldr	r2, [pc, #392]	; (8001c6c <HAL_DMA_Abort+0x460>)
 8001ae2:	4293      	cmp	r3, r2
 8001ae4:	d027      	beq.n	8001b36 <HAL_DMA_Abort+0x32a>
 8001ae6:	687b      	ldr	r3, [r7, #4]
 8001ae8:	681b      	ldr	r3, [r3, #0]
 8001aea:	4a61      	ldr	r2, [pc, #388]	; (8001c70 <HAL_DMA_Abort+0x464>)
 8001aec:	4293      	cmp	r3, r2
 8001aee:	d022      	beq.n	8001b36 <HAL_DMA_Abort+0x32a>
 8001af0:	687b      	ldr	r3, [r7, #4]
 8001af2:	681b      	ldr	r3, [r3, #0]
 8001af4:	4a5f      	ldr	r2, [pc, #380]	; (8001c74 <HAL_DMA_Abort+0x468>)
 8001af6:	4293      	cmp	r3, r2
 8001af8:	d01d      	beq.n	8001b36 <HAL_DMA_Abort+0x32a>
 8001afa:	687b      	ldr	r3, [r7, #4]
 8001afc:	681b      	ldr	r3, [r3, #0]
 8001afe:	4a5e      	ldr	r2, [pc, #376]	; (8001c78 <HAL_DMA_Abort+0x46c>)
 8001b00:	4293      	cmp	r3, r2
 8001b02:	d018      	beq.n	8001b36 <HAL_DMA_Abort+0x32a>
 8001b04:	687b      	ldr	r3, [r7, #4]
 8001b06:	681b      	ldr	r3, [r3, #0]
 8001b08:	4a5c      	ldr	r2, [pc, #368]	; (8001c7c <HAL_DMA_Abort+0x470>)
 8001b0a:	4293      	cmp	r3, r2
 8001b0c:	d013      	beq.n	8001b36 <HAL_DMA_Abort+0x32a>
 8001b0e:	687b      	ldr	r3, [r7, #4]
 8001b10:	681b      	ldr	r3, [r3, #0]
 8001b12:	4a5b      	ldr	r2, [pc, #364]	; (8001c80 <HAL_DMA_Abort+0x474>)
 8001b14:	4293      	cmp	r3, r2
 8001b16:	d00e      	beq.n	8001b36 <HAL_DMA_Abort+0x32a>
 8001b18:	687b      	ldr	r3, [r7, #4]
 8001b1a:	681b      	ldr	r3, [r3, #0]
 8001b1c:	4a59      	ldr	r2, [pc, #356]	; (8001c84 <HAL_DMA_Abort+0x478>)
 8001b1e:	4293      	cmp	r3, r2
 8001b20:	d009      	beq.n	8001b36 <HAL_DMA_Abort+0x32a>
 8001b22:	687b      	ldr	r3, [r7, #4]
 8001b24:	681b      	ldr	r3, [r3, #0]
 8001b26:	4a58      	ldr	r2, [pc, #352]	; (8001c88 <HAL_DMA_Abort+0x47c>)
 8001b28:	4293      	cmp	r3, r2
 8001b2a:	d004      	beq.n	8001b36 <HAL_DMA_Abort+0x32a>
 8001b2c:	687b      	ldr	r3, [r7, #4]
 8001b2e:	681b      	ldr	r3, [r3, #0]
 8001b30:	4a56      	ldr	r2, [pc, #344]	; (8001c8c <HAL_DMA_Abort+0x480>)
 8001b32:	4293      	cmp	r3, r2
 8001b34:	d108      	bne.n	8001b48 <HAL_DMA_Abort+0x33c>
 8001b36:	687b      	ldr	r3, [r7, #4]
 8001b38:	681b      	ldr	r3, [r3, #0]
 8001b3a:	681a      	ldr	r2, [r3, #0]
 8001b3c:	687b      	ldr	r3, [r7, #4]
 8001b3e:	681b      	ldr	r3, [r3, #0]
 8001b40:	f022 0201 	bic.w	r2, r2, #1
 8001b44:	601a      	str	r2, [r3, #0]
 8001b46:	e007      	b.n	8001b58 <HAL_DMA_Abort+0x34c>
 8001b48:	687b      	ldr	r3, [r7, #4]
 8001b4a:	681b      	ldr	r3, [r3, #0]
 8001b4c:	681a      	ldr	r2, [r3, #0]
 8001b4e:	687b      	ldr	r3, [r7, #4]
 8001b50:	681b      	ldr	r3, [r3, #0]
 8001b52:	f022 0201 	bic.w	r2, r2, #1
 8001b56:	601a      	str	r2, [r3, #0]

    /* Check if the DMA Stream is effectively disabled */
    while(((*enableRegister) & DMA_SxCR_EN) != 0U)
 8001b58:	e013      	b.n	8001b82 <HAL_DMA_Abort+0x376>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8001b5a:	f7ff fd27 	bl	80015ac <HAL_GetTick>
 8001b5e:	4602      	mov	r2, r0
 8001b60:	693b      	ldr	r3, [r7, #16]
 8001b62:	1ad3      	subs	r3, r2, r3
 8001b64:	2b05      	cmp	r3, #5
 8001b66:	d90c      	bls.n	8001b82 <HAL_DMA_Abort+0x376>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8001b68:	687b      	ldr	r3, [r7, #4]
 8001b6a:	2220      	movs	r2, #32
 8001b6c:	655a      	str	r2, [r3, #84]	; 0x54

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8001b6e:	687b      	ldr	r3, [r7, #4]
 8001b70:	2200      	movs	r2, #0
 8001b72:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_ERROR;
 8001b76:	687b      	ldr	r3, [r7, #4]
 8001b78:	2203      	movs	r2, #3
 8001b7a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        return HAL_ERROR;
 8001b7e:	2301      	movs	r3, #1
 8001b80:	e12d      	b.n	8001dde <HAL_DMA_Abort+0x5d2>
    while(((*enableRegister) & DMA_SxCR_EN) != 0U)
 8001b82:	697b      	ldr	r3, [r7, #20]
 8001b84:	681b      	ldr	r3, [r3, #0]
 8001b86:	f003 0301 	and.w	r3, r3, #1
 8001b8a:	2b00      	cmp	r3, #0
 8001b8c:	d1e5      	bne.n	8001b5a <HAL_DMA_Abort+0x34e>
      }
    }

    /* Clear all interrupt flags at correct offset within the register */
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8001b8e:	687b      	ldr	r3, [r7, #4]
 8001b90:	681b      	ldr	r3, [r3, #0]
 8001b92:	4a2f      	ldr	r2, [pc, #188]	; (8001c50 <HAL_DMA_Abort+0x444>)
 8001b94:	4293      	cmp	r3, r2
 8001b96:	d04a      	beq.n	8001c2e <HAL_DMA_Abort+0x422>
 8001b98:	687b      	ldr	r3, [r7, #4]
 8001b9a:	681b      	ldr	r3, [r3, #0]
 8001b9c:	4a2d      	ldr	r2, [pc, #180]	; (8001c54 <HAL_DMA_Abort+0x448>)
 8001b9e:	4293      	cmp	r3, r2
 8001ba0:	d045      	beq.n	8001c2e <HAL_DMA_Abort+0x422>
 8001ba2:	687b      	ldr	r3, [r7, #4]
 8001ba4:	681b      	ldr	r3, [r3, #0]
 8001ba6:	4a2c      	ldr	r2, [pc, #176]	; (8001c58 <HAL_DMA_Abort+0x44c>)
 8001ba8:	4293      	cmp	r3, r2
 8001baa:	d040      	beq.n	8001c2e <HAL_DMA_Abort+0x422>
 8001bac:	687b      	ldr	r3, [r7, #4]
 8001bae:	681b      	ldr	r3, [r3, #0]
 8001bb0:	4a2a      	ldr	r2, [pc, #168]	; (8001c5c <HAL_DMA_Abort+0x450>)
 8001bb2:	4293      	cmp	r3, r2
 8001bb4:	d03b      	beq.n	8001c2e <HAL_DMA_Abort+0x422>
 8001bb6:	687b      	ldr	r3, [r7, #4]
 8001bb8:	681b      	ldr	r3, [r3, #0]
 8001bba:	4a29      	ldr	r2, [pc, #164]	; (8001c60 <HAL_DMA_Abort+0x454>)
 8001bbc:	4293      	cmp	r3, r2
 8001bbe:	d036      	beq.n	8001c2e <HAL_DMA_Abort+0x422>
 8001bc0:	687b      	ldr	r3, [r7, #4]
 8001bc2:	681b      	ldr	r3, [r3, #0]
 8001bc4:	4a27      	ldr	r2, [pc, #156]	; (8001c64 <HAL_DMA_Abort+0x458>)
 8001bc6:	4293      	cmp	r3, r2
 8001bc8:	d031      	beq.n	8001c2e <HAL_DMA_Abort+0x422>
 8001bca:	687b      	ldr	r3, [r7, #4]
 8001bcc:	681b      	ldr	r3, [r3, #0]
 8001bce:	4a26      	ldr	r2, [pc, #152]	; (8001c68 <HAL_DMA_Abort+0x45c>)
 8001bd0:	4293      	cmp	r3, r2
 8001bd2:	d02c      	beq.n	8001c2e <HAL_DMA_Abort+0x422>
 8001bd4:	687b      	ldr	r3, [r7, #4]
 8001bd6:	681b      	ldr	r3, [r3, #0]
 8001bd8:	4a24      	ldr	r2, [pc, #144]	; (8001c6c <HAL_DMA_Abort+0x460>)
 8001bda:	4293      	cmp	r3, r2
 8001bdc:	d027      	beq.n	8001c2e <HAL_DMA_Abort+0x422>
 8001bde:	687b      	ldr	r3, [r7, #4]
 8001be0:	681b      	ldr	r3, [r3, #0]
 8001be2:	4a23      	ldr	r2, [pc, #140]	; (8001c70 <HAL_DMA_Abort+0x464>)
 8001be4:	4293      	cmp	r3, r2
 8001be6:	d022      	beq.n	8001c2e <HAL_DMA_Abort+0x422>
 8001be8:	687b      	ldr	r3, [r7, #4]
 8001bea:	681b      	ldr	r3, [r3, #0]
 8001bec:	4a21      	ldr	r2, [pc, #132]	; (8001c74 <HAL_DMA_Abort+0x468>)
 8001bee:	4293      	cmp	r3, r2
 8001bf0:	d01d      	beq.n	8001c2e <HAL_DMA_Abort+0x422>
 8001bf2:	687b      	ldr	r3, [r7, #4]
 8001bf4:	681b      	ldr	r3, [r3, #0]
 8001bf6:	4a20      	ldr	r2, [pc, #128]	; (8001c78 <HAL_DMA_Abort+0x46c>)
 8001bf8:	4293      	cmp	r3, r2
 8001bfa:	d018      	beq.n	8001c2e <HAL_DMA_Abort+0x422>
 8001bfc:	687b      	ldr	r3, [r7, #4]
 8001bfe:	681b      	ldr	r3, [r3, #0]
 8001c00:	4a1e      	ldr	r2, [pc, #120]	; (8001c7c <HAL_DMA_Abort+0x470>)
 8001c02:	4293      	cmp	r3, r2
 8001c04:	d013      	beq.n	8001c2e <HAL_DMA_Abort+0x422>
 8001c06:	687b      	ldr	r3, [r7, #4]
 8001c08:	681b      	ldr	r3, [r3, #0]
 8001c0a:	4a1d      	ldr	r2, [pc, #116]	; (8001c80 <HAL_DMA_Abort+0x474>)
 8001c0c:	4293      	cmp	r3, r2
 8001c0e:	d00e      	beq.n	8001c2e <HAL_DMA_Abort+0x422>
 8001c10:	687b      	ldr	r3, [r7, #4]
 8001c12:	681b      	ldr	r3, [r3, #0]
 8001c14:	4a1b      	ldr	r2, [pc, #108]	; (8001c84 <HAL_DMA_Abort+0x478>)
 8001c16:	4293      	cmp	r3, r2
 8001c18:	d009      	beq.n	8001c2e <HAL_DMA_Abort+0x422>
 8001c1a:	687b      	ldr	r3, [r7, #4]
 8001c1c:	681b      	ldr	r3, [r3, #0]
 8001c1e:	4a1a      	ldr	r2, [pc, #104]	; (8001c88 <HAL_DMA_Abort+0x47c>)
 8001c20:	4293      	cmp	r3, r2
 8001c22:	d004      	beq.n	8001c2e <HAL_DMA_Abort+0x422>
 8001c24:	687b      	ldr	r3, [r7, #4]
 8001c26:	681b      	ldr	r3, [r3, #0]
 8001c28:	4a18      	ldr	r2, [pc, #96]	; (8001c8c <HAL_DMA_Abort+0x480>)
 8001c2a:	4293      	cmp	r3, r2
 8001c2c:	d101      	bne.n	8001c32 <HAL_DMA_Abort+0x426>
 8001c2e:	2301      	movs	r3, #1
 8001c30:	e000      	b.n	8001c34 <HAL_DMA_Abort+0x428>
 8001c32:	2300      	movs	r3, #0
 8001c34:	2b00      	cmp	r3, #0
 8001c36:	d02b      	beq.n	8001c90 <HAL_DMA_Abort+0x484>
    {
      regs_dma = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8001c38:	687b      	ldr	r3, [r7, #4]
 8001c3a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001c3c:	60bb      	str	r3, [r7, #8]
      regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 8001c3e:	687b      	ldr	r3, [r7, #4]
 8001c40:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001c42:	f003 031f 	and.w	r3, r3, #31
 8001c46:	223f      	movs	r2, #63	; 0x3f
 8001c48:	409a      	lsls	r2, r3
 8001c4a:	68bb      	ldr	r3, [r7, #8]
 8001c4c:	609a      	str	r2, [r3, #8]
 8001c4e:	e02a      	b.n	8001ca6 <HAL_DMA_Abort+0x49a>
 8001c50:	40020010 	.word	0x40020010
 8001c54:	40020028 	.word	0x40020028
 8001c58:	40020040 	.word	0x40020040
 8001c5c:	40020058 	.word	0x40020058
 8001c60:	40020070 	.word	0x40020070
 8001c64:	40020088 	.word	0x40020088
 8001c68:	400200a0 	.word	0x400200a0
 8001c6c:	400200b8 	.word	0x400200b8
 8001c70:	40020410 	.word	0x40020410
 8001c74:	40020428 	.word	0x40020428
 8001c78:	40020440 	.word	0x40020440
 8001c7c:	40020458 	.word	0x40020458
 8001c80:	40020470 	.word	0x40020470
 8001c84:	40020488 	.word	0x40020488
 8001c88:	400204a0 	.word	0x400204a0
 8001c8c:	400204b8 	.word	0x400204b8
    }
    else /* BDMA channel */
    {
      regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 8001c90:	687b      	ldr	r3, [r7, #4]
 8001c92:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001c94:	60fb      	str	r3, [r7, #12]
      regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 8001c96:	687b      	ldr	r3, [r7, #4]
 8001c98:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001c9a:	f003 031f 	and.w	r3, r3, #31
 8001c9e:	2201      	movs	r2, #1
 8001ca0:	409a      	lsls	r2, r3
 8001ca2:	68fb      	ldr	r3, [r7, #12]
 8001ca4:	605a      	str	r2, [r3, #4]
    }

    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8001ca6:	687b      	ldr	r3, [r7, #4]
 8001ca8:	681b      	ldr	r3, [r3, #0]
 8001caa:	4a4f      	ldr	r2, [pc, #316]	; (8001de8 <HAL_DMA_Abort+0x5dc>)
 8001cac:	4293      	cmp	r3, r2
 8001cae:	d072      	beq.n	8001d96 <HAL_DMA_Abort+0x58a>
 8001cb0:	687b      	ldr	r3, [r7, #4]
 8001cb2:	681b      	ldr	r3, [r3, #0]
 8001cb4:	4a4d      	ldr	r2, [pc, #308]	; (8001dec <HAL_DMA_Abort+0x5e0>)
 8001cb6:	4293      	cmp	r3, r2
 8001cb8:	d06d      	beq.n	8001d96 <HAL_DMA_Abort+0x58a>
 8001cba:	687b      	ldr	r3, [r7, #4]
 8001cbc:	681b      	ldr	r3, [r3, #0]
 8001cbe:	4a4c      	ldr	r2, [pc, #304]	; (8001df0 <HAL_DMA_Abort+0x5e4>)
 8001cc0:	4293      	cmp	r3, r2
 8001cc2:	d068      	beq.n	8001d96 <HAL_DMA_Abort+0x58a>
 8001cc4:	687b      	ldr	r3, [r7, #4]
 8001cc6:	681b      	ldr	r3, [r3, #0]
 8001cc8:	4a4a      	ldr	r2, [pc, #296]	; (8001df4 <HAL_DMA_Abort+0x5e8>)
 8001cca:	4293      	cmp	r3, r2
 8001ccc:	d063      	beq.n	8001d96 <HAL_DMA_Abort+0x58a>
 8001cce:	687b      	ldr	r3, [r7, #4]
 8001cd0:	681b      	ldr	r3, [r3, #0]
 8001cd2:	4a49      	ldr	r2, [pc, #292]	; (8001df8 <HAL_DMA_Abort+0x5ec>)
 8001cd4:	4293      	cmp	r3, r2
 8001cd6:	d05e      	beq.n	8001d96 <HAL_DMA_Abort+0x58a>
 8001cd8:	687b      	ldr	r3, [r7, #4]
 8001cda:	681b      	ldr	r3, [r3, #0]
 8001cdc:	4a47      	ldr	r2, [pc, #284]	; (8001dfc <HAL_DMA_Abort+0x5f0>)
 8001cde:	4293      	cmp	r3, r2
 8001ce0:	d059      	beq.n	8001d96 <HAL_DMA_Abort+0x58a>
 8001ce2:	687b      	ldr	r3, [r7, #4]
 8001ce4:	681b      	ldr	r3, [r3, #0]
 8001ce6:	4a46      	ldr	r2, [pc, #280]	; (8001e00 <HAL_DMA_Abort+0x5f4>)
 8001ce8:	4293      	cmp	r3, r2
 8001cea:	d054      	beq.n	8001d96 <HAL_DMA_Abort+0x58a>
 8001cec:	687b      	ldr	r3, [r7, #4]
 8001cee:	681b      	ldr	r3, [r3, #0]
 8001cf0:	4a44      	ldr	r2, [pc, #272]	; (8001e04 <HAL_DMA_Abort+0x5f8>)
 8001cf2:	4293      	cmp	r3, r2
 8001cf4:	d04f      	beq.n	8001d96 <HAL_DMA_Abort+0x58a>
 8001cf6:	687b      	ldr	r3, [r7, #4]
 8001cf8:	681b      	ldr	r3, [r3, #0]
 8001cfa:	4a43      	ldr	r2, [pc, #268]	; (8001e08 <HAL_DMA_Abort+0x5fc>)
 8001cfc:	4293      	cmp	r3, r2
 8001cfe:	d04a      	beq.n	8001d96 <HAL_DMA_Abort+0x58a>
 8001d00:	687b      	ldr	r3, [r7, #4]
 8001d02:	681b      	ldr	r3, [r3, #0]
 8001d04:	4a41      	ldr	r2, [pc, #260]	; (8001e0c <HAL_DMA_Abort+0x600>)
 8001d06:	4293      	cmp	r3, r2
 8001d08:	d045      	beq.n	8001d96 <HAL_DMA_Abort+0x58a>
 8001d0a:	687b      	ldr	r3, [r7, #4]
 8001d0c:	681b      	ldr	r3, [r3, #0]
 8001d0e:	4a40      	ldr	r2, [pc, #256]	; (8001e10 <HAL_DMA_Abort+0x604>)
 8001d10:	4293      	cmp	r3, r2
 8001d12:	d040      	beq.n	8001d96 <HAL_DMA_Abort+0x58a>
 8001d14:	687b      	ldr	r3, [r7, #4]
 8001d16:	681b      	ldr	r3, [r3, #0]
 8001d18:	4a3e      	ldr	r2, [pc, #248]	; (8001e14 <HAL_DMA_Abort+0x608>)
 8001d1a:	4293      	cmp	r3, r2
 8001d1c:	d03b      	beq.n	8001d96 <HAL_DMA_Abort+0x58a>
 8001d1e:	687b      	ldr	r3, [r7, #4]
 8001d20:	681b      	ldr	r3, [r3, #0]
 8001d22:	4a3d      	ldr	r2, [pc, #244]	; (8001e18 <HAL_DMA_Abort+0x60c>)
 8001d24:	4293      	cmp	r3, r2
 8001d26:	d036      	beq.n	8001d96 <HAL_DMA_Abort+0x58a>
 8001d28:	687b      	ldr	r3, [r7, #4]
 8001d2a:	681b      	ldr	r3, [r3, #0]
 8001d2c:	4a3b      	ldr	r2, [pc, #236]	; (8001e1c <HAL_DMA_Abort+0x610>)
 8001d2e:	4293      	cmp	r3, r2
 8001d30:	d031      	beq.n	8001d96 <HAL_DMA_Abort+0x58a>
 8001d32:	687b      	ldr	r3, [r7, #4]
 8001d34:	681b      	ldr	r3, [r3, #0]
 8001d36:	4a3a      	ldr	r2, [pc, #232]	; (8001e20 <HAL_DMA_Abort+0x614>)
 8001d38:	4293      	cmp	r3, r2
 8001d3a:	d02c      	beq.n	8001d96 <HAL_DMA_Abort+0x58a>
 8001d3c:	687b      	ldr	r3, [r7, #4]
 8001d3e:	681b      	ldr	r3, [r3, #0]
 8001d40:	4a38      	ldr	r2, [pc, #224]	; (8001e24 <HAL_DMA_Abort+0x618>)
 8001d42:	4293      	cmp	r3, r2
 8001d44:	d027      	beq.n	8001d96 <HAL_DMA_Abort+0x58a>
 8001d46:	687b      	ldr	r3, [r7, #4]
 8001d48:	681b      	ldr	r3, [r3, #0]
 8001d4a:	4a37      	ldr	r2, [pc, #220]	; (8001e28 <HAL_DMA_Abort+0x61c>)
 8001d4c:	4293      	cmp	r3, r2
 8001d4e:	d022      	beq.n	8001d96 <HAL_DMA_Abort+0x58a>
 8001d50:	687b      	ldr	r3, [r7, #4]
 8001d52:	681b      	ldr	r3, [r3, #0]
 8001d54:	4a35      	ldr	r2, [pc, #212]	; (8001e2c <HAL_DMA_Abort+0x620>)
 8001d56:	4293      	cmp	r3, r2
 8001d58:	d01d      	beq.n	8001d96 <HAL_DMA_Abort+0x58a>
 8001d5a:	687b      	ldr	r3, [r7, #4]
 8001d5c:	681b      	ldr	r3, [r3, #0]
 8001d5e:	4a34      	ldr	r2, [pc, #208]	; (8001e30 <HAL_DMA_Abort+0x624>)
 8001d60:	4293      	cmp	r3, r2
 8001d62:	d018      	beq.n	8001d96 <HAL_DMA_Abort+0x58a>
 8001d64:	687b      	ldr	r3, [r7, #4]
 8001d66:	681b      	ldr	r3, [r3, #0]
 8001d68:	4a32      	ldr	r2, [pc, #200]	; (8001e34 <HAL_DMA_Abort+0x628>)
 8001d6a:	4293      	cmp	r3, r2
 8001d6c:	d013      	beq.n	8001d96 <HAL_DMA_Abort+0x58a>
 8001d6e:	687b      	ldr	r3, [r7, #4]
 8001d70:	681b      	ldr	r3, [r3, #0]
 8001d72:	4a31      	ldr	r2, [pc, #196]	; (8001e38 <HAL_DMA_Abort+0x62c>)
 8001d74:	4293      	cmp	r3, r2
 8001d76:	d00e      	beq.n	8001d96 <HAL_DMA_Abort+0x58a>
 8001d78:	687b      	ldr	r3, [r7, #4]
 8001d7a:	681b      	ldr	r3, [r3, #0]
 8001d7c:	4a2f      	ldr	r2, [pc, #188]	; (8001e3c <HAL_DMA_Abort+0x630>)
 8001d7e:	4293      	cmp	r3, r2
 8001d80:	d009      	beq.n	8001d96 <HAL_DMA_Abort+0x58a>
 8001d82:	687b      	ldr	r3, [r7, #4]
 8001d84:	681b      	ldr	r3, [r3, #0]
 8001d86:	4a2e      	ldr	r2, [pc, #184]	; (8001e40 <HAL_DMA_Abort+0x634>)
 8001d88:	4293      	cmp	r3, r2
 8001d8a:	d004      	beq.n	8001d96 <HAL_DMA_Abort+0x58a>
 8001d8c:	687b      	ldr	r3, [r7, #4]
 8001d8e:	681b      	ldr	r3, [r3, #0]
 8001d90:	4a2c      	ldr	r2, [pc, #176]	; (8001e44 <HAL_DMA_Abort+0x638>)
 8001d92:	4293      	cmp	r3, r2
 8001d94:	d101      	bne.n	8001d9a <HAL_DMA_Abort+0x58e>
 8001d96:	2301      	movs	r3, #1
 8001d98:	e000      	b.n	8001d9c <HAL_DMA_Abort+0x590>
 8001d9a:	2300      	movs	r3, #0
 8001d9c:	2b00      	cmp	r3, #0
 8001d9e:	d015      	beq.n	8001dcc <HAL_DMA_Abort+0x5c0>
    {
      /* Clear the DMAMUX synchro overrun flag */
      hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8001da0:	687b      	ldr	r3, [r7, #4]
 8001da2:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8001da4:	687a      	ldr	r2, [r7, #4]
 8001da6:	6e92      	ldr	r2, [r2, #104]	; 0x68
 8001da8:	605a      	str	r2, [r3, #4]

      if(hdma->DMAmuxRequestGen != 0U)
 8001daa:	687b      	ldr	r3, [r7, #4]
 8001dac:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8001dae:	2b00      	cmp	r3, #0
 8001db0:	d00c      	beq.n	8001dcc <HAL_DMA_Abort+0x5c0>
      {
        /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT */
        /* disable the request gen overrun IT */
        hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8001db2:	687b      	ldr	r3, [r7, #4]
 8001db4:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8001db6:	681a      	ldr	r2, [r3, #0]
 8001db8:	687b      	ldr	r3, [r7, #4]
 8001dba:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8001dbc:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8001dc0:	601a      	str	r2, [r3, #0]

        /* Clear the DMAMUX request generator overrun flag */
        hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8001dc2:	687b      	ldr	r3, [r7, #4]
 8001dc4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001dc6:	687a      	ldr	r2, [r7, #4]
 8001dc8:	6f52      	ldr	r2, [r2, #116]	; 0x74
 8001dca:	605a      	str	r2, [r3, #4]
      }
    }

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001dcc:	687b      	ldr	r3, [r7, #4]
 8001dce:	2200      	movs	r2, #0
 8001dd0:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8001dd4:	687b      	ldr	r3, [r7, #4]
 8001dd6:	2201      	movs	r2, #1
 8001dd8:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
  }

  return HAL_OK;
 8001ddc:	2300      	movs	r3, #0
}
 8001dde:	4618      	mov	r0, r3
 8001de0:	3718      	adds	r7, #24
 8001de2:	46bd      	mov	sp, r7
 8001de4:	bd80      	pop	{r7, pc}
 8001de6:	bf00      	nop
 8001de8:	40020010 	.word	0x40020010
 8001dec:	40020028 	.word	0x40020028
 8001df0:	40020040 	.word	0x40020040
 8001df4:	40020058 	.word	0x40020058
 8001df8:	40020070 	.word	0x40020070
 8001dfc:	40020088 	.word	0x40020088
 8001e00:	400200a0 	.word	0x400200a0
 8001e04:	400200b8 	.word	0x400200b8
 8001e08:	40020410 	.word	0x40020410
 8001e0c:	40020428 	.word	0x40020428
 8001e10:	40020440 	.word	0x40020440
 8001e14:	40020458 	.word	0x40020458
 8001e18:	40020470 	.word	0x40020470
 8001e1c:	40020488 	.word	0x40020488
 8001e20:	400204a0 	.word	0x400204a0
 8001e24:	400204b8 	.word	0x400204b8
 8001e28:	58025408 	.word	0x58025408
 8001e2c:	5802541c 	.word	0x5802541c
 8001e30:	58025430 	.word	0x58025430
 8001e34:	58025444 	.word	0x58025444
 8001e38:	58025458 	.word	0x58025458
 8001e3c:	5802546c 	.word	0x5802546c
 8001e40:	58025480 	.word	0x58025480
 8001e44:	58025494 	.word	0x58025494

08001e48 <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8001e48:	b580      	push	{r7, lr}
 8001e4a:	b084      	sub	sp, #16
 8001e4c:	af00      	add	r7, sp, #0
 8001e4e:	6078      	str	r0, [r7, #4]
  BDMA_Base_Registers *regs_bdma;

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 8001e50:	687b      	ldr	r3, [r7, #4]
 8001e52:	2b00      	cmp	r3, #0
 8001e54:	d101      	bne.n	8001e5a <HAL_DMA_Abort_IT+0x12>
  {
    return HAL_ERROR;
 8001e56:	2301      	movs	r3, #1
 8001e58:	e205      	b.n	8002266 <HAL_DMA_Abort_IT+0x41e>
  }

  if(hdma->State != HAL_DMA_STATE_BUSY)
 8001e5a:	687b      	ldr	r3, [r7, #4]
 8001e5c:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8001e60:	b2db      	uxtb	r3, r3
 8001e62:	2b02      	cmp	r3, #2
 8001e64:	d004      	beq.n	8001e70 <HAL_DMA_Abort_IT+0x28>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001e66:	687b      	ldr	r3, [r7, #4]
 8001e68:	2280      	movs	r2, #128	; 0x80
 8001e6a:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8001e6c:	2301      	movs	r3, #1
 8001e6e:	e1fa      	b.n	8002266 <HAL_DMA_Abort_IT+0x41e>
  }
  else
  {
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8001e70:	687b      	ldr	r3, [r7, #4]
 8001e72:	681b      	ldr	r3, [r3, #0]
 8001e74:	4a8c      	ldr	r2, [pc, #560]	; (80020a8 <HAL_DMA_Abort_IT+0x260>)
 8001e76:	4293      	cmp	r3, r2
 8001e78:	d04a      	beq.n	8001f10 <HAL_DMA_Abort_IT+0xc8>
 8001e7a:	687b      	ldr	r3, [r7, #4]
 8001e7c:	681b      	ldr	r3, [r3, #0]
 8001e7e:	4a8b      	ldr	r2, [pc, #556]	; (80020ac <HAL_DMA_Abort_IT+0x264>)
 8001e80:	4293      	cmp	r3, r2
 8001e82:	d045      	beq.n	8001f10 <HAL_DMA_Abort_IT+0xc8>
 8001e84:	687b      	ldr	r3, [r7, #4]
 8001e86:	681b      	ldr	r3, [r3, #0]
 8001e88:	4a89      	ldr	r2, [pc, #548]	; (80020b0 <HAL_DMA_Abort_IT+0x268>)
 8001e8a:	4293      	cmp	r3, r2
 8001e8c:	d040      	beq.n	8001f10 <HAL_DMA_Abort_IT+0xc8>
 8001e8e:	687b      	ldr	r3, [r7, #4]
 8001e90:	681b      	ldr	r3, [r3, #0]
 8001e92:	4a88      	ldr	r2, [pc, #544]	; (80020b4 <HAL_DMA_Abort_IT+0x26c>)
 8001e94:	4293      	cmp	r3, r2
 8001e96:	d03b      	beq.n	8001f10 <HAL_DMA_Abort_IT+0xc8>
 8001e98:	687b      	ldr	r3, [r7, #4]
 8001e9a:	681b      	ldr	r3, [r3, #0]
 8001e9c:	4a86      	ldr	r2, [pc, #536]	; (80020b8 <HAL_DMA_Abort_IT+0x270>)
 8001e9e:	4293      	cmp	r3, r2
 8001ea0:	d036      	beq.n	8001f10 <HAL_DMA_Abort_IT+0xc8>
 8001ea2:	687b      	ldr	r3, [r7, #4]
 8001ea4:	681b      	ldr	r3, [r3, #0]
 8001ea6:	4a85      	ldr	r2, [pc, #532]	; (80020bc <HAL_DMA_Abort_IT+0x274>)
 8001ea8:	4293      	cmp	r3, r2
 8001eaa:	d031      	beq.n	8001f10 <HAL_DMA_Abort_IT+0xc8>
 8001eac:	687b      	ldr	r3, [r7, #4]
 8001eae:	681b      	ldr	r3, [r3, #0]
 8001eb0:	4a83      	ldr	r2, [pc, #524]	; (80020c0 <HAL_DMA_Abort_IT+0x278>)
 8001eb2:	4293      	cmp	r3, r2
 8001eb4:	d02c      	beq.n	8001f10 <HAL_DMA_Abort_IT+0xc8>
 8001eb6:	687b      	ldr	r3, [r7, #4]
 8001eb8:	681b      	ldr	r3, [r3, #0]
 8001eba:	4a82      	ldr	r2, [pc, #520]	; (80020c4 <HAL_DMA_Abort_IT+0x27c>)
 8001ebc:	4293      	cmp	r3, r2
 8001ebe:	d027      	beq.n	8001f10 <HAL_DMA_Abort_IT+0xc8>
 8001ec0:	687b      	ldr	r3, [r7, #4]
 8001ec2:	681b      	ldr	r3, [r3, #0]
 8001ec4:	4a80      	ldr	r2, [pc, #512]	; (80020c8 <HAL_DMA_Abort_IT+0x280>)
 8001ec6:	4293      	cmp	r3, r2
 8001ec8:	d022      	beq.n	8001f10 <HAL_DMA_Abort_IT+0xc8>
 8001eca:	687b      	ldr	r3, [r7, #4]
 8001ecc:	681b      	ldr	r3, [r3, #0]
 8001ece:	4a7f      	ldr	r2, [pc, #508]	; (80020cc <HAL_DMA_Abort_IT+0x284>)
 8001ed0:	4293      	cmp	r3, r2
 8001ed2:	d01d      	beq.n	8001f10 <HAL_DMA_Abort_IT+0xc8>
 8001ed4:	687b      	ldr	r3, [r7, #4]
 8001ed6:	681b      	ldr	r3, [r3, #0]
 8001ed8:	4a7d      	ldr	r2, [pc, #500]	; (80020d0 <HAL_DMA_Abort_IT+0x288>)
 8001eda:	4293      	cmp	r3, r2
 8001edc:	d018      	beq.n	8001f10 <HAL_DMA_Abort_IT+0xc8>
 8001ede:	687b      	ldr	r3, [r7, #4]
 8001ee0:	681b      	ldr	r3, [r3, #0]
 8001ee2:	4a7c      	ldr	r2, [pc, #496]	; (80020d4 <HAL_DMA_Abort_IT+0x28c>)
 8001ee4:	4293      	cmp	r3, r2
 8001ee6:	d013      	beq.n	8001f10 <HAL_DMA_Abort_IT+0xc8>
 8001ee8:	687b      	ldr	r3, [r7, #4]
 8001eea:	681b      	ldr	r3, [r3, #0]
 8001eec:	4a7a      	ldr	r2, [pc, #488]	; (80020d8 <HAL_DMA_Abort_IT+0x290>)
 8001eee:	4293      	cmp	r3, r2
 8001ef0:	d00e      	beq.n	8001f10 <HAL_DMA_Abort_IT+0xc8>
 8001ef2:	687b      	ldr	r3, [r7, #4]
 8001ef4:	681b      	ldr	r3, [r3, #0]
 8001ef6:	4a79      	ldr	r2, [pc, #484]	; (80020dc <HAL_DMA_Abort_IT+0x294>)
 8001ef8:	4293      	cmp	r3, r2
 8001efa:	d009      	beq.n	8001f10 <HAL_DMA_Abort_IT+0xc8>
 8001efc:	687b      	ldr	r3, [r7, #4]
 8001efe:	681b      	ldr	r3, [r3, #0]
 8001f00:	4a77      	ldr	r2, [pc, #476]	; (80020e0 <HAL_DMA_Abort_IT+0x298>)
 8001f02:	4293      	cmp	r3, r2
 8001f04:	d004      	beq.n	8001f10 <HAL_DMA_Abort_IT+0xc8>
 8001f06:	687b      	ldr	r3, [r7, #4]
 8001f08:	681b      	ldr	r3, [r3, #0]
 8001f0a:	4a76      	ldr	r2, [pc, #472]	; (80020e4 <HAL_DMA_Abort_IT+0x29c>)
 8001f0c:	4293      	cmp	r3, r2
 8001f0e:	d101      	bne.n	8001f14 <HAL_DMA_Abort_IT+0xcc>
 8001f10:	2301      	movs	r3, #1
 8001f12:	e000      	b.n	8001f16 <HAL_DMA_Abort_IT+0xce>
 8001f14:	2300      	movs	r3, #0
 8001f16:	2b00      	cmp	r3, #0
 8001f18:	d065      	beq.n	8001fe6 <HAL_DMA_Abort_IT+0x19e>
    {
      /* Set Abort State  */
      hdma->State = HAL_DMA_STATE_ABORT;
 8001f1a:	687b      	ldr	r3, [r7, #4]
 8001f1c:	2204      	movs	r2, #4
 8001f1e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8001f22:	687b      	ldr	r3, [r7, #4]
 8001f24:	681b      	ldr	r3, [r3, #0]
 8001f26:	4a60      	ldr	r2, [pc, #384]	; (80020a8 <HAL_DMA_Abort_IT+0x260>)
 8001f28:	4293      	cmp	r3, r2
 8001f2a:	d04a      	beq.n	8001fc2 <HAL_DMA_Abort_IT+0x17a>
 8001f2c:	687b      	ldr	r3, [r7, #4]
 8001f2e:	681b      	ldr	r3, [r3, #0]
 8001f30:	4a5e      	ldr	r2, [pc, #376]	; (80020ac <HAL_DMA_Abort_IT+0x264>)
 8001f32:	4293      	cmp	r3, r2
 8001f34:	d045      	beq.n	8001fc2 <HAL_DMA_Abort_IT+0x17a>
 8001f36:	687b      	ldr	r3, [r7, #4]
 8001f38:	681b      	ldr	r3, [r3, #0]
 8001f3a:	4a5d      	ldr	r2, [pc, #372]	; (80020b0 <HAL_DMA_Abort_IT+0x268>)
 8001f3c:	4293      	cmp	r3, r2
 8001f3e:	d040      	beq.n	8001fc2 <HAL_DMA_Abort_IT+0x17a>
 8001f40:	687b      	ldr	r3, [r7, #4]
 8001f42:	681b      	ldr	r3, [r3, #0]
 8001f44:	4a5b      	ldr	r2, [pc, #364]	; (80020b4 <HAL_DMA_Abort_IT+0x26c>)
 8001f46:	4293      	cmp	r3, r2
 8001f48:	d03b      	beq.n	8001fc2 <HAL_DMA_Abort_IT+0x17a>
 8001f4a:	687b      	ldr	r3, [r7, #4]
 8001f4c:	681b      	ldr	r3, [r3, #0]
 8001f4e:	4a5a      	ldr	r2, [pc, #360]	; (80020b8 <HAL_DMA_Abort_IT+0x270>)
 8001f50:	4293      	cmp	r3, r2
 8001f52:	d036      	beq.n	8001fc2 <HAL_DMA_Abort_IT+0x17a>
 8001f54:	687b      	ldr	r3, [r7, #4]
 8001f56:	681b      	ldr	r3, [r3, #0]
 8001f58:	4a58      	ldr	r2, [pc, #352]	; (80020bc <HAL_DMA_Abort_IT+0x274>)
 8001f5a:	4293      	cmp	r3, r2
 8001f5c:	d031      	beq.n	8001fc2 <HAL_DMA_Abort_IT+0x17a>
 8001f5e:	687b      	ldr	r3, [r7, #4]
 8001f60:	681b      	ldr	r3, [r3, #0]
 8001f62:	4a57      	ldr	r2, [pc, #348]	; (80020c0 <HAL_DMA_Abort_IT+0x278>)
 8001f64:	4293      	cmp	r3, r2
 8001f66:	d02c      	beq.n	8001fc2 <HAL_DMA_Abort_IT+0x17a>
 8001f68:	687b      	ldr	r3, [r7, #4]
 8001f6a:	681b      	ldr	r3, [r3, #0]
 8001f6c:	4a55      	ldr	r2, [pc, #340]	; (80020c4 <HAL_DMA_Abort_IT+0x27c>)
 8001f6e:	4293      	cmp	r3, r2
 8001f70:	d027      	beq.n	8001fc2 <HAL_DMA_Abort_IT+0x17a>
 8001f72:	687b      	ldr	r3, [r7, #4]
 8001f74:	681b      	ldr	r3, [r3, #0]
 8001f76:	4a54      	ldr	r2, [pc, #336]	; (80020c8 <HAL_DMA_Abort_IT+0x280>)
 8001f78:	4293      	cmp	r3, r2
 8001f7a:	d022      	beq.n	8001fc2 <HAL_DMA_Abort_IT+0x17a>
 8001f7c:	687b      	ldr	r3, [r7, #4]
 8001f7e:	681b      	ldr	r3, [r3, #0]
 8001f80:	4a52      	ldr	r2, [pc, #328]	; (80020cc <HAL_DMA_Abort_IT+0x284>)
 8001f82:	4293      	cmp	r3, r2
 8001f84:	d01d      	beq.n	8001fc2 <HAL_DMA_Abort_IT+0x17a>
 8001f86:	687b      	ldr	r3, [r7, #4]
 8001f88:	681b      	ldr	r3, [r3, #0]
 8001f8a:	4a51      	ldr	r2, [pc, #324]	; (80020d0 <HAL_DMA_Abort_IT+0x288>)
 8001f8c:	4293      	cmp	r3, r2
 8001f8e:	d018      	beq.n	8001fc2 <HAL_DMA_Abort_IT+0x17a>
 8001f90:	687b      	ldr	r3, [r7, #4]
 8001f92:	681b      	ldr	r3, [r3, #0]
 8001f94:	4a4f      	ldr	r2, [pc, #316]	; (80020d4 <HAL_DMA_Abort_IT+0x28c>)
 8001f96:	4293      	cmp	r3, r2
 8001f98:	d013      	beq.n	8001fc2 <HAL_DMA_Abort_IT+0x17a>
 8001f9a:	687b      	ldr	r3, [r7, #4]
 8001f9c:	681b      	ldr	r3, [r3, #0]
 8001f9e:	4a4e      	ldr	r2, [pc, #312]	; (80020d8 <HAL_DMA_Abort_IT+0x290>)
 8001fa0:	4293      	cmp	r3, r2
 8001fa2:	d00e      	beq.n	8001fc2 <HAL_DMA_Abort_IT+0x17a>
 8001fa4:	687b      	ldr	r3, [r7, #4]
 8001fa6:	681b      	ldr	r3, [r3, #0]
 8001fa8:	4a4c      	ldr	r2, [pc, #304]	; (80020dc <HAL_DMA_Abort_IT+0x294>)
 8001faa:	4293      	cmp	r3, r2
 8001fac:	d009      	beq.n	8001fc2 <HAL_DMA_Abort_IT+0x17a>
 8001fae:	687b      	ldr	r3, [r7, #4]
 8001fb0:	681b      	ldr	r3, [r3, #0]
 8001fb2:	4a4b      	ldr	r2, [pc, #300]	; (80020e0 <HAL_DMA_Abort_IT+0x298>)
 8001fb4:	4293      	cmp	r3, r2
 8001fb6:	d004      	beq.n	8001fc2 <HAL_DMA_Abort_IT+0x17a>
 8001fb8:	687b      	ldr	r3, [r7, #4]
 8001fba:	681b      	ldr	r3, [r3, #0]
 8001fbc:	4a49      	ldr	r2, [pc, #292]	; (80020e4 <HAL_DMA_Abort_IT+0x29c>)
 8001fbe:	4293      	cmp	r3, r2
 8001fc0:	d108      	bne.n	8001fd4 <HAL_DMA_Abort_IT+0x18c>
 8001fc2:	687b      	ldr	r3, [r7, #4]
 8001fc4:	681b      	ldr	r3, [r3, #0]
 8001fc6:	681a      	ldr	r2, [r3, #0]
 8001fc8:	687b      	ldr	r3, [r7, #4]
 8001fca:	681b      	ldr	r3, [r3, #0]
 8001fcc:	f022 0201 	bic.w	r2, r2, #1
 8001fd0:	601a      	str	r2, [r3, #0]
 8001fd2:	e147      	b.n	8002264 <HAL_DMA_Abort_IT+0x41c>
 8001fd4:	687b      	ldr	r3, [r7, #4]
 8001fd6:	681b      	ldr	r3, [r3, #0]
 8001fd8:	681a      	ldr	r2, [r3, #0]
 8001fda:	687b      	ldr	r3, [r7, #4]
 8001fdc:	681b      	ldr	r3, [r3, #0]
 8001fde:	f022 0201 	bic.w	r2, r2, #1
 8001fe2:	601a      	str	r2, [r3, #0]
 8001fe4:	e13e      	b.n	8002264 <HAL_DMA_Abort_IT+0x41c>
    }
    else /* BDMA channel */
    {
      /* Disable DMA All Interrupts  */
      ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  &= ~(BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE);
 8001fe6:	687b      	ldr	r3, [r7, #4]
 8001fe8:	681b      	ldr	r3, [r3, #0]
 8001fea:	681a      	ldr	r2, [r3, #0]
 8001fec:	687b      	ldr	r3, [r7, #4]
 8001fee:	681b      	ldr	r3, [r3, #0]
 8001ff0:	f022 020e 	bic.w	r2, r2, #14
 8001ff4:	601a      	str	r2, [r3, #0]

      /* Disable the channel */
      __HAL_DMA_DISABLE(hdma);
 8001ff6:	687b      	ldr	r3, [r7, #4]
 8001ff8:	681b      	ldr	r3, [r3, #0]
 8001ffa:	4a2b      	ldr	r2, [pc, #172]	; (80020a8 <HAL_DMA_Abort_IT+0x260>)
 8001ffc:	4293      	cmp	r3, r2
 8001ffe:	d04a      	beq.n	8002096 <HAL_DMA_Abort_IT+0x24e>
 8002000:	687b      	ldr	r3, [r7, #4]
 8002002:	681b      	ldr	r3, [r3, #0]
 8002004:	4a29      	ldr	r2, [pc, #164]	; (80020ac <HAL_DMA_Abort_IT+0x264>)
 8002006:	4293      	cmp	r3, r2
 8002008:	d045      	beq.n	8002096 <HAL_DMA_Abort_IT+0x24e>
 800200a:	687b      	ldr	r3, [r7, #4]
 800200c:	681b      	ldr	r3, [r3, #0]
 800200e:	4a28      	ldr	r2, [pc, #160]	; (80020b0 <HAL_DMA_Abort_IT+0x268>)
 8002010:	4293      	cmp	r3, r2
 8002012:	d040      	beq.n	8002096 <HAL_DMA_Abort_IT+0x24e>
 8002014:	687b      	ldr	r3, [r7, #4]
 8002016:	681b      	ldr	r3, [r3, #0]
 8002018:	4a26      	ldr	r2, [pc, #152]	; (80020b4 <HAL_DMA_Abort_IT+0x26c>)
 800201a:	4293      	cmp	r3, r2
 800201c:	d03b      	beq.n	8002096 <HAL_DMA_Abort_IT+0x24e>
 800201e:	687b      	ldr	r3, [r7, #4]
 8002020:	681b      	ldr	r3, [r3, #0]
 8002022:	4a25      	ldr	r2, [pc, #148]	; (80020b8 <HAL_DMA_Abort_IT+0x270>)
 8002024:	4293      	cmp	r3, r2
 8002026:	d036      	beq.n	8002096 <HAL_DMA_Abort_IT+0x24e>
 8002028:	687b      	ldr	r3, [r7, #4]
 800202a:	681b      	ldr	r3, [r3, #0]
 800202c:	4a23      	ldr	r2, [pc, #140]	; (80020bc <HAL_DMA_Abort_IT+0x274>)
 800202e:	4293      	cmp	r3, r2
 8002030:	d031      	beq.n	8002096 <HAL_DMA_Abort_IT+0x24e>
 8002032:	687b      	ldr	r3, [r7, #4]
 8002034:	681b      	ldr	r3, [r3, #0]
 8002036:	4a22      	ldr	r2, [pc, #136]	; (80020c0 <HAL_DMA_Abort_IT+0x278>)
 8002038:	4293      	cmp	r3, r2
 800203a:	d02c      	beq.n	8002096 <HAL_DMA_Abort_IT+0x24e>
 800203c:	687b      	ldr	r3, [r7, #4]
 800203e:	681b      	ldr	r3, [r3, #0]
 8002040:	4a20      	ldr	r2, [pc, #128]	; (80020c4 <HAL_DMA_Abort_IT+0x27c>)
 8002042:	4293      	cmp	r3, r2
 8002044:	d027      	beq.n	8002096 <HAL_DMA_Abort_IT+0x24e>
 8002046:	687b      	ldr	r3, [r7, #4]
 8002048:	681b      	ldr	r3, [r3, #0]
 800204a:	4a1f      	ldr	r2, [pc, #124]	; (80020c8 <HAL_DMA_Abort_IT+0x280>)
 800204c:	4293      	cmp	r3, r2
 800204e:	d022      	beq.n	8002096 <HAL_DMA_Abort_IT+0x24e>
 8002050:	687b      	ldr	r3, [r7, #4]
 8002052:	681b      	ldr	r3, [r3, #0]
 8002054:	4a1d      	ldr	r2, [pc, #116]	; (80020cc <HAL_DMA_Abort_IT+0x284>)
 8002056:	4293      	cmp	r3, r2
 8002058:	d01d      	beq.n	8002096 <HAL_DMA_Abort_IT+0x24e>
 800205a:	687b      	ldr	r3, [r7, #4]
 800205c:	681b      	ldr	r3, [r3, #0]
 800205e:	4a1c      	ldr	r2, [pc, #112]	; (80020d0 <HAL_DMA_Abort_IT+0x288>)
 8002060:	4293      	cmp	r3, r2
 8002062:	d018      	beq.n	8002096 <HAL_DMA_Abort_IT+0x24e>
 8002064:	687b      	ldr	r3, [r7, #4]
 8002066:	681b      	ldr	r3, [r3, #0]
 8002068:	4a1a      	ldr	r2, [pc, #104]	; (80020d4 <HAL_DMA_Abort_IT+0x28c>)
 800206a:	4293      	cmp	r3, r2
 800206c:	d013      	beq.n	8002096 <HAL_DMA_Abort_IT+0x24e>
 800206e:	687b      	ldr	r3, [r7, #4]
 8002070:	681b      	ldr	r3, [r3, #0]
 8002072:	4a19      	ldr	r2, [pc, #100]	; (80020d8 <HAL_DMA_Abort_IT+0x290>)
 8002074:	4293      	cmp	r3, r2
 8002076:	d00e      	beq.n	8002096 <HAL_DMA_Abort_IT+0x24e>
 8002078:	687b      	ldr	r3, [r7, #4]
 800207a:	681b      	ldr	r3, [r3, #0]
 800207c:	4a17      	ldr	r2, [pc, #92]	; (80020dc <HAL_DMA_Abort_IT+0x294>)
 800207e:	4293      	cmp	r3, r2
 8002080:	d009      	beq.n	8002096 <HAL_DMA_Abort_IT+0x24e>
 8002082:	687b      	ldr	r3, [r7, #4]
 8002084:	681b      	ldr	r3, [r3, #0]
 8002086:	4a16      	ldr	r2, [pc, #88]	; (80020e0 <HAL_DMA_Abort_IT+0x298>)
 8002088:	4293      	cmp	r3, r2
 800208a:	d004      	beq.n	8002096 <HAL_DMA_Abort_IT+0x24e>
 800208c:	687b      	ldr	r3, [r7, #4]
 800208e:	681b      	ldr	r3, [r3, #0]
 8002090:	4a14      	ldr	r2, [pc, #80]	; (80020e4 <HAL_DMA_Abort_IT+0x29c>)
 8002092:	4293      	cmp	r3, r2
 8002094:	d128      	bne.n	80020e8 <HAL_DMA_Abort_IT+0x2a0>
 8002096:	687b      	ldr	r3, [r7, #4]
 8002098:	681b      	ldr	r3, [r3, #0]
 800209a:	681a      	ldr	r2, [r3, #0]
 800209c:	687b      	ldr	r3, [r7, #4]
 800209e:	681b      	ldr	r3, [r3, #0]
 80020a0:	f022 0201 	bic.w	r2, r2, #1
 80020a4:	601a      	str	r2, [r3, #0]
 80020a6:	e027      	b.n	80020f8 <HAL_DMA_Abort_IT+0x2b0>
 80020a8:	40020010 	.word	0x40020010
 80020ac:	40020028 	.word	0x40020028
 80020b0:	40020040 	.word	0x40020040
 80020b4:	40020058 	.word	0x40020058
 80020b8:	40020070 	.word	0x40020070
 80020bc:	40020088 	.word	0x40020088
 80020c0:	400200a0 	.word	0x400200a0
 80020c4:	400200b8 	.word	0x400200b8
 80020c8:	40020410 	.word	0x40020410
 80020cc:	40020428 	.word	0x40020428
 80020d0:	40020440 	.word	0x40020440
 80020d4:	40020458 	.word	0x40020458
 80020d8:	40020470 	.word	0x40020470
 80020dc:	40020488 	.word	0x40020488
 80020e0:	400204a0 	.word	0x400204a0
 80020e4:	400204b8 	.word	0x400204b8
 80020e8:	687b      	ldr	r3, [r7, #4]
 80020ea:	681b      	ldr	r3, [r3, #0]
 80020ec:	681a      	ldr	r2, [r3, #0]
 80020ee:	687b      	ldr	r3, [r7, #4]
 80020f0:	681b      	ldr	r3, [r3, #0]
 80020f2:	f022 0201 	bic.w	r2, r2, #1
 80020f6:	601a      	str	r2, [r3, #0]

      if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 80020f8:	687b      	ldr	r3, [r7, #4]
 80020fa:	681b      	ldr	r3, [r3, #0]
 80020fc:	4a5c      	ldr	r2, [pc, #368]	; (8002270 <HAL_DMA_Abort_IT+0x428>)
 80020fe:	4293      	cmp	r3, r2
 8002100:	d072      	beq.n	80021e8 <HAL_DMA_Abort_IT+0x3a0>
 8002102:	687b      	ldr	r3, [r7, #4]
 8002104:	681b      	ldr	r3, [r3, #0]
 8002106:	4a5b      	ldr	r2, [pc, #364]	; (8002274 <HAL_DMA_Abort_IT+0x42c>)
 8002108:	4293      	cmp	r3, r2
 800210a:	d06d      	beq.n	80021e8 <HAL_DMA_Abort_IT+0x3a0>
 800210c:	687b      	ldr	r3, [r7, #4]
 800210e:	681b      	ldr	r3, [r3, #0]
 8002110:	4a59      	ldr	r2, [pc, #356]	; (8002278 <HAL_DMA_Abort_IT+0x430>)
 8002112:	4293      	cmp	r3, r2
 8002114:	d068      	beq.n	80021e8 <HAL_DMA_Abort_IT+0x3a0>
 8002116:	687b      	ldr	r3, [r7, #4]
 8002118:	681b      	ldr	r3, [r3, #0]
 800211a:	4a58      	ldr	r2, [pc, #352]	; (800227c <HAL_DMA_Abort_IT+0x434>)
 800211c:	4293      	cmp	r3, r2
 800211e:	d063      	beq.n	80021e8 <HAL_DMA_Abort_IT+0x3a0>
 8002120:	687b      	ldr	r3, [r7, #4]
 8002122:	681b      	ldr	r3, [r3, #0]
 8002124:	4a56      	ldr	r2, [pc, #344]	; (8002280 <HAL_DMA_Abort_IT+0x438>)
 8002126:	4293      	cmp	r3, r2
 8002128:	d05e      	beq.n	80021e8 <HAL_DMA_Abort_IT+0x3a0>
 800212a:	687b      	ldr	r3, [r7, #4]
 800212c:	681b      	ldr	r3, [r3, #0]
 800212e:	4a55      	ldr	r2, [pc, #340]	; (8002284 <HAL_DMA_Abort_IT+0x43c>)
 8002130:	4293      	cmp	r3, r2
 8002132:	d059      	beq.n	80021e8 <HAL_DMA_Abort_IT+0x3a0>
 8002134:	687b      	ldr	r3, [r7, #4]
 8002136:	681b      	ldr	r3, [r3, #0]
 8002138:	4a53      	ldr	r2, [pc, #332]	; (8002288 <HAL_DMA_Abort_IT+0x440>)
 800213a:	4293      	cmp	r3, r2
 800213c:	d054      	beq.n	80021e8 <HAL_DMA_Abort_IT+0x3a0>
 800213e:	687b      	ldr	r3, [r7, #4]
 8002140:	681b      	ldr	r3, [r3, #0]
 8002142:	4a52      	ldr	r2, [pc, #328]	; (800228c <HAL_DMA_Abort_IT+0x444>)
 8002144:	4293      	cmp	r3, r2
 8002146:	d04f      	beq.n	80021e8 <HAL_DMA_Abort_IT+0x3a0>
 8002148:	687b      	ldr	r3, [r7, #4]
 800214a:	681b      	ldr	r3, [r3, #0]
 800214c:	4a50      	ldr	r2, [pc, #320]	; (8002290 <HAL_DMA_Abort_IT+0x448>)
 800214e:	4293      	cmp	r3, r2
 8002150:	d04a      	beq.n	80021e8 <HAL_DMA_Abort_IT+0x3a0>
 8002152:	687b      	ldr	r3, [r7, #4]
 8002154:	681b      	ldr	r3, [r3, #0]
 8002156:	4a4f      	ldr	r2, [pc, #316]	; (8002294 <HAL_DMA_Abort_IT+0x44c>)
 8002158:	4293      	cmp	r3, r2
 800215a:	d045      	beq.n	80021e8 <HAL_DMA_Abort_IT+0x3a0>
 800215c:	687b      	ldr	r3, [r7, #4]
 800215e:	681b      	ldr	r3, [r3, #0]
 8002160:	4a4d      	ldr	r2, [pc, #308]	; (8002298 <HAL_DMA_Abort_IT+0x450>)
 8002162:	4293      	cmp	r3, r2
 8002164:	d040      	beq.n	80021e8 <HAL_DMA_Abort_IT+0x3a0>
 8002166:	687b      	ldr	r3, [r7, #4]
 8002168:	681b      	ldr	r3, [r3, #0]
 800216a:	4a4c      	ldr	r2, [pc, #304]	; (800229c <HAL_DMA_Abort_IT+0x454>)
 800216c:	4293      	cmp	r3, r2
 800216e:	d03b      	beq.n	80021e8 <HAL_DMA_Abort_IT+0x3a0>
 8002170:	687b      	ldr	r3, [r7, #4]
 8002172:	681b      	ldr	r3, [r3, #0]
 8002174:	4a4a      	ldr	r2, [pc, #296]	; (80022a0 <HAL_DMA_Abort_IT+0x458>)
 8002176:	4293      	cmp	r3, r2
 8002178:	d036      	beq.n	80021e8 <HAL_DMA_Abort_IT+0x3a0>
 800217a:	687b      	ldr	r3, [r7, #4]
 800217c:	681b      	ldr	r3, [r3, #0]
 800217e:	4a49      	ldr	r2, [pc, #292]	; (80022a4 <HAL_DMA_Abort_IT+0x45c>)
 8002180:	4293      	cmp	r3, r2
 8002182:	d031      	beq.n	80021e8 <HAL_DMA_Abort_IT+0x3a0>
 8002184:	687b      	ldr	r3, [r7, #4]
 8002186:	681b      	ldr	r3, [r3, #0]
 8002188:	4a47      	ldr	r2, [pc, #284]	; (80022a8 <HAL_DMA_Abort_IT+0x460>)
 800218a:	4293      	cmp	r3, r2
 800218c:	d02c      	beq.n	80021e8 <HAL_DMA_Abort_IT+0x3a0>
 800218e:	687b      	ldr	r3, [r7, #4]
 8002190:	681b      	ldr	r3, [r3, #0]
 8002192:	4a46      	ldr	r2, [pc, #280]	; (80022ac <HAL_DMA_Abort_IT+0x464>)
 8002194:	4293      	cmp	r3, r2
 8002196:	d027      	beq.n	80021e8 <HAL_DMA_Abort_IT+0x3a0>
 8002198:	687b      	ldr	r3, [r7, #4]
 800219a:	681b      	ldr	r3, [r3, #0]
 800219c:	4a44      	ldr	r2, [pc, #272]	; (80022b0 <HAL_DMA_Abort_IT+0x468>)
 800219e:	4293      	cmp	r3, r2
 80021a0:	d022      	beq.n	80021e8 <HAL_DMA_Abort_IT+0x3a0>
 80021a2:	687b      	ldr	r3, [r7, #4]
 80021a4:	681b      	ldr	r3, [r3, #0]
 80021a6:	4a43      	ldr	r2, [pc, #268]	; (80022b4 <HAL_DMA_Abort_IT+0x46c>)
 80021a8:	4293      	cmp	r3, r2
 80021aa:	d01d      	beq.n	80021e8 <HAL_DMA_Abort_IT+0x3a0>
 80021ac:	687b      	ldr	r3, [r7, #4]
 80021ae:	681b      	ldr	r3, [r3, #0]
 80021b0:	4a41      	ldr	r2, [pc, #260]	; (80022b8 <HAL_DMA_Abort_IT+0x470>)
 80021b2:	4293      	cmp	r3, r2
 80021b4:	d018      	beq.n	80021e8 <HAL_DMA_Abort_IT+0x3a0>
 80021b6:	687b      	ldr	r3, [r7, #4]
 80021b8:	681b      	ldr	r3, [r3, #0]
 80021ba:	4a40      	ldr	r2, [pc, #256]	; (80022bc <HAL_DMA_Abort_IT+0x474>)
 80021bc:	4293      	cmp	r3, r2
 80021be:	d013      	beq.n	80021e8 <HAL_DMA_Abort_IT+0x3a0>
 80021c0:	687b      	ldr	r3, [r7, #4]
 80021c2:	681b      	ldr	r3, [r3, #0]
 80021c4:	4a3e      	ldr	r2, [pc, #248]	; (80022c0 <HAL_DMA_Abort_IT+0x478>)
 80021c6:	4293      	cmp	r3, r2
 80021c8:	d00e      	beq.n	80021e8 <HAL_DMA_Abort_IT+0x3a0>
 80021ca:	687b      	ldr	r3, [r7, #4]
 80021cc:	681b      	ldr	r3, [r3, #0]
 80021ce:	4a3d      	ldr	r2, [pc, #244]	; (80022c4 <HAL_DMA_Abort_IT+0x47c>)
 80021d0:	4293      	cmp	r3, r2
 80021d2:	d009      	beq.n	80021e8 <HAL_DMA_Abort_IT+0x3a0>
 80021d4:	687b      	ldr	r3, [r7, #4]
 80021d6:	681b      	ldr	r3, [r3, #0]
 80021d8:	4a3b      	ldr	r2, [pc, #236]	; (80022c8 <HAL_DMA_Abort_IT+0x480>)
 80021da:	4293      	cmp	r3, r2
 80021dc:	d004      	beq.n	80021e8 <HAL_DMA_Abort_IT+0x3a0>
 80021de:	687b      	ldr	r3, [r7, #4]
 80021e0:	681b      	ldr	r3, [r3, #0]
 80021e2:	4a3a      	ldr	r2, [pc, #232]	; (80022cc <HAL_DMA_Abort_IT+0x484>)
 80021e4:	4293      	cmp	r3, r2
 80021e6:	d101      	bne.n	80021ec <HAL_DMA_Abort_IT+0x3a4>
 80021e8:	2301      	movs	r3, #1
 80021ea:	e000      	b.n	80021ee <HAL_DMA_Abort_IT+0x3a6>
 80021ec:	2300      	movs	r3, #0
 80021ee:	2b00      	cmp	r3, #0
 80021f0:	d028      	beq.n	8002244 <HAL_DMA_Abort_IT+0x3fc>
      {
        /* disable the DMAMUX sync overrun IT */
        hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 80021f2:	687b      	ldr	r3, [r7, #4]
 80021f4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80021f6:	681a      	ldr	r2, [r3, #0]
 80021f8:	687b      	ldr	r3, [r7, #4]
 80021fa:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80021fc:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8002200:	601a      	str	r2, [r3, #0]

        /* Clear all flags */
        regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 8002202:	687b      	ldr	r3, [r7, #4]
 8002204:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002206:	60fb      	str	r3, [r7, #12]
        regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 8002208:	687b      	ldr	r3, [r7, #4]
 800220a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800220c:	f003 031f 	and.w	r3, r3, #31
 8002210:	2201      	movs	r2, #1
 8002212:	409a      	lsls	r2, r3
 8002214:	68fb      	ldr	r3, [r7, #12]
 8002216:	605a      	str	r2, [r3, #4]

        /* Clear the DMAMUX synchro overrun flag */
        hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8002218:	687b      	ldr	r3, [r7, #4]
 800221a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800221c:	687a      	ldr	r2, [r7, #4]
 800221e:	6e92      	ldr	r2, [r2, #104]	; 0x68
 8002220:	605a      	str	r2, [r3, #4]

        if(hdma->DMAmuxRequestGen != 0U)
 8002222:	687b      	ldr	r3, [r7, #4]
 8002224:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8002226:	2b00      	cmp	r3, #0
 8002228:	d00c      	beq.n	8002244 <HAL_DMA_Abort_IT+0x3fc>
        {
          /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
          /* disable the request gen overrun IT */
          hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 800222a:	687b      	ldr	r3, [r7, #4]
 800222c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800222e:	681a      	ldr	r2, [r3, #0]
 8002230:	687b      	ldr	r3, [r7, #4]
 8002232:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8002234:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8002238:	601a      	str	r2, [r3, #0]

          /* Clear the DMAMUX request generator overrun flag */
          hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 800223a:	687b      	ldr	r3, [r7, #4]
 800223c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800223e:	687a      	ldr	r2, [r7, #4]
 8002240:	6f52      	ldr	r2, [r2, #116]	; 0x74
 8002242:	605a      	str	r2, [r3, #4]
        }
      }

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8002244:	687b      	ldr	r3, [r7, #4]
 8002246:	2200      	movs	r2, #0
 8002248:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 800224c:	687b      	ldr	r3, [r7, #4]
 800224e:	2201      	movs	r2, #1
 8002250:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Call User Abort callback */
      if(hdma->XferAbortCallback != NULL)
 8002254:	687b      	ldr	r3, [r7, #4]
 8002256:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002258:	2b00      	cmp	r3, #0
 800225a:	d003      	beq.n	8002264 <HAL_DMA_Abort_IT+0x41c>
      {
        hdma->XferAbortCallback(hdma);
 800225c:	687b      	ldr	r3, [r7, #4]
 800225e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002260:	6878      	ldr	r0, [r7, #4]
 8002262:	4798      	blx	r3
      }
    }
  }

  return HAL_OK;
 8002264:	2300      	movs	r3, #0
}
 8002266:	4618      	mov	r0, r3
 8002268:	3710      	adds	r7, #16
 800226a:	46bd      	mov	sp, r7
 800226c:	bd80      	pop	{r7, pc}
 800226e:	bf00      	nop
 8002270:	40020010 	.word	0x40020010
 8002274:	40020028 	.word	0x40020028
 8002278:	40020040 	.word	0x40020040
 800227c:	40020058 	.word	0x40020058
 8002280:	40020070 	.word	0x40020070
 8002284:	40020088 	.word	0x40020088
 8002288:	400200a0 	.word	0x400200a0
 800228c:	400200b8 	.word	0x400200b8
 8002290:	40020410 	.word	0x40020410
 8002294:	40020428 	.word	0x40020428
 8002298:	40020440 	.word	0x40020440
 800229c:	40020458 	.word	0x40020458
 80022a0:	40020470 	.word	0x40020470
 80022a4:	40020488 	.word	0x40020488
 80022a8:	400204a0 	.word	0x400204a0
 80022ac:	400204b8 	.word	0x400204b8
 80022b0:	58025408 	.word	0x58025408
 80022b4:	5802541c 	.word	0x5802541c
 80022b8:	58025430 	.word	0x58025430
 80022bc:	58025444 	.word	0x58025444
 80022c0:	58025458 	.word	0x58025458
 80022c4:	5802546c 	.word	0x5802546c
 80022c8:	58025480 	.word	0x58025480
 80022cc:	58025494 	.word	0x58025494

080022d0 <HAL_ETH_Init>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Init(ETH_HandleTypeDef *heth)
{
 80022d0:	b580      	push	{r7, lr}
 80022d2:	b084      	sub	sp, #16
 80022d4:	af00      	add	r7, sp, #0
 80022d6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if(heth == NULL)
 80022d8:	687b      	ldr	r3, [r7, #4]
 80022da:	2b00      	cmp	r3, #0
 80022dc:	d101      	bne.n	80022e2 <HAL_ETH_Init+0x12>
  {
    return HAL_ERROR;
 80022de:	2301      	movs	r3, #1
 80022e0:	e0c6      	b.n	8002470 <HAL_ETH_Init+0x1a0>
  }

#else

  /* Check the ETH peripheral state */
  if(heth->gState == HAL_ETH_STATE_RESET)
 80022e2:	687b      	ldr	r3, [r7, #4]
 80022e4:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80022e6:	2b00      	cmp	r3, #0
 80022e8:	d102      	bne.n	80022f0 <HAL_ETH_Init+0x20>
  {
    /* Init the low level hardware : GPIO, CLOCK, NVIC. */
    HAL_ETH_MspInit(heth);
 80022ea:	6878      	ldr	r0, [r7, #4]
 80022ec:	f7fe fd92 	bl	8000e14 <HAL_ETH_MspInit>
  }
#endif /* (USE_HAL_ETH_REGISTER_CALLBACKS) */

  heth->gState = HAL_ETH_STATE_BUSY;
 80022f0:	687b      	ldr	r3, [r7, #4]
 80022f2:	2223      	movs	r2, #35	; 0x23
 80022f4:	66da      	str	r2, [r3, #108]	; 0x6c

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80022f6:	4b60      	ldr	r3, [pc, #384]	; (8002478 <HAL_ETH_Init+0x1a8>)
 80022f8:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 80022fc:	4a5e      	ldr	r2, [pc, #376]	; (8002478 <HAL_ETH_Init+0x1a8>)
 80022fe:	f043 0302 	orr.w	r3, r3, #2
 8002302:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 8002306:	4b5c      	ldr	r3, [pc, #368]	; (8002478 <HAL_ETH_Init+0x1a8>)
 8002308:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 800230c:	f003 0302 	and.w	r3, r3, #2
 8002310:	60bb      	str	r3, [r7, #8]
 8002312:	68bb      	ldr	r3, [r7, #8]

  if(heth->Init.MediaInterface == HAL_ETH_MII_MODE)
 8002314:	687b      	ldr	r3, [r7, #4]
 8002316:	7a1b      	ldrb	r3, [r3, #8]
 8002318:	2b00      	cmp	r3, #0
 800231a:	d103      	bne.n	8002324 <HAL_ETH_Init+0x54>
  {
    HAL_SYSCFG_ETHInterfaceSelect(SYSCFG_ETH_MII);
 800231c:	2000      	movs	r0, #0
 800231e:	f7ff f951 	bl	80015c4 <HAL_SYSCFG_ETHInterfaceSelect>
 8002322:	e003      	b.n	800232c <HAL_ETH_Init+0x5c>
  }
  else
  {
    HAL_SYSCFG_ETHInterfaceSelect(SYSCFG_ETH_RMII);
 8002324:	f44f 0000 	mov.w	r0, #8388608	; 0x800000
 8002328:	f7ff f94c 	bl	80015c4 <HAL_SYSCFG_ETHInterfaceSelect>
  }

  /* Ethernet Software reset */
  /* Set the SWR bit: resets all MAC subsystem internal registers and logic */
  /* After reset all the registers holds their respective reset values */
  SET_BIT(heth->Instance->DMAMR, ETH_DMAMR_SWR);
 800232c:	687b      	ldr	r3, [r7, #4]
 800232e:	681b      	ldr	r3, [r3, #0]
 8002330:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002334:	681a      	ldr	r2, [r3, #0]
 8002336:	687b      	ldr	r3, [r7, #4]
 8002338:	681b      	ldr	r3, [r3, #0]
 800233a:	f042 0201 	orr.w	r2, r2, #1
 800233e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002342:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8002344:	f7ff f932 	bl	80015ac <HAL_GetTick>
 8002348:	60f8      	str	r0, [r7, #12]

  /* Wait for software reset */
  while (READ_BIT(heth->Instance->DMAMR, ETH_DMAMR_SWR) > 0U)
 800234a:	e00f      	b.n	800236c <HAL_ETH_Init+0x9c>
  {
    if(((HAL_GetTick() - tickstart ) > ETH_SWRESET_TIMEOUT))
 800234c:	f7ff f92e 	bl	80015ac <HAL_GetTick>
 8002350:	4602      	mov	r2, r0
 8002352:	68fb      	ldr	r3, [r7, #12]
 8002354:	1ad3      	subs	r3, r2, r3
 8002356:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 800235a:	d907      	bls.n	800236c <HAL_ETH_Init+0x9c>
    {
      /* Set Error Code */
      heth->ErrorCode = HAL_ETH_ERROR_TIMEOUT;
 800235c:	687b      	ldr	r3, [r7, #4]
 800235e:	2204      	movs	r2, #4
 8002360:	675a      	str	r2, [r3, #116]	; 0x74
      /* Set State as Error */
      heth->gState = HAL_ETH_STATE_ERROR;
 8002362:	687b      	ldr	r3, [r7, #4]
 8002364:	22e0      	movs	r2, #224	; 0xe0
 8002366:	66da      	str	r2, [r3, #108]	; 0x6c
      /* Return Error */
      return HAL_ERROR;
 8002368:	2301      	movs	r3, #1
 800236a:	e081      	b.n	8002470 <HAL_ETH_Init+0x1a0>
  while (READ_BIT(heth->Instance->DMAMR, ETH_DMAMR_SWR) > 0U)
 800236c:	687b      	ldr	r3, [r7, #4]
 800236e:	681b      	ldr	r3, [r3, #0]
 8002370:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002374:	681b      	ldr	r3, [r3, #0]
 8002376:	f003 0301 	and.w	r3, r3, #1
 800237a:	2b00      	cmp	r3, #0
 800237c:	d1e6      	bne.n	800234c <HAL_ETH_Init+0x7c>
    }
  }

  /*------------------ MDIO CSR Clock Range Configuration --------------------*/
  ETH_MAC_MDIO_ClkConfig(heth);
 800237e:	6878      	ldr	r0, [r7, #4]
 8002380:	f000 fac0 	bl	8002904 <ETH_MAC_MDIO_ClkConfig>

  /*------------------ MAC LPI 1US Tic Counter Configuration --------------------*/
  WRITE_REG(heth->Instance->MAC1USTCR, (((uint32_t)HAL_RCC_GetHCLKFreq() / ETH_MAC_US_TICK) - 1U));
 8002384:	f001 fc74 	bl	8003c70 <HAL_RCC_GetHCLKFreq>
 8002388:	4603      	mov	r3, r0
 800238a:	4a3c      	ldr	r2, [pc, #240]	; (800247c <HAL_ETH_Init+0x1ac>)
 800238c:	fba2 2303 	umull	r2, r3, r2, r3
 8002390:	0c9a      	lsrs	r2, r3, #18
 8002392:	687b      	ldr	r3, [r7, #4]
 8002394:	681b      	ldr	r3, [r3, #0]
 8002396:	3a01      	subs	r2, #1
 8002398:	f8c3 20dc 	str.w	r2, [r3, #220]	; 0xdc

  /*------------------ MAC, MTL and DMA default Configuration ----------------*/
  ETH_MACDMAConfig(heth);
 800239c:	6878      	ldr	r0, [r7, #4]
 800239e:	f000 fa13 	bl	80027c8 <ETH_MACDMAConfig>

  /* SET DSL to 64 bit */
  MODIFY_REG(heth->Instance->DMACCR, ETH_DMACCR_DSL, ETH_DMACCR_DSL_64BIT);
 80023a2:	687b      	ldr	r3, [r7, #4]
 80023a4:	681b      	ldr	r3, [r3, #0]
 80023a6:	f503 5388 	add.w	r3, r3, #4352	; 0x1100
 80023aa:	681b      	ldr	r3, [r3, #0]
 80023ac:	f423 12e0 	bic.w	r2, r3, #1835008	; 0x1c0000
 80023b0:	687b      	ldr	r3, [r7, #4]
 80023b2:	681b      	ldr	r3, [r3, #0]
 80023b4:	f442 2200 	orr.w	r2, r2, #524288	; 0x80000
 80023b8:	f503 5388 	add.w	r3, r3, #4352	; 0x1100
 80023bc:	601a      	str	r2, [r3, #0]

  /* Set Receive Buffers Length (must be a multiple of 4) */
  if ((heth->Init.RxBuffLen % 0x4U) != 0x0U)
 80023be:	687b      	ldr	r3, [r7, #4]
 80023c0:	695b      	ldr	r3, [r3, #20]
 80023c2:	f003 0303 	and.w	r3, r3, #3
 80023c6:	2b00      	cmp	r3, #0
 80023c8:	d007      	beq.n	80023da <HAL_ETH_Init+0x10a>
  {
    /* Set Error Code */
    heth->ErrorCode = HAL_ETH_ERROR_PARAM;
 80023ca:	687b      	ldr	r3, [r7, #4]
 80023cc:	2201      	movs	r2, #1
 80023ce:	675a      	str	r2, [r3, #116]	; 0x74
    /* Set State as Error */
    heth->gState = HAL_ETH_STATE_ERROR;
 80023d0:	687b      	ldr	r3, [r7, #4]
 80023d2:	22e0      	movs	r2, #224	; 0xe0
 80023d4:	66da      	str	r2, [r3, #108]	; 0x6c
    /* Return Error */
    return HAL_ERROR;
 80023d6:	2301      	movs	r3, #1
 80023d8:	e04a      	b.n	8002470 <HAL_ETH_Init+0x1a0>
  }
  else
  {
    MODIFY_REG(heth->Instance->DMACRCR, ETH_DMACRCR_RBSZ, ((heth->Init.RxBuffLen) << 1));
 80023da:	687b      	ldr	r3, [r7, #4]
 80023dc:	681a      	ldr	r2, [r3, #0]
 80023de:	f241 1308 	movw	r3, #4360	; 0x1108
 80023e2:	4413      	add	r3, r2
 80023e4:	681a      	ldr	r2, [r3, #0]
 80023e6:	4b26      	ldr	r3, [pc, #152]	; (8002480 <HAL_ETH_Init+0x1b0>)
 80023e8:	4013      	ands	r3, r2
 80023ea:	687a      	ldr	r2, [r7, #4]
 80023ec:	6952      	ldr	r2, [r2, #20]
 80023ee:	0052      	lsls	r2, r2, #1
 80023f0:	6879      	ldr	r1, [r7, #4]
 80023f2:	6809      	ldr	r1, [r1, #0]
 80023f4:	431a      	orrs	r2, r3
 80023f6:	f241 1308 	movw	r3, #4360	; 0x1108
 80023fa:	440b      	add	r3, r1
 80023fc:	601a      	str	r2, [r3, #0]
  }

  /*------------------ DMA Tx Descriptors Configuration ----------------------*/
  ETH_DMATxDescListInit(heth);
 80023fe:	6878      	ldr	r0, [r7, #4]
 8002400:	f000 fad8 	bl	80029b4 <ETH_DMATxDescListInit>

  /*------------------ DMA Rx Descriptors Configuration ----------------------*/
  ETH_DMARxDescListInit(heth);
 8002404:	6878      	ldr	r0, [r7, #4]
 8002406:	f000 fb1c 	bl	8002a42 <ETH_DMARxDescListInit>

  /*--------------------- ETHERNET MAC Address Configuration ------------------*/
  /* Set MAC addr bits 32 to 47 */
  heth->Instance->MACA0HR = (((uint32_t)(heth->Init.MACAddr[5]) << 8) | (uint32_t)heth->Init.MACAddr[4]);
 800240a:	687b      	ldr	r3, [r7, #4]
 800240c:	685b      	ldr	r3, [r3, #4]
 800240e:	3305      	adds	r3, #5
 8002410:	781b      	ldrb	r3, [r3, #0]
 8002412:	021a      	lsls	r2, r3, #8
 8002414:	687b      	ldr	r3, [r7, #4]
 8002416:	685b      	ldr	r3, [r3, #4]
 8002418:	3304      	adds	r3, #4
 800241a:	781b      	ldrb	r3, [r3, #0]
 800241c:	4619      	mov	r1, r3
 800241e:	687b      	ldr	r3, [r7, #4]
 8002420:	681b      	ldr	r3, [r3, #0]
 8002422:	430a      	orrs	r2, r1
 8002424:	f8c3 2300 	str.w	r2, [r3, #768]	; 0x300
  /* Set MAC addr bits 0 to 31 */
  heth->Instance->MACA0LR = (((uint32_t)(heth->Init.MACAddr[3]) << 24) | ((uint32_t)(heth->Init.MACAddr[2]) << 16) |
 8002428:	687b      	ldr	r3, [r7, #4]
 800242a:	685b      	ldr	r3, [r3, #4]
 800242c:	3303      	adds	r3, #3
 800242e:	781b      	ldrb	r3, [r3, #0]
 8002430:	061a      	lsls	r2, r3, #24
 8002432:	687b      	ldr	r3, [r7, #4]
 8002434:	685b      	ldr	r3, [r3, #4]
 8002436:	3302      	adds	r3, #2
 8002438:	781b      	ldrb	r3, [r3, #0]
 800243a:	041b      	lsls	r3, r3, #16
 800243c:	431a      	orrs	r2, r3
                             ((uint32_t)(heth->Init.MACAddr[1]) << 8) | (uint32_t)heth->Init.MACAddr[0]);
 800243e:	687b      	ldr	r3, [r7, #4]
 8002440:	685b      	ldr	r3, [r3, #4]
 8002442:	3301      	adds	r3, #1
 8002444:	781b      	ldrb	r3, [r3, #0]
 8002446:	021b      	lsls	r3, r3, #8
  heth->Instance->MACA0LR = (((uint32_t)(heth->Init.MACAddr[3]) << 24) | ((uint32_t)(heth->Init.MACAddr[2]) << 16) |
 8002448:	431a      	orrs	r2, r3
                             ((uint32_t)(heth->Init.MACAddr[1]) << 8) | (uint32_t)heth->Init.MACAddr[0]);
 800244a:	687b      	ldr	r3, [r7, #4]
 800244c:	685b      	ldr	r3, [r3, #4]
 800244e:	781b      	ldrb	r3, [r3, #0]
 8002450:	4619      	mov	r1, r3
  heth->Instance->MACA0LR = (((uint32_t)(heth->Init.MACAddr[3]) << 24) | ((uint32_t)(heth->Init.MACAddr[2]) << 16) |
 8002452:	687b      	ldr	r3, [r7, #4]
 8002454:	681b      	ldr	r3, [r3, #0]
                             ((uint32_t)(heth->Init.MACAddr[1]) << 8) | (uint32_t)heth->Init.MACAddr[0]);
 8002456:	430a      	orrs	r2, r1
  heth->Instance->MACA0LR = (((uint32_t)(heth->Init.MACAddr[3]) << 24) | ((uint32_t)(heth->Init.MACAddr[2]) << 16) |
 8002458:	f8c3 2304 	str.w	r2, [r3, #772]	; 0x304

  heth->ErrorCode = HAL_ETH_ERROR_NONE;
 800245c:	687b      	ldr	r3, [r7, #4]
 800245e:	2200      	movs	r2, #0
 8002460:	675a      	str	r2, [r3, #116]	; 0x74
  heth->gState = HAL_ETH_STATE_READY;
 8002462:	687b      	ldr	r3, [r7, #4]
 8002464:	2210      	movs	r2, #16
 8002466:	66da      	str	r2, [r3, #108]	; 0x6c
  heth->RxState = HAL_ETH_STATE_READY;
 8002468:	687b      	ldr	r3, [r7, #4]
 800246a:	2210      	movs	r2, #16
 800246c:	671a      	str	r2, [r3, #112]	; 0x70

  return HAL_OK;
 800246e:	2300      	movs	r3, #0
}
 8002470:	4618      	mov	r0, r3
 8002472:	3710      	adds	r7, #16
 8002474:	46bd      	mov	sp, r7
 8002476:	bd80      	pop	{r7, pc}
 8002478:	58024400 	.word	0x58024400
 800247c:	431bde83 	.word	0x431bde83
 8002480:	ffff8001 	.word	0xffff8001

08002484 <ETH_SetMACConfig>:
/** @addtogroup ETH_Private_Functions   ETH Private Functions
  * @{
  */

static void ETH_SetMACConfig(ETH_HandleTypeDef *heth,  ETH_MACConfigTypeDef *macconf)
{
 8002484:	b480      	push	{r7}
 8002486:	b085      	sub	sp, #20
 8002488:	af00      	add	r7, sp, #0
 800248a:	6078      	str	r0, [r7, #4]
 800248c:	6039      	str	r1, [r7, #0]
  uint32_t macregval;

  /*------------------------ MACCR Configuration --------------------*/
  macregval =(macconf->InterPacketGapVal |
 800248e:	683b      	ldr	r3, [r7, #0]
 8002490:	689a      	ldr	r2, [r3, #8]
              macconf->SourceAddrControl |
 8002492:	683b      	ldr	r3, [r7, #0]
 8002494:	681b      	ldr	r3, [r3, #0]
  macregval =(macconf->InterPacketGapVal |
 8002496:	431a      	orrs	r2, r3
                ((uint32_t)macconf->ChecksumOffload<< 27) |
 8002498:	683b      	ldr	r3, [r7, #0]
 800249a:	791b      	ldrb	r3, [r3, #4]
 800249c:	06db      	lsls	r3, r3, #27
              macconf->SourceAddrControl |
 800249e:	431a      	orrs	r2, r3
                  ((uint32_t)macconf->GiantPacketSizeLimitControl << 23) |
 80024a0:	683b      	ldr	r3, [r7, #0]
 80024a2:	7b1b      	ldrb	r3, [r3, #12]
 80024a4:	05db      	lsls	r3, r3, #23
                ((uint32_t)macconf->ChecksumOffload<< 27) |
 80024a6:	431a      	orrs	r2, r3
                    ((uint32_t)macconf->Support2KPacket  << 22) |
 80024a8:	683b      	ldr	r3, [r7, #0]
 80024aa:	7b5b      	ldrb	r3, [r3, #13]
 80024ac:	059b      	lsls	r3, r3, #22
                  ((uint32_t)macconf->GiantPacketSizeLimitControl << 23) |
 80024ae:	431a      	orrs	r2, r3
                      ((uint32_t)macconf->CRCStripTypePacket << 21) |
 80024b0:	683b      	ldr	r3, [r7, #0]
 80024b2:	7b9b      	ldrb	r3, [r3, #14]
 80024b4:	055b      	lsls	r3, r3, #21
                    ((uint32_t)macconf->Support2KPacket  << 22) |
 80024b6:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->AutomaticPadCRCStrip << 20) |
 80024b8:	683b      	ldr	r3, [r7, #0]
 80024ba:	7bdb      	ldrb	r3, [r3, #15]
 80024bc:	051b      	lsls	r3, r3, #20
                      ((uint32_t)macconf->CRCStripTypePacket << 21) |
 80024be:	4313      	orrs	r3, r2
                          ((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 19) |
 80024c0:	683a      	ldr	r2, [r7, #0]
 80024c2:	7c12      	ldrb	r2, [r2, #16]
 80024c4:	2a00      	cmp	r2, #0
 80024c6:	d102      	bne.n	80024ce <ETH_SetMACConfig+0x4a>
 80024c8:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 80024cc:	e000      	b.n	80024d0 <ETH_SetMACConfig+0x4c>
 80024ce:	2200      	movs	r2, #0
                        ((uint32_t)macconf->AutomaticPadCRCStrip << 20) |
 80024d0:	4313      	orrs	r3, r2
                            ((uint32_t)((macconf->Jabber == DISABLE) ? 1U : 0U) << 17) |
 80024d2:	683a      	ldr	r2, [r7, #0]
 80024d4:	7c52      	ldrb	r2, [r2, #17]
 80024d6:	2a00      	cmp	r2, #0
 80024d8:	d102      	bne.n	80024e0 <ETH_SetMACConfig+0x5c>
 80024da:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 80024de:	e000      	b.n	80024e2 <ETH_SetMACConfig+0x5e>
 80024e0:	2200      	movs	r2, #0
                          ((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 19) |
 80024e2:	431a      	orrs	r2, r3
                              ((uint32_t)macconf->JumboPacket << 16) |
 80024e4:	683b      	ldr	r3, [r7, #0]
 80024e6:	7c9b      	ldrb	r3, [r3, #18]
 80024e8:	041b      	lsls	r3, r3, #16
                            ((uint32_t)((macconf->Jabber == DISABLE) ? 1U : 0U) << 17) |
 80024ea:	431a      	orrs	r2, r3
                                macconf->Speed |
 80024ec:	683b      	ldr	r3, [r7, #0]
 80024ee:	695b      	ldr	r3, [r3, #20]
                              ((uint32_t)macconf->JumboPacket << 16) |
 80024f0:	431a      	orrs	r2, r3
                                  macconf->DuplexMode |
 80024f2:	683b      	ldr	r3, [r7, #0]
 80024f4:	699b      	ldr	r3, [r3, #24]
                                macconf->Speed |
 80024f6:	431a      	orrs	r2, r3
                                    ((uint32_t)macconf->LoopbackMode << 12) |
 80024f8:	683b      	ldr	r3, [r7, #0]
 80024fa:	7f1b      	ldrb	r3, [r3, #28]
 80024fc:	031b      	lsls	r3, r3, #12
                                  macconf->DuplexMode |
 80024fe:	431a      	orrs	r2, r3
                                      ((uint32_t)macconf->CarrierSenseBeforeTransmit << 11)|
 8002500:	683b      	ldr	r3, [r7, #0]
 8002502:	7f5b      	ldrb	r3, [r3, #29]
 8002504:	02db      	lsls	r3, r3, #11
                                    ((uint32_t)macconf->LoopbackMode << 12) |
 8002506:	4313      	orrs	r3, r2
                                        ((uint32_t)((macconf->ReceiveOwn == DISABLE) ? 1U : 0U) << 10)|
 8002508:	683a      	ldr	r2, [r7, #0]
 800250a:	7f92      	ldrb	r2, [r2, #30]
 800250c:	2a00      	cmp	r2, #0
 800250e:	d102      	bne.n	8002516 <ETH_SetMACConfig+0x92>
 8002510:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8002514:	e000      	b.n	8002518 <ETH_SetMACConfig+0x94>
 8002516:	2200      	movs	r2, #0
                                      ((uint32_t)macconf->CarrierSenseBeforeTransmit << 11)|
 8002518:	431a      	orrs	r2, r3
                                          ((uint32_t)macconf->CarrierSenseDuringTransmit << 9)|
 800251a:	683b      	ldr	r3, [r7, #0]
 800251c:	7fdb      	ldrb	r3, [r3, #31]
 800251e:	025b      	lsls	r3, r3, #9
                                        ((uint32_t)((macconf->ReceiveOwn == DISABLE) ? 1U : 0U) << 10)|
 8002520:	4313      	orrs	r3, r2
                                            ((uint32_t)((macconf->RetryTransmission == DISABLE) ? 1U : 0U) << 8)|
 8002522:	683a      	ldr	r2, [r7, #0]
 8002524:	f892 2020 	ldrb.w	r2, [r2, #32]
 8002528:	2a00      	cmp	r2, #0
 800252a:	d102      	bne.n	8002532 <ETH_SetMACConfig+0xae>
 800252c:	f44f 7280 	mov.w	r2, #256	; 0x100
 8002530:	e000      	b.n	8002534 <ETH_SetMACConfig+0xb0>
 8002532:	2200      	movs	r2, #0
                                          ((uint32_t)macconf->CarrierSenseDuringTransmit << 9)|
 8002534:	431a      	orrs	r2, r3
                                              macconf->BackOffLimit |
 8002536:	683b      	ldr	r3, [r7, #0]
 8002538:	6a5b      	ldr	r3, [r3, #36]	; 0x24
                                            ((uint32_t)((macconf->RetryTransmission == DISABLE) ? 1U : 0U) << 8)|
 800253a:	431a      	orrs	r2, r3
                                                ((uint32_t)macconf->DeferralCheck << 4)|
 800253c:	683b      	ldr	r3, [r7, #0]
 800253e:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8002542:	011b      	lsls	r3, r3, #4
                                              macconf->BackOffLimit |
 8002544:	431a      	orrs	r2, r3
                                                  macconf->PreambleLength);
 8002546:	683b      	ldr	r3, [r7, #0]
 8002548:	6adb      	ldr	r3, [r3, #44]	; 0x2c
  macregval =(macconf->InterPacketGapVal |
 800254a:	4313      	orrs	r3, r2
 800254c:	60fb      	str	r3, [r7, #12]

  /* Write to MACCR */
  MODIFY_REG(heth->Instance->MACCR, ETH_MACCR_MASK, macregval);
 800254e:	687b      	ldr	r3, [r7, #4]
 8002550:	681b      	ldr	r3, [r3, #0]
 8002552:	681a      	ldr	r2, [r3, #0]
 8002554:	4b56      	ldr	r3, [pc, #344]	; (80026b0 <ETH_SetMACConfig+0x22c>)
 8002556:	4013      	ands	r3, r2
 8002558:	687a      	ldr	r2, [r7, #4]
 800255a:	6812      	ldr	r2, [r2, #0]
 800255c:	68f9      	ldr	r1, [r7, #12]
 800255e:	430b      	orrs	r3, r1
 8002560:	6013      	str	r3, [r2, #0]

  /*------------------------ MACECR Configuration --------------------*/
  macregval = ((macconf->ExtendedInterPacketGapVal << 25)|
 8002562:	683b      	ldr	r3, [r7, #0]
 8002564:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002566:	065a      	lsls	r2, r3, #25
               ((uint32_t)macconf->ExtendedInterPacketGap << 24)|
 8002568:	683b      	ldr	r3, [r7, #0]
 800256a:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 800256e:	061b      	lsls	r3, r3, #24
  macregval = ((macconf->ExtendedInterPacketGapVal << 25)|
 8002570:	431a      	orrs	r2, r3
                 ((uint32_t)macconf->UnicastSlowProtocolPacketDetect << 18)|
 8002572:	683b      	ldr	r3, [r7, #0]
 8002574:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8002578:	049b      	lsls	r3, r3, #18
               ((uint32_t)macconf->ExtendedInterPacketGap << 24)|
 800257a:	431a      	orrs	r2, r3
                   ((uint32_t)macconf->SlowProtocolDetect << 17)|
 800257c:	683b      	ldr	r3, [r7, #0]
 800257e:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 8002582:	045b      	lsls	r3, r3, #17
                 ((uint32_t)macconf->UnicastSlowProtocolPacketDetect << 18)|
 8002584:	4313      	orrs	r3, r2
                     ((uint32_t)((macconf->CRCCheckingRxPackets == DISABLE) ? 1U : 0U)<< 16) |
 8002586:	683a      	ldr	r2, [r7, #0]
 8002588:	f892 2032 	ldrb.w	r2, [r2, #50]	; 0x32
 800258c:	2a00      	cmp	r2, #0
 800258e:	d102      	bne.n	8002596 <ETH_SetMACConfig+0x112>
 8002590:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8002594:	e000      	b.n	8002598 <ETH_SetMACConfig+0x114>
 8002596:	2200      	movs	r2, #0
                   ((uint32_t)macconf->SlowProtocolDetect << 17)|
 8002598:	431a      	orrs	r2, r3
                       macconf->GiantPacketSizeLimit);
 800259a:	683b      	ldr	r3, [r7, #0]
 800259c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
  macregval = ((macconf->ExtendedInterPacketGapVal << 25)|
 800259e:	4313      	orrs	r3, r2
 80025a0:	60fb      	str	r3, [r7, #12]

  /* Write to MACECR */
  MODIFY_REG(heth->Instance->MACECR, ETH_MACECR_MASK, macregval);
 80025a2:	687b      	ldr	r3, [r7, #4]
 80025a4:	681b      	ldr	r3, [r3, #0]
 80025a6:	685a      	ldr	r2, [r3, #4]
 80025a8:	4b42      	ldr	r3, [pc, #264]	; (80026b4 <ETH_SetMACConfig+0x230>)
 80025aa:	4013      	ands	r3, r2
 80025ac:	687a      	ldr	r2, [r7, #4]
 80025ae:	6812      	ldr	r2, [r2, #0]
 80025b0:	68f9      	ldr	r1, [r7, #12]
 80025b2:	430b      	orrs	r3, r1
 80025b4:	6053      	str	r3, [r2, #4]

  /*------------------------ MACWTR Configuration --------------------*/
  macregval = (((uint32_t)macconf->ProgrammableWatchdog << 8) |
 80025b6:	683b      	ldr	r3, [r7, #0]
 80025b8:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80025bc:	021a      	lsls	r2, r3, #8
               macconf->WatchdogTimeout);
 80025be:	683b      	ldr	r3, [r7, #0]
 80025c0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
  macregval = (((uint32_t)macconf->ProgrammableWatchdog << 8) |
 80025c2:	4313      	orrs	r3, r2
 80025c4:	60fb      	str	r3, [r7, #12]

  /* Write to MACWTR */
  MODIFY_REG(heth->Instance->MACWTR, ETH_MACWTR_MASK, macregval);
 80025c6:	687b      	ldr	r3, [r7, #4]
 80025c8:	681b      	ldr	r3, [r3, #0]
 80025ca:	68da      	ldr	r2, [r3, #12]
 80025cc:	4b3a      	ldr	r3, [pc, #232]	; (80026b8 <ETH_SetMACConfig+0x234>)
 80025ce:	4013      	ands	r3, r2
 80025d0:	687a      	ldr	r2, [r7, #4]
 80025d2:	6812      	ldr	r2, [r2, #0]
 80025d4:	68f9      	ldr	r1, [r7, #12]
 80025d6:	430b      	orrs	r3, r1
 80025d8:	60d3      	str	r3, [r2, #12]

  /*------------------------ MACTFCR Configuration --------------------*/
  macregval = (((uint32_t)macconf->TransmitFlowControl << 1) |
 80025da:	683b      	ldr	r3, [r7, #0]
 80025dc:	f893 3054 	ldrb.w	r3, [r3, #84]	; 0x54
 80025e0:	005a      	lsls	r2, r3, #1
               macconf->PauseLowThreshold |
 80025e2:	683b      	ldr	r3, [r7, #0]
 80025e4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
  macregval = (((uint32_t)macconf->TransmitFlowControl << 1) |
 80025e6:	4313      	orrs	r3, r2
                 ((uint32_t)((macconf->ZeroQuantaPause == DISABLE) ? 1U : 0U)<< 7) |
 80025e8:	683a      	ldr	r2, [r7, #0]
 80025ea:	f892 204c 	ldrb.w	r2, [r2, #76]	; 0x4c
 80025ee:	2a00      	cmp	r2, #0
 80025f0:	d101      	bne.n	80025f6 <ETH_SetMACConfig+0x172>
 80025f2:	2280      	movs	r2, #128	; 0x80
 80025f4:	e000      	b.n	80025f8 <ETH_SetMACConfig+0x174>
 80025f6:	2200      	movs	r2, #0
               macconf->PauseLowThreshold |
 80025f8:	431a      	orrs	r2, r3
                   (macconf->PauseTime << 16));
 80025fa:	683b      	ldr	r3, [r7, #0]
 80025fc:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80025fe:	041b      	lsls	r3, r3, #16
  macregval = (((uint32_t)macconf->TransmitFlowControl << 1) |
 8002600:	4313      	orrs	r3, r2
 8002602:	60fb      	str	r3, [r7, #12]

  /* Write to MACTFCR */
  MODIFY_REG(heth->Instance->MACTFCR, ETH_MACTFCR_MASK, macregval);
 8002604:	687b      	ldr	r3, [r7, #4]
 8002606:	681b      	ldr	r3, [r3, #0]
 8002608:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 800260a:	f64f 730d 	movw	r3, #65293	; 0xff0d
 800260e:	4013      	ands	r3, r2
 8002610:	687a      	ldr	r2, [r7, #4]
 8002612:	6812      	ldr	r2, [r2, #0]
 8002614:	68f9      	ldr	r1, [r7, #12]
 8002616:	430b      	orrs	r3, r1
 8002618:	6713      	str	r3, [r2, #112]	; 0x70

  /*------------------------ MACRFCR Configuration --------------------*/
  macregval = ((uint32_t)macconf->ReceiveFlowControl |
 800261a:	683b      	ldr	r3, [r7, #0]
 800261c:	f893 3056 	ldrb.w	r3, [r3, #86]	; 0x56
 8002620:	461a      	mov	r2, r3
               ((uint32_t)macconf->UnicastPausePacketDetect << 1));
 8002622:	683b      	ldr	r3, [r7, #0]
 8002624:	f893 3055 	ldrb.w	r3, [r3, #85]	; 0x55
 8002628:	005b      	lsls	r3, r3, #1
  macregval = ((uint32_t)macconf->ReceiveFlowControl |
 800262a:	4313      	orrs	r3, r2
 800262c:	60fb      	str	r3, [r7, #12]

  /* Write to MACRFCR */
  MODIFY_REG(heth->Instance->MACRFCR, ETH_MACRFCR_MASK, macregval);
 800262e:	687b      	ldr	r3, [r7, #4]
 8002630:	681b      	ldr	r3, [r3, #0]
 8002632:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002636:	f023 0103 	bic.w	r1, r3, #3
 800263a:	687b      	ldr	r3, [r7, #4]
 800263c:	681b      	ldr	r3, [r3, #0]
 800263e:	68fa      	ldr	r2, [r7, #12]
 8002640:	430a      	orrs	r2, r1
 8002642:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

  /*------------------------ MTLTQOMR Configuration --------------------*/
  /* Write to MTLTQOMR */
  MODIFY_REG(heth->Instance->MTLTQOMR, ETH_MTLTQOMR_MASK, macconf->TransmitQueueMode);
 8002646:	687b      	ldr	r3, [r7, #4]
 8002648:	681b      	ldr	r3, [r3, #0]
 800264a:	f8d3 3d00 	ldr.w	r3, [r3, #3328]	; 0xd00
 800264e:	f023 0172 	bic.w	r1, r3, #114	; 0x72
 8002652:	683b      	ldr	r3, [r7, #0]
 8002654:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8002656:	687b      	ldr	r3, [r7, #4]
 8002658:	681b      	ldr	r3, [r3, #0]
 800265a:	430a      	orrs	r2, r1
 800265c:	f8c3 2d00 	str.w	r2, [r3, #3328]	; 0xd00

  /*------------------------ MTLRQOMR Configuration --------------------*/
  macregval = (macconf->ReceiveQueueMode |
 8002660:	683b      	ldr	r3, [r7, #0]
 8002662:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
               ((uint32_t)((macconf->DropTCPIPChecksumErrorPacket == DISABLE) ? 1U : 0U) << 6) |
 8002664:	683a      	ldr	r2, [r7, #0]
 8002666:	f892 2060 	ldrb.w	r2, [r2, #96]	; 0x60
 800266a:	2a00      	cmp	r2, #0
 800266c:	d101      	bne.n	8002672 <ETH_SetMACConfig+0x1ee>
 800266e:	2240      	movs	r2, #64	; 0x40
 8002670:	e000      	b.n	8002674 <ETH_SetMACConfig+0x1f0>
 8002672:	2200      	movs	r2, #0
  macregval = (macconf->ReceiveQueueMode |
 8002674:	431a      	orrs	r2, r3
                 ((uint32_t)macconf->ForwardRxErrorPacket << 4) |
 8002676:	683b      	ldr	r3, [r7, #0]
 8002678:	f893 3061 	ldrb.w	r3, [r3, #97]	; 0x61
 800267c:	011b      	lsls	r3, r3, #4
               ((uint32_t)((macconf->DropTCPIPChecksumErrorPacket == DISABLE) ? 1U : 0U) << 6) |
 800267e:	431a      	orrs	r2, r3
                   ((uint32_t)macconf->ForwardRxUndersizedGoodPacket << 3));
 8002680:	683b      	ldr	r3, [r7, #0]
 8002682:	f893 3062 	ldrb.w	r3, [r3, #98]	; 0x62
 8002686:	00db      	lsls	r3, r3, #3
  macregval = (macconf->ReceiveQueueMode |
 8002688:	4313      	orrs	r3, r2
 800268a:	60fb      	str	r3, [r7, #12]

  /* Write to MTLRQOMR */
  MODIFY_REG(heth->Instance->MTLRQOMR, ETH_MTLRQOMR_MASK, macregval);
 800268c:	687b      	ldr	r3, [r7, #4]
 800268e:	681b      	ldr	r3, [r3, #0]
 8002690:	f8d3 3d30 	ldr.w	r3, [r3, #3376]	; 0xd30
 8002694:	f023 017b 	bic.w	r1, r3, #123	; 0x7b
 8002698:	687b      	ldr	r3, [r7, #4]
 800269a:	681b      	ldr	r3, [r3, #0]
 800269c:	68fa      	ldr	r2, [r7, #12]
 800269e:	430a      	orrs	r2, r1
 80026a0:	f8c3 2d30 	str.w	r2, [r3, #3376]	; 0xd30
}
 80026a4:	bf00      	nop
 80026a6:	3714      	adds	r7, #20
 80026a8:	46bd      	mov	sp, r7
 80026aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026ae:	4770      	bx	lr
 80026b0:	00048083 	.word	0x00048083
 80026b4:	c0f88000 	.word	0xc0f88000
 80026b8:	fffffef0 	.word	0xfffffef0

080026bc <ETH_SetDMAConfig>:

static void ETH_SetDMAConfig(ETH_HandleTypeDef *heth,  ETH_DMAConfigTypeDef *dmaconf)
{
 80026bc:	b480      	push	{r7}
 80026be:	b085      	sub	sp, #20
 80026c0:	af00      	add	r7, sp, #0
 80026c2:	6078      	str	r0, [r7, #4]
 80026c4:	6039      	str	r1, [r7, #0]
  uint32_t dmaregval;

  /*------------------------ DMAMR Configuration --------------------*/
  MODIFY_REG(heth->Instance->DMAMR, ETH_DMAMR_MASK, dmaconf->DMAArbitration);
 80026c6:	687b      	ldr	r3, [r7, #4]
 80026c8:	681b      	ldr	r3, [r3, #0]
 80026ca:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80026ce:	681a      	ldr	r2, [r3, #0]
 80026d0:	4b38      	ldr	r3, [pc, #224]	; (80027b4 <ETH_SetDMAConfig+0xf8>)
 80026d2:	4013      	ands	r3, r2
 80026d4:	683a      	ldr	r2, [r7, #0]
 80026d6:	6812      	ldr	r2, [r2, #0]
 80026d8:	6879      	ldr	r1, [r7, #4]
 80026da:	6809      	ldr	r1, [r1, #0]
 80026dc:	431a      	orrs	r2, r3
 80026de:	f501 5380 	add.w	r3, r1, #4096	; 0x1000
 80026e2:	601a      	str	r2, [r3, #0]

  /*------------------------ DMASBMR Configuration --------------------*/
  dmaregval = (((uint32_t)dmaconf->AddressAlignedBeats << 12) |
 80026e4:	683b      	ldr	r3, [r7, #0]
 80026e6:	791b      	ldrb	r3, [r3, #4]
 80026e8:	031a      	lsls	r2, r3, #12
               dmaconf->BurstMode |
 80026ea:	683b      	ldr	r3, [r7, #0]
 80026ec:	689b      	ldr	r3, [r3, #8]
  dmaregval = (((uint32_t)dmaconf->AddressAlignedBeats << 12) |
 80026ee:	431a      	orrs	r2, r3
                 ((uint32_t)dmaconf->RebuildINCRxBurst << 15));
 80026f0:	683b      	ldr	r3, [r7, #0]
 80026f2:	7b1b      	ldrb	r3, [r3, #12]
 80026f4:	03db      	lsls	r3, r3, #15
  dmaregval = (((uint32_t)dmaconf->AddressAlignedBeats << 12) |
 80026f6:	4313      	orrs	r3, r2
 80026f8:	60fb      	str	r3, [r7, #12]

  MODIFY_REG(heth->Instance->DMASBMR, ETH_DMASBMR_MASK, dmaregval);
 80026fa:	687b      	ldr	r3, [r7, #4]
 80026fc:	681a      	ldr	r2, [r3, #0]
 80026fe:	f241 0304 	movw	r3, #4100	; 0x1004
 8002702:	4413      	add	r3, r2
 8002704:	681a      	ldr	r2, [r3, #0]
 8002706:	4b2c      	ldr	r3, [pc, #176]	; (80027b8 <ETH_SetDMAConfig+0xfc>)
 8002708:	4013      	ands	r3, r2
 800270a:	687a      	ldr	r2, [r7, #4]
 800270c:	6811      	ldr	r1, [r2, #0]
 800270e:	68fa      	ldr	r2, [r7, #12]
 8002710:	431a      	orrs	r2, r3
 8002712:	f241 0304 	movw	r3, #4100	; 0x1004
 8002716:	440b      	add	r3, r1
 8002718:	601a      	str	r2, [r3, #0]

  /*------------------------ DMACCR Configuration --------------------*/
  dmaregval = (((uint32_t)dmaconf->PBLx8Mode << 16) |
 800271a:	683b      	ldr	r3, [r7, #0]
 800271c:	7b5b      	ldrb	r3, [r3, #13]
 800271e:	041a      	lsls	r2, r3, #16
               dmaconf->MaximumSegmentSize);
 8002720:	683b      	ldr	r3, [r7, #0]
 8002722:	6a1b      	ldr	r3, [r3, #32]
  dmaregval = (((uint32_t)dmaconf->PBLx8Mode << 16) |
 8002724:	4313      	orrs	r3, r2
 8002726:	60fb      	str	r3, [r7, #12]

  MODIFY_REG(heth->Instance->DMACCR, ETH_DMACCR_MASK, dmaregval);
 8002728:	687b      	ldr	r3, [r7, #4]
 800272a:	681b      	ldr	r3, [r3, #0]
 800272c:	f503 5388 	add.w	r3, r3, #4352	; 0x1100
 8002730:	681a      	ldr	r2, [r3, #0]
 8002732:	4b22      	ldr	r3, [pc, #136]	; (80027bc <ETH_SetDMAConfig+0x100>)
 8002734:	4013      	ands	r3, r2
 8002736:	687a      	ldr	r2, [r7, #4]
 8002738:	6811      	ldr	r1, [r2, #0]
 800273a:	68fa      	ldr	r2, [r7, #12]
 800273c:	431a      	orrs	r2, r3
 800273e:	f501 5388 	add.w	r3, r1, #4352	; 0x1100
 8002742:	601a      	str	r2, [r3, #0]

  /*------------------------ DMACTCR Configuration --------------------*/
  dmaregval = (dmaconf->TxDMABurstLength |
 8002744:	683b      	ldr	r3, [r7, #0]
 8002746:	691a      	ldr	r2, [r3, #16]
               ((uint32_t)dmaconf->SecondPacketOperate << 4)|
 8002748:	683b      	ldr	r3, [r7, #0]
 800274a:	7d1b      	ldrb	r3, [r3, #20]
 800274c:	011b      	lsls	r3, r3, #4
  dmaregval = (dmaconf->TxDMABurstLength |
 800274e:	431a      	orrs	r2, r3
                 ((uint32_t)dmaconf->TCPSegmentation << 12));
 8002750:	683b      	ldr	r3, [r7, #0]
 8002752:	7f5b      	ldrb	r3, [r3, #29]
 8002754:	031b      	lsls	r3, r3, #12
  dmaregval = (dmaconf->TxDMABurstLength |
 8002756:	4313      	orrs	r3, r2
 8002758:	60fb      	str	r3, [r7, #12]

  MODIFY_REG(heth->Instance->DMACTCR, ETH_DMACTCR_MASK, dmaregval);
 800275a:	687b      	ldr	r3, [r7, #4]
 800275c:	681a      	ldr	r2, [r3, #0]
 800275e:	f241 1304 	movw	r3, #4356	; 0x1104
 8002762:	4413      	add	r3, r2
 8002764:	681a      	ldr	r2, [r3, #0]
 8002766:	4b16      	ldr	r3, [pc, #88]	; (80027c0 <ETH_SetDMAConfig+0x104>)
 8002768:	4013      	ands	r3, r2
 800276a:	687a      	ldr	r2, [r7, #4]
 800276c:	6811      	ldr	r1, [r2, #0]
 800276e:	68fa      	ldr	r2, [r7, #12]
 8002770:	431a      	orrs	r2, r3
 8002772:	f241 1304 	movw	r3, #4356	; 0x1104
 8002776:	440b      	add	r3, r1
 8002778:	601a      	str	r2, [r3, #0]

  /*------------------------ DMACRCR Configuration --------------------*/
  dmaregval = (((uint32_t)dmaconf->FlushRxPacket  << 31) |
 800277a:	683b      	ldr	r3, [r7, #0]
 800277c:	7f1b      	ldrb	r3, [r3, #28]
 800277e:	07da      	lsls	r2, r3, #31
               dmaconf->RxDMABurstLength);
 8002780:	683b      	ldr	r3, [r7, #0]
 8002782:	699b      	ldr	r3, [r3, #24]
  dmaregval = (((uint32_t)dmaconf->FlushRxPacket  << 31) |
 8002784:	4313      	orrs	r3, r2
 8002786:	60fb      	str	r3, [r7, #12]

  /* Write to DMACRCR */
  MODIFY_REG(heth->Instance->DMACRCR, ETH_DMACRCR_MASK, dmaregval);
 8002788:	687b      	ldr	r3, [r7, #4]
 800278a:	681a      	ldr	r2, [r3, #0]
 800278c:	f241 1308 	movw	r3, #4360	; 0x1108
 8002790:	4413      	add	r3, r2
 8002792:	681a      	ldr	r2, [r3, #0]
 8002794:	4b0b      	ldr	r3, [pc, #44]	; (80027c4 <ETH_SetDMAConfig+0x108>)
 8002796:	4013      	ands	r3, r2
 8002798:	687a      	ldr	r2, [r7, #4]
 800279a:	6811      	ldr	r1, [r2, #0]
 800279c:	68fa      	ldr	r2, [r7, #12]
 800279e:	431a      	orrs	r2, r3
 80027a0:	f241 1308 	movw	r3, #4360	; 0x1108
 80027a4:	440b      	add	r3, r1
 80027a6:	601a      	str	r2, [r3, #0]
}
 80027a8:	bf00      	nop
 80027aa:	3714      	adds	r7, #20
 80027ac:	46bd      	mov	sp, r7
 80027ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027b2:	4770      	bx	lr
 80027b4:	ffff87fd 	.word	0xffff87fd
 80027b8:	ffff2ffe 	.word	0xffff2ffe
 80027bc:	fffec000 	.word	0xfffec000
 80027c0:	ffc0efef 	.word	0xffc0efef
 80027c4:	7fc0ffff 	.word	0x7fc0ffff

080027c8 <ETH_MACDMAConfig>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
static void ETH_MACDMAConfig(ETH_HandleTypeDef *heth)
{
 80027c8:	b580      	push	{r7, lr}
 80027ca:	b0a4      	sub	sp, #144	; 0x90
 80027cc:	af00      	add	r7, sp, #0
 80027ce:	6078      	str	r0, [r7, #4]
  ETH_MACConfigTypeDef macDefaultConf;
  ETH_DMAConfigTypeDef dmaDefaultConf;

  /*--------------- ETHERNET MAC registers default Configuration --------------*/
  macDefaultConf.AutomaticPadCRCStrip = ENABLE;
 80027d0:	2301      	movs	r3, #1
 80027d2:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
  macDefaultConf.BackOffLimit = ETH_BACKOFFLIMIT_10;
 80027d6:	2300      	movs	r3, #0
 80027d8:	653b      	str	r3, [r7, #80]	; 0x50
  macDefaultConf.CarrierSenseBeforeTransmit = DISABLE;
 80027da:	2300      	movs	r3, #0
 80027dc:	f887 3049 	strb.w	r3, [r7, #73]	; 0x49
  macDefaultConf.CarrierSenseDuringTransmit = DISABLE;
 80027e0:	2300      	movs	r3, #0
 80027e2:	f887 304b 	strb.w	r3, [r7, #75]	; 0x4b
  macDefaultConf.ChecksumOffload = ENABLE;
 80027e6:	2301      	movs	r3, #1
 80027e8:	f887 3030 	strb.w	r3, [r7, #48]	; 0x30
  macDefaultConf.CRCCheckingRxPackets = ENABLE;
 80027ec:	2301      	movs	r3, #1
 80027ee:	f887 305e 	strb.w	r3, [r7, #94]	; 0x5e
  macDefaultConf.CRCStripTypePacket = ENABLE;
 80027f2:	2301      	movs	r3, #1
 80027f4:	f887 303a 	strb.w	r3, [r7, #58]	; 0x3a
  macDefaultConf.DeferralCheck = DISABLE;
 80027f8:	2300      	movs	r3, #0
 80027fa:	f887 3054 	strb.w	r3, [r7, #84]	; 0x54
  macDefaultConf.DropTCPIPChecksumErrorPacket = ENABLE;
 80027fe:	2301      	movs	r3, #1
 8002800:	f887 308c 	strb.w	r3, [r7, #140]	; 0x8c
  macDefaultConf.DuplexMode = ETH_FULLDUPLEX_MODE;
 8002804:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8002808:	647b      	str	r3, [r7, #68]	; 0x44
  macDefaultConf.ExtendedInterPacketGap = DISABLE;
 800280a:	2300      	movs	r3, #0
 800280c:	f887 3064 	strb.w	r3, [r7, #100]	; 0x64
  macDefaultConf.ExtendedInterPacketGapVal = 0x0;
 8002810:	2300      	movs	r3, #0
 8002812:	66bb      	str	r3, [r7, #104]	; 0x68
  macDefaultConf.ForwardRxErrorPacket = DISABLE;
 8002814:	2300      	movs	r3, #0
 8002816:	f887 308d 	strb.w	r3, [r7, #141]	; 0x8d
  macDefaultConf.ForwardRxUndersizedGoodPacket = DISABLE;
 800281a:	2300      	movs	r3, #0
 800281c:	f887 308e 	strb.w	r3, [r7, #142]	; 0x8e
  macDefaultConf.GiantPacketSizeLimit = 0x618;
 8002820:	f44f 63c3 	mov.w	r3, #1560	; 0x618
 8002824:	663b      	str	r3, [r7, #96]	; 0x60
  macDefaultConf.GiantPacketSizeLimitControl = DISABLE;
 8002826:	2300      	movs	r3, #0
 8002828:	f887 3038 	strb.w	r3, [r7, #56]	; 0x38
  macDefaultConf.InterPacketGapVal = ETH_INTERPACKETGAP_96BIT;
 800282c:	2300      	movs	r3, #0
 800282e:	637b      	str	r3, [r7, #52]	; 0x34
  macDefaultConf.Jabber = ENABLE;
 8002830:	2301      	movs	r3, #1
 8002832:	f887 303d 	strb.w	r3, [r7, #61]	; 0x3d
  macDefaultConf.JumboPacket = DISABLE;
 8002836:	2300      	movs	r3, #0
 8002838:	f887 303e 	strb.w	r3, [r7, #62]	; 0x3e
  macDefaultConf.LoopbackMode = DISABLE;
 800283c:	2300      	movs	r3, #0
 800283e:	f887 3048 	strb.w	r3, [r7, #72]	; 0x48
  macDefaultConf.PauseLowThreshold = ETH_PAUSELOWTHRESHOLD_MINUS_4;
 8002842:	2300      	movs	r3, #0
 8002844:	67fb      	str	r3, [r7, #124]	; 0x7c
  macDefaultConf.PauseTime = 0x0;
 8002846:	2300      	movs	r3, #0
 8002848:	677b      	str	r3, [r7, #116]	; 0x74
  macDefaultConf.PreambleLength = ETH_PREAMBLELENGTH_7;
 800284a:	2300      	movs	r3, #0
 800284c:	65bb      	str	r3, [r7, #88]	; 0x58
  macDefaultConf.ProgrammableWatchdog = DISABLE;
 800284e:	2300      	movs	r3, #0
 8002850:	f887 306c 	strb.w	r3, [r7, #108]	; 0x6c
  macDefaultConf.ReceiveFlowControl = DISABLE;
 8002854:	2300      	movs	r3, #0
 8002856:	f887 3082 	strb.w	r3, [r7, #130]	; 0x82
  macDefaultConf.ReceiveOwn = ENABLE;
 800285a:	2301      	movs	r3, #1
 800285c:	f887 304a 	strb.w	r3, [r7, #74]	; 0x4a
  macDefaultConf.ReceiveQueueMode = ETH_RECEIVESTOREFORWARD;
 8002860:	2320      	movs	r3, #32
 8002862:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  macDefaultConf.RetryTransmission = ENABLE;
 8002866:	2301      	movs	r3, #1
 8002868:	f887 304c 	strb.w	r3, [r7, #76]	; 0x4c
  macDefaultConf.SlowProtocolDetect = DISABLE;
 800286c:	2300      	movs	r3, #0
 800286e:	f887 305d 	strb.w	r3, [r7, #93]	; 0x5d
  macDefaultConf.SourceAddrControl = ETH_SOURCEADDRESS_REPLACE_ADDR0;
 8002872:	f04f 5340 	mov.w	r3, #805306368	; 0x30000000
 8002876:	62fb      	str	r3, [r7, #44]	; 0x2c
  macDefaultConf.Speed = ETH_SPEED_100M;
 8002878:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 800287c:	643b      	str	r3, [r7, #64]	; 0x40
  macDefaultConf.Support2KPacket = DISABLE;
 800287e:	2300      	movs	r3, #0
 8002880:	f887 3039 	strb.w	r3, [r7, #57]	; 0x39
  macDefaultConf.TransmitQueueMode = ETH_TRANSMITSTOREFORWARD;
 8002884:	2302      	movs	r3, #2
 8002886:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  macDefaultConf.TransmitFlowControl = DISABLE;
 800288a:	2300      	movs	r3, #0
 800288c:	f887 3080 	strb.w	r3, [r7, #128]	; 0x80
  macDefaultConf.UnicastPausePacketDetect = DISABLE;
 8002890:	2300      	movs	r3, #0
 8002892:	f887 3081 	strb.w	r3, [r7, #129]	; 0x81
  macDefaultConf.UnicastSlowProtocolPacketDetect = DISABLE;
 8002896:	2300      	movs	r3, #0
 8002898:	f887 305c 	strb.w	r3, [r7, #92]	; 0x5c
  macDefaultConf.Watchdog = ENABLE;
 800289c:	2301      	movs	r3, #1
 800289e:	f887 303c 	strb.w	r3, [r7, #60]	; 0x3c
  macDefaultConf.WatchdogTimeout =  ETH_MACWTR_WTO_2KB;
 80028a2:	2300      	movs	r3, #0
 80028a4:	673b      	str	r3, [r7, #112]	; 0x70
  macDefaultConf.ZeroQuantaPause = ENABLE;
 80028a6:	2301      	movs	r3, #1
 80028a8:	f887 3078 	strb.w	r3, [r7, #120]	; 0x78

  /* MAC default configuration */
  ETH_SetMACConfig(heth, &macDefaultConf);
 80028ac:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80028b0:	4619      	mov	r1, r3
 80028b2:	6878      	ldr	r0, [r7, #4]
 80028b4:	f7ff fde6 	bl	8002484 <ETH_SetMACConfig>

  /*--------------- ETHERNET DMA registers default Configuration --------------*/
  dmaDefaultConf.AddressAlignedBeats = ENABLE;
 80028b8:	2301      	movs	r3, #1
 80028ba:	733b      	strb	r3, [r7, #12]
  dmaDefaultConf.BurstMode = ETH_BURSTLENGTH_FIXED;
 80028bc:	2301      	movs	r3, #1
 80028be:	613b      	str	r3, [r7, #16]
  dmaDefaultConf.DMAArbitration = ETH_DMAARBITRATION_RX1_TX1;
 80028c0:	2300      	movs	r3, #0
 80028c2:	60bb      	str	r3, [r7, #8]
  dmaDefaultConf.FlushRxPacket = DISABLE;
 80028c4:	2300      	movs	r3, #0
 80028c6:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
  dmaDefaultConf.PBLx8Mode = DISABLE;
 80028ca:	2300      	movs	r3, #0
 80028cc:	757b      	strb	r3, [r7, #21]
  dmaDefaultConf.RebuildINCRxBurst = DISABLE;
 80028ce:	2300      	movs	r3, #0
 80028d0:	753b      	strb	r3, [r7, #20]
  dmaDefaultConf.RxDMABurstLength = ETH_RXDMABURSTLENGTH_32BEAT;
 80028d2:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 80028d6:	623b      	str	r3, [r7, #32]
  dmaDefaultConf.SecondPacketOperate = DISABLE;
 80028d8:	2300      	movs	r3, #0
 80028da:	773b      	strb	r3, [r7, #28]
  dmaDefaultConf.TxDMABurstLength = ETH_TXDMABURSTLENGTH_32BEAT;
 80028dc:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 80028e0:	61bb      	str	r3, [r7, #24]
  dmaDefaultConf.TCPSegmentation = DISABLE;
 80028e2:	2300      	movs	r3, #0
 80028e4:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
  dmaDefaultConf.MaximumSegmentSize = 536;
 80028e8:	f44f 7306 	mov.w	r3, #536	; 0x218
 80028ec:	62bb      	str	r3, [r7, #40]	; 0x28

  /* DMA default configuration */
  ETH_SetDMAConfig(heth, &dmaDefaultConf);
 80028ee:	f107 0308 	add.w	r3, r7, #8
 80028f2:	4619      	mov	r1, r3
 80028f4:	6878      	ldr	r0, [r7, #4]
 80028f6:	f7ff fee1 	bl	80026bc <ETH_SetDMAConfig>
}
 80028fa:	bf00      	nop
 80028fc:	3790      	adds	r7, #144	; 0x90
 80028fe:	46bd      	mov	sp, r7
 8002900:	bd80      	pop	{r7, pc}
	...

08002904 <ETH_MAC_MDIO_ClkConfig>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_MAC_MDIO_ClkConfig(ETH_HandleTypeDef *heth)
{
 8002904:	b580      	push	{r7, lr}
 8002906:	b084      	sub	sp, #16
 8002908:	af00      	add	r7, sp, #0
 800290a:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg, hclk;

  /* Get the ETHERNET MACMDIOAR value */
  tmpreg = (heth->Instance)->MACMDIOAR;
 800290c:	687b      	ldr	r3, [r7, #4]
 800290e:	681b      	ldr	r3, [r3, #0]
 8002910:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8002914:	60fb      	str	r3, [r7, #12]

  /* Clear CSR Clock Range bits */
  tmpreg &= ~ETH_MACMDIOAR_CR;
 8002916:	68fb      	ldr	r3, [r7, #12]
 8002918:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 800291c:	60fb      	str	r3, [r7, #12]

  /* Get hclk frequency value */
  hclk = HAL_RCC_GetHCLKFreq();
 800291e:	f001 f9a7 	bl	8003c70 <HAL_RCC_GetHCLKFreq>
 8002922:	60b8      	str	r0, [r7, #8]

  /* Set CR bits depending on hclk value */
  if((hclk >= 20000000U)&&(hclk < 35000000U))
 8002924:	68bb      	ldr	r3, [r7, #8]
 8002926:	4a1e      	ldr	r2, [pc, #120]	; (80029a0 <ETH_MAC_MDIO_ClkConfig+0x9c>)
 8002928:	4293      	cmp	r3, r2
 800292a:	d908      	bls.n	800293e <ETH_MAC_MDIO_ClkConfig+0x3a>
 800292c:	68bb      	ldr	r3, [r7, #8]
 800292e:	4a1d      	ldr	r2, [pc, #116]	; (80029a4 <ETH_MAC_MDIO_ClkConfig+0xa0>)
 8002930:	4293      	cmp	r3, r2
 8002932:	d804      	bhi.n	800293e <ETH_MAC_MDIO_ClkConfig+0x3a>
  {
    /* CSR Clock Range between 20-35 MHz */
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV16;
 8002934:	68fb      	ldr	r3, [r7, #12]
 8002936:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800293a:	60fb      	str	r3, [r7, #12]
 800293c:	e027      	b.n	800298e <ETH_MAC_MDIO_ClkConfig+0x8a>
  }
  else if((hclk >= 35000000U)&&(hclk < 60000000U))
 800293e:	68bb      	ldr	r3, [r7, #8]
 8002940:	4a18      	ldr	r2, [pc, #96]	; (80029a4 <ETH_MAC_MDIO_ClkConfig+0xa0>)
 8002942:	4293      	cmp	r3, r2
 8002944:	d908      	bls.n	8002958 <ETH_MAC_MDIO_ClkConfig+0x54>
 8002946:	68bb      	ldr	r3, [r7, #8]
 8002948:	4a17      	ldr	r2, [pc, #92]	; (80029a8 <ETH_MAC_MDIO_ClkConfig+0xa4>)
 800294a:	4293      	cmp	r3, r2
 800294c:	d204      	bcs.n	8002958 <ETH_MAC_MDIO_ClkConfig+0x54>
  {
    /* CSR Clock Range between 35-60 MHz */
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV26;
 800294e:	68fb      	ldr	r3, [r7, #12]
 8002950:	f443 7340 	orr.w	r3, r3, #768	; 0x300
 8002954:	60fb      	str	r3, [r7, #12]
 8002956:	e01a      	b.n	800298e <ETH_MAC_MDIO_ClkConfig+0x8a>
  }
  else if((hclk >= 60000000U)&&(hclk < 100000000U))
 8002958:	68bb      	ldr	r3, [r7, #8]
 800295a:	4a13      	ldr	r2, [pc, #76]	; (80029a8 <ETH_MAC_MDIO_ClkConfig+0xa4>)
 800295c:	4293      	cmp	r3, r2
 800295e:	d303      	bcc.n	8002968 <ETH_MAC_MDIO_ClkConfig+0x64>
 8002960:	68bb      	ldr	r3, [r7, #8]
 8002962:	4a12      	ldr	r2, [pc, #72]	; (80029ac <ETH_MAC_MDIO_ClkConfig+0xa8>)
 8002964:	4293      	cmp	r3, r2
 8002966:	d911      	bls.n	800298c <ETH_MAC_MDIO_ClkConfig+0x88>
  {
    /* CSR Clock Range between 60-100 MHz */
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV42;
  }
  else if((hclk >= 100000000U)&&(hclk < 150000000U))
 8002968:	68bb      	ldr	r3, [r7, #8]
 800296a:	4a10      	ldr	r2, [pc, #64]	; (80029ac <ETH_MAC_MDIO_ClkConfig+0xa8>)
 800296c:	4293      	cmp	r3, r2
 800296e:	d908      	bls.n	8002982 <ETH_MAC_MDIO_ClkConfig+0x7e>
 8002970:	68bb      	ldr	r3, [r7, #8]
 8002972:	4a0f      	ldr	r2, [pc, #60]	; (80029b0 <ETH_MAC_MDIO_ClkConfig+0xac>)
 8002974:	4293      	cmp	r3, r2
 8002976:	d804      	bhi.n	8002982 <ETH_MAC_MDIO_ClkConfig+0x7e>
  {
    /* CSR Clock Range between 100-150 MHz */
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV62;
 8002978:	68fb      	ldr	r3, [r7, #12]
 800297a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800297e:	60fb      	str	r3, [r7, #12]
 8002980:	e005      	b.n	800298e <ETH_MAC_MDIO_ClkConfig+0x8a>
  }
  else /* (hclk >= 150000000)&&(hclk <= 200000000) */
  {
    /* CSR Clock Range between 150-200 MHz */
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV102;
 8002982:	68fb      	ldr	r3, [r7, #12]
 8002984:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8002988:	60fb      	str	r3, [r7, #12]
 800298a:	e000      	b.n	800298e <ETH_MAC_MDIO_ClkConfig+0x8a>
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV42;
 800298c:	bf00      	nop
  }

  /* Configure the CSR Clock Range */
  (heth->Instance)->MACMDIOAR = (uint32_t)tmpreg;
 800298e:	687b      	ldr	r3, [r7, #4]
 8002990:	681b      	ldr	r3, [r3, #0]
 8002992:	68fa      	ldr	r2, [r7, #12]
 8002994:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
}
 8002998:	bf00      	nop
 800299a:	3710      	adds	r7, #16
 800299c:	46bd      	mov	sp, r7
 800299e:	bd80      	pop	{r7, pc}
 80029a0:	01312cff 	.word	0x01312cff
 80029a4:	02160ebf 	.word	0x02160ebf
 80029a8:	03938700 	.word	0x03938700
 80029ac:	05f5e0ff 	.word	0x05f5e0ff
 80029b0:	08f0d17f 	.word	0x08f0d17f

080029b4 <ETH_DMATxDescListInit>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_DMATxDescListInit(ETH_HandleTypeDef *heth)
{
 80029b4:	b480      	push	{r7}
 80029b6:	b085      	sub	sp, #20
 80029b8:	af00      	add	r7, sp, #0
 80029ba:	6078      	str	r0, [r7, #4]
  ETH_DMADescTypeDef *dmatxdesc;
  uint32_t i;

  /* Fill each DMATxDesc descriptor with the right values */
  for(i=0; i < (uint32_t)ETH_TX_DESC_CNT; i++)
 80029bc:	2300      	movs	r3, #0
 80029be:	60fb      	str	r3, [r7, #12]
 80029c0:	e01d      	b.n	80029fe <ETH_DMATxDescListInit+0x4a>
  {
    dmatxdesc = heth->Init.TxDesc + i;
 80029c2:	687b      	ldr	r3, [r7, #4]
 80029c4:	68d9      	ldr	r1, [r3, #12]
 80029c6:	68fa      	ldr	r2, [r7, #12]
 80029c8:	4613      	mov	r3, r2
 80029ca:	005b      	lsls	r3, r3, #1
 80029cc:	4413      	add	r3, r2
 80029ce:	00db      	lsls	r3, r3, #3
 80029d0:	440b      	add	r3, r1
 80029d2:	60bb      	str	r3, [r7, #8]

    WRITE_REG(dmatxdesc->DESC0, 0x0);
 80029d4:	68bb      	ldr	r3, [r7, #8]
 80029d6:	2200      	movs	r2, #0
 80029d8:	601a      	str	r2, [r3, #0]
    WRITE_REG(dmatxdesc->DESC1, 0x0);
 80029da:	68bb      	ldr	r3, [r7, #8]
 80029dc:	2200      	movs	r2, #0
 80029de:	605a      	str	r2, [r3, #4]
    WRITE_REG(dmatxdesc->DESC2, 0x0);
 80029e0:	68bb      	ldr	r3, [r7, #8]
 80029e2:	2200      	movs	r2, #0
 80029e4:	609a      	str	r2, [r3, #8]
    WRITE_REG(dmatxdesc->DESC3, 0x0);
 80029e6:	68bb      	ldr	r3, [r7, #8]
 80029e8:	2200      	movs	r2, #0
 80029ea:	60da      	str	r2, [r3, #12]

    WRITE_REG(heth->TxDescList.TxDesc[i], (uint32_t)dmatxdesc);
 80029ec:	68b9      	ldr	r1, [r7, #8]
 80029ee:	687b      	ldr	r3, [r7, #4]
 80029f0:	68fa      	ldr	r2, [r7, #12]
 80029f2:	3206      	adds	r2, #6
 80029f4:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  for(i=0; i < (uint32_t)ETH_TX_DESC_CNT; i++)
 80029f8:	68fb      	ldr	r3, [r7, #12]
 80029fa:	3301      	adds	r3, #1
 80029fc:	60fb      	str	r3, [r7, #12]
 80029fe:	68fb      	ldr	r3, [r7, #12]
 8002a00:	2b03      	cmp	r3, #3
 8002a02:	d9de      	bls.n	80029c2 <ETH_DMATxDescListInit+0xe>
  }

  heth->TxDescList.CurTxDesc = 0;
 8002a04:	687b      	ldr	r3, [r7, #4]
 8002a06:	2200      	movs	r2, #0
 8002a08:	629a      	str	r2, [r3, #40]	; 0x28

  /* Set Transmit Descriptor Ring Length */
  WRITE_REG(heth->Instance->DMACTDRLR, (ETH_TX_DESC_CNT -1));
 8002a0a:	687b      	ldr	r3, [r7, #4]
 8002a0c:	681a      	ldr	r2, [r3, #0]
 8002a0e:	f241 132c 	movw	r3, #4396	; 0x112c
 8002a12:	4413      	add	r3, r2
 8002a14:	2203      	movs	r2, #3
 8002a16:	601a      	str	r2, [r3, #0]

  /* Set Transmit Descriptor List Address */
  WRITE_REG(heth->Instance->DMACTDLAR, (uint32_t) heth->Init.TxDesc);
 8002a18:	687b      	ldr	r3, [r7, #4]
 8002a1a:	68d9      	ldr	r1, [r3, #12]
 8002a1c:	687b      	ldr	r3, [r7, #4]
 8002a1e:	681a      	ldr	r2, [r3, #0]
 8002a20:	f241 1314 	movw	r3, #4372	; 0x1114
 8002a24:	4413      	add	r3, r2
 8002a26:	6019      	str	r1, [r3, #0]

  /* Set Transmit Descriptor Tail pointer */
  WRITE_REG(heth->Instance->DMACTDTPR, (uint32_t) heth->Init.TxDesc);
 8002a28:	687b      	ldr	r3, [r7, #4]
 8002a2a:	68da      	ldr	r2, [r3, #12]
 8002a2c:	687b      	ldr	r3, [r7, #4]
 8002a2e:	681b      	ldr	r3, [r3, #0]
 8002a30:	f503 5389 	add.w	r3, r3, #4384	; 0x1120
 8002a34:	601a      	str	r2, [r3, #0]
}
 8002a36:	bf00      	nop
 8002a38:	3714      	adds	r7, #20
 8002a3a:	46bd      	mov	sp, r7
 8002a3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a40:	4770      	bx	lr

08002a42 <ETH_DMARxDescListInit>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_DMARxDescListInit(ETH_HandleTypeDef *heth)
{
 8002a42:	b480      	push	{r7}
 8002a44:	b085      	sub	sp, #20
 8002a46:	af00      	add	r7, sp, #0
 8002a48:	6078      	str	r0, [r7, #4]
  ETH_DMADescTypeDef *dmarxdesc;
  uint32_t i;

  for(i = 0; i < (uint32_t)ETH_RX_DESC_CNT; i++)
 8002a4a:	2300      	movs	r3, #0
 8002a4c:	60fb      	str	r3, [r7, #12]
 8002a4e:	e024      	b.n	8002a9a <ETH_DMARxDescListInit+0x58>
  {
    dmarxdesc =  heth->Init.RxDesc + i;
 8002a50:	687b      	ldr	r3, [r7, #4]
 8002a52:	6919      	ldr	r1, [r3, #16]
 8002a54:	68fa      	ldr	r2, [r7, #12]
 8002a56:	4613      	mov	r3, r2
 8002a58:	005b      	lsls	r3, r3, #1
 8002a5a:	4413      	add	r3, r2
 8002a5c:	00db      	lsls	r3, r3, #3
 8002a5e:	440b      	add	r3, r1
 8002a60:	60bb      	str	r3, [r7, #8]

    WRITE_REG(dmarxdesc->DESC0, 0x0);
 8002a62:	68bb      	ldr	r3, [r7, #8]
 8002a64:	2200      	movs	r2, #0
 8002a66:	601a      	str	r2, [r3, #0]
    WRITE_REG(dmarxdesc->DESC1, 0x0);
 8002a68:	68bb      	ldr	r3, [r7, #8]
 8002a6a:	2200      	movs	r2, #0
 8002a6c:	605a      	str	r2, [r3, #4]
    WRITE_REG(dmarxdesc->DESC2, 0x0);
 8002a6e:	68bb      	ldr	r3, [r7, #8]
 8002a70:	2200      	movs	r2, #0
 8002a72:	609a      	str	r2, [r3, #8]
    WRITE_REG(dmarxdesc->DESC3, 0x0);
 8002a74:	68bb      	ldr	r3, [r7, #8]
 8002a76:	2200      	movs	r2, #0
 8002a78:	60da      	str	r2, [r3, #12]
    WRITE_REG(dmarxdesc->BackupAddr0, 0x0);
 8002a7a:	68bb      	ldr	r3, [r7, #8]
 8002a7c:	2200      	movs	r2, #0
 8002a7e:	611a      	str	r2, [r3, #16]
    WRITE_REG(dmarxdesc->BackupAddr1, 0x0);
 8002a80:	68bb      	ldr	r3, [r7, #8]
 8002a82:	2200      	movs	r2, #0
 8002a84:	615a      	str	r2, [r3, #20]

    /* Set Rx descritors addresses */
    WRITE_REG(heth->RxDescList.RxDesc[i], (uint32_t)dmarxdesc);
 8002a86:	68ba      	ldr	r2, [r7, #8]
 8002a88:	6879      	ldr	r1, [r7, #4]
 8002a8a:	68fb      	ldr	r3, [r7, #12]
 8002a8c:	3310      	adds	r3, #16
 8002a8e:	009b      	lsls	r3, r3, #2
 8002a90:	440b      	add	r3, r1
 8002a92:	605a      	str	r2, [r3, #4]
  for(i = 0; i < (uint32_t)ETH_RX_DESC_CNT; i++)
 8002a94:	68fb      	ldr	r3, [r7, #12]
 8002a96:	3301      	adds	r3, #1
 8002a98:	60fb      	str	r3, [r7, #12]
 8002a9a:	68fb      	ldr	r3, [r7, #12]
 8002a9c:	2b03      	cmp	r3, #3
 8002a9e:	d9d7      	bls.n	8002a50 <ETH_DMARxDescListInit+0xe>
  }

  WRITE_REG(heth->RxDescList.CurRxDesc, 0);
 8002aa0:	687b      	ldr	r3, [r7, #4]
 8002aa2:	2200      	movs	r2, #0
 8002aa4:	655a      	str	r2, [r3, #84]	; 0x54
  WRITE_REG(heth->RxDescList.FirstAppDesc, 0);
 8002aa6:	687b      	ldr	r3, [r7, #4]
 8002aa8:	2200      	movs	r2, #0
 8002aaa:	659a      	str	r2, [r3, #88]	; 0x58
  WRITE_REG(heth->RxDescList.AppDescNbr, 0);
 8002aac:	687b      	ldr	r3, [r7, #4]
 8002aae:	2200      	movs	r2, #0
 8002ab0:	65da      	str	r2, [r3, #92]	; 0x5c
  WRITE_REG(heth->RxDescList.ItMode, 0);
 8002ab2:	687b      	ldr	r3, [r7, #4]
 8002ab4:	2200      	movs	r2, #0
 8002ab6:	665a      	str	r2, [r3, #100]	; 0x64
  WRITE_REG(heth->RxDescList.AppContextDesc, 0);
 8002ab8:	687b      	ldr	r3, [r7, #4]
 8002aba:	2200      	movs	r2, #0
 8002abc:	661a      	str	r2, [r3, #96]	; 0x60

  /* Set Receive Descriptor Ring Length */
  WRITE_REG(heth->Instance->DMACRDRLR, ((uint32_t)(ETH_RX_DESC_CNT - 1)));
 8002abe:	687b      	ldr	r3, [r7, #4]
 8002ac0:	681a      	ldr	r2, [r3, #0]
 8002ac2:	f241 1330 	movw	r3, #4400	; 0x1130
 8002ac6:	4413      	add	r3, r2
 8002ac8:	2203      	movs	r2, #3
 8002aca:	601a      	str	r2, [r3, #0]

  /* Set Receive Descriptor List Address */
  WRITE_REG(heth->Instance->DMACRDLAR, (uint32_t) heth->Init.RxDesc);
 8002acc:	687b      	ldr	r3, [r7, #4]
 8002ace:	6919      	ldr	r1, [r3, #16]
 8002ad0:	687b      	ldr	r3, [r7, #4]
 8002ad2:	681a      	ldr	r2, [r3, #0]
 8002ad4:	f241 131c 	movw	r3, #4380	; 0x111c
 8002ad8:	4413      	add	r3, r2
 8002ada:	6019      	str	r1, [r3, #0]

  /* Set Receive Descriptor Tail pointer Address */
  WRITE_REG(heth->Instance->DMACRDTPR, ((uint32_t)(heth->Init.RxDesc + (uint32_t)(ETH_RX_DESC_CNT - 1))));
 8002adc:	687b      	ldr	r3, [r7, #4]
 8002ade:	691b      	ldr	r3, [r3, #16]
 8002ae0:	f103 0148 	add.w	r1, r3, #72	; 0x48
 8002ae4:	687b      	ldr	r3, [r7, #4]
 8002ae6:	681a      	ldr	r2, [r3, #0]
 8002ae8:	f241 1328 	movw	r3, #4392	; 0x1128
 8002aec:	4413      	add	r3, r2
 8002aee:	6019      	str	r1, [r3, #0]
}
 8002af0:	bf00      	nop
 8002af2:	3714      	adds	r7, #20
 8002af4:	46bd      	mov	sp, r7
 8002af6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002afa:	4770      	bx	lr

08002afc <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002afc:	b480      	push	{r7}
 8002afe:	b089      	sub	sp, #36	; 0x24
 8002b00:	af00      	add	r7, sp, #0
 8002b02:	6078      	str	r0, [r7, #4]
 8002b04:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8002b06:	2300      	movs	r3, #0
 8002b08:	61fb      	str	r3, [r7, #28]
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
#else
  EXTI_CurrentCPU = EXTI_D1; /* EXTI for CM7 CPU */
 8002b0a:	4b86      	ldr	r3, [pc, #536]	; (8002d24 <HAL_GPIO_Init+0x228>)
 8002b0c:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8002b0e:	e18c      	b.n	8002e2a <HAL_GPIO_Init+0x32e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8002b10:	683b      	ldr	r3, [r7, #0]
 8002b12:	681a      	ldr	r2, [r3, #0]
 8002b14:	2101      	movs	r1, #1
 8002b16:	69fb      	ldr	r3, [r7, #28]
 8002b18:	fa01 f303 	lsl.w	r3, r1, r3
 8002b1c:	4013      	ands	r3, r2
 8002b1e:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00U)
 8002b20:	693b      	ldr	r3, [r7, #16]
 8002b22:	2b00      	cmp	r3, #0
 8002b24:	f000 817e 	beq.w	8002e24 <HAL_GPIO_Init+0x328>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if ((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8002b28:	683b      	ldr	r3, [r7, #0]
 8002b2a:	685b      	ldr	r3, [r3, #4]
 8002b2c:	2b01      	cmp	r3, #1
 8002b2e:	d00b      	beq.n	8002b48 <HAL_GPIO_Init+0x4c>
 8002b30:	683b      	ldr	r3, [r7, #0]
 8002b32:	685b      	ldr	r3, [r3, #4]
 8002b34:	2b02      	cmp	r3, #2
 8002b36:	d007      	beq.n	8002b48 <HAL_GPIO_Init+0x4c>
          (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8002b38:	683b      	ldr	r3, [r7, #0]
 8002b3a:	685b      	ldr	r3, [r3, #4]
      if ((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8002b3c:	2b11      	cmp	r3, #17
 8002b3e:	d003      	beq.n	8002b48 <HAL_GPIO_Init+0x4c>
          (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8002b40:	683b      	ldr	r3, [r7, #0]
 8002b42:	685b      	ldr	r3, [r3, #4]
 8002b44:	2b12      	cmp	r3, #18
 8002b46:	d130      	bne.n	8002baa <HAL_GPIO_Init+0xae>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8002b48:	687b      	ldr	r3, [r7, #4]
 8002b4a:	689b      	ldr	r3, [r3, #8]
 8002b4c:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8002b4e:	69fb      	ldr	r3, [r7, #28]
 8002b50:	005b      	lsls	r3, r3, #1
 8002b52:	2203      	movs	r2, #3
 8002b54:	fa02 f303 	lsl.w	r3, r2, r3
 8002b58:	43db      	mvns	r3, r3
 8002b5a:	69ba      	ldr	r2, [r7, #24]
 8002b5c:	4013      	ands	r3, r2
 8002b5e:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8002b60:	683b      	ldr	r3, [r7, #0]
 8002b62:	68da      	ldr	r2, [r3, #12]
 8002b64:	69fb      	ldr	r3, [r7, #28]
 8002b66:	005b      	lsls	r3, r3, #1
 8002b68:	fa02 f303 	lsl.w	r3, r2, r3
 8002b6c:	69ba      	ldr	r2, [r7, #24]
 8002b6e:	4313      	orrs	r3, r2
 8002b70:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8002b72:	687b      	ldr	r3, [r7, #4]
 8002b74:	69ba      	ldr	r2, [r7, #24]
 8002b76:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002b78:	687b      	ldr	r3, [r7, #4]
 8002b7a:	685b      	ldr	r3, [r3, #4]
 8002b7c:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8002b7e:	2201      	movs	r2, #1
 8002b80:	69fb      	ldr	r3, [r7, #28]
 8002b82:	fa02 f303 	lsl.w	r3, r2, r3
 8002b86:	43db      	mvns	r3, r3
 8002b88:	69ba      	ldr	r2, [r7, #24]
 8002b8a:	4013      	ands	r3, r2
 8002b8c:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8002b8e:	683b      	ldr	r3, [r7, #0]
 8002b90:	685b      	ldr	r3, [r3, #4]
 8002b92:	091b      	lsrs	r3, r3, #4
 8002b94:	f003 0201 	and.w	r2, r3, #1
 8002b98:	69fb      	ldr	r3, [r7, #28]
 8002b9a:	fa02 f303 	lsl.w	r3, r2, r3
 8002b9e:	69ba      	ldr	r2, [r7, #24]
 8002ba0:	4313      	orrs	r3, r2
 8002ba2:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8002ba4:	687b      	ldr	r3, [r7, #4]
 8002ba6:	69ba      	ldr	r2, [r7, #24]
 8002ba8:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8002baa:	687b      	ldr	r3, [r7, #4]
 8002bac:	68db      	ldr	r3, [r3, #12]
 8002bae:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8002bb0:	69fb      	ldr	r3, [r7, #28]
 8002bb2:	005b      	lsls	r3, r3, #1
 8002bb4:	2203      	movs	r2, #3
 8002bb6:	fa02 f303 	lsl.w	r3, r2, r3
 8002bba:	43db      	mvns	r3, r3
 8002bbc:	69ba      	ldr	r2, [r7, #24]
 8002bbe:	4013      	ands	r3, r2
 8002bc0:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8002bc2:	683b      	ldr	r3, [r7, #0]
 8002bc4:	689a      	ldr	r2, [r3, #8]
 8002bc6:	69fb      	ldr	r3, [r7, #28]
 8002bc8:	005b      	lsls	r3, r3, #1
 8002bca:	fa02 f303 	lsl.w	r3, r2, r3
 8002bce:	69ba      	ldr	r2, [r7, #24]
 8002bd0:	4313      	orrs	r3, r2
 8002bd2:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8002bd4:	687b      	ldr	r3, [r7, #4]
 8002bd6:	69ba      	ldr	r2, [r7, #24]
 8002bd8:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8002bda:	683b      	ldr	r3, [r7, #0]
 8002bdc:	685b      	ldr	r3, [r3, #4]
 8002bde:	2b02      	cmp	r3, #2
 8002be0:	d003      	beq.n	8002bea <HAL_GPIO_Init+0xee>
 8002be2:	683b      	ldr	r3, [r7, #0]
 8002be4:	685b      	ldr	r3, [r3, #4]
 8002be6:	2b12      	cmp	r3, #18
 8002be8:	d123      	bne.n	8002c32 <HAL_GPIO_Init+0x136>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8002bea:	69fb      	ldr	r3, [r7, #28]
 8002bec:	08da      	lsrs	r2, r3, #3
 8002bee:	687b      	ldr	r3, [r7, #4]
 8002bf0:	3208      	adds	r2, #8
 8002bf2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002bf6:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8002bf8:	69fb      	ldr	r3, [r7, #28]
 8002bfa:	f003 0307 	and.w	r3, r3, #7
 8002bfe:	009b      	lsls	r3, r3, #2
 8002c00:	220f      	movs	r2, #15
 8002c02:	fa02 f303 	lsl.w	r3, r2, r3
 8002c06:	43db      	mvns	r3, r3
 8002c08:	69ba      	ldr	r2, [r7, #24]
 8002c0a:	4013      	ands	r3, r2
 8002c0c:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8002c0e:	683b      	ldr	r3, [r7, #0]
 8002c10:	691a      	ldr	r2, [r3, #16]
 8002c12:	69fb      	ldr	r3, [r7, #28]
 8002c14:	f003 0307 	and.w	r3, r3, #7
 8002c18:	009b      	lsls	r3, r3, #2
 8002c1a:	fa02 f303 	lsl.w	r3, r2, r3
 8002c1e:	69ba      	ldr	r2, [r7, #24]
 8002c20:	4313      	orrs	r3, r2
 8002c22:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8002c24:	69fb      	ldr	r3, [r7, #28]
 8002c26:	08da      	lsrs	r2, r3, #3
 8002c28:	687b      	ldr	r3, [r7, #4]
 8002c2a:	3208      	adds	r2, #8
 8002c2c:	69b9      	ldr	r1, [r7, #24]
 8002c2e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002c32:	687b      	ldr	r3, [r7, #4]
 8002c34:	681b      	ldr	r3, [r3, #0]
 8002c36:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8002c38:	69fb      	ldr	r3, [r7, #28]
 8002c3a:	005b      	lsls	r3, r3, #1
 8002c3c:	2203      	movs	r2, #3
 8002c3e:	fa02 f303 	lsl.w	r3, r2, r3
 8002c42:	43db      	mvns	r3, r3
 8002c44:	69ba      	ldr	r2, [r7, #24]
 8002c46:	4013      	ands	r3, r2
 8002c48:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8002c4a:	683b      	ldr	r3, [r7, #0]
 8002c4c:	685b      	ldr	r3, [r3, #4]
 8002c4e:	f003 0203 	and.w	r2, r3, #3
 8002c52:	69fb      	ldr	r3, [r7, #28]
 8002c54:	005b      	lsls	r3, r3, #1
 8002c56:	fa02 f303 	lsl.w	r3, r2, r3
 8002c5a:	69ba      	ldr	r2, [r7, #24]
 8002c5c:	4313      	orrs	r3, r2
 8002c5e:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8002c60:	687b      	ldr	r3, [r7, #4]
 8002c62:	69ba      	ldr	r2, [r7, #24]
 8002c64:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8002c66:	683b      	ldr	r3, [r7, #0]
 8002c68:	685b      	ldr	r3, [r3, #4]
 8002c6a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002c6e:	2b00      	cmp	r3, #0
 8002c70:	f000 80d8 	beq.w	8002e24 <HAL_GPIO_Init+0x328>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002c74:	4b2c      	ldr	r3, [pc, #176]	; (8002d28 <HAL_GPIO_Init+0x22c>)
 8002c76:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8002c7a:	4a2b      	ldr	r2, [pc, #172]	; (8002d28 <HAL_GPIO_Init+0x22c>)
 8002c7c:	f043 0302 	orr.w	r3, r3, #2
 8002c80:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 8002c84:	4b28      	ldr	r3, [pc, #160]	; (8002d28 <HAL_GPIO_Init+0x22c>)
 8002c86:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8002c8a:	f003 0302 	and.w	r3, r3, #2
 8002c8e:	60fb      	str	r3, [r7, #12]
 8002c90:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8002c92:	4a26      	ldr	r2, [pc, #152]	; (8002d2c <HAL_GPIO_Init+0x230>)
 8002c94:	69fb      	ldr	r3, [r7, #28]
 8002c96:	089b      	lsrs	r3, r3, #2
 8002c98:	3302      	adds	r3, #2
 8002c9a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002c9e:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8002ca0:	69fb      	ldr	r3, [r7, #28]
 8002ca2:	f003 0303 	and.w	r3, r3, #3
 8002ca6:	009b      	lsls	r3, r3, #2
 8002ca8:	220f      	movs	r2, #15
 8002caa:	fa02 f303 	lsl.w	r3, r2, r3
 8002cae:	43db      	mvns	r3, r3
 8002cb0:	69ba      	ldr	r2, [r7, #24]
 8002cb2:	4013      	ands	r3, r2
 8002cb4:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8002cb6:	687b      	ldr	r3, [r7, #4]
 8002cb8:	4a1d      	ldr	r2, [pc, #116]	; (8002d30 <HAL_GPIO_Init+0x234>)
 8002cba:	4293      	cmp	r3, r2
 8002cbc:	d04a      	beq.n	8002d54 <HAL_GPIO_Init+0x258>
 8002cbe:	687b      	ldr	r3, [r7, #4]
 8002cc0:	4a1c      	ldr	r2, [pc, #112]	; (8002d34 <HAL_GPIO_Init+0x238>)
 8002cc2:	4293      	cmp	r3, r2
 8002cc4:	d02b      	beq.n	8002d1e <HAL_GPIO_Init+0x222>
 8002cc6:	687b      	ldr	r3, [r7, #4]
 8002cc8:	4a1b      	ldr	r2, [pc, #108]	; (8002d38 <HAL_GPIO_Init+0x23c>)
 8002cca:	4293      	cmp	r3, r2
 8002ccc:	d025      	beq.n	8002d1a <HAL_GPIO_Init+0x21e>
 8002cce:	687b      	ldr	r3, [r7, #4]
 8002cd0:	4a1a      	ldr	r2, [pc, #104]	; (8002d3c <HAL_GPIO_Init+0x240>)
 8002cd2:	4293      	cmp	r3, r2
 8002cd4:	d01f      	beq.n	8002d16 <HAL_GPIO_Init+0x21a>
 8002cd6:	687b      	ldr	r3, [r7, #4]
 8002cd8:	4a19      	ldr	r2, [pc, #100]	; (8002d40 <HAL_GPIO_Init+0x244>)
 8002cda:	4293      	cmp	r3, r2
 8002cdc:	d019      	beq.n	8002d12 <HAL_GPIO_Init+0x216>
 8002cde:	687b      	ldr	r3, [r7, #4]
 8002ce0:	4a18      	ldr	r2, [pc, #96]	; (8002d44 <HAL_GPIO_Init+0x248>)
 8002ce2:	4293      	cmp	r3, r2
 8002ce4:	d013      	beq.n	8002d0e <HAL_GPIO_Init+0x212>
 8002ce6:	687b      	ldr	r3, [r7, #4]
 8002ce8:	4a17      	ldr	r2, [pc, #92]	; (8002d48 <HAL_GPIO_Init+0x24c>)
 8002cea:	4293      	cmp	r3, r2
 8002cec:	d00d      	beq.n	8002d0a <HAL_GPIO_Init+0x20e>
 8002cee:	687b      	ldr	r3, [r7, #4]
 8002cf0:	4a16      	ldr	r2, [pc, #88]	; (8002d4c <HAL_GPIO_Init+0x250>)
 8002cf2:	4293      	cmp	r3, r2
 8002cf4:	d007      	beq.n	8002d06 <HAL_GPIO_Init+0x20a>
 8002cf6:	687b      	ldr	r3, [r7, #4]
 8002cf8:	4a15      	ldr	r2, [pc, #84]	; (8002d50 <HAL_GPIO_Init+0x254>)
 8002cfa:	4293      	cmp	r3, r2
 8002cfc:	d101      	bne.n	8002d02 <HAL_GPIO_Init+0x206>
 8002cfe:	2309      	movs	r3, #9
 8002d00:	e029      	b.n	8002d56 <HAL_GPIO_Init+0x25a>
 8002d02:	230a      	movs	r3, #10
 8002d04:	e027      	b.n	8002d56 <HAL_GPIO_Init+0x25a>
 8002d06:	2307      	movs	r3, #7
 8002d08:	e025      	b.n	8002d56 <HAL_GPIO_Init+0x25a>
 8002d0a:	2306      	movs	r3, #6
 8002d0c:	e023      	b.n	8002d56 <HAL_GPIO_Init+0x25a>
 8002d0e:	2305      	movs	r3, #5
 8002d10:	e021      	b.n	8002d56 <HAL_GPIO_Init+0x25a>
 8002d12:	2304      	movs	r3, #4
 8002d14:	e01f      	b.n	8002d56 <HAL_GPIO_Init+0x25a>
 8002d16:	2303      	movs	r3, #3
 8002d18:	e01d      	b.n	8002d56 <HAL_GPIO_Init+0x25a>
 8002d1a:	2302      	movs	r3, #2
 8002d1c:	e01b      	b.n	8002d56 <HAL_GPIO_Init+0x25a>
 8002d1e:	2301      	movs	r3, #1
 8002d20:	e019      	b.n	8002d56 <HAL_GPIO_Init+0x25a>
 8002d22:	bf00      	nop
 8002d24:	58000080 	.word	0x58000080
 8002d28:	58024400 	.word	0x58024400
 8002d2c:	58000400 	.word	0x58000400
 8002d30:	58020000 	.word	0x58020000
 8002d34:	58020400 	.word	0x58020400
 8002d38:	58020800 	.word	0x58020800
 8002d3c:	58020c00 	.word	0x58020c00
 8002d40:	58021000 	.word	0x58021000
 8002d44:	58021400 	.word	0x58021400
 8002d48:	58021800 	.word	0x58021800
 8002d4c:	58021c00 	.word	0x58021c00
 8002d50:	58022400 	.word	0x58022400
 8002d54:	2300      	movs	r3, #0
 8002d56:	69fa      	ldr	r2, [r7, #28]
 8002d58:	f002 0203 	and.w	r2, r2, #3
 8002d5c:	0092      	lsls	r2, r2, #2
 8002d5e:	4093      	lsls	r3, r2
 8002d60:	69ba      	ldr	r2, [r7, #24]
 8002d62:	4313      	orrs	r3, r2
 8002d64:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8002d66:	4938      	ldr	r1, [pc, #224]	; (8002e48 <HAL_GPIO_Init+0x34c>)
 8002d68:	69fb      	ldr	r3, [r7, #28]
 8002d6a:	089b      	lsrs	r3, r3, #2
 8002d6c:	3302      	adds	r3, #2
 8002d6e:	69ba      	ldr	r2, [r7, #24]
 8002d70:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
 8002d74:	697b      	ldr	r3, [r7, #20]
 8002d76:	681b      	ldr	r3, [r3, #0]
 8002d78:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8002d7a:	693b      	ldr	r3, [r7, #16]
 8002d7c:	43db      	mvns	r3, r3
 8002d7e:	69ba      	ldr	r2, [r7, #24]
 8002d80:	4013      	ands	r3, r2
 8002d82:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8002d84:	683b      	ldr	r3, [r7, #0]
 8002d86:	685b      	ldr	r3, [r3, #4]
 8002d88:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002d8c:	2b00      	cmp	r3, #0
 8002d8e:	d003      	beq.n	8002d98 <HAL_GPIO_Init+0x29c>
        {
          temp |= iocurrent;
 8002d90:	69ba      	ldr	r2, [r7, #24]
 8002d92:	693b      	ldr	r3, [r7, #16]
 8002d94:	4313      	orrs	r3, r2
 8002d96:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->IMR1 = temp;
 8002d98:	697b      	ldr	r3, [r7, #20]
 8002d9a:	69ba      	ldr	r2, [r7, #24]
 8002d9c:	601a      	str	r2, [r3, #0]

        temp = EXTI_CurrentCPU->EMR1;
 8002d9e:	697b      	ldr	r3, [r7, #20]
 8002da0:	685b      	ldr	r3, [r3, #4]
 8002da2:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8002da4:	693b      	ldr	r3, [r7, #16]
 8002da6:	43db      	mvns	r3, r3
 8002da8:	69ba      	ldr	r2, [r7, #24]
 8002daa:	4013      	ands	r3, r2
 8002dac:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8002dae:	683b      	ldr	r3, [r7, #0]
 8002db0:	685b      	ldr	r3, [r3, #4]
 8002db2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002db6:	2b00      	cmp	r3, #0
 8002db8:	d003      	beq.n	8002dc2 <HAL_GPIO_Init+0x2c6>
        {
          temp |= iocurrent;
 8002dba:	69ba      	ldr	r2, [r7, #24]
 8002dbc:	693b      	ldr	r3, [r7, #16]
 8002dbe:	4313      	orrs	r3, r2
 8002dc0:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->EMR1 = temp;
 8002dc2:	697b      	ldr	r3, [r7, #20]
 8002dc4:	69ba      	ldr	r2, [r7, #24]
 8002dc6:	605a      	str	r2, [r3, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8002dc8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002dcc:	681b      	ldr	r3, [r3, #0]
 8002dce:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8002dd0:	693b      	ldr	r3, [r7, #16]
 8002dd2:	43db      	mvns	r3, r3
 8002dd4:	69ba      	ldr	r2, [r7, #24]
 8002dd6:	4013      	ands	r3, r2
 8002dd8:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8002dda:	683b      	ldr	r3, [r7, #0]
 8002ddc:	685b      	ldr	r3, [r3, #4]
 8002dde:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002de2:	2b00      	cmp	r3, #0
 8002de4:	d003      	beq.n	8002dee <HAL_GPIO_Init+0x2f2>
        {
          temp |= iocurrent;
 8002de6:	69ba      	ldr	r2, [r7, #24]
 8002de8:	693b      	ldr	r3, [r7, #16]
 8002dea:	4313      	orrs	r3, r2
 8002dec:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR1 = temp;
 8002dee:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8002df2:	69bb      	ldr	r3, [r7, #24]
 8002df4:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 8002df6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002dfa:	685b      	ldr	r3, [r3, #4]
 8002dfc:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8002dfe:	693b      	ldr	r3, [r7, #16]
 8002e00:	43db      	mvns	r3, r3
 8002e02:	69ba      	ldr	r2, [r7, #24]
 8002e04:	4013      	ands	r3, r2
 8002e06:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8002e08:	683b      	ldr	r3, [r7, #0]
 8002e0a:	685b      	ldr	r3, [r3, #4]
 8002e0c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002e10:	2b00      	cmp	r3, #0
 8002e12:	d003      	beq.n	8002e1c <HAL_GPIO_Init+0x320>
        {
          temp |= iocurrent;
 8002e14:	69ba      	ldr	r2, [r7, #24]
 8002e16:	693b      	ldr	r3, [r7, #16]
 8002e18:	4313      	orrs	r3, r2
 8002e1a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR1 = temp;
 8002e1c:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8002e20:	69bb      	ldr	r3, [r7, #24]
 8002e22:	6053      	str	r3, [r2, #4]
      }
    }

    position++;
 8002e24:	69fb      	ldr	r3, [r7, #28]
 8002e26:	3301      	adds	r3, #1
 8002e28:	61fb      	str	r3, [r7, #28]
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8002e2a:	683b      	ldr	r3, [r7, #0]
 8002e2c:	681a      	ldr	r2, [r3, #0]
 8002e2e:	69fb      	ldr	r3, [r7, #28]
 8002e30:	fa22 f303 	lsr.w	r3, r2, r3
 8002e34:	2b00      	cmp	r3, #0
 8002e36:	f47f ae6b 	bne.w	8002b10 <HAL_GPIO_Init+0x14>
  }
}
 8002e3a:	bf00      	nop
 8002e3c:	bf00      	nop
 8002e3e:	3724      	adds	r7, #36	; 0x24
 8002e40:	46bd      	mov	sp, r7
 8002e42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e46:	4770      	bx	lr
 8002e48:	58000400 	.word	0x58000400

08002e4c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002e4c:	b480      	push	{r7}
 8002e4e:	b083      	sub	sp, #12
 8002e50:	af00      	add	r7, sp, #0
 8002e52:	6078      	str	r0, [r7, #4]
 8002e54:	460b      	mov	r3, r1
 8002e56:	807b      	strh	r3, [r7, #2]
 8002e58:	4613      	mov	r3, r2
 8002e5a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8002e5c:	787b      	ldrb	r3, [r7, #1]
 8002e5e:	2b00      	cmp	r3, #0
 8002e60:	d003      	beq.n	8002e6a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8002e62:	887a      	ldrh	r2, [r7, #2]
 8002e64:	687b      	ldr	r3, [r7, #4]
 8002e66:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
  }
}
 8002e68:	e003      	b.n	8002e72 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 8002e6a:	887b      	ldrh	r3, [r7, #2]
 8002e6c:	041a      	lsls	r2, r3, #16
 8002e6e:	687b      	ldr	r3, [r7, #4]
 8002e70:	619a      	str	r2, [r3, #24]
}
 8002e72:	bf00      	nop
 8002e74:	370c      	adds	r7, #12
 8002e76:	46bd      	mov	sp, r7
 8002e78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e7c:	4770      	bx	lr
	...

08002e80 <HAL_PWREx_ConfigSupply>:
  *         PWR_SMPS_2V5_SUPPLIES_EXT are used only for lines that supports SMPS
  *         regulator.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply (uint32_t SupplySource)
{
 8002e80:	b580      	push	{r7, lr}
 8002e82:	b084      	sub	sp, #16
 8002e84:	af00      	add	r7, sp, #0
 8002e86:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param (IS_PWR_SUPPLY (SupplySource));

  /* Check if supply source was configured */
#if defined (PWR_FLAG_SCUEN)
  if (__HAL_PWR_GET_FLAG (PWR_FLAG_SCUEN) == 0U)
 8002e88:	4b19      	ldr	r3, [pc, #100]	; (8002ef0 <HAL_PWREx_ConfigSupply+0x70>)
 8002e8a:	68db      	ldr	r3, [r3, #12]
 8002e8c:	f003 0304 	and.w	r3, r3, #4
 8002e90:	2b04      	cmp	r3, #4
 8002e92:	d00a      	beq.n	8002eaa <HAL_PWREx_ConfigSupply+0x2a>
#else
  if ((PWR->CR3 & (PWR_CR3_SMPSEN | PWR_CR3_LDOEN | PWR_CR3_BYPASS)) != (PWR_CR3_SMPSEN | PWR_CR3_LDOEN))
#endif /* defined (PWR_FLAG_SCUEN) */
  {
    /* Check supply configuration */
    if ((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
 8002e94:	4b16      	ldr	r3, [pc, #88]	; (8002ef0 <HAL_PWREx_ConfigSupply+0x70>)
 8002e96:	68db      	ldr	r3, [r3, #12]
 8002e98:	f003 0307 	and.w	r3, r3, #7
 8002e9c:	687a      	ldr	r2, [r7, #4]
 8002e9e:	429a      	cmp	r2, r3
 8002ea0:	d001      	beq.n	8002ea6 <HAL_PWREx_ConfigSupply+0x26>
    {
      /* Supply configuration update locked, can't apply a new supply config */
      return HAL_ERROR;
 8002ea2:	2301      	movs	r3, #1
 8002ea4:	e01f      	b.n	8002ee6 <HAL_PWREx_ConfigSupply+0x66>
    else
    {
      /* Supply configuration update locked, but new supply configuration
         matches with old supply configuration : nothing to do
      */
      return HAL_OK;
 8002ea6:	2300      	movs	r3, #0
 8002ea8:	e01d      	b.n	8002ee6 <HAL_PWREx_ConfigSupply+0x66>
    }
  }

  /* Set the power supply configuration */
  MODIFY_REG (PWR->CR3, PWR_SUPPLY_CONFIG_MASK, SupplySource);
 8002eaa:	4b11      	ldr	r3, [pc, #68]	; (8002ef0 <HAL_PWREx_ConfigSupply+0x70>)
 8002eac:	68db      	ldr	r3, [r3, #12]
 8002eae:	f023 0207 	bic.w	r2, r3, #7
 8002eb2:	490f      	ldr	r1, [pc, #60]	; (8002ef0 <HAL_PWREx_ConfigSupply+0x70>)
 8002eb4:	687b      	ldr	r3, [r7, #4]
 8002eb6:	4313      	orrs	r3, r2
 8002eb8:	60cb      	str	r3, [r1, #12]

  /* Get tick */
  tickstart = HAL_GetTick ();
 8002eba:	f7fe fb77 	bl	80015ac <HAL_GetTick>
 8002ebe:	60f8      	str	r0, [r7, #12]

  /* Wait till voltage level flag is set */
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8002ec0:	e009      	b.n	8002ed6 <HAL_PWREx_ConfigSupply+0x56>
  {
    if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 8002ec2:	f7fe fb73 	bl	80015ac <HAL_GetTick>
 8002ec6:	4602      	mov	r2, r0
 8002ec8:	68fb      	ldr	r3, [r7, #12]
 8002eca:	1ad3      	subs	r3, r2, r3
 8002ecc:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8002ed0:	d901      	bls.n	8002ed6 <HAL_PWREx_ConfigSupply+0x56>
    {
      return HAL_ERROR;
 8002ed2:	2301      	movs	r3, #1
 8002ed4:	e007      	b.n	8002ee6 <HAL_PWREx_ConfigSupply+0x66>
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8002ed6:	4b06      	ldr	r3, [pc, #24]	; (8002ef0 <HAL_PWREx_ConfigSupply+0x70>)
 8002ed8:	685b      	ldr	r3, [r3, #4]
 8002eda:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8002ede:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002ee2:	d1ee      	bne.n	8002ec2 <HAL_PWREx_ConfigSupply+0x42>
      }
    }
  }
#endif /* defined (SMPS) */

  return HAL_OK;
 8002ee4:	2300      	movs	r3, #0
}
 8002ee6:	4618      	mov	r0, r3
 8002ee8:	3710      	adds	r7, #16
 8002eea:	46bd      	mov	sp, r7
 8002eec:	bd80      	pop	{r7, pc}
 8002eee:	bf00      	nop
 8002ef0:	58024800 	.word	0x58024800

08002ef4 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002ef4:	b580      	push	{r7, lr}
 8002ef6:	b08c      	sub	sp, #48	; 0x30
 8002ef8:	af00      	add	r7, sp, #0
 8002efa:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp1_pllckcfg, temp2_pllckcfg;

    /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8002efc:	687b      	ldr	r3, [r7, #4]
 8002efe:	2b00      	cmp	r3, #0
 8002f00:	d101      	bne.n	8002f06 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002f02:	2301      	movs	r3, #1
 8002f04:	e37a      	b.n	80035fc <HAL_RCC_OscConfig+0x708>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002f06:	687b      	ldr	r3, [r7, #4]
 8002f08:	681b      	ldr	r3, [r3, #0]
 8002f0a:	f003 0301 	and.w	r3, r3, #1
 8002f0e:	2b00      	cmp	r3, #0
 8002f10:	f000 8087 	beq.w	8003022 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002f14:	4ba0      	ldr	r3, [pc, #640]	; (8003198 <HAL_RCC_OscConfig+0x2a4>)
 8002f16:	691b      	ldr	r3, [r3, #16]
 8002f18:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8002f1c:	62fb      	str	r3, [r7, #44]	; 0x2c
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8002f1e:	4b9e      	ldr	r3, [pc, #632]	; (8003198 <HAL_RCC_OscConfig+0x2a4>)
 8002f20:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002f22:	62bb      	str	r3, [r7, #40]	; 0x28
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 8002f24:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002f26:	2b10      	cmp	r3, #16
 8002f28:	d007      	beq.n	8002f3a <HAL_RCC_OscConfig+0x46>
 8002f2a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002f2c:	2b18      	cmp	r3, #24
 8002f2e:	d110      	bne.n	8002f52 <HAL_RCC_OscConfig+0x5e>
 8002f30:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002f32:	f003 0303 	and.w	r3, r3, #3
 8002f36:	2b02      	cmp	r3, #2
 8002f38:	d10b      	bne.n	8002f52 <HAL_RCC_OscConfig+0x5e>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002f3a:	4b97      	ldr	r3, [pc, #604]	; (8003198 <HAL_RCC_OscConfig+0x2a4>)
 8002f3c:	681b      	ldr	r3, [r3, #0]
 8002f3e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002f42:	2b00      	cmp	r3, #0
 8002f44:	d06c      	beq.n	8003020 <HAL_RCC_OscConfig+0x12c>
 8002f46:	687b      	ldr	r3, [r7, #4]
 8002f48:	685b      	ldr	r3, [r3, #4]
 8002f4a:	2b00      	cmp	r3, #0
 8002f4c:	d168      	bne.n	8003020 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8002f4e:	2301      	movs	r3, #1
 8002f50:	e354      	b.n	80035fc <HAL_RCC_OscConfig+0x708>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002f52:	687b      	ldr	r3, [r7, #4]
 8002f54:	685b      	ldr	r3, [r3, #4]
 8002f56:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002f5a:	d106      	bne.n	8002f6a <HAL_RCC_OscConfig+0x76>
 8002f5c:	4b8e      	ldr	r3, [pc, #568]	; (8003198 <HAL_RCC_OscConfig+0x2a4>)
 8002f5e:	681b      	ldr	r3, [r3, #0]
 8002f60:	4a8d      	ldr	r2, [pc, #564]	; (8003198 <HAL_RCC_OscConfig+0x2a4>)
 8002f62:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002f66:	6013      	str	r3, [r2, #0]
 8002f68:	e02e      	b.n	8002fc8 <HAL_RCC_OscConfig+0xd4>
 8002f6a:	687b      	ldr	r3, [r7, #4]
 8002f6c:	685b      	ldr	r3, [r3, #4]
 8002f6e:	2b00      	cmp	r3, #0
 8002f70:	d10c      	bne.n	8002f8c <HAL_RCC_OscConfig+0x98>
 8002f72:	4b89      	ldr	r3, [pc, #548]	; (8003198 <HAL_RCC_OscConfig+0x2a4>)
 8002f74:	681b      	ldr	r3, [r3, #0]
 8002f76:	4a88      	ldr	r2, [pc, #544]	; (8003198 <HAL_RCC_OscConfig+0x2a4>)
 8002f78:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002f7c:	6013      	str	r3, [r2, #0]
 8002f7e:	4b86      	ldr	r3, [pc, #536]	; (8003198 <HAL_RCC_OscConfig+0x2a4>)
 8002f80:	681b      	ldr	r3, [r3, #0]
 8002f82:	4a85      	ldr	r2, [pc, #532]	; (8003198 <HAL_RCC_OscConfig+0x2a4>)
 8002f84:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002f88:	6013      	str	r3, [r2, #0]
 8002f8a:	e01d      	b.n	8002fc8 <HAL_RCC_OscConfig+0xd4>
 8002f8c:	687b      	ldr	r3, [r7, #4]
 8002f8e:	685b      	ldr	r3, [r3, #4]
 8002f90:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002f94:	d10c      	bne.n	8002fb0 <HAL_RCC_OscConfig+0xbc>
 8002f96:	4b80      	ldr	r3, [pc, #512]	; (8003198 <HAL_RCC_OscConfig+0x2a4>)
 8002f98:	681b      	ldr	r3, [r3, #0]
 8002f9a:	4a7f      	ldr	r2, [pc, #508]	; (8003198 <HAL_RCC_OscConfig+0x2a4>)
 8002f9c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002fa0:	6013      	str	r3, [r2, #0]
 8002fa2:	4b7d      	ldr	r3, [pc, #500]	; (8003198 <HAL_RCC_OscConfig+0x2a4>)
 8002fa4:	681b      	ldr	r3, [r3, #0]
 8002fa6:	4a7c      	ldr	r2, [pc, #496]	; (8003198 <HAL_RCC_OscConfig+0x2a4>)
 8002fa8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002fac:	6013      	str	r3, [r2, #0]
 8002fae:	e00b      	b.n	8002fc8 <HAL_RCC_OscConfig+0xd4>
 8002fb0:	4b79      	ldr	r3, [pc, #484]	; (8003198 <HAL_RCC_OscConfig+0x2a4>)
 8002fb2:	681b      	ldr	r3, [r3, #0]
 8002fb4:	4a78      	ldr	r2, [pc, #480]	; (8003198 <HAL_RCC_OscConfig+0x2a4>)
 8002fb6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002fba:	6013      	str	r3, [r2, #0]
 8002fbc:	4b76      	ldr	r3, [pc, #472]	; (8003198 <HAL_RCC_OscConfig+0x2a4>)
 8002fbe:	681b      	ldr	r3, [r3, #0]
 8002fc0:	4a75      	ldr	r2, [pc, #468]	; (8003198 <HAL_RCC_OscConfig+0x2a4>)
 8002fc2:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002fc6:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002fc8:	687b      	ldr	r3, [r7, #4]
 8002fca:	685b      	ldr	r3, [r3, #4]
 8002fcc:	2b00      	cmp	r3, #0
 8002fce:	d013      	beq.n	8002ff8 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002fd0:	f7fe faec 	bl	80015ac <HAL_GetTick>
 8002fd4:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8002fd6:	e008      	b.n	8002fea <HAL_RCC_OscConfig+0xf6>
        {
          if((uint32_t) (HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002fd8:	f7fe fae8 	bl	80015ac <HAL_GetTick>
 8002fdc:	4602      	mov	r2, r0
 8002fde:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002fe0:	1ad3      	subs	r3, r2, r3
 8002fe2:	2b64      	cmp	r3, #100	; 0x64
 8002fe4:	d901      	bls.n	8002fea <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8002fe6:	2303      	movs	r3, #3
 8002fe8:	e308      	b.n	80035fc <HAL_RCC_OscConfig+0x708>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8002fea:	4b6b      	ldr	r3, [pc, #428]	; (8003198 <HAL_RCC_OscConfig+0x2a4>)
 8002fec:	681b      	ldr	r3, [r3, #0]
 8002fee:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002ff2:	2b00      	cmp	r3, #0
 8002ff4:	d0f0      	beq.n	8002fd8 <HAL_RCC_OscConfig+0xe4>
 8002ff6:	e014      	b.n	8003022 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002ff8:	f7fe fad8 	bl	80015ac <HAL_GetTick>
 8002ffc:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8002ffe:	e008      	b.n	8003012 <HAL_RCC_OscConfig+0x11e>
        {
          if((uint32_t) (HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003000:	f7fe fad4 	bl	80015ac <HAL_GetTick>
 8003004:	4602      	mov	r2, r0
 8003006:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003008:	1ad3      	subs	r3, r2, r3
 800300a:	2b64      	cmp	r3, #100	; 0x64
 800300c:	d901      	bls.n	8003012 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 800300e:	2303      	movs	r3, #3
 8003010:	e2f4      	b.n	80035fc <HAL_RCC_OscConfig+0x708>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8003012:	4b61      	ldr	r3, [pc, #388]	; (8003198 <HAL_RCC_OscConfig+0x2a4>)
 8003014:	681b      	ldr	r3, [r3, #0]
 8003016:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800301a:	2b00      	cmp	r3, #0
 800301c:	d1f0      	bne.n	8003000 <HAL_RCC_OscConfig+0x10c>
 800301e:	e000      	b.n	8003022 <HAL_RCC_OscConfig+0x12e>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003020:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003022:	687b      	ldr	r3, [r7, #4]
 8003024:	681b      	ldr	r3, [r3, #0]
 8003026:	f003 0302 	and.w	r3, r3, #2
 800302a:	2b00      	cmp	r3, #0
 800302c:	d06d      	beq.n	800310a <HAL_RCC_OscConfig+0x216>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSICALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* When the HSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800302e:	4b5a      	ldr	r3, [pc, #360]	; (8003198 <HAL_RCC_OscConfig+0x2a4>)
 8003030:	691b      	ldr	r3, [r3, #16]
 8003032:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8003036:	623b      	str	r3, [r7, #32]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8003038:	4b57      	ldr	r3, [pc, #348]	; (8003198 <HAL_RCC_OscConfig+0x2a4>)
 800303a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800303c:	61fb      	str	r3, [r7, #28]
    if((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 800303e:	6a3b      	ldr	r3, [r7, #32]
 8003040:	2b00      	cmp	r3, #0
 8003042:	d007      	beq.n	8003054 <HAL_RCC_OscConfig+0x160>
 8003044:	6a3b      	ldr	r3, [r7, #32]
 8003046:	2b18      	cmp	r3, #24
 8003048:	d11b      	bne.n	8003082 <HAL_RCC_OscConfig+0x18e>
 800304a:	69fb      	ldr	r3, [r7, #28]
 800304c:	f003 0303 	and.w	r3, r3, #3
 8003050:	2b00      	cmp	r3, #0
 8003052:	d116      	bne.n	8003082 <HAL_RCC_OscConfig+0x18e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8003054:	4b50      	ldr	r3, [pc, #320]	; (8003198 <HAL_RCC_OscConfig+0x2a4>)
 8003056:	681b      	ldr	r3, [r3, #0]
 8003058:	f003 0304 	and.w	r3, r3, #4
 800305c:	2b00      	cmp	r3, #0
 800305e:	d005      	beq.n	800306c <HAL_RCC_OscConfig+0x178>
 8003060:	687b      	ldr	r3, [r7, #4]
 8003062:	68db      	ldr	r3, [r3, #12]
 8003064:	2b00      	cmp	r3, #0
 8003066:	d101      	bne.n	800306c <HAL_RCC_OscConfig+0x178>
      {
        return HAL_ERROR;
 8003068:	2301      	movs	r3, #1
 800306a:	e2c7      	b.n	80035fc <HAL_RCC_OscConfig+0x708>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800306c:	4b4a      	ldr	r3, [pc, #296]	; (8003198 <HAL_RCC_OscConfig+0x2a4>)
 800306e:	685b      	ldr	r3, [r3, #4]
 8003070:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8003074:	687b      	ldr	r3, [r7, #4]
 8003076:	691b      	ldr	r3, [r3, #16]
 8003078:	061b      	lsls	r3, r3, #24
 800307a:	4947      	ldr	r1, [pc, #284]	; (8003198 <HAL_RCC_OscConfig+0x2a4>)
 800307c:	4313      	orrs	r3, r2
 800307e:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8003080:	e043      	b.n	800310a <HAL_RCC_OscConfig+0x216>
    }

    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8003082:	687b      	ldr	r3, [r7, #4]
 8003084:	68db      	ldr	r3, [r3, #12]
 8003086:	2b00      	cmp	r3, #0
 8003088:	d026      	beq.n	80030d8 <HAL_RCC_OscConfig+0x1e4>
      {
     /* Enable the Internal High Speed oscillator (HSI, HSIDIV2,HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 800308a:	4b43      	ldr	r3, [pc, #268]	; (8003198 <HAL_RCC_OscConfig+0x2a4>)
 800308c:	681b      	ldr	r3, [r3, #0]
 800308e:	f023 0219 	bic.w	r2, r3, #25
 8003092:	687b      	ldr	r3, [r7, #4]
 8003094:	68db      	ldr	r3, [r3, #12]
 8003096:	4940      	ldr	r1, [pc, #256]	; (8003198 <HAL_RCC_OscConfig+0x2a4>)
 8003098:	4313      	orrs	r3, r2
 800309a:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800309c:	f7fe fa86 	bl	80015ac <HAL_GetTick>
 80030a0:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80030a2:	e008      	b.n	80030b6 <HAL_RCC_OscConfig+0x1c2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80030a4:	f7fe fa82 	bl	80015ac <HAL_GetTick>
 80030a8:	4602      	mov	r2, r0
 80030aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80030ac:	1ad3      	subs	r3, r2, r3
 80030ae:	2b02      	cmp	r3, #2
 80030b0:	d901      	bls.n	80030b6 <HAL_RCC_OscConfig+0x1c2>
          {
            return HAL_TIMEOUT;
 80030b2:	2303      	movs	r3, #3
 80030b4:	e2a2      	b.n	80035fc <HAL_RCC_OscConfig+0x708>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80030b6:	4b38      	ldr	r3, [pc, #224]	; (8003198 <HAL_RCC_OscConfig+0x2a4>)
 80030b8:	681b      	ldr	r3, [r3, #0]
 80030ba:	f003 0304 	and.w	r3, r3, #4
 80030be:	2b00      	cmp	r3, #0
 80030c0:	d0f0      	beq.n	80030a4 <HAL_RCC_OscConfig+0x1b0>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80030c2:	4b35      	ldr	r3, [pc, #212]	; (8003198 <HAL_RCC_OscConfig+0x2a4>)
 80030c4:	685b      	ldr	r3, [r3, #4]
 80030c6:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 80030ca:	687b      	ldr	r3, [r7, #4]
 80030cc:	691b      	ldr	r3, [r3, #16]
 80030ce:	061b      	lsls	r3, r3, #24
 80030d0:	4931      	ldr	r1, [pc, #196]	; (8003198 <HAL_RCC_OscConfig+0x2a4>)
 80030d2:	4313      	orrs	r3, r2
 80030d4:	604b      	str	r3, [r1, #4]
 80030d6:	e018      	b.n	800310a <HAL_RCC_OscConfig+0x216>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80030d8:	4b2f      	ldr	r3, [pc, #188]	; (8003198 <HAL_RCC_OscConfig+0x2a4>)
 80030da:	681b      	ldr	r3, [r3, #0]
 80030dc:	4a2e      	ldr	r2, [pc, #184]	; (8003198 <HAL_RCC_OscConfig+0x2a4>)
 80030de:	f023 0301 	bic.w	r3, r3, #1
 80030e2:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80030e4:	f7fe fa62 	bl	80015ac <HAL_GetTick>
 80030e8:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 80030ea:	e008      	b.n	80030fe <HAL_RCC_OscConfig+0x20a>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80030ec:	f7fe fa5e 	bl	80015ac <HAL_GetTick>
 80030f0:	4602      	mov	r2, r0
 80030f2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80030f4:	1ad3      	subs	r3, r2, r3
 80030f6:	2b02      	cmp	r3, #2
 80030f8:	d901      	bls.n	80030fe <HAL_RCC_OscConfig+0x20a>
          {
            return HAL_TIMEOUT;
 80030fa:	2303      	movs	r3, #3
 80030fc:	e27e      	b.n	80035fc <HAL_RCC_OscConfig+0x708>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 80030fe:	4b26      	ldr	r3, [pc, #152]	; (8003198 <HAL_RCC_OscConfig+0x2a4>)
 8003100:	681b      	ldr	r3, [r3, #0]
 8003102:	f003 0304 	and.w	r3, r3, #4
 8003106:	2b00      	cmp	r3, #0
 8003108:	d1f0      	bne.n	80030ec <HAL_RCC_OscConfig+0x1f8>
        }
      }
    }
  }
  /*----------------------------- CSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 800310a:	687b      	ldr	r3, [r7, #4]
 800310c:	681b      	ldr	r3, [r3, #0]
 800310e:	f003 0310 	and.w	r3, r3, #16
 8003112:	2b00      	cmp	r3, #0
 8003114:	d06c      	beq.n	80031f0 <HAL_RCC_OscConfig+0x2fc>
    /* Check the parameters */
    assert_param(IS_RCC_CSI(RCC_OscInitStruct->CSIState));
    assert_param(IS_RCC_CSICALIBRATION_VALUE(RCC_OscInitStruct->CSICalibrationValue));

    /* When the CSI is used as system clock it will not disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8003116:	4b20      	ldr	r3, [pc, #128]	; (8003198 <HAL_RCC_OscConfig+0x2a4>)
 8003118:	691b      	ldr	r3, [r3, #16]
 800311a:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800311e:	61bb      	str	r3, [r7, #24]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8003120:	4b1d      	ldr	r3, [pc, #116]	; (8003198 <HAL_RCC_OscConfig+0x2a4>)
 8003122:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003124:	617b      	str	r3, [r7, #20]
    if((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 8003126:	69bb      	ldr	r3, [r7, #24]
 8003128:	2b08      	cmp	r3, #8
 800312a:	d007      	beq.n	800313c <HAL_RCC_OscConfig+0x248>
 800312c:	69bb      	ldr	r3, [r7, #24]
 800312e:	2b18      	cmp	r3, #24
 8003130:	d11b      	bne.n	800316a <HAL_RCC_OscConfig+0x276>
 8003132:	697b      	ldr	r3, [r7, #20]
 8003134:	f003 0303 	and.w	r3, r3, #3
 8003138:	2b01      	cmp	r3, #1
 800313a:	d116      	bne.n	800316a <HAL_RCC_OscConfig+0x276>
    {
      /* When CSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 800313c:	4b16      	ldr	r3, [pc, #88]	; (8003198 <HAL_RCC_OscConfig+0x2a4>)
 800313e:	681b      	ldr	r3, [r3, #0]
 8003140:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003144:	2b00      	cmp	r3, #0
 8003146:	d005      	beq.n	8003154 <HAL_RCC_OscConfig+0x260>
 8003148:	687b      	ldr	r3, [r7, #4]
 800314a:	69db      	ldr	r3, [r3, #28]
 800314c:	2b80      	cmp	r3, #128	; 0x80
 800314e:	d001      	beq.n	8003154 <HAL_RCC_OscConfig+0x260>
      {
        return HAL_ERROR;
 8003150:	2301      	movs	r3, #1
 8003152:	e253      	b.n	80035fc <HAL_RCC_OscConfig+0x708>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8003154:	4b10      	ldr	r3, [pc, #64]	; (8003198 <HAL_RCC_OscConfig+0x2a4>)
 8003156:	68db      	ldr	r3, [r3, #12]
 8003158:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 800315c:	687b      	ldr	r3, [r7, #4]
 800315e:	6a1b      	ldr	r3, [r3, #32]
 8003160:	061b      	lsls	r3, r3, #24
 8003162:	490d      	ldr	r1, [pc, #52]	; (8003198 <HAL_RCC_OscConfig+0x2a4>)
 8003164:	4313      	orrs	r3, r2
 8003166:	60cb      	str	r3, [r1, #12]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8003168:	e042      	b.n	80031f0 <HAL_RCC_OscConfig+0x2fc>
      }
    }
    else
    {
      /* Check the CSI State */
      if((RCC_OscInitStruct->CSIState)!= RCC_CSI_OFF)
 800316a:	687b      	ldr	r3, [r7, #4]
 800316c:	69db      	ldr	r3, [r3, #28]
 800316e:	2b00      	cmp	r3, #0
 8003170:	d025      	beq.n	80031be <HAL_RCC_OscConfig+0x2ca>
      {
        /* Enable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_ENABLE();
 8003172:	4b09      	ldr	r3, [pc, #36]	; (8003198 <HAL_RCC_OscConfig+0x2a4>)
 8003174:	681b      	ldr	r3, [r3, #0]
 8003176:	4a08      	ldr	r2, [pc, #32]	; (8003198 <HAL_RCC_OscConfig+0x2a4>)
 8003178:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800317c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800317e:	f7fe fa15 	bl	80015ac <HAL_GetTick>
 8003182:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8003184:	e00a      	b.n	800319c <HAL_RCC_OscConfig+0x2a8>
        {
          if((HAL_GetTick() - tickstart ) > CSI_TIMEOUT_VALUE)
 8003186:	f7fe fa11 	bl	80015ac <HAL_GetTick>
 800318a:	4602      	mov	r2, r0
 800318c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800318e:	1ad3      	subs	r3, r2, r3
 8003190:	2b02      	cmp	r3, #2
 8003192:	d903      	bls.n	800319c <HAL_RCC_OscConfig+0x2a8>
          {
            return HAL_TIMEOUT;
 8003194:	2303      	movs	r3, #3
 8003196:	e231      	b.n	80035fc <HAL_RCC_OscConfig+0x708>
 8003198:	58024400 	.word	0x58024400
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 800319c:	4ba3      	ldr	r3, [pc, #652]	; (800342c <HAL_RCC_OscConfig+0x538>)
 800319e:	681b      	ldr	r3, [r3, #0]
 80031a0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80031a4:	2b00      	cmp	r3, #0
 80031a6:	d0ee      	beq.n	8003186 <HAL_RCC_OscConfig+0x292>
          }
        }

        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 80031a8:	4ba0      	ldr	r3, [pc, #640]	; (800342c <HAL_RCC_OscConfig+0x538>)
 80031aa:	68db      	ldr	r3, [r3, #12]
 80031ac:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 80031b0:	687b      	ldr	r3, [r7, #4]
 80031b2:	6a1b      	ldr	r3, [r3, #32]
 80031b4:	061b      	lsls	r3, r3, #24
 80031b6:	499d      	ldr	r1, [pc, #628]	; (800342c <HAL_RCC_OscConfig+0x538>)
 80031b8:	4313      	orrs	r3, r2
 80031ba:	60cb      	str	r3, [r1, #12]
 80031bc:	e018      	b.n	80031f0 <HAL_RCC_OscConfig+0x2fc>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_DISABLE();
 80031be:	4b9b      	ldr	r3, [pc, #620]	; (800342c <HAL_RCC_OscConfig+0x538>)
 80031c0:	681b      	ldr	r3, [r3, #0]
 80031c2:	4a9a      	ldr	r2, [pc, #616]	; (800342c <HAL_RCC_OscConfig+0x538>)
 80031c4:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80031c8:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80031ca:	f7fe f9ef 	bl	80015ac <HAL_GetTick>
 80031ce:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 80031d0:	e008      	b.n	80031e4 <HAL_RCC_OscConfig+0x2f0>
        {
          if((HAL_GetTick() - tickstart ) > CSI_TIMEOUT_VALUE)
 80031d2:	f7fe f9eb 	bl	80015ac <HAL_GetTick>
 80031d6:	4602      	mov	r2, r0
 80031d8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80031da:	1ad3      	subs	r3, r2, r3
 80031dc:	2b02      	cmp	r3, #2
 80031de:	d901      	bls.n	80031e4 <HAL_RCC_OscConfig+0x2f0>
          {
            return HAL_TIMEOUT;
 80031e0:	2303      	movs	r3, #3
 80031e2:	e20b      	b.n	80035fc <HAL_RCC_OscConfig+0x708>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 80031e4:	4b91      	ldr	r3, [pc, #580]	; (800342c <HAL_RCC_OscConfig+0x538>)
 80031e6:	681b      	ldr	r3, [r3, #0]
 80031e8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80031ec:	2b00      	cmp	r3, #0
 80031ee:	d1f0      	bne.n	80031d2 <HAL_RCC_OscConfig+0x2de>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80031f0:	687b      	ldr	r3, [r7, #4]
 80031f2:	681b      	ldr	r3, [r3, #0]
 80031f4:	f003 0308 	and.w	r3, r3, #8
 80031f8:	2b00      	cmp	r3, #0
 80031fa:	d036      	beq.n	800326a <HAL_RCC_OscConfig+0x376>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 80031fc:	687b      	ldr	r3, [r7, #4]
 80031fe:	695b      	ldr	r3, [r3, #20]
 8003200:	2b00      	cmp	r3, #0
 8003202:	d019      	beq.n	8003238 <HAL_RCC_OscConfig+0x344>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003204:	4b89      	ldr	r3, [pc, #548]	; (800342c <HAL_RCC_OscConfig+0x538>)
 8003206:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003208:	4a88      	ldr	r2, [pc, #544]	; (800342c <HAL_RCC_OscConfig+0x538>)
 800320a:	f043 0301 	orr.w	r3, r3, #1
 800320e:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003210:	f7fe f9cc 	bl	80015ac <HAL_GetTick>
 8003214:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8003216:	e008      	b.n	800322a <HAL_RCC_OscConfig+0x336>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003218:	f7fe f9c8 	bl	80015ac <HAL_GetTick>
 800321c:	4602      	mov	r2, r0
 800321e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003220:	1ad3      	subs	r3, r2, r3
 8003222:	2b02      	cmp	r3, #2
 8003224:	d901      	bls.n	800322a <HAL_RCC_OscConfig+0x336>
        {
          return HAL_TIMEOUT;
 8003226:	2303      	movs	r3, #3
 8003228:	e1e8      	b.n	80035fc <HAL_RCC_OscConfig+0x708>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 800322a:	4b80      	ldr	r3, [pc, #512]	; (800342c <HAL_RCC_OscConfig+0x538>)
 800322c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800322e:	f003 0302 	and.w	r3, r3, #2
 8003232:	2b00      	cmp	r3, #0
 8003234:	d0f0      	beq.n	8003218 <HAL_RCC_OscConfig+0x324>
 8003236:	e018      	b.n	800326a <HAL_RCC_OscConfig+0x376>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003238:	4b7c      	ldr	r3, [pc, #496]	; (800342c <HAL_RCC_OscConfig+0x538>)
 800323a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800323c:	4a7b      	ldr	r2, [pc, #492]	; (800342c <HAL_RCC_OscConfig+0x538>)
 800323e:	f023 0301 	bic.w	r3, r3, #1
 8003242:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003244:	f7fe f9b2 	bl	80015ac <HAL_GetTick>
 8003248:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 800324a:	e008      	b.n	800325e <HAL_RCC_OscConfig+0x36a>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800324c:	f7fe f9ae 	bl	80015ac <HAL_GetTick>
 8003250:	4602      	mov	r2, r0
 8003252:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003254:	1ad3      	subs	r3, r2, r3
 8003256:	2b02      	cmp	r3, #2
 8003258:	d901      	bls.n	800325e <HAL_RCC_OscConfig+0x36a>
        {
          return HAL_TIMEOUT;
 800325a:	2303      	movs	r3, #3
 800325c:	e1ce      	b.n	80035fc <HAL_RCC_OscConfig+0x708>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 800325e:	4b73      	ldr	r3, [pc, #460]	; (800342c <HAL_RCC_OscConfig+0x538>)
 8003260:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003262:	f003 0302 	and.w	r3, r3, #2
 8003266:	2b00      	cmp	r3, #0
 8003268:	d1f0      	bne.n	800324c <HAL_RCC_OscConfig+0x358>
      }
    }
  }

  /*------------------------------ HSI48 Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 800326a:	687b      	ldr	r3, [r7, #4]
 800326c:	681b      	ldr	r3, [r3, #0]
 800326e:	f003 0320 	and.w	r3, r3, #32
 8003272:	2b00      	cmp	r3, #0
 8003274:	d036      	beq.n	80032e4 <HAL_RCC_OscConfig+0x3f0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if((RCC_OscInitStruct->HSI48State)!= RCC_HSI48_OFF)
 8003276:	687b      	ldr	r3, [r7, #4]
 8003278:	699b      	ldr	r3, [r3, #24]
 800327a:	2b00      	cmp	r3, #0
 800327c:	d019      	beq.n	80032b2 <HAL_RCC_OscConfig+0x3be>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 800327e:	4b6b      	ldr	r3, [pc, #428]	; (800342c <HAL_RCC_OscConfig+0x538>)
 8003280:	681b      	ldr	r3, [r3, #0]
 8003282:	4a6a      	ldr	r2, [pc, #424]	; (800342c <HAL_RCC_OscConfig+0x538>)
 8003284:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8003288:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 800328a:	f7fe f98f 	bl	80015ac <HAL_GetTick>
 800328e:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8003290:	e008      	b.n	80032a4 <HAL_RCC_OscConfig+0x3b0>
      {
        if((HAL_GetTick() - tickstart ) > HSI48_TIMEOUT_VALUE)
 8003292:	f7fe f98b 	bl	80015ac <HAL_GetTick>
 8003296:	4602      	mov	r2, r0
 8003298:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800329a:	1ad3      	subs	r3, r2, r3
 800329c:	2b02      	cmp	r3, #2
 800329e:	d901      	bls.n	80032a4 <HAL_RCC_OscConfig+0x3b0>
        {
          return HAL_TIMEOUT;
 80032a0:	2303      	movs	r3, #3
 80032a2:	e1ab      	b.n	80035fc <HAL_RCC_OscConfig+0x708>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 80032a4:	4b61      	ldr	r3, [pc, #388]	; (800342c <HAL_RCC_OscConfig+0x538>)
 80032a6:	681b      	ldr	r3, [r3, #0]
 80032a8:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80032ac:	2b00      	cmp	r3, #0
 80032ae:	d0f0      	beq.n	8003292 <HAL_RCC_OscConfig+0x39e>
 80032b0:	e018      	b.n	80032e4 <HAL_RCC_OscConfig+0x3f0>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 80032b2:	4b5e      	ldr	r3, [pc, #376]	; (800342c <HAL_RCC_OscConfig+0x538>)
 80032b4:	681b      	ldr	r3, [r3, #0]
 80032b6:	4a5d      	ldr	r2, [pc, #372]	; (800342c <HAL_RCC_OscConfig+0x538>)
 80032b8:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80032bc:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 80032be:	f7fe f975 	bl	80015ac <HAL_GetTick>
 80032c2:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 80032c4:	e008      	b.n	80032d8 <HAL_RCC_OscConfig+0x3e4>
      {
        if((HAL_GetTick() - tickstart ) > HSI48_TIMEOUT_VALUE)
 80032c6:	f7fe f971 	bl	80015ac <HAL_GetTick>
 80032ca:	4602      	mov	r2, r0
 80032cc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80032ce:	1ad3      	subs	r3, r2, r3
 80032d0:	2b02      	cmp	r3, #2
 80032d2:	d901      	bls.n	80032d8 <HAL_RCC_OscConfig+0x3e4>
        {
          return HAL_TIMEOUT;
 80032d4:	2303      	movs	r3, #3
 80032d6:	e191      	b.n	80035fc <HAL_RCC_OscConfig+0x708>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 80032d8:	4b54      	ldr	r3, [pc, #336]	; (800342c <HAL_RCC_OscConfig+0x538>)
 80032da:	681b      	ldr	r3, [r3, #0]
 80032dc:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80032e0:	2b00      	cmp	r3, #0
 80032e2:	d1f0      	bne.n	80032c6 <HAL_RCC_OscConfig+0x3d2>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80032e4:	687b      	ldr	r3, [r7, #4]
 80032e6:	681b      	ldr	r3, [r3, #0]
 80032e8:	f003 0304 	and.w	r3, r3, #4
 80032ec:	2b00      	cmp	r3, #0
 80032ee:	f000 8081 	beq.w	80033f4 <HAL_RCC_OscConfig+0x500>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 80032f2:	4b4f      	ldr	r3, [pc, #316]	; (8003430 <HAL_RCC_OscConfig+0x53c>)
 80032f4:	681b      	ldr	r3, [r3, #0]
 80032f6:	4a4e      	ldr	r2, [pc, #312]	; (8003430 <HAL_RCC_OscConfig+0x53c>)
 80032f8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80032fc:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 80032fe:	f7fe f955 	bl	80015ac <HAL_GetTick>
 8003302:	6278      	str	r0, [r7, #36]	; 0x24

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8003304:	e008      	b.n	8003318 <HAL_RCC_OscConfig+0x424>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 8003306:	f7fe f951 	bl	80015ac <HAL_GetTick>
 800330a:	4602      	mov	r2, r0
 800330c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800330e:	1ad3      	subs	r3, r2, r3
 8003310:	2b64      	cmp	r3, #100	; 0x64
 8003312:	d901      	bls.n	8003318 <HAL_RCC_OscConfig+0x424>
      {
        return HAL_TIMEOUT;
 8003314:	2303      	movs	r3, #3
 8003316:	e171      	b.n	80035fc <HAL_RCC_OscConfig+0x708>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8003318:	4b45      	ldr	r3, [pc, #276]	; (8003430 <HAL_RCC_OscConfig+0x53c>)
 800331a:	681b      	ldr	r3, [r3, #0]
 800331c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003320:	2b00      	cmp	r3, #0
 8003322:	d0f0      	beq.n	8003306 <HAL_RCC_OscConfig+0x412>
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003324:	687b      	ldr	r3, [r7, #4]
 8003326:	689b      	ldr	r3, [r3, #8]
 8003328:	2b01      	cmp	r3, #1
 800332a:	d106      	bne.n	800333a <HAL_RCC_OscConfig+0x446>
 800332c:	4b3f      	ldr	r3, [pc, #252]	; (800342c <HAL_RCC_OscConfig+0x538>)
 800332e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003330:	4a3e      	ldr	r2, [pc, #248]	; (800342c <HAL_RCC_OscConfig+0x538>)
 8003332:	f043 0301 	orr.w	r3, r3, #1
 8003336:	6713      	str	r3, [r2, #112]	; 0x70
 8003338:	e02d      	b.n	8003396 <HAL_RCC_OscConfig+0x4a2>
 800333a:	687b      	ldr	r3, [r7, #4]
 800333c:	689b      	ldr	r3, [r3, #8]
 800333e:	2b00      	cmp	r3, #0
 8003340:	d10c      	bne.n	800335c <HAL_RCC_OscConfig+0x468>
 8003342:	4b3a      	ldr	r3, [pc, #232]	; (800342c <HAL_RCC_OscConfig+0x538>)
 8003344:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003346:	4a39      	ldr	r2, [pc, #228]	; (800342c <HAL_RCC_OscConfig+0x538>)
 8003348:	f023 0301 	bic.w	r3, r3, #1
 800334c:	6713      	str	r3, [r2, #112]	; 0x70
 800334e:	4b37      	ldr	r3, [pc, #220]	; (800342c <HAL_RCC_OscConfig+0x538>)
 8003350:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003352:	4a36      	ldr	r2, [pc, #216]	; (800342c <HAL_RCC_OscConfig+0x538>)
 8003354:	f023 0304 	bic.w	r3, r3, #4
 8003358:	6713      	str	r3, [r2, #112]	; 0x70
 800335a:	e01c      	b.n	8003396 <HAL_RCC_OscConfig+0x4a2>
 800335c:	687b      	ldr	r3, [r7, #4]
 800335e:	689b      	ldr	r3, [r3, #8]
 8003360:	2b05      	cmp	r3, #5
 8003362:	d10c      	bne.n	800337e <HAL_RCC_OscConfig+0x48a>
 8003364:	4b31      	ldr	r3, [pc, #196]	; (800342c <HAL_RCC_OscConfig+0x538>)
 8003366:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003368:	4a30      	ldr	r2, [pc, #192]	; (800342c <HAL_RCC_OscConfig+0x538>)
 800336a:	f043 0304 	orr.w	r3, r3, #4
 800336e:	6713      	str	r3, [r2, #112]	; 0x70
 8003370:	4b2e      	ldr	r3, [pc, #184]	; (800342c <HAL_RCC_OscConfig+0x538>)
 8003372:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003374:	4a2d      	ldr	r2, [pc, #180]	; (800342c <HAL_RCC_OscConfig+0x538>)
 8003376:	f043 0301 	orr.w	r3, r3, #1
 800337a:	6713      	str	r3, [r2, #112]	; 0x70
 800337c:	e00b      	b.n	8003396 <HAL_RCC_OscConfig+0x4a2>
 800337e:	4b2b      	ldr	r3, [pc, #172]	; (800342c <HAL_RCC_OscConfig+0x538>)
 8003380:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003382:	4a2a      	ldr	r2, [pc, #168]	; (800342c <HAL_RCC_OscConfig+0x538>)
 8003384:	f023 0301 	bic.w	r3, r3, #1
 8003388:	6713      	str	r3, [r2, #112]	; 0x70
 800338a:	4b28      	ldr	r3, [pc, #160]	; (800342c <HAL_RCC_OscConfig+0x538>)
 800338c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800338e:	4a27      	ldr	r2, [pc, #156]	; (800342c <HAL_RCC_OscConfig+0x538>)
 8003390:	f023 0304 	bic.w	r3, r3, #4
 8003394:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8003396:	687b      	ldr	r3, [r7, #4]
 8003398:	689b      	ldr	r3, [r3, #8]
 800339a:	2b00      	cmp	r3, #0
 800339c:	d015      	beq.n	80033ca <HAL_RCC_OscConfig+0x4d6>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800339e:	f7fe f905 	bl	80015ac <HAL_GetTick>
 80033a2:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80033a4:	e00a      	b.n	80033bc <HAL_RCC_OscConfig+0x4c8>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80033a6:	f7fe f901 	bl	80015ac <HAL_GetTick>
 80033aa:	4602      	mov	r2, r0
 80033ac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80033ae:	1ad3      	subs	r3, r2, r3
 80033b0:	f241 3288 	movw	r2, #5000	; 0x1388
 80033b4:	4293      	cmp	r3, r2
 80033b6:	d901      	bls.n	80033bc <HAL_RCC_OscConfig+0x4c8>
        {
          return HAL_TIMEOUT;
 80033b8:	2303      	movs	r3, #3
 80033ba:	e11f      	b.n	80035fc <HAL_RCC_OscConfig+0x708>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80033bc:	4b1b      	ldr	r3, [pc, #108]	; (800342c <HAL_RCC_OscConfig+0x538>)
 80033be:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80033c0:	f003 0302 	and.w	r3, r3, #2
 80033c4:	2b00      	cmp	r3, #0
 80033c6:	d0ee      	beq.n	80033a6 <HAL_RCC_OscConfig+0x4b2>
 80033c8:	e014      	b.n	80033f4 <HAL_RCC_OscConfig+0x500>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80033ca:	f7fe f8ef 	bl	80015ac <HAL_GetTick>
 80033ce:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is disabled */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 80033d0:	e00a      	b.n	80033e8 <HAL_RCC_OscConfig+0x4f4>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80033d2:	f7fe f8eb 	bl	80015ac <HAL_GetTick>
 80033d6:	4602      	mov	r2, r0
 80033d8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80033da:	1ad3      	subs	r3, r2, r3
 80033dc:	f241 3288 	movw	r2, #5000	; 0x1388
 80033e0:	4293      	cmp	r3, r2
 80033e2:	d901      	bls.n	80033e8 <HAL_RCC_OscConfig+0x4f4>
        {
          return HAL_TIMEOUT;
 80033e4:	2303      	movs	r3, #3
 80033e6:	e109      	b.n	80035fc <HAL_RCC_OscConfig+0x708>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 80033e8:	4b10      	ldr	r3, [pc, #64]	; (800342c <HAL_RCC_OscConfig+0x538>)
 80033ea:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80033ec:	f003 0302 	and.w	r3, r3, #2
 80033f0:	2b00      	cmp	r3, #0
 80033f2:	d1ee      	bne.n	80033d2 <HAL_RCC_OscConfig+0x4de>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80033f4:	687b      	ldr	r3, [r7, #4]
 80033f6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80033f8:	2b00      	cmp	r3, #0
 80033fa:	f000 80fe 	beq.w	80035fa <HAL_RCC_OscConfig+0x706>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL1)
 80033fe:	4b0b      	ldr	r3, [pc, #44]	; (800342c <HAL_RCC_OscConfig+0x538>)
 8003400:	691b      	ldr	r3, [r3, #16]
 8003402:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8003406:	2b18      	cmp	r3, #24
 8003408:	f000 80b9 	beq.w	800357e <HAL_RCC_OscConfig+0x68a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800340c:	687b      	ldr	r3, [r7, #4]
 800340e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003410:	2b02      	cmp	r3, #2
 8003412:	f040 809a 	bne.w	800354a <HAL_RCC_OscConfig+0x656>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
        assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003416:	4b05      	ldr	r3, [pc, #20]	; (800342c <HAL_RCC_OscConfig+0x538>)
 8003418:	681b      	ldr	r3, [r3, #0]
 800341a:	4a04      	ldr	r2, [pc, #16]	; (800342c <HAL_RCC_OscConfig+0x538>)
 800341c:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8003420:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003422:	f7fe f8c3 	bl	80015ac <HAL_GetTick>
 8003426:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8003428:	e00d      	b.n	8003446 <HAL_RCC_OscConfig+0x552>
 800342a:	bf00      	nop
 800342c:	58024400 	.word	0x58024400
 8003430:	58024800 	.word	0x58024800
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003434:	f7fe f8ba 	bl	80015ac <HAL_GetTick>
 8003438:	4602      	mov	r2, r0
 800343a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800343c:	1ad3      	subs	r3, r2, r3
 800343e:	2b02      	cmp	r3, #2
 8003440:	d901      	bls.n	8003446 <HAL_RCC_OscConfig+0x552>
          {
            return HAL_TIMEOUT;
 8003442:	2303      	movs	r3, #3
 8003444:	e0da      	b.n	80035fc <HAL_RCC_OscConfig+0x708>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8003446:	4b6f      	ldr	r3, [pc, #444]	; (8003604 <HAL_RCC_OscConfig+0x710>)
 8003448:	681b      	ldr	r3, [r3, #0]
 800344a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800344e:	2b00      	cmp	r3, #0
 8003450:	d1f0      	bne.n	8003434 <HAL_RCC_OscConfig+0x540>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8003452:	4b6c      	ldr	r3, [pc, #432]	; (8003604 <HAL_RCC_OscConfig+0x710>)
 8003454:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8003456:	4b6c      	ldr	r3, [pc, #432]	; (8003608 <HAL_RCC_OscConfig+0x714>)
 8003458:	4013      	ands	r3, r2
 800345a:	687a      	ldr	r2, [r7, #4]
 800345c:	6a91      	ldr	r1, [r2, #40]	; 0x28
 800345e:	687a      	ldr	r2, [r7, #4]
 8003460:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 8003462:	0112      	lsls	r2, r2, #4
 8003464:	430a      	orrs	r2, r1
 8003466:	4967      	ldr	r1, [pc, #412]	; (8003604 <HAL_RCC_OscConfig+0x710>)
 8003468:	4313      	orrs	r3, r2
 800346a:	628b      	str	r3, [r1, #40]	; 0x28
 800346c:	687b      	ldr	r3, [r7, #4]
 800346e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003470:	3b01      	subs	r3, #1
 8003472:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8003476:	687b      	ldr	r3, [r7, #4]
 8003478:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800347a:	3b01      	subs	r3, #1
 800347c:	025b      	lsls	r3, r3, #9
 800347e:	b29b      	uxth	r3, r3
 8003480:	431a      	orrs	r2, r3
 8003482:	687b      	ldr	r3, [r7, #4]
 8003484:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003486:	3b01      	subs	r3, #1
 8003488:	041b      	lsls	r3, r3, #16
 800348a:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 800348e:	431a      	orrs	r2, r3
 8003490:	687b      	ldr	r3, [r7, #4]
 8003492:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003494:	3b01      	subs	r3, #1
 8003496:	061b      	lsls	r3, r3, #24
 8003498:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 800349c:	4959      	ldr	r1, [pc, #356]	; (8003604 <HAL_RCC_OscConfig+0x710>)
 800349e:	4313      	orrs	r3, r2
 80034a0:	630b      	str	r3, [r1, #48]	; 0x30
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

         /* Disable PLLFRACN . */
         __HAL_RCC_PLLFRACN_DISABLE();
 80034a2:	4b58      	ldr	r3, [pc, #352]	; (8003604 <HAL_RCC_OscConfig+0x710>)
 80034a4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80034a6:	4a57      	ldr	r2, [pc, #348]	; (8003604 <HAL_RCC_OscConfig+0x710>)
 80034a8:	f023 0301 	bic.w	r3, r3, #1
 80034ac:	62d3      	str	r3, [r2, #44]	; 0x2c

         /* Configure PLL PLL1FRACN */
         __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 80034ae:	4b55      	ldr	r3, [pc, #340]	; (8003604 <HAL_RCC_OscConfig+0x710>)
 80034b0:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80034b2:	4b56      	ldr	r3, [pc, #344]	; (800360c <HAL_RCC_OscConfig+0x718>)
 80034b4:	4013      	ands	r3, r2
 80034b6:	687a      	ldr	r2, [r7, #4]
 80034b8:	6c92      	ldr	r2, [r2, #72]	; 0x48
 80034ba:	00d2      	lsls	r2, r2, #3
 80034bc:	4951      	ldr	r1, [pc, #324]	; (8003604 <HAL_RCC_OscConfig+0x710>)
 80034be:	4313      	orrs	r3, r2
 80034c0:	634b      	str	r3, [r1, #52]	; 0x34

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL_VCIRANGE(RCC_OscInitStruct->PLL.PLLRGE) ;
 80034c2:	4b50      	ldr	r3, [pc, #320]	; (8003604 <HAL_RCC_OscConfig+0x710>)
 80034c4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80034c6:	f023 020c 	bic.w	r2, r3, #12
 80034ca:	687b      	ldr	r3, [r7, #4]
 80034cc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80034ce:	494d      	ldr	r1, [pc, #308]	; (8003604 <HAL_RCC_OscConfig+0x710>)
 80034d0:	4313      	orrs	r3, r2
 80034d2:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Select PLL1 output frequency range : VCO */
        __HAL_RCC_PLL_VCORANGE(RCC_OscInitStruct->PLL.PLLVCOSEL) ;
 80034d4:	4b4b      	ldr	r3, [pc, #300]	; (8003604 <HAL_RCC_OscConfig+0x710>)
 80034d6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80034d8:	f023 0202 	bic.w	r2, r3, #2
 80034dc:	687b      	ldr	r3, [r7, #4]
 80034de:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80034e0:	4948      	ldr	r1, [pc, #288]	; (8003604 <HAL_RCC_OscConfig+0x710>)
 80034e2:	4313      	orrs	r3, r2
 80034e4:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 80034e6:	4b47      	ldr	r3, [pc, #284]	; (8003604 <HAL_RCC_OscConfig+0x710>)
 80034e8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80034ea:	4a46      	ldr	r2, [pc, #280]	; (8003604 <HAL_RCC_OscConfig+0x710>)
 80034ec:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80034f0:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1Q Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80034f2:	4b44      	ldr	r3, [pc, #272]	; (8003604 <HAL_RCC_OscConfig+0x710>)
 80034f4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80034f6:	4a43      	ldr	r2, [pc, #268]	; (8003604 <HAL_RCC_OscConfig+0x710>)
 80034f8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80034fc:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1R  Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 80034fe:	4b41      	ldr	r3, [pc, #260]	; (8003604 <HAL_RCC_OscConfig+0x710>)
 8003500:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003502:	4a40      	ldr	r2, [pc, #256]	; (8003604 <HAL_RCC_OscConfig+0x710>)
 8003504:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003508:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1FRACN . */
         __HAL_RCC_PLLFRACN_ENABLE();
 800350a:	4b3e      	ldr	r3, [pc, #248]	; (8003604 <HAL_RCC_OscConfig+0x710>)
 800350c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800350e:	4a3d      	ldr	r2, [pc, #244]	; (8003604 <HAL_RCC_OscConfig+0x710>)
 8003510:	f043 0301 	orr.w	r3, r3, #1
 8003514:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003516:	4b3b      	ldr	r3, [pc, #236]	; (8003604 <HAL_RCC_OscConfig+0x710>)
 8003518:	681b      	ldr	r3, [r3, #0]
 800351a:	4a3a      	ldr	r2, [pc, #232]	; (8003604 <HAL_RCC_OscConfig+0x710>)
 800351c:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8003520:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003522:	f7fe f843 	bl	80015ac <HAL_GetTick>
 8003526:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8003528:	e008      	b.n	800353c <HAL_RCC_OscConfig+0x648>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800352a:	f7fe f83f 	bl	80015ac <HAL_GetTick>
 800352e:	4602      	mov	r2, r0
 8003530:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003532:	1ad3      	subs	r3, r2, r3
 8003534:	2b02      	cmp	r3, #2
 8003536:	d901      	bls.n	800353c <HAL_RCC_OscConfig+0x648>
          {
            return HAL_TIMEOUT;
 8003538:	2303      	movs	r3, #3
 800353a:	e05f      	b.n	80035fc <HAL_RCC_OscConfig+0x708>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 800353c:	4b31      	ldr	r3, [pc, #196]	; (8003604 <HAL_RCC_OscConfig+0x710>)
 800353e:	681b      	ldr	r3, [r3, #0]
 8003540:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003544:	2b00      	cmp	r3, #0
 8003546:	d0f0      	beq.n	800352a <HAL_RCC_OscConfig+0x636>
 8003548:	e057      	b.n	80035fa <HAL_RCC_OscConfig+0x706>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800354a:	4b2e      	ldr	r3, [pc, #184]	; (8003604 <HAL_RCC_OscConfig+0x710>)
 800354c:	681b      	ldr	r3, [r3, #0]
 800354e:	4a2d      	ldr	r2, [pc, #180]	; (8003604 <HAL_RCC_OscConfig+0x710>)
 8003550:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8003554:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003556:	f7fe f829 	bl	80015ac <HAL_GetTick>
 800355a:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 800355c:	e008      	b.n	8003570 <HAL_RCC_OscConfig+0x67c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800355e:	f7fe f825 	bl	80015ac <HAL_GetTick>
 8003562:	4602      	mov	r2, r0
 8003564:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003566:	1ad3      	subs	r3, r2, r3
 8003568:	2b02      	cmp	r3, #2
 800356a:	d901      	bls.n	8003570 <HAL_RCC_OscConfig+0x67c>
          {
            return HAL_TIMEOUT;
 800356c:	2303      	movs	r3, #3
 800356e:	e045      	b.n	80035fc <HAL_RCC_OscConfig+0x708>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8003570:	4b24      	ldr	r3, [pc, #144]	; (8003604 <HAL_RCC_OscConfig+0x710>)
 8003572:	681b      	ldr	r3, [r3, #0]
 8003574:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003578:	2b00      	cmp	r3, #0
 800357a:	d1f0      	bne.n	800355e <HAL_RCC_OscConfig+0x66a>
 800357c:	e03d      	b.n	80035fa <HAL_RCC_OscConfig+0x706>
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLLCKSELR;
 800357e:	4b21      	ldr	r3, [pc, #132]	; (8003604 <HAL_RCC_OscConfig+0x710>)
 8003580:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003582:	613b      	str	r3, [r7, #16]
      temp2_pllckcfg = RCC->PLL1DIVR;
 8003584:	4b1f      	ldr	r3, [pc, #124]	; (8003604 <HAL_RCC_OscConfig+0x710>)
 8003586:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003588:	60fb      	str	r3, [r7, #12]
      if(((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800358a:	687b      	ldr	r3, [r7, #4]
 800358c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800358e:	2b01      	cmp	r3, #1
 8003590:	d031      	beq.n	80035f6 <HAL_RCC_OscConfig+0x702>
	 (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003592:	693b      	ldr	r3, [r7, #16]
 8003594:	f003 0203 	and.w	r2, r3, #3
 8003598:	687b      	ldr	r3, [r7, #4]
 800359a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
      if(((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800359c:	429a      	cmp	r2, r3
 800359e:	d12a      	bne.n	80035f6 <HAL_RCC_OscConfig+0x702>
         ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 80035a0:	693b      	ldr	r3, [r7, #16]
 80035a2:	091b      	lsrs	r3, r3, #4
 80035a4:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 80035a8:	687b      	ldr	r3, [r7, #4]
 80035aa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
	 (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80035ac:	429a      	cmp	r2, r3
 80035ae:	d122      	bne.n	80035f6 <HAL_RCC_OscConfig+0x702>
         (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 80035b0:	68fb      	ldr	r3, [r7, #12]
 80035b2:	f3c3 0208 	ubfx	r2, r3, #0, #9
 80035b6:	687b      	ldr	r3, [r7, #4]
 80035b8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80035ba:	3b01      	subs	r3, #1
         ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 80035bc:	429a      	cmp	r2, r3
 80035be:	d11a      	bne.n	80035f6 <HAL_RCC_OscConfig+0x702>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 80035c0:	68fb      	ldr	r3, [r7, #12]
 80035c2:	0a5b      	lsrs	r3, r3, #9
 80035c4:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 80035c8:	687b      	ldr	r3, [r7, #4]
 80035ca:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80035cc:	3b01      	subs	r3, #1
         (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 80035ce:	429a      	cmp	r2, r3
 80035d0:	d111      	bne.n	80035f6 <HAL_RCC_OscConfig+0x702>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 80035d2:	68fb      	ldr	r3, [r7, #12]
 80035d4:	0c1b      	lsrs	r3, r3, #16
 80035d6:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 80035da:	687b      	ldr	r3, [r7, #4]
 80035dc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80035de:	3b01      	subs	r3, #1
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 80035e0:	429a      	cmp	r2, r3
 80035e2:	d108      	bne.n	80035f6 <HAL_RCC_OscConfig+0x702>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_R1) >> RCC_PLL1DIVR_R1_Pos) != (RCC_OscInitStruct->PLL.PLLR - 1U)))
 80035e4:	68fb      	ldr	r3, [r7, #12]
 80035e6:	0e1b      	lsrs	r3, r3, #24
 80035e8:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 80035ec:	687b      	ldr	r3, [r7, #4]
 80035ee:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80035f0:	3b01      	subs	r3, #1
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 80035f2:	429a      	cmp	r2, r3
 80035f4:	d001      	beq.n	80035fa <HAL_RCC_OscConfig+0x706>
      {
        return HAL_ERROR;
 80035f6:	2301      	movs	r3, #1
 80035f8:	e000      	b.n	80035fc <HAL_RCC_OscConfig+0x708>
      }
    }
  }
  return HAL_OK;
 80035fa:	2300      	movs	r3, #0
}
 80035fc:	4618      	mov	r0, r3
 80035fe:	3730      	adds	r7, #48	; 0x30
 8003600:	46bd      	mov	sp, r7
 8003602:	bd80      	pop	{r7, pc}
 8003604:	58024400 	.word	0x58024400
 8003608:	fffffc0c 	.word	0xfffffc0c
 800360c:	ffff0007 	.word	0xffff0007

08003610 <HAL_RCC_ClockConfig>:
  *         D1CPRE[3:0] bits to ensure that  Domain1 core clock not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003610:	b580      	push	{r7, lr}
 8003612:	b086      	sub	sp, #24
 8003614:	af00      	add	r7, sp, #0
 8003616:	6078      	str	r0, [r7, #4]
 8003618:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef halstatus;
  uint32_t tickstart;
  uint32_t common_system_clock;

   /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800361a:	687b      	ldr	r3, [r7, #4]
 800361c:	2b00      	cmp	r3, #0
 800361e:	d101      	bne.n	8003624 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003620:	2301      	movs	r3, #1
 8003622:	e19c      	b.n	800395e <HAL_RCC_ClockConfig+0x34e>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8003624:	4b8a      	ldr	r3, [pc, #552]	; (8003850 <HAL_RCC_ClockConfig+0x240>)
 8003626:	681b      	ldr	r3, [r3, #0]
 8003628:	f003 030f 	and.w	r3, r3, #15
 800362c:	683a      	ldr	r2, [r7, #0]
 800362e:	429a      	cmp	r2, r3
 8003630:	d910      	bls.n	8003654 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003632:	4b87      	ldr	r3, [pc, #540]	; (8003850 <HAL_RCC_ClockConfig+0x240>)
 8003634:	681b      	ldr	r3, [r3, #0]
 8003636:	f023 020f 	bic.w	r2, r3, #15
 800363a:	4985      	ldr	r1, [pc, #532]	; (8003850 <HAL_RCC_ClockConfig+0x240>)
 800363c:	683b      	ldr	r3, [r7, #0]
 800363e:	4313      	orrs	r3, r2
 8003640:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003642:	4b83      	ldr	r3, [pc, #524]	; (8003850 <HAL_RCC_ClockConfig+0x240>)
 8003644:	681b      	ldr	r3, [r3, #0]
 8003646:	f003 030f 	and.w	r3, r3, #15
 800364a:	683a      	ldr	r2, [r7, #0]
 800364c:	429a      	cmp	r2, r3
 800364e:	d001      	beq.n	8003654 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8003650:	2301      	movs	r3, #1
 8003652:	e184      	b.n	800395e <HAL_RCC_ClockConfig+0x34e>

  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- D1PCLK1/CDPCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8003654:	687b      	ldr	r3, [r7, #4]
 8003656:	681b      	ldr	r3, [r3, #0]
 8003658:	f003 0304 	and.w	r3, r3, #4
 800365c:	2b00      	cmp	r3, #0
 800365e:	d010      	beq.n	8003682 <HAL_RCC_ClockConfig+0x72>
  {
#if defined (RCC_D1CFGR_D1PPRE)
    if((RCC_ClkInitStruct->APB3CLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8003660:	687b      	ldr	r3, [r7, #4]
 8003662:	691a      	ldr	r2, [r3, #16]
 8003664:	4b7b      	ldr	r3, [pc, #492]	; (8003854 <HAL_RCC_ClockConfig+0x244>)
 8003666:	699b      	ldr	r3, [r3, #24]
 8003668:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800366c:	429a      	cmp	r2, r3
 800366e:	d908      	bls.n	8003682 <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8003670:	4b78      	ldr	r3, [pc, #480]	; (8003854 <HAL_RCC_ClockConfig+0x244>)
 8003672:	699b      	ldr	r3, [r3, #24]
 8003674:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8003678:	687b      	ldr	r3, [r7, #4]
 800367a:	691b      	ldr	r3, [r3, #16]
 800367c:	4975      	ldr	r1, [pc, #468]	; (8003854 <HAL_RCC_ClockConfig+0x244>)
 800367e:	4313      	orrs	r3, r2
 8003680:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003682:	687b      	ldr	r3, [r7, #4]
 8003684:	681b      	ldr	r3, [r3, #0]
 8003686:	f003 0308 	and.w	r3, r3, #8
 800368a:	2b00      	cmp	r3, #0
 800368c:	d010      	beq.n	80036b0 <HAL_RCC_ClockConfig+0xa0>
  {
#if defined (RCC_D2CFGR_D2PPRE1)
    if((RCC_ClkInitStruct->APB1CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 800368e:	687b      	ldr	r3, [r7, #4]
 8003690:	695a      	ldr	r2, [r3, #20]
 8003692:	4b70      	ldr	r3, [pc, #448]	; (8003854 <HAL_RCC_ClockConfig+0x244>)
 8003694:	69db      	ldr	r3, [r3, #28]
 8003696:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800369a:	429a      	cmp	r2, r3
 800369c:	d908      	bls.n	80036b0 <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 800369e:	4b6d      	ldr	r3, [pc, #436]	; (8003854 <HAL_RCC_ClockConfig+0x244>)
 80036a0:	69db      	ldr	r3, [r3, #28]
 80036a2:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 80036a6:	687b      	ldr	r3, [r7, #4]
 80036a8:	695b      	ldr	r3, [r3, #20]
 80036aa:	496a      	ldr	r1, [pc, #424]	; (8003854 <HAL_RCC_ClockConfig+0x244>)
 80036ac:	4313      	orrs	r3, r2
 80036ae:	61cb      	str	r3, [r1, #28]
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
  }
#endif
    }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80036b0:	687b      	ldr	r3, [r7, #4]
 80036b2:	681b      	ldr	r3, [r3, #0]
 80036b4:	f003 0310 	and.w	r3, r3, #16
 80036b8:	2b00      	cmp	r3, #0
 80036ba:	d010      	beq.n	80036de <HAL_RCC_ClockConfig+0xce>
  {
#if defined(RCC_D2CFGR_D2PPRE2)
    if((RCC_ClkInitStruct->APB2CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 80036bc:	687b      	ldr	r3, [r7, #4]
 80036be:	699a      	ldr	r2, [r3, #24]
 80036c0:	4b64      	ldr	r3, [pc, #400]	; (8003854 <HAL_RCC_ClockConfig+0x244>)
 80036c2:	69db      	ldr	r3, [r3, #28]
 80036c4:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 80036c8:	429a      	cmp	r2, r3
 80036ca:	d908      	bls.n	80036de <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 80036cc:	4b61      	ldr	r3, [pc, #388]	; (8003854 <HAL_RCC_ClockConfig+0x244>)
 80036ce:	69db      	ldr	r3, [r3, #28]
 80036d0:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80036d4:	687b      	ldr	r3, [r7, #4]
 80036d6:	699b      	ldr	r3, [r3, #24]
 80036d8:	495e      	ldr	r1, [pc, #376]	; (8003854 <HAL_RCC_ClockConfig+0x244>)
 80036da:	4313      	orrs	r3, r2
 80036dc:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 80036de:	687b      	ldr	r3, [r7, #4]
 80036e0:	681b      	ldr	r3, [r3, #0]
 80036e2:	f003 0320 	and.w	r3, r3, #32
 80036e6:	2b00      	cmp	r3, #0
 80036e8:	d010      	beq.n	800370c <HAL_RCC_ClockConfig+0xfc>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if((RCC_ClkInitStruct->APB4CLKDivider) > (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 80036ea:	687b      	ldr	r3, [r7, #4]
 80036ec:	69da      	ldr	r2, [r3, #28]
 80036ee:	4b59      	ldr	r3, [pc, #356]	; (8003854 <HAL_RCC_ClockConfig+0x244>)
 80036f0:	6a1b      	ldr	r3, [r3, #32]
 80036f2:	f003 0370 	and.w	r3, r3, #112	; 0x70
 80036f6:	429a      	cmp	r2, r3
 80036f8:	d908      	bls.n	800370c <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider) );
 80036fa:	4b56      	ldr	r3, [pc, #344]	; (8003854 <HAL_RCC_ClockConfig+0x244>)
 80036fc:	6a1b      	ldr	r3, [r3, #32]
 80036fe:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8003702:	687b      	ldr	r3, [r7, #4]
 8003704:	69db      	ldr	r3, [r3, #28]
 8003706:	4953      	ldr	r1, [pc, #332]	; (8003854 <HAL_RCC_ClockConfig+0x244>)
 8003708:	4313      	orrs	r3, r2
 800370a:	620b      	str	r3, [r1, #32]
    }
#endif
  }

   /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800370c:	687b      	ldr	r3, [r7, #4]
 800370e:	681b      	ldr	r3, [r3, #0]
 8003710:	f003 0302 	and.w	r3, r3, #2
 8003714:	2b00      	cmp	r3, #0
 8003716:	d010      	beq.n	800373a <HAL_RCC_ClockConfig+0x12a>
  {
#if defined (RCC_D1CFGR_HPRE)
    if((RCC_ClkInitStruct->AHBCLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 8003718:	687b      	ldr	r3, [r7, #4]
 800371a:	68da      	ldr	r2, [r3, #12]
 800371c:	4b4d      	ldr	r3, [pc, #308]	; (8003854 <HAL_RCC_ClockConfig+0x244>)
 800371e:	699b      	ldr	r3, [r3, #24]
 8003720:	f003 030f 	and.w	r3, r3, #15
 8003724:	429a      	cmp	r2, r3
 8003726:	d908      	bls.n	800373a <HAL_RCC_ClockConfig+0x12a>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003728:	4b4a      	ldr	r3, [pc, #296]	; (8003854 <HAL_RCC_ClockConfig+0x244>)
 800372a:	699b      	ldr	r3, [r3, #24]
 800372c:	f023 020f 	bic.w	r2, r3, #15
 8003730:	687b      	ldr	r3, [r7, #4]
 8003732:	68db      	ldr	r3, [r3, #12]
 8003734:	4947      	ldr	r1, [pc, #284]	; (8003854 <HAL_RCC_ClockConfig+0x244>)
 8003736:	4313      	orrs	r3, r2
 8003738:	618b      	str	r3, [r1, #24]
    }
#endif
  }

    /*------------------------- SYSCLK Configuration -------------------------*/
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800373a:	687b      	ldr	r3, [r7, #4]
 800373c:	681b      	ldr	r3, [r3, #0]
 800373e:	f003 0301 	and.w	r3, r3, #1
 8003742:	2b00      	cmp	r3, #0
 8003744:	d055      	beq.n	80037f2 <HAL_RCC_ClockConfig+0x1e2>
    {
      assert_param(IS_RCC_SYSCLK(RCC_ClkInitStruct->SYSCLKDivider));
      assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
#if defined(RCC_D1CFGR_D1CPRE)
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1CPRE, RCC_ClkInitStruct->SYSCLKDivider);
 8003746:	4b43      	ldr	r3, [pc, #268]	; (8003854 <HAL_RCC_ClockConfig+0x244>)
 8003748:	699b      	ldr	r3, [r3, #24]
 800374a:	f423 6270 	bic.w	r2, r3, #3840	; 0xf00
 800374e:	687b      	ldr	r3, [r7, #4]
 8003750:	689b      	ldr	r3, [r3, #8]
 8003752:	4940      	ldr	r1, [pc, #256]	; (8003854 <HAL_RCC_ClockConfig+0x244>)
 8003754:	4313      	orrs	r3, r2
 8003756:	618b      	str	r3, [r1, #24]
#else
      MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDCPRE, RCC_ClkInitStruct->SYSCLKDivider);
#endif
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003758:	687b      	ldr	r3, [r7, #4]
 800375a:	685b      	ldr	r3, [r3, #4]
 800375c:	2b02      	cmp	r3, #2
 800375e:	d107      	bne.n	8003770 <HAL_RCC_ClockConfig+0x160>
      {
        /* Check the HSE ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8003760:	4b3c      	ldr	r3, [pc, #240]	; (8003854 <HAL_RCC_ClockConfig+0x244>)
 8003762:	681b      	ldr	r3, [r3, #0]
 8003764:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003768:	2b00      	cmp	r3, #0
 800376a:	d121      	bne.n	80037b0 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 800376c:	2301      	movs	r3, #1
 800376e:	e0f6      	b.n	800395e <HAL_RCC_ClockConfig+0x34e>
        }
      }
      /* PLL is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8003770:	687b      	ldr	r3, [r7, #4]
 8003772:	685b      	ldr	r3, [r3, #4]
 8003774:	2b03      	cmp	r3, #3
 8003776:	d107      	bne.n	8003788 <HAL_RCC_ClockConfig+0x178>
      {
        /* Check the PLL ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8003778:	4b36      	ldr	r3, [pc, #216]	; (8003854 <HAL_RCC_ClockConfig+0x244>)
 800377a:	681b      	ldr	r3, [r3, #0]
 800377c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003780:	2b00      	cmp	r3, #0
 8003782:	d115      	bne.n	80037b0 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 8003784:	2301      	movs	r3, #1
 8003786:	e0ea      	b.n	800395e <HAL_RCC_ClockConfig+0x34e>
        }
      }
      /* CSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 8003788:	687b      	ldr	r3, [r7, #4]
 800378a:	685b      	ldr	r3, [r3, #4]
 800378c:	2b01      	cmp	r3, #1
 800378e:	d107      	bne.n	80037a0 <HAL_RCC_ClockConfig+0x190>
      {
        /* Check the PLL ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8003790:	4b30      	ldr	r3, [pc, #192]	; (8003854 <HAL_RCC_ClockConfig+0x244>)
 8003792:	681b      	ldr	r3, [r3, #0]
 8003794:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003798:	2b00      	cmp	r3, #0
 800379a:	d109      	bne.n	80037b0 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 800379c:	2301      	movs	r3, #1
 800379e:	e0de      	b.n	800395e <HAL_RCC_ClockConfig+0x34e>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80037a0:	4b2c      	ldr	r3, [pc, #176]	; (8003854 <HAL_RCC_ClockConfig+0x244>)
 80037a2:	681b      	ldr	r3, [r3, #0]
 80037a4:	f003 0304 	and.w	r3, r3, #4
 80037a8:	2b00      	cmp	r3, #0
 80037aa:	d101      	bne.n	80037b0 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 80037ac:	2301      	movs	r3, #1
 80037ae:	e0d6      	b.n	800395e <HAL_RCC_ClockConfig+0x34e>
        }
      }
      MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 80037b0:	4b28      	ldr	r3, [pc, #160]	; (8003854 <HAL_RCC_ClockConfig+0x244>)
 80037b2:	691b      	ldr	r3, [r3, #16]
 80037b4:	f023 0207 	bic.w	r2, r3, #7
 80037b8:	687b      	ldr	r3, [r7, #4]
 80037ba:	685b      	ldr	r3, [r3, #4]
 80037bc:	4925      	ldr	r1, [pc, #148]	; (8003854 <HAL_RCC_ClockConfig+0x244>)
 80037be:	4313      	orrs	r3, r2
 80037c0:	610b      	str	r3, [r1, #16]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80037c2:	f7fd fef3 	bl	80015ac <HAL_GetTick>
 80037c6:	6178      	str	r0, [r7, #20]

        while (__HAL_RCC_GET_SYSCLK_SOURCE() !=  (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80037c8:	e00a      	b.n	80037e0 <HAL_RCC_ClockConfig+0x1d0>
        {
          if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 80037ca:	f7fd feef 	bl	80015ac <HAL_GetTick>
 80037ce:	4602      	mov	r2, r0
 80037d0:	697b      	ldr	r3, [r7, #20]
 80037d2:	1ad3      	subs	r3, r2, r3
 80037d4:	f241 3288 	movw	r2, #5000	; 0x1388
 80037d8:	4293      	cmp	r3, r2
 80037da:	d901      	bls.n	80037e0 <HAL_RCC_ClockConfig+0x1d0>
          {
            return HAL_TIMEOUT;
 80037dc:	2303      	movs	r3, #3
 80037de:	e0be      	b.n	800395e <HAL_RCC_ClockConfig+0x34e>
        while (__HAL_RCC_GET_SYSCLK_SOURCE() !=  (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80037e0:	4b1c      	ldr	r3, [pc, #112]	; (8003854 <HAL_RCC_ClockConfig+0x244>)
 80037e2:	691b      	ldr	r3, [r3, #16]
 80037e4:	f003 0238 	and.w	r2, r3, #56	; 0x38
 80037e8:	687b      	ldr	r3, [r7, #4]
 80037ea:	685b      	ldr	r3, [r3, #4]
 80037ec:	00db      	lsls	r3, r3, #3
 80037ee:	429a      	cmp	r2, r3
 80037f0:	d1eb      	bne.n	80037ca <HAL_RCC_ClockConfig+0x1ba>

    }

    /* Decreasing the BUS frequency divider */
   /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80037f2:	687b      	ldr	r3, [r7, #4]
 80037f4:	681b      	ldr	r3, [r3, #0]
 80037f6:	f003 0302 	and.w	r3, r3, #2
 80037fa:	2b00      	cmp	r3, #0
 80037fc:	d010      	beq.n	8003820 <HAL_RCC_ClockConfig+0x210>
  {
#if defined(RCC_D1CFGR_HPRE)
    if((RCC_ClkInitStruct->AHBCLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 80037fe:	687b      	ldr	r3, [r7, #4]
 8003800:	68da      	ldr	r2, [r3, #12]
 8003802:	4b14      	ldr	r3, [pc, #80]	; (8003854 <HAL_RCC_ClockConfig+0x244>)
 8003804:	699b      	ldr	r3, [r3, #24]
 8003806:	f003 030f 	and.w	r3, r3, #15
 800380a:	429a      	cmp	r2, r3
 800380c:	d208      	bcs.n	8003820 <HAL_RCC_ClockConfig+0x210>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800380e:	4b11      	ldr	r3, [pc, #68]	; (8003854 <HAL_RCC_ClockConfig+0x244>)
 8003810:	699b      	ldr	r3, [r3, #24]
 8003812:	f023 020f 	bic.w	r2, r3, #15
 8003816:	687b      	ldr	r3, [r7, #4]
 8003818:	68db      	ldr	r3, [r3, #12]
 800381a:	490e      	ldr	r1, [pc, #56]	; (8003854 <HAL_RCC_ClockConfig+0x244>)
 800381c:	4313      	orrs	r3, r2
 800381e:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8003820:	4b0b      	ldr	r3, [pc, #44]	; (8003850 <HAL_RCC_ClockConfig+0x240>)
 8003822:	681b      	ldr	r3, [r3, #0]
 8003824:	f003 030f 	and.w	r3, r3, #15
 8003828:	683a      	ldr	r2, [r7, #0]
 800382a:	429a      	cmp	r2, r3
 800382c:	d214      	bcs.n	8003858 <HAL_RCC_ClockConfig+0x248>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800382e:	4b08      	ldr	r3, [pc, #32]	; (8003850 <HAL_RCC_ClockConfig+0x240>)
 8003830:	681b      	ldr	r3, [r3, #0]
 8003832:	f023 020f 	bic.w	r2, r3, #15
 8003836:	4906      	ldr	r1, [pc, #24]	; (8003850 <HAL_RCC_ClockConfig+0x240>)
 8003838:	683b      	ldr	r3, [r7, #0]
 800383a:	4313      	orrs	r3, r2
 800383c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800383e:	4b04      	ldr	r3, [pc, #16]	; (8003850 <HAL_RCC_ClockConfig+0x240>)
 8003840:	681b      	ldr	r3, [r3, #0]
 8003842:	f003 030f 	and.w	r3, r3, #15
 8003846:	683a      	ldr	r2, [r7, #0]
 8003848:	429a      	cmp	r2, r3
 800384a:	d005      	beq.n	8003858 <HAL_RCC_ClockConfig+0x248>
    {
      return HAL_ERROR;
 800384c:	2301      	movs	r3, #1
 800384e:	e086      	b.n	800395e <HAL_RCC_ClockConfig+0x34e>
 8003850:	52002000 	.word	0x52002000
 8003854:	58024400 	.word	0x58024400
    }
 }

  /*-------------------------- D1PCLK1/CDPCLK Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8003858:	687b      	ldr	r3, [r7, #4]
 800385a:	681b      	ldr	r3, [r3, #0]
 800385c:	f003 0304 	and.w	r3, r3, #4
 8003860:	2b00      	cmp	r3, #0
 8003862:	d010      	beq.n	8003886 <HAL_RCC_ClockConfig+0x276>
 {
#if defined(RCC_D1CFGR_D1PPRE)
   if((RCC_ClkInitStruct->APB3CLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8003864:	687b      	ldr	r3, [r7, #4]
 8003866:	691a      	ldr	r2, [r3, #16]
 8003868:	4b3f      	ldr	r3, [pc, #252]	; (8003968 <HAL_RCC_ClockConfig+0x358>)
 800386a:	699b      	ldr	r3, [r3, #24]
 800386c:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8003870:	429a      	cmp	r2, r3
 8003872:	d208      	bcs.n	8003886 <HAL_RCC_ClockConfig+0x276>
   {
     assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
     MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8003874:	4b3c      	ldr	r3, [pc, #240]	; (8003968 <HAL_RCC_ClockConfig+0x358>)
 8003876:	699b      	ldr	r3, [r3, #24]
 8003878:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 800387c:	687b      	ldr	r3, [r7, #4]
 800387e:	691b      	ldr	r3, [r3, #16]
 8003880:	4939      	ldr	r1, [pc, #228]	; (8003968 <HAL_RCC_ClockConfig+0x358>)
 8003882:	4313      	orrs	r3, r2
 8003884:	618b      	str	r3, [r1, #24]
   }
#endif
 }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003886:	687b      	ldr	r3, [r7, #4]
 8003888:	681b      	ldr	r3, [r3, #0]
 800388a:	f003 0308 	and.w	r3, r3, #8
 800388e:	2b00      	cmp	r3, #0
 8003890:	d010      	beq.n	80038b4 <HAL_RCC_ClockConfig+0x2a4>
 {
#if defined(RCC_D2CFGR_D2PPRE1)
   if((RCC_ClkInitStruct->APB1CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 8003892:	687b      	ldr	r3, [r7, #4]
 8003894:	695a      	ldr	r2, [r3, #20]
 8003896:	4b34      	ldr	r3, [pc, #208]	; (8003968 <HAL_RCC_ClockConfig+0x358>)
 8003898:	69db      	ldr	r3, [r3, #28]
 800389a:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800389e:	429a      	cmp	r2, r3
 80038a0:	d208      	bcs.n	80038b4 <HAL_RCC_ClockConfig+0x2a4>
   {
     assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
     MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 80038a2:	4b31      	ldr	r3, [pc, #196]	; (8003968 <HAL_RCC_ClockConfig+0x358>)
 80038a4:	69db      	ldr	r3, [r3, #28]
 80038a6:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 80038aa:	687b      	ldr	r3, [r7, #4]
 80038ac:	695b      	ldr	r3, [r3, #20]
 80038ae:	492e      	ldr	r1, [pc, #184]	; (8003968 <HAL_RCC_ClockConfig+0x358>)
 80038b0:	4313      	orrs	r3, r2
 80038b2:	61cb      	str	r3, [r1, #28]
   }
#endif
 }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80038b4:	687b      	ldr	r3, [r7, #4]
 80038b6:	681b      	ldr	r3, [r3, #0]
 80038b8:	f003 0310 	and.w	r3, r3, #16
 80038bc:	2b00      	cmp	r3, #0
 80038be:	d010      	beq.n	80038e2 <HAL_RCC_ClockConfig+0x2d2>
 {
#if defined (RCC_D2CFGR_D2PPRE2)
   if((RCC_ClkInitStruct->APB2CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 80038c0:	687b      	ldr	r3, [r7, #4]
 80038c2:	699a      	ldr	r2, [r3, #24]
 80038c4:	4b28      	ldr	r3, [pc, #160]	; (8003968 <HAL_RCC_ClockConfig+0x358>)
 80038c6:	69db      	ldr	r3, [r3, #28]
 80038c8:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 80038cc:	429a      	cmp	r2, r3
 80038ce:	d208      	bcs.n	80038e2 <HAL_RCC_ClockConfig+0x2d2>
   {
     assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
     MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 80038d0:	4b25      	ldr	r3, [pc, #148]	; (8003968 <HAL_RCC_ClockConfig+0x358>)
 80038d2:	69db      	ldr	r3, [r3, #28]
 80038d4:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80038d8:	687b      	ldr	r3, [r7, #4]
 80038da:	699b      	ldr	r3, [r3, #24]
 80038dc:	4922      	ldr	r1, [pc, #136]	; (8003968 <HAL_RCC_ClockConfig+0x358>)
 80038de:	4313      	orrs	r3, r2
 80038e0:	61cb      	str	r3, [r1, #28]
   }
#endif
 }

  /*-------------------------- D3PCLK1/SRDPCLK1 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 80038e2:	687b      	ldr	r3, [r7, #4]
 80038e4:	681b      	ldr	r3, [r3, #0]
 80038e6:	f003 0320 	and.w	r3, r3, #32
 80038ea:	2b00      	cmp	r3, #0
 80038ec:	d010      	beq.n	8003910 <HAL_RCC_ClockConfig+0x300>
 {
#if defined(RCC_D3CFGR_D3PPRE)
   if((RCC_ClkInitStruct->APB4CLKDivider) < (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 80038ee:	687b      	ldr	r3, [r7, #4]
 80038f0:	69da      	ldr	r2, [r3, #28]
 80038f2:	4b1d      	ldr	r3, [pc, #116]	; (8003968 <HAL_RCC_ClockConfig+0x358>)
 80038f4:	6a1b      	ldr	r3, [r3, #32]
 80038f6:	f003 0370 	and.w	r3, r3, #112	; 0x70
 80038fa:	429a      	cmp	r2, r3
 80038fc:	d208      	bcs.n	8003910 <HAL_RCC_ClockConfig+0x300>
   {
     assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
     MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider) );
 80038fe:	4b1a      	ldr	r3, [pc, #104]	; (8003968 <HAL_RCC_ClockConfig+0x358>)
 8003900:	6a1b      	ldr	r3, [r3, #32]
 8003902:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8003906:	687b      	ldr	r3, [r7, #4]
 8003908:	69db      	ldr	r3, [r3, #28]
 800390a:	4917      	ldr	r1, [pc, #92]	; (8003968 <HAL_RCC_ClockConfig+0x358>)
 800390c:	4313      	orrs	r3, r2
 800390e:	620b      	str	r3, [r1, #32]
#endif
 }

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8003910:	f000 f834 	bl	800397c <HAL_RCC_GetSysClockFreq>
 8003914:	4602      	mov	r2, r0
 8003916:	4b14      	ldr	r3, [pc, #80]	; (8003968 <HAL_RCC_ClockConfig+0x358>)
 8003918:	699b      	ldr	r3, [r3, #24]
 800391a:	0a1b      	lsrs	r3, r3, #8
 800391c:	f003 030f 	and.w	r3, r3, #15
 8003920:	4912      	ldr	r1, [pc, #72]	; (800396c <HAL_RCC_ClockConfig+0x35c>)
 8003922:	5ccb      	ldrb	r3, [r1, r3]
 8003924:	f003 031f 	and.w	r3, r3, #31
 8003928:	fa22 f303 	lsr.w	r3, r2, r3
 800392c:	613b      	str	r3, [r7, #16]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 800392e:	4b0e      	ldr	r3, [pc, #56]	; (8003968 <HAL_RCC_ClockConfig+0x358>)
 8003930:	699b      	ldr	r3, [r3, #24]
 8003932:	f003 030f 	and.w	r3, r3, #15
 8003936:	4a0d      	ldr	r2, [pc, #52]	; (800396c <HAL_RCC_ClockConfig+0x35c>)
 8003938:	5cd3      	ldrb	r3, [r2, r3]
 800393a:	f003 031f 	and.w	r3, r3, #31
 800393e:	693a      	ldr	r2, [r7, #16]
 8003940:	fa22 f303 	lsr.w	r3, r2, r3
 8003944:	4a0a      	ldr	r2, [pc, #40]	; (8003970 <HAL_RCC_ClockConfig+0x360>)
 8003946:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8003948:	4a0a      	ldr	r2, [pc, #40]	; (8003974 <HAL_RCC_ClockConfig+0x364>)
 800394a:	693b      	ldr	r3, [r7, #16]
 800394c:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Configure the source of time base considering new system clocks settings*/
  halstatus = HAL_InitTick (uwTickPrio);
 800394e:	4b0a      	ldr	r3, [pc, #40]	; (8003978 <HAL_RCC_ClockConfig+0x368>)
 8003950:	681b      	ldr	r3, [r3, #0]
 8003952:	4618      	mov	r0, r3
 8003954:	f7fd fde0 	bl	8001518 <HAL_InitTick>
 8003958:	4603      	mov	r3, r0
 800395a:	73fb      	strb	r3, [r7, #15]

  return halstatus;
 800395c:	7bfb      	ldrb	r3, [r7, #15]
}
 800395e:	4618      	mov	r0, r3
 8003960:	3718      	adds	r7, #24
 8003962:	46bd      	mov	sp, r7
 8003964:	bd80      	pop	{r7, pc}
 8003966:	bf00      	nop
 8003968:	58024400 	.word	0x58024400
 800396c:	08008f1c 	.word	0x08008f1c
 8003970:	2000006c 	.word	0x2000006c
 8003974:	20000068 	.word	0x20000068
 8003978:	20000070 	.word	0x20000070

0800397c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800397c:	b480      	push	{r7}
 800397e:	b089      	sub	sp, #36	; 0x24
 8003980:	af00      	add	r7, sp, #0
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 8003982:	4bb3      	ldr	r3, [pc, #716]	; (8003c50 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003984:	691b      	ldr	r3, [r3, #16]
 8003986:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800398a:	2b18      	cmp	r3, #24
 800398c:	f200 8155 	bhi.w	8003c3a <HAL_RCC_GetSysClockFreq+0x2be>
 8003990:	a201      	add	r2, pc, #4	; (adr r2, 8003998 <HAL_RCC_GetSysClockFreq+0x1c>)
 8003992:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003996:	bf00      	nop
 8003998:	080039fd 	.word	0x080039fd
 800399c:	08003c3b 	.word	0x08003c3b
 80039a0:	08003c3b 	.word	0x08003c3b
 80039a4:	08003c3b 	.word	0x08003c3b
 80039a8:	08003c3b 	.word	0x08003c3b
 80039ac:	08003c3b 	.word	0x08003c3b
 80039b0:	08003c3b 	.word	0x08003c3b
 80039b4:	08003c3b 	.word	0x08003c3b
 80039b8:	08003a23 	.word	0x08003a23
 80039bc:	08003c3b 	.word	0x08003c3b
 80039c0:	08003c3b 	.word	0x08003c3b
 80039c4:	08003c3b 	.word	0x08003c3b
 80039c8:	08003c3b 	.word	0x08003c3b
 80039cc:	08003c3b 	.word	0x08003c3b
 80039d0:	08003c3b 	.word	0x08003c3b
 80039d4:	08003c3b 	.word	0x08003c3b
 80039d8:	08003a29 	.word	0x08003a29
 80039dc:	08003c3b 	.word	0x08003c3b
 80039e0:	08003c3b 	.word	0x08003c3b
 80039e4:	08003c3b 	.word	0x08003c3b
 80039e8:	08003c3b 	.word	0x08003c3b
 80039ec:	08003c3b 	.word	0x08003c3b
 80039f0:	08003c3b 	.word	0x08003c3b
 80039f4:	08003c3b 	.word	0x08003c3b
 80039f8:	08003a2f 	.word	0x08003a2f
  {
  case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */

   if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80039fc:	4b94      	ldr	r3, [pc, #592]	; (8003c50 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80039fe:	681b      	ldr	r3, [r3, #0]
 8003a00:	f003 0320 	and.w	r3, r3, #32
 8003a04:	2b00      	cmp	r3, #0
 8003a06:	d009      	beq.n	8003a1c <HAL_RCC_GetSysClockFreq+0xa0>
      {
        sysclockfreq = (uint32_t) (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8003a08:	4b91      	ldr	r3, [pc, #580]	; (8003c50 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003a0a:	681b      	ldr	r3, [r3, #0]
 8003a0c:	08db      	lsrs	r3, r3, #3
 8003a0e:	f003 0303 	and.w	r3, r3, #3
 8003a12:	4a90      	ldr	r2, [pc, #576]	; (8003c54 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8003a14:	fa22 f303 	lsr.w	r3, r2, r3
 8003a18:	61bb      	str	r3, [r7, #24]
      else
      {
        sysclockfreq = (uint32_t) HSI_VALUE;
      }

    break;
 8003a1a:	e111      	b.n	8003c40 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = (uint32_t) HSI_VALUE;
 8003a1c:	4b8d      	ldr	r3, [pc, #564]	; (8003c54 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8003a1e:	61bb      	str	r3, [r7, #24]
    break;
 8003a20:	e10e      	b.n	8003c40 <HAL_RCC_GetSysClockFreq+0x2c4>

  case RCC_CFGR_SWS_CSI:  /* CSI used as system clock  source */
    sysclockfreq = CSI_VALUE;
 8003a22:	4b8d      	ldr	r3, [pc, #564]	; (8003c58 <HAL_RCC_GetSysClockFreq+0x2dc>)
 8003a24:	61bb      	str	r3, [r7, #24]
    break;
 8003a26:	e10b      	b.n	8003c40 <HAL_RCC_GetSysClockFreq+0x2c4>

  case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    sysclockfreq = HSE_VALUE;
 8003a28:	4b8c      	ldr	r3, [pc, #560]	; (8003c5c <HAL_RCC_GetSysClockFreq+0x2e0>)
 8003a2a:	61bb      	str	r3, [r7, #24]
    break;
 8003a2c:	e108      	b.n	8003c40 <HAL_RCC_GetSysClockFreq+0x2c4>
  case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8003a2e:	4b88      	ldr	r3, [pc, #544]	; (8003c50 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003a30:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003a32:	f003 0303 	and.w	r3, r3, #3
 8003a36:	617b      	str	r3, [r7, #20]
    pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1)>> 4)  ;
 8003a38:	4b85      	ldr	r3, [pc, #532]	; (8003c50 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003a3a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003a3c:	091b      	lsrs	r3, r3, #4
 8003a3e:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8003a42:	613b      	str	r3, [r7, #16]
    pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN)>>RCC_PLLCFGR_PLL1FRACEN_Pos);
 8003a44:	4b82      	ldr	r3, [pc, #520]	; (8003c50 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003a46:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003a48:	f003 0301 	and.w	r3, r3, #1
 8003a4c:	60fb      	str	r3, [r7, #12]
    fracn1 = (float_t)(uint32_t)(pllfracen* ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1)>> 3));
 8003a4e:	4b80      	ldr	r3, [pc, #512]	; (8003c50 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003a50:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003a52:	08db      	lsrs	r3, r3, #3
 8003a54:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8003a58:	68fa      	ldr	r2, [r7, #12]
 8003a5a:	fb02 f303 	mul.w	r3, r2, r3
 8003a5e:	ee07 3a90 	vmov	s15, r3
 8003a62:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003a66:	edc7 7a02 	vstr	s15, [r7, #8]

    if (pllm != 0U)
 8003a6a:	693b      	ldr	r3, [r7, #16]
 8003a6c:	2b00      	cmp	r3, #0
 8003a6e:	f000 80e1 	beq.w	8003c34 <HAL_RCC_GetSysClockFreq+0x2b8>
 8003a72:	697b      	ldr	r3, [r7, #20]
 8003a74:	2b02      	cmp	r3, #2
 8003a76:	f000 8083 	beq.w	8003b80 <HAL_RCC_GetSysClockFreq+0x204>
 8003a7a:	697b      	ldr	r3, [r7, #20]
 8003a7c:	2b02      	cmp	r3, #2
 8003a7e:	f200 80a1 	bhi.w	8003bc4 <HAL_RCC_GetSysClockFreq+0x248>
 8003a82:	697b      	ldr	r3, [r7, #20]
 8003a84:	2b00      	cmp	r3, #0
 8003a86:	d003      	beq.n	8003a90 <HAL_RCC_GetSysClockFreq+0x114>
 8003a88:	697b      	ldr	r3, [r7, #20]
 8003a8a:	2b01      	cmp	r3, #1
 8003a8c:	d056      	beq.n	8003b3c <HAL_RCC_GetSysClockFreq+0x1c0>
 8003a8e:	e099      	b.n	8003bc4 <HAL_RCC_GetSysClockFreq+0x248>
    {
      switch (pllsource)
      {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

       if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8003a90:	4b6f      	ldr	r3, [pc, #444]	; (8003c50 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003a92:	681b      	ldr	r3, [r3, #0]
 8003a94:	f003 0320 	and.w	r3, r3, #32
 8003a98:	2b00      	cmp	r3, #0
 8003a9a:	d02d      	beq.n	8003af8 <HAL_RCC_GetSysClockFreq+0x17c>
        {
          hsivalue= (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8003a9c:	4b6c      	ldr	r3, [pc, #432]	; (8003c50 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003a9e:	681b      	ldr	r3, [r3, #0]
 8003aa0:	08db      	lsrs	r3, r3, #3
 8003aa2:	f003 0303 	and.w	r3, r3, #3
 8003aa6:	4a6b      	ldr	r2, [pc, #428]	; (8003c54 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8003aa8:	fa22 f303 	lsr.w	r3, r2, r3
 8003aac:	607b      	str	r3, [r7, #4]
          pllvco = ( (float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8003aae:	687b      	ldr	r3, [r7, #4]
 8003ab0:	ee07 3a90 	vmov	s15, r3
 8003ab4:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003ab8:	693b      	ldr	r3, [r7, #16]
 8003aba:	ee07 3a90 	vmov	s15, r3
 8003abe:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003ac2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8003ac6:	4b62      	ldr	r3, [pc, #392]	; (8003c50 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003ac8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003aca:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003ace:	ee07 3a90 	vmov	s15, r3
 8003ad2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003ad6:	ed97 6a02 	vldr	s12, [r7, #8]
 8003ada:	eddf 5a61 	vldr	s11, [pc, #388]	; 8003c60 <HAL_RCC_GetSysClockFreq+0x2e4>
 8003ade:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8003ae2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8003ae6:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8003aea:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8003aee:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003af2:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
        }
        break;
 8003af6:	e087      	b.n	8003c08 <HAL_RCC_GetSysClockFreq+0x28c>
          pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8003af8:	693b      	ldr	r3, [r7, #16]
 8003afa:	ee07 3a90 	vmov	s15, r3
 8003afe:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003b02:	eddf 6a58 	vldr	s13, [pc, #352]	; 8003c64 <HAL_RCC_GetSysClockFreq+0x2e8>
 8003b06:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8003b0a:	4b51      	ldr	r3, [pc, #324]	; (8003c50 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003b0c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003b0e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003b12:	ee07 3a90 	vmov	s15, r3
 8003b16:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003b1a:	ed97 6a02 	vldr	s12, [r7, #8]
 8003b1e:	eddf 5a50 	vldr	s11, [pc, #320]	; 8003c60 <HAL_RCC_GetSysClockFreq+0x2e4>
 8003b22:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8003b26:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8003b2a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8003b2e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8003b32:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003b36:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8003b3a:	e065      	b.n	8003c08 <HAL_RCC_GetSysClockFreq+0x28c>

      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8003b3c:	693b      	ldr	r3, [r7, #16]
 8003b3e:	ee07 3a90 	vmov	s15, r3
 8003b42:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003b46:	eddf 6a48 	vldr	s13, [pc, #288]	; 8003c68 <HAL_RCC_GetSysClockFreq+0x2ec>
 8003b4a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8003b4e:	4b40      	ldr	r3, [pc, #256]	; (8003c50 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003b50:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003b52:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003b56:	ee07 3a90 	vmov	s15, r3
 8003b5a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003b5e:	ed97 6a02 	vldr	s12, [r7, #8]
 8003b62:	eddf 5a3f 	vldr	s11, [pc, #252]	; 8003c60 <HAL_RCC_GetSysClockFreq+0x2e4>
 8003b66:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8003b6a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8003b6e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8003b72:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8003b76:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003b7a:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8003b7e:	e043      	b.n	8003c08 <HAL_RCC_GetSysClockFreq+0x28c>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8003b80:	693b      	ldr	r3, [r7, #16]
 8003b82:	ee07 3a90 	vmov	s15, r3
 8003b86:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003b8a:	eddf 6a38 	vldr	s13, [pc, #224]	; 8003c6c <HAL_RCC_GetSysClockFreq+0x2f0>
 8003b8e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8003b92:	4b2f      	ldr	r3, [pc, #188]	; (8003c50 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003b94:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003b96:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003b9a:	ee07 3a90 	vmov	s15, r3
 8003b9e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003ba2:	ed97 6a02 	vldr	s12, [r7, #8]
 8003ba6:	eddf 5a2e 	vldr	s11, [pc, #184]	; 8003c60 <HAL_RCC_GetSysClockFreq+0x2e4>
 8003baa:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8003bae:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8003bb2:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8003bb6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8003bba:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003bbe:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8003bc2:	e021      	b.n	8003c08 <HAL_RCC_GetSysClockFreq+0x28c>

      default:
        pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8003bc4:	693b      	ldr	r3, [r7, #16]
 8003bc6:	ee07 3a90 	vmov	s15, r3
 8003bca:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003bce:	eddf 6a26 	vldr	s13, [pc, #152]	; 8003c68 <HAL_RCC_GetSysClockFreq+0x2ec>
 8003bd2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8003bd6:	4b1e      	ldr	r3, [pc, #120]	; (8003c50 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003bd8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003bda:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003bde:	ee07 3a90 	vmov	s15, r3
 8003be2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003be6:	ed97 6a02 	vldr	s12, [r7, #8]
 8003bea:	eddf 5a1d 	vldr	s11, [pc, #116]	; 8003c60 <HAL_RCC_GetSysClockFreq+0x2e4>
 8003bee:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8003bf2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8003bf6:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8003bfa:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8003bfe:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003c02:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8003c06:	bf00      	nop
      }
      pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >>9) + 1U ) ;
 8003c08:	4b11      	ldr	r3, [pc, #68]	; (8003c50 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003c0a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003c0c:	0a5b      	lsrs	r3, r3, #9
 8003c0e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8003c12:	3301      	adds	r3, #1
 8003c14:	603b      	str	r3, [r7, #0]
      sysclockfreq =  (uint32_t)(float_t)(pllvco/(float_t)pllp);
 8003c16:	683b      	ldr	r3, [r7, #0]
 8003c18:	ee07 3a90 	vmov	s15, r3
 8003c1c:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8003c20:	edd7 6a07 	vldr	s13, [r7, #28]
 8003c24:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8003c28:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8003c2c:	ee17 3a90 	vmov	r3, s15
 8003c30:	61bb      	str	r3, [r7, #24]
    }
    else
    {
      sysclockfreq = 0U;
    }
    break;
 8003c32:	e005      	b.n	8003c40 <HAL_RCC_GetSysClockFreq+0x2c4>
      sysclockfreq = 0U;
 8003c34:	2300      	movs	r3, #0
 8003c36:	61bb      	str	r3, [r7, #24]
    break;
 8003c38:	e002      	b.n	8003c40 <HAL_RCC_GetSysClockFreq+0x2c4>

  default:
    sysclockfreq = CSI_VALUE;
 8003c3a:	4b07      	ldr	r3, [pc, #28]	; (8003c58 <HAL_RCC_GetSysClockFreq+0x2dc>)
 8003c3c:	61bb      	str	r3, [r7, #24]
    break;
 8003c3e:	bf00      	nop
  }

  return sysclockfreq;
 8003c40:	69bb      	ldr	r3, [r7, #24]
}
 8003c42:	4618      	mov	r0, r3
 8003c44:	3724      	adds	r7, #36	; 0x24
 8003c46:	46bd      	mov	sp, r7
 8003c48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c4c:	4770      	bx	lr
 8003c4e:	bf00      	nop
 8003c50:	58024400 	.word	0x58024400
 8003c54:	03d09000 	.word	0x03d09000
 8003c58:	003d0900 	.word	0x003d0900
 8003c5c:	007a1200 	.word	0x007a1200
 8003c60:	46000000 	.word	0x46000000
 8003c64:	4c742400 	.word	0x4c742400
 8003c68:	4a742400 	.word	0x4a742400
 8003c6c:	4af42400 	.word	0x4af42400

08003c70 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemD2Clock CMSIS variable is used to store System domain2 Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003c70:	b580      	push	{r7, lr}
 8003c72:	b082      	sub	sp, #8
 8003c74:	af00      	add	r7, sp, #0
uint32_t common_system_clock;

#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 8003c76:	f7ff fe81 	bl	800397c <HAL_RCC_GetSysClockFreq>
 8003c7a:	4602      	mov	r2, r0
 8003c7c:	4b10      	ldr	r3, [pc, #64]	; (8003cc0 <HAL_RCC_GetHCLKFreq+0x50>)
 8003c7e:	699b      	ldr	r3, [r3, #24]
 8003c80:	0a1b      	lsrs	r3, r3, #8
 8003c82:	f003 030f 	and.w	r3, r3, #15
 8003c86:	490f      	ldr	r1, [pc, #60]	; (8003cc4 <HAL_RCC_GetHCLKFreq+0x54>)
 8003c88:	5ccb      	ldrb	r3, [r1, r3]
 8003c8a:	f003 031f 	and.w	r3, r3, #31
 8003c8e:	fa22 f303 	lsr.w	r3, r2, r3
 8003c92:	607b      	str	r3, [r7, #4]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos] & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8003c94:	4b0a      	ldr	r3, [pc, #40]	; (8003cc0 <HAL_RCC_GetHCLKFreq+0x50>)
 8003c96:	699b      	ldr	r3, [r3, #24]
 8003c98:	f003 030f 	and.w	r3, r3, #15
 8003c9c:	4a09      	ldr	r2, [pc, #36]	; (8003cc4 <HAL_RCC_GetHCLKFreq+0x54>)
 8003c9e:	5cd3      	ldrb	r3, [r2, r3]
 8003ca0:	f003 031f 	and.w	r3, r3, #31
 8003ca4:	687a      	ldr	r2, [r7, #4]
 8003ca6:	fa22 f303 	lsr.w	r3, r2, r3
 8003caa:	4a07      	ldr	r2, [pc, #28]	; (8003cc8 <HAL_RCC_GetHCLKFreq+0x58>)
 8003cac:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8003cae:	4a07      	ldr	r2, [pc, #28]	; (8003ccc <HAL_RCC_GetHCLKFreq+0x5c>)
 8003cb0:	687b      	ldr	r3, [r7, #4]
 8003cb2:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  return SystemD2Clock;
 8003cb4:	4b04      	ldr	r3, [pc, #16]	; (8003cc8 <HAL_RCC_GetHCLKFreq+0x58>)
 8003cb6:	681b      	ldr	r3, [r3, #0]
}
 8003cb8:	4618      	mov	r0, r3
 8003cba:	3708      	adds	r7, #8
 8003cbc:	46bd      	mov	sp, r7
 8003cbe:	bd80      	pop	{r7, pc}
 8003cc0:	58024400 	.word	0x58024400
 8003cc4:	08008f1c 	.word	0x08008f1c
 8003cc8:	2000006c 	.word	0x2000006c
 8003ccc:	20000068 	.word	0x20000068

08003cd0 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003cd0:	b580      	push	{r7, lr}
 8003cd2:	af00      	add	r7, sp, #0
#if defined (RCC_D2CFGR_D2PPRE1)
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1)>> RCC_D2CFGR_D2PPRE1_Pos]) & 0x1FU));
 8003cd4:	f7ff ffcc 	bl	8003c70 <HAL_RCC_GetHCLKFreq>
 8003cd8:	4602      	mov	r2, r0
 8003cda:	4b06      	ldr	r3, [pc, #24]	; (8003cf4 <HAL_RCC_GetPCLK1Freq+0x24>)
 8003cdc:	69db      	ldr	r3, [r3, #28]
 8003cde:	091b      	lsrs	r3, r3, #4
 8003ce0:	f003 0307 	and.w	r3, r3, #7
 8003ce4:	4904      	ldr	r1, [pc, #16]	; (8003cf8 <HAL_RCC_GetPCLK1Freq+0x28>)
 8003ce6:	5ccb      	ldrb	r3, [r1, r3]
 8003ce8:	f003 031f 	and.w	r3, r3, #31
 8003cec:	fa22 f303 	lsr.w	r3, r2, r3
#else
 /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1)>> RCC_CDCFGR2_CDPPRE1_Pos]) & 0x1FU));
#endif
}
 8003cf0:	4618      	mov	r0, r3
 8003cf2:	bd80      	pop	{r7, pc}
 8003cf4:	58024400 	.word	0x58024400
 8003cf8:	08008f1c 	.word	0x08008f1c

08003cfc <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003cfc:	b580      	push	{r7, lr}
 8003cfe:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
#if defined(RCC_D2CFGR_D2PPRE2)
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2)>> RCC_D2CFGR_D2PPRE2_Pos]) & 0x1FU));
 8003d00:	f7ff ffb6 	bl	8003c70 <HAL_RCC_GetHCLKFreq>
 8003d04:	4602      	mov	r2, r0
 8003d06:	4b06      	ldr	r3, [pc, #24]	; (8003d20 <HAL_RCC_GetPCLK2Freq+0x24>)
 8003d08:	69db      	ldr	r3, [r3, #28]
 8003d0a:	0a1b      	lsrs	r3, r3, #8
 8003d0c:	f003 0307 	and.w	r3, r3, #7
 8003d10:	4904      	ldr	r1, [pc, #16]	; (8003d24 <HAL_RCC_GetPCLK2Freq+0x28>)
 8003d12:	5ccb      	ldrb	r3, [r1, r3]
 8003d14:	f003 031f 	and.w	r3, r3, #31
 8003d18:	fa22 f303 	lsr.w	r3, r2, r3
#else
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2)>> RCC_CDCFGR2_CDPPRE2_Pos]) & 0x1FU));
#endif
}
 8003d1c:	4618      	mov	r0, r3
 8003d1e:	bd80      	pop	{r7, pc}
 8003d20:	58024400 	.word	0x58024400
 8003d24:	08008f1c 	.word	0x08008f1c

08003d28 <HAL_RCCEx_PeriphCLKConfig>:
  * (*) : Available on some STM32H7 lines only.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8003d28:	b580      	push	{r7, lr}
 8003d2a:	b086      	sub	sp, #24
 8003d2c:	af00      	add	r7, sp, #0
 8003d2e:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8003d30:	2300      	movs	r3, #0
 8003d32:	75fb      	strb	r3, [r7, #23]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8003d34:	2300      	movs	r3, #0
 8003d36:	75bb      	strb	r3, [r7, #22]

  /*---------------------------- SPDIFRX configuration -------------------------------*/

  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8003d38:	687b      	ldr	r3, [r7, #4]
 8003d3a:	681b      	ldr	r3, [r3, #0]
 8003d3c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8003d40:	2b00      	cmp	r3, #0
 8003d42:	d03f      	beq.n	8003dc4 <HAL_RCCEx_PeriphCLKConfig+0x9c>
  {

    switch(PeriphClkInit->SpdifrxClockSelection)
 8003d44:	687b      	ldr	r3, [r7, #4]
 8003d46:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003d48:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8003d4c:	d02a      	beq.n	8003da4 <HAL_RCCEx_PeriphCLKConfig+0x7c>
 8003d4e:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8003d52:	d824      	bhi.n	8003d9e <HAL_RCCEx_PeriphCLKConfig+0x76>
 8003d54:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8003d58:	d018      	beq.n	8003d8c <HAL_RCCEx_PeriphCLKConfig+0x64>
 8003d5a:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8003d5e:	d81e      	bhi.n	8003d9e <HAL_RCCEx_PeriphCLKConfig+0x76>
 8003d60:	2b00      	cmp	r3, #0
 8003d62:	d003      	beq.n	8003d6c <HAL_RCCEx_PeriphCLKConfig+0x44>
 8003d64:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8003d68:	d007      	beq.n	8003d7a <HAL_RCCEx_PeriphCLKConfig+0x52>
 8003d6a:	e018      	b.n	8003d9e <HAL_RCCEx_PeriphCLKConfig+0x76>
    {
    case RCC_SPDIFRXCLKSOURCE_PLL:      /* PLL is used as clock source for SPDIFRX*/
      /* Enable PLL1Q Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003d6c:	4bab      	ldr	r3, [pc, #684]	; (800401c <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8003d6e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003d70:	4aaa      	ldr	r2, [pc, #680]	; (800401c <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8003d72:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003d76:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 8003d78:	e015      	b.n	8003da6 <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SPDIFRXCLKSOURCE_PLL2: /* PLL2 is used as clock source for SPDIFRX*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 8003d7a:	687b      	ldr	r3, [r7, #4]
 8003d7c:	3304      	adds	r3, #4
 8003d7e:	2102      	movs	r1, #2
 8003d80:	4618      	mov	r0, r3
 8003d82:	f001 f989 	bl	8005098 <RCCEx_PLL2_Config>
 8003d86:	4603      	mov	r3, r0
 8003d88:	75fb      	strb	r3, [r7, #23]

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 8003d8a:	e00c      	b.n	8003da6 <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SPDIFRXCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPDIFRX*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8003d8c:	687b      	ldr	r3, [r7, #4]
 8003d8e:	3324      	adds	r3, #36	; 0x24
 8003d90:	2102      	movs	r1, #2
 8003d92:	4618      	mov	r0, r3
 8003d94:	f001 fa32 	bl	80051fc <RCCEx_PLL3_Config>
 8003d98:	4603      	mov	r3, r0
 8003d9a:	75fb      	strb	r3, [r7, #23]

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 8003d9c:	e003      	b.n	8003da6 <HAL_RCCEx_PeriphCLKConfig+0x7e>
      /* Internal OSC clock is used as source of SPDIFRX clock*/
      /* SPDIFRX clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8003d9e:	2301      	movs	r3, #1
 8003da0:	75fb      	strb	r3, [r7, #23]
      break;
 8003da2:	e000      	b.n	8003da6 <HAL_RCCEx_PeriphCLKConfig+0x7e>
      break;
 8003da4:	bf00      	nop
    }

    if(ret == HAL_OK)
 8003da6:	7dfb      	ldrb	r3, [r7, #23]
 8003da8:	2b00      	cmp	r3, #0
 8003daa:	d109      	bne.n	8003dc0 <HAL_RCCEx_PeriphCLKConfig+0x98>
    {
      /* Set the source of SPDIFRX clock*/
      __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifrxClockSelection);
 8003dac:	4b9b      	ldr	r3, [pc, #620]	; (800401c <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8003dae:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003db0:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8003db4:	687b      	ldr	r3, [r7, #4]
 8003db6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003db8:	4998      	ldr	r1, [pc, #608]	; (800401c <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8003dba:	4313      	orrs	r3, r2
 8003dbc:	650b      	str	r3, [r1, #80]	; 0x50
 8003dbe:	e001      	b.n	8003dc4 <HAL_RCCEx_PeriphCLKConfig+0x9c>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003dc0:	7dfb      	ldrb	r3, [r7, #23]
 8003dc2:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SAI1 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 8003dc4:	687b      	ldr	r3, [r7, #4]
 8003dc6:	681b      	ldr	r3, [r3, #0]
 8003dc8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003dcc:	2b00      	cmp	r3, #0
 8003dce:	d03d      	beq.n	8003e4c <HAL_RCCEx_PeriphCLKConfig+0x124>
  {
    switch(PeriphClkInit->Sai1ClockSelection)
 8003dd0:	687b      	ldr	r3, [r7, #4]
 8003dd2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003dd4:	2b04      	cmp	r3, #4
 8003dd6:	d826      	bhi.n	8003e26 <HAL_RCCEx_PeriphCLKConfig+0xfe>
 8003dd8:	a201      	add	r2, pc, #4	; (adr r2, 8003de0 <HAL_RCCEx_PeriphCLKConfig+0xb8>)
 8003dda:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003dde:	bf00      	nop
 8003de0:	08003df5 	.word	0x08003df5
 8003de4:	08003e03 	.word	0x08003e03
 8003de8:	08003e15 	.word	0x08003e15
 8003dec:	08003e2d 	.word	0x08003e2d
 8003df0:	08003e2d 	.word	0x08003e2d
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003df4:	4b89      	ldr	r3, [pc, #548]	; (800401c <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8003df6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003df8:	4a88      	ldr	r2, [pc, #544]	; (800401c <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8003dfa:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003dfe:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8003e00:	e015      	b.n	8003e2e <HAL_RCCEx_PeriphCLKConfig+0x106>

    case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI1*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8003e02:	687b      	ldr	r3, [r7, #4]
 8003e04:	3304      	adds	r3, #4
 8003e06:	2100      	movs	r1, #0
 8003e08:	4618      	mov	r0, r3
 8003e0a:	f001 f945 	bl	8005098 <RCCEx_PLL2_Config>
 8003e0e:	4603      	mov	r3, r0
 8003e10:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8003e12:	e00c      	b.n	8003e2e <HAL_RCCEx_PeriphCLKConfig+0x106>

    case RCC_SAI1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI1*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 8003e14:	687b      	ldr	r3, [r7, #4]
 8003e16:	3324      	adds	r3, #36	; 0x24
 8003e18:	2100      	movs	r1, #0
 8003e1a:	4618      	mov	r0, r3
 8003e1c:	f001 f9ee 	bl	80051fc <RCCEx_PLL3_Config>
 8003e20:	4603      	mov	r3, r0
 8003e22:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8003e24:	e003      	b.n	8003e2e <HAL_RCCEx_PeriphCLKConfig+0x106>
      /* HSI, HSE, or CSI oscillator is used as source of SAI1 clock */
      /* SAI1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8003e26:	2301      	movs	r3, #1
 8003e28:	75fb      	strb	r3, [r7, #23]
      break;
 8003e2a:	e000      	b.n	8003e2e <HAL_RCCEx_PeriphCLKConfig+0x106>
      break;
 8003e2c:	bf00      	nop
    }

    if(ret == HAL_OK)
 8003e2e:	7dfb      	ldrb	r3, [r7, #23]
 8003e30:	2b00      	cmp	r3, #0
 8003e32:	d109      	bne.n	8003e48 <HAL_RCCEx_PeriphCLKConfig+0x120>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8003e34:	4b79      	ldr	r3, [pc, #484]	; (800401c <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8003e36:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003e38:	f023 0207 	bic.w	r2, r3, #7
 8003e3c:	687b      	ldr	r3, [r7, #4]
 8003e3e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003e40:	4976      	ldr	r1, [pc, #472]	; (800401c <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8003e42:	4313      	orrs	r3, r2
 8003e44:	650b      	str	r3, [r1, #80]	; 0x50
 8003e46:	e001      	b.n	8003e4c <HAL_RCCEx_PeriphCLKConfig+0x124>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003e48:	7dfb      	ldrb	r3, [r7, #23]
 8003e4a:	75bb      	strb	r3, [r7, #22]
  }
#endif  /*SAI2B*/

#if defined(SAI4)
  /*---------------------------- SAI4A configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4A) == RCC_PERIPHCLK_SAI4A)
 8003e4c:	687b      	ldr	r3, [r7, #4]
 8003e4e:	681b      	ldr	r3, [r3, #0]
 8003e50:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003e54:	2b00      	cmp	r3, #0
 8003e56:	d051      	beq.n	8003efc <HAL_RCCEx_PeriphCLKConfig+0x1d4>
  {
    switch(PeriphClkInit->Sai4AClockSelection)
 8003e58:	687b      	ldr	r3, [r7, #4]
 8003e5a:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 8003e5e:	f5b3 0f20 	cmp.w	r3, #10485760	; 0xa00000
 8003e62:	d036      	beq.n	8003ed2 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
 8003e64:	f5b3 0f20 	cmp.w	r3, #10485760	; 0xa00000
 8003e68:	d830      	bhi.n	8003ecc <HAL_RCCEx_PeriphCLKConfig+0x1a4>
 8003e6a:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8003e6e:	d032      	beq.n	8003ed6 <HAL_RCCEx_PeriphCLKConfig+0x1ae>
 8003e70:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8003e74:	d82a      	bhi.n	8003ecc <HAL_RCCEx_PeriphCLKConfig+0x1a4>
 8003e76:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 8003e7a:	d02e      	beq.n	8003eda <HAL_RCCEx_PeriphCLKConfig+0x1b2>
 8003e7c:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 8003e80:	d824      	bhi.n	8003ecc <HAL_RCCEx_PeriphCLKConfig+0x1a4>
 8003e82:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003e86:	d018      	beq.n	8003eba <HAL_RCCEx_PeriphCLKConfig+0x192>
 8003e88:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003e8c:	d81e      	bhi.n	8003ecc <HAL_RCCEx_PeriphCLKConfig+0x1a4>
 8003e8e:	2b00      	cmp	r3, #0
 8003e90:	d003      	beq.n	8003e9a <HAL_RCCEx_PeriphCLKConfig+0x172>
 8003e92:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8003e96:	d007      	beq.n	8003ea8 <HAL_RCCEx_PeriphCLKConfig+0x180>
 8003e98:	e018      	b.n	8003ecc <HAL_RCCEx_PeriphCLKConfig+0x1a4>
    {
    case RCC_SAI4ACLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003e9a:	4b60      	ldr	r3, [pc, #384]	; (800401c <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8003e9c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003e9e:	4a5f      	ldr	r2, [pc, #380]	; (800401c <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8003ea0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003ea4:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8003ea6:	e019      	b.n	8003edc <HAL_RCCEx_PeriphCLKConfig+0x1b4>

    case RCC_SAI4ACLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8003ea8:	687b      	ldr	r3, [r7, #4]
 8003eaa:	3304      	adds	r3, #4
 8003eac:	2100      	movs	r1, #0
 8003eae:	4618      	mov	r0, r3
 8003eb0:	f001 f8f2 	bl	8005098 <RCCEx_PLL2_Config>
 8003eb4:	4603      	mov	r3, r0
 8003eb6:	75fb      	strb	r3, [r7, #23]

      /* SAI2 clock source configuration done later after clock selection check */
      break;
 8003eb8:	e010      	b.n	8003edc <HAL_RCCEx_PeriphCLKConfig+0x1b4>

    case RCC_SAI4ACLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 8003eba:	687b      	ldr	r3, [r7, #4]
 8003ebc:	3324      	adds	r3, #36	; 0x24
 8003ebe:	2100      	movs	r1, #0
 8003ec0:	4618      	mov	r0, r3
 8003ec2:	f001 f99b 	bl	80051fc <RCCEx_PLL3_Config>
 8003ec6:	4603      	mov	r3, r0
 8003ec8:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8003eca:	e007      	b.n	8003edc <HAL_RCCEx_PeriphCLKConfig+0x1b4>
      /* SAI4A clock source configuration done later after clock selection check */
      break;
#endif /* RCC_VER_3_0 */

    default:
      ret = HAL_ERROR;
 8003ecc:	2301      	movs	r3, #1
 8003ece:	75fb      	strb	r3, [r7, #23]
      break;
 8003ed0:	e004      	b.n	8003edc <HAL_RCCEx_PeriphCLKConfig+0x1b4>
      break;
 8003ed2:	bf00      	nop
 8003ed4:	e002      	b.n	8003edc <HAL_RCCEx_PeriphCLKConfig+0x1b4>
      break;
 8003ed6:	bf00      	nop
 8003ed8:	e000      	b.n	8003edc <HAL_RCCEx_PeriphCLKConfig+0x1b4>
      break;
 8003eda:	bf00      	nop
    }

    if(ret == HAL_OK)
 8003edc:	7dfb      	ldrb	r3, [r7, #23]
 8003ede:	2b00      	cmp	r3, #0
 8003ee0:	d10a      	bne.n	8003ef8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>
    {
      /* Set the source of SAI4A clock*/
      __HAL_RCC_SAI4A_CONFIG(PeriphClkInit->Sai4AClockSelection);
 8003ee2:	4b4e      	ldr	r3, [pc, #312]	; (800401c <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8003ee4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003ee6:	f423 0260 	bic.w	r2, r3, #14680064	; 0xe00000
 8003eea:	687b      	ldr	r3, [r7, #4]
 8003eec:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 8003ef0:	494a      	ldr	r1, [pc, #296]	; (800401c <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8003ef2:	4313      	orrs	r3, r2
 8003ef4:	658b      	str	r3, [r1, #88]	; 0x58
 8003ef6:	e001      	b.n	8003efc <HAL_RCCEx_PeriphCLKConfig+0x1d4>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003ef8:	7dfb      	ldrb	r3, [r7, #23]
 8003efa:	75bb      	strb	r3, [r7, #22]
    }
  }
  /*---------------------------- SAI4B configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4B) == RCC_PERIPHCLK_SAI4B)
 8003efc:	687b      	ldr	r3, [r7, #4]
 8003efe:	681b      	ldr	r3, [r3, #0]
 8003f00:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003f04:	2b00      	cmp	r3, #0
 8003f06:	d051      	beq.n	8003fac <HAL_RCCEx_PeriphCLKConfig+0x284>
  {
    switch(PeriphClkInit->Sai4BClockSelection)
 8003f08:	687b      	ldr	r3, [r7, #4]
 8003f0a:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8003f0e:	f1b3 6fa0 	cmp.w	r3, #83886080	; 0x5000000
 8003f12:	d036      	beq.n	8003f82 <HAL_RCCEx_PeriphCLKConfig+0x25a>
 8003f14:	f1b3 6fa0 	cmp.w	r3, #83886080	; 0x5000000
 8003f18:	d830      	bhi.n	8003f7c <HAL_RCCEx_PeriphCLKConfig+0x254>
 8003f1a:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8003f1e:	d032      	beq.n	8003f86 <HAL_RCCEx_PeriphCLKConfig+0x25e>
 8003f20:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8003f24:	d82a      	bhi.n	8003f7c <HAL_RCCEx_PeriphCLKConfig+0x254>
 8003f26:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8003f2a:	d02e      	beq.n	8003f8a <HAL_RCCEx_PeriphCLKConfig+0x262>
 8003f2c:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8003f30:	d824      	bhi.n	8003f7c <HAL_RCCEx_PeriphCLKConfig+0x254>
 8003f32:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8003f36:	d018      	beq.n	8003f6a <HAL_RCCEx_PeriphCLKConfig+0x242>
 8003f38:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8003f3c:	d81e      	bhi.n	8003f7c <HAL_RCCEx_PeriphCLKConfig+0x254>
 8003f3e:	2b00      	cmp	r3, #0
 8003f40:	d003      	beq.n	8003f4a <HAL_RCCEx_PeriphCLKConfig+0x222>
 8003f42:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8003f46:	d007      	beq.n	8003f58 <HAL_RCCEx_PeriphCLKConfig+0x230>
 8003f48:	e018      	b.n	8003f7c <HAL_RCCEx_PeriphCLKConfig+0x254>
    {
    case RCC_SAI4BCLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003f4a:	4b34      	ldr	r3, [pc, #208]	; (800401c <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8003f4c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003f4e:	4a33      	ldr	r2, [pc, #204]	; (800401c <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8003f50:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003f54:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8003f56:	e019      	b.n	8003f8c <HAL_RCCEx_PeriphCLKConfig+0x264>

    case RCC_SAI4BCLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8003f58:	687b      	ldr	r3, [r7, #4]
 8003f5a:	3304      	adds	r3, #4
 8003f5c:	2100      	movs	r1, #0
 8003f5e:	4618      	mov	r0, r3
 8003f60:	f001 f89a 	bl	8005098 <RCCEx_PLL2_Config>
 8003f64:	4603      	mov	r3, r0
 8003f66:	75fb      	strb	r3, [r7, #23]

      /* SAI2 clock source configuration done later after clock selection check */
      break;
 8003f68:	e010      	b.n	8003f8c <HAL_RCCEx_PeriphCLKConfig+0x264>

    case RCC_SAI4BCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8003f6a:	687b      	ldr	r3, [r7, #4]
 8003f6c:	3324      	adds	r3, #36	; 0x24
 8003f6e:	2100      	movs	r1, #0
 8003f70:	4618      	mov	r0, r3
 8003f72:	f001 f943 	bl	80051fc <RCCEx_PLL3_Config>
 8003f76:	4603      	mov	r3, r0
 8003f78:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8003f7a:	e007      	b.n	8003f8c <HAL_RCCEx_PeriphCLKConfig+0x264>
      /* SAI4B clock source configuration done later after clock selection check */
      break;
#endif /* RCC_VER_3_0 */

    default:
      ret = HAL_ERROR;
 8003f7c:	2301      	movs	r3, #1
 8003f7e:	75fb      	strb	r3, [r7, #23]
      break;
 8003f80:	e004      	b.n	8003f8c <HAL_RCCEx_PeriphCLKConfig+0x264>
      break;
 8003f82:	bf00      	nop
 8003f84:	e002      	b.n	8003f8c <HAL_RCCEx_PeriphCLKConfig+0x264>
      break;
 8003f86:	bf00      	nop
 8003f88:	e000      	b.n	8003f8c <HAL_RCCEx_PeriphCLKConfig+0x264>
      break;
 8003f8a:	bf00      	nop
    }

    if(ret == HAL_OK)
 8003f8c:	7dfb      	ldrb	r3, [r7, #23]
 8003f8e:	2b00      	cmp	r3, #0
 8003f90:	d10a      	bne.n	8003fa8 <HAL_RCCEx_PeriphCLKConfig+0x280>
    {
      /* Set the source of SAI4B clock*/
      __HAL_RCC_SAI4B_CONFIG(PeriphClkInit->Sai4BClockSelection);
 8003f92:	4b22      	ldr	r3, [pc, #136]	; (800401c <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8003f94:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003f96:	f023 62e0 	bic.w	r2, r3, #117440512	; 0x7000000
 8003f9a:	687b      	ldr	r3, [r7, #4]
 8003f9c:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8003fa0:	491e      	ldr	r1, [pc, #120]	; (800401c <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8003fa2:	4313      	orrs	r3, r2
 8003fa4:	658b      	str	r3, [r1, #88]	; 0x58
 8003fa6:	e001      	b.n	8003fac <HAL_RCCEx_PeriphCLKConfig+0x284>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003fa8:	7dfb      	ldrb	r3, [r7, #23]
 8003faa:	75bb      	strb	r3, [r7, #22]
  }
#endif  /*QUADSPI*/

#if defined(OCTOSPI1) || defined(OCTOSPI2)
  /*---------------------------- OCTOSPI configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_OSPI) == RCC_PERIPHCLK_OSPI)
 8003fac:	687b      	ldr	r3, [r7, #4]
 8003fae:	681b      	ldr	r3, [r3, #0]
 8003fb0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003fb4:	2b00      	cmp	r3, #0
 8003fb6:	d035      	beq.n	8004024 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
  {
    switch(PeriphClkInit->OspiClockSelection)
 8003fb8:	687b      	ldr	r3, [r7, #4]
 8003fba:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003fbc:	2b30      	cmp	r3, #48	; 0x30
 8003fbe:	d01c      	beq.n	8003ffa <HAL_RCCEx_PeriphCLKConfig+0x2d2>
 8003fc0:	2b30      	cmp	r3, #48	; 0x30
 8003fc2:	d817      	bhi.n	8003ff4 <HAL_RCCEx_PeriphCLKConfig+0x2cc>
 8003fc4:	2b20      	cmp	r3, #32
 8003fc6:	d00c      	beq.n	8003fe2 <HAL_RCCEx_PeriphCLKConfig+0x2ba>
 8003fc8:	2b20      	cmp	r3, #32
 8003fca:	d813      	bhi.n	8003ff4 <HAL_RCCEx_PeriphCLKConfig+0x2cc>
 8003fcc:	2b00      	cmp	r3, #0
 8003fce:	d016      	beq.n	8003ffe <HAL_RCCEx_PeriphCLKConfig+0x2d6>
 8003fd0:	2b10      	cmp	r3, #16
 8003fd2:	d10f      	bne.n	8003ff4 <HAL_RCCEx_PeriphCLKConfig+0x2cc>
    {
    case RCC_OSPICLKSOURCE_PLL:      /* PLL is used as clock source for OSPI*/
      /* Enable OSPI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003fd4:	4b11      	ldr	r3, [pc, #68]	; (800401c <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8003fd6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003fd8:	4a10      	ldr	r2, [pc, #64]	; (800401c <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8003fda:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003fde:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* OSPI clock source configuration done later after clock selection check */
      break;
 8003fe0:	e00e      	b.n	8004000 <HAL_RCCEx_PeriphCLKConfig+0x2d8>

    case RCC_OSPICLKSOURCE_PLL2: /* PLL2 is used as clock source for OSPI*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 8003fe2:	687b      	ldr	r3, [r7, #4]
 8003fe4:	3304      	adds	r3, #4
 8003fe6:	2102      	movs	r1, #2
 8003fe8:	4618      	mov	r0, r3
 8003fea:	f001 f855 	bl	8005098 <RCCEx_PLL2_Config>
 8003fee:	4603      	mov	r3, r0
 8003ff0:	75fb      	strb	r3, [r7, #23]

      /* OSPI clock source configuration done later after clock selection check */
      break;
 8003ff2:	e005      	b.n	8004000 <HAL_RCCEx_PeriphCLKConfig+0x2d8>
    case RCC_OSPICLKSOURCE_HCLK:
      /* HCLK clock selected as OSPI kernel peripheral clock */
      break;

    default:
      ret = HAL_ERROR;
 8003ff4:	2301      	movs	r3, #1
 8003ff6:	75fb      	strb	r3, [r7, #23]
      break;
 8003ff8:	e002      	b.n	8004000 <HAL_RCCEx_PeriphCLKConfig+0x2d8>
      break;
 8003ffa:	bf00      	nop
 8003ffc:	e000      	b.n	8004000 <HAL_RCCEx_PeriphCLKConfig+0x2d8>
      break;
 8003ffe:	bf00      	nop
    }

    if(ret == HAL_OK)
 8004000:	7dfb      	ldrb	r3, [r7, #23]
 8004002:	2b00      	cmp	r3, #0
 8004004:	d10c      	bne.n	8004020 <HAL_RCCEx_PeriphCLKConfig+0x2f8>
    {
      /* Set the source of OSPI clock*/
      __HAL_RCC_OSPI_CONFIG(PeriphClkInit->OspiClockSelection);
 8004006:	4b05      	ldr	r3, [pc, #20]	; (800401c <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8004008:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800400a:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 800400e:	687b      	ldr	r3, [r7, #4]
 8004010:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004012:	4902      	ldr	r1, [pc, #8]	; (800401c <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8004014:	4313      	orrs	r3, r2
 8004016:	64cb      	str	r3, [r1, #76]	; 0x4c
 8004018:	e004      	b.n	8004024 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
 800401a:	bf00      	nop
 800401c:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004020:	7dfb      	ldrb	r3, [r7, #23]
 8004022:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif  /*OCTOSPI*/

  /*---------------------------- SPI1/2/3 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI123) == RCC_PERIPHCLK_SPI123)
 8004024:	687b      	ldr	r3, [r7, #4]
 8004026:	681b      	ldr	r3, [r3, #0]
 8004028:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800402c:	2b00      	cmp	r3, #0
 800402e:	d047      	beq.n	80040c0 <HAL_RCCEx_PeriphCLKConfig+0x398>
  {
    switch(PeriphClkInit->Spi123ClockSelection)
 8004030:	687b      	ldr	r3, [r7, #4]
 8004032:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004034:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8004038:	d030      	beq.n	800409c <HAL_RCCEx_PeriphCLKConfig+0x374>
 800403a:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800403e:	d82a      	bhi.n	8004096 <HAL_RCCEx_PeriphCLKConfig+0x36e>
 8004040:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8004044:	d02c      	beq.n	80040a0 <HAL_RCCEx_PeriphCLKConfig+0x378>
 8004046:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 800404a:	d824      	bhi.n	8004096 <HAL_RCCEx_PeriphCLKConfig+0x36e>
 800404c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004050:	d018      	beq.n	8004084 <HAL_RCCEx_PeriphCLKConfig+0x35c>
 8004052:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004056:	d81e      	bhi.n	8004096 <HAL_RCCEx_PeriphCLKConfig+0x36e>
 8004058:	2b00      	cmp	r3, #0
 800405a:	d003      	beq.n	8004064 <HAL_RCCEx_PeriphCLKConfig+0x33c>
 800405c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004060:	d007      	beq.n	8004072 <HAL_RCCEx_PeriphCLKConfig+0x34a>
 8004062:	e018      	b.n	8004096 <HAL_RCCEx_PeriphCLKConfig+0x36e>
    {
    case RCC_SPI123CLKSOURCE_PLL:      /* PLL is used as clock source for SPI1/2/3 */
      /* Enable SPI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8004064:	4bac      	ldr	r3, [pc, #688]	; (8004318 <HAL_RCCEx_PeriphCLKConfig+0x5f0>)
 8004066:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004068:	4aab      	ldr	r2, [pc, #684]	; (8004318 <HAL_RCCEx_PeriphCLKConfig+0x5f0>)
 800406a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800406e:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 8004070:	e017      	b.n	80040a2 <HAL_RCCEx_PeriphCLKConfig+0x37a>

    case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI1/2/3 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8004072:	687b      	ldr	r3, [r7, #4]
 8004074:	3304      	adds	r3, #4
 8004076:	2100      	movs	r1, #0
 8004078:	4618      	mov	r0, r3
 800407a:	f001 f80d 	bl	8005098 <RCCEx_PLL2_Config>
 800407e:	4603      	mov	r3, r0
 8004080:	75fb      	strb	r3, [r7, #23]

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 8004082:	e00e      	b.n	80040a2 <HAL_RCCEx_PeriphCLKConfig+0x37a>

    case RCC_SPI123CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI1/2/3 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 8004084:	687b      	ldr	r3, [r7, #4]
 8004086:	3324      	adds	r3, #36	; 0x24
 8004088:	2100      	movs	r1, #0
 800408a:	4618      	mov	r0, r3
 800408c:	f001 f8b6 	bl	80051fc <RCCEx_PLL3_Config>
 8004090:	4603      	mov	r3, r0
 8004092:	75fb      	strb	r3, [r7, #23]

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 8004094:	e005      	b.n	80040a2 <HAL_RCCEx_PeriphCLKConfig+0x37a>
      /* HSI, HSE, or CSI oscillator is used as source of SPI1/2/3 clock */
      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8004096:	2301      	movs	r3, #1
 8004098:	75fb      	strb	r3, [r7, #23]
      break;
 800409a:	e002      	b.n	80040a2 <HAL_RCCEx_PeriphCLKConfig+0x37a>
      break;
 800409c:	bf00      	nop
 800409e:	e000      	b.n	80040a2 <HAL_RCCEx_PeriphCLKConfig+0x37a>
      break;
 80040a0:	bf00      	nop
    }

    if(ret == HAL_OK)
 80040a2:	7dfb      	ldrb	r3, [r7, #23]
 80040a4:	2b00      	cmp	r3, #0
 80040a6:	d109      	bne.n	80040bc <HAL_RCCEx_PeriphCLKConfig+0x394>
    {
      /* Set the source of SPI1/2/3 clock*/
      __HAL_RCC_SPI123_CONFIG(PeriphClkInit->Spi123ClockSelection);
 80040a8:	4b9b      	ldr	r3, [pc, #620]	; (8004318 <HAL_RCCEx_PeriphCLKConfig+0x5f0>)
 80040aa:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80040ac:	f423 42e0 	bic.w	r2, r3, #28672	; 0x7000
 80040b0:	687b      	ldr	r3, [r7, #4]
 80040b2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80040b4:	4998      	ldr	r1, [pc, #608]	; (8004318 <HAL_RCCEx_PeriphCLKConfig+0x5f0>)
 80040b6:	4313      	orrs	r3, r2
 80040b8:	650b      	str	r3, [r1, #80]	; 0x50
 80040ba:	e001      	b.n	80040c0 <HAL_RCCEx_PeriphCLKConfig+0x398>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80040bc:	7dfb      	ldrb	r3, [r7, #23]
 80040be:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SPI4/5 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) == RCC_PERIPHCLK_SPI45)
 80040c0:	687b      	ldr	r3, [r7, #4]
 80040c2:	681b      	ldr	r3, [r3, #0]
 80040c4:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80040c8:	2b00      	cmp	r3, #0
 80040ca:	d049      	beq.n	8004160 <HAL_RCCEx_PeriphCLKConfig+0x438>
  {
    switch(PeriphClkInit->Spi45ClockSelection)
 80040cc:	687b      	ldr	r3, [r7, #4]
 80040ce:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80040d0:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80040d4:	d02e      	beq.n	8004134 <HAL_RCCEx_PeriphCLKConfig+0x40c>
 80040d6:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80040da:	d828      	bhi.n	800412e <HAL_RCCEx_PeriphCLKConfig+0x406>
 80040dc:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 80040e0:	d02a      	beq.n	8004138 <HAL_RCCEx_PeriphCLKConfig+0x410>
 80040e2:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 80040e6:	d822      	bhi.n	800412e <HAL_RCCEx_PeriphCLKConfig+0x406>
 80040e8:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 80040ec:	d026      	beq.n	800413c <HAL_RCCEx_PeriphCLKConfig+0x414>
 80040ee:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 80040f2:	d81c      	bhi.n	800412e <HAL_RCCEx_PeriphCLKConfig+0x406>
 80040f4:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80040f8:	d010      	beq.n	800411c <HAL_RCCEx_PeriphCLKConfig+0x3f4>
 80040fa:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80040fe:	d816      	bhi.n	800412e <HAL_RCCEx_PeriphCLKConfig+0x406>
 8004100:	2b00      	cmp	r3, #0
 8004102:	d01d      	beq.n	8004140 <HAL_RCCEx_PeriphCLKConfig+0x418>
 8004104:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004108:	d111      	bne.n	800412e <HAL_RCCEx_PeriphCLKConfig+0x406>
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;

    case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI4/5 */

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 800410a:	687b      	ldr	r3, [r7, #4]
 800410c:	3304      	adds	r3, #4
 800410e:	2101      	movs	r1, #1
 8004110:	4618      	mov	r0, r3
 8004112:	f000 ffc1 	bl	8005098 <RCCEx_PLL2_Config>
 8004116:	4603      	mov	r3, r0
 8004118:	75fb      	strb	r3, [r7, #23]

      /* SPI4/5 clock source configuration done later after clock selection check */
      break;
 800411a:	e012      	b.n	8004142 <HAL_RCCEx_PeriphCLKConfig+0x41a>
    case RCC_SPI45CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI4/5 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 800411c:	687b      	ldr	r3, [r7, #4]
 800411e:	3324      	adds	r3, #36	; 0x24
 8004120:	2101      	movs	r1, #1
 8004122:	4618      	mov	r0, r3
 8004124:	f001 f86a 	bl	80051fc <RCCEx_PLL3_Config>
 8004128:	4603      	mov	r3, r0
 800412a:	75fb      	strb	r3, [r7, #23]
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;
 800412c:	e009      	b.n	8004142 <HAL_RCCEx_PeriphCLKConfig+0x41a>
      /* HSE,  oscillator is used as source of SPI4/5 clock */
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800412e:	2301      	movs	r3, #1
 8004130:	75fb      	strb	r3, [r7, #23]
      break;
 8004132:	e006      	b.n	8004142 <HAL_RCCEx_PeriphCLKConfig+0x41a>
      break;
 8004134:	bf00      	nop
 8004136:	e004      	b.n	8004142 <HAL_RCCEx_PeriphCLKConfig+0x41a>
      break;
 8004138:	bf00      	nop
 800413a:	e002      	b.n	8004142 <HAL_RCCEx_PeriphCLKConfig+0x41a>
      break;
 800413c:	bf00      	nop
 800413e:	e000      	b.n	8004142 <HAL_RCCEx_PeriphCLKConfig+0x41a>
      break;
 8004140:	bf00      	nop
    }

    if(ret == HAL_OK)
 8004142:	7dfb      	ldrb	r3, [r7, #23]
 8004144:	2b00      	cmp	r3, #0
 8004146:	d109      	bne.n	800415c <HAL_RCCEx_PeriphCLKConfig+0x434>
    {
      /* Set the source of SPI4/5 clock*/
      __HAL_RCC_SPI45_CONFIG(PeriphClkInit->Spi45ClockSelection);
 8004148:	4b73      	ldr	r3, [pc, #460]	; (8004318 <HAL_RCCEx_PeriphCLKConfig+0x5f0>)
 800414a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800414c:	f423 22e0 	bic.w	r2, r3, #458752	; 0x70000
 8004150:	687b      	ldr	r3, [r7, #4]
 8004152:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004154:	4970      	ldr	r1, [pc, #448]	; (8004318 <HAL_RCCEx_PeriphCLKConfig+0x5f0>)
 8004156:	4313      	orrs	r3, r2
 8004158:	650b      	str	r3, [r1, #80]	; 0x50
 800415a:	e001      	b.n	8004160 <HAL_RCCEx_PeriphCLKConfig+0x438>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800415c:	7dfb      	ldrb	r3, [r7, #23]
 800415e:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SPI6 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 8004160:	687b      	ldr	r3, [r7, #4]
 8004162:	681b      	ldr	r3, [r3, #0]
 8004164:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004168:	2b00      	cmp	r3, #0
 800416a:	d04b      	beq.n	8004204 <HAL_RCCEx_PeriphCLKConfig+0x4dc>
  {
    switch(PeriphClkInit->Spi6ClockSelection)
 800416c:	687b      	ldr	r3, [r7, #4]
 800416e:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 8004172:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8004176:	d02e      	beq.n	80041d6 <HAL_RCCEx_PeriphCLKConfig+0x4ae>
 8004178:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800417c:	d828      	bhi.n	80041d0 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
 800417e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004182:	d02a      	beq.n	80041da <HAL_RCCEx_PeriphCLKConfig+0x4b2>
 8004184:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004188:	d822      	bhi.n	80041d0 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
 800418a:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 800418e:	d026      	beq.n	80041de <HAL_RCCEx_PeriphCLKConfig+0x4b6>
 8004190:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8004194:	d81c      	bhi.n	80041d0 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
 8004196:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800419a:	d010      	beq.n	80041be <HAL_RCCEx_PeriphCLKConfig+0x496>
 800419c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80041a0:	d816      	bhi.n	80041d0 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
 80041a2:	2b00      	cmp	r3, #0
 80041a4:	d01d      	beq.n	80041e2 <HAL_RCCEx_PeriphCLKConfig+0x4ba>
 80041a6:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80041aa:	d111      	bne.n	80041d0 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
      /* SPI6 clock source configuration done later after clock selection check */
      break;

    case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI6*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 80041ac:	687b      	ldr	r3, [r7, #4]
 80041ae:	3304      	adds	r3, #4
 80041b0:	2101      	movs	r1, #1
 80041b2:	4618      	mov	r0, r3
 80041b4:	f000 ff70 	bl	8005098 <RCCEx_PLL2_Config>
 80041b8:	4603      	mov	r3, r0
 80041ba:	75fb      	strb	r3, [r7, #23]

      /* SPI6 clock source configuration done later after clock selection check */
      break;
 80041bc:	e012      	b.n	80041e4 <HAL_RCCEx_PeriphCLKConfig+0x4bc>
    case RCC_SPI6CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI6*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 80041be:	687b      	ldr	r3, [r7, #4]
 80041c0:	3324      	adds	r3, #36	; 0x24
 80041c2:	2101      	movs	r1, #1
 80041c4:	4618      	mov	r0, r3
 80041c6:	f001 f819 	bl	80051fc <RCCEx_PLL3_Config>
 80041ca:	4603      	mov	r3, r0
 80041cc:	75fb      	strb	r3, [r7, #23]
      /* SPI6 clock source configuration done later after clock selection check */
      break;
 80041ce:	e009      	b.n	80041e4 <HAL_RCCEx_PeriphCLKConfig+0x4bc>
      /* SPI6 clock source configuration done later after clock selection check */
      break;
#endif

    default:
      ret = HAL_ERROR;
 80041d0:	2301      	movs	r3, #1
 80041d2:	75fb      	strb	r3, [r7, #23]
      break;
 80041d4:	e006      	b.n	80041e4 <HAL_RCCEx_PeriphCLKConfig+0x4bc>
      break;
 80041d6:	bf00      	nop
 80041d8:	e004      	b.n	80041e4 <HAL_RCCEx_PeriphCLKConfig+0x4bc>
      break;
 80041da:	bf00      	nop
 80041dc:	e002      	b.n	80041e4 <HAL_RCCEx_PeriphCLKConfig+0x4bc>
      break;
 80041de:	bf00      	nop
 80041e0:	e000      	b.n	80041e4 <HAL_RCCEx_PeriphCLKConfig+0x4bc>
      break;
 80041e2:	bf00      	nop
    }

    if(ret == HAL_OK)
 80041e4:	7dfb      	ldrb	r3, [r7, #23]
 80041e6:	2b00      	cmp	r3, #0
 80041e8:	d10a      	bne.n	8004200 <HAL_RCCEx_PeriphCLKConfig+0x4d8>
    {
      /* Set the source of SPI6 clock*/
      __HAL_RCC_SPI6_CONFIG(PeriphClkInit->Spi6ClockSelection);
 80041ea:	4b4b      	ldr	r3, [pc, #300]	; (8004318 <HAL_RCCEx_PeriphCLKConfig+0x5f0>)
 80041ec:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80041ee:	f023 42e0 	bic.w	r2, r3, #1879048192	; 0x70000000
 80041f2:	687b      	ldr	r3, [r7, #4]
 80041f4:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 80041f8:	4947      	ldr	r1, [pc, #284]	; (8004318 <HAL_RCCEx_PeriphCLKConfig+0x5f0>)
 80041fa:	4313      	orrs	r3, r2
 80041fc:	658b      	str	r3, [r1, #88]	; 0x58
 80041fe:	e001      	b.n	8004204 <HAL_RCCEx_PeriphCLKConfig+0x4dc>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004200:	7dfb      	ldrb	r3, [r7, #23]
 8004202:	75bb      	strb	r3, [r7, #22]
  }
#endif /*DSI*/

#if defined(FDCAN1) || defined(FDCAN2)
  /*---------------------------- FDCAN configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8004204:	687b      	ldr	r3, [r7, #4]
 8004206:	681b      	ldr	r3, [r3, #0]
 8004208:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800420c:	2b00      	cmp	r3, #0
 800420e:	d02f      	beq.n	8004270 <HAL_RCCEx_PeriphCLKConfig+0x548>
  {
    switch(PeriphClkInit->FdcanClockSelection)
 8004210:	687b      	ldr	r3, [r7, #4]
 8004212:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8004214:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8004218:	d00e      	beq.n	8004238 <HAL_RCCEx_PeriphCLKConfig+0x510>
 800421a:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800421e:	d814      	bhi.n	800424a <HAL_RCCEx_PeriphCLKConfig+0x522>
 8004220:	2b00      	cmp	r3, #0
 8004222:	d015      	beq.n	8004250 <HAL_RCCEx_PeriphCLKConfig+0x528>
 8004224:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8004228:	d10f      	bne.n	800424a <HAL_RCCEx_PeriphCLKConfig+0x522>
    {
    case RCC_FDCANCLKSOURCE_PLL:      /* PLL is used as clock source for FDCAN*/
      /* Enable FDCAN Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800422a:	4b3b      	ldr	r3, [pc, #236]	; (8004318 <HAL_RCCEx_PeriphCLKConfig+0x5f0>)
 800422c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800422e:	4a3a      	ldr	r2, [pc, #232]	; (8004318 <HAL_RCCEx_PeriphCLKConfig+0x5f0>)
 8004230:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004234:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* FDCAN clock source configuration done later after clock selection check */
      break;
 8004236:	e00c      	b.n	8004252 <HAL_RCCEx_PeriphCLKConfig+0x52a>

    case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is used as clock source for FDCAN*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8004238:	687b      	ldr	r3, [r7, #4]
 800423a:	3304      	adds	r3, #4
 800423c:	2101      	movs	r1, #1
 800423e:	4618      	mov	r0, r3
 8004240:	f000 ff2a 	bl	8005098 <RCCEx_PLL2_Config>
 8004244:	4603      	mov	r3, r0
 8004246:	75fb      	strb	r3, [r7, #23]

      /* FDCAN clock source configuration done later after clock selection check */
      break;
 8004248:	e003      	b.n	8004252 <HAL_RCCEx_PeriphCLKConfig+0x52a>
      /* HSE is used as clock source for FDCAN*/
      /* FDCAN clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800424a:	2301      	movs	r3, #1
 800424c:	75fb      	strb	r3, [r7, #23]
      break;
 800424e:	e000      	b.n	8004252 <HAL_RCCEx_PeriphCLKConfig+0x52a>
      break;
 8004250:	bf00      	nop
    }

    if(ret == HAL_OK)
 8004252:	7dfb      	ldrb	r3, [r7, #23]
 8004254:	2b00      	cmp	r3, #0
 8004256:	d109      	bne.n	800426c <HAL_RCCEx_PeriphCLKConfig+0x544>
    {
      /* Set the source of FDCAN clock*/
      __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 8004258:	4b2f      	ldr	r3, [pc, #188]	; (8004318 <HAL_RCCEx_PeriphCLKConfig+0x5f0>)
 800425a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800425c:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8004260:	687b      	ldr	r3, [r7, #4]
 8004262:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8004264:	492c      	ldr	r1, [pc, #176]	; (8004318 <HAL_RCCEx_PeriphCLKConfig+0x5f0>)
 8004266:	4313      	orrs	r3, r2
 8004268:	650b      	str	r3, [r1, #80]	; 0x50
 800426a:	e001      	b.n	8004270 <HAL_RCCEx_PeriphCLKConfig+0x548>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800426c:	7dfb      	ldrb	r3, [r7, #23]
 800426e:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif /*FDCAN1 || FDCAN2*/

  /*---------------------------- FMC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
 8004270:	687b      	ldr	r3, [r7, #4]
 8004272:	681b      	ldr	r3, [r3, #0]
 8004274:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8004278:	2b00      	cmp	r3, #0
 800427a:	d032      	beq.n	80042e2 <HAL_RCCEx_PeriphCLKConfig+0x5ba>
  {
    switch(PeriphClkInit->FmcClockSelection)
 800427c:	687b      	ldr	r3, [r7, #4]
 800427e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004280:	2b03      	cmp	r3, #3
 8004282:	d81b      	bhi.n	80042bc <HAL_RCCEx_PeriphCLKConfig+0x594>
 8004284:	a201      	add	r2, pc, #4	; (adr r2, 800428c <HAL_RCCEx_PeriphCLKConfig+0x564>)
 8004286:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800428a:	bf00      	nop
 800428c:	080042c3 	.word	0x080042c3
 8004290:	0800429d 	.word	0x0800429d
 8004294:	080042ab 	.word	0x080042ab
 8004298:	080042c3 	.word	0x080042c3
    {
    case RCC_FMCCLKSOURCE_PLL:      /* PLL is used as clock source for FMC*/
      /* Enable FMC Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800429c:	4b1e      	ldr	r3, [pc, #120]	; (8004318 <HAL_RCCEx_PeriphCLKConfig+0x5f0>)
 800429e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80042a0:	4a1d      	ldr	r2, [pc, #116]	; (8004318 <HAL_RCCEx_PeriphCLKConfig+0x5f0>)
 80042a2:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80042a6:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* FMC clock source configuration done later after clock selection check */
      break;
 80042a8:	e00c      	b.n	80042c4 <HAL_RCCEx_PeriphCLKConfig+0x59c>

    case RCC_FMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for FMC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 80042aa:	687b      	ldr	r3, [r7, #4]
 80042ac:	3304      	adds	r3, #4
 80042ae:	2102      	movs	r1, #2
 80042b0:	4618      	mov	r0, r3
 80042b2:	f000 fef1 	bl	8005098 <RCCEx_PLL2_Config>
 80042b6:	4603      	mov	r3, r0
 80042b8:	75fb      	strb	r3, [r7, #23]

      /* FMC clock source configuration done later after clock selection check */
      break;
 80042ba:	e003      	b.n	80042c4 <HAL_RCCEx_PeriphCLKConfig+0x59c>
    case RCC_FMCCLKSOURCE_HCLK:
      /* D1/CD HCLK  clock selected as FMC kernel peripheral clock */
      break;

    default:
      ret = HAL_ERROR;
 80042bc:	2301      	movs	r3, #1
 80042be:	75fb      	strb	r3, [r7, #23]
      break;
 80042c0:	e000      	b.n	80042c4 <HAL_RCCEx_PeriphCLKConfig+0x59c>
      break;
 80042c2:	bf00      	nop
    }

    if(ret == HAL_OK)
 80042c4:	7dfb      	ldrb	r3, [r7, #23]
 80042c6:	2b00      	cmp	r3, #0
 80042c8:	d109      	bne.n	80042de <HAL_RCCEx_PeriphCLKConfig+0x5b6>
    {
      /* Set the source of FMC clock*/
      __HAL_RCC_FMC_CONFIG(PeriphClkInit->FmcClockSelection);
 80042ca:	4b13      	ldr	r3, [pc, #76]	; (8004318 <HAL_RCCEx_PeriphCLKConfig+0x5f0>)
 80042cc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80042ce:	f023 0203 	bic.w	r2, r3, #3
 80042d2:	687b      	ldr	r3, [r7, #4]
 80042d4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80042d6:	4910      	ldr	r1, [pc, #64]	; (8004318 <HAL_RCCEx_PeriphCLKConfig+0x5f0>)
 80042d8:	4313      	orrs	r3, r2
 80042da:	64cb      	str	r3, [r1, #76]	; 0x4c
 80042dc:	e001      	b.n	80042e2 <HAL_RCCEx_PeriphCLKConfig+0x5ba>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80042de:	7dfb      	ldrb	r3, [r7, #23]
 80042e0:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 80042e2:	687b      	ldr	r3, [r7, #4]
 80042e4:	681b      	ldr	r3, [r3, #0]
 80042e6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80042ea:	2b00      	cmp	r3, #0
 80042ec:	f000 808a 	beq.w	8004404 <HAL_RCCEx_PeriphCLKConfig+0x6dc>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80042f0:	4b0a      	ldr	r3, [pc, #40]	; (800431c <HAL_RCCEx_PeriphCLKConfig+0x5f4>)
 80042f2:	681b      	ldr	r3, [r3, #0]
 80042f4:	4a09      	ldr	r2, [pc, #36]	; (800431c <HAL_RCCEx_PeriphCLKConfig+0x5f4>)
 80042f6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80042fa:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 80042fc:	f7fd f956 	bl	80015ac <HAL_GetTick>
 8004300:	6138      	str	r0, [r7, #16]

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8004302:	e00d      	b.n	8004320 <HAL_RCCEx_PeriphCLKConfig+0x5f8>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004304:	f7fd f952 	bl	80015ac <HAL_GetTick>
 8004308:	4602      	mov	r2, r0
 800430a:	693b      	ldr	r3, [r7, #16]
 800430c:	1ad3      	subs	r3, r2, r3
 800430e:	2b64      	cmp	r3, #100	; 0x64
 8004310:	d906      	bls.n	8004320 <HAL_RCCEx_PeriphCLKConfig+0x5f8>
      {
        ret = HAL_TIMEOUT;
 8004312:	2303      	movs	r3, #3
 8004314:	75fb      	strb	r3, [r7, #23]
        break;
 8004316:	e009      	b.n	800432c <HAL_RCCEx_PeriphCLKConfig+0x604>
 8004318:	58024400 	.word	0x58024400
 800431c:	58024800 	.word	0x58024800
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8004320:	4bb9      	ldr	r3, [pc, #740]	; (8004608 <HAL_RCCEx_PeriphCLKConfig+0x8e0>)
 8004322:	681b      	ldr	r3, [r3, #0]
 8004324:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004328:	2b00      	cmp	r3, #0
 800432a:	d0eb      	beq.n	8004304 <HAL_RCCEx_PeriphCLKConfig+0x5dc>
      }
    }

    if(ret == HAL_OK)
 800432c:	7dfb      	ldrb	r3, [r7, #23]
 800432e:	2b00      	cmp	r3, #0
 8004330:	d166      	bne.n	8004400 <HAL_RCCEx_PeriphCLKConfig+0x6d8>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if((RCC->BDCR & RCC_BDCR_RTCSEL) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL))
 8004332:	4bb6      	ldr	r3, [pc, #728]	; (800460c <HAL_RCCEx_PeriphCLKConfig+0x8e4>)
 8004334:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8004336:	687b      	ldr	r3, [r7, #4]
 8004338:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 800433c:	4053      	eors	r3, r2
 800433e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004342:	2b00      	cmp	r3, #0
 8004344:	d013      	beq.n	800436e <HAL_RCCEx_PeriphCLKConfig+0x646>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8004346:	4bb1      	ldr	r3, [pc, #708]	; (800460c <HAL_RCCEx_PeriphCLKConfig+0x8e4>)
 8004348:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800434a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800434e:	60fb      	str	r3, [r7, #12]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8004350:	4bae      	ldr	r3, [pc, #696]	; (800460c <HAL_RCCEx_PeriphCLKConfig+0x8e4>)
 8004352:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004354:	4aad      	ldr	r2, [pc, #692]	; (800460c <HAL_RCCEx_PeriphCLKConfig+0x8e4>)
 8004356:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800435a:	6713      	str	r3, [r2, #112]	; 0x70
        __HAL_RCC_BACKUPRESET_RELEASE();
 800435c:	4bab      	ldr	r3, [pc, #684]	; (800460c <HAL_RCCEx_PeriphCLKConfig+0x8e4>)
 800435e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004360:	4aaa      	ldr	r2, [pc, #680]	; (800460c <HAL_RCCEx_PeriphCLKConfig+0x8e4>)
 8004362:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004366:	6713      	str	r3, [r2, #112]	; 0x70
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpreg;
 8004368:	4aa8      	ldr	r2, [pc, #672]	; (800460c <HAL_RCCEx_PeriphCLKConfig+0x8e4>)
 800436a:	68fb      	ldr	r3, [r7, #12]
 800436c:	6713      	str	r3, [r2, #112]	; 0x70
      }

      /* If LSE is selected as RTC clock source (and enabled prior to Backup Domain reset), wait for LSE reactivation */
      if(PeriphClkInit->RTCClockSelection == RCC_RTCCLKSOURCE_LSE)
 800436e:	687b      	ldr	r3, [r7, #4]
 8004370:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 8004374:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004378:	d115      	bne.n	80043a6 <HAL_RCCEx_PeriphCLKConfig+0x67e>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800437a:	f7fd f917 	bl	80015ac <HAL_GetTick>
 800437e:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8004380:	e00b      	b.n	800439a <HAL_RCCEx_PeriphCLKConfig+0x672>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004382:	f7fd f913 	bl	80015ac <HAL_GetTick>
 8004386:	4602      	mov	r2, r0
 8004388:	693b      	ldr	r3, [r7, #16]
 800438a:	1ad3      	subs	r3, r2, r3
 800438c:	f241 3288 	movw	r2, #5000	; 0x1388
 8004390:	4293      	cmp	r3, r2
 8004392:	d902      	bls.n	800439a <HAL_RCCEx_PeriphCLKConfig+0x672>
          {
            ret = HAL_TIMEOUT;
 8004394:	2303      	movs	r3, #3
 8004396:	75fb      	strb	r3, [r7, #23]
            break;
 8004398:	e005      	b.n	80043a6 <HAL_RCCEx_PeriphCLKConfig+0x67e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800439a:	4b9c      	ldr	r3, [pc, #624]	; (800460c <HAL_RCCEx_PeriphCLKConfig+0x8e4>)
 800439c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800439e:	f003 0302 	and.w	r3, r3, #2
 80043a2:	2b00      	cmp	r3, #0
 80043a4:	d0ed      	beq.n	8004382 <HAL_RCCEx_PeriphCLKConfig+0x65a>
          }
        }
      }

      if(ret == HAL_OK)
 80043a6:	7dfb      	ldrb	r3, [r7, #23]
 80043a8:	2b00      	cmp	r3, #0
 80043aa:	d126      	bne.n	80043fa <HAL_RCCEx_PeriphCLKConfig+0x6d2>
      {
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80043ac:	687b      	ldr	r3, [r7, #4]
 80043ae:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 80043b2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80043b6:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80043ba:	d10d      	bne.n	80043d8 <HAL_RCCEx_PeriphCLKConfig+0x6b0>
 80043bc:	4b93      	ldr	r3, [pc, #588]	; (800460c <HAL_RCCEx_PeriphCLKConfig+0x8e4>)
 80043be:	691b      	ldr	r3, [r3, #16]
 80043c0:	f423 527c 	bic.w	r2, r3, #16128	; 0x3f00
 80043c4:	687b      	ldr	r3, [r7, #4]
 80043c6:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 80043ca:	0919      	lsrs	r1, r3, #4
 80043cc:	4b90      	ldr	r3, [pc, #576]	; (8004610 <HAL_RCCEx_PeriphCLKConfig+0x8e8>)
 80043ce:	400b      	ands	r3, r1
 80043d0:	498e      	ldr	r1, [pc, #568]	; (800460c <HAL_RCCEx_PeriphCLKConfig+0x8e4>)
 80043d2:	4313      	orrs	r3, r2
 80043d4:	610b      	str	r3, [r1, #16]
 80043d6:	e005      	b.n	80043e4 <HAL_RCCEx_PeriphCLKConfig+0x6bc>
 80043d8:	4b8c      	ldr	r3, [pc, #560]	; (800460c <HAL_RCCEx_PeriphCLKConfig+0x8e4>)
 80043da:	691b      	ldr	r3, [r3, #16]
 80043dc:	4a8b      	ldr	r2, [pc, #556]	; (800460c <HAL_RCCEx_PeriphCLKConfig+0x8e4>)
 80043de:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 80043e2:	6113      	str	r3, [r2, #16]
 80043e4:	4b89      	ldr	r3, [pc, #548]	; (800460c <HAL_RCCEx_PeriphCLKConfig+0x8e4>)
 80043e6:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 80043e8:	687b      	ldr	r3, [r7, #4]
 80043ea:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 80043ee:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80043f2:	4986      	ldr	r1, [pc, #536]	; (800460c <HAL_RCCEx_PeriphCLKConfig+0x8e4>)
 80043f4:	4313      	orrs	r3, r2
 80043f6:	670b      	str	r3, [r1, #112]	; 0x70
 80043f8:	e004      	b.n	8004404 <HAL_RCCEx_PeriphCLKConfig+0x6dc>
      }
      else
      {
        /* set overall return value */
        status = ret;
 80043fa:	7dfb      	ldrb	r3, [r7, #23]
 80043fc:	75bb      	strb	r3, [r7, #22]
 80043fe:	e001      	b.n	8004404 <HAL_RCCEx_PeriphCLKConfig+0x6dc>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004400:	7dfb      	ldrb	r3, [r7, #23]
 8004402:	75bb      	strb	r3, [r7, #22]
    }
  }


  /*-------------------------- USART1/6 configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
 8004404:	687b      	ldr	r3, [r7, #4]
 8004406:	681b      	ldr	r3, [r3, #0]
 8004408:	f003 0301 	and.w	r3, r3, #1
 800440c:	2b00      	cmp	r3, #0
 800440e:	d07e      	beq.n	800450e <HAL_RCCEx_PeriphCLKConfig+0x7e6>
  {
    switch(PeriphClkInit->Usart16ClockSelection)
 8004410:	687b      	ldr	r3, [r7, #4]
 8004412:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004414:	2b28      	cmp	r3, #40	; 0x28
 8004416:	d867      	bhi.n	80044e8 <HAL_RCCEx_PeriphCLKConfig+0x7c0>
 8004418:	a201      	add	r2, pc, #4	; (adr r2, 8004420 <HAL_RCCEx_PeriphCLKConfig+0x6f8>)
 800441a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800441e:	bf00      	nop
 8004420:	080044ef 	.word	0x080044ef
 8004424:	080044e9 	.word	0x080044e9
 8004428:	080044e9 	.word	0x080044e9
 800442c:	080044e9 	.word	0x080044e9
 8004430:	080044e9 	.word	0x080044e9
 8004434:	080044e9 	.word	0x080044e9
 8004438:	080044e9 	.word	0x080044e9
 800443c:	080044e9 	.word	0x080044e9
 8004440:	080044c5 	.word	0x080044c5
 8004444:	080044e9 	.word	0x080044e9
 8004448:	080044e9 	.word	0x080044e9
 800444c:	080044e9 	.word	0x080044e9
 8004450:	080044e9 	.word	0x080044e9
 8004454:	080044e9 	.word	0x080044e9
 8004458:	080044e9 	.word	0x080044e9
 800445c:	080044e9 	.word	0x080044e9
 8004460:	080044d7 	.word	0x080044d7
 8004464:	080044e9 	.word	0x080044e9
 8004468:	080044e9 	.word	0x080044e9
 800446c:	080044e9 	.word	0x080044e9
 8004470:	080044e9 	.word	0x080044e9
 8004474:	080044e9 	.word	0x080044e9
 8004478:	080044e9 	.word	0x080044e9
 800447c:	080044e9 	.word	0x080044e9
 8004480:	080044ef 	.word	0x080044ef
 8004484:	080044e9 	.word	0x080044e9
 8004488:	080044e9 	.word	0x080044e9
 800448c:	080044e9 	.word	0x080044e9
 8004490:	080044e9 	.word	0x080044e9
 8004494:	080044e9 	.word	0x080044e9
 8004498:	080044e9 	.word	0x080044e9
 800449c:	080044e9 	.word	0x080044e9
 80044a0:	080044ef 	.word	0x080044ef
 80044a4:	080044e9 	.word	0x080044e9
 80044a8:	080044e9 	.word	0x080044e9
 80044ac:	080044e9 	.word	0x080044e9
 80044b0:	080044e9 	.word	0x080044e9
 80044b4:	080044e9 	.word	0x080044e9
 80044b8:	080044e9 	.word	0x080044e9
 80044bc:	080044e9 	.word	0x080044e9
 80044c0:	080044ef 	.word	0x080044ef
    case RCC_USART16CLKSOURCE_PCLK2: /* CD/D2 PCLK2 as clock source for USART1/6 */
      /* USART1/6 clock source configuration done later after clock selection check */
      break;

    case RCC_USART16CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART1/6 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 80044c4:	687b      	ldr	r3, [r7, #4]
 80044c6:	3304      	adds	r3, #4
 80044c8:	2101      	movs	r1, #1
 80044ca:	4618      	mov	r0, r3
 80044cc:	f000 fde4 	bl	8005098 <RCCEx_PLL2_Config>
 80044d0:	4603      	mov	r3, r0
 80044d2:	75fb      	strb	r3, [r7, #23]
      /* USART1/6 clock source configuration done later after clock selection check */
      break;
 80044d4:	e00c      	b.n	80044f0 <HAL_RCCEx_PeriphCLKConfig+0x7c8>

    case RCC_USART16CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART1/6 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 80044d6:	687b      	ldr	r3, [r7, #4]
 80044d8:	3324      	adds	r3, #36	; 0x24
 80044da:	2101      	movs	r1, #1
 80044dc:	4618      	mov	r0, r3
 80044de:	f000 fe8d 	bl	80051fc <RCCEx_PLL3_Config>
 80044e2:	4603      	mov	r3, r0
 80044e4:	75fb      	strb	r3, [r7, #23]
      /* USART1/6 clock source configuration done later after clock selection check */
      break;
 80044e6:	e003      	b.n	80044f0 <HAL_RCCEx_PeriphCLKConfig+0x7c8>
      /* LSE,  oscillator is used as source of USART1/6 clock */
      /* USART1/6 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80044e8:	2301      	movs	r3, #1
 80044ea:	75fb      	strb	r3, [r7, #23]
      break;
 80044ec:	e000      	b.n	80044f0 <HAL_RCCEx_PeriphCLKConfig+0x7c8>
      break;
 80044ee:	bf00      	nop
    }

    if(ret == HAL_OK)
 80044f0:	7dfb      	ldrb	r3, [r7, #23]
 80044f2:	2b00      	cmp	r3, #0
 80044f4:	d109      	bne.n	800450a <HAL_RCCEx_PeriphCLKConfig+0x7e2>
    {
      /* Set the source of USART1/6 clock */
      __HAL_RCC_USART16_CONFIG(PeriphClkInit->Usart16ClockSelection);
 80044f6:	4b45      	ldr	r3, [pc, #276]	; (800460c <HAL_RCCEx_PeriphCLKConfig+0x8e4>)
 80044f8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80044fa:	f023 0238 	bic.w	r2, r3, #56	; 0x38
 80044fe:	687b      	ldr	r3, [r7, #4]
 8004500:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004502:	4942      	ldr	r1, [pc, #264]	; (800460c <HAL_RCCEx_PeriphCLKConfig+0x8e4>)
 8004504:	4313      	orrs	r3, r2
 8004506:	654b      	str	r3, [r1, #84]	; 0x54
 8004508:	e001      	b.n	800450e <HAL_RCCEx_PeriphCLKConfig+0x7e6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800450a:	7dfb      	ldrb	r3, [r7, #23]
 800450c:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*-------------------------- USART2/3/4/5/7/8 Configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
 800450e:	687b      	ldr	r3, [r7, #4]
 8004510:	681b      	ldr	r3, [r3, #0]
 8004512:	f003 0302 	and.w	r3, r3, #2
 8004516:	2b00      	cmp	r3, #0
 8004518:	d037      	beq.n	800458a <HAL_RCCEx_PeriphCLKConfig+0x862>
  {
    switch(PeriphClkInit->Usart234578ClockSelection)
 800451a:	687b      	ldr	r3, [r7, #4]
 800451c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800451e:	2b05      	cmp	r3, #5
 8004520:	d820      	bhi.n	8004564 <HAL_RCCEx_PeriphCLKConfig+0x83c>
 8004522:	a201      	add	r2, pc, #4	; (adr r2, 8004528 <HAL_RCCEx_PeriphCLKConfig+0x800>)
 8004524:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004528:	0800456b 	.word	0x0800456b
 800452c:	08004541 	.word	0x08004541
 8004530:	08004553 	.word	0x08004553
 8004534:	0800456b 	.word	0x0800456b
 8004538:	0800456b 	.word	0x0800456b
 800453c:	0800456b 	.word	0x0800456b
    case RCC_USART234578CLKSOURCE_PCLK1: /* CD/D2 PCLK1 as clock source for USART2/3/4/5/7/8 */
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;

    case RCC_USART234578CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART2/3/4/5/7/8 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8004540:	687b      	ldr	r3, [r7, #4]
 8004542:	3304      	adds	r3, #4
 8004544:	2101      	movs	r1, #1
 8004546:	4618      	mov	r0, r3
 8004548:	f000 fda6 	bl	8005098 <RCCEx_PLL2_Config>
 800454c:	4603      	mov	r3, r0
 800454e:	75fb      	strb	r3, [r7, #23]
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;
 8004550:	e00c      	b.n	800456c <HAL_RCCEx_PeriphCLKConfig+0x844>

    case RCC_USART234578CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART2/3/4/5/7/8 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8004552:	687b      	ldr	r3, [r7, #4]
 8004554:	3324      	adds	r3, #36	; 0x24
 8004556:	2101      	movs	r1, #1
 8004558:	4618      	mov	r0, r3
 800455a:	f000 fe4f 	bl	80051fc <RCCEx_PLL3_Config>
 800455e:	4603      	mov	r3, r0
 8004560:	75fb      	strb	r3, [r7, #23]
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;
 8004562:	e003      	b.n	800456c <HAL_RCCEx_PeriphCLKConfig+0x844>
      /* LSE,  oscillator is used as source of USART2/3/4/5/7/8 clock */
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8004564:	2301      	movs	r3, #1
 8004566:	75fb      	strb	r3, [r7, #23]
      break;
 8004568:	e000      	b.n	800456c <HAL_RCCEx_PeriphCLKConfig+0x844>
      break;
 800456a:	bf00      	nop
    }

    if(ret == HAL_OK)
 800456c:	7dfb      	ldrb	r3, [r7, #23]
 800456e:	2b00      	cmp	r3, #0
 8004570:	d109      	bne.n	8004586 <HAL_RCCEx_PeriphCLKConfig+0x85e>
    {
      /* Set the source of USART2/3/4/5/7/8 clock */
      __HAL_RCC_USART234578_CONFIG(PeriphClkInit->Usart234578ClockSelection);
 8004572:	4b26      	ldr	r3, [pc, #152]	; (800460c <HAL_RCCEx_PeriphCLKConfig+0x8e4>)
 8004574:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004576:	f023 0207 	bic.w	r2, r3, #7
 800457a:	687b      	ldr	r3, [r7, #4]
 800457c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800457e:	4923      	ldr	r1, [pc, #140]	; (800460c <HAL_RCCEx_PeriphCLKConfig+0x8e4>)
 8004580:	4313      	orrs	r3, r2
 8004582:	654b      	str	r3, [r1, #84]	; 0x54
 8004584:	e001      	b.n	800458a <HAL_RCCEx_PeriphCLKConfig+0x862>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004586:	7dfb      	ldrb	r3, [r7, #23]
 8004588:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*-------------------------- LPUART1 Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 800458a:	687b      	ldr	r3, [r7, #4]
 800458c:	681b      	ldr	r3, [r3, #0]
 800458e:	f003 0304 	and.w	r3, r3, #4
 8004592:	2b00      	cmp	r3, #0
 8004594:	d040      	beq.n	8004618 <HAL_RCCEx_PeriphCLKConfig+0x8f0>
  {
    switch(PeriphClkInit->Lpuart1ClockSelection)
 8004596:	687b      	ldr	r3, [r7, #4]
 8004598:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800459c:	2b05      	cmp	r3, #5
 800459e:	d821      	bhi.n	80045e4 <HAL_RCCEx_PeriphCLKConfig+0x8bc>
 80045a0:	a201      	add	r2, pc, #4	; (adr r2, 80045a8 <HAL_RCCEx_PeriphCLKConfig+0x880>)
 80045a2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80045a6:	bf00      	nop
 80045a8:	080045eb 	.word	0x080045eb
 80045ac:	080045c1 	.word	0x080045c1
 80045b0:	080045d3 	.word	0x080045d3
 80045b4:	080045eb 	.word	0x080045eb
 80045b8:	080045eb 	.word	0x080045eb
 80045bc:	080045eb 	.word	0x080045eb
    case RCC_LPUART1CLKSOURCE_PCLK4: /* SRD/D3 PCLK1 (PCLK4) as clock source for LPUART1 */
      /* LPUART1 clock source configuration done later after clock selection check */
      break;

    case RCC_LPUART1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPUART1 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 80045c0:	687b      	ldr	r3, [r7, #4]
 80045c2:	3304      	adds	r3, #4
 80045c4:	2101      	movs	r1, #1
 80045c6:	4618      	mov	r0, r3
 80045c8:	f000 fd66 	bl	8005098 <RCCEx_PLL2_Config>
 80045cc:	4603      	mov	r3, r0
 80045ce:	75fb      	strb	r3, [r7, #23]
      /* LPUART1 clock source configuration done later after clock selection check */
      break;
 80045d0:	e00c      	b.n	80045ec <HAL_RCCEx_PeriphCLKConfig+0x8c4>

    case RCC_LPUART1CLKSOURCE_PLL3: /* PLL3 is used as clock source for LPUART1 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 80045d2:	687b      	ldr	r3, [r7, #4]
 80045d4:	3324      	adds	r3, #36	; 0x24
 80045d6:	2101      	movs	r1, #1
 80045d8:	4618      	mov	r0, r3
 80045da:	f000 fe0f 	bl	80051fc <RCCEx_PLL3_Config>
 80045de:	4603      	mov	r3, r0
 80045e0:	75fb      	strb	r3, [r7, #23]
      /* LPUART1 clock source configuration done later after clock selection check */
      break;
 80045e2:	e003      	b.n	80045ec <HAL_RCCEx_PeriphCLKConfig+0x8c4>
      /* LSE,  oscillator is used as source of LPUART1 clock */
      /* LPUART1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80045e4:	2301      	movs	r3, #1
 80045e6:	75fb      	strb	r3, [r7, #23]
      break;
 80045e8:	e000      	b.n	80045ec <HAL_RCCEx_PeriphCLKConfig+0x8c4>
      break;
 80045ea:	bf00      	nop
    }

    if(ret == HAL_OK)
 80045ec:	7dfb      	ldrb	r3, [r7, #23]
 80045ee:	2b00      	cmp	r3, #0
 80045f0:	d110      	bne.n	8004614 <HAL_RCCEx_PeriphCLKConfig+0x8ec>
    {
      /* Set the source of LPUART1 clock */
      __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 80045f2:	4b06      	ldr	r3, [pc, #24]	; (800460c <HAL_RCCEx_PeriphCLKConfig+0x8e4>)
 80045f4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80045f6:	f023 0207 	bic.w	r2, r3, #7
 80045fa:	687b      	ldr	r3, [r7, #4]
 80045fc:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8004600:	4902      	ldr	r1, [pc, #8]	; (800460c <HAL_RCCEx_PeriphCLKConfig+0x8e4>)
 8004602:	4313      	orrs	r3, r2
 8004604:	658b      	str	r3, [r1, #88]	; 0x58
 8004606:	e007      	b.n	8004618 <HAL_RCCEx_PeriphCLKConfig+0x8f0>
 8004608:	58024800 	.word	0x58024800
 800460c:	58024400 	.word	0x58024400
 8004610:	00ffffcf 	.word	0x00ffffcf
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004614:	7dfb      	ldrb	r3, [r7, #23]
 8004616:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM1 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8004618:	687b      	ldr	r3, [r7, #4]
 800461a:	681b      	ldr	r3, [r3, #0]
 800461c:	f003 0320 	and.w	r3, r3, #32
 8004620:	2b00      	cmp	r3, #0
 8004622:	d04b      	beq.n	80046bc <HAL_RCCEx_PeriphCLKConfig+0x994>
  {
    switch(PeriphClkInit->Lptim1ClockSelection)
 8004624:	687b      	ldr	r3, [r7, #4]
 8004626:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800462a:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800462e:	d02e      	beq.n	800468e <HAL_RCCEx_PeriphCLKConfig+0x966>
 8004630:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8004634:	d828      	bhi.n	8004688 <HAL_RCCEx_PeriphCLKConfig+0x960>
 8004636:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800463a:	d02a      	beq.n	8004692 <HAL_RCCEx_PeriphCLKConfig+0x96a>
 800463c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004640:	d822      	bhi.n	8004688 <HAL_RCCEx_PeriphCLKConfig+0x960>
 8004642:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8004646:	d026      	beq.n	8004696 <HAL_RCCEx_PeriphCLKConfig+0x96e>
 8004648:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 800464c:	d81c      	bhi.n	8004688 <HAL_RCCEx_PeriphCLKConfig+0x960>
 800464e:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8004652:	d010      	beq.n	8004676 <HAL_RCCEx_PeriphCLKConfig+0x94e>
 8004654:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8004658:	d816      	bhi.n	8004688 <HAL_RCCEx_PeriphCLKConfig+0x960>
 800465a:	2b00      	cmp	r3, #0
 800465c:	d01d      	beq.n	800469a <HAL_RCCEx_PeriphCLKConfig+0x972>
 800465e:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8004662:	d111      	bne.n	8004688 <HAL_RCCEx_PeriphCLKConfig+0x960>
      /* LPTIM1 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM1*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8004664:	687b      	ldr	r3, [r7, #4]
 8004666:	3304      	adds	r3, #4
 8004668:	2100      	movs	r1, #0
 800466a:	4618      	mov	r0, r3
 800466c:	f000 fd14 	bl	8005098 <RCCEx_PLL2_Config>
 8004670:	4603      	mov	r3, r0
 8004672:	75fb      	strb	r3, [r7, #23]

      /* LPTIM1 clock source configuration done later after clock selection check */
      break;
 8004674:	e012      	b.n	800469c <HAL_RCCEx_PeriphCLKConfig+0x974>

    case RCC_LPTIM1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM1*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8004676:	687b      	ldr	r3, [r7, #4]
 8004678:	3324      	adds	r3, #36	; 0x24
 800467a:	2102      	movs	r1, #2
 800467c:	4618      	mov	r0, r3
 800467e:	f000 fdbd 	bl	80051fc <RCCEx_PLL3_Config>
 8004682:	4603      	mov	r3, r0
 8004684:	75fb      	strb	r3, [r7, #23]

      /* LPTIM1 clock source configuration done later after clock selection check */
      break;
 8004686:	e009      	b.n	800469c <HAL_RCCEx_PeriphCLKConfig+0x974>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM1 clock */
      /* LPTIM1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8004688:	2301      	movs	r3, #1
 800468a:	75fb      	strb	r3, [r7, #23]
      break;
 800468c:	e006      	b.n	800469c <HAL_RCCEx_PeriphCLKConfig+0x974>
      break;
 800468e:	bf00      	nop
 8004690:	e004      	b.n	800469c <HAL_RCCEx_PeriphCLKConfig+0x974>
      break;
 8004692:	bf00      	nop
 8004694:	e002      	b.n	800469c <HAL_RCCEx_PeriphCLKConfig+0x974>
      break;
 8004696:	bf00      	nop
 8004698:	e000      	b.n	800469c <HAL_RCCEx_PeriphCLKConfig+0x974>
      break;
 800469a:	bf00      	nop
    }

    if(ret == HAL_OK)
 800469c:	7dfb      	ldrb	r3, [r7, #23]
 800469e:	2b00      	cmp	r3, #0
 80046a0:	d10a      	bne.n	80046b8 <HAL_RCCEx_PeriphCLKConfig+0x990>
    {
      /* Set the source of LPTIM1 clock*/
      __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 80046a2:	4bb2      	ldr	r3, [pc, #712]	; (800496c <HAL_RCCEx_PeriphCLKConfig+0xc44>)
 80046a4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80046a6:	f023 42e0 	bic.w	r2, r3, #1879048192	; 0x70000000
 80046aa:	687b      	ldr	r3, [r7, #4]
 80046ac:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80046b0:	49ae      	ldr	r1, [pc, #696]	; (800496c <HAL_RCCEx_PeriphCLKConfig+0xc44>)
 80046b2:	4313      	orrs	r3, r2
 80046b4:	654b      	str	r3, [r1, #84]	; 0x54
 80046b6:	e001      	b.n	80046bc <HAL_RCCEx_PeriphCLKConfig+0x994>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80046b8:	7dfb      	ldrb	r3, [r7, #23]
 80046ba:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM2 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 80046bc:	687b      	ldr	r3, [r7, #4]
 80046be:	681b      	ldr	r3, [r3, #0]
 80046c0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80046c4:	2b00      	cmp	r3, #0
 80046c6:	d04b      	beq.n	8004760 <HAL_RCCEx_PeriphCLKConfig+0xa38>
  {
    switch(PeriphClkInit->Lptim2ClockSelection)
 80046c8:	687b      	ldr	r3, [r7, #4]
 80046ca:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80046ce:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 80046d2:	d02e      	beq.n	8004732 <HAL_RCCEx_PeriphCLKConfig+0xa0a>
 80046d4:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 80046d8:	d828      	bhi.n	800472c <HAL_RCCEx_PeriphCLKConfig+0xa04>
 80046da:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80046de:	d02a      	beq.n	8004736 <HAL_RCCEx_PeriphCLKConfig+0xa0e>
 80046e0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80046e4:	d822      	bhi.n	800472c <HAL_RCCEx_PeriphCLKConfig+0xa04>
 80046e6:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 80046ea:	d026      	beq.n	800473a <HAL_RCCEx_PeriphCLKConfig+0xa12>
 80046ec:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 80046f0:	d81c      	bhi.n	800472c <HAL_RCCEx_PeriphCLKConfig+0xa04>
 80046f2:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80046f6:	d010      	beq.n	800471a <HAL_RCCEx_PeriphCLKConfig+0x9f2>
 80046f8:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80046fc:	d816      	bhi.n	800472c <HAL_RCCEx_PeriphCLKConfig+0xa04>
 80046fe:	2b00      	cmp	r3, #0
 8004700:	d01d      	beq.n	800473e <HAL_RCCEx_PeriphCLKConfig+0xa16>
 8004702:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004706:	d111      	bne.n	800472c <HAL_RCCEx_PeriphCLKConfig+0xa04>
      /* LPTIM2 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM2CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8004708:	687b      	ldr	r3, [r7, #4]
 800470a:	3304      	adds	r3, #4
 800470c:	2100      	movs	r1, #0
 800470e:	4618      	mov	r0, r3
 8004710:	f000 fcc2 	bl	8005098 <RCCEx_PLL2_Config>
 8004714:	4603      	mov	r3, r0
 8004716:	75fb      	strb	r3, [r7, #23]

      /* LPTIM2 clock source configuration done later after clock selection check */
      break;
 8004718:	e012      	b.n	8004740 <HAL_RCCEx_PeriphCLKConfig+0xa18>

    case RCC_LPTIM2CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 800471a:	687b      	ldr	r3, [r7, #4]
 800471c:	3324      	adds	r3, #36	; 0x24
 800471e:	2102      	movs	r1, #2
 8004720:	4618      	mov	r0, r3
 8004722:	f000 fd6b 	bl	80051fc <RCCEx_PLL3_Config>
 8004726:	4603      	mov	r3, r0
 8004728:	75fb      	strb	r3, [r7, #23]

      /* LPTIM2 clock source configuration done later after clock selection check */
      break;
 800472a:	e009      	b.n	8004740 <HAL_RCCEx_PeriphCLKConfig+0xa18>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM2 clock */
      /* LPTIM2 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800472c:	2301      	movs	r3, #1
 800472e:	75fb      	strb	r3, [r7, #23]
      break;
 8004730:	e006      	b.n	8004740 <HAL_RCCEx_PeriphCLKConfig+0xa18>
      break;
 8004732:	bf00      	nop
 8004734:	e004      	b.n	8004740 <HAL_RCCEx_PeriphCLKConfig+0xa18>
      break;
 8004736:	bf00      	nop
 8004738:	e002      	b.n	8004740 <HAL_RCCEx_PeriphCLKConfig+0xa18>
      break;
 800473a:	bf00      	nop
 800473c:	e000      	b.n	8004740 <HAL_RCCEx_PeriphCLKConfig+0xa18>
      break;
 800473e:	bf00      	nop
    }

    if(ret == HAL_OK)
 8004740:	7dfb      	ldrb	r3, [r7, #23]
 8004742:	2b00      	cmp	r3, #0
 8004744:	d10a      	bne.n	800475c <HAL_RCCEx_PeriphCLKConfig+0xa34>
    {
      /* Set the source of LPTIM2 clock*/
      __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8004746:	4b89      	ldr	r3, [pc, #548]	; (800496c <HAL_RCCEx_PeriphCLKConfig+0xc44>)
 8004748:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800474a:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 800474e:	687b      	ldr	r3, [r7, #4]
 8004750:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004754:	4985      	ldr	r1, [pc, #532]	; (800496c <HAL_RCCEx_PeriphCLKConfig+0xc44>)
 8004756:	4313      	orrs	r3, r2
 8004758:	658b      	str	r3, [r1, #88]	; 0x58
 800475a:	e001      	b.n	8004760 <HAL_RCCEx_PeriphCLKConfig+0xa38>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800475c:	7dfb      	ldrb	r3, [r7, #23]
 800475e:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM345 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
 8004760:	687b      	ldr	r3, [r7, #4]
 8004762:	681b      	ldr	r3, [r3, #0]
 8004764:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004768:	2b00      	cmp	r3, #0
 800476a:	d04b      	beq.n	8004804 <HAL_RCCEx_PeriphCLKConfig+0xadc>
  {
    switch(PeriphClkInit->Lptim345ClockSelection)
 800476c:	687b      	ldr	r3, [r7, #4]
 800476e:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8004772:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 8004776:	d02e      	beq.n	80047d6 <HAL_RCCEx_PeriphCLKConfig+0xaae>
 8004778:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 800477c:	d828      	bhi.n	80047d0 <HAL_RCCEx_PeriphCLKConfig+0xaa8>
 800477e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004782:	d02a      	beq.n	80047da <HAL_RCCEx_PeriphCLKConfig+0xab2>
 8004784:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004788:	d822      	bhi.n	80047d0 <HAL_RCCEx_PeriphCLKConfig+0xaa8>
 800478a:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 800478e:	d026      	beq.n	80047de <HAL_RCCEx_PeriphCLKConfig+0xab6>
 8004790:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 8004794:	d81c      	bhi.n	80047d0 <HAL_RCCEx_PeriphCLKConfig+0xaa8>
 8004796:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800479a:	d010      	beq.n	80047be <HAL_RCCEx_PeriphCLKConfig+0xa96>
 800479c:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80047a0:	d816      	bhi.n	80047d0 <HAL_RCCEx_PeriphCLKConfig+0xaa8>
 80047a2:	2b00      	cmp	r3, #0
 80047a4:	d01d      	beq.n	80047e2 <HAL_RCCEx_PeriphCLKConfig+0xaba>
 80047a6:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80047aa:	d111      	bne.n	80047d0 <HAL_RCCEx_PeriphCLKConfig+0xaa8>
    case RCC_LPTIM345CLKSOURCE_PCLK4:      /* SRD/D3 PCLK1 (PCLK4) as clock source for LPTIM3/4/5 */
      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM345CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM3/4/5 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 80047ac:	687b      	ldr	r3, [r7, #4]
 80047ae:	3304      	adds	r3, #4
 80047b0:	2100      	movs	r1, #0
 80047b2:	4618      	mov	r0, r3
 80047b4:	f000 fc70 	bl	8005098 <RCCEx_PLL2_Config>
 80047b8:	4603      	mov	r3, r0
 80047ba:	75fb      	strb	r3, [r7, #23]

      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;
 80047bc:	e012      	b.n	80047e4 <HAL_RCCEx_PeriphCLKConfig+0xabc>

    case RCC_LPTIM345CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM3/4/5 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 80047be:	687b      	ldr	r3, [r7, #4]
 80047c0:	3324      	adds	r3, #36	; 0x24
 80047c2:	2102      	movs	r1, #2
 80047c4:	4618      	mov	r0, r3
 80047c6:	f000 fd19 	bl	80051fc <RCCEx_PLL3_Config>
 80047ca:	4603      	mov	r3, r0
 80047cc:	75fb      	strb	r3, [r7, #23]

      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;
 80047ce:	e009      	b.n	80047e4 <HAL_RCCEx_PeriphCLKConfig+0xabc>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM3/4/5 clock */
      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80047d0:	2301      	movs	r3, #1
 80047d2:	75fb      	strb	r3, [r7, #23]
      break;
 80047d4:	e006      	b.n	80047e4 <HAL_RCCEx_PeriphCLKConfig+0xabc>
      break;
 80047d6:	bf00      	nop
 80047d8:	e004      	b.n	80047e4 <HAL_RCCEx_PeriphCLKConfig+0xabc>
      break;
 80047da:	bf00      	nop
 80047dc:	e002      	b.n	80047e4 <HAL_RCCEx_PeriphCLKConfig+0xabc>
      break;
 80047de:	bf00      	nop
 80047e0:	e000      	b.n	80047e4 <HAL_RCCEx_PeriphCLKConfig+0xabc>
      break;
 80047e2:	bf00      	nop
    }

    if(ret == HAL_OK)
 80047e4:	7dfb      	ldrb	r3, [r7, #23]
 80047e6:	2b00      	cmp	r3, #0
 80047e8:	d10a      	bne.n	8004800 <HAL_RCCEx_PeriphCLKConfig+0xad8>
    {
      /* Set the source of LPTIM3/4/5 clock */
      __HAL_RCC_LPTIM345_CONFIG(PeriphClkInit->Lptim345ClockSelection);
 80047ea:	4b60      	ldr	r3, [pc, #384]	; (800496c <HAL_RCCEx_PeriphCLKConfig+0xc44>)
 80047ec:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80047ee:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80047f2:	687b      	ldr	r3, [r7, #4]
 80047f4:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80047f8:	495c      	ldr	r1, [pc, #368]	; (800496c <HAL_RCCEx_PeriphCLKConfig+0xc44>)
 80047fa:	4313      	orrs	r3, r2
 80047fc:	658b      	str	r3, [r1, #88]	; 0x58
 80047fe:	e001      	b.n	8004804 <HAL_RCCEx_PeriphCLKConfig+0xadc>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004800:	7dfb      	ldrb	r3, [r7, #23]
 8004802:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*------------------------------ I2C1/2/3/5* Configuration ------------------------*/
#if defined(I2C5)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1235) == RCC_PERIPHCLK_I2C1235)
 8004804:	687b      	ldr	r3, [r7, #4]
 8004806:	681b      	ldr	r3, [r3, #0]
 8004808:	f003 0308 	and.w	r3, r3, #8
 800480c:	2b00      	cmp	r3, #0
 800480e:	d018      	beq.n	8004842 <HAL_RCCEx_PeriphCLKConfig+0xb1a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1235CLKSOURCE(PeriphClkInit->I2c1235ClockSelection));

    if ((PeriphClkInit->I2c1235ClockSelection )== RCC_I2C1235CLKSOURCE_PLL3 )
 8004810:	687b      	ldr	r3, [r7, #4]
 8004812:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8004814:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004818:	d10a      	bne.n	8004830 <HAL_RCCEx_PeriphCLKConfig+0xb08>
    {
        if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!= HAL_OK)
 800481a:	687b      	ldr	r3, [r7, #4]
 800481c:	3324      	adds	r3, #36	; 0x24
 800481e:	2102      	movs	r1, #2
 8004820:	4618      	mov	r0, r3
 8004822:	f000 fceb 	bl	80051fc <RCCEx_PLL3_Config>
 8004826:	4603      	mov	r3, r0
 8004828:	2b00      	cmp	r3, #0
 800482a:	d001      	beq.n	8004830 <HAL_RCCEx_PeriphCLKConfig+0xb08>
        {
          status = HAL_ERROR;
 800482c:	2301      	movs	r3, #1
 800482e:	75bb      	strb	r3, [r7, #22]
        }
    }

      __HAL_RCC_I2C1235_CONFIG(PeriphClkInit->I2c1235ClockSelection);
 8004830:	4b4e      	ldr	r3, [pc, #312]	; (800496c <HAL_RCCEx_PeriphCLKConfig+0xc44>)
 8004832:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004834:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8004838:	687b      	ldr	r3, [r7, #4]
 800483a:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800483c:	494b      	ldr	r1, [pc, #300]	; (800496c <HAL_RCCEx_PeriphCLKConfig+0xc44>)
 800483e:	4313      	orrs	r3, r2
 8004840:	654b      	str	r3, [r1, #84]	; 0x54

  }
#endif /* I2C5 */

  /*------------------------------ I2C4 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8004842:	687b      	ldr	r3, [r7, #4]
 8004844:	681b      	ldr	r3, [r3, #0]
 8004846:	f003 0310 	and.w	r3, r3, #16
 800484a:	2b00      	cmp	r3, #0
 800484c:	d01a      	beq.n	8004884 <HAL_RCCEx_PeriphCLKConfig+0xb5c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    if ((PeriphClkInit->I2c4ClockSelection) == RCC_I2C4CLKSOURCE_PLL3 )
 800484e:	687b      	ldr	r3, [r7, #4]
 8004850:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004854:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004858:	d10a      	bne.n	8004870 <HAL_RCCEx_PeriphCLKConfig+0xb48>
    {
      if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!= HAL_OK)
 800485a:	687b      	ldr	r3, [r7, #4]
 800485c:	3324      	adds	r3, #36	; 0x24
 800485e:	2102      	movs	r1, #2
 8004860:	4618      	mov	r0, r3
 8004862:	f000 fccb 	bl	80051fc <RCCEx_PLL3_Config>
 8004866:	4603      	mov	r3, r0
 8004868:	2b00      	cmp	r3, #0
 800486a:	d001      	beq.n	8004870 <HAL_RCCEx_PeriphCLKConfig+0xb48>
      {
        status = HAL_ERROR;
 800486c:	2301      	movs	r3, #1
 800486e:	75bb      	strb	r3, [r7, #22]
      }
    }

      __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8004870:	4b3e      	ldr	r3, [pc, #248]	; (800496c <HAL_RCCEx_PeriphCLKConfig+0xc44>)
 8004872:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004874:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8004878:	687b      	ldr	r3, [r7, #4]
 800487a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800487e:	493b      	ldr	r1, [pc, #236]	; (800496c <HAL_RCCEx_PeriphCLKConfig+0xc44>)
 8004880:	4313      	orrs	r3, r2
 8004882:	658b      	str	r3, [r1, #88]	; 0x58

  }

  /*---------------------------- ADC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8004884:	687b      	ldr	r3, [r7, #4]
 8004886:	681b      	ldr	r3, [r3, #0]
 8004888:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800488c:	2b00      	cmp	r3, #0
 800488e:	d034      	beq.n	80048fa <HAL_RCCEx_PeriphCLKConfig+0xbd2>
  {
    switch(PeriphClkInit->AdcClockSelection)
 8004890:	687b      	ldr	r3, [r7, #4]
 8004892:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8004896:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800489a:	d01d      	beq.n	80048d8 <HAL_RCCEx_PeriphCLKConfig+0xbb0>
 800489c:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80048a0:	d817      	bhi.n	80048d2 <HAL_RCCEx_PeriphCLKConfig+0xbaa>
 80048a2:	2b00      	cmp	r3, #0
 80048a4:	d003      	beq.n	80048ae <HAL_RCCEx_PeriphCLKConfig+0xb86>
 80048a6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80048aa:	d009      	beq.n	80048c0 <HAL_RCCEx_PeriphCLKConfig+0xb98>
 80048ac:	e011      	b.n	80048d2 <HAL_RCCEx_PeriphCLKConfig+0xbaa>
    {

    case RCC_ADCCLKSOURCE_PLL2: /* PLL2 is used as clock source for ADC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 80048ae:	687b      	ldr	r3, [r7, #4]
 80048b0:	3304      	adds	r3, #4
 80048b2:	2100      	movs	r1, #0
 80048b4:	4618      	mov	r0, r3
 80048b6:	f000 fbef 	bl	8005098 <RCCEx_PLL2_Config>
 80048ba:	4603      	mov	r3, r0
 80048bc:	75fb      	strb	r3, [r7, #23]

      /* ADC clock source configuration done later after clock selection check */
      break;
 80048be:	e00c      	b.n	80048da <HAL_RCCEx_PeriphCLKConfig+0xbb2>

    case RCC_ADCCLKSOURCE_PLL3:  /* PLL3 is used as clock source for ADC*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 80048c0:	687b      	ldr	r3, [r7, #4]
 80048c2:	3324      	adds	r3, #36	; 0x24
 80048c4:	2102      	movs	r1, #2
 80048c6:	4618      	mov	r0, r3
 80048c8:	f000 fc98 	bl	80051fc <RCCEx_PLL3_Config>
 80048cc:	4603      	mov	r3, r0
 80048ce:	75fb      	strb	r3, [r7, #23]

      /* ADC clock source configuration done later after clock selection check */
      break;
 80048d0:	e003      	b.n	80048da <HAL_RCCEx_PeriphCLKConfig+0xbb2>
      /* HSI, HSE, or CSI oscillator is used as source of ADC clock */
      /* ADC clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80048d2:	2301      	movs	r3, #1
 80048d4:	75fb      	strb	r3, [r7, #23]
      break;
 80048d6:	e000      	b.n	80048da <HAL_RCCEx_PeriphCLKConfig+0xbb2>
      break;
 80048d8:	bf00      	nop
    }

    if(ret == HAL_OK)
 80048da:	7dfb      	ldrb	r3, [r7, #23]
 80048dc:	2b00      	cmp	r3, #0
 80048de:	d10a      	bne.n	80048f6 <HAL_RCCEx_PeriphCLKConfig+0xbce>
    {
      /* Set the source of ADC clock*/
      __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 80048e0:	4b22      	ldr	r3, [pc, #136]	; (800496c <HAL_RCCEx_PeriphCLKConfig+0xc44>)
 80048e2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80048e4:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 80048e8:	687b      	ldr	r3, [r7, #4]
 80048ea:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80048ee:	491f      	ldr	r1, [pc, #124]	; (800496c <HAL_RCCEx_PeriphCLKConfig+0xc44>)
 80048f0:	4313      	orrs	r3, r2
 80048f2:	658b      	str	r3, [r1, #88]	; 0x58
 80048f4:	e001      	b.n	80048fa <HAL_RCCEx_PeriphCLKConfig+0xbd2>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80048f6:	7dfb      	ldrb	r3, [r7, #23]
 80048f8:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*------------------------------ USB Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 80048fa:	687b      	ldr	r3, [r7, #4]
 80048fc:	681b      	ldr	r3, [r3, #0]
 80048fe:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8004902:	2b00      	cmp	r3, #0
 8004904:	d036      	beq.n	8004974 <HAL_RCCEx_PeriphCLKConfig+0xc4c>
  {

    switch(PeriphClkInit->UsbClockSelection)
 8004906:	687b      	ldr	r3, [r7, #4]
 8004908:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800490c:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8004910:	d01c      	beq.n	800494c <HAL_RCCEx_PeriphCLKConfig+0xc24>
 8004912:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8004916:	d816      	bhi.n	8004946 <HAL_RCCEx_PeriphCLKConfig+0xc1e>
 8004918:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800491c:	d003      	beq.n	8004926 <HAL_RCCEx_PeriphCLKConfig+0xbfe>
 800491e:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8004922:	d007      	beq.n	8004934 <HAL_RCCEx_PeriphCLKConfig+0xc0c>
 8004924:	e00f      	b.n	8004946 <HAL_RCCEx_PeriphCLKConfig+0xc1e>
    {
    case RCC_USBCLKSOURCE_PLL:      /* PLL is used as clock source for USB*/
      /* Enable USB Clock output generated form System USB . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8004926:	4b11      	ldr	r3, [pc, #68]	; (800496c <HAL_RCCEx_PeriphCLKConfig+0xc44>)
 8004928:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800492a:	4a10      	ldr	r2, [pc, #64]	; (800496c <HAL_RCCEx_PeriphCLKConfig+0xc44>)
 800492c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004930:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* USB clock source configuration done later after clock selection check */
      break;
 8004932:	e00c      	b.n	800494e <HAL_RCCEx_PeriphCLKConfig+0xc26>

    case RCC_USBCLKSOURCE_PLL3: /* PLL3 is used as clock source for USB*/

      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8004934:	687b      	ldr	r3, [r7, #4]
 8004936:	3324      	adds	r3, #36	; 0x24
 8004938:	2101      	movs	r1, #1
 800493a:	4618      	mov	r0, r3
 800493c:	f000 fc5e 	bl	80051fc <RCCEx_PLL3_Config>
 8004940:	4603      	mov	r3, r0
 8004942:	75fb      	strb	r3, [r7, #23]

      /* USB clock source configuration done later after clock selection check */
      break;
 8004944:	e003      	b.n	800494e <HAL_RCCEx_PeriphCLKConfig+0xc26>
      /* HSI48 oscillator is used as source of USB clock */
      /* USB clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8004946:	2301      	movs	r3, #1
 8004948:	75fb      	strb	r3, [r7, #23]
      break;
 800494a:	e000      	b.n	800494e <HAL_RCCEx_PeriphCLKConfig+0xc26>
      break;
 800494c:	bf00      	nop
    }

    if(ret == HAL_OK)
 800494e:	7dfb      	ldrb	r3, [r7, #23]
 8004950:	2b00      	cmp	r3, #0
 8004952:	d10d      	bne.n	8004970 <HAL_RCCEx_PeriphCLKConfig+0xc48>
    {
      /* Set the source of USB clock*/
      __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8004954:	4b05      	ldr	r3, [pc, #20]	; (800496c <HAL_RCCEx_PeriphCLKConfig+0xc44>)
 8004956:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004958:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800495c:	687b      	ldr	r3, [r7, #4]
 800495e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8004962:	4902      	ldr	r1, [pc, #8]	; (800496c <HAL_RCCEx_PeriphCLKConfig+0xc44>)
 8004964:	4313      	orrs	r3, r2
 8004966:	654b      	str	r3, [r1, #84]	; 0x54
 8004968:	e004      	b.n	8004974 <HAL_RCCEx_PeriphCLKConfig+0xc4c>
 800496a:	bf00      	nop
 800496c:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004970:	7dfb      	ldrb	r3, [r7, #23]
 8004972:	75bb      	strb	r3, [r7, #22]
    }

  }

  /*------------------------------------- SDMMC Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == RCC_PERIPHCLK_SDMMC)
 8004974:	687b      	ldr	r3, [r7, #4]
 8004976:	681b      	ldr	r3, [r3, #0]
 8004978:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800497c:	2b00      	cmp	r3, #0
 800497e:	d029      	beq.n	80049d4 <HAL_RCCEx_PeriphCLKConfig+0xcac>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC(PeriphClkInit->SdmmcClockSelection));

    switch(PeriphClkInit->SdmmcClockSelection)
 8004980:	687b      	ldr	r3, [r7, #4]
 8004982:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004984:	2b00      	cmp	r3, #0
 8004986:	d003      	beq.n	8004990 <HAL_RCCEx_PeriphCLKConfig+0xc68>
 8004988:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800498c:	d007      	beq.n	800499e <HAL_RCCEx_PeriphCLKConfig+0xc76>
 800498e:	e00f      	b.n	80049b0 <HAL_RCCEx_PeriphCLKConfig+0xc88>
    {
    case RCC_SDMMCCLKSOURCE_PLL:      /* PLL is used as clock source for SDMMC*/
      /* Enable SDMMC Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8004990:	4b61      	ldr	r3, [pc, #388]	; (8004b18 <HAL_RCCEx_PeriphCLKConfig+0xdf0>)
 8004992:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004994:	4a60      	ldr	r2, [pc, #384]	; (8004b18 <HAL_RCCEx_PeriphCLKConfig+0xdf0>)
 8004996:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800499a:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SDMMC clock source configuration done later after clock selection check */
      break;
 800499c:	e00b      	b.n	80049b6 <HAL_RCCEx_PeriphCLKConfig+0xc8e>

    case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for SDMMC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 800499e:	687b      	ldr	r3, [r7, #4]
 80049a0:	3304      	adds	r3, #4
 80049a2:	2102      	movs	r1, #2
 80049a4:	4618      	mov	r0, r3
 80049a6:	f000 fb77 	bl	8005098 <RCCEx_PLL2_Config>
 80049aa:	4603      	mov	r3, r0
 80049ac:	75fb      	strb	r3, [r7, #23]

      /* SDMMC clock source configuration done later after clock selection check */
      break;
 80049ae:	e002      	b.n	80049b6 <HAL_RCCEx_PeriphCLKConfig+0xc8e>

    default:
      ret = HAL_ERROR;
 80049b0:	2301      	movs	r3, #1
 80049b2:	75fb      	strb	r3, [r7, #23]
      break;
 80049b4:	bf00      	nop
    }

    if(ret == HAL_OK)
 80049b6:	7dfb      	ldrb	r3, [r7, #23]
 80049b8:	2b00      	cmp	r3, #0
 80049ba:	d109      	bne.n	80049d0 <HAL_RCCEx_PeriphCLKConfig+0xca8>
    {
      /* Set the source of SDMMC clock*/
      __HAL_RCC_SDMMC_CONFIG(PeriphClkInit->SdmmcClockSelection);
 80049bc:	4b56      	ldr	r3, [pc, #344]	; (8004b18 <HAL_RCCEx_PeriphCLKConfig+0xdf0>)
 80049be:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80049c0:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 80049c4:	687b      	ldr	r3, [r7, #4]
 80049c6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80049c8:	4953      	ldr	r1, [pc, #332]	; (8004b18 <HAL_RCCEx_PeriphCLKConfig+0xdf0>)
 80049ca:	4313      	orrs	r3, r2
 80049cc:	64cb      	str	r3, [r1, #76]	; 0x4c
 80049ce:	e001      	b.n	80049d4 <HAL_RCCEx_PeriphCLKConfig+0xcac>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80049d0:	7dfb      	ldrb	r3, [r7, #23]
 80049d2:	75bb      	strb	r3, [r7, #22]
    }
  }

#if defined(LTDC)
  /*-------------------------------------- LTDC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 80049d4:	687b      	ldr	r3, [r7, #4]
 80049d6:	681b      	ldr	r3, [r3, #0]
 80049d8:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80049dc:	2b00      	cmp	r3, #0
 80049de:	d00a      	beq.n	80049f6 <HAL_RCCEx_PeriphCLKConfig+0xcce>
  {
    if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!=HAL_OK)
 80049e0:	687b      	ldr	r3, [r7, #4]
 80049e2:	3324      	adds	r3, #36	; 0x24
 80049e4:	2102      	movs	r1, #2
 80049e6:	4618      	mov	r0, r3
 80049e8:	f000 fc08 	bl	80051fc <RCCEx_PLL3_Config>
 80049ec:	4603      	mov	r3, r0
 80049ee:	2b00      	cmp	r3, #0
 80049f0:	d001      	beq.n	80049f6 <HAL_RCCEx_PeriphCLKConfig+0xcce>
    {
      status=HAL_ERROR;
 80049f2:	2301      	movs	r3, #1
 80049f4:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif /* LTDC */

  /*------------------------------ RNG Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 80049f6:	687b      	ldr	r3, [r7, #4]
 80049f8:	681b      	ldr	r3, [r3, #0]
 80049fa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80049fe:	2b00      	cmp	r3, #0
 8004a00:	d030      	beq.n	8004a64 <HAL_RCCEx_PeriphCLKConfig+0xd3c>
  {

    switch(PeriphClkInit->RngClockSelection)
 8004a02:	687b      	ldr	r3, [r7, #4]
 8004a04:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8004a06:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8004a0a:	d017      	beq.n	8004a3c <HAL_RCCEx_PeriphCLKConfig+0xd14>
 8004a0c:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8004a10:	d811      	bhi.n	8004a36 <HAL_RCCEx_PeriphCLKConfig+0xd0e>
 8004a12:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004a16:	d013      	beq.n	8004a40 <HAL_RCCEx_PeriphCLKConfig+0xd18>
 8004a18:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004a1c:	d80b      	bhi.n	8004a36 <HAL_RCCEx_PeriphCLKConfig+0xd0e>
 8004a1e:	2b00      	cmp	r3, #0
 8004a20:	d010      	beq.n	8004a44 <HAL_RCCEx_PeriphCLKConfig+0xd1c>
 8004a22:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004a26:	d106      	bne.n	8004a36 <HAL_RCCEx_PeriphCLKConfig+0xd0e>
    {
    case RCC_RNGCLKSOURCE_PLL:     /* PLL is used as clock source for RNG*/
      /* Enable RNG Clock output generated form System RNG . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8004a28:	4b3b      	ldr	r3, [pc, #236]	; (8004b18 <HAL_RCCEx_PeriphCLKConfig+0xdf0>)
 8004a2a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004a2c:	4a3a      	ldr	r2, [pc, #232]	; (8004b18 <HAL_RCCEx_PeriphCLKConfig+0xdf0>)
 8004a2e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004a32:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* RNG clock source configuration done later after clock selection check */
      break;
 8004a34:	e007      	b.n	8004a46 <HAL_RCCEx_PeriphCLKConfig+0xd1e>
      /* HSI48 oscillator is used as source of RNG clock */
      /* RNG clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8004a36:	2301      	movs	r3, #1
 8004a38:	75fb      	strb	r3, [r7, #23]
      break;
 8004a3a:	e004      	b.n	8004a46 <HAL_RCCEx_PeriphCLKConfig+0xd1e>
      break;
 8004a3c:	bf00      	nop
 8004a3e:	e002      	b.n	8004a46 <HAL_RCCEx_PeriphCLKConfig+0xd1e>
      break;
 8004a40:	bf00      	nop
 8004a42:	e000      	b.n	8004a46 <HAL_RCCEx_PeriphCLKConfig+0xd1e>
      break;
 8004a44:	bf00      	nop
    }

    if(ret == HAL_OK)
 8004a46:	7dfb      	ldrb	r3, [r7, #23]
 8004a48:	2b00      	cmp	r3, #0
 8004a4a:	d109      	bne.n	8004a60 <HAL_RCCEx_PeriphCLKConfig+0xd38>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8004a4c:	4b32      	ldr	r3, [pc, #200]	; (8004b18 <HAL_RCCEx_PeriphCLKConfig+0xdf0>)
 8004a4e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004a50:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8004a54:	687b      	ldr	r3, [r7, #4]
 8004a56:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8004a58:	492f      	ldr	r1, [pc, #188]	; (8004b18 <HAL_RCCEx_PeriphCLKConfig+0xdf0>)
 8004a5a:	4313      	orrs	r3, r2
 8004a5c:	654b      	str	r3, [r1, #84]	; 0x54
 8004a5e:	e001      	b.n	8004a64 <HAL_RCCEx_PeriphCLKConfig+0xd3c>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004a60:	7dfb      	ldrb	r3, [r7, #23]
 8004a62:	75bb      	strb	r3, [r7, #22]
    }

  }

  /*------------------------------ SWPMI1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8004a64:	687b      	ldr	r3, [r7, #4]
 8004a66:	681b      	ldr	r3, [r3, #0]
 8004a68:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8004a6c:	2b00      	cmp	r3, #0
 8004a6e:	d008      	beq.n	8004a82 <HAL_RCCEx_PeriphCLKConfig+0xd5a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 interface clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8004a70:	4b29      	ldr	r3, [pc, #164]	; (8004b18 <HAL_RCCEx_PeriphCLKConfig+0xdf0>)
 8004a72:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004a74:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8004a78:	687b      	ldr	r3, [r7, #4]
 8004a7a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8004a7c:	4926      	ldr	r1, [pc, #152]	; (8004b18 <HAL_RCCEx_PeriphCLKConfig+0xdf0>)
 8004a7e:	4313      	orrs	r3, r2
 8004a80:	650b      	str	r3, [r1, #80]	; 0x50
    /* Configure the HRTIM1 clock source */
    __HAL_RCC_HRTIM1_CONFIG(PeriphClkInit->Hrtim1ClockSelection);
  }
#endif  /*HRTIM1*/
  /*------------------------------ DFSDM1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8004a82:	687b      	ldr	r3, [r7, #4]
 8004a84:	681b      	ldr	r3, [r3, #0]
 8004a86:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8004a8a:	2b00      	cmp	r3, #0
 8004a8c:	d008      	beq.n	8004aa0 <HAL_RCCEx_PeriphCLKConfig+0xd78>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8004a8e:	4b22      	ldr	r3, [pc, #136]	; (8004b18 <HAL_RCCEx_PeriphCLKConfig+0xdf0>)
 8004a90:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004a92:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 8004a96:	687b      	ldr	r3, [r7, #4]
 8004a98:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8004a9a:	491f      	ldr	r1, [pc, #124]	; (8004b18 <HAL_RCCEx_PeriphCLKConfig+0xdf0>)
 8004a9c:	4313      	orrs	r3, r2
 8004a9e:	650b      	str	r3, [r1, #80]	; 0x50
    __HAL_RCC_DFSDM2_CONFIG(PeriphClkInit->Dfsdm2ClockSelection);
  }
#endif  /* DFSDM2 */

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
 8004aa0:	687b      	ldr	r3, [r7, #4]
 8004aa2:	681b      	ldr	r3, [r3, #0]
 8004aa4:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8004aa8:	2b00      	cmp	r3, #0
 8004aaa:	d00d      	beq.n	8004ac8 <HAL_RCCEx_PeriphCLKConfig+0xda0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8004aac:	4b1a      	ldr	r3, [pc, #104]	; (8004b18 <HAL_RCCEx_PeriphCLKConfig+0xdf0>)
 8004aae:	691b      	ldr	r3, [r3, #16]
 8004ab0:	4a19      	ldr	r2, [pc, #100]	; (8004b18 <HAL_RCCEx_PeriphCLKConfig+0xdf0>)
 8004ab2:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8004ab6:	6113      	str	r3, [r2, #16]
 8004ab8:	4b17      	ldr	r3, [pc, #92]	; (8004b18 <HAL_RCCEx_PeriphCLKConfig+0xdf0>)
 8004aba:	691a      	ldr	r2, [r3, #16]
 8004abc:	687b      	ldr	r3, [r7, #4]
 8004abe:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8004ac2:	4915      	ldr	r1, [pc, #84]	; (8004b18 <HAL_RCCEx_PeriphCLKConfig+0xdf0>)
 8004ac4:	4313      	orrs	r3, r2
 8004ac6:	610b      	str	r3, [r1, #16]
  }

  /*------------------------------------ CKPER configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
 8004ac8:	687b      	ldr	r3, [r7, #4]
 8004aca:	681b      	ldr	r3, [r3, #0]
 8004acc:	2b00      	cmp	r3, #0
 8004ace:	da08      	bge.n	8004ae2 <HAL_RCCEx_PeriphCLKConfig+0xdba>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLKPSOURCE(PeriphClkInit->CkperClockSelection));

    /* Configure the CKPER clock source */
    __HAL_RCC_CLKP_CONFIG(PeriphClkInit->CkperClockSelection);
 8004ad0:	4b11      	ldr	r3, [pc, #68]	; (8004b18 <HAL_RCCEx_PeriphCLKConfig+0xdf0>)
 8004ad2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004ad4:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8004ad8:	687b      	ldr	r3, [r7, #4]
 8004ada:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004adc:	490e      	ldr	r1, [pc, #56]	; (8004b18 <HAL_RCCEx_PeriphCLKConfig+0xdf0>)
 8004ade:	4313      	orrs	r3, r2
 8004ae0:	64cb      	str	r3, [r1, #76]	; 0x4c
  }

  /*------------------------------ CEC Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8004ae2:	687b      	ldr	r3, [r7, #4]
 8004ae4:	681b      	ldr	r3, [r3, #0]
 8004ae6:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8004aea:	2b00      	cmp	r3, #0
 8004aec:	d009      	beq.n	8004b02 <HAL_RCCEx_PeriphCLKConfig+0xdda>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC interface clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8004aee:	4b0a      	ldr	r3, [pc, #40]	; (8004b18 <HAL_RCCEx_PeriphCLKConfig+0xdf0>)
 8004af0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004af2:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8004af6:	687b      	ldr	r3, [r7, #4]
 8004af8:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004afc:	4906      	ldr	r1, [pc, #24]	; (8004b18 <HAL_RCCEx_PeriphCLKConfig+0xdf0>)
 8004afe:	4313      	orrs	r3, r2
 8004b00:	654b      	str	r3, [r1, #84]	; 0x54
  }

  if (status == HAL_OK)
 8004b02:	7dbb      	ldrb	r3, [r7, #22]
 8004b04:	2b00      	cmp	r3, #0
 8004b06:	d101      	bne.n	8004b0c <HAL_RCCEx_PeriphCLKConfig+0xde4>
  {
    return HAL_OK;
 8004b08:	2300      	movs	r3, #0
 8004b0a:	e000      	b.n	8004b0e <HAL_RCCEx_PeriphCLKConfig+0xde6>
  }
  return HAL_ERROR;
 8004b0c:	2301      	movs	r3, #1
}
 8004b0e:	4618      	mov	r0, r3
 8004b10:	3718      	adds	r7, #24
 8004b12:	46bd      	mov	sp, r7
 8004b14:	bd80      	pop	{r7, pc}
 8004b16:	bf00      	nop
 8004b18:	58024400 	.word	0x58024400

08004b1c <HAL_RCCEx_GetD3PCLK1Freq>:
  * @note   Each time D3PCLK1 changes, this function must be called to update the
  *         right D3PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval D3PCLK1 frequency
  */
uint32_t HAL_RCCEx_GetD3PCLK1Freq(void)
{
 8004b1c:	b580      	push	{r7, lr}
 8004b1e:	af00      	add	r7, sp, #0
#if defined(RCC_D3CFGR_D3PPRE)
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->D3CFGR & RCC_D3CFGR_D3PPRE)>> RCC_D3CFGR_D3PPRE_Pos] & 0x1FU));
 8004b20:	f7ff f8a6 	bl	8003c70 <HAL_RCC_GetHCLKFreq>
 8004b24:	4602      	mov	r2, r0
 8004b26:	4b06      	ldr	r3, [pc, #24]	; (8004b40 <HAL_RCCEx_GetD3PCLK1Freq+0x24>)
 8004b28:	6a1b      	ldr	r3, [r3, #32]
 8004b2a:	091b      	lsrs	r3, r3, #4
 8004b2c:	f003 0307 	and.w	r3, r3, #7
 8004b30:	4904      	ldr	r1, [pc, #16]	; (8004b44 <HAL_RCCEx_GetD3PCLK1Freq+0x28>)
 8004b32:	5ccb      	ldrb	r3, [r1, r3]
 8004b34:	f003 031f 	and.w	r3, r3, #31
 8004b38:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE)>> RCC_SRDCFGR_SRDPPRE_Pos] & 0x1FU));
#endif
}
 8004b3c:	4618      	mov	r0, r3
 8004b3e:	bd80      	pop	{r7, pc}
 8004b40:	58024400 	.word	0x58024400
 8004b44:	08008f1c 	.word	0x08008f1c

08004b48 <HAL_RCCEx_GetPLL2ClockFreq>:
  *         right PLL2CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL2_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL2ClockFreq(PLL2_ClocksTypeDef* PLL2_Clocks)
{
 8004b48:	b480      	push	{r7}
 8004b4a:	b089      	sub	sp, #36	; 0x24
 8004b4c:	af00      	add	r7, sp, #0
 8004b4e:	6078      	str	r0, [r7, #4]
  float_t fracn2, pll2vco;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL2M) * PLL2N
     PLL2xCLK = PLL2_VCO / PLL2x
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8004b50:	4ba1      	ldr	r3, [pc, #644]	; (8004dd8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8004b52:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004b54:	f003 0303 	and.w	r3, r3, #3
 8004b58:	61bb      	str	r3, [r7, #24]
  pll2m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM2)>> 12);
 8004b5a:	4b9f      	ldr	r3, [pc, #636]	; (8004dd8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8004b5c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004b5e:	0b1b      	lsrs	r3, r3, #12
 8004b60:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8004b64:	617b      	str	r3, [r7, #20]
  pll2fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL2FRACEN) >> RCC_PLLCFGR_PLL2FRACEN_Pos;
 8004b66:	4b9c      	ldr	r3, [pc, #624]	; (8004dd8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8004b68:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004b6a:	091b      	lsrs	r3, r3, #4
 8004b6c:	f003 0301 	and.w	r3, r3, #1
 8004b70:	613b      	str	r3, [r7, #16]
  fracn2 =(float_t)(uint32_t)(pll2fracen* ((RCC->PLL2FRACR & RCC_PLL2FRACR_FRACN2)>> 3));
 8004b72:	4b99      	ldr	r3, [pc, #612]	; (8004dd8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8004b74:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004b76:	08db      	lsrs	r3, r3, #3
 8004b78:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8004b7c:	693a      	ldr	r2, [r7, #16]
 8004b7e:	fb02 f303 	mul.w	r3, r2, r3
 8004b82:	ee07 3a90 	vmov	s15, r3
 8004b86:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004b8a:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll2m != 0U)
 8004b8e:	697b      	ldr	r3, [r7, #20]
 8004b90:	2b00      	cmp	r3, #0
 8004b92:	f000 8111 	beq.w	8004db8 <HAL_RCCEx_GetPLL2ClockFreq+0x270>
  {
    switch (pllsource)
 8004b96:	69bb      	ldr	r3, [r7, #24]
 8004b98:	2b02      	cmp	r3, #2
 8004b9a:	f000 8083 	beq.w	8004ca4 <HAL_RCCEx_GetPLL2ClockFreq+0x15c>
 8004b9e:	69bb      	ldr	r3, [r7, #24]
 8004ba0:	2b02      	cmp	r3, #2
 8004ba2:	f200 80a1 	bhi.w	8004ce8 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
 8004ba6:	69bb      	ldr	r3, [r7, #24]
 8004ba8:	2b00      	cmp	r3, #0
 8004baa:	d003      	beq.n	8004bb4 <HAL_RCCEx_GetPLL2ClockFreq+0x6c>
 8004bac:	69bb      	ldr	r3, [r7, #24]
 8004bae:	2b01      	cmp	r3, #1
 8004bb0:	d056      	beq.n	8004c60 <HAL_RCCEx_GetPLL2ClockFreq+0x118>
 8004bb2:	e099      	b.n	8004ce8 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
    {

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8004bb4:	4b88      	ldr	r3, [pc, #544]	; (8004dd8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8004bb6:	681b      	ldr	r3, [r3, #0]
 8004bb8:	f003 0320 	and.w	r3, r3, #32
 8004bbc:	2b00      	cmp	r3, #0
 8004bbe:	d02d      	beq.n	8004c1c <HAL_RCCEx_GetPLL2ClockFreq+0xd4>
      {
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8004bc0:	4b85      	ldr	r3, [pc, #532]	; (8004dd8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8004bc2:	681b      	ldr	r3, [r3, #0]
 8004bc4:	08db      	lsrs	r3, r3, #3
 8004bc6:	f003 0303 	and.w	r3, r3, #3
 8004bca:	4a84      	ldr	r2, [pc, #528]	; (8004ddc <HAL_RCCEx_GetPLL2ClockFreq+0x294>)
 8004bcc:	fa22 f303 	lsr.w	r3, r2, r3
 8004bd0:	60bb      	str	r3, [r7, #8]
        pll2vco = ( (float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 8004bd2:	68bb      	ldr	r3, [r7, #8]
 8004bd4:	ee07 3a90 	vmov	s15, r3
 8004bd8:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004bdc:	697b      	ldr	r3, [r7, #20]
 8004bde:	ee07 3a90 	vmov	s15, r3
 8004be2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004be6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004bea:	4b7b      	ldr	r3, [pc, #492]	; (8004dd8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8004bec:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004bee:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004bf2:	ee07 3a90 	vmov	s15, r3
 8004bf6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004bfa:	ed97 6a03 	vldr	s12, [r7, #12]
 8004bfe:	eddf 5a78 	vldr	s11, [pc, #480]	; 8004de0 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8004c02:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004c06:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004c0a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8004c0e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004c12:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004c16:	edc7 7a07 	vstr	s15, [r7, #28]
      }
      else
      {
        pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
      }
      break;
 8004c1a:	e087      	b.n	8004d2c <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>
        pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 8004c1c:	697b      	ldr	r3, [r7, #20]
 8004c1e:	ee07 3a90 	vmov	s15, r3
 8004c22:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004c26:	eddf 6a6f 	vldr	s13, [pc, #444]	; 8004de4 <HAL_RCCEx_GetPLL2ClockFreq+0x29c>
 8004c2a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004c2e:	4b6a      	ldr	r3, [pc, #424]	; (8004dd8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8004c30:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004c32:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004c36:	ee07 3a90 	vmov	s15, r3
 8004c3a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004c3e:	ed97 6a03 	vldr	s12, [r7, #12]
 8004c42:	eddf 5a67 	vldr	s11, [pc, #412]	; 8004de0 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8004c46:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004c4a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004c4e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8004c52:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004c56:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004c5a:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8004c5e:	e065      	b.n	8004d2c <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

    case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
      pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 8004c60:	697b      	ldr	r3, [r7, #20]
 8004c62:	ee07 3a90 	vmov	s15, r3
 8004c66:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004c6a:	eddf 6a5f 	vldr	s13, [pc, #380]	; 8004de8 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 8004c6e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004c72:	4b59      	ldr	r3, [pc, #356]	; (8004dd8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8004c74:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004c76:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004c7a:	ee07 3a90 	vmov	s15, r3
 8004c7e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004c82:	ed97 6a03 	vldr	s12, [r7, #12]
 8004c86:	eddf 5a56 	vldr	s11, [pc, #344]	; 8004de0 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8004c8a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004c8e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004c92:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8004c96:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004c9a:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004c9e:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8004ca2:	e043      	b.n	8004d2c <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 8004ca4:	697b      	ldr	r3, [r7, #20]
 8004ca6:	ee07 3a90 	vmov	s15, r3
 8004caa:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004cae:	eddf 6a4f 	vldr	s13, [pc, #316]	; 8004dec <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>
 8004cb2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004cb6:	4b48      	ldr	r3, [pc, #288]	; (8004dd8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8004cb8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004cba:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004cbe:	ee07 3a90 	vmov	s15, r3
 8004cc2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004cc6:	ed97 6a03 	vldr	s12, [r7, #12]
 8004cca:	eddf 5a45 	vldr	s11, [pc, #276]	; 8004de0 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8004cce:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004cd2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004cd6:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8004cda:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004cde:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004ce2:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8004ce6:	e021      	b.n	8004d2c <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

    default:
      pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 8004ce8:	697b      	ldr	r3, [r7, #20]
 8004cea:	ee07 3a90 	vmov	s15, r3
 8004cee:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004cf2:	eddf 6a3d 	vldr	s13, [pc, #244]	; 8004de8 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 8004cf6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004cfa:	4b37      	ldr	r3, [pc, #220]	; (8004dd8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8004cfc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004cfe:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004d02:	ee07 3a90 	vmov	s15, r3
 8004d06:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004d0a:	ed97 6a03 	vldr	s12, [r7, #12]
 8004d0e:	eddf 5a34 	vldr	s11, [pc, #208]	; 8004de0 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8004d12:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004d16:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004d1a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8004d1e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004d22:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004d26:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8004d2a:	bf00      	nop
    }
    PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_P2) >>9)  + (float_t)1 )) ;
 8004d2c:	4b2a      	ldr	r3, [pc, #168]	; (8004dd8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8004d2e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004d30:	0a5b      	lsrs	r3, r3, #9
 8004d32:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8004d36:	ee07 3a90 	vmov	s15, r3
 8004d3a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004d3e:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8004d42:	ee37 7a87 	vadd.f32	s14, s15, s14
 8004d46:	edd7 6a07 	vldr	s13, [r7, #28]
 8004d4a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8004d4e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8004d52:	ee17 2a90 	vmov	r2, s15
 8004d56:	687b      	ldr	r3, [r7, #4]
 8004d58:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_Q2) >>16) + (float_t)1 )) ;
 8004d5a:	4b1f      	ldr	r3, [pc, #124]	; (8004dd8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8004d5c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004d5e:	0c1b      	lsrs	r3, r3, #16
 8004d60:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8004d64:	ee07 3a90 	vmov	s15, r3
 8004d68:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004d6c:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8004d70:	ee37 7a87 	vadd.f32	s14, s15, s14
 8004d74:	edd7 6a07 	vldr	s13, [r7, #28]
 8004d78:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8004d7c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8004d80:	ee17 2a90 	vmov	r2, s15
 8004d84:	687b      	ldr	r3, [r7, #4]
 8004d86:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_R2) >>24) + (float_t)1 )) ;
 8004d88:	4b13      	ldr	r3, [pc, #76]	; (8004dd8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8004d8a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004d8c:	0e1b      	lsrs	r3, r3, #24
 8004d8e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8004d92:	ee07 3a90 	vmov	s15, r3
 8004d96:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004d9a:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8004d9e:	ee37 7a87 	vadd.f32	s14, s15, s14
 8004da2:	edd7 6a07 	vldr	s13, [r7, #28]
 8004da6:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8004daa:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8004dae:	ee17 2a90 	vmov	r2, s15
 8004db2:	687b      	ldr	r3, [r7, #4]
 8004db4:	609a      	str	r2, [r3, #8]
  {
    PLL2_Clocks->PLL2_P_Frequency = 0U;
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
    PLL2_Clocks->PLL2_R_Frequency = 0U;
  }
}
 8004db6:	e008      	b.n	8004dca <HAL_RCCEx_GetPLL2ClockFreq+0x282>
    PLL2_Clocks->PLL2_P_Frequency = 0U;
 8004db8:	687b      	ldr	r3, [r7, #4]
 8004dba:	2200      	movs	r2, #0
 8004dbc:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
 8004dbe:	687b      	ldr	r3, [r7, #4]
 8004dc0:	2200      	movs	r2, #0
 8004dc2:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = 0U;
 8004dc4:	687b      	ldr	r3, [r7, #4]
 8004dc6:	2200      	movs	r2, #0
 8004dc8:	609a      	str	r2, [r3, #8]
}
 8004dca:	bf00      	nop
 8004dcc:	3724      	adds	r7, #36	; 0x24
 8004dce:	46bd      	mov	sp, r7
 8004dd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004dd4:	4770      	bx	lr
 8004dd6:	bf00      	nop
 8004dd8:	58024400 	.word	0x58024400
 8004ddc:	03d09000 	.word	0x03d09000
 8004de0:	46000000 	.word	0x46000000
 8004de4:	4c742400 	.word	0x4c742400
 8004de8:	4a742400 	.word	0x4a742400
 8004dec:	4af42400 	.word	0x4af42400

08004df0 <HAL_RCCEx_GetPLL3ClockFreq>:
  *         right PLL3CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL3_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL3ClockFreq(PLL3_ClocksTypeDef* PLL3_Clocks)
{
 8004df0:	b480      	push	{r7}
 8004df2:	b089      	sub	sp, #36	; 0x24
 8004df4:	af00      	add	r7, sp, #0
 8004df6:	6078      	str	r0, [r7, #4]
  float_t fracn3, pll3vco;

  /* PLL3_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL3M) * PLL3N
     PLL3xCLK = PLL3_VCO / PLLxR
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8004df8:	4ba1      	ldr	r3, [pc, #644]	; (8005080 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8004dfa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004dfc:	f003 0303 	and.w	r3, r3, #3
 8004e00:	61bb      	str	r3, [r7, #24]
  pll3m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM3)>> 20)  ;
 8004e02:	4b9f      	ldr	r3, [pc, #636]	; (8005080 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8004e04:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004e06:	0d1b      	lsrs	r3, r3, #20
 8004e08:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8004e0c:	617b      	str	r3, [r7, #20]
  pll3fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL3FRACEN) >> RCC_PLLCFGR_PLL3FRACEN_Pos;
 8004e0e:	4b9c      	ldr	r3, [pc, #624]	; (8005080 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8004e10:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004e12:	0a1b      	lsrs	r3, r3, #8
 8004e14:	f003 0301 	and.w	r3, r3, #1
 8004e18:	613b      	str	r3, [r7, #16]
  fracn3 = (float_t)(uint32_t)(pll3fracen* ((RCC->PLL3FRACR & RCC_PLL3FRACR_FRACN3)>> 3));
 8004e1a:	4b99      	ldr	r3, [pc, #612]	; (8005080 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8004e1c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004e1e:	08db      	lsrs	r3, r3, #3
 8004e20:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8004e24:	693a      	ldr	r2, [r7, #16]
 8004e26:	fb02 f303 	mul.w	r3, r2, r3
 8004e2a:	ee07 3a90 	vmov	s15, r3
 8004e2e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004e32:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll3m != 0U)
 8004e36:	697b      	ldr	r3, [r7, #20]
 8004e38:	2b00      	cmp	r3, #0
 8004e3a:	f000 8111 	beq.w	8005060 <HAL_RCCEx_GetPLL3ClockFreq+0x270>
  {
    switch (pllsource)
 8004e3e:	69bb      	ldr	r3, [r7, #24]
 8004e40:	2b02      	cmp	r3, #2
 8004e42:	f000 8083 	beq.w	8004f4c <HAL_RCCEx_GetPLL3ClockFreq+0x15c>
 8004e46:	69bb      	ldr	r3, [r7, #24]
 8004e48:	2b02      	cmp	r3, #2
 8004e4a:	f200 80a1 	bhi.w	8004f90 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
 8004e4e:	69bb      	ldr	r3, [r7, #24]
 8004e50:	2b00      	cmp	r3, #0
 8004e52:	d003      	beq.n	8004e5c <HAL_RCCEx_GetPLL3ClockFreq+0x6c>
 8004e54:	69bb      	ldr	r3, [r7, #24]
 8004e56:	2b01      	cmp	r3, #1
 8004e58:	d056      	beq.n	8004f08 <HAL_RCCEx_GetPLL3ClockFreq+0x118>
 8004e5a:	e099      	b.n	8004f90 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8004e5c:	4b88      	ldr	r3, [pc, #544]	; (8005080 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8004e5e:	681b      	ldr	r3, [r3, #0]
 8004e60:	f003 0320 	and.w	r3, r3, #32
 8004e64:	2b00      	cmp	r3, #0
 8004e66:	d02d      	beq.n	8004ec4 <HAL_RCCEx_GetPLL3ClockFreq+0xd4>
      {
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8004e68:	4b85      	ldr	r3, [pc, #532]	; (8005080 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8004e6a:	681b      	ldr	r3, [r3, #0]
 8004e6c:	08db      	lsrs	r3, r3, #3
 8004e6e:	f003 0303 	and.w	r3, r3, #3
 8004e72:	4a84      	ldr	r2, [pc, #528]	; (8005084 <HAL_RCCEx_GetPLL3ClockFreq+0x294>)
 8004e74:	fa22 f303 	lsr.w	r3, r2, r3
 8004e78:	60bb      	str	r3, [r7, #8]
        pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 8004e7a:	68bb      	ldr	r3, [r7, #8]
 8004e7c:	ee07 3a90 	vmov	s15, r3
 8004e80:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004e84:	697b      	ldr	r3, [r7, #20]
 8004e86:	ee07 3a90 	vmov	s15, r3
 8004e8a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004e8e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004e92:	4b7b      	ldr	r3, [pc, #492]	; (8005080 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8004e94:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004e96:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004e9a:	ee07 3a90 	vmov	s15, r3
 8004e9e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004ea2:	ed97 6a03 	vldr	s12, [r7, #12]
 8004ea6:	eddf 5a78 	vldr	s11, [pc, #480]	; 8005088 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8004eaa:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004eae:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004eb2:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8004eb6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004eba:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004ebe:	edc7 7a07 	vstr	s15, [r7, #28]
      }
      else
      {
        pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
      }
      break;
 8004ec2:	e087      	b.n	8004fd4 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
        pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 8004ec4:	697b      	ldr	r3, [r7, #20]
 8004ec6:	ee07 3a90 	vmov	s15, r3
 8004eca:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004ece:	eddf 6a6f 	vldr	s13, [pc, #444]	; 800508c <HAL_RCCEx_GetPLL3ClockFreq+0x29c>
 8004ed2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004ed6:	4b6a      	ldr	r3, [pc, #424]	; (8005080 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8004ed8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004eda:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004ede:	ee07 3a90 	vmov	s15, r3
 8004ee2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004ee6:	ed97 6a03 	vldr	s12, [r7, #12]
 8004eea:	eddf 5a67 	vldr	s11, [pc, #412]	; 8005088 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8004eee:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004ef2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004ef6:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8004efa:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004efe:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004f02:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8004f06:	e065      	b.n	8004fd4 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
    case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
      pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 8004f08:	697b      	ldr	r3, [r7, #20]
 8004f0a:	ee07 3a90 	vmov	s15, r3
 8004f0e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004f12:	eddf 6a5f 	vldr	s13, [pc, #380]	; 8005090 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 8004f16:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004f1a:	4b59      	ldr	r3, [pc, #356]	; (8005080 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8004f1c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004f1e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004f22:	ee07 3a90 	vmov	s15, r3
 8004f26:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004f2a:	ed97 6a03 	vldr	s12, [r7, #12]
 8004f2e:	eddf 5a56 	vldr	s11, [pc, #344]	; 8005088 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8004f32:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004f36:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004f3a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8004f3e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004f42:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004f46:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8004f4a:	e043      	b.n	8004fd4 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 8004f4c:	697b      	ldr	r3, [r7, #20]
 8004f4e:	ee07 3a90 	vmov	s15, r3
 8004f52:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004f56:	eddf 6a4f 	vldr	s13, [pc, #316]	; 8005094 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>
 8004f5a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004f5e:	4b48      	ldr	r3, [pc, #288]	; (8005080 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8004f60:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004f62:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004f66:	ee07 3a90 	vmov	s15, r3
 8004f6a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004f6e:	ed97 6a03 	vldr	s12, [r7, #12]
 8004f72:	eddf 5a45 	vldr	s11, [pc, #276]	; 8005088 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8004f76:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004f7a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004f7e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8004f82:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004f86:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004f8a:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8004f8e:	e021      	b.n	8004fd4 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

    default:
      pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 8004f90:	697b      	ldr	r3, [r7, #20]
 8004f92:	ee07 3a90 	vmov	s15, r3
 8004f96:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004f9a:	eddf 6a3d 	vldr	s13, [pc, #244]	; 8005090 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 8004f9e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004fa2:	4b37      	ldr	r3, [pc, #220]	; (8005080 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8004fa4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004fa6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004faa:	ee07 3a90 	vmov	s15, r3
 8004fae:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004fb2:	ed97 6a03 	vldr	s12, [r7, #12]
 8004fb6:	eddf 5a34 	vldr	s11, [pc, #208]	; 8005088 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8004fba:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004fbe:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004fc2:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8004fc6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004fca:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004fce:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8004fd2:	bf00      	nop
    }
    PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_P3) >>9)  + (float_t)1 )) ;
 8004fd4:	4b2a      	ldr	r3, [pc, #168]	; (8005080 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8004fd6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004fd8:	0a5b      	lsrs	r3, r3, #9
 8004fda:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8004fde:	ee07 3a90 	vmov	s15, r3
 8004fe2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004fe6:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8004fea:	ee37 7a87 	vadd.f32	s14, s15, s14
 8004fee:	edd7 6a07 	vldr	s13, [r7, #28]
 8004ff2:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8004ff6:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8004ffa:	ee17 2a90 	vmov	r2, s15
 8004ffe:	687b      	ldr	r3, [r7, #4]
 8005000:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_Q3) >>16) + (float_t)1 )) ;
 8005002:	4b1f      	ldr	r3, [pc, #124]	; (8005080 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8005004:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005006:	0c1b      	lsrs	r3, r3, #16
 8005008:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800500c:	ee07 3a90 	vmov	s15, r3
 8005010:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005014:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8005018:	ee37 7a87 	vadd.f32	s14, s15, s14
 800501c:	edd7 6a07 	vldr	s13, [r7, #28]
 8005020:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8005024:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8005028:	ee17 2a90 	vmov	r2, s15
 800502c:	687b      	ldr	r3, [r7, #4]
 800502e:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_R3) >>24) + (float_t)1 )) ;
 8005030:	4b13      	ldr	r3, [pc, #76]	; (8005080 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8005032:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005034:	0e1b      	lsrs	r3, r3, #24
 8005036:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800503a:	ee07 3a90 	vmov	s15, r3
 800503e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005042:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8005046:	ee37 7a87 	vadd.f32	s14, s15, s14
 800504a:	edd7 6a07 	vldr	s13, [r7, #28]
 800504e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8005052:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8005056:	ee17 2a90 	vmov	r2, s15
 800505a:	687b      	ldr	r3, [r7, #4]
 800505c:	609a      	str	r2, [r3, #8]
    PLL3_Clocks->PLL3_P_Frequency = 0U;
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
    PLL3_Clocks->PLL3_R_Frequency = 0U;
  }

}
 800505e:	e008      	b.n	8005072 <HAL_RCCEx_GetPLL3ClockFreq+0x282>
    PLL3_Clocks->PLL3_P_Frequency = 0U;
 8005060:	687b      	ldr	r3, [r7, #4]
 8005062:	2200      	movs	r2, #0
 8005064:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
 8005066:	687b      	ldr	r3, [r7, #4]
 8005068:	2200      	movs	r2, #0
 800506a:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = 0U;
 800506c:	687b      	ldr	r3, [r7, #4]
 800506e:	2200      	movs	r2, #0
 8005070:	609a      	str	r2, [r3, #8]
}
 8005072:	bf00      	nop
 8005074:	3724      	adds	r7, #36	; 0x24
 8005076:	46bd      	mov	sp, r7
 8005078:	f85d 7b04 	ldr.w	r7, [sp], #4
 800507c:	4770      	bx	lr
 800507e:	bf00      	nop
 8005080:	58024400 	.word	0x58024400
 8005084:	03d09000 	.word	0x03d09000
 8005088:	46000000 	.word	0x46000000
 800508c:	4c742400 	.word	0x4c742400
 8005090:	4a742400 	.word	0x4a742400
 8005094:	4af42400 	.word	0x4af42400

08005098 <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(RCC_PLL2InitTypeDef *pll2, uint32_t Divider)
{
 8005098:	b580      	push	{r7, lr}
 800509a:	b084      	sub	sp, #16
 800509c:	af00      	add	r7, sp, #0
 800509e:	6078      	str	r0, [r7, #4]
 80050a0:	6039      	str	r1, [r7, #0]

  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 80050a2:	2300      	movs	r3, #0
 80050a4:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL2RGE_VALUE(pll2->PLL2RGE));
  assert_param(IS_RCC_PLL2VCO_VALUE(pll2->PLL2VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll2->PLL2FRACN));

  /* Check that PLL2 OSC clock source is already set */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 80050a6:	4b53      	ldr	r3, [pc, #332]	; (80051f4 <RCCEx_PLL2_Config+0x15c>)
 80050a8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80050aa:	f003 0303 	and.w	r3, r3, #3
 80050ae:	2b03      	cmp	r3, #3
 80050b0:	d101      	bne.n	80050b6 <RCCEx_PLL2_Config+0x1e>
  {
    return HAL_ERROR;
 80050b2:	2301      	movs	r3, #1
 80050b4:	e099      	b.n	80051ea <RCCEx_PLL2_Config+0x152>


  else
  {
    /* Disable  PLL2. */
    __HAL_RCC_PLL2_DISABLE();
 80050b6:	4b4f      	ldr	r3, [pc, #316]	; (80051f4 <RCCEx_PLL2_Config+0x15c>)
 80050b8:	681b      	ldr	r3, [r3, #0]
 80050ba:	4a4e      	ldr	r2, [pc, #312]	; (80051f4 <RCCEx_PLL2_Config+0x15c>)
 80050bc:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 80050c0:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80050c2:	f7fc fa73 	bl	80015ac <HAL_GetTick>
 80050c6:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 80050c8:	e008      	b.n	80050dc <RCCEx_PLL2_Config+0x44>
    {
      if( (HAL_GetTick() - tickstart ) > PLL2_TIMEOUT_VALUE)
 80050ca:	f7fc fa6f 	bl	80015ac <HAL_GetTick>
 80050ce:	4602      	mov	r2, r0
 80050d0:	68bb      	ldr	r3, [r7, #8]
 80050d2:	1ad3      	subs	r3, r2, r3
 80050d4:	2b02      	cmp	r3, #2
 80050d6:	d901      	bls.n	80050dc <RCCEx_PLL2_Config+0x44>
      {
        return HAL_TIMEOUT;
 80050d8:	2303      	movs	r3, #3
 80050da:	e086      	b.n	80051ea <RCCEx_PLL2_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 80050dc:	4b45      	ldr	r3, [pc, #276]	; (80051f4 <RCCEx_PLL2_Config+0x15c>)
 80050de:	681b      	ldr	r3, [r3, #0]
 80050e0:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80050e4:	2b00      	cmp	r3, #0
 80050e6:	d1f0      	bne.n	80050ca <RCCEx_PLL2_Config+0x32>
      }
    }

    /* Configure PLL2 multiplication and division factors. */
    __HAL_RCC_PLL2_CONFIG(pll2->PLL2M,
 80050e8:	4b42      	ldr	r3, [pc, #264]	; (80051f4 <RCCEx_PLL2_Config+0x15c>)
 80050ea:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80050ec:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 80050f0:	687b      	ldr	r3, [r7, #4]
 80050f2:	681b      	ldr	r3, [r3, #0]
 80050f4:	031b      	lsls	r3, r3, #12
 80050f6:	493f      	ldr	r1, [pc, #252]	; (80051f4 <RCCEx_PLL2_Config+0x15c>)
 80050f8:	4313      	orrs	r3, r2
 80050fa:	628b      	str	r3, [r1, #40]	; 0x28
 80050fc:	687b      	ldr	r3, [r7, #4]
 80050fe:	685b      	ldr	r3, [r3, #4]
 8005100:	3b01      	subs	r3, #1
 8005102:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8005106:	687b      	ldr	r3, [r7, #4]
 8005108:	689b      	ldr	r3, [r3, #8]
 800510a:	3b01      	subs	r3, #1
 800510c:	025b      	lsls	r3, r3, #9
 800510e:	b29b      	uxth	r3, r3
 8005110:	431a      	orrs	r2, r3
 8005112:	687b      	ldr	r3, [r7, #4]
 8005114:	68db      	ldr	r3, [r3, #12]
 8005116:	3b01      	subs	r3, #1
 8005118:	041b      	lsls	r3, r3, #16
 800511a:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 800511e:	431a      	orrs	r2, r3
 8005120:	687b      	ldr	r3, [r7, #4]
 8005122:	691b      	ldr	r3, [r3, #16]
 8005124:	3b01      	subs	r3, #1
 8005126:	061b      	lsls	r3, r3, #24
 8005128:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 800512c:	4931      	ldr	r1, [pc, #196]	; (80051f4 <RCCEx_PLL2_Config+0x15c>)
 800512e:	4313      	orrs	r3, r2
 8005130:	638b      	str	r3, [r1, #56]	; 0x38
                          pll2->PLL2P,
                          pll2->PLL2Q,
                          pll2->PLL2R);

    /* Select PLL2 input reference frequency range: VCI */
    __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE) ;
 8005132:	4b30      	ldr	r3, [pc, #192]	; (80051f4 <RCCEx_PLL2_Config+0x15c>)
 8005134:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005136:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 800513a:	687b      	ldr	r3, [r7, #4]
 800513c:	695b      	ldr	r3, [r3, #20]
 800513e:	492d      	ldr	r1, [pc, #180]	; (80051f4 <RCCEx_PLL2_Config+0x15c>)
 8005140:	4313      	orrs	r3, r2
 8005142:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL2 output frequency range : VCO */
    __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL) ;
 8005144:	4b2b      	ldr	r3, [pc, #172]	; (80051f4 <RCCEx_PLL2_Config+0x15c>)
 8005146:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005148:	f023 0220 	bic.w	r2, r3, #32
 800514c:	687b      	ldr	r3, [r7, #4]
 800514e:	699b      	ldr	r3, [r3, #24]
 8005150:	4928      	ldr	r1, [pc, #160]	; (80051f4 <RCCEx_PLL2_Config+0x15c>)
 8005152:	4313      	orrs	r3, r2
 8005154:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_DISABLE();
 8005156:	4b27      	ldr	r3, [pc, #156]	; (80051f4 <RCCEx_PLL2_Config+0x15c>)
 8005158:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800515a:	4a26      	ldr	r2, [pc, #152]	; (80051f4 <RCCEx_PLL2_Config+0x15c>)
 800515c:	f023 0310 	bic.w	r3, r3, #16
 8005160:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 8005162:	4b24      	ldr	r3, [pc, #144]	; (80051f4 <RCCEx_PLL2_Config+0x15c>)
 8005164:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8005166:	4b24      	ldr	r3, [pc, #144]	; (80051f8 <RCCEx_PLL2_Config+0x160>)
 8005168:	4013      	ands	r3, r2
 800516a:	687a      	ldr	r2, [r7, #4]
 800516c:	69d2      	ldr	r2, [r2, #28]
 800516e:	00d2      	lsls	r2, r2, #3
 8005170:	4920      	ldr	r1, [pc, #128]	; (80051f4 <RCCEx_PLL2_Config+0x15c>)
 8005172:	4313      	orrs	r3, r2
 8005174:	63cb      	str	r3, [r1, #60]	; 0x3c

    /* Enable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_ENABLE();
 8005176:	4b1f      	ldr	r3, [pc, #124]	; (80051f4 <RCCEx_PLL2_Config+0x15c>)
 8005178:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800517a:	4a1e      	ldr	r2, [pc, #120]	; (80051f4 <RCCEx_PLL2_Config+0x15c>)
 800517c:	f043 0310 	orr.w	r3, r3, #16
 8005180:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL2 clock output */
    if(Divider == DIVIDER_P_UPDATE)
 8005182:	683b      	ldr	r3, [r7, #0]
 8005184:	2b00      	cmp	r3, #0
 8005186:	d106      	bne.n	8005196 <RCCEx_PLL2_Config+0xfe>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 8005188:	4b1a      	ldr	r3, [pc, #104]	; (80051f4 <RCCEx_PLL2_Config+0x15c>)
 800518a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800518c:	4a19      	ldr	r2, [pc, #100]	; (80051f4 <RCCEx_PLL2_Config+0x15c>)
 800518e:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8005192:	62d3      	str	r3, [r2, #44]	; 0x2c
 8005194:	e00f      	b.n	80051b6 <RCCEx_PLL2_Config+0x11e>
    }
    else if(Divider == DIVIDER_Q_UPDATE)
 8005196:	683b      	ldr	r3, [r7, #0]
 8005198:	2b01      	cmp	r3, #1
 800519a:	d106      	bne.n	80051aa <RCCEx_PLL2_Config+0x112>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVQ);
 800519c:	4b15      	ldr	r3, [pc, #84]	; (80051f4 <RCCEx_PLL2_Config+0x15c>)
 800519e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80051a0:	4a14      	ldr	r2, [pc, #80]	; (80051f4 <RCCEx_PLL2_Config+0x15c>)
 80051a2:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80051a6:	62d3      	str	r3, [r2, #44]	; 0x2c
 80051a8:	e005      	b.n	80051b6 <RCCEx_PLL2_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVR);
 80051aa:	4b12      	ldr	r3, [pc, #72]	; (80051f4 <RCCEx_PLL2_Config+0x15c>)
 80051ac:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80051ae:	4a11      	ldr	r2, [pc, #68]	; (80051f4 <RCCEx_PLL2_Config+0x15c>)
 80051b0:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80051b4:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL2. */
    __HAL_RCC_PLL2_ENABLE();
 80051b6:	4b0f      	ldr	r3, [pc, #60]	; (80051f4 <RCCEx_PLL2_Config+0x15c>)
 80051b8:	681b      	ldr	r3, [r3, #0]
 80051ba:	4a0e      	ldr	r2, [pc, #56]	; (80051f4 <RCCEx_PLL2_Config+0x15c>)
 80051bc:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 80051c0:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80051c2:	f7fc f9f3 	bl	80015ac <HAL_GetTick>
 80051c6:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL2 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 80051c8:	e008      	b.n	80051dc <RCCEx_PLL2_Config+0x144>
    {
      if( (HAL_GetTick() - tickstart ) > PLL2_TIMEOUT_VALUE)
 80051ca:	f7fc f9ef 	bl	80015ac <HAL_GetTick>
 80051ce:	4602      	mov	r2, r0
 80051d0:	68bb      	ldr	r3, [r7, #8]
 80051d2:	1ad3      	subs	r3, r2, r3
 80051d4:	2b02      	cmp	r3, #2
 80051d6:	d901      	bls.n	80051dc <RCCEx_PLL2_Config+0x144>
      {
        return HAL_TIMEOUT;
 80051d8:	2303      	movs	r3, #3
 80051da:	e006      	b.n	80051ea <RCCEx_PLL2_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 80051dc:	4b05      	ldr	r3, [pc, #20]	; (80051f4 <RCCEx_PLL2_Config+0x15c>)
 80051de:	681b      	ldr	r3, [r3, #0]
 80051e0:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80051e4:	2b00      	cmp	r3, #0
 80051e6:	d0f0      	beq.n	80051ca <RCCEx_PLL2_Config+0x132>
    }

  }


  return status;
 80051e8:	7bfb      	ldrb	r3, [r7, #15]
}
 80051ea:	4618      	mov	r0, r3
 80051ec:	3710      	adds	r7, #16
 80051ee:	46bd      	mov	sp, r7
 80051f0:	bd80      	pop	{r7, pc}
 80051f2:	bf00      	nop
 80051f4:	58024400 	.word	0x58024400
 80051f8:	ffff0007 	.word	0xffff0007

080051fc <RCCEx_PLL3_Config>:
  * @note   PLL3 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(RCC_PLL3InitTypeDef *pll3, uint32_t Divider)
{
 80051fc:	b580      	push	{r7, lr}
 80051fe:	b084      	sub	sp, #16
 8005200:	af00      	add	r7, sp, #0
 8005202:	6078      	str	r0, [r7, #4]
 8005204:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8005206:	2300      	movs	r3, #0
 8005208:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL3RGE_VALUE(pll3->PLL3RGE));
  assert_param(IS_RCC_PLL3VCO_VALUE(pll3->PLL3VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll3->PLL3FRACN));

  /* Check that PLL3 OSC clock source is already set */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 800520a:	4b53      	ldr	r3, [pc, #332]	; (8005358 <RCCEx_PLL3_Config+0x15c>)
 800520c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800520e:	f003 0303 	and.w	r3, r3, #3
 8005212:	2b03      	cmp	r3, #3
 8005214:	d101      	bne.n	800521a <RCCEx_PLL3_Config+0x1e>
  {
    return HAL_ERROR;
 8005216:	2301      	movs	r3, #1
 8005218:	e099      	b.n	800534e <RCCEx_PLL3_Config+0x152>


  else
  {
    /* Disable  PLL3. */
    __HAL_RCC_PLL3_DISABLE();
 800521a:	4b4f      	ldr	r3, [pc, #316]	; (8005358 <RCCEx_PLL3_Config+0x15c>)
 800521c:	681b      	ldr	r3, [r3, #0]
 800521e:	4a4e      	ldr	r2, [pc, #312]	; (8005358 <RCCEx_PLL3_Config+0x15c>)
 8005220:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8005224:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8005226:	f7fc f9c1 	bl	80015ac <HAL_GetTick>
 800522a:	60b8      	str	r0, [r7, #8]
    /* Wait till PLL3 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 800522c:	e008      	b.n	8005240 <RCCEx_PLL3_Config+0x44>
    {
      if( (HAL_GetTick() - tickstart ) > PLL3_TIMEOUT_VALUE)
 800522e:	f7fc f9bd 	bl	80015ac <HAL_GetTick>
 8005232:	4602      	mov	r2, r0
 8005234:	68bb      	ldr	r3, [r7, #8]
 8005236:	1ad3      	subs	r3, r2, r3
 8005238:	2b02      	cmp	r3, #2
 800523a:	d901      	bls.n	8005240 <RCCEx_PLL3_Config+0x44>
      {
        return HAL_TIMEOUT;
 800523c:	2303      	movs	r3, #3
 800523e:	e086      	b.n	800534e <RCCEx_PLL3_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8005240:	4b45      	ldr	r3, [pc, #276]	; (8005358 <RCCEx_PLL3_Config+0x15c>)
 8005242:	681b      	ldr	r3, [r3, #0]
 8005244:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8005248:	2b00      	cmp	r3, #0
 800524a:	d1f0      	bne.n	800522e <RCCEx_PLL3_Config+0x32>
      }
    }

    /* Configure the PLL3  multiplication and division factors. */
    __HAL_RCC_PLL3_CONFIG(pll3->PLL3M,
 800524c:	4b42      	ldr	r3, [pc, #264]	; (8005358 <RCCEx_PLL3_Config+0x15c>)
 800524e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005250:	f023 727c 	bic.w	r2, r3, #66060288	; 0x3f00000
 8005254:	687b      	ldr	r3, [r7, #4]
 8005256:	681b      	ldr	r3, [r3, #0]
 8005258:	051b      	lsls	r3, r3, #20
 800525a:	493f      	ldr	r1, [pc, #252]	; (8005358 <RCCEx_PLL3_Config+0x15c>)
 800525c:	4313      	orrs	r3, r2
 800525e:	628b      	str	r3, [r1, #40]	; 0x28
 8005260:	687b      	ldr	r3, [r7, #4]
 8005262:	685b      	ldr	r3, [r3, #4]
 8005264:	3b01      	subs	r3, #1
 8005266:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800526a:	687b      	ldr	r3, [r7, #4]
 800526c:	689b      	ldr	r3, [r3, #8]
 800526e:	3b01      	subs	r3, #1
 8005270:	025b      	lsls	r3, r3, #9
 8005272:	b29b      	uxth	r3, r3
 8005274:	431a      	orrs	r2, r3
 8005276:	687b      	ldr	r3, [r7, #4]
 8005278:	68db      	ldr	r3, [r3, #12]
 800527a:	3b01      	subs	r3, #1
 800527c:	041b      	lsls	r3, r3, #16
 800527e:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 8005282:	431a      	orrs	r2, r3
 8005284:	687b      	ldr	r3, [r7, #4]
 8005286:	691b      	ldr	r3, [r3, #16]
 8005288:	3b01      	subs	r3, #1
 800528a:	061b      	lsls	r3, r3, #24
 800528c:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 8005290:	4931      	ldr	r1, [pc, #196]	; (8005358 <RCCEx_PLL3_Config+0x15c>)
 8005292:	4313      	orrs	r3, r2
 8005294:	640b      	str	r3, [r1, #64]	; 0x40
                          pll3->PLL3P,
                          pll3->PLL3Q,
                          pll3->PLL3R);

    /* Select PLL3 input reference frequency range: VCI */
    __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE) ;
 8005296:	4b30      	ldr	r3, [pc, #192]	; (8005358 <RCCEx_PLL3_Config+0x15c>)
 8005298:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800529a:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 800529e:	687b      	ldr	r3, [r7, #4]
 80052a0:	695b      	ldr	r3, [r3, #20]
 80052a2:	492d      	ldr	r1, [pc, #180]	; (8005358 <RCCEx_PLL3_Config+0x15c>)
 80052a4:	4313      	orrs	r3, r2
 80052a6:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL3 output frequency range : VCO */
    __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL) ;
 80052a8:	4b2b      	ldr	r3, [pc, #172]	; (8005358 <RCCEx_PLL3_Config+0x15c>)
 80052aa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80052ac:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 80052b0:	687b      	ldr	r3, [r7, #4]
 80052b2:	699b      	ldr	r3, [r3, #24]
 80052b4:	4928      	ldr	r1, [pc, #160]	; (8005358 <RCCEx_PLL3_Config+0x15c>)
 80052b6:	4313      	orrs	r3, r2
 80052b8:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_DISABLE();
 80052ba:	4b27      	ldr	r3, [pc, #156]	; (8005358 <RCCEx_PLL3_Config+0x15c>)
 80052bc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80052be:	4a26      	ldr	r2, [pc, #152]	; (8005358 <RCCEx_PLL3_Config+0x15c>)
 80052c0:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80052c4:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 80052c6:	4b24      	ldr	r3, [pc, #144]	; (8005358 <RCCEx_PLL3_Config+0x15c>)
 80052c8:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80052ca:	4b24      	ldr	r3, [pc, #144]	; (800535c <RCCEx_PLL3_Config+0x160>)
 80052cc:	4013      	ands	r3, r2
 80052ce:	687a      	ldr	r2, [r7, #4]
 80052d0:	69d2      	ldr	r2, [r2, #28]
 80052d2:	00d2      	lsls	r2, r2, #3
 80052d4:	4920      	ldr	r1, [pc, #128]	; (8005358 <RCCEx_PLL3_Config+0x15c>)
 80052d6:	4313      	orrs	r3, r2
 80052d8:	644b      	str	r3, [r1, #68]	; 0x44

    /* Enable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_ENABLE();
 80052da:	4b1f      	ldr	r3, [pc, #124]	; (8005358 <RCCEx_PLL3_Config+0x15c>)
 80052dc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80052de:	4a1e      	ldr	r2, [pc, #120]	; (8005358 <RCCEx_PLL3_Config+0x15c>)
 80052e0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80052e4:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL3 clock output */
    if(Divider == DIVIDER_P_UPDATE)
 80052e6:	683b      	ldr	r3, [r7, #0]
 80052e8:	2b00      	cmp	r3, #0
 80052ea:	d106      	bne.n	80052fa <RCCEx_PLL3_Config+0xfe>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
 80052ec:	4b1a      	ldr	r3, [pc, #104]	; (8005358 <RCCEx_PLL3_Config+0x15c>)
 80052ee:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80052f0:	4a19      	ldr	r2, [pc, #100]	; (8005358 <RCCEx_PLL3_Config+0x15c>)
 80052f2:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 80052f6:	62d3      	str	r3, [r2, #44]	; 0x2c
 80052f8:	e00f      	b.n	800531a <RCCEx_PLL3_Config+0x11e>
    }
    else if(Divider == DIVIDER_Q_UPDATE)
 80052fa:	683b      	ldr	r3, [r7, #0]
 80052fc:	2b01      	cmp	r3, #1
 80052fe:	d106      	bne.n	800530e <RCCEx_PLL3_Config+0x112>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
 8005300:	4b15      	ldr	r3, [pc, #84]	; (8005358 <RCCEx_PLL3_Config+0x15c>)
 8005302:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005304:	4a14      	ldr	r2, [pc, #80]	; (8005358 <RCCEx_PLL3_Config+0x15c>)
 8005306:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 800530a:	62d3      	str	r3, [r2, #44]	; 0x2c
 800530c:	e005      	b.n	800531a <RCCEx_PLL3_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
 800530e:	4b12      	ldr	r3, [pc, #72]	; (8005358 <RCCEx_PLL3_Config+0x15c>)
 8005310:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005312:	4a11      	ldr	r2, [pc, #68]	; (8005358 <RCCEx_PLL3_Config+0x15c>)
 8005314:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8005318:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL3. */
    __HAL_RCC_PLL3_ENABLE();
 800531a:	4b0f      	ldr	r3, [pc, #60]	; (8005358 <RCCEx_PLL3_Config+0x15c>)
 800531c:	681b      	ldr	r3, [r3, #0]
 800531e:	4a0e      	ldr	r2, [pc, #56]	; (8005358 <RCCEx_PLL3_Config+0x15c>)
 8005320:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005324:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8005326:	f7fc f941 	bl	80015ac <HAL_GetTick>
 800532a:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL3 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 800532c:	e008      	b.n	8005340 <RCCEx_PLL3_Config+0x144>
    {
      if( (HAL_GetTick() - tickstart ) > PLL3_TIMEOUT_VALUE)
 800532e:	f7fc f93d 	bl	80015ac <HAL_GetTick>
 8005332:	4602      	mov	r2, r0
 8005334:	68bb      	ldr	r3, [r7, #8]
 8005336:	1ad3      	subs	r3, r2, r3
 8005338:	2b02      	cmp	r3, #2
 800533a:	d901      	bls.n	8005340 <RCCEx_PLL3_Config+0x144>
      {
        return HAL_TIMEOUT;
 800533c:	2303      	movs	r3, #3
 800533e:	e006      	b.n	800534e <RCCEx_PLL3_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8005340:	4b05      	ldr	r3, [pc, #20]	; (8005358 <RCCEx_PLL3_Config+0x15c>)
 8005342:	681b      	ldr	r3, [r3, #0]
 8005344:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8005348:	2b00      	cmp	r3, #0
 800534a:	d0f0      	beq.n	800532e <RCCEx_PLL3_Config+0x132>
    }

  }


  return status;
 800534c:	7bfb      	ldrb	r3, [r7, #15]
}
 800534e:	4618      	mov	r0, r3
 8005350:	3710      	adds	r7, #16
 8005352:	46bd      	mov	sp, r7
 8005354:	bd80      	pop	{r7, pc}
 8005356:	bf00      	nop
 8005358:	58024400 	.word	0x58024400
 800535c:	ffff0007 	.word	0xffff0007

08005360 <HAL_SRAM_Init>:
  * @param  ExtTiming Pointer to SRAM extended mode timing structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SRAM_Init(SRAM_HandleTypeDef *hsram, FMC_NORSRAM_TimingTypeDef *Timing,
                                FMC_NORSRAM_TimingTypeDef *ExtTiming)
{
 8005360:	b580      	push	{r7, lr}
 8005362:	b084      	sub	sp, #16
 8005364:	af00      	add	r7, sp, #0
 8005366:	60f8      	str	r0, [r7, #12]
 8005368:	60b9      	str	r1, [r7, #8]
 800536a:	607a      	str	r2, [r7, #4]
  /* Check the SRAM handle parameter */
  if (hsram == NULL)
 800536c:	68fb      	ldr	r3, [r7, #12]
 800536e:	2b00      	cmp	r3, #0
 8005370:	d101      	bne.n	8005376 <HAL_SRAM_Init+0x16>
  {
    return HAL_ERROR;
 8005372:	2301      	movs	r3, #1
 8005374:	e03e      	b.n	80053f4 <HAL_SRAM_Init+0x94>
  }

  if (hsram->State == HAL_SRAM_STATE_RESET)
 8005376:	68fb      	ldr	r3, [r7, #12]
 8005378:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800537c:	b2db      	uxtb	r3, r3
 800537e:	2b00      	cmp	r3, #0
 8005380:	d106      	bne.n	8005390 <HAL_SRAM_Init+0x30>
  {
    /* Allocate lock resource and initialize it */
    hsram->Lock = HAL_UNLOCKED;
 8005382:	68fb      	ldr	r3, [r7, #12]
 8005384:	2200      	movs	r2, #0
 8005386:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44

    /* Init the low level hardware */
    hsram->MspInitCallback(hsram);
#else
    /* Initialize the low level hardware (MSP) */
    HAL_SRAM_MspInit(hsram);
 800538a:	68f8      	ldr	r0, [r7, #12]
 800538c:	f7fb ff1c 	bl	80011c8 <HAL_SRAM_MspInit>
#endif /* USE_HAL_SRAM_REGISTER_CALLBACKS */
  }

  /* Initialize SRAM control Interface */
  (void)FMC_NORSRAM_Init(hsram->Instance, &(hsram->Init));
 8005390:	68fb      	ldr	r3, [r7, #12]
 8005392:	681a      	ldr	r2, [r3, #0]
 8005394:	68fb      	ldr	r3, [r7, #12]
 8005396:	3308      	adds	r3, #8
 8005398:	4619      	mov	r1, r3
 800539a:	4610      	mov	r0, r2
 800539c:	f001 fd40 	bl	8006e20 <FMC_NORSRAM_Init>

  /* Initialize SRAM timing Interface */
  (void)FMC_NORSRAM_Timing_Init(hsram->Instance, Timing, hsram->Init.NSBank);
 80053a0:	68fb      	ldr	r3, [r7, #12]
 80053a2:	6818      	ldr	r0, [r3, #0]
 80053a4:	68fb      	ldr	r3, [r7, #12]
 80053a6:	689b      	ldr	r3, [r3, #8]
 80053a8:	461a      	mov	r2, r3
 80053aa:	68b9      	ldr	r1, [r7, #8]
 80053ac:	f001 fdc8 	bl	8006f40 <FMC_NORSRAM_Timing_Init>

  /* Initialize SRAM extended mode timing Interface */
  (void)FMC_NORSRAM_Extended_Timing_Init(hsram->Extended, ExtTiming, hsram->Init.NSBank,
 80053b0:	68fb      	ldr	r3, [r7, #12]
 80053b2:	6858      	ldr	r0, [r3, #4]
 80053b4:	68fb      	ldr	r3, [r7, #12]
 80053b6:	689a      	ldr	r2, [r3, #8]
 80053b8:	68fb      	ldr	r3, [r7, #12]
 80053ba:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80053bc:	6879      	ldr	r1, [r7, #4]
 80053be:	f001 fe0f 	bl	8006fe0 <FMC_NORSRAM_Extended_Timing_Init>
                                         hsram->Init.ExtendedMode);

  /* Enable the NORSRAM device */
  __FMC_NORSRAM_ENABLE(hsram->Instance, hsram->Init.NSBank);
 80053c2:	68fb      	ldr	r3, [r7, #12]
 80053c4:	681b      	ldr	r3, [r3, #0]
 80053c6:	68fa      	ldr	r2, [r7, #12]
 80053c8:	6892      	ldr	r2, [r2, #8]
 80053ca:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 80053ce:	68fb      	ldr	r3, [r7, #12]
 80053d0:	681b      	ldr	r3, [r3, #0]
 80053d2:	68fa      	ldr	r2, [r7, #12]
 80053d4:	6892      	ldr	r2, [r2, #8]
 80053d6:	f041 0101 	orr.w	r1, r1, #1
 80053da:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

  /* Enable FMC Peripheral */
  __FMC_ENABLE();
 80053de:	4b07      	ldr	r3, [pc, #28]	; (80053fc <HAL_SRAM_Init+0x9c>)
 80053e0:	681b      	ldr	r3, [r3, #0]
 80053e2:	4a06      	ldr	r2, [pc, #24]	; (80053fc <HAL_SRAM_Init+0x9c>)
 80053e4:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80053e8:	6013      	str	r3, [r2, #0]

  /* Initialize the SRAM controller state */
  hsram->State = HAL_SRAM_STATE_READY;
 80053ea:	68fb      	ldr	r3, [r7, #12]
 80053ec:	2201      	movs	r2, #1
 80053ee:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  return HAL_OK;
 80053f2:	2300      	movs	r3, #0
}
 80053f4:	4618      	mov	r0, r3
 80053f6:	3710      	adds	r7, #16
 80053f8:	46bd      	mov	sp, r7
 80053fa:	bd80      	pop	{r7, pc}
 80053fc:	52004000 	.word	0x52004000

08005400 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8005400:	b580      	push	{r7, lr}
 8005402:	b082      	sub	sp, #8
 8005404:	af00      	add	r7, sp, #0
 8005406:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8005408:	687b      	ldr	r3, [r7, #4]
 800540a:	2b00      	cmp	r3, #0
 800540c:	d101      	bne.n	8005412 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800540e:	2301      	movs	r3, #1
 8005410:	e042      	b.n	8005498 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8005412:	687b      	ldr	r3, [r7, #4]
 8005414:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8005418:	2b00      	cmp	r3, #0
 800541a:	d106      	bne.n	800542a <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800541c:	687b      	ldr	r3, [r7, #4]
 800541e:	2200      	movs	r2, #0
 8005420:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8005424:	6878      	ldr	r0, [r7, #4]
 8005426:	f7fb fdc3 	bl	8000fb0 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800542a:	687b      	ldr	r3, [r7, #4]
 800542c:	2224      	movs	r2, #36	; 0x24
 800542e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  __HAL_UART_DISABLE(huart);
 8005432:	687b      	ldr	r3, [r7, #4]
 8005434:	681b      	ldr	r3, [r3, #0]
 8005436:	681a      	ldr	r2, [r3, #0]
 8005438:	687b      	ldr	r3, [r7, #4]
 800543a:	681b      	ldr	r3, [r3, #0]
 800543c:	f022 0201 	bic.w	r2, r2, #1
 8005440:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8005442:	6878      	ldr	r0, [r7, #4]
 8005444:	f000 fb9c 	bl	8005b80 <UART_SetConfig>
 8005448:	4603      	mov	r3, r0
 800544a:	2b01      	cmp	r3, #1
 800544c:	d101      	bne.n	8005452 <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 800544e:	2301      	movs	r3, #1
 8005450:	e022      	b.n	8005498 <HAL_UART_Init+0x98>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8005452:	687b      	ldr	r3, [r7, #4]
 8005454:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005456:	2b00      	cmp	r3, #0
 8005458:	d002      	beq.n	8005460 <HAL_UART_Init+0x60>
  {
    UART_AdvFeatureConfig(huart);
 800545a:	6878      	ldr	r0, [r7, #4]
 800545c:	f001 f9ee 	bl	800683c <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8005460:	687b      	ldr	r3, [r7, #4]
 8005462:	681b      	ldr	r3, [r3, #0]
 8005464:	685a      	ldr	r2, [r3, #4]
 8005466:	687b      	ldr	r3, [r7, #4]
 8005468:	681b      	ldr	r3, [r3, #0]
 800546a:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800546e:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8005470:	687b      	ldr	r3, [r7, #4]
 8005472:	681b      	ldr	r3, [r3, #0]
 8005474:	689a      	ldr	r2, [r3, #8]
 8005476:	687b      	ldr	r3, [r7, #4]
 8005478:	681b      	ldr	r3, [r3, #0]
 800547a:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800547e:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8005480:	687b      	ldr	r3, [r7, #4]
 8005482:	681b      	ldr	r3, [r3, #0]
 8005484:	681a      	ldr	r2, [r3, #0]
 8005486:	687b      	ldr	r3, [r7, #4]
 8005488:	681b      	ldr	r3, [r3, #0]
 800548a:	f042 0201 	orr.w	r2, r2, #1
 800548e:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8005490:	6878      	ldr	r0, [r7, #4]
 8005492:	f001 fa75 	bl	8006980 <UART_CheckIdleState>
 8005496:	4603      	mov	r3, r0
}
 8005498:	4618      	mov	r0, r3
 800549a:	3708      	adds	r7, #8
 800549c:	46bd      	mov	sp, r7
 800549e:	bd80      	pop	{r7, pc}

080054a0 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80054a0:	b580      	push	{r7, lr}
 80054a2:	b08a      	sub	sp, #40	; 0x28
 80054a4:	af02      	add	r7, sp, #8
 80054a6:	60f8      	str	r0, [r7, #12]
 80054a8:	60b9      	str	r1, [r7, #8]
 80054aa:	603b      	str	r3, [r7, #0]
 80054ac:	4613      	mov	r3, r2
 80054ae:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80054b0:	68fb      	ldr	r3, [r7, #12]
 80054b2:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80054b6:	2b20      	cmp	r3, #32
 80054b8:	f040 8083 	bne.w	80055c2 <HAL_UART_Transmit+0x122>
  {
    if ((pData == NULL) || (Size == 0U))
 80054bc:	68bb      	ldr	r3, [r7, #8]
 80054be:	2b00      	cmp	r3, #0
 80054c0:	d002      	beq.n	80054c8 <HAL_UART_Transmit+0x28>
 80054c2:	88fb      	ldrh	r3, [r7, #6]
 80054c4:	2b00      	cmp	r3, #0
 80054c6:	d101      	bne.n	80054cc <HAL_UART_Transmit+0x2c>
    {
      return  HAL_ERROR;
 80054c8:	2301      	movs	r3, #1
 80054ca:	e07b      	b.n	80055c4 <HAL_UART_Transmit+0x124>
    }

    __HAL_LOCK(huart);
 80054cc:	68fb      	ldr	r3, [r7, #12]
 80054ce:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 80054d2:	2b01      	cmp	r3, #1
 80054d4:	d101      	bne.n	80054da <HAL_UART_Transmit+0x3a>
 80054d6:	2302      	movs	r3, #2
 80054d8:	e074      	b.n	80055c4 <HAL_UART_Transmit+0x124>
 80054da:	68fb      	ldr	r3, [r7, #12]
 80054dc:	2201      	movs	r2, #1
 80054de:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80054e2:	68fb      	ldr	r3, [r7, #12]
 80054e4:	2200      	movs	r2, #0
 80054e6:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80054ea:	68fb      	ldr	r3, [r7, #12]
 80054ec:	2221      	movs	r2, #33	; 0x21
 80054ee:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80054f2:	f7fc f85b 	bl	80015ac <HAL_GetTick>
 80054f6:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 80054f8:	68fb      	ldr	r3, [r7, #12]
 80054fa:	88fa      	ldrh	r2, [r7, #6]
 80054fc:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
    huart->TxXferCount = Size;
 8005500:	68fb      	ldr	r3, [r7, #12]
 8005502:	88fa      	ldrh	r2, [r7, #6]
 8005504:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8005508:	68fb      	ldr	r3, [r7, #12]
 800550a:	689b      	ldr	r3, [r3, #8]
 800550c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005510:	d108      	bne.n	8005524 <HAL_UART_Transmit+0x84>
 8005512:	68fb      	ldr	r3, [r7, #12]
 8005514:	691b      	ldr	r3, [r3, #16]
 8005516:	2b00      	cmp	r3, #0
 8005518:	d104      	bne.n	8005524 <HAL_UART_Transmit+0x84>
    {
      pdata8bits  = NULL;
 800551a:	2300      	movs	r3, #0
 800551c:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 800551e:	68bb      	ldr	r3, [r7, #8]
 8005520:	61bb      	str	r3, [r7, #24]
 8005522:	e003      	b.n	800552c <HAL_UART_Transmit+0x8c>
    }
    else
    {
      pdata8bits  = pData;
 8005524:	68bb      	ldr	r3, [r7, #8]
 8005526:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8005528:	2300      	movs	r3, #0
 800552a:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 800552c:	68fb      	ldr	r3, [r7, #12]
 800552e:	2200      	movs	r2, #0
 8005530:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    while (huart->TxXferCount > 0U)
 8005534:	e02c      	b.n	8005590 <HAL_UART_Transmit+0xf0>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8005536:	683b      	ldr	r3, [r7, #0]
 8005538:	9300      	str	r3, [sp, #0]
 800553a:	697b      	ldr	r3, [r7, #20]
 800553c:	2200      	movs	r2, #0
 800553e:	2180      	movs	r1, #128	; 0x80
 8005540:	68f8      	ldr	r0, [r7, #12]
 8005542:	f001 fa68 	bl	8006a16 <UART_WaitOnFlagUntilTimeout>
 8005546:	4603      	mov	r3, r0
 8005548:	2b00      	cmp	r3, #0
 800554a:	d001      	beq.n	8005550 <HAL_UART_Transmit+0xb0>
      {
        return HAL_TIMEOUT;
 800554c:	2303      	movs	r3, #3
 800554e:	e039      	b.n	80055c4 <HAL_UART_Transmit+0x124>
      }
      if (pdata8bits == NULL)
 8005550:	69fb      	ldr	r3, [r7, #28]
 8005552:	2b00      	cmp	r3, #0
 8005554:	d10b      	bne.n	800556e <HAL_UART_Transmit+0xce>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8005556:	69bb      	ldr	r3, [r7, #24]
 8005558:	881b      	ldrh	r3, [r3, #0]
 800555a:	461a      	mov	r2, r3
 800555c:	68fb      	ldr	r3, [r7, #12]
 800555e:	681b      	ldr	r3, [r3, #0]
 8005560:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8005564:	629a      	str	r2, [r3, #40]	; 0x28
        pdata16bits++;
 8005566:	69bb      	ldr	r3, [r7, #24]
 8005568:	3302      	adds	r3, #2
 800556a:	61bb      	str	r3, [r7, #24]
 800556c:	e007      	b.n	800557e <HAL_UART_Transmit+0xde>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 800556e:	69fb      	ldr	r3, [r7, #28]
 8005570:	781a      	ldrb	r2, [r3, #0]
 8005572:	68fb      	ldr	r3, [r7, #12]
 8005574:	681b      	ldr	r3, [r3, #0]
 8005576:	629a      	str	r2, [r3, #40]	; 0x28
        pdata8bits++;
 8005578:	69fb      	ldr	r3, [r7, #28]
 800557a:	3301      	adds	r3, #1
 800557c:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800557e:	68fb      	ldr	r3, [r7, #12]
 8005580:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 8005584:	b29b      	uxth	r3, r3
 8005586:	3b01      	subs	r3, #1
 8005588:	b29a      	uxth	r2, r3
 800558a:	68fb      	ldr	r3, [r7, #12]
 800558c:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
    while (huart->TxXferCount > 0U)
 8005590:	68fb      	ldr	r3, [r7, #12]
 8005592:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 8005596:	b29b      	uxth	r3, r3
 8005598:	2b00      	cmp	r3, #0
 800559a:	d1cc      	bne.n	8005536 <HAL_UART_Transmit+0x96>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800559c:	683b      	ldr	r3, [r7, #0]
 800559e:	9300      	str	r3, [sp, #0]
 80055a0:	697b      	ldr	r3, [r7, #20]
 80055a2:	2200      	movs	r2, #0
 80055a4:	2140      	movs	r1, #64	; 0x40
 80055a6:	68f8      	ldr	r0, [r7, #12]
 80055a8:	f001 fa35 	bl	8006a16 <UART_WaitOnFlagUntilTimeout>
 80055ac:	4603      	mov	r3, r0
 80055ae:	2b00      	cmp	r3, #0
 80055b0:	d001      	beq.n	80055b6 <HAL_UART_Transmit+0x116>
    {
      return HAL_TIMEOUT;
 80055b2:	2303      	movs	r3, #3
 80055b4:	e006      	b.n	80055c4 <HAL_UART_Transmit+0x124>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80055b6:	68fb      	ldr	r3, [r7, #12]
 80055b8:	2220      	movs	r2, #32
 80055ba:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    return HAL_OK;
 80055be:	2300      	movs	r3, #0
 80055c0:	e000      	b.n	80055c4 <HAL_UART_Transmit+0x124>
  }
  else
  {
    return HAL_BUSY;
 80055c2:	2302      	movs	r3, #2
  }
}
 80055c4:	4618      	mov	r0, r3
 80055c6:	3720      	adds	r7, #32
 80055c8:	46bd      	mov	sp, r7
 80055ca:	bd80      	pop	{r7, pc}

080055cc <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 80055cc:	b580      	push	{r7, lr}
 80055ce:	b088      	sub	sp, #32
 80055d0:	af00      	add	r7, sp, #0
 80055d2:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 80055d4:	687b      	ldr	r3, [r7, #4]
 80055d6:	681b      	ldr	r3, [r3, #0]
 80055d8:	69db      	ldr	r3, [r3, #28]
 80055da:	61fb      	str	r3, [r7, #28]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 80055dc:	687b      	ldr	r3, [r7, #4]
 80055de:	681b      	ldr	r3, [r3, #0]
 80055e0:	681b      	ldr	r3, [r3, #0]
 80055e2:	61bb      	str	r3, [r7, #24]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 80055e4:	687b      	ldr	r3, [r7, #4]
 80055e6:	681b      	ldr	r3, [r3, #0]
 80055e8:	689b      	ldr	r3, [r3, #8]
 80055ea:	617b      	str	r3, [r7, #20]

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 80055ec:	69fa      	ldr	r2, [r7, #28]
 80055ee:	f640 030f 	movw	r3, #2063	; 0x80f
 80055f2:	4013      	ands	r3, r2
 80055f4:	613b      	str	r3, [r7, #16]
  if (errorflags == 0U)
 80055f6:	693b      	ldr	r3, [r7, #16]
 80055f8:	2b00      	cmp	r3, #0
 80055fa:	d118      	bne.n	800562e <HAL_UART_IRQHandler+0x62>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 80055fc:	69fb      	ldr	r3, [r7, #28]
 80055fe:	f003 0320 	and.w	r3, r3, #32
 8005602:	2b00      	cmp	r3, #0
 8005604:	d013      	beq.n	800562e <HAL_UART_IRQHandler+0x62>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 8005606:	69bb      	ldr	r3, [r7, #24]
 8005608:	f003 0320 	and.w	r3, r3, #32
 800560c:	2b00      	cmp	r3, #0
 800560e:	d104      	bne.n	800561a <HAL_UART_IRQHandler+0x4e>
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 8005610:	697b      	ldr	r3, [r7, #20]
 8005612:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005616:	2b00      	cmp	r3, #0
 8005618:	d009      	beq.n	800562e <HAL_UART_IRQHandler+0x62>
    {
      if (huart->RxISR != NULL)
 800561a:	687b      	ldr	r3, [r7, #4]
 800561c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800561e:	2b00      	cmp	r3, #0
 8005620:	f000 8282 	beq.w	8005b28 <HAL_UART_IRQHandler+0x55c>
      {
        huart->RxISR(huart);
 8005624:	687b      	ldr	r3, [r7, #4]
 8005626:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005628:	6878      	ldr	r0, [r7, #4]
 800562a:	4798      	blx	r3
      }
      return;
 800562c:	e27c      	b.n	8005b28 <HAL_UART_IRQHandler+0x55c>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 800562e:	693b      	ldr	r3, [r7, #16]
 8005630:	2b00      	cmp	r3, #0
 8005632:	f000 80ef 	beq.w	8005814 <HAL_UART_IRQHandler+0x248>
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
 8005636:	697a      	ldr	r2, [r7, #20]
 8005638:	4b73      	ldr	r3, [pc, #460]	; (8005808 <HAL_UART_IRQHandler+0x23c>)
 800563a:	4013      	ands	r3, r2
 800563c:	2b00      	cmp	r3, #0
 800563e:	d105      	bne.n	800564c <HAL_UART_IRQHandler+0x80>
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
 8005640:	69ba      	ldr	r2, [r7, #24]
 8005642:	4b72      	ldr	r3, [pc, #456]	; (800580c <HAL_UART_IRQHandler+0x240>)
 8005644:	4013      	ands	r3, r2
 8005646:	2b00      	cmp	r3, #0
 8005648:	f000 80e4 	beq.w	8005814 <HAL_UART_IRQHandler+0x248>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 800564c:	69fb      	ldr	r3, [r7, #28]
 800564e:	f003 0301 	and.w	r3, r3, #1
 8005652:	2b00      	cmp	r3, #0
 8005654:	d010      	beq.n	8005678 <HAL_UART_IRQHandler+0xac>
 8005656:	69bb      	ldr	r3, [r7, #24]
 8005658:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800565c:	2b00      	cmp	r3, #0
 800565e:	d00b      	beq.n	8005678 <HAL_UART_IRQHandler+0xac>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8005660:	687b      	ldr	r3, [r7, #4]
 8005662:	681b      	ldr	r3, [r3, #0]
 8005664:	2201      	movs	r2, #1
 8005666:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8005668:	687b      	ldr	r3, [r7, #4]
 800566a:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800566e:	f043 0201 	orr.w	r2, r3, #1
 8005672:	687b      	ldr	r3, [r7, #4]
 8005674:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8005678:	69fb      	ldr	r3, [r7, #28]
 800567a:	f003 0302 	and.w	r3, r3, #2
 800567e:	2b00      	cmp	r3, #0
 8005680:	d010      	beq.n	80056a4 <HAL_UART_IRQHandler+0xd8>
 8005682:	697b      	ldr	r3, [r7, #20]
 8005684:	f003 0301 	and.w	r3, r3, #1
 8005688:	2b00      	cmp	r3, #0
 800568a:	d00b      	beq.n	80056a4 <HAL_UART_IRQHandler+0xd8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 800568c:	687b      	ldr	r3, [r7, #4]
 800568e:	681b      	ldr	r3, [r3, #0]
 8005690:	2202      	movs	r2, #2
 8005692:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8005694:	687b      	ldr	r3, [r7, #4]
 8005696:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800569a:	f043 0204 	orr.w	r2, r3, #4
 800569e:	687b      	ldr	r3, [r7, #4]
 80056a0:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 80056a4:	69fb      	ldr	r3, [r7, #28]
 80056a6:	f003 0304 	and.w	r3, r3, #4
 80056aa:	2b00      	cmp	r3, #0
 80056ac:	d010      	beq.n	80056d0 <HAL_UART_IRQHandler+0x104>
 80056ae:	697b      	ldr	r3, [r7, #20]
 80056b0:	f003 0301 	and.w	r3, r3, #1
 80056b4:	2b00      	cmp	r3, #0
 80056b6:	d00b      	beq.n	80056d0 <HAL_UART_IRQHandler+0x104>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 80056b8:	687b      	ldr	r3, [r7, #4]
 80056ba:	681b      	ldr	r3, [r3, #0]
 80056bc:	2204      	movs	r2, #4
 80056be:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 80056c0:	687b      	ldr	r3, [r7, #4]
 80056c2:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80056c6:	f043 0202 	orr.w	r2, r3, #2
 80056ca:	687b      	ldr	r3, [r7, #4]
 80056cc:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 80056d0:	69fb      	ldr	r3, [r7, #28]
 80056d2:	f003 0308 	and.w	r3, r3, #8
 80056d6:	2b00      	cmp	r3, #0
 80056d8:	d015      	beq.n	8005706 <HAL_UART_IRQHandler+0x13a>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 80056da:	69bb      	ldr	r3, [r7, #24]
 80056dc:	f003 0320 	and.w	r3, r3, #32
 80056e0:	2b00      	cmp	r3, #0
 80056e2:	d104      	bne.n	80056ee <HAL_UART_IRQHandler+0x122>
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
 80056e4:	697a      	ldr	r2, [r7, #20]
 80056e6:	4b48      	ldr	r3, [pc, #288]	; (8005808 <HAL_UART_IRQHandler+0x23c>)
 80056e8:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 80056ea:	2b00      	cmp	r3, #0
 80056ec:	d00b      	beq.n	8005706 <HAL_UART_IRQHandler+0x13a>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 80056ee:	687b      	ldr	r3, [r7, #4]
 80056f0:	681b      	ldr	r3, [r3, #0]
 80056f2:	2208      	movs	r2, #8
 80056f4:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 80056f6:	687b      	ldr	r3, [r7, #4]
 80056f8:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80056fc:	f043 0208 	orr.w	r2, r3, #8
 8005700:	687b      	ldr	r3, [r7, #4]
 8005702:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 8005706:	69fb      	ldr	r3, [r7, #28]
 8005708:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800570c:	2b00      	cmp	r3, #0
 800570e:	d011      	beq.n	8005734 <HAL_UART_IRQHandler+0x168>
 8005710:	69bb      	ldr	r3, [r7, #24]
 8005712:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8005716:	2b00      	cmp	r3, #0
 8005718:	d00c      	beq.n	8005734 <HAL_UART_IRQHandler+0x168>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800571a:	687b      	ldr	r3, [r7, #4]
 800571c:	681b      	ldr	r3, [r3, #0]
 800571e:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8005722:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 8005724:	687b      	ldr	r3, [r7, #4]
 8005726:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800572a:	f043 0220 	orr.w	r2, r3, #32
 800572e:	687b      	ldr	r3, [r7, #4]
 8005730:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8005734:	687b      	ldr	r3, [r7, #4]
 8005736:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800573a:	2b00      	cmp	r3, #0
 800573c:	f000 81f6 	beq.w	8005b2c <HAL_UART_IRQHandler+0x560>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 8005740:	69fb      	ldr	r3, [r7, #28]
 8005742:	f003 0320 	and.w	r3, r3, #32
 8005746:	2b00      	cmp	r3, #0
 8005748:	d011      	beq.n	800576e <HAL_UART_IRQHandler+0x1a2>
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 800574a:	69bb      	ldr	r3, [r7, #24]
 800574c:	f003 0320 	and.w	r3, r3, #32
 8005750:	2b00      	cmp	r3, #0
 8005752:	d104      	bne.n	800575e <HAL_UART_IRQHandler+0x192>
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 8005754:	697b      	ldr	r3, [r7, #20]
 8005756:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800575a:	2b00      	cmp	r3, #0
 800575c:	d007      	beq.n	800576e <HAL_UART_IRQHandler+0x1a2>
      {
        if (huart->RxISR != NULL)
 800575e:	687b      	ldr	r3, [r7, #4]
 8005760:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005762:	2b00      	cmp	r3, #0
 8005764:	d003      	beq.n	800576e <HAL_UART_IRQHandler+0x1a2>
        {
          huart->RxISR(huart);
 8005766:	687b      	ldr	r3, [r7, #4]
 8005768:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800576a:	6878      	ldr	r0, [r7, #4]
 800576c:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 800576e:	687b      	ldr	r3, [r7, #4]
 8005770:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8005774:	60fb      	str	r3, [r7, #12]
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8005776:	687b      	ldr	r3, [r7, #4]
 8005778:	681b      	ldr	r3, [r3, #0]
 800577a:	689b      	ldr	r3, [r3, #8]
 800577c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005780:	2b40      	cmp	r3, #64	; 0x40
 8005782:	d004      	beq.n	800578e <HAL_UART_IRQHandler+0x1c2>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 8005784:	68fb      	ldr	r3, [r7, #12]
 8005786:	f003 0328 	and.w	r3, r3, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800578a:	2b00      	cmp	r3, #0
 800578c:	d031      	beq.n	80057f2 <HAL_UART_IRQHandler+0x226>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800578e:	6878      	ldr	r0, [r7, #4]
 8005790:	f001 f9c2 	bl	8006b18 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005794:	687b      	ldr	r3, [r7, #4]
 8005796:	681b      	ldr	r3, [r3, #0]
 8005798:	689b      	ldr	r3, [r3, #8]
 800579a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800579e:	2b40      	cmp	r3, #64	; 0x40
 80057a0:	d123      	bne.n	80057ea <HAL_UART_IRQHandler+0x21e>
        {
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80057a2:	687b      	ldr	r3, [r7, #4]
 80057a4:	681b      	ldr	r3, [r3, #0]
 80057a6:	689a      	ldr	r2, [r3, #8]
 80057a8:	687b      	ldr	r3, [r7, #4]
 80057aa:	681b      	ldr	r3, [r3, #0]
 80057ac:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80057b0:	609a      	str	r2, [r3, #8]

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 80057b2:	687b      	ldr	r3, [r7, #4]
 80057b4:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80057b6:	2b00      	cmp	r3, #0
 80057b8:	d013      	beq.n	80057e2 <HAL_UART_IRQHandler+0x216>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 80057ba:	687b      	ldr	r3, [r7, #4]
 80057bc:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80057be:	4a14      	ldr	r2, [pc, #80]	; (8005810 <HAL_UART_IRQHandler+0x244>)
 80057c0:	651a      	str	r2, [r3, #80]	; 0x50

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 80057c2:	687b      	ldr	r3, [r7, #4]
 80057c4:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80057c6:	4618      	mov	r0, r3
 80057c8:	f7fc fb3e 	bl	8001e48 <HAL_DMA_Abort_IT>
 80057cc:	4603      	mov	r3, r0
 80057ce:	2b00      	cmp	r3, #0
 80057d0:	d017      	beq.n	8005802 <HAL_UART_IRQHandler+0x236>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 80057d2:	687b      	ldr	r3, [r7, #4]
 80057d4:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80057d6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80057d8:	687a      	ldr	r2, [r7, #4]
 80057da:	6fd2      	ldr	r2, [r2, #124]	; 0x7c
 80057dc:	4610      	mov	r0, r2
 80057de:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80057e0:	e00f      	b.n	8005802 <HAL_UART_IRQHandler+0x236>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 80057e2:	6878      	ldr	r0, [r7, #4]
 80057e4:	f000 f9b6 	bl	8005b54 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80057e8:	e00b      	b.n	8005802 <HAL_UART_IRQHandler+0x236>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 80057ea:	6878      	ldr	r0, [r7, #4]
 80057ec:	f000 f9b2 	bl	8005b54 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80057f0:	e007      	b.n	8005802 <HAL_UART_IRQHandler+0x236>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 80057f2:	6878      	ldr	r0, [r7, #4]
 80057f4:	f000 f9ae 	bl	8005b54 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 80057f8:	687b      	ldr	r3, [r7, #4]
 80057fa:	2200      	movs	r2, #0
 80057fc:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
      }
    }
    return;
 8005800:	e194      	b.n	8005b2c <HAL_UART_IRQHandler+0x560>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005802:	bf00      	nop
    return;
 8005804:	e192      	b.n	8005b2c <HAL_UART_IRQHandler+0x560>
 8005806:	bf00      	nop
 8005808:	10000001 	.word	0x10000001
 800580c:	04000120 	.word	0x04000120
 8005810:	08006b7d 	.word	0x08006b7d

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005814:	687b      	ldr	r3, [r7, #4]
 8005816:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8005818:	2b01      	cmp	r3, #1
 800581a:	f040 810f 	bne.w	8005a3c <HAL_UART_IRQHandler+0x470>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 800581e:	69fb      	ldr	r3, [r7, #28]
 8005820:	f003 0310 	and.w	r3, r3, #16
 8005824:	2b00      	cmp	r3, #0
 8005826:	f000 8109 	beq.w	8005a3c <HAL_UART_IRQHandler+0x470>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 800582a:	69bb      	ldr	r3, [r7, #24]
 800582c:	f003 0310 	and.w	r3, r3, #16
 8005830:	2b00      	cmp	r3, #0
 8005832:	f000 8103 	beq.w	8005a3c <HAL_UART_IRQHandler+0x470>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8005836:	687b      	ldr	r3, [r7, #4]
 8005838:	681b      	ldr	r3, [r3, #0]
 800583a:	2210      	movs	r2, #16
 800583c:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800583e:	687b      	ldr	r3, [r7, #4]
 8005840:	681b      	ldr	r3, [r3, #0]
 8005842:	689b      	ldr	r3, [r3, #8]
 8005844:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005848:	2b40      	cmp	r3, #64	; 0x40
 800584a:	f040 80bb 	bne.w	80059c4 <HAL_UART_IRQHandler+0x3f8>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 800584e:	687b      	ldr	r3, [r7, #4]
 8005850:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8005852:	681b      	ldr	r3, [r3, #0]
 8005854:	4a96      	ldr	r2, [pc, #600]	; (8005ab0 <HAL_UART_IRQHandler+0x4e4>)
 8005856:	4293      	cmp	r3, r2
 8005858:	d059      	beq.n	800590e <HAL_UART_IRQHandler+0x342>
 800585a:	687b      	ldr	r3, [r7, #4]
 800585c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800585e:	681b      	ldr	r3, [r3, #0]
 8005860:	4a94      	ldr	r2, [pc, #592]	; (8005ab4 <HAL_UART_IRQHandler+0x4e8>)
 8005862:	4293      	cmp	r3, r2
 8005864:	d053      	beq.n	800590e <HAL_UART_IRQHandler+0x342>
 8005866:	687b      	ldr	r3, [r7, #4]
 8005868:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800586a:	681b      	ldr	r3, [r3, #0]
 800586c:	4a92      	ldr	r2, [pc, #584]	; (8005ab8 <HAL_UART_IRQHandler+0x4ec>)
 800586e:	4293      	cmp	r3, r2
 8005870:	d04d      	beq.n	800590e <HAL_UART_IRQHandler+0x342>
 8005872:	687b      	ldr	r3, [r7, #4]
 8005874:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8005876:	681b      	ldr	r3, [r3, #0]
 8005878:	4a90      	ldr	r2, [pc, #576]	; (8005abc <HAL_UART_IRQHandler+0x4f0>)
 800587a:	4293      	cmp	r3, r2
 800587c:	d047      	beq.n	800590e <HAL_UART_IRQHandler+0x342>
 800587e:	687b      	ldr	r3, [r7, #4]
 8005880:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8005882:	681b      	ldr	r3, [r3, #0]
 8005884:	4a8e      	ldr	r2, [pc, #568]	; (8005ac0 <HAL_UART_IRQHandler+0x4f4>)
 8005886:	4293      	cmp	r3, r2
 8005888:	d041      	beq.n	800590e <HAL_UART_IRQHandler+0x342>
 800588a:	687b      	ldr	r3, [r7, #4]
 800588c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800588e:	681b      	ldr	r3, [r3, #0]
 8005890:	4a8c      	ldr	r2, [pc, #560]	; (8005ac4 <HAL_UART_IRQHandler+0x4f8>)
 8005892:	4293      	cmp	r3, r2
 8005894:	d03b      	beq.n	800590e <HAL_UART_IRQHandler+0x342>
 8005896:	687b      	ldr	r3, [r7, #4]
 8005898:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800589a:	681b      	ldr	r3, [r3, #0]
 800589c:	4a8a      	ldr	r2, [pc, #552]	; (8005ac8 <HAL_UART_IRQHandler+0x4fc>)
 800589e:	4293      	cmp	r3, r2
 80058a0:	d035      	beq.n	800590e <HAL_UART_IRQHandler+0x342>
 80058a2:	687b      	ldr	r3, [r7, #4]
 80058a4:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80058a6:	681b      	ldr	r3, [r3, #0]
 80058a8:	4a88      	ldr	r2, [pc, #544]	; (8005acc <HAL_UART_IRQHandler+0x500>)
 80058aa:	4293      	cmp	r3, r2
 80058ac:	d02f      	beq.n	800590e <HAL_UART_IRQHandler+0x342>
 80058ae:	687b      	ldr	r3, [r7, #4]
 80058b0:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80058b2:	681b      	ldr	r3, [r3, #0]
 80058b4:	4a86      	ldr	r2, [pc, #536]	; (8005ad0 <HAL_UART_IRQHandler+0x504>)
 80058b6:	4293      	cmp	r3, r2
 80058b8:	d029      	beq.n	800590e <HAL_UART_IRQHandler+0x342>
 80058ba:	687b      	ldr	r3, [r7, #4]
 80058bc:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80058be:	681b      	ldr	r3, [r3, #0]
 80058c0:	4a84      	ldr	r2, [pc, #528]	; (8005ad4 <HAL_UART_IRQHandler+0x508>)
 80058c2:	4293      	cmp	r3, r2
 80058c4:	d023      	beq.n	800590e <HAL_UART_IRQHandler+0x342>
 80058c6:	687b      	ldr	r3, [r7, #4]
 80058c8:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80058ca:	681b      	ldr	r3, [r3, #0]
 80058cc:	4a82      	ldr	r2, [pc, #520]	; (8005ad8 <HAL_UART_IRQHandler+0x50c>)
 80058ce:	4293      	cmp	r3, r2
 80058d0:	d01d      	beq.n	800590e <HAL_UART_IRQHandler+0x342>
 80058d2:	687b      	ldr	r3, [r7, #4]
 80058d4:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80058d6:	681b      	ldr	r3, [r3, #0]
 80058d8:	4a80      	ldr	r2, [pc, #512]	; (8005adc <HAL_UART_IRQHandler+0x510>)
 80058da:	4293      	cmp	r3, r2
 80058dc:	d017      	beq.n	800590e <HAL_UART_IRQHandler+0x342>
 80058de:	687b      	ldr	r3, [r7, #4]
 80058e0:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80058e2:	681b      	ldr	r3, [r3, #0]
 80058e4:	4a7e      	ldr	r2, [pc, #504]	; (8005ae0 <HAL_UART_IRQHandler+0x514>)
 80058e6:	4293      	cmp	r3, r2
 80058e8:	d011      	beq.n	800590e <HAL_UART_IRQHandler+0x342>
 80058ea:	687b      	ldr	r3, [r7, #4]
 80058ec:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80058ee:	681b      	ldr	r3, [r3, #0]
 80058f0:	4a7c      	ldr	r2, [pc, #496]	; (8005ae4 <HAL_UART_IRQHandler+0x518>)
 80058f2:	4293      	cmp	r3, r2
 80058f4:	d00b      	beq.n	800590e <HAL_UART_IRQHandler+0x342>
 80058f6:	687b      	ldr	r3, [r7, #4]
 80058f8:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80058fa:	681b      	ldr	r3, [r3, #0]
 80058fc:	4a7a      	ldr	r2, [pc, #488]	; (8005ae8 <HAL_UART_IRQHandler+0x51c>)
 80058fe:	4293      	cmp	r3, r2
 8005900:	d005      	beq.n	800590e <HAL_UART_IRQHandler+0x342>
 8005902:	687b      	ldr	r3, [r7, #4]
 8005904:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8005906:	681b      	ldr	r3, [r3, #0]
 8005908:	4a78      	ldr	r2, [pc, #480]	; (8005aec <HAL_UART_IRQHandler+0x520>)
 800590a:	4293      	cmp	r3, r2
 800590c:	d105      	bne.n	800591a <HAL_UART_IRQHandler+0x34e>
 800590e:	687b      	ldr	r3, [r7, #4]
 8005910:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8005912:	681b      	ldr	r3, [r3, #0]
 8005914:	685b      	ldr	r3, [r3, #4]
 8005916:	b29b      	uxth	r3, r3
 8005918:	e004      	b.n	8005924 <HAL_UART_IRQHandler+0x358>
 800591a:	687b      	ldr	r3, [r7, #4]
 800591c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800591e:	681b      	ldr	r3, [r3, #0]
 8005920:	685b      	ldr	r3, [r3, #4]
 8005922:	b29b      	uxth	r3, r3
 8005924:	813b      	strh	r3, [r7, #8]
      if ((nb_remaining_rx_data > 0U)
 8005926:	893b      	ldrh	r3, [r7, #8]
 8005928:	2b00      	cmp	r3, #0
 800592a:	f000 8101 	beq.w	8005b30 <HAL_UART_IRQHandler+0x564>
          && (nb_remaining_rx_data < huart->RxXferSize))
 800592e:	687b      	ldr	r3, [r7, #4]
 8005930:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8005934:	893a      	ldrh	r2, [r7, #8]
 8005936:	429a      	cmp	r2, r3
 8005938:	f080 80fa 	bcs.w	8005b30 <HAL_UART_IRQHandler+0x564>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 800593c:	687b      	ldr	r3, [r7, #4]
 800593e:	893a      	ldrh	r2, [r7, #8]
 8005940:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8005944:	687b      	ldr	r3, [r7, #4]
 8005946:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8005948:	69db      	ldr	r3, [r3, #28]
 800594a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800594e:	d02b      	beq.n	80059a8 <HAL_UART_IRQHandler+0x3dc>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8005950:	687b      	ldr	r3, [r7, #4]
 8005952:	681b      	ldr	r3, [r3, #0]
 8005954:	681a      	ldr	r2, [r3, #0]
 8005956:	687b      	ldr	r3, [r7, #4]
 8005958:	681b      	ldr	r3, [r3, #0]
 800595a:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800595e:	601a      	str	r2, [r3, #0]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005960:	687b      	ldr	r3, [r7, #4]
 8005962:	681b      	ldr	r3, [r3, #0]
 8005964:	689a      	ldr	r2, [r3, #8]
 8005966:	687b      	ldr	r3, [r7, #4]
 8005968:	681b      	ldr	r3, [r3, #0]
 800596a:	f022 0201 	bic.w	r2, r2, #1
 800596e:	609a      	str	r2, [r3, #8]

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8005970:	687b      	ldr	r3, [r7, #4]
 8005972:	681b      	ldr	r3, [r3, #0]
 8005974:	689a      	ldr	r2, [r3, #8]
 8005976:	687b      	ldr	r3, [r7, #4]
 8005978:	681b      	ldr	r3, [r3, #0]
 800597a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800597e:	609a      	str	r2, [r3, #8]

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8005980:	687b      	ldr	r3, [r7, #4]
 8005982:	2220      	movs	r2, #32
 8005984:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005988:	687b      	ldr	r3, [r7, #4]
 800598a:	2200      	movs	r2, #0
 800598c:	66da      	str	r2, [r3, #108]	; 0x6c

          CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800598e:	687b      	ldr	r3, [r7, #4]
 8005990:	681b      	ldr	r3, [r3, #0]
 8005992:	681a      	ldr	r2, [r3, #0]
 8005994:	687b      	ldr	r3, [r7, #4]
 8005996:	681b      	ldr	r3, [r3, #0]
 8005998:	f022 0210 	bic.w	r2, r2, #16
 800599c:	601a      	str	r2, [r3, #0]

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 800599e:	687b      	ldr	r3, [r7, #4]
 80059a0:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80059a2:	4618      	mov	r0, r3
 80059a4:	f7fb ff32 	bl	800180c <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 80059a8:	687b      	ldr	r3, [r7, #4]
 80059aa:	f8b3 205c 	ldrh.w	r2, [r3, #92]	; 0x5c
 80059ae:	687b      	ldr	r3, [r7, #4]
 80059b0:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 80059b4:	b29b      	uxth	r3, r3
 80059b6:	1ad3      	subs	r3, r2, r3
 80059b8:	b29b      	uxth	r3, r3
 80059ba:	4619      	mov	r1, r3
 80059bc:	6878      	ldr	r0, [r7, #4]
 80059be:	f000 f8d3 	bl	8005b68 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 80059c2:	e0b5      	b.n	8005b30 <HAL_UART_IRQHandler+0x564>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 80059c4:	687b      	ldr	r3, [r7, #4]
 80059c6:	f8b3 205c 	ldrh.w	r2, [r3, #92]	; 0x5c
 80059ca:	687b      	ldr	r3, [r7, #4]
 80059cc:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 80059d0:	b29b      	uxth	r3, r3
 80059d2:	1ad3      	subs	r3, r2, r3
 80059d4:	817b      	strh	r3, [r7, #10]
      if ((huart->RxXferCount > 0U)
 80059d6:	687b      	ldr	r3, [r7, #4]
 80059d8:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 80059dc:	b29b      	uxth	r3, r3
 80059de:	2b00      	cmp	r3, #0
 80059e0:	f000 80a8 	beq.w	8005b34 <HAL_UART_IRQHandler+0x568>
          && (nb_rx_data > 0U))
 80059e4:	897b      	ldrh	r3, [r7, #10]
 80059e6:	2b00      	cmp	r3, #0
 80059e8:	f000 80a4 	beq.w	8005b34 <HAL_UART_IRQHandler+0x568>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 80059ec:	687b      	ldr	r3, [r7, #4]
 80059ee:	681b      	ldr	r3, [r3, #0]
 80059f0:	681a      	ldr	r2, [r3, #0]
 80059f2:	687b      	ldr	r3, [r7, #4]
 80059f4:	681b      	ldr	r3, [r3, #0]
 80059f6:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 80059fa:	601a      	str	r2, [r3, #0]

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 80059fc:	687b      	ldr	r3, [r7, #4]
 80059fe:	681b      	ldr	r3, [r3, #0]
 8005a00:	6899      	ldr	r1, [r3, #8]
 8005a02:	687b      	ldr	r3, [r7, #4]
 8005a04:	681a      	ldr	r2, [r3, #0]
 8005a06:	4b3a      	ldr	r3, [pc, #232]	; (8005af0 <HAL_UART_IRQHandler+0x524>)
 8005a08:	400b      	ands	r3, r1
 8005a0a:	6093      	str	r3, [r2, #8]

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8005a0c:	687b      	ldr	r3, [r7, #4]
 8005a0e:	2220      	movs	r2, #32
 8005a10:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005a14:	687b      	ldr	r3, [r7, #4]
 8005a16:	2200      	movs	r2, #0
 8005a18:	66da      	str	r2, [r3, #108]	; 0x6c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8005a1a:	687b      	ldr	r3, [r7, #4]
 8005a1c:	2200      	movs	r2, #0
 8005a1e:	671a      	str	r2, [r3, #112]	; 0x70

        CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005a20:	687b      	ldr	r3, [r7, #4]
 8005a22:	681b      	ldr	r3, [r3, #0]
 8005a24:	681a      	ldr	r2, [r3, #0]
 8005a26:	687b      	ldr	r3, [r7, #4]
 8005a28:	681b      	ldr	r3, [r3, #0]
 8005a2a:	f022 0210 	bic.w	r2, r2, #16
 8005a2e:	601a      	str	r2, [r3, #0]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8005a30:	897b      	ldrh	r3, [r7, #10]
 8005a32:	4619      	mov	r1, r3
 8005a34:	6878      	ldr	r0, [r7, #4]
 8005a36:	f000 f897 	bl	8005b68 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8005a3a:	e07b      	b.n	8005b34 <HAL_UART_IRQHandler+0x568>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 8005a3c:	69fb      	ldr	r3, [r7, #28]
 8005a3e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8005a42:	2b00      	cmp	r3, #0
 8005a44:	d00d      	beq.n	8005a62 <HAL_UART_IRQHandler+0x496>
 8005a46:	697b      	ldr	r3, [r7, #20]
 8005a48:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8005a4c:	2b00      	cmp	r3, #0
 8005a4e:	d008      	beq.n	8005a62 <HAL_UART_IRQHandler+0x496>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 8005a50:	687b      	ldr	r3, [r7, #4]
 8005a52:	681b      	ldr	r3, [r3, #0]
 8005a54:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8005a58:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 8005a5a:	6878      	ldr	r0, [r7, #4]
 8005a5c:	f001 f8be 	bl	8006bdc <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8005a60:	e06b      	b.n	8005b3a <HAL_UART_IRQHandler+0x56e>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
 8005a62:	69fb      	ldr	r3, [r7, #28]
 8005a64:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005a68:	2b00      	cmp	r3, #0
 8005a6a:	d012      	beq.n	8005a92 <HAL_UART_IRQHandler+0x4c6>
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
 8005a6c:	69bb      	ldr	r3, [r7, #24]
 8005a6e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005a72:	2b00      	cmp	r3, #0
 8005a74:	d104      	bne.n	8005a80 <HAL_UART_IRQHandler+0x4b4>
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
 8005a76:	697b      	ldr	r3, [r7, #20]
 8005a78:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8005a7c:	2b00      	cmp	r3, #0
 8005a7e:	d008      	beq.n	8005a92 <HAL_UART_IRQHandler+0x4c6>
  {
    if (huart->TxISR != NULL)
 8005a80:	687b      	ldr	r3, [r7, #4]
 8005a82:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005a84:	2b00      	cmp	r3, #0
 8005a86:	d057      	beq.n	8005b38 <HAL_UART_IRQHandler+0x56c>
    {
      huart->TxISR(huart);
 8005a88:	687b      	ldr	r3, [r7, #4]
 8005a8a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005a8c:	6878      	ldr	r0, [r7, #4]
 8005a8e:	4798      	blx	r3
    }
    return;
 8005a90:	e052      	b.n	8005b38 <HAL_UART_IRQHandler+0x56c>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 8005a92:	69fb      	ldr	r3, [r7, #28]
 8005a94:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005a98:	2b00      	cmp	r3, #0
 8005a9a:	d02b      	beq.n	8005af4 <HAL_UART_IRQHandler+0x528>
 8005a9c:	69bb      	ldr	r3, [r7, #24]
 8005a9e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005aa2:	2b00      	cmp	r3, #0
 8005aa4:	d026      	beq.n	8005af4 <HAL_UART_IRQHandler+0x528>
  {
    UART_EndTransmit_IT(huart);
 8005aa6:	6878      	ldr	r0, [r7, #4]
 8005aa8:	f001 f87e 	bl	8006ba8 <UART_EndTransmit_IT>
    return;
 8005aac:	e045      	b.n	8005b3a <HAL_UART_IRQHandler+0x56e>
 8005aae:	bf00      	nop
 8005ab0:	40020010 	.word	0x40020010
 8005ab4:	40020028 	.word	0x40020028
 8005ab8:	40020040 	.word	0x40020040
 8005abc:	40020058 	.word	0x40020058
 8005ac0:	40020070 	.word	0x40020070
 8005ac4:	40020088 	.word	0x40020088
 8005ac8:	400200a0 	.word	0x400200a0
 8005acc:	400200b8 	.word	0x400200b8
 8005ad0:	40020410 	.word	0x40020410
 8005ad4:	40020428 	.word	0x40020428
 8005ad8:	40020440 	.word	0x40020440
 8005adc:	40020458 	.word	0x40020458
 8005ae0:	40020470 	.word	0x40020470
 8005ae4:	40020488 	.word	0x40020488
 8005ae8:	400204a0 	.word	0x400204a0
 8005aec:	400204b8 	.word	0x400204b8
 8005af0:	effffffe 	.word	0xeffffffe
  }

  /* UART TX Fifo Empty occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_TXFE) != 0U) && ((cr1its & USART_CR1_TXFEIE) != 0U))
 8005af4:	69fb      	ldr	r3, [r7, #28]
 8005af6:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8005afa:	2b00      	cmp	r3, #0
 8005afc:	d008      	beq.n	8005b10 <HAL_UART_IRQHandler+0x544>
 8005afe:	69bb      	ldr	r3, [r7, #24]
 8005b00:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8005b04:	2b00      	cmp	r3, #0
 8005b06:	d003      	beq.n	8005b10 <HAL_UART_IRQHandler+0x544>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Tx Fifo Empty Callback */
    huart->TxFifoEmptyCallback(huart);
#else
    /* Call legacy weak Tx Fifo Empty Callback */
    HAL_UARTEx_TxFifoEmptyCallback(huart);
 8005b08:	6878      	ldr	r0, [r7, #4]
 8005b0a:	f001 f87b 	bl	8006c04 <HAL_UARTEx_TxFifoEmptyCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8005b0e:	e014      	b.n	8005b3a <HAL_UART_IRQHandler+0x56e>
  }

  /* UART RX Fifo Full occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_RXFF) != 0U) && ((cr1its & USART_CR1_RXFFIE) != 0U))
 8005b10:	69fb      	ldr	r3, [r7, #28]
 8005b12:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8005b16:	2b00      	cmp	r3, #0
 8005b18:	d00f      	beq.n	8005b3a <HAL_UART_IRQHandler+0x56e>
 8005b1a:	69bb      	ldr	r3, [r7, #24]
 8005b1c:	2b00      	cmp	r3, #0
 8005b1e:	da0c      	bge.n	8005b3a <HAL_UART_IRQHandler+0x56e>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Rx Fifo Full Callback */
    huart->RxFifoFullCallback(huart);
#else
    /* Call legacy weak Rx Fifo Full Callback */
    HAL_UARTEx_RxFifoFullCallback(huart);
 8005b20:	6878      	ldr	r0, [r7, #4]
 8005b22:	f001 f865 	bl	8006bf0 <HAL_UARTEx_RxFifoFullCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8005b26:	e008      	b.n	8005b3a <HAL_UART_IRQHandler+0x56e>
      return;
 8005b28:	bf00      	nop
 8005b2a:	e006      	b.n	8005b3a <HAL_UART_IRQHandler+0x56e>
    return;
 8005b2c:	bf00      	nop
 8005b2e:	e004      	b.n	8005b3a <HAL_UART_IRQHandler+0x56e>
      return;
 8005b30:	bf00      	nop
 8005b32:	e002      	b.n	8005b3a <HAL_UART_IRQHandler+0x56e>
      return;
 8005b34:	bf00      	nop
 8005b36:	e000      	b.n	8005b3a <HAL_UART_IRQHandler+0x56e>
    return;
 8005b38:	bf00      	nop
  }
}
 8005b3a:	3720      	adds	r7, #32
 8005b3c:	46bd      	mov	sp, r7
 8005b3e:	bd80      	pop	{r7, pc}

08005b40 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8005b40:	b480      	push	{r7}
 8005b42:	b083      	sub	sp, #12
 8005b44:	af00      	add	r7, sp, #0
 8005b46:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 8005b48:	bf00      	nop
 8005b4a:	370c      	adds	r7, #12
 8005b4c:	46bd      	mov	sp, r7
 8005b4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b52:	4770      	bx	lr

08005b54 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8005b54:	b480      	push	{r7}
 8005b56:	b083      	sub	sp, #12
 8005b58:	af00      	add	r7, sp, #0
 8005b5a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 8005b5c:	bf00      	nop
 8005b5e:	370c      	adds	r7, #12
 8005b60:	46bd      	mov	sp, r7
 8005b62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b66:	4770      	bx	lr

08005b68 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8005b68:	b480      	push	{r7}
 8005b6a:	b083      	sub	sp, #12
 8005b6c:	af00      	add	r7, sp, #0
 8005b6e:	6078      	str	r0, [r7, #4]
 8005b70:	460b      	mov	r3, r1
 8005b72:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8005b74:	bf00      	nop
 8005b76:	370c      	adds	r7, #12
 8005b78:	46bd      	mov	sp, r7
 8005b7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b7e:	4770      	bx	lr

08005b80 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8005b80:	b5b0      	push	{r4, r5, r7, lr}
 8005b82:	b08e      	sub	sp, #56	; 0x38
 8005b84:	af00      	add	r7, sp, #0
 8005b86:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8005b88:	2300      	movs	r3, #0
 8005b8a:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8005b8e:	687b      	ldr	r3, [r7, #4]
 8005b90:	689a      	ldr	r2, [r3, #8]
 8005b92:	687b      	ldr	r3, [r7, #4]
 8005b94:	691b      	ldr	r3, [r3, #16]
 8005b96:	431a      	orrs	r2, r3
 8005b98:	687b      	ldr	r3, [r7, #4]
 8005b9a:	695b      	ldr	r3, [r3, #20]
 8005b9c:	431a      	orrs	r2, r3
 8005b9e:	687b      	ldr	r3, [r7, #4]
 8005ba0:	69db      	ldr	r3, [r3, #28]
 8005ba2:	4313      	orrs	r3, r2
 8005ba4:	637b      	str	r3, [r7, #52]	; 0x34
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8005ba6:	687b      	ldr	r3, [r7, #4]
 8005ba8:	681b      	ldr	r3, [r3, #0]
 8005baa:	681a      	ldr	r2, [r3, #0]
 8005bac:	4bbf      	ldr	r3, [pc, #764]	; (8005eac <UART_SetConfig+0x32c>)
 8005bae:	4013      	ands	r3, r2
 8005bb0:	687a      	ldr	r2, [r7, #4]
 8005bb2:	6812      	ldr	r2, [r2, #0]
 8005bb4:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8005bb6:	430b      	orrs	r3, r1
 8005bb8:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8005bba:	687b      	ldr	r3, [r7, #4]
 8005bbc:	681b      	ldr	r3, [r3, #0]
 8005bbe:	685b      	ldr	r3, [r3, #4]
 8005bc0:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8005bc4:	687b      	ldr	r3, [r7, #4]
 8005bc6:	68da      	ldr	r2, [r3, #12]
 8005bc8:	687b      	ldr	r3, [r7, #4]
 8005bca:	681b      	ldr	r3, [r3, #0]
 8005bcc:	430a      	orrs	r2, r1
 8005bce:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8005bd0:	687b      	ldr	r3, [r7, #4]
 8005bd2:	699b      	ldr	r3, [r3, #24]
 8005bd4:	637b      	str	r3, [r7, #52]	; 0x34

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8005bd6:	687b      	ldr	r3, [r7, #4]
 8005bd8:	681b      	ldr	r3, [r3, #0]
 8005bda:	4ab5      	ldr	r2, [pc, #724]	; (8005eb0 <UART_SetConfig+0x330>)
 8005bdc:	4293      	cmp	r3, r2
 8005bde:	d004      	beq.n	8005bea <UART_SetConfig+0x6a>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8005be0:	687b      	ldr	r3, [r7, #4]
 8005be2:	6a1b      	ldr	r3, [r3, #32]
 8005be4:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8005be6:	4313      	orrs	r3, r2
 8005be8:	637b      	str	r3, [r7, #52]	; 0x34
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8005bea:	687b      	ldr	r3, [r7, #4]
 8005bec:	681b      	ldr	r3, [r3, #0]
 8005bee:	689a      	ldr	r2, [r3, #8]
 8005bf0:	4bb0      	ldr	r3, [pc, #704]	; (8005eb4 <UART_SetConfig+0x334>)
 8005bf2:	4013      	ands	r3, r2
 8005bf4:	687a      	ldr	r2, [r7, #4]
 8005bf6:	6812      	ldr	r2, [r2, #0]
 8005bf8:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8005bfa:	430b      	orrs	r3, r1
 8005bfc:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8005bfe:	687b      	ldr	r3, [r7, #4]
 8005c00:	681b      	ldr	r3, [r3, #0]
 8005c02:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005c04:	f023 010f 	bic.w	r1, r3, #15
 8005c08:	687b      	ldr	r3, [r7, #4]
 8005c0a:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8005c0c:	687b      	ldr	r3, [r7, #4]
 8005c0e:	681b      	ldr	r3, [r3, #0]
 8005c10:	430a      	orrs	r2, r1
 8005c12:	62da      	str	r2, [r3, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8005c14:	687b      	ldr	r3, [r7, #4]
 8005c16:	681b      	ldr	r3, [r3, #0]
 8005c18:	4aa7      	ldr	r2, [pc, #668]	; (8005eb8 <UART_SetConfig+0x338>)
 8005c1a:	4293      	cmp	r3, r2
 8005c1c:	d176      	bne.n	8005d0c <UART_SetConfig+0x18c>
 8005c1e:	4ba7      	ldr	r3, [pc, #668]	; (8005ebc <UART_SetConfig+0x33c>)
 8005c20:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005c22:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8005c26:	2b28      	cmp	r3, #40	; 0x28
 8005c28:	d86c      	bhi.n	8005d04 <UART_SetConfig+0x184>
 8005c2a:	a201      	add	r2, pc, #4	; (adr r2, 8005c30 <UART_SetConfig+0xb0>)
 8005c2c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005c30:	08005cd5 	.word	0x08005cd5
 8005c34:	08005d05 	.word	0x08005d05
 8005c38:	08005d05 	.word	0x08005d05
 8005c3c:	08005d05 	.word	0x08005d05
 8005c40:	08005d05 	.word	0x08005d05
 8005c44:	08005d05 	.word	0x08005d05
 8005c48:	08005d05 	.word	0x08005d05
 8005c4c:	08005d05 	.word	0x08005d05
 8005c50:	08005cdd 	.word	0x08005cdd
 8005c54:	08005d05 	.word	0x08005d05
 8005c58:	08005d05 	.word	0x08005d05
 8005c5c:	08005d05 	.word	0x08005d05
 8005c60:	08005d05 	.word	0x08005d05
 8005c64:	08005d05 	.word	0x08005d05
 8005c68:	08005d05 	.word	0x08005d05
 8005c6c:	08005d05 	.word	0x08005d05
 8005c70:	08005ce5 	.word	0x08005ce5
 8005c74:	08005d05 	.word	0x08005d05
 8005c78:	08005d05 	.word	0x08005d05
 8005c7c:	08005d05 	.word	0x08005d05
 8005c80:	08005d05 	.word	0x08005d05
 8005c84:	08005d05 	.word	0x08005d05
 8005c88:	08005d05 	.word	0x08005d05
 8005c8c:	08005d05 	.word	0x08005d05
 8005c90:	08005ced 	.word	0x08005ced
 8005c94:	08005d05 	.word	0x08005d05
 8005c98:	08005d05 	.word	0x08005d05
 8005c9c:	08005d05 	.word	0x08005d05
 8005ca0:	08005d05 	.word	0x08005d05
 8005ca4:	08005d05 	.word	0x08005d05
 8005ca8:	08005d05 	.word	0x08005d05
 8005cac:	08005d05 	.word	0x08005d05
 8005cb0:	08005cf5 	.word	0x08005cf5
 8005cb4:	08005d05 	.word	0x08005d05
 8005cb8:	08005d05 	.word	0x08005d05
 8005cbc:	08005d05 	.word	0x08005d05
 8005cc0:	08005d05 	.word	0x08005d05
 8005cc4:	08005d05 	.word	0x08005d05
 8005cc8:	08005d05 	.word	0x08005d05
 8005ccc:	08005d05 	.word	0x08005d05
 8005cd0:	08005cfd 	.word	0x08005cfd
 8005cd4:	2301      	movs	r3, #1
 8005cd6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8005cda:	e326      	b.n	800632a <UART_SetConfig+0x7aa>
 8005cdc:	2304      	movs	r3, #4
 8005cde:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8005ce2:	e322      	b.n	800632a <UART_SetConfig+0x7aa>
 8005ce4:	2308      	movs	r3, #8
 8005ce6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8005cea:	e31e      	b.n	800632a <UART_SetConfig+0x7aa>
 8005cec:	2310      	movs	r3, #16
 8005cee:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8005cf2:	e31a      	b.n	800632a <UART_SetConfig+0x7aa>
 8005cf4:	2320      	movs	r3, #32
 8005cf6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8005cfa:	e316      	b.n	800632a <UART_SetConfig+0x7aa>
 8005cfc:	2340      	movs	r3, #64	; 0x40
 8005cfe:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8005d02:	e312      	b.n	800632a <UART_SetConfig+0x7aa>
 8005d04:	2380      	movs	r3, #128	; 0x80
 8005d06:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8005d0a:	e30e      	b.n	800632a <UART_SetConfig+0x7aa>
 8005d0c:	687b      	ldr	r3, [r7, #4]
 8005d0e:	681b      	ldr	r3, [r3, #0]
 8005d10:	4a6b      	ldr	r2, [pc, #428]	; (8005ec0 <UART_SetConfig+0x340>)
 8005d12:	4293      	cmp	r3, r2
 8005d14:	d130      	bne.n	8005d78 <UART_SetConfig+0x1f8>
 8005d16:	4b69      	ldr	r3, [pc, #420]	; (8005ebc <UART_SetConfig+0x33c>)
 8005d18:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005d1a:	f003 0307 	and.w	r3, r3, #7
 8005d1e:	2b05      	cmp	r3, #5
 8005d20:	d826      	bhi.n	8005d70 <UART_SetConfig+0x1f0>
 8005d22:	a201      	add	r2, pc, #4	; (adr r2, 8005d28 <UART_SetConfig+0x1a8>)
 8005d24:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005d28:	08005d41 	.word	0x08005d41
 8005d2c:	08005d49 	.word	0x08005d49
 8005d30:	08005d51 	.word	0x08005d51
 8005d34:	08005d59 	.word	0x08005d59
 8005d38:	08005d61 	.word	0x08005d61
 8005d3c:	08005d69 	.word	0x08005d69
 8005d40:	2300      	movs	r3, #0
 8005d42:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8005d46:	e2f0      	b.n	800632a <UART_SetConfig+0x7aa>
 8005d48:	2304      	movs	r3, #4
 8005d4a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8005d4e:	e2ec      	b.n	800632a <UART_SetConfig+0x7aa>
 8005d50:	2308      	movs	r3, #8
 8005d52:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8005d56:	e2e8      	b.n	800632a <UART_SetConfig+0x7aa>
 8005d58:	2310      	movs	r3, #16
 8005d5a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8005d5e:	e2e4      	b.n	800632a <UART_SetConfig+0x7aa>
 8005d60:	2320      	movs	r3, #32
 8005d62:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8005d66:	e2e0      	b.n	800632a <UART_SetConfig+0x7aa>
 8005d68:	2340      	movs	r3, #64	; 0x40
 8005d6a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8005d6e:	e2dc      	b.n	800632a <UART_SetConfig+0x7aa>
 8005d70:	2380      	movs	r3, #128	; 0x80
 8005d72:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8005d76:	e2d8      	b.n	800632a <UART_SetConfig+0x7aa>
 8005d78:	687b      	ldr	r3, [r7, #4]
 8005d7a:	681b      	ldr	r3, [r3, #0]
 8005d7c:	4a51      	ldr	r2, [pc, #324]	; (8005ec4 <UART_SetConfig+0x344>)
 8005d7e:	4293      	cmp	r3, r2
 8005d80:	d130      	bne.n	8005de4 <UART_SetConfig+0x264>
 8005d82:	4b4e      	ldr	r3, [pc, #312]	; (8005ebc <UART_SetConfig+0x33c>)
 8005d84:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005d86:	f003 0307 	and.w	r3, r3, #7
 8005d8a:	2b05      	cmp	r3, #5
 8005d8c:	d826      	bhi.n	8005ddc <UART_SetConfig+0x25c>
 8005d8e:	a201      	add	r2, pc, #4	; (adr r2, 8005d94 <UART_SetConfig+0x214>)
 8005d90:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005d94:	08005dad 	.word	0x08005dad
 8005d98:	08005db5 	.word	0x08005db5
 8005d9c:	08005dbd 	.word	0x08005dbd
 8005da0:	08005dc5 	.word	0x08005dc5
 8005da4:	08005dcd 	.word	0x08005dcd
 8005da8:	08005dd5 	.word	0x08005dd5
 8005dac:	2300      	movs	r3, #0
 8005dae:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8005db2:	e2ba      	b.n	800632a <UART_SetConfig+0x7aa>
 8005db4:	2304      	movs	r3, #4
 8005db6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8005dba:	e2b6      	b.n	800632a <UART_SetConfig+0x7aa>
 8005dbc:	2308      	movs	r3, #8
 8005dbe:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8005dc2:	e2b2      	b.n	800632a <UART_SetConfig+0x7aa>
 8005dc4:	2310      	movs	r3, #16
 8005dc6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8005dca:	e2ae      	b.n	800632a <UART_SetConfig+0x7aa>
 8005dcc:	2320      	movs	r3, #32
 8005dce:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8005dd2:	e2aa      	b.n	800632a <UART_SetConfig+0x7aa>
 8005dd4:	2340      	movs	r3, #64	; 0x40
 8005dd6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8005dda:	e2a6      	b.n	800632a <UART_SetConfig+0x7aa>
 8005ddc:	2380      	movs	r3, #128	; 0x80
 8005dde:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8005de2:	e2a2      	b.n	800632a <UART_SetConfig+0x7aa>
 8005de4:	687b      	ldr	r3, [r7, #4]
 8005de6:	681b      	ldr	r3, [r3, #0]
 8005de8:	4a37      	ldr	r2, [pc, #220]	; (8005ec8 <UART_SetConfig+0x348>)
 8005dea:	4293      	cmp	r3, r2
 8005dec:	d130      	bne.n	8005e50 <UART_SetConfig+0x2d0>
 8005dee:	4b33      	ldr	r3, [pc, #204]	; (8005ebc <UART_SetConfig+0x33c>)
 8005df0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005df2:	f003 0307 	and.w	r3, r3, #7
 8005df6:	2b05      	cmp	r3, #5
 8005df8:	d826      	bhi.n	8005e48 <UART_SetConfig+0x2c8>
 8005dfa:	a201      	add	r2, pc, #4	; (adr r2, 8005e00 <UART_SetConfig+0x280>)
 8005dfc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005e00:	08005e19 	.word	0x08005e19
 8005e04:	08005e21 	.word	0x08005e21
 8005e08:	08005e29 	.word	0x08005e29
 8005e0c:	08005e31 	.word	0x08005e31
 8005e10:	08005e39 	.word	0x08005e39
 8005e14:	08005e41 	.word	0x08005e41
 8005e18:	2300      	movs	r3, #0
 8005e1a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8005e1e:	e284      	b.n	800632a <UART_SetConfig+0x7aa>
 8005e20:	2304      	movs	r3, #4
 8005e22:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8005e26:	e280      	b.n	800632a <UART_SetConfig+0x7aa>
 8005e28:	2308      	movs	r3, #8
 8005e2a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8005e2e:	e27c      	b.n	800632a <UART_SetConfig+0x7aa>
 8005e30:	2310      	movs	r3, #16
 8005e32:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8005e36:	e278      	b.n	800632a <UART_SetConfig+0x7aa>
 8005e38:	2320      	movs	r3, #32
 8005e3a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8005e3e:	e274      	b.n	800632a <UART_SetConfig+0x7aa>
 8005e40:	2340      	movs	r3, #64	; 0x40
 8005e42:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8005e46:	e270      	b.n	800632a <UART_SetConfig+0x7aa>
 8005e48:	2380      	movs	r3, #128	; 0x80
 8005e4a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8005e4e:	e26c      	b.n	800632a <UART_SetConfig+0x7aa>
 8005e50:	687b      	ldr	r3, [r7, #4]
 8005e52:	681b      	ldr	r3, [r3, #0]
 8005e54:	4a1d      	ldr	r2, [pc, #116]	; (8005ecc <UART_SetConfig+0x34c>)
 8005e56:	4293      	cmp	r3, r2
 8005e58:	d142      	bne.n	8005ee0 <UART_SetConfig+0x360>
 8005e5a:	4b18      	ldr	r3, [pc, #96]	; (8005ebc <UART_SetConfig+0x33c>)
 8005e5c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005e5e:	f003 0307 	and.w	r3, r3, #7
 8005e62:	2b05      	cmp	r3, #5
 8005e64:	d838      	bhi.n	8005ed8 <UART_SetConfig+0x358>
 8005e66:	a201      	add	r2, pc, #4	; (adr r2, 8005e6c <UART_SetConfig+0x2ec>)
 8005e68:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005e6c:	08005e85 	.word	0x08005e85
 8005e70:	08005e8d 	.word	0x08005e8d
 8005e74:	08005e95 	.word	0x08005e95
 8005e78:	08005e9d 	.word	0x08005e9d
 8005e7c:	08005ea5 	.word	0x08005ea5
 8005e80:	08005ed1 	.word	0x08005ed1
 8005e84:	2300      	movs	r3, #0
 8005e86:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8005e8a:	e24e      	b.n	800632a <UART_SetConfig+0x7aa>
 8005e8c:	2304      	movs	r3, #4
 8005e8e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8005e92:	e24a      	b.n	800632a <UART_SetConfig+0x7aa>
 8005e94:	2308      	movs	r3, #8
 8005e96:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8005e9a:	e246      	b.n	800632a <UART_SetConfig+0x7aa>
 8005e9c:	2310      	movs	r3, #16
 8005e9e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8005ea2:	e242      	b.n	800632a <UART_SetConfig+0x7aa>
 8005ea4:	2320      	movs	r3, #32
 8005ea6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8005eaa:	e23e      	b.n	800632a <UART_SetConfig+0x7aa>
 8005eac:	cfff69f3 	.word	0xcfff69f3
 8005eb0:	58000c00 	.word	0x58000c00
 8005eb4:	11fff4ff 	.word	0x11fff4ff
 8005eb8:	40011000 	.word	0x40011000
 8005ebc:	58024400 	.word	0x58024400
 8005ec0:	40004400 	.word	0x40004400
 8005ec4:	40004800 	.word	0x40004800
 8005ec8:	40004c00 	.word	0x40004c00
 8005ecc:	40005000 	.word	0x40005000
 8005ed0:	2340      	movs	r3, #64	; 0x40
 8005ed2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8005ed6:	e228      	b.n	800632a <UART_SetConfig+0x7aa>
 8005ed8:	2380      	movs	r3, #128	; 0x80
 8005eda:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8005ede:	e224      	b.n	800632a <UART_SetConfig+0x7aa>
 8005ee0:	687b      	ldr	r3, [r7, #4]
 8005ee2:	681b      	ldr	r3, [r3, #0]
 8005ee4:	4ab1      	ldr	r2, [pc, #708]	; (80061ac <UART_SetConfig+0x62c>)
 8005ee6:	4293      	cmp	r3, r2
 8005ee8:	d176      	bne.n	8005fd8 <UART_SetConfig+0x458>
 8005eea:	4bb1      	ldr	r3, [pc, #708]	; (80061b0 <UART_SetConfig+0x630>)
 8005eec:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005eee:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8005ef2:	2b28      	cmp	r3, #40	; 0x28
 8005ef4:	d86c      	bhi.n	8005fd0 <UART_SetConfig+0x450>
 8005ef6:	a201      	add	r2, pc, #4	; (adr r2, 8005efc <UART_SetConfig+0x37c>)
 8005ef8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005efc:	08005fa1 	.word	0x08005fa1
 8005f00:	08005fd1 	.word	0x08005fd1
 8005f04:	08005fd1 	.word	0x08005fd1
 8005f08:	08005fd1 	.word	0x08005fd1
 8005f0c:	08005fd1 	.word	0x08005fd1
 8005f10:	08005fd1 	.word	0x08005fd1
 8005f14:	08005fd1 	.word	0x08005fd1
 8005f18:	08005fd1 	.word	0x08005fd1
 8005f1c:	08005fa9 	.word	0x08005fa9
 8005f20:	08005fd1 	.word	0x08005fd1
 8005f24:	08005fd1 	.word	0x08005fd1
 8005f28:	08005fd1 	.word	0x08005fd1
 8005f2c:	08005fd1 	.word	0x08005fd1
 8005f30:	08005fd1 	.word	0x08005fd1
 8005f34:	08005fd1 	.word	0x08005fd1
 8005f38:	08005fd1 	.word	0x08005fd1
 8005f3c:	08005fb1 	.word	0x08005fb1
 8005f40:	08005fd1 	.word	0x08005fd1
 8005f44:	08005fd1 	.word	0x08005fd1
 8005f48:	08005fd1 	.word	0x08005fd1
 8005f4c:	08005fd1 	.word	0x08005fd1
 8005f50:	08005fd1 	.word	0x08005fd1
 8005f54:	08005fd1 	.word	0x08005fd1
 8005f58:	08005fd1 	.word	0x08005fd1
 8005f5c:	08005fb9 	.word	0x08005fb9
 8005f60:	08005fd1 	.word	0x08005fd1
 8005f64:	08005fd1 	.word	0x08005fd1
 8005f68:	08005fd1 	.word	0x08005fd1
 8005f6c:	08005fd1 	.word	0x08005fd1
 8005f70:	08005fd1 	.word	0x08005fd1
 8005f74:	08005fd1 	.word	0x08005fd1
 8005f78:	08005fd1 	.word	0x08005fd1
 8005f7c:	08005fc1 	.word	0x08005fc1
 8005f80:	08005fd1 	.word	0x08005fd1
 8005f84:	08005fd1 	.word	0x08005fd1
 8005f88:	08005fd1 	.word	0x08005fd1
 8005f8c:	08005fd1 	.word	0x08005fd1
 8005f90:	08005fd1 	.word	0x08005fd1
 8005f94:	08005fd1 	.word	0x08005fd1
 8005f98:	08005fd1 	.word	0x08005fd1
 8005f9c:	08005fc9 	.word	0x08005fc9
 8005fa0:	2301      	movs	r3, #1
 8005fa2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8005fa6:	e1c0      	b.n	800632a <UART_SetConfig+0x7aa>
 8005fa8:	2304      	movs	r3, #4
 8005faa:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8005fae:	e1bc      	b.n	800632a <UART_SetConfig+0x7aa>
 8005fb0:	2308      	movs	r3, #8
 8005fb2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8005fb6:	e1b8      	b.n	800632a <UART_SetConfig+0x7aa>
 8005fb8:	2310      	movs	r3, #16
 8005fba:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8005fbe:	e1b4      	b.n	800632a <UART_SetConfig+0x7aa>
 8005fc0:	2320      	movs	r3, #32
 8005fc2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8005fc6:	e1b0      	b.n	800632a <UART_SetConfig+0x7aa>
 8005fc8:	2340      	movs	r3, #64	; 0x40
 8005fca:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8005fce:	e1ac      	b.n	800632a <UART_SetConfig+0x7aa>
 8005fd0:	2380      	movs	r3, #128	; 0x80
 8005fd2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8005fd6:	e1a8      	b.n	800632a <UART_SetConfig+0x7aa>
 8005fd8:	687b      	ldr	r3, [r7, #4]
 8005fda:	681b      	ldr	r3, [r3, #0]
 8005fdc:	4a75      	ldr	r2, [pc, #468]	; (80061b4 <UART_SetConfig+0x634>)
 8005fde:	4293      	cmp	r3, r2
 8005fe0:	d130      	bne.n	8006044 <UART_SetConfig+0x4c4>
 8005fe2:	4b73      	ldr	r3, [pc, #460]	; (80061b0 <UART_SetConfig+0x630>)
 8005fe4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005fe6:	f003 0307 	and.w	r3, r3, #7
 8005fea:	2b05      	cmp	r3, #5
 8005fec:	d826      	bhi.n	800603c <UART_SetConfig+0x4bc>
 8005fee:	a201      	add	r2, pc, #4	; (adr r2, 8005ff4 <UART_SetConfig+0x474>)
 8005ff0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005ff4:	0800600d 	.word	0x0800600d
 8005ff8:	08006015 	.word	0x08006015
 8005ffc:	0800601d 	.word	0x0800601d
 8006000:	08006025 	.word	0x08006025
 8006004:	0800602d 	.word	0x0800602d
 8006008:	08006035 	.word	0x08006035
 800600c:	2300      	movs	r3, #0
 800600e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8006012:	e18a      	b.n	800632a <UART_SetConfig+0x7aa>
 8006014:	2304      	movs	r3, #4
 8006016:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800601a:	e186      	b.n	800632a <UART_SetConfig+0x7aa>
 800601c:	2308      	movs	r3, #8
 800601e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8006022:	e182      	b.n	800632a <UART_SetConfig+0x7aa>
 8006024:	2310      	movs	r3, #16
 8006026:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800602a:	e17e      	b.n	800632a <UART_SetConfig+0x7aa>
 800602c:	2320      	movs	r3, #32
 800602e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8006032:	e17a      	b.n	800632a <UART_SetConfig+0x7aa>
 8006034:	2340      	movs	r3, #64	; 0x40
 8006036:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800603a:	e176      	b.n	800632a <UART_SetConfig+0x7aa>
 800603c:	2380      	movs	r3, #128	; 0x80
 800603e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8006042:	e172      	b.n	800632a <UART_SetConfig+0x7aa>
 8006044:	687b      	ldr	r3, [r7, #4]
 8006046:	681b      	ldr	r3, [r3, #0]
 8006048:	4a5b      	ldr	r2, [pc, #364]	; (80061b8 <UART_SetConfig+0x638>)
 800604a:	4293      	cmp	r3, r2
 800604c:	d130      	bne.n	80060b0 <UART_SetConfig+0x530>
 800604e:	4b58      	ldr	r3, [pc, #352]	; (80061b0 <UART_SetConfig+0x630>)
 8006050:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006052:	f003 0307 	and.w	r3, r3, #7
 8006056:	2b05      	cmp	r3, #5
 8006058:	d826      	bhi.n	80060a8 <UART_SetConfig+0x528>
 800605a:	a201      	add	r2, pc, #4	; (adr r2, 8006060 <UART_SetConfig+0x4e0>)
 800605c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006060:	08006079 	.word	0x08006079
 8006064:	08006081 	.word	0x08006081
 8006068:	08006089 	.word	0x08006089
 800606c:	08006091 	.word	0x08006091
 8006070:	08006099 	.word	0x08006099
 8006074:	080060a1 	.word	0x080060a1
 8006078:	2300      	movs	r3, #0
 800607a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800607e:	e154      	b.n	800632a <UART_SetConfig+0x7aa>
 8006080:	2304      	movs	r3, #4
 8006082:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8006086:	e150      	b.n	800632a <UART_SetConfig+0x7aa>
 8006088:	2308      	movs	r3, #8
 800608a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800608e:	e14c      	b.n	800632a <UART_SetConfig+0x7aa>
 8006090:	2310      	movs	r3, #16
 8006092:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8006096:	e148      	b.n	800632a <UART_SetConfig+0x7aa>
 8006098:	2320      	movs	r3, #32
 800609a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800609e:	e144      	b.n	800632a <UART_SetConfig+0x7aa>
 80060a0:	2340      	movs	r3, #64	; 0x40
 80060a2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80060a6:	e140      	b.n	800632a <UART_SetConfig+0x7aa>
 80060a8:	2380      	movs	r3, #128	; 0x80
 80060aa:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80060ae:	e13c      	b.n	800632a <UART_SetConfig+0x7aa>
 80060b0:	687b      	ldr	r3, [r7, #4]
 80060b2:	681b      	ldr	r3, [r3, #0]
 80060b4:	4a41      	ldr	r2, [pc, #260]	; (80061bc <UART_SetConfig+0x63c>)
 80060b6:	4293      	cmp	r3, r2
 80060b8:	f040 8082 	bne.w	80061c0 <UART_SetConfig+0x640>
 80060bc:	4b3c      	ldr	r3, [pc, #240]	; (80061b0 <UART_SetConfig+0x630>)
 80060be:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80060c0:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80060c4:	2b28      	cmp	r3, #40	; 0x28
 80060c6:	d86d      	bhi.n	80061a4 <UART_SetConfig+0x624>
 80060c8:	a201      	add	r2, pc, #4	; (adr r2, 80060d0 <UART_SetConfig+0x550>)
 80060ca:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80060ce:	bf00      	nop
 80060d0:	08006175 	.word	0x08006175
 80060d4:	080061a5 	.word	0x080061a5
 80060d8:	080061a5 	.word	0x080061a5
 80060dc:	080061a5 	.word	0x080061a5
 80060e0:	080061a5 	.word	0x080061a5
 80060e4:	080061a5 	.word	0x080061a5
 80060e8:	080061a5 	.word	0x080061a5
 80060ec:	080061a5 	.word	0x080061a5
 80060f0:	0800617d 	.word	0x0800617d
 80060f4:	080061a5 	.word	0x080061a5
 80060f8:	080061a5 	.word	0x080061a5
 80060fc:	080061a5 	.word	0x080061a5
 8006100:	080061a5 	.word	0x080061a5
 8006104:	080061a5 	.word	0x080061a5
 8006108:	080061a5 	.word	0x080061a5
 800610c:	080061a5 	.word	0x080061a5
 8006110:	08006185 	.word	0x08006185
 8006114:	080061a5 	.word	0x080061a5
 8006118:	080061a5 	.word	0x080061a5
 800611c:	080061a5 	.word	0x080061a5
 8006120:	080061a5 	.word	0x080061a5
 8006124:	080061a5 	.word	0x080061a5
 8006128:	080061a5 	.word	0x080061a5
 800612c:	080061a5 	.word	0x080061a5
 8006130:	0800618d 	.word	0x0800618d
 8006134:	080061a5 	.word	0x080061a5
 8006138:	080061a5 	.word	0x080061a5
 800613c:	080061a5 	.word	0x080061a5
 8006140:	080061a5 	.word	0x080061a5
 8006144:	080061a5 	.word	0x080061a5
 8006148:	080061a5 	.word	0x080061a5
 800614c:	080061a5 	.word	0x080061a5
 8006150:	08006195 	.word	0x08006195
 8006154:	080061a5 	.word	0x080061a5
 8006158:	080061a5 	.word	0x080061a5
 800615c:	080061a5 	.word	0x080061a5
 8006160:	080061a5 	.word	0x080061a5
 8006164:	080061a5 	.word	0x080061a5
 8006168:	080061a5 	.word	0x080061a5
 800616c:	080061a5 	.word	0x080061a5
 8006170:	0800619d 	.word	0x0800619d
 8006174:	2301      	movs	r3, #1
 8006176:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800617a:	e0d6      	b.n	800632a <UART_SetConfig+0x7aa>
 800617c:	2304      	movs	r3, #4
 800617e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8006182:	e0d2      	b.n	800632a <UART_SetConfig+0x7aa>
 8006184:	2308      	movs	r3, #8
 8006186:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800618a:	e0ce      	b.n	800632a <UART_SetConfig+0x7aa>
 800618c:	2310      	movs	r3, #16
 800618e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8006192:	e0ca      	b.n	800632a <UART_SetConfig+0x7aa>
 8006194:	2320      	movs	r3, #32
 8006196:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800619a:	e0c6      	b.n	800632a <UART_SetConfig+0x7aa>
 800619c:	2340      	movs	r3, #64	; 0x40
 800619e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80061a2:	e0c2      	b.n	800632a <UART_SetConfig+0x7aa>
 80061a4:	2380      	movs	r3, #128	; 0x80
 80061a6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80061aa:	e0be      	b.n	800632a <UART_SetConfig+0x7aa>
 80061ac:	40011400 	.word	0x40011400
 80061b0:	58024400 	.word	0x58024400
 80061b4:	40007800 	.word	0x40007800
 80061b8:	40007c00 	.word	0x40007c00
 80061bc:	40011800 	.word	0x40011800
 80061c0:	687b      	ldr	r3, [r7, #4]
 80061c2:	681b      	ldr	r3, [r3, #0]
 80061c4:	4aad      	ldr	r2, [pc, #692]	; (800647c <UART_SetConfig+0x8fc>)
 80061c6:	4293      	cmp	r3, r2
 80061c8:	d176      	bne.n	80062b8 <UART_SetConfig+0x738>
 80061ca:	4bad      	ldr	r3, [pc, #692]	; (8006480 <UART_SetConfig+0x900>)
 80061cc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80061ce:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80061d2:	2b28      	cmp	r3, #40	; 0x28
 80061d4:	d86c      	bhi.n	80062b0 <UART_SetConfig+0x730>
 80061d6:	a201      	add	r2, pc, #4	; (adr r2, 80061dc <UART_SetConfig+0x65c>)
 80061d8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80061dc:	08006281 	.word	0x08006281
 80061e0:	080062b1 	.word	0x080062b1
 80061e4:	080062b1 	.word	0x080062b1
 80061e8:	080062b1 	.word	0x080062b1
 80061ec:	080062b1 	.word	0x080062b1
 80061f0:	080062b1 	.word	0x080062b1
 80061f4:	080062b1 	.word	0x080062b1
 80061f8:	080062b1 	.word	0x080062b1
 80061fc:	08006289 	.word	0x08006289
 8006200:	080062b1 	.word	0x080062b1
 8006204:	080062b1 	.word	0x080062b1
 8006208:	080062b1 	.word	0x080062b1
 800620c:	080062b1 	.word	0x080062b1
 8006210:	080062b1 	.word	0x080062b1
 8006214:	080062b1 	.word	0x080062b1
 8006218:	080062b1 	.word	0x080062b1
 800621c:	08006291 	.word	0x08006291
 8006220:	080062b1 	.word	0x080062b1
 8006224:	080062b1 	.word	0x080062b1
 8006228:	080062b1 	.word	0x080062b1
 800622c:	080062b1 	.word	0x080062b1
 8006230:	080062b1 	.word	0x080062b1
 8006234:	080062b1 	.word	0x080062b1
 8006238:	080062b1 	.word	0x080062b1
 800623c:	08006299 	.word	0x08006299
 8006240:	080062b1 	.word	0x080062b1
 8006244:	080062b1 	.word	0x080062b1
 8006248:	080062b1 	.word	0x080062b1
 800624c:	080062b1 	.word	0x080062b1
 8006250:	080062b1 	.word	0x080062b1
 8006254:	080062b1 	.word	0x080062b1
 8006258:	080062b1 	.word	0x080062b1
 800625c:	080062a1 	.word	0x080062a1
 8006260:	080062b1 	.word	0x080062b1
 8006264:	080062b1 	.word	0x080062b1
 8006268:	080062b1 	.word	0x080062b1
 800626c:	080062b1 	.word	0x080062b1
 8006270:	080062b1 	.word	0x080062b1
 8006274:	080062b1 	.word	0x080062b1
 8006278:	080062b1 	.word	0x080062b1
 800627c:	080062a9 	.word	0x080062a9
 8006280:	2301      	movs	r3, #1
 8006282:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8006286:	e050      	b.n	800632a <UART_SetConfig+0x7aa>
 8006288:	2304      	movs	r3, #4
 800628a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800628e:	e04c      	b.n	800632a <UART_SetConfig+0x7aa>
 8006290:	2308      	movs	r3, #8
 8006292:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8006296:	e048      	b.n	800632a <UART_SetConfig+0x7aa>
 8006298:	2310      	movs	r3, #16
 800629a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800629e:	e044      	b.n	800632a <UART_SetConfig+0x7aa>
 80062a0:	2320      	movs	r3, #32
 80062a2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80062a6:	e040      	b.n	800632a <UART_SetConfig+0x7aa>
 80062a8:	2340      	movs	r3, #64	; 0x40
 80062aa:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80062ae:	e03c      	b.n	800632a <UART_SetConfig+0x7aa>
 80062b0:	2380      	movs	r3, #128	; 0x80
 80062b2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80062b6:	e038      	b.n	800632a <UART_SetConfig+0x7aa>
 80062b8:	687b      	ldr	r3, [r7, #4]
 80062ba:	681b      	ldr	r3, [r3, #0]
 80062bc:	4a71      	ldr	r2, [pc, #452]	; (8006484 <UART_SetConfig+0x904>)
 80062be:	4293      	cmp	r3, r2
 80062c0:	d130      	bne.n	8006324 <UART_SetConfig+0x7a4>
 80062c2:	4b6f      	ldr	r3, [pc, #444]	; (8006480 <UART_SetConfig+0x900>)
 80062c4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80062c6:	f003 0307 	and.w	r3, r3, #7
 80062ca:	2b05      	cmp	r3, #5
 80062cc:	d826      	bhi.n	800631c <UART_SetConfig+0x79c>
 80062ce:	a201      	add	r2, pc, #4	; (adr r2, 80062d4 <UART_SetConfig+0x754>)
 80062d0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80062d4:	080062ed 	.word	0x080062ed
 80062d8:	080062f5 	.word	0x080062f5
 80062dc:	080062fd 	.word	0x080062fd
 80062e0:	08006305 	.word	0x08006305
 80062e4:	0800630d 	.word	0x0800630d
 80062e8:	08006315 	.word	0x08006315
 80062ec:	2302      	movs	r3, #2
 80062ee:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80062f2:	e01a      	b.n	800632a <UART_SetConfig+0x7aa>
 80062f4:	2304      	movs	r3, #4
 80062f6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80062fa:	e016      	b.n	800632a <UART_SetConfig+0x7aa>
 80062fc:	2308      	movs	r3, #8
 80062fe:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8006302:	e012      	b.n	800632a <UART_SetConfig+0x7aa>
 8006304:	2310      	movs	r3, #16
 8006306:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800630a:	e00e      	b.n	800632a <UART_SetConfig+0x7aa>
 800630c:	2320      	movs	r3, #32
 800630e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8006312:	e00a      	b.n	800632a <UART_SetConfig+0x7aa>
 8006314:	2340      	movs	r3, #64	; 0x40
 8006316:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800631a:	e006      	b.n	800632a <UART_SetConfig+0x7aa>
 800631c:	2380      	movs	r3, #128	; 0x80
 800631e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8006322:	e002      	b.n	800632a <UART_SetConfig+0x7aa>
 8006324:	2380      	movs	r3, #128	; 0x80
 8006326:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 800632a:	687b      	ldr	r3, [r7, #4]
 800632c:	681b      	ldr	r3, [r3, #0]
 800632e:	4a55      	ldr	r2, [pc, #340]	; (8006484 <UART_SetConfig+0x904>)
 8006330:	4293      	cmp	r3, r2
 8006332:	f040 80f0 	bne.w	8006516 <UART_SetConfig+0x996>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8006336:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 800633a:	2b20      	cmp	r3, #32
 800633c:	dc46      	bgt.n	80063cc <UART_SetConfig+0x84c>
 800633e:	2b02      	cmp	r3, #2
 8006340:	db75      	blt.n	800642e <UART_SetConfig+0x8ae>
 8006342:	3b02      	subs	r3, #2
 8006344:	2b1e      	cmp	r3, #30
 8006346:	d872      	bhi.n	800642e <UART_SetConfig+0x8ae>
 8006348:	a201      	add	r2, pc, #4	; (adr r2, 8006350 <UART_SetConfig+0x7d0>)
 800634a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800634e:	bf00      	nop
 8006350:	080063d3 	.word	0x080063d3
 8006354:	0800642f 	.word	0x0800642f
 8006358:	080063db 	.word	0x080063db
 800635c:	0800642f 	.word	0x0800642f
 8006360:	0800642f 	.word	0x0800642f
 8006364:	0800642f 	.word	0x0800642f
 8006368:	080063eb 	.word	0x080063eb
 800636c:	0800642f 	.word	0x0800642f
 8006370:	0800642f 	.word	0x0800642f
 8006374:	0800642f 	.word	0x0800642f
 8006378:	0800642f 	.word	0x0800642f
 800637c:	0800642f 	.word	0x0800642f
 8006380:	0800642f 	.word	0x0800642f
 8006384:	0800642f 	.word	0x0800642f
 8006388:	080063fb 	.word	0x080063fb
 800638c:	0800642f 	.word	0x0800642f
 8006390:	0800642f 	.word	0x0800642f
 8006394:	0800642f 	.word	0x0800642f
 8006398:	0800642f 	.word	0x0800642f
 800639c:	0800642f 	.word	0x0800642f
 80063a0:	0800642f 	.word	0x0800642f
 80063a4:	0800642f 	.word	0x0800642f
 80063a8:	0800642f 	.word	0x0800642f
 80063ac:	0800642f 	.word	0x0800642f
 80063b0:	0800642f 	.word	0x0800642f
 80063b4:	0800642f 	.word	0x0800642f
 80063b8:	0800642f 	.word	0x0800642f
 80063bc:	0800642f 	.word	0x0800642f
 80063c0:	0800642f 	.word	0x0800642f
 80063c4:	0800642f 	.word	0x0800642f
 80063c8:	08006421 	.word	0x08006421
 80063cc:	2b40      	cmp	r3, #64	; 0x40
 80063ce:	d02a      	beq.n	8006426 <UART_SetConfig+0x8a6>
 80063d0:	e02d      	b.n	800642e <UART_SetConfig+0x8ae>
    {
      case UART_CLOCKSOURCE_D3PCLK1:
        pclk = HAL_RCCEx_GetD3PCLK1Freq();
 80063d2:	f7fe fba3 	bl	8004b1c <HAL_RCCEx_GetD3PCLK1Freq>
 80063d6:	62f8      	str	r0, [r7, #44]	; 0x2c
        break;
 80063d8:	e02f      	b.n	800643a <UART_SetConfig+0x8ba>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80063da:	f107 0314 	add.w	r3, r7, #20
 80063de:	4618      	mov	r0, r3
 80063e0:	f7fe fbb2 	bl	8004b48 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 80063e4:	69bb      	ldr	r3, [r7, #24]
 80063e6:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 80063e8:	e027      	b.n	800643a <UART_SetConfig+0x8ba>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 80063ea:	f107 0308 	add.w	r3, r7, #8
 80063ee:	4618      	mov	r0, r3
 80063f0:	f7fe fcfe 	bl	8004df0 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 80063f4:	68fb      	ldr	r3, [r7, #12]
 80063f6:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 80063f8:	e01f      	b.n	800643a <UART_SetConfig+0x8ba>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80063fa:	4b21      	ldr	r3, [pc, #132]	; (8006480 <UART_SetConfig+0x900>)
 80063fc:	681b      	ldr	r3, [r3, #0]
 80063fe:	f003 0320 	and.w	r3, r3, #32
 8006402:	2b00      	cmp	r3, #0
 8006404:	d009      	beq.n	800641a <UART_SetConfig+0x89a>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 8006406:	4b1e      	ldr	r3, [pc, #120]	; (8006480 <UART_SetConfig+0x900>)
 8006408:	681b      	ldr	r3, [r3, #0]
 800640a:	08db      	lsrs	r3, r3, #3
 800640c:	f003 0303 	and.w	r3, r3, #3
 8006410:	4a1d      	ldr	r2, [pc, #116]	; (8006488 <UART_SetConfig+0x908>)
 8006412:	fa22 f303 	lsr.w	r3, r2, r3
 8006416:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8006418:	e00f      	b.n	800643a <UART_SetConfig+0x8ba>
          pclk = (uint32_t) HSI_VALUE;
 800641a:	4b1b      	ldr	r3, [pc, #108]	; (8006488 <UART_SetConfig+0x908>)
 800641c:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800641e:	e00c      	b.n	800643a <UART_SetConfig+0x8ba>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 8006420:	4b1a      	ldr	r3, [pc, #104]	; (800648c <UART_SetConfig+0x90c>)
 8006422:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8006424:	e009      	b.n	800643a <UART_SetConfig+0x8ba>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8006426:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800642a:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800642c:	e005      	b.n	800643a <UART_SetConfig+0x8ba>
      default:
        pclk = 0U;
 800642e:	2300      	movs	r3, #0
 8006430:	62fb      	str	r3, [r7, #44]	; 0x2c
        ret = HAL_ERROR;
 8006432:	2301      	movs	r3, #1
 8006434:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
        break;
 8006438:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 800643a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800643c:	2b00      	cmp	r3, #0
 800643e:	f000 81e6 	beq.w	800680e <UART_SetConfig+0xc8e>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 8006442:	687b      	ldr	r3, [r7, #4]
 8006444:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006446:	4a12      	ldr	r2, [pc, #72]	; (8006490 <UART_SetConfig+0x910>)
 8006448:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800644c:	461a      	mov	r2, r3
 800644e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006450:	fbb3 f3f2 	udiv	r3, r3, r2
 8006454:	623b      	str	r3, [r7, #32]

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8006456:	687b      	ldr	r3, [r7, #4]
 8006458:	685a      	ldr	r2, [r3, #4]
 800645a:	4613      	mov	r3, r2
 800645c:	005b      	lsls	r3, r3, #1
 800645e:	4413      	add	r3, r2
 8006460:	6a3a      	ldr	r2, [r7, #32]
 8006462:	429a      	cmp	r2, r3
 8006464:	d305      	bcc.n	8006472 <UART_SetConfig+0x8f2>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 8006466:	687b      	ldr	r3, [r7, #4]
 8006468:	685b      	ldr	r3, [r3, #4]
 800646a:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800646c:	6a3a      	ldr	r2, [r7, #32]
 800646e:	429a      	cmp	r2, r3
 8006470:	d910      	bls.n	8006494 <UART_SetConfig+0x914>
      {
        ret = HAL_ERROR;
 8006472:	2301      	movs	r3, #1
 8006474:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
 8006478:	e1c9      	b.n	800680e <UART_SetConfig+0xc8e>
 800647a:	bf00      	nop
 800647c:	40011c00 	.word	0x40011c00
 8006480:	58024400 	.word	0x58024400
 8006484:	58000c00 	.word	0x58000c00
 8006488:	03d09000 	.word	0x03d09000
 800648c:	003d0900 	.word	0x003d0900
 8006490:	08008f2c 	.word	0x08008f2c
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8006494:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006496:	4618      	mov	r0, r3
 8006498:	f04f 0100 	mov.w	r1, #0
 800649c:	687b      	ldr	r3, [r7, #4]
 800649e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80064a0:	4ac1      	ldr	r2, [pc, #772]	; (80067a8 <UART_SetConfig+0xc28>)
 80064a2:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80064a6:	b29a      	uxth	r2, r3
 80064a8:	f04f 0300 	mov.w	r3, #0
 80064ac:	f7f9 ff80 	bl	80003b0 <__aeabi_uldivmod>
 80064b0:	4602      	mov	r2, r0
 80064b2:	460b      	mov	r3, r1
 80064b4:	4610      	mov	r0, r2
 80064b6:	4619      	mov	r1, r3
 80064b8:	f04f 0200 	mov.w	r2, #0
 80064bc:	f04f 0300 	mov.w	r3, #0
 80064c0:	020b      	lsls	r3, r1, #8
 80064c2:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 80064c6:	0202      	lsls	r2, r0, #8
 80064c8:	6879      	ldr	r1, [r7, #4]
 80064ca:	6849      	ldr	r1, [r1, #4]
 80064cc:	0849      	lsrs	r1, r1, #1
 80064ce:	4608      	mov	r0, r1
 80064d0:	f04f 0100 	mov.w	r1, #0
 80064d4:	1814      	adds	r4, r2, r0
 80064d6:	eb43 0501 	adc.w	r5, r3, r1
 80064da:	687b      	ldr	r3, [r7, #4]
 80064dc:	685b      	ldr	r3, [r3, #4]
 80064de:	461a      	mov	r2, r3
 80064e0:	f04f 0300 	mov.w	r3, #0
 80064e4:	4620      	mov	r0, r4
 80064e6:	4629      	mov	r1, r5
 80064e8:	f7f9 ff62 	bl	80003b0 <__aeabi_uldivmod>
 80064ec:	4602      	mov	r2, r0
 80064ee:	460b      	mov	r3, r1
 80064f0:	4613      	mov	r3, r2
 80064f2:	62bb      	str	r3, [r7, #40]	; 0x28
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 80064f4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80064f6:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80064fa:	d308      	bcc.n	800650e <UART_SetConfig+0x98e>
 80064fc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80064fe:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8006502:	d204      	bcs.n	800650e <UART_SetConfig+0x98e>
        {
          huart->Instance->BRR = usartdiv;
 8006504:	687b      	ldr	r3, [r7, #4]
 8006506:	681b      	ldr	r3, [r3, #0]
 8006508:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800650a:	60da      	str	r2, [r3, #12]
 800650c:	e17f      	b.n	800680e <UART_SetConfig+0xc8e>
        }
        else
        {
          ret = HAL_ERROR;
 800650e:	2301      	movs	r3, #1
 8006510:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
 8006514:	e17b      	b.n	800680e <UART_SetConfig+0xc8e>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8006516:	687b      	ldr	r3, [r7, #4]
 8006518:	69db      	ldr	r3, [r3, #28]
 800651a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800651e:	f040 80be 	bne.w	800669e <UART_SetConfig+0xb1e>
  {
    switch (clocksource)
 8006522:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8006526:	2b20      	cmp	r3, #32
 8006528:	dc48      	bgt.n	80065bc <UART_SetConfig+0xa3c>
 800652a:	2b00      	cmp	r3, #0
 800652c:	db7b      	blt.n	8006626 <UART_SetConfig+0xaa6>
 800652e:	2b20      	cmp	r3, #32
 8006530:	d879      	bhi.n	8006626 <UART_SetConfig+0xaa6>
 8006532:	a201      	add	r2, pc, #4	; (adr r2, 8006538 <UART_SetConfig+0x9b8>)
 8006534:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006538:	080065c3 	.word	0x080065c3
 800653c:	080065cb 	.word	0x080065cb
 8006540:	08006627 	.word	0x08006627
 8006544:	08006627 	.word	0x08006627
 8006548:	080065d3 	.word	0x080065d3
 800654c:	08006627 	.word	0x08006627
 8006550:	08006627 	.word	0x08006627
 8006554:	08006627 	.word	0x08006627
 8006558:	080065e3 	.word	0x080065e3
 800655c:	08006627 	.word	0x08006627
 8006560:	08006627 	.word	0x08006627
 8006564:	08006627 	.word	0x08006627
 8006568:	08006627 	.word	0x08006627
 800656c:	08006627 	.word	0x08006627
 8006570:	08006627 	.word	0x08006627
 8006574:	08006627 	.word	0x08006627
 8006578:	080065f3 	.word	0x080065f3
 800657c:	08006627 	.word	0x08006627
 8006580:	08006627 	.word	0x08006627
 8006584:	08006627 	.word	0x08006627
 8006588:	08006627 	.word	0x08006627
 800658c:	08006627 	.word	0x08006627
 8006590:	08006627 	.word	0x08006627
 8006594:	08006627 	.word	0x08006627
 8006598:	08006627 	.word	0x08006627
 800659c:	08006627 	.word	0x08006627
 80065a0:	08006627 	.word	0x08006627
 80065a4:	08006627 	.word	0x08006627
 80065a8:	08006627 	.word	0x08006627
 80065ac:	08006627 	.word	0x08006627
 80065b0:	08006627 	.word	0x08006627
 80065b4:	08006627 	.word	0x08006627
 80065b8:	08006619 	.word	0x08006619
 80065bc:	2b40      	cmp	r3, #64	; 0x40
 80065be:	d02e      	beq.n	800661e <UART_SetConfig+0xa9e>
 80065c0:	e031      	b.n	8006626 <UART_SetConfig+0xaa6>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80065c2:	f7fd fb85 	bl	8003cd0 <HAL_RCC_GetPCLK1Freq>
 80065c6:	62f8      	str	r0, [r7, #44]	; 0x2c
        break;
 80065c8:	e033      	b.n	8006632 <UART_SetConfig+0xab2>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80065ca:	f7fd fb97 	bl	8003cfc <HAL_RCC_GetPCLK2Freq>
 80065ce:	62f8      	str	r0, [r7, #44]	; 0x2c
        break;
 80065d0:	e02f      	b.n	8006632 <UART_SetConfig+0xab2>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80065d2:	f107 0314 	add.w	r3, r7, #20
 80065d6:	4618      	mov	r0, r3
 80065d8:	f7fe fab6 	bl	8004b48 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 80065dc:	69bb      	ldr	r3, [r7, #24]
 80065de:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 80065e0:	e027      	b.n	8006632 <UART_SetConfig+0xab2>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 80065e2:	f107 0308 	add.w	r3, r7, #8
 80065e6:	4618      	mov	r0, r3
 80065e8:	f7fe fc02 	bl	8004df0 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 80065ec:	68fb      	ldr	r3, [r7, #12]
 80065ee:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 80065f0:	e01f      	b.n	8006632 <UART_SetConfig+0xab2>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80065f2:	4b6e      	ldr	r3, [pc, #440]	; (80067ac <UART_SetConfig+0xc2c>)
 80065f4:	681b      	ldr	r3, [r3, #0]
 80065f6:	f003 0320 	and.w	r3, r3, #32
 80065fa:	2b00      	cmp	r3, #0
 80065fc:	d009      	beq.n	8006612 <UART_SetConfig+0xa92>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 80065fe:	4b6b      	ldr	r3, [pc, #428]	; (80067ac <UART_SetConfig+0xc2c>)
 8006600:	681b      	ldr	r3, [r3, #0]
 8006602:	08db      	lsrs	r3, r3, #3
 8006604:	f003 0303 	and.w	r3, r3, #3
 8006608:	4a69      	ldr	r2, [pc, #420]	; (80067b0 <UART_SetConfig+0xc30>)
 800660a:	fa22 f303 	lsr.w	r3, r2, r3
 800660e:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8006610:	e00f      	b.n	8006632 <UART_SetConfig+0xab2>
          pclk = (uint32_t) HSI_VALUE;
 8006612:	4b67      	ldr	r3, [pc, #412]	; (80067b0 <UART_SetConfig+0xc30>)
 8006614:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8006616:	e00c      	b.n	8006632 <UART_SetConfig+0xab2>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 8006618:	4b66      	ldr	r3, [pc, #408]	; (80067b4 <UART_SetConfig+0xc34>)
 800661a:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800661c:	e009      	b.n	8006632 <UART_SetConfig+0xab2>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800661e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8006622:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8006624:	e005      	b.n	8006632 <UART_SetConfig+0xab2>
      default:
        pclk = 0U;
 8006626:	2300      	movs	r3, #0
 8006628:	62fb      	str	r3, [r7, #44]	; 0x2c
        ret = HAL_ERROR;
 800662a:	2301      	movs	r3, #1
 800662c:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
        break;
 8006630:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8006632:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006634:	2b00      	cmp	r3, #0
 8006636:	f000 80ea 	beq.w	800680e <UART_SetConfig+0xc8e>
    {
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800663a:	687b      	ldr	r3, [r7, #4]
 800663c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800663e:	4a5a      	ldr	r2, [pc, #360]	; (80067a8 <UART_SetConfig+0xc28>)
 8006640:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8006644:	461a      	mov	r2, r3
 8006646:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006648:	fbb3 f3f2 	udiv	r3, r3, r2
 800664c:	005a      	lsls	r2, r3, #1
 800664e:	687b      	ldr	r3, [r7, #4]
 8006650:	685b      	ldr	r3, [r3, #4]
 8006652:	085b      	lsrs	r3, r3, #1
 8006654:	441a      	add	r2, r3
 8006656:	687b      	ldr	r3, [r7, #4]
 8006658:	685b      	ldr	r3, [r3, #4]
 800665a:	fbb2 f3f3 	udiv	r3, r2, r3
 800665e:	b29b      	uxth	r3, r3
 8006660:	62bb      	str	r3, [r7, #40]	; 0x28
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8006662:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006664:	2b0f      	cmp	r3, #15
 8006666:	d916      	bls.n	8006696 <UART_SetConfig+0xb16>
 8006668:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800666a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800666e:	d212      	bcs.n	8006696 <UART_SetConfig+0xb16>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8006670:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006672:	b29b      	uxth	r3, r3
 8006674:	f023 030f 	bic.w	r3, r3, #15
 8006678:	84fb      	strh	r3, [r7, #38]	; 0x26
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800667a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800667c:	085b      	lsrs	r3, r3, #1
 800667e:	b29b      	uxth	r3, r3
 8006680:	f003 0307 	and.w	r3, r3, #7
 8006684:	b29a      	uxth	r2, r3
 8006686:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8006688:	4313      	orrs	r3, r2
 800668a:	84fb      	strh	r3, [r7, #38]	; 0x26
        huart->Instance->BRR = brrtemp;
 800668c:	687b      	ldr	r3, [r7, #4]
 800668e:	681b      	ldr	r3, [r3, #0]
 8006690:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 8006692:	60da      	str	r2, [r3, #12]
 8006694:	e0bb      	b.n	800680e <UART_SetConfig+0xc8e>
      }
      else
      {
        ret = HAL_ERROR;
 8006696:	2301      	movs	r3, #1
 8006698:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
 800669c:	e0b7      	b.n	800680e <UART_SetConfig+0xc8e>
      }
    }
  }
  else
  {
    switch (clocksource)
 800669e:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 80066a2:	2b20      	cmp	r3, #32
 80066a4:	dc4a      	bgt.n	800673c <UART_SetConfig+0xbbc>
 80066a6:	2b00      	cmp	r3, #0
 80066a8:	f2c0 8086 	blt.w	80067b8 <UART_SetConfig+0xc38>
 80066ac:	2b20      	cmp	r3, #32
 80066ae:	f200 8083 	bhi.w	80067b8 <UART_SetConfig+0xc38>
 80066b2:	a201      	add	r2, pc, #4	; (adr r2, 80066b8 <UART_SetConfig+0xb38>)
 80066b4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80066b8:	08006743 	.word	0x08006743
 80066bc:	0800674b 	.word	0x0800674b
 80066c0:	080067b9 	.word	0x080067b9
 80066c4:	080067b9 	.word	0x080067b9
 80066c8:	08006753 	.word	0x08006753
 80066cc:	080067b9 	.word	0x080067b9
 80066d0:	080067b9 	.word	0x080067b9
 80066d4:	080067b9 	.word	0x080067b9
 80066d8:	08006763 	.word	0x08006763
 80066dc:	080067b9 	.word	0x080067b9
 80066e0:	080067b9 	.word	0x080067b9
 80066e4:	080067b9 	.word	0x080067b9
 80066e8:	080067b9 	.word	0x080067b9
 80066ec:	080067b9 	.word	0x080067b9
 80066f0:	080067b9 	.word	0x080067b9
 80066f4:	080067b9 	.word	0x080067b9
 80066f8:	08006773 	.word	0x08006773
 80066fc:	080067b9 	.word	0x080067b9
 8006700:	080067b9 	.word	0x080067b9
 8006704:	080067b9 	.word	0x080067b9
 8006708:	080067b9 	.word	0x080067b9
 800670c:	080067b9 	.word	0x080067b9
 8006710:	080067b9 	.word	0x080067b9
 8006714:	080067b9 	.word	0x080067b9
 8006718:	080067b9 	.word	0x080067b9
 800671c:	080067b9 	.word	0x080067b9
 8006720:	080067b9 	.word	0x080067b9
 8006724:	080067b9 	.word	0x080067b9
 8006728:	080067b9 	.word	0x080067b9
 800672c:	080067b9 	.word	0x080067b9
 8006730:	080067b9 	.word	0x080067b9
 8006734:	080067b9 	.word	0x080067b9
 8006738:	08006799 	.word	0x08006799
 800673c:	2b40      	cmp	r3, #64	; 0x40
 800673e:	d02e      	beq.n	800679e <UART_SetConfig+0xc1e>
 8006740:	e03a      	b.n	80067b8 <UART_SetConfig+0xc38>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8006742:	f7fd fac5 	bl	8003cd0 <HAL_RCC_GetPCLK1Freq>
 8006746:	62f8      	str	r0, [r7, #44]	; 0x2c
        break;
 8006748:	e03c      	b.n	80067c4 <UART_SetConfig+0xc44>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800674a:	f7fd fad7 	bl	8003cfc <HAL_RCC_GetPCLK2Freq>
 800674e:	62f8      	str	r0, [r7, #44]	; 0x2c
        break;
 8006750:	e038      	b.n	80067c4 <UART_SetConfig+0xc44>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8006752:	f107 0314 	add.w	r3, r7, #20
 8006756:	4618      	mov	r0, r3
 8006758:	f7fe f9f6 	bl	8004b48 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 800675c:	69bb      	ldr	r3, [r7, #24]
 800675e:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8006760:	e030      	b.n	80067c4 <UART_SetConfig+0xc44>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8006762:	f107 0308 	add.w	r3, r7, #8
 8006766:	4618      	mov	r0, r3
 8006768:	f7fe fb42 	bl	8004df0 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 800676c:	68fb      	ldr	r3, [r7, #12]
 800676e:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8006770:	e028      	b.n	80067c4 <UART_SetConfig+0xc44>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8006772:	4b0e      	ldr	r3, [pc, #56]	; (80067ac <UART_SetConfig+0xc2c>)
 8006774:	681b      	ldr	r3, [r3, #0]
 8006776:	f003 0320 	and.w	r3, r3, #32
 800677a:	2b00      	cmp	r3, #0
 800677c:	d009      	beq.n	8006792 <UART_SetConfig+0xc12>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 800677e:	4b0b      	ldr	r3, [pc, #44]	; (80067ac <UART_SetConfig+0xc2c>)
 8006780:	681b      	ldr	r3, [r3, #0]
 8006782:	08db      	lsrs	r3, r3, #3
 8006784:	f003 0303 	and.w	r3, r3, #3
 8006788:	4a09      	ldr	r2, [pc, #36]	; (80067b0 <UART_SetConfig+0xc30>)
 800678a:	fa22 f303 	lsr.w	r3, r2, r3
 800678e:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8006790:	e018      	b.n	80067c4 <UART_SetConfig+0xc44>
          pclk = (uint32_t) HSI_VALUE;
 8006792:	4b07      	ldr	r3, [pc, #28]	; (80067b0 <UART_SetConfig+0xc30>)
 8006794:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8006796:	e015      	b.n	80067c4 <UART_SetConfig+0xc44>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 8006798:	4b06      	ldr	r3, [pc, #24]	; (80067b4 <UART_SetConfig+0xc34>)
 800679a:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800679c:	e012      	b.n	80067c4 <UART_SetConfig+0xc44>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800679e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80067a2:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 80067a4:	e00e      	b.n	80067c4 <UART_SetConfig+0xc44>
 80067a6:	bf00      	nop
 80067a8:	08008f2c 	.word	0x08008f2c
 80067ac:	58024400 	.word	0x58024400
 80067b0:	03d09000 	.word	0x03d09000
 80067b4:	003d0900 	.word	0x003d0900
      default:
        pclk = 0U;
 80067b8:	2300      	movs	r3, #0
 80067ba:	62fb      	str	r3, [r7, #44]	; 0x2c
        ret = HAL_ERROR;
 80067bc:	2301      	movs	r3, #1
 80067be:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
        break;
 80067c2:	bf00      	nop
    }

    if (pclk != 0U)
 80067c4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80067c6:	2b00      	cmp	r3, #0
 80067c8:	d021      	beq.n	800680e <UART_SetConfig+0xc8e>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80067ca:	687b      	ldr	r3, [r7, #4]
 80067cc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80067ce:	4a1a      	ldr	r2, [pc, #104]	; (8006838 <UART_SetConfig+0xcb8>)
 80067d0:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80067d4:	461a      	mov	r2, r3
 80067d6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80067d8:	fbb3 f2f2 	udiv	r2, r3, r2
 80067dc:	687b      	ldr	r3, [r7, #4]
 80067de:	685b      	ldr	r3, [r3, #4]
 80067e0:	085b      	lsrs	r3, r3, #1
 80067e2:	441a      	add	r2, r3
 80067e4:	687b      	ldr	r3, [r7, #4]
 80067e6:	685b      	ldr	r3, [r3, #4]
 80067e8:	fbb2 f3f3 	udiv	r3, r2, r3
 80067ec:	b29b      	uxth	r3, r3
 80067ee:	62bb      	str	r3, [r7, #40]	; 0x28
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80067f0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80067f2:	2b0f      	cmp	r3, #15
 80067f4:	d908      	bls.n	8006808 <UART_SetConfig+0xc88>
 80067f6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80067f8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80067fc:	d204      	bcs.n	8006808 <UART_SetConfig+0xc88>
      {
        huart->Instance->BRR = usartdiv;
 80067fe:	687b      	ldr	r3, [r7, #4]
 8006800:	681b      	ldr	r3, [r3, #0]
 8006802:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8006804:	60da      	str	r2, [r3, #12]
 8006806:	e002      	b.n	800680e <UART_SetConfig+0xc8e>
      }
      else
      {
        ret = HAL_ERROR;
 8006808:	2301      	movs	r3, #1
 800680a:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 800680e:	687b      	ldr	r3, [r7, #4]
 8006810:	2201      	movs	r2, #1
 8006812:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 8006816:	687b      	ldr	r3, [r7, #4]
 8006818:	2201      	movs	r2, #1
 800681a:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800681e:	687b      	ldr	r3, [r7, #4]
 8006820:	2200      	movs	r2, #0
 8006822:	671a      	str	r2, [r3, #112]	; 0x70
  huart->TxISR = NULL;
 8006824:	687b      	ldr	r3, [r7, #4]
 8006826:	2200      	movs	r2, #0
 8006828:	675a      	str	r2, [r3, #116]	; 0x74

  return ret;
 800682a:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
}
 800682e:	4618      	mov	r0, r3
 8006830:	3738      	adds	r7, #56	; 0x38
 8006832:	46bd      	mov	sp, r7
 8006834:	bdb0      	pop	{r4, r5, r7, pc}
 8006836:	bf00      	nop
 8006838:	08008f2c 	.word	0x08008f2c

0800683c <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 800683c:	b480      	push	{r7}
 800683e:	b083      	sub	sp, #12
 8006840:	af00      	add	r7, sp, #0
 8006842:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8006844:	687b      	ldr	r3, [r7, #4]
 8006846:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006848:	f003 0301 	and.w	r3, r3, #1
 800684c:	2b00      	cmp	r3, #0
 800684e:	d00a      	beq.n	8006866 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8006850:	687b      	ldr	r3, [r7, #4]
 8006852:	681b      	ldr	r3, [r3, #0]
 8006854:	685b      	ldr	r3, [r3, #4]
 8006856:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 800685a:	687b      	ldr	r3, [r7, #4]
 800685c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800685e:	687b      	ldr	r3, [r7, #4]
 8006860:	681b      	ldr	r3, [r3, #0]
 8006862:	430a      	orrs	r2, r1
 8006864:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8006866:	687b      	ldr	r3, [r7, #4]
 8006868:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800686a:	f003 0302 	and.w	r3, r3, #2
 800686e:	2b00      	cmp	r3, #0
 8006870:	d00a      	beq.n	8006888 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8006872:	687b      	ldr	r3, [r7, #4]
 8006874:	681b      	ldr	r3, [r3, #0]
 8006876:	685b      	ldr	r3, [r3, #4]
 8006878:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 800687c:	687b      	ldr	r3, [r7, #4]
 800687e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8006880:	687b      	ldr	r3, [r7, #4]
 8006882:	681b      	ldr	r3, [r3, #0]
 8006884:	430a      	orrs	r2, r1
 8006886:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8006888:	687b      	ldr	r3, [r7, #4]
 800688a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800688c:	f003 0304 	and.w	r3, r3, #4
 8006890:	2b00      	cmp	r3, #0
 8006892:	d00a      	beq.n	80068aa <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8006894:	687b      	ldr	r3, [r7, #4]
 8006896:	681b      	ldr	r3, [r3, #0]
 8006898:	685b      	ldr	r3, [r3, #4]
 800689a:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 800689e:	687b      	ldr	r3, [r7, #4]
 80068a0:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80068a2:	687b      	ldr	r3, [r7, #4]
 80068a4:	681b      	ldr	r3, [r3, #0]
 80068a6:	430a      	orrs	r2, r1
 80068a8:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 80068aa:	687b      	ldr	r3, [r7, #4]
 80068ac:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80068ae:	f003 0308 	and.w	r3, r3, #8
 80068b2:	2b00      	cmp	r3, #0
 80068b4:	d00a      	beq.n	80068cc <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 80068b6:	687b      	ldr	r3, [r7, #4]
 80068b8:	681b      	ldr	r3, [r3, #0]
 80068ba:	685b      	ldr	r3, [r3, #4]
 80068bc:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 80068c0:	687b      	ldr	r3, [r7, #4]
 80068c2:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80068c4:	687b      	ldr	r3, [r7, #4]
 80068c6:	681b      	ldr	r3, [r3, #0]
 80068c8:	430a      	orrs	r2, r1
 80068ca:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 80068cc:	687b      	ldr	r3, [r7, #4]
 80068ce:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80068d0:	f003 0310 	and.w	r3, r3, #16
 80068d4:	2b00      	cmp	r3, #0
 80068d6:	d00a      	beq.n	80068ee <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 80068d8:	687b      	ldr	r3, [r7, #4]
 80068da:	681b      	ldr	r3, [r3, #0]
 80068dc:	689b      	ldr	r3, [r3, #8]
 80068de:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 80068e2:	687b      	ldr	r3, [r7, #4]
 80068e4:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80068e6:	687b      	ldr	r3, [r7, #4]
 80068e8:	681b      	ldr	r3, [r3, #0]
 80068ea:	430a      	orrs	r2, r1
 80068ec:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 80068ee:	687b      	ldr	r3, [r7, #4]
 80068f0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80068f2:	f003 0320 	and.w	r3, r3, #32
 80068f6:	2b00      	cmp	r3, #0
 80068f8:	d00a      	beq.n	8006910 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 80068fa:	687b      	ldr	r3, [r7, #4]
 80068fc:	681b      	ldr	r3, [r3, #0]
 80068fe:	689b      	ldr	r3, [r3, #8]
 8006900:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8006904:	687b      	ldr	r3, [r7, #4]
 8006906:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8006908:	687b      	ldr	r3, [r7, #4]
 800690a:	681b      	ldr	r3, [r3, #0]
 800690c:	430a      	orrs	r2, r1
 800690e:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8006910:	687b      	ldr	r3, [r7, #4]
 8006912:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006914:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006918:	2b00      	cmp	r3, #0
 800691a:	d01a      	beq.n	8006952 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800691c:	687b      	ldr	r3, [r7, #4]
 800691e:	681b      	ldr	r3, [r3, #0]
 8006920:	685b      	ldr	r3, [r3, #4]
 8006922:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8006926:	687b      	ldr	r3, [r7, #4]
 8006928:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800692a:	687b      	ldr	r3, [r7, #4]
 800692c:	681b      	ldr	r3, [r3, #0]
 800692e:	430a      	orrs	r2, r1
 8006930:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8006932:	687b      	ldr	r3, [r7, #4]
 8006934:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006936:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800693a:	d10a      	bne.n	8006952 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800693c:	687b      	ldr	r3, [r7, #4]
 800693e:	681b      	ldr	r3, [r3, #0]
 8006940:	685b      	ldr	r3, [r3, #4]
 8006942:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8006946:	687b      	ldr	r3, [r7, #4]
 8006948:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800694a:	687b      	ldr	r3, [r7, #4]
 800694c:	681b      	ldr	r3, [r3, #0]
 800694e:	430a      	orrs	r2, r1
 8006950:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8006952:	687b      	ldr	r3, [r7, #4]
 8006954:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006956:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800695a:	2b00      	cmp	r3, #0
 800695c:	d00a      	beq.n	8006974 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800695e:	687b      	ldr	r3, [r7, #4]
 8006960:	681b      	ldr	r3, [r3, #0]
 8006962:	685b      	ldr	r3, [r3, #4]
 8006964:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8006968:	687b      	ldr	r3, [r7, #4]
 800696a:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800696c:	687b      	ldr	r3, [r7, #4]
 800696e:	681b      	ldr	r3, [r3, #0]
 8006970:	430a      	orrs	r2, r1
 8006972:	605a      	str	r2, [r3, #4]
  }
}
 8006974:	bf00      	nop
 8006976:	370c      	adds	r7, #12
 8006978:	46bd      	mov	sp, r7
 800697a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800697e:	4770      	bx	lr

08006980 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8006980:	b580      	push	{r7, lr}
 8006982:	b086      	sub	sp, #24
 8006984:	af02      	add	r7, sp, #8
 8006986:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006988:	687b      	ldr	r3, [r7, #4]
 800698a:	2200      	movs	r2, #0
 800698c:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8006990:	f7fa fe0c 	bl	80015ac <HAL_GetTick>
 8006994:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8006996:	687b      	ldr	r3, [r7, #4]
 8006998:	681b      	ldr	r3, [r3, #0]
 800699a:	681b      	ldr	r3, [r3, #0]
 800699c:	f003 0308 	and.w	r3, r3, #8
 80069a0:	2b08      	cmp	r3, #8
 80069a2:	d10e      	bne.n	80069c2 <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80069a4:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 80069a8:	9300      	str	r3, [sp, #0]
 80069aa:	68fb      	ldr	r3, [r7, #12]
 80069ac:	2200      	movs	r2, #0
 80069ae:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 80069b2:	6878      	ldr	r0, [r7, #4]
 80069b4:	f000 f82f 	bl	8006a16 <UART_WaitOnFlagUntilTimeout>
 80069b8:	4603      	mov	r3, r0
 80069ba:	2b00      	cmp	r3, #0
 80069bc:	d001      	beq.n	80069c2 <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 80069be:	2303      	movs	r3, #3
 80069c0:	e025      	b.n	8006a0e <UART_CheckIdleState+0x8e>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 80069c2:	687b      	ldr	r3, [r7, #4]
 80069c4:	681b      	ldr	r3, [r3, #0]
 80069c6:	681b      	ldr	r3, [r3, #0]
 80069c8:	f003 0304 	and.w	r3, r3, #4
 80069cc:	2b04      	cmp	r3, #4
 80069ce:	d10e      	bne.n	80069ee <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80069d0:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 80069d4:	9300      	str	r3, [sp, #0]
 80069d6:	68fb      	ldr	r3, [r7, #12]
 80069d8:	2200      	movs	r2, #0
 80069da:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 80069de:	6878      	ldr	r0, [r7, #4]
 80069e0:	f000 f819 	bl	8006a16 <UART_WaitOnFlagUntilTimeout>
 80069e4:	4603      	mov	r3, r0
 80069e6:	2b00      	cmp	r3, #0
 80069e8:	d001      	beq.n	80069ee <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 80069ea:	2303      	movs	r3, #3
 80069ec:	e00f      	b.n	8006a0e <UART_CheckIdleState+0x8e>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 80069ee:	687b      	ldr	r3, [r7, #4]
 80069f0:	2220      	movs	r2, #32
 80069f2:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  huart->RxState = HAL_UART_STATE_READY;
 80069f6:	687b      	ldr	r3, [r7, #4]
 80069f8:	2220      	movs	r2, #32
 80069fa:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80069fe:	687b      	ldr	r3, [r7, #4]
 8006a00:	2200      	movs	r2, #0
 8006a02:	66da      	str	r2, [r3, #108]	; 0x6c

  __HAL_UNLOCK(huart);
 8006a04:	687b      	ldr	r3, [r7, #4]
 8006a06:	2200      	movs	r2, #0
 8006a08:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 8006a0c:	2300      	movs	r3, #0
}
 8006a0e:	4618      	mov	r0, r3
 8006a10:	3710      	adds	r7, #16
 8006a12:	46bd      	mov	sp, r7
 8006a14:	bd80      	pop	{r7, pc}

08006a16 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8006a16:	b580      	push	{r7, lr}
 8006a18:	b084      	sub	sp, #16
 8006a1a:	af00      	add	r7, sp, #0
 8006a1c:	60f8      	str	r0, [r7, #12]
 8006a1e:	60b9      	str	r1, [r7, #8]
 8006a20:	603b      	str	r3, [r7, #0]
 8006a22:	4613      	mov	r3, r2
 8006a24:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8006a26:	e062      	b.n	8006aee <UART_WaitOnFlagUntilTimeout+0xd8>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8006a28:	69bb      	ldr	r3, [r7, #24]
 8006a2a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006a2e:	d05e      	beq.n	8006aee <UART_WaitOnFlagUntilTimeout+0xd8>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8006a30:	f7fa fdbc 	bl	80015ac <HAL_GetTick>
 8006a34:	4602      	mov	r2, r0
 8006a36:	683b      	ldr	r3, [r7, #0]
 8006a38:	1ad3      	subs	r3, r2, r3
 8006a3a:	69ba      	ldr	r2, [r7, #24]
 8006a3c:	429a      	cmp	r2, r3
 8006a3e:	d302      	bcc.n	8006a46 <UART_WaitOnFlagUntilTimeout+0x30>
 8006a40:	69bb      	ldr	r3, [r7, #24]
 8006a42:	2b00      	cmp	r3, #0
 8006a44:	d11d      	bne.n	8006a82 <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
 8006a46:	68fb      	ldr	r3, [r7, #12]
 8006a48:	681b      	ldr	r3, [r3, #0]
 8006a4a:	681a      	ldr	r2, [r3, #0]
 8006a4c:	68fb      	ldr	r3, [r7, #12]
 8006a4e:	681b      	ldr	r3, [r3, #0]
 8006a50:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8006a54:	601a      	str	r2, [r3, #0]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006a56:	68fb      	ldr	r3, [r7, #12]
 8006a58:	681b      	ldr	r3, [r3, #0]
 8006a5a:	689a      	ldr	r2, [r3, #8]
 8006a5c:	68fb      	ldr	r3, [r7, #12]
 8006a5e:	681b      	ldr	r3, [r3, #0]
 8006a60:	f022 0201 	bic.w	r2, r2, #1
 8006a64:	609a      	str	r2, [r3, #8]

        huart->gState = HAL_UART_STATE_READY;
 8006a66:	68fb      	ldr	r3, [r7, #12]
 8006a68:	2220      	movs	r2, #32
 8006a6a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
        huart->RxState = HAL_UART_STATE_READY;
 8006a6e:	68fb      	ldr	r3, [r7, #12]
 8006a70:	2220      	movs	r2, #32
 8006a72:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

        __HAL_UNLOCK(huart);
 8006a76:	68fb      	ldr	r3, [r7, #12]
 8006a78:	2200      	movs	r2, #0
 8006a7a:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

        return HAL_TIMEOUT;
 8006a7e:	2303      	movs	r3, #3
 8006a80:	e045      	b.n	8006b0e <UART_WaitOnFlagUntilTimeout+0xf8>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8006a82:	68fb      	ldr	r3, [r7, #12]
 8006a84:	681b      	ldr	r3, [r3, #0]
 8006a86:	681b      	ldr	r3, [r3, #0]
 8006a88:	f003 0304 	and.w	r3, r3, #4
 8006a8c:	2b00      	cmp	r3, #0
 8006a8e:	d02e      	beq.n	8006aee <UART_WaitOnFlagUntilTimeout+0xd8>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8006a90:	68fb      	ldr	r3, [r7, #12]
 8006a92:	681b      	ldr	r3, [r3, #0]
 8006a94:	69db      	ldr	r3, [r3, #28]
 8006a96:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8006a9a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8006a9e:	d126      	bne.n	8006aee <UART_WaitOnFlagUntilTimeout+0xd8>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8006aa0:	68fb      	ldr	r3, [r7, #12]
 8006aa2:	681b      	ldr	r3, [r3, #0]
 8006aa4:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8006aa8:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
 8006aaa:	68fb      	ldr	r3, [r7, #12]
 8006aac:	681b      	ldr	r3, [r3, #0]
 8006aae:	681a      	ldr	r2, [r3, #0]
 8006ab0:	68fb      	ldr	r3, [r7, #12]
 8006ab2:	681b      	ldr	r3, [r3, #0]
 8006ab4:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8006ab8:	601a      	str	r2, [r3, #0]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006aba:	68fb      	ldr	r3, [r7, #12]
 8006abc:	681b      	ldr	r3, [r3, #0]
 8006abe:	689a      	ldr	r2, [r3, #8]
 8006ac0:	68fb      	ldr	r3, [r7, #12]
 8006ac2:	681b      	ldr	r3, [r3, #0]
 8006ac4:	f022 0201 	bic.w	r2, r2, #1
 8006ac8:	609a      	str	r2, [r3, #8]

          huart->gState = HAL_UART_STATE_READY;
 8006aca:	68fb      	ldr	r3, [r7, #12]
 8006acc:	2220      	movs	r2, #32
 8006ace:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          huart->RxState = HAL_UART_STATE_READY;
 8006ad2:	68fb      	ldr	r3, [r7, #12]
 8006ad4:	2220      	movs	r2, #32
 8006ad6:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8006ada:	68fb      	ldr	r3, [r7, #12]
 8006adc:	2220      	movs	r2, #32
 8006ade:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8006ae2:	68fb      	ldr	r3, [r7, #12]
 8006ae4:	2200      	movs	r2, #0
 8006ae6:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

          return HAL_TIMEOUT;
 8006aea:	2303      	movs	r3, #3
 8006aec:	e00f      	b.n	8006b0e <UART_WaitOnFlagUntilTimeout+0xf8>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8006aee:	68fb      	ldr	r3, [r7, #12]
 8006af0:	681b      	ldr	r3, [r3, #0]
 8006af2:	69da      	ldr	r2, [r3, #28]
 8006af4:	68bb      	ldr	r3, [r7, #8]
 8006af6:	4013      	ands	r3, r2
 8006af8:	68ba      	ldr	r2, [r7, #8]
 8006afa:	429a      	cmp	r2, r3
 8006afc:	bf0c      	ite	eq
 8006afe:	2301      	moveq	r3, #1
 8006b00:	2300      	movne	r3, #0
 8006b02:	b2db      	uxtb	r3, r3
 8006b04:	461a      	mov	r2, r3
 8006b06:	79fb      	ldrb	r3, [r7, #7]
 8006b08:	429a      	cmp	r2, r3
 8006b0a:	d08d      	beq.n	8006a28 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8006b0c:	2300      	movs	r3, #0
}
 8006b0e:	4618      	mov	r0, r3
 8006b10:	3710      	adds	r7, #16
 8006b12:	46bd      	mov	sp, r7
 8006b14:	bd80      	pop	{r7, pc}
	...

08006b18 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8006b18:	b480      	push	{r7}
 8006b1a:	b083      	sub	sp, #12
 8006b1c:	af00      	add	r7, sp, #0
 8006b1e:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8006b20:	687b      	ldr	r3, [r7, #4]
 8006b22:	681b      	ldr	r3, [r3, #0]
 8006b24:	681a      	ldr	r2, [r3, #0]
 8006b26:	687b      	ldr	r3, [r7, #4]
 8006b28:	681b      	ldr	r3, [r3, #0]
 8006b2a:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 8006b2e:	601a      	str	r2, [r3, #0]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8006b30:	687b      	ldr	r3, [r7, #4]
 8006b32:	681b      	ldr	r3, [r3, #0]
 8006b34:	6899      	ldr	r1, [r3, #8]
 8006b36:	687b      	ldr	r3, [r7, #4]
 8006b38:	681a      	ldr	r2, [r3, #0]
 8006b3a:	4b0f      	ldr	r3, [pc, #60]	; (8006b78 <UART_EndRxTransfer+0x60>)
 8006b3c:	400b      	ands	r3, r1
 8006b3e:	6093      	str	r3, [r2, #8]

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006b40:	687b      	ldr	r3, [r7, #4]
 8006b42:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8006b44:	2b01      	cmp	r3, #1
 8006b46:	d107      	bne.n	8006b58 <UART_EndRxTransfer+0x40>
  {
    CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006b48:	687b      	ldr	r3, [r7, #4]
 8006b4a:	681b      	ldr	r3, [r3, #0]
 8006b4c:	681a      	ldr	r2, [r3, #0]
 8006b4e:	687b      	ldr	r3, [r7, #4]
 8006b50:	681b      	ldr	r3, [r3, #0]
 8006b52:	f022 0210 	bic.w	r2, r2, #16
 8006b56:	601a      	str	r2, [r3, #0]
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8006b58:	687b      	ldr	r3, [r7, #4]
 8006b5a:	2220      	movs	r2, #32
 8006b5c:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006b60:	687b      	ldr	r3, [r7, #4]
 8006b62:	2200      	movs	r2, #0
 8006b64:	66da      	str	r2, [r3, #108]	; 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8006b66:	687b      	ldr	r3, [r7, #4]
 8006b68:	2200      	movs	r2, #0
 8006b6a:	671a      	str	r2, [r3, #112]	; 0x70
}
 8006b6c:	bf00      	nop
 8006b6e:	370c      	adds	r7, #12
 8006b70:	46bd      	mov	sp, r7
 8006b72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b76:	4770      	bx	lr
 8006b78:	effffffe 	.word	0xeffffffe

08006b7c <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8006b7c:	b580      	push	{r7, lr}
 8006b7e:	b084      	sub	sp, #16
 8006b80:	af00      	add	r7, sp, #0
 8006b82:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8006b84:	687b      	ldr	r3, [r7, #4]
 8006b86:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006b88:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 8006b8a:	68fb      	ldr	r3, [r7, #12]
 8006b8c:	2200      	movs	r2, #0
 8006b8e:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
  huart->TxXferCount = 0U;
 8006b92:	68fb      	ldr	r3, [r7, #12]
 8006b94:	2200      	movs	r2, #0
 8006b96:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8006b9a:	68f8      	ldr	r0, [r7, #12]
 8006b9c:	f7fe ffda 	bl	8005b54 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8006ba0:	bf00      	nop
 8006ba2:	3710      	adds	r7, #16
 8006ba4:	46bd      	mov	sp, r7
 8006ba6:	bd80      	pop	{r7, pc}

08006ba8 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8006ba8:	b580      	push	{r7, lr}
 8006baa:	b082      	sub	sp, #8
 8006bac:	af00      	add	r7, sp, #0
 8006bae:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8006bb0:	687b      	ldr	r3, [r7, #4]
 8006bb2:	681b      	ldr	r3, [r3, #0]
 8006bb4:	681a      	ldr	r2, [r3, #0]
 8006bb6:	687b      	ldr	r3, [r7, #4]
 8006bb8:	681b      	ldr	r3, [r3, #0]
 8006bba:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8006bbe:	601a      	str	r2, [r3, #0]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8006bc0:	687b      	ldr	r3, [r7, #4]
 8006bc2:	2220      	movs	r2, #32
 8006bc4:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 8006bc8:	687b      	ldr	r3, [r7, #4]
 8006bca:	2200      	movs	r2, #0
 8006bcc:	675a      	str	r2, [r3, #116]	; 0x74
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8006bce:	6878      	ldr	r0, [r7, #4]
 8006bd0:	f7fe ffb6 	bl	8005b40 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8006bd4:	bf00      	nop
 8006bd6:	3708      	adds	r7, #8
 8006bd8:	46bd      	mov	sp, r7
 8006bda:	bd80      	pop	{r7, pc}

08006bdc <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 8006bdc:	b480      	push	{r7}
 8006bde:	b083      	sub	sp, #12
 8006be0:	af00      	add	r7, sp, #0
 8006be2:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 8006be4:	bf00      	nop
 8006be6:	370c      	adds	r7, #12
 8006be8:	46bd      	mov	sp, r7
 8006bea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006bee:	4770      	bx	lr

08006bf0 <HAL_UARTEx_RxFifoFullCallback>:
  * @brief  UART RX Fifo full callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_RxFifoFullCallback(UART_HandleTypeDef *huart)
{
 8006bf0:	b480      	push	{r7}
 8006bf2:	b083      	sub	sp, #12
 8006bf4:	af00      	add	r7, sp, #0
 8006bf6:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxFifoFullCallback can be implemented in the user file.
   */
}
 8006bf8:	bf00      	nop
 8006bfa:	370c      	adds	r7, #12
 8006bfc:	46bd      	mov	sp, r7
 8006bfe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c02:	4770      	bx	lr

08006c04 <HAL_UARTEx_TxFifoEmptyCallback>:
  * @brief  UART TX Fifo empty callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_TxFifoEmptyCallback(UART_HandleTypeDef *huart)
{
 8006c04:	b480      	push	{r7}
 8006c06:	b083      	sub	sp, #12
 8006c08:	af00      	add	r7, sp, #0
 8006c0a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_TxFifoEmptyCallback can be implemented in the user file.
   */
}
 8006c0c:	bf00      	nop
 8006c0e:	370c      	adds	r7, #12
 8006c10:	46bd      	mov	sp, r7
 8006c12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c16:	4770      	bx	lr

08006c18 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 8006c18:	b480      	push	{r7}
 8006c1a:	b085      	sub	sp, #20
 8006c1c:	af00      	add	r7, sp, #0
 8006c1e:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 8006c20:	687b      	ldr	r3, [r7, #4]
 8006c22:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8006c26:	2b01      	cmp	r3, #1
 8006c28:	d101      	bne.n	8006c2e <HAL_UARTEx_DisableFifoMode+0x16>
 8006c2a:	2302      	movs	r3, #2
 8006c2c:	e027      	b.n	8006c7e <HAL_UARTEx_DisableFifoMode+0x66>
 8006c2e:	687b      	ldr	r3, [r7, #4]
 8006c30:	2201      	movs	r2, #1
 8006c32:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 8006c36:	687b      	ldr	r3, [r7, #4]
 8006c38:	2224      	movs	r2, #36	; 0x24
 8006c3a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8006c3e:	687b      	ldr	r3, [r7, #4]
 8006c40:	681b      	ldr	r3, [r3, #0]
 8006c42:	681b      	ldr	r3, [r3, #0]
 8006c44:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8006c46:	687b      	ldr	r3, [r7, #4]
 8006c48:	681b      	ldr	r3, [r3, #0]
 8006c4a:	681a      	ldr	r2, [r3, #0]
 8006c4c:	687b      	ldr	r3, [r7, #4]
 8006c4e:	681b      	ldr	r3, [r3, #0]
 8006c50:	f022 0201 	bic.w	r2, r2, #1
 8006c54:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 8006c56:	68fb      	ldr	r3, [r7, #12]
 8006c58:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 8006c5c:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 8006c5e:	687b      	ldr	r3, [r7, #4]
 8006c60:	2200      	movs	r2, #0
 8006c62:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8006c64:	687b      	ldr	r3, [r7, #4]
 8006c66:	681b      	ldr	r3, [r3, #0]
 8006c68:	68fa      	ldr	r2, [r7, #12]
 8006c6a:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8006c6c:	687b      	ldr	r3, [r7, #4]
 8006c6e:	2220      	movs	r2, #32
 8006c70:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8006c74:	687b      	ldr	r3, [r7, #4]
 8006c76:	2200      	movs	r2, #0
 8006c78:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 8006c7c:	2300      	movs	r3, #0
}
 8006c7e:	4618      	mov	r0, r3
 8006c80:	3714      	adds	r7, #20
 8006c82:	46bd      	mov	sp, r7
 8006c84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c88:	4770      	bx	lr

08006c8a <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8006c8a:	b580      	push	{r7, lr}
 8006c8c:	b084      	sub	sp, #16
 8006c8e:	af00      	add	r7, sp, #0
 8006c90:	6078      	str	r0, [r7, #4]
 8006c92:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8006c94:	687b      	ldr	r3, [r7, #4]
 8006c96:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8006c9a:	2b01      	cmp	r3, #1
 8006c9c:	d101      	bne.n	8006ca2 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 8006c9e:	2302      	movs	r3, #2
 8006ca0:	e02d      	b.n	8006cfe <HAL_UARTEx_SetTxFifoThreshold+0x74>
 8006ca2:	687b      	ldr	r3, [r7, #4]
 8006ca4:	2201      	movs	r2, #1
 8006ca6:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 8006caa:	687b      	ldr	r3, [r7, #4]
 8006cac:	2224      	movs	r2, #36	; 0x24
 8006cae:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8006cb2:	687b      	ldr	r3, [r7, #4]
 8006cb4:	681b      	ldr	r3, [r3, #0]
 8006cb6:	681b      	ldr	r3, [r3, #0]
 8006cb8:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8006cba:	687b      	ldr	r3, [r7, #4]
 8006cbc:	681b      	ldr	r3, [r3, #0]
 8006cbe:	681a      	ldr	r2, [r3, #0]
 8006cc0:	687b      	ldr	r3, [r7, #4]
 8006cc2:	681b      	ldr	r3, [r3, #0]
 8006cc4:	f022 0201 	bic.w	r2, r2, #1
 8006cc8:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 8006cca:	687b      	ldr	r3, [r7, #4]
 8006ccc:	681b      	ldr	r3, [r3, #0]
 8006cce:	689b      	ldr	r3, [r3, #8]
 8006cd0:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 8006cd4:	687b      	ldr	r3, [r7, #4]
 8006cd6:	681b      	ldr	r3, [r3, #0]
 8006cd8:	683a      	ldr	r2, [r7, #0]
 8006cda:	430a      	orrs	r2, r1
 8006cdc:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8006cde:	6878      	ldr	r0, [r7, #4]
 8006ce0:	f000 f850 	bl	8006d84 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8006ce4:	687b      	ldr	r3, [r7, #4]
 8006ce6:	681b      	ldr	r3, [r3, #0]
 8006ce8:	68fa      	ldr	r2, [r7, #12]
 8006cea:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8006cec:	687b      	ldr	r3, [r7, #4]
 8006cee:	2220      	movs	r2, #32
 8006cf0:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8006cf4:	687b      	ldr	r3, [r7, #4]
 8006cf6:	2200      	movs	r2, #0
 8006cf8:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 8006cfc:	2300      	movs	r3, #0
}
 8006cfe:	4618      	mov	r0, r3
 8006d00:	3710      	adds	r7, #16
 8006d02:	46bd      	mov	sp, r7
 8006d04:	bd80      	pop	{r7, pc}

08006d06 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8006d06:	b580      	push	{r7, lr}
 8006d08:	b084      	sub	sp, #16
 8006d0a:	af00      	add	r7, sp, #0
 8006d0c:	6078      	str	r0, [r7, #4]
 8006d0e:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8006d10:	687b      	ldr	r3, [r7, #4]
 8006d12:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8006d16:	2b01      	cmp	r3, #1
 8006d18:	d101      	bne.n	8006d1e <HAL_UARTEx_SetRxFifoThreshold+0x18>
 8006d1a:	2302      	movs	r3, #2
 8006d1c:	e02d      	b.n	8006d7a <HAL_UARTEx_SetRxFifoThreshold+0x74>
 8006d1e:	687b      	ldr	r3, [r7, #4]
 8006d20:	2201      	movs	r2, #1
 8006d22:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 8006d26:	687b      	ldr	r3, [r7, #4]
 8006d28:	2224      	movs	r2, #36	; 0x24
 8006d2a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8006d2e:	687b      	ldr	r3, [r7, #4]
 8006d30:	681b      	ldr	r3, [r3, #0]
 8006d32:	681b      	ldr	r3, [r3, #0]
 8006d34:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8006d36:	687b      	ldr	r3, [r7, #4]
 8006d38:	681b      	ldr	r3, [r3, #0]
 8006d3a:	681a      	ldr	r2, [r3, #0]
 8006d3c:	687b      	ldr	r3, [r7, #4]
 8006d3e:	681b      	ldr	r3, [r3, #0]
 8006d40:	f022 0201 	bic.w	r2, r2, #1
 8006d44:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 8006d46:	687b      	ldr	r3, [r7, #4]
 8006d48:	681b      	ldr	r3, [r3, #0]
 8006d4a:	689b      	ldr	r3, [r3, #8]
 8006d4c:	f023 6160 	bic.w	r1, r3, #234881024	; 0xe000000
 8006d50:	687b      	ldr	r3, [r7, #4]
 8006d52:	681b      	ldr	r3, [r3, #0]
 8006d54:	683a      	ldr	r2, [r7, #0]
 8006d56:	430a      	orrs	r2, r1
 8006d58:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8006d5a:	6878      	ldr	r0, [r7, #4]
 8006d5c:	f000 f812 	bl	8006d84 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8006d60:	687b      	ldr	r3, [r7, #4]
 8006d62:	681b      	ldr	r3, [r3, #0]
 8006d64:	68fa      	ldr	r2, [r7, #12]
 8006d66:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8006d68:	687b      	ldr	r3, [r7, #4]
 8006d6a:	2220      	movs	r2, #32
 8006d6c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8006d70:	687b      	ldr	r3, [r7, #4]
 8006d72:	2200      	movs	r2, #0
 8006d74:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 8006d78:	2300      	movs	r3, #0
}
 8006d7a:	4618      	mov	r0, r3
 8006d7c:	3710      	adds	r7, #16
 8006d7e:	46bd      	mov	sp, r7
 8006d80:	bd80      	pop	{r7, pc}
	...

08006d84 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 8006d84:	b480      	push	{r7}
 8006d86:	b085      	sub	sp, #20
 8006d88:	af00      	add	r7, sp, #0
 8006d8a:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 8006d8c:	687b      	ldr	r3, [r7, #4]
 8006d8e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8006d90:	2b00      	cmp	r3, #0
 8006d92:	d108      	bne.n	8006da6 <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 8006d94:	687b      	ldr	r3, [r7, #4]
 8006d96:	2201      	movs	r2, #1
 8006d98:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
 8006d9c:	687b      	ldr	r3, [r7, #4]
 8006d9e:	2201      	movs	r2, #1
 8006da0:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 8006da4:	e031      	b.n	8006e0a <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 8006da6:	2310      	movs	r3, #16
 8006da8:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 8006daa:	2310      	movs	r3, #16
 8006dac:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 8006dae:	687b      	ldr	r3, [r7, #4]
 8006db0:	681b      	ldr	r3, [r3, #0]
 8006db2:	689b      	ldr	r3, [r3, #8]
 8006db4:	0e5b      	lsrs	r3, r3, #25
 8006db6:	b2db      	uxtb	r3, r3
 8006db8:	f003 0307 	and.w	r3, r3, #7
 8006dbc:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 8006dbe:	687b      	ldr	r3, [r7, #4]
 8006dc0:	681b      	ldr	r3, [r3, #0]
 8006dc2:	689b      	ldr	r3, [r3, #8]
 8006dc4:	0f5b      	lsrs	r3, r3, #29
 8006dc6:	b2db      	uxtb	r3, r3
 8006dc8:	f003 0307 	and.w	r3, r3, #7
 8006dcc:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8006dce:	7bbb      	ldrb	r3, [r7, #14]
 8006dd0:	7b3a      	ldrb	r2, [r7, #12]
 8006dd2:	4911      	ldr	r1, [pc, #68]	; (8006e18 <UARTEx_SetNbDataToProcess+0x94>)
 8006dd4:	5c8a      	ldrb	r2, [r1, r2]
 8006dd6:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 8006dda:	7b3a      	ldrb	r2, [r7, #12]
 8006ddc:	490f      	ldr	r1, [pc, #60]	; (8006e1c <UARTEx_SetNbDataToProcess+0x98>)
 8006dde:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8006de0:	fb93 f3f2 	sdiv	r3, r3, r2
 8006de4:	b29a      	uxth	r2, r3
 8006de6:	687b      	ldr	r3, [r7, #4]
 8006de8:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8006dec:	7bfb      	ldrb	r3, [r7, #15]
 8006dee:	7b7a      	ldrb	r2, [r7, #13]
 8006df0:	4909      	ldr	r1, [pc, #36]	; (8006e18 <UARTEx_SetNbDataToProcess+0x94>)
 8006df2:	5c8a      	ldrb	r2, [r1, r2]
 8006df4:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 8006df8:	7b7a      	ldrb	r2, [r7, #13]
 8006dfa:	4908      	ldr	r1, [pc, #32]	; (8006e1c <UARTEx_SetNbDataToProcess+0x98>)
 8006dfc:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8006dfe:	fb93 f3f2 	sdiv	r3, r3, r2
 8006e02:	b29a      	uxth	r2, r3
 8006e04:	687b      	ldr	r3, [r7, #4]
 8006e06:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
}
 8006e0a:	bf00      	nop
 8006e0c:	3714      	adds	r7, #20
 8006e0e:	46bd      	mov	sp, r7
 8006e10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e14:	4770      	bx	lr
 8006e16:	bf00      	nop
 8006e18:	08008f44 	.word	0x08008f44
 8006e1c:	08008f4c 	.word	0x08008f4c

08006e20 <FMC_NORSRAM_Init>:
  * @param  Init Pointer to NORSRAM Initialization structure
  * @retval HAL status
  */
HAL_StatusTypeDef  FMC_NORSRAM_Init(FMC_NORSRAM_TypeDef *Device,
                                    FMC_NORSRAM_InitTypeDef *Init)
{
 8006e20:	b480      	push	{r7}
 8006e22:	b087      	sub	sp, #28
 8006e24:	af00      	add	r7, sp, #0
 8006e26:	6078      	str	r0, [r7, #4]
 8006e28:	6039      	str	r1, [r7, #0]
  assert_param(IS_FMC_CONTINOUS_CLOCK(Init->ContinuousClock));
  assert_param(IS_FMC_WRITE_FIFO(Init->WriteFifo));
  assert_param(IS_FMC_PAGESIZE(Init->PageSize));

  /* Disable NORSRAM Device */
  __FMC_NORSRAM_DISABLE(Device, Init->NSBank);
 8006e2a:	683b      	ldr	r3, [r7, #0]
 8006e2c:	681a      	ldr	r2, [r3, #0]
 8006e2e:	687b      	ldr	r3, [r7, #4]
 8006e30:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006e34:	683a      	ldr	r2, [r7, #0]
 8006e36:	6812      	ldr	r2, [r2, #0]
 8006e38:	f023 0101 	bic.w	r1, r3, #1
 8006e3c:	687b      	ldr	r3, [r7, #4]
 8006e3e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

  /* Set NORSRAM device control parameters */
  if (Init->MemoryType == FMC_MEMORY_TYPE_NOR)
 8006e42:	683b      	ldr	r3, [r7, #0]
 8006e44:	689b      	ldr	r3, [r3, #8]
 8006e46:	2b08      	cmp	r3, #8
 8006e48:	d102      	bne.n	8006e50 <FMC_NORSRAM_Init+0x30>
  {
    flashaccess = FMC_NORSRAM_FLASH_ACCESS_ENABLE;
 8006e4a:	2340      	movs	r3, #64	; 0x40
 8006e4c:	617b      	str	r3, [r7, #20]
 8006e4e:	e001      	b.n	8006e54 <FMC_NORSRAM_Init+0x34>
  }
  else
  {
    flashaccess = FMC_NORSRAM_FLASH_ACCESS_DISABLE;
 8006e50:	2300      	movs	r3, #0
 8006e52:	617b      	str	r3, [r7, #20]
  }

  btcr_reg = (flashaccess                   | \
              Init->DataAddressMux          | \
 8006e54:	683b      	ldr	r3, [r7, #0]
 8006e56:	685a      	ldr	r2, [r3, #4]
  btcr_reg = (flashaccess                   | \
 8006e58:	697b      	ldr	r3, [r7, #20]
 8006e5a:	431a      	orrs	r2, r3
              Init->MemoryType              | \
 8006e5c:	683b      	ldr	r3, [r7, #0]
 8006e5e:	689b      	ldr	r3, [r3, #8]
              Init->DataAddressMux          | \
 8006e60:	431a      	orrs	r2, r3
              Init->MemoryDataWidth         | \
 8006e62:	683b      	ldr	r3, [r7, #0]
 8006e64:	68db      	ldr	r3, [r3, #12]
              Init->MemoryType              | \
 8006e66:	431a      	orrs	r2, r3
              Init->BurstAccessMode         | \
 8006e68:	683b      	ldr	r3, [r7, #0]
 8006e6a:	691b      	ldr	r3, [r3, #16]
              Init->MemoryDataWidth         | \
 8006e6c:	431a      	orrs	r2, r3
              Init->WaitSignalPolarity      | \
 8006e6e:	683b      	ldr	r3, [r7, #0]
 8006e70:	695b      	ldr	r3, [r3, #20]
              Init->BurstAccessMode         | \
 8006e72:	431a      	orrs	r2, r3
              Init->WaitSignalActive        | \
 8006e74:	683b      	ldr	r3, [r7, #0]
 8006e76:	699b      	ldr	r3, [r3, #24]
              Init->WaitSignalPolarity      | \
 8006e78:	431a      	orrs	r2, r3
              Init->WriteOperation          | \
 8006e7a:	683b      	ldr	r3, [r7, #0]
 8006e7c:	69db      	ldr	r3, [r3, #28]
              Init->WaitSignalActive        | \
 8006e7e:	431a      	orrs	r2, r3
              Init->WaitSignal              | \
 8006e80:	683b      	ldr	r3, [r7, #0]
 8006e82:	6a1b      	ldr	r3, [r3, #32]
              Init->WriteOperation          | \
 8006e84:	431a      	orrs	r2, r3
              Init->ExtendedMode            | \
 8006e86:	683b      	ldr	r3, [r7, #0]
 8006e88:	6a5b      	ldr	r3, [r3, #36]	; 0x24
              Init->WaitSignal              | \
 8006e8a:	431a      	orrs	r2, r3
              Init->AsynchronousWait        | \
 8006e8c:	683b      	ldr	r3, [r7, #0]
 8006e8e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
              Init->ExtendedMode            | \
 8006e90:	431a      	orrs	r2, r3
              Init->WriteBurst);
 8006e92:	683b      	ldr	r3, [r7, #0]
 8006e94:	6adb      	ldr	r3, [r3, #44]	; 0x2c
  btcr_reg = (flashaccess                   | \
 8006e96:	4313      	orrs	r3, r2
 8006e98:	613b      	str	r3, [r7, #16]

  btcr_reg |= Init->ContinuousClock;
 8006e9a:	683b      	ldr	r3, [r7, #0]
 8006e9c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006e9e:	693a      	ldr	r2, [r7, #16]
 8006ea0:	4313      	orrs	r3, r2
 8006ea2:	613b      	str	r3, [r7, #16]
  btcr_reg |= Init->WriteFifo;
 8006ea4:	683b      	ldr	r3, [r7, #0]
 8006ea6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006ea8:	693a      	ldr	r2, [r7, #16]
 8006eaa:	4313      	orrs	r3, r2
 8006eac:	613b      	str	r3, [r7, #16]
  btcr_reg |= Init->PageSize;
 8006eae:	683b      	ldr	r3, [r7, #0]
 8006eb0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006eb2:	693a      	ldr	r2, [r7, #16]
 8006eb4:	4313      	orrs	r3, r2
 8006eb6:	613b      	str	r3, [r7, #16]

  mask = (FMC_BCRx_MBKEN                |
 8006eb8:	4b20      	ldr	r3, [pc, #128]	; (8006f3c <FMC_NORSRAM_Init+0x11c>)
 8006eba:	60fb      	str	r3, [r7, #12]
          FMC_BCRx_WAITEN               |
          FMC_BCRx_EXTMOD               |
          FMC_BCRx_ASYNCWAIT            |
          FMC_BCRx_CBURSTRW);

  mask |= FMC_BCR1_CCLKEN;
 8006ebc:	68fb      	ldr	r3, [r7, #12]
 8006ebe:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8006ec2:	60fb      	str	r3, [r7, #12]
  mask |= FMC_BCR1_WFDIS;
 8006ec4:	68fb      	ldr	r3, [r7, #12]
 8006ec6:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8006eca:	60fb      	str	r3, [r7, #12]
  mask |= FMC_BCRx_CPSIZE;
 8006ecc:	68fb      	ldr	r3, [r7, #12]
 8006ece:	f443 23e0 	orr.w	r3, r3, #458752	; 0x70000
 8006ed2:	60fb      	str	r3, [r7, #12]

  MODIFY_REG(Device->BTCR[Init->NSBank], mask, btcr_reg);
 8006ed4:	683b      	ldr	r3, [r7, #0]
 8006ed6:	681a      	ldr	r2, [r3, #0]
 8006ed8:	687b      	ldr	r3, [r7, #4]
 8006eda:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8006ede:	68fb      	ldr	r3, [r7, #12]
 8006ee0:	43db      	mvns	r3, r3
 8006ee2:	ea02 0103 	and.w	r1, r2, r3
 8006ee6:	683b      	ldr	r3, [r7, #0]
 8006ee8:	681a      	ldr	r2, [r3, #0]
 8006eea:	693b      	ldr	r3, [r7, #16]
 8006eec:	4319      	orrs	r1, r3
 8006eee:	687b      	ldr	r3, [r7, #4]
 8006ef0:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

  /* Configure synchronous mode when Continuous clock is enabled for bank2..4 */
  if ((Init->ContinuousClock == FMC_CONTINUOUS_CLOCK_SYNC_ASYNC) && (Init->NSBank != FMC_NORSRAM_BANK1))
 8006ef4:	683b      	ldr	r3, [r7, #0]
 8006ef6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006ef8:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8006efc:	d10c      	bne.n	8006f18 <FMC_NORSRAM_Init+0xf8>
 8006efe:	683b      	ldr	r3, [r7, #0]
 8006f00:	681b      	ldr	r3, [r3, #0]
 8006f02:	2b00      	cmp	r3, #0
 8006f04:	d008      	beq.n	8006f18 <FMC_NORSRAM_Init+0xf8>
  {
    MODIFY_REG(Device->BTCR[FMC_NORSRAM_BANK1], FMC_BCR1_CCLKEN, Init->ContinuousClock);
 8006f06:	687b      	ldr	r3, [r7, #4]
 8006f08:	681b      	ldr	r3, [r3, #0]
 8006f0a:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 8006f0e:	683b      	ldr	r3, [r7, #0]
 8006f10:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006f12:	431a      	orrs	r2, r3
 8006f14:	687b      	ldr	r3, [r7, #4]
 8006f16:	601a      	str	r2, [r3, #0]
  }

  if (Init->NSBank != FMC_NORSRAM_BANK1)
 8006f18:	683b      	ldr	r3, [r7, #0]
 8006f1a:	681b      	ldr	r3, [r3, #0]
 8006f1c:	2b00      	cmp	r3, #0
 8006f1e:	d006      	beq.n	8006f2e <FMC_NORSRAM_Init+0x10e>
  {
    /* Configure Write FIFO mode when Write Fifo is enabled for bank2..4 */
    SET_BIT(Device->BTCR[FMC_NORSRAM_BANK1], (uint32_t)(Init->WriteFifo));
 8006f20:	687b      	ldr	r3, [r7, #4]
 8006f22:	681a      	ldr	r2, [r3, #0]
 8006f24:	683b      	ldr	r3, [r7, #0]
 8006f26:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006f28:	431a      	orrs	r2, r3
 8006f2a:	687b      	ldr	r3, [r7, #4]
 8006f2c:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8006f2e:	2300      	movs	r3, #0
}
 8006f30:	4618      	mov	r0, r3
 8006f32:	371c      	adds	r7, #28
 8006f34:	46bd      	mov	sp, r7
 8006f36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f3a:	4770      	bx	lr
 8006f3c:	0008fb7f 	.word	0x0008fb7f

08006f40 <FMC_NORSRAM_Timing_Init>:
  * @param  Bank NORSRAM bank number
  * @retval HAL status
  */
HAL_StatusTypeDef FMC_NORSRAM_Timing_Init(FMC_NORSRAM_TypeDef *Device,
                                          FMC_NORSRAM_TimingTypeDef *Timing, uint32_t Bank)
{
 8006f40:	b480      	push	{r7}
 8006f42:	b087      	sub	sp, #28
 8006f44:	af00      	add	r7, sp, #0
 8006f46:	60f8      	str	r0, [r7, #12]
 8006f48:	60b9      	str	r1, [r7, #8]
 8006f4a:	607a      	str	r2, [r7, #4]
  assert_param(IS_FMC_DATA_LATENCY(Timing->DataLatency));
  assert_param(IS_FMC_ACCESS_MODE(Timing->AccessMode));
  assert_param(IS_FMC_NORSRAM_BANK(Bank));

  /* Set FMC_NORSRAM device timing parameters */
  MODIFY_REG(Device->BTCR[Bank + 1U], BTR_CLEAR_MASK, (Timing->AddressSetupTime                                  |
 8006f4c:	687b      	ldr	r3, [r7, #4]
 8006f4e:	1c5a      	adds	r2, r3, #1
 8006f50:	68fb      	ldr	r3, [r7, #12]
 8006f52:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006f56:	f003 4140 	and.w	r1, r3, #3221225472	; 0xc0000000
 8006f5a:	68bb      	ldr	r3, [r7, #8]
 8006f5c:	681a      	ldr	r2, [r3, #0]
 8006f5e:	68bb      	ldr	r3, [r7, #8]
 8006f60:	685b      	ldr	r3, [r3, #4]
 8006f62:	011b      	lsls	r3, r3, #4
 8006f64:	431a      	orrs	r2, r3
 8006f66:	68bb      	ldr	r3, [r7, #8]
 8006f68:	689b      	ldr	r3, [r3, #8]
 8006f6a:	021b      	lsls	r3, r3, #8
 8006f6c:	431a      	orrs	r2, r3
 8006f6e:	68bb      	ldr	r3, [r7, #8]
 8006f70:	68db      	ldr	r3, [r3, #12]
 8006f72:	041b      	lsls	r3, r3, #16
 8006f74:	431a      	orrs	r2, r3
 8006f76:	68bb      	ldr	r3, [r7, #8]
 8006f78:	691b      	ldr	r3, [r3, #16]
 8006f7a:	3b01      	subs	r3, #1
 8006f7c:	051b      	lsls	r3, r3, #20
 8006f7e:	431a      	orrs	r2, r3
 8006f80:	68bb      	ldr	r3, [r7, #8]
 8006f82:	695b      	ldr	r3, [r3, #20]
 8006f84:	3b02      	subs	r3, #2
 8006f86:	061b      	lsls	r3, r3, #24
 8006f88:	431a      	orrs	r2, r3
 8006f8a:	68bb      	ldr	r3, [r7, #8]
 8006f8c:	699b      	ldr	r3, [r3, #24]
 8006f8e:	4313      	orrs	r3, r2
 8006f90:	687a      	ldr	r2, [r7, #4]
 8006f92:	3201      	adds	r2, #1
 8006f94:	4319      	orrs	r1, r3
 8006f96:	68fb      	ldr	r3, [r7, #12]
 8006f98:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
                                                       (((Timing->CLKDivision) - 1U)     << FMC_BTRx_CLKDIV_Pos)  |
                                                       (((Timing->DataLatency) - 2U)     << FMC_BTRx_DATLAT_Pos)  |
                                                       (Timing->AccessMode)));

  /* Configure Clock division value (in NORSRAM bank 1) when continuous clock is enabled */
  if (HAL_IS_BIT_SET(Device->BTCR[FMC_NORSRAM_BANK1], FMC_BCR1_CCLKEN))
 8006f9c:	68fb      	ldr	r3, [r7, #12]
 8006f9e:	681b      	ldr	r3, [r3, #0]
 8006fa0:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8006fa4:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8006fa8:	d113      	bne.n	8006fd2 <FMC_NORSRAM_Timing_Init+0x92>
  {
    tmpr = (uint32_t)(Device->BTCR[FMC_NORSRAM_BANK1 + 1U] & ~((0x0FU) << FMC_BTRx_CLKDIV_Pos));
 8006faa:	68fb      	ldr	r3, [r7, #12]
 8006fac:	685b      	ldr	r3, [r3, #4]
 8006fae:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 8006fb2:	617b      	str	r3, [r7, #20]
    tmpr |= (uint32_t)(((Timing->CLKDivision) - 1U) << FMC_BTRx_CLKDIV_Pos);
 8006fb4:	68bb      	ldr	r3, [r7, #8]
 8006fb6:	691b      	ldr	r3, [r3, #16]
 8006fb8:	3b01      	subs	r3, #1
 8006fba:	051b      	lsls	r3, r3, #20
 8006fbc:	697a      	ldr	r2, [r7, #20]
 8006fbe:	4313      	orrs	r3, r2
 8006fc0:	617b      	str	r3, [r7, #20]
    MODIFY_REG(Device->BTCR[FMC_NORSRAM_BANK1 + 1U], FMC_BTRx_CLKDIV, tmpr);
 8006fc2:	68fb      	ldr	r3, [r7, #12]
 8006fc4:	685b      	ldr	r3, [r3, #4]
 8006fc6:	f423 0270 	bic.w	r2, r3, #15728640	; 0xf00000
 8006fca:	697b      	ldr	r3, [r7, #20]
 8006fcc:	431a      	orrs	r2, r3
 8006fce:	68fb      	ldr	r3, [r7, #12]
 8006fd0:	605a      	str	r2, [r3, #4]
  }

  return HAL_OK;
 8006fd2:	2300      	movs	r3, #0
}
 8006fd4:	4618      	mov	r0, r3
 8006fd6:	371c      	adds	r7, #28
 8006fd8:	46bd      	mov	sp, r7
 8006fda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006fde:	4770      	bx	lr

08006fe0 <FMC_NORSRAM_Extended_Timing_Init>:
  * @retval HAL status
  */
HAL_StatusTypeDef FMC_NORSRAM_Extended_Timing_Init(FMC_NORSRAM_EXTENDED_TypeDef *Device,
                                                   FMC_NORSRAM_TimingTypeDef *Timing, uint32_t Bank,
                                                   uint32_t ExtendedMode)
{
 8006fe0:	b480      	push	{r7}
 8006fe2:	b085      	sub	sp, #20
 8006fe4:	af00      	add	r7, sp, #0
 8006fe6:	60f8      	str	r0, [r7, #12]
 8006fe8:	60b9      	str	r1, [r7, #8]
 8006fea:	607a      	str	r2, [r7, #4]
 8006fec:	603b      	str	r3, [r7, #0]
  /* Check the parameters */
  assert_param(IS_FMC_EXTENDED_MODE(ExtendedMode));

  /* Set NORSRAM device timing register for write configuration, if extended mode is used */
  if (ExtendedMode == FMC_EXTENDED_MODE_ENABLE)
 8006fee:	683b      	ldr	r3, [r7, #0]
 8006ff0:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8006ff4:	d11d      	bne.n	8007032 <FMC_NORSRAM_Extended_Timing_Init+0x52>
    assert_param(IS_FMC_TURNAROUND_TIME(Timing->BusTurnAroundDuration));
    assert_param(IS_FMC_ACCESS_MODE(Timing->AccessMode));
    assert_param(IS_FMC_NORSRAM_BANK(Bank));

    /* Set NORSRAM device timing register for write configuration, if extended mode is used */
    MODIFY_REG(Device->BWTR[Bank], BWTR_CLEAR_MASK, (Timing->AddressSetupTime                                    |
 8006ff6:	68fb      	ldr	r3, [r7, #12]
 8006ff8:	687a      	ldr	r2, [r7, #4]
 8006ffa:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8006ffe:	4b13      	ldr	r3, [pc, #76]	; (800704c <FMC_NORSRAM_Extended_Timing_Init+0x6c>)
 8007000:	4013      	ands	r3, r2
 8007002:	68ba      	ldr	r2, [r7, #8]
 8007004:	6811      	ldr	r1, [r2, #0]
 8007006:	68ba      	ldr	r2, [r7, #8]
 8007008:	6852      	ldr	r2, [r2, #4]
 800700a:	0112      	lsls	r2, r2, #4
 800700c:	4311      	orrs	r1, r2
 800700e:	68ba      	ldr	r2, [r7, #8]
 8007010:	6892      	ldr	r2, [r2, #8]
 8007012:	0212      	lsls	r2, r2, #8
 8007014:	4311      	orrs	r1, r2
 8007016:	68ba      	ldr	r2, [r7, #8]
 8007018:	6992      	ldr	r2, [r2, #24]
 800701a:	4311      	orrs	r1, r2
 800701c:	68ba      	ldr	r2, [r7, #8]
 800701e:	68d2      	ldr	r2, [r2, #12]
 8007020:	0412      	lsls	r2, r2, #16
 8007022:	430a      	orrs	r2, r1
 8007024:	ea43 0102 	orr.w	r1, r3, r2
 8007028:	68fb      	ldr	r3, [r7, #12]
 800702a:	687a      	ldr	r2, [r7, #4]
 800702c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
 8007030:	e005      	b.n	800703e <FMC_NORSRAM_Extended_Timing_Init+0x5e>
                                                     Timing->AccessMode                                          |
                                                     ((Timing->BusTurnAroundDuration)  << FMC_BWTRx_BUSTURN_Pos)));
  }
  else
  {
    Device->BWTR[Bank] = 0x0FFFFFFFU;
 8007032:	68fb      	ldr	r3, [r7, #12]
 8007034:	687a      	ldr	r2, [r7, #4]
 8007036:	f06f 4170 	mvn.w	r1, #4026531840	; 0xf0000000
 800703a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  }

  return HAL_OK;
 800703e:	2300      	movs	r3, #0
}
 8007040:	4618      	mov	r0, r3
 8007042:	3714      	adds	r7, #20
 8007044:	46bd      	mov	sp, r7
 8007046:	f85d 7b04 	ldr.w	r7, [sp], #4
 800704a:	4770      	bx	lr
 800704c:	cff00000 	.word	0xcff00000

08007050 <WIZCHIP_WRITE>:

#define _W6100_SPI_OP_          _WIZCHIP_SPI_VDM_OP_

//////////////////////////////////////////////////
void WIZCHIP_WRITE(uint32_t AddrSel, uint8_t wb )
{
 8007050:	b590      	push	{r4, r7, lr}
 8007052:	b085      	sub	sp, #20
 8007054:	af00      	add	r7, sp, #0
 8007056:	6078      	str	r0, [r7, #4]
 8007058:	460b      	mov	r3, r1
 800705a:	70fb      	strb	r3, [r7, #3]
   uint8_t tAD[4];
   tAD[0] = (uint8_t)((AddrSel & 0x00FF0000) >> 16);
 800705c:	687b      	ldr	r3, [r7, #4]
 800705e:	0c1b      	lsrs	r3, r3, #16
 8007060:	b2db      	uxtb	r3, r3
 8007062:	733b      	strb	r3, [r7, #12]
   tAD[1] = (uint8_t)((AddrSel & 0x0000FF00) >> 8);
 8007064:	687b      	ldr	r3, [r7, #4]
 8007066:	0a1b      	lsrs	r3, r3, #8
 8007068:	b2db      	uxtb	r3, r3
 800706a:	737b      	strb	r3, [r7, #13]
   tAD[2] = (uint8_t)(AddrSel & 0x000000ff);
 800706c:	687b      	ldr	r3, [r7, #4]
 800706e:	b2db      	uxtb	r3, r3
 8007070:	73bb      	strb	r3, [r7, #14]
   tAD[3] = wb;
 8007072:	78fb      	ldrb	r3, [r7, #3]
 8007074:	73fb      	strb	r3, [r7, #15]

   WIZCHIP_CRITICAL_ENTER();
 8007076:	4b0c      	ldr	r3, [pc, #48]	; (80070a8 <WIZCHIP_WRITE+0x58>)
 8007078:	689b      	ldr	r3, [r3, #8]
 800707a:	4798      	blx	r3
   WIZCHIP.CS._s_e_l_e_c_t_();
 800707c:	4b0a      	ldr	r3, [pc, #40]	; (80070a8 <WIZCHIP_WRITE+0x58>)
 800707e:	691b      	ldr	r3, [r3, #16]
 8007080:	4798      	blx	r3
#if( (_WIZCHIP_IO_MODE_ == _WIZCHIP_IO_MODE_SPI_VDM_))
   tAD[2] |= (_W6100_SPI_WRITE_ | _W6100_SPI_OP_);
   WIZCHIP.IF.SPI._write_byte_buf(tAD, 4);

#elif ( (_WIZCHIP_IO_MODE_ == _WIZCHIP_IO_MODE_BUS_INDIR_) )
   WIZCHIP.IF.BUS._write_data_buf(IDM_AR0, tAD, 4, 1);
 8007082:	4b09      	ldr	r3, [pc, #36]	; (80070a8 <WIZCHIP_WRITE+0x58>)
 8007084:	6a5c      	ldr	r4, [r3, #36]	; 0x24
 8007086:	f107 010c 	add.w	r1, r7, #12
 800708a:	2301      	movs	r3, #1
 800708c:	2204      	movs	r2, #4
 800708e:	f04f 40c0 	mov.w	r0, #1610612736	; 0x60000000
 8007092:	47a0      	blx	r4
#else
   #error "Unknown _WIZCHIP_IO_MODE_ in W5100. !!!"
#endif

   WIZCHIP.CS._d_e_s_e_l_e_c_t_();
 8007094:	4b04      	ldr	r3, [pc, #16]	; (80070a8 <WIZCHIP_WRITE+0x58>)
 8007096:	695b      	ldr	r3, [r3, #20]
 8007098:	4798      	blx	r3
   WIZCHIP_CRITICAL_EXIT();
 800709a:	4b03      	ldr	r3, [pc, #12]	; (80070a8 <WIZCHIP_WRITE+0x58>)
 800709c:	68db      	ldr	r3, [r3, #12]
 800709e:	4798      	blx	r3
}
 80070a0:	bf00      	nop
 80070a2:	3714      	adds	r7, #20
 80070a4:	46bd      	mov	sp, r7
 80070a6:	bd90      	pop	{r4, r7, pc}
 80070a8:	20000078 	.word	0x20000078

080070ac <WIZCHIP_READ>:

uint8_t  WIZCHIP_READ(uint32_t AddrSel)
{
 80070ac:	b590      	push	{r4, r7, lr}
 80070ae:	b085      	sub	sp, #20
 80070b0:	af00      	add	r7, sp, #0
 80070b2:	6078      	str	r0, [r7, #4]
   uint8_t ret;
   uint8_t tAD[3];
   tAD[0] = (uint8_t)((AddrSel & 0x00FF0000) >> 16);
 80070b4:	687b      	ldr	r3, [r7, #4]
 80070b6:	0c1b      	lsrs	r3, r3, #16
 80070b8:	b2db      	uxtb	r3, r3
 80070ba:	733b      	strb	r3, [r7, #12]
   tAD[1] = (uint8_t)((AddrSel & 0x0000FF00) >> 8);
 80070bc:	687b      	ldr	r3, [r7, #4]
 80070be:	0a1b      	lsrs	r3, r3, #8
 80070c0:	b2db      	uxtb	r3, r3
 80070c2:	737b      	strb	r3, [r7, #13]
   tAD[2] = (uint8_t)(AddrSel & 0x000000ff);
 80070c4:	687b      	ldr	r3, [r7, #4]
 80070c6:	b2db      	uxtb	r3, r3
 80070c8:	73bb      	strb	r3, [r7, #14]

   WIZCHIP_CRITICAL_ENTER();
 80070ca:	4b10      	ldr	r3, [pc, #64]	; (800710c <WIZCHIP_READ+0x60>)
 80070cc:	689b      	ldr	r3, [r3, #8]
 80070ce:	4798      	blx	r3
   WIZCHIP.CS._s_e_l_e_c_t_();
 80070d0:	4b0e      	ldr	r3, [pc, #56]	; (800710c <WIZCHIP_READ+0x60>)
 80070d2:	691b      	ldr	r3, [r3, #16]
 80070d4:	4798      	blx	r3
#if( (_WIZCHIP_IO_MODE_ ==  _WIZCHIP_IO_MODE_SPI_VDM_))
   tAD[2] |= (_W6100_SPI_READ_ | _W6100_SPI_OP_);
   WIZCHIP.IF.SPI._write_byte_buf(tAD, 3);
   ret = WIZCHIP.IF.SPI._read_byte();
#elif ( (_WIZCHIP_IO_MODE_ == _WIZCHIP_IO_MODE_BUS_INDIR_) )
   WIZCHIP.IF.BUS._write_data_buf(IDM_AR0,tAD,3,1);
 80070d6:	4b0d      	ldr	r3, [pc, #52]	; (800710c <WIZCHIP_READ+0x60>)
 80070d8:	6a5c      	ldr	r4, [r3, #36]	; 0x24
 80070da:	f107 010c 	add.w	r1, r7, #12
 80070de:	2301      	movs	r3, #1
 80070e0:	2203      	movs	r2, #3
 80070e2:	f04f 40c0 	mov.w	r0, #1610612736	; 0x60000000
 80070e6:	47a0      	blx	r4
   ret = WIZCHIP.IF.BUS._read_data(IDM_DR);
 80070e8:	4b08      	ldr	r3, [pc, #32]	; (800710c <WIZCHIP_READ+0x60>)
 80070ea:	699b      	ldr	r3, [r3, #24]
 80070ec:	4808      	ldr	r0, [pc, #32]	; (8007110 <WIZCHIP_READ+0x64>)
 80070ee:	4798      	blx	r3
 80070f0:	4603      	mov	r3, r0
 80070f2:	73fb      	strb	r3, [r7, #15]
#else
   #error "Unknown _WIZCHIP_IO_MODE_ in W6100. !!!"   
#endif

   WIZCHIP.CS._d_e_s_e_l_e_c_t_();
 80070f4:	4b05      	ldr	r3, [pc, #20]	; (800710c <WIZCHIP_READ+0x60>)
 80070f6:	695b      	ldr	r3, [r3, #20]
 80070f8:	4798      	blx	r3
   WIZCHIP_CRITICAL_EXIT();
 80070fa:	4b04      	ldr	r3, [pc, #16]	; (800710c <WIZCHIP_READ+0x60>)
 80070fc:	68db      	ldr	r3, [r3, #12]
 80070fe:	4798      	blx	r3
   return ret;
 8007100:	7bfb      	ldrb	r3, [r7, #15]
}
 8007102:	4618      	mov	r0, r3
 8007104:	3714      	adds	r7, #20
 8007106:	46bd      	mov	sp, r7
 8007108:	bd90      	pop	{r4, r7, pc}
 800710a:	bf00      	nop
 800710c:	20000078 	.word	0x20000078
 8007110:	60000003 	.word	0x60000003

08007114 <WIZCHIP_WRITE_BUF>:

void WIZCHIP_WRITE_BUF(uint32_t AddrSel, uint8_t* pBuf, datasize_t len)
{
 8007114:	b590      	push	{r4, r7, lr}
 8007116:	b087      	sub	sp, #28
 8007118:	af00      	add	r7, sp, #0
 800711a:	60f8      	str	r0, [r7, #12]
 800711c:	60b9      	str	r1, [r7, #8]
 800711e:	4613      	mov	r3, r2
 8007120:	80fb      	strh	r3, [r7, #6]
   uint8_t tAD[3];
   tAD[0] = (uint8_t)((AddrSel & 0x00FF0000) >> 16);
 8007122:	68fb      	ldr	r3, [r7, #12]
 8007124:	0c1b      	lsrs	r3, r3, #16
 8007126:	b2db      	uxtb	r3, r3
 8007128:	753b      	strb	r3, [r7, #20]
   tAD[1] = (uint8_t)((AddrSel & 0x0000FF00) >> 8);
 800712a:	68fb      	ldr	r3, [r7, #12]
 800712c:	0a1b      	lsrs	r3, r3, #8
 800712e:	b2db      	uxtb	r3, r3
 8007130:	757b      	strb	r3, [r7, #21]
   tAD[2] = (uint8_t)(AddrSel & 0x000000ff);
 8007132:	68fb      	ldr	r3, [r7, #12]
 8007134:	b2db      	uxtb	r3, r3
 8007136:	75bb      	strb	r3, [r7, #22]


   WIZCHIP_CRITICAL_ENTER();
 8007138:	4b10      	ldr	r3, [pc, #64]	; (800717c <WIZCHIP_WRITE_BUF+0x68>)
 800713a:	689b      	ldr	r3, [r3, #8]
 800713c:	4798      	blx	r3
   WIZCHIP.CS._s_e_l_e_c_t_();
 800713e:	4b0f      	ldr	r3, [pc, #60]	; (800717c <WIZCHIP_WRITE_BUF+0x68>)
 8007140:	691b      	ldr	r3, [r3, #16]
 8007142:	4798      	blx	r3

   WIZCHIP.IF.SPI._write_byte_buf(tAD, 3);
   WIZCHIP.IF.SPI._write_byte_buf(pBuf, len);

#elif ( (_WIZCHIP_IO_MODE_ == _WIZCHIP_IO_MODE_BUS_INDIR_) )
   WIZCHIP.IF.BUS._write_data_buf(IDM_AR0,tAD, 3, 1);
 8007144:	4b0d      	ldr	r3, [pc, #52]	; (800717c <WIZCHIP_WRITE_BUF+0x68>)
 8007146:	6a5c      	ldr	r4, [r3, #36]	; 0x24
 8007148:	f107 0114 	add.w	r1, r7, #20
 800714c:	2301      	movs	r3, #1
 800714e:	2203      	movs	r2, #3
 8007150:	f04f 40c0 	mov.w	r0, #1610612736	; 0x60000000
 8007154:	47a0      	blx	r4
   WIZCHIP.IF.BUS._write_data_buf(IDM_DR,pBuf,len, 0);
 8007156:	4b09      	ldr	r3, [pc, #36]	; (800717c <WIZCHIP_WRITE_BUF+0x68>)
 8007158:	6a5c      	ldr	r4, [r3, #36]	; 0x24
 800715a:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 800715e:	2300      	movs	r3, #0
 8007160:	68b9      	ldr	r1, [r7, #8]
 8007162:	4807      	ldr	r0, [pc, #28]	; (8007180 <WIZCHIP_WRITE_BUF+0x6c>)
 8007164:	47a0      	blx	r4
#else
   #error "Unknown _WIZCHIP_IO_MODE_ in W6100. !!!!"
#endif

   WIZCHIP.CS._d_e_s_e_l_e_c_t_();
 8007166:	4b05      	ldr	r3, [pc, #20]	; (800717c <WIZCHIP_WRITE_BUF+0x68>)
 8007168:	695b      	ldr	r3, [r3, #20]
 800716a:	4798      	blx	r3
   WIZCHIP_CRITICAL_EXIT();
 800716c:	4b03      	ldr	r3, [pc, #12]	; (800717c <WIZCHIP_WRITE_BUF+0x68>)
 800716e:	68db      	ldr	r3, [r3, #12]
 8007170:	4798      	blx	r3
}
 8007172:	bf00      	nop
 8007174:	371c      	adds	r7, #28
 8007176:	46bd      	mov	sp, r7
 8007178:	bd90      	pop	{r4, r7, pc}
 800717a:	bf00      	nop
 800717c:	20000078 	.word	0x20000078
 8007180:	60000003 	.word	0x60000003

08007184 <WIZCHIP_READ_BUF>:

void WIZCHIP_READ_BUF (uint32_t AddrSel, uint8_t* pBuf, datasize_t len)
{
 8007184:	b590      	push	{r4, r7, lr}
 8007186:	b087      	sub	sp, #28
 8007188:	af00      	add	r7, sp, #0
 800718a:	60f8      	str	r0, [r7, #12]
 800718c:	60b9      	str	r1, [r7, #8]
 800718e:	4613      	mov	r3, r2
 8007190:	80fb      	strh	r3, [r7, #6]
   uint8_t tAD[3];
   tAD[0] = (uint8_t)((AddrSel & 0x00FF0000) >> 16);
 8007192:	68fb      	ldr	r3, [r7, #12]
 8007194:	0c1b      	lsrs	r3, r3, #16
 8007196:	b2db      	uxtb	r3, r3
 8007198:	753b      	strb	r3, [r7, #20]
   tAD[1] = (uint8_t)((AddrSel & 0x0000FF00) >> 8);
 800719a:	68fb      	ldr	r3, [r7, #12]
 800719c:	0a1b      	lsrs	r3, r3, #8
 800719e:	b2db      	uxtb	r3, r3
 80071a0:	757b      	strb	r3, [r7, #21]
   tAD[2] = (uint8_t)(AddrSel & 0x000000ff);
 80071a2:	68fb      	ldr	r3, [r7, #12]
 80071a4:	b2db      	uxtb	r3, r3
 80071a6:	75bb      	strb	r3, [r7, #22]

   WIZCHIP_CRITICAL_ENTER();
 80071a8:	4b10      	ldr	r3, [pc, #64]	; (80071ec <WIZCHIP_READ_BUF+0x68>)
 80071aa:	689b      	ldr	r3, [r3, #8]
 80071ac:	4798      	blx	r3
   WIZCHIP.CS._s_e_l_e_c_t_();
 80071ae:	4b0f      	ldr	r3, [pc, #60]	; (80071ec <WIZCHIP_READ_BUF+0x68>)
 80071b0:	691b      	ldr	r3, [r3, #16]
 80071b2:	4798      	blx	r3
#if((_WIZCHIP_IO_MODE_ == _WIZCHIP_IO_MODE_SPI_VDM_))
   tAD[2] |= (_W6100_SPI_READ_ | _W6100_SPI_OP_);
   WIZCHIP.IF.SPI._write_byte_buf(tAD,3);
   WIZCHIP.IF.SPI._read_byte_buf(pBuf, len);
#elif ( (_WIZCHIP_IO_MODE_ == _WIZCHIP_IO_MODE_BUS_INDIR_) )
   WIZCHIP.IF.BUS._write_data_buf(IDM_AR0,tAD,3,1);
 80071b4:	4b0d      	ldr	r3, [pc, #52]	; (80071ec <WIZCHIP_READ_BUF+0x68>)
 80071b6:	6a5c      	ldr	r4, [r3, #36]	; 0x24
 80071b8:	f107 0114 	add.w	r1, r7, #20
 80071bc:	2301      	movs	r3, #1
 80071be:	2203      	movs	r2, #3
 80071c0:	f04f 40c0 	mov.w	r0, #1610612736	; 0x60000000
 80071c4:	47a0      	blx	r4
   WIZCHIP.IF.BUS._read_data_buf(IDM_DR,pBuf,len,0);
 80071c6:	4b09      	ldr	r3, [pc, #36]	; (80071ec <WIZCHIP_READ_BUF+0x68>)
 80071c8:	6a1c      	ldr	r4, [r3, #32]
 80071ca:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 80071ce:	2300      	movs	r3, #0
 80071d0:	68b9      	ldr	r1, [r7, #8]
 80071d2:	4807      	ldr	r0, [pc, #28]	; (80071f0 <WIZCHIP_READ_BUF+0x6c>)
 80071d4:	47a0      	blx	r4
#else
   #error "Unknown _WIZCHIP_IO_MODE_ in W6100. !!!!"
#endif
   WIZCHIP.CS._d_e_s_e_l_e_c_t_();
 80071d6:	4b05      	ldr	r3, [pc, #20]	; (80071ec <WIZCHIP_READ_BUF+0x68>)
 80071d8:	695b      	ldr	r3, [r3, #20]
 80071da:	4798      	blx	r3
   WIZCHIP_CRITICAL_EXIT();
 80071dc:	4b03      	ldr	r3, [pc, #12]	; (80071ec <WIZCHIP_READ_BUF+0x68>)
 80071de:	68db      	ldr	r3, [r3, #12]
 80071e0:	4798      	blx	r3
}
 80071e2:	bf00      	nop
 80071e4:	371c      	adds	r7, #28
 80071e6:	46bd      	mov	sp, r7
 80071e8:	bd90      	pop	{r4, r7, pc}
 80071ea:	bf00      	nop
 80071ec:	20000078 	.word	0x20000078
 80071f0:	60000003 	.word	0x60000003

080071f4 <wizchip_cris_enter>:
 * @details @ref wizchip_cris_enter() provides the default protection while @ref _WIZCHIP_ is accessed. \n
 *          but it is null function.
 * @note It can be overwritten with your function or register your functions by calling @ref reg_wizchip_cris_cbfunc().
 * @sa wizchip_cris_exit()
 */
void wizchip_cris_enter(void)   {}
 80071f4:	b480      	push	{r7}
 80071f6:	af00      	add	r7, sp, #0
 80071f8:	bf00      	nop
 80071fa:	46bd      	mov	sp, r7
 80071fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007200:	4770      	bx	lr

08007202 <wizchip_cris_exit>:
 * @details @ref wizchip_cris_exit provides the default protection while @ref _WIZCHIP_ is accessed\n
 *          but it is null function.
 * @note It can be overwritten with your function or register your functions by calling @ref reg_wizchip_cris_cbfunc().
 * @sa wizchip_cris_enter()
 */
void wizchip_cris_exit(void)   {}
 8007202:	b480      	push	{r7}
 8007204:	af00      	add	r7, sp, #0
 8007206:	bf00      	nop
 8007208:	46bd      	mov	sp, r7
 800720a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800720e:	4770      	bx	lr

08007210 <wizchip_cs_select>:
 * @details @ref wizchip_cs_select() provides the default selection @ref _WIZCHIP_,\n
 *          but it is null function.
 * @note It can be overwritten with your function or register your functions by calling @ref reg_wizchip_cs_cbfunc().
 * @sa wizchip_cs_deselect()
 */
void wizchip_cs_select(void)   {}
 8007210:	b480      	push	{r7}
 8007212:	af00      	add	r7, sp, #0
 8007214:	bf00      	nop
 8007216:	46bd      	mov	sp, r7
 8007218:	f85d 7b04 	ldr.w	r7, [sp], #4
 800721c:	4770      	bx	lr

0800721e <wizchip_cs_deselect>:
 * @details @ref wizchip_cs_deselect() provides the default de-selection @ref _WIZCHIP_, \n
 *          but it is null function.
 * @note It can be overwritten with your function or register your functions by calling @ref reg_wizchip_cs_cbfunc().
 * @sa wizchip_cs_select()
 */
void wizchip_cs_deselect(void)   {}
 800721e:	b480      	push	{r7}
 8007220:	af00      	add	r7, sp, #0
 8007222:	bf00      	nop
 8007224:	46bd      	mov	sp, r7
 8007226:	f85d 7b04 	ldr.w	r7, [sp], #4
 800722a:	4770      	bx	lr

0800722c <wizchip_bus_read>:
 * @param AddrSel It specifies the address of register to be read.
 * @return @ref iodata_t  
 * @note It can be overwritten with your function or register your functions by calling @ref reg_wizchip_bus_cbfunc().
 * @sa wizchip_bus_write()
 */
iodata_t wizchip_bus_read(uint32_t AddrSel) { return * ((volatile iodata_t *)((ptrdiff_t) AddrSel)); }
 800722c:	b480      	push	{r7}
 800722e:	b083      	sub	sp, #12
 8007230:	af00      	add	r7, sp, #0
 8007232:	6078      	str	r0, [r7, #4]
 8007234:	687b      	ldr	r3, [r7, #4]
 8007236:	781b      	ldrb	r3, [r3, #0]
 8007238:	b2db      	uxtb	r3, r3
 800723a:	4618      	mov	r0, r3
 800723c:	370c      	adds	r7, #12
 800723e:	46bd      	mov	sp, r7
 8007240:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007244:	4770      	bx	lr

08007246 <wizchip_bus_write>:
 * @param wb @ref iodata_t data to be written
 * @return void
 * @note It can be overwritten with your function or register your functions by calling @ref reg_wizchip_bus_cbfunc().
 * @sa wizchip_bus_read()
 */
void wizchip_bus_write(uint32_t AddrSel, iodata_t wb)  { *((volatile iodata_t*)((ptrdiff_t)AddrSel)) = wb; }
 8007246:	b480      	push	{r7}
 8007248:	b083      	sub	sp, #12
 800724a:	af00      	add	r7, sp, #0
 800724c:	6078      	str	r0, [r7, #4]
 800724e:	460b      	mov	r3, r1
 8007250:	70fb      	strb	r3, [r7, #3]
 8007252:	687b      	ldr	r3, [r7, #4]
 8007254:	78fa      	ldrb	r2, [r7, #3]
 8007256:	701a      	strb	r2, [r3, #0]
 8007258:	bf00      	nop
 800725a:	370c      	adds	r7, #12
 800725c:	46bd      	mov	sp, r7
 800725e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007262:	4770      	bx	lr

08007264 <wizchip_bus_read_buf>:
 * @return void
 * @note It can be overwritten with your function or register your functions by calling @ref reg_wizchip_bus_cbfunc().
 * @sa wizchip_bus_write_buf()
 */
void wizchip_bus_read_buf(uint32_t AddrSel, iodata_t* buf, datasize_t len, uint8_t addrinc)
{ 
 8007264:	b590      	push	{r4, r7, lr}
 8007266:	b087      	sub	sp, #28
 8007268:	af00      	add	r7, sp, #0
 800726a:	60f8      	str	r0, [r7, #12]
 800726c:	60b9      	str	r1, [r7, #8]
 800726e:	4611      	mov	r1, r2
 8007270:	461a      	mov	r2, r3
 8007272:	460b      	mov	r3, r1
 8007274:	80fb      	strh	r3, [r7, #6]
 8007276:	4613      	mov	r3, r2
 8007278:	717b      	strb	r3, [r7, #5]
   datasize_t i;
   if(addrinc) addrinc = sizeof(iodata_t);
 800727a:	797b      	ldrb	r3, [r7, #5]
 800727c:	2b00      	cmp	r3, #0
 800727e:	d001      	beq.n	8007284 <wizchip_bus_read_buf+0x20>
 8007280:	2301      	movs	r3, #1
 8007282:	717b      	strb	r3, [r7, #5]
   for ( i = 0; i < len; i++)
 8007284:	2300      	movs	r3, #0
 8007286:	82fb      	strh	r3, [r7, #22]
 8007288:	e012      	b.n	80072b0 <wizchip_bus_read_buf+0x4c>
   {
      *buf++ = WIZCHIP.IF.BUS._read_data(AddrSel);
 800728a:	4b0f      	ldr	r3, [pc, #60]	; (80072c8 <wizchip_bus_read_buf+0x64>)
 800728c:	699b      	ldr	r3, [r3, #24]
 800728e:	68bc      	ldr	r4, [r7, #8]
 8007290:	1c62      	adds	r2, r4, #1
 8007292:	60ba      	str	r2, [r7, #8]
 8007294:	68f8      	ldr	r0, [r7, #12]
 8007296:	4798      	blx	r3
 8007298:	4603      	mov	r3, r0
 800729a:	7023      	strb	r3, [r4, #0]
      AddrSel += (uint32_t) addrinc;
 800729c:	797b      	ldrb	r3, [r7, #5]
 800729e:	68fa      	ldr	r2, [r7, #12]
 80072a0:	4413      	add	r3, r2
 80072a2:	60fb      	str	r3, [r7, #12]
   for ( i = 0; i < len; i++)
 80072a4:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 80072a8:	b29b      	uxth	r3, r3
 80072aa:	3301      	adds	r3, #1
 80072ac:	b29b      	uxth	r3, r3
 80072ae:	82fb      	strh	r3, [r7, #22]
 80072b0:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 80072b4:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80072b8:	429a      	cmp	r2, r3
 80072ba:	dbe6      	blt.n	800728a <wizchip_bus_read_buf+0x26>
   }
}
 80072bc:	bf00      	nop
 80072be:	bf00      	nop
 80072c0:	371c      	adds	r7, #28
 80072c2:	46bd      	mov	sp, r7
 80072c4:	bd90      	pop	{r4, r7, pc}
 80072c6:	bf00      	nop
 80072c8:	20000078 	.word	0x20000078

080072cc <wizchip_bus_write_buf>:
 * @return void
 * @note It can be overwritten with your function or register your functions by calling @ref reg_wizchip_bus_cbfunc().
 * @sa wizchip_bus_read_buf()
 */
void wizchip_bus_write_buf(uint32_t AddrSel, iodata_t* buf, datasize_t len, uint8_t addrinc)
{ 
 80072cc:	b580      	push	{r7, lr}
 80072ce:	b086      	sub	sp, #24
 80072d0:	af00      	add	r7, sp, #0
 80072d2:	60f8      	str	r0, [r7, #12]
 80072d4:	60b9      	str	r1, [r7, #8]
 80072d6:	4611      	mov	r1, r2
 80072d8:	461a      	mov	r2, r3
 80072da:	460b      	mov	r3, r1
 80072dc:	80fb      	strh	r3, [r7, #6]
 80072de:	4613      	mov	r3, r2
 80072e0:	717b      	strb	r3, [r7, #5]
   datasize_t i;
   if(addrinc) addrinc = sizeof(iodata_t);
 80072e2:	797b      	ldrb	r3, [r7, #5]
 80072e4:	2b00      	cmp	r3, #0
 80072e6:	d001      	beq.n	80072ec <wizchip_bus_write_buf+0x20>
 80072e8:	2301      	movs	r3, #1
 80072ea:	717b      	strb	r3, [r7, #5]
   for( i = 0; i < len ; i++)
 80072ec:	2300      	movs	r3, #0
 80072ee:	82fb      	strh	r3, [r7, #22]
 80072f0:	e012      	b.n	8007318 <wizchip_bus_write_buf+0x4c>
   {
      WIZCHIP.IF.BUS._write_data(AddrSel,*buf++);
 80072f2:	4b0f      	ldr	r3, [pc, #60]	; (8007330 <wizchip_bus_write_buf+0x64>)
 80072f4:	69da      	ldr	r2, [r3, #28]
 80072f6:	68bb      	ldr	r3, [r7, #8]
 80072f8:	1c59      	adds	r1, r3, #1
 80072fa:	60b9      	str	r1, [r7, #8]
 80072fc:	781b      	ldrb	r3, [r3, #0]
 80072fe:	4619      	mov	r1, r3
 8007300:	68f8      	ldr	r0, [r7, #12]
 8007302:	4790      	blx	r2
      AddrSel += (uint32_t)addrinc;
 8007304:	797b      	ldrb	r3, [r7, #5]
 8007306:	68fa      	ldr	r2, [r7, #12]
 8007308:	4413      	add	r3, r2
 800730a:	60fb      	str	r3, [r7, #12]
   for( i = 0; i < len ; i++)
 800730c:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 8007310:	b29b      	uxth	r3, r3
 8007312:	3301      	adds	r3, #1
 8007314:	b29b      	uxth	r3, r3
 8007316:	82fb      	strh	r3, [r7, #22]
 8007318:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 800731c:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8007320:	429a      	cmp	r2, r3
 8007322:	dbe6      	blt.n	80072f2 <wizchip_bus_write_buf+0x26>
   }

}
 8007324:	bf00      	nop
 8007326:	bf00      	nop
 8007328:	3718      	adds	r7, #24
 800732a:	46bd      	mov	sp, r7
 800732c:	bd80      	pop	{r7, pc}
 800732e:	bf00      	nop
 8007330:	20000078 	.word	0x20000078

08007334 <reg_wizchip_bus_cbfunc>:
#if (_WIZCHIP_IO_MODE_ & _WIZCHIP_IO_MODE_BUS_)
void reg_wizchip_bus_cbfunc( iodata_t(*bus_rd)(uint32_t addr), 
                             void (*bus_wd)(uint32_t addr, iodata_t wb),
                             void (*bus_rbuf)(uint32_t AddrSel, uint8_t* buf, datasize_t len, uint8_t inc),
                             void (*bus_wbuf)(uint32_t AddrSel, uint8_t* buf, datasize_t len, uint8_t inc) )
{
 8007334:	b480      	push	{r7}
 8007336:	b085      	sub	sp, #20
 8007338:	af00      	add	r7, sp, #0
 800733a:	60f8      	str	r0, [r7, #12]
 800733c:	60b9      	str	r1, [r7, #8]
 800733e:	607a      	str	r2, [r7, #4]
 8007340:	603b      	str	r3, [r7, #0]
   while(!(WIZCHIP.if_mode & _WIZCHIP_IO_MODE_BUS_));   
 8007342:	bf00      	nop
 8007344:	4b19      	ldr	r3, [pc, #100]	; (80073ac <reg_wizchip_bus_cbfunc+0x78>)
 8007346:	881b      	ldrh	r3, [r3, #0]
 8007348:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800734c:	2b00      	cmp	r3, #0
 800734e:	d0f9      	beq.n	8007344 <reg_wizchip_bus_cbfunc+0x10>
   if(!bus_rd)  WIZCHIP.IF.BUS._read_data   = wizchip_bus_read;
 8007350:	68fb      	ldr	r3, [r7, #12]
 8007352:	2b00      	cmp	r3, #0
 8007354:	d103      	bne.n	800735e <reg_wizchip_bus_cbfunc+0x2a>
 8007356:	4b15      	ldr	r3, [pc, #84]	; (80073ac <reg_wizchip_bus_cbfunc+0x78>)
 8007358:	4a15      	ldr	r2, [pc, #84]	; (80073b0 <reg_wizchip_bus_cbfunc+0x7c>)
 800735a:	619a      	str	r2, [r3, #24]
 800735c:	e002      	b.n	8007364 <reg_wizchip_bus_cbfunc+0x30>
   else         WIZCHIP.IF.BUS._read_data   = bus_rd;
 800735e:	4a13      	ldr	r2, [pc, #76]	; (80073ac <reg_wizchip_bus_cbfunc+0x78>)
 8007360:	68fb      	ldr	r3, [r7, #12]
 8007362:	6193      	str	r3, [r2, #24]
   if(!bus_wd)  WIZCHIP.IF.BUS._write_data  = wizchip_bus_write;
 8007364:	68bb      	ldr	r3, [r7, #8]
 8007366:	2b00      	cmp	r3, #0
 8007368:	d103      	bne.n	8007372 <reg_wizchip_bus_cbfunc+0x3e>
 800736a:	4b10      	ldr	r3, [pc, #64]	; (80073ac <reg_wizchip_bus_cbfunc+0x78>)
 800736c:	4a11      	ldr	r2, [pc, #68]	; (80073b4 <reg_wizchip_bus_cbfunc+0x80>)
 800736e:	61da      	str	r2, [r3, #28]
 8007370:	e002      	b.n	8007378 <reg_wizchip_bus_cbfunc+0x44>
   else         WIZCHIP.IF.BUS._write_data  = bus_wd;
 8007372:	4a0e      	ldr	r2, [pc, #56]	; (80073ac <reg_wizchip_bus_cbfunc+0x78>)
 8007374:	68bb      	ldr	r3, [r7, #8]
 8007376:	61d3      	str	r3, [r2, #28]

   if(!bus_rbuf)  WIZCHIP.IF.BUS._read_data_buf   = wizchip_bus_read_buf;
 8007378:	687b      	ldr	r3, [r7, #4]
 800737a:	2b00      	cmp	r3, #0
 800737c:	d103      	bne.n	8007386 <reg_wizchip_bus_cbfunc+0x52>
 800737e:	4b0b      	ldr	r3, [pc, #44]	; (80073ac <reg_wizchip_bus_cbfunc+0x78>)
 8007380:	4a0d      	ldr	r2, [pc, #52]	; (80073b8 <reg_wizchip_bus_cbfunc+0x84>)
 8007382:	621a      	str	r2, [r3, #32]
 8007384:	e002      	b.n	800738c <reg_wizchip_bus_cbfunc+0x58>
   else           WIZCHIP.IF.BUS._read_data_buf   = bus_rbuf;
 8007386:	4a09      	ldr	r2, [pc, #36]	; (80073ac <reg_wizchip_bus_cbfunc+0x78>)
 8007388:	687b      	ldr	r3, [r7, #4]
 800738a:	6213      	str	r3, [r2, #32]
   if(!bus_wbuf)  WIZCHIP.IF.BUS._write_data_buf  = wizchip_bus_write_buf;
 800738c:	683b      	ldr	r3, [r7, #0]
 800738e:	2b00      	cmp	r3, #0
 8007390:	d103      	bne.n	800739a <reg_wizchip_bus_cbfunc+0x66>
 8007392:	4b06      	ldr	r3, [pc, #24]	; (80073ac <reg_wizchip_bus_cbfunc+0x78>)
 8007394:	4a09      	ldr	r2, [pc, #36]	; (80073bc <reg_wizchip_bus_cbfunc+0x88>)
 8007396:	625a      	str	r2, [r3, #36]	; 0x24
   else           WIZCHIP.IF.BUS._write_data_buf  = bus_wbuf;
}
 8007398:	e002      	b.n	80073a0 <reg_wizchip_bus_cbfunc+0x6c>
   else           WIZCHIP.IF.BUS._write_data_buf  = bus_wbuf;
 800739a:	4a04      	ldr	r2, [pc, #16]	; (80073ac <reg_wizchip_bus_cbfunc+0x78>)
 800739c:	683b      	ldr	r3, [r7, #0]
 800739e:	6253      	str	r3, [r2, #36]	; 0x24
}
 80073a0:	bf00      	nop
 80073a2:	3714      	adds	r7, #20
 80073a4:	46bd      	mov	sp, r7
 80073a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80073aa:	4770      	bx	lr
 80073ac:	20000078 	.word	0x20000078
 80073b0:	0800722d 	.word	0x0800722d
 80073b4:	08007247 	.word	0x08007247
 80073b8:	08007265 	.word	0x08007265
 80073bc:	080072cd 	.word	0x080072cd

080073c0 <ctlwizchip>:
   else           WIZCHIP.IF.SPI._write_byte_buf = spi_wbuf;
}
#endif

int8_t ctlwizchip(ctlwizchip_type cwtype, void* arg)
{
 80073c0:	b590      	push	{r4, r7, lr}
 80073c2:	b087      	sub	sp, #28
 80073c4:	af00      	add	r7, sp, #0
 80073c6:	4603      	mov	r3, r0
 80073c8:	6039      	str	r1, [r7, #0]
 80073ca:	71fb      	strb	r3, [r7, #7]
   uint8_t tmp = *(uint8_t*) arg;
 80073cc:	683b      	ldr	r3, [r7, #0]
 80073ce:	781b      	ldrb	r3, [r3, #0]
 80073d0:	75fb      	strb	r3, [r7, #23]

   uint8_t* ptmp[2] = {0,0};
 80073d2:	2300      	movs	r3, #0
 80073d4:	60fb      	str	r3, [r7, #12]
 80073d6:	2300      	movs	r3, #0
 80073d8:	613b      	str	r3, [r7, #16]
   switch(cwtype)
 80073da:	79fb      	ldrb	r3, [r7, #7]
 80073dc:	2b17      	cmp	r3, #23
 80073de:	f200 8160 	bhi.w	80076a2 <ctlwizchip+0x2e2>
 80073e2:	a201      	add	r2, pc, #4	; (adr r2, 80073e8 <ctlwizchip+0x28>)
 80073e4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80073e8:	08007449 	.word	0x08007449
 80073ec:	08007483 	.word	0x08007483
 80073f0:	080074bd 	.word	0x080074bd
 80073f4:	080074cf 	.word	0x080074cf
 80073f8:	080074d5 	.word	0x080074d5
 80073fc:	080074f5 	.word	0x080074f5
 8007400:	08007501 	.word	0x08007501
 8007404:	0800750d 	.word	0x0800750d
 8007408:	08007519 	.word	0x08007519
 800740c:	08007525 	.word	0x08007525
 8007410:	08007547 	.word	0x08007547
 8007414:	08007569 	.word	0x08007569
 8007418:	0800759f 	.word	0x0800759f
 800741c:	080075b1 	.word	0x080075b1
 8007420:	080075eb 	.word	0x080075eb
 8007424:	0800760d 	.word	0x0800760d
 8007428:	0800764b 	.word	0x0800764b
 800742c:	0800765f 	.word	0x0800765f
 8007430:	08007665 	.word	0x08007665
 8007434:	0800766d 	.word	0x0800766d
 8007438:	08007675 	.word	0x08007675
 800743c:	0800767d 	.word	0x0800767d
 8007440:	08007687 	.word	0x08007687
 8007444:	08007695 	.word	0x08007695
   {
      case CW_SYS_LOCK:
         if(tmp & SYS_CHIP_LOCK) CHIPLOCK();
 8007448:	7dfb      	ldrb	r3, [r7, #23]
 800744a:	f003 0304 	and.w	r3, r3, #4
 800744e:	2b00      	cmp	r3, #0
 8007450:	d003      	beq.n	800745a <ctlwizchip+0x9a>
 8007452:	21ff      	movs	r1, #255	; 0xff
 8007454:	4899      	ldr	r0, [pc, #612]	; (80076bc <ctlwizchip+0x2fc>)
 8007456:	f7ff fdfb 	bl	8007050 <WIZCHIP_WRITE>
         if(tmp & SYS_NET_LOCK)  NETLOCK();
 800745a:	7dfb      	ldrb	r3, [r7, #23]
 800745c:	f003 0302 	and.w	r3, r3, #2
 8007460:	2b00      	cmp	r3, #0
 8007462:	d003      	beq.n	800746c <ctlwizchip+0xac>
 8007464:	21c5      	movs	r1, #197	; 0xc5
 8007466:	4896      	ldr	r0, [pc, #600]	; (80076c0 <ctlwizchip+0x300>)
 8007468:	f7ff fdf2 	bl	8007050 <WIZCHIP_WRITE>
         if(tmp & SYS_PHY_LOCK)  PHYLOCK();
 800746c:	7dfb      	ldrb	r3, [r7, #23]
 800746e:	f003 0301 	and.w	r3, r3, #1
 8007472:	2b00      	cmp	r3, #0
 8007474:	f000 8118 	beq.w	80076a8 <ctlwizchip+0x2e8>
 8007478:	21ff      	movs	r1, #255	; 0xff
 800747a:	4892      	ldr	r0, [pc, #584]	; (80076c4 <ctlwizchip+0x304>)
 800747c:	f7ff fde8 	bl	8007050 <WIZCHIP_WRITE>
         break;
 8007480:	e112      	b.n	80076a8 <ctlwizchip+0x2e8>
      case CW_SYS_UNLOCK:
         if(tmp & SYS_CHIP_LOCK) CHIPUNLOCK();
 8007482:	7dfb      	ldrb	r3, [r7, #23]
 8007484:	f003 0304 	and.w	r3, r3, #4
 8007488:	2b00      	cmp	r3, #0
 800748a:	d003      	beq.n	8007494 <ctlwizchip+0xd4>
 800748c:	21ce      	movs	r1, #206	; 0xce
 800748e:	488b      	ldr	r0, [pc, #556]	; (80076bc <ctlwizchip+0x2fc>)
 8007490:	f7ff fdde 	bl	8007050 <WIZCHIP_WRITE>
         if(tmp & SYS_NET_LOCK)  NETUNLOCK();
 8007494:	7dfb      	ldrb	r3, [r7, #23]
 8007496:	f003 0302 	and.w	r3, r3, #2
 800749a:	2b00      	cmp	r3, #0
 800749c:	d003      	beq.n	80074a6 <ctlwizchip+0xe6>
 800749e:	213a      	movs	r1, #58	; 0x3a
 80074a0:	4887      	ldr	r0, [pc, #540]	; (80076c0 <ctlwizchip+0x300>)
 80074a2:	f7ff fdd5 	bl	8007050 <WIZCHIP_WRITE>
         if(tmp & SYS_PHY_LOCK)  PHYUNLOCK();
 80074a6:	7dfb      	ldrb	r3, [r7, #23]
 80074a8:	f003 0301 	and.w	r3, r3, #1
 80074ac:	2b00      	cmp	r3, #0
 80074ae:	f000 80fd 	beq.w	80076ac <ctlwizchip+0x2ec>
 80074b2:	2153      	movs	r1, #83	; 0x53
 80074b4:	4883      	ldr	r0, [pc, #524]	; (80076c4 <ctlwizchip+0x304>)
 80074b6:	f7ff fdcb 	bl	8007050 <WIZCHIP_WRITE>
         break;
 80074ba:	e0f7      	b.n	80076ac <ctlwizchip+0x2ec>
      case CW_GET_SYSLOCK:
         *(uint8_t*)arg = getSYSR() >> 5;
 80074bc:	4882      	ldr	r0, [pc, #520]	; (80076c8 <ctlwizchip+0x308>)
 80074be:	f7ff fdf5 	bl	80070ac <WIZCHIP_READ>
 80074c2:	4603      	mov	r3, r0
 80074c4:	095b      	lsrs	r3, r3, #5
 80074c6:	b2da      	uxtb	r2, r3
 80074c8:	683b      	ldr	r3, [r7, #0]
 80074ca:	701a      	strb	r2, [r3, #0]
         break;
 80074cc:	e0f1      	b.n	80076b2 <ctlwizchip+0x2f2>
      case CW_RESET_WIZCHIP:
         wizchip_sw_reset();
 80074ce:	f000 f909 	bl	80076e4 <wizchip_sw_reset>
         break;
 80074d2:	e0ee      	b.n	80076b2 <ctlwizchip+0x2f2>
      case CW_INIT_WIZCHIP:
         if(arg != 0) 
 80074d4:	683b      	ldr	r3, [r7, #0]
 80074d6:	2b00      	cmp	r3, #0
 80074d8:	d004      	beq.n	80074e4 <ctlwizchip+0x124>
         {
            ptmp[0] = (uint8_t*)arg;
 80074da:	683b      	ldr	r3, [r7, #0]
 80074dc:	60fb      	str	r3, [r7, #12]
            ptmp[1] = ptmp[0] + _WIZCHIP_SOCK_NUM_;
 80074de:	68fb      	ldr	r3, [r7, #12]
 80074e0:	3308      	adds	r3, #8
 80074e2:	613b      	str	r3, [r7, #16]
         }
         return wizchip_init(ptmp[0], ptmp[1]);
 80074e4:	68fb      	ldr	r3, [r7, #12]
 80074e6:	693a      	ldr	r2, [r7, #16]
 80074e8:	4611      	mov	r1, r2
 80074ea:	4618      	mov	r0, r3
 80074ec:	f000 f9ae 	bl	800784c <wizchip_init>
 80074f0:	4603      	mov	r3, r0
 80074f2:	e0df      	b.n	80076b4 <ctlwizchip+0x2f4>
      case CW_GET_INTERRUPT:
        *(intr_kind*)arg = wizchip_getinterrupt();
 80074f4:	f000 fa76 	bl	80079e4 <wizchip_getinterrupt>
 80074f8:	4602      	mov	r2, r0
 80074fa:	683b      	ldr	r3, [r7, #0]
 80074fc:	601a      	str	r2, [r3, #0]
         break;
 80074fe:	e0d8      	b.n	80076b2 <ctlwizchip+0x2f2>
      case CW_CLR_INTERRUPT:
         wizchip_clrinterrupt(*(intr_kind*)arg);
 8007500:	683b      	ldr	r3, [r7, #0]
 8007502:	681b      	ldr	r3, [r3, #0]
 8007504:	4618      	mov	r0, r3
 8007506:	f000 fa31 	bl	800796c <wizchip_clrinterrupt>
         break;
 800750a:	e0d2      	b.n	80076b2 <ctlwizchip+0x2f2>
      case CW_SET_INTRMASK:
         wizchip_setinterruptmask(*(intr_kind*)arg);
 800750c:	683b      	ldr	r3, [r7, #0]
 800750e:	681b      	ldr	r3, [r3, #0]
 8007510:	4618      	mov	r0, r3
 8007512:	f000 fa87 	bl	8007a24 <wizchip_setinterruptmask>
         break;         
 8007516:	e0cc      	b.n	80076b2 <ctlwizchip+0x2f2>
      case CW_GET_INTRMASK:
         *(intr_kind*)arg = wizchip_getinterruptmask();
 8007518:	f000 faaa 	bl	8007a70 <wizchip_getinterruptmask>
 800751c:	4602      	mov	r2, r0
 800751e:	683b      	ldr	r3, [r7, #0]
 8007520:	601a      	str	r2, [r3, #0]
         break;   
 8007522:	e0c6      	b.n	80076b2 <ctlwizchip+0x2f2>
      case CW_SET_INTRTIME:
         setINTPTMR(*(uint16_t*)arg);
 8007524:	683b      	ldr	r3, [r7, #0]
 8007526:	881b      	ldrh	r3, [r3, #0]
 8007528:	0a1b      	lsrs	r3, r3, #8
 800752a:	b29b      	uxth	r3, r3
 800752c:	b2db      	uxtb	r3, r3
 800752e:	4619      	mov	r1, r3
 8007530:	4866      	ldr	r0, [pc, #408]	; (80076cc <ctlwizchip+0x30c>)
 8007532:	f7ff fd8d 	bl	8007050 <WIZCHIP_WRITE>
 8007536:	683b      	ldr	r3, [r7, #0]
 8007538:	881b      	ldrh	r3, [r3, #0]
 800753a:	b2db      	uxtb	r3, r3
 800753c:	4619      	mov	r1, r3
 800753e:	4864      	ldr	r0, [pc, #400]	; (80076d0 <ctlwizchip+0x310>)
 8007540:	f7ff fd86 	bl	8007050 <WIZCHIP_WRITE>
         break;
 8007544:	e0b5      	b.n	80076b2 <ctlwizchip+0x2f2>
      case CW_GET_INTRTIME:
         *(uint16_t*)arg = getINTPTMR();
 8007546:	4861      	ldr	r0, [pc, #388]	; (80076cc <ctlwizchip+0x30c>)
 8007548:	f7ff fdb0 	bl	80070ac <WIZCHIP_READ>
 800754c:	4603      	mov	r3, r0
 800754e:	b29b      	uxth	r3, r3
 8007550:	021b      	lsls	r3, r3, #8
 8007552:	b29c      	uxth	r4, r3
 8007554:	485e      	ldr	r0, [pc, #376]	; (80076d0 <ctlwizchip+0x310>)
 8007556:	f7ff fda9 	bl	80070ac <WIZCHIP_READ>
 800755a:	4603      	mov	r3, r0
 800755c:	b29b      	uxth	r3, r3
 800755e:	4423      	add	r3, r4
 8007560:	b29a      	uxth	r2, r3
 8007562:	683b      	ldr	r3, [r7, #0]
 8007564:	801a      	strh	r2, [r3, #0]
         break;   
 8007566:	e0a4      	b.n	80076b2 <ctlwizchip+0x2f2>
      case CW_SET_IEN:
         tmp = getSYCR1();
 8007568:	485a      	ldr	r0, [pc, #360]	; (80076d4 <ctlwizchip+0x314>)
 800756a:	f7ff fd9f 	bl	80070ac <WIZCHIP_READ>
 800756e:	4603      	mov	r3, r0
 8007570:	75fb      	strb	r3, [r7, #23]
         if(*(uint8_t*)arg == 1) setSYCR1(tmp | SYCR1_IEN);
 8007572:	683b      	ldr	r3, [r7, #0]
 8007574:	781b      	ldrb	r3, [r3, #0]
 8007576:	2b01      	cmp	r3, #1
 8007578:	d108      	bne.n	800758c <ctlwizchip+0x1cc>
 800757a:	7dfb      	ldrb	r3, [r7, #23]
 800757c:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8007580:	b2db      	uxtb	r3, r3
 8007582:	4619      	mov	r1, r3
 8007584:	4853      	ldr	r0, [pc, #332]	; (80076d4 <ctlwizchip+0x314>)
 8007586:	f7ff fd63 	bl	8007050 <WIZCHIP_WRITE>
         else                      setSYCR1(tmp & ~SYCR1_IEN);
         break;
 800758a:	e092      	b.n	80076b2 <ctlwizchip+0x2f2>
         else                      setSYCR1(tmp & ~SYCR1_IEN);
 800758c:	7dfb      	ldrb	r3, [r7, #23]
 800758e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8007592:	b2db      	uxtb	r3, r3
 8007594:	4619      	mov	r1, r3
 8007596:	484f      	ldr	r0, [pc, #316]	; (80076d4 <ctlwizchip+0x314>)
 8007598:	f7ff fd5a 	bl	8007050 <WIZCHIP_WRITE>
         break;
 800759c:	e089      	b.n	80076b2 <ctlwizchip+0x2f2>
      case CW_GET_IEN:
         *((uint8_t*)arg) = getSYCR1() >> 7;
 800759e:	484d      	ldr	r0, [pc, #308]	; (80076d4 <ctlwizchip+0x314>)
 80075a0:	f7ff fd84 	bl	80070ac <WIZCHIP_READ>
 80075a4:	4603      	mov	r3, r0
 80075a6:	09db      	lsrs	r3, r3, #7
 80075a8:	b2da      	uxtb	r2, r3
 80075aa:	683b      	ldr	r3, [r7, #0]
 80075ac:	701a      	strb	r2, [r3, #0]
         break;
 80075ae:	e080      	b.n	80076b2 <ctlwizchip+0x2f2>
      case CW_GET_ID:
         ((uint8_t*)arg)[0] = WIZCHIP.id[0];
 80075b0:	4b49      	ldr	r3, [pc, #292]	; (80076d8 <ctlwizchip+0x318>)
 80075b2:	789a      	ldrb	r2, [r3, #2]
 80075b4:	683b      	ldr	r3, [r7, #0]
 80075b6:	701a      	strb	r2, [r3, #0]
         ((uint8_t*)arg)[1] = WIZCHIP.id[1];
 80075b8:	683b      	ldr	r3, [r7, #0]
 80075ba:	3301      	adds	r3, #1
 80075bc:	4a46      	ldr	r2, [pc, #280]	; (80076d8 <ctlwizchip+0x318>)
 80075be:	78d2      	ldrb	r2, [r2, #3]
 80075c0:	701a      	strb	r2, [r3, #0]
         ((uint8_t*)arg)[2] = WIZCHIP.id[2];
 80075c2:	683b      	ldr	r3, [r7, #0]
 80075c4:	3302      	adds	r3, #2
 80075c6:	4a44      	ldr	r2, [pc, #272]	; (80076d8 <ctlwizchip+0x318>)
 80075c8:	7912      	ldrb	r2, [r2, #4]
 80075ca:	701a      	strb	r2, [r3, #0]
         ((uint8_t*)arg)[3] = WIZCHIP.id[3];
 80075cc:	683b      	ldr	r3, [r7, #0]
 80075ce:	3303      	adds	r3, #3
 80075d0:	4a41      	ldr	r2, [pc, #260]	; (80076d8 <ctlwizchip+0x318>)
 80075d2:	7952      	ldrb	r2, [r2, #5]
 80075d4:	701a      	strb	r2, [r3, #0]
         ((uint8_t*)arg)[4] = WIZCHIP.id[4];
 80075d6:	683b      	ldr	r3, [r7, #0]
 80075d8:	3304      	adds	r3, #4
 80075da:	4a3f      	ldr	r2, [pc, #252]	; (80076d8 <ctlwizchip+0x318>)
 80075dc:	7992      	ldrb	r2, [r2, #6]
 80075de:	701a      	strb	r2, [r3, #0]
         ((uint8_t*)arg)[5] = 0;
 80075e0:	683b      	ldr	r3, [r7, #0]
 80075e2:	3305      	adds	r3, #5
 80075e4:	2200      	movs	r2, #0
 80075e6:	701a      	strb	r2, [r3, #0]
         break;   
 80075e8:	e063      	b.n	80076b2 <ctlwizchip+0x2f2>
      case CW_GET_VER:
         *(uint16_t*)arg = getVER();
 80075ea:	483c      	ldr	r0, [pc, #240]	; (80076dc <ctlwizchip+0x31c>)
 80075ec:	f7ff fd5e 	bl	80070ac <WIZCHIP_READ>
 80075f0:	4603      	mov	r3, r0
 80075f2:	b29b      	uxth	r3, r3
 80075f4:	021b      	lsls	r3, r3, #8
 80075f6:	b29c      	uxth	r4, r3
 80075f8:	4839      	ldr	r0, [pc, #228]	; (80076e0 <ctlwizchip+0x320>)
 80075fa:	f7ff fd57 	bl	80070ac <WIZCHIP_READ>
 80075fe:	4603      	mov	r3, r0
 8007600:	b29b      	uxth	r3, r3
 8007602:	4423      	add	r3, r4
 8007604:	b29a      	uxth	r2, r3
 8007606:	683b      	ldr	r3, [r7, #0]
 8007608:	801a      	strh	r2, [r3, #0]
         break;
 800760a:	e052      	b.n	80076b2 <ctlwizchip+0x2f2>
      case CW_SET_SYSCLK:
         tmp = getSYCR1();
 800760c:	4831      	ldr	r0, [pc, #196]	; (80076d4 <ctlwizchip+0x314>)
 800760e:	f7ff fd4d 	bl	80070ac <WIZCHIP_READ>
 8007612:	4603      	mov	r3, r0
 8007614:	75fb      	strb	r3, [r7, #23]
         if(*(uint8_t*)arg == SYSCLK_100MHZ)     setSYCR1(tmp & ~SYCR1_CLKSEL);
 8007616:	683b      	ldr	r3, [r7, #0]
 8007618:	781b      	ldrb	r3, [r3, #0]
 800761a:	2b00      	cmp	r3, #0
 800761c:	d108      	bne.n	8007630 <ctlwizchip+0x270>
 800761e:	7dfb      	ldrb	r3, [r7, #23]
 8007620:	f023 0301 	bic.w	r3, r3, #1
 8007624:	b2db      	uxtb	r3, r3
 8007626:	4619      	mov	r1, r3
 8007628:	482a      	ldr	r0, [pc, #168]	; (80076d4 <ctlwizchip+0x314>)
 800762a:	f7ff fd11 	bl	8007050 <WIZCHIP_WRITE>
         else if(*(uint8_t*)arg == SYSCLK_25MHZ) setSYCR1(tmp |  SYCR1_CLKSEL);
         break;
 800762e:	e03f      	b.n	80076b0 <ctlwizchip+0x2f0>
         else if(*(uint8_t*)arg == SYSCLK_25MHZ) setSYCR1(tmp |  SYCR1_CLKSEL);
 8007630:	683b      	ldr	r3, [r7, #0]
 8007632:	781b      	ldrb	r3, [r3, #0]
 8007634:	2b01      	cmp	r3, #1
 8007636:	d13b      	bne.n	80076b0 <ctlwizchip+0x2f0>
 8007638:	7dfb      	ldrb	r3, [r7, #23]
 800763a:	f043 0301 	orr.w	r3, r3, #1
 800763e:	b2db      	uxtb	r3, r3
 8007640:	4619      	mov	r1, r3
 8007642:	4824      	ldr	r0, [pc, #144]	; (80076d4 <ctlwizchip+0x314>)
 8007644:	f7ff fd04 	bl	8007050 <WIZCHIP_WRITE>
         break;
 8007648:	e032      	b.n	80076b0 <ctlwizchip+0x2f0>
      case CW_GET_SYSCLK:
         *(uint8_t*)arg = (getSYCR1() & SYCR1_CLKSEL);
 800764a:	4822      	ldr	r0, [pc, #136]	; (80076d4 <ctlwizchip+0x314>)
 800764c:	f7ff fd2e 	bl	80070ac <WIZCHIP_READ>
 8007650:	4603      	mov	r3, r0
 8007652:	f003 0301 	and.w	r3, r3, #1
 8007656:	b2da      	uxtb	r2, r3
 8007658:	683b      	ldr	r3, [r7, #0]
 800765a:	701a      	strb	r2, [r3, #0]
         break;
 800765c:	e029      	b.n	80076b2 <ctlwizchip+0x2f2>
      case CW_RESET_PHY:
         wizphy_reset();
 800765e:	f000 fa35 	bl	8007acc <wizphy_reset>
         break;
 8007662:	e026      	b.n	80076b2 <ctlwizchip+0x2f2>
      case CW_SET_PHYCONF:
         wizphy_setphyconf((wiz_PhyConf*)arg);
 8007664:	6838      	ldr	r0, [r7, #0]
 8007666:	f000 fa51 	bl	8007b0c <wizphy_setphyconf>
         break;
 800766a:	e022      	b.n	80076b2 <ctlwizchip+0x2f2>
      case CW_GET_PHYCONF:
         wizphy_getphyconf((wiz_PhyConf*)arg);
 800766c:	6838      	ldr	r0, [r7, #0]
 800766e:	f000 fa99 	bl	8007ba4 <wizphy_getphyconf>
         break;
 8007672:	e01e      	b.n	80076b2 <ctlwizchip+0x2f2>
      case CW_GET_PHYSTATUS:
         wizphy_getphystatus((wiz_PhyConf*)arg);
 8007674:	6838      	ldr	r0, [r7, #0]
 8007676:	f000 fad5 	bl	8007c24 <wizphy_getphystatus>
         break;
 800767a:	e01a      	b.n	80076b2 <ctlwizchip+0x2f2>
      case CW_SET_PHYPOWMODE:
         wizphy_setphypmode(tmp);
 800767c:	7dfb      	ldrb	r3, [r7, #23]
 800767e:	4618      	mov	r0, r3
 8007680:	f000 fb10 	bl	8007ca4 <wizphy_setphypmode>
         break;
 8007684:	e015      	b.n	80076b2 <ctlwizchip+0x2f2>
      case CW_GET_PHYPOWMODE:
         *(uint8_t*)arg = wizphy_getphypmode();
 8007686:	f000 fb2f 	bl	8007ce8 <wizphy_getphypmode>
 800768a:	4603      	mov	r3, r0
 800768c:	b2da      	uxtb	r2, r3
 800768e:	683b      	ldr	r3, [r7, #0]
 8007690:	701a      	strb	r2, [r3, #0]
         break;
 8007692:	e00e      	b.n	80076b2 <ctlwizchip+0x2f2>
      case CW_GET_PHYLINK:
         *(uint8_t*)arg = wizphy_getphylink();
 8007694:	f000 fa0c 	bl	8007ab0 <wizphy_getphylink>
 8007698:	4603      	mov	r3, r0
 800769a:	b2da      	uxtb	r2, r3
 800769c:	683b      	ldr	r3, [r7, #0]
 800769e:	701a      	strb	r2, [r3, #0]
         break;
 80076a0:	e007      	b.n	80076b2 <ctlwizchip+0x2f2>
      default:
         return -1;
 80076a2:	f04f 33ff 	mov.w	r3, #4294967295
 80076a6:	e005      	b.n	80076b4 <ctlwizchip+0x2f4>
         break;
 80076a8:	bf00      	nop
 80076aa:	e002      	b.n	80076b2 <ctlwizchip+0x2f2>
         break;
 80076ac:	bf00      	nop
 80076ae:	e000      	b.n	80076b2 <ctlwizchip+0x2f2>
         break;
 80076b0:	bf00      	nop
   }
   return 0;
 80076b2:	2300      	movs	r3, #0
}
 80076b4:	4618      	mov	r0, r3
 80076b6:	371c      	adds	r7, #28
 80076b8:	46bd      	mov	sp, r7
 80076ba:	bd90      	pop	{r4, r7, pc}
 80076bc:	6041f400 	.word	0x6041f400
 80076c0:	6041f500 	.word	0x6041f500
 80076c4:	6041f600 	.word	0x6041f600
 80076c8:	60200000 	.word	0x60200000
 80076cc:	6041c500 	.word	0x6041c500
 80076d0:	6041c600 	.word	0x6041c600
 80076d4:	60200500 	.word	0x60200500
 80076d8:	20000078 	.word	0x20000078
 80076dc:	60000200 	.word	0x60000200
 80076e0:	60000300 	.word	0x60000300

080076e4 <wizchip_sw_reset>:
          break;
   }
}

void wizchip_sw_reset(void)
{
 80076e4:	b580      	push	{r7, lr}
 80076e6:	b096      	sub	sp, #88	; 0x58
 80076e8:	af00      	add	r7, sp, #0
   uint8_t gw[4], sn[4], sip[4], gw6[16], sn6[16], lla[16], gua[16];
   uint8_t mac[6];
   uint8_t islock = getSYSR();
 80076ea:	484c      	ldr	r0, [pc, #304]	; (800781c <wizchip_sw_reset+0x138>)
 80076ec:	f7ff fcde 	bl	80070ac <WIZCHIP_READ>
 80076f0:	4603      	mov	r3, r0
 80076f2:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57

   CHIPUNLOCK();
 80076f6:	21ce      	movs	r1, #206	; 0xce
 80076f8:	4849      	ldr	r0, [pc, #292]	; (8007820 <wizchip_sw_reset+0x13c>)
 80076fa:	f7ff fca9 	bl	8007050 <WIZCHIP_WRITE>

   getSHAR(mac);
 80076fe:	463b      	mov	r3, r7
 8007700:	2206      	movs	r2, #6
 8007702:	4619      	mov	r1, r3
 8007704:	4847      	ldr	r0, [pc, #284]	; (8007824 <wizchip_sw_reset+0x140>)
 8007706:	f7ff fd3d 	bl	8007184 <WIZCHIP_READ_BUF>
   getGAR(gw);  getSUBR(sn);  getSIPR(sip);	getGA6R(gw6); getSUB6R(sn6); getLLAR(lla); getGUAR(gua);
 800770a:	f107 0350 	add.w	r3, r7, #80	; 0x50
 800770e:	2204      	movs	r2, #4
 8007710:	4619      	mov	r1, r3
 8007712:	4845      	ldr	r0, [pc, #276]	; (8007828 <wizchip_sw_reset+0x144>)
 8007714:	f7ff fd36 	bl	8007184 <WIZCHIP_READ_BUF>
 8007718:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 800771c:	2204      	movs	r2, #4
 800771e:	4619      	mov	r1, r3
 8007720:	4842      	ldr	r0, [pc, #264]	; (800782c <wizchip_sw_reset+0x148>)
 8007722:	f7ff fd2f 	bl	8007184 <WIZCHIP_READ_BUF>
 8007726:	f107 0348 	add.w	r3, r7, #72	; 0x48
 800772a:	2204      	movs	r2, #4
 800772c:	4619      	mov	r1, r3
 800772e:	4840      	ldr	r0, [pc, #256]	; (8007830 <wizchip_sw_reset+0x14c>)
 8007730:	f7ff fd28 	bl	8007184 <WIZCHIP_READ_BUF>
 8007734:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8007738:	2210      	movs	r2, #16
 800773a:	4619      	mov	r1, r3
 800773c:	483d      	ldr	r0, [pc, #244]	; (8007834 <wizchip_sw_reset+0x150>)
 800773e:	f7ff fd21 	bl	8007184 <WIZCHIP_READ_BUF>
 8007742:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8007746:	2210      	movs	r2, #16
 8007748:	4619      	mov	r1, r3
 800774a:	483b      	ldr	r0, [pc, #236]	; (8007838 <wizchip_sw_reset+0x154>)
 800774c:	f7ff fd1a 	bl	8007184 <WIZCHIP_READ_BUF>
 8007750:	f107 0318 	add.w	r3, r7, #24
 8007754:	2210      	movs	r2, #16
 8007756:	4619      	mov	r1, r3
 8007758:	4838      	ldr	r0, [pc, #224]	; (800783c <wizchip_sw_reset+0x158>)
 800775a:	f7ff fd13 	bl	8007184 <WIZCHIP_READ_BUF>
 800775e:	f107 0308 	add.w	r3, r7, #8
 8007762:	2210      	movs	r2, #16
 8007764:	4619      	mov	r1, r3
 8007766:	4836      	ldr	r0, [pc, #216]	; (8007840 <wizchip_sw_reset+0x15c>)
 8007768:	f7ff fd0c 	bl	8007184 <WIZCHIP_READ_BUF>
   setSYCR0(SYCR0_RST);
 800776c:	2100      	movs	r1, #0
 800776e:	4835      	ldr	r0, [pc, #212]	; (8007844 <wizchip_sw_reset+0x160>)
 8007770:	f7ff fc6e 	bl	8007050 <WIZCHIP_WRITE>
   getSYCR0(); // for delay
 8007774:	4833      	ldr	r0, [pc, #204]	; (8007844 <wizchip_sw_reset+0x160>)
 8007776:	f7ff fc99 	bl	80070ac <WIZCHIP_READ>

   NETUNLOCK();
 800777a:	213a      	movs	r1, #58	; 0x3a
 800777c:	4832      	ldr	r0, [pc, #200]	; (8007848 <wizchip_sw_reset+0x164>)
 800777e:	f7ff fc67 	bl	8007050 <WIZCHIP_WRITE>

   setSHAR(mac);
 8007782:	463b      	mov	r3, r7
 8007784:	2206      	movs	r2, #6
 8007786:	4619      	mov	r1, r3
 8007788:	4826      	ldr	r0, [pc, #152]	; (8007824 <wizchip_sw_reset+0x140>)
 800778a:	f7ff fcc3 	bl	8007114 <WIZCHIP_WRITE_BUF>
   setGAR(gw);
 800778e:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8007792:	2204      	movs	r2, #4
 8007794:	4619      	mov	r1, r3
 8007796:	4824      	ldr	r0, [pc, #144]	; (8007828 <wizchip_sw_reset+0x144>)
 8007798:	f7ff fcbc 	bl	8007114 <WIZCHIP_WRITE_BUF>
   setSUBR(sn);
 800779c:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 80077a0:	2204      	movs	r2, #4
 80077a2:	4619      	mov	r1, r3
 80077a4:	4821      	ldr	r0, [pc, #132]	; (800782c <wizchip_sw_reset+0x148>)
 80077a6:	f7ff fcb5 	bl	8007114 <WIZCHIP_WRITE_BUF>
   setSIPR(sip);
 80077aa:	f107 0348 	add.w	r3, r7, #72	; 0x48
 80077ae:	2204      	movs	r2, #4
 80077b0:	4619      	mov	r1, r3
 80077b2:	481f      	ldr	r0, [pc, #124]	; (8007830 <wizchip_sw_reset+0x14c>)
 80077b4:	f7ff fcae 	bl	8007114 <WIZCHIP_WRITE_BUF>
   setGA6R(gw6); 
 80077b8:	f107 0338 	add.w	r3, r7, #56	; 0x38
 80077bc:	2210      	movs	r2, #16
 80077be:	4619      	mov	r1, r3
 80077c0:	481c      	ldr	r0, [pc, #112]	; (8007834 <wizchip_sw_reset+0x150>)
 80077c2:	f7ff fca7 	bl	8007114 <WIZCHIP_WRITE_BUF>
   setSUB6R(sn6); 
 80077c6:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80077ca:	2210      	movs	r2, #16
 80077cc:	4619      	mov	r1, r3
 80077ce:	481a      	ldr	r0, [pc, #104]	; (8007838 <wizchip_sw_reset+0x154>)
 80077d0:	f7ff fca0 	bl	8007114 <WIZCHIP_WRITE_BUF>
   setLLAR(lla);
 80077d4:	f107 0318 	add.w	r3, r7, #24
 80077d8:	2210      	movs	r2, #16
 80077da:	4619      	mov	r1, r3
 80077dc:	4817      	ldr	r0, [pc, #92]	; (800783c <wizchip_sw_reset+0x158>)
 80077de:	f7ff fc99 	bl	8007114 <WIZCHIP_WRITE_BUF>
   setGUAR(gua);
 80077e2:	f107 0308 	add.w	r3, r7, #8
 80077e6:	2210      	movs	r2, #16
 80077e8:	4619      	mov	r1, r3
 80077ea:	4815      	ldr	r0, [pc, #84]	; (8007840 <wizchip_sw_reset+0x15c>)
 80077ec:	f7ff fc92 	bl	8007114 <WIZCHIP_WRITE_BUF>
   if(islock & SYSR_CHPL) CHIPLOCK();
 80077f0:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
 80077f4:	2b00      	cmp	r3, #0
 80077f6:	da03      	bge.n	8007800 <wizchip_sw_reset+0x11c>
 80077f8:	21ff      	movs	r1, #255	; 0xff
 80077fa:	4809      	ldr	r0, [pc, #36]	; (8007820 <wizchip_sw_reset+0x13c>)
 80077fc:	f7ff fc28 	bl	8007050 <WIZCHIP_WRITE>
   if(islock & SYSR_NETL) NETLOCK();
 8007800:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8007804:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007808:	2b00      	cmp	r3, #0
 800780a:	d003      	beq.n	8007814 <wizchip_sw_reset+0x130>
 800780c:	21c5      	movs	r1, #197	; 0xc5
 800780e:	480e      	ldr	r0, [pc, #56]	; (8007848 <wizchip_sw_reset+0x164>)
 8007810:	f7ff fc1e 	bl	8007050 <WIZCHIP_WRITE>
}
 8007814:	bf00      	nop
 8007816:	3758      	adds	r7, #88	; 0x58
 8007818:	46bd      	mov	sp, r7
 800781a:	bd80      	pop	{r7, pc}
 800781c:	60200000 	.word	0x60200000
 8007820:	6041f400 	.word	0x6041f400
 8007824:	60412000 	.word	0x60412000
 8007828:	60413000 	.word	0x60413000
 800782c:	60413400 	.word	0x60413400
 8007830:	60413800 	.word	0x60413800
 8007834:	60417000 	.word	0x60417000
 8007838:	60416000 	.word	0x60416000
 800783c:	60414000 	.word	0x60414000
 8007840:	60415000 	.word	0x60415000
 8007844:	60200400 	.word	0x60200400
 8007848:	6041f500 	.word	0x6041f500

0800784c <wizchip_init>:

int8_t wizchip_init(uint8_t* txsize, uint8_t* rxsize)
{
 800784c:	b580      	push	{r7, lr}
 800784e:	b084      	sub	sp, #16
 8007850:	af00      	add	r7, sp, #0
 8007852:	6078      	str	r0, [r7, #4]
 8007854:	6039      	str	r1, [r7, #0]
   int8_t i;
   int8_t tmp = 0;
 8007856:	2300      	movs	r3, #0
 8007858:	73bb      	strb	r3, [r7, #14]
   wizchip_sw_reset();
 800785a:	f7ff ff43 	bl	80076e4 <wizchip_sw_reset>
   if(txsize)
 800785e:	687b      	ldr	r3, [r7, #4]
 8007860:	2b00      	cmp	r3, #0
 8007862:	d03b      	beq.n	80078dc <wizchip_init+0x90>
   {
      tmp = 0;
 8007864:	2300      	movs	r3, #0
 8007866:	73bb      	strb	r3, [r7, #14]
			for(i = 0 ; i < _WIZCHIP_SOCK_NUM_; i++)
 8007868:	2300      	movs	r3, #0
 800786a:	73fb      	strb	r3, [r7, #15]
 800786c:	e015      	b.n	800789a <wizchip_init+0x4e>
			{
				tmp += txsize[i];		
 800786e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8007872:	687a      	ldr	r2, [r7, #4]
 8007874:	4413      	add	r3, r2
 8007876:	781a      	ldrb	r2, [r3, #0]
 8007878:	7bbb      	ldrb	r3, [r7, #14]
 800787a:	4413      	add	r3, r2
 800787c:	b2db      	uxtb	r3, r3
 800787e:	73bb      	strb	r3, [r7, #14]
				if(tmp > 2*_WIZCHIP_SOCK_NUM_) return -1;		
 8007880:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8007884:	2b10      	cmp	r3, #16
 8007886:	dd02      	ble.n	800788e <wizchip_init+0x42>
 8007888:	f04f 33ff 	mov.w	r3, #4294967295
 800788c:	e066      	b.n	800795c <wizchip_init+0x110>
			for(i = 0 ; i < _WIZCHIP_SOCK_NUM_; i++)
 800788e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8007892:	b2db      	uxtb	r3, r3
 8007894:	3301      	adds	r3, #1
 8007896:	b2db      	uxtb	r3, r3
 8007898:	73fb      	strb	r3, [r7, #15]
 800789a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800789e:	2b07      	cmp	r3, #7
 80078a0:	dde5      	ble.n	800786e <wizchip_init+0x22>
			}
			for(i = 0 ; i < _WIZCHIP_SOCK_NUM_; i++) setSn_TXBUF_SIZE(i, txsize[i]);			
 80078a2:	2300      	movs	r3, #0
 80078a4:	73fb      	strb	r3, [r7, #15]
 80078a6:	e015      	b.n	80078d4 <wizchip_init+0x88>
 80078a8:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80078ac:	009b      	lsls	r3, r3, #2
 80078ae:	3301      	adds	r3, #1
 80078b0:	00da      	lsls	r2, r3, #3
 80078b2:	4b2c      	ldr	r3, [pc, #176]	; (8007964 <wizchip_init+0x118>)
 80078b4:	4413      	add	r3, r2
 80078b6:	4618      	mov	r0, r3
 80078b8:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80078bc:	687a      	ldr	r2, [r7, #4]
 80078be:	4413      	add	r3, r2
 80078c0:	781b      	ldrb	r3, [r3, #0]
 80078c2:	4619      	mov	r1, r3
 80078c4:	f7ff fbc4 	bl	8007050 <WIZCHIP_WRITE>
 80078c8:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80078cc:	b2db      	uxtb	r3, r3
 80078ce:	3301      	adds	r3, #1
 80078d0:	b2db      	uxtb	r3, r3
 80078d2:	73fb      	strb	r3, [r7, #15]
 80078d4:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80078d8:	2b07      	cmp	r3, #7
 80078da:	dde5      	ble.n	80078a8 <wizchip_init+0x5c>
   }
   if(rxsize)
 80078dc:	683b      	ldr	r3, [r7, #0]
 80078de:	2b00      	cmp	r3, #0
 80078e0:	d03b      	beq.n	800795a <wizchip_init+0x10e>
   {
      tmp = 0;
 80078e2:	2300      	movs	r3, #0
 80078e4:	73bb      	strb	r3, [r7, #14]
			for(i = 0 ; i < _WIZCHIP_SOCK_NUM_; i++)
 80078e6:	2300      	movs	r3, #0
 80078e8:	73fb      	strb	r3, [r7, #15]
 80078ea:	e015      	b.n	8007918 <wizchip_init+0xcc>
			{
				tmp += rxsize[i];		
 80078ec:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80078f0:	683a      	ldr	r2, [r7, #0]
 80078f2:	4413      	add	r3, r2
 80078f4:	781a      	ldrb	r2, [r3, #0]
 80078f6:	7bbb      	ldrb	r3, [r7, #14]
 80078f8:	4413      	add	r3, r2
 80078fa:	b2db      	uxtb	r3, r3
 80078fc:	73bb      	strb	r3, [r7, #14]
				if(tmp > 2*_WIZCHIP_SOCK_NUM_) return -1;		
 80078fe:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8007902:	2b10      	cmp	r3, #16
 8007904:	dd02      	ble.n	800790c <wizchip_init+0xc0>
 8007906:	f04f 33ff 	mov.w	r3, #4294967295
 800790a:	e027      	b.n	800795c <wizchip_init+0x110>
			for(i = 0 ; i < _WIZCHIP_SOCK_NUM_; i++)
 800790c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8007910:	b2db      	uxtb	r3, r3
 8007912:	3301      	adds	r3, #1
 8007914:	b2db      	uxtb	r3, r3
 8007916:	73fb      	strb	r3, [r7, #15]
 8007918:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800791c:	2b07      	cmp	r3, #7
 800791e:	dde5      	ble.n	80078ec <wizchip_init+0xa0>
			}
			for(i = 0 ; i < _WIZCHIP_SOCK_NUM_; i++) setSn_RXBUF_SIZE(i, rxsize[i]);
 8007920:	2300      	movs	r3, #0
 8007922:	73fb      	strb	r3, [r7, #15]
 8007924:	e015      	b.n	8007952 <wizchip_init+0x106>
 8007926:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800792a:	009b      	lsls	r3, r3, #2
 800792c:	3301      	adds	r3, #1
 800792e:	00da      	lsls	r2, r3, #3
 8007930:	4b0d      	ldr	r3, [pc, #52]	; (8007968 <wizchip_init+0x11c>)
 8007932:	4413      	add	r3, r2
 8007934:	4618      	mov	r0, r3
 8007936:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800793a:	683a      	ldr	r2, [r7, #0]
 800793c:	4413      	add	r3, r2
 800793e:	781b      	ldrb	r3, [r3, #0]
 8007940:	4619      	mov	r1, r3
 8007942:	f7ff fb85 	bl	8007050 <WIZCHIP_WRITE>
 8007946:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800794a:	b2db      	uxtb	r3, r3
 800794c:	3301      	adds	r3, #1
 800794e:	b2db      	uxtb	r3, r3
 8007950:	73fb      	strb	r3, [r7, #15]
 8007952:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8007956:	2b07      	cmp	r3, #7
 8007958:	dde5      	ble.n	8007926 <wizchip_init+0xda>
   }
   return 0;
 800795a:	2300      	movs	r3, #0
}
 800795c:	4618      	mov	r0, r3
 800795e:	3710      	adds	r7, #16
 8007960:	46bd      	mov	sp, r7
 8007962:	bd80      	pop	{r7, pc}
 8007964:	60020000 	.word	0x60020000
 8007968:	60022000 	.word	0x60022000

0800796c <wizchip_clrinterrupt>:

void wizchip_clrinterrupt(intr_kind intr)
{
 800796c:	b580      	push	{r7, lr}
 800796e:	b084      	sub	sp, #16
 8007970:	af00      	add	r7, sp, #0
 8007972:	6078      	str	r0, [r7, #4]
   int i;
   uint8_t ir   = (uint8_t)intr;
 8007974:	687b      	ldr	r3, [r7, #4]
 8007976:	72fb      	strb	r3, [r7, #11]
   uint8_t sir  = (uint8_t)((uint32_t)intr >> 8);
 8007978:	687b      	ldr	r3, [r7, #4]
 800797a:	0a1b      	lsrs	r3, r3, #8
 800797c:	72bb      	strb	r3, [r7, #10]
   uint8_t slir = (uint8_t)((uint32_t)intr >> 16);
 800797e:	687b      	ldr	r3, [r7, #4]
 8007980:	0c1b      	lsrs	r3, r3, #16
 8007982:	727b      	strb	r3, [r7, #9]
   setIRCLR(ir);
 8007984:	7afb      	ldrb	r3, [r7, #11]
 8007986:	4619      	mov	r1, r3
 8007988:	4813      	ldr	r0, [pc, #76]	; (80079d8 <wizchip_clrinterrupt+0x6c>)
 800798a:	f7ff fb61 	bl	8007050 <WIZCHIP_WRITE>
   for(i=0; i<_WIZCHIP_SOCK_NUM_; i++)
 800798e:	2300      	movs	r3, #0
 8007990:	60fb      	str	r3, [r7, #12]
 8007992:	e014      	b.n	80079be <wizchip_clrinterrupt+0x52>
   {
   	if(sir&(1<<i))   	setSn_IRCLR(i,0xFF);
 8007994:	7aba      	ldrb	r2, [r7, #10]
 8007996:	68fb      	ldr	r3, [r7, #12]
 8007998:	fa42 f303 	asr.w	r3, r2, r3
 800799c:	f003 0301 	and.w	r3, r3, #1
 80079a0:	2b00      	cmp	r3, #0
 80079a2:	d009      	beq.n	80079b8 <wizchip_clrinterrupt+0x4c>
 80079a4:	68fb      	ldr	r3, [r7, #12]
 80079a6:	009b      	lsls	r3, r3, #2
 80079a8:	3301      	adds	r3, #1
 80079aa:	00da      	lsls	r2, r3, #3
 80079ac:	4b0b      	ldr	r3, [pc, #44]	; (80079dc <wizchip_clrinterrupt+0x70>)
 80079ae:	4413      	add	r3, r2
 80079b0:	21ff      	movs	r1, #255	; 0xff
 80079b2:	4618      	mov	r0, r3
 80079b4:	f7ff fb4c 	bl	8007050 <WIZCHIP_WRITE>
   for(i=0; i<_WIZCHIP_SOCK_NUM_; i++)
 80079b8:	68fb      	ldr	r3, [r7, #12]
 80079ba:	3301      	adds	r3, #1
 80079bc:	60fb      	str	r3, [r7, #12]
 80079be:	68fb      	ldr	r3, [r7, #12]
 80079c0:	2b07      	cmp	r3, #7
 80079c2:	dde7      	ble.n	8007994 <wizchip_clrinterrupt+0x28>
   }
   setSLIRCLR(slir);
 80079c4:	7a7b      	ldrb	r3, [r7, #9]
 80079c6:	4619      	mov	r1, r3
 80079c8:	4805      	ldr	r0, [pc, #20]	; (80079e0 <wizchip_clrinterrupt+0x74>)
 80079ca:	f7ff fb41 	bl	8007050 <WIZCHIP_WRITE>
}
 80079ce:	bf00      	nop
 80079d0:	3710      	adds	r7, #16
 80079d2:	46bd      	mov	sp, r7
 80079d4:	bd80      	pop	{r7, pc}
 80079d6:	bf00      	nop
 80079d8:	60210800 	.word	0x60210800
 80079dc:	60002800 	.word	0x60002800
 80079e0:	60212800 	.word	0x60212800

080079e4 <wizchip_getinterrupt>:

intr_kind wizchip_getinterrupt(void)
{
 80079e4:	b590      	push	{r4, r7, lr}
 80079e6:	b083      	sub	sp, #12
 80079e8:	af00      	add	r7, sp, #0
   uint32_t ret;
   ret = (((uint32_t)getSLIR())<<16) | (((uint32_t)getSIR())<<8) | (((uint32_t)getIR()));
 80079ea:	480b      	ldr	r0, [pc, #44]	; (8007a18 <wizchip_getinterrupt+0x34>)
 80079ec:	f7ff fb5e 	bl	80070ac <WIZCHIP_READ>
 80079f0:	4603      	mov	r3, r0
 80079f2:	041c      	lsls	r4, r3, #16
 80079f4:	4809      	ldr	r0, [pc, #36]	; (8007a1c <wizchip_getinterrupt+0x38>)
 80079f6:	f7ff fb59 	bl	80070ac <WIZCHIP_READ>
 80079fa:	4603      	mov	r3, r0
 80079fc:	021b      	lsls	r3, r3, #8
 80079fe:	431c      	orrs	r4, r3
 8007a00:	4807      	ldr	r0, [pc, #28]	; (8007a20 <wizchip_getinterrupt+0x3c>)
 8007a02:	f7ff fb53 	bl	80070ac <WIZCHIP_READ>
 8007a06:	4603      	mov	r3, r0
 8007a08:	4323      	orrs	r3, r4
 8007a0a:	607b      	str	r3, [r7, #4]
   return (intr_kind)ret;
 8007a0c:	687b      	ldr	r3, [r7, #4]
}
 8007a0e:	4618      	mov	r0, r3
 8007a10:	370c      	adds	r7, #12
 8007a12:	46bd      	mov	sp, r7
 8007a14:	bd90      	pop	{r4, r7, pc}
 8007a16:	bf00      	nop
 8007a18:	60210200 	.word	0x60210200
 8007a1c:	60210100 	.word	0x60210100
 8007a20:	60210000 	.word	0x60210000

08007a24 <wizchip_setinterruptmask>:

void wizchip_setinterruptmask(intr_kind intr)
{
 8007a24:	b580      	push	{r7, lr}
 8007a26:	b084      	sub	sp, #16
 8007a28:	af00      	add	r7, sp, #0
 8007a2a:	6078      	str	r0, [r7, #4]
   uint8_t imr   = (uint8_t)intr;
 8007a2c:	687b      	ldr	r3, [r7, #4]
 8007a2e:	73fb      	strb	r3, [r7, #15]
   uint8_t simr  = (uint8_t)((uint32_t)intr >> 8);
 8007a30:	687b      	ldr	r3, [r7, #4]
 8007a32:	0a1b      	lsrs	r3, r3, #8
 8007a34:	73bb      	strb	r3, [r7, #14]
   uint8_t slimr = (uint8_t)((uint32_t)intr >> 16);
 8007a36:	687b      	ldr	r3, [r7, #4]
 8007a38:	0c1b      	lsrs	r3, r3, #16
 8007a3a:	737b      	strb	r3, [r7, #13]
   setIMR(imr);
 8007a3c:	7bfb      	ldrb	r3, [r7, #15]
 8007a3e:	4619      	mov	r1, r3
 8007a40:	4808      	ldr	r0, [pc, #32]	; (8007a64 <wizchip_setinterruptmask+0x40>)
 8007a42:	f7ff fb05 	bl	8007050 <WIZCHIP_WRITE>
   setSIMR(simr);
 8007a46:	7bbb      	ldrb	r3, [r7, #14]
 8007a48:	4619      	mov	r1, r3
 8007a4a:	4807      	ldr	r0, [pc, #28]	; (8007a68 <wizchip_setinterruptmask+0x44>)
 8007a4c:	f7ff fb00 	bl	8007050 <WIZCHIP_WRITE>
   setSLIMR(slimr);
 8007a50:	7b7b      	ldrb	r3, [r7, #13]
 8007a52:	4619      	mov	r1, r3
 8007a54:	4805      	ldr	r0, [pc, #20]	; (8007a6c <wizchip_setinterruptmask+0x48>)
 8007a56:	f7ff fafb 	bl	8007050 <WIZCHIP_WRITE>
}
 8007a5a:	bf00      	nop
 8007a5c:	3710      	adds	r7, #16
 8007a5e:	46bd      	mov	sp, r7
 8007a60:	bd80      	pop	{r7, pc}
 8007a62:	bf00      	nop
 8007a64:	60210400 	.word	0x60210400
 8007a68:	60211400 	.word	0x60211400
 8007a6c:	60212400 	.word	0x60212400

08007a70 <wizchip_getinterruptmask>:

intr_kind wizchip_getinterruptmask(void)
{
 8007a70:	b590      	push	{r4, r7, lr}
 8007a72:	b083      	sub	sp, #12
 8007a74:	af00      	add	r7, sp, #0
   uint32_t ret;
   ret = (((uint32_t)getSLIMR())<<16) | (((uint32_t)getSIMR())<<8) | (((uint32_t)getIMR()));
 8007a76:	480b      	ldr	r0, [pc, #44]	; (8007aa4 <wizchip_getinterruptmask+0x34>)
 8007a78:	f7ff fb18 	bl	80070ac <WIZCHIP_READ>
 8007a7c:	4603      	mov	r3, r0
 8007a7e:	041c      	lsls	r4, r3, #16
 8007a80:	4809      	ldr	r0, [pc, #36]	; (8007aa8 <wizchip_getinterruptmask+0x38>)
 8007a82:	f7ff fb13 	bl	80070ac <WIZCHIP_READ>
 8007a86:	4603      	mov	r3, r0
 8007a88:	021b      	lsls	r3, r3, #8
 8007a8a:	431c      	orrs	r4, r3
 8007a8c:	4807      	ldr	r0, [pc, #28]	; (8007aac <wizchip_getinterruptmask+0x3c>)
 8007a8e:	f7ff fb0d 	bl	80070ac <WIZCHIP_READ>
 8007a92:	4603      	mov	r3, r0
 8007a94:	4323      	orrs	r3, r4
 8007a96:	607b      	str	r3, [r7, #4]
   return (intr_kind)ret;
 8007a98:	687b      	ldr	r3, [r7, #4]
}
 8007a9a:	4618      	mov	r0, r3
 8007a9c:	370c      	adds	r7, #12
 8007a9e:	46bd      	mov	sp, r7
 8007aa0:	bd90      	pop	{r4, r7, pc}
 8007aa2:	bf00      	nop
 8007aa4:	60212400 	.word	0x60212400
 8007aa8:	60211400 	.word	0x60211400
 8007aac:	60210400 	.word	0x60210400

08007ab0 <wizphy_getphylink>:

int8_t wizphy_getphylink(void)
{
 8007ab0:	b580      	push	{r7, lr}
 8007ab2:	af00      	add	r7, sp, #0
#if (_PHY_IO_MODE_ == _PHY_IO_MODE_PHYCR_)
   return (getPHYSR() & PHYSR_LNK);
 8007ab4:	4804      	ldr	r0, [pc, #16]	; (8007ac8 <wizphy_getphylink+0x18>)
 8007ab6:	f7ff faf9 	bl	80070ac <WIZCHIP_READ>
 8007aba:	4603      	mov	r3, r0
 8007abc:	b25b      	sxtb	r3, r3
 8007abe:	f003 0301 	and.w	r3, r3, #1
 8007ac2:	b25b      	sxtb	r3, r3
#elif (_PHY_IO_MODE_ == _PHY_IO_MODE_MII_)
   if(wiz_mdio_read(PHYRAR_BMSR) & BMSR_LINK_STATUS) return PHY_LINK_ON;
   return PHY_LINK_OFF;
#endif  
}
 8007ac4:	4618      	mov	r0, r3
 8007ac6:	bd80      	pop	{r7, pc}
 8007ac8:	60300000 	.word	0x60300000

08007acc <wizphy_reset>:

void wizphy_reset(void)
{
 8007acc:	b580      	push	{r7, lr}
 8007ace:	b082      	sub	sp, #8
 8007ad0:	af00      	add	r7, sp, #0
#if (_PHY_IO_MODE_ == _PHY_IO_MODE_PHYCR_)
   uint8_t tmp = getPHYCR1() | PHYCR1_RST;
 8007ad2:	480c      	ldr	r0, [pc, #48]	; (8007b04 <wizphy_reset+0x38>)
 8007ad4:	f7ff faea 	bl	80070ac <WIZCHIP_READ>
 8007ad8:	4603      	mov	r3, r0
 8007ada:	f043 0301 	orr.w	r3, r3, #1
 8007ade:	71fb      	strb	r3, [r7, #7]
   PHYUNLOCK();
 8007ae0:	2153      	movs	r1, #83	; 0x53
 8007ae2:	4809      	ldr	r0, [pc, #36]	; (8007b08 <wizphy_reset+0x3c>)
 8007ae4:	f7ff fab4 	bl	8007050 <WIZCHIP_WRITE>
   setPHYCR1(tmp);
 8007ae8:	79fb      	ldrb	r3, [r7, #7]
 8007aea:	4619      	mov	r1, r3
 8007aec:	4805      	ldr	r0, [pc, #20]	; (8007b04 <wizphy_reset+0x38>)
 8007aee:	f7ff faaf 	bl	8007050 <WIZCHIP_WRITE>
   PHYLOCK();
 8007af2:	21ff      	movs	r1, #255	; 0xff
 8007af4:	4804      	ldr	r0, [pc, #16]	; (8007b08 <wizphy_reset+0x3c>)
 8007af6:	f7ff faab 	bl	8007050 <WIZCHIP_WRITE>
#elif (_PHY_IO_MODE_ == _PHY_IO_MODE_MII_)
	wiz_mdio_write(PHYRAR_BMCR, wiz_mdio_read(PHYRAR_BMCR) | BMCR_RST);
	while(wiz_mdio_read(PHYRAR_BMCR) & BMCR_RST);
#endif
}
 8007afa:	bf00      	nop
 8007afc:	3708      	adds	r7, #8
 8007afe:	46bd      	mov	sp, r7
 8007b00:	bd80      	pop	{r7, pc}
 8007b02:	bf00      	nop
 8007b04:	60301d00 	.word	0x60301d00
 8007b08:	6041f600 	.word	0x6041f600

08007b0c <wizphy_setphyconf>:

void wizphy_setphyconf(wiz_PhyConf* phyconf)
{
 8007b0c:	b580      	push	{r7, lr}
 8007b0e:	b084      	sub	sp, #16
 8007b10:	af00      	add	r7, sp, #0
 8007b12:	6078      	str	r0, [r7, #4]
#if (_PHY_IO_MODE_ == _PHY_IO_MODE_PHYCR_)
   uint8_t tmp = 0;
 8007b14:	2300      	movs	r3, #0
 8007b16:	73fb      	strb	r3, [r7, #15]
   if(phyconf->mode == PHY_MODE_TE)
 8007b18:	687b      	ldr	r3, [r7, #4]
 8007b1a:	781b      	ldrb	r3, [r3, #0]
 8007b1c:	2b02      	cmp	r3, #2
 8007b1e:	d10d      	bne.n	8007b3c <wizphy_setphyconf+0x30>
   {
      setPHYCR1(getPHYCR1() | PHYCR1_TE);
 8007b20:	481e      	ldr	r0, [pc, #120]	; (8007b9c <wizphy_setphyconf+0x90>)
 8007b22:	f7ff fac3 	bl	80070ac <WIZCHIP_READ>
 8007b26:	4603      	mov	r3, r0
 8007b28:	f043 0308 	orr.w	r3, r3, #8
 8007b2c:	b2db      	uxtb	r3, r3
 8007b2e:	4619      	mov	r1, r3
 8007b30:	481a      	ldr	r0, [pc, #104]	; (8007b9c <wizphy_setphyconf+0x90>)
 8007b32:	f7ff fa8d 	bl	8007050 <WIZCHIP_WRITE>
      tmp = PHYCR0_AUTO;
 8007b36:	2300      	movs	r3, #0
 8007b38:	73fb      	strb	r3, [r7, #15]
 8007b3a:	e025      	b.n	8007b88 <wizphy_setphyconf+0x7c>
   }
   else
   {
      setPHYCR1(getPHYCR1() & ~PHYCR1_TE);
 8007b3c:	4817      	ldr	r0, [pc, #92]	; (8007b9c <wizphy_setphyconf+0x90>)
 8007b3e:	f7ff fab5 	bl	80070ac <WIZCHIP_READ>
 8007b42:	4603      	mov	r3, r0
 8007b44:	f023 0308 	bic.w	r3, r3, #8
 8007b48:	b2db      	uxtb	r3, r3
 8007b4a:	4619      	mov	r1, r3
 8007b4c:	4813      	ldr	r0, [pc, #76]	; (8007b9c <wizphy_setphyconf+0x90>)
 8007b4e:	f7ff fa7f 	bl	8007050 <WIZCHIP_WRITE>
      if(phyconf->mode == PHY_MODE_AUTONEGO) tmp = PHYCR0_AUTO;
 8007b52:	687b      	ldr	r3, [r7, #4]
 8007b54:	781b      	ldrb	r3, [r3, #0]
 8007b56:	2b01      	cmp	r3, #1
 8007b58:	d102      	bne.n	8007b60 <wizphy_setphyconf+0x54>
 8007b5a:	2300      	movs	r3, #0
 8007b5c:	73fb      	strb	r3, [r7, #15]
 8007b5e:	e013      	b.n	8007b88 <wizphy_setphyconf+0x7c>
      else
      {
         tmp |= 0x04;
 8007b60:	7bfb      	ldrb	r3, [r7, #15]
 8007b62:	f043 0304 	orr.w	r3, r3, #4
 8007b66:	73fb      	strb	r3, [r7, #15]
         if(phyconf->speed  == PHY_SPEED_10)    tmp |= 0x02;
 8007b68:	687b      	ldr	r3, [r7, #4]
 8007b6a:	785b      	ldrb	r3, [r3, #1]
 8007b6c:	2b00      	cmp	r3, #0
 8007b6e:	d103      	bne.n	8007b78 <wizphy_setphyconf+0x6c>
 8007b70:	7bfb      	ldrb	r3, [r7, #15]
 8007b72:	f043 0302 	orr.w	r3, r3, #2
 8007b76:	73fb      	strb	r3, [r7, #15]
         if(phyconf->duplex == PHY_DUPLEX_HALF) tmp |= 0x01;
 8007b78:	687b      	ldr	r3, [r7, #4]
 8007b7a:	789b      	ldrb	r3, [r3, #2]
 8007b7c:	2b00      	cmp	r3, #0
 8007b7e:	d103      	bne.n	8007b88 <wizphy_setphyconf+0x7c>
 8007b80:	7bfb      	ldrb	r3, [r7, #15]
 8007b82:	f043 0301 	orr.w	r3, r3, #1
 8007b86:	73fb      	strb	r3, [r7, #15]
      }
   }
   setPHYCR0(tmp);
 8007b88:	7bfb      	ldrb	r3, [r7, #15]
 8007b8a:	4619      	mov	r1, r3
 8007b8c:	4804      	ldr	r0, [pc, #16]	; (8007ba0 <wizphy_setphyconf+0x94>)
 8007b8e:	f7ff fa5f 	bl	8007050 <WIZCHIP_WRITE>
         if(phyconf->speed == PHY_SPEED_100)    tmp |= BMCR_SPD;
      }
      wiz_mdio_write(PHYRAR_BMCR, tmp);
   }
#endif   
}
 8007b92:	bf00      	nop
 8007b94:	3710      	adds	r7, #16
 8007b96:	46bd      	mov	sp, r7
 8007b98:	bd80      	pop	{r7, pc}
 8007b9a:	bf00      	nop
 8007b9c:	60301d00 	.word	0x60301d00
 8007ba0:	60301c00 	.word	0x60301c00

08007ba4 <wizphy_getphyconf>:

void wizphy_getphyconf(wiz_PhyConf* phyconf)
{
 8007ba4:	b580      	push	{r7, lr}
 8007ba6:	b084      	sub	sp, #16
 8007ba8:	af00      	add	r7, sp, #0
 8007baa:	6078      	str	r0, [r7, #4]
#if (_PHY_IO_MODE_ == _PHY_IO_MODE_PHYCR_)
   uint8_t tmp = 0;
 8007bac:	2300      	movs	r3, #0
 8007bae:	73fb      	strb	r3, [r7, #15]
   tmp = getPHYSR();
 8007bb0:	481a      	ldr	r0, [pc, #104]	; (8007c1c <wizphy_getphyconf+0x78>)
 8007bb2:	f7ff fa7b 	bl	80070ac <WIZCHIP_READ>
 8007bb6:	4603      	mov	r3, r0
 8007bb8:	73fb      	strb	r3, [r7, #15]
   if(getPHYCR1() & PHYCR1_TE) phyconf->mode = PHY_MODE_TE;
 8007bba:	4819      	ldr	r0, [pc, #100]	; (8007c20 <wizphy_getphyconf+0x7c>)
 8007bbc:	f7ff fa76 	bl	80070ac <WIZCHIP_READ>
 8007bc0:	4603      	mov	r3, r0
 8007bc2:	f003 0308 	and.w	r3, r3, #8
 8007bc6:	2b00      	cmp	r3, #0
 8007bc8:	d003      	beq.n	8007bd2 <wizphy_getphyconf+0x2e>
 8007bca:	687b      	ldr	r3, [r7, #4]
 8007bcc:	2202      	movs	r2, #2
 8007bce:	701a      	strb	r2, [r3, #0]
 8007bd0:	e00a      	b.n	8007be8 <wizphy_getphyconf+0x44>
   else                        phyconf->mode = (tmp & (1<<5)) ? PHY_MODE_MANUAL : PHY_MODE_AUTONEGO ;
 8007bd2:	7bfb      	ldrb	r3, [r7, #15]
 8007bd4:	f003 0320 	and.w	r3, r3, #32
 8007bd8:	2b00      	cmp	r3, #0
 8007bda:	bf0c      	ite	eq
 8007bdc:	2301      	moveq	r3, #1
 8007bde:	2300      	movne	r3, #0
 8007be0:	b2db      	uxtb	r3, r3
 8007be2:	461a      	mov	r2, r3
 8007be4:	687b      	ldr	r3, [r7, #4]
 8007be6:	701a      	strb	r2, [r3, #0]
   phyconf->speed  = (tmp & (1<<4)) ? PHY_SPEED_10    : PHY_SPEED_100;
 8007be8:	7bfb      	ldrb	r3, [r7, #15]
 8007bea:	f003 0310 	and.w	r3, r3, #16
 8007bee:	2b00      	cmp	r3, #0
 8007bf0:	bf0c      	ite	eq
 8007bf2:	2301      	moveq	r3, #1
 8007bf4:	2300      	movne	r3, #0
 8007bf6:	b2db      	uxtb	r3, r3
 8007bf8:	461a      	mov	r2, r3
 8007bfa:	687b      	ldr	r3, [r7, #4]
 8007bfc:	705a      	strb	r2, [r3, #1]
   phyconf->duplex = (tmp & (1<<3)) ? PHY_DUPLEX_HALF : PHY_DUPLEX_FULL;
 8007bfe:	7bfb      	ldrb	r3, [r7, #15]
 8007c00:	f003 0308 	and.w	r3, r3, #8
 8007c04:	2b00      	cmp	r3, #0
 8007c06:	bf0c      	ite	eq
 8007c08:	2301      	moveq	r3, #1
 8007c0a:	2300      	movne	r3, #0
 8007c0c:	b2db      	uxtb	r3, r3
 8007c0e:	461a      	mov	r2, r3
 8007c10:	687b      	ldr	r3, [r7, #4]
 8007c12:	709a      	strb	r2, [r3, #2]
   if(getPHYCR1() & PHYCR1_TE) phyconf->mode = PHY_MODE_TE;
   else phyconf->mode   = (tmp & BMCR_ANE) ? PHY_MODE_AUTONEGO : PHY_MODE_MANUAL;
   phyconf->duplex = (tmp & BMCR_DPX) ? PHY_DUPLEX_FULL   : PHY_DUPLEX_HALF;
   phyconf->speed  = (tmp & BMCR_SPD) ? PHY_SPEED_100     : PHY_SPEED_10;
#endif
}
 8007c14:	bf00      	nop
 8007c16:	3710      	adds	r7, #16
 8007c18:	46bd      	mov	sp, r7
 8007c1a:	bd80      	pop	{r7, pc}
 8007c1c:	60300000 	.word	0x60300000
 8007c20:	60301d00 	.word	0x60301d00

08007c24 <wizphy_getphystatus>:

void wizphy_getphystatus(wiz_PhyConf* phyconf)
{
 8007c24:	b580      	push	{r7, lr}
 8007c26:	b084      	sub	sp, #16
 8007c28:	af00      	add	r7, sp, #0
 8007c2a:	6078      	str	r0, [r7, #4]
   uint8_t tmp = 0;
 8007c2c:	2300      	movs	r3, #0
 8007c2e:	73fb      	strb	r3, [r7, #15]
   tmp = getPHYSR();
 8007c30:	481a      	ldr	r0, [pc, #104]	; (8007c9c <wizphy_getphystatus+0x78>)
 8007c32:	f7ff fa3b 	bl	80070ac <WIZCHIP_READ>
 8007c36:	4603      	mov	r3, r0
 8007c38:	73fb      	strb	r3, [r7, #15]
   if(getPHYCR1() & PHYCR1_TE) phyconf->mode = PHY_MODE_TE;
 8007c3a:	4819      	ldr	r0, [pc, #100]	; (8007ca0 <wizphy_getphystatus+0x7c>)
 8007c3c:	f7ff fa36 	bl	80070ac <WIZCHIP_READ>
 8007c40:	4603      	mov	r3, r0
 8007c42:	f003 0308 	and.w	r3, r3, #8
 8007c46:	2b00      	cmp	r3, #0
 8007c48:	d003      	beq.n	8007c52 <wizphy_getphystatus+0x2e>
 8007c4a:	687b      	ldr	r3, [r7, #4]
 8007c4c:	2202      	movs	r2, #2
 8007c4e:	701a      	strb	r2, [r3, #0]
 8007c50:	e00a      	b.n	8007c68 <wizphy_getphystatus+0x44>
   else phyconf->mode   = (tmp & (1<<5))    ? PHY_MODE_MANUAL : PHY_MODE_AUTONEGO ;
 8007c52:	7bfb      	ldrb	r3, [r7, #15]
 8007c54:	f003 0320 	and.w	r3, r3, #32
 8007c58:	2b00      	cmp	r3, #0
 8007c5a:	bf0c      	ite	eq
 8007c5c:	2301      	moveq	r3, #1
 8007c5e:	2300      	movne	r3, #0
 8007c60:	b2db      	uxtb	r3, r3
 8007c62:	461a      	mov	r2, r3
 8007c64:	687b      	ldr	r3, [r7, #4]
 8007c66:	701a      	strb	r2, [r3, #0]
   phyconf->speed  = (tmp & PHYSR_SPD) ? PHY_SPEED_10    : PHY_SPEED_100;
 8007c68:	7bfb      	ldrb	r3, [r7, #15]
 8007c6a:	f003 0302 	and.w	r3, r3, #2
 8007c6e:	2b00      	cmp	r3, #0
 8007c70:	bf0c      	ite	eq
 8007c72:	2301      	moveq	r3, #1
 8007c74:	2300      	movne	r3, #0
 8007c76:	b2db      	uxtb	r3, r3
 8007c78:	461a      	mov	r2, r3
 8007c7a:	687b      	ldr	r3, [r7, #4]
 8007c7c:	705a      	strb	r2, [r3, #1]
   phyconf->duplex = (tmp & PHYSR_DPX) ? PHY_DUPLEX_HALF : PHY_DUPLEX_FULL;
 8007c7e:	7bfb      	ldrb	r3, [r7, #15]
 8007c80:	f003 0304 	and.w	r3, r3, #4
 8007c84:	2b00      	cmp	r3, #0
 8007c86:	bf0c      	ite	eq
 8007c88:	2301      	moveq	r3, #1
 8007c8a:	2300      	movne	r3, #0
 8007c8c:	b2db      	uxtb	r3, r3
 8007c8e:	461a      	mov	r2, r3
 8007c90:	687b      	ldr	r3, [r7, #4]
 8007c92:	709a      	strb	r2, [r3, #2]
}
 8007c94:	bf00      	nop
 8007c96:	3710      	adds	r7, #16
 8007c98:	46bd      	mov	sp, r7
 8007c9a:	bd80      	pop	{r7, pc}
 8007c9c:	60300000 	.word	0x60300000
 8007ca0:	60301d00 	.word	0x60301d00

08007ca4 <wizphy_setphypmode>:

void wizphy_setphypmode(uint8_t pmode)
{
 8007ca4:	b580      	push	{r7, lr}
 8007ca6:	b084      	sub	sp, #16
 8007ca8:	af00      	add	r7, sp, #0
 8007caa:	4603      	mov	r3, r0
 8007cac:	71fb      	strb	r3, [r7, #7]
#if (_PHY_IO_MODE_ == _PHY_IO_MODE_PHYCR_)
   uint8_t tmp = getPHYCR1();
 8007cae:	480d      	ldr	r0, [pc, #52]	; (8007ce4 <wizphy_setphypmode+0x40>)
 8007cb0:	f7ff f9fc 	bl	80070ac <WIZCHIP_READ>
 8007cb4:	4603      	mov	r3, r0
 8007cb6:	73fb      	strb	r3, [r7, #15]
   if (pmode == PHY_POWER_DOWN)    tmp |= PHYCR1_PWDN;
 8007cb8:	79fb      	ldrb	r3, [r7, #7]
 8007cba:	2b01      	cmp	r3, #1
 8007cbc:	d104      	bne.n	8007cc8 <wizphy_setphypmode+0x24>
 8007cbe:	7bfb      	ldrb	r3, [r7, #15]
 8007cc0:	f043 0320 	orr.w	r3, r3, #32
 8007cc4:	73fb      	strb	r3, [r7, #15]
 8007cc6:	e003      	b.n	8007cd0 <wizphy_setphypmode+0x2c>
   else                            tmp &= ~PHYCR1_PWDN;
 8007cc8:	7bfb      	ldrb	r3, [r7, #15]
 8007cca:	f023 0320 	bic.w	r3, r3, #32
 8007cce:	73fb      	strb	r3, [r7, #15]
   setPHYCR1(tmp);
 8007cd0:	7bfb      	ldrb	r3, [r7, #15]
 8007cd2:	4619      	mov	r1, r3
 8007cd4:	4803      	ldr	r0, [pc, #12]	; (8007ce4 <wizphy_setphypmode+0x40>)
 8007cd6:	f7ff f9bb 	bl	8007050 <WIZCHIP_WRITE>
   tmp = wiz_mdio_read(PHYRAR_BMCR);
   if (pmode == PHY_POWER_DOWN)    tmp |= BMCR_PWDN;
   else                            tmp &= ~BMCR_PWDN;
   wiz_mdio_write(PHYRAR_BMCR, tmp);
#endif   
}
 8007cda:	bf00      	nop
 8007cdc:	3710      	adds	r7, #16
 8007cde:	46bd      	mov	sp, r7
 8007ce0:	bd80      	pop	{r7, pc}
 8007ce2:	bf00      	nop
 8007ce4:	60301d00 	.word	0x60301d00

08007ce8 <wizphy_getphypmode>:

int8_t wizphy_getphypmode(void)
{
 8007ce8:	b580      	push	{r7, lr}
 8007cea:	af00      	add	r7, sp, #0
#if (_PHY_IO_MODE_ == _PHY_IO_MODE_PHYCR_)
   if (getPHYCR1() & PHYCR1_PWDN)              return PHY_POWER_DOWN;
 8007cec:	4806      	ldr	r0, [pc, #24]	; (8007d08 <wizphy_getphypmode+0x20>)
 8007cee:	f7ff f9dd 	bl	80070ac <WIZCHIP_READ>
 8007cf2:	4603      	mov	r3, r0
 8007cf4:	f003 0320 	and.w	r3, r3, #32
 8007cf8:	2b00      	cmp	r3, #0
 8007cfa:	d001      	beq.n	8007d00 <wizphy_getphypmode+0x18>
 8007cfc:	2301      	movs	r3, #1
 8007cfe:	e000      	b.n	8007d02 <wizphy_getphypmode+0x1a>
#elif (_PHY_IO_MODE_ == _PHY_IO_MODE_MII_)
   if (wiz_mdio_read(PHYRAR_BMCR) & BMCR_PWDN) return PHY_POWER_DOWN;
#endif   
   return PHY_POWER_NORM;
 8007d00:	2300      	movs	r3, #0
}
 8007d02:	4618      	mov	r0, r3
 8007d04:	bd80      	pop	{r7, pc}
 8007d06:	bf00      	nop
 8007d08:	60301d00 	.word	0x60301d00

08007d0c <wizchip_getnetinfo>:

   _IPMODE_   = pnetinfo->ipmode;
}

void wizchip_getnetinfo(wiz_NetInfo* pnetinfo)
{
 8007d0c:	b580      	push	{r7, lr}
 8007d0e:	b084      	sub	sp, #16
 8007d10:	af00      	add	r7, sp, #0
 8007d12:	6078      	str	r0, [r7, #4]
   uint8_t i = 0;
 8007d14:	2300      	movs	r3, #0
 8007d16:	73fb      	strb	r3, [r7, #15]
   getSHAR(pnetinfo->mac);
 8007d18:	687b      	ldr	r3, [r7, #4]
 8007d1a:	2206      	movs	r2, #6
 8007d1c:	4619      	mov	r1, r3
 8007d1e:	4830      	ldr	r0, [pc, #192]	; (8007de0 <wizchip_getnetinfo+0xd4>)
 8007d20:	f7ff fa30 	bl	8007184 <WIZCHIP_READ_BUF>

   getGAR(pnetinfo->gw);
 8007d24:	687b      	ldr	r3, [r7, #4]
 8007d26:	330e      	adds	r3, #14
 8007d28:	2204      	movs	r2, #4
 8007d2a:	4619      	mov	r1, r3
 8007d2c:	482d      	ldr	r0, [pc, #180]	; (8007de4 <wizchip_getnetinfo+0xd8>)
 8007d2e:	f7ff fa29 	bl	8007184 <WIZCHIP_READ_BUF>
   getSUBR(pnetinfo->sn);
 8007d32:	687b      	ldr	r3, [r7, #4]
 8007d34:	330a      	adds	r3, #10
 8007d36:	2204      	movs	r2, #4
 8007d38:	4619      	mov	r1, r3
 8007d3a:	482b      	ldr	r0, [pc, #172]	; (8007de8 <wizchip_getnetinfo+0xdc>)
 8007d3c:	f7ff fa22 	bl	8007184 <WIZCHIP_READ_BUF>
   getSIPR(pnetinfo->ip);
 8007d40:	687b      	ldr	r3, [r7, #4]
 8007d42:	3306      	adds	r3, #6
 8007d44:	2204      	movs	r2, #4
 8007d46:	4619      	mov	r1, r3
 8007d48:	4828      	ldr	r0, [pc, #160]	; (8007dec <wizchip_getnetinfo+0xe0>)
 8007d4a:	f7ff fa1b 	bl	8007184 <WIZCHIP_READ_BUF>
   
   getGA6R(pnetinfo->gw6);
 8007d4e:	687b      	ldr	r3, [r7, #4]
 8007d50:	3342      	adds	r3, #66	; 0x42
 8007d52:	2210      	movs	r2, #16
 8007d54:	4619      	mov	r1, r3
 8007d56:	4826      	ldr	r0, [pc, #152]	; (8007df0 <wizchip_getnetinfo+0xe4>)
 8007d58:	f7ff fa14 	bl	8007184 <WIZCHIP_READ_BUF>
   getSUB6R(pnetinfo->sn6);
 8007d5c:	687b      	ldr	r3, [r7, #4]
 8007d5e:	3332      	adds	r3, #50	; 0x32
 8007d60:	2210      	movs	r2, #16
 8007d62:	4619      	mov	r1, r3
 8007d64:	4823      	ldr	r0, [pc, #140]	; (8007df4 <wizchip_getnetinfo+0xe8>)
 8007d66:	f7ff fa0d 	bl	8007184 <WIZCHIP_READ_BUF>
   getLLAR(pnetinfo->lla);
 8007d6a:	687b      	ldr	r3, [r7, #4]
 8007d6c:	3312      	adds	r3, #18
 8007d6e:	2210      	movs	r2, #16
 8007d70:	4619      	mov	r1, r3
 8007d72:	4821      	ldr	r0, [pc, #132]	; (8007df8 <wizchip_getnetinfo+0xec>)
 8007d74:	f7ff fa06 	bl	8007184 <WIZCHIP_READ_BUF>
   getGUAR(pnetinfo->gua);
 8007d78:	687b      	ldr	r3, [r7, #4]
 8007d7a:	3322      	adds	r3, #34	; 0x22
 8007d7c:	2210      	movs	r2, #16
 8007d7e:	4619      	mov	r1, r3
 8007d80:	481e      	ldr	r0, [pc, #120]	; (8007dfc <wizchip_getnetinfo+0xf0>)
 8007d82:	f7ff f9ff 	bl	8007184 <WIZCHIP_READ_BUF>
   for(i=0; i<4; i++)  pnetinfo->dns[i] = _DNS_[i];
 8007d86:	2300      	movs	r3, #0
 8007d88:	73fb      	strb	r3, [r7, #15]
 8007d8a:	e00b      	b.n	8007da4 <wizchip_getnetinfo+0x98>
 8007d8c:	7bfa      	ldrb	r2, [r7, #15]
 8007d8e:	7bfb      	ldrb	r3, [r7, #15]
 8007d90:	491b      	ldr	r1, [pc, #108]	; (8007e00 <wizchip_getnetinfo+0xf4>)
 8007d92:	5c89      	ldrb	r1, [r1, r2]
 8007d94:	687a      	ldr	r2, [r7, #4]
 8007d96:	4413      	add	r3, r2
 8007d98:	460a      	mov	r2, r1
 8007d9a:	f883 2052 	strb.w	r2, [r3, #82]	; 0x52
 8007d9e:	7bfb      	ldrb	r3, [r7, #15]
 8007da0:	3301      	adds	r3, #1
 8007da2:	73fb      	strb	r3, [r7, #15]
 8007da4:	7bfb      	ldrb	r3, [r7, #15]
 8007da6:	2b03      	cmp	r3, #3
 8007da8:	d9f0      	bls.n	8007d8c <wizchip_getnetinfo+0x80>
   for(i=0; i<16; i++) pnetinfo->dns6[i]  = _DNS6_[i];
 8007daa:	2300      	movs	r3, #0
 8007dac:	73fb      	strb	r3, [r7, #15]
 8007dae:	e00b      	b.n	8007dc8 <wizchip_getnetinfo+0xbc>
 8007db0:	7bfa      	ldrb	r2, [r7, #15]
 8007db2:	7bfb      	ldrb	r3, [r7, #15]
 8007db4:	4913      	ldr	r1, [pc, #76]	; (8007e04 <wizchip_getnetinfo+0xf8>)
 8007db6:	5c89      	ldrb	r1, [r1, r2]
 8007db8:	687a      	ldr	r2, [r7, #4]
 8007dba:	4413      	add	r3, r2
 8007dbc:	460a      	mov	r2, r1
 8007dbe:	f883 2056 	strb.w	r2, [r3, #86]	; 0x56
 8007dc2:	7bfb      	ldrb	r3, [r7, #15]
 8007dc4:	3301      	adds	r3, #1
 8007dc6:	73fb      	strb	r3, [r7, #15]
 8007dc8:	7bfb      	ldrb	r3, [r7, #15]
 8007dca:	2b0f      	cmp	r3, #15
 8007dcc:	d9f0      	bls.n	8007db0 <wizchip_getnetinfo+0xa4>

   pnetinfo->ipmode = _IPMODE_;
 8007dce:	4b0e      	ldr	r3, [pc, #56]	; (8007e08 <wizchip_getnetinfo+0xfc>)
 8007dd0:	781a      	ldrb	r2, [r3, #0]
 8007dd2:	687b      	ldr	r3, [r7, #4]
 8007dd4:	f883 2066 	strb.w	r2, [r3, #102]	; 0x66
}
 8007dd8:	bf00      	nop
 8007dda:	3710      	adds	r7, #16
 8007ddc:	46bd      	mov	sp, r7
 8007dde:	bd80      	pop	{r7, pc}
 8007de0:	60412000 	.word	0x60412000
 8007de4:	60413000 	.word	0x60413000
 8007de8:	60413400 	.word	0x60413400
 8007dec:	60413800 	.word	0x60413800
 8007df0:	60417000 	.word	0x60417000
 8007df4:	60416000 	.word	0x60416000
 8007df8:	60414000 	.word	0x60414000
 8007dfc:	60415000 	.word	0x60415000
 8007e00:	200001e8 	.word	0x200001e8
 8007e04:	200001ec 	.word	0x200001ec
 8007e08:	200001fc 	.word	0x200001fc

08007e0c <__errno>:
 8007e0c:	4b01      	ldr	r3, [pc, #4]	; (8007e14 <__errno+0x8>)
 8007e0e:	6818      	ldr	r0, [r3, #0]
 8007e10:	4770      	bx	lr
 8007e12:	bf00      	nop
 8007e14:	200000a0 	.word	0x200000a0

08007e18 <__libc_init_array>:
 8007e18:	b570      	push	{r4, r5, r6, lr}
 8007e1a:	4d0d      	ldr	r5, [pc, #52]	; (8007e50 <__libc_init_array+0x38>)
 8007e1c:	4c0d      	ldr	r4, [pc, #52]	; (8007e54 <__libc_init_array+0x3c>)
 8007e1e:	1b64      	subs	r4, r4, r5
 8007e20:	10a4      	asrs	r4, r4, #2
 8007e22:	2600      	movs	r6, #0
 8007e24:	42a6      	cmp	r6, r4
 8007e26:	d109      	bne.n	8007e3c <__libc_init_array+0x24>
 8007e28:	4d0b      	ldr	r5, [pc, #44]	; (8007e58 <__libc_init_array+0x40>)
 8007e2a:	4c0c      	ldr	r4, [pc, #48]	; (8007e5c <__libc_init_array+0x44>)
 8007e2c:	f000 ffec 	bl	8008e08 <_init>
 8007e30:	1b64      	subs	r4, r4, r5
 8007e32:	10a4      	asrs	r4, r4, #2
 8007e34:	2600      	movs	r6, #0
 8007e36:	42a6      	cmp	r6, r4
 8007e38:	d105      	bne.n	8007e46 <__libc_init_array+0x2e>
 8007e3a:	bd70      	pop	{r4, r5, r6, pc}
 8007e3c:	f855 3b04 	ldr.w	r3, [r5], #4
 8007e40:	4798      	blx	r3
 8007e42:	3601      	adds	r6, #1
 8007e44:	e7ee      	b.n	8007e24 <__libc_init_array+0xc>
 8007e46:	f855 3b04 	ldr.w	r3, [r5], #4
 8007e4a:	4798      	blx	r3
 8007e4c:	3601      	adds	r6, #1
 8007e4e:	e7f2      	b.n	8007e36 <__libc_init_array+0x1e>
 8007e50:	08008ff4 	.word	0x08008ff4
 8007e54:	08008ff4 	.word	0x08008ff4
 8007e58:	08008ff4 	.word	0x08008ff4
 8007e5c:	08008ff8 	.word	0x08008ff8

08007e60 <memset>:
 8007e60:	4402      	add	r2, r0
 8007e62:	4603      	mov	r3, r0
 8007e64:	4293      	cmp	r3, r2
 8007e66:	d100      	bne.n	8007e6a <memset+0xa>
 8007e68:	4770      	bx	lr
 8007e6a:	f803 1b01 	strb.w	r1, [r3], #1
 8007e6e:	e7f9      	b.n	8007e64 <memset+0x4>

08007e70 <iprintf>:
 8007e70:	b40f      	push	{r0, r1, r2, r3}
 8007e72:	4b0a      	ldr	r3, [pc, #40]	; (8007e9c <iprintf+0x2c>)
 8007e74:	b513      	push	{r0, r1, r4, lr}
 8007e76:	681c      	ldr	r4, [r3, #0]
 8007e78:	b124      	cbz	r4, 8007e84 <iprintf+0x14>
 8007e7a:	69a3      	ldr	r3, [r4, #24]
 8007e7c:	b913      	cbnz	r3, 8007e84 <iprintf+0x14>
 8007e7e:	4620      	mov	r0, r4
 8007e80:	f000 fa5e 	bl	8008340 <__sinit>
 8007e84:	ab05      	add	r3, sp, #20
 8007e86:	9a04      	ldr	r2, [sp, #16]
 8007e88:	68a1      	ldr	r1, [r4, #8]
 8007e8a:	9301      	str	r3, [sp, #4]
 8007e8c:	4620      	mov	r0, r4
 8007e8e:	f000 fc2f 	bl	80086f0 <_vfiprintf_r>
 8007e92:	b002      	add	sp, #8
 8007e94:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8007e98:	b004      	add	sp, #16
 8007e9a:	4770      	bx	lr
 8007e9c:	200000a0 	.word	0x200000a0

08007ea0 <_puts_r>:
 8007ea0:	b570      	push	{r4, r5, r6, lr}
 8007ea2:	460e      	mov	r6, r1
 8007ea4:	4605      	mov	r5, r0
 8007ea6:	b118      	cbz	r0, 8007eb0 <_puts_r+0x10>
 8007ea8:	6983      	ldr	r3, [r0, #24]
 8007eaa:	b90b      	cbnz	r3, 8007eb0 <_puts_r+0x10>
 8007eac:	f000 fa48 	bl	8008340 <__sinit>
 8007eb0:	69ab      	ldr	r3, [r5, #24]
 8007eb2:	68ac      	ldr	r4, [r5, #8]
 8007eb4:	b913      	cbnz	r3, 8007ebc <_puts_r+0x1c>
 8007eb6:	4628      	mov	r0, r5
 8007eb8:	f000 fa42 	bl	8008340 <__sinit>
 8007ebc:	4b2c      	ldr	r3, [pc, #176]	; (8007f70 <_puts_r+0xd0>)
 8007ebe:	429c      	cmp	r4, r3
 8007ec0:	d120      	bne.n	8007f04 <_puts_r+0x64>
 8007ec2:	686c      	ldr	r4, [r5, #4]
 8007ec4:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8007ec6:	07db      	lsls	r3, r3, #31
 8007ec8:	d405      	bmi.n	8007ed6 <_puts_r+0x36>
 8007eca:	89a3      	ldrh	r3, [r4, #12]
 8007ecc:	0598      	lsls	r0, r3, #22
 8007ece:	d402      	bmi.n	8007ed6 <_puts_r+0x36>
 8007ed0:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8007ed2:	f000 fad3 	bl	800847c <__retarget_lock_acquire_recursive>
 8007ed6:	89a3      	ldrh	r3, [r4, #12]
 8007ed8:	0719      	lsls	r1, r3, #28
 8007eda:	d51d      	bpl.n	8007f18 <_puts_r+0x78>
 8007edc:	6923      	ldr	r3, [r4, #16]
 8007ede:	b1db      	cbz	r3, 8007f18 <_puts_r+0x78>
 8007ee0:	3e01      	subs	r6, #1
 8007ee2:	68a3      	ldr	r3, [r4, #8]
 8007ee4:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 8007ee8:	3b01      	subs	r3, #1
 8007eea:	60a3      	str	r3, [r4, #8]
 8007eec:	bb39      	cbnz	r1, 8007f3e <_puts_r+0x9e>
 8007eee:	2b00      	cmp	r3, #0
 8007ef0:	da38      	bge.n	8007f64 <_puts_r+0xc4>
 8007ef2:	4622      	mov	r2, r4
 8007ef4:	210a      	movs	r1, #10
 8007ef6:	4628      	mov	r0, r5
 8007ef8:	f000 f848 	bl	8007f8c <__swbuf_r>
 8007efc:	3001      	adds	r0, #1
 8007efe:	d011      	beq.n	8007f24 <_puts_r+0x84>
 8007f00:	250a      	movs	r5, #10
 8007f02:	e011      	b.n	8007f28 <_puts_r+0x88>
 8007f04:	4b1b      	ldr	r3, [pc, #108]	; (8007f74 <_puts_r+0xd4>)
 8007f06:	429c      	cmp	r4, r3
 8007f08:	d101      	bne.n	8007f0e <_puts_r+0x6e>
 8007f0a:	68ac      	ldr	r4, [r5, #8]
 8007f0c:	e7da      	b.n	8007ec4 <_puts_r+0x24>
 8007f0e:	4b1a      	ldr	r3, [pc, #104]	; (8007f78 <_puts_r+0xd8>)
 8007f10:	429c      	cmp	r4, r3
 8007f12:	bf08      	it	eq
 8007f14:	68ec      	ldreq	r4, [r5, #12]
 8007f16:	e7d5      	b.n	8007ec4 <_puts_r+0x24>
 8007f18:	4621      	mov	r1, r4
 8007f1a:	4628      	mov	r0, r5
 8007f1c:	f000 f888 	bl	8008030 <__swsetup_r>
 8007f20:	2800      	cmp	r0, #0
 8007f22:	d0dd      	beq.n	8007ee0 <_puts_r+0x40>
 8007f24:	f04f 35ff 	mov.w	r5, #4294967295
 8007f28:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8007f2a:	07da      	lsls	r2, r3, #31
 8007f2c:	d405      	bmi.n	8007f3a <_puts_r+0x9a>
 8007f2e:	89a3      	ldrh	r3, [r4, #12]
 8007f30:	059b      	lsls	r3, r3, #22
 8007f32:	d402      	bmi.n	8007f3a <_puts_r+0x9a>
 8007f34:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8007f36:	f000 faa2 	bl	800847e <__retarget_lock_release_recursive>
 8007f3a:	4628      	mov	r0, r5
 8007f3c:	bd70      	pop	{r4, r5, r6, pc}
 8007f3e:	2b00      	cmp	r3, #0
 8007f40:	da04      	bge.n	8007f4c <_puts_r+0xac>
 8007f42:	69a2      	ldr	r2, [r4, #24]
 8007f44:	429a      	cmp	r2, r3
 8007f46:	dc06      	bgt.n	8007f56 <_puts_r+0xb6>
 8007f48:	290a      	cmp	r1, #10
 8007f4a:	d004      	beq.n	8007f56 <_puts_r+0xb6>
 8007f4c:	6823      	ldr	r3, [r4, #0]
 8007f4e:	1c5a      	adds	r2, r3, #1
 8007f50:	6022      	str	r2, [r4, #0]
 8007f52:	7019      	strb	r1, [r3, #0]
 8007f54:	e7c5      	b.n	8007ee2 <_puts_r+0x42>
 8007f56:	4622      	mov	r2, r4
 8007f58:	4628      	mov	r0, r5
 8007f5a:	f000 f817 	bl	8007f8c <__swbuf_r>
 8007f5e:	3001      	adds	r0, #1
 8007f60:	d1bf      	bne.n	8007ee2 <_puts_r+0x42>
 8007f62:	e7df      	b.n	8007f24 <_puts_r+0x84>
 8007f64:	6823      	ldr	r3, [r4, #0]
 8007f66:	250a      	movs	r5, #10
 8007f68:	1c5a      	adds	r2, r3, #1
 8007f6a:	6022      	str	r2, [r4, #0]
 8007f6c:	701d      	strb	r5, [r3, #0]
 8007f6e:	e7db      	b.n	8007f28 <_puts_r+0x88>
 8007f70:	08008f78 	.word	0x08008f78
 8007f74:	08008f98 	.word	0x08008f98
 8007f78:	08008f58 	.word	0x08008f58

08007f7c <puts>:
 8007f7c:	4b02      	ldr	r3, [pc, #8]	; (8007f88 <puts+0xc>)
 8007f7e:	4601      	mov	r1, r0
 8007f80:	6818      	ldr	r0, [r3, #0]
 8007f82:	f7ff bf8d 	b.w	8007ea0 <_puts_r>
 8007f86:	bf00      	nop
 8007f88:	200000a0 	.word	0x200000a0

08007f8c <__swbuf_r>:
 8007f8c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007f8e:	460e      	mov	r6, r1
 8007f90:	4614      	mov	r4, r2
 8007f92:	4605      	mov	r5, r0
 8007f94:	b118      	cbz	r0, 8007f9e <__swbuf_r+0x12>
 8007f96:	6983      	ldr	r3, [r0, #24]
 8007f98:	b90b      	cbnz	r3, 8007f9e <__swbuf_r+0x12>
 8007f9a:	f000 f9d1 	bl	8008340 <__sinit>
 8007f9e:	4b21      	ldr	r3, [pc, #132]	; (8008024 <__swbuf_r+0x98>)
 8007fa0:	429c      	cmp	r4, r3
 8007fa2:	d12b      	bne.n	8007ffc <__swbuf_r+0x70>
 8007fa4:	686c      	ldr	r4, [r5, #4]
 8007fa6:	69a3      	ldr	r3, [r4, #24]
 8007fa8:	60a3      	str	r3, [r4, #8]
 8007faa:	89a3      	ldrh	r3, [r4, #12]
 8007fac:	071a      	lsls	r2, r3, #28
 8007fae:	d52f      	bpl.n	8008010 <__swbuf_r+0x84>
 8007fb0:	6923      	ldr	r3, [r4, #16]
 8007fb2:	b36b      	cbz	r3, 8008010 <__swbuf_r+0x84>
 8007fb4:	6923      	ldr	r3, [r4, #16]
 8007fb6:	6820      	ldr	r0, [r4, #0]
 8007fb8:	1ac0      	subs	r0, r0, r3
 8007fba:	6963      	ldr	r3, [r4, #20]
 8007fbc:	b2f6      	uxtb	r6, r6
 8007fbe:	4283      	cmp	r3, r0
 8007fc0:	4637      	mov	r7, r6
 8007fc2:	dc04      	bgt.n	8007fce <__swbuf_r+0x42>
 8007fc4:	4621      	mov	r1, r4
 8007fc6:	4628      	mov	r0, r5
 8007fc8:	f000 f926 	bl	8008218 <_fflush_r>
 8007fcc:	bb30      	cbnz	r0, 800801c <__swbuf_r+0x90>
 8007fce:	68a3      	ldr	r3, [r4, #8]
 8007fd0:	3b01      	subs	r3, #1
 8007fd2:	60a3      	str	r3, [r4, #8]
 8007fd4:	6823      	ldr	r3, [r4, #0]
 8007fd6:	1c5a      	adds	r2, r3, #1
 8007fd8:	6022      	str	r2, [r4, #0]
 8007fda:	701e      	strb	r6, [r3, #0]
 8007fdc:	6963      	ldr	r3, [r4, #20]
 8007fde:	3001      	adds	r0, #1
 8007fe0:	4283      	cmp	r3, r0
 8007fe2:	d004      	beq.n	8007fee <__swbuf_r+0x62>
 8007fe4:	89a3      	ldrh	r3, [r4, #12]
 8007fe6:	07db      	lsls	r3, r3, #31
 8007fe8:	d506      	bpl.n	8007ff8 <__swbuf_r+0x6c>
 8007fea:	2e0a      	cmp	r6, #10
 8007fec:	d104      	bne.n	8007ff8 <__swbuf_r+0x6c>
 8007fee:	4621      	mov	r1, r4
 8007ff0:	4628      	mov	r0, r5
 8007ff2:	f000 f911 	bl	8008218 <_fflush_r>
 8007ff6:	b988      	cbnz	r0, 800801c <__swbuf_r+0x90>
 8007ff8:	4638      	mov	r0, r7
 8007ffa:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8007ffc:	4b0a      	ldr	r3, [pc, #40]	; (8008028 <__swbuf_r+0x9c>)
 8007ffe:	429c      	cmp	r4, r3
 8008000:	d101      	bne.n	8008006 <__swbuf_r+0x7a>
 8008002:	68ac      	ldr	r4, [r5, #8]
 8008004:	e7cf      	b.n	8007fa6 <__swbuf_r+0x1a>
 8008006:	4b09      	ldr	r3, [pc, #36]	; (800802c <__swbuf_r+0xa0>)
 8008008:	429c      	cmp	r4, r3
 800800a:	bf08      	it	eq
 800800c:	68ec      	ldreq	r4, [r5, #12]
 800800e:	e7ca      	b.n	8007fa6 <__swbuf_r+0x1a>
 8008010:	4621      	mov	r1, r4
 8008012:	4628      	mov	r0, r5
 8008014:	f000 f80c 	bl	8008030 <__swsetup_r>
 8008018:	2800      	cmp	r0, #0
 800801a:	d0cb      	beq.n	8007fb4 <__swbuf_r+0x28>
 800801c:	f04f 37ff 	mov.w	r7, #4294967295
 8008020:	e7ea      	b.n	8007ff8 <__swbuf_r+0x6c>
 8008022:	bf00      	nop
 8008024:	08008f78 	.word	0x08008f78
 8008028:	08008f98 	.word	0x08008f98
 800802c:	08008f58 	.word	0x08008f58

08008030 <__swsetup_r>:
 8008030:	4b32      	ldr	r3, [pc, #200]	; (80080fc <__swsetup_r+0xcc>)
 8008032:	b570      	push	{r4, r5, r6, lr}
 8008034:	681d      	ldr	r5, [r3, #0]
 8008036:	4606      	mov	r6, r0
 8008038:	460c      	mov	r4, r1
 800803a:	b125      	cbz	r5, 8008046 <__swsetup_r+0x16>
 800803c:	69ab      	ldr	r3, [r5, #24]
 800803e:	b913      	cbnz	r3, 8008046 <__swsetup_r+0x16>
 8008040:	4628      	mov	r0, r5
 8008042:	f000 f97d 	bl	8008340 <__sinit>
 8008046:	4b2e      	ldr	r3, [pc, #184]	; (8008100 <__swsetup_r+0xd0>)
 8008048:	429c      	cmp	r4, r3
 800804a:	d10f      	bne.n	800806c <__swsetup_r+0x3c>
 800804c:	686c      	ldr	r4, [r5, #4]
 800804e:	89a3      	ldrh	r3, [r4, #12]
 8008050:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8008054:	0719      	lsls	r1, r3, #28
 8008056:	d42c      	bmi.n	80080b2 <__swsetup_r+0x82>
 8008058:	06dd      	lsls	r5, r3, #27
 800805a:	d411      	bmi.n	8008080 <__swsetup_r+0x50>
 800805c:	2309      	movs	r3, #9
 800805e:	6033      	str	r3, [r6, #0]
 8008060:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8008064:	81a3      	strh	r3, [r4, #12]
 8008066:	f04f 30ff 	mov.w	r0, #4294967295
 800806a:	e03e      	b.n	80080ea <__swsetup_r+0xba>
 800806c:	4b25      	ldr	r3, [pc, #148]	; (8008104 <__swsetup_r+0xd4>)
 800806e:	429c      	cmp	r4, r3
 8008070:	d101      	bne.n	8008076 <__swsetup_r+0x46>
 8008072:	68ac      	ldr	r4, [r5, #8]
 8008074:	e7eb      	b.n	800804e <__swsetup_r+0x1e>
 8008076:	4b24      	ldr	r3, [pc, #144]	; (8008108 <__swsetup_r+0xd8>)
 8008078:	429c      	cmp	r4, r3
 800807a:	bf08      	it	eq
 800807c:	68ec      	ldreq	r4, [r5, #12]
 800807e:	e7e6      	b.n	800804e <__swsetup_r+0x1e>
 8008080:	0758      	lsls	r0, r3, #29
 8008082:	d512      	bpl.n	80080aa <__swsetup_r+0x7a>
 8008084:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8008086:	b141      	cbz	r1, 800809a <__swsetup_r+0x6a>
 8008088:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800808c:	4299      	cmp	r1, r3
 800808e:	d002      	beq.n	8008096 <__swsetup_r+0x66>
 8008090:	4630      	mov	r0, r6
 8008092:	f000 fa59 	bl	8008548 <_free_r>
 8008096:	2300      	movs	r3, #0
 8008098:	6363      	str	r3, [r4, #52]	; 0x34
 800809a:	89a3      	ldrh	r3, [r4, #12]
 800809c:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 80080a0:	81a3      	strh	r3, [r4, #12]
 80080a2:	2300      	movs	r3, #0
 80080a4:	6063      	str	r3, [r4, #4]
 80080a6:	6923      	ldr	r3, [r4, #16]
 80080a8:	6023      	str	r3, [r4, #0]
 80080aa:	89a3      	ldrh	r3, [r4, #12]
 80080ac:	f043 0308 	orr.w	r3, r3, #8
 80080b0:	81a3      	strh	r3, [r4, #12]
 80080b2:	6923      	ldr	r3, [r4, #16]
 80080b4:	b94b      	cbnz	r3, 80080ca <__swsetup_r+0x9a>
 80080b6:	89a3      	ldrh	r3, [r4, #12]
 80080b8:	f403 7320 	and.w	r3, r3, #640	; 0x280
 80080bc:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80080c0:	d003      	beq.n	80080ca <__swsetup_r+0x9a>
 80080c2:	4621      	mov	r1, r4
 80080c4:	4630      	mov	r0, r6
 80080c6:	f000 f9ff 	bl	80084c8 <__smakebuf_r>
 80080ca:	89a0      	ldrh	r0, [r4, #12]
 80080cc:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 80080d0:	f010 0301 	ands.w	r3, r0, #1
 80080d4:	d00a      	beq.n	80080ec <__swsetup_r+0xbc>
 80080d6:	2300      	movs	r3, #0
 80080d8:	60a3      	str	r3, [r4, #8]
 80080da:	6963      	ldr	r3, [r4, #20]
 80080dc:	425b      	negs	r3, r3
 80080de:	61a3      	str	r3, [r4, #24]
 80080e0:	6923      	ldr	r3, [r4, #16]
 80080e2:	b943      	cbnz	r3, 80080f6 <__swsetup_r+0xc6>
 80080e4:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 80080e8:	d1ba      	bne.n	8008060 <__swsetup_r+0x30>
 80080ea:	bd70      	pop	{r4, r5, r6, pc}
 80080ec:	0781      	lsls	r1, r0, #30
 80080ee:	bf58      	it	pl
 80080f0:	6963      	ldrpl	r3, [r4, #20]
 80080f2:	60a3      	str	r3, [r4, #8]
 80080f4:	e7f4      	b.n	80080e0 <__swsetup_r+0xb0>
 80080f6:	2000      	movs	r0, #0
 80080f8:	e7f7      	b.n	80080ea <__swsetup_r+0xba>
 80080fa:	bf00      	nop
 80080fc:	200000a0 	.word	0x200000a0
 8008100:	08008f78 	.word	0x08008f78
 8008104:	08008f98 	.word	0x08008f98
 8008108:	08008f58 	.word	0x08008f58

0800810c <__sflush_r>:
 800810c:	898a      	ldrh	r2, [r1, #12]
 800810e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008112:	4605      	mov	r5, r0
 8008114:	0710      	lsls	r0, r2, #28
 8008116:	460c      	mov	r4, r1
 8008118:	d458      	bmi.n	80081cc <__sflush_r+0xc0>
 800811a:	684b      	ldr	r3, [r1, #4]
 800811c:	2b00      	cmp	r3, #0
 800811e:	dc05      	bgt.n	800812c <__sflush_r+0x20>
 8008120:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8008122:	2b00      	cmp	r3, #0
 8008124:	dc02      	bgt.n	800812c <__sflush_r+0x20>
 8008126:	2000      	movs	r0, #0
 8008128:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800812c:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800812e:	2e00      	cmp	r6, #0
 8008130:	d0f9      	beq.n	8008126 <__sflush_r+0x1a>
 8008132:	2300      	movs	r3, #0
 8008134:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8008138:	682f      	ldr	r7, [r5, #0]
 800813a:	602b      	str	r3, [r5, #0]
 800813c:	d032      	beq.n	80081a4 <__sflush_r+0x98>
 800813e:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8008140:	89a3      	ldrh	r3, [r4, #12]
 8008142:	075a      	lsls	r2, r3, #29
 8008144:	d505      	bpl.n	8008152 <__sflush_r+0x46>
 8008146:	6863      	ldr	r3, [r4, #4]
 8008148:	1ac0      	subs	r0, r0, r3
 800814a:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800814c:	b10b      	cbz	r3, 8008152 <__sflush_r+0x46>
 800814e:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8008150:	1ac0      	subs	r0, r0, r3
 8008152:	2300      	movs	r3, #0
 8008154:	4602      	mov	r2, r0
 8008156:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8008158:	6a21      	ldr	r1, [r4, #32]
 800815a:	4628      	mov	r0, r5
 800815c:	47b0      	blx	r6
 800815e:	1c43      	adds	r3, r0, #1
 8008160:	89a3      	ldrh	r3, [r4, #12]
 8008162:	d106      	bne.n	8008172 <__sflush_r+0x66>
 8008164:	6829      	ldr	r1, [r5, #0]
 8008166:	291d      	cmp	r1, #29
 8008168:	d82c      	bhi.n	80081c4 <__sflush_r+0xb8>
 800816a:	4a2a      	ldr	r2, [pc, #168]	; (8008214 <__sflush_r+0x108>)
 800816c:	40ca      	lsrs	r2, r1
 800816e:	07d6      	lsls	r6, r2, #31
 8008170:	d528      	bpl.n	80081c4 <__sflush_r+0xb8>
 8008172:	2200      	movs	r2, #0
 8008174:	6062      	str	r2, [r4, #4]
 8008176:	04d9      	lsls	r1, r3, #19
 8008178:	6922      	ldr	r2, [r4, #16]
 800817a:	6022      	str	r2, [r4, #0]
 800817c:	d504      	bpl.n	8008188 <__sflush_r+0x7c>
 800817e:	1c42      	adds	r2, r0, #1
 8008180:	d101      	bne.n	8008186 <__sflush_r+0x7a>
 8008182:	682b      	ldr	r3, [r5, #0]
 8008184:	b903      	cbnz	r3, 8008188 <__sflush_r+0x7c>
 8008186:	6560      	str	r0, [r4, #84]	; 0x54
 8008188:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800818a:	602f      	str	r7, [r5, #0]
 800818c:	2900      	cmp	r1, #0
 800818e:	d0ca      	beq.n	8008126 <__sflush_r+0x1a>
 8008190:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8008194:	4299      	cmp	r1, r3
 8008196:	d002      	beq.n	800819e <__sflush_r+0x92>
 8008198:	4628      	mov	r0, r5
 800819a:	f000 f9d5 	bl	8008548 <_free_r>
 800819e:	2000      	movs	r0, #0
 80081a0:	6360      	str	r0, [r4, #52]	; 0x34
 80081a2:	e7c1      	b.n	8008128 <__sflush_r+0x1c>
 80081a4:	6a21      	ldr	r1, [r4, #32]
 80081a6:	2301      	movs	r3, #1
 80081a8:	4628      	mov	r0, r5
 80081aa:	47b0      	blx	r6
 80081ac:	1c41      	adds	r1, r0, #1
 80081ae:	d1c7      	bne.n	8008140 <__sflush_r+0x34>
 80081b0:	682b      	ldr	r3, [r5, #0]
 80081b2:	2b00      	cmp	r3, #0
 80081b4:	d0c4      	beq.n	8008140 <__sflush_r+0x34>
 80081b6:	2b1d      	cmp	r3, #29
 80081b8:	d001      	beq.n	80081be <__sflush_r+0xb2>
 80081ba:	2b16      	cmp	r3, #22
 80081bc:	d101      	bne.n	80081c2 <__sflush_r+0xb6>
 80081be:	602f      	str	r7, [r5, #0]
 80081c0:	e7b1      	b.n	8008126 <__sflush_r+0x1a>
 80081c2:	89a3      	ldrh	r3, [r4, #12]
 80081c4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80081c8:	81a3      	strh	r3, [r4, #12]
 80081ca:	e7ad      	b.n	8008128 <__sflush_r+0x1c>
 80081cc:	690f      	ldr	r7, [r1, #16]
 80081ce:	2f00      	cmp	r7, #0
 80081d0:	d0a9      	beq.n	8008126 <__sflush_r+0x1a>
 80081d2:	0793      	lsls	r3, r2, #30
 80081d4:	680e      	ldr	r6, [r1, #0]
 80081d6:	bf08      	it	eq
 80081d8:	694b      	ldreq	r3, [r1, #20]
 80081da:	600f      	str	r7, [r1, #0]
 80081dc:	bf18      	it	ne
 80081de:	2300      	movne	r3, #0
 80081e0:	eba6 0807 	sub.w	r8, r6, r7
 80081e4:	608b      	str	r3, [r1, #8]
 80081e6:	f1b8 0f00 	cmp.w	r8, #0
 80081ea:	dd9c      	ble.n	8008126 <__sflush_r+0x1a>
 80081ec:	6a21      	ldr	r1, [r4, #32]
 80081ee:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 80081f0:	4643      	mov	r3, r8
 80081f2:	463a      	mov	r2, r7
 80081f4:	4628      	mov	r0, r5
 80081f6:	47b0      	blx	r6
 80081f8:	2800      	cmp	r0, #0
 80081fa:	dc06      	bgt.n	800820a <__sflush_r+0xfe>
 80081fc:	89a3      	ldrh	r3, [r4, #12]
 80081fe:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8008202:	81a3      	strh	r3, [r4, #12]
 8008204:	f04f 30ff 	mov.w	r0, #4294967295
 8008208:	e78e      	b.n	8008128 <__sflush_r+0x1c>
 800820a:	4407      	add	r7, r0
 800820c:	eba8 0800 	sub.w	r8, r8, r0
 8008210:	e7e9      	b.n	80081e6 <__sflush_r+0xda>
 8008212:	bf00      	nop
 8008214:	20400001 	.word	0x20400001

08008218 <_fflush_r>:
 8008218:	b538      	push	{r3, r4, r5, lr}
 800821a:	690b      	ldr	r3, [r1, #16]
 800821c:	4605      	mov	r5, r0
 800821e:	460c      	mov	r4, r1
 8008220:	b913      	cbnz	r3, 8008228 <_fflush_r+0x10>
 8008222:	2500      	movs	r5, #0
 8008224:	4628      	mov	r0, r5
 8008226:	bd38      	pop	{r3, r4, r5, pc}
 8008228:	b118      	cbz	r0, 8008232 <_fflush_r+0x1a>
 800822a:	6983      	ldr	r3, [r0, #24]
 800822c:	b90b      	cbnz	r3, 8008232 <_fflush_r+0x1a>
 800822e:	f000 f887 	bl	8008340 <__sinit>
 8008232:	4b14      	ldr	r3, [pc, #80]	; (8008284 <_fflush_r+0x6c>)
 8008234:	429c      	cmp	r4, r3
 8008236:	d11b      	bne.n	8008270 <_fflush_r+0x58>
 8008238:	686c      	ldr	r4, [r5, #4]
 800823a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800823e:	2b00      	cmp	r3, #0
 8008240:	d0ef      	beq.n	8008222 <_fflush_r+0xa>
 8008242:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8008244:	07d0      	lsls	r0, r2, #31
 8008246:	d404      	bmi.n	8008252 <_fflush_r+0x3a>
 8008248:	0599      	lsls	r1, r3, #22
 800824a:	d402      	bmi.n	8008252 <_fflush_r+0x3a>
 800824c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800824e:	f000 f915 	bl	800847c <__retarget_lock_acquire_recursive>
 8008252:	4628      	mov	r0, r5
 8008254:	4621      	mov	r1, r4
 8008256:	f7ff ff59 	bl	800810c <__sflush_r>
 800825a:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800825c:	07da      	lsls	r2, r3, #31
 800825e:	4605      	mov	r5, r0
 8008260:	d4e0      	bmi.n	8008224 <_fflush_r+0xc>
 8008262:	89a3      	ldrh	r3, [r4, #12]
 8008264:	059b      	lsls	r3, r3, #22
 8008266:	d4dd      	bmi.n	8008224 <_fflush_r+0xc>
 8008268:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800826a:	f000 f908 	bl	800847e <__retarget_lock_release_recursive>
 800826e:	e7d9      	b.n	8008224 <_fflush_r+0xc>
 8008270:	4b05      	ldr	r3, [pc, #20]	; (8008288 <_fflush_r+0x70>)
 8008272:	429c      	cmp	r4, r3
 8008274:	d101      	bne.n	800827a <_fflush_r+0x62>
 8008276:	68ac      	ldr	r4, [r5, #8]
 8008278:	e7df      	b.n	800823a <_fflush_r+0x22>
 800827a:	4b04      	ldr	r3, [pc, #16]	; (800828c <_fflush_r+0x74>)
 800827c:	429c      	cmp	r4, r3
 800827e:	bf08      	it	eq
 8008280:	68ec      	ldreq	r4, [r5, #12]
 8008282:	e7da      	b.n	800823a <_fflush_r+0x22>
 8008284:	08008f78 	.word	0x08008f78
 8008288:	08008f98 	.word	0x08008f98
 800828c:	08008f58 	.word	0x08008f58

08008290 <std>:
 8008290:	2300      	movs	r3, #0
 8008292:	b510      	push	{r4, lr}
 8008294:	4604      	mov	r4, r0
 8008296:	e9c0 3300 	strd	r3, r3, [r0]
 800829a:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800829e:	6083      	str	r3, [r0, #8]
 80082a0:	8181      	strh	r1, [r0, #12]
 80082a2:	6643      	str	r3, [r0, #100]	; 0x64
 80082a4:	81c2      	strh	r2, [r0, #14]
 80082a6:	6183      	str	r3, [r0, #24]
 80082a8:	4619      	mov	r1, r3
 80082aa:	2208      	movs	r2, #8
 80082ac:	305c      	adds	r0, #92	; 0x5c
 80082ae:	f7ff fdd7 	bl	8007e60 <memset>
 80082b2:	4b05      	ldr	r3, [pc, #20]	; (80082c8 <std+0x38>)
 80082b4:	6263      	str	r3, [r4, #36]	; 0x24
 80082b6:	4b05      	ldr	r3, [pc, #20]	; (80082cc <std+0x3c>)
 80082b8:	62a3      	str	r3, [r4, #40]	; 0x28
 80082ba:	4b05      	ldr	r3, [pc, #20]	; (80082d0 <std+0x40>)
 80082bc:	62e3      	str	r3, [r4, #44]	; 0x2c
 80082be:	4b05      	ldr	r3, [pc, #20]	; (80082d4 <std+0x44>)
 80082c0:	6224      	str	r4, [r4, #32]
 80082c2:	6323      	str	r3, [r4, #48]	; 0x30
 80082c4:	bd10      	pop	{r4, pc}
 80082c6:	bf00      	nop
 80082c8:	08008c99 	.word	0x08008c99
 80082cc:	08008cbb 	.word	0x08008cbb
 80082d0:	08008cf3 	.word	0x08008cf3
 80082d4:	08008d17 	.word	0x08008d17

080082d8 <_cleanup_r>:
 80082d8:	4901      	ldr	r1, [pc, #4]	; (80082e0 <_cleanup_r+0x8>)
 80082da:	f000 b8af 	b.w	800843c <_fwalk_reent>
 80082de:	bf00      	nop
 80082e0:	08008219 	.word	0x08008219

080082e4 <__sfmoreglue>:
 80082e4:	b570      	push	{r4, r5, r6, lr}
 80082e6:	1e4a      	subs	r2, r1, #1
 80082e8:	2568      	movs	r5, #104	; 0x68
 80082ea:	4355      	muls	r5, r2
 80082ec:	460e      	mov	r6, r1
 80082ee:	f105 0174 	add.w	r1, r5, #116	; 0x74
 80082f2:	f000 f979 	bl	80085e8 <_malloc_r>
 80082f6:	4604      	mov	r4, r0
 80082f8:	b140      	cbz	r0, 800830c <__sfmoreglue+0x28>
 80082fa:	2100      	movs	r1, #0
 80082fc:	e9c0 1600 	strd	r1, r6, [r0]
 8008300:	300c      	adds	r0, #12
 8008302:	60a0      	str	r0, [r4, #8]
 8008304:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8008308:	f7ff fdaa 	bl	8007e60 <memset>
 800830c:	4620      	mov	r0, r4
 800830e:	bd70      	pop	{r4, r5, r6, pc}

08008310 <__sfp_lock_acquire>:
 8008310:	4801      	ldr	r0, [pc, #4]	; (8008318 <__sfp_lock_acquire+0x8>)
 8008312:	f000 b8b3 	b.w	800847c <__retarget_lock_acquire_recursive>
 8008316:	bf00      	nop
 8008318:	200025b0 	.word	0x200025b0

0800831c <__sfp_lock_release>:
 800831c:	4801      	ldr	r0, [pc, #4]	; (8008324 <__sfp_lock_release+0x8>)
 800831e:	f000 b8ae 	b.w	800847e <__retarget_lock_release_recursive>
 8008322:	bf00      	nop
 8008324:	200025b0 	.word	0x200025b0

08008328 <__sinit_lock_acquire>:
 8008328:	4801      	ldr	r0, [pc, #4]	; (8008330 <__sinit_lock_acquire+0x8>)
 800832a:	f000 b8a7 	b.w	800847c <__retarget_lock_acquire_recursive>
 800832e:	bf00      	nop
 8008330:	200025ab 	.word	0x200025ab

08008334 <__sinit_lock_release>:
 8008334:	4801      	ldr	r0, [pc, #4]	; (800833c <__sinit_lock_release+0x8>)
 8008336:	f000 b8a2 	b.w	800847e <__retarget_lock_release_recursive>
 800833a:	bf00      	nop
 800833c:	200025ab 	.word	0x200025ab

08008340 <__sinit>:
 8008340:	b510      	push	{r4, lr}
 8008342:	4604      	mov	r4, r0
 8008344:	f7ff fff0 	bl	8008328 <__sinit_lock_acquire>
 8008348:	69a3      	ldr	r3, [r4, #24]
 800834a:	b11b      	cbz	r3, 8008354 <__sinit+0x14>
 800834c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8008350:	f7ff bff0 	b.w	8008334 <__sinit_lock_release>
 8008354:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8008358:	6523      	str	r3, [r4, #80]	; 0x50
 800835a:	4b13      	ldr	r3, [pc, #76]	; (80083a8 <__sinit+0x68>)
 800835c:	4a13      	ldr	r2, [pc, #76]	; (80083ac <__sinit+0x6c>)
 800835e:	681b      	ldr	r3, [r3, #0]
 8008360:	62a2      	str	r2, [r4, #40]	; 0x28
 8008362:	42a3      	cmp	r3, r4
 8008364:	bf04      	itt	eq
 8008366:	2301      	moveq	r3, #1
 8008368:	61a3      	streq	r3, [r4, #24]
 800836a:	4620      	mov	r0, r4
 800836c:	f000 f820 	bl	80083b0 <__sfp>
 8008370:	6060      	str	r0, [r4, #4]
 8008372:	4620      	mov	r0, r4
 8008374:	f000 f81c 	bl	80083b0 <__sfp>
 8008378:	60a0      	str	r0, [r4, #8]
 800837a:	4620      	mov	r0, r4
 800837c:	f000 f818 	bl	80083b0 <__sfp>
 8008380:	2200      	movs	r2, #0
 8008382:	60e0      	str	r0, [r4, #12]
 8008384:	2104      	movs	r1, #4
 8008386:	6860      	ldr	r0, [r4, #4]
 8008388:	f7ff ff82 	bl	8008290 <std>
 800838c:	68a0      	ldr	r0, [r4, #8]
 800838e:	2201      	movs	r2, #1
 8008390:	2109      	movs	r1, #9
 8008392:	f7ff ff7d 	bl	8008290 <std>
 8008396:	68e0      	ldr	r0, [r4, #12]
 8008398:	2202      	movs	r2, #2
 800839a:	2112      	movs	r1, #18
 800839c:	f7ff ff78 	bl	8008290 <std>
 80083a0:	2301      	movs	r3, #1
 80083a2:	61a3      	str	r3, [r4, #24]
 80083a4:	e7d2      	b.n	800834c <__sinit+0xc>
 80083a6:	bf00      	nop
 80083a8:	08008f54 	.word	0x08008f54
 80083ac:	080082d9 	.word	0x080082d9

080083b0 <__sfp>:
 80083b0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80083b2:	4607      	mov	r7, r0
 80083b4:	f7ff ffac 	bl	8008310 <__sfp_lock_acquire>
 80083b8:	4b1e      	ldr	r3, [pc, #120]	; (8008434 <__sfp+0x84>)
 80083ba:	681e      	ldr	r6, [r3, #0]
 80083bc:	69b3      	ldr	r3, [r6, #24]
 80083be:	b913      	cbnz	r3, 80083c6 <__sfp+0x16>
 80083c0:	4630      	mov	r0, r6
 80083c2:	f7ff ffbd 	bl	8008340 <__sinit>
 80083c6:	3648      	adds	r6, #72	; 0x48
 80083c8:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 80083cc:	3b01      	subs	r3, #1
 80083ce:	d503      	bpl.n	80083d8 <__sfp+0x28>
 80083d0:	6833      	ldr	r3, [r6, #0]
 80083d2:	b30b      	cbz	r3, 8008418 <__sfp+0x68>
 80083d4:	6836      	ldr	r6, [r6, #0]
 80083d6:	e7f7      	b.n	80083c8 <__sfp+0x18>
 80083d8:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 80083dc:	b9d5      	cbnz	r5, 8008414 <__sfp+0x64>
 80083de:	4b16      	ldr	r3, [pc, #88]	; (8008438 <__sfp+0x88>)
 80083e0:	60e3      	str	r3, [r4, #12]
 80083e2:	f104 0058 	add.w	r0, r4, #88	; 0x58
 80083e6:	6665      	str	r5, [r4, #100]	; 0x64
 80083e8:	f000 f847 	bl	800847a <__retarget_lock_init_recursive>
 80083ec:	f7ff ff96 	bl	800831c <__sfp_lock_release>
 80083f0:	e9c4 5501 	strd	r5, r5, [r4, #4]
 80083f4:	e9c4 5504 	strd	r5, r5, [r4, #16]
 80083f8:	6025      	str	r5, [r4, #0]
 80083fa:	61a5      	str	r5, [r4, #24]
 80083fc:	2208      	movs	r2, #8
 80083fe:	4629      	mov	r1, r5
 8008400:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8008404:	f7ff fd2c 	bl	8007e60 <memset>
 8008408:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 800840c:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8008410:	4620      	mov	r0, r4
 8008412:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8008414:	3468      	adds	r4, #104	; 0x68
 8008416:	e7d9      	b.n	80083cc <__sfp+0x1c>
 8008418:	2104      	movs	r1, #4
 800841a:	4638      	mov	r0, r7
 800841c:	f7ff ff62 	bl	80082e4 <__sfmoreglue>
 8008420:	4604      	mov	r4, r0
 8008422:	6030      	str	r0, [r6, #0]
 8008424:	2800      	cmp	r0, #0
 8008426:	d1d5      	bne.n	80083d4 <__sfp+0x24>
 8008428:	f7ff ff78 	bl	800831c <__sfp_lock_release>
 800842c:	230c      	movs	r3, #12
 800842e:	603b      	str	r3, [r7, #0]
 8008430:	e7ee      	b.n	8008410 <__sfp+0x60>
 8008432:	bf00      	nop
 8008434:	08008f54 	.word	0x08008f54
 8008438:	ffff0001 	.word	0xffff0001

0800843c <_fwalk_reent>:
 800843c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8008440:	4606      	mov	r6, r0
 8008442:	4688      	mov	r8, r1
 8008444:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8008448:	2700      	movs	r7, #0
 800844a:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800844e:	f1b9 0901 	subs.w	r9, r9, #1
 8008452:	d505      	bpl.n	8008460 <_fwalk_reent+0x24>
 8008454:	6824      	ldr	r4, [r4, #0]
 8008456:	2c00      	cmp	r4, #0
 8008458:	d1f7      	bne.n	800844a <_fwalk_reent+0xe>
 800845a:	4638      	mov	r0, r7
 800845c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8008460:	89ab      	ldrh	r3, [r5, #12]
 8008462:	2b01      	cmp	r3, #1
 8008464:	d907      	bls.n	8008476 <_fwalk_reent+0x3a>
 8008466:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800846a:	3301      	adds	r3, #1
 800846c:	d003      	beq.n	8008476 <_fwalk_reent+0x3a>
 800846e:	4629      	mov	r1, r5
 8008470:	4630      	mov	r0, r6
 8008472:	47c0      	blx	r8
 8008474:	4307      	orrs	r7, r0
 8008476:	3568      	adds	r5, #104	; 0x68
 8008478:	e7e9      	b.n	800844e <_fwalk_reent+0x12>

0800847a <__retarget_lock_init_recursive>:
 800847a:	4770      	bx	lr

0800847c <__retarget_lock_acquire_recursive>:
 800847c:	4770      	bx	lr

0800847e <__retarget_lock_release_recursive>:
 800847e:	4770      	bx	lr

08008480 <__swhatbuf_r>:
 8008480:	b570      	push	{r4, r5, r6, lr}
 8008482:	460e      	mov	r6, r1
 8008484:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008488:	2900      	cmp	r1, #0
 800848a:	b096      	sub	sp, #88	; 0x58
 800848c:	4614      	mov	r4, r2
 800848e:	461d      	mov	r5, r3
 8008490:	da07      	bge.n	80084a2 <__swhatbuf_r+0x22>
 8008492:	2300      	movs	r3, #0
 8008494:	602b      	str	r3, [r5, #0]
 8008496:	89b3      	ldrh	r3, [r6, #12]
 8008498:	061a      	lsls	r2, r3, #24
 800849a:	d410      	bmi.n	80084be <__swhatbuf_r+0x3e>
 800849c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80084a0:	e00e      	b.n	80084c0 <__swhatbuf_r+0x40>
 80084a2:	466a      	mov	r2, sp
 80084a4:	f000 fc5e 	bl	8008d64 <_fstat_r>
 80084a8:	2800      	cmp	r0, #0
 80084aa:	dbf2      	blt.n	8008492 <__swhatbuf_r+0x12>
 80084ac:	9a01      	ldr	r2, [sp, #4]
 80084ae:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 80084b2:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 80084b6:	425a      	negs	r2, r3
 80084b8:	415a      	adcs	r2, r3
 80084ba:	602a      	str	r2, [r5, #0]
 80084bc:	e7ee      	b.n	800849c <__swhatbuf_r+0x1c>
 80084be:	2340      	movs	r3, #64	; 0x40
 80084c0:	2000      	movs	r0, #0
 80084c2:	6023      	str	r3, [r4, #0]
 80084c4:	b016      	add	sp, #88	; 0x58
 80084c6:	bd70      	pop	{r4, r5, r6, pc}

080084c8 <__smakebuf_r>:
 80084c8:	898b      	ldrh	r3, [r1, #12]
 80084ca:	b573      	push	{r0, r1, r4, r5, r6, lr}
 80084cc:	079d      	lsls	r5, r3, #30
 80084ce:	4606      	mov	r6, r0
 80084d0:	460c      	mov	r4, r1
 80084d2:	d507      	bpl.n	80084e4 <__smakebuf_r+0x1c>
 80084d4:	f104 0347 	add.w	r3, r4, #71	; 0x47
 80084d8:	6023      	str	r3, [r4, #0]
 80084da:	6123      	str	r3, [r4, #16]
 80084dc:	2301      	movs	r3, #1
 80084de:	6163      	str	r3, [r4, #20]
 80084e0:	b002      	add	sp, #8
 80084e2:	bd70      	pop	{r4, r5, r6, pc}
 80084e4:	ab01      	add	r3, sp, #4
 80084e6:	466a      	mov	r2, sp
 80084e8:	f7ff ffca 	bl	8008480 <__swhatbuf_r>
 80084ec:	9900      	ldr	r1, [sp, #0]
 80084ee:	4605      	mov	r5, r0
 80084f0:	4630      	mov	r0, r6
 80084f2:	f000 f879 	bl	80085e8 <_malloc_r>
 80084f6:	b948      	cbnz	r0, 800850c <__smakebuf_r+0x44>
 80084f8:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80084fc:	059a      	lsls	r2, r3, #22
 80084fe:	d4ef      	bmi.n	80084e0 <__smakebuf_r+0x18>
 8008500:	f023 0303 	bic.w	r3, r3, #3
 8008504:	f043 0302 	orr.w	r3, r3, #2
 8008508:	81a3      	strh	r3, [r4, #12]
 800850a:	e7e3      	b.n	80084d4 <__smakebuf_r+0xc>
 800850c:	4b0d      	ldr	r3, [pc, #52]	; (8008544 <__smakebuf_r+0x7c>)
 800850e:	62b3      	str	r3, [r6, #40]	; 0x28
 8008510:	89a3      	ldrh	r3, [r4, #12]
 8008512:	6020      	str	r0, [r4, #0]
 8008514:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8008518:	81a3      	strh	r3, [r4, #12]
 800851a:	9b00      	ldr	r3, [sp, #0]
 800851c:	6163      	str	r3, [r4, #20]
 800851e:	9b01      	ldr	r3, [sp, #4]
 8008520:	6120      	str	r0, [r4, #16]
 8008522:	b15b      	cbz	r3, 800853c <__smakebuf_r+0x74>
 8008524:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8008528:	4630      	mov	r0, r6
 800852a:	f000 fc2d 	bl	8008d88 <_isatty_r>
 800852e:	b128      	cbz	r0, 800853c <__smakebuf_r+0x74>
 8008530:	89a3      	ldrh	r3, [r4, #12]
 8008532:	f023 0303 	bic.w	r3, r3, #3
 8008536:	f043 0301 	orr.w	r3, r3, #1
 800853a:	81a3      	strh	r3, [r4, #12]
 800853c:	89a0      	ldrh	r0, [r4, #12]
 800853e:	4305      	orrs	r5, r0
 8008540:	81a5      	strh	r5, [r4, #12]
 8008542:	e7cd      	b.n	80084e0 <__smakebuf_r+0x18>
 8008544:	080082d9 	.word	0x080082d9

08008548 <_free_r>:
 8008548:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800854a:	2900      	cmp	r1, #0
 800854c:	d048      	beq.n	80085e0 <_free_r+0x98>
 800854e:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8008552:	9001      	str	r0, [sp, #4]
 8008554:	2b00      	cmp	r3, #0
 8008556:	f1a1 0404 	sub.w	r4, r1, #4
 800855a:	bfb8      	it	lt
 800855c:	18e4      	addlt	r4, r4, r3
 800855e:	f000 fc35 	bl	8008dcc <__malloc_lock>
 8008562:	4a20      	ldr	r2, [pc, #128]	; (80085e4 <_free_r+0x9c>)
 8008564:	9801      	ldr	r0, [sp, #4]
 8008566:	6813      	ldr	r3, [r2, #0]
 8008568:	4615      	mov	r5, r2
 800856a:	b933      	cbnz	r3, 800857a <_free_r+0x32>
 800856c:	6063      	str	r3, [r4, #4]
 800856e:	6014      	str	r4, [r2, #0]
 8008570:	b003      	add	sp, #12
 8008572:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8008576:	f000 bc2f 	b.w	8008dd8 <__malloc_unlock>
 800857a:	42a3      	cmp	r3, r4
 800857c:	d90b      	bls.n	8008596 <_free_r+0x4e>
 800857e:	6821      	ldr	r1, [r4, #0]
 8008580:	1862      	adds	r2, r4, r1
 8008582:	4293      	cmp	r3, r2
 8008584:	bf04      	itt	eq
 8008586:	681a      	ldreq	r2, [r3, #0]
 8008588:	685b      	ldreq	r3, [r3, #4]
 800858a:	6063      	str	r3, [r4, #4]
 800858c:	bf04      	itt	eq
 800858e:	1852      	addeq	r2, r2, r1
 8008590:	6022      	streq	r2, [r4, #0]
 8008592:	602c      	str	r4, [r5, #0]
 8008594:	e7ec      	b.n	8008570 <_free_r+0x28>
 8008596:	461a      	mov	r2, r3
 8008598:	685b      	ldr	r3, [r3, #4]
 800859a:	b10b      	cbz	r3, 80085a0 <_free_r+0x58>
 800859c:	42a3      	cmp	r3, r4
 800859e:	d9fa      	bls.n	8008596 <_free_r+0x4e>
 80085a0:	6811      	ldr	r1, [r2, #0]
 80085a2:	1855      	adds	r5, r2, r1
 80085a4:	42a5      	cmp	r5, r4
 80085a6:	d10b      	bne.n	80085c0 <_free_r+0x78>
 80085a8:	6824      	ldr	r4, [r4, #0]
 80085aa:	4421      	add	r1, r4
 80085ac:	1854      	adds	r4, r2, r1
 80085ae:	42a3      	cmp	r3, r4
 80085b0:	6011      	str	r1, [r2, #0]
 80085b2:	d1dd      	bne.n	8008570 <_free_r+0x28>
 80085b4:	681c      	ldr	r4, [r3, #0]
 80085b6:	685b      	ldr	r3, [r3, #4]
 80085b8:	6053      	str	r3, [r2, #4]
 80085ba:	4421      	add	r1, r4
 80085bc:	6011      	str	r1, [r2, #0]
 80085be:	e7d7      	b.n	8008570 <_free_r+0x28>
 80085c0:	d902      	bls.n	80085c8 <_free_r+0x80>
 80085c2:	230c      	movs	r3, #12
 80085c4:	6003      	str	r3, [r0, #0]
 80085c6:	e7d3      	b.n	8008570 <_free_r+0x28>
 80085c8:	6825      	ldr	r5, [r4, #0]
 80085ca:	1961      	adds	r1, r4, r5
 80085cc:	428b      	cmp	r3, r1
 80085ce:	bf04      	itt	eq
 80085d0:	6819      	ldreq	r1, [r3, #0]
 80085d2:	685b      	ldreq	r3, [r3, #4]
 80085d4:	6063      	str	r3, [r4, #4]
 80085d6:	bf04      	itt	eq
 80085d8:	1949      	addeq	r1, r1, r5
 80085da:	6021      	streq	r1, [r4, #0]
 80085dc:	6054      	str	r4, [r2, #4]
 80085de:	e7c7      	b.n	8008570 <_free_r+0x28>
 80085e0:	b003      	add	sp, #12
 80085e2:	bd30      	pop	{r4, r5, pc}
 80085e4:	20000200 	.word	0x20000200

080085e8 <_malloc_r>:
 80085e8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80085ea:	1ccd      	adds	r5, r1, #3
 80085ec:	f025 0503 	bic.w	r5, r5, #3
 80085f0:	3508      	adds	r5, #8
 80085f2:	2d0c      	cmp	r5, #12
 80085f4:	bf38      	it	cc
 80085f6:	250c      	movcc	r5, #12
 80085f8:	2d00      	cmp	r5, #0
 80085fa:	4606      	mov	r6, r0
 80085fc:	db01      	blt.n	8008602 <_malloc_r+0x1a>
 80085fe:	42a9      	cmp	r1, r5
 8008600:	d903      	bls.n	800860a <_malloc_r+0x22>
 8008602:	230c      	movs	r3, #12
 8008604:	6033      	str	r3, [r6, #0]
 8008606:	2000      	movs	r0, #0
 8008608:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800860a:	f000 fbdf 	bl	8008dcc <__malloc_lock>
 800860e:	4921      	ldr	r1, [pc, #132]	; (8008694 <_malloc_r+0xac>)
 8008610:	680a      	ldr	r2, [r1, #0]
 8008612:	4614      	mov	r4, r2
 8008614:	b99c      	cbnz	r4, 800863e <_malloc_r+0x56>
 8008616:	4f20      	ldr	r7, [pc, #128]	; (8008698 <_malloc_r+0xb0>)
 8008618:	683b      	ldr	r3, [r7, #0]
 800861a:	b923      	cbnz	r3, 8008626 <_malloc_r+0x3e>
 800861c:	4621      	mov	r1, r4
 800861e:	4630      	mov	r0, r6
 8008620:	f000 fb2a 	bl	8008c78 <_sbrk_r>
 8008624:	6038      	str	r0, [r7, #0]
 8008626:	4629      	mov	r1, r5
 8008628:	4630      	mov	r0, r6
 800862a:	f000 fb25 	bl	8008c78 <_sbrk_r>
 800862e:	1c43      	adds	r3, r0, #1
 8008630:	d123      	bne.n	800867a <_malloc_r+0x92>
 8008632:	230c      	movs	r3, #12
 8008634:	6033      	str	r3, [r6, #0]
 8008636:	4630      	mov	r0, r6
 8008638:	f000 fbce 	bl	8008dd8 <__malloc_unlock>
 800863c:	e7e3      	b.n	8008606 <_malloc_r+0x1e>
 800863e:	6823      	ldr	r3, [r4, #0]
 8008640:	1b5b      	subs	r3, r3, r5
 8008642:	d417      	bmi.n	8008674 <_malloc_r+0x8c>
 8008644:	2b0b      	cmp	r3, #11
 8008646:	d903      	bls.n	8008650 <_malloc_r+0x68>
 8008648:	6023      	str	r3, [r4, #0]
 800864a:	441c      	add	r4, r3
 800864c:	6025      	str	r5, [r4, #0]
 800864e:	e004      	b.n	800865a <_malloc_r+0x72>
 8008650:	6863      	ldr	r3, [r4, #4]
 8008652:	42a2      	cmp	r2, r4
 8008654:	bf0c      	ite	eq
 8008656:	600b      	streq	r3, [r1, #0]
 8008658:	6053      	strne	r3, [r2, #4]
 800865a:	4630      	mov	r0, r6
 800865c:	f000 fbbc 	bl	8008dd8 <__malloc_unlock>
 8008660:	f104 000b 	add.w	r0, r4, #11
 8008664:	1d23      	adds	r3, r4, #4
 8008666:	f020 0007 	bic.w	r0, r0, #7
 800866a:	1ac2      	subs	r2, r0, r3
 800866c:	d0cc      	beq.n	8008608 <_malloc_r+0x20>
 800866e:	1a1b      	subs	r3, r3, r0
 8008670:	50a3      	str	r3, [r4, r2]
 8008672:	e7c9      	b.n	8008608 <_malloc_r+0x20>
 8008674:	4622      	mov	r2, r4
 8008676:	6864      	ldr	r4, [r4, #4]
 8008678:	e7cc      	b.n	8008614 <_malloc_r+0x2c>
 800867a:	1cc4      	adds	r4, r0, #3
 800867c:	f024 0403 	bic.w	r4, r4, #3
 8008680:	42a0      	cmp	r0, r4
 8008682:	d0e3      	beq.n	800864c <_malloc_r+0x64>
 8008684:	1a21      	subs	r1, r4, r0
 8008686:	4630      	mov	r0, r6
 8008688:	f000 faf6 	bl	8008c78 <_sbrk_r>
 800868c:	3001      	adds	r0, #1
 800868e:	d1dd      	bne.n	800864c <_malloc_r+0x64>
 8008690:	e7cf      	b.n	8008632 <_malloc_r+0x4a>
 8008692:	bf00      	nop
 8008694:	20000200 	.word	0x20000200
 8008698:	20000204 	.word	0x20000204

0800869c <__sfputc_r>:
 800869c:	6893      	ldr	r3, [r2, #8]
 800869e:	3b01      	subs	r3, #1
 80086a0:	2b00      	cmp	r3, #0
 80086a2:	b410      	push	{r4}
 80086a4:	6093      	str	r3, [r2, #8]
 80086a6:	da08      	bge.n	80086ba <__sfputc_r+0x1e>
 80086a8:	6994      	ldr	r4, [r2, #24]
 80086aa:	42a3      	cmp	r3, r4
 80086ac:	db01      	blt.n	80086b2 <__sfputc_r+0x16>
 80086ae:	290a      	cmp	r1, #10
 80086b0:	d103      	bne.n	80086ba <__sfputc_r+0x1e>
 80086b2:	f85d 4b04 	ldr.w	r4, [sp], #4
 80086b6:	f7ff bc69 	b.w	8007f8c <__swbuf_r>
 80086ba:	6813      	ldr	r3, [r2, #0]
 80086bc:	1c58      	adds	r0, r3, #1
 80086be:	6010      	str	r0, [r2, #0]
 80086c0:	7019      	strb	r1, [r3, #0]
 80086c2:	4608      	mov	r0, r1
 80086c4:	f85d 4b04 	ldr.w	r4, [sp], #4
 80086c8:	4770      	bx	lr

080086ca <__sfputs_r>:
 80086ca:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80086cc:	4606      	mov	r6, r0
 80086ce:	460f      	mov	r7, r1
 80086d0:	4614      	mov	r4, r2
 80086d2:	18d5      	adds	r5, r2, r3
 80086d4:	42ac      	cmp	r4, r5
 80086d6:	d101      	bne.n	80086dc <__sfputs_r+0x12>
 80086d8:	2000      	movs	r0, #0
 80086da:	e007      	b.n	80086ec <__sfputs_r+0x22>
 80086dc:	f814 1b01 	ldrb.w	r1, [r4], #1
 80086e0:	463a      	mov	r2, r7
 80086e2:	4630      	mov	r0, r6
 80086e4:	f7ff ffda 	bl	800869c <__sfputc_r>
 80086e8:	1c43      	adds	r3, r0, #1
 80086ea:	d1f3      	bne.n	80086d4 <__sfputs_r+0xa>
 80086ec:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

080086f0 <_vfiprintf_r>:
 80086f0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80086f4:	460d      	mov	r5, r1
 80086f6:	b09d      	sub	sp, #116	; 0x74
 80086f8:	4614      	mov	r4, r2
 80086fa:	4698      	mov	r8, r3
 80086fc:	4606      	mov	r6, r0
 80086fe:	b118      	cbz	r0, 8008708 <_vfiprintf_r+0x18>
 8008700:	6983      	ldr	r3, [r0, #24]
 8008702:	b90b      	cbnz	r3, 8008708 <_vfiprintf_r+0x18>
 8008704:	f7ff fe1c 	bl	8008340 <__sinit>
 8008708:	4b89      	ldr	r3, [pc, #548]	; (8008930 <_vfiprintf_r+0x240>)
 800870a:	429d      	cmp	r5, r3
 800870c:	d11b      	bne.n	8008746 <_vfiprintf_r+0x56>
 800870e:	6875      	ldr	r5, [r6, #4]
 8008710:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8008712:	07d9      	lsls	r1, r3, #31
 8008714:	d405      	bmi.n	8008722 <_vfiprintf_r+0x32>
 8008716:	89ab      	ldrh	r3, [r5, #12]
 8008718:	059a      	lsls	r2, r3, #22
 800871a:	d402      	bmi.n	8008722 <_vfiprintf_r+0x32>
 800871c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800871e:	f7ff fead 	bl	800847c <__retarget_lock_acquire_recursive>
 8008722:	89ab      	ldrh	r3, [r5, #12]
 8008724:	071b      	lsls	r3, r3, #28
 8008726:	d501      	bpl.n	800872c <_vfiprintf_r+0x3c>
 8008728:	692b      	ldr	r3, [r5, #16]
 800872a:	b9eb      	cbnz	r3, 8008768 <_vfiprintf_r+0x78>
 800872c:	4629      	mov	r1, r5
 800872e:	4630      	mov	r0, r6
 8008730:	f7ff fc7e 	bl	8008030 <__swsetup_r>
 8008734:	b1c0      	cbz	r0, 8008768 <_vfiprintf_r+0x78>
 8008736:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8008738:	07dc      	lsls	r4, r3, #31
 800873a:	d50e      	bpl.n	800875a <_vfiprintf_r+0x6a>
 800873c:	f04f 30ff 	mov.w	r0, #4294967295
 8008740:	b01d      	add	sp, #116	; 0x74
 8008742:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008746:	4b7b      	ldr	r3, [pc, #492]	; (8008934 <_vfiprintf_r+0x244>)
 8008748:	429d      	cmp	r5, r3
 800874a:	d101      	bne.n	8008750 <_vfiprintf_r+0x60>
 800874c:	68b5      	ldr	r5, [r6, #8]
 800874e:	e7df      	b.n	8008710 <_vfiprintf_r+0x20>
 8008750:	4b79      	ldr	r3, [pc, #484]	; (8008938 <_vfiprintf_r+0x248>)
 8008752:	429d      	cmp	r5, r3
 8008754:	bf08      	it	eq
 8008756:	68f5      	ldreq	r5, [r6, #12]
 8008758:	e7da      	b.n	8008710 <_vfiprintf_r+0x20>
 800875a:	89ab      	ldrh	r3, [r5, #12]
 800875c:	0598      	lsls	r0, r3, #22
 800875e:	d4ed      	bmi.n	800873c <_vfiprintf_r+0x4c>
 8008760:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8008762:	f7ff fe8c 	bl	800847e <__retarget_lock_release_recursive>
 8008766:	e7e9      	b.n	800873c <_vfiprintf_r+0x4c>
 8008768:	2300      	movs	r3, #0
 800876a:	9309      	str	r3, [sp, #36]	; 0x24
 800876c:	2320      	movs	r3, #32
 800876e:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8008772:	f8cd 800c 	str.w	r8, [sp, #12]
 8008776:	2330      	movs	r3, #48	; 0x30
 8008778:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 800893c <_vfiprintf_r+0x24c>
 800877c:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8008780:	f04f 0901 	mov.w	r9, #1
 8008784:	4623      	mov	r3, r4
 8008786:	469a      	mov	sl, r3
 8008788:	f813 2b01 	ldrb.w	r2, [r3], #1
 800878c:	b10a      	cbz	r2, 8008792 <_vfiprintf_r+0xa2>
 800878e:	2a25      	cmp	r2, #37	; 0x25
 8008790:	d1f9      	bne.n	8008786 <_vfiprintf_r+0x96>
 8008792:	ebba 0b04 	subs.w	fp, sl, r4
 8008796:	d00b      	beq.n	80087b0 <_vfiprintf_r+0xc0>
 8008798:	465b      	mov	r3, fp
 800879a:	4622      	mov	r2, r4
 800879c:	4629      	mov	r1, r5
 800879e:	4630      	mov	r0, r6
 80087a0:	f7ff ff93 	bl	80086ca <__sfputs_r>
 80087a4:	3001      	adds	r0, #1
 80087a6:	f000 80aa 	beq.w	80088fe <_vfiprintf_r+0x20e>
 80087aa:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80087ac:	445a      	add	r2, fp
 80087ae:	9209      	str	r2, [sp, #36]	; 0x24
 80087b0:	f89a 3000 	ldrb.w	r3, [sl]
 80087b4:	2b00      	cmp	r3, #0
 80087b6:	f000 80a2 	beq.w	80088fe <_vfiprintf_r+0x20e>
 80087ba:	2300      	movs	r3, #0
 80087bc:	f04f 32ff 	mov.w	r2, #4294967295
 80087c0:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80087c4:	f10a 0a01 	add.w	sl, sl, #1
 80087c8:	9304      	str	r3, [sp, #16]
 80087ca:	9307      	str	r3, [sp, #28]
 80087cc:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80087d0:	931a      	str	r3, [sp, #104]	; 0x68
 80087d2:	4654      	mov	r4, sl
 80087d4:	2205      	movs	r2, #5
 80087d6:	f814 1b01 	ldrb.w	r1, [r4], #1
 80087da:	4858      	ldr	r0, [pc, #352]	; (800893c <_vfiprintf_r+0x24c>)
 80087dc:	f7f7 fd98 	bl	8000310 <memchr>
 80087e0:	9a04      	ldr	r2, [sp, #16]
 80087e2:	b9d8      	cbnz	r0, 800881c <_vfiprintf_r+0x12c>
 80087e4:	06d1      	lsls	r1, r2, #27
 80087e6:	bf44      	itt	mi
 80087e8:	2320      	movmi	r3, #32
 80087ea:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80087ee:	0713      	lsls	r3, r2, #28
 80087f0:	bf44      	itt	mi
 80087f2:	232b      	movmi	r3, #43	; 0x2b
 80087f4:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80087f8:	f89a 3000 	ldrb.w	r3, [sl]
 80087fc:	2b2a      	cmp	r3, #42	; 0x2a
 80087fe:	d015      	beq.n	800882c <_vfiprintf_r+0x13c>
 8008800:	9a07      	ldr	r2, [sp, #28]
 8008802:	4654      	mov	r4, sl
 8008804:	2000      	movs	r0, #0
 8008806:	f04f 0c0a 	mov.w	ip, #10
 800880a:	4621      	mov	r1, r4
 800880c:	f811 3b01 	ldrb.w	r3, [r1], #1
 8008810:	3b30      	subs	r3, #48	; 0x30
 8008812:	2b09      	cmp	r3, #9
 8008814:	d94e      	bls.n	80088b4 <_vfiprintf_r+0x1c4>
 8008816:	b1b0      	cbz	r0, 8008846 <_vfiprintf_r+0x156>
 8008818:	9207      	str	r2, [sp, #28]
 800881a:	e014      	b.n	8008846 <_vfiprintf_r+0x156>
 800881c:	eba0 0308 	sub.w	r3, r0, r8
 8008820:	fa09 f303 	lsl.w	r3, r9, r3
 8008824:	4313      	orrs	r3, r2
 8008826:	9304      	str	r3, [sp, #16]
 8008828:	46a2      	mov	sl, r4
 800882a:	e7d2      	b.n	80087d2 <_vfiprintf_r+0xe2>
 800882c:	9b03      	ldr	r3, [sp, #12]
 800882e:	1d19      	adds	r1, r3, #4
 8008830:	681b      	ldr	r3, [r3, #0]
 8008832:	9103      	str	r1, [sp, #12]
 8008834:	2b00      	cmp	r3, #0
 8008836:	bfbb      	ittet	lt
 8008838:	425b      	neglt	r3, r3
 800883a:	f042 0202 	orrlt.w	r2, r2, #2
 800883e:	9307      	strge	r3, [sp, #28]
 8008840:	9307      	strlt	r3, [sp, #28]
 8008842:	bfb8      	it	lt
 8008844:	9204      	strlt	r2, [sp, #16]
 8008846:	7823      	ldrb	r3, [r4, #0]
 8008848:	2b2e      	cmp	r3, #46	; 0x2e
 800884a:	d10c      	bne.n	8008866 <_vfiprintf_r+0x176>
 800884c:	7863      	ldrb	r3, [r4, #1]
 800884e:	2b2a      	cmp	r3, #42	; 0x2a
 8008850:	d135      	bne.n	80088be <_vfiprintf_r+0x1ce>
 8008852:	9b03      	ldr	r3, [sp, #12]
 8008854:	1d1a      	adds	r2, r3, #4
 8008856:	681b      	ldr	r3, [r3, #0]
 8008858:	9203      	str	r2, [sp, #12]
 800885a:	2b00      	cmp	r3, #0
 800885c:	bfb8      	it	lt
 800885e:	f04f 33ff 	movlt.w	r3, #4294967295
 8008862:	3402      	adds	r4, #2
 8008864:	9305      	str	r3, [sp, #20]
 8008866:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 800894c <_vfiprintf_r+0x25c>
 800886a:	7821      	ldrb	r1, [r4, #0]
 800886c:	2203      	movs	r2, #3
 800886e:	4650      	mov	r0, sl
 8008870:	f7f7 fd4e 	bl	8000310 <memchr>
 8008874:	b140      	cbz	r0, 8008888 <_vfiprintf_r+0x198>
 8008876:	2340      	movs	r3, #64	; 0x40
 8008878:	eba0 000a 	sub.w	r0, r0, sl
 800887c:	fa03 f000 	lsl.w	r0, r3, r0
 8008880:	9b04      	ldr	r3, [sp, #16]
 8008882:	4303      	orrs	r3, r0
 8008884:	3401      	adds	r4, #1
 8008886:	9304      	str	r3, [sp, #16]
 8008888:	f814 1b01 	ldrb.w	r1, [r4], #1
 800888c:	482c      	ldr	r0, [pc, #176]	; (8008940 <_vfiprintf_r+0x250>)
 800888e:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8008892:	2206      	movs	r2, #6
 8008894:	f7f7 fd3c 	bl	8000310 <memchr>
 8008898:	2800      	cmp	r0, #0
 800889a:	d03f      	beq.n	800891c <_vfiprintf_r+0x22c>
 800889c:	4b29      	ldr	r3, [pc, #164]	; (8008944 <_vfiprintf_r+0x254>)
 800889e:	bb1b      	cbnz	r3, 80088e8 <_vfiprintf_r+0x1f8>
 80088a0:	9b03      	ldr	r3, [sp, #12]
 80088a2:	3307      	adds	r3, #7
 80088a4:	f023 0307 	bic.w	r3, r3, #7
 80088a8:	3308      	adds	r3, #8
 80088aa:	9303      	str	r3, [sp, #12]
 80088ac:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80088ae:	443b      	add	r3, r7
 80088b0:	9309      	str	r3, [sp, #36]	; 0x24
 80088b2:	e767      	b.n	8008784 <_vfiprintf_r+0x94>
 80088b4:	fb0c 3202 	mla	r2, ip, r2, r3
 80088b8:	460c      	mov	r4, r1
 80088ba:	2001      	movs	r0, #1
 80088bc:	e7a5      	b.n	800880a <_vfiprintf_r+0x11a>
 80088be:	2300      	movs	r3, #0
 80088c0:	3401      	adds	r4, #1
 80088c2:	9305      	str	r3, [sp, #20]
 80088c4:	4619      	mov	r1, r3
 80088c6:	f04f 0c0a 	mov.w	ip, #10
 80088ca:	4620      	mov	r0, r4
 80088cc:	f810 2b01 	ldrb.w	r2, [r0], #1
 80088d0:	3a30      	subs	r2, #48	; 0x30
 80088d2:	2a09      	cmp	r2, #9
 80088d4:	d903      	bls.n	80088de <_vfiprintf_r+0x1ee>
 80088d6:	2b00      	cmp	r3, #0
 80088d8:	d0c5      	beq.n	8008866 <_vfiprintf_r+0x176>
 80088da:	9105      	str	r1, [sp, #20]
 80088dc:	e7c3      	b.n	8008866 <_vfiprintf_r+0x176>
 80088de:	fb0c 2101 	mla	r1, ip, r1, r2
 80088e2:	4604      	mov	r4, r0
 80088e4:	2301      	movs	r3, #1
 80088e6:	e7f0      	b.n	80088ca <_vfiprintf_r+0x1da>
 80088e8:	ab03      	add	r3, sp, #12
 80088ea:	9300      	str	r3, [sp, #0]
 80088ec:	462a      	mov	r2, r5
 80088ee:	4b16      	ldr	r3, [pc, #88]	; (8008948 <_vfiprintf_r+0x258>)
 80088f0:	a904      	add	r1, sp, #16
 80088f2:	4630      	mov	r0, r6
 80088f4:	f3af 8000 	nop.w
 80088f8:	4607      	mov	r7, r0
 80088fa:	1c78      	adds	r0, r7, #1
 80088fc:	d1d6      	bne.n	80088ac <_vfiprintf_r+0x1bc>
 80088fe:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8008900:	07d9      	lsls	r1, r3, #31
 8008902:	d405      	bmi.n	8008910 <_vfiprintf_r+0x220>
 8008904:	89ab      	ldrh	r3, [r5, #12]
 8008906:	059a      	lsls	r2, r3, #22
 8008908:	d402      	bmi.n	8008910 <_vfiprintf_r+0x220>
 800890a:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800890c:	f7ff fdb7 	bl	800847e <__retarget_lock_release_recursive>
 8008910:	89ab      	ldrh	r3, [r5, #12]
 8008912:	065b      	lsls	r3, r3, #25
 8008914:	f53f af12 	bmi.w	800873c <_vfiprintf_r+0x4c>
 8008918:	9809      	ldr	r0, [sp, #36]	; 0x24
 800891a:	e711      	b.n	8008740 <_vfiprintf_r+0x50>
 800891c:	ab03      	add	r3, sp, #12
 800891e:	9300      	str	r3, [sp, #0]
 8008920:	462a      	mov	r2, r5
 8008922:	4b09      	ldr	r3, [pc, #36]	; (8008948 <_vfiprintf_r+0x258>)
 8008924:	a904      	add	r1, sp, #16
 8008926:	4630      	mov	r0, r6
 8008928:	f000 f880 	bl	8008a2c <_printf_i>
 800892c:	e7e4      	b.n	80088f8 <_vfiprintf_r+0x208>
 800892e:	bf00      	nop
 8008930:	08008f78 	.word	0x08008f78
 8008934:	08008f98 	.word	0x08008f98
 8008938:	08008f58 	.word	0x08008f58
 800893c:	08008fb8 	.word	0x08008fb8
 8008940:	08008fc2 	.word	0x08008fc2
 8008944:	00000000 	.word	0x00000000
 8008948:	080086cb 	.word	0x080086cb
 800894c:	08008fbe 	.word	0x08008fbe

08008950 <_printf_common>:
 8008950:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008954:	4616      	mov	r6, r2
 8008956:	4699      	mov	r9, r3
 8008958:	688a      	ldr	r2, [r1, #8]
 800895a:	690b      	ldr	r3, [r1, #16]
 800895c:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8008960:	4293      	cmp	r3, r2
 8008962:	bfb8      	it	lt
 8008964:	4613      	movlt	r3, r2
 8008966:	6033      	str	r3, [r6, #0]
 8008968:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800896c:	4607      	mov	r7, r0
 800896e:	460c      	mov	r4, r1
 8008970:	b10a      	cbz	r2, 8008976 <_printf_common+0x26>
 8008972:	3301      	adds	r3, #1
 8008974:	6033      	str	r3, [r6, #0]
 8008976:	6823      	ldr	r3, [r4, #0]
 8008978:	0699      	lsls	r1, r3, #26
 800897a:	bf42      	ittt	mi
 800897c:	6833      	ldrmi	r3, [r6, #0]
 800897e:	3302      	addmi	r3, #2
 8008980:	6033      	strmi	r3, [r6, #0]
 8008982:	6825      	ldr	r5, [r4, #0]
 8008984:	f015 0506 	ands.w	r5, r5, #6
 8008988:	d106      	bne.n	8008998 <_printf_common+0x48>
 800898a:	f104 0a19 	add.w	sl, r4, #25
 800898e:	68e3      	ldr	r3, [r4, #12]
 8008990:	6832      	ldr	r2, [r6, #0]
 8008992:	1a9b      	subs	r3, r3, r2
 8008994:	42ab      	cmp	r3, r5
 8008996:	dc26      	bgt.n	80089e6 <_printf_common+0x96>
 8008998:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800899c:	1e13      	subs	r3, r2, #0
 800899e:	6822      	ldr	r2, [r4, #0]
 80089a0:	bf18      	it	ne
 80089a2:	2301      	movne	r3, #1
 80089a4:	0692      	lsls	r2, r2, #26
 80089a6:	d42b      	bmi.n	8008a00 <_printf_common+0xb0>
 80089a8:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80089ac:	4649      	mov	r1, r9
 80089ae:	4638      	mov	r0, r7
 80089b0:	47c0      	blx	r8
 80089b2:	3001      	adds	r0, #1
 80089b4:	d01e      	beq.n	80089f4 <_printf_common+0xa4>
 80089b6:	6823      	ldr	r3, [r4, #0]
 80089b8:	68e5      	ldr	r5, [r4, #12]
 80089ba:	6832      	ldr	r2, [r6, #0]
 80089bc:	f003 0306 	and.w	r3, r3, #6
 80089c0:	2b04      	cmp	r3, #4
 80089c2:	bf08      	it	eq
 80089c4:	1aad      	subeq	r5, r5, r2
 80089c6:	68a3      	ldr	r3, [r4, #8]
 80089c8:	6922      	ldr	r2, [r4, #16]
 80089ca:	bf0c      	ite	eq
 80089cc:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80089d0:	2500      	movne	r5, #0
 80089d2:	4293      	cmp	r3, r2
 80089d4:	bfc4      	itt	gt
 80089d6:	1a9b      	subgt	r3, r3, r2
 80089d8:	18ed      	addgt	r5, r5, r3
 80089da:	2600      	movs	r6, #0
 80089dc:	341a      	adds	r4, #26
 80089de:	42b5      	cmp	r5, r6
 80089e0:	d11a      	bne.n	8008a18 <_printf_common+0xc8>
 80089e2:	2000      	movs	r0, #0
 80089e4:	e008      	b.n	80089f8 <_printf_common+0xa8>
 80089e6:	2301      	movs	r3, #1
 80089e8:	4652      	mov	r2, sl
 80089ea:	4649      	mov	r1, r9
 80089ec:	4638      	mov	r0, r7
 80089ee:	47c0      	blx	r8
 80089f0:	3001      	adds	r0, #1
 80089f2:	d103      	bne.n	80089fc <_printf_common+0xac>
 80089f4:	f04f 30ff 	mov.w	r0, #4294967295
 80089f8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80089fc:	3501      	adds	r5, #1
 80089fe:	e7c6      	b.n	800898e <_printf_common+0x3e>
 8008a00:	18e1      	adds	r1, r4, r3
 8008a02:	1c5a      	adds	r2, r3, #1
 8008a04:	2030      	movs	r0, #48	; 0x30
 8008a06:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8008a0a:	4422      	add	r2, r4
 8008a0c:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8008a10:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8008a14:	3302      	adds	r3, #2
 8008a16:	e7c7      	b.n	80089a8 <_printf_common+0x58>
 8008a18:	2301      	movs	r3, #1
 8008a1a:	4622      	mov	r2, r4
 8008a1c:	4649      	mov	r1, r9
 8008a1e:	4638      	mov	r0, r7
 8008a20:	47c0      	blx	r8
 8008a22:	3001      	adds	r0, #1
 8008a24:	d0e6      	beq.n	80089f4 <_printf_common+0xa4>
 8008a26:	3601      	adds	r6, #1
 8008a28:	e7d9      	b.n	80089de <_printf_common+0x8e>
	...

08008a2c <_printf_i>:
 8008a2c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8008a30:	460c      	mov	r4, r1
 8008a32:	4691      	mov	r9, r2
 8008a34:	7e27      	ldrb	r7, [r4, #24]
 8008a36:	990c      	ldr	r1, [sp, #48]	; 0x30
 8008a38:	2f78      	cmp	r7, #120	; 0x78
 8008a3a:	4680      	mov	r8, r0
 8008a3c:	469a      	mov	sl, r3
 8008a3e:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8008a42:	d807      	bhi.n	8008a54 <_printf_i+0x28>
 8008a44:	2f62      	cmp	r7, #98	; 0x62
 8008a46:	d80a      	bhi.n	8008a5e <_printf_i+0x32>
 8008a48:	2f00      	cmp	r7, #0
 8008a4a:	f000 80d8 	beq.w	8008bfe <_printf_i+0x1d2>
 8008a4e:	2f58      	cmp	r7, #88	; 0x58
 8008a50:	f000 80a3 	beq.w	8008b9a <_printf_i+0x16e>
 8008a54:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8008a58:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8008a5c:	e03a      	b.n	8008ad4 <_printf_i+0xa8>
 8008a5e:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8008a62:	2b15      	cmp	r3, #21
 8008a64:	d8f6      	bhi.n	8008a54 <_printf_i+0x28>
 8008a66:	a001      	add	r0, pc, #4	; (adr r0, 8008a6c <_printf_i+0x40>)
 8008a68:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 8008a6c:	08008ac5 	.word	0x08008ac5
 8008a70:	08008ad9 	.word	0x08008ad9
 8008a74:	08008a55 	.word	0x08008a55
 8008a78:	08008a55 	.word	0x08008a55
 8008a7c:	08008a55 	.word	0x08008a55
 8008a80:	08008a55 	.word	0x08008a55
 8008a84:	08008ad9 	.word	0x08008ad9
 8008a88:	08008a55 	.word	0x08008a55
 8008a8c:	08008a55 	.word	0x08008a55
 8008a90:	08008a55 	.word	0x08008a55
 8008a94:	08008a55 	.word	0x08008a55
 8008a98:	08008be5 	.word	0x08008be5
 8008a9c:	08008b09 	.word	0x08008b09
 8008aa0:	08008bc7 	.word	0x08008bc7
 8008aa4:	08008a55 	.word	0x08008a55
 8008aa8:	08008a55 	.word	0x08008a55
 8008aac:	08008c07 	.word	0x08008c07
 8008ab0:	08008a55 	.word	0x08008a55
 8008ab4:	08008b09 	.word	0x08008b09
 8008ab8:	08008a55 	.word	0x08008a55
 8008abc:	08008a55 	.word	0x08008a55
 8008ac0:	08008bcf 	.word	0x08008bcf
 8008ac4:	680b      	ldr	r3, [r1, #0]
 8008ac6:	1d1a      	adds	r2, r3, #4
 8008ac8:	681b      	ldr	r3, [r3, #0]
 8008aca:	600a      	str	r2, [r1, #0]
 8008acc:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8008ad0:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8008ad4:	2301      	movs	r3, #1
 8008ad6:	e0a3      	b.n	8008c20 <_printf_i+0x1f4>
 8008ad8:	6825      	ldr	r5, [r4, #0]
 8008ada:	6808      	ldr	r0, [r1, #0]
 8008adc:	062e      	lsls	r6, r5, #24
 8008ade:	f100 0304 	add.w	r3, r0, #4
 8008ae2:	d50a      	bpl.n	8008afa <_printf_i+0xce>
 8008ae4:	6805      	ldr	r5, [r0, #0]
 8008ae6:	600b      	str	r3, [r1, #0]
 8008ae8:	2d00      	cmp	r5, #0
 8008aea:	da03      	bge.n	8008af4 <_printf_i+0xc8>
 8008aec:	232d      	movs	r3, #45	; 0x2d
 8008aee:	426d      	negs	r5, r5
 8008af0:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8008af4:	485e      	ldr	r0, [pc, #376]	; (8008c70 <_printf_i+0x244>)
 8008af6:	230a      	movs	r3, #10
 8008af8:	e019      	b.n	8008b2e <_printf_i+0x102>
 8008afa:	f015 0f40 	tst.w	r5, #64	; 0x40
 8008afe:	6805      	ldr	r5, [r0, #0]
 8008b00:	600b      	str	r3, [r1, #0]
 8008b02:	bf18      	it	ne
 8008b04:	b22d      	sxthne	r5, r5
 8008b06:	e7ef      	b.n	8008ae8 <_printf_i+0xbc>
 8008b08:	680b      	ldr	r3, [r1, #0]
 8008b0a:	6825      	ldr	r5, [r4, #0]
 8008b0c:	1d18      	adds	r0, r3, #4
 8008b0e:	6008      	str	r0, [r1, #0]
 8008b10:	0628      	lsls	r0, r5, #24
 8008b12:	d501      	bpl.n	8008b18 <_printf_i+0xec>
 8008b14:	681d      	ldr	r5, [r3, #0]
 8008b16:	e002      	b.n	8008b1e <_printf_i+0xf2>
 8008b18:	0669      	lsls	r1, r5, #25
 8008b1a:	d5fb      	bpl.n	8008b14 <_printf_i+0xe8>
 8008b1c:	881d      	ldrh	r5, [r3, #0]
 8008b1e:	4854      	ldr	r0, [pc, #336]	; (8008c70 <_printf_i+0x244>)
 8008b20:	2f6f      	cmp	r7, #111	; 0x6f
 8008b22:	bf0c      	ite	eq
 8008b24:	2308      	moveq	r3, #8
 8008b26:	230a      	movne	r3, #10
 8008b28:	2100      	movs	r1, #0
 8008b2a:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8008b2e:	6866      	ldr	r6, [r4, #4]
 8008b30:	60a6      	str	r6, [r4, #8]
 8008b32:	2e00      	cmp	r6, #0
 8008b34:	bfa2      	ittt	ge
 8008b36:	6821      	ldrge	r1, [r4, #0]
 8008b38:	f021 0104 	bicge.w	r1, r1, #4
 8008b3c:	6021      	strge	r1, [r4, #0]
 8008b3e:	b90d      	cbnz	r5, 8008b44 <_printf_i+0x118>
 8008b40:	2e00      	cmp	r6, #0
 8008b42:	d04d      	beq.n	8008be0 <_printf_i+0x1b4>
 8008b44:	4616      	mov	r6, r2
 8008b46:	fbb5 f1f3 	udiv	r1, r5, r3
 8008b4a:	fb03 5711 	mls	r7, r3, r1, r5
 8008b4e:	5dc7      	ldrb	r7, [r0, r7]
 8008b50:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8008b54:	462f      	mov	r7, r5
 8008b56:	42bb      	cmp	r3, r7
 8008b58:	460d      	mov	r5, r1
 8008b5a:	d9f4      	bls.n	8008b46 <_printf_i+0x11a>
 8008b5c:	2b08      	cmp	r3, #8
 8008b5e:	d10b      	bne.n	8008b78 <_printf_i+0x14c>
 8008b60:	6823      	ldr	r3, [r4, #0]
 8008b62:	07df      	lsls	r7, r3, #31
 8008b64:	d508      	bpl.n	8008b78 <_printf_i+0x14c>
 8008b66:	6923      	ldr	r3, [r4, #16]
 8008b68:	6861      	ldr	r1, [r4, #4]
 8008b6a:	4299      	cmp	r1, r3
 8008b6c:	bfde      	ittt	le
 8008b6e:	2330      	movle	r3, #48	; 0x30
 8008b70:	f806 3c01 	strble.w	r3, [r6, #-1]
 8008b74:	f106 36ff 	addle.w	r6, r6, #4294967295
 8008b78:	1b92      	subs	r2, r2, r6
 8008b7a:	6122      	str	r2, [r4, #16]
 8008b7c:	f8cd a000 	str.w	sl, [sp]
 8008b80:	464b      	mov	r3, r9
 8008b82:	aa03      	add	r2, sp, #12
 8008b84:	4621      	mov	r1, r4
 8008b86:	4640      	mov	r0, r8
 8008b88:	f7ff fee2 	bl	8008950 <_printf_common>
 8008b8c:	3001      	adds	r0, #1
 8008b8e:	d14c      	bne.n	8008c2a <_printf_i+0x1fe>
 8008b90:	f04f 30ff 	mov.w	r0, #4294967295
 8008b94:	b004      	add	sp, #16
 8008b96:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008b9a:	4835      	ldr	r0, [pc, #212]	; (8008c70 <_printf_i+0x244>)
 8008b9c:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8008ba0:	6823      	ldr	r3, [r4, #0]
 8008ba2:	680e      	ldr	r6, [r1, #0]
 8008ba4:	061f      	lsls	r7, r3, #24
 8008ba6:	f856 5b04 	ldr.w	r5, [r6], #4
 8008baa:	600e      	str	r6, [r1, #0]
 8008bac:	d514      	bpl.n	8008bd8 <_printf_i+0x1ac>
 8008bae:	07d9      	lsls	r1, r3, #31
 8008bb0:	bf44      	itt	mi
 8008bb2:	f043 0320 	orrmi.w	r3, r3, #32
 8008bb6:	6023      	strmi	r3, [r4, #0]
 8008bb8:	b91d      	cbnz	r5, 8008bc2 <_printf_i+0x196>
 8008bba:	6823      	ldr	r3, [r4, #0]
 8008bbc:	f023 0320 	bic.w	r3, r3, #32
 8008bc0:	6023      	str	r3, [r4, #0]
 8008bc2:	2310      	movs	r3, #16
 8008bc4:	e7b0      	b.n	8008b28 <_printf_i+0xfc>
 8008bc6:	6823      	ldr	r3, [r4, #0]
 8008bc8:	f043 0320 	orr.w	r3, r3, #32
 8008bcc:	6023      	str	r3, [r4, #0]
 8008bce:	2378      	movs	r3, #120	; 0x78
 8008bd0:	4828      	ldr	r0, [pc, #160]	; (8008c74 <_printf_i+0x248>)
 8008bd2:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8008bd6:	e7e3      	b.n	8008ba0 <_printf_i+0x174>
 8008bd8:	065e      	lsls	r6, r3, #25
 8008bda:	bf48      	it	mi
 8008bdc:	b2ad      	uxthmi	r5, r5
 8008bde:	e7e6      	b.n	8008bae <_printf_i+0x182>
 8008be0:	4616      	mov	r6, r2
 8008be2:	e7bb      	b.n	8008b5c <_printf_i+0x130>
 8008be4:	680b      	ldr	r3, [r1, #0]
 8008be6:	6826      	ldr	r6, [r4, #0]
 8008be8:	6960      	ldr	r0, [r4, #20]
 8008bea:	1d1d      	adds	r5, r3, #4
 8008bec:	600d      	str	r5, [r1, #0]
 8008bee:	0635      	lsls	r5, r6, #24
 8008bf0:	681b      	ldr	r3, [r3, #0]
 8008bf2:	d501      	bpl.n	8008bf8 <_printf_i+0x1cc>
 8008bf4:	6018      	str	r0, [r3, #0]
 8008bf6:	e002      	b.n	8008bfe <_printf_i+0x1d2>
 8008bf8:	0671      	lsls	r1, r6, #25
 8008bfa:	d5fb      	bpl.n	8008bf4 <_printf_i+0x1c8>
 8008bfc:	8018      	strh	r0, [r3, #0]
 8008bfe:	2300      	movs	r3, #0
 8008c00:	6123      	str	r3, [r4, #16]
 8008c02:	4616      	mov	r6, r2
 8008c04:	e7ba      	b.n	8008b7c <_printf_i+0x150>
 8008c06:	680b      	ldr	r3, [r1, #0]
 8008c08:	1d1a      	adds	r2, r3, #4
 8008c0a:	600a      	str	r2, [r1, #0]
 8008c0c:	681e      	ldr	r6, [r3, #0]
 8008c0e:	6862      	ldr	r2, [r4, #4]
 8008c10:	2100      	movs	r1, #0
 8008c12:	4630      	mov	r0, r6
 8008c14:	f7f7 fb7c 	bl	8000310 <memchr>
 8008c18:	b108      	cbz	r0, 8008c1e <_printf_i+0x1f2>
 8008c1a:	1b80      	subs	r0, r0, r6
 8008c1c:	6060      	str	r0, [r4, #4]
 8008c1e:	6863      	ldr	r3, [r4, #4]
 8008c20:	6123      	str	r3, [r4, #16]
 8008c22:	2300      	movs	r3, #0
 8008c24:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8008c28:	e7a8      	b.n	8008b7c <_printf_i+0x150>
 8008c2a:	6923      	ldr	r3, [r4, #16]
 8008c2c:	4632      	mov	r2, r6
 8008c2e:	4649      	mov	r1, r9
 8008c30:	4640      	mov	r0, r8
 8008c32:	47d0      	blx	sl
 8008c34:	3001      	adds	r0, #1
 8008c36:	d0ab      	beq.n	8008b90 <_printf_i+0x164>
 8008c38:	6823      	ldr	r3, [r4, #0]
 8008c3a:	079b      	lsls	r3, r3, #30
 8008c3c:	d413      	bmi.n	8008c66 <_printf_i+0x23a>
 8008c3e:	68e0      	ldr	r0, [r4, #12]
 8008c40:	9b03      	ldr	r3, [sp, #12]
 8008c42:	4298      	cmp	r0, r3
 8008c44:	bfb8      	it	lt
 8008c46:	4618      	movlt	r0, r3
 8008c48:	e7a4      	b.n	8008b94 <_printf_i+0x168>
 8008c4a:	2301      	movs	r3, #1
 8008c4c:	4632      	mov	r2, r6
 8008c4e:	4649      	mov	r1, r9
 8008c50:	4640      	mov	r0, r8
 8008c52:	47d0      	blx	sl
 8008c54:	3001      	adds	r0, #1
 8008c56:	d09b      	beq.n	8008b90 <_printf_i+0x164>
 8008c58:	3501      	adds	r5, #1
 8008c5a:	68e3      	ldr	r3, [r4, #12]
 8008c5c:	9903      	ldr	r1, [sp, #12]
 8008c5e:	1a5b      	subs	r3, r3, r1
 8008c60:	42ab      	cmp	r3, r5
 8008c62:	dcf2      	bgt.n	8008c4a <_printf_i+0x21e>
 8008c64:	e7eb      	b.n	8008c3e <_printf_i+0x212>
 8008c66:	2500      	movs	r5, #0
 8008c68:	f104 0619 	add.w	r6, r4, #25
 8008c6c:	e7f5      	b.n	8008c5a <_printf_i+0x22e>
 8008c6e:	bf00      	nop
 8008c70:	08008fc9 	.word	0x08008fc9
 8008c74:	08008fda 	.word	0x08008fda

08008c78 <_sbrk_r>:
 8008c78:	b538      	push	{r3, r4, r5, lr}
 8008c7a:	4d06      	ldr	r5, [pc, #24]	; (8008c94 <_sbrk_r+0x1c>)
 8008c7c:	2300      	movs	r3, #0
 8008c7e:	4604      	mov	r4, r0
 8008c80:	4608      	mov	r0, r1
 8008c82:	602b      	str	r3, [r5, #0]
 8008c84:	f7f8 fb30 	bl	80012e8 <_sbrk>
 8008c88:	1c43      	adds	r3, r0, #1
 8008c8a:	d102      	bne.n	8008c92 <_sbrk_r+0x1a>
 8008c8c:	682b      	ldr	r3, [r5, #0]
 8008c8e:	b103      	cbz	r3, 8008c92 <_sbrk_r+0x1a>
 8008c90:	6023      	str	r3, [r4, #0]
 8008c92:	bd38      	pop	{r3, r4, r5, pc}
 8008c94:	200025b4 	.word	0x200025b4

08008c98 <__sread>:
 8008c98:	b510      	push	{r4, lr}
 8008c9a:	460c      	mov	r4, r1
 8008c9c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008ca0:	f000 f8a0 	bl	8008de4 <_read_r>
 8008ca4:	2800      	cmp	r0, #0
 8008ca6:	bfab      	itete	ge
 8008ca8:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8008caa:	89a3      	ldrhlt	r3, [r4, #12]
 8008cac:	181b      	addge	r3, r3, r0
 8008cae:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8008cb2:	bfac      	ite	ge
 8008cb4:	6563      	strge	r3, [r4, #84]	; 0x54
 8008cb6:	81a3      	strhlt	r3, [r4, #12]
 8008cb8:	bd10      	pop	{r4, pc}

08008cba <__swrite>:
 8008cba:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008cbe:	461f      	mov	r7, r3
 8008cc0:	898b      	ldrh	r3, [r1, #12]
 8008cc2:	05db      	lsls	r3, r3, #23
 8008cc4:	4605      	mov	r5, r0
 8008cc6:	460c      	mov	r4, r1
 8008cc8:	4616      	mov	r6, r2
 8008cca:	d505      	bpl.n	8008cd8 <__swrite+0x1e>
 8008ccc:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008cd0:	2302      	movs	r3, #2
 8008cd2:	2200      	movs	r2, #0
 8008cd4:	f000 f868 	bl	8008da8 <_lseek_r>
 8008cd8:	89a3      	ldrh	r3, [r4, #12]
 8008cda:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8008cde:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8008ce2:	81a3      	strh	r3, [r4, #12]
 8008ce4:	4632      	mov	r2, r6
 8008ce6:	463b      	mov	r3, r7
 8008ce8:	4628      	mov	r0, r5
 8008cea:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8008cee:	f000 b817 	b.w	8008d20 <_write_r>

08008cf2 <__sseek>:
 8008cf2:	b510      	push	{r4, lr}
 8008cf4:	460c      	mov	r4, r1
 8008cf6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008cfa:	f000 f855 	bl	8008da8 <_lseek_r>
 8008cfe:	1c43      	adds	r3, r0, #1
 8008d00:	89a3      	ldrh	r3, [r4, #12]
 8008d02:	bf15      	itete	ne
 8008d04:	6560      	strne	r0, [r4, #84]	; 0x54
 8008d06:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8008d0a:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8008d0e:	81a3      	strheq	r3, [r4, #12]
 8008d10:	bf18      	it	ne
 8008d12:	81a3      	strhne	r3, [r4, #12]
 8008d14:	bd10      	pop	{r4, pc}

08008d16 <__sclose>:
 8008d16:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008d1a:	f000 b813 	b.w	8008d44 <_close_r>
	...

08008d20 <_write_r>:
 8008d20:	b538      	push	{r3, r4, r5, lr}
 8008d22:	4d07      	ldr	r5, [pc, #28]	; (8008d40 <_write_r+0x20>)
 8008d24:	4604      	mov	r4, r0
 8008d26:	4608      	mov	r0, r1
 8008d28:	4611      	mov	r1, r2
 8008d2a:	2200      	movs	r2, #0
 8008d2c:	602a      	str	r2, [r5, #0]
 8008d2e:	461a      	mov	r2, r3
 8008d30:	f7f7 fcba 	bl	80006a8 <_write>
 8008d34:	1c43      	adds	r3, r0, #1
 8008d36:	d102      	bne.n	8008d3e <_write_r+0x1e>
 8008d38:	682b      	ldr	r3, [r5, #0]
 8008d3a:	b103      	cbz	r3, 8008d3e <_write_r+0x1e>
 8008d3c:	6023      	str	r3, [r4, #0]
 8008d3e:	bd38      	pop	{r3, r4, r5, pc}
 8008d40:	200025b4 	.word	0x200025b4

08008d44 <_close_r>:
 8008d44:	b538      	push	{r3, r4, r5, lr}
 8008d46:	4d06      	ldr	r5, [pc, #24]	; (8008d60 <_close_r+0x1c>)
 8008d48:	2300      	movs	r3, #0
 8008d4a:	4604      	mov	r4, r0
 8008d4c:	4608      	mov	r0, r1
 8008d4e:	602b      	str	r3, [r5, #0]
 8008d50:	f7f8 fa95 	bl	800127e <_close>
 8008d54:	1c43      	adds	r3, r0, #1
 8008d56:	d102      	bne.n	8008d5e <_close_r+0x1a>
 8008d58:	682b      	ldr	r3, [r5, #0]
 8008d5a:	b103      	cbz	r3, 8008d5e <_close_r+0x1a>
 8008d5c:	6023      	str	r3, [r4, #0]
 8008d5e:	bd38      	pop	{r3, r4, r5, pc}
 8008d60:	200025b4 	.word	0x200025b4

08008d64 <_fstat_r>:
 8008d64:	b538      	push	{r3, r4, r5, lr}
 8008d66:	4d07      	ldr	r5, [pc, #28]	; (8008d84 <_fstat_r+0x20>)
 8008d68:	2300      	movs	r3, #0
 8008d6a:	4604      	mov	r4, r0
 8008d6c:	4608      	mov	r0, r1
 8008d6e:	4611      	mov	r1, r2
 8008d70:	602b      	str	r3, [r5, #0]
 8008d72:	f7f8 fa90 	bl	8001296 <_fstat>
 8008d76:	1c43      	adds	r3, r0, #1
 8008d78:	d102      	bne.n	8008d80 <_fstat_r+0x1c>
 8008d7a:	682b      	ldr	r3, [r5, #0]
 8008d7c:	b103      	cbz	r3, 8008d80 <_fstat_r+0x1c>
 8008d7e:	6023      	str	r3, [r4, #0]
 8008d80:	bd38      	pop	{r3, r4, r5, pc}
 8008d82:	bf00      	nop
 8008d84:	200025b4 	.word	0x200025b4

08008d88 <_isatty_r>:
 8008d88:	b538      	push	{r3, r4, r5, lr}
 8008d8a:	4d06      	ldr	r5, [pc, #24]	; (8008da4 <_isatty_r+0x1c>)
 8008d8c:	2300      	movs	r3, #0
 8008d8e:	4604      	mov	r4, r0
 8008d90:	4608      	mov	r0, r1
 8008d92:	602b      	str	r3, [r5, #0]
 8008d94:	f7f8 fa8f 	bl	80012b6 <_isatty>
 8008d98:	1c43      	adds	r3, r0, #1
 8008d9a:	d102      	bne.n	8008da2 <_isatty_r+0x1a>
 8008d9c:	682b      	ldr	r3, [r5, #0]
 8008d9e:	b103      	cbz	r3, 8008da2 <_isatty_r+0x1a>
 8008da0:	6023      	str	r3, [r4, #0]
 8008da2:	bd38      	pop	{r3, r4, r5, pc}
 8008da4:	200025b4 	.word	0x200025b4

08008da8 <_lseek_r>:
 8008da8:	b538      	push	{r3, r4, r5, lr}
 8008daa:	4d07      	ldr	r5, [pc, #28]	; (8008dc8 <_lseek_r+0x20>)
 8008dac:	4604      	mov	r4, r0
 8008dae:	4608      	mov	r0, r1
 8008db0:	4611      	mov	r1, r2
 8008db2:	2200      	movs	r2, #0
 8008db4:	602a      	str	r2, [r5, #0]
 8008db6:	461a      	mov	r2, r3
 8008db8:	f7f8 fa88 	bl	80012cc <_lseek>
 8008dbc:	1c43      	adds	r3, r0, #1
 8008dbe:	d102      	bne.n	8008dc6 <_lseek_r+0x1e>
 8008dc0:	682b      	ldr	r3, [r5, #0]
 8008dc2:	b103      	cbz	r3, 8008dc6 <_lseek_r+0x1e>
 8008dc4:	6023      	str	r3, [r4, #0]
 8008dc6:	bd38      	pop	{r3, r4, r5, pc}
 8008dc8:	200025b4 	.word	0x200025b4

08008dcc <__malloc_lock>:
 8008dcc:	4801      	ldr	r0, [pc, #4]	; (8008dd4 <__malloc_lock+0x8>)
 8008dce:	f7ff bb55 	b.w	800847c <__retarget_lock_acquire_recursive>
 8008dd2:	bf00      	nop
 8008dd4:	200025ac 	.word	0x200025ac

08008dd8 <__malloc_unlock>:
 8008dd8:	4801      	ldr	r0, [pc, #4]	; (8008de0 <__malloc_unlock+0x8>)
 8008dda:	f7ff bb50 	b.w	800847e <__retarget_lock_release_recursive>
 8008dde:	bf00      	nop
 8008de0:	200025ac 	.word	0x200025ac

08008de4 <_read_r>:
 8008de4:	b538      	push	{r3, r4, r5, lr}
 8008de6:	4d07      	ldr	r5, [pc, #28]	; (8008e04 <_read_r+0x20>)
 8008de8:	4604      	mov	r4, r0
 8008dea:	4608      	mov	r0, r1
 8008dec:	4611      	mov	r1, r2
 8008dee:	2200      	movs	r2, #0
 8008df0:	602a      	str	r2, [r5, #0]
 8008df2:	461a      	mov	r2, r3
 8008df4:	f7f8 fa26 	bl	8001244 <_read>
 8008df8:	1c43      	adds	r3, r0, #1
 8008dfa:	d102      	bne.n	8008e02 <_read_r+0x1e>
 8008dfc:	682b      	ldr	r3, [r5, #0]
 8008dfe:	b103      	cbz	r3, 8008e02 <_read_r+0x1e>
 8008e00:	6023      	str	r3, [r4, #0]
 8008e02:	bd38      	pop	{r3, r4, r5, pc}
 8008e04:	200025b4 	.word	0x200025b4

08008e08 <_init>:
 8008e08:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008e0a:	bf00      	nop
 8008e0c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008e0e:	bc08      	pop	{r3}
 8008e10:	469e      	mov	lr, r3
 8008e12:	4770      	bx	lr

08008e14 <_fini>:
 8008e14:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008e16:	bf00      	nop
 8008e18:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008e1a:	bc08      	pop	{r3}
 8008e1c:	469e      	mov	lr, r3
 8008e1e:	4770      	bx	lr
