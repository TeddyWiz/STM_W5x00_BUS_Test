
stm_W6100_bus.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000002cc  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000079d8  080002d0  080002d0  000102d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000214  08007ca8  08007ca8  00017ca8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  08007ebc  08007ebc  00017ebc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000004  08007ec4  08007ec4  00017ec4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .fini_array   00000004  08007ec8  08007ec8  00017ec8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .data         0000009c  20000000  08007ecc  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .bss          00002b88  2000009c  08007f68  0002009c  2**2
                  ALLOC
  8 ._user_heap_stack 00000604  20002c24  08007f68  00022c24  2**0
                  ALLOC
  9 .ARM.attributes 0000002e  00000000  00000000  0002009c  2**0
                  CONTENTS, READONLY
 10 .debug_info   0001f5ff  00000000  00000000  000200ca  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 11 .debug_abbrev 0000381f  00000000  00000000  0003f6c9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_aranges 00001068  00000000  00000000  00042ee8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_ranges 00000f50  00000000  00000000  00043f50  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_macro  0003474b  00000000  00000000  00044ea0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_line   00013c1b  00000000  00000000  000795eb  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_str    0014d4ec  00000000  00000000  0008d206  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .comment      00000053  00000000  00000000  001da6f2  2**0
                  CONTENTS, READONLY
 18 .debug_frame  00004bf4  00000000  00000000  001da748  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080002d0 <__do_global_dtors_aux>:
 80002d0:	b510      	push	{r4, lr}
 80002d2:	4c05      	ldr	r4, [pc, #20]	; (80002e8 <__do_global_dtors_aux+0x18>)
 80002d4:	7823      	ldrb	r3, [r4, #0]
 80002d6:	b933      	cbnz	r3, 80002e6 <__do_global_dtors_aux+0x16>
 80002d8:	4b04      	ldr	r3, [pc, #16]	; (80002ec <__do_global_dtors_aux+0x1c>)
 80002da:	b113      	cbz	r3, 80002e2 <__do_global_dtors_aux+0x12>
 80002dc:	4804      	ldr	r0, [pc, #16]	; (80002f0 <__do_global_dtors_aux+0x20>)
 80002de:	f3af 8000 	nop.w
 80002e2:	2301      	movs	r3, #1
 80002e4:	7023      	strb	r3, [r4, #0]
 80002e6:	bd10      	pop	{r4, pc}
 80002e8:	2000009c 	.word	0x2000009c
 80002ec:	00000000 	.word	0x00000000
 80002f0:	08007c90 	.word	0x08007c90

080002f4 <frame_dummy>:
 80002f4:	b508      	push	{r3, lr}
 80002f6:	4b03      	ldr	r3, [pc, #12]	; (8000304 <frame_dummy+0x10>)
 80002f8:	b11b      	cbz	r3, 8000302 <frame_dummy+0xe>
 80002fa:	4903      	ldr	r1, [pc, #12]	; (8000308 <frame_dummy+0x14>)
 80002fc:	4803      	ldr	r0, [pc, #12]	; (800030c <frame_dummy+0x18>)
 80002fe:	f3af 8000 	nop.w
 8000302:	bd08      	pop	{r3, pc}
 8000304:	00000000 	.word	0x00000000
 8000308:	200000a0 	.word	0x200000a0
 800030c:	08007c90 	.word	0x08007c90

08000310 <memchr>:
 8000310:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000314:	2a10      	cmp	r2, #16
 8000316:	db2b      	blt.n	8000370 <memchr+0x60>
 8000318:	f010 0f07 	tst.w	r0, #7
 800031c:	d008      	beq.n	8000330 <memchr+0x20>
 800031e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000322:	3a01      	subs	r2, #1
 8000324:	428b      	cmp	r3, r1
 8000326:	d02d      	beq.n	8000384 <memchr+0x74>
 8000328:	f010 0f07 	tst.w	r0, #7
 800032c:	b342      	cbz	r2, 8000380 <memchr+0x70>
 800032e:	d1f6      	bne.n	800031e <memchr+0xe>
 8000330:	b4f0      	push	{r4, r5, r6, r7}
 8000332:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000336:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800033a:	f022 0407 	bic.w	r4, r2, #7
 800033e:	f07f 0700 	mvns.w	r7, #0
 8000342:	2300      	movs	r3, #0
 8000344:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000348:	3c08      	subs	r4, #8
 800034a:	ea85 0501 	eor.w	r5, r5, r1
 800034e:	ea86 0601 	eor.w	r6, r6, r1
 8000352:	fa85 f547 	uadd8	r5, r5, r7
 8000356:	faa3 f587 	sel	r5, r3, r7
 800035a:	fa86 f647 	uadd8	r6, r6, r7
 800035e:	faa5 f687 	sel	r6, r5, r7
 8000362:	b98e      	cbnz	r6, 8000388 <memchr+0x78>
 8000364:	d1ee      	bne.n	8000344 <memchr+0x34>
 8000366:	bcf0      	pop	{r4, r5, r6, r7}
 8000368:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800036c:	f002 0207 	and.w	r2, r2, #7
 8000370:	b132      	cbz	r2, 8000380 <memchr+0x70>
 8000372:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000376:	3a01      	subs	r2, #1
 8000378:	ea83 0301 	eor.w	r3, r3, r1
 800037c:	b113      	cbz	r3, 8000384 <memchr+0x74>
 800037e:	d1f8      	bne.n	8000372 <memchr+0x62>
 8000380:	2000      	movs	r0, #0
 8000382:	4770      	bx	lr
 8000384:	3801      	subs	r0, #1
 8000386:	4770      	bx	lr
 8000388:	2d00      	cmp	r5, #0
 800038a:	bf06      	itte	eq
 800038c:	4635      	moveq	r5, r6
 800038e:	3803      	subeq	r0, #3
 8000390:	3807      	subne	r0, #7
 8000392:	f015 0f01 	tst.w	r5, #1
 8000396:	d107      	bne.n	80003a8 <memchr+0x98>
 8000398:	3001      	adds	r0, #1
 800039a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800039e:	bf02      	ittt	eq
 80003a0:	3001      	addeq	r0, #1
 80003a2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80003a6:	3001      	addeq	r0, #1
 80003a8:	bcf0      	pop	{r4, r5, r6, r7}
 80003aa:	3801      	subs	r0, #1
 80003ac:	4770      	bx	lr
 80003ae:	bf00      	nop

080003b0 <__aeabi_uldivmod>:
 80003b0:	b953      	cbnz	r3, 80003c8 <__aeabi_uldivmod+0x18>
 80003b2:	b94a      	cbnz	r2, 80003c8 <__aeabi_uldivmod+0x18>
 80003b4:	2900      	cmp	r1, #0
 80003b6:	bf08      	it	eq
 80003b8:	2800      	cmpeq	r0, #0
 80003ba:	bf1c      	itt	ne
 80003bc:	f04f 31ff 	movne.w	r1, #4294967295
 80003c0:	f04f 30ff 	movne.w	r0, #4294967295
 80003c4:	f000 b96e 	b.w	80006a4 <__aeabi_idiv0>
 80003c8:	f1ad 0c08 	sub.w	ip, sp, #8
 80003cc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80003d0:	f000 f806 	bl	80003e0 <__udivmoddi4>
 80003d4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80003d8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80003dc:	b004      	add	sp, #16
 80003de:	4770      	bx	lr

080003e0 <__udivmoddi4>:
 80003e0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80003e4:	9d08      	ldr	r5, [sp, #32]
 80003e6:	4604      	mov	r4, r0
 80003e8:	468c      	mov	ip, r1
 80003ea:	2b00      	cmp	r3, #0
 80003ec:	f040 8083 	bne.w	80004f6 <__udivmoddi4+0x116>
 80003f0:	428a      	cmp	r2, r1
 80003f2:	4617      	mov	r7, r2
 80003f4:	d947      	bls.n	8000486 <__udivmoddi4+0xa6>
 80003f6:	fab2 f282 	clz	r2, r2
 80003fa:	b142      	cbz	r2, 800040e <__udivmoddi4+0x2e>
 80003fc:	f1c2 0020 	rsb	r0, r2, #32
 8000400:	fa24 f000 	lsr.w	r0, r4, r0
 8000404:	4091      	lsls	r1, r2
 8000406:	4097      	lsls	r7, r2
 8000408:	ea40 0c01 	orr.w	ip, r0, r1
 800040c:	4094      	lsls	r4, r2
 800040e:	ea4f 4817 	mov.w	r8, r7, lsr #16
 8000412:	0c23      	lsrs	r3, r4, #16
 8000414:	fbbc f6f8 	udiv	r6, ip, r8
 8000418:	fa1f fe87 	uxth.w	lr, r7
 800041c:	fb08 c116 	mls	r1, r8, r6, ip
 8000420:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000424:	fb06 f10e 	mul.w	r1, r6, lr
 8000428:	4299      	cmp	r1, r3
 800042a:	d909      	bls.n	8000440 <__udivmoddi4+0x60>
 800042c:	18fb      	adds	r3, r7, r3
 800042e:	f106 30ff 	add.w	r0, r6, #4294967295
 8000432:	f080 8119 	bcs.w	8000668 <__udivmoddi4+0x288>
 8000436:	4299      	cmp	r1, r3
 8000438:	f240 8116 	bls.w	8000668 <__udivmoddi4+0x288>
 800043c:	3e02      	subs	r6, #2
 800043e:	443b      	add	r3, r7
 8000440:	1a5b      	subs	r3, r3, r1
 8000442:	b2a4      	uxth	r4, r4
 8000444:	fbb3 f0f8 	udiv	r0, r3, r8
 8000448:	fb08 3310 	mls	r3, r8, r0, r3
 800044c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000450:	fb00 fe0e 	mul.w	lr, r0, lr
 8000454:	45a6      	cmp	lr, r4
 8000456:	d909      	bls.n	800046c <__udivmoddi4+0x8c>
 8000458:	193c      	adds	r4, r7, r4
 800045a:	f100 33ff 	add.w	r3, r0, #4294967295
 800045e:	f080 8105 	bcs.w	800066c <__udivmoddi4+0x28c>
 8000462:	45a6      	cmp	lr, r4
 8000464:	f240 8102 	bls.w	800066c <__udivmoddi4+0x28c>
 8000468:	3802      	subs	r0, #2
 800046a:	443c      	add	r4, r7
 800046c:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000470:	eba4 040e 	sub.w	r4, r4, lr
 8000474:	2600      	movs	r6, #0
 8000476:	b11d      	cbz	r5, 8000480 <__udivmoddi4+0xa0>
 8000478:	40d4      	lsrs	r4, r2
 800047a:	2300      	movs	r3, #0
 800047c:	e9c5 4300 	strd	r4, r3, [r5]
 8000480:	4631      	mov	r1, r6
 8000482:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000486:	b902      	cbnz	r2, 800048a <__udivmoddi4+0xaa>
 8000488:	deff      	udf	#255	; 0xff
 800048a:	fab2 f282 	clz	r2, r2
 800048e:	2a00      	cmp	r2, #0
 8000490:	d150      	bne.n	8000534 <__udivmoddi4+0x154>
 8000492:	1bcb      	subs	r3, r1, r7
 8000494:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000498:	fa1f f887 	uxth.w	r8, r7
 800049c:	2601      	movs	r6, #1
 800049e:	fbb3 fcfe 	udiv	ip, r3, lr
 80004a2:	0c21      	lsrs	r1, r4, #16
 80004a4:	fb0e 331c 	mls	r3, lr, ip, r3
 80004a8:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80004ac:	fb08 f30c 	mul.w	r3, r8, ip
 80004b0:	428b      	cmp	r3, r1
 80004b2:	d907      	bls.n	80004c4 <__udivmoddi4+0xe4>
 80004b4:	1879      	adds	r1, r7, r1
 80004b6:	f10c 30ff 	add.w	r0, ip, #4294967295
 80004ba:	d202      	bcs.n	80004c2 <__udivmoddi4+0xe2>
 80004bc:	428b      	cmp	r3, r1
 80004be:	f200 80e9 	bhi.w	8000694 <__udivmoddi4+0x2b4>
 80004c2:	4684      	mov	ip, r0
 80004c4:	1ac9      	subs	r1, r1, r3
 80004c6:	b2a3      	uxth	r3, r4
 80004c8:	fbb1 f0fe 	udiv	r0, r1, lr
 80004cc:	fb0e 1110 	mls	r1, lr, r0, r1
 80004d0:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 80004d4:	fb08 f800 	mul.w	r8, r8, r0
 80004d8:	45a0      	cmp	r8, r4
 80004da:	d907      	bls.n	80004ec <__udivmoddi4+0x10c>
 80004dc:	193c      	adds	r4, r7, r4
 80004de:	f100 33ff 	add.w	r3, r0, #4294967295
 80004e2:	d202      	bcs.n	80004ea <__udivmoddi4+0x10a>
 80004e4:	45a0      	cmp	r8, r4
 80004e6:	f200 80d9 	bhi.w	800069c <__udivmoddi4+0x2bc>
 80004ea:	4618      	mov	r0, r3
 80004ec:	eba4 0408 	sub.w	r4, r4, r8
 80004f0:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 80004f4:	e7bf      	b.n	8000476 <__udivmoddi4+0x96>
 80004f6:	428b      	cmp	r3, r1
 80004f8:	d909      	bls.n	800050e <__udivmoddi4+0x12e>
 80004fa:	2d00      	cmp	r5, #0
 80004fc:	f000 80b1 	beq.w	8000662 <__udivmoddi4+0x282>
 8000500:	2600      	movs	r6, #0
 8000502:	e9c5 0100 	strd	r0, r1, [r5]
 8000506:	4630      	mov	r0, r6
 8000508:	4631      	mov	r1, r6
 800050a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800050e:	fab3 f683 	clz	r6, r3
 8000512:	2e00      	cmp	r6, #0
 8000514:	d14a      	bne.n	80005ac <__udivmoddi4+0x1cc>
 8000516:	428b      	cmp	r3, r1
 8000518:	d302      	bcc.n	8000520 <__udivmoddi4+0x140>
 800051a:	4282      	cmp	r2, r0
 800051c:	f200 80b8 	bhi.w	8000690 <__udivmoddi4+0x2b0>
 8000520:	1a84      	subs	r4, r0, r2
 8000522:	eb61 0103 	sbc.w	r1, r1, r3
 8000526:	2001      	movs	r0, #1
 8000528:	468c      	mov	ip, r1
 800052a:	2d00      	cmp	r5, #0
 800052c:	d0a8      	beq.n	8000480 <__udivmoddi4+0xa0>
 800052e:	e9c5 4c00 	strd	r4, ip, [r5]
 8000532:	e7a5      	b.n	8000480 <__udivmoddi4+0xa0>
 8000534:	f1c2 0320 	rsb	r3, r2, #32
 8000538:	fa20 f603 	lsr.w	r6, r0, r3
 800053c:	4097      	lsls	r7, r2
 800053e:	fa01 f002 	lsl.w	r0, r1, r2
 8000542:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000546:	40d9      	lsrs	r1, r3
 8000548:	4330      	orrs	r0, r6
 800054a:	0c03      	lsrs	r3, r0, #16
 800054c:	fbb1 f6fe 	udiv	r6, r1, lr
 8000550:	fa1f f887 	uxth.w	r8, r7
 8000554:	fb0e 1116 	mls	r1, lr, r6, r1
 8000558:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800055c:	fb06 f108 	mul.w	r1, r6, r8
 8000560:	4299      	cmp	r1, r3
 8000562:	fa04 f402 	lsl.w	r4, r4, r2
 8000566:	d909      	bls.n	800057c <__udivmoddi4+0x19c>
 8000568:	18fb      	adds	r3, r7, r3
 800056a:	f106 3cff 	add.w	ip, r6, #4294967295
 800056e:	f080 808d 	bcs.w	800068c <__udivmoddi4+0x2ac>
 8000572:	4299      	cmp	r1, r3
 8000574:	f240 808a 	bls.w	800068c <__udivmoddi4+0x2ac>
 8000578:	3e02      	subs	r6, #2
 800057a:	443b      	add	r3, r7
 800057c:	1a5b      	subs	r3, r3, r1
 800057e:	b281      	uxth	r1, r0
 8000580:	fbb3 f0fe 	udiv	r0, r3, lr
 8000584:	fb0e 3310 	mls	r3, lr, r0, r3
 8000588:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800058c:	fb00 f308 	mul.w	r3, r0, r8
 8000590:	428b      	cmp	r3, r1
 8000592:	d907      	bls.n	80005a4 <__udivmoddi4+0x1c4>
 8000594:	1879      	adds	r1, r7, r1
 8000596:	f100 3cff 	add.w	ip, r0, #4294967295
 800059a:	d273      	bcs.n	8000684 <__udivmoddi4+0x2a4>
 800059c:	428b      	cmp	r3, r1
 800059e:	d971      	bls.n	8000684 <__udivmoddi4+0x2a4>
 80005a0:	3802      	subs	r0, #2
 80005a2:	4439      	add	r1, r7
 80005a4:	1acb      	subs	r3, r1, r3
 80005a6:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 80005aa:	e778      	b.n	800049e <__udivmoddi4+0xbe>
 80005ac:	f1c6 0c20 	rsb	ip, r6, #32
 80005b0:	fa03 f406 	lsl.w	r4, r3, r6
 80005b4:	fa22 f30c 	lsr.w	r3, r2, ip
 80005b8:	431c      	orrs	r4, r3
 80005ba:	fa20 f70c 	lsr.w	r7, r0, ip
 80005be:	fa01 f306 	lsl.w	r3, r1, r6
 80005c2:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 80005c6:	fa21 f10c 	lsr.w	r1, r1, ip
 80005ca:	431f      	orrs	r7, r3
 80005cc:	0c3b      	lsrs	r3, r7, #16
 80005ce:	fbb1 f9fe 	udiv	r9, r1, lr
 80005d2:	fa1f f884 	uxth.w	r8, r4
 80005d6:	fb0e 1119 	mls	r1, lr, r9, r1
 80005da:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 80005de:	fb09 fa08 	mul.w	sl, r9, r8
 80005e2:	458a      	cmp	sl, r1
 80005e4:	fa02 f206 	lsl.w	r2, r2, r6
 80005e8:	fa00 f306 	lsl.w	r3, r0, r6
 80005ec:	d908      	bls.n	8000600 <__udivmoddi4+0x220>
 80005ee:	1861      	adds	r1, r4, r1
 80005f0:	f109 30ff 	add.w	r0, r9, #4294967295
 80005f4:	d248      	bcs.n	8000688 <__udivmoddi4+0x2a8>
 80005f6:	458a      	cmp	sl, r1
 80005f8:	d946      	bls.n	8000688 <__udivmoddi4+0x2a8>
 80005fa:	f1a9 0902 	sub.w	r9, r9, #2
 80005fe:	4421      	add	r1, r4
 8000600:	eba1 010a 	sub.w	r1, r1, sl
 8000604:	b2bf      	uxth	r7, r7
 8000606:	fbb1 f0fe 	udiv	r0, r1, lr
 800060a:	fb0e 1110 	mls	r1, lr, r0, r1
 800060e:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 8000612:	fb00 f808 	mul.w	r8, r0, r8
 8000616:	45b8      	cmp	r8, r7
 8000618:	d907      	bls.n	800062a <__udivmoddi4+0x24a>
 800061a:	19e7      	adds	r7, r4, r7
 800061c:	f100 31ff 	add.w	r1, r0, #4294967295
 8000620:	d22e      	bcs.n	8000680 <__udivmoddi4+0x2a0>
 8000622:	45b8      	cmp	r8, r7
 8000624:	d92c      	bls.n	8000680 <__udivmoddi4+0x2a0>
 8000626:	3802      	subs	r0, #2
 8000628:	4427      	add	r7, r4
 800062a:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 800062e:	eba7 0708 	sub.w	r7, r7, r8
 8000632:	fba0 8902 	umull	r8, r9, r0, r2
 8000636:	454f      	cmp	r7, r9
 8000638:	46c6      	mov	lr, r8
 800063a:	4649      	mov	r1, r9
 800063c:	d31a      	bcc.n	8000674 <__udivmoddi4+0x294>
 800063e:	d017      	beq.n	8000670 <__udivmoddi4+0x290>
 8000640:	b15d      	cbz	r5, 800065a <__udivmoddi4+0x27a>
 8000642:	ebb3 020e 	subs.w	r2, r3, lr
 8000646:	eb67 0701 	sbc.w	r7, r7, r1
 800064a:	fa07 fc0c 	lsl.w	ip, r7, ip
 800064e:	40f2      	lsrs	r2, r6
 8000650:	ea4c 0202 	orr.w	r2, ip, r2
 8000654:	40f7      	lsrs	r7, r6
 8000656:	e9c5 2700 	strd	r2, r7, [r5]
 800065a:	2600      	movs	r6, #0
 800065c:	4631      	mov	r1, r6
 800065e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000662:	462e      	mov	r6, r5
 8000664:	4628      	mov	r0, r5
 8000666:	e70b      	b.n	8000480 <__udivmoddi4+0xa0>
 8000668:	4606      	mov	r6, r0
 800066a:	e6e9      	b.n	8000440 <__udivmoddi4+0x60>
 800066c:	4618      	mov	r0, r3
 800066e:	e6fd      	b.n	800046c <__udivmoddi4+0x8c>
 8000670:	4543      	cmp	r3, r8
 8000672:	d2e5      	bcs.n	8000640 <__udivmoddi4+0x260>
 8000674:	ebb8 0e02 	subs.w	lr, r8, r2
 8000678:	eb69 0104 	sbc.w	r1, r9, r4
 800067c:	3801      	subs	r0, #1
 800067e:	e7df      	b.n	8000640 <__udivmoddi4+0x260>
 8000680:	4608      	mov	r0, r1
 8000682:	e7d2      	b.n	800062a <__udivmoddi4+0x24a>
 8000684:	4660      	mov	r0, ip
 8000686:	e78d      	b.n	80005a4 <__udivmoddi4+0x1c4>
 8000688:	4681      	mov	r9, r0
 800068a:	e7b9      	b.n	8000600 <__udivmoddi4+0x220>
 800068c:	4666      	mov	r6, ip
 800068e:	e775      	b.n	800057c <__udivmoddi4+0x19c>
 8000690:	4630      	mov	r0, r6
 8000692:	e74a      	b.n	800052a <__udivmoddi4+0x14a>
 8000694:	f1ac 0c02 	sub.w	ip, ip, #2
 8000698:	4439      	add	r1, r7
 800069a:	e713      	b.n	80004c4 <__udivmoddi4+0xe4>
 800069c:	3802      	subs	r0, #2
 800069e:	443c      	add	r4, r7
 80006a0:	e724      	b.n	80004ec <__udivmoddi4+0x10c>
 80006a2:	bf00      	nop

080006a4 <__aeabi_idiv0>:
 80006a4:	4770      	bx	lr
 80006a6:	bf00      	nop

080006a8 <Fill_Buffer>:
#define WRITE_READ_ADDR     ((uint32_t)0x0800)
uint32_t aTxBuffer[BUFFER_SIZE];
uint32_t aRxBuffer[BUFFER_SIZE];

static void Fill_Buffer(uint32_t *pBuffer, uint32_t uwBufferLength, uint16_t uwOffset)
{
 80006a8:	b480      	push	{r7}
 80006aa:	b087      	sub	sp, #28
 80006ac:	af00      	add	r7, sp, #0
 80006ae:	60f8      	str	r0, [r7, #12]
 80006b0:	60b9      	str	r1, [r7, #8]
 80006b2:	4613      	mov	r3, r2
 80006b4:	80fb      	strh	r3, [r7, #6]
  uint16_t tmpIndex = 0;
 80006b6:	2300      	movs	r3, #0
 80006b8:	82fb      	strh	r3, [r7, #22]

  /* Put in global buffer different values */
  for (tmpIndex = 0; tmpIndex < uwBufferLength; tmpIndex++)
 80006ba:	2300      	movs	r3, #0
 80006bc:	82fb      	strh	r3, [r7, #22]
 80006be:	e00b      	b.n	80006d8 <Fill_Buffer+0x30>
  {
    pBuffer[tmpIndex] = tmpIndex + uwOffset;
 80006c0:	8afa      	ldrh	r2, [r7, #22]
 80006c2:	88fb      	ldrh	r3, [r7, #6]
 80006c4:	18d1      	adds	r1, r2, r3
 80006c6:	8afb      	ldrh	r3, [r7, #22]
 80006c8:	009b      	lsls	r3, r3, #2
 80006ca:	68fa      	ldr	r2, [r7, #12]
 80006cc:	4413      	add	r3, r2
 80006ce:	460a      	mov	r2, r1
 80006d0:	601a      	str	r2, [r3, #0]
  for (tmpIndex = 0; tmpIndex < uwBufferLength; tmpIndex++)
 80006d2:	8afb      	ldrh	r3, [r7, #22]
 80006d4:	3301      	adds	r3, #1
 80006d6:	82fb      	strh	r3, [r7, #22]
 80006d8:	8afb      	ldrh	r3, [r7, #22]
 80006da:	68ba      	ldr	r2, [r7, #8]
 80006dc:	429a      	cmp	r2, r3
 80006de:	d8ef      	bhi.n	80006c0 <Fill_Buffer+0x18>
  }
}
 80006e0:	bf00      	nop
 80006e2:	bf00      	nop
 80006e4:	371c      	adds	r7, #28
 80006e6:	46bd      	mov	sp, r7
 80006e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006ec:	4770      	bx	lr
	...

080006f0 <_write>:
    #endif
  #endif

  #ifdef True_STD
  int _write(int fd, char *str, int len)
  {
 80006f0:	b580      	push	{r7, lr}
 80006f2:	b086      	sub	sp, #24
 80006f4:	af00      	add	r7, sp, #0
 80006f6:	60f8      	str	r0, [r7, #12]
 80006f8:	60b9      	str	r1, [r7, #8]
 80006fa:	607a      	str	r2, [r7, #4]
    for(int i=0; i<len; i++)
 80006fc:	2300      	movs	r3, #0
 80006fe:	617b      	str	r3, [r7, #20]
 8000700:	e00b      	b.n	800071a <_write+0x2a>
    {
      HAL_UART_Transmit(&huart3, (uint8_t *)&str[i], 1, 0xFFFF);
 8000702:	697b      	ldr	r3, [r7, #20]
 8000704:	68ba      	ldr	r2, [r7, #8]
 8000706:	18d1      	adds	r1, r2, r3
 8000708:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800070c:	2201      	movs	r2, #1
 800070e:	4807      	ldr	r0, [pc, #28]	; (800072c <_write+0x3c>)
 8000710:	f004 fba8 	bl	8004e64 <HAL_UART_Transmit>
    for(int i=0; i<len; i++)
 8000714:	697b      	ldr	r3, [r7, #20]
 8000716:	3301      	adds	r3, #1
 8000718:	617b      	str	r3, [r7, #20]
 800071a:	697a      	ldr	r2, [r7, #20]
 800071c:	687b      	ldr	r3, [r7, #4]
 800071e:	429a      	cmp	r2, r3
 8000720:	dbef      	blt.n	8000702 <_write+0x12>
    }
    return len;
 8000722:	687b      	ldr	r3, [r7, #4]
  }
 8000724:	4618      	mov	r0, r3
 8000726:	3718      	adds	r7, #24
 8000728:	46bd      	mov	sp, r7
 800072a:	bd80      	pop	{r7, pc}
 800072c:	200008cc 	.word	0x200008cc

08000730 <W6100BusWriteByte>:
	  {
		URX_BUF_Flag = 1;
	  }
 }
void W6100BusWriteByte(uint32_t addr, iodata_t data)
{
 8000730:	b480      	push	{r7}
 8000732:	b083      	sub	sp, #12
 8000734:	af00      	add	r7, sp, #0
 8000736:	6078      	str	r0, [r7, #4]
 8000738:	460b      	mov	r3, r1
 800073a:	70fb      	strb	r3, [r7, #3]
	#if 1	//teddy 210422
	(*(volatile uint32_t*)(addr)) = (uint8_t)(data);
 800073c:	687b      	ldr	r3, [r7, #4]
 800073e:	78fa      	ldrb	r2, [r7, #3]
 8000740:	601a      	str	r2, [r3, #0]
	Indata[0] = data;
	//printf("W%x:%x ",addr, data);
	if(HAL_SRAM_Write_8b(&hsram1, (uint32_t *)addr, (uint16_t *)data, 1) != HAL_OK)
		printf("BusWritError \r\n");
	#endif
}
 8000742:	bf00      	nop
 8000744:	370c      	adds	r7, #12
 8000746:	46bd      	mov	sp, r7
 8000748:	f85d 7b04 	ldr.w	r7, [sp], #4
 800074c:	4770      	bx	lr

0800074e <W6100BusReadByte>:

iodata_t W6100BusReadByte(uint32_t addr)
{
 800074e:	b480      	push	{r7}
 8000750:	b083      	sub	sp, #12
 8000752:	af00      	add	r7, sp, #0
 8000754:	6078      	str	r0, [r7, #4]
	#if 1	//teddy 210422
	return (*((volatile uint32_t*)(addr)));
 8000756:	687b      	ldr	r3, [r7, #4]
 8000758:	681b      	ldr	r3, [r3, #0]
 800075a:	b2db      	uxtb	r3, r3
	if(HAL_SRAM_Read_8b(&hsram1, (uint32_t *)addr, (uint16_t *)result, 1) != HAL_OK)
		printf("BussReadError \r\n");
	printf("R%x:%x ", addr, result[0]);
	return result[0];
	#endif
}
 800075c:	4618      	mov	r0, r3
 800075e:	370c      	adds	r7, #12
 8000760:	46bd      	mov	sp, r7
 8000762:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000766:	4770      	bx	lr

08000768 <W6100CsEnable>:
	if(HAL_SRAM_Read_8b(&hsram1, (uint32_t *)addr, pBuf, len) != HAL_OK)
			printf("BussReadError \r\n");

}
void W6100CsEnable(void)
{
 8000768:	b480      	push	{r7}
 800076a:	af00      	add	r7, sp, #0
	__HAL_LOCK(&hsram1);
 800076c:	4b09      	ldr	r3, [pc, #36]	; (8000794 <W6100CsEnable+0x2c>)
 800076e:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8000772:	2b01      	cmp	r3, #1
 8000774:	d008      	beq.n	8000788 <W6100CsEnable+0x20>
 8000776:	4b07      	ldr	r3, [pc, #28]	; (8000794 <W6100CsEnable+0x2c>)
 8000778:	2201      	movs	r2, #1
 800077a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	hsram1.State = HAL_SRAM_STATE_BUSY;
 800077e:	4b05      	ldr	r3, [pc, #20]	; (8000794 <W6100CsEnable+0x2c>)
 8000780:	2202      	movs	r2, #2
 8000782:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8000786:	e000      	b.n	800078a <W6100CsEnable+0x22>
	__HAL_LOCK(&hsram1);
 8000788:	bf00      	nop
}
 800078a:	46bd      	mov	sp, r7
 800078c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000790:	4770      	bx	lr
 8000792:	bf00      	nop
 8000794:	20000d5c 	.word	0x20000d5c

08000798 <W6100CsDisable>:

void W6100CsDisable(void)
{
 8000798:	b480      	push	{r7}
 800079a:	af00      	add	r7, sp, #0
	__HAL_UNLOCK(&hsram1);
 800079c:	4b06      	ldr	r3, [pc, #24]	; (80007b8 <W6100CsDisable+0x20>)
 800079e:	2200      	movs	r2, #0
 80007a0:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	hsram1.State = HAL_SRAM_STATE_READY;
 80007a4:	4b04      	ldr	r3, [pc, #16]	; (80007b8 <W6100CsDisable+0x20>)
 80007a6:	2201      	movs	r2, #1
 80007a8:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
}
 80007ac:	bf00      	nop
 80007ae:	46bd      	mov	sp, r7
 80007b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007b4:	4770      	bx	lr
 80007b6:	bf00      	nop
 80007b8:	20000d5c 	.word	0x20000d5c

080007bc <W6100Initialze>:

void W6100Initialze(void)
{
 80007bc:	b590      	push	{r4, r7, lr}
 80007be:	b087      	sub	sp, #28
 80007c0:	af00      	add	r7, sp, #0
#else
	/* Indirect bus method callback registration */
	#if defined BUS_DMA
		reg_wizchip_bus_cbfunc(W6100BusReadByte, W6100BusWriteByte, W6100BusReadBurst, W6100BusWriteBurst);
	#else
		reg_wizchip_bus_cbfunc(W6100BusReadByte, W6100BusWriteByte, 0, 0);
 80007c2:	2300      	movs	r3, #0
 80007c4:	2200      	movs	r2, #0
 80007c6:	491e      	ldr	r1, [pc, #120]	; (8000840 <W6100Initialze+0x84>)
 80007c8:	481e      	ldr	r0, [pc, #120]	; (8000844 <W6100Initialze+0x88>)
 80007ca:	f006 fa1d 	bl	8006c08 <reg_wizchip_bus_cbfunc>
	#endif
		reg_wizchip_cs_cbfunc(W6100CsEnable, W6100CsDisable);
 80007ce:	491e      	ldr	r1, [pc, #120]	; (8000848 <W6100Initialze+0x8c>)
 80007d0:	481e      	ldr	r0, [pc, #120]	; (800084c <W6100Initialze+0x90>)
 80007d2:	f006 f9f3 	bl	8006bbc <reg_wizchip_cs_cbfunc>
#endif
		uint8_t temp;
		unsigned char W6100_AdrSet[2][8] = {{2, 2, 2, 2, 2, 2, 2, 2}, {2, 2, 2, 2, 2, 2, 2, 2}};
 80007d6:	4b1e      	ldr	r3, [pc, #120]	; (8000850 <W6100Initialze+0x94>)
 80007d8:	1d3c      	adds	r4, r7, #4
 80007da:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80007dc:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
			{
				printf("Unknown PHY link status.\r\n");
			}
		} while (temp == PHY_LINK_OFF);
	 	#endif
		uint16_t RegTemp = 0;
 80007e0:	2300      	movs	r3, #0
 80007e2:	82fb      	strh	r3, [r7, #22]
		//RegTemp = (uint16_t)WIZCHIP_READ(_CIDR_);
		//printf("CIDR_ = %04x \r\n", RegTemp);	
		RegTemp = getCIDR();
 80007e4:	f04f 40c0 	mov.w	r0, #1610612736	; 0x60000000
 80007e8:	f006 f914 	bl	8006a14 <WIZCHIP_READ>
 80007ec:	4603      	mov	r3, r0
 80007ee:	b29b      	uxth	r3, r3
 80007f0:	021b      	lsls	r3, r3, #8
 80007f2:	b29c      	uxth	r4, r3
 80007f4:	4817      	ldr	r0, [pc, #92]	; (8000854 <W6100Initialze+0x98>)
 80007f6:	f006 f90d 	bl	8006a14 <WIZCHIP_READ>
 80007fa:	4603      	mov	r3, r0
 80007fc:	b29b      	uxth	r3, r3
 80007fe:	4423      	add	r3, r4
 8000800:	82fb      	strh	r3, [r7, #22]
		printf("CIDR = %d \r\n", RegTemp);
 8000802:	8afb      	ldrh	r3, [r7, #22]
 8000804:	4619      	mov	r1, r3
 8000806:	4814      	ldr	r0, [pc, #80]	; (8000858 <W6100Initialze+0x9c>)
 8000808:	f006 fa76 	bl	8006cf8 <iprintf>
		RegTemp = getVER();
 800080c:	4813      	ldr	r0, [pc, #76]	; (800085c <W6100Initialze+0xa0>)
 800080e:	f006 f901 	bl	8006a14 <WIZCHIP_READ>
 8000812:	4603      	mov	r3, r0
 8000814:	b29b      	uxth	r3, r3
 8000816:	021b      	lsls	r3, r3, #8
 8000818:	b29c      	uxth	r4, r3
 800081a:	4811      	ldr	r0, [pc, #68]	; (8000860 <W6100Initialze+0xa4>)
 800081c:	f006 f8fa 	bl	8006a14 <WIZCHIP_READ>
 8000820:	4603      	mov	r3, r0
 8000822:	b29b      	uxth	r3, r3
 8000824:	4423      	add	r3, r4
 8000826:	82fb      	strh	r3, [r7, #22]
		printf("VER = %d \r\n", RegTemp);
 8000828:	8afb      	ldrh	r3, [r7, #22]
 800082a:	4619      	mov	r1, r3
 800082c:	480d      	ldr	r0, [pc, #52]	; (8000864 <W6100Initialze+0xa8>)
 800082e:	f006 fa63 	bl	8006cf8 <iprintf>
		printf("PHY OK.\r\n");
 8000832:	480d      	ldr	r0, [pc, #52]	; (8000868 <W6100Initialze+0xac>)
 8000834:	f006 fae6 	bl	8006e04 <puts>
	
	
}
 8000838:	bf00      	nop
 800083a:	371c      	adds	r7, #28
 800083c:	46bd      	mov	sp, r7
 800083e:	bd90      	pop	{r4, r7, pc}
 8000840:	08000731 	.word	0x08000731
 8000844:	0800074f 	.word	0x0800074f
 8000848:	08000799 	.word	0x08000799
 800084c:	08000769 	.word	0x08000769
 8000850:	08007cf0 	.word	0x08007cf0
 8000854:	60000100 	.word	0x60000100
 8000858:	08007cc8 	.word	0x08007cc8
 800085c:	60000200 	.word	0x60000200
 8000860:	60000300 	.word	0x60000300
 8000864:	08007cd8 	.word	0x08007cd8
 8000868:	08007ce4 	.word	0x08007ce4

0800086c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800086c:	b580      	push	{r7, lr}
 800086e:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000870:	f000 fd84 	bl	800137c <HAL_Init>
  /* USER CODE BEGIN Init */
  
  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000874:	f000 f840 	bl	80008f8 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000878:	f000 f9d6 	bl	8000c28 <MX_GPIO_Init>
  MX_USART3_UART_Init();
 800087c:	f000 f91c 	bl	8000ab8 <MX_USART3_UART_Init>
  MX_USB_OTG_HS_USB_Init();
 8000880:	f000 f966 	bl	8000b50 <MX_USB_OTG_HS_USB_Init>
  MX_FMC_Init();
 8000884:	f000 f96c 	bl	8000b60 <MX_FMC_Init>
  MX_DMA2D_Init();
 8000888:	f000 f8dc 	bl	8000a44 <MX_DMA2D_Init>
  /* USER CODE BEGIN 2 */
  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_11|GPIO_PIN_3, GPIO_PIN_SET);
 800088c:	2201      	movs	r2, #1
 800088e:	f640 0108 	movw	r1, #2056	; 0x808
 8000892:	4815      	ldr	r0, [pc, #84]	; (80008e8 <main+0x7c>)
 8000894:	f001 ff66 	bl	8002764 <HAL_GPIO_WritePin>
  HAL_Delay(100);
 8000898:	2064      	movs	r0, #100	; 0x64
 800089a:	f000 fe01 	bl	80014a0 <HAL_Delay>
  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_11, GPIO_PIN_RESET);
 800089e:	2200      	movs	r2, #0
 80008a0:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80008a4:	4810      	ldr	r0, [pc, #64]	; (80008e8 <main+0x7c>)
 80008a6:	f001 ff5d 	bl	8002764 <HAL_GPIO_WritePin>
  HAL_Delay(500);
 80008aa:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 80008ae:	f000 fdf7 	bl	80014a0 <HAL_Delay>
  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_11, GPIO_PIN_SET);
 80008b2:	2201      	movs	r2, #1
 80008b4:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80008b8:	480b      	ldr	r0, [pc, #44]	; (80008e8 <main+0x7c>)
 80008ba:	f001 ff53 	bl	8002764 <HAL_GPIO_WritePin>
  HAL_Delay(500);
 80008be:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 80008c2:	f000 fded 	bl	80014a0 <HAL_Delay>
printf("Hello Start!!\r\n");
 80008c6:	4809      	ldr	r0, [pc, #36]	; (80008ec <main+0x80>)
 80008c8:	f006 fa9c 	bl	8006e04 <puts>
  Fill_Buffer(aTxBuffer, BUFFER_SIZE, 0xC20F);
 80008cc:	f24c 220f 	movw	r2, #49679	; 0xc20f
 80008d0:	f44f 7180 	mov.w	r1, #256	; 0x100
 80008d4:	4806      	ldr	r0, [pc, #24]	; (80008f0 <main+0x84>)
 80008d6:	f7ff fee7 	bl	80006a8 <Fill_Buffer>
  //HAL_SRAM_Write_16b(&hsram1, (uint32_t *)(SRAM_BANK_ADDR + WRITE_READ_ADDR), (uint16_t *)aTxBuffer, BUFFER_SIZE*2);

  W6100Initialze();
 80008da:	f7ff ff6f 	bl	80007bc <W6100Initialze>
  //ctlnetwork(CN_SET_NETINFO,&gWIZNETINFO);
  printf("Register value after W6100 initialize!\r\n");
 80008de:	4805      	ldr	r0, [pc, #20]	; (80008f4 <main+0x88>)
 80008e0:	f006 fa90 	bl	8006e04 <puts>
  //print_network_information();
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 80008e4:	e7fe      	b.n	80008e4 <main+0x78>
 80008e6:	bf00      	nop
 80008e8:	58020c00 	.word	0x58020c00
 80008ec:	08007d00 	.word	0x08007d00
 80008f0:	20002810 	.word	0x20002810
 80008f4:	08007d10 	.word	0x08007d10

080008f8 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80008f8:	b580      	push	{r7, lr}
 80008fa:	b0a4      	sub	sp, #144	; 0x90
 80008fc:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80008fe:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8000902:	224c      	movs	r2, #76	; 0x4c
 8000904:	2100      	movs	r1, #0
 8000906:	4618      	mov	r0, r3
 8000908:	f006 f9ee 	bl	8006ce8 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800090c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000910:	2220      	movs	r2, #32
 8000912:	2100      	movs	r1, #0
 8000914:	4618      	mov	r0, r3
 8000916:	f006 f9e7 	bl	8006ce8 <memset>
  RCC_CRSInitTypeDef RCC_CRSInitStruct = {0};
 800091a:	f107 030c 	add.w	r3, r7, #12
 800091e:	2200      	movs	r2, #0
 8000920:	601a      	str	r2, [r3, #0]
 8000922:	605a      	str	r2, [r3, #4]
 8000924:	609a      	str	r2, [r3, #8]
 8000926:	60da      	str	r2, [r3, #12]
 8000928:	611a      	str	r2, [r3, #16]
 800092a:	615a      	str	r2, [r3, #20]

  /** Supply configuration update enable
  */
  HAL_PWREx_ConfigSupply(PWR_LDO_SUPPLY);
 800092c:	2002      	movs	r0, #2
 800092e:	f001 ff33 	bl	8002798 <HAL_PWREx_ConfigSupply>
  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 8000932:	2300      	movs	r3, #0
 8000934:	60bb      	str	r3, [r7, #8]
 8000936:	4b41      	ldr	r3, [pc, #260]	; (8000a3c <SystemClock_Config+0x144>)
 8000938:	699b      	ldr	r3, [r3, #24]
 800093a:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 800093e:	4a3f      	ldr	r2, [pc, #252]	; (8000a3c <SystemClock_Config+0x144>)
 8000940:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000944:	6193      	str	r3, [r2, #24]
 8000946:	4b3d      	ldr	r3, [pc, #244]	; (8000a3c <SystemClock_Config+0x144>)
 8000948:	699b      	ldr	r3, [r3, #24]
 800094a:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 800094e:	60bb      	str	r3, [r7, #8]
 8000950:	68bb      	ldr	r3, [r7, #8]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 8000952:	bf00      	nop
 8000954:	4b39      	ldr	r3, [pc, #228]	; (8000a3c <SystemClock_Config+0x144>)
 8000956:	699b      	ldr	r3, [r3, #24]
 8000958:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800095c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8000960:	d1f8      	bne.n	8000954 <SystemClock_Config+0x5c>
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI48|RCC_OSCILLATORTYPE_CSI;
 8000962:	2330      	movs	r3, #48	; 0x30
 8000964:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.HSI48State = RCC_HSI48_ON;
 8000966:	2301      	movs	r3, #1
 8000968:	65fb      	str	r3, [r7, #92]	; 0x5c
  RCC_OscInitStruct.CSIState = RCC_CSI_ON;
 800096a:	2380      	movs	r3, #128	; 0x80
 800096c:	663b      	str	r3, [r7, #96]	; 0x60
  RCC_OscInitStruct.CSICalibrationValue = 16;
 800096e:	2310      	movs	r3, #16
 8000970:	667b      	str	r3, [r7, #100]	; 0x64
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000972:	2302      	movs	r3, #2
 8000974:	66bb      	str	r3, [r7, #104]	; 0x68
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_CSI;
 8000976:	2301      	movs	r3, #1
 8000978:	66fb      	str	r3, [r7, #108]	; 0x6c
  RCC_OscInitStruct.PLL.PLLM = 4;
 800097a:	2304      	movs	r3, #4
 800097c:	673b      	str	r3, [r7, #112]	; 0x70
  RCC_OscInitStruct.PLL.PLLN = 150;
 800097e:	2396      	movs	r3, #150	; 0x96
 8000980:	677b      	str	r3, [r7, #116]	; 0x74
  RCC_OscInitStruct.PLL.PLLP = 1;
 8000982:	2301      	movs	r3, #1
 8000984:	67bb      	str	r3, [r7, #120]	; 0x78
  RCC_OscInitStruct.PLL.PLLQ = 6;
 8000986:	2306      	movs	r3, #6
 8000988:	67fb      	str	r3, [r7, #124]	; 0x7c
  RCC_OscInitStruct.PLL.PLLR = 2;
 800098a:	2302      	movs	r3, #2
 800098c:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
  RCC_OscInitStruct.PLL.PLLRGE = RCC_PLL1VCIRANGE_0;
 8000990:	2300      	movs	r3, #0
 8000992:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  RCC_OscInitStruct.PLL.PLLVCOSEL = RCC_PLL1VCOMEDIUM;
 8000996:	2302      	movs	r3, #2
 8000998:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  RCC_OscInitStruct.PLL.PLLFRACN = 0;
 800099c:	2300      	movs	r3, #0
 800099e:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80009a2:	f107 0344 	add.w	r3, r7, #68	; 0x44
 80009a6:	4618      	mov	r0, r3
 80009a8:	f001 ff30 	bl	800280c <HAL_RCC_OscConfig>
 80009ac:	4603      	mov	r3, r0
 80009ae:	2b00      	cmp	r3, #0
 80009b0:	d001      	beq.n	80009b6 <SystemClock_Config+0xbe>
  {
    Error_Handler();
 80009b2:	f000 fa29 	bl	8000e08 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80009b6:	233f      	movs	r3, #63	; 0x3f
 80009b8:	627b      	str	r3, [r7, #36]	; 0x24
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
                              |RCC_CLOCKTYPE_D3PCLK1|RCC_CLOCKTYPE_D1PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80009ba:	2303      	movs	r3, #3
 80009bc:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV1;
 80009be:	2300      	movs	r3, #0
 80009c0:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV2;
 80009c2:	2308      	movs	r3, #8
 80009c4:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_ClkInitStruct.APB3CLKDivider = RCC_APB3_DIV2;
 80009c6:	2340      	movs	r3, #64	; 0x40
 80009c8:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV2;
 80009ca:	2340      	movs	r3, #64	; 0x40
 80009cc:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_ClkInitStruct.APB2CLKDivider = RCC_APB2_DIV2;
 80009ce:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80009d2:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_ClkInitStruct.APB4CLKDivider = RCC_APB4_DIV2;
 80009d4:	2340      	movs	r3, #64	; 0x40
 80009d6:	643b      	str	r3, [r7, #64]	; 0x40

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 80009d8:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80009dc:	2102      	movs	r1, #2
 80009de:	4618      	mov	r0, r3
 80009e0:	f002 faa2 	bl	8002f28 <HAL_RCC_ClockConfig>
 80009e4:	4603      	mov	r3, r0
 80009e6:	2b00      	cmp	r3, #0
 80009e8:	d001      	beq.n	80009ee <SystemClock_Config+0xf6>
  {
    Error_Handler();
 80009ea:	f000 fa0d 	bl	8000e08 <Error_Handler>
  }
  /** Enable the SYSCFG APB clock
  */
  __HAL_RCC_CRS_CLK_ENABLE();
 80009ee:	4b14      	ldr	r3, [pc, #80]	; (8000a40 <SystemClock_Config+0x148>)
 80009f0:	f8d3 30ec 	ldr.w	r3, [r3, #236]	; 0xec
 80009f4:	4a12      	ldr	r2, [pc, #72]	; (8000a40 <SystemClock_Config+0x148>)
 80009f6:	f043 0302 	orr.w	r3, r3, #2
 80009fa:	f8c2 30ec 	str.w	r3, [r2, #236]	; 0xec
 80009fe:	4b10      	ldr	r3, [pc, #64]	; (8000a40 <SystemClock_Config+0x148>)
 8000a00:	f8d3 30ec 	ldr.w	r3, [r3, #236]	; 0xec
 8000a04:	f003 0302 	and.w	r3, r3, #2
 8000a08:	607b      	str	r3, [r7, #4]
 8000a0a:	687b      	ldr	r3, [r7, #4]
  /** Configures CRS
  */
  RCC_CRSInitStruct.Prescaler = RCC_CRS_SYNC_DIV1;
 8000a0c:	2300      	movs	r3, #0
 8000a0e:	60fb      	str	r3, [r7, #12]
  RCC_CRSInitStruct.Source = RCC_CRS_SYNC_SOURCE_USB2;
 8000a10:	f04f 5340 	mov.w	r3, #805306368	; 0x30000000
 8000a14:	613b      	str	r3, [r7, #16]
  RCC_CRSInitStruct.Polarity = RCC_CRS_SYNC_POLARITY_RISING;
 8000a16:	2300      	movs	r3, #0
 8000a18:	617b      	str	r3, [r7, #20]
  RCC_CRSInitStruct.ReloadValue = __HAL_RCC_CRS_RELOADVALUE_CALCULATE(48000000,1000);
 8000a1a:	f64b 337f 	movw	r3, #47999	; 0xbb7f
 8000a1e:	61bb      	str	r3, [r7, #24]
  RCC_CRSInitStruct.ErrorLimitValue = 34;
 8000a20:	2322      	movs	r3, #34	; 0x22
 8000a22:	61fb      	str	r3, [r7, #28]
  RCC_CRSInitStruct.HSI48CalibrationValue = 32;
 8000a24:	2320      	movs	r3, #32
 8000a26:	623b      	str	r3, [r7, #32]

  HAL_RCCEx_CRSConfig(&RCC_CRSInitStruct);
 8000a28:	f107 030c 	add.w	r3, r7, #12
 8000a2c:	4618      	mov	r0, r3
 8000a2e:	f003 ffbf 	bl	80049b0 <HAL_RCCEx_CRSConfig>
}
 8000a32:	bf00      	nop
 8000a34:	3790      	adds	r7, #144	; 0x90
 8000a36:	46bd      	mov	sp, r7
 8000a38:	bd80      	pop	{r7, pc}
 8000a3a:	bf00      	nop
 8000a3c:	58024800 	.word	0x58024800
 8000a40:	58024400 	.word	0x58024400

08000a44 <MX_DMA2D_Init>:
  * @brief DMA2D Initialization Function
  * @param None
  * @retval None
  */
static void MX_DMA2D_Init(void)
{
 8000a44:	b580      	push	{r7, lr}
 8000a46:	af00      	add	r7, sp, #0
  /* USER CODE END DMA2D_Init 0 */

  /* USER CODE BEGIN DMA2D_Init 1 */

  /* USER CODE END DMA2D_Init 1 */
  hdma2d.Instance = DMA2D;
 8000a48:	4b19      	ldr	r3, [pc, #100]	; (8000ab0 <MX_DMA2D_Init+0x6c>)
 8000a4a:	4a1a      	ldr	r2, [pc, #104]	; (8000ab4 <MX_DMA2D_Init+0x70>)
 8000a4c:	601a      	str	r2, [r3, #0]
  hdma2d.Init.Mode = DMA2D_M2M;
 8000a4e:	4b18      	ldr	r3, [pc, #96]	; (8000ab0 <MX_DMA2D_Init+0x6c>)
 8000a50:	2200      	movs	r2, #0
 8000a52:	605a      	str	r2, [r3, #4]
  hdma2d.Init.ColorMode = DMA2D_OUTPUT_ARGB8888;
 8000a54:	4b16      	ldr	r3, [pc, #88]	; (8000ab0 <MX_DMA2D_Init+0x6c>)
 8000a56:	2200      	movs	r2, #0
 8000a58:	609a      	str	r2, [r3, #8]
  hdma2d.Init.OutputOffset = 0;
 8000a5a:	4b15      	ldr	r3, [pc, #84]	; (8000ab0 <MX_DMA2D_Init+0x6c>)
 8000a5c:	2200      	movs	r2, #0
 8000a5e:	60da      	str	r2, [r3, #12]
  hdma2d.LayerCfg[1].InputOffset = 0;
 8000a60:	4b13      	ldr	r3, [pc, #76]	; (8000ab0 <MX_DMA2D_Init+0x6c>)
 8000a62:	2200      	movs	r2, #0
 8000a64:	645a      	str	r2, [r3, #68]	; 0x44
  hdma2d.LayerCfg[1].InputColorMode = DMA2D_INPUT_ARGB8888;
 8000a66:	4b12      	ldr	r3, [pc, #72]	; (8000ab0 <MX_DMA2D_Init+0x6c>)
 8000a68:	2200      	movs	r2, #0
 8000a6a:	649a      	str	r2, [r3, #72]	; 0x48
  hdma2d.LayerCfg[1].AlphaMode = DMA2D_NO_MODIF_ALPHA;
 8000a6c:	4b10      	ldr	r3, [pc, #64]	; (8000ab0 <MX_DMA2D_Init+0x6c>)
 8000a6e:	2200      	movs	r2, #0
 8000a70:	64da      	str	r2, [r3, #76]	; 0x4c
  hdma2d.LayerCfg[1].InputAlpha = 0;
 8000a72:	4b0f      	ldr	r3, [pc, #60]	; (8000ab0 <MX_DMA2D_Init+0x6c>)
 8000a74:	2200      	movs	r2, #0
 8000a76:	651a      	str	r2, [r3, #80]	; 0x50
  hdma2d.LayerCfg[1].AlphaInverted = DMA2D_REGULAR_ALPHA;
 8000a78:	4b0d      	ldr	r3, [pc, #52]	; (8000ab0 <MX_DMA2D_Init+0x6c>)
 8000a7a:	2200      	movs	r2, #0
 8000a7c:	655a      	str	r2, [r3, #84]	; 0x54
  hdma2d.LayerCfg[1].RedBlueSwap = DMA2D_RB_REGULAR;
 8000a7e:	4b0c      	ldr	r3, [pc, #48]	; (8000ab0 <MX_DMA2D_Init+0x6c>)
 8000a80:	2200      	movs	r2, #0
 8000a82:	659a      	str	r2, [r3, #88]	; 0x58
  hdma2d.LayerCfg[1].ChromaSubSampling = DMA2D_NO_CSS;
 8000a84:	4b0a      	ldr	r3, [pc, #40]	; (8000ab0 <MX_DMA2D_Init+0x6c>)
 8000a86:	2200      	movs	r2, #0
 8000a88:	65da      	str	r2, [r3, #92]	; 0x5c
  if (HAL_DMA2D_Init(&hdma2d) != HAL_OK)
 8000a8a:	4809      	ldr	r0, [pc, #36]	; (8000ab0 <MX_DMA2D_Init+0x6c>)
 8000a8c:	f001 fbaa 	bl	80021e4 <HAL_DMA2D_Init>
 8000a90:	4603      	mov	r3, r0
 8000a92:	2b00      	cmp	r3, #0
 8000a94:	d001      	beq.n	8000a9a <MX_DMA2D_Init+0x56>
  {
    Error_Handler();
 8000a96:	f000 f9b7 	bl	8000e08 <Error_Handler>
  }
  if (HAL_DMA2D_ConfigLayer(&hdma2d, 1) != HAL_OK)
 8000a9a:	2101      	movs	r1, #1
 8000a9c:	4804      	ldr	r0, [pc, #16]	; (8000ab0 <MX_DMA2D_Init+0x6c>)
 8000a9e:	f001 fc05 	bl	80022ac <HAL_DMA2D_ConfigLayer>
 8000aa2:	4603      	mov	r3, r0
 8000aa4:	2b00      	cmp	r3, #0
 8000aa6:	d001      	beq.n	8000aac <MX_DMA2D_Init+0x68>
  {
    Error_Handler();
 8000aa8:	f000 f9ae 	bl	8000e08 <Error_Handler>
  }
  /* USER CODE BEGIN DMA2D_Init 2 */

  /* USER CODE END DMA2D_Init 2 */

}
 8000aac:	bf00      	nop
 8000aae:	bd80      	pop	{r7, pc}
 8000ab0:	20001ba8 	.word	0x20001ba8
 8000ab4:	52001000 	.word	0x52001000

08000ab8 <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 8000ab8:	b580      	push	{r7, lr}
 8000aba:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8000abc:	4b22      	ldr	r3, [pc, #136]	; (8000b48 <MX_USART3_UART_Init+0x90>)
 8000abe:	4a23      	ldr	r2, [pc, #140]	; (8000b4c <MX_USART3_UART_Init+0x94>)
 8000ac0:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 8000ac2:	4b21      	ldr	r3, [pc, #132]	; (8000b48 <MX_USART3_UART_Init+0x90>)
 8000ac4:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000ac8:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8000aca:	4b1f      	ldr	r3, [pc, #124]	; (8000b48 <MX_USART3_UART_Init+0x90>)
 8000acc:	2200      	movs	r2, #0
 8000ace:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8000ad0:	4b1d      	ldr	r3, [pc, #116]	; (8000b48 <MX_USART3_UART_Init+0x90>)
 8000ad2:	2200      	movs	r2, #0
 8000ad4:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8000ad6:	4b1c      	ldr	r3, [pc, #112]	; (8000b48 <MX_USART3_UART_Init+0x90>)
 8000ad8:	2200      	movs	r2, #0
 8000ada:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8000adc:	4b1a      	ldr	r3, [pc, #104]	; (8000b48 <MX_USART3_UART_Init+0x90>)
 8000ade:	220c      	movs	r2, #12
 8000ae0:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000ae2:	4b19      	ldr	r3, [pc, #100]	; (8000b48 <MX_USART3_UART_Init+0x90>)
 8000ae4:	2200      	movs	r2, #0
 8000ae6:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8000ae8:	4b17      	ldr	r3, [pc, #92]	; (8000b48 <MX_USART3_UART_Init+0x90>)
 8000aea:	2200      	movs	r2, #0
 8000aec:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000aee:	4b16      	ldr	r3, [pc, #88]	; (8000b48 <MX_USART3_UART_Init+0x90>)
 8000af0:	2200      	movs	r2, #0
 8000af2:	621a      	str	r2, [r3, #32]
  huart3.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8000af4:	4b14      	ldr	r3, [pc, #80]	; (8000b48 <MX_USART3_UART_Init+0x90>)
 8000af6:	2200      	movs	r2, #0
 8000af8:	625a      	str	r2, [r3, #36]	; 0x24
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000afa:	4b13      	ldr	r3, [pc, #76]	; (8000b48 <MX_USART3_UART_Init+0x90>)
 8000afc:	2200      	movs	r2, #0
 8000afe:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8000b00:	4811      	ldr	r0, [pc, #68]	; (8000b48 <MX_USART3_UART_Init+0x90>)
 8000b02:	f004 f95f 	bl	8004dc4 <HAL_UART_Init>
 8000b06:	4603      	mov	r3, r0
 8000b08:	2b00      	cmp	r3, #0
 8000b0a:	d001      	beq.n	8000b10 <MX_USART3_UART_Init+0x58>
  {
    Error_Handler();
 8000b0c:	f000 f97c 	bl	8000e08 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart3, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000b10:	2100      	movs	r1, #0
 8000b12:	480d      	ldr	r0, [pc, #52]	; (8000b48 <MX_USART3_UART_Init+0x90>)
 8000b14:	f005 fd9b 	bl	800664e <HAL_UARTEx_SetTxFifoThreshold>
 8000b18:	4603      	mov	r3, r0
 8000b1a:	2b00      	cmp	r3, #0
 8000b1c:	d001      	beq.n	8000b22 <MX_USART3_UART_Init+0x6a>
  {
    Error_Handler();
 8000b1e:	f000 f973 	bl	8000e08 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart3, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000b22:	2100      	movs	r1, #0
 8000b24:	4808      	ldr	r0, [pc, #32]	; (8000b48 <MX_USART3_UART_Init+0x90>)
 8000b26:	f005 fdd0 	bl	80066ca <HAL_UARTEx_SetRxFifoThreshold>
 8000b2a:	4603      	mov	r3, r0
 8000b2c:	2b00      	cmp	r3, #0
 8000b2e:	d001      	beq.n	8000b34 <MX_USART3_UART_Init+0x7c>
  {
    Error_Handler();
 8000b30:	f000 f96a 	bl	8000e08 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart3) != HAL_OK)
 8000b34:	4804      	ldr	r0, [pc, #16]	; (8000b48 <MX_USART3_UART_Init+0x90>)
 8000b36:	f005 fd51 	bl	80065dc <HAL_UARTEx_DisableFifoMode>
 8000b3a:	4603      	mov	r3, r0
 8000b3c:	2b00      	cmp	r3, #0
 8000b3e:	d001      	beq.n	8000b44 <MX_USART3_UART_Init+0x8c>
  {
    Error_Handler();
 8000b40:	f000 f962 	bl	8000e08 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8000b44:	bf00      	nop
 8000b46:	bd80      	pop	{r7, pc}
 8000b48:	200008cc 	.word	0x200008cc
 8000b4c:	40004800 	.word	0x40004800

08000b50 <MX_USB_OTG_HS_USB_Init>:
  * @brief USB_OTG_HS Initialization Function
  * @param None
  * @retval None
  */
static void MX_USB_OTG_HS_USB_Init(void)
{
 8000b50:	b480      	push	{r7}
 8000b52:	af00      	add	r7, sp, #0
  /* USER CODE END USB_OTG_HS_Init 1 */
  /* USER CODE BEGIN USB_OTG_HS_Init 2 */

  /* USER CODE END USB_OTG_HS_Init 2 */

}
 8000b54:	bf00      	nop
 8000b56:	46bd      	mov	sp, r7
 8000b58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b5c:	4770      	bx	lr
	...

08000b60 <MX_FMC_Init>:

/* FMC initialization function */
static void MX_FMC_Init(void)
{
 8000b60:	b580      	push	{r7, lr}
 8000b62:	b088      	sub	sp, #32
 8000b64:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN FMC_Init 0 */

  /* USER CODE END FMC_Init 0 */

  FMC_NORSRAM_TimingTypeDef Timing = {0};
 8000b66:	1d3b      	adds	r3, r7, #4
 8000b68:	2200      	movs	r2, #0
 8000b6a:	601a      	str	r2, [r3, #0]
 8000b6c:	605a      	str	r2, [r3, #4]
 8000b6e:	609a      	str	r2, [r3, #8]
 8000b70:	60da      	str	r2, [r3, #12]
 8000b72:	611a      	str	r2, [r3, #16]
 8000b74:	615a      	str	r2, [r3, #20]
 8000b76:	619a      	str	r2, [r3, #24]

  /* USER CODE END FMC_Init 1 */

  /** Perform the SRAM1 memory initialization sequence
  */
  hsram1.Instance = FMC_NORSRAM_DEVICE;
 8000b78:	4b28      	ldr	r3, [pc, #160]	; (8000c1c <MX_FMC_Init+0xbc>)
 8000b7a:	4a29      	ldr	r2, [pc, #164]	; (8000c20 <MX_FMC_Init+0xc0>)
 8000b7c:	601a      	str	r2, [r3, #0]
  hsram1.Extended = FMC_NORSRAM_EXTENDED_DEVICE;
 8000b7e:	4b27      	ldr	r3, [pc, #156]	; (8000c1c <MX_FMC_Init+0xbc>)
 8000b80:	4a28      	ldr	r2, [pc, #160]	; (8000c24 <MX_FMC_Init+0xc4>)
 8000b82:	605a      	str	r2, [r3, #4]
  /* hsram1.Init */
  hsram1.Init.NSBank = FMC_NORSRAM_BANK1;
 8000b84:	4b25      	ldr	r3, [pc, #148]	; (8000c1c <MX_FMC_Init+0xbc>)
 8000b86:	2200      	movs	r2, #0
 8000b88:	609a      	str	r2, [r3, #8]
  hsram1.Init.DataAddressMux = FMC_DATA_ADDRESS_MUX_DISABLE;
 8000b8a:	4b24      	ldr	r3, [pc, #144]	; (8000c1c <MX_FMC_Init+0xbc>)
 8000b8c:	2200      	movs	r2, #0
 8000b8e:	60da      	str	r2, [r3, #12]
  hsram1.Init.MemoryType = FMC_MEMORY_TYPE_SRAM;
 8000b90:	4b22      	ldr	r3, [pc, #136]	; (8000c1c <MX_FMC_Init+0xbc>)
 8000b92:	2200      	movs	r2, #0
 8000b94:	611a      	str	r2, [r3, #16]
  hsram1.Init.MemoryDataWidth = FMC_NORSRAM_MEM_BUS_WIDTH_8;
 8000b96:	4b21      	ldr	r3, [pc, #132]	; (8000c1c <MX_FMC_Init+0xbc>)
 8000b98:	2200      	movs	r2, #0
 8000b9a:	615a      	str	r2, [r3, #20]
  hsram1.Init.BurstAccessMode = FMC_BURST_ACCESS_MODE_DISABLE;
 8000b9c:	4b1f      	ldr	r3, [pc, #124]	; (8000c1c <MX_FMC_Init+0xbc>)
 8000b9e:	2200      	movs	r2, #0
 8000ba0:	619a      	str	r2, [r3, #24]
  hsram1.Init.WaitSignalPolarity = FMC_WAIT_SIGNAL_POLARITY_LOW;
 8000ba2:	4b1e      	ldr	r3, [pc, #120]	; (8000c1c <MX_FMC_Init+0xbc>)
 8000ba4:	2200      	movs	r2, #0
 8000ba6:	61da      	str	r2, [r3, #28]
  hsram1.Init.WaitSignalActive = FMC_WAIT_TIMING_BEFORE_WS;
 8000ba8:	4b1c      	ldr	r3, [pc, #112]	; (8000c1c <MX_FMC_Init+0xbc>)
 8000baa:	2200      	movs	r2, #0
 8000bac:	621a      	str	r2, [r3, #32]
  hsram1.Init.WriteOperation = FMC_WRITE_OPERATION_ENABLE;
 8000bae:	4b1b      	ldr	r3, [pc, #108]	; (8000c1c <MX_FMC_Init+0xbc>)
 8000bb0:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8000bb4:	625a      	str	r2, [r3, #36]	; 0x24
  hsram1.Init.WaitSignal = FMC_WAIT_SIGNAL_DISABLE;
 8000bb6:	4b19      	ldr	r3, [pc, #100]	; (8000c1c <MX_FMC_Init+0xbc>)
 8000bb8:	2200      	movs	r2, #0
 8000bba:	629a      	str	r2, [r3, #40]	; 0x28
  hsram1.Init.ExtendedMode = FMC_EXTENDED_MODE_DISABLE;
 8000bbc:	4b17      	ldr	r3, [pc, #92]	; (8000c1c <MX_FMC_Init+0xbc>)
 8000bbe:	2200      	movs	r2, #0
 8000bc0:	62da      	str	r2, [r3, #44]	; 0x2c
  hsram1.Init.AsynchronousWait = FMC_ASYNCHRONOUS_WAIT_DISABLE;
 8000bc2:	4b16      	ldr	r3, [pc, #88]	; (8000c1c <MX_FMC_Init+0xbc>)
 8000bc4:	2200      	movs	r2, #0
 8000bc6:	631a      	str	r2, [r3, #48]	; 0x30
  hsram1.Init.WriteBurst = FMC_WRITE_BURST_DISABLE;
 8000bc8:	4b14      	ldr	r3, [pc, #80]	; (8000c1c <MX_FMC_Init+0xbc>)
 8000bca:	2200      	movs	r2, #0
 8000bcc:	635a      	str	r2, [r3, #52]	; 0x34
  hsram1.Init.ContinuousClock = FMC_CONTINUOUS_CLOCK_SYNC_ONLY;
 8000bce:	4b13      	ldr	r3, [pc, #76]	; (8000c1c <MX_FMC_Init+0xbc>)
 8000bd0:	2200      	movs	r2, #0
 8000bd2:	639a      	str	r2, [r3, #56]	; 0x38
  hsram1.Init.WriteFifo = FMC_WRITE_FIFO_DISABLE;
 8000bd4:	4b11      	ldr	r3, [pc, #68]	; (8000c1c <MX_FMC_Init+0xbc>)
 8000bd6:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 8000bda:	63da      	str	r2, [r3, #60]	; 0x3c
  hsram1.Init.PageSize = FMC_PAGE_SIZE_NONE;
 8000bdc:	4b0f      	ldr	r3, [pc, #60]	; (8000c1c <MX_FMC_Init+0xbc>)
 8000bde:	2200      	movs	r2, #0
 8000be0:	641a      	str	r2, [r3, #64]	; 0x40
  /* Timing */
  Timing.AddressSetupTime = 4;
 8000be2:	2304      	movs	r3, #4
 8000be4:	607b      	str	r3, [r7, #4]
  Timing.AddressHoldTime = 15;
 8000be6:	230f      	movs	r3, #15
 8000be8:	60bb      	str	r3, [r7, #8]
  Timing.DataSetupTime = 2;
 8000bea:	2302      	movs	r3, #2
 8000bec:	60fb      	str	r3, [r7, #12]
  Timing.BusTurnAroundDuration = 1;
 8000bee:	2301      	movs	r3, #1
 8000bf0:	613b      	str	r3, [r7, #16]
  Timing.CLKDivision = 16;
 8000bf2:	2310      	movs	r3, #16
 8000bf4:	617b      	str	r3, [r7, #20]
  Timing.DataLatency = 17;
 8000bf6:	2311      	movs	r3, #17
 8000bf8:	61bb      	str	r3, [r7, #24]
  Timing.AccessMode = FMC_ACCESS_MODE_A;
 8000bfa:	2300      	movs	r3, #0
 8000bfc:	61fb      	str	r3, [r7, #28]
  /* ExtTiming */

  if (HAL_SRAM_Init(&hsram1, &Timing, NULL) != HAL_OK)
 8000bfe:	1d3b      	adds	r3, r7, #4
 8000c00:	2200      	movs	r2, #0
 8000c02:	4619      	mov	r1, r3
 8000c04:	4805      	ldr	r0, [pc, #20]	; (8000c1c <MX_FMC_Init+0xbc>)
 8000c06:	f004 f88d 	bl	8004d24 <HAL_SRAM_Init>
 8000c0a:	4603      	mov	r3, r0
 8000c0c:	2b00      	cmp	r3, #0
 8000c0e:	d001      	beq.n	8000c14 <MX_FMC_Init+0xb4>
  {
    Error_Handler( );
 8000c10:	f000 f8fa 	bl	8000e08 <Error_Handler>
  }

  /* USER CODE BEGIN FMC_Init 2 */

  /* USER CODE END FMC_Init 2 */
}
 8000c14:	bf00      	nop
 8000c16:	3720      	adds	r7, #32
 8000c18:	46bd      	mov	sp, r7
 8000c1a:	bd80      	pop	{r7, pc}
 8000c1c:	20000d5c 	.word	0x20000d5c
 8000c20:	52004000 	.word	0x52004000
 8000c24:	52004104 	.word	0x52004104

08000c28 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000c28:	b580      	push	{r7, lr}
 8000c2a:	b08c      	sub	sp, #48	; 0x30
 8000c2c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000c2e:	f107 031c 	add.w	r3, r7, #28
 8000c32:	2200      	movs	r2, #0
 8000c34:	601a      	str	r2, [r3, #0]
 8000c36:	605a      	str	r2, [r3, #4]
 8000c38:	609a      	str	r2, [r3, #8]
 8000c3a:	60da      	str	r2, [r3, #12]
 8000c3c:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000c3e:	4b6a      	ldr	r3, [pc, #424]	; (8000de8 <MX_GPIO_Init+0x1c0>)
 8000c40:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000c44:	4a68      	ldr	r2, [pc, #416]	; (8000de8 <MX_GPIO_Init+0x1c0>)
 8000c46:	f043 0304 	orr.w	r3, r3, #4
 8000c4a:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000c4e:	4b66      	ldr	r3, [pc, #408]	; (8000de8 <MX_GPIO_Init+0x1c0>)
 8000c50:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000c54:	f003 0304 	and.w	r3, r3, #4
 8000c58:	61bb      	str	r3, [r7, #24]
 8000c5a:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8000c5c:	4b62      	ldr	r3, [pc, #392]	; (8000de8 <MX_GPIO_Init+0x1c0>)
 8000c5e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000c62:	4a61      	ldr	r2, [pc, #388]	; (8000de8 <MX_GPIO_Init+0x1c0>)
 8000c64:	f043 0320 	orr.w	r3, r3, #32
 8000c68:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000c6c:	4b5e      	ldr	r3, [pc, #376]	; (8000de8 <MX_GPIO_Init+0x1c0>)
 8000c6e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000c72:	f003 0320 	and.w	r3, r3, #32
 8000c76:	617b      	str	r3, [r7, #20]
 8000c78:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000c7a:	4b5b      	ldr	r3, [pc, #364]	; (8000de8 <MX_GPIO_Init+0x1c0>)
 8000c7c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000c80:	4a59      	ldr	r2, [pc, #356]	; (8000de8 <MX_GPIO_Init+0x1c0>)
 8000c82:	f043 0302 	orr.w	r3, r3, #2
 8000c86:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000c8a:	4b57      	ldr	r3, [pc, #348]	; (8000de8 <MX_GPIO_Init+0x1c0>)
 8000c8c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000c90:	f003 0302 	and.w	r3, r3, #2
 8000c94:	613b      	str	r3, [r7, #16]
 8000c96:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8000c98:	4b53      	ldr	r3, [pc, #332]	; (8000de8 <MX_GPIO_Init+0x1c0>)
 8000c9a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000c9e:	4a52      	ldr	r2, [pc, #328]	; (8000de8 <MX_GPIO_Init+0x1c0>)
 8000ca0:	f043 0310 	orr.w	r3, r3, #16
 8000ca4:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000ca8:	4b4f      	ldr	r3, [pc, #316]	; (8000de8 <MX_GPIO_Init+0x1c0>)
 8000caa:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000cae:	f003 0310 	and.w	r3, r3, #16
 8000cb2:	60fb      	str	r3, [r7, #12]
 8000cb4:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000cb6:	4b4c      	ldr	r3, [pc, #304]	; (8000de8 <MX_GPIO_Init+0x1c0>)
 8000cb8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000cbc:	4a4a      	ldr	r2, [pc, #296]	; (8000de8 <MX_GPIO_Init+0x1c0>)
 8000cbe:	f043 0308 	orr.w	r3, r3, #8
 8000cc2:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000cc6:	4b48      	ldr	r3, [pc, #288]	; (8000de8 <MX_GPIO_Init+0x1c0>)
 8000cc8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000ccc:	f003 0308 	and.w	r3, r3, #8
 8000cd0:	60bb      	str	r3, [r7, #8]
 8000cd2:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8000cd4:	4b44      	ldr	r3, [pc, #272]	; (8000de8 <MX_GPIO_Init+0x1c0>)
 8000cd6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000cda:	4a43      	ldr	r2, [pc, #268]	; (8000de8 <MX_GPIO_Init+0x1c0>)
 8000cdc:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000ce0:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000ce4:	4b40      	ldr	r3, [pc, #256]	; (8000de8 <MX_GPIO_Init+0x1c0>)
 8000ce6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000cea:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000cee:	607b      	str	r3, [r7, #4]
 8000cf0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000cf2:	4b3d      	ldr	r3, [pc, #244]	; (8000de8 <MX_GPIO_Init+0x1c0>)
 8000cf4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000cf8:	4a3b      	ldr	r2, [pc, #236]	; (8000de8 <MX_GPIO_Init+0x1c0>)
 8000cfa:	f043 0301 	orr.w	r3, r3, #1
 8000cfe:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000d02:	4b39      	ldr	r3, [pc, #228]	; (8000de8 <MX_GPIO_Init+0x1c0>)
 8000d04:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000d08:	f003 0301 	and.w	r3, r3, #1
 8000d0c:	603b      	str	r3, [r7, #0]
 8000d0e:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LED_GREEN_Pin|LED_RED_Pin, GPIO_PIN_RESET);
 8000d10:	2200      	movs	r2, #0
 8000d12:	f244 0101 	movw	r1, #16385	; 0x4001
 8000d16:	4835      	ldr	r0, [pc, #212]	; (8000dec <MX_GPIO_Init+0x1c4>)
 8000d18:	f001 fd24 	bl	8002764 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, USB_FS_PWR_EN_Pin|GPIO_PIN_11|GPIO_PIN_3, GPIO_PIN_RESET);
 8000d1c:	2200      	movs	r2, #0
 8000d1e:	f640 4108 	movw	r1, #3080	; 0xc08
 8000d22:	4833      	ldr	r0, [pc, #204]	; (8000df0 <MX_GPIO_Init+0x1c8>)
 8000d24:	f001 fd1e 	bl	8002764 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED_YELLOW_GPIO_Port, LED_YELLOW_Pin, GPIO_PIN_RESET);
 8000d28:	2200      	movs	r2, #0
 8000d2a:	2102      	movs	r1, #2
 8000d2c:	4831      	ldr	r0, [pc, #196]	; (8000df4 <MX_GPIO_Init+0x1cc>)
 8000d2e:	f001 fd19 	bl	8002764 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8000d32:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000d36:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000d38:	2300      	movs	r3, #0
 8000d3a:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d3c:	2300      	movs	r3, #0
 8000d3e:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8000d40:	f107 031c 	add.w	r3, r7, #28
 8000d44:	4619      	mov	r1, r3
 8000d46:	482c      	ldr	r0, [pc, #176]	; (8000df8 <MX_GPIO_Init+0x1d0>)
 8000d48:	f001 fb64 	bl	8002414 <HAL_GPIO_Init>

  /*Configure GPIO pins : LED_GREEN_Pin LED_RED_Pin */
  GPIO_InitStruct.Pin = LED_GREEN_Pin|LED_RED_Pin;
 8000d4c:	f244 0301 	movw	r3, #16385	; 0x4001
 8000d50:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000d52:	2301      	movs	r3, #1
 8000d54:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d56:	2300      	movs	r3, #0
 8000d58:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000d5a:	2300      	movs	r3, #0
 8000d5c:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000d5e:	f107 031c 	add.w	r3, r7, #28
 8000d62:	4619      	mov	r1, r3
 8000d64:	4821      	ldr	r0, [pc, #132]	; (8000dec <MX_GPIO_Init+0x1c4>)
 8000d66:	f001 fb55 	bl	8002414 <HAL_GPIO_Init>

  /*Configure GPIO pins : USB_FS_PWR_EN_Pin PD11 PD3 */
  GPIO_InitStruct.Pin = USB_FS_PWR_EN_Pin|GPIO_PIN_11|GPIO_PIN_3;
 8000d6a:	f640 4308 	movw	r3, #3080	; 0xc08
 8000d6e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000d70:	2301      	movs	r3, #1
 8000d72:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d74:	2300      	movs	r3, #0
 8000d76:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000d78:	2300      	movs	r3, #0
 8000d7a:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000d7c:	f107 031c 	add.w	r3, r7, #28
 8000d80:	4619      	mov	r1, r3
 8000d82:	481b      	ldr	r0, [pc, #108]	; (8000df0 <MX_GPIO_Init+0x1c8>)
 8000d84:	f001 fb46 	bl	8002414 <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_FS_OVCR_Pin */
  GPIO_InitStruct.Pin = USB_FS_OVCR_Pin;
 8000d88:	2380      	movs	r3, #128	; 0x80
 8000d8a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000d8c:	4b1b      	ldr	r3, [pc, #108]	; (8000dfc <MX_GPIO_Init+0x1d4>)
 8000d8e:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d90:	2300      	movs	r3, #0
 8000d92:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(USB_FS_OVCR_GPIO_Port, &GPIO_InitStruct);
 8000d94:	f107 031c 	add.w	r3, r7, #28
 8000d98:	4619      	mov	r1, r3
 8000d9a:	4819      	ldr	r0, [pc, #100]	; (8000e00 <MX_GPIO_Init+0x1d8>)
 8000d9c:	f001 fb3a 	bl	8002414 <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_FS_ID_Pin */
  GPIO_InitStruct.Pin = USB_FS_ID_Pin;
 8000da0:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000da4:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000da6:	2302      	movs	r3, #2
 8000da8:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000daa:	2300      	movs	r3, #0
 8000dac:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000dae:	2300      	movs	r3, #0
 8000db0:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG1_HS;
 8000db2:	230a      	movs	r3, #10
 8000db4:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(USB_FS_ID_GPIO_Port, &GPIO_InitStruct);
 8000db6:	f107 031c 	add.w	r3, r7, #28
 8000dba:	4619      	mov	r1, r3
 8000dbc:	4811      	ldr	r0, [pc, #68]	; (8000e04 <MX_GPIO_Init+0x1dc>)
 8000dbe:	f001 fb29 	bl	8002414 <HAL_GPIO_Init>

  /*Configure GPIO pin : LED_YELLOW_Pin */
  GPIO_InitStruct.Pin = LED_YELLOW_Pin;
 8000dc2:	2302      	movs	r3, #2
 8000dc4:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000dc6:	2301      	movs	r3, #1
 8000dc8:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000dca:	2300      	movs	r3, #0
 8000dcc:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000dce:	2300      	movs	r3, #0
 8000dd0:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(LED_YELLOW_GPIO_Port, &GPIO_InitStruct);
 8000dd2:	f107 031c 	add.w	r3, r7, #28
 8000dd6:	4619      	mov	r1, r3
 8000dd8:	4806      	ldr	r0, [pc, #24]	; (8000df4 <MX_GPIO_Init+0x1cc>)
 8000dda:	f001 fb1b 	bl	8002414 <HAL_GPIO_Init>

}
 8000dde:	bf00      	nop
 8000de0:	3730      	adds	r7, #48	; 0x30
 8000de2:	46bd      	mov	sp, r7
 8000de4:	bd80      	pop	{r7, pc}
 8000de6:	bf00      	nop
 8000de8:	58024400 	.word	0x58024400
 8000dec:	58020400 	.word	0x58020400
 8000df0:	58020c00 	.word	0x58020c00
 8000df4:	58021000 	.word	0x58021000
 8000df8:	58020800 	.word	0x58020800
 8000dfc:	11110000 	.word	0x11110000
 8000e00:	58021800 	.word	0x58021800
 8000e04:	58020000 	.word	0x58020000

08000e08 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000e08:	b480      	push	{r7}
 8000e0a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000e0c:	b672      	cpsid	i
}
 8000e0e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000e10:	e7fe      	b.n	8000e10 <Error_Handler+0x8>
	...

08000e14 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000e14:	b480      	push	{r7}
 8000e16:	b083      	sub	sp, #12
 8000e18:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000e1a:	4b0a      	ldr	r3, [pc, #40]	; (8000e44 <HAL_MspInit+0x30>)
 8000e1c:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8000e20:	4a08      	ldr	r2, [pc, #32]	; (8000e44 <HAL_MspInit+0x30>)
 8000e22:	f043 0302 	orr.w	r3, r3, #2
 8000e26:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 8000e2a:	4b06      	ldr	r3, [pc, #24]	; (8000e44 <HAL_MspInit+0x30>)
 8000e2c:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8000e30:	f003 0302 	and.w	r3, r3, #2
 8000e34:	607b      	str	r3, [r7, #4]
 8000e36:	687b      	ldr	r3, [r7, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000e38:	bf00      	nop
 8000e3a:	370c      	adds	r7, #12
 8000e3c:	46bd      	mov	sp, r7
 8000e3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e42:	4770      	bx	lr
 8000e44:	58024400 	.word	0x58024400

08000e48 <HAL_DMA2D_MspInit>:
* This function configures the hardware resources used in this example
* @param hdma2d: DMA2D handle pointer
* @retval None
*/
void HAL_DMA2D_MspInit(DMA2D_HandleTypeDef* hdma2d)
{
 8000e48:	b480      	push	{r7}
 8000e4a:	b085      	sub	sp, #20
 8000e4c:	af00      	add	r7, sp, #0
 8000e4e:	6078      	str	r0, [r7, #4]
  if(hdma2d->Instance==DMA2D)
 8000e50:	687b      	ldr	r3, [r7, #4]
 8000e52:	681b      	ldr	r3, [r3, #0]
 8000e54:	4a0b      	ldr	r2, [pc, #44]	; (8000e84 <HAL_DMA2D_MspInit+0x3c>)
 8000e56:	4293      	cmp	r3, r2
 8000e58:	d10e      	bne.n	8000e78 <HAL_DMA2D_MspInit+0x30>
  {
  /* USER CODE BEGIN DMA2D_MspInit 0 */

  /* USER CODE END DMA2D_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_DMA2D_CLK_ENABLE();
 8000e5a:	4b0b      	ldr	r3, [pc, #44]	; (8000e88 <HAL_DMA2D_MspInit+0x40>)
 8000e5c:	f8d3 30d4 	ldr.w	r3, [r3, #212]	; 0xd4
 8000e60:	4a09      	ldr	r2, [pc, #36]	; (8000e88 <HAL_DMA2D_MspInit+0x40>)
 8000e62:	f043 0310 	orr.w	r3, r3, #16
 8000e66:	f8c2 30d4 	str.w	r3, [r2, #212]	; 0xd4
 8000e6a:	4b07      	ldr	r3, [pc, #28]	; (8000e88 <HAL_DMA2D_MspInit+0x40>)
 8000e6c:	f8d3 30d4 	ldr.w	r3, [r3, #212]	; 0xd4
 8000e70:	f003 0310 	and.w	r3, r3, #16
 8000e74:	60fb      	str	r3, [r7, #12]
 8000e76:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN DMA2D_MspInit 1 */

  /* USER CODE END DMA2D_MspInit 1 */
  }

}
 8000e78:	bf00      	nop
 8000e7a:	3714      	adds	r7, #20
 8000e7c:	46bd      	mov	sp, r7
 8000e7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e82:	4770      	bx	lr
 8000e84:	52001000 	.word	0x52001000
 8000e88:	58024400 	.word	0x58024400

08000e8c <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000e8c:	b580      	push	{r7, lr}
 8000e8e:	b0b6      	sub	sp, #216	; 0xd8
 8000e90:	af00      	add	r7, sp, #0
 8000e92:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000e94:	f107 03c4 	add.w	r3, r7, #196	; 0xc4
 8000e98:	2200      	movs	r2, #0
 8000e9a:	601a      	str	r2, [r3, #0]
 8000e9c:	605a      	str	r2, [r3, #4]
 8000e9e:	609a      	str	r2, [r3, #8]
 8000ea0:	60da      	str	r2, [r3, #12]
 8000ea2:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000ea4:	f107 0310 	add.w	r3, r7, #16
 8000ea8:	22b4      	movs	r2, #180	; 0xb4
 8000eaa:	2100      	movs	r1, #0
 8000eac:	4618      	mov	r0, r3
 8000eae:	f005 ff1b 	bl	8006ce8 <memset>
  if(huart->Instance==USART3)
 8000eb2:	687b      	ldr	r3, [r7, #4]
 8000eb4:	681b      	ldr	r3, [r3, #0]
 8000eb6:	4a29      	ldr	r2, [pc, #164]	; (8000f5c <HAL_UART_MspInit+0xd0>)
 8000eb8:	4293      	cmp	r3, r2
 8000eba:	d14a      	bne.n	8000f52 <HAL_UART_MspInit+0xc6>
  /* USER CODE BEGIN USART3_MspInit 0 */

  /* USER CODE END USART3_MspInit 0 */
  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 8000ebc:	2302      	movs	r3, #2
 8000ebe:	613b      	str	r3, [r7, #16]
    PeriphClkInitStruct.Usart234578ClockSelection = RCC_USART234578CLKSOURCE_D2PCLK1;
 8000ec0:	2300      	movs	r3, #0
 8000ec2:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000ec6:	f107 0310 	add.w	r3, r7, #16
 8000eca:	4618      	mov	r0, r3
 8000ecc:	f002 fbb8 	bl	8003640 <HAL_RCCEx_PeriphCLKConfig>
 8000ed0:	4603      	mov	r3, r0
 8000ed2:	2b00      	cmp	r3, #0
 8000ed4:	d001      	beq.n	8000eda <HAL_UART_MspInit+0x4e>
    {
      Error_Handler();
 8000ed6:	f7ff ff97 	bl	8000e08 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 8000eda:	4b21      	ldr	r3, [pc, #132]	; (8000f60 <HAL_UART_MspInit+0xd4>)
 8000edc:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8000ee0:	4a1f      	ldr	r2, [pc, #124]	; (8000f60 <HAL_UART_MspInit+0xd4>)
 8000ee2:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000ee6:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8000eea:	4b1d      	ldr	r3, [pc, #116]	; (8000f60 <HAL_UART_MspInit+0xd4>)
 8000eec:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8000ef0:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8000ef4:	60fb      	str	r3, [r7, #12]
 8000ef6:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 8000ef8:	4b19      	ldr	r3, [pc, #100]	; (8000f60 <HAL_UART_MspInit+0xd4>)
 8000efa:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000efe:	4a18      	ldr	r2, [pc, #96]	; (8000f60 <HAL_UART_MspInit+0xd4>)
 8000f00:	f043 0308 	orr.w	r3, r3, #8
 8000f04:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000f08:	4b15      	ldr	r3, [pc, #84]	; (8000f60 <HAL_UART_MspInit+0xd4>)
 8000f0a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000f0e:	f003 0308 	and.w	r3, r3, #8
 8000f12:	60bb      	str	r3, [r7, #8]
 8000f14:	68bb      	ldr	r3, [r7, #8]
    /**USART3 GPIO Configuration
    PD8     ------> USART3_TX
    PD9     ------> USART3_RX
    */
    GPIO_InitStruct.Pin = STLK_VCP_RX_Pin|STLK_VCP_TX_Pin;
 8000f16:	f44f 7340 	mov.w	r3, #768	; 0x300
 8000f1a:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000f1e:	2302      	movs	r3, #2
 8000f20:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f24:	2300      	movs	r3, #0
 8000f26:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000f2a:	2300      	movs	r3, #0
 8000f2c:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8000f30:	2307      	movs	r3, #7
 8000f32:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000f36:	f107 03c4 	add.w	r3, r7, #196	; 0xc4
 8000f3a:	4619      	mov	r1, r3
 8000f3c:	4809      	ldr	r0, [pc, #36]	; (8000f64 <HAL_UART_MspInit+0xd8>)
 8000f3e:	f001 fa69 	bl	8002414 <HAL_GPIO_Init>

    /* USART3 interrupt Init */
    HAL_NVIC_SetPriority(USART3_IRQn, 0, 0);
 8000f42:	2200      	movs	r2, #0
 8000f44:	2100      	movs	r1, #0
 8000f46:	2027      	movs	r0, #39	; 0x27
 8000f48:	f000 fbb5 	bl	80016b6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART3_IRQn);
 8000f4c:	2027      	movs	r0, #39	; 0x27
 8000f4e:	f000 fbcc 	bl	80016ea <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 8000f52:	bf00      	nop
 8000f54:	37d8      	adds	r7, #216	; 0xd8
 8000f56:	46bd      	mov	sp, r7
 8000f58:	bd80      	pop	{r7, pc}
 8000f5a:	bf00      	nop
 8000f5c:	40004800 	.word	0x40004800
 8000f60:	58024400 	.word	0x58024400
 8000f64:	58020c00 	.word	0x58020c00

08000f68 <HAL_FMC_MspInit>:

}

static uint32_t FMC_Initialized = 0;

static void HAL_FMC_MspInit(void){
 8000f68:	b580      	push	{r7, lr}
 8000f6a:	b0b4      	sub	sp, #208	; 0xd0
 8000f6c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN FMC_MspInit 0 */

  /* USER CODE END FMC_MspInit 0 */
  GPIO_InitTypeDef GPIO_InitStruct ={0};
 8000f6e:	f107 03bc 	add.w	r3, r7, #188	; 0xbc
 8000f72:	2200      	movs	r2, #0
 8000f74:	601a      	str	r2, [r3, #0]
 8000f76:	605a      	str	r2, [r3, #4]
 8000f78:	609a      	str	r2, [r3, #8]
 8000f7a:	60da      	str	r2, [r3, #12]
 8000f7c:	611a      	str	r2, [r3, #16]
  if (FMC_Initialized) {
 8000f7e:	4b43      	ldr	r3, [pc, #268]	; (800108c <HAL_FMC_MspInit+0x124>)
 8000f80:	681b      	ldr	r3, [r3, #0]
 8000f82:	2b00      	cmp	r3, #0
 8000f84:	d17e      	bne.n	8001084 <HAL_FMC_MspInit+0x11c>
    return;
  }
  FMC_Initialized = 1;
 8000f86:	4b41      	ldr	r3, [pc, #260]	; (800108c <HAL_FMC_MspInit+0x124>)
 8000f88:	2201      	movs	r2, #1
 8000f8a:	601a      	str	r2, [r3, #0]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000f8c:	f107 0308 	add.w	r3, r7, #8
 8000f90:	22b4      	movs	r2, #180	; 0xb4
 8000f92:	2100      	movs	r1, #0
 8000f94:	4618      	mov	r0, r3
 8000f96:	f005 fea7 	bl	8006ce8 <memset>

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_FMC;
 8000f9a:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8000f9e:	60bb      	str	r3, [r7, #8]
    PeriphClkInitStruct.FmcClockSelection = RCC_FMCCLKSOURCE_PLL;
 8000fa0:	2301      	movs	r3, #1
 8000fa2:	64fb      	str	r3, [r7, #76]	; 0x4c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000fa4:	f107 0308 	add.w	r3, r7, #8
 8000fa8:	4618      	mov	r0, r3
 8000faa:	f002 fb49 	bl	8003640 <HAL_RCCEx_PeriphCLKConfig>
 8000fae:	4603      	mov	r3, r0
 8000fb0:	2b00      	cmp	r3, #0
 8000fb2:	d001      	beq.n	8000fb8 <HAL_FMC_MspInit+0x50>
    {
      Error_Handler();
 8000fb4:	f7ff ff28 	bl	8000e08 <Error_Handler>
    }

  /* Peripheral clock enable */
  __HAL_RCC_FMC_CLK_ENABLE();
 8000fb8:	4b35      	ldr	r3, [pc, #212]	; (8001090 <HAL_FMC_MspInit+0x128>)
 8000fba:	f8d3 30d4 	ldr.w	r3, [r3, #212]	; 0xd4
 8000fbe:	4a34      	ldr	r2, [pc, #208]	; (8001090 <HAL_FMC_MspInit+0x128>)
 8000fc0:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8000fc4:	f8c2 30d4 	str.w	r3, [r2, #212]	; 0xd4
 8000fc8:	4b31      	ldr	r3, [pc, #196]	; (8001090 <HAL_FMC_MspInit+0x128>)
 8000fca:	f8d3 30d4 	ldr.w	r3, [r3, #212]	; 0xd4
 8000fce:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8000fd2:	607b      	str	r3, [r7, #4]
 8000fd4:	687b      	ldr	r3, [r7, #4]
  PD0   ------> FMC_D2
  PD1   ------> FMC_D3
  PD4   ------> FMC_NOE
  PD5   ------> FMC_NWE
  */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8000fd6:	2303      	movs	r3, #3
 8000fd8:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000fdc:	2302      	movs	r3, #2
 8000fde:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000fe2:	2300      	movs	r3, #0
 8000fe4:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000fe8:	2303      	movs	r3, #3
 8000fea:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8000fee:	230c      	movs	r3, #12
 8000ff0:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8000ff4:	f107 03bc 	add.w	r3, r7, #188	; 0xbc
 8000ff8:	4619      	mov	r1, r3
 8000ffa:	4826      	ldr	r0, [pc, #152]	; (8001094 <HAL_FMC_MspInit+0x12c>)
 8000ffc:	f001 fa0a 	bl	8002414 <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = GPIO_PIN_7|GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10;
 8001000:	f44f 63f0 	mov.w	r3, #1920	; 0x780
 8001004:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001008:	2302      	movs	r3, #2
 800100a:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800100e:	2300      	movs	r3, #0
 8001010:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001014:	2303      	movs	r3, #3
 8001016:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 800101a:	230c      	movs	r3, #12
 800101c:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8001020:	f107 03bc 	add.w	r3, r7, #188	; 0xbc
 8001024:	4619      	mov	r1, r3
 8001026:	481c      	ldr	r0, [pc, #112]	; (8001098 <HAL_FMC_MspInit+0x130>)
 8001028:	f001 f9f4 	bl	8002414 <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = GPIO_PIN_14|GPIO_PIN_15|GPIO_PIN_0|GPIO_PIN_1
 800102c:	f24c 0333 	movw	r3, #49203	; 0xc033
 8001030:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
                          |GPIO_PIN_4|GPIO_PIN_5;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001034:	2302      	movs	r3, #2
 8001036:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800103a:	2300      	movs	r3, #0
 800103c:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001040:	2303      	movs	r3, #3
 8001042:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8001046:	230c      	movs	r3, #12
 8001048:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800104c:	f107 03bc 	add.w	r3, r7, #188	; 0xbc
 8001050:	4619      	mov	r1, r3
 8001052:	4812      	ldr	r0, [pc, #72]	; (800109c <HAL_FMC_MspInit+0x134>)
 8001054:	f001 f9de 	bl	8002414 <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = GPIO_PIN_7;
 8001058:	2380      	movs	r3, #128	; 0x80
 800105a:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800105e:	2302      	movs	r3, #2
 8001060:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001064:	2300      	movs	r3, #0
 8001066:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800106a:	2303      	movs	r3, #3
 800106c:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
  GPIO_InitStruct.Alternate = GPIO_AF9_FMC;
 8001070:	2309      	movs	r3, #9
 8001072:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001076:	f107 03bc 	add.w	r3, r7, #188	; 0xbc
 800107a:	4619      	mov	r1, r3
 800107c:	4808      	ldr	r0, [pc, #32]	; (80010a0 <HAL_FMC_MspInit+0x138>)
 800107e:	f001 f9c9 	bl	8002414 <HAL_GPIO_Init>
 8001082:	e000      	b.n	8001086 <HAL_FMC_MspInit+0x11e>
    return;
 8001084:	bf00      	nop

  /* USER CODE BEGIN FMC_MspInit 1 */

  /* USER CODE END FMC_MspInit 1 */
}
 8001086:	37d0      	adds	r7, #208	; 0xd0
 8001088:	46bd      	mov	sp, r7
 800108a:	bd80      	pop	{r7, pc}
 800108c:	200000b8 	.word	0x200000b8
 8001090:	58024400 	.word	0x58024400
 8001094:	58021400 	.word	0x58021400
 8001098:	58021000 	.word	0x58021000
 800109c:	58020c00 	.word	0x58020c00
 80010a0:	58020800 	.word	0x58020800

080010a4 <HAL_SRAM_MspInit>:

void HAL_SRAM_MspInit(SRAM_HandleTypeDef* hsram){
 80010a4:	b580      	push	{r7, lr}
 80010a6:	b082      	sub	sp, #8
 80010a8:	af00      	add	r7, sp, #0
 80010aa:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN SRAM_MspInit 0 */

  /* USER CODE END SRAM_MspInit 0 */
  HAL_FMC_MspInit();
 80010ac:	f7ff ff5c 	bl	8000f68 <HAL_FMC_MspInit>
  /* USER CODE BEGIN SRAM_MspInit 1 */

  /* USER CODE END SRAM_MspInit 1 */
}
 80010b0:	bf00      	nop
 80010b2:	3708      	adds	r7, #8
 80010b4:	46bd      	mov	sp, r7
 80010b6:	bd80      	pop	{r7, pc}

080010b8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80010b8:	b480      	push	{r7}
 80010ba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80010bc:	e7fe      	b.n	80010bc <NMI_Handler+0x4>

080010be <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80010be:	b480      	push	{r7}
 80010c0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80010c2:	e7fe      	b.n	80010c2 <HardFault_Handler+0x4>

080010c4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80010c4:	b480      	push	{r7}
 80010c6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80010c8:	e7fe      	b.n	80010c8 <MemManage_Handler+0x4>

080010ca <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80010ca:	b480      	push	{r7}
 80010cc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80010ce:	e7fe      	b.n	80010ce <BusFault_Handler+0x4>

080010d0 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80010d0:	b480      	push	{r7}
 80010d2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80010d4:	e7fe      	b.n	80010d4 <UsageFault_Handler+0x4>

080010d6 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80010d6:	b480      	push	{r7}
 80010d8:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80010da:	bf00      	nop
 80010dc:	46bd      	mov	sp, r7
 80010de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010e2:	4770      	bx	lr

080010e4 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80010e4:	b480      	push	{r7}
 80010e6:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80010e8:	bf00      	nop
 80010ea:	46bd      	mov	sp, r7
 80010ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010f0:	4770      	bx	lr

080010f2 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80010f2:	b480      	push	{r7}
 80010f4:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80010f6:	bf00      	nop
 80010f8:	46bd      	mov	sp, r7
 80010fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010fe:	4770      	bx	lr

08001100 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001100:	b580      	push	{r7, lr}
 8001102:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001104:	f000 f9ac 	bl	8001460 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001108:	bf00      	nop
 800110a:	bd80      	pop	{r7, pc}

0800110c <USART3_IRQHandler>:

/**
  * @brief This function handles USART3 global interrupt.
  */
void USART3_IRQHandler(void)
{
 800110c:	b580      	push	{r7, lr}
 800110e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART3_IRQn 0 */

  /* USER CODE END USART3_IRQn 0 */
  HAL_UART_IRQHandler(&huart3);
 8001110:	4802      	ldr	r0, [pc, #8]	; (800111c <USART3_IRQHandler+0x10>)
 8001112:	f003 ff3d 	bl	8004f90 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART3_IRQn 1 */

  /* USER CODE END USART3_IRQn 1 */
}
 8001116:	bf00      	nop
 8001118:	bd80      	pop	{r7, pc}
 800111a:	bf00      	nop
 800111c:	200008cc 	.word	0x200008cc

08001120 <_read>:
	_kill(status, -1);
	while (1) {}		/* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001120:	b580      	push	{r7, lr}
 8001122:	b086      	sub	sp, #24
 8001124:	af00      	add	r7, sp, #0
 8001126:	60f8      	str	r0, [r7, #12]
 8001128:	60b9      	str	r1, [r7, #8]
 800112a:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800112c:	2300      	movs	r3, #0
 800112e:	617b      	str	r3, [r7, #20]
 8001130:	e00a      	b.n	8001148 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8001132:	f3af 8000 	nop.w
 8001136:	4601      	mov	r1, r0
 8001138:	68bb      	ldr	r3, [r7, #8]
 800113a:	1c5a      	adds	r2, r3, #1
 800113c:	60ba      	str	r2, [r7, #8]
 800113e:	b2ca      	uxtb	r2, r1
 8001140:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001142:	697b      	ldr	r3, [r7, #20]
 8001144:	3301      	adds	r3, #1
 8001146:	617b      	str	r3, [r7, #20]
 8001148:	697a      	ldr	r2, [r7, #20]
 800114a:	687b      	ldr	r3, [r7, #4]
 800114c:	429a      	cmp	r2, r3
 800114e:	dbf0      	blt.n	8001132 <_read+0x12>
	}

return len;
 8001150:	687b      	ldr	r3, [r7, #4]
}
 8001152:	4618      	mov	r0, r3
 8001154:	3718      	adds	r7, #24
 8001156:	46bd      	mov	sp, r7
 8001158:	bd80      	pop	{r7, pc}

0800115a <_close>:
	}
	return len;
}

int _close(int file)
{
 800115a:	b480      	push	{r7}
 800115c:	b083      	sub	sp, #12
 800115e:	af00      	add	r7, sp, #0
 8001160:	6078      	str	r0, [r7, #4]
	return -1;
 8001162:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001166:	4618      	mov	r0, r3
 8001168:	370c      	adds	r7, #12
 800116a:	46bd      	mov	sp, r7
 800116c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001170:	4770      	bx	lr

08001172 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8001172:	b480      	push	{r7}
 8001174:	b083      	sub	sp, #12
 8001176:	af00      	add	r7, sp, #0
 8001178:	6078      	str	r0, [r7, #4]
 800117a:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 800117c:	683b      	ldr	r3, [r7, #0]
 800117e:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8001182:	605a      	str	r2, [r3, #4]
	return 0;
 8001184:	2300      	movs	r3, #0
}
 8001186:	4618      	mov	r0, r3
 8001188:	370c      	adds	r7, #12
 800118a:	46bd      	mov	sp, r7
 800118c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001190:	4770      	bx	lr

08001192 <_isatty>:

int _isatty(int file)
{
 8001192:	b480      	push	{r7}
 8001194:	b083      	sub	sp, #12
 8001196:	af00      	add	r7, sp, #0
 8001198:	6078      	str	r0, [r7, #4]
	return 1;
 800119a:	2301      	movs	r3, #1
}
 800119c:	4618      	mov	r0, r3
 800119e:	370c      	adds	r7, #12
 80011a0:	46bd      	mov	sp, r7
 80011a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011a6:	4770      	bx	lr

080011a8 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80011a8:	b480      	push	{r7}
 80011aa:	b085      	sub	sp, #20
 80011ac:	af00      	add	r7, sp, #0
 80011ae:	60f8      	str	r0, [r7, #12]
 80011b0:	60b9      	str	r1, [r7, #8]
 80011b2:	607a      	str	r2, [r7, #4]
	return 0;
 80011b4:	2300      	movs	r3, #0
}
 80011b6:	4618      	mov	r0, r3
 80011b8:	3714      	adds	r7, #20
 80011ba:	46bd      	mov	sp, r7
 80011bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011c0:	4770      	bx	lr
	...

080011c4 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80011c4:	b580      	push	{r7, lr}
 80011c6:	b086      	sub	sp, #24
 80011c8:	af00      	add	r7, sp, #0
 80011ca:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80011cc:	4a14      	ldr	r2, [pc, #80]	; (8001220 <_sbrk+0x5c>)
 80011ce:	4b15      	ldr	r3, [pc, #84]	; (8001224 <_sbrk+0x60>)
 80011d0:	1ad3      	subs	r3, r2, r3
 80011d2:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80011d4:	697b      	ldr	r3, [r7, #20]
 80011d6:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80011d8:	4b13      	ldr	r3, [pc, #76]	; (8001228 <_sbrk+0x64>)
 80011da:	681b      	ldr	r3, [r3, #0]
 80011dc:	2b00      	cmp	r3, #0
 80011de:	d102      	bne.n	80011e6 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80011e0:	4b11      	ldr	r3, [pc, #68]	; (8001228 <_sbrk+0x64>)
 80011e2:	4a12      	ldr	r2, [pc, #72]	; (800122c <_sbrk+0x68>)
 80011e4:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80011e6:	4b10      	ldr	r3, [pc, #64]	; (8001228 <_sbrk+0x64>)
 80011e8:	681a      	ldr	r2, [r3, #0]
 80011ea:	687b      	ldr	r3, [r7, #4]
 80011ec:	4413      	add	r3, r2
 80011ee:	693a      	ldr	r2, [r7, #16]
 80011f0:	429a      	cmp	r2, r3
 80011f2:	d207      	bcs.n	8001204 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80011f4:	f005 fd4e 	bl	8006c94 <__errno>
 80011f8:	4603      	mov	r3, r0
 80011fa:	220c      	movs	r2, #12
 80011fc:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80011fe:	f04f 33ff 	mov.w	r3, #4294967295
 8001202:	e009      	b.n	8001218 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001204:	4b08      	ldr	r3, [pc, #32]	; (8001228 <_sbrk+0x64>)
 8001206:	681b      	ldr	r3, [r3, #0]
 8001208:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800120a:	4b07      	ldr	r3, [pc, #28]	; (8001228 <_sbrk+0x64>)
 800120c:	681a      	ldr	r2, [r3, #0]
 800120e:	687b      	ldr	r3, [r7, #4]
 8001210:	4413      	add	r3, r2
 8001212:	4a05      	ldr	r2, [pc, #20]	; (8001228 <_sbrk+0x64>)
 8001214:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001216:	68fb      	ldr	r3, [r7, #12]
}
 8001218:	4618      	mov	r0, r3
 800121a:	3718      	adds	r7, #24
 800121c:	46bd      	mov	sp, r7
 800121e:	bd80      	pop	{r7, pc}
 8001220:	20020000 	.word	0x20020000
 8001224:	00000400 	.word	0x00000400
 8001228:	200000bc 	.word	0x200000bc
 800122c:	20002c28 	.word	0x20002c28

08001230 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8001230:	b480      	push	{r7}
 8001232:	af00      	add	r7, sp, #0
 __IO uint32_t tmpreg;
#endif /* DATA_IN_D2_SRAM */

  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8001234:	4b34      	ldr	r3, [pc, #208]	; (8001308 <SystemInit+0xd8>)
 8001236:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800123a:	4a33      	ldr	r2, [pc, #204]	; (8001308 <SystemInit+0xd8>)
 800123c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001240:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/

   /* Increasing the CPU frequency */
  if(FLASH_LATENCY_DEFAULT  > (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 8001244:	4b31      	ldr	r3, [pc, #196]	; (800130c <SystemInit+0xdc>)
 8001246:	681b      	ldr	r3, [r3, #0]
 8001248:	f003 030f 	and.w	r3, r3, #15
 800124c:	2b06      	cmp	r3, #6
 800124e:	d807      	bhi.n	8001260 <SystemInit+0x30>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
	MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 8001250:	4b2e      	ldr	r3, [pc, #184]	; (800130c <SystemInit+0xdc>)
 8001252:	681b      	ldr	r3, [r3, #0]
 8001254:	f023 030f 	bic.w	r3, r3, #15
 8001258:	4a2c      	ldr	r2, [pc, #176]	; (800130c <SystemInit+0xdc>)
 800125a:	f043 0307 	orr.w	r3, r3, #7
 800125e:	6013      	str	r3, [r2, #0]
  }

  /* Set HSION bit */
  RCC->CR |= RCC_CR_HSION;
 8001260:	4b2b      	ldr	r3, [pc, #172]	; (8001310 <SystemInit+0xe0>)
 8001262:	681b      	ldr	r3, [r3, #0]
 8001264:	4a2a      	ldr	r2, [pc, #168]	; (8001310 <SystemInit+0xe0>)
 8001266:	f043 0301 	orr.w	r3, r3, #1
 800126a:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 800126c:	4b28      	ldr	r3, [pc, #160]	; (8001310 <SystemInit+0xe0>)
 800126e:	2200      	movs	r2, #0
 8001270:	611a      	str	r2, [r3, #16]

  /* Reset HSEON, HSECSSON, CSION, HSI48ON, CSIKERON, PLL1ON, PLL2ON and PLL3ON bits */
  RCC->CR &= 0xEAF6ED7FU;
 8001272:	4b27      	ldr	r3, [pc, #156]	; (8001310 <SystemInit+0xe0>)
 8001274:	681a      	ldr	r2, [r3, #0]
 8001276:	4926      	ldr	r1, [pc, #152]	; (8001310 <SystemInit+0xe0>)
 8001278:	4b26      	ldr	r3, [pc, #152]	; (8001314 <SystemInit+0xe4>)
 800127a:	4013      	ands	r3, r2
 800127c:	600b      	str	r3, [r1, #0]
  
   /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLASH_LATENCY_DEFAULT  < (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 800127e:	4b23      	ldr	r3, [pc, #140]	; (800130c <SystemInit+0xdc>)
 8001280:	681b      	ldr	r3, [r3, #0]
 8001282:	f003 0308 	and.w	r3, r3, #8
 8001286:	2b00      	cmp	r3, #0
 8001288:	d007      	beq.n	800129a <SystemInit+0x6a>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
	MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 800128a:	4b20      	ldr	r3, [pc, #128]	; (800130c <SystemInit+0xdc>)
 800128c:	681b      	ldr	r3, [r3, #0]
 800128e:	f023 030f 	bic.w	r3, r3, #15
 8001292:	4a1e      	ldr	r2, [pc, #120]	; (800130c <SystemInit+0xdc>)
 8001294:	f043 0307 	orr.w	r3, r3, #7
 8001298:	6013      	str	r3, [r2, #0]
  }

#if defined(D3_SRAM_BASE)
  /* Reset D1CFGR register */
  RCC->D1CFGR = 0x00000000;
 800129a:	4b1d      	ldr	r3, [pc, #116]	; (8001310 <SystemInit+0xe0>)
 800129c:	2200      	movs	r2, #0
 800129e:	619a      	str	r2, [r3, #24]

  /* Reset D2CFGR register */
  RCC->D2CFGR = 0x00000000;
 80012a0:	4b1b      	ldr	r3, [pc, #108]	; (8001310 <SystemInit+0xe0>)
 80012a2:	2200      	movs	r2, #0
 80012a4:	61da      	str	r2, [r3, #28]

  /* Reset D3CFGR register */
  RCC->D3CFGR = 0x00000000;
 80012a6:	4b1a      	ldr	r3, [pc, #104]	; (8001310 <SystemInit+0xe0>)
 80012a8:	2200      	movs	r2, #0
 80012aa:	621a      	str	r2, [r3, #32]

  /* Reset SRDCFGR register */
  RCC->SRDCFGR = 0x00000000;
#endif
  /* Reset PLLCKSELR register */
  RCC->PLLCKSELR = 0x02020200;
 80012ac:	4b18      	ldr	r3, [pc, #96]	; (8001310 <SystemInit+0xe0>)
 80012ae:	4a1a      	ldr	r2, [pc, #104]	; (8001318 <SystemInit+0xe8>)
 80012b0:	629a      	str	r2, [r3, #40]	; 0x28

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x01FF0000;
 80012b2:	4b17      	ldr	r3, [pc, #92]	; (8001310 <SystemInit+0xe0>)
 80012b4:	4a19      	ldr	r2, [pc, #100]	; (800131c <SystemInit+0xec>)
 80012b6:	62da      	str	r2, [r3, #44]	; 0x2c
  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x01010280;
 80012b8:	4b15      	ldr	r3, [pc, #84]	; (8001310 <SystemInit+0xe0>)
 80012ba:	4a19      	ldr	r2, [pc, #100]	; (8001320 <SystemInit+0xf0>)
 80012bc:	631a      	str	r2, [r3, #48]	; 0x30
  /* Reset PLL1FRACR register */
  RCC->PLL1FRACR = 0x00000000;
 80012be:	4b14      	ldr	r3, [pc, #80]	; (8001310 <SystemInit+0xe0>)
 80012c0:	2200      	movs	r2, #0
 80012c2:	635a      	str	r2, [r3, #52]	; 0x34

  /* Reset PLL2DIVR register */
  RCC->PLL2DIVR = 0x01010280;
 80012c4:	4b12      	ldr	r3, [pc, #72]	; (8001310 <SystemInit+0xe0>)
 80012c6:	4a16      	ldr	r2, [pc, #88]	; (8001320 <SystemInit+0xf0>)
 80012c8:	639a      	str	r2, [r3, #56]	; 0x38

  /* Reset PLL2FRACR register */

  RCC->PLL2FRACR = 0x00000000;
 80012ca:	4b11      	ldr	r3, [pc, #68]	; (8001310 <SystemInit+0xe0>)
 80012cc:	2200      	movs	r2, #0
 80012ce:	63da      	str	r2, [r3, #60]	; 0x3c
  /* Reset PLL3DIVR register */
  RCC->PLL3DIVR = 0x01010280;
 80012d0:	4b0f      	ldr	r3, [pc, #60]	; (8001310 <SystemInit+0xe0>)
 80012d2:	4a13      	ldr	r2, [pc, #76]	; (8001320 <SystemInit+0xf0>)
 80012d4:	641a      	str	r2, [r3, #64]	; 0x40

  /* Reset PLL3FRACR register */
  RCC->PLL3FRACR = 0x00000000;
 80012d6:	4b0e      	ldr	r3, [pc, #56]	; (8001310 <SystemInit+0xe0>)
 80012d8:	2200      	movs	r2, #0
 80012da:	645a      	str	r2, [r3, #68]	; 0x44

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 80012dc:	4b0c      	ldr	r3, [pc, #48]	; (8001310 <SystemInit+0xe0>)
 80012de:	681b      	ldr	r3, [r3, #0]
 80012e0:	4a0b      	ldr	r2, [pc, #44]	; (8001310 <SystemInit+0xe0>)
 80012e2:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80012e6:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 80012e8:	4b09      	ldr	r3, [pc, #36]	; (8001310 <SystemInit+0xe0>)
 80012ea:	2200      	movs	r2, #0
 80012ec:	661a      	str	r2, [r3, #96]	; 0x60
  /*
   * Disable the FMC bank1 (enabled after reset).
   * This, prevents CPU speculation access on this bank which blocks the use of FMC during
   * 24us. During this time the others FMC master (such as LTDC) cannot use it!
   */
  FMC_Bank1_R->BTCR[0] = 0x000030D2;
 80012ee:	4b0d      	ldr	r3, [pc, #52]	; (8001324 <SystemInit+0xf4>)
 80012f0:	f243 02d2 	movw	r2, #12498	; 0x30d2
 80012f4:	601a      	str	r2, [r3, #0]

  /* Configure the Vector Table location add offset address for cortex-M7 ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = D1_AXISRAM_BASE  | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal AXI-RAM */
#else
  SCB->VTOR = FLASH_BANK1_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 80012f6:	4b04      	ldr	r3, [pc, #16]	; (8001308 <SystemInit+0xd8>)
 80012f8:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 80012fc:	609a      	str	r2, [r3, #8]
#endif

#endif /*DUAL_CORE && CORE_CM4*/

}
 80012fe:	bf00      	nop
 8001300:	46bd      	mov	sp, r7
 8001302:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001306:	4770      	bx	lr
 8001308:	e000ed00 	.word	0xe000ed00
 800130c:	52002000 	.word	0x52002000
 8001310:	58024400 	.word	0x58024400
 8001314:	eaf6ed7f 	.word	0xeaf6ed7f
 8001318:	02020200 	.word	0x02020200
 800131c:	01ff0000 	.word	0x01ff0000
 8001320:	01010280 	.word	0x01010280
 8001324:	52004000 	.word	0x52004000

08001328 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack      /* set stack pointer */
 8001328:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001360 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit
 800132c:	f7ff ff80 	bl	8001230 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001330:	480c      	ldr	r0, [pc, #48]	; (8001364 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8001332:	490d      	ldr	r1, [pc, #52]	; (8001368 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8001334:	4a0d      	ldr	r2, [pc, #52]	; (800136c <LoopFillZerobss+0x1a>)
  movs r3, #0
 8001336:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001338:	e002      	b.n	8001340 <LoopCopyDataInit>

0800133a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800133a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800133c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800133e:	3304      	adds	r3, #4

08001340 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001340:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001342:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001344:	d3f9      	bcc.n	800133a <CopyDataInit>
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001346:	4a0a      	ldr	r2, [pc, #40]	; (8001370 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8001348:	4c0a      	ldr	r4, [pc, #40]	; (8001374 <LoopFillZerobss+0x22>)
  movs r3, #0
 800134a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800134c:	e001      	b.n	8001352 <LoopFillZerobss>

0800134e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800134e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001350:	3204      	adds	r2, #4

08001352 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001352:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001354:	d3fb      	bcc.n	800134e <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8001356:	f005 fca3 	bl	8006ca0 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800135a:	f7ff fa87 	bl	800086c <main>
  bx  lr
 800135e:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8001360:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8001364:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001368:	2000009c 	.word	0x2000009c
  ldr r2, =_sidata
 800136c:	08007ecc 	.word	0x08007ecc
  ldr r2, =_sbss
 8001370:	2000009c 	.word	0x2000009c
  ldr r4, =_ebss
 8001374:	20002c24 	.word	0x20002c24

08001378 <ADC3_IRQHandler>:
 * @retval None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001378:	e7fe      	b.n	8001378 <ADC3_IRQHandler>
	...

0800137c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800137c:	b580      	push	{r7, lr}
 800137e:	b082      	sub	sp, #8
 8001380:	af00      	add	r7, sp, #0
   __HAL_ART_CONFIG_BASE_ADDRESS(0x08100000UL);  /* Configure the Cortex-M4 ART Base address to the Flash Bank 2 : */
   __HAL_ART_ENABLE();                           /* Enable the Cortex-M4 ART */
#endif /* DUAL_CORE &&  CORE_CM4 */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001382:	2003      	movs	r0, #3
 8001384:	f000 f98c 	bl	80016a0 <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8001388:	f001 ff84 	bl	8003294 <HAL_RCC_GetSysClockFreq>
 800138c:	4602      	mov	r2, r0
 800138e:	4b15      	ldr	r3, [pc, #84]	; (80013e4 <HAL_Init+0x68>)
 8001390:	699b      	ldr	r3, [r3, #24]
 8001392:	0a1b      	lsrs	r3, r3, #8
 8001394:	f003 030f 	and.w	r3, r3, #15
 8001398:	4913      	ldr	r1, [pc, #76]	; (80013e8 <HAL_Init+0x6c>)
 800139a:	5ccb      	ldrb	r3, [r1, r3]
 800139c:	f003 031f 	and.w	r3, r3, #31
 80013a0:	fa22 f303 	lsr.w	r3, r2, r3
 80013a4:	607b      	str	r3, [r7, #4]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

  /* Update the SystemD2Clock global variable */
#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 80013a6:	4b0f      	ldr	r3, [pc, #60]	; (80013e4 <HAL_Init+0x68>)
 80013a8:	699b      	ldr	r3, [r3, #24]
 80013aa:	f003 030f 	and.w	r3, r3, #15
 80013ae:	4a0e      	ldr	r2, [pc, #56]	; (80013e8 <HAL_Init+0x6c>)
 80013b0:	5cd3      	ldrb	r3, [r2, r3]
 80013b2:	f003 031f 	and.w	r3, r3, #31
 80013b6:	687a      	ldr	r2, [r7, #4]
 80013b8:	fa22 f303 	lsr.w	r3, r2, r3
 80013bc:	4a0b      	ldr	r2, [pc, #44]	; (80013ec <HAL_Init+0x70>)
 80013be:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 80013c0:	4a0b      	ldr	r2, [pc, #44]	; (80013f0 <HAL_Init+0x74>)
 80013c2:	687b      	ldr	r3, [r7, #4]
 80013c4:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 80013c6:	2000      	movs	r0, #0
 80013c8:	f000 f814 	bl	80013f4 <HAL_InitTick>
 80013cc:	4603      	mov	r3, r0
 80013ce:	2b00      	cmp	r3, #0
 80013d0:	d001      	beq.n	80013d6 <HAL_Init+0x5a>
  {
    return HAL_ERROR;
 80013d2:	2301      	movs	r3, #1
 80013d4:	e002      	b.n	80013dc <HAL_Init+0x60>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 80013d6:	f7ff fd1d 	bl	8000e14 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80013da:	2300      	movs	r3, #0
}
 80013dc:	4618      	mov	r0, r3
 80013de:	3708      	adds	r7, #8
 80013e0:	46bd      	mov	sp, r7
 80013e2:	bd80      	pop	{r7, pc}
 80013e4:	58024400 	.word	0x58024400
 80013e8:	08007dec 	.word	0x08007dec
 80013ec:	20000004 	.word	0x20000004
 80013f0:	20000000 	.word	0x20000000

080013f4 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80013f4:	b580      	push	{r7, lr}
 80013f6:	b082      	sub	sp, #8
 80013f8:	af00      	add	r7, sp, #0
 80013fa:	6078      	str	r0, [r7, #4]
  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that don't take the value zero)*/
  if((uint32_t)uwTickFreq == 0UL)
 80013fc:	4b15      	ldr	r3, [pc, #84]	; (8001454 <HAL_InitTick+0x60>)
 80013fe:	781b      	ldrb	r3, [r3, #0]
 8001400:	2b00      	cmp	r3, #0
 8001402:	d101      	bne.n	8001408 <HAL_InitTick+0x14>
  {
    return HAL_ERROR;
 8001404:	2301      	movs	r3, #1
 8001406:	e021      	b.n	800144c <HAL_InitTick+0x58>
  }

    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000UL / (uint32_t)uwTickFreq)) > 0U)
 8001408:	4b13      	ldr	r3, [pc, #76]	; (8001458 <HAL_InitTick+0x64>)
 800140a:	681a      	ldr	r2, [r3, #0]
 800140c:	4b11      	ldr	r3, [pc, #68]	; (8001454 <HAL_InitTick+0x60>)
 800140e:	781b      	ldrb	r3, [r3, #0]
 8001410:	4619      	mov	r1, r3
 8001412:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001416:	fbb3 f3f1 	udiv	r3, r3, r1
 800141a:	fbb2 f3f3 	udiv	r3, r2, r3
 800141e:	4618      	mov	r0, r3
 8001420:	f000 f971 	bl	8001706 <HAL_SYSTICK_Config>
 8001424:	4603      	mov	r3, r0
 8001426:	2b00      	cmp	r3, #0
 8001428:	d001      	beq.n	800142e <HAL_InitTick+0x3a>
    {
      return HAL_ERROR;
 800142a:	2301      	movs	r3, #1
 800142c:	e00e      	b.n	800144c <HAL_InitTick+0x58>
    }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800142e:	687b      	ldr	r3, [r7, #4]
 8001430:	2b0f      	cmp	r3, #15
 8001432:	d80a      	bhi.n	800144a <HAL_InitTick+0x56>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001434:	2200      	movs	r2, #0
 8001436:	6879      	ldr	r1, [r7, #4]
 8001438:	f04f 30ff 	mov.w	r0, #4294967295
 800143c:	f000 f93b 	bl	80016b6 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001440:	4a06      	ldr	r2, [pc, #24]	; (800145c <HAL_InitTick+0x68>)
 8001442:	687b      	ldr	r3, [r7, #4]
 8001444:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001446:	2300      	movs	r3, #0
 8001448:	e000      	b.n	800144c <HAL_InitTick+0x58>
    return HAL_ERROR;
 800144a:	2301      	movs	r3, #1
}
 800144c:	4618      	mov	r0, r3
 800144e:	3708      	adds	r7, #8
 8001450:	46bd      	mov	sp, r7
 8001452:	bd80      	pop	{r7, pc}
 8001454:	2000000c 	.word	0x2000000c
 8001458:	20000000 	.word	0x20000000
 800145c:	20000008 	.word	0x20000008

08001460 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001460:	b480      	push	{r7}
 8001462:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8001464:	4b06      	ldr	r3, [pc, #24]	; (8001480 <HAL_IncTick+0x20>)
 8001466:	781b      	ldrb	r3, [r3, #0]
 8001468:	461a      	mov	r2, r3
 800146a:	4b06      	ldr	r3, [pc, #24]	; (8001484 <HAL_IncTick+0x24>)
 800146c:	681b      	ldr	r3, [r3, #0]
 800146e:	4413      	add	r3, r2
 8001470:	4a04      	ldr	r2, [pc, #16]	; (8001484 <HAL_IncTick+0x24>)
 8001472:	6013      	str	r3, [r2, #0]
}
 8001474:	bf00      	nop
 8001476:	46bd      	mov	sp, r7
 8001478:	f85d 7b04 	ldr.w	r7, [sp], #4
 800147c:	4770      	bx	lr
 800147e:	bf00      	nop
 8001480:	2000000c 	.word	0x2000000c
 8001484:	20002c10 	.word	0x20002c10

08001488 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001488:	b480      	push	{r7}
 800148a:	af00      	add	r7, sp, #0
  return uwTick;
 800148c:	4b03      	ldr	r3, [pc, #12]	; (800149c <HAL_GetTick+0x14>)
 800148e:	681b      	ldr	r3, [r3, #0]
}
 8001490:	4618      	mov	r0, r3
 8001492:	46bd      	mov	sp, r7
 8001494:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001498:	4770      	bx	lr
 800149a:	bf00      	nop
 800149c:	20002c10 	.word	0x20002c10

080014a0 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80014a0:	b580      	push	{r7, lr}
 80014a2:	b084      	sub	sp, #16
 80014a4:	af00      	add	r7, sp, #0
 80014a6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80014a8:	f7ff ffee 	bl	8001488 <HAL_GetTick>
 80014ac:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80014ae:	687b      	ldr	r3, [r7, #4]
 80014b0:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80014b2:	68fb      	ldr	r3, [r7, #12]
 80014b4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80014b8:	d005      	beq.n	80014c6 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80014ba:	4b0a      	ldr	r3, [pc, #40]	; (80014e4 <HAL_Delay+0x44>)
 80014bc:	781b      	ldrb	r3, [r3, #0]
 80014be:	461a      	mov	r2, r3
 80014c0:	68fb      	ldr	r3, [r7, #12]
 80014c2:	4413      	add	r3, r2
 80014c4:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80014c6:	bf00      	nop
 80014c8:	f7ff ffde 	bl	8001488 <HAL_GetTick>
 80014cc:	4602      	mov	r2, r0
 80014ce:	68bb      	ldr	r3, [r7, #8]
 80014d0:	1ad3      	subs	r3, r2, r3
 80014d2:	68fa      	ldr	r2, [r7, #12]
 80014d4:	429a      	cmp	r2, r3
 80014d6:	d8f7      	bhi.n	80014c8 <HAL_Delay+0x28>
  {
  }
}
 80014d8:	bf00      	nop
 80014da:	bf00      	nop
 80014dc:	3710      	adds	r7, #16
 80014de:	46bd      	mov	sp, r7
 80014e0:	bd80      	pop	{r7, pc}
 80014e2:	bf00      	nop
 80014e4:	2000000c 	.word	0x2000000c

080014e8 <HAL_GetREVID>:
/**
  * @brief  Returns the device revision identifier.
  * @retval Device revision identifier
  */
uint32_t HAL_GetREVID(void)
{
 80014e8:	b480      	push	{r7}
 80014ea:	af00      	add	r7, sp, #0
   return((DBGMCU->IDCODE) >> 16);
 80014ec:	4b03      	ldr	r3, [pc, #12]	; (80014fc <HAL_GetREVID+0x14>)
 80014ee:	681b      	ldr	r3, [r3, #0]
 80014f0:	0c1b      	lsrs	r3, r3, #16
}
 80014f2:	4618      	mov	r0, r3
 80014f4:	46bd      	mov	sp, r7
 80014f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014fa:	4770      	bx	lr
 80014fc:	5c001000 	.word	0x5c001000

08001500 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001500:	b480      	push	{r7}
 8001502:	b085      	sub	sp, #20
 8001504:	af00      	add	r7, sp, #0
 8001506:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001508:	687b      	ldr	r3, [r7, #4]
 800150a:	f003 0307 	and.w	r3, r3, #7
 800150e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001510:	4b0b      	ldr	r3, [pc, #44]	; (8001540 <__NVIC_SetPriorityGrouping+0x40>)
 8001512:	68db      	ldr	r3, [r3, #12]
 8001514:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001516:	68ba      	ldr	r2, [r7, #8]
 8001518:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 800151c:	4013      	ands	r3, r2
 800151e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001520:	68fb      	ldr	r3, [r7, #12]
 8001522:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001524:	68bb      	ldr	r3, [r7, #8]
 8001526:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8001528:	4b06      	ldr	r3, [pc, #24]	; (8001544 <__NVIC_SetPriorityGrouping+0x44>)
 800152a:	4313      	orrs	r3, r2
 800152c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800152e:	4a04      	ldr	r2, [pc, #16]	; (8001540 <__NVIC_SetPriorityGrouping+0x40>)
 8001530:	68bb      	ldr	r3, [r7, #8]
 8001532:	60d3      	str	r3, [r2, #12]
}
 8001534:	bf00      	nop
 8001536:	3714      	adds	r7, #20
 8001538:	46bd      	mov	sp, r7
 800153a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800153e:	4770      	bx	lr
 8001540:	e000ed00 	.word	0xe000ed00
 8001544:	05fa0000 	.word	0x05fa0000

08001548 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001548:	b480      	push	{r7}
 800154a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800154c:	4b04      	ldr	r3, [pc, #16]	; (8001560 <__NVIC_GetPriorityGrouping+0x18>)
 800154e:	68db      	ldr	r3, [r3, #12]
 8001550:	0a1b      	lsrs	r3, r3, #8
 8001552:	f003 0307 	and.w	r3, r3, #7
}
 8001556:	4618      	mov	r0, r3
 8001558:	46bd      	mov	sp, r7
 800155a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800155e:	4770      	bx	lr
 8001560:	e000ed00 	.word	0xe000ed00

08001564 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001564:	b480      	push	{r7}
 8001566:	b083      	sub	sp, #12
 8001568:	af00      	add	r7, sp, #0
 800156a:	4603      	mov	r3, r0
 800156c:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 800156e:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001572:	2b00      	cmp	r3, #0
 8001574:	db0b      	blt.n	800158e <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001576:	88fb      	ldrh	r3, [r7, #6]
 8001578:	f003 021f 	and.w	r2, r3, #31
 800157c:	4907      	ldr	r1, [pc, #28]	; (800159c <__NVIC_EnableIRQ+0x38>)
 800157e:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001582:	095b      	lsrs	r3, r3, #5
 8001584:	2001      	movs	r0, #1
 8001586:	fa00 f202 	lsl.w	r2, r0, r2
 800158a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 800158e:	bf00      	nop
 8001590:	370c      	adds	r7, #12
 8001592:	46bd      	mov	sp, r7
 8001594:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001598:	4770      	bx	lr
 800159a:	bf00      	nop
 800159c:	e000e100 	.word	0xe000e100

080015a0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80015a0:	b480      	push	{r7}
 80015a2:	b083      	sub	sp, #12
 80015a4:	af00      	add	r7, sp, #0
 80015a6:	4603      	mov	r3, r0
 80015a8:	6039      	str	r1, [r7, #0]
 80015aa:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 80015ac:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80015b0:	2b00      	cmp	r3, #0
 80015b2:	db0a      	blt.n	80015ca <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80015b4:	683b      	ldr	r3, [r7, #0]
 80015b6:	b2da      	uxtb	r2, r3
 80015b8:	490c      	ldr	r1, [pc, #48]	; (80015ec <__NVIC_SetPriority+0x4c>)
 80015ba:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80015be:	0112      	lsls	r2, r2, #4
 80015c0:	b2d2      	uxtb	r2, r2
 80015c2:	440b      	add	r3, r1
 80015c4:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80015c8:	e00a      	b.n	80015e0 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80015ca:	683b      	ldr	r3, [r7, #0]
 80015cc:	b2da      	uxtb	r2, r3
 80015ce:	4908      	ldr	r1, [pc, #32]	; (80015f0 <__NVIC_SetPriority+0x50>)
 80015d0:	88fb      	ldrh	r3, [r7, #6]
 80015d2:	f003 030f 	and.w	r3, r3, #15
 80015d6:	3b04      	subs	r3, #4
 80015d8:	0112      	lsls	r2, r2, #4
 80015da:	b2d2      	uxtb	r2, r2
 80015dc:	440b      	add	r3, r1
 80015de:	761a      	strb	r2, [r3, #24]
}
 80015e0:	bf00      	nop
 80015e2:	370c      	adds	r7, #12
 80015e4:	46bd      	mov	sp, r7
 80015e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015ea:	4770      	bx	lr
 80015ec:	e000e100 	.word	0xe000e100
 80015f0:	e000ed00 	.word	0xe000ed00

080015f4 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80015f4:	b480      	push	{r7}
 80015f6:	b089      	sub	sp, #36	; 0x24
 80015f8:	af00      	add	r7, sp, #0
 80015fa:	60f8      	str	r0, [r7, #12]
 80015fc:	60b9      	str	r1, [r7, #8]
 80015fe:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001600:	68fb      	ldr	r3, [r7, #12]
 8001602:	f003 0307 	and.w	r3, r3, #7
 8001606:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001608:	69fb      	ldr	r3, [r7, #28]
 800160a:	f1c3 0307 	rsb	r3, r3, #7
 800160e:	2b04      	cmp	r3, #4
 8001610:	bf28      	it	cs
 8001612:	2304      	movcs	r3, #4
 8001614:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001616:	69fb      	ldr	r3, [r7, #28]
 8001618:	3304      	adds	r3, #4
 800161a:	2b06      	cmp	r3, #6
 800161c:	d902      	bls.n	8001624 <NVIC_EncodePriority+0x30>
 800161e:	69fb      	ldr	r3, [r7, #28]
 8001620:	3b03      	subs	r3, #3
 8001622:	e000      	b.n	8001626 <NVIC_EncodePriority+0x32>
 8001624:	2300      	movs	r3, #0
 8001626:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001628:	f04f 32ff 	mov.w	r2, #4294967295
 800162c:	69bb      	ldr	r3, [r7, #24]
 800162e:	fa02 f303 	lsl.w	r3, r2, r3
 8001632:	43da      	mvns	r2, r3
 8001634:	68bb      	ldr	r3, [r7, #8]
 8001636:	401a      	ands	r2, r3
 8001638:	697b      	ldr	r3, [r7, #20]
 800163a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800163c:	f04f 31ff 	mov.w	r1, #4294967295
 8001640:	697b      	ldr	r3, [r7, #20]
 8001642:	fa01 f303 	lsl.w	r3, r1, r3
 8001646:	43d9      	mvns	r1, r3
 8001648:	687b      	ldr	r3, [r7, #4]
 800164a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800164c:	4313      	orrs	r3, r2
         );
}
 800164e:	4618      	mov	r0, r3
 8001650:	3724      	adds	r7, #36	; 0x24
 8001652:	46bd      	mov	sp, r7
 8001654:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001658:	4770      	bx	lr
	...

0800165c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 800165c:	b580      	push	{r7, lr}
 800165e:	b082      	sub	sp, #8
 8001660:	af00      	add	r7, sp, #0
 8001662:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001664:	687b      	ldr	r3, [r7, #4]
 8001666:	3b01      	subs	r3, #1
 8001668:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800166c:	d301      	bcc.n	8001672 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800166e:	2301      	movs	r3, #1
 8001670:	e00f      	b.n	8001692 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001672:	4a0a      	ldr	r2, [pc, #40]	; (800169c <SysTick_Config+0x40>)
 8001674:	687b      	ldr	r3, [r7, #4]
 8001676:	3b01      	subs	r3, #1
 8001678:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800167a:	210f      	movs	r1, #15
 800167c:	f04f 30ff 	mov.w	r0, #4294967295
 8001680:	f7ff ff8e 	bl	80015a0 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001684:	4b05      	ldr	r3, [pc, #20]	; (800169c <SysTick_Config+0x40>)
 8001686:	2200      	movs	r2, #0
 8001688:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800168a:	4b04      	ldr	r3, [pc, #16]	; (800169c <SysTick_Config+0x40>)
 800168c:	2207      	movs	r2, #7
 800168e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001690:	2300      	movs	r3, #0
}
 8001692:	4618      	mov	r0, r3
 8001694:	3708      	adds	r7, #8
 8001696:	46bd      	mov	sp, r7
 8001698:	bd80      	pop	{r7, pc}
 800169a:	bf00      	nop
 800169c:	e000e010 	.word	0xe000e010

080016a0 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80016a0:	b580      	push	{r7, lr}
 80016a2:	b082      	sub	sp, #8
 80016a4:	af00      	add	r7, sp, #0
 80016a6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80016a8:	6878      	ldr	r0, [r7, #4]
 80016aa:	f7ff ff29 	bl	8001500 <__NVIC_SetPriorityGrouping>
}
 80016ae:	bf00      	nop
 80016b0:	3708      	adds	r7, #8
 80016b2:	46bd      	mov	sp, r7
 80016b4:	bd80      	pop	{r7, pc}

080016b6 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80016b6:	b580      	push	{r7, lr}
 80016b8:	b086      	sub	sp, #24
 80016ba:	af00      	add	r7, sp, #0
 80016bc:	4603      	mov	r3, r0
 80016be:	60b9      	str	r1, [r7, #8]
 80016c0:	607a      	str	r2, [r7, #4]
 80016c2:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 80016c4:	f7ff ff40 	bl	8001548 <__NVIC_GetPriorityGrouping>
 80016c8:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80016ca:	687a      	ldr	r2, [r7, #4]
 80016cc:	68b9      	ldr	r1, [r7, #8]
 80016ce:	6978      	ldr	r0, [r7, #20]
 80016d0:	f7ff ff90 	bl	80015f4 <NVIC_EncodePriority>
 80016d4:	4602      	mov	r2, r0
 80016d6:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 80016da:	4611      	mov	r1, r2
 80016dc:	4618      	mov	r0, r3
 80016de:	f7ff ff5f 	bl	80015a0 <__NVIC_SetPriority>
}
 80016e2:	bf00      	nop
 80016e4:	3718      	adds	r7, #24
 80016e6:	46bd      	mov	sp, r7
 80016e8:	bd80      	pop	{r7, pc}

080016ea <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32h7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80016ea:	b580      	push	{r7, lr}
 80016ec:	b082      	sub	sp, #8
 80016ee:	af00      	add	r7, sp, #0
 80016f0:	4603      	mov	r3, r0
 80016f2:	80fb      	strh	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80016f4:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80016f8:	4618      	mov	r0, r3
 80016fa:	f7ff ff33 	bl	8001564 <__NVIC_EnableIRQ>
}
 80016fe:	bf00      	nop
 8001700:	3708      	adds	r7, #8
 8001702:	46bd      	mov	sp, r7
 8001704:	bd80      	pop	{r7, pc}

08001706 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status   - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001706:	b580      	push	{r7, lr}
 8001708:	b082      	sub	sp, #8
 800170a:	af00      	add	r7, sp, #0
 800170c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800170e:	6878      	ldr	r0, [r7, #4]
 8001710:	f7ff ffa4 	bl	800165c <SysTick_Config>
 8001714:	4603      	mov	r3, r0
}
 8001716:	4618      	mov	r0, r3
 8001718:	3708      	adds	r7, #8
 800171a:	46bd      	mov	sp, r7
 800171c:	bd80      	pop	{r7, pc}
	...

08001720 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8001720:	b580      	push	{r7, lr}
 8001722:	b086      	sub	sp, #24
 8001724:	af00      	add	r7, sp, #0
 8001726:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs_dma;
  BDMA_Base_Registers *regs_bdma;
  const __IO uint32_t *enableRegister;

  uint32_t tickstart = HAL_GetTick();
 8001728:	f7ff feae 	bl	8001488 <HAL_GetTick>
 800172c:	6138      	str	r0, [r7, #16]

 /* Check the DMA peripheral handle */
  if(hdma == NULL)
 800172e:	687b      	ldr	r3, [r7, #4]
 8001730:	2b00      	cmp	r3, #0
 8001732:	d101      	bne.n	8001738 <HAL_DMA_Abort+0x18>
  {
    return HAL_ERROR;
 8001734:	2301      	movs	r3, #1
 8001736:	e2dc      	b.n	8001cf2 <HAL_DMA_Abort+0x5d2>
  }

  /* Check the DMA peripheral state */
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8001738:	687b      	ldr	r3, [r7, #4]
 800173a:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800173e:	b2db      	uxtb	r3, r3
 8001740:	2b02      	cmp	r3, #2
 8001742:	d008      	beq.n	8001756 <HAL_DMA_Abort+0x36>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001744:	687b      	ldr	r3, [r7, #4]
 8001746:	2280      	movs	r2, #128	; 0x80
 8001748:	655a      	str	r2, [r3, #84]	; 0x54

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800174a:	687b      	ldr	r3, [r7, #4]
 800174c:	2200      	movs	r2, #0
 800174e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    return HAL_ERROR;
 8001752:	2301      	movs	r3, #1
 8001754:	e2cd      	b.n	8001cf2 <HAL_DMA_Abort+0x5d2>
  }
  else
  {
    /* Disable all the transfer interrupts */
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8001756:	687b      	ldr	r3, [r7, #4]
 8001758:	681b      	ldr	r3, [r3, #0]
 800175a:	4a76      	ldr	r2, [pc, #472]	; (8001934 <HAL_DMA_Abort+0x214>)
 800175c:	4293      	cmp	r3, r2
 800175e:	d04a      	beq.n	80017f6 <HAL_DMA_Abort+0xd6>
 8001760:	687b      	ldr	r3, [r7, #4]
 8001762:	681b      	ldr	r3, [r3, #0]
 8001764:	4a74      	ldr	r2, [pc, #464]	; (8001938 <HAL_DMA_Abort+0x218>)
 8001766:	4293      	cmp	r3, r2
 8001768:	d045      	beq.n	80017f6 <HAL_DMA_Abort+0xd6>
 800176a:	687b      	ldr	r3, [r7, #4]
 800176c:	681b      	ldr	r3, [r3, #0]
 800176e:	4a73      	ldr	r2, [pc, #460]	; (800193c <HAL_DMA_Abort+0x21c>)
 8001770:	4293      	cmp	r3, r2
 8001772:	d040      	beq.n	80017f6 <HAL_DMA_Abort+0xd6>
 8001774:	687b      	ldr	r3, [r7, #4]
 8001776:	681b      	ldr	r3, [r3, #0]
 8001778:	4a71      	ldr	r2, [pc, #452]	; (8001940 <HAL_DMA_Abort+0x220>)
 800177a:	4293      	cmp	r3, r2
 800177c:	d03b      	beq.n	80017f6 <HAL_DMA_Abort+0xd6>
 800177e:	687b      	ldr	r3, [r7, #4]
 8001780:	681b      	ldr	r3, [r3, #0]
 8001782:	4a70      	ldr	r2, [pc, #448]	; (8001944 <HAL_DMA_Abort+0x224>)
 8001784:	4293      	cmp	r3, r2
 8001786:	d036      	beq.n	80017f6 <HAL_DMA_Abort+0xd6>
 8001788:	687b      	ldr	r3, [r7, #4]
 800178a:	681b      	ldr	r3, [r3, #0]
 800178c:	4a6e      	ldr	r2, [pc, #440]	; (8001948 <HAL_DMA_Abort+0x228>)
 800178e:	4293      	cmp	r3, r2
 8001790:	d031      	beq.n	80017f6 <HAL_DMA_Abort+0xd6>
 8001792:	687b      	ldr	r3, [r7, #4]
 8001794:	681b      	ldr	r3, [r3, #0]
 8001796:	4a6d      	ldr	r2, [pc, #436]	; (800194c <HAL_DMA_Abort+0x22c>)
 8001798:	4293      	cmp	r3, r2
 800179a:	d02c      	beq.n	80017f6 <HAL_DMA_Abort+0xd6>
 800179c:	687b      	ldr	r3, [r7, #4]
 800179e:	681b      	ldr	r3, [r3, #0]
 80017a0:	4a6b      	ldr	r2, [pc, #428]	; (8001950 <HAL_DMA_Abort+0x230>)
 80017a2:	4293      	cmp	r3, r2
 80017a4:	d027      	beq.n	80017f6 <HAL_DMA_Abort+0xd6>
 80017a6:	687b      	ldr	r3, [r7, #4]
 80017a8:	681b      	ldr	r3, [r3, #0]
 80017aa:	4a6a      	ldr	r2, [pc, #424]	; (8001954 <HAL_DMA_Abort+0x234>)
 80017ac:	4293      	cmp	r3, r2
 80017ae:	d022      	beq.n	80017f6 <HAL_DMA_Abort+0xd6>
 80017b0:	687b      	ldr	r3, [r7, #4]
 80017b2:	681b      	ldr	r3, [r3, #0]
 80017b4:	4a68      	ldr	r2, [pc, #416]	; (8001958 <HAL_DMA_Abort+0x238>)
 80017b6:	4293      	cmp	r3, r2
 80017b8:	d01d      	beq.n	80017f6 <HAL_DMA_Abort+0xd6>
 80017ba:	687b      	ldr	r3, [r7, #4]
 80017bc:	681b      	ldr	r3, [r3, #0]
 80017be:	4a67      	ldr	r2, [pc, #412]	; (800195c <HAL_DMA_Abort+0x23c>)
 80017c0:	4293      	cmp	r3, r2
 80017c2:	d018      	beq.n	80017f6 <HAL_DMA_Abort+0xd6>
 80017c4:	687b      	ldr	r3, [r7, #4]
 80017c6:	681b      	ldr	r3, [r3, #0]
 80017c8:	4a65      	ldr	r2, [pc, #404]	; (8001960 <HAL_DMA_Abort+0x240>)
 80017ca:	4293      	cmp	r3, r2
 80017cc:	d013      	beq.n	80017f6 <HAL_DMA_Abort+0xd6>
 80017ce:	687b      	ldr	r3, [r7, #4]
 80017d0:	681b      	ldr	r3, [r3, #0]
 80017d2:	4a64      	ldr	r2, [pc, #400]	; (8001964 <HAL_DMA_Abort+0x244>)
 80017d4:	4293      	cmp	r3, r2
 80017d6:	d00e      	beq.n	80017f6 <HAL_DMA_Abort+0xd6>
 80017d8:	687b      	ldr	r3, [r7, #4]
 80017da:	681b      	ldr	r3, [r3, #0]
 80017dc:	4a62      	ldr	r2, [pc, #392]	; (8001968 <HAL_DMA_Abort+0x248>)
 80017de:	4293      	cmp	r3, r2
 80017e0:	d009      	beq.n	80017f6 <HAL_DMA_Abort+0xd6>
 80017e2:	687b      	ldr	r3, [r7, #4]
 80017e4:	681b      	ldr	r3, [r3, #0]
 80017e6:	4a61      	ldr	r2, [pc, #388]	; (800196c <HAL_DMA_Abort+0x24c>)
 80017e8:	4293      	cmp	r3, r2
 80017ea:	d004      	beq.n	80017f6 <HAL_DMA_Abort+0xd6>
 80017ec:	687b      	ldr	r3, [r7, #4]
 80017ee:	681b      	ldr	r3, [r3, #0]
 80017f0:	4a5f      	ldr	r2, [pc, #380]	; (8001970 <HAL_DMA_Abort+0x250>)
 80017f2:	4293      	cmp	r3, r2
 80017f4:	d101      	bne.n	80017fa <HAL_DMA_Abort+0xda>
 80017f6:	2301      	movs	r3, #1
 80017f8:	e000      	b.n	80017fc <HAL_DMA_Abort+0xdc>
 80017fa:	2300      	movs	r3, #0
 80017fc:	2b00      	cmp	r3, #0
 80017fe:	d013      	beq.n	8001828 <HAL_DMA_Abort+0x108>
    {
       /* Disable DMA All Interrupts  */
      ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME | DMA_IT_HT);
 8001800:	687b      	ldr	r3, [r7, #4]
 8001802:	681b      	ldr	r3, [r3, #0]
 8001804:	681a      	ldr	r2, [r3, #0]
 8001806:	687b      	ldr	r3, [r7, #4]
 8001808:	681b      	ldr	r3, [r3, #0]
 800180a:	f022 021e 	bic.w	r2, r2, #30
 800180e:	601a      	str	r2, [r3, #0]
      ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR &= ~(DMA_IT_FE);
 8001810:	687b      	ldr	r3, [r7, #4]
 8001812:	681b      	ldr	r3, [r3, #0]
 8001814:	695a      	ldr	r2, [r3, #20]
 8001816:	687b      	ldr	r3, [r7, #4]
 8001818:	681b      	ldr	r3, [r3, #0]
 800181a:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800181e:	615a      	str	r2, [r3, #20]

      enableRegister = (__IO uint32_t *)(&(((DMA_Stream_TypeDef   *)hdma->Instance)->CR));
 8001820:	687b      	ldr	r3, [r7, #4]
 8001822:	681b      	ldr	r3, [r3, #0]
 8001824:	617b      	str	r3, [r7, #20]
 8001826:	e00a      	b.n	800183e <HAL_DMA_Abort+0x11e>
    }
    else /* BDMA channel */
    {
      /* Disable DMA All Interrupts */
      ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  &= ~(BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE);
 8001828:	687b      	ldr	r3, [r7, #4]
 800182a:	681b      	ldr	r3, [r3, #0]
 800182c:	681a      	ldr	r2, [r3, #0]
 800182e:	687b      	ldr	r3, [r7, #4]
 8001830:	681b      	ldr	r3, [r3, #0]
 8001832:	f022 020e 	bic.w	r2, r2, #14
 8001836:	601a      	str	r2, [r3, #0]

      enableRegister = (__IO uint32_t *)(&(((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR));
 8001838:	687b      	ldr	r3, [r7, #4]
 800183a:	681b      	ldr	r3, [r3, #0]
 800183c:	617b      	str	r3, [r7, #20]
    }

    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 800183e:	687b      	ldr	r3, [r7, #4]
 8001840:	681b      	ldr	r3, [r3, #0]
 8001842:	4a3c      	ldr	r2, [pc, #240]	; (8001934 <HAL_DMA_Abort+0x214>)
 8001844:	4293      	cmp	r3, r2
 8001846:	d072      	beq.n	800192e <HAL_DMA_Abort+0x20e>
 8001848:	687b      	ldr	r3, [r7, #4]
 800184a:	681b      	ldr	r3, [r3, #0]
 800184c:	4a3a      	ldr	r2, [pc, #232]	; (8001938 <HAL_DMA_Abort+0x218>)
 800184e:	4293      	cmp	r3, r2
 8001850:	d06d      	beq.n	800192e <HAL_DMA_Abort+0x20e>
 8001852:	687b      	ldr	r3, [r7, #4]
 8001854:	681b      	ldr	r3, [r3, #0]
 8001856:	4a39      	ldr	r2, [pc, #228]	; (800193c <HAL_DMA_Abort+0x21c>)
 8001858:	4293      	cmp	r3, r2
 800185a:	d068      	beq.n	800192e <HAL_DMA_Abort+0x20e>
 800185c:	687b      	ldr	r3, [r7, #4]
 800185e:	681b      	ldr	r3, [r3, #0]
 8001860:	4a37      	ldr	r2, [pc, #220]	; (8001940 <HAL_DMA_Abort+0x220>)
 8001862:	4293      	cmp	r3, r2
 8001864:	d063      	beq.n	800192e <HAL_DMA_Abort+0x20e>
 8001866:	687b      	ldr	r3, [r7, #4]
 8001868:	681b      	ldr	r3, [r3, #0]
 800186a:	4a36      	ldr	r2, [pc, #216]	; (8001944 <HAL_DMA_Abort+0x224>)
 800186c:	4293      	cmp	r3, r2
 800186e:	d05e      	beq.n	800192e <HAL_DMA_Abort+0x20e>
 8001870:	687b      	ldr	r3, [r7, #4]
 8001872:	681b      	ldr	r3, [r3, #0]
 8001874:	4a34      	ldr	r2, [pc, #208]	; (8001948 <HAL_DMA_Abort+0x228>)
 8001876:	4293      	cmp	r3, r2
 8001878:	d059      	beq.n	800192e <HAL_DMA_Abort+0x20e>
 800187a:	687b      	ldr	r3, [r7, #4]
 800187c:	681b      	ldr	r3, [r3, #0]
 800187e:	4a33      	ldr	r2, [pc, #204]	; (800194c <HAL_DMA_Abort+0x22c>)
 8001880:	4293      	cmp	r3, r2
 8001882:	d054      	beq.n	800192e <HAL_DMA_Abort+0x20e>
 8001884:	687b      	ldr	r3, [r7, #4]
 8001886:	681b      	ldr	r3, [r3, #0]
 8001888:	4a31      	ldr	r2, [pc, #196]	; (8001950 <HAL_DMA_Abort+0x230>)
 800188a:	4293      	cmp	r3, r2
 800188c:	d04f      	beq.n	800192e <HAL_DMA_Abort+0x20e>
 800188e:	687b      	ldr	r3, [r7, #4]
 8001890:	681b      	ldr	r3, [r3, #0]
 8001892:	4a30      	ldr	r2, [pc, #192]	; (8001954 <HAL_DMA_Abort+0x234>)
 8001894:	4293      	cmp	r3, r2
 8001896:	d04a      	beq.n	800192e <HAL_DMA_Abort+0x20e>
 8001898:	687b      	ldr	r3, [r7, #4]
 800189a:	681b      	ldr	r3, [r3, #0]
 800189c:	4a2e      	ldr	r2, [pc, #184]	; (8001958 <HAL_DMA_Abort+0x238>)
 800189e:	4293      	cmp	r3, r2
 80018a0:	d045      	beq.n	800192e <HAL_DMA_Abort+0x20e>
 80018a2:	687b      	ldr	r3, [r7, #4]
 80018a4:	681b      	ldr	r3, [r3, #0]
 80018a6:	4a2d      	ldr	r2, [pc, #180]	; (800195c <HAL_DMA_Abort+0x23c>)
 80018a8:	4293      	cmp	r3, r2
 80018aa:	d040      	beq.n	800192e <HAL_DMA_Abort+0x20e>
 80018ac:	687b      	ldr	r3, [r7, #4]
 80018ae:	681b      	ldr	r3, [r3, #0]
 80018b0:	4a2b      	ldr	r2, [pc, #172]	; (8001960 <HAL_DMA_Abort+0x240>)
 80018b2:	4293      	cmp	r3, r2
 80018b4:	d03b      	beq.n	800192e <HAL_DMA_Abort+0x20e>
 80018b6:	687b      	ldr	r3, [r7, #4]
 80018b8:	681b      	ldr	r3, [r3, #0]
 80018ba:	4a2a      	ldr	r2, [pc, #168]	; (8001964 <HAL_DMA_Abort+0x244>)
 80018bc:	4293      	cmp	r3, r2
 80018be:	d036      	beq.n	800192e <HAL_DMA_Abort+0x20e>
 80018c0:	687b      	ldr	r3, [r7, #4]
 80018c2:	681b      	ldr	r3, [r3, #0]
 80018c4:	4a28      	ldr	r2, [pc, #160]	; (8001968 <HAL_DMA_Abort+0x248>)
 80018c6:	4293      	cmp	r3, r2
 80018c8:	d031      	beq.n	800192e <HAL_DMA_Abort+0x20e>
 80018ca:	687b      	ldr	r3, [r7, #4]
 80018cc:	681b      	ldr	r3, [r3, #0]
 80018ce:	4a27      	ldr	r2, [pc, #156]	; (800196c <HAL_DMA_Abort+0x24c>)
 80018d0:	4293      	cmp	r3, r2
 80018d2:	d02c      	beq.n	800192e <HAL_DMA_Abort+0x20e>
 80018d4:	687b      	ldr	r3, [r7, #4]
 80018d6:	681b      	ldr	r3, [r3, #0]
 80018d8:	4a25      	ldr	r2, [pc, #148]	; (8001970 <HAL_DMA_Abort+0x250>)
 80018da:	4293      	cmp	r3, r2
 80018dc:	d027      	beq.n	800192e <HAL_DMA_Abort+0x20e>
 80018de:	687b      	ldr	r3, [r7, #4]
 80018e0:	681b      	ldr	r3, [r3, #0]
 80018e2:	4a24      	ldr	r2, [pc, #144]	; (8001974 <HAL_DMA_Abort+0x254>)
 80018e4:	4293      	cmp	r3, r2
 80018e6:	d022      	beq.n	800192e <HAL_DMA_Abort+0x20e>
 80018e8:	687b      	ldr	r3, [r7, #4]
 80018ea:	681b      	ldr	r3, [r3, #0]
 80018ec:	4a22      	ldr	r2, [pc, #136]	; (8001978 <HAL_DMA_Abort+0x258>)
 80018ee:	4293      	cmp	r3, r2
 80018f0:	d01d      	beq.n	800192e <HAL_DMA_Abort+0x20e>
 80018f2:	687b      	ldr	r3, [r7, #4]
 80018f4:	681b      	ldr	r3, [r3, #0]
 80018f6:	4a21      	ldr	r2, [pc, #132]	; (800197c <HAL_DMA_Abort+0x25c>)
 80018f8:	4293      	cmp	r3, r2
 80018fa:	d018      	beq.n	800192e <HAL_DMA_Abort+0x20e>
 80018fc:	687b      	ldr	r3, [r7, #4]
 80018fe:	681b      	ldr	r3, [r3, #0]
 8001900:	4a1f      	ldr	r2, [pc, #124]	; (8001980 <HAL_DMA_Abort+0x260>)
 8001902:	4293      	cmp	r3, r2
 8001904:	d013      	beq.n	800192e <HAL_DMA_Abort+0x20e>
 8001906:	687b      	ldr	r3, [r7, #4]
 8001908:	681b      	ldr	r3, [r3, #0]
 800190a:	4a1e      	ldr	r2, [pc, #120]	; (8001984 <HAL_DMA_Abort+0x264>)
 800190c:	4293      	cmp	r3, r2
 800190e:	d00e      	beq.n	800192e <HAL_DMA_Abort+0x20e>
 8001910:	687b      	ldr	r3, [r7, #4]
 8001912:	681b      	ldr	r3, [r3, #0]
 8001914:	4a1c      	ldr	r2, [pc, #112]	; (8001988 <HAL_DMA_Abort+0x268>)
 8001916:	4293      	cmp	r3, r2
 8001918:	d009      	beq.n	800192e <HAL_DMA_Abort+0x20e>
 800191a:	687b      	ldr	r3, [r7, #4]
 800191c:	681b      	ldr	r3, [r3, #0]
 800191e:	4a1b      	ldr	r2, [pc, #108]	; (800198c <HAL_DMA_Abort+0x26c>)
 8001920:	4293      	cmp	r3, r2
 8001922:	d004      	beq.n	800192e <HAL_DMA_Abort+0x20e>
 8001924:	687b      	ldr	r3, [r7, #4]
 8001926:	681b      	ldr	r3, [r3, #0]
 8001928:	4a19      	ldr	r2, [pc, #100]	; (8001990 <HAL_DMA_Abort+0x270>)
 800192a:	4293      	cmp	r3, r2
 800192c:	d132      	bne.n	8001994 <HAL_DMA_Abort+0x274>
 800192e:	2301      	movs	r3, #1
 8001930:	e031      	b.n	8001996 <HAL_DMA_Abort+0x276>
 8001932:	bf00      	nop
 8001934:	40020010 	.word	0x40020010
 8001938:	40020028 	.word	0x40020028
 800193c:	40020040 	.word	0x40020040
 8001940:	40020058 	.word	0x40020058
 8001944:	40020070 	.word	0x40020070
 8001948:	40020088 	.word	0x40020088
 800194c:	400200a0 	.word	0x400200a0
 8001950:	400200b8 	.word	0x400200b8
 8001954:	40020410 	.word	0x40020410
 8001958:	40020428 	.word	0x40020428
 800195c:	40020440 	.word	0x40020440
 8001960:	40020458 	.word	0x40020458
 8001964:	40020470 	.word	0x40020470
 8001968:	40020488 	.word	0x40020488
 800196c:	400204a0 	.word	0x400204a0
 8001970:	400204b8 	.word	0x400204b8
 8001974:	58025408 	.word	0x58025408
 8001978:	5802541c 	.word	0x5802541c
 800197c:	58025430 	.word	0x58025430
 8001980:	58025444 	.word	0x58025444
 8001984:	58025458 	.word	0x58025458
 8001988:	5802546c 	.word	0x5802546c
 800198c:	58025480 	.word	0x58025480
 8001990:	58025494 	.word	0x58025494
 8001994:	2300      	movs	r3, #0
 8001996:	2b00      	cmp	r3, #0
 8001998:	d007      	beq.n	80019aa <HAL_DMA_Abort+0x28a>
    {
      /* disable the DMAMUX sync overrun IT */
      hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 800199a:	687b      	ldr	r3, [r7, #4]
 800199c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800199e:	681a      	ldr	r2, [r3, #0]
 80019a0:	687b      	ldr	r3, [r7, #4]
 80019a2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80019a4:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80019a8:	601a      	str	r2, [r3, #0]
    }

    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 80019aa:	687b      	ldr	r3, [r7, #4]
 80019ac:	681b      	ldr	r3, [r3, #0]
 80019ae:	4a6d      	ldr	r2, [pc, #436]	; (8001b64 <HAL_DMA_Abort+0x444>)
 80019b0:	4293      	cmp	r3, r2
 80019b2:	d04a      	beq.n	8001a4a <HAL_DMA_Abort+0x32a>
 80019b4:	687b      	ldr	r3, [r7, #4]
 80019b6:	681b      	ldr	r3, [r3, #0]
 80019b8:	4a6b      	ldr	r2, [pc, #428]	; (8001b68 <HAL_DMA_Abort+0x448>)
 80019ba:	4293      	cmp	r3, r2
 80019bc:	d045      	beq.n	8001a4a <HAL_DMA_Abort+0x32a>
 80019be:	687b      	ldr	r3, [r7, #4]
 80019c0:	681b      	ldr	r3, [r3, #0]
 80019c2:	4a6a      	ldr	r2, [pc, #424]	; (8001b6c <HAL_DMA_Abort+0x44c>)
 80019c4:	4293      	cmp	r3, r2
 80019c6:	d040      	beq.n	8001a4a <HAL_DMA_Abort+0x32a>
 80019c8:	687b      	ldr	r3, [r7, #4]
 80019ca:	681b      	ldr	r3, [r3, #0]
 80019cc:	4a68      	ldr	r2, [pc, #416]	; (8001b70 <HAL_DMA_Abort+0x450>)
 80019ce:	4293      	cmp	r3, r2
 80019d0:	d03b      	beq.n	8001a4a <HAL_DMA_Abort+0x32a>
 80019d2:	687b      	ldr	r3, [r7, #4]
 80019d4:	681b      	ldr	r3, [r3, #0]
 80019d6:	4a67      	ldr	r2, [pc, #412]	; (8001b74 <HAL_DMA_Abort+0x454>)
 80019d8:	4293      	cmp	r3, r2
 80019da:	d036      	beq.n	8001a4a <HAL_DMA_Abort+0x32a>
 80019dc:	687b      	ldr	r3, [r7, #4]
 80019de:	681b      	ldr	r3, [r3, #0]
 80019e0:	4a65      	ldr	r2, [pc, #404]	; (8001b78 <HAL_DMA_Abort+0x458>)
 80019e2:	4293      	cmp	r3, r2
 80019e4:	d031      	beq.n	8001a4a <HAL_DMA_Abort+0x32a>
 80019e6:	687b      	ldr	r3, [r7, #4]
 80019e8:	681b      	ldr	r3, [r3, #0]
 80019ea:	4a64      	ldr	r2, [pc, #400]	; (8001b7c <HAL_DMA_Abort+0x45c>)
 80019ec:	4293      	cmp	r3, r2
 80019ee:	d02c      	beq.n	8001a4a <HAL_DMA_Abort+0x32a>
 80019f0:	687b      	ldr	r3, [r7, #4]
 80019f2:	681b      	ldr	r3, [r3, #0]
 80019f4:	4a62      	ldr	r2, [pc, #392]	; (8001b80 <HAL_DMA_Abort+0x460>)
 80019f6:	4293      	cmp	r3, r2
 80019f8:	d027      	beq.n	8001a4a <HAL_DMA_Abort+0x32a>
 80019fa:	687b      	ldr	r3, [r7, #4]
 80019fc:	681b      	ldr	r3, [r3, #0]
 80019fe:	4a61      	ldr	r2, [pc, #388]	; (8001b84 <HAL_DMA_Abort+0x464>)
 8001a00:	4293      	cmp	r3, r2
 8001a02:	d022      	beq.n	8001a4a <HAL_DMA_Abort+0x32a>
 8001a04:	687b      	ldr	r3, [r7, #4]
 8001a06:	681b      	ldr	r3, [r3, #0]
 8001a08:	4a5f      	ldr	r2, [pc, #380]	; (8001b88 <HAL_DMA_Abort+0x468>)
 8001a0a:	4293      	cmp	r3, r2
 8001a0c:	d01d      	beq.n	8001a4a <HAL_DMA_Abort+0x32a>
 8001a0e:	687b      	ldr	r3, [r7, #4]
 8001a10:	681b      	ldr	r3, [r3, #0]
 8001a12:	4a5e      	ldr	r2, [pc, #376]	; (8001b8c <HAL_DMA_Abort+0x46c>)
 8001a14:	4293      	cmp	r3, r2
 8001a16:	d018      	beq.n	8001a4a <HAL_DMA_Abort+0x32a>
 8001a18:	687b      	ldr	r3, [r7, #4]
 8001a1a:	681b      	ldr	r3, [r3, #0]
 8001a1c:	4a5c      	ldr	r2, [pc, #368]	; (8001b90 <HAL_DMA_Abort+0x470>)
 8001a1e:	4293      	cmp	r3, r2
 8001a20:	d013      	beq.n	8001a4a <HAL_DMA_Abort+0x32a>
 8001a22:	687b      	ldr	r3, [r7, #4]
 8001a24:	681b      	ldr	r3, [r3, #0]
 8001a26:	4a5b      	ldr	r2, [pc, #364]	; (8001b94 <HAL_DMA_Abort+0x474>)
 8001a28:	4293      	cmp	r3, r2
 8001a2a:	d00e      	beq.n	8001a4a <HAL_DMA_Abort+0x32a>
 8001a2c:	687b      	ldr	r3, [r7, #4]
 8001a2e:	681b      	ldr	r3, [r3, #0]
 8001a30:	4a59      	ldr	r2, [pc, #356]	; (8001b98 <HAL_DMA_Abort+0x478>)
 8001a32:	4293      	cmp	r3, r2
 8001a34:	d009      	beq.n	8001a4a <HAL_DMA_Abort+0x32a>
 8001a36:	687b      	ldr	r3, [r7, #4]
 8001a38:	681b      	ldr	r3, [r3, #0]
 8001a3a:	4a58      	ldr	r2, [pc, #352]	; (8001b9c <HAL_DMA_Abort+0x47c>)
 8001a3c:	4293      	cmp	r3, r2
 8001a3e:	d004      	beq.n	8001a4a <HAL_DMA_Abort+0x32a>
 8001a40:	687b      	ldr	r3, [r7, #4]
 8001a42:	681b      	ldr	r3, [r3, #0]
 8001a44:	4a56      	ldr	r2, [pc, #344]	; (8001ba0 <HAL_DMA_Abort+0x480>)
 8001a46:	4293      	cmp	r3, r2
 8001a48:	d108      	bne.n	8001a5c <HAL_DMA_Abort+0x33c>
 8001a4a:	687b      	ldr	r3, [r7, #4]
 8001a4c:	681b      	ldr	r3, [r3, #0]
 8001a4e:	681a      	ldr	r2, [r3, #0]
 8001a50:	687b      	ldr	r3, [r7, #4]
 8001a52:	681b      	ldr	r3, [r3, #0]
 8001a54:	f022 0201 	bic.w	r2, r2, #1
 8001a58:	601a      	str	r2, [r3, #0]
 8001a5a:	e007      	b.n	8001a6c <HAL_DMA_Abort+0x34c>
 8001a5c:	687b      	ldr	r3, [r7, #4]
 8001a5e:	681b      	ldr	r3, [r3, #0]
 8001a60:	681a      	ldr	r2, [r3, #0]
 8001a62:	687b      	ldr	r3, [r7, #4]
 8001a64:	681b      	ldr	r3, [r3, #0]
 8001a66:	f022 0201 	bic.w	r2, r2, #1
 8001a6a:	601a      	str	r2, [r3, #0]

    /* Check if the DMA Stream is effectively disabled */
    while(((*enableRegister) & DMA_SxCR_EN) != 0U)
 8001a6c:	e013      	b.n	8001a96 <HAL_DMA_Abort+0x376>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8001a6e:	f7ff fd0b 	bl	8001488 <HAL_GetTick>
 8001a72:	4602      	mov	r2, r0
 8001a74:	693b      	ldr	r3, [r7, #16]
 8001a76:	1ad3      	subs	r3, r2, r3
 8001a78:	2b05      	cmp	r3, #5
 8001a7a:	d90c      	bls.n	8001a96 <HAL_DMA_Abort+0x376>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8001a7c:	687b      	ldr	r3, [r7, #4]
 8001a7e:	2220      	movs	r2, #32
 8001a80:	655a      	str	r2, [r3, #84]	; 0x54

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8001a82:	687b      	ldr	r3, [r7, #4]
 8001a84:	2200      	movs	r2, #0
 8001a86:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_ERROR;
 8001a8a:	687b      	ldr	r3, [r7, #4]
 8001a8c:	2203      	movs	r2, #3
 8001a8e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        return HAL_ERROR;
 8001a92:	2301      	movs	r3, #1
 8001a94:	e12d      	b.n	8001cf2 <HAL_DMA_Abort+0x5d2>
    while(((*enableRegister) & DMA_SxCR_EN) != 0U)
 8001a96:	697b      	ldr	r3, [r7, #20]
 8001a98:	681b      	ldr	r3, [r3, #0]
 8001a9a:	f003 0301 	and.w	r3, r3, #1
 8001a9e:	2b00      	cmp	r3, #0
 8001aa0:	d1e5      	bne.n	8001a6e <HAL_DMA_Abort+0x34e>
      }
    }

    /* Clear all interrupt flags at correct offset within the register */
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8001aa2:	687b      	ldr	r3, [r7, #4]
 8001aa4:	681b      	ldr	r3, [r3, #0]
 8001aa6:	4a2f      	ldr	r2, [pc, #188]	; (8001b64 <HAL_DMA_Abort+0x444>)
 8001aa8:	4293      	cmp	r3, r2
 8001aaa:	d04a      	beq.n	8001b42 <HAL_DMA_Abort+0x422>
 8001aac:	687b      	ldr	r3, [r7, #4]
 8001aae:	681b      	ldr	r3, [r3, #0]
 8001ab0:	4a2d      	ldr	r2, [pc, #180]	; (8001b68 <HAL_DMA_Abort+0x448>)
 8001ab2:	4293      	cmp	r3, r2
 8001ab4:	d045      	beq.n	8001b42 <HAL_DMA_Abort+0x422>
 8001ab6:	687b      	ldr	r3, [r7, #4]
 8001ab8:	681b      	ldr	r3, [r3, #0]
 8001aba:	4a2c      	ldr	r2, [pc, #176]	; (8001b6c <HAL_DMA_Abort+0x44c>)
 8001abc:	4293      	cmp	r3, r2
 8001abe:	d040      	beq.n	8001b42 <HAL_DMA_Abort+0x422>
 8001ac0:	687b      	ldr	r3, [r7, #4]
 8001ac2:	681b      	ldr	r3, [r3, #0]
 8001ac4:	4a2a      	ldr	r2, [pc, #168]	; (8001b70 <HAL_DMA_Abort+0x450>)
 8001ac6:	4293      	cmp	r3, r2
 8001ac8:	d03b      	beq.n	8001b42 <HAL_DMA_Abort+0x422>
 8001aca:	687b      	ldr	r3, [r7, #4]
 8001acc:	681b      	ldr	r3, [r3, #0]
 8001ace:	4a29      	ldr	r2, [pc, #164]	; (8001b74 <HAL_DMA_Abort+0x454>)
 8001ad0:	4293      	cmp	r3, r2
 8001ad2:	d036      	beq.n	8001b42 <HAL_DMA_Abort+0x422>
 8001ad4:	687b      	ldr	r3, [r7, #4]
 8001ad6:	681b      	ldr	r3, [r3, #0]
 8001ad8:	4a27      	ldr	r2, [pc, #156]	; (8001b78 <HAL_DMA_Abort+0x458>)
 8001ada:	4293      	cmp	r3, r2
 8001adc:	d031      	beq.n	8001b42 <HAL_DMA_Abort+0x422>
 8001ade:	687b      	ldr	r3, [r7, #4]
 8001ae0:	681b      	ldr	r3, [r3, #0]
 8001ae2:	4a26      	ldr	r2, [pc, #152]	; (8001b7c <HAL_DMA_Abort+0x45c>)
 8001ae4:	4293      	cmp	r3, r2
 8001ae6:	d02c      	beq.n	8001b42 <HAL_DMA_Abort+0x422>
 8001ae8:	687b      	ldr	r3, [r7, #4]
 8001aea:	681b      	ldr	r3, [r3, #0]
 8001aec:	4a24      	ldr	r2, [pc, #144]	; (8001b80 <HAL_DMA_Abort+0x460>)
 8001aee:	4293      	cmp	r3, r2
 8001af0:	d027      	beq.n	8001b42 <HAL_DMA_Abort+0x422>
 8001af2:	687b      	ldr	r3, [r7, #4]
 8001af4:	681b      	ldr	r3, [r3, #0]
 8001af6:	4a23      	ldr	r2, [pc, #140]	; (8001b84 <HAL_DMA_Abort+0x464>)
 8001af8:	4293      	cmp	r3, r2
 8001afa:	d022      	beq.n	8001b42 <HAL_DMA_Abort+0x422>
 8001afc:	687b      	ldr	r3, [r7, #4]
 8001afe:	681b      	ldr	r3, [r3, #0]
 8001b00:	4a21      	ldr	r2, [pc, #132]	; (8001b88 <HAL_DMA_Abort+0x468>)
 8001b02:	4293      	cmp	r3, r2
 8001b04:	d01d      	beq.n	8001b42 <HAL_DMA_Abort+0x422>
 8001b06:	687b      	ldr	r3, [r7, #4]
 8001b08:	681b      	ldr	r3, [r3, #0]
 8001b0a:	4a20      	ldr	r2, [pc, #128]	; (8001b8c <HAL_DMA_Abort+0x46c>)
 8001b0c:	4293      	cmp	r3, r2
 8001b0e:	d018      	beq.n	8001b42 <HAL_DMA_Abort+0x422>
 8001b10:	687b      	ldr	r3, [r7, #4]
 8001b12:	681b      	ldr	r3, [r3, #0]
 8001b14:	4a1e      	ldr	r2, [pc, #120]	; (8001b90 <HAL_DMA_Abort+0x470>)
 8001b16:	4293      	cmp	r3, r2
 8001b18:	d013      	beq.n	8001b42 <HAL_DMA_Abort+0x422>
 8001b1a:	687b      	ldr	r3, [r7, #4]
 8001b1c:	681b      	ldr	r3, [r3, #0]
 8001b1e:	4a1d      	ldr	r2, [pc, #116]	; (8001b94 <HAL_DMA_Abort+0x474>)
 8001b20:	4293      	cmp	r3, r2
 8001b22:	d00e      	beq.n	8001b42 <HAL_DMA_Abort+0x422>
 8001b24:	687b      	ldr	r3, [r7, #4]
 8001b26:	681b      	ldr	r3, [r3, #0]
 8001b28:	4a1b      	ldr	r2, [pc, #108]	; (8001b98 <HAL_DMA_Abort+0x478>)
 8001b2a:	4293      	cmp	r3, r2
 8001b2c:	d009      	beq.n	8001b42 <HAL_DMA_Abort+0x422>
 8001b2e:	687b      	ldr	r3, [r7, #4]
 8001b30:	681b      	ldr	r3, [r3, #0]
 8001b32:	4a1a      	ldr	r2, [pc, #104]	; (8001b9c <HAL_DMA_Abort+0x47c>)
 8001b34:	4293      	cmp	r3, r2
 8001b36:	d004      	beq.n	8001b42 <HAL_DMA_Abort+0x422>
 8001b38:	687b      	ldr	r3, [r7, #4]
 8001b3a:	681b      	ldr	r3, [r3, #0]
 8001b3c:	4a18      	ldr	r2, [pc, #96]	; (8001ba0 <HAL_DMA_Abort+0x480>)
 8001b3e:	4293      	cmp	r3, r2
 8001b40:	d101      	bne.n	8001b46 <HAL_DMA_Abort+0x426>
 8001b42:	2301      	movs	r3, #1
 8001b44:	e000      	b.n	8001b48 <HAL_DMA_Abort+0x428>
 8001b46:	2300      	movs	r3, #0
 8001b48:	2b00      	cmp	r3, #0
 8001b4a:	d02b      	beq.n	8001ba4 <HAL_DMA_Abort+0x484>
    {
      regs_dma = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8001b4c:	687b      	ldr	r3, [r7, #4]
 8001b4e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001b50:	60bb      	str	r3, [r7, #8]
      regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 8001b52:	687b      	ldr	r3, [r7, #4]
 8001b54:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001b56:	f003 031f 	and.w	r3, r3, #31
 8001b5a:	223f      	movs	r2, #63	; 0x3f
 8001b5c:	409a      	lsls	r2, r3
 8001b5e:	68bb      	ldr	r3, [r7, #8]
 8001b60:	609a      	str	r2, [r3, #8]
 8001b62:	e02a      	b.n	8001bba <HAL_DMA_Abort+0x49a>
 8001b64:	40020010 	.word	0x40020010
 8001b68:	40020028 	.word	0x40020028
 8001b6c:	40020040 	.word	0x40020040
 8001b70:	40020058 	.word	0x40020058
 8001b74:	40020070 	.word	0x40020070
 8001b78:	40020088 	.word	0x40020088
 8001b7c:	400200a0 	.word	0x400200a0
 8001b80:	400200b8 	.word	0x400200b8
 8001b84:	40020410 	.word	0x40020410
 8001b88:	40020428 	.word	0x40020428
 8001b8c:	40020440 	.word	0x40020440
 8001b90:	40020458 	.word	0x40020458
 8001b94:	40020470 	.word	0x40020470
 8001b98:	40020488 	.word	0x40020488
 8001b9c:	400204a0 	.word	0x400204a0
 8001ba0:	400204b8 	.word	0x400204b8
    }
    else /* BDMA channel */
    {
      regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 8001ba4:	687b      	ldr	r3, [r7, #4]
 8001ba6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001ba8:	60fb      	str	r3, [r7, #12]
      regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 8001baa:	687b      	ldr	r3, [r7, #4]
 8001bac:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001bae:	f003 031f 	and.w	r3, r3, #31
 8001bb2:	2201      	movs	r2, #1
 8001bb4:	409a      	lsls	r2, r3
 8001bb6:	68fb      	ldr	r3, [r7, #12]
 8001bb8:	605a      	str	r2, [r3, #4]
    }

    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8001bba:	687b      	ldr	r3, [r7, #4]
 8001bbc:	681b      	ldr	r3, [r3, #0]
 8001bbe:	4a4f      	ldr	r2, [pc, #316]	; (8001cfc <HAL_DMA_Abort+0x5dc>)
 8001bc0:	4293      	cmp	r3, r2
 8001bc2:	d072      	beq.n	8001caa <HAL_DMA_Abort+0x58a>
 8001bc4:	687b      	ldr	r3, [r7, #4]
 8001bc6:	681b      	ldr	r3, [r3, #0]
 8001bc8:	4a4d      	ldr	r2, [pc, #308]	; (8001d00 <HAL_DMA_Abort+0x5e0>)
 8001bca:	4293      	cmp	r3, r2
 8001bcc:	d06d      	beq.n	8001caa <HAL_DMA_Abort+0x58a>
 8001bce:	687b      	ldr	r3, [r7, #4]
 8001bd0:	681b      	ldr	r3, [r3, #0]
 8001bd2:	4a4c      	ldr	r2, [pc, #304]	; (8001d04 <HAL_DMA_Abort+0x5e4>)
 8001bd4:	4293      	cmp	r3, r2
 8001bd6:	d068      	beq.n	8001caa <HAL_DMA_Abort+0x58a>
 8001bd8:	687b      	ldr	r3, [r7, #4]
 8001bda:	681b      	ldr	r3, [r3, #0]
 8001bdc:	4a4a      	ldr	r2, [pc, #296]	; (8001d08 <HAL_DMA_Abort+0x5e8>)
 8001bde:	4293      	cmp	r3, r2
 8001be0:	d063      	beq.n	8001caa <HAL_DMA_Abort+0x58a>
 8001be2:	687b      	ldr	r3, [r7, #4]
 8001be4:	681b      	ldr	r3, [r3, #0]
 8001be6:	4a49      	ldr	r2, [pc, #292]	; (8001d0c <HAL_DMA_Abort+0x5ec>)
 8001be8:	4293      	cmp	r3, r2
 8001bea:	d05e      	beq.n	8001caa <HAL_DMA_Abort+0x58a>
 8001bec:	687b      	ldr	r3, [r7, #4]
 8001bee:	681b      	ldr	r3, [r3, #0]
 8001bf0:	4a47      	ldr	r2, [pc, #284]	; (8001d10 <HAL_DMA_Abort+0x5f0>)
 8001bf2:	4293      	cmp	r3, r2
 8001bf4:	d059      	beq.n	8001caa <HAL_DMA_Abort+0x58a>
 8001bf6:	687b      	ldr	r3, [r7, #4]
 8001bf8:	681b      	ldr	r3, [r3, #0]
 8001bfa:	4a46      	ldr	r2, [pc, #280]	; (8001d14 <HAL_DMA_Abort+0x5f4>)
 8001bfc:	4293      	cmp	r3, r2
 8001bfe:	d054      	beq.n	8001caa <HAL_DMA_Abort+0x58a>
 8001c00:	687b      	ldr	r3, [r7, #4]
 8001c02:	681b      	ldr	r3, [r3, #0]
 8001c04:	4a44      	ldr	r2, [pc, #272]	; (8001d18 <HAL_DMA_Abort+0x5f8>)
 8001c06:	4293      	cmp	r3, r2
 8001c08:	d04f      	beq.n	8001caa <HAL_DMA_Abort+0x58a>
 8001c0a:	687b      	ldr	r3, [r7, #4]
 8001c0c:	681b      	ldr	r3, [r3, #0]
 8001c0e:	4a43      	ldr	r2, [pc, #268]	; (8001d1c <HAL_DMA_Abort+0x5fc>)
 8001c10:	4293      	cmp	r3, r2
 8001c12:	d04a      	beq.n	8001caa <HAL_DMA_Abort+0x58a>
 8001c14:	687b      	ldr	r3, [r7, #4]
 8001c16:	681b      	ldr	r3, [r3, #0]
 8001c18:	4a41      	ldr	r2, [pc, #260]	; (8001d20 <HAL_DMA_Abort+0x600>)
 8001c1a:	4293      	cmp	r3, r2
 8001c1c:	d045      	beq.n	8001caa <HAL_DMA_Abort+0x58a>
 8001c1e:	687b      	ldr	r3, [r7, #4]
 8001c20:	681b      	ldr	r3, [r3, #0]
 8001c22:	4a40      	ldr	r2, [pc, #256]	; (8001d24 <HAL_DMA_Abort+0x604>)
 8001c24:	4293      	cmp	r3, r2
 8001c26:	d040      	beq.n	8001caa <HAL_DMA_Abort+0x58a>
 8001c28:	687b      	ldr	r3, [r7, #4]
 8001c2a:	681b      	ldr	r3, [r3, #0]
 8001c2c:	4a3e      	ldr	r2, [pc, #248]	; (8001d28 <HAL_DMA_Abort+0x608>)
 8001c2e:	4293      	cmp	r3, r2
 8001c30:	d03b      	beq.n	8001caa <HAL_DMA_Abort+0x58a>
 8001c32:	687b      	ldr	r3, [r7, #4]
 8001c34:	681b      	ldr	r3, [r3, #0]
 8001c36:	4a3d      	ldr	r2, [pc, #244]	; (8001d2c <HAL_DMA_Abort+0x60c>)
 8001c38:	4293      	cmp	r3, r2
 8001c3a:	d036      	beq.n	8001caa <HAL_DMA_Abort+0x58a>
 8001c3c:	687b      	ldr	r3, [r7, #4]
 8001c3e:	681b      	ldr	r3, [r3, #0]
 8001c40:	4a3b      	ldr	r2, [pc, #236]	; (8001d30 <HAL_DMA_Abort+0x610>)
 8001c42:	4293      	cmp	r3, r2
 8001c44:	d031      	beq.n	8001caa <HAL_DMA_Abort+0x58a>
 8001c46:	687b      	ldr	r3, [r7, #4]
 8001c48:	681b      	ldr	r3, [r3, #0]
 8001c4a:	4a3a      	ldr	r2, [pc, #232]	; (8001d34 <HAL_DMA_Abort+0x614>)
 8001c4c:	4293      	cmp	r3, r2
 8001c4e:	d02c      	beq.n	8001caa <HAL_DMA_Abort+0x58a>
 8001c50:	687b      	ldr	r3, [r7, #4]
 8001c52:	681b      	ldr	r3, [r3, #0]
 8001c54:	4a38      	ldr	r2, [pc, #224]	; (8001d38 <HAL_DMA_Abort+0x618>)
 8001c56:	4293      	cmp	r3, r2
 8001c58:	d027      	beq.n	8001caa <HAL_DMA_Abort+0x58a>
 8001c5a:	687b      	ldr	r3, [r7, #4]
 8001c5c:	681b      	ldr	r3, [r3, #0]
 8001c5e:	4a37      	ldr	r2, [pc, #220]	; (8001d3c <HAL_DMA_Abort+0x61c>)
 8001c60:	4293      	cmp	r3, r2
 8001c62:	d022      	beq.n	8001caa <HAL_DMA_Abort+0x58a>
 8001c64:	687b      	ldr	r3, [r7, #4]
 8001c66:	681b      	ldr	r3, [r3, #0]
 8001c68:	4a35      	ldr	r2, [pc, #212]	; (8001d40 <HAL_DMA_Abort+0x620>)
 8001c6a:	4293      	cmp	r3, r2
 8001c6c:	d01d      	beq.n	8001caa <HAL_DMA_Abort+0x58a>
 8001c6e:	687b      	ldr	r3, [r7, #4]
 8001c70:	681b      	ldr	r3, [r3, #0]
 8001c72:	4a34      	ldr	r2, [pc, #208]	; (8001d44 <HAL_DMA_Abort+0x624>)
 8001c74:	4293      	cmp	r3, r2
 8001c76:	d018      	beq.n	8001caa <HAL_DMA_Abort+0x58a>
 8001c78:	687b      	ldr	r3, [r7, #4]
 8001c7a:	681b      	ldr	r3, [r3, #0]
 8001c7c:	4a32      	ldr	r2, [pc, #200]	; (8001d48 <HAL_DMA_Abort+0x628>)
 8001c7e:	4293      	cmp	r3, r2
 8001c80:	d013      	beq.n	8001caa <HAL_DMA_Abort+0x58a>
 8001c82:	687b      	ldr	r3, [r7, #4]
 8001c84:	681b      	ldr	r3, [r3, #0]
 8001c86:	4a31      	ldr	r2, [pc, #196]	; (8001d4c <HAL_DMA_Abort+0x62c>)
 8001c88:	4293      	cmp	r3, r2
 8001c8a:	d00e      	beq.n	8001caa <HAL_DMA_Abort+0x58a>
 8001c8c:	687b      	ldr	r3, [r7, #4]
 8001c8e:	681b      	ldr	r3, [r3, #0]
 8001c90:	4a2f      	ldr	r2, [pc, #188]	; (8001d50 <HAL_DMA_Abort+0x630>)
 8001c92:	4293      	cmp	r3, r2
 8001c94:	d009      	beq.n	8001caa <HAL_DMA_Abort+0x58a>
 8001c96:	687b      	ldr	r3, [r7, #4]
 8001c98:	681b      	ldr	r3, [r3, #0]
 8001c9a:	4a2e      	ldr	r2, [pc, #184]	; (8001d54 <HAL_DMA_Abort+0x634>)
 8001c9c:	4293      	cmp	r3, r2
 8001c9e:	d004      	beq.n	8001caa <HAL_DMA_Abort+0x58a>
 8001ca0:	687b      	ldr	r3, [r7, #4]
 8001ca2:	681b      	ldr	r3, [r3, #0]
 8001ca4:	4a2c      	ldr	r2, [pc, #176]	; (8001d58 <HAL_DMA_Abort+0x638>)
 8001ca6:	4293      	cmp	r3, r2
 8001ca8:	d101      	bne.n	8001cae <HAL_DMA_Abort+0x58e>
 8001caa:	2301      	movs	r3, #1
 8001cac:	e000      	b.n	8001cb0 <HAL_DMA_Abort+0x590>
 8001cae:	2300      	movs	r3, #0
 8001cb0:	2b00      	cmp	r3, #0
 8001cb2:	d015      	beq.n	8001ce0 <HAL_DMA_Abort+0x5c0>
    {
      /* Clear the DMAMUX synchro overrun flag */
      hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8001cb4:	687b      	ldr	r3, [r7, #4]
 8001cb6:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8001cb8:	687a      	ldr	r2, [r7, #4]
 8001cba:	6e92      	ldr	r2, [r2, #104]	; 0x68
 8001cbc:	605a      	str	r2, [r3, #4]

      if(hdma->DMAmuxRequestGen != 0U)
 8001cbe:	687b      	ldr	r3, [r7, #4]
 8001cc0:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8001cc2:	2b00      	cmp	r3, #0
 8001cc4:	d00c      	beq.n	8001ce0 <HAL_DMA_Abort+0x5c0>
      {
        /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT */
        /* disable the request gen overrun IT */
        hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8001cc6:	687b      	ldr	r3, [r7, #4]
 8001cc8:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8001cca:	681a      	ldr	r2, [r3, #0]
 8001ccc:	687b      	ldr	r3, [r7, #4]
 8001cce:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8001cd0:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8001cd4:	601a      	str	r2, [r3, #0]

        /* Clear the DMAMUX request generator overrun flag */
        hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8001cd6:	687b      	ldr	r3, [r7, #4]
 8001cd8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001cda:	687a      	ldr	r2, [r7, #4]
 8001cdc:	6f52      	ldr	r2, [r2, #116]	; 0x74
 8001cde:	605a      	str	r2, [r3, #4]
      }
    }

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001ce0:	687b      	ldr	r3, [r7, #4]
 8001ce2:	2200      	movs	r2, #0
 8001ce4:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8001ce8:	687b      	ldr	r3, [r7, #4]
 8001cea:	2201      	movs	r2, #1
 8001cec:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
  }

  return HAL_OK;
 8001cf0:	2300      	movs	r3, #0
}
 8001cf2:	4618      	mov	r0, r3
 8001cf4:	3718      	adds	r7, #24
 8001cf6:	46bd      	mov	sp, r7
 8001cf8:	bd80      	pop	{r7, pc}
 8001cfa:	bf00      	nop
 8001cfc:	40020010 	.word	0x40020010
 8001d00:	40020028 	.word	0x40020028
 8001d04:	40020040 	.word	0x40020040
 8001d08:	40020058 	.word	0x40020058
 8001d0c:	40020070 	.word	0x40020070
 8001d10:	40020088 	.word	0x40020088
 8001d14:	400200a0 	.word	0x400200a0
 8001d18:	400200b8 	.word	0x400200b8
 8001d1c:	40020410 	.word	0x40020410
 8001d20:	40020428 	.word	0x40020428
 8001d24:	40020440 	.word	0x40020440
 8001d28:	40020458 	.word	0x40020458
 8001d2c:	40020470 	.word	0x40020470
 8001d30:	40020488 	.word	0x40020488
 8001d34:	400204a0 	.word	0x400204a0
 8001d38:	400204b8 	.word	0x400204b8
 8001d3c:	58025408 	.word	0x58025408
 8001d40:	5802541c 	.word	0x5802541c
 8001d44:	58025430 	.word	0x58025430
 8001d48:	58025444 	.word	0x58025444
 8001d4c:	58025458 	.word	0x58025458
 8001d50:	5802546c 	.word	0x5802546c
 8001d54:	58025480 	.word	0x58025480
 8001d58:	58025494 	.word	0x58025494

08001d5c <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8001d5c:	b580      	push	{r7, lr}
 8001d5e:	b084      	sub	sp, #16
 8001d60:	af00      	add	r7, sp, #0
 8001d62:	6078      	str	r0, [r7, #4]
  BDMA_Base_Registers *regs_bdma;

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 8001d64:	687b      	ldr	r3, [r7, #4]
 8001d66:	2b00      	cmp	r3, #0
 8001d68:	d101      	bne.n	8001d6e <HAL_DMA_Abort_IT+0x12>
  {
    return HAL_ERROR;
 8001d6a:	2301      	movs	r3, #1
 8001d6c:	e205      	b.n	800217a <HAL_DMA_Abort_IT+0x41e>
  }

  if(hdma->State != HAL_DMA_STATE_BUSY)
 8001d6e:	687b      	ldr	r3, [r7, #4]
 8001d70:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8001d74:	b2db      	uxtb	r3, r3
 8001d76:	2b02      	cmp	r3, #2
 8001d78:	d004      	beq.n	8001d84 <HAL_DMA_Abort_IT+0x28>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001d7a:	687b      	ldr	r3, [r7, #4]
 8001d7c:	2280      	movs	r2, #128	; 0x80
 8001d7e:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8001d80:	2301      	movs	r3, #1
 8001d82:	e1fa      	b.n	800217a <HAL_DMA_Abort_IT+0x41e>
  }
  else
  {
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8001d84:	687b      	ldr	r3, [r7, #4]
 8001d86:	681b      	ldr	r3, [r3, #0]
 8001d88:	4a8c      	ldr	r2, [pc, #560]	; (8001fbc <HAL_DMA_Abort_IT+0x260>)
 8001d8a:	4293      	cmp	r3, r2
 8001d8c:	d04a      	beq.n	8001e24 <HAL_DMA_Abort_IT+0xc8>
 8001d8e:	687b      	ldr	r3, [r7, #4]
 8001d90:	681b      	ldr	r3, [r3, #0]
 8001d92:	4a8b      	ldr	r2, [pc, #556]	; (8001fc0 <HAL_DMA_Abort_IT+0x264>)
 8001d94:	4293      	cmp	r3, r2
 8001d96:	d045      	beq.n	8001e24 <HAL_DMA_Abort_IT+0xc8>
 8001d98:	687b      	ldr	r3, [r7, #4]
 8001d9a:	681b      	ldr	r3, [r3, #0]
 8001d9c:	4a89      	ldr	r2, [pc, #548]	; (8001fc4 <HAL_DMA_Abort_IT+0x268>)
 8001d9e:	4293      	cmp	r3, r2
 8001da0:	d040      	beq.n	8001e24 <HAL_DMA_Abort_IT+0xc8>
 8001da2:	687b      	ldr	r3, [r7, #4]
 8001da4:	681b      	ldr	r3, [r3, #0]
 8001da6:	4a88      	ldr	r2, [pc, #544]	; (8001fc8 <HAL_DMA_Abort_IT+0x26c>)
 8001da8:	4293      	cmp	r3, r2
 8001daa:	d03b      	beq.n	8001e24 <HAL_DMA_Abort_IT+0xc8>
 8001dac:	687b      	ldr	r3, [r7, #4]
 8001dae:	681b      	ldr	r3, [r3, #0]
 8001db0:	4a86      	ldr	r2, [pc, #536]	; (8001fcc <HAL_DMA_Abort_IT+0x270>)
 8001db2:	4293      	cmp	r3, r2
 8001db4:	d036      	beq.n	8001e24 <HAL_DMA_Abort_IT+0xc8>
 8001db6:	687b      	ldr	r3, [r7, #4]
 8001db8:	681b      	ldr	r3, [r3, #0]
 8001dba:	4a85      	ldr	r2, [pc, #532]	; (8001fd0 <HAL_DMA_Abort_IT+0x274>)
 8001dbc:	4293      	cmp	r3, r2
 8001dbe:	d031      	beq.n	8001e24 <HAL_DMA_Abort_IT+0xc8>
 8001dc0:	687b      	ldr	r3, [r7, #4]
 8001dc2:	681b      	ldr	r3, [r3, #0]
 8001dc4:	4a83      	ldr	r2, [pc, #524]	; (8001fd4 <HAL_DMA_Abort_IT+0x278>)
 8001dc6:	4293      	cmp	r3, r2
 8001dc8:	d02c      	beq.n	8001e24 <HAL_DMA_Abort_IT+0xc8>
 8001dca:	687b      	ldr	r3, [r7, #4]
 8001dcc:	681b      	ldr	r3, [r3, #0]
 8001dce:	4a82      	ldr	r2, [pc, #520]	; (8001fd8 <HAL_DMA_Abort_IT+0x27c>)
 8001dd0:	4293      	cmp	r3, r2
 8001dd2:	d027      	beq.n	8001e24 <HAL_DMA_Abort_IT+0xc8>
 8001dd4:	687b      	ldr	r3, [r7, #4]
 8001dd6:	681b      	ldr	r3, [r3, #0]
 8001dd8:	4a80      	ldr	r2, [pc, #512]	; (8001fdc <HAL_DMA_Abort_IT+0x280>)
 8001dda:	4293      	cmp	r3, r2
 8001ddc:	d022      	beq.n	8001e24 <HAL_DMA_Abort_IT+0xc8>
 8001dde:	687b      	ldr	r3, [r7, #4]
 8001de0:	681b      	ldr	r3, [r3, #0]
 8001de2:	4a7f      	ldr	r2, [pc, #508]	; (8001fe0 <HAL_DMA_Abort_IT+0x284>)
 8001de4:	4293      	cmp	r3, r2
 8001de6:	d01d      	beq.n	8001e24 <HAL_DMA_Abort_IT+0xc8>
 8001de8:	687b      	ldr	r3, [r7, #4]
 8001dea:	681b      	ldr	r3, [r3, #0]
 8001dec:	4a7d      	ldr	r2, [pc, #500]	; (8001fe4 <HAL_DMA_Abort_IT+0x288>)
 8001dee:	4293      	cmp	r3, r2
 8001df0:	d018      	beq.n	8001e24 <HAL_DMA_Abort_IT+0xc8>
 8001df2:	687b      	ldr	r3, [r7, #4]
 8001df4:	681b      	ldr	r3, [r3, #0]
 8001df6:	4a7c      	ldr	r2, [pc, #496]	; (8001fe8 <HAL_DMA_Abort_IT+0x28c>)
 8001df8:	4293      	cmp	r3, r2
 8001dfa:	d013      	beq.n	8001e24 <HAL_DMA_Abort_IT+0xc8>
 8001dfc:	687b      	ldr	r3, [r7, #4]
 8001dfe:	681b      	ldr	r3, [r3, #0]
 8001e00:	4a7a      	ldr	r2, [pc, #488]	; (8001fec <HAL_DMA_Abort_IT+0x290>)
 8001e02:	4293      	cmp	r3, r2
 8001e04:	d00e      	beq.n	8001e24 <HAL_DMA_Abort_IT+0xc8>
 8001e06:	687b      	ldr	r3, [r7, #4]
 8001e08:	681b      	ldr	r3, [r3, #0]
 8001e0a:	4a79      	ldr	r2, [pc, #484]	; (8001ff0 <HAL_DMA_Abort_IT+0x294>)
 8001e0c:	4293      	cmp	r3, r2
 8001e0e:	d009      	beq.n	8001e24 <HAL_DMA_Abort_IT+0xc8>
 8001e10:	687b      	ldr	r3, [r7, #4]
 8001e12:	681b      	ldr	r3, [r3, #0]
 8001e14:	4a77      	ldr	r2, [pc, #476]	; (8001ff4 <HAL_DMA_Abort_IT+0x298>)
 8001e16:	4293      	cmp	r3, r2
 8001e18:	d004      	beq.n	8001e24 <HAL_DMA_Abort_IT+0xc8>
 8001e1a:	687b      	ldr	r3, [r7, #4]
 8001e1c:	681b      	ldr	r3, [r3, #0]
 8001e1e:	4a76      	ldr	r2, [pc, #472]	; (8001ff8 <HAL_DMA_Abort_IT+0x29c>)
 8001e20:	4293      	cmp	r3, r2
 8001e22:	d101      	bne.n	8001e28 <HAL_DMA_Abort_IT+0xcc>
 8001e24:	2301      	movs	r3, #1
 8001e26:	e000      	b.n	8001e2a <HAL_DMA_Abort_IT+0xce>
 8001e28:	2300      	movs	r3, #0
 8001e2a:	2b00      	cmp	r3, #0
 8001e2c:	d065      	beq.n	8001efa <HAL_DMA_Abort_IT+0x19e>
    {
      /* Set Abort State  */
      hdma->State = HAL_DMA_STATE_ABORT;
 8001e2e:	687b      	ldr	r3, [r7, #4]
 8001e30:	2204      	movs	r2, #4
 8001e32:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8001e36:	687b      	ldr	r3, [r7, #4]
 8001e38:	681b      	ldr	r3, [r3, #0]
 8001e3a:	4a60      	ldr	r2, [pc, #384]	; (8001fbc <HAL_DMA_Abort_IT+0x260>)
 8001e3c:	4293      	cmp	r3, r2
 8001e3e:	d04a      	beq.n	8001ed6 <HAL_DMA_Abort_IT+0x17a>
 8001e40:	687b      	ldr	r3, [r7, #4]
 8001e42:	681b      	ldr	r3, [r3, #0]
 8001e44:	4a5e      	ldr	r2, [pc, #376]	; (8001fc0 <HAL_DMA_Abort_IT+0x264>)
 8001e46:	4293      	cmp	r3, r2
 8001e48:	d045      	beq.n	8001ed6 <HAL_DMA_Abort_IT+0x17a>
 8001e4a:	687b      	ldr	r3, [r7, #4]
 8001e4c:	681b      	ldr	r3, [r3, #0]
 8001e4e:	4a5d      	ldr	r2, [pc, #372]	; (8001fc4 <HAL_DMA_Abort_IT+0x268>)
 8001e50:	4293      	cmp	r3, r2
 8001e52:	d040      	beq.n	8001ed6 <HAL_DMA_Abort_IT+0x17a>
 8001e54:	687b      	ldr	r3, [r7, #4]
 8001e56:	681b      	ldr	r3, [r3, #0]
 8001e58:	4a5b      	ldr	r2, [pc, #364]	; (8001fc8 <HAL_DMA_Abort_IT+0x26c>)
 8001e5a:	4293      	cmp	r3, r2
 8001e5c:	d03b      	beq.n	8001ed6 <HAL_DMA_Abort_IT+0x17a>
 8001e5e:	687b      	ldr	r3, [r7, #4]
 8001e60:	681b      	ldr	r3, [r3, #0]
 8001e62:	4a5a      	ldr	r2, [pc, #360]	; (8001fcc <HAL_DMA_Abort_IT+0x270>)
 8001e64:	4293      	cmp	r3, r2
 8001e66:	d036      	beq.n	8001ed6 <HAL_DMA_Abort_IT+0x17a>
 8001e68:	687b      	ldr	r3, [r7, #4]
 8001e6a:	681b      	ldr	r3, [r3, #0]
 8001e6c:	4a58      	ldr	r2, [pc, #352]	; (8001fd0 <HAL_DMA_Abort_IT+0x274>)
 8001e6e:	4293      	cmp	r3, r2
 8001e70:	d031      	beq.n	8001ed6 <HAL_DMA_Abort_IT+0x17a>
 8001e72:	687b      	ldr	r3, [r7, #4]
 8001e74:	681b      	ldr	r3, [r3, #0]
 8001e76:	4a57      	ldr	r2, [pc, #348]	; (8001fd4 <HAL_DMA_Abort_IT+0x278>)
 8001e78:	4293      	cmp	r3, r2
 8001e7a:	d02c      	beq.n	8001ed6 <HAL_DMA_Abort_IT+0x17a>
 8001e7c:	687b      	ldr	r3, [r7, #4]
 8001e7e:	681b      	ldr	r3, [r3, #0]
 8001e80:	4a55      	ldr	r2, [pc, #340]	; (8001fd8 <HAL_DMA_Abort_IT+0x27c>)
 8001e82:	4293      	cmp	r3, r2
 8001e84:	d027      	beq.n	8001ed6 <HAL_DMA_Abort_IT+0x17a>
 8001e86:	687b      	ldr	r3, [r7, #4]
 8001e88:	681b      	ldr	r3, [r3, #0]
 8001e8a:	4a54      	ldr	r2, [pc, #336]	; (8001fdc <HAL_DMA_Abort_IT+0x280>)
 8001e8c:	4293      	cmp	r3, r2
 8001e8e:	d022      	beq.n	8001ed6 <HAL_DMA_Abort_IT+0x17a>
 8001e90:	687b      	ldr	r3, [r7, #4]
 8001e92:	681b      	ldr	r3, [r3, #0]
 8001e94:	4a52      	ldr	r2, [pc, #328]	; (8001fe0 <HAL_DMA_Abort_IT+0x284>)
 8001e96:	4293      	cmp	r3, r2
 8001e98:	d01d      	beq.n	8001ed6 <HAL_DMA_Abort_IT+0x17a>
 8001e9a:	687b      	ldr	r3, [r7, #4]
 8001e9c:	681b      	ldr	r3, [r3, #0]
 8001e9e:	4a51      	ldr	r2, [pc, #324]	; (8001fe4 <HAL_DMA_Abort_IT+0x288>)
 8001ea0:	4293      	cmp	r3, r2
 8001ea2:	d018      	beq.n	8001ed6 <HAL_DMA_Abort_IT+0x17a>
 8001ea4:	687b      	ldr	r3, [r7, #4]
 8001ea6:	681b      	ldr	r3, [r3, #0]
 8001ea8:	4a4f      	ldr	r2, [pc, #316]	; (8001fe8 <HAL_DMA_Abort_IT+0x28c>)
 8001eaa:	4293      	cmp	r3, r2
 8001eac:	d013      	beq.n	8001ed6 <HAL_DMA_Abort_IT+0x17a>
 8001eae:	687b      	ldr	r3, [r7, #4]
 8001eb0:	681b      	ldr	r3, [r3, #0]
 8001eb2:	4a4e      	ldr	r2, [pc, #312]	; (8001fec <HAL_DMA_Abort_IT+0x290>)
 8001eb4:	4293      	cmp	r3, r2
 8001eb6:	d00e      	beq.n	8001ed6 <HAL_DMA_Abort_IT+0x17a>
 8001eb8:	687b      	ldr	r3, [r7, #4]
 8001eba:	681b      	ldr	r3, [r3, #0]
 8001ebc:	4a4c      	ldr	r2, [pc, #304]	; (8001ff0 <HAL_DMA_Abort_IT+0x294>)
 8001ebe:	4293      	cmp	r3, r2
 8001ec0:	d009      	beq.n	8001ed6 <HAL_DMA_Abort_IT+0x17a>
 8001ec2:	687b      	ldr	r3, [r7, #4]
 8001ec4:	681b      	ldr	r3, [r3, #0]
 8001ec6:	4a4b      	ldr	r2, [pc, #300]	; (8001ff4 <HAL_DMA_Abort_IT+0x298>)
 8001ec8:	4293      	cmp	r3, r2
 8001eca:	d004      	beq.n	8001ed6 <HAL_DMA_Abort_IT+0x17a>
 8001ecc:	687b      	ldr	r3, [r7, #4]
 8001ece:	681b      	ldr	r3, [r3, #0]
 8001ed0:	4a49      	ldr	r2, [pc, #292]	; (8001ff8 <HAL_DMA_Abort_IT+0x29c>)
 8001ed2:	4293      	cmp	r3, r2
 8001ed4:	d108      	bne.n	8001ee8 <HAL_DMA_Abort_IT+0x18c>
 8001ed6:	687b      	ldr	r3, [r7, #4]
 8001ed8:	681b      	ldr	r3, [r3, #0]
 8001eda:	681a      	ldr	r2, [r3, #0]
 8001edc:	687b      	ldr	r3, [r7, #4]
 8001ede:	681b      	ldr	r3, [r3, #0]
 8001ee0:	f022 0201 	bic.w	r2, r2, #1
 8001ee4:	601a      	str	r2, [r3, #0]
 8001ee6:	e147      	b.n	8002178 <HAL_DMA_Abort_IT+0x41c>
 8001ee8:	687b      	ldr	r3, [r7, #4]
 8001eea:	681b      	ldr	r3, [r3, #0]
 8001eec:	681a      	ldr	r2, [r3, #0]
 8001eee:	687b      	ldr	r3, [r7, #4]
 8001ef0:	681b      	ldr	r3, [r3, #0]
 8001ef2:	f022 0201 	bic.w	r2, r2, #1
 8001ef6:	601a      	str	r2, [r3, #0]
 8001ef8:	e13e      	b.n	8002178 <HAL_DMA_Abort_IT+0x41c>
    }
    else /* BDMA channel */
    {
      /* Disable DMA All Interrupts  */
      ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  &= ~(BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE);
 8001efa:	687b      	ldr	r3, [r7, #4]
 8001efc:	681b      	ldr	r3, [r3, #0]
 8001efe:	681a      	ldr	r2, [r3, #0]
 8001f00:	687b      	ldr	r3, [r7, #4]
 8001f02:	681b      	ldr	r3, [r3, #0]
 8001f04:	f022 020e 	bic.w	r2, r2, #14
 8001f08:	601a      	str	r2, [r3, #0]

      /* Disable the channel */
      __HAL_DMA_DISABLE(hdma);
 8001f0a:	687b      	ldr	r3, [r7, #4]
 8001f0c:	681b      	ldr	r3, [r3, #0]
 8001f0e:	4a2b      	ldr	r2, [pc, #172]	; (8001fbc <HAL_DMA_Abort_IT+0x260>)
 8001f10:	4293      	cmp	r3, r2
 8001f12:	d04a      	beq.n	8001faa <HAL_DMA_Abort_IT+0x24e>
 8001f14:	687b      	ldr	r3, [r7, #4]
 8001f16:	681b      	ldr	r3, [r3, #0]
 8001f18:	4a29      	ldr	r2, [pc, #164]	; (8001fc0 <HAL_DMA_Abort_IT+0x264>)
 8001f1a:	4293      	cmp	r3, r2
 8001f1c:	d045      	beq.n	8001faa <HAL_DMA_Abort_IT+0x24e>
 8001f1e:	687b      	ldr	r3, [r7, #4]
 8001f20:	681b      	ldr	r3, [r3, #0]
 8001f22:	4a28      	ldr	r2, [pc, #160]	; (8001fc4 <HAL_DMA_Abort_IT+0x268>)
 8001f24:	4293      	cmp	r3, r2
 8001f26:	d040      	beq.n	8001faa <HAL_DMA_Abort_IT+0x24e>
 8001f28:	687b      	ldr	r3, [r7, #4]
 8001f2a:	681b      	ldr	r3, [r3, #0]
 8001f2c:	4a26      	ldr	r2, [pc, #152]	; (8001fc8 <HAL_DMA_Abort_IT+0x26c>)
 8001f2e:	4293      	cmp	r3, r2
 8001f30:	d03b      	beq.n	8001faa <HAL_DMA_Abort_IT+0x24e>
 8001f32:	687b      	ldr	r3, [r7, #4]
 8001f34:	681b      	ldr	r3, [r3, #0]
 8001f36:	4a25      	ldr	r2, [pc, #148]	; (8001fcc <HAL_DMA_Abort_IT+0x270>)
 8001f38:	4293      	cmp	r3, r2
 8001f3a:	d036      	beq.n	8001faa <HAL_DMA_Abort_IT+0x24e>
 8001f3c:	687b      	ldr	r3, [r7, #4]
 8001f3e:	681b      	ldr	r3, [r3, #0]
 8001f40:	4a23      	ldr	r2, [pc, #140]	; (8001fd0 <HAL_DMA_Abort_IT+0x274>)
 8001f42:	4293      	cmp	r3, r2
 8001f44:	d031      	beq.n	8001faa <HAL_DMA_Abort_IT+0x24e>
 8001f46:	687b      	ldr	r3, [r7, #4]
 8001f48:	681b      	ldr	r3, [r3, #0]
 8001f4a:	4a22      	ldr	r2, [pc, #136]	; (8001fd4 <HAL_DMA_Abort_IT+0x278>)
 8001f4c:	4293      	cmp	r3, r2
 8001f4e:	d02c      	beq.n	8001faa <HAL_DMA_Abort_IT+0x24e>
 8001f50:	687b      	ldr	r3, [r7, #4]
 8001f52:	681b      	ldr	r3, [r3, #0]
 8001f54:	4a20      	ldr	r2, [pc, #128]	; (8001fd8 <HAL_DMA_Abort_IT+0x27c>)
 8001f56:	4293      	cmp	r3, r2
 8001f58:	d027      	beq.n	8001faa <HAL_DMA_Abort_IT+0x24e>
 8001f5a:	687b      	ldr	r3, [r7, #4]
 8001f5c:	681b      	ldr	r3, [r3, #0]
 8001f5e:	4a1f      	ldr	r2, [pc, #124]	; (8001fdc <HAL_DMA_Abort_IT+0x280>)
 8001f60:	4293      	cmp	r3, r2
 8001f62:	d022      	beq.n	8001faa <HAL_DMA_Abort_IT+0x24e>
 8001f64:	687b      	ldr	r3, [r7, #4]
 8001f66:	681b      	ldr	r3, [r3, #0]
 8001f68:	4a1d      	ldr	r2, [pc, #116]	; (8001fe0 <HAL_DMA_Abort_IT+0x284>)
 8001f6a:	4293      	cmp	r3, r2
 8001f6c:	d01d      	beq.n	8001faa <HAL_DMA_Abort_IT+0x24e>
 8001f6e:	687b      	ldr	r3, [r7, #4]
 8001f70:	681b      	ldr	r3, [r3, #0]
 8001f72:	4a1c      	ldr	r2, [pc, #112]	; (8001fe4 <HAL_DMA_Abort_IT+0x288>)
 8001f74:	4293      	cmp	r3, r2
 8001f76:	d018      	beq.n	8001faa <HAL_DMA_Abort_IT+0x24e>
 8001f78:	687b      	ldr	r3, [r7, #4]
 8001f7a:	681b      	ldr	r3, [r3, #0]
 8001f7c:	4a1a      	ldr	r2, [pc, #104]	; (8001fe8 <HAL_DMA_Abort_IT+0x28c>)
 8001f7e:	4293      	cmp	r3, r2
 8001f80:	d013      	beq.n	8001faa <HAL_DMA_Abort_IT+0x24e>
 8001f82:	687b      	ldr	r3, [r7, #4]
 8001f84:	681b      	ldr	r3, [r3, #0]
 8001f86:	4a19      	ldr	r2, [pc, #100]	; (8001fec <HAL_DMA_Abort_IT+0x290>)
 8001f88:	4293      	cmp	r3, r2
 8001f8a:	d00e      	beq.n	8001faa <HAL_DMA_Abort_IT+0x24e>
 8001f8c:	687b      	ldr	r3, [r7, #4]
 8001f8e:	681b      	ldr	r3, [r3, #0]
 8001f90:	4a17      	ldr	r2, [pc, #92]	; (8001ff0 <HAL_DMA_Abort_IT+0x294>)
 8001f92:	4293      	cmp	r3, r2
 8001f94:	d009      	beq.n	8001faa <HAL_DMA_Abort_IT+0x24e>
 8001f96:	687b      	ldr	r3, [r7, #4]
 8001f98:	681b      	ldr	r3, [r3, #0]
 8001f9a:	4a16      	ldr	r2, [pc, #88]	; (8001ff4 <HAL_DMA_Abort_IT+0x298>)
 8001f9c:	4293      	cmp	r3, r2
 8001f9e:	d004      	beq.n	8001faa <HAL_DMA_Abort_IT+0x24e>
 8001fa0:	687b      	ldr	r3, [r7, #4]
 8001fa2:	681b      	ldr	r3, [r3, #0]
 8001fa4:	4a14      	ldr	r2, [pc, #80]	; (8001ff8 <HAL_DMA_Abort_IT+0x29c>)
 8001fa6:	4293      	cmp	r3, r2
 8001fa8:	d128      	bne.n	8001ffc <HAL_DMA_Abort_IT+0x2a0>
 8001faa:	687b      	ldr	r3, [r7, #4]
 8001fac:	681b      	ldr	r3, [r3, #0]
 8001fae:	681a      	ldr	r2, [r3, #0]
 8001fb0:	687b      	ldr	r3, [r7, #4]
 8001fb2:	681b      	ldr	r3, [r3, #0]
 8001fb4:	f022 0201 	bic.w	r2, r2, #1
 8001fb8:	601a      	str	r2, [r3, #0]
 8001fba:	e027      	b.n	800200c <HAL_DMA_Abort_IT+0x2b0>
 8001fbc:	40020010 	.word	0x40020010
 8001fc0:	40020028 	.word	0x40020028
 8001fc4:	40020040 	.word	0x40020040
 8001fc8:	40020058 	.word	0x40020058
 8001fcc:	40020070 	.word	0x40020070
 8001fd0:	40020088 	.word	0x40020088
 8001fd4:	400200a0 	.word	0x400200a0
 8001fd8:	400200b8 	.word	0x400200b8
 8001fdc:	40020410 	.word	0x40020410
 8001fe0:	40020428 	.word	0x40020428
 8001fe4:	40020440 	.word	0x40020440
 8001fe8:	40020458 	.word	0x40020458
 8001fec:	40020470 	.word	0x40020470
 8001ff0:	40020488 	.word	0x40020488
 8001ff4:	400204a0 	.word	0x400204a0
 8001ff8:	400204b8 	.word	0x400204b8
 8001ffc:	687b      	ldr	r3, [r7, #4]
 8001ffe:	681b      	ldr	r3, [r3, #0]
 8002000:	681a      	ldr	r2, [r3, #0]
 8002002:	687b      	ldr	r3, [r7, #4]
 8002004:	681b      	ldr	r3, [r3, #0]
 8002006:	f022 0201 	bic.w	r2, r2, #1
 800200a:	601a      	str	r2, [r3, #0]

      if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 800200c:	687b      	ldr	r3, [r7, #4]
 800200e:	681b      	ldr	r3, [r3, #0]
 8002010:	4a5c      	ldr	r2, [pc, #368]	; (8002184 <HAL_DMA_Abort_IT+0x428>)
 8002012:	4293      	cmp	r3, r2
 8002014:	d072      	beq.n	80020fc <HAL_DMA_Abort_IT+0x3a0>
 8002016:	687b      	ldr	r3, [r7, #4]
 8002018:	681b      	ldr	r3, [r3, #0]
 800201a:	4a5b      	ldr	r2, [pc, #364]	; (8002188 <HAL_DMA_Abort_IT+0x42c>)
 800201c:	4293      	cmp	r3, r2
 800201e:	d06d      	beq.n	80020fc <HAL_DMA_Abort_IT+0x3a0>
 8002020:	687b      	ldr	r3, [r7, #4]
 8002022:	681b      	ldr	r3, [r3, #0]
 8002024:	4a59      	ldr	r2, [pc, #356]	; (800218c <HAL_DMA_Abort_IT+0x430>)
 8002026:	4293      	cmp	r3, r2
 8002028:	d068      	beq.n	80020fc <HAL_DMA_Abort_IT+0x3a0>
 800202a:	687b      	ldr	r3, [r7, #4]
 800202c:	681b      	ldr	r3, [r3, #0]
 800202e:	4a58      	ldr	r2, [pc, #352]	; (8002190 <HAL_DMA_Abort_IT+0x434>)
 8002030:	4293      	cmp	r3, r2
 8002032:	d063      	beq.n	80020fc <HAL_DMA_Abort_IT+0x3a0>
 8002034:	687b      	ldr	r3, [r7, #4]
 8002036:	681b      	ldr	r3, [r3, #0]
 8002038:	4a56      	ldr	r2, [pc, #344]	; (8002194 <HAL_DMA_Abort_IT+0x438>)
 800203a:	4293      	cmp	r3, r2
 800203c:	d05e      	beq.n	80020fc <HAL_DMA_Abort_IT+0x3a0>
 800203e:	687b      	ldr	r3, [r7, #4]
 8002040:	681b      	ldr	r3, [r3, #0]
 8002042:	4a55      	ldr	r2, [pc, #340]	; (8002198 <HAL_DMA_Abort_IT+0x43c>)
 8002044:	4293      	cmp	r3, r2
 8002046:	d059      	beq.n	80020fc <HAL_DMA_Abort_IT+0x3a0>
 8002048:	687b      	ldr	r3, [r7, #4]
 800204a:	681b      	ldr	r3, [r3, #0]
 800204c:	4a53      	ldr	r2, [pc, #332]	; (800219c <HAL_DMA_Abort_IT+0x440>)
 800204e:	4293      	cmp	r3, r2
 8002050:	d054      	beq.n	80020fc <HAL_DMA_Abort_IT+0x3a0>
 8002052:	687b      	ldr	r3, [r7, #4]
 8002054:	681b      	ldr	r3, [r3, #0]
 8002056:	4a52      	ldr	r2, [pc, #328]	; (80021a0 <HAL_DMA_Abort_IT+0x444>)
 8002058:	4293      	cmp	r3, r2
 800205a:	d04f      	beq.n	80020fc <HAL_DMA_Abort_IT+0x3a0>
 800205c:	687b      	ldr	r3, [r7, #4]
 800205e:	681b      	ldr	r3, [r3, #0]
 8002060:	4a50      	ldr	r2, [pc, #320]	; (80021a4 <HAL_DMA_Abort_IT+0x448>)
 8002062:	4293      	cmp	r3, r2
 8002064:	d04a      	beq.n	80020fc <HAL_DMA_Abort_IT+0x3a0>
 8002066:	687b      	ldr	r3, [r7, #4]
 8002068:	681b      	ldr	r3, [r3, #0]
 800206a:	4a4f      	ldr	r2, [pc, #316]	; (80021a8 <HAL_DMA_Abort_IT+0x44c>)
 800206c:	4293      	cmp	r3, r2
 800206e:	d045      	beq.n	80020fc <HAL_DMA_Abort_IT+0x3a0>
 8002070:	687b      	ldr	r3, [r7, #4]
 8002072:	681b      	ldr	r3, [r3, #0]
 8002074:	4a4d      	ldr	r2, [pc, #308]	; (80021ac <HAL_DMA_Abort_IT+0x450>)
 8002076:	4293      	cmp	r3, r2
 8002078:	d040      	beq.n	80020fc <HAL_DMA_Abort_IT+0x3a0>
 800207a:	687b      	ldr	r3, [r7, #4]
 800207c:	681b      	ldr	r3, [r3, #0]
 800207e:	4a4c      	ldr	r2, [pc, #304]	; (80021b0 <HAL_DMA_Abort_IT+0x454>)
 8002080:	4293      	cmp	r3, r2
 8002082:	d03b      	beq.n	80020fc <HAL_DMA_Abort_IT+0x3a0>
 8002084:	687b      	ldr	r3, [r7, #4]
 8002086:	681b      	ldr	r3, [r3, #0]
 8002088:	4a4a      	ldr	r2, [pc, #296]	; (80021b4 <HAL_DMA_Abort_IT+0x458>)
 800208a:	4293      	cmp	r3, r2
 800208c:	d036      	beq.n	80020fc <HAL_DMA_Abort_IT+0x3a0>
 800208e:	687b      	ldr	r3, [r7, #4]
 8002090:	681b      	ldr	r3, [r3, #0]
 8002092:	4a49      	ldr	r2, [pc, #292]	; (80021b8 <HAL_DMA_Abort_IT+0x45c>)
 8002094:	4293      	cmp	r3, r2
 8002096:	d031      	beq.n	80020fc <HAL_DMA_Abort_IT+0x3a0>
 8002098:	687b      	ldr	r3, [r7, #4]
 800209a:	681b      	ldr	r3, [r3, #0]
 800209c:	4a47      	ldr	r2, [pc, #284]	; (80021bc <HAL_DMA_Abort_IT+0x460>)
 800209e:	4293      	cmp	r3, r2
 80020a0:	d02c      	beq.n	80020fc <HAL_DMA_Abort_IT+0x3a0>
 80020a2:	687b      	ldr	r3, [r7, #4]
 80020a4:	681b      	ldr	r3, [r3, #0]
 80020a6:	4a46      	ldr	r2, [pc, #280]	; (80021c0 <HAL_DMA_Abort_IT+0x464>)
 80020a8:	4293      	cmp	r3, r2
 80020aa:	d027      	beq.n	80020fc <HAL_DMA_Abort_IT+0x3a0>
 80020ac:	687b      	ldr	r3, [r7, #4]
 80020ae:	681b      	ldr	r3, [r3, #0]
 80020b0:	4a44      	ldr	r2, [pc, #272]	; (80021c4 <HAL_DMA_Abort_IT+0x468>)
 80020b2:	4293      	cmp	r3, r2
 80020b4:	d022      	beq.n	80020fc <HAL_DMA_Abort_IT+0x3a0>
 80020b6:	687b      	ldr	r3, [r7, #4]
 80020b8:	681b      	ldr	r3, [r3, #0]
 80020ba:	4a43      	ldr	r2, [pc, #268]	; (80021c8 <HAL_DMA_Abort_IT+0x46c>)
 80020bc:	4293      	cmp	r3, r2
 80020be:	d01d      	beq.n	80020fc <HAL_DMA_Abort_IT+0x3a0>
 80020c0:	687b      	ldr	r3, [r7, #4]
 80020c2:	681b      	ldr	r3, [r3, #0]
 80020c4:	4a41      	ldr	r2, [pc, #260]	; (80021cc <HAL_DMA_Abort_IT+0x470>)
 80020c6:	4293      	cmp	r3, r2
 80020c8:	d018      	beq.n	80020fc <HAL_DMA_Abort_IT+0x3a0>
 80020ca:	687b      	ldr	r3, [r7, #4]
 80020cc:	681b      	ldr	r3, [r3, #0]
 80020ce:	4a40      	ldr	r2, [pc, #256]	; (80021d0 <HAL_DMA_Abort_IT+0x474>)
 80020d0:	4293      	cmp	r3, r2
 80020d2:	d013      	beq.n	80020fc <HAL_DMA_Abort_IT+0x3a0>
 80020d4:	687b      	ldr	r3, [r7, #4]
 80020d6:	681b      	ldr	r3, [r3, #0]
 80020d8:	4a3e      	ldr	r2, [pc, #248]	; (80021d4 <HAL_DMA_Abort_IT+0x478>)
 80020da:	4293      	cmp	r3, r2
 80020dc:	d00e      	beq.n	80020fc <HAL_DMA_Abort_IT+0x3a0>
 80020de:	687b      	ldr	r3, [r7, #4]
 80020e0:	681b      	ldr	r3, [r3, #0]
 80020e2:	4a3d      	ldr	r2, [pc, #244]	; (80021d8 <HAL_DMA_Abort_IT+0x47c>)
 80020e4:	4293      	cmp	r3, r2
 80020e6:	d009      	beq.n	80020fc <HAL_DMA_Abort_IT+0x3a0>
 80020e8:	687b      	ldr	r3, [r7, #4]
 80020ea:	681b      	ldr	r3, [r3, #0]
 80020ec:	4a3b      	ldr	r2, [pc, #236]	; (80021dc <HAL_DMA_Abort_IT+0x480>)
 80020ee:	4293      	cmp	r3, r2
 80020f0:	d004      	beq.n	80020fc <HAL_DMA_Abort_IT+0x3a0>
 80020f2:	687b      	ldr	r3, [r7, #4]
 80020f4:	681b      	ldr	r3, [r3, #0]
 80020f6:	4a3a      	ldr	r2, [pc, #232]	; (80021e0 <HAL_DMA_Abort_IT+0x484>)
 80020f8:	4293      	cmp	r3, r2
 80020fa:	d101      	bne.n	8002100 <HAL_DMA_Abort_IT+0x3a4>
 80020fc:	2301      	movs	r3, #1
 80020fe:	e000      	b.n	8002102 <HAL_DMA_Abort_IT+0x3a6>
 8002100:	2300      	movs	r3, #0
 8002102:	2b00      	cmp	r3, #0
 8002104:	d028      	beq.n	8002158 <HAL_DMA_Abort_IT+0x3fc>
      {
        /* disable the DMAMUX sync overrun IT */
        hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8002106:	687b      	ldr	r3, [r7, #4]
 8002108:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800210a:	681a      	ldr	r2, [r3, #0]
 800210c:	687b      	ldr	r3, [r7, #4]
 800210e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002110:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8002114:	601a      	str	r2, [r3, #0]

        /* Clear all flags */
        regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 8002116:	687b      	ldr	r3, [r7, #4]
 8002118:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800211a:	60fb      	str	r3, [r7, #12]
        regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 800211c:	687b      	ldr	r3, [r7, #4]
 800211e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002120:	f003 031f 	and.w	r3, r3, #31
 8002124:	2201      	movs	r2, #1
 8002126:	409a      	lsls	r2, r3
 8002128:	68fb      	ldr	r3, [r7, #12]
 800212a:	605a      	str	r2, [r3, #4]

        /* Clear the DMAMUX synchro overrun flag */
        hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 800212c:	687b      	ldr	r3, [r7, #4]
 800212e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8002130:	687a      	ldr	r2, [r7, #4]
 8002132:	6e92      	ldr	r2, [r2, #104]	; 0x68
 8002134:	605a      	str	r2, [r3, #4]

        if(hdma->DMAmuxRequestGen != 0U)
 8002136:	687b      	ldr	r3, [r7, #4]
 8002138:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800213a:	2b00      	cmp	r3, #0
 800213c:	d00c      	beq.n	8002158 <HAL_DMA_Abort_IT+0x3fc>
        {
          /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
          /* disable the request gen overrun IT */
          hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 800213e:	687b      	ldr	r3, [r7, #4]
 8002140:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8002142:	681a      	ldr	r2, [r3, #0]
 8002144:	687b      	ldr	r3, [r7, #4]
 8002146:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8002148:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800214c:	601a      	str	r2, [r3, #0]

          /* Clear the DMAMUX request generator overrun flag */
          hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 800214e:	687b      	ldr	r3, [r7, #4]
 8002150:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002152:	687a      	ldr	r2, [r7, #4]
 8002154:	6f52      	ldr	r2, [r2, #116]	; 0x74
 8002156:	605a      	str	r2, [r3, #4]
        }
      }

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8002158:	687b      	ldr	r3, [r7, #4]
 800215a:	2200      	movs	r2, #0
 800215c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8002160:	687b      	ldr	r3, [r7, #4]
 8002162:	2201      	movs	r2, #1
 8002164:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Call User Abort callback */
      if(hdma->XferAbortCallback != NULL)
 8002168:	687b      	ldr	r3, [r7, #4]
 800216a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800216c:	2b00      	cmp	r3, #0
 800216e:	d003      	beq.n	8002178 <HAL_DMA_Abort_IT+0x41c>
      {
        hdma->XferAbortCallback(hdma);
 8002170:	687b      	ldr	r3, [r7, #4]
 8002172:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002174:	6878      	ldr	r0, [r7, #4]
 8002176:	4798      	blx	r3
      }
    }
  }

  return HAL_OK;
 8002178:	2300      	movs	r3, #0
}
 800217a:	4618      	mov	r0, r3
 800217c:	3710      	adds	r7, #16
 800217e:	46bd      	mov	sp, r7
 8002180:	bd80      	pop	{r7, pc}
 8002182:	bf00      	nop
 8002184:	40020010 	.word	0x40020010
 8002188:	40020028 	.word	0x40020028
 800218c:	40020040 	.word	0x40020040
 8002190:	40020058 	.word	0x40020058
 8002194:	40020070 	.word	0x40020070
 8002198:	40020088 	.word	0x40020088
 800219c:	400200a0 	.word	0x400200a0
 80021a0:	400200b8 	.word	0x400200b8
 80021a4:	40020410 	.word	0x40020410
 80021a8:	40020428 	.word	0x40020428
 80021ac:	40020440 	.word	0x40020440
 80021b0:	40020458 	.word	0x40020458
 80021b4:	40020470 	.word	0x40020470
 80021b8:	40020488 	.word	0x40020488
 80021bc:	400204a0 	.word	0x400204a0
 80021c0:	400204b8 	.word	0x400204b8
 80021c4:	58025408 	.word	0x58025408
 80021c8:	5802541c 	.word	0x5802541c
 80021cc:	58025430 	.word	0x58025430
 80021d0:	58025444 	.word	0x58025444
 80021d4:	58025458 	.word	0x58025458
 80021d8:	5802546c 	.word	0x5802546c
 80021dc:	58025480 	.word	0x58025480
 80021e0:	58025494 	.word	0x58025494

080021e4 <HAL_DMA2D_Init>:
  * @param  hdma2d pointer to a DMA2D_HandleTypeDef structure that contains
  *                 the configuration information for the DMA2D.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA2D_Init(DMA2D_HandleTypeDef *hdma2d)
{
 80021e4:	b580      	push	{r7, lr}
 80021e6:	b082      	sub	sp, #8
 80021e8:	af00      	add	r7, sp, #0
 80021ea:	6078      	str	r0, [r7, #4]
  /* Check the DMA2D peripheral state */
  if (hdma2d == NULL)
 80021ec:	687b      	ldr	r3, [r7, #4]
 80021ee:	2b00      	cmp	r3, #0
 80021f0:	d101      	bne.n	80021f6 <HAL_DMA2D_Init+0x12>
  {
    return HAL_ERROR;
 80021f2:	2301      	movs	r3, #1
 80021f4:	e04f      	b.n	8002296 <HAL_DMA2D_Init+0xb2>

    /* Init the low level hardware */
    hdma2d->MspInitCallback(hdma2d);
  }
#else
  if (hdma2d->State == HAL_DMA2D_STATE_RESET)
 80021f6:	687b      	ldr	r3, [r7, #4]
 80021f8:	f893 3061 	ldrb.w	r3, [r3, #97]	; 0x61
 80021fc:	b2db      	uxtb	r3, r3
 80021fe:	2b00      	cmp	r3, #0
 8002200:	d106      	bne.n	8002210 <HAL_DMA2D_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hdma2d->Lock = HAL_UNLOCKED;
 8002202:	687b      	ldr	r3, [r7, #4]
 8002204:	2200      	movs	r2, #0
 8002206:	f883 2060 	strb.w	r2, [r3, #96]	; 0x60
    /* Init the low level hardware */
    HAL_DMA2D_MspInit(hdma2d);
 800220a:	6878      	ldr	r0, [r7, #4]
 800220c:	f7fe fe1c 	bl	8000e48 <HAL_DMA2D_MspInit>
  }
#endif /* (USE_HAL_DMA2D_REGISTER_CALLBACKS) */

  /* Change DMA2D peripheral state */
  hdma2d->State = HAL_DMA2D_STATE_BUSY;
 8002210:	687b      	ldr	r3, [r7, #4]
 8002212:	2202      	movs	r2, #2
 8002214:	f883 2061 	strb.w	r2, [r3, #97]	; 0x61

  /* DMA2D CR register configuration -------------------------------------------*/
  MODIFY_REG(hdma2d->Instance->CR, DMA2D_CR_MODE | DMA2D_CR_LOM, hdma2d->Init.Mode | hdma2d->Init.LineOffsetMode);
 8002218:	687b      	ldr	r3, [r7, #4]
 800221a:	681b      	ldr	r3, [r3, #0]
 800221c:	681a      	ldr	r2, [r3, #0]
 800221e:	4b20      	ldr	r3, [pc, #128]	; (80022a0 <HAL_DMA2D_Init+0xbc>)
 8002220:	4013      	ands	r3, r2
 8002222:	687a      	ldr	r2, [r7, #4]
 8002224:	6851      	ldr	r1, [r2, #4]
 8002226:	687a      	ldr	r2, [r7, #4]
 8002228:	69d2      	ldr	r2, [r2, #28]
 800222a:	4311      	orrs	r1, r2
 800222c:	687a      	ldr	r2, [r7, #4]
 800222e:	6812      	ldr	r2, [r2, #0]
 8002230:	430b      	orrs	r3, r1
 8002232:	6013      	str	r3, [r2, #0]

  /* DMA2D OPFCCR register configuration ---------------------------------------*/
  MODIFY_REG(hdma2d->Instance->OPFCCR, DMA2D_OPFCCR_CM | DMA2D_OPFCCR_SB,
 8002234:	687b      	ldr	r3, [r7, #4]
 8002236:	681b      	ldr	r3, [r3, #0]
 8002238:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800223a:	4b1a      	ldr	r3, [pc, #104]	; (80022a4 <HAL_DMA2D_Init+0xc0>)
 800223c:	4013      	ands	r3, r2
 800223e:	687a      	ldr	r2, [r7, #4]
 8002240:	6891      	ldr	r1, [r2, #8]
 8002242:	687a      	ldr	r2, [r7, #4]
 8002244:	6992      	ldr	r2, [r2, #24]
 8002246:	4311      	orrs	r1, r2
 8002248:	687a      	ldr	r2, [r7, #4]
 800224a:	6812      	ldr	r2, [r2, #0]
 800224c:	430b      	orrs	r3, r1
 800224e:	6353      	str	r3, [r2, #52]	; 0x34
             hdma2d->Init.ColorMode | hdma2d->Init.BytesSwap);

  /* DMA2D OOR register configuration ------------------------------------------*/
  MODIFY_REG(hdma2d->Instance->OOR, DMA2D_OOR_LO, hdma2d->Init.OutputOffset);
 8002250:	687b      	ldr	r3, [r7, #4]
 8002252:	681b      	ldr	r3, [r3, #0]
 8002254:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8002256:	4b14      	ldr	r3, [pc, #80]	; (80022a8 <HAL_DMA2D_Init+0xc4>)
 8002258:	4013      	ands	r3, r2
 800225a:	687a      	ldr	r2, [r7, #4]
 800225c:	68d1      	ldr	r1, [r2, #12]
 800225e:	687a      	ldr	r2, [r7, #4]
 8002260:	6812      	ldr	r2, [r2, #0]
 8002262:	430b      	orrs	r3, r1
 8002264:	6413      	str	r3, [r2, #64]	; 0x40
  /* DMA2D OPFCCR AI and RBS fields setting (Output Alpha Inversion)*/
  MODIFY_REG(hdma2d->Instance->OPFCCR, (DMA2D_OPFCCR_AI | DMA2D_OPFCCR_RBS),
 8002266:	687b      	ldr	r3, [r7, #4]
 8002268:	681b      	ldr	r3, [r3, #0]
 800226a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800226c:	f423 1140 	bic.w	r1, r3, #3145728	; 0x300000
 8002270:	687b      	ldr	r3, [r7, #4]
 8002272:	691b      	ldr	r3, [r3, #16]
 8002274:	051a      	lsls	r2, r3, #20
 8002276:	687b      	ldr	r3, [r7, #4]
 8002278:	695b      	ldr	r3, [r3, #20]
 800227a:	055b      	lsls	r3, r3, #21
 800227c:	431a      	orrs	r2, r3
 800227e:	687b      	ldr	r3, [r7, #4]
 8002280:	681b      	ldr	r3, [r3, #0]
 8002282:	430a      	orrs	r2, r1
 8002284:	635a      	str	r2, [r3, #52]	; 0x34
             ((hdma2d->Init.AlphaInverted << DMA2D_OPFCCR_AI_Pos) | \
              (hdma2d->Init.RedBlueSwap << DMA2D_OPFCCR_RBS_Pos)));


  /* Update error code */
  hdma2d->ErrorCode = HAL_DMA2D_ERROR_NONE;
 8002286:	687b      	ldr	r3, [r7, #4]
 8002288:	2200      	movs	r2, #0
 800228a:	665a      	str	r2, [r3, #100]	; 0x64

  /* Initialize the DMA2D state*/
  hdma2d->State  = HAL_DMA2D_STATE_READY;
 800228c:	687b      	ldr	r3, [r7, #4]
 800228e:	2201      	movs	r2, #1
 8002290:	f883 2061 	strb.w	r2, [r3, #97]	; 0x61

  return HAL_OK;
 8002294:	2300      	movs	r3, #0
}
 8002296:	4618      	mov	r0, r3
 8002298:	3708      	adds	r7, #8
 800229a:	46bd      	mov	sp, r7
 800229c:	bd80      	pop	{r7, pc}
 800229e:	bf00      	nop
 80022a0:	fff8ffbf 	.word	0xfff8ffbf
 80022a4:	fffffef8 	.word	0xfffffef8
 80022a8:	ffff0000 	.word	0xffff0000

080022ac <HAL_DMA2D_ConfigLayer>:
  *                   This parameter can be one of the following values:
  *                   DMA2D_BACKGROUND_LAYER(0) / DMA2D_FOREGROUND_LAYER(1)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA2D_ConfigLayer(DMA2D_HandleTypeDef *hdma2d, uint32_t LayerIdx)
{
 80022ac:	b480      	push	{r7}
 80022ae:	b087      	sub	sp, #28
 80022b0:	af00      	add	r7, sp, #0
 80022b2:	6078      	str	r0, [r7, #4]
 80022b4:	6039      	str	r1, [r7, #0]
  uint32_t regValue;

  /* Check the parameters */
  assert_param(IS_DMA2D_LAYER(LayerIdx));
  assert_param(IS_DMA2D_OFFSET(hdma2d->LayerCfg[LayerIdx].InputOffset));
  if (hdma2d->Init.Mode != DMA2D_R2M)
 80022b6:	687b      	ldr	r3, [r7, #4]
 80022b8:	685b      	ldr	r3, [r3, #4]
 80022ba:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
    }
  }
  assert_param(IS_DMA2D_ALPHA_INVERTED(hdma2d->LayerCfg[LayerIdx].AlphaInverted));
  assert_param(IS_DMA2D_RB_SWAP(hdma2d->LayerCfg[LayerIdx].RedBlueSwap));

  if ((LayerIdx == DMA2D_FOREGROUND_LAYER) && (hdma2d->LayerCfg[LayerIdx].InputColorMode == DMA2D_INPUT_YCBCR))
 80022be:	683b      	ldr	r3, [r7, #0]
 80022c0:	2b01      	cmp	r3, #1
 80022c2:	d104      	bne.n	80022ce <HAL_DMA2D_ConfigLayer+0x22>
 80022c4:	683a      	ldr	r2, [r7, #0]
 80022c6:	4613      	mov	r3, r2
 80022c8:	00db      	lsls	r3, r3, #3
 80022ca:	1a9b      	subs	r3, r3, r2
 80022cc:	009b      	lsls	r3, r3, #2
  {
    assert_param(IS_DMA2D_CHROMA_SUB_SAMPLING(hdma2d->LayerCfg[LayerIdx].ChromaSubSampling));
  }

  /* Process locked */
  __HAL_LOCK(hdma2d);
 80022ce:	687b      	ldr	r3, [r7, #4]
 80022d0:	f893 3060 	ldrb.w	r3, [r3, #96]	; 0x60
 80022d4:	2b01      	cmp	r3, #1
 80022d6:	d101      	bne.n	80022dc <HAL_DMA2D_ConfigLayer+0x30>
 80022d8:	2302      	movs	r3, #2
 80022da:	e092      	b.n	8002402 <HAL_DMA2D_ConfigLayer+0x156>
 80022dc:	687b      	ldr	r3, [r7, #4]
 80022de:	2201      	movs	r2, #1
 80022e0:	f883 2060 	strb.w	r2, [r3, #96]	; 0x60

  /* Change DMA2D peripheral state */
  hdma2d->State = HAL_DMA2D_STATE_BUSY;
 80022e4:	687b      	ldr	r3, [r7, #4]
 80022e6:	2202      	movs	r2, #2
 80022e8:	f883 2061 	strb.w	r2, [r3, #97]	; 0x61

  pLayerCfg = &hdma2d->LayerCfg[LayerIdx];
 80022ec:	683a      	ldr	r2, [r7, #0]
 80022ee:	4613      	mov	r3, r2
 80022f0:	00db      	lsls	r3, r3, #3
 80022f2:	1a9b      	subs	r3, r3, r2
 80022f4:	009b      	lsls	r3, r3, #2
 80022f6:	3328      	adds	r3, #40	; 0x28
 80022f8:	687a      	ldr	r2, [r7, #4]
 80022fa:	4413      	add	r3, r2
 80022fc:	60fb      	str	r3, [r7, #12]

  /* Prepare the value to be written to the BGPFCCR or FGPFCCR register */
  regValue = pLayerCfg->InputColorMode | (pLayerCfg->AlphaMode << DMA2D_BGPFCCR_AM_Pos) | \
 80022fe:	68fb      	ldr	r3, [r7, #12]
 8002300:	685a      	ldr	r2, [r3, #4]
 8002302:	68fb      	ldr	r3, [r7, #12]
 8002304:	689b      	ldr	r3, [r3, #8]
 8002306:	041b      	lsls	r3, r3, #16
 8002308:	431a      	orrs	r2, r3
             (pLayerCfg->AlphaInverted << DMA2D_BGPFCCR_AI_Pos) | (pLayerCfg->RedBlueSwap << DMA2D_BGPFCCR_RBS_Pos);
 800230a:	68fb      	ldr	r3, [r7, #12]
 800230c:	691b      	ldr	r3, [r3, #16]
 800230e:	051b      	lsls	r3, r3, #20
  regValue = pLayerCfg->InputColorMode | (pLayerCfg->AlphaMode << DMA2D_BGPFCCR_AM_Pos) | \
 8002310:	431a      	orrs	r2, r3
             (pLayerCfg->AlphaInverted << DMA2D_BGPFCCR_AI_Pos) | (pLayerCfg->RedBlueSwap << DMA2D_BGPFCCR_RBS_Pos);
 8002312:	68fb      	ldr	r3, [r7, #12]
 8002314:	695b      	ldr	r3, [r3, #20]
 8002316:	055b      	lsls	r3, r3, #21
  regValue = pLayerCfg->InputColorMode | (pLayerCfg->AlphaMode << DMA2D_BGPFCCR_AM_Pos) | \
 8002318:	4313      	orrs	r3, r2
 800231a:	613b      	str	r3, [r7, #16]
  regMask  = (DMA2D_BGPFCCR_CM | DMA2D_BGPFCCR_AM | DMA2D_BGPFCCR_ALPHA | DMA2D_BGPFCCR_AI | DMA2D_BGPFCCR_RBS);
 800231c:	4b3c      	ldr	r3, [pc, #240]	; (8002410 <HAL_DMA2D_ConfigLayer+0x164>)
 800231e:	617b      	str	r3, [r7, #20]


  if ((pLayerCfg->InputColorMode == DMA2D_INPUT_A4) || (pLayerCfg->InputColorMode == DMA2D_INPUT_A8))
 8002320:	68fb      	ldr	r3, [r7, #12]
 8002322:	685b      	ldr	r3, [r3, #4]
 8002324:	2b0a      	cmp	r3, #10
 8002326:	d003      	beq.n	8002330 <HAL_DMA2D_ConfigLayer+0x84>
 8002328:	68fb      	ldr	r3, [r7, #12]
 800232a:	685b      	ldr	r3, [r3, #4]
 800232c:	2b09      	cmp	r3, #9
 800232e:	d107      	bne.n	8002340 <HAL_DMA2D_ConfigLayer+0x94>
  {
    regValue |= (pLayerCfg->InputAlpha & DMA2D_BGPFCCR_ALPHA);
 8002330:	68fb      	ldr	r3, [r7, #12]
 8002332:	68db      	ldr	r3, [r3, #12]
 8002334:	f003 437f 	and.w	r3, r3, #4278190080	; 0xff000000
 8002338:	693a      	ldr	r2, [r7, #16]
 800233a:	4313      	orrs	r3, r2
 800233c:	613b      	str	r3, [r7, #16]
 800233e:	e005      	b.n	800234c <HAL_DMA2D_ConfigLayer+0xa0>
  }
  else
  {
    regValue |= (pLayerCfg->InputAlpha << DMA2D_BGPFCCR_ALPHA_Pos);
 8002340:	68fb      	ldr	r3, [r7, #12]
 8002342:	68db      	ldr	r3, [r3, #12]
 8002344:	061b      	lsls	r3, r3, #24
 8002346:	693a      	ldr	r2, [r7, #16]
 8002348:	4313      	orrs	r3, r2
 800234a:	613b      	str	r3, [r7, #16]
  }

  /* Configure the background DMA2D layer */
  if (LayerIdx == DMA2D_BACKGROUND_LAYER)
 800234c:	683b      	ldr	r3, [r7, #0]
 800234e:	2b00      	cmp	r3, #0
 8002350:	d120      	bne.n	8002394 <HAL_DMA2D_ConfigLayer+0xe8>
  {
    /* Write DMA2D BGPFCCR register */
    MODIFY_REG(hdma2d->Instance->BGPFCCR, regMask, regValue);
 8002352:	687b      	ldr	r3, [r7, #4]
 8002354:	681b      	ldr	r3, [r3, #0]
 8002356:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8002358:	697b      	ldr	r3, [r7, #20]
 800235a:	43db      	mvns	r3, r3
 800235c:	ea02 0103 	and.w	r1, r2, r3
 8002360:	687b      	ldr	r3, [r7, #4]
 8002362:	681b      	ldr	r3, [r3, #0]
 8002364:	693a      	ldr	r2, [r7, #16]
 8002366:	430a      	orrs	r2, r1
 8002368:	625a      	str	r2, [r3, #36]	; 0x24

    /* DMA2D BGOR register configuration -------------------------------------*/
    WRITE_REG(hdma2d->Instance->BGOR, pLayerCfg->InputOffset);
 800236a:	687b      	ldr	r3, [r7, #4]
 800236c:	681b      	ldr	r3, [r3, #0]
 800236e:	68fa      	ldr	r2, [r7, #12]
 8002370:	6812      	ldr	r2, [r2, #0]
 8002372:	619a      	str	r2, [r3, #24]

    /* DMA2D BGCOLR register configuration -------------------------------------*/
    if ((pLayerCfg->InputColorMode == DMA2D_INPUT_A4) || (pLayerCfg->InputColorMode == DMA2D_INPUT_A8))
 8002374:	68fb      	ldr	r3, [r7, #12]
 8002376:	685b      	ldr	r3, [r3, #4]
 8002378:	2b0a      	cmp	r3, #10
 800237a:	d003      	beq.n	8002384 <HAL_DMA2D_ConfigLayer+0xd8>
 800237c:	68fb      	ldr	r3, [r7, #12]
 800237e:	685b      	ldr	r3, [r3, #4]
 8002380:	2b09      	cmp	r3, #9
 8002382:	d135      	bne.n	80023f0 <HAL_DMA2D_ConfigLayer+0x144>
    {
      WRITE_REG(hdma2d->Instance->BGCOLR, pLayerCfg->InputAlpha & (DMA2D_BGCOLR_BLUE | DMA2D_BGCOLR_GREEN | \
 8002384:	68fb      	ldr	r3, [r7, #12]
 8002386:	68da      	ldr	r2, [r3, #12]
 8002388:	687b      	ldr	r3, [r7, #4]
 800238a:	681b      	ldr	r3, [r3, #0]
 800238c:	f022 427f 	bic.w	r2, r2, #4278190080	; 0xff000000
 8002390:	629a      	str	r2, [r3, #40]	; 0x28
 8002392:	e02d      	b.n	80023f0 <HAL_DMA2D_ConfigLayer+0x144>
  }
  /* Configure the foreground DMA2D layer */
  else
  {

    if (pLayerCfg->InputColorMode == DMA2D_INPUT_YCBCR)
 8002394:	68fb      	ldr	r3, [r7, #12]
 8002396:	685b      	ldr	r3, [r3, #4]
 8002398:	2b0b      	cmp	r3, #11
 800239a:	d109      	bne.n	80023b0 <HAL_DMA2D_ConfigLayer+0x104>
    {
      regValue |= (pLayerCfg->ChromaSubSampling << DMA2D_FGPFCCR_CSS_Pos);
 800239c:	68fb      	ldr	r3, [r7, #12]
 800239e:	699b      	ldr	r3, [r3, #24]
 80023a0:	049b      	lsls	r3, r3, #18
 80023a2:	693a      	ldr	r2, [r7, #16]
 80023a4:	4313      	orrs	r3, r2
 80023a6:	613b      	str	r3, [r7, #16]
      regMask  |= DMA2D_FGPFCCR_CSS;
 80023a8:	697b      	ldr	r3, [r7, #20]
 80023aa:	f443 2340 	orr.w	r3, r3, #786432	; 0xc0000
 80023ae:	617b      	str	r3, [r7, #20]
    }

    /* Write DMA2D FGPFCCR register */
    MODIFY_REG(hdma2d->Instance->FGPFCCR, regMask, regValue);
 80023b0:	687b      	ldr	r3, [r7, #4]
 80023b2:	681b      	ldr	r3, [r3, #0]
 80023b4:	69da      	ldr	r2, [r3, #28]
 80023b6:	697b      	ldr	r3, [r7, #20]
 80023b8:	43db      	mvns	r3, r3
 80023ba:	ea02 0103 	and.w	r1, r2, r3
 80023be:	687b      	ldr	r3, [r7, #4]
 80023c0:	681b      	ldr	r3, [r3, #0]
 80023c2:	693a      	ldr	r2, [r7, #16]
 80023c4:	430a      	orrs	r2, r1
 80023c6:	61da      	str	r2, [r3, #28]

    /* DMA2D FGOR register configuration -------------------------------------*/
    WRITE_REG(hdma2d->Instance->FGOR, pLayerCfg->InputOffset);
 80023c8:	687b      	ldr	r3, [r7, #4]
 80023ca:	681b      	ldr	r3, [r3, #0]
 80023cc:	68fa      	ldr	r2, [r7, #12]
 80023ce:	6812      	ldr	r2, [r2, #0]
 80023d0:	611a      	str	r2, [r3, #16]

    /* DMA2D FGCOLR register configuration -------------------------------------*/
    if ((pLayerCfg->InputColorMode == DMA2D_INPUT_A4) || (pLayerCfg->InputColorMode == DMA2D_INPUT_A8))
 80023d2:	68fb      	ldr	r3, [r7, #12]
 80023d4:	685b      	ldr	r3, [r3, #4]
 80023d6:	2b0a      	cmp	r3, #10
 80023d8:	d003      	beq.n	80023e2 <HAL_DMA2D_ConfigLayer+0x136>
 80023da:	68fb      	ldr	r3, [r7, #12]
 80023dc:	685b      	ldr	r3, [r3, #4]
 80023de:	2b09      	cmp	r3, #9
 80023e0:	d106      	bne.n	80023f0 <HAL_DMA2D_ConfigLayer+0x144>
    {
      WRITE_REG(hdma2d->Instance->FGCOLR, pLayerCfg->InputAlpha & (DMA2D_FGCOLR_BLUE | DMA2D_FGCOLR_GREEN | \
 80023e2:	68fb      	ldr	r3, [r7, #12]
 80023e4:	68da      	ldr	r2, [r3, #12]
 80023e6:	687b      	ldr	r3, [r7, #4]
 80023e8:	681b      	ldr	r3, [r3, #0]
 80023ea:	f022 427f 	bic.w	r2, r2, #4278190080	; 0xff000000
 80023ee:	621a      	str	r2, [r3, #32]
                                                                   DMA2D_FGCOLR_RED));
    }
  }
  /* Initialize the DMA2D state*/
  hdma2d->State = HAL_DMA2D_STATE_READY;
 80023f0:	687b      	ldr	r3, [r7, #4]
 80023f2:	2201      	movs	r2, #1
 80023f4:	f883 2061 	strb.w	r2, [r3, #97]	; 0x61

  /* Process unlocked */
  __HAL_UNLOCK(hdma2d);
 80023f8:	687b      	ldr	r3, [r7, #4]
 80023fa:	2200      	movs	r2, #0
 80023fc:	f883 2060 	strb.w	r2, [r3, #96]	; 0x60

  return HAL_OK;
 8002400:	2300      	movs	r3, #0
}
 8002402:	4618      	mov	r0, r3
 8002404:	371c      	adds	r7, #28
 8002406:	46bd      	mov	sp, r7
 8002408:	f85d 7b04 	ldr.w	r7, [sp], #4
 800240c:	4770      	bx	lr
 800240e:	bf00      	nop
 8002410:	ff33000f 	.word	0xff33000f

08002414 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002414:	b480      	push	{r7}
 8002416:	b089      	sub	sp, #36	; 0x24
 8002418:	af00      	add	r7, sp, #0
 800241a:	6078      	str	r0, [r7, #4]
 800241c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 800241e:	2300      	movs	r3, #0
 8002420:	61fb      	str	r3, [r7, #28]
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
#else
  EXTI_CurrentCPU = EXTI_D1; /* EXTI for CM7 CPU */
 8002422:	4b86      	ldr	r3, [pc, #536]	; (800263c <HAL_GPIO_Init+0x228>)
 8002424:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8002426:	e18c      	b.n	8002742 <HAL_GPIO_Init+0x32e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8002428:	683b      	ldr	r3, [r7, #0]
 800242a:	681a      	ldr	r2, [r3, #0]
 800242c:	2101      	movs	r1, #1
 800242e:	69fb      	ldr	r3, [r7, #28]
 8002430:	fa01 f303 	lsl.w	r3, r1, r3
 8002434:	4013      	ands	r3, r2
 8002436:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00U)
 8002438:	693b      	ldr	r3, [r7, #16]
 800243a:	2b00      	cmp	r3, #0
 800243c:	f000 817e 	beq.w	800273c <HAL_GPIO_Init+0x328>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if ((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8002440:	683b      	ldr	r3, [r7, #0]
 8002442:	685b      	ldr	r3, [r3, #4]
 8002444:	2b01      	cmp	r3, #1
 8002446:	d00b      	beq.n	8002460 <HAL_GPIO_Init+0x4c>
 8002448:	683b      	ldr	r3, [r7, #0]
 800244a:	685b      	ldr	r3, [r3, #4]
 800244c:	2b02      	cmp	r3, #2
 800244e:	d007      	beq.n	8002460 <HAL_GPIO_Init+0x4c>
          (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8002450:	683b      	ldr	r3, [r7, #0]
 8002452:	685b      	ldr	r3, [r3, #4]
      if ((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8002454:	2b11      	cmp	r3, #17
 8002456:	d003      	beq.n	8002460 <HAL_GPIO_Init+0x4c>
          (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8002458:	683b      	ldr	r3, [r7, #0]
 800245a:	685b      	ldr	r3, [r3, #4]
 800245c:	2b12      	cmp	r3, #18
 800245e:	d130      	bne.n	80024c2 <HAL_GPIO_Init+0xae>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8002460:	687b      	ldr	r3, [r7, #4]
 8002462:	689b      	ldr	r3, [r3, #8]
 8002464:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8002466:	69fb      	ldr	r3, [r7, #28]
 8002468:	005b      	lsls	r3, r3, #1
 800246a:	2203      	movs	r2, #3
 800246c:	fa02 f303 	lsl.w	r3, r2, r3
 8002470:	43db      	mvns	r3, r3
 8002472:	69ba      	ldr	r2, [r7, #24]
 8002474:	4013      	ands	r3, r2
 8002476:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8002478:	683b      	ldr	r3, [r7, #0]
 800247a:	68da      	ldr	r2, [r3, #12]
 800247c:	69fb      	ldr	r3, [r7, #28]
 800247e:	005b      	lsls	r3, r3, #1
 8002480:	fa02 f303 	lsl.w	r3, r2, r3
 8002484:	69ba      	ldr	r2, [r7, #24]
 8002486:	4313      	orrs	r3, r2
 8002488:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 800248a:	687b      	ldr	r3, [r7, #4]
 800248c:	69ba      	ldr	r2, [r7, #24]
 800248e:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002490:	687b      	ldr	r3, [r7, #4]
 8002492:	685b      	ldr	r3, [r3, #4]
 8002494:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8002496:	2201      	movs	r2, #1
 8002498:	69fb      	ldr	r3, [r7, #28]
 800249a:	fa02 f303 	lsl.w	r3, r2, r3
 800249e:	43db      	mvns	r3, r3
 80024a0:	69ba      	ldr	r2, [r7, #24]
 80024a2:	4013      	ands	r3, r2
 80024a4:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 80024a6:	683b      	ldr	r3, [r7, #0]
 80024a8:	685b      	ldr	r3, [r3, #4]
 80024aa:	091b      	lsrs	r3, r3, #4
 80024ac:	f003 0201 	and.w	r2, r3, #1
 80024b0:	69fb      	ldr	r3, [r7, #28]
 80024b2:	fa02 f303 	lsl.w	r3, r2, r3
 80024b6:	69ba      	ldr	r2, [r7, #24]
 80024b8:	4313      	orrs	r3, r2
 80024ba:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80024bc:	687b      	ldr	r3, [r7, #4]
 80024be:	69ba      	ldr	r2, [r7, #24]
 80024c0:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 80024c2:	687b      	ldr	r3, [r7, #4]
 80024c4:	68db      	ldr	r3, [r3, #12]
 80024c6:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 80024c8:	69fb      	ldr	r3, [r7, #28]
 80024ca:	005b      	lsls	r3, r3, #1
 80024cc:	2203      	movs	r2, #3
 80024ce:	fa02 f303 	lsl.w	r3, r2, r3
 80024d2:	43db      	mvns	r3, r3
 80024d4:	69ba      	ldr	r2, [r7, #24]
 80024d6:	4013      	ands	r3, r2
 80024d8:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 80024da:	683b      	ldr	r3, [r7, #0]
 80024dc:	689a      	ldr	r2, [r3, #8]
 80024de:	69fb      	ldr	r3, [r7, #28]
 80024e0:	005b      	lsls	r3, r3, #1
 80024e2:	fa02 f303 	lsl.w	r3, r2, r3
 80024e6:	69ba      	ldr	r2, [r7, #24]
 80024e8:	4313      	orrs	r3, r2
 80024ea:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 80024ec:	687b      	ldr	r3, [r7, #4]
 80024ee:	69ba      	ldr	r2, [r7, #24]
 80024f0:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80024f2:	683b      	ldr	r3, [r7, #0]
 80024f4:	685b      	ldr	r3, [r3, #4]
 80024f6:	2b02      	cmp	r3, #2
 80024f8:	d003      	beq.n	8002502 <HAL_GPIO_Init+0xee>
 80024fa:	683b      	ldr	r3, [r7, #0]
 80024fc:	685b      	ldr	r3, [r3, #4]
 80024fe:	2b12      	cmp	r3, #18
 8002500:	d123      	bne.n	800254a <HAL_GPIO_Init+0x136>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8002502:	69fb      	ldr	r3, [r7, #28]
 8002504:	08da      	lsrs	r2, r3, #3
 8002506:	687b      	ldr	r3, [r7, #4]
 8002508:	3208      	adds	r2, #8
 800250a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800250e:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8002510:	69fb      	ldr	r3, [r7, #28]
 8002512:	f003 0307 	and.w	r3, r3, #7
 8002516:	009b      	lsls	r3, r3, #2
 8002518:	220f      	movs	r2, #15
 800251a:	fa02 f303 	lsl.w	r3, r2, r3
 800251e:	43db      	mvns	r3, r3
 8002520:	69ba      	ldr	r2, [r7, #24]
 8002522:	4013      	ands	r3, r2
 8002524:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8002526:	683b      	ldr	r3, [r7, #0]
 8002528:	691a      	ldr	r2, [r3, #16]
 800252a:	69fb      	ldr	r3, [r7, #28]
 800252c:	f003 0307 	and.w	r3, r3, #7
 8002530:	009b      	lsls	r3, r3, #2
 8002532:	fa02 f303 	lsl.w	r3, r2, r3
 8002536:	69ba      	ldr	r2, [r7, #24]
 8002538:	4313      	orrs	r3, r2
 800253a:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 800253c:	69fb      	ldr	r3, [r7, #28]
 800253e:	08da      	lsrs	r2, r3, #3
 8002540:	687b      	ldr	r3, [r7, #4]
 8002542:	3208      	adds	r2, #8
 8002544:	69b9      	ldr	r1, [r7, #24]
 8002546:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800254a:	687b      	ldr	r3, [r7, #4]
 800254c:	681b      	ldr	r3, [r3, #0]
 800254e:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8002550:	69fb      	ldr	r3, [r7, #28]
 8002552:	005b      	lsls	r3, r3, #1
 8002554:	2203      	movs	r2, #3
 8002556:	fa02 f303 	lsl.w	r3, r2, r3
 800255a:	43db      	mvns	r3, r3
 800255c:	69ba      	ldr	r2, [r7, #24]
 800255e:	4013      	ands	r3, r2
 8002560:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8002562:	683b      	ldr	r3, [r7, #0]
 8002564:	685b      	ldr	r3, [r3, #4]
 8002566:	f003 0203 	and.w	r2, r3, #3
 800256a:	69fb      	ldr	r3, [r7, #28]
 800256c:	005b      	lsls	r3, r3, #1
 800256e:	fa02 f303 	lsl.w	r3, r2, r3
 8002572:	69ba      	ldr	r2, [r7, #24]
 8002574:	4313      	orrs	r3, r2
 8002576:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8002578:	687b      	ldr	r3, [r7, #4]
 800257a:	69ba      	ldr	r2, [r7, #24]
 800257c:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 800257e:	683b      	ldr	r3, [r7, #0]
 8002580:	685b      	ldr	r3, [r3, #4]
 8002582:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002586:	2b00      	cmp	r3, #0
 8002588:	f000 80d8 	beq.w	800273c <HAL_GPIO_Init+0x328>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800258c:	4b2c      	ldr	r3, [pc, #176]	; (8002640 <HAL_GPIO_Init+0x22c>)
 800258e:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8002592:	4a2b      	ldr	r2, [pc, #172]	; (8002640 <HAL_GPIO_Init+0x22c>)
 8002594:	f043 0302 	orr.w	r3, r3, #2
 8002598:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 800259c:	4b28      	ldr	r3, [pc, #160]	; (8002640 <HAL_GPIO_Init+0x22c>)
 800259e:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 80025a2:	f003 0302 	and.w	r3, r3, #2
 80025a6:	60fb      	str	r3, [r7, #12]
 80025a8:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80025aa:	4a26      	ldr	r2, [pc, #152]	; (8002644 <HAL_GPIO_Init+0x230>)
 80025ac:	69fb      	ldr	r3, [r7, #28]
 80025ae:	089b      	lsrs	r3, r3, #2
 80025b0:	3302      	adds	r3, #2
 80025b2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80025b6:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 80025b8:	69fb      	ldr	r3, [r7, #28]
 80025ba:	f003 0303 	and.w	r3, r3, #3
 80025be:	009b      	lsls	r3, r3, #2
 80025c0:	220f      	movs	r2, #15
 80025c2:	fa02 f303 	lsl.w	r3, r2, r3
 80025c6:	43db      	mvns	r3, r3
 80025c8:	69ba      	ldr	r2, [r7, #24]
 80025ca:	4013      	ands	r3, r2
 80025cc:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 80025ce:	687b      	ldr	r3, [r7, #4]
 80025d0:	4a1d      	ldr	r2, [pc, #116]	; (8002648 <HAL_GPIO_Init+0x234>)
 80025d2:	4293      	cmp	r3, r2
 80025d4:	d04a      	beq.n	800266c <HAL_GPIO_Init+0x258>
 80025d6:	687b      	ldr	r3, [r7, #4]
 80025d8:	4a1c      	ldr	r2, [pc, #112]	; (800264c <HAL_GPIO_Init+0x238>)
 80025da:	4293      	cmp	r3, r2
 80025dc:	d02b      	beq.n	8002636 <HAL_GPIO_Init+0x222>
 80025de:	687b      	ldr	r3, [r7, #4]
 80025e0:	4a1b      	ldr	r2, [pc, #108]	; (8002650 <HAL_GPIO_Init+0x23c>)
 80025e2:	4293      	cmp	r3, r2
 80025e4:	d025      	beq.n	8002632 <HAL_GPIO_Init+0x21e>
 80025e6:	687b      	ldr	r3, [r7, #4]
 80025e8:	4a1a      	ldr	r2, [pc, #104]	; (8002654 <HAL_GPIO_Init+0x240>)
 80025ea:	4293      	cmp	r3, r2
 80025ec:	d01f      	beq.n	800262e <HAL_GPIO_Init+0x21a>
 80025ee:	687b      	ldr	r3, [r7, #4]
 80025f0:	4a19      	ldr	r2, [pc, #100]	; (8002658 <HAL_GPIO_Init+0x244>)
 80025f2:	4293      	cmp	r3, r2
 80025f4:	d019      	beq.n	800262a <HAL_GPIO_Init+0x216>
 80025f6:	687b      	ldr	r3, [r7, #4]
 80025f8:	4a18      	ldr	r2, [pc, #96]	; (800265c <HAL_GPIO_Init+0x248>)
 80025fa:	4293      	cmp	r3, r2
 80025fc:	d013      	beq.n	8002626 <HAL_GPIO_Init+0x212>
 80025fe:	687b      	ldr	r3, [r7, #4]
 8002600:	4a17      	ldr	r2, [pc, #92]	; (8002660 <HAL_GPIO_Init+0x24c>)
 8002602:	4293      	cmp	r3, r2
 8002604:	d00d      	beq.n	8002622 <HAL_GPIO_Init+0x20e>
 8002606:	687b      	ldr	r3, [r7, #4]
 8002608:	4a16      	ldr	r2, [pc, #88]	; (8002664 <HAL_GPIO_Init+0x250>)
 800260a:	4293      	cmp	r3, r2
 800260c:	d007      	beq.n	800261e <HAL_GPIO_Init+0x20a>
 800260e:	687b      	ldr	r3, [r7, #4]
 8002610:	4a15      	ldr	r2, [pc, #84]	; (8002668 <HAL_GPIO_Init+0x254>)
 8002612:	4293      	cmp	r3, r2
 8002614:	d101      	bne.n	800261a <HAL_GPIO_Init+0x206>
 8002616:	2309      	movs	r3, #9
 8002618:	e029      	b.n	800266e <HAL_GPIO_Init+0x25a>
 800261a:	230a      	movs	r3, #10
 800261c:	e027      	b.n	800266e <HAL_GPIO_Init+0x25a>
 800261e:	2307      	movs	r3, #7
 8002620:	e025      	b.n	800266e <HAL_GPIO_Init+0x25a>
 8002622:	2306      	movs	r3, #6
 8002624:	e023      	b.n	800266e <HAL_GPIO_Init+0x25a>
 8002626:	2305      	movs	r3, #5
 8002628:	e021      	b.n	800266e <HAL_GPIO_Init+0x25a>
 800262a:	2304      	movs	r3, #4
 800262c:	e01f      	b.n	800266e <HAL_GPIO_Init+0x25a>
 800262e:	2303      	movs	r3, #3
 8002630:	e01d      	b.n	800266e <HAL_GPIO_Init+0x25a>
 8002632:	2302      	movs	r3, #2
 8002634:	e01b      	b.n	800266e <HAL_GPIO_Init+0x25a>
 8002636:	2301      	movs	r3, #1
 8002638:	e019      	b.n	800266e <HAL_GPIO_Init+0x25a>
 800263a:	bf00      	nop
 800263c:	58000080 	.word	0x58000080
 8002640:	58024400 	.word	0x58024400
 8002644:	58000400 	.word	0x58000400
 8002648:	58020000 	.word	0x58020000
 800264c:	58020400 	.word	0x58020400
 8002650:	58020800 	.word	0x58020800
 8002654:	58020c00 	.word	0x58020c00
 8002658:	58021000 	.word	0x58021000
 800265c:	58021400 	.word	0x58021400
 8002660:	58021800 	.word	0x58021800
 8002664:	58021c00 	.word	0x58021c00
 8002668:	58022400 	.word	0x58022400
 800266c:	2300      	movs	r3, #0
 800266e:	69fa      	ldr	r2, [r7, #28]
 8002670:	f002 0203 	and.w	r2, r2, #3
 8002674:	0092      	lsls	r2, r2, #2
 8002676:	4093      	lsls	r3, r2
 8002678:	69ba      	ldr	r2, [r7, #24]
 800267a:	4313      	orrs	r3, r2
 800267c:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 800267e:	4938      	ldr	r1, [pc, #224]	; (8002760 <HAL_GPIO_Init+0x34c>)
 8002680:	69fb      	ldr	r3, [r7, #28]
 8002682:	089b      	lsrs	r3, r3, #2
 8002684:	3302      	adds	r3, #2
 8002686:	69ba      	ldr	r2, [r7, #24]
 8002688:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
 800268c:	697b      	ldr	r3, [r7, #20]
 800268e:	681b      	ldr	r3, [r3, #0]
 8002690:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8002692:	693b      	ldr	r3, [r7, #16]
 8002694:	43db      	mvns	r3, r3
 8002696:	69ba      	ldr	r2, [r7, #24]
 8002698:	4013      	ands	r3, r2
 800269a:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 800269c:	683b      	ldr	r3, [r7, #0]
 800269e:	685b      	ldr	r3, [r3, #4]
 80026a0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80026a4:	2b00      	cmp	r3, #0
 80026a6:	d003      	beq.n	80026b0 <HAL_GPIO_Init+0x29c>
        {
          temp |= iocurrent;
 80026a8:	69ba      	ldr	r2, [r7, #24]
 80026aa:	693b      	ldr	r3, [r7, #16]
 80026ac:	4313      	orrs	r3, r2
 80026ae:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->IMR1 = temp;
 80026b0:	697b      	ldr	r3, [r7, #20]
 80026b2:	69ba      	ldr	r2, [r7, #24]
 80026b4:	601a      	str	r2, [r3, #0]

        temp = EXTI_CurrentCPU->EMR1;
 80026b6:	697b      	ldr	r3, [r7, #20]
 80026b8:	685b      	ldr	r3, [r3, #4]
 80026ba:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 80026bc:	693b      	ldr	r3, [r7, #16]
 80026be:	43db      	mvns	r3, r3
 80026c0:	69ba      	ldr	r2, [r7, #24]
 80026c2:	4013      	ands	r3, r2
 80026c4:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80026c6:	683b      	ldr	r3, [r7, #0]
 80026c8:	685b      	ldr	r3, [r3, #4]
 80026ca:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80026ce:	2b00      	cmp	r3, #0
 80026d0:	d003      	beq.n	80026da <HAL_GPIO_Init+0x2c6>
        {
          temp |= iocurrent;
 80026d2:	69ba      	ldr	r2, [r7, #24]
 80026d4:	693b      	ldr	r3, [r7, #16]
 80026d6:	4313      	orrs	r3, r2
 80026d8:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->EMR1 = temp;
 80026da:	697b      	ldr	r3, [r7, #20]
 80026dc:	69ba      	ldr	r2, [r7, #24]
 80026de:	605a      	str	r2, [r3, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 80026e0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80026e4:	681b      	ldr	r3, [r3, #0]
 80026e6:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 80026e8:	693b      	ldr	r3, [r7, #16]
 80026ea:	43db      	mvns	r3, r3
 80026ec:	69ba      	ldr	r2, [r7, #24]
 80026ee:	4013      	ands	r3, r2
 80026f0:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80026f2:	683b      	ldr	r3, [r7, #0]
 80026f4:	685b      	ldr	r3, [r3, #4]
 80026f6:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80026fa:	2b00      	cmp	r3, #0
 80026fc:	d003      	beq.n	8002706 <HAL_GPIO_Init+0x2f2>
        {
          temp |= iocurrent;
 80026fe:	69ba      	ldr	r2, [r7, #24]
 8002700:	693b      	ldr	r3, [r7, #16]
 8002702:	4313      	orrs	r3, r2
 8002704:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR1 = temp;
 8002706:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800270a:	69bb      	ldr	r3, [r7, #24]
 800270c:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 800270e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002712:	685b      	ldr	r3, [r3, #4]
 8002714:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8002716:	693b      	ldr	r3, [r7, #16]
 8002718:	43db      	mvns	r3, r3
 800271a:	69ba      	ldr	r2, [r7, #24]
 800271c:	4013      	ands	r3, r2
 800271e:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8002720:	683b      	ldr	r3, [r7, #0]
 8002722:	685b      	ldr	r3, [r3, #4]
 8002724:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002728:	2b00      	cmp	r3, #0
 800272a:	d003      	beq.n	8002734 <HAL_GPIO_Init+0x320>
        {
          temp |= iocurrent;
 800272c:	69ba      	ldr	r2, [r7, #24]
 800272e:	693b      	ldr	r3, [r7, #16]
 8002730:	4313      	orrs	r3, r2
 8002732:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR1 = temp;
 8002734:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8002738:	69bb      	ldr	r3, [r7, #24]
 800273a:	6053      	str	r3, [r2, #4]
      }
    }

    position++;
 800273c:	69fb      	ldr	r3, [r7, #28]
 800273e:	3301      	adds	r3, #1
 8002740:	61fb      	str	r3, [r7, #28]
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8002742:	683b      	ldr	r3, [r7, #0]
 8002744:	681a      	ldr	r2, [r3, #0]
 8002746:	69fb      	ldr	r3, [r7, #28]
 8002748:	fa22 f303 	lsr.w	r3, r2, r3
 800274c:	2b00      	cmp	r3, #0
 800274e:	f47f ae6b 	bne.w	8002428 <HAL_GPIO_Init+0x14>
  }
}
 8002752:	bf00      	nop
 8002754:	bf00      	nop
 8002756:	3724      	adds	r7, #36	; 0x24
 8002758:	46bd      	mov	sp, r7
 800275a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800275e:	4770      	bx	lr
 8002760:	58000400 	.word	0x58000400

08002764 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002764:	b480      	push	{r7}
 8002766:	b083      	sub	sp, #12
 8002768:	af00      	add	r7, sp, #0
 800276a:	6078      	str	r0, [r7, #4]
 800276c:	460b      	mov	r3, r1
 800276e:	807b      	strh	r3, [r7, #2]
 8002770:	4613      	mov	r3, r2
 8002772:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8002774:	787b      	ldrb	r3, [r7, #1]
 8002776:	2b00      	cmp	r3, #0
 8002778:	d003      	beq.n	8002782 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800277a:	887a      	ldrh	r2, [r7, #2]
 800277c:	687b      	ldr	r3, [r7, #4]
 800277e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
  }
}
 8002780:	e003      	b.n	800278a <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 8002782:	887b      	ldrh	r3, [r7, #2]
 8002784:	041a      	lsls	r2, r3, #16
 8002786:	687b      	ldr	r3, [r7, #4]
 8002788:	619a      	str	r2, [r3, #24]
}
 800278a:	bf00      	nop
 800278c:	370c      	adds	r7, #12
 800278e:	46bd      	mov	sp, r7
 8002790:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002794:	4770      	bx	lr
	...

08002798 <HAL_PWREx_ConfigSupply>:
  *         PWR_SMPS_2V5_SUPPLIES_EXT are used only for lines that supports SMPS
  *         regulator.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply (uint32_t SupplySource)
{
 8002798:	b580      	push	{r7, lr}
 800279a:	b084      	sub	sp, #16
 800279c:	af00      	add	r7, sp, #0
 800279e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param (IS_PWR_SUPPLY (SupplySource));

  /* Check if supply source was configured */
#if defined (PWR_FLAG_SCUEN)
  if (__HAL_PWR_GET_FLAG (PWR_FLAG_SCUEN) == 0U)
 80027a0:	4b19      	ldr	r3, [pc, #100]	; (8002808 <HAL_PWREx_ConfigSupply+0x70>)
 80027a2:	68db      	ldr	r3, [r3, #12]
 80027a4:	f003 0304 	and.w	r3, r3, #4
 80027a8:	2b04      	cmp	r3, #4
 80027aa:	d00a      	beq.n	80027c2 <HAL_PWREx_ConfigSupply+0x2a>
#else
  if ((PWR->CR3 & (PWR_CR3_SMPSEN | PWR_CR3_LDOEN | PWR_CR3_BYPASS)) != (PWR_CR3_SMPSEN | PWR_CR3_LDOEN))
#endif /* defined (PWR_FLAG_SCUEN) */
  {
    /* Check supply configuration */
    if ((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
 80027ac:	4b16      	ldr	r3, [pc, #88]	; (8002808 <HAL_PWREx_ConfigSupply+0x70>)
 80027ae:	68db      	ldr	r3, [r3, #12]
 80027b0:	f003 0307 	and.w	r3, r3, #7
 80027b4:	687a      	ldr	r2, [r7, #4]
 80027b6:	429a      	cmp	r2, r3
 80027b8:	d001      	beq.n	80027be <HAL_PWREx_ConfigSupply+0x26>
    {
      /* Supply configuration update locked, can't apply a new supply config */
      return HAL_ERROR;
 80027ba:	2301      	movs	r3, #1
 80027bc:	e01f      	b.n	80027fe <HAL_PWREx_ConfigSupply+0x66>
    else
    {
      /* Supply configuration update locked, but new supply configuration
         matches with old supply configuration : nothing to do
      */
      return HAL_OK;
 80027be:	2300      	movs	r3, #0
 80027c0:	e01d      	b.n	80027fe <HAL_PWREx_ConfigSupply+0x66>
    }
  }

  /* Set the power supply configuration */
  MODIFY_REG (PWR->CR3, PWR_SUPPLY_CONFIG_MASK, SupplySource);
 80027c2:	4b11      	ldr	r3, [pc, #68]	; (8002808 <HAL_PWREx_ConfigSupply+0x70>)
 80027c4:	68db      	ldr	r3, [r3, #12]
 80027c6:	f023 0207 	bic.w	r2, r3, #7
 80027ca:	490f      	ldr	r1, [pc, #60]	; (8002808 <HAL_PWREx_ConfigSupply+0x70>)
 80027cc:	687b      	ldr	r3, [r7, #4]
 80027ce:	4313      	orrs	r3, r2
 80027d0:	60cb      	str	r3, [r1, #12]

  /* Get tick */
  tickstart = HAL_GetTick ();
 80027d2:	f7fe fe59 	bl	8001488 <HAL_GetTick>
 80027d6:	60f8      	str	r0, [r7, #12]

  /* Wait till voltage level flag is set */
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 80027d8:	e009      	b.n	80027ee <HAL_PWREx_ConfigSupply+0x56>
  {
    if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 80027da:	f7fe fe55 	bl	8001488 <HAL_GetTick>
 80027de:	4602      	mov	r2, r0
 80027e0:	68fb      	ldr	r3, [r7, #12]
 80027e2:	1ad3      	subs	r3, r2, r3
 80027e4:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80027e8:	d901      	bls.n	80027ee <HAL_PWREx_ConfigSupply+0x56>
    {
      return HAL_ERROR;
 80027ea:	2301      	movs	r3, #1
 80027ec:	e007      	b.n	80027fe <HAL_PWREx_ConfigSupply+0x66>
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 80027ee:	4b06      	ldr	r3, [pc, #24]	; (8002808 <HAL_PWREx_ConfigSupply+0x70>)
 80027f0:	685b      	ldr	r3, [r3, #4]
 80027f2:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80027f6:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80027fa:	d1ee      	bne.n	80027da <HAL_PWREx_ConfigSupply+0x42>
      }
    }
  }
#endif /* defined (SMPS) */

  return HAL_OK;
 80027fc:	2300      	movs	r3, #0
}
 80027fe:	4618      	mov	r0, r3
 8002800:	3710      	adds	r7, #16
 8002802:	46bd      	mov	sp, r7
 8002804:	bd80      	pop	{r7, pc}
 8002806:	bf00      	nop
 8002808:	58024800 	.word	0x58024800

0800280c <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800280c:	b580      	push	{r7, lr}
 800280e:	b08c      	sub	sp, #48	; 0x30
 8002810:	af00      	add	r7, sp, #0
 8002812:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp1_pllckcfg, temp2_pllckcfg;

    /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8002814:	687b      	ldr	r3, [r7, #4]
 8002816:	2b00      	cmp	r3, #0
 8002818:	d101      	bne.n	800281e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800281a:	2301      	movs	r3, #1
 800281c:	e37a      	b.n	8002f14 <HAL_RCC_OscConfig+0x708>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800281e:	687b      	ldr	r3, [r7, #4]
 8002820:	681b      	ldr	r3, [r3, #0]
 8002822:	f003 0301 	and.w	r3, r3, #1
 8002826:	2b00      	cmp	r3, #0
 8002828:	f000 8087 	beq.w	800293a <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800282c:	4ba0      	ldr	r3, [pc, #640]	; (8002ab0 <HAL_RCC_OscConfig+0x2a4>)
 800282e:	691b      	ldr	r3, [r3, #16]
 8002830:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8002834:	62fb      	str	r3, [r7, #44]	; 0x2c
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8002836:	4b9e      	ldr	r3, [pc, #632]	; (8002ab0 <HAL_RCC_OscConfig+0x2a4>)
 8002838:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800283a:	62bb      	str	r3, [r7, #40]	; 0x28
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 800283c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800283e:	2b10      	cmp	r3, #16
 8002840:	d007      	beq.n	8002852 <HAL_RCC_OscConfig+0x46>
 8002842:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002844:	2b18      	cmp	r3, #24
 8002846:	d110      	bne.n	800286a <HAL_RCC_OscConfig+0x5e>
 8002848:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800284a:	f003 0303 	and.w	r3, r3, #3
 800284e:	2b02      	cmp	r3, #2
 8002850:	d10b      	bne.n	800286a <HAL_RCC_OscConfig+0x5e>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002852:	4b97      	ldr	r3, [pc, #604]	; (8002ab0 <HAL_RCC_OscConfig+0x2a4>)
 8002854:	681b      	ldr	r3, [r3, #0]
 8002856:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800285a:	2b00      	cmp	r3, #0
 800285c:	d06c      	beq.n	8002938 <HAL_RCC_OscConfig+0x12c>
 800285e:	687b      	ldr	r3, [r7, #4]
 8002860:	685b      	ldr	r3, [r3, #4]
 8002862:	2b00      	cmp	r3, #0
 8002864:	d168      	bne.n	8002938 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8002866:	2301      	movs	r3, #1
 8002868:	e354      	b.n	8002f14 <HAL_RCC_OscConfig+0x708>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800286a:	687b      	ldr	r3, [r7, #4]
 800286c:	685b      	ldr	r3, [r3, #4]
 800286e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002872:	d106      	bne.n	8002882 <HAL_RCC_OscConfig+0x76>
 8002874:	4b8e      	ldr	r3, [pc, #568]	; (8002ab0 <HAL_RCC_OscConfig+0x2a4>)
 8002876:	681b      	ldr	r3, [r3, #0]
 8002878:	4a8d      	ldr	r2, [pc, #564]	; (8002ab0 <HAL_RCC_OscConfig+0x2a4>)
 800287a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800287e:	6013      	str	r3, [r2, #0]
 8002880:	e02e      	b.n	80028e0 <HAL_RCC_OscConfig+0xd4>
 8002882:	687b      	ldr	r3, [r7, #4]
 8002884:	685b      	ldr	r3, [r3, #4]
 8002886:	2b00      	cmp	r3, #0
 8002888:	d10c      	bne.n	80028a4 <HAL_RCC_OscConfig+0x98>
 800288a:	4b89      	ldr	r3, [pc, #548]	; (8002ab0 <HAL_RCC_OscConfig+0x2a4>)
 800288c:	681b      	ldr	r3, [r3, #0]
 800288e:	4a88      	ldr	r2, [pc, #544]	; (8002ab0 <HAL_RCC_OscConfig+0x2a4>)
 8002890:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002894:	6013      	str	r3, [r2, #0]
 8002896:	4b86      	ldr	r3, [pc, #536]	; (8002ab0 <HAL_RCC_OscConfig+0x2a4>)
 8002898:	681b      	ldr	r3, [r3, #0]
 800289a:	4a85      	ldr	r2, [pc, #532]	; (8002ab0 <HAL_RCC_OscConfig+0x2a4>)
 800289c:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80028a0:	6013      	str	r3, [r2, #0]
 80028a2:	e01d      	b.n	80028e0 <HAL_RCC_OscConfig+0xd4>
 80028a4:	687b      	ldr	r3, [r7, #4]
 80028a6:	685b      	ldr	r3, [r3, #4]
 80028a8:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80028ac:	d10c      	bne.n	80028c8 <HAL_RCC_OscConfig+0xbc>
 80028ae:	4b80      	ldr	r3, [pc, #512]	; (8002ab0 <HAL_RCC_OscConfig+0x2a4>)
 80028b0:	681b      	ldr	r3, [r3, #0]
 80028b2:	4a7f      	ldr	r2, [pc, #508]	; (8002ab0 <HAL_RCC_OscConfig+0x2a4>)
 80028b4:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80028b8:	6013      	str	r3, [r2, #0]
 80028ba:	4b7d      	ldr	r3, [pc, #500]	; (8002ab0 <HAL_RCC_OscConfig+0x2a4>)
 80028bc:	681b      	ldr	r3, [r3, #0]
 80028be:	4a7c      	ldr	r2, [pc, #496]	; (8002ab0 <HAL_RCC_OscConfig+0x2a4>)
 80028c0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80028c4:	6013      	str	r3, [r2, #0]
 80028c6:	e00b      	b.n	80028e0 <HAL_RCC_OscConfig+0xd4>
 80028c8:	4b79      	ldr	r3, [pc, #484]	; (8002ab0 <HAL_RCC_OscConfig+0x2a4>)
 80028ca:	681b      	ldr	r3, [r3, #0]
 80028cc:	4a78      	ldr	r2, [pc, #480]	; (8002ab0 <HAL_RCC_OscConfig+0x2a4>)
 80028ce:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80028d2:	6013      	str	r3, [r2, #0]
 80028d4:	4b76      	ldr	r3, [pc, #472]	; (8002ab0 <HAL_RCC_OscConfig+0x2a4>)
 80028d6:	681b      	ldr	r3, [r3, #0]
 80028d8:	4a75      	ldr	r2, [pc, #468]	; (8002ab0 <HAL_RCC_OscConfig+0x2a4>)
 80028da:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80028de:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80028e0:	687b      	ldr	r3, [r7, #4]
 80028e2:	685b      	ldr	r3, [r3, #4]
 80028e4:	2b00      	cmp	r3, #0
 80028e6:	d013      	beq.n	8002910 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80028e8:	f7fe fdce 	bl	8001488 <HAL_GetTick>
 80028ec:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 80028ee:	e008      	b.n	8002902 <HAL_RCC_OscConfig+0xf6>
        {
          if((uint32_t) (HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80028f0:	f7fe fdca 	bl	8001488 <HAL_GetTick>
 80028f4:	4602      	mov	r2, r0
 80028f6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80028f8:	1ad3      	subs	r3, r2, r3
 80028fa:	2b64      	cmp	r3, #100	; 0x64
 80028fc:	d901      	bls.n	8002902 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 80028fe:	2303      	movs	r3, #3
 8002900:	e308      	b.n	8002f14 <HAL_RCC_OscConfig+0x708>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8002902:	4b6b      	ldr	r3, [pc, #428]	; (8002ab0 <HAL_RCC_OscConfig+0x2a4>)
 8002904:	681b      	ldr	r3, [r3, #0]
 8002906:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800290a:	2b00      	cmp	r3, #0
 800290c:	d0f0      	beq.n	80028f0 <HAL_RCC_OscConfig+0xe4>
 800290e:	e014      	b.n	800293a <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002910:	f7fe fdba 	bl	8001488 <HAL_GetTick>
 8002914:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8002916:	e008      	b.n	800292a <HAL_RCC_OscConfig+0x11e>
        {
          if((uint32_t) (HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002918:	f7fe fdb6 	bl	8001488 <HAL_GetTick>
 800291c:	4602      	mov	r2, r0
 800291e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002920:	1ad3      	subs	r3, r2, r3
 8002922:	2b64      	cmp	r3, #100	; 0x64
 8002924:	d901      	bls.n	800292a <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8002926:	2303      	movs	r3, #3
 8002928:	e2f4      	b.n	8002f14 <HAL_RCC_OscConfig+0x708>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 800292a:	4b61      	ldr	r3, [pc, #388]	; (8002ab0 <HAL_RCC_OscConfig+0x2a4>)
 800292c:	681b      	ldr	r3, [r3, #0]
 800292e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002932:	2b00      	cmp	r3, #0
 8002934:	d1f0      	bne.n	8002918 <HAL_RCC_OscConfig+0x10c>
 8002936:	e000      	b.n	800293a <HAL_RCC_OscConfig+0x12e>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002938:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800293a:	687b      	ldr	r3, [r7, #4]
 800293c:	681b      	ldr	r3, [r3, #0]
 800293e:	f003 0302 	and.w	r3, r3, #2
 8002942:	2b00      	cmp	r3, #0
 8002944:	d06d      	beq.n	8002a22 <HAL_RCC_OscConfig+0x216>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSICALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* When the HSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002946:	4b5a      	ldr	r3, [pc, #360]	; (8002ab0 <HAL_RCC_OscConfig+0x2a4>)
 8002948:	691b      	ldr	r3, [r3, #16]
 800294a:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800294e:	623b      	str	r3, [r7, #32]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8002950:	4b57      	ldr	r3, [pc, #348]	; (8002ab0 <HAL_RCC_OscConfig+0x2a4>)
 8002952:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002954:	61fb      	str	r3, [r7, #28]
    if((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 8002956:	6a3b      	ldr	r3, [r7, #32]
 8002958:	2b00      	cmp	r3, #0
 800295a:	d007      	beq.n	800296c <HAL_RCC_OscConfig+0x160>
 800295c:	6a3b      	ldr	r3, [r7, #32]
 800295e:	2b18      	cmp	r3, #24
 8002960:	d11b      	bne.n	800299a <HAL_RCC_OscConfig+0x18e>
 8002962:	69fb      	ldr	r3, [r7, #28]
 8002964:	f003 0303 	and.w	r3, r3, #3
 8002968:	2b00      	cmp	r3, #0
 800296a:	d116      	bne.n	800299a <HAL_RCC_OscConfig+0x18e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800296c:	4b50      	ldr	r3, [pc, #320]	; (8002ab0 <HAL_RCC_OscConfig+0x2a4>)
 800296e:	681b      	ldr	r3, [r3, #0]
 8002970:	f003 0304 	and.w	r3, r3, #4
 8002974:	2b00      	cmp	r3, #0
 8002976:	d005      	beq.n	8002984 <HAL_RCC_OscConfig+0x178>
 8002978:	687b      	ldr	r3, [r7, #4]
 800297a:	68db      	ldr	r3, [r3, #12]
 800297c:	2b00      	cmp	r3, #0
 800297e:	d101      	bne.n	8002984 <HAL_RCC_OscConfig+0x178>
      {
        return HAL_ERROR;
 8002980:	2301      	movs	r3, #1
 8002982:	e2c7      	b.n	8002f14 <HAL_RCC_OscConfig+0x708>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002984:	4b4a      	ldr	r3, [pc, #296]	; (8002ab0 <HAL_RCC_OscConfig+0x2a4>)
 8002986:	685b      	ldr	r3, [r3, #4]
 8002988:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 800298c:	687b      	ldr	r3, [r7, #4]
 800298e:	691b      	ldr	r3, [r3, #16]
 8002990:	061b      	lsls	r3, r3, #24
 8002992:	4947      	ldr	r1, [pc, #284]	; (8002ab0 <HAL_RCC_OscConfig+0x2a4>)
 8002994:	4313      	orrs	r3, r2
 8002996:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8002998:	e043      	b.n	8002a22 <HAL_RCC_OscConfig+0x216>
    }

    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 800299a:	687b      	ldr	r3, [r7, #4]
 800299c:	68db      	ldr	r3, [r3, #12]
 800299e:	2b00      	cmp	r3, #0
 80029a0:	d026      	beq.n	80029f0 <HAL_RCC_OscConfig+0x1e4>
      {
     /* Enable the Internal High Speed oscillator (HSI, HSIDIV2,HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 80029a2:	4b43      	ldr	r3, [pc, #268]	; (8002ab0 <HAL_RCC_OscConfig+0x2a4>)
 80029a4:	681b      	ldr	r3, [r3, #0]
 80029a6:	f023 0219 	bic.w	r2, r3, #25
 80029aa:	687b      	ldr	r3, [r7, #4]
 80029ac:	68db      	ldr	r3, [r3, #12]
 80029ae:	4940      	ldr	r1, [pc, #256]	; (8002ab0 <HAL_RCC_OscConfig+0x2a4>)
 80029b0:	4313      	orrs	r3, r2
 80029b2:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80029b4:	f7fe fd68 	bl	8001488 <HAL_GetTick>
 80029b8:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80029ba:	e008      	b.n	80029ce <HAL_RCC_OscConfig+0x1c2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80029bc:	f7fe fd64 	bl	8001488 <HAL_GetTick>
 80029c0:	4602      	mov	r2, r0
 80029c2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80029c4:	1ad3      	subs	r3, r2, r3
 80029c6:	2b02      	cmp	r3, #2
 80029c8:	d901      	bls.n	80029ce <HAL_RCC_OscConfig+0x1c2>
          {
            return HAL_TIMEOUT;
 80029ca:	2303      	movs	r3, #3
 80029cc:	e2a2      	b.n	8002f14 <HAL_RCC_OscConfig+0x708>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80029ce:	4b38      	ldr	r3, [pc, #224]	; (8002ab0 <HAL_RCC_OscConfig+0x2a4>)
 80029d0:	681b      	ldr	r3, [r3, #0]
 80029d2:	f003 0304 	and.w	r3, r3, #4
 80029d6:	2b00      	cmp	r3, #0
 80029d8:	d0f0      	beq.n	80029bc <HAL_RCC_OscConfig+0x1b0>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80029da:	4b35      	ldr	r3, [pc, #212]	; (8002ab0 <HAL_RCC_OscConfig+0x2a4>)
 80029dc:	685b      	ldr	r3, [r3, #4]
 80029de:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 80029e2:	687b      	ldr	r3, [r7, #4]
 80029e4:	691b      	ldr	r3, [r3, #16]
 80029e6:	061b      	lsls	r3, r3, #24
 80029e8:	4931      	ldr	r1, [pc, #196]	; (8002ab0 <HAL_RCC_OscConfig+0x2a4>)
 80029ea:	4313      	orrs	r3, r2
 80029ec:	604b      	str	r3, [r1, #4]
 80029ee:	e018      	b.n	8002a22 <HAL_RCC_OscConfig+0x216>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80029f0:	4b2f      	ldr	r3, [pc, #188]	; (8002ab0 <HAL_RCC_OscConfig+0x2a4>)
 80029f2:	681b      	ldr	r3, [r3, #0]
 80029f4:	4a2e      	ldr	r2, [pc, #184]	; (8002ab0 <HAL_RCC_OscConfig+0x2a4>)
 80029f6:	f023 0301 	bic.w	r3, r3, #1
 80029fa:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80029fc:	f7fe fd44 	bl	8001488 <HAL_GetTick>
 8002a00:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8002a02:	e008      	b.n	8002a16 <HAL_RCC_OscConfig+0x20a>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002a04:	f7fe fd40 	bl	8001488 <HAL_GetTick>
 8002a08:	4602      	mov	r2, r0
 8002a0a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002a0c:	1ad3      	subs	r3, r2, r3
 8002a0e:	2b02      	cmp	r3, #2
 8002a10:	d901      	bls.n	8002a16 <HAL_RCC_OscConfig+0x20a>
          {
            return HAL_TIMEOUT;
 8002a12:	2303      	movs	r3, #3
 8002a14:	e27e      	b.n	8002f14 <HAL_RCC_OscConfig+0x708>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8002a16:	4b26      	ldr	r3, [pc, #152]	; (8002ab0 <HAL_RCC_OscConfig+0x2a4>)
 8002a18:	681b      	ldr	r3, [r3, #0]
 8002a1a:	f003 0304 	and.w	r3, r3, #4
 8002a1e:	2b00      	cmp	r3, #0
 8002a20:	d1f0      	bne.n	8002a04 <HAL_RCC_OscConfig+0x1f8>
        }
      }
    }
  }
  /*----------------------------- CSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 8002a22:	687b      	ldr	r3, [r7, #4]
 8002a24:	681b      	ldr	r3, [r3, #0]
 8002a26:	f003 0310 	and.w	r3, r3, #16
 8002a2a:	2b00      	cmp	r3, #0
 8002a2c:	d06c      	beq.n	8002b08 <HAL_RCC_OscConfig+0x2fc>
    /* Check the parameters */
    assert_param(IS_RCC_CSI(RCC_OscInitStruct->CSIState));
    assert_param(IS_RCC_CSICALIBRATION_VALUE(RCC_OscInitStruct->CSICalibrationValue));

    /* When the CSI is used as system clock it will not disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002a2e:	4b20      	ldr	r3, [pc, #128]	; (8002ab0 <HAL_RCC_OscConfig+0x2a4>)
 8002a30:	691b      	ldr	r3, [r3, #16]
 8002a32:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8002a36:	61bb      	str	r3, [r7, #24]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8002a38:	4b1d      	ldr	r3, [pc, #116]	; (8002ab0 <HAL_RCC_OscConfig+0x2a4>)
 8002a3a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002a3c:	617b      	str	r3, [r7, #20]
    if((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 8002a3e:	69bb      	ldr	r3, [r7, #24]
 8002a40:	2b08      	cmp	r3, #8
 8002a42:	d007      	beq.n	8002a54 <HAL_RCC_OscConfig+0x248>
 8002a44:	69bb      	ldr	r3, [r7, #24]
 8002a46:	2b18      	cmp	r3, #24
 8002a48:	d11b      	bne.n	8002a82 <HAL_RCC_OscConfig+0x276>
 8002a4a:	697b      	ldr	r3, [r7, #20]
 8002a4c:	f003 0303 	and.w	r3, r3, #3
 8002a50:	2b01      	cmp	r3, #1
 8002a52:	d116      	bne.n	8002a82 <HAL_RCC_OscConfig+0x276>
    {
      /* When CSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8002a54:	4b16      	ldr	r3, [pc, #88]	; (8002ab0 <HAL_RCC_OscConfig+0x2a4>)
 8002a56:	681b      	ldr	r3, [r3, #0]
 8002a58:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002a5c:	2b00      	cmp	r3, #0
 8002a5e:	d005      	beq.n	8002a6c <HAL_RCC_OscConfig+0x260>
 8002a60:	687b      	ldr	r3, [r7, #4]
 8002a62:	69db      	ldr	r3, [r3, #28]
 8002a64:	2b80      	cmp	r3, #128	; 0x80
 8002a66:	d001      	beq.n	8002a6c <HAL_RCC_OscConfig+0x260>
      {
        return HAL_ERROR;
 8002a68:	2301      	movs	r3, #1
 8002a6a:	e253      	b.n	8002f14 <HAL_RCC_OscConfig+0x708>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8002a6c:	4b10      	ldr	r3, [pc, #64]	; (8002ab0 <HAL_RCC_OscConfig+0x2a4>)
 8002a6e:	68db      	ldr	r3, [r3, #12]
 8002a70:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 8002a74:	687b      	ldr	r3, [r7, #4]
 8002a76:	6a1b      	ldr	r3, [r3, #32]
 8002a78:	061b      	lsls	r3, r3, #24
 8002a7a:	490d      	ldr	r1, [pc, #52]	; (8002ab0 <HAL_RCC_OscConfig+0x2a4>)
 8002a7c:	4313      	orrs	r3, r2
 8002a7e:	60cb      	str	r3, [r1, #12]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8002a80:	e042      	b.n	8002b08 <HAL_RCC_OscConfig+0x2fc>
      }
    }
    else
    {
      /* Check the CSI State */
      if((RCC_OscInitStruct->CSIState)!= RCC_CSI_OFF)
 8002a82:	687b      	ldr	r3, [r7, #4]
 8002a84:	69db      	ldr	r3, [r3, #28]
 8002a86:	2b00      	cmp	r3, #0
 8002a88:	d025      	beq.n	8002ad6 <HAL_RCC_OscConfig+0x2ca>
      {
        /* Enable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_ENABLE();
 8002a8a:	4b09      	ldr	r3, [pc, #36]	; (8002ab0 <HAL_RCC_OscConfig+0x2a4>)
 8002a8c:	681b      	ldr	r3, [r3, #0]
 8002a8e:	4a08      	ldr	r2, [pc, #32]	; (8002ab0 <HAL_RCC_OscConfig+0x2a4>)
 8002a90:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002a94:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002a96:	f7fe fcf7 	bl	8001488 <HAL_GetTick>
 8002a9a:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8002a9c:	e00a      	b.n	8002ab4 <HAL_RCC_OscConfig+0x2a8>
        {
          if((HAL_GetTick() - tickstart ) > CSI_TIMEOUT_VALUE)
 8002a9e:	f7fe fcf3 	bl	8001488 <HAL_GetTick>
 8002aa2:	4602      	mov	r2, r0
 8002aa4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002aa6:	1ad3      	subs	r3, r2, r3
 8002aa8:	2b02      	cmp	r3, #2
 8002aaa:	d903      	bls.n	8002ab4 <HAL_RCC_OscConfig+0x2a8>
          {
            return HAL_TIMEOUT;
 8002aac:	2303      	movs	r3, #3
 8002aae:	e231      	b.n	8002f14 <HAL_RCC_OscConfig+0x708>
 8002ab0:	58024400 	.word	0x58024400
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8002ab4:	4ba3      	ldr	r3, [pc, #652]	; (8002d44 <HAL_RCC_OscConfig+0x538>)
 8002ab6:	681b      	ldr	r3, [r3, #0]
 8002ab8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002abc:	2b00      	cmp	r3, #0
 8002abe:	d0ee      	beq.n	8002a9e <HAL_RCC_OscConfig+0x292>
          }
        }

        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8002ac0:	4ba0      	ldr	r3, [pc, #640]	; (8002d44 <HAL_RCC_OscConfig+0x538>)
 8002ac2:	68db      	ldr	r3, [r3, #12]
 8002ac4:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 8002ac8:	687b      	ldr	r3, [r7, #4]
 8002aca:	6a1b      	ldr	r3, [r3, #32]
 8002acc:	061b      	lsls	r3, r3, #24
 8002ace:	499d      	ldr	r1, [pc, #628]	; (8002d44 <HAL_RCC_OscConfig+0x538>)
 8002ad0:	4313      	orrs	r3, r2
 8002ad2:	60cb      	str	r3, [r1, #12]
 8002ad4:	e018      	b.n	8002b08 <HAL_RCC_OscConfig+0x2fc>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_DISABLE();
 8002ad6:	4b9b      	ldr	r3, [pc, #620]	; (8002d44 <HAL_RCC_OscConfig+0x538>)
 8002ad8:	681b      	ldr	r3, [r3, #0]
 8002ada:	4a9a      	ldr	r2, [pc, #616]	; (8002d44 <HAL_RCC_OscConfig+0x538>)
 8002adc:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8002ae0:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002ae2:	f7fe fcd1 	bl	8001488 <HAL_GetTick>
 8002ae6:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8002ae8:	e008      	b.n	8002afc <HAL_RCC_OscConfig+0x2f0>
        {
          if((HAL_GetTick() - tickstart ) > CSI_TIMEOUT_VALUE)
 8002aea:	f7fe fccd 	bl	8001488 <HAL_GetTick>
 8002aee:	4602      	mov	r2, r0
 8002af0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002af2:	1ad3      	subs	r3, r2, r3
 8002af4:	2b02      	cmp	r3, #2
 8002af6:	d901      	bls.n	8002afc <HAL_RCC_OscConfig+0x2f0>
          {
            return HAL_TIMEOUT;
 8002af8:	2303      	movs	r3, #3
 8002afa:	e20b      	b.n	8002f14 <HAL_RCC_OscConfig+0x708>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8002afc:	4b91      	ldr	r3, [pc, #580]	; (8002d44 <HAL_RCC_OscConfig+0x538>)
 8002afe:	681b      	ldr	r3, [r3, #0]
 8002b00:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002b04:	2b00      	cmp	r3, #0
 8002b06:	d1f0      	bne.n	8002aea <HAL_RCC_OscConfig+0x2de>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002b08:	687b      	ldr	r3, [r7, #4]
 8002b0a:	681b      	ldr	r3, [r3, #0]
 8002b0c:	f003 0308 	and.w	r3, r3, #8
 8002b10:	2b00      	cmp	r3, #0
 8002b12:	d036      	beq.n	8002b82 <HAL_RCC_OscConfig+0x376>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8002b14:	687b      	ldr	r3, [r7, #4]
 8002b16:	695b      	ldr	r3, [r3, #20]
 8002b18:	2b00      	cmp	r3, #0
 8002b1a:	d019      	beq.n	8002b50 <HAL_RCC_OscConfig+0x344>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002b1c:	4b89      	ldr	r3, [pc, #548]	; (8002d44 <HAL_RCC_OscConfig+0x538>)
 8002b1e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002b20:	4a88      	ldr	r2, [pc, #544]	; (8002d44 <HAL_RCC_OscConfig+0x538>)
 8002b22:	f043 0301 	orr.w	r3, r3, #1
 8002b26:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002b28:	f7fe fcae 	bl	8001488 <HAL_GetTick>
 8002b2c:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8002b2e:	e008      	b.n	8002b42 <HAL_RCC_OscConfig+0x336>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002b30:	f7fe fcaa 	bl	8001488 <HAL_GetTick>
 8002b34:	4602      	mov	r2, r0
 8002b36:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002b38:	1ad3      	subs	r3, r2, r3
 8002b3a:	2b02      	cmp	r3, #2
 8002b3c:	d901      	bls.n	8002b42 <HAL_RCC_OscConfig+0x336>
        {
          return HAL_TIMEOUT;
 8002b3e:	2303      	movs	r3, #3
 8002b40:	e1e8      	b.n	8002f14 <HAL_RCC_OscConfig+0x708>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8002b42:	4b80      	ldr	r3, [pc, #512]	; (8002d44 <HAL_RCC_OscConfig+0x538>)
 8002b44:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002b46:	f003 0302 	and.w	r3, r3, #2
 8002b4a:	2b00      	cmp	r3, #0
 8002b4c:	d0f0      	beq.n	8002b30 <HAL_RCC_OscConfig+0x324>
 8002b4e:	e018      	b.n	8002b82 <HAL_RCC_OscConfig+0x376>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002b50:	4b7c      	ldr	r3, [pc, #496]	; (8002d44 <HAL_RCC_OscConfig+0x538>)
 8002b52:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002b54:	4a7b      	ldr	r2, [pc, #492]	; (8002d44 <HAL_RCC_OscConfig+0x538>)
 8002b56:	f023 0301 	bic.w	r3, r3, #1
 8002b5a:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002b5c:	f7fe fc94 	bl	8001488 <HAL_GetTick>
 8002b60:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8002b62:	e008      	b.n	8002b76 <HAL_RCC_OscConfig+0x36a>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002b64:	f7fe fc90 	bl	8001488 <HAL_GetTick>
 8002b68:	4602      	mov	r2, r0
 8002b6a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002b6c:	1ad3      	subs	r3, r2, r3
 8002b6e:	2b02      	cmp	r3, #2
 8002b70:	d901      	bls.n	8002b76 <HAL_RCC_OscConfig+0x36a>
        {
          return HAL_TIMEOUT;
 8002b72:	2303      	movs	r3, #3
 8002b74:	e1ce      	b.n	8002f14 <HAL_RCC_OscConfig+0x708>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8002b76:	4b73      	ldr	r3, [pc, #460]	; (8002d44 <HAL_RCC_OscConfig+0x538>)
 8002b78:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002b7a:	f003 0302 	and.w	r3, r3, #2
 8002b7e:	2b00      	cmp	r3, #0
 8002b80:	d1f0      	bne.n	8002b64 <HAL_RCC_OscConfig+0x358>
      }
    }
  }

  /*------------------------------ HSI48 Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8002b82:	687b      	ldr	r3, [r7, #4]
 8002b84:	681b      	ldr	r3, [r3, #0]
 8002b86:	f003 0320 	and.w	r3, r3, #32
 8002b8a:	2b00      	cmp	r3, #0
 8002b8c:	d036      	beq.n	8002bfc <HAL_RCC_OscConfig+0x3f0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if((RCC_OscInitStruct->HSI48State)!= RCC_HSI48_OFF)
 8002b8e:	687b      	ldr	r3, [r7, #4]
 8002b90:	699b      	ldr	r3, [r3, #24]
 8002b92:	2b00      	cmp	r3, #0
 8002b94:	d019      	beq.n	8002bca <HAL_RCC_OscConfig+0x3be>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8002b96:	4b6b      	ldr	r3, [pc, #428]	; (8002d44 <HAL_RCC_OscConfig+0x538>)
 8002b98:	681b      	ldr	r3, [r3, #0]
 8002b9a:	4a6a      	ldr	r2, [pc, #424]	; (8002d44 <HAL_RCC_OscConfig+0x538>)
 8002b9c:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8002ba0:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8002ba2:	f7fe fc71 	bl	8001488 <HAL_GetTick>
 8002ba6:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8002ba8:	e008      	b.n	8002bbc <HAL_RCC_OscConfig+0x3b0>
      {
        if((HAL_GetTick() - tickstart ) > HSI48_TIMEOUT_VALUE)
 8002baa:	f7fe fc6d 	bl	8001488 <HAL_GetTick>
 8002bae:	4602      	mov	r2, r0
 8002bb0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002bb2:	1ad3      	subs	r3, r2, r3
 8002bb4:	2b02      	cmp	r3, #2
 8002bb6:	d901      	bls.n	8002bbc <HAL_RCC_OscConfig+0x3b0>
        {
          return HAL_TIMEOUT;
 8002bb8:	2303      	movs	r3, #3
 8002bba:	e1ab      	b.n	8002f14 <HAL_RCC_OscConfig+0x708>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8002bbc:	4b61      	ldr	r3, [pc, #388]	; (8002d44 <HAL_RCC_OscConfig+0x538>)
 8002bbe:	681b      	ldr	r3, [r3, #0]
 8002bc0:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8002bc4:	2b00      	cmp	r3, #0
 8002bc6:	d0f0      	beq.n	8002baa <HAL_RCC_OscConfig+0x39e>
 8002bc8:	e018      	b.n	8002bfc <HAL_RCC_OscConfig+0x3f0>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8002bca:	4b5e      	ldr	r3, [pc, #376]	; (8002d44 <HAL_RCC_OscConfig+0x538>)
 8002bcc:	681b      	ldr	r3, [r3, #0]
 8002bce:	4a5d      	ldr	r2, [pc, #372]	; (8002d44 <HAL_RCC_OscConfig+0x538>)
 8002bd0:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8002bd4:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8002bd6:	f7fe fc57 	bl	8001488 <HAL_GetTick>
 8002bda:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8002bdc:	e008      	b.n	8002bf0 <HAL_RCC_OscConfig+0x3e4>
      {
        if((HAL_GetTick() - tickstart ) > HSI48_TIMEOUT_VALUE)
 8002bde:	f7fe fc53 	bl	8001488 <HAL_GetTick>
 8002be2:	4602      	mov	r2, r0
 8002be4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002be6:	1ad3      	subs	r3, r2, r3
 8002be8:	2b02      	cmp	r3, #2
 8002bea:	d901      	bls.n	8002bf0 <HAL_RCC_OscConfig+0x3e4>
        {
          return HAL_TIMEOUT;
 8002bec:	2303      	movs	r3, #3
 8002bee:	e191      	b.n	8002f14 <HAL_RCC_OscConfig+0x708>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8002bf0:	4b54      	ldr	r3, [pc, #336]	; (8002d44 <HAL_RCC_OscConfig+0x538>)
 8002bf2:	681b      	ldr	r3, [r3, #0]
 8002bf4:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8002bf8:	2b00      	cmp	r3, #0
 8002bfa:	d1f0      	bne.n	8002bde <HAL_RCC_OscConfig+0x3d2>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002bfc:	687b      	ldr	r3, [r7, #4]
 8002bfe:	681b      	ldr	r3, [r3, #0]
 8002c00:	f003 0304 	and.w	r3, r3, #4
 8002c04:	2b00      	cmp	r3, #0
 8002c06:	f000 8081 	beq.w	8002d0c <HAL_RCC_OscConfig+0x500>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8002c0a:	4b4f      	ldr	r3, [pc, #316]	; (8002d48 <HAL_RCC_OscConfig+0x53c>)
 8002c0c:	681b      	ldr	r3, [r3, #0]
 8002c0e:	4a4e      	ldr	r2, [pc, #312]	; (8002d48 <HAL_RCC_OscConfig+0x53c>)
 8002c10:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002c14:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8002c16:	f7fe fc37 	bl	8001488 <HAL_GetTick>
 8002c1a:	6278      	str	r0, [r7, #36]	; 0x24

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8002c1c:	e008      	b.n	8002c30 <HAL_RCC_OscConfig+0x424>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 8002c1e:	f7fe fc33 	bl	8001488 <HAL_GetTick>
 8002c22:	4602      	mov	r2, r0
 8002c24:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002c26:	1ad3      	subs	r3, r2, r3
 8002c28:	2b64      	cmp	r3, #100	; 0x64
 8002c2a:	d901      	bls.n	8002c30 <HAL_RCC_OscConfig+0x424>
      {
        return HAL_TIMEOUT;
 8002c2c:	2303      	movs	r3, #3
 8002c2e:	e171      	b.n	8002f14 <HAL_RCC_OscConfig+0x708>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8002c30:	4b45      	ldr	r3, [pc, #276]	; (8002d48 <HAL_RCC_OscConfig+0x53c>)
 8002c32:	681b      	ldr	r3, [r3, #0]
 8002c34:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002c38:	2b00      	cmp	r3, #0
 8002c3a:	d0f0      	beq.n	8002c1e <HAL_RCC_OscConfig+0x412>
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002c3c:	687b      	ldr	r3, [r7, #4]
 8002c3e:	689b      	ldr	r3, [r3, #8]
 8002c40:	2b01      	cmp	r3, #1
 8002c42:	d106      	bne.n	8002c52 <HAL_RCC_OscConfig+0x446>
 8002c44:	4b3f      	ldr	r3, [pc, #252]	; (8002d44 <HAL_RCC_OscConfig+0x538>)
 8002c46:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002c48:	4a3e      	ldr	r2, [pc, #248]	; (8002d44 <HAL_RCC_OscConfig+0x538>)
 8002c4a:	f043 0301 	orr.w	r3, r3, #1
 8002c4e:	6713      	str	r3, [r2, #112]	; 0x70
 8002c50:	e02d      	b.n	8002cae <HAL_RCC_OscConfig+0x4a2>
 8002c52:	687b      	ldr	r3, [r7, #4]
 8002c54:	689b      	ldr	r3, [r3, #8]
 8002c56:	2b00      	cmp	r3, #0
 8002c58:	d10c      	bne.n	8002c74 <HAL_RCC_OscConfig+0x468>
 8002c5a:	4b3a      	ldr	r3, [pc, #232]	; (8002d44 <HAL_RCC_OscConfig+0x538>)
 8002c5c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002c5e:	4a39      	ldr	r2, [pc, #228]	; (8002d44 <HAL_RCC_OscConfig+0x538>)
 8002c60:	f023 0301 	bic.w	r3, r3, #1
 8002c64:	6713      	str	r3, [r2, #112]	; 0x70
 8002c66:	4b37      	ldr	r3, [pc, #220]	; (8002d44 <HAL_RCC_OscConfig+0x538>)
 8002c68:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002c6a:	4a36      	ldr	r2, [pc, #216]	; (8002d44 <HAL_RCC_OscConfig+0x538>)
 8002c6c:	f023 0304 	bic.w	r3, r3, #4
 8002c70:	6713      	str	r3, [r2, #112]	; 0x70
 8002c72:	e01c      	b.n	8002cae <HAL_RCC_OscConfig+0x4a2>
 8002c74:	687b      	ldr	r3, [r7, #4]
 8002c76:	689b      	ldr	r3, [r3, #8]
 8002c78:	2b05      	cmp	r3, #5
 8002c7a:	d10c      	bne.n	8002c96 <HAL_RCC_OscConfig+0x48a>
 8002c7c:	4b31      	ldr	r3, [pc, #196]	; (8002d44 <HAL_RCC_OscConfig+0x538>)
 8002c7e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002c80:	4a30      	ldr	r2, [pc, #192]	; (8002d44 <HAL_RCC_OscConfig+0x538>)
 8002c82:	f043 0304 	orr.w	r3, r3, #4
 8002c86:	6713      	str	r3, [r2, #112]	; 0x70
 8002c88:	4b2e      	ldr	r3, [pc, #184]	; (8002d44 <HAL_RCC_OscConfig+0x538>)
 8002c8a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002c8c:	4a2d      	ldr	r2, [pc, #180]	; (8002d44 <HAL_RCC_OscConfig+0x538>)
 8002c8e:	f043 0301 	orr.w	r3, r3, #1
 8002c92:	6713      	str	r3, [r2, #112]	; 0x70
 8002c94:	e00b      	b.n	8002cae <HAL_RCC_OscConfig+0x4a2>
 8002c96:	4b2b      	ldr	r3, [pc, #172]	; (8002d44 <HAL_RCC_OscConfig+0x538>)
 8002c98:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002c9a:	4a2a      	ldr	r2, [pc, #168]	; (8002d44 <HAL_RCC_OscConfig+0x538>)
 8002c9c:	f023 0301 	bic.w	r3, r3, #1
 8002ca0:	6713      	str	r3, [r2, #112]	; 0x70
 8002ca2:	4b28      	ldr	r3, [pc, #160]	; (8002d44 <HAL_RCC_OscConfig+0x538>)
 8002ca4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002ca6:	4a27      	ldr	r2, [pc, #156]	; (8002d44 <HAL_RCC_OscConfig+0x538>)
 8002ca8:	f023 0304 	bic.w	r3, r3, #4
 8002cac:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8002cae:	687b      	ldr	r3, [r7, #4]
 8002cb0:	689b      	ldr	r3, [r3, #8]
 8002cb2:	2b00      	cmp	r3, #0
 8002cb4:	d015      	beq.n	8002ce2 <HAL_RCC_OscConfig+0x4d6>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002cb6:	f7fe fbe7 	bl	8001488 <HAL_GetTick>
 8002cba:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8002cbc:	e00a      	b.n	8002cd4 <HAL_RCC_OscConfig+0x4c8>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002cbe:	f7fe fbe3 	bl	8001488 <HAL_GetTick>
 8002cc2:	4602      	mov	r2, r0
 8002cc4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002cc6:	1ad3      	subs	r3, r2, r3
 8002cc8:	f241 3288 	movw	r2, #5000	; 0x1388
 8002ccc:	4293      	cmp	r3, r2
 8002cce:	d901      	bls.n	8002cd4 <HAL_RCC_OscConfig+0x4c8>
        {
          return HAL_TIMEOUT;
 8002cd0:	2303      	movs	r3, #3
 8002cd2:	e11f      	b.n	8002f14 <HAL_RCC_OscConfig+0x708>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8002cd4:	4b1b      	ldr	r3, [pc, #108]	; (8002d44 <HAL_RCC_OscConfig+0x538>)
 8002cd6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002cd8:	f003 0302 	and.w	r3, r3, #2
 8002cdc:	2b00      	cmp	r3, #0
 8002cde:	d0ee      	beq.n	8002cbe <HAL_RCC_OscConfig+0x4b2>
 8002ce0:	e014      	b.n	8002d0c <HAL_RCC_OscConfig+0x500>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002ce2:	f7fe fbd1 	bl	8001488 <HAL_GetTick>
 8002ce6:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is disabled */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8002ce8:	e00a      	b.n	8002d00 <HAL_RCC_OscConfig+0x4f4>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002cea:	f7fe fbcd 	bl	8001488 <HAL_GetTick>
 8002cee:	4602      	mov	r2, r0
 8002cf0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002cf2:	1ad3      	subs	r3, r2, r3
 8002cf4:	f241 3288 	movw	r2, #5000	; 0x1388
 8002cf8:	4293      	cmp	r3, r2
 8002cfa:	d901      	bls.n	8002d00 <HAL_RCC_OscConfig+0x4f4>
        {
          return HAL_TIMEOUT;
 8002cfc:	2303      	movs	r3, #3
 8002cfe:	e109      	b.n	8002f14 <HAL_RCC_OscConfig+0x708>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8002d00:	4b10      	ldr	r3, [pc, #64]	; (8002d44 <HAL_RCC_OscConfig+0x538>)
 8002d02:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002d04:	f003 0302 	and.w	r3, r3, #2
 8002d08:	2b00      	cmp	r3, #0
 8002d0a:	d1ee      	bne.n	8002cea <HAL_RCC_OscConfig+0x4de>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002d0c:	687b      	ldr	r3, [r7, #4]
 8002d0e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002d10:	2b00      	cmp	r3, #0
 8002d12:	f000 80fe 	beq.w	8002f12 <HAL_RCC_OscConfig+0x706>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL1)
 8002d16:	4b0b      	ldr	r3, [pc, #44]	; (8002d44 <HAL_RCC_OscConfig+0x538>)
 8002d18:	691b      	ldr	r3, [r3, #16]
 8002d1a:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8002d1e:	2b18      	cmp	r3, #24
 8002d20:	f000 80b9 	beq.w	8002e96 <HAL_RCC_OscConfig+0x68a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002d24:	687b      	ldr	r3, [r7, #4]
 8002d26:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002d28:	2b02      	cmp	r3, #2
 8002d2a:	f040 809a 	bne.w	8002e62 <HAL_RCC_OscConfig+0x656>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
        assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002d2e:	4b05      	ldr	r3, [pc, #20]	; (8002d44 <HAL_RCC_OscConfig+0x538>)
 8002d30:	681b      	ldr	r3, [r3, #0]
 8002d32:	4a04      	ldr	r2, [pc, #16]	; (8002d44 <HAL_RCC_OscConfig+0x538>)
 8002d34:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8002d38:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002d3a:	f7fe fba5 	bl	8001488 <HAL_GetTick>
 8002d3e:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8002d40:	e00d      	b.n	8002d5e <HAL_RCC_OscConfig+0x552>
 8002d42:	bf00      	nop
 8002d44:	58024400 	.word	0x58024400
 8002d48:	58024800 	.word	0x58024800
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002d4c:	f7fe fb9c 	bl	8001488 <HAL_GetTick>
 8002d50:	4602      	mov	r2, r0
 8002d52:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002d54:	1ad3      	subs	r3, r2, r3
 8002d56:	2b02      	cmp	r3, #2
 8002d58:	d901      	bls.n	8002d5e <HAL_RCC_OscConfig+0x552>
          {
            return HAL_TIMEOUT;
 8002d5a:	2303      	movs	r3, #3
 8002d5c:	e0da      	b.n	8002f14 <HAL_RCC_OscConfig+0x708>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8002d5e:	4b6f      	ldr	r3, [pc, #444]	; (8002f1c <HAL_RCC_OscConfig+0x710>)
 8002d60:	681b      	ldr	r3, [r3, #0]
 8002d62:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002d66:	2b00      	cmp	r3, #0
 8002d68:	d1f0      	bne.n	8002d4c <HAL_RCC_OscConfig+0x540>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002d6a:	4b6c      	ldr	r3, [pc, #432]	; (8002f1c <HAL_RCC_OscConfig+0x710>)
 8002d6c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8002d6e:	4b6c      	ldr	r3, [pc, #432]	; (8002f20 <HAL_RCC_OscConfig+0x714>)
 8002d70:	4013      	ands	r3, r2
 8002d72:	687a      	ldr	r2, [r7, #4]
 8002d74:	6a91      	ldr	r1, [r2, #40]	; 0x28
 8002d76:	687a      	ldr	r2, [r7, #4]
 8002d78:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 8002d7a:	0112      	lsls	r2, r2, #4
 8002d7c:	430a      	orrs	r2, r1
 8002d7e:	4967      	ldr	r1, [pc, #412]	; (8002f1c <HAL_RCC_OscConfig+0x710>)
 8002d80:	4313      	orrs	r3, r2
 8002d82:	628b      	str	r3, [r1, #40]	; 0x28
 8002d84:	687b      	ldr	r3, [r7, #4]
 8002d86:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002d88:	3b01      	subs	r3, #1
 8002d8a:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8002d8e:	687b      	ldr	r3, [r7, #4]
 8002d90:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002d92:	3b01      	subs	r3, #1
 8002d94:	025b      	lsls	r3, r3, #9
 8002d96:	b29b      	uxth	r3, r3
 8002d98:	431a      	orrs	r2, r3
 8002d9a:	687b      	ldr	r3, [r7, #4]
 8002d9c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002d9e:	3b01      	subs	r3, #1
 8002da0:	041b      	lsls	r3, r3, #16
 8002da2:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 8002da6:	431a      	orrs	r2, r3
 8002da8:	687b      	ldr	r3, [r7, #4]
 8002daa:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002dac:	3b01      	subs	r3, #1
 8002dae:	061b      	lsls	r3, r3, #24
 8002db0:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 8002db4:	4959      	ldr	r1, [pc, #356]	; (8002f1c <HAL_RCC_OscConfig+0x710>)
 8002db6:	4313      	orrs	r3, r2
 8002db8:	630b      	str	r3, [r1, #48]	; 0x30
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

         /* Disable PLLFRACN . */
         __HAL_RCC_PLLFRACN_DISABLE();
 8002dba:	4b58      	ldr	r3, [pc, #352]	; (8002f1c <HAL_RCC_OscConfig+0x710>)
 8002dbc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002dbe:	4a57      	ldr	r2, [pc, #348]	; (8002f1c <HAL_RCC_OscConfig+0x710>)
 8002dc0:	f023 0301 	bic.w	r3, r3, #1
 8002dc4:	62d3      	str	r3, [r2, #44]	; 0x2c

         /* Configure PLL PLL1FRACN */
         __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 8002dc6:	4b55      	ldr	r3, [pc, #340]	; (8002f1c <HAL_RCC_OscConfig+0x710>)
 8002dc8:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002dca:	4b56      	ldr	r3, [pc, #344]	; (8002f24 <HAL_RCC_OscConfig+0x718>)
 8002dcc:	4013      	ands	r3, r2
 8002dce:	687a      	ldr	r2, [r7, #4]
 8002dd0:	6c92      	ldr	r2, [r2, #72]	; 0x48
 8002dd2:	00d2      	lsls	r2, r2, #3
 8002dd4:	4951      	ldr	r1, [pc, #324]	; (8002f1c <HAL_RCC_OscConfig+0x710>)
 8002dd6:	4313      	orrs	r3, r2
 8002dd8:	634b      	str	r3, [r1, #52]	; 0x34

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL_VCIRANGE(RCC_OscInitStruct->PLL.PLLRGE) ;
 8002dda:	4b50      	ldr	r3, [pc, #320]	; (8002f1c <HAL_RCC_OscConfig+0x710>)
 8002ddc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002dde:	f023 020c 	bic.w	r2, r3, #12
 8002de2:	687b      	ldr	r3, [r7, #4]
 8002de4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002de6:	494d      	ldr	r1, [pc, #308]	; (8002f1c <HAL_RCC_OscConfig+0x710>)
 8002de8:	4313      	orrs	r3, r2
 8002dea:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Select PLL1 output frequency range : VCO */
        __HAL_RCC_PLL_VCORANGE(RCC_OscInitStruct->PLL.PLLVCOSEL) ;
 8002dec:	4b4b      	ldr	r3, [pc, #300]	; (8002f1c <HAL_RCC_OscConfig+0x710>)
 8002dee:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002df0:	f023 0202 	bic.w	r2, r3, #2
 8002df4:	687b      	ldr	r3, [r7, #4]
 8002df6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002df8:	4948      	ldr	r1, [pc, #288]	; (8002f1c <HAL_RCC_OscConfig+0x710>)
 8002dfa:	4313      	orrs	r3, r2
 8002dfc:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 8002dfe:	4b47      	ldr	r3, [pc, #284]	; (8002f1c <HAL_RCC_OscConfig+0x710>)
 8002e00:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002e02:	4a46      	ldr	r2, [pc, #280]	; (8002f1c <HAL_RCC_OscConfig+0x710>)
 8002e04:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002e08:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1Q Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8002e0a:	4b44      	ldr	r3, [pc, #272]	; (8002f1c <HAL_RCC_OscConfig+0x710>)
 8002e0c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002e0e:	4a43      	ldr	r2, [pc, #268]	; (8002f1c <HAL_RCC_OscConfig+0x710>)
 8002e10:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002e14:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1R  Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 8002e16:	4b41      	ldr	r3, [pc, #260]	; (8002f1c <HAL_RCC_OscConfig+0x710>)
 8002e18:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002e1a:	4a40      	ldr	r2, [pc, #256]	; (8002f1c <HAL_RCC_OscConfig+0x710>)
 8002e1c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002e20:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1FRACN . */
         __HAL_RCC_PLLFRACN_ENABLE();
 8002e22:	4b3e      	ldr	r3, [pc, #248]	; (8002f1c <HAL_RCC_OscConfig+0x710>)
 8002e24:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002e26:	4a3d      	ldr	r2, [pc, #244]	; (8002f1c <HAL_RCC_OscConfig+0x710>)
 8002e28:	f043 0301 	orr.w	r3, r3, #1
 8002e2c:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002e2e:	4b3b      	ldr	r3, [pc, #236]	; (8002f1c <HAL_RCC_OscConfig+0x710>)
 8002e30:	681b      	ldr	r3, [r3, #0]
 8002e32:	4a3a      	ldr	r2, [pc, #232]	; (8002f1c <HAL_RCC_OscConfig+0x710>)
 8002e34:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002e38:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002e3a:	f7fe fb25 	bl	8001488 <HAL_GetTick>
 8002e3e:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8002e40:	e008      	b.n	8002e54 <HAL_RCC_OscConfig+0x648>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002e42:	f7fe fb21 	bl	8001488 <HAL_GetTick>
 8002e46:	4602      	mov	r2, r0
 8002e48:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002e4a:	1ad3      	subs	r3, r2, r3
 8002e4c:	2b02      	cmp	r3, #2
 8002e4e:	d901      	bls.n	8002e54 <HAL_RCC_OscConfig+0x648>
          {
            return HAL_TIMEOUT;
 8002e50:	2303      	movs	r3, #3
 8002e52:	e05f      	b.n	8002f14 <HAL_RCC_OscConfig+0x708>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8002e54:	4b31      	ldr	r3, [pc, #196]	; (8002f1c <HAL_RCC_OscConfig+0x710>)
 8002e56:	681b      	ldr	r3, [r3, #0]
 8002e58:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002e5c:	2b00      	cmp	r3, #0
 8002e5e:	d0f0      	beq.n	8002e42 <HAL_RCC_OscConfig+0x636>
 8002e60:	e057      	b.n	8002f12 <HAL_RCC_OscConfig+0x706>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002e62:	4b2e      	ldr	r3, [pc, #184]	; (8002f1c <HAL_RCC_OscConfig+0x710>)
 8002e64:	681b      	ldr	r3, [r3, #0]
 8002e66:	4a2d      	ldr	r2, [pc, #180]	; (8002f1c <HAL_RCC_OscConfig+0x710>)
 8002e68:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8002e6c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002e6e:	f7fe fb0b 	bl	8001488 <HAL_GetTick>
 8002e72:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8002e74:	e008      	b.n	8002e88 <HAL_RCC_OscConfig+0x67c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002e76:	f7fe fb07 	bl	8001488 <HAL_GetTick>
 8002e7a:	4602      	mov	r2, r0
 8002e7c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002e7e:	1ad3      	subs	r3, r2, r3
 8002e80:	2b02      	cmp	r3, #2
 8002e82:	d901      	bls.n	8002e88 <HAL_RCC_OscConfig+0x67c>
          {
            return HAL_TIMEOUT;
 8002e84:	2303      	movs	r3, #3
 8002e86:	e045      	b.n	8002f14 <HAL_RCC_OscConfig+0x708>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8002e88:	4b24      	ldr	r3, [pc, #144]	; (8002f1c <HAL_RCC_OscConfig+0x710>)
 8002e8a:	681b      	ldr	r3, [r3, #0]
 8002e8c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002e90:	2b00      	cmp	r3, #0
 8002e92:	d1f0      	bne.n	8002e76 <HAL_RCC_OscConfig+0x66a>
 8002e94:	e03d      	b.n	8002f12 <HAL_RCC_OscConfig+0x706>
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLLCKSELR;
 8002e96:	4b21      	ldr	r3, [pc, #132]	; (8002f1c <HAL_RCC_OscConfig+0x710>)
 8002e98:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002e9a:	613b      	str	r3, [r7, #16]
      temp2_pllckcfg = RCC->PLL1DIVR;
 8002e9c:	4b1f      	ldr	r3, [pc, #124]	; (8002f1c <HAL_RCC_OscConfig+0x710>)
 8002e9e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002ea0:	60fb      	str	r3, [r7, #12]
      if(((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002ea2:	687b      	ldr	r3, [r7, #4]
 8002ea4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002ea6:	2b01      	cmp	r3, #1
 8002ea8:	d031      	beq.n	8002f0e <HAL_RCC_OscConfig+0x702>
	 (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002eaa:	693b      	ldr	r3, [r7, #16]
 8002eac:	f003 0203 	and.w	r2, r3, #3
 8002eb0:	687b      	ldr	r3, [r7, #4]
 8002eb2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
      if(((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002eb4:	429a      	cmp	r2, r3
 8002eb6:	d12a      	bne.n	8002f0e <HAL_RCC_OscConfig+0x702>
         ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8002eb8:	693b      	ldr	r3, [r7, #16]
 8002eba:	091b      	lsrs	r3, r3, #4
 8002ebc:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8002ec0:	687b      	ldr	r3, [r7, #4]
 8002ec2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
	 (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002ec4:	429a      	cmp	r2, r3
 8002ec6:	d122      	bne.n	8002f0e <HAL_RCC_OscConfig+0x702>
         (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8002ec8:	68fb      	ldr	r3, [r7, #12]
 8002eca:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8002ece:	687b      	ldr	r3, [r7, #4]
 8002ed0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002ed2:	3b01      	subs	r3, #1
         ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8002ed4:	429a      	cmp	r2, r3
 8002ed6:	d11a      	bne.n	8002f0e <HAL_RCC_OscConfig+0x702>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8002ed8:	68fb      	ldr	r3, [r7, #12]
 8002eda:	0a5b      	lsrs	r3, r3, #9
 8002edc:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8002ee0:	687b      	ldr	r3, [r7, #4]
 8002ee2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002ee4:	3b01      	subs	r3, #1
         (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8002ee6:	429a      	cmp	r2, r3
 8002ee8:	d111      	bne.n	8002f0e <HAL_RCC_OscConfig+0x702>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8002eea:	68fb      	ldr	r3, [r7, #12]
 8002eec:	0c1b      	lsrs	r3, r3, #16
 8002eee:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8002ef2:	687b      	ldr	r3, [r7, #4]
 8002ef4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002ef6:	3b01      	subs	r3, #1
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8002ef8:	429a      	cmp	r2, r3
 8002efa:	d108      	bne.n	8002f0e <HAL_RCC_OscConfig+0x702>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_R1) >> RCC_PLL1DIVR_R1_Pos) != (RCC_OscInitStruct->PLL.PLLR - 1U)))
 8002efc:	68fb      	ldr	r3, [r7, #12]
 8002efe:	0e1b      	lsrs	r3, r3, #24
 8002f00:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8002f04:	687b      	ldr	r3, [r7, #4]
 8002f06:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002f08:	3b01      	subs	r3, #1
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8002f0a:	429a      	cmp	r2, r3
 8002f0c:	d001      	beq.n	8002f12 <HAL_RCC_OscConfig+0x706>
      {
        return HAL_ERROR;
 8002f0e:	2301      	movs	r3, #1
 8002f10:	e000      	b.n	8002f14 <HAL_RCC_OscConfig+0x708>
      }
    }
  }
  return HAL_OK;
 8002f12:	2300      	movs	r3, #0
}
 8002f14:	4618      	mov	r0, r3
 8002f16:	3730      	adds	r7, #48	; 0x30
 8002f18:	46bd      	mov	sp, r7
 8002f1a:	bd80      	pop	{r7, pc}
 8002f1c:	58024400 	.word	0x58024400
 8002f20:	fffffc0c 	.word	0xfffffc0c
 8002f24:	ffff0007 	.word	0xffff0007

08002f28 <HAL_RCC_ClockConfig>:
  *         D1CPRE[3:0] bits to ensure that  Domain1 core clock not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002f28:	b580      	push	{r7, lr}
 8002f2a:	b086      	sub	sp, #24
 8002f2c:	af00      	add	r7, sp, #0
 8002f2e:	6078      	str	r0, [r7, #4]
 8002f30:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef halstatus;
  uint32_t tickstart;
  uint32_t common_system_clock;

   /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8002f32:	687b      	ldr	r3, [r7, #4]
 8002f34:	2b00      	cmp	r3, #0
 8002f36:	d101      	bne.n	8002f3c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002f38:	2301      	movs	r3, #1
 8002f3a:	e19c      	b.n	8003276 <HAL_RCC_ClockConfig+0x34e>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8002f3c:	4b8a      	ldr	r3, [pc, #552]	; (8003168 <HAL_RCC_ClockConfig+0x240>)
 8002f3e:	681b      	ldr	r3, [r3, #0]
 8002f40:	f003 030f 	and.w	r3, r3, #15
 8002f44:	683a      	ldr	r2, [r7, #0]
 8002f46:	429a      	cmp	r2, r3
 8002f48:	d910      	bls.n	8002f6c <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002f4a:	4b87      	ldr	r3, [pc, #540]	; (8003168 <HAL_RCC_ClockConfig+0x240>)
 8002f4c:	681b      	ldr	r3, [r3, #0]
 8002f4e:	f023 020f 	bic.w	r2, r3, #15
 8002f52:	4985      	ldr	r1, [pc, #532]	; (8003168 <HAL_RCC_ClockConfig+0x240>)
 8002f54:	683b      	ldr	r3, [r7, #0]
 8002f56:	4313      	orrs	r3, r2
 8002f58:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002f5a:	4b83      	ldr	r3, [pc, #524]	; (8003168 <HAL_RCC_ClockConfig+0x240>)
 8002f5c:	681b      	ldr	r3, [r3, #0]
 8002f5e:	f003 030f 	and.w	r3, r3, #15
 8002f62:	683a      	ldr	r2, [r7, #0]
 8002f64:	429a      	cmp	r2, r3
 8002f66:	d001      	beq.n	8002f6c <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8002f68:	2301      	movs	r3, #1
 8002f6a:	e184      	b.n	8003276 <HAL_RCC_ClockConfig+0x34e>

  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- D1PCLK1/CDPCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8002f6c:	687b      	ldr	r3, [r7, #4]
 8002f6e:	681b      	ldr	r3, [r3, #0]
 8002f70:	f003 0304 	and.w	r3, r3, #4
 8002f74:	2b00      	cmp	r3, #0
 8002f76:	d010      	beq.n	8002f9a <HAL_RCC_ClockConfig+0x72>
  {
#if defined (RCC_D1CFGR_D1PPRE)
    if((RCC_ClkInitStruct->APB3CLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8002f78:	687b      	ldr	r3, [r7, #4]
 8002f7a:	691a      	ldr	r2, [r3, #16]
 8002f7c:	4b7b      	ldr	r3, [pc, #492]	; (800316c <HAL_RCC_ClockConfig+0x244>)
 8002f7e:	699b      	ldr	r3, [r3, #24]
 8002f80:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8002f84:	429a      	cmp	r2, r3
 8002f86:	d908      	bls.n	8002f9a <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8002f88:	4b78      	ldr	r3, [pc, #480]	; (800316c <HAL_RCC_ClockConfig+0x244>)
 8002f8a:	699b      	ldr	r3, [r3, #24]
 8002f8c:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8002f90:	687b      	ldr	r3, [r7, #4]
 8002f92:	691b      	ldr	r3, [r3, #16]
 8002f94:	4975      	ldr	r1, [pc, #468]	; (800316c <HAL_RCC_ClockConfig+0x244>)
 8002f96:	4313      	orrs	r3, r2
 8002f98:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002f9a:	687b      	ldr	r3, [r7, #4]
 8002f9c:	681b      	ldr	r3, [r3, #0]
 8002f9e:	f003 0308 	and.w	r3, r3, #8
 8002fa2:	2b00      	cmp	r3, #0
 8002fa4:	d010      	beq.n	8002fc8 <HAL_RCC_ClockConfig+0xa0>
  {
#if defined (RCC_D2CFGR_D2PPRE1)
    if((RCC_ClkInitStruct->APB1CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 8002fa6:	687b      	ldr	r3, [r7, #4]
 8002fa8:	695a      	ldr	r2, [r3, #20]
 8002faa:	4b70      	ldr	r3, [pc, #448]	; (800316c <HAL_RCC_ClockConfig+0x244>)
 8002fac:	69db      	ldr	r3, [r3, #28]
 8002fae:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8002fb2:	429a      	cmp	r2, r3
 8002fb4:	d908      	bls.n	8002fc8 <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 8002fb6:	4b6d      	ldr	r3, [pc, #436]	; (800316c <HAL_RCC_ClockConfig+0x244>)
 8002fb8:	69db      	ldr	r3, [r3, #28]
 8002fba:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8002fbe:	687b      	ldr	r3, [r7, #4]
 8002fc0:	695b      	ldr	r3, [r3, #20]
 8002fc2:	496a      	ldr	r1, [pc, #424]	; (800316c <HAL_RCC_ClockConfig+0x244>)
 8002fc4:	4313      	orrs	r3, r2
 8002fc6:	61cb      	str	r3, [r1, #28]
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
  }
#endif
    }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002fc8:	687b      	ldr	r3, [r7, #4]
 8002fca:	681b      	ldr	r3, [r3, #0]
 8002fcc:	f003 0310 	and.w	r3, r3, #16
 8002fd0:	2b00      	cmp	r3, #0
 8002fd2:	d010      	beq.n	8002ff6 <HAL_RCC_ClockConfig+0xce>
  {
#if defined(RCC_D2CFGR_D2PPRE2)
    if((RCC_ClkInitStruct->APB2CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8002fd4:	687b      	ldr	r3, [r7, #4]
 8002fd6:	699a      	ldr	r2, [r3, #24]
 8002fd8:	4b64      	ldr	r3, [pc, #400]	; (800316c <HAL_RCC_ClockConfig+0x244>)
 8002fda:	69db      	ldr	r3, [r3, #28]
 8002fdc:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8002fe0:	429a      	cmp	r2, r3
 8002fe2:	d908      	bls.n	8002ff6 <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8002fe4:	4b61      	ldr	r3, [pc, #388]	; (800316c <HAL_RCC_ClockConfig+0x244>)
 8002fe6:	69db      	ldr	r3, [r3, #28]
 8002fe8:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8002fec:	687b      	ldr	r3, [r7, #4]
 8002fee:	699b      	ldr	r3, [r3, #24]
 8002ff0:	495e      	ldr	r1, [pc, #376]	; (800316c <HAL_RCC_ClockConfig+0x244>)
 8002ff2:	4313      	orrs	r3, r2
 8002ff4:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 8002ff6:	687b      	ldr	r3, [r7, #4]
 8002ff8:	681b      	ldr	r3, [r3, #0]
 8002ffa:	f003 0320 	and.w	r3, r3, #32
 8002ffe:	2b00      	cmp	r3, #0
 8003000:	d010      	beq.n	8003024 <HAL_RCC_ClockConfig+0xfc>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if((RCC_ClkInitStruct->APB4CLKDivider) > (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 8003002:	687b      	ldr	r3, [r7, #4]
 8003004:	69da      	ldr	r2, [r3, #28]
 8003006:	4b59      	ldr	r3, [pc, #356]	; (800316c <HAL_RCC_ClockConfig+0x244>)
 8003008:	6a1b      	ldr	r3, [r3, #32]
 800300a:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800300e:	429a      	cmp	r2, r3
 8003010:	d908      	bls.n	8003024 <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider) );
 8003012:	4b56      	ldr	r3, [pc, #344]	; (800316c <HAL_RCC_ClockConfig+0x244>)
 8003014:	6a1b      	ldr	r3, [r3, #32]
 8003016:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 800301a:	687b      	ldr	r3, [r7, #4]
 800301c:	69db      	ldr	r3, [r3, #28]
 800301e:	4953      	ldr	r1, [pc, #332]	; (800316c <HAL_RCC_ClockConfig+0x244>)
 8003020:	4313      	orrs	r3, r2
 8003022:	620b      	str	r3, [r1, #32]
    }
#endif
  }

   /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003024:	687b      	ldr	r3, [r7, #4]
 8003026:	681b      	ldr	r3, [r3, #0]
 8003028:	f003 0302 	and.w	r3, r3, #2
 800302c:	2b00      	cmp	r3, #0
 800302e:	d010      	beq.n	8003052 <HAL_RCC_ClockConfig+0x12a>
  {
#if defined (RCC_D1CFGR_HPRE)
    if((RCC_ClkInitStruct->AHBCLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 8003030:	687b      	ldr	r3, [r7, #4]
 8003032:	68da      	ldr	r2, [r3, #12]
 8003034:	4b4d      	ldr	r3, [pc, #308]	; (800316c <HAL_RCC_ClockConfig+0x244>)
 8003036:	699b      	ldr	r3, [r3, #24]
 8003038:	f003 030f 	and.w	r3, r3, #15
 800303c:	429a      	cmp	r2, r3
 800303e:	d908      	bls.n	8003052 <HAL_RCC_ClockConfig+0x12a>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003040:	4b4a      	ldr	r3, [pc, #296]	; (800316c <HAL_RCC_ClockConfig+0x244>)
 8003042:	699b      	ldr	r3, [r3, #24]
 8003044:	f023 020f 	bic.w	r2, r3, #15
 8003048:	687b      	ldr	r3, [r7, #4]
 800304a:	68db      	ldr	r3, [r3, #12]
 800304c:	4947      	ldr	r1, [pc, #284]	; (800316c <HAL_RCC_ClockConfig+0x244>)
 800304e:	4313      	orrs	r3, r2
 8003050:	618b      	str	r3, [r1, #24]
    }
#endif
  }

    /*------------------------- SYSCLK Configuration -------------------------*/
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003052:	687b      	ldr	r3, [r7, #4]
 8003054:	681b      	ldr	r3, [r3, #0]
 8003056:	f003 0301 	and.w	r3, r3, #1
 800305a:	2b00      	cmp	r3, #0
 800305c:	d055      	beq.n	800310a <HAL_RCC_ClockConfig+0x1e2>
    {
      assert_param(IS_RCC_SYSCLK(RCC_ClkInitStruct->SYSCLKDivider));
      assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
#if defined(RCC_D1CFGR_D1CPRE)
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1CPRE, RCC_ClkInitStruct->SYSCLKDivider);
 800305e:	4b43      	ldr	r3, [pc, #268]	; (800316c <HAL_RCC_ClockConfig+0x244>)
 8003060:	699b      	ldr	r3, [r3, #24]
 8003062:	f423 6270 	bic.w	r2, r3, #3840	; 0xf00
 8003066:	687b      	ldr	r3, [r7, #4]
 8003068:	689b      	ldr	r3, [r3, #8]
 800306a:	4940      	ldr	r1, [pc, #256]	; (800316c <HAL_RCC_ClockConfig+0x244>)
 800306c:	4313      	orrs	r3, r2
 800306e:	618b      	str	r3, [r1, #24]
#else
      MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDCPRE, RCC_ClkInitStruct->SYSCLKDivider);
#endif
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003070:	687b      	ldr	r3, [r7, #4]
 8003072:	685b      	ldr	r3, [r3, #4]
 8003074:	2b02      	cmp	r3, #2
 8003076:	d107      	bne.n	8003088 <HAL_RCC_ClockConfig+0x160>
      {
        /* Check the HSE ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8003078:	4b3c      	ldr	r3, [pc, #240]	; (800316c <HAL_RCC_ClockConfig+0x244>)
 800307a:	681b      	ldr	r3, [r3, #0]
 800307c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003080:	2b00      	cmp	r3, #0
 8003082:	d121      	bne.n	80030c8 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 8003084:	2301      	movs	r3, #1
 8003086:	e0f6      	b.n	8003276 <HAL_RCC_ClockConfig+0x34e>
        }
      }
      /* PLL is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8003088:	687b      	ldr	r3, [r7, #4]
 800308a:	685b      	ldr	r3, [r3, #4]
 800308c:	2b03      	cmp	r3, #3
 800308e:	d107      	bne.n	80030a0 <HAL_RCC_ClockConfig+0x178>
      {
        /* Check the PLL ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8003090:	4b36      	ldr	r3, [pc, #216]	; (800316c <HAL_RCC_ClockConfig+0x244>)
 8003092:	681b      	ldr	r3, [r3, #0]
 8003094:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003098:	2b00      	cmp	r3, #0
 800309a:	d115      	bne.n	80030c8 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 800309c:	2301      	movs	r3, #1
 800309e:	e0ea      	b.n	8003276 <HAL_RCC_ClockConfig+0x34e>
        }
      }
      /* CSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 80030a0:	687b      	ldr	r3, [r7, #4]
 80030a2:	685b      	ldr	r3, [r3, #4]
 80030a4:	2b01      	cmp	r3, #1
 80030a6:	d107      	bne.n	80030b8 <HAL_RCC_ClockConfig+0x190>
      {
        /* Check the PLL ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 80030a8:	4b30      	ldr	r3, [pc, #192]	; (800316c <HAL_RCC_ClockConfig+0x244>)
 80030aa:	681b      	ldr	r3, [r3, #0]
 80030ac:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80030b0:	2b00      	cmp	r3, #0
 80030b2:	d109      	bne.n	80030c8 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 80030b4:	2301      	movs	r3, #1
 80030b6:	e0de      	b.n	8003276 <HAL_RCC_ClockConfig+0x34e>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80030b8:	4b2c      	ldr	r3, [pc, #176]	; (800316c <HAL_RCC_ClockConfig+0x244>)
 80030ba:	681b      	ldr	r3, [r3, #0]
 80030bc:	f003 0304 	and.w	r3, r3, #4
 80030c0:	2b00      	cmp	r3, #0
 80030c2:	d101      	bne.n	80030c8 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 80030c4:	2301      	movs	r3, #1
 80030c6:	e0d6      	b.n	8003276 <HAL_RCC_ClockConfig+0x34e>
        }
      }
      MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 80030c8:	4b28      	ldr	r3, [pc, #160]	; (800316c <HAL_RCC_ClockConfig+0x244>)
 80030ca:	691b      	ldr	r3, [r3, #16]
 80030cc:	f023 0207 	bic.w	r2, r3, #7
 80030d0:	687b      	ldr	r3, [r7, #4]
 80030d2:	685b      	ldr	r3, [r3, #4]
 80030d4:	4925      	ldr	r1, [pc, #148]	; (800316c <HAL_RCC_ClockConfig+0x244>)
 80030d6:	4313      	orrs	r3, r2
 80030d8:	610b      	str	r3, [r1, #16]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80030da:	f7fe f9d5 	bl	8001488 <HAL_GetTick>
 80030de:	6178      	str	r0, [r7, #20]

        while (__HAL_RCC_GET_SYSCLK_SOURCE() !=  (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80030e0:	e00a      	b.n	80030f8 <HAL_RCC_ClockConfig+0x1d0>
        {
          if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 80030e2:	f7fe f9d1 	bl	8001488 <HAL_GetTick>
 80030e6:	4602      	mov	r2, r0
 80030e8:	697b      	ldr	r3, [r7, #20]
 80030ea:	1ad3      	subs	r3, r2, r3
 80030ec:	f241 3288 	movw	r2, #5000	; 0x1388
 80030f0:	4293      	cmp	r3, r2
 80030f2:	d901      	bls.n	80030f8 <HAL_RCC_ClockConfig+0x1d0>
          {
            return HAL_TIMEOUT;
 80030f4:	2303      	movs	r3, #3
 80030f6:	e0be      	b.n	8003276 <HAL_RCC_ClockConfig+0x34e>
        while (__HAL_RCC_GET_SYSCLK_SOURCE() !=  (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80030f8:	4b1c      	ldr	r3, [pc, #112]	; (800316c <HAL_RCC_ClockConfig+0x244>)
 80030fa:	691b      	ldr	r3, [r3, #16]
 80030fc:	f003 0238 	and.w	r2, r3, #56	; 0x38
 8003100:	687b      	ldr	r3, [r7, #4]
 8003102:	685b      	ldr	r3, [r3, #4]
 8003104:	00db      	lsls	r3, r3, #3
 8003106:	429a      	cmp	r2, r3
 8003108:	d1eb      	bne.n	80030e2 <HAL_RCC_ClockConfig+0x1ba>

    }

    /* Decreasing the BUS frequency divider */
   /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800310a:	687b      	ldr	r3, [r7, #4]
 800310c:	681b      	ldr	r3, [r3, #0]
 800310e:	f003 0302 	and.w	r3, r3, #2
 8003112:	2b00      	cmp	r3, #0
 8003114:	d010      	beq.n	8003138 <HAL_RCC_ClockConfig+0x210>
  {
#if defined(RCC_D1CFGR_HPRE)
    if((RCC_ClkInitStruct->AHBCLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 8003116:	687b      	ldr	r3, [r7, #4]
 8003118:	68da      	ldr	r2, [r3, #12]
 800311a:	4b14      	ldr	r3, [pc, #80]	; (800316c <HAL_RCC_ClockConfig+0x244>)
 800311c:	699b      	ldr	r3, [r3, #24]
 800311e:	f003 030f 	and.w	r3, r3, #15
 8003122:	429a      	cmp	r2, r3
 8003124:	d208      	bcs.n	8003138 <HAL_RCC_ClockConfig+0x210>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003126:	4b11      	ldr	r3, [pc, #68]	; (800316c <HAL_RCC_ClockConfig+0x244>)
 8003128:	699b      	ldr	r3, [r3, #24]
 800312a:	f023 020f 	bic.w	r2, r3, #15
 800312e:	687b      	ldr	r3, [r7, #4]
 8003130:	68db      	ldr	r3, [r3, #12]
 8003132:	490e      	ldr	r1, [pc, #56]	; (800316c <HAL_RCC_ClockConfig+0x244>)
 8003134:	4313      	orrs	r3, r2
 8003136:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8003138:	4b0b      	ldr	r3, [pc, #44]	; (8003168 <HAL_RCC_ClockConfig+0x240>)
 800313a:	681b      	ldr	r3, [r3, #0]
 800313c:	f003 030f 	and.w	r3, r3, #15
 8003140:	683a      	ldr	r2, [r7, #0]
 8003142:	429a      	cmp	r2, r3
 8003144:	d214      	bcs.n	8003170 <HAL_RCC_ClockConfig+0x248>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003146:	4b08      	ldr	r3, [pc, #32]	; (8003168 <HAL_RCC_ClockConfig+0x240>)
 8003148:	681b      	ldr	r3, [r3, #0]
 800314a:	f023 020f 	bic.w	r2, r3, #15
 800314e:	4906      	ldr	r1, [pc, #24]	; (8003168 <HAL_RCC_ClockConfig+0x240>)
 8003150:	683b      	ldr	r3, [r7, #0]
 8003152:	4313      	orrs	r3, r2
 8003154:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003156:	4b04      	ldr	r3, [pc, #16]	; (8003168 <HAL_RCC_ClockConfig+0x240>)
 8003158:	681b      	ldr	r3, [r3, #0]
 800315a:	f003 030f 	and.w	r3, r3, #15
 800315e:	683a      	ldr	r2, [r7, #0]
 8003160:	429a      	cmp	r2, r3
 8003162:	d005      	beq.n	8003170 <HAL_RCC_ClockConfig+0x248>
    {
      return HAL_ERROR;
 8003164:	2301      	movs	r3, #1
 8003166:	e086      	b.n	8003276 <HAL_RCC_ClockConfig+0x34e>
 8003168:	52002000 	.word	0x52002000
 800316c:	58024400 	.word	0x58024400
    }
 }

  /*-------------------------- D1PCLK1/CDPCLK Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8003170:	687b      	ldr	r3, [r7, #4]
 8003172:	681b      	ldr	r3, [r3, #0]
 8003174:	f003 0304 	and.w	r3, r3, #4
 8003178:	2b00      	cmp	r3, #0
 800317a:	d010      	beq.n	800319e <HAL_RCC_ClockConfig+0x276>
 {
#if defined(RCC_D1CFGR_D1PPRE)
   if((RCC_ClkInitStruct->APB3CLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 800317c:	687b      	ldr	r3, [r7, #4]
 800317e:	691a      	ldr	r2, [r3, #16]
 8003180:	4b3f      	ldr	r3, [pc, #252]	; (8003280 <HAL_RCC_ClockConfig+0x358>)
 8003182:	699b      	ldr	r3, [r3, #24]
 8003184:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8003188:	429a      	cmp	r2, r3
 800318a:	d208      	bcs.n	800319e <HAL_RCC_ClockConfig+0x276>
   {
     assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
     MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 800318c:	4b3c      	ldr	r3, [pc, #240]	; (8003280 <HAL_RCC_ClockConfig+0x358>)
 800318e:	699b      	ldr	r3, [r3, #24]
 8003190:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8003194:	687b      	ldr	r3, [r7, #4]
 8003196:	691b      	ldr	r3, [r3, #16]
 8003198:	4939      	ldr	r1, [pc, #228]	; (8003280 <HAL_RCC_ClockConfig+0x358>)
 800319a:	4313      	orrs	r3, r2
 800319c:	618b      	str	r3, [r1, #24]
   }
#endif
 }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800319e:	687b      	ldr	r3, [r7, #4]
 80031a0:	681b      	ldr	r3, [r3, #0]
 80031a2:	f003 0308 	and.w	r3, r3, #8
 80031a6:	2b00      	cmp	r3, #0
 80031a8:	d010      	beq.n	80031cc <HAL_RCC_ClockConfig+0x2a4>
 {
#if defined(RCC_D2CFGR_D2PPRE1)
   if((RCC_ClkInitStruct->APB1CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 80031aa:	687b      	ldr	r3, [r7, #4]
 80031ac:	695a      	ldr	r2, [r3, #20]
 80031ae:	4b34      	ldr	r3, [pc, #208]	; (8003280 <HAL_RCC_ClockConfig+0x358>)
 80031b0:	69db      	ldr	r3, [r3, #28]
 80031b2:	f003 0370 	and.w	r3, r3, #112	; 0x70
 80031b6:	429a      	cmp	r2, r3
 80031b8:	d208      	bcs.n	80031cc <HAL_RCC_ClockConfig+0x2a4>
   {
     assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
     MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 80031ba:	4b31      	ldr	r3, [pc, #196]	; (8003280 <HAL_RCC_ClockConfig+0x358>)
 80031bc:	69db      	ldr	r3, [r3, #28]
 80031be:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 80031c2:	687b      	ldr	r3, [r7, #4]
 80031c4:	695b      	ldr	r3, [r3, #20]
 80031c6:	492e      	ldr	r1, [pc, #184]	; (8003280 <HAL_RCC_ClockConfig+0x358>)
 80031c8:	4313      	orrs	r3, r2
 80031ca:	61cb      	str	r3, [r1, #28]
   }
#endif
 }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80031cc:	687b      	ldr	r3, [r7, #4]
 80031ce:	681b      	ldr	r3, [r3, #0]
 80031d0:	f003 0310 	and.w	r3, r3, #16
 80031d4:	2b00      	cmp	r3, #0
 80031d6:	d010      	beq.n	80031fa <HAL_RCC_ClockConfig+0x2d2>
 {
#if defined (RCC_D2CFGR_D2PPRE2)
   if((RCC_ClkInitStruct->APB2CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 80031d8:	687b      	ldr	r3, [r7, #4]
 80031da:	699a      	ldr	r2, [r3, #24]
 80031dc:	4b28      	ldr	r3, [pc, #160]	; (8003280 <HAL_RCC_ClockConfig+0x358>)
 80031de:	69db      	ldr	r3, [r3, #28]
 80031e0:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 80031e4:	429a      	cmp	r2, r3
 80031e6:	d208      	bcs.n	80031fa <HAL_RCC_ClockConfig+0x2d2>
   {
     assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
     MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 80031e8:	4b25      	ldr	r3, [pc, #148]	; (8003280 <HAL_RCC_ClockConfig+0x358>)
 80031ea:	69db      	ldr	r3, [r3, #28]
 80031ec:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80031f0:	687b      	ldr	r3, [r7, #4]
 80031f2:	699b      	ldr	r3, [r3, #24]
 80031f4:	4922      	ldr	r1, [pc, #136]	; (8003280 <HAL_RCC_ClockConfig+0x358>)
 80031f6:	4313      	orrs	r3, r2
 80031f8:	61cb      	str	r3, [r1, #28]
   }
#endif
 }

  /*-------------------------- D3PCLK1/SRDPCLK1 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 80031fa:	687b      	ldr	r3, [r7, #4]
 80031fc:	681b      	ldr	r3, [r3, #0]
 80031fe:	f003 0320 	and.w	r3, r3, #32
 8003202:	2b00      	cmp	r3, #0
 8003204:	d010      	beq.n	8003228 <HAL_RCC_ClockConfig+0x300>
 {
#if defined(RCC_D3CFGR_D3PPRE)
   if((RCC_ClkInitStruct->APB4CLKDivider) < (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 8003206:	687b      	ldr	r3, [r7, #4]
 8003208:	69da      	ldr	r2, [r3, #28]
 800320a:	4b1d      	ldr	r3, [pc, #116]	; (8003280 <HAL_RCC_ClockConfig+0x358>)
 800320c:	6a1b      	ldr	r3, [r3, #32]
 800320e:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8003212:	429a      	cmp	r2, r3
 8003214:	d208      	bcs.n	8003228 <HAL_RCC_ClockConfig+0x300>
   {
     assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
     MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider) );
 8003216:	4b1a      	ldr	r3, [pc, #104]	; (8003280 <HAL_RCC_ClockConfig+0x358>)
 8003218:	6a1b      	ldr	r3, [r3, #32]
 800321a:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 800321e:	687b      	ldr	r3, [r7, #4]
 8003220:	69db      	ldr	r3, [r3, #28]
 8003222:	4917      	ldr	r1, [pc, #92]	; (8003280 <HAL_RCC_ClockConfig+0x358>)
 8003224:	4313      	orrs	r3, r2
 8003226:	620b      	str	r3, [r1, #32]
#endif
 }

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8003228:	f000 f834 	bl	8003294 <HAL_RCC_GetSysClockFreq>
 800322c:	4602      	mov	r2, r0
 800322e:	4b14      	ldr	r3, [pc, #80]	; (8003280 <HAL_RCC_ClockConfig+0x358>)
 8003230:	699b      	ldr	r3, [r3, #24]
 8003232:	0a1b      	lsrs	r3, r3, #8
 8003234:	f003 030f 	and.w	r3, r3, #15
 8003238:	4912      	ldr	r1, [pc, #72]	; (8003284 <HAL_RCC_ClockConfig+0x35c>)
 800323a:	5ccb      	ldrb	r3, [r1, r3]
 800323c:	f003 031f 	and.w	r3, r3, #31
 8003240:	fa22 f303 	lsr.w	r3, r2, r3
 8003244:	613b      	str	r3, [r7, #16]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8003246:	4b0e      	ldr	r3, [pc, #56]	; (8003280 <HAL_RCC_ClockConfig+0x358>)
 8003248:	699b      	ldr	r3, [r3, #24]
 800324a:	f003 030f 	and.w	r3, r3, #15
 800324e:	4a0d      	ldr	r2, [pc, #52]	; (8003284 <HAL_RCC_ClockConfig+0x35c>)
 8003250:	5cd3      	ldrb	r3, [r2, r3]
 8003252:	f003 031f 	and.w	r3, r3, #31
 8003256:	693a      	ldr	r2, [r7, #16]
 8003258:	fa22 f303 	lsr.w	r3, r2, r3
 800325c:	4a0a      	ldr	r2, [pc, #40]	; (8003288 <HAL_RCC_ClockConfig+0x360>)
 800325e:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8003260:	4a0a      	ldr	r2, [pc, #40]	; (800328c <HAL_RCC_ClockConfig+0x364>)
 8003262:	693b      	ldr	r3, [r7, #16]
 8003264:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Configure the source of time base considering new system clocks settings*/
  halstatus = HAL_InitTick (uwTickPrio);
 8003266:	4b0a      	ldr	r3, [pc, #40]	; (8003290 <HAL_RCC_ClockConfig+0x368>)
 8003268:	681b      	ldr	r3, [r3, #0]
 800326a:	4618      	mov	r0, r3
 800326c:	f7fe f8c2 	bl	80013f4 <HAL_InitTick>
 8003270:	4603      	mov	r3, r0
 8003272:	73fb      	strb	r3, [r7, #15]

  return halstatus;
 8003274:	7bfb      	ldrb	r3, [r7, #15]
}
 8003276:	4618      	mov	r0, r3
 8003278:	3718      	adds	r7, #24
 800327a:	46bd      	mov	sp, r7
 800327c:	bd80      	pop	{r7, pc}
 800327e:	bf00      	nop
 8003280:	58024400 	.word	0x58024400
 8003284:	08007dec 	.word	0x08007dec
 8003288:	20000004 	.word	0x20000004
 800328c:	20000000 	.word	0x20000000
 8003290:	20000008 	.word	0x20000008

08003294 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003294:	b480      	push	{r7}
 8003296:	b089      	sub	sp, #36	; 0x24
 8003298:	af00      	add	r7, sp, #0
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 800329a:	4bb3      	ldr	r3, [pc, #716]	; (8003568 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800329c:	691b      	ldr	r3, [r3, #16]
 800329e:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80032a2:	2b18      	cmp	r3, #24
 80032a4:	f200 8155 	bhi.w	8003552 <HAL_RCC_GetSysClockFreq+0x2be>
 80032a8:	a201      	add	r2, pc, #4	; (adr r2, 80032b0 <HAL_RCC_GetSysClockFreq+0x1c>)
 80032aa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80032ae:	bf00      	nop
 80032b0:	08003315 	.word	0x08003315
 80032b4:	08003553 	.word	0x08003553
 80032b8:	08003553 	.word	0x08003553
 80032bc:	08003553 	.word	0x08003553
 80032c0:	08003553 	.word	0x08003553
 80032c4:	08003553 	.word	0x08003553
 80032c8:	08003553 	.word	0x08003553
 80032cc:	08003553 	.word	0x08003553
 80032d0:	0800333b 	.word	0x0800333b
 80032d4:	08003553 	.word	0x08003553
 80032d8:	08003553 	.word	0x08003553
 80032dc:	08003553 	.word	0x08003553
 80032e0:	08003553 	.word	0x08003553
 80032e4:	08003553 	.word	0x08003553
 80032e8:	08003553 	.word	0x08003553
 80032ec:	08003553 	.word	0x08003553
 80032f0:	08003341 	.word	0x08003341
 80032f4:	08003553 	.word	0x08003553
 80032f8:	08003553 	.word	0x08003553
 80032fc:	08003553 	.word	0x08003553
 8003300:	08003553 	.word	0x08003553
 8003304:	08003553 	.word	0x08003553
 8003308:	08003553 	.word	0x08003553
 800330c:	08003553 	.word	0x08003553
 8003310:	08003347 	.word	0x08003347
  {
  case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */

   if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8003314:	4b94      	ldr	r3, [pc, #592]	; (8003568 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003316:	681b      	ldr	r3, [r3, #0]
 8003318:	f003 0320 	and.w	r3, r3, #32
 800331c:	2b00      	cmp	r3, #0
 800331e:	d009      	beq.n	8003334 <HAL_RCC_GetSysClockFreq+0xa0>
      {
        sysclockfreq = (uint32_t) (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8003320:	4b91      	ldr	r3, [pc, #580]	; (8003568 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003322:	681b      	ldr	r3, [r3, #0]
 8003324:	08db      	lsrs	r3, r3, #3
 8003326:	f003 0303 	and.w	r3, r3, #3
 800332a:	4a90      	ldr	r2, [pc, #576]	; (800356c <HAL_RCC_GetSysClockFreq+0x2d8>)
 800332c:	fa22 f303 	lsr.w	r3, r2, r3
 8003330:	61bb      	str	r3, [r7, #24]
      else
      {
        sysclockfreq = (uint32_t) HSI_VALUE;
      }

    break;
 8003332:	e111      	b.n	8003558 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = (uint32_t) HSI_VALUE;
 8003334:	4b8d      	ldr	r3, [pc, #564]	; (800356c <HAL_RCC_GetSysClockFreq+0x2d8>)
 8003336:	61bb      	str	r3, [r7, #24]
    break;
 8003338:	e10e      	b.n	8003558 <HAL_RCC_GetSysClockFreq+0x2c4>

  case RCC_CFGR_SWS_CSI:  /* CSI used as system clock  source */
    sysclockfreq = CSI_VALUE;
 800333a:	4b8d      	ldr	r3, [pc, #564]	; (8003570 <HAL_RCC_GetSysClockFreq+0x2dc>)
 800333c:	61bb      	str	r3, [r7, #24]
    break;
 800333e:	e10b      	b.n	8003558 <HAL_RCC_GetSysClockFreq+0x2c4>

  case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    sysclockfreq = HSE_VALUE;
 8003340:	4b8c      	ldr	r3, [pc, #560]	; (8003574 <HAL_RCC_GetSysClockFreq+0x2e0>)
 8003342:	61bb      	str	r3, [r7, #24]
    break;
 8003344:	e108      	b.n	8003558 <HAL_RCC_GetSysClockFreq+0x2c4>
  case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8003346:	4b88      	ldr	r3, [pc, #544]	; (8003568 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003348:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800334a:	f003 0303 	and.w	r3, r3, #3
 800334e:	617b      	str	r3, [r7, #20]
    pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1)>> 4)  ;
 8003350:	4b85      	ldr	r3, [pc, #532]	; (8003568 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003352:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003354:	091b      	lsrs	r3, r3, #4
 8003356:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800335a:	613b      	str	r3, [r7, #16]
    pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN)>>RCC_PLLCFGR_PLL1FRACEN_Pos);
 800335c:	4b82      	ldr	r3, [pc, #520]	; (8003568 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800335e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003360:	f003 0301 	and.w	r3, r3, #1
 8003364:	60fb      	str	r3, [r7, #12]
    fracn1 = (float_t)(uint32_t)(pllfracen* ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1)>> 3));
 8003366:	4b80      	ldr	r3, [pc, #512]	; (8003568 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003368:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800336a:	08db      	lsrs	r3, r3, #3
 800336c:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8003370:	68fa      	ldr	r2, [r7, #12]
 8003372:	fb02 f303 	mul.w	r3, r2, r3
 8003376:	ee07 3a90 	vmov	s15, r3
 800337a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800337e:	edc7 7a02 	vstr	s15, [r7, #8]

    if (pllm != 0U)
 8003382:	693b      	ldr	r3, [r7, #16]
 8003384:	2b00      	cmp	r3, #0
 8003386:	f000 80e1 	beq.w	800354c <HAL_RCC_GetSysClockFreq+0x2b8>
 800338a:	697b      	ldr	r3, [r7, #20]
 800338c:	2b02      	cmp	r3, #2
 800338e:	f000 8083 	beq.w	8003498 <HAL_RCC_GetSysClockFreq+0x204>
 8003392:	697b      	ldr	r3, [r7, #20]
 8003394:	2b02      	cmp	r3, #2
 8003396:	f200 80a1 	bhi.w	80034dc <HAL_RCC_GetSysClockFreq+0x248>
 800339a:	697b      	ldr	r3, [r7, #20]
 800339c:	2b00      	cmp	r3, #0
 800339e:	d003      	beq.n	80033a8 <HAL_RCC_GetSysClockFreq+0x114>
 80033a0:	697b      	ldr	r3, [r7, #20]
 80033a2:	2b01      	cmp	r3, #1
 80033a4:	d056      	beq.n	8003454 <HAL_RCC_GetSysClockFreq+0x1c0>
 80033a6:	e099      	b.n	80034dc <HAL_RCC_GetSysClockFreq+0x248>
    {
      switch (pllsource)
      {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

       if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80033a8:	4b6f      	ldr	r3, [pc, #444]	; (8003568 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80033aa:	681b      	ldr	r3, [r3, #0]
 80033ac:	f003 0320 	and.w	r3, r3, #32
 80033b0:	2b00      	cmp	r3, #0
 80033b2:	d02d      	beq.n	8003410 <HAL_RCC_GetSysClockFreq+0x17c>
        {
          hsivalue= (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 80033b4:	4b6c      	ldr	r3, [pc, #432]	; (8003568 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80033b6:	681b      	ldr	r3, [r3, #0]
 80033b8:	08db      	lsrs	r3, r3, #3
 80033ba:	f003 0303 	and.w	r3, r3, #3
 80033be:	4a6b      	ldr	r2, [pc, #428]	; (800356c <HAL_RCC_GetSysClockFreq+0x2d8>)
 80033c0:	fa22 f303 	lsr.w	r3, r2, r3
 80033c4:	607b      	str	r3, [r7, #4]
          pllvco = ( (float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 80033c6:	687b      	ldr	r3, [r7, #4]
 80033c8:	ee07 3a90 	vmov	s15, r3
 80033cc:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80033d0:	693b      	ldr	r3, [r7, #16]
 80033d2:	ee07 3a90 	vmov	s15, r3
 80033d6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80033da:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80033de:	4b62      	ldr	r3, [pc, #392]	; (8003568 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80033e0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80033e2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80033e6:	ee07 3a90 	vmov	s15, r3
 80033ea:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80033ee:	ed97 6a02 	vldr	s12, [r7, #8]
 80033f2:	eddf 5a61 	vldr	s11, [pc, #388]	; 8003578 <HAL_RCC_GetSysClockFreq+0x2e4>
 80033f6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80033fa:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80033fe:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8003402:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8003406:	ee67 7a27 	vmul.f32	s15, s14, s15
 800340a:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
        }
        break;
 800340e:	e087      	b.n	8003520 <HAL_RCC_GetSysClockFreq+0x28c>
          pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8003410:	693b      	ldr	r3, [r7, #16]
 8003412:	ee07 3a90 	vmov	s15, r3
 8003416:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800341a:	eddf 6a58 	vldr	s13, [pc, #352]	; 800357c <HAL_RCC_GetSysClockFreq+0x2e8>
 800341e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8003422:	4b51      	ldr	r3, [pc, #324]	; (8003568 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003424:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003426:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800342a:	ee07 3a90 	vmov	s15, r3
 800342e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003432:	ed97 6a02 	vldr	s12, [r7, #8]
 8003436:	eddf 5a50 	vldr	s11, [pc, #320]	; 8003578 <HAL_RCC_GetSysClockFreq+0x2e4>
 800343a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800343e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8003442:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8003446:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800344a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800344e:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8003452:	e065      	b.n	8003520 <HAL_RCC_GetSysClockFreq+0x28c>

      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8003454:	693b      	ldr	r3, [r7, #16]
 8003456:	ee07 3a90 	vmov	s15, r3
 800345a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800345e:	eddf 6a48 	vldr	s13, [pc, #288]	; 8003580 <HAL_RCC_GetSysClockFreq+0x2ec>
 8003462:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8003466:	4b40      	ldr	r3, [pc, #256]	; (8003568 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003468:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800346a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800346e:	ee07 3a90 	vmov	s15, r3
 8003472:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003476:	ed97 6a02 	vldr	s12, [r7, #8]
 800347a:	eddf 5a3f 	vldr	s11, [pc, #252]	; 8003578 <HAL_RCC_GetSysClockFreq+0x2e4>
 800347e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8003482:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8003486:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800348a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800348e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003492:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8003496:	e043      	b.n	8003520 <HAL_RCC_GetSysClockFreq+0x28c>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8003498:	693b      	ldr	r3, [r7, #16]
 800349a:	ee07 3a90 	vmov	s15, r3
 800349e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80034a2:	eddf 6a38 	vldr	s13, [pc, #224]	; 8003584 <HAL_RCC_GetSysClockFreq+0x2f0>
 80034a6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80034aa:	4b2f      	ldr	r3, [pc, #188]	; (8003568 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80034ac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80034ae:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80034b2:	ee07 3a90 	vmov	s15, r3
 80034b6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80034ba:	ed97 6a02 	vldr	s12, [r7, #8]
 80034be:	eddf 5a2e 	vldr	s11, [pc, #184]	; 8003578 <HAL_RCC_GetSysClockFreq+0x2e4>
 80034c2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80034c6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80034ca:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80034ce:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80034d2:	ee67 7a27 	vmul.f32	s15, s14, s15
 80034d6:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80034da:	e021      	b.n	8003520 <HAL_RCC_GetSysClockFreq+0x28c>

      default:
        pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 80034dc:	693b      	ldr	r3, [r7, #16]
 80034de:	ee07 3a90 	vmov	s15, r3
 80034e2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80034e6:	eddf 6a26 	vldr	s13, [pc, #152]	; 8003580 <HAL_RCC_GetSysClockFreq+0x2ec>
 80034ea:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80034ee:	4b1e      	ldr	r3, [pc, #120]	; (8003568 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80034f0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80034f2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80034f6:	ee07 3a90 	vmov	s15, r3
 80034fa:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80034fe:	ed97 6a02 	vldr	s12, [r7, #8]
 8003502:	eddf 5a1d 	vldr	s11, [pc, #116]	; 8003578 <HAL_RCC_GetSysClockFreq+0x2e4>
 8003506:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800350a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800350e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8003512:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8003516:	ee67 7a27 	vmul.f32	s15, s14, s15
 800351a:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800351e:	bf00      	nop
      }
      pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >>9) + 1U ) ;
 8003520:	4b11      	ldr	r3, [pc, #68]	; (8003568 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003522:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003524:	0a5b      	lsrs	r3, r3, #9
 8003526:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800352a:	3301      	adds	r3, #1
 800352c:	603b      	str	r3, [r7, #0]
      sysclockfreq =  (uint32_t)(float_t)(pllvco/(float_t)pllp);
 800352e:	683b      	ldr	r3, [r7, #0]
 8003530:	ee07 3a90 	vmov	s15, r3
 8003534:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8003538:	edd7 6a07 	vldr	s13, [r7, #28]
 800353c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8003540:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8003544:	ee17 3a90 	vmov	r3, s15
 8003548:	61bb      	str	r3, [r7, #24]
    }
    else
    {
      sysclockfreq = 0U;
    }
    break;
 800354a:	e005      	b.n	8003558 <HAL_RCC_GetSysClockFreq+0x2c4>
      sysclockfreq = 0U;
 800354c:	2300      	movs	r3, #0
 800354e:	61bb      	str	r3, [r7, #24]
    break;
 8003550:	e002      	b.n	8003558 <HAL_RCC_GetSysClockFreq+0x2c4>

  default:
    sysclockfreq = CSI_VALUE;
 8003552:	4b07      	ldr	r3, [pc, #28]	; (8003570 <HAL_RCC_GetSysClockFreq+0x2dc>)
 8003554:	61bb      	str	r3, [r7, #24]
    break;
 8003556:	bf00      	nop
  }

  return sysclockfreq;
 8003558:	69bb      	ldr	r3, [r7, #24]
}
 800355a:	4618      	mov	r0, r3
 800355c:	3724      	adds	r7, #36	; 0x24
 800355e:	46bd      	mov	sp, r7
 8003560:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003564:	4770      	bx	lr
 8003566:	bf00      	nop
 8003568:	58024400 	.word	0x58024400
 800356c:	03d09000 	.word	0x03d09000
 8003570:	003d0900 	.word	0x003d0900
 8003574:	007a1200 	.word	0x007a1200
 8003578:	46000000 	.word	0x46000000
 800357c:	4c742400 	.word	0x4c742400
 8003580:	4a742400 	.word	0x4a742400
 8003584:	4af42400 	.word	0x4af42400

08003588 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemD2Clock CMSIS variable is used to store System domain2 Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003588:	b580      	push	{r7, lr}
 800358a:	b082      	sub	sp, #8
 800358c:	af00      	add	r7, sp, #0
uint32_t common_system_clock;

#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 800358e:	f7ff fe81 	bl	8003294 <HAL_RCC_GetSysClockFreq>
 8003592:	4602      	mov	r2, r0
 8003594:	4b10      	ldr	r3, [pc, #64]	; (80035d8 <HAL_RCC_GetHCLKFreq+0x50>)
 8003596:	699b      	ldr	r3, [r3, #24]
 8003598:	0a1b      	lsrs	r3, r3, #8
 800359a:	f003 030f 	and.w	r3, r3, #15
 800359e:	490f      	ldr	r1, [pc, #60]	; (80035dc <HAL_RCC_GetHCLKFreq+0x54>)
 80035a0:	5ccb      	ldrb	r3, [r1, r3]
 80035a2:	f003 031f 	and.w	r3, r3, #31
 80035a6:	fa22 f303 	lsr.w	r3, r2, r3
 80035aa:	607b      	str	r3, [r7, #4]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos] & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 80035ac:	4b0a      	ldr	r3, [pc, #40]	; (80035d8 <HAL_RCC_GetHCLKFreq+0x50>)
 80035ae:	699b      	ldr	r3, [r3, #24]
 80035b0:	f003 030f 	and.w	r3, r3, #15
 80035b4:	4a09      	ldr	r2, [pc, #36]	; (80035dc <HAL_RCC_GetHCLKFreq+0x54>)
 80035b6:	5cd3      	ldrb	r3, [r2, r3]
 80035b8:	f003 031f 	and.w	r3, r3, #31
 80035bc:	687a      	ldr	r2, [r7, #4]
 80035be:	fa22 f303 	lsr.w	r3, r2, r3
 80035c2:	4a07      	ldr	r2, [pc, #28]	; (80035e0 <HAL_RCC_GetHCLKFreq+0x58>)
 80035c4:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 80035c6:	4a07      	ldr	r2, [pc, #28]	; (80035e4 <HAL_RCC_GetHCLKFreq+0x5c>)
 80035c8:	687b      	ldr	r3, [r7, #4]
 80035ca:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  return SystemD2Clock;
 80035cc:	4b04      	ldr	r3, [pc, #16]	; (80035e0 <HAL_RCC_GetHCLKFreq+0x58>)
 80035ce:	681b      	ldr	r3, [r3, #0]
}
 80035d0:	4618      	mov	r0, r3
 80035d2:	3708      	adds	r7, #8
 80035d4:	46bd      	mov	sp, r7
 80035d6:	bd80      	pop	{r7, pc}
 80035d8:	58024400 	.word	0x58024400
 80035dc:	08007dec 	.word	0x08007dec
 80035e0:	20000004 	.word	0x20000004
 80035e4:	20000000 	.word	0x20000000

080035e8 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80035e8:	b580      	push	{r7, lr}
 80035ea:	af00      	add	r7, sp, #0
#if defined (RCC_D2CFGR_D2PPRE1)
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1)>> RCC_D2CFGR_D2PPRE1_Pos]) & 0x1FU));
 80035ec:	f7ff ffcc 	bl	8003588 <HAL_RCC_GetHCLKFreq>
 80035f0:	4602      	mov	r2, r0
 80035f2:	4b06      	ldr	r3, [pc, #24]	; (800360c <HAL_RCC_GetPCLK1Freq+0x24>)
 80035f4:	69db      	ldr	r3, [r3, #28]
 80035f6:	091b      	lsrs	r3, r3, #4
 80035f8:	f003 0307 	and.w	r3, r3, #7
 80035fc:	4904      	ldr	r1, [pc, #16]	; (8003610 <HAL_RCC_GetPCLK1Freq+0x28>)
 80035fe:	5ccb      	ldrb	r3, [r1, r3]
 8003600:	f003 031f 	and.w	r3, r3, #31
 8003604:	fa22 f303 	lsr.w	r3, r2, r3
#else
 /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1)>> RCC_CDCFGR2_CDPPRE1_Pos]) & 0x1FU));
#endif
}
 8003608:	4618      	mov	r0, r3
 800360a:	bd80      	pop	{r7, pc}
 800360c:	58024400 	.word	0x58024400
 8003610:	08007dec 	.word	0x08007dec

08003614 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003614:	b580      	push	{r7, lr}
 8003616:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
#if defined(RCC_D2CFGR_D2PPRE2)
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2)>> RCC_D2CFGR_D2PPRE2_Pos]) & 0x1FU));
 8003618:	f7ff ffb6 	bl	8003588 <HAL_RCC_GetHCLKFreq>
 800361c:	4602      	mov	r2, r0
 800361e:	4b06      	ldr	r3, [pc, #24]	; (8003638 <HAL_RCC_GetPCLK2Freq+0x24>)
 8003620:	69db      	ldr	r3, [r3, #28]
 8003622:	0a1b      	lsrs	r3, r3, #8
 8003624:	f003 0307 	and.w	r3, r3, #7
 8003628:	4904      	ldr	r1, [pc, #16]	; (800363c <HAL_RCC_GetPCLK2Freq+0x28>)
 800362a:	5ccb      	ldrb	r3, [r1, r3]
 800362c:	f003 031f 	and.w	r3, r3, #31
 8003630:	fa22 f303 	lsr.w	r3, r2, r3
#else
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2)>> RCC_CDCFGR2_CDPPRE2_Pos]) & 0x1FU));
#endif
}
 8003634:	4618      	mov	r0, r3
 8003636:	bd80      	pop	{r7, pc}
 8003638:	58024400 	.word	0x58024400
 800363c:	08007dec 	.word	0x08007dec

08003640 <HAL_RCCEx_PeriphCLKConfig>:
  * (*) : Available on some STM32H7 lines only.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8003640:	b580      	push	{r7, lr}
 8003642:	b086      	sub	sp, #24
 8003644:	af00      	add	r7, sp, #0
 8003646:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8003648:	2300      	movs	r3, #0
 800364a:	75fb      	strb	r3, [r7, #23]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 800364c:	2300      	movs	r3, #0
 800364e:	75bb      	strb	r3, [r7, #22]

  /*---------------------------- SPDIFRX configuration -------------------------------*/

  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8003650:	687b      	ldr	r3, [r7, #4]
 8003652:	681b      	ldr	r3, [r3, #0]
 8003654:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8003658:	2b00      	cmp	r3, #0
 800365a:	d03f      	beq.n	80036dc <HAL_RCCEx_PeriphCLKConfig+0x9c>
  {

    switch(PeriphClkInit->SpdifrxClockSelection)
 800365c:	687b      	ldr	r3, [r7, #4]
 800365e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003660:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8003664:	d02a      	beq.n	80036bc <HAL_RCCEx_PeriphCLKConfig+0x7c>
 8003666:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 800366a:	d824      	bhi.n	80036b6 <HAL_RCCEx_PeriphCLKConfig+0x76>
 800366c:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8003670:	d018      	beq.n	80036a4 <HAL_RCCEx_PeriphCLKConfig+0x64>
 8003672:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8003676:	d81e      	bhi.n	80036b6 <HAL_RCCEx_PeriphCLKConfig+0x76>
 8003678:	2b00      	cmp	r3, #0
 800367a:	d003      	beq.n	8003684 <HAL_RCCEx_PeriphCLKConfig+0x44>
 800367c:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8003680:	d007      	beq.n	8003692 <HAL_RCCEx_PeriphCLKConfig+0x52>
 8003682:	e018      	b.n	80036b6 <HAL_RCCEx_PeriphCLKConfig+0x76>
    {
    case RCC_SPDIFRXCLKSOURCE_PLL:      /* PLL is used as clock source for SPDIFRX*/
      /* Enable PLL1Q Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003684:	4bab      	ldr	r3, [pc, #684]	; (8003934 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8003686:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003688:	4aaa      	ldr	r2, [pc, #680]	; (8003934 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 800368a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800368e:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 8003690:	e015      	b.n	80036be <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SPDIFRXCLKSOURCE_PLL2: /* PLL2 is used as clock source for SPDIFRX*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 8003692:	687b      	ldr	r3, [r7, #4]
 8003694:	3304      	adds	r3, #4
 8003696:	2102      	movs	r1, #2
 8003698:	4618      	mov	r0, r3
 800369a:	f001 f9df 	bl	8004a5c <RCCEx_PLL2_Config>
 800369e:	4603      	mov	r3, r0
 80036a0:	75fb      	strb	r3, [r7, #23]

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 80036a2:	e00c      	b.n	80036be <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SPDIFRXCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPDIFRX*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 80036a4:	687b      	ldr	r3, [r7, #4]
 80036a6:	3324      	adds	r3, #36	; 0x24
 80036a8:	2102      	movs	r1, #2
 80036aa:	4618      	mov	r0, r3
 80036ac:	f001 fa88 	bl	8004bc0 <RCCEx_PLL3_Config>
 80036b0:	4603      	mov	r3, r0
 80036b2:	75fb      	strb	r3, [r7, #23]

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 80036b4:	e003      	b.n	80036be <HAL_RCCEx_PeriphCLKConfig+0x7e>
      /* Internal OSC clock is used as source of SPDIFRX clock*/
      /* SPDIFRX clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80036b6:	2301      	movs	r3, #1
 80036b8:	75fb      	strb	r3, [r7, #23]
      break;
 80036ba:	e000      	b.n	80036be <HAL_RCCEx_PeriphCLKConfig+0x7e>
      break;
 80036bc:	bf00      	nop
    }

    if(ret == HAL_OK)
 80036be:	7dfb      	ldrb	r3, [r7, #23]
 80036c0:	2b00      	cmp	r3, #0
 80036c2:	d109      	bne.n	80036d8 <HAL_RCCEx_PeriphCLKConfig+0x98>
    {
      /* Set the source of SPDIFRX clock*/
      __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifrxClockSelection);
 80036c4:	4b9b      	ldr	r3, [pc, #620]	; (8003934 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 80036c6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80036c8:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80036cc:	687b      	ldr	r3, [r7, #4]
 80036ce:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80036d0:	4998      	ldr	r1, [pc, #608]	; (8003934 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 80036d2:	4313      	orrs	r3, r2
 80036d4:	650b      	str	r3, [r1, #80]	; 0x50
 80036d6:	e001      	b.n	80036dc <HAL_RCCEx_PeriphCLKConfig+0x9c>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80036d8:	7dfb      	ldrb	r3, [r7, #23]
 80036da:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SAI1 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 80036dc:	687b      	ldr	r3, [r7, #4]
 80036de:	681b      	ldr	r3, [r3, #0]
 80036e0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80036e4:	2b00      	cmp	r3, #0
 80036e6:	d03d      	beq.n	8003764 <HAL_RCCEx_PeriphCLKConfig+0x124>
  {
    switch(PeriphClkInit->Sai1ClockSelection)
 80036e8:	687b      	ldr	r3, [r7, #4]
 80036ea:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80036ec:	2b04      	cmp	r3, #4
 80036ee:	d826      	bhi.n	800373e <HAL_RCCEx_PeriphCLKConfig+0xfe>
 80036f0:	a201      	add	r2, pc, #4	; (adr r2, 80036f8 <HAL_RCCEx_PeriphCLKConfig+0xb8>)
 80036f2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80036f6:	bf00      	nop
 80036f8:	0800370d 	.word	0x0800370d
 80036fc:	0800371b 	.word	0x0800371b
 8003700:	0800372d 	.word	0x0800372d
 8003704:	08003745 	.word	0x08003745
 8003708:	08003745 	.word	0x08003745
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800370c:	4b89      	ldr	r3, [pc, #548]	; (8003934 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 800370e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003710:	4a88      	ldr	r2, [pc, #544]	; (8003934 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8003712:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003716:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8003718:	e015      	b.n	8003746 <HAL_RCCEx_PeriphCLKConfig+0x106>

    case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI1*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 800371a:	687b      	ldr	r3, [r7, #4]
 800371c:	3304      	adds	r3, #4
 800371e:	2100      	movs	r1, #0
 8003720:	4618      	mov	r0, r3
 8003722:	f001 f99b 	bl	8004a5c <RCCEx_PLL2_Config>
 8003726:	4603      	mov	r3, r0
 8003728:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 800372a:	e00c      	b.n	8003746 <HAL_RCCEx_PeriphCLKConfig+0x106>

    case RCC_SAI1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI1*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 800372c:	687b      	ldr	r3, [r7, #4]
 800372e:	3324      	adds	r3, #36	; 0x24
 8003730:	2100      	movs	r1, #0
 8003732:	4618      	mov	r0, r3
 8003734:	f001 fa44 	bl	8004bc0 <RCCEx_PLL3_Config>
 8003738:	4603      	mov	r3, r0
 800373a:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 800373c:	e003      	b.n	8003746 <HAL_RCCEx_PeriphCLKConfig+0x106>
      /* HSI, HSE, or CSI oscillator is used as source of SAI1 clock */
      /* SAI1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800373e:	2301      	movs	r3, #1
 8003740:	75fb      	strb	r3, [r7, #23]
      break;
 8003742:	e000      	b.n	8003746 <HAL_RCCEx_PeriphCLKConfig+0x106>
      break;
 8003744:	bf00      	nop
    }

    if(ret == HAL_OK)
 8003746:	7dfb      	ldrb	r3, [r7, #23]
 8003748:	2b00      	cmp	r3, #0
 800374a:	d109      	bne.n	8003760 <HAL_RCCEx_PeriphCLKConfig+0x120>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 800374c:	4b79      	ldr	r3, [pc, #484]	; (8003934 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 800374e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003750:	f023 0207 	bic.w	r2, r3, #7
 8003754:	687b      	ldr	r3, [r7, #4]
 8003756:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003758:	4976      	ldr	r1, [pc, #472]	; (8003934 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 800375a:	4313      	orrs	r3, r2
 800375c:	650b      	str	r3, [r1, #80]	; 0x50
 800375e:	e001      	b.n	8003764 <HAL_RCCEx_PeriphCLKConfig+0x124>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003760:	7dfb      	ldrb	r3, [r7, #23]
 8003762:	75bb      	strb	r3, [r7, #22]
  }
#endif  /*SAI2B*/

#if defined(SAI4)
  /*---------------------------- SAI4A configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4A) == RCC_PERIPHCLK_SAI4A)
 8003764:	687b      	ldr	r3, [r7, #4]
 8003766:	681b      	ldr	r3, [r3, #0]
 8003768:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800376c:	2b00      	cmp	r3, #0
 800376e:	d051      	beq.n	8003814 <HAL_RCCEx_PeriphCLKConfig+0x1d4>
  {
    switch(PeriphClkInit->Sai4AClockSelection)
 8003770:	687b      	ldr	r3, [r7, #4]
 8003772:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 8003776:	f5b3 0f20 	cmp.w	r3, #10485760	; 0xa00000
 800377a:	d036      	beq.n	80037ea <HAL_RCCEx_PeriphCLKConfig+0x1aa>
 800377c:	f5b3 0f20 	cmp.w	r3, #10485760	; 0xa00000
 8003780:	d830      	bhi.n	80037e4 <HAL_RCCEx_PeriphCLKConfig+0x1a4>
 8003782:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8003786:	d032      	beq.n	80037ee <HAL_RCCEx_PeriphCLKConfig+0x1ae>
 8003788:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 800378c:	d82a      	bhi.n	80037e4 <HAL_RCCEx_PeriphCLKConfig+0x1a4>
 800378e:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 8003792:	d02e      	beq.n	80037f2 <HAL_RCCEx_PeriphCLKConfig+0x1b2>
 8003794:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 8003798:	d824      	bhi.n	80037e4 <HAL_RCCEx_PeriphCLKConfig+0x1a4>
 800379a:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800379e:	d018      	beq.n	80037d2 <HAL_RCCEx_PeriphCLKConfig+0x192>
 80037a0:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80037a4:	d81e      	bhi.n	80037e4 <HAL_RCCEx_PeriphCLKConfig+0x1a4>
 80037a6:	2b00      	cmp	r3, #0
 80037a8:	d003      	beq.n	80037b2 <HAL_RCCEx_PeriphCLKConfig+0x172>
 80037aa:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80037ae:	d007      	beq.n	80037c0 <HAL_RCCEx_PeriphCLKConfig+0x180>
 80037b0:	e018      	b.n	80037e4 <HAL_RCCEx_PeriphCLKConfig+0x1a4>
    {
    case RCC_SAI4ACLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80037b2:	4b60      	ldr	r3, [pc, #384]	; (8003934 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 80037b4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80037b6:	4a5f      	ldr	r2, [pc, #380]	; (8003934 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 80037b8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80037bc:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 80037be:	e019      	b.n	80037f4 <HAL_RCCEx_PeriphCLKConfig+0x1b4>

    case RCC_SAI4ACLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 80037c0:	687b      	ldr	r3, [r7, #4]
 80037c2:	3304      	adds	r3, #4
 80037c4:	2100      	movs	r1, #0
 80037c6:	4618      	mov	r0, r3
 80037c8:	f001 f948 	bl	8004a5c <RCCEx_PLL2_Config>
 80037cc:	4603      	mov	r3, r0
 80037ce:	75fb      	strb	r3, [r7, #23]

      /* SAI2 clock source configuration done later after clock selection check */
      break;
 80037d0:	e010      	b.n	80037f4 <HAL_RCCEx_PeriphCLKConfig+0x1b4>

    case RCC_SAI4ACLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 80037d2:	687b      	ldr	r3, [r7, #4]
 80037d4:	3324      	adds	r3, #36	; 0x24
 80037d6:	2100      	movs	r1, #0
 80037d8:	4618      	mov	r0, r3
 80037da:	f001 f9f1 	bl	8004bc0 <RCCEx_PLL3_Config>
 80037de:	4603      	mov	r3, r0
 80037e0:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 80037e2:	e007      	b.n	80037f4 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
      /* SAI4A clock source configuration done later after clock selection check */
      break;
#endif /* RCC_VER_3_0 */

    default:
      ret = HAL_ERROR;
 80037e4:	2301      	movs	r3, #1
 80037e6:	75fb      	strb	r3, [r7, #23]
      break;
 80037e8:	e004      	b.n	80037f4 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
      break;
 80037ea:	bf00      	nop
 80037ec:	e002      	b.n	80037f4 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
      break;
 80037ee:	bf00      	nop
 80037f0:	e000      	b.n	80037f4 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
      break;
 80037f2:	bf00      	nop
    }

    if(ret == HAL_OK)
 80037f4:	7dfb      	ldrb	r3, [r7, #23]
 80037f6:	2b00      	cmp	r3, #0
 80037f8:	d10a      	bne.n	8003810 <HAL_RCCEx_PeriphCLKConfig+0x1d0>
    {
      /* Set the source of SAI4A clock*/
      __HAL_RCC_SAI4A_CONFIG(PeriphClkInit->Sai4AClockSelection);
 80037fa:	4b4e      	ldr	r3, [pc, #312]	; (8003934 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 80037fc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80037fe:	f423 0260 	bic.w	r2, r3, #14680064	; 0xe00000
 8003802:	687b      	ldr	r3, [r7, #4]
 8003804:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 8003808:	494a      	ldr	r1, [pc, #296]	; (8003934 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 800380a:	4313      	orrs	r3, r2
 800380c:	658b      	str	r3, [r1, #88]	; 0x58
 800380e:	e001      	b.n	8003814 <HAL_RCCEx_PeriphCLKConfig+0x1d4>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003810:	7dfb      	ldrb	r3, [r7, #23]
 8003812:	75bb      	strb	r3, [r7, #22]
    }
  }
  /*---------------------------- SAI4B configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4B) == RCC_PERIPHCLK_SAI4B)
 8003814:	687b      	ldr	r3, [r7, #4]
 8003816:	681b      	ldr	r3, [r3, #0]
 8003818:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800381c:	2b00      	cmp	r3, #0
 800381e:	d051      	beq.n	80038c4 <HAL_RCCEx_PeriphCLKConfig+0x284>
  {
    switch(PeriphClkInit->Sai4BClockSelection)
 8003820:	687b      	ldr	r3, [r7, #4]
 8003822:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8003826:	f1b3 6fa0 	cmp.w	r3, #83886080	; 0x5000000
 800382a:	d036      	beq.n	800389a <HAL_RCCEx_PeriphCLKConfig+0x25a>
 800382c:	f1b3 6fa0 	cmp.w	r3, #83886080	; 0x5000000
 8003830:	d830      	bhi.n	8003894 <HAL_RCCEx_PeriphCLKConfig+0x254>
 8003832:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8003836:	d032      	beq.n	800389e <HAL_RCCEx_PeriphCLKConfig+0x25e>
 8003838:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800383c:	d82a      	bhi.n	8003894 <HAL_RCCEx_PeriphCLKConfig+0x254>
 800383e:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8003842:	d02e      	beq.n	80038a2 <HAL_RCCEx_PeriphCLKConfig+0x262>
 8003844:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8003848:	d824      	bhi.n	8003894 <HAL_RCCEx_PeriphCLKConfig+0x254>
 800384a:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800384e:	d018      	beq.n	8003882 <HAL_RCCEx_PeriphCLKConfig+0x242>
 8003850:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8003854:	d81e      	bhi.n	8003894 <HAL_RCCEx_PeriphCLKConfig+0x254>
 8003856:	2b00      	cmp	r3, #0
 8003858:	d003      	beq.n	8003862 <HAL_RCCEx_PeriphCLKConfig+0x222>
 800385a:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800385e:	d007      	beq.n	8003870 <HAL_RCCEx_PeriphCLKConfig+0x230>
 8003860:	e018      	b.n	8003894 <HAL_RCCEx_PeriphCLKConfig+0x254>
    {
    case RCC_SAI4BCLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003862:	4b34      	ldr	r3, [pc, #208]	; (8003934 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8003864:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003866:	4a33      	ldr	r2, [pc, #204]	; (8003934 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8003868:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800386c:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 800386e:	e019      	b.n	80038a4 <HAL_RCCEx_PeriphCLKConfig+0x264>

    case RCC_SAI4BCLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8003870:	687b      	ldr	r3, [r7, #4]
 8003872:	3304      	adds	r3, #4
 8003874:	2100      	movs	r1, #0
 8003876:	4618      	mov	r0, r3
 8003878:	f001 f8f0 	bl	8004a5c <RCCEx_PLL2_Config>
 800387c:	4603      	mov	r3, r0
 800387e:	75fb      	strb	r3, [r7, #23]

      /* SAI2 clock source configuration done later after clock selection check */
      break;
 8003880:	e010      	b.n	80038a4 <HAL_RCCEx_PeriphCLKConfig+0x264>

    case RCC_SAI4BCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8003882:	687b      	ldr	r3, [r7, #4]
 8003884:	3324      	adds	r3, #36	; 0x24
 8003886:	2100      	movs	r1, #0
 8003888:	4618      	mov	r0, r3
 800388a:	f001 f999 	bl	8004bc0 <RCCEx_PLL3_Config>
 800388e:	4603      	mov	r3, r0
 8003890:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8003892:	e007      	b.n	80038a4 <HAL_RCCEx_PeriphCLKConfig+0x264>
      /* SAI4B clock source configuration done later after clock selection check */
      break;
#endif /* RCC_VER_3_0 */

    default:
      ret = HAL_ERROR;
 8003894:	2301      	movs	r3, #1
 8003896:	75fb      	strb	r3, [r7, #23]
      break;
 8003898:	e004      	b.n	80038a4 <HAL_RCCEx_PeriphCLKConfig+0x264>
      break;
 800389a:	bf00      	nop
 800389c:	e002      	b.n	80038a4 <HAL_RCCEx_PeriphCLKConfig+0x264>
      break;
 800389e:	bf00      	nop
 80038a0:	e000      	b.n	80038a4 <HAL_RCCEx_PeriphCLKConfig+0x264>
      break;
 80038a2:	bf00      	nop
    }

    if(ret == HAL_OK)
 80038a4:	7dfb      	ldrb	r3, [r7, #23]
 80038a6:	2b00      	cmp	r3, #0
 80038a8:	d10a      	bne.n	80038c0 <HAL_RCCEx_PeriphCLKConfig+0x280>
    {
      /* Set the source of SAI4B clock*/
      __HAL_RCC_SAI4B_CONFIG(PeriphClkInit->Sai4BClockSelection);
 80038aa:	4b22      	ldr	r3, [pc, #136]	; (8003934 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 80038ac:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80038ae:	f023 62e0 	bic.w	r2, r3, #117440512	; 0x7000000
 80038b2:	687b      	ldr	r3, [r7, #4]
 80038b4:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 80038b8:	491e      	ldr	r1, [pc, #120]	; (8003934 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 80038ba:	4313      	orrs	r3, r2
 80038bc:	658b      	str	r3, [r1, #88]	; 0x58
 80038be:	e001      	b.n	80038c4 <HAL_RCCEx_PeriphCLKConfig+0x284>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80038c0:	7dfb      	ldrb	r3, [r7, #23]
 80038c2:	75bb      	strb	r3, [r7, #22]
  }
#endif  /*QUADSPI*/

#if defined(OCTOSPI1) || defined(OCTOSPI2)
  /*---------------------------- OCTOSPI configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_OSPI) == RCC_PERIPHCLK_OSPI)
 80038c4:	687b      	ldr	r3, [r7, #4]
 80038c6:	681b      	ldr	r3, [r3, #0]
 80038c8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80038cc:	2b00      	cmp	r3, #0
 80038ce:	d035      	beq.n	800393c <HAL_RCCEx_PeriphCLKConfig+0x2fc>
  {
    switch(PeriphClkInit->OspiClockSelection)
 80038d0:	687b      	ldr	r3, [r7, #4]
 80038d2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80038d4:	2b30      	cmp	r3, #48	; 0x30
 80038d6:	d01c      	beq.n	8003912 <HAL_RCCEx_PeriphCLKConfig+0x2d2>
 80038d8:	2b30      	cmp	r3, #48	; 0x30
 80038da:	d817      	bhi.n	800390c <HAL_RCCEx_PeriphCLKConfig+0x2cc>
 80038dc:	2b20      	cmp	r3, #32
 80038de:	d00c      	beq.n	80038fa <HAL_RCCEx_PeriphCLKConfig+0x2ba>
 80038e0:	2b20      	cmp	r3, #32
 80038e2:	d813      	bhi.n	800390c <HAL_RCCEx_PeriphCLKConfig+0x2cc>
 80038e4:	2b00      	cmp	r3, #0
 80038e6:	d016      	beq.n	8003916 <HAL_RCCEx_PeriphCLKConfig+0x2d6>
 80038e8:	2b10      	cmp	r3, #16
 80038ea:	d10f      	bne.n	800390c <HAL_RCCEx_PeriphCLKConfig+0x2cc>
    {
    case RCC_OSPICLKSOURCE_PLL:      /* PLL is used as clock source for OSPI*/
      /* Enable OSPI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80038ec:	4b11      	ldr	r3, [pc, #68]	; (8003934 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 80038ee:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80038f0:	4a10      	ldr	r2, [pc, #64]	; (8003934 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 80038f2:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80038f6:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* OSPI clock source configuration done later after clock selection check */
      break;
 80038f8:	e00e      	b.n	8003918 <HAL_RCCEx_PeriphCLKConfig+0x2d8>

    case RCC_OSPICLKSOURCE_PLL2: /* PLL2 is used as clock source for OSPI*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 80038fa:	687b      	ldr	r3, [r7, #4]
 80038fc:	3304      	adds	r3, #4
 80038fe:	2102      	movs	r1, #2
 8003900:	4618      	mov	r0, r3
 8003902:	f001 f8ab 	bl	8004a5c <RCCEx_PLL2_Config>
 8003906:	4603      	mov	r3, r0
 8003908:	75fb      	strb	r3, [r7, #23]

      /* OSPI clock source configuration done later after clock selection check */
      break;
 800390a:	e005      	b.n	8003918 <HAL_RCCEx_PeriphCLKConfig+0x2d8>
    case RCC_OSPICLKSOURCE_HCLK:
      /* HCLK clock selected as OSPI kernel peripheral clock */
      break;

    default:
      ret = HAL_ERROR;
 800390c:	2301      	movs	r3, #1
 800390e:	75fb      	strb	r3, [r7, #23]
      break;
 8003910:	e002      	b.n	8003918 <HAL_RCCEx_PeriphCLKConfig+0x2d8>
      break;
 8003912:	bf00      	nop
 8003914:	e000      	b.n	8003918 <HAL_RCCEx_PeriphCLKConfig+0x2d8>
      break;
 8003916:	bf00      	nop
    }

    if(ret == HAL_OK)
 8003918:	7dfb      	ldrb	r3, [r7, #23]
 800391a:	2b00      	cmp	r3, #0
 800391c:	d10c      	bne.n	8003938 <HAL_RCCEx_PeriphCLKConfig+0x2f8>
    {
      /* Set the source of OSPI clock*/
      __HAL_RCC_OSPI_CONFIG(PeriphClkInit->OspiClockSelection);
 800391e:	4b05      	ldr	r3, [pc, #20]	; (8003934 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8003920:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003922:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8003926:	687b      	ldr	r3, [r7, #4]
 8003928:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800392a:	4902      	ldr	r1, [pc, #8]	; (8003934 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 800392c:	4313      	orrs	r3, r2
 800392e:	64cb      	str	r3, [r1, #76]	; 0x4c
 8003930:	e004      	b.n	800393c <HAL_RCCEx_PeriphCLKConfig+0x2fc>
 8003932:	bf00      	nop
 8003934:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003938:	7dfb      	ldrb	r3, [r7, #23]
 800393a:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif  /*OCTOSPI*/

  /*---------------------------- SPI1/2/3 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI123) == RCC_PERIPHCLK_SPI123)
 800393c:	687b      	ldr	r3, [r7, #4]
 800393e:	681b      	ldr	r3, [r3, #0]
 8003940:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8003944:	2b00      	cmp	r3, #0
 8003946:	d047      	beq.n	80039d8 <HAL_RCCEx_PeriphCLKConfig+0x398>
  {
    switch(PeriphClkInit->Spi123ClockSelection)
 8003948:	687b      	ldr	r3, [r7, #4]
 800394a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800394c:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8003950:	d030      	beq.n	80039b4 <HAL_RCCEx_PeriphCLKConfig+0x374>
 8003952:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8003956:	d82a      	bhi.n	80039ae <HAL_RCCEx_PeriphCLKConfig+0x36e>
 8003958:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 800395c:	d02c      	beq.n	80039b8 <HAL_RCCEx_PeriphCLKConfig+0x378>
 800395e:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8003962:	d824      	bhi.n	80039ae <HAL_RCCEx_PeriphCLKConfig+0x36e>
 8003964:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003968:	d018      	beq.n	800399c <HAL_RCCEx_PeriphCLKConfig+0x35c>
 800396a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800396e:	d81e      	bhi.n	80039ae <HAL_RCCEx_PeriphCLKConfig+0x36e>
 8003970:	2b00      	cmp	r3, #0
 8003972:	d003      	beq.n	800397c <HAL_RCCEx_PeriphCLKConfig+0x33c>
 8003974:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003978:	d007      	beq.n	800398a <HAL_RCCEx_PeriphCLKConfig+0x34a>
 800397a:	e018      	b.n	80039ae <HAL_RCCEx_PeriphCLKConfig+0x36e>
    {
    case RCC_SPI123CLKSOURCE_PLL:      /* PLL is used as clock source for SPI1/2/3 */
      /* Enable SPI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800397c:	4bac      	ldr	r3, [pc, #688]	; (8003c30 <HAL_RCCEx_PeriphCLKConfig+0x5f0>)
 800397e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003980:	4aab      	ldr	r2, [pc, #684]	; (8003c30 <HAL_RCCEx_PeriphCLKConfig+0x5f0>)
 8003982:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003986:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 8003988:	e017      	b.n	80039ba <HAL_RCCEx_PeriphCLKConfig+0x37a>

    case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI1/2/3 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 800398a:	687b      	ldr	r3, [r7, #4]
 800398c:	3304      	adds	r3, #4
 800398e:	2100      	movs	r1, #0
 8003990:	4618      	mov	r0, r3
 8003992:	f001 f863 	bl	8004a5c <RCCEx_PLL2_Config>
 8003996:	4603      	mov	r3, r0
 8003998:	75fb      	strb	r3, [r7, #23]

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 800399a:	e00e      	b.n	80039ba <HAL_RCCEx_PeriphCLKConfig+0x37a>

    case RCC_SPI123CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI1/2/3 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 800399c:	687b      	ldr	r3, [r7, #4]
 800399e:	3324      	adds	r3, #36	; 0x24
 80039a0:	2100      	movs	r1, #0
 80039a2:	4618      	mov	r0, r3
 80039a4:	f001 f90c 	bl	8004bc0 <RCCEx_PLL3_Config>
 80039a8:	4603      	mov	r3, r0
 80039aa:	75fb      	strb	r3, [r7, #23]

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 80039ac:	e005      	b.n	80039ba <HAL_RCCEx_PeriphCLKConfig+0x37a>
      /* HSI, HSE, or CSI oscillator is used as source of SPI1/2/3 clock */
      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80039ae:	2301      	movs	r3, #1
 80039b0:	75fb      	strb	r3, [r7, #23]
      break;
 80039b2:	e002      	b.n	80039ba <HAL_RCCEx_PeriphCLKConfig+0x37a>
      break;
 80039b4:	bf00      	nop
 80039b6:	e000      	b.n	80039ba <HAL_RCCEx_PeriphCLKConfig+0x37a>
      break;
 80039b8:	bf00      	nop
    }

    if(ret == HAL_OK)
 80039ba:	7dfb      	ldrb	r3, [r7, #23]
 80039bc:	2b00      	cmp	r3, #0
 80039be:	d109      	bne.n	80039d4 <HAL_RCCEx_PeriphCLKConfig+0x394>
    {
      /* Set the source of SPI1/2/3 clock*/
      __HAL_RCC_SPI123_CONFIG(PeriphClkInit->Spi123ClockSelection);
 80039c0:	4b9b      	ldr	r3, [pc, #620]	; (8003c30 <HAL_RCCEx_PeriphCLKConfig+0x5f0>)
 80039c2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80039c4:	f423 42e0 	bic.w	r2, r3, #28672	; 0x7000
 80039c8:	687b      	ldr	r3, [r7, #4]
 80039ca:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80039cc:	4998      	ldr	r1, [pc, #608]	; (8003c30 <HAL_RCCEx_PeriphCLKConfig+0x5f0>)
 80039ce:	4313      	orrs	r3, r2
 80039d0:	650b      	str	r3, [r1, #80]	; 0x50
 80039d2:	e001      	b.n	80039d8 <HAL_RCCEx_PeriphCLKConfig+0x398>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80039d4:	7dfb      	ldrb	r3, [r7, #23]
 80039d6:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SPI4/5 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) == RCC_PERIPHCLK_SPI45)
 80039d8:	687b      	ldr	r3, [r7, #4]
 80039da:	681b      	ldr	r3, [r3, #0]
 80039dc:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80039e0:	2b00      	cmp	r3, #0
 80039e2:	d049      	beq.n	8003a78 <HAL_RCCEx_PeriphCLKConfig+0x438>
  {
    switch(PeriphClkInit->Spi45ClockSelection)
 80039e4:	687b      	ldr	r3, [r7, #4]
 80039e6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80039e8:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80039ec:	d02e      	beq.n	8003a4c <HAL_RCCEx_PeriphCLKConfig+0x40c>
 80039ee:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80039f2:	d828      	bhi.n	8003a46 <HAL_RCCEx_PeriphCLKConfig+0x406>
 80039f4:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 80039f8:	d02a      	beq.n	8003a50 <HAL_RCCEx_PeriphCLKConfig+0x410>
 80039fa:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 80039fe:	d822      	bhi.n	8003a46 <HAL_RCCEx_PeriphCLKConfig+0x406>
 8003a00:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8003a04:	d026      	beq.n	8003a54 <HAL_RCCEx_PeriphCLKConfig+0x414>
 8003a06:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8003a0a:	d81c      	bhi.n	8003a46 <HAL_RCCEx_PeriphCLKConfig+0x406>
 8003a0c:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8003a10:	d010      	beq.n	8003a34 <HAL_RCCEx_PeriphCLKConfig+0x3f4>
 8003a12:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8003a16:	d816      	bhi.n	8003a46 <HAL_RCCEx_PeriphCLKConfig+0x406>
 8003a18:	2b00      	cmp	r3, #0
 8003a1a:	d01d      	beq.n	8003a58 <HAL_RCCEx_PeriphCLKConfig+0x418>
 8003a1c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003a20:	d111      	bne.n	8003a46 <HAL_RCCEx_PeriphCLKConfig+0x406>
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;

    case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI4/5 */

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8003a22:	687b      	ldr	r3, [r7, #4]
 8003a24:	3304      	adds	r3, #4
 8003a26:	2101      	movs	r1, #1
 8003a28:	4618      	mov	r0, r3
 8003a2a:	f001 f817 	bl	8004a5c <RCCEx_PLL2_Config>
 8003a2e:	4603      	mov	r3, r0
 8003a30:	75fb      	strb	r3, [r7, #23]

      /* SPI4/5 clock source configuration done later after clock selection check */
      break;
 8003a32:	e012      	b.n	8003a5a <HAL_RCCEx_PeriphCLKConfig+0x41a>
    case RCC_SPI45CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI4/5 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8003a34:	687b      	ldr	r3, [r7, #4]
 8003a36:	3324      	adds	r3, #36	; 0x24
 8003a38:	2101      	movs	r1, #1
 8003a3a:	4618      	mov	r0, r3
 8003a3c:	f001 f8c0 	bl	8004bc0 <RCCEx_PLL3_Config>
 8003a40:	4603      	mov	r3, r0
 8003a42:	75fb      	strb	r3, [r7, #23]
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;
 8003a44:	e009      	b.n	8003a5a <HAL_RCCEx_PeriphCLKConfig+0x41a>
      /* HSE,  oscillator is used as source of SPI4/5 clock */
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8003a46:	2301      	movs	r3, #1
 8003a48:	75fb      	strb	r3, [r7, #23]
      break;
 8003a4a:	e006      	b.n	8003a5a <HAL_RCCEx_PeriphCLKConfig+0x41a>
      break;
 8003a4c:	bf00      	nop
 8003a4e:	e004      	b.n	8003a5a <HAL_RCCEx_PeriphCLKConfig+0x41a>
      break;
 8003a50:	bf00      	nop
 8003a52:	e002      	b.n	8003a5a <HAL_RCCEx_PeriphCLKConfig+0x41a>
      break;
 8003a54:	bf00      	nop
 8003a56:	e000      	b.n	8003a5a <HAL_RCCEx_PeriphCLKConfig+0x41a>
      break;
 8003a58:	bf00      	nop
    }

    if(ret == HAL_OK)
 8003a5a:	7dfb      	ldrb	r3, [r7, #23]
 8003a5c:	2b00      	cmp	r3, #0
 8003a5e:	d109      	bne.n	8003a74 <HAL_RCCEx_PeriphCLKConfig+0x434>
    {
      /* Set the source of SPI4/5 clock*/
      __HAL_RCC_SPI45_CONFIG(PeriphClkInit->Spi45ClockSelection);
 8003a60:	4b73      	ldr	r3, [pc, #460]	; (8003c30 <HAL_RCCEx_PeriphCLKConfig+0x5f0>)
 8003a62:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003a64:	f423 22e0 	bic.w	r2, r3, #458752	; 0x70000
 8003a68:	687b      	ldr	r3, [r7, #4]
 8003a6a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003a6c:	4970      	ldr	r1, [pc, #448]	; (8003c30 <HAL_RCCEx_PeriphCLKConfig+0x5f0>)
 8003a6e:	4313      	orrs	r3, r2
 8003a70:	650b      	str	r3, [r1, #80]	; 0x50
 8003a72:	e001      	b.n	8003a78 <HAL_RCCEx_PeriphCLKConfig+0x438>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003a74:	7dfb      	ldrb	r3, [r7, #23]
 8003a76:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SPI6 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 8003a78:	687b      	ldr	r3, [r7, #4]
 8003a7a:	681b      	ldr	r3, [r3, #0]
 8003a7c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003a80:	2b00      	cmp	r3, #0
 8003a82:	d04b      	beq.n	8003b1c <HAL_RCCEx_PeriphCLKConfig+0x4dc>
  {
    switch(PeriphClkInit->Spi6ClockSelection)
 8003a84:	687b      	ldr	r3, [r7, #4]
 8003a86:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 8003a8a:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8003a8e:	d02e      	beq.n	8003aee <HAL_RCCEx_PeriphCLKConfig+0x4ae>
 8003a90:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8003a94:	d828      	bhi.n	8003ae8 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
 8003a96:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003a9a:	d02a      	beq.n	8003af2 <HAL_RCCEx_PeriphCLKConfig+0x4b2>
 8003a9c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003aa0:	d822      	bhi.n	8003ae8 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
 8003aa2:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8003aa6:	d026      	beq.n	8003af6 <HAL_RCCEx_PeriphCLKConfig+0x4b6>
 8003aa8:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8003aac:	d81c      	bhi.n	8003ae8 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
 8003aae:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8003ab2:	d010      	beq.n	8003ad6 <HAL_RCCEx_PeriphCLKConfig+0x496>
 8003ab4:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8003ab8:	d816      	bhi.n	8003ae8 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
 8003aba:	2b00      	cmp	r3, #0
 8003abc:	d01d      	beq.n	8003afa <HAL_RCCEx_PeriphCLKConfig+0x4ba>
 8003abe:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8003ac2:	d111      	bne.n	8003ae8 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
      /* SPI6 clock source configuration done later after clock selection check */
      break;

    case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI6*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8003ac4:	687b      	ldr	r3, [r7, #4]
 8003ac6:	3304      	adds	r3, #4
 8003ac8:	2101      	movs	r1, #1
 8003aca:	4618      	mov	r0, r3
 8003acc:	f000 ffc6 	bl	8004a5c <RCCEx_PLL2_Config>
 8003ad0:	4603      	mov	r3, r0
 8003ad2:	75fb      	strb	r3, [r7, #23]

      /* SPI6 clock source configuration done later after clock selection check */
      break;
 8003ad4:	e012      	b.n	8003afc <HAL_RCCEx_PeriphCLKConfig+0x4bc>
    case RCC_SPI6CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI6*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8003ad6:	687b      	ldr	r3, [r7, #4]
 8003ad8:	3324      	adds	r3, #36	; 0x24
 8003ada:	2101      	movs	r1, #1
 8003adc:	4618      	mov	r0, r3
 8003ade:	f001 f86f 	bl	8004bc0 <RCCEx_PLL3_Config>
 8003ae2:	4603      	mov	r3, r0
 8003ae4:	75fb      	strb	r3, [r7, #23]
      /* SPI6 clock source configuration done later after clock selection check */
      break;
 8003ae6:	e009      	b.n	8003afc <HAL_RCCEx_PeriphCLKConfig+0x4bc>
      /* SPI6 clock source configuration done later after clock selection check */
      break;
#endif

    default:
      ret = HAL_ERROR;
 8003ae8:	2301      	movs	r3, #1
 8003aea:	75fb      	strb	r3, [r7, #23]
      break;
 8003aec:	e006      	b.n	8003afc <HAL_RCCEx_PeriphCLKConfig+0x4bc>
      break;
 8003aee:	bf00      	nop
 8003af0:	e004      	b.n	8003afc <HAL_RCCEx_PeriphCLKConfig+0x4bc>
      break;
 8003af2:	bf00      	nop
 8003af4:	e002      	b.n	8003afc <HAL_RCCEx_PeriphCLKConfig+0x4bc>
      break;
 8003af6:	bf00      	nop
 8003af8:	e000      	b.n	8003afc <HAL_RCCEx_PeriphCLKConfig+0x4bc>
      break;
 8003afa:	bf00      	nop
    }

    if(ret == HAL_OK)
 8003afc:	7dfb      	ldrb	r3, [r7, #23]
 8003afe:	2b00      	cmp	r3, #0
 8003b00:	d10a      	bne.n	8003b18 <HAL_RCCEx_PeriphCLKConfig+0x4d8>
    {
      /* Set the source of SPI6 clock*/
      __HAL_RCC_SPI6_CONFIG(PeriphClkInit->Spi6ClockSelection);
 8003b02:	4b4b      	ldr	r3, [pc, #300]	; (8003c30 <HAL_RCCEx_PeriphCLKConfig+0x5f0>)
 8003b04:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003b06:	f023 42e0 	bic.w	r2, r3, #1879048192	; 0x70000000
 8003b0a:	687b      	ldr	r3, [r7, #4]
 8003b0c:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 8003b10:	4947      	ldr	r1, [pc, #284]	; (8003c30 <HAL_RCCEx_PeriphCLKConfig+0x5f0>)
 8003b12:	4313      	orrs	r3, r2
 8003b14:	658b      	str	r3, [r1, #88]	; 0x58
 8003b16:	e001      	b.n	8003b1c <HAL_RCCEx_PeriphCLKConfig+0x4dc>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003b18:	7dfb      	ldrb	r3, [r7, #23]
 8003b1a:	75bb      	strb	r3, [r7, #22]
  }
#endif /*DSI*/

#if defined(FDCAN1) || defined(FDCAN2)
  /*---------------------------- FDCAN configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8003b1c:	687b      	ldr	r3, [r7, #4]
 8003b1e:	681b      	ldr	r3, [r3, #0]
 8003b20:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8003b24:	2b00      	cmp	r3, #0
 8003b26:	d02f      	beq.n	8003b88 <HAL_RCCEx_PeriphCLKConfig+0x548>
  {
    switch(PeriphClkInit->FdcanClockSelection)
 8003b28:	687b      	ldr	r3, [r7, #4]
 8003b2a:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8003b2c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8003b30:	d00e      	beq.n	8003b50 <HAL_RCCEx_PeriphCLKConfig+0x510>
 8003b32:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8003b36:	d814      	bhi.n	8003b62 <HAL_RCCEx_PeriphCLKConfig+0x522>
 8003b38:	2b00      	cmp	r3, #0
 8003b3a:	d015      	beq.n	8003b68 <HAL_RCCEx_PeriphCLKConfig+0x528>
 8003b3c:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8003b40:	d10f      	bne.n	8003b62 <HAL_RCCEx_PeriphCLKConfig+0x522>
    {
    case RCC_FDCANCLKSOURCE_PLL:      /* PLL is used as clock source for FDCAN*/
      /* Enable FDCAN Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003b42:	4b3b      	ldr	r3, [pc, #236]	; (8003c30 <HAL_RCCEx_PeriphCLKConfig+0x5f0>)
 8003b44:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003b46:	4a3a      	ldr	r2, [pc, #232]	; (8003c30 <HAL_RCCEx_PeriphCLKConfig+0x5f0>)
 8003b48:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003b4c:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* FDCAN clock source configuration done later after clock selection check */
      break;
 8003b4e:	e00c      	b.n	8003b6a <HAL_RCCEx_PeriphCLKConfig+0x52a>

    case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is used as clock source for FDCAN*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8003b50:	687b      	ldr	r3, [r7, #4]
 8003b52:	3304      	adds	r3, #4
 8003b54:	2101      	movs	r1, #1
 8003b56:	4618      	mov	r0, r3
 8003b58:	f000 ff80 	bl	8004a5c <RCCEx_PLL2_Config>
 8003b5c:	4603      	mov	r3, r0
 8003b5e:	75fb      	strb	r3, [r7, #23]

      /* FDCAN clock source configuration done later after clock selection check */
      break;
 8003b60:	e003      	b.n	8003b6a <HAL_RCCEx_PeriphCLKConfig+0x52a>
      /* HSE is used as clock source for FDCAN*/
      /* FDCAN clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8003b62:	2301      	movs	r3, #1
 8003b64:	75fb      	strb	r3, [r7, #23]
      break;
 8003b66:	e000      	b.n	8003b6a <HAL_RCCEx_PeriphCLKConfig+0x52a>
      break;
 8003b68:	bf00      	nop
    }

    if(ret == HAL_OK)
 8003b6a:	7dfb      	ldrb	r3, [r7, #23]
 8003b6c:	2b00      	cmp	r3, #0
 8003b6e:	d109      	bne.n	8003b84 <HAL_RCCEx_PeriphCLKConfig+0x544>
    {
      /* Set the source of FDCAN clock*/
      __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 8003b70:	4b2f      	ldr	r3, [pc, #188]	; (8003c30 <HAL_RCCEx_PeriphCLKConfig+0x5f0>)
 8003b72:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003b74:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8003b78:	687b      	ldr	r3, [r7, #4]
 8003b7a:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8003b7c:	492c      	ldr	r1, [pc, #176]	; (8003c30 <HAL_RCCEx_PeriphCLKConfig+0x5f0>)
 8003b7e:	4313      	orrs	r3, r2
 8003b80:	650b      	str	r3, [r1, #80]	; 0x50
 8003b82:	e001      	b.n	8003b88 <HAL_RCCEx_PeriphCLKConfig+0x548>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003b84:	7dfb      	ldrb	r3, [r7, #23]
 8003b86:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif /*FDCAN1 || FDCAN2*/

  /*---------------------------- FMC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
 8003b88:	687b      	ldr	r3, [r7, #4]
 8003b8a:	681b      	ldr	r3, [r3, #0]
 8003b8c:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8003b90:	2b00      	cmp	r3, #0
 8003b92:	d032      	beq.n	8003bfa <HAL_RCCEx_PeriphCLKConfig+0x5ba>
  {
    switch(PeriphClkInit->FmcClockSelection)
 8003b94:	687b      	ldr	r3, [r7, #4]
 8003b96:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003b98:	2b03      	cmp	r3, #3
 8003b9a:	d81b      	bhi.n	8003bd4 <HAL_RCCEx_PeriphCLKConfig+0x594>
 8003b9c:	a201      	add	r2, pc, #4	; (adr r2, 8003ba4 <HAL_RCCEx_PeriphCLKConfig+0x564>)
 8003b9e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003ba2:	bf00      	nop
 8003ba4:	08003bdb 	.word	0x08003bdb
 8003ba8:	08003bb5 	.word	0x08003bb5
 8003bac:	08003bc3 	.word	0x08003bc3
 8003bb0:	08003bdb 	.word	0x08003bdb
    {
    case RCC_FMCCLKSOURCE_PLL:      /* PLL is used as clock source for FMC*/
      /* Enable FMC Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003bb4:	4b1e      	ldr	r3, [pc, #120]	; (8003c30 <HAL_RCCEx_PeriphCLKConfig+0x5f0>)
 8003bb6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003bb8:	4a1d      	ldr	r2, [pc, #116]	; (8003c30 <HAL_RCCEx_PeriphCLKConfig+0x5f0>)
 8003bba:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003bbe:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* FMC clock source configuration done later after clock selection check */
      break;
 8003bc0:	e00c      	b.n	8003bdc <HAL_RCCEx_PeriphCLKConfig+0x59c>

    case RCC_FMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for FMC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 8003bc2:	687b      	ldr	r3, [r7, #4]
 8003bc4:	3304      	adds	r3, #4
 8003bc6:	2102      	movs	r1, #2
 8003bc8:	4618      	mov	r0, r3
 8003bca:	f000 ff47 	bl	8004a5c <RCCEx_PLL2_Config>
 8003bce:	4603      	mov	r3, r0
 8003bd0:	75fb      	strb	r3, [r7, #23]

      /* FMC clock source configuration done later after clock selection check */
      break;
 8003bd2:	e003      	b.n	8003bdc <HAL_RCCEx_PeriphCLKConfig+0x59c>
    case RCC_FMCCLKSOURCE_HCLK:
      /* D1/CD HCLK  clock selected as FMC kernel peripheral clock */
      break;

    default:
      ret = HAL_ERROR;
 8003bd4:	2301      	movs	r3, #1
 8003bd6:	75fb      	strb	r3, [r7, #23]
      break;
 8003bd8:	e000      	b.n	8003bdc <HAL_RCCEx_PeriphCLKConfig+0x59c>
      break;
 8003bda:	bf00      	nop
    }

    if(ret == HAL_OK)
 8003bdc:	7dfb      	ldrb	r3, [r7, #23]
 8003bde:	2b00      	cmp	r3, #0
 8003be0:	d109      	bne.n	8003bf6 <HAL_RCCEx_PeriphCLKConfig+0x5b6>
    {
      /* Set the source of FMC clock*/
      __HAL_RCC_FMC_CONFIG(PeriphClkInit->FmcClockSelection);
 8003be2:	4b13      	ldr	r3, [pc, #76]	; (8003c30 <HAL_RCCEx_PeriphCLKConfig+0x5f0>)
 8003be4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003be6:	f023 0203 	bic.w	r2, r3, #3
 8003bea:	687b      	ldr	r3, [r7, #4]
 8003bec:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003bee:	4910      	ldr	r1, [pc, #64]	; (8003c30 <HAL_RCCEx_PeriphCLKConfig+0x5f0>)
 8003bf0:	4313      	orrs	r3, r2
 8003bf2:	64cb      	str	r3, [r1, #76]	; 0x4c
 8003bf4:	e001      	b.n	8003bfa <HAL_RCCEx_PeriphCLKConfig+0x5ba>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003bf6:	7dfb      	ldrb	r3, [r7, #23]
 8003bf8:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8003bfa:	687b      	ldr	r3, [r7, #4]
 8003bfc:	681b      	ldr	r3, [r3, #0]
 8003bfe:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003c02:	2b00      	cmp	r3, #0
 8003c04:	f000 808a 	beq.w	8003d1c <HAL_RCCEx_PeriphCLKConfig+0x6dc>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8003c08:	4b0a      	ldr	r3, [pc, #40]	; (8003c34 <HAL_RCCEx_PeriphCLKConfig+0x5f4>)
 8003c0a:	681b      	ldr	r3, [r3, #0]
 8003c0c:	4a09      	ldr	r2, [pc, #36]	; (8003c34 <HAL_RCCEx_PeriphCLKConfig+0x5f4>)
 8003c0e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003c12:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8003c14:	f7fd fc38 	bl	8001488 <HAL_GetTick>
 8003c18:	6138      	str	r0, [r7, #16]

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8003c1a:	e00d      	b.n	8003c38 <HAL_RCCEx_PeriphCLKConfig+0x5f8>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003c1c:	f7fd fc34 	bl	8001488 <HAL_GetTick>
 8003c20:	4602      	mov	r2, r0
 8003c22:	693b      	ldr	r3, [r7, #16]
 8003c24:	1ad3      	subs	r3, r2, r3
 8003c26:	2b64      	cmp	r3, #100	; 0x64
 8003c28:	d906      	bls.n	8003c38 <HAL_RCCEx_PeriphCLKConfig+0x5f8>
      {
        ret = HAL_TIMEOUT;
 8003c2a:	2303      	movs	r3, #3
 8003c2c:	75fb      	strb	r3, [r7, #23]
        break;
 8003c2e:	e009      	b.n	8003c44 <HAL_RCCEx_PeriphCLKConfig+0x604>
 8003c30:	58024400 	.word	0x58024400
 8003c34:	58024800 	.word	0x58024800
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8003c38:	4bb9      	ldr	r3, [pc, #740]	; (8003f20 <HAL_RCCEx_PeriphCLKConfig+0x8e0>)
 8003c3a:	681b      	ldr	r3, [r3, #0]
 8003c3c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003c40:	2b00      	cmp	r3, #0
 8003c42:	d0eb      	beq.n	8003c1c <HAL_RCCEx_PeriphCLKConfig+0x5dc>
      }
    }

    if(ret == HAL_OK)
 8003c44:	7dfb      	ldrb	r3, [r7, #23]
 8003c46:	2b00      	cmp	r3, #0
 8003c48:	d166      	bne.n	8003d18 <HAL_RCCEx_PeriphCLKConfig+0x6d8>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if((RCC->BDCR & RCC_BDCR_RTCSEL) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL))
 8003c4a:	4bb6      	ldr	r3, [pc, #728]	; (8003f24 <HAL_RCCEx_PeriphCLKConfig+0x8e4>)
 8003c4c:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8003c4e:	687b      	ldr	r3, [r7, #4]
 8003c50:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 8003c54:	4053      	eors	r3, r2
 8003c56:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003c5a:	2b00      	cmp	r3, #0
 8003c5c:	d013      	beq.n	8003c86 <HAL_RCCEx_PeriphCLKConfig+0x646>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8003c5e:	4bb1      	ldr	r3, [pc, #708]	; (8003f24 <HAL_RCCEx_PeriphCLKConfig+0x8e4>)
 8003c60:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003c62:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003c66:	60fb      	str	r3, [r7, #12]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8003c68:	4bae      	ldr	r3, [pc, #696]	; (8003f24 <HAL_RCCEx_PeriphCLKConfig+0x8e4>)
 8003c6a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003c6c:	4aad      	ldr	r2, [pc, #692]	; (8003f24 <HAL_RCCEx_PeriphCLKConfig+0x8e4>)
 8003c6e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003c72:	6713      	str	r3, [r2, #112]	; 0x70
        __HAL_RCC_BACKUPRESET_RELEASE();
 8003c74:	4bab      	ldr	r3, [pc, #684]	; (8003f24 <HAL_RCCEx_PeriphCLKConfig+0x8e4>)
 8003c76:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003c78:	4aaa      	ldr	r2, [pc, #680]	; (8003f24 <HAL_RCCEx_PeriphCLKConfig+0x8e4>)
 8003c7a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003c7e:	6713      	str	r3, [r2, #112]	; 0x70
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpreg;
 8003c80:	4aa8      	ldr	r2, [pc, #672]	; (8003f24 <HAL_RCCEx_PeriphCLKConfig+0x8e4>)
 8003c82:	68fb      	ldr	r3, [r7, #12]
 8003c84:	6713      	str	r3, [r2, #112]	; 0x70
      }

      /* If LSE is selected as RTC clock source (and enabled prior to Backup Domain reset), wait for LSE reactivation */
      if(PeriphClkInit->RTCClockSelection == RCC_RTCCLKSOURCE_LSE)
 8003c86:	687b      	ldr	r3, [r7, #4]
 8003c88:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 8003c8c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003c90:	d115      	bne.n	8003cbe <HAL_RCCEx_PeriphCLKConfig+0x67e>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003c92:	f7fd fbf9 	bl	8001488 <HAL_GetTick>
 8003c96:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8003c98:	e00b      	b.n	8003cb2 <HAL_RCCEx_PeriphCLKConfig+0x672>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003c9a:	f7fd fbf5 	bl	8001488 <HAL_GetTick>
 8003c9e:	4602      	mov	r2, r0
 8003ca0:	693b      	ldr	r3, [r7, #16]
 8003ca2:	1ad3      	subs	r3, r2, r3
 8003ca4:	f241 3288 	movw	r2, #5000	; 0x1388
 8003ca8:	4293      	cmp	r3, r2
 8003caa:	d902      	bls.n	8003cb2 <HAL_RCCEx_PeriphCLKConfig+0x672>
          {
            ret = HAL_TIMEOUT;
 8003cac:	2303      	movs	r3, #3
 8003cae:	75fb      	strb	r3, [r7, #23]
            break;
 8003cb0:	e005      	b.n	8003cbe <HAL_RCCEx_PeriphCLKConfig+0x67e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8003cb2:	4b9c      	ldr	r3, [pc, #624]	; (8003f24 <HAL_RCCEx_PeriphCLKConfig+0x8e4>)
 8003cb4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003cb6:	f003 0302 	and.w	r3, r3, #2
 8003cba:	2b00      	cmp	r3, #0
 8003cbc:	d0ed      	beq.n	8003c9a <HAL_RCCEx_PeriphCLKConfig+0x65a>
          }
        }
      }

      if(ret == HAL_OK)
 8003cbe:	7dfb      	ldrb	r3, [r7, #23]
 8003cc0:	2b00      	cmp	r3, #0
 8003cc2:	d126      	bne.n	8003d12 <HAL_RCCEx_PeriphCLKConfig+0x6d2>
      {
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8003cc4:	687b      	ldr	r3, [r7, #4]
 8003cc6:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 8003cca:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003cce:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8003cd2:	d10d      	bne.n	8003cf0 <HAL_RCCEx_PeriphCLKConfig+0x6b0>
 8003cd4:	4b93      	ldr	r3, [pc, #588]	; (8003f24 <HAL_RCCEx_PeriphCLKConfig+0x8e4>)
 8003cd6:	691b      	ldr	r3, [r3, #16]
 8003cd8:	f423 527c 	bic.w	r2, r3, #16128	; 0x3f00
 8003cdc:	687b      	ldr	r3, [r7, #4]
 8003cde:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 8003ce2:	0919      	lsrs	r1, r3, #4
 8003ce4:	4b90      	ldr	r3, [pc, #576]	; (8003f28 <HAL_RCCEx_PeriphCLKConfig+0x8e8>)
 8003ce6:	400b      	ands	r3, r1
 8003ce8:	498e      	ldr	r1, [pc, #568]	; (8003f24 <HAL_RCCEx_PeriphCLKConfig+0x8e4>)
 8003cea:	4313      	orrs	r3, r2
 8003cec:	610b      	str	r3, [r1, #16]
 8003cee:	e005      	b.n	8003cfc <HAL_RCCEx_PeriphCLKConfig+0x6bc>
 8003cf0:	4b8c      	ldr	r3, [pc, #560]	; (8003f24 <HAL_RCCEx_PeriphCLKConfig+0x8e4>)
 8003cf2:	691b      	ldr	r3, [r3, #16]
 8003cf4:	4a8b      	ldr	r2, [pc, #556]	; (8003f24 <HAL_RCCEx_PeriphCLKConfig+0x8e4>)
 8003cf6:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 8003cfa:	6113      	str	r3, [r2, #16]
 8003cfc:	4b89      	ldr	r3, [pc, #548]	; (8003f24 <HAL_RCCEx_PeriphCLKConfig+0x8e4>)
 8003cfe:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8003d00:	687b      	ldr	r3, [r7, #4]
 8003d02:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 8003d06:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003d0a:	4986      	ldr	r1, [pc, #536]	; (8003f24 <HAL_RCCEx_PeriphCLKConfig+0x8e4>)
 8003d0c:	4313      	orrs	r3, r2
 8003d0e:	670b      	str	r3, [r1, #112]	; 0x70
 8003d10:	e004      	b.n	8003d1c <HAL_RCCEx_PeriphCLKConfig+0x6dc>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8003d12:	7dfb      	ldrb	r3, [r7, #23]
 8003d14:	75bb      	strb	r3, [r7, #22]
 8003d16:	e001      	b.n	8003d1c <HAL_RCCEx_PeriphCLKConfig+0x6dc>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003d18:	7dfb      	ldrb	r3, [r7, #23]
 8003d1a:	75bb      	strb	r3, [r7, #22]
    }
  }


  /*-------------------------- USART1/6 configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
 8003d1c:	687b      	ldr	r3, [r7, #4]
 8003d1e:	681b      	ldr	r3, [r3, #0]
 8003d20:	f003 0301 	and.w	r3, r3, #1
 8003d24:	2b00      	cmp	r3, #0
 8003d26:	d07e      	beq.n	8003e26 <HAL_RCCEx_PeriphCLKConfig+0x7e6>
  {
    switch(PeriphClkInit->Usart16ClockSelection)
 8003d28:	687b      	ldr	r3, [r7, #4]
 8003d2a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003d2c:	2b28      	cmp	r3, #40	; 0x28
 8003d2e:	d867      	bhi.n	8003e00 <HAL_RCCEx_PeriphCLKConfig+0x7c0>
 8003d30:	a201      	add	r2, pc, #4	; (adr r2, 8003d38 <HAL_RCCEx_PeriphCLKConfig+0x6f8>)
 8003d32:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003d36:	bf00      	nop
 8003d38:	08003e07 	.word	0x08003e07
 8003d3c:	08003e01 	.word	0x08003e01
 8003d40:	08003e01 	.word	0x08003e01
 8003d44:	08003e01 	.word	0x08003e01
 8003d48:	08003e01 	.word	0x08003e01
 8003d4c:	08003e01 	.word	0x08003e01
 8003d50:	08003e01 	.word	0x08003e01
 8003d54:	08003e01 	.word	0x08003e01
 8003d58:	08003ddd 	.word	0x08003ddd
 8003d5c:	08003e01 	.word	0x08003e01
 8003d60:	08003e01 	.word	0x08003e01
 8003d64:	08003e01 	.word	0x08003e01
 8003d68:	08003e01 	.word	0x08003e01
 8003d6c:	08003e01 	.word	0x08003e01
 8003d70:	08003e01 	.word	0x08003e01
 8003d74:	08003e01 	.word	0x08003e01
 8003d78:	08003def 	.word	0x08003def
 8003d7c:	08003e01 	.word	0x08003e01
 8003d80:	08003e01 	.word	0x08003e01
 8003d84:	08003e01 	.word	0x08003e01
 8003d88:	08003e01 	.word	0x08003e01
 8003d8c:	08003e01 	.word	0x08003e01
 8003d90:	08003e01 	.word	0x08003e01
 8003d94:	08003e01 	.word	0x08003e01
 8003d98:	08003e07 	.word	0x08003e07
 8003d9c:	08003e01 	.word	0x08003e01
 8003da0:	08003e01 	.word	0x08003e01
 8003da4:	08003e01 	.word	0x08003e01
 8003da8:	08003e01 	.word	0x08003e01
 8003dac:	08003e01 	.word	0x08003e01
 8003db0:	08003e01 	.word	0x08003e01
 8003db4:	08003e01 	.word	0x08003e01
 8003db8:	08003e07 	.word	0x08003e07
 8003dbc:	08003e01 	.word	0x08003e01
 8003dc0:	08003e01 	.word	0x08003e01
 8003dc4:	08003e01 	.word	0x08003e01
 8003dc8:	08003e01 	.word	0x08003e01
 8003dcc:	08003e01 	.word	0x08003e01
 8003dd0:	08003e01 	.word	0x08003e01
 8003dd4:	08003e01 	.word	0x08003e01
 8003dd8:	08003e07 	.word	0x08003e07
    case RCC_USART16CLKSOURCE_PCLK2: /* CD/D2 PCLK2 as clock source for USART1/6 */
      /* USART1/6 clock source configuration done later after clock selection check */
      break;

    case RCC_USART16CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART1/6 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8003ddc:	687b      	ldr	r3, [r7, #4]
 8003dde:	3304      	adds	r3, #4
 8003de0:	2101      	movs	r1, #1
 8003de2:	4618      	mov	r0, r3
 8003de4:	f000 fe3a 	bl	8004a5c <RCCEx_PLL2_Config>
 8003de8:	4603      	mov	r3, r0
 8003dea:	75fb      	strb	r3, [r7, #23]
      /* USART1/6 clock source configuration done later after clock selection check */
      break;
 8003dec:	e00c      	b.n	8003e08 <HAL_RCCEx_PeriphCLKConfig+0x7c8>

    case RCC_USART16CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART1/6 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8003dee:	687b      	ldr	r3, [r7, #4]
 8003df0:	3324      	adds	r3, #36	; 0x24
 8003df2:	2101      	movs	r1, #1
 8003df4:	4618      	mov	r0, r3
 8003df6:	f000 fee3 	bl	8004bc0 <RCCEx_PLL3_Config>
 8003dfa:	4603      	mov	r3, r0
 8003dfc:	75fb      	strb	r3, [r7, #23]
      /* USART1/6 clock source configuration done later after clock selection check */
      break;
 8003dfe:	e003      	b.n	8003e08 <HAL_RCCEx_PeriphCLKConfig+0x7c8>
      /* LSE,  oscillator is used as source of USART1/6 clock */
      /* USART1/6 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8003e00:	2301      	movs	r3, #1
 8003e02:	75fb      	strb	r3, [r7, #23]
      break;
 8003e04:	e000      	b.n	8003e08 <HAL_RCCEx_PeriphCLKConfig+0x7c8>
      break;
 8003e06:	bf00      	nop
    }

    if(ret == HAL_OK)
 8003e08:	7dfb      	ldrb	r3, [r7, #23]
 8003e0a:	2b00      	cmp	r3, #0
 8003e0c:	d109      	bne.n	8003e22 <HAL_RCCEx_PeriphCLKConfig+0x7e2>
    {
      /* Set the source of USART1/6 clock */
      __HAL_RCC_USART16_CONFIG(PeriphClkInit->Usart16ClockSelection);
 8003e0e:	4b45      	ldr	r3, [pc, #276]	; (8003f24 <HAL_RCCEx_PeriphCLKConfig+0x8e4>)
 8003e10:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003e12:	f023 0238 	bic.w	r2, r3, #56	; 0x38
 8003e16:	687b      	ldr	r3, [r7, #4]
 8003e18:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003e1a:	4942      	ldr	r1, [pc, #264]	; (8003f24 <HAL_RCCEx_PeriphCLKConfig+0x8e4>)
 8003e1c:	4313      	orrs	r3, r2
 8003e1e:	654b      	str	r3, [r1, #84]	; 0x54
 8003e20:	e001      	b.n	8003e26 <HAL_RCCEx_PeriphCLKConfig+0x7e6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003e22:	7dfb      	ldrb	r3, [r7, #23]
 8003e24:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*-------------------------- USART2/3/4/5/7/8 Configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
 8003e26:	687b      	ldr	r3, [r7, #4]
 8003e28:	681b      	ldr	r3, [r3, #0]
 8003e2a:	f003 0302 	and.w	r3, r3, #2
 8003e2e:	2b00      	cmp	r3, #0
 8003e30:	d037      	beq.n	8003ea2 <HAL_RCCEx_PeriphCLKConfig+0x862>
  {
    switch(PeriphClkInit->Usart234578ClockSelection)
 8003e32:	687b      	ldr	r3, [r7, #4]
 8003e34:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003e36:	2b05      	cmp	r3, #5
 8003e38:	d820      	bhi.n	8003e7c <HAL_RCCEx_PeriphCLKConfig+0x83c>
 8003e3a:	a201      	add	r2, pc, #4	; (adr r2, 8003e40 <HAL_RCCEx_PeriphCLKConfig+0x800>)
 8003e3c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003e40:	08003e83 	.word	0x08003e83
 8003e44:	08003e59 	.word	0x08003e59
 8003e48:	08003e6b 	.word	0x08003e6b
 8003e4c:	08003e83 	.word	0x08003e83
 8003e50:	08003e83 	.word	0x08003e83
 8003e54:	08003e83 	.word	0x08003e83
    case RCC_USART234578CLKSOURCE_PCLK1: /* CD/D2 PCLK1 as clock source for USART2/3/4/5/7/8 */
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;

    case RCC_USART234578CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART2/3/4/5/7/8 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8003e58:	687b      	ldr	r3, [r7, #4]
 8003e5a:	3304      	adds	r3, #4
 8003e5c:	2101      	movs	r1, #1
 8003e5e:	4618      	mov	r0, r3
 8003e60:	f000 fdfc 	bl	8004a5c <RCCEx_PLL2_Config>
 8003e64:	4603      	mov	r3, r0
 8003e66:	75fb      	strb	r3, [r7, #23]
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;
 8003e68:	e00c      	b.n	8003e84 <HAL_RCCEx_PeriphCLKConfig+0x844>

    case RCC_USART234578CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART2/3/4/5/7/8 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8003e6a:	687b      	ldr	r3, [r7, #4]
 8003e6c:	3324      	adds	r3, #36	; 0x24
 8003e6e:	2101      	movs	r1, #1
 8003e70:	4618      	mov	r0, r3
 8003e72:	f000 fea5 	bl	8004bc0 <RCCEx_PLL3_Config>
 8003e76:	4603      	mov	r3, r0
 8003e78:	75fb      	strb	r3, [r7, #23]
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;
 8003e7a:	e003      	b.n	8003e84 <HAL_RCCEx_PeriphCLKConfig+0x844>
      /* LSE,  oscillator is used as source of USART2/3/4/5/7/8 clock */
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8003e7c:	2301      	movs	r3, #1
 8003e7e:	75fb      	strb	r3, [r7, #23]
      break;
 8003e80:	e000      	b.n	8003e84 <HAL_RCCEx_PeriphCLKConfig+0x844>
      break;
 8003e82:	bf00      	nop
    }

    if(ret == HAL_OK)
 8003e84:	7dfb      	ldrb	r3, [r7, #23]
 8003e86:	2b00      	cmp	r3, #0
 8003e88:	d109      	bne.n	8003e9e <HAL_RCCEx_PeriphCLKConfig+0x85e>
    {
      /* Set the source of USART2/3/4/5/7/8 clock */
      __HAL_RCC_USART234578_CONFIG(PeriphClkInit->Usart234578ClockSelection);
 8003e8a:	4b26      	ldr	r3, [pc, #152]	; (8003f24 <HAL_RCCEx_PeriphCLKConfig+0x8e4>)
 8003e8c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003e8e:	f023 0207 	bic.w	r2, r3, #7
 8003e92:	687b      	ldr	r3, [r7, #4]
 8003e94:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003e96:	4923      	ldr	r1, [pc, #140]	; (8003f24 <HAL_RCCEx_PeriphCLKConfig+0x8e4>)
 8003e98:	4313      	orrs	r3, r2
 8003e9a:	654b      	str	r3, [r1, #84]	; 0x54
 8003e9c:	e001      	b.n	8003ea2 <HAL_RCCEx_PeriphCLKConfig+0x862>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003e9e:	7dfb      	ldrb	r3, [r7, #23]
 8003ea0:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*-------------------------- LPUART1 Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8003ea2:	687b      	ldr	r3, [r7, #4]
 8003ea4:	681b      	ldr	r3, [r3, #0]
 8003ea6:	f003 0304 	and.w	r3, r3, #4
 8003eaa:	2b00      	cmp	r3, #0
 8003eac:	d040      	beq.n	8003f30 <HAL_RCCEx_PeriphCLKConfig+0x8f0>
  {
    switch(PeriphClkInit->Lpuart1ClockSelection)
 8003eae:	687b      	ldr	r3, [r7, #4]
 8003eb0:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8003eb4:	2b05      	cmp	r3, #5
 8003eb6:	d821      	bhi.n	8003efc <HAL_RCCEx_PeriphCLKConfig+0x8bc>
 8003eb8:	a201      	add	r2, pc, #4	; (adr r2, 8003ec0 <HAL_RCCEx_PeriphCLKConfig+0x880>)
 8003eba:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003ebe:	bf00      	nop
 8003ec0:	08003f03 	.word	0x08003f03
 8003ec4:	08003ed9 	.word	0x08003ed9
 8003ec8:	08003eeb 	.word	0x08003eeb
 8003ecc:	08003f03 	.word	0x08003f03
 8003ed0:	08003f03 	.word	0x08003f03
 8003ed4:	08003f03 	.word	0x08003f03
    case RCC_LPUART1CLKSOURCE_PCLK4: /* SRD/D3 PCLK1 (PCLK4) as clock source for LPUART1 */
      /* LPUART1 clock source configuration done later after clock selection check */
      break;

    case RCC_LPUART1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPUART1 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8003ed8:	687b      	ldr	r3, [r7, #4]
 8003eda:	3304      	adds	r3, #4
 8003edc:	2101      	movs	r1, #1
 8003ede:	4618      	mov	r0, r3
 8003ee0:	f000 fdbc 	bl	8004a5c <RCCEx_PLL2_Config>
 8003ee4:	4603      	mov	r3, r0
 8003ee6:	75fb      	strb	r3, [r7, #23]
      /* LPUART1 clock source configuration done later after clock selection check */
      break;
 8003ee8:	e00c      	b.n	8003f04 <HAL_RCCEx_PeriphCLKConfig+0x8c4>

    case RCC_LPUART1CLKSOURCE_PLL3: /* PLL3 is used as clock source for LPUART1 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8003eea:	687b      	ldr	r3, [r7, #4]
 8003eec:	3324      	adds	r3, #36	; 0x24
 8003eee:	2101      	movs	r1, #1
 8003ef0:	4618      	mov	r0, r3
 8003ef2:	f000 fe65 	bl	8004bc0 <RCCEx_PLL3_Config>
 8003ef6:	4603      	mov	r3, r0
 8003ef8:	75fb      	strb	r3, [r7, #23]
      /* LPUART1 clock source configuration done later after clock selection check */
      break;
 8003efa:	e003      	b.n	8003f04 <HAL_RCCEx_PeriphCLKConfig+0x8c4>
      /* LSE,  oscillator is used as source of LPUART1 clock */
      /* LPUART1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8003efc:	2301      	movs	r3, #1
 8003efe:	75fb      	strb	r3, [r7, #23]
      break;
 8003f00:	e000      	b.n	8003f04 <HAL_RCCEx_PeriphCLKConfig+0x8c4>
      break;
 8003f02:	bf00      	nop
    }

    if(ret == HAL_OK)
 8003f04:	7dfb      	ldrb	r3, [r7, #23]
 8003f06:	2b00      	cmp	r3, #0
 8003f08:	d110      	bne.n	8003f2c <HAL_RCCEx_PeriphCLKConfig+0x8ec>
    {
      /* Set the source of LPUART1 clock */
      __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8003f0a:	4b06      	ldr	r3, [pc, #24]	; (8003f24 <HAL_RCCEx_PeriphCLKConfig+0x8e4>)
 8003f0c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003f0e:	f023 0207 	bic.w	r2, r3, #7
 8003f12:	687b      	ldr	r3, [r7, #4]
 8003f14:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8003f18:	4902      	ldr	r1, [pc, #8]	; (8003f24 <HAL_RCCEx_PeriphCLKConfig+0x8e4>)
 8003f1a:	4313      	orrs	r3, r2
 8003f1c:	658b      	str	r3, [r1, #88]	; 0x58
 8003f1e:	e007      	b.n	8003f30 <HAL_RCCEx_PeriphCLKConfig+0x8f0>
 8003f20:	58024800 	.word	0x58024800
 8003f24:	58024400 	.word	0x58024400
 8003f28:	00ffffcf 	.word	0x00ffffcf
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003f2c:	7dfb      	ldrb	r3, [r7, #23]
 8003f2e:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM1 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8003f30:	687b      	ldr	r3, [r7, #4]
 8003f32:	681b      	ldr	r3, [r3, #0]
 8003f34:	f003 0320 	and.w	r3, r3, #32
 8003f38:	2b00      	cmp	r3, #0
 8003f3a:	d04b      	beq.n	8003fd4 <HAL_RCCEx_PeriphCLKConfig+0x994>
  {
    switch(PeriphClkInit->Lptim1ClockSelection)
 8003f3c:	687b      	ldr	r3, [r7, #4]
 8003f3e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003f42:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8003f46:	d02e      	beq.n	8003fa6 <HAL_RCCEx_PeriphCLKConfig+0x966>
 8003f48:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8003f4c:	d828      	bhi.n	8003fa0 <HAL_RCCEx_PeriphCLKConfig+0x960>
 8003f4e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003f52:	d02a      	beq.n	8003faa <HAL_RCCEx_PeriphCLKConfig+0x96a>
 8003f54:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003f58:	d822      	bhi.n	8003fa0 <HAL_RCCEx_PeriphCLKConfig+0x960>
 8003f5a:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8003f5e:	d026      	beq.n	8003fae <HAL_RCCEx_PeriphCLKConfig+0x96e>
 8003f60:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8003f64:	d81c      	bhi.n	8003fa0 <HAL_RCCEx_PeriphCLKConfig+0x960>
 8003f66:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8003f6a:	d010      	beq.n	8003f8e <HAL_RCCEx_PeriphCLKConfig+0x94e>
 8003f6c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8003f70:	d816      	bhi.n	8003fa0 <HAL_RCCEx_PeriphCLKConfig+0x960>
 8003f72:	2b00      	cmp	r3, #0
 8003f74:	d01d      	beq.n	8003fb2 <HAL_RCCEx_PeriphCLKConfig+0x972>
 8003f76:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8003f7a:	d111      	bne.n	8003fa0 <HAL_RCCEx_PeriphCLKConfig+0x960>
      /* LPTIM1 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM1*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8003f7c:	687b      	ldr	r3, [r7, #4]
 8003f7e:	3304      	adds	r3, #4
 8003f80:	2100      	movs	r1, #0
 8003f82:	4618      	mov	r0, r3
 8003f84:	f000 fd6a 	bl	8004a5c <RCCEx_PLL2_Config>
 8003f88:	4603      	mov	r3, r0
 8003f8a:	75fb      	strb	r3, [r7, #23]

      /* LPTIM1 clock source configuration done later after clock selection check */
      break;
 8003f8c:	e012      	b.n	8003fb4 <HAL_RCCEx_PeriphCLKConfig+0x974>

    case RCC_LPTIM1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM1*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8003f8e:	687b      	ldr	r3, [r7, #4]
 8003f90:	3324      	adds	r3, #36	; 0x24
 8003f92:	2102      	movs	r1, #2
 8003f94:	4618      	mov	r0, r3
 8003f96:	f000 fe13 	bl	8004bc0 <RCCEx_PLL3_Config>
 8003f9a:	4603      	mov	r3, r0
 8003f9c:	75fb      	strb	r3, [r7, #23]

      /* LPTIM1 clock source configuration done later after clock selection check */
      break;
 8003f9e:	e009      	b.n	8003fb4 <HAL_RCCEx_PeriphCLKConfig+0x974>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM1 clock */
      /* LPTIM1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8003fa0:	2301      	movs	r3, #1
 8003fa2:	75fb      	strb	r3, [r7, #23]
      break;
 8003fa4:	e006      	b.n	8003fb4 <HAL_RCCEx_PeriphCLKConfig+0x974>
      break;
 8003fa6:	bf00      	nop
 8003fa8:	e004      	b.n	8003fb4 <HAL_RCCEx_PeriphCLKConfig+0x974>
      break;
 8003faa:	bf00      	nop
 8003fac:	e002      	b.n	8003fb4 <HAL_RCCEx_PeriphCLKConfig+0x974>
      break;
 8003fae:	bf00      	nop
 8003fb0:	e000      	b.n	8003fb4 <HAL_RCCEx_PeriphCLKConfig+0x974>
      break;
 8003fb2:	bf00      	nop
    }

    if(ret == HAL_OK)
 8003fb4:	7dfb      	ldrb	r3, [r7, #23]
 8003fb6:	2b00      	cmp	r3, #0
 8003fb8:	d10a      	bne.n	8003fd0 <HAL_RCCEx_PeriphCLKConfig+0x990>
    {
      /* Set the source of LPTIM1 clock*/
      __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8003fba:	4bb2      	ldr	r3, [pc, #712]	; (8004284 <HAL_RCCEx_PeriphCLKConfig+0xc44>)
 8003fbc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003fbe:	f023 42e0 	bic.w	r2, r3, #1879048192	; 0x70000000
 8003fc2:	687b      	ldr	r3, [r7, #4]
 8003fc4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003fc8:	49ae      	ldr	r1, [pc, #696]	; (8004284 <HAL_RCCEx_PeriphCLKConfig+0xc44>)
 8003fca:	4313      	orrs	r3, r2
 8003fcc:	654b      	str	r3, [r1, #84]	; 0x54
 8003fce:	e001      	b.n	8003fd4 <HAL_RCCEx_PeriphCLKConfig+0x994>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003fd0:	7dfb      	ldrb	r3, [r7, #23]
 8003fd2:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM2 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 8003fd4:	687b      	ldr	r3, [r7, #4]
 8003fd6:	681b      	ldr	r3, [r3, #0]
 8003fd8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003fdc:	2b00      	cmp	r3, #0
 8003fde:	d04b      	beq.n	8004078 <HAL_RCCEx_PeriphCLKConfig+0xa38>
  {
    switch(PeriphClkInit->Lptim2ClockSelection)
 8003fe0:	687b      	ldr	r3, [r7, #4]
 8003fe2:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003fe6:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 8003fea:	d02e      	beq.n	800404a <HAL_RCCEx_PeriphCLKConfig+0xa0a>
 8003fec:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 8003ff0:	d828      	bhi.n	8004044 <HAL_RCCEx_PeriphCLKConfig+0xa04>
 8003ff2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003ff6:	d02a      	beq.n	800404e <HAL_RCCEx_PeriphCLKConfig+0xa0e>
 8003ff8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003ffc:	d822      	bhi.n	8004044 <HAL_RCCEx_PeriphCLKConfig+0xa04>
 8003ffe:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8004002:	d026      	beq.n	8004052 <HAL_RCCEx_PeriphCLKConfig+0xa12>
 8004004:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8004008:	d81c      	bhi.n	8004044 <HAL_RCCEx_PeriphCLKConfig+0xa04>
 800400a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800400e:	d010      	beq.n	8004032 <HAL_RCCEx_PeriphCLKConfig+0x9f2>
 8004010:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004014:	d816      	bhi.n	8004044 <HAL_RCCEx_PeriphCLKConfig+0xa04>
 8004016:	2b00      	cmp	r3, #0
 8004018:	d01d      	beq.n	8004056 <HAL_RCCEx_PeriphCLKConfig+0xa16>
 800401a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800401e:	d111      	bne.n	8004044 <HAL_RCCEx_PeriphCLKConfig+0xa04>
      /* LPTIM2 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM2CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8004020:	687b      	ldr	r3, [r7, #4]
 8004022:	3304      	adds	r3, #4
 8004024:	2100      	movs	r1, #0
 8004026:	4618      	mov	r0, r3
 8004028:	f000 fd18 	bl	8004a5c <RCCEx_PLL2_Config>
 800402c:	4603      	mov	r3, r0
 800402e:	75fb      	strb	r3, [r7, #23]

      /* LPTIM2 clock source configuration done later after clock selection check */
      break;
 8004030:	e012      	b.n	8004058 <HAL_RCCEx_PeriphCLKConfig+0xa18>

    case RCC_LPTIM2CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8004032:	687b      	ldr	r3, [r7, #4]
 8004034:	3324      	adds	r3, #36	; 0x24
 8004036:	2102      	movs	r1, #2
 8004038:	4618      	mov	r0, r3
 800403a:	f000 fdc1 	bl	8004bc0 <RCCEx_PLL3_Config>
 800403e:	4603      	mov	r3, r0
 8004040:	75fb      	strb	r3, [r7, #23]

      /* LPTIM2 clock source configuration done later after clock selection check */
      break;
 8004042:	e009      	b.n	8004058 <HAL_RCCEx_PeriphCLKConfig+0xa18>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM2 clock */
      /* LPTIM2 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8004044:	2301      	movs	r3, #1
 8004046:	75fb      	strb	r3, [r7, #23]
      break;
 8004048:	e006      	b.n	8004058 <HAL_RCCEx_PeriphCLKConfig+0xa18>
      break;
 800404a:	bf00      	nop
 800404c:	e004      	b.n	8004058 <HAL_RCCEx_PeriphCLKConfig+0xa18>
      break;
 800404e:	bf00      	nop
 8004050:	e002      	b.n	8004058 <HAL_RCCEx_PeriphCLKConfig+0xa18>
      break;
 8004052:	bf00      	nop
 8004054:	e000      	b.n	8004058 <HAL_RCCEx_PeriphCLKConfig+0xa18>
      break;
 8004056:	bf00      	nop
    }

    if(ret == HAL_OK)
 8004058:	7dfb      	ldrb	r3, [r7, #23]
 800405a:	2b00      	cmp	r3, #0
 800405c:	d10a      	bne.n	8004074 <HAL_RCCEx_PeriphCLKConfig+0xa34>
    {
      /* Set the source of LPTIM2 clock*/
      __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 800405e:	4b89      	ldr	r3, [pc, #548]	; (8004284 <HAL_RCCEx_PeriphCLKConfig+0xc44>)
 8004060:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004062:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8004066:	687b      	ldr	r3, [r7, #4]
 8004068:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800406c:	4985      	ldr	r1, [pc, #532]	; (8004284 <HAL_RCCEx_PeriphCLKConfig+0xc44>)
 800406e:	4313      	orrs	r3, r2
 8004070:	658b      	str	r3, [r1, #88]	; 0x58
 8004072:	e001      	b.n	8004078 <HAL_RCCEx_PeriphCLKConfig+0xa38>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004074:	7dfb      	ldrb	r3, [r7, #23]
 8004076:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM345 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
 8004078:	687b      	ldr	r3, [r7, #4]
 800407a:	681b      	ldr	r3, [r3, #0]
 800407c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004080:	2b00      	cmp	r3, #0
 8004082:	d04b      	beq.n	800411c <HAL_RCCEx_PeriphCLKConfig+0xadc>
  {
    switch(PeriphClkInit->Lptim345ClockSelection)
 8004084:	687b      	ldr	r3, [r7, #4]
 8004086:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800408a:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 800408e:	d02e      	beq.n	80040ee <HAL_RCCEx_PeriphCLKConfig+0xaae>
 8004090:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 8004094:	d828      	bhi.n	80040e8 <HAL_RCCEx_PeriphCLKConfig+0xaa8>
 8004096:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800409a:	d02a      	beq.n	80040f2 <HAL_RCCEx_PeriphCLKConfig+0xab2>
 800409c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80040a0:	d822      	bhi.n	80040e8 <HAL_RCCEx_PeriphCLKConfig+0xaa8>
 80040a2:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 80040a6:	d026      	beq.n	80040f6 <HAL_RCCEx_PeriphCLKConfig+0xab6>
 80040a8:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 80040ac:	d81c      	bhi.n	80040e8 <HAL_RCCEx_PeriphCLKConfig+0xaa8>
 80040ae:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80040b2:	d010      	beq.n	80040d6 <HAL_RCCEx_PeriphCLKConfig+0xa96>
 80040b4:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80040b8:	d816      	bhi.n	80040e8 <HAL_RCCEx_PeriphCLKConfig+0xaa8>
 80040ba:	2b00      	cmp	r3, #0
 80040bc:	d01d      	beq.n	80040fa <HAL_RCCEx_PeriphCLKConfig+0xaba>
 80040be:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80040c2:	d111      	bne.n	80040e8 <HAL_RCCEx_PeriphCLKConfig+0xaa8>
    case RCC_LPTIM345CLKSOURCE_PCLK4:      /* SRD/D3 PCLK1 (PCLK4) as clock source for LPTIM3/4/5 */
      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM345CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM3/4/5 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 80040c4:	687b      	ldr	r3, [r7, #4]
 80040c6:	3304      	adds	r3, #4
 80040c8:	2100      	movs	r1, #0
 80040ca:	4618      	mov	r0, r3
 80040cc:	f000 fcc6 	bl	8004a5c <RCCEx_PLL2_Config>
 80040d0:	4603      	mov	r3, r0
 80040d2:	75fb      	strb	r3, [r7, #23]

      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;
 80040d4:	e012      	b.n	80040fc <HAL_RCCEx_PeriphCLKConfig+0xabc>

    case RCC_LPTIM345CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM3/4/5 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 80040d6:	687b      	ldr	r3, [r7, #4]
 80040d8:	3324      	adds	r3, #36	; 0x24
 80040da:	2102      	movs	r1, #2
 80040dc:	4618      	mov	r0, r3
 80040de:	f000 fd6f 	bl	8004bc0 <RCCEx_PLL3_Config>
 80040e2:	4603      	mov	r3, r0
 80040e4:	75fb      	strb	r3, [r7, #23]

      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;
 80040e6:	e009      	b.n	80040fc <HAL_RCCEx_PeriphCLKConfig+0xabc>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM3/4/5 clock */
      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80040e8:	2301      	movs	r3, #1
 80040ea:	75fb      	strb	r3, [r7, #23]
      break;
 80040ec:	e006      	b.n	80040fc <HAL_RCCEx_PeriphCLKConfig+0xabc>
      break;
 80040ee:	bf00      	nop
 80040f0:	e004      	b.n	80040fc <HAL_RCCEx_PeriphCLKConfig+0xabc>
      break;
 80040f2:	bf00      	nop
 80040f4:	e002      	b.n	80040fc <HAL_RCCEx_PeriphCLKConfig+0xabc>
      break;
 80040f6:	bf00      	nop
 80040f8:	e000      	b.n	80040fc <HAL_RCCEx_PeriphCLKConfig+0xabc>
      break;
 80040fa:	bf00      	nop
    }

    if(ret == HAL_OK)
 80040fc:	7dfb      	ldrb	r3, [r7, #23]
 80040fe:	2b00      	cmp	r3, #0
 8004100:	d10a      	bne.n	8004118 <HAL_RCCEx_PeriphCLKConfig+0xad8>
    {
      /* Set the source of LPTIM3/4/5 clock */
      __HAL_RCC_LPTIM345_CONFIG(PeriphClkInit->Lptim345ClockSelection);
 8004102:	4b60      	ldr	r3, [pc, #384]	; (8004284 <HAL_RCCEx_PeriphCLKConfig+0xc44>)
 8004104:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004106:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800410a:	687b      	ldr	r3, [r7, #4]
 800410c:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8004110:	495c      	ldr	r1, [pc, #368]	; (8004284 <HAL_RCCEx_PeriphCLKConfig+0xc44>)
 8004112:	4313      	orrs	r3, r2
 8004114:	658b      	str	r3, [r1, #88]	; 0x58
 8004116:	e001      	b.n	800411c <HAL_RCCEx_PeriphCLKConfig+0xadc>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004118:	7dfb      	ldrb	r3, [r7, #23]
 800411a:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*------------------------------ I2C1/2/3/5* Configuration ------------------------*/
#if defined(I2C5)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1235) == RCC_PERIPHCLK_I2C1235)
 800411c:	687b      	ldr	r3, [r7, #4]
 800411e:	681b      	ldr	r3, [r3, #0]
 8004120:	f003 0308 	and.w	r3, r3, #8
 8004124:	2b00      	cmp	r3, #0
 8004126:	d018      	beq.n	800415a <HAL_RCCEx_PeriphCLKConfig+0xb1a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1235CLKSOURCE(PeriphClkInit->I2c1235ClockSelection));

    if ((PeriphClkInit->I2c1235ClockSelection )== RCC_I2C1235CLKSOURCE_PLL3 )
 8004128:	687b      	ldr	r3, [r7, #4]
 800412a:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800412c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004130:	d10a      	bne.n	8004148 <HAL_RCCEx_PeriphCLKConfig+0xb08>
    {
        if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!= HAL_OK)
 8004132:	687b      	ldr	r3, [r7, #4]
 8004134:	3324      	adds	r3, #36	; 0x24
 8004136:	2102      	movs	r1, #2
 8004138:	4618      	mov	r0, r3
 800413a:	f000 fd41 	bl	8004bc0 <RCCEx_PLL3_Config>
 800413e:	4603      	mov	r3, r0
 8004140:	2b00      	cmp	r3, #0
 8004142:	d001      	beq.n	8004148 <HAL_RCCEx_PeriphCLKConfig+0xb08>
        {
          status = HAL_ERROR;
 8004144:	2301      	movs	r3, #1
 8004146:	75bb      	strb	r3, [r7, #22]
        }
    }

      __HAL_RCC_I2C1235_CONFIG(PeriphClkInit->I2c1235ClockSelection);
 8004148:	4b4e      	ldr	r3, [pc, #312]	; (8004284 <HAL_RCCEx_PeriphCLKConfig+0xc44>)
 800414a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800414c:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8004150:	687b      	ldr	r3, [r7, #4]
 8004152:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8004154:	494b      	ldr	r1, [pc, #300]	; (8004284 <HAL_RCCEx_PeriphCLKConfig+0xc44>)
 8004156:	4313      	orrs	r3, r2
 8004158:	654b      	str	r3, [r1, #84]	; 0x54

  }
#endif /* I2C5 */

  /*------------------------------ I2C4 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 800415a:	687b      	ldr	r3, [r7, #4]
 800415c:	681b      	ldr	r3, [r3, #0]
 800415e:	f003 0310 	and.w	r3, r3, #16
 8004162:	2b00      	cmp	r3, #0
 8004164:	d01a      	beq.n	800419c <HAL_RCCEx_PeriphCLKConfig+0xb5c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    if ((PeriphClkInit->I2c4ClockSelection) == RCC_I2C4CLKSOURCE_PLL3 )
 8004166:	687b      	ldr	r3, [r7, #4]
 8004168:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800416c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004170:	d10a      	bne.n	8004188 <HAL_RCCEx_PeriphCLKConfig+0xb48>
    {
      if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!= HAL_OK)
 8004172:	687b      	ldr	r3, [r7, #4]
 8004174:	3324      	adds	r3, #36	; 0x24
 8004176:	2102      	movs	r1, #2
 8004178:	4618      	mov	r0, r3
 800417a:	f000 fd21 	bl	8004bc0 <RCCEx_PLL3_Config>
 800417e:	4603      	mov	r3, r0
 8004180:	2b00      	cmp	r3, #0
 8004182:	d001      	beq.n	8004188 <HAL_RCCEx_PeriphCLKConfig+0xb48>
      {
        status = HAL_ERROR;
 8004184:	2301      	movs	r3, #1
 8004186:	75bb      	strb	r3, [r7, #22]
      }
    }

      __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8004188:	4b3e      	ldr	r3, [pc, #248]	; (8004284 <HAL_RCCEx_PeriphCLKConfig+0xc44>)
 800418a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800418c:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8004190:	687b      	ldr	r3, [r7, #4]
 8004192:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004196:	493b      	ldr	r1, [pc, #236]	; (8004284 <HAL_RCCEx_PeriphCLKConfig+0xc44>)
 8004198:	4313      	orrs	r3, r2
 800419a:	658b      	str	r3, [r1, #88]	; 0x58

  }

  /*---------------------------- ADC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 800419c:	687b      	ldr	r3, [r7, #4]
 800419e:	681b      	ldr	r3, [r3, #0]
 80041a0:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80041a4:	2b00      	cmp	r3, #0
 80041a6:	d034      	beq.n	8004212 <HAL_RCCEx_PeriphCLKConfig+0xbd2>
  {
    switch(PeriphClkInit->AdcClockSelection)
 80041a8:	687b      	ldr	r3, [r7, #4]
 80041aa:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80041ae:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80041b2:	d01d      	beq.n	80041f0 <HAL_RCCEx_PeriphCLKConfig+0xbb0>
 80041b4:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80041b8:	d817      	bhi.n	80041ea <HAL_RCCEx_PeriphCLKConfig+0xbaa>
 80041ba:	2b00      	cmp	r3, #0
 80041bc:	d003      	beq.n	80041c6 <HAL_RCCEx_PeriphCLKConfig+0xb86>
 80041be:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80041c2:	d009      	beq.n	80041d8 <HAL_RCCEx_PeriphCLKConfig+0xb98>
 80041c4:	e011      	b.n	80041ea <HAL_RCCEx_PeriphCLKConfig+0xbaa>
    {

    case RCC_ADCCLKSOURCE_PLL2: /* PLL2 is used as clock source for ADC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 80041c6:	687b      	ldr	r3, [r7, #4]
 80041c8:	3304      	adds	r3, #4
 80041ca:	2100      	movs	r1, #0
 80041cc:	4618      	mov	r0, r3
 80041ce:	f000 fc45 	bl	8004a5c <RCCEx_PLL2_Config>
 80041d2:	4603      	mov	r3, r0
 80041d4:	75fb      	strb	r3, [r7, #23]

      /* ADC clock source configuration done later after clock selection check */
      break;
 80041d6:	e00c      	b.n	80041f2 <HAL_RCCEx_PeriphCLKConfig+0xbb2>

    case RCC_ADCCLKSOURCE_PLL3:  /* PLL3 is used as clock source for ADC*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 80041d8:	687b      	ldr	r3, [r7, #4]
 80041da:	3324      	adds	r3, #36	; 0x24
 80041dc:	2102      	movs	r1, #2
 80041de:	4618      	mov	r0, r3
 80041e0:	f000 fcee 	bl	8004bc0 <RCCEx_PLL3_Config>
 80041e4:	4603      	mov	r3, r0
 80041e6:	75fb      	strb	r3, [r7, #23]

      /* ADC clock source configuration done later after clock selection check */
      break;
 80041e8:	e003      	b.n	80041f2 <HAL_RCCEx_PeriphCLKConfig+0xbb2>
      /* HSI, HSE, or CSI oscillator is used as source of ADC clock */
      /* ADC clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80041ea:	2301      	movs	r3, #1
 80041ec:	75fb      	strb	r3, [r7, #23]
      break;
 80041ee:	e000      	b.n	80041f2 <HAL_RCCEx_PeriphCLKConfig+0xbb2>
      break;
 80041f0:	bf00      	nop
    }

    if(ret == HAL_OK)
 80041f2:	7dfb      	ldrb	r3, [r7, #23]
 80041f4:	2b00      	cmp	r3, #0
 80041f6:	d10a      	bne.n	800420e <HAL_RCCEx_PeriphCLKConfig+0xbce>
    {
      /* Set the source of ADC clock*/
      __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 80041f8:	4b22      	ldr	r3, [pc, #136]	; (8004284 <HAL_RCCEx_PeriphCLKConfig+0xc44>)
 80041fa:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80041fc:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8004200:	687b      	ldr	r3, [r7, #4]
 8004202:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8004206:	491f      	ldr	r1, [pc, #124]	; (8004284 <HAL_RCCEx_PeriphCLKConfig+0xc44>)
 8004208:	4313      	orrs	r3, r2
 800420a:	658b      	str	r3, [r1, #88]	; 0x58
 800420c:	e001      	b.n	8004212 <HAL_RCCEx_PeriphCLKConfig+0xbd2>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800420e:	7dfb      	ldrb	r3, [r7, #23]
 8004210:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*------------------------------ USB Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8004212:	687b      	ldr	r3, [r7, #4]
 8004214:	681b      	ldr	r3, [r3, #0]
 8004216:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800421a:	2b00      	cmp	r3, #0
 800421c:	d036      	beq.n	800428c <HAL_RCCEx_PeriphCLKConfig+0xc4c>
  {

    switch(PeriphClkInit->UsbClockSelection)
 800421e:	687b      	ldr	r3, [r7, #4]
 8004220:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8004224:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8004228:	d01c      	beq.n	8004264 <HAL_RCCEx_PeriphCLKConfig+0xc24>
 800422a:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 800422e:	d816      	bhi.n	800425e <HAL_RCCEx_PeriphCLKConfig+0xc1e>
 8004230:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8004234:	d003      	beq.n	800423e <HAL_RCCEx_PeriphCLKConfig+0xbfe>
 8004236:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800423a:	d007      	beq.n	800424c <HAL_RCCEx_PeriphCLKConfig+0xc0c>
 800423c:	e00f      	b.n	800425e <HAL_RCCEx_PeriphCLKConfig+0xc1e>
    {
    case RCC_USBCLKSOURCE_PLL:      /* PLL is used as clock source for USB*/
      /* Enable USB Clock output generated form System USB . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800423e:	4b11      	ldr	r3, [pc, #68]	; (8004284 <HAL_RCCEx_PeriphCLKConfig+0xc44>)
 8004240:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004242:	4a10      	ldr	r2, [pc, #64]	; (8004284 <HAL_RCCEx_PeriphCLKConfig+0xc44>)
 8004244:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004248:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* USB clock source configuration done later after clock selection check */
      break;
 800424a:	e00c      	b.n	8004266 <HAL_RCCEx_PeriphCLKConfig+0xc26>

    case RCC_USBCLKSOURCE_PLL3: /* PLL3 is used as clock source for USB*/

      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 800424c:	687b      	ldr	r3, [r7, #4]
 800424e:	3324      	adds	r3, #36	; 0x24
 8004250:	2101      	movs	r1, #1
 8004252:	4618      	mov	r0, r3
 8004254:	f000 fcb4 	bl	8004bc0 <RCCEx_PLL3_Config>
 8004258:	4603      	mov	r3, r0
 800425a:	75fb      	strb	r3, [r7, #23]

      /* USB clock source configuration done later after clock selection check */
      break;
 800425c:	e003      	b.n	8004266 <HAL_RCCEx_PeriphCLKConfig+0xc26>
      /* HSI48 oscillator is used as source of USB clock */
      /* USB clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800425e:	2301      	movs	r3, #1
 8004260:	75fb      	strb	r3, [r7, #23]
      break;
 8004262:	e000      	b.n	8004266 <HAL_RCCEx_PeriphCLKConfig+0xc26>
      break;
 8004264:	bf00      	nop
    }

    if(ret == HAL_OK)
 8004266:	7dfb      	ldrb	r3, [r7, #23]
 8004268:	2b00      	cmp	r3, #0
 800426a:	d10d      	bne.n	8004288 <HAL_RCCEx_PeriphCLKConfig+0xc48>
    {
      /* Set the source of USB clock*/
      __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 800426c:	4b05      	ldr	r3, [pc, #20]	; (8004284 <HAL_RCCEx_PeriphCLKConfig+0xc44>)
 800426e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004270:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8004274:	687b      	ldr	r3, [r7, #4]
 8004276:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800427a:	4902      	ldr	r1, [pc, #8]	; (8004284 <HAL_RCCEx_PeriphCLKConfig+0xc44>)
 800427c:	4313      	orrs	r3, r2
 800427e:	654b      	str	r3, [r1, #84]	; 0x54
 8004280:	e004      	b.n	800428c <HAL_RCCEx_PeriphCLKConfig+0xc4c>
 8004282:	bf00      	nop
 8004284:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004288:	7dfb      	ldrb	r3, [r7, #23]
 800428a:	75bb      	strb	r3, [r7, #22]
    }

  }

  /*------------------------------------- SDMMC Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == RCC_PERIPHCLK_SDMMC)
 800428c:	687b      	ldr	r3, [r7, #4]
 800428e:	681b      	ldr	r3, [r3, #0]
 8004290:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004294:	2b00      	cmp	r3, #0
 8004296:	d029      	beq.n	80042ec <HAL_RCCEx_PeriphCLKConfig+0xcac>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC(PeriphClkInit->SdmmcClockSelection));

    switch(PeriphClkInit->SdmmcClockSelection)
 8004298:	687b      	ldr	r3, [r7, #4]
 800429a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800429c:	2b00      	cmp	r3, #0
 800429e:	d003      	beq.n	80042a8 <HAL_RCCEx_PeriphCLKConfig+0xc68>
 80042a0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80042a4:	d007      	beq.n	80042b6 <HAL_RCCEx_PeriphCLKConfig+0xc76>
 80042a6:	e00f      	b.n	80042c8 <HAL_RCCEx_PeriphCLKConfig+0xc88>
    {
    case RCC_SDMMCCLKSOURCE_PLL:      /* PLL is used as clock source for SDMMC*/
      /* Enable SDMMC Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80042a8:	4b61      	ldr	r3, [pc, #388]	; (8004430 <HAL_RCCEx_PeriphCLKConfig+0xdf0>)
 80042aa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80042ac:	4a60      	ldr	r2, [pc, #384]	; (8004430 <HAL_RCCEx_PeriphCLKConfig+0xdf0>)
 80042ae:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80042b2:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SDMMC clock source configuration done later after clock selection check */
      break;
 80042b4:	e00b      	b.n	80042ce <HAL_RCCEx_PeriphCLKConfig+0xc8e>

    case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for SDMMC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 80042b6:	687b      	ldr	r3, [r7, #4]
 80042b8:	3304      	adds	r3, #4
 80042ba:	2102      	movs	r1, #2
 80042bc:	4618      	mov	r0, r3
 80042be:	f000 fbcd 	bl	8004a5c <RCCEx_PLL2_Config>
 80042c2:	4603      	mov	r3, r0
 80042c4:	75fb      	strb	r3, [r7, #23]

      /* SDMMC clock source configuration done later after clock selection check */
      break;
 80042c6:	e002      	b.n	80042ce <HAL_RCCEx_PeriphCLKConfig+0xc8e>

    default:
      ret = HAL_ERROR;
 80042c8:	2301      	movs	r3, #1
 80042ca:	75fb      	strb	r3, [r7, #23]
      break;
 80042cc:	bf00      	nop
    }

    if(ret == HAL_OK)
 80042ce:	7dfb      	ldrb	r3, [r7, #23]
 80042d0:	2b00      	cmp	r3, #0
 80042d2:	d109      	bne.n	80042e8 <HAL_RCCEx_PeriphCLKConfig+0xca8>
    {
      /* Set the source of SDMMC clock*/
      __HAL_RCC_SDMMC_CONFIG(PeriphClkInit->SdmmcClockSelection);
 80042d4:	4b56      	ldr	r3, [pc, #344]	; (8004430 <HAL_RCCEx_PeriphCLKConfig+0xdf0>)
 80042d6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80042d8:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 80042dc:	687b      	ldr	r3, [r7, #4]
 80042de:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80042e0:	4953      	ldr	r1, [pc, #332]	; (8004430 <HAL_RCCEx_PeriphCLKConfig+0xdf0>)
 80042e2:	4313      	orrs	r3, r2
 80042e4:	64cb      	str	r3, [r1, #76]	; 0x4c
 80042e6:	e001      	b.n	80042ec <HAL_RCCEx_PeriphCLKConfig+0xcac>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80042e8:	7dfb      	ldrb	r3, [r7, #23]
 80042ea:	75bb      	strb	r3, [r7, #22]
    }
  }

#if defined(LTDC)
  /*-------------------------------------- LTDC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 80042ec:	687b      	ldr	r3, [r7, #4]
 80042ee:	681b      	ldr	r3, [r3, #0]
 80042f0:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80042f4:	2b00      	cmp	r3, #0
 80042f6:	d00a      	beq.n	800430e <HAL_RCCEx_PeriphCLKConfig+0xcce>
  {
    if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!=HAL_OK)
 80042f8:	687b      	ldr	r3, [r7, #4]
 80042fa:	3324      	adds	r3, #36	; 0x24
 80042fc:	2102      	movs	r1, #2
 80042fe:	4618      	mov	r0, r3
 8004300:	f000 fc5e 	bl	8004bc0 <RCCEx_PLL3_Config>
 8004304:	4603      	mov	r3, r0
 8004306:	2b00      	cmp	r3, #0
 8004308:	d001      	beq.n	800430e <HAL_RCCEx_PeriphCLKConfig+0xcce>
    {
      status=HAL_ERROR;
 800430a:	2301      	movs	r3, #1
 800430c:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif /* LTDC */

  /*------------------------------ RNG Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 800430e:	687b      	ldr	r3, [r7, #4]
 8004310:	681b      	ldr	r3, [r3, #0]
 8004312:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004316:	2b00      	cmp	r3, #0
 8004318:	d030      	beq.n	800437c <HAL_RCCEx_PeriphCLKConfig+0xd3c>
  {

    switch(PeriphClkInit->RngClockSelection)
 800431a:	687b      	ldr	r3, [r7, #4]
 800431c:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800431e:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8004322:	d017      	beq.n	8004354 <HAL_RCCEx_PeriphCLKConfig+0xd14>
 8004324:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8004328:	d811      	bhi.n	800434e <HAL_RCCEx_PeriphCLKConfig+0xd0e>
 800432a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800432e:	d013      	beq.n	8004358 <HAL_RCCEx_PeriphCLKConfig+0xd18>
 8004330:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004334:	d80b      	bhi.n	800434e <HAL_RCCEx_PeriphCLKConfig+0xd0e>
 8004336:	2b00      	cmp	r3, #0
 8004338:	d010      	beq.n	800435c <HAL_RCCEx_PeriphCLKConfig+0xd1c>
 800433a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800433e:	d106      	bne.n	800434e <HAL_RCCEx_PeriphCLKConfig+0xd0e>
    {
    case RCC_RNGCLKSOURCE_PLL:     /* PLL is used as clock source for RNG*/
      /* Enable RNG Clock output generated form System RNG . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8004340:	4b3b      	ldr	r3, [pc, #236]	; (8004430 <HAL_RCCEx_PeriphCLKConfig+0xdf0>)
 8004342:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004344:	4a3a      	ldr	r2, [pc, #232]	; (8004430 <HAL_RCCEx_PeriphCLKConfig+0xdf0>)
 8004346:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800434a:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* RNG clock source configuration done later after clock selection check */
      break;
 800434c:	e007      	b.n	800435e <HAL_RCCEx_PeriphCLKConfig+0xd1e>
      /* HSI48 oscillator is used as source of RNG clock */
      /* RNG clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800434e:	2301      	movs	r3, #1
 8004350:	75fb      	strb	r3, [r7, #23]
      break;
 8004352:	e004      	b.n	800435e <HAL_RCCEx_PeriphCLKConfig+0xd1e>
      break;
 8004354:	bf00      	nop
 8004356:	e002      	b.n	800435e <HAL_RCCEx_PeriphCLKConfig+0xd1e>
      break;
 8004358:	bf00      	nop
 800435a:	e000      	b.n	800435e <HAL_RCCEx_PeriphCLKConfig+0xd1e>
      break;
 800435c:	bf00      	nop
    }

    if(ret == HAL_OK)
 800435e:	7dfb      	ldrb	r3, [r7, #23]
 8004360:	2b00      	cmp	r3, #0
 8004362:	d109      	bne.n	8004378 <HAL_RCCEx_PeriphCLKConfig+0xd38>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8004364:	4b32      	ldr	r3, [pc, #200]	; (8004430 <HAL_RCCEx_PeriphCLKConfig+0xdf0>)
 8004366:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004368:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800436c:	687b      	ldr	r3, [r7, #4]
 800436e:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8004370:	492f      	ldr	r1, [pc, #188]	; (8004430 <HAL_RCCEx_PeriphCLKConfig+0xdf0>)
 8004372:	4313      	orrs	r3, r2
 8004374:	654b      	str	r3, [r1, #84]	; 0x54
 8004376:	e001      	b.n	800437c <HAL_RCCEx_PeriphCLKConfig+0xd3c>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004378:	7dfb      	ldrb	r3, [r7, #23]
 800437a:	75bb      	strb	r3, [r7, #22]
    }

  }

  /*------------------------------ SWPMI1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 800437c:	687b      	ldr	r3, [r7, #4]
 800437e:	681b      	ldr	r3, [r3, #0]
 8004380:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8004384:	2b00      	cmp	r3, #0
 8004386:	d008      	beq.n	800439a <HAL_RCCEx_PeriphCLKConfig+0xd5a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 interface clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8004388:	4b29      	ldr	r3, [pc, #164]	; (8004430 <HAL_RCCEx_PeriphCLKConfig+0xdf0>)
 800438a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800438c:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8004390:	687b      	ldr	r3, [r7, #4]
 8004392:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8004394:	4926      	ldr	r1, [pc, #152]	; (8004430 <HAL_RCCEx_PeriphCLKConfig+0xdf0>)
 8004396:	4313      	orrs	r3, r2
 8004398:	650b      	str	r3, [r1, #80]	; 0x50
    /* Configure the HRTIM1 clock source */
    __HAL_RCC_HRTIM1_CONFIG(PeriphClkInit->Hrtim1ClockSelection);
  }
#endif  /*HRTIM1*/
  /*------------------------------ DFSDM1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 800439a:	687b      	ldr	r3, [r7, #4]
 800439c:	681b      	ldr	r3, [r3, #0]
 800439e:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80043a2:	2b00      	cmp	r3, #0
 80043a4:	d008      	beq.n	80043b8 <HAL_RCCEx_PeriphCLKConfig+0xd78>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 80043a6:	4b22      	ldr	r3, [pc, #136]	; (8004430 <HAL_RCCEx_PeriphCLKConfig+0xdf0>)
 80043a8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80043aa:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 80043ae:	687b      	ldr	r3, [r7, #4]
 80043b0:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80043b2:	491f      	ldr	r1, [pc, #124]	; (8004430 <HAL_RCCEx_PeriphCLKConfig+0xdf0>)
 80043b4:	4313      	orrs	r3, r2
 80043b6:	650b      	str	r3, [r1, #80]	; 0x50
    __HAL_RCC_DFSDM2_CONFIG(PeriphClkInit->Dfsdm2ClockSelection);
  }
#endif  /* DFSDM2 */

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
 80043b8:	687b      	ldr	r3, [r7, #4]
 80043ba:	681b      	ldr	r3, [r3, #0]
 80043bc:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 80043c0:	2b00      	cmp	r3, #0
 80043c2:	d00d      	beq.n	80043e0 <HAL_RCCEx_PeriphCLKConfig+0xda0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 80043c4:	4b1a      	ldr	r3, [pc, #104]	; (8004430 <HAL_RCCEx_PeriphCLKConfig+0xdf0>)
 80043c6:	691b      	ldr	r3, [r3, #16]
 80043c8:	4a19      	ldr	r2, [pc, #100]	; (8004430 <HAL_RCCEx_PeriphCLKConfig+0xdf0>)
 80043ca:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 80043ce:	6113      	str	r3, [r2, #16]
 80043d0:	4b17      	ldr	r3, [pc, #92]	; (8004430 <HAL_RCCEx_PeriphCLKConfig+0xdf0>)
 80043d2:	691a      	ldr	r2, [r3, #16]
 80043d4:	687b      	ldr	r3, [r7, #4]
 80043d6:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 80043da:	4915      	ldr	r1, [pc, #84]	; (8004430 <HAL_RCCEx_PeriphCLKConfig+0xdf0>)
 80043dc:	4313      	orrs	r3, r2
 80043de:	610b      	str	r3, [r1, #16]
  }

  /*------------------------------------ CKPER configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
 80043e0:	687b      	ldr	r3, [r7, #4]
 80043e2:	681b      	ldr	r3, [r3, #0]
 80043e4:	2b00      	cmp	r3, #0
 80043e6:	da08      	bge.n	80043fa <HAL_RCCEx_PeriphCLKConfig+0xdba>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLKPSOURCE(PeriphClkInit->CkperClockSelection));

    /* Configure the CKPER clock source */
    __HAL_RCC_CLKP_CONFIG(PeriphClkInit->CkperClockSelection);
 80043e8:	4b11      	ldr	r3, [pc, #68]	; (8004430 <HAL_RCCEx_PeriphCLKConfig+0xdf0>)
 80043ea:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80043ec:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 80043f0:	687b      	ldr	r3, [r7, #4]
 80043f2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80043f4:	490e      	ldr	r1, [pc, #56]	; (8004430 <HAL_RCCEx_PeriphCLKConfig+0xdf0>)
 80043f6:	4313      	orrs	r3, r2
 80043f8:	64cb      	str	r3, [r1, #76]	; 0x4c
  }

  /*------------------------------ CEC Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 80043fa:	687b      	ldr	r3, [r7, #4]
 80043fc:	681b      	ldr	r3, [r3, #0]
 80043fe:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8004402:	2b00      	cmp	r3, #0
 8004404:	d009      	beq.n	800441a <HAL_RCCEx_PeriphCLKConfig+0xdda>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC interface clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8004406:	4b0a      	ldr	r3, [pc, #40]	; (8004430 <HAL_RCCEx_PeriphCLKConfig+0xdf0>)
 8004408:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800440a:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 800440e:	687b      	ldr	r3, [r7, #4]
 8004410:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004414:	4906      	ldr	r1, [pc, #24]	; (8004430 <HAL_RCCEx_PeriphCLKConfig+0xdf0>)
 8004416:	4313      	orrs	r3, r2
 8004418:	654b      	str	r3, [r1, #84]	; 0x54
  }

  if (status == HAL_OK)
 800441a:	7dbb      	ldrb	r3, [r7, #22]
 800441c:	2b00      	cmp	r3, #0
 800441e:	d101      	bne.n	8004424 <HAL_RCCEx_PeriphCLKConfig+0xde4>
  {
    return HAL_OK;
 8004420:	2300      	movs	r3, #0
 8004422:	e000      	b.n	8004426 <HAL_RCCEx_PeriphCLKConfig+0xde6>
  }
  return HAL_ERROR;
 8004424:	2301      	movs	r3, #1
}
 8004426:	4618      	mov	r0, r3
 8004428:	3718      	adds	r7, #24
 800442a:	46bd      	mov	sp, r7
 800442c:	bd80      	pop	{r7, pc}
 800442e:	bf00      	nop
 8004430:	58024400 	.word	0x58024400

08004434 <HAL_RCCEx_GetD3PCLK1Freq>:
  * @note   Each time D3PCLK1 changes, this function must be called to update the
  *         right D3PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval D3PCLK1 frequency
  */
uint32_t HAL_RCCEx_GetD3PCLK1Freq(void)
{
 8004434:	b580      	push	{r7, lr}
 8004436:	af00      	add	r7, sp, #0
#if defined(RCC_D3CFGR_D3PPRE)
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->D3CFGR & RCC_D3CFGR_D3PPRE)>> RCC_D3CFGR_D3PPRE_Pos] & 0x1FU));
 8004438:	f7ff f8a6 	bl	8003588 <HAL_RCC_GetHCLKFreq>
 800443c:	4602      	mov	r2, r0
 800443e:	4b06      	ldr	r3, [pc, #24]	; (8004458 <HAL_RCCEx_GetD3PCLK1Freq+0x24>)
 8004440:	6a1b      	ldr	r3, [r3, #32]
 8004442:	091b      	lsrs	r3, r3, #4
 8004444:	f003 0307 	and.w	r3, r3, #7
 8004448:	4904      	ldr	r1, [pc, #16]	; (800445c <HAL_RCCEx_GetD3PCLK1Freq+0x28>)
 800444a:	5ccb      	ldrb	r3, [r1, r3]
 800444c:	f003 031f 	and.w	r3, r3, #31
 8004450:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE)>> RCC_SRDCFGR_SRDPPRE_Pos] & 0x1FU));
#endif
}
 8004454:	4618      	mov	r0, r3
 8004456:	bd80      	pop	{r7, pc}
 8004458:	58024400 	.word	0x58024400
 800445c:	08007dec 	.word	0x08007dec

08004460 <HAL_RCCEx_GetPLL2ClockFreq>:
  *         right PLL2CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL2_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL2ClockFreq(PLL2_ClocksTypeDef* PLL2_Clocks)
{
 8004460:	b480      	push	{r7}
 8004462:	b089      	sub	sp, #36	; 0x24
 8004464:	af00      	add	r7, sp, #0
 8004466:	6078      	str	r0, [r7, #4]
  float_t fracn2, pll2vco;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL2M) * PLL2N
     PLL2xCLK = PLL2_VCO / PLL2x
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8004468:	4ba1      	ldr	r3, [pc, #644]	; (80046f0 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800446a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800446c:	f003 0303 	and.w	r3, r3, #3
 8004470:	61bb      	str	r3, [r7, #24]
  pll2m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM2)>> 12);
 8004472:	4b9f      	ldr	r3, [pc, #636]	; (80046f0 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8004474:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004476:	0b1b      	lsrs	r3, r3, #12
 8004478:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800447c:	617b      	str	r3, [r7, #20]
  pll2fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL2FRACEN) >> RCC_PLLCFGR_PLL2FRACEN_Pos;
 800447e:	4b9c      	ldr	r3, [pc, #624]	; (80046f0 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8004480:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004482:	091b      	lsrs	r3, r3, #4
 8004484:	f003 0301 	and.w	r3, r3, #1
 8004488:	613b      	str	r3, [r7, #16]
  fracn2 =(float_t)(uint32_t)(pll2fracen* ((RCC->PLL2FRACR & RCC_PLL2FRACR_FRACN2)>> 3));
 800448a:	4b99      	ldr	r3, [pc, #612]	; (80046f0 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800448c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800448e:	08db      	lsrs	r3, r3, #3
 8004490:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8004494:	693a      	ldr	r2, [r7, #16]
 8004496:	fb02 f303 	mul.w	r3, r2, r3
 800449a:	ee07 3a90 	vmov	s15, r3
 800449e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80044a2:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll2m != 0U)
 80044a6:	697b      	ldr	r3, [r7, #20]
 80044a8:	2b00      	cmp	r3, #0
 80044aa:	f000 8111 	beq.w	80046d0 <HAL_RCCEx_GetPLL2ClockFreq+0x270>
  {
    switch (pllsource)
 80044ae:	69bb      	ldr	r3, [r7, #24]
 80044b0:	2b02      	cmp	r3, #2
 80044b2:	f000 8083 	beq.w	80045bc <HAL_RCCEx_GetPLL2ClockFreq+0x15c>
 80044b6:	69bb      	ldr	r3, [r7, #24]
 80044b8:	2b02      	cmp	r3, #2
 80044ba:	f200 80a1 	bhi.w	8004600 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
 80044be:	69bb      	ldr	r3, [r7, #24]
 80044c0:	2b00      	cmp	r3, #0
 80044c2:	d003      	beq.n	80044cc <HAL_RCCEx_GetPLL2ClockFreq+0x6c>
 80044c4:	69bb      	ldr	r3, [r7, #24]
 80044c6:	2b01      	cmp	r3, #1
 80044c8:	d056      	beq.n	8004578 <HAL_RCCEx_GetPLL2ClockFreq+0x118>
 80044ca:	e099      	b.n	8004600 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
    {

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80044cc:	4b88      	ldr	r3, [pc, #544]	; (80046f0 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80044ce:	681b      	ldr	r3, [r3, #0]
 80044d0:	f003 0320 	and.w	r3, r3, #32
 80044d4:	2b00      	cmp	r3, #0
 80044d6:	d02d      	beq.n	8004534 <HAL_RCCEx_GetPLL2ClockFreq+0xd4>
      {
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 80044d8:	4b85      	ldr	r3, [pc, #532]	; (80046f0 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80044da:	681b      	ldr	r3, [r3, #0]
 80044dc:	08db      	lsrs	r3, r3, #3
 80044de:	f003 0303 	and.w	r3, r3, #3
 80044e2:	4a84      	ldr	r2, [pc, #528]	; (80046f4 <HAL_RCCEx_GetPLL2ClockFreq+0x294>)
 80044e4:	fa22 f303 	lsr.w	r3, r2, r3
 80044e8:	60bb      	str	r3, [r7, #8]
        pll2vco = ( (float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 80044ea:	68bb      	ldr	r3, [r7, #8]
 80044ec:	ee07 3a90 	vmov	s15, r3
 80044f0:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80044f4:	697b      	ldr	r3, [r7, #20]
 80044f6:	ee07 3a90 	vmov	s15, r3
 80044fa:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80044fe:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004502:	4b7b      	ldr	r3, [pc, #492]	; (80046f0 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8004504:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004506:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800450a:	ee07 3a90 	vmov	s15, r3
 800450e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004512:	ed97 6a03 	vldr	s12, [r7, #12]
 8004516:	eddf 5a78 	vldr	s11, [pc, #480]	; 80046f8 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800451a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800451e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004522:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8004526:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800452a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800452e:	edc7 7a07 	vstr	s15, [r7, #28]
      }
      else
      {
        pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
      }
      break;
 8004532:	e087      	b.n	8004644 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>
        pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 8004534:	697b      	ldr	r3, [r7, #20]
 8004536:	ee07 3a90 	vmov	s15, r3
 800453a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800453e:	eddf 6a6f 	vldr	s13, [pc, #444]	; 80046fc <HAL_RCCEx_GetPLL2ClockFreq+0x29c>
 8004542:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004546:	4b6a      	ldr	r3, [pc, #424]	; (80046f0 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8004548:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800454a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800454e:	ee07 3a90 	vmov	s15, r3
 8004552:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004556:	ed97 6a03 	vldr	s12, [r7, #12]
 800455a:	eddf 5a67 	vldr	s11, [pc, #412]	; 80046f8 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800455e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004562:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004566:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800456a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800456e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004572:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8004576:	e065      	b.n	8004644 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

    case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
      pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 8004578:	697b      	ldr	r3, [r7, #20]
 800457a:	ee07 3a90 	vmov	s15, r3
 800457e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004582:	eddf 6a5f 	vldr	s13, [pc, #380]	; 8004700 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 8004586:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800458a:	4b59      	ldr	r3, [pc, #356]	; (80046f0 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800458c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800458e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004592:	ee07 3a90 	vmov	s15, r3
 8004596:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800459a:	ed97 6a03 	vldr	s12, [r7, #12]
 800459e:	eddf 5a56 	vldr	s11, [pc, #344]	; 80046f8 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 80045a2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80045a6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80045aa:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80045ae:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80045b2:	ee67 7a27 	vmul.f32	s15, s14, s15
 80045b6:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 80045ba:	e043      	b.n	8004644 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 80045bc:	697b      	ldr	r3, [r7, #20]
 80045be:	ee07 3a90 	vmov	s15, r3
 80045c2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80045c6:	eddf 6a4f 	vldr	s13, [pc, #316]	; 8004704 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>
 80045ca:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80045ce:	4b48      	ldr	r3, [pc, #288]	; (80046f0 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80045d0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80045d2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80045d6:	ee07 3a90 	vmov	s15, r3
 80045da:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80045de:	ed97 6a03 	vldr	s12, [r7, #12]
 80045e2:	eddf 5a45 	vldr	s11, [pc, #276]	; 80046f8 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 80045e6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80045ea:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80045ee:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80045f2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80045f6:	ee67 7a27 	vmul.f32	s15, s14, s15
 80045fa:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 80045fe:	e021      	b.n	8004644 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

    default:
      pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 8004600:	697b      	ldr	r3, [r7, #20]
 8004602:	ee07 3a90 	vmov	s15, r3
 8004606:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800460a:	eddf 6a3d 	vldr	s13, [pc, #244]	; 8004700 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 800460e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004612:	4b37      	ldr	r3, [pc, #220]	; (80046f0 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8004614:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004616:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800461a:	ee07 3a90 	vmov	s15, r3
 800461e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004622:	ed97 6a03 	vldr	s12, [r7, #12]
 8004626:	eddf 5a34 	vldr	s11, [pc, #208]	; 80046f8 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800462a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800462e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004632:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8004636:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800463a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800463e:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8004642:	bf00      	nop
    }
    PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_P2) >>9)  + (float_t)1 )) ;
 8004644:	4b2a      	ldr	r3, [pc, #168]	; (80046f0 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8004646:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004648:	0a5b      	lsrs	r3, r3, #9
 800464a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800464e:	ee07 3a90 	vmov	s15, r3
 8004652:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004656:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800465a:	ee37 7a87 	vadd.f32	s14, s15, s14
 800465e:	edd7 6a07 	vldr	s13, [r7, #28]
 8004662:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8004666:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800466a:	ee17 2a90 	vmov	r2, s15
 800466e:	687b      	ldr	r3, [r7, #4]
 8004670:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_Q2) >>16) + (float_t)1 )) ;
 8004672:	4b1f      	ldr	r3, [pc, #124]	; (80046f0 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8004674:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004676:	0c1b      	lsrs	r3, r3, #16
 8004678:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800467c:	ee07 3a90 	vmov	s15, r3
 8004680:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004684:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8004688:	ee37 7a87 	vadd.f32	s14, s15, s14
 800468c:	edd7 6a07 	vldr	s13, [r7, #28]
 8004690:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8004694:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8004698:	ee17 2a90 	vmov	r2, s15
 800469c:	687b      	ldr	r3, [r7, #4]
 800469e:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_R2) >>24) + (float_t)1 )) ;
 80046a0:	4b13      	ldr	r3, [pc, #76]	; (80046f0 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80046a2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80046a4:	0e1b      	lsrs	r3, r3, #24
 80046a6:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80046aa:	ee07 3a90 	vmov	s15, r3
 80046ae:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80046b2:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80046b6:	ee37 7a87 	vadd.f32	s14, s15, s14
 80046ba:	edd7 6a07 	vldr	s13, [r7, #28]
 80046be:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80046c2:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80046c6:	ee17 2a90 	vmov	r2, s15
 80046ca:	687b      	ldr	r3, [r7, #4]
 80046cc:	609a      	str	r2, [r3, #8]
  {
    PLL2_Clocks->PLL2_P_Frequency = 0U;
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
    PLL2_Clocks->PLL2_R_Frequency = 0U;
  }
}
 80046ce:	e008      	b.n	80046e2 <HAL_RCCEx_GetPLL2ClockFreq+0x282>
    PLL2_Clocks->PLL2_P_Frequency = 0U;
 80046d0:	687b      	ldr	r3, [r7, #4]
 80046d2:	2200      	movs	r2, #0
 80046d4:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
 80046d6:	687b      	ldr	r3, [r7, #4]
 80046d8:	2200      	movs	r2, #0
 80046da:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = 0U;
 80046dc:	687b      	ldr	r3, [r7, #4]
 80046de:	2200      	movs	r2, #0
 80046e0:	609a      	str	r2, [r3, #8]
}
 80046e2:	bf00      	nop
 80046e4:	3724      	adds	r7, #36	; 0x24
 80046e6:	46bd      	mov	sp, r7
 80046e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046ec:	4770      	bx	lr
 80046ee:	bf00      	nop
 80046f0:	58024400 	.word	0x58024400
 80046f4:	03d09000 	.word	0x03d09000
 80046f8:	46000000 	.word	0x46000000
 80046fc:	4c742400 	.word	0x4c742400
 8004700:	4a742400 	.word	0x4a742400
 8004704:	4af42400 	.word	0x4af42400

08004708 <HAL_RCCEx_GetPLL3ClockFreq>:
  *         right PLL3CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL3_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL3ClockFreq(PLL3_ClocksTypeDef* PLL3_Clocks)
{
 8004708:	b480      	push	{r7}
 800470a:	b089      	sub	sp, #36	; 0x24
 800470c:	af00      	add	r7, sp, #0
 800470e:	6078      	str	r0, [r7, #4]
  float_t fracn3, pll3vco;

  /* PLL3_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL3M) * PLL3N
     PLL3xCLK = PLL3_VCO / PLLxR
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8004710:	4ba1      	ldr	r3, [pc, #644]	; (8004998 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8004712:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004714:	f003 0303 	and.w	r3, r3, #3
 8004718:	61bb      	str	r3, [r7, #24]
  pll3m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM3)>> 20)  ;
 800471a:	4b9f      	ldr	r3, [pc, #636]	; (8004998 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800471c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800471e:	0d1b      	lsrs	r3, r3, #20
 8004720:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8004724:	617b      	str	r3, [r7, #20]
  pll3fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL3FRACEN) >> RCC_PLLCFGR_PLL3FRACEN_Pos;
 8004726:	4b9c      	ldr	r3, [pc, #624]	; (8004998 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8004728:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800472a:	0a1b      	lsrs	r3, r3, #8
 800472c:	f003 0301 	and.w	r3, r3, #1
 8004730:	613b      	str	r3, [r7, #16]
  fracn3 = (float_t)(uint32_t)(pll3fracen* ((RCC->PLL3FRACR & RCC_PLL3FRACR_FRACN3)>> 3));
 8004732:	4b99      	ldr	r3, [pc, #612]	; (8004998 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8004734:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004736:	08db      	lsrs	r3, r3, #3
 8004738:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800473c:	693a      	ldr	r2, [r7, #16]
 800473e:	fb02 f303 	mul.w	r3, r2, r3
 8004742:	ee07 3a90 	vmov	s15, r3
 8004746:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800474a:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll3m != 0U)
 800474e:	697b      	ldr	r3, [r7, #20]
 8004750:	2b00      	cmp	r3, #0
 8004752:	f000 8111 	beq.w	8004978 <HAL_RCCEx_GetPLL3ClockFreq+0x270>
  {
    switch (pllsource)
 8004756:	69bb      	ldr	r3, [r7, #24]
 8004758:	2b02      	cmp	r3, #2
 800475a:	f000 8083 	beq.w	8004864 <HAL_RCCEx_GetPLL3ClockFreq+0x15c>
 800475e:	69bb      	ldr	r3, [r7, #24]
 8004760:	2b02      	cmp	r3, #2
 8004762:	f200 80a1 	bhi.w	80048a8 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
 8004766:	69bb      	ldr	r3, [r7, #24]
 8004768:	2b00      	cmp	r3, #0
 800476a:	d003      	beq.n	8004774 <HAL_RCCEx_GetPLL3ClockFreq+0x6c>
 800476c:	69bb      	ldr	r3, [r7, #24]
 800476e:	2b01      	cmp	r3, #1
 8004770:	d056      	beq.n	8004820 <HAL_RCCEx_GetPLL3ClockFreq+0x118>
 8004772:	e099      	b.n	80048a8 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8004774:	4b88      	ldr	r3, [pc, #544]	; (8004998 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8004776:	681b      	ldr	r3, [r3, #0]
 8004778:	f003 0320 	and.w	r3, r3, #32
 800477c:	2b00      	cmp	r3, #0
 800477e:	d02d      	beq.n	80047dc <HAL_RCCEx_GetPLL3ClockFreq+0xd4>
      {
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8004780:	4b85      	ldr	r3, [pc, #532]	; (8004998 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8004782:	681b      	ldr	r3, [r3, #0]
 8004784:	08db      	lsrs	r3, r3, #3
 8004786:	f003 0303 	and.w	r3, r3, #3
 800478a:	4a84      	ldr	r2, [pc, #528]	; (800499c <HAL_RCCEx_GetPLL3ClockFreq+0x294>)
 800478c:	fa22 f303 	lsr.w	r3, r2, r3
 8004790:	60bb      	str	r3, [r7, #8]
        pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 8004792:	68bb      	ldr	r3, [r7, #8]
 8004794:	ee07 3a90 	vmov	s15, r3
 8004798:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800479c:	697b      	ldr	r3, [r7, #20]
 800479e:	ee07 3a90 	vmov	s15, r3
 80047a2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80047a6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80047aa:	4b7b      	ldr	r3, [pc, #492]	; (8004998 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80047ac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80047ae:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80047b2:	ee07 3a90 	vmov	s15, r3
 80047b6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80047ba:	ed97 6a03 	vldr	s12, [r7, #12]
 80047be:	eddf 5a78 	vldr	s11, [pc, #480]	; 80049a0 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 80047c2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80047c6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80047ca:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80047ce:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80047d2:	ee67 7a27 	vmul.f32	s15, s14, s15
 80047d6:	edc7 7a07 	vstr	s15, [r7, #28]
      }
      else
      {
        pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
      }
      break;
 80047da:	e087      	b.n	80048ec <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
        pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 80047dc:	697b      	ldr	r3, [r7, #20]
 80047de:	ee07 3a90 	vmov	s15, r3
 80047e2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80047e6:	eddf 6a6f 	vldr	s13, [pc, #444]	; 80049a4 <HAL_RCCEx_GetPLL3ClockFreq+0x29c>
 80047ea:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80047ee:	4b6a      	ldr	r3, [pc, #424]	; (8004998 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80047f0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80047f2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80047f6:	ee07 3a90 	vmov	s15, r3
 80047fa:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80047fe:	ed97 6a03 	vldr	s12, [r7, #12]
 8004802:	eddf 5a67 	vldr	s11, [pc, #412]	; 80049a0 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8004806:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800480a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800480e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8004812:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004816:	ee67 7a27 	vmul.f32	s15, s14, s15
 800481a:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800481e:	e065      	b.n	80048ec <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
    case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
      pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 8004820:	697b      	ldr	r3, [r7, #20]
 8004822:	ee07 3a90 	vmov	s15, r3
 8004826:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800482a:	eddf 6a5f 	vldr	s13, [pc, #380]	; 80049a8 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 800482e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004832:	4b59      	ldr	r3, [pc, #356]	; (8004998 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8004834:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004836:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800483a:	ee07 3a90 	vmov	s15, r3
 800483e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004842:	ed97 6a03 	vldr	s12, [r7, #12]
 8004846:	eddf 5a56 	vldr	s11, [pc, #344]	; 80049a0 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800484a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800484e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004852:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8004856:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800485a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800485e:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8004862:	e043      	b.n	80048ec <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 8004864:	697b      	ldr	r3, [r7, #20]
 8004866:	ee07 3a90 	vmov	s15, r3
 800486a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800486e:	eddf 6a4f 	vldr	s13, [pc, #316]	; 80049ac <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>
 8004872:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004876:	4b48      	ldr	r3, [pc, #288]	; (8004998 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8004878:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800487a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800487e:	ee07 3a90 	vmov	s15, r3
 8004882:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004886:	ed97 6a03 	vldr	s12, [r7, #12]
 800488a:	eddf 5a45 	vldr	s11, [pc, #276]	; 80049a0 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800488e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004892:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004896:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800489a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800489e:	ee67 7a27 	vmul.f32	s15, s14, s15
 80048a2:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 80048a6:	e021      	b.n	80048ec <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

    default:
      pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 80048a8:	697b      	ldr	r3, [r7, #20]
 80048aa:	ee07 3a90 	vmov	s15, r3
 80048ae:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80048b2:	eddf 6a3d 	vldr	s13, [pc, #244]	; 80049a8 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 80048b6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80048ba:	4b37      	ldr	r3, [pc, #220]	; (8004998 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80048bc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80048be:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80048c2:	ee07 3a90 	vmov	s15, r3
 80048c6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80048ca:	ed97 6a03 	vldr	s12, [r7, #12]
 80048ce:	eddf 5a34 	vldr	s11, [pc, #208]	; 80049a0 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 80048d2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80048d6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80048da:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80048de:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80048e2:	ee67 7a27 	vmul.f32	s15, s14, s15
 80048e6:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 80048ea:	bf00      	nop
    }
    PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_P3) >>9)  + (float_t)1 )) ;
 80048ec:	4b2a      	ldr	r3, [pc, #168]	; (8004998 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80048ee:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80048f0:	0a5b      	lsrs	r3, r3, #9
 80048f2:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80048f6:	ee07 3a90 	vmov	s15, r3
 80048fa:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80048fe:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8004902:	ee37 7a87 	vadd.f32	s14, s15, s14
 8004906:	edd7 6a07 	vldr	s13, [r7, #28]
 800490a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800490e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8004912:	ee17 2a90 	vmov	r2, s15
 8004916:	687b      	ldr	r3, [r7, #4]
 8004918:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_Q3) >>16) + (float_t)1 )) ;
 800491a:	4b1f      	ldr	r3, [pc, #124]	; (8004998 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800491c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800491e:	0c1b      	lsrs	r3, r3, #16
 8004920:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8004924:	ee07 3a90 	vmov	s15, r3
 8004928:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800492c:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8004930:	ee37 7a87 	vadd.f32	s14, s15, s14
 8004934:	edd7 6a07 	vldr	s13, [r7, #28]
 8004938:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800493c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8004940:	ee17 2a90 	vmov	r2, s15
 8004944:	687b      	ldr	r3, [r7, #4]
 8004946:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_R3) >>24) + (float_t)1 )) ;
 8004948:	4b13      	ldr	r3, [pc, #76]	; (8004998 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800494a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800494c:	0e1b      	lsrs	r3, r3, #24
 800494e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8004952:	ee07 3a90 	vmov	s15, r3
 8004956:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800495a:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800495e:	ee37 7a87 	vadd.f32	s14, s15, s14
 8004962:	edd7 6a07 	vldr	s13, [r7, #28]
 8004966:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800496a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800496e:	ee17 2a90 	vmov	r2, s15
 8004972:	687b      	ldr	r3, [r7, #4]
 8004974:	609a      	str	r2, [r3, #8]
    PLL3_Clocks->PLL3_P_Frequency = 0U;
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
    PLL3_Clocks->PLL3_R_Frequency = 0U;
  }

}
 8004976:	e008      	b.n	800498a <HAL_RCCEx_GetPLL3ClockFreq+0x282>
    PLL3_Clocks->PLL3_P_Frequency = 0U;
 8004978:	687b      	ldr	r3, [r7, #4]
 800497a:	2200      	movs	r2, #0
 800497c:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
 800497e:	687b      	ldr	r3, [r7, #4]
 8004980:	2200      	movs	r2, #0
 8004982:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = 0U;
 8004984:	687b      	ldr	r3, [r7, #4]
 8004986:	2200      	movs	r2, #0
 8004988:	609a      	str	r2, [r3, #8]
}
 800498a:	bf00      	nop
 800498c:	3724      	adds	r7, #36	; 0x24
 800498e:	46bd      	mov	sp, r7
 8004990:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004994:	4770      	bx	lr
 8004996:	bf00      	nop
 8004998:	58024400 	.word	0x58024400
 800499c:	03d09000 	.word	0x03d09000
 80049a0:	46000000 	.word	0x46000000
 80049a4:	4c742400 	.word	0x4c742400
 80049a8:	4a742400 	.word	0x4a742400
 80049ac:	4af42400 	.word	0x4af42400

080049b0 <HAL_RCCEx_CRSConfig>:
  * @brief  Start automatic synchronization for polling mode
  * @param  pInit Pointer on RCC_CRSInitTypeDef structure
  * @retval None
  */
void HAL_RCCEx_CRSConfig(RCC_CRSInitTypeDef *pInit)
{
 80049b0:	b580      	push	{r7, lr}
 80049b2:	b084      	sub	sp, #16
 80049b4:	af00      	add	r7, sp, #0
 80049b6:	6078      	str	r0, [r7, #4]
  assert_param(IS_RCC_CRS_HSI48CALIBRATION(pInit->HSI48CalibrationValue));

  /* CONFIGURATION */

  /* Before configuration, reset CRS registers to their default values*/
  __HAL_RCC_CRS_FORCE_RESET();
 80049b8:	4b26      	ldr	r3, [pc, #152]	; (8004a54 <HAL_RCCEx_CRSConfig+0xa4>)
 80049ba:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80049be:	4a25      	ldr	r2, [pc, #148]	; (8004a54 <HAL_RCCEx_CRSConfig+0xa4>)
 80049c0:	f043 0302 	orr.w	r3, r3, #2
 80049c4:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
  __HAL_RCC_CRS_RELEASE_RESET();
 80049c8:	4b22      	ldr	r3, [pc, #136]	; (8004a54 <HAL_RCCEx_CRSConfig+0xa4>)
 80049ca:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80049ce:	4a21      	ldr	r2, [pc, #132]	; (8004a54 <HAL_RCCEx_CRSConfig+0xa4>)
 80049d0:	f023 0302 	bic.w	r3, r3, #2
 80049d4:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

  /* Set the SYNCDIV[2:0] bits according to Pre-scaler value */
  /* Set the SYNCSRC[1:0] bits according to Source value */
  /* Set the SYNCSPOL bit according to Polarity value */
  if ((HAL_GetREVID() <= REV_ID_Y) && (pInit->Source == RCC_CRS_SYNC_SOURCE_USB2))
 80049d8:	f7fc fd86 	bl	80014e8 <HAL_GetREVID>
 80049dc:	4603      	mov	r3, r0
 80049de:	f241 0203 	movw	r2, #4099	; 0x1003
 80049e2:	4293      	cmp	r3, r2
 80049e4:	d80b      	bhi.n	80049fe <HAL_RCCEx_CRSConfig+0x4e>
 80049e6:	687b      	ldr	r3, [r7, #4]
 80049e8:	685b      	ldr	r3, [r3, #4]
 80049ea:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 80049ee:	d106      	bne.n	80049fe <HAL_RCCEx_CRSConfig+0x4e>
  {
    /* Use Rev.Y value of USB2 */
    value = (pInit->Prescaler | RCC_CRS_SYNC_SOURCE_PIN | pInit->Polarity);
 80049f0:	687b      	ldr	r3, [r7, #4]
 80049f2:	681a      	ldr	r2, [r3, #0]
 80049f4:	687b      	ldr	r3, [r7, #4]
 80049f6:	689b      	ldr	r3, [r3, #8]
 80049f8:	4313      	orrs	r3, r2
 80049fa:	60fb      	str	r3, [r7, #12]
 80049fc:	e008      	b.n	8004a10 <HAL_RCCEx_CRSConfig+0x60>
  }
  else
  {
    value = (pInit->Prescaler | pInit->Source | pInit->Polarity);
 80049fe:	687b      	ldr	r3, [r7, #4]
 8004a00:	681a      	ldr	r2, [r3, #0]
 8004a02:	687b      	ldr	r3, [r7, #4]
 8004a04:	685b      	ldr	r3, [r3, #4]
 8004a06:	431a      	orrs	r2, r3
 8004a08:	687b      	ldr	r3, [r7, #4]
 8004a0a:	689b      	ldr	r3, [r3, #8]
 8004a0c:	4313      	orrs	r3, r2
 8004a0e:	60fb      	str	r3, [r7, #12]
  }
  /* Set the RELOAD[15:0] bits according to ReloadValue value */
  value |= pInit->ReloadValue;
 8004a10:	687b      	ldr	r3, [r7, #4]
 8004a12:	68db      	ldr	r3, [r3, #12]
 8004a14:	68fa      	ldr	r2, [r7, #12]
 8004a16:	4313      	orrs	r3, r2
 8004a18:	60fb      	str	r3, [r7, #12]
  /* Set the FELIM[7:0] bits according to ErrorLimitValue value */
  value |= (pInit->ErrorLimitValue << CRS_CFGR_FELIM_Pos);
 8004a1a:	687b      	ldr	r3, [r7, #4]
 8004a1c:	691b      	ldr	r3, [r3, #16]
 8004a1e:	041b      	lsls	r3, r3, #16
 8004a20:	68fa      	ldr	r2, [r7, #12]
 8004a22:	4313      	orrs	r3, r2
 8004a24:	60fb      	str	r3, [r7, #12]
  WRITE_REG(CRS->CFGR, value);
 8004a26:	4a0c      	ldr	r2, [pc, #48]	; (8004a58 <HAL_RCCEx_CRSConfig+0xa8>)
 8004a28:	68fb      	ldr	r3, [r7, #12]
 8004a2a:	6053      	str	r3, [r2, #4]

  /* Adjust HSI48 oscillator smooth trimming */
  /* Set the TRIM[5:0] bits according to RCC_CRS_HSI48CalibrationValue value */
  MODIFY_REG(CRS->CR, CRS_CR_TRIM, (pInit->HSI48CalibrationValue << CRS_CR_TRIM_Pos));
 8004a2c:	4b0a      	ldr	r3, [pc, #40]	; (8004a58 <HAL_RCCEx_CRSConfig+0xa8>)
 8004a2e:	681b      	ldr	r3, [r3, #0]
 8004a30:	f423 527c 	bic.w	r2, r3, #16128	; 0x3f00
 8004a34:	687b      	ldr	r3, [r7, #4]
 8004a36:	695b      	ldr	r3, [r3, #20]
 8004a38:	021b      	lsls	r3, r3, #8
 8004a3a:	4907      	ldr	r1, [pc, #28]	; (8004a58 <HAL_RCCEx_CRSConfig+0xa8>)
 8004a3c:	4313      	orrs	r3, r2
 8004a3e:	600b      	str	r3, [r1, #0]

  /* START AUTOMATIC SYNCHRONIZATION*/

  /* Enable Automatic trimming & Frequency error counter */
  SET_BIT(CRS->CR, CRS_CR_AUTOTRIMEN | CRS_CR_CEN);
 8004a40:	4b05      	ldr	r3, [pc, #20]	; (8004a58 <HAL_RCCEx_CRSConfig+0xa8>)
 8004a42:	681b      	ldr	r3, [r3, #0]
 8004a44:	4a04      	ldr	r2, [pc, #16]	; (8004a58 <HAL_RCCEx_CRSConfig+0xa8>)
 8004a46:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 8004a4a:	6013      	str	r3, [r2, #0]
}
 8004a4c:	bf00      	nop
 8004a4e:	3710      	adds	r7, #16
 8004a50:	46bd      	mov	sp, r7
 8004a52:	bd80      	pop	{r7, pc}
 8004a54:	58024400 	.word	0x58024400
 8004a58:	40008400 	.word	0x40008400

08004a5c <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(RCC_PLL2InitTypeDef *pll2, uint32_t Divider)
{
 8004a5c:	b580      	push	{r7, lr}
 8004a5e:	b084      	sub	sp, #16
 8004a60:	af00      	add	r7, sp, #0
 8004a62:	6078      	str	r0, [r7, #4]
 8004a64:	6039      	str	r1, [r7, #0]

  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8004a66:	2300      	movs	r3, #0
 8004a68:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL2RGE_VALUE(pll2->PLL2RGE));
  assert_param(IS_RCC_PLL2VCO_VALUE(pll2->PLL2VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll2->PLL2FRACN));

  /* Check that PLL2 OSC clock source is already set */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8004a6a:	4b53      	ldr	r3, [pc, #332]	; (8004bb8 <RCCEx_PLL2_Config+0x15c>)
 8004a6c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004a6e:	f003 0303 	and.w	r3, r3, #3
 8004a72:	2b03      	cmp	r3, #3
 8004a74:	d101      	bne.n	8004a7a <RCCEx_PLL2_Config+0x1e>
  {
    return HAL_ERROR;
 8004a76:	2301      	movs	r3, #1
 8004a78:	e099      	b.n	8004bae <RCCEx_PLL2_Config+0x152>


  else
  {
    /* Disable  PLL2. */
    __HAL_RCC_PLL2_DISABLE();
 8004a7a:	4b4f      	ldr	r3, [pc, #316]	; (8004bb8 <RCCEx_PLL2_Config+0x15c>)
 8004a7c:	681b      	ldr	r3, [r3, #0]
 8004a7e:	4a4e      	ldr	r2, [pc, #312]	; (8004bb8 <RCCEx_PLL2_Config+0x15c>)
 8004a80:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8004a84:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004a86:	f7fc fcff 	bl	8001488 <HAL_GetTick>
 8004a8a:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8004a8c:	e008      	b.n	8004aa0 <RCCEx_PLL2_Config+0x44>
    {
      if( (HAL_GetTick() - tickstart ) > PLL2_TIMEOUT_VALUE)
 8004a8e:	f7fc fcfb 	bl	8001488 <HAL_GetTick>
 8004a92:	4602      	mov	r2, r0
 8004a94:	68bb      	ldr	r3, [r7, #8]
 8004a96:	1ad3      	subs	r3, r2, r3
 8004a98:	2b02      	cmp	r3, #2
 8004a9a:	d901      	bls.n	8004aa0 <RCCEx_PLL2_Config+0x44>
      {
        return HAL_TIMEOUT;
 8004a9c:	2303      	movs	r3, #3
 8004a9e:	e086      	b.n	8004bae <RCCEx_PLL2_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8004aa0:	4b45      	ldr	r3, [pc, #276]	; (8004bb8 <RCCEx_PLL2_Config+0x15c>)
 8004aa2:	681b      	ldr	r3, [r3, #0]
 8004aa4:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8004aa8:	2b00      	cmp	r3, #0
 8004aaa:	d1f0      	bne.n	8004a8e <RCCEx_PLL2_Config+0x32>
      }
    }

    /* Configure PLL2 multiplication and division factors. */
    __HAL_RCC_PLL2_CONFIG(pll2->PLL2M,
 8004aac:	4b42      	ldr	r3, [pc, #264]	; (8004bb8 <RCCEx_PLL2_Config+0x15c>)
 8004aae:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004ab0:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 8004ab4:	687b      	ldr	r3, [r7, #4]
 8004ab6:	681b      	ldr	r3, [r3, #0]
 8004ab8:	031b      	lsls	r3, r3, #12
 8004aba:	493f      	ldr	r1, [pc, #252]	; (8004bb8 <RCCEx_PLL2_Config+0x15c>)
 8004abc:	4313      	orrs	r3, r2
 8004abe:	628b      	str	r3, [r1, #40]	; 0x28
 8004ac0:	687b      	ldr	r3, [r7, #4]
 8004ac2:	685b      	ldr	r3, [r3, #4]
 8004ac4:	3b01      	subs	r3, #1
 8004ac6:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8004aca:	687b      	ldr	r3, [r7, #4]
 8004acc:	689b      	ldr	r3, [r3, #8]
 8004ace:	3b01      	subs	r3, #1
 8004ad0:	025b      	lsls	r3, r3, #9
 8004ad2:	b29b      	uxth	r3, r3
 8004ad4:	431a      	orrs	r2, r3
 8004ad6:	687b      	ldr	r3, [r7, #4]
 8004ad8:	68db      	ldr	r3, [r3, #12]
 8004ada:	3b01      	subs	r3, #1
 8004adc:	041b      	lsls	r3, r3, #16
 8004ade:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 8004ae2:	431a      	orrs	r2, r3
 8004ae4:	687b      	ldr	r3, [r7, #4]
 8004ae6:	691b      	ldr	r3, [r3, #16]
 8004ae8:	3b01      	subs	r3, #1
 8004aea:	061b      	lsls	r3, r3, #24
 8004aec:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 8004af0:	4931      	ldr	r1, [pc, #196]	; (8004bb8 <RCCEx_PLL2_Config+0x15c>)
 8004af2:	4313      	orrs	r3, r2
 8004af4:	638b      	str	r3, [r1, #56]	; 0x38
                          pll2->PLL2P,
                          pll2->PLL2Q,
                          pll2->PLL2R);

    /* Select PLL2 input reference frequency range: VCI */
    __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE) ;
 8004af6:	4b30      	ldr	r3, [pc, #192]	; (8004bb8 <RCCEx_PLL2_Config+0x15c>)
 8004af8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004afa:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8004afe:	687b      	ldr	r3, [r7, #4]
 8004b00:	695b      	ldr	r3, [r3, #20]
 8004b02:	492d      	ldr	r1, [pc, #180]	; (8004bb8 <RCCEx_PLL2_Config+0x15c>)
 8004b04:	4313      	orrs	r3, r2
 8004b06:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL2 output frequency range : VCO */
    __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL) ;
 8004b08:	4b2b      	ldr	r3, [pc, #172]	; (8004bb8 <RCCEx_PLL2_Config+0x15c>)
 8004b0a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004b0c:	f023 0220 	bic.w	r2, r3, #32
 8004b10:	687b      	ldr	r3, [r7, #4]
 8004b12:	699b      	ldr	r3, [r3, #24]
 8004b14:	4928      	ldr	r1, [pc, #160]	; (8004bb8 <RCCEx_PLL2_Config+0x15c>)
 8004b16:	4313      	orrs	r3, r2
 8004b18:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_DISABLE();
 8004b1a:	4b27      	ldr	r3, [pc, #156]	; (8004bb8 <RCCEx_PLL2_Config+0x15c>)
 8004b1c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004b1e:	4a26      	ldr	r2, [pc, #152]	; (8004bb8 <RCCEx_PLL2_Config+0x15c>)
 8004b20:	f023 0310 	bic.w	r3, r3, #16
 8004b24:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 8004b26:	4b24      	ldr	r3, [pc, #144]	; (8004bb8 <RCCEx_PLL2_Config+0x15c>)
 8004b28:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8004b2a:	4b24      	ldr	r3, [pc, #144]	; (8004bbc <RCCEx_PLL2_Config+0x160>)
 8004b2c:	4013      	ands	r3, r2
 8004b2e:	687a      	ldr	r2, [r7, #4]
 8004b30:	69d2      	ldr	r2, [r2, #28]
 8004b32:	00d2      	lsls	r2, r2, #3
 8004b34:	4920      	ldr	r1, [pc, #128]	; (8004bb8 <RCCEx_PLL2_Config+0x15c>)
 8004b36:	4313      	orrs	r3, r2
 8004b38:	63cb      	str	r3, [r1, #60]	; 0x3c

    /* Enable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_ENABLE();
 8004b3a:	4b1f      	ldr	r3, [pc, #124]	; (8004bb8 <RCCEx_PLL2_Config+0x15c>)
 8004b3c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004b3e:	4a1e      	ldr	r2, [pc, #120]	; (8004bb8 <RCCEx_PLL2_Config+0x15c>)
 8004b40:	f043 0310 	orr.w	r3, r3, #16
 8004b44:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL2 clock output */
    if(Divider == DIVIDER_P_UPDATE)
 8004b46:	683b      	ldr	r3, [r7, #0]
 8004b48:	2b00      	cmp	r3, #0
 8004b4a:	d106      	bne.n	8004b5a <RCCEx_PLL2_Config+0xfe>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 8004b4c:	4b1a      	ldr	r3, [pc, #104]	; (8004bb8 <RCCEx_PLL2_Config+0x15c>)
 8004b4e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004b50:	4a19      	ldr	r2, [pc, #100]	; (8004bb8 <RCCEx_PLL2_Config+0x15c>)
 8004b52:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8004b56:	62d3      	str	r3, [r2, #44]	; 0x2c
 8004b58:	e00f      	b.n	8004b7a <RCCEx_PLL2_Config+0x11e>
    }
    else if(Divider == DIVIDER_Q_UPDATE)
 8004b5a:	683b      	ldr	r3, [r7, #0]
 8004b5c:	2b01      	cmp	r3, #1
 8004b5e:	d106      	bne.n	8004b6e <RCCEx_PLL2_Config+0x112>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVQ);
 8004b60:	4b15      	ldr	r3, [pc, #84]	; (8004bb8 <RCCEx_PLL2_Config+0x15c>)
 8004b62:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004b64:	4a14      	ldr	r2, [pc, #80]	; (8004bb8 <RCCEx_PLL2_Config+0x15c>)
 8004b66:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8004b6a:	62d3      	str	r3, [r2, #44]	; 0x2c
 8004b6c:	e005      	b.n	8004b7a <RCCEx_PLL2_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVR);
 8004b6e:	4b12      	ldr	r3, [pc, #72]	; (8004bb8 <RCCEx_PLL2_Config+0x15c>)
 8004b70:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004b72:	4a11      	ldr	r2, [pc, #68]	; (8004bb8 <RCCEx_PLL2_Config+0x15c>)
 8004b74:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8004b78:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL2. */
    __HAL_RCC_PLL2_ENABLE();
 8004b7a:	4b0f      	ldr	r3, [pc, #60]	; (8004bb8 <RCCEx_PLL2_Config+0x15c>)
 8004b7c:	681b      	ldr	r3, [r3, #0]
 8004b7e:	4a0e      	ldr	r2, [pc, #56]	; (8004bb8 <RCCEx_PLL2_Config+0x15c>)
 8004b80:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8004b84:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004b86:	f7fc fc7f 	bl	8001488 <HAL_GetTick>
 8004b8a:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL2 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8004b8c:	e008      	b.n	8004ba0 <RCCEx_PLL2_Config+0x144>
    {
      if( (HAL_GetTick() - tickstart ) > PLL2_TIMEOUT_VALUE)
 8004b8e:	f7fc fc7b 	bl	8001488 <HAL_GetTick>
 8004b92:	4602      	mov	r2, r0
 8004b94:	68bb      	ldr	r3, [r7, #8]
 8004b96:	1ad3      	subs	r3, r2, r3
 8004b98:	2b02      	cmp	r3, #2
 8004b9a:	d901      	bls.n	8004ba0 <RCCEx_PLL2_Config+0x144>
      {
        return HAL_TIMEOUT;
 8004b9c:	2303      	movs	r3, #3
 8004b9e:	e006      	b.n	8004bae <RCCEx_PLL2_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8004ba0:	4b05      	ldr	r3, [pc, #20]	; (8004bb8 <RCCEx_PLL2_Config+0x15c>)
 8004ba2:	681b      	ldr	r3, [r3, #0]
 8004ba4:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8004ba8:	2b00      	cmp	r3, #0
 8004baa:	d0f0      	beq.n	8004b8e <RCCEx_PLL2_Config+0x132>
    }

  }


  return status;
 8004bac:	7bfb      	ldrb	r3, [r7, #15]
}
 8004bae:	4618      	mov	r0, r3
 8004bb0:	3710      	adds	r7, #16
 8004bb2:	46bd      	mov	sp, r7
 8004bb4:	bd80      	pop	{r7, pc}
 8004bb6:	bf00      	nop
 8004bb8:	58024400 	.word	0x58024400
 8004bbc:	ffff0007 	.word	0xffff0007

08004bc0 <RCCEx_PLL3_Config>:
  * @note   PLL3 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(RCC_PLL3InitTypeDef *pll3, uint32_t Divider)
{
 8004bc0:	b580      	push	{r7, lr}
 8004bc2:	b084      	sub	sp, #16
 8004bc4:	af00      	add	r7, sp, #0
 8004bc6:	6078      	str	r0, [r7, #4]
 8004bc8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8004bca:	2300      	movs	r3, #0
 8004bcc:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL3RGE_VALUE(pll3->PLL3RGE));
  assert_param(IS_RCC_PLL3VCO_VALUE(pll3->PLL3VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll3->PLL3FRACN));

  /* Check that PLL3 OSC clock source is already set */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8004bce:	4b53      	ldr	r3, [pc, #332]	; (8004d1c <RCCEx_PLL3_Config+0x15c>)
 8004bd0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004bd2:	f003 0303 	and.w	r3, r3, #3
 8004bd6:	2b03      	cmp	r3, #3
 8004bd8:	d101      	bne.n	8004bde <RCCEx_PLL3_Config+0x1e>
  {
    return HAL_ERROR;
 8004bda:	2301      	movs	r3, #1
 8004bdc:	e099      	b.n	8004d12 <RCCEx_PLL3_Config+0x152>


  else
  {
    /* Disable  PLL3. */
    __HAL_RCC_PLL3_DISABLE();
 8004bde:	4b4f      	ldr	r3, [pc, #316]	; (8004d1c <RCCEx_PLL3_Config+0x15c>)
 8004be0:	681b      	ldr	r3, [r3, #0]
 8004be2:	4a4e      	ldr	r2, [pc, #312]	; (8004d1c <RCCEx_PLL3_Config+0x15c>)
 8004be4:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004be8:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004bea:	f7fc fc4d 	bl	8001488 <HAL_GetTick>
 8004bee:	60b8      	str	r0, [r7, #8]
    /* Wait till PLL3 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8004bf0:	e008      	b.n	8004c04 <RCCEx_PLL3_Config+0x44>
    {
      if( (HAL_GetTick() - tickstart ) > PLL3_TIMEOUT_VALUE)
 8004bf2:	f7fc fc49 	bl	8001488 <HAL_GetTick>
 8004bf6:	4602      	mov	r2, r0
 8004bf8:	68bb      	ldr	r3, [r7, #8]
 8004bfa:	1ad3      	subs	r3, r2, r3
 8004bfc:	2b02      	cmp	r3, #2
 8004bfe:	d901      	bls.n	8004c04 <RCCEx_PLL3_Config+0x44>
      {
        return HAL_TIMEOUT;
 8004c00:	2303      	movs	r3, #3
 8004c02:	e086      	b.n	8004d12 <RCCEx_PLL3_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8004c04:	4b45      	ldr	r3, [pc, #276]	; (8004d1c <RCCEx_PLL3_Config+0x15c>)
 8004c06:	681b      	ldr	r3, [r3, #0]
 8004c08:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8004c0c:	2b00      	cmp	r3, #0
 8004c0e:	d1f0      	bne.n	8004bf2 <RCCEx_PLL3_Config+0x32>
      }
    }

    /* Configure the PLL3  multiplication and division factors. */
    __HAL_RCC_PLL3_CONFIG(pll3->PLL3M,
 8004c10:	4b42      	ldr	r3, [pc, #264]	; (8004d1c <RCCEx_PLL3_Config+0x15c>)
 8004c12:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004c14:	f023 727c 	bic.w	r2, r3, #66060288	; 0x3f00000
 8004c18:	687b      	ldr	r3, [r7, #4]
 8004c1a:	681b      	ldr	r3, [r3, #0]
 8004c1c:	051b      	lsls	r3, r3, #20
 8004c1e:	493f      	ldr	r1, [pc, #252]	; (8004d1c <RCCEx_PLL3_Config+0x15c>)
 8004c20:	4313      	orrs	r3, r2
 8004c22:	628b      	str	r3, [r1, #40]	; 0x28
 8004c24:	687b      	ldr	r3, [r7, #4]
 8004c26:	685b      	ldr	r3, [r3, #4]
 8004c28:	3b01      	subs	r3, #1
 8004c2a:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8004c2e:	687b      	ldr	r3, [r7, #4]
 8004c30:	689b      	ldr	r3, [r3, #8]
 8004c32:	3b01      	subs	r3, #1
 8004c34:	025b      	lsls	r3, r3, #9
 8004c36:	b29b      	uxth	r3, r3
 8004c38:	431a      	orrs	r2, r3
 8004c3a:	687b      	ldr	r3, [r7, #4]
 8004c3c:	68db      	ldr	r3, [r3, #12]
 8004c3e:	3b01      	subs	r3, #1
 8004c40:	041b      	lsls	r3, r3, #16
 8004c42:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 8004c46:	431a      	orrs	r2, r3
 8004c48:	687b      	ldr	r3, [r7, #4]
 8004c4a:	691b      	ldr	r3, [r3, #16]
 8004c4c:	3b01      	subs	r3, #1
 8004c4e:	061b      	lsls	r3, r3, #24
 8004c50:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 8004c54:	4931      	ldr	r1, [pc, #196]	; (8004d1c <RCCEx_PLL3_Config+0x15c>)
 8004c56:	4313      	orrs	r3, r2
 8004c58:	640b      	str	r3, [r1, #64]	; 0x40
                          pll3->PLL3P,
                          pll3->PLL3Q,
                          pll3->PLL3R);

    /* Select PLL3 input reference frequency range: VCI */
    __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE) ;
 8004c5a:	4b30      	ldr	r3, [pc, #192]	; (8004d1c <RCCEx_PLL3_Config+0x15c>)
 8004c5c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004c5e:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8004c62:	687b      	ldr	r3, [r7, #4]
 8004c64:	695b      	ldr	r3, [r3, #20]
 8004c66:	492d      	ldr	r1, [pc, #180]	; (8004d1c <RCCEx_PLL3_Config+0x15c>)
 8004c68:	4313      	orrs	r3, r2
 8004c6a:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL3 output frequency range : VCO */
    __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL) ;
 8004c6c:	4b2b      	ldr	r3, [pc, #172]	; (8004d1c <RCCEx_PLL3_Config+0x15c>)
 8004c6e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004c70:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 8004c74:	687b      	ldr	r3, [r7, #4]
 8004c76:	699b      	ldr	r3, [r3, #24]
 8004c78:	4928      	ldr	r1, [pc, #160]	; (8004d1c <RCCEx_PLL3_Config+0x15c>)
 8004c7a:	4313      	orrs	r3, r2
 8004c7c:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_DISABLE();
 8004c7e:	4b27      	ldr	r3, [pc, #156]	; (8004d1c <RCCEx_PLL3_Config+0x15c>)
 8004c80:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004c82:	4a26      	ldr	r2, [pc, #152]	; (8004d1c <RCCEx_PLL3_Config+0x15c>)
 8004c84:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8004c88:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 8004c8a:	4b24      	ldr	r3, [pc, #144]	; (8004d1c <RCCEx_PLL3_Config+0x15c>)
 8004c8c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8004c8e:	4b24      	ldr	r3, [pc, #144]	; (8004d20 <RCCEx_PLL3_Config+0x160>)
 8004c90:	4013      	ands	r3, r2
 8004c92:	687a      	ldr	r2, [r7, #4]
 8004c94:	69d2      	ldr	r2, [r2, #28]
 8004c96:	00d2      	lsls	r2, r2, #3
 8004c98:	4920      	ldr	r1, [pc, #128]	; (8004d1c <RCCEx_PLL3_Config+0x15c>)
 8004c9a:	4313      	orrs	r3, r2
 8004c9c:	644b      	str	r3, [r1, #68]	; 0x44

    /* Enable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_ENABLE();
 8004c9e:	4b1f      	ldr	r3, [pc, #124]	; (8004d1c <RCCEx_PLL3_Config+0x15c>)
 8004ca0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004ca2:	4a1e      	ldr	r2, [pc, #120]	; (8004d1c <RCCEx_PLL3_Config+0x15c>)
 8004ca4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004ca8:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL3 clock output */
    if(Divider == DIVIDER_P_UPDATE)
 8004caa:	683b      	ldr	r3, [r7, #0]
 8004cac:	2b00      	cmp	r3, #0
 8004cae:	d106      	bne.n	8004cbe <RCCEx_PLL3_Config+0xfe>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
 8004cb0:	4b1a      	ldr	r3, [pc, #104]	; (8004d1c <RCCEx_PLL3_Config+0x15c>)
 8004cb2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004cb4:	4a19      	ldr	r2, [pc, #100]	; (8004d1c <RCCEx_PLL3_Config+0x15c>)
 8004cb6:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8004cba:	62d3      	str	r3, [r2, #44]	; 0x2c
 8004cbc:	e00f      	b.n	8004cde <RCCEx_PLL3_Config+0x11e>
    }
    else if(Divider == DIVIDER_Q_UPDATE)
 8004cbe:	683b      	ldr	r3, [r7, #0]
 8004cc0:	2b01      	cmp	r3, #1
 8004cc2:	d106      	bne.n	8004cd2 <RCCEx_PLL3_Config+0x112>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
 8004cc4:	4b15      	ldr	r3, [pc, #84]	; (8004d1c <RCCEx_PLL3_Config+0x15c>)
 8004cc6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004cc8:	4a14      	ldr	r2, [pc, #80]	; (8004d1c <RCCEx_PLL3_Config+0x15c>)
 8004cca:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8004cce:	62d3      	str	r3, [r2, #44]	; 0x2c
 8004cd0:	e005      	b.n	8004cde <RCCEx_PLL3_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
 8004cd2:	4b12      	ldr	r3, [pc, #72]	; (8004d1c <RCCEx_PLL3_Config+0x15c>)
 8004cd4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004cd6:	4a11      	ldr	r2, [pc, #68]	; (8004d1c <RCCEx_PLL3_Config+0x15c>)
 8004cd8:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8004cdc:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL3. */
    __HAL_RCC_PLL3_ENABLE();
 8004cde:	4b0f      	ldr	r3, [pc, #60]	; (8004d1c <RCCEx_PLL3_Config+0x15c>)
 8004ce0:	681b      	ldr	r3, [r3, #0]
 8004ce2:	4a0e      	ldr	r2, [pc, #56]	; (8004d1c <RCCEx_PLL3_Config+0x15c>)
 8004ce4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004ce8:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004cea:	f7fc fbcd 	bl	8001488 <HAL_GetTick>
 8004cee:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL3 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8004cf0:	e008      	b.n	8004d04 <RCCEx_PLL3_Config+0x144>
    {
      if( (HAL_GetTick() - tickstart ) > PLL3_TIMEOUT_VALUE)
 8004cf2:	f7fc fbc9 	bl	8001488 <HAL_GetTick>
 8004cf6:	4602      	mov	r2, r0
 8004cf8:	68bb      	ldr	r3, [r7, #8]
 8004cfa:	1ad3      	subs	r3, r2, r3
 8004cfc:	2b02      	cmp	r3, #2
 8004cfe:	d901      	bls.n	8004d04 <RCCEx_PLL3_Config+0x144>
      {
        return HAL_TIMEOUT;
 8004d00:	2303      	movs	r3, #3
 8004d02:	e006      	b.n	8004d12 <RCCEx_PLL3_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8004d04:	4b05      	ldr	r3, [pc, #20]	; (8004d1c <RCCEx_PLL3_Config+0x15c>)
 8004d06:	681b      	ldr	r3, [r3, #0]
 8004d08:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8004d0c:	2b00      	cmp	r3, #0
 8004d0e:	d0f0      	beq.n	8004cf2 <RCCEx_PLL3_Config+0x132>
    }

  }


  return status;
 8004d10:	7bfb      	ldrb	r3, [r7, #15]
}
 8004d12:	4618      	mov	r0, r3
 8004d14:	3710      	adds	r7, #16
 8004d16:	46bd      	mov	sp, r7
 8004d18:	bd80      	pop	{r7, pc}
 8004d1a:	bf00      	nop
 8004d1c:	58024400 	.word	0x58024400
 8004d20:	ffff0007 	.word	0xffff0007

08004d24 <HAL_SRAM_Init>:
  * @param  ExtTiming Pointer to SRAM extended mode timing structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SRAM_Init(SRAM_HandleTypeDef *hsram, FMC_NORSRAM_TimingTypeDef *Timing,
                                FMC_NORSRAM_TimingTypeDef *ExtTiming)
{
 8004d24:	b580      	push	{r7, lr}
 8004d26:	b084      	sub	sp, #16
 8004d28:	af00      	add	r7, sp, #0
 8004d2a:	60f8      	str	r0, [r7, #12]
 8004d2c:	60b9      	str	r1, [r7, #8]
 8004d2e:	607a      	str	r2, [r7, #4]
  /* Check the SRAM handle parameter */
  if (hsram == NULL)
 8004d30:	68fb      	ldr	r3, [r7, #12]
 8004d32:	2b00      	cmp	r3, #0
 8004d34:	d101      	bne.n	8004d3a <HAL_SRAM_Init+0x16>
  {
    return HAL_ERROR;
 8004d36:	2301      	movs	r3, #1
 8004d38:	e03e      	b.n	8004db8 <HAL_SRAM_Init+0x94>
  }

  if (hsram->State == HAL_SRAM_STATE_RESET)
 8004d3a:	68fb      	ldr	r3, [r7, #12]
 8004d3c:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8004d40:	b2db      	uxtb	r3, r3
 8004d42:	2b00      	cmp	r3, #0
 8004d44:	d106      	bne.n	8004d54 <HAL_SRAM_Init+0x30>
  {
    /* Allocate lock resource and initialize it */
    hsram->Lock = HAL_UNLOCKED;
 8004d46:	68fb      	ldr	r3, [r7, #12]
 8004d48:	2200      	movs	r2, #0
 8004d4a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44

    /* Init the low level hardware */
    hsram->MspInitCallback(hsram);
#else
    /* Initialize the low level hardware (MSP) */
    HAL_SRAM_MspInit(hsram);
 8004d4e:	68f8      	ldr	r0, [r7, #12]
 8004d50:	f7fc f9a8 	bl	80010a4 <HAL_SRAM_MspInit>
#endif /* USE_HAL_SRAM_REGISTER_CALLBACKS */
  }

  /* Initialize SRAM control Interface */
  (void)FMC_NORSRAM_Init(hsram->Instance, &(hsram->Init));
 8004d54:	68fb      	ldr	r3, [r7, #12]
 8004d56:	681a      	ldr	r2, [r3, #0]
 8004d58:	68fb      	ldr	r3, [r7, #12]
 8004d5a:	3308      	adds	r3, #8
 8004d5c:	4619      	mov	r1, r3
 8004d5e:	4610      	mov	r0, r2
 8004d60:	f001 fd40 	bl	80067e4 <FMC_NORSRAM_Init>

  /* Initialize SRAM timing Interface */
  (void)FMC_NORSRAM_Timing_Init(hsram->Instance, Timing, hsram->Init.NSBank);
 8004d64:	68fb      	ldr	r3, [r7, #12]
 8004d66:	6818      	ldr	r0, [r3, #0]
 8004d68:	68fb      	ldr	r3, [r7, #12]
 8004d6a:	689b      	ldr	r3, [r3, #8]
 8004d6c:	461a      	mov	r2, r3
 8004d6e:	68b9      	ldr	r1, [r7, #8]
 8004d70:	f001 fdc8 	bl	8006904 <FMC_NORSRAM_Timing_Init>

  /* Initialize SRAM extended mode timing Interface */
  (void)FMC_NORSRAM_Extended_Timing_Init(hsram->Extended, ExtTiming, hsram->Init.NSBank,
 8004d74:	68fb      	ldr	r3, [r7, #12]
 8004d76:	6858      	ldr	r0, [r3, #4]
 8004d78:	68fb      	ldr	r3, [r7, #12]
 8004d7a:	689a      	ldr	r2, [r3, #8]
 8004d7c:	68fb      	ldr	r3, [r7, #12]
 8004d7e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004d80:	6879      	ldr	r1, [r7, #4]
 8004d82:	f001 fe0f 	bl	80069a4 <FMC_NORSRAM_Extended_Timing_Init>
                                         hsram->Init.ExtendedMode);

  /* Enable the NORSRAM device */
  __FMC_NORSRAM_ENABLE(hsram->Instance, hsram->Init.NSBank);
 8004d86:	68fb      	ldr	r3, [r7, #12]
 8004d88:	681b      	ldr	r3, [r3, #0]
 8004d8a:	68fa      	ldr	r2, [r7, #12]
 8004d8c:	6892      	ldr	r2, [r2, #8]
 8004d8e:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8004d92:	68fb      	ldr	r3, [r7, #12]
 8004d94:	681b      	ldr	r3, [r3, #0]
 8004d96:	68fa      	ldr	r2, [r7, #12]
 8004d98:	6892      	ldr	r2, [r2, #8]
 8004d9a:	f041 0101 	orr.w	r1, r1, #1
 8004d9e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

  /* Enable FMC Peripheral */
  __FMC_ENABLE();
 8004da2:	4b07      	ldr	r3, [pc, #28]	; (8004dc0 <HAL_SRAM_Init+0x9c>)
 8004da4:	681b      	ldr	r3, [r3, #0]
 8004da6:	4a06      	ldr	r2, [pc, #24]	; (8004dc0 <HAL_SRAM_Init+0x9c>)
 8004da8:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8004dac:	6013      	str	r3, [r2, #0]

  /* Initialize the SRAM controller state */
  hsram->State = HAL_SRAM_STATE_READY;
 8004dae:	68fb      	ldr	r3, [r7, #12]
 8004db0:	2201      	movs	r2, #1
 8004db2:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  return HAL_OK;
 8004db6:	2300      	movs	r3, #0
}
 8004db8:	4618      	mov	r0, r3
 8004dba:	3710      	adds	r7, #16
 8004dbc:	46bd      	mov	sp, r7
 8004dbe:	bd80      	pop	{r7, pc}
 8004dc0:	52004000 	.word	0x52004000

08004dc4 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8004dc4:	b580      	push	{r7, lr}
 8004dc6:	b082      	sub	sp, #8
 8004dc8:	af00      	add	r7, sp, #0
 8004dca:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8004dcc:	687b      	ldr	r3, [r7, #4]
 8004dce:	2b00      	cmp	r3, #0
 8004dd0:	d101      	bne.n	8004dd6 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8004dd2:	2301      	movs	r3, #1
 8004dd4:	e042      	b.n	8004e5c <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8004dd6:	687b      	ldr	r3, [r7, #4]
 8004dd8:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004ddc:	2b00      	cmp	r3, #0
 8004dde:	d106      	bne.n	8004dee <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8004de0:	687b      	ldr	r3, [r7, #4]
 8004de2:	2200      	movs	r2, #0
 8004de4:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8004de8:	6878      	ldr	r0, [r7, #4]
 8004dea:	f7fc f84f 	bl	8000e8c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8004dee:	687b      	ldr	r3, [r7, #4]
 8004df0:	2224      	movs	r2, #36	; 0x24
 8004df2:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  __HAL_UART_DISABLE(huart);
 8004df6:	687b      	ldr	r3, [r7, #4]
 8004df8:	681b      	ldr	r3, [r3, #0]
 8004dfa:	681a      	ldr	r2, [r3, #0]
 8004dfc:	687b      	ldr	r3, [r7, #4]
 8004dfe:	681b      	ldr	r3, [r3, #0]
 8004e00:	f022 0201 	bic.w	r2, r2, #1
 8004e04:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8004e06:	6878      	ldr	r0, [r7, #4]
 8004e08:	f000 fb9c 	bl	8005544 <UART_SetConfig>
 8004e0c:	4603      	mov	r3, r0
 8004e0e:	2b01      	cmp	r3, #1
 8004e10:	d101      	bne.n	8004e16 <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 8004e12:	2301      	movs	r3, #1
 8004e14:	e022      	b.n	8004e5c <HAL_UART_Init+0x98>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8004e16:	687b      	ldr	r3, [r7, #4]
 8004e18:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004e1a:	2b00      	cmp	r3, #0
 8004e1c:	d002      	beq.n	8004e24 <HAL_UART_Init+0x60>
  {
    UART_AdvFeatureConfig(huart);
 8004e1e:	6878      	ldr	r0, [r7, #4]
 8004e20:	f001 f9ee 	bl	8006200 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8004e24:	687b      	ldr	r3, [r7, #4]
 8004e26:	681b      	ldr	r3, [r3, #0]
 8004e28:	685a      	ldr	r2, [r3, #4]
 8004e2a:	687b      	ldr	r3, [r7, #4]
 8004e2c:	681b      	ldr	r3, [r3, #0]
 8004e2e:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8004e32:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8004e34:	687b      	ldr	r3, [r7, #4]
 8004e36:	681b      	ldr	r3, [r3, #0]
 8004e38:	689a      	ldr	r2, [r3, #8]
 8004e3a:	687b      	ldr	r3, [r7, #4]
 8004e3c:	681b      	ldr	r3, [r3, #0]
 8004e3e:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8004e42:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8004e44:	687b      	ldr	r3, [r7, #4]
 8004e46:	681b      	ldr	r3, [r3, #0]
 8004e48:	681a      	ldr	r2, [r3, #0]
 8004e4a:	687b      	ldr	r3, [r7, #4]
 8004e4c:	681b      	ldr	r3, [r3, #0]
 8004e4e:	f042 0201 	orr.w	r2, r2, #1
 8004e52:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8004e54:	6878      	ldr	r0, [r7, #4]
 8004e56:	f001 fa75 	bl	8006344 <UART_CheckIdleState>
 8004e5a:	4603      	mov	r3, r0
}
 8004e5c:	4618      	mov	r0, r3
 8004e5e:	3708      	adds	r7, #8
 8004e60:	46bd      	mov	sp, r7
 8004e62:	bd80      	pop	{r7, pc}

08004e64 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004e64:	b580      	push	{r7, lr}
 8004e66:	b08a      	sub	sp, #40	; 0x28
 8004e68:	af02      	add	r7, sp, #8
 8004e6a:	60f8      	str	r0, [r7, #12]
 8004e6c:	60b9      	str	r1, [r7, #8]
 8004e6e:	603b      	str	r3, [r7, #0]
 8004e70:	4613      	mov	r3, r2
 8004e72:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8004e74:	68fb      	ldr	r3, [r7, #12]
 8004e76:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004e7a:	2b20      	cmp	r3, #32
 8004e7c:	f040 8083 	bne.w	8004f86 <HAL_UART_Transmit+0x122>
  {
    if ((pData == NULL) || (Size == 0U))
 8004e80:	68bb      	ldr	r3, [r7, #8]
 8004e82:	2b00      	cmp	r3, #0
 8004e84:	d002      	beq.n	8004e8c <HAL_UART_Transmit+0x28>
 8004e86:	88fb      	ldrh	r3, [r7, #6]
 8004e88:	2b00      	cmp	r3, #0
 8004e8a:	d101      	bne.n	8004e90 <HAL_UART_Transmit+0x2c>
    {
      return  HAL_ERROR;
 8004e8c:	2301      	movs	r3, #1
 8004e8e:	e07b      	b.n	8004f88 <HAL_UART_Transmit+0x124>
    }

    __HAL_LOCK(huart);
 8004e90:	68fb      	ldr	r3, [r7, #12]
 8004e92:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8004e96:	2b01      	cmp	r3, #1
 8004e98:	d101      	bne.n	8004e9e <HAL_UART_Transmit+0x3a>
 8004e9a:	2302      	movs	r3, #2
 8004e9c:	e074      	b.n	8004f88 <HAL_UART_Transmit+0x124>
 8004e9e:	68fb      	ldr	r3, [r7, #12]
 8004ea0:	2201      	movs	r2, #1
 8004ea2:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004ea6:	68fb      	ldr	r3, [r7, #12]
 8004ea8:	2200      	movs	r2, #0
 8004eaa:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8004eae:	68fb      	ldr	r3, [r7, #12]
 8004eb0:	2221      	movs	r2, #33	; 0x21
 8004eb2:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8004eb6:	f7fc fae7 	bl	8001488 <HAL_GetTick>
 8004eba:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8004ebc:	68fb      	ldr	r3, [r7, #12]
 8004ebe:	88fa      	ldrh	r2, [r7, #6]
 8004ec0:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
    huart->TxXferCount = Size;
 8004ec4:	68fb      	ldr	r3, [r7, #12]
 8004ec6:	88fa      	ldrh	r2, [r7, #6]
 8004ec8:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004ecc:	68fb      	ldr	r3, [r7, #12]
 8004ece:	689b      	ldr	r3, [r3, #8]
 8004ed0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004ed4:	d108      	bne.n	8004ee8 <HAL_UART_Transmit+0x84>
 8004ed6:	68fb      	ldr	r3, [r7, #12]
 8004ed8:	691b      	ldr	r3, [r3, #16]
 8004eda:	2b00      	cmp	r3, #0
 8004edc:	d104      	bne.n	8004ee8 <HAL_UART_Transmit+0x84>
    {
      pdata8bits  = NULL;
 8004ede:	2300      	movs	r3, #0
 8004ee0:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8004ee2:	68bb      	ldr	r3, [r7, #8]
 8004ee4:	61bb      	str	r3, [r7, #24]
 8004ee6:	e003      	b.n	8004ef0 <HAL_UART_Transmit+0x8c>
    }
    else
    {
      pdata8bits  = pData;
 8004ee8:	68bb      	ldr	r3, [r7, #8]
 8004eea:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8004eec:	2300      	movs	r3, #0
 8004eee:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 8004ef0:	68fb      	ldr	r3, [r7, #12]
 8004ef2:	2200      	movs	r2, #0
 8004ef4:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    while (huart->TxXferCount > 0U)
 8004ef8:	e02c      	b.n	8004f54 <HAL_UART_Transmit+0xf0>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8004efa:	683b      	ldr	r3, [r7, #0]
 8004efc:	9300      	str	r3, [sp, #0]
 8004efe:	697b      	ldr	r3, [r7, #20]
 8004f00:	2200      	movs	r2, #0
 8004f02:	2180      	movs	r1, #128	; 0x80
 8004f04:	68f8      	ldr	r0, [r7, #12]
 8004f06:	f001 fa68 	bl	80063da <UART_WaitOnFlagUntilTimeout>
 8004f0a:	4603      	mov	r3, r0
 8004f0c:	2b00      	cmp	r3, #0
 8004f0e:	d001      	beq.n	8004f14 <HAL_UART_Transmit+0xb0>
      {
        return HAL_TIMEOUT;
 8004f10:	2303      	movs	r3, #3
 8004f12:	e039      	b.n	8004f88 <HAL_UART_Transmit+0x124>
      }
      if (pdata8bits == NULL)
 8004f14:	69fb      	ldr	r3, [r7, #28]
 8004f16:	2b00      	cmp	r3, #0
 8004f18:	d10b      	bne.n	8004f32 <HAL_UART_Transmit+0xce>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8004f1a:	69bb      	ldr	r3, [r7, #24]
 8004f1c:	881b      	ldrh	r3, [r3, #0]
 8004f1e:	461a      	mov	r2, r3
 8004f20:	68fb      	ldr	r3, [r7, #12]
 8004f22:	681b      	ldr	r3, [r3, #0]
 8004f24:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8004f28:	629a      	str	r2, [r3, #40]	; 0x28
        pdata16bits++;
 8004f2a:	69bb      	ldr	r3, [r7, #24]
 8004f2c:	3302      	adds	r3, #2
 8004f2e:	61bb      	str	r3, [r7, #24]
 8004f30:	e007      	b.n	8004f42 <HAL_UART_Transmit+0xde>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8004f32:	69fb      	ldr	r3, [r7, #28]
 8004f34:	781a      	ldrb	r2, [r3, #0]
 8004f36:	68fb      	ldr	r3, [r7, #12]
 8004f38:	681b      	ldr	r3, [r3, #0]
 8004f3a:	629a      	str	r2, [r3, #40]	; 0x28
        pdata8bits++;
 8004f3c:	69fb      	ldr	r3, [r7, #28]
 8004f3e:	3301      	adds	r3, #1
 8004f40:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8004f42:	68fb      	ldr	r3, [r7, #12]
 8004f44:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 8004f48:	b29b      	uxth	r3, r3
 8004f4a:	3b01      	subs	r3, #1
 8004f4c:	b29a      	uxth	r2, r3
 8004f4e:	68fb      	ldr	r3, [r7, #12]
 8004f50:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
    while (huart->TxXferCount > 0U)
 8004f54:	68fb      	ldr	r3, [r7, #12]
 8004f56:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 8004f5a:	b29b      	uxth	r3, r3
 8004f5c:	2b00      	cmp	r3, #0
 8004f5e:	d1cc      	bne.n	8004efa <HAL_UART_Transmit+0x96>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8004f60:	683b      	ldr	r3, [r7, #0]
 8004f62:	9300      	str	r3, [sp, #0]
 8004f64:	697b      	ldr	r3, [r7, #20]
 8004f66:	2200      	movs	r2, #0
 8004f68:	2140      	movs	r1, #64	; 0x40
 8004f6a:	68f8      	ldr	r0, [r7, #12]
 8004f6c:	f001 fa35 	bl	80063da <UART_WaitOnFlagUntilTimeout>
 8004f70:	4603      	mov	r3, r0
 8004f72:	2b00      	cmp	r3, #0
 8004f74:	d001      	beq.n	8004f7a <HAL_UART_Transmit+0x116>
    {
      return HAL_TIMEOUT;
 8004f76:	2303      	movs	r3, #3
 8004f78:	e006      	b.n	8004f88 <HAL_UART_Transmit+0x124>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8004f7a:	68fb      	ldr	r3, [r7, #12]
 8004f7c:	2220      	movs	r2, #32
 8004f7e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    return HAL_OK;
 8004f82:	2300      	movs	r3, #0
 8004f84:	e000      	b.n	8004f88 <HAL_UART_Transmit+0x124>
  }
  else
  {
    return HAL_BUSY;
 8004f86:	2302      	movs	r3, #2
  }
}
 8004f88:	4618      	mov	r0, r3
 8004f8a:	3720      	adds	r7, #32
 8004f8c:	46bd      	mov	sp, r7
 8004f8e:	bd80      	pop	{r7, pc}

08004f90 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8004f90:	b580      	push	{r7, lr}
 8004f92:	b088      	sub	sp, #32
 8004f94:	af00      	add	r7, sp, #0
 8004f96:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8004f98:	687b      	ldr	r3, [r7, #4]
 8004f9a:	681b      	ldr	r3, [r3, #0]
 8004f9c:	69db      	ldr	r3, [r3, #28]
 8004f9e:	61fb      	str	r3, [r7, #28]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8004fa0:	687b      	ldr	r3, [r7, #4]
 8004fa2:	681b      	ldr	r3, [r3, #0]
 8004fa4:	681b      	ldr	r3, [r3, #0]
 8004fa6:	61bb      	str	r3, [r7, #24]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8004fa8:	687b      	ldr	r3, [r7, #4]
 8004faa:	681b      	ldr	r3, [r3, #0]
 8004fac:	689b      	ldr	r3, [r3, #8]
 8004fae:	617b      	str	r3, [r7, #20]

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 8004fb0:	69fa      	ldr	r2, [r7, #28]
 8004fb2:	f640 030f 	movw	r3, #2063	; 0x80f
 8004fb6:	4013      	ands	r3, r2
 8004fb8:	613b      	str	r3, [r7, #16]
  if (errorflags == 0U)
 8004fba:	693b      	ldr	r3, [r7, #16]
 8004fbc:	2b00      	cmp	r3, #0
 8004fbe:	d118      	bne.n	8004ff2 <HAL_UART_IRQHandler+0x62>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 8004fc0:	69fb      	ldr	r3, [r7, #28]
 8004fc2:	f003 0320 	and.w	r3, r3, #32
 8004fc6:	2b00      	cmp	r3, #0
 8004fc8:	d013      	beq.n	8004ff2 <HAL_UART_IRQHandler+0x62>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 8004fca:	69bb      	ldr	r3, [r7, #24]
 8004fcc:	f003 0320 	and.w	r3, r3, #32
 8004fd0:	2b00      	cmp	r3, #0
 8004fd2:	d104      	bne.n	8004fde <HAL_UART_IRQHandler+0x4e>
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 8004fd4:	697b      	ldr	r3, [r7, #20]
 8004fd6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004fda:	2b00      	cmp	r3, #0
 8004fdc:	d009      	beq.n	8004ff2 <HAL_UART_IRQHandler+0x62>
    {
      if (huart->RxISR != NULL)
 8004fde:	687b      	ldr	r3, [r7, #4]
 8004fe0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004fe2:	2b00      	cmp	r3, #0
 8004fe4:	f000 8282 	beq.w	80054ec <HAL_UART_IRQHandler+0x55c>
      {
        huart->RxISR(huart);
 8004fe8:	687b      	ldr	r3, [r7, #4]
 8004fea:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004fec:	6878      	ldr	r0, [r7, #4]
 8004fee:	4798      	blx	r3
      }
      return;
 8004ff0:	e27c      	b.n	80054ec <HAL_UART_IRQHandler+0x55c>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 8004ff2:	693b      	ldr	r3, [r7, #16]
 8004ff4:	2b00      	cmp	r3, #0
 8004ff6:	f000 80ef 	beq.w	80051d8 <HAL_UART_IRQHandler+0x248>
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
 8004ffa:	697a      	ldr	r2, [r7, #20]
 8004ffc:	4b73      	ldr	r3, [pc, #460]	; (80051cc <HAL_UART_IRQHandler+0x23c>)
 8004ffe:	4013      	ands	r3, r2
 8005000:	2b00      	cmp	r3, #0
 8005002:	d105      	bne.n	8005010 <HAL_UART_IRQHandler+0x80>
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
 8005004:	69ba      	ldr	r2, [r7, #24]
 8005006:	4b72      	ldr	r3, [pc, #456]	; (80051d0 <HAL_UART_IRQHandler+0x240>)
 8005008:	4013      	ands	r3, r2
 800500a:	2b00      	cmp	r3, #0
 800500c:	f000 80e4 	beq.w	80051d8 <HAL_UART_IRQHandler+0x248>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8005010:	69fb      	ldr	r3, [r7, #28]
 8005012:	f003 0301 	and.w	r3, r3, #1
 8005016:	2b00      	cmp	r3, #0
 8005018:	d010      	beq.n	800503c <HAL_UART_IRQHandler+0xac>
 800501a:	69bb      	ldr	r3, [r7, #24]
 800501c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005020:	2b00      	cmp	r3, #0
 8005022:	d00b      	beq.n	800503c <HAL_UART_IRQHandler+0xac>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8005024:	687b      	ldr	r3, [r7, #4]
 8005026:	681b      	ldr	r3, [r3, #0]
 8005028:	2201      	movs	r2, #1
 800502a:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 800502c:	687b      	ldr	r3, [r7, #4]
 800502e:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8005032:	f043 0201 	orr.w	r2, r3, #1
 8005036:	687b      	ldr	r3, [r7, #4]
 8005038:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800503c:	69fb      	ldr	r3, [r7, #28]
 800503e:	f003 0302 	and.w	r3, r3, #2
 8005042:	2b00      	cmp	r3, #0
 8005044:	d010      	beq.n	8005068 <HAL_UART_IRQHandler+0xd8>
 8005046:	697b      	ldr	r3, [r7, #20]
 8005048:	f003 0301 	and.w	r3, r3, #1
 800504c:	2b00      	cmp	r3, #0
 800504e:	d00b      	beq.n	8005068 <HAL_UART_IRQHandler+0xd8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8005050:	687b      	ldr	r3, [r7, #4]
 8005052:	681b      	ldr	r3, [r3, #0]
 8005054:	2202      	movs	r2, #2
 8005056:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8005058:	687b      	ldr	r3, [r7, #4]
 800505a:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800505e:	f043 0204 	orr.w	r2, r3, #4
 8005062:	687b      	ldr	r3, [r7, #4]
 8005064:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8005068:	69fb      	ldr	r3, [r7, #28]
 800506a:	f003 0304 	and.w	r3, r3, #4
 800506e:	2b00      	cmp	r3, #0
 8005070:	d010      	beq.n	8005094 <HAL_UART_IRQHandler+0x104>
 8005072:	697b      	ldr	r3, [r7, #20]
 8005074:	f003 0301 	and.w	r3, r3, #1
 8005078:	2b00      	cmp	r3, #0
 800507a:	d00b      	beq.n	8005094 <HAL_UART_IRQHandler+0x104>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 800507c:	687b      	ldr	r3, [r7, #4]
 800507e:	681b      	ldr	r3, [r3, #0]
 8005080:	2204      	movs	r2, #4
 8005082:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8005084:	687b      	ldr	r3, [r7, #4]
 8005086:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800508a:	f043 0202 	orr.w	r2, r3, #2
 800508e:	687b      	ldr	r3, [r7, #4]
 8005090:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 8005094:	69fb      	ldr	r3, [r7, #28]
 8005096:	f003 0308 	and.w	r3, r3, #8
 800509a:	2b00      	cmp	r3, #0
 800509c:	d015      	beq.n	80050ca <HAL_UART_IRQHandler+0x13a>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 800509e:	69bb      	ldr	r3, [r7, #24]
 80050a0:	f003 0320 	and.w	r3, r3, #32
 80050a4:	2b00      	cmp	r3, #0
 80050a6:	d104      	bne.n	80050b2 <HAL_UART_IRQHandler+0x122>
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
 80050a8:	697a      	ldr	r2, [r7, #20]
 80050aa:	4b48      	ldr	r3, [pc, #288]	; (80051cc <HAL_UART_IRQHandler+0x23c>)
 80050ac:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 80050ae:	2b00      	cmp	r3, #0
 80050b0:	d00b      	beq.n	80050ca <HAL_UART_IRQHandler+0x13a>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 80050b2:	687b      	ldr	r3, [r7, #4]
 80050b4:	681b      	ldr	r3, [r3, #0]
 80050b6:	2208      	movs	r2, #8
 80050b8:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 80050ba:	687b      	ldr	r3, [r7, #4]
 80050bc:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80050c0:	f043 0208 	orr.w	r2, r3, #8
 80050c4:	687b      	ldr	r3, [r7, #4]
 80050c6:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 80050ca:	69fb      	ldr	r3, [r7, #28]
 80050cc:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80050d0:	2b00      	cmp	r3, #0
 80050d2:	d011      	beq.n	80050f8 <HAL_UART_IRQHandler+0x168>
 80050d4:	69bb      	ldr	r3, [r7, #24]
 80050d6:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 80050da:	2b00      	cmp	r3, #0
 80050dc:	d00c      	beq.n	80050f8 <HAL_UART_IRQHandler+0x168>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80050de:	687b      	ldr	r3, [r7, #4]
 80050e0:	681b      	ldr	r3, [r3, #0]
 80050e2:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80050e6:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 80050e8:	687b      	ldr	r3, [r7, #4]
 80050ea:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80050ee:	f043 0220 	orr.w	r2, r3, #32
 80050f2:	687b      	ldr	r3, [r7, #4]
 80050f4:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 80050f8:	687b      	ldr	r3, [r7, #4]
 80050fa:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80050fe:	2b00      	cmp	r3, #0
 8005100:	f000 81f6 	beq.w	80054f0 <HAL_UART_IRQHandler+0x560>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 8005104:	69fb      	ldr	r3, [r7, #28]
 8005106:	f003 0320 	and.w	r3, r3, #32
 800510a:	2b00      	cmp	r3, #0
 800510c:	d011      	beq.n	8005132 <HAL_UART_IRQHandler+0x1a2>
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 800510e:	69bb      	ldr	r3, [r7, #24]
 8005110:	f003 0320 	and.w	r3, r3, #32
 8005114:	2b00      	cmp	r3, #0
 8005116:	d104      	bne.n	8005122 <HAL_UART_IRQHandler+0x192>
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 8005118:	697b      	ldr	r3, [r7, #20]
 800511a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800511e:	2b00      	cmp	r3, #0
 8005120:	d007      	beq.n	8005132 <HAL_UART_IRQHandler+0x1a2>
      {
        if (huart->RxISR != NULL)
 8005122:	687b      	ldr	r3, [r7, #4]
 8005124:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005126:	2b00      	cmp	r3, #0
 8005128:	d003      	beq.n	8005132 <HAL_UART_IRQHandler+0x1a2>
        {
          huart->RxISR(huart);
 800512a:	687b      	ldr	r3, [r7, #4]
 800512c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800512e:	6878      	ldr	r0, [r7, #4]
 8005130:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 8005132:	687b      	ldr	r3, [r7, #4]
 8005134:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8005138:	60fb      	str	r3, [r7, #12]
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800513a:	687b      	ldr	r3, [r7, #4]
 800513c:	681b      	ldr	r3, [r3, #0]
 800513e:	689b      	ldr	r3, [r3, #8]
 8005140:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005144:	2b40      	cmp	r3, #64	; 0x40
 8005146:	d004      	beq.n	8005152 <HAL_UART_IRQHandler+0x1c2>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 8005148:	68fb      	ldr	r3, [r7, #12]
 800514a:	f003 0328 	and.w	r3, r3, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800514e:	2b00      	cmp	r3, #0
 8005150:	d031      	beq.n	80051b6 <HAL_UART_IRQHandler+0x226>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8005152:	6878      	ldr	r0, [r7, #4]
 8005154:	f001 f9c2 	bl	80064dc <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005158:	687b      	ldr	r3, [r7, #4]
 800515a:	681b      	ldr	r3, [r3, #0]
 800515c:	689b      	ldr	r3, [r3, #8]
 800515e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005162:	2b40      	cmp	r3, #64	; 0x40
 8005164:	d123      	bne.n	80051ae <HAL_UART_IRQHandler+0x21e>
        {
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8005166:	687b      	ldr	r3, [r7, #4]
 8005168:	681b      	ldr	r3, [r3, #0]
 800516a:	689a      	ldr	r2, [r3, #8]
 800516c:	687b      	ldr	r3, [r7, #4]
 800516e:	681b      	ldr	r3, [r3, #0]
 8005170:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8005174:	609a      	str	r2, [r3, #8]

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8005176:	687b      	ldr	r3, [r7, #4]
 8005178:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800517a:	2b00      	cmp	r3, #0
 800517c:	d013      	beq.n	80051a6 <HAL_UART_IRQHandler+0x216>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800517e:	687b      	ldr	r3, [r7, #4]
 8005180:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8005182:	4a14      	ldr	r2, [pc, #80]	; (80051d4 <HAL_UART_IRQHandler+0x244>)
 8005184:	651a      	str	r2, [r3, #80]	; 0x50

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8005186:	687b      	ldr	r3, [r7, #4]
 8005188:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800518a:	4618      	mov	r0, r3
 800518c:	f7fc fde6 	bl	8001d5c <HAL_DMA_Abort_IT>
 8005190:	4603      	mov	r3, r0
 8005192:	2b00      	cmp	r3, #0
 8005194:	d017      	beq.n	80051c6 <HAL_UART_IRQHandler+0x236>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8005196:	687b      	ldr	r3, [r7, #4]
 8005198:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800519a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800519c:	687a      	ldr	r2, [r7, #4]
 800519e:	6fd2      	ldr	r2, [r2, #124]	; 0x7c
 80051a0:	4610      	mov	r0, r2
 80051a2:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80051a4:	e00f      	b.n	80051c6 <HAL_UART_IRQHandler+0x236>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 80051a6:	6878      	ldr	r0, [r7, #4]
 80051a8:	f000 f9b6 	bl	8005518 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80051ac:	e00b      	b.n	80051c6 <HAL_UART_IRQHandler+0x236>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 80051ae:	6878      	ldr	r0, [r7, #4]
 80051b0:	f000 f9b2 	bl	8005518 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80051b4:	e007      	b.n	80051c6 <HAL_UART_IRQHandler+0x236>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 80051b6:	6878      	ldr	r0, [r7, #4]
 80051b8:	f000 f9ae 	bl	8005518 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 80051bc:	687b      	ldr	r3, [r7, #4]
 80051be:	2200      	movs	r2, #0
 80051c0:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
      }
    }
    return;
 80051c4:	e194      	b.n	80054f0 <HAL_UART_IRQHandler+0x560>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80051c6:	bf00      	nop
    return;
 80051c8:	e192      	b.n	80054f0 <HAL_UART_IRQHandler+0x560>
 80051ca:	bf00      	nop
 80051cc:	10000001 	.word	0x10000001
 80051d0:	04000120 	.word	0x04000120
 80051d4:	08006541 	.word	0x08006541

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80051d8:	687b      	ldr	r3, [r7, #4]
 80051da:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80051dc:	2b01      	cmp	r3, #1
 80051de:	f040 810f 	bne.w	8005400 <HAL_UART_IRQHandler+0x470>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 80051e2:	69fb      	ldr	r3, [r7, #28]
 80051e4:	f003 0310 	and.w	r3, r3, #16
 80051e8:	2b00      	cmp	r3, #0
 80051ea:	f000 8109 	beq.w	8005400 <HAL_UART_IRQHandler+0x470>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 80051ee:	69bb      	ldr	r3, [r7, #24]
 80051f0:	f003 0310 	and.w	r3, r3, #16
 80051f4:	2b00      	cmp	r3, #0
 80051f6:	f000 8103 	beq.w	8005400 <HAL_UART_IRQHandler+0x470>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 80051fa:	687b      	ldr	r3, [r7, #4]
 80051fc:	681b      	ldr	r3, [r3, #0]
 80051fe:	2210      	movs	r2, #16
 8005200:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005202:	687b      	ldr	r3, [r7, #4]
 8005204:	681b      	ldr	r3, [r3, #0]
 8005206:	689b      	ldr	r3, [r3, #8]
 8005208:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800520c:	2b40      	cmp	r3, #64	; 0x40
 800520e:	f040 80bb 	bne.w	8005388 <HAL_UART_IRQHandler+0x3f8>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8005212:	687b      	ldr	r3, [r7, #4]
 8005214:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8005216:	681b      	ldr	r3, [r3, #0]
 8005218:	4a96      	ldr	r2, [pc, #600]	; (8005474 <HAL_UART_IRQHandler+0x4e4>)
 800521a:	4293      	cmp	r3, r2
 800521c:	d059      	beq.n	80052d2 <HAL_UART_IRQHandler+0x342>
 800521e:	687b      	ldr	r3, [r7, #4]
 8005220:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8005222:	681b      	ldr	r3, [r3, #0]
 8005224:	4a94      	ldr	r2, [pc, #592]	; (8005478 <HAL_UART_IRQHandler+0x4e8>)
 8005226:	4293      	cmp	r3, r2
 8005228:	d053      	beq.n	80052d2 <HAL_UART_IRQHandler+0x342>
 800522a:	687b      	ldr	r3, [r7, #4]
 800522c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800522e:	681b      	ldr	r3, [r3, #0]
 8005230:	4a92      	ldr	r2, [pc, #584]	; (800547c <HAL_UART_IRQHandler+0x4ec>)
 8005232:	4293      	cmp	r3, r2
 8005234:	d04d      	beq.n	80052d2 <HAL_UART_IRQHandler+0x342>
 8005236:	687b      	ldr	r3, [r7, #4]
 8005238:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800523a:	681b      	ldr	r3, [r3, #0]
 800523c:	4a90      	ldr	r2, [pc, #576]	; (8005480 <HAL_UART_IRQHandler+0x4f0>)
 800523e:	4293      	cmp	r3, r2
 8005240:	d047      	beq.n	80052d2 <HAL_UART_IRQHandler+0x342>
 8005242:	687b      	ldr	r3, [r7, #4]
 8005244:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8005246:	681b      	ldr	r3, [r3, #0]
 8005248:	4a8e      	ldr	r2, [pc, #568]	; (8005484 <HAL_UART_IRQHandler+0x4f4>)
 800524a:	4293      	cmp	r3, r2
 800524c:	d041      	beq.n	80052d2 <HAL_UART_IRQHandler+0x342>
 800524e:	687b      	ldr	r3, [r7, #4]
 8005250:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8005252:	681b      	ldr	r3, [r3, #0]
 8005254:	4a8c      	ldr	r2, [pc, #560]	; (8005488 <HAL_UART_IRQHandler+0x4f8>)
 8005256:	4293      	cmp	r3, r2
 8005258:	d03b      	beq.n	80052d2 <HAL_UART_IRQHandler+0x342>
 800525a:	687b      	ldr	r3, [r7, #4]
 800525c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800525e:	681b      	ldr	r3, [r3, #0]
 8005260:	4a8a      	ldr	r2, [pc, #552]	; (800548c <HAL_UART_IRQHandler+0x4fc>)
 8005262:	4293      	cmp	r3, r2
 8005264:	d035      	beq.n	80052d2 <HAL_UART_IRQHandler+0x342>
 8005266:	687b      	ldr	r3, [r7, #4]
 8005268:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800526a:	681b      	ldr	r3, [r3, #0]
 800526c:	4a88      	ldr	r2, [pc, #544]	; (8005490 <HAL_UART_IRQHandler+0x500>)
 800526e:	4293      	cmp	r3, r2
 8005270:	d02f      	beq.n	80052d2 <HAL_UART_IRQHandler+0x342>
 8005272:	687b      	ldr	r3, [r7, #4]
 8005274:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8005276:	681b      	ldr	r3, [r3, #0]
 8005278:	4a86      	ldr	r2, [pc, #536]	; (8005494 <HAL_UART_IRQHandler+0x504>)
 800527a:	4293      	cmp	r3, r2
 800527c:	d029      	beq.n	80052d2 <HAL_UART_IRQHandler+0x342>
 800527e:	687b      	ldr	r3, [r7, #4]
 8005280:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8005282:	681b      	ldr	r3, [r3, #0]
 8005284:	4a84      	ldr	r2, [pc, #528]	; (8005498 <HAL_UART_IRQHandler+0x508>)
 8005286:	4293      	cmp	r3, r2
 8005288:	d023      	beq.n	80052d2 <HAL_UART_IRQHandler+0x342>
 800528a:	687b      	ldr	r3, [r7, #4]
 800528c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800528e:	681b      	ldr	r3, [r3, #0]
 8005290:	4a82      	ldr	r2, [pc, #520]	; (800549c <HAL_UART_IRQHandler+0x50c>)
 8005292:	4293      	cmp	r3, r2
 8005294:	d01d      	beq.n	80052d2 <HAL_UART_IRQHandler+0x342>
 8005296:	687b      	ldr	r3, [r7, #4]
 8005298:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800529a:	681b      	ldr	r3, [r3, #0]
 800529c:	4a80      	ldr	r2, [pc, #512]	; (80054a0 <HAL_UART_IRQHandler+0x510>)
 800529e:	4293      	cmp	r3, r2
 80052a0:	d017      	beq.n	80052d2 <HAL_UART_IRQHandler+0x342>
 80052a2:	687b      	ldr	r3, [r7, #4]
 80052a4:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80052a6:	681b      	ldr	r3, [r3, #0]
 80052a8:	4a7e      	ldr	r2, [pc, #504]	; (80054a4 <HAL_UART_IRQHandler+0x514>)
 80052aa:	4293      	cmp	r3, r2
 80052ac:	d011      	beq.n	80052d2 <HAL_UART_IRQHandler+0x342>
 80052ae:	687b      	ldr	r3, [r7, #4]
 80052b0:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80052b2:	681b      	ldr	r3, [r3, #0]
 80052b4:	4a7c      	ldr	r2, [pc, #496]	; (80054a8 <HAL_UART_IRQHandler+0x518>)
 80052b6:	4293      	cmp	r3, r2
 80052b8:	d00b      	beq.n	80052d2 <HAL_UART_IRQHandler+0x342>
 80052ba:	687b      	ldr	r3, [r7, #4]
 80052bc:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80052be:	681b      	ldr	r3, [r3, #0]
 80052c0:	4a7a      	ldr	r2, [pc, #488]	; (80054ac <HAL_UART_IRQHandler+0x51c>)
 80052c2:	4293      	cmp	r3, r2
 80052c4:	d005      	beq.n	80052d2 <HAL_UART_IRQHandler+0x342>
 80052c6:	687b      	ldr	r3, [r7, #4]
 80052c8:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80052ca:	681b      	ldr	r3, [r3, #0]
 80052cc:	4a78      	ldr	r2, [pc, #480]	; (80054b0 <HAL_UART_IRQHandler+0x520>)
 80052ce:	4293      	cmp	r3, r2
 80052d0:	d105      	bne.n	80052de <HAL_UART_IRQHandler+0x34e>
 80052d2:	687b      	ldr	r3, [r7, #4]
 80052d4:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80052d6:	681b      	ldr	r3, [r3, #0]
 80052d8:	685b      	ldr	r3, [r3, #4]
 80052da:	b29b      	uxth	r3, r3
 80052dc:	e004      	b.n	80052e8 <HAL_UART_IRQHandler+0x358>
 80052de:	687b      	ldr	r3, [r7, #4]
 80052e0:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80052e2:	681b      	ldr	r3, [r3, #0]
 80052e4:	685b      	ldr	r3, [r3, #4]
 80052e6:	b29b      	uxth	r3, r3
 80052e8:	813b      	strh	r3, [r7, #8]
      if ((nb_remaining_rx_data > 0U)
 80052ea:	893b      	ldrh	r3, [r7, #8]
 80052ec:	2b00      	cmp	r3, #0
 80052ee:	f000 8101 	beq.w	80054f4 <HAL_UART_IRQHandler+0x564>
          && (nb_remaining_rx_data < huart->RxXferSize))
 80052f2:	687b      	ldr	r3, [r7, #4]
 80052f4:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 80052f8:	893a      	ldrh	r2, [r7, #8]
 80052fa:	429a      	cmp	r2, r3
 80052fc:	f080 80fa 	bcs.w	80054f4 <HAL_UART_IRQHandler+0x564>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8005300:	687b      	ldr	r3, [r7, #4]
 8005302:	893a      	ldrh	r2, [r7, #8]
 8005304:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8005308:	687b      	ldr	r3, [r7, #4]
 800530a:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800530c:	69db      	ldr	r3, [r3, #28]
 800530e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005312:	d02b      	beq.n	800536c <HAL_UART_IRQHandler+0x3dc>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8005314:	687b      	ldr	r3, [r7, #4]
 8005316:	681b      	ldr	r3, [r3, #0]
 8005318:	681a      	ldr	r2, [r3, #0]
 800531a:	687b      	ldr	r3, [r7, #4]
 800531c:	681b      	ldr	r3, [r3, #0]
 800531e:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8005322:	601a      	str	r2, [r3, #0]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005324:	687b      	ldr	r3, [r7, #4]
 8005326:	681b      	ldr	r3, [r3, #0]
 8005328:	689a      	ldr	r2, [r3, #8]
 800532a:	687b      	ldr	r3, [r7, #4]
 800532c:	681b      	ldr	r3, [r3, #0]
 800532e:	f022 0201 	bic.w	r2, r2, #1
 8005332:	609a      	str	r2, [r3, #8]

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8005334:	687b      	ldr	r3, [r7, #4]
 8005336:	681b      	ldr	r3, [r3, #0]
 8005338:	689a      	ldr	r2, [r3, #8]
 800533a:	687b      	ldr	r3, [r7, #4]
 800533c:	681b      	ldr	r3, [r3, #0]
 800533e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8005342:	609a      	str	r2, [r3, #8]

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8005344:	687b      	ldr	r3, [r7, #4]
 8005346:	2220      	movs	r2, #32
 8005348:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800534c:	687b      	ldr	r3, [r7, #4]
 800534e:	2200      	movs	r2, #0
 8005350:	66da      	str	r2, [r3, #108]	; 0x6c

          CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005352:	687b      	ldr	r3, [r7, #4]
 8005354:	681b      	ldr	r3, [r3, #0]
 8005356:	681a      	ldr	r2, [r3, #0]
 8005358:	687b      	ldr	r3, [r7, #4]
 800535a:	681b      	ldr	r3, [r3, #0]
 800535c:	f022 0210 	bic.w	r2, r2, #16
 8005360:	601a      	str	r2, [r3, #0]

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8005362:	687b      	ldr	r3, [r7, #4]
 8005364:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8005366:	4618      	mov	r0, r3
 8005368:	f7fc f9da 	bl	8001720 <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 800536c:	687b      	ldr	r3, [r7, #4]
 800536e:	f8b3 205c 	ldrh.w	r2, [r3, #92]	; 0x5c
 8005372:	687b      	ldr	r3, [r7, #4]
 8005374:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8005378:	b29b      	uxth	r3, r3
 800537a:	1ad3      	subs	r3, r2, r3
 800537c:	b29b      	uxth	r3, r3
 800537e:	4619      	mov	r1, r3
 8005380:	6878      	ldr	r0, [r7, #4]
 8005382:	f000 f8d3 	bl	800552c <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8005386:	e0b5      	b.n	80054f4 <HAL_UART_IRQHandler+0x564>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8005388:	687b      	ldr	r3, [r7, #4]
 800538a:	f8b3 205c 	ldrh.w	r2, [r3, #92]	; 0x5c
 800538e:	687b      	ldr	r3, [r7, #4]
 8005390:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8005394:	b29b      	uxth	r3, r3
 8005396:	1ad3      	subs	r3, r2, r3
 8005398:	817b      	strh	r3, [r7, #10]
      if ((huart->RxXferCount > 0U)
 800539a:	687b      	ldr	r3, [r7, #4]
 800539c:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 80053a0:	b29b      	uxth	r3, r3
 80053a2:	2b00      	cmp	r3, #0
 80053a4:	f000 80a8 	beq.w	80054f8 <HAL_UART_IRQHandler+0x568>
          && (nb_rx_data > 0U))
 80053a8:	897b      	ldrh	r3, [r7, #10]
 80053aa:	2b00      	cmp	r3, #0
 80053ac:	f000 80a4 	beq.w	80054f8 <HAL_UART_IRQHandler+0x568>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 80053b0:	687b      	ldr	r3, [r7, #4]
 80053b2:	681b      	ldr	r3, [r3, #0]
 80053b4:	681a      	ldr	r2, [r3, #0]
 80053b6:	687b      	ldr	r3, [r7, #4]
 80053b8:	681b      	ldr	r3, [r3, #0]
 80053ba:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 80053be:	601a      	str	r2, [r3, #0]

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 80053c0:	687b      	ldr	r3, [r7, #4]
 80053c2:	681b      	ldr	r3, [r3, #0]
 80053c4:	6899      	ldr	r1, [r3, #8]
 80053c6:	687b      	ldr	r3, [r7, #4]
 80053c8:	681a      	ldr	r2, [r3, #0]
 80053ca:	4b3a      	ldr	r3, [pc, #232]	; (80054b4 <HAL_UART_IRQHandler+0x524>)
 80053cc:	400b      	ands	r3, r1
 80053ce:	6093      	str	r3, [r2, #8]

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 80053d0:	687b      	ldr	r3, [r7, #4]
 80053d2:	2220      	movs	r2, #32
 80053d4:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80053d8:	687b      	ldr	r3, [r7, #4]
 80053da:	2200      	movs	r2, #0
 80053dc:	66da      	str	r2, [r3, #108]	; 0x6c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 80053de:	687b      	ldr	r3, [r7, #4]
 80053e0:	2200      	movs	r2, #0
 80053e2:	671a      	str	r2, [r3, #112]	; 0x70

        CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80053e4:	687b      	ldr	r3, [r7, #4]
 80053e6:	681b      	ldr	r3, [r3, #0]
 80053e8:	681a      	ldr	r2, [r3, #0]
 80053ea:	687b      	ldr	r3, [r7, #4]
 80053ec:	681b      	ldr	r3, [r3, #0]
 80053ee:	f022 0210 	bic.w	r2, r2, #16
 80053f2:	601a      	str	r2, [r3, #0]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 80053f4:	897b      	ldrh	r3, [r7, #10]
 80053f6:	4619      	mov	r1, r3
 80053f8:	6878      	ldr	r0, [r7, #4]
 80053fa:	f000 f897 	bl	800552c <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 80053fe:	e07b      	b.n	80054f8 <HAL_UART_IRQHandler+0x568>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 8005400:	69fb      	ldr	r3, [r7, #28]
 8005402:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8005406:	2b00      	cmp	r3, #0
 8005408:	d00d      	beq.n	8005426 <HAL_UART_IRQHandler+0x496>
 800540a:	697b      	ldr	r3, [r7, #20]
 800540c:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8005410:	2b00      	cmp	r3, #0
 8005412:	d008      	beq.n	8005426 <HAL_UART_IRQHandler+0x496>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 8005414:	687b      	ldr	r3, [r7, #4]
 8005416:	681b      	ldr	r3, [r3, #0]
 8005418:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 800541c:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 800541e:	6878      	ldr	r0, [r7, #4]
 8005420:	f001 f8be 	bl	80065a0 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8005424:	e06b      	b.n	80054fe <HAL_UART_IRQHandler+0x56e>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
 8005426:	69fb      	ldr	r3, [r7, #28]
 8005428:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800542c:	2b00      	cmp	r3, #0
 800542e:	d012      	beq.n	8005456 <HAL_UART_IRQHandler+0x4c6>
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
 8005430:	69bb      	ldr	r3, [r7, #24]
 8005432:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005436:	2b00      	cmp	r3, #0
 8005438:	d104      	bne.n	8005444 <HAL_UART_IRQHandler+0x4b4>
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
 800543a:	697b      	ldr	r3, [r7, #20]
 800543c:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8005440:	2b00      	cmp	r3, #0
 8005442:	d008      	beq.n	8005456 <HAL_UART_IRQHandler+0x4c6>
  {
    if (huart->TxISR != NULL)
 8005444:	687b      	ldr	r3, [r7, #4]
 8005446:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005448:	2b00      	cmp	r3, #0
 800544a:	d057      	beq.n	80054fc <HAL_UART_IRQHandler+0x56c>
    {
      huart->TxISR(huart);
 800544c:	687b      	ldr	r3, [r7, #4]
 800544e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005450:	6878      	ldr	r0, [r7, #4]
 8005452:	4798      	blx	r3
    }
    return;
 8005454:	e052      	b.n	80054fc <HAL_UART_IRQHandler+0x56c>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 8005456:	69fb      	ldr	r3, [r7, #28]
 8005458:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800545c:	2b00      	cmp	r3, #0
 800545e:	d02b      	beq.n	80054b8 <HAL_UART_IRQHandler+0x528>
 8005460:	69bb      	ldr	r3, [r7, #24]
 8005462:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005466:	2b00      	cmp	r3, #0
 8005468:	d026      	beq.n	80054b8 <HAL_UART_IRQHandler+0x528>
  {
    UART_EndTransmit_IT(huart);
 800546a:	6878      	ldr	r0, [r7, #4]
 800546c:	f001 f87e 	bl	800656c <UART_EndTransmit_IT>
    return;
 8005470:	e045      	b.n	80054fe <HAL_UART_IRQHandler+0x56e>
 8005472:	bf00      	nop
 8005474:	40020010 	.word	0x40020010
 8005478:	40020028 	.word	0x40020028
 800547c:	40020040 	.word	0x40020040
 8005480:	40020058 	.word	0x40020058
 8005484:	40020070 	.word	0x40020070
 8005488:	40020088 	.word	0x40020088
 800548c:	400200a0 	.word	0x400200a0
 8005490:	400200b8 	.word	0x400200b8
 8005494:	40020410 	.word	0x40020410
 8005498:	40020428 	.word	0x40020428
 800549c:	40020440 	.word	0x40020440
 80054a0:	40020458 	.word	0x40020458
 80054a4:	40020470 	.word	0x40020470
 80054a8:	40020488 	.word	0x40020488
 80054ac:	400204a0 	.word	0x400204a0
 80054b0:	400204b8 	.word	0x400204b8
 80054b4:	effffffe 	.word	0xeffffffe
  }

  /* UART TX Fifo Empty occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_TXFE) != 0U) && ((cr1its & USART_CR1_TXFEIE) != 0U))
 80054b8:	69fb      	ldr	r3, [r7, #28]
 80054ba:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80054be:	2b00      	cmp	r3, #0
 80054c0:	d008      	beq.n	80054d4 <HAL_UART_IRQHandler+0x544>
 80054c2:	69bb      	ldr	r3, [r7, #24]
 80054c4:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 80054c8:	2b00      	cmp	r3, #0
 80054ca:	d003      	beq.n	80054d4 <HAL_UART_IRQHandler+0x544>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Tx Fifo Empty Callback */
    huart->TxFifoEmptyCallback(huart);
#else
    /* Call legacy weak Tx Fifo Empty Callback */
    HAL_UARTEx_TxFifoEmptyCallback(huart);
 80054cc:	6878      	ldr	r0, [r7, #4]
 80054ce:	f001 f87b 	bl	80065c8 <HAL_UARTEx_TxFifoEmptyCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 80054d2:	e014      	b.n	80054fe <HAL_UART_IRQHandler+0x56e>
  }

  /* UART RX Fifo Full occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_RXFF) != 0U) && ((cr1its & USART_CR1_RXFFIE) != 0U))
 80054d4:	69fb      	ldr	r3, [r7, #28]
 80054d6:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80054da:	2b00      	cmp	r3, #0
 80054dc:	d00f      	beq.n	80054fe <HAL_UART_IRQHandler+0x56e>
 80054de:	69bb      	ldr	r3, [r7, #24]
 80054e0:	2b00      	cmp	r3, #0
 80054e2:	da0c      	bge.n	80054fe <HAL_UART_IRQHandler+0x56e>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Rx Fifo Full Callback */
    huart->RxFifoFullCallback(huart);
#else
    /* Call legacy weak Rx Fifo Full Callback */
    HAL_UARTEx_RxFifoFullCallback(huart);
 80054e4:	6878      	ldr	r0, [r7, #4]
 80054e6:	f001 f865 	bl	80065b4 <HAL_UARTEx_RxFifoFullCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 80054ea:	e008      	b.n	80054fe <HAL_UART_IRQHandler+0x56e>
      return;
 80054ec:	bf00      	nop
 80054ee:	e006      	b.n	80054fe <HAL_UART_IRQHandler+0x56e>
    return;
 80054f0:	bf00      	nop
 80054f2:	e004      	b.n	80054fe <HAL_UART_IRQHandler+0x56e>
      return;
 80054f4:	bf00      	nop
 80054f6:	e002      	b.n	80054fe <HAL_UART_IRQHandler+0x56e>
      return;
 80054f8:	bf00      	nop
 80054fa:	e000      	b.n	80054fe <HAL_UART_IRQHandler+0x56e>
    return;
 80054fc:	bf00      	nop
  }
}
 80054fe:	3720      	adds	r7, #32
 8005500:	46bd      	mov	sp, r7
 8005502:	bd80      	pop	{r7, pc}

08005504 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8005504:	b480      	push	{r7}
 8005506:	b083      	sub	sp, #12
 8005508:	af00      	add	r7, sp, #0
 800550a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 800550c:	bf00      	nop
 800550e:	370c      	adds	r7, #12
 8005510:	46bd      	mov	sp, r7
 8005512:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005516:	4770      	bx	lr

08005518 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8005518:	b480      	push	{r7}
 800551a:	b083      	sub	sp, #12
 800551c:	af00      	add	r7, sp, #0
 800551e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 8005520:	bf00      	nop
 8005522:	370c      	adds	r7, #12
 8005524:	46bd      	mov	sp, r7
 8005526:	f85d 7b04 	ldr.w	r7, [sp], #4
 800552a:	4770      	bx	lr

0800552c <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 800552c:	b480      	push	{r7}
 800552e:	b083      	sub	sp, #12
 8005530:	af00      	add	r7, sp, #0
 8005532:	6078      	str	r0, [r7, #4]
 8005534:	460b      	mov	r3, r1
 8005536:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8005538:	bf00      	nop
 800553a:	370c      	adds	r7, #12
 800553c:	46bd      	mov	sp, r7
 800553e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005542:	4770      	bx	lr

08005544 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8005544:	b5b0      	push	{r4, r5, r7, lr}
 8005546:	b08e      	sub	sp, #56	; 0x38
 8005548:	af00      	add	r7, sp, #0
 800554a:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 800554c:	2300      	movs	r3, #0
 800554e:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8005552:	687b      	ldr	r3, [r7, #4]
 8005554:	689a      	ldr	r2, [r3, #8]
 8005556:	687b      	ldr	r3, [r7, #4]
 8005558:	691b      	ldr	r3, [r3, #16]
 800555a:	431a      	orrs	r2, r3
 800555c:	687b      	ldr	r3, [r7, #4]
 800555e:	695b      	ldr	r3, [r3, #20]
 8005560:	431a      	orrs	r2, r3
 8005562:	687b      	ldr	r3, [r7, #4]
 8005564:	69db      	ldr	r3, [r3, #28]
 8005566:	4313      	orrs	r3, r2
 8005568:	637b      	str	r3, [r7, #52]	; 0x34
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800556a:	687b      	ldr	r3, [r7, #4]
 800556c:	681b      	ldr	r3, [r3, #0]
 800556e:	681a      	ldr	r2, [r3, #0]
 8005570:	4bbf      	ldr	r3, [pc, #764]	; (8005870 <UART_SetConfig+0x32c>)
 8005572:	4013      	ands	r3, r2
 8005574:	687a      	ldr	r2, [r7, #4]
 8005576:	6812      	ldr	r2, [r2, #0]
 8005578:	6b79      	ldr	r1, [r7, #52]	; 0x34
 800557a:	430b      	orrs	r3, r1
 800557c:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800557e:	687b      	ldr	r3, [r7, #4]
 8005580:	681b      	ldr	r3, [r3, #0]
 8005582:	685b      	ldr	r3, [r3, #4]
 8005584:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8005588:	687b      	ldr	r3, [r7, #4]
 800558a:	68da      	ldr	r2, [r3, #12]
 800558c:	687b      	ldr	r3, [r7, #4]
 800558e:	681b      	ldr	r3, [r3, #0]
 8005590:	430a      	orrs	r2, r1
 8005592:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8005594:	687b      	ldr	r3, [r7, #4]
 8005596:	699b      	ldr	r3, [r3, #24]
 8005598:	637b      	str	r3, [r7, #52]	; 0x34

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 800559a:	687b      	ldr	r3, [r7, #4]
 800559c:	681b      	ldr	r3, [r3, #0]
 800559e:	4ab5      	ldr	r2, [pc, #724]	; (8005874 <UART_SetConfig+0x330>)
 80055a0:	4293      	cmp	r3, r2
 80055a2:	d004      	beq.n	80055ae <UART_SetConfig+0x6a>
  {
    tmpreg |= huart->Init.OneBitSampling;
 80055a4:	687b      	ldr	r3, [r7, #4]
 80055a6:	6a1b      	ldr	r3, [r3, #32]
 80055a8:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80055aa:	4313      	orrs	r3, r2
 80055ac:	637b      	str	r3, [r7, #52]	; 0x34
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 80055ae:	687b      	ldr	r3, [r7, #4]
 80055b0:	681b      	ldr	r3, [r3, #0]
 80055b2:	689a      	ldr	r2, [r3, #8]
 80055b4:	4bb0      	ldr	r3, [pc, #704]	; (8005878 <UART_SetConfig+0x334>)
 80055b6:	4013      	ands	r3, r2
 80055b8:	687a      	ldr	r2, [r7, #4]
 80055ba:	6812      	ldr	r2, [r2, #0]
 80055bc:	6b79      	ldr	r1, [r7, #52]	; 0x34
 80055be:	430b      	orrs	r3, r1
 80055c0:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 80055c2:	687b      	ldr	r3, [r7, #4]
 80055c4:	681b      	ldr	r3, [r3, #0]
 80055c6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80055c8:	f023 010f 	bic.w	r1, r3, #15
 80055cc:	687b      	ldr	r3, [r7, #4]
 80055ce:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80055d0:	687b      	ldr	r3, [r7, #4]
 80055d2:	681b      	ldr	r3, [r3, #0]
 80055d4:	430a      	orrs	r2, r1
 80055d6:	62da      	str	r2, [r3, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 80055d8:	687b      	ldr	r3, [r7, #4]
 80055da:	681b      	ldr	r3, [r3, #0]
 80055dc:	4aa7      	ldr	r2, [pc, #668]	; (800587c <UART_SetConfig+0x338>)
 80055de:	4293      	cmp	r3, r2
 80055e0:	d176      	bne.n	80056d0 <UART_SetConfig+0x18c>
 80055e2:	4ba7      	ldr	r3, [pc, #668]	; (8005880 <UART_SetConfig+0x33c>)
 80055e4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80055e6:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80055ea:	2b28      	cmp	r3, #40	; 0x28
 80055ec:	d86c      	bhi.n	80056c8 <UART_SetConfig+0x184>
 80055ee:	a201      	add	r2, pc, #4	; (adr r2, 80055f4 <UART_SetConfig+0xb0>)
 80055f0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80055f4:	08005699 	.word	0x08005699
 80055f8:	080056c9 	.word	0x080056c9
 80055fc:	080056c9 	.word	0x080056c9
 8005600:	080056c9 	.word	0x080056c9
 8005604:	080056c9 	.word	0x080056c9
 8005608:	080056c9 	.word	0x080056c9
 800560c:	080056c9 	.word	0x080056c9
 8005610:	080056c9 	.word	0x080056c9
 8005614:	080056a1 	.word	0x080056a1
 8005618:	080056c9 	.word	0x080056c9
 800561c:	080056c9 	.word	0x080056c9
 8005620:	080056c9 	.word	0x080056c9
 8005624:	080056c9 	.word	0x080056c9
 8005628:	080056c9 	.word	0x080056c9
 800562c:	080056c9 	.word	0x080056c9
 8005630:	080056c9 	.word	0x080056c9
 8005634:	080056a9 	.word	0x080056a9
 8005638:	080056c9 	.word	0x080056c9
 800563c:	080056c9 	.word	0x080056c9
 8005640:	080056c9 	.word	0x080056c9
 8005644:	080056c9 	.word	0x080056c9
 8005648:	080056c9 	.word	0x080056c9
 800564c:	080056c9 	.word	0x080056c9
 8005650:	080056c9 	.word	0x080056c9
 8005654:	080056b1 	.word	0x080056b1
 8005658:	080056c9 	.word	0x080056c9
 800565c:	080056c9 	.word	0x080056c9
 8005660:	080056c9 	.word	0x080056c9
 8005664:	080056c9 	.word	0x080056c9
 8005668:	080056c9 	.word	0x080056c9
 800566c:	080056c9 	.word	0x080056c9
 8005670:	080056c9 	.word	0x080056c9
 8005674:	080056b9 	.word	0x080056b9
 8005678:	080056c9 	.word	0x080056c9
 800567c:	080056c9 	.word	0x080056c9
 8005680:	080056c9 	.word	0x080056c9
 8005684:	080056c9 	.word	0x080056c9
 8005688:	080056c9 	.word	0x080056c9
 800568c:	080056c9 	.word	0x080056c9
 8005690:	080056c9 	.word	0x080056c9
 8005694:	080056c1 	.word	0x080056c1
 8005698:	2301      	movs	r3, #1
 800569a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800569e:	e326      	b.n	8005cee <UART_SetConfig+0x7aa>
 80056a0:	2304      	movs	r3, #4
 80056a2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80056a6:	e322      	b.n	8005cee <UART_SetConfig+0x7aa>
 80056a8:	2308      	movs	r3, #8
 80056aa:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80056ae:	e31e      	b.n	8005cee <UART_SetConfig+0x7aa>
 80056b0:	2310      	movs	r3, #16
 80056b2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80056b6:	e31a      	b.n	8005cee <UART_SetConfig+0x7aa>
 80056b8:	2320      	movs	r3, #32
 80056ba:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80056be:	e316      	b.n	8005cee <UART_SetConfig+0x7aa>
 80056c0:	2340      	movs	r3, #64	; 0x40
 80056c2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80056c6:	e312      	b.n	8005cee <UART_SetConfig+0x7aa>
 80056c8:	2380      	movs	r3, #128	; 0x80
 80056ca:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80056ce:	e30e      	b.n	8005cee <UART_SetConfig+0x7aa>
 80056d0:	687b      	ldr	r3, [r7, #4]
 80056d2:	681b      	ldr	r3, [r3, #0]
 80056d4:	4a6b      	ldr	r2, [pc, #428]	; (8005884 <UART_SetConfig+0x340>)
 80056d6:	4293      	cmp	r3, r2
 80056d8:	d130      	bne.n	800573c <UART_SetConfig+0x1f8>
 80056da:	4b69      	ldr	r3, [pc, #420]	; (8005880 <UART_SetConfig+0x33c>)
 80056dc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80056de:	f003 0307 	and.w	r3, r3, #7
 80056e2:	2b05      	cmp	r3, #5
 80056e4:	d826      	bhi.n	8005734 <UART_SetConfig+0x1f0>
 80056e6:	a201      	add	r2, pc, #4	; (adr r2, 80056ec <UART_SetConfig+0x1a8>)
 80056e8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80056ec:	08005705 	.word	0x08005705
 80056f0:	0800570d 	.word	0x0800570d
 80056f4:	08005715 	.word	0x08005715
 80056f8:	0800571d 	.word	0x0800571d
 80056fc:	08005725 	.word	0x08005725
 8005700:	0800572d 	.word	0x0800572d
 8005704:	2300      	movs	r3, #0
 8005706:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800570a:	e2f0      	b.n	8005cee <UART_SetConfig+0x7aa>
 800570c:	2304      	movs	r3, #4
 800570e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8005712:	e2ec      	b.n	8005cee <UART_SetConfig+0x7aa>
 8005714:	2308      	movs	r3, #8
 8005716:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800571a:	e2e8      	b.n	8005cee <UART_SetConfig+0x7aa>
 800571c:	2310      	movs	r3, #16
 800571e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8005722:	e2e4      	b.n	8005cee <UART_SetConfig+0x7aa>
 8005724:	2320      	movs	r3, #32
 8005726:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800572a:	e2e0      	b.n	8005cee <UART_SetConfig+0x7aa>
 800572c:	2340      	movs	r3, #64	; 0x40
 800572e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8005732:	e2dc      	b.n	8005cee <UART_SetConfig+0x7aa>
 8005734:	2380      	movs	r3, #128	; 0x80
 8005736:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800573a:	e2d8      	b.n	8005cee <UART_SetConfig+0x7aa>
 800573c:	687b      	ldr	r3, [r7, #4]
 800573e:	681b      	ldr	r3, [r3, #0]
 8005740:	4a51      	ldr	r2, [pc, #324]	; (8005888 <UART_SetConfig+0x344>)
 8005742:	4293      	cmp	r3, r2
 8005744:	d130      	bne.n	80057a8 <UART_SetConfig+0x264>
 8005746:	4b4e      	ldr	r3, [pc, #312]	; (8005880 <UART_SetConfig+0x33c>)
 8005748:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800574a:	f003 0307 	and.w	r3, r3, #7
 800574e:	2b05      	cmp	r3, #5
 8005750:	d826      	bhi.n	80057a0 <UART_SetConfig+0x25c>
 8005752:	a201      	add	r2, pc, #4	; (adr r2, 8005758 <UART_SetConfig+0x214>)
 8005754:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005758:	08005771 	.word	0x08005771
 800575c:	08005779 	.word	0x08005779
 8005760:	08005781 	.word	0x08005781
 8005764:	08005789 	.word	0x08005789
 8005768:	08005791 	.word	0x08005791
 800576c:	08005799 	.word	0x08005799
 8005770:	2300      	movs	r3, #0
 8005772:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8005776:	e2ba      	b.n	8005cee <UART_SetConfig+0x7aa>
 8005778:	2304      	movs	r3, #4
 800577a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800577e:	e2b6      	b.n	8005cee <UART_SetConfig+0x7aa>
 8005780:	2308      	movs	r3, #8
 8005782:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8005786:	e2b2      	b.n	8005cee <UART_SetConfig+0x7aa>
 8005788:	2310      	movs	r3, #16
 800578a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800578e:	e2ae      	b.n	8005cee <UART_SetConfig+0x7aa>
 8005790:	2320      	movs	r3, #32
 8005792:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8005796:	e2aa      	b.n	8005cee <UART_SetConfig+0x7aa>
 8005798:	2340      	movs	r3, #64	; 0x40
 800579a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800579e:	e2a6      	b.n	8005cee <UART_SetConfig+0x7aa>
 80057a0:	2380      	movs	r3, #128	; 0x80
 80057a2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80057a6:	e2a2      	b.n	8005cee <UART_SetConfig+0x7aa>
 80057a8:	687b      	ldr	r3, [r7, #4]
 80057aa:	681b      	ldr	r3, [r3, #0]
 80057ac:	4a37      	ldr	r2, [pc, #220]	; (800588c <UART_SetConfig+0x348>)
 80057ae:	4293      	cmp	r3, r2
 80057b0:	d130      	bne.n	8005814 <UART_SetConfig+0x2d0>
 80057b2:	4b33      	ldr	r3, [pc, #204]	; (8005880 <UART_SetConfig+0x33c>)
 80057b4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80057b6:	f003 0307 	and.w	r3, r3, #7
 80057ba:	2b05      	cmp	r3, #5
 80057bc:	d826      	bhi.n	800580c <UART_SetConfig+0x2c8>
 80057be:	a201      	add	r2, pc, #4	; (adr r2, 80057c4 <UART_SetConfig+0x280>)
 80057c0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80057c4:	080057dd 	.word	0x080057dd
 80057c8:	080057e5 	.word	0x080057e5
 80057cc:	080057ed 	.word	0x080057ed
 80057d0:	080057f5 	.word	0x080057f5
 80057d4:	080057fd 	.word	0x080057fd
 80057d8:	08005805 	.word	0x08005805
 80057dc:	2300      	movs	r3, #0
 80057de:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80057e2:	e284      	b.n	8005cee <UART_SetConfig+0x7aa>
 80057e4:	2304      	movs	r3, #4
 80057e6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80057ea:	e280      	b.n	8005cee <UART_SetConfig+0x7aa>
 80057ec:	2308      	movs	r3, #8
 80057ee:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80057f2:	e27c      	b.n	8005cee <UART_SetConfig+0x7aa>
 80057f4:	2310      	movs	r3, #16
 80057f6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80057fa:	e278      	b.n	8005cee <UART_SetConfig+0x7aa>
 80057fc:	2320      	movs	r3, #32
 80057fe:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8005802:	e274      	b.n	8005cee <UART_SetConfig+0x7aa>
 8005804:	2340      	movs	r3, #64	; 0x40
 8005806:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800580a:	e270      	b.n	8005cee <UART_SetConfig+0x7aa>
 800580c:	2380      	movs	r3, #128	; 0x80
 800580e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8005812:	e26c      	b.n	8005cee <UART_SetConfig+0x7aa>
 8005814:	687b      	ldr	r3, [r7, #4]
 8005816:	681b      	ldr	r3, [r3, #0]
 8005818:	4a1d      	ldr	r2, [pc, #116]	; (8005890 <UART_SetConfig+0x34c>)
 800581a:	4293      	cmp	r3, r2
 800581c:	d142      	bne.n	80058a4 <UART_SetConfig+0x360>
 800581e:	4b18      	ldr	r3, [pc, #96]	; (8005880 <UART_SetConfig+0x33c>)
 8005820:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005822:	f003 0307 	and.w	r3, r3, #7
 8005826:	2b05      	cmp	r3, #5
 8005828:	d838      	bhi.n	800589c <UART_SetConfig+0x358>
 800582a:	a201      	add	r2, pc, #4	; (adr r2, 8005830 <UART_SetConfig+0x2ec>)
 800582c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005830:	08005849 	.word	0x08005849
 8005834:	08005851 	.word	0x08005851
 8005838:	08005859 	.word	0x08005859
 800583c:	08005861 	.word	0x08005861
 8005840:	08005869 	.word	0x08005869
 8005844:	08005895 	.word	0x08005895
 8005848:	2300      	movs	r3, #0
 800584a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800584e:	e24e      	b.n	8005cee <UART_SetConfig+0x7aa>
 8005850:	2304      	movs	r3, #4
 8005852:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8005856:	e24a      	b.n	8005cee <UART_SetConfig+0x7aa>
 8005858:	2308      	movs	r3, #8
 800585a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800585e:	e246      	b.n	8005cee <UART_SetConfig+0x7aa>
 8005860:	2310      	movs	r3, #16
 8005862:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8005866:	e242      	b.n	8005cee <UART_SetConfig+0x7aa>
 8005868:	2320      	movs	r3, #32
 800586a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800586e:	e23e      	b.n	8005cee <UART_SetConfig+0x7aa>
 8005870:	cfff69f3 	.word	0xcfff69f3
 8005874:	58000c00 	.word	0x58000c00
 8005878:	11fff4ff 	.word	0x11fff4ff
 800587c:	40011000 	.word	0x40011000
 8005880:	58024400 	.word	0x58024400
 8005884:	40004400 	.word	0x40004400
 8005888:	40004800 	.word	0x40004800
 800588c:	40004c00 	.word	0x40004c00
 8005890:	40005000 	.word	0x40005000
 8005894:	2340      	movs	r3, #64	; 0x40
 8005896:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800589a:	e228      	b.n	8005cee <UART_SetConfig+0x7aa>
 800589c:	2380      	movs	r3, #128	; 0x80
 800589e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80058a2:	e224      	b.n	8005cee <UART_SetConfig+0x7aa>
 80058a4:	687b      	ldr	r3, [r7, #4]
 80058a6:	681b      	ldr	r3, [r3, #0]
 80058a8:	4ab1      	ldr	r2, [pc, #708]	; (8005b70 <UART_SetConfig+0x62c>)
 80058aa:	4293      	cmp	r3, r2
 80058ac:	d176      	bne.n	800599c <UART_SetConfig+0x458>
 80058ae:	4bb1      	ldr	r3, [pc, #708]	; (8005b74 <UART_SetConfig+0x630>)
 80058b0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80058b2:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80058b6:	2b28      	cmp	r3, #40	; 0x28
 80058b8:	d86c      	bhi.n	8005994 <UART_SetConfig+0x450>
 80058ba:	a201      	add	r2, pc, #4	; (adr r2, 80058c0 <UART_SetConfig+0x37c>)
 80058bc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80058c0:	08005965 	.word	0x08005965
 80058c4:	08005995 	.word	0x08005995
 80058c8:	08005995 	.word	0x08005995
 80058cc:	08005995 	.word	0x08005995
 80058d0:	08005995 	.word	0x08005995
 80058d4:	08005995 	.word	0x08005995
 80058d8:	08005995 	.word	0x08005995
 80058dc:	08005995 	.word	0x08005995
 80058e0:	0800596d 	.word	0x0800596d
 80058e4:	08005995 	.word	0x08005995
 80058e8:	08005995 	.word	0x08005995
 80058ec:	08005995 	.word	0x08005995
 80058f0:	08005995 	.word	0x08005995
 80058f4:	08005995 	.word	0x08005995
 80058f8:	08005995 	.word	0x08005995
 80058fc:	08005995 	.word	0x08005995
 8005900:	08005975 	.word	0x08005975
 8005904:	08005995 	.word	0x08005995
 8005908:	08005995 	.word	0x08005995
 800590c:	08005995 	.word	0x08005995
 8005910:	08005995 	.word	0x08005995
 8005914:	08005995 	.word	0x08005995
 8005918:	08005995 	.word	0x08005995
 800591c:	08005995 	.word	0x08005995
 8005920:	0800597d 	.word	0x0800597d
 8005924:	08005995 	.word	0x08005995
 8005928:	08005995 	.word	0x08005995
 800592c:	08005995 	.word	0x08005995
 8005930:	08005995 	.word	0x08005995
 8005934:	08005995 	.word	0x08005995
 8005938:	08005995 	.word	0x08005995
 800593c:	08005995 	.word	0x08005995
 8005940:	08005985 	.word	0x08005985
 8005944:	08005995 	.word	0x08005995
 8005948:	08005995 	.word	0x08005995
 800594c:	08005995 	.word	0x08005995
 8005950:	08005995 	.word	0x08005995
 8005954:	08005995 	.word	0x08005995
 8005958:	08005995 	.word	0x08005995
 800595c:	08005995 	.word	0x08005995
 8005960:	0800598d 	.word	0x0800598d
 8005964:	2301      	movs	r3, #1
 8005966:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800596a:	e1c0      	b.n	8005cee <UART_SetConfig+0x7aa>
 800596c:	2304      	movs	r3, #4
 800596e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8005972:	e1bc      	b.n	8005cee <UART_SetConfig+0x7aa>
 8005974:	2308      	movs	r3, #8
 8005976:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800597a:	e1b8      	b.n	8005cee <UART_SetConfig+0x7aa>
 800597c:	2310      	movs	r3, #16
 800597e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8005982:	e1b4      	b.n	8005cee <UART_SetConfig+0x7aa>
 8005984:	2320      	movs	r3, #32
 8005986:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800598a:	e1b0      	b.n	8005cee <UART_SetConfig+0x7aa>
 800598c:	2340      	movs	r3, #64	; 0x40
 800598e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8005992:	e1ac      	b.n	8005cee <UART_SetConfig+0x7aa>
 8005994:	2380      	movs	r3, #128	; 0x80
 8005996:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800599a:	e1a8      	b.n	8005cee <UART_SetConfig+0x7aa>
 800599c:	687b      	ldr	r3, [r7, #4]
 800599e:	681b      	ldr	r3, [r3, #0]
 80059a0:	4a75      	ldr	r2, [pc, #468]	; (8005b78 <UART_SetConfig+0x634>)
 80059a2:	4293      	cmp	r3, r2
 80059a4:	d130      	bne.n	8005a08 <UART_SetConfig+0x4c4>
 80059a6:	4b73      	ldr	r3, [pc, #460]	; (8005b74 <UART_SetConfig+0x630>)
 80059a8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80059aa:	f003 0307 	and.w	r3, r3, #7
 80059ae:	2b05      	cmp	r3, #5
 80059b0:	d826      	bhi.n	8005a00 <UART_SetConfig+0x4bc>
 80059b2:	a201      	add	r2, pc, #4	; (adr r2, 80059b8 <UART_SetConfig+0x474>)
 80059b4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80059b8:	080059d1 	.word	0x080059d1
 80059bc:	080059d9 	.word	0x080059d9
 80059c0:	080059e1 	.word	0x080059e1
 80059c4:	080059e9 	.word	0x080059e9
 80059c8:	080059f1 	.word	0x080059f1
 80059cc:	080059f9 	.word	0x080059f9
 80059d0:	2300      	movs	r3, #0
 80059d2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80059d6:	e18a      	b.n	8005cee <UART_SetConfig+0x7aa>
 80059d8:	2304      	movs	r3, #4
 80059da:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80059de:	e186      	b.n	8005cee <UART_SetConfig+0x7aa>
 80059e0:	2308      	movs	r3, #8
 80059e2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80059e6:	e182      	b.n	8005cee <UART_SetConfig+0x7aa>
 80059e8:	2310      	movs	r3, #16
 80059ea:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80059ee:	e17e      	b.n	8005cee <UART_SetConfig+0x7aa>
 80059f0:	2320      	movs	r3, #32
 80059f2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80059f6:	e17a      	b.n	8005cee <UART_SetConfig+0x7aa>
 80059f8:	2340      	movs	r3, #64	; 0x40
 80059fa:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80059fe:	e176      	b.n	8005cee <UART_SetConfig+0x7aa>
 8005a00:	2380      	movs	r3, #128	; 0x80
 8005a02:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8005a06:	e172      	b.n	8005cee <UART_SetConfig+0x7aa>
 8005a08:	687b      	ldr	r3, [r7, #4]
 8005a0a:	681b      	ldr	r3, [r3, #0]
 8005a0c:	4a5b      	ldr	r2, [pc, #364]	; (8005b7c <UART_SetConfig+0x638>)
 8005a0e:	4293      	cmp	r3, r2
 8005a10:	d130      	bne.n	8005a74 <UART_SetConfig+0x530>
 8005a12:	4b58      	ldr	r3, [pc, #352]	; (8005b74 <UART_SetConfig+0x630>)
 8005a14:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005a16:	f003 0307 	and.w	r3, r3, #7
 8005a1a:	2b05      	cmp	r3, #5
 8005a1c:	d826      	bhi.n	8005a6c <UART_SetConfig+0x528>
 8005a1e:	a201      	add	r2, pc, #4	; (adr r2, 8005a24 <UART_SetConfig+0x4e0>)
 8005a20:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005a24:	08005a3d 	.word	0x08005a3d
 8005a28:	08005a45 	.word	0x08005a45
 8005a2c:	08005a4d 	.word	0x08005a4d
 8005a30:	08005a55 	.word	0x08005a55
 8005a34:	08005a5d 	.word	0x08005a5d
 8005a38:	08005a65 	.word	0x08005a65
 8005a3c:	2300      	movs	r3, #0
 8005a3e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8005a42:	e154      	b.n	8005cee <UART_SetConfig+0x7aa>
 8005a44:	2304      	movs	r3, #4
 8005a46:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8005a4a:	e150      	b.n	8005cee <UART_SetConfig+0x7aa>
 8005a4c:	2308      	movs	r3, #8
 8005a4e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8005a52:	e14c      	b.n	8005cee <UART_SetConfig+0x7aa>
 8005a54:	2310      	movs	r3, #16
 8005a56:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8005a5a:	e148      	b.n	8005cee <UART_SetConfig+0x7aa>
 8005a5c:	2320      	movs	r3, #32
 8005a5e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8005a62:	e144      	b.n	8005cee <UART_SetConfig+0x7aa>
 8005a64:	2340      	movs	r3, #64	; 0x40
 8005a66:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8005a6a:	e140      	b.n	8005cee <UART_SetConfig+0x7aa>
 8005a6c:	2380      	movs	r3, #128	; 0x80
 8005a6e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8005a72:	e13c      	b.n	8005cee <UART_SetConfig+0x7aa>
 8005a74:	687b      	ldr	r3, [r7, #4]
 8005a76:	681b      	ldr	r3, [r3, #0]
 8005a78:	4a41      	ldr	r2, [pc, #260]	; (8005b80 <UART_SetConfig+0x63c>)
 8005a7a:	4293      	cmp	r3, r2
 8005a7c:	f040 8082 	bne.w	8005b84 <UART_SetConfig+0x640>
 8005a80:	4b3c      	ldr	r3, [pc, #240]	; (8005b74 <UART_SetConfig+0x630>)
 8005a82:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005a84:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8005a88:	2b28      	cmp	r3, #40	; 0x28
 8005a8a:	d86d      	bhi.n	8005b68 <UART_SetConfig+0x624>
 8005a8c:	a201      	add	r2, pc, #4	; (adr r2, 8005a94 <UART_SetConfig+0x550>)
 8005a8e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005a92:	bf00      	nop
 8005a94:	08005b39 	.word	0x08005b39
 8005a98:	08005b69 	.word	0x08005b69
 8005a9c:	08005b69 	.word	0x08005b69
 8005aa0:	08005b69 	.word	0x08005b69
 8005aa4:	08005b69 	.word	0x08005b69
 8005aa8:	08005b69 	.word	0x08005b69
 8005aac:	08005b69 	.word	0x08005b69
 8005ab0:	08005b69 	.word	0x08005b69
 8005ab4:	08005b41 	.word	0x08005b41
 8005ab8:	08005b69 	.word	0x08005b69
 8005abc:	08005b69 	.word	0x08005b69
 8005ac0:	08005b69 	.word	0x08005b69
 8005ac4:	08005b69 	.word	0x08005b69
 8005ac8:	08005b69 	.word	0x08005b69
 8005acc:	08005b69 	.word	0x08005b69
 8005ad0:	08005b69 	.word	0x08005b69
 8005ad4:	08005b49 	.word	0x08005b49
 8005ad8:	08005b69 	.word	0x08005b69
 8005adc:	08005b69 	.word	0x08005b69
 8005ae0:	08005b69 	.word	0x08005b69
 8005ae4:	08005b69 	.word	0x08005b69
 8005ae8:	08005b69 	.word	0x08005b69
 8005aec:	08005b69 	.word	0x08005b69
 8005af0:	08005b69 	.word	0x08005b69
 8005af4:	08005b51 	.word	0x08005b51
 8005af8:	08005b69 	.word	0x08005b69
 8005afc:	08005b69 	.word	0x08005b69
 8005b00:	08005b69 	.word	0x08005b69
 8005b04:	08005b69 	.word	0x08005b69
 8005b08:	08005b69 	.word	0x08005b69
 8005b0c:	08005b69 	.word	0x08005b69
 8005b10:	08005b69 	.word	0x08005b69
 8005b14:	08005b59 	.word	0x08005b59
 8005b18:	08005b69 	.word	0x08005b69
 8005b1c:	08005b69 	.word	0x08005b69
 8005b20:	08005b69 	.word	0x08005b69
 8005b24:	08005b69 	.word	0x08005b69
 8005b28:	08005b69 	.word	0x08005b69
 8005b2c:	08005b69 	.word	0x08005b69
 8005b30:	08005b69 	.word	0x08005b69
 8005b34:	08005b61 	.word	0x08005b61
 8005b38:	2301      	movs	r3, #1
 8005b3a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8005b3e:	e0d6      	b.n	8005cee <UART_SetConfig+0x7aa>
 8005b40:	2304      	movs	r3, #4
 8005b42:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8005b46:	e0d2      	b.n	8005cee <UART_SetConfig+0x7aa>
 8005b48:	2308      	movs	r3, #8
 8005b4a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8005b4e:	e0ce      	b.n	8005cee <UART_SetConfig+0x7aa>
 8005b50:	2310      	movs	r3, #16
 8005b52:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8005b56:	e0ca      	b.n	8005cee <UART_SetConfig+0x7aa>
 8005b58:	2320      	movs	r3, #32
 8005b5a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8005b5e:	e0c6      	b.n	8005cee <UART_SetConfig+0x7aa>
 8005b60:	2340      	movs	r3, #64	; 0x40
 8005b62:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8005b66:	e0c2      	b.n	8005cee <UART_SetConfig+0x7aa>
 8005b68:	2380      	movs	r3, #128	; 0x80
 8005b6a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8005b6e:	e0be      	b.n	8005cee <UART_SetConfig+0x7aa>
 8005b70:	40011400 	.word	0x40011400
 8005b74:	58024400 	.word	0x58024400
 8005b78:	40007800 	.word	0x40007800
 8005b7c:	40007c00 	.word	0x40007c00
 8005b80:	40011800 	.word	0x40011800
 8005b84:	687b      	ldr	r3, [r7, #4]
 8005b86:	681b      	ldr	r3, [r3, #0]
 8005b88:	4aad      	ldr	r2, [pc, #692]	; (8005e40 <UART_SetConfig+0x8fc>)
 8005b8a:	4293      	cmp	r3, r2
 8005b8c:	d176      	bne.n	8005c7c <UART_SetConfig+0x738>
 8005b8e:	4bad      	ldr	r3, [pc, #692]	; (8005e44 <UART_SetConfig+0x900>)
 8005b90:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005b92:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8005b96:	2b28      	cmp	r3, #40	; 0x28
 8005b98:	d86c      	bhi.n	8005c74 <UART_SetConfig+0x730>
 8005b9a:	a201      	add	r2, pc, #4	; (adr r2, 8005ba0 <UART_SetConfig+0x65c>)
 8005b9c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005ba0:	08005c45 	.word	0x08005c45
 8005ba4:	08005c75 	.word	0x08005c75
 8005ba8:	08005c75 	.word	0x08005c75
 8005bac:	08005c75 	.word	0x08005c75
 8005bb0:	08005c75 	.word	0x08005c75
 8005bb4:	08005c75 	.word	0x08005c75
 8005bb8:	08005c75 	.word	0x08005c75
 8005bbc:	08005c75 	.word	0x08005c75
 8005bc0:	08005c4d 	.word	0x08005c4d
 8005bc4:	08005c75 	.word	0x08005c75
 8005bc8:	08005c75 	.word	0x08005c75
 8005bcc:	08005c75 	.word	0x08005c75
 8005bd0:	08005c75 	.word	0x08005c75
 8005bd4:	08005c75 	.word	0x08005c75
 8005bd8:	08005c75 	.word	0x08005c75
 8005bdc:	08005c75 	.word	0x08005c75
 8005be0:	08005c55 	.word	0x08005c55
 8005be4:	08005c75 	.word	0x08005c75
 8005be8:	08005c75 	.word	0x08005c75
 8005bec:	08005c75 	.word	0x08005c75
 8005bf0:	08005c75 	.word	0x08005c75
 8005bf4:	08005c75 	.word	0x08005c75
 8005bf8:	08005c75 	.word	0x08005c75
 8005bfc:	08005c75 	.word	0x08005c75
 8005c00:	08005c5d 	.word	0x08005c5d
 8005c04:	08005c75 	.word	0x08005c75
 8005c08:	08005c75 	.word	0x08005c75
 8005c0c:	08005c75 	.word	0x08005c75
 8005c10:	08005c75 	.word	0x08005c75
 8005c14:	08005c75 	.word	0x08005c75
 8005c18:	08005c75 	.word	0x08005c75
 8005c1c:	08005c75 	.word	0x08005c75
 8005c20:	08005c65 	.word	0x08005c65
 8005c24:	08005c75 	.word	0x08005c75
 8005c28:	08005c75 	.word	0x08005c75
 8005c2c:	08005c75 	.word	0x08005c75
 8005c30:	08005c75 	.word	0x08005c75
 8005c34:	08005c75 	.word	0x08005c75
 8005c38:	08005c75 	.word	0x08005c75
 8005c3c:	08005c75 	.word	0x08005c75
 8005c40:	08005c6d 	.word	0x08005c6d
 8005c44:	2301      	movs	r3, #1
 8005c46:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8005c4a:	e050      	b.n	8005cee <UART_SetConfig+0x7aa>
 8005c4c:	2304      	movs	r3, #4
 8005c4e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8005c52:	e04c      	b.n	8005cee <UART_SetConfig+0x7aa>
 8005c54:	2308      	movs	r3, #8
 8005c56:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8005c5a:	e048      	b.n	8005cee <UART_SetConfig+0x7aa>
 8005c5c:	2310      	movs	r3, #16
 8005c5e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8005c62:	e044      	b.n	8005cee <UART_SetConfig+0x7aa>
 8005c64:	2320      	movs	r3, #32
 8005c66:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8005c6a:	e040      	b.n	8005cee <UART_SetConfig+0x7aa>
 8005c6c:	2340      	movs	r3, #64	; 0x40
 8005c6e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8005c72:	e03c      	b.n	8005cee <UART_SetConfig+0x7aa>
 8005c74:	2380      	movs	r3, #128	; 0x80
 8005c76:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8005c7a:	e038      	b.n	8005cee <UART_SetConfig+0x7aa>
 8005c7c:	687b      	ldr	r3, [r7, #4]
 8005c7e:	681b      	ldr	r3, [r3, #0]
 8005c80:	4a71      	ldr	r2, [pc, #452]	; (8005e48 <UART_SetConfig+0x904>)
 8005c82:	4293      	cmp	r3, r2
 8005c84:	d130      	bne.n	8005ce8 <UART_SetConfig+0x7a4>
 8005c86:	4b6f      	ldr	r3, [pc, #444]	; (8005e44 <UART_SetConfig+0x900>)
 8005c88:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005c8a:	f003 0307 	and.w	r3, r3, #7
 8005c8e:	2b05      	cmp	r3, #5
 8005c90:	d826      	bhi.n	8005ce0 <UART_SetConfig+0x79c>
 8005c92:	a201      	add	r2, pc, #4	; (adr r2, 8005c98 <UART_SetConfig+0x754>)
 8005c94:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005c98:	08005cb1 	.word	0x08005cb1
 8005c9c:	08005cb9 	.word	0x08005cb9
 8005ca0:	08005cc1 	.word	0x08005cc1
 8005ca4:	08005cc9 	.word	0x08005cc9
 8005ca8:	08005cd1 	.word	0x08005cd1
 8005cac:	08005cd9 	.word	0x08005cd9
 8005cb0:	2302      	movs	r3, #2
 8005cb2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8005cb6:	e01a      	b.n	8005cee <UART_SetConfig+0x7aa>
 8005cb8:	2304      	movs	r3, #4
 8005cba:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8005cbe:	e016      	b.n	8005cee <UART_SetConfig+0x7aa>
 8005cc0:	2308      	movs	r3, #8
 8005cc2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8005cc6:	e012      	b.n	8005cee <UART_SetConfig+0x7aa>
 8005cc8:	2310      	movs	r3, #16
 8005cca:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8005cce:	e00e      	b.n	8005cee <UART_SetConfig+0x7aa>
 8005cd0:	2320      	movs	r3, #32
 8005cd2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8005cd6:	e00a      	b.n	8005cee <UART_SetConfig+0x7aa>
 8005cd8:	2340      	movs	r3, #64	; 0x40
 8005cda:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8005cde:	e006      	b.n	8005cee <UART_SetConfig+0x7aa>
 8005ce0:	2380      	movs	r3, #128	; 0x80
 8005ce2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8005ce6:	e002      	b.n	8005cee <UART_SetConfig+0x7aa>
 8005ce8:	2380      	movs	r3, #128	; 0x80
 8005cea:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8005cee:	687b      	ldr	r3, [r7, #4]
 8005cf0:	681b      	ldr	r3, [r3, #0]
 8005cf2:	4a55      	ldr	r2, [pc, #340]	; (8005e48 <UART_SetConfig+0x904>)
 8005cf4:	4293      	cmp	r3, r2
 8005cf6:	f040 80f0 	bne.w	8005eda <UART_SetConfig+0x996>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8005cfa:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8005cfe:	2b20      	cmp	r3, #32
 8005d00:	dc46      	bgt.n	8005d90 <UART_SetConfig+0x84c>
 8005d02:	2b02      	cmp	r3, #2
 8005d04:	db75      	blt.n	8005df2 <UART_SetConfig+0x8ae>
 8005d06:	3b02      	subs	r3, #2
 8005d08:	2b1e      	cmp	r3, #30
 8005d0a:	d872      	bhi.n	8005df2 <UART_SetConfig+0x8ae>
 8005d0c:	a201      	add	r2, pc, #4	; (adr r2, 8005d14 <UART_SetConfig+0x7d0>)
 8005d0e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005d12:	bf00      	nop
 8005d14:	08005d97 	.word	0x08005d97
 8005d18:	08005df3 	.word	0x08005df3
 8005d1c:	08005d9f 	.word	0x08005d9f
 8005d20:	08005df3 	.word	0x08005df3
 8005d24:	08005df3 	.word	0x08005df3
 8005d28:	08005df3 	.word	0x08005df3
 8005d2c:	08005daf 	.word	0x08005daf
 8005d30:	08005df3 	.word	0x08005df3
 8005d34:	08005df3 	.word	0x08005df3
 8005d38:	08005df3 	.word	0x08005df3
 8005d3c:	08005df3 	.word	0x08005df3
 8005d40:	08005df3 	.word	0x08005df3
 8005d44:	08005df3 	.word	0x08005df3
 8005d48:	08005df3 	.word	0x08005df3
 8005d4c:	08005dbf 	.word	0x08005dbf
 8005d50:	08005df3 	.word	0x08005df3
 8005d54:	08005df3 	.word	0x08005df3
 8005d58:	08005df3 	.word	0x08005df3
 8005d5c:	08005df3 	.word	0x08005df3
 8005d60:	08005df3 	.word	0x08005df3
 8005d64:	08005df3 	.word	0x08005df3
 8005d68:	08005df3 	.word	0x08005df3
 8005d6c:	08005df3 	.word	0x08005df3
 8005d70:	08005df3 	.word	0x08005df3
 8005d74:	08005df3 	.word	0x08005df3
 8005d78:	08005df3 	.word	0x08005df3
 8005d7c:	08005df3 	.word	0x08005df3
 8005d80:	08005df3 	.word	0x08005df3
 8005d84:	08005df3 	.word	0x08005df3
 8005d88:	08005df3 	.word	0x08005df3
 8005d8c:	08005de5 	.word	0x08005de5
 8005d90:	2b40      	cmp	r3, #64	; 0x40
 8005d92:	d02a      	beq.n	8005dea <UART_SetConfig+0x8a6>
 8005d94:	e02d      	b.n	8005df2 <UART_SetConfig+0x8ae>
    {
      case UART_CLOCKSOURCE_D3PCLK1:
        pclk = HAL_RCCEx_GetD3PCLK1Freq();
 8005d96:	f7fe fb4d 	bl	8004434 <HAL_RCCEx_GetD3PCLK1Freq>
 8005d9a:	62f8      	str	r0, [r7, #44]	; 0x2c
        break;
 8005d9c:	e02f      	b.n	8005dfe <UART_SetConfig+0x8ba>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8005d9e:	f107 0314 	add.w	r3, r7, #20
 8005da2:	4618      	mov	r0, r3
 8005da4:	f7fe fb5c 	bl	8004460 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 8005da8:	69bb      	ldr	r3, [r7, #24]
 8005daa:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8005dac:	e027      	b.n	8005dfe <UART_SetConfig+0x8ba>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8005dae:	f107 0308 	add.w	r3, r7, #8
 8005db2:	4618      	mov	r0, r3
 8005db4:	f7fe fca8 	bl	8004708 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 8005db8:	68fb      	ldr	r3, [r7, #12]
 8005dba:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8005dbc:	e01f      	b.n	8005dfe <UART_SetConfig+0x8ba>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8005dbe:	4b21      	ldr	r3, [pc, #132]	; (8005e44 <UART_SetConfig+0x900>)
 8005dc0:	681b      	ldr	r3, [r3, #0]
 8005dc2:	f003 0320 	and.w	r3, r3, #32
 8005dc6:	2b00      	cmp	r3, #0
 8005dc8:	d009      	beq.n	8005dde <UART_SetConfig+0x89a>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 8005dca:	4b1e      	ldr	r3, [pc, #120]	; (8005e44 <UART_SetConfig+0x900>)
 8005dcc:	681b      	ldr	r3, [r3, #0]
 8005dce:	08db      	lsrs	r3, r3, #3
 8005dd0:	f003 0303 	and.w	r3, r3, #3
 8005dd4:	4a1d      	ldr	r2, [pc, #116]	; (8005e4c <UART_SetConfig+0x908>)
 8005dd6:	fa22 f303 	lsr.w	r3, r2, r3
 8005dda:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8005ddc:	e00f      	b.n	8005dfe <UART_SetConfig+0x8ba>
          pclk = (uint32_t) HSI_VALUE;
 8005dde:	4b1b      	ldr	r3, [pc, #108]	; (8005e4c <UART_SetConfig+0x908>)
 8005de0:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8005de2:	e00c      	b.n	8005dfe <UART_SetConfig+0x8ba>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 8005de4:	4b1a      	ldr	r3, [pc, #104]	; (8005e50 <UART_SetConfig+0x90c>)
 8005de6:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8005de8:	e009      	b.n	8005dfe <UART_SetConfig+0x8ba>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8005dea:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8005dee:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8005df0:	e005      	b.n	8005dfe <UART_SetConfig+0x8ba>
      default:
        pclk = 0U;
 8005df2:	2300      	movs	r3, #0
 8005df4:	62fb      	str	r3, [r7, #44]	; 0x2c
        ret = HAL_ERROR;
 8005df6:	2301      	movs	r3, #1
 8005df8:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
        break;
 8005dfc:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8005dfe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005e00:	2b00      	cmp	r3, #0
 8005e02:	f000 81e6 	beq.w	80061d2 <UART_SetConfig+0xc8e>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 8005e06:	687b      	ldr	r3, [r7, #4]
 8005e08:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005e0a:	4a12      	ldr	r2, [pc, #72]	; (8005e54 <UART_SetConfig+0x910>)
 8005e0c:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8005e10:	461a      	mov	r2, r3
 8005e12:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005e14:	fbb3 f3f2 	udiv	r3, r3, r2
 8005e18:	623b      	str	r3, [r7, #32]

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8005e1a:	687b      	ldr	r3, [r7, #4]
 8005e1c:	685a      	ldr	r2, [r3, #4]
 8005e1e:	4613      	mov	r3, r2
 8005e20:	005b      	lsls	r3, r3, #1
 8005e22:	4413      	add	r3, r2
 8005e24:	6a3a      	ldr	r2, [r7, #32]
 8005e26:	429a      	cmp	r2, r3
 8005e28:	d305      	bcc.n	8005e36 <UART_SetConfig+0x8f2>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 8005e2a:	687b      	ldr	r3, [r7, #4]
 8005e2c:	685b      	ldr	r3, [r3, #4]
 8005e2e:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8005e30:	6a3a      	ldr	r2, [r7, #32]
 8005e32:	429a      	cmp	r2, r3
 8005e34:	d910      	bls.n	8005e58 <UART_SetConfig+0x914>
      {
        ret = HAL_ERROR;
 8005e36:	2301      	movs	r3, #1
 8005e38:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
 8005e3c:	e1c9      	b.n	80061d2 <UART_SetConfig+0xc8e>
 8005e3e:	bf00      	nop
 8005e40:	40011c00 	.word	0x40011c00
 8005e44:	58024400 	.word	0x58024400
 8005e48:	58000c00 	.word	0x58000c00
 8005e4c:	03d09000 	.word	0x03d09000
 8005e50:	003d0900 	.word	0x003d0900
 8005e54:	08007dfc 	.word	0x08007dfc
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8005e58:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005e5a:	4618      	mov	r0, r3
 8005e5c:	f04f 0100 	mov.w	r1, #0
 8005e60:	687b      	ldr	r3, [r7, #4]
 8005e62:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005e64:	4ac1      	ldr	r2, [pc, #772]	; (800616c <UART_SetConfig+0xc28>)
 8005e66:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8005e6a:	b29a      	uxth	r2, r3
 8005e6c:	f04f 0300 	mov.w	r3, #0
 8005e70:	f7fa fa9e 	bl	80003b0 <__aeabi_uldivmod>
 8005e74:	4602      	mov	r2, r0
 8005e76:	460b      	mov	r3, r1
 8005e78:	4610      	mov	r0, r2
 8005e7a:	4619      	mov	r1, r3
 8005e7c:	f04f 0200 	mov.w	r2, #0
 8005e80:	f04f 0300 	mov.w	r3, #0
 8005e84:	020b      	lsls	r3, r1, #8
 8005e86:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 8005e8a:	0202      	lsls	r2, r0, #8
 8005e8c:	6879      	ldr	r1, [r7, #4]
 8005e8e:	6849      	ldr	r1, [r1, #4]
 8005e90:	0849      	lsrs	r1, r1, #1
 8005e92:	4608      	mov	r0, r1
 8005e94:	f04f 0100 	mov.w	r1, #0
 8005e98:	1814      	adds	r4, r2, r0
 8005e9a:	eb43 0501 	adc.w	r5, r3, r1
 8005e9e:	687b      	ldr	r3, [r7, #4]
 8005ea0:	685b      	ldr	r3, [r3, #4]
 8005ea2:	461a      	mov	r2, r3
 8005ea4:	f04f 0300 	mov.w	r3, #0
 8005ea8:	4620      	mov	r0, r4
 8005eaa:	4629      	mov	r1, r5
 8005eac:	f7fa fa80 	bl	80003b0 <__aeabi_uldivmod>
 8005eb0:	4602      	mov	r2, r0
 8005eb2:	460b      	mov	r3, r1
 8005eb4:	4613      	mov	r3, r2
 8005eb6:	62bb      	str	r3, [r7, #40]	; 0x28
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8005eb8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005eba:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8005ebe:	d308      	bcc.n	8005ed2 <UART_SetConfig+0x98e>
 8005ec0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005ec2:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8005ec6:	d204      	bcs.n	8005ed2 <UART_SetConfig+0x98e>
        {
          huart->Instance->BRR = usartdiv;
 8005ec8:	687b      	ldr	r3, [r7, #4]
 8005eca:	681b      	ldr	r3, [r3, #0]
 8005ecc:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8005ece:	60da      	str	r2, [r3, #12]
 8005ed0:	e17f      	b.n	80061d2 <UART_SetConfig+0xc8e>
        }
        else
        {
          ret = HAL_ERROR;
 8005ed2:	2301      	movs	r3, #1
 8005ed4:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
 8005ed8:	e17b      	b.n	80061d2 <UART_SetConfig+0xc8e>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8005eda:	687b      	ldr	r3, [r7, #4]
 8005edc:	69db      	ldr	r3, [r3, #28]
 8005ede:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005ee2:	f040 80be 	bne.w	8006062 <UART_SetConfig+0xb1e>
  {
    switch (clocksource)
 8005ee6:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8005eea:	2b20      	cmp	r3, #32
 8005eec:	dc48      	bgt.n	8005f80 <UART_SetConfig+0xa3c>
 8005eee:	2b00      	cmp	r3, #0
 8005ef0:	db7b      	blt.n	8005fea <UART_SetConfig+0xaa6>
 8005ef2:	2b20      	cmp	r3, #32
 8005ef4:	d879      	bhi.n	8005fea <UART_SetConfig+0xaa6>
 8005ef6:	a201      	add	r2, pc, #4	; (adr r2, 8005efc <UART_SetConfig+0x9b8>)
 8005ef8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005efc:	08005f87 	.word	0x08005f87
 8005f00:	08005f8f 	.word	0x08005f8f
 8005f04:	08005feb 	.word	0x08005feb
 8005f08:	08005feb 	.word	0x08005feb
 8005f0c:	08005f97 	.word	0x08005f97
 8005f10:	08005feb 	.word	0x08005feb
 8005f14:	08005feb 	.word	0x08005feb
 8005f18:	08005feb 	.word	0x08005feb
 8005f1c:	08005fa7 	.word	0x08005fa7
 8005f20:	08005feb 	.word	0x08005feb
 8005f24:	08005feb 	.word	0x08005feb
 8005f28:	08005feb 	.word	0x08005feb
 8005f2c:	08005feb 	.word	0x08005feb
 8005f30:	08005feb 	.word	0x08005feb
 8005f34:	08005feb 	.word	0x08005feb
 8005f38:	08005feb 	.word	0x08005feb
 8005f3c:	08005fb7 	.word	0x08005fb7
 8005f40:	08005feb 	.word	0x08005feb
 8005f44:	08005feb 	.word	0x08005feb
 8005f48:	08005feb 	.word	0x08005feb
 8005f4c:	08005feb 	.word	0x08005feb
 8005f50:	08005feb 	.word	0x08005feb
 8005f54:	08005feb 	.word	0x08005feb
 8005f58:	08005feb 	.word	0x08005feb
 8005f5c:	08005feb 	.word	0x08005feb
 8005f60:	08005feb 	.word	0x08005feb
 8005f64:	08005feb 	.word	0x08005feb
 8005f68:	08005feb 	.word	0x08005feb
 8005f6c:	08005feb 	.word	0x08005feb
 8005f70:	08005feb 	.word	0x08005feb
 8005f74:	08005feb 	.word	0x08005feb
 8005f78:	08005feb 	.word	0x08005feb
 8005f7c:	08005fdd 	.word	0x08005fdd
 8005f80:	2b40      	cmp	r3, #64	; 0x40
 8005f82:	d02e      	beq.n	8005fe2 <UART_SetConfig+0xa9e>
 8005f84:	e031      	b.n	8005fea <UART_SetConfig+0xaa6>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8005f86:	f7fd fb2f 	bl	80035e8 <HAL_RCC_GetPCLK1Freq>
 8005f8a:	62f8      	str	r0, [r7, #44]	; 0x2c
        break;
 8005f8c:	e033      	b.n	8005ff6 <UART_SetConfig+0xab2>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8005f8e:	f7fd fb41 	bl	8003614 <HAL_RCC_GetPCLK2Freq>
 8005f92:	62f8      	str	r0, [r7, #44]	; 0x2c
        break;
 8005f94:	e02f      	b.n	8005ff6 <UART_SetConfig+0xab2>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8005f96:	f107 0314 	add.w	r3, r7, #20
 8005f9a:	4618      	mov	r0, r3
 8005f9c:	f7fe fa60 	bl	8004460 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 8005fa0:	69bb      	ldr	r3, [r7, #24]
 8005fa2:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8005fa4:	e027      	b.n	8005ff6 <UART_SetConfig+0xab2>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8005fa6:	f107 0308 	add.w	r3, r7, #8
 8005faa:	4618      	mov	r0, r3
 8005fac:	f7fe fbac 	bl	8004708 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 8005fb0:	68fb      	ldr	r3, [r7, #12]
 8005fb2:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8005fb4:	e01f      	b.n	8005ff6 <UART_SetConfig+0xab2>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8005fb6:	4b6e      	ldr	r3, [pc, #440]	; (8006170 <UART_SetConfig+0xc2c>)
 8005fb8:	681b      	ldr	r3, [r3, #0]
 8005fba:	f003 0320 	and.w	r3, r3, #32
 8005fbe:	2b00      	cmp	r3, #0
 8005fc0:	d009      	beq.n	8005fd6 <UART_SetConfig+0xa92>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 8005fc2:	4b6b      	ldr	r3, [pc, #428]	; (8006170 <UART_SetConfig+0xc2c>)
 8005fc4:	681b      	ldr	r3, [r3, #0]
 8005fc6:	08db      	lsrs	r3, r3, #3
 8005fc8:	f003 0303 	and.w	r3, r3, #3
 8005fcc:	4a69      	ldr	r2, [pc, #420]	; (8006174 <UART_SetConfig+0xc30>)
 8005fce:	fa22 f303 	lsr.w	r3, r2, r3
 8005fd2:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8005fd4:	e00f      	b.n	8005ff6 <UART_SetConfig+0xab2>
          pclk = (uint32_t) HSI_VALUE;
 8005fd6:	4b67      	ldr	r3, [pc, #412]	; (8006174 <UART_SetConfig+0xc30>)
 8005fd8:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8005fda:	e00c      	b.n	8005ff6 <UART_SetConfig+0xab2>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 8005fdc:	4b66      	ldr	r3, [pc, #408]	; (8006178 <UART_SetConfig+0xc34>)
 8005fde:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8005fe0:	e009      	b.n	8005ff6 <UART_SetConfig+0xab2>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8005fe2:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8005fe6:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8005fe8:	e005      	b.n	8005ff6 <UART_SetConfig+0xab2>
      default:
        pclk = 0U;
 8005fea:	2300      	movs	r3, #0
 8005fec:	62fb      	str	r3, [r7, #44]	; 0x2c
        ret = HAL_ERROR;
 8005fee:	2301      	movs	r3, #1
 8005ff0:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
        break;
 8005ff4:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8005ff6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005ff8:	2b00      	cmp	r3, #0
 8005ffa:	f000 80ea 	beq.w	80061d2 <UART_SetConfig+0xc8e>
    {
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8005ffe:	687b      	ldr	r3, [r7, #4]
 8006000:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006002:	4a5a      	ldr	r2, [pc, #360]	; (800616c <UART_SetConfig+0xc28>)
 8006004:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8006008:	461a      	mov	r2, r3
 800600a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800600c:	fbb3 f3f2 	udiv	r3, r3, r2
 8006010:	005a      	lsls	r2, r3, #1
 8006012:	687b      	ldr	r3, [r7, #4]
 8006014:	685b      	ldr	r3, [r3, #4]
 8006016:	085b      	lsrs	r3, r3, #1
 8006018:	441a      	add	r2, r3
 800601a:	687b      	ldr	r3, [r7, #4]
 800601c:	685b      	ldr	r3, [r3, #4]
 800601e:	fbb2 f3f3 	udiv	r3, r2, r3
 8006022:	b29b      	uxth	r3, r3
 8006024:	62bb      	str	r3, [r7, #40]	; 0x28
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8006026:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006028:	2b0f      	cmp	r3, #15
 800602a:	d916      	bls.n	800605a <UART_SetConfig+0xb16>
 800602c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800602e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006032:	d212      	bcs.n	800605a <UART_SetConfig+0xb16>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8006034:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006036:	b29b      	uxth	r3, r3
 8006038:	f023 030f 	bic.w	r3, r3, #15
 800603c:	84fb      	strh	r3, [r7, #38]	; 0x26
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800603e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006040:	085b      	lsrs	r3, r3, #1
 8006042:	b29b      	uxth	r3, r3
 8006044:	f003 0307 	and.w	r3, r3, #7
 8006048:	b29a      	uxth	r2, r3
 800604a:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 800604c:	4313      	orrs	r3, r2
 800604e:	84fb      	strh	r3, [r7, #38]	; 0x26
        huart->Instance->BRR = brrtemp;
 8006050:	687b      	ldr	r3, [r7, #4]
 8006052:	681b      	ldr	r3, [r3, #0]
 8006054:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 8006056:	60da      	str	r2, [r3, #12]
 8006058:	e0bb      	b.n	80061d2 <UART_SetConfig+0xc8e>
      }
      else
      {
        ret = HAL_ERROR;
 800605a:	2301      	movs	r3, #1
 800605c:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
 8006060:	e0b7      	b.n	80061d2 <UART_SetConfig+0xc8e>
      }
    }
  }
  else
  {
    switch (clocksource)
 8006062:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8006066:	2b20      	cmp	r3, #32
 8006068:	dc4a      	bgt.n	8006100 <UART_SetConfig+0xbbc>
 800606a:	2b00      	cmp	r3, #0
 800606c:	f2c0 8086 	blt.w	800617c <UART_SetConfig+0xc38>
 8006070:	2b20      	cmp	r3, #32
 8006072:	f200 8083 	bhi.w	800617c <UART_SetConfig+0xc38>
 8006076:	a201      	add	r2, pc, #4	; (adr r2, 800607c <UART_SetConfig+0xb38>)
 8006078:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800607c:	08006107 	.word	0x08006107
 8006080:	0800610f 	.word	0x0800610f
 8006084:	0800617d 	.word	0x0800617d
 8006088:	0800617d 	.word	0x0800617d
 800608c:	08006117 	.word	0x08006117
 8006090:	0800617d 	.word	0x0800617d
 8006094:	0800617d 	.word	0x0800617d
 8006098:	0800617d 	.word	0x0800617d
 800609c:	08006127 	.word	0x08006127
 80060a0:	0800617d 	.word	0x0800617d
 80060a4:	0800617d 	.word	0x0800617d
 80060a8:	0800617d 	.word	0x0800617d
 80060ac:	0800617d 	.word	0x0800617d
 80060b0:	0800617d 	.word	0x0800617d
 80060b4:	0800617d 	.word	0x0800617d
 80060b8:	0800617d 	.word	0x0800617d
 80060bc:	08006137 	.word	0x08006137
 80060c0:	0800617d 	.word	0x0800617d
 80060c4:	0800617d 	.word	0x0800617d
 80060c8:	0800617d 	.word	0x0800617d
 80060cc:	0800617d 	.word	0x0800617d
 80060d0:	0800617d 	.word	0x0800617d
 80060d4:	0800617d 	.word	0x0800617d
 80060d8:	0800617d 	.word	0x0800617d
 80060dc:	0800617d 	.word	0x0800617d
 80060e0:	0800617d 	.word	0x0800617d
 80060e4:	0800617d 	.word	0x0800617d
 80060e8:	0800617d 	.word	0x0800617d
 80060ec:	0800617d 	.word	0x0800617d
 80060f0:	0800617d 	.word	0x0800617d
 80060f4:	0800617d 	.word	0x0800617d
 80060f8:	0800617d 	.word	0x0800617d
 80060fc:	0800615d 	.word	0x0800615d
 8006100:	2b40      	cmp	r3, #64	; 0x40
 8006102:	d02e      	beq.n	8006162 <UART_SetConfig+0xc1e>
 8006104:	e03a      	b.n	800617c <UART_SetConfig+0xc38>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8006106:	f7fd fa6f 	bl	80035e8 <HAL_RCC_GetPCLK1Freq>
 800610a:	62f8      	str	r0, [r7, #44]	; 0x2c
        break;
 800610c:	e03c      	b.n	8006188 <UART_SetConfig+0xc44>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800610e:	f7fd fa81 	bl	8003614 <HAL_RCC_GetPCLK2Freq>
 8006112:	62f8      	str	r0, [r7, #44]	; 0x2c
        break;
 8006114:	e038      	b.n	8006188 <UART_SetConfig+0xc44>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8006116:	f107 0314 	add.w	r3, r7, #20
 800611a:	4618      	mov	r0, r3
 800611c:	f7fe f9a0 	bl	8004460 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 8006120:	69bb      	ldr	r3, [r7, #24]
 8006122:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8006124:	e030      	b.n	8006188 <UART_SetConfig+0xc44>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8006126:	f107 0308 	add.w	r3, r7, #8
 800612a:	4618      	mov	r0, r3
 800612c:	f7fe faec 	bl	8004708 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 8006130:	68fb      	ldr	r3, [r7, #12]
 8006132:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8006134:	e028      	b.n	8006188 <UART_SetConfig+0xc44>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8006136:	4b0e      	ldr	r3, [pc, #56]	; (8006170 <UART_SetConfig+0xc2c>)
 8006138:	681b      	ldr	r3, [r3, #0]
 800613a:	f003 0320 	and.w	r3, r3, #32
 800613e:	2b00      	cmp	r3, #0
 8006140:	d009      	beq.n	8006156 <UART_SetConfig+0xc12>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 8006142:	4b0b      	ldr	r3, [pc, #44]	; (8006170 <UART_SetConfig+0xc2c>)
 8006144:	681b      	ldr	r3, [r3, #0]
 8006146:	08db      	lsrs	r3, r3, #3
 8006148:	f003 0303 	and.w	r3, r3, #3
 800614c:	4a09      	ldr	r2, [pc, #36]	; (8006174 <UART_SetConfig+0xc30>)
 800614e:	fa22 f303 	lsr.w	r3, r2, r3
 8006152:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8006154:	e018      	b.n	8006188 <UART_SetConfig+0xc44>
          pclk = (uint32_t) HSI_VALUE;
 8006156:	4b07      	ldr	r3, [pc, #28]	; (8006174 <UART_SetConfig+0xc30>)
 8006158:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800615a:	e015      	b.n	8006188 <UART_SetConfig+0xc44>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 800615c:	4b06      	ldr	r3, [pc, #24]	; (8006178 <UART_SetConfig+0xc34>)
 800615e:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8006160:	e012      	b.n	8006188 <UART_SetConfig+0xc44>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8006162:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8006166:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8006168:	e00e      	b.n	8006188 <UART_SetConfig+0xc44>
 800616a:	bf00      	nop
 800616c:	08007dfc 	.word	0x08007dfc
 8006170:	58024400 	.word	0x58024400
 8006174:	03d09000 	.word	0x03d09000
 8006178:	003d0900 	.word	0x003d0900
      default:
        pclk = 0U;
 800617c:	2300      	movs	r3, #0
 800617e:	62fb      	str	r3, [r7, #44]	; 0x2c
        ret = HAL_ERROR;
 8006180:	2301      	movs	r3, #1
 8006182:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
        break;
 8006186:	bf00      	nop
    }

    if (pclk != 0U)
 8006188:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800618a:	2b00      	cmp	r3, #0
 800618c:	d021      	beq.n	80061d2 <UART_SetConfig+0xc8e>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800618e:	687b      	ldr	r3, [r7, #4]
 8006190:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006192:	4a1a      	ldr	r2, [pc, #104]	; (80061fc <UART_SetConfig+0xcb8>)
 8006194:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8006198:	461a      	mov	r2, r3
 800619a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800619c:	fbb3 f2f2 	udiv	r2, r3, r2
 80061a0:	687b      	ldr	r3, [r7, #4]
 80061a2:	685b      	ldr	r3, [r3, #4]
 80061a4:	085b      	lsrs	r3, r3, #1
 80061a6:	441a      	add	r2, r3
 80061a8:	687b      	ldr	r3, [r7, #4]
 80061aa:	685b      	ldr	r3, [r3, #4]
 80061ac:	fbb2 f3f3 	udiv	r3, r2, r3
 80061b0:	b29b      	uxth	r3, r3
 80061b2:	62bb      	str	r3, [r7, #40]	; 0x28
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80061b4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80061b6:	2b0f      	cmp	r3, #15
 80061b8:	d908      	bls.n	80061cc <UART_SetConfig+0xc88>
 80061ba:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80061bc:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80061c0:	d204      	bcs.n	80061cc <UART_SetConfig+0xc88>
      {
        huart->Instance->BRR = usartdiv;
 80061c2:	687b      	ldr	r3, [r7, #4]
 80061c4:	681b      	ldr	r3, [r3, #0]
 80061c6:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80061c8:	60da      	str	r2, [r3, #12]
 80061ca:	e002      	b.n	80061d2 <UART_SetConfig+0xc8e>
      }
      else
      {
        ret = HAL_ERROR;
 80061cc:	2301      	movs	r3, #1
 80061ce:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 80061d2:	687b      	ldr	r3, [r7, #4]
 80061d4:	2201      	movs	r2, #1
 80061d6:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 80061da:	687b      	ldr	r3, [r7, #4]
 80061dc:	2201      	movs	r2, #1
 80061de:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 80061e2:	687b      	ldr	r3, [r7, #4]
 80061e4:	2200      	movs	r2, #0
 80061e6:	671a      	str	r2, [r3, #112]	; 0x70
  huart->TxISR = NULL;
 80061e8:	687b      	ldr	r3, [r7, #4]
 80061ea:	2200      	movs	r2, #0
 80061ec:	675a      	str	r2, [r3, #116]	; 0x74

  return ret;
 80061ee:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
}
 80061f2:	4618      	mov	r0, r3
 80061f4:	3738      	adds	r7, #56	; 0x38
 80061f6:	46bd      	mov	sp, r7
 80061f8:	bdb0      	pop	{r4, r5, r7, pc}
 80061fa:	bf00      	nop
 80061fc:	08007dfc 	.word	0x08007dfc

08006200 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8006200:	b480      	push	{r7}
 8006202:	b083      	sub	sp, #12
 8006204:	af00      	add	r7, sp, #0
 8006206:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8006208:	687b      	ldr	r3, [r7, #4]
 800620a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800620c:	f003 0301 	and.w	r3, r3, #1
 8006210:	2b00      	cmp	r3, #0
 8006212:	d00a      	beq.n	800622a <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8006214:	687b      	ldr	r3, [r7, #4]
 8006216:	681b      	ldr	r3, [r3, #0]
 8006218:	685b      	ldr	r3, [r3, #4]
 800621a:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 800621e:	687b      	ldr	r3, [r7, #4]
 8006220:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006222:	687b      	ldr	r3, [r7, #4]
 8006224:	681b      	ldr	r3, [r3, #0]
 8006226:	430a      	orrs	r2, r1
 8006228:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800622a:	687b      	ldr	r3, [r7, #4]
 800622c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800622e:	f003 0302 	and.w	r3, r3, #2
 8006232:	2b00      	cmp	r3, #0
 8006234:	d00a      	beq.n	800624c <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8006236:	687b      	ldr	r3, [r7, #4]
 8006238:	681b      	ldr	r3, [r3, #0]
 800623a:	685b      	ldr	r3, [r3, #4]
 800623c:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8006240:	687b      	ldr	r3, [r7, #4]
 8006242:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8006244:	687b      	ldr	r3, [r7, #4]
 8006246:	681b      	ldr	r3, [r3, #0]
 8006248:	430a      	orrs	r2, r1
 800624a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800624c:	687b      	ldr	r3, [r7, #4]
 800624e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006250:	f003 0304 	and.w	r3, r3, #4
 8006254:	2b00      	cmp	r3, #0
 8006256:	d00a      	beq.n	800626e <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8006258:	687b      	ldr	r3, [r7, #4]
 800625a:	681b      	ldr	r3, [r3, #0]
 800625c:	685b      	ldr	r3, [r3, #4]
 800625e:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8006262:	687b      	ldr	r3, [r7, #4]
 8006264:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8006266:	687b      	ldr	r3, [r7, #4]
 8006268:	681b      	ldr	r3, [r3, #0]
 800626a:	430a      	orrs	r2, r1
 800626c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800626e:	687b      	ldr	r3, [r7, #4]
 8006270:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006272:	f003 0308 	and.w	r3, r3, #8
 8006276:	2b00      	cmp	r3, #0
 8006278:	d00a      	beq.n	8006290 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800627a:	687b      	ldr	r3, [r7, #4]
 800627c:	681b      	ldr	r3, [r3, #0]
 800627e:	685b      	ldr	r3, [r3, #4]
 8006280:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8006284:	687b      	ldr	r3, [r7, #4]
 8006286:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8006288:	687b      	ldr	r3, [r7, #4]
 800628a:	681b      	ldr	r3, [r3, #0]
 800628c:	430a      	orrs	r2, r1
 800628e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8006290:	687b      	ldr	r3, [r7, #4]
 8006292:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006294:	f003 0310 	and.w	r3, r3, #16
 8006298:	2b00      	cmp	r3, #0
 800629a:	d00a      	beq.n	80062b2 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800629c:	687b      	ldr	r3, [r7, #4]
 800629e:	681b      	ldr	r3, [r3, #0]
 80062a0:	689b      	ldr	r3, [r3, #8]
 80062a2:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 80062a6:	687b      	ldr	r3, [r7, #4]
 80062a8:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80062aa:	687b      	ldr	r3, [r7, #4]
 80062ac:	681b      	ldr	r3, [r3, #0]
 80062ae:	430a      	orrs	r2, r1
 80062b0:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 80062b2:	687b      	ldr	r3, [r7, #4]
 80062b4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80062b6:	f003 0320 	and.w	r3, r3, #32
 80062ba:	2b00      	cmp	r3, #0
 80062bc:	d00a      	beq.n	80062d4 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 80062be:	687b      	ldr	r3, [r7, #4]
 80062c0:	681b      	ldr	r3, [r3, #0]
 80062c2:	689b      	ldr	r3, [r3, #8]
 80062c4:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 80062c8:	687b      	ldr	r3, [r7, #4]
 80062ca:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80062cc:	687b      	ldr	r3, [r7, #4]
 80062ce:	681b      	ldr	r3, [r3, #0]
 80062d0:	430a      	orrs	r2, r1
 80062d2:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 80062d4:	687b      	ldr	r3, [r7, #4]
 80062d6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80062d8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80062dc:	2b00      	cmp	r3, #0
 80062de:	d01a      	beq.n	8006316 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 80062e0:	687b      	ldr	r3, [r7, #4]
 80062e2:	681b      	ldr	r3, [r3, #0]
 80062e4:	685b      	ldr	r3, [r3, #4]
 80062e6:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 80062ea:	687b      	ldr	r3, [r7, #4]
 80062ec:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80062ee:	687b      	ldr	r3, [r7, #4]
 80062f0:	681b      	ldr	r3, [r3, #0]
 80062f2:	430a      	orrs	r2, r1
 80062f4:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 80062f6:	687b      	ldr	r3, [r7, #4]
 80062f8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80062fa:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80062fe:	d10a      	bne.n	8006316 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8006300:	687b      	ldr	r3, [r7, #4]
 8006302:	681b      	ldr	r3, [r3, #0]
 8006304:	685b      	ldr	r3, [r3, #4]
 8006306:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 800630a:	687b      	ldr	r3, [r7, #4]
 800630c:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800630e:	687b      	ldr	r3, [r7, #4]
 8006310:	681b      	ldr	r3, [r3, #0]
 8006312:	430a      	orrs	r2, r1
 8006314:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8006316:	687b      	ldr	r3, [r7, #4]
 8006318:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800631a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800631e:	2b00      	cmp	r3, #0
 8006320:	d00a      	beq.n	8006338 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8006322:	687b      	ldr	r3, [r7, #4]
 8006324:	681b      	ldr	r3, [r3, #0]
 8006326:	685b      	ldr	r3, [r3, #4]
 8006328:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 800632c:	687b      	ldr	r3, [r7, #4]
 800632e:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8006330:	687b      	ldr	r3, [r7, #4]
 8006332:	681b      	ldr	r3, [r3, #0]
 8006334:	430a      	orrs	r2, r1
 8006336:	605a      	str	r2, [r3, #4]
  }
}
 8006338:	bf00      	nop
 800633a:	370c      	adds	r7, #12
 800633c:	46bd      	mov	sp, r7
 800633e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006342:	4770      	bx	lr

08006344 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8006344:	b580      	push	{r7, lr}
 8006346:	b086      	sub	sp, #24
 8006348:	af02      	add	r7, sp, #8
 800634a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800634c:	687b      	ldr	r3, [r7, #4]
 800634e:	2200      	movs	r2, #0
 8006350:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8006354:	f7fb f898 	bl	8001488 <HAL_GetTick>
 8006358:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800635a:	687b      	ldr	r3, [r7, #4]
 800635c:	681b      	ldr	r3, [r3, #0]
 800635e:	681b      	ldr	r3, [r3, #0]
 8006360:	f003 0308 	and.w	r3, r3, #8
 8006364:	2b08      	cmp	r3, #8
 8006366:	d10e      	bne.n	8006386 <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8006368:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800636c:	9300      	str	r3, [sp, #0]
 800636e:	68fb      	ldr	r3, [r7, #12]
 8006370:	2200      	movs	r2, #0
 8006372:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8006376:	6878      	ldr	r0, [r7, #4]
 8006378:	f000 f82f 	bl	80063da <UART_WaitOnFlagUntilTimeout>
 800637c:	4603      	mov	r3, r0
 800637e:	2b00      	cmp	r3, #0
 8006380:	d001      	beq.n	8006386 <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8006382:	2303      	movs	r3, #3
 8006384:	e025      	b.n	80063d2 <UART_CheckIdleState+0x8e>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8006386:	687b      	ldr	r3, [r7, #4]
 8006388:	681b      	ldr	r3, [r3, #0]
 800638a:	681b      	ldr	r3, [r3, #0]
 800638c:	f003 0304 	and.w	r3, r3, #4
 8006390:	2b04      	cmp	r3, #4
 8006392:	d10e      	bne.n	80063b2 <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8006394:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8006398:	9300      	str	r3, [sp, #0]
 800639a:	68fb      	ldr	r3, [r7, #12]
 800639c:	2200      	movs	r2, #0
 800639e:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 80063a2:	6878      	ldr	r0, [r7, #4]
 80063a4:	f000 f819 	bl	80063da <UART_WaitOnFlagUntilTimeout>
 80063a8:	4603      	mov	r3, r0
 80063aa:	2b00      	cmp	r3, #0
 80063ac:	d001      	beq.n	80063b2 <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 80063ae:	2303      	movs	r3, #3
 80063b0:	e00f      	b.n	80063d2 <UART_CheckIdleState+0x8e>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 80063b2:	687b      	ldr	r3, [r7, #4]
 80063b4:	2220      	movs	r2, #32
 80063b6:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  huart->RxState = HAL_UART_STATE_READY;
 80063ba:	687b      	ldr	r3, [r7, #4]
 80063bc:	2220      	movs	r2, #32
 80063be:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80063c2:	687b      	ldr	r3, [r7, #4]
 80063c4:	2200      	movs	r2, #0
 80063c6:	66da      	str	r2, [r3, #108]	; 0x6c

  __HAL_UNLOCK(huart);
 80063c8:	687b      	ldr	r3, [r7, #4]
 80063ca:	2200      	movs	r2, #0
 80063cc:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 80063d0:	2300      	movs	r3, #0
}
 80063d2:	4618      	mov	r0, r3
 80063d4:	3710      	adds	r7, #16
 80063d6:	46bd      	mov	sp, r7
 80063d8:	bd80      	pop	{r7, pc}

080063da <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 80063da:	b580      	push	{r7, lr}
 80063dc:	b084      	sub	sp, #16
 80063de:	af00      	add	r7, sp, #0
 80063e0:	60f8      	str	r0, [r7, #12]
 80063e2:	60b9      	str	r1, [r7, #8]
 80063e4:	603b      	str	r3, [r7, #0]
 80063e6:	4613      	mov	r3, r2
 80063e8:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80063ea:	e062      	b.n	80064b2 <UART_WaitOnFlagUntilTimeout+0xd8>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80063ec:	69bb      	ldr	r3, [r7, #24]
 80063ee:	f1b3 3fff 	cmp.w	r3, #4294967295
 80063f2:	d05e      	beq.n	80064b2 <UART_WaitOnFlagUntilTimeout+0xd8>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80063f4:	f7fb f848 	bl	8001488 <HAL_GetTick>
 80063f8:	4602      	mov	r2, r0
 80063fa:	683b      	ldr	r3, [r7, #0]
 80063fc:	1ad3      	subs	r3, r2, r3
 80063fe:	69ba      	ldr	r2, [r7, #24]
 8006400:	429a      	cmp	r2, r3
 8006402:	d302      	bcc.n	800640a <UART_WaitOnFlagUntilTimeout+0x30>
 8006404:	69bb      	ldr	r3, [r7, #24]
 8006406:	2b00      	cmp	r3, #0
 8006408:	d11d      	bne.n	8006446 <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
 800640a:	68fb      	ldr	r3, [r7, #12]
 800640c:	681b      	ldr	r3, [r3, #0]
 800640e:	681a      	ldr	r2, [r3, #0]
 8006410:	68fb      	ldr	r3, [r7, #12]
 8006412:	681b      	ldr	r3, [r3, #0]
 8006414:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8006418:	601a      	str	r2, [r3, #0]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800641a:	68fb      	ldr	r3, [r7, #12]
 800641c:	681b      	ldr	r3, [r3, #0]
 800641e:	689a      	ldr	r2, [r3, #8]
 8006420:	68fb      	ldr	r3, [r7, #12]
 8006422:	681b      	ldr	r3, [r3, #0]
 8006424:	f022 0201 	bic.w	r2, r2, #1
 8006428:	609a      	str	r2, [r3, #8]

        huart->gState = HAL_UART_STATE_READY;
 800642a:	68fb      	ldr	r3, [r7, #12]
 800642c:	2220      	movs	r2, #32
 800642e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
        huart->RxState = HAL_UART_STATE_READY;
 8006432:	68fb      	ldr	r3, [r7, #12]
 8006434:	2220      	movs	r2, #32
 8006436:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

        __HAL_UNLOCK(huart);
 800643a:	68fb      	ldr	r3, [r7, #12]
 800643c:	2200      	movs	r2, #0
 800643e:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

        return HAL_TIMEOUT;
 8006442:	2303      	movs	r3, #3
 8006444:	e045      	b.n	80064d2 <UART_WaitOnFlagUntilTimeout+0xf8>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8006446:	68fb      	ldr	r3, [r7, #12]
 8006448:	681b      	ldr	r3, [r3, #0]
 800644a:	681b      	ldr	r3, [r3, #0]
 800644c:	f003 0304 	and.w	r3, r3, #4
 8006450:	2b00      	cmp	r3, #0
 8006452:	d02e      	beq.n	80064b2 <UART_WaitOnFlagUntilTimeout+0xd8>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8006454:	68fb      	ldr	r3, [r7, #12]
 8006456:	681b      	ldr	r3, [r3, #0]
 8006458:	69db      	ldr	r3, [r3, #28]
 800645a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800645e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8006462:	d126      	bne.n	80064b2 <UART_WaitOnFlagUntilTimeout+0xd8>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8006464:	68fb      	ldr	r3, [r7, #12]
 8006466:	681b      	ldr	r3, [r3, #0]
 8006468:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800646c:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
 800646e:	68fb      	ldr	r3, [r7, #12]
 8006470:	681b      	ldr	r3, [r3, #0]
 8006472:	681a      	ldr	r2, [r3, #0]
 8006474:	68fb      	ldr	r3, [r7, #12]
 8006476:	681b      	ldr	r3, [r3, #0]
 8006478:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 800647c:	601a      	str	r2, [r3, #0]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800647e:	68fb      	ldr	r3, [r7, #12]
 8006480:	681b      	ldr	r3, [r3, #0]
 8006482:	689a      	ldr	r2, [r3, #8]
 8006484:	68fb      	ldr	r3, [r7, #12]
 8006486:	681b      	ldr	r3, [r3, #0]
 8006488:	f022 0201 	bic.w	r2, r2, #1
 800648c:	609a      	str	r2, [r3, #8]

          huart->gState = HAL_UART_STATE_READY;
 800648e:	68fb      	ldr	r3, [r7, #12]
 8006490:	2220      	movs	r2, #32
 8006492:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          huart->RxState = HAL_UART_STATE_READY;
 8006496:	68fb      	ldr	r3, [r7, #12]
 8006498:	2220      	movs	r2, #32
 800649a:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800649e:	68fb      	ldr	r3, [r7, #12]
 80064a0:	2220      	movs	r2, #32
 80064a2:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80064a6:	68fb      	ldr	r3, [r7, #12]
 80064a8:	2200      	movs	r2, #0
 80064aa:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

          return HAL_TIMEOUT;
 80064ae:	2303      	movs	r3, #3
 80064b0:	e00f      	b.n	80064d2 <UART_WaitOnFlagUntilTimeout+0xf8>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80064b2:	68fb      	ldr	r3, [r7, #12]
 80064b4:	681b      	ldr	r3, [r3, #0]
 80064b6:	69da      	ldr	r2, [r3, #28]
 80064b8:	68bb      	ldr	r3, [r7, #8]
 80064ba:	4013      	ands	r3, r2
 80064bc:	68ba      	ldr	r2, [r7, #8]
 80064be:	429a      	cmp	r2, r3
 80064c0:	bf0c      	ite	eq
 80064c2:	2301      	moveq	r3, #1
 80064c4:	2300      	movne	r3, #0
 80064c6:	b2db      	uxtb	r3, r3
 80064c8:	461a      	mov	r2, r3
 80064ca:	79fb      	ldrb	r3, [r7, #7]
 80064cc:	429a      	cmp	r2, r3
 80064ce:	d08d      	beq.n	80063ec <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80064d0:	2300      	movs	r3, #0
}
 80064d2:	4618      	mov	r0, r3
 80064d4:	3710      	adds	r7, #16
 80064d6:	46bd      	mov	sp, r7
 80064d8:	bd80      	pop	{r7, pc}
	...

080064dc <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80064dc:	b480      	push	{r7}
 80064de:	b083      	sub	sp, #12
 80064e0:	af00      	add	r7, sp, #0
 80064e2:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 80064e4:	687b      	ldr	r3, [r7, #4]
 80064e6:	681b      	ldr	r3, [r3, #0]
 80064e8:	681a      	ldr	r2, [r3, #0]
 80064ea:	687b      	ldr	r3, [r7, #4]
 80064ec:	681b      	ldr	r3, [r3, #0]
 80064ee:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 80064f2:	601a      	str	r2, [r3, #0]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 80064f4:	687b      	ldr	r3, [r7, #4]
 80064f6:	681b      	ldr	r3, [r3, #0]
 80064f8:	6899      	ldr	r1, [r3, #8]
 80064fa:	687b      	ldr	r3, [r7, #4]
 80064fc:	681a      	ldr	r2, [r3, #0]
 80064fe:	4b0f      	ldr	r3, [pc, #60]	; (800653c <UART_EndRxTransfer+0x60>)
 8006500:	400b      	ands	r3, r1
 8006502:	6093      	str	r3, [r2, #8]

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006504:	687b      	ldr	r3, [r7, #4]
 8006506:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8006508:	2b01      	cmp	r3, #1
 800650a:	d107      	bne.n	800651c <UART_EndRxTransfer+0x40>
  {
    CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800650c:	687b      	ldr	r3, [r7, #4]
 800650e:	681b      	ldr	r3, [r3, #0]
 8006510:	681a      	ldr	r2, [r3, #0]
 8006512:	687b      	ldr	r3, [r7, #4]
 8006514:	681b      	ldr	r3, [r3, #0]
 8006516:	f022 0210 	bic.w	r2, r2, #16
 800651a:	601a      	str	r2, [r3, #0]
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800651c:	687b      	ldr	r3, [r7, #4]
 800651e:	2220      	movs	r2, #32
 8006520:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006524:	687b      	ldr	r3, [r7, #4]
 8006526:	2200      	movs	r2, #0
 8006528:	66da      	str	r2, [r3, #108]	; 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 800652a:	687b      	ldr	r3, [r7, #4]
 800652c:	2200      	movs	r2, #0
 800652e:	671a      	str	r2, [r3, #112]	; 0x70
}
 8006530:	bf00      	nop
 8006532:	370c      	adds	r7, #12
 8006534:	46bd      	mov	sp, r7
 8006536:	f85d 7b04 	ldr.w	r7, [sp], #4
 800653a:	4770      	bx	lr
 800653c:	effffffe 	.word	0xeffffffe

08006540 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8006540:	b580      	push	{r7, lr}
 8006542:	b084      	sub	sp, #16
 8006544:	af00      	add	r7, sp, #0
 8006546:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8006548:	687b      	ldr	r3, [r7, #4]
 800654a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800654c:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 800654e:	68fb      	ldr	r3, [r7, #12]
 8006550:	2200      	movs	r2, #0
 8006552:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
  huart->TxXferCount = 0U;
 8006556:	68fb      	ldr	r3, [r7, #12]
 8006558:	2200      	movs	r2, #0
 800655a:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800655e:	68f8      	ldr	r0, [r7, #12]
 8006560:	f7fe ffda 	bl	8005518 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8006564:	bf00      	nop
 8006566:	3710      	adds	r7, #16
 8006568:	46bd      	mov	sp, r7
 800656a:	bd80      	pop	{r7, pc}

0800656c <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800656c:	b580      	push	{r7, lr}
 800656e:	b082      	sub	sp, #8
 8006570:	af00      	add	r7, sp, #0
 8006572:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8006574:	687b      	ldr	r3, [r7, #4]
 8006576:	681b      	ldr	r3, [r3, #0]
 8006578:	681a      	ldr	r2, [r3, #0]
 800657a:	687b      	ldr	r3, [r7, #4]
 800657c:	681b      	ldr	r3, [r3, #0]
 800657e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8006582:	601a      	str	r2, [r3, #0]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8006584:	687b      	ldr	r3, [r7, #4]
 8006586:	2220      	movs	r2, #32
 8006588:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 800658c:	687b      	ldr	r3, [r7, #4]
 800658e:	2200      	movs	r2, #0
 8006590:	675a      	str	r2, [r3, #116]	; 0x74
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8006592:	6878      	ldr	r0, [r7, #4]
 8006594:	f7fe ffb6 	bl	8005504 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8006598:	bf00      	nop
 800659a:	3708      	adds	r7, #8
 800659c:	46bd      	mov	sp, r7
 800659e:	bd80      	pop	{r7, pc}

080065a0 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 80065a0:	b480      	push	{r7}
 80065a2:	b083      	sub	sp, #12
 80065a4:	af00      	add	r7, sp, #0
 80065a6:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 80065a8:	bf00      	nop
 80065aa:	370c      	adds	r7, #12
 80065ac:	46bd      	mov	sp, r7
 80065ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80065b2:	4770      	bx	lr

080065b4 <HAL_UARTEx_RxFifoFullCallback>:
  * @brief  UART RX Fifo full callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_RxFifoFullCallback(UART_HandleTypeDef *huart)
{
 80065b4:	b480      	push	{r7}
 80065b6:	b083      	sub	sp, #12
 80065b8:	af00      	add	r7, sp, #0
 80065ba:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxFifoFullCallback can be implemented in the user file.
   */
}
 80065bc:	bf00      	nop
 80065be:	370c      	adds	r7, #12
 80065c0:	46bd      	mov	sp, r7
 80065c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80065c6:	4770      	bx	lr

080065c8 <HAL_UARTEx_TxFifoEmptyCallback>:
  * @brief  UART TX Fifo empty callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_TxFifoEmptyCallback(UART_HandleTypeDef *huart)
{
 80065c8:	b480      	push	{r7}
 80065ca:	b083      	sub	sp, #12
 80065cc:	af00      	add	r7, sp, #0
 80065ce:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_TxFifoEmptyCallback can be implemented in the user file.
   */
}
 80065d0:	bf00      	nop
 80065d2:	370c      	adds	r7, #12
 80065d4:	46bd      	mov	sp, r7
 80065d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80065da:	4770      	bx	lr

080065dc <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 80065dc:	b480      	push	{r7}
 80065de:	b085      	sub	sp, #20
 80065e0:	af00      	add	r7, sp, #0
 80065e2:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 80065e4:	687b      	ldr	r3, [r7, #4]
 80065e6:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 80065ea:	2b01      	cmp	r3, #1
 80065ec:	d101      	bne.n	80065f2 <HAL_UARTEx_DisableFifoMode+0x16>
 80065ee:	2302      	movs	r3, #2
 80065f0:	e027      	b.n	8006642 <HAL_UARTEx_DisableFifoMode+0x66>
 80065f2:	687b      	ldr	r3, [r7, #4]
 80065f4:	2201      	movs	r2, #1
 80065f6:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 80065fa:	687b      	ldr	r3, [r7, #4]
 80065fc:	2224      	movs	r2, #36	; 0x24
 80065fe:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8006602:	687b      	ldr	r3, [r7, #4]
 8006604:	681b      	ldr	r3, [r3, #0]
 8006606:	681b      	ldr	r3, [r3, #0]
 8006608:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800660a:	687b      	ldr	r3, [r7, #4]
 800660c:	681b      	ldr	r3, [r3, #0]
 800660e:	681a      	ldr	r2, [r3, #0]
 8006610:	687b      	ldr	r3, [r7, #4]
 8006612:	681b      	ldr	r3, [r3, #0]
 8006614:	f022 0201 	bic.w	r2, r2, #1
 8006618:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 800661a:	68fb      	ldr	r3, [r7, #12]
 800661c:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 8006620:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 8006622:	687b      	ldr	r3, [r7, #4]
 8006624:	2200      	movs	r2, #0
 8006626:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8006628:	687b      	ldr	r3, [r7, #4]
 800662a:	681b      	ldr	r3, [r3, #0]
 800662c:	68fa      	ldr	r2, [r7, #12]
 800662e:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8006630:	687b      	ldr	r3, [r7, #4]
 8006632:	2220      	movs	r2, #32
 8006634:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8006638:	687b      	ldr	r3, [r7, #4]
 800663a:	2200      	movs	r2, #0
 800663c:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 8006640:	2300      	movs	r3, #0
}
 8006642:	4618      	mov	r0, r3
 8006644:	3714      	adds	r7, #20
 8006646:	46bd      	mov	sp, r7
 8006648:	f85d 7b04 	ldr.w	r7, [sp], #4
 800664c:	4770      	bx	lr

0800664e <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800664e:	b580      	push	{r7, lr}
 8006650:	b084      	sub	sp, #16
 8006652:	af00      	add	r7, sp, #0
 8006654:	6078      	str	r0, [r7, #4]
 8006656:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8006658:	687b      	ldr	r3, [r7, #4]
 800665a:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 800665e:	2b01      	cmp	r3, #1
 8006660:	d101      	bne.n	8006666 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 8006662:	2302      	movs	r3, #2
 8006664:	e02d      	b.n	80066c2 <HAL_UARTEx_SetTxFifoThreshold+0x74>
 8006666:	687b      	ldr	r3, [r7, #4]
 8006668:	2201      	movs	r2, #1
 800666a:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 800666e:	687b      	ldr	r3, [r7, #4]
 8006670:	2224      	movs	r2, #36	; 0x24
 8006672:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8006676:	687b      	ldr	r3, [r7, #4]
 8006678:	681b      	ldr	r3, [r3, #0]
 800667a:	681b      	ldr	r3, [r3, #0]
 800667c:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800667e:	687b      	ldr	r3, [r7, #4]
 8006680:	681b      	ldr	r3, [r3, #0]
 8006682:	681a      	ldr	r2, [r3, #0]
 8006684:	687b      	ldr	r3, [r7, #4]
 8006686:	681b      	ldr	r3, [r3, #0]
 8006688:	f022 0201 	bic.w	r2, r2, #1
 800668c:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 800668e:	687b      	ldr	r3, [r7, #4]
 8006690:	681b      	ldr	r3, [r3, #0]
 8006692:	689b      	ldr	r3, [r3, #8]
 8006694:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 8006698:	687b      	ldr	r3, [r7, #4]
 800669a:	681b      	ldr	r3, [r3, #0]
 800669c:	683a      	ldr	r2, [r7, #0]
 800669e:	430a      	orrs	r2, r1
 80066a0:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 80066a2:	6878      	ldr	r0, [r7, #4]
 80066a4:	f000 f850 	bl	8006748 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 80066a8:	687b      	ldr	r3, [r7, #4]
 80066aa:	681b      	ldr	r3, [r3, #0]
 80066ac:	68fa      	ldr	r2, [r7, #12]
 80066ae:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 80066b0:	687b      	ldr	r3, [r7, #4]
 80066b2:	2220      	movs	r2, #32
 80066b4:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80066b8:	687b      	ldr	r3, [r7, #4]
 80066ba:	2200      	movs	r2, #0
 80066bc:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 80066c0:	2300      	movs	r3, #0
}
 80066c2:	4618      	mov	r0, r3
 80066c4:	3710      	adds	r7, #16
 80066c6:	46bd      	mov	sp, r7
 80066c8:	bd80      	pop	{r7, pc}

080066ca <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 80066ca:	b580      	push	{r7, lr}
 80066cc:	b084      	sub	sp, #16
 80066ce:	af00      	add	r7, sp, #0
 80066d0:	6078      	str	r0, [r7, #4]
 80066d2:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 80066d4:	687b      	ldr	r3, [r7, #4]
 80066d6:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 80066da:	2b01      	cmp	r3, #1
 80066dc:	d101      	bne.n	80066e2 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 80066de:	2302      	movs	r3, #2
 80066e0:	e02d      	b.n	800673e <HAL_UARTEx_SetRxFifoThreshold+0x74>
 80066e2:	687b      	ldr	r3, [r7, #4]
 80066e4:	2201      	movs	r2, #1
 80066e6:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 80066ea:	687b      	ldr	r3, [r7, #4]
 80066ec:	2224      	movs	r2, #36	; 0x24
 80066ee:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 80066f2:	687b      	ldr	r3, [r7, #4]
 80066f4:	681b      	ldr	r3, [r3, #0]
 80066f6:	681b      	ldr	r3, [r3, #0]
 80066f8:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 80066fa:	687b      	ldr	r3, [r7, #4]
 80066fc:	681b      	ldr	r3, [r3, #0]
 80066fe:	681a      	ldr	r2, [r3, #0]
 8006700:	687b      	ldr	r3, [r7, #4]
 8006702:	681b      	ldr	r3, [r3, #0]
 8006704:	f022 0201 	bic.w	r2, r2, #1
 8006708:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 800670a:	687b      	ldr	r3, [r7, #4]
 800670c:	681b      	ldr	r3, [r3, #0]
 800670e:	689b      	ldr	r3, [r3, #8]
 8006710:	f023 6160 	bic.w	r1, r3, #234881024	; 0xe000000
 8006714:	687b      	ldr	r3, [r7, #4]
 8006716:	681b      	ldr	r3, [r3, #0]
 8006718:	683a      	ldr	r2, [r7, #0]
 800671a:	430a      	orrs	r2, r1
 800671c:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800671e:	6878      	ldr	r0, [r7, #4]
 8006720:	f000 f812 	bl	8006748 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8006724:	687b      	ldr	r3, [r7, #4]
 8006726:	681b      	ldr	r3, [r3, #0]
 8006728:	68fa      	ldr	r2, [r7, #12]
 800672a:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800672c:	687b      	ldr	r3, [r7, #4]
 800672e:	2220      	movs	r2, #32
 8006730:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8006734:	687b      	ldr	r3, [r7, #4]
 8006736:	2200      	movs	r2, #0
 8006738:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 800673c:	2300      	movs	r3, #0
}
 800673e:	4618      	mov	r0, r3
 8006740:	3710      	adds	r7, #16
 8006742:	46bd      	mov	sp, r7
 8006744:	bd80      	pop	{r7, pc}
	...

08006748 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 8006748:	b480      	push	{r7}
 800674a:	b085      	sub	sp, #20
 800674c:	af00      	add	r7, sp, #0
 800674e:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 8006750:	687b      	ldr	r3, [r7, #4]
 8006752:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8006754:	2b00      	cmp	r3, #0
 8006756:	d108      	bne.n	800676a <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 8006758:	687b      	ldr	r3, [r7, #4]
 800675a:	2201      	movs	r2, #1
 800675c:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
 8006760:	687b      	ldr	r3, [r7, #4]
 8006762:	2201      	movs	r2, #1
 8006764:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 8006768:	e031      	b.n	80067ce <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 800676a:	2310      	movs	r3, #16
 800676c:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 800676e:	2310      	movs	r3, #16
 8006770:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 8006772:	687b      	ldr	r3, [r7, #4]
 8006774:	681b      	ldr	r3, [r3, #0]
 8006776:	689b      	ldr	r3, [r3, #8]
 8006778:	0e5b      	lsrs	r3, r3, #25
 800677a:	b2db      	uxtb	r3, r3
 800677c:	f003 0307 	and.w	r3, r3, #7
 8006780:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 8006782:	687b      	ldr	r3, [r7, #4]
 8006784:	681b      	ldr	r3, [r3, #0]
 8006786:	689b      	ldr	r3, [r3, #8]
 8006788:	0f5b      	lsrs	r3, r3, #29
 800678a:	b2db      	uxtb	r3, r3
 800678c:	f003 0307 	and.w	r3, r3, #7
 8006790:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8006792:	7bbb      	ldrb	r3, [r7, #14]
 8006794:	7b3a      	ldrb	r2, [r7, #12]
 8006796:	4911      	ldr	r1, [pc, #68]	; (80067dc <UARTEx_SetNbDataToProcess+0x94>)
 8006798:	5c8a      	ldrb	r2, [r1, r2]
 800679a:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 800679e:	7b3a      	ldrb	r2, [r7, #12]
 80067a0:	490f      	ldr	r1, [pc, #60]	; (80067e0 <UARTEx_SetNbDataToProcess+0x98>)
 80067a2:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 80067a4:	fb93 f3f2 	sdiv	r3, r3, r2
 80067a8:	b29a      	uxth	r2, r3
 80067aa:	687b      	ldr	r3, [r7, #4]
 80067ac:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 80067b0:	7bfb      	ldrb	r3, [r7, #15]
 80067b2:	7b7a      	ldrb	r2, [r7, #13]
 80067b4:	4909      	ldr	r1, [pc, #36]	; (80067dc <UARTEx_SetNbDataToProcess+0x94>)
 80067b6:	5c8a      	ldrb	r2, [r1, r2]
 80067b8:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 80067bc:	7b7a      	ldrb	r2, [r7, #13]
 80067be:	4908      	ldr	r1, [pc, #32]	; (80067e0 <UARTEx_SetNbDataToProcess+0x98>)
 80067c0:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 80067c2:	fb93 f3f2 	sdiv	r3, r3, r2
 80067c6:	b29a      	uxth	r2, r3
 80067c8:	687b      	ldr	r3, [r7, #4]
 80067ca:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
}
 80067ce:	bf00      	nop
 80067d0:	3714      	adds	r7, #20
 80067d2:	46bd      	mov	sp, r7
 80067d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80067d8:	4770      	bx	lr
 80067da:	bf00      	nop
 80067dc:	08007e14 	.word	0x08007e14
 80067e0:	08007e1c 	.word	0x08007e1c

080067e4 <FMC_NORSRAM_Init>:
  * @param  Init Pointer to NORSRAM Initialization structure
  * @retval HAL status
  */
HAL_StatusTypeDef  FMC_NORSRAM_Init(FMC_NORSRAM_TypeDef *Device,
                                    FMC_NORSRAM_InitTypeDef *Init)
{
 80067e4:	b480      	push	{r7}
 80067e6:	b087      	sub	sp, #28
 80067e8:	af00      	add	r7, sp, #0
 80067ea:	6078      	str	r0, [r7, #4]
 80067ec:	6039      	str	r1, [r7, #0]
  assert_param(IS_FMC_CONTINOUS_CLOCK(Init->ContinuousClock));
  assert_param(IS_FMC_WRITE_FIFO(Init->WriteFifo));
  assert_param(IS_FMC_PAGESIZE(Init->PageSize));

  /* Disable NORSRAM Device */
  __FMC_NORSRAM_DISABLE(Device, Init->NSBank);
 80067ee:	683b      	ldr	r3, [r7, #0]
 80067f0:	681a      	ldr	r2, [r3, #0]
 80067f2:	687b      	ldr	r3, [r7, #4]
 80067f4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80067f8:	683a      	ldr	r2, [r7, #0]
 80067fa:	6812      	ldr	r2, [r2, #0]
 80067fc:	f023 0101 	bic.w	r1, r3, #1
 8006800:	687b      	ldr	r3, [r7, #4]
 8006802:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

  /* Set NORSRAM device control parameters */
  if (Init->MemoryType == FMC_MEMORY_TYPE_NOR)
 8006806:	683b      	ldr	r3, [r7, #0]
 8006808:	689b      	ldr	r3, [r3, #8]
 800680a:	2b08      	cmp	r3, #8
 800680c:	d102      	bne.n	8006814 <FMC_NORSRAM_Init+0x30>
  {
    flashaccess = FMC_NORSRAM_FLASH_ACCESS_ENABLE;
 800680e:	2340      	movs	r3, #64	; 0x40
 8006810:	617b      	str	r3, [r7, #20]
 8006812:	e001      	b.n	8006818 <FMC_NORSRAM_Init+0x34>
  }
  else
  {
    flashaccess = FMC_NORSRAM_FLASH_ACCESS_DISABLE;
 8006814:	2300      	movs	r3, #0
 8006816:	617b      	str	r3, [r7, #20]
  }

  btcr_reg = (flashaccess                   | \
              Init->DataAddressMux          | \
 8006818:	683b      	ldr	r3, [r7, #0]
 800681a:	685a      	ldr	r2, [r3, #4]
  btcr_reg = (flashaccess                   | \
 800681c:	697b      	ldr	r3, [r7, #20]
 800681e:	431a      	orrs	r2, r3
              Init->MemoryType              | \
 8006820:	683b      	ldr	r3, [r7, #0]
 8006822:	689b      	ldr	r3, [r3, #8]
              Init->DataAddressMux          | \
 8006824:	431a      	orrs	r2, r3
              Init->MemoryDataWidth         | \
 8006826:	683b      	ldr	r3, [r7, #0]
 8006828:	68db      	ldr	r3, [r3, #12]
              Init->MemoryType              | \
 800682a:	431a      	orrs	r2, r3
              Init->BurstAccessMode         | \
 800682c:	683b      	ldr	r3, [r7, #0]
 800682e:	691b      	ldr	r3, [r3, #16]
              Init->MemoryDataWidth         | \
 8006830:	431a      	orrs	r2, r3
              Init->WaitSignalPolarity      | \
 8006832:	683b      	ldr	r3, [r7, #0]
 8006834:	695b      	ldr	r3, [r3, #20]
              Init->BurstAccessMode         | \
 8006836:	431a      	orrs	r2, r3
              Init->WaitSignalActive        | \
 8006838:	683b      	ldr	r3, [r7, #0]
 800683a:	699b      	ldr	r3, [r3, #24]
              Init->WaitSignalPolarity      | \
 800683c:	431a      	orrs	r2, r3
              Init->WriteOperation          | \
 800683e:	683b      	ldr	r3, [r7, #0]
 8006840:	69db      	ldr	r3, [r3, #28]
              Init->WaitSignalActive        | \
 8006842:	431a      	orrs	r2, r3
              Init->WaitSignal              | \
 8006844:	683b      	ldr	r3, [r7, #0]
 8006846:	6a1b      	ldr	r3, [r3, #32]
              Init->WriteOperation          | \
 8006848:	431a      	orrs	r2, r3
              Init->ExtendedMode            | \
 800684a:	683b      	ldr	r3, [r7, #0]
 800684c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
              Init->WaitSignal              | \
 800684e:	431a      	orrs	r2, r3
              Init->AsynchronousWait        | \
 8006850:	683b      	ldr	r3, [r7, #0]
 8006852:	6a9b      	ldr	r3, [r3, #40]	; 0x28
              Init->ExtendedMode            | \
 8006854:	431a      	orrs	r2, r3
              Init->WriteBurst);
 8006856:	683b      	ldr	r3, [r7, #0]
 8006858:	6adb      	ldr	r3, [r3, #44]	; 0x2c
  btcr_reg = (flashaccess                   | \
 800685a:	4313      	orrs	r3, r2
 800685c:	613b      	str	r3, [r7, #16]

  btcr_reg |= Init->ContinuousClock;
 800685e:	683b      	ldr	r3, [r7, #0]
 8006860:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006862:	693a      	ldr	r2, [r7, #16]
 8006864:	4313      	orrs	r3, r2
 8006866:	613b      	str	r3, [r7, #16]
  btcr_reg |= Init->WriteFifo;
 8006868:	683b      	ldr	r3, [r7, #0]
 800686a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800686c:	693a      	ldr	r2, [r7, #16]
 800686e:	4313      	orrs	r3, r2
 8006870:	613b      	str	r3, [r7, #16]
  btcr_reg |= Init->PageSize;
 8006872:	683b      	ldr	r3, [r7, #0]
 8006874:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006876:	693a      	ldr	r2, [r7, #16]
 8006878:	4313      	orrs	r3, r2
 800687a:	613b      	str	r3, [r7, #16]

  mask = (FMC_BCRx_MBKEN                |
 800687c:	4b20      	ldr	r3, [pc, #128]	; (8006900 <FMC_NORSRAM_Init+0x11c>)
 800687e:	60fb      	str	r3, [r7, #12]
          FMC_BCRx_WAITEN               |
          FMC_BCRx_EXTMOD               |
          FMC_BCRx_ASYNCWAIT            |
          FMC_BCRx_CBURSTRW);

  mask |= FMC_BCR1_CCLKEN;
 8006880:	68fb      	ldr	r3, [r7, #12]
 8006882:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8006886:	60fb      	str	r3, [r7, #12]
  mask |= FMC_BCR1_WFDIS;
 8006888:	68fb      	ldr	r3, [r7, #12]
 800688a:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800688e:	60fb      	str	r3, [r7, #12]
  mask |= FMC_BCRx_CPSIZE;
 8006890:	68fb      	ldr	r3, [r7, #12]
 8006892:	f443 23e0 	orr.w	r3, r3, #458752	; 0x70000
 8006896:	60fb      	str	r3, [r7, #12]

  MODIFY_REG(Device->BTCR[Init->NSBank], mask, btcr_reg);
 8006898:	683b      	ldr	r3, [r7, #0]
 800689a:	681a      	ldr	r2, [r3, #0]
 800689c:	687b      	ldr	r3, [r7, #4]
 800689e:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 80068a2:	68fb      	ldr	r3, [r7, #12]
 80068a4:	43db      	mvns	r3, r3
 80068a6:	ea02 0103 	and.w	r1, r2, r3
 80068aa:	683b      	ldr	r3, [r7, #0]
 80068ac:	681a      	ldr	r2, [r3, #0]
 80068ae:	693b      	ldr	r3, [r7, #16]
 80068b0:	4319      	orrs	r1, r3
 80068b2:	687b      	ldr	r3, [r7, #4]
 80068b4:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

  /* Configure synchronous mode when Continuous clock is enabled for bank2..4 */
  if ((Init->ContinuousClock == FMC_CONTINUOUS_CLOCK_SYNC_ASYNC) && (Init->NSBank != FMC_NORSRAM_BANK1))
 80068b8:	683b      	ldr	r3, [r7, #0]
 80068ba:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80068bc:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80068c0:	d10c      	bne.n	80068dc <FMC_NORSRAM_Init+0xf8>
 80068c2:	683b      	ldr	r3, [r7, #0]
 80068c4:	681b      	ldr	r3, [r3, #0]
 80068c6:	2b00      	cmp	r3, #0
 80068c8:	d008      	beq.n	80068dc <FMC_NORSRAM_Init+0xf8>
  {
    MODIFY_REG(Device->BTCR[FMC_NORSRAM_BANK1], FMC_BCR1_CCLKEN, Init->ContinuousClock);
 80068ca:	687b      	ldr	r3, [r7, #4]
 80068cc:	681b      	ldr	r3, [r3, #0]
 80068ce:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 80068d2:	683b      	ldr	r3, [r7, #0]
 80068d4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80068d6:	431a      	orrs	r2, r3
 80068d8:	687b      	ldr	r3, [r7, #4]
 80068da:	601a      	str	r2, [r3, #0]
  }

  if (Init->NSBank != FMC_NORSRAM_BANK1)
 80068dc:	683b      	ldr	r3, [r7, #0]
 80068de:	681b      	ldr	r3, [r3, #0]
 80068e0:	2b00      	cmp	r3, #0
 80068e2:	d006      	beq.n	80068f2 <FMC_NORSRAM_Init+0x10e>
  {
    /* Configure Write FIFO mode when Write Fifo is enabled for bank2..4 */
    SET_BIT(Device->BTCR[FMC_NORSRAM_BANK1], (uint32_t)(Init->WriteFifo));
 80068e4:	687b      	ldr	r3, [r7, #4]
 80068e6:	681a      	ldr	r2, [r3, #0]
 80068e8:	683b      	ldr	r3, [r7, #0]
 80068ea:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80068ec:	431a      	orrs	r2, r3
 80068ee:	687b      	ldr	r3, [r7, #4]
 80068f0:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 80068f2:	2300      	movs	r3, #0
}
 80068f4:	4618      	mov	r0, r3
 80068f6:	371c      	adds	r7, #28
 80068f8:	46bd      	mov	sp, r7
 80068fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80068fe:	4770      	bx	lr
 8006900:	0008fb7f 	.word	0x0008fb7f

08006904 <FMC_NORSRAM_Timing_Init>:
  * @param  Bank NORSRAM bank number
  * @retval HAL status
  */
HAL_StatusTypeDef FMC_NORSRAM_Timing_Init(FMC_NORSRAM_TypeDef *Device,
                                          FMC_NORSRAM_TimingTypeDef *Timing, uint32_t Bank)
{
 8006904:	b480      	push	{r7}
 8006906:	b087      	sub	sp, #28
 8006908:	af00      	add	r7, sp, #0
 800690a:	60f8      	str	r0, [r7, #12]
 800690c:	60b9      	str	r1, [r7, #8]
 800690e:	607a      	str	r2, [r7, #4]
  assert_param(IS_FMC_DATA_LATENCY(Timing->DataLatency));
  assert_param(IS_FMC_ACCESS_MODE(Timing->AccessMode));
  assert_param(IS_FMC_NORSRAM_BANK(Bank));

  /* Set FMC_NORSRAM device timing parameters */
  MODIFY_REG(Device->BTCR[Bank + 1U], BTR_CLEAR_MASK, (Timing->AddressSetupTime                                  |
 8006910:	687b      	ldr	r3, [r7, #4]
 8006912:	1c5a      	adds	r2, r3, #1
 8006914:	68fb      	ldr	r3, [r7, #12]
 8006916:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800691a:	f003 4140 	and.w	r1, r3, #3221225472	; 0xc0000000
 800691e:	68bb      	ldr	r3, [r7, #8]
 8006920:	681a      	ldr	r2, [r3, #0]
 8006922:	68bb      	ldr	r3, [r7, #8]
 8006924:	685b      	ldr	r3, [r3, #4]
 8006926:	011b      	lsls	r3, r3, #4
 8006928:	431a      	orrs	r2, r3
 800692a:	68bb      	ldr	r3, [r7, #8]
 800692c:	689b      	ldr	r3, [r3, #8]
 800692e:	021b      	lsls	r3, r3, #8
 8006930:	431a      	orrs	r2, r3
 8006932:	68bb      	ldr	r3, [r7, #8]
 8006934:	68db      	ldr	r3, [r3, #12]
 8006936:	041b      	lsls	r3, r3, #16
 8006938:	431a      	orrs	r2, r3
 800693a:	68bb      	ldr	r3, [r7, #8]
 800693c:	691b      	ldr	r3, [r3, #16]
 800693e:	3b01      	subs	r3, #1
 8006940:	051b      	lsls	r3, r3, #20
 8006942:	431a      	orrs	r2, r3
 8006944:	68bb      	ldr	r3, [r7, #8]
 8006946:	695b      	ldr	r3, [r3, #20]
 8006948:	3b02      	subs	r3, #2
 800694a:	061b      	lsls	r3, r3, #24
 800694c:	431a      	orrs	r2, r3
 800694e:	68bb      	ldr	r3, [r7, #8]
 8006950:	699b      	ldr	r3, [r3, #24]
 8006952:	4313      	orrs	r3, r2
 8006954:	687a      	ldr	r2, [r7, #4]
 8006956:	3201      	adds	r2, #1
 8006958:	4319      	orrs	r1, r3
 800695a:	68fb      	ldr	r3, [r7, #12]
 800695c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
                                                       (((Timing->CLKDivision) - 1U)     << FMC_BTRx_CLKDIV_Pos)  |
                                                       (((Timing->DataLatency) - 2U)     << FMC_BTRx_DATLAT_Pos)  |
                                                       (Timing->AccessMode)));

  /* Configure Clock division value (in NORSRAM bank 1) when continuous clock is enabled */
  if (HAL_IS_BIT_SET(Device->BTCR[FMC_NORSRAM_BANK1], FMC_BCR1_CCLKEN))
 8006960:	68fb      	ldr	r3, [r7, #12]
 8006962:	681b      	ldr	r3, [r3, #0]
 8006964:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8006968:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800696c:	d113      	bne.n	8006996 <FMC_NORSRAM_Timing_Init+0x92>
  {
    tmpr = (uint32_t)(Device->BTCR[FMC_NORSRAM_BANK1 + 1U] & ~((0x0FU) << FMC_BTRx_CLKDIV_Pos));
 800696e:	68fb      	ldr	r3, [r7, #12]
 8006970:	685b      	ldr	r3, [r3, #4]
 8006972:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 8006976:	617b      	str	r3, [r7, #20]
    tmpr |= (uint32_t)(((Timing->CLKDivision) - 1U) << FMC_BTRx_CLKDIV_Pos);
 8006978:	68bb      	ldr	r3, [r7, #8]
 800697a:	691b      	ldr	r3, [r3, #16]
 800697c:	3b01      	subs	r3, #1
 800697e:	051b      	lsls	r3, r3, #20
 8006980:	697a      	ldr	r2, [r7, #20]
 8006982:	4313      	orrs	r3, r2
 8006984:	617b      	str	r3, [r7, #20]
    MODIFY_REG(Device->BTCR[FMC_NORSRAM_BANK1 + 1U], FMC_BTRx_CLKDIV, tmpr);
 8006986:	68fb      	ldr	r3, [r7, #12]
 8006988:	685b      	ldr	r3, [r3, #4]
 800698a:	f423 0270 	bic.w	r2, r3, #15728640	; 0xf00000
 800698e:	697b      	ldr	r3, [r7, #20]
 8006990:	431a      	orrs	r2, r3
 8006992:	68fb      	ldr	r3, [r7, #12]
 8006994:	605a      	str	r2, [r3, #4]
  }

  return HAL_OK;
 8006996:	2300      	movs	r3, #0
}
 8006998:	4618      	mov	r0, r3
 800699a:	371c      	adds	r7, #28
 800699c:	46bd      	mov	sp, r7
 800699e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80069a2:	4770      	bx	lr

080069a4 <FMC_NORSRAM_Extended_Timing_Init>:
  * @retval HAL status
  */
HAL_StatusTypeDef FMC_NORSRAM_Extended_Timing_Init(FMC_NORSRAM_EXTENDED_TypeDef *Device,
                                                   FMC_NORSRAM_TimingTypeDef *Timing, uint32_t Bank,
                                                   uint32_t ExtendedMode)
{
 80069a4:	b480      	push	{r7}
 80069a6:	b085      	sub	sp, #20
 80069a8:	af00      	add	r7, sp, #0
 80069aa:	60f8      	str	r0, [r7, #12]
 80069ac:	60b9      	str	r1, [r7, #8]
 80069ae:	607a      	str	r2, [r7, #4]
 80069b0:	603b      	str	r3, [r7, #0]
  /* Check the parameters */
  assert_param(IS_FMC_EXTENDED_MODE(ExtendedMode));

  /* Set NORSRAM device timing register for write configuration, if extended mode is used */
  if (ExtendedMode == FMC_EXTENDED_MODE_ENABLE)
 80069b2:	683b      	ldr	r3, [r7, #0]
 80069b4:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80069b8:	d11d      	bne.n	80069f6 <FMC_NORSRAM_Extended_Timing_Init+0x52>
    assert_param(IS_FMC_TURNAROUND_TIME(Timing->BusTurnAroundDuration));
    assert_param(IS_FMC_ACCESS_MODE(Timing->AccessMode));
    assert_param(IS_FMC_NORSRAM_BANK(Bank));

    /* Set NORSRAM device timing register for write configuration, if extended mode is used */
    MODIFY_REG(Device->BWTR[Bank], BWTR_CLEAR_MASK, (Timing->AddressSetupTime                                    |
 80069ba:	68fb      	ldr	r3, [r7, #12]
 80069bc:	687a      	ldr	r2, [r7, #4]
 80069be:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 80069c2:	4b13      	ldr	r3, [pc, #76]	; (8006a10 <FMC_NORSRAM_Extended_Timing_Init+0x6c>)
 80069c4:	4013      	ands	r3, r2
 80069c6:	68ba      	ldr	r2, [r7, #8]
 80069c8:	6811      	ldr	r1, [r2, #0]
 80069ca:	68ba      	ldr	r2, [r7, #8]
 80069cc:	6852      	ldr	r2, [r2, #4]
 80069ce:	0112      	lsls	r2, r2, #4
 80069d0:	4311      	orrs	r1, r2
 80069d2:	68ba      	ldr	r2, [r7, #8]
 80069d4:	6892      	ldr	r2, [r2, #8]
 80069d6:	0212      	lsls	r2, r2, #8
 80069d8:	4311      	orrs	r1, r2
 80069da:	68ba      	ldr	r2, [r7, #8]
 80069dc:	6992      	ldr	r2, [r2, #24]
 80069de:	4311      	orrs	r1, r2
 80069e0:	68ba      	ldr	r2, [r7, #8]
 80069e2:	68d2      	ldr	r2, [r2, #12]
 80069e4:	0412      	lsls	r2, r2, #16
 80069e6:	430a      	orrs	r2, r1
 80069e8:	ea43 0102 	orr.w	r1, r3, r2
 80069ec:	68fb      	ldr	r3, [r7, #12]
 80069ee:	687a      	ldr	r2, [r7, #4]
 80069f0:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
 80069f4:	e005      	b.n	8006a02 <FMC_NORSRAM_Extended_Timing_Init+0x5e>
                                                     Timing->AccessMode                                          |
                                                     ((Timing->BusTurnAroundDuration)  << FMC_BWTRx_BUSTURN_Pos)));
  }
  else
  {
    Device->BWTR[Bank] = 0x0FFFFFFFU;
 80069f6:	68fb      	ldr	r3, [r7, #12]
 80069f8:	687a      	ldr	r2, [r7, #4]
 80069fa:	f06f 4170 	mvn.w	r1, #4026531840	; 0xf0000000
 80069fe:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  }

  return HAL_OK;
 8006a02:	2300      	movs	r3, #0
}
 8006a04:	4618      	mov	r0, r3
 8006a06:	3714      	adds	r7, #20
 8006a08:	46bd      	mov	sp, r7
 8006a0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a0e:	4770      	bx	lr
 8006a10:	cff00000 	.word	0xcff00000

08006a14 <WIZCHIP_READ>:
   WIZCHIP.CS._d_e_s_e_l_e_c_t_();
   WIZCHIP_CRITICAL_EXIT();
}

uint8_t  WIZCHIP_READ(uint32_t AddrSel)
{
 8006a14:	b590      	push	{r4, r7, lr}
 8006a16:	b085      	sub	sp, #20
 8006a18:	af00      	add	r7, sp, #0
 8006a1a:	6078      	str	r0, [r7, #4]
   uint8_t ret;
   uint8_t tAD[3];
   tAD[0] = (uint8_t)((AddrSel & 0x00FF0000) >> 16);
 8006a1c:	687b      	ldr	r3, [r7, #4]
 8006a1e:	0c1b      	lsrs	r3, r3, #16
 8006a20:	b2db      	uxtb	r3, r3
 8006a22:	733b      	strb	r3, [r7, #12]
   tAD[1] = (uint8_t)((AddrSel & 0x0000FF00) >> 8);
 8006a24:	687b      	ldr	r3, [r7, #4]
 8006a26:	0a1b      	lsrs	r3, r3, #8
 8006a28:	b2db      	uxtb	r3, r3
 8006a2a:	737b      	strb	r3, [r7, #13]
   tAD[2] = (uint8_t)(AddrSel & 0x000000ff);
 8006a2c:	687b      	ldr	r3, [r7, #4]
 8006a2e:	b2db      	uxtb	r3, r3
 8006a30:	73bb      	strb	r3, [r7, #14]

   WIZCHIP_CRITICAL_ENTER();
 8006a32:	4b10      	ldr	r3, [pc, #64]	; (8006a74 <WIZCHIP_READ+0x60>)
 8006a34:	689b      	ldr	r3, [r3, #8]
 8006a36:	4798      	blx	r3
   WIZCHIP.CS._s_e_l_e_c_t_();
 8006a38:	4b0e      	ldr	r3, [pc, #56]	; (8006a74 <WIZCHIP_READ+0x60>)
 8006a3a:	691b      	ldr	r3, [r3, #16]
 8006a3c:	4798      	blx	r3
#if( (_WIZCHIP_IO_MODE_ ==  _WIZCHIP_IO_MODE_SPI_VDM_))
   tAD[2] |= (_W6100_SPI_READ_ | _W6100_SPI_OP_);
   WIZCHIP.IF.SPI._write_byte_buf(tAD, 3);
   ret = WIZCHIP.IF.SPI._read_byte();
#elif ( (_WIZCHIP_IO_MODE_ == _WIZCHIP_IO_MODE_BUS_INDIR_) )
   WIZCHIP.IF.BUS._write_data_buf(IDM_AR0,tAD,3,1);
 8006a3e:	4b0d      	ldr	r3, [pc, #52]	; (8006a74 <WIZCHIP_READ+0x60>)
 8006a40:	6a5c      	ldr	r4, [r3, #36]	; 0x24
 8006a42:	f107 010c 	add.w	r1, r7, #12
 8006a46:	2301      	movs	r3, #1
 8006a48:	2203      	movs	r2, #3
 8006a4a:	f04f 40c0 	mov.w	r0, #1610612736	; 0x60000000
 8006a4e:	47a0      	blx	r4
   ret = WIZCHIP.IF.BUS._read_data(IDM_DR);
 8006a50:	4b08      	ldr	r3, [pc, #32]	; (8006a74 <WIZCHIP_READ+0x60>)
 8006a52:	699b      	ldr	r3, [r3, #24]
 8006a54:	4808      	ldr	r0, [pc, #32]	; (8006a78 <WIZCHIP_READ+0x64>)
 8006a56:	4798      	blx	r3
 8006a58:	4603      	mov	r3, r0
 8006a5a:	73fb      	strb	r3, [r7, #15]
#else
   #error "Unknown _WIZCHIP_IO_MODE_ in W6100. !!!"   
#endif

   WIZCHIP.CS._d_e_s_e_l_e_c_t_();
 8006a5c:	4b05      	ldr	r3, [pc, #20]	; (8006a74 <WIZCHIP_READ+0x60>)
 8006a5e:	695b      	ldr	r3, [r3, #20]
 8006a60:	4798      	blx	r3
   WIZCHIP_CRITICAL_EXIT();
 8006a62:	4b04      	ldr	r3, [pc, #16]	; (8006a74 <WIZCHIP_READ+0x60>)
 8006a64:	68db      	ldr	r3, [r3, #12]
 8006a66:	4798      	blx	r3
   return ret;
 8006a68:	7bfb      	ldrb	r3, [r7, #15]
}
 8006a6a:	4618      	mov	r0, r3
 8006a6c:	3714      	adds	r7, #20
 8006a6e:	46bd      	mov	sp, r7
 8006a70:	bd90      	pop	{r4, r7, pc}
 8006a72:	bf00      	nop
 8006a74:	20000010 	.word	0x20000010
 8006a78:	60000003 	.word	0x60000003

08006a7c <wizchip_cris_enter>:
 * @details @ref wizchip_cris_enter() provides the default protection while @ref _WIZCHIP_ is accessed. \n
 *          but it is null function.
 * @note It can be overwritten with your function or register your functions by calling @ref reg_wizchip_cris_cbfunc().
 * @sa wizchip_cris_exit()
 */
void wizchip_cris_enter(void)   {}
 8006a7c:	b480      	push	{r7}
 8006a7e:	af00      	add	r7, sp, #0
 8006a80:	bf00      	nop
 8006a82:	46bd      	mov	sp, r7
 8006a84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a88:	4770      	bx	lr

08006a8a <wizchip_cris_exit>:
 * @details @ref wizchip_cris_exit provides the default protection while @ref _WIZCHIP_ is accessed\n
 *          but it is null function.
 * @note It can be overwritten with your function or register your functions by calling @ref reg_wizchip_cris_cbfunc().
 * @sa wizchip_cris_enter()
 */
void wizchip_cris_exit(void)   {}
 8006a8a:	b480      	push	{r7}
 8006a8c:	af00      	add	r7, sp, #0
 8006a8e:	bf00      	nop
 8006a90:	46bd      	mov	sp, r7
 8006a92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a96:	4770      	bx	lr

08006a98 <wizchip_cs_select>:
 * @details @ref wizchip_cs_select() provides the default selection @ref _WIZCHIP_,\n
 *          but it is null function.
 * @note It can be overwritten with your function or register your functions by calling @ref reg_wizchip_cs_cbfunc().
 * @sa wizchip_cs_deselect()
 */
void wizchip_cs_select(void)   {}
 8006a98:	b480      	push	{r7}
 8006a9a:	af00      	add	r7, sp, #0
 8006a9c:	bf00      	nop
 8006a9e:	46bd      	mov	sp, r7
 8006aa0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006aa4:	4770      	bx	lr

08006aa6 <wizchip_cs_deselect>:
 * @details @ref wizchip_cs_deselect() provides the default de-selection @ref _WIZCHIP_, \n
 *          but it is null function.
 * @note It can be overwritten with your function or register your functions by calling @ref reg_wizchip_cs_cbfunc().
 * @sa wizchip_cs_select()
 */
void wizchip_cs_deselect(void)   {}
 8006aa6:	b480      	push	{r7}
 8006aa8:	af00      	add	r7, sp, #0
 8006aaa:	bf00      	nop
 8006aac:	46bd      	mov	sp, r7
 8006aae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ab2:	4770      	bx	lr

08006ab4 <wizchip_bus_read>:
 * @param AddrSel It specifies the address of register to be read.
 * @return @ref iodata_t  
 * @note It can be overwritten with your function or register your functions by calling @ref reg_wizchip_bus_cbfunc().
 * @sa wizchip_bus_write()
 */
iodata_t wizchip_bus_read(uint32_t AddrSel) { return * ((volatile iodata_t *)((ptrdiff_t) AddrSel)); }
 8006ab4:	b480      	push	{r7}
 8006ab6:	b083      	sub	sp, #12
 8006ab8:	af00      	add	r7, sp, #0
 8006aba:	6078      	str	r0, [r7, #4]
 8006abc:	687b      	ldr	r3, [r7, #4]
 8006abe:	781b      	ldrb	r3, [r3, #0]
 8006ac0:	b2db      	uxtb	r3, r3
 8006ac2:	4618      	mov	r0, r3
 8006ac4:	370c      	adds	r7, #12
 8006ac6:	46bd      	mov	sp, r7
 8006ac8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006acc:	4770      	bx	lr

08006ace <wizchip_bus_write>:
 * @param wb @ref iodata_t data to be written
 * @return void
 * @note It can be overwritten with your function or register your functions by calling @ref reg_wizchip_bus_cbfunc().
 * @sa wizchip_bus_read()
 */
void wizchip_bus_write(uint32_t AddrSel, iodata_t wb)  { *((volatile iodata_t*)((ptrdiff_t)AddrSel)) = wb; }
 8006ace:	b480      	push	{r7}
 8006ad0:	b083      	sub	sp, #12
 8006ad2:	af00      	add	r7, sp, #0
 8006ad4:	6078      	str	r0, [r7, #4]
 8006ad6:	460b      	mov	r3, r1
 8006ad8:	70fb      	strb	r3, [r7, #3]
 8006ada:	687b      	ldr	r3, [r7, #4]
 8006adc:	78fa      	ldrb	r2, [r7, #3]
 8006ade:	701a      	strb	r2, [r3, #0]
 8006ae0:	bf00      	nop
 8006ae2:	370c      	adds	r7, #12
 8006ae4:	46bd      	mov	sp, r7
 8006ae6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006aea:	4770      	bx	lr

08006aec <wizchip_bus_read_buf>:
 * @return void
 * @note It can be overwritten with your function or register your functions by calling @ref reg_wizchip_bus_cbfunc().
 * @sa wizchip_bus_write_buf()
 */
void wizchip_bus_read_buf(uint32_t AddrSel, iodata_t* buf, datasize_t len, uint8_t addrinc)
{ 
 8006aec:	b590      	push	{r4, r7, lr}
 8006aee:	b087      	sub	sp, #28
 8006af0:	af00      	add	r7, sp, #0
 8006af2:	60f8      	str	r0, [r7, #12]
 8006af4:	60b9      	str	r1, [r7, #8]
 8006af6:	4611      	mov	r1, r2
 8006af8:	461a      	mov	r2, r3
 8006afa:	460b      	mov	r3, r1
 8006afc:	80fb      	strh	r3, [r7, #6]
 8006afe:	4613      	mov	r3, r2
 8006b00:	717b      	strb	r3, [r7, #5]
   datasize_t i;
   if(addrinc) addrinc = sizeof(iodata_t);
 8006b02:	797b      	ldrb	r3, [r7, #5]
 8006b04:	2b00      	cmp	r3, #0
 8006b06:	d001      	beq.n	8006b0c <wizchip_bus_read_buf+0x20>
 8006b08:	2301      	movs	r3, #1
 8006b0a:	717b      	strb	r3, [r7, #5]
   for ( i = 0; i < len; i++)
 8006b0c:	2300      	movs	r3, #0
 8006b0e:	82fb      	strh	r3, [r7, #22]
 8006b10:	e012      	b.n	8006b38 <wizchip_bus_read_buf+0x4c>
   {
      *buf++ = WIZCHIP.IF.BUS._read_data(AddrSel);
 8006b12:	4b0f      	ldr	r3, [pc, #60]	; (8006b50 <wizchip_bus_read_buf+0x64>)
 8006b14:	699b      	ldr	r3, [r3, #24]
 8006b16:	68bc      	ldr	r4, [r7, #8]
 8006b18:	1c62      	adds	r2, r4, #1
 8006b1a:	60ba      	str	r2, [r7, #8]
 8006b1c:	68f8      	ldr	r0, [r7, #12]
 8006b1e:	4798      	blx	r3
 8006b20:	4603      	mov	r3, r0
 8006b22:	7023      	strb	r3, [r4, #0]
      AddrSel += (uint32_t) addrinc;
 8006b24:	797b      	ldrb	r3, [r7, #5]
 8006b26:	68fa      	ldr	r2, [r7, #12]
 8006b28:	4413      	add	r3, r2
 8006b2a:	60fb      	str	r3, [r7, #12]
   for ( i = 0; i < len; i++)
 8006b2c:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 8006b30:	b29b      	uxth	r3, r3
 8006b32:	3301      	adds	r3, #1
 8006b34:	b29b      	uxth	r3, r3
 8006b36:	82fb      	strh	r3, [r7, #22]
 8006b38:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 8006b3c:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8006b40:	429a      	cmp	r2, r3
 8006b42:	dbe6      	blt.n	8006b12 <wizchip_bus_read_buf+0x26>
   }
}
 8006b44:	bf00      	nop
 8006b46:	bf00      	nop
 8006b48:	371c      	adds	r7, #28
 8006b4a:	46bd      	mov	sp, r7
 8006b4c:	bd90      	pop	{r4, r7, pc}
 8006b4e:	bf00      	nop
 8006b50:	20000010 	.word	0x20000010

08006b54 <wizchip_bus_write_buf>:
 * @return void
 * @note It can be overwritten with your function or register your functions by calling @ref reg_wizchip_bus_cbfunc().
 * @sa wizchip_bus_read_buf()
 */
void wizchip_bus_write_buf(uint32_t AddrSel, iodata_t* buf, datasize_t len, uint8_t addrinc)
{ 
 8006b54:	b580      	push	{r7, lr}
 8006b56:	b086      	sub	sp, #24
 8006b58:	af00      	add	r7, sp, #0
 8006b5a:	60f8      	str	r0, [r7, #12]
 8006b5c:	60b9      	str	r1, [r7, #8]
 8006b5e:	4611      	mov	r1, r2
 8006b60:	461a      	mov	r2, r3
 8006b62:	460b      	mov	r3, r1
 8006b64:	80fb      	strh	r3, [r7, #6]
 8006b66:	4613      	mov	r3, r2
 8006b68:	717b      	strb	r3, [r7, #5]
   datasize_t i;
   if(addrinc) addrinc = sizeof(iodata_t);
 8006b6a:	797b      	ldrb	r3, [r7, #5]
 8006b6c:	2b00      	cmp	r3, #0
 8006b6e:	d001      	beq.n	8006b74 <wizchip_bus_write_buf+0x20>
 8006b70:	2301      	movs	r3, #1
 8006b72:	717b      	strb	r3, [r7, #5]
   for( i = 0; i < len ; i++)
 8006b74:	2300      	movs	r3, #0
 8006b76:	82fb      	strh	r3, [r7, #22]
 8006b78:	e012      	b.n	8006ba0 <wizchip_bus_write_buf+0x4c>
   {
      WIZCHIP.IF.BUS._write_data(AddrSel,*buf++);
 8006b7a:	4b0f      	ldr	r3, [pc, #60]	; (8006bb8 <wizchip_bus_write_buf+0x64>)
 8006b7c:	69da      	ldr	r2, [r3, #28]
 8006b7e:	68bb      	ldr	r3, [r7, #8]
 8006b80:	1c59      	adds	r1, r3, #1
 8006b82:	60b9      	str	r1, [r7, #8]
 8006b84:	781b      	ldrb	r3, [r3, #0]
 8006b86:	4619      	mov	r1, r3
 8006b88:	68f8      	ldr	r0, [r7, #12]
 8006b8a:	4790      	blx	r2
      AddrSel += (uint32_t)addrinc;
 8006b8c:	797b      	ldrb	r3, [r7, #5]
 8006b8e:	68fa      	ldr	r2, [r7, #12]
 8006b90:	4413      	add	r3, r2
 8006b92:	60fb      	str	r3, [r7, #12]
   for( i = 0; i < len ; i++)
 8006b94:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 8006b98:	b29b      	uxth	r3, r3
 8006b9a:	3301      	adds	r3, #1
 8006b9c:	b29b      	uxth	r3, r3
 8006b9e:	82fb      	strh	r3, [r7, #22]
 8006ba0:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 8006ba4:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8006ba8:	429a      	cmp	r2, r3
 8006baa:	dbe6      	blt.n	8006b7a <wizchip_bus_write_buf+0x26>
   }

}
 8006bac:	bf00      	nop
 8006bae:	bf00      	nop
 8006bb0:	3718      	adds	r7, #24
 8006bb2:	46bd      	mov	sp, r7
 8006bb4:	bd80      	pop	{r7, pc}
 8006bb6:	bf00      	nop
 8006bb8:	20000010 	.word	0x20000010

08006bbc <reg_wizchip_cs_cbfunc>:
   if(!cris_ex)   WIZCHIP.CRIS._e_x_i_t_  = wizchip_cris_exit;
   else           WIZCHIP.CRIS._e_x_i_t_  = cris_ex;
}

void reg_wizchip_cs_cbfunc(void(*cs_sel)(void), void(*cs_desel)(void))
{
 8006bbc:	b480      	push	{r7}
 8006bbe:	b083      	sub	sp, #12
 8006bc0:	af00      	add	r7, sp, #0
 8006bc2:	6078      	str	r0, [r7, #4]
 8006bc4:	6039      	str	r1, [r7, #0]
   if(!cs_sel)    WIZCHIP.CS._s_e_l_e_c_t_   = wizchip_cs_select;
 8006bc6:	687b      	ldr	r3, [r7, #4]
 8006bc8:	2b00      	cmp	r3, #0
 8006bca:	d103      	bne.n	8006bd4 <reg_wizchip_cs_cbfunc+0x18>
 8006bcc:	4b0b      	ldr	r3, [pc, #44]	; (8006bfc <reg_wizchip_cs_cbfunc+0x40>)
 8006bce:	4a0c      	ldr	r2, [pc, #48]	; (8006c00 <reg_wizchip_cs_cbfunc+0x44>)
 8006bd0:	611a      	str	r2, [r3, #16]
 8006bd2:	e002      	b.n	8006bda <reg_wizchip_cs_cbfunc+0x1e>
   else           WIZCHIP.CS._s_e_l_e_c_t_   = cs_sel; 
 8006bd4:	4a09      	ldr	r2, [pc, #36]	; (8006bfc <reg_wizchip_cs_cbfunc+0x40>)
 8006bd6:	687b      	ldr	r3, [r7, #4]
 8006bd8:	6113      	str	r3, [r2, #16]
   if(!cs_desel)  WIZCHIP.CS._d_e_s_e_l_e_c_t_ = wizchip_cs_deselect;
 8006bda:	683b      	ldr	r3, [r7, #0]
 8006bdc:	2b00      	cmp	r3, #0
 8006bde:	d103      	bne.n	8006be8 <reg_wizchip_cs_cbfunc+0x2c>
 8006be0:	4b06      	ldr	r3, [pc, #24]	; (8006bfc <reg_wizchip_cs_cbfunc+0x40>)
 8006be2:	4a08      	ldr	r2, [pc, #32]	; (8006c04 <reg_wizchip_cs_cbfunc+0x48>)
 8006be4:	615a      	str	r2, [r3, #20]
   else           WIZCHIP.CS._d_e_s_e_l_e_c_t_ = cs_desel;
}
 8006be6:	e002      	b.n	8006bee <reg_wizchip_cs_cbfunc+0x32>
   else           WIZCHIP.CS._d_e_s_e_l_e_c_t_ = cs_desel;
 8006be8:	4a04      	ldr	r2, [pc, #16]	; (8006bfc <reg_wizchip_cs_cbfunc+0x40>)
 8006bea:	683b      	ldr	r3, [r7, #0]
 8006bec:	6153      	str	r3, [r2, #20]
}
 8006bee:	bf00      	nop
 8006bf0:	370c      	adds	r7, #12
 8006bf2:	46bd      	mov	sp, r7
 8006bf4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006bf8:	4770      	bx	lr
 8006bfa:	bf00      	nop
 8006bfc:	20000010 	.word	0x20000010
 8006c00:	08006a99 	.word	0x08006a99
 8006c04:	08006aa7 	.word	0x08006aa7

08006c08 <reg_wizchip_bus_cbfunc>:
#if (_WIZCHIP_IO_MODE_ & _WIZCHIP_IO_MODE_BUS_)
void reg_wizchip_bus_cbfunc( iodata_t(*bus_rd)(uint32_t addr), 
                             void (*bus_wd)(uint32_t addr, iodata_t wb),
                             void (*bus_rbuf)(uint32_t AddrSel, uint8_t* buf, datasize_t len, uint8_t inc),
                             void (*bus_wbuf)(uint32_t AddrSel, uint8_t* buf, datasize_t len, uint8_t inc) )
{
 8006c08:	b480      	push	{r7}
 8006c0a:	b085      	sub	sp, #20
 8006c0c:	af00      	add	r7, sp, #0
 8006c0e:	60f8      	str	r0, [r7, #12]
 8006c10:	60b9      	str	r1, [r7, #8]
 8006c12:	607a      	str	r2, [r7, #4]
 8006c14:	603b      	str	r3, [r7, #0]
   while(!(WIZCHIP.if_mode & _WIZCHIP_IO_MODE_BUS_));   
 8006c16:	bf00      	nop
 8006c18:	4b19      	ldr	r3, [pc, #100]	; (8006c80 <reg_wizchip_bus_cbfunc+0x78>)
 8006c1a:	881b      	ldrh	r3, [r3, #0]
 8006c1c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006c20:	2b00      	cmp	r3, #0
 8006c22:	d0f9      	beq.n	8006c18 <reg_wizchip_bus_cbfunc+0x10>
   if(!bus_rd)  WIZCHIP.IF.BUS._read_data   = wizchip_bus_read;
 8006c24:	68fb      	ldr	r3, [r7, #12]
 8006c26:	2b00      	cmp	r3, #0
 8006c28:	d103      	bne.n	8006c32 <reg_wizchip_bus_cbfunc+0x2a>
 8006c2a:	4b15      	ldr	r3, [pc, #84]	; (8006c80 <reg_wizchip_bus_cbfunc+0x78>)
 8006c2c:	4a15      	ldr	r2, [pc, #84]	; (8006c84 <reg_wizchip_bus_cbfunc+0x7c>)
 8006c2e:	619a      	str	r2, [r3, #24]
 8006c30:	e002      	b.n	8006c38 <reg_wizchip_bus_cbfunc+0x30>
   else         WIZCHIP.IF.BUS._read_data   = bus_rd;
 8006c32:	4a13      	ldr	r2, [pc, #76]	; (8006c80 <reg_wizchip_bus_cbfunc+0x78>)
 8006c34:	68fb      	ldr	r3, [r7, #12]
 8006c36:	6193      	str	r3, [r2, #24]
   if(!bus_wd)  WIZCHIP.IF.BUS._write_data  = wizchip_bus_write;
 8006c38:	68bb      	ldr	r3, [r7, #8]
 8006c3a:	2b00      	cmp	r3, #0
 8006c3c:	d103      	bne.n	8006c46 <reg_wizchip_bus_cbfunc+0x3e>
 8006c3e:	4b10      	ldr	r3, [pc, #64]	; (8006c80 <reg_wizchip_bus_cbfunc+0x78>)
 8006c40:	4a11      	ldr	r2, [pc, #68]	; (8006c88 <reg_wizchip_bus_cbfunc+0x80>)
 8006c42:	61da      	str	r2, [r3, #28]
 8006c44:	e002      	b.n	8006c4c <reg_wizchip_bus_cbfunc+0x44>
   else         WIZCHIP.IF.BUS._write_data  = bus_wd;
 8006c46:	4a0e      	ldr	r2, [pc, #56]	; (8006c80 <reg_wizchip_bus_cbfunc+0x78>)
 8006c48:	68bb      	ldr	r3, [r7, #8]
 8006c4a:	61d3      	str	r3, [r2, #28]

   if(!bus_rbuf)  WIZCHIP.IF.BUS._read_data_buf   = wizchip_bus_read_buf;
 8006c4c:	687b      	ldr	r3, [r7, #4]
 8006c4e:	2b00      	cmp	r3, #0
 8006c50:	d103      	bne.n	8006c5a <reg_wizchip_bus_cbfunc+0x52>
 8006c52:	4b0b      	ldr	r3, [pc, #44]	; (8006c80 <reg_wizchip_bus_cbfunc+0x78>)
 8006c54:	4a0d      	ldr	r2, [pc, #52]	; (8006c8c <reg_wizchip_bus_cbfunc+0x84>)
 8006c56:	621a      	str	r2, [r3, #32]
 8006c58:	e002      	b.n	8006c60 <reg_wizchip_bus_cbfunc+0x58>
   else           WIZCHIP.IF.BUS._read_data_buf   = bus_rbuf;
 8006c5a:	4a09      	ldr	r2, [pc, #36]	; (8006c80 <reg_wizchip_bus_cbfunc+0x78>)
 8006c5c:	687b      	ldr	r3, [r7, #4]
 8006c5e:	6213      	str	r3, [r2, #32]
   if(!bus_wbuf)  WIZCHIP.IF.BUS._write_data_buf  = wizchip_bus_write_buf;
 8006c60:	683b      	ldr	r3, [r7, #0]
 8006c62:	2b00      	cmp	r3, #0
 8006c64:	d103      	bne.n	8006c6e <reg_wizchip_bus_cbfunc+0x66>
 8006c66:	4b06      	ldr	r3, [pc, #24]	; (8006c80 <reg_wizchip_bus_cbfunc+0x78>)
 8006c68:	4a09      	ldr	r2, [pc, #36]	; (8006c90 <reg_wizchip_bus_cbfunc+0x88>)
 8006c6a:	625a      	str	r2, [r3, #36]	; 0x24
   else           WIZCHIP.IF.BUS._write_data_buf  = bus_wbuf;
}
 8006c6c:	e002      	b.n	8006c74 <reg_wizchip_bus_cbfunc+0x6c>
   else           WIZCHIP.IF.BUS._write_data_buf  = bus_wbuf;
 8006c6e:	4a04      	ldr	r2, [pc, #16]	; (8006c80 <reg_wizchip_bus_cbfunc+0x78>)
 8006c70:	683b      	ldr	r3, [r7, #0]
 8006c72:	6253      	str	r3, [r2, #36]	; 0x24
}
 8006c74:	bf00      	nop
 8006c76:	3714      	adds	r7, #20
 8006c78:	46bd      	mov	sp, r7
 8006c7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c7e:	4770      	bx	lr
 8006c80:	20000010 	.word	0x20000010
 8006c84:	08006ab5 	.word	0x08006ab5
 8006c88:	08006acf 	.word	0x08006acf
 8006c8c:	08006aed 	.word	0x08006aed
 8006c90:	08006b55 	.word	0x08006b55

08006c94 <__errno>:
 8006c94:	4b01      	ldr	r3, [pc, #4]	; (8006c9c <__errno+0x8>)
 8006c96:	6818      	ldr	r0, [r3, #0]
 8006c98:	4770      	bx	lr
 8006c9a:	bf00      	nop
 8006c9c:	20000038 	.word	0x20000038

08006ca0 <__libc_init_array>:
 8006ca0:	b570      	push	{r4, r5, r6, lr}
 8006ca2:	4d0d      	ldr	r5, [pc, #52]	; (8006cd8 <__libc_init_array+0x38>)
 8006ca4:	4c0d      	ldr	r4, [pc, #52]	; (8006cdc <__libc_init_array+0x3c>)
 8006ca6:	1b64      	subs	r4, r4, r5
 8006ca8:	10a4      	asrs	r4, r4, #2
 8006caa:	2600      	movs	r6, #0
 8006cac:	42a6      	cmp	r6, r4
 8006cae:	d109      	bne.n	8006cc4 <__libc_init_array+0x24>
 8006cb0:	4d0b      	ldr	r5, [pc, #44]	; (8006ce0 <__libc_init_array+0x40>)
 8006cb2:	4c0c      	ldr	r4, [pc, #48]	; (8006ce4 <__libc_init_array+0x44>)
 8006cb4:	f000 ffec 	bl	8007c90 <_init>
 8006cb8:	1b64      	subs	r4, r4, r5
 8006cba:	10a4      	asrs	r4, r4, #2
 8006cbc:	2600      	movs	r6, #0
 8006cbe:	42a6      	cmp	r6, r4
 8006cc0:	d105      	bne.n	8006cce <__libc_init_array+0x2e>
 8006cc2:	bd70      	pop	{r4, r5, r6, pc}
 8006cc4:	f855 3b04 	ldr.w	r3, [r5], #4
 8006cc8:	4798      	blx	r3
 8006cca:	3601      	adds	r6, #1
 8006ccc:	e7ee      	b.n	8006cac <__libc_init_array+0xc>
 8006cce:	f855 3b04 	ldr.w	r3, [r5], #4
 8006cd2:	4798      	blx	r3
 8006cd4:	3601      	adds	r6, #1
 8006cd6:	e7f2      	b.n	8006cbe <__libc_init_array+0x1e>
 8006cd8:	08007ec4 	.word	0x08007ec4
 8006cdc:	08007ec4 	.word	0x08007ec4
 8006ce0:	08007ec4 	.word	0x08007ec4
 8006ce4:	08007ec8 	.word	0x08007ec8

08006ce8 <memset>:
 8006ce8:	4402      	add	r2, r0
 8006cea:	4603      	mov	r3, r0
 8006cec:	4293      	cmp	r3, r2
 8006cee:	d100      	bne.n	8006cf2 <memset+0xa>
 8006cf0:	4770      	bx	lr
 8006cf2:	f803 1b01 	strb.w	r1, [r3], #1
 8006cf6:	e7f9      	b.n	8006cec <memset+0x4>

08006cf8 <iprintf>:
 8006cf8:	b40f      	push	{r0, r1, r2, r3}
 8006cfa:	4b0a      	ldr	r3, [pc, #40]	; (8006d24 <iprintf+0x2c>)
 8006cfc:	b513      	push	{r0, r1, r4, lr}
 8006cfe:	681c      	ldr	r4, [r3, #0]
 8006d00:	b124      	cbz	r4, 8006d0c <iprintf+0x14>
 8006d02:	69a3      	ldr	r3, [r4, #24]
 8006d04:	b913      	cbnz	r3, 8006d0c <iprintf+0x14>
 8006d06:	4620      	mov	r0, r4
 8006d08:	f000 fa5e 	bl	80071c8 <__sinit>
 8006d0c:	ab05      	add	r3, sp, #20
 8006d0e:	9a04      	ldr	r2, [sp, #16]
 8006d10:	68a1      	ldr	r1, [r4, #8]
 8006d12:	9301      	str	r3, [sp, #4]
 8006d14:	4620      	mov	r0, r4
 8006d16:	f000 fc2f 	bl	8007578 <_vfiprintf_r>
 8006d1a:	b002      	add	sp, #8
 8006d1c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8006d20:	b004      	add	sp, #16
 8006d22:	4770      	bx	lr
 8006d24:	20000038 	.word	0x20000038

08006d28 <_puts_r>:
 8006d28:	b570      	push	{r4, r5, r6, lr}
 8006d2a:	460e      	mov	r6, r1
 8006d2c:	4605      	mov	r5, r0
 8006d2e:	b118      	cbz	r0, 8006d38 <_puts_r+0x10>
 8006d30:	6983      	ldr	r3, [r0, #24]
 8006d32:	b90b      	cbnz	r3, 8006d38 <_puts_r+0x10>
 8006d34:	f000 fa48 	bl	80071c8 <__sinit>
 8006d38:	69ab      	ldr	r3, [r5, #24]
 8006d3a:	68ac      	ldr	r4, [r5, #8]
 8006d3c:	b913      	cbnz	r3, 8006d44 <_puts_r+0x1c>
 8006d3e:	4628      	mov	r0, r5
 8006d40:	f000 fa42 	bl	80071c8 <__sinit>
 8006d44:	4b2c      	ldr	r3, [pc, #176]	; (8006df8 <_puts_r+0xd0>)
 8006d46:	429c      	cmp	r4, r3
 8006d48:	d120      	bne.n	8006d8c <_puts_r+0x64>
 8006d4a:	686c      	ldr	r4, [r5, #4]
 8006d4c:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8006d4e:	07db      	lsls	r3, r3, #31
 8006d50:	d405      	bmi.n	8006d5e <_puts_r+0x36>
 8006d52:	89a3      	ldrh	r3, [r4, #12]
 8006d54:	0598      	lsls	r0, r3, #22
 8006d56:	d402      	bmi.n	8006d5e <_puts_r+0x36>
 8006d58:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8006d5a:	f000 fad3 	bl	8007304 <__retarget_lock_acquire_recursive>
 8006d5e:	89a3      	ldrh	r3, [r4, #12]
 8006d60:	0719      	lsls	r1, r3, #28
 8006d62:	d51d      	bpl.n	8006da0 <_puts_r+0x78>
 8006d64:	6923      	ldr	r3, [r4, #16]
 8006d66:	b1db      	cbz	r3, 8006da0 <_puts_r+0x78>
 8006d68:	3e01      	subs	r6, #1
 8006d6a:	68a3      	ldr	r3, [r4, #8]
 8006d6c:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 8006d70:	3b01      	subs	r3, #1
 8006d72:	60a3      	str	r3, [r4, #8]
 8006d74:	bb39      	cbnz	r1, 8006dc6 <_puts_r+0x9e>
 8006d76:	2b00      	cmp	r3, #0
 8006d78:	da38      	bge.n	8006dec <_puts_r+0xc4>
 8006d7a:	4622      	mov	r2, r4
 8006d7c:	210a      	movs	r1, #10
 8006d7e:	4628      	mov	r0, r5
 8006d80:	f000 f848 	bl	8006e14 <__swbuf_r>
 8006d84:	3001      	adds	r0, #1
 8006d86:	d011      	beq.n	8006dac <_puts_r+0x84>
 8006d88:	250a      	movs	r5, #10
 8006d8a:	e011      	b.n	8006db0 <_puts_r+0x88>
 8006d8c:	4b1b      	ldr	r3, [pc, #108]	; (8006dfc <_puts_r+0xd4>)
 8006d8e:	429c      	cmp	r4, r3
 8006d90:	d101      	bne.n	8006d96 <_puts_r+0x6e>
 8006d92:	68ac      	ldr	r4, [r5, #8]
 8006d94:	e7da      	b.n	8006d4c <_puts_r+0x24>
 8006d96:	4b1a      	ldr	r3, [pc, #104]	; (8006e00 <_puts_r+0xd8>)
 8006d98:	429c      	cmp	r4, r3
 8006d9a:	bf08      	it	eq
 8006d9c:	68ec      	ldreq	r4, [r5, #12]
 8006d9e:	e7d5      	b.n	8006d4c <_puts_r+0x24>
 8006da0:	4621      	mov	r1, r4
 8006da2:	4628      	mov	r0, r5
 8006da4:	f000 f888 	bl	8006eb8 <__swsetup_r>
 8006da8:	2800      	cmp	r0, #0
 8006daa:	d0dd      	beq.n	8006d68 <_puts_r+0x40>
 8006dac:	f04f 35ff 	mov.w	r5, #4294967295
 8006db0:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8006db2:	07da      	lsls	r2, r3, #31
 8006db4:	d405      	bmi.n	8006dc2 <_puts_r+0x9a>
 8006db6:	89a3      	ldrh	r3, [r4, #12]
 8006db8:	059b      	lsls	r3, r3, #22
 8006dba:	d402      	bmi.n	8006dc2 <_puts_r+0x9a>
 8006dbc:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8006dbe:	f000 faa2 	bl	8007306 <__retarget_lock_release_recursive>
 8006dc2:	4628      	mov	r0, r5
 8006dc4:	bd70      	pop	{r4, r5, r6, pc}
 8006dc6:	2b00      	cmp	r3, #0
 8006dc8:	da04      	bge.n	8006dd4 <_puts_r+0xac>
 8006dca:	69a2      	ldr	r2, [r4, #24]
 8006dcc:	429a      	cmp	r2, r3
 8006dce:	dc06      	bgt.n	8006dde <_puts_r+0xb6>
 8006dd0:	290a      	cmp	r1, #10
 8006dd2:	d004      	beq.n	8006dde <_puts_r+0xb6>
 8006dd4:	6823      	ldr	r3, [r4, #0]
 8006dd6:	1c5a      	adds	r2, r3, #1
 8006dd8:	6022      	str	r2, [r4, #0]
 8006dda:	7019      	strb	r1, [r3, #0]
 8006ddc:	e7c5      	b.n	8006d6a <_puts_r+0x42>
 8006dde:	4622      	mov	r2, r4
 8006de0:	4628      	mov	r0, r5
 8006de2:	f000 f817 	bl	8006e14 <__swbuf_r>
 8006de6:	3001      	adds	r0, #1
 8006de8:	d1bf      	bne.n	8006d6a <_puts_r+0x42>
 8006dea:	e7df      	b.n	8006dac <_puts_r+0x84>
 8006dec:	6823      	ldr	r3, [r4, #0]
 8006dee:	250a      	movs	r5, #10
 8006df0:	1c5a      	adds	r2, r3, #1
 8006df2:	6022      	str	r2, [r4, #0]
 8006df4:	701d      	strb	r5, [r3, #0]
 8006df6:	e7db      	b.n	8006db0 <_puts_r+0x88>
 8006df8:	08007e48 	.word	0x08007e48
 8006dfc:	08007e68 	.word	0x08007e68
 8006e00:	08007e28 	.word	0x08007e28

08006e04 <puts>:
 8006e04:	4b02      	ldr	r3, [pc, #8]	; (8006e10 <puts+0xc>)
 8006e06:	4601      	mov	r1, r0
 8006e08:	6818      	ldr	r0, [r3, #0]
 8006e0a:	f7ff bf8d 	b.w	8006d28 <_puts_r>
 8006e0e:	bf00      	nop
 8006e10:	20000038 	.word	0x20000038

08006e14 <__swbuf_r>:
 8006e14:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006e16:	460e      	mov	r6, r1
 8006e18:	4614      	mov	r4, r2
 8006e1a:	4605      	mov	r5, r0
 8006e1c:	b118      	cbz	r0, 8006e26 <__swbuf_r+0x12>
 8006e1e:	6983      	ldr	r3, [r0, #24]
 8006e20:	b90b      	cbnz	r3, 8006e26 <__swbuf_r+0x12>
 8006e22:	f000 f9d1 	bl	80071c8 <__sinit>
 8006e26:	4b21      	ldr	r3, [pc, #132]	; (8006eac <__swbuf_r+0x98>)
 8006e28:	429c      	cmp	r4, r3
 8006e2a:	d12b      	bne.n	8006e84 <__swbuf_r+0x70>
 8006e2c:	686c      	ldr	r4, [r5, #4]
 8006e2e:	69a3      	ldr	r3, [r4, #24]
 8006e30:	60a3      	str	r3, [r4, #8]
 8006e32:	89a3      	ldrh	r3, [r4, #12]
 8006e34:	071a      	lsls	r2, r3, #28
 8006e36:	d52f      	bpl.n	8006e98 <__swbuf_r+0x84>
 8006e38:	6923      	ldr	r3, [r4, #16]
 8006e3a:	b36b      	cbz	r3, 8006e98 <__swbuf_r+0x84>
 8006e3c:	6923      	ldr	r3, [r4, #16]
 8006e3e:	6820      	ldr	r0, [r4, #0]
 8006e40:	1ac0      	subs	r0, r0, r3
 8006e42:	6963      	ldr	r3, [r4, #20]
 8006e44:	b2f6      	uxtb	r6, r6
 8006e46:	4283      	cmp	r3, r0
 8006e48:	4637      	mov	r7, r6
 8006e4a:	dc04      	bgt.n	8006e56 <__swbuf_r+0x42>
 8006e4c:	4621      	mov	r1, r4
 8006e4e:	4628      	mov	r0, r5
 8006e50:	f000 f926 	bl	80070a0 <_fflush_r>
 8006e54:	bb30      	cbnz	r0, 8006ea4 <__swbuf_r+0x90>
 8006e56:	68a3      	ldr	r3, [r4, #8]
 8006e58:	3b01      	subs	r3, #1
 8006e5a:	60a3      	str	r3, [r4, #8]
 8006e5c:	6823      	ldr	r3, [r4, #0]
 8006e5e:	1c5a      	adds	r2, r3, #1
 8006e60:	6022      	str	r2, [r4, #0]
 8006e62:	701e      	strb	r6, [r3, #0]
 8006e64:	6963      	ldr	r3, [r4, #20]
 8006e66:	3001      	adds	r0, #1
 8006e68:	4283      	cmp	r3, r0
 8006e6a:	d004      	beq.n	8006e76 <__swbuf_r+0x62>
 8006e6c:	89a3      	ldrh	r3, [r4, #12]
 8006e6e:	07db      	lsls	r3, r3, #31
 8006e70:	d506      	bpl.n	8006e80 <__swbuf_r+0x6c>
 8006e72:	2e0a      	cmp	r6, #10
 8006e74:	d104      	bne.n	8006e80 <__swbuf_r+0x6c>
 8006e76:	4621      	mov	r1, r4
 8006e78:	4628      	mov	r0, r5
 8006e7a:	f000 f911 	bl	80070a0 <_fflush_r>
 8006e7e:	b988      	cbnz	r0, 8006ea4 <__swbuf_r+0x90>
 8006e80:	4638      	mov	r0, r7
 8006e82:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8006e84:	4b0a      	ldr	r3, [pc, #40]	; (8006eb0 <__swbuf_r+0x9c>)
 8006e86:	429c      	cmp	r4, r3
 8006e88:	d101      	bne.n	8006e8e <__swbuf_r+0x7a>
 8006e8a:	68ac      	ldr	r4, [r5, #8]
 8006e8c:	e7cf      	b.n	8006e2e <__swbuf_r+0x1a>
 8006e8e:	4b09      	ldr	r3, [pc, #36]	; (8006eb4 <__swbuf_r+0xa0>)
 8006e90:	429c      	cmp	r4, r3
 8006e92:	bf08      	it	eq
 8006e94:	68ec      	ldreq	r4, [r5, #12]
 8006e96:	e7ca      	b.n	8006e2e <__swbuf_r+0x1a>
 8006e98:	4621      	mov	r1, r4
 8006e9a:	4628      	mov	r0, r5
 8006e9c:	f000 f80c 	bl	8006eb8 <__swsetup_r>
 8006ea0:	2800      	cmp	r0, #0
 8006ea2:	d0cb      	beq.n	8006e3c <__swbuf_r+0x28>
 8006ea4:	f04f 37ff 	mov.w	r7, #4294967295
 8006ea8:	e7ea      	b.n	8006e80 <__swbuf_r+0x6c>
 8006eaa:	bf00      	nop
 8006eac:	08007e48 	.word	0x08007e48
 8006eb0:	08007e68 	.word	0x08007e68
 8006eb4:	08007e28 	.word	0x08007e28

08006eb8 <__swsetup_r>:
 8006eb8:	4b32      	ldr	r3, [pc, #200]	; (8006f84 <__swsetup_r+0xcc>)
 8006eba:	b570      	push	{r4, r5, r6, lr}
 8006ebc:	681d      	ldr	r5, [r3, #0]
 8006ebe:	4606      	mov	r6, r0
 8006ec0:	460c      	mov	r4, r1
 8006ec2:	b125      	cbz	r5, 8006ece <__swsetup_r+0x16>
 8006ec4:	69ab      	ldr	r3, [r5, #24]
 8006ec6:	b913      	cbnz	r3, 8006ece <__swsetup_r+0x16>
 8006ec8:	4628      	mov	r0, r5
 8006eca:	f000 f97d 	bl	80071c8 <__sinit>
 8006ece:	4b2e      	ldr	r3, [pc, #184]	; (8006f88 <__swsetup_r+0xd0>)
 8006ed0:	429c      	cmp	r4, r3
 8006ed2:	d10f      	bne.n	8006ef4 <__swsetup_r+0x3c>
 8006ed4:	686c      	ldr	r4, [r5, #4]
 8006ed6:	89a3      	ldrh	r3, [r4, #12]
 8006ed8:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8006edc:	0719      	lsls	r1, r3, #28
 8006ede:	d42c      	bmi.n	8006f3a <__swsetup_r+0x82>
 8006ee0:	06dd      	lsls	r5, r3, #27
 8006ee2:	d411      	bmi.n	8006f08 <__swsetup_r+0x50>
 8006ee4:	2309      	movs	r3, #9
 8006ee6:	6033      	str	r3, [r6, #0]
 8006ee8:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8006eec:	81a3      	strh	r3, [r4, #12]
 8006eee:	f04f 30ff 	mov.w	r0, #4294967295
 8006ef2:	e03e      	b.n	8006f72 <__swsetup_r+0xba>
 8006ef4:	4b25      	ldr	r3, [pc, #148]	; (8006f8c <__swsetup_r+0xd4>)
 8006ef6:	429c      	cmp	r4, r3
 8006ef8:	d101      	bne.n	8006efe <__swsetup_r+0x46>
 8006efa:	68ac      	ldr	r4, [r5, #8]
 8006efc:	e7eb      	b.n	8006ed6 <__swsetup_r+0x1e>
 8006efe:	4b24      	ldr	r3, [pc, #144]	; (8006f90 <__swsetup_r+0xd8>)
 8006f00:	429c      	cmp	r4, r3
 8006f02:	bf08      	it	eq
 8006f04:	68ec      	ldreq	r4, [r5, #12]
 8006f06:	e7e6      	b.n	8006ed6 <__swsetup_r+0x1e>
 8006f08:	0758      	lsls	r0, r3, #29
 8006f0a:	d512      	bpl.n	8006f32 <__swsetup_r+0x7a>
 8006f0c:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8006f0e:	b141      	cbz	r1, 8006f22 <__swsetup_r+0x6a>
 8006f10:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8006f14:	4299      	cmp	r1, r3
 8006f16:	d002      	beq.n	8006f1e <__swsetup_r+0x66>
 8006f18:	4630      	mov	r0, r6
 8006f1a:	f000 fa59 	bl	80073d0 <_free_r>
 8006f1e:	2300      	movs	r3, #0
 8006f20:	6363      	str	r3, [r4, #52]	; 0x34
 8006f22:	89a3      	ldrh	r3, [r4, #12]
 8006f24:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8006f28:	81a3      	strh	r3, [r4, #12]
 8006f2a:	2300      	movs	r3, #0
 8006f2c:	6063      	str	r3, [r4, #4]
 8006f2e:	6923      	ldr	r3, [r4, #16]
 8006f30:	6023      	str	r3, [r4, #0]
 8006f32:	89a3      	ldrh	r3, [r4, #12]
 8006f34:	f043 0308 	orr.w	r3, r3, #8
 8006f38:	81a3      	strh	r3, [r4, #12]
 8006f3a:	6923      	ldr	r3, [r4, #16]
 8006f3c:	b94b      	cbnz	r3, 8006f52 <__swsetup_r+0x9a>
 8006f3e:	89a3      	ldrh	r3, [r4, #12]
 8006f40:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8006f44:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8006f48:	d003      	beq.n	8006f52 <__swsetup_r+0x9a>
 8006f4a:	4621      	mov	r1, r4
 8006f4c:	4630      	mov	r0, r6
 8006f4e:	f000 f9ff 	bl	8007350 <__smakebuf_r>
 8006f52:	89a0      	ldrh	r0, [r4, #12]
 8006f54:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8006f58:	f010 0301 	ands.w	r3, r0, #1
 8006f5c:	d00a      	beq.n	8006f74 <__swsetup_r+0xbc>
 8006f5e:	2300      	movs	r3, #0
 8006f60:	60a3      	str	r3, [r4, #8]
 8006f62:	6963      	ldr	r3, [r4, #20]
 8006f64:	425b      	negs	r3, r3
 8006f66:	61a3      	str	r3, [r4, #24]
 8006f68:	6923      	ldr	r3, [r4, #16]
 8006f6a:	b943      	cbnz	r3, 8006f7e <__swsetup_r+0xc6>
 8006f6c:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8006f70:	d1ba      	bne.n	8006ee8 <__swsetup_r+0x30>
 8006f72:	bd70      	pop	{r4, r5, r6, pc}
 8006f74:	0781      	lsls	r1, r0, #30
 8006f76:	bf58      	it	pl
 8006f78:	6963      	ldrpl	r3, [r4, #20]
 8006f7a:	60a3      	str	r3, [r4, #8]
 8006f7c:	e7f4      	b.n	8006f68 <__swsetup_r+0xb0>
 8006f7e:	2000      	movs	r0, #0
 8006f80:	e7f7      	b.n	8006f72 <__swsetup_r+0xba>
 8006f82:	bf00      	nop
 8006f84:	20000038 	.word	0x20000038
 8006f88:	08007e48 	.word	0x08007e48
 8006f8c:	08007e68 	.word	0x08007e68
 8006f90:	08007e28 	.word	0x08007e28

08006f94 <__sflush_r>:
 8006f94:	898a      	ldrh	r2, [r1, #12]
 8006f96:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006f9a:	4605      	mov	r5, r0
 8006f9c:	0710      	lsls	r0, r2, #28
 8006f9e:	460c      	mov	r4, r1
 8006fa0:	d458      	bmi.n	8007054 <__sflush_r+0xc0>
 8006fa2:	684b      	ldr	r3, [r1, #4]
 8006fa4:	2b00      	cmp	r3, #0
 8006fa6:	dc05      	bgt.n	8006fb4 <__sflush_r+0x20>
 8006fa8:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8006faa:	2b00      	cmp	r3, #0
 8006fac:	dc02      	bgt.n	8006fb4 <__sflush_r+0x20>
 8006fae:	2000      	movs	r0, #0
 8006fb0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8006fb4:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8006fb6:	2e00      	cmp	r6, #0
 8006fb8:	d0f9      	beq.n	8006fae <__sflush_r+0x1a>
 8006fba:	2300      	movs	r3, #0
 8006fbc:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8006fc0:	682f      	ldr	r7, [r5, #0]
 8006fc2:	602b      	str	r3, [r5, #0]
 8006fc4:	d032      	beq.n	800702c <__sflush_r+0x98>
 8006fc6:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8006fc8:	89a3      	ldrh	r3, [r4, #12]
 8006fca:	075a      	lsls	r2, r3, #29
 8006fcc:	d505      	bpl.n	8006fda <__sflush_r+0x46>
 8006fce:	6863      	ldr	r3, [r4, #4]
 8006fd0:	1ac0      	subs	r0, r0, r3
 8006fd2:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8006fd4:	b10b      	cbz	r3, 8006fda <__sflush_r+0x46>
 8006fd6:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8006fd8:	1ac0      	subs	r0, r0, r3
 8006fda:	2300      	movs	r3, #0
 8006fdc:	4602      	mov	r2, r0
 8006fde:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8006fe0:	6a21      	ldr	r1, [r4, #32]
 8006fe2:	4628      	mov	r0, r5
 8006fe4:	47b0      	blx	r6
 8006fe6:	1c43      	adds	r3, r0, #1
 8006fe8:	89a3      	ldrh	r3, [r4, #12]
 8006fea:	d106      	bne.n	8006ffa <__sflush_r+0x66>
 8006fec:	6829      	ldr	r1, [r5, #0]
 8006fee:	291d      	cmp	r1, #29
 8006ff0:	d82c      	bhi.n	800704c <__sflush_r+0xb8>
 8006ff2:	4a2a      	ldr	r2, [pc, #168]	; (800709c <__sflush_r+0x108>)
 8006ff4:	40ca      	lsrs	r2, r1
 8006ff6:	07d6      	lsls	r6, r2, #31
 8006ff8:	d528      	bpl.n	800704c <__sflush_r+0xb8>
 8006ffa:	2200      	movs	r2, #0
 8006ffc:	6062      	str	r2, [r4, #4]
 8006ffe:	04d9      	lsls	r1, r3, #19
 8007000:	6922      	ldr	r2, [r4, #16]
 8007002:	6022      	str	r2, [r4, #0]
 8007004:	d504      	bpl.n	8007010 <__sflush_r+0x7c>
 8007006:	1c42      	adds	r2, r0, #1
 8007008:	d101      	bne.n	800700e <__sflush_r+0x7a>
 800700a:	682b      	ldr	r3, [r5, #0]
 800700c:	b903      	cbnz	r3, 8007010 <__sflush_r+0x7c>
 800700e:	6560      	str	r0, [r4, #84]	; 0x54
 8007010:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8007012:	602f      	str	r7, [r5, #0]
 8007014:	2900      	cmp	r1, #0
 8007016:	d0ca      	beq.n	8006fae <__sflush_r+0x1a>
 8007018:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800701c:	4299      	cmp	r1, r3
 800701e:	d002      	beq.n	8007026 <__sflush_r+0x92>
 8007020:	4628      	mov	r0, r5
 8007022:	f000 f9d5 	bl	80073d0 <_free_r>
 8007026:	2000      	movs	r0, #0
 8007028:	6360      	str	r0, [r4, #52]	; 0x34
 800702a:	e7c1      	b.n	8006fb0 <__sflush_r+0x1c>
 800702c:	6a21      	ldr	r1, [r4, #32]
 800702e:	2301      	movs	r3, #1
 8007030:	4628      	mov	r0, r5
 8007032:	47b0      	blx	r6
 8007034:	1c41      	adds	r1, r0, #1
 8007036:	d1c7      	bne.n	8006fc8 <__sflush_r+0x34>
 8007038:	682b      	ldr	r3, [r5, #0]
 800703a:	2b00      	cmp	r3, #0
 800703c:	d0c4      	beq.n	8006fc8 <__sflush_r+0x34>
 800703e:	2b1d      	cmp	r3, #29
 8007040:	d001      	beq.n	8007046 <__sflush_r+0xb2>
 8007042:	2b16      	cmp	r3, #22
 8007044:	d101      	bne.n	800704a <__sflush_r+0xb6>
 8007046:	602f      	str	r7, [r5, #0]
 8007048:	e7b1      	b.n	8006fae <__sflush_r+0x1a>
 800704a:	89a3      	ldrh	r3, [r4, #12]
 800704c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8007050:	81a3      	strh	r3, [r4, #12]
 8007052:	e7ad      	b.n	8006fb0 <__sflush_r+0x1c>
 8007054:	690f      	ldr	r7, [r1, #16]
 8007056:	2f00      	cmp	r7, #0
 8007058:	d0a9      	beq.n	8006fae <__sflush_r+0x1a>
 800705a:	0793      	lsls	r3, r2, #30
 800705c:	680e      	ldr	r6, [r1, #0]
 800705e:	bf08      	it	eq
 8007060:	694b      	ldreq	r3, [r1, #20]
 8007062:	600f      	str	r7, [r1, #0]
 8007064:	bf18      	it	ne
 8007066:	2300      	movne	r3, #0
 8007068:	eba6 0807 	sub.w	r8, r6, r7
 800706c:	608b      	str	r3, [r1, #8]
 800706e:	f1b8 0f00 	cmp.w	r8, #0
 8007072:	dd9c      	ble.n	8006fae <__sflush_r+0x1a>
 8007074:	6a21      	ldr	r1, [r4, #32]
 8007076:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8007078:	4643      	mov	r3, r8
 800707a:	463a      	mov	r2, r7
 800707c:	4628      	mov	r0, r5
 800707e:	47b0      	blx	r6
 8007080:	2800      	cmp	r0, #0
 8007082:	dc06      	bgt.n	8007092 <__sflush_r+0xfe>
 8007084:	89a3      	ldrh	r3, [r4, #12]
 8007086:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800708a:	81a3      	strh	r3, [r4, #12]
 800708c:	f04f 30ff 	mov.w	r0, #4294967295
 8007090:	e78e      	b.n	8006fb0 <__sflush_r+0x1c>
 8007092:	4407      	add	r7, r0
 8007094:	eba8 0800 	sub.w	r8, r8, r0
 8007098:	e7e9      	b.n	800706e <__sflush_r+0xda>
 800709a:	bf00      	nop
 800709c:	20400001 	.word	0x20400001

080070a0 <_fflush_r>:
 80070a0:	b538      	push	{r3, r4, r5, lr}
 80070a2:	690b      	ldr	r3, [r1, #16]
 80070a4:	4605      	mov	r5, r0
 80070a6:	460c      	mov	r4, r1
 80070a8:	b913      	cbnz	r3, 80070b0 <_fflush_r+0x10>
 80070aa:	2500      	movs	r5, #0
 80070ac:	4628      	mov	r0, r5
 80070ae:	bd38      	pop	{r3, r4, r5, pc}
 80070b0:	b118      	cbz	r0, 80070ba <_fflush_r+0x1a>
 80070b2:	6983      	ldr	r3, [r0, #24]
 80070b4:	b90b      	cbnz	r3, 80070ba <_fflush_r+0x1a>
 80070b6:	f000 f887 	bl	80071c8 <__sinit>
 80070ba:	4b14      	ldr	r3, [pc, #80]	; (800710c <_fflush_r+0x6c>)
 80070bc:	429c      	cmp	r4, r3
 80070be:	d11b      	bne.n	80070f8 <_fflush_r+0x58>
 80070c0:	686c      	ldr	r4, [r5, #4]
 80070c2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80070c6:	2b00      	cmp	r3, #0
 80070c8:	d0ef      	beq.n	80070aa <_fflush_r+0xa>
 80070ca:	6e62      	ldr	r2, [r4, #100]	; 0x64
 80070cc:	07d0      	lsls	r0, r2, #31
 80070ce:	d404      	bmi.n	80070da <_fflush_r+0x3a>
 80070d0:	0599      	lsls	r1, r3, #22
 80070d2:	d402      	bmi.n	80070da <_fflush_r+0x3a>
 80070d4:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80070d6:	f000 f915 	bl	8007304 <__retarget_lock_acquire_recursive>
 80070da:	4628      	mov	r0, r5
 80070dc:	4621      	mov	r1, r4
 80070de:	f7ff ff59 	bl	8006f94 <__sflush_r>
 80070e2:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80070e4:	07da      	lsls	r2, r3, #31
 80070e6:	4605      	mov	r5, r0
 80070e8:	d4e0      	bmi.n	80070ac <_fflush_r+0xc>
 80070ea:	89a3      	ldrh	r3, [r4, #12]
 80070ec:	059b      	lsls	r3, r3, #22
 80070ee:	d4dd      	bmi.n	80070ac <_fflush_r+0xc>
 80070f0:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80070f2:	f000 f908 	bl	8007306 <__retarget_lock_release_recursive>
 80070f6:	e7d9      	b.n	80070ac <_fflush_r+0xc>
 80070f8:	4b05      	ldr	r3, [pc, #20]	; (8007110 <_fflush_r+0x70>)
 80070fa:	429c      	cmp	r4, r3
 80070fc:	d101      	bne.n	8007102 <_fflush_r+0x62>
 80070fe:	68ac      	ldr	r4, [r5, #8]
 8007100:	e7df      	b.n	80070c2 <_fflush_r+0x22>
 8007102:	4b04      	ldr	r3, [pc, #16]	; (8007114 <_fflush_r+0x74>)
 8007104:	429c      	cmp	r4, r3
 8007106:	bf08      	it	eq
 8007108:	68ec      	ldreq	r4, [r5, #12]
 800710a:	e7da      	b.n	80070c2 <_fflush_r+0x22>
 800710c:	08007e48 	.word	0x08007e48
 8007110:	08007e68 	.word	0x08007e68
 8007114:	08007e28 	.word	0x08007e28

08007118 <std>:
 8007118:	2300      	movs	r3, #0
 800711a:	b510      	push	{r4, lr}
 800711c:	4604      	mov	r4, r0
 800711e:	e9c0 3300 	strd	r3, r3, [r0]
 8007122:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8007126:	6083      	str	r3, [r0, #8]
 8007128:	8181      	strh	r1, [r0, #12]
 800712a:	6643      	str	r3, [r0, #100]	; 0x64
 800712c:	81c2      	strh	r2, [r0, #14]
 800712e:	6183      	str	r3, [r0, #24]
 8007130:	4619      	mov	r1, r3
 8007132:	2208      	movs	r2, #8
 8007134:	305c      	adds	r0, #92	; 0x5c
 8007136:	f7ff fdd7 	bl	8006ce8 <memset>
 800713a:	4b05      	ldr	r3, [pc, #20]	; (8007150 <std+0x38>)
 800713c:	6263      	str	r3, [r4, #36]	; 0x24
 800713e:	4b05      	ldr	r3, [pc, #20]	; (8007154 <std+0x3c>)
 8007140:	62a3      	str	r3, [r4, #40]	; 0x28
 8007142:	4b05      	ldr	r3, [pc, #20]	; (8007158 <std+0x40>)
 8007144:	62e3      	str	r3, [r4, #44]	; 0x2c
 8007146:	4b05      	ldr	r3, [pc, #20]	; (800715c <std+0x44>)
 8007148:	6224      	str	r4, [r4, #32]
 800714a:	6323      	str	r3, [r4, #48]	; 0x30
 800714c:	bd10      	pop	{r4, pc}
 800714e:	bf00      	nop
 8007150:	08007b21 	.word	0x08007b21
 8007154:	08007b43 	.word	0x08007b43
 8007158:	08007b7b 	.word	0x08007b7b
 800715c:	08007b9f 	.word	0x08007b9f

08007160 <_cleanup_r>:
 8007160:	4901      	ldr	r1, [pc, #4]	; (8007168 <_cleanup_r+0x8>)
 8007162:	f000 b8af 	b.w	80072c4 <_fwalk_reent>
 8007166:	bf00      	nop
 8007168:	080070a1 	.word	0x080070a1

0800716c <__sfmoreglue>:
 800716c:	b570      	push	{r4, r5, r6, lr}
 800716e:	1e4a      	subs	r2, r1, #1
 8007170:	2568      	movs	r5, #104	; 0x68
 8007172:	4355      	muls	r5, r2
 8007174:	460e      	mov	r6, r1
 8007176:	f105 0174 	add.w	r1, r5, #116	; 0x74
 800717a:	f000 f979 	bl	8007470 <_malloc_r>
 800717e:	4604      	mov	r4, r0
 8007180:	b140      	cbz	r0, 8007194 <__sfmoreglue+0x28>
 8007182:	2100      	movs	r1, #0
 8007184:	e9c0 1600 	strd	r1, r6, [r0]
 8007188:	300c      	adds	r0, #12
 800718a:	60a0      	str	r0, [r4, #8]
 800718c:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8007190:	f7ff fdaa 	bl	8006ce8 <memset>
 8007194:	4620      	mov	r0, r4
 8007196:	bd70      	pop	{r4, r5, r6, pc}

08007198 <__sfp_lock_acquire>:
 8007198:	4801      	ldr	r0, [pc, #4]	; (80071a0 <__sfp_lock_acquire+0x8>)
 800719a:	f000 b8b3 	b.w	8007304 <__retarget_lock_acquire_recursive>
 800719e:	bf00      	nop
 80071a0:	20002c1c 	.word	0x20002c1c

080071a4 <__sfp_lock_release>:
 80071a4:	4801      	ldr	r0, [pc, #4]	; (80071ac <__sfp_lock_release+0x8>)
 80071a6:	f000 b8ae 	b.w	8007306 <__retarget_lock_release_recursive>
 80071aa:	bf00      	nop
 80071ac:	20002c1c 	.word	0x20002c1c

080071b0 <__sinit_lock_acquire>:
 80071b0:	4801      	ldr	r0, [pc, #4]	; (80071b8 <__sinit_lock_acquire+0x8>)
 80071b2:	f000 b8a7 	b.w	8007304 <__retarget_lock_acquire_recursive>
 80071b6:	bf00      	nop
 80071b8:	20002c17 	.word	0x20002c17

080071bc <__sinit_lock_release>:
 80071bc:	4801      	ldr	r0, [pc, #4]	; (80071c4 <__sinit_lock_release+0x8>)
 80071be:	f000 b8a2 	b.w	8007306 <__retarget_lock_release_recursive>
 80071c2:	bf00      	nop
 80071c4:	20002c17 	.word	0x20002c17

080071c8 <__sinit>:
 80071c8:	b510      	push	{r4, lr}
 80071ca:	4604      	mov	r4, r0
 80071cc:	f7ff fff0 	bl	80071b0 <__sinit_lock_acquire>
 80071d0:	69a3      	ldr	r3, [r4, #24]
 80071d2:	b11b      	cbz	r3, 80071dc <__sinit+0x14>
 80071d4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80071d8:	f7ff bff0 	b.w	80071bc <__sinit_lock_release>
 80071dc:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 80071e0:	6523      	str	r3, [r4, #80]	; 0x50
 80071e2:	4b13      	ldr	r3, [pc, #76]	; (8007230 <__sinit+0x68>)
 80071e4:	4a13      	ldr	r2, [pc, #76]	; (8007234 <__sinit+0x6c>)
 80071e6:	681b      	ldr	r3, [r3, #0]
 80071e8:	62a2      	str	r2, [r4, #40]	; 0x28
 80071ea:	42a3      	cmp	r3, r4
 80071ec:	bf04      	itt	eq
 80071ee:	2301      	moveq	r3, #1
 80071f0:	61a3      	streq	r3, [r4, #24]
 80071f2:	4620      	mov	r0, r4
 80071f4:	f000 f820 	bl	8007238 <__sfp>
 80071f8:	6060      	str	r0, [r4, #4]
 80071fa:	4620      	mov	r0, r4
 80071fc:	f000 f81c 	bl	8007238 <__sfp>
 8007200:	60a0      	str	r0, [r4, #8]
 8007202:	4620      	mov	r0, r4
 8007204:	f000 f818 	bl	8007238 <__sfp>
 8007208:	2200      	movs	r2, #0
 800720a:	60e0      	str	r0, [r4, #12]
 800720c:	2104      	movs	r1, #4
 800720e:	6860      	ldr	r0, [r4, #4]
 8007210:	f7ff ff82 	bl	8007118 <std>
 8007214:	68a0      	ldr	r0, [r4, #8]
 8007216:	2201      	movs	r2, #1
 8007218:	2109      	movs	r1, #9
 800721a:	f7ff ff7d 	bl	8007118 <std>
 800721e:	68e0      	ldr	r0, [r4, #12]
 8007220:	2202      	movs	r2, #2
 8007222:	2112      	movs	r1, #18
 8007224:	f7ff ff78 	bl	8007118 <std>
 8007228:	2301      	movs	r3, #1
 800722a:	61a3      	str	r3, [r4, #24]
 800722c:	e7d2      	b.n	80071d4 <__sinit+0xc>
 800722e:	bf00      	nop
 8007230:	08007e24 	.word	0x08007e24
 8007234:	08007161 	.word	0x08007161

08007238 <__sfp>:
 8007238:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800723a:	4607      	mov	r7, r0
 800723c:	f7ff ffac 	bl	8007198 <__sfp_lock_acquire>
 8007240:	4b1e      	ldr	r3, [pc, #120]	; (80072bc <__sfp+0x84>)
 8007242:	681e      	ldr	r6, [r3, #0]
 8007244:	69b3      	ldr	r3, [r6, #24]
 8007246:	b913      	cbnz	r3, 800724e <__sfp+0x16>
 8007248:	4630      	mov	r0, r6
 800724a:	f7ff ffbd 	bl	80071c8 <__sinit>
 800724e:	3648      	adds	r6, #72	; 0x48
 8007250:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8007254:	3b01      	subs	r3, #1
 8007256:	d503      	bpl.n	8007260 <__sfp+0x28>
 8007258:	6833      	ldr	r3, [r6, #0]
 800725a:	b30b      	cbz	r3, 80072a0 <__sfp+0x68>
 800725c:	6836      	ldr	r6, [r6, #0]
 800725e:	e7f7      	b.n	8007250 <__sfp+0x18>
 8007260:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8007264:	b9d5      	cbnz	r5, 800729c <__sfp+0x64>
 8007266:	4b16      	ldr	r3, [pc, #88]	; (80072c0 <__sfp+0x88>)
 8007268:	60e3      	str	r3, [r4, #12]
 800726a:	f104 0058 	add.w	r0, r4, #88	; 0x58
 800726e:	6665      	str	r5, [r4, #100]	; 0x64
 8007270:	f000 f847 	bl	8007302 <__retarget_lock_init_recursive>
 8007274:	f7ff ff96 	bl	80071a4 <__sfp_lock_release>
 8007278:	e9c4 5501 	strd	r5, r5, [r4, #4]
 800727c:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8007280:	6025      	str	r5, [r4, #0]
 8007282:	61a5      	str	r5, [r4, #24]
 8007284:	2208      	movs	r2, #8
 8007286:	4629      	mov	r1, r5
 8007288:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 800728c:	f7ff fd2c 	bl	8006ce8 <memset>
 8007290:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8007294:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8007298:	4620      	mov	r0, r4
 800729a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800729c:	3468      	adds	r4, #104	; 0x68
 800729e:	e7d9      	b.n	8007254 <__sfp+0x1c>
 80072a0:	2104      	movs	r1, #4
 80072a2:	4638      	mov	r0, r7
 80072a4:	f7ff ff62 	bl	800716c <__sfmoreglue>
 80072a8:	4604      	mov	r4, r0
 80072aa:	6030      	str	r0, [r6, #0]
 80072ac:	2800      	cmp	r0, #0
 80072ae:	d1d5      	bne.n	800725c <__sfp+0x24>
 80072b0:	f7ff ff78 	bl	80071a4 <__sfp_lock_release>
 80072b4:	230c      	movs	r3, #12
 80072b6:	603b      	str	r3, [r7, #0]
 80072b8:	e7ee      	b.n	8007298 <__sfp+0x60>
 80072ba:	bf00      	nop
 80072bc:	08007e24 	.word	0x08007e24
 80072c0:	ffff0001 	.word	0xffff0001

080072c4 <_fwalk_reent>:
 80072c4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80072c8:	4606      	mov	r6, r0
 80072ca:	4688      	mov	r8, r1
 80072cc:	f100 0448 	add.w	r4, r0, #72	; 0x48
 80072d0:	2700      	movs	r7, #0
 80072d2:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 80072d6:	f1b9 0901 	subs.w	r9, r9, #1
 80072da:	d505      	bpl.n	80072e8 <_fwalk_reent+0x24>
 80072dc:	6824      	ldr	r4, [r4, #0]
 80072de:	2c00      	cmp	r4, #0
 80072e0:	d1f7      	bne.n	80072d2 <_fwalk_reent+0xe>
 80072e2:	4638      	mov	r0, r7
 80072e4:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80072e8:	89ab      	ldrh	r3, [r5, #12]
 80072ea:	2b01      	cmp	r3, #1
 80072ec:	d907      	bls.n	80072fe <_fwalk_reent+0x3a>
 80072ee:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 80072f2:	3301      	adds	r3, #1
 80072f4:	d003      	beq.n	80072fe <_fwalk_reent+0x3a>
 80072f6:	4629      	mov	r1, r5
 80072f8:	4630      	mov	r0, r6
 80072fa:	47c0      	blx	r8
 80072fc:	4307      	orrs	r7, r0
 80072fe:	3568      	adds	r5, #104	; 0x68
 8007300:	e7e9      	b.n	80072d6 <_fwalk_reent+0x12>

08007302 <__retarget_lock_init_recursive>:
 8007302:	4770      	bx	lr

08007304 <__retarget_lock_acquire_recursive>:
 8007304:	4770      	bx	lr

08007306 <__retarget_lock_release_recursive>:
 8007306:	4770      	bx	lr

08007308 <__swhatbuf_r>:
 8007308:	b570      	push	{r4, r5, r6, lr}
 800730a:	460e      	mov	r6, r1
 800730c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007310:	2900      	cmp	r1, #0
 8007312:	b096      	sub	sp, #88	; 0x58
 8007314:	4614      	mov	r4, r2
 8007316:	461d      	mov	r5, r3
 8007318:	da07      	bge.n	800732a <__swhatbuf_r+0x22>
 800731a:	2300      	movs	r3, #0
 800731c:	602b      	str	r3, [r5, #0]
 800731e:	89b3      	ldrh	r3, [r6, #12]
 8007320:	061a      	lsls	r2, r3, #24
 8007322:	d410      	bmi.n	8007346 <__swhatbuf_r+0x3e>
 8007324:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8007328:	e00e      	b.n	8007348 <__swhatbuf_r+0x40>
 800732a:	466a      	mov	r2, sp
 800732c:	f000 fc5e 	bl	8007bec <_fstat_r>
 8007330:	2800      	cmp	r0, #0
 8007332:	dbf2      	blt.n	800731a <__swhatbuf_r+0x12>
 8007334:	9a01      	ldr	r2, [sp, #4]
 8007336:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 800733a:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 800733e:	425a      	negs	r2, r3
 8007340:	415a      	adcs	r2, r3
 8007342:	602a      	str	r2, [r5, #0]
 8007344:	e7ee      	b.n	8007324 <__swhatbuf_r+0x1c>
 8007346:	2340      	movs	r3, #64	; 0x40
 8007348:	2000      	movs	r0, #0
 800734a:	6023      	str	r3, [r4, #0]
 800734c:	b016      	add	sp, #88	; 0x58
 800734e:	bd70      	pop	{r4, r5, r6, pc}

08007350 <__smakebuf_r>:
 8007350:	898b      	ldrh	r3, [r1, #12]
 8007352:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8007354:	079d      	lsls	r5, r3, #30
 8007356:	4606      	mov	r6, r0
 8007358:	460c      	mov	r4, r1
 800735a:	d507      	bpl.n	800736c <__smakebuf_r+0x1c>
 800735c:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8007360:	6023      	str	r3, [r4, #0]
 8007362:	6123      	str	r3, [r4, #16]
 8007364:	2301      	movs	r3, #1
 8007366:	6163      	str	r3, [r4, #20]
 8007368:	b002      	add	sp, #8
 800736a:	bd70      	pop	{r4, r5, r6, pc}
 800736c:	ab01      	add	r3, sp, #4
 800736e:	466a      	mov	r2, sp
 8007370:	f7ff ffca 	bl	8007308 <__swhatbuf_r>
 8007374:	9900      	ldr	r1, [sp, #0]
 8007376:	4605      	mov	r5, r0
 8007378:	4630      	mov	r0, r6
 800737a:	f000 f879 	bl	8007470 <_malloc_r>
 800737e:	b948      	cbnz	r0, 8007394 <__smakebuf_r+0x44>
 8007380:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8007384:	059a      	lsls	r2, r3, #22
 8007386:	d4ef      	bmi.n	8007368 <__smakebuf_r+0x18>
 8007388:	f023 0303 	bic.w	r3, r3, #3
 800738c:	f043 0302 	orr.w	r3, r3, #2
 8007390:	81a3      	strh	r3, [r4, #12]
 8007392:	e7e3      	b.n	800735c <__smakebuf_r+0xc>
 8007394:	4b0d      	ldr	r3, [pc, #52]	; (80073cc <__smakebuf_r+0x7c>)
 8007396:	62b3      	str	r3, [r6, #40]	; 0x28
 8007398:	89a3      	ldrh	r3, [r4, #12]
 800739a:	6020      	str	r0, [r4, #0]
 800739c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80073a0:	81a3      	strh	r3, [r4, #12]
 80073a2:	9b00      	ldr	r3, [sp, #0]
 80073a4:	6163      	str	r3, [r4, #20]
 80073a6:	9b01      	ldr	r3, [sp, #4]
 80073a8:	6120      	str	r0, [r4, #16]
 80073aa:	b15b      	cbz	r3, 80073c4 <__smakebuf_r+0x74>
 80073ac:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80073b0:	4630      	mov	r0, r6
 80073b2:	f000 fc2d 	bl	8007c10 <_isatty_r>
 80073b6:	b128      	cbz	r0, 80073c4 <__smakebuf_r+0x74>
 80073b8:	89a3      	ldrh	r3, [r4, #12]
 80073ba:	f023 0303 	bic.w	r3, r3, #3
 80073be:	f043 0301 	orr.w	r3, r3, #1
 80073c2:	81a3      	strh	r3, [r4, #12]
 80073c4:	89a0      	ldrh	r0, [r4, #12]
 80073c6:	4305      	orrs	r5, r0
 80073c8:	81a5      	strh	r5, [r4, #12]
 80073ca:	e7cd      	b.n	8007368 <__smakebuf_r+0x18>
 80073cc:	08007161 	.word	0x08007161

080073d0 <_free_r>:
 80073d0:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80073d2:	2900      	cmp	r1, #0
 80073d4:	d048      	beq.n	8007468 <_free_r+0x98>
 80073d6:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80073da:	9001      	str	r0, [sp, #4]
 80073dc:	2b00      	cmp	r3, #0
 80073de:	f1a1 0404 	sub.w	r4, r1, #4
 80073e2:	bfb8      	it	lt
 80073e4:	18e4      	addlt	r4, r4, r3
 80073e6:	f000 fc35 	bl	8007c54 <__malloc_lock>
 80073ea:	4a20      	ldr	r2, [pc, #128]	; (800746c <_free_r+0x9c>)
 80073ec:	9801      	ldr	r0, [sp, #4]
 80073ee:	6813      	ldr	r3, [r2, #0]
 80073f0:	4615      	mov	r5, r2
 80073f2:	b933      	cbnz	r3, 8007402 <_free_r+0x32>
 80073f4:	6063      	str	r3, [r4, #4]
 80073f6:	6014      	str	r4, [r2, #0]
 80073f8:	b003      	add	sp, #12
 80073fa:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 80073fe:	f000 bc2f 	b.w	8007c60 <__malloc_unlock>
 8007402:	42a3      	cmp	r3, r4
 8007404:	d90b      	bls.n	800741e <_free_r+0x4e>
 8007406:	6821      	ldr	r1, [r4, #0]
 8007408:	1862      	adds	r2, r4, r1
 800740a:	4293      	cmp	r3, r2
 800740c:	bf04      	itt	eq
 800740e:	681a      	ldreq	r2, [r3, #0]
 8007410:	685b      	ldreq	r3, [r3, #4]
 8007412:	6063      	str	r3, [r4, #4]
 8007414:	bf04      	itt	eq
 8007416:	1852      	addeq	r2, r2, r1
 8007418:	6022      	streq	r2, [r4, #0]
 800741a:	602c      	str	r4, [r5, #0]
 800741c:	e7ec      	b.n	80073f8 <_free_r+0x28>
 800741e:	461a      	mov	r2, r3
 8007420:	685b      	ldr	r3, [r3, #4]
 8007422:	b10b      	cbz	r3, 8007428 <_free_r+0x58>
 8007424:	42a3      	cmp	r3, r4
 8007426:	d9fa      	bls.n	800741e <_free_r+0x4e>
 8007428:	6811      	ldr	r1, [r2, #0]
 800742a:	1855      	adds	r5, r2, r1
 800742c:	42a5      	cmp	r5, r4
 800742e:	d10b      	bne.n	8007448 <_free_r+0x78>
 8007430:	6824      	ldr	r4, [r4, #0]
 8007432:	4421      	add	r1, r4
 8007434:	1854      	adds	r4, r2, r1
 8007436:	42a3      	cmp	r3, r4
 8007438:	6011      	str	r1, [r2, #0]
 800743a:	d1dd      	bne.n	80073f8 <_free_r+0x28>
 800743c:	681c      	ldr	r4, [r3, #0]
 800743e:	685b      	ldr	r3, [r3, #4]
 8007440:	6053      	str	r3, [r2, #4]
 8007442:	4421      	add	r1, r4
 8007444:	6011      	str	r1, [r2, #0]
 8007446:	e7d7      	b.n	80073f8 <_free_r+0x28>
 8007448:	d902      	bls.n	8007450 <_free_r+0x80>
 800744a:	230c      	movs	r3, #12
 800744c:	6003      	str	r3, [r0, #0]
 800744e:	e7d3      	b.n	80073f8 <_free_r+0x28>
 8007450:	6825      	ldr	r5, [r4, #0]
 8007452:	1961      	adds	r1, r4, r5
 8007454:	428b      	cmp	r3, r1
 8007456:	bf04      	itt	eq
 8007458:	6819      	ldreq	r1, [r3, #0]
 800745a:	685b      	ldreq	r3, [r3, #4]
 800745c:	6063      	str	r3, [r4, #4]
 800745e:	bf04      	itt	eq
 8007460:	1949      	addeq	r1, r1, r5
 8007462:	6021      	streq	r1, [r4, #0]
 8007464:	6054      	str	r4, [r2, #4]
 8007466:	e7c7      	b.n	80073f8 <_free_r+0x28>
 8007468:	b003      	add	sp, #12
 800746a:	bd30      	pop	{r4, r5, pc}
 800746c:	200000c0 	.word	0x200000c0

08007470 <_malloc_r>:
 8007470:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007472:	1ccd      	adds	r5, r1, #3
 8007474:	f025 0503 	bic.w	r5, r5, #3
 8007478:	3508      	adds	r5, #8
 800747a:	2d0c      	cmp	r5, #12
 800747c:	bf38      	it	cc
 800747e:	250c      	movcc	r5, #12
 8007480:	2d00      	cmp	r5, #0
 8007482:	4606      	mov	r6, r0
 8007484:	db01      	blt.n	800748a <_malloc_r+0x1a>
 8007486:	42a9      	cmp	r1, r5
 8007488:	d903      	bls.n	8007492 <_malloc_r+0x22>
 800748a:	230c      	movs	r3, #12
 800748c:	6033      	str	r3, [r6, #0]
 800748e:	2000      	movs	r0, #0
 8007490:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8007492:	f000 fbdf 	bl	8007c54 <__malloc_lock>
 8007496:	4921      	ldr	r1, [pc, #132]	; (800751c <_malloc_r+0xac>)
 8007498:	680a      	ldr	r2, [r1, #0]
 800749a:	4614      	mov	r4, r2
 800749c:	b99c      	cbnz	r4, 80074c6 <_malloc_r+0x56>
 800749e:	4f20      	ldr	r7, [pc, #128]	; (8007520 <_malloc_r+0xb0>)
 80074a0:	683b      	ldr	r3, [r7, #0]
 80074a2:	b923      	cbnz	r3, 80074ae <_malloc_r+0x3e>
 80074a4:	4621      	mov	r1, r4
 80074a6:	4630      	mov	r0, r6
 80074a8:	f000 fb2a 	bl	8007b00 <_sbrk_r>
 80074ac:	6038      	str	r0, [r7, #0]
 80074ae:	4629      	mov	r1, r5
 80074b0:	4630      	mov	r0, r6
 80074b2:	f000 fb25 	bl	8007b00 <_sbrk_r>
 80074b6:	1c43      	adds	r3, r0, #1
 80074b8:	d123      	bne.n	8007502 <_malloc_r+0x92>
 80074ba:	230c      	movs	r3, #12
 80074bc:	6033      	str	r3, [r6, #0]
 80074be:	4630      	mov	r0, r6
 80074c0:	f000 fbce 	bl	8007c60 <__malloc_unlock>
 80074c4:	e7e3      	b.n	800748e <_malloc_r+0x1e>
 80074c6:	6823      	ldr	r3, [r4, #0]
 80074c8:	1b5b      	subs	r3, r3, r5
 80074ca:	d417      	bmi.n	80074fc <_malloc_r+0x8c>
 80074cc:	2b0b      	cmp	r3, #11
 80074ce:	d903      	bls.n	80074d8 <_malloc_r+0x68>
 80074d0:	6023      	str	r3, [r4, #0]
 80074d2:	441c      	add	r4, r3
 80074d4:	6025      	str	r5, [r4, #0]
 80074d6:	e004      	b.n	80074e2 <_malloc_r+0x72>
 80074d8:	6863      	ldr	r3, [r4, #4]
 80074da:	42a2      	cmp	r2, r4
 80074dc:	bf0c      	ite	eq
 80074de:	600b      	streq	r3, [r1, #0]
 80074e0:	6053      	strne	r3, [r2, #4]
 80074e2:	4630      	mov	r0, r6
 80074e4:	f000 fbbc 	bl	8007c60 <__malloc_unlock>
 80074e8:	f104 000b 	add.w	r0, r4, #11
 80074ec:	1d23      	adds	r3, r4, #4
 80074ee:	f020 0007 	bic.w	r0, r0, #7
 80074f2:	1ac2      	subs	r2, r0, r3
 80074f4:	d0cc      	beq.n	8007490 <_malloc_r+0x20>
 80074f6:	1a1b      	subs	r3, r3, r0
 80074f8:	50a3      	str	r3, [r4, r2]
 80074fa:	e7c9      	b.n	8007490 <_malloc_r+0x20>
 80074fc:	4622      	mov	r2, r4
 80074fe:	6864      	ldr	r4, [r4, #4]
 8007500:	e7cc      	b.n	800749c <_malloc_r+0x2c>
 8007502:	1cc4      	adds	r4, r0, #3
 8007504:	f024 0403 	bic.w	r4, r4, #3
 8007508:	42a0      	cmp	r0, r4
 800750a:	d0e3      	beq.n	80074d4 <_malloc_r+0x64>
 800750c:	1a21      	subs	r1, r4, r0
 800750e:	4630      	mov	r0, r6
 8007510:	f000 faf6 	bl	8007b00 <_sbrk_r>
 8007514:	3001      	adds	r0, #1
 8007516:	d1dd      	bne.n	80074d4 <_malloc_r+0x64>
 8007518:	e7cf      	b.n	80074ba <_malloc_r+0x4a>
 800751a:	bf00      	nop
 800751c:	200000c0 	.word	0x200000c0
 8007520:	200000c4 	.word	0x200000c4

08007524 <__sfputc_r>:
 8007524:	6893      	ldr	r3, [r2, #8]
 8007526:	3b01      	subs	r3, #1
 8007528:	2b00      	cmp	r3, #0
 800752a:	b410      	push	{r4}
 800752c:	6093      	str	r3, [r2, #8]
 800752e:	da08      	bge.n	8007542 <__sfputc_r+0x1e>
 8007530:	6994      	ldr	r4, [r2, #24]
 8007532:	42a3      	cmp	r3, r4
 8007534:	db01      	blt.n	800753a <__sfputc_r+0x16>
 8007536:	290a      	cmp	r1, #10
 8007538:	d103      	bne.n	8007542 <__sfputc_r+0x1e>
 800753a:	f85d 4b04 	ldr.w	r4, [sp], #4
 800753e:	f7ff bc69 	b.w	8006e14 <__swbuf_r>
 8007542:	6813      	ldr	r3, [r2, #0]
 8007544:	1c58      	adds	r0, r3, #1
 8007546:	6010      	str	r0, [r2, #0]
 8007548:	7019      	strb	r1, [r3, #0]
 800754a:	4608      	mov	r0, r1
 800754c:	f85d 4b04 	ldr.w	r4, [sp], #4
 8007550:	4770      	bx	lr

08007552 <__sfputs_r>:
 8007552:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007554:	4606      	mov	r6, r0
 8007556:	460f      	mov	r7, r1
 8007558:	4614      	mov	r4, r2
 800755a:	18d5      	adds	r5, r2, r3
 800755c:	42ac      	cmp	r4, r5
 800755e:	d101      	bne.n	8007564 <__sfputs_r+0x12>
 8007560:	2000      	movs	r0, #0
 8007562:	e007      	b.n	8007574 <__sfputs_r+0x22>
 8007564:	f814 1b01 	ldrb.w	r1, [r4], #1
 8007568:	463a      	mov	r2, r7
 800756a:	4630      	mov	r0, r6
 800756c:	f7ff ffda 	bl	8007524 <__sfputc_r>
 8007570:	1c43      	adds	r3, r0, #1
 8007572:	d1f3      	bne.n	800755c <__sfputs_r+0xa>
 8007574:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08007578 <_vfiprintf_r>:
 8007578:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800757c:	460d      	mov	r5, r1
 800757e:	b09d      	sub	sp, #116	; 0x74
 8007580:	4614      	mov	r4, r2
 8007582:	4698      	mov	r8, r3
 8007584:	4606      	mov	r6, r0
 8007586:	b118      	cbz	r0, 8007590 <_vfiprintf_r+0x18>
 8007588:	6983      	ldr	r3, [r0, #24]
 800758a:	b90b      	cbnz	r3, 8007590 <_vfiprintf_r+0x18>
 800758c:	f7ff fe1c 	bl	80071c8 <__sinit>
 8007590:	4b89      	ldr	r3, [pc, #548]	; (80077b8 <_vfiprintf_r+0x240>)
 8007592:	429d      	cmp	r5, r3
 8007594:	d11b      	bne.n	80075ce <_vfiprintf_r+0x56>
 8007596:	6875      	ldr	r5, [r6, #4]
 8007598:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800759a:	07d9      	lsls	r1, r3, #31
 800759c:	d405      	bmi.n	80075aa <_vfiprintf_r+0x32>
 800759e:	89ab      	ldrh	r3, [r5, #12]
 80075a0:	059a      	lsls	r2, r3, #22
 80075a2:	d402      	bmi.n	80075aa <_vfiprintf_r+0x32>
 80075a4:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80075a6:	f7ff fead 	bl	8007304 <__retarget_lock_acquire_recursive>
 80075aa:	89ab      	ldrh	r3, [r5, #12]
 80075ac:	071b      	lsls	r3, r3, #28
 80075ae:	d501      	bpl.n	80075b4 <_vfiprintf_r+0x3c>
 80075b0:	692b      	ldr	r3, [r5, #16]
 80075b2:	b9eb      	cbnz	r3, 80075f0 <_vfiprintf_r+0x78>
 80075b4:	4629      	mov	r1, r5
 80075b6:	4630      	mov	r0, r6
 80075b8:	f7ff fc7e 	bl	8006eb8 <__swsetup_r>
 80075bc:	b1c0      	cbz	r0, 80075f0 <_vfiprintf_r+0x78>
 80075be:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80075c0:	07dc      	lsls	r4, r3, #31
 80075c2:	d50e      	bpl.n	80075e2 <_vfiprintf_r+0x6a>
 80075c4:	f04f 30ff 	mov.w	r0, #4294967295
 80075c8:	b01d      	add	sp, #116	; 0x74
 80075ca:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80075ce:	4b7b      	ldr	r3, [pc, #492]	; (80077bc <_vfiprintf_r+0x244>)
 80075d0:	429d      	cmp	r5, r3
 80075d2:	d101      	bne.n	80075d8 <_vfiprintf_r+0x60>
 80075d4:	68b5      	ldr	r5, [r6, #8]
 80075d6:	e7df      	b.n	8007598 <_vfiprintf_r+0x20>
 80075d8:	4b79      	ldr	r3, [pc, #484]	; (80077c0 <_vfiprintf_r+0x248>)
 80075da:	429d      	cmp	r5, r3
 80075dc:	bf08      	it	eq
 80075de:	68f5      	ldreq	r5, [r6, #12]
 80075e0:	e7da      	b.n	8007598 <_vfiprintf_r+0x20>
 80075e2:	89ab      	ldrh	r3, [r5, #12]
 80075e4:	0598      	lsls	r0, r3, #22
 80075e6:	d4ed      	bmi.n	80075c4 <_vfiprintf_r+0x4c>
 80075e8:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80075ea:	f7ff fe8c 	bl	8007306 <__retarget_lock_release_recursive>
 80075ee:	e7e9      	b.n	80075c4 <_vfiprintf_r+0x4c>
 80075f0:	2300      	movs	r3, #0
 80075f2:	9309      	str	r3, [sp, #36]	; 0x24
 80075f4:	2320      	movs	r3, #32
 80075f6:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80075fa:	f8cd 800c 	str.w	r8, [sp, #12]
 80075fe:	2330      	movs	r3, #48	; 0x30
 8007600:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 80077c4 <_vfiprintf_r+0x24c>
 8007604:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8007608:	f04f 0901 	mov.w	r9, #1
 800760c:	4623      	mov	r3, r4
 800760e:	469a      	mov	sl, r3
 8007610:	f813 2b01 	ldrb.w	r2, [r3], #1
 8007614:	b10a      	cbz	r2, 800761a <_vfiprintf_r+0xa2>
 8007616:	2a25      	cmp	r2, #37	; 0x25
 8007618:	d1f9      	bne.n	800760e <_vfiprintf_r+0x96>
 800761a:	ebba 0b04 	subs.w	fp, sl, r4
 800761e:	d00b      	beq.n	8007638 <_vfiprintf_r+0xc0>
 8007620:	465b      	mov	r3, fp
 8007622:	4622      	mov	r2, r4
 8007624:	4629      	mov	r1, r5
 8007626:	4630      	mov	r0, r6
 8007628:	f7ff ff93 	bl	8007552 <__sfputs_r>
 800762c:	3001      	adds	r0, #1
 800762e:	f000 80aa 	beq.w	8007786 <_vfiprintf_r+0x20e>
 8007632:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8007634:	445a      	add	r2, fp
 8007636:	9209      	str	r2, [sp, #36]	; 0x24
 8007638:	f89a 3000 	ldrb.w	r3, [sl]
 800763c:	2b00      	cmp	r3, #0
 800763e:	f000 80a2 	beq.w	8007786 <_vfiprintf_r+0x20e>
 8007642:	2300      	movs	r3, #0
 8007644:	f04f 32ff 	mov.w	r2, #4294967295
 8007648:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800764c:	f10a 0a01 	add.w	sl, sl, #1
 8007650:	9304      	str	r3, [sp, #16]
 8007652:	9307      	str	r3, [sp, #28]
 8007654:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8007658:	931a      	str	r3, [sp, #104]	; 0x68
 800765a:	4654      	mov	r4, sl
 800765c:	2205      	movs	r2, #5
 800765e:	f814 1b01 	ldrb.w	r1, [r4], #1
 8007662:	4858      	ldr	r0, [pc, #352]	; (80077c4 <_vfiprintf_r+0x24c>)
 8007664:	f7f8 fe54 	bl	8000310 <memchr>
 8007668:	9a04      	ldr	r2, [sp, #16]
 800766a:	b9d8      	cbnz	r0, 80076a4 <_vfiprintf_r+0x12c>
 800766c:	06d1      	lsls	r1, r2, #27
 800766e:	bf44      	itt	mi
 8007670:	2320      	movmi	r3, #32
 8007672:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8007676:	0713      	lsls	r3, r2, #28
 8007678:	bf44      	itt	mi
 800767a:	232b      	movmi	r3, #43	; 0x2b
 800767c:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8007680:	f89a 3000 	ldrb.w	r3, [sl]
 8007684:	2b2a      	cmp	r3, #42	; 0x2a
 8007686:	d015      	beq.n	80076b4 <_vfiprintf_r+0x13c>
 8007688:	9a07      	ldr	r2, [sp, #28]
 800768a:	4654      	mov	r4, sl
 800768c:	2000      	movs	r0, #0
 800768e:	f04f 0c0a 	mov.w	ip, #10
 8007692:	4621      	mov	r1, r4
 8007694:	f811 3b01 	ldrb.w	r3, [r1], #1
 8007698:	3b30      	subs	r3, #48	; 0x30
 800769a:	2b09      	cmp	r3, #9
 800769c:	d94e      	bls.n	800773c <_vfiprintf_r+0x1c4>
 800769e:	b1b0      	cbz	r0, 80076ce <_vfiprintf_r+0x156>
 80076a0:	9207      	str	r2, [sp, #28]
 80076a2:	e014      	b.n	80076ce <_vfiprintf_r+0x156>
 80076a4:	eba0 0308 	sub.w	r3, r0, r8
 80076a8:	fa09 f303 	lsl.w	r3, r9, r3
 80076ac:	4313      	orrs	r3, r2
 80076ae:	9304      	str	r3, [sp, #16]
 80076b0:	46a2      	mov	sl, r4
 80076b2:	e7d2      	b.n	800765a <_vfiprintf_r+0xe2>
 80076b4:	9b03      	ldr	r3, [sp, #12]
 80076b6:	1d19      	adds	r1, r3, #4
 80076b8:	681b      	ldr	r3, [r3, #0]
 80076ba:	9103      	str	r1, [sp, #12]
 80076bc:	2b00      	cmp	r3, #0
 80076be:	bfbb      	ittet	lt
 80076c0:	425b      	neglt	r3, r3
 80076c2:	f042 0202 	orrlt.w	r2, r2, #2
 80076c6:	9307      	strge	r3, [sp, #28]
 80076c8:	9307      	strlt	r3, [sp, #28]
 80076ca:	bfb8      	it	lt
 80076cc:	9204      	strlt	r2, [sp, #16]
 80076ce:	7823      	ldrb	r3, [r4, #0]
 80076d0:	2b2e      	cmp	r3, #46	; 0x2e
 80076d2:	d10c      	bne.n	80076ee <_vfiprintf_r+0x176>
 80076d4:	7863      	ldrb	r3, [r4, #1]
 80076d6:	2b2a      	cmp	r3, #42	; 0x2a
 80076d8:	d135      	bne.n	8007746 <_vfiprintf_r+0x1ce>
 80076da:	9b03      	ldr	r3, [sp, #12]
 80076dc:	1d1a      	adds	r2, r3, #4
 80076de:	681b      	ldr	r3, [r3, #0]
 80076e0:	9203      	str	r2, [sp, #12]
 80076e2:	2b00      	cmp	r3, #0
 80076e4:	bfb8      	it	lt
 80076e6:	f04f 33ff 	movlt.w	r3, #4294967295
 80076ea:	3402      	adds	r4, #2
 80076ec:	9305      	str	r3, [sp, #20]
 80076ee:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 80077d4 <_vfiprintf_r+0x25c>
 80076f2:	7821      	ldrb	r1, [r4, #0]
 80076f4:	2203      	movs	r2, #3
 80076f6:	4650      	mov	r0, sl
 80076f8:	f7f8 fe0a 	bl	8000310 <memchr>
 80076fc:	b140      	cbz	r0, 8007710 <_vfiprintf_r+0x198>
 80076fe:	2340      	movs	r3, #64	; 0x40
 8007700:	eba0 000a 	sub.w	r0, r0, sl
 8007704:	fa03 f000 	lsl.w	r0, r3, r0
 8007708:	9b04      	ldr	r3, [sp, #16]
 800770a:	4303      	orrs	r3, r0
 800770c:	3401      	adds	r4, #1
 800770e:	9304      	str	r3, [sp, #16]
 8007710:	f814 1b01 	ldrb.w	r1, [r4], #1
 8007714:	482c      	ldr	r0, [pc, #176]	; (80077c8 <_vfiprintf_r+0x250>)
 8007716:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800771a:	2206      	movs	r2, #6
 800771c:	f7f8 fdf8 	bl	8000310 <memchr>
 8007720:	2800      	cmp	r0, #0
 8007722:	d03f      	beq.n	80077a4 <_vfiprintf_r+0x22c>
 8007724:	4b29      	ldr	r3, [pc, #164]	; (80077cc <_vfiprintf_r+0x254>)
 8007726:	bb1b      	cbnz	r3, 8007770 <_vfiprintf_r+0x1f8>
 8007728:	9b03      	ldr	r3, [sp, #12]
 800772a:	3307      	adds	r3, #7
 800772c:	f023 0307 	bic.w	r3, r3, #7
 8007730:	3308      	adds	r3, #8
 8007732:	9303      	str	r3, [sp, #12]
 8007734:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007736:	443b      	add	r3, r7
 8007738:	9309      	str	r3, [sp, #36]	; 0x24
 800773a:	e767      	b.n	800760c <_vfiprintf_r+0x94>
 800773c:	fb0c 3202 	mla	r2, ip, r2, r3
 8007740:	460c      	mov	r4, r1
 8007742:	2001      	movs	r0, #1
 8007744:	e7a5      	b.n	8007692 <_vfiprintf_r+0x11a>
 8007746:	2300      	movs	r3, #0
 8007748:	3401      	adds	r4, #1
 800774a:	9305      	str	r3, [sp, #20]
 800774c:	4619      	mov	r1, r3
 800774e:	f04f 0c0a 	mov.w	ip, #10
 8007752:	4620      	mov	r0, r4
 8007754:	f810 2b01 	ldrb.w	r2, [r0], #1
 8007758:	3a30      	subs	r2, #48	; 0x30
 800775a:	2a09      	cmp	r2, #9
 800775c:	d903      	bls.n	8007766 <_vfiprintf_r+0x1ee>
 800775e:	2b00      	cmp	r3, #0
 8007760:	d0c5      	beq.n	80076ee <_vfiprintf_r+0x176>
 8007762:	9105      	str	r1, [sp, #20]
 8007764:	e7c3      	b.n	80076ee <_vfiprintf_r+0x176>
 8007766:	fb0c 2101 	mla	r1, ip, r1, r2
 800776a:	4604      	mov	r4, r0
 800776c:	2301      	movs	r3, #1
 800776e:	e7f0      	b.n	8007752 <_vfiprintf_r+0x1da>
 8007770:	ab03      	add	r3, sp, #12
 8007772:	9300      	str	r3, [sp, #0]
 8007774:	462a      	mov	r2, r5
 8007776:	4b16      	ldr	r3, [pc, #88]	; (80077d0 <_vfiprintf_r+0x258>)
 8007778:	a904      	add	r1, sp, #16
 800777a:	4630      	mov	r0, r6
 800777c:	f3af 8000 	nop.w
 8007780:	4607      	mov	r7, r0
 8007782:	1c78      	adds	r0, r7, #1
 8007784:	d1d6      	bne.n	8007734 <_vfiprintf_r+0x1bc>
 8007786:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8007788:	07d9      	lsls	r1, r3, #31
 800778a:	d405      	bmi.n	8007798 <_vfiprintf_r+0x220>
 800778c:	89ab      	ldrh	r3, [r5, #12]
 800778e:	059a      	lsls	r2, r3, #22
 8007790:	d402      	bmi.n	8007798 <_vfiprintf_r+0x220>
 8007792:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8007794:	f7ff fdb7 	bl	8007306 <__retarget_lock_release_recursive>
 8007798:	89ab      	ldrh	r3, [r5, #12]
 800779a:	065b      	lsls	r3, r3, #25
 800779c:	f53f af12 	bmi.w	80075c4 <_vfiprintf_r+0x4c>
 80077a0:	9809      	ldr	r0, [sp, #36]	; 0x24
 80077a2:	e711      	b.n	80075c8 <_vfiprintf_r+0x50>
 80077a4:	ab03      	add	r3, sp, #12
 80077a6:	9300      	str	r3, [sp, #0]
 80077a8:	462a      	mov	r2, r5
 80077aa:	4b09      	ldr	r3, [pc, #36]	; (80077d0 <_vfiprintf_r+0x258>)
 80077ac:	a904      	add	r1, sp, #16
 80077ae:	4630      	mov	r0, r6
 80077b0:	f000 f880 	bl	80078b4 <_printf_i>
 80077b4:	e7e4      	b.n	8007780 <_vfiprintf_r+0x208>
 80077b6:	bf00      	nop
 80077b8:	08007e48 	.word	0x08007e48
 80077bc:	08007e68 	.word	0x08007e68
 80077c0:	08007e28 	.word	0x08007e28
 80077c4:	08007e88 	.word	0x08007e88
 80077c8:	08007e92 	.word	0x08007e92
 80077cc:	00000000 	.word	0x00000000
 80077d0:	08007553 	.word	0x08007553
 80077d4:	08007e8e 	.word	0x08007e8e

080077d8 <_printf_common>:
 80077d8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80077dc:	4616      	mov	r6, r2
 80077de:	4699      	mov	r9, r3
 80077e0:	688a      	ldr	r2, [r1, #8]
 80077e2:	690b      	ldr	r3, [r1, #16]
 80077e4:	f8dd 8020 	ldr.w	r8, [sp, #32]
 80077e8:	4293      	cmp	r3, r2
 80077ea:	bfb8      	it	lt
 80077ec:	4613      	movlt	r3, r2
 80077ee:	6033      	str	r3, [r6, #0]
 80077f0:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 80077f4:	4607      	mov	r7, r0
 80077f6:	460c      	mov	r4, r1
 80077f8:	b10a      	cbz	r2, 80077fe <_printf_common+0x26>
 80077fa:	3301      	adds	r3, #1
 80077fc:	6033      	str	r3, [r6, #0]
 80077fe:	6823      	ldr	r3, [r4, #0]
 8007800:	0699      	lsls	r1, r3, #26
 8007802:	bf42      	ittt	mi
 8007804:	6833      	ldrmi	r3, [r6, #0]
 8007806:	3302      	addmi	r3, #2
 8007808:	6033      	strmi	r3, [r6, #0]
 800780a:	6825      	ldr	r5, [r4, #0]
 800780c:	f015 0506 	ands.w	r5, r5, #6
 8007810:	d106      	bne.n	8007820 <_printf_common+0x48>
 8007812:	f104 0a19 	add.w	sl, r4, #25
 8007816:	68e3      	ldr	r3, [r4, #12]
 8007818:	6832      	ldr	r2, [r6, #0]
 800781a:	1a9b      	subs	r3, r3, r2
 800781c:	42ab      	cmp	r3, r5
 800781e:	dc26      	bgt.n	800786e <_printf_common+0x96>
 8007820:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8007824:	1e13      	subs	r3, r2, #0
 8007826:	6822      	ldr	r2, [r4, #0]
 8007828:	bf18      	it	ne
 800782a:	2301      	movne	r3, #1
 800782c:	0692      	lsls	r2, r2, #26
 800782e:	d42b      	bmi.n	8007888 <_printf_common+0xb0>
 8007830:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8007834:	4649      	mov	r1, r9
 8007836:	4638      	mov	r0, r7
 8007838:	47c0      	blx	r8
 800783a:	3001      	adds	r0, #1
 800783c:	d01e      	beq.n	800787c <_printf_common+0xa4>
 800783e:	6823      	ldr	r3, [r4, #0]
 8007840:	68e5      	ldr	r5, [r4, #12]
 8007842:	6832      	ldr	r2, [r6, #0]
 8007844:	f003 0306 	and.w	r3, r3, #6
 8007848:	2b04      	cmp	r3, #4
 800784a:	bf08      	it	eq
 800784c:	1aad      	subeq	r5, r5, r2
 800784e:	68a3      	ldr	r3, [r4, #8]
 8007850:	6922      	ldr	r2, [r4, #16]
 8007852:	bf0c      	ite	eq
 8007854:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8007858:	2500      	movne	r5, #0
 800785a:	4293      	cmp	r3, r2
 800785c:	bfc4      	itt	gt
 800785e:	1a9b      	subgt	r3, r3, r2
 8007860:	18ed      	addgt	r5, r5, r3
 8007862:	2600      	movs	r6, #0
 8007864:	341a      	adds	r4, #26
 8007866:	42b5      	cmp	r5, r6
 8007868:	d11a      	bne.n	80078a0 <_printf_common+0xc8>
 800786a:	2000      	movs	r0, #0
 800786c:	e008      	b.n	8007880 <_printf_common+0xa8>
 800786e:	2301      	movs	r3, #1
 8007870:	4652      	mov	r2, sl
 8007872:	4649      	mov	r1, r9
 8007874:	4638      	mov	r0, r7
 8007876:	47c0      	blx	r8
 8007878:	3001      	adds	r0, #1
 800787a:	d103      	bne.n	8007884 <_printf_common+0xac>
 800787c:	f04f 30ff 	mov.w	r0, #4294967295
 8007880:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007884:	3501      	adds	r5, #1
 8007886:	e7c6      	b.n	8007816 <_printf_common+0x3e>
 8007888:	18e1      	adds	r1, r4, r3
 800788a:	1c5a      	adds	r2, r3, #1
 800788c:	2030      	movs	r0, #48	; 0x30
 800788e:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8007892:	4422      	add	r2, r4
 8007894:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8007898:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800789c:	3302      	adds	r3, #2
 800789e:	e7c7      	b.n	8007830 <_printf_common+0x58>
 80078a0:	2301      	movs	r3, #1
 80078a2:	4622      	mov	r2, r4
 80078a4:	4649      	mov	r1, r9
 80078a6:	4638      	mov	r0, r7
 80078a8:	47c0      	blx	r8
 80078aa:	3001      	adds	r0, #1
 80078ac:	d0e6      	beq.n	800787c <_printf_common+0xa4>
 80078ae:	3601      	adds	r6, #1
 80078b0:	e7d9      	b.n	8007866 <_printf_common+0x8e>
	...

080078b4 <_printf_i>:
 80078b4:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80078b8:	460c      	mov	r4, r1
 80078ba:	4691      	mov	r9, r2
 80078bc:	7e27      	ldrb	r7, [r4, #24]
 80078be:	990c      	ldr	r1, [sp, #48]	; 0x30
 80078c0:	2f78      	cmp	r7, #120	; 0x78
 80078c2:	4680      	mov	r8, r0
 80078c4:	469a      	mov	sl, r3
 80078c6:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80078ca:	d807      	bhi.n	80078dc <_printf_i+0x28>
 80078cc:	2f62      	cmp	r7, #98	; 0x62
 80078ce:	d80a      	bhi.n	80078e6 <_printf_i+0x32>
 80078d0:	2f00      	cmp	r7, #0
 80078d2:	f000 80d8 	beq.w	8007a86 <_printf_i+0x1d2>
 80078d6:	2f58      	cmp	r7, #88	; 0x58
 80078d8:	f000 80a3 	beq.w	8007a22 <_printf_i+0x16e>
 80078dc:	f104 0642 	add.w	r6, r4, #66	; 0x42
 80078e0:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 80078e4:	e03a      	b.n	800795c <_printf_i+0xa8>
 80078e6:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 80078ea:	2b15      	cmp	r3, #21
 80078ec:	d8f6      	bhi.n	80078dc <_printf_i+0x28>
 80078ee:	a001      	add	r0, pc, #4	; (adr r0, 80078f4 <_printf_i+0x40>)
 80078f0:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 80078f4:	0800794d 	.word	0x0800794d
 80078f8:	08007961 	.word	0x08007961
 80078fc:	080078dd 	.word	0x080078dd
 8007900:	080078dd 	.word	0x080078dd
 8007904:	080078dd 	.word	0x080078dd
 8007908:	080078dd 	.word	0x080078dd
 800790c:	08007961 	.word	0x08007961
 8007910:	080078dd 	.word	0x080078dd
 8007914:	080078dd 	.word	0x080078dd
 8007918:	080078dd 	.word	0x080078dd
 800791c:	080078dd 	.word	0x080078dd
 8007920:	08007a6d 	.word	0x08007a6d
 8007924:	08007991 	.word	0x08007991
 8007928:	08007a4f 	.word	0x08007a4f
 800792c:	080078dd 	.word	0x080078dd
 8007930:	080078dd 	.word	0x080078dd
 8007934:	08007a8f 	.word	0x08007a8f
 8007938:	080078dd 	.word	0x080078dd
 800793c:	08007991 	.word	0x08007991
 8007940:	080078dd 	.word	0x080078dd
 8007944:	080078dd 	.word	0x080078dd
 8007948:	08007a57 	.word	0x08007a57
 800794c:	680b      	ldr	r3, [r1, #0]
 800794e:	1d1a      	adds	r2, r3, #4
 8007950:	681b      	ldr	r3, [r3, #0]
 8007952:	600a      	str	r2, [r1, #0]
 8007954:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8007958:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800795c:	2301      	movs	r3, #1
 800795e:	e0a3      	b.n	8007aa8 <_printf_i+0x1f4>
 8007960:	6825      	ldr	r5, [r4, #0]
 8007962:	6808      	ldr	r0, [r1, #0]
 8007964:	062e      	lsls	r6, r5, #24
 8007966:	f100 0304 	add.w	r3, r0, #4
 800796a:	d50a      	bpl.n	8007982 <_printf_i+0xce>
 800796c:	6805      	ldr	r5, [r0, #0]
 800796e:	600b      	str	r3, [r1, #0]
 8007970:	2d00      	cmp	r5, #0
 8007972:	da03      	bge.n	800797c <_printf_i+0xc8>
 8007974:	232d      	movs	r3, #45	; 0x2d
 8007976:	426d      	negs	r5, r5
 8007978:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800797c:	485e      	ldr	r0, [pc, #376]	; (8007af8 <_printf_i+0x244>)
 800797e:	230a      	movs	r3, #10
 8007980:	e019      	b.n	80079b6 <_printf_i+0x102>
 8007982:	f015 0f40 	tst.w	r5, #64	; 0x40
 8007986:	6805      	ldr	r5, [r0, #0]
 8007988:	600b      	str	r3, [r1, #0]
 800798a:	bf18      	it	ne
 800798c:	b22d      	sxthne	r5, r5
 800798e:	e7ef      	b.n	8007970 <_printf_i+0xbc>
 8007990:	680b      	ldr	r3, [r1, #0]
 8007992:	6825      	ldr	r5, [r4, #0]
 8007994:	1d18      	adds	r0, r3, #4
 8007996:	6008      	str	r0, [r1, #0]
 8007998:	0628      	lsls	r0, r5, #24
 800799a:	d501      	bpl.n	80079a0 <_printf_i+0xec>
 800799c:	681d      	ldr	r5, [r3, #0]
 800799e:	e002      	b.n	80079a6 <_printf_i+0xf2>
 80079a0:	0669      	lsls	r1, r5, #25
 80079a2:	d5fb      	bpl.n	800799c <_printf_i+0xe8>
 80079a4:	881d      	ldrh	r5, [r3, #0]
 80079a6:	4854      	ldr	r0, [pc, #336]	; (8007af8 <_printf_i+0x244>)
 80079a8:	2f6f      	cmp	r7, #111	; 0x6f
 80079aa:	bf0c      	ite	eq
 80079ac:	2308      	moveq	r3, #8
 80079ae:	230a      	movne	r3, #10
 80079b0:	2100      	movs	r1, #0
 80079b2:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 80079b6:	6866      	ldr	r6, [r4, #4]
 80079b8:	60a6      	str	r6, [r4, #8]
 80079ba:	2e00      	cmp	r6, #0
 80079bc:	bfa2      	ittt	ge
 80079be:	6821      	ldrge	r1, [r4, #0]
 80079c0:	f021 0104 	bicge.w	r1, r1, #4
 80079c4:	6021      	strge	r1, [r4, #0]
 80079c6:	b90d      	cbnz	r5, 80079cc <_printf_i+0x118>
 80079c8:	2e00      	cmp	r6, #0
 80079ca:	d04d      	beq.n	8007a68 <_printf_i+0x1b4>
 80079cc:	4616      	mov	r6, r2
 80079ce:	fbb5 f1f3 	udiv	r1, r5, r3
 80079d2:	fb03 5711 	mls	r7, r3, r1, r5
 80079d6:	5dc7      	ldrb	r7, [r0, r7]
 80079d8:	f806 7d01 	strb.w	r7, [r6, #-1]!
 80079dc:	462f      	mov	r7, r5
 80079de:	42bb      	cmp	r3, r7
 80079e0:	460d      	mov	r5, r1
 80079e2:	d9f4      	bls.n	80079ce <_printf_i+0x11a>
 80079e4:	2b08      	cmp	r3, #8
 80079e6:	d10b      	bne.n	8007a00 <_printf_i+0x14c>
 80079e8:	6823      	ldr	r3, [r4, #0]
 80079ea:	07df      	lsls	r7, r3, #31
 80079ec:	d508      	bpl.n	8007a00 <_printf_i+0x14c>
 80079ee:	6923      	ldr	r3, [r4, #16]
 80079f0:	6861      	ldr	r1, [r4, #4]
 80079f2:	4299      	cmp	r1, r3
 80079f4:	bfde      	ittt	le
 80079f6:	2330      	movle	r3, #48	; 0x30
 80079f8:	f806 3c01 	strble.w	r3, [r6, #-1]
 80079fc:	f106 36ff 	addle.w	r6, r6, #4294967295
 8007a00:	1b92      	subs	r2, r2, r6
 8007a02:	6122      	str	r2, [r4, #16]
 8007a04:	f8cd a000 	str.w	sl, [sp]
 8007a08:	464b      	mov	r3, r9
 8007a0a:	aa03      	add	r2, sp, #12
 8007a0c:	4621      	mov	r1, r4
 8007a0e:	4640      	mov	r0, r8
 8007a10:	f7ff fee2 	bl	80077d8 <_printf_common>
 8007a14:	3001      	adds	r0, #1
 8007a16:	d14c      	bne.n	8007ab2 <_printf_i+0x1fe>
 8007a18:	f04f 30ff 	mov.w	r0, #4294967295
 8007a1c:	b004      	add	sp, #16
 8007a1e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007a22:	4835      	ldr	r0, [pc, #212]	; (8007af8 <_printf_i+0x244>)
 8007a24:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8007a28:	6823      	ldr	r3, [r4, #0]
 8007a2a:	680e      	ldr	r6, [r1, #0]
 8007a2c:	061f      	lsls	r7, r3, #24
 8007a2e:	f856 5b04 	ldr.w	r5, [r6], #4
 8007a32:	600e      	str	r6, [r1, #0]
 8007a34:	d514      	bpl.n	8007a60 <_printf_i+0x1ac>
 8007a36:	07d9      	lsls	r1, r3, #31
 8007a38:	bf44      	itt	mi
 8007a3a:	f043 0320 	orrmi.w	r3, r3, #32
 8007a3e:	6023      	strmi	r3, [r4, #0]
 8007a40:	b91d      	cbnz	r5, 8007a4a <_printf_i+0x196>
 8007a42:	6823      	ldr	r3, [r4, #0]
 8007a44:	f023 0320 	bic.w	r3, r3, #32
 8007a48:	6023      	str	r3, [r4, #0]
 8007a4a:	2310      	movs	r3, #16
 8007a4c:	e7b0      	b.n	80079b0 <_printf_i+0xfc>
 8007a4e:	6823      	ldr	r3, [r4, #0]
 8007a50:	f043 0320 	orr.w	r3, r3, #32
 8007a54:	6023      	str	r3, [r4, #0]
 8007a56:	2378      	movs	r3, #120	; 0x78
 8007a58:	4828      	ldr	r0, [pc, #160]	; (8007afc <_printf_i+0x248>)
 8007a5a:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8007a5e:	e7e3      	b.n	8007a28 <_printf_i+0x174>
 8007a60:	065e      	lsls	r6, r3, #25
 8007a62:	bf48      	it	mi
 8007a64:	b2ad      	uxthmi	r5, r5
 8007a66:	e7e6      	b.n	8007a36 <_printf_i+0x182>
 8007a68:	4616      	mov	r6, r2
 8007a6a:	e7bb      	b.n	80079e4 <_printf_i+0x130>
 8007a6c:	680b      	ldr	r3, [r1, #0]
 8007a6e:	6826      	ldr	r6, [r4, #0]
 8007a70:	6960      	ldr	r0, [r4, #20]
 8007a72:	1d1d      	adds	r5, r3, #4
 8007a74:	600d      	str	r5, [r1, #0]
 8007a76:	0635      	lsls	r5, r6, #24
 8007a78:	681b      	ldr	r3, [r3, #0]
 8007a7a:	d501      	bpl.n	8007a80 <_printf_i+0x1cc>
 8007a7c:	6018      	str	r0, [r3, #0]
 8007a7e:	e002      	b.n	8007a86 <_printf_i+0x1d2>
 8007a80:	0671      	lsls	r1, r6, #25
 8007a82:	d5fb      	bpl.n	8007a7c <_printf_i+0x1c8>
 8007a84:	8018      	strh	r0, [r3, #0]
 8007a86:	2300      	movs	r3, #0
 8007a88:	6123      	str	r3, [r4, #16]
 8007a8a:	4616      	mov	r6, r2
 8007a8c:	e7ba      	b.n	8007a04 <_printf_i+0x150>
 8007a8e:	680b      	ldr	r3, [r1, #0]
 8007a90:	1d1a      	adds	r2, r3, #4
 8007a92:	600a      	str	r2, [r1, #0]
 8007a94:	681e      	ldr	r6, [r3, #0]
 8007a96:	6862      	ldr	r2, [r4, #4]
 8007a98:	2100      	movs	r1, #0
 8007a9a:	4630      	mov	r0, r6
 8007a9c:	f7f8 fc38 	bl	8000310 <memchr>
 8007aa0:	b108      	cbz	r0, 8007aa6 <_printf_i+0x1f2>
 8007aa2:	1b80      	subs	r0, r0, r6
 8007aa4:	6060      	str	r0, [r4, #4]
 8007aa6:	6863      	ldr	r3, [r4, #4]
 8007aa8:	6123      	str	r3, [r4, #16]
 8007aaa:	2300      	movs	r3, #0
 8007aac:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8007ab0:	e7a8      	b.n	8007a04 <_printf_i+0x150>
 8007ab2:	6923      	ldr	r3, [r4, #16]
 8007ab4:	4632      	mov	r2, r6
 8007ab6:	4649      	mov	r1, r9
 8007ab8:	4640      	mov	r0, r8
 8007aba:	47d0      	blx	sl
 8007abc:	3001      	adds	r0, #1
 8007abe:	d0ab      	beq.n	8007a18 <_printf_i+0x164>
 8007ac0:	6823      	ldr	r3, [r4, #0]
 8007ac2:	079b      	lsls	r3, r3, #30
 8007ac4:	d413      	bmi.n	8007aee <_printf_i+0x23a>
 8007ac6:	68e0      	ldr	r0, [r4, #12]
 8007ac8:	9b03      	ldr	r3, [sp, #12]
 8007aca:	4298      	cmp	r0, r3
 8007acc:	bfb8      	it	lt
 8007ace:	4618      	movlt	r0, r3
 8007ad0:	e7a4      	b.n	8007a1c <_printf_i+0x168>
 8007ad2:	2301      	movs	r3, #1
 8007ad4:	4632      	mov	r2, r6
 8007ad6:	4649      	mov	r1, r9
 8007ad8:	4640      	mov	r0, r8
 8007ada:	47d0      	blx	sl
 8007adc:	3001      	adds	r0, #1
 8007ade:	d09b      	beq.n	8007a18 <_printf_i+0x164>
 8007ae0:	3501      	adds	r5, #1
 8007ae2:	68e3      	ldr	r3, [r4, #12]
 8007ae4:	9903      	ldr	r1, [sp, #12]
 8007ae6:	1a5b      	subs	r3, r3, r1
 8007ae8:	42ab      	cmp	r3, r5
 8007aea:	dcf2      	bgt.n	8007ad2 <_printf_i+0x21e>
 8007aec:	e7eb      	b.n	8007ac6 <_printf_i+0x212>
 8007aee:	2500      	movs	r5, #0
 8007af0:	f104 0619 	add.w	r6, r4, #25
 8007af4:	e7f5      	b.n	8007ae2 <_printf_i+0x22e>
 8007af6:	bf00      	nop
 8007af8:	08007e99 	.word	0x08007e99
 8007afc:	08007eaa 	.word	0x08007eaa

08007b00 <_sbrk_r>:
 8007b00:	b538      	push	{r3, r4, r5, lr}
 8007b02:	4d06      	ldr	r5, [pc, #24]	; (8007b1c <_sbrk_r+0x1c>)
 8007b04:	2300      	movs	r3, #0
 8007b06:	4604      	mov	r4, r0
 8007b08:	4608      	mov	r0, r1
 8007b0a:	602b      	str	r3, [r5, #0]
 8007b0c:	f7f9 fb5a 	bl	80011c4 <_sbrk>
 8007b10:	1c43      	adds	r3, r0, #1
 8007b12:	d102      	bne.n	8007b1a <_sbrk_r+0x1a>
 8007b14:	682b      	ldr	r3, [r5, #0]
 8007b16:	b103      	cbz	r3, 8007b1a <_sbrk_r+0x1a>
 8007b18:	6023      	str	r3, [r4, #0]
 8007b1a:	bd38      	pop	{r3, r4, r5, pc}
 8007b1c:	20002c20 	.word	0x20002c20

08007b20 <__sread>:
 8007b20:	b510      	push	{r4, lr}
 8007b22:	460c      	mov	r4, r1
 8007b24:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007b28:	f000 f8a0 	bl	8007c6c <_read_r>
 8007b2c:	2800      	cmp	r0, #0
 8007b2e:	bfab      	itete	ge
 8007b30:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8007b32:	89a3      	ldrhlt	r3, [r4, #12]
 8007b34:	181b      	addge	r3, r3, r0
 8007b36:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8007b3a:	bfac      	ite	ge
 8007b3c:	6563      	strge	r3, [r4, #84]	; 0x54
 8007b3e:	81a3      	strhlt	r3, [r4, #12]
 8007b40:	bd10      	pop	{r4, pc}

08007b42 <__swrite>:
 8007b42:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007b46:	461f      	mov	r7, r3
 8007b48:	898b      	ldrh	r3, [r1, #12]
 8007b4a:	05db      	lsls	r3, r3, #23
 8007b4c:	4605      	mov	r5, r0
 8007b4e:	460c      	mov	r4, r1
 8007b50:	4616      	mov	r6, r2
 8007b52:	d505      	bpl.n	8007b60 <__swrite+0x1e>
 8007b54:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007b58:	2302      	movs	r3, #2
 8007b5a:	2200      	movs	r2, #0
 8007b5c:	f000 f868 	bl	8007c30 <_lseek_r>
 8007b60:	89a3      	ldrh	r3, [r4, #12]
 8007b62:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8007b66:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8007b6a:	81a3      	strh	r3, [r4, #12]
 8007b6c:	4632      	mov	r2, r6
 8007b6e:	463b      	mov	r3, r7
 8007b70:	4628      	mov	r0, r5
 8007b72:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8007b76:	f000 b817 	b.w	8007ba8 <_write_r>

08007b7a <__sseek>:
 8007b7a:	b510      	push	{r4, lr}
 8007b7c:	460c      	mov	r4, r1
 8007b7e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007b82:	f000 f855 	bl	8007c30 <_lseek_r>
 8007b86:	1c43      	adds	r3, r0, #1
 8007b88:	89a3      	ldrh	r3, [r4, #12]
 8007b8a:	bf15      	itete	ne
 8007b8c:	6560      	strne	r0, [r4, #84]	; 0x54
 8007b8e:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8007b92:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8007b96:	81a3      	strheq	r3, [r4, #12]
 8007b98:	bf18      	it	ne
 8007b9a:	81a3      	strhne	r3, [r4, #12]
 8007b9c:	bd10      	pop	{r4, pc}

08007b9e <__sclose>:
 8007b9e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007ba2:	f000 b813 	b.w	8007bcc <_close_r>
	...

08007ba8 <_write_r>:
 8007ba8:	b538      	push	{r3, r4, r5, lr}
 8007baa:	4d07      	ldr	r5, [pc, #28]	; (8007bc8 <_write_r+0x20>)
 8007bac:	4604      	mov	r4, r0
 8007bae:	4608      	mov	r0, r1
 8007bb0:	4611      	mov	r1, r2
 8007bb2:	2200      	movs	r2, #0
 8007bb4:	602a      	str	r2, [r5, #0]
 8007bb6:	461a      	mov	r2, r3
 8007bb8:	f7f8 fd9a 	bl	80006f0 <_write>
 8007bbc:	1c43      	adds	r3, r0, #1
 8007bbe:	d102      	bne.n	8007bc6 <_write_r+0x1e>
 8007bc0:	682b      	ldr	r3, [r5, #0]
 8007bc2:	b103      	cbz	r3, 8007bc6 <_write_r+0x1e>
 8007bc4:	6023      	str	r3, [r4, #0]
 8007bc6:	bd38      	pop	{r3, r4, r5, pc}
 8007bc8:	20002c20 	.word	0x20002c20

08007bcc <_close_r>:
 8007bcc:	b538      	push	{r3, r4, r5, lr}
 8007bce:	4d06      	ldr	r5, [pc, #24]	; (8007be8 <_close_r+0x1c>)
 8007bd0:	2300      	movs	r3, #0
 8007bd2:	4604      	mov	r4, r0
 8007bd4:	4608      	mov	r0, r1
 8007bd6:	602b      	str	r3, [r5, #0]
 8007bd8:	f7f9 fabf 	bl	800115a <_close>
 8007bdc:	1c43      	adds	r3, r0, #1
 8007bde:	d102      	bne.n	8007be6 <_close_r+0x1a>
 8007be0:	682b      	ldr	r3, [r5, #0]
 8007be2:	b103      	cbz	r3, 8007be6 <_close_r+0x1a>
 8007be4:	6023      	str	r3, [r4, #0]
 8007be6:	bd38      	pop	{r3, r4, r5, pc}
 8007be8:	20002c20 	.word	0x20002c20

08007bec <_fstat_r>:
 8007bec:	b538      	push	{r3, r4, r5, lr}
 8007bee:	4d07      	ldr	r5, [pc, #28]	; (8007c0c <_fstat_r+0x20>)
 8007bf0:	2300      	movs	r3, #0
 8007bf2:	4604      	mov	r4, r0
 8007bf4:	4608      	mov	r0, r1
 8007bf6:	4611      	mov	r1, r2
 8007bf8:	602b      	str	r3, [r5, #0]
 8007bfa:	f7f9 faba 	bl	8001172 <_fstat>
 8007bfe:	1c43      	adds	r3, r0, #1
 8007c00:	d102      	bne.n	8007c08 <_fstat_r+0x1c>
 8007c02:	682b      	ldr	r3, [r5, #0]
 8007c04:	b103      	cbz	r3, 8007c08 <_fstat_r+0x1c>
 8007c06:	6023      	str	r3, [r4, #0]
 8007c08:	bd38      	pop	{r3, r4, r5, pc}
 8007c0a:	bf00      	nop
 8007c0c:	20002c20 	.word	0x20002c20

08007c10 <_isatty_r>:
 8007c10:	b538      	push	{r3, r4, r5, lr}
 8007c12:	4d06      	ldr	r5, [pc, #24]	; (8007c2c <_isatty_r+0x1c>)
 8007c14:	2300      	movs	r3, #0
 8007c16:	4604      	mov	r4, r0
 8007c18:	4608      	mov	r0, r1
 8007c1a:	602b      	str	r3, [r5, #0]
 8007c1c:	f7f9 fab9 	bl	8001192 <_isatty>
 8007c20:	1c43      	adds	r3, r0, #1
 8007c22:	d102      	bne.n	8007c2a <_isatty_r+0x1a>
 8007c24:	682b      	ldr	r3, [r5, #0]
 8007c26:	b103      	cbz	r3, 8007c2a <_isatty_r+0x1a>
 8007c28:	6023      	str	r3, [r4, #0]
 8007c2a:	bd38      	pop	{r3, r4, r5, pc}
 8007c2c:	20002c20 	.word	0x20002c20

08007c30 <_lseek_r>:
 8007c30:	b538      	push	{r3, r4, r5, lr}
 8007c32:	4d07      	ldr	r5, [pc, #28]	; (8007c50 <_lseek_r+0x20>)
 8007c34:	4604      	mov	r4, r0
 8007c36:	4608      	mov	r0, r1
 8007c38:	4611      	mov	r1, r2
 8007c3a:	2200      	movs	r2, #0
 8007c3c:	602a      	str	r2, [r5, #0]
 8007c3e:	461a      	mov	r2, r3
 8007c40:	f7f9 fab2 	bl	80011a8 <_lseek>
 8007c44:	1c43      	adds	r3, r0, #1
 8007c46:	d102      	bne.n	8007c4e <_lseek_r+0x1e>
 8007c48:	682b      	ldr	r3, [r5, #0]
 8007c4a:	b103      	cbz	r3, 8007c4e <_lseek_r+0x1e>
 8007c4c:	6023      	str	r3, [r4, #0]
 8007c4e:	bd38      	pop	{r3, r4, r5, pc}
 8007c50:	20002c20 	.word	0x20002c20

08007c54 <__malloc_lock>:
 8007c54:	4801      	ldr	r0, [pc, #4]	; (8007c5c <__malloc_lock+0x8>)
 8007c56:	f7ff bb55 	b.w	8007304 <__retarget_lock_acquire_recursive>
 8007c5a:	bf00      	nop
 8007c5c:	20002c18 	.word	0x20002c18

08007c60 <__malloc_unlock>:
 8007c60:	4801      	ldr	r0, [pc, #4]	; (8007c68 <__malloc_unlock+0x8>)
 8007c62:	f7ff bb50 	b.w	8007306 <__retarget_lock_release_recursive>
 8007c66:	bf00      	nop
 8007c68:	20002c18 	.word	0x20002c18

08007c6c <_read_r>:
 8007c6c:	b538      	push	{r3, r4, r5, lr}
 8007c6e:	4d07      	ldr	r5, [pc, #28]	; (8007c8c <_read_r+0x20>)
 8007c70:	4604      	mov	r4, r0
 8007c72:	4608      	mov	r0, r1
 8007c74:	4611      	mov	r1, r2
 8007c76:	2200      	movs	r2, #0
 8007c78:	602a      	str	r2, [r5, #0]
 8007c7a:	461a      	mov	r2, r3
 8007c7c:	f7f9 fa50 	bl	8001120 <_read>
 8007c80:	1c43      	adds	r3, r0, #1
 8007c82:	d102      	bne.n	8007c8a <_read_r+0x1e>
 8007c84:	682b      	ldr	r3, [r5, #0]
 8007c86:	b103      	cbz	r3, 8007c8a <_read_r+0x1e>
 8007c88:	6023      	str	r3, [r4, #0]
 8007c8a:	bd38      	pop	{r3, r4, r5, pc}
 8007c8c:	20002c20 	.word	0x20002c20

08007c90 <_init>:
 8007c90:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007c92:	bf00      	nop
 8007c94:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007c96:	bc08      	pop	{r3}
 8007c98:	469e      	mov	lr, r3
 8007c9a:	4770      	bx	lr

08007c9c <_fini>:
 8007c9c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007c9e:	bf00      	nop
 8007ca0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007ca2:	bc08      	pop	{r3}
 8007ca4:	469e      	mov	lr, r3
 8007ca6:	4770      	bx	lr
