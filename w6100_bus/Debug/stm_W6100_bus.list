
stm_W6100_bus.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000002cc  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000b140  080002d0  080002d0  000102d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000490  0800b410  0800b410  0001b410  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  0800b8a0  0800b8a0  0001b8a0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000004  0800b8a8  0800b8a8  0001b8a8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .fini_array   00000004  0800b8ac  0800b8ac  0001b8ac  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .data         0000010c  20000000  0800b8b0  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .bss          00000704  2000010c  0800b9bc  0002010c  2**2
                  ALLOC
  8 ._user_heap_stack 00000600  20000810  0800b9bc  00020810  2**0
                  ALLOC
  9 .ARM.attributes 0000002e  00000000  00000000  0002010c  2**0
                  CONTENTS, READONLY
 10 .comment      00000043  00000000  00000000  0002013a  2**0
                  CONTENTS, READONLY
 11 .debug_info   00017688  00000000  00000000  0002017d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_abbrev 000032a3  00000000  00000000  00037805  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_aranges 00001138  00000000  00000000  0003aaa8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_rnglists 00000d41  00000000  00000000  0003bbe0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_macro  00034e9d  00000000  00000000  0003c921  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_line   0001878d  00000000  00000000  000717be  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_str    0014f0b8  00000000  00000000  00089f4b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_frame  00004f18  00000000  00000000  001d9004  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_line_str 00000070  00000000  00000000  001ddf1c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080002d0 <__do_global_dtors_aux>:
 80002d0:	b510      	push	{r4, lr}
 80002d2:	4c05      	ldr	r4, [pc, #20]	; (80002e8 <__do_global_dtors_aux+0x18>)
 80002d4:	7823      	ldrb	r3, [r4, #0]
 80002d6:	b933      	cbnz	r3, 80002e6 <__do_global_dtors_aux+0x16>
 80002d8:	4b04      	ldr	r3, [pc, #16]	; (80002ec <__do_global_dtors_aux+0x1c>)
 80002da:	b113      	cbz	r3, 80002e2 <__do_global_dtors_aux+0x12>
 80002dc:	4804      	ldr	r0, [pc, #16]	; (80002f0 <__do_global_dtors_aux+0x20>)
 80002de:	f3af 8000 	nop.w
 80002e2:	2301      	movs	r3, #1
 80002e4:	7023      	strb	r3, [r4, #0]
 80002e6:	bd10      	pop	{r4, pc}
 80002e8:	2000010c 	.word	0x2000010c
 80002ec:	00000000 	.word	0x00000000
 80002f0:	0800b3f8 	.word	0x0800b3f8

080002f4 <frame_dummy>:
 80002f4:	b508      	push	{r3, lr}
 80002f6:	4b03      	ldr	r3, [pc, #12]	; (8000304 <frame_dummy+0x10>)
 80002f8:	b11b      	cbz	r3, 8000302 <frame_dummy+0xe>
 80002fa:	4903      	ldr	r1, [pc, #12]	; (8000308 <frame_dummy+0x14>)
 80002fc:	4803      	ldr	r0, [pc, #12]	; (800030c <frame_dummy+0x18>)
 80002fe:	f3af 8000 	nop.w
 8000302:	bd08      	pop	{r3, pc}
 8000304:	00000000 	.word	0x00000000
 8000308:	20000110 	.word	0x20000110
 800030c:	0800b3f8 	.word	0x0800b3f8

08000310 <memchr>:
 8000310:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000314:	2a10      	cmp	r2, #16
 8000316:	db2b      	blt.n	8000370 <memchr+0x60>
 8000318:	f010 0f07 	tst.w	r0, #7
 800031c:	d008      	beq.n	8000330 <memchr+0x20>
 800031e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000322:	3a01      	subs	r2, #1
 8000324:	428b      	cmp	r3, r1
 8000326:	d02d      	beq.n	8000384 <memchr+0x74>
 8000328:	f010 0f07 	tst.w	r0, #7
 800032c:	b342      	cbz	r2, 8000380 <memchr+0x70>
 800032e:	d1f6      	bne.n	800031e <memchr+0xe>
 8000330:	b4f0      	push	{r4, r5, r6, r7}
 8000332:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000336:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800033a:	f022 0407 	bic.w	r4, r2, #7
 800033e:	f07f 0700 	mvns.w	r7, #0
 8000342:	2300      	movs	r3, #0
 8000344:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000348:	3c08      	subs	r4, #8
 800034a:	ea85 0501 	eor.w	r5, r5, r1
 800034e:	ea86 0601 	eor.w	r6, r6, r1
 8000352:	fa85 f547 	uadd8	r5, r5, r7
 8000356:	faa3 f587 	sel	r5, r3, r7
 800035a:	fa86 f647 	uadd8	r6, r6, r7
 800035e:	faa5 f687 	sel	r6, r5, r7
 8000362:	b98e      	cbnz	r6, 8000388 <memchr+0x78>
 8000364:	d1ee      	bne.n	8000344 <memchr+0x34>
 8000366:	bcf0      	pop	{r4, r5, r6, r7}
 8000368:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800036c:	f002 0207 	and.w	r2, r2, #7
 8000370:	b132      	cbz	r2, 8000380 <memchr+0x70>
 8000372:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000376:	3a01      	subs	r2, #1
 8000378:	ea83 0301 	eor.w	r3, r3, r1
 800037c:	b113      	cbz	r3, 8000384 <memchr+0x74>
 800037e:	d1f8      	bne.n	8000372 <memchr+0x62>
 8000380:	2000      	movs	r0, #0
 8000382:	4770      	bx	lr
 8000384:	3801      	subs	r0, #1
 8000386:	4770      	bx	lr
 8000388:	2d00      	cmp	r5, #0
 800038a:	bf06      	itte	eq
 800038c:	4635      	moveq	r5, r6
 800038e:	3803      	subeq	r0, #3
 8000390:	3807      	subne	r0, #7
 8000392:	f015 0f01 	tst.w	r5, #1
 8000396:	d107      	bne.n	80003a8 <memchr+0x98>
 8000398:	3001      	adds	r0, #1
 800039a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800039e:	bf02      	ittt	eq
 80003a0:	3001      	addeq	r0, #1
 80003a2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80003a6:	3001      	addeq	r0, #1
 80003a8:	bcf0      	pop	{r4, r5, r6, r7}
 80003aa:	3801      	subs	r0, #1
 80003ac:	4770      	bx	lr
 80003ae:	bf00      	nop

080003b0 <__aeabi_uldivmod>:
 80003b0:	b953      	cbnz	r3, 80003c8 <__aeabi_uldivmod+0x18>
 80003b2:	b94a      	cbnz	r2, 80003c8 <__aeabi_uldivmod+0x18>
 80003b4:	2900      	cmp	r1, #0
 80003b6:	bf08      	it	eq
 80003b8:	2800      	cmpeq	r0, #0
 80003ba:	bf1c      	itt	ne
 80003bc:	f04f 31ff 	movne.w	r1, #4294967295
 80003c0:	f04f 30ff 	movne.w	r0, #4294967295
 80003c4:	f000 b970 	b.w	80006a8 <__aeabi_idiv0>
 80003c8:	f1ad 0c08 	sub.w	ip, sp, #8
 80003cc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80003d0:	f000 f806 	bl	80003e0 <__udivmoddi4>
 80003d4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80003d8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80003dc:	b004      	add	sp, #16
 80003de:	4770      	bx	lr

080003e0 <__udivmoddi4>:
 80003e0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80003e4:	9e08      	ldr	r6, [sp, #32]
 80003e6:	460d      	mov	r5, r1
 80003e8:	4604      	mov	r4, r0
 80003ea:	460f      	mov	r7, r1
 80003ec:	2b00      	cmp	r3, #0
 80003ee:	d14a      	bne.n	8000486 <__udivmoddi4+0xa6>
 80003f0:	428a      	cmp	r2, r1
 80003f2:	4694      	mov	ip, r2
 80003f4:	d965      	bls.n	80004c2 <__udivmoddi4+0xe2>
 80003f6:	fab2 f382 	clz	r3, r2
 80003fa:	b143      	cbz	r3, 800040e <__udivmoddi4+0x2e>
 80003fc:	fa02 fc03 	lsl.w	ip, r2, r3
 8000400:	f1c3 0220 	rsb	r2, r3, #32
 8000404:	409f      	lsls	r7, r3
 8000406:	fa20 f202 	lsr.w	r2, r0, r2
 800040a:	4317      	orrs	r7, r2
 800040c:	409c      	lsls	r4, r3
 800040e:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 8000412:	fa1f f58c 	uxth.w	r5, ip
 8000416:	fbb7 f1fe 	udiv	r1, r7, lr
 800041a:	0c22      	lsrs	r2, r4, #16
 800041c:	fb0e 7711 	mls	r7, lr, r1, r7
 8000420:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 8000424:	fb01 f005 	mul.w	r0, r1, r5
 8000428:	4290      	cmp	r0, r2
 800042a:	d90a      	bls.n	8000442 <__udivmoddi4+0x62>
 800042c:	eb1c 0202 	adds.w	r2, ip, r2
 8000430:	f101 37ff 	add.w	r7, r1, #4294967295
 8000434:	f080 811c 	bcs.w	8000670 <__udivmoddi4+0x290>
 8000438:	4290      	cmp	r0, r2
 800043a:	f240 8119 	bls.w	8000670 <__udivmoddi4+0x290>
 800043e:	3902      	subs	r1, #2
 8000440:	4462      	add	r2, ip
 8000442:	1a12      	subs	r2, r2, r0
 8000444:	b2a4      	uxth	r4, r4
 8000446:	fbb2 f0fe 	udiv	r0, r2, lr
 800044a:	fb0e 2210 	mls	r2, lr, r0, r2
 800044e:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000452:	fb00 f505 	mul.w	r5, r0, r5
 8000456:	42a5      	cmp	r5, r4
 8000458:	d90a      	bls.n	8000470 <__udivmoddi4+0x90>
 800045a:	eb1c 0404 	adds.w	r4, ip, r4
 800045e:	f100 32ff 	add.w	r2, r0, #4294967295
 8000462:	f080 8107 	bcs.w	8000674 <__udivmoddi4+0x294>
 8000466:	42a5      	cmp	r5, r4
 8000468:	f240 8104 	bls.w	8000674 <__udivmoddi4+0x294>
 800046c:	4464      	add	r4, ip
 800046e:	3802      	subs	r0, #2
 8000470:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000474:	1b64      	subs	r4, r4, r5
 8000476:	2100      	movs	r1, #0
 8000478:	b11e      	cbz	r6, 8000482 <__udivmoddi4+0xa2>
 800047a:	40dc      	lsrs	r4, r3
 800047c:	2300      	movs	r3, #0
 800047e:	e9c6 4300 	strd	r4, r3, [r6]
 8000482:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000486:	428b      	cmp	r3, r1
 8000488:	d908      	bls.n	800049c <__udivmoddi4+0xbc>
 800048a:	2e00      	cmp	r6, #0
 800048c:	f000 80ed 	beq.w	800066a <__udivmoddi4+0x28a>
 8000490:	2100      	movs	r1, #0
 8000492:	e9c6 0500 	strd	r0, r5, [r6]
 8000496:	4608      	mov	r0, r1
 8000498:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800049c:	fab3 f183 	clz	r1, r3
 80004a0:	2900      	cmp	r1, #0
 80004a2:	d149      	bne.n	8000538 <__udivmoddi4+0x158>
 80004a4:	42ab      	cmp	r3, r5
 80004a6:	d302      	bcc.n	80004ae <__udivmoddi4+0xce>
 80004a8:	4282      	cmp	r2, r0
 80004aa:	f200 80f8 	bhi.w	800069e <__udivmoddi4+0x2be>
 80004ae:	1a84      	subs	r4, r0, r2
 80004b0:	eb65 0203 	sbc.w	r2, r5, r3
 80004b4:	2001      	movs	r0, #1
 80004b6:	4617      	mov	r7, r2
 80004b8:	2e00      	cmp	r6, #0
 80004ba:	d0e2      	beq.n	8000482 <__udivmoddi4+0xa2>
 80004bc:	e9c6 4700 	strd	r4, r7, [r6]
 80004c0:	e7df      	b.n	8000482 <__udivmoddi4+0xa2>
 80004c2:	b902      	cbnz	r2, 80004c6 <__udivmoddi4+0xe6>
 80004c4:	deff      	udf	#255	; 0xff
 80004c6:	fab2 f382 	clz	r3, r2
 80004ca:	2b00      	cmp	r3, #0
 80004cc:	f040 8090 	bne.w	80005f0 <__udivmoddi4+0x210>
 80004d0:	1a8a      	subs	r2, r1, r2
 80004d2:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80004d6:	fa1f fe8c 	uxth.w	lr, ip
 80004da:	2101      	movs	r1, #1
 80004dc:	fbb2 f5f7 	udiv	r5, r2, r7
 80004e0:	fb07 2015 	mls	r0, r7, r5, r2
 80004e4:	0c22      	lsrs	r2, r4, #16
 80004e6:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 80004ea:	fb0e f005 	mul.w	r0, lr, r5
 80004ee:	4290      	cmp	r0, r2
 80004f0:	d908      	bls.n	8000504 <__udivmoddi4+0x124>
 80004f2:	eb1c 0202 	adds.w	r2, ip, r2
 80004f6:	f105 38ff 	add.w	r8, r5, #4294967295
 80004fa:	d202      	bcs.n	8000502 <__udivmoddi4+0x122>
 80004fc:	4290      	cmp	r0, r2
 80004fe:	f200 80cb 	bhi.w	8000698 <__udivmoddi4+0x2b8>
 8000502:	4645      	mov	r5, r8
 8000504:	1a12      	subs	r2, r2, r0
 8000506:	b2a4      	uxth	r4, r4
 8000508:	fbb2 f0f7 	udiv	r0, r2, r7
 800050c:	fb07 2210 	mls	r2, r7, r0, r2
 8000510:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000514:	fb0e fe00 	mul.w	lr, lr, r0
 8000518:	45a6      	cmp	lr, r4
 800051a:	d908      	bls.n	800052e <__udivmoddi4+0x14e>
 800051c:	eb1c 0404 	adds.w	r4, ip, r4
 8000520:	f100 32ff 	add.w	r2, r0, #4294967295
 8000524:	d202      	bcs.n	800052c <__udivmoddi4+0x14c>
 8000526:	45a6      	cmp	lr, r4
 8000528:	f200 80bb 	bhi.w	80006a2 <__udivmoddi4+0x2c2>
 800052c:	4610      	mov	r0, r2
 800052e:	eba4 040e 	sub.w	r4, r4, lr
 8000532:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 8000536:	e79f      	b.n	8000478 <__udivmoddi4+0x98>
 8000538:	f1c1 0720 	rsb	r7, r1, #32
 800053c:	408b      	lsls	r3, r1
 800053e:	fa22 fc07 	lsr.w	ip, r2, r7
 8000542:	ea4c 0c03 	orr.w	ip, ip, r3
 8000546:	fa05 f401 	lsl.w	r4, r5, r1
 800054a:	fa20 f307 	lsr.w	r3, r0, r7
 800054e:	40fd      	lsrs	r5, r7
 8000550:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000554:	4323      	orrs	r3, r4
 8000556:	fbb5 f8f9 	udiv	r8, r5, r9
 800055a:	fa1f fe8c 	uxth.w	lr, ip
 800055e:	fb09 5518 	mls	r5, r9, r8, r5
 8000562:	0c1c      	lsrs	r4, r3, #16
 8000564:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000568:	fb08 f50e 	mul.w	r5, r8, lr
 800056c:	42a5      	cmp	r5, r4
 800056e:	fa02 f201 	lsl.w	r2, r2, r1
 8000572:	fa00 f001 	lsl.w	r0, r0, r1
 8000576:	d90b      	bls.n	8000590 <__udivmoddi4+0x1b0>
 8000578:	eb1c 0404 	adds.w	r4, ip, r4
 800057c:	f108 3aff 	add.w	sl, r8, #4294967295
 8000580:	f080 8088 	bcs.w	8000694 <__udivmoddi4+0x2b4>
 8000584:	42a5      	cmp	r5, r4
 8000586:	f240 8085 	bls.w	8000694 <__udivmoddi4+0x2b4>
 800058a:	f1a8 0802 	sub.w	r8, r8, #2
 800058e:	4464      	add	r4, ip
 8000590:	1b64      	subs	r4, r4, r5
 8000592:	b29d      	uxth	r5, r3
 8000594:	fbb4 f3f9 	udiv	r3, r4, r9
 8000598:	fb09 4413 	mls	r4, r9, r3, r4
 800059c:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 80005a0:	fb03 fe0e 	mul.w	lr, r3, lr
 80005a4:	45a6      	cmp	lr, r4
 80005a6:	d908      	bls.n	80005ba <__udivmoddi4+0x1da>
 80005a8:	eb1c 0404 	adds.w	r4, ip, r4
 80005ac:	f103 35ff 	add.w	r5, r3, #4294967295
 80005b0:	d26c      	bcs.n	800068c <__udivmoddi4+0x2ac>
 80005b2:	45a6      	cmp	lr, r4
 80005b4:	d96a      	bls.n	800068c <__udivmoddi4+0x2ac>
 80005b6:	3b02      	subs	r3, #2
 80005b8:	4464      	add	r4, ip
 80005ba:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 80005be:	fba3 9502 	umull	r9, r5, r3, r2
 80005c2:	eba4 040e 	sub.w	r4, r4, lr
 80005c6:	42ac      	cmp	r4, r5
 80005c8:	46c8      	mov	r8, r9
 80005ca:	46ae      	mov	lr, r5
 80005cc:	d356      	bcc.n	800067c <__udivmoddi4+0x29c>
 80005ce:	d053      	beq.n	8000678 <__udivmoddi4+0x298>
 80005d0:	b156      	cbz	r6, 80005e8 <__udivmoddi4+0x208>
 80005d2:	ebb0 0208 	subs.w	r2, r0, r8
 80005d6:	eb64 040e 	sbc.w	r4, r4, lr
 80005da:	fa04 f707 	lsl.w	r7, r4, r7
 80005de:	40ca      	lsrs	r2, r1
 80005e0:	40cc      	lsrs	r4, r1
 80005e2:	4317      	orrs	r7, r2
 80005e4:	e9c6 7400 	strd	r7, r4, [r6]
 80005e8:	4618      	mov	r0, r3
 80005ea:	2100      	movs	r1, #0
 80005ec:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80005f0:	f1c3 0120 	rsb	r1, r3, #32
 80005f4:	fa02 fc03 	lsl.w	ip, r2, r3
 80005f8:	fa20 f201 	lsr.w	r2, r0, r1
 80005fc:	fa25 f101 	lsr.w	r1, r5, r1
 8000600:	409d      	lsls	r5, r3
 8000602:	432a      	orrs	r2, r5
 8000604:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000608:	fa1f fe8c 	uxth.w	lr, ip
 800060c:	fbb1 f0f7 	udiv	r0, r1, r7
 8000610:	fb07 1510 	mls	r5, r7, r0, r1
 8000614:	0c11      	lsrs	r1, r2, #16
 8000616:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 800061a:	fb00 f50e 	mul.w	r5, r0, lr
 800061e:	428d      	cmp	r5, r1
 8000620:	fa04 f403 	lsl.w	r4, r4, r3
 8000624:	d908      	bls.n	8000638 <__udivmoddi4+0x258>
 8000626:	eb1c 0101 	adds.w	r1, ip, r1
 800062a:	f100 38ff 	add.w	r8, r0, #4294967295
 800062e:	d22f      	bcs.n	8000690 <__udivmoddi4+0x2b0>
 8000630:	428d      	cmp	r5, r1
 8000632:	d92d      	bls.n	8000690 <__udivmoddi4+0x2b0>
 8000634:	3802      	subs	r0, #2
 8000636:	4461      	add	r1, ip
 8000638:	1b49      	subs	r1, r1, r5
 800063a:	b292      	uxth	r2, r2
 800063c:	fbb1 f5f7 	udiv	r5, r1, r7
 8000640:	fb07 1115 	mls	r1, r7, r5, r1
 8000644:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000648:	fb05 f10e 	mul.w	r1, r5, lr
 800064c:	4291      	cmp	r1, r2
 800064e:	d908      	bls.n	8000662 <__udivmoddi4+0x282>
 8000650:	eb1c 0202 	adds.w	r2, ip, r2
 8000654:	f105 38ff 	add.w	r8, r5, #4294967295
 8000658:	d216      	bcs.n	8000688 <__udivmoddi4+0x2a8>
 800065a:	4291      	cmp	r1, r2
 800065c:	d914      	bls.n	8000688 <__udivmoddi4+0x2a8>
 800065e:	3d02      	subs	r5, #2
 8000660:	4462      	add	r2, ip
 8000662:	1a52      	subs	r2, r2, r1
 8000664:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 8000668:	e738      	b.n	80004dc <__udivmoddi4+0xfc>
 800066a:	4631      	mov	r1, r6
 800066c:	4630      	mov	r0, r6
 800066e:	e708      	b.n	8000482 <__udivmoddi4+0xa2>
 8000670:	4639      	mov	r1, r7
 8000672:	e6e6      	b.n	8000442 <__udivmoddi4+0x62>
 8000674:	4610      	mov	r0, r2
 8000676:	e6fb      	b.n	8000470 <__udivmoddi4+0x90>
 8000678:	4548      	cmp	r0, r9
 800067a:	d2a9      	bcs.n	80005d0 <__udivmoddi4+0x1f0>
 800067c:	ebb9 0802 	subs.w	r8, r9, r2
 8000680:	eb65 0e0c 	sbc.w	lr, r5, ip
 8000684:	3b01      	subs	r3, #1
 8000686:	e7a3      	b.n	80005d0 <__udivmoddi4+0x1f0>
 8000688:	4645      	mov	r5, r8
 800068a:	e7ea      	b.n	8000662 <__udivmoddi4+0x282>
 800068c:	462b      	mov	r3, r5
 800068e:	e794      	b.n	80005ba <__udivmoddi4+0x1da>
 8000690:	4640      	mov	r0, r8
 8000692:	e7d1      	b.n	8000638 <__udivmoddi4+0x258>
 8000694:	46d0      	mov	r8, sl
 8000696:	e77b      	b.n	8000590 <__udivmoddi4+0x1b0>
 8000698:	3d02      	subs	r5, #2
 800069a:	4462      	add	r2, ip
 800069c:	e732      	b.n	8000504 <__udivmoddi4+0x124>
 800069e:	4608      	mov	r0, r1
 80006a0:	e70a      	b.n	80004b8 <__udivmoddi4+0xd8>
 80006a2:	4464      	add	r4, ip
 80006a4:	3802      	subs	r0, #2
 80006a6:	e742      	b.n	800052e <__udivmoddi4+0x14e>

080006a8 <__aeabi_idiv0>:
 80006a8:	4770      	bx	lr
 80006aa:	bf00      	nop

080006ac <Fill_Buffer>:
#define WRITE_READ_ADDR     ((uint32_t)0x0000)
uint32_t aTxBuffer[BUFFER_SIZE];
uint32_t aRxBuffer[BUFFER_SIZE];

static void Fill_Buffer(uint32_t *pBuffer, uint32_t uwBufferLength, uint16_t uwOffset)
{
 80006ac:	b480      	push	{r7}
 80006ae:	b087      	sub	sp, #28
 80006b0:	af00      	add	r7, sp, #0
 80006b2:	60f8      	str	r0, [r7, #12]
 80006b4:	60b9      	str	r1, [r7, #8]
 80006b6:	4613      	mov	r3, r2
 80006b8:	80fb      	strh	r3, [r7, #6]
  uint16_t tmpIndex = 0;
 80006ba:	2300      	movs	r3, #0
 80006bc:	82fb      	strh	r3, [r7, #22]

  /* Put in global buffer different values */
  for (tmpIndex = 0; tmpIndex < uwBufferLength; tmpIndex++)
 80006be:	2300      	movs	r3, #0
 80006c0:	82fb      	strh	r3, [r7, #22]
 80006c2:	e00b      	b.n	80006dc <Fill_Buffer+0x30>
  {
    pBuffer[tmpIndex] = tmpIndex + uwOffset;
 80006c4:	8afa      	ldrh	r2, [r7, #22]
 80006c6:	88fb      	ldrh	r3, [r7, #6]
 80006c8:	18d1      	adds	r1, r2, r3
 80006ca:	8afb      	ldrh	r3, [r7, #22]
 80006cc:	009b      	lsls	r3, r3, #2
 80006ce:	68fa      	ldr	r2, [r7, #12]
 80006d0:	4413      	add	r3, r2
 80006d2:	460a      	mov	r2, r1
 80006d4:	601a      	str	r2, [r3, #0]
  for (tmpIndex = 0; tmpIndex < uwBufferLength; tmpIndex++)
 80006d6:	8afb      	ldrh	r3, [r7, #22]
 80006d8:	3301      	adds	r3, #1
 80006da:	82fb      	strh	r3, [r7, #22]
 80006dc:	8afb      	ldrh	r3, [r7, #22]
 80006de:	68ba      	ldr	r2, [r7, #8]
 80006e0:	429a      	cmp	r2, r3
 80006e2:	d8ef      	bhi.n	80006c4 <Fill_Buffer+0x18>
  }
}
 80006e4:	bf00      	nop
 80006e6:	bf00      	nop
 80006e8:	371c      	adds	r7, #28
 80006ea:	46bd      	mov	sp, r7
 80006ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006f0:	4770      	bx	lr
	...

080006f4 <_write>:
    #endif
  #endif

  #ifdef True_STD
  int _write(int fd, char *str, int len)
  {
 80006f4:	b580      	push	{r7, lr}
 80006f6:	b086      	sub	sp, #24
 80006f8:	af00      	add	r7, sp, #0
 80006fa:	60f8      	str	r0, [r7, #12]
 80006fc:	60b9      	str	r1, [r7, #8]
 80006fe:	607a      	str	r2, [r7, #4]
    for(int i=0; i<len; i++)
 8000700:	2300      	movs	r3, #0
 8000702:	617b      	str	r3, [r7, #20]
 8000704:	e00b      	b.n	800071e <_write+0x2a>
    {
      HAL_UART_Transmit(&huart3, (uint8_t *)&str[i], 1, 0xFFFF);
 8000706:	697b      	ldr	r3, [r7, #20]
 8000708:	68ba      	ldr	r2, [r7, #8]
 800070a:	18d1      	adds	r1, r2, r3
 800070c:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8000710:	2201      	movs	r2, #1
 8000712:	4807      	ldr	r0, [pc, #28]	; (8000730 <_write+0x3c>)
 8000714:	f005 faca 	bl	8005cac <HAL_UART_Transmit>
    for(int i=0; i<len; i++)
 8000718:	697b      	ldr	r3, [r7, #20]
 800071a:	3301      	adds	r3, #1
 800071c:	617b      	str	r3, [r7, #20]
 800071e:	697a      	ldr	r2, [r7, #20]
 8000720:	687b      	ldr	r3, [r7, #4]
 8000722:	429a      	cmp	r2, r3
 8000724:	dbef      	blt.n	8000706 <_write+0x12>
    }
    return len;
 8000726:	687b      	ldr	r3, [r7, #4]
  }
 8000728:	4618      	mov	r0, r3
 800072a:	3718      	adds	r7, #24
 800072c:	46bd      	mov	sp, r7
 800072e:	bd80      	pop	{r7, pc}
 8000730:	20000598 	.word	0x20000598

08000734 <chip_delay>:
		URX_BUF_Flag = 1;
	  }
 }

void chip_delay(uint16_t count)
{
 8000734:	b480      	push	{r7}
 8000736:	b085      	sub	sp, #20
 8000738:	af00      	add	r7, sp, #0
 800073a:	4603      	mov	r3, r0
 800073c:	80fb      	strh	r3, [r7, #6]
	uint16_t i = 0, dummy =0;
 800073e:	2300      	movs	r3, #0
 8000740:	81fb      	strh	r3, [r7, #14]
 8000742:	2300      	movs	r3, #0
 8000744:	81bb      	strh	r3, [r7, #12]
	for(i=0; i<count; i++)
 8000746:	2300      	movs	r3, #0
 8000748:	81fb      	strh	r3, [r7, #14]
 800074a:	e004      	b.n	8000756 <chip_delay+0x22>
	{
		dummy = i;
 800074c:	89fb      	ldrh	r3, [r7, #14]
 800074e:	81bb      	strh	r3, [r7, #12]
	for(i=0; i<count; i++)
 8000750:	89fb      	ldrh	r3, [r7, #14]
 8000752:	3301      	adds	r3, #1
 8000754:	81fb      	strh	r3, [r7, #14]
 8000756:	89fa      	ldrh	r2, [r7, #14]
 8000758:	88fb      	ldrh	r3, [r7, #6]
 800075a:	429a      	cmp	r2, r3
 800075c:	d3f6      	bcc.n	800074c <chip_delay+0x18>
	}
}
 800075e:	bf00      	nop
 8000760:	bf00      	nop
 8000762:	3714      	adds	r7, #20
 8000764:	46bd      	mov	sp, r7
 8000766:	f85d 7b04 	ldr.w	r7, [sp], #4
 800076a:	4770      	bx	lr

0800076c <W6100BusWriteByte>:
uint16_t g_delay_count = 2;
void W6100BusWriteByte(uint32_t addr, iodata_t data)
{
 800076c:	b480      	push	{r7}
 800076e:	b083      	sub	sp, #12
 8000770:	af00      	add	r7, sp, #0
 8000772:	6078      	str	r0, [r7, #4]
 8000774:	460b      	mov	r3, r1
 8000776:	70fb      	strb	r3, [r7, #3]
	#if 1	//teddy 210422
	//(*(volatile uint8_t*)(addr)) = (uint8_t)(data);
	//__HAL_LOCK(&hnor1);
	(*(__IO uint8_t *)((uint32_t)(addr)) = (data));
 8000778:	687b      	ldr	r3, [r7, #4]
 800077a:	78fa      	ldrb	r2, [r7, #3]
 800077c:	701a      	strb	r2, [r3, #0]
	Indata[0] = data;
	//printf("W%x:%x ",addr, data);
	if(HAL_SRAM_Write_8b(&hsram1, (uint32_t *)addr, (uint16_t *)data, 1) != HAL_OK)
		printf("BusWritError \r\n");
	#endif
}
 800077e:	bf00      	nop
 8000780:	370c      	adds	r7, #12
 8000782:	46bd      	mov	sp, r7
 8000784:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000788:	4770      	bx	lr

0800078a <W6100BusReadByte>:

iodata_t W6100BusReadByte(uint32_t addr)
{
 800078a:	b480      	push	{r7}
 800078c:	b085      	sub	sp, #20
 800078e:	af00      	add	r7, sp, #0
 8000790:	6078      	str	r0, [r7, #4]
	#if 1	//teddy 210422
	//return (*((volatile uint8_t*)(addr)));
	iodata_t ret=0;
 8000792:	2300      	movs	r3, #0
 8000794:	73fb      	strb	r3, [r7, #15]
	//__HAL_LOCK(&hnor1);
	//ret = *(__IO uint8_t *)((uint32_t)(addr));
	ret = *(__IO uint8_t *)(addr);
 8000796:	687b      	ldr	r3, [r7, #4]
 8000798:	781b      	ldrb	r3, [r3, #0]
 800079a:	73fb      	strb	r3, [r7, #15]
	//chip_delay(g_delay_count);
	//__HAL_UNLOCK(&hnor1);
	return ret;
 800079c:	7bfb      	ldrb	r3, [r7, #15]
	if(HAL_SRAM_Read_8b(&hsram1, (uint32_t *)addr, (uint16_t *)result, 1) != HAL_OK)
		printf("BussReadError \r\n");
	printf("R%x:%x ", addr, result[0]);
	return result[0];
	#endif
}
 800079e:	4618      	mov	r0, r3
 80007a0:	3714      	adds	r7, #20
 80007a2:	46bd      	mov	sp, r7
 80007a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007a8:	4770      	bx	lr
	...

080007ac <W6100CsEnable>:
			printf("BussReadError \r\n");
#endif

}
void W6100CsEnable(void)
{
 80007ac:	b480      	push	{r7}
 80007ae:	af00      	add	r7, sp, #0
	__HAL_LOCK(&hnor1);
 80007b0:	4b06      	ldr	r3, [pc, #24]	; (80007cc <W6100CsEnable+0x20>)
 80007b2:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80007b6:	2b01      	cmp	r3, #1
 80007b8:	d003      	beq.n	80007c2 <W6100CsEnable+0x16>
 80007ba:	4b04      	ldr	r3, [pc, #16]	; (80007cc <W6100CsEnable+0x20>)
 80007bc:	2201      	movs	r2, #1
 80007be:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
#if 0
	__HAL_LOCK(&hsram1);
	hsram1.State = HAL_SRAM_STATE_BUSY;
#endif
}
 80007c2:	46bd      	mov	sp, r7
 80007c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007c8:	4770      	bx	lr
 80007ca:	bf00      	nop
 80007cc:	2000062c 	.word	0x2000062c

080007d0 <W6100CsDisable>:

void W6100CsDisable(void)
{
 80007d0:	b480      	push	{r7}
 80007d2:	af00      	add	r7, sp, #0
	__HAL_UNLOCK(&hnor1);
 80007d4:	4b04      	ldr	r3, [pc, #16]	; (80007e8 <W6100CsDisable+0x18>)
 80007d6:	2200      	movs	r2, #0
 80007d8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
#if 0
	__HAL_UNLOCK(&hsram1);
	hsram1.State = HAL_SRAM_STATE_READY;
#endif
}
 80007dc:	bf00      	nop
 80007de:	46bd      	mov	sp, r7
 80007e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007e4:	4770      	bx	lr
 80007e6:	bf00      	nop
 80007e8:	2000062c 	.word	0x2000062c

080007ec <W6100Initialze>:

void W6100Initialze(void)
{
 80007ec:	b590      	push	{r4, r7, lr}
 80007ee:	b087      	sub	sp, #28
 80007f0:	af00      	add	r7, sp, #0
#else
	/* Indirect bus method callback registration */
	#if defined BUS_DMA
		reg_wizchip_bus_cbfunc(W6100BusReadByte, W6100BusWriteByte, W6100BusReadBurst, W6100BusWriteBurst);
	#else
		reg_wizchip_bus_cbfunc(W6100BusReadByte, W6100BusWriteByte, 0, 0);
 80007f2:	2300      	movs	r3, #0
 80007f4:	2200      	movs	r2, #0
 80007f6:	491e      	ldr	r1, [pc, #120]	; (8000870 <W6100Initialze+0x84>)
 80007f8:	481e      	ldr	r0, [pc, #120]	; (8000874 <W6100Initialze+0x88>)
 80007fa:	f008 ff63 	bl	80096c4 <reg_wizchip_bus_cbfunc>
	#endif
		reg_wizchip_cs_cbfunc(W6100CsEnable, W6100CsDisable);
 80007fe:	491e      	ldr	r1, [pc, #120]	; (8000878 <W6100Initialze+0x8c>)
 8000800:	481e      	ldr	r0, [pc, #120]	; (800087c <W6100Initialze+0x90>)
 8000802:	f008 ff39 	bl	8009678 <reg_wizchip_cs_cbfunc>
#endif
		uint8_t temp;
		unsigned char W6100_AdrSet[2][8] = {{2, 2, 2, 2, 2, 2, 2, 2}, {2, 2, 2, 2, 2, 2, 2, 2}};
 8000806:	4b1e      	ldr	r3, [pc, #120]	; (8000880 <W6100Initialze+0x94>)
 8000808:	1d3c      	adds	r4, r7, #4
 800080a:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800080c:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
		uint16_t RegTemp = 0;
 8000810:	2300      	movs	r3, #0
 8000812:	82fb      	strh	r3, [r7, #22]
		//RegTemp = (uint16_t)WIZCHIP_READ(_CIDR_);
		//printf("CIDR_ = %04x \r\n", RegTemp);
		RegTemp = getCIDR();
 8000814:	f04f 40c0 	mov.w	r0, #1610612736	; 0x60000000
 8000818:	f007 fd1e 	bl	8008258 <WIZCHIP_READ>
 800081c:	4603      	mov	r3, r0
 800081e:	b29b      	uxth	r3, r3
 8000820:	021b      	lsls	r3, r3, #8
 8000822:	b29c      	uxth	r4, r3
 8000824:	4817      	ldr	r0, [pc, #92]	; (8000884 <W6100Initialze+0x98>)
 8000826:	f007 fd17 	bl	8008258 <WIZCHIP_READ>
 800082a:	4603      	mov	r3, r0
 800082c:	b29b      	uxth	r3, r3
 800082e:	4423      	add	r3, r4
 8000830:	82fb      	strh	r3, [r7, #22]
		printf("CIDR = %04x \r\n", RegTemp);
 8000832:	8afb      	ldrh	r3, [r7, #22]
 8000834:	4619      	mov	r1, r3
 8000836:	4814      	ldr	r0, [pc, #80]	; (8000888 <W6100Initialze+0x9c>)
 8000838:	f009 ff10 	bl	800a65c <iprintf>
		RegTemp = getVER();
 800083c:	4813      	ldr	r0, [pc, #76]	; (800088c <W6100Initialze+0xa0>)
 800083e:	f007 fd0b 	bl	8008258 <WIZCHIP_READ>
 8000842:	4603      	mov	r3, r0
 8000844:	b29b      	uxth	r3, r3
 8000846:	021b      	lsls	r3, r3, #8
 8000848:	b29c      	uxth	r4, r3
 800084a:	4811      	ldr	r0, [pc, #68]	; (8000890 <W6100Initialze+0xa4>)
 800084c:	f007 fd04 	bl	8008258 <WIZCHIP_READ>
 8000850:	4603      	mov	r3, r0
 8000852:	b29b      	uxth	r3, r3
 8000854:	4423      	add	r3, r4
 8000856:	82fb      	strh	r3, [r7, #22]
		printf("VER = %04x \r\n", RegTemp);
 8000858:	8afb      	ldrh	r3, [r7, #22]
 800085a:	4619      	mov	r1, r3
 800085c:	480d      	ldr	r0, [pc, #52]	; (8000894 <W6100Initialze+0xa8>)
 800085e:	f009 fefd 	bl	800a65c <iprintf>
				printf("Unknown PHY link status.\r\n");
			}
		} while (temp == PHY_LINK_OFF);
	 	#endif

		printf("PHY OK.\r\n");
 8000862:	480d      	ldr	r0, [pc, #52]	; (8000898 <W6100Initialze+0xac>)
 8000864:	f009 ff60 	bl	800a728 <puts>
	
	
}
 8000868:	bf00      	nop
 800086a:	371c      	adds	r7, #28
 800086c:	46bd      	mov	sp, r7
 800086e:	bd90      	pop	{r4, r7, pc}
 8000870:	0800076d 	.word	0x0800076d
 8000874:	0800078b 	.word	0x0800078b
 8000878:	080007d1 	.word	0x080007d1
 800087c:	080007ad 	.word	0x080007ad
 8000880:	0800b43c 	.word	0x0800b43c
 8000884:	60000100 	.word	0x60000100
 8000888:	0800b410 	.word	0x0800b410
 800088c:	60000200 	.word	0x60000200
 8000890:	60000300 	.word	0x60000300
 8000894:	0800b420 	.word	0x0800b420
 8000898:	0800b430 	.word	0x0800b430

0800089c <bus_tx_mem_test>:
void bus_tx_mem_test(uint8_t sn)
{
 800089c:	b580      	push	{r7, lr}
 800089e:	f5ad 6d01 	sub.w	sp, sp, #2064	; 0x810
 80008a2:	af00      	add	r7, sp, #0
 80008a4:	4602      	mov	r2, r0
 80008a6:	f507 6301 	add.w	r3, r7, #2064	; 0x810
 80008aa:	f6a3 0309 	subw	r3, r3, #2057	; 0x809
 80008ae:	701a      	strb	r2, [r3, #0]
	uint16_t i=0, temp_count = 1;
 80008b0:	2300      	movs	r3, #0
 80008b2:	f8a7 380e 	strh.w	r3, [r7, #2062]	; 0x80e
 80008b6:	2301      	movs	r3, #1
 80008b8:	f8a7 380c 	strh.w	r3, [r7, #2060]	; 0x80c
	uint8_t temp_rx_data[1024], temp_tx_data[1024];
	uint16_t data_len =1024;
 80008bc:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80008c0:	f8a7 380a 	strh.w	r3, [r7, #2058]	; 0x80a
	for(i=0; i<data_len; i++)
 80008c4:	2300      	movs	r3, #0
 80008c6:	f8a7 380e 	strh.w	r3, [r7, #2062]	; 0x80e
 80008ca:	e01a      	b.n	8000902 <bus_tx_mem_test+0x66>
	  {
		  temp_tx_data[i] = '0'+(uint8_t)(i%10);
 80008cc:	f8b7 280e 	ldrh.w	r2, [r7, #2062]	; 0x80e
 80008d0:	4b51      	ldr	r3, [pc, #324]	; (8000a18 <bus_tx_mem_test+0x17c>)
 80008d2:	fba3 1302 	umull	r1, r3, r3, r2
 80008d6:	08d9      	lsrs	r1, r3, #3
 80008d8:	460b      	mov	r3, r1
 80008da:	009b      	lsls	r3, r3, #2
 80008dc:	440b      	add	r3, r1
 80008de:	005b      	lsls	r3, r3, #1
 80008e0:	1ad3      	subs	r3, r2, r3
 80008e2:	b29b      	uxth	r3, r3
 80008e4:	b2da      	uxtb	r2, r3
 80008e6:	f8b7 380e 	ldrh.w	r3, [r7, #2062]	; 0x80e
 80008ea:	3230      	adds	r2, #48	; 0x30
 80008ec:	b2d1      	uxtb	r1, r2
 80008ee:	f507 6201 	add.w	r2, r7, #2064	; 0x810
 80008f2:	f6a2 0208 	subw	r2, r2, #2056	; 0x808
 80008f6:	54d1      	strb	r1, [r2, r3]
	for(i=0; i<data_len; i++)
 80008f8:	f8b7 380e 	ldrh.w	r3, [r7, #2062]	; 0x80e
 80008fc:	3301      	adds	r3, #1
 80008fe:	f8a7 380e 	strh.w	r3, [r7, #2062]	; 0x80e
 8000902:	f8b7 280e 	ldrh.w	r2, [r7, #2062]	; 0x80e
 8000906:	f8b7 380a 	ldrh.w	r3, [r7, #2058]	; 0x80a
 800090a:	429a      	cmp	r2, r3
 800090c:	d3de      	bcc.n	80008cc <bus_tx_mem_test+0x30>
	  }
	  temp_tx_data[data_len] = 0;
 800090e:	f8b7 380a 	ldrh.w	r3, [r7, #2058]	; 0x80a
 8000912:	f507 6201 	add.w	r2, r7, #2064	; 0x810
 8000916:	f6a2 0208 	subw	r2, r2, #2056	; 0x808
 800091a:	2100      	movs	r1, #0
 800091c:	54d1      	strb	r1, [r2, r3]
	  printf("socket = %d \r\nbus tx data[%d] = %s\r\n", sn, data_len, temp_tx_data);
 800091e:	f507 6301 	add.w	r3, r7, #2064	; 0x810
 8000922:	f6a3 0309 	subw	r3, r3, #2057	; 0x809
 8000926:	7819      	ldrb	r1, [r3, #0]
 8000928:	f8b7 280a 	ldrh.w	r2, [r7, #2058]	; 0x80a
 800092c:	f107 0308 	add.w	r3, r7, #8
 8000930:	483a      	ldr	r0, [pc, #232]	; (8000a1c <bus_tx_mem_test+0x180>)
 8000932:	f009 fe93 	bl	800a65c <iprintf>
	  *(__IO uint8_t *)((uint32_t)(0x60000000)) = (uint8_t)(0x00);
 8000936:	f04f 43c0 	mov.w	r3, #1610612736	; 0x60000000
 800093a:	2200      	movs	r2, #0
 800093c:	701a      	strb	r2, [r3, #0]
		//chip_delay(temp_count);
		*(__IO uint8_t *)((uint32_t)(0x60000001)) = (uint8_t)(0x00);
 800093e:	4b38      	ldr	r3, [pc, #224]	; (8000a20 <bus_tx_mem_test+0x184>)
 8000940:	2200      	movs	r2, #0
 8000942:	701a      	strb	r2, [r3, #0]
		//chip_delay(temp_count);
		*(__IO uint8_t *)((uint32_t)(0x60000002)) = (uint8_t)((0x10)|(sn<<5));
 8000944:	f507 6301 	add.w	r3, r7, #2064	; 0x810
 8000948:	f6a3 0309 	subw	r3, r3, #2057	; 0x809
 800094c:	781b      	ldrb	r3, [r3, #0]
 800094e:	015b      	lsls	r3, r3, #5
 8000950:	b25b      	sxtb	r3, r3
 8000952:	f043 0310 	orr.w	r3, r3, #16
 8000956:	b25a      	sxtb	r2, r3
 8000958:	4b32      	ldr	r3, [pc, #200]	; (8000a24 <bus_tx_mem_test+0x188>)
 800095a:	b2d2      	uxtb	r2, r2
 800095c:	701a      	strb	r2, [r3, #0]
		//chip_delay(temp_count);
		for(i=0; i<data_len; i++)
 800095e:	2300      	movs	r3, #0
 8000960:	f8a7 380e 	strh.w	r3, [r7, #2062]	; 0x80e
 8000964:	e00d      	b.n	8000982 <bus_tx_mem_test+0xe6>
		{
			*(__IO uint8_t *)((uint32_t)(0x60000003)) = (uint8_t)(temp_tx_data[i]);
 8000966:	f8b7 380e 	ldrh.w	r3, [r7, #2062]	; 0x80e
 800096a:	492f      	ldr	r1, [pc, #188]	; (8000a28 <bus_tx_mem_test+0x18c>)
 800096c:	f507 6201 	add.w	r2, r7, #2064	; 0x810
 8000970:	f6a2 0208 	subw	r2, r2, #2056	; 0x808
 8000974:	5cd3      	ldrb	r3, [r2, r3]
 8000976:	700b      	strb	r3, [r1, #0]
		for(i=0; i<data_len; i++)
 8000978:	f8b7 380e 	ldrh.w	r3, [r7, #2062]	; 0x80e
 800097c:	3301      	adds	r3, #1
 800097e:	f8a7 380e 	strh.w	r3, [r7, #2062]	; 0x80e
 8000982:	f8b7 280e 	ldrh.w	r2, [r7, #2062]	; 0x80e
 8000986:	f8b7 380a 	ldrh.w	r3, [r7, #2058]	; 0x80a
 800098a:	429a      	cmp	r2, r3
 800098c:	d3eb      	bcc.n	8000966 <bus_tx_mem_test+0xca>
			//chip_delay(temp_count);
		}
		printf("bus read tx data \r\n");
 800098e:	4827      	ldr	r0, [pc, #156]	; (8000a2c <bus_tx_mem_test+0x190>)
 8000990:	f009 feca 	bl	800a728 <puts>
		*(__IO uint8_t *)((uint32_t)(0x60000000)) = (uint8_t)(0x00);
 8000994:	f04f 43c0 	mov.w	r3, #1610612736	; 0x60000000
 8000998:	2200      	movs	r2, #0
 800099a:	701a      	strb	r2, [r3, #0]
		//chip_delay(temp_count);
		*(__IO uint8_t *)((uint32_t)(0x60000001)) = (uint8_t)(0x00);
 800099c:	4b20      	ldr	r3, [pc, #128]	; (8000a20 <bus_tx_mem_test+0x184>)
 800099e:	2200      	movs	r2, #0
 80009a0:	701a      	strb	r2, [r3, #0]
		//chip_delay(temp_count);
		*(__IO uint8_t *)((uint32_t)(0x60000002)) = (uint8_t)((0x10)|(sn<<5));
 80009a2:	f507 6301 	add.w	r3, r7, #2064	; 0x810
 80009a6:	f6a3 0309 	subw	r3, r3, #2057	; 0x809
 80009aa:	781b      	ldrb	r3, [r3, #0]
 80009ac:	015b      	lsls	r3, r3, #5
 80009ae:	b25b      	sxtb	r3, r3
 80009b0:	f043 0310 	orr.w	r3, r3, #16
 80009b4:	b25a      	sxtb	r2, r3
 80009b6:	4b1b      	ldr	r3, [pc, #108]	; (8000a24 <bus_tx_mem_test+0x188>)
 80009b8:	b2d2      	uxtb	r2, r2
 80009ba:	701a      	strb	r2, [r3, #0]
		//chip_delay(temp_count);
		for(i=0; i<data_len; i++)
 80009bc:	2300      	movs	r3, #0
 80009be:	f8a7 380e 	strh.w	r3, [r7, #2062]	; 0x80e
 80009c2:	e00e      	b.n	80009e2 <bus_tx_mem_test+0x146>
		{
			temp_rx_data[i] = *(__IO uint8_t *)((uint32_t)(0x60000003));
 80009c4:	4a18      	ldr	r2, [pc, #96]	; (8000a28 <bus_tx_mem_test+0x18c>)
 80009c6:	f8b7 380e 	ldrh.w	r3, [r7, #2062]	; 0x80e
 80009ca:	7812      	ldrb	r2, [r2, #0]
 80009cc:	b2d1      	uxtb	r1, r2
 80009ce:	f507 6201 	add.w	r2, r7, #2064	; 0x810
 80009d2:	f5a2 6281 	sub.w	r2, r2, #1032	; 0x408
 80009d6:	54d1      	strb	r1, [r2, r3]
		for(i=0; i<data_len; i++)
 80009d8:	f8b7 380e 	ldrh.w	r3, [r7, #2062]	; 0x80e
 80009dc:	3301      	adds	r3, #1
 80009de:	f8a7 380e 	strh.w	r3, [r7, #2062]	; 0x80e
 80009e2:	f8b7 280e 	ldrh.w	r2, [r7, #2062]	; 0x80e
 80009e6:	f8b7 380a 	ldrh.w	r3, [r7, #2058]	; 0x80a
 80009ea:	429a      	cmp	r2, r3
 80009ec:	d3ea      	bcc.n	80009c4 <bus_tx_mem_test+0x128>
			//chip_delay(temp_count);
		}
		temp_rx_data[data_len] = 0;
 80009ee:	f8b7 380a 	ldrh.w	r3, [r7, #2058]	; 0x80a
 80009f2:	f507 6201 	add.w	r2, r7, #2064	; 0x810
 80009f6:	f5a2 6281 	sub.w	r2, r2, #1032	; 0x408
 80009fa:	2100      	movs	r1, #0
 80009fc:	54d1      	strb	r1, [r2, r3]
		printf("bus tx mem read data[%d] = %s\r\n", data_len, temp_rx_data);
 80009fe:	f8b7 380a 	ldrh.w	r3, [r7, #2058]	; 0x80a
 8000a02:	f507 6281 	add.w	r2, r7, #1032	; 0x408
 8000a06:	4619      	mov	r1, r3
 8000a08:	4809      	ldr	r0, [pc, #36]	; (8000a30 <bus_tx_mem_test+0x194>)
 8000a0a:	f009 fe27 	bl	800a65c <iprintf>
}
 8000a0e:	bf00      	nop
 8000a10:	f507 6701 	add.w	r7, r7, #2064	; 0x810
 8000a14:	46bd      	mov	sp, r7
 8000a16:	bd80      	pop	{r7, pc}
 8000a18:	cccccccd 	.word	0xcccccccd
 8000a1c:	0800b44c 	.word	0x0800b44c
 8000a20:	60000001 	.word	0x60000001
 8000a24:	60000002 	.word	0x60000002
 8000a28:	60000003 	.word	0x60000003
 8000a2c:	0800b474 	.word	0x0800b474
 8000a30:	0800b488 	.word	0x0800b488

08000a34 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000a34:	b580      	push	{r7, lr}
 8000a36:	b08c      	sub	sp, #48	; 0x30
 8000a38:	af02      	add	r7, sp, #8
  /* USER CODE BEGIN 1 */
  uint8_t temp1 = 0, temp2 = 0, *temp=NULL;
 8000a3a:	2300      	movs	r3, #0
 8000a3c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8000a40:	2300      	movs	r3, #0
 8000a42:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 8000a46:	2300      	movs	r3, #0
 8000a48:	623b      	str	r3, [r7, #32]
  uint8_t temp_data[4]={0,};
 8000a4a:	2300      	movs	r3, #0
 8000a4c:	60fb      	str	r3, [r7, #12]
  //temp = (volatile uint8_t*)(0x60000003);
  uint8_t syslock = SYS_NET_LOCK;
 8000a4e:	2302      	movs	r3, #2
 8000a50:	72fb      	strb	r3, [r7, #11]
  uint16_t temp_dummy=0;
 8000a52:	2300      	movs	r3, #0
 8000a54:	83fb      	strh	r3, [r7, #30]
  uint8_t temp_status[10]={0,};
 8000a56:	2300      	movs	r3, #0
 8000a58:	603b      	str	r3, [r7, #0]
 8000a5a:	1d3b      	adds	r3, r7, #4
 8000a5c:	2200      	movs	r2, #0
 8000a5e:	601a      	str	r2, [r3, #0]
 8000a60:	809a      	strh	r2, [r3, #4]
  uint16_t temp_count = 1000;
 8000a62:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000a66:	83bb      	strh	r3, [r7, #28]
  #if defined (__DCACHE_PRESENT) && (__DCACHE_PRESENT == 1U)
    uint32_t ccsidr;
    uint32_t sets;
    uint32_t ways;

    if (SCB->CCR & SCB_CCR_DC_Msk) return;  /* return if DCache is already enabled */
 8000a68:	4b82      	ldr	r3, [pc, #520]	; (8000c74 <main+0x240>)
 8000a6a:	695b      	ldr	r3, [r3, #20]
 8000a6c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000a70:	2b00      	cmp	r3, #0
 8000a72:	d138      	bne.n	8000ae6 <main+0xb2>

    SCB->CSSELR = 0U;                       /* select Level 1 data cache */
 8000a74:	4b7f      	ldr	r3, [pc, #508]	; (8000c74 <main+0x240>)
 8000a76:	2200      	movs	r2, #0
 8000a78:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 8000a7c:	f3bf 8f4f 	dsb	sy
}
 8000a80:	bf00      	nop
    __DSB();

    ccsidr = SCB->CCSIDR;
 8000a82:	4b7c      	ldr	r3, [pc, #496]	; (8000c74 <main+0x240>)
 8000a84:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8000a88:	61bb      	str	r3, [r7, #24]

                                            /* invalidate D-Cache */
    sets = (uint32_t)(CCSIDR_SETS(ccsidr));
 8000a8a:	69bb      	ldr	r3, [r7, #24]
 8000a8c:	0b5b      	lsrs	r3, r3, #13
 8000a8e:	f3c3 030e 	ubfx	r3, r3, #0, #15
 8000a92:	617b      	str	r3, [r7, #20]
    do {
      ways = (uint32_t)(CCSIDR_WAYS(ccsidr));
 8000a94:	69bb      	ldr	r3, [r7, #24]
 8000a96:	08db      	lsrs	r3, r3, #3
 8000a98:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8000a9c:	613b      	str	r3, [r7, #16]
      do {
        SCB->DCISW = (((sets << SCB_DCISW_SET_Pos) & SCB_DCISW_SET_Msk) |
 8000a9e:	697b      	ldr	r3, [r7, #20]
 8000aa0:	015a      	lsls	r2, r3, #5
 8000aa2:	f643 73e0 	movw	r3, #16352	; 0x3fe0
 8000aa6:	4013      	ands	r3, r2
                      ((ways << SCB_DCISW_WAY_Pos) & SCB_DCISW_WAY_Msk)  );
 8000aa8:	693a      	ldr	r2, [r7, #16]
 8000aaa:	0792      	lsls	r2, r2, #30
        SCB->DCISW = (((sets << SCB_DCISW_SET_Pos) & SCB_DCISW_SET_Msk) |
 8000aac:	4971      	ldr	r1, [pc, #452]	; (8000c74 <main+0x240>)
 8000aae:	4313      	orrs	r3, r2
 8000ab0:	f8c1 3260 	str.w	r3, [r1, #608]	; 0x260
        #if defined ( __CC_ARM )
          __schedule_barrier();
        #endif
      } while (ways-- != 0U);
 8000ab4:	693b      	ldr	r3, [r7, #16]
 8000ab6:	1e5a      	subs	r2, r3, #1
 8000ab8:	613a      	str	r2, [r7, #16]
 8000aba:	2b00      	cmp	r3, #0
 8000abc:	d1ef      	bne.n	8000a9e <main+0x6a>
    } while(sets-- != 0U);
 8000abe:	697b      	ldr	r3, [r7, #20]
 8000ac0:	1e5a      	subs	r2, r3, #1
 8000ac2:	617a      	str	r2, [r7, #20]
 8000ac4:	2b00      	cmp	r3, #0
 8000ac6:	d1e5      	bne.n	8000a94 <main+0x60>
  __ASM volatile ("dsb 0xF":::"memory");
 8000ac8:	f3bf 8f4f 	dsb	sy
}
 8000acc:	bf00      	nop
    __DSB();

    SCB->CCR |=  (uint32_t)SCB_CCR_DC_Msk;  /* enable D-Cache */
 8000ace:	4b69      	ldr	r3, [pc, #420]	; (8000c74 <main+0x240>)
 8000ad0:	695b      	ldr	r3, [r3, #20]
 8000ad2:	4a68      	ldr	r2, [pc, #416]	; (8000c74 <main+0x240>)
 8000ad4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000ad8:	6153      	str	r3, [r2, #20]
  __ASM volatile ("dsb 0xF":::"memory");
 8000ada:	f3bf 8f4f 	dsb	sy
}
 8000ade:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8000ae0:	f3bf 8f6f 	isb	sy
}
 8000ae4:	e000      	b.n	8000ae8 <main+0xb4>
    if (SCB->CCR & SCB_CCR_DC_Msk) return;  /* return if DCache is already enabled */
 8000ae6:	bf00      	nop
  SCB_EnableDCache();

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000ae8:	f000 ff5a 	bl	80019a0 <HAL_Init>

  /* MPU Configuration--------------------------------------------------------*/
  MPU_Config();
 8000aec:	f000 fcce 	bl	800148c <MPU_Config>

  /* USER CODE BEGIN Init */
  hnor1.CommandSet = (uint16_t)0x0001;
 8000af0:	4b61      	ldr	r3, [pc, #388]	; (8000c78 <main+0x244>)
 8000af2:	2201      	movs	r2, #1
 8000af4:	649a      	str	r2, [r3, #72]	; 0x48
  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000af6:	f000 f8db 	bl	8000cb0 <SystemClock_Config>

/* Configure the peripherals common clocks */
  PeriphCommonClock_Config();
 8000afa:	f000 f97f 	bl	8000dfc <PeriphCommonClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000afe:	f000 faa3 	bl	8001048 <MX_GPIO_Init>
  MX_USART3_UART_Init();
 8000b02:	f000 f9e7 	bl	8000ed4 <MX_USART3_UART_Init>
  MX_USB_OTG_HS_USB_Init();
 8000b06:	f000 fa31 	bl	8000f6c <MX_USB_OTG_HS_USB_Init>
  MX_FMC_Init();
 8000b0a:	f000 fa37 	bl	8000f7c <MX_FMC_Init>
  MX_DMA2D_Init();
 8000b0e:	f000 f9a7 	bl	8000e60 <MX_DMA2D_Init>
  /* USER CODE BEGIN 2 */
  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_11|GPIO_PIN_3, GPIO_PIN_SET);
 8000b12:	2201      	movs	r2, #1
 8000b14:	f640 0108 	movw	r1, #2056	; 0x808
 8000b18:	4858      	ldr	r0, [pc, #352]	; (8000c7c <main+0x248>)
 8000b1a:	f002 f9ad 	bl	8002e78 <HAL_GPIO_WritePin>
  HAL_Delay(100);
 8000b1e:	2064      	movs	r0, #100	; 0x64
 8000b20:	f000 ffd0 	bl	8001ac4 <HAL_Delay>
  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_11, GPIO_PIN_RESET);
 8000b24:	2200      	movs	r2, #0
 8000b26:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8000b2a:	4854      	ldr	r0, [pc, #336]	; (8000c7c <main+0x248>)
 8000b2c:	f002 f9a4 	bl	8002e78 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(RSTn_GPIO_Port, RSTn_Pin, GPIO_PIN_RESET);
 8000b30:	2200      	movs	r2, #0
 8000b32:	2110      	movs	r1, #16
 8000b34:	4852      	ldr	r0, [pc, #328]	; (8000c80 <main+0x24c>)
 8000b36:	f002 f99f 	bl	8002e78 <HAL_GPIO_WritePin>
  HAL_Delay(500);
 8000b3a:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8000b3e:	f000 ffc1 	bl	8001ac4 <HAL_Delay>
  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_11, GPIO_PIN_SET);
 8000b42:	2201      	movs	r2, #1
 8000b44:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8000b48:	484c      	ldr	r0, [pc, #304]	; (8000c7c <main+0x248>)
 8000b4a:	f002 f995 	bl	8002e78 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(RSTn_GPIO_Port, RSTn_Pin, GPIO_PIN_SET);
 8000b4e:	2201      	movs	r2, #1
 8000b50:	2110      	movs	r1, #16
 8000b52:	484b      	ldr	r0, [pc, #300]	; (8000c80 <main+0x24c>)
 8000b54:	f002 f990 	bl	8002e78 <HAL_GPIO_WritePin>
  HAL_Delay(500);
 8000b58:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8000b5c:	f000 ffb2 	bl	8001ac4 <HAL_Delay>
  HAL_GPIO_WritePin(SPI_EN_GPIO_Port, SPI_EN_Pin, GPIO_PIN_SET);
 8000b60:	2201      	movs	r2, #1
 8000b62:	2110      	movs	r1, #16
 8000b64:	4847      	ldr	r0, [pc, #284]	; (8000c84 <main+0x250>)
 8000b66:	f002 f987 	bl	8002e78 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(QSPI_CLK_GPIO_Port, QSPI_CLK_Pin, GPIO_PIN_SET);
 8000b6a:	2201      	movs	r2, #1
 8000b6c:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000b70:	4843      	ldr	r0, [pc, #268]	; (8000c80 <main+0x24c>)
 8000b72:	f002 f981 	bl	8002e78 <HAL_GPIO_WritePin>
  HAL_Delay(500);
 8000b76:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8000b7a:	f000 ffa3 	bl	8001ac4 <HAL_Delay>

printf("Hello Start!!\r\n");
 8000b7e:	4842      	ldr	r0, [pc, #264]	; (8000c88 <main+0x254>)
 8000b80:	f009 fdd2 	bl	800a728 <puts>
  Fill_Buffer(aTxBuffer, BUFFER_SIZE, 0x0000);
 8000b84:	2200      	movs	r2, #0
 8000b86:	2102      	movs	r1, #2
 8000b88:	4840      	ldr	r0, [pc, #256]	; (8000c8c <main+0x258>)
 8000b8a:	f7ff fd8f 	bl	80006ac <Fill_Buffer>
  //HAL_SRAM_Write_16b(&hsram1, (uint32_t *)(SRAM_BANK_ADDR + WRITE_READ_ADDR), (uint16_t *)aTxBuffer, BUFFER_SIZE*2);
  //HAL_SRAM_Write_8b(&hsram1, (uint32_t *)(SRAM_BANK_ADDR + WRITE_READ_ADDR), (uint8_t *)aTxBuffer, BUFFER_SIZE);
  printf("Hello Start!!\r\n");
 8000b8e:	483e      	ldr	r0, [pc, #248]	; (8000c88 <main+0x254>)
 8000b90:	f009 fdca 	bl	800a728 <puts>

	//(*(volatile uint32_t*)(0x60000000)) = (0x00<<16)|(0x02<<8)|(0x00);
  	 //__HAL_LOCK(&hnor1);
  //temp_data[0] = (uint8_t)(*(__IO uint8_t *)(0x60000000));
  //*(__IO uint8_t *)((uint32_t)(0x60000000)) = (uint8_t)(0x00);
  temp_count = 2;
 8000b94:	2302      	movs	r3, #2
 8000b96:	83bb      	strh	r3, [r7, #28]
  *(__IO uint8_t *)((uint32_t)(0x60000000)) = (uint8_t)(0x00);
 8000b98:	f04f 43c0 	mov.w	r3, #1610612736	; 0x60000000
 8000b9c:	2200      	movs	r2, #0
 8000b9e:	701a      	strb	r2, [r3, #0]
  //chip_delay(temp_count);
  *(__IO uint8_t *)((uint32_t)(0x60000001)) = (uint8_t)(0x00);
 8000ba0:	4b3b      	ldr	r3, [pc, #236]	; (8000c90 <main+0x25c>)
 8000ba2:	2200      	movs	r2, #0
 8000ba4:	701a      	strb	r2, [r3, #0]
  //chip_delay(temp_count);
  *(__IO uint8_t *)((uint32_t)(0x60000002)) = (uint8_t)(0x00);
 8000ba6:	4b3b      	ldr	r3, [pc, #236]	; (8000c94 <main+0x260>)
 8000ba8:	2200      	movs	r2, #0
 8000baa:	701a      	strb	r2, [r3, #0]
  //chip_delay(temp_count);

  temp_data[0] = (uint8_t)(*(__IO uint8_t *)(0x60000003));
 8000bac:	4b3a      	ldr	r3, [pc, #232]	; (8000c98 <main+0x264>)
 8000bae:	781b      	ldrb	r3, [r3, #0]
 8000bb0:	b2db      	uxtb	r3, r3
 8000bb2:	733b      	strb	r3, [r7, #12]
  //chip_delay(temp_count);
  temp_data[1] = (uint8_t)(*(__IO uint8_t *)(0x60000003));
 8000bb4:	4b38      	ldr	r3, [pc, #224]	; (8000c98 <main+0x264>)
 8000bb6:	781b      	ldrb	r3, [r3, #0]
 8000bb8:	b2db      	uxtb	r3, r3
 8000bba:	737b      	strb	r3, [r7, #13]
  //chip_delay(temp_count);
  temp_data[2] = (uint8_t)(*(__IO uint8_t *)(0x60000003));
 8000bbc:	4b36      	ldr	r3, [pc, #216]	; (8000c98 <main+0x264>)
 8000bbe:	781b      	ldrb	r3, [r3, #0]
 8000bc0:	b2db      	uxtb	r3, r3
 8000bc2:	73bb      	strb	r3, [r7, #14]
  //chip_delay(temp_count);
  temp_data[3] = (uint8_t)(*(__IO uint8_t *)(0x60000003));
 8000bc4:	4b34      	ldr	r3, [pc, #208]	; (8000c98 <main+0x264>)
 8000bc6:	781b      	ldrb	r3, [r3, #0]
 8000bc8:	b2db      	uxtb	r3, r3
 8000bca:	73fb      	strb	r3, [r7, #15]
  printf("CIDR VER = 0x%02x %02x %02x %02x\r\n", temp_data[0], temp_data[1], temp_data[2], temp_data[3]);
 8000bcc:	7b3b      	ldrb	r3, [r7, #12]
 8000bce:	4619      	mov	r1, r3
 8000bd0:	7b7b      	ldrb	r3, [r7, #13]
 8000bd2:	461a      	mov	r2, r3
 8000bd4:	7bbb      	ldrb	r3, [r7, #14]
 8000bd6:	4618      	mov	r0, r3
 8000bd8:	7bfb      	ldrb	r3, [r7, #15]
 8000bda:	9300      	str	r3, [sp, #0]
 8000bdc:	4603      	mov	r3, r0
 8000bde:	482f      	ldr	r0, [pc, #188]	; (8000c9c <main+0x268>)
 8000be0:	f009 fd3c 	bl	800a65c <iprintf>

  	chip_delay(temp_count);
 8000be4:	8bbb      	ldrh	r3, [r7, #28]
 8000be6:	4618      	mov	r0, r3
 8000be8:	f7ff fda4 	bl	8000734 <chip_delay>
  	chip_delay(temp_count);
 8000bec:	8bbb      	ldrh	r3, [r7, #28]
 8000bee:	4618      	mov	r0, r3
 8000bf0:	f7ff fda0 	bl	8000734 <chip_delay>
	(*(volatile uint8_t*)(0x60000000)) = (uint8_t)(0x00);
 8000bf4:	f04f 43c0 	mov.w	r3, #1610612736	; 0x60000000
 8000bf8:	2200      	movs	r2, #0
 8000bfa:	701a      	strb	r2, [r3, #0]
	//chip_delay(temp_count);
    (*(volatile uint8_t*)(0x60000001)) = (uint8_t)(0x02);
 8000bfc:	4b24      	ldr	r3, [pc, #144]	; (8000c90 <main+0x25c>)
 8000bfe:	2202      	movs	r2, #2
 8000c00:	701a      	strb	r2, [r3, #0]
    //chip_delay(temp_count);
    (*(volatile uint8_t*)(0x60000002)) = (uint8_t)(0x00);
 8000c02:	4b24      	ldr	r3, [pc, #144]	; (8000c94 <main+0x260>)
 8000c04:	2200      	movs	r2, #0
 8000c06:	701a      	strb	r2, [r3, #0]
    //chip_delay(temp_count);
    temp1 = (*(volatile uint8_t*)(0x60000003));
 8000c08:	4b23      	ldr	r3, [pc, #140]	; (8000c98 <main+0x264>)
 8000c0a:	781b      	ldrb	r3, [r3, #0]
 8000c0c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    //chip_delay(temp_count);
    (*(volatile uint8_t*)(0x60000000)) = (uint8_t)(0x00);
 8000c10:	f04f 43c0 	mov.w	r3, #1610612736	; 0x60000000
 8000c14:	2200      	movs	r2, #0
 8000c16:	701a      	strb	r2, [r3, #0]
    //chip_delay(temp_count);
    (*(volatile uint8_t*)(0x60000001)) = (uint8_t)(0x03);
 8000c18:	4b1d      	ldr	r3, [pc, #116]	; (8000c90 <main+0x25c>)
 8000c1a:	2203      	movs	r2, #3
 8000c1c:	701a      	strb	r2, [r3, #0]
    //chip_delay(temp_count);
    (*(volatile uint8_t*)(0x60000002)) = (uint8_t)(0x00);
 8000c1e:	4b1d      	ldr	r3, [pc, #116]	; (8000c94 <main+0x260>)
 8000c20:	2200      	movs	r2, #0
 8000c22:	701a      	strb	r2, [r3, #0]
    //chip_delay(temp_count);
    temp2 = (*(volatile uint8_t*)(0x60000003));
 8000c24:	4b1c      	ldr	r3, [pc, #112]	; (8000c98 <main+0x264>)
 8000c26:	781b      	ldrb	r3, [r3, #0]
 8000c28:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
    //chip_delay(temp_count);
  printf("bin VER = 0x%02x %02x \r\n", temp1, temp2);
 8000c2c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8000c30:	f897 2026 	ldrb.w	r2, [r7, #38]	; 0x26
 8000c34:	4619      	mov	r1, r3
 8000c36:	481a      	ldr	r0, [pc, #104]	; (8000ca0 <main+0x26c>)
 8000c38:	f009 fd10 	bl	800a65c <iprintf>

  //tx memory W/R
  bus_tx_mem_test(0);
 8000c3c:	2000      	movs	r0, #0
 8000c3e:	f7ff fe2d 	bl	800089c <bus_tx_mem_test>

  W6100Initialze();
 8000c42:	f7ff fdd3 	bl	80007ec <W6100Initialze>
  (*(volatile uint8_t*)(0x60000003)) = (uint8_t)(0xff);
  (*(volatile uint8_t*)(0x60000003)) = (uint8_t)(0xff);
  (*(volatile uint8_t*)(0x60000003)) = (uint8_t)(0xff);
  setSHAR(gWIZNETINFO.mac);
#endif
  ctlwizchip(CW_SYS_UNLOCK,& syslock);
 8000c46:	f107 030b 	add.w	r3, r7, #11
 8000c4a:	4619      	mov	r1, r3
 8000c4c:	2001      	movs	r0, #1
 8000c4e:	f008 fd7f 	bl	8009750 <ctlwizchip>
  ctlnetwork(CN_SET_NETINFO,&gWIZNETINFO);
 8000c52:	4914      	ldr	r1, [pc, #80]	; (8000ca4 <main+0x270>)
 8000c54:	2000      	movs	r0, #0
 8000c56:	f008 ff0d 	bl	8009a74 <ctlnetwork>
  printf("Register value after W6100 initialize!\r\n");
 8000c5a:	4813      	ldr	r0, [pc, #76]	; (8000ca8 <main+0x274>)
 8000c5c:	f009 fd64 	bl	800a728 <puts>
  print_network_information();
 8000c60:	f000 fb0a 	bl	8001278 <print_network_information>
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	  loopback_tcps(0,ethBuf3,50003,AS_IPV4);
 8000c64:	2302      	movs	r3, #2
 8000c66:	f24c 3253 	movw	r2, #50003	; 0xc353
 8000c6a:	4910      	ldr	r1, [pc, #64]	; (8000cac <main+0x278>)
 8000c6c:	2000      	movs	r0, #0
 8000c6e:	f006 ff9b 	bl	8007ba8 <loopback_tcps>
  {
 8000c72:	e7f7      	b.n	8000c64 <main+0x230>
 8000c74:	e000ed00 	.word	0xe000ed00
 8000c78:	2000062c 	.word	0x2000062c
 8000c7c:	58020c00 	.word	0x58020c00
 8000c80:	58021400 	.word	0x58021400
 8000c84:	58020800 	.word	0x58020800
 8000c88:	0800b4a8 	.word	0x0800b4a8
 8000c8c:	20000528 	.word	0x20000528
 8000c90:	60000001 	.word	0x60000001
 8000c94:	60000002 	.word	0x60000002
 8000c98:	60000003 	.word	0x60000003
 8000c9c:	0800b4b8 	.word	0x0800b4b8
 8000ca0:	0800b4dc 	.word	0x0800b4dc
 8000ca4:	20000000 	.word	0x20000000
 8000ca8:	0800b4f8 	.word	0x0800b4f8
 8000cac:	20000128 	.word	0x20000128

08000cb0 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000cb0:	b580      	push	{r7, lr}
 8000cb2:	b0a4      	sub	sp, #144	; 0x90
 8000cb4:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000cb6:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8000cba:	224c      	movs	r2, #76	; 0x4c
 8000cbc:	2100      	movs	r1, #0
 8000cbe:	4618      	mov	r0, r3
 8000cc0:	f009 fe12 	bl	800a8e8 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000cc4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000cc8:	2220      	movs	r2, #32
 8000cca:	2100      	movs	r1, #0
 8000ccc:	4618      	mov	r0, r3
 8000cce:	f009 fe0b 	bl	800a8e8 <memset>
  RCC_CRSInitTypeDef RCC_CRSInitStruct = {0};
 8000cd2:	f107 030c 	add.w	r3, r7, #12
 8000cd6:	2200      	movs	r2, #0
 8000cd8:	601a      	str	r2, [r3, #0]
 8000cda:	605a      	str	r2, [r3, #4]
 8000cdc:	609a      	str	r2, [r3, #8]
 8000cde:	60da      	str	r2, [r3, #12]
 8000ce0:	611a      	str	r2, [r3, #16]
 8000ce2:	615a      	str	r2, [r3, #20]

  /** Supply configuration update enable
  */
  HAL_PWREx_ConfigSupply(PWR_LDO_SUPPLY);
 8000ce4:	2002      	movs	r0, #2
 8000ce6:	f002 f9d9 	bl	800309c <HAL_PWREx_ConfigSupply>

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 8000cea:	2300      	movs	r3, #0
 8000cec:	60bb      	str	r3, [r7, #8]
 8000cee:	4b41      	ldr	r3, [pc, #260]	; (8000df4 <SystemClock_Config+0x144>)
 8000cf0:	699b      	ldr	r3, [r3, #24]
 8000cf2:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8000cf6:	4a3f      	ldr	r2, [pc, #252]	; (8000df4 <SystemClock_Config+0x144>)
 8000cf8:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000cfc:	6193      	str	r3, [r2, #24]
 8000cfe:	4b3d      	ldr	r3, [pc, #244]	; (8000df4 <SystemClock_Config+0x144>)
 8000d00:	699b      	ldr	r3, [r3, #24]
 8000d02:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8000d06:	60bb      	str	r3, [r7, #8]
 8000d08:	68bb      	ldr	r3, [r7, #8]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 8000d0a:	bf00      	nop
 8000d0c:	4b39      	ldr	r3, [pc, #228]	; (8000df4 <SystemClock_Config+0x144>)
 8000d0e:	699b      	ldr	r3, [r3, #24]
 8000d10:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8000d14:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8000d18:	d1f8      	bne.n	8000d0c <SystemClock_Config+0x5c>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI48|RCC_OSCILLATORTYPE_CSI;
 8000d1a:	2330      	movs	r3, #48	; 0x30
 8000d1c:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.HSI48State = RCC_HSI48_ON;
 8000d1e:	2301      	movs	r3, #1
 8000d20:	65fb      	str	r3, [r7, #92]	; 0x5c
  RCC_OscInitStruct.CSIState = RCC_CSI_ON;
 8000d22:	2380      	movs	r3, #128	; 0x80
 8000d24:	663b      	str	r3, [r7, #96]	; 0x60
  RCC_OscInitStruct.CSICalibrationValue = 16;
 8000d26:	2310      	movs	r3, #16
 8000d28:	667b      	str	r3, [r7, #100]	; 0x64
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000d2a:	2302      	movs	r3, #2
 8000d2c:	66bb      	str	r3, [r7, #104]	; 0x68
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_CSI;
 8000d2e:	2301      	movs	r3, #1
 8000d30:	66fb      	str	r3, [r7, #108]	; 0x6c
  RCC_OscInitStruct.PLL.PLLM = 4;
 8000d32:	2304      	movs	r3, #4
 8000d34:	673b      	str	r3, [r7, #112]	; 0x70
  RCC_OscInitStruct.PLL.PLLN = 150;
 8000d36:	2396      	movs	r3, #150	; 0x96
 8000d38:	677b      	str	r3, [r7, #116]	; 0x74
  RCC_OscInitStruct.PLL.PLLP = 1;
 8000d3a:	2301      	movs	r3, #1
 8000d3c:	67bb      	str	r3, [r7, #120]	; 0x78
  RCC_OscInitStruct.PLL.PLLQ = 30;
 8000d3e:	231e      	movs	r3, #30
 8000d40:	67fb      	str	r3, [r7, #124]	; 0x7c
  RCC_OscInitStruct.PLL.PLLR = 2;
 8000d42:	2302      	movs	r3, #2
 8000d44:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
  RCC_OscInitStruct.PLL.PLLRGE = RCC_PLL1VCIRANGE_0;
 8000d48:	2300      	movs	r3, #0
 8000d4a:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  RCC_OscInitStruct.PLL.PLLVCOSEL = RCC_PLL1VCOMEDIUM;
 8000d4e:	2302      	movs	r3, #2
 8000d50:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  RCC_OscInitStruct.PLL.PLLFRACN = 0;
 8000d54:	2300      	movs	r3, #0
 8000d56:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000d5a:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8000d5e:	4618      	mov	r0, r3
 8000d60:	f002 f9d6 	bl	8003110 <HAL_RCC_OscConfig>
 8000d64:	4603      	mov	r3, r0
 8000d66:	2b00      	cmp	r3, #0
 8000d68:	d001      	beq.n	8000d6e <SystemClock_Config+0xbe>
  {
    Error_Handler();
 8000d6a:	f000 fbbc 	bl	80014e6 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000d6e:	233f      	movs	r3, #63	; 0x3f
 8000d70:	627b      	str	r3, [r7, #36]	; 0x24
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
                              |RCC_CLOCKTYPE_D3PCLK1|RCC_CLOCKTYPE_D1PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000d72:	2303      	movs	r3, #3
 8000d74:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV1;
 8000d76:	2300      	movs	r3, #0
 8000d78:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV2;
 8000d7a:	2308      	movs	r3, #8
 8000d7c:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_ClkInitStruct.APB3CLKDivider = RCC_APB3_DIV2;
 8000d7e:	2340      	movs	r3, #64	; 0x40
 8000d80:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV2;
 8000d82:	2340      	movs	r3, #64	; 0x40
 8000d84:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_ClkInitStruct.APB2CLKDivider = RCC_APB2_DIV2;
 8000d86:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000d8a:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_ClkInitStruct.APB4CLKDivider = RCC_APB4_DIV2;
 8000d8c:	2340      	movs	r3, #64	; 0x40
 8000d8e:	643b      	str	r3, [r7, #64]	; 0x40

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000d90:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000d94:	2102      	movs	r1, #2
 8000d96:	4618      	mov	r0, r3
 8000d98:	f002 fd94 	bl	80038c4 <HAL_RCC_ClockConfig>
 8000d9c:	4603      	mov	r3, r0
 8000d9e:	2b00      	cmp	r3, #0
 8000da0:	d001      	beq.n	8000da6 <SystemClock_Config+0xf6>
  {
    Error_Handler();
 8000da2:	f000 fba0 	bl	80014e6 <Error_Handler>
  }

  /** Enable the SYSCFG APB clock
  */
  __HAL_RCC_CRS_CLK_ENABLE();
 8000da6:	4b14      	ldr	r3, [pc, #80]	; (8000df8 <SystemClock_Config+0x148>)
 8000da8:	f8d3 30ec 	ldr.w	r3, [r3, #236]	; 0xec
 8000dac:	4a12      	ldr	r2, [pc, #72]	; (8000df8 <SystemClock_Config+0x148>)
 8000dae:	f043 0302 	orr.w	r3, r3, #2
 8000db2:	f8c2 30ec 	str.w	r3, [r2, #236]	; 0xec
 8000db6:	4b10      	ldr	r3, [pc, #64]	; (8000df8 <SystemClock_Config+0x148>)
 8000db8:	f8d3 30ec 	ldr.w	r3, [r3, #236]	; 0xec
 8000dbc:	f003 0302 	and.w	r3, r3, #2
 8000dc0:	607b      	str	r3, [r7, #4]
 8000dc2:	687b      	ldr	r3, [r7, #4]

  /** Configures CRS
  */
  RCC_CRSInitStruct.Prescaler = RCC_CRS_SYNC_DIV1;
 8000dc4:	2300      	movs	r3, #0
 8000dc6:	60fb      	str	r3, [r7, #12]
  RCC_CRSInitStruct.Source = RCC_CRS_SYNC_SOURCE_USB2;
 8000dc8:	f04f 5340 	mov.w	r3, #805306368	; 0x30000000
 8000dcc:	613b      	str	r3, [r7, #16]
  RCC_CRSInitStruct.Polarity = RCC_CRS_SYNC_POLARITY_RISING;
 8000dce:	2300      	movs	r3, #0
 8000dd0:	617b      	str	r3, [r7, #20]
  RCC_CRSInitStruct.ReloadValue = __HAL_RCC_CRS_RELOADVALUE_CALCULATE(48000000,1000);
 8000dd2:	f64b 337f 	movw	r3, #47999	; 0xbb7f
 8000dd6:	61bb      	str	r3, [r7, #24]
  RCC_CRSInitStruct.ErrorLimitValue = 34;
 8000dd8:	2322      	movs	r3, #34	; 0x22
 8000dda:	61fb      	str	r3, [r7, #28]
  RCC_CRSInitStruct.HSI48CalibrationValue = 32;
 8000ddc:	2320      	movs	r3, #32
 8000dde:	623b      	str	r3, [r7, #32]

  HAL_RCCEx_CRSConfig(&RCC_CRSInitStruct);
 8000de0:	f107 030c 	add.w	r3, r7, #12
 8000de4:	4618      	mov	r0, r3
 8000de6:	f004 fd57 	bl	8005898 <HAL_RCCEx_CRSConfig>
}
 8000dea:	bf00      	nop
 8000dec:	3790      	adds	r7, #144	; 0x90
 8000dee:	46bd      	mov	sp, r7
 8000df0:	bd80      	pop	{r7, pc}
 8000df2:	bf00      	nop
 8000df4:	58024800 	.word	0x58024800
 8000df8:	58024400 	.word	0x58024400

08000dfc <PeriphCommonClock_Config>:
/**
  * @brief Peripherals Common Clock Configuration
  * @retval None
  */
void PeriphCommonClock_Config(void)
{
 8000dfc:	b580      	push	{r7, lr}
 8000dfe:	b0ae      	sub	sp, #184	; 0xb8
 8000e00:	af00      	add	r7, sp, #0
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000e02:	463b      	mov	r3, r7
 8000e04:	22b8      	movs	r2, #184	; 0xb8
 8000e06:	2100      	movs	r1, #0
 8000e08:	4618      	mov	r0, r3
 8000e0a:	f009 fd6d 	bl	800a8e8 <memset>

  /** Initializes the peripherals clock
  */
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_FMC|RCC_PERIPHCLK_USART3;
 8000e0e:	4a13      	ldr	r2, [pc, #76]	; (8000e5c <PeriphCommonClock_Config+0x60>)
 8000e10:	f04f 0300 	mov.w	r3, #0
 8000e14:	e9c7 2300 	strd	r2, r3, [r7]
  PeriphClkInitStruct.PLL2.PLL2M = 2;
 8000e18:	2302      	movs	r3, #2
 8000e1a:	60bb      	str	r3, [r7, #8]
  PeriphClkInitStruct.PLL2.PLL2N = 150;
 8000e1c:	2396      	movs	r3, #150	; 0x96
 8000e1e:	60fb      	str	r3, [r7, #12]
  PeriphClkInitStruct.PLL2.PLL2P = 2;
 8000e20:	2302      	movs	r3, #2
 8000e22:	613b      	str	r3, [r7, #16]
  PeriphClkInitStruct.PLL2.PLL2Q = 40;
 8000e24:	2328      	movs	r3, #40	; 0x28
 8000e26:	617b      	str	r3, [r7, #20]
  PeriphClkInitStruct.PLL2.PLL2R = 10;
 8000e28:	230a      	movs	r3, #10
 8000e2a:	61bb      	str	r3, [r7, #24]
  PeriphClkInitStruct.PLL2.PLL2RGE = RCC_PLL2VCIRANGE_1;
 8000e2c:	2340      	movs	r3, #64	; 0x40
 8000e2e:	61fb      	str	r3, [r7, #28]
  PeriphClkInitStruct.PLL2.PLL2VCOSEL = RCC_PLL2VCOWIDE;
 8000e30:	2300      	movs	r3, #0
 8000e32:	623b      	str	r3, [r7, #32]
  PeriphClkInitStruct.PLL2.PLL2FRACN = 0;
 8000e34:	2300      	movs	r3, #0
 8000e36:	627b      	str	r3, [r7, #36]	; 0x24
  PeriphClkInitStruct.FmcClockSelection = RCC_FMCCLKSOURCE_PLL2;
 8000e38:	2302      	movs	r3, #2
 8000e3a:	64bb      	str	r3, [r7, #72]	; 0x48
  PeriphClkInitStruct.Usart234578ClockSelection = RCC_USART234578CLKSOURCE_PLL2;
 8000e3c:	2301      	movs	r3, #1
 8000e3e:	677b      	str	r3, [r7, #116]	; 0x74
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000e40:	463b      	mov	r3, r7
 8000e42:	4618      	mov	r0, r3
 8000e44:	f003 f8ca 	bl	8003fdc <HAL_RCCEx_PeriphCLKConfig>
 8000e48:	4603      	mov	r3, r0
 8000e4a:	2b00      	cmp	r3, #0
 8000e4c:	d001      	beq.n	8000e52 <PeriphCommonClock_Config+0x56>
  {
    Error_Handler();
 8000e4e:	f000 fb4a 	bl	80014e6 <Error_Handler>
  }
}
 8000e52:	bf00      	nop
 8000e54:	37b8      	adds	r7, #184	; 0xb8
 8000e56:	46bd      	mov	sp, r7
 8000e58:	bd80      	pop	{r7, pc}
 8000e5a:	bf00      	nop
 8000e5c:	01000002 	.word	0x01000002

08000e60 <MX_DMA2D_Init>:
  * @brief DMA2D Initialization Function
  * @param None
  * @retval None
  */
static void MX_DMA2D_Init(void)
{
 8000e60:	b580      	push	{r7, lr}
 8000e62:	af00      	add	r7, sp, #0
  /* USER CODE END DMA2D_Init 0 */

  /* USER CODE BEGIN DMA2D_Init 1 */

  /* USER CODE END DMA2D_Init 1 */
  hdma2d.Instance = DMA2D;
 8000e64:	4b19      	ldr	r3, [pc, #100]	; (8000ecc <MX_DMA2D_Init+0x6c>)
 8000e66:	4a1a      	ldr	r2, [pc, #104]	; (8000ed0 <MX_DMA2D_Init+0x70>)
 8000e68:	601a      	str	r2, [r3, #0]
  hdma2d.Init.Mode = DMA2D_M2M;
 8000e6a:	4b18      	ldr	r3, [pc, #96]	; (8000ecc <MX_DMA2D_Init+0x6c>)
 8000e6c:	2200      	movs	r2, #0
 8000e6e:	605a      	str	r2, [r3, #4]
  hdma2d.Init.ColorMode = DMA2D_OUTPUT_ARGB8888;
 8000e70:	4b16      	ldr	r3, [pc, #88]	; (8000ecc <MX_DMA2D_Init+0x6c>)
 8000e72:	2200      	movs	r2, #0
 8000e74:	609a      	str	r2, [r3, #8]
  hdma2d.Init.OutputOffset = 0;
 8000e76:	4b15      	ldr	r3, [pc, #84]	; (8000ecc <MX_DMA2D_Init+0x6c>)
 8000e78:	2200      	movs	r2, #0
 8000e7a:	60da      	str	r2, [r3, #12]
  hdma2d.LayerCfg[1].InputOffset = 0;
 8000e7c:	4b13      	ldr	r3, [pc, #76]	; (8000ecc <MX_DMA2D_Init+0x6c>)
 8000e7e:	2200      	movs	r2, #0
 8000e80:	645a      	str	r2, [r3, #68]	; 0x44
  hdma2d.LayerCfg[1].InputColorMode = DMA2D_INPUT_ARGB8888;
 8000e82:	4b12      	ldr	r3, [pc, #72]	; (8000ecc <MX_DMA2D_Init+0x6c>)
 8000e84:	2200      	movs	r2, #0
 8000e86:	649a      	str	r2, [r3, #72]	; 0x48
  hdma2d.LayerCfg[1].AlphaMode = DMA2D_NO_MODIF_ALPHA;
 8000e88:	4b10      	ldr	r3, [pc, #64]	; (8000ecc <MX_DMA2D_Init+0x6c>)
 8000e8a:	2200      	movs	r2, #0
 8000e8c:	64da      	str	r2, [r3, #76]	; 0x4c
  hdma2d.LayerCfg[1].InputAlpha = 0;
 8000e8e:	4b0f      	ldr	r3, [pc, #60]	; (8000ecc <MX_DMA2D_Init+0x6c>)
 8000e90:	2200      	movs	r2, #0
 8000e92:	651a      	str	r2, [r3, #80]	; 0x50
  hdma2d.LayerCfg[1].AlphaInverted = DMA2D_REGULAR_ALPHA;
 8000e94:	4b0d      	ldr	r3, [pc, #52]	; (8000ecc <MX_DMA2D_Init+0x6c>)
 8000e96:	2200      	movs	r2, #0
 8000e98:	655a      	str	r2, [r3, #84]	; 0x54
  hdma2d.LayerCfg[1].RedBlueSwap = DMA2D_RB_REGULAR;
 8000e9a:	4b0c      	ldr	r3, [pc, #48]	; (8000ecc <MX_DMA2D_Init+0x6c>)
 8000e9c:	2200      	movs	r2, #0
 8000e9e:	659a      	str	r2, [r3, #88]	; 0x58
  hdma2d.LayerCfg[1].ChromaSubSampling = DMA2D_NO_CSS;
 8000ea0:	4b0a      	ldr	r3, [pc, #40]	; (8000ecc <MX_DMA2D_Init+0x6c>)
 8000ea2:	2200      	movs	r2, #0
 8000ea4:	65da      	str	r2, [r3, #92]	; 0x5c
  if (HAL_DMA2D_Init(&hdma2d) != HAL_OK)
 8000ea6:	4809      	ldr	r0, [pc, #36]	; (8000ecc <MX_DMA2D_Init+0x6c>)
 8000ea8:	f001 fd2c 	bl	8002904 <HAL_DMA2D_Init>
 8000eac:	4603      	mov	r3, r0
 8000eae:	2b00      	cmp	r3, #0
 8000eb0:	d001      	beq.n	8000eb6 <MX_DMA2D_Init+0x56>
  {
    Error_Handler();
 8000eb2:	f000 fb18 	bl	80014e6 <Error_Handler>
  }
  if (HAL_DMA2D_ConfigLayer(&hdma2d, 1) != HAL_OK)
 8000eb6:	2101      	movs	r1, #1
 8000eb8:	4804      	ldr	r0, [pc, #16]	; (8000ecc <MX_DMA2D_Init+0x6c>)
 8000eba:	f001 fd87 	bl	80029cc <HAL_DMA2D_ConfigLayer>
 8000ebe:	4603      	mov	r3, r0
 8000ec0:	2b00      	cmp	r3, #0
 8000ec2:	d001      	beq.n	8000ec8 <MX_DMA2D_Init+0x68>
  {
    Error_Handler();
 8000ec4:	f000 fb0f 	bl	80014e6 <Error_Handler>
  }
  /* USER CODE BEGIN DMA2D_Init 2 */

  /* USER CODE END DMA2D_Init 2 */

}
 8000ec8:	bf00      	nop
 8000eca:	bd80      	pop	{r7, pc}
 8000ecc:	20000530 	.word	0x20000530
 8000ed0:	52001000 	.word	0x52001000

08000ed4 <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 8000ed4:	b580      	push	{r7, lr}
 8000ed6:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8000ed8:	4b22      	ldr	r3, [pc, #136]	; (8000f64 <MX_USART3_UART_Init+0x90>)
 8000eda:	4a23      	ldr	r2, [pc, #140]	; (8000f68 <MX_USART3_UART_Init+0x94>)
 8000edc:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 8000ede:	4b21      	ldr	r3, [pc, #132]	; (8000f64 <MX_USART3_UART_Init+0x90>)
 8000ee0:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000ee4:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8000ee6:	4b1f      	ldr	r3, [pc, #124]	; (8000f64 <MX_USART3_UART_Init+0x90>)
 8000ee8:	2200      	movs	r2, #0
 8000eea:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8000eec:	4b1d      	ldr	r3, [pc, #116]	; (8000f64 <MX_USART3_UART_Init+0x90>)
 8000eee:	2200      	movs	r2, #0
 8000ef0:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8000ef2:	4b1c      	ldr	r3, [pc, #112]	; (8000f64 <MX_USART3_UART_Init+0x90>)
 8000ef4:	2200      	movs	r2, #0
 8000ef6:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8000ef8:	4b1a      	ldr	r3, [pc, #104]	; (8000f64 <MX_USART3_UART_Init+0x90>)
 8000efa:	220c      	movs	r2, #12
 8000efc:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000efe:	4b19      	ldr	r3, [pc, #100]	; (8000f64 <MX_USART3_UART_Init+0x90>)
 8000f00:	2200      	movs	r2, #0
 8000f02:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8000f04:	4b17      	ldr	r3, [pc, #92]	; (8000f64 <MX_USART3_UART_Init+0x90>)
 8000f06:	2200      	movs	r2, #0
 8000f08:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000f0a:	4b16      	ldr	r3, [pc, #88]	; (8000f64 <MX_USART3_UART_Init+0x90>)
 8000f0c:	2200      	movs	r2, #0
 8000f0e:	621a      	str	r2, [r3, #32]
  huart3.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8000f10:	4b14      	ldr	r3, [pc, #80]	; (8000f64 <MX_USART3_UART_Init+0x90>)
 8000f12:	2200      	movs	r2, #0
 8000f14:	625a      	str	r2, [r3, #36]	; 0x24
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000f16:	4b13      	ldr	r3, [pc, #76]	; (8000f64 <MX_USART3_UART_Init+0x90>)
 8000f18:	2200      	movs	r2, #0
 8000f1a:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8000f1c:	4811      	ldr	r0, [pc, #68]	; (8000f64 <MX_USART3_UART_Init+0x90>)
 8000f1e:	f004 fe75 	bl	8005c0c <HAL_UART_Init>
 8000f22:	4603      	mov	r3, r0
 8000f24:	2b00      	cmp	r3, #0
 8000f26:	d001      	beq.n	8000f2c <MX_USART3_UART_Init+0x58>
  {
    Error_Handler();
 8000f28:	f000 fadd 	bl	80014e6 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart3, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000f2c:	2100      	movs	r1, #0
 8000f2e:	480d      	ldr	r0, [pc, #52]	; (8000f64 <MX_USART3_UART_Init+0x90>)
 8000f30:	f006 fc42 	bl	80077b8 <HAL_UARTEx_SetTxFifoThreshold>
 8000f34:	4603      	mov	r3, r0
 8000f36:	2b00      	cmp	r3, #0
 8000f38:	d001      	beq.n	8000f3e <MX_USART3_UART_Init+0x6a>
  {
    Error_Handler();
 8000f3a:	f000 fad4 	bl	80014e6 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart3, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000f3e:	2100      	movs	r1, #0
 8000f40:	4808      	ldr	r0, [pc, #32]	; (8000f64 <MX_USART3_UART_Init+0x90>)
 8000f42:	f006 fc77 	bl	8007834 <HAL_UARTEx_SetRxFifoThreshold>
 8000f46:	4603      	mov	r3, r0
 8000f48:	2b00      	cmp	r3, #0
 8000f4a:	d001      	beq.n	8000f50 <MX_USART3_UART_Init+0x7c>
  {
    Error_Handler();
 8000f4c:	f000 facb 	bl	80014e6 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart3) != HAL_OK)
 8000f50:	4804      	ldr	r0, [pc, #16]	; (8000f64 <MX_USART3_UART_Init+0x90>)
 8000f52:	f006 fbf8 	bl	8007746 <HAL_UARTEx_DisableFifoMode>
 8000f56:	4603      	mov	r3, r0
 8000f58:	2b00      	cmp	r3, #0
 8000f5a:	d001      	beq.n	8000f60 <MX_USART3_UART_Init+0x8c>
  {
    Error_Handler();
 8000f5c:	f000 fac3 	bl	80014e6 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8000f60:	bf00      	nop
 8000f62:	bd80      	pop	{r7, pc}
 8000f64:	20000598 	.word	0x20000598
 8000f68:	40004800 	.word	0x40004800

08000f6c <MX_USB_OTG_HS_USB_Init>:
  * @brief USB_OTG_HS Initialization Function
  * @param None
  * @retval None
  */
static void MX_USB_OTG_HS_USB_Init(void)
{
 8000f6c:	b480      	push	{r7}
 8000f6e:	af00      	add	r7, sp, #0
  /* USER CODE END USB_OTG_HS_Init 1 */
  /* USER CODE BEGIN USB_OTG_HS_Init 2 */

  /* USER CODE END USB_OTG_HS_Init 2 */

}
 8000f70:	bf00      	nop
 8000f72:	46bd      	mov	sp, r7
 8000f74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f78:	4770      	bx	lr
	...

08000f7c <MX_FMC_Init>:

/* FMC initialization function */
static void MX_FMC_Init(void)
{
 8000f7c:	b580      	push	{r7, lr}
 8000f7e:	b088      	sub	sp, #32
 8000f80:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN FMC_Init 0 */

  /* USER CODE END FMC_Init 0 */

  FMC_NORSRAM_TimingTypeDef Timing = {0};
 8000f82:	1d3b      	adds	r3, r7, #4
 8000f84:	2200      	movs	r2, #0
 8000f86:	601a      	str	r2, [r3, #0]
 8000f88:	605a      	str	r2, [r3, #4]
 8000f8a:	609a      	str	r2, [r3, #8]
 8000f8c:	60da      	str	r2, [r3, #12]
 8000f8e:	611a      	str	r2, [r3, #16]
 8000f90:	615a      	str	r2, [r3, #20]
 8000f92:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN FMC_Init 1 */
  hnor1.CommandSet = (uint16_t)0x0001;
 8000f94:	4b29      	ldr	r3, [pc, #164]	; (800103c <MX_FMC_Init+0xc0>)
 8000f96:	2201      	movs	r2, #1
 8000f98:	649a      	str	r2, [r3, #72]	; 0x48
  /* USER CODE END FMC_Init 1 */

  /** Perform the NOR1 memory initialization sequence
  */
  hnor1.Instance = FMC_NORSRAM_DEVICE;
 8000f9a:	4b28      	ldr	r3, [pc, #160]	; (800103c <MX_FMC_Init+0xc0>)
 8000f9c:	4a28      	ldr	r2, [pc, #160]	; (8001040 <MX_FMC_Init+0xc4>)
 8000f9e:	601a      	str	r2, [r3, #0]
  hnor1.Extended = FMC_NORSRAM_EXTENDED_DEVICE;
 8000fa0:	4b26      	ldr	r3, [pc, #152]	; (800103c <MX_FMC_Init+0xc0>)
 8000fa2:	4a28      	ldr	r2, [pc, #160]	; (8001044 <MX_FMC_Init+0xc8>)
 8000fa4:	605a      	str	r2, [r3, #4]
  /* hnor1.Init */
  hnor1.Init.NSBank = FMC_NORSRAM_BANK1;
 8000fa6:	4b25      	ldr	r3, [pc, #148]	; (800103c <MX_FMC_Init+0xc0>)
 8000fa8:	2200      	movs	r2, #0
 8000faa:	609a      	str	r2, [r3, #8]
  hnor1.Init.DataAddressMux = FMC_DATA_ADDRESS_MUX_DISABLE;
 8000fac:	4b23      	ldr	r3, [pc, #140]	; (800103c <MX_FMC_Init+0xc0>)
 8000fae:	2200      	movs	r2, #0
 8000fb0:	60da      	str	r2, [r3, #12]
  hnor1.Init.MemoryType = FMC_MEMORY_TYPE_NOR;
 8000fb2:	4b22      	ldr	r3, [pc, #136]	; (800103c <MX_FMC_Init+0xc0>)
 8000fb4:	2208      	movs	r2, #8
 8000fb6:	611a      	str	r2, [r3, #16]
  hnor1.Init.MemoryDataWidth = FMC_NORSRAM_MEM_BUS_WIDTH_8;
 8000fb8:	4b20      	ldr	r3, [pc, #128]	; (800103c <MX_FMC_Init+0xc0>)
 8000fba:	2200      	movs	r2, #0
 8000fbc:	615a      	str	r2, [r3, #20]
  hnor1.Init.BurstAccessMode = FMC_BURST_ACCESS_MODE_DISABLE;
 8000fbe:	4b1f      	ldr	r3, [pc, #124]	; (800103c <MX_FMC_Init+0xc0>)
 8000fc0:	2200      	movs	r2, #0
 8000fc2:	619a      	str	r2, [r3, #24]
  hnor1.Init.WaitSignalPolarity = FMC_WAIT_SIGNAL_POLARITY_LOW;
 8000fc4:	4b1d      	ldr	r3, [pc, #116]	; (800103c <MX_FMC_Init+0xc0>)
 8000fc6:	2200      	movs	r2, #0
 8000fc8:	61da      	str	r2, [r3, #28]
  hnor1.Init.WaitSignalActive = FMC_WAIT_TIMING_BEFORE_WS;
 8000fca:	4b1c      	ldr	r3, [pc, #112]	; (800103c <MX_FMC_Init+0xc0>)
 8000fcc:	2200      	movs	r2, #0
 8000fce:	621a      	str	r2, [r3, #32]
  hnor1.Init.WriteOperation = FMC_WRITE_OPERATION_ENABLE;
 8000fd0:	4b1a      	ldr	r3, [pc, #104]	; (800103c <MX_FMC_Init+0xc0>)
 8000fd2:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8000fd6:	625a      	str	r2, [r3, #36]	; 0x24
  hnor1.Init.WaitSignal = FMC_WAIT_SIGNAL_DISABLE;
 8000fd8:	4b18      	ldr	r3, [pc, #96]	; (800103c <MX_FMC_Init+0xc0>)
 8000fda:	2200      	movs	r2, #0
 8000fdc:	629a      	str	r2, [r3, #40]	; 0x28
  hnor1.Init.ExtendedMode = FMC_EXTENDED_MODE_DISABLE;
 8000fde:	4b17      	ldr	r3, [pc, #92]	; (800103c <MX_FMC_Init+0xc0>)
 8000fe0:	2200      	movs	r2, #0
 8000fe2:	62da      	str	r2, [r3, #44]	; 0x2c
  hnor1.Init.AsynchronousWait = FMC_ASYNCHRONOUS_WAIT_DISABLE;
 8000fe4:	4b15      	ldr	r3, [pc, #84]	; (800103c <MX_FMC_Init+0xc0>)
 8000fe6:	2200      	movs	r2, #0
 8000fe8:	631a      	str	r2, [r3, #48]	; 0x30
  hnor1.Init.WriteBurst = FMC_WRITE_BURST_DISABLE;
 8000fea:	4b14      	ldr	r3, [pc, #80]	; (800103c <MX_FMC_Init+0xc0>)
 8000fec:	2200      	movs	r2, #0
 8000fee:	635a      	str	r2, [r3, #52]	; 0x34
  hnor1.Init.ContinuousClock = FMC_CONTINUOUS_CLOCK_SYNC_ONLY;
 8000ff0:	4b12      	ldr	r3, [pc, #72]	; (800103c <MX_FMC_Init+0xc0>)
 8000ff2:	2200      	movs	r2, #0
 8000ff4:	639a      	str	r2, [r3, #56]	; 0x38
  hnor1.Init.WriteFifo = FMC_WRITE_FIFO_ENABLE;
 8000ff6:	4b11      	ldr	r3, [pc, #68]	; (800103c <MX_FMC_Init+0xc0>)
 8000ff8:	2200      	movs	r2, #0
 8000ffa:	63da      	str	r2, [r3, #60]	; 0x3c
  hnor1.Init.PageSize = FMC_PAGE_SIZE_NONE;
 8000ffc:	4b0f      	ldr	r3, [pc, #60]	; (800103c <MX_FMC_Init+0xc0>)
 8000ffe:	2200      	movs	r2, #0
 8001000:	641a      	str	r2, [r3, #64]	; 0x40
  /* Timing */
  Timing.AddressSetupTime = 1;
 8001002:	2301      	movs	r3, #1
 8001004:	607b      	str	r3, [r7, #4]
  Timing.AddressHoldTime = 15;
 8001006:	230f      	movs	r3, #15
 8001008:	60bb      	str	r3, [r7, #8]
  Timing.DataSetupTime = 1;
 800100a:	2301      	movs	r3, #1
 800100c:	60fb      	str	r3, [r7, #12]
  Timing.BusTurnAroundDuration = 1;
 800100e:	2301      	movs	r3, #1
 8001010:	613b      	str	r3, [r7, #16]
  Timing.CLKDivision = 16;
 8001012:	2310      	movs	r3, #16
 8001014:	617b      	str	r3, [r7, #20]
  Timing.DataLatency = 17;
 8001016:	2311      	movs	r3, #17
 8001018:	61bb      	str	r3, [r7, #24]
  Timing.AccessMode = FMC_ACCESS_MODE_A;
 800101a:	2300      	movs	r3, #0
 800101c:	61fb      	str	r3, [r7, #28]
  /* ExtTiming */

  if (HAL_NOR_Init(&hnor1, &Timing, NULL) != HAL_OK)
 800101e:	1d3b      	adds	r3, r7, #4
 8001020:	2200      	movs	r2, #0
 8001022:	4619      	mov	r1, r3
 8001024:	4805      	ldr	r0, [pc, #20]	; (800103c <MX_FMC_Init+0xc0>)
 8001026:	f001 ff41 	bl	8002eac <HAL_NOR_Init>
 800102a:	4603      	mov	r3, r0
 800102c:	2b00      	cmp	r3, #0
 800102e:	d001      	beq.n	8001034 <MX_FMC_Init+0xb8>
  {
    Error_Handler( );
 8001030:	f000 fa59 	bl	80014e6 <Error_Handler>
  }

  /* USER CODE BEGIN FMC_Init 2 */

  /* USER CODE END FMC_Init 2 */
}
 8001034:	bf00      	nop
 8001036:	3720      	adds	r7, #32
 8001038:	46bd      	mov	sp, r7
 800103a:	bd80      	pop	{r7, pc}
 800103c:	2000062c 	.word	0x2000062c
 8001040:	52004000 	.word	0x52004000
 8001044:	52004104 	.word	0x52004104

08001048 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001048:	b580      	push	{r7, lr}
 800104a:	b08c      	sub	sp, #48	; 0x30
 800104c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800104e:	f107 031c 	add.w	r3, r7, #28
 8001052:	2200      	movs	r2, #0
 8001054:	601a      	str	r2, [r3, #0]
 8001056:	605a      	str	r2, [r3, #4]
 8001058:	609a      	str	r2, [r3, #8]
 800105a:	60da      	str	r2, [r3, #12]
 800105c:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800105e:	4b7e      	ldr	r3, [pc, #504]	; (8001258 <MX_GPIO_Init+0x210>)
 8001060:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001064:	4a7c      	ldr	r2, [pc, #496]	; (8001258 <MX_GPIO_Init+0x210>)
 8001066:	f043 0304 	orr.w	r3, r3, #4
 800106a:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800106e:	4b7a      	ldr	r3, [pc, #488]	; (8001258 <MX_GPIO_Init+0x210>)
 8001070:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001074:	f003 0304 	and.w	r3, r3, #4
 8001078:	61bb      	str	r3, [r7, #24]
 800107a:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 800107c:	4b76      	ldr	r3, [pc, #472]	; (8001258 <MX_GPIO_Init+0x210>)
 800107e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001082:	4a75      	ldr	r2, [pc, #468]	; (8001258 <MX_GPIO_Init+0x210>)
 8001084:	f043 0320 	orr.w	r3, r3, #32
 8001088:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800108c:	4b72      	ldr	r3, [pc, #456]	; (8001258 <MX_GPIO_Init+0x210>)
 800108e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001092:	f003 0320 	and.w	r3, r3, #32
 8001096:	617b      	str	r3, [r7, #20]
 8001098:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800109a:	4b6f      	ldr	r3, [pc, #444]	; (8001258 <MX_GPIO_Init+0x210>)
 800109c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80010a0:	4a6d      	ldr	r2, [pc, #436]	; (8001258 <MX_GPIO_Init+0x210>)
 80010a2:	f043 0302 	orr.w	r3, r3, #2
 80010a6:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80010aa:	4b6b      	ldr	r3, [pc, #428]	; (8001258 <MX_GPIO_Init+0x210>)
 80010ac:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80010b0:	f003 0302 	and.w	r3, r3, #2
 80010b4:	613b      	str	r3, [r7, #16]
 80010b6:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 80010b8:	4b67      	ldr	r3, [pc, #412]	; (8001258 <MX_GPIO_Init+0x210>)
 80010ba:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80010be:	4a66      	ldr	r2, [pc, #408]	; (8001258 <MX_GPIO_Init+0x210>)
 80010c0:	f043 0310 	orr.w	r3, r3, #16
 80010c4:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80010c8:	4b63      	ldr	r3, [pc, #396]	; (8001258 <MX_GPIO_Init+0x210>)
 80010ca:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80010ce:	f003 0310 	and.w	r3, r3, #16
 80010d2:	60fb      	str	r3, [r7, #12]
 80010d4:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80010d6:	4b60      	ldr	r3, [pc, #384]	; (8001258 <MX_GPIO_Init+0x210>)
 80010d8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80010dc:	4a5e      	ldr	r2, [pc, #376]	; (8001258 <MX_GPIO_Init+0x210>)
 80010de:	f043 0308 	orr.w	r3, r3, #8
 80010e2:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80010e6:	4b5c      	ldr	r3, [pc, #368]	; (8001258 <MX_GPIO_Init+0x210>)
 80010e8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80010ec:	f003 0308 	and.w	r3, r3, #8
 80010f0:	60bb      	str	r3, [r7, #8]
 80010f2:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 80010f4:	4b58      	ldr	r3, [pc, #352]	; (8001258 <MX_GPIO_Init+0x210>)
 80010f6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80010fa:	4a57      	ldr	r2, [pc, #348]	; (8001258 <MX_GPIO_Init+0x210>)
 80010fc:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8001100:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001104:	4b54      	ldr	r3, [pc, #336]	; (8001258 <MX_GPIO_Init+0x210>)
 8001106:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800110a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800110e:	607b      	str	r3, [r7, #4]
 8001110:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001112:	4b51      	ldr	r3, [pc, #324]	; (8001258 <MX_GPIO_Init+0x210>)
 8001114:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001118:	4a4f      	ldr	r2, [pc, #316]	; (8001258 <MX_GPIO_Init+0x210>)
 800111a:	f043 0301 	orr.w	r3, r3, #1
 800111e:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001122:	4b4d      	ldr	r3, [pc, #308]	; (8001258 <MX_GPIO_Init+0x210>)
 8001124:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001128:	f003 0301 	and.w	r3, r3, #1
 800112c:	603b      	str	r3, [r7, #0]
 800112e:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOF, RSTn_Pin|QSPI_CLK_Pin, GPIO_PIN_RESET);
 8001130:	2200      	movs	r2, #0
 8001132:	f44f 6182 	mov.w	r1, #1040	; 0x410
 8001136:	4849      	ldr	r0, [pc, #292]	; (800125c <MX_GPIO_Init+0x214>)
 8001138:	f001 fe9e 	bl	8002e78 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(SPI_EN_GPIO_Port, SPI_EN_Pin, GPIO_PIN_RESET);
 800113c:	2200      	movs	r2, #0
 800113e:	2110      	movs	r1, #16
 8001140:	4847      	ldr	r0, [pc, #284]	; (8001260 <MX_GPIO_Init+0x218>)
 8001142:	f001 fe99 	bl	8002e78 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LED_GREEN_Pin|LED_RED_Pin, GPIO_PIN_RESET);
 8001146:	2200      	movs	r2, #0
 8001148:	f244 0101 	movw	r1, #16385	; 0x4001
 800114c:	4845      	ldr	r0, [pc, #276]	; (8001264 <MX_GPIO_Init+0x21c>)
 800114e:	f001 fe93 	bl	8002e78 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, USB_FS_PWR_EN_Pin|GPIO_PIN_11|GPIO_PIN_3, GPIO_PIN_RESET);
 8001152:	2200      	movs	r2, #0
 8001154:	f640 4108 	movw	r1, #3080	; 0xc08
 8001158:	4843      	ldr	r0, [pc, #268]	; (8001268 <MX_GPIO_Init+0x220>)
 800115a:	f001 fe8d 	bl	8002e78 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED_YELLOW_GPIO_Port, LED_YELLOW_Pin, GPIO_PIN_RESET);
 800115e:	2200      	movs	r2, #0
 8001160:	2102      	movs	r1, #2
 8001162:	4842      	ldr	r0, [pc, #264]	; (800126c <MX_GPIO_Init+0x224>)
 8001164:	f001 fe88 	bl	8002e78 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8001168:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800116c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800116e:	2300      	movs	r3, #0
 8001170:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001172:	2300      	movs	r3, #0
 8001174:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8001176:	f107 031c 	add.w	r3, r7, #28
 800117a:	4619      	mov	r1, r3
 800117c:	4838      	ldr	r0, [pc, #224]	; (8001260 <MX_GPIO_Init+0x218>)
 800117e:	f001 fcd3 	bl	8002b28 <HAL_GPIO_Init>

  /*Configure GPIO pins : RSTn_Pin QSPI_CLK_Pin */
  GPIO_InitStruct.Pin = RSTn_Pin|QSPI_CLK_Pin;
 8001182:	f44f 6382 	mov.w	r3, #1040	; 0x410
 8001186:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001188:	2301      	movs	r3, #1
 800118a:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800118c:	2300      	movs	r3, #0
 800118e:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001190:	2300      	movs	r3, #0
 8001192:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8001194:	f107 031c 	add.w	r3, r7, #28
 8001198:	4619      	mov	r1, r3
 800119a:	4830      	ldr	r0, [pc, #192]	; (800125c <MX_GPIO_Init+0x214>)
 800119c:	f001 fcc4 	bl	8002b28 <HAL_GPIO_Init>

  /*Configure GPIO pin : SPI_EN_Pin */
  GPIO_InitStruct.Pin = SPI_EN_Pin;
 80011a0:	2310      	movs	r3, #16
 80011a2:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80011a4:	2301      	movs	r3, #1
 80011a6:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80011a8:	2300      	movs	r3, #0
 80011aa:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80011ac:	2300      	movs	r3, #0
 80011ae:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(SPI_EN_GPIO_Port, &GPIO_InitStruct);
 80011b0:	f107 031c 	add.w	r3, r7, #28
 80011b4:	4619      	mov	r1, r3
 80011b6:	482a      	ldr	r0, [pc, #168]	; (8001260 <MX_GPIO_Init+0x218>)
 80011b8:	f001 fcb6 	bl	8002b28 <HAL_GPIO_Init>

  /*Configure GPIO pins : LED_GREEN_Pin LED_RED_Pin */
  GPIO_InitStruct.Pin = LED_GREEN_Pin|LED_RED_Pin;
 80011bc:	f244 0301 	movw	r3, #16385	; 0x4001
 80011c0:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80011c2:	2301      	movs	r3, #1
 80011c4:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80011c6:	2300      	movs	r3, #0
 80011c8:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80011ca:	2300      	movs	r3, #0
 80011cc:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80011ce:	f107 031c 	add.w	r3, r7, #28
 80011d2:	4619      	mov	r1, r3
 80011d4:	4823      	ldr	r0, [pc, #140]	; (8001264 <MX_GPIO_Init+0x21c>)
 80011d6:	f001 fca7 	bl	8002b28 <HAL_GPIO_Init>

  /*Configure GPIO pins : USB_FS_PWR_EN_Pin PD11 PD3 */
  GPIO_InitStruct.Pin = USB_FS_PWR_EN_Pin|GPIO_PIN_11|GPIO_PIN_3;
 80011da:	f640 4308 	movw	r3, #3080	; 0xc08
 80011de:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80011e0:	2301      	movs	r3, #1
 80011e2:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80011e4:	2300      	movs	r3, #0
 80011e6:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80011e8:	2300      	movs	r3, #0
 80011ea:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80011ec:	f107 031c 	add.w	r3, r7, #28
 80011f0:	4619      	mov	r1, r3
 80011f2:	481d      	ldr	r0, [pc, #116]	; (8001268 <MX_GPIO_Init+0x220>)
 80011f4:	f001 fc98 	bl	8002b28 <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_FS_OVCR_Pin */
  GPIO_InitStruct.Pin = USB_FS_OVCR_Pin;
 80011f8:	2380      	movs	r3, #128	; 0x80
 80011fa:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80011fc:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8001200:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001202:	2300      	movs	r3, #0
 8001204:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(USB_FS_OVCR_GPIO_Port, &GPIO_InitStruct);
 8001206:	f107 031c 	add.w	r3, r7, #28
 800120a:	4619      	mov	r1, r3
 800120c:	4818      	ldr	r0, [pc, #96]	; (8001270 <MX_GPIO_Init+0x228>)
 800120e:	f001 fc8b 	bl	8002b28 <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_FS_ID_Pin */
  GPIO_InitStruct.Pin = USB_FS_ID_Pin;
 8001212:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001216:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001218:	2302      	movs	r3, #2
 800121a:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800121c:	2300      	movs	r3, #0
 800121e:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001220:	2300      	movs	r3, #0
 8001222:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG1_HS;
 8001224:	230a      	movs	r3, #10
 8001226:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(USB_FS_ID_GPIO_Port, &GPIO_InitStruct);
 8001228:	f107 031c 	add.w	r3, r7, #28
 800122c:	4619      	mov	r1, r3
 800122e:	4811      	ldr	r0, [pc, #68]	; (8001274 <MX_GPIO_Init+0x22c>)
 8001230:	f001 fc7a 	bl	8002b28 <HAL_GPIO_Init>

  /*Configure GPIO pin : LED_YELLOW_Pin */
  GPIO_InitStruct.Pin = LED_YELLOW_Pin;
 8001234:	2302      	movs	r3, #2
 8001236:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001238:	2301      	movs	r3, #1
 800123a:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800123c:	2300      	movs	r3, #0
 800123e:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001240:	2300      	movs	r3, #0
 8001242:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(LED_YELLOW_GPIO_Port, &GPIO_InitStruct);
 8001244:	f107 031c 	add.w	r3, r7, #28
 8001248:	4619      	mov	r1, r3
 800124a:	4808      	ldr	r0, [pc, #32]	; (800126c <MX_GPIO_Init+0x224>)
 800124c:	f001 fc6c 	bl	8002b28 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8001250:	bf00      	nop
 8001252:	3730      	adds	r7, #48	; 0x30
 8001254:	46bd      	mov	sp, r7
 8001256:	bd80      	pop	{r7, pc}
 8001258:	58024400 	.word	0x58024400
 800125c:	58021400 	.word	0x58021400
 8001260:	58020800 	.word	0x58020800
 8001264:	58020400 	.word	0x58020400
 8001268:	58020c00 	.word	0x58020c00
 800126c:	58021000 	.word	0x58021000
 8001270:	58021800 	.word	0x58021800
 8001274:	58020000 	.word	0x58020000

08001278 <print_network_information>:

/* USER CODE BEGIN 4 */
void print_network_information(void)
{
 8001278:	b5b0      	push	{r4, r5, r7, lr}
 800127a:	b084      	sub	sp, #16
 800127c:	af04      	add	r7, sp, #16
	wizchip_getnetinfo(&gWIZNETINFO);
 800127e:	483f      	ldr	r0, [pc, #252]	; (800137c <print_network_information+0x104>)
 8001280:	f008 ffdc 	bl	800a23c <wizchip_getnetinfo>

	printf("Mac address: %02x:%02x:%02x:%02x:%02x:%02x\n\r",gWIZNETINFO.mac[0],gWIZNETINFO.mac[1],gWIZNETINFO.mac[2],gWIZNETINFO.mac[3],gWIZNETINFO.mac[4],gWIZNETINFO.mac[5]);
 8001284:	4b3d      	ldr	r3, [pc, #244]	; (800137c <print_network_information+0x104>)
 8001286:	781b      	ldrb	r3, [r3, #0]
 8001288:	4618      	mov	r0, r3
 800128a:	4b3c      	ldr	r3, [pc, #240]	; (800137c <print_network_information+0x104>)
 800128c:	785b      	ldrb	r3, [r3, #1]
 800128e:	461c      	mov	r4, r3
 8001290:	4b3a      	ldr	r3, [pc, #232]	; (800137c <print_network_information+0x104>)
 8001292:	789b      	ldrb	r3, [r3, #2]
 8001294:	461d      	mov	r5, r3
 8001296:	4b39      	ldr	r3, [pc, #228]	; (800137c <print_network_information+0x104>)
 8001298:	78db      	ldrb	r3, [r3, #3]
 800129a:	461a      	mov	r2, r3
 800129c:	4b37      	ldr	r3, [pc, #220]	; (800137c <print_network_information+0x104>)
 800129e:	791b      	ldrb	r3, [r3, #4]
 80012a0:	4619      	mov	r1, r3
 80012a2:	4b36      	ldr	r3, [pc, #216]	; (800137c <print_network_information+0x104>)
 80012a4:	795b      	ldrb	r3, [r3, #5]
 80012a6:	9302      	str	r3, [sp, #8]
 80012a8:	9101      	str	r1, [sp, #4]
 80012aa:	9200      	str	r2, [sp, #0]
 80012ac:	462b      	mov	r3, r5
 80012ae:	4622      	mov	r2, r4
 80012b0:	4601      	mov	r1, r0
 80012b2:	4833      	ldr	r0, [pc, #204]	; (8001380 <print_network_information+0x108>)
 80012b4:	f009 f9d2 	bl	800a65c <iprintf>
	printf("IP address : %d.%d.%d.%d\n\r",gWIZNETINFO.ip[0],gWIZNETINFO.ip[1],gWIZNETINFO.ip[2],gWIZNETINFO.ip[3]);
 80012b8:	4b30      	ldr	r3, [pc, #192]	; (800137c <print_network_information+0x104>)
 80012ba:	799b      	ldrb	r3, [r3, #6]
 80012bc:	4619      	mov	r1, r3
 80012be:	4b2f      	ldr	r3, [pc, #188]	; (800137c <print_network_information+0x104>)
 80012c0:	79db      	ldrb	r3, [r3, #7]
 80012c2:	461a      	mov	r2, r3
 80012c4:	4b2d      	ldr	r3, [pc, #180]	; (800137c <print_network_information+0x104>)
 80012c6:	7a1b      	ldrb	r3, [r3, #8]
 80012c8:	4618      	mov	r0, r3
 80012ca:	4b2c      	ldr	r3, [pc, #176]	; (800137c <print_network_information+0x104>)
 80012cc:	7a5b      	ldrb	r3, [r3, #9]
 80012ce:	9300      	str	r3, [sp, #0]
 80012d0:	4603      	mov	r3, r0
 80012d2:	482c      	ldr	r0, [pc, #176]	; (8001384 <print_network_information+0x10c>)
 80012d4:	f009 f9c2 	bl	800a65c <iprintf>
	printf("SM Mask    : %d.%d.%d.%d\n\r",gWIZNETINFO.sn[0],gWIZNETINFO.sn[1],gWIZNETINFO.sn[2],gWIZNETINFO.sn[3]);
 80012d8:	4b28      	ldr	r3, [pc, #160]	; (800137c <print_network_information+0x104>)
 80012da:	7a9b      	ldrb	r3, [r3, #10]
 80012dc:	4619      	mov	r1, r3
 80012de:	4b27      	ldr	r3, [pc, #156]	; (800137c <print_network_information+0x104>)
 80012e0:	7adb      	ldrb	r3, [r3, #11]
 80012e2:	461a      	mov	r2, r3
 80012e4:	4b25      	ldr	r3, [pc, #148]	; (800137c <print_network_information+0x104>)
 80012e6:	7b1b      	ldrb	r3, [r3, #12]
 80012e8:	4618      	mov	r0, r3
 80012ea:	4b24      	ldr	r3, [pc, #144]	; (800137c <print_network_information+0x104>)
 80012ec:	7b5b      	ldrb	r3, [r3, #13]
 80012ee:	9300      	str	r3, [sp, #0]
 80012f0:	4603      	mov	r3, r0
 80012f2:	4825      	ldr	r0, [pc, #148]	; (8001388 <print_network_information+0x110>)
 80012f4:	f009 f9b2 	bl	800a65c <iprintf>
	printf("Gate way   : %d.%d.%d.%d\n\r",gWIZNETINFO.gw[0],gWIZNETINFO.gw[1],gWIZNETINFO.gw[2],gWIZNETINFO.gw[3]);
 80012f8:	4b20      	ldr	r3, [pc, #128]	; (800137c <print_network_information+0x104>)
 80012fa:	7b9b      	ldrb	r3, [r3, #14]
 80012fc:	4619      	mov	r1, r3
 80012fe:	4b1f      	ldr	r3, [pc, #124]	; (800137c <print_network_information+0x104>)
 8001300:	7bdb      	ldrb	r3, [r3, #15]
 8001302:	461a      	mov	r2, r3
 8001304:	4b1d      	ldr	r3, [pc, #116]	; (800137c <print_network_information+0x104>)
 8001306:	7c1b      	ldrb	r3, [r3, #16]
 8001308:	4618      	mov	r0, r3
 800130a:	4b1c      	ldr	r3, [pc, #112]	; (800137c <print_network_information+0x104>)
 800130c:	7c5b      	ldrb	r3, [r3, #17]
 800130e:	9300      	str	r3, [sp, #0]
 8001310:	4603      	mov	r3, r0
 8001312:	481e      	ldr	r0, [pc, #120]	; (800138c <print_network_information+0x114>)
 8001314:	f009 f9a2 	bl	800a65c <iprintf>
	printf("DNS Server : %d.%d.%d.%d\n\r",gWIZNETINFO.dns[0],gWIZNETINFO.dns[1],gWIZNETINFO.dns[2],gWIZNETINFO.dns[3]);
 8001318:	4b18      	ldr	r3, [pc, #96]	; (800137c <print_network_information+0x104>)
 800131a:	f893 3052 	ldrb.w	r3, [r3, #82]	; 0x52
 800131e:	4619      	mov	r1, r3
 8001320:	4b16      	ldr	r3, [pc, #88]	; (800137c <print_network_information+0x104>)
 8001322:	f893 3053 	ldrb.w	r3, [r3, #83]	; 0x53
 8001326:	461a      	mov	r2, r3
 8001328:	4b14      	ldr	r3, [pc, #80]	; (800137c <print_network_information+0x104>)
 800132a:	f893 3054 	ldrb.w	r3, [r3, #84]	; 0x54
 800132e:	4618      	mov	r0, r3
 8001330:	4b12      	ldr	r3, [pc, #72]	; (800137c <print_network_information+0x104>)
 8001332:	f893 3055 	ldrb.w	r3, [r3, #85]	; 0x55
 8001336:	9300      	str	r3, [sp, #0]
 8001338:	4603      	mov	r3, r0
 800133a:	4815      	ldr	r0, [pc, #84]	; (8001390 <print_network_information+0x118>)
 800133c:	f009 f98e 	bl	800a65c <iprintf>


	print_ipv6_addr("GW6 ", gWIZNETINFO.gw6);
 8001340:	4914      	ldr	r1, [pc, #80]	; (8001394 <print_network_information+0x11c>)
 8001342:	4815      	ldr	r0, [pc, #84]	; (8001398 <print_network_information+0x120>)
 8001344:	f000 f83a 	bl	80013bc <print_ipv6_addr>
	print_ipv6_addr("LLA ", gWIZNETINFO.lla);
 8001348:	4914      	ldr	r1, [pc, #80]	; (800139c <print_network_information+0x124>)
 800134a:	4815      	ldr	r0, [pc, #84]	; (80013a0 <print_network_information+0x128>)
 800134c:	f000 f836 	bl	80013bc <print_ipv6_addr>
	print_ipv6_addr("GUA ", gWIZNETINFO.gua);
 8001350:	4914      	ldr	r1, [pc, #80]	; (80013a4 <print_network_information+0x12c>)
 8001352:	4815      	ldr	r0, [pc, #84]	; (80013a8 <print_network_information+0x130>)
 8001354:	f000 f832 	bl	80013bc <print_ipv6_addr>
	print_ipv6_addr("SUB6", gWIZNETINFO.sn6);
 8001358:	4914      	ldr	r1, [pc, #80]	; (80013ac <print_network_information+0x134>)
 800135a:	4815      	ldr	r0, [pc, #84]	; (80013b0 <print_network_information+0x138>)
 800135c:	f000 f82e 	bl	80013bc <print_ipv6_addr>


	printf("\r\nNETCFGLOCK : %x\r\n", getNETLCKR());
 8001360:	4814      	ldr	r0, [pc, #80]	; (80013b4 <print_network_information+0x13c>)
 8001362:	f006 ff79 	bl	8008258 <WIZCHIP_READ>
 8001366:	4603      	mov	r3, r0
 8001368:	119b      	asrs	r3, r3, #6
 800136a:	f003 0301 	and.w	r3, r3, #1
 800136e:	4619      	mov	r1, r3
 8001370:	4811      	ldr	r0, [pc, #68]	; (80013b8 <print_network_information+0x140>)
 8001372:	f009 f973 	bl	800a65c <iprintf>
}
 8001376:	bf00      	nop
 8001378:	46bd      	mov	sp, r7
 800137a:	bdb0      	pop	{r4, r5, r7, pc}
 800137c:	20000000 	.word	0x20000000
 8001380:	0800b520 	.word	0x0800b520
 8001384:	0800b550 	.word	0x0800b550
 8001388:	0800b56c 	.word	0x0800b56c
 800138c:	0800b588 	.word	0x0800b588
 8001390:	0800b5a4 	.word	0x0800b5a4
 8001394:	20000042 	.word	0x20000042
 8001398:	0800b5c0 	.word	0x0800b5c0
 800139c:	20000012 	.word	0x20000012
 80013a0:	0800b5c8 	.word	0x0800b5c8
 80013a4:	20000022 	.word	0x20000022
 80013a8:	0800b5d0 	.word	0x0800b5d0
 80013ac:	20000032 	.word	0x20000032
 80013b0:	0800b5d8 	.word	0x0800b5d8
 80013b4:	60200000 	.word	0x60200000
 80013b8:	0800b5e0 	.word	0x0800b5e0

080013bc <print_ipv6_addr>:

void print_ipv6_addr(uint8_t* name, uint8_t* ip6addr)
{
 80013bc:	b580      	push	{r7, lr}
 80013be:	b082      	sub	sp, #8
 80013c0:	af00      	add	r7, sp, #0
 80013c2:	6078      	str	r0, [r7, #4]
 80013c4:	6039      	str	r1, [r7, #0]
	printf("%s : ", name);
 80013c6:	6879      	ldr	r1, [r7, #4]
 80013c8:	482c      	ldr	r0, [pc, #176]	; (800147c <print_ipv6_addr+0xc0>)
 80013ca:	f009 f947 	bl	800a65c <iprintf>
	printf("%04X:%04X", ((uint16_t)ip6addr[0] << 8) | ((uint16_t)ip6addr[1]), ((uint16_t)ip6addr[2] << 8) | ((uint16_t)ip6addr[3]));
 80013ce:	683b      	ldr	r3, [r7, #0]
 80013d0:	781b      	ldrb	r3, [r3, #0]
 80013d2:	021b      	lsls	r3, r3, #8
 80013d4:	683a      	ldr	r2, [r7, #0]
 80013d6:	3201      	adds	r2, #1
 80013d8:	7812      	ldrb	r2, [r2, #0]
 80013da:	ea43 0102 	orr.w	r1, r3, r2
 80013de:	683b      	ldr	r3, [r7, #0]
 80013e0:	3302      	adds	r3, #2
 80013e2:	781b      	ldrb	r3, [r3, #0]
 80013e4:	021b      	lsls	r3, r3, #8
 80013e6:	683a      	ldr	r2, [r7, #0]
 80013e8:	3203      	adds	r2, #3
 80013ea:	7812      	ldrb	r2, [r2, #0]
 80013ec:	4313      	orrs	r3, r2
 80013ee:	461a      	mov	r2, r3
 80013f0:	4823      	ldr	r0, [pc, #140]	; (8001480 <print_ipv6_addr+0xc4>)
 80013f2:	f009 f933 	bl	800a65c <iprintf>
	printf(":%04X:%04X", ((uint16_t)ip6addr[4] << 8) | ((uint16_t)ip6addr[5]), ((uint16_t)ip6addr[6] << 8) | ((uint16_t)ip6addr[7]));
 80013f6:	683b      	ldr	r3, [r7, #0]
 80013f8:	3304      	adds	r3, #4
 80013fa:	781b      	ldrb	r3, [r3, #0]
 80013fc:	021b      	lsls	r3, r3, #8
 80013fe:	683a      	ldr	r2, [r7, #0]
 8001400:	3205      	adds	r2, #5
 8001402:	7812      	ldrb	r2, [r2, #0]
 8001404:	ea43 0102 	orr.w	r1, r3, r2
 8001408:	683b      	ldr	r3, [r7, #0]
 800140a:	3306      	adds	r3, #6
 800140c:	781b      	ldrb	r3, [r3, #0]
 800140e:	021b      	lsls	r3, r3, #8
 8001410:	683a      	ldr	r2, [r7, #0]
 8001412:	3207      	adds	r2, #7
 8001414:	7812      	ldrb	r2, [r2, #0]
 8001416:	4313      	orrs	r3, r2
 8001418:	461a      	mov	r2, r3
 800141a:	481a      	ldr	r0, [pc, #104]	; (8001484 <print_ipv6_addr+0xc8>)
 800141c:	f009 f91e 	bl	800a65c <iprintf>
	printf(":%04X:%04X", ((uint16_t)ip6addr[8] << 8) | ((uint16_t)ip6addr[9]), ((uint16_t)ip6addr[10] << 8) | ((uint16_t)ip6addr[11]));
 8001420:	683b      	ldr	r3, [r7, #0]
 8001422:	3308      	adds	r3, #8
 8001424:	781b      	ldrb	r3, [r3, #0]
 8001426:	021b      	lsls	r3, r3, #8
 8001428:	683a      	ldr	r2, [r7, #0]
 800142a:	3209      	adds	r2, #9
 800142c:	7812      	ldrb	r2, [r2, #0]
 800142e:	ea43 0102 	orr.w	r1, r3, r2
 8001432:	683b      	ldr	r3, [r7, #0]
 8001434:	330a      	adds	r3, #10
 8001436:	781b      	ldrb	r3, [r3, #0]
 8001438:	021b      	lsls	r3, r3, #8
 800143a:	683a      	ldr	r2, [r7, #0]
 800143c:	320b      	adds	r2, #11
 800143e:	7812      	ldrb	r2, [r2, #0]
 8001440:	4313      	orrs	r3, r2
 8001442:	461a      	mov	r2, r3
 8001444:	480f      	ldr	r0, [pc, #60]	; (8001484 <print_ipv6_addr+0xc8>)
 8001446:	f009 f909 	bl	800a65c <iprintf>
	printf(":%04X:%04X\r\n", ((uint16_t)ip6addr[12] << 8) | ((uint16_t)ip6addr[13]), ((uint16_t)ip6addr[14] << 8) | ((uint16_t)ip6addr[15]));
 800144a:	683b      	ldr	r3, [r7, #0]
 800144c:	330c      	adds	r3, #12
 800144e:	781b      	ldrb	r3, [r3, #0]
 8001450:	021b      	lsls	r3, r3, #8
 8001452:	683a      	ldr	r2, [r7, #0]
 8001454:	320d      	adds	r2, #13
 8001456:	7812      	ldrb	r2, [r2, #0]
 8001458:	ea43 0102 	orr.w	r1, r3, r2
 800145c:	683b      	ldr	r3, [r7, #0]
 800145e:	330e      	adds	r3, #14
 8001460:	781b      	ldrb	r3, [r3, #0]
 8001462:	021b      	lsls	r3, r3, #8
 8001464:	683a      	ldr	r2, [r7, #0]
 8001466:	320f      	adds	r2, #15
 8001468:	7812      	ldrb	r2, [r2, #0]
 800146a:	4313      	orrs	r3, r2
 800146c:	461a      	mov	r2, r3
 800146e:	4806      	ldr	r0, [pc, #24]	; (8001488 <print_ipv6_addr+0xcc>)
 8001470:	f009 f8f4 	bl	800a65c <iprintf>
}
 8001474:	bf00      	nop
 8001476:	3708      	adds	r7, #8
 8001478:	46bd      	mov	sp, r7
 800147a:	bd80      	pop	{r7, pc}
 800147c:	0800b5f4 	.word	0x0800b5f4
 8001480:	0800b5fc 	.word	0x0800b5fc
 8001484:	0800b608 	.word	0x0800b608
 8001488:	0800b614 	.word	0x0800b614

0800148c <MPU_Config>:
/* USER CODE END 4 */

/* MPU Configuration */

void MPU_Config(void)
{
 800148c:	b580      	push	{r7, lr}
 800148e:	b084      	sub	sp, #16
 8001490:	af00      	add	r7, sp, #0
  MPU_Region_InitTypeDef MPU_InitStruct = {0};
 8001492:	463b      	mov	r3, r7
 8001494:	2200      	movs	r2, #0
 8001496:	601a      	str	r2, [r3, #0]
 8001498:	605a      	str	r2, [r3, #4]
 800149a:	609a      	str	r2, [r3, #8]
 800149c:	60da      	str	r2, [r3, #12]

  /* Disables the MPU */
  HAL_MPU_Disable();
 800149e:	f000 fc51 	bl	8001d44 <HAL_MPU_Disable>

  /** Initializes and configures the Region and the memory to be protected
  */
  MPU_InitStruct.Enable = MPU_REGION_ENABLE;
 80014a2:	2301      	movs	r3, #1
 80014a4:	703b      	strb	r3, [r7, #0]
  MPU_InitStruct.Number = MPU_REGION_NUMBER0;
 80014a6:	2300      	movs	r3, #0
 80014a8:	707b      	strb	r3, [r7, #1]
  MPU_InitStruct.BaseAddress = 0x60000000;
 80014aa:	f04f 43c0 	mov.w	r3, #1610612736	; 0x60000000
 80014ae:	607b      	str	r3, [r7, #4]
  MPU_InitStruct.Size = MPU_REGION_SIZE_64KB;
 80014b0:	230f      	movs	r3, #15
 80014b2:	723b      	strb	r3, [r7, #8]
  MPU_InitStruct.SubRegionDisable = 0x0;
 80014b4:	2300      	movs	r3, #0
 80014b6:	727b      	strb	r3, [r7, #9]
  MPU_InitStruct.TypeExtField = MPU_TEX_LEVEL0;
 80014b8:	2300      	movs	r3, #0
 80014ba:	72bb      	strb	r3, [r7, #10]
  MPU_InitStruct.AccessPermission = MPU_REGION_FULL_ACCESS;
 80014bc:	2303      	movs	r3, #3
 80014be:	72fb      	strb	r3, [r7, #11]
  MPU_InitStruct.DisableExec = MPU_INSTRUCTION_ACCESS_DISABLE;
 80014c0:	2301      	movs	r3, #1
 80014c2:	733b      	strb	r3, [r7, #12]
  MPU_InitStruct.IsShareable = MPU_ACCESS_NOT_SHAREABLE;
 80014c4:	2300      	movs	r3, #0
 80014c6:	737b      	strb	r3, [r7, #13]
  MPU_InitStruct.IsCacheable = MPU_ACCESS_NOT_CACHEABLE;
 80014c8:	2300      	movs	r3, #0
 80014ca:	73bb      	strb	r3, [r7, #14]
  MPU_InitStruct.IsBufferable = MPU_ACCESS_NOT_BUFFERABLE;
 80014cc:	2300      	movs	r3, #0
 80014ce:	73fb      	strb	r3, [r7, #15]

  HAL_MPU_ConfigRegion(&MPU_InitStruct);
 80014d0:	463b      	mov	r3, r7
 80014d2:	4618      	mov	r0, r3
 80014d4:	f000 fc6e 	bl	8001db4 <HAL_MPU_ConfigRegion>
  /* Enables the MPU */
  HAL_MPU_Enable(MPU_HFNMI_PRIVDEF);
 80014d8:	2006      	movs	r0, #6
 80014da:	f000 fc4b 	bl	8001d74 <HAL_MPU_Enable>

}
 80014de:	bf00      	nop
 80014e0:	3710      	adds	r7, #16
 80014e2:	46bd      	mov	sp, r7
 80014e4:	bd80      	pop	{r7, pc}

080014e6 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80014e6:	b480      	push	{r7}
 80014e8:	af00      	add	r7, sp, #0
  __ASM volatile ("cpsid i" : : : "memory");
 80014ea:	b672      	cpsid	i
}
 80014ec:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80014ee:	e7fe      	b.n	80014ee <Error_Handler+0x8>

080014f0 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80014f0:	b480      	push	{r7}
 80014f2:	b083      	sub	sp, #12
 80014f4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80014f6:	4b0a      	ldr	r3, [pc, #40]	; (8001520 <HAL_MspInit+0x30>)
 80014f8:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 80014fc:	4a08      	ldr	r2, [pc, #32]	; (8001520 <HAL_MspInit+0x30>)
 80014fe:	f043 0302 	orr.w	r3, r3, #2
 8001502:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 8001506:	4b06      	ldr	r3, [pc, #24]	; (8001520 <HAL_MspInit+0x30>)
 8001508:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 800150c:	f003 0302 	and.w	r3, r3, #2
 8001510:	607b      	str	r3, [r7, #4]
 8001512:	687b      	ldr	r3, [r7, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001514:	bf00      	nop
 8001516:	370c      	adds	r7, #12
 8001518:	46bd      	mov	sp, r7
 800151a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800151e:	4770      	bx	lr
 8001520:	58024400 	.word	0x58024400

08001524 <HAL_DMA2D_MspInit>:
* This function configures the hardware resources used in this example
* @param hdma2d: DMA2D handle pointer
* @retval None
*/
void HAL_DMA2D_MspInit(DMA2D_HandleTypeDef* hdma2d)
{
 8001524:	b480      	push	{r7}
 8001526:	b085      	sub	sp, #20
 8001528:	af00      	add	r7, sp, #0
 800152a:	6078      	str	r0, [r7, #4]
  if(hdma2d->Instance==DMA2D)
 800152c:	687b      	ldr	r3, [r7, #4]
 800152e:	681b      	ldr	r3, [r3, #0]
 8001530:	4a0b      	ldr	r2, [pc, #44]	; (8001560 <HAL_DMA2D_MspInit+0x3c>)
 8001532:	4293      	cmp	r3, r2
 8001534:	d10e      	bne.n	8001554 <HAL_DMA2D_MspInit+0x30>
  {
  /* USER CODE BEGIN DMA2D_MspInit 0 */

  /* USER CODE END DMA2D_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_DMA2D_CLK_ENABLE();
 8001536:	4b0b      	ldr	r3, [pc, #44]	; (8001564 <HAL_DMA2D_MspInit+0x40>)
 8001538:	f8d3 30d4 	ldr.w	r3, [r3, #212]	; 0xd4
 800153c:	4a09      	ldr	r2, [pc, #36]	; (8001564 <HAL_DMA2D_MspInit+0x40>)
 800153e:	f043 0310 	orr.w	r3, r3, #16
 8001542:	f8c2 30d4 	str.w	r3, [r2, #212]	; 0xd4
 8001546:	4b07      	ldr	r3, [pc, #28]	; (8001564 <HAL_DMA2D_MspInit+0x40>)
 8001548:	f8d3 30d4 	ldr.w	r3, [r3, #212]	; 0xd4
 800154c:	f003 0310 	and.w	r3, r3, #16
 8001550:	60fb      	str	r3, [r7, #12]
 8001552:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN DMA2D_MspInit 1 */

  /* USER CODE END DMA2D_MspInit 1 */
  }

}
 8001554:	bf00      	nop
 8001556:	3714      	adds	r7, #20
 8001558:	46bd      	mov	sp, r7
 800155a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800155e:	4770      	bx	lr
 8001560:	52001000 	.word	0x52001000
 8001564:	58024400 	.word	0x58024400

08001568 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001568:	b580      	push	{r7, lr}
 800156a:	b08a      	sub	sp, #40	; 0x28
 800156c:	af00      	add	r7, sp, #0
 800156e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001570:	f107 0314 	add.w	r3, r7, #20
 8001574:	2200      	movs	r2, #0
 8001576:	601a      	str	r2, [r3, #0]
 8001578:	605a      	str	r2, [r3, #4]
 800157a:	609a      	str	r2, [r3, #8]
 800157c:	60da      	str	r2, [r3, #12]
 800157e:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART3)
 8001580:	687b      	ldr	r3, [r7, #4]
 8001582:	681b      	ldr	r3, [r3, #0]
 8001584:	4a1e      	ldr	r2, [pc, #120]	; (8001600 <HAL_UART_MspInit+0x98>)
 8001586:	4293      	cmp	r3, r2
 8001588:	d136      	bne.n	80015f8 <HAL_UART_MspInit+0x90>
  {
  /* USER CODE BEGIN USART3_MspInit 0 */

  /* USER CODE END USART3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 800158a:	4b1e      	ldr	r3, [pc, #120]	; (8001604 <HAL_UART_MspInit+0x9c>)
 800158c:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8001590:	4a1c      	ldr	r2, [pc, #112]	; (8001604 <HAL_UART_MspInit+0x9c>)
 8001592:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001596:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 800159a:	4b1a      	ldr	r3, [pc, #104]	; (8001604 <HAL_UART_MspInit+0x9c>)
 800159c:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 80015a0:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80015a4:	613b      	str	r3, [r7, #16]
 80015a6:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 80015a8:	4b16      	ldr	r3, [pc, #88]	; (8001604 <HAL_UART_MspInit+0x9c>)
 80015aa:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80015ae:	4a15      	ldr	r2, [pc, #84]	; (8001604 <HAL_UART_MspInit+0x9c>)
 80015b0:	f043 0308 	orr.w	r3, r3, #8
 80015b4:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80015b8:	4b12      	ldr	r3, [pc, #72]	; (8001604 <HAL_UART_MspInit+0x9c>)
 80015ba:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80015be:	f003 0308 	and.w	r3, r3, #8
 80015c2:	60fb      	str	r3, [r7, #12]
 80015c4:	68fb      	ldr	r3, [r7, #12]
    /**USART3 GPIO Configuration
    PD8     ------> USART3_TX
    PD9     ------> USART3_RX
    */
    GPIO_InitStruct.Pin = STLK_VCP_RX_Pin|STLK_VCP_TX_Pin;
 80015c6:	f44f 7340 	mov.w	r3, #768	; 0x300
 80015ca:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80015cc:	2302      	movs	r3, #2
 80015ce:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80015d0:	2300      	movs	r3, #0
 80015d2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80015d4:	2300      	movs	r3, #0
 80015d6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 80015d8:	2307      	movs	r3, #7
 80015da:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80015dc:	f107 0314 	add.w	r3, r7, #20
 80015e0:	4619      	mov	r1, r3
 80015e2:	4809      	ldr	r0, [pc, #36]	; (8001608 <HAL_UART_MspInit+0xa0>)
 80015e4:	f001 faa0 	bl	8002b28 <HAL_GPIO_Init>

    /* USART3 interrupt Init */
    HAL_NVIC_SetPriority(USART3_IRQn, 0, 0);
 80015e8:	2200      	movs	r2, #0
 80015ea:	2100      	movs	r1, #0
 80015ec:	2027      	movs	r0, #39	; 0x27
 80015ee:	f000 fb74 	bl	8001cda <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART3_IRQn);
 80015f2:	2027      	movs	r0, #39	; 0x27
 80015f4:	f000 fb8b 	bl	8001d0e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 80015f8:	bf00      	nop
 80015fa:	3728      	adds	r7, #40	; 0x28
 80015fc:	46bd      	mov	sp, r7
 80015fe:	bd80      	pop	{r7, pc}
 8001600:	40004800 	.word	0x40004800
 8001604:	58024400 	.word	0x58024400
 8001608:	58020c00 	.word	0x58020c00

0800160c <HAL_FMC_MspInit>:

}

static uint32_t FMC_Initialized = 0;

static void HAL_FMC_MspInit(void){
 800160c:	b580      	push	{r7, lr}
 800160e:	b086      	sub	sp, #24
 8001610:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN FMC_MspInit 0 */

  /* USER CODE END FMC_MspInit 0 */
  GPIO_InitTypeDef GPIO_InitStruct ={0};
 8001612:	1d3b      	adds	r3, r7, #4
 8001614:	2200      	movs	r2, #0
 8001616:	601a      	str	r2, [r3, #0]
 8001618:	605a      	str	r2, [r3, #4]
 800161a:	609a      	str	r2, [r3, #8]
 800161c:	60da      	str	r2, [r3, #12]
 800161e:	611a      	str	r2, [r3, #16]
  if (FMC_Initialized) {
 8001620:	4b24      	ldr	r3, [pc, #144]	; (80016b4 <HAL_FMC_MspInit+0xa8>)
 8001622:	681b      	ldr	r3, [r3, #0]
 8001624:	2b00      	cmp	r3, #0
 8001626:	d141      	bne.n	80016ac <HAL_FMC_MspInit+0xa0>
    return;
  }
  FMC_Initialized = 1;
 8001628:	4b22      	ldr	r3, [pc, #136]	; (80016b4 <HAL_FMC_MspInit+0xa8>)
 800162a:	2201      	movs	r2, #1
 800162c:	601a      	str	r2, [r3, #0]

  /* Peripheral clock enable */
  __HAL_RCC_FMC_CLK_ENABLE();
 800162e:	4b22      	ldr	r3, [pc, #136]	; (80016b8 <HAL_FMC_MspInit+0xac>)
 8001630:	f8d3 30d4 	ldr.w	r3, [r3, #212]	; 0xd4
 8001634:	4a20      	ldr	r2, [pc, #128]	; (80016b8 <HAL_FMC_MspInit+0xac>)
 8001636:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 800163a:	f8c2 30d4 	str.w	r3, [r2, #212]	; 0xd4
 800163e:	4b1e      	ldr	r3, [pc, #120]	; (80016b8 <HAL_FMC_MspInit+0xac>)
 8001640:	f8d3 30d4 	ldr.w	r3, [r3, #212]	; 0xd4
 8001644:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001648:	603b      	str	r3, [r7, #0]
 800164a:	683b      	ldr	r3, [r7, #0]
  PD1   ------> FMC_D3
  PD4   ------> FMC_NOE
  PD5   ------> FMC_NWE
  PD7   ------> FMC_NE1
  */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 800164c:	2303      	movs	r3, #3
 800164e:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001650:	2302      	movs	r3, #2
 8001652:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001654:	2300      	movs	r3, #0
 8001656:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001658:	2303      	movs	r3, #3
 800165a:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 800165c:	230c      	movs	r3, #12
 800165e:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8001660:	1d3b      	adds	r3, r7, #4
 8001662:	4619      	mov	r1, r3
 8001664:	4815      	ldr	r0, [pc, #84]	; (80016bc <HAL_FMC_MspInit+0xb0>)
 8001666:	f001 fa5f 	bl	8002b28 <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = GPIO_PIN_7|GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10;
 800166a:	f44f 63f0 	mov.w	r3, #1920	; 0x780
 800166e:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001670:	2302      	movs	r3, #2
 8001672:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001674:	2300      	movs	r3, #0
 8001676:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001678:	2303      	movs	r3, #3
 800167a:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 800167c:	230c      	movs	r3, #12
 800167e:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8001680:	1d3b      	adds	r3, r7, #4
 8001682:	4619      	mov	r1, r3
 8001684:	480e      	ldr	r0, [pc, #56]	; (80016c0 <HAL_FMC_MspInit+0xb4>)
 8001686:	f001 fa4f 	bl	8002b28 <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = GPIO_PIN_14|GPIO_PIN_15|GPIO_PIN_0|GPIO_PIN_1
 800168a:	f24c 03b3 	movw	r3, #49331	; 0xc0b3
 800168e:	607b      	str	r3, [r7, #4]
                          |GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_7;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001690:	2302      	movs	r3, #2
 8001692:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001694:	2300      	movs	r3, #0
 8001696:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001698:	2303      	movs	r3, #3
 800169a:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 800169c:	230c      	movs	r3, #12
 800169e:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80016a0:	1d3b      	adds	r3, r7, #4
 80016a2:	4619      	mov	r1, r3
 80016a4:	4807      	ldr	r0, [pc, #28]	; (80016c4 <HAL_FMC_MspInit+0xb8>)
 80016a6:	f001 fa3f 	bl	8002b28 <HAL_GPIO_Init>
 80016aa:	e000      	b.n	80016ae <HAL_FMC_MspInit+0xa2>
    return;
 80016ac:	bf00      	nop

  /* USER CODE BEGIN FMC_MspInit 1 */

  /* USER CODE END FMC_MspInit 1 */
}
 80016ae:	3718      	adds	r7, #24
 80016b0:	46bd      	mov	sp, r7
 80016b2:	bd80      	pop	{r7, pc}
 80016b4:	20000678 	.word	0x20000678
 80016b8:	58024400 	.word	0x58024400
 80016bc:	58021400 	.word	0x58021400
 80016c0:	58021000 	.word	0x58021000
 80016c4:	58020c00 	.word	0x58020c00

080016c8 <HAL_NOR_MspInit>:

void HAL_NOR_MspInit(NOR_HandleTypeDef* hnor){
 80016c8:	b580      	push	{r7, lr}
 80016ca:	b082      	sub	sp, #8
 80016cc:	af00      	add	r7, sp, #0
 80016ce:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN NOR_MspInit 0 */

  /* USER CODE END NOR_MspInit 0 */
  HAL_FMC_MspInit();
 80016d0:	f7ff ff9c 	bl	800160c <HAL_FMC_MspInit>
  /* USER CODE BEGIN NOR_MspInit 1 */

  /* USER CODE END NOR_MspInit 1 */
}
 80016d4:	bf00      	nop
 80016d6:	3708      	adds	r7, #8
 80016d8:	46bd      	mov	sp, r7
 80016da:	bd80      	pop	{r7, pc}

080016dc <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80016dc:	b480      	push	{r7}
 80016de:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80016e0:	e7fe      	b.n	80016e0 <NMI_Handler+0x4>

080016e2 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80016e2:	b480      	push	{r7}
 80016e4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80016e6:	e7fe      	b.n	80016e6 <HardFault_Handler+0x4>

080016e8 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80016e8:	b480      	push	{r7}
 80016ea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80016ec:	e7fe      	b.n	80016ec <MemManage_Handler+0x4>

080016ee <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80016ee:	b480      	push	{r7}
 80016f0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80016f2:	e7fe      	b.n	80016f2 <BusFault_Handler+0x4>

080016f4 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80016f4:	b480      	push	{r7}
 80016f6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80016f8:	e7fe      	b.n	80016f8 <UsageFault_Handler+0x4>

080016fa <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80016fa:	b480      	push	{r7}
 80016fc:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80016fe:	bf00      	nop
 8001700:	46bd      	mov	sp, r7
 8001702:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001706:	4770      	bx	lr

08001708 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001708:	b480      	push	{r7}
 800170a:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800170c:	bf00      	nop
 800170e:	46bd      	mov	sp, r7
 8001710:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001714:	4770      	bx	lr

08001716 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001716:	b480      	push	{r7}
 8001718:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800171a:	bf00      	nop
 800171c:	46bd      	mov	sp, r7
 800171e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001722:	4770      	bx	lr

08001724 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001724:	b580      	push	{r7, lr}
 8001726:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001728:	f000 f9ac 	bl	8001a84 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800172c:	bf00      	nop
 800172e:	bd80      	pop	{r7, pc}

08001730 <USART3_IRQHandler>:

/**
  * @brief This function handles USART3 global interrupt.
  */
void USART3_IRQHandler(void)
{
 8001730:	b580      	push	{r7, lr}
 8001732:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART3_IRQn 0 */

  /* USER CODE END USART3_IRQn 0 */
  HAL_UART_IRQHandler(&huart3);
 8001734:	4802      	ldr	r0, [pc, #8]	; (8001740 <USART3_IRQHandler+0x10>)
 8001736:	f004 fb47 	bl	8005dc8 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART3_IRQn 1 */

  /* USER CODE END USART3_IRQn 1 */
}
 800173a:	bf00      	nop
 800173c:	bd80      	pop	{r7, pc}
 800173e:	bf00      	nop
 8001740:	20000598 	.word	0x20000598

08001744 <_read>:
	_kill(status, -1);
	while (1) {}		/* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001744:	b580      	push	{r7, lr}
 8001746:	b086      	sub	sp, #24
 8001748:	af00      	add	r7, sp, #0
 800174a:	60f8      	str	r0, [r7, #12]
 800174c:	60b9      	str	r1, [r7, #8]
 800174e:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001750:	2300      	movs	r3, #0
 8001752:	617b      	str	r3, [r7, #20]
 8001754:	e00a      	b.n	800176c <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8001756:	f3af 8000 	nop.w
 800175a:	4601      	mov	r1, r0
 800175c:	68bb      	ldr	r3, [r7, #8]
 800175e:	1c5a      	adds	r2, r3, #1
 8001760:	60ba      	str	r2, [r7, #8]
 8001762:	b2ca      	uxtb	r2, r1
 8001764:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001766:	697b      	ldr	r3, [r7, #20]
 8001768:	3301      	adds	r3, #1
 800176a:	617b      	str	r3, [r7, #20]
 800176c:	697a      	ldr	r2, [r7, #20]
 800176e:	687b      	ldr	r3, [r7, #4]
 8001770:	429a      	cmp	r2, r3
 8001772:	dbf0      	blt.n	8001756 <_read+0x12>
	}

return len;
 8001774:	687b      	ldr	r3, [r7, #4]
}
 8001776:	4618      	mov	r0, r3
 8001778:	3718      	adds	r7, #24
 800177a:	46bd      	mov	sp, r7
 800177c:	bd80      	pop	{r7, pc}

0800177e <_close>:
	}
	return len;
}

int _close(int file)
{
 800177e:	b480      	push	{r7}
 8001780:	b083      	sub	sp, #12
 8001782:	af00      	add	r7, sp, #0
 8001784:	6078      	str	r0, [r7, #4]
	return -1;
 8001786:	f04f 33ff 	mov.w	r3, #4294967295
}
 800178a:	4618      	mov	r0, r3
 800178c:	370c      	adds	r7, #12
 800178e:	46bd      	mov	sp, r7
 8001790:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001794:	4770      	bx	lr

08001796 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8001796:	b480      	push	{r7}
 8001798:	b083      	sub	sp, #12
 800179a:	af00      	add	r7, sp, #0
 800179c:	6078      	str	r0, [r7, #4]
 800179e:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 80017a0:	683b      	ldr	r3, [r7, #0]
 80017a2:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80017a6:	605a      	str	r2, [r3, #4]
	return 0;
 80017a8:	2300      	movs	r3, #0
}
 80017aa:	4618      	mov	r0, r3
 80017ac:	370c      	adds	r7, #12
 80017ae:	46bd      	mov	sp, r7
 80017b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017b4:	4770      	bx	lr

080017b6 <_isatty>:

int _isatty(int file)
{
 80017b6:	b480      	push	{r7}
 80017b8:	b083      	sub	sp, #12
 80017ba:	af00      	add	r7, sp, #0
 80017bc:	6078      	str	r0, [r7, #4]
	return 1;
 80017be:	2301      	movs	r3, #1
}
 80017c0:	4618      	mov	r0, r3
 80017c2:	370c      	adds	r7, #12
 80017c4:	46bd      	mov	sp, r7
 80017c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017ca:	4770      	bx	lr

080017cc <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80017cc:	b480      	push	{r7}
 80017ce:	b085      	sub	sp, #20
 80017d0:	af00      	add	r7, sp, #0
 80017d2:	60f8      	str	r0, [r7, #12]
 80017d4:	60b9      	str	r1, [r7, #8]
 80017d6:	607a      	str	r2, [r7, #4]
	return 0;
 80017d8:	2300      	movs	r3, #0
}
 80017da:	4618      	mov	r0, r3
 80017dc:	3714      	adds	r7, #20
 80017de:	46bd      	mov	sp, r7
 80017e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017e4:	4770      	bx	lr
	...

080017e8 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80017e8:	b580      	push	{r7, lr}
 80017ea:	b086      	sub	sp, #24
 80017ec:	af00      	add	r7, sp, #0
 80017ee:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80017f0:	4a14      	ldr	r2, [pc, #80]	; (8001844 <_sbrk+0x5c>)
 80017f2:	4b15      	ldr	r3, [pc, #84]	; (8001848 <_sbrk+0x60>)
 80017f4:	1ad3      	subs	r3, r2, r3
 80017f6:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80017f8:	697b      	ldr	r3, [r7, #20]
 80017fa:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80017fc:	4b13      	ldr	r3, [pc, #76]	; (800184c <_sbrk+0x64>)
 80017fe:	681b      	ldr	r3, [r3, #0]
 8001800:	2b00      	cmp	r3, #0
 8001802:	d102      	bne.n	800180a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001804:	4b11      	ldr	r3, [pc, #68]	; (800184c <_sbrk+0x64>)
 8001806:	4a12      	ldr	r2, [pc, #72]	; (8001850 <_sbrk+0x68>)
 8001808:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800180a:	4b10      	ldr	r3, [pc, #64]	; (800184c <_sbrk+0x64>)
 800180c:	681a      	ldr	r2, [r3, #0]
 800180e:	687b      	ldr	r3, [r7, #4]
 8001810:	4413      	add	r3, r2
 8001812:	693a      	ldr	r2, [r7, #16]
 8001814:	429a      	cmp	r2, r3
 8001816:	d207      	bcs.n	8001828 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001818:	f009 f8b4 	bl	800a984 <__errno>
 800181c:	4603      	mov	r3, r0
 800181e:	220c      	movs	r2, #12
 8001820:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001822:	f04f 33ff 	mov.w	r3, #4294967295
 8001826:	e009      	b.n	800183c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001828:	4b08      	ldr	r3, [pc, #32]	; (800184c <_sbrk+0x64>)
 800182a:	681b      	ldr	r3, [r3, #0]
 800182c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800182e:	4b07      	ldr	r3, [pc, #28]	; (800184c <_sbrk+0x64>)
 8001830:	681a      	ldr	r2, [r3, #0]
 8001832:	687b      	ldr	r3, [r7, #4]
 8001834:	4413      	add	r3, r2
 8001836:	4a05      	ldr	r2, [pc, #20]	; (800184c <_sbrk+0x64>)
 8001838:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800183a:	68fb      	ldr	r3, [r7, #12]
}
 800183c:	4618      	mov	r0, r3
 800183e:	3718      	adds	r7, #24
 8001840:	46bd      	mov	sp, r7
 8001842:	bd80      	pop	{r7, pc}
 8001844:	20020000 	.word	0x20020000
 8001848:	00000400 	.word	0x00000400
 800184c:	2000067c 	.word	0x2000067c
 8001850:	20000810 	.word	0x20000810

08001854 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8001854:	b480      	push	{r7}
 8001856:	af00      	add	r7, sp, #0
 __IO uint32_t tmpreg;
#endif /* DATA_IN_D2_SRAM */

  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8001858:	4b34      	ldr	r3, [pc, #208]	; (800192c <SystemInit+0xd8>)
 800185a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800185e:	4a33      	ldr	r2, [pc, #204]	; (800192c <SystemInit+0xd8>)
 8001860:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001864:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/

   /* Increasing the CPU frequency */
  if(FLASH_LATENCY_DEFAULT  > (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 8001868:	4b31      	ldr	r3, [pc, #196]	; (8001930 <SystemInit+0xdc>)
 800186a:	681b      	ldr	r3, [r3, #0]
 800186c:	f003 030f 	and.w	r3, r3, #15
 8001870:	2b06      	cmp	r3, #6
 8001872:	d807      	bhi.n	8001884 <SystemInit+0x30>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
	MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 8001874:	4b2e      	ldr	r3, [pc, #184]	; (8001930 <SystemInit+0xdc>)
 8001876:	681b      	ldr	r3, [r3, #0]
 8001878:	f023 030f 	bic.w	r3, r3, #15
 800187c:	4a2c      	ldr	r2, [pc, #176]	; (8001930 <SystemInit+0xdc>)
 800187e:	f043 0307 	orr.w	r3, r3, #7
 8001882:	6013      	str	r3, [r2, #0]
  }

  /* Set HSION bit */
  RCC->CR |= RCC_CR_HSION;
 8001884:	4b2b      	ldr	r3, [pc, #172]	; (8001934 <SystemInit+0xe0>)
 8001886:	681b      	ldr	r3, [r3, #0]
 8001888:	4a2a      	ldr	r2, [pc, #168]	; (8001934 <SystemInit+0xe0>)
 800188a:	f043 0301 	orr.w	r3, r3, #1
 800188e:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 8001890:	4b28      	ldr	r3, [pc, #160]	; (8001934 <SystemInit+0xe0>)
 8001892:	2200      	movs	r2, #0
 8001894:	611a      	str	r2, [r3, #16]

  /* Reset HSEON, HSECSSON, CSION, HSI48ON, CSIKERON, PLL1ON, PLL2ON and PLL3ON bits */
  RCC->CR &= 0xEAF6ED7FU;
 8001896:	4b27      	ldr	r3, [pc, #156]	; (8001934 <SystemInit+0xe0>)
 8001898:	681a      	ldr	r2, [r3, #0]
 800189a:	4926      	ldr	r1, [pc, #152]	; (8001934 <SystemInit+0xe0>)
 800189c:	4b26      	ldr	r3, [pc, #152]	; (8001938 <SystemInit+0xe4>)
 800189e:	4013      	ands	r3, r2
 80018a0:	600b      	str	r3, [r1, #0]
  
   /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLASH_LATENCY_DEFAULT  < (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 80018a2:	4b23      	ldr	r3, [pc, #140]	; (8001930 <SystemInit+0xdc>)
 80018a4:	681b      	ldr	r3, [r3, #0]
 80018a6:	f003 0308 	and.w	r3, r3, #8
 80018aa:	2b00      	cmp	r3, #0
 80018ac:	d007      	beq.n	80018be <SystemInit+0x6a>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
	MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 80018ae:	4b20      	ldr	r3, [pc, #128]	; (8001930 <SystemInit+0xdc>)
 80018b0:	681b      	ldr	r3, [r3, #0]
 80018b2:	f023 030f 	bic.w	r3, r3, #15
 80018b6:	4a1e      	ldr	r2, [pc, #120]	; (8001930 <SystemInit+0xdc>)
 80018b8:	f043 0307 	orr.w	r3, r3, #7
 80018bc:	6013      	str	r3, [r2, #0]
  }

#if defined(D3_SRAM_BASE)
  /* Reset D1CFGR register */
  RCC->D1CFGR = 0x00000000;
 80018be:	4b1d      	ldr	r3, [pc, #116]	; (8001934 <SystemInit+0xe0>)
 80018c0:	2200      	movs	r2, #0
 80018c2:	619a      	str	r2, [r3, #24]

  /* Reset D2CFGR register */
  RCC->D2CFGR = 0x00000000;
 80018c4:	4b1b      	ldr	r3, [pc, #108]	; (8001934 <SystemInit+0xe0>)
 80018c6:	2200      	movs	r2, #0
 80018c8:	61da      	str	r2, [r3, #28]

  /* Reset D3CFGR register */
  RCC->D3CFGR = 0x00000000;
 80018ca:	4b1a      	ldr	r3, [pc, #104]	; (8001934 <SystemInit+0xe0>)
 80018cc:	2200      	movs	r2, #0
 80018ce:	621a      	str	r2, [r3, #32]

  /* Reset SRDCFGR register */
  RCC->SRDCFGR = 0x00000000;
#endif
  /* Reset PLLCKSELR register */
  RCC->PLLCKSELR = 0x02020200;
 80018d0:	4b18      	ldr	r3, [pc, #96]	; (8001934 <SystemInit+0xe0>)
 80018d2:	4a1a      	ldr	r2, [pc, #104]	; (800193c <SystemInit+0xe8>)
 80018d4:	629a      	str	r2, [r3, #40]	; 0x28

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x01FF0000;
 80018d6:	4b17      	ldr	r3, [pc, #92]	; (8001934 <SystemInit+0xe0>)
 80018d8:	4a19      	ldr	r2, [pc, #100]	; (8001940 <SystemInit+0xec>)
 80018da:	62da      	str	r2, [r3, #44]	; 0x2c
  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x01010280;
 80018dc:	4b15      	ldr	r3, [pc, #84]	; (8001934 <SystemInit+0xe0>)
 80018de:	4a19      	ldr	r2, [pc, #100]	; (8001944 <SystemInit+0xf0>)
 80018e0:	631a      	str	r2, [r3, #48]	; 0x30
  /* Reset PLL1FRACR register */
  RCC->PLL1FRACR = 0x00000000;
 80018e2:	4b14      	ldr	r3, [pc, #80]	; (8001934 <SystemInit+0xe0>)
 80018e4:	2200      	movs	r2, #0
 80018e6:	635a      	str	r2, [r3, #52]	; 0x34

  /* Reset PLL2DIVR register */
  RCC->PLL2DIVR = 0x01010280;
 80018e8:	4b12      	ldr	r3, [pc, #72]	; (8001934 <SystemInit+0xe0>)
 80018ea:	4a16      	ldr	r2, [pc, #88]	; (8001944 <SystemInit+0xf0>)
 80018ec:	639a      	str	r2, [r3, #56]	; 0x38

  /* Reset PLL2FRACR register */

  RCC->PLL2FRACR = 0x00000000;
 80018ee:	4b11      	ldr	r3, [pc, #68]	; (8001934 <SystemInit+0xe0>)
 80018f0:	2200      	movs	r2, #0
 80018f2:	63da      	str	r2, [r3, #60]	; 0x3c
  /* Reset PLL3DIVR register */
  RCC->PLL3DIVR = 0x01010280;
 80018f4:	4b0f      	ldr	r3, [pc, #60]	; (8001934 <SystemInit+0xe0>)
 80018f6:	4a13      	ldr	r2, [pc, #76]	; (8001944 <SystemInit+0xf0>)
 80018f8:	641a      	str	r2, [r3, #64]	; 0x40

  /* Reset PLL3FRACR register */
  RCC->PLL3FRACR = 0x00000000;
 80018fa:	4b0e      	ldr	r3, [pc, #56]	; (8001934 <SystemInit+0xe0>)
 80018fc:	2200      	movs	r2, #0
 80018fe:	645a      	str	r2, [r3, #68]	; 0x44

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8001900:	4b0c      	ldr	r3, [pc, #48]	; (8001934 <SystemInit+0xe0>)
 8001902:	681b      	ldr	r3, [r3, #0]
 8001904:	4a0b      	ldr	r2, [pc, #44]	; (8001934 <SystemInit+0xe0>)
 8001906:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800190a:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 800190c:	4b09      	ldr	r3, [pc, #36]	; (8001934 <SystemInit+0xe0>)
 800190e:	2200      	movs	r2, #0
 8001910:	661a      	str	r2, [r3, #96]	; 0x60
  /*
   * Disable the FMC bank1 (enabled after reset).
   * This, prevents CPU speculation access on this bank which blocks the use of FMC during
   * 24us. During this time the others FMC master (such as LTDC) cannot use it!
   */
  FMC_Bank1_R->BTCR[0] = 0x000030D2;
 8001912:	4b0d      	ldr	r3, [pc, #52]	; (8001948 <SystemInit+0xf4>)
 8001914:	f243 02d2 	movw	r2, #12498	; 0x30d2
 8001918:	601a      	str	r2, [r3, #0]

  /* Configure the Vector Table location add offset address for cortex-M7 ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = D1_AXISRAM_BASE  | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal AXI-RAM */
#else
  SCB->VTOR = FLASH_BANK1_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 800191a:	4b04      	ldr	r3, [pc, #16]	; (800192c <SystemInit+0xd8>)
 800191c:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8001920:	609a      	str	r2, [r3, #8]
#endif

#endif /*DUAL_CORE && CORE_CM4*/

}
 8001922:	bf00      	nop
 8001924:	46bd      	mov	sp, r7
 8001926:	f85d 7b04 	ldr.w	r7, [sp], #4
 800192a:	4770      	bx	lr
 800192c:	e000ed00 	.word	0xe000ed00
 8001930:	52002000 	.word	0x52002000
 8001934:	58024400 	.word	0x58024400
 8001938:	eaf6ed7f 	.word	0xeaf6ed7f
 800193c:	02020200 	.word	0x02020200
 8001940:	01ff0000 	.word	0x01ff0000
 8001944:	01010280 	.word	0x01010280
 8001948:	52004000 	.word	0x52004000

0800194c <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack      /* set stack pointer */
 800194c:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001984 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit
 8001950:	f7ff ff80 	bl	8001854 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001954:	480c      	ldr	r0, [pc, #48]	; (8001988 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8001956:	490d      	ldr	r1, [pc, #52]	; (800198c <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8001958:	4a0d      	ldr	r2, [pc, #52]	; (8001990 <LoopFillZerobss+0x1a>)
  movs r3, #0
 800195a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800195c:	e002      	b.n	8001964 <LoopCopyDataInit>

0800195e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800195e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001960:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001962:	3304      	adds	r3, #4

08001964 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001964:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001966:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001968:	d3f9      	bcc.n	800195e <CopyDataInit>
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800196a:	4a0a      	ldr	r2, [pc, #40]	; (8001994 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 800196c:	4c0a      	ldr	r4, [pc, #40]	; (8001998 <LoopFillZerobss+0x22>)
  movs r3, #0
 800196e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001970:	e001      	b.n	8001976 <LoopFillZerobss>

08001972 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001972:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001974:	3204      	adds	r2, #4

08001976 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001976:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001978:	d3fb      	bcc.n	8001972 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 800197a:	f009 f809 	bl	800a990 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800197e:	f7ff f859 	bl	8000a34 <main>
  bx  lr
 8001982:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8001984:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8001988:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800198c:	2000010c 	.word	0x2000010c
  ldr r2, =_sidata
 8001990:	0800b8b0 	.word	0x0800b8b0
  ldr r2, =_sbss
 8001994:	2000010c 	.word	0x2000010c
  ldr r4, =_ebss
 8001998:	20000810 	.word	0x20000810

0800199c <ADC3_IRQHandler>:
 * @retval None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 800199c:	e7fe      	b.n	800199c <ADC3_IRQHandler>
	...

080019a0 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80019a0:	b580      	push	{r7, lr}
 80019a2:	b082      	sub	sp, #8
 80019a4:	af00      	add	r7, sp, #0
   __HAL_ART_CONFIG_BASE_ADDRESS(0x08100000UL);  /* Configure the Cortex-M4 ART Base address to the Flash Bank 2 : */
   __HAL_ART_ENABLE();                           /* Enable the Cortex-M4 ART */
#endif /* DUAL_CORE &&  CORE_CM4 */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80019a6:	2003      	movs	r0, #3
 80019a8:	f000 f98c 	bl	8001cc4 <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 80019ac:	f002 f940 	bl	8003c30 <HAL_RCC_GetSysClockFreq>
 80019b0:	4602      	mov	r2, r0
 80019b2:	4b15      	ldr	r3, [pc, #84]	; (8001a08 <HAL_Init+0x68>)
 80019b4:	699b      	ldr	r3, [r3, #24]
 80019b6:	0a1b      	lsrs	r3, r3, #8
 80019b8:	f003 030f 	and.w	r3, r3, #15
 80019bc:	4913      	ldr	r1, [pc, #76]	; (8001a0c <HAL_Init+0x6c>)
 80019be:	5ccb      	ldrb	r3, [r1, r3]
 80019c0:	f003 031f 	and.w	r3, r3, #31
 80019c4:	fa22 f303 	lsr.w	r3, r2, r3
 80019c8:	607b      	str	r3, [r7, #4]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

  /* Update the SystemD2Clock global variable */
#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 80019ca:	4b0f      	ldr	r3, [pc, #60]	; (8001a08 <HAL_Init+0x68>)
 80019cc:	699b      	ldr	r3, [r3, #24]
 80019ce:	f003 030f 	and.w	r3, r3, #15
 80019d2:	4a0e      	ldr	r2, [pc, #56]	; (8001a0c <HAL_Init+0x6c>)
 80019d4:	5cd3      	ldrb	r3, [r2, r3]
 80019d6:	f003 031f 	and.w	r3, r3, #31
 80019da:	687a      	ldr	r2, [r7, #4]
 80019dc:	fa22 f303 	lsr.w	r3, r2, r3
 80019e0:	4a0b      	ldr	r2, [pc, #44]	; (8001a10 <HAL_Init+0x70>)
 80019e2:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 80019e4:	4a0b      	ldr	r2, [pc, #44]	; (8001a14 <HAL_Init+0x74>)
 80019e6:	687b      	ldr	r3, [r7, #4]
 80019e8:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 80019ea:	2000      	movs	r0, #0
 80019ec:	f000 f814 	bl	8001a18 <HAL_InitTick>
 80019f0:	4603      	mov	r3, r0
 80019f2:	2b00      	cmp	r3, #0
 80019f4:	d001      	beq.n	80019fa <HAL_Init+0x5a>
  {
    return HAL_ERROR;
 80019f6:	2301      	movs	r3, #1
 80019f8:	e002      	b.n	8001a00 <HAL_Init+0x60>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 80019fa:	f7ff fd79 	bl	80014f0 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80019fe:	2300      	movs	r3, #0
}
 8001a00:	4618      	mov	r0, r3
 8001a02:	3708      	adds	r7, #8
 8001a04:	46bd      	mov	sp, r7
 8001a06:	bd80      	pop	{r7, pc}
 8001a08:	58024400 	.word	0x58024400
 8001a0c:	0800b834 	.word	0x0800b834
 8001a10:	2000006c 	.word	0x2000006c
 8001a14:	20000068 	.word	0x20000068

08001a18 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001a18:	b580      	push	{r7, lr}
 8001a1a:	b082      	sub	sp, #8
 8001a1c:	af00      	add	r7, sp, #0
 8001a1e:	6078      	str	r0, [r7, #4]
  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that don't take the value zero)*/
  if((uint32_t)uwTickFreq == 0UL)
 8001a20:	4b15      	ldr	r3, [pc, #84]	; (8001a78 <HAL_InitTick+0x60>)
 8001a22:	781b      	ldrb	r3, [r3, #0]
 8001a24:	2b00      	cmp	r3, #0
 8001a26:	d101      	bne.n	8001a2c <HAL_InitTick+0x14>
  {
    return HAL_ERROR;
 8001a28:	2301      	movs	r3, #1
 8001a2a:	e021      	b.n	8001a70 <HAL_InitTick+0x58>
  }

    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000UL / (uint32_t)uwTickFreq)) > 0U)
 8001a2c:	4b13      	ldr	r3, [pc, #76]	; (8001a7c <HAL_InitTick+0x64>)
 8001a2e:	681a      	ldr	r2, [r3, #0]
 8001a30:	4b11      	ldr	r3, [pc, #68]	; (8001a78 <HAL_InitTick+0x60>)
 8001a32:	781b      	ldrb	r3, [r3, #0]
 8001a34:	4619      	mov	r1, r3
 8001a36:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001a3a:	fbb3 f3f1 	udiv	r3, r3, r1
 8001a3e:	fbb2 f3f3 	udiv	r3, r2, r3
 8001a42:	4618      	mov	r0, r3
 8001a44:	f000 f971 	bl	8001d2a <HAL_SYSTICK_Config>
 8001a48:	4603      	mov	r3, r0
 8001a4a:	2b00      	cmp	r3, #0
 8001a4c:	d001      	beq.n	8001a52 <HAL_InitTick+0x3a>
    {
      return HAL_ERROR;
 8001a4e:	2301      	movs	r3, #1
 8001a50:	e00e      	b.n	8001a70 <HAL_InitTick+0x58>
    }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001a52:	687b      	ldr	r3, [r7, #4]
 8001a54:	2b0f      	cmp	r3, #15
 8001a56:	d80a      	bhi.n	8001a6e <HAL_InitTick+0x56>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001a58:	2200      	movs	r2, #0
 8001a5a:	6879      	ldr	r1, [r7, #4]
 8001a5c:	f04f 30ff 	mov.w	r0, #4294967295
 8001a60:	f000 f93b 	bl	8001cda <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001a64:	4a06      	ldr	r2, [pc, #24]	; (8001a80 <HAL_InitTick+0x68>)
 8001a66:	687b      	ldr	r3, [r7, #4]
 8001a68:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001a6a:	2300      	movs	r3, #0
 8001a6c:	e000      	b.n	8001a70 <HAL_InitTick+0x58>
    return HAL_ERROR;
 8001a6e:	2301      	movs	r3, #1
}
 8001a70:	4618      	mov	r0, r3
 8001a72:	3708      	adds	r7, #8
 8001a74:	46bd      	mov	sp, r7
 8001a76:	bd80      	pop	{r7, pc}
 8001a78:	20000074 	.word	0x20000074
 8001a7c:	20000068 	.word	0x20000068
 8001a80:	20000070 	.word	0x20000070

08001a84 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001a84:	b480      	push	{r7}
 8001a86:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8001a88:	4b06      	ldr	r3, [pc, #24]	; (8001aa4 <HAL_IncTick+0x20>)
 8001a8a:	781b      	ldrb	r3, [r3, #0]
 8001a8c:	461a      	mov	r2, r3
 8001a8e:	4b06      	ldr	r3, [pc, #24]	; (8001aa8 <HAL_IncTick+0x24>)
 8001a90:	681b      	ldr	r3, [r3, #0]
 8001a92:	4413      	add	r3, r2
 8001a94:	4a04      	ldr	r2, [pc, #16]	; (8001aa8 <HAL_IncTick+0x24>)
 8001a96:	6013      	str	r3, [r2, #0]
}
 8001a98:	bf00      	nop
 8001a9a:	46bd      	mov	sp, r7
 8001a9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001aa0:	4770      	bx	lr
 8001aa2:	bf00      	nop
 8001aa4:	20000074 	.word	0x20000074
 8001aa8:	20000680 	.word	0x20000680

08001aac <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001aac:	b480      	push	{r7}
 8001aae:	af00      	add	r7, sp, #0
  return uwTick;
 8001ab0:	4b03      	ldr	r3, [pc, #12]	; (8001ac0 <HAL_GetTick+0x14>)
 8001ab2:	681b      	ldr	r3, [r3, #0]
}
 8001ab4:	4618      	mov	r0, r3
 8001ab6:	46bd      	mov	sp, r7
 8001ab8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001abc:	4770      	bx	lr
 8001abe:	bf00      	nop
 8001ac0:	20000680 	.word	0x20000680

08001ac4 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001ac4:	b580      	push	{r7, lr}
 8001ac6:	b084      	sub	sp, #16
 8001ac8:	af00      	add	r7, sp, #0
 8001aca:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001acc:	f7ff ffee 	bl	8001aac <HAL_GetTick>
 8001ad0:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001ad2:	687b      	ldr	r3, [r7, #4]
 8001ad4:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001ad6:	68fb      	ldr	r3, [r7, #12]
 8001ad8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001adc:	d005      	beq.n	8001aea <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001ade:	4b0a      	ldr	r3, [pc, #40]	; (8001b08 <HAL_Delay+0x44>)
 8001ae0:	781b      	ldrb	r3, [r3, #0]
 8001ae2:	461a      	mov	r2, r3
 8001ae4:	68fb      	ldr	r3, [r7, #12]
 8001ae6:	4413      	add	r3, r2
 8001ae8:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8001aea:	bf00      	nop
 8001aec:	f7ff ffde 	bl	8001aac <HAL_GetTick>
 8001af0:	4602      	mov	r2, r0
 8001af2:	68bb      	ldr	r3, [r7, #8]
 8001af4:	1ad3      	subs	r3, r2, r3
 8001af6:	68fa      	ldr	r2, [r7, #12]
 8001af8:	429a      	cmp	r2, r3
 8001afa:	d8f7      	bhi.n	8001aec <HAL_Delay+0x28>
  {
  }
}
 8001afc:	bf00      	nop
 8001afe:	bf00      	nop
 8001b00:	3710      	adds	r7, #16
 8001b02:	46bd      	mov	sp, r7
 8001b04:	bd80      	pop	{r7, pc}
 8001b06:	bf00      	nop
 8001b08:	20000074 	.word	0x20000074

08001b0c <HAL_GetREVID>:
/**
  * @brief  Returns the device revision identifier.
  * @retval Device revision identifier
  */
uint32_t HAL_GetREVID(void)
{
 8001b0c:	b480      	push	{r7}
 8001b0e:	af00      	add	r7, sp, #0
   return((DBGMCU->IDCODE) >> 16);
 8001b10:	4b03      	ldr	r3, [pc, #12]	; (8001b20 <HAL_GetREVID+0x14>)
 8001b12:	681b      	ldr	r3, [r3, #0]
 8001b14:	0c1b      	lsrs	r3, r3, #16
}
 8001b16:	4618      	mov	r0, r3
 8001b18:	46bd      	mov	sp, r7
 8001b1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b1e:	4770      	bx	lr
 8001b20:	5c001000 	.word	0x5c001000

08001b24 <__NVIC_SetPriorityGrouping>:
{
 8001b24:	b480      	push	{r7}
 8001b26:	b085      	sub	sp, #20
 8001b28:	af00      	add	r7, sp, #0
 8001b2a:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001b2c:	687b      	ldr	r3, [r7, #4]
 8001b2e:	f003 0307 	and.w	r3, r3, #7
 8001b32:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001b34:	4b0b      	ldr	r3, [pc, #44]	; (8001b64 <__NVIC_SetPriorityGrouping+0x40>)
 8001b36:	68db      	ldr	r3, [r3, #12]
 8001b38:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001b3a:	68ba      	ldr	r2, [r7, #8]
 8001b3c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001b40:	4013      	ands	r3, r2
 8001b42:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001b44:	68fb      	ldr	r3, [r7, #12]
 8001b46:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001b48:	68bb      	ldr	r3, [r7, #8]
 8001b4a:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8001b4c:	4b06      	ldr	r3, [pc, #24]	; (8001b68 <__NVIC_SetPriorityGrouping+0x44>)
 8001b4e:	4313      	orrs	r3, r2
 8001b50:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001b52:	4a04      	ldr	r2, [pc, #16]	; (8001b64 <__NVIC_SetPriorityGrouping+0x40>)
 8001b54:	68bb      	ldr	r3, [r7, #8]
 8001b56:	60d3      	str	r3, [r2, #12]
}
 8001b58:	bf00      	nop
 8001b5a:	3714      	adds	r7, #20
 8001b5c:	46bd      	mov	sp, r7
 8001b5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b62:	4770      	bx	lr
 8001b64:	e000ed00 	.word	0xe000ed00
 8001b68:	05fa0000 	.word	0x05fa0000

08001b6c <__NVIC_GetPriorityGrouping>:
{
 8001b6c:	b480      	push	{r7}
 8001b6e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001b70:	4b04      	ldr	r3, [pc, #16]	; (8001b84 <__NVIC_GetPriorityGrouping+0x18>)
 8001b72:	68db      	ldr	r3, [r3, #12]
 8001b74:	0a1b      	lsrs	r3, r3, #8
 8001b76:	f003 0307 	and.w	r3, r3, #7
}
 8001b7a:	4618      	mov	r0, r3
 8001b7c:	46bd      	mov	sp, r7
 8001b7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b82:	4770      	bx	lr
 8001b84:	e000ed00 	.word	0xe000ed00

08001b88 <__NVIC_EnableIRQ>:
{
 8001b88:	b480      	push	{r7}
 8001b8a:	b083      	sub	sp, #12
 8001b8c:	af00      	add	r7, sp, #0
 8001b8e:	4603      	mov	r3, r0
 8001b90:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8001b92:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001b96:	2b00      	cmp	r3, #0
 8001b98:	db0b      	blt.n	8001bb2 <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001b9a:	88fb      	ldrh	r3, [r7, #6]
 8001b9c:	f003 021f 	and.w	r2, r3, #31
 8001ba0:	4907      	ldr	r1, [pc, #28]	; (8001bc0 <__NVIC_EnableIRQ+0x38>)
 8001ba2:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001ba6:	095b      	lsrs	r3, r3, #5
 8001ba8:	2001      	movs	r0, #1
 8001baa:	fa00 f202 	lsl.w	r2, r0, r2
 8001bae:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 8001bb2:	bf00      	nop
 8001bb4:	370c      	adds	r7, #12
 8001bb6:	46bd      	mov	sp, r7
 8001bb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bbc:	4770      	bx	lr
 8001bbe:	bf00      	nop
 8001bc0:	e000e100 	.word	0xe000e100

08001bc4 <__NVIC_SetPriority>:
{
 8001bc4:	b480      	push	{r7}
 8001bc6:	b083      	sub	sp, #12
 8001bc8:	af00      	add	r7, sp, #0
 8001bca:	4603      	mov	r3, r0
 8001bcc:	6039      	str	r1, [r7, #0]
 8001bce:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8001bd0:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001bd4:	2b00      	cmp	r3, #0
 8001bd6:	db0a      	blt.n	8001bee <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001bd8:	683b      	ldr	r3, [r7, #0]
 8001bda:	b2da      	uxtb	r2, r3
 8001bdc:	490c      	ldr	r1, [pc, #48]	; (8001c10 <__NVIC_SetPriority+0x4c>)
 8001bde:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001be2:	0112      	lsls	r2, r2, #4
 8001be4:	b2d2      	uxtb	r2, r2
 8001be6:	440b      	add	r3, r1
 8001be8:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 8001bec:	e00a      	b.n	8001c04 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001bee:	683b      	ldr	r3, [r7, #0]
 8001bf0:	b2da      	uxtb	r2, r3
 8001bf2:	4908      	ldr	r1, [pc, #32]	; (8001c14 <__NVIC_SetPriority+0x50>)
 8001bf4:	88fb      	ldrh	r3, [r7, #6]
 8001bf6:	f003 030f 	and.w	r3, r3, #15
 8001bfa:	3b04      	subs	r3, #4
 8001bfc:	0112      	lsls	r2, r2, #4
 8001bfe:	b2d2      	uxtb	r2, r2
 8001c00:	440b      	add	r3, r1
 8001c02:	761a      	strb	r2, [r3, #24]
}
 8001c04:	bf00      	nop
 8001c06:	370c      	adds	r7, #12
 8001c08:	46bd      	mov	sp, r7
 8001c0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c0e:	4770      	bx	lr
 8001c10:	e000e100 	.word	0xe000e100
 8001c14:	e000ed00 	.word	0xe000ed00

08001c18 <NVIC_EncodePriority>:
{
 8001c18:	b480      	push	{r7}
 8001c1a:	b089      	sub	sp, #36	; 0x24
 8001c1c:	af00      	add	r7, sp, #0
 8001c1e:	60f8      	str	r0, [r7, #12]
 8001c20:	60b9      	str	r1, [r7, #8]
 8001c22:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001c24:	68fb      	ldr	r3, [r7, #12]
 8001c26:	f003 0307 	and.w	r3, r3, #7
 8001c2a:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001c2c:	69fb      	ldr	r3, [r7, #28]
 8001c2e:	f1c3 0307 	rsb	r3, r3, #7
 8001c32:	2b04      	cmp	r3, #4
 8001c34:	bf28      	it	cs
 8001c36:	2304      	movcs	r3, #4
 8001c38:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001c3a:	69fb      	ldr	r3, [r7, #28]
 8001c3c:	3304      	adds	r3, #4
 8001c3e:	2b06      	cmp	r3, #6
 8001c40:	d902      	bls.n	8001c48 <NVIC_EncodePriority+0x30>
 8001c42:	69fb      	ldr	r3, [r7, #28]
 8001c44:	3b03      	subs	r3, #3
 8001c46:	e000      	b.n	8001c4a <NVIC_EncodePriority+0x32>
 8001c48:	2300      	movs	r3, #0
 8001c4a:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001c4c:	f04f 32ff 	mov.w	r2, #4294967295
 8001c50:	69bb      	ldr	r3, [r7, #24]
 8001c52:	fa02 f303 	lsl.w	r3, r2, r3
 8001c56:	43da      	mvns	r2, r3
 8001c58:	68bb      	ldr	r3, [r7, #8]
 8001c5a:	401a      	ands	r2, r3
 8001c5c:	697b      	ldr	r3, [r7, #20]
 8001c5e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001c60:	f04f 31ff 	mov.w	r1, #4294967295
 8001c64:	697b      	ldr	r3, [r7, #20]
 8001c66:	fa01 f303 	lsl.w	r3, r1, r3
 8001c6a:	43d9      	mvns	r1, r3
 8001c6c:	687b      	ldr	r3, [r7, #4]
 8001c6e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001c70:	4313      	orrs	r3, r2
}
 8001c72:	4618      	mov	r0, r3
 8001c74:	3724      	adds	r7, #36	; 0x24
 8001c76:	46bd      	mov	sp, r7
 8001c78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c7c:	4770      	bx	lr
	...

08001c80 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001c80:	b580      	push	{r7, lr}
 8001c82:	b082      	sub	sp, #8
 8001c84:	af00      	add	r7, sp, #0
 8001c86:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001c88:	687b      	ldr	r3, [r7, #4]
 8001c8a:	3b01      	subs	r3, #1
 8001c8c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001c90:	d301      	bcc.n	8001c96 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001c92:	2301      	movs	r3, #1
 8001c94:	e00f      	b.n	8001cb6 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001c96:	4a0a      	ldr	r2, [pc, #40]	; (8001cc0 <SysTick_Config+0x40>)
 8001c98:	687b      	ldr	r3, [r7, #4]
 8001c9a:	3b01      	subs	r3, #1
 8001c9c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001c9e:	210f      	movs	r1, #15
 8001ca0:	f04f 30ff 	mov.w	r0, #4294967295
 8001ca4:	f7ff ff8e 	bl	8001bc4 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001ca8:	4b05      	ldr	r3, [pc, #20]	; (8001cc0 <SysTick_Config+0x40>)
 8001caa:	2200      	movs	r2, #0
 8001cac:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001cae:	4b04      	ldr	r3, [pc, #16]	; (8001cc0 <SysTick_Config+0x40>)
 8001cb0:	2207      	movs	r2, #7
 8001cb2:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001cb4:	2300      	movs	r3, #0
}
 8001cb6:	4618      	mov	r0, r3
 8001cb8:	3708      	adds	r7, #8
 8001cba:	46bd      	mov	sp, r7
 8001cbc:	bd80      	pop	{r7, pc}
 8001cbe:	bf00      	nop
 8001cc0:	e000e010 	.word	0xe000e010

08001cc4 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001cc4:	b580      	push	{r7, lr}
 8001cc6:	b082      	sub	sp, #8
 8001cc8:	af00      	add	r7, sp, #0
 8001cca:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001ccc:	6878      	ldr	r0, [r7, #4]
 8001cce:	f7ff ff29 	bl	8001b24 <__NVIC_SetPriorityGrouping>
}
 8001cd2:	bf00      	nop
 8001cd4:	3708      	adds	r7, #8
 8001cd6:	46bd      	mov	sp, r7
 8001cd8:	bd80      	pop	{r7, pc}

08001cda <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001cda:	b580      	push	{r7, lr}
 8001cdc:	b086      	sub	sp, #24
 8001cde:	af00      	add	r7, sp, #0
 8001ce0:	4603      	mov	r3, r0
 8001ce2:	60b9      	str	r1, [r7, #8]
 8001ce4:	607a      	str	r2, [r7, #4]
 8001ce6:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8001ce8:	f7ff ff40 	bl	8001b6c <__NVIC_GetPriorityGrouping>
 8001cec:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001cee:	687a      	ldr	r2, [r7, #4]
 8001cf0:	68b9      	ldr	r1, [r7, #8]
 8001cf2:	6978      	ldr	r0, [r7, #20]
 8001cf4:	f7ff ff90 	bl	8001c18 <NVIC_EncodePriority>
 8001cf8:	4602      	mov	r2, r0
 8001cfa:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8001cfe:	4611      	mov	r1, r2
 8001d00:	4618      	mov	r0, r3
 8001d02:	f7ff ff5f 	bl	8001bc4 <__NVIC_SetPriority>
}
 8001d06:	bf00      	nop
 8001d08:	3718      	adds	r7, #24
 8001d0a:	46bd      	mov	sp, r7
 8001d0c:	bd80      	pop	{r7, pc}

08001d0e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32h7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001d0e:	b580      	push	{r7, lr}
 8001d10:	b082      	sub	sp, #8
 8001d12:	af00      	add	r7, sp, #0
 8001d14:	4603      	mov	r3, r0
 8001d16:	80fb      	strh	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001d18:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001d1c:	4618      	mov	r0, r3
 8001d1e:	f7ff ff33 	bl	8001b88 <__NVIC_EnableIRQ>
}
 8001d22:	bf00      	nop
 8001d24:	3708      	adds	r7, #8
 8001d26:	46bd      	mov	sp, r7
 8001d28:	bd80      	pop	{r7, pc}

08001d2a <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status   - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001d2a:	b580      	push	{r7, lr}
 8001d2c:	b082      	sub	sp, #8
 8001d2e:	af00      	add	r7, sp, #0
 8001d30:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001d32:	6878      	ldr	r0, [r7, #4]
 8001d34:	f7ff ffa4 	bl	8001c80 <SysTick_Config>
 8001d38:	4603      	mov	r3, r0
}
 8001d3a:	4618      	mov	r0, r3
 8001d3c:	3708      	adds	r7, #8
 8001d3e:	46bd      	mov	sp, r7
 8001d40:	bd80      	pop	{r7, pc}
	...

08001d44 <HAL_MPU_Disable>:
/**
  * @brief  Disables the MPU
  * @retval None
  */
void HAL_MPU_Disable(void)
{
 8001d44:	b480      	push	{r7}
 8001d46:	af00      	add	r7, sp, #0
  \details Ensures the apparent order of the explicit memory operations before
           and after the instruction, without ensuring their completion.
 */
__STATIC_FORCEINLINE void __DMB(void)
{
  __ASM volatile ("dmb 0xF":::"memory");
 8001d48:	f3bf 8f5f 	dmb	sy
}
 8001d4c:	bf00      	nop
  /* Make sure outstanding transfers are done */
  __DMB();

  /* Disable fault exceptions */
  SCB->SHCSR &= ~SCB_SHCSR_MEMFAULTENA_Msk;
 8001d4e:	4b07      	ldr	r3, [pc, #28]	; (8001d6c <HAL_MPU_Disable+0x28>)
 8001d50:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001d52:	4a06      	ldr	r2, [pc, #24]	; (8001d6c <HAL_MPU_Disable+0x28>)
 8001d54:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001d58:	6253      	str	r3, [r2, #36]	; 0x24

  /* Disable the MPU and clear the control register*/
  MPU->CTRL = 0;
 8001d5a:	4b05      	ldr	r3, [pc, #20]	; (8001d70 <HAL_MPU_Disable+0x2c>)
 8001d5c:	2200      	movs	r2, #0
 8001d5e:	605a      	str	r2, [r3, #4]
}
 8001d60:	bf00      	nop
 8001d62:	46bd      	mov	sp, r7
 8001d64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d68:	4770      	bx	lr
 8001d6a:	bf00      	nop
 8001d6c:	e000ed00 	.word	0xe000ed00
 8001d70:	e000ed90 	.word	0xe000ed90

08001d74 <HAL_MPU_Enable>:
  *            @arg MPU_PRIVILEGED_DEFAULT
  *            @arg MPU_HFNMI_PRIVDEF
  * @retval None
  */
void HAL_MPU_Enable(uint32_t MPU_Control)
{
 8001d74:	b480      	push	{r7}
 8001d76:	b083      	sub	sp, #12
 8001d78:	af00      	add	r7, sp, #0
 8001d7a:	6078      	str	r0, [r7, #4]
  /* Enable the MPU */
  MPU->CTRL = MPU_Control | MPU_CTRL_ENABLE_Msk;
 8001d7c:	4a0b      	ldr	r2, [pc, #44]	; (8001dac <HAL_MPU_Enable+0x38>)
 8001d7e:	687b      	ldr	r3, [r7, #4]
 8001d80:	f043 0301 	orr.w	r3, r3, #1
 8001d84:	6053      	str	r3, [r2, #4]

  /* Enable fault exceptions */
  SCB->SHCSR |= SCB_SHCSR_MEMFAULTENA_Msk;
 8001d86:	4b0a      	ldr	r3, [pc, #40]	; (8001db0 <HAL_MPU_Enable+0x3c>)
 8001d88:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001d8a:	4a09      	ldr	r2, [pc, #36]	; (8001db0 <HAL_MPU_Enable+0x3c>)
 8001d8c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001d90:	6253      	str	r3, [r2, #36]	; 0x24
  __ASM volatile ("dsb 0xF":::"memory");
 8001d92:	f3bf 8f4f 	dsb	sy
}
 8001d96:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8001d98:	f3bf 8f6f 	isb	sy
}
 8001d9c:	bf00      	nop

  /* Ensure MPU setting take effects */
  __DSB();
  __ISB();
}
 8001d9e:	bf00      	nop
 8001da0:	370c      	adds	r7, #12
 8001da2:	46bd      	mov	sp, r7
 8001da4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001da8:	4770      	bx	lr
 8001daa:	bf00      	nop
 8001dac:	e000ed90 	.word	0xe000ed90
 8001db0:	e000ed00 	.word	0xe000ed00

08001db4 <HAL_MPU_ConfigRegion>:
  * @param  MPU_Init Pointer to a MPU_Region_InitTypeDef structure that contains
  *                  the initialization and configuration information.
  * @retval None
  */
void HAL_MPU_ConfigRegion(MPU_Region_InitTypeDef *MPU_Init)
{
 8001db4:	b480      	push	{r7}
 8001db6:	b083      	sub	sp, #12
 8001db8:	af00      	add	r7, sp, #0
 8001dba:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_MPU_REGION_NUMBER(MPU_Init->Number));
  assert_param(IS_MPU_REGION_ENABLE(MPU_Init->Enable));

  /* Set the Region number */
  MPU->RNR = MPU_Init->Number;
 8001dbc:	687b      	ldr	r3, [r7, #4]
 8001dbe:	785a      	ldrb	r2, [r3, #1]
 8001dc0:	4b1d      	ldr	r3, [pc, #116]	; (8001e38 <HAL_MPU_ConfigRegion+0x84>)
 8001dc2:	609a      	str	r2, [r3, #8]

  if ((MPU_Init->Enable) != 0UL)
 8001dc4:	687b      	ldr	r3, [r7, #4]
 8001dc6:	781b      	ldrb	r3, [r3, #0]
 8001dc8:	2b00      	cmp	r3, #0
 8001dca:	d029      	beq.n	8001e20 <HAL_MPU_ConfigRegion+0x6c>
    assert_param(IS_MPU_ACCESS_CACHEABLE(MPU_Init->IsCacheable));
    assert_param(IS_MPU_ACCESS_BUFFERABLE(MPU_Init->IsBufferable));
    assert_param(IS_MPU_SUB_REGION_DISABLE(MPU_Init->SubRegionDisable));
    assert_param(IS_MPU_REGION_SIZE(MPU_Init->Size));

    MPU->RBAR = MPU_Init->BaseAddress;
 8001dcc:	4a1a      	ldr	r2, [pc, #104]	; (8001e38 <HAL_MPU_ConfigRegion+0x84>)
 8001dce:	687b      	ldr	r3, [r7, #4]
 8001dd0:	685b      	ldr	r3, [r3, #4]
 8001dd2:	60d3      	str	r3, [r2, #12]
    MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 8001dd4:	687b      	ldr	r3, [r7, #4]
 8001dd6:	7b1b      	ldrb	r3, [r3, #12]
 8001dd8:	071a      	lsls	r2, r3, #28
                ((uint32_t)MPU_Init->AccessPermission        << MPU_RASR_AP_Pos)   |
 8001dda:	687b      	ldr	r3, [r7, #4]
 8001ddc:	7adb      	ldrb	r3, [r3, #11]
 8001dde:	061b      	lsls	r3, r3, #24
    MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 8001de0:	431a      	orrs	r2, r3
                ((uint32_t)MPU_Init->TypeExtField            << MPU_RASR_TEX_Pos)  |
 8001de2:	687b      	ldr	r3, [r7, #4]
 8001de4:	7a9b      	ldrb	r3, [r3, #10]
 8001de6:	04db      	lsls	r3, r3, #19
                ((uint32_t)MPU_Init->AccessPermission        << MPU_RASR_AP_Pos)   |
 8001de8:	431a      	orrs	r2, r3
                ((uint32_t)MPU_Init->IsShareable             << MPU_RASR_S_Pos)    |
 8001dea:	687b      	ldr	r3, [r7, #4]
 8001dec:	7b5b      	ldrb	r3, [r3, #13]
 8001dee:	049b      	lsls	r3, r3, #18
                ((uint32_t)MPU_Init->TypeExtField            << MPU_RASR_TEX_Pos)  |
 8001df0:	431a      	orrs	r2, r3
                ((uint32_t)MPU_Init->IsCacheable             << MPU_RASR_C_Pos)    |
 8001df2:	687b      	ldr	r3, [r7, #4]
 8001df4:	7b9b      	ldrb	r3, [r3, #14]
 8001df6:	045b      	lsls	r3, r3, #17
                ((uint32_t)MPU_Init->IsShareable             << MPU_RASR_S_Pos)    |
 8001df8:	431a      	orrs	r2, r3
                ((uint32_t)MPU_Init->IsBufferable            << MPU_RASR_B_Pos)    |
 8001dfa:	687b      	ldr	r3, [r7, #4]
 8001dfc:	7bdb      	ldrb	r3, [r3, #15]
 8001dfe:	041b      	lsls	r3, r3, #16
                ((uint32_t)MPU_Init->IsCacheable             << MPU_RASR_C_Pos)    |
 8001e00:	431a      	orrs	r2, r3
                ((uint32_t)MPU_Init->SubRegionDisable        << MPU_RASR_SRD_Pos)  |
 8001e02:	687b      	ldr	r3, [r7, #4]
 8001e04:	7a5b      	ldrb	r3, [r3, #9]
 8001e06:	021b      	lsls	r3, r3, #8
                ((uint32_t)MPU_Init->IsBufferable            << MPU_RASR_B_Pos)    |
 8001e08:	431a      	orrs	r2, r3
                ((uint32_t)MPU_Init->Size                    << MPU_RASR_SIZE_Pos) |
 8001e0a:	687b      	ldr	r3, [r7, #4]
 8001e0c:	7a1b      	ldrb	r3, [r3, #8]
 8001e0e:	005b      	lsls	r3, r3, #1
                ((uint32_t)MPU_Init->SubRegionDisable        << MPU_RASR_SRD_Pos)  |
 8001e10:	4313      	orrs	r3, r2
                ((uint32_t)MPU_Init->Enable                  << MPU_RASR_ENABLE_Pos);
 8001e12:	687a      	ldr	r2, [r7, #4]
 8001e14:	7812      	ldrb	r2, [r2, #0]
 8001e16:	4611      	mov	r1, r2
    MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 8001e18:	4a07      	ldr	r2, [pc, #28]	; (8001e38 <HAL_MPU_ConfigRegion+0x84>)
                ((uint32_t)MPU_Init->Size                    << MPU_RASR_SIZE_Pos) |
 8001e1a:	430b      	orrs	r3, r1
    MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 8001e1c:	6113      	str	r3, [r2, #16]
  else
  {
    MPU->RBAR = 0x00;
    MPU->RASR = 0x00;
  }
}
 8001e1e:	e005      	b.n	8001e2c <HAL_MPU_ConfigRegion+0x78>
    MPU->RBAR = 0x00;
 8001e20:	4b05      	ldr	r3, [pc, #20]	; (8001e38 <HAL_MPU_ConfigRegion+0x84>)
 8001e22:	2200      	movs	r2, #0
 8001e24:	60da      	str	r2, [r3, #12]
    MPU->RASR = 0x00;
 8001e26:	4b04      	ldr	r3, [pc, #16]	; (8001e38 <HAL_MPU_ConfigRegion+0x84>)
 8001e28:	2200      	movs	r2, #0
 8001e2a:	611a      	str	r2, [r3, #16]
}
 8001e2c:	bf00      	nop
 8001e2e:	370c      	adds	r7, #12
 8001e30:	46bd      	mov	sp, r7
 8001e32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e36:	4770      	bx	lr
 8001e38:	e000ed90 	.word	0xe000ed90

08001e3c <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8001e3c:	b580      	push	{r7, lr}
 8001e3e:	b086      	sub	sp, #24
 8001e40:	af00      	add	r7, sp, #0
 8001e42:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs_dma;
  BDMA_Base_Registers *regs_bdma;
  const __IO uint32_t *enableRegister;

  uint32_t tickstart = HAL_GetTick();
 8001e44:	f7ff fe32 	bl	8001aac <HAL_GetTick>
 8001e48:	6138      	str	r0, [r7, #16]

 /* Check the DMA peripheral handle */
  if(hdma == NULL)
 8001e4a:	687b      	ldr	r3, [r7, #4]
 8001e4c:	2b00      	cmp	r3, #0
 8001e4e:	d101      	bne.n	8001e54 <HAL_DMA_Abort+0x18>
  {
    return HAL_ERROR;
 8001e50:	2301      	movs	r3, #1
 8001e52:	e2dc      	b.n	800240e <HAL_DMA_Abort+0x5d2>
  }

  /* Check the DMA peripheral state */
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8001e54:	687b      	ldr	r3, [r7, #4]
 8001e56:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8001e5a:	b2db      	uxtb	r3, r3
 8001e5c:	2b02      	cmp	r3, #2
 8001e5e:	d008      	beq.n	8001e72 <HAL_DMA_Abort+0x36>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001e60:	687b      	ldr	r3, [r7, #4]
 8001e62:	2280      	movs	r2, #128	; 0x80
 8001e64:	655a      	str	r2, [r3, #84]	; 0x54

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001e66:	687b      	ldr	r3, [r7, #4]
 8001e68:	2200      	movs	r2, #0
 8001e6a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    return HAL_ERROR;
 8001e6e:	2301      	movs	r3, #1
 8001e70:	e2cd      	b.n	800240e <HAL_DMA_Abort+0x5d2>
  }
  else
  {
    /* Disable all the transfer interrupts */
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8001e72:	687b      	ldr	r3, [r7, #4]
 8001e74:	681b      	ldr	r3, [r3, #0]
 8001e76:	4a76      	ldr	r2, [pc, #472]	; (8002050 <HAL_DMA_Abort+0x214>)
 8001e78:	4293      	cmp	r3, r2
 8001e7a:	d04a      	beq.n	8001f12 <HAL_DMA_Abort+0xd6>
 8001e7c:	687b      	ldr	r3, [r7, #4]
 8001e7e:	681b      	ldr	r3, [r3, #0]
 8001e80:	4a74      	ldr	r2, [pc, #464]	; (8002054 <HAL_DMA_Abort+0x218>)
 8001e82:	4293      	cmp	r3, r2
 8001e84:	d045      	beq.n	8001f12 <HAL_DMA_Abort+0xd6>
 8001e86:	687b      	ldr	r3, [r7, #4]
 8001e88:	681b      	ldr	r3, [r3, #0]
 8001e8a:	4a73      	ldr	r2, [pc, #460]	; (8002058 <HAL_DMA_Abort+0x21c>)
 8001e8c:	4293      	cmp	r3, r2
 8001e8e:	d040      	beq.n	8001f12 <HAL_DMA_Abort+0xd6>
 8001e90:	687b      	ldr	r3, [r7, #4]
 8001e92:	681b      	ldr	r3, [r3, #0]
 8001e94:	4a71      	ldr	r2, [pc, #452]	; (800205c <HAL_DMA_Abort+0x220>)
 8001e96:	4293      	cmp	r3, r2
 8001e98:	d03b      	beq.n	8001f12 <HAL_DMA_Abort+0xd6>
 8001e9a:	687b      	ldr	r3, [r7, #4]
 8001e9c:	681b      	ldr	r3, [r3, #0]
 8001e9e:	4a70      	ldr	r2, [pc, #448]	; (8002060 <HAL_DMA_Abort+0x224>)
 8001ea0:	4293      	cmp	r3, r2
 8001ea2:	d036      	beq.n	8001f12 <HAL_DMA_Abort+0xd6>
 8001ea4:	687b      	ldr	r3, [r7, #4]
 8001ea6:	681b      	ldr	r3, [r3, #0]
 8001ea8:	4a6e      	ldr	r2, [pc, #440]	; (8002064 <HAL_DMA_Abort+0x228>)
 8001eaa:	4293      	cmp	r3, r2
 8001eac:	d031      	beq.n	8001f12 <HAL_DMA_Abort+0xd6>
 8001eae:	687b      	ldr	r3, [r7, #4]
 8001eb0:	681b      	ldr	r3, [r3, #0]
 8001eb2:	4a6d      	ldr	r2, [pc, #436]	; (8002068 <HAL_DMA_Abort+0x22c>)
 8001eb4:	4293      	cmp	r3, r2
 8001eb6:	d02c      	beq.n	8001f12 <HAL_DMA_Abort+0xd6>
 8001eb8:	687b      	ldr	r3, [r7, #4]
 8001eba:	681b      	ldr	r3, [r3, #0]
 8001ebc:	4a6b      	ldr	r2, [pc, #428]	; (800206c <HAL_DMA_Abort+0x230>)
 8001ebe:	4293      	cmp	r3, r2
 8001ec0:	d027      	beq.n	8001f12 <HAL_DMA_Abort+0xd6>
 8001ec2:	687b      	ldr	r3, [r7, #4]
 8001ec4:	681b      	ldr	r3, [r3, #0]
 8001ec6:	4a6a      	ldr	r2, [pc, #424]	; (8002070 <HAL_DMA_Abort+0x234>)
 8001ec8:	4293      	cmp	r3, r2
 8001eca:	d022      	beq.n	8001f12 <HAL_DMA_Abort+0xd6>
 8001ecc:	687b      	ldr	r3, [r7, #4]
 8001ece:	681b      	ldr	r3, [r3, #0]
 8001ed0:	4a68      	ldr	r2, [pc, #416]	; (8002074 <HAL_DMA_Abort+0x238>)
 8001ed2:	4293      	cmp	r3, r2
 8001ed4:	d01d      	beq.n	8001f12 <HAL_DMA_Abort+0xd6>
 8001ed6:	687b      	ldr	r3, [r7, #4]
 8001ed8:	681b      	ldr	r3, [r3, #0]
 8001eda:	4a67      	ldr	r2, [pc, #412]	; (8002078 <HAL_DMA_Abort+0x23c>)
 8001edc:	4293      	cmp	r3, r2
 8001ede:	d018      	beq.n	8001f12 <HAL_DMA_Abort+0xd6>
 8001ee0:	687b      	ldr	r3, [r7, #4]
 8001ee2:	681b      	ldr	r3, [r3, #0]
 8001ee4:	4a65      	ldr	r2, [pc, #404]	; (800207c <HAL_DMA_Abort+0x240>)
 8001ee6:	4293      	cmp	r3, r2
 8001ee8:	d013      	beq.n	8001f12 <HAL_DMA_Abort+0xd6>
 8001eea:	687b      	ldr	r3, [r7, #4]
 8001eec:	681b      	ldr	r3, [r3, #0]
 8001eee:	4a64      	ldr	r2, [pc, #400]	; (8002080 <HAL_DMA_Abort+0x244>)
 8001ef0:	4293      	cmp	r3, r2
 8001ef2:	d00e      	beq.n	8001f12 <HAL_DMA_Abort+0xd6>
 8001ef4:	687b      	ldr	r3, [r7, #4]
 8001ef6:	681b      	ldr	r3, [r3, #0]
 8001ef8:	4a62      	ldr	r2, [pc, #392]	; (8002084 <HAL_DMA_Abort+0x248>)
 8001efa:	4293      	cmp	r3, r2
 8001efc:	d009      	beq.n	8001f12 <HAL_DMA_Abort+0xd6>
 8001efe:	687b      	ldr	r3, [r7, #4]
 8001f00:	681b      	ldr	r3, [r3, #0]
 8001f02:	4a61      	ldr	r2, [pc, #388]	; (8002088 <HAL_DMA_Abort+0x24c>)
 8001f04:	4293      	cmp	r3, r2
 8001f06:	d004      	beq.n	8001f12 <HAL_DMA_Abort+0xd6>
 8001f08:	687b      	ldr	r3, [r7, #4]
 8001f0a:	681b      	ldr	r3, [r3, #0]
 8001f0c:	4a5f      	ldr	r2, [pc, #380]	; (800208c <HAL_DMA_Abort+0x250>)
 8001f0e:	4293      	cmp	r3, r2
 8001f10:	d101      	bne.n	8001f16 <HAL_DMA_Abort+0xda>
 8001f12:	2301      	movs	r3, #1
 8001f14:	e000      	b.n	8001f18 <HAL_DMA_Abort+0xdc>
 8001f16:	2300      	movs	r3, #0
 8001f18:	2b00      	cmp	r3, #0
 8001f1a:	d013      	beq.n	8001f44 <HAL_DMA_Abort+0x108>
    {
       /* Disable DMA All Interrupts  */
      ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME | DMA_IT_HT);
 8001f1c:	687b      	ldr	r3, [r7, #4]
 8001f1e:	681b      	ldr	r3, [r3, #0]
 8001f20:	681a      	ldr	r2, [r3, #0]
 8001f22:	687b      	ldr	r3, [r7, #4]
 8001f24:	681b      	ldr	r3, [r3, #0]
 8001f26:	f022 021e 	bic.w	r2, r2, #30
 8001f2a:	601a      	str	r2, [r3, #0]
      ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR &= ~(DMA_IT_FE);
 8001f2c:	687b      	ldr	r3, [r7, #4]
 8001f2e:	681b      	ldr	r3, [r3, #0]
 8001f30:	695a      	ldr	r2, [r3, #20]
 8001f32:	687b      	ldr	r3, [r7, #4]
 8001f34:	681b      	ldr	r3, [r3, #0]
 8001f36:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8001f3a:	615a      	str	r2, [r3, #20]

      enableRegister = (__IO uint32_t *)(&(((DMA_Stream_TypeDef   *)hdma->Instance)->CR));
 8001f3c:	687b      	ldr	r3, [r7, #4]
 8001f3e:	681b      	ldr	r3, [r3, #0]
 8001f40:	617b      	str	r3, [r7, #20]
 8001f42:	e00a      	b.n	8001f5a <HAL_DMA_Abort+0x11e>
    }
    else /* BDMA channel */
    {
      /* Disable DMA All Interrupts */
      ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  &= ~(BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE);
 8001f44:	687b      	ldr	r3, [r7, #4]
 8001f46:	681b      	ldr	r3, [r3, #0]
 8001f48:	681a      	ldr	r2, [r3, #0]
 8001f4a:	687b      	ldr	r3, [r7, #4]
 8001f4c:	681b      	ldr	r3, [r3, #0]
 8001f4e:	f022 020e 	bic.w	r2, r2, #14
 8001f52:	601a      	str	r2, [r3, #0]

      enableRegister = (__IO uint32_t *)(&(((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR));
 8001f54:	687b      	ldr	r3, [r7, #4]
 8001f56:	681b      	ldr	r3, [r3, #0]
 8001f58:	617b      	str	r3, [r7, #20]
    }

    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8001f5a:	687b      	ldr	r3, [r7, #4]
 8001f5c:	681b      	ldr	r3, [r3, #0]
 8001f5e:	4a3c      	ldr	r2, [pc, #240]	; (8002050 <HAL_DMA_Abort+0x214>)
 8001f60:	4293      	cmp	r3, r2
 8001f62:	d072      	beq.n	800204a <HAL_DMA_Abort+0x20e>
 8001f64:	687b      	ldr	r3, [r7, #4]
 8001f66:	681b      	ldr	r3, [r3, #0]
 8001f68:	4a3a      	ldr	r2, [pc, #232]	; (8002054 <HAL_DMA_Abort+0x218>)
 8001f6a:	4293      	cmp	r3, r2
 8001f6c:	d06d      	beq.n	800204a <HAL_DMA_Abort+0x20e>
 8001f6e:	687b      	ldr	r3, [r7, #4]
 8001f70:	681b      	ldr	r3, [r3, #0]
 8001f72:	4a39      	ldr	r2, [pc, #228]	; (8002058 <HAL_DMA_Abort+0x21c>)
 8001f74:	4293      	cmp	r3, r2
 8001f76:	d068      	beq.n	800204a <HAL_DMA_Abort+0x20e>
 8001f78:	687b      	ldr	r3, [r7, #4]
 8001f7a:	681b      	ldr	r3, [r3, #0]
 8001f7c:	4a37      	ldr	r2, [pc, #220]	; (800205c <HAL_DMA_Abort+0x220>)
 8001f7e:	4293      	cmp	r3, r2
 8001f80:	d063      	beq.n	800204a <HAL_DMA_Abort+0x20e>
 8001f82:	687b      	ldr	r3, [r7, #4]
 8001f84:	681b      	ldr	r3, [r3, #0]
 8001f86:	4a36      	ldr	r2, [pc, #216]	; (8002060 <HAL_DMA_Abort+0x224>)
 8001f88:	4293      	cmp	r3, r2
 8001f8a:	d05e      	beq.n	800204a <HAL_DMA_Abort+0x20e>
 8001f8c:	687b      	ldr	r3, [r7, #4]
 8001f8e:	681b      	ldr	r3, [r3, #0]
 8001f90:	4a34      	ldr	r2, [pc, #208]	; (8002064 <HAL_DMA_Abort+0x228>)
 8001f92:	4293      	cmp	r3, r2
 8001f94:	d059      	beq.n	800204a <HAL_DMA_Abort+0x20e>
 8001f96:	687b      	ldr	r3, [r7, #4]
 8001f98:	681b      	ldr	r3, [r3, #0]
 8001f9a:	4a33      	ldr	r2, [pc, #204]	; (8002068 <HAL_DMA_Abort+0x22c>)
 8001f9c:	4293      	cmp	r3, r2
 8001f9e:	d054      	beq.n	800204a <HAL_DMA_Abort+0x20e>
 8001fa0:	687b      	ldr	r3, [r7, #4]
 8001fa2:	681b      	ldr	r3, [r3, #0]
 8001fa4:	4a31      	ldr	r2, [pc, #196]	; (800206c <HAL_DMA_Abort+0x230>)
 8001fa6:	4293      	cmp	r3, r2
 8001fa8:	d04f      	beq.n	800204a <HAL_DMA_Abort+0x20e>
 8001faa:	687b      	ldr	r3, [r7, #4]
 8001fac:	681b      	ldr	r3, [r3, #0]
 8001fae:	4a30      	ldr	r2, [pc, #192]	; (8002070 <HAL_DMA_Abort+0x234>)
 8001fb0:	4293      	cmp	r3, r2
 8001fb2:	d04a      	beq.n	800204a <HAL_DMA_Abort+0x20e>
 8001fb4:	687b      	ldr	r3, [r7, #4]
 8001fb6:	681b      	ldr	r3, [r3, #0]
 8001fb8:	4a2e      	ldr	r2, [pc, #184]	; (8002074 <HAL_DMA_Abort+0x238>)
 8001fba:	4293      	cmp	r3, r2
 8001fbc:	d045      	beq.n	800204a <HAL_DMA_Abort+0x20e>
 8001fbe:	687b      	ldr	r3, [r7, #4]
 8001fc0:	681b      	ldr	r3, [r3, #0]
 8001fc2:	4a2d      	ldr	r2, [pc, #180]	; (8002078 <HAL_DMA_Abort+0x23c>)
 8001fc4:	4293      	cmp	r3, r2
 8001fc6:	d040      	beq.n	800204a <HAL_DMA_Abort+0x20e>
 8001fc8:	687b      	ldr	r3, [r7, #4]
 8001fca:	681b      	ldr	r3, [r3, #0]
 8001fcc:	4a2b      	ldr	r2, [pc, #172]	; (800207c <HAL_DMA_Abort+0x240>)
 8001fce:	4293      	cmp	r3, r2
 8001fd0:	d03b      	beq.n	800204a <HAL_DMA_Abort+0x20e>
 8001fd2:	687b      	ldr	r3, [r7, #4]
 8001fd4:	681b      	ldr	r3, [r3, #0]
 8001fd6:	4a2a      	ldr	r2, [pc, #168]	; (8002080 <HAL_DMA_Abort+0x244>)
 8001fd8:	4293      	cmp	r3, r2
 8001fda:	d036      	beq.n	800204a <HAL_DMA_Abort+0x20e>
 8001fdc:	687b      	ldr	r3, [r7, #4]
 8001fde:	681b      	ldr	r3, [r3, #0]
 8001fe0:	4a28      	ldr	r2, [pc, #160]	; (8002084 <HAL_DMA_Abort+0x248>)
 8001fe2:	4293      	cmp	r3, r2
 8001fe4:	d031      	beq.n	800204a <HAL_DMA_Abort+0x20e>
 8001fe6:	687b      	ldr	r3, [r7, #4]
 8001fe8:	681b      	ldr	r3, [r3, #0]
 8001fea:	4a27      	ldr	r2, [pc, #156]	; (8002088 <HAL_DMA_Abort+0x24c>)
 8001fec:	4293      	cmp	r3, r2
 8001fee:	d02c      	beq.n	800204a <HAL_DMA_Abort+0x20e>
 8001ff0:	687b      	ldr	r3, [r7, #4]
 8001ff2:	681b      	ldr	r3, [r3, #0]
 8001ff4:	4a25      	ldr	r2, [pc, #148]	; (800208c <HAL_DMA_Abort+0x250>)
 8001ff6:	4293      	cmp	r3, r2
 8001ff8:	d027      	beq.n	800204a <HAL_DMA_Abort+0x20e>
 8001ffa:	687b      	ldr	r3, [r7, #4]
 8001ffc:	681b      	ldr	r3, [r3, #0]
 8001ffe:	4a24      	ldr	r2, [pc, #144]	; (8002090 <HAL_DMA_Abort+0x254>)
 8002000:	4293      	cmp	r3, r2
 8002002:	d022      	beq.n	800204a <HAL_DMA_Abort+0x20e>
 8002004:	687b      	ldr	r3, [r7, #4]
 8002006:	681b      	ldr	r3, [r3, #0]
 8002008:	4a22      	ldr	r2, [pc, #136]	; (8002094 <HAL_DMA_Abort+0x258>)
 800200a:	4293      	cmp	r3, r2
 800200c:	d01d      	beq.n	800204a <HAL_DMA_Abort+0x20e>
 800200e:	687b      	ldr	r3, [r7, #4]
 8002010:	681b      	ldr	r3, [r3, #0]
 8002012:	4a21      	ldr	r2, [pc, #132]	; (8002098 <HAL_DMA_Abort+0x25c>)
 8002014:	4293      	cmp	r3, r2
 8002016:	d018      	beq.n	800204a <HAL_DMA_Abort+0x20e>
 8002018:	687b      	ldr	r3, [r7, #4]
 800201a:	681b      	ldr	r3, [r3, #0]
 800201c:	4a1f      	ldr	r2, [pc, #124]	; (800209c <HAL_DMA_Abort+0x260>)
 800201e:	4293      	cmp	r3, r2
 8002020:	d013      	beq.n	800204a <HAL_DMA_Abort+0x20e>
 8002022:	687b      	ldr	r3, [r7, #4]
 8002024:	681b      	ldr	r3, [r3, #0]
 8002026:	4a1e      	ldr	r2, [pc, #120]	; (80020a0 <HAL_DMA_Abort+0x264>)
 8002028:	4293      	cmp	r3, r2
 800202a:	d00e      	beq.n	800204a <HAL_DMA_Abort+0x20e>
 800202c:	687b      	ldr	r3, [r7, #4]
 800202e:	681b      	ldr	r3, [r3, #0]
 8002030:	4a1c      	ldr	r2, [pc, #112]	; (80020a4 <HAL_DMA_Abort+0x268>)
 8002032:	4293      	cmp	r3, r2
 8002034:	d009      	beq.n	800204a <HAL_DMA_Abort+0x20e>
 8002036:	687b      	ldr	r3, [r7, #4]
 8002038:	681b      	ldr	r3, [r3, #0]
 800203a:	4a1b      	ldr	r2, [pc, #108]	; (80020a8 <HAL_DMA_Abort+0x26c>)
 800203c:	4293      	cmp	r3, r2
 800203e:	d004      	beq.n	800204a <HAL_DMA_Abort+0x20e>
 8002040:	687b      	ldr	r3, [r7, #4]
 8002042:	681b      	ldr	r3, [r3, #0]
 8002044:	4a19      	ldr	r2, [pc, #100]	; (80020ac <HAL_DMA_Abort+0x270>)
 8002046:	4293      	cmp	r3, r2
 8002048:	d132      	bne.n	80020b0 <HAL_DMA_Abort+0x274>
 800204a:	2301      	movs	r3, #1
 800204c:	e031      	b.n	80020b2 <HAL_DMA_Abort+0x276>
 800204e:	bf00      	nop
 8002050:	40020010 	.word	0x40020010
 8002054:	40020028 	.word	0x40020028
 8002058:	40020040 	.word	0x40020040
 800205c:	40020058 	.word	0x40020058
 8002060:	40020070 	.word	0x40020070
 8002064:	40020088 	.word	0x40020088
 8002068:	400200a0 	.word	0x400200a0
 800206c:	400200b8 	.word	0x400200b8
 8002070:	40020410 	.word	0x40020410
 8002074:	40020428 	.word	0x40020428
 8002078:	40020440 	.word	0x40020440
 800207c:	40020458 	.word	0x40020458
 8002080:	40020470 	.word	0x40020470
 8002084:	40020488 	.word	0x40020488
 8002088:	400204a0 	.word	0x400204a0
 800208c:	400204b8 	.word	0x400204b8
 8002090:	58025408 	.word	0x58025408
 8002094:	5802541c 	.word	0x5802541c
 8002098:	58025430 	.word	0x58025430
 800209c:	58025444 	.word	0x58025444
 80020a0:	58025458 	.word	0x58025458
 80020a4:	5802546c 	.word	0x5802546c
 80020a8:	58025480 	.word	0x58025480
 80020ac:	58025494 	.word	0x58025494
 80020b0:	2300      	movs	r3, #0
 80020b2:	2b00      	cmp	r3, #0
 80020b4:	d007      	beq.n	80020c6 <HAL_DMA_Abort+0x28a>
    {
      /* disable the DMAMUX sync overrun IT */
      hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 80020b6:	687b      	ldr	r3, [r7, #4]
 80020b8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80020ba:	681a      	ldr	r2, [r3, #0]
 80020bc:	687b      	ldr	r3, [r7, #4]
 80020be:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80020c0:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80020c4:	601a      	str	r2, [r3, #0]
    }

    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 80020c6:	687b      	ldr	r3, [r7, #4]
 80020c8:	681b      	ldr	r3, [r3, #0]
 80020ca:	4a6d      	ldr	r2, [pc, #436]	; (8002280 <HAL_DMA_Abort+0x444>)
 80020cc:	4293      	cmp	r3, r2
 80020ce:	d04a      	beq.n	8002166 <HAL_DMA_Abort+0x32a>
 80020d0:	687b      	ldr	r3, [r7, #4]
 80020d2:	681b      	ldr	r3, [r3, #0]
 80020d4:	4a6b      	ldr	r2, [pc, #428]	; (8002284 <HAL_DMA_Abort+0x448>)
 80020d6:	4293      	cmp	r3, r2
 80020d8:	d045      	beq.n	8002166 <HAL_DMA_Abort+0x32a>
 80020da:	687b      	ldr	r3, [r7, #4]
 80020dc:	681b      	ldr	r3, [r3, #0]
 80020de:	4a6a      	ldr	r2, [pc, #424]	; (8002288 <HAL_DMA_Abort+0x44c>)
 80020e0:	4293      	cmp	r3, r2
 80020e2:	d040      	beq.n	8002166 <HAL_DMA_Abort+0x32a>
 80020e4:	687b      	ldr	r3, [r7, #4]
 80020e6:	681b      	ldr	r3, [r3, #0]
 80020e8:	4a68      	ldr	r2, [pc, #416]	; (800228c <HAL_DMA_Abort+0x450>)
 80020ea:	4293      	cmp	r3, r2
 80020ec:	d03b      	beq.n	8002166 <HAL_DMA_Abort+0x32a>
 80020ee:	687b      	ldr	r3, [r7, #4]
 80020f0:	681b      	ldr	r3, [r3, #0]
 80020f2:	4a67      	ldr	r2, [pc, #412]	; (8002290 <HAL_DMA_Abort+0x454>)
 80020f4:	4293      	cmp	r3, r2
 80020f6:	d036      	beq.n	8002166 <HAL_DMA_Abort+0x32a>
 80020f8:	687b      	ldr	r3, [r7, #4]
 80020fa:	681b      	ldr	r3, [r3, #0]
 80020fc:	4a65      	ldr	r2, [pc, #404]	; (8002294 <HAL_DMA_Abort+0x458>)
 80020fe:	4293      	cmp	r3, r2
 8002100:	d031      	beq.n	8002166 <HAL_DMA_Abort+0x32a>
 8002102:	687b      	ldr	r3, [r7, #4]
 8002104:	681b      	ldr	r3, [r3, #0]
 8002106:	4a64      	ldr	r2, [pc, #400]	; (8002298 <HAL_DMA_Abort+0x45c>)
 8002108:	4293      	cmp	r3, r2
 800210a:	d02c      	beq.n	8002166 <HAL_DMA_Abort+0x32a>
 800210c:	687b      	ldr	r3, [r7, #4]
 800210e:	681b      	ldr	r3, [r3, #0]
 8002110:	4a62      	ldr	r2, [pc, #392]	; (800229c <HAL_DMA_Abort+0x460>)
 8002112:	4293      	cmp	r3, r2
 8002114:	d027      	beq.n	8002166 <HAL_DMA_Abort+0x32a>
 8002116:	687b      	ldr	r3, [r7, #4]
 8002118:	681b      	ldr	r3, [r3, #0]
 800211a:	4a61      	ldr	r2, [pc, #388]	; (80022a0 <HAL_DMA_Abort+0x464>)
 800211c:	4293      	cmp	r3, r2
 800211e:	d022      	beq.n	8002166 <HAL_DMA_Abort+0x32a>
 8002120:	687b      	ldr	r3, [r7, #4]
 8002122:	681b      	ldr	r3, [r3, #0]
 8002124:	4a5f      	ldr	r2, [pc, #380]	; (80022a4 <HAL_DMA_Abort+0x468>)
 8002126:	4293      	cmp	r3, r2
 8002128:	d01d      	beq.n	8002166 <HAL_DMA_Abort+0x32a>
 800212a:	687b      	ldr	r3, [r7, #4]
 800212c:	681b      	ldr	r3, [r3, #0]
 800212e:	4a5e      	ldr	r2, [pc, #376]	; (80022a8 <HAL_DMA_Abort+0x46c>)
 8002130:	4293      	cmp	r3, r2
 8002132:	d018      	beq.n	8002166 <HAL_DMA_Abort+0x32a>
 8002134:	687b      	ldr	r3, [r7, #4]
 8002136:	681b      	ldr	r3, [r3, #0]
 8002138:	4a5c      	ldr	r2, [pc, #368]	; (80022ac <HAL_DMA_Abort+0x470>)
 800213a:	4293      	cmp	r3, r2
 800213c:	d013      	beq.n	8002166 <HAL_DMA_Abort+0x32a>
 800213e:	687b      	ldr	r3, [r7, #4]
 8002140:	681b      	ldr	r3, [r3, #0]
 8002142:	4a5b      	ldr	r2, [pc, #364]	; (80022b0 <HAL_DMA_Abort+0x474>)
 8002144:	4293      	cmp	r3, r2
 8002146:	d00e      	beq.n	8002166 <HAL_DMA_Abort+0x32a>
 8002148:	687b      	ldr	r3, [r7, #4]
 800214a:	681b      	ldr	r3, [r3, #0]
 800214c:	4a59      	ldr	r2, [pc, #356]	; (80022b4 <HAL_DMA_Abort+0x478>)
 800214e:	4293      	cmp	r3, r2
 8002150:	d009      	beq.n	8002166 <HAL_DMA_Abort+0x32a>
 8002152:	687b      	ldr	r3, [r7, #4]
 8002154:	681b      	ldr	r3, [r3, #0]
 8002156:	4a58      	ldr	r2, [pc, #352]	; (80022b8 <HAL_DMA_Abort+0x47c>)
 8002158:	4293      	cmp	r3, r2
 800215a:	d004      	beq.n	8002166 <HAL_DMA_Abort+0x32a>
 800215c:	687b      	ldr	r3, [r7, #4]
 800215e:	681b      	ldr	r3, [r3, #0]
 8002160:	4a56      	ldr	r2, [pc, #344]	; (80022bc <HAL_DMA_Abort+0x480>)
 8002162:	4293      	cmp	r3, r2
 8002164:	d108      	bne.n	8002178 <HAL_DMA_Abort+0x33c>
 8002166:	687b      	ldr	r3, [r7, #4]
 8002168:	681b      	ldr	r3, [r3, #0]
 800216a:	681a      	ldr	r2, [r3, #0]
 800216c:	687b      	ldr	r3, [r7, #4]
 800216e:	681b      	ldr	r3, [r3, #0]
 8002170:	f022 0201 	bic.w	r2, r2, #1
 8002174:	601a      	str	r2, [r3, #0]
 8002176:	e007      	b.n	8002188 <HAL_DMA_Abort+0x34c>
 8002178:	687b      	ldr	r3, [r7, #4]
 800217a:	681b      	ldr	r3, [r3, #0]
 800217c:	681a      	ldr	r2, [r3, #0]
 800217e:	687b      	ldr	r3, [r7, #4]
 8002180:	681b      	ldr	r3, [r3, #0]
 8002182:	f022 0201 	bic.w	r2, r2, #1
 8002186:	601a      	str	r2, [r3, #0]

    /* Check if the DMA Stream is effectively disabled */
    while(((*enableRegister) & DMA_SxCR_EN) != 0U)
 8002188:	e013      	b.n	80021b2 <HAL_DMA_Abort+0x376>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 800218a:	f7ff fc8f 	bl	8001aac <HAL_GetTick>
 800218e:	4602      	mov	r2, r0
 8002190:	693b      	ldr	r3, [r7, #16]
 8002192:	1ad3      	subs	r3, r2, r3
 8002194:	2b05      	cmp	r3, #5
 8002196:	d90c      	bls.n	80021b2 <HAL_DMA_Abort+0x376>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8002198:	687b      	ldr	r3, [r7, #4]
 800219a:	2220      	movs	r2, #32
 800219c:	655a      	str	r2, [r3, #84]	; 0x54

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_ERROR;
 800219e:	687b      	ldr	r3, [r7, #4]
 80021a0:	2203      	movs	r2, #3
 80021a2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 80021a6:	687b      	ldr	r3, [r7, #4]
 80021a8:	2200      	movs	r2, #0
 80021aa:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        return HAL_ERROR;
 80021ae:	2301      	movs	r3, #1
 80021b0:	e12d      	b.n	800240e <HAL_DMA_Abort+0x5d2>
    while(((*enableRegister) & DMA_SxCR_EN) != 0U)
 80021b2:	697b      	ldr	r3, [r7, #20]
 80021b4:	681b      	ldr	r3, [r3, #0]
 80021b6:	f003 0301 	and.w	r3, r3, #1
 80021ba:	2b00      	cmp	r3, #0
 80021bc:	d1e5      	bne.n	800218a <HAL_DMA_Abort+0x34e>
      }
    }

    /* Clear all interrupt flags at correct offset within the register */
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 80021be:	687b      	ldr	r3, [r7, #4]
 80021c0:	681b      	ldr	r3, [r3, #0]
 80021c2:	4a2f      	ldr	r2, [pc, #188]	; (8002280 <HAL_DMA_Abort+0x444>)
 80021c4:	4293      	cmp	r3, r2
 80021c6:	d04a      	beq.n	800225e <HAL_DMA_Abort+0x422>
 80021c8:	687b      	ldr	r3, [r7, #4]
 80021ca:	681b      	ldr	r3, [r3, #0]
 80021cc:	4a2d      	ldr	r2, [pc, #180]	; (8002284 <HAL_DMA_Abort+0x448>)
 80021ce:	4293      	cmp	r3, r2
 80021d0:	d045      	beq.n	800225e <HAL_DMA_Abort+0x422>
 80021d2:	687b      	ldr	r3, [r7, #4]
 80021d4:	681b      	ldr	r3, [r3, #0]
 80021d6:	4a2c      	ldr	r2, [pc, #176]	; (8002288 <HAL_DMA_Abort+0x44c>)
 80021d8:	4293      	cmp	r3, r2
 80021da:	d040      	beq.n	800225e <HAL_DMA_Abort+0x422>
 80021dc:	687b      	ldr	r3, [r7, #4]
 80021de:	681b      	ldr	r3, [r3, #0]
 80021e0:	4a2a      	ldr	r2, [pc, #168]	; (800228c <HAL_DMA_Abort+0x450>)
 80021e2:	4293      	cmp	r3, r2
 80021e4:	d03b      	beq.n	800225e <HAL_DMA_Abort+0x422>
 80021e6:	687b      	ldr	r3, [r7, #4]
 80021e8:	681b      	ldr	r3, [r3, #0]
 80021ea:	4a29      	ldr	r2, [pc, #164]	; (8002290 <HAL_DMA_Abort+0x454>)
 80021ec:	4293      	cmp	r3, r2
 80021ee:	d036      	beq.n	800225e <HAL_DMA_Abort+0x422>
 80021f0:	687b      	ldr	r3, [r7, #4]
 80021f2:	681b      	ldr	r3, [r3, #0]
 80021f4:	4a27      	ldr	r2, [pc, #156]	; (8002294 <HAL_DMA_Abort+0x458>)
 80021f6:	4293      	cmp	r3, r2
 80021f8:	d031      	beq.n	800225e <HAL_DMA_Abort+0x422>
 80021fa:	687b      	ldr	r3, [r7, #4]
 80021fc:	681b      	ldr	r3, [r3, #0]
 80021fe:	4a26      	ldr	r2, [pc, #152]	; (8002298 <HAL_DMA_Abort+0x45c>)
 8002200:	4293      	cmp	r3, r2
 8002202:	d02c      	beq.n	800225e <HAL_DMA_Abort+0x422>
 8002204:	687b      	ldr	r3, [r7, #4]
 8002206:	681b      	ldr	r3, [r3, #0]
 8002208:	4a24      	ldr	r2, [pc, #144]	; (800229c <HAL_DMA_Abort+0x460>)
 800220a:	4293      	cmp	r3, r2
 800220c:	d027      	beq.n	800225e <HAL_DMA_Abort+0x422>
 800220e:	687b      	ldr	r3, [r7, #4]
 8002210:	681b      	ldr	r3, [r3, #0]
 8002212:	4a23      	ldr	r2, [pc, #140]	; (80022a0 <HAL_DMA_Abort+0x464>)
 8002214:	4293      	cmp	r3, r2
 8002216:	d022      	beq.n	800225e <HAL_DMA_Abort+0x422>
 8002218:	687b      	ldr	r3, [r7, #4]
 800221a:	681b      	ldr	r3, [r3, #0]
 800221c:	4a21      	ldr	r2, [pc, #132]	; (80022a4 <HAL_DMA_Abort+0x468>)
 800221e:	4293      	cmp	r3, r2
 8002220:	d01d      	beq.n	800225e <HAL_DMA_Abort+0x422>
 8002222:	687b      	ldr	r3, [r7, #4]
 8002224:	681b      	ldr	r3, [r3, #0]
 8002226:	4a20      	ldr	r2, [pc, #128]	; (80022a8 <HAL_DMA_Abort+0x46c>)
 8002228:	4293      	cmp	r3, r2
 800222a:	d018      	beq.n	800225e <HAL_DMA_Abort+0x422>
 800222c:	687b      	ldr	r3, [r7, #4]
 800222e:	681b      	ldr	r3, [r3, #0]
 8002230:	4a1e      	ldr	r2, [pc, #120]	; (80022ac <HAL_DMA_Abort+0x470>)
 8002232:	4293      	cmp	r3, r2
 8002234:	d013      	beq.n	800225e <HAL_DMA_Abort+0x422>
 8002236:	687b      	ldr	r3, [r7, #4]
 8002238:	681b      	ldr	r3, [r3, #0]
 800223a:	4a1d      	ldr	r2, [pc, #116]	; (80022b0 <HAL_DMA_Abort+0x474>)
 800223c:	4293      	cmp	r3, r2
 800223e:	d00e      	beq.n	800225e <HAL_DMA_Abort+0x422>
 8002240:	687b      	ldr	r3, [r7, #4]
 8002242:	681b      	ldr	r3, [r3, #0]
 8002244:	4a1b      	ldr	r2, [pc, #108]	; (80022b4 <HAL_DMA_Abort+0x478>)
 8002246:	4293      	cmp	r3, r2
 8002248:	d009      	beq.n	800225e <HAL_DMA_Abort+0x422>
 800224a:	687b      	ldr	r3, [r7, #4]
 800224c:	681b      	ldr	r3, [r3, #0]
 800224e:	4a1a      	ldr	r2, [pc, #104]	; (80022b8 <HAL_DMA_Abort+0x47c>)
 8002250:	4293      	cmp	r3, r2
 8002252:	d004      	beq.n	800225e <HAL_DMA_Abort+0x422>
 8002254:	687b      	ldr	r3, [r7, #4]
 8002256:	681b      	ldr	r3, [r3, #0]
 8002258:	4a18      	ldr	r2, [pc, #96]	; (80022bc <HAL_DMA_Abort+0x480>)
 800225a:	4293      	cmp	r3, r2
 800225c:	d101      	bne.n	8002262 <HAL_DMA_Abort+0x426>
 800225e:	2301      	movs	r3, #1
 8002260:	e000      	b.n	8002264 <HAL_DMA_Abort+0x428>
 8002262:	2300      	movs	r3, #0
 8002264:	2b00      	cmp	r3, #0
 8002266:	d02b      	beq.n	80022c0 <HAL_DMA_Abort+0x484>
    {
      regs_dma = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8002268:	687b      	ldr	r3, [r7, #4]
 800226a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800226c:	60bb      	str	r3, [r7, #8]
      regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 800226e:	687b      	ldr	r3, [r7, #4]
 8002270:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002272:	f003 031f 	and.w	r3, r3, #31
 8002276:	223f      	movs	r2, #63	; 0x3f
 8002278:	409a      	lsls	r2, r3
 800227a:	68bb      	ldr	r3, [r7, #8]
 800227c:	609a      	str	r2, [r3, #8]
 800227e:	e02a      	b.n	80022d6 <HAL_DMA_Abort+0x49a>
 8002280:	40020010 	.word	0x40020010
 8002284:	40020028 	.word	0x40020028
 8002288:	40020040 	.word	0x40020040
 800228c:	40020058 	.word	0x40020058
 8002290:	40020070 	.word	0x40020070
 8002294:	40020088 	.word	0x40020088
 8002298:	400200a0 	.word	0x400200a0
 800229c:	400200b8 	.word	0x400200b8
 80022a0:	40020410 	.word	0x40020410
 80022a4:	40020428 	.word	0x40020428
 80022a8:	40020440 	.word	0x40020440
 80022ac:	40020458 	.word	0x40020458
 80022b0:	40020470 	.word	0x40020470
 80022b4:	40020488 	.word	0x40020488
 80022b8:	400204a0 	.word	0x400204a0
 80022bc:	400204b8 	.word	0x400204b8
    }
    else /* BDMA channel */
    {
      regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 80022c0:	687b      	ldr	r3, [r7, #4]
 80022c2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80022c4:	60fb      	str	r3, [r7, #12]
      regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 80022c6:	687b      	ldr	r3, [r7, #4]
 80022c8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80022ca:	f003 031f 	and.w	r3, r3, #31
 80022ce:	2201      	movs	r2, #1
 80022d0:	409a      	lsls	r2, r3
 80022d2:	68fb      	ldr	r3, [r7, #12]
 80022d4:	605a      	str	r2, [r3, #4]
    }

    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 80022d6:	687b      	ldr	r3, [r7, #4]
 80022d8:	681b      	ldr	r3, [r3, #0]
 80022da:	4a4f      	ldr	r2, [pc, #316]	; (8002418 <HAL_DMA_Abort+0x5dc>)
 80022dc:	4293      	cmp	r3, r2
 80022de:	d072      	beq.n	80023c6 <HAL_DMA_Abort+0x58a>
 80022e0:	687b      	ldr	r3, [r7, #4]
 80022e2:	681b      	ldr	r3, [r3, #0]
 80022e4:	4a4d      	ldr	r2, [pc, #308]	; (800241c <HAL_DMA_Abort+0x5e0>)
 80022e6:	4293      	cmp	r3, r2
 80022e8:	d06d      	beq.n	80023c6 <HAL_DMA_Abort+0x58a>
 80022ea:	687b      	ldr	r3, [r7, #4]
 80022ec:	681b      	ldr	r3, [r3, #0]
 80022ee:	4a4c      	ldr	r2, [pc, #304]	; (8002420 <HAL_DMA_Abort+0x5e4>)
 80022f0:	4293      	cmp	r3, r2
 80022f2:	d068      	beq.n	80023c6 <HAL_DMA_Abort+0x58a>
 80022f4:	687b      	ldr	r3, [r7, #4]
 80022f6:	681b      	ldr	r3, [r3, #0]
 80022f8:	4a4a      	ldr	r2, [pc, #296]	; (8002424 <HAL_DMA_Abort+0x5e8>)
 80022fa:	4293      	cmp	r3, r2
 80022fc:	d063      	beq.n	80023c6 <HAL_DMA_Abort+0x58a>
 80022fe:	687b      	ldr	r3, [r7, #4]
 8002300:	681b      	ldr	r3, [r3, #0]
 8002302:	4a49      	ldr	r2, [pc, #292]	; (8002428 <HAL_DMA_Abort+0x5ec>)
 8002304:	4293      	cmp	r3, r2
 8002306:	d05e      	beq.n	80023c6 <HAL_DMA_Abort+0x58a>
 8002308:	687b      	ldr	r3, [r7, #4]
 800230a:	681b      	ldr	r3, [r3, #0]
 800230c:	4a47      	ldr	r2, [pc, #284]	; (800242c <HAL_DMA_Abort+0x5f0>)
 800230e:	4293      	cmp	r3, r2
 8002310:	d059      	beq.n	80023c6 <HAL_DMA_Abort+0x58a>
 8002312:	687b      	ldr	r3, [r7, #4]
 8002314:	681b      	ldr	r3, [r3, #0]
 8002316:	4a46      	ldr	r2, [pc, #280]	; (8002430 <HAL_DMA_Abort+0x5f4>)
 8002318:	4293      	cmp	r3, r2
 800231a:	d054      	beq.n	80023c6 <HAL_DMA_Abort+0x58a>
 800231c:	687b      	ldr	r3, [r7, #4]
 800231e:	681b      	ldr	r3, [r3, #0]
 8002320:	4a44      	ldr	r2, [pc, #272]	; (8002434 <HAL_DMA_Abort+0x5f8>)
 8002322:	4293      	cmp	r3, r2
 8002324:	d04f      	beq.n	80023c6 <HAL_DMA_Abort+0x58a>
 8002326:	687b      	ldr	r3, [r7, #4]
 8002328:	681b      	ldr	r3, [r3, #0]
 800232a:	4a43      	ldr	r2, [pc, #268]	; (8002438 <HAL_DMA_Abort+0x5fc>)
 800232c:	4293      	cmp	r3, r2
 800232e:	d04a      	beq.n	80023c6 <HAL_DMA_Abort+0x58a>
 8002330:	687b      	ldr	r3, [r7, #4]
 8002332:	681b      	ldr	r3, [r3, #0]
 8002334:	4a41      	ldr	r2, [pc, #260]	; (800243c <HAL_DMA_Abort+0x600>)
 8002336:	4293      	cmp	r3, r2
 8002338:	d045      	beq.n	80023c6 <HAL_DMA_Abort+0x58a>
 800233a:	687b      	ldr	r3, [r7, #4]
 800233c:	681b      	ldr	r3, [r3, #0]
 800233e:	4a40      	ldr	r2, [pc, #256]	; (8002440 <HAL_DMA_Abort+0x604>)
 8002340:	4293      	cmp	r3, r2
 8002342:	d040      	beq.n	80023c6 <HAL_DMA_Abort+0x58a>
 8002344:	687b      	ldr	r3, [r7, #4]
 8002346:	681b      	ldr	r3, [r3, #0]
 8002348:	4a3e      	ldr	r2, [pc, #248]	; (8002444 <HAL_DMA_Abort+0x608>)
 800234a:	4293      	cmp	r3, r2
 800234c:	d03b      	beq.n	80023c6 <HAL_DMA_Abort+0x58a>
 800234e:	687b      	ldr	r3, [r7, #4]
 8002350:	681b      	ldr	r3, [r3, #0]
 8002352:	4a3d      	ldr	r2, [pc, #244]	; (8002448 <HAL_DMA_Abort+0x60c>)
 8002354:	4293      	cmp	r3, r2
 8002356:	d036      	beq.n	80023c6 <HAL_DMA_Abort+0x58a>
 8002358:	687b      	ldr	r3, [r7, #4]
 800235a:	681b      	ldr	r3, [r3, #0]
 800235c:	4a3b      	ldr	r2, [pc, #236]	; (800244c <HAL_DMA_Abort+0x610>)
 800235e:	4293      	cmp	r3, r2
 8002360:	d031      	beq.n	80023c6 <HAL_DMA_Abort+0x58a>
 8002362:	687b      	ldr	r3, [r7, #4]
 8002364:	681b      	ldr	r3, [r3, #0]
 8002366:	4a3a      	ldr	r2, [pc, #232]	; (8002450 <HAL_DMA_Abort+0x614>)
 8002368:	4293      	cmp	r3, r2
 800236a:	d02c      	beq.n	80023c6 <HAL_DMA_Abort+0x58a>
 800236c:	687b      	ldr	r3, [r7, #4]
 800236e:	681b      	ldr	r3, [r3, #0]
 8002370:	4a38      	ldr	r2, [pc, #224]	; (8002454 <HAL_DMA_Abort+0x618>)
 8002372:	4293      	cmp	r3, r2
 8002374:	d027      	beq.n	80023c6 <HAL_DMA_Abort+0x58a>
 8002376:	687b      	ldr	r3, [r7, #4]
 8002378:	681b      	ldr	r3, [r3, #0]
 800237a:	4a37      	ldr	r2, [pc, #220]	; (8002458 <HAL_DMA_Abort+0x61c>)
 800237c:	4293      	cmp	r3, r2
 800237e:	d022      	beq.n	80023c6 <HAL_DMA_Abort+0x58a>
 8002380:	687b      	ldr	r3, [r7, #4]
 8002382:	681b      	ldr	r3, [r3, #0]
 8002384:	4a35      	ldr	r2, [pc, #212]	; (800245c <HAL_DMA_Abort+0x620>)
 8002386:	4293      	cmp	r3, r2
 8002388:	d01d      	beq.n	80023c6 <HAL_DMA_Abort+0x58a>
 800238a:	687b      	ldr	r3, [r7, #4]
 800238c:	681b      	ldr	r3, [r3, #0]
 800238e:	4a34      	ldr	r2, [pc, #208]	; (8002460 <HAL_DMA_Abort+0x624>)
 8002390:	4293      	cmp	r3, r2
 8002392:	d018      	beq.n	80023c6 <HAL_DMA_Abort+0x58a>
 8002394:	687b      	ldr	r3, [r7, #4]
 8002396:	681b      	ldr	r3, [r3, #0]
 8002398:	4a32      	ldr	r2, [pc, #200]	; (8002464 <HAL_DMA_Abort+0x628>)
 800239a:	4293      	cmp	r3, r2
 800239c:	d013      	beq.n	80023c6 <HAL_DMA_Abort+0x58a>
 800239e:	687b      	ldr	r3, [r7, #4]
 80023a0:	681b      	ldr	r3, [r3, #0]
 80023a2:	4a31      	ldr	r2, [pc, #196]	; (8002468 <HAL_DMA_Abort+0x62c>)
 80023a4:	4293      	cmp	r3, r2
 80023a6:	d00e      	beq.n	80023c6 <HAL_DMA_Abort+0x58a>
 80023a8:	687b      	ldr	r3, [r7, #4]
 80023aa:	681b      	ldr	r3, [r3, #0]
 80023ac:	4a2f      	ldr	r2, [pc, #188]	; (800246c <HAL_DMA_Abort+0x630>)
 80023ae:	4293      	cmp	r3, r2
 80023b0:	d009      	beq.n	80023c6 <HAL_DMA_Abort+0x58a>
 80023b2:	687b      	ldr	r3, [r7, #4]
 80023b4:	681b      	ldr	r3, [r3, #0]
 80023b6:	4a2e      	ldr	r2, [pc, #184]	; (8002470 <HAL_DMA_Abort+0x634>)
 80023b8:	4293      	cmp	r3, r2
 80023ba:	d004      	beq.n	80023c6 <HAL_DMA_Abort+0x58a>
 80023bc:	687b      	ldr	r3, [r7, #4]
 80023be:	681b      	ldr	r3, [r3, #0]
 80023c0:	4a2c      	ldr	r2, [pc, #176]	; (8002474 <HAL_DMA_Abort+0x638>)
 80023c2:	4293      	cmp	r3, r2
 80023c4:	d101      	bne.n	80023ca <HAL_DMA_Abort+0x58e>
 80023c6:	2301      	movs	r3, #1
 80023c8:	e000      	b.n	80023cc <HAL_DMA_Abort+0x590>
 80023ca:	2300      	movs	r3, #0
 80023cc:	2b00      	cmp	r3, #0
 80023ce:	d015      	beq.n	80023fc <HAL_DMA_Abort+0x5c0>
    {
      /* Clear the DMAMUX synchro overrun flag */
      hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 80023d0:	687b      	ldr	r3, [r7, #4]
 80023d2:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80023d4:	687a      	ldr	r2, [r7, #4]
 80023d6:	6e92      	ldr	r2, [r2, #104]	; 0x68
 80023d8:	605a      	str	r2, [r3, #4]

      if(hdma->DMAmuxRequestGen != 0U)
 80023da:	687b      	ldr	r3, [r7, #4]
 80023dc:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80023de:	2b00      	cmp	r3, #0
 80023e0:	d00c      	beq.n	80023fc <HAL_DMA_Abort+0x5c0>
      {
        /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT */
        /* disable the request gen overrun IT */
        hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 80023e2:	687b      	ldr	r3, [r7, #4]
 80023e4:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80023e6:	681a      	ldr	r2, [r3, #0]
 80023e8:	687b      	ldr	r3, [r7, #4]
 80023ea:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80023ec:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80023f0:	601a      	str	r2, [r3, #0]

        /* Clear the DMAMUX request generator overrun flag */
        hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 80023f2:	687b      	ldr	r3, [r7, #4]
 80023f4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80023f6:	687a      	ldr	r2, [r7, #4]
 80023f8:	6f52      	ldr	r2, [r2, #116]	; 0x74
 80023fa:	605a      	str	r2, [r3, #4]
      }
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80023fc:	687b      	ldr	r3, [r7, #4]
 80023fe:	2201      	movs	r2, #1
 8002400:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002404:	687b      	ldr	r3, [r7, #4]
 8002406:	2200      	movs	r2, #0
 8002408:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  }

  return HAL_OK;
 800240c:	2300      	movs	r3, #0
}
 800240e:	4618      	mov	r0, r3
 8002410:	3718      	adds	r7, #24
 8002412:	46bd      	mov	sp, r7
 8002414:	bd80      	pop	{r7, pc}
 8002416:	bf00      	nop
 8002418:	40020010 	.word	0x40020010
 800241c:	40020028 	.word	0x40020028
 8002420:	40020040 	.word	0x40020040
 8002424:	40020058 	.word	0x40020058
 8002428:	40020070 	.word	0x40020070
 800242c:	40020088 	.word	0x40020088
 8002430:	400200a0 	.word	0x400200a0
 8002434:	400200b8 	.word	0x400200b8
 8002438:	40020410 	.word	0x40020410
 800243c:	40020428 	.word	0x40020428
 8002440:	40020440 	.word	0x40020440
 8002444:	40020458 	.word	0x40020458
 8002448:	40020470 	.word	0x40020470
 800244c:	40020488 	.word	0x40020488
 8002450:	400204a0 	.word	0x400204a0
 8002454:	400204b8 	.word	0x400204b8
 8002458:	58025408 	.word	0x58025408
 800245c:	5802541c 	.word	0x5802541c
 8002460:	58025430 	.word	0x58025430
 8002464:	58025444 	.word	0x58025444
 8002468:	58025458 	.word	0x58025458
 800246c:	5802546c 	.word	0x5802546c
 8002470:	58025480 	.word	0x58025480
 8002474:	58025494 	.word	0x58025494

08002478 <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8002478:	b580      	push	{r7, lr}
 800247a:	b084      	sub	sp, #16
 800247c:	af00      	add	r7, sp, #0
 800247e:	6078      	str	r0, [r7, #4]
  BDMA_Base_Registers *regs_bdma;

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 8002480:	687b      	ldr	r3, [r7, #4]
 8002482:	2b00      	cmp	r3, #0
 8002484:	d101      	bne.n	800248a <HAL_DMA_Abort_IT+0x12>
  {
    return HAL_ERROR;
 8002486:	2301      	movs	r3, #1
 8002488:	e237      	b.n	80028fa <HAL_DMA_Abort_IT+0x482>
  }

  if(hdma->State != HAL_DMA_STATE_BUSY)
 800248a:	687b      	ldr	r3, [r7, #4]
 800248c:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8002490:	b2db      	uxtb	r3, r3
 8002492:	2b02      	cmp	r3, #2
 8002494:	d004      	beq.n	80024a0 <HAL_DMA_Abort_IT+0x28>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002496:	687b      	ldr	r3, [r7, #4]
 8002498:	2280      	movs	r2, #128	; 0x80
 800249a:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 800249c:	2301      	movs	r3, #1
 800249e:	e22c      	b.n	80028fa <HAL_DMA_Abort_IT+0x482>
  }
  else
  {
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 80024a0:	687b      	ldr	r3, [r7, #4]
 80024a2:	681b      	ldr	r3, [r3, #0]
 80024a4:	4a5c      	ldr	r2, [pc, #368]	; (8002618 <HAL_DMA_Abort_IT+0x1a0>)
 80024a6:	4293      	cmp	r3, r2
 80024a8:	d04a      	beq.n	8002540 <HAL_DMA_Abort_IT+0xc8>
 80024aa:	687b      	ldr	r3, [r7, #4]
 80024ac:	681b      	ldr	r3, [r3, #0]
 80024ae:	4a5b      	ldr	r2, [pc, #364]	; (800261c <HAL_DMA_Abort_IT+0x1a4>)
 80024b0:	4293      	cmp	r3, r2
 80024b2:	d045      	beq.n	8002540 <HAL_DMA_Abort_IT+0xc8>
 80024b4:	687b      	ldr	r3, [r7, #4]
 80024b6:	681b      	ldr	r3, [r3, #0]
 80024b8:	4a59      	ldr	r2, [pc, #356]	; (8002620 <HAL_DMA_Abort_IT+0x1a8>)
 80024ba:	4293      	cmp	r3, r2
 80024bc:	d040      	beq.n	8002540 <HAL_DMA_Abort_IT+0xc8>
 80024be:	687b      	ldr	r3, [r7, #4]
 80024c0:	681b      	ldr	r3, [r3, #0]
 80024c2:	4a58      	ldr	r2, [pc, #352]	; (8002624 <HAL_DMA_Abort_IT+0x1ac>)
 80024c4:	4293      	cmp	r3, r2
 80024c6:	d03b      	beq.n	8002540 <HAL_DMA_Abort_IT+0xc8>
 80024c8:	687b      	ldr	r3, [r7, #4]
 80024ca:	681b      	ldr	r3, [r3, #0]
 80024cc:	4a56      	ldr	r2, [pc, #344]	; (8002628 <HAL_DMA_Abort_IT+0x1b0>)
 80024ce:	4293      	cmp	r3, r2
 80024d0:	d036      	beq.n	8002540 <HAL_DMA_Abort_IT+0xc8>
 80024d2:	687b      	ldr	r3, [r7, #4]
 80024d4:	681b      	ldr	r3, [r3, #0]
 80024d6:	4a55      	ldr	r2, [pc, #340]	; (800262c <HAL_DMA_Abort_IT+0x1b4>)
 80024d8:	4293      	cmp	r3, r2
 80024da:	d031      	beq.n	8002540 <HAL_DMA_Abort_IT+0xc8>
 80024dc:	687b      	ldr	r3, [r7, #4]
 80024de:	681b      	ldr	r3, [r3, #0]
 80024e0:	4a53      	ldr	r2, [pc, #332]	; (8002630 <HAL_DMA_Abort_IT+0x1b8>)
 80024e2:	4293      	cmp	r3, r2
 80024e4:	d02c      	beq.n	8002540 <HAL_DMA_Abort_IT+0xc8>
 80024e6:	687b      	ldr	r3, [r7, #4]
 80024e8:	681b      	ldr	r3, [r3, #0]
 80024ea:	4a52      	ldr	r2, [pc, #328]	; (8002634 <HAL_DMA_Abort_IT+0x1bc>)
 80024ec:	4293      	cmp	r3, r2
 80024ee:	d027      	beq.n	8002540 <HAL_DMA_Abort_IT+0xc8>
 80024f0:	687b      	ldr	r3, [r7, #4]
 80024f2:	681b      	ldr	r3, [r3, #0]
 80024f4:	4a50      	ldr	r2, [pc, #320]	; (8002638 <HAL_DMA_Abort_IT+0x1c0>)
 80024f6:	4293      	cmp	r3, r2
 80024f8:	d022      	beq.n	8002540 <HAL_DMA_Abort_IT+0xc8>
 80024fa:	687b      	ldr	r3, [r7, #4]
 80024fc:	681b      	ldr	r3, [r3, #0]
 80024fe:	4a4f      	ldr	r2, [pc, #316]	; (800263c <HAL_DMA_Abort_IT+0x1c4>)
 8002500:	4293      	cmp	r3, r2
 8002502:	d01d      	beq.n	8002540 <HAL_DMA_Abort_IT+0xc8>
 8002504:	687b      	ldr	r3, [r7, #4]
 8002506:	681b      	ldr	r3, [r3, #0]
 8002508:	4a4d      	ldr	r2, [pc, #308]	; (8002640 <HAL_DMA_Abort_IT+0x1c8>)
 800250a:	4293      	cmp	r3, r2
 800250c:	d018      	beq.n	8002540 <HAL_DMA_Abort_IT+0xc8>
 800250e:	687b      	ldr	r3, [r7, #4]
 8002510:	681b      	ldr	r3, [r3, #0]
 8002512:	4a4c      	ldr	r2, [pc, #304]	; (8002644 <HAL_DMA_Abort_IT+0x1cc>)
 8002514:	4293      	cmp	r3, r2
 8002516:	d013      	beq.n	8002540 <HAL_DMA_Abort_IT+0xc8>
 8002518:	687b      	ldr	r3, [r7, #4]
 800251a:	681b      	ldr	r3, [r3, #0]
 800251c:	4a4a      	ldr	r2, [pc, #296]	; (8002648 <HAL_DMA_Abort_IT+0x1d0>)
 800251e:	4293      	cmp	r3, r2
 8002520:	d00e      	beq.n	8002540 <HAL_DMA_Abort_IT+0xc8>
 8002522:	687b      	ldr	r3, [r7, #4]
 8002524:	681b      	ldr	r3, [r3, #0]
 8002526:	4a49      	ldr	r2, [pc, #292]	; (800264c <HAL_DMA_Abort_IT+0x1d4>)
 8002528:	4293      	cmp	r3, r2
 800252a:	d009      	beq.n	8002540 <HAL_DMA_Abort_IT+0xc8>
 800252c:	687b      	ldr	r3, [r7, #4]
 800252e:	681b      	ldr	r3, [r3, #0]
 8002530:	4a47      	ldr	r2, [pc, #284]	; (8002650 <HAL_DMA_Abort_IT+0x1d8>)
 8002532:	4293      	cmp	r3, r2
 8002534:	d004      	beq.n	8002540 <HAL_DMA_Abort_IT+0xc8>
 8002536:	687b      	ldr	r3, [r7, #4]
 8002538:	681b      	ldr	r3, [r3, #0]
 800253a:	4a46      	ldr	r2, [pc, #280]	; (8002654 <HAL_DMA_Abort_IT+0x1dc>)
 800253c:	4293      	cmp	r3, r2
 800253e:	d101      	bne.n	8002544 <HAL_DMA_Abort_IT+0xcc>
 8002540:	2301      	movs	r3, #1
 8002542:	e000      	b.n	8002546 <HAL_DMA_Abort_IT+0xce>
 8002544:	2300      	movs	r3, #0
 8002546:	2b00      	cmp	r3, #0
 8002548:	f000 8086 	beq.w	8002658 <HAL_DMA_Abort_IT+0x1e0>
    {
      /* Set Abort State  */
      hdma->State = HAL_DMA_STATE_ABORT;
 800254c:	687b      	ldr	r3, [r7, #4]
 800254e:	2204      	movs	r2, #4
 8002550:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8002554:	687b      	ldr	r3, [r7, #4]
 8002556:	681b      	ldr	r3, [r3, #0]
 8002558:	4a2f      	ldr	r2, [pc, #188]	; (8002618 <HAL_DMA_Abort_IT+0x1a0>)
 800255a:	4293      	cmp	r3, r2
 800255c:	d04a      	beq.n	80025f4 <HAL_DMA_Abort_IT+0x17c>
 800255e:	687b      	ldr	r3, [r7, #4]
 8002560:	681b      	ldr	r3, [r3, #0]
 8002562:	4a2e      	ldr	r2, [pc, #184]	; (800261c <HAL_DMA_Abort_IT+0x1a4>)
 8002564:	4293      	cmp	r3, r2
 8002566:	d045      	beq.n	80025f4 <HAL_DMA_Abort_IT+0x17c>
 8002568:	687b      	ldr	r3, [r7, #4]
 800256a:	681b      	ldr	r3, [r3, #0]
 800256c:	4a2c      	ldr	r2, [pc, #176]	; (8002620 <HAL_DMA_Abort_IT+0x1a8>)
 800256e:	4293      	cmp	r3, r2
 8002570:	d040      	beq.n	80025f4 <HAL_DMA_Abort_IT+0x17c>
 8002572:	687b      	ldr	r3, [r7, #4]
 8002574:	681b      	ldr	r3, [r3, #0]
 8002576:	4a2b      	ldr	r2, [pc, #172]	; (8002624 <HAL_DMA_Abort_IT+0x1ac>)
 8002578:	4293      	cmp	r3, r2
 800257a:	d03b      	beq.n	80025f4 <HAL_DMA_Abort_IT+0x17c>
 800257c:	687b      	ldr	r3, [r7, #4]
 800257e:	681b      	ldr	r3, [r3, #0]
 8002580:	4a29      	ldr	r2, [pc, #164]	; (8002628 <HAL_DMA_Abort_IT+0x1b0>)
 8002582:	4293      	cmp	r3, r2
 8002584:	d036      	beq.n	80025f4 <HAL_DMA_Abort_IT+0x17c>
 8002586:	687b      	ldr	r3, [r7, #4]
 8002588:	681b      	ldr	r3, [r3, #0]
 800258a:	4a28      	ldr	r2, [pc, #160]	; (800262c <HAL_DMA_Abort_IT+0x1b4>)
 800258c:	4293      	cmp	r3, r2
 800258e:	d031      	beq.n	80025f4 <HAL_DMA_Abort_IT+0x17c>
 8002590:	687b      	ldr	r3, [r7, #4]
 8002592:	681b      	ldr	r3, [r3, #0]
 8002594:	4a26      	ldr	r2, [pc, #152]	; (8002630 <HAL_DMA_Abort_IT+0x1b8>)
 8002596:	4293      	cmp	r3, r2
 8002598:	d02c      	beq.n	80025f4 <HAL_DMA_Abort_IT+0x17c>
 800259a:	687b      	ldr	r3, [r7, #4]
 800259c:	681b      	ldr	r3, [r3, #0]
 800259e:	4a25      	ldr	r2, [pc, #148]	; (8002634 <HAL_DMA_Abort_IT+0x1bc>)
 80025a0:	4293      	cmp	r3, r2
 80025a2:	d027      	beq.n	80025f4 <HAL_DMA_Abort_IT+0x17c>
 80025a4:	687b      	ldr	r3, [r7, #4]
 80025a6:	681b      	ldr	r3, [r3, #0]
 80025a8:	4a23      	ldr	r2, [pc, #140]	; (8002638 <HAL_DMA_Abort_IT+0x1c0>)
 80025aa:	4293      	cmp	r3, r2
 80025ac:	d022      	beq.n	80025f4 <HAL_DMA_Abort_IT+0x17c>
 80025ae:	687b      	ldr	r3, [r7, #4]
 80025b0:	681b      	ldr	r3, [r3, #0]
 80025b2:	4a22      	ldr	r2, [pc, #136]	; (800263c <HAL_DMA_Abort_IT+0x1c4>)
 80025b4:	4293      	cmp	r3, r2
 80025b6:	d01d      	beq.n	80025f4 <HAL_DMA_Abort_IT+0x17c>
 80025b8:	687b      	ldr	r3, [r7, #4]
 80025ba:	681b      	ldr	r3, [r3, #0]
 80025bc:	4a20      	ldr	r2, [pc, #128]	; (8002640 <HAL_DMA_Abort_IT+0x1c8>)
 80025be:	4293      	cmp	r3, r2
 80025c0:	d018      	beq.n	80025f4 <HAL_DMA_Abort_IT+0x17c>
 80025c2:	687b      	ldr	r3, [r7, #4]
 80025c4:	681b      	ldr	r3, [r3, #0]
 80025c6:	4a1f      	ldr	r2, [pc, #124]	; (8002644 <HAL_DMA_Abort_IT+0x1cc>)
 80025c8:	4293      	cmp	r3, r2
 80025ca:	d013      	beq.n	80025f4 <HAL_DMA_Abort_IT+0x17c>
 80025cc:	687b      	ldr	r3, [r7, #4]
 80025ce:	681b      	ldr	r3, [r3, #0]
 80025d0:	4a1d      	ldr	r2, [pc, #116]	; (8002648 <HAL_DMA_Abort_IT+0x1d0>)
 80025d2:	4293      	cmp	r3, r2
 80025d4:	d00e      	beq.n	80025f4 <HAL_DMA_Abort_IT+0x17c>
 80025d6:	687b      	ldr	r3, [r7, #4]
 80025d8:	681b      	ldr	r3, [r3, #0]
 80025da:	4a1c      	ldr	r2, [pc, #112]	; (800264c <HAL_DMA_Abort_IT+0x1d4>)
 80025dc:	4293      	cmp	r3, r2
 80025de:	d009      	beq.n	80025f4 <HAL_DMA_Abort_IT+0x17c>
 80025e0:	687b      	ldr	r3, [r7, #4]
 80025e2:	681b      	ldr	r3, [r3, #0]
 80025e4:	4a1a      	ldr	r2, [pc, #104]	; (8002650 <HAL_DMA_Abort_IT+0x1d8>)
 80025e6:	4293      	cmp	r3, r2
 80025e8:	d004      	beq.n	80025f4 <HAL_DMA_Abort_IT+0x17c>
 80025ea:	687b      	ldr	r3, [r7, #4]
 80025ec:	681b      	ldr	r3, [r3, #0]
 80025ee:	4a19      	ldr	r2, [pc, #100]	; (8002654 <HAL_DMA_Abort_IT+0x1dc>)
 80025f0:	4293      	cmp	r3, r2
 80025f2:	d108      	bne.n	8002606 <HAL_DMA_Abort_IT+0x18e>
 80025f4:	687b      	ldr	r3, [r7, #4]
 80025f6:	681b      	ldr	r3, [r3, #0]
 80025f8:	681a      	ldr	r2, [r3, #0]
 80025fa:	687b      	ldr	r3, [r7, #4]
 80025fc:	681b      	ldr	r3, [r3, #0]
 80025fe:	f022 0201 	bic.w	r2, r2, #1
 8002602:	601a      	str	r2, [r3, #0]
 8002604:	e178      	b.n	80028f8 <HAL_DMA_Abort_IT+0x480>
 8002606:	687b      	ldr	r3, [r7, #4]
 8002608:	681b      	ldr	r3, [r3, #0]
 800260a:	681a      	ldr	r2, [r3, #0]
 800260c:	687b      	ldr	r3, [r7, #4]
 800260e:	681b      	ldr	r3, [r3, #0]
 8002610:	f022 0201 	bic.w	r2, r2, #1
 8002614:	601a      	str	r2, [r3, #0]
 8002616:	e16f      	b.n	80028f8 <HAL_DMA_Abort_IT+0x480>
 8002618:	40020010 	.word	0x40020010
 800261c:	40020028 	.word	0x40020028
 8002620:	40020040 	.word	0x40020040
 8002624:	40020058 	.word	0x40020058
 8002628:	40020070 	.word	0x40020070
 800262c:	40020088 	.word	0x40020088
 8002630:	400200a0 	.word	0x400200a0
 8002634:	400200b8 	.word	0x400200b8
 8002638:	40020410 	.word	0x40020410
 800263c:	40020428 	.word	0x40020428
 8002640:	40020440 	.word	0x40020440
 8002644:	40020458 	.word	0x40020458
 8002648:	40020470 	.word	0x40020470
 800264c:	40020488 	.word	0x40020488
 8002650:	400204a0 	.word	0x400204a0
 8002654:	400204b8 	.word	0x400204b8
    }
    else /* BDMA channel */
    {
      /* Disable DMA All Interrupts  */
      ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  &= ~(BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE);
 8002658:	687b      	ldr	r3, [r7, #4]
 800265a:	681b      	ldr	r3, [r3, #0]
 800265c:	681a      	ldr	r2, [r3, #0]
 800265e:	687b      	ldr	r3, [r7, #4]
 8002660:	681b      	ldr	r3, [r3, #0]
 8002662:	f022 020e 	bic.w	r2, r2, #14
 8002666:	601a      	str	r2, [r3, #0]

      /* Disable the channel */
      __HAL_DMA_DISABLE(hdma);
 8002668:	687b      	ldr	r3, [r7, #4]
 800266a:	681b      	ldr	r3, [r3, #0]
 800266c:	4a6c      	ldr	r2, [pc, #432]	; (8002820 <HAL_DMA_Abort_IT+0x3a8>)
 800266e:	4293      	cmp	r3, r2
 8002670:	d04a      	beq.n	8002708 <HAL_DMA_Abort_IT+0x290>
 8002672:	687b      	ldr	r3, [r7, #4]
 8002674:	681b      	ldr	r3, [r3, #0]
 8002676:	4a6b      	ldr	r2, [pc, #428]	; (8002824 <HAL_DMA_Abort_IT+0x3ac>)
 8002678:	4293      	cmp	r3, r2
 800267a:	d045      	beq.n	8002708 <HAL_DMA_Abort_IT+0x290>
 800267c:	687b      	ldr	r3, [r7, #4]
 800267e:	681b      	ldr	r3, [r3, #0]
 8002680:	4a69      	ldr	r2, [pc, #420]	; (8002828 <HAL_DMA_Abort_IT+0x3b0>)
 8002682:	4293      	cmp	r3, r2
 8002684:	d040      	beq.n	8002708 <HAL_DMA_Abort_IT+0x290>
 8002686:	687b      	ldr	r3, [r7, #4]
 8002688:	681b      	ldr	r3, [r3, #0]
 800268a:	4a68      	ldr	r2, [pc, #416]	; (800282c <HAL_DMA_Abort_IT+0x3b4>)
 800268c:	4293      	cmp	r3, r2
 800268e:	d03b      	beq.n	8002708 <HAL_DMA_Abort_IT+0x290>
 8002690:	687b      	ldr	r3, [r7, #4]
 8002692:	681b      	ldr	r3, [r3, #0]
 8002694:	4a66      	ldr	r2, [pc, #408]	; (8002830 <HAL_DMA_Abort_IT+0x3b8>)
 8002696:	4293      	cmp	r3, r2
 8002698:	d036      	beq.n	8002708 <HAL_DMA_Abort_IT+0x290>
 800269a:	687b      	ldr	r3, [r7, #4]
 800269c:	681b      	ldr	r3, [r3, #0]
 800269e:	4a65      	ldr	r2, [pc, #404]	; (8002834 <HAL_DMA_Abort_IT+0x3bc>)
 80026a0:	4293      	cmp	r3, r2
 80026a2:	d031      	beq.n	8002708 <HAL_DMA_Abort_IT+0x290>
 80026a4:	687b      	ldr	r3, [r7, #4]
 80026a6:	681b      	ldr	r3, [r3, #0]
 80026a8:	4a63      	ldr	r2, [pc, #396]	; (8002838 <HAL_DMA_Abort_IT+0x3c0>)
 80026aa:	4293      	cmp	r3, r2
 80026ac:	d02c      	beq.n	8002708 <HAL_DMA_Abort_IT+0x290>
 80026ae:	687b      	ldr	r3, [r7, #4]
 80026b0:	681b      	ldr	r3, [r3, #0]
 80026b2:	4a62      	ldr	r2, [pc, #392]	; (800283c <HAL_DMA_Abort_IT+0x3c4>)
 80026b4:	4293      	cmp	r3, r2
 80026b6:	d027      	beq.n	8002708 <HAL_DMA_Abort_IT+0x290>
 80026b8:	687b      	ldr	r3, [r7, #4]
 80026ba:	681b      	ldr	r3, [r3, #0]
 80026bc:	4a60      	ldr	r2, [pc, #384]	; (8002840 <HAL_DMA_Abort_IT+0x3c8>)
 80026be:	4293      	cmp	r3, r2
 80026c0:	d022      	beq.n	8002708 <HAL_DMA_Abort_IT+0x290>
 80026c2:	687b      	ldr	r3, [r7, #4]
 80026c4:	681b      	ldr	r3, [r3, #0]
 80026c6:	4a5f      	ldr	r2, [pc, #380]	; (8002844 <HAL_DMA_Abort_IT+0x3cc>)
 80026c8:	4293      	cmp	r3, r2
 80026ca:	d01d      	beq.n	8002708 <HAL_DMA_Abort_IT+0x290>
 80026cc:	687b      	ldr	r3, [r7, #4]
 80026ce:	681b      	ldr	r3, [r3, #0]
 80026d0:	4a5d      	ldr	r2, [pc, #372]	; (8002848 <HAL_DMA_Abort_IT+0x3d0>)
 80026d2:	4293      	cmp	r3, r2
 80026d4:	d018      	beq.n	8002708 <HAL_DMA_Abort_IT+0x290>
 80026d6:	687b      	ldr	r3, [r7, #4]
 80026d8:	681b      	ldr	r3, [r3, #0]
 80026da:	4a5c      	ldr	r2, [pc, #368]	; (800284c <HAL_DMA_Abort_IT+0x3d4>)
 80026dc:	4293      	cmp	r3, r2
 80026de:	d013      	beq.n	8002708 <HAL_DMA_Abort_IT+0x290>
 80026e0:	687b      	ldr	r3, [r7, #4]
 80026e2:	681b      	ldr	r3, [r3, #0]
 80026e4:	4a5a      	ldr	r2, [pc, #360]	; (8002850 <HAL_DMA_Abort_IT+0x3d8>)
 80026e6:	4293      	cmp	r3, r2
 80026e8:	d00e      	beq.n	8002708 <HAL_DMA_Abort_IT+0x290>
 80026ea:	687b      	ldr	r3, [r7, #4]
 80026ec:	681b      	ldr	r3, [r3, #0]
 80026ee:	4a59      	ldr	r2, [pc, #356]	; (8002854 <HAL_DMA_Abort_IT+0x3dc>)
 80026f0:	4293      	cmp	r3, r2
 80026f2:	d009      	beq.n	8002708 <HAL_DMA_Abort_IT+0x290>
 80026f4:	687b      	ldr	r3, [r7, #4]
 80026f6:	681b      	ldr	r3, [r3, #0]
 80026f8:	4a57      	ldr	r2, [pc, #348]	; (8002858 <HAL_DMA_Abort_IT+0x3e0>)
 80026fa:	4293      	cmp	r3, r2
 80026fc:	d004      	beq.n	8002708 <HAL_DMA_Abort_IT+0x290>
 80026fe:	687b      	ldr	r3, [r7, #4]
 8002700:	681b      	ldr	r3, [r3, #0]
 8002702:	4a56      	ldr	r2, [pc, #344]	; (800285c <HAL_DMA_Abort_IT+0x3e4>)
 8002704:	4293      	cmp	r3, r2
 8002706:	d108      	bne.n	800271a <HAL_DMA_Abort_IT+0x2a2>
 8002708:	687b      	ldr	r3, [r7, #4]
 800270a:	681b      	ldr	r3, [r3, #0]
 800270c:	681a      	ldr	r2, [r3, #0]
 800270e:	687b      	ldr	r3, [r7, #4]
 8002710:	681b      	ldr	r3, [r3, #0]
 8002712:	f022 0201 	bic.w	r2, r2, #1
 8002716:	601a      	str	r2, [r3, #0]
 8002718:	e007      	b.n	800272a <HAL_DMA_Abort_IT+0x2b2>
 800271a:	687b      	ldr	r3, [r7, #4]
 800271c:	681b      	ldr	r3, [r3, #0]
 800271e:	681a      	ldr	r2, [r3, #0]
 8002720:	687b      	ldr	r3, [r7, #4]
 8002722:	681b      	ldr	r3, [r3, #0]
 8002724:	f022 0201 	bic.w	r2, r2, #1
 8002728:	601a      	str	r2, [r3, #0]

      if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 800272a:	687b      	ldr	r3, [r7, #4]
 800272c:	681b      	ldr	r3, [r3, #0]
 800272e:	4a3c      	ldr	r2, [pc, #240]	; (8002820 <HAL_DMA_Abort_IT+0x3a8>)
 8002730:	4293      	cmp	r3, r2
 8002732:	d072      	beq.n	800281a <HAL_DMA_Abort_IT+0x3a2>
 8002734:	687b      	ldr	r3, [r7, #4]
 8002736:	681b      	ldr	r3, [r3, #0]
 8002738:	4a3a      	ldr	r2, [pc, #232]	; (8002824 <HAL_DMA_Abort_IT+0x3ac>)
 800273a:	4293      	cmp	r3, r2
 800273c:	d06d      	beq.n	800281a <HAL_DMA_Abort_IT+0x3a2>
 800273e:	687b      	ldr	r3, [r7, #4]
 8002740:	681b      	ldr	r3, [r3, #0]
 8002742:	4a39      	ldr	r2, [pc, #228]	; (8002828 <HAL_DMA_Abort_IT+0x3b0>)
 8002744:	4293      	cmp	r3, r2
 8002746:	d068      	beq.n	800281a <HAL_DMA_Abort_IT+0x3a2>
 8002748:	687b      	ldr	r3, [r7, #4]
 800274a:	681b      	ldr	r3, [r3, #0]
 800274c:	4a37      	ldr	r2, [pc, #220]	; (800282c <HAL_DMA_Abort_IT+0x3b4>)
 800274e:	4293      	cmp	r3, r2
 8002750:	d063      	beq.n	800281a <HAL_DMA_Abort_IT+0x3a2>
 8002752:	687b      	ldr	r3, [r7, #4]
 8002754:	681b      	ldr	r3, [r3, #0]
 8002756:	4a36      	ldr	r2, [pc, #216]	; (8002830 <HAL_DMA_Abort_IT+0x3b8>)
 8002758:	4293      	cmp	r3, r2
 800275a:	d05e      	beq.n	800281a <HAL_DMA_Abort_IT+0x3a2>
 800275c:	687b      	ldr	r3, [r7, #4]
 800275e:	681b      	ldr	r3, [r3, #0]
 8002760:	4a34      	ldr	r2, [pc, #208]	; (8002834 <HAL_DMA_Abort_IT+0x3bc>)
 8002762:	4293      	cmp	r3, r2
 8002764:	d059      	beq.n	800281a <HAL_DMA_Abort_IT+0x3a2>
 8002766:	687b      	ldr	r3, [r7, #4]
 8002768:	681b      	ldr	r3, [r3, #0]
 800276a:	4a33      	ldr	r2, [pc, #204]	; (8002838 <HAL_DMA_Abort_IT+0x3c0>)
 800276c:	4293      	cmp	r3, r2
 800276e:	d054      	beq.n	800281a <HAL_DMA_Abort_IT+0x3a2>
 8002770:	687b      	ldr	r3, [r7, #4]
 8002772:	681b      	ldr	r3, [r3, #0]
 8002774:	4a31      	ldr	r2, [pc, #196]	; (800283c <HAL_DMA_Abort_IT+0x3c4>)
 8002776:	4293      	cmp	r3, r2
 8002778:	d04f      	beq.n	800281a <HAL_DMA_Abort_IT+0x3a2>
 800277a:	687b      	ldr	r3, [r7, #4]
 800277c:	681b      	ldr	r3, [r3, #0]
 800277e:	4a30      	ldr	r2, [pc, #192]	; (8002840 <HAL_DMA_Abort_IT+0x3c8>)
 8002780:	4293      	cmp	r3, r2
 8002782:	d04a      	beq.n	800281a <HAL_DMA_Abort_IT+0x3a2>
 8002784:	687b      	ldr	r3, [r7, #4]
 8002786:	681b      	ldr	r3, [r3, #0]
 8002788:	4a2e      	ldr	r2, [pc, #184]	; (8002844 <HAL_DMA_Abort_IT+0x3cc>)
 800278a:	4293      	cmp	r3, r2
 800278c:	d045      	beq.n	800281a <HAL_DMA_Abort_IT+0x3a2>
 800278e:	687b      	ldr	r3, [r7, #4]
 8002790:	681b      	ldr	r3, [r3, #0]
 8002792:	4a2d      	ldr	r2, [pc, #180]	; (8002848 <HAL_DMA_Abort_IT+0x3d0>)
 8002794:	4293      	cmp	r3, r2
 8002796:	d040      	beq.n	800281a <HAL_DMA_Abort_IT+0x3a2>
 8002798:	687b      	ldr	r3, [r7, #4]
 800279a:	681b      	ldr	r3, [r3, #0]
 800279c:	4a2b      	ldr	r2, [pc, #172]	; (800284c <HAL_DMA_Abort_IT+0x3d4>)
 800279e:	4293      	cmp	r3, r2
 80027a0:	d03b      	beq.n	800281a <HAL_DMA_Abort_IT+0x3a2>
 80027a2:	687b      	ldr	r3, [r7, #4]
 80027a4:	681b      	ldr	r3, [r3, #0]
 80027a6:	4a2a      	ldr	r2, [pc, #168]	; (8002850 <HAL_DMA_Abort_IT+0x3d8>)
 80027a8:	4293      	cmp	r3, r2
 80027aa:	d036      	beq.n	800281a <HAL_DMA_Abort_IT+0x3a2>
 80027ac:	687b      	ldr	r3, [r7, #4]
 80027ae:	681b      	ldr	r3, [r3, #0]
 80027b0:	4a28      	ldr	r2, [pc, #160]	; (8002854 <HAL_DMA_Abort_IT+0x3dc>)
 80027b2:	4293      	cmp	r3, r2
 80027b4:	d031      	beq.n	800281a <HAL_DMA_Abort_IT+0x3a2>
 80027b6:	687b      	ldr	r3, [r7, #4]
 80027b8:	681b      	ldr	r3, [r3, #0]
 80027ba:	4a27      	ldr	r2, [pc, #156]	; (8002858 <HAL_DMA_Abort_IT+0x3e0>)
 80027bc:	4293      	cmp	r3, r2
 80027be:	d02c      	beq.n	800281a <HAL_DMA_Abort_IT+0x3a2>
 80027c0:	687b      	ldr	r3, [r7, #4]
 80027c2:	681b      	ldr	r3, [r3, #0]
 80027c4:	4a25      	ldr	r2, [pc, #148]	; (800285c <HAL_DMA_Abort_IT+0x3e4>)
 80027c6:	4293      	cmp	r3, r2
 80027c8:	d027      	beq.n	800281a <HAL_DMA_Abort_IT+0x3a2>
 80027ca:	687b      	ldr	r3, [r7, #4]
 80027cc:	681b      	ldr	r3, [r3, #0]
 80027ce:	4a24      	ldr	r2, [pc, #144]	; (8002860 <HAL_DMA_Abort_IT+0x3e8>)
 80027d0:	4293      	cmp	r3, r2
 80027d2:	d022      	beq.n	800281a <HAL_DMA_Abort_IT+0x3a2>
 80027d4:	687b      	ldr	r3, [r7, #4]
 80027d6:	681b      	ldr	r3, [r3, #0]
 80027d8:	4a22      	ldr	r2, [pc, #136]	; (8002864 <HAL_DMA_Abort_IT+0x3ec>)
 80027da:	4293      	cmp	r3, r2
 80027dc:	d01d      	beq.n	800281a <HAL_DMA_Abort_IT+0x3a2>
 80027de:	687b      	ldr	r3, [r7, #4]
 80027e0:	681b      	ldr	r3, [r3, #0]
 80027e2:	4a21      	ldr	r2, [pc, #132]	; (8002868 <HAL_DMA_Abort_IT+0x3f0>)
 80027e4:	4293      	cmp	r3, r2
 80027e6:	d018      	beq.n	800281a <HAL_DMA_Abort_IT+0x3a2>
 80027e8:	687b      	ldr	r3, [r7, #4]
 80027ea:	681b      	ldr	r3, [r3, #0]
 80027ec:	4a1f      	ldr	r2, [pc, #124]	; (800286c <HAL_DMA_Abort_IT+0x3f4>)
 80027ee:	4293      	cmp	r3, r2
 80027f0:	d013      	beq.n	800281a <HAL_DMA_Abort_IT+0x3a2>
 80027f2:	687b      	ldr	r3, [r7, #4]
 80027f4:	681b      	ldr	r3, [r3, #0]
 80027f6:	4a1e      	ldr	r2, [pc, #120]	; (8002870 <HAL_DMA_Abort_IT+0x3f8>)
 80027f8:	4293      	cmp	r3, r2
 80027fa:	d00e      	beq.n	800281a <HAL_DMA_Abort_IT+0x3a2>
 80027fc:	687b      	ldr	r3, [r7, #4]
 80027fe:	681b      	ldr	r3, [r3, #0]
 8002800:	4a1c      	ldr	r2, [pc, #112]	; (8002874 <HAL_DMA_Abort_IT+0x3fc>)
 8002802:	4293      	cmp	r3, r2
 8002804:	d009      	beq.n	800281a <HAL_DMA_Abort_IT+0x3a2>
 8002806:	687b      	ldr	r3, [r7, #4]
 8002808:	681b      	ldr	r3, [r3, #0]
 800280a:	4a1b      	ldr	r2, [pc, #108]	; (8002878 <HAL_DMA_Abort_IT+0x400>)
 800280c:	4293      	cmp	r3, r2
 800280e:	d004      	beq.n	800281a <HAL_DMA_Abort_IT+0x3a2>
 8002810:	687b      	ldr	r3, [r7, #4]
 8002812:	681b      	ldr	r3, [r3, #0]
 8002814:	4a19      	ldr	r2, [pc, #100]	; (800287c <HAL_DMA_Abort_IT+0x404>)
 8002816:	4293      	cmp	r3, r2
 8002818:	d132      	bne.n	8002880 <HAL_DMA_Abort_IT+0x408>
 800281a:	2301      	movs	r3, #1
 800281c:	e031      	b.n	8002882 <HAL_DMA_Abort_IT+0x40a>
 800281e:	bf00      	nop
 8002820:	40020010 	.word	0x40020010
 8002824:	40020028 	.word	0x40020028
 8002828:	40020040 	.word	0x40020040
 800282c:	40020058 	.word	0x40020058
 8002830:	40020070 	.word	0x40020070
 8002834:	40020088 	.word	0x40020088
 8002838:	400200a0 	.word	0x400200a0
 800283c:	400200b8 	.word	0x400200b8
 8002840:	40020410 	.word	0x40020410
 8002844:	40020428 	.word	0x40020428
 8002848:	40020440 	.word	0x40020440
 800284c:	40020458 	.word	0x40020458
 8002850:	40020470 	.word	0x40020470
 8002854:	40020488 	.word	0x40020488
 8002858:	400204a0 	.word	0x400204a0
 800285c:	400204b8 	.word	0x400204b8
 8002860:	58025408 	.word	0x58025408
 8002864:	5802541c 	.word	0x5802541c
 8002868:	58025430 	.word	0x58025430
 800286c:	58025444 	.word	0x58025444
 8002870:	58025458 	.word	0x58025458
 8002874:	5802546c 	.word	0x5802546c
 8002878:	58025480 	.word	0x58025480
 800287c:	58025494 	.word	0x58025494
 8002880:	2300      	movs	r3, #0
 8002882:	2b00      	cmp	r3, #0
 8002884:	d028      	beq.n	80028d8 <HAL_DMA_Abort_IT+0x460>
      {
        /* disable the DMAMUX sync overrun IT */
        hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8002886:	687b      	ldr	r3, [r7, #4]
 8002888:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800288a:	681a      	ldr	r2, [r3, #0]
 800288c:	687b      	ldr	r3, [r7, #4]
 800288e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002890:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8002894:	601a      	str	r2, [r3, #0]

        /* Clear all flags */
        regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 8002896:	687b      	ldr	r3, [r7, #4]
 8002898:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800289a:	60fb      	str	r3, [r7, #12]
        regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 800289c:	687b      	ldr	r3, [r7, #4]
 800289e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80028a0:	f003 031f 	and.w	r3, r3, #31
 80028a4:	2201      	movs	r2, #1
 80028a6:	409a      	lsls	r2, r3
 80028a8:	68fb      	ldr	r3, [r7, #12]
 80028aa:	605a      	str	r2, [r3, #4]

        /* Clear the DMAMUX synchro overrun flag */
        hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 80028ac:	687b      	ldr	r3, [r7, #4]
 80028ae:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80028b0:	687a      	ldr	r2, [r7, #4]
 80028b2:	6e92      	ldr	r2, [r2, #104]	; 0x68
 80028b4:	605a      	str	r2, [r3, #4]

        if(hdma->DMAmuxRequestGen != 0U)
 80028b6:	687b      	ldr	r3, [r7, #4]
 80028b8:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80028ba:	2b00      	cmp	r3, #0
 80028bc:	d00c      	beq.n	80028d8 <HAL_DMA_Abort_IT+0x460>
        {
          /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
          /* disable the request gen overrun IT */
          hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 80028be:	687b      	ldr	r3, [r7, #4]
 80028c0:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80028c2:	681a      	ldr	r2, [r3, #0]
 80028c4:	687b      	ldr	r3, [r7, #4]
 80028c6:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80028c8:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80028cc:	601a      	str	r2, [r3, #0]

          /* Clear the DMAMUX request generator overrun flag */
          hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 80028ce:	687b      	ldr	r3, [r7, #4]
 80028d0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80028d2:	687a      	ldr	r2, [r7, #4]
 80028d4:	6f52      	ldr	r2, [r2, #116]	; 0x74
 80028d6:	605a      	str	r2, [r3, #4]
        }
      }

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 80028d8:	687b      	ldr	r3, [r7, #4]
 80028da:	2201      	movs	r2, #1
 80028dc:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 80028e0:	687b      	ldr	r3, [r7, #4]
 80028e2:	2200      	movs	r2, #0
 80028e4:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

      /* Call User Abort callback */
      if(hdma->XferAbortCallback != NULL)
 80028e8:	687b      	ldr	r3, [r7, #4]
 80028ea:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80028ec:	2b00      	cmp	r3, #0
 80028ee:	d003      	beq.n	80028f8 <HAL_DMA_Abort_IT+0x480>
      {
        hdma->XferAbortCallback(hdma);
 80028f0:	687b      	ldr	r3, [r7, #4]
 80028f2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80028f4:	6878      	ldr	r0, [r7, #4]
 80028f6:	4798      	blx	r3
      }
    }
  }

  return HAL_OK;
 80028f8:	2300      	movs	r3, #0
}
 80028fa:	4618      	mov	r0, r3
 80028fc:	3710      	adds	r7, #16
 80028fe:	46bd      	mov	sp, r7
 8002900:	bd80      	pop	{r7, pc}
 8002902:	bf00      	nop

08002904 <HAL_DMA2D_Init>:
  * @param  hdma2d pointer to a DMA2D_HandleTypeDef structure that contains
  *                 the configuration information for the DMA2D.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA2D_Init(DMA2D_HandleTypeDef *hdma2d)
{
 8002904:	b580      	push	{r7, lr}
 8002906:	b082      	sub	sp, #8
 8002908:	af00      	add	r7, sp, #0
 800290a:	6078      	str	r0, [r7, #4]
  /* Check the DMA2D peripheral state */
  if (hdma2d == NULL)
 800290c:	687b      	ldr	r3, [r7, #4]
 800290e:	2b00      	cmp	r3, #0
 8002910:	d101      	bne.n	8002916 <HAL_DMA2D_Init+0x12>
  {
    return HAL_ERROR;
 8002912:	2301      	movs	r3, #1
 8002914:	e04f      	b.n	80029b6 <HAL_DMA2D_Init+0xb2>

    /* Init the low level hardware */
    hdma2d->MspInitCallback(hdma2d);
  }
#else
  if (hdma2d->State == HAL_DMA2D_STATE_RESET)
 8002916:	687b      	ldr	r3, [r7, #4]
 8002918:	f893 3061 	ldrb.w	r3, [r3, #97]	; 0x61
 800291c:	b2db      	uxtb	r3, r3
 800291e:	2b00      	cmp	r3, #0
 8002920:	d106      	bne.n	8002930 <HAL_DMA2D_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hdma2d->Lock = HAL_UNLOCKED;
 8002922:	687b      	ldr	r3, [r7, #4]
 8002924:	2200      	movs	r2, #0
 8002926:	f883 2060 	strb.w	r2, [r3, #96]	; 0x60
    /* Init the low level hardware */
    HAL_DMA2D_MspInit(hdma2d);
 800292a:	6878      	ldr	r0, [r7, #4]
 800292c:	f7fe fdfa 	bl	8001524 <HAL_DMA2D_MspInit>
  }
#endif /* (USE_HAL_DMA2D_REGISTER_CALLBACKS) */

  /* Change DMA2D peripheral state */
  hdma2d->State = HAL_DMA2D_STATE_BUSY;
 8002930:	687b      	ldr	r3, [r7, #4]
 8002932:	2202      	movs	r2, #2
 8002934:	f883 2061 	strb.w	r2, [r3, #97]	; 0x61

  /* DMA2D CR register configuration -------------------------------------------*/
  MODIFY_REG(hdma2d->Instance->CR, DMA2D_CR_MODE | DMA2D_CR_LOM, hdma2d->Init.Mode | hdma2d->Init.LineOffsetMode);
 8002938:	687b      	ldr	r3, [r7, #4]
 800293a:	681b      	ldr	r3, [r3, #0]
 800293c:	681a      	ldr	r2, [r3, #0]
 800293e:	4b20      	ldr	r3, [pc, #128]	; (80029c0 <HAL_DMA2D_Init+0xbc>)
 8002940:	4013      	ands	r3, r2
 8002942:	687a      	ldr	r2, [r7, #4]
 8002944:	6851      	ldr	r1, [r2, #4]
 8002946:	687a      	ldr	r2, [r7, #4]
 8002948:	69d2      	ldr	r2, [r2, #28]
 800294a:	4311      	orrs	r1, r2
 800294c:	687a      	ldr	r2, [r7, #4]
 800294e:	6812      	ldr	r2, [r2, #0]
 8002950:	430b      	orrs	r3, r1
 8002952:	6013      	str	r3, [r2, #0]

  /* DMA2D OPFCCR register configuration ---------------------------------------*/
  MODIFY_REG(hdma2d->Instance->OPFCCR, DMA2D_OPFCCR_CM | DMA2D_OPFCCR_SB,
 8002954:	687b      	ldr	r3, [r7, #4]
 8002956:	681b      	ldr	r3, [r3, #0]
 8002958:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800295a:	4b1a      	ldr	r3, [pc, #104]	; (80029c4 <HAL_DMA2D_Init+0xc0>)
 800295c:	4013      	ands	r3, r2
 800295e:	687a      	ldr	r2, [r7, #4]
 8002960:	6891      	ldr	r1, [r2, #8]
 8002962:	687a      	ldr	r2, [r7, #4]
 8002964:	6992      	ldr	r2, [r2, #24]
 8002966:	4311      	orrs	r1, r2
 8002968:	687a      	ldr	r2, [r7, #4]
 800296a:	6812      	ldr	r2, [r2, #0]
 800296c:	430b      	orrs	r3, r1
 800296e:	6353      	str	r3, [r2, #52]	; 0x34
             hdma2d->Init.ColorMode | hdma2d->Init.BytesSwap);

  /* DMA2D OOR register configuration ------------------------------------------*/
  MODIFY_REG(hdma2d->Instance->OOR, DMA2D_OOR_LO, hdma2d->Init.OutputOffset);
 8002970:	687b      	ldr	r3, [r7, #4]
 8002972:	681b      	ldr	r3, [r3, #0]
 8002974:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8002976:	4b14      	ldr	r3, [pc, #80]	; (80029c8 <HAL_DMA2D_Init+0xc4>)
 8002978:	4013      	ands	r3, r2
 800297a:	687a      	ldr	r2, [r7, #4]
 800297c:	68d1      	ldr	r1, [r2, #12]
 800297e:	687a      	ldr	r2, [r7, #4]
 8002980:	6812      	ldr	r2, [r2, #0]
 8002982:	430b      	orrs	r3, r1
 8002984:	6413      	str	r3, [r2, #64]	; 0x40
  /* DMA2D OPFCCR AI and RBS fields setting (Output Alpha Inversion)*/
  MODIFY_REG(hdma2d->Instance->OPFCCR, (DMA2D_OPFCCR_AI | DMA2D_OPFCCR_RBS),
 8002986:	687b      	ldr	r3, [r7, #4]
 8002988:	681b      	ldr	r3, [r3, #0]
 800298a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800298c:	f423 1140 	bic.w	r1, r3, #3145728	; 0x300000
 8002990:	687b      	ldr	r3, [r7, #4]
 8002992:	691b      	ldr	r3, [r3, #16]
 8002994:	051a      	lsls	r2, r3, #20
 8002996:	687b      	ldr	r3, [r7, #4]
 8002998:	695b      	ldr	r3, [r3, #20]
 800299a:	055b      	lsls	r3, r3, #21
 800299c:	431a      	orrs	r2, r3
 800299e:	687b      	ldr	r3, [r7, #4]
 80029a0:	681b      	ldr	r3, [r3, #0]
 80029a2:	430a      	orrs	r2, r1
 80029a4:	635a      	str	r2, [r3, #52]	; 0x34
             ((hdma2d->Init.AlphaInverted << DMA2D_OPFCCR_AI_Pos) | \
              (hdma2d->Init.RedBlueSwap << DMA2D_OPFCCR_RBS_Pos)));


  /* Update error code */
  hdma2d->ErrorCode = HAL_DMA2D_ERROR_NONE;
 80029a6:	687b      	ldr	r3, [r7, #4]
 80029a8:	2200      	movs	r2, #0
 80029aa:	665a      	str	r2, [r3, #100]	; 0x64

  /* Initialize the DMA2D state*/
  hdma2d->State  = HAL_DMA2D_STATE_READY;
 80029ac:	687b      	ldr	r3, [r7, #4]
 80029ae:	2201      	movs	r2, #1
 80029b0:	f883 2061 	strb.w	r2, [r3, #97]	; 0x61

  return HAL_OK;
 80029b4:	2300      	movs	r3, #0
}
 80029b6:	4618      	mov	r0, r3
 80029b8:	3708      	adds	r7, #8
 80029ba:	46bd      	mov	sp, r7
 80029bc:	bd80      	pop	{r7, pc}
 80029be:	bf00      	nop
 80029c0:	fff8ffbf 	.word	0xfff8ffbf
 80029c4:	fffffef8 	.word	0xfffffef8
 80029c8:	ffff0000 	.word	0xffff0000

080029cc <HAL_DMA2D_ConfigLayer>:
  *                   This parameter can be one of the following values:
  *                   DMA2D_BACKGROUND_LAYER(0) / DMA2D_FOREGROUND_LAYER(1)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA2D_ConfigLayer(DMA2D_HandleTypeDef *hdma2d, uint32_t LayerIdx)
{
 80029cc:	b480      	push	{r7}
 80029ce:	b087      	sub	sp, #28
 80029d0:	af00      	add	r7, sp, #0
 80029d2:	6078      	str	r0, [r7, #4]
 80029d4:	6039      	str	r1, [r7, #0]
  uint32_t regValue;

  /* Check the parameters */
  assert_param(IS_DMA2D_LAYER(LayerIdx));
  assert_param(IS_DMA2D_OFFSET(hdma2d->LayerCfg[LayerIdx].InputOffset));
  if (hdma2d->Init.Mode != DMA2D_R2M)
 80029d6:	687b      	ldr	r3, [r7, #4]
 80029d8:	685b      	ldr	r3, [r3, #4]
 80029da:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
    }
  }
  assert_param(IS_DMA2D_ALPHA_INVERTED(hdma2d->LayerCfg[LayerIdx].AlphaInverted));
  assert_param(IS_DMA2D_RB_SWAP(hdma2d->LayerCfg[LayerIdx].RedBlueSwap));

  if ((LayerIdx == DMA2D_FOREGROUND_LAYER) && (hdma2d->LayerCfg[LayerIdx].InputColorMode == DMA2D_INPUT_YCBCR))
 80029de:	683b      	ldr	r3, [r7, #0]
 80029e0:	2b01      	cmp	r3, #1
  {
    assert_param(IS_DMA2D_CHROMA_SUB_SAMPLING(hdma2d->LayerCfg[LayerIdx].ChromaSubSampling));
  }

  /* Process locked */
  __HAL_LOCK(hdma2d);
 80029e2:	687b      	ldr	r3, [r7, #4]
 80029e4:	f893 3060 	ldrb.w	r3, [r3, #96]	; 0x60
 80029e8:	2b01      	cmp	r3, #1
 80029ea:	d101      	bne.n	80029f0 <HAL_DMA2D_ConfigLayer+0x24>
 80029ec:	2302      	movs	r3, #2
 80029ee:	e092      	b.n	8002b16 <HAL_DMA2D_ConfigLayer+0x14a>
 80029f0:	687b      	ldr	r3, [r7, #4]
 80029f2:	2201      	movs	r2, #1
 80029f4:	f883 2060 	strb.w	r2, [r3, #96]	; 0x60

  /* Change DMA2D peripheral state */
  hdma2d->State = HAL_DMA2D_STATE_BUSY;
 80029f8:	687b      	ldr	r3, [r7, #4]
 80029fa:	2202      	movs	r2, #2
 80029fc:	f883 2061 	strb.w	r2, [r3, #97]	; 0x61

  pLayerCfg = &hdma2d->LayerCfg[LayerIdx];
 8002a00:	683a      	ldr	r2, [r7, #0]
 8002a02:	4613      	mov	r3, r2
 8002a04:	00db      	lsls	r3, r3, #3
 8002a06:	1a9b      	subs	r3, r3, r2
 8002a08:	009b      	lsls	r3, r3, #2
 8002a0a:	3328      	adds	r3, #40	; 0x28
 8002a0c:	687a      	ldr	r2, [r7, #4]
 8002a0e:	4413      	add	r3, r2
 8002a10:	60fb      	str	r3, [r7, #12]

  /* Prepare the value to be written to the BGPFCCR or FGPFCCR register */
  regValue = pLayerCfg->InputColorMode | (pLayerCfg->AlphaMode << DMA2D_BGPFCCR_AM_Pos) | \
 8002a12:	68fb      	ldr	r3, [r7, #12]
 8002a14:	685a      	ldr	r2, [r3, #4]
 8002a16:	68fb      	ldr	r3, [r7, #12]
 8002a18:	689b      	ldr	r3, [r3, #8]
 8002a1a:	041b      	lsls	r3, r3, #16
 8002a1c:	431a      	orrs	r2, r3
             (pLayerCfg->AlphaInverted << DMA2D_BGPFCCR_AI_Pos) | (pLayerCfg->RedBlueSwap << DMA2D_BGPFCCR_RBS_Pos);
 8002a1e:	68fb      	ldr	r3, [r7, #12]
 8002a20:	691b      	ldr	r3, [r3, #16]
 8002a22:	051b      	lsls	r3, r3, #20
  regValue = pLayerCfg->InputColorMode | (pLayerCfg->AlphaMode << DMA2D_BGPFCCR_AM_Pos) | \
 8002a24:	431a      	orrs	r2, r3
             (pLayerCfg->AlphaInverted << DMA2D_BGPFCCR_AI_Pos) | (pLayerCfg->RedBlueSwap << DMA2D_BGPFCCR_RBS_Pos);
 8002a26:	68fb      	ldr	r3, [r7, #12]
 8002a28:	695b      	ldr	r3, [r3, #20]
 8002a2a:	055b      	lsls	r3, r3, #21
  regValue = pLayerCfg->InputColorMode | (pLayerCfg->AlphaMode << DMA2D_BGPFCCR_AM_Pos) | \
 8002a2c:	4313      	orrs	r3, r2
 8002a2e:	613b      	str	r3, [r7, #16]
  regMask  = (DMA2D_BGPFCCR_CM | DMA2D_BGPFCCR_AM | DMA2D_BGPFCCR_ALPHA | DMA2D_BGPFCCR_AI | DMA2D_BGPFCCR_RBS);
 8002a30:	4b3c      	ldr	r3, [pc, #240]	; (8002b24 <HAL_DMA2D_ConfigLayer+0x158>)
 8002a32:	617b      	str	r3, [r7, #20]


  if ((pLayerCfg->InputColorMode == DMA2D_INPUT_A4) || (pLayerCfg->InputColorMode == DMA2D_INPUT_A8))
 8002a34:	68fb      	ldr	r3, [r7, #12]
 8002a36:	685b      	ldr	r3, [r3, #4]
 8002a38:	2b0a      	cmp	r3, #10
 8002a3a:	d003      	beq.n	8002a44 <HAL_DMA2D_ConfigLayer+0x78>
 8002a3c:	68fb      	ldr	r3, [r7, #12]
 8002a3e:	685b      	ldr	r3, [r3, #4]
 8002a40:	2b09      	cmp	r3, #9
 8002a42:	d107      	bne.n	8002a54 <HAL_DMA2D_ConfigLayer+0x88>
  {
    regValue |= (pLayerCfg->InputAlpha & DMA2D_BGPFCCR_ALPHA);
 8002a44:	68fb      	ldr	r3, [r7, #12]
 8002a46:	68db      	ldr	r3, [r3, #12]
 8002a48:	f003 437f 	and.w	r3, r3, #4278190080	; 0xff000000
 8002a4c:	693a      	ldr	r2, [r7, #16]
 8002a4e:	4313      	orrs	r3, r2
 8002a50:	613b      	str	r3, [r7, #16]
 8002a52:	e005      	b.n	8002a60 <HAL_DMA2D_ConfigLayer+0x94>
  }
  else
  {
    regValue |= (pLayerCfg->InputAlpha << DMA2D_BGPFCCR_ALPHA_Pos);
 8002a54:	68fb      	ldr	r3, [r7, #12]
 8002a56:	68db      	ldr	r3, [r3, #12]
 8002a58:	061b      	lsls	r3, r3, #24
 8002a5a:	693a      	ldr	r2, [r7, #16]
 8002a5c:	4313      	orrs	r3, r2
 8002a5e:	613b      	str	r3, [r7, #16]
  }

  /* Configure the background DMA2D layer */
  if (LayerIdx == DMA2D_BACKGROUND_LAYER)
 8002a60:	683b      	ldr	r3, [r7, #0]
 8002a62:	2b00      	cmp	r3, #0
 8002a64:	d120      	bne.n	8002aa8 <HAL_DMA2D_ConfigLayer+0xdc>
  {
    /* Write DMA2D BGPFCCR register */
    MODIFY_REG(hdma2d->Instance->BGPFCCR, regMask, regValue);
 8002a66:	687b      	ldr	r3, [r7, #4]
 8002a68:	681b      	ldr	r3, [r3, #0]
 8002a6a:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8002a6c:	697b      	ldr	r3, [r7, #20]
 8002a6e:	43db      	mvns	r3, r3
 8002a70:	ea02 0103 	and.w	r1, r2, r3
 8002a74:	687b      	ldr	r3, [r7, #4]
 8002a76:	681b      	ldr	r3, [r3, #0]
 8002a78:	693a      	ldr	r2, [r7, #16]
 8002a7a:	430a      	orrs	r2, r1
 8002a7c:	625a      	str	r2, [r3, #36]	; 0x24

    /* DMA2D BGOR register configuration -------------------------------------*/
    WRITE_REG(hdma2d->Instance->BGOR, pLayerCfg->InputOffset);
 8002a7e:	687b      	ldr	r3, [r7, #4]
 8002a80:	681b      	ldr	r3, [r3, #0]
 8002a82:	68fa      	ldr	r2, [r7, #12]
 8002a84:	6812      	ldr	r2, [r2, #0]
 8002a86:	619a      	str	r2, [r3, #24]

    /* DMA2D BGCOLR register configuration -------------------------------------*/
    if ((pLayerCfg->InputColorMode == DMA2D_INPUT_A4) || (pLayerCfg->InputColorMode == DMA2D_INPUT_A8))
 8002a88:	68fb      	ldr	r3, [r7, #12]
 8002a8a:	685b      	ldr	r3, [r3, #4]
 8002a8c:	2b0a      	cmp	r3, #10
 8002a8e:	d003      	beq.n	8002a98 <HAL_DMA2D_ConfigLayer+0xcc>
 8002a90:	68fb      	ldr	r3, [r7, #12]
 8002a92:	685b      	ldr	r3, [r3, #4]
 8002a94:	2b09      	cmp	r3, #9
 8002a96:	d135      	bne.n	8002b04 <HAL_DMA2D_ConfigLayer+0x138>
    {
      WRITE_REG(hdma2d->Instance->BGCOLR, pLayerCfg->InputAlpha & (DMA2D_BGCOLR_BLUE | DMA2D_BGCOLR_GREEN | \
 8002a98:	68fb      	ldr	r3, [r7, #12]
 8002a9a:	68da      	ldr	r2, [r3, #12]
 8002a9c:	687b      	ldr	r3, [r7, #4]
 8002a9e:	681b      	ldr	r3, [r3, #0]
 8002aa0:	f022 427f 	bic.w	r2, r2, #4278190080	; 0xff000000
 8002aa4:	629a      	str	r2, [r3, #40]	; 0x28
 8002aa6:	e02d      	b.n	8002b04 <HAL_DMA2D_ConfigLayer+0x138>
  }
  /* Configure the foreground DMA2D layer */
  else
  {

    if (pLayerCfg->InputColorMode == DMA2D_INPUT_YCBCR)
 8002aa8:	68fb      	ldr	r3, [r7, #12]
 8002aaa:	685b      	ldr	r3, [r3, #4]
 8002aac:	2b0b      	cmp	r3, #11
 8002aae:	d109      	bne.n	8002ac4 <HAL_DMA2D_ConfigLayer+0xf8>
    {
      regValue |= (pLayerCfg->ChromaSubSampling << DMA2D_FGPFCCR_CSS_Pos);
 8002ab0:	68fb      	ldr	r3, [r7, #12]
 8002ab2:	699b      	ldr	r3, [r3, #24]
 8002ab4:	049b      	lsls	r3, r3, #18
 8002ab6:	693a      	ldr	r2, [r7, #16]
 8002ab8:	4313      	orrs	r3, r2
 8002aba:	613b      	str	r3, [r7, #16]
      regMask  |= DMA2D_FGPFCCR_CSS;
 8002abc:	697b      	ldr	r3, [r7, #20]
 8002abe:	f443 2340 	orr.w	r3, r3, #786432	; 0xc0000
 8002ac2:	617b      	str	r3, [r7, #20]
    }

    /* Write DMA2D FGPFCCR register */
    MODIFY_REG(hdma2d->Instance->FGPFCCR, regMask, regValue);
 8002ac4:	687b      	ldr	r3, [r7, #4]
 8002ac6:	681b      	ldr	r3, [r3, #0]
 8002ac8:	69da      	ldr	r2, [r3, #28]
 8002aca:	697b      	ldr	r3, [r7, #20]
 8002acc:	43db      	mvns	r3, r3
 8002ace:	ea02 0103 	and.w	r1, r2, r3
 8002ad2:	687b      	ldr	r3, [r7, #4]
 8002ad4:	681b      	ldr	r3, [r3, #0]
 8002ad6:	693a      	ldr	r2, [r7, #16]
 8002ad8:	430a      	orrs	r2, r1
 8002ada:	61da      	str	r2, [r3, #28]

    /* DMA2D FGOR register configuration -------------------------------------*/
    WRITE_REG(hdma2d->Instance->FGOR, pLayerCfg->InputOffset);
 8002adc:	687b      	ldr	r3, [r7, #4]
 8002ade:	681b      	ldr	r3, [r3, #0]
 8002ae0:	68fa      	ldr	r2, [r7, #12]
 8002ae2:	6812      	ldr	r2, [r2, #0]
 8002ae4:	611a      	str	r2, [r3, #16]

    /* DMA2D FGCOLR register configuration -------------------------------------*/
    if ((pLayerCfg->InputColorMode == DMA2D_INPUT_A4) || (pLayerCfg->InputColorMode == DMA2D_INPUT_A8))
 8002ae6:	68fb      	ldr	r3, [r7, #12]
 8002ae8:	685b      	ldr	r3, [r3, #4]
 8002aea:	2b0a      	cmp	r3, #10
 8002aec:	d003      	beq.n	8002af6 <HAL_DMA2D_ConfigLayer+0x12a>
 8002aee:	68fb      	ldr	r3, [r7, #12]
 8002af0:	685b      	ldr	r3, [r3, #4]
 8002af2:	2b09      	cmp	r3, #9
 8002af4:	d106      	bne.n	8002b04 <HAL_DMA2D_ConfigLayer+0x138>
    {
      WRITE_REG(hdma2d->Instance->FGCOLR, pLayerCfg->InputAlpha & (DMA2D_FGCOLR_BLUE | DMA2D_FGCOLR_GREEN | \
 8002af6:	68fb      	ldr	r3, [r7, #12]
 8002af8:	68da      	ldr	r2, [r3, #12]
 8002afa:	687b      	ldr	r3, [r7, #4]
 8002afc:	681b      	ldr	r3, [r3, #0]
 8002afe:	f022 427f 	bic.w	r2, r2, #4278190080	; 0xff000000
 8002b02:	621a      	str	r2, [r3, #32]
                                                                   DMA2D_FGCOLR_RED));
    }
  }
  /* Initialize the DMA2D state*/
  hdma2d->State = HAL_DMA2D_STATE_READY;
 8002b04:	687b      	ldr	r3, [r7, #4]
 8002b06:	2201      	movs	r2, #1
 8002b08:	f883 2061 	strb.w	r2, [r3, #97]	; 0x61

  /* Process unlocked */
  __HAL_UNLOCK(hdma2d);
 8002b0c:	687b      	ldr	r3, [r7, #4]
 8002b0e:	2200      	movs	r2, #0
 8002b10:	f883 2060 	strb.w	r2, [r3, #96]	; 0x60

  return HAL_OK;
 8002b14:	2300      	movs	r3, #0
}
 8002b16:	4618      	mov	r0, r3
 8002b18:	371c      	adds	r7, #28
 8002b1a:	46bd      	mov	sp, r7
 8002b1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b20:	4770      	bx	lr
 8002b22:	bf00      	nop
 8002b24:	ff33000f 	.word	0xff33000f

08002b28 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002b28:	b480      	push	{r7}
 8002b2a:	b089      	sub	sp, #36	; 0x24
 8002b2c:	af00      	add	r7, sp, #0
 8002b2e:	6078      	str	r0, [r7, #4]
 8002b30:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8002b32:	2300      	movs	r3, #0
 8002b34:	61fb      	str	r3, [r7, #28]
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
#else
  EXTI_CurrentCPU = EXTI_D1; /* EXTI for CM7 CPU */
 8002b36:	4b86      	ldr	r3, [pc, #536]	; (8002d50 <HAL_GPIO_Init+0x228>)
 8002b38:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8002b3a:	e18c      	b.n	8002e56 <HAL_GPIO_Init+0x32e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8002b3c:	683b      	ldr	r3, [r7, #0]
 8002b3e:	681a      	ldr	r2, [r3, #0]
 8002b40:	2101      	movs	r1, #1
 8002b42:	69fb      	ldr	r3, [r7, #28]
 8002b44:	fa01 f303 	lsl.w	r3, r1, r3
 8002b48:	4013      	ands	r3, r2
 8002b4a:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00U)
 8002b4c:	693b      	ldr	r3, [r7, #16]
 8002b4e:	2b00      	cmp	r3, #0
 8002b50:	f000 817e 	beq.w	8002e50 <HAL_GPIO_Init+0x328>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8002b54:	683b      	ldr	r3, [r7, #0]
 8002b56:	685b      	ldr	r3, [r3, #4]
 8002b58:	f003 0303 	and.w	r3, r3, #3
 8002b5c:	2b01      	cmp	r3, #1
 8002b5e:	d005      	beq.n	8002b6c <HAL_GPIO_Init+0x44>
 8002b60:	683b      	ldr	r3, [r7, #0]
 8002b62:	685b      	ldr	r3, [r3, #4]
 8002b64:	f003 0303 	and.w	r3, r3, #3
 8002b68:	2b02      	cmp	r3, #2
 8002b6a:	d130      	bne.n	8002bce <HAL_GPIO_Init+0xa6>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8002b6c:	687b      	ldr	r3, [r7, #4]
 8002b6e:	689b      	ldr	r3, [r3, #8]
 8002b70:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8002b72:	69fb      	ldr	r3, [r7, #28]
 8002b74:	005b      	lsls	r3, r3, #1
 8002b76:	2203      	movs	r2, #3
 8002b78:	fa02 f303 	lsl.w	r3, r2, r3
 8002b7c:	43db      	mvns	r3, r3
 8002b7e:	69ba      	ldr	r2, [r7, #24]
 8002b80:	4013      	ands	r3, r2
 8002b82:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8002b84:	683b      	ldr	r3, [r7, #0]
 8002b86:	68da      	ldr	r2, [r3, #12]
 8002b88:	69fb      	ldr	r3, [r7, #28]
 8002b8a:	005b      	lsls	r3, r3, #1
 8002b8c:	fa02 f303 	lsl.w	r3, r2, r3
 8002b90:	69ba      	ldr	r2, [r7, #24]
 8002b92:	4313      	orrs	r3, r2
 8002b94:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8002b96:	687b      	ldr	r3, [r7, #4]
 8002b98:	69ba      	ldr	r2, [r7, #24]
 8002b9a:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002b9c:	687b      	ldr	r3, [r7, #4]
 8002b9e:	685b      	ldr	r3, [r3, #4]
 8002ba0:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8002ba2:	2201      	movs	r2, #1
 8002ba4:	69fb      	ldr	r3, [r7, #28]
 8002ba6:	fa02 f303 	lsl.w	r3, r2, r3
 8002baa:	43db      	mvns	r3, r3
 8002bac:	69ba      	ldr	r2, [r7, #24]
 8002bae:	4013      	ands	r3, r2
 8002bb0:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002bb2:	683b      	ldr	r3, [r7, #0]
 8002bb4:	685b      	ldr	r3, [r3, #4]
 8002bb6:	091b      	lsrs	r3, r3, #4
 8002bb8:	f003 0201 	and.w	r2, r3, #1
 8002bbc:	69fb      	ldr	r3, [r7, #28]
 8002bbe:	fa02 f303 	lsl.w	r3, r2, r3
 8002bc2:	69ba      	ldr	r2, [r7, #24]
 8002bc4:	4313      	orrs	r3, r2
 8002bc6:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8002bc8:	687b      	ldr	r3, [r7, #4]
 8002bca:	69ba      	ldr	r2, [r7, #24]
 8002bcc:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002bce:	683b      	ldr	r3, [r7, #0]
 8002bd0:	685b      	ldr	r3, [r3, #4]
 8002bd2:	f003 0303 	and.w	r3, r3, #3
 8002bd6:	2b03      	cmp	r3, #3
 8002bd8:	d017      	beq.n	8002c0a <HAL_GPIO_Init+0xe2>
      {
       /* Check the Pull parameter */
       assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8002bda:	687b      	ldr	r3, [r7, #4]
 8002bdc:	68db      	ldr	r3, [r3, #12]
 8002bde:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8002be0:	69fb      	ldr	r3, [r7, #28]
 8002be2:	005b      	lsls	r3, r3, #1
 8002be4:	2203      	movs	r2, #3
 8002be6:	fa02 f303 	lsl.w	r3, r2, r3
 8002bea:	43db      	mvns	r3, r3
 8002bec:	69ba      	ldr	r2, [r7, #24]
 8002bee:	4013      	ands	r3, r2
 8002bf0:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8002bf2:	683b      	ldr	r3, [r7, #0]
 8002bf4:	689a      	ldr	r2, [r3, #8]
 8002bf6:	69fb      	ldr	r3, [r7, #28]
 8002bf8:	005b      	lsls	r3, r3, #1
 8002bfa:	fa02 f303 	lsl.w	r3, r2, r3
 8002bfe:	69ba      	ldr	r2, [r7, #24]
 8002c00:	4313      	orrs	r3, r2
 8002c02:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8002c04:	687b      	ldr	r3, [r7, #4]
 8002c06:	69ba      	ldr	r2, [r7, #24]
 8002c08:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002c0a:	683b      	ldr	r3, [r7, #0]
 8002c0c:	685b      	ldr	r3, [r3, #4]
 8002c0e:	f003 0303 	and.w	r3, r3, #3
 8002c12:	2b02      	cmp	r3, #2
 8002c14:	d123      	bne.n	8002c5e <HAL_GPIO_Init+0x136>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8002c16:	69fb      	ldr	r3, [r7, #28]
 8002c18:	08da      	lsrs	r2, r3, #3
 8002c1a:	687b      	ldr	r3, [r7, #4]
 8002c1c:	3208      	adds	r2, #8
 8002c1e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002c22:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8002c24:	69fb      	ldr	r3, [r7, #28]
 8002c26:	f003 0307 	and.w	r3, r3, #7
 8002c2a:	009b      	lsls	r3, r3, #2
 8002c2c:	220f      	movs	r2, #15
 8002c2e:	fa02 f303 	lsl.w	r3, r2, r3
 8002c32:	43db      	mvns	r3, r3
 8002c34:	69ba      	ldr	r2, [r7, #24]
 8002c36:	4013      	ands	r3, r2
 8002c38:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8002c3a:	683b      	ldr	r3, [r7, #0]
 8002c3c:	691a      	ldr	r2, [r3, #16]
 8002c3e:	69fb      	ldr	r3, [r7, #28]
 8002c40:	f003 0307 	and.w	r3, r3, #7
 8002c44:	009b      	lsls	r3, r3, #2
 8002c46:	fa02 f303 	lsl.w	r3, r2, r3
 8002c4a:	69ba      	ldr	r2, [r7, #24]
 8002c4c:	4313      	orrs	r3, r2
 8002c4e:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8002c50:	69fb      	ldr	r3, [r7, #28]
 8002c52:	08da      	lsrs	r2, r3, #3
 8002c54:	687b      	ldr	r3, [r7, #4]
 8002c56:	3208      	adds	r2, #8
 8002c58:	69b9      	ldr	r1, [r7, #24]
 8002c5a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002c5e:	687b      	ldr	r3, [r7, #4]
 8002c60:	681b      	ldr	r3, [r3, #0]
 8002c62:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8002c64:	69fb      	ldr	r3, [r7, #28]
 8002c66:	005b      	lsls	r3, r3, #1
 8002c68:	2203      	movs	r2, #3
 8002c6a:	fa02 f303 	lsl.w	r3, r2, r3
 8002c6e:	43db      	mvns	r3, r3
 8002c70:	69ba      	ldr	r2, [r7, #24]
 8002c72:	4013      	ands	r3, r2
 8002c74:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8002c76:	683b      	ldr	r3, [r7, #0]
 8002c78:	685b      	ldr	r3, [r3, #4]
 8002c7a:	f003 0203 	and.w	r2, r3, #3
 8002c7e:	69fb      	ldr	r3, [r7, #28]
 8002c80:	005b      	lsls	r3, r3, #1
 8002c82:	fa02 f303 	lsl.w	r3, r2, r3
 8002c86:	69ba      	ldr	r2, [r7, #24]
 8002c88:	4313      	orrs	r3, r2
 8002c8a:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8002c8c:	687b      	ldr	r3, [r7, #4]
 8002c8e:	69ba      	ldr	r2, [r7, #24]
 8002c90:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8002c92:	683b      	ldr	r3, [r7, #0]
 8002c94:	685b      	ldr	r3, [r3, #4]
 8002c96:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8002c9a:	2b00      	cmp	r3, #0
 8002c9c:	f000 80d8 	beq.w	8002e50 <HAL_GPIO_Init+0x328>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002ca0:	4b2c      	ldr	r3, [pc, #176]	; (8002d54 <HAL_GPIO_Init+0x22c>)
 8002ca2:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8002ca6:	4a2b      	ldr	r2, [pc, #172]	; (8002d54 <HAL_GPIO_Init+0x22c>)
 8002ca8:	f043 0302 	orr.w	r3, r3, #2
 8002cac:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 8002cb0:	4b28      	ldr	r3, [pc, #160]	; (8002d54 <HAL_GPIO_Init+0x22c>)
 8002cb2:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8002cb6:	f003 0302 	and.w	r3, r3, #2
 8002cba:	60fb      	str	r3, [r7, #12]
 8002cbc:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8002cbe:	4a26      	ldr	r2, [pc, #152]	; (8002d58 <HAL_GPIO_Init+0x230>)
 8002cc0:	69fb      	ldr	r3, [r7, #28]
 8002cc2:	089b      	lsrs	r3, r3, #2
 8002cc4:	3302      	adds	r3, #2
 8002cc6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002cca:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8002ccc:	69fb      	ldr	r3, [r7, #28]
 8002cce:	f003 0303 	and.w	r3, r3, #3
 8002cd2:	009b      	lsls	r3, r3, #2
 8002cd4:	220f      	movs	r2, #15
 8002cd6:	fa02 f303 	lsl.w	r3, r2, r3
 8002cda:	43db      	mvns	r3, r3
 8002cdc:	69ba      	ldr	r2, [r7, #24]
 8002cde:	4013      	ands	r3, r2
 8002ce0:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8002ce2:	687b      	ldr	r3, [r7, #4]
 8002ce4:	4a1d      	ldr	r2, [pc, #116]	; (8002d5c <HAL_GPIO_Init+0x234>)
 8002ce6:	4293      	cmp	r3, r2
 8002ce8:	d04a      	beq.n	8002d80 <HAL_GPIO_Init+0x258>
 8002cea:	687b      	ldr	r3, [r7, #4]
 8002cec:	4a1c      	ldr	r2, [pc, #112]	; (8002d60 <HAL_GPIO_Init+0x238>)
 8002cee:	4293      	cmp	r3, r2
 8002cf0:	d02b      	beq.n	8002d4a <HAL_GPIO_Init+0x222>
 8002cf2:	687b      	ldr	r3, [r7, #4]
 8002cf4:	4a1b      	ldr	r2, [pc, #108]	; (8002d64 <HAL_GPIO_Init+0x23c>)
 8002cf6:	4293      	cmp	r3, r2
 8002cf8:	d025      	beq.n	8002d46 <HAL_GPIO_Init+0x21e>
 8002cfa:	687b      	ldr	r3, [r7, #4]
 8002cfc:	4a1a      	ldr	r2, [pc, #104]	; (8002d68 <HAL_GPIO_Init+0x240>)
 8002cfe:	4293      	cmp	r3, r2
 8002d00:	d01f      	beq.n	8002d42 <HAL_GPIO_Init+0x21a>
 8002d02:	687b      	ldr	r3, [r7, #4]
 8002d04:	4a19      	ldr	r2, [pc, #100]	; (8002d6c <HAL_GPIO_Init+0x244>)
 8002d06:	4293      	cmp	r3, r2
 8002d08:	d019      	beq.n	8002d3e <HAL_GPIO_Init+0x216>
 8002d0a:	687b      	ldr	r3, [r7, #4]
 8002d0c:	4a18      	ldr	r2, [pc, #96]	; (8002d70 <HAL_GPIO_Init+0x248>)
 8002d0e:	4293      	cmp	r3, r2
 8002d10:	d013      	beq.n	8002d3a <HAL_GPIO_Init+0x212>
 8002d12:	687b      	ldr	r3, [r7, #4]
 8002d14:	4a17      	ldr	r2, [pc, #92]	; (8002d74 <HAL_GPIO_Init+0x24c>)
 8002d16:	4293      	cmp	r3, r2
 8002d18:	d00d      	beq.n	8002d36 <HAL_GPIO_Init+0x20e>
 8002d1a:	687b      	ldr	r3, [r7, #4]
 8002d1c:	4a16      	ldr	r2, [pc, #88]	; (8002d78 <HAL_GPIO_Init+0x250>)
 8002d1e:	4293      	cmp	r3, r2
 8002d20:	d007      	beq.n	8002d32 <HAL_GPIO_Init+0x20a>
 8002d22:	687b      	ldr	r3, [r7, #4]
 8002d24:	4a15      	ldr	r2, [pc, #84]	; (8002d7c <HAL_GPIO_Init+0x254>)
 8002d26:	4293      	cmp	r3, r2
 8002d28:	d101      	bne.n	8002d2e <HAL_GPIO_Init+0x206>
 8002d2a:	2309      	movs	r3, #9
 8002d2c:	e029      	b.n	8002d82 <HAL_GPIO_Init+0x25a>
 8002d2e:	230a      	movs	r3, #10
 8002d30:	e027      	b.n	8002d82 <HAL_GPIO_Init+0x25a>
 8002d32:	2307      	movs	r3, #7
 8002d34:	e025      	b.n	8002d82 <HAL_GPIO_Init+0x25a>
 8002d36:	2306      	movs	r3, #6
 8002d38:	e023      	b.n	8002d82 <HAL_GPIO_Init+0x25a>
 8002d3a:	2305      	movs	r3, #5
 8002d3c:	e021      	b.n	8002d82 <HAL_GPIO_Init+0x25a>
 8002d3e:	2304      	movs	r3, #4
 8002d40:	e01f      	b.n	8002d82 <HAL_GPIO_Init+0x25a>
 8002d42:	2303      	movs	r3, #3
 8002d44:	e01d      	b.n	8002d82 <HAL_GPIO_Init+0x25a>
 8002d46:	2302      	movs	r3, #2
 8002d48:	e01b      	b.n	8002d82 <HAL_GPIO_Init+0x25a>
 8002d4a:	2301      	movs	r3, #1
 8002d4c:	e019      	b.n	8002d82 <HAL_GPIO_Init+0x25a>
 8002d4e:	bf00      	nop
 8002d50:	58000080 	.word	0x58000080
 8002d54:	58024400 	.word	0x58024400
 8002d58:	58000400 	.word	0x58000400
 8002d5c:	58020000 	.word	0x58020000
 8002d60:	58020400 	.word	0x58020400
 8002d64:	58020800 	.word	0x58020800
 8002d68:	58020c00 	.word	0x58020c00
 8002d6c:	58021000 	.word	0x58021000
 8002d70:	58021400 	.word	0x58021400
 8002d74:	58021800 	.word	0x58021800
 8002d78:	58021c00 	.word	0x58021c00
 8002d7c:	58022400 	.word	0x58022400
 8002d80:	2300      	movs	r3, #0
 8002d82:	69fa      	ldr	r2, [r7, #28]
 8002d84:	f002 0203 	and.w	r2, r2, #3
 8002d88:	0092      	lsls	r2, r2, #2
 8002d8a:	4093      	lsls	r3, r2
 8002d8c:	69ba      	ldr	r2, [r7, #24]
 8002d8e:	4313      	orrs	r3, r2
 8002d90:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8002d92:	4938      	ldr	r1, [pc, #224]	; (8002e74 <HAL_GPIO_Init+0x34c>)
 8002d94:	69fb      	ldr	r3, [r7, #28]
 8002d96:	089b      	lsrs	r3, r3, #2
 8002d98:	3302      	adds	r3, #2
 8002d9a:	69ba      	ldr	r2, [r7, #24]
 8002d9c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8002da0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002da4:	681b      	ldr	r3, [r3, #0]
 8002da6:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8002da8:	693b      	ldr	r3, [r7, #16]
 8002daa:	43db      	mvns	r3, r3
 8002dac:	69ba      	ldr	r2, [r7, #24]
 8002dae:	4013      	ands	r3, r2
 8002db0:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8002db2:	683b      	ldr	r3, [r7, #0]
 8002db4:	685b      	ldr	r3, [r3, #4]
 8002db6:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002dba:	2b00      	cmp	r3, #0
 8002dbc:	d003      	beq.n	8002dc6 <HAL_GPIO_Init+0x29e>
        {
          temp |= iocurrent;
 8002dbe:	69ba      	ldr	r2, [r7, #24]
 8002dc0:	693b      	ldr	r3, [r7, #16]
 8002dc2:	4313      	orrs	r3, r2
 8002dc4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR1 = temp;
 8002dc6:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8002dca:	69bb      	ldr	r3, [r7, #24]
 8002dcc:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 8002dce:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002dd2:	685b      	ldr	r3, [r3, #4]
 8002dd4:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8002dd6:	693b      	ldr	r3, [r7, #16]
 8002dd8:	43db      	mvns	r3, r3
 8002dda:	69ba      	ldr	r2, [r7, #24]
 8002ddc:	4013      	ands	r3, r2
 8002dde:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8002de0:	683b      	ldr	r3, [r7, #0]
 8002de2:	685b      	ldr	r3, [r3, #4]
 8002de4:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002de8:	2b00      	cmp	r3, #0
 8002dea:	d003      	beq.n	8002df4 <HAL_GPIO_Init+0x2cc>
        {
          temp |= iocurrent;
 8002dec:	69ba      	ldr	r2, [r7, #24]
 8002dee:	693b      	ldr	r3, [r7, #16]
 8002df0:	4313      	orrs	r3, r2
 8002df2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR1 = temp;
 8002df4:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8002df8:	69bb      	ldr	r3, [r7, #24]
 8002dfa:	6053      	str	r3, [r2, #4]

        temp = EXTI_CurrentCPU->EMR1;
 8002dfc:	697b      	ldr	r3, [r7, #20]
 8002dfe:	685b      	ldr	r3, [r3, #4]
 8002e00:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8002e02:	693b      	ldr	r3, [r7, #16]
 8002e04:	43db      	mvns	r3, r3
 8002e06:	69ba      	ldr	r2, [r7, #24]
 8002e08:	4013      	ands	r3, r2
 8002e0a:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8002e0c:	683b      	ldr	r3, [r7, #0]
 8002e0e:	685b      	ldr	r3, [r3, #4]
 8002e10:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002e14:	2b00      	cmp	r3, #0
 8002e16:	d003      	beq.n	8002e20 <HAL_GPIO_Init+0x2f8>
        {
          temp |= iocurrent;
 8002e18:	69ba      	ldr	r2, [r7, #24]
 8002e1a:	693b      	ldr	r3, [r7, #16]
 8002e1c:	4313      	orrs	r3, r2
 8002e1e:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->EMR1 = temp;
 8002e20:	697b      	ldr	r3, [r7, #20]
 8002e22:	69ba      	ldr	r2, [r7, #24]
 8002e24:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
 8002e26:	697b      	ldr	r3, [r7, #20]
 8002e28:	681b      	ldr	r3, [r3, #0]
 8002e2a:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8002e2c:	693b      	ldr	r3, [r7, #16]
 8002e2e:	43db      	mvns	r3, r3
 8002e30:	69ba      	ldr	r2, [r7, #24]
 8002e32:	4013      	ands	r3, r2
 8002e34:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8002e36:	683b      	ldr	r3, [r7, #0]
 8002e38:	685b      	ldr	r3, [r3, #4]
 8002e3a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002e3e:	2b00      	cmp	r3, #0
 8002e40:	d003      	beq.n	8002e4a <HAL_GPIO_Init+0x322>
        {
          temp |= iocurrent;
 8002e42:	69ba      	ldr	r2, [r7, #24]
 8002e44:	693b      	ldr	r3, [r7, #16]
 8002e46:	4313      	orrs	r3, r2
 8002e48:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->IMR1 = temp;
 8002e4a:	697b      	ldr	r3, [r7, #20]
 8002e4c:	69ba      	ldr	r2, [r7, #24]
 8002e4e:	601a      	str	r2, [r3, #0]
      }
    }

    position++;
 8002e50:	69fb      	ldr	r3, [r7, #28]
 8002e52:	3301      	adds	r3, #1
 8002e54:	61fb      	str	r3, [r7, #28]
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8002e56:	683b      	ldr	r3, [r7, #0]
 8002e58:	681a      	ldr	r2, [r3, #0]
 8002e5a:	69fb      	ldr	r3, [r7, #28]
 8002e5c:	fa22 f303 	lsr.w	r3, r2, r3
 8002e60:	2b00      	cmp	r3, #0
 8002e62:	f47f ae6b 	bne.w	8002b3c <HAL_GPIO_Init+0x14>
  }
}
 8002e66:	bf00      	nop
 8002e68:	bf00      	nop
 8002e6a:	3724      	adds	r7, #36	; 0x24
 8002e6c:	46bd      	mov	sp, r7
 8002e6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e72:	4770      	bx	lr
 8002e74:	58000400 	.word	0x58000400

08002e78 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002e78:	b480      	push	{r7}
 8002e7a:	b083      	sub	sp, #12
 8002e7c:	af00      	add	r7, sp, #0
 8002e7e:	6078      	str	r0, [r7, #4]
 8002e80:	460b      	mov	r3, r1
 8002e82:	807b      	strh	r3, [r7, #2]
 8002e84:	4613      	mov	r3, r2
 8002e86:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8002e88:	787b      	ldrb	r3, [r7, #1]
 8002e8a:	2b00      	cmp	r3, #0
 8002e8c:	d003      	beq.n	8002e96 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8002e8e:	887a      	ldrh	r2, [r7, #2]
 8002e90:	687b      	ldr	r3, [r7, #4]
 8002e92:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
  }
}
 8002e94:	e003      	b.n	8002e9e <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 8002e96:	887b      	ldrh	r3, [r7, #2]
 8002e98:	041a      	lsls	r2, r3, #16
 8002e9a:	687b      	ldr	r3, [r7, #4]
 8002e9c:	619a      	str	r2, [r3, #24]
}
 8002e9e:	bf00      	nop
 8002ea0:	370c      	adds	r7, #12
 8002ea2:	46bd      	mov	sp, r7
 8002ea4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ea8:	4770      	bx	lr
	...

08002eac <HAL_NOR_Init>:
  * @param  ExtTiming pointer to NOR extended mode timing structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_NOR_Init(NOR_HandleTypeDef *hnor, FMC_NORSRAM_TimingTypeDef *Timing,
                               FMC_NORSRAM_TimingTypeDef *ExtTiming)
{
 8002eac:	b580      	push	{r7, lr}
 8002eae:	b086      	sub	sp, #24
 8002eb0:	af00      	add	r7, sp, #0
 8002eb2:	60f8      	str	r0, [r7, #12]
 8002eb4:	60b9      	str	r1, [r7, #8]
 8002eb6:	607a      	str	r2, [r7, #4]
  uint32_t deviceaddress;
  HAL_StatusTypeDef status = HAL_OK;
 8002eb8:	2300      	movs	r3, #0
 8002eba:	75fb      	strb	r3, [r7, #23]

  /* Check the NOR handle parameter */
  if (hnor == NULL)
 8002ebc:	68fb      	ldr	r3, [r7, #12]
 8002ebe:	2b00      	cmp	r3, #0
 8002ec0:	d101      	bne.n	8002ec6 <HAL_NOR_Init+0x1a>
  {
    return HAL_ERROR;
 8002ec2:	2301      	movs	r3, #1
 8002ec4:	e07a      	b.n	8002fbc <HAL_NOR_Init+0x110>
  }

  if (hnor->State == HAL_NOR_STATE_RESET)
 8002ec6:	68fb      	ldr	r3, [r7, #12]
 8002ec8:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8002ecc:	b2db      	uxtb	r3, r3
 8002ece:	2b00      	cmp	r3, #0
 8002ed0:	d106      	bne.n	8002ee0 <HAL_NOR_Init+0x34>
  {
    /* Allocate lock resource and initialize it */
    hnor->Lock = HAL_UNLOCKED;
 8002ed2:	68fb      	ldr	r3, [r7, #12]
 8002ed4:	2200      	movs	r2, #0
 8002ed6:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44

    /* Init the low level hardware */
    hnor->MspInitCallback(hnor);
#else
    /* Initialize the low level hardware (MSP) */
    HAL_NOR_MspInit(hnor);
 8002eda:	68f8      	ldr	r0, [r7, #12]
 8002edc:	f7fe fbf4 	bl	80016c8 <HAL_NOR_MspInit>
#endif /* (USE_HAL_NOR_REGISTER_CALLBACKS) */
  }

  /* Initialize NOR control Interface */
  (void)FMC_NORSRAM_Init(hnor->Instance, &(hnor->Init));
 8002ee0:	68fb      	ldr	r3, [r7, #12]
 8002ee2:	681a      	ldr	r2, [r3, #0]
 8002ee4:	68fb      	ldr	r3, [r7, #12]
 8002ee6:	3308      	adds	r3, #8
 8002ee8:	4619      	mov	r1, r3
 8002eea:	4610      	mov	r0, r2
 8002eec:	f004 fd2e 	bl	800794c <FMC_NORSRAM_Init>

  /* Initialize NOR timing Interface */
  (void)FMC_NORSRAM_Timing_Init(hnor->Instance, Timing, hnor->Init.NSBank);
 8002ef0:	68fb      	ldr	r3, [r7, #12]
 8002ef2:	6818      	ldr	r0, [r3, #0]
 8002ef4:	68fb      	ldr	r3, [r7, #12]
 8002ef6:	689b      	ldr	r3, [r3, #8]
 8002ef8:	461a      	mov	r2, r3
 8002efa:	68b9      	ldr	r1, [r7, #8]
 8002efc:	f004 fdb6 	bl	8007a6c <FMC_NORSRAM_Timing_Init>

  /* Initialize NOR extended mode timing Interface */
  (void)FMC_NORSRAM_Extended_Timing_Init(hnor->Extended, ExtTiming, hnor->Init.NSBank, hnor->Init.ExtendedMode);
 8002f00:	68fb      	ldr	r3, [r7, #12]
 8002f02:	6858      	ldr	r0, [r3, #4]
 8002f04:	68fb      	ldr	r3, [r7, #12]
 8002f06:	689a      	ldr	r2, [r3, #8]
 8002f08:	68fb      	ldr	r3, [r7, #12]
 8002f0a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002f0c:	6879      	ldr	r1, [r7, #4]
 8002f0e:	f004 fdfd 	bl	8007b0c <FMC_NORSRAM_Extended_Timing_Init>

  /* Enable the NORSRAM device */
  __FMC_NORSRAM_ENABLE(hnor->Instance, hnor->Init.NSBank);
 8002f12:	68fb      	ldr	r3, [r7, #12]
 8002f14:	681b      	ldr	r3, [r3, #0]
 8002f16:	68fa      	ldr	r2, [r7, #12]
 8002f18:	6892      	ldr	r2, [r2, #8]
 8002f1a:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8002f1e:	68fb      	ldr	r3, [r7, #12]
 8002f20:	681b      	ldr	r3, [r3, #0]
 8002f22:	68fa      	ldr	r2, [r7, #12]
 8002f24:	6892      	ldr	r2, [r2, #8]
 8002f26:	f041 0101 	orr.w	r1, r1, #1
 8002f2a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

  /* Initialize NOR Memory Data Width*/
  if (hnor->Init.MemoryDataWidth == FMC_NORSRAM_MEM_BUS_WIDTH_8)
 8002f2e:	68fb      	ldr	r3, [r7, #12]
 8002f30:	695b      	ldr	r3, [r3, #20]
 8002f32:	2b00      	cmp	r3, #0
 8002f34:	d103      	bne.n	8002f3e <HAL_NOR_Init+0x92>
  {
    uwNORMemoryDataWidth = NOR_MEMORY_8B;
 8002f36:	4b23      	ldr	r3, [pc, #140]	; (8002fc4 <HAL_NOR_Init+0x118>)
 8002f38:	2200      	movs	r2, #0
 8002f3a:	601a      	str	r2, [r3, #0]
 8002f3c:	e002      	b.n	8002f44 <HAL_NOR_Init+0x98>
  }
  else
  {
    uwNORMemoryDataWidth = NOR_MEMORY_16B;
 8002f3e:	4b21      	ldr	r3, [pc, #132]	; (8002fc4 <HAL_NOR_Init+0x118>)
 8002f40:	2201      	movs	r2, #1
 8002f42:	601a      	str	r2, [r3, #0]
  }

  /* Enable FMC Peripheral */
  __FMC_ENABLE();
 8002f44:	4b20      	ldr	r3, [pc, #128]	; (8002fc8 <HAL_NOR_Init+0x11c>)
 8002f46:	681b      	ldr	r3, [r3, #0]
 8002f48:	4a1f      	ldr	r2, [pc, #124]	; (8002fc8 <HAL_NOR_Init+0x11c>)
 8002f4a:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8002f4e:	6013      	str	r3, [r2, #0]

  /* Initialize the NOR controller state */
  hnor->State = HAL_NOR_STATE_READY;
 8002f50:	68fb      	ldr	r3, [r7, #12]
 8002f52:	2201      	movs	r2, #1
 8002f54:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Select the NOR device address */
  if (hnor->Init.NSBank == FMC_NORSRAM_BANK1)
 8002f58:	68fb      	ldr	r3, [r7, #12]
 8002f5a:	689b      	ldr	r3, [r3, #8]
 8002f5c:	2b00      	cmp	r3, #0
 8002f5e:	d103      	bne.n	8002f68 <HAL_NOR_Init+0xbc>
  {
    deviceaddress = NOR_MEMORY_ADRESS1;
 8002f60:	f04f 43c0 	mov.w	r3, #1610612736	; 0x60000000
 8002f64:	613b      	str	r3, [r7, #16]
 8002f66:	e012      	b.n	8002f8e <HAL_NOR_Init+0xe2>
  }
  else if (hnor->Init.NSBank == FMC_NORSRAM_BANK2)
 8002f68:	68fb      	ldr	r3, [r7, #12]
 8002f6a:	689b      	ldr	r3, [r3, #8]
 8002f6c:	2b02      	cmp	r3, #2
 8002f6e:	d103      	bne.n	8002f78 <HAL_NOR_Init+0xcc>
  {
    deviceaddress = NOR_MEMORY_ADRESS2;
 8002f70:	f04f 43c8 	mov.w	r3, #1677721600	; 0x64000000
 8002f74:	613b      	str	r3, [r7, #16]
 8002f76:	e00a      	b.n	8002f8e <HAL_NOR_Init+0xe2>
  }
  else if (hnor->Init.NSBank == FMC_NORSRAM_BANK3)
 8002f78:	68fb      	ldr	r3, [r7, #12]
 8002f7a:	689b      	ldr	r3, [r3, #8]
 8002f7c:	2b04      	cmp	r3, #4
 8002f7e:	d103      	bne.n	8002f88 <HAL_NOR_Init+0xdc>
  {
    deviceaddress = NOR_MEMORY_ADRESS3;
 8002f80:	f04f 43d0 	mov.w	r3, #1744830464	; 0x68000000
 8002f84:	613b      	str	r3, [r7, #16]
 8002f86:	e002      	b.n	8002f8e <HAL_NOR_Init+0xe2>
  }
  else /* FMC_NORSRAM_BANK4 */
  {
    deviceaddress = NOR_MEMORY_ADRESS4;
 8002f88:	f04f 43d8 	mov.w	r3, #1811939328	; 0x6c000000
 8002f8c:	613b      	str	r3, [r7, #16]
  }

  if (hnor->Init.WriteOperation == FMC_WRITE_OPERATION_DISABLE)
 8002f8e:	68fb      	ldr	r3, [r7, #12]
 8002f90:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002f92:	2b00      	cmp	r3, #0
 8002f94:	d10c      	bne.n	8002fb0 <HAL_NOR_Init+0x104>
  {
    (void)FMC_NORSRAM_WriteOperation_Disable(hnor->Instance, hnor->Init.NSBank);
 8002f96:	68fb      	ldr	r3, [r7, #12]
 8002f98:	681a      	ldr	r2, [r3, #0]
 8002f9a:	68fb      	ldr	r3, [r7, #12]
 8002f9c:	689b      	ldr	r3, [r3, #8]
 8002f9e:	4619      	mov	r1, r3
 8002fa0:	4610      	mov	r0, r2
 8002fa2:	f004 fdeb 	bl	8007b7c <FMC_NORSRAM_WriteOperation_Disable>

    /* Update the NOR controller state */
    hnor->State = HAL_NOR_STATE_PROTECTED;
 8002fa6:	68fb      	ldr	r3, [r7, #12]
 8002fa8:	2204      	movs	r2, #4
 8002faa:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8002fae:	e004      	b.n	8002fba <HAL_NOR_Init+0x10e>
  {
    /* Get the value of the command set */
    //NOR_WRITE(NOR_ADDR_SHIFT(deviceaddress, uwNORMemoryDataWidth, NOR_CMD_ADDRESS_FIRST_CFI), NOR_CMD_DATA_CFI);
    //hnor->CommandSet = *(__IO uint16_t *) NOR_ADDR_SHIFT(deviceaddress, uwNORMemoryDataWidth, NOR_ADDRESS_COMMAND_SET);

    status = HAL_NOR_ReturnToReadMode(hnor);
 8002fb0:	68f8      	ldr	r0, [r7, #12]
 8002fb2:	f000 f80b 	bl	8002fcc <HAL_NOR_ReturnToReadMode>
 8002fb6:	4603      	mov	r3, r0
 8002fb8:	75fb      	strb	r3, [r7, #23]
  }

  return status;
 8002fba:	7dfb      	ldrb	r3, [r7, #23]
}
 8002fbc:	4618      	mov	r0, r3
 8002fbe:	3718      	adds	r7, #24
 8002fc0:	46bd      	mov	sp, r7
 8002fc2:	bd80      	pop	{r7, pc}
 8002fc4:	20000684 	.word	0x20000684
 8002fc8:	52004000 	.word	0x52004000

08002fcc <HAL_NOR_ReturnToReadMode>:
  * @param  hnor pointer to a NOR_HandleTypeDef structure that contains
  *                the configuration information for NOR module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_NOR_ReturnToReadMode(NOR_HandleTypeDef *hnor)
{
 8002fcc:	b480      	push	{r7}
 8002fce:	b085      	sub	sp, #20
 8002fd0:	af00      	add	r7, sp, #0
 8002fd2:	6078      	str	r0, [r7, #4]
  uint32_t deviceaddress;
  HAL_NOR_StateTypeDef state;
  HAL_StatusTypeDef status = HAL_OK;
 8002fd4:	2300      	movs	r3, #0
 8002fd6:	72fb      	strb	r3, [r7, #11]

  /* Check the NOR controller state */
  state = hnor->State;
 8002fd8:	687b      	ldr	r3, [r7, #4]
 8002fda:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8002fde:	72bb      	strb	r3, [r7, #10]
  if (state == HAL_NOR_STATE_BUSY)
 8002fe0:	7abb      	ldrb	r3, [r7, #10]
 8002fe2:	2b02      	cmp	r3, #2
 8002fe4:	d101      	bne.n	8002fea <HAL_NOR_ReturnToReadMode+0x1e>
  {
    return HAL_BUSY;
 8002fe6:	2302      	movs	r3, #2
 8002fe8:	e052      	b.n	8003090 <HAL_NOR_ReturnToReadMode+0xc4>
  }
  else if (state == HAL_NOR_STATE_PROTECTED)
 8002fea:	7abb      	ldrb	r3, [r7, #10]
 8002fec:	2b04      	cmp	r3, #4
 8002fee:	d101      	bne.n	8002ff4 <HAL_NOR_ReturnToReadMode+0x28>
  {
    return HAL_ERROR;
 8002ff0:	2301      	movs	r3, #1
 8002ff2:	e04d      	b.n	8003090 <HAL_NOR_ReturnToReadMode+0xc4>
  }
  else if (state == HAL_NOR_STATE_READY)
 8002ff4:	7abb      	ldrb	r3, [r7, #10]
 8002ff6:	2b01      	cmp	r3, #1
 8002ff8:	d149      	bne.n	800308e <HAL_NOR_ReturnToReadMode+0xc2>
  {
    /* Process Locked */
    __HAL_LOCK(hnor);
 8002ffa:	687b      	ldr	r3, [r7, #4]
 8002ffc:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8003000:	2b01      	cmp	r3, #1
 8003002:	d101      	bne.n	8003008 <HAL_NOR_ReturnToReadMode+0x3c>
 8003004:	2302      	movs	r3, #2
 8003006:	e043      	b.n	8003090 <HAL_NOR_ReturnToReadMode+0xc4>
 8003008:	687b      	ldr	r3, [r7, #4]
 800300a:	2201      	movs	r2, #1
 800300c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44

    /* Update the NOR controller state */
    hnor->State = HAL_NOR_STATE_BUSY;
 8003010:	687b      	ldr	r3, [r7, #4]
 8003012:	2202      	movs	r2, #2
 8003014:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

    /* Select the NOR device address */
    if (hnor->Init.NSBank == FMC_NORSRAM_BANK1)
 8003018:	687b      	ldr	r3, [r7, #4]
 800301a:	689b      	ldr	r3, [r3, #8]
 800301c:	2b00      	cmp	r3, #0
 800301e:	d103      	bne.n	8003028 <HAL_NOR_ReturnToReadMode+0x5c>
    {
      deviceaddress = NOR_MEMORY_ADRESS1;
 8003020:	f04f 43c0 	mov.w	r3, #1610612736	; 0x60000000
 8003024:	60fb      	str	r3, [r7, #12]
 8003026:	e012      	b.n	800304e <HAL_NOR_ReturnToReadMode+0x82>
    }
    else if (hnor->Init.NSBank == FMC_NORSRAM_BANK2)
 8003028:	687b      	ldr	r3, [r7, #4]
 800302a:	689b      	ldr	r3, [r3, #8]
 800302c:	2b02      	cmp	r3, #2
 800302e:	d103      	bne.n	8003038 <HAL_NOR_ReturnToReadMode+0x6c>
    {
      deviceaddress = NOR_MEMORY_ADRESS2;
 8003030:	f04f 43c8 	mov.w	r3, #1677721600	; 0x64000000
 8003034:	60fb      	str	r3, [r7, #12]
 8003036:	e00a      	b.n	800304e <HAL_NOR_ReturnToReadMode+0x82>
    }
    else if (hnor->Init.NSBank == FMC_NORSRAM_BANK3)
 8003038:	687b      	ldr	r3, [r7, #4]
 800303a:	689b      	ldr	r3, [r3, #8]
 800303c:	2b04      	cmp	r3, #4
 800303e:	d103      	bne.n	8003048 <HAL_NOR_ReturnToReadMode+0x7c>
    {
      deviceaddress = NOR_MEMORY_ADRESS3;
 8003040:	f04f 43d0 	mov.w	r3, #1744830464	; 0x68000000
 8003044:	60fb      	str	r3, [r7, #12]
 8003046:	e002      	b.n	800304e <HAL_NOR_ReturnToReadMode+0x82>
    }
    else /* FMC_NORSRAM_BANK4 */
    {
      deviceaddress = NOR_MEMORY_ADRESS4;
 8003048:	f04f 43d8 	mov.w	r3, #1811939328	; 0x6c000000
 800304c:	60fb      	str	r3, [r7, #12]
    }

    if (hnor->CommandSet == NOR_AMD_FUJITSU_COMMAND_SET)
 800304e:	687b      	ldr	r3, [r7, #4]
 8003050:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003052:	2b02      	cmp	r3, #2
 8003054:	d105      	bne.n	8003062 <HAL_NOR_ReturnToReadMode+0x96>
    {
      NOR_WRITE(deviceaddress, NOR_CMD_DATA_READ_RESET);
 8003056:	68fb      	ldr	r3, [r7, #12]
 8003058:	22f0      	movs	r2, #240	; 0xf0
 800305a:	801a      	strh	r2, [r3, #0]
  __ASM volatile ("dsb 0xF":::"memory");
 800305c:	f3bf 8f4f 	dsb	sy
}
 8003060:	e00b      	b.n	800307a <HAL_NOR_ReturnToReadMode+0xae>
    }
    else if (hnor->CommandSet == NOR_INTEL_SHARP_EXT_COMMAND_SET)
 8003062:	687b      	ldr	r3, [r7, #4]
 8003064:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003066:	2b01      	cmp	r3, #1
 8003068:	d105      	bne.n	8003076 <HAL_NOR_ReturnToReadMode+0xaa>
    {
      NOR_WRITE(deviceaddress, NOR_CMD_READ_ARRAY);
 800306a:	68fb      	ldr	r3, [r7, #12]
 800306c:	22ff      	movs	r2, #255	; 0xff
 800306e:	801a      	strh	r2, [r3, #0]
  __ASM volatile ("dsb 0xF":::"memory");
 8003070:	f3bf 8f4f 	dsb	sy
}
 8003074:	e001      	b.n	800307a <HAL_NOR_ReturnToReadMode+0xae>
    }
    else
    {
      /* Primary command set not supported by the driver */
      status = HAL_ERROR;
 8003076:	2301      	movs	r3, #1
 8003078:	72fb      	strb	r3, [r7, #11]
    }

    /* Check the NOR controller state */
    hnor->State = state;
 800307a:	687b      	ldr	r3, [r7, #4]
 800307c:	7aba      	ldrb	r2, [r7, #10]
 800307e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

    /* Process unlocked */
    __HAL_UNLOCK(hnor);
 8003082:	687b      	ldr	r3, [r7, #4]
 8003084:	2200      	movs	r2, #0
 8003086:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  else
  {
    return HAL_ERROR;
  }

  return status;
 800308a:	7afb      	ldrb	r3, [r7, #11]
 800308c:	e000      	b.n	8003090 <HAL_NOR_ReturnToReadMode+0xc4>
    return HAL_ERROR;
 800308e:	2301      	movs	r3, #1
}
 8003090:	4618      	mov	r0, r3
 8003092:	3714      	adds	r7, #20
 8003094:	46bd      	mov	sp, r7
 8003096:	f85d 7b04 	ldr.w	r7, [sp], #4
 800309a:	4770      	bx	lr

0800309c <HAL_PWREx_ConfigSupply>:
  *         PWR_SMPS_2V5_SUPPLIES_EXT are used only for lines that supports SMPS
  *         regulator.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply (uint32_t SupplySource)
{
 800309c:	b580      	push	{r7, lr}
 800309e:	b084      	sub	sp, #16
 80030a0:	af00      	add	r7, sp, #0
 80030a2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param (IS_PWR_SUPPLY (SupplySource));

  /* Check if supply source was configured */
#if defined (PWR_FLAG_SCUEN)
  if (__HAL_PWR_GET_FLAG (PWR_FLAG_SCUEN) == 0U)
 80030a4:	4b19      	ldr	r3, [pc, #100]	; (800310c <HAL_PWREx_ConfigSupply+0x70>)
 80030a6:	68db      	ldr	r3, [r3, #12]
 80030a8:	f003 0304 	and.w	r3, r3, #4
 80030ac:	2b04      	cmp	r3, #4
 80030ae:	d00a      	beq.n	80030c6 <HAL_PWREx_ConfigSupply+0x2a>
#else
  if ((PWR->CR3 & (PWR_CR3_SMPSEN | PWR_CR3_LDOEN | PWR_CR3_BYPASS)) != (PWR_CR3_SMPSEN | PWR_CR3_LDOEN))
#endif /* defined (PWR_FLAG_SCUEN) */
  {
    /* Check supply configuration */
    if ((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
 80030b0:	4b16      	ldr	r3, [pc, #88]	; (800310c <HAL_PWREx_ConfigSupply+0x70>)
 80030b2:	68db      	ldr	r3, [r3, #12]
 80030b4:	f003 0307 	and.w	r3, r3, #7
 80030b8:	687a      	ldr	r2, [r7, #4]
 80030ba:	429a      	cmp	r2, r3
 80030bc:	d001      	beq.n	80030c2 <HAL_PWREx_ConfigSupply+0x26>
    {
      /* Supply configuration update locked, can't apply a new supply config */
      return HAL_ERROR;
 80030be:	2301      	movs	r3, #1
 80030c0:	e01f      	b.n	8003102 <HAL_PWREx_ConfigSupply+0x66>
    else
    {
      /* Supply configuration update locked, but new supply configuration
         matches with old supply configuration : nothing to do
      */
      return HAL_OK;
 80030c2:	2300      	movs	r3, #0
 80030c4:	e01d      	b.n	8003102 <HAL_PWREx_ConfigSupply+0x66>
    }
  }

  /* Set the power supply configuration */
  MODIFY_REG (PWR->CR3, PWR_SUPPLY_CONFIG_MASK, SupplySource);
 80030c6:	4b11      	ldr	r3, [pc, #68]	; (800310c <HAL_PWREx_ConfigSupply+0x70>)
 80030c8:	68db      	ldr	r3, [r3, #12]
 80030ca:	f023 0207 	bic.w	r2, r3, #7
 80030ce:	490f      	ldr	r1, [pc, #60]	; (800310c <HAL_PWREx_ConfigSupply+0x70>)
 80030d0:	687b      	ldr	r3, [r7, #4]
 80030d2:	4313      	orrs	r3, r2
 80030d4:	60cb      	str	r3, [r1, #12]

  /* Get tick */
  tickstart = HAL_GetTick ();
 80030d6:	f7fe fce9 	bl	8001aac <HAL_GetTick>
 80030da:	60f8      	str	r0, [r7, #12]

  /* Wait till voltage level flag is set */
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 80030dc:	e009      	b.n	80030f2 <HAL_PWREx_ConfigSupply+0x56>
  {
    if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 80030de:	f7fe fce5 	bl	8001aac <HAL_GetTick>
 80030e2:	4602      	mov	r2, r0
 80030e4:	68fb      	ldr	r3, [r7, #12]
 80030e6:	1ad3      	subs	r3, r2, r3
 80030e8:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80030ec:	d901      	bls.n	80030f2 <HAL_PWREx_ConfigSupply+0x56>
    {
      return HAL_ERROR;
 80030ee:	2301      	movs	r3, #1
 80030f0:	e007      	b.n	8003102 <HAL_PWREx_ConfigSupply+0x66>
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 80030f2:	4b06      	ldr	r3, [pc, #24]	; (800310c <HAL_PWREx_ConfigSupply+0x70>)
 80030f4:	685b      	ldr	r3, [r3, #4]
 80030f6:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80030fa:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80030fe:	d1ee      	bne.n	80030de <HAL_PWREx_ConfigSupply+0x42>
      }
    }
  }
#endif /* defined (SMPS) */

  return HAL_OK;
 8003100:	2300      	movs	r3, #0
}
 8003102:	4618      	mov	r0, r3
 8003104:	3710      	adds	r7, #16
 8003106:	46bd      	mov	sp, r7
 8003108:	bd80      	pop	{r7, pc}
 800310a:	bf00      	nop
 800310c:	58024800 	.word	0x58024800

08003110 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003110:	b580      	push	{r7, lr}
 8003112:	b08c      	sub	sp, #48	; 0x30
 8003114:	af00      	add	r7, sp, #0
 8003116:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp1_pllckcfg, temp2_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8003118:	687b      	ldr	r3, [r7, #4]
 800311a:	2b00      	cmp	r3, #0
 800311c:	d101      	bne.n	8003122 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800311e:	2301      	movs	r3, #1
 8003120:	e3c8      	b.n	80038b4 <HAL_RCC_OscConfig+0x7a4>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003122:	687b      	ldr	r3, [r7, #4]
 8003124:	681b      	ldr	r3, [r3, #0]
 8003126:	f003 0301 	and.w	r3, r3, #1
 800312a:	2b00      	cmp	r3, #0
 800312c:	f000 8087 	beq.w	800323e <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8003130:	4b88      	ldr	r3, [pc, #544]	; (8003354 <HAL_RCC_OscConfig+0x244>)
 8003132:	691b      	ldr	r3, [r3, #16]
 8003134:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8003138:	62fb      	str	r3, [r7, #44]	; 0x2c
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 800313a:	4b86      	ldr	r3, [pc, #536]	; (8003354 <HAL_RCC_OscConfig+0x244>)
 800313c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800313e:	62bb      	str	r3, [r7, #40]	; 0x28
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 8003140:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003142:	2b10      	cmp	r3, #16
 8003144:	d007      	beq.n	8003156 <HAL_RCC_OscConfig+0x46>
 8003146:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003148:	2b18      	cmp	r3, #24
 800314a:	d110      	bne.n	800316e <HAL_RCC_OscConfig+0x5e>
 800314c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800314e:	f003 0303 	and.w	r3, r3, #3
 8003152:	2b02      	cmp	r3, #2
 8003154:	d10b      	bne.n	800316e <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003156:	4b7f      	ldr	r3, [pc, #508]	; (8003354 <HAL_RCC_OscConfig+0x244>)
 8003158:	681b      	ldr	r3, [r3, #0]
 800315a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800315e:	2b00      	cmp	r3, #0
 8003160:	d06c      	beq.n	800323c <HAL_RCC_OscConfig+0x12c>
 8003162:	687b      	ldr	r3, [r7, #4]
 8003164:	685b      	ldr	r3, [r3, #4]
 8003166:	2b00      	cmp	r3, #0
 8003168:	d168      	bne.n	800323c <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 800316a:	2301      	movs	r3, #1
 800316c:	e3a2      	b.n	80038b4 <HAL_RCC_OscConfig+0x7a4>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800316e:	687b      	ldr	r3, [r7, #4]
 8003170:	685b      	ldr	r3, [r3, #4]
 8003172:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003176:	d106      	bne.n	8003186 <HAL_RCC_OscConfig+0x76>
 8003178:	4b76      	ldr	r3, [pc, #472]	; (8003354 <HAL_RCC_OscConfig+0x244>)
 800317a:	681b      	ldr	r3, [r3, #0]
 800317c:	4a75      	ldr	r2, [pc, #468]	; (8003354 <HAL_RCC_OscConfig+0x244>)
 800317e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003182:	6013      	str	r3, [r2, #0]
 8003184:	e02e      	b.n	80031e4 <HAL_RCC_OscConfig+0xd4>
 8003186:	687b      	ldr	r3, [r7, #4]
 8003188:	685b      	ldr	r3, [r3, #4]
 800318a:	2b00      	cmp	r3, #0
 800318c:	d10c      	bne.n	80031a8 <HAL_RCC_OscConfig+0x98>
 800318e:	4b71      	ldr	r3, [pc, #452]	; (8003354 <HAL_RCC_OscConfig+0x244>)
 8003190:	681b      	ldr	r3, [r3, #0]
 8003192:	4a70      	ldr	r2, [pc, #448]	; (8003354 <HAL_RCC_OscConfig+0x244>)
 8003194:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003198:	6013      	str	r3, [r2, #0]
 800319a:	4b6e      	ldr	r3, [pc, #440]	; (8003354 <HAL_RCC_OscConfig+0x244>)
 800319c:	681b      	ldr	r3, [r3, #0]
 800319e:	4a6d      	ldr	r2, [pc, #436]	; (8003354 <HAL_RCC_OscConfig+0x244>)
 80031a0:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80031a4:	6013      	str	r3, [r2, #0]
 80031a6:	e01d      	b.n	80031e4 <HAL_RCC_OscConfig+0xd4>
 80031a8:	687b      	ldr	r3, [r7, #4]
 80031aa:	685b      	ldr	r3, [r3, #4]
 80031ac:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80031b0:	d10c      	bne.n	80031cc <HAL_RCC_OscConfig+0xbc>
 80031b2:	4b68      	ldr	r3, [pc, #416]	; (8003354 <HAL_RCC_OscConfig+0x244>)
 80031b4:	681b      	ldr	r3, [r3, #0]
 80031b6:	4a67      	ldr	r2, [pc, #412]	; (8003354 <HAL_RCC_OscConfig+0x244>)
 80031b8:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80031bc:	6013      	str	r3, [r2, #0]
 80031be:	4b65      	ldr	r3, [pc, #404]	; (8003354 <HAL_RCC_OscConfig+0x244>)
 80031c0:	681b      	ldr	r3, [r3, #0]
 80031c2:	4a64      	ldr	r2, [pc, #400]	; (8003354 <HAL_RCC_OscConfig+0x244>)
 80031c4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80031c8:	6013      	str	r3, [r2, #0]
 80031ca:	e00b      	b.n	80031e4 <HAL_RCC_OscConfig+0xd4>
 80031cc:	4b61      	ldr	r3, [pc, #388]	; (8003354 <HAL_RCC_OscConfig+0x244>)
 80031ce:	681b      	ldr	r3, [r3, #0]
 80031d0:	4a60      	ldr	r2, [pc, #384]	; (8003354 <HAL_RCC_OscConfig+0x244>)
 80031d2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80031d6:	6013      	str	r3, [r2, #0]
 80031d8:	4b5e      	ldr	r3, [pc, #376]	; (8003354 <HAL_RCC_OscConfig+0x244>)
 80031da:	681b      	ldr	r3, [r3, #0]
 80031dc:	4a5d      	ldr	r2, [pc, #372]	; (8003354 <HAL_RCC_OscConfig+0x244>)
 80031de:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80031e2:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80031e4:	687b      	ldr	r3, [r7, #4]
 80031e6:	685b      	ldr	r3, [r3, #4]
 80031e8:	2b00      	cmp	r3, #0
 80031ea:	d013      	beq.n	8003214 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80031ec:	f7fe fc5e 	bl	8001aac <HAL_GetTick>
 80031f0:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 80031f2:	e008      	b.n	8003206 <HAL_RCC_OscConfig+0xf6>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80031f4:	f7fe fc5a 	bl	8001aac <HAL_GetTick>
 80031f8:	4602      	mov	r2, r0
 80031fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80031fc:	1ad3      	subs	r3, r2, r3
 80031fe:	2b64      	cmp	r3, #100	; 0x64
 8003200:	d901      	bls.n	8003206 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8003202:	2303      	movs	r3, #3
 8003204:	e356      	b.n	80038b4 <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8003206:	4b53      	ldr	r3, [pc, #332]	; (8003354 <HAL_RCC_OscConfig+0x244>)
 8003208:	681b      	ldr	r3, [r3, #0]
 800320a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800320e:	2b00      	cmp	r3, #0
 8003210:	d0f0      	beq.n	80031f4 <HAL_RCC_OscConfig+0xe4>
 8003212:	e014      	b.n	800323e <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003214:	f7fe fc4a 	bl	8001aac <HAL_GetTick>
 8003218:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 800321a:	e008      	b.n	800322e <HAL_RCC_OscConfig+0x11e>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800321c:	f7fe fc46 	bl	8001aac <HAL_GetTick>
 8003220:	4602      	mov	r2, r0
 8003222:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003224:	1ad3      	subs	r3, r2, r3
 8003226:	2b64      	cmp	r3, #100	; 0x64
 8003228:	d901      	bls.n	800322e <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 800322a:	2303      	movs	r3, #3
 800322c:	e342      	b.n	80038b4 <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 800322e:	4b49      	ldr	r3, [pc, #292]	; (8003354 <HAL_RCC_OscConfig+0x244>)
 8003230:	681b      	ldr	r3, [r3, #0]
 8003232:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003236:	2b00      	cmp	r3, #0
 8003238:	d1f0      	bne.n	800321c <HAL_RCC_OscConfig+0x10c>
 800323a:	e000      	b.n	800323e <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800323c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800323e:	687b      	ldr	r3, [r7, #4]
 8003240:	681b      	ldr	r3, [r3, #0]
 8003242:	f003 0302 	and.w	r3, r3, #2
 8003246:	2b00      	cmp	r3, #0
 8003248:	f000 808c 	beq.w	8003364 <HAL_RCC_OscConfig+0x254>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSICALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* When the HSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800324c:	4b41      	ldr	r3, [pc, #260]	; (8003354 <HAL_RCC_OscConfig+0x244>)
 800324e:	691b      	ldr	r3, [r3, #16]
 8003250:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8003254:	623b      	str	r3, [r7, #32]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8003256:	4b3f      	ldr	r3, [pc, #252]	; (8003354 <HAL_RCC_OscConfig+0x244>)
 8003258:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800325a:	61fb      	str	r3, [r7, #28]
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 800325c:	6a3b      	ldr	r3, [r7, #32]
 800325e:	2b00      	cmp	r3, #0
 8003260:	d007      	beq.n	8003272 <HAL_RCC_OscConfig+0x162>
 8003262:	6a3b      	ldr	r3, [r7, #32]
 8003264:	2b18      	cmp	r3, #24
 8003266:	d137      	bne.n	80032d8 <HAL_RCC_OscConfig+0x1c8>
 8003268:	69fb      	ldr	r3, [r7, #28]
 800326a:	f003 0303 	and.w	r3, r3, #3
 800326e:	2b00      	cmp	r3, #0
 8003270:	d132      	bne.n	80032d8 <HAL_RCC_OscConfig+0x1c8>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8003272:	4b38      	ldr	r3, [pc, #224]	; (8003354 <HAL_RCC_OscConfig+0x244>)
 8003274:	681b      	ldr	r3, [r3, #0]
 8003276:	f003 0304 	and.w	r3, r3, #4
 800327a:	2b00      	cmp	r3, #0
 800327c:	d005      	beq.n	800328a <HAL_RCC_OscConfig+0x17a>
 800327e:	687b      	ldr	r3, [r7, #4]
 8003280:	68db      	ldr	r3, [r3, #12]
 8003282:	2b00      	cmp	r3, #0
 8003284:	d101      	bne.n	800328a <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 8003286:	2301      	movs	r3, #1
 8003288:	e314      	b.n	80038b4 <HAL_RCC_OscConfig+0x7a4>
      }
      /* Otherwise, only HSI division and calibration are allowed */
      else
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2, HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 800328a:	4b32      	ldr	r3, [pc, #200]	; (8003354 <HAL_RCC_OscConfig+0x244>)
 800328c:	681b      	ldr	r3, [r3, #0]
 800328e:	f023 0219 	bic.w	r2, r3, #25
 8003292:	687b      	ldr	r3, [r7, #4]
 8003294:	68db      	ldr	r3, [r3, #12]
 8003296:	492f      	ldr	r1, [pc, #188]	; (8003354 <HAL_RCC_OscConfig+0x244>)
 8003298:	4313      	orrs	r3, r2
 800329a:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800329c:	f7fe fc06 	bl	8001aac <HAL_GetTick>
 80032a0:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80032a2:	e008      	b.n	80032b6 <HAL_RCC_OscConfig+0x1a6>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80032a4:	f7fe fc02 	bl	8001aac <HAL_GetTick>
 80032a8:	4602      	mov	r2, r0
 80032aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80032ac:	1ad3      	subs	r3, r2, r3
 80032ae:	2b02      	cmp	r3, #2
 80032b0:	d901      	bls.n	80032b6 <HAL_RCC_OscConfig+0x1a6>
          {
            return HAL_TIMEOUT;
 80032b2:	2303      	movs	r3, #3
 80032b4:	e2fe      	b.n	80038b4 <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80032b6:	4b27      	ldr	r3, [pc, #156]	; (8003354 <HAL_RCC_OscConfig+0x244>)
 80032b8:	681b      	ldr	r3, [r3, #0]
 80032ba:	f003 0304 	and.w	r3, r3, #4
 80032be:	2b00      	cmp	r3, #0
 80032c0:	d0f0      	beq.n	80032a4 <HAL_RCC_OscConfig+0x194>
          }
        }
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80032c2:	4b24      	ldr	r3, [pc, #144]	; (8003354 <HAL_RCC_OscConfig+0x244>)
 80032c4:	685b      	ldr	r3, [r3, #4]
 80032c6:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 80032ca:	687b      	ldr	r3, [r7, #4]
 80032cc:	691b      	ldr	r3, [r3, #16]
 80032ce:	061b      	lsls	r3, r3, #24
 80032d0:	4920      	ldr	r1, [pc, #128]	; (8003354 <HAL_RCC_OscConfig+0x244>)
 80032d2:	4313      	orrs	r3, r2
 80032d4:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80032d6:	e045      	b.n	8003364 <HAL_RCC_OscConfig+0x254>
    }

    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 80032d8:	687b      	ldr	r3, [r7, #4]
 80032da:	68db      	ldr	r3, [r3, #12]
 80032dc:	2b00      	cmp	r3, #0
 80032de:	d026      	beq.n	800332e <HAL_RCC_OscConfig+0x21e>
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2,HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 80032e0:	4b1c      	ldr	r3, [pc, #112]	; (8003354 <HAL_RCC_OscConfig+0x244>)
 80032e2:	681b      	ldr	r3, [r3, #0]
 80032e4:	f023 0219 	bic.w	r2, r3, #25
 80032e8:	687b      	ldr	r3, [r7, #4]
 80032ea:	68db      	ldr	r3, [r3, #12]
 80032ec:	4919      	ldr	r1, [pc, #100]	; (8003354 <HAL_RCC_OscConfig+0x244>)
 80032ee:	4313      	orrs	r3, r2
 80032f0:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80032f2:	f7fe fbdb 	bl	8001aac <HAL_GetTick>
 80032f6:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80032f8:	e008      	b.n	800330c <HAL_RCC_OscConfig+0x1fc>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80032fa:	f7fe fbd7 	bl	8001aac <HAL_GetTick>
 80032fe:	4602      	mov	r2, r0
 8003300:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003302:	1ad3      	subs	r3, r2, r3
 8003304:	2b02      	cmp	r3, #2
 8003306:	d901      	bls.n	800330c <HAL_RCC_OscConfig+0x1fc>
          {
            return HAL_TIMEOUT;
 8003308:	2303      	movs	r3, #3
 800330a:	e2d3      	b.n	80038b4 <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800330c:	4b11      	ldr	r3, [pc, #68]	; (8003354 <HAL_RCC_OscConfig+0x244>)
 800330e:	681b      	ldr	r3, [r3, #0]
 8003310:	f003 0304 	and.w	r3, r3, #4
 8003314:	2b00      	cmp	r3, #0
 8003316:	d0f0      	beq.n	80032fa <HAL_RCC_OscConfig+0x1ea>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003318:	4b0e      	ldr	r3, [pc, #56]	; (8003354 <HAL_RCC_OscConfig+0x244>)
 800331a:	685b      	ldr	r3, [r3, #4]
 800331c:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8003320:	687b      	ldr	r3, [r7, #4]
 8003322:	691b      	ldr	r3, [r3, #16]
 8003324:	061b      	lsls	r3, r3, #24
 8003326:	490b      	ldr	r1, [pc, #44]	; (8003354 <HAL_RCC_OscConfig+0x244>)
 8003328:	4313      	orrs	r3, r2
 800332a:	604b      	str	r3, [r1, #4]
 800332c:	e01a      	b.n	8003364 <HAL_RCC_OscConfig+0x254>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800332e:	4b09      	ldr	r3, [pc, #36]	; (8003354 <HAL_RCC_OscConfig+0x244>)
 8003330:	681b      	ldr	r3, [r3, #0]
 8003332:	4a08      	ldr	r2, [pc, #32]	; (8003354 <HAL_RCC_OscConfig+0x244>)
 8003334:	f023 0301 	bic.w	r3, r3, #1
 8003338:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800333a:	f7fe fbb7 	bl	8001aac <HAL_GetTick>
 800333e:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8003340:	e00a      	b.n	8003358 <HAL_RCC_OscConfig+0x248>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003342:	f7fe fbb3 	bl	8001aac <HAL_GetTick>
 8003346:	4602      	mov	r2, r0
 8003348:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800334a:	1ad3      	subs	r3, r2, r3
 800334c:	2b02      	cmp	r3, #2
 800334e:	d903      	bls.n	8003358 <HAL_RCC_OscConfig+0x248>
          {
            return HAL_TIMEOUT;
 8003350:	2303      	movs	r3, #3
 8003352:	e2af      	b.n	80038b4 <HAL_RCC_OscConfig+0x7a4>
 8003354:	58024400 	.word	0x58024400
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8003358:	4b96      	ldr	r3, [pc, #600]	; (80035b4 <HAL_RCC_OscConfig+0x4a4>)
 800335a:	681b      	ldr	r3, [r3, #0]
 800335c:	f003 0304 	and.w	r3, r3, #4
 8003360:	2b00      	cmp	r3, #0
 8003362:	d1ee      	bne.n	8003342 <HAL_RCC_OscConfig+0x232>
        }
      }
    }
  }
  /*----------------------------- CSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 8003364:	687b      	ldr	r3, [r7, #4]
 8003366:	681b      	ldr	r3, [r3, #0]
 8003368:	f003 0310 	and.w	r3, r3, #16
 800336c:	2b00      	cmp	r3, #0
 800336e:	d06a      	beq.n	8003446 <HAL_RCC_OscConfig+0x336>
    /* Check the parameters */
    assert_param(IS_RCC_CSI(RCC_OscInitStruct->CSIState));
    assert_param(IS_RCC_CSICALIBRATION_VALUE(RCC_OscInitStruct->CSICalibrationValue));

    /* When the CSI is used as system clock it will not disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8003370:	4b90      	ldr	r3, [pc, #576]	; (80035b4 <HAL_RCC_OscConfig+0x4a4>)
 8003372:	691b      	ldr	r3, [r3, #16]
 8003374:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8003378:	61bb      	str	r3, [r7, #24]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 800337a:	4b8e      	ldr	r3, [pc, #568]	; (80035b4 <HAL_RCC_OscConfig+0x4a4>)
 800337c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800337e:	617b      	str	r3, [r7, #20]
    if ((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 8003380:	69bb      	ldr	r3, [r7, #24]
 8003382:	2b08      	cmp	r3, #8
 8003384:	d007      	beq.n	8003396 <HAL_RCC_OscConfig+0x286>
 8003386:	69bb      	ldr	r3, [r7, #24]
 8003388:	2b18      	cmp	r3, #24
 800338a:	d11b      	bne.n	80033c4 <HAL_RCC_OscConfig+0x2b4>
 800338c:	697b      	ldr	r3, [r7, #20]
 800338e:	f003 0303 	and.w	r3, r3, #3
 8003392:	2b01      	cmp	r3, #1
 8003394:	d116      	bne.n	80033c4 <HAL_RCC_OscConfig+0x2b4>
    {
      /* When CSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8003396:	4b87      	ldr	r3, [pc, #540]	; (80035b4 <HAL_RCC_OscConfig+0x4a4>)
 8003398:	681b      	ldr	r3, [r3, #0]
 800339a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800339e:	2b00      	cmp	r3, #0
 80033a0:	d005      	beq.n	80033ae <HAL_RCC_OscConfig+0x29e>
 80033a2:	687b      	ldr	r3, [r7, #4]
 80033a4:	69db      	ldr	r3, [r3, #28]
 80033a6:	2b80      	cmp	r3, #128	; 0x80
 80033a8:	d001      	beq.n	80033ae <HAL_RCC_OscConfig+0x29e>
      {
        return HAL_ERROR;
 80033aa:	2301      	movs	r3, #1
 80033ac:	e282      	b.n	80038b4 <HAL_RCC_OscConfig+0x7a4>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 80033ae:	4b81      	ldr	r3, [pc, #516]	; (80035b4 <HAL_RCC_OscConfig+0x4a4>)
 80033b0:	68db      	ldr	r3, [r3, #12]
 80033b2:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 80033b6:	687b      	ldr	r3, [r7, #4]
 80033b8:	6a1b      	ldr	r3, [r3, #32]
 80033ba:	061b      	lsls	r3, r3, #24
 80033bc:	497d      	ldr	r1, [pc, #500]	; (80035b4 <HAL_RCC_OscConfig+0x4a4>)
 80033be:	4313      	orrs	r3, r2
 80033c0:	60cb      	str	r3, [r1, #12]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 80033c2:	e040      	b.n	8003446 <HAL_RCC_OscConfig+0x336>
      }
    }
    else
    {
      /* Check the CSI State */
      if ((RCC_OscInitStruct->CSIState) != RCC_CSI_OFF)
 80033c4:	687b      	ldr	r3, [r7, #4]
 80033c6:	69db      	ldr	r3, [r3, #28]
 80033c8:	2b00      	cmp	r3, #0
 80033ca:	d023      	beq.n	8003414 <HAL_RCC_OscConfig+0x304>
      {
        /* Enable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_ENABLE();
 80033cc:	4b79      	ldr	r3, [pc, #484]	; (80035b4 <HAL_RCC_OscConfig+0x4a4>)
 80033ce:	681b      	ldr	r3, [r3, #0]
 80033d0:	4a78      	ldr	r2, [pc, #480]	; (80035b4 <HAL_RCC_OscConfig+0x4a4>)
 80033d2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80033d6:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80033d8:	f7fe fb68 	bl	8001aac <HAL_GetTick>
 80033dc:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 80033de:	e008      	b.n	80033f2 <HAL_RCC_OscConfig+0x2e2>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 80033e0:	f7fe fb64 	bl	8001aac <HAL_GetTick>
 80033e4:	4602      	mov	r2, r0
 80033e6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80033e8:	1ad3      	subs	r3, r2, r3
 80033ea:	2b02      	cmp	r3, #2
 80033ec:	d901      	bls.n	80033f2 <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 80033ee:	2303      	movs	r3, #3
 80033f0:	e260      	b.n	80038b4 <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 80033f2:	4b70      	ldr	r3, [pc, #448]	; (80035b4 <HAL_RCC_OscConfig+0x4a4>)
 80033f4:	681b      	ldr	r3, [r3, #0]
 80033f6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80033fa:	2b00      	cmp	r3, #0
 80033fc:	d0f0      	beq.n	80033e0 <HAL_RCC_OscConfig+0x2d0>
          }
        }

        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 80033fe:	4b6d      	ldr	r3, [pc, #436]	; (80035b4 <HAL_RCC_OscConfig+0x4a4>)
 8003400:	68db      	ldr	r3, [r3, #12]
 8003402:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 8003406:	687b      	ldr	r3, [r7, #4]
 8003408:	6a1b      	ldr	r3, [r3, #32]
 800340a:	061b      	lsls	r3, r3, #24
 800340c:	4969      	ldr	r1, [pc, #420]	; (80035b4 <HAL_RCC_OscConfig+0x4a4>)
 800340e:	4313      	orrs	r3, r2
 8003410:	60cb      	str	r3, [r1, #12]
 8003412:	e018      	b.n	8003446 <HAL_RCC_OscConfig+0x336>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_DISABLE();
 8003414:	4b67      	ldr	r3, [pc, #412]	; (80035b4 <HAL_RCC_OscConfig+0x4a4>)
 8003416:	681b      	ldr	r3, [r3, #0]
 8003418:	4a66      	ldr	r2, [pc, #408]	; (80035b4 <HAL_RCC_OscConfig+0x4a4>)
 800341a:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800341e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003420:	f7fe fb44 	bl	8001aac <HAL_GetTick>
 8003424:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8003426:	e008      	b.n	800343a <HAL_RCC_OscConfig+0x32a>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 8003428:	f7fe fb40 	bl	8001aac <HAL_GetTick>
 800342c:	4602      	mov	r2, r0
 800342e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003430:	1ad3      	subs	r3, r2, r3
 8003432:	2b02      	cmp	r3, #2
 8003434:	d901      	bls.n	800343a <HAL_RCC_OscConfig+0x32a>
          {
            return HAL_TIMEOUT;
 8003436:	2303      	movs	r3, #3
 8003438:	e23c      	b.n	80038b4 <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 800343a:	4b5e      	ldr	r3, [pc, #376]	; (80035b4 <HAL_RCC_OscConfig+0x4a4>)
 800343c:	681b      	ldr	r3, [r3, #0]
 800343e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003442:	2b00      	cmp	r3, #0
 8003444:	d1f0      	bne.n	8003428 <HAL_RCC_OscConfig+0x318>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003446:	687b      	ldr	r3, [r7, #4]
 8003448:	681b      	ldr	r3, [r3, #0]
 800344a:	f003 0308 	and.w	r3, r3, #8
 800344e:	2b00      	cmp	r3, #0
 8003450:	d036      	beq.n	80034c0 <HAL_RCC_OscConfig+0x3b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8003452:	687b      	ldr	r3, [r7, #4]
 8003454:	695b      	ldr	r3, [r3, #20]
 8003456:	2b00      	cmp	r3, #0
 8003458:	d019      	beq.n	800348e <HAL_RCC_OscConfig+0x37e>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800345a:	4b56      	ldr	r3, [pc, #344]	; (80035b4 <HAL_RCC_OscConfig+0x4a4>)
 800345c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800345e:	4a55      	ldr	r2, [pc, #340]	; (80035b4 <HAL_RCC_OscConfig+0x4a4>)
 8003460:	f043 0301 	orr.w	r3, r3, #1
 8003464:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003466:	f7fe fb21 	bl	8001aac <HAL_GetTick>
 800346a:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 800346c:	e008      	b.n	8003480 <HAL_RCC_OscConfig+0x370>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800346e:	f7fe fb1d 	bl	8001aac <HAL_GetTick>
 8003472:	4602      	mov	r2, r0
 8003474:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003476:	1ad3      	subs	r3, r2, r3
 8003478:	2b02      	cmp	r3, #2
 800347a:	d901      	bls.n	8003480 <HAL_RCC_OscConfig+0x370>
        {
          return HAL_TIMEOUT;
 800347c:	2303      	movs	r3, #3
 800347e:	e219      	b.n	80038b4 <HAL_RCC_OscConfig+0x7a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8003480:	4b4c      	ldr	r3, [pc, #304]	; (80035b4 <HAL_RCC_OscConfig+0x4a4>)
 8003482:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003484:	f003 0302 	and.w	r3, r3, #2
 8003488:	2b00      	cmp	r3, #0
 800348a:	d0f0      	beq.n	800346e <HAL_RCC_OscConfig+0x35e>
 800348c:	e018      	b.n	80034c0 <HAL_RCC_OscConfig+0x3b0>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800348e:	4b49      	ldr	r3, [pc, #292]	; (80035b4 <HAL_RCC_OscConfig+0x4a4>)
 8003490:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003492:	4a48      	ldr	r2, [pc, #288]	; (80035b4 <HAL_RCC_OscConfig+0x4a4>)
 8003494:	f023 0301 	bic.w	r3, r3, #1
 8003498:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800349a:	f7fe fb07 	bl	8001aac <HAL_GetTick>
 800349e:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 80034a0:	e008      	b.n	80034b4 <HAL_RCC_OscConfig+0x3a4>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80034a2:	f7fe fb03 	bl	8001aac <HAL_GetTick>
 80034a6:	4602      	mov	r2, r0
 80034a8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80034aa:	1ad3      	subs	r3, r2, r3
 80034ac:	2b02      	cmp	r3, #2
 80034ae:	d901      	bls.n	80034b4 <HAL_RCC_OscConfig+0x3a4>
        {
          return HAL_TIMEOUT;
 80034b0:	2303      	movs	r3, #3
 80034b2:	e1ff      	b.n	80038b4 <HAL_RCC_OscConfig+0x7a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 80034b4:	4b3f      	ldr	r3, [pc, #252]	; (80035b4 <HAL_RCC_OscConfig+0x4a4>)
 80034b6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80034b8:	f003 0302 	and.w	r3, r3, #2
 80034bc:	2b00      	cmp	r3, #0
 80034be:	d1f0      	bne.n	80034a2 <HAL_RCC_OscConfig+0x392>
      }
    }
  }

  /*------------------------------ HSI48 Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 80034c0:	687b      	ldr	r3, [r7, #4]
 80034c2:	681b      	ldr	r3, [r3, #0]
 80034c4:	f003 0320 	and.w	r3, r3, #32
 80034c8:	2b00      	cmp	r3, #0
 80034ca:	d036      	beq.n	800353a <HAL_RCC_OscConfig+0x42a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if ((RCC_OscInitStruct->HSI48State) != RCC_HSI48_OFF)
 80034cc:	687b      	ldr	r3, [r7, #4]
 80034ce:	699b      	ldr	r3, [r3, #24]
 80034d0:	2b00      	cmp	r3, #0
 80034d2:	d019      	beq.n	8003508 <HAL_RCC_OscConfig+0x3f8>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 80034d4:	4b37      	ldr	r3, [pc, #220]	; (80035b4 <HAL_RCC_OscConfig+0x4a4>)
 80034d6:	681b      	ldr	r3, [r3, #0]
 80034d8:	4a36      	ldr	r2, [pc, #216]	; (80035b4 <HAL_RCC_OscConfig+0x4a4>)
 80034da:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 80034de:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 80034e0:	f7fe fae4 	bl	8001aac <HAL_GetTick>
 80034e4:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 80034e6:	e008      	b.n	80034fa <HAL_RCC_OscConfig+0x3ea>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80034e8:	f7fe fae0 	bl	8001aac <HAL_GetTick>
 80034ec:	4602      	mov	r2, r0
 80034ee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80034f0:	1ad3      	subs	r3, r2, r3
 80034f2:	2b02      	cmp	r3, #2
 80034f4:	d901      	bls.n	80034fa <HAL_RCC_OscConfig+0x3ea>
        {
          return HAL_TIMEOUT;
 80034f6:	2303      	movs	r3, #3
 80034f8:	e1dc      	b.n	80038b4 <HAL_RCC_OscConfig+0x7a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 80034fa:	4b2e      	ldr	r3, [pc, #184]	; (80035b4 <HAL_RCC_OscConfig+0x4a4>)
 80034fc:	681b      	ldr	r3, [r3, #0]
 80034fe:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8003502:	2b00      	cmp	r3, #0
 8003504:	d0f0      	beq.n	80034e8 <HAL_RCC_OscConfig+0x3d8>
 8003506:	e018      	b.n	800353a <HAL_RCC_OscConfig+0x42a>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8003508:	4b2a      	ldr	r3, [pc, #168]	; (80035b4 <HAL_RCC_OscConfig+0x4a4>)
 800350a:	681b      	ldr	r3, [r3, #0]
 800350c:	4a29      	ldr	r2, [pc, #164]	; (80035b4 <HAL_RCC_OscConfig+0x4a4>)
 800350e:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8003512:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8003514:	f7fe faca 	bl	8001aac <HAL_GetTick>
 8003518:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 800351a:	e008      	b.n	800352e <HAL_RCC_OscConfig+0x41e>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800351c:	f7fe fac6 	bl	8001aac <HAL_GetTick>
 8003520:	4602      	mov	r2, r0
 8003522:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003524:	1ad3      	subs	r3, r2, r3
 8003526:	2b02      	cmp	r3, #2
 8003528:	d901      	bls.n	800352e <HAL_RCC_OscConfig+0x41e>
        {
          return HAL_TIMEOUT;
 800352a:	2303      	movs	r3, #3
 800352c:	e1c2      	b.n	80038b4 <HAL_RCC_OscConfig+0x7a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 800352e:	4b21      	ldr	r3, [pc, #132]	; (80035b4 <HAL_RCC_OscConfig+0x4a4>)
 8003530:	681b      	ldr	r3, [r3, #0]
 8003532:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8003536:	2b00      	cmp	r3, #0
 8003538:	d1f0      	bne.n	800351c <HAL_RCC_OscConfig+0x40c>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800353a:	687b      	ldr	r3, [r7, #4]
 800353c:	681b      	ldr	r3, [r3, #0]
 800353e:	f003 0304 	and.w	r3, r3, #4
 8003542:	2b00      	cmp	r3, #0
 8003544:	f000 8086 	beq.w	8003654 <HAL_RCC_OscConfig+0x544>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8003548:	4b1b      	ldr	r3, [pc, #108]	; (80035b8 <HAL_RCC_OscConfig+0x4a8>)
 800354a:	681b      	ldr	r3, [r3, #0]
 800354c:	4a1a      	ldr	r2, [pc, #104]	; (80035b8 <HAL_RCC_OscConfig+0x4a8>)
 800354e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003552:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8003554:	f7fe faaa 	bl	8001aac <HAL_GetTick>
 8003558:	6278      	str	r0, [r7, #36]	; 0x24

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800355a:	e008      	b.n	800356e <HAL_RCC_OscConfig+0x45e>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800355c:	f7fe faa6 	bl	8001aac <HAL_GetTick>
 8003560:	4602      	mov	r2, r0
 8003562:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003564:	1ad3      	subs	r3, r2, r3
 8003566:	2b64      	cmp	r3, #100	; 0x64
 8003568:	d901      	bls.n	800356e <HAL_RCC_OscConfig+0x45e>
      {
        return HAL_TIMEOUT;
 800356a:	2303      	movs	r3, #3
 800356c:	e1a2      	b.n	80038b4 <HAL_RCC_OscConfig+0x7a4>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800356e:	4b12      	ldr	r3, [pc, #72]	; (80035b8 <HAL_RCC_OscConfig+0x4a8>)
 8003570:	681b      	ldr	r3, [r3, #0]
 8003572:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003576:	2b00      	cmp	r3, #0
 8003578:	d0f0      	beq.n	800355c <HAL_RCC_OscConfig+0x44c>
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800357a:	687b      	ldr	r3, [r7, #4]
 800357c:	689b      	ldr	r3, [r3, #8]
 800357e:	2b01      	cmp	r3, #1
 8003580:	d106      	bne.n	8003590 <HAL_RCC_OscConfig+0x480>
 8003582:	4b0c      	ldr	r3, [pc, #48]	; (80035b4 <HAL_RCC_OscConfig+0x4a4>)
 8003584:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003586:	4a0b      	ldr	r2, [pc, #44]	; (80035b4 <HAL_RCC_OscConfig+0x4a4>)
 8003588:	f043 0301 	orr.w	r3, r3, #1
 800358c:	6713      	str	r3, [r2, #112]	; 0x70
 800358e:	e032      	b.n	80035f6 <HAL_RCC_OscConfig+0x4e6>
 8003590:	687b      	ldr	r3, [r7, #4]
 8003592:	689b      	ldr	r3, [r3, #8]
 8003594:	2b00      	cmp	r3, #0
 8003596:	d111      	bne.n	80035bc <HAL_RCC_OscConfig+0x4ac>
 8003598:	4b06      	ldr	r3, [pc, #24]	; (80035b4 <HAL_RCC_OscConfig+0x4a4>)
 800359a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800359c:	4a05      	ldr	r2, [pc, #20]	; (80035b4 <HAL_RCC_OscConfig+0x4a4>)
 800359e:	f023 0301 	bic.w	r3, r3, #1
 80035a2:	6713      	str	r3, [r2, #112]	; 0x70
 80035a4:	4b03      	ldr	r3, [pc, #12]	; (80035b4 <HAL_RCC_OscConfig+0x4a4>)
 80035a6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80035a8:	4a02      	ldr	r2, [pc, #8]	; (80035b4 <HAL_RCC_OscConfig+0x4a4>)
 80035aa:	f023 0304 	bic.w	r3, r3, #4
 80035ae:	6713      	str	r3, [r2, #112]	; 0x70
 80035b0:	e021      	b.n	80035f6 <HAL_RCC_OscConfig+0x4e6>
 80035b2:	bf00      	nop
 80035b4:	58024400 	.word	0x58024400
 80035b8:	58024800 	.word	0x58024800
 80035bc:	687b      	ldr	r3, [r7, #4]
 80035be:	689b      	ldr	r3, [r3, #8]
 80035c0:	2b05      	cmp	r3, #5
 80035c2:	d10c      	bne.n	80035de <HAL_RCC_OscConfig+0x4ce>
 80035c4:	4b83      	ldr	r3, [pc, #524]	; (80037d4 <HAL_RCC_OscConfig+0x6c4>)
 80035c6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80035c8:	4a82      	ldr	r2, [pc, #520]	; (80037d4 <HAL_RCC_OscConfig+0x6c4>)
 80035ca:	f043 0304 	orr.w	r3, r3, #4
 80035ce:	6713      	str	r3, [r2, #112]	; 0x70
 80035d0:	4b80      	ldr	r3, [pc, #512]	; (80037d4 <HAL_RCC_OscConfig+0x6c4>)
 80035d2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80035d4:	4a7f      	ldr	r2, [pc, #508]	; (80037d4 <HAL_RCC_OscConfig+0x6c4>)
 80035d6:	f043 0301 	orr.w	r3, r3, #1
 80035da:	6713      	str	r3, [r2, #112]	; 0x70
 80035dc:	e00b      	b.n	80035f6 <HAL_RCC_OscConfig+0x4e6>
 80035de:	4b7d      	ldr	r3, [pc, #500]	; (80037d4 <HAL_RCC_OscConfig+0x6c4>)
 80035e0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80035e2:	4a7c      	ldr	r2, [pc, #496]	; (80037d4 <HAL_RCC_OscConfig+0x6c4>)
 80035e4:	f023 0301 	bic.w	r3, r3, #1
 80035e8:	6713      	str	r3, [r2, #112]	; 0x70
 80035ea:	4b7a      	ldr	r3, [pc, #488]	; (80037d4 <HAL_RCC_OscConfig+0x6c4>)
 80035ec:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80035ee:	4a79      	ldr	r2, [pc, #484]	; (80037d4 <HAL_RCC_OscConfig+0x6c4>)
 80035f0:	f023 0304 	bic.w	r3, r3, #4
 80035f4:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80035f6:	687b      	ldr	r3, [r7, #4]
 80035f8:	689b      	ldr	r3, [r3, #8]
 80035fa:	2b00      	cmp	r3, #0
 80035fc:	d015      	beq.n	800362a <HAL_RCC_OscConfig+0x51a>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80035fe:	f7fe fa55 	bl	8001aac <HAL_GetTick>
 8003602:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8003604:	e00a      	b.n	800361c <HAL_RCC_OscConfig+0x50c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003606:	f7fe fa51 	bl	8001aac <HAL_GetTick>
 800360a:	4602      	mov	r2, r0
 800360c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800360e:	1ad3      	subs	r3, r2, r3
 8003610:	f241 3288 	movw	r2, #5000	; 0x1388
 8003614:	4293      	cmp	r3, r2
 8003616:	d901      	bls.n	800361c <HAL_RCC_OscConfig+0x50c>
        {
          return HAL_TIMEOUT;
 8003618:	2303      	movs	r3, #3
 800361a:	e14b      	b.n	80038b4 <HAL_RCC_OscConfig+0x7a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800361c:	4b6d      	ldr	r3, [pc, #436]	; (80037d4 <HAL_RCC_OscConfig+0x6c4>)
 800361e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003620:	f003 0302 	and.w	r3, r3, #2
 8003624:	2b00      	cmp	r3, #0
 8003626:	d0ee      	beq.n	8003606 <HAL_RCC_OscConfig+0x4f6>
 8003628:	e014      	b.n	8003654 <HAL_RCC_OscConfig+0x544>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800362a:	f7fe fa3f 	bl	8001aac <HAL_GetTick>
 800362e:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8003630:	e00a      	b.n	8003648 <HAL_RCC_OscConfig+0x538>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003632:	f7fe fa3b 	bl	8001aac <HAL_GetTick>
 8003636:	4602      	mov	r2, r0
 8003638:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800363a:	1ad3      	subs	r3, r2, r3
 800363c:	f241 3288 	movw	r2, #5000	; 0x1388
 8003640:	4293      	cmp	r3, r2
 8003642:	d901      	bls.n	8003648 <HAL_RCC_OscConfig+0x538>
        {
          return HAL_TIMEOUT;
 8003644:	2303      	movs	r3, #3
 8003646:	e135      	b.n	80038b4 <HAL_RCC_OscConfig+0x7a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8003648:	4b62      	ldr	r3, [pc, #392]	; (80037d4 <HAL_RCC_OscConfig+0x6c4>)
 800364a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800364c:	f003 0302 	and.w	r3, r3, #2
 8003650:	2b00      	cmp	r3, #0
 8003652:	d1ee      	bne.n	8003632 <HAL_RCC_OscConfig+0x522>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003654:	687b      	ldr	r3, [r7, #4]
 8003656:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003658:	2b00      	cmp	r3, #0
 800365a:	f000 812a 	beq.w	80038b2 <HAL_RCC_OscConfig+0x7a2>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL1)
 800365e:	4b5d      	ldr	r3, [pc, #372]	; (80037d4 <HAL_RCC_OscConfig+0x6c4>)
 8003660:	691b      	ldr	r3, [r3, #16]
 8003662:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8003666:	2b18      	cmp	r3, #24
 8003668:	f000 80ba 	beq.w	80037e0 <HAL_RCC_OscConfig+0x6d0>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800366c:	687b      	ldr	r3, [r7, #4]
 800366e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003670:	2b02      	cmp	r3, #2
 8003672:	f040 8095 	bne.w	80037a0 <HAL_RCC_OscConfig+0x690>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
        assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003676:	4b57      	ldr	r3, [pc, #348]	; (80037d4 <HAL_RCC_OscConfig+0x6c4>)
 8003678:	681b      	ldr	r3, [r3, #0]
 800367a:	4a56      	ldr	r2, [pc, #344]	; (80037d4 <HAL_RCC_OscConfig+0x6c4>)
 800367c:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8003680:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003682:	f7fe fa13 	bl	8001aac <HAL_GetTick>
 8003686:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8003688:	e008      	b.n	800369c <HAL_RCC_OscConfig+0x58c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800368a:	f7fe fa0f 	bl	8001aac <HAL_GetTick>
 800368e:	4602      	mov	r2, r0
 8003690:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003692:	1ad3      	subs	r3, r2, r3
 8003694:	2b02      	cmp	r3, #2
 8003696:	d901      	bls.n	800369c <HAL_RCC_OscConfig+0x58c>
          {
            return HAL_TIMEOUT;
 8003698:	2303      	movs	r3, #3
 800369a:	e10b      	b.n	80038b4 <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 800369c:	4b4d      	ldr	r3, [pc, #308]	; (80037d4 <HAL_RCC_OscConfig+0x6c4>)
 800369e:	681b      	ldr	r3, [r3, #0]
 80036a0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80036a4:	2b00      	cmp	r3, #0
 80036a6:	d1f0      	bne.n	800368a <HAL_RCC_OscConfig+0x57a>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80036a8:	4b4a      	ldr	r3, [pc, #296]	; (80037d4 <HAL_RCC_OscConfig+0x6c4>)
 80036aa:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80036ac:	4b4a      	ldr	r3, [pc, #296]	; (80037d8 <HAL_RCC_OscConfig+0x6c8>)
 80036ae:	4013      	ands	r3, r2
 80036b0:	687a      	ldr	r2, [r7, #4]
 80036b2:	6a91      	ldr	r1, [r2, #40]	; 0x28
 80036b4:	687a      	ldr	r2, [r7, #4]
 80036b6:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 80036b8:	0112      	lsls	r2, r2, #4
 80036ba:	430a      	orrs	r2, r1
 80036bc:	4945      	ldr	r1, [pc, #276]	; (80037d4 <HAL_RCC_OscConfig+0x6c4>)
 80036be:	4313      	orrs	r3, r2
 80036c0:	628b      	str	r3, [r1, #40]	; 0x28
 80036c2:	687b      	ldr	r3, [r7, #4]
 80036c4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80036c6:	3b01      	subs	r3, #1
 80036c8:	f3c3 0208 	ubfx	r2, r3, #0, #9
 80036cc:	687b      	ldr	r3, [r7, #4]
 80036ce:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80036d0:	3b01      	subs	r3, #1
 80036d2:	025b      	lsls	r3, r3, #9
 80036d4:	b29b      	uxth	r3, r3
 80036d6:	431a      	orrs	r2, r3
 80036d8:	687b      	ldr	r3, [r7, #4]
 80036da:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80036dc:	3b01      	subs	r3, #1
 80036de:	041b      	lsls	r3, r3, #16
 80036e0:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 80036e4:	431a      	orrs	r2, r3
 80036e6:	687b      	ldr	r3, [r7, #4]
 80036e8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80036ea:	3b01      	subs	r3, #1
 80036ec:	061b      	lsls	r3, r3, #24
 80036ee:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 80036f2:	4938      	ldr	r1, [pc, #224]	; (80037d4 <HAL_RCC_OscConfig+0x6c4>)
 80036f4:	4313      	orrs	r3, r2
 80036f6:	630b      	str	r3, [r1, #48]	; 0x30
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Disable PLLFRACN . */
        __HAL_RCC_PLLFRACN_DISABLE();
 80036f8:	4b36      	ldr	r3, [pc, #216]	; (80037d4 <HAL_RCC_OscConfig+0x6c4>)
 80036fa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80036fc:	4a35      	ldr	r2, [pc, #212]	; (80037d4 <HAL_RCC_OscConfig+0x6c4>)
 80036fe:	f023 0301 	bic.w	r3, r3, #1
 8003702:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Configure PLL PLL1FRACN */
        __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 8003704:	4b33      	ldr	r3, [pc, #204]	; (80037d4 <HAL_RCC_OscConfig+0x6c4>)
 8003706:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003708:	4b34      	ldr	r3, [pc, #208]	; (80037dc <HAL_RCC_OscConfig+0x6cc>)
 800370a:	4013      	ands	r3, r2
 800370c:	687a      	ldr	r2, [r7, #4]
 800370e:	6c92      	ldr	r2, [r2, #72]	; 0x48
 8003710:	00d2      	lsls	r2, r2, #3
 8003712:	4930      	ldr	r1, [pc, #192]	; (80037d4 <HAL_RCC_OscConfig+0x6c4>)
 8003714:	4313      	orrs	r3, r2
 8003716:	634b      	str	r3, [r1, #52]	; 0x34

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL_VCIRANGE(RCC_OscInitStruct->PLL.PLLRGE) ;
 8003718:	4b2e      	ldr	r3, [pc, #184]	; (80037d4 <HAL_RCC_OscConfig+0x6c4>)
 800371a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800371c:	f023 020c 	bic.w	r2, r3, #12
 8003720:	687b      	ldr	r3, [r7, #4]
 8003722:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003724:	492b      	ldr	r1, [pc, #172]	; (80037d4 <HAL_RCC_OscConfig+0x6c4>)
 8003726:	4313      	orrs	r3, r2
 8003728:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Select PLL1 output frequency range : VCO */
        __HAL_RCC_PLL_VCORANGE(RCC_OscInitStruct->PLL.PLLVCOSEL) ;
 800372a:	4b2a      	ldr	r3, [pc, #168]	; (80037d4 <HAL_RCC_OscConfig+0x6c4>)
 800372c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800372e:	f023 0202 	bic.w	r2, r3, #2
 8003732:	687b      	ldr	r3, [r7, #4]
 8003734:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003736:	4927      	ldr	r1, [pc, #156]	; (80037d4 <HAL_RCC_OscConfig+0x6c4>)
 8003738:	4313      	orrs	r3, r2
 800373a:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Enable PLL System Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 800373c:	4b25      	ldr	r3, [pc, #148]	; (80037d4 <HAL_RCC_OscConfig+0x6c4>)
 800373e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003740:	4a24      	ldr	r2, [pc, #144]	; (80037d4 <HAL_RCC_OscConfig+0x6c4>)
 8003742:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003746:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1Q Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003748:	4b22      	ldr	r3, [pc, #136]	; (80037d4 <HAL_RCC_OscConfig+0x6c4>)
 800374a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800374c:	4a21      	ldr	r2, [pc, #132]	; (80037d4 <HAL_RCC_OscConfig+0x6c4>)
 800374e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003752:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1R  Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 8003754:	4b1f      	ldr	r3, [pc, #124]	; (80037d4 <HAL_RCC_OscConfig+0x6c4>)
 8003756:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003758:	4a1e      	ldr	r2, [pc, #120]	; (80037d4 <HAL_RCC_OscConfig+0x6c4>)
 800375a:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800375e:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1FRACN . */
        __HAL_RCC_PLLFRACN_ENABLE();
 8003760:	4b1c      	ldr	r3, [pc, #112]	; (80037d4 <HAL_RCC_OscConfig+0x6c4>)
 8003762:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003764:	4a1b      	ldr	r2, [pc, #108]	; (80037d4 <HAL_RCC_OscConfig+0x6c4>)
 8003766:	f043 0301 	orr.w	r3, r3, #1
 800376a:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800376c:	4b19      	ldr	r3, [pc, #100]	; (80037d4 <HAL_RCC_OscConfig+0x6c4>)
 800376e:	681b      	ldr	r3, [r3, #0]
 8003770:	4a18      	ldr	r2, [pc, #96]	; (80037d4 <HAL_RCC_OscConfig+0x6c4>)
 8003772:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8003776:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003778:	f7fe f998 	bl	8001aac <HAL_GetTick>
 800377c:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 800377e:	e008      	b.n	8003792 <HAL_RCC_OscConfig+0x682>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003780:	f7fe f994 	bl	8001aac <HAL_GetTick>
 8003784:	4602      	mov	r2, r0
 8003786:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003788:	1ad3      	subs	r3, r2, r3
 800378a:	2b02      	cmp	r3, #2
 800378c:	d901      	bls.n	8003792 <HAL_RCC_OscConfig+0x682>
          {
            return HAL_TIMEOUT;
 800378e:	2303      	movs	r3, #3
 8003790:	e090      	b.n	80038b4 <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8003792:	4b10      	ldr	r3, [pc, #64]	; (80037d4 <HAL_RCC_OscConfig+0x6c4>)
 8003794:	681b      	ldr	r3, [r3, #0]
 8003796:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800379a:	2b00      	cmp	r3, #0
 800379c:	d0f0      	beq.n	8003780 <HAL_RCC_OscConfig+0x670>
 800379e:	e088      	b.n	80038b2 <HAL_RCC_OscConfig+0x7a2>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80037a0:	4b0c      	ldr	r3, [pc, #48]	; (80037d4 <HAL_RCC_OscConfig+0x6c4>)
 80037a2:	681b      	ldr	r3, [r3, #0]
 80037a4:	4a0b      	ldr	r2, [pc, #44]	; (80037d4 <HAL_RCC_OscConfig+0x6c4>)
 80037a6:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80037aa:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80037ac:	f7fe f97e 	bl	8001aac <HAL_GetTick>
 80037b0:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 80037b2:	e008      	b.n	80037c6 <HAL_RCC_OscConfig+0x6b6>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80037b4:	f7fe f97a 	bl	8001aac <HAL_GetTick>
 80037b8:	4602      	mov	r2, r0
 80037ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80037bc:	1ad3      	subs	r3, r2, r3
 80037be:	2b02      	cmp	r3, #2
 80037c0:	d901      	bls.n	80037c6 <HAL_RCC_OscConfig+0x6b6>
          {
            return HAL_TIMEOUT;
 80037c2:	2303      	movs	r3, #3
 80037c4:	e076      	b.n	80038b4 <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 80037c6:	4b03      	ldr	r3, [pc, #12]	; (80037d4 <HAL_RCC_OscConfig+0x6c4>)
 80037c8:	681b      	ldr	r3, [r3, #0]
 80037ca:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80037ce:	2b00      	cmp	r3, #0
 80037d0:	d1f0      	bne.n	80037b4 <HAL_RCC_OscConfig+0x6a4>
 80037d2:	e06e      	b.n	80038b2 <HAL_RCC_OscConfig+0x7a2>
 80037d4:	58024400 	.word	0x58024400
 80037d8:	fffffc0c 	.word	0xfffffc0c
 80037dc:	ffff0007 	.word	0xffff0007
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLLCKSELR;
 80037e0:	4b36      	ldr	r3, [pc, #216]	; (80038bc <HAL_RCC_OscConfig+0x7ac>)
 80037e2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80037e4:	613b      	str	r3, [r7, #16]
      temp2_pllckcfg = RCC->PLL1DIVR;
 80037e6:	4b35      	ldr	r3, [pc, #212]	; (80038bc <HAL_RCC_OscConfig+0x7ac>)
 80037e8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80037ea:	60fb      	str	r3, [r7, #12]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80037ec:	687b      	ldr	r3, [r7, #4]
 80037ee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80037f0:	2b01      	cmp	r3, #1
 80037f2:	d031      	beq.n	8003858 <HAL_RCC_OscConfig+0x748>
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80037f4:	693b      	ldr	r3, [r7, #16]
 80037f6:	f003 0203 	and.w	r2, r3, #3
 80037fa:	687b      	ldr	r3, [r7, #4]
 80037fc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80037fe:	429a      	cmp	r2, r3
 8003800:	d12a      	bne.n	8003858 <HAL_RCC_OscConfig+0x748>
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8003802:	693b      	ldr	r3, [r7, #16]
 8003804:	091b      	lsrs	r3, r3, #4
 8003806:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 800380a:	687b      	ldr	r3, [r7, #4]
 800380c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800380e:	429a      	cmp	r2, r3
 8003810:	d122      	bne.n	8003858 <HAL_RCC_OscConfig+0x748>
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8003812:	68fb      	ldr	r3, [r7, #12]
 8003814:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8003818:	687b      	ldr	r3, [r7, #4]
 800381a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800381c:	3b01      	subs	r3, #1
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 800381e:	429a      	cmp	r2, r3
 8003820:	d11a      	bne.n	8003858 <HAL_RCC_OscConfig+0x748>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8003822:	68fb      	ldr	r3, [r7, #12]
 8003824:	0a5b      	lsrs	r3, r3, #9
 8003826:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800382a:	687b      	ldr	r3, [r7, #4]
 800382c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800382e:	3b01      	subs	r3, #1
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8003830:	429a      	cmp	r2, r3
 8003832:	d111      	bne.n	8003858 <HAL_RCC_OscConfig+0x748>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8003834:	68fb      	ldr	r3, [r7, #12]
 8003836:	0c1b      	lsrs	r3, r3, #16
 8003838:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800383c:	687b      	ldr	r3, [r7, #4]
 800383e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003840:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8003842:	429a      	cmp	r2, r3
 8003844:	d108      	bne.n	8003858 <HAL_RCC_OscConfig+0x748>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_R1) >> RCC_PLL1DIVR_R1_Pos) != (RCC_OscInitStruct->PLL.PLLR - 1U)))
 8003846:	68fb      	ldr	r3, [r7, #12]
 8003848:	0e1b      	lsrs	r3, r3, #24
 800384a:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800384e:	687b      	ldr	r3, [r7, #4]
 8003850:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003852:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8003854:	429a      	cmp	r2, r3
 8003856:	d001      	beq.n	800385c <HAL_RCC_OscConfig+0x74c>
      {
        return HAL_ERROR;
 8003858:	2301      	movs	r3, #1
 800385a:	e02b      	b.n	80038b4 <HAL_RCC_OscConfig+0x7a4>
      }
      else
      {
        /* Check if only fractional part needs to be updated  */
        temp1_pllckcfg = ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> RCC_PLL1FRACR_FRACN1_Pos);
 800385c:	4b17      	ldr	r3, [pc, #92]	; (80038bc <HAL_RCC_OscConfig+0x7ac>)
 800385e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003860:	08db      	lsrs	r3, r3, #3
 8003862:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8003866:	613b      	str	r3, [r7, #16]
        if (RCC_OscInitStruct->PLL.PLLFRACN != temp1_pllckcfg)
 8003868:	687b      	ldr	r3, [r7, #4]
 800386a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800386c:	693a      	ldr	r2, [r7, #16]
 800386e:	429a      	cmp	r2, r3
 8003870:	d01f      	beq.n	80038b2 <HAL_RCC_OscConfig+0x7a2>
        {
          assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));
          /* Disable PLL1FRACEN */
          __HAL_RCC_PLLFRACN_DISABLE();
 8003872:	4b12      	ldr	r3, [pc, #72]	; (80038bc <HAL_RCC_OscConfig+0x7ac>)
 8003874:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003876:	4a11      	ldr	r2, [pc, #68]	; (80038bc <HAL_RCC_OscConfig+0x7ac>)
 8003878:	f023 0301 	bic.w	r3, r3, #1
 800387c:	62d3      	str	r3, [r2, #44]	; 0x2c
          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 800387e:	f7fe f915 	bl	8001aac <HAL_GetTick>
 8003882:	6278      	str	r0, [r7, #36]	; 0x24
          /* Wait at least 2 CK_REF (PLL input source divided by M) period to make sure next latched value will be taken into account. */
          while ((HAL_GetTick() - tickstart) < PLL_FRAC_TIMEOUT_VALUE)
 8003884:	bf00      	nop
 8003886:	f7fe f911 	bl	8001aac <HAL_GetTick>
 800388a:	4602      	mov	r2, r0
 800388c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800388e:	4293      	cmp	r3, r2
 8003890:	d0f9      	beq.n	8003886 <HAL_RCC_OscConfig+0x776>
          {
          }
          /* Configure PLL1 PLL1FRACN */
          __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 8003892:	4b0a      	ldr	r3, [pc, #40]	; (80038bc <HAL_RCC_OscConfig+0x7ac>)
 8003894:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003896:	4b0a      	ldr	r3, [pc, #40]	; (80038c0 <HAL_RCC_OscConfig+0x7b0>)
 8003898:	4013      	ands	r3, r2
 800389a:	687a      	ldr	r2, [r7, #4]
 800389c:	6c92      	ldr	r2, [r2, #72]	; 0x48
 800389e:	00d2      	lsls	r2, r2, #3
 80038a0:	4906      	ldr	r1, [pc, #24]	; (80038bc <HAL_RCC_OscConfig+0x7ac>)
 80038a2:	4313      	orrs	r3, r2
 80038a4:	634b      	str	r3, [r1, #52]	; 0x34
          /* Enable PLL1FRACEN to latch new value. */
          __HAL_RCC_PLLFRACN_ENABLE();
 80038a6:	4b05      	ldr	r3, [pc, #20]	; (80038bc <HAL_RCC_OscConfig+0x7ac>)
 80038a8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80038aa:	4a04      	ldr	r2, [pc, #16]	; (80038bc <HAL_RCC_OscConfig+0x7ac>)
 80038ac:	f043 0301 	orr.w	r3, r3, #1
 80038b0:	62d3      	str	r3, [r2, #44]	; 0x2c
        }
      }
    }
  }
  return HAL_OK;
 80038b2:	2300      	movs	r3, #0
}
 80038b4:	4618      	mov	r0, r3
 80038b6:	3730      	adds	r7, #48	; 0x30
 80038b8:	46bd      	mov	sp, r7
 80038ba:	bd80      	pop	{r7, pc}
 80038bc:	58024400 	.word	0x58024400
 80038c0:	ffff0007 	.word	0xffff0007

080038c4 <HAL_RCC_ClockConfig>:
  *         D1CPRE[3:0] bits to ensure that  Domain1 core clock not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80038c4:	b580      	push	{r7, lr}
 80038c6:	b086      	sub	sp, #24
 80038c8:	af00      	add	r7, sp, #0
 80038ca:	6078      	str	r0, [r7, #4]
 80038cc:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef halstatus;
  uint32_t tickstart;
  uint32_t common_system_clock;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80038ce:	687b      	ldr	r3, [r7, #4]
 80038d0:	2b00      	cmp	r3, #0
 80038d2:	d101      	bne.n	80038d8 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80038d4:	2301      	movs	r3, #1
 80038d6:	e19c      	b.n	8003c12 <HAL_RCC_ClockConfig+0x34e>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80038d8:	4b8a      	ldr	r3, [pc, #552]	; (8003b04 <HAL_RCC_ClockConfig+0x240>)
 80038da:	681b      	ldr	r3, [r3, #0]
 80038dc:	f003 030f 	and.w	r3, r3, #15
 80038e0:	683a      	ldr	r2, [r7, #0]
 80038e2:	429a      	cmp	r2, r3
 80038e4:	d910      	bls.n	8003908 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80038e6:	4b87      	ldr	r3, [pc, #540]	; (8003b04 <HAL_RCC_ClockConfig+0x240>)
 80038e8:	681b      	ldr	r3, [r3, #0]
 80038ea:	f023 020f 	bic.w	r2, r3, #15
 80038ee:	4985      	ldr	r1, [pc, #532]	; (8003b04 <HAL_RCC_ClockConfig+0x240>)
 80038f0:	683b      	ldr	r3, [r7, #0]
 80038f2:	4313      	orrs	r3, r2
 80038f4:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80038f6:	4b83      	ldr	r3, [pc, #524]	; (8003b04 <HAL_RCC_ClockConfig+0x240>)
 80038f8:	681b      	ldr	r3, [r3, #0]
 80038fa:	f003 030f 	and.w	r3, r3, #15
 80038fe:	683a      	ldr	r2, [r7, #0]
 8003900:	429a      	cmp	r2, r3
 8003902:	d001      	beq.n	8003908 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8003904:	2301      	movs	r3, #1
 8003906:	e184      	b.n	8003c12 <HAL_RCC_ClockConfig+0x34e>

  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- D1PCLK1/CDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8003908:	687b      	ldr	r3, [r7, #4]
 800390a:	681b      	ldr	r3, [r3, #0]
 800390c:	f003 0304 	and.w	r3, r3, #4
 8003910:	2b00      	cmp	r3, #0
 8003912:	d010      	beq.n	8003936 <HAL_RCC_ClockConfig+0x72>
  {
#if defined (RCC_D1CFGR_D1PPRE)
    if ((RCC_ClkInitStruct->APB3CLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8003914:	687b      	ldr	r3, [r7, #4]
 8003916:	691a      	ldr	r2, [r3, #16]
 8003918:	4b7b      	ldr	r3, [pc, #492]	; (8003b08 <HAL_RCC_ClockConfig+0x244>)
 800391a:	699b      	ldr	r3, [r3, #24]
 800391c:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8003920:	429a      	cmp	r2, r3
 8003922:	d908      	bls.n	8003936 <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8003924:	4b78      	ldr	r3, [pc, #480]	; (8003b08 <HAL_RCC_ClockConfig+0x244>)
 8003926:	699b      	ldr	r3, [r3, #24]
 8003928:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 800392c:	687b      	ldr	r3, [r7, #4]
 800392e:	691b      	ldr	r3, [r3, #16]
 8003930:	4975      	ldr	r1, [pc, #468]	; (8003b08 <HAL_RCC_ClockConfig+0x244>)
 8003932:	4313      	orrs	r3, r2
 8003934:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003936:	687b      	ldr	r3, [r7, #4]
 8003938:	681b      	ldr	r3, [r3, #0]
 800393a:	f003 0308 	and.w	r3, r3, #8
 800393e:	2b00      	cmp	r3, #0
 8003940:	d010      	beq.n	8003964 <HAL_RCC_ClockConfig+0xa0>
  {
#if defined (RCC_D2CFGR_D2PPRE1)
    if ((RCC_ClkInitStruct->APB1CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 8003942:	687b      	ldr	r3, [r7, #4]
 8003944:	695a      	ldr	r2, [r3, #20]
 8003946:	4b70      	ldr	r3, [pc, #448]	; (8003b08 <HAL_RCC_ClockConfig+0x244>)
 8003948:	69db      	ldr	r3, [r3, #28]
 800394a:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800394e:	429a      	cmp	r2, r3
 8003950:	d908      	bls.n	8003964 <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 8003952:	4b6d      	ldr	r3, [pc, #436]	; (8003b08 <HAL_RCC_ClockConfig+0x244>)
 8003954:	69db      	ldr	r3, [r3, #28]
 8003956:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 800395a:	687b      	ldr	r3, [r7, #4]
 800395c:	695b      	ldr	r3, [r3, #20]
 800395e:	496a      	ldr	r1, [pc, #424]	; (8003b08 <HAL_RCC_ClockConfig+0x244>)
 8003960:	4313      	orrs	r3, r2
 8003962:	61cb      	str	r3, [r1, #28]
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
    }
#endif
  }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003964:	687b      	ldr	r3, [r7, #4]
 8003966:	681b      	ldr	r3, [r3, #0]
 8003968:	f003 0310 	and.w	r3, r3, #16
 800396c:	2b00      	cmp	r3, #0
 800396e:	d010      	beq.n	8003992 <HAL_RCC_ClockConfig+0xce>
  {
#if defined(RCC_D2CFGR_D2PPRE2)
    if ((RCC_ClkInitStruct->APB2CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8003970:	687b      	ldr	r3, [r7, #4]
 8003972:	699a      	ldr	r2, [r3, #24]
 8003974:	4b64      	ldr	r3, [pc, #400]	; (8003b08 <HAL_RCC_ClockConfig+0x244>)
 8003976:	69db      	ldr	r3, [r3, #28]
 8003978:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800397c:	429a      	cmp	r2, r3
 800397e:	d908      	bls.n	8003992 <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8003980:	4b61      	ldr	r3, [pc, #388]	; (8003b08 <HAL_RCC_ClockConfig+0x244>)
 8003982:	69db      	ldr	r3, [r3, #28]
 8003984:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8003988:	687b      	ldr	r3, [r7, #4]
 800398a:	699b      	ldr	r3, [r3, #24]
 800398c:	495e      	ldr	r1, [pc, #376]	; (8003b08 <HAL_RCC_ClockConfig+0x244>)
 800398e:	4313      	orrs	r3, r2
 8003990:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 8003992:	687b      	ldr	r3, [r7, #4]
 8003994:	681b      	ldr	r3, [r3, #0]
 8003996:	f003 0320 	and.w	r3, r3, #32
 800399a:	2b00      	cmp	r3, #0
 800399c:	d010      	beq.n	80039c0 <HAL_RCC_ClockConfig+0xfc>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if ((RCC_ClkInitStruct->APB4CLKDivider) > (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 800399e:	687b      	ldr	r3, [r7, #4]
 80039a0:	69da      	ldr	r2, [r3, #28]
 80039a2:	4b59      	ldr	r3, [pc, #356]	; (8003b08 <HAL_RCC_ClockConfig+0x244>)
 80039a4:	6a1b      	ldr	r3, [r3, #32]
 80039a6:	f003 0370 	and.w	r3, r3, #112	; 0x70
 80039aa:	429a      	cmp	r2, r3
 80039ac:	d908      	bls.n	80039c0 <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 80039ae:	4b56      	ldr	r3, [pc, #344]	; (8003b08 <HAL_RCC_ClockConfig+0x244>)
 80039b0:	6a1b      	ldr	r3, [r3, #32]
 80039b2:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 80039b6:	687b      	ldr	r3, [r7, #4]
 80039b8:	69db      	ldr	r3, [r3, #28]
 80039ba:	4953      	ldr	r1, [pc, #332]	; (8003b08 <HAL_RCC_ClockConfig+0x244>)
 80039bc:	4313      	orrs	r3, r2
 80039be:	620b      	str	r3, [r1, #32]
    }
#endif
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80039c0:	687b      	ldr	r3, [r7, #4]
 80039c2:	681b      	ldr	r3, [r3, #0]
 80039c4:	f003 0302 	and.w	r3, r3, #2
 80039c8:	2b00      	cmp	r3, #0
 80039ca:	d010      	beq.n	80039ee <HAL_RCC_ClockConfig+0x12a>
  {
#if defined (RCC_D1CFGR_HPRE)
    if ((RCC_ClkInitStruct->AHBCLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 80039cc:	687b      	ldr	r3, [r7, #4]
 80039ce:	68da      	ldr	r2, [r3, #12]
 80039d0:	4b4d      	ldr	r3, [pc, #308]	; (8003b08 <HAL_RCC_ClockConfig+0x244>)
 80039d2:	699b      	ldr	r3, [r3, #24]
 80039d4:	f003 030f 	and.w	r3, r3, #15
 80039d8:	429a      	cmp	r2, r3
 80039da:	d908      	bls.n	80039ee <HAL_RCC_ClockConfig+0x12a>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80039dc:	4b4a      	ldr	r3, [pc, #296]	; (8003b08 <HAL_RCC_ClockConfig+0x244>)
 80039de:	699b      	ldr	r3, [r3, #24]
 80039e0:	f023 020f 	bic.w	r2, r3, #15
 80039e4:	687b      	ldr	r3, [r7, #4]
 80039e6:	68db      	ldr	r3, [r3, #12]
 80039e8:	4947      	ldr	r1, [pc, #284]	; (8003b08 <HAL_RCC_ClockConfig+0x244>)
 80039ea:	4313      	orrs	r3, r2
 80039ec:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*------------------------- SYSCLK Configuration -------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80039ee:	687b      	ldr	r3, [r7, #4]
 80039f0:	681b      	ldr	r3, [r3, #0]
 80039f2:	f003 0301 	and.w	r3, r3, #1
 80039f6:	2b00      	cmp	r3, #0
 80039f8:	d055      	beq.n	8003aa6 <HAL_RCC_ClockConfig+0x1e2>
  {
    assert_param(IS_RCC_SYSCLK(RCC_ClkInitStruct->SYSCLKDivider));
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
#if defined(RCC_D1CFGR_D1CPRE)
    MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1CPRE, RCC_ClkInitStruct->SYSCLKDivider);
 80039fa:	4b43      	ldr	r3, [pc, #268]	; (8003b08 <HAL_RCC_ClockConfig+0x244>)
 80039fc:	699b      	ldr	r3, [r3, #24]
 80039fe:	f423 6270 	bic.w	r2, r3, #3840	; 0xf00
 8003a02:	687b      	ldr	r3, [r7, #4]
 8003a04:	689b      	ldr	r3, [r3, #8]
 8003a06:	4940      	ldr	r1, [pc, #256]	; (8003b08 <HAL_RCC_ClockConfig+0x244>)
 8003a08:	4313      	orrs	r3, r2
 8003a0a:	618b      	str	r3, [r1, #24]
#else
    MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDCPRE, RCC_ClkInitStruct->SYSCLKDivider);
#endif
    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003a0c:	687b      	ldr	r3, [r7, #4]
 8003a0e:	685b      	ldr	r3, [r3, #4]
 8003a10:	2b02      	cmp	r3, #2
 8003a12:	d107      	bne.n	8003a24 <HAL_RCC_ClockConfig+0x160>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8003a14:	4b3c      	ldr	r3, [pc, #240]	; (8003b08 <HAL_RCC_ClockConfig+0x244>)
 8003a16:	681b      	ldr	r3, [r3, #0]
 8003a18:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003a1c:	2b00      	cmp	r3, #0
 8003a1e:	d121      	bne.n	8003a64 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8003a20:	2301      	movs	r3, #1
 8003a22:	e0f6      	b.n	8003c12 <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8003a24:	687b      	ldr	r3, [r7, #4]
 8003a26:	685b      	ldr	r3, [r3, #4]
 8003a28:	2b03      	cmp	r3, #3
 8003a2a:	d107      	bne.n	8003a3c <HAL_RCC_ClockConfig+0x178>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8003a2c:	4b36      	ldr	r3, [pc, #216]	; (8003b08 <HAL_RCC_ClockConfig+0x244>)
 8003a2e:	681b      	ldr	r3, [r3, #0]
 8003a30:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003a34:	2b00      	cmp	r3, #0
 8003a36:	d115      	bne.n	8003a64 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8003a38:	2301      	movs	r3, #1
 8003a3a:	e0ea      	b.n	8003c12 <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* CSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 8003a3c:	687b      	ldr	r3, [r7, #4]
 8003a3e:	685b      	ldr	r3, [r3, #4]
 8003a40:	2b01      	cmp	r3, #1
 8003a42:	d107      	bne.n	8003a54 <HAL_RCC_ClockConfig+0x190>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8003a44:	4b30      	ldr	r3, [pc, #192]	; (8003b08 <HAL_RCC_ClockConfig+0x244>)
 8003a46:	681b      	ldr	r3, [r3, #0]
 8003a48:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003a4c:	2b00      	cmp	r3, #0
 8003a4e:	d109      	bne.n	8003a64 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8003a50:	2301      	movs	r3, #1
 8003a52:	e0de      	b.n	8003c12 <HAL_RCC_ClockConfig+0x34e>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8003a54:	4b2c      	ldr	r3, [pc, #176]	; (8003b08 <HAL_RCC_ClockConfig+0x244>)
 8003a56:	681b      	ldr	r3, [r3, #0]
 8003a58:	f003 0304 	and.w	r3, r3, #4
 8003a5c:	2b00      	cmp	r3, #0
 8003a5e:	d101      	bne.n	8003a64 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8003a60:	2301      	movs	r3, #1
 8003a62:	e0d6      	b.n	8003c12 <HAL_RCC_ClockConfig+0x34e>
      }
    }
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8003a64:	4b28      	ldr	r3, [pc, #160]	; (8003b08 <HAL_RCC_ClockConfig+0x244>)
 8003a66:	691b      	ldr	r3, [r3, #16]
 8003a68:	f023 0207 	bic.w	r2, r3, #7
 8003a6c:	687b      	ldr	r3, [r7, #4]
 8003a6e:	685b      	ldr	r3, [r3, #4]
 8003a70:	4925      	ldr	r1, [pc, #148]	; (8003b08 <HAL_RCC_ClockConfig+0x244>)
 8003a72:	4313      	orrs	r3, r2
 8003a74:	610b      	str	r3, [r1, #16]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003a76:	f7fe f819 	bl	8001aac <HAL_GetTick>
 8003a7a:	6178      	str	r0, [r7, #20]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003a7c:	e00a      	b.n	8003a94 <HAL_RCC_ClockConfig+0x1d0>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003a7e:	f7fe f815 	bl	8001aac <HAL_GetTick>
 8003a82:	4602      	mov	r2, r0
 8003a84:	697b      	ldr	r3, [r7, #20]
 8003a86:	1ad3      	subs	r3, r2, r3
 8003a88:	f241 3288 	movw	r2, #5000	; 0x1388
 8003a8c:	4293      	cmp	r3, r2
 8003a8e:	d901      	bls.n	8003a94 <HAL_RCC_ClockConfig+0x1d0>
      {
        return HAL_TIMEOUT;
 8003a90:	2303      	movs	r3, #3
 8003a92:	e0be      	b.n	8003c12 <HAL_RCC_ClockConfig+0x34e>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003a94:	4b1c      	ldr	r3, [pc, #112]	; (8003b08 <HAL_RCC_ClockConfig+0x244>)
 8003a96:	691b      	ldr	r3, [r3, #16]
 8003a98:	f003 0238 	and.w	r2, r3, #56	; 0x38
 8003a9c:	687b      	ldr	r3, [r7, #4]
 8003a9e:	685b      	ldr	r3, [r3, #4]
 8003aa0:	00db      	lsls	r3, r3, #3
 8003aa2:	429a      	cmp	r2, r3
 8003aa4:	d1eb      	bne.n	8003a7e <HAL_RCC_ClockConfig+0x1ba>

  }

  /* Decreasing the BUS frequency divider */
  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003aa6:	687b      	ldr	r3, [r7, #4]
 8003aa8:	681b      	ldr	r3, [r3, #0]
 8003aaa:	f003 0302 	and.w	r3, r3, #2
 8003aae:	2b00      	cmp	r3, #0
 8003ab0:	d010      	beq.n	8003ad4 <HAL_RCC_ClockConfig+0x210>
  {
#if defined(RCC_D1CFGR_HPRE)
    if ((RCC_ClkInitStruct->AHBCLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 8003ab2:	687b      	ldr	r3, [r7, #4]
 8003ab4:	68da      	ldr	r2, [r3, #12]
 8003ab6:	4b14      	ldr	r3, [pc, #80]	; (8003b08 <HAL_RCC_ClockConfig+0x244>)
 8003ab8:	699b      	ldr	r3, [r3, #24]
 8003aba:	f003 030f 	and.w	r3, r3, #15
 8003abe:	429a      	cmp	r2, r3
 8003ac0:	d208      	bcs.n	8003ad4 <HAL_RCC_ClockConfig+0x210>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003ac2:	4b11      	ldr	r3, [pc, #68]	; (8003b08 <HAL_RCC_ClockConfig+0x244>)
 8003ac4:	699b      	ldr	r3, [r3, #24]
 8003ac6:	f023 020f 	bic.w	r2, r3, #15
 8003aca:	687b      	ldr	r3, [r7, #4]
 8003acc:	68db      	ldr	r3, [r3, #12]
 8003ace:	490e      	ldr	r1, [pc, #56]	; (8003b08 <HAL_RCC_ClockConfig+0x244>)
 8003ad0:	4313      	orrs	r3, r2
 8003ad2:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8003ad4:	4b0b      	ldr	r3, [pc, #44]	; (8003b04 <HAL_RCC_ClockConfig+0x240>)
 8003ad6:	681b      	ldr	r3, [r3, #0]
 8003ad8:	f003 030f 	and.w	r3, r3, #15
 8003adc:	683a      	ldr	r2, [r7, #0]
 8003ade:	429a      	cmp	r2, r3
 8003ae0:	d214      	bcs.n	8003b0c <HAL_RCC_ClockConfig+0x248>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003ae2:	4b08      	ldr	r3, [pc, #32]	; (8003b04 <HAL_RCC_ClockConfig+0x240>)
 8003ae4:	681b      	ldr	r3, [r3, #0]
 8003ae6:	f023 020f 	bic.w	r2, r3, #15
 8003aea:	4906      	ldr	r1, [pc, #24]	; (8003b04 <HAL_RCC_ClockConfig+0x240>)
 8003aec:	683b      	ldr	r3, [r7, #0]
 8003aee:	4313      	orrs	r3, r2
 8003af0:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003af2:	4b04      	ldr	r3, [pc, #16]	; (8003b04 <HAL_RCC_ClockConfig+0x240>)
 8003af4:	681b      	ldr	r3, [r3, #0]
 8003af6:	f003 030f 	and.w	r3, r3, #15
 8003afa:	683a      	ldr	r2, [r7, #0]
 8003afc:	429a      	cmp	r2, r3
 8003afe:	d005      	beq.n	8003b0c <HAL_RCC_ClockConfig+0x248>
    {
      return HAL_ERROR;
 8003b00:	2301      	movs	r3, #1
 8003b02:	e086      	b.n	8003c12 <HAL_RCC_ClockConfig+0x34e>
 8003b04:	52002000 	.word	0x52002000
 8003b08:	58024400 	.word	0x58024400
    }
  }

  /*-------------------------- D1PCLK1/CDPCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8003b0c:	687b      	ldr	r3, [r7, #4]
 8003b0e:	681b      	ldr	r3, [r3, #0]
 8003b10:	f003 0304 	and.w	r3, r3, #4
 8003b14:	2b00      	cmp	r3, #0
 8003b16:	d010      	beq.n	8003b3a <HAL_RCC_ClockConfig+0x276>
  {
#if defined(RCC_D1CFGR_D1PPRE)
    if ((RCC_ClkInitStruct->APB3CLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8003b18:	687b      	ldr	r3, [r7, #4]
 8003b1a:	691a      	ldr	r2, [r3, #16]
 8003b1c:	4b3f      	ldr	r3, [pc, #252]	; (8003c1c <HAL_RCC_ClockConfig+0x358>)
 8003b1e:	699b      	ldr	r3, [r3, #24]
 8003b20:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8003b24:	429a      	cmp	r2, r3
 8003b26:	d208      	bcs.n	8003b3a <HAL_RCC_ClockConfig+0x276>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8003b28:	4b3c      	ldr	r3, [pc, #240]	; (8003c1c <HAL_RCC_ClockConfig+0x358>)
 8003b2a:	699b      	ldr	r3, [r3, #24]
 8003b2c:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8003b30:	687b      	ldr	r3, [r7, #4]
 8003b32:	691b      	ldr	r3, [r3, #16]
 8003b34:	4939      	ldr	r1, [pc, #228]	; (8003c1c <HAL_RCC_ClockConfig+0x358>)
 8003b36:	4313      	orrs	r3, r2
 8003b38:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003b3a:	687b      	ldr	r3, [r7, #4]
 8003b3c:	681b      	ldr	r3, [r3, #0]
 8003b3e:	f003 0308 	and.w	r3, r3, #8
 8003b42:	2b00      	cmp	r3, #0
 8003b44:	d010      	beq.n	8003b68 <HAL_RCC_ClockConfig+0x2a4>
  {
#if defined(RCC_D2CFGR_D2PPRE1)
    if ((RCC_ClkInitStruct->APB1CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 8003b46:	687b      	ldr	r3, [r7, #4]
 8003b48:	695a      	ldr	r2, [r3, #20]
 8003b4a:	4b34      	ldr	r3, [pc, #208]	; (8003c1c <HAL_RCC_ClockConfig+0x358>)
 8003b4c:	69db      	ldr	r3, [r3, #28]
 8003b4e:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8003b52:	429a      	cmp	r2, r3
 8003b54:	d208      	bcs.n	8003b68 <HAL_RCC_ClockConfig+0x2a4>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 8003b56:	4b31      	ldr	r3, [pc, #196]	; (8003c1c <HAL_RCC_ClockConfig+0x358>)
 8003b58:	69db      	ldr	r3, [r3, #28]
 8003b5a:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8003b5e:	687b      	ldr	r3, [r7, #4]
 8003b60:	695b      	ldr	r3, [r3, #20]
 8003b62:	492e      	ldr	r1, [pc, #184]	; (8003c1c <HAL_RCC_ClockConfig+0x358>)
 8003b64:	4313      	orrs	r3, r2
 8003b66:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003b68:	687b      	ldr	r3, [r7, #4]
 8003b6a:	681b      	ldr	r3, [r3, #0]
 8003b6c:	f003 0310 	and.w	r3, r3, #16
 8003b70:	2b00      	cmp	r3, #0
 8003b72:	d010      	beq.n	8003b96 <HAL_RCC_ClockConfig+0x2d2>
  {
#if defined (RCC_D2CFGR_D2PPRE2)
    if ((RCC_ClkInitStruct->APB2CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8003b74:	687b      	ldr	r3, [r7, #4]
 8003b76:	699a      	ldr	r2, [r3, #24]
 8003b78:	4b28      	ldr	r3, [pc, #160]	; (8003c1c <HAL_RCC_ClockConfig+0x358>)
 8003b7a:	69db      	ldr	r3, [r3, #28]
 8003b7c:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8003b80:	429a      	cmp	r2, r3
 8003b82:	d208      	bcs.n	8003b96 <HAL_RCC_ClockConfig+0x2d2>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8003b84:	4b25      	ldr	r3, [pc, #148]	; (8003c1c <HAL_RCC_ClockConfig+0x358>)
 8003b86:	69db      	ldr	r3, [r3, #28]
 8003b88:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8003b8c:	687b      	ldr	r3, [r7, #4]
 8003b8e:	699b      	ldr	r3, [r3, #24]
 8003b90:	4922      	ldr	r1, [pc, #136]	; (8003c1c <HAL_RCC_ClockConfig+0x358>)
 8003b92:	4313      	orrs	r3, r2
 8003b94:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1/SRDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 8003b96:	687b      	ldr	r3, [r7, #4]
 8003b98:	681b      	ldr	r3, [r3, #0]
 8003b9a:	f003 0320 	and.w	r3, r3, #32
 8003b9e:	2b00      	cmp	r3, #0
 8003ba0:	d010      	beq.n	8003bc4 <HAL_RCC_ClockConfig+0x300>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if ((RCC_ClkInitStruct->APB4CLKDivider) < (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 8003ba2:	687b      	ldr	r3, [r7, #4]
 8003ba4:	69da      	ldr	r2, [r3, #28]
 8003ba6:	4b1d      	ldr	r3, [pc, #116]	; (8003c1c <HAL_RCC_ClockConfig+0x358>)
 8003ba8:	6a1b      	ldr	r3, [r3, #32]
 8003baa:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8003bae:	429a      	cmp	r2, r3
 8003bb0:	d208      	bcs.n	8003bc4 <HAL_RCC_ClockConfig+0x300>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 8003bb2:	4b1a      	ldr	r3, [pc, #104]	; (8003c1c <HAL_RCC_ClockConfig+0x358>)
 8003bb4:	6a1b      	ldr	r3, [r3, #32]
 8003bb6:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8003bba:	687b      	ldr	r3, [r7, #4]
 8003bbc:	69db      	ldr	r3, [r3, #28]
 8003bbe:	4917      	ldr	r1, [pc, #92]	; (8003c1c <HAL_RCC_ClockConfig+0x358>)
 8003bc0:	4313      	orrs	r3, r2
 8003bc2:	620b      	str	r3, [r1, #32]
#endif
  }

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8003bc4:	f000 f834 	bl	8003c30 <HAL_RCC_GetSysClockFreq>
 8003bc8:	4602      	mov	r2, r0
 8003bca:	4b14      	ldr	r3, [pc, #80]	; (8003c1c <HAL_RCC_ClockConfig+0x358>)
 8003bcc:	699b      	ldr	r3, [r3, #24]
 8003bce:	0a1b      	lsrs	r3, r3, #8
 8003bd0:	f003 030f 	and.w	r3, r3, #15
 8003bd4:	4912      	ldr	r1, [pc, #72]	; (8003c20 <HAL_RCC_ClockConfig+0x35c>)
 8003bd6:	5ccb      	ldrb	r3, [r1, r3]
 8003bd8:	f003 031f 	and.w	r3, r3, #31
 8003bdc:	fa22 f303 	lsr.w	r3, r2, r3
 8003be0:	613b      	str	r3, [r7, #16]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8003be2:	4b0e      	ldr	r3, [pc, #56]	; (8003c1c <HAL_RCC_ClockConfig+0x358>)
 8003be4:	699b      	ldr	r3, [r3, #24]
 8003be6:	f003 030f 	and.w	r3, r3, #15
 8003bea:	4a0d      	ldr	r2, [pc, #52]	; (8003c20 <HAL_RCC_ClockConfig+0x35c>)
 8003bec:	5cd3      	ldrb	r3, [r2, r3]
 8003bee:	f003 031f 	and.w	r3, r3, #31
 8003bf2:	693a      	ldr	r2, [r7, #16]
 8003bf4:	fa22 f303 	lsr.w	r3, r2, r3
 8003bf8:	4a0a      	ldr	r2, [pc, #40]	; (8003c24 <HAL_RCC_ClockConfig+0x360>)
 8003bfa:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8003bfc:	4a0a      	ldr	r2, [pc, #40]	; (8003c28 <HAL_RCC_ClockConfig+0x364>)
 8003bfe:	693b      	ldr	r3, [r7, #16]
 8003c00:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Configure the source of time base considering new system clocks settings*/
  halstatus = HAL_InitTick(uwTickPrio);
 8003c02:	4b0a      	ldr	r3, [pc, #40]	; (8003c2c <HAL_RCC_ClockConfig+0x368>)
 8003c04:	681b      	ldr	r3, [r3, #0]
 8003c06:	4618      	mov	r0, r3
 8003c08:	f7fd ff06 	bl	8001a18 <HAL_InitTick>
 8003c0c:	4603      	mov	r3, r0
 8003c0e:	73fb      	strb	r3, [r7, #15]

  return halstatus;
 8003c10:	7bfb      	ldrb	r3, [r7, #15]
}
 8003c12:	4618      	mov	r0, r3
 8003c14:	3718      	adds	r7, #24
 8003c16:	46bd      	mov	sp, r7
 8003c18:	bd80      	pop	{r7, pc}
 8003c1a:	bf00      	nop
 8003c1c:	58024400 	.word	0x58024400
 8003c20:	0800b834 	.word	0x0800b834
 8003c24:	2000006c 	.word	0x2000006c
 8003c28:	20000068 	.word	0x20000068
 8003c2c:	20000070 	.word	0x20000070

08003c30 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003c30:	b480      	push	{r7}
 8003c32:	b089      	sub	sp, #36	; 0x24
 8003c34:	af00      	add	r7, sp, #0
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 8003c36:	4bb3      	ldr	r3, [pc, #716]	; (8003f04 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003c38:	691b      	ldr	r3, [r3, #16]
 8003c3a:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8003c3e:	2b18      	cmp	r3, #24
 8003c40:	f200 8155 	bhi.w	8003eee <HAL_RCC_GetSysClockFreq+0x2be>
 8003c44:	a201      	add	r2, pc, #4	; (adr r2, 8003c4c <HAL_RCC_GetSysClockFreq+0x1c>)
 8003c46:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003c4a:	bf00      	nop
 8003c4c:	08003cb1 	.word	0x08003cb1
 8003c50:	08003eef 	.word	0x08003eef
 8003c54:	08003eef 	.word	0x08003eef
 8003c58:	08003eef 	.word	0x08003eef
 8003c5c:	08003eef 	.word	0x08003eef
 8003c60:	08003eef 	.word	0x08003eef
 8003c64:	08003eef 	.word	0x08003eef
 8003c68:	08003eef 	.word	0x08003eef
 8003c6c:	08003cd7 	.word	0x08003cd7
 8003c70:	08003eef 	.word	0x08003eef
 8003c74:	08003eef 	.word	0x08003eef
 8003c78:	08003eef 	.word	0x08003eef
 8003c7c:	08003eef 	.word	0x08003eef
 8003c80:	08003eef 	.word	0x08003eef
 8003c84:	08003eef 	.word	0x08003eef
 8003c88:	08003eef 	.word	0x08003eef
 8003c8c:	08003cdd 	.word	0x08003cdd
 8003c90:	08003eef 	.word	0x08003eef
 8003c94:	08003eef 	.word	0x08003eef
 8003c98:	08003eef 	.word	0x08003eef
 8003c9c:	08003eef 	.word	0x08003eef
 8003ca0:	08003eef 	.word	0x08003eef
 8003ca4:	08003eef 	.word	0x08003eef
 8003ca8:	08003eef 	.word	0x08003eef
 8003cac:	08003ce3 	.word	0x08003ce3
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8003cb0:	4b94      	ldr	r3, [pc, #592]	; (8003f04 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003cb2:	681b      	ldr	r3, [r3, #0]
 8003cb4:	f003 0320 	and.w	r3, r3, #32
 8003cb8:	2b00      	cmp	r3, #0
 8003cba:	d009      	beq.n	8003cd0 <HAL_RCC_GetSysClockFreq+0xa0>
      {
        sysclockfreq = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8003cbc:	4b91      	ldr	r3, [pc, #580]	; (8003f04 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003cbe:	681b      	ldr	r3, [r3, #0]
 8003cc0:	08db      	lsrs	r3, r3, #3
 8003cc2:	f003 0303 	and.w	r3, r3, #3
 8003cc6:	4a90      	ldr	r2, [pc, #576]	; (8003f08 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8003cc8:	fa22 f303 	lsr.w	r3, r2, r3
 8003ccc:	61bb      	str	r3, [r7, #24]
      else
      {
        sysclockfreq = (uint32_t) HSI_VALUE;
      }

      break;
 8003cce:	e111      	b.n	8003ef4 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = (uint32_t) HSI_VALUE;
 8003cd0:	4b8d      	ldr	r3, [pc, #564]	; (8003f08 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8003cd2:	61bb      	str	r3, [r7, #24]
      break;
 8003cd4:	e10e      	b.n	8003ef4 <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_CSI:  /* CSI used as system clock  source */
      sysclockfreq = CSI_VALUE;
 8003cd6:	4b8d      	ldr	r3, [pc, #564]	; (8003f0c <HAL_RCC_GetSysClockFreq+0x2dc>)
 8003cd8:	61bb      	str	r3, [r7, #24]
      break;
 8003cda:	e10b      	b.n	8003ef4 <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
      sysclockfreq = HSE_VALUE;
 8003cdc:	4b8c      	ldr	r3, [pc, #560]	; (8003f10 <HAL_RCC_GetSysClockFreq+0x2e0>)
 8003cde:	61bb      	str	r3, [r7, #24]
      break;
 8003ce0:	e108      	b.n	8003ef4 <HAL_RCC_GetSysClockFreq+0x2c4>
    case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

      /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR
      */
      pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8003ce2:	4b88      	ldr	r3, [pc, #544]	; (8003f04 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003ce4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003ce6:	f003 0303 	and.w	r3, r3, #3
 8003cea:	617b      	str	r3, [r7, #20]
      pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1) >> 4)  ;
 8003cec:	4b85      	ldr	r3, [pc, #532]	; (8003f04 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003cee:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003cf0:	091b      	lsrs	r3, r3, #4
 8003cf2:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8003cf6:	613b      	str	r3, [r7, #16]
      pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN) >> RCC_PLLCFGR_PLL1FRACEN_Pos);
 8003cf8:	4b82      	ldr	r3, [pc, #520]	; (8003f04 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003cfa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003cfc:	f003 0301 	and.w	r3, r3, #1
 8003d00:	60fb      	str	r3, [r7, #12]
      fracn1 = (float_t)(uint32_t)(pllfracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
 8003d02:	4b80      	ldr	r3, [pc, #512]	; (8003f04 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003d04:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003d06:	08db      	lsrs	r3, r3, #3
 8003d08:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8003d0c:	68fa      	ldr	r2, [r7, #12]
 8003d0e:	fb02 f303 	mul.w	r3, r2, r3
 8003d12:	ee07 3a90 	vmov	s15, r3
 8003d16:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003d1a:	edc7 7a02 	vstr	s15, [r7, #8]

      if (pllm != 0U)
 8003d1e:	693b      	ldr	r3, [r7, #16]
 8003d20:	2b00      	cmp	r3, #0
 8003d22:	f000 80e1 	beq.w	8003ee8 <HAL_RCC_GetSysClockFreq+0x2b8>
 8003d26:	697b      	ldr	r3, [r7, #20]
 8003d28:	2b02      	cmp	r3, #2
 8003d2a:	f000 8083 	beq.w	8003e34 <HAL_RCC_GetSysClockFreq+0x204>
 8003d2e:	697b      	ldr	r3, [r7, #20]
 8003d30:	2b02      	cmp	r3, #2
 8003d32:	f200 80a1 	bhi.w	8003e78 <HAL_RCC_GetSysClockFreq+0x248>
 8003d36:	697b      	ldr	r3, [r7, #20]
 8003d38:	2b00      	cmp	r3, #0
 8003d3a:	d003      	beq.n	8003d44 <HAL_RCC_GetSysClockFreq+0x114>
 8003d3c:	697b      	ldr	r3, [r7, #20]
 8003d3e:	2b01      	cmp	r3, #1
 8003d40:	d056      	beq.n	8003df0 <HAL_RCC_GetSysClockFreq+0x1c0>
 8003d42:	e099      	b.n	8003e78 <HAL_RCC_GetSysClockFreq+0x248>
      {
        switch (pllsource)
        {
          case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

            if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8003d44:	4b6f      	ldr	r3, [pc, #444]	; (8003f04 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003d46:	681b      	ldr	r3, [r3, #0]
 8003d48:	f003 0320 	and.w	r3, r3, #32
 8003d4c:	2b00      	cmp	r3, #0
 8003d4e:	d02d      	beq.n	8003dac <HAL_RCC_GetSysClockFreq+0x17c>
            {
              hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8003d50:	4b6c      	ldr	r3, [pc, #432]	; (8003f04 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003d52:	681b      	ldr	r3, [r3, #0]
 8003d54:	08db      	lsrs	r3, r3, #3
 8003d56:	f003 0303 	and.w	r3, r3, #3
 8003d5a:	4a6b      	ldr	r2, [pc, #428]	; (8003f08 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8003d5c:	fa22 f303 	lsr.w	r3, r2, r3
 8003d60:	607b      	str	r3, [r7, #4]
              pllvco = ((float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8003d62:	687b      	ldr	r3, [r7, #4]
 8003d64:	ee07 3a90 	vmov	s15, r3
 8003d68:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003d6c:	693b      	ldr	r3, [r7, #16]
 8003d6e:	ee07 3a90 	vmov	s15, r3
 8003d72:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003d76:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8003d7a:	4b62      	ldr	r3, [pc, #392]	; (8003f04 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003d7c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003d7e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003d82:	ee07 3a90 	vmov	s15, r3
 8003d86:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003d8a:	ed97 6a02 	vldr	s12, [r7, #8]
 8003d8e:	eddf 5a61 	vldr	s11, [pc, #388]	; 8003f14 <HAL_RCC_GetSysClockFreq+0x2e4>
 8003d92:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8003d96:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8003d9a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8003d9e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8003da2:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003da6:	edc7 7a07 	vstr	s15, [r7, #28]
            }
            else
            {
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
            }
            break;
 8003daa:	e087      	b.n	8003ebc <HAL_RCC_GetSysClockFreq+0x28c>
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8003dac:	693b      	ldr	r3, [r7, #16]
 8003dae:	ee07 3a90 	vmov	s15, r3
 8003db2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003db6:	eddf 6a58 	vldr	s13, [pc, #352]	; 8003f18 <HAL_RCC_GetSysClockFreq+0x2e8>
 8003dba:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8003dbe:	4b51      	ldr	r3, [pc, #324]	; (8003f04 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003dc0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003dc2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003dc6:	ee07 3a90 	vmov	s15, r3
 8003dca:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003dce:	ed97 6a02 	vldr	s12, [r7, #8]
 8003dd2:	eddf 5a50 	vldr	s11, [pc, #320]	; 8003f14 <HAL_RCC_GetSysClockFreq+0x2e4>
 8003dd6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8003dda:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8003dde:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8003de2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8003de6:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003dea:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8003dee:	e065      	b.n	8003ebc <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8003df0:	693b      	ldr	r3, [r7, #16]
 8003df2:	ee07 3a90 	vmov	s15, r3
 8003df6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003dfa:	eddf 6a48 	vldr	s13, [pc, #288]	; 8003f1c <HAL_RCC_GetSysClockFreq+0x2ec>
 8003dfe:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8003e02:	4b40      	ldr	r3, [pc, #256]	; (8003f04 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003e04:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003e06:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003e0a:	ee07 3a90 	vmov	s15, r3
 8003e0e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003e12:	ed97 6a02 	vldr	s12, [r7, #8]
 8003e16:	eddf 5a3f 	vldr	s11, [pc, #252]	; 8003f14 <HAL_RCC_GetSysClockFreq+0x2e4>
 8003e1a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8003e1e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8003e22:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8003e26:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8003e2a:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003e2e:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8003e32:	e043      	b.n	8003ebc <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
            pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8003e34:	693b      	ldr	r3, [r7, #16]
 8003e36:	ee07 3a90 	vmov	s15, r3
 8003e3a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003e3e:	eddf 6a38 	vldr	s13, [pc, #224]	; 8003f20 <HAL_RCC_GetSysClockFreq+0x2f0>
 8003e42:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8003e46:	4b2f      	ldr	r3, [pc, #188]	; (8003f04 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003e48:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003e4a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003e4e:	ee07 3a90 	vmov	s15, r3
 8003e52:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003e56:	ed97 6a02 	vldr	s12, [r7, #8]
 8003e5a:	eddf 5a2e 	vldr	s11, [pc, #184]	; 8003f14 <HAL_RCC_GetSysClockFreq+0x2e4>
 8003e5e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8003e62:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8003e66:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8003e6a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8003e6e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003e72:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8003e76:	e021      	b.n	8003ebc <HAL_RCC_GetSysClockFreq+0x28c>

          default:
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8003e78:	693b      	ldr	r3, [r7, #16]
 8003e7a:	ee07 3a90 	vmov	s15, r3
 8003e7e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003e82:	eddf 6a26 	vldr	s13, [pc, #152]	; 8003f1c <HAL_RCC_GetSysClockFreq+0x2ec>
 8003e86:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8003e8a:	4b1e      	ldr	r3, [pc, #120]	; (8003f04 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003e8c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003e8e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003e92:	ee07 3a90 	vmov	s15, r3
 8003e96:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003e9a:	ed97 6a02 	vldr	s12, [r7, #8]
 8003e9e:	eddf 5a1d 	vldr	s11, [pc, #116]	; 8003f14 <HAL_RCC_GetSysClockFreq+0x2e4>
 8003ea2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8003ea6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8003eaa:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8003eae:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8003eb2:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003eb6:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8003eba:	bf00      	nop
        }
        pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >> 9) + 1U) ;
 8003ebc:	4b11      	ldr	r3, [pc, #68]	; (8003f04 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003ebe:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003ec0:	0a5b      	lsrs	r3, r3, #9
 8003ec2:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8003ec6:	3301      	adds	r3, #1
 8003ec8:	603b      	str	r3, [r7, #0]
        sysclockfreq = (uint32_t)(float_t)(pllvco / (float_t)pllp);
 8003eca:	683b      	ldr	r3, [r7, #0]
 8003ecc:	ee07 3a90 	vmov	s15, r3
 8003ed0:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8003ed4:	edd7 6a07 	vldr	s13, [r7, #28]
 8003ed8:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8003edc:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8003ee0:	ee17 3a90 	vmov	r3, s15
 8003ee4:	61bb      	str	r3, [r7, #24]
      }
      else
      {
        sysclockfreq = 0U;
      }
      break;
 8003ee6:	e005      	b.n	8003ef4 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = 0U;
 8003ee8:	2300      	movs	r3, #0
 8003eea:	61bb      	str	r3, [r7, #24]
      break;
 8003eec:	e002      	b.n	8003ef4 <HAL_RCC_GetSysClockFreq+0x2c4>

    default:
      sysclockfreq = CSI_VALUE;
 8003eee:	4b07      	ldr	r3, [pc, #28]	; (8003f0c <HAL_RCC_GetSysClockFreq+0x2dc>)
 8003ef0:	61bb      	str	r3, [r7, #24]
      break;
 8003ef2:	bf00      	nop
  }

  return sysclockfreq;
 8003ef4:	69bb      	ldr	r3, [r7, #24]
}
 8003ef6:	4618      	mov	r0, r3
 8003ef8:	3724      	adds	r7, #36	; 0x24
 8003efa:	46bd      	mov	sp, r7
 8003efc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f00:	4770      	bx	lr
 8003f02:	bf00      	nop
 8003f04:	58024400 	.word	0x58024400
 8003f08:	03d09000 	.word	0x03d09000
 8003f0c:	003d0900 	.word	0x003d0900
 8003f10:	007a1200 	.word	0x007a1200
 8003f14:	46000000 	.word	0x46000000
 8003f18:	4c742400 	.word	0x4c742400
 8003f1c:	4a742400 	.word	0x4a742400
 8003f20:	4af42400 	.word	0x4af42400

08003f24 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemD2Clock CMSIS variable is used to store System domain2 Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003f24:	b580      	push	{r7, lr}
 8003f26:	b082      	sub	sp, #8
 8003f28:	af00      	add	r7, sp, #0
  uint32_t common_system_clock;

#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 8003f2a:	f7ff fe81 	bl	8003c30 <HAL_RCC_GetSysClockFreq>
 8003f2e:	4602      	mov	r2, r0
 8003f30:	4b10      	ldr	r3, [pc, #64]	; (8003f74 <HAL_RCC_GetHCLKFreq+0x50>)
 8003f32:	699b      	ldr	r3, [r3, #24]
 8003f34:	0a1b      	lsrs	r3, r3, #8
 8003f36:	f003 030f 	and.w	r3, r3, #15
 8003f3a:	490f      	ldr	r1, [pc, #60]	; (8003f78 <HAL_RCC_GetHCLKFreq+0x54>)
 8003f3c:	5ccb      	ldrb	r3, [r1, r3]
 8003f3e:	f003 031f 	and.w	r3, r3, #31
 8003f42:	fa22 f303 	lsr.w	r3, r2, r3
 8003f46:	607b      	str	r3, [r7, #4]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos] & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8003f48:	4b0a      	ldr	r3, [pc, #40]	; (8003f74 <HAL_RCC_GetHCLKFreq+0x50>)
 8003f4a:	699b      	ldr	r3, [r3, #24]
 8003f4c:	f003 030f 	and.w	r3, r3, #15
 8003f50:	4a09      	ldr	r2, [pc, #36]	; (8003f78 <HAL_RCC_GetHCLKFreq+0x54>)
 8003f52:	5cd3      	ldrb	r3, [r2, r3]
 8003f54:	f003 031f 	and.w	r3, r3, #31
 8003f58:	687a      	ldr	r2, [r7, #4]
 8003f5a:	fa22 f303 	lsr.w	r3, r2, r3
 8003f5e:	4a07      	ldr	r2, [pc, #28]	; (8003f7c <HAL_RCC_GetHCLKFreq+0x58>)
 8003f60:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8003f62:	4a07      	ldr	r2, [pc, #28]	; (8003f80 <HAL_RCC_GetHCLKFreq+0x5c>)
 8003f64:	687b      	ldr	r3, [r7, #4]
 8003f66:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  return SystemD2Clock;
 8003f68:	4b04      	ldr	r3, [pc, #16]	; (8003f7c <HAL_RCC_GetHCLKFreq+0x58>)
 8003f6a:	681b      	ldr	r3, [r3, #0]
}
 8003f6c:	4618      	mov	r0, r3
 8003f6e:	3708      	adds	r7, #8
 8003f70:	46bd      	mov	sp, r7
 8003f72:	bd80      	pop	{r7, pc}
 8003f74:	58024400 	.word	0x58024400
 8003f78:	0800b834 	.word	0x0800b834
 8003f7c:	2000006c 	.word	0x2000006c
 8003f80:	20000068 	.word	0x20000068

08003f84 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003f84:	b580      	push	{r7, lr}
 8003f86:	af00      	add	r7, sp, #0
#if defined (RCC_D2CFGR_D2PPRE1)
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1) >> RCC_D2CFGR_D2PPRE1_Pos]) & 0x1FU));
 8003f88:	f7ff ffcc 	bl	8003f24 <HAL_RCC_GetHCLKFreq>
 8003f8c:	4602      	mov	r2, r0
 8003f8e:	4b06      	ldr	r3, [pc, #24]	; (8003fa8 <HAL_RCC_GetPCLK1Freq+0x24>)
 8003f90:	69db      	ldr	r3, [r3, #28]
 8003f92:	091b      	lsrs	r3, r3, #4
 8003f94:	f003 0307 	and.w	r3, r3, #7
 8003f98:	4904      	ldr	r1, [pc, #16]	; (8003fac <HAL_RCC_GetPCLK1Freq+0x28>)
 8003f9a:	5ccb      	ldrb	r3, [r1, r3]
 8003f9c:	f003 031f 	and.w	r3, r3, #31
 8003fa0:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1) >> RCC_CDCFGR2_CDPPRE1_Pos]) & 0x1FU));
#endif
}
 8003fa4:	4618      	mov	r0, r3
 8003fa6:	bd80      	pop	{r7, pc}
 8003fa8:	58024400 	.word	0x58024400
 8003fac:	0800b834 	.word	0x0800b834

08003fb0 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003fb0:	b580      	push	{r7, lr}
 8003fb2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
#if defined(RCC_D2CFGR_D2PPRE2)
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2) >> RCC_D2CFGR_D2PPRE2_Pos]) & 0x1FU));
 8003fb4:	f7ff ffb6 	bl	8003f24 <HAL_RCC_GetHCLKFreq>
 8003fb8:	4602      	mov	r2, r0
 8003fba:	4b06      	ldr	r3, [pc, #24]	; (8003fd4 <HAL_RCC_GetPCLK2Freq+0x24>)
 8003fbc:	69db      	ldr	r3, [r3, #28]
 8003fbe:	0a1b      	lsrs	r3, r3, #8
 8003fc0:	f003 0307 	and.w	r3, r3, #7
 8003fc4:	4904      	ldr	r1, [pc, #16]	; (8003fd8 <HAL_RCC_GetPCLK2Freq+0x28>)
 8003fc6:	5ccb      	ldrb	r3, [r1, r3]
 8003fc8:	f003 031f 	and.w	r3, r3, #31
 8003fcc:	fa22 f303 	lsr.w	r3, r2, r3
#else
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2) >> RCC_CDCFGR2_CDPPRE2_Pos]) & 0x1FU));
#endif
}
 8003fd0:	4618      	mov	r0, r3
 8003fd2:	bd80      	pop	{r7, pc}
 8003fd4:	58024400 	.word	0x58024400
 8003fd8:	0800b834 	.word	0x0800b834

08003fdc <HAL_RCCEx_PeriphCLKConfig>:
  * (*) : Available on some STM32H7 lines only.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8003fdc:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003fe0:	b0c6      	sub	sp, #280	; 0x118
 8003fe2:	af00      	add	r7, sp, #0
 8003fe4:	f8c7 0104 	str.w	r0, [r7, #260]	; 0x104
  uint32_t tmpreg;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8003fe8:	2300      	movs	r3, #0
 8003fea:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8003fee:	2300      	movs	r3, #0
 8003ff0:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116

  /*---------------------------- SPDIFRX configuration -------------------------------*/

  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8003ff4:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8003ff8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003ffc:	f002 6400 	and.w	r4, r2, #134217728	; 0x8000000
 8004000:	2500      	movs	r5, #0
 8004002:	ea54 0305 	orrs.w	r3, r4, r5
 8004006:	d049      	beq.n	800409c <HAL_RCCEx_PeriphCLKConfig+0xc0>
  {

    switch (PeriphClkInit->SpdifrxClockSelection)
 8004008:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800400c:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800400e:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8004012:	d02f      	beq.n	8004074 <HAL_RCCEx_PeriphCLKConfig+0x98>
 8004014:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8004018:	d828      	bhi.n	800406c <HAL_RCCEx_PeriphCLKConfig+0x90>
 800401a:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800401e:	d01a      	beq.n	8004056 <HAL_RCCEx_PeriphCLKConfig+0x7a>
 8004020:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8004024:	d822      	bhi.n	800406c <HAL_RCCEx_PeriphCLKConfig+0x90>
 8004026:	2b00      	cmp	r3, #0
 8004028:	d003      	beq.n	8004032 <HAL_RCCEx_PeriphCLKConfig+0x56>
 800402a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800402e:	d007      	beq.n	8004040 <HAL_RCCEx_PeriphCLKConfig+0x64>
 8004030:	e01c      	b.n	800406c <HAL_RCCEx_PeriphCLKConfig+0x90>
    {
      case RCC_SPDIFRXCLKSOURCE_PLL:      /* PLL is used as clock source for SPDIFRX*/
        /* Enable PLL1Q Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8004032:	4bab      	ldr	r3, [pc, #684]	; (80042e0 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8004034:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004036:	4aaa      	ldr	r2, [pc, #680]	; (80042e0 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8004038:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800403c:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 800403e:	e01a      	b.n	8004076 <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL2: /* PLL2 is used as clock source for SPDIFRX*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8004040:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8004044:	3308      	adds	r3, #8
 8004046:	2102      	movs	r1, #2
 8004048:	4618      	mov	r0, r3
 800404a:	f001 fc7b 	bl	8005944 <RCCEx_PLL2_Config>
 800404e:	4603      	mov	r3, r0
 8004050:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 8004054:	e00f      	b.n	8004076 <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPDIFRX*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8004056:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800405a:	3328      	adds	r3, #40	; 0x28
 800405c:	2102      	movs	r1, #2
 800405e:	4618      	mov	r0, r3
 8004060:	f001 fd22 	bl	8005aa8 <RCCEx_PLL3_Config>
 8004064:	4603      	mov	r3, r0
 8004066:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 800406a:	e004      	b.n	8004076 <HAL_RCCEx_PeriphCLKConfig+0x9a>
        /* Internal OSC clock is used as source of SPDIFRX clock*/
        /* SPDIFRX clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800406c:	2301      	movs	r3, #1
 800406e:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        break;
 8004072:	e000      	b.n	8004076 <HAL_RCCEx_PeriphCLKConfig+0x9a>
        break;
 8004074:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004076:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800407a:	2b00      	cmp	r3, #0
 800407c:	d10a      	bne.n	8004094 <HAL_RCCEx_PeriphCLKConfig+0xb8>
    {
      /* Set the source of SPDIFRX clock*/
      __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifrxClockSelection);
 800407e:	4b98      	ldr	r3, [pc, #608]	; (80042e0 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8004080:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004082:	f423 1140 	bic.w	r1, r3, #3145728	; 0x300000
 8004086:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800408a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800408c:	4a94      	ldr	r2, [pc, #592]	; (80042e0 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 800408e:	430b      	orrs	r3, r1
 8004090:	6513      	str	r3, [r2, #80]	; 0x50
 8004092:	e003      	b.n	800409c <HAL_RCCEx_PeriphCLKConfig+0xc0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004094:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 8004098:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    }
  }

  /*---------------------------- SAI1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 800409c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80040a0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80040a4:	f402 7880 	and.w	r8, r2, #256	; 0x100
 80040a8:	f04f 0900 	mov.w	r9, #0
 80040ac:	ea58 0309 	orrs.w	r3, r8, r9
 80040b0:	d047      	beq.n	8004142 <HAL_RCCEx_PeriphCLKConfig+0x166>
  {
    switch (PeriphClkInit->Sai1ClockSelection)
 80040b2:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80040b6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80040b8:	2b04      	cmp	r3, #4
 80040ba:	d82a      	bhi.n	8004112 <HAL_RCCEx_PeriphCLKConfig+0x136>
 80040bc:	a201      	add	r2, pc, #4	; (adr r2, 80040c4 <HAL_RCCEx_PeriphCLKConfig+0xe8>)
 80040be:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80040c2:	bf00      	nop
 80040c4:	080040d9 	.word	0x080040d9
 80040c8:	080040e7 	.word	0x080040e7
 80040cc:	080040fd 	.word	0x080040fd
 80040d0:	0800411b 	.word	0x0800411b
 80040d4:	0800411b 	.word	0x0800411b
    {
      case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80040d8:	4b81      	ldr	r3, [pc, #516]	; (80042e0 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 80040da:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80040dc:	4a80      	ldr	r2, [pc, #512]	; (80042e0 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 80040de:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80040e2:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 80040e4:	e01a      	b.n	800411c <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 80040e6:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80040ea:	3308      	adds	r3, #8
 80040ec:	2100      	movs	r1, #0
 80040ee:	4618      	mov	r0, r3
 80040f0:	f001 fc28 	bl	8005944 <RCCEx_PLL2_Config>
 80040f4:	4603      	mov	r3, r0
 80040f6:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 80040fa:	e00f      	b.n	800411c <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 80040fc:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8004100:	3328      	adds	r3, #40	; 0x28
 8004102:	2100      	movs	r1, #0
 8004104:	4618      	mov	r0, r3
 8004106:	f001 fccf 	bl	8005aa8 <RCCEx_PLL3_Config>
 800410a:	4603      	mov	r3, r0
 800410c:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8004110:	e004      	b.n	800411c <HAL_RCCEx_PeriphCLKConfig+0x140>
        /* HSI, HSE, or CSI oscillator is used as source of SAI1 clock */
        /* SAI1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8004112:	2301      	movs	r3, #1
 8004114:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        break;
 8004118:	e000      	b.n	800411c <HAL_RCCEx_PeriphCLKConfig+0x140>
        break;
 800411a:	bf00      	nop
    }

    if (ret == HAL_OK)
 800411c:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 8004120:	2b00      	cmp	r3, #0
 8004122:	d10a      	bne.n	800413a <HAL_RCCEx_PeriphCLKConfig+0x15e>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8004124:	4b6e      	ldr	r3, [pc, #440]	; (80042e0 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8004126:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004128:	f023 0107 	bic.w	r1, r3, #7
 800412c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8004130:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004132:	4a6b      	ldr	r2, [pc, #428]	; (80042e0 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8004134:	430b      	orrs	r3, r1
 8004136:	6513      	str	r3, [r2, #80]	; 0x50
 8004138:	e003      	b.n	8004142 <HAL_RCCEx_PeriphCLKConfig+0x166>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800413a:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800413e:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
  }
#endif  /*SAI2B*/

#if defined(SAI4)
  /*---------------------------- SAI4A configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4A) == RCC_PERIPHCLK_SAI4A)
 8004142:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8004146:	e9d3 2300 	ldrd	r2, r3, [r3]
 800414a:	f402 6a80 	and.w	sl, r2, #1024	; 0x400
 800414e:	f04f 0b00 	mov.w	fp, #0
 8004152:	ea5a 030b 	orrs.w	r3, sl, fp
 8004156:	d05b      	beq.n	8004210 <HAL_RCCEx_PeriphCLKConfig+0x234>
  {
    switch (PeriphClkInit->Sai4AClockSelection)
 8004158:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800415c:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8004160:	f5b3 0f20 	cmp.w	r3, #10485760	; 0xa00000
 8004164:	d03b      	beq.n	80041de <HAL_RCCEx_PeriphCLKConfig+0x202>
 8004166:	f5b3 0f20 	cmp.w	r3, #10485760	; 0xa00000
 800416a:	d834      	bhi.n	80041d6 <HAL_RCCEx_PeriphCLKConfig+0x1fa>
 800416c:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8004170:	d037      	beq.n	80041e2 <HAL_RCCEx_PeriphCLKConfig+0x206>
 8004172:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8004176:	d82e      	bhi.n	80041d6 <HAL_RCCEx_PeriphCLKConfig+0x1fa>
 8004178:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 800417c:	d033      	beq.n	80041e6 <HAL_RCCEx_PeriphCLKConfig+0x20a>
 800417e:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 8004182:	d828      	bhi.n	80041d6 <HAL_RCCEx_PeriphCLKConfig+0x1fa>
 8004184:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8004188:	d01a      	beq.n	80041c0 <HAL_RCCEx_PeriphCLKConfig+0x1e4>
 800418a:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800418e:	d822      	bhi.n	80041d6 <HAL_RCCEx_PeriphCLKConfig+0x1fa>
 8004190:	2b00      	cmp	r3, #0
 8004192:	d003      	beq.n	800419c <HAL_RCCEx_PeriphCLKConfig+0x1c0>
 8004194:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8004198:	d007      	beq.n	80041aa <HAL_RCCEx_PeriphCLKConfig+0x1ce>
 800419a:	e01c      	b.n	80041d6 <HAL_RCCEx_PeriphCLKConfig+0x1fa>
    {
      case RCC_SAI4ACLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800419c:	4b50      	ldr	r3, [pc, #320]	; (80042e0 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 800419e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80041a0:	4a4f      	ldr	r2, [pc, #316]	; (80042e0 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 80041a2:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80041a6:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 80041a8:	e01e      	b.n	80041e8 <HAL_RCCEx_PeriphCLKConfig+0x20c>

      case RCC_SAI4ACLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 80041aa:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80041ae:	3308      	adds	r3, #8
 80041b0:	2100      	movs	r1, #0
 80041b2:	4618      	mov	r0, r3
 80041b4:	f001 fbc6 	bl	8005944 <RCCEx_PLL2_Config>
 80041b8:	4603      	mov	r3, r0
 80041ba:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* SAI2 clock source configuration done later after clock selection check */
        break;
 80041be:	e013      	b.n	80041e8 <HAL_RCCEx_PeriphCLKConfig+0x20c>

      case RCC_SAI4ACLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 80041c0:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80041c4:	3328      	adds	r3, #40	; 0x28
 80041c6:	2100      	movs	r1, #0
 80041c8:	4618      	mov	r0, r3
 80041ca:	f001 fc6d 	bl	8005aa8 <RCCEx_PLL3_Config>
 80041ce:	4603      	mov	r3, r0
 80041d0:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 80041d4:	e008      	b.n	80041e8 <HAL_RCCEx_PeriphCLKConfig+0x20c>
        /* SAI4A clock source configuration done later after clock selection check */
        break;
#endif /* RCC_VER_3_0 */

      default:
        ret = HAL_ERROR;
 80041d6:	2301      	movs	r3, #1
 80041d8:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        break;
 80041dc:	e004      	b.n	80041e8 <HAL_RCCEx_PeriphCLKConfig+0x20c>
        break;
 80041de:	bf00      	nop
 80041e0:	e002      	b.n	80041e8 <HAL_RCCEx_PeriphCLKConfig+0x20c>
        break;
 80041e2:	bf00      	nop
 80041e4:	e000      	b.n	80041e8 <HAL_RCCEx_PeriphCLKConfig+0x20c>
        break;
 80041e6:	bf00      	nop
    }

    if (ret == HAL_OK)
 80041e8:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 80041ec:	2b00      	cmp	r3, #0
 80041ee:	d10b      	bne.n	8004208 <HAL_RCCEx_PeriphCLKConfig+0x22c>
    {
      /* Set the source of SAI4A clock*/
      __HAL_RCC_SAI4A_CONFIG(PeriphClkInit->Sai4AClockSelection);
 80041f0:	4b3b      	ldr	r3, [pc, #236]	; (80042e0 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 80041f2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80041f4:	f423 0160 	bic.w	r1, r3, #14680064	; 0xe00000
 80041f8:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80041fc:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8004200:	4a37      	ldr	r2, [pc, #220]	; (80042e0 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8004202:	430b      	orrs	r3, r1
 8004204:	6593      	str	r3, [r2, #88]	; 0x58
 8004206:	e003      	b.n	8004210 <HAL_RCCEx_PeriphCLKConfig+0x234>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004208:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800420c:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    }
  }
  /*---------------------------- SAI4B configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4B) == RCC_PERIPHCLK_SAI4B)
 8004210:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8004214:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004218:	f402 6300 	and.w	r3, r2, #2048	; 0x800
 800421c:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 8004220:	2300      	movs	r3, #0
 8004222:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 8004226:	e9d7 123e 	ldrd	r1, r2, [r7, #248]	; 0xf8
 800422a:	460b      	mov	r3, r1
 800422c:	4313      	orrs	r3, r2
 800422e:	d05d      	beq.n	80042ec <HAL_RCCEx_PeriphCLKConfig+0x310>
  {
    switch (PeriphClkInit->Sai4BClockSelection)
 8004230:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8004234:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 8004238:	f1b3 6fa0 	cmp.w	r3, #83886080	; 0x5000000
 800423c:	d03b      	beq.n	80042b6 <HAL_RCCEx_PeriphCLKConfig+0x2da>
 800423e:	f1b3 6fa0 	cmp.w	r3, #83886080	; 0x5000000
 8004242:	d834      	bhi.n	80042ae <HAL_RCCEx_PeriphCLKConfig+0x2d2>
 8004244:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8004248:	d037      	beq.n	80042ba <HAL_RCCEx_PeriphCLKConfig+0x2de>
 800424a:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800424e:	d82e      	bhi.n	80042ae <HAL_RCCEx_PeriphCLKConfig+0x2d2>
 8004250:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8004254:	d033      	beq.n	80042be <HAL_RCCEx_PeriphCLKConfig+0x2e2>
 8004256:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 800425a:	d828      	bhi.n	80042ae <HAL_RCCEx_PeriphCLKConfig+0x2d2>
 800425c:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8004260:	d01a      	beq.n	8004298 <HAL_RCCEx_PeriphCLKConfig+0x2bc>
 8004262:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8004266:	d822      	bhi.n	80042ae <HAL_RCCEx_PeriphCLKConfig+0x2d2>
 8004268:	2b00      	cmp	r3, #0
 800426a:	d003      	beq.n	8004274 <HAL_RCCEx_PeriphCLKConfig+0x298>
 800426c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8004270:	d007      	beq.n	8004282 <HAL_RCCEx_PeriphCLKConfig+0x2a6>
 8004272:	e01c      	b.n	80042ae <HAL_RCCEx_PeriphCLKConfig+0x2d2>
    {
      case RCC_SAI4BCLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8004274:	4b1a      	ldr	r3, [pc, #104]	; (80042e0 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8004276:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004278:	4a19      	ldr	r2, [pc, #100]	; (80042e0 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 800427a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800427e:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8004280:	e01e      	b.n	80042c0 <HAL_RCCEx_PeriphCLKConfig+0x2e4>

      case RCC_SAI4BCLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8004282:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8004286:	3308      	adds	r3, #8
 8004288:	2100      	movs	r1, #0
 800428a:	4618      	mov	r0, r3
 800428c:	f001 fb5a 	bl	8005944 <RCCEx_PLL2_Config>
 8004290:	4603      	mov	r3, r0
 8004292:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* SAI2 clock source configuration done later after clock selection check */
        break;
 8004296:	e013      	b.n	80042c0 <HAL_RCCEx_PeriphCLKConfig+0x2e4>

      case RCC_SAI4BCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8004298:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800429c:	3328      	adds	r3, #40	; 0x28
 800429e:	2100      	movs	r1, #0
 80042a0:	4618      	mov	r0, r3
 80042a2:	f001 fc01 	bl	8005aa8 <RCCEx_PLL3_Config>
 80042a6:	4603      	mov	r3, r0
 80042a8:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 80042ac:	e008      	b.n	80042c0 <HAL_RCCEx_PeriphCLKConfig+0x2e4>
        /* SAI4B clock source configuration done later after clock selection check */
        break;
#endif /* RCC_VER_3_0 */

      default:
        ret = HAL_ERROR;
 80042ae:	2301      	movs	r3, #1
 80042b0:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        break;
 80042b4:	e004      	b.n	80042c0 <HAL_RCCEx_PeriphCLKConfig+0x2e4>
        break;
 80042b6:	bf00      	nop
 80042b8:	e002      	b.n	80042c0 <HAL_RCCEx_PeriphCLKConfig+0x2e4>
        break;
 80042ba:	bf00      	nop
 80042bc:	e000      	b.n	80042c0 <HAL_RCCEx_PeriphCLKConfig+0x2e4>
        break;
 80042be:	bf00      	nop
    }

    if (ret == HAL_OK)
 80042c0:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 80042c4:	2b00      	cmp	r3, #0
 80042c6:	d10d      	bne.n	80042e4 <HAL_RCCEx_PeriphCLKConfig+0x308>
    {
      /* Set the source of SAI4B clock*/
      __HAL_RCC_SAI4B_CONFIG(PeriphClkInit->Sai4BClockSelection);
 80042c8:	4b05      	ldr	r3, [pc, #20]	; (80042e0 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 80042ca:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80042cc:	f023 61e0 	bic.w	r1, r3, #117440512	; 0x7000000
 80042d0:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80042d4:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 80042d8:	4a01      	ldr	r2, [pc, #4]	; (80042e0 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 80042da:	430b      	orrs	r3, r1
 80042dc:	6593      	str	r3, [r2, #88]	; 0x58
 80042de:	e005      	b.n	80042ec <HAL_RCCEx_PeriphCLKConfig+0x310>
 80042e0:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 80042e4:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 80042e8:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
  }
#endif  /*QUADSPI*/

#if defined(OCTOSPI1) || defined(OCTOSPI2)
  /*---------------------------- OCTOSPI configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_OSPI) == RCC_PERIPHCLK_OSPI)
 80042ec:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80042f0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80042f4:	f002 7300 	and.w	r3, r2, #33554432	; 0x2000000
 80042f8:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 80042fc:	2300      	movs	r3, #0
 80042fe:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 8004302:	e9d7 123c 	ldrd	r1, r2, [r7, #240]	; 0xf0
 8004306:	460b      	mov	r3, r1
 8004308:	4313      	orrs	r3, r2
 800430a:	d03a      	beq.n	8004382 <HAL_RCCEx_PeriphCLKConfig+0x3a6>
  {
    switch (PeriphClkInit->OspiClockSelection)
 800430c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8004310:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004312:	2b30      	cmp	r3, #48	; 0x30
 8004314:	d01f      	beq.n	8004356 <HAL_RCCEx_PeriphCLKConfig+0x37a>
 8004316:	2b30      	cmp	r3, #48	; 0x30
 8004318:	d819      	bhi.n	800434e <HAL_RCCEx_PeriphCLKConfig+0x372>
 800431a:	2b20      	cmp	r3, #32
 800431c:	d00c      	beq.n	8004338 <HAL_RCCEx_PeriphCLKConfig+0x35c>
 800431e:	2b20      	cmp	r3, #32
 8004320:	d815      	bhi.n	800434e <HAL_RCCEx_PeriphCLKConfig+0x372>
 8004322:	2b00      	cmp	r3, #0
 8004324:	d019      	beq.n	800435a <HAL_RCCEx_PeriphCLKConfig+0x37e>
 8004326:	2b10      	cmp	r3, #16
 8004328:	d111      	bne.n	800434e <HAL_RCCEx_PeriphCLKConfig+0x372>
    {
      case RCC_OSPICLKSOURCE_PLL:      /* PLL is used as clock source for OSPI*/
        /* Enable OSPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800432a:	4baa      	ldr	r3, [pc, #680]	; (80045d4 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 800432c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800432e:	4aa9      	ldr	r2, [pc, #676]	; (80045d4 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8004330:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004334:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* OSPI clock source configuration done later after clock selection check */
        break;
 8004336:	e011      	b.n	800435c <HAL_RCCEx_PeriphCLKConfig+0x380>

      case RCC_OSPICLKSOURCE_PLL2: /* PLL2 is used as clock source for OSPI*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8004338:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800433c:	3308      	adds	r3, #8
 800433e:	2102      	movs	r1, #2
 8004340:	4618      	mov	r0, r3
 8004342:	f001 faff 	bl	8005944 <RCCEx_PLL2_Config>
 8004346:	4603      	mov	r3, r0
 8004348:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* OSPI clock source configuration done later after clock selection check */
        break;
 800434c:	e006      	b.n	800435c <HAL_RCCEx_PeriphCLKConfig+0x380>
      case RCC_OSPICLKSOURCE_HCLK:
        /* HCLK clock selected as OSPI kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 800434e:	2301      	movs	r3, #1
 8004350:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        break;
 8004354:	e002      	b.n	800435c <HAL_RCCEx_PeriphCLKConfig+0x380>
        break;
 8004356:	bf00      	nop
 8004358:	e000      	b.n	800435c <HAL_RCCEx_PeriphCLKConfig+0x380>
        break;
 800435a:	bf00      	nop
    }

    if (ret == HAL_OK)
 800435c:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 8004360:	2b00      	cmp	r3, #0
 8004362:	d10a      	bne.n	800437a <HAL_RCCEx_PeriphCLKConfig+0x39e>
    {
      /* Set the source of OSPI clock*/
      __HAL_RCC_OSPI_CONFIG(PeriphClkInit->OspiClockSelection);
 8004364:	4b9b      	ldr	r3, [pc, #620]	; (80045d4 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8004366:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004368:	f023 0130 	bic.w	r1, r3, #48	; 0x30
 800436c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8004370:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004372:	4a98      	ldr	r2, [pc, #608]	; (80045d4 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8004374:	430b      	orrs	r3, r1
 8004376:	64d3      	str	r3, [r2, #76]	; 0x4c
 8004378:	e003      	b.n	8004382 <HAL_RCCEx_PeriphCLKConfig+0x3a6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800437a:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800437e:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    }
  }
#endif  /*OCTOSPI*/

  /*---------------------------- SPI1/2/3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI123) == RCC_PERIPHCLK_SPI123)
 8004382:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8004386:	e9d3 2300 	ldrd	r2, r3, [r3]
 800438a:	f402 5380 	and.w	r3, r2, #4096	; 0x1000
 800438e:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8004392:	2300      	movs	r3, #0
 8004394:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 8004398:	e9d7 123a 	ldrd	r1, r2, [r7, #232]	; 0xe8
 800439c:	460b      	mov	r3, r1
 800439e:	4313      	orrs	r3, r2
 80043a0:	d051      	beq.n	8004446 <HAL_RCCEx_PeriphCLKConfig+0x46a>
  {
    switch (PeriphClkInit->Spi123ClockSelection)
 80043a2:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80043a6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80043a8:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80043ac:	d035      	beq.n	800441a <HAL_RCCEx_PeriphCLKConfig+0x43e>
 80043ae:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80043b2:	d82e      	bhi.n	8004412 <HAL_RCCEx_PeriphCLKConfig+0x436>
 80043b4:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 80043b8:	d031      	beq.n	800441e <HAL_RCCEx_PeriphCLKConfig+0x442>
 80043ba:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 80043be:	d828      	bhi.n	8004412 <HAL_RCCEx_PeriphCLKConfig+0x436>
 80043c0:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80043c4:	d01a      	beq.n	80043fc <HAL_RCCEx_PeriphCLKConfig+0x420>
 80043c6:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80043ca:	d822      	bhi.n	8004412 <HAL_RCCEx_PeriphCLKConfig+0x436>
 80043cc:	2b00      	cmp	r3, #0
 80043ce:	d003      	beq.n	80043d8 <HAL_RCCEx_PeriphCLKConfig+0x3fc>
 80043d0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80043d4:	d007      	beq.n	80043e6 <HAL_RCCEx_PeriphCLKConfig+0x40a>
 80043d6:	e01c      	b.n	8004412 <HAL_RCCEx_PeriphCLKConfig+0x436>
    {
      case RCC_SPI123CLKSOURCE_PLL:      /* PLL is used as clock source for SPI1/2/3 */
        /* Enable SPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80043d8:	4b7e      	ldr	r3, [pc, #504]	; (80045d4 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 80043da:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80043dc:	4a7d      	ldr	r2, [pc, #500]	; (80045d4 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 80043de:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80043e2:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 80043e4:	e01c      	b.n	8004420 <HAL_RCCEx_PeriphCLKConfig+0x444>

      case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 80043e6:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80043ea:	3308      	adds	r3, #8
 80043ec:	2100      	movs	r1, #0
 80043ee:	4618      	mov	r0, r3
 80043f0:	f001 faa8 	bl	8005944 <RCCEx_PLL2_Config>
 80043f4:	4603      	mov	r3, r0
 80043f6:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 80043fa:	e011      	b.n	8004420 <HAL_RCCEx_PeriphCLKConfig+0x444>

      case RCC_SPI123CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 80043fc:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8004400:	3328      	adds	r3, #40	; 0x28
 8004402:	2100      	movs	r1, #0
 8004404:	4618      	mov	r0, r3
 8004406:	f001 fb4f 	bl	8005aa8 <RCCEx_PLL3_Config>
 800440a:	4603      	mov	r3, r0
 800440c:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 8004410:	e006      	b.n	8004420 <HAL_RCCEx_PeriphCLKConfig+0x444>
        /* HSI, HSE, or CSI oscillator is used as source of SPI1/2/3 clock */
        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8004412:	2301      	movs	r3, #1
 8004414:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        break;
 8004418:	e002      	b.n	8004420 <HAL_RCCEx_PeriphCLKConfig+0x444>
        break;
 800441a:	bf00      	nop
 800441c:	e000      	b.n	8004420 <HAL_RCCEx_PeriphCLKConfig+0x444>
        break;
 800441e:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004420:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 8004424:	2b00      	cmp	r3, #0
 8004426:	d10a      	bne.n	800443e <HAL_RCCEx_PeriphCLKConfig+0x462>
    {
      /* Set the source of SPI1/2/3 clock*/
      __HAL_RCC_SPI123_CONFIG(PeriphClkInit->Spi123ClockSelection);
 8004428:	4b6a      	ldr	r3, [pc, #424]	; (80045d4 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 800442a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800442c:	f423 41e0 	bic.w	r1, r3, #28672	; 0x7000
 8004430:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8004434:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004436:	4a67      	ldr	r2, [pc, #412]	; (80045d4 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8004438:	430b      	orrs	r3, r1
 800443a:	6513      	str	r3, [r2, #80]	; 0x50
 800443c:	e003      	b.n	8004446 <HAL_RCCEx_PeriphCLKConfig+0x46a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800443e:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 8004442:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    }
  }

  /*---------------------------- SPI4/5 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) == RCC_PERIPHCLK_SPI45)
 8004446:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800444a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800444e:	f402 5300 	and.w	r3, r2, #8192	; 0x2000
 8004452:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8004456:	2300      	movs	r3, #0
 8004458:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 800445c:	e9d7 1238 	ldrd	r1, r2, [r7, #224]	; 0xe0
 8004460:	460b      	mov	r3, r1
 8004462:	4313      	orrs	r3, r2
 8004464:	d053      	beq.n	800450e <HAL_RCCEx_PeriphCLKConfig+0x532>
  {
    switch (PeriphClkInit->Spi45ClockSelection)
 8004466:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800446a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800446c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8004470:	d033      	beq.n	80044da <HAL_RCCEx_PeriphCLKConfig+0x4fe>
 8004472:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8004476:	d82c      	bhi.n	80044d2 <HAL_RCCEx_PeriphCLKConfig+0x4f6>
 8004478:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 800447c:	d02f      	beq.n	80044de <HAL_RCCEx_PeriphCLKConfig+0x502>
 800447e:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8004482:	d826      	bhi.n	80044d2 <HAL_RCCEx_PeriphCLKConfig+0x4f6>
 8004484:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8004488:	d02b      	beq.n	80044e2 <HAL_RCCEx_PeriphCLKConfig+0x506>
 800448a:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 800448e:	d820      	bhi.n	80044d2 <HAL_RCCEx_PeriphCLKConfig+0x4f6>
 8004490:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8004494:	d012      	beq.n	80044bc <HAL_RCCEx_PeriphCLKConfig+0x4e0>
 8004496:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800449a:	d81a      	bhi.n	80044d2 <HAL_RCCEx_PeriphCLKConfig+0x4f6>
 800449c:	2b00      	cmp	r3, #0
 800449e:	d022      	beq.n	80044e6 <HAL_RCCEx_PeriphCLKConfig+0x50a>
 80044a0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80044a4:	d115      	bne.n	80044d2 <HAL_RCCEx_PeriphCLKConfig+0x4f6>
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI4/5 */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 80044a6:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80044aa:	3308      	adds	r3, #8
 80044ac:	2101      	movs	r1, #1
 80044ae:	4618      	mov	r0, r3
 80044b0:	f001 fa48 	bl	8005944 <RCCEx_PLL2_Config>
 80044b4:	4603      	mov	r3, r0
 80044b6:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 80044ba:	e015      	b.n	80044e8 <HAL_RCCEx_PeriphCLKConfig+0x50c>
      case RCC_SPI45CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 80044bc:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80044c0:	3328      	adds	r3, #40	; 0x28
 80044c2:	2101      	movs	r1, #1
 80044c4:	4618      	mov	r0, r3
 80044c6:	f001 faef 	bl	8005aa8 <RCCEx_PLL3_Config>
 80044ca:	4603      	mov	r3, r0
 80044cc:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 80044d0:	e00a      	b.n	80044e8 <HAL_RCCEx_PeriphCLKConfig+0x50c>
        /* HSE,  oscillator is used as source of SPI4/5 clock */
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80044d2:	2301      	movs	r3, #1
 80044d4:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        break;
 80044d8:	e006      	b.n	80044e8 <HAL_RCCEx_PeriphCLKConfig+0x50c>
        break;
 80044da:	bf00      	nop
 80044dc:	e004      	b.n	80044e8 <HAL_RCCEx_PeriphCLKConfig+0x50c>
        break;
 80044de:	bf00      	nop
 80044e0:	e002      	b.n	80044e8 <HAL_RCCEx_PeriphCLKConfig+0x50c>
        break;
 80044e2:	bf00      	nop
 80044e4:	e000      	b.n	80044e8 <HAL_RCCEx_PeriphCLKConfig+0x50c>
        break;
 80044e6:	bf00      	nop
    }

    if (ret == HAL_OK)
 80044e8:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 80044ec:	2b00      	cmp	r3, #0
 80044ee:	d10a      	bne.n	8004506 <HAL_RCCEx_PeriphCLKConfig+0x52a>
    {
      /* Set the source of SPI4/5 clock*/
      __HAL_RCC_SPI45_CONFIG(PeriphClkInit->Spi45ClockSelection);
 80044f0:	4b38      	ldr	r3, [pc, #224]	; (80045d4 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 80044f2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80044f4:	f423 21e0 	bic.w	r1, r3, #458752	; 0x70000
 80044f8:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80044fc:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80044fe:	4a35      	ldr	r2, [pc, #212]	; (80045d4 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8004500:	430b      	orrs	r3, r1
 8004502:	6513      	str	r3, [r2, #80]	; 0x50
 8004504:	e003      	b.n	800450e <HAL_RCCEx_PeriphCLKConfig+0x532>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004506:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800450a:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    }
  }

  /*---------------------------- SPI6 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 800450e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8004512:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004516:	f402 4380 	and.w	r3, r2, #16384	; 0x4000
 800451a:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 800451e:	2300      	movs	r3, #0
 8004520:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 8004524:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 8004528:	460b      	mov	r3, r1
 800452a:	4313      	orrs	r3, r2
 800452c:	d058      	beq.n	80045e0 <HAL_RCCEx_PeriphCLKConfig+0x604>
  {
    switch (PeriphClkInit->Spi6ClockSelection)
 800452e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8004532:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 8004536:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800453a:	d033      	beq.n	80045a4 <HAL_RCCEx_PeriphCLKConfig+0x5c8>
 800453c:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8004540:	d82c      	bhi.n	800459c <HAL_RCCEx_PeriphCLKConfig+0x5c0>
 8004542:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004546:	d02f      	beq.n	80045a8 <HAL_RCCEx_PeriphCLKConfig+0x5cc>
 8004548:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800454c:	d826      	bhi.n	800459c <HAL_RCCEx_PeriphCLKConfig+0x5c0>
 800454e:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8004552:	d02b      	beq.n	80045ac <HAL_RCCEx_PeriphCLKConfig+0x5d0>
 8004554:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8004558:	d820      	bhi.n	800459c <HAL_RCCEx_PeriphCLKConfig+0x5c0>
 800455a:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800455e:	d012      	beq.n	8004586 <HAL_RCCEx_PeriphCLKConfig+0x5aa>
 8004560:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8004564:	d81a      	bhi.n	800459c <HAL_RCCEx_PeriphCLKConfig+0x5c0>
 8004566:	2b00      	cmp	r3, #0
 8004568:	d022      	beq.n	80045b0 <HAL_RCCEx_PeriphCLKConfig+0x5d4>
 800456a:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800456e:	d115      	bne.n	800459c <HAL_RCCEx_PeriphCLKConfig+0x5c0>
        /* SPI6 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI6*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8004570:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8004574:	3308      	adds	r3, #8
 8004576:	2101      	movs	r1, #1
 8004578:	4618      	mov	r0, r3
 800457a:	f001 f9e3 	bl	8005944 <RCCEx_PLL2_Config>
 800457e:	4603      	mov	r3, r0
 8004580:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* SPI6 clock source configuration done later after clock selection check */
        break;
 8004584:	e015      	b.n	80045b2 <HAL_RCCEx_PeriphCLKConfig+0x5d6>
      case RCC_SPI6CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI6*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8004586:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800458a:	3328      	adds	r3, #40	; 0x28
 800458c:	2101      	movs	r1, #1
 800458e:	4618      	mov	r0, r3
 8004590:	f001 fa8a 	bl	8005aa8 <RCCEx_PLL3_Config>
 8004594:	4603      	mov	r3, r0
 8004596:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        /* SPI6 clock source configuration done later after clock selection check */
        break;
 800459a:	e00a      	b.n	80045b2 <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        /* SPI6 clock source configuration done later after clock selection check */
        break;
#endif

      default:
        ret = HAL_ERROR;
 800459c:	2301      	movs	r3, #1
 800459e:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        break;
 80045a2:	e006      	b.n	80045b2 <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        break;
 80045a4:	bf00      	nop
 80045a6:	e004      	b.n	80045b2 <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        break;
 80045a8:	bf00      	nop
 80045aa:	e002      	b.n	80045b2 <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        break;
 80045ac:	bf00      	nop
 80045ae:	e000      	b.n	80045b2 <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        break;
 80045b0:	bf00      	nop
    }

    if (ret == HAL_OK)
 80045b2:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 80045b6:	2b00      	cmp	r3, #0
 80045b8:	d10e      	bne.n	80045d8 <HAL_RCCEx_PeriphCLKConfig+0x5fc>
    {
      /* Set the source of SPI6 clock*/
      __HAL_RCC_SPI6_CONFIG(PeriphClkInit->Spi6ClockSelection);
 80045ba:	4b06      	ldr	r3, [pc, #24]	; (80045d4 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 80045bc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80045be:	f023 41e0 	bic.w	r1, r3, #1879048192	; 0x70000000
 80045c2:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80045c6:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 80045ca:	4a02      	ldr	r2, [pc, #8]	; (80045d4 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 80045cc:	430b      	orrs	r3, r1
 80045ce:	6593      	str	r3, [r2, #88]	; 0x58
 80045d0:	e006      	b.n	80045e0 <HAL_RCCEx_PeriphCLKConfig+0x604>
 80045d2:	bf00      	nop
 80045d4:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 80045d8:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 80045dc:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
  }
#endif /*DSI*/

#if defined(FDCAN1) || defined(FDCAN2)
  /*---------------------------- FDCAN configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 80045e0:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80045e4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80045e8:	f402 4300 	and.w	r3, r2, #32768	; 0x8000
 80045ec:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 80045f0:	2300      	movs	r3, #0
 80045f2:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
 80045f6:	e9d7 1234 	ldrd	r1, r2, [r7, #208]	; 0xd0
 80045fa:	460b      	mov	r3, r1
 80045fc:	4313      	orrs	r3, r2
 80045fe:	d037      	beq.n	8004670 <HAL_RCCEx_PeriphCLKConfig+0x694>
  {
    switch (PeriphClkInit->FdcanClockSelection)
 8004600:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8004604:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8004606:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800460a:	d00e      	beq.n	800462a <HAL_RCCEx_PeriphCLKConfig+0x64e>
 800460c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8004610:	d816      	bhi.n	8004640 <HAL_RCCEx_PeriphCLKConfig+0x664>
 8004612:	2b00      	cmp	r3, #0
 8004614:	d018      	beq.n	8004648 <HAL_RCCEx_PeriphCLKConfig+0x66c>
 8004616:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800461a:	d111      	bne.n	8004640 <HAL_RCCEx_PeriphCLKConfig+0x664>
    {
      case RCC_FDCANCLKSOURCE_PLL:      /* PLL is used as clock source for FDCAN*/
        /* Enable FDCAN Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800461c:	4bc4      	ldr	r3, [pc, #784]	; (8004930 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800461e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004620:	4ac3      	ldr	r2, [pc, #780]	; (8004930 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8004622:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004626:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 8004628:	e00f      	b.n	800464a <HAL_RCCEx_PeriphCLKConfig+0x66e>

      case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is used as clock source for FDCAN*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800462a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800462e:	3308      	adds	r3, #8
 8004630:	2101      	movs	r1, #1
 8004632:	4618      	mov	r0, r3
 8004634:	f001 f986 	bl	8005944 <RCCEx_PLL2_Config>
 8004638:	4603      	mov	r3, r0
 800463a:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 800463e:	e004      	b.n	800464a <HAL_RCCEx_PeriphCLKConfig+0x66e>
        /* HSE is used as clock source for FDCAN*/
        /* FDCAN clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8004640:	2301      	movs	r3, #1
 8004642:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        break;
 8004646:	e000      	b.n	800464a <HAL_RCCEx_PeriphCLKConfig+0x66e>
        break;
 8004648:	bf00      	nop
    }

    if (ret == HAL_OK)
 800464a:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800464e:	2b00      	cmp	r3, #0
 8004650:	d10a      	bne.n	8004668 <HAL_RCCEx_PeriphCLKConfig+0x68c>
    {
      /* Set the source of FDCAN clock*/
      __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 8004652:	4bb7      	ldr	r3, [pc, #732]	; (8004930 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8004654:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004656:	f023 5140 	bic.w	r1, r3, #805306368	; 0x30000000
 800465a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800465e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8004660:	4ab3      	ldr	r2, [pc, #716]	; (8004930 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8004662:	430b      	orrs	r3, r1
 8004664:	6513      	str	r3, [r2, #80]	; 0x50
 8004666:	e003      	b.n	8004670 <HAL_RCCEx_PeriphCLKConfig+0x694>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004668:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800466c:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    }
  }
#endif /*FDCAN1 || FDCAN2*/

  /*---------------------------- FMC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
 8004670:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8004674:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004678:	f002 7380 	and.w	r3, r2, #16777216	; 0x1000000
 800467c:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8004680:	2300      	movs	r3, #0
 8004682:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8004686:	e9d7 1232 	ldrd	r1, r2, [r7, #200]	; 0xc8
 800468a:	460b      	mov	r3, r1
 800468c:	4313      	orrs	r3, r2
 800468e:	d039      	beq.n	8004704 <HAL_RCCEx_PeriphCLKConfig+0x728>
  {
    switch (PeriphClkInit->FmcClockSelection)
 8004690:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8004694:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004696:	2b03      	cmp	r3, #3
 8004698:	d81c      	bhi.n	80046d4 <HAL_RCCEx_PeriphCLKConfig+0x6f8>
 800469a:	a201      	add	r2, pc, #4	; (adr r2, 80046a0 <HAL_RCCEx_PeriphCLKConfig+0x6c4>)
 800469c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80046a0:	080046dd 	.word	0x080046dd
 80046a4:	080046b1 	.word	0x080046b1
 80046a8:	080046bf 	.word	0x080046bf
 80046ac:	080046dd 	.word	0x080046dd
    {
      case RCC_FMCCLKSOURCE_PLL:      /* PLL is used as clock source for FMC*/
        /* Enable FMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80046b0:	4b9f      	ldr	r3, [pc, #636]	; (8004930 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 80046b2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80046b4:	4a9e      	ldr	r2, [pc, #632]	; (8004930 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 80046b6:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80046ba:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* FMC clock source configuration done later after clock selection check */
        break;
 80046bc:	e00f      	b.n	80046de <HAL_RCCEx_PeriphCLKConfig+0x702>

      case RCC_FMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for FMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 80046be:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80046c2:	3308      	adds	r3, #8
 80046c4:	2102      	movs	r1, #2
 80046c6:	4618      	mov	r0, r3
 80046c8:	f001 f93c 	bl	8005944 <RCCEx_PLL2_Config>
 80046cc:	4603      	mov	r3, r0
 80046ce:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* FMC clock source configuration done later after clock selection check */
        break;
 80046d2:	e004      	b.n	80046de <HAL_RCCEx_PeriphCLKConfig+0x702>
      case RCC_FMCCLKSOURCE_HCLK:
        /* D1/CD HCLK  clock selected as FMC kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 80046d4:	2301      	movs	r3, #1
 80046d6:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        break;
 80046da:	e000      	b.n	80046de <HAL_RCCEx_PeriphCLKConfig+0x702>
        break;
 80046dc:	bf00      	nop
    }

    if (ret == HAL_OK)
 80046de:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 80046e2:	2b00      	cmp	r3, #0
 80046e4:	d10a      	bne.n	80046fc <HAL_RCCEx_PeriphCLKConfig+0x720>
    {
      /* Set the source of FMC clock*/
      __HAL_RCC_FMC_CONFIG(PeriphClkInit->FmcClockSelection);
 80046e6:	4b92      	ldr	r3, [pc, #584]	; (8004930 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 80046e8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80046ea:	f023 0103 	bic.w	r1, r3, #3
 80046ee:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80046f2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80046f4:	4a8e      	ldr	r2, [pc, #568]	; (8004930 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 80046f6:	430b      	orrs	r3, r1
 80046f8:	64d3      	str	r3, [r2, #76]	; 0x4c
 80046fa:	e003      	b.n	8004704 <HAL_RCCEx_PeriphCLKConfig+0x728>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80046fc:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 8004700:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    }
  }

  /*---------------------------- RTC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8004704:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8004708:	e9d3 2300 	ldrd	r2, r3, [r3]
 800470c:	f402 0380 	and.w	r3, r2, #4194304	; 0x400000
 8004710:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8004714:	2300      	movs	r3, #0
 8004716:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 800471a:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 800471e:	460b      	mov	r3, r1
 8004720:	4313      	orrs	r3, r2
 8004722:	f000 8099 	beq.w	8004858 <HAL_RCCEx_PeriphCLKConfig+0x87c>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8004726:	4b83      	ldr	r3, [pc, #524]	; (8004934 <HAL_RCCEx_PeriphCLKConfig+0x958>)
 8004728:	681b      	ldr	r3, [r3, #0]
 800472a:	4a82      	ldr	r2, [pc, #520]	; (8004934 <HAL_RCCEx_PeriphCLKConfig+0x958>)
 800472c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004730:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8004732:	f7fd f9bb 	bl	8001aac <HAL_GetTick>
 8004736:	f8c7 0110 	str.w	r0, [r7, #272]	; 0x110

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800473a:	e00b      	b.n	8004754 <HAL_RCCEx_PeriphCLKConfig+0x778>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800473c:	f7fd f9b6 	bl	8001aac <HAL_GetTick>
 8004740:	4602      	mov	r2, r0
 8004742:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 8004746:	1ad3      	subs	r3, r2, r3
 8004748:	2b64      	cmp	r3, #100	; 0x64
 800474a:	d903      	bls.n	8004754 <HAL_RCCEx_PeriphCLKConfig+0x778>
      {
        ret = HAL_TIMEOUT;
 800474c:	2303      	movs	r3, #3
 800474e:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        break;
 8004752:	e005      	b.n	8004760 <HAL_RCCEx_PeriphCLKConfig+0x784>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8004754:	4b77      	ldr	r3, [pc, #476]	; (8004934 <HAL_RCCEx_PeriphCLKConfig+0x958>)
 8004756:	681b      	ldr	r3, [r3, #0]
 8004758:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800475c:	2b00      	cmp	r3, #0
 800475e:	d0ed      	beq.n	800473c <HAL_RCCEx_PeriphCLKConfig+0x760>
      }
    }

    if (ret == HAL_OK)
 8004760:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 8004764:	2b00      	cmp	r3, #0
 8004766:	d173      	bne.n	8004850 <HAL_RCCEx_PeriphCLKConfig+0x874>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if ((RCC->BDCR & RCC_BDCR_RTCSEL) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL))
 8004768:	4b71      	ldr	r3, [pc, #452]	; (8004930 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800476a:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 800476c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8004770:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8004774:	4053      	eors	r3, r2
 8004776:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800477a:	2b00      	cmp	r3, #0
 800477c:	d015      	beq.n	80047aa <HAL_RCCEx_PeriphCLKConfig+0x7ce>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 800477e:	4b6c      	ldr	r3, [pc, #432]	; (8004930 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8004780:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004782:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004786:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 800478a:	4b69      	ldr	r3, [pc, #420]	; (8004930 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800478c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800478e:	4a68      	ldr	r2, [pc, #416]	; (8004930 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8004790:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004794:	6713      	str	r3, [r2, #112]	; 0x70
        __HAL_RCC_BACKUPRESET_RELEASE();
 8004796:	4b66      	ldr	r3, [pc, #408]	; (8004930 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8004798:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800479a:	4a65      	ldr	r2, [pc, #404]	; (8004930 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800479c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80047a0:	6713      	str	r3, [r2, #112]	; 0x70
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpreg;
 80047a2:	4a63      	ldr	r2, [pc, #396]	; (8004930 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 80047a4:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80047a8:	6713      	str	r3, [r2, #112]	; 0x70
      }

      /* If LSE is selected as RTC clock source (and enabled prior to Backup Domain reset), wait for LSE reactivation */
      if (PeriphClkInit->RTCClockSelection == RCC_RTCCLKSOURCE_LSE)
 80047aa:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80047ae:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 80047b2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80047b6:	d118      	bne.n	80047ea <HAL_RCCEx_PeriphCLKConfig+0x80e>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80047b8:	f7fd f978 	bl	8001aac <HAL_GetTick>
 80047bc:	f8c7 0110 	str.w	r0, [r7, #272]	; 0x110

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80047c0:	e00d      	b.n	80047de <HAL_RCCEx_PeriphCLKConfig+0x802>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80047c2:	f7fd f973 	bl	8001aac <HAL_GetTick>
 80047c6:	4602      	mov	r2, r0
 80047c8:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 80047cc:	1ad2      	subs	r2, r2, r3
 80047ce:	f241 3388 	movw	r3, #5000	; 0x1388
 80047d2:	429a      	cmp	r2, r3
 80047d4:	d903      	bls.n	80047de <HAL_RCCEx_PeriphCLKConfig+0x802>
          {
            ret = HAL_TIMEOUT;
 80047d6:	2303      	movs	r3, #3
 80047d8:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
            break;
 80047dc:	e005      	b.n	80047ea <HAL_RCCEx_PeriphCLKConfig+0x80e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80047de:	4b54      	ldr	r3, [pc, #336]	; (8004930 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 80047e0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80047e2:	f003 0302 	and.w	r3, r3, #2
 80047e6:	2b00      	cmp	r3, #0
 80047e8:	d0eb      	beq.n	80047c2 <HAL_RCCEx_PeriphCLKConfig+0x7e6>
          }
        }
      }

      if (ret == HAL_OK)
 80047ea:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 80047ee:	2b00      	cmp	r3, #0
 80047f0:	d129      	bne.n	8004846 <HAL_RCCEx_PeriphCLKConfig+0x86a>
      {
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80047f2:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80047f6:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 80047fa:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80047fe:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8004802:	d10e      	bne.n	8004822 <HAL_RCCEx_PeriphCLKConfig+0x846>
 8004804:	4b4a      	ldr	r3, [pc, #296]	; (8004930 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8004806:	691b      	ldr	r3, [r3, #16]
 8004808:	f423 517c 	bic.w	r1, r3, #16128	; 0x3f00
 800480c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8004810:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8004814:	091a      	lsrs	r2, r3, #4
 8004816:	4b48      	ldr	r3, [pc, #288]	; (8004938 <HAL_RCCEx_PeriphCLKConfig+0x95c>)
 8004818:	4013      	ands	r3, r2
 800481a:	4a45      	ldr	r2, [pc, #276]	; (8004930 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800481c:	430b      	orrs	r3, r1
 800481e:	6113      	str	r3, [r2, #16]
 8004820:	e005      	b.n	800482e <HAL_RCCEx_PeriphCLKConfig+0x852>
 8004822:	4b43      	ldr	r3, [pc, #268]	; (8004930 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8004824:	691b      	ldr	r3, [r3, #16]
 8004826:	4a42      	ldr	r2, [pc, #264]	; (8004930 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8004828:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 800482c:	6113      	str	r3, [r2, #16]
 800482e:	4b40      	ldr	r3, [pc, #256]	; (8004930 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8004830:	6f19      	ldr	r1, [r3, #112]	; 0x70
 8004832:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8004836:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 800483a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800483e:	4a3c      	ldr	r2, [pc, #240]	; (8004930 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8004840:	430b      	orrs	r3, r1
 8004842:	6713      	str	r3, [r2, #112]	; 0x70
 8004844:	e008      	b.n	8004858 <HAL_RCCEx_PeriphCLKConfig+0x87c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8004846:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800484a:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
 800484e:	e003      	b.n	8004858 <HAL_RCCEx_PeriphCLKConfig+0x87c>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004850:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 8004854:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    }
  }


  /*-------------------------- USART1/6 configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
 8004858:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800485c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004860:	f002 0301 	and.w	r3, r2, #1
 8004864:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8004868:	2300      	movs	r3, #0
 800486a:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
 800486e:	e9d7 122e 	ldrd	r1, r2, [r7, #184]	; 0xb8
 8004872:	460b      	mov	r3, r1
 8004874:	4313      	orrs	r3, r2
 8004876:	f000 808f 	beq.w	8004998 <HAL_RCCEx_PeriphCLKConfig+0x9bc>
  {
    switch (PeriphClkInit->Usart16ClockSelection)
 800487a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800487e:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8004880:	2b28      	cmp	r3, #40	; 0x28
 8004882:	d871      	bhi.n	8004968 <HAL_RCCEx_PeriphCLKConfig+0x98c>
 8004884:	a201      	add	r2, pc, #4	; (adr r2, 800488c <HAL_RCCEx_PeriphCLKConfig+0x8b0>)
 8004886:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800488a:	bf00      	nop
 800488c:	08004971 	.word	0x08004971
 8004890:	08004969 	.word	0x08004969
 8004894:	08004969 	.word	0x08004969
 8004898:	08004969 	.word	0x08004969
 800489c:	08004969 	.word	0x08004969
 80048a0:	08004969 	.word	0x08004969
 80048a4:	08004969 	.word	0x08004969
 80048a8:	08004969 	.word	0x08004969
 80048ac:	0800493d 	.word	0x0800493d
 80048b0:	08004969 	.word	0x08004969
 80048b4:	08004969 	.word	0x08004969
 80048b8:	08004969 	.word	0x08004969
 80048bc:	08004969 	.word	0x08004969
 80048c0:	08004969 	.word	0x08004969
 80048c4:	08004969 	.word	0x08004969
 80048c8:	08004969 	.word	0x08004969
 80048cc:	08004953 	.word	0x08004953
 80048d0:	08004969 	.word	0x08004969
 80048d4:	08004969 	.word	0x08004969
 80048d8:	08004969 	.word	0x08004969
 80048dc:	08004969 	.word	0x08004969
 80048e0:	08004969 	.word	0x08004969
 80048e4:	08004969 	.word	0x08004969
 80048e8:	08004969 	.word	0x08004969
 80048ec:	08004971 	.word	0x08004971
 80048f0:	08004969 	.word	0x08004969
 80048f4:	08004969 	.word	0x08004969
 80048f8:	08004969 	.word	0x08004969
 80048fc:	08004969 	.word	0x08004969
 8004900:	08004969 	.word	0x08004969
 8004904:	08004969 	.word	0x08004969
 8004908:	08004969 	.word	0x08004969
 800490c:	08004971 	.word	0x08004971
 8004910:	08004969 	.word	0x08004969
 8004914:	08004969 	.word	0x08004969
 8004918:	08004969 	.word	0x08004969
 800491c:	08004969 	.word	0x08004969
 8004920:	08004969 	.word	0x08004969
 8004924:	08004969 	.word	0x08004969
 8004928:	08004969 	.word	0x08004969
 800492c:	08004971 	.word	0x08004971
 8004930:	58024400 	.word	0x58024400
 8004934:	58024800 	.word	0x58024800
 8004938:	00ffffcf 	.word	0x00ffffcf
      case RCC_USART16CLKSOURCE_PCLK2: /* CD/D2 PCLK2 as clock source for USART1/6 */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      case RCC_USART16CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART1/6 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800493c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8004940:	3308      	adds	r3, #8
 8004942:	2101      	movs	r1, #1
 8004944:	4618      	mov	r0, r3
 8004946:	f000 fffd 	bl	8005944 <RCCEx_PLL2_Config>
 800494a:	4603      	mov	r3, r0
 800494c:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 8004950:	e00f      	b.n	8004972 <HAL_RCCEx_PeriphCLKConfig+0x996>

      case RCC_USART16CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART1/6 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8004952:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8004956:	3328      	adds	r3, #40	; 0x28
 8004958:	2101      	movs	r1, #1
 800495a:	4618      	mov	r0, r3
 800495c:	f001 f8a4 	bl	8005aa8 <RCCEx_PLL3_Config>
 8004960:	4603      	mov	r3, r0
 8004962:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 8004966:	e004      	b.n	8004972 <HAL_RCCEx_PeriphCLKConfig+0x996>
        /* LSE,  oscillator is used as source of USART1/6 clock */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8004968:	2301      	movs	r3, #1
 800496a:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        break;
 800496e:	e000      	b.n	8004972 <HAL_RCCEx_PeriphCLKConfig+0x996>
        break;
 8004970:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004972:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 8004976:	2b00      	cmp	r3, #0
 8004978:	d10a      	bne.n	8004990 <HAL_RCCEx_PeriphCLKConfig+0x9b4>
    {
      /* Set the source of USART1/6 clock */
      __HAL_RCC_USART16_CONFIG(PeriphClkInit->Usart16ClockSelection);
 800497a:	4bbf      	ldr	r3, [pc, #764]	; (8004c78 <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 800497c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800497e:	f023 0138 	bic.w	r1, r3, #56	; 0x38
 8004982:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8004986:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8004988:	4abb      	ldr	r2, [pc, #748]	; (8004c78 <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 800498a:	430b      	orrs	r3, r1
 800498c:	6553      	str	r3, [r2, #84]	; 0x54
 800498e:	e003      	b.n	8004998 <HAL_RCCEx_PeriphCLKConfig+0x9bc>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004990:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 8004994:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    }
  }

  /*-------------------------- USART2/3/4/5/7/8 Configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
 8004998:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800499c:	e9d3 2300 	ldrd	r2, r3, [r3]
 80049a0:	f002 0302 	and.w	r3, r2, #2
 80049a4:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 80049a8:	2300      	movs	r3, #0
 80049aa:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 80049ae:	e9d7 122c 	ldrd	r1, r2, [r7, #176]	; 0xb0
 80049b2:	460b      	mov	r3, r1
 80049b4:	4313      	orrs	r3, r2
 80049b6:	d041      	beq.n	8004a3c <HAL_RCCEx_PeriphCLKConfig+0xa60>
  {
    switch (PeriphClkInit->Usart234578ClockSelection)
 80049b8:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80049bc:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80049be:	2b05      	cmp	r3, #5
 80049c0:	d824      	bhi.n	8004a0c <HAL_RCCEx_PeriphCLKConfig+0xa30>
 80049c2:	a201      	add	r2, pc, #4	; (adr r2, 80049c8 <HAL_RCCEx_PeriphCLKConfig+0x9ec>)
 80049c4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80049c8:	08004a15 	.word	0x08004a15
 80049cc:	080049e1 	.word	0x080049e1
 80049d0:	080049f7 	.word	0x080049f7
 80049d4:	08004a15 	.word	0x08004a15
 80049d8:	08004a15 	.word	0x08004a15
 80049dc:	08004a15 	.word	0x08004a15
      case RCC_USART234578CLKSOURCE_PCLK1: /* CD/D2 PCLK1 as clock source for USART2/3/4/5/7/8 */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      case RCC_USART234578CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 80049e0:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80049e4:	3308      	adds	r3, #8
 80049e6:	2101      	movs	r1, #1
 80049e8:	4618      	mov	r0, r3
 80049ea:	f000 ffab 	bl	8005944 <RCCEx_PLL2_Config>
 80049ee:	4603      	mov	r3, r0
 80049f0:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 80049f4:	e00f      	b.n	8004a16 <HAL_RCCEx_PeriphCLKConfig+0xa3a>

      case RCC_USART234578CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 80049f6:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80049fa:	3328      	adds	r3, #40	; 0x28
 80049fc:	2101      	movs	r1, #1
 80049fe:	4618      	mov	r0, r3
 8004a00:	f001 f852 	bl	8005aa8 <RCCEx_PLL3_Config>
 8004a04:	4603      	mov	r3, r0
 8004a06:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 8004a0a:	e004      	b.n	8004a16 <HAL_RCCEx_PeriphCLKConfig+0xa3a>
        /* LSE,  oscillator is used as source of USART2/3/4/5/7/8 clock */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8004a0c:	2301      	movs	r3, #1
 8004a0e:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        break;
 8004a12:	e000      	b.n	8004a16 <HAL_RCCEx_PeriphCLKConfig+0xa3a>
        break;
 8004a14:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004a16:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 8004a1a:	2b00      	cmp	r3, #0
 8004a1c:	d10a      	bne.n	8004a34 <HAL_RCCEx_PeriphCLKConfig+0xa58>
    {
      /* Set the source of USART2/3/4/5/7/8 clock */
      __HAL_RCC_USART234578_CONFIG(PeriphClkInit->Usart234578ClockSelection);
 8004a1e:	4b96      	ldr	r3, [pc, #600]	; (8004c78 <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 8004a20:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004a22:	f023 0107 	bic.w	r1, r3, #7
 8004a26:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8004a2a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004a2c:	4a92      	ldr	r2, [pc, #584]	; (8004c78 <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 8004a2e:	430b      	orrs	r3, r1
 8004a30:	6553      	str	r3, [r2, #84]	; 0x54
 8004a32:	e003      	b.n	8004a3c <HAL_RCCEx_PeriphCLKConfig+0xa60>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004a34:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 8004a38:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    }
  }

  /*-------------------------- LPUART1 Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8004a3c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8004a40:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004a44:	f002 0304 	and.w	r3, r2, #4
 8004a48:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8004a4c:	2300      	movs	r3, #0
 8004a4e:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8004a52:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 8004a56:	460b      	mov	r3, r1
 8004a58:	4313      	orrs	r3, r2
 8004a5a:	d044      	beq.n	8004ae6 <HAL_RCCEx_PeriphCLKConfig+0xb0a>
  {
    switch (PeriphClkInit->Lpuart1ClockSelection)
 8004a5c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8004a60:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004a64:	2b05      	cmp	r3, #5
 8004a66:	d825      	bhi.n	8004ab4 <HAL_RCCEx_PeriphCLKConfig+0xad8>
 8004a68:	a201      	add	r2, pc, #4	; (adr r2, 8004a70 <HAL_RCCEx_PeriphCLKConfig+0xa94>)
 8004a6a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004a6e:	bf00      	nop
 8004a70:	08004abd 	.word	0x08004abd
 8004a74:	08004a89 	.word	0x08004a89
 8004a78:	08004a9f 	.word	0x08004a9f
 8004a7c:	08004abd 	.word	0x08004abd
 8004a80:	08004abd 	.word	0x08004abd
 8004a84:	08004abd 	.word	0x08004abd
      case RCC_LPUART1CLKSOURCE_PCLK4: /* SRD/D3 PCLK1 (PCLK4) as clock source for LPUART1 */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPUART1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPUART1 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8004a88:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8004a8c:	3308      	adds	r3, #8
 8004a8e:	2101      	movs	r1, #1
 8004a90:	4618      	mov	r0, r3
 8004a92:	f000 ff57 	bl	8005944 <RCCEx_PLL2_Config>
 8004a96:	4603      	mov	r3, r0
 8004a98:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 8004a9c:	e00f      	b.n	8004abe <HAL_RCCEx_PeriphCLKConfig+0xae2>

      case RCC_LPUART1CLKSOURCE_PLL3: /* PLL3 is used as clock source for LPUART1 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8004a9e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8004aa2:	3328      	adds	r3, #40	; 0x28
 8004aa4:	2101      	movs	r1, #1
 8004aa6:	4618      	mov	r0, r3
 8004aa8:	f000 fffe 	bl	8005aa8 <RCCEx_PLL3_Config>
 8004aac:	4603      	mov	r3, r0
 8004aae:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 8004ab2:	e004      	b.n	8004abe <HAL_RCCEx_PeriphCLKConfig+0xae2>
        /* LSE,  oscillator is used as source of LPUART1 clock */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8004ab4:	2301      	movs	r3, #1
 8004ab6:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        break;
 8004aba:	e000      	b.n	8004abe <HAL_RCCEx_PeriphCLKConfig+0xae2>
        break;
 8004abc:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004abe:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 8004ac2:	2b00      	cmp	r3, #0
 8004ac4:	d10b      	bne.n	8004ade <HAL_RCCEx_PeriphCLKConfig+0xb02>
    {
      /* Set the source of LPUART1 clock */
      __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8004ac6:	4b6c      	ldr	r3, [pc, #432]	; (8004c78 <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 8004ac8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004aca:	f023 0107 	bic.w	r1, r3, #7
 8004ace:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8004ad2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004ad6:	4a68      	ldr	r2, [pc, #416]	; (8004c78 <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 8004ad8:	430b      	orrs	r3, r1
 8004ada:	6593      	str	r3, [r2, #88]	; 0x58
 8004adc:	e003      	b.n	8004ae6 <HAL_RCCEx_PeriphCLKConfig+0xb0a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004ade:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 8004ae2:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    }
  }

  /*---------------------------- LPTIM1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8004ae6:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8004aea:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004aee:	f002 0320 	and.w	r3, r2, #32
 8004af2:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8004af6:	2300      	movs	r3, #0
 8004af8:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 8004afc:	e9d7 1228 	ldrd	r1, r2, [r7, #160]	; 0xa0
 8004b00:	460b      	mov	r3, r1
 8004b02:	4313      	orrs	r3, r2
 8004b04:	d055      	beq.n	8004bb2 <HAL_RCCEx_PeriphCLKConfig+0xbd6>
  {
    switch (PeriphClkInit->Lptim1ClockSelection)
 8004b06:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8004b0a:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8004b0e:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8004b12:	d033      	beq.n	8004b7c <HAL_RCCEx_PeriphCLKConfig+0xba0>
 8004b14:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8004b18:	d82c      	bhi.n	8004b74 <HAL_RCCEx_PeriphCLKConfig+0xb98>
 8004b1a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004b1e:	d02f      	beq.n	8004b80 <HAL_RCCEx_PeriphCLKConfig+0xba4>
 8004b20:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004b24:	d826      	bhi.n	8004b74 <HAL_RCCEx_PeriphCLKConfig+0xb98>
 8004b26:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8004b2a:	d02b      	beq.n	8004b84 <HAL_RCCEx_PeriphCLKConfig+0xba8>
 8004b2c:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8004b30:	d820      	bhi.n	8004b74 <HAL_RCCEx_PeriphCLKConfig+0xb98>
 8004b32:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8004b36:	d012      	beq.n	8004b5e <HAL_RCCEx_PeriphCLKConfig+0xb82>
 8004b38:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8004b3c:	d81a      	bhi.n	8004b74 <HAL_RCCEx_PeriphCLKConfig+0xb98>
 8004b3e:	2b00      	cmp	r3, #0
 8004b40:	d022      	beq.n	8004b88 <HAL_RCCEx_PeriphCLKConfig+0xbac>
 8004b42:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8004b46:	d115      	bne.n	8004b74 <HAL_RCCEx_PeriphCLKConfig+0xb98>
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8004b48:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8004b4c:	3308      	adds	r3, #8
 8004b4e:	2100      	movs	r1, #0
 8004b50:	4618      	mov	r0, r3
 8004b52:	f000 fef7 	bl	8005944 <RCCEx_PLL2_Config>
 8004b56:	4603      	mov	r3, r0
 8004b58:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 8004b5c:	e015      	b.n	8004b8a <HAL_RCCEx_PeriphCLKConfig+0xbae>

      case RCC_LPTIM1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8004b5e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8004b62:	3328      	adds	r3, #40	; 0x28
 8004b64:	2102      	movs	r1, #2
 8004b66:	4618      	mov	r0, r3
 8004b68:	f000 ff9e 	bl	8005aa8 <RCCEx_PLL3_Config>
 8004b6c:	4603      	mov	r3, r0
 8004b6e:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 8004b72:	e00a      	b.n	8004b8a <HAL_RCCEx_PeriphCLKConfig+0xbae>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM1 clock */
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8004b74:	2301      	movs	r3, #1
 8004b76:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        break;
 8004b7a:	e006      	b.n	8004b8a <HAL_RCCEx_PeriphCLKConfig+0xbae>
        break;
 8004b7c:	bf00      	nop
 8004b7e:	e004      	b.n	8004b8a <HAL_RCCEx_PeriphCLKConfig+0xbae>
        break;
 8004b80:	bf00      	nop
 8004b82:	e002      	b.n	8004b8a <HAL_RCCEx_PeriphCLKConfig+0xbae>
        break;
 8004b84:	bf00      	nop
 8004b86:	e000      	b.n	8004b8a <HAL_RCCEx_PeriphCLKConfig+0xbae>
        break;
 8004b88:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004b8a:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 8004b8e:	2b00      	cmp	r3, #0
 8004b90:	d10b      	bne.n	8004baa <HAL_RCCEx_PeriphCLKConfig+0xbce>
    {
      /* Set the source of LPTIM1 clock*/
      __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8004b92:	4b39      	ldr	r3, [pc, #228]	; (8004c78 <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 8004b94:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004b96:	f023 41e0 	bic.w	r1, r3, #1879048192	; 0x70000000
 8004b9a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8004b9e:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8004ba2:	4a35      	ldr	r2, [pc, #212]	; (8004c78 <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 8004ba4:	430b      	orrs	r3, r1
 8004ba6:	6553      	str	r3, [r2, #84]	; 0x54
 8004ba8:	e003      	b.n	8004bb2 <HAL_RCCEx_PeriphCLKConfig+0xbd6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004baa:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 8004bae:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    }
  }

  /*---------------------------- LPTIM2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 8004bb2:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8004bb6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004bba:	f002 0340 	and.w	r3, r2, #64	; 0x40
 8004bbe:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8004bc2:	2300      	movs	r3, #0
 8004bc4:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8004bc8:	e9d7 1226 	ldrd	r1, r2, [r7, #152]	; 0x98
 8004bcc:	460b      	mov	r3, r1
 8004bce:	4313      	orrs	r3, r2
 8004bd0:	d058      	beq.n	8004c84 <HAL_RCCEx_PeriphCLKConfig+0xca8>
  {
    switch (PeriphClkInit->Lptim2ClockSelection)
 8004bd2:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8004bd6:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8004bda:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 8004bde:	d033      	beq.n	8004c48 <HAL_RCCEx_PeriphCLKConfig+0xc6c>
 8004be0:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 8004be4:	d82c      	bhi.n	8004c40 <HAL_RCCEx_PeriphCLKConfig+0xc64>
 8004be6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004bea:	d02f      	beq.n	8004c4c <HAL_RCCEx_PeriphCLKConfig+0xc70>
 8004bec:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004bf0:	d826      	bhi.n	8004c40 <HAL_RCCEx_PeriphCLKConfig+0xc64>
 8004bf2:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8004bf6:	d02b      	beq.n	8004c50 <HAL_RCCEx_PeriphCLKConfig+0xc74>
 8004bf8:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8004bfc:	d820      	bhi.n	8004c40 <HAL_RCCEx_PeriphCLKConfig+0xc64>
 8004bfe:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004c02:	d012      	beq.n	8004c2a <HAL_RCCEx_PeriphCLKConfig+0xc4e>
 8004c04:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004c08:	d81a      	bhi.n	8004c40 <HAL_RCCEx_PeriphCLKConfig+0xc64>
 8004c0a:	2b00      	cmp	r3, #0
 8004c0c:	d022      	beq.n	8004c54 <HAL_RCCEx_PeriphCLKConfig+0xc78>
 8004c0e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004c12:	d115      	bne.n	8004c40 <HAL_RCCEx_PeriphCLKConfig+0xc64>
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM2CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8004c14:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8004c18:	3308      	adds	r3, #8
 8004c1a:	2100      	movs	r1, #0
 8004c1c:	4618      	mov	r0, r3
 8004c1e:	f000 fe91 	bl	8005944 <RCCEx_PLL2_Config>
 8004c22:	4603      	mov	r3, r0
 8004c24:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 8004c28:	e015      	b.n	8004c56 <HAL_RCCEx_PeriphCLKConfig+0xc7a>

      case RCC_LPTIM2CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8004c2a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8004c2e:	3328      	adds	r3, #40	; 0x28
 8004c30:	2102      	movs	r1, #2
 8004c32:	4618      	mov	r0, r3
 8004c34:	f000 ff38 	bl	8005aa8 <RCCEx_PLL3_Config>
 8004c38:	4603      	mov	r3, r0
 8004c3a:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 8004c3e:	e00a      	b.n	8004c56 <HAL_RCCEx_PeriphCLKConfig+0xc7a>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM2 clock */
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8004c40:	2301      	movs	r3, #1
 8004c42:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        break;
 8004c46:	e006      	b.n	8004c56 <HAL_RCCEx_PeriphCLKConfig+0xc7a>
        break;
 8004c48:	bf00      	nop
 8004c4a:	e004      	b.n	8004c56 <HAL_RCCEx_PeriphCLKConfig+0xc7a>
        break;
 8004c4c:	bf00      	nop
 8004c4e:	e002      	b.n	8004c56 <HAL_RCCEx_PeriphCLKConfig+0xc7a>
        break;
 8004c50:	bf00      	nop
 8004c52:	e000      	b.n	8004c56 <HAL_RCCEx_PeriphCLKConfig+0xc7a>
        break;
 8004c54:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004c56:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 8004c5a:	2b00      	cmp	r3, #0
 8004c5c:	d10e      	bne.n	8004c7c <HAL_RCCEx_PeriphCLKConfig+0xca0>
    {
      /* Set the source of LPTIM2 clock*/
      __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8004c5e:	4b06      	ldr	r3, [pc, #24]	; (8004c78 <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 8004c60:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004c62:	f423 51e0 	bic.w	r1, r3, #7168	; 0x1c00
 8004c66:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8004c6a:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8004c6e:	4a02      	ldr	r2, [pc, #8]	; (8004c78 <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 8004c70:	430b      	orrs	r3, r1
 8004c72:	6593      	str	r3, [r2, #88]	; 0x58
 8004c74:	e006      	b.n	8004c84 <HAL_RCCEx_PeriphCLKConfig+0xca8>
 8004c76:	bf00      	nop
 8004c78:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004c7c:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 8004c80:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    }
  }

  /*---------------------------- LPTIM345 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
 8004c84:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8004c88:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004c8c:	f002 0380 	and.w	r3, r2, #128	; 0x80
 8004c90:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8004c94:	2300      	movs	r3, #0
 8004c96:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8004c9a:	e9d7 1224 	ldrd	r1, r2, [r7, #144]	; 0x90
 8004c9e:	460b      	mov	r3, r1
 8004ca0:	4313      	orrs	r3, r2
 8004ca2:	d055      	beq.n	8004d50 <HAL_RCCEx_PeriphCLKConfig+0xd74>
  {
    switch (PeriphClkInit->Lptim345ClockSelection)
 8004ca4:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8004ca8:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8004cac:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 8004cb0:	d033      	beq.n	8004d1a <HAL_RCCEx_PeriphCLKConfig+0xd3e>
 8004cb2:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 8004cb6:	d82c      	bhi.n	8004d12 <HAL_RCCEx_PeriphCLKConfig+0xd36>
 8004cb8:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004cbc:	d02f      	beq.n	8004d1e <HAL_RCCEx_PeriphCLKConfig+0xd42>
 8004cbe:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004cc2:	d826      	bhi.n	8004d12 <HAL_RCCEx_PeriphCLKConfig+0xd36>
 8004cc4:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 8004cc8:	d02b      	beq.n	8004d22 <HAL_RCCEx_PeriphCLKConfig+0xd46>
 8004cca:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 8004cce:	d820      	bhi.n	8004d12 <HAL_RCCEx_PeriphCLKConfig+0xd36>
 8004cd0:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8004cd4:	d012      	beq.n	8004cfc <HAL_RCCEx_PeriphCLKConfig+0xd20>
 8004cd6:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8004cda:	d81a      	bhi.n	8004d12 <HAL_RCCEx_PeriphCLKConfig+0xd36>
 8004cdc:	2b00      	cmp	r3, #0
 8004cde:	d022      	beq.n	8004d26 <HAL_RCCEx_PeriphCLKConfig+0xd4a>
 8004ce0:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004ce4:	d115      	bne.n	8004d12 <HAL_RCCEx_PeriphCLKConfig+0xd36>
      case RCC_LPTIM345CLKSOURCE_PCLK4:      /* SRD/D3 PCLK1 (PCLK4) as clock source for LPTIM3/4/5 */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM345CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8004ce6:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8004cea:	3308      	adds	r3, #8
 8004cec:	2100      	movs	r1, #0
 8004cee:	4618      	mov	r0, r3
 8004cf0:	f000 fe28 	bl	8005944 <RCCEx_PLL2_Config>
 8004cf4:	4603      	mov	r3, r0
 8004cf6:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 8004cfa:	e015      	b.n	8004d28 <HAL_RCCEx_PeriphCLKConfig+0xd4c>

      case RCC_LPTIM345CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8004cfc:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8004d00:	3328      	adds	r3, #40	; 0x28
 8004d02:	2102      	movs	r1, #2
 8004d04:	4618      	mov	r0, r3
 8004d06:	f000 fecf 	bl	8005aa8 <RCCEx_PLL3_Config>
 8004d0a:	4603      	mov	r3, r0
 8004d0c:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 8004d10:	e00a      	b.n	8004d28 <HAL_RCCEx_PeriphCLKConfig+0xd4c>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM3/4/5 clock */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8004d12:	2301      	movs	r3, #1
 8004d14:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        break;
 8004d18:	e006      	b.n	8004d28 <HAL_RCCEx_PeriphCLKConfig+0xd4c>
        break;
 8004d1a:	bf00      	nop
 8004d1c:	e004      	b.n	8004d28 <HAL_RCCEx_PeriphCLKConfig+0xd4c>
        break;
 8004d1e:	bf00      	nop
 8004d20:	e002      	b.n	8004d28 <HAL_RCCEx_PeriphCLKConfig+0xd4c>
        break;
 8004d22:	bf00      	nop
 8004d24:	e000      	b.n	8004d28 <HAL_RCCEx_PeriphCLKConfig+0xd4c>
        break;
 8004d26:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004d28:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 8004d2c:	2b00      	cmp	r3, #0
 8004d2e:	d10b      	bne.n	8004d48 <HAL_RCCEx_PeriphCLKConfig+0xd6c>
    {
      /* Set the source of LPTIM3/4/5 clock */
      __HAL_RCC_LPTIM345_CONFIG(PeriphClkInit->Lptim345ClockSelection);
 8004d30:	4ba0      	ldr	r3, [pc, #640]	; (8004fb4 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 8004d32:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004d34:	f423 4160 	bic.w	r1, r3, #57344	; 0xe000
 8004d38:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8004d3c:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8004d40:	4a9c      	ldr	r2, [pc, #624]	; (8004fb4 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 8004d42:	430b      	orrs	r3, r1
 8004d44:	6593      	str	r3, [r2, #88]	; 0x58
 8004d46:	e003      	b.n	8004d50 <HAL_RCCEx_PeriphCLKConfig+0xd74>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004d48:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 8004d4c:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    }
  }

  /*------------------------------ I2C1/2/3/5* Configuration ------------------------*/
#if defined(I2C5)
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1235) == RCC_PERIPHCLK_I2C1235)
 8004d50:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8004d54:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004d58:	f002 0308 	and.w	r3, r2, #8
 8004d5c:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8004d60:	2300      	movs	r3, #0
 8004d62:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 8004d66:	e9d7 1222 	ldrd	r1, r2, [r7, #136]	; 0x88
 8004d6a:	460b      	mov	r3, r1
 8004d6c:	4313      	orrs	r3, r2
 8004d6e:	d01e      	beq.n	8004dae <HAL_RCCEx_PeriphCLKConfig+0xdd2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1235CLKSOURCE(PeriphClkInit->I2c1235ClockSelection));

    if ((PeriphClkInit->I2c1235ClockSelection) == RCC_I2C1235CLKSOURCE_PLL3)
 8004d70:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8004d74:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8004d78:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004d7c:	d10c      	bne.n	8004d98 <HAL_RCCEx_PeriphCLKConfig+0xdbc>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 8004d7e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8004d82:	3328      	adds	r3, #40	; 0x28
 8004d84:	2102      	movs	r1, #2
 8004d86:	4618      	mov	r0, r3
 8004d88:	f000 fe8e 	bl	8005aa8 <RCCEx_PLL3_Config>
 8004d8c:	4603      	mov	r3, r0
 8004d8e:	2b00      	cmp	r3, #0
 8004d90:	d002      	beq.n	8004d98 <HAL_RCCEx_PeriphCLKConfig+0xdbc>
      {
        status = HAL_ERROR;
 8004d92:	2301      	movs	r3, #1
 8004d94:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
      }
    }

    __HAL_RCC_I2C1235_CONFIG(PeriphClkInit->I2c1235ClockSelection);
 8004d98:	4b86      	ldr	r3, [pc, #536]	; (8004fb4 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 8004d9a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004d9c:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8004da0:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8004da4:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8004da8:	4a82      	ldr	r2, [pc, #520]	; (8004fb4 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 8004daa:	430b      	orrs	r3, r1
 8004dac:	6553      	str	r3, [r2, #84]	; 0x54

  }
#endif /* I2C5 */

  /*------------------------------ I2C4 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8004dae:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8004db2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004db6:	f002 0310 	and.w	r3, r2, #16
 8004dba:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8004dbe:	2300      	movs	r3, #0
 8004dc0:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8004dc4:	e9d7 1220 	ldrd	r1, r2, [r7, #128]	; 0x80
 8004dc8:	460b      	mov	r3, r1
 8004dca:	4313      	orrs	r3, r2
 8004dcc:	d01e      	beq.n	8004e0c <HAL_RCCEx_PeriphCLKConfig+0xe30>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    if ((PeriphClkInit->I2c4ClockSelection) == RCC_I2C4CLKSOURCE_PLL3)
 8004dce:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8004dd2:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004dd6:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004dda:	d10c      	bne.n	8004df6 <HAL_RCCEx_PeriphCLKConfig+0xe1a>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 8004ddc:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8004de0:	3328      	adds	r3, #40	; 0x28
 8004de2:	2102      	movs	r1, #2
 8004de4:	4618      	mov	r0, r3
 8004de6:	f000 fe5f 	bl	8005aa8 <RCCEx_PLL3_Config>
 8004dea:	4603      	mov	r3, r0
 8004dec:	2b00      	cmp	r3, #0
 8004dee:	d002      	beq.n	8004df6 <HAL_RCCEx_PeriphCLKConfig+0xe1a>
      {
        status = HAL_ERROR;
 8004df0:	2301      	movs	r3, #1
 8004df2:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
      }
    }

    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8004df6:	4b6f      	ldr	r3, [pc, #444]	; (8004fb4 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 8004df8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004dfa:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8004dfe:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8004e02:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004e06:	4a6b      	ldr	r2, [pc, #428]	; (8004fb4 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 8004e08:	430b      	orrs	r3, r1
 8004e0a:	6593      	str	r3, [r2, #88]	; 0x58

  }

  /*---------------------------- ADC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8004e0c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8004e10:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004e14:	f402 2300 	and.w	r3, r2, #524288	; 0x80000
 8004e18:	67bb      	str	r3, [r7, #120]	; 0x78
 8004e1a:	2300      	movs	r3, #0
 8004e1c:	67fb      	str	r3, [r7, #124]	; 0x7c
 8004e1e:	e9d7 121e 	ldrd	r1, r2, [r7, #120]	; 0x78
 8004e22:	460b      	mov	r3, r1
 8004e24:	4313      	orrs	r3, r2
 8004e26:	d03e      	beq.n	8004ea6 <HAL_RCCEx_PeriphCLKConfig+0xeca>
  {
    switch (PeriphClkInit->AdcClockSelection)
 8004e28:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8004e2c:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 8004e30:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8004e34:	d022      	beq.n	8004e7c <HAL_RCCEx_PeriphCLKConfig+0xea0>
 8004e36:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8004e3a:	d81b      	bhi.n	8004e74 <HAL_RCCEx_PeriphCLKConfig+0xe98>
 8004e3c:	2b00      	cmp	r3, #0
 8004e3e:	d003      	beq.n	8004e48 <HAL_RCCEx_PeriphCLKConfig+0xe6c>
 8004e40:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004e44:	d00b      	beq.n	8004e5e <HAL_RCCEx_PeriphCLKConfig+0xe82>
 8004e46:	e015      	b.n	8004e74 <HAL_RCCEx_PeriphCLKConfig+0xe98>
    {

      case RCC_ADCCLKSOURCE_PLL2: /* PLL2 is used as clock source for ADC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8004e48:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8004e4c:	3308      	adds	r3, #8
 8004e4e:	2100      	movs	r1, #0
 8004e50:	4618      	mov	r0, r3
 8004e52:	f000 fd77 	bl	8005944 <RCCEx_PLL2_Config>
 8004e56:	4603      	mov	r3, r0
 8004e58:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* ADC clock source configuration done later after clock selection check */
        break;
 8004e5c:	e00f      	b.n	8004e7e <HAL_RCCEx_PeriphCLKConfig+0xea2>

      case RCC_ADCCLKSOURCE_PLL3:  /* PLL3 is used as clock source for ADC*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8004e5e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8004e62:	3328      	adds	r3, #40	; 0x28
 8004e64:	2102      	movs	r1, #2
 8004e66:	4618      	mov	r0, r3
 8004e68:	f000 fe1e 	bl	8005aa8 <RCCEx_PLL3_Config>
 8004e6c:	4603      	mov	r3, r0
 8004e6e:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* ADC clock source configuration done later after clock selection check */
        break;
 8004e72:	e004      	b.n	8004e7e <HAL_RCCEx_PeriphCLKConfig+0xea2>
        /* HSI, HSE, or CSI oscillator is used as source of ADC clock */
        /* ADC clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8004e74:	2301      	movs	r3, #1
 8004e76:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        break;
 8004e7a:	e000      	b.n	8004e7e <HAL_RCCEx_PeriphCLKConfig+0xea2>
        break;
 8004e7c:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004e7e:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 8004e82:	2b00      	cmp	r3, #0
 8004e84:	d10b      	bne.n	8004e9e <HAL_RCCEx_PeriphCLKConfig+0xec2>
    {
      /* Set the source of ADC clock*/
      __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8004e86:	4b4b      	ldr	r3, [pc, #300]	; (8004fb4 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 8004e88:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004e8a:	f423 3140 	bic.w	r1, r3, #196608	; 0x30000
 8004e8e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8004e92:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 8004e96:	4a47      	ldr	r2, [pc, #284]	; (8004fb4 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 8004e98:	430b      	orrs	r3, r1
 8004e9a:	6593      	str	r3, [r2, #88]	; 0x58
 8004e9c:	e003      	b.n	8004ea6 <HAL_RCCEx_PeriphCLKConfig+0xeca>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004e9e:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 8004ea2:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    }
  }

  /*------------------------------ USB Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8004ea6:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8004eaa:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004eae:	f402 2380 	and.w	r3, r2, #262144	; 0x40000
 8004eb2:	673b      	str	r3, [r7, #112]	; 0x70
 8004eb4:	2300      	movs	r3, #0
 8004eb6:	677b      	str	r3, [r7, #116]	; 0x74
 8004eb8:	e9d7 121c 	ldrd	r1, r2, [r7, #112]	; 0x70
 8004ebc:	460b      	mov	r3, r1
 8004ebe:	4313      	orrs	r3, r2
 8004ec0:	d03b      	beq.n	8004f3a <HAL_RCCEx_PeriphCLKConfig+0xf5e>
  {

    switch (PeriphClkInit->UsbClockSelection)
 8004ec2:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8004ec6:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004eca:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8004ece:	d01f      	beq.n	8004f10 <HAL_RCCEx_PeriphCLKConfig+0xf34>
 8004ed0:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8004ed4:	d818      	bhi.n	8004f08 <HAL_RCCEx_PeriphCLKConfig+0xf2c>
 8004ed6:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8004eda:	d003      	beq.n	8004ee4 <HAL_RCCEx_PeriphCLKConfig+0xf08>
 8004edc:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8004ee0:	d007      	beq.n	8004ef2 <HAL_RCCEx_PeriphCLKConfig+0xf16>
 8004ee2:	e011      	b.n	8004f08 <HAL_RCCEx_PeriphCLKConfig+0xf2c>
    {
      case RCC_USBCLKSOURCE_PLL:      /* PLL is used as clock source for USB*/
        /* Enable USB Clock output generated form System USB . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8004ee4:	4b33      	ldr	r3, [pc, #204]	; (8004fb4 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 8004ee6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004ee8:	4a32      	ldr	r2, [pc, #200]	; (8004fb4 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 8004eea:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004eee:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* USB clock source configuration done later after clock selection check */
        break;
 8004ef0:	e00f      	b.n	8004f12 <HAL_RCCEx_PeriphCLKConfig+0xf36>

      case RCC_USBCLKSOURCE_PLL3: /* PLL3 is used as clock source for USB*/

        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8004ef2:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8004ef6:	3328      	adds	r3, #40	; 0x28
 8004ef8:	2101      	movs	r1, #1
 8004efa:	4618      	mov	r0, r3
 8004efc:	f000 fdd4 	bl	8005aa8 <RCCEx_PLL3_Config>
 8004f00:	4603      	mov	r3, r0
 8004f02:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* USB clock source configuration done later after clock selection check */
        break;
 8004f06:	e004      	b.n	8004f12 <HAL_RCCEx_PeriphCLKConfig+0xf36>
        /* HSI48 oscillator is used as source of USB clock */
        /* USB clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8004f08:	2301      	movs	r3, #1
 8004f0a:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        break;
 8004f0e:	e000      	b.n	8004f12 <HAL_RCCEx_PeriphCLKConfig+0xf36>
        break;
 8004f10:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004f12:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 8004f16:	2b00      	cmp	r3, #0
 8004f18:	d10b      	bne.n	8004f32 <HAL_RCCEx_PeriphCLKConfig+0xf56>
    {
      /* Set the source of USB clock*/
      __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8004f1a:	4b26      	ldr	r3, [pc, #152]	; (8004fb4 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 8004f1c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004f1e:	f423 1140 	bic.w	r1, r3, #3145728	; 0x300000
 8004f22:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8004f26:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004f2a:	4a22      	ldr	r2, [pc, #136]	; (8004fb4 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 8004f2c:	430b      	orrs	r3, r1
 8004f2e:	6553      	str	r3, [r2, #84]	; 0x54
 8004f30:	e003      	b.n	8004f3a <HAL_RCCEx_PeriphCLKConfig+0xf5e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004f32:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 8004f36:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    }

  }

  /*------------------------------------- SDMMC Configuration ------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == RCC_PERIPHCLK_SDMMC)
 8004f3a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8004f3e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004f42:	f402 3380 	and.w	r3, r2, #65536	; 0x10000
 8004f46:	66bb      	str	r3, [r7, #104]	; 0x68
 8004f48:	2300      	movs	r3, #0
 8004f4a:	66fb      	str	r3, [r7, #108]	; 0x6c
 8004f4c:	e9d7 121a 	ldrd	r1, r2, [r7, #104]	; 0x68
 8004f50:	460b      	mov	r3, r1
 8004f52:	4313      	orrs	r3, r2
 8004f54:	d034      	beq.n	8004fc0 <HAL_RCCEx_PeriphCLKConfig+0xfe4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC(PeriphClkInit->SdmmcClockSelection));

    switch (PeriphClkInit->SdmmcClockSelection)
 8004f56:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8004f5a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004f5c:	2b00      	cmp	r3, #0
 8004f5e:	d003      	beq.n	8004f68 <HAL_RCCEx_PeriphCLKConfig+0xf8c>
 8004f60:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004f64:	d007      	beq.n	8004f76 <HAL_RCCEx_PeriphCLKConfig+0xf9a>
 8004f66:	e011      	b.n	8004f8c <HAL_RCCEx_PeriphCLKConfig+0xfb0>
    {
      case RCC_SDMMCCLKSOURCE_PLL:      /* PLL is used as clock source for SDMMC*/
        /* Enable SDMMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8004f68:	4b12      	ldr	r3, [pc, #72]	; (8004fb4 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 8004f6a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004f6c:	4a11      	ldr	r2, [pc, #68]	; (8004fb4 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 8004f6e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004f72:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 8004f74:	e00e      	b.n	8004f94 <HAL_RCCEx_PeriphCLKConfig+0xfb8>

      case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for SDMMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8004f76:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8004f7a:	3308      	adds	r3, #8
 8004f7c:	2102      	movs	r1, #2
 8004f7e:	4618      	mov	r0, r3
 8004f80:	f000 fce0 	bl	8005944 <RCCEx_PLL2_Config>
 8004f84:	4603      	mov	r3, r0
 8004f86:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 8004f8a:	e003      	b.n	8004f94 <HAL_RCCEx_PeriphCLKConfig+0xfb8>

      default:
        ret = HAL_ERROR;
 8004f8c:	2301      	movs	r3, #1
 8004f8e:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        break;
 8004f92:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004f94:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 8004f98:	2b00      	cmp	r3, #0
 8004f9a:	d10d      	bne.n	8004fb8 <HAL_RCCEx_PeriphCLKConfig+0xfdc>
    {
      /* Set the source of SDMMC clock*/
      __HAL_RCC_SDMMC_CONFIG(PeriphClkInit->SdmmcClockSelection);
 8004f9c:	4b05      	ldr	r3, [pc, #20]	; (8004fb4 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 8004f9e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004fa0:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8004fa4:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8004fa8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004faa:	4a02      	ldr	r2, [pc, #8]	; (8004fb4 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 8004fac:	430b      	orrs	r3, r1
 8004fae:	64d3      	str	r3, [r2, #76]	; 0x4c
 8004fb0:	e006      	b.n	8004fc0 <HAL_RCCEx_PeriphCLKConfig+0xfe4>
 8004fb2:	bf00      	nop
 8004fb4:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004fb8:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 8004fbc:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    }
  }

#if defined(LTDC)
  /*-------------------------------------- LTDC Configuration -----------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 8004fc0:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8004fc4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004fc8:	f002 5300 	and.w	r3, r2, #536870912	; 0x20000000
 8004fcc:	663b      	str	r3, [r7, #96]	; 0x60
 8004fce:	2300      	movs	r3, #0
 8004fd0:	667b      	str	r3, [r7, #100]	; 0x64
 8004fd2:	e9d7 1218 	ldrd	r1, r2, [r7, #96]	; 0x60
 8004fd6:	460b      	mov	r3, r1
 8004fd8:	4313      	orrs	r3, r2
 8004fda:	d00c      	beq.n	8004ff6 <HAL_RCCEx_PeriphCLKConfig+0x101a>
  {
    if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 8004fdc:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8004fe0:	3328      	adds	r3, #40	; 0x28
 8004fe2:	2102      	movs	r1, #2
 8004fe4:	4618      	mov	r0, r3
 8004fe6:	f000 fd5f 	bl	8005aa8 <RCCEx_PLL3_Config>
 8004fea:	4603      	mov	r3, r0
 8004fec:	2b00      	cmp	r3, #0
 8004fee:	d002      	beq.n	8004ff6 <HAL_RCCEx_PeriphCLKConfig+0x101a>
    {
      status = HAL_ERROR;
 8004ff0:	2301      	movs	r3, #1
 8004ff2:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    }
  }
#endif /* LTDC */

  /*------------------------------ RNG Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 8004ff6:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8004ffa:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004ffe:	f402 3300 	and.w	r3, r2, #131072	; 0x20000
 8005002:	65bb      	str	r3, [r7, #88]	; 0x58
 8005004:	2300      	movs	r3, #0
 8005006:	65fb      	str	r3, [r7, #92]	; 0x5c
 8005008:	e9d7 1216 	ldrd	r1, r2, [r7, #88]	; 0x58
 800500c:	460b      	mov	r3, r1
 800500e:	4313      	orrs	r3, r2
 8005010:	d036      	beq.n	8005080 <HAL_RCCEx_PeriphCLKConfig+0x10a4>
  {

    switch (PeriphClkInit->RngClockSelection)
 8005012:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005016:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8005018:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800501c:	d018      	beq.n	8005050 <HAL_RCCEx_PeriphCLKConfig+0x1074>
 800501e:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8005022:	d811      	bhi.n	8005048 <HAL_RCCEx_PeriphCLKConfig+0x106c>
 8005024:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8005028:	d014      	beq.n	8005054 <HAL_RCCEx_PeriphCLKConfig+0x1078>
 800502a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800502e:	d80b      	bhi.n	8005048 <HAL_RCCEx_PeriphCLKConfig+0x106c>
 8005030:	2b00      	cmp	r3, #0
 8005032:	d011      	beq.n	8005058 <HAL_RCCEx_PeriphCLKConfig+0x107c>
 8005034:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005038:	d106      	bne.n	8005048 <HAL_RCCEx_PeriphCLKConfig+0x106c>
    {
      case RCC_RNGCLKSOURCE_PLL:     /* PLL is used as clock source for RNG*/
        /* Enable RNG Clock output generated form System RNG . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800503a:	4bb7      	ldr	r3, [pc, #732]	; (8005318 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 800503c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800503e:	4ab6      	ldr	r2, [pc, #728]	; (8005318 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 8005040:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8005044:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* RNG clock source configuration done later after clock selection check */
        break;
 8005046:	e008      	b.n	800505a <HAL_RCCEx_PeriphCLKConfig+0x107e>
        /* HSI48 oscillator is used as source of RNG clock */
        /* RNG clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8005048:	2301      	movs	r3, #1
 800504a:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        break;
 800504e:	e004      	b.n	800505a <HAL_RCCEx_PeriphCLKConfig+0x107e>
        break;
 8005050:	bf00      	nop
 8005052:	e002      	b.n	800505a <HAL_RCCEx_PeriphCLKConfig+0x107e>
        break;
 8005054:	bf00      	nop
 8005056:	e000      	b.n	800505a <HAL_RCCEx_PeriphCLKConfig+0x107e>
        break;
 8005058:	bf00      	nop
    }

    if (ret == HAL_OK)
 800505a:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800505e:	2b00      	cmp	r3, #0
 8005060:	d10a      	bne.n	8005078 <HAL_RCCEx_PeriphCLKConfig+0x109c>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8005062:	4bad      	ldr	r3, [pc, #692]	; (8005318 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 8005064:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005066:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 800506a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800506e:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8005070:	4aa9      	ldr	r2, [pc, #676]	; (8005318 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 8005072:	430b      	orrs	r3, r1
 8005074:	6553      	str	r3, [r2, #84]	; 0x54
 8005076:	e003      	b.n	8005080 <HAL_RCCEx_PeriphCLKConfig+0x10a4>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005078:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800507c:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    }

  }

  /*------------------------------ SWPMI1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8005080:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005084:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005088:	f402 1380 	and.w	r3, r2, #1048576	; 0x100000
 800508c:	653b      	str	r3, [r7, #80]	; 0x50
 800508e:	2300      	movs	r3, #0
 8005090:	657b      	str	r3, [r7, #84]	; 0x54
 8005092:	e9d7 1214 	ldrd	r1, r2, [r7, #80]	; 0x50
 8005096:	460b      	mov	r3, r1
 8005098:	4313      	orrs	r3, r2
 800509a:	d009      	beq.n	80050b0 <HAL_RCCEx_PeriphCLKConfig+0x10d4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 interface clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 800509c:	4b9e      	ldr	r3, [pc, #632]	; (8005318 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 800509e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80050a0:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
 80050a4:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80050a8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80050aa:	4a9b      	ldr	r2, [pc, #620]	; (8005318 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 80050ac:	430b      	orrs	r3, r1
 80050ae:	6513      	str	r3, [r2, #80]	; 0x50
    /* Configure the HRTIM1 clock source */
    __HAL_RCC_HRTIM1_CONFIG(PeriphClkInit->Hrtim1ClockSelection);
  }
#endif  /*HRTIM1*/
  /*------------------------------ DFSDM1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 80050b0:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80050b4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80050b8:	f402 1300 	and.w	r3, r2, #2097152	; 0x200000
 80050bc:	64bb      	str	r3, [r7, #72]	; 0x48
 80050be:	2300      	movs	r3, #0
 80050c0:	64fb      	str	r3, [r7, #76]	; 0x4c
 80050c2:	e9d7 1212 	ldrd	r1, r2, [r7, #72]	; 0x48
 80050c6:	460b      	mov	r3, r1
 80050c8:	4313      	orrs	r3, r2
 80050ca:	d009      	beq.n	80050e0 <HAL_RCCEx_PeriphCLKConfig+0x1104>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 80050cc:	4b92      	ldr	r3, [pc, #584]	; (8005318 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 80050ce:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80050d0:	f023 7180 	bic.w	r1, r3, #16777216	; 0x1000000
 80050d4:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80050d8:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80050da:	4a8f      	ldr	r2, [pc, #572]	; (8005318 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 80050dc:	430b      	orrs	r3, r1
 80050de:	6513      	str	r3, [r2, #80]	; 0x50
    __HAL_RCC_DFSDM2_CONFIG(PeriphClkInit->Dfsdm2ClockSelection);
  }
#endif  /* DFSDM2 */

  /*------------------------------------ TIM configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
 80050e0:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80050e4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80050e8:	f002 4380 	and.w	r3, r2, #1073741824	; 0x40000000
 80050ec:	643b      	str	r3, [r7, #64]	; 0x40
 80050ee:	2300      	movs	r3, #0
 80050f0:	647b      	str	r3, [r7, #68]	; 0x44
 80050f2:	e9d7 1210 	ldrd	r1, r2, [r7, #64]	; 0x40
 80050f6:	460b      	mov	r3, r1
 80050f8:	4313      	orrs	r3, r2
 80050fa:	d00e      	beq.n	800511a <HAL_RCCEx_PeriphCLKConfig+0x113e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 80050fc:	4b86      	ldr	r3, [pc, #536]	; (8005318 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 80050fe:	691b      	ldr	r3, [r3, #16]
 8005100:	4a85      	ldr	r2, [pc, #532]	; (8005318 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 8005102:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8005106:	6113      	str	r3, [r2, #16]
 8005108:	4b83      	ldr	r3, [pc, #524]	; (8005318 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 800510a:	6919      	ldr	r1, [r3, #16]
 800510c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005110:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 8005114:	4a80      	ldr	r2, [pc, #512]	; (8005318 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 8005116:	430b      	orrs	r3, r1
 8005118:	6113      	str	r3, [r2, #16]
  }

  /*------------------------------------ CKPER configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
 800511a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800511e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005122:	f002 4300 	and.w	r3, r2, #2147483648	; 0x80000000
 8005126:	63bb      	str	r3, [r7, #56]	; 0x38
 8005128:	2300      	movs	r3, #0
 800512a:	63fb      	str	r3, [r7, #60]	; 0x3c
 800512c:	e9d7 120e 	ldrd	r1, r2, [r7, #56]	; 0x38
 8005130:	460b      	mov	r3, r1
 8005132:	4313      	orrs	r3, r2
 8005134:	d009      	beq.n	800514a <HAL_RCCEx_PeriphCLKConfig+0x116e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLKPSOURCE(PeriphClkInit->CkperClockSelection));

    /* Configure the CKPER clock source */
    __HAL_RCC_CLKP_CONFIG(PeriphClkInit->CkperClockSelection);
 8005136:	4b78      	ldr	r3, [pc, #480]	; (8005318 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 8005138:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800513a:	f023 5140 	bic.w	r1, r3, #805306368	; 0x30000000
 800513e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005142:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005144:	4a74      	ldr	r2, [pc, #464]	; (8005318 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 8005146:	430b      	orrs	r3, r1
 8005148:	64d3      	str	r3, [r2, #76]	; 0x4c
  }

  /*------------------------------ CEC Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 800514a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800514e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005152:	f402 0300 	and.w	r3, r2, #8388608	; 0x800000
 8005156:	633b      	str	r3, [r7, #48]	; 0x30
 8005158:	2300      	movs	r3, #0
 800515a:	637b      	str	r3, [r7, #52]	; 0x34
 800515c:	e9d7 120c 	ldrd	r1, r2, [r7, #48]	; 0x30
 8005160:	460b      	mov	r3, r1
 8005162:	4313      	orrs	r3, r2
 8005164:	d00a      	beq.n	800517c <HAL_RCCEx_PeriphCLKConfig+0x11a0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC interface clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8005166:	4b6c      	ldr	r3, [pc, #432]	; (8005318 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 8005168:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800516a:	f423 0140 	bic.w	r1, r3, #12582912	; 0xc00000
 800516e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005172:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005176:	4a68      	ldr	r2, [pc, #416]	; (8005318 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 8005178:	430b      	orrs	r3, r1
 800517a:	6553      	str	r3, [r2, #84]	; 0x54
  }

  /*---------------------------- PLL2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVP) == RCC_PERIPHCLK_PLL2_DIVP)
 800517c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005180:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005184:	2100      	movs	r1, #0
 8005186:	62b9      	str	r1, [r7, #40]	; 0x28
 8005188:	f003 0301 	and.w	r3, r3, #1
 800518c:	62fb      	str	r3, [r7, #44]	; 0x2c
 800518e:	e9d7 120a 	ldrd	r1, r2, [r7, #40]	; 0x28
 8005192:	460b      	mov	r3, r1
 8005194:	4313      	orrs	r3, r2
 8005196:	d011      	beq.n	80051bc <HAL_RCCEx_PeriphCLKConfig+0x11e0>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8005198:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800519c:	3308      	adds	r3, #8
 800519e:	2100      	movs	r1, #0
 80051a0:	4618      	mov	r0, r3
 80051a2:	f000 fbcf 	bl	8005944 <RCCEx_PLL2_Config>
 80051a6:	4603      	mov	r3, r0
 80051a8:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
    
    if (ret == HAL_OK)
 80051ac:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 80051b0:	2b00      	cmp	r3, #0
 80051b2:	d003      	beq.n	80051bc <HAL_RCCEx_PeriphCLKConfig+0x11e0>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 80051b4:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 80051b8:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    } 
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVQ) == RCC_PERIPHCLK_PLL2_DIVQ)
 80051bc:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80051c0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80051c4:	2100      	movs	r1, #0
 80051c6:	6239      	str	r1, [r7, #32]
 80051c8:	f003 0302 	and.w	r3, r3, #2
 80051cc:	627b      	str	r3, [r7, #36]	; 0x24
 80051ce:	e9d7 1208 	ldrd	r1, r2, [r7, #32]
 80051d2:	460b      	mov	r3, r1
 80051d4:	4313      	orrs	r3, r2
 80051d6:	d011      	beq.n	80051fc <HAL_RCCEx_PeriphCLKConfig+0x1220>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 80051d8:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80051dc:	3308      	adds	r3, #8
 80051de:	2101      	movs	r1, #1
 80051e0:	4618      	mov	r0, r3
 80051e2:	f000 fbaf 	bl	8005944 <RCCEx_PLL2_Config>
 80051e6:	4603      	mov	r3, r0
 80051e8:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
    
    if (ret == HAL_OK)
 80051ec:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 80051f0:	2b00      	cmp	r3, #0
 80051f2:	d003      	beq.n	80051fc <HAL_RCCEx_PeriphCLKConfig+0x1220>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 80051f4:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 80051f8:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVR) == RCC_PERIPHCLK_PLL2_DIVR)
 80051fc:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005200:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005204:	2100      	movs	r1, #0
 8005206:	61b9      	str	r1, [r7, #24]
 8005208:	f003 0304 	and.w	r3, r3, #4
 800520c:	61fb      	str	r3, [r7, #28]
 800520e:	e9d7 1206 	ldrd	r1, r2, [r7, #24]
 8005212:	460b      	mov	r3, r1
 8005214:	4313      	orrs	r3, r2
 8005216:	d011      	beq.n	800523c <HAL_RCCEx_PeriphCLKConfig+0x1260>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8005218:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800521c:	3308      	adds	r3, #8
 800521e:	2102      	movs	r1, #2
 8005220:	4618      	mov	r0, r3
 8005222:	f000 fb8f 	bl	8005944 <RCCEx_PLL2_Config>
 8005226:	4603      	mov	r3, r0
 8005228:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
    
    if (ret == HAL_OK)
 800522c:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 8005230:	2b00      	cmp	r3, #0
 8005232:	d003      	beq.n	800523c <HAL_RCCEx_PeriphCLKConfig+0x1260>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005234:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 8005238:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    }
  }
  

  /*---------------------------- PLL3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVP) == RCC_PERIPHCLK_PLL3_DIVP)
 800523c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005240:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005244:	2100      	movs	r1, #0
 8005246:	6139      	str	r1, [r7, #16]
 8005248:	f003 0308 	and.w	r3, r3, #8
 800524c:	617b      	str	r3, [r7, #20]
 800524e:	e9d7 1204 	ldrd	r1, r2, [r7, #16]
 8005252:	460b      	mov	r3, r1
 8005254:	4313      	orrs	r3, r2
 8005256:	d011      	beq.n	800527c <HAL_RCCEx_PeriphCLKConfig+0x12a0>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8005258:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800525c:	3328      	adds	r3, #40	; 0x28
 800525e:	2100      	movs	r1, #0
 8005260:	4618      	mov	r0, r3
 8005262:	f000 fc21 	bl	8005aa8 <RCCEx_PLL3_Config>
 8005266:	4603      	mov	r3, r0
 8005268:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
  
    if (ret == HAL_OK)
 800526c:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 8005270:	2b00      	cmp	r3, #0
 8005272:	d003      	beq.n	800527c <HAL_RCCEx_PeriphCLKConfig+0x12a0>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005274:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 8005278:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVQ) == RCC_PERIPHCLK_PLL3_DIVQ)
 800527c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005280:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005284:	2100      	movs	r1, #0
 8005286:	60b9      	str	r1, [r7, #8]
 8005288:	f003 0310 	and.w	r3, r3, #16
 800528c:	60fb      	str	r3, [r7, #12]
 800528e:	e9d7 1202 	ldrd	r1, r2, [r7, #8]
 8005292:	460b      	mov	r3, r1
 8005294:	4313      	orrs	r3, r2
 8005296:	d011      	beq.n	80052bc <HAL_RCCEx_PeriphCLKConfig+0x12e0>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8005298:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800529c:	3328      	adds	r3, #40	; 0x28
 800529e:	2101      	movs	r1, #1
 80052a0:	4618      	mov	r0, r3
 80052a2:	f000 fc01 	bl	8005aa8 <RCCEx_PLL3_Config>
 80052a6:	4603      	mov	r3, r0
 80052a8:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
    
    if (ret == HAL_OK)
 80052ac:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 80052b0:	2b00      	cmp	r3, #0
 80052b2:	d003      	beq.n	80052bc <HAL_RCCEx_PeriphCLKConfig+0x12e0>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 80052b4:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 80052b8:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVR) == RCC_PERIPHCLK_PLL3_DIVR)
 80052bc:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80052c0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80052c4:	2100      	movs	r1, #0
 80052c6:	6039      	str	r1, [r7, #0]
 80052c8:	f003 0320 	and.w	r3, r3, #32
 80052cc:	607b      	str	r3, [r7, #4]
 80052ce:	e9d7 1200 	ldrd	r1, r2, [r7]
 80052d2:	460b      	mov	r3, r1
 80052d4:	4313      	orrs	r3, r2
 80052d6:	d011      	beq.n	80052fc <HAL_RCCEx_PeriphCLKConfig+0x1320>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 80052d8:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80052dc:	3328      	adds	r3, #40	; 0x28
 80052de:	2102      	movs	r1, #2
 80052e0:	4618      	mov	r0, r3
 80052e2:	f000 fbe1 	bl	8005aa8 <RCCEx_PLL3_Config>
 80052e6:	4603      	mov	r3, r0
 80052e8:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
    
    if (ret == HAL_OK)
 80052ec:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 80052f0:	2b00      	cmp	r3, #0
 80052f2:	d003      	beq.n	80052fc <HAL_RCCEx_PeriphCLKConfig+0x1320>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 80052f4:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 80052f8:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    } 
  }

  if (status == HAL_OK)
 80052fc:	f897 3116 	ldrb.w	r3, [r7, #278]	; 0x116
 8005300:	2b00      	cmp	r3, #0
 8005302:	d101      	bne.n	8005308 <HAL_RCCEx_PeriphCLKConfig+0x132c>
  {
    return HAL_OK;
 8005304:	2300      	movs	r3, #0
 8005306:	e000      	b.n	800530a <HAL_RCCEx_PeriphCLKConfig+0x132e>
  }
  return HAL_ERROR;
 8005308:	2301      	movs	r3, #1
}
 800530a:	4618      	mov	r0, r3
 800530c:	f507 778c 	add.w	r7, r7, #280	; 0x118
 8005310:	46bd      	mov	sp, r7
 8005312:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8005316:	bf00      	nop
 8005318:	58024400 	.word	0x58024400

0800531c <HAL_RCCEx_GetD3PCLK1Freq>:
  * @note   Each time D3PCLK1 changes, this function must be called to update the
  *         right D3PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval D3PCLK1 frequency
  */
uint32_t HAL_RCCEx_GetD3PCLK1Freq(void)
{
 800531c:	b580      	push	{r7, lr}
 800531e:	af00      	add	r7, sp, #0
#if defined(RCC_D3CFGR_D3PPRE)
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->D3CFGR & RCC_D3CFGR_D3PPRE) >> RCC_D3CFGR_D3PPRE_Pos] & 0x1FU));
 8005320:	f7fe fe00 	bl	8003f24 <HAL_RCC_GetHCLKFreq>
 8005324:	4602      	mov	r2, r0
 8005326:	4b06      	ldr	r3, [pc, #24]	; (8005340 <HAL_RCCEx_GetD3PCLK1Freq+0x24>)
 8005328:	6a1b      	ldr	r3, [r3, #32]
 800532a:	091b      	lsrs	r3, r3, #4
 800532c:	f003 0307 	and.w	r3, r3, #7
 8005330:	4904      	ldr	r1, [pc, #16]	; (8005344 <HAL_RCCEx_GetD3PCLK1Freq+0x28>)
 8005332:	5ccb      	ldrb	r3, [r1, r3]
 8005334:	f003 031f 	and.w	r3, r3, #31
 8005338:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE) >> RCC_SRDCFGR_SRDPPRE_Pos] & 0x1FU));
#endif
}
 800533c:	4618      	mov	r0, r3
 800533e:	bd80      	pop	{r7, pc}
 8005340:	58024400 	.word	0x58024400
 8005344:	0800b834 	.word	0x0800b834

08005348 <HAL_RCCEx_GetPLL2ClockFreq>:
  *         right PLL2CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL2_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL2ClockFreq(PLL2_ClocksTypeDef *PLL2_Clocks)
{
 8005348:	b480      	push	{r7}
 800534a:	b089      	sub	sp, #36	; 0x24
 800534c:	af00      	add	r7, sp, #0
 800534e:	6078      	str	r0, [r7, #4]
  float_t fracn2, pll2vco;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL2M) * PLL2N
     PLL2xCLK = PLL2_VCO / PLL2x
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8005350:	4ba1      	ldr	r3, [pc, #644]	; (80055d8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8005352:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005354:	f003 0303 	and.w	r3, r3, #3
 8005358:	61bb      	str	r3, [r7, #24]
  pll2m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM2) >> 12);
 800535a:	4b9f      	ldr	r3, [pc, #636]	; (80055d8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800535c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800535e:	0b1b      	lsrs	r3, r3, #12
 8005360:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8005364:	617b      	str	r3, [r7, #20]
  pll2fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL2FRACEN) >> RCC_PLLCFGR_PLL2FRACEN_Pos;
 8005366:	4b9c      	ldr	r3, [pc, #624]	; (80055d8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8005368:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800536a:	091b      	lsrs	r3, r3, #4
 800536c:	f003 0301 	and.w	r3, r3, #1
 8005370:	613b      	str	r3, [r7, #16]
  fracn2 = (float_t)(uint32_t)(pll2fracen * ((RCC->PLL2FRACR & RCC_PLL2FRACR_FRACN2) >> 3));
 8005372:	4b99      	ldr	r3, [pc, #612]	; (80055d8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8005374:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005376:	08db      	lsrs	r3, r3, #3
 8005378:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800537c:	693a      	ldr	r2, [r7, #16]
 800537e:	fb02 f303 	mul.w	r3, r2, r3
 8005382:	ee07 3a90 	vmov	s15, r3
 8005386:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800538a:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll2m != 0U)
 800538e:	697b      	ldr	r3, [r7, #20]
 8005390:	2b00      	cmp	r3, #0
 8005392:	f000 8111 	beq.w	80055b8 <HAL_RCCEx_GetPLL2ClockFreq+0x270>
  {
    switch (pllsource)
 8005396:	69bb      	ldr	r3, [r7, #24]
 8005398:	2b02      	cmp	r3, #2
 800539a:	f000 8083 	beq.w	80054a4 <HAL_RCCEx_GetPLL2ClockFreq+0x15c>
 800539e:	69bb      	ldr	r3, [r7, #24]
 80053a0:	2b02      	cmp	r3, #2
 80053a2:	f200 80a1 	bhi.w	80054e8 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
 80053a6:	69bb      	ldr	r3, [r7, #24]
 80053a8:	2b00      	cmp	r3, #0
 80053aa:	d003      	beq.n	80053b4 <HAL_RCCEx_GetPLL2ClockFreq+0x6c>
 80053ac:	69bb      	ldr	r3, [r7, #24]
 80053ae:	2b01      	cmp	r3, #1
 80053b0:	d056      	beq.n	8005460 <HAL_RCCEx_GetPLL2ClockFreq+0x118>
 80053b2:	e099      	b.n	80054e8 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
    {

      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80053b4:	4b88      	ldr	r3, [pc, #544]	; (80055d8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80053b6:	681b      	ldr	r3, [r3, #0]
 80053b8:	f003 0320 	and.w	r3, r3, #32
 80053bc:	2b00      	cmp	r3, #0
 80053be:	d02d      	beq.n	800541c <HAL_RCCEx_GetPLL2ClockFreq+0xd4>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 80053c0:	4b85      	ldr	r3, [pc, #532]	; (80055d8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80053c2:	681b      	ldr	r3, [r3, #0]
 80053c4:	08db      	lsrs	r3, r3, #3
 80053c6:	f003 0303 	and.w	r3, r3, #3
 80053ca:	4a84      	ldr	r2, [pc, #528]	; (80055dc <HAL_RCCEx_GetPLL2ClockFreq+0x294>)
 80053cc:	fa22 f303 	lsr.w	r3, r2, r3
 80053d0:	60bb      	str	r3, [r7, #8]
          pll2vco = ((float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 80053d2:	68bb      	ldr	r3, [r7, #8]
 80053d4:	ee07 3a90 	vmov	s15, r3
 80053d8:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80053dc:	697b      	ldr	r3, [r7, #20]
 80053de:	ee07 3a90 	vmov	s15, r3
 80053e2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80053e6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80053ea:	4b7b      	ldr	r3, [pc, #492]	; (80055d8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80053ec:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80053ee:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80053f2:	ee07 3a90 	vmov	s15, r3
 80053f6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80053fa:	ed97 6a03 	vldr	s12, [r7, #12]
 80053fe:	eddf 5a78 	vldr	s11, [pc, #480]	; 80055e0 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8005402:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8005406:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800540a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800540e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8005412:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005416:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
        }
        break;
 800541a:	e087      	b.n	800552c <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>
          pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 800541c:	697b      	ldr	r3, [r7, #20]
 800541e:	ee07 3a90 	vmov	s15, r3
 8005422:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005426:	eddf 6a6f 	vldr	s13, [pc, #444]	; 80055e4 <HAL_RCCEx_GetPLL2ClockFreq+0x29c>
 800542a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800542e:	4b6a      	ldr	r3, [pc, #424]	; (80055d8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8005430:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005432:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005436:	ee07 3a90 	vmov	s15, r3
 800543a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800543e:	ed97 6a03 	vldr	s12, [r7, #12]
 8005442:	eddf 5a67 	vldr	s11, [pc, #412]	; 80055e0 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8005446:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800544a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800544e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8005452:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8005456:	ee67 7a27 	vmul.f32	s15, s14, s15
 800545a:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800545e:	e065      	b.n	800552c <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8005460:	697b      	ldr	r3, [r7, #20]
 8005462:	ee07 3a90 	vmov	s15, r3
 8005466:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800546a:	eddf 6a5f 	vldr	s13, [pc, #380]	; 80055e8 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 800546e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005472:	4b59      	ldr	r3, [pc, #356]	; (80055d8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8005474:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005476:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800547a:	ee07 3a90 	vmov	s15, r3
 800547e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005482:	ed97 6a03 	vldr	s12, [r7, #12]
 8005486:	eddf 5a56 	vldr	s11, [pc, #344]	; 80055e0 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800548a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800548e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8005492:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8005496:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800549a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800549e:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80054a2:	e043      	b.n	800552c <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 80054a4:	697b      	ldr	r3, [r7, #20]
 80054a6:	ee07 3a90 	vmov	s15, r3
 80054aa:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80054ae:	eddf 6a4f 	vldr	s13, [pc, #316]	; 80055ec <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>
 80054b2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80054b6:	4b48      	ldr	r3, [pc, #288]	; (80055d8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80054b8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80054ba:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80054be:	ee07 3a90 	vmov	s15, r3
 80054c2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80054c6:	ed97 6a03 	vldr	s12, [r7, #12]
 80054ca:	eddf 5a45 	vldr	s11, [pc, #276]	; 80055e0 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 80054ce:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80054d2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80054d6:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80054da:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80054de:	ee67 7a27 	vmul.f32	s15, s14, s15
 80054e2:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80054e6:	e021      	b.n	800552c <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      default:
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 80054e8:	697b      	ldr	r3, [r7, #20]
 80054ea:	ee07 3a90 	vmov	s15, r3
 80054ee:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80054f2:	eddf 6a3d 	vldr	s13, [pc, #244]	; 80055e8 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 80054f6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80054fa:	4b37      	ldr	r3, [pc, #220]	; (80055d8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80054fc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80054fe:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005502:	ee07 3a90 	vmov	s15, r3
 8005506:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800550a:	ed97 6a03 	vldr	s12, [r7, #12]
 800550e:	eddf 5a34 	vldr	s11, [pc, #208]	; 80055e0 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8005512:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8005516:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800551a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800551e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8005522:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005526:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800552a:	bf00      	nop
    }
    PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_P2) >> 9)  + (float_t)1)) ;
 800552c:	4b2a      	ldr	r3, [pc, #168]	; (80055d8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800552e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005530:	0a5b      	lsrs	r3, r3, #9
 8005532:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8005536:	ee07 3a90 	vmov	s15, r3
 800553a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800553e:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8005542:	ee37 7a87 	vadd.f32	s14, s15, s14
 8005546:	edd7 6a07 	vldr	s13, [r7, #28]
 800554a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800554e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8005552:	ee17 2a90 	vmov	r2, s15
 8005556:	687b      	ldr	r3, [r7, #4]
 8005558:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_Q2) >> 16) + (float_t)1)) ;
 800555a:	4b1f      	ldr	r3, [pc, #124]	; (80055d8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800555c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800555e:	0c1b      	lsrs	r3, r3, #16
 8005560:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8005564:	ee07 3a90 	vmov	s15, r3
 8005568:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800556c:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8005570:	ee37 7a87 	vadd.f32	s14, s15, s14
 8005574:	edd7 6a07 	vldr	s13, [r7, #28]
 8005578:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800557c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8005580:	ee17 2a90 	vmov	r2, s15
 8005584:	687b      	ldr	r3, [r7, #4]
 8005586:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_R2) >> 24) + (float_t)1)) ;
 8005588:	4b13      	ldr	r3, [pc, #76]	; (80055d8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800558a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800558c:	0e1b      	lsrs	r3, r3, #24
 800558e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8005592:	ee07 3a90 	vmov	s15, r3
 8005596:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800559a:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800559e:	ee37 7a87 	vadd.f32	s14, s15, s14
 80055a2:	edd7 6a07 	vldr	s13, [r7, #28]
 80055a6:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80055aa:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80055ae:	ee17 2a90 	vmov	r2, s15
 80055b2:	687b      	ldr	r3, [r7, #4]
 80055b4:	609a      	str	r2, [r3, #8]
  {
    PLL2_Clocks->PLL2_P_Frequency = 0U;
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
    PLL2_Clocks->PLL2_R_Frequency = 0U;
  }
}
 80055b6:	e008      	b.n	80055ca <HAL_RCCEx_GetPLL2ClockFreq+0x282>
    PLL2_Clocks->PLL2_P_Frequency = 0U;
 80055b8:	687b      	ldr	r3, [r7, #4]
 80055ba:	2200      	movs	r2, #0
 80055bc:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
 80055be:	687b      	ldr	r3, [r7, #4]
 80055c0:	2200      	movs	r2, #0
 80055c2:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = 0U;
 80055c4:	687b      	ldr	r3, [r7, #4]
 80055c6:	2200      	movs	r2, #0
 80055c8:	609a      	str	r2, [r3, #8]
}
 80055ca:	bf00      	nop
 80055cc:	3724      	adds	r7, #36	; 0x24
 80055ce:	46bd      	mov	sp, r7
 80055d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055d4:	4770      	bx	lr
 80055d6:	bf00      	nop
 80055d8:	58024400 	.word	0x58024400
 80055dc:	03d09000 	.word	0x03d09000
 80055e0:	46000000 	.word	0x46000000
 80055e4:	4c742400 	.word	0x4c742400
 80055e8:	4a742400 	.word	0x4a742400
 80055ec:	4af42400 	.word	0x4af42400

080055f0 <HAL_RCCEx_GetPLL3ClockFreq>:
  *         right PLL3CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL3_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL3ClockFreq(PLL3_ClocksTypeDef *PLL3_Clocks)
{
 80055f0:	b480      	push	{r7}
 80055f2:	b089      	sub	sp, #36	; 0x24
 80055f4:	af00      	add	r7, sp, #0
 80055f6:	6078      	str	r0, [r7, #4]
  float_t fracn3, pll3vco;

  /* PLL3_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL3M) * PLL3N
     PLL3xCLK = PLL3_VCO / PLLxR
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 80055f8:	4ba1      	ldr	r3, [pc, #644]	; (8005880 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80055fa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80055fc:	f003 0303 	and.w	r3, r3, #3
 8005600:	61bb      	str	r3, [r7, #24]
  pll3m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM3) >> 20)  ;
 8005602:	4b9f      	ldr	r3, [pc, #636]	; (8005880 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8005604:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005606:	0d1b      	lsrs	r3, r3, #20
 8005608:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800560c:	617b      	str	r3, [r7, #20]
  pll3fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL3FRACEN) >> RCC_PLLCFGR_PLL3FRACEN_Pos;
 800560e:	4b9c      	ldr	r3, [pc, #624]	; (8005880 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8005610:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005612:	0a1b      	lsrs	r3, r3, #8
 8005614:	f003 0301 	and.w	r3, r3, #1
 8005618:	613b      	str	r3, [r7, #16]
  fracn3 = (float_t)(uint32_t)(pll3fracen * ((RCC->PLL3FRACR & RCC_PLL3FRACR_FRACN3) >> 3));
 800561a:	4b99      	ldr	r3, [pc, #612]	; (8005880 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800561c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800561e:	08db      	lsrs	r3, r3, #3
 8005620:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8005624:	693a      	ldr	r2, [r7, #16]
 8005626:	fb02 f303 	mul.w	r3, r2, r3
 800562a:	ee07 3a90 	vmov	s15, r3
 800562e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005632:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll3m != 0U)
 8005636:	697b      	ldr	r3, [r7, #20]
 8005638:	2b00      	cmp	r3, #0
 800563a:	f000 8111 	beq.w	8005860 <HAL_RCCEx_GetPLL3ClockFreq+0x270>
  {
    switch (pllsource)
 800563e:	69bb      	ldr	r3, [r7, #24]
 8005640:	2b02      	cmp	r3, #2
 8005642:	f000 8083 	beq.w	800574c <HAL_RCCEx_GetPLL3ClockFreq+0x15c>
 8005646:	69bb      	ldr	r3, [r7, #24]
 8005648:	2b02      	cmp	r3, #2
 800564a:	f200 80a1 	bhi.w	8005790 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
 800564e:	69bb      	ldr	r3, [r7, #24]
 8005650:	2b00      	cmp	r3, #0
 8005652:	d003      	beq.n	800565c <HAL_RCCEx_GetPLL3ClockFreq+0x6c>
 8005654:	69bb      	ldr	r3, [r7, #24]
 8005656:	2b01      	cmp	r3, #1
 8005658:	d056      	beq.n	8005708 <HAL_RCCEx_GetPLL3ClockFreq+0x118>
 800565a:	e099      	b.n	8005790 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
    {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800565c:	4b88      	ldr	r3, [pc, #544]	; (8005880 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800565e:	681b      	ldr	r3, [r3, #0]
 8005660:	f003 0320 	and.w	r3, r3, #32
 8005664:	2b00      	cmp	r3, #0
 8005666:	d02d      	beq.n	80056c4 <HAL_RCCEx_GetPLL3ClockFreq+0xd4>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8005668:	4b85      	ldr	r3, [pc, #532]	; (8005880 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800566a:	681b      	ldr	r3, [r3, #0]
 800566c:	08db      	lsrs	r3, r3, #3
 800566e:	f003 0303 	and.w	r3, r3, #3
 8005672:	4a84      	ldr	r2, [pc, #528]	; (8005884 <HAL_RCCEx_GetPLL3ClockFreq+0x294>)
 8005674:	fa22 f303 	lsr.w	r3, r2, r3
 8005678:	60bb      	str	r3, [r7, #8]
          pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 800567a:	68bb      	ldr	r3, [r7, #8]
 800567c:	ee07 3a90 	vmov	s15, r3
 8005680:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005684:	697b      	ldr	r3, [r7, #20]
 8005686:	ee07 3a90 	vmov	s15, r3
 800568a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800568e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005692:	4b7b      	ldr	r3, [pc, #492]	; (8005880 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8005694:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005696:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800569a:	ee07 3a90 	vmov	s15, r3
 800569e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80056a2:	ed97 6a03 	vldr	s12, [r7, #12]
 80056a6:	eddf 5a78 	vldr	s11, [pc, #480]	; 8005888 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 80056aa:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80056ae:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80056b2:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80056b6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80056ba:	ee67 7a27 	vmul.f32	s15, s14, s15
 80056be:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
        }
        break;
 80056c2:	e087      	b.n	80057d4 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
          pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 80056c4:	697b      	ldr	r3, [r7, #20]
 80056c6:	ee07 3a90 	vmov	s15, r3
 80056ca:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80056ce:	eddf 6a6f 	vldr	s13, [pc, #444]	; 800588c <HAL_RCCEx_GetPLL3ClockFreq+0x29c>
 80056d2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80056d6:	4b6a      	ldr	r3, [pc, #424]	; (8005880 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80056d8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80056da:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80056de:	ee07 3a90 	vmov	s15, r3
 80056e2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80056e6:	ed97 6a03 	vldr	s12, [r7, #12]
 80056ea:	eddf 5a67 	vldr	s11, [pc, #412]	; 8005888 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 80056ee:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80056f2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80056f6:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80056fa:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80056fe:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005702:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8005706:	e065      	b.n	80057d4 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8005708:	697b      	ldr	r3, [r7, #20]
 800570a:	ee07 3a90 	vmov	s15, r3
 800570e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005712:	eddf 6a5f 	vldr	s13, [pc, #380]	; 8005890 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 8005716:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800571a:	4b59      	ldr	r3, [pc, #356]	; (8005880 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800571c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800571e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005722:	ee07 3a90 	vmov	s15, r3
 8005726:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800572a:	ed97 6a03 	vldr	s12, [r7, #12]
 800572e:	eddf 5a56 	vldr	s11, [pc, #344]	; 8005888 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8005732:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8005736:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800573a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800573e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8005742:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005746:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800574a:	e043      	b.n	80057d4 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 800574c:	697b      	ldr	r3, [r7, #20]
 800574e:	ee07 3a90 	vmov	s15, r3
 8005752:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005756:	eddf 6a4f 	vldr	s13, [pc, #316]	; 8005894 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>
 800575a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800575e:	4b48      	ldr	r3, [pc, #288]	; (8005880 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8005760:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005762:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005766:	ee07 3a90 	vmov	s15, r3
 800576a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800576e:	ed97 6a03 	vldr	s12, [r7, #12]
 8005772:	eddf 5a45 	vldr	s11, [pc, #276]	; 8005888 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8005776:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800577a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800577e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8005782:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8005786:	ee67 7a27 	vmul.f32	s15, s14, s15
 800578a:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800578e:	e021      	b.n	80057d4 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

      default:
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8005790:	697b      	ldr	r3, [r7, #20]
 8005792:	ee07 3a90 	vmov	s15, r3
 8005796:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800579a:	eddf 6a3d 	vldr	s13, [pc, #244]	; 8005890 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 800579e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80057a2:	4b37      	ldr	r3, [pc, #220]	; (8005880 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80057a4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80057a6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80057aa:	ee07 3a90 	vmov	s15, r3
 80057ae:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80057b2:	ed97 6a03 	vldr	s12, [r7, #12]
 80057b6:	eddf 5a34 	vldr	s11, [pc, #208]	; 8005888 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 80057ba:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80057be:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80057c2:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80057c6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80057ca:	ee67 7a27 	vmul.f32	s15, s14, s15
 80057ce:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80057d2:	bf00      	nop
    }
    PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_P3) >> 9)  + (float_t)1)) ;
 80057d4:	4b2a      	ldr	r3, [pc, #168]	; (8005880 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80057d6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80057d8:	0a5b      	lsrs	r3, r3, #9
 80057da:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80057de:	ee07 3a90 	vmov	s15, r3
 80057e2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80057e6:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80057ea:	ee37 7a87 	vadd.f32	s14, s15, s14
 80057ee:	edd7 6a07 	vldr	s13, [r7, #28]
 80057f2:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80057f6:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80057fa:	ee17 2a90 	vmov	r2, s15
 80057fe:	687b      	ldr	r3, [r7, #4]
 8005800:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_Q3) >> 16) + (float_t)1)) ;
 8005802:	4b1f      	ldr	r3, [pc, #124]	; (8005880 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8005804:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005806:	0c1b      	lsrs	r3, r3, #16
 8005808:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800580c:	ee07 3a90 	vmov	s15, r3
 8005810:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005814:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8005818:	ee37 7a87 	vadd.f32	s14, s15, s14
 800581c:	edd7 6a07 	vldr	s13, [r7, #28]
 8005820:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8005824:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8005828:	ee17 2a90 	vmov	r2, s15
 800582c:	687b      	ldr	r3, [r7, #4]
 800582e:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_R3) >> 24) + (float_t)1)) ;
 8005830:	4b13      	ldr	r3, [pc, #76]	; (8005880 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8005832:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005834:	0e1b      	lsrs	r3, r3, #24
 8005836:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800583a:	ee07 3a90 	vmov	s15, r3
 800583e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005842:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8005846:	ee37 7a87 	vadd.f32	s14, s15, s14
 800584a:	edd7 6a07 	vldr	s13, [r7, #28]
 800584e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8005852:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8005856:	ee17 2a90 	vmov	r2, s15
 800585a:	687b      	ldr	r3, [r7, #4]
 800585c:	609a      	str	r2, [r3, #8]
    PLL3_Clocks->PLL3_P_Frequency = 0U;
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
    PLL3_Clocks->PLL3_R_Frequency = 0U;
  }

}
 800585e:	e008      	b.n	8005872 <HAL_RCCEx_GetPLL3ClockFreq+0x282>
    PLL3_Clocks->PLL3_P_Frequency = 0U;
 8005860:	687b      	ldr	r3, [r7, #4]
 8005862:	2200      	movs	r2, #0
 8005864:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
 8005866:	687b      	ldr	r3, [r7, #4]
 8005868:	2200      	movs	r2, #0
 800586a:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = 0U;
 800586c:	687b      	ldr	r3, [r7, #4]
 800586e:	2200      	movs	r2, #0
 8005870:	609a      	str	r2, [r3, #8]
}
 8005872:	bf00      	nop
 8005874:	3724      	adds	r7, #36	; 0x24
 8005876:	46bd      	mov	sp, r7
 8005878:	f85d 7b04 	ldr.w	r7, [sp], #4
 800587c:	4770      	bx	lr
 800587e:	bf00      	nop
 8005880:	58024400 	.word	0x58024400
 8005884:	03d09000 	.word	0x03d09000
 8005888:	46000000 	.word	0x46000000
 800588c:	4c742400 	.word	0x4c742400
 8005890:	4a742400 	.word	0x4a742400
 8005894:	4af42400 	.word	0x4af42400

08005898 <HAL_RCCEx_CRSConfig>:
  * @brief  Start automatic synchronization for polling mode
  * @param  pInit Pointer on RCC_CRSInitTypeDef structure
  * @retval None
  */
void HAL_RCCEx_CRSConfig(RCC_CRSInitTypeDef *pInit)
{
 8005898:	b580      	push	{r7, lr}
 800589a:	b084      	sub	sp, #16
 800589c:	af00      	add	r7, sp, #0
 800589e:	6078      	str	r0, [r7, #4]
  assert_param(IS_RCC_CRS_HSI48CALIBRATION(pInit->HSI48CalibrationValue));

  /* CONFIGURATION */

  /* Before configuration, reset CRS registers to their default values*/
  __HAL_RCC_CRS_FORCE_RESET();
 80058a0:	4b26      	ldr	r3, [pc, #152]	; (800593c <HAL_RCCEx_CRSConfig+0xa4>)
 80058a2:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80058a6:	4a25      	ldr	r2, [pc, #148]	; (800593c <HAL_RCCEx_CRSConfig+0xa4>)
 80058a8:	f043 0302 	orr.w	r3, r3, #2
 80058ac:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
  __HAL_RCC_CRS_RELEASE_RESET();
 80058b0:	4b22      	ldr	r3, [pc, #136]	; (800593c <HAL_RCCEx_CRSConfig+0xa4>)
 80058b2:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80058b6:	4a21      	ldr	r2, [pc, #132]	; (800593c <HAL_RCCEx_CRSConfig+0xa4>)
 80058b8:	f023 0302 	bic.w	r3, r3, #2
 80058bc:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

  /* Set the SYNCDIV[2:0] bits according to Pre-scaler value */
  /* Set the SYNCSRC[1:0] bits according to Source value */
  /* Set the SYNCSPOL bit according to Polarity value */
  if ((HAL_GetREVID() <= REV_ID_Y) && (pInit->Source == RCC_CRS_SYNC_SOURCE_USB2))
 80058c0:	f7fc f924 	bl	8001b0c <HAL_GetREVID>
 80058c4:	4603      	mov	r3, r0
 80058c6:	f241 0203 	movw	r2, #4099	; 0x1003
 80058ca:	4293      	cmp	r3, r2
 80058cc:	d80b      	bhi.n	80058e6 <HAL_RCCEx_CRSConfig+0x4e>
 80058ce:	687b      	ldr	r3, [r7, #4]
 80058d0:	685b      	ldr	r3, [r3, #4]
 80058d2:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 80058d6:	d106      	bne.n	80058e6 <HAL_RCCEx_CRSConfig+0x4e>
  {
    /* Use Rev.Y value of USB2 */
    value = (pInit->Prescaler | RCC_CRS_SYNC_SOURCE_PIN | pInit->Polarity);
 80058d8:	687b      	ldr	r3, [r7, #4]
 80058da:	681a      	ldr	r2, [r3, #0]
 80058dc:	687b      	ldr	r3, [r7, #4]
 80058de:	689b      	ldr	r3, [r3, #8]
 80058e0:	4313      	orrs	r3, r2
 80058e2:	60fb      	str	r3, [r7, #12]
 80058e4:	e008      	b.n	80058f8 <HAL_RCCEx_CRSConfig+0x60>
  }
  else
  {
    value = (pInit->Prescaler | pInit->Source | pInit->Polarity);
 80058e6:	687b      	ldr	r3, [r7, #4]
 80058e8:	681a      	ldr	r2, [r3, #0]
 80058ea:	687b      	ldr	r3, [r7, #4]
 80058ec:	685b      	ldr	r3, [r3, #4]
 80058ee:	431a      	orrs	r2, r3
 80058f0:	687b      	ldr	r3, [r7, #4]
 80058f2:	689b      	ldr	r3, [r3, #8]
 80058f4:	4313      	orrs	r3, r2
 80058f6:	60fb      	str	r3, [r7, #12]
  }
  /* Set the RELOAD[15:0] bits according to ReloadValue value */
  value |= pInit->ReloadValue;
 80058f8:	687b      	ldr	r3, [r7, #4]
 80058fa:	68db      	ldr	r3, [r3, #12]
 80058fc:	68fa      	ldr	r2, [r7, #12]
 80058fe:	4313      	orrs	r3, r2
 8005900:	60fb      	str	r3, [r7, #12]
  /* Set the FELIM[7:0] bits according to ErrorLimitValue value */
  value |= (pInit->ErrorLimitValue << CRS_CFGR_FELIM_Pos);
 8005902:	687b      	ldr	r3, [r7, #4]
 8005904:	691b      	ldr	r3, [r3, #16]
 8005906:	041b      	lsls	r3, r3, #16
 8005908:	68fa      	ldr	r2, [r7, #12]
 800590a:	4313      	orrs	r3, r2
 800590c:	60fb      	str	r3, [r7, #12]
  WRITE_REG(CRS->CFGR, value);
 800590e:	4a0c      	ldr	r2, [pc, #48]	; (8005940 <HAL_RCCEx_CRSConfig+0xa8>)
 8005910:	68fb      	ldr	r3, [r7, #12]
 8005912:	6053      	str	r3, [r2, #4]

  /* Adjust HSI48 oscillator smooth trimming */
  /* Set the TRIM[5:0] bits according to RCC_CRS_HSI48CalibrationValue value */
  MODIFY_REG(CRS->CR, CRS_CR_TRIM, (pInit->HSI48CalibrationValue << CRS_CR_TRIM_Pos));
 8005914:	4b0a      	ldr	r3, [pc, #40]	; (8005940 <HAL_RCCEx_CRSConfig+0xa8>)
 8005916:	681b      	ldr	r3, [r3, #0]
 8005918:	f423 527c 	bic.w	r2, r3, #16128	; 0x3f00
 800591c:	687b      	ldr	r3, [r7, #4]
 800591e:	695b      	ldr	r3, [r3, #20]
 8005920:	021b      	lsls	r3, r3, #8
 8005922:	4907      	ldr	r1, [pc, #28]	; (8005940 <HAL_RCCEx_CRSConfig+0xa8>)
 8005924:	4313      	orrs	r3, r2
 8005926:	600b      	str	r3, [r1, #0]

  /* START AUTOMATIC SYNCHRONIZATION*/

  /* Enable Automatic trimming & Frequency error counter */
  SET_BIT(CRS->CR, CRS_CR_AUTOTRIMEN | CRS_CR_CEN);
 8005928:	4b05      	ldr	r3, [pc, #20]	; (8005940 <HAL_RCCEx_CRSConfig+0xa8>)
 800592a:	681b      	ldr	r3, [r3, #0]
 800592c:	4a04      	ldr	r2, [pc, #16]	; (8005940 <HAL_RCCEx_CRSConfig+0xa8>)
 800592e:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 8005932:	6013      	str	r3, [r2, #0]
}
 8005934:	bf00      	nop
 8005936:	3710      	adds	r7, #16
 8005938:	46bd      	mov	sp, r7
 800593a:	bd80      	pop	{r7, pc}
 800593c:	58024400 	.word	0x58024400
 8005940:	40008400 	.word	0x40008400

08005944 <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(RCC_PLL2InitTypeDef *pll2, uint32_t Divider)
{
 8005944:	b580      	push	{r7, lr}
 8005946:	b084      	sub	sp, #16
 8005948:	af00      	add	r7, sp, #0
 800594a:	6078      	str	r0, [r7, #4]
 800594c:	6039      	str	r1, [r7, #0]

  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800594e:	2300      	movs	r3, #0
 8005950:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL2RGE_VALUE(pll2->PLL2RGE));
  assert_param(IS_RCC_PLL2VCO_VALUE(pll2->PLL2VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll2->PLL2FRACN));

  /* Check that PLL2 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8005952:	4b53      	ldr	r3, [pc, #332]	; (8005aa0 <RCCEx_PLL2_Config+0x15c>)
 8005954:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005956:	f003 0303 	and.w	r3, r3, #3
 800595a:	2b03      	cmp	r3, #3
 800595c:	d101      	bne.n	8005962 <RCCEx_PLL2_Config+0x1e>
  {
    return HAL_ERROR;
 800595e:	2301      	movs	r3, #1
 8005960:	e099      	b.n	8005a96 <RCCEx_PLL2_Config+0x152>


  else
  {
    /* Disable  PLL2. */
    __HAL_RCC_PLL2_DISABLE();
 8005962:	4b4f      	ldr	r3, [pc, #316]	; (8005aa0 <RCCEx_PLL2_Config+0x15c>)
 8005964:	681b      	ldr	r3, [r3, #0]
 8005966:	4a4e      	ldr	r2, [pc, #312]	; (8005aa0 <RCCEx_PLL2_Config+0x15c>)
 8005968:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 800596c:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800596e:	f7fc f89d 	bl	8001aac <HAL_GetTick>
 8005972:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL is disabled */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8005974:	e008      	b.n	8005988 <RCCEx_PLL2_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 8005976:	f7fc f899 	bl	8001aac <HAL_GetTick>
 800597a:	4602      	mov	r2, r0
 800597c:	68bb      	ldr	r3, [r7, #8]
 800597e:	1ad3      	subs	r3, r2, r3
 8005980:	2b02      	cmp	r3, #2
 8005982:	d901      	bls.n	8005988 <RCCEx_PLL2_Config+0x44>
      {
        return HAL_TIMEOUT;
 8005984:	2303      	movs	r3, #3
 8005986:	e086      	b.n	8005a96 <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8005988:	4b45      	ldr	r3, [pc, #276]	; (8005aa0 <RCCEx_PLL2_Config+0x15c>)
 800598a:	681b      	ldr	r3, [r3, #0]
 800598c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8005990:	2b00      	cmp	r3, #0
 8005992:	d1f0      	bne.n	8005976 <RCCEx_PLL2_Config+0x32>
      }
    }

    /* Configure PLL2 multiplication and division factors. */
    __HAL_RCC_PLL2_CONFIG(pll2->PLL2M,
 8005994:	4b42      	ldr	r3, [pc, #264]	; (8005aa0 <RCCEx_PLL2_Config+0x15c>)
 8005996:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005998:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 800599c:	687b      	ldr	r3, [r7, #4]
 800599e:	681b      	ldr	r3, [r3, #0]
 80059a0:	031b      	lsls	r3, r3, #12
 80059a2:	493f      	ldr	r1, [pc, #252]	; (8005aa0 <RCCEx_PLL2_Config+0x15c>)
 80059a4:	4313      	orrs	r3, r2
 80059a6:	628b      	str	r3, [r1, #40]	; 0x28
 80059a8:	687b      	ldr	r3, [r7, #4]
 80059aa:	685b      	ldr	r3, [r3, #4]
 80059ac:	3b01      	subs	r3, #1
 80059ae:	f3c3 0208 	ubfx	r2, r3, #0, #9
 80059b2:	687b      	ldr	r3, [r7, #4]
 80059b4:	689b      	ldr	r3, [r3, #8]
 80059b6:	3b01      	subs	r3, #1
 80059b8:	025b      	lsls	r3, r3, #9
 80059ba:	b29b      	uxth	r3, r3
 80059bc:	431a      	orrs	r2, r3
 80059be:	687b      	ldr	r3, [r7, #4]
 80059c0:	68db      	ldr	r3, [r3, #12]
 80059c2:	3b01      	subs	r3, #1
 80059c4:	041b      	lsls	r3, r3, #16
 80059c6:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 80059ca:	431a      	orrs	r2, r3
 80059cc:	687b      	ldr	r3, [r7, #4]
 80059ce:	691b      	ldr	r3, [r3, #16]
 80059d0:	3b01      	subs	r3, #1
 80059d2:	061b      	lsls	r3, r3, #24
 80059d4:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 80059d8:	4931      	ldr	r1, [pc, #196]	; (8005aa0 <RCCEx_PLL2_Config+0x15c>)
 80059da:	4313      	orrs	r3, r2
 80059dc:	638b      	str	r3, [r1, #56]	; 0x38
                          pll2->PLL2P,
                          pll2->PLL2Q,
                          pll2->PLL2R);

    /* Select PLL2 input reference frequency range: VCI */
    __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE) ;
 80059de:	4b30      	ldr	r3, [pc, #192]	; (8005aa0 <RCCEx_PLL2_Config+0x15c>)
 80059e0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80059e2:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 80059e6:	687b      	ldr	r3, [r7, #4]
 80059e8:	695b      	ldr	r3, [r3, #20]
 80059ea:	492d      	ldr	r1, [pc, #180]	; (8005aa0 <RCCEx_PLL2_Config+0x15c>)
 80059ec:	4313      	orrs	r3, r2
 80059ee:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL2 output frequency range : VCO */
    __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL) ;
 80059f0:	4b2b      	ldr	r3, [pc, #172]	; (8005aa0 <RCCEx_PLL2_Config+0x15c>)
 80059f2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80059f4:	f023 0220 	bic.w	r2, r3, #32
 80059f8:	687b      	ldr	r3, [r7, #4]
 80059fa:	699b      	ldr	r3, [r3, #24]
 80059fc:	4928      	ldr	r1, [pc, #160]	; (8005aa0 <RCCEx_PLL2_Config+0x15c>)
 80059fe:	4313      	orrs	r3, r2
 8005a00:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_DISABLE();
 8005a02:	4b27      	ldr	r3, [pc, #156]	; (8005aa0 <RCCEx_PLL2_Config+0x15c>)
 8005a04:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005a06:	4a26      	ldr	r2, [pc, #152]	; (8005aa0 <RCCEx_PLL2_Config+0x15c>)
 8005a08:	f023 0310 	bic.w	r3, r3, #16
 8005a0c:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 8005a0e:	4b24      	ldr	r3, [pc, #144]	; (8005aa0 <RCCEx_PLL2_Config+0x15c>)
 8005a10:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8005a12:	4b24      	ldr	r3, [pc, #144]	; (8005aa4 <RCCEx_PLL2_Config+0x160>)
 8005a14:	4013      	ands	r3, r2
 8005a16:	687a      	ldr	r2, [r7, #4]
 8005a18:	69d2      	ldr	r2, [r2, #28]
 8005a1a:	00d2      	lsls	r2, r2, #3
 8005a1c:	4920      	ldr	r1, [pc, #128]	; (8005aa0 <RCCEx_PLL2_Config+0x15c>)
 8005a1e:	4313      	orrs	r3, r2
 8005a20:	63cb      	str	r3, [r1, #60]	; 0x3c

    /* Enable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_ENABLE();
 8005a22:	4b1f      	ldr	r3, [pc, #124]	; (8005aa0 <RCCEx_PLL2_Config+0x15c>)
 8005a24:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005a26:	4a1e      	ldr	r2, [pc, #120]	; (8005aa0 <RCCEx_PLL2_Config+0x15c>)
 8005a28:	f043 0310 	orr.w	r3, r3, #16
 8005a2c:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL2 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 8005a2e:	683b      	ldr	r3, [r7, #0]
 8005a30:	2b00      	cmp	r3, #0
 8005a32:	d106      	bne.n	8005a42 <RCCEx_PLL2_Config+0xfe>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 8005a34:	4b1a      	ldr	r3, [pc, #104]	; (8005aa0 <RCCEx_PLL2_Config+0x15c>)
 8005a36:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005a38:	4a19      	ldr	r2, [pc, #100]	; (8005aa0 <RCCEx_PLL2_Config+0x15c>)
 8005a3a:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8005a3e:	62d3      	str	r3, [r2, #44]	; 0x2c
 8005a40:	e00f      	b.n	8005a62 <RCCEx_PLL2_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 8005a42:	683b      	ldr	r3, [r7, #0]
 8005a44:	2b01      	cmp	r3, #1
 8005a46:	d106      	bne.n	8005a56 <RCCEx_PLL2_Config+0x112>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVQ);
 8005a48:	4b15      	ldr	r3, [pc, #84]	; (8005aa0 <RCCEx_PLL2_Config+0x15c>)
 8005a4a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005a4c:	4a14      	ldr	r2, [pc, #80]	; (8005aa0 <RCCEx_PLL2_Config+0x15c>)
 8005a4e:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8005a52:	62d3      	str	r3, [r2, #44]	; 0x2c
 8005a54:	e005      	b.n	8005a62 <RCCEx_PLL2_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVR);
 8005a56:	4b12      	ldr	r3, [pc, #72]	; (8005aa0 <RCCEx_PLL2_Config+0x15c>)
 8005a58:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005a5a:	4a11      	ldr	r2, [pc, #68]	; (8005aa0 <RCCEx_PLL2_Config+0x15c>)
 8005a5c:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8005a60:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL2. */
    __HAL_RCC_PLL2_ENABLE();
 8005a62:	4b0f      	ldr	r3, [pc, #60]	; (8005aa0 <RCCEx_PLL2_Config+0x15c>)
 8005a64:	681b      	ldr	r3, [r3, #0]
 8005a66:	4a0e      	ldr	r2, [pc, #56]	; (8005aa0 <RCCEx_PLL2_Config+0x15c>)
 8005a68:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8005a6c:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8005a6e:	f7fc f81d 	bl	8001aac <HAL_GetTick>
 8005a72:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL2 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8005a74:	e008      	b.n	8005a88 <RCCEx_PLL2_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 8005a76:	f7fc f819 	bl	8001aac <HAL_GetTick>
 8005a7a:	4602      	mov	r2, r0
 8005a7c:	68bb      	ldr	r3, [r7, #8]
 8005a7e:	1ad3      	subs	r3, r2, r3
 8005a80:	2b02      	cmp	r3, #2
 8005a82:	d901      	bls.n	8005a88 <RCCEx_PLL2_Config+0x144>
      {
        return HAL_TIMEOUT;
 8005a84:	2303      	movs	r3, #3
 8005a86:	e006      	b.n	8005a96 <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8005a88:	4b05      	ldr	r3, [pc, #20]	; (8005aa0 <RCCEx_PLL2_Config+0x15c>)
 8005a8a:	681b      	ldr	r3, [r3, #0]
 8005a8c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8005a90:	2b00      	cmp	r3, #0
 8005a92:	d0f0      	beq.n	8005a76 <RCCEx_PLL2_Config+0x132>
    }

  }


  return status;
 8005a94:	7bfb      	ldrb	r3, [r7, #15]
}
 8005a96:	4618      	mov	r0, r3
 8005a98:	3710      	adds	r7, #16
 8005a9a:	46bd      	mov	sp, r7
 8005a9c:	bd80      	pop	{r7, pc}
 8005a9e:	bf00      	nop
 8005aa0:	58024400 	.word	0x58024400
 8005aa4:	ffff0007 	.word	0xffff0007

08005aa8 <RCCEx_PLL3_Config>:
  * @note   PLL3 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(RCC_PLL3InitTypeDef *pll3, uint32_t Divider)
{
 8005aa8:	b580      	push	{r7, lr}
 8005aaa:	b084      	sub	sp, #16
 8005aac:	af00      	add	r7, sp, #0
 8005aae:	6078      	str	r0, [r7, #4]
 8005ab0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8005ab2:	2300      	movs	r3, #0
 8005ab4:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL3RGE_VALUE(pll3->PLL3RGE));
  assert_param(IS_RCC_PLL3VCO_VALUE(pll3->PLL3VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll3->PLL3FRACN));

  /* Check that PLL3 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8005ab6:	4b53      	ldr	r3, [pc, #332]	; (8005c04 <RCCEx_PLL3_Config+0x15c>)
 8005ab8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005aba:	f003 0303 	and.w	r3, r3, #3
 8005abe:	2b03      	cmp	r3, #3
 8005ac0:	d101      	bne.n	8005ac6 <RCCEx_PLL3_Config+0x1e>
  {
    return HAL_ERROR;
 8005ac2:	2301      	movs	r3, #1
 8005ac4:	e099      	b.n	8005bfa <RCCEx_PLL3_Config+0x152>


  else
  {
    /* Disable  PLL3. */
    __HAL_RCC_PLL3_DISABLE();
 8005ac6:	4b4f      	ldr	r3, [pc, #316]	; (8005c04 <RCCEx_PLL3_Config+0x15c>)
 8005ac8:	681b      	ldr	r3, [r3, #0]
 8005aca:	4a4e      	ldr	r2, [pc, #312]	; (8005c04 <RCCEx_PLL3_Config+0x15c>)
 8005acc:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8005ad0:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8005ad2:	f7fb ffeb 	bl	8001aac <HAL_GetTick>
 8005ad6:	60b8      	str	r0, [r7, #8]
    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8005ad8:	e008      	b.n	8005aec <RCCEx_PLL3_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 8005ada:	f7fb ffe7 	bl	8001aac <HAL_GetTick>
 8005ade:	4602      	mov	r2, r0
 8005ae0:	68bb      	ldr	r3, [r7, #8]
 8005ae2:	1ad3      	subs	r3, r2, r3
 8005ae4:	2b02      	cmp	r3, #2
 8005ae6:	d901      	bls.n	8005aec <RCCEx_PLL3_Config+0x44>
      {
        return HAL_TIMEOUT;
 8005ae8:	2303      	movs	r3, #3
 8005aea:	e086      	b.n	8005bfa <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8005aec:	4b45      	ldr	r3, [pc, #276]	; (8005c04 <RCCEx_PLL3_Config+0x15c>)
 8005aee:	681b      	ldr	r3, [r3, #0]
 8005af0:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8005af4:	2b00      	cmp	r3, #0
 8005af6:	d1f0      	bne.n	8005ada <RCCEx_PLL3_Config+0x32>
      }
    }

    /* Configure the PLL3  multiplication and division factors. */
    __HAL_RCC_PLL3_CONFIG(pll3->PLL3M,
 8005af8:	4b42      	ldr	r3, [pc, #264]	; (8005c04 <RCCEx_PLL3_Config+0x15c>)
 8005afa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005afc:	f023 727c 	bic.w	r2, r3, #66060288	; 0x3f00000
 8005b00:	687b      	ldr	r3, [r7, #4]
 8005b02:	681b      	ldr	r3, [r3, #0]
 8005b04:	051b      	lsls	r3, r3, #20
 8005b06:	493f      	ldr	r1, [pc, #252]	; (8005c04 <RCCEx_PLL3_Config+0x15c>)
 8005b08:	4313      	orrs	r3, r2
 8005b0a:	628b      	str	r3, [r1, #40]	; 0x28
 8005b0c:	687b      	ldr	r3, [r7, #4]
 8005b0e:	685b      	ldr	r3, [r3, #4]
 8005b10:	3b01      	subs	r3, #1
 8005b12:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8005b16:	687b      	ldr	r3, [r7, #4]
 8005b18:	689b      	ldr	r3, [r3, #8]
 8005b1a:	3b01      	subs	r3, #1
 8005b1c:	025b      	lsls	r3, r3, #9
 8005b1e:	b29b      	uxth	r3, r3
 8005b20:	431a      	orrs	r2, r3
 8005b22:	687b      	ldr	r3, [r7, #4]
 8005b24:	68db      	ldr	r3, [r3, #12]
 8005b26:	3b01      	subs	r3, #1
 8005b28:	041b      	lsls	r3, r3, #16
 8005b2a:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 8005b2e:	431a      	orrs	r2, r3
 8005b30:	687b      	ldr	r3, [r7, #4]
 8005b32:	691b      	ldr	r3, [r3, #16]
 8005b34:	3b01      	subs	r3, #1
 8005b36:	061b      	lsls	r3, r3, #24
 8005b38:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 8005b3c:	4931      	ldr	r1, [pc, #196]	; (8005c04 <RCCEx_PLL3_Config+0x15c>)
 8005b3e:	4313      	orrs	r3, r2
 8005b40:	640b      	str	r3, [r1, #64]	; 0x40
                          pll3->PLL3P,
                          pll3->PLL3Q,
                          pll3->PLL3R);

    /* Select PLL3 input reference frequency range: VCI */
    __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE) ;
 8005b42:	4b30      	ldr	r3, [pc, #192]	; (8005c04 <RCCEx_PLL3_Config+0x15c>)
 8005b44:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005b46:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8005b4a:	687b      	ldr	r3, [r7, #4]
 8005b4c:	695b      	ldr	r3, [r3, #20]
 8005b4e:	492d      	ldr	r1, [pc, #180]	; (8005c04 <RCCEx_PLL3_Config+0x15c>)
 8005b50:	4313      	orrs	r3, r2
 8005b52:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL3 output frequency range : VCO */
    __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL) ;
 8005b54:	4b2b      	ldr	r3, [pc, #172]	; (8005c04 <RCCEx_PLL3_Config+0x15c>)
 8005b56:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005b58:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 8005b5c:	687b      	ldr	r3, [r7, #4]
 8005b5e:	699b      	ldr	r3, [r3, #24]
 8005b60:	4928      	ldr	r1, [pc, #160]	; (8005c04 <RCCEx_PLL3_Config+0x15c>)
 8005b62:	4313      	orrs	r3, r2
 8005b64:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_DISABLE();
 8005b66:	4b27      	ldr	r3, [pc, #156]	; (8005c04 <RCCEx_PLL3_Config+0x15c>)
 8005b68:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005b6a:	4a26      	ldr	r2, [pc, #152]	; (8005c04 <RCCEx_PLL3_Config+0x15c>)
 8005b6c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8005b70:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 8005b72:	4b24      	ldr	r3, [pc, #144]	; (8005c04 <RCCEx_PLL3_Config+0x15c>)
 8005b74:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8005b76:	4b24      	ldr	r3, [pc, #144]	; (8005c08 <RCCEx_PLL3_Config+0x160>)
 8005b78:	4013      	ands	r3, r2
 8005b7a:	687a      	ldr	r2, [r7, #4]
 8005b7c:	69d2      	ldr	r2, [r2, #28]
 8005b7e:	00d2      	lsls	r2, r2, #3
 8005b80:	4920      	ldr	r1, [pc, #128]	; (8005c04 <RCCEx_PLL3_Config+0x15c>)
 8005b82:	4313      	orrs	r3, r2
 8005b84:	644b      	str	r3, [r1, #68]	; 0x44

    /* Enable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_ENABLE();
 8005b86:	4b1f      	ldr	r3, [pc, #124]	; (8005c04 <RCCEx_PLL3_Config+0x15c>)
 8005b88:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005b8a:	4a1e      	ldr	r2, [pc, #120]	; (8005c04 <RCCEx_PLL3_Config+0x15c>)
 8005b8c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005b90:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL3 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 8005b92:	683b      	ldr	r3, [r7, #0]
 8005b94:	2b00      	cmp	r3, #0
 8005b96:	d106      	bne.n	8005ba6 <RCCEx_PLL3_Config+0xfe>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
 8005b98:	4b1a      	ldr	r3, [pc, #104]	; (8005c04 <RCCEx_PLL3_Config+0x15c>)
 8005b9a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005b9c:	4a19      	ldr	r2, [pc, #100]	; (8005c04 <RCCEx_PLL3_Config+0x15c>)
 8005b9e:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8005ba2:	62d3      	str	r3, [r2, #44]	; 0x2c
 8005ba4:	e00f      	b.n	8005bc6 <RCCEx_PLL3_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 8005ba6:	683b      	ldr	r3, [r7, #0]
 8005ba8:	2b01      	cmp	r3, #1
 8005baa:	d106      	bne.n	8005bba <RCCEx_PLL3_Config+0x112>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
 8005bac:	4b15      	ldr	r3, [pc, #84]	; (8005c04 <RCCEx_PLL3_Config+0x15c>)
 8005bae:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005bb0:	4a14      	ldr	r2, [pc, #80]	; (8005c04 <RCCEx_PLL3_Config+0x15c>)
 8005bb2:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8005bb6:	62d3      	str	r3, [r2, #44]	; 0x2c
 8005bb8:	e005      	b.n	8005bc6 <RCCEx_PLL3_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
 8005bba:	4b12      	ldr	r3, [pc, #72]	; (8005c04 <RCCEx_PLL3_Config+0x15c>)
 8005bbc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005bbe:	4a11      	ldr	r2, [pc, #68]	; (8005c04 <RCCEx_PLL3_Config+0x15c>)
 8005bc0:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8005bc4:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL3. */
    __HAL_RCC_PLL3_ENABLE();
 8005bc6:	4b0f      	ldr	r3, [pc, #60]	; (8005c04 <RCCEx_PLL3_Config+0x15c>)
 8005bc8:	681b      	ldr	r3, [r3, #0]
 8005bca:	4a0e      	ldr	r2, [pc, #56]	; (8005c04 <RCCEx_PLL3_Config+0x15c>)
 8005bcc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005bd0:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8005bd2:	f7fb ff6b 	bl	8001aac <HAL_GetTick>
 8005bd6:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8005bd8:	e008      	b.n	8005bec <RCCEx_PLL3_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 8005bda:	f7fb ff67 	bl	8001aac <HAL_GetTick>
 8005bde:	4602      	mov	r2, r0
 8005be0:	68bb      	ldr	r3, [r7, #8]
 8005be2:	1ad3      	subs	r3, r2, r3
 8005be4:	2b02      	cmp	r3, #2
 8005be6:	d901      	bls.n	8005bec <RCCEx_PLL3_Config+0x144>
      {
        return HAL_TIMEOUT;
 8005be8:	2303      	movs	r3, #3
 8005bea:	e006      	b.n	8005bfa <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8005bec:	4b05      	ldr	r3, [pc, #20]	; (8005c04 <RCCEx_PLL3_Config+0x15c>)
 8005bee:	681b      	ldr	r3, [r3, #0]
 8005bf0:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8005bf4:	2b00      	cmp	r3, #0
 8005bf6:	d0f0      	beq.n	8005bda <RCCEx_PLL3_Config+0x132>
    }

  }


  return status;
 8005bf8:	7bfb      	ldrb	r3, [r7, #15]
}
 8005bfa:	4618      	mov	r0, r3
 8005bfc:	3710      	adds	r7, #16
 8005bfe:	46bd      	mov	sp, r7
 8005c00:	bd80      	pop	{r7, pc}
 8005c02:	bf00      	nop
 8005c04:	58024400 	.word	0x58024400
 8005c08:	ffff0007 	.word	0xffff0007

08005c0c <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8005c0c:	b580      	push	{r7, lr}
 8005c0e:	b082      	sub	sp, #8
 8005c10:	af00      	add	r7, sp, #0
 8005c12:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8005c14:	687b      	ldr	r3, [r7, #4]
 8005c16:	2b00      	cmp	r3, #0
 8005c18:	d101      	bne.n	8005c1e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8005c1a:	2301      	movs	r3, #1
 8005c1c:	e042      	b.n	8005ca4 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8005c1e:	687b      	ldr	r3, [r7, #4]
 8005c20:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005c24:	2b00      	cmp	r3, #0
 8005c26:	d106      	bne.n	8005c36 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8005c28:	687b      	ldr	r3, [r7, #4]
 8005c2a:	2200      	movs	r2, #0
 8005c2c:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8005c30:	6878      	ldr	r0, [r7, #4]
 8005c32:	f7fb fc99 	bl	8001568 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8005c36:	687b      	ldr	r3, [r7, #4]
 8005c38:	2224      	movs	r2, #36	; 0x24
 8005c3a:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  __HAL_UART_DISABLE(huart);
 8005c3e:	687b      	ldr	r3, [r7, #4]
 8005c40:	681b      	ldr	r3, [r3, #0]
 8005c42:	681a      	ldr	r2, [r3, #0]
 8005c44:	687b      	ldr	r3, [r7, #4]
 8005c46:	681b      	ldr	r3, [r3, #0]
 8005c48:	f022 0201 	bic.w	r2, r2, #1
 8005c4c:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8005c4e:	6878      	ldr	r0, [r7, #4]
 8005c50:	f000 fc94 	bl	800657c <UART_SetConfig>
 8005c54:	4603      	mov	r3, r0
 8005c56:	2b01      	cmp	r3, #1
 8005c58:	d101      	bne.n	8005c5e <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 8005c5a:	2301      	movs	r3, #1
 8005c5c:	e022      	b.n	8005ca4 <HAL_UART_Init+0x98>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8005c5e:	687b      	ldr	r3, [r7, #4]
 8005c60:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005c62:	2b00      	cmp	r3, #0
 8005c64:	d002      	beq.n	8005c6c <HAL_UART_Init+0x60>
  {
    UART_AdvFeatureConfig(huart);
 8005c66:	6878      	ldr	r0, [r7, #4]
 8005c68:	f001 faf4 	bl	8007254 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8005c6c:	687b      	ldr	r3, [r7, #4]
 8005c6e:	681b      	ldr	r3, [r3, #0]
 8005c70:	685a      	ldr	r2, [r3, #4]
 8005c72:	687b      	ldr	r3, [r7, #4]
 8005c74:	681b      	ldr	r3, [r3, #0]
 8005c76:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8005c7a:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8005c7c:	687b      	ldr	r3, [r7, #4]
 8005c7e:	681b      	ldr	r3, [r3, #0]
 8005c80:	689a      	ldr	r2, [r3, #8]
 8005c82:	687b      	ldr	r3, [r7, #4]
 8005c84:	681b      	ldr	r3, [r3, #0]
 8005c86:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8005c8a:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8005c8c:	687b      	ldr	r3, [r7, #4]
 8005c8e:	681b      	ldr	r3, [r3, #0]
 8005c90:	681a      	ldr	r2, [r3, #0]
 8005c92:	687b      	ldr	r3, [r7, #4]
 8005c94:	681b      	ldr	r3, [r3, #0]
 8005c96:	f042 0201 	orr.w	r2, r2, #1
 8005c9a:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8005c9c:	6878      	ldr	r0, [r7, #4]
 8005c9e:	f001 fb7b 	bl	8007398 <UART_CheckIdleState>
 8005ca2:	4603      	mov	r3, r0
}
 8005ca4:	4618      	mov	r0, r3
 8005ca6:	3708      	adds	r7, #8
 8005ca8:	46bd      	mov	sp, r7
 8005caa:	bd80      	pop	{r7, pc}

08005cac <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8005cac:	b580      	push	{r7, lr}
 8005cae:	b08a      	sub	sp, #40	; 0x28
 8005cb0:	af02      	add	r7, sp, #8
 8005cb2:	60f8      	str	r0, [r7, #12]
 8005cb4:	60b9      	str	r1, [r7, #8]
 8005cb6:	603b      	str	r3, [r7, #0]
 8005cb8:	4613      	mov	r3, r2
 8005cba:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8005cbc:	68fb      	ldr	r3, [r7, #12]
 8005cbe:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005cc2:	2b20      	cmp	r3, #32
 8005cc4:	d17b      	bne.n	8005dbe <HAL_UART_Transmit+0x112>
  {
    if ((pData == NULL) || (Size == 0U))
 8005cc6:	68bb      	ldr	r3, [r7, #8]
 8005cc8:	2b00      	cmp	r3, #0
 8005cca:	d002      	beq.n	8005cd2 <HAL_UART_Transmit+0x26>
 8005ccc:	88fb      	ldrh	r3, [r7, #6]
 8005cce:	2b00      	cmp	r3, #0
 8005cd0:	d101      	bne.n	8005cd6 <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 8005cd2:	2301      	movs	r3, #1
 8005cd4:	e074      	b.n	8005dc0 <HAL_UART_Transmit+0x114>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005cd6:	68fb      	ldr	r3, [r7, #12]
 8005cd8:	2200      	movs	r2, #0
 8005cda:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8005cde:	68fb      	ldr	r3, [r7, #12]
 8005ce0:	2221      	movs	r2, #33	; 0x21
 8005ce2:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8005ce6:	f7fb fee1 	bl	8001aac <HAL_GetTick>
 8005cea:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8005cec:	68fb      	ldr	r3, [r7, #12]
 8005cee:	88fa      	ldrh	r2, [r7, #6]
 8005cf0:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
    huart->TxXferCount = Size;
 8005cf4:	68fb      	ldr	r3, [r7, #12]
 8005cf6:	88fa      	ldrh	r2, [r7, #6]
 8005cf8:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8005cfc:	68fb      	ldr	r3, [r7, #12]
 8005cfe:	689b      	ldr	r3, [r3, #8]
 8005d00:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005d04:	d108      	bne.n	8005d18 <HAL_UART_Transmit+0x6c>
 8005d06:	68fb      	ldr	r3, [r7, #12]
 8005d08:	691b      	ldr	r3, [r3, #16]
 8005d0a:	2b00      	cmp	r3, #0
 8005d0c:	d104      	bne.n	8005d18 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 8005d0e:	2300      	movs	r3, #0
 8005d10:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8005d12:	68bb      	ldr	r3, [r7, #8]
 8005d14:	61bb      	str	r3, [r7, #24]
 8005d16:	e003      	b.n	8005d20 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 8005d18:	68bb      	ldr	r3, [r7, #8]
 8005d1a:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8005d1c:	2300      	movs	r3, #0
 8005d1e:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8005d20:	e030      	b.n	8005d84 <HAL_UART_Transmit+0xd8>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8005d22:	683b      	ldr	r3, [r7, #0]
 8005d24:	9300      	str	r3, [sp, #0]
 8005d26:	697b      	ldr	r3, [r7, #20]
 8005d28:	2200      	movs	r2, #0
 8005d2a:	2180      	movs	r1, #128	; 0x80
 8005d2c:	68f8      	ldr	r0, [r7, #12]
 8005d2e:	f001 fbdd 	bl	80074ec <UART_WaitOnFlagUntilTimeout>
 8005d32:	4603      	mov	r3, r0
 8005d34:	2b00      	cmp	r3, #0
 8005d36:	d005      	beq.n	8005d44 <HAL_UART_Transmit+0x98>
      {

        huart->gState = HAL_UART_STATE_READY;
 8005d38:	68fb      	ldr	r3, [r7, #12]
 8005d3a:	2220      	movs	r2, #32
 8005d3c:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

        return HAL_TIMEOUT;
 8005d40:	2303      	movs	r3, #3
 8005d42:	e03d      	b.n	8005dc0 <HAL_UART_Transmit+0x114>
      }
      if (pdata8bits == NULL)
 8005d44:	69fb      	ldr	r3, [r7, #28]
 8005d46:	2b00      	cmp	r3, #0
 8005d48:	d10b      	bne.n	8005d62 <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8005d4a:	69bb      	ldr	r3, [r7, #24]
 8005d4c:	881b      	ldrh	r3, [r3, #0]
 8005d4e:	461a      	mov	r2, r3
 8005d50:	68fb      	ldr	r3, [r7, #12]
 8005d52:	681b      	ldr	r3, [r3, #0]
 8005d54:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8005d58:	629a      	str	r2, [r3, #40]	; 0x28
        pdata16bits++;
 8005d5a:	69bb      	ldr	r3, [r7, #24]
 8005d5c:	3302      	adds	r3, #2
 8005d5e:	61bb      	str	r3, [r7, #24]
 8005d60:	e007      	b.n	8005d72 <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8005d62:	69fb      	ldr	r3, [r7, #28]
 8005d64:	781a      	ldrb	r2, [r3, #0]
 8005d66:	68fb      	ldr	r3, [r7, #12]
 8005d68:	681b      	ldr	r3, [r3, #0]
 8005d6a:	629a      	str	r2, [r3, #40]	; 0x28
        pdata8bits++;
 8005d6c:	69fb      	ldr	r3, [r7, #28]
 8005d6e:	3301      	adds	r3, #1
 8005d70:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8005d72:	68fb      	ldr	r3, [r7, #12]
 8005d74:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 8005d78:	b29b      	uxth	r3, r3
 8005d7a:	3b01      	subs	r3, #1
 8005d7c:	b29a      	uxth	r2, r3
 8005d7e:	68fb      	ldr	r3, [r7, #12]
 8005d80:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
    while (huart->TxXferCount > 0U)
 8005d84:	68fb      	ldr	r3, [r7, #12]
 8005d86:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 8005d8a:	b29b      	uxth	r3, r3
 8005d8c:	2b00      	cmp	r3, #0
 8005d8e:	d1c8      	bne.n	8005d22 <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8005d90:	683b      	ldr	r3, [r7, #0]
 8005d92:	9300      	str	r3, [sp, #0]
 8005d94:	697b      	ldr	r3, [r7, #20]
 8005d96:	2200      	movs	r2, #0
 8005d98:	2140      	movs	r1, #64	; 0x40
 8005d9a:	68f8      	ldr	r0, [r7, #12]
 8005d9c:	f001 fba6 	bl	80074ec <UART_WaitOnFlagUntilTimeout>
 8005da0:	4603      	mov	r3, r0
 8005da2:	2b00      	cmp	r3, #0
 8005da4:	d005      	beq.n	8005db2 <HAL_UART_Transmit+0x106>
    {
      huart->gState = HAL_UART_STATE_READY;
 8005da6:	68fb      	ldr	r3, [r7, #12]
 8005da8:	2220      	movs	r2, #32
 8005daa:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

      return HAL_TIMEOUT;
 8005dae:	2303      	movs	r3, #3
 8005db0:	e006      	b.n	8005dc0 <HAL_UART_Transmit+0x114>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8005db2:	68fb      	ldr	r3, [r7, #12]
 8005db4:	2220      	movs	r2, #32
 8005db6:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

    return HAL_OK;
 8005dba:	2300      	movs	r3, #0
 8005dbc:	e000      	b.n	8005dc0 <HAL_UART_Transmit+0x114>
  }
  else
  {
    return HAL_BUSY;
 8005dbe:	2302      	movs	r3, #2
  }
}
 8005dc0:	4618      	mov	r0, r3
 8005dc2:	3720      	adds	r7, #32
 8005dc4:	46bd      	mov	sp, r7
 8005dc6:	bd80      	pop	{r7, pc}

08005dc8 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8005dc8:	b580      	push	{r7, lr}
 8005dca:	b0ba      	sub	sp, #232	; 0xe8
 8005dcc:	af00      	add	r7, sp, #0
 8005dce:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8005dd0:	687b      	ldr	r3, [r7, #4]
 8005dd2:	681b      	ldr	r3, [r3, #0]
 8005dd4:	69db      	ldr	r3, [r3, #28]
 8005dd6:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8005dda:	687b      	ldr	r3, [r7, #4]
 8005ddc:	681b      	ldr	r3, [r3, #0]
 8005dde:	681b      	ldr	r3, [r3, #0]
 8005de0:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8005de4:	687b      	ldr	r3, [r7, #4]
 8005de6:	681b      	ldr	r3, [r3, #0]
 8005de8:	689b      	ldr	r3, [r3, #8]
 8005dea:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 8005dee:	f8d7 20e4 	ldr.w	r2, [r7, #228]	; 0xe4
 8005df2:	f640 030f 	movw	r3, #2063	; 0x80f
 8005df6:	4013      	ands	r3, r2
 8005df8:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == 0U)
 8005dfc:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8005e00:	2b00      	cmp	r3, #0
 8005e02:	d11b      	bne.n	8005e3c <HAL_UART_IRQHandler+0x74>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 8005e04:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005e08:	f003 0320 	and.w	r3, r3, #32
 8005e0c:	2b00      	cmp	r3, #0
 8005e0e:	d015      	beq.n	8005e3c <HAL_UART_IRQHandler+0x74>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 8005e10:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005e14:	f003 0320 	and.w	r3, r3, #32
 8005e18:	2b00      	cmp	r3, #0
 8005e1a:	d105      	bne.n	8005e28 <HAL_UART_IRQHandler+0x60>
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 8005e1c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8005e20:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005e24:	2b00      	cmp	r3, #0
 8005e26:	d009      	beq.n	8005e3c <HAL_UART_IRQHandler+0x74>
    {
      if (huart->RxISR != NULL)
 8005e28:	687b      	ldr	r3, [r7, #4]
 8005e2a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005e2c:	2b00      	cmp	r3, #0
 8005e2e:	f000 8377 	beq.w	8006520 <HAL_UART_IRQHandler+0x758>
      {
        huart->RxISR(huart);
 8005e32:	687b      	ldr	r3, [r7, #4]
 8005e34:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005e36:	6878      	ldr	r0, [r7, #4]
 8005e38:	4798      	blx	r3
      }
      return;
 8005e3a:	e371      	b.n	8006520 <HAL_UART_IRQHandler+0x758>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 8005e3c:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8005e40:	2b00      	cmp	r3, #0
 8005e42:	f000 8123 	beq.w	800608c <HAL_UART_IRQHandler+0x2c4>
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
 8005e46:	f8d7 20dc 	ldr.w	r2, [r7, #220]	; 0xdc
 8005e4a:	4b8d      	ldr	r3, [pc, #564]	; (8006080 <HAL_UART_IRQHandler+0x2b8>)
 8005e4c:	4013      	ands	r3, r2
 8005e4e:	2b00      	cmp	r3, #0
 8005e50:	d106      	bne.n	8005e60 <HAL_UART_IRQHandler+0x98>
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
 8005e52:	f8d7 20e0 	ldr.w	r2, [r7, #224]	; 0xe0
 8005e56:	4b8b      	ldr	r3, [pc, #556]	; (8006084 <HAL_UART_IRQHandler+0x2bc>)
 8005e58:	4013      	ands	r3, r2
 8005e5a:	2b00      	cmp	r3, #0
 8005e5c:	f000 8116 	beq.w	800608c <HAL_UART_IRQHandler+0x2c4>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8005e60:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005e64:	f003 0301 	and.w	r3, r3, #1
 8005e68:	2b00      	cmp	r3, #0
 8005e6a:	d011      	beq.n	8005e90 <HAL_UART_IRQHandler+0xc8>
 8005e6c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005e70:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005e74:	2b00      	cmp	r3, #0
 8005e76:	d00b      	beq.n	8005e90 <HAL_UART_IRQHandler+0xc8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8005e78:	687b      	ldr	r3, [r7, #4]
 8005e7a:	681b      	ldr	r3, [r3, #0]
 8005e7c:	2201      	movs	r2, #1
 8005e7e:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8005e80:	687b      	ldr	r3, [r7, #4]
 8005e82:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005e86:	f043 0201 	orr.w	r2, r3, #1
 8005e8a:	687b      	ldr	r3, [r7, #4]
 8005e8c:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8005e90:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005e94:	f003 0302 	and.w	r3, r3, #2
 8005e98:	2b00      	cmp	r3, #0
 8005e9a:	d011      	beq.n	8005ec0 <HAL_UART_IRQHandler+0xf8>
 8005e9c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8005ea0:	f003 0301 	and.w	r3, r3, #1
 8005ea4:	2b00      	cmp	r3, #0
 8005ea6:	d00b      	beq.n	8005ec0 <HAL_UART_IRQHandler+0xf8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8005ea8:	687b      	ldr	r3, [r7, #4]
 8005eaa:	681b      	ldr	r3, [r3, #0]
 8005eac:	2202      	movs	r2, #2
 8005eae:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8005eb0:	687b      	ldr	r3, [r7, #4]
 8005eb2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005eb6:	f043 0204 	orr.w	r2, r3, #4
 8005eba:	687b      	ldr	r3, [r7, #4]
 8005ebc:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8005ec0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005ec4:	f003 0304 	and.w	r3, r3, #4
 8005ec8:	2b00      	cmp	r3, #0
 8005eca:	d011      	beq.n	8005ef0 <HAL_UART_IRQHandler+0x128>
 8005ecc:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8005ed0:	f003 0301 	and.w	r3, r3, #1
 8005ed4:	2b00      	cmp	r3, #0
 8005ed6:	d00b      	beq.n	8005ef0 <HAL_UART_IRQHandler+0x128>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8005ed8:	687b      	ldr	r3, [r7, #4]
 8005eda:	681b      	ldr	r3, [r3, #0]
 8005edc:	2204      	movs	r2, #4
 8005ede:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8005ee0:	687b      	ldr	r3, [r7, #4]
 8005ee2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005ee6:	f043 0202 	orr.w	r2, r3, #2
 8005eea:	687b      	ldr	r3, [r7, #4]
 8005eec:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 8005ef0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005ef4:	f003 0308 	and.w	r3, r3, #8
 8005ef8:	2b00      	cmp	r3, #0
 8005efa:	d017      	beq.n	8005f2c <HAL_UART_IRQHandler+0x164>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 8005efc:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005f00:	f003 0320 	and.w	r3, r3, #32
 8005f04:	2b00      	cmp	r3, #0
 8005f06:	d105      	bne.n	8005f14 <HAL_UART_IRQHandler+0x14c>
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
 8005f08:	f8d7 20dc 	ldr.w	r2, [r7, #220]	; 0xdc
 8005f0c:	4b5c      	ldr	r3, [pc, #368]	; (8006080 <HAL_UART_IRQHandler+0x2b8>)
 8005f0e:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 8005f10:	2b00      	cmp	r3, #0
 8005f12:	d00b      	beq.n	8005f2c <HAL_UART_IRQHandler+0x164>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8005f14:	687b      	ldr	r3, [r7, #4]
 8005f16:	681b      	ldr	r3, [r3, #0]
 8005f18:	2208      	movs	r2, #8
 8005f1a:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8005f1c:	687b      	ldr	r3, [r7, #4]
 8005f1e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005f22:	f043 0208 	orr.w	r2, r3, #8
 8005f26:	687b      	ldr	r3, [r7, #4]
 8005f28:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 8005f2c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005f30:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8005f34:	2b00      	cmp	r3, #0
 8005f36:	d012      	beq.n	8005f5e <HAL_UART_IRQHandler+0x196>
 8005f38:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005f3c:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8005f40:	2b00      	cmp	r3, #0
 8005f42:	d00c      	beq.n	8005f5e <HAL_UART_IRQHandler+0x196>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8005f44:	687b      	ldr	r3, [r7, #4]
 8005f46:	681b      	ldr	r3, [r3, #0]
 8005f48:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8005f4c:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 8005f4e:	687b      	ldr	r3, [r7, #4]
 8005f50:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005f54:	f043 0220 	orr.w	r2, r3, #32
 8005f58:	687b      	ldr	r3, [r7, #4]
 8005f5a:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8005f5e:	687b      	ldr	r3, [r7, #4]
 8005f60:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005f64:	2b00      	cmp	r3, #0
 8005f66:	f000 82dd 	beq.w	8006524 <HAL_UART_IRQHandler+0x75c>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 8005f6a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005f6e:	f003 0320 	and.w	r3, r3, #32
 8005f72:	2b00      	cmp	r3, #0
 8005f74:	d013      	beq.n	8005f9e <HAL_UART_IRQHandler+0x1d6>
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 8005f76:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005f7a:	f003 0320 	and.w	r3, r3, #32
 8005f7e:	2b00      	cmp	r3, #0
 8005f80:	d105      	bne.n	8005f8e <HAL_UART_IRQHandler+0x1c6>
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 8005f82:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8005f86:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005f8a:	2b00      	cmp	r3, #0
 8005f8c:	d007      	beq.n	8005f9e <HAL_UART_IRQHandler+0x1d6>
      {
        if (huart->RxISR != NULL)
 8005f8e:	687b      	ldr	r3, [r7, #4]
 8005f90:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005f92:	2b00      	cmp	r3, #0
 8005f94:	d003      	beq.n	8005f9e <HAL_UART_IRQHandler+0x1d6>
        {
          huart->RxISR(huart);
 8005f96:	687b      	ldr	r3, [r7, #4]
 8005f98:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005f9a:	6878      	ldr	r0, [r7, #4]
 8005f9c:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 8005f9e:	687b      	ldr	r3, [r7, #4]
 8005fa0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005fa4:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8005fa8:	687b      	ldr	r3, [r7, #4]
 8005faa:	681b      	ldr	r3, [r3, #0]
 8005fac:	689b      	ldr	r3, [r3, #8]
 8005fae:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005fb2:	2b40      	cmp	r3, #64	; 0x40
 8005fb4:	d005      	beq.n	8005fc2 <HAL_UART_IRQHandler+0x1fa>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 8005fb6:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8005fba:	f003 0328 	and.w	r3, r3, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8005fbe:	2b00      	cmp	r3, #0
 8005fc0:	d054      	beq.n	800606c <HAL_UART_IRQHandler+0x2a4>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8005fc2:	6878      	ldr	r0, [r7, #4]
 8005fc4:	f001 fafa 	bl	80075bc <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005fc8:	687b      	ldr	r3, [r7, #4]
 8005fca:	681b      	ldr	r3, [r3, #0]
 8005fcc:	689b      	ldr	r3, [r3, #8]
 8005fce:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005fd2:	2b40      	cmp	r3, #64	; 0x40
 8005fd4:	d146      	bne.n	8006064 <HAL_UART_IRQHandler+0x29c>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8005fd6:	687b      	ldr	r3, [r7, #4]
 8005fd8:	681b      	ldr	r3, [r3, #0]
 8005fda:	3308      	adds	r3, #8
 8005fdc:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005fe0:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8005fe4:	e853 3f00 	ldrex	r3, [r3]
 8005fe8:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 8005fec:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8005ff0:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005ff4:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8005ff8:	687b      	ldr	r3, [r7, #4]
 8005ffa:	681b      	ldr	r3, [r3, #0]
 8005ffc:	3308      	adds	r3, #8
 8005ffe:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 8006002:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 8006006:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800600a:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 800600e:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 8006012:	e841 2300 	strex	r3, r2, [r1]
 8006016:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 800601a:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 800601e:	2b00      	cmp	r3, #0
 8006020:	d1d9      	bne.n	8005fd6 <HAL_UART_IRQHandler+0x20e>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8006022:	687b      	ldr	r3, [r7, #4]
 8006024:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8006028:	2b00      	cmp	r3, #0
 800602a:	d017      	beq.n	800605c <HAL_UART_IRQHandler+0x294>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800602c:	687b      	ldr	r3, [r7, #4]
 800602e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8006032:	4a15      	ldr	r2, [pc, #84]	; (8006088 <HAL_UART_IRQHandler+0x2c0>)
 8006034:	651a      	str	r2, [r3, #80]	; 0x50

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8006036:	687b      	ldr	r3, [r7, #4]
 8006038:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800603c:	4618      	mov	r0, r3
 800603e:	f7fc fa1b 	bl	8002478 <HAL_DMA_Abort_IT>
 8006042:	4603      	mov	r3, r0
 8006044:	2b00      	cmp	r3, #0
 8006046:	d019      	beq.n	800607c <HAL_UART_IRQHandler+0x2b4>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8006048:	687b      	ldr	r3, [r7, #4]
 800604a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800604e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006050:	687a      	ldr	r2, [r7, #4]
 8006052:	f8d2 2080 	ldr.w	r2, [r2, #128]	; 0x80
 8006056:	4610      	mov	r0, r2
 8006058:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800605a:	e00f      	b.n	800607c <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 800605c:	6878      	ldr	r0, [r7, #4]
 800605e:	f000 fa77 	bl	8006550 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006062:	e00b      	b.n	800607c <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8006064:	6878      	ldr	r0, [r7, #4]
 8006066:	f000 fa73 	bl	8006550 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800606a:	e007      	b.n	800607c <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 800606c:	6878      	ldr	r0, [r7, #4]
 800606e:	f000 fa6f 	bl	8006550 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006072:	687b      	ldr	r3, [r7, #4]
 8006074:	2200      	movs	r2, #0
 8006076:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
      }
    }
    return;
 800607a:	e253      	b.n	8006524 <HAL_UART_IRQHandler+0x75c>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800607c:	bf00      	nop
    return;
 800607e:	e251      	b.n	8006524 <HAL_UART_IRQHandler+0x75c>
 8006080:	10000001 	.word	0x10000001
 8006084:	04000120 	.word	0x04000120
 8006088:	08007689 	.word	0x08007689

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800608c:	687b      	ldr	r3, [r7, #4]
 800608e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8006090:	2b01      	cmp	r3, #1
 8006092:	f040 81e7 	bne.w	8006464 <HAL_UART_IRQHandler+0x69c>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 8006096:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800609a:	f003 0310 	and.w	r3, r3, #16
 800609e:	2b00      	cmp	r3, #0
 80060a0:	f000 81e0 	beq.w	8006464 <HAL_UART_IRQHandler+0x69c>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 80060a4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80060a8:	f003 0310 	and.w	r3, r3, #16
 80060ac:	2b00      	cmp	r3, #0
 80060ae:	f000 81d9 	beq.w	8006464 <HAL_UART_IRQHandler+0x69c>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 80060b2:	687b      	ldr	r3, [r7, #4]
 80060b4:	681b      	ldr	r3, [r3, #0]
 80060b6:	2210      	movs	r2, #16
 80060b8:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80060ba:	687b      	ldr	r3, [r7, #4]
 80060bc:	681b      	ldr	r3, [r3, #0]
 80060be:	689b      	ldr	r3, [r3, #8]
 80060c0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80060c4:	2b40      	cmp	r3, #64	; 0x40
 80060c6:	f040 8151 	bne.w	800636c <HAL_UART_IRQHandler+0x5a4>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 80060ca:	687b      	ldr	r3, [r7, #4]
 80060cc:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80060d0:	681b      	ldr	r3, [r3, #0]
 80060d2:	4a96      	ldr	r2, [pc, #600]	; (800632c <HAL_UART_IRQHandler+0x564>)
 80060d4:	4293      	cmp	r3, r2
 80060d6:	d068      	beq.n	80061aa <HAL_UART_IRQHandler+0x3e2>
 80060d8:	687b      	ldr	r3, [r7, #4]
 80060da:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80060de:	681b      	ldr	r3, [r3, #0]
 80060e0:	4a93      	ldr	r2, [pc, #588]	; (8006330 <HAL_UART_IRQHandler+0x568>)
 80060e2:	4293      	cmp	r3, r2
 80060e4:	d061      	beq.n	80061aa <HAL_UART_IRQHandler+0x3e2>
 80060e6:	687b      	ldr	r3, [r7, #4]
 80060e8:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80060ec:	681b      	ldr	r3, [r3, #0]
 80060ee:	4a91      	ldr	r2, [pc, #580]	; (8006334 <HAL_UART_IRQHandler+0x56c>)
 80060f0:	4293      	cmp	r3, r2
 80060f2:	d05a      	beq.n	80061aa <HAL_UART_IRQHandler+0x3e2>
 80060f4:	687b      	ldr	r3, [r7, #4]
 80060f6:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80060fa:	681b      	ldr	r3, [r3, #0]
 80060fc:	4a8e      	ldr	r2, [pc, #568]	; (8006338 <HAL_UART_IRQHandler+0x570>)
 80060fe:	4293      	cmp	r3, r2
 8006100:	d053      	beq.n	80061aa <HAL_UART_IRQHandler+0x3e2>
 8006102:	687b      	ldr	r3, [r7, #4]
 8006104:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8006108:	681b      	ldr	r3, [r3, #0]
 800610a:	4a8c      	ldr	r2, [pc, #560]	; (800633c <HAL_UART_IRQHandler+0x574>)
 800610c:	4293      	cmp	r3, r2
 800610e:	d04c      	beq.n	80061aa <HAL_UART_IRQHandler+0x3e2>
 8006110:	687b      	ldr	r3, [r7, #4]
 8006112:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8006116:	681b      	ldr	r3, [r3, #0]
 8006118:	4a89      	ldr	r2, [pc, #548]	; (8006340 <HAL_UART_IRQHandler+0x578>)
 800611a:	4293      	cmp	r3, r2
 800611c:	d045      	beq.n	80061aa <HAL_UART_IRQHandler+0x3e2>
 800611e:	687b      	ldr	r3, [r7, #4]
 8006120:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8006124:	681b      	ldr	r3, [r3, #0]
 8006126:	4a87      	ldr	r2, [pc, #540]	; (8006344 <HAL_UART_IRQHandler+0x57c>)
 8006128:	4293      	cmp	r3, r2
 800612a:	d03e      	beq.n	80061aa <HAL_UART_IRQHandler+0x3e2>
 800612c:	687b      	ldr	r3, [r7, #4]
 800612e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8006132:	681b      	ldr	r3, [r3, #0]
 8006134:	4a84      	ldr	r2, [pc, #528]	; (8006348 <HAL_UART_IRQHandler+0x580>)
 8006136:	4293      	cmp	r3, r2
 8006138:	d037      	beq.n	80061aa <HAL_UART_IRQHandler+0x3e2>
 800613a:	687b      	ldr	r3, [r7, #4]
 800613c:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8006140:	681b      	ldr	r3, [r3, #0]
 8006142:	4a82      	ldr	r2, [pc, #520]	; (800634c <HAL_UART_IRQHandler+0x584>)
 8006144:	4293      	cmp	r3, r2
 8006146:	d030      	beq.n	80061aa <HAL_UART_IRQHandler+0x3e2>
 8006148:	687b      	ldr	r3, [r7, #4]
 800614a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800614e:	681b      	ldr	r3, [r3, #0]
 8006150:	4a7f      	ldr	r2, [pc, #508]	; (8006350 <HAL_UART_IRQHandler+0x588>)
 8006152:	4293      	cmp	r3, r2
 8006154:	d029      	beq.n	80061aa <HAL_UART_IRQHandler+0x3e2>
 8006156:	687b      	ldr	r3, [r7, #4]
 8006158:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800615c:	681b      	ldr	r3, [r3, #0]
 800615e:	4a7d      	ldr	r2, [pc, #500]	; (8006354 <HAL_UART_IRQHandler+0x58c>)
 8006160:	4293      	cmp	r3, r2
 8006162:	d022      	beq.n	80061aa <HAL_UART_IRQHandler+0x3e2>
 8006164:	687b      	ldr	r3, [r7, #4]
 8006166:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800616a:	681b      	ldr	r3, [r3, #0]
 800616c:	4a7a      	ldr	r2, [pc, #488]	; (8006358 <HAL_UART_IRQHandler+0x590>)
 800616e:	4293      	cmp	r3, r2
 8006170:	d01b      	beq.n	80061aa <HAL_UART_IRQHandler+0x3e2>
 8006172:	687b      	ldr	r3, [r7, #4]
 8006174:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8006178:	681b      	ldr	r3, [r3, #0]
 800617a:	4a78      	ldr	r2, [pc, #480]	; (800635c <HAL_UART_IRQHandler+0x594>)
 800617c:	4293      	cmp	r3, r2
 800617e:	d014      	beq.n	80061aa <HAL_UART_IRQHandler+0x3e2>
 8006180:	687b      	ldr	r3, [r7, #4]
 8006182:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8006186:	681b      	ldr	r3, [r3, #0]
 8006188:	4a75      	ldr	r2, [pc, #468]	; (8006360 <HAL_UART_IRQHandler+0x598>)
 800618a:	4293      	cmp	r3, r2
 800618c:	d00d      	beq.n	80061aa <HAL_UART_IRQHandler+0x3e2>
 800618e:	687b      	ldr	r3, [r7, #4]
 8006190:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8006194:	681b      	ldr	r3, [r3, #0]
 8006196:	4a73      	ldr	r2, [pc, #460]	; (8006364 <HAL_UART_IRQHandler+0x59c>)
 8006198:	4293      	cmp	r3, r2
 800619a:	d006      	beq.n	80061aa <HAL_UART_IRQHandler+0x3e2>
 800619c:	687b      	ldr	r3, [r7, #4]
 800619e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80061a2:	681b      	ldr	r3, [r3, #0]
 80061a4:	4a70      	ldr	r2, [pc, #448]	; (8006368 <HAL_UART_IRQHandler+0x5a0>)
 80061a6:	4293      	cmp	r3, r2
 80061a8:	d106      	bne.n	80061b8 <HAL_UART_IRQHandler+0x3f0>
 80061aa:	687b      	ldr	r3, [r7, #4]
 80061ac:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80061b0:	681b      	ldr	r3, [r3, #0]
 80061b2:	685b      	ldr	r3, [r3, #4]
 80061b4:	b29b      	uxth	r3, r3
 80061b6:	e005      	b.n	80061c4 <HAL_UART_IRQHandler+0x3fc>
 80061b8:	687b      	ldr	r3, [r7, #4]
 80061ba:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80061be:	681b      	ldr	r3, [r3, #0]
 80061c0:	685b      	ldr	r3, [r3, #4]
 80061c2:	b29b      	uxth	r3, r3
 80061c4:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 80061c8:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 80061cc:	2b00      	cmp	r3, #0
 80061ce:	f000 81ab 	beq.w	8006528 <HAL_UART_IRQHandler+0x760>
          && (nb_remaining_rx_data < huart->RxXferSize))
 80061d2:	687b      	ldr	r3, [r7, #4]
 80061d4:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 80061d8:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 80061dc:	429a      	cmp	r2, r3
 80061de:	f080 81a3 	bcs.w	8006528 <HAL_UART_IRQHandler+0x760>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 80061e2:	687b      	ldr	r3, [r7, #4]
 80061e4:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 80061e8:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 80061ec:	687b      	ldr	r3, [r7, #4]
 80061ee:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80061f2:	69db      	ldr	r3, [r3, #28]
 80061f4:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80061f8:	f000 8087 	beq.w	800630a <HAL_UART_IRQHandler+0x542>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80061fc:	687b      	ldr	r3, [r7, #4]
 80061fe:	681b      	ldr	r3, [r3, #0]
 8006200:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006204:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8006208:	e853 3f00 	ldrex	r3, [r3]
 800620c:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 8006210:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8006214:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8006218:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 800621c:	687b      	ldr	r3, [r7, #4]
 800621e:	681b      	ldr	r3, [r3, #0]
 8006220:	461a      	mov	r2, r3
 8006222:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8006226:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 800622a:	f8c7 2090 	str.w	r2, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800622e:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 8006232:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8006236:	e841 2300 	strex	r3, r2, [r1]
 800623a:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 800623e:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8006242:	2b00      	cmp	r3, #0
 8006244:	d1da      	bne.n	80061fc <HAL_UART_IRQHandler+0x434>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006246:	687b      	ldr	r3, [r7, #4]
 8006248:	681b      	ldr	r3, [r3, #0]
 800624a:	3308      	adds	r3, #8
 800624c:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800624e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8006250:	e853 3f00 	ldrex	r3, [r3]
 8006254:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 8006256:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8006258:	f023 0301 	bic.w	r3, r3, #1
 800625c:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8006260:	687b      	ldr	r3, [r7, #4]
 8006262:	681b      	ldr	r3, [r3, #0]
 8006264:	3308      	adds	r3, #8
 8006266:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 800626a:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 800626e:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006270:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 8006272:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8006276:	e841 2300 	strex	r3, r2, [r1]
 800627a:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 800627c:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800627e:	2b00      	cmp	r3, #0
 8006280:	d1e1      	bne.n	8006246 <HAL_UART_IRQHandler+0x47e>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8006282:	687b      	ldr	r3, [r7, #4]
 8006284:	681b      	ldr	r3, [r3, #0]
 8006286:	3308      	adds	r3, #8
 8006288:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800628a:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800628c:	e853 3f00 	ldrex	r3, [r3]
 8006290:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 8006292:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8006294:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8006298:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 800629c:	687b      	ldr	r3, [r7, #4]
 800629e:	681b      	ldr	r3, [r3, #0]
 80062a0:	3308      	adds	r3, #8
 80062a2:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 80062a6:	66fa      	str	r2, [r7, #108]	; 0x6c
 80062a8:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80062aa:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 80062ac:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 80062ae:	e841 2300 	strex	r3, r2, [r1]
 80062b2:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 80062b4:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80062b6:	2b00      	cmp	r3, #0
 80062b8:	d1e3      	bne.n	8006282 <HAL_UART_IRQHandler+0x4ba>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 80062ba:	687b      	ldr	r3, [r7, #4]
 80062bc:	2220      	movs	r2, #32
 80062be:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80062c2:	687b      	ldr	r3, [r7, #4]
 80062c4:	2200      	movs	r2, #0
 80062c6:	66da      	str	r2, [r3, #108]	; 0x6c

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80062c8:	687b      	ldr	r3, [r7, #4]
 80062ca:	681b      	ldr	r3, [r3, #0]
 80062cc:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80062ce:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80062d0:	e853 3f00 	ldrex	r3, [r3]
 80062d4:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 80062d6:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80062d8:	f023 0310 	bic.w	r3, r3, #16
 80062dc:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 80062e0:	687b      	ldr	r3, [r7, #4]
 80062e2:	681b      	ldr	r3, [r3, #0]
 80062e4:	461a      	mov	r2, r3
 80062e6:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 80062ea:	65bb      	str	r3, [r7, #88]	; 0x58
 80062ec:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80062ee:	6d79      	ldr	r1, [r7, #84]	; 0x54
 80062f0:	6dba      	ldr	r2, [r7, #88]	; 0x58
 80062f2:	e841 2300 	strex	r3, r2, [r1]
 80062f6:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 80062f8:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80062fa:	2b00      	cmp	r3, #0
 80062fc:	d1e4      	bne.n	80062c8 <HAL_UART_IRQHandler+0x500>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 80062fe:	687b      	ldr	r3, [r7, #4]
 8006300:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8006304:	4618      	mov	r0, r3
 8006306:	f7fb fd99 	bl	8001e3c <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800630a:	687b      	ldr	r3, [r7, #4]
 800630c:	2202      	movs	r2, #2
 800630e:	671a      	str	r2, [r3, #112]	; 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8006310:	687b      	ldr	r3, [r7, #4]
 8006312:	f8b3 205c 	ldrh.w	r2, [r3, #92]	; 0x5c
 8006316:	687b      	ldr	r3, [r7, #4]
 8006318:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800631c:	b29b      	uxth	r3, r3
 800631e:	1ad3      	subs	r3, r2, r3
 8006320:	b29b      	uxth	r3, r3
 8006322:	4619      	mov	r1, r3
 8006324:	6878      	ldr	r0, [r7, #4]
 8006326:	f000 f91d 	bl	8006564 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 800632a:	e0fd      	b.n	8006528 <HAL_UART_IRQHandler+0x760>
 800632c:	40020010 	.word	0x40020010
 8006330:	40020028 	.word	0x40020028
 8006334:	40020040 	.word	0x40020040
 8006338:	40020058 	.word	0x40020058
 800633c:	40020070 	.word	0x40020070
 8006340:	40020088 	.word	0x40020088
 8006344:	400200a0 	.word	0x400200a0
 8006348:	400200b8 	.word	0x400200b8
 800634c:	40020410 	.word	0x40020410
 8006350:	40020428 	.word	0x40020428
 8006354:	40020440 	.word	0x40020440
 8006358:	40020458 	.word	0x40020458
 800635c:	40020470 	.word	0x40020470
 8006360:	40020488 	.word	0x40020488
 8006364:	400204a0 	.word	0x400204a0
 8006368:	400204b8 	.word	0x400204b8
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 800636c:	687b      	ldr	r3, [r7, #4]
 800636e:	f8b3 205c 	ldrh.w	r2, [r3, #92]	; 0x5c
 8006372:	687b      	ldr	r3, [r7, #4]
 8006374:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8006378:	b29b      	uxth	r3, r3
 800637a:	1ad3      	subs	r3, r2, r3
 800637c:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 8006380:	687b      	ldr	r3, [r7, #4]
 8006382:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8006386:	b29b      	uxth	r3, r3
 8006388:	2b00      	cmp	r3, #0
 800638a:	f000 80cf 	beq.w	800652c <HAL_UART_IRQHandler+0x764>
          && (nb_rx_data > 0U))
 800638e:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8006392:	2b00      	cmp	r3, #0
 8006394:	f000 80ca 	beq.w	800652c <HAL_UART_IRQHandler+0x764>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8006398:	687b      	ldr	r3, [r7, #4]
 800639a:	681b      	ldr	r3, [r3, #0]
 800639c:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800639e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80063a0:	e853 3f00 	ldrex	r3, [r3]
 80063a4:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 80063a6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80063a8:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80063ac:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 80063b0:	687b      	ldr	r3, [r7, #4]
 80063b2:	681b      	ldr	r3, [r3, #0]
 80063b4:	461a      	mov	r2, r3
 80063b6:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 80063ba:	647b      	str	r3, [r7, #68]	; 0x44
 80063bc:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80063be:	6c39      	ldr	r1, [r7, #64]	; 0x40
 80063c0:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80063c2:	e841 2300 	strex	r3, r2, [r1]
 80063c6:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 80063c8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80063ca:	2b00      	cmp	r3, #0
 80063cc:	d1e4      	bne.n	8006398 <HAL_UART_IRQHandler+0x5d0>

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 80063ce:	687b      	ldr	r3, [r7, #4]
 80063d0:	681b      	ldr	r3, [r3, #0]
 80063d2:	3308      	adds	r3, #8
 80063d4:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80063d6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80063d8:	e853 3f00 	ldrex	r3, [r3]
 80063dc:	623b      	str	r3, [r7, #32]
   return(result);
 80063de:	6a3a      	ldr	r2, [r7, #32]
 80063e0:	4b55      	ldr	r3, [pc, #340]	; (8006538 <HAL_UART_IRQHandler+0x770>)
 80063e2:	4013      	ands	r3, r2
 80063e4:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 80063e8:	687b      	ldr	r3, [r7, #4]
 80063ea:	681b      	ldr	r3, [r3, #0]
 80063ec:	3308      	adds	r3, #8
 80063ee:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 80063f2:	633a      	str	r2, [r7, #48]	; 0x30
 80063f4:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80063f6:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80063f8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80063fa:	e841 2300 	strex	r3, r2, [r1]
 80063fe:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8006400:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006402:	2b00      	cmp	r3, #0
 8006404:	d1e3      	bne.n	80063ce <HAL_UART_IRQHandler+0x606>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8006406:	687b      	ldr	r3, [r7, #4]
 8006408:	2220      	movs	r2, #32
 800640a:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800640e:	687b      	ldr	r3, [r7, #4]
 8006410:	2200      	movs	r2, #0
 8006412:	66da      	str	r2, [r3, #108]	; 0x6c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8006414:	687b      	ldr	r3, [r7, #4]
 8006416:	2200      	movs	r2, #0
 8006418:	675a      	str	r2, [r3, #116]	; 0x74

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800641a:	687b      	ldr	r3, [r7, #4]
 800641c:	681b      	ldr	r3, [r3, #0]
 800641e:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006420:	693b      	ldr	r3, [r7, #16]
 8006422:	e853 3f00 	ldrex	r3, [r3]
 8006426:	60fb      	str	r3, [r7, #12]
   return(result);
 8006428:	68fb      	ldr	r3, [r7, #12]
 800642a:	f023 0310 	bic.w	r3, r3, #16
 800642e:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8006432:	687b      	ldr	r3, [r7, #4]
 8006434:	681b      	ldr	r3, [r3, #0]
 8006436:	461a      	mov	r2, r3
 8006438:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 800643c:	61fb      	str	r3, [r7, #28]
 800643e:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006440:	69b9      	ldr	r1, [r7, #24]
 8006442:	69fa      	ldr	r2, [r7, #28]
 8006444:	e841 2300 	strex	r3, r2, [r1]
 8006448:	617b      	str	r3, [r7, #20]
   return(result);
 800644a:	697b      	ldr	r3, [r7, #20]
 800644c:	2b00      	cmp	r3, #0
 800644e:	d1e4      	bne.n	800641a <HAL_UART_IRQHandler+0x652>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8006450:	687b      	ldr	r3, [r7, #4]
 8006452:	2202      	movs	r2, #2
 8006454:	671a      	str	r2, [r3, #112]	; 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8006456:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 800645a:	4619      	mov	r1, r3
 800645c:	6878      	ldr	r0, [r7, #4]
 800645e:	f000 f881 	bl	8006564 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8006462:	e063      	b.n	800652c <HAL_UART_IRQHandler+0x764>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 8006464:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006468:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800646c:	2b00      	cmp	r3, #0
 800646e:	d00e      	beq.n	800648e <HAL_UART_IRQHandler+0x6c6>
 8006470:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8006474:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8006478:	2b00      	cmp	r3, #0
 800647a:	d008      	beq.n	800648e <HAL_UART_IRQHandler+0x6c6>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 800647c:	687b      	ldr	r3, [r7, #4]
 800647e:	681b      	ldr	r3, [r3, #0]
 8006480:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8006484:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 8006486:	6878      	ldr	r0, [r7, #4]
 8006488:	f001 f93f 	bl	800770a <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800648c:	e051      	b.n	8006532 <HAL_UART_IRQHandler+0x76a>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
 800648e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006492:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006496:	2b00      	cmp	r3, #0
 8006498:	d014      	beq.n	80064c4 <HAL_UART_IRQHandler+0x6fc>
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
 800649a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800649e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80064a2:	2b00      	cmp	r3, #0
 80064a4:	d105      	bne.n	80064b2 <HAL_UART_IRQHandler+0x6ea>
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
 80064a6:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80064aa:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80064ae:	2b00      	cmp	r3, #0
 80064b0:	d008      	beq.n	80064c4 <HAL_UART_IRQHandler+0x6fc>
  {
    if (huart->TxISR != NULL)
 80064b2:	687b      	ldr	r3, [r7, #4]
 80064b4:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80064b6:	2b00      	cmp	r3, #0
 80064b8:	d03a      	beq.n	8006530 <HAL_UART_IRQHandler+0x768>
    {
      huart->TxISR(huart);
 80064ba:	687b      	ldr	r3, [r7, #4]
 80064bc:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80064be:	6878      	ldr	r0, [r7, #4]
 80064c0:	4798      	blx	r3
    }
    return;
 80064c2:	e035      	b.n	8006530 <HAL_UART_IRQHandler+0x768>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 80064c4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80064c8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80064cc:	2b00      	cmp	r3, #0
 80064ce:	d009      	beq.n	80064e4 <HAL_UART_IRQHandler+0x71c>
 80064d0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80064d4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80064d8:	2b00      	cmp	r3, #0
 80064da:	d003      	beq.n	80064e4 <HAL_UART_IRQHandler+0x71c>
  {
    UART_EndTransmit_IT(huart);
 80064dc:	6878      	ldr	r0, [r7, #4]
 80064de:	f001 f8e9 	bl	80076b4 <UART_EndTransmit_IT>
    return;
 80064e2:	e026      	b.n	8006532 <HAL_UART_IRQHandler+0x76a>
  }

  /* UART TX Fifo Empty occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_TXFE) != 0U) && ((cr1its & USART_CR1_TXFEIE) != 0U))
 80064e4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80064e8:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80064ec:	2b00      	cmp	r3, #0
 80064ee:	d009      	beq.n	8006504 <HAL_UART_IRQHandler+0x73c>
 80064f0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80064f4:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 80064f8:	2b00      	cmp	r3, #0
 80064fa:	d003      	beq.n	8006504 <HAL_UART_IRQHandler+0x73c>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Tx Fifo Empty Callback */
    huart->TxFifoEmptyCallback(huart);
#else
    /* Call legacy weak Tx Fifo Empty Callback */
    HAL_UARTEx_TxFifoEmptyCallback(huart);
 80064fc:	6878      	ldr	r0, [r7, #4]
 80064fe:	f001 f918 	bl	8007732 <HAL_UARTEx_TxFifoEmptyCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8006502:	e016      	b.n	8006532 <HAL_UART_IRQHandler+0x76a>
  }

  /* UART RX Fifo Full occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_RXFF) != 0U) && ((cr1its & USART_CR1_RXFFIE) != 0U))
 8006504:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006508:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800650c:	2b00      	cmp	r3, #0
 800650e:	d010      	beq.n	8006532 <HAL_UART_IRQHandler+0x76a>
 8006510:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006514:	2b00      	cmp	r3, #0
 8006516:	da0c      	bge.n	8006532 <HAL_UART_IRQHandler+0x76a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Rx Fifo Full Callback */
    huart->RxFifoFullCallback(huart);
#else
    /* Call legacy weak Rx Fifo Full Callback */
    HAL_UARTEx_RxFifoFullCallback(huart);
 8006518:	6878      	ldr	r0, [r7, #4]
 800651a:	f001 f900 	bl	800771e <HAL_UARTEx_RxFifoFullCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800651e:	e008      	b.n	8006532 <HAL_UART_IRQHandler+0x76a>
      return;
 8006520:	bf00      	nop
 8006522:	e006      	b.n	8006532 <HAL_UART_IRQHandler+0x76a>
    return;
 8006524:	bf00      	nop
 8006526:	e004      	b.n	8006532 <HAL_UART_IRQHandler+0x76a>
      return;
 8006528:	bf00      	nop
 800652a:	e002      	b.n	8006532 <HAL_UART_IRQHandler+0x76a>
      return;
 800652c:	bf00      	nop
 800652e:	e000      	b.n	8006532 <HAL_UART_IRQHandler+0x76a>
    return;
 8006530:	bf00      	nop
  }
}
 8006532:	37e8      	adds	r7, #232	; 0xe8
 8006534:	46bd      	mov	sp, r7
 8006536:	bd80      	pop	{r7, pc}
 8006538:	effffffe 	.word	0xeffffffe

0800653c <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 800653c:	b480      	push	{r7}
 800653e:	b083      	sub	sp, #12
 8006540:	af00      	add	r7, sp, #0
 8006542:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 8006544:	bf00      	nop
 8006546:	370c      	adds	r7, #12
 8006548:	46bd      	mov	sp, r7
 800654a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800654e:	4770      	bx	lr

08006550 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8006550:	b480      	push	{r7}
 8006552:	b083      	sub	sp, #12
 8006554:	af00      	add	r7, sp, #0
 8006556:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 8006558:	bf00      	nop
 800655a:	370c      	adds	r7, #12
 800655c:	46bd      	mov	sp, r7
 800655e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006562:	4770      	bx	lr

08006564 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8006564:	b480      	push	{r7}
 8006566:	b083      	sub	sp, #12
 8006568:	af00      	add	r7, sp, #0
 800656a:	6078      	str	r0, [r7, #4]
 800656c:	460b      	mov	r3, r1
 800656e:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8006570:	bf00      	nop
 8006572:	370c      	adds	r7, #12
 8006574:	46bd      	mov	sp, r7
 8006576:	f85d 7b04 	ldr.w	r7, [sp], #4
 800657a:	4770      	bx	lr

0800657c <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 800657c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8006580:	b092      	sub	sp, #72	; 0x48
 8006582:	af00      	add	r7, sp, #0
 8006584:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8006586:	2300      	movs	r3, #0
 8006588:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800658c:	697b      	ldr	r3, [r7, #20]
 800658e:	689a      	ldr	r2, [r3, #8]
 8006590:	697b      	ldr	r3, [r7, #20]
 8006592:	691b      	ldr	r3, [r3, #16]
 8006594:	431a      	orrs	r2, r3
 8006596:	697b      	ldr	r3, [r7, #20]
 8006598:	695b      	ldr	r3, [r3, #20]
 800659a:	431a      	orrs	r2, r3
 800659c:	697b      	ldr	r3, [r7, #20]
 800659e:	69db      	ldr	r3, [r3, #28]
 80065a0:	4313      	orrs	r3, r2
 80065a2:	647b      	str	r3, [r7, #68]	; 0x44
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 80065a4:	697b      	ldr	r3, [r7, #20]
 80065a6:	681b      	ldr	r3, [r3, #0]
 80065a8:	681a      	ldr	r2, [r3, #0]
 80065aa:	4bbe      	ldr	r3, [pc, #760]	; (80068a4 <UART_SetConfig+0x328>)
 80065ac:	4013      	ands	r3, r2
 80065ae:	697a      	ldr	r2, [r7, #20]
 80065b0:	6812      	ldr	r2, [r2, #0]
 80065b2:	6c79      	ldr	r1, [r7, #68]	; 0x44
 80065b4:	430b      	orrs	r3, r1
 80065b6:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80065b8:	697b      	ldr	r3, [r7, #20]
 80065ba:	681b      	ldr	r3, [r3, #0]
 80065bc:	685b      	ldr	r3, [r3, #4]
 80065be:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 80065c2:	697b      	ldr	r3, [r7, #20]
 80065c4:	68da      	ldr	r2, [r3, #12]
 80065c6:	697b      	ldr	r3, [r7, #20]
 80065c8:	681b      	ldr	r3, [r3, #0]
 80065ca:	430a      	orrs	r2, r1
 80065cc:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 80065ce:	697b      	ldr	r3, [r7, #20]
 80065d0:	699b      	ldr	r3, [r3, #24]
 80065d2:	647b      	str	r3, [r7, #68]	; 0x44

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 80065d4:	697b      	ldr	r3, [r7, #20]
 80065d6:	681b      	ldr	r3, [r3, #0]
 80065d8:	4ab3      	ldr	r2, [pc, #716]	; (80068a8 <UART_SetConfig+0x32c>)
 80065da:	4293      	cmp	r3, r2
 80065dc:	d004      	beq.n	80065e8 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 80065de:	697b      	ldr	r3, [r7, #20]
 80065e0:	6a1b      	ldr	r3, [r3, #32]
 80065e2:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80065e4:	4313      	orrs	r3, r2
 80065e6:	647b      	str	r3, [r7, #68]	; 0x44
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 80065e8:	697b      	ldr	r3, [r7, #20]
 80065ea:	681b      	ldr	r3, [r3, #0]
 80065ec:	689a      	ldr	r2, [r3, #8]
 80065ee:	4baf      	ldr	r3, [pc, #700]	; (80068ac <UART_SetConfig+0x330>)
 80065f0:	4013      	ands	r3, r2
 80065f2:	697a      	ldr	r2, [r7, #20]
 80065f4:	6812      	ldr	r2, [r2, #0]
 80065f6:	6c79      	ldr	r1, [r7, #68]	; 0x44
 80065f8:	430b      	orrs	r3, r1
 80065fa:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 80065fc:	697b      	ldr	r3, [r7, #20]
 80065fe:	681b      	ldr	r3, [r3, #0]
 8006600:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006602:	f023 010f 	bic.w	r1, r3, #15
 8006606:	697b      	ldr	r3, [r7, #20]
 8006608:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800660a:	697b      	ldr	r3, [r7, #20]
 800660c:	681b      	ldr	r3, [r3, #0]
 800660e:	430a      	orrs	r2, r1
 8006610:	62da      	str	r2, [r3, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8006612:	697b      	ldr	r3, [r7, #20]
 8006614:	681b      	ldr	r3, [r3, #0]
 8006616:	4aa6      	ldr	r2, [pc, #664]	; (80068b0 <UART_SetConfig+0x334>)
 8006618:	4293      	cmp	r3, r2
 800661a:	d177      	bne.n	800670c <UART_SetConfig+0x190>
 800661c:	4ba5      	ldr	r3, [pc, #660]	; (80068b4 <UART_SetConfig+0x338>)
 800661e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006620:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8006624:	2b28      	cmp	r3, #40	; 0x28
 8006626:	d86d      	bhi.n	8006704 <UART_SetConfig+0x188>
 8006628:	a201      	add	r2, pc, #4	; (adr r2, 8006630 <UART_SetConfig+0xb4>)
 800662a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800662e:	bf00      	nop
 8006630:	080066d5 	.word	0x080066d5
 8006634:	08006705 	.word	0x08006705
 8006638:	08006705 	.word	0x08006705
 800663c:	08006705 	.word	0x08006705
 8006640:	08006705 	.word	0x08006705
 8006644:	08006705 	.word	0x08006705
 8006648:	08006705 	.word	0x08006705
 800664c:	08006705 	.word	0x08006705
 8006650:	080066dd 	.word	0x080066dd
 8006654:	08006705 	.word	0x08006705
 8006658:	08006705 	.word	0x08006705
 800665c:	08006705 	.word	0x08006705
 8006660:	08006705 	.word	0x08006705
 8006664:	08006705 	.word	0x08006705
 8006668:	08006705 	.word	0x08006705
 800666c:	08006705 	.word	0x08006705
 8006670:	080066e5 	.word	0x080066e5
 8006674:	08006705 	.word	0x08006705
 8006678:	08006705 	.word	0x08006705
 800667c:	08006705 	.word	0x08006705
 8006680:	08006705 	.word	0x08006705
 8006684:	08006705 	.word	0x08006705
 8006688:	08006705 	.word	0x08006705
 800668c:	08006705 	.word	0x08006705
 8006690:	080066ed 	.word	0x080066ed
 8006694:	08006705 	.word	0x08006705
 8006698:	08006705 	.word	0x08006705
 800669c:	08006705 	.word	0x08006705
 80066a0:	08006705 	.word	0x08006705
 80066a4:	08006705 	.word	0x08006705
 80066a8:	08006705 	.word	0x08006705
 80066ac:	08006705 	.word	0x08006705
 80066b0:	080066f5 	.word	0x080066f5
 80066b4:	08006705 	.word	0x08006705
 80066b8:	08006705 	.word	0x08006705
 80066bc:	08006705 	.word	0x08006705
 80066c0:	08006705 	.word	0x08006705
 80066c4:	08006705 	.word	0x08006705
 80066c8:	08006705 	.word	0x08006705
 80066cc:	08006705 	.word	0x08006705
 80066d0:	080066fd 	.word	0x080066fd
 80066d4:	2301      	movs	r3, #1
 80066d6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80066da:	e326      	b.n	8006d2a <UART_SetConfig+0x7ae>
 80066dc:	2304      	movs	r3, #4
 80066de:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80066e2:	e322      	b.n	8006d2a <UART_SetConfig+0x7ae>
 80066e4:	2308      	movs	r3, #8
 80066e6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80066ea:	e31e      	b.n	8006d2a <UART_SetConfig+0x7ae>
 80066ec:	2310      	movs	r3, #16
 80066ee:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80066f2:	e31a      	b.n	8006d2a <UART_SetConfig+0x7ae>
 80066f4:	2320      	movs	r3, #32
 80066f6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80066fa:	e316      	b.n	8006d2a <UART_SetConfig+0x7ae>
 80066fc:	2340      	movs	r3, #64	; 0x40
 80066fe:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8006702:	e312      	b.n	8006d2a <UART_SetConfig+0x7ae>
 8006704:	2380      	movs	r3, #128	; 0x80
 8006706:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800670a:	e30e      	b.n	8006d2a <UART_SetConfig+0x7ae>
 800670c:	697b      	ldr	r3, [r7, #20]
 800670e:	681b      	ldr	r3, [r3, #0]
 8006710:	4a69      	ldr	r2, [pc, #420]	; (80068b8 <UART_SetConfig+0x33c>)
 8006712:	4293      	cmp	r3, r2
 8006714:	d130      	bne.n	8006778 <UART_SetConfig+0x1fc>
 8006716:	4b67      	ldr	r3, [pc, #412]	; (80068b4 <UART_SetConfig+0x338>)
 8006718:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800671a:	f003 0307 	and.w	r3, r3, #7
 800671e:	2b05      	cmp	r3, #5
 8006720:	d826      	bhi.n	8006770 <UART_SetConfig+0x1f4>
 8006722:	a201      	add	r2, pc, #4	; (adr r2, 8006728 <UART_SetConfig+0x1ac>)
 8006724:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006728:	08006741 	.word	0x08006741
 800672c:	08006749 	.word	0x08006749
 8006730:	08006751 	.word	0x08006751
 8006734:	08006759 	.word	0x08006759
 8006738:	08006761 	.word	0x08006761
 800673c:	08006769 	.word	0x08006769
 8006740:	2300      	movs	r3, #0
 8006742:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8006746:	e2f0      	b.n	8006d2a <UART_SetConfig+0x7ae>
 8006748:	2304      	movs	r3, #4
 800674a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800674e:	e2ec      	b.n	8006d2a <UART_SetConfig+0x7ae>
 8006750:	2308      	movs	r3, #8
 8006752:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8006756:	e2e8      	b.n	8006d2a <UART_SetConfig+0x7ae>
 8006758:	2310      	movs	r3, #16
 800675a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800675e:	e2e4      	b.n	8006d2a <UART_SetConfig+0x7ae>
 8006760:	2320      	movs	r3, #32
 8006762:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8006766:	e2e0      	b.n	8006d2a <UART_SetConfig+0x7ae>
 8006768:	2340      	movs	r3, #64	; 0x40
 800676a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800676e:	e2dc      	b.n	8006d2a <UART_SetConfig+0x7ae>
 8006770:	2380      	movs	r3, #128	; 0x80
 8006772:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8006776:	e2d8      	b.n	8006d2a <UART_SetConfig+0x7ae>
 8006778:	697b      	ldr	r3, [r7, #20]
 800677a:	681b      	ldr	r3, [r3, #0]
 800677c:	4a4f      	ldr	r2, [pc, #316]	; (80068bc <UART_SetConfig+0x340>)
 800677e:	4293      	cmp	r3, r2
 8006780:	d130      	bne.n	80067e4 <UART_SetConfig+0x268>
 8006782:	4b4c      	ldr	r3, [pc, #304]	; (80068b4 <UART_SetConfig+0x338>)
 8006784:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006786:	f003 0307 	and.w	r3, r3, #7
 800678a:	2b05      	cmp	r3, #5
 800678c:	d826      	bhi.n	80067dc <UART_SetConfig+0x260>
 800678e:	a201      	add	r2, pc, #4	; (adr r2, 8006794 <UART_SetConfig+0x218>)
 8006790:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006794:	080067ad 	.word	0x080067ad
 8006798:	080067b5 	.word	0x080067b5
 800679c:	080067bd 	.word	0x080067bd
 80067a0:	080067c5 	.word	0x080067c5
 80067a4:	080067cd 	.word	0x080067cd
 80067a8:	080067d5 	.word	0x080067d5
 80067ac:	2300      	movs	r3, #0
 80067ae:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80067b2:	e2ba      	b.n	8006d2a <UART_SetConfig+0x7ae>
 80067b4:	2304      	movs	r3, #4
 80067b6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80067ba:	e2b6      	b.n	8006d2a <UART_SetConfig+0x7ae>
 80067bc:	2308      	movs	r3, #8
 80067be:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80067c2:	e2b2      	b.n	8006d2a <UART_SetConfig+0x7ae>
 80067c4:	2310      	movs	r3, #16
 80067c6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80067ca:	e2ae      	b.n	8006d2a <UART_SetConfig+0x7ae>
 80067cc:	2320      	movs	r3, #32
 80067ce:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80067d2:	e2aa      	b.n	8006d2a <UART_SetConfig+0x7ae>
 80067d4:	2340      	movs	r3, #64	; 0x40
 80067d6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80067da:	e2a6      	b.n	8006d2a <UART_SetConfig+0x7ae>
 80067dc:	2380      	movs	r3, #128	; 0x80
 80067de:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80067e2:	e2a2      	b.n	8006d2a <UART_SetConfig+0x7ae>
 80067e4:	697b      	ldr	r3, [r7, #20]
 80067e6:	681b      	ldr	r3, [r3, #0]
 80067e8:	4a35      	ldr	r2, [pc, #212]	; (80068c0 <UART_SetConfig+0x344>)
 80067ea:	4293      	cmp	r3, r2
 80067ec:	d130      	bne.n	8006850 <UART_SetConfig+0x2d4>
 80067ee:	4b31      	ldr	r3, [pc, #196]	; (80068b4 <UART_SetConfig+0x338>)
 80067f0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80067f2:	f003 0307 	and.w	r3, r3, #7
 80067f6:	2b05      	cmp	r3, #5
 80067f8:	d826      	bhi.n	8006848 <UART_SetConfig+0x2cc>
 80067fa:	a201      	add	r2, pc, #4	; (adr r2, 8006800 <UART_SetConfig+0x284>)
 80067fc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006800:	08006819 	.word	0x08006819
 8006804:	08006821 	.word	0x08006821
 8006808:	08006829 	.word	0x08006829
 800680c:	08006831 	.word	0x08006831
 8006810:	08006839 	.word	0x08006839
 8006814:	08006841 	.word	0x08006841
 8006818:	2300      	movs	r3, #0
 800681a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800681e:	e284      	b.n	8006d2a <UART_SetConfig+0x7ae>
 8006820:	2304      	movs	r3, #4
 8006822:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8006826:	e280      	b.n	8006d2a <UART_SetConfig+0x7ae>
 8006828:	2308      	movs	r3, #8
 800682a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800682e:	e27c      	b.n	8006d2a <UART_SetConfig+0x7ae>
 8006830:	2310      	movs	r3, #16
 8006832:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8006836:	e278      	b.n	8006d2a <UART_SetConfig+0x7ae>
 8006838:	2320      	movs	r3, #32
 800683a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800683e:	e274      	b.n	8006d2a <UART_SetConfig+0x7ae>
 8006840:	2340      	movs	r3, #64	; 0x40
 8006842:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8006846:	e270      	b.n	8006d2a <UART_SetConfig+0x7ae>
 8006848:	2380      	movs	r3, #128	; 0x80
 800684a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800684e:	e26c      	b.n	8006d2a <UART_SetConfig+0x7ae>
 8006850:	697b      	ldr	r3, [r7, #20]
 8006852:	681b      	ldr	r3, [r3, #0]
 8006854:	4a1b      	ldr	r2, [pc, #108]	; (80068c4 <UART_SetConfig+0x348>)
 8006856:	4293      	cmp	r3, r2
 8006858:	d142      	bne.n	80068e0 <UART_SetConfig+0x364>
 800685a:	4b16      	ldr	r3, [pc, #88]	; (80068b4 <UART_SetConfig+0x338>)
 800685c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800685e:	f003 0307 	and.w	r3, r3, #7
 8006862:	2b05      	cmp	r3, #5
 8006864:	d838      	bhi.n	80068d8 <UART_SetConfig+0x35c>
 8006866:	a201      	add	r2, pc, #4	; (adr r2, 800686c <UART_SetConfig+0x2f0>)
 8006868:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800686c:	08006885 	.word	0x08006885
 8006870:	0800688d 	.word	0x0800688d
 8006874:	08006895 	.word	0x08006895
 8006878:	0800689d 	.word	0x0800689d
 800687c:	080068c9 	.word	0x080068c9
 8006880:	080068d1 	.word	0x080068d1
 8006884:	2300      	movs	r3, #0
 8006886:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800688a:	e24e      	b.n	8006d2a <UART_SetConfig+0x7ae>
 800688c:	2304      	movs	r3, #4
 800688e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8006892:	e24a      	b.n	8006d2a <UART_SetConfig+0x7ae>
 8006894:	2308      	movs	r3, #8
 8006896:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800689a:	e246      	b.n	8006d2a <UART_SetConfig+0x7ae>
 800689c:	2310      	movs	r3, #16
 800689e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80068a2:	e242      	b.n	8006d2a <UART_SetConfig+0x7ae>
 80068a4:	cfff69f3 	.word	0xcfff69f3
 80068a8:	58000c00 	.word	0x58000c00
 80068ac:	11fff4ff 	.word	0x11fff4ff
 80068b0:	40011000 	.word	0x40011000
 80068b4:	58024400 	.word	0x58024400
 80068b8:	40004400 	.word	0x40004400
 80068bc:	40004800 	.word	0x40004800
 80068c0:	40004c00 	.word	0x40004c00
 80068c4:	40005000 	.word	0x40005000
 80068c8:	2320      	movs	r3, #32
 80068ca:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80068ce:	e22c      	b.n	8006d2a <UART_SetConfig+0x7ae>
 80068d0:	2340      	movs	r3, #64	; 0x40
 80068d2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80068d6:	e228      	b.n	8006d2a <UART_SetConfig+0x7ae>
 80068d8:	2380      	movs	r3, #128	; 0x80
 80068da:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80068de:	e224      	b.n	8006d2a <UART_SetConfig+0x7ae>
 80068e0:	697b      	ldr	r3, [r7, #20]
 80068e2:	681b      	ldr	r3, [r3, #0]
 80068e4:	4ab1      	ldr	r2, [pc, #708]	; (8006bac <UART_SetConfig+0x630>)
 80068e6:	4293      	cmp	r3, r2
 80068e8:	d176      	bne.n	80069d8 <UART_SetConfig+0x45c>
 80068ea:	4bb1      	ldr	r3, [pc, #708]	; (8006bb0 <UART_SetConfig+0x634>)
 80068ec:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80068ee:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80068f2:	2b28      	cmp	r3, #40	; 0x28
 80068f4:	d86c      	bhi.n	80069d0 <UART_SetConfig+0x454>
 80068f6:	a201      	add	r2, pc, #4	; (adr r2, 80068fc <UART_SetConfig+0x380>)
 80068f8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80068fc:	080069a1 	.word	0x080069a1
 8006900:	080069d1 	.word	0x080069d1
 8006904:	080069d1 	.word	0x080069d1
 8006908:	080069d1 	.word	0x080069d1
 800690c:	080069d1 	.word	0x080069d1
 8006910:	080069d1 	.word	0x080069d1
 8006914:	080069d1 	.word	0x080069d1
 8006918:	080069d1 	.word	0x080069d1
 800691c:	080069a9 	.word	0x080069a9
 8006920:	080069d1 	.word	0x080069d1
 8006924:	080069d1 	.word	0x080069d1
 8006928:	080069d1 	.word	0x080069d1
 800692c:	080069d1 	.word	0x080069d1
 8006930:	080069d1 	.word	0x080069d1
 8006934:	080069d1 	.word	0x080069d1
 8006938:	080069d1 	.word	0x080069d1
 800693c:	080069b1 	.word	0x080069b1
 8006940:	080069d1 	.word	0x080069d1
 8006944:	080069d1 	.word	0x080069d1
 8006948:	080069d1 	.word	0x080069d1
 800694c:	080069d1 	.word	0x080069d1
 8006950:	080069d1 	.word	0x080069d1
 8006954:	080069d1 	.word	0x080069d1
 8006958:	080069d1 	.word	0x080069d1
 800695c:	080069b9 	.word	0x080069b9
 8006960:	080069d1 	.word	0x080069d1
 8006964:	080069d1 	.word	0x080069d1
 8006968:	080069d1 	.word	0x080069d1
 800696c:	080069d1 	.word	0x080069d1
 8006970:	080069d1 	.word	0x080069d1
 8006974:	080069d1 	.word	0x080069d1
 8006978:	080069d1 	.word	0x080069d1
 800697c:	080069c1 	.word	0x080069c1
 8006980:	080069d1 	.word	0x080069d1
 8006984:	080069d1 	.word	0x080069d1
 8006988:	080069d1 	.word	0x080069d1
 800698c:	080069d1 	.word	0x080069d1
 8006990:	080069d1 	.word	0x080069d1
 8006994:	080069d1 	.word	0x080069d1
 8006998:	080069d1 	.word	0x080069d1
 800699c:	080069c9 	.word	0x080069c9
 80069a0:	2301      	movs	r3, #1
 80069a2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80069a6:	e1c0      	b.n	8006d2a <UART_SetConfig+0x7ae>
 80069a8:	2304      	movs	r3, #4
 80069aa:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80069ae:	e1bc      	b.n	8006d2a <UART_SetConfig+0x7ae>
 80069b0:	2308      	movs	r3, #8
 80069b2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80069b6:	e1b8      	b.n	8006d2a <UART_SetConfig+0x7ae>
 80069b8:	2310      	movs	r3, #16
 80069ba:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80069be:	e1b4      	b.n	8006d2a <UART_SetConfig+0x7ae>
 80069c0:	2320      	movs	r3, #32
 80069c2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80069c6:	e1b0      	b.n	8006d2a <UART_SetConfig+0x7ae>
 80069c8:	2340      	movs	r3, #64	; 0x40
 80069ca:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80069ce:	e1ac      	b.n	8006d2a <UART_SetConfig+0x7ae>
 80069d0:	2380      	movs	r3, #128	; 0x80
 80069d2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80069d6:	e1a8      	b.n	8006d2a <UART_SetConfig+0x7ae>
 80069d8:	697b      	ldr	r3, [r7, #20]
 80069da:	681b      	ldr	r3, [r3, #0]
 80069dc:	4a75      	ldr	r2, [pc, #468]	; (8006bb4 <UART_SetConfig+0x638>)
 80069de:	4293      	cmp	r3, r2
 80069e0:	d130      	bne.n	8006a44 <UART_SetConfig+0x4c8>
 80069e2:	4b73      	ldr	r3, [pc, #460]	; (8006bb0 <UART_SetConfig+0x634>)
 80069e4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80069e6:	f003 0307 	and.w	r3, r3, #7
 80069ea:	2b05      	cmp	r3, #5
 80069ec:	d826      	bhi.n	8006a3c <UART_SetConfig+0x4c0>
 80069ee:	a201      	add	r2, pc, #4	; (adr r2, 80069f4 <UART_SetConfig+0x478>)
 80069f0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80069f4:	08006a0d 	.word	0x08006a0d
 80069f8:	08006a15 	.word	0x08006a15
 80069fc:	08006a1d 	.word	0x08006a1d
 8006a00:	08006a25 	.word	0x08006a25
 8006a04:	08006a2d 	.word	0x08006a2d
 8006a08:	08006a35 	.word	0x08006a35
 8006a0c:	2300      	movs	r3, #0
 8006a0e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8006a12:	e18a      	b.n	8006d2a <UART_SetConfig+0x7ae>
 8006a14:	2304      	movs	r3, #4
 8006a16:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8006a1a:	e186      	b.n	8006d2a <UART_SetConfig+0x7ae>
 8006a1c:	2308      	movs	r3, #8
 8006a1e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8006a22:	e182      	b.n	8006d2a <UART_SetConfig+0x7ae>
 8006a24:	2310      	movs	r3, #16
 8006a26:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8006a2a:	e17e      	b.n	8006d2a <UART_SetConfig+0x7ae>
 8006a2c:	2320      	movs	r3, #32
 8006a2e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8006a32:	e17a      	b.n	8006d2a <UART_SetConfig+0x7ae>
 8006a34:	2340      	movs	r3, #64	; 0x40
 8006a36:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8006a3a:	e176      	b.n	8006d2a <UART_SetConfig+0x7ae>
 8006a3c:	2380      	movs	r3, #128	; 0x80
 8006a3e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8006a42:	e172      	b.n	8006d2a <UART_SetConfig+0x7ae>
 8006a44:	697b      	ldr	r3, [r7, #20]
 8006a46:	681b      	ldr	r3, [r3, #0]
 8006a48:	4a5b      	ldr	r2, [pc, #364]	; (8006bb8 <UART_SetConfig+0x63c>)
 8006a4a:	4293      	cmp	r3, r2
 8006a4c:	d130      	bne.n	8006ab0 <UART_SetConfig+0x534>
 8006a4e:	4b58      	ldr	r3, [pc, #352]	; (8006bb0 <UART_SetConfig+0x634>)
 8006a50:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006a52:	f003 0307 	and.w	r3, r3, #7
 8006a56:	2b05      	cmp	r3, #5
 8006a58:	d826      	bhi.n	8006aa8 <UART_SetConfig+0x52c>
 8006a5a:	a201      	add	r2, pc, #4	; (adr r2, 8006a60 <UART_SetConfig+0x4e4>)
 8006a5c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006a60:	08006a79 	.word	0x08006a79
 8006a64:	08006a81 	.word	0x08006a81
 8006a68:	08006a89 	.word	0x08006a89
 8006a6c:	08006a91 	.word	0x08006a91
 8006a70:	08006a99 	.word	0x08006a99
 8006a74:	08006aa1 	.word	0x08006aa1
 8006a78:	2300      	movs	r3, #0
 8006a7a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8006a7e:	e154      	b.n	8006d2a <UART_SetConfig+0x7ae>
 8006a80:	2304      	movs	r3, #4
 8006a82:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8006a86:	e150      	b.n	8006d2a <UART_SetConfig+0x7ae>
 8006a88:	2308      	movs	r3, #8
 8006a8a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8006a8e:	e14c      	b.n	8006d2a <UART_SetConfig+0x7ae>
 8006a90:	2310      	movs	r3, #16
 8006a92:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8006a96:	e148      	b.n	8006d2a <UART_SetConfig+0x7ae>
 8006a98:	2320      	movs	r3, #32
 8006a9a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8006a9e:	e144      	b.n	8006d2a <UART_SetConfig+0x7ae>
 8006aa0:	2340      	movs	r3, #64	; 0x40
 8006aa2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8006aa6:	e140      	b.n	8006d2a <UART_SetConfig+0x7ae>
 8006aa8:	2380      	movs	r3, #128	; 0x80
 8006aaa:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8006aae:	e13c      	b.n	8006d2a <UART_SetConfig+0x7ae>
 8006ab0:	697b      	ldr	r3, [r7, #20]
 8006ab2:	681b      	ldr	r3, [r3, #0]
 8006ab4:	4a41      	ldr	r2, [pc, #260]	; (8006bbc <UART_SetConfig+0x640>)
 8006ab6:	4293      	cmp	r3, r2
 8006ab8:	f040 8082 	bne.w	8006bc0 <UART_SetConfig+0x644>
 8006abc:	4b3c      	ldr	r3, [pc, #240]	; (8006bb0 <UART_SetConfig+0x634>)
 8006abe:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006ac0:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8006ac4:	2b28      	cmp	r3, #40	; 0x28
 8006ac6:	d86d      	bhi.n	8006ba4 <UART_SetConfig+0x628>
 8006ac8:	a201      	add	r2, pc, #4	; (adr r2, 8006ad0 <UART_SetConfig+0x554>)
 8006aca:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006ace:	bf00      	nop
 8006ad0:	08006b75 	.word	0x08006b75
 8006ad4:	08006ba5 	.word	0x08006ba5
 8006ad8:	08006ba5 	.word	0x08006ba5
 8006adc:	08006ba5 	.word	0x08006ba5
 8006ae0:	08006ba5 	.word	0x08006ba5
 8006ae4:	08006ba5 	.word	0x08006ba5
 8006ae8:	08006ba5 	.word	0x08006ba5
 8006aec:	08006ba5 	.word	0x08006ba5
 8006af0:	08006b7d 	.word	0x08006b7d
 8006af4:	08006ba5 	.word	0x08006ba5
 8006af8:	08006ba5 	.word	0x08006ba5
 8006afc:	08006ba5 	.word	0x08006ba5
 8006b00:	08006ba5 	.word	0x08006ba5
 8006b04:	08006ba5 	.word	0x08006ba5
 8006b08:	08006ba5 	.word	0x08006ba5
 8006b0c:	08006ba5 	.word	0x08006ba5
 8006b10:	08006b85 	.word	0x08006b85
 8006b14:	08006ba5 	.word	0x08006ba5
 8006b18:	08006ba5 	.word	0x08006ba5
 8006b1c:	08006ba5 	.word	0x08006ba5
 8006b20:	08006ba5 	.word	0x08006ba5
 8006b24:	08006ba5 	.word	0x08006ba5
 8006b28:	08006ba5 	.word	0x08006ba5
 8006b2c:	08006ba5 	.word	0x08006ba5
 8006b30:	08006b8d 	.word	0x08006b8d
 8006b34:	08006ba5 	.word	0x08006ba5
 8006b38:	08006ba5 	.word	0x08006ba5
 8006b3c:	08006ba5 	.word	0x08006ba5
 8006b40:	08006ba5 	.word	0x08006ba5
 8006b44:	08006ba5 	.word	0x08006ba5
 8006b48:	08006ba5 	.word	0x08006ba5
 8006b4c:	08006ba5 	.word	0x08006ba5
 8006b50:	08006b95 	.word	0x08006b95
 8006b54:	08006ba5 	.word	0x08006ba5
 8006b58:	08006ba5 	.word	0x08006ba5
 8006b5c:	08006ba5 	.word	0x08006ba5
 8006b60:	08006ba5 	.word	0x08006ba5
 8006b64:	08006ba5 	.word	0x08006ba5
 8006b68:	08006ba5 	.word	0x08006ba5
 8006b6c:	08006ba5 	.word	0x08006ba5
 8006b70:	08006b9d 	.word	0x08006b9d
 8006b74:	2301      	movs	r3, #1
 8006b76:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8006b7a:	e0d6      	b.n	8006d2a <UART_SetConfig+0x7ae>
 8006b7c:	2304      	movs	r3, #4
 8006b7e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8006b82:	e0d2      	b.n	8006d2a <UART_SetConfig+0x7ae>
 8006b84:	2308      	movs	r3, #8
 8006b86:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8006b8a:	e0ce      	b.n	8006d2a <UART_SetConfig+0x7ae>
 8006b8c:	2310      	movs	r3, #16
 8006b8e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8006b92:	e0ca      	b.n	8006d2a <UART_SetConfig+0x7ae>
 8006b94:	2320      	movs	r3, #32
 8006b96:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8006b9a:	e0c6      	b.n	8006d2a <UART_SetConfig+0x7ae>
 8006b9c:	2340      	movs	r3, #64	; 0x40
 8006b9e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8006ba2:	e0c2      	b.n	8006d2a <UART_SetConfig+0x7ae>
 8006ba4:	2380      	movs	r3, #128	; 0x80
 8006ba6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8006baa:	e0be      	b.n	8006d2a <UART_SetConfig+0x7ae>
 8006bac:	40011400 	.word	0x40011400
 8006bb0:	58024400 	.word	0x58024400
 8006bb4:	40007800 	.word	0x40007800
 8006bb8:	40007c00 	.word	0x40007c00
 8006bbc:	40011800 	.word	0x40011800
 8006bc0:	697b      	ldr	r3, [r7, #20]
 8006bc2:	681b      	ldr	r3, [r3, #0]
 8006bc4:	4aad      	ldr	r2, [pc, #692]	; (8006e7c <UART_SetConfig+0x900>)
 8006bc6:	4293      	cmp	r3, r2
 8006bc8:	d176      	bne.n	8006cb8 <UART_SetConfig+0x73c>
 8006bca:	4bad      	ldr	r3, [pc, #692]	; (8006e80 <UART_SetConfig+0x904>)
 8006bcc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006bce:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8006bd2:	2b28      	cmp	r3, #40	; 0x28
 8006bd4:	d86c      	bhi.n	8006cb0 <UART_SetConfig+0x734>
 8006bd6:	a201      	add	r2, pc, #4	; (adr r2, 8006bdc <UART_SetConfig+0x660>)
 8006bd8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006bdc:	08006c81 	.word	0x08006c81
 8006be0:	08006cb1 	.word	0x08006cb1
 8006be4:	08006cb1 	.word	0x08006cb1
 8006be8:	08006cb1 	.word	0x08006cb1
 8006bec:	08006cb1 	.word	0x08006cb1
 8006bf0:	08006cb1 	.word	0x08006cb1
 8006bf4:	08006cb1 	.word	0x08006cb1
 8006bf8:	08006cb1 	.word	0x08006cb1
 8006bfc:	08006c89 	.word	0x08006c89
 8006c00:	08006cb1 	.word	0x08006cb1
 8006c04:	08006cb1 	.word	0x08006cb1
 8006c08:	08006cb1 	.word	0x08006cb1
 8006c0c:	08006cb1 	.word	0x08006cb1
 8006c10:	08006cb1 	.word	0x08006cb1
 8006c14:	08006cb1 	.word	0x08006cb1
 8006c18:	08006cb1 	.word	0x08006cb1
 8006c1c:	08006c91 	.word	0x08006c91
 8006c20:	08006cb1 	.word	0x08006cb1
 8006c24:	08006cb1 	.word	0x08006cb1
 8006c28:	08006cb1 	.word	0x08006cb1
 8006c2c:	08006cb1 	.word	0x08006cb1
 8006c30:	08006cb1 	.word	0x08006cb1
 8006c34:	08006cb1 	.word	0x08006cb1
 8006c38:	08006cb1 	.word	0x08006cb1
 8006c3c:	08006c99 	.word	0x08006c99
 8006c40:	08006cb1 	.word	0x08006cb1
 8006c44:	08006cb1 	.word	0x08006cb1
 8006c48:	08006cb1 	.word	0x08006cb1
 8006c4c:	08006cb1 	.word	0x08006cb1
 8006c50:	08006cb1 	.word	0x08006cb1
 8006c54:	08006cb1 	.word	0x08006cb1
 8006c58:	08006cb1 	.word	0x08006cb1
 8006c5c:	08006ca1 	.word	0x08006ca1
 8006c60:	08006cb1 	.word	0x08006cb1
 8006c64:	08006cb1 	.word	0x08006cb1
 8006c68:	08006cb1 	.word	0x08006cb1
 8006c6c:	08006cb1 	.word	0x08006cb1
 8006c70:	08006cb1 	.word	0x08006cb1
 8006c74:	08006cb1 	.word	0x08006cb1
 8006c78:	08006cb1 	.word	0x08006cb1
 8006c7c:	08006ca9 	.word	0x08006ca9
 8006c80:	2301      	movs	r3, #1
 8006c82:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8006c86:	e050      	b.n	8006d2a <UART_SetConfig+0x7ae>
 8006c88:	2304      	movs	r3, #4
 8006c8a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8006c8e:	e04c      	b.n	8006d2a <UART_SetConfig+0x7ae>
 8006c90:	2308      	movs	r3, #8
 8006c92:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8006c96:	e048      	b.n	8006d2a <UART_SetConfig+0x7ae>
 8006c98:	2310      	movs	r3, #16
 8006c9a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8006c9e:	e044      	b.n	8006d2a <UART_SetConfig+0x7ae>
 8006ca0:	2320      	movs	r3, #32
 8006ca2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8006ca6:	e040      	b.n	8006d2a <UART_SetConfig+0x7ae>
 8006ca8:	2340      	movs	r3, #64	; 0x40
 8006caa:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8006cae:	e03c      	b.n	8006d2a <UART_SetConfig+0x7ae>
 8006cb0:	2380      	movs	r3, #128	; 0x80
 8006cb2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8006cb6:	e038      	b.n	8006d2a <UART_SetConfig+0x7ae>
 8006cb8:	697b      	ldr	r3, [r7, #20]
 8006cba:	681b      	ldr	r3, [r3, #0]
 8006cbc:	4a71      	ldr	r2, [pc, #452]	; (8006e84 <UART_SetConfig+0x908>)
 8006cbe:	4293      	cmp	r3, r2
 8006cc0:	d130      	bne.n	8006d24 <UART_SetConfig+0x7a8>
 8006cc2:	4b6f      	ldr	r3, [pc, #444]	; (8006e80 <UART_SetConfig+0x904>)
 8006cc4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006cc6:	f003 0307 	and.w	r3, r3, #7
 8006cca:	2b05      	cmp	r3, #5
 8006ccc:	d826      	bhi.n	8006d1c <UART_SetConfig+0x7a0>
 8006cce:	a201      	add	r2, pc, #4	; (adr r2, 8006cd4 <UART_SetConfig+0x758>)
 8006cd0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006cd4:	08006ced 	.word	0x08006ced
 8006cd8:	08006cf5 	.word	0x08006cf5
 8006cdc:	08006cfd 	.word	0x08006cfd
 8006ce0:	08006d05 	.word	0x08006d05
 8006ce4:	08006d0d 	.word	0x08006d0d
 8006ce8:	08006d15 	.word	0x08006d15
 8006cec:	2302      	movs	r3, #2
 8006cee:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8006cf2:	e01a      	b.n	8006d2a <UART_SetConfig+0x7ae>
 8006cf4:	2304      	movs	r3, #4
 8006cf6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8006cfa:	e016      	b.n	8006d2a <UART_SetConfig+0x7ae>
 8006cfc:	2308      	movs	r3, #8
 8006cfe:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8006d02:	e012      	b.n	8006d2a <UART_SetConfig+0x7ae>
 8006d04:	2310      	movs	r3, #16
 8006d06:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8006d0a:	e00e      	b.n	8006d2a <UART_SetConfig+0x7ae>
 8006d0c:	2320      	movs	r3, #32
 8006d0e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8006d12:	e00a      	b.n	8006d2a <UART_SetConfig+0x7ae>
 8006d14:	2340      	movs	r3, #64	; 0x40
 8006d16:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8006d1a:	e006      	b.n	8006d2a <UART_SetConfig+0x7ae>
 8006d1c:	2380      	movs	r3, #128	; 0x80
 8006d1e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8006d22:	e002      	b.n	8006d2a <UART_SetConfig+0x7ae>
 8006d24:	2380      	movs	r3, #128	; 0x80
 8006d26:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8006d2a:	697b      	ldr	r3, [r7, #20]
 8006d2c:	681b      	ldr	r3, [r3, #0]
 8006d2e:	4a55      	ldr	r2, [pc, #340]	; (8006e84 <UART_SetConfig+0x908>)
 8006d30:	4293      	cmp	r3, r2
 8006d32:	f040 80f8 	bne.w	8006f26 <UART_SetConfig+0x9aa>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8006d36:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 8006d3a:	2b20      	cmp	r3, #32
 8006d3c:	dc46      	bgt.n	8006dcc <UART_SetConfig+0x850>
 8006d3e:	2b02      	cmp	r3, #2
 8006d40:	db75      	blt.n	8006e2e <UART_SetConfig+0x8b2>
 8006d42:	3b02      	subs	r3, #2
 8006d44:	2b1e      	cmp	r3, #30
 8006d46:	d872      	bhi.n	8006e2e <UART_SetConfig+0x8b2>
 8006d48:	a201      	add	r2, pc, #4	; (adr r2, 8006d50 <UART_SetConfig+0x7d4>)
 8006d4a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006d4e:	bf00      	nop
 8006d50:	08006dd3 	.word	0x08006dd3
 8006d54:	08006e2f 	.word	0x08006e2f
 8006d58:	08006ddb 	.word	0x08006ddb
 8006d5c:	08006e2f 	.word	0x08006e2f
 8006d60:	08006e2f 	.word	0x08006e2f
 8006d64:	08006e2f 	.word	0x08006e2f
 8006d68:	08006deb 	.word	0x08006deb
 8006d6c:	08006e2f 	.word	0x08006e2f
 8006d70:	08006e2f 	.word	0x08006e2f
 8006d74:	08006e2f 	.word	0x08006e2f
 8006d78:	08006e2f 	.word	0x08006e2f
 8006d7c:	08006e2f 	.word	0x08006e2f
 8006d80:	08006e2f 	.word	0x08006e2f
 8006d84:	08006e2f 	.word	0x08006e2f
 8006d88:	08006dfb 	.word	0x08006dfb
 8006d8c:	08006e2f 	.word	0x08006e2f
 8006d90:	08006e2f 	.word	0x08006e2f
 8006d94:	08006e2f 	.word	0x08006e2f
 8006d98:	08006e2f 	.word	0x08006e2f
 8006d9c:	08006e2f 	.word	0x08006e2f
 8006da0:	08006e2f 	.word	0x08006e2f
 8006da4:	08006e2f 	.word	0x08006e2f
 8006da8:	08006e2f 	.word	0x08006e2f
 8006dac:	08006e2f 	.word	0x08006e2f
 8006db0:	08006e2f 	.word	0x08006e2f
 8006db4:	08006e2f 	.word	0x08006e2f
 8006db8:	08006e2f 	.word	0x08006e2f
 8006dbc:	08006e2f 	.word	0x08006e2f
 8006dc0:	08006e2f 	.word	0x08006e2f
 8006dc4:	08006e2f 	.word	0x08006e2f
 8006dc8:	08006e21 	.word	0x08006e21
 8006dcc:	2b40      	cmp	r3, #64	; 0x40
 8006dce:	d02a      	beq.n	8006e26 <UART_SetConfig+0x8aa>
 8006dd0:	e02d      	b.n	8006e2e <UART_SetConfig+0x8b2>
    {
      case UART_CLOCKSOURCE_D3PCLK1:
        pclk = HAL_RCCEx_GetD3PCLK1Freq();
 8006dd2:	f7fe faa3 	bl	800531c <HAL_RCCEx_GetD3PCLK1Freq>
 8006dd6:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 8006dd8:	e02f      	b.n	8006e3a <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8006dda:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8006dde:	4618      	mov	r0, r3
 8006de0:	f7fe fab2 	bl	8005348 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 8006de4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006de6:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8006de8:	e027      	b.n	8006e3a <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8006dea:	f107 0318 	add.w	r3, r7, #24
 8006dee:	4618      	mov	r0, r3
 8006df0:	f7fe fbfe 	bl	80055f0 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 8006df4:	69fb      	ldr	r3, [r7, #28]
 8006df6:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8006df8:	e01f      	b.n	8006e3a <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8006dfa:	4b21      	ldr	r3, [pc, #132]	; (8006e80 <UART_SetConfig+0x904>)
 8006dfc:	681b      	ldr	r3, [r3, #0]
 8006dfe:	f003 0320 	and.w	r3, r3, #32
 8006e02:	2b00      	cmp	r3, #0
 8006e04:	d009      	beq.n	8006e1a <UART_SetConfig+0x89e>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 8006e06:	4b1e      	ldr	r3, [pc, #120]	; (8006e80 <UART_SetConfig+0x904>)
 8006e08:	681b      	ldr	r3, [r3, #0]
 8006e0a:	08db      	lsrs	r3, r3, #3
 8006e0c:	f003 0303 	and.w	r3, r3, #3
 8006e10:	4a1d      	ldr	r2, [pc, #116]	; (8006e88 <UART_SetConfig+0x90c>)
 8006e12:	fa22 f303 	lsr.w	r3, r2, r3
 8006e16:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8006e18:	e00f      	b.n	8006e3a <UART_SetConfig+0x8be>
          pclk = (uint32_t) HSI_VALUE;
 8006e1a:	4b1b      	ldr	r3, [pc, #108]	; (8006e88 <UART_SetConfig+0x90c>)
 8006e1c:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8006e1e:	e00c      	b.n	8006e3a <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 8006e20:	4b1a      	ldr	r3, [pc, #104]	; (8006e8c <UART_SetConfig+0x910>)
 8006e22:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8006e24:	e009      	b.n	8006e3a <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8006e26:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8006e2a:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8006e2c:	e005      	b.n	8006e3a <UART_SetConfig+0x8be>
      default:
        pclk = 0U;
 8006e2e:	2300      	movs	r3, #0
 8006e30:	63fb      	str	r3, [r7, #60]	; 0x3c
        ret = HAL_ERROR;
 8006e32:	2301      	movs	r3, #1
 8006e34:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
        break;
 8006e38:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8006e3a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006e3c:	2b00      	cmp	r3, #0
 8006e3e:	f000 81ee 	beq.w	800721e <UART_SetConfig+0xca2>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 8006e42:	697b      	ldr	r3, [r7, #20]
 8006e44:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006e46:	4a12      	ldr	r2, [pc, #72]	; (8006e90 <UART_SetConfig+0x914>)
 8006e48:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8006e4c:	461a      	mov	r2, r3
 8006e4e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006e50:	fbb3 f3f2 	udiv	r3, r3, r2
 8006e54:	633b      	str	r3, [r7, #48]	; 0x30

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8006e56:	697b      	ldr	r3, [r7, #20]
 8006e58:	685a      	ldr	r2, [r3, #4]
 8006e5a:	4613      	mov	r3, r2
 8006e5c:	005b      	lsls	r3, r3, #1
 8006e5e:	4413      	add	r3, r2
 8006e60:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8006e62:	429a      	cmp	r2, r3
 8006e64:	d305      	bcc.n	8006e72 <UART_SetConfig+0x8f6>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 8006e66:	697b      	ldr	r3, [r7, #20]
 8006e68:	685b      	ldr	r3, [r3, #4]
 8006e6a:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8006e6c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8006e6e:	429a      	cmp	r2, r3
 8006e70:	d910      	bls.n	8006e94 <UART_SetConfig+0x918>
      {
        ret = HAL_ERROR;
 8006e72:	2301      	movs	r3, #1
 8006e74:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
 8006e78:	e1d1      	b.n	800721e <UART_SetConfig+0xca2>
 8006e7a:	bf00      	nop
 8006e7c:	40011c00 	.word	0x40011c00
 8006e80:	58024400 	.word	0x58024400
 8006e84:	58000c00 	.word	0x58000c00
 8006e88:	03d09000 	.word	0x03d09000
 8006e8c:	003d0900 	.word	0x003d0900
 8006e90:	0800b844 	.word	0x0800b844
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8006e94:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006e96:	2200      	movs	r2, #0
 8006e98:	60bb      	str	r3, [r7, #8]
 8006e9a:	60fa      	str	r2, [r7, #12]
 8006e9c:	697b      	ldr	r3, [r7, #20]
 8006e9e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006ea0:	4ac0      	ldr	r2, [pc, #768]	; (80071a4 <UART_SetConfig+0xc28>)
 8006ea2:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8006ea6:	b29b      	uxth	r3, r3
 8006ea8:	2200      	movs	r2, #0
 8006eaa:	603b      	str	r3, [r7, #0]
 8006eac:	607a      	str	r2, [r7, #4]
 8006eae:	e9d7 2300 	ldrd	r2, r3, [r7]
 8006eb2:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8006eb6:	f7f9 fa7b 	bl	80003b0 <__aeabi_uldivmod>
 8006eba:	4602      	mov	r2, r0
 8006ebc:	460b      	mov	r3, r1
 8006ebe:	4610      	mov	r0, r2
 8006ec0:	4619      	mov	r1, r3
 8006ec2:	f04f 0200 	mov.w	r2, #0
 8006ec6:	f04f 0300 	mov.w	r3, #0
 8006eca:	020b      	lsls	r3, r1, #8
 8006ecc:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 8006ed0:	0202      	lsls	r2, r0, #8
 8006ed2:	6979      	ldr	r1, [r7, #20]
 8006ed4:	6849      	ldr	r1, [r1, #4]
 8006ed6:	0849      	lsrs	r1, r1, #1
 8006ed8:	2000      	movs	r0, #0
 8006eda:	460c      	mov	r4, r1
 8006edc:	4605      	mov	r5, r0
 8006ede:	eb12 0804 	adds.w	r8, r2, r4
 8006ee2:	eb43 0905 	adc.w	r9, r3, r5
 8006ee6:	697b      	ldr	r3, [r7, #20]
 8006ee8:	685b      	ldr	r3, [r3, #4]
 8006eea:	2200      	movs	r2, #0
 8006eec:	469a      	mov	sl, r3
 8006eee:	4693      	mov	fp, r2
 8006ef0:	4652      	mov	r2, sl
 8006ef2:	465b      	mov	r3, fp
 8006ef4:	4640      	mov	r0, r8
 8006ef6:	4649      	mov	r1, r9
 8006ef8:	f7f9 fa5a 	bl	80003b0 <__aeabi_uldivmod>
 8006efc:	4602      	mov	r2, r0
 8006efe:	460b      	mov	r3, r1
 8006f00:	4613      	mov	r3, r2
 8006f02:	63bb      	str	r3, [r7, #56]	; 0x38
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8006f04:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006f06:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8006f0a:	d308      	bcc.n	8006f1e <UART_SetConfig+0x9a2>
 8006f0c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006f0e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8006f12:	d204      	bcs.n	8006f1e <UART_SetConfig+0x9a2>
        {
          huart->Instance->BRR = usartdiv;
 8006f14:	697b      	ldr	r3, [r7, #20]
 8006f16:	681b      	ldr	r3, [r3, #0]
 8006f18:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8006f1a:	60da      	str	r2, [r3, #12]
 8006f1c:	e17f      	b.n	800721e <UART_SetConfig+0xca2>
        }
        else
        {
          ret = HAL_ERROR;
 8006f1e:	2301      	movs	r3, #1
 8006f20:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
 8006f24:	e17b      	b.n	800721e <UART_SetConfig+0xca2>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8006f26:	697b      	ldr	r3, [r7, #20]
 8006f28:	69db      	ldr	r3, [r3, #28]
 8006f2a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8006f2e:	f040 80bd 	bne.w	80070ac <UART_SetConfig+0xb30>
  {
    switch (clocksource)
 8006f32:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 8006f36:	2b20      	cmp	r3, #32
 8006f38:	dc48      	bgt.n	8006fcc <UART_SetConfig+0xa50>
 8006f3a:	2b00      	cmp	r3, #0
 8006f3c:	db7b      	blt.n	8007036 <UART_SetConfig+0xaba>
 8006f3e:	2b20      	cmp	r3, #32
 8006f40:	d879      	bhi.n	8007036 <UART_SetConfig+0xaba>
 8006f42:	a201      	add	r2, pc, #4	; (adr r2, 8006f48 <UART_SetConfig+0x9cc>)
 8006f44:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006f48:	08006fd3 	.word	0x08006fd3
 8006f4c:	08006fdb 	.word	0x08006fdb
 8006f50:	08007037 	.word	0x08007037
 8006f54:	08007037 	.word	0x08007037
 8006f58:	08006fe3 	.word	0x08006fe3
 8006f5c:	08007037 	.word	0x08007037
 8006f60:	08007037 	.word	0x08007037
 8006f64:	08007037 	.word	0x08007037
 8006f68:	08006ff3 	.word	0x08006ff3
 8006f6c:	08007037 	.word	0x08007037
 8006f70:	08007037 	.word	0x08007037
 8006f74:	08007037 	.word	0x08007037
 8006f78:	08007037 	.word	0x08007037
 8006f7c:	08007037 	.word	0x08007037
 8006f80:	08007037 	.word	0x08007037
 8006f84:	08007037 	.word	0x08007037
 8006f88:	08007003 	.word	0x08007003
 8006f8c:	08007037 	.word	0x08007037
 8006f90:	08007037 	.word	0x08007037
 8006f94:	08007037 	.word	0x08007037
 8006f98:	08007037 	.word	0x08007037
 8006f9c:	08007037 	.word	0x08007037
 8006fa0:	08007037 	.word	0x08007037
 8006fa4:	08007037 	.word	0x08007037
 8006fa8:	08007037 	.word	0x08007037
 8006fac:	08007037 	.word	0x08007037
 8006fb0:	08007037 	.word	0x08007037
 8006fb4:	08007037 	.word	0x08007037
 8006fb8:	08007037 	.word	0x08007037
 8006fbc:	08007037 	.word	0x08007037
 8006fc0:	08007037 	.word	0x08007037
 8006fc4:	08007037 	.word	0x08007037
 8006fc8:	08007029 	.word	0x08007029
 8006fcc:	2b40      	cmp	r3, #64	; 0x40
 8006fce:	d02e      	beq.n	800702e <UART_SetConfig+0xab2>
 8006fd0:	e031      	b.n	8007036 <UART_SetConfig+0xaba>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8006fd2:	f7fc ffd7 	bl	8003f84 <HAL_RCC_GetPCLK1Freq>
 8006fd6:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 8006fd8:	e033      	b.n	8007042 <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8006fda:	f7fc ffe9 	bl	8003fb0 <HAL_RCC_GetPCLK2Freq>
 8006fde:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 8006fe0:	e02f      	b.n	8007042 <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8006fe2:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8006fe6:	4618      	mov	r0, r3
 8006fe8:	f7fe f9ae 	bl	8005348 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 8006fec:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006fee:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8006ff0:	e027      	b.n	8007042 <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8006ff2:	f107 0318 	add.w	r3, r7, #24
 8006ff6:	4618      	mov	r0, r3
 8006ff8:	f7fe fafa 	bl	80055f0 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 8006ffc:	69fb      	ldr	r3, [r7, #28]
 8006ffe:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8007000:	e01f      	b.n	8007042 <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8007002:	4b69      	ldr	r3, [pc, #420]	; (80071a8 <UART_SetConfig+0xc2c>)
 8007004:	681b      	ldr	r3, [r3, #0]
 8007006:	f003 0320 	and.w	r3, r3, #32
 800700a:	2b00      	cmp	r3, #0
 800700c:	d009      	beq.n	8007022 <UART_SetConfig+0xaa6>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 800700e:	4b66      	ldr	r3, [pc, #408]	; (80071a8 <UART_SetConfig+0xc2c>)
 8007010:	681b      	ldr	r3, [r3, #0]
 8007012:	08db      	lsrs	r3, r3, #3
 8007014:	f003 0303 	and.w	r3, r3, #3
 8007018:	4a64      	ldr	r2, [pc, #400]	; (80071ac <UART_SetConfig+0xc30>)
 800701a:	fa22 f303 	lsr.w	r3, r2, r3
 800701e:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8007020:	e00f      	b.n	8007042 <UART_SetConfig+0xac6>
          pclk = (uint32_t) HSI_VALUE;
 8007022:	4b62      	ldr	r3, [pc, #392]	; (80071ac <UART_SetConfig+0xc30>)
 8007024:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8007026:	e00c      	b.n	8007042 <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 8007028:	4b61      	ldr	r3, [pc, #388]	; (80071b0 <UART_SetConfig+0xc34>)
 800702a:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800702c:	e009      	b.n	8007042 <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800702e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8007032:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8007034:	e005      	b.n	8007042 <UART_SetConfig+0xac6>
      default:
        pclk = 0U;
 8007036:	2300      	movs	r3, #0
 8007038:	63fb      	str	r3, [r7, #60]	; 0x3c
        ret = HAL_ERROR;
 800703a:	2301      	movs	r3, #1
 800703c:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
        break;
 8007040:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8007042:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007044:	2b00      	cmp	r3, #0
 8007046:	f000 80ea 	beq.w	800721e <UART_SetConfig+0xca2>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800704a:	697b      	ldr	r3, [r7, #20]
 800704c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800704e:	4a55      	ldr	r2, [pc, #340]	; (80071a4 <UART_SetConfig+0xc28>)
 8007050:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8007054:	461a      	mov	r2, r3
 8007056:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007058:	fbb3 f3f2 	udiv	r3, r3, r2
 800705c:	005a      	lsls	r2, r3, #1
 800705e:	697b      	ldr	r3, [r7, #20]
 8007060:	685b      	ldr	r3, [r3, #4]
 8007062:	085b      	lsrs	r3, r3, #1
 8007064:	441a      	add	r2, r3
 8007066:	697b      	ldr	r3, [r7, #20]
 8007068:	685b      	ldr	r3, [r3, #4]
 800706a:	fbb2 f3f3 	udiv	r3, r2, r3
 800706e:	63bb      	str	r3, [r7, #56]	; 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8007070:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007072:	2b0f      	cmp	r3, #15
 8007074:	d916      	bls.n	80070a4 <UART_SetConfig+0xb28>
 8007076:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007078:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800707c:	d212      	bcs.n	80070a4 <UART_SetConfig+0xb28>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800707e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007080:	b29b      	uxth	r3, r3
 8007082:	f023 030f 	bic.w	r3, r3, #15
 8007086:	86fb      	strh	r3, [r7, #54]	; 0x36
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8007088:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800708a:	085b      	lsrs	r3, r3, #1
 800708c:	b29b      	uxth	r3, r3
 800708e:	f003 0307 	and.w	r3, r3, #7
 8007092:	b29a      	uxth	r2, r3
 8007094:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8007096:	4313      	orrs	r3, r2
 8007098:	86fb      	strh	r3, [r7, #54]	; 0x36
        huart->Instance->BRR = brrtemp;
 800709a:	697b      	ldr	r3, [r7, #20]
 800709c:	681b      	ldr	r3, [r3, #0]
 800709e:	8efa      	ldrh	r2, [r7, #54]	; 0x36
 80070a0:	60da      	str	r2, [r3, #12]
 80070a2:	e0bc      	b.n	800721e <UART_SetConfig+0xca2>
      }
      else
      {
        ret = HAL_ERROR;
 80070a4:	2301      	movs	r3, #1
 80070a6:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
 80070aa:	e0b8      	b.n	800721e <UART_SetConfig+0xca2>
      }
    }
  }
  else
  {
    switch (clocksource)
 80070ac:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 80070b0:	2b20      	cmp	r3, #32
 80070b2:	dc4b      	bgt.n	800714c <UART_SetConfig+0xbd0>
 80070b4:	2b00      	cmp	r3, #0
 80070b6:	f2c0 8087 	blt.w	80071c8 <UART_SetConfig+0xc4c>
 80070ba:	2b20      	cmp	r3, #32
 80070bc:	f200 8084 	bhi.w	80071c8 <UART_SetConfig+0xc4c>
 80070c0:	a201      	add	r2, pc, #4	; (adr r2, 80070c8 <UART_SetConfig+0xb4c>)
 80070c2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80070c6:	bf00      	nop
 80070c8:	08007153 	.word	0x08007153
 80070cc:	0800715b 	.word	0x0800715b
 80070d0:	080071c9 	.word	0x080071c9
 80070d4:	080071c9 	.word	0x080071c9
 80070d8:	08007163 	.word	0x08007163
 80070dc:	080071c9 	.word	0x080071c9
 80070e0:	080071c9 	.word	0x080071c9
 80070e4:	080071c9 	.word	0x080071c9
 80070e8:	08007173 	.word	0x08007173
 80070ec:	080071c9 	.word	0x080071c9
 80070f0:	080071c9 	.word	0x080071c9
 80070f4:	080071c9 	.word	0x080071c9
 80070f8:	080071c9 	.word	0x080071c9
 80070fc:	080071c9 	.word	0x080071c9
 8007100:	080071c9 	.word	0x080071c9
 8007104:	080071c9 	.word	0x080071c9
 8007108:	08007183 	.word	0x08007183
 800710c:	080071c9 	.word	0x080071c9
 8007110:	080071c9 	.word	0x080071c9
 8007114:	080071c9 	.word	0x080071c9
 8007118:	080071c9 	.word	0x080071c9
 800711c:	080071c9 	.word	0x080071c9
 8007120:	080071c9 	.word	0x080071c9
 8007124:	080071c9 	.word	0x080071c9
 8007128:	080071c9 	.word	0x080071c9
 800712c:	080071c9 	.word	0x080071c9
 8007130:	080071c9 	.word	0x080071c9
 8007134:	080071c9 	.word	0x080071c9
 8007138:	080071c9 	.word	0x080071c9
 800713c:	080071c9 	.word	0x080071c9
 8007140:	080071c9 	.word	0x080071c9
 8007144:	080071c9 	.word	0x080071c9
 8007148:	080071bb 	.word	0x080071bb
 800714c:	2b40      	cmp	r3, #64	; 0x40
 800714e:	d037      	beq.n	80071c0 <UART_SetConfig+0xc44>
 8007150:	e03a      	b.n	80071c8 <UART_SetConfig+0xc4c>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8007152:	f7fc ff17 	bl	8003f84 <HAL_RCC_GetPCLK1Freq>
 8007156:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 8007158:	e03c      	b.n	80071d4 <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800715a:	f7fc ff29 	bl	8003fb0 <HAL_RCC_GetPCLK2Freq>
 800715e:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 8007160:	e038      	b.n	80071d4 <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8007162:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8007166:	4618      	mov	r0, r3
 8007168:	f7fe f8ee 	bl	8005348 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 800716c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800716e:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8007170:	e030      	b.n	80071d4 <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8007172:	f107 0318 	add.w	r3, r7, #24
 8007176:	4618      	mov	r0, r3
 8007178:	f7fe fa3a 	bl	80055f0 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 800717c:	69fb      	ldr	r3, [r7, #28]
 800717e:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8007180:	e028      	b.n	80071d4 <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8007182:	4b09      	ldr	r3, [pc, #36]	; (80071a8 <UART_SetConfig+0xc2c>)
 8007184:	681b      	ldr	r3, [r3, #0]
 8007186:	f003 0320 	and.w	r3, r3, #32
 800718a:	2b00      	cmp	r3, #0
 800718c:	d012      	beq.n	80071b4 <UART_SetConfig+0xc38>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 800718e:	4b06      	ldr	r3, [pc, #24]	; (80071a8 <UART_SetConfig+0xc2c>)
 8007190:	681b      	ldr	r3, [r3, #0]
 8007192:	08db      	lsrs	r3, r3, #3
 8007194:	f003 0303 	and.w	r3, r3, #3
 8007198:	4a04      	ldr	r2, [pc, #16]	; (80071ac <UART_SetConfig+0xc30>)
 800719a:	fa22 f303 	lsr.w	r3, r2, r3
 800719e:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 80071a0:	e018      	b.n	80071d4 <UART_SetConfig+0xc58>
 80071a2:	bf00      	nop
 80071a4:	0800b844 	.word	0x0800b844
 80071a8:	58024400 	.word	0x58024400
 80071ac:	03d09000 	.word	0x03d09000
 80071b0:	003d0900 	.word	0x003d0900
          pclk = (uint32_t) HSI_VALUE;
 80071b4:	4b24      	ldr	r3, [pc, #144]	; (8007248 <UART_SetConfig+0xccc>)
 80071b6:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80071b8:	e00c      	b.n	80071d4 <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 80071ba:	4b24      	ldr	r3, [pc, #144]	; (800724c <UART_SetConfig+0xcd0>)
 80071bc:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80071be:	e009      	b.n	80071d4 <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80071c0:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80071c4:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80071c6:	e005      	b.n	80071d4 <UART_SetConfig+0xc58>
      default:
        pclk = 0U;
 80071c8:	2300      	movs	r3, #0
 80071ca:	63fb      	str	r3, [r7, #60]	; 0x3c
        ret = HAL_ERROR;
 80071cc:	2301      	movs	r3, #1
 80071ce:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
        break;
 80071d2:	bf00      	nop
    }

    if (pclk != 0U)
 80071d4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80071d6:	2b00      	cmp	r3, #0
 80071d8:	d021      	beq.n	800721e <UART_SetConfig+0xca2>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80071da:	697b      	ldr	r3, [r7, #20]
 80071dc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80071de:	4a1c      	ldr	r2, [pc, #112]	; (8007250 <UART_SetConfig+0xcd4>)
 80071e0:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80071e4:	461a      	mov	r2, r3
 80071e6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80071e8:	fbb3 f2f2 	udiv	r2, r3, r2
 80071ec:	697b      	ldr	r3, [r7, #20]
 80071ee:	685b      	ldr	r3, [r3, #4]
 80071f0:	085b      	lsrs	r3, r3, #1
 80071f2:	441a      	add	r2, r3
 80071f4:	697b      	ldr	r3, [r7, #20]
 80071f6:	685b      	ldr	r3, [r3, #4]
 80071f8:	fbb2 f3f3 	udiv	r3, r2, r3
 80071fc:	63bb      	str	r3, [r7, #56]	; 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80071fe:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007200:	2b0f      	cmp	r3, #15
 8007202:	d909      	bls.n	8007218 <UART_SetConfig+0xc9c>
 8007204:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007206:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800720a:	d205      	bcs.n	8007218 <UART_SetConfig+0xc9c>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 800720c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800720e:	b29a      	uxth	r2, r3
 8007210:	697b      	ldr	r3, [r7, #20]
 8007212:	681b      	ldr	r3, [r3, #0]
 8007214:	60da      	str	r2, [r3, #12]
 8007216:	e002      	b.n	800721e <UART_SetConfig+0xca2>
      }
      else
      {
        ret = HAL_ERROR;
 8007218:	2301      	movs	r3, #1
 800721a:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 800721e:	697b      	ldr	r3, [r7, #20]
 8007220:	2201      	movs	r2, #1
 8007222:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 8007226:	697b      	ldr	r3, [r7, #20]
 8007228:	2201      	movs	r2, #1
 800722a:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800722e:	697b      	ldr	r3, [r7, #20]
 8007230:	2200      	movs	r2, #0
 8007232:	675a      	str	r2, [r3, #116]	; 0x74
  huart->TxISR = NULL;
 8007234:	697b      	ldr	r3, [r7, #20]
 8007236:	2200      	movs	r2, #0
 8007238:	679a      	str	r2, [r3, #120]	; 0x78

  return ret;
 800723a:	f897 3042 	ldrb.w	r3, [r7, #66]	; 0x42
}
 800723e:	4618      	mov	r0, r3
 8007240:	3748      	adds	r7, #72	; 0x48
 8007242:	46bd      	mov	sp, r7
 8007244:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8007248:	03d09000 	.word	0x03d09000
 800724c:	003d0900 	.word	0x003d0900
 8007250:	0800b844 	.word	0x0800b844

08007254 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8007254:	b480      	push	{r7}
 8007256:	b083      	sub	sp, #12
 8007258:	af00      	add	r7, sp, #0
 800725a:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800725c:	687b      	ldr	r3, [r7, #4]
 800725e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007260:	f003 0301 	and.w	r3, r3, #1
 8007264:	2b00      	cmp	r3, #0
 8007266:	d00a      	beq.n	800727e <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8007268:	687b      	ldr	r3, [r7, #4]
 800726a:	681b      	ldr	r3, [r3, #0]
 800726c:	685b      	ldr	r3, [r3, #4]
 800726e:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8007272:	687b      	ldr	r3, [r7, #4]
 8007274:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007276:	687b      	ldr	r3, [r7, #4]
 8007278:	681b      	ldr	r3, [r3, #0]
 800727a:	430a      	orrs	r2, r1
 800727c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800727e:	687b      	ldr	r3, [r7, #4]
 8007280:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007282:	f003 0302 	and.w	r3, r3, #2
 8007286:	2b00      	cmp	r3, #0
 8007288:	d00a      	beq.n	80072a0 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800728a:	687b      	ldr	r3, [r7, #4]
 800728c:	681b      	ldr	r3, [r3, #0]
 800728e:	685b      	ldr	r3, [r3, #4]
 8007290:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8007294:	687b      	ldr	r3, [r7, #4]
 8007296:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8007298:	687b      	ldr	r3, [r7, #4]
 800729a:	681b      	ldr	r3, [r3, #0]
 800729c:	430a      	orrs	r2, r1
 800729e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 80072a0:	687b      	ldr	r3, [r7, #4]
 80072a2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80072a4:	f003 0304 	and.w	r3, r3, #4
 80072a8:	2b00      	cmp	r3, #0
 80072aa:	d00a      	beq.n	80072c2 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 80072ac:	687b      	ldr	r3, [r7, #4]
 80072ae:	681b      	ldr	r3, [r3, #0]
 80072b0:	685b      	ldr	r3, [r3, #4]
 80072b2:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 80072b6:	687b      	ldr	r3, [r7, #4]
 80072b8:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80072ba:	687b      	ldr	r3, [r7, #4]
 80072bc:	681b      	ldr	r3, [r3, #0]
 80072be:	430a      	orrs	r2, r1
 80072c0:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 80072c2:	687b      	ldr	r3, [r7, #4]
 80072c4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80072c6:	f003 0308 	and.w	r3, r3, #8
 80072ca:	2b00      	cmp	r3, #0
 80072cc:	d00a      	beq.n	80072e4 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 80072ce:	687b      	ldr	r3, [r7, #4]
 80072d0:	681b      	ldr	r3, [r3, #0]
 80072d2:	685b      	ldr	r3, [r3, #4]
 80072d4:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 80072d8:	687b      	ldr	r3, [r7, #4]
 80072da:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80072dc:	687b      	ldr	r3, [r7, #4]
 80072de:	681b      	ldr	r3, [r3, #0]
 80072e0:	430a      	orrs	r2, r1
 80072e2:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 80072e4:	687b      	ldr	r3, [r7, #4]
 80072e6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80072e8:	f003 0310 	and.w	r3, r3, #16
 80072ec:	2b00      	cmp	r3, #0
 80072ee:	d00a      	beq.n	8007306 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 80072f0:	687b      	ldr	r3, [r7, #4]
 80072f2:	681b      	ldr	r3, [r3, #0]
 80072f4:	689b      	ldr	r3, [r3, #8]
 80072f6:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 80072fa:	687b      	ldr	r3, [r7, #4]
 80072fc:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80072fe:	687b      	ldr	r3, [r7, #4]
 8007300:	681b      	ldr	r3, [r3, #0]
 8007302:	430a      	orrs	r2, r1
 8007304:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8007306:	687b      	ldr	r3, [r7, #4]
 8007308:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800730a:	f003 0320 	and.w	r3, r3, #32
 800730e:	2b00      	cmp	r3, #0
 8007310:	d00a      	beq.n	8007328 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8007312:	687b      	ldr	r3, [r7, #4]
 8007314:	681b      	ldr	r3, [r3, #0]
 8007316:	689b      	ldr	r3, [r3, #8]
 8007318:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 800731c:	687b      	ldr	r3, [r7, #4]
 800731e:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8007320:	687b      	ldr	r3, [r7, #4]
 8007322:	681b      	ldr	r3, [r3, #0]
 8007324:	430a      	orrs	r2, r1
 8007326:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8007328:	687b      	ldr	r3, [r7, #4]
 800732a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800732c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007330:	2b00      	cmp	r3, #0
 8007332:	d01a      	beq.n	800736a <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8007334:	687b      	ldr	r3, [r7, #4]
 8007336:	681b      	ldr	r3, [r3, #0]
 8007338:	685b      	ldr	r3, [r3, #4]
 800733a:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 800733e:	687b      	ldr	r3, [r7, #4]
 8007340:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8007342:	687b      	ldr	r3, [r7, #4]
 8007344:	681b      	ldr	r3, [r3, #0]
 8007346:	430a      	orrs	r2, r1
 8007348:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800734a:	687b      	ldr	r3, [r7, #4]
 800734c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800734e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8007352:	d10a      	bne.n	800736a <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8007354:	687b      	ldr	r3, [r7, #4]
 8007356:	681b      	ldr	r3, [r3, #0]
 8007358:	685b      	ldr	r3, [r3, #4]
 800735a:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 800735e:	687b      	ldr	r3, [r7, #4]
 8007360:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8007362:	687b      	ldr	r3, [r7, #4]
 8007364:	681b      	ldr	r3, [r3, #0]
 8007366:	430a      	orrs	r2, r1
 8007368:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800736a:	687b      	ldr	r3, [r7, #4]
 800736c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800736e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007372:	2b00      	cmp	r3, #0
 8007374:	d00a      	beq.n	800738c <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8007376:	687b      	ldr	r3, [r7, #4]
 8007378:	681b      	ldr	r3, [r3, #0]
 800737a:	685b      	ldr	r3, [r3, #4]
 800737c:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8007380:	687b      	ldr	r3, [r7, #4]
 8007382:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8007384:	687b      	ldr	r3, [r7, #4]
 8007386:	681b      	ldr	r3, [r3, #0]
 8007388:	430a      	orrs	r2, r1
 800738a:	605a      	str	r2, [r3, #4]
  }
}
 800738c:	bf00      	nop
 800738e:	370c      	adds	r7, #12
 8007390:	46bd      	mov	sp, r7
 8007392:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007396:	4770      	bx	lr

08007398 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8007398:	b580      	push	{r7, lr}
 800739a:	b098      	sub	sp, #96	; 0x60
 800739c:	af02      	add	r7, sp, #8
 800739e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80073a0:	687b      	ldr	r3, [r7, #4]
 80073a2:	2200      	movs	r2, #0
 80073a4:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 80073a8:	f7fa fb80 	bl	8001aac <HAL_GetTick>
 80073ac:	6578      	str	r0, [r7, #84]	; 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 80073ae:	687b      	ldr	r3, [r7, #4]
 80073b0:	681b      	ldr	r3, [r3, #0]
 80073b2:	681b      	ldr	r3, [r3, #0]
 80073b4:	f003 0308 	and.w	r3, r3, #8
 80073b8:	2b08      	cmp	r3, #8
 80073ba:	d12f      	bne.n	800741c <UART_CheckIdleState+0x84>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80073bc:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 80073c0:	9300      	str	r3, [sp, #0]
 80073c2:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80073c4:	2200      	movs	r2, #0
 80073c6:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 80073ca:	6878      	ldr	r0, [r7, #4]
 80073cc:	f000 f88e 	bl	80074ec <UART_WaitOnFlagUntilTimeout>
 80073d0:	4603      	mov	r3, r0
 80073d2:	2b00      	cmp	r3, #0
 80073d4:	d022      	beq.n	800741c <UART_CheckIdleState+0x84>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 80073d6:	687b      	ldr	r3, [r7, #4]
 80073d8:	681b      	ldr	r3, [r3, #0]
 80073da:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80073dc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80073de:	e853 3f00 	ldrex	r3, [r3]
 80073e2:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 80073e4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80073e6:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80073ea:	653b      	str	r3, [r7, #80]	; 0x50
 80073ec:	687b      	ldr	r3, [r7, #4]
 80073ee:	681b      	ldr	r3, [r3, #0]
 80073f0:	461a      	mov	r2, r3
 80073f2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80073f4:	647b      	str	r3, [r7, #68]	; 0x44
 80073f6:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80073f8:	6c39      	ldr	r1, [r7, #64]	; 0x40
 80073fa:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80073fc:	e841 2300 	strex	r3, r2, [r1]
 8007400:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8007402:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007404:	2b00      	cmp	r3, #0
 8007406:	d1e6      	bne.n	80073d6 <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 8007408:	687b      	ldr	r3, [r7, #4]
 800740a:	2220      	movs	r2, #32
 800740c:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

      __HAL_UNLOCK(huart);
 8007410:	687b      	ldr	r3, [r7, #4]
 8007412:	2200      	movs	r2, #0
 8007414:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8007418:	2303      	movs	r3, #3
 800741a:	e063      	b.n	80074e4 <UART_CheckIdleState+0x14c>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800741c:	687b      	ldr	r3, [r7, #4]
 800741e:	681b      	ldr	r3, [r3, #0]
 8007420:	681b      	ldr	r3, [r3, #0]
 8007422:	f003 0304 	and.w	r3, r3, #4
 8007426:	2b04      	cmp	r3, #4
 8007428:	d149      	bne.n	80074be <UART_CheckIdleState+0x126>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800742a:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800742e:	9300      	str	r3, [sp, #0]
 8007430:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8007432:	2200      	movs	r2, #0
 8007434:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8007438:	6878      	ldr	r0, [r7, #4]
 800743a:	f000 f857 	bl	80074ec <UART_WaitOnFlagUntilTimeout>
 800743e:	4603      	mov	r3, r0
 8007440:	2b00      	cmp	r3, #0
 8007442:	d03c      	beq.n	80074be <UART_CheckIdleState+0x126>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8007444:	687b      	ldr	r3, [r7, #4]
 8007446:	681b      	ldr	r3, [r3, #0]
 8007448:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800744a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800744c:	e853 3f00 	ldrex	r3, [r3]
 8007450:	623b      	str	r3, [r7, #32]
   return(result);
 8007452:	6a3b      	ldr	r3, [r7, #32]
 8007454:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8007458:	64fb      	str	r3, [r7, #76]	; 0x4c
 800745a:	687b      	ldr	r3, [r7, #4]
 800745c:	681b      	ldr	r3, [r3, #0]
 800745e:	461a      	mov	r2, r3
 8007460:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8007462:	633b      	str	r3, [r7, #48]	; 0x30
 8007464:	62fa      	str	r2, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007466:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8007468:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800746a:	e841 2300 	strex	r3, r2, [r1]
 800746e:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8007470:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007472:	2b00      	cmp	r3, #0
 8007474:	d1e6      	bne.n	8007444 <UART_CheckIdleState+0xac>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007476:	687b      	ldr	r3, [r7, #4]
 8007478:	681b      	ldr	r3, [r3, #0]
 800747a:	3308      	adds	r3, #8
 800747c:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800747e:	693b      	ldr	r3, [r7, #16]
 8007480:	e853 3f00 	ldrex	r3, [r3]
 8007484:	60fb      	str	r3, [r7, #12]
   return(result);
 8007486:	68fb      	ldr	r3, [r7, #12]
 8007488:	f023 0301 	bic.w	r3, r3, #1
 800748c:	64bb      	str	r3, [r7, #72]	; 0x48
 800748e:	687b      	ldr	r3, [r7, #4]
 8007490:	681b      	ldr	r3, [r3, #0]
 8007492:	3308      	adds	r3, #8
 8007494:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8007496:	61fa      	str	r2, [r7, #28]
 8007498:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800749a:	69b9      	ldr	r1, [r7, #24]
 800749c:	69fa      	ldr	r2, [r7, #28]
 800749e:	e841 2300 	strex	r3, r2, [r1]
 80074a2:	617b      	str	r3, [r7, #20]
   return(result);
 80074a4:	697b      	ldr	r3, [r7, #20]
 80074a6:	2b00      	cmp	r3, #0
 80074a8:	d1e5      	bne.n	8007476 <UART_CheckIdleState+0xde>

      huart->RxState = HAL_UART_STATE_READY;
 80074aa:	687b      	ldr	r3, [r7, #4]
 80074ac:	2220      	movs	r2, #32
 80074ae:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

      __HAL_UNLOCK(huart);
 80074b2:	687b      	ldr	r3, [r7, #4]
 80074b4:	2200      	movs	r2, #0
 80074b6:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 80074ba:	2303      	movs	r3, #3
 80074bc:	e012      	b.n	80074e4 <UART_CheckIdleState+0x14c>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 80074be:	687b      	ldr	r3, [r7, #4]
 80074c0:	2220      	movs	r2, #32
 80074c2:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->RxState = HAL_UART_STATE_READY;
 80074c6:	687b      	ldr	r3, [r7, #4]
 80074c8:	2220      	movs	r2, #32
 80074ca:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80074ce:	687b      	ldr	r3, [r7, #4]
 80074d0:	2200      	movs	r2, #0
 80074d2:	66da      	str	r2, [r3, #108]	; 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 80074d4:	687b      	ldr	r3, [r7, #4]
 80074d6:	2200      	movs	r2, #0
 80074d8:	671a      	str	r2, [r3, #112]	; 0x70

  __HAL_UNLOCK(huart);
 80074da:	687b      	ldr	r3, [r7, #4]
 80074dc:	2200      	movs	r2, #0
 80074de:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 80074e2:	2300      	movs	r3, #0
}
 80074e4:	4618      	mov	r0, r3
 80074e6:	3758      	adds	r7, #88	; 0x58
 80074e8:	46bd      	mov	sp, r7
 80074ea:	bd80      	pop	{r7, pc}

080074ec <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 80074ec:	b580      	push	{r7, lr}
 80074ee:	b084      	sub	sp, #16
 80074f0:	af00      	add	r7, sp, #0
 80074f2:	60f8      	str	r0, [r7, #12]
 80074f4:	60b9      	str	r1, [r7, #8]
 80074f6:	603b      	str	r3, [r7, #0]
 80074f8:	4613      	mov	r3, r2
 80074fa:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80074fc:	e049      	b.n	8007592 <UART_WaitOnFlagUntilTimeout+0xa6>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80074fe:	69bb      	ldr	r3, [r7, #24]
 8007500:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007504:	d045      	beq.n	8007592 <UART_WaitOnFlagUntilTimeout+0xa6>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8007506:	f7fa fad1 	bl	8001aac <HAL_GetTick>
 800750a:	4602      	mov	r2, r0
 800750c:	683b      	ldr	r3, [r7, #0]
 800750e:	1ad3      	subs	r3, r2, r3
 8007510:	69ba      	ldr	r2, [r7, #24]
 8007512:	429a      	cmp	r2, r3
 8007514:	d302      	bcc.n	800751c <UART_WaitOnFlagUntilTimeout+0x30>
 8007516:	69bb      	ldr	r3, [r7, #24]
 8007518:	2b00      	cmp	r3, #0
 800751a:	d101      	bne.n	8007520 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 800751c:	2303      	movs	r3, #3
 800751e:	e048      	b.n	80075b2 <UART_WaitOnFlagUntilTimeout+0xc6>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8007520:	68fb      	ldr	r3, [r7, #12]
 8007522:	681b      	ldr	r3, [r3, #0]
 8007524:	681b      	ldr	r3, [r3, #0]
 8007526:	f003 0304 	and.w	r3, r3, #4
 800752a:	2b00      	cmp	r3, #0
 800752c:	d031      	beq.n	8007592 <UART_WaitOnFlagUntilTimeout+0xa6>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 800752e:	68fb      	ldr	r3, [r7, #12]
 8007530:	681b      	ldr	r3, [r3, #0]
 8007532:	69db      	ldr	r3, [r3, #28]
 8007534:	f003 0308 	and.w	r3, r3, #8
 8007538:	2b08      	cmp	r3, #8
 800753a:	d110      	bne.n	800755e <UART_WaitOnFlagUntilTimeout+0x72>
        {
           /* Clear Overrun Error flag*/
           __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 800753c:	68fb      	ldr	r3, [r7, #12]
 800753e:	681b      	ldr	r3, [r3, #0]
 8007540:	2208      	movs	r2, #8
 8007542:	621a      	str	r2, [r3, #32]

           /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts if ongoing */
           UART_EndRxTransfer(huart);
 8007544:	68f8      	ldr	r0, [r7, #12]
 8007546:	f000 f839 	bl	80075bc <UART_EndRxTransfer>

           huart->ErrorCode = HAL_UART_ERROR_ORE;
 800754a:	68fb      	ldr	r3, [r7, #12]
 800754c:	2208      	movs	r2, #8
 800754e:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

           /* Process Unlocked */
           __HAL_UNLOCK(huart);
 8007552:	68fb      	ldr	r3, [r7, #12]
 8007554:	2200      	movs	r2, #0
 8007556:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

           return HAL_ERROR;
 800755a:	2301      	movs	r3, #1
 800755c:	e029      	b.n	80075b2 <UART_WaitOnFlagUntilTimeout+0xc6>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800755e:	68fb      	ldr	r3, [r7, #12]
 8007560:	681b      	ldr	r3, [r3, #0]
 8007562:	69db      	ldr	r3, [r3, #28]
 8007564:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8007568:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800756c:	d111      	bne.n	8007592 <UART_WaitOnFlagUntilTimeout+0xa6>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800756e:	68fb      	ldr	r3, [r7, #12]
 8007570:	681b      	ldr	r3, [r3, #0]
 8007572:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8007576:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8007578:	68f8      	ldr	r0, [r7, #12]
 800757a:	f000 f81f 	bl	80075bc <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800757e:	68fb      	ldr	r3, [r7, #12]
 8007580:	2220      	movs	r2, #32
 8007582:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8007586:	68fb      	ldr	r3, [r7, #12]
 8007588:	2200      	movs	r2, #0
 800758a:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

          return HAL_TIMEOUT;
 800758e:	2303      	movs	r3, #3
 8007590:	e00f      	b.n	80075b2 <UART_WaitOnFlagUntilTimeout+0xc6>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8007592:	68fb      	ldr	r3, [r7, #12]
 8007594:	681b      	ldr	r3, [r3, #0]
 8007596:	69da      	ldr	r2, [r3, #28]
 8007598:	68bb      	ldr	r3, [r7, #8]
 800759a:	4013      	ands	r3, r2
 800759c:	68ba      	ldr	r2, [r7, #8]
 800759e:	429a      	cmp	r2, r3
 80075a0:	bf0c      	ite	eq
 80075a2:	2301      	moveq	r3, #1
 80075a4:	2300      	movne	r3, #0
 80075a6:	b2db      	uxtb	r3, r3
 80075a8:	461a      	mov	r2, r3
 80075aa:	79fb      	ldrb	r3, [r7, #7]
 80075ac:	429a      	cmp	r2, r3
 80075ae:	d0a6      	beq.n	80074fe <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80075b0:	2300      	movs	r3, #0
}
 80075b2:	4618      	mov	r0, r3
 80075b4:	3710      	adds	r7, #16
 80075b6:	46bd      	mov	sp, r7
 80075b8:	bd80      	pop	{r7, pc}
	...

080075bc <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80075bc:	b480      	push	{r7}
 80075be:	b095      	sub	sp, #84	; 0x54
 80075c0:	af00      	add	r7, sp, #0
 80075c2:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 80075c4:	687b      	ldr	r3, [r7, #4]
 80075c6:	681b      	ldr	r3, [r3, #0]
 80075c8:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80075ca:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80075cc:	e853 3f00 	ldrex	r3, [r3]
 80075d0:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 80075d2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80075d4:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80075d8:	64fb      	str	r3, [r7, #76]	; 0x4c
 80075da:	687b      	ldr	r3, [r7, #4]
 80075dc:	681b      	ldr	r3, [r3, #0]
 80075de:	461a      	mov	r2, r3
 80075e0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80075e2:	643b      	str	r3, [r7, #64]	; 0x40
 80075e4:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80075e6:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 80075e8:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 80075ea:	e841 2300 	strex	r3, r2, [r1]
 80075ee:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 80075f0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80075f2:	2b00      	cmp	r3, #0
 80075f4:	d1e6      	bne.n	80075c4 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 80075f6:	687b      	ldr	r3, [r7, #4]
 80075f8:	681b      	ldr	r3, [r3, #0]
 80075fa:	3308      	adds	r3, #8
 80075fc:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80075fe:	6a3b      	ldr	r3, [r7, #32]
 8007600:	e853 3f00 	ldrex	r3, [r3]
 8007604:	61fb      	str	r3, [r7, #28]
   return(result);
 8007606:	69fa      	ldr	r2, [r7, #28]
 8007608:	4b1e      	ldr	r3, [pc, #120]	; (8007684 <UART_EndRxTransfer+0xc8>)
 800760a:	4013      	ands	r3, r2
 800760c:	64bb      	str	r3, [r7, #72]	; 0x48
 800760e:	687b      	ldr	r3, [r7, #4]
 8007610:	681b      	ldr	r3, [r3, #0]
 8007612:	3308      	adds	r3, #8
 8007614:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8007616:	62fa      	str	r2, [r7, #44]	; 0x2c
 8007618:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800761a:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800761c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800761e:	e841 2300 	strex	r3, r2, [r1]
 8007622:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8007624:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007626:	2b00      	cmp	r3, #0
 8007628:	d1e5      	bne.n	80075f6 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800762a:	687b      	ldr	r3, [r7, #4]
 800762c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800762e:	2b01      	cmp	r3, #1
 8007630:	d118      	bne.n	8007664 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007632:	687b      	ldr	r3, [r7, #4]
 8007634:	681b      	ldr	r3, [r3, #0]
 8007636:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007638:	68fb      	ldr	r3, [r7, #12]
 800763a:	e853 3f00 	ldrex	r3, [r3]
 800763e:	60bb      	str	r3, [r7, #8]
   return(result);
 8007640:	68bb      	ldr	r3, [r7, #8]
 8007642:	f023 0310 	bic.w	r3, r3, #16
 8007646:	647b      	str	r3, [r7, #68]	; 0x44
 8007648:	687b      	ldr	r3, [r7, #4]
 800764a:	681b      	ldr	r3, [r3, #0]
 800764c:	461a      	mov	r2, r3
 800764e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8007650:	61bb      	str	r3, [r7, #24]
 8007652:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007654:	6979      	ldr	r1, [r7, #20]
 8007656:	69ba      	ldr	r2, [r7, #24]
 8007658:	e841 2300 	strex	r3, r2, [r1]
 800765c:	613b      	str	r3, [r7, #16]
   return(result);
 800765e:	693b      	ldr	r3, [r7, #16]
 8007660:	2b00      	cmp	r3, #0
 8007662:	d1e6      	bne.n	8007632 <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8007664:	687b      	ldr	r3, [r7, #4]
 8007666:	2220      	movs	r2, #32
 8007668:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800766c:	687b      	ldr	r3, [r7, #4]
 800766e:	2200      	movs	r2, #0
 8007670:	66da      	str	r2, [r3, #108]	; 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8007672:	687b      	ldr	r3, [r7, #4]
 8007674:	2200      	movs	r2, #0
 8007676:	675a      	str	r2, [r3, #116]	; 0x74
}
 8007678:	bf00      	nop
 800767a:	3754      	adds	r7, #84	; 0x54
 800767c:	46bd      	mov	sp, r7
 800767e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007682:	4770      	bx	lr
 8007684:	effffffe 	.word	0xeffffffe

08007688 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8007688:	b580      	push	{r7, lr}
 800768a:	b084      	sub	sp, #16
 800768c:	af00      	add	r7, sp, #0
 800768e:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8007690:	687b      	ldr	r3, [r7, #4]
 8007692:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007694:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 8007696:	68fb      	ldr	r3, [r7, #12]
 8007698:	2200      	movs	r2, #0
 800769a:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
  huart->TxXferCount = 0U;
 800769e:	68fb      	ldr	r3, [r7, #12]
 80076a0:	2200      	movs	r2, #0
 80076a2:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 80076a6:	68f8      	ldr	r0, [r7, #12]
 80076a8:	f7fe ff52 	bl	8006550 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80076ac:	bf00      	nop
 80076ae:	3710      	adds	r7, #16
 80076b0:	46bd      	mov	sp, r7
 80076b2:	bd80      	pop	{r7, pc}

080076b4 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 80076b4:	b580      	push	{r7, lr}
 80076b6:	b088      	sub	sp, #32
 80076b8:	af00      	add	r7, sp, #0
 80076ba:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 80076bc:	687b      	ldr	r3, [r7, #4]
 80076be:	681b      	ldr	r3, [r3, #0]
 80076c0:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80076c2:	68fb      	ldr	r3, [r7, #12]
 80076c4:	e853 3f00 	ldrex	r3, [r3]
 80076c8:	60bb      	str	r3, [r7, #8]
   return(result);
 80076ca:	68bb      	ldr	r3, [r7, #8]
 80076cc:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80076d0:	61fb      	str	r3, [r7, #28]
 80076d2:	687b      	ldr	r3, [r7, #4]
 80076d4:	681b      	ldr	r3, [r3, #0]
 80076d6:	461a      	mov	r2, r3
 80076d8:	69fb      	ldr	r3, [r7, #28]
 80076da:	61bb      	str	r3, [r7, #24]
 80076dc:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80076de:	6979      	ldr	r1, [r7, #20]
 80076e0:	69ba      	ldr	r2, [r7, #24]
 80076e2:	e841 2300 	strex	r3, r2, [r1]
 80076e6:	613b      	str	r3, [r7, #16]
   return(result);
 80076e8:	693b      	ldr	r3, [r7, #16]
 80076ea:	2b00      	cmp	r3, #0
 80076ec:	d1e6      	bne.n	80076bc <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80076ee:	687b      	ldr	r3, [r7, #4]
 80076f0:	2220      	movs	r2, #32
 80076f2:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 80076f6:	687b      	ldr	r3, [r7, #4]
 80076f8:	2200      	movs	r2, #0
 80076fa:	679a      	str	r2, [r3, #120]	; 0x78
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 80076fc:	6878      	ldr	r0, [r7, #4]
 80076fe:	f7fe ff1d 	bl	800653c <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8007702:	bf00      	nop
 8007704:	3720      	adds	r7, #32
 8007706:	46bd      	mov	sp, r7
 8007708:	bd80      	pop	{r7, pc}

0800770a <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 800770a:	b480      	push	{r7}
 800770c:	b083      	sub	sp, #12
 800770e:	af00      	add	r7, sp, #0
 8007710:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 8007712:	bf00      	nop
 8007714:	370c      	adds	r7, #12
 8007716:	46bd      	mov	sp, r7
 8007718:	f85d 7b04 	ldr.w	r7, [sp], #4
 800771c:	4770      	bx	lr

0800771e <HAL_UARTEx_RxFifoFullCallback>:
  * @brief  UART RX Fifo full callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_RxFifoFullCallback(UART_HandleTypeDef *huart)
{
 800771e:	b480      	push	{r7}
 8007720:	b083      	sub	sp, #12
 8007722:	af00      	add	r7, sp, #0
 8007724:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxFifoFullCallback can be implemented in the user file.
   */
}
 8007726:	bf00      	nop
 8007728:	370c      	adds	r7, #12
 800772a:	46bd      	mov	sp, r7
 800772c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007730:	4770      	bx	lr

08007732 <HAL_UARTEx_TxFifoEmptyCallback>:
  * @brief  UART TX Fifo empty callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_TxFifoEmptyCallback(UART_HandleTypeDef *huart)
{
 8007732:	b480      	push	{r7}
 8007734:	b083      	sub	sp, #12
 8007736:	af00      	add	r7, sp, #0
 8007738:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_TxFifoEmptyCallback can be implemented in the user file.
   */
}
 800773a:	bf00      	nop
 800773c:	370c      	adds	r7, #12
 800773e:	46bd      	mov	sp, r7
 8007740:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007744:	4770      	bx	lr

08007746 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 8007746:	b480      	push	{r7}
 8007748:	b085      	sub	sp, #20
 800774a:	af00      	add	r7, sp, #0
 800774c:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 800774e:	687b      	ldr	r3, [r7, #4]
 8007750:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 8007754:	2b01      	cmp	r3, #1
 8007756:	d101      	bne.n	800775c <HAL_UARTEx_DisableFifoMode+0x16>
 8007758:	2302      	movs	r3, #2
 800775a:	e027      	b.n	80077ac <HAL_UARTEx_DisableFifoMode+0x66>
 800775c:	687b      	ldr	r3, [r7, #4]
 800775e:	2201      	movs	r2, #1
 8007760:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8007764:	687b      	ldr	r3, [r7, #4]
 8007766:	2224      	movs	r2, #36	; 0x24
 8007768:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800776c:	687b      	ldr	r3, [r7, #4]
 800776e:	681b      	ldr	r3, [r3, #0]
 8007770:	681b      	ldr	r3, [r3, #0]
 8007772:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8007774:	687b      	ldr	r3, [r7, #4]
 8007776:	681b      	ldr	r3, [r3, #0]
 8007778:	681a      	ldr	r2, [r3, #0]
 800777a:	687b      	ldr	r3, [r7, #4]
 800777c:	681b      	ldr	r3, [r3, #0]
 800777e:	f022 0201 	bic.w	r2, r2, #1
 8007782:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 8007784:	68fb      	ldr	r3, [r7, #12]
 8007786:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 800778a:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 800778c:	687b      	ldr	r3, [r7, #4]
 800778e:	2200      	movs	r2, #0
 8007790:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8007792:	687b      	ldr	r3, [r7, #4]
 8007794:	681b      	ldr	r3, [r3, #0]
 8007796:	68fa      	ldr	r2, [r7, #12]
 8007798:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800779a:	687b      	ldr	r3, [r7, #4]
 800779c:	2220      	movs	r2, #32
 800779e:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80077a2:	687b      	ldr	r3, [r7, #4]
 80077a4:	2200      	movs	r2, #0
 80077a6:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 80077aa:	2300      	movs	r3, #0
}
 80077ac:	4618      	mov	r0, r3
 80077ae:	3714      	adds	r7, #20
 80077b0:	46bd      	mov	sp, r7
 80077b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80077b6:	4770      	bx	lr

080077b8 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 80077b8:	b580      	push	{r7, lr}
 80077ba:	b084      	sub	sp, #16
 80077bc:	af00      	add	r7, sp, #0
 80077be:	6078      	str	r0, [r7, #4]
 80077c0:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 80077c2:	687b      	ldr	r3, [r7, #4]
 80077c4:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 80077c8:	2b01      	cmp	r3, #1
 80077ca:	d101      	bne.n	80077d0 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 80077cc:	2302      	movs	r3, #2
 80077ce:	e02d      	b.n	800782c <HAL_UARTEx_SetTxFifoThreshold+0x74>
 80077d0:	687b      	ldr	r3, [r7, #4]
 80077d2:	2201      	movs	r2, #1
 80077d4:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 80077d8:	687b      	ldr	r3, [r7, #4]
 80077da:	2224      	movs	r2, #36	; 0x24
 80077dc:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 80077e0:	687b      	ldr	r3, [r7, #4]
 80077e2:	681b      	ldr	r3, [r3, #0]
 80077e4:	681b      	ldr	r3, [r3, #0]
 80077e6:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 80077e8:	687b      	ldr	r3, [r7, #4]
 80077ea:	681b      	ldr	r3, [r3, #0]
 80077ec:	681a      	ldr	r2, [r3, #0]
 80077ee:	687b      	ldr	r3, [r7, #4]
 80077f0:	681b      	ldr	r3, [r3, #0]
 80077f2:	f022 0201 	bic.w	r2, r2, #1
 80077f6:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 80077f8:	687b      	ldr	r3, [r7, #4]
 80077fa:	681b      	ldr	r3, [r3, #0]
 80077fc:	689b      	ldr	r3, [r3, #8]
 80077fe:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 8007802:	687b      	ldr	r3, [r7, #4]
 8007804:	681b      	ldr	r3, [r3, #0]
 8007806:	683a      	ldr	r2, [r7, #0]
 8007808:	430a      	orrs	r2, r1
 800780a:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800780c:	6878      	ldr	r0, [r7, #4]
 800780e:	f000 f84f 	bl	80078b0 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8007812:	687b      	ldr	r3, [r7, #4]
 8007814:	681b      	ldr	r3, [r3, #0]
 8007816:	68fa      	ldr	r2, [r7, #12]
 8007818:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800781a:	687b      	ldr	r3, [r7, #4]
 800781c:	2220      	movs	r2, #32
 800781e:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8007822:	687b      	ldr	r3, [r7, #4]
 8007824:	2200      	movs	r2, #0
 8007826:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 800782a:	2300      	movs	r3, #0
}
 800782c:	4618      	mov	r0, r3
 800782e:	3710      	adds	r7, #16
 8007830:	46bd      	mov	sp, r7
 8007832:	bd80      	pop	{r7, pc}

08007834 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8007834:	b580      	push	{r7, lr}
 8007836:	b084      	sub	sp, #16
 8007838:	af00      	add	r7, sp, #0
 800783a:	6078      	str	r0, [r7, #4]
 800783c:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800783e:	687b      	ldr	r3, [r7, #4]
 8007840:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 8007844:	2b01      	cmp	r3, #1
 8007846:	d101      	bne.n	800784c <HAL_UARTEx_SetRxFifoThreshold+0x18>
 8007848:	2302      	movs	r3, #2
 800784a:	e02d      	b.n	80078a8 <HAL_UARTEx_SetRxFifoThreshold+0x74>
 800784c:	687b      	ldr	r3, [r7, #4]
 800784e:	2201      	movs	r2, #1
 8007850:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8007854:	687b      	ldr	r3, [r7, #4]
 8007856:	2224      	movs	r2, #36	; 0x24
 8007858:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800785c:	687b      	ldr	r3, [r7, #4]
 800785e:	681b      	ldr	r3, [r3, #0]
 8007860:	681b      	ldr	r3, [r3, #0]
 8007862:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8007864:	687b      	ldr	r3, [r7, #4]
 8007866:	681b      	ldr	r3, [r3, #0]
 8007868:	681a      	ldr	r2, [r3, #0]
 800786a:	687b      	ldr	r3, [r7, #4]
 800786c:	681b      	ldr	r3, [r3, #0]
 800786e:	f022 0201 	bic.w	r2, r2, #1
 8007872:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 8007874:	687b      	ldr	r3, [r7, #4]
 8007876:	681b      	ldr	r3, [r3, #0]
 8007878:	689b      	ldr	r3, [r3, #8]
 800787a:	f023 6160 	bic.w	r1, r3, #234881024	; 0xe000000
 800787e:	687b      	ldr	r3, [r7, #4]
 8007880:	681b      	ldr	r3, [r3, #0]
 8007882:	683a      	ldr	r2, [r7, #0]
 8007884:	430a      	orrs	r2, r1
 8007886:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8007888:	6878      	ldr	r0, [r7, #4]
 800788a:	f000 f811 	bl	80078b0 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800788e:	687b      	ldr	r3, [r7, #4]
 8007890:	681b      	ldr	r3, [r3, #0]
 8007892:	68fa      	ldr	r2, [r7, #12]
 8007894:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8007896:	687b      	ldr	r3, [r7, #4]
 8007898:	2220      	movs	r2, #32
 800789a:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800789e:	687b      	ldr	r3, [r7, #4]
 80078a0:	2200      	movs	r2, #0
 80078a2:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 80078a6:	2300      	movs	r3, #0
}
 80078a8:	4618      	mov	r0, r3
 80078aa:	3710      	adds	r7, #16
 80078ac:	46bd      	mov	sp, r7
 80078ae:	bd80      	pop	{r7, pc}

080078b0 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 80078b0:	b480      	push	{r7}
 80078b2:	b085      	sub	sp, #20
 80078b4:	af00      	add	r7, sp, #0
 80078b6:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 80078b8:	687b      	ldr	r3, [r7, #4]
 80078ba:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80078bc:	2b00      	cmp	r3, #0
 80078be:	d108      	bne.n	80078d2 <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 80078c0:	687b      	ldr	r3, [r7, #4]
 80078c2:	2201      	movs	r2, #1
 80078c4:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
 80078c8:	687b      	ldr	r3, [r7, #4]
 80078ca:	2201      	movs	r2, #1
 80078cc:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 80078d0:	e031      	b.n	8007936 <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 80078d2:	2310      	movs	r3, #16
 80078d4:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 80078d6:	2310      	movs	r3, #16
 80078d8:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 80078da:	687b      	ldr	r3, [r7, #4]
 80078dc:	681b      	ldr	r3, [r3, #0]
 80078de:	689b      	ldr	r3, [r3, #8]
 80078e0:	0e5b      	lsrs	r3, r3, #25
 80078e2:	b2db      	uxtb	r3, r3
 80078e4:	f003 0307 	and.w	r3, r3, #7
 80078e8:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 80078ea:	687b      	ldr	r3, [r7, #4]
 80078ec:	681b      	ldr	r3, [r3, #0]
 80078ee:	689b      	ldr	r3, [r3, #8]
 80078f0:	0f5b      	lsrs	r3, r3, #29
 80078f2:	b2db      	uxtb	r3, r3
 80078f4:	f003 0307 	and.w	r3, r3, #7
 80078f8:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 80078fa:	7bbb      	ldrb	r3, [r7, #14]
 80078fc:	7b3a      	ldrb	r2, [r7, #12]
 80078fe:	4911      	ldr	r1, [pc, #68]	; (8007944 <UARTEx_SetNbDataToProcess+0x94>)
 8007900:	5c8a      	ldrb	r2, [r1, r2]
 8007902:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 8007906:	7b3a      	ldrb	r2, [r7, #12]
 8007908:	490f      	ldr	r1, [pc, #60]	; (8007948 <UARTEx_SetNbDataToProcess+0x98>)
 800790a:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800790c:	fb93 f3f2 	sdiv	r3, r3, r2
 8007910:	b29a      	uxth	r2, r3
 8007912:	687b      	ldr	r3, [r7, #4]
 8007914:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8007918:	7bfb      	ldrb	r3, [r7, #15]
 800791a:	7b7a      	ldrb	r2, [r7, #13]
 800791c:	4909      	ldr	r1, [pc, #36]	; (8007944 <UARTEx_SetNbDataToProcess+0x94>)
 800791e:	5c8a      	ldrb	r2, [r1, r2]
 8007920:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 8007924:	7b7a      	ldrb	r2, [r7, #13]
 8007926:	4908      	ldr	r1, [pc, #32]	; (8007948 <UARTEx_SetNbDataToProcess+0x98>)
 8007928:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800792a:	fb93 f3f2 	sdiv	r3, r3, r2
 800792e:	b29a      	uxth	r2, r3
 8007930:	687b      	ldr	r3, [r7, #4]
 8007932:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
}
 8007936:	bf00      	nop
 8007938:	3714      	adds	r7, #20
 800793a:	46bd      	mov	sp, r7
 800793c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007940:	4770      	bx	lr
 8007942:	bf00      	nop
 8007944:	0800b85c 	.word	0x0800b85c
 8007948:	0800b864 	.word	0x0800b864

0800794c <FMC_NORSRAM_Init>:
  * @param  Init Pointer to NORSRAM Initialization structure
  * @retval HAL status
  */
HAL_StatusTypeDef  FMC_NORSRAM_Init(FMC_NORSRAM_TypeDef *Device,
                                    FMC_NORSRAM_InitTypeDef *Init)
{
 800794c:	b480      	push	{r7}
 800794e:	b087      	sub	sp, #28
 8007950:	af00      	add	r7, sp, #0
 8007952:	6078      	str	r0, [r7, #4]
 8007954:	6039      	str	r1, [r7, #0]
  assert_param(IS_FMC_CONTINOUS_CLOCK(Init->ContinuousClock));
  assert_param(IS_FMC_WRITE_FIFO(Init->WriteFifo));
  assert_param(IS_FMC_PAGESIZE(Init->PageSize));

  /* Disable NORSRAM Device */
  __FMC_NORSRAM_DISABLE(Device, Init->NSBank);
 8007956:	683b      	ldr	r3, [r7, #0]
 8007958:	681a      	ldr	r2, [r3, #0]
 800795a:	687b      	ldr	r3, [r7, #4]
 800795c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007960:	683a      	ldr	r2, [r7, #0]
 8007962:	6812      	ldr	r2, [r2, #0]
 8007964:	f023 0101 	bic.w	r1, r3, #1
 8007968:	687b      	ldr	r3, [r7, #4]
 800796a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

  /* Set NORSRAM device control parameters */
  if (Init->MemoryType == FMC_MEMORY_TYPE_NOR)
 800796e:	683b      	ldr	r3, [r7, #0]
 8007970:	689b      	ldr	r3, [r3, #8]
 8007972:	2b08      	cmp	r3, #8
 8007974:	d102      	bne.n	800797c <FMC_NORSRAM_Init+0x30>
  {
    flashaccess = FMC_NORSRAM_FLASH_ACCESS_ENABLE;
 8007976:	2340      	movs	r3, #64	; 0x40
 8007978:	617b      	str	r3, [r7, #20]
 800797a:	e001      	b.n	8007980 <FMC_NORSRAM_Init+0x34>
  }
  else
  {
    flashaccess = FMC_NORSRAM_FLASH_ACCESS_DISABLE;
 800797c:	2300      	movs	r3, #0
 800797e:	617b      	str	r3, [r7, #20]
  }

  btcr_reg = (flashaccess                   | \
              Init->DataAddressMux          | \
 8007980:	683b      	ldr	r3, [r7, #0]
 8007982:	685a      	ldr	r2, [r3, #4]
  btcr_reg = (flashaccess                   | \
 8007984:	697b      	ldr	r3, [r7, #20]
 8007986:	431a      	orrs	r2, r3
              Init->MemoryType              | \
 8007988:	683b      	ldr	r3, [r7, #0]
 800798a:	689b      	ldr	r3, [r3, #8]
              Init->DataAddressMux          | \
 800798c:	431a      	orrs	r2, r3
              Init->MemoryDataWidth         | \
 800798e:	683b      	ldr	r3, [r7, #0]
 8007990:	68db      	ldr	r3, [r3, #12]
              Init->MemoryType              | \
 8007992:	431a      	orrs	r2, r3
              Init->BurstAccessMode         | \
 8007994:	683b      	ldr	r3, [r7, #0]
 8007996:	691b      	ldr	r3, [r3, #16]
              Init->MemoryDataWidth         | \
 8007998:	431a      	orrs	r2, r3
              Init->WaitSignalPolarity      | \
 800799a:	683b      	ldr	r3, [r7, #0]
 800799c:	695b      	ldr	r3, [r3, #20]
              Init->BurstAccessMode         | \
 800799e:	431a      	orrs	r2, r3
              Init->WaitSignalActive        | \
 80079a0:	683b      	ldr	r3, [r7, #0]
 80079a2:	699b      	ldr	r3, [r3, #24]
              Init->WaitSignalPolarity      | \
 80079a4:	431a      	orrs	r2, r3
              Init->WriteOperation          | \
 80079a6:	683b      	ldr	r3, [r7, #0]
 80079a8:	69db      	ldr	r3, [r3, #28]
              Init->WaitSignalActive        | \
 80079aa:	431a      	orrs	r2, r3
              Init->WaitSignal              | \
 80079ac:	683b      	ldr	r3, [r7, #0]
 80079ae:	6a1b      	ldr	r3, [r3, #32]
              Init->WriteOperation          | \
 80079b0:	431a      	orrs	r2, r3
              Init->ExtendedMode            | \
 80079b2:	683b      	ldr	r3, [r7, #0]
 80079b4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
              Init->WaitSignal              | \
 80079b6:	431a      	orrs	r2, r3
              Init->AsynchronousWait        | \
 80079b8:	683b      	ldr	r3, [r7, #0]
 80079ba:	6a9b      	ldr	r3, [r3, #40]	; 0x28
              Init->ExtendedMode            | \
 80079bc:	431a      	orrs	r2, r3
              Init->WriteBurst);
 80079be:	683b      	ldr	r3, [r7, #0]
 80079c0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
  btcr_reg = (flashaccess                   | \
 80079c2:	4313      	orrs	r3, r2
 80079c4:	613b      	str	r3, [r7, #16]

  btcr_reg |= Init->ContinuousClock;
 80079c6:	683b      	ldr	r3, [r7, #0]
 80079c8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80079ca:	693a      	ldr	r2, [r7, #16]
 80079cc:	4313      	orrs	r3, r2
 80079ce:	613b      	str	r3, [r7, #16]
  btcr_reg |= Init->WriteFifo;
 80079d0:	683b      	ldr	r3, [r7, #0]
 80079d2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80079d4:	693a      	ldr	r2, [r7, #16]
 80079d6:	4313      	orrs	r3, r2
 80079d8:	613b      	str	r3, [r7, #16]
  btcr_reg |= Init->PageSize;
 80079da:	683b      	ldr	r3, [r7, #0]
 80079dc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80079de:	693a      	ldr	r2, [r7, #16]
 80079e0:	4313      	orrs	r3, r2
 80079e2:	613b      	str	r3, [r7, #16]

  mask = (FMC_BCRx_MBKEN                |
 80079e4:	4b20      	ldr	r3, [pc, #128]	; (8007a68 <FMC_NORSRAM_Init+0x11c>)
 80079e6:	60fb      	str	r3, [r7, #12]
          FMC_BCRx_WAITEN               |
          FMC_BCRx_EXTMOD               |
          FMC_BCRx_ASYNCWAIT            |
          FMC_BCRx_CBURSTRW);

  mask |= FMC_BCR1_CCLKEN;
 80079e8:	68fb      	ldr	r3, [r7, #12]
 80079ea:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80079ee:	60fb      	str	r3, [r7, #12]
  mask |= FMC_BCR1_WFDIS;
 80079f0:	68fb      	ldr	r3, [r7, #12]
 80079f2:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80079f6:	60fb      	str	r3, [r7, #12]
  mask |= FMC_BCRx_CPSIZE;
 80079f8:	68fb      	ldr	r3, [r7, #12]
 80079fa:	f443 23e0 	orr.w	r3, r3, #458752	; 0x70000
 80079fe:	60fb      	str	r3, [r7, #12]

  MODIFY_REG(Device->BTCR[Init->NSBank], mask, btcr_reg);
 8007a00:	683b      	ldr	r3, [r7, #0]
 8007a02:	681a      	ldr	r2, [r3, #0]
 8007a04:	687b      	ldr	r3, [r7, #4]
 8007a06:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8007a0a:	68fb      	ldr	r3, [r7, #12]
 8007a0c:	43db      	mvns	r3, r3
 8007a0e:	ea02 0103 	and.w	r1, r2, r3
 8007a12:	683b      	ldr	r3, [r7, #0]
 8007a14:	681a      	ldr	r2, [r3, #0]
 8007a16:	693b      	ldr	r3, [r7, #16]
 8007a18:	4319      	orrs	r1, r3
 8007a1a:	687b      	ldr	r3, [r7, #4]
 8007a1c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

  /* Configure synchronous mode when Continuous clock is enabled for bank2..4 */
  if ((Init->ContinuousClock == FMC_CONTINUOUS_CLOCK_SYNC_ASYNC) && (Init->NSBank != FMC_NORSRAM_BANK1))
 8007a20:	683b      	ldr	r3, [r7, #0]
 8007a22:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007a24:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8007a28:	d10c      	bne.n	8007a44 <FMC_NORSRAM_Init+0xf8>
 8007a2a:	683b      	ldr	r3, [r7, #0]
 8007a2c:	681b      	ldr	r3, [r3, #0]
 8007a2e:	2b00      	cmp	r3, #0
 8007a30:	d008      	beq.n	8007a44 <FMC_NORSRAM_Init+0xf8>
  {
    MODIFY_REG(Device->BTCR[FMC_NORSRAM_BANK1], FMC_BCR1_CCLKEN, Init->ContinuousClock);
 8007a32:	687b      	ldr	r3, [r7, #4]
 8007a34:	681b      	ldr	r3, [r3, #0]
 8007a36:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 8007a3a:	683b      	ldr	r3, [r7, #0]
 8007a3c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007a3e:	431a      	orrs	r2, r3
 8007a40:	687b      	ldr	r3, [r7, #4]
 8007a42:	601a      	str	r2, [r3, #0]
  }

  if (Init->NSBank != FMC_NORSRAM_BANK1)
 8007a44:	683b      	ldr	r3, [r7, #0]
 8007a46:	681b      	ldr	r3, [r3, #0]
 8007a48:	2b00      	cmp	r3, #0
 8007a4a:	d006      	beq.n	8007a5a <FMC_NORSRAM_Init+0x10e>
  {
    /* Configure Write FIFO mode when Write Fifo is enabled for bank2..4 */
    SET_BIT(Device->BTCR[FMC_NORSRAM_BANK1], (uint32_t)(Init->WriteFifo));
 8007a4c:	687b      	ldr	r3, [r7, #4]
 8007a4e:	681a      	ldr	r2, [r3, #0]
 8007a50:	683b      	ldr	r3, [r7, #0]
 8007a52:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007a54:	431a      	orrs	r2, r3
 8007a56:	687b      	ldr	r3, [r7, #4]
 8007a58:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8007a5a:	2300      	movs	r3, #0
}
 8007a5c:	4618      	mov	r0, r3
 8007a5e:	371c      	adds	r7, #28
 8007a60:	46bd      	mov	sp, r7
 8007a62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a66:	4770      	bx	lr
 8007a68:	0008fb7f 	.word	0x0008fb7f

08007a6c <FMC_NORSRAM_Timing_Init>:
  * @param  Bank NORSRAM bank number
  * @retval HAL status
  */
HAL_StatusTypeDef FMC_NORSRAM_Timing_Init(FMC_NORSRAM_TypeDef *Device,
                                          FMC_NORSRAM_TimingTypeDef *Timing, uint32_t Bank)
{
 8007a6c:	b480      	push	{r7}
 8007a6e:	b087      	sub	sp, #28
 8007a70:	af00      	add	r7, sp, #0
 8007a72:	60f8      	str	r0, [r7, #12]
 8007a74:	60b9      	str	r1, [r7, #8]
 8007a76:	607a      	str	r2, [r7, #4]
  assert_param(IS_FMC_DATA_LATENCY(Timing->DataLatency));
  assert_param(IS_FMC_ACCESS_MODE(Timing->AccessMode));
  assert_param(IS_FMC_NORSRAM_BANK(Bank));

  /* Set FMC_NORSRAM device timing parameters */
  MODIFY_REG(Device->BTCR[Bank + 1U], BTR_CLEAR_MASK, (Timing->AddressSetupTime                                  |
 8007a78:	687b      	ldr	r3, [r7, #4]
 8007a7a:	1c5a      	adds	r2, r3, #1
 8007a7c:	68fb      	ldr	r3, [r7, #12]
 8007a7e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007a82:	f003 4140 	and.w	r1, r3, #3221225472	; 0xc0000000
 8007a86:	68bb      	ldr	r3, [r7, #8]
 8007a88:	681a      	ldr	r2, [r3, #0]
 8007a8a:	68bb      	ldr	r3, [r7, #8]
 8007a8c:	685b      	ldr	r3, [r3, #4]
 8007a8e:	011b      	lsls	r3, r3, #4
 8007a90:	431a      	orrs	r2, r3
 8007a92:	68bb      	ldr	r3, [r7, #8]
 8007a94:	689b      	ldr	r3, [r3, #8]
 8007a96:	021b      	lsls	r3, r3, #8
 8007a98:	431a      	orrs	r2, r3
 8007a9a:	68bb      	ldr	r3, [r7, #8]
 8007a9c:	68db      	ldr	r3, [r3, #12]
 8007a9e:	041b      	lsls	r3, r3, #16
 8007aa0:	431a      	orrs	r2, r3
 8007aa2:	68bb      	ldr	r3, [r7, #8]
 8007aa4:	691b      	ldr	r3, [r3, #16]
 8007aa6:	3b01      	subs	r3, #1
 8007aa8:	051b      	lsls	r3, r3, #20
 8007aaa:	431a      	orrs	r2, r3
 8007aac:	68bb      	ldr	r3, [r7, #8]
 8007aae:	695b      	ldr	r3, [r3, #20]
 8007ab0:	3b02      	subs	r3, #2
 8007ab2:	061b      	lsls	r3, r3, #24
 8007ab4:	431a      	orrs	r2, r3
 8007ab6:	68bb      	ldr	r3, [r7, #8]
 8007ab8:	699b      	ldr	r3, [r3, #24]
 8007aba:	4313      	orrs	r3, r2
 8007abc:	687a      	ldr	r2, [r7, #4]
 8007abe:	3201      	adds	r2, #1
 8007ac0:	4319      	orrs	r1, r3
 8007ac2:	68fb      	ldr	r3, [r7, #12]
 8007ac4:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
                                                       (((Timing->CLKDivision) - 1U)     << FMC_BTRx_CLKDIV_Pos)  |
                                                       (((Timing->DataLatency) - 2U)     << FMC_BTRx_DATLAT_Pos)  |
                                                       (Timing->AccessMode)));

  /* Configure Clock division value (in NORSRAM bank 1) when continuous clock is enabled */
  if (HAL_IS_BIT_SET(Device->BTCR[FMC_NORSRAM_BANK1], FMC_BCR1_CCLKEN))
 8007ac8:	68fb      	ldr	r3, [r7, #12]
 8007aca:	681b      	ldr	r3, [r3, #0]
 8007acc:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8007ad0:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8007ad4:	d113      	bne.n	8007afe <FMC_NORSRAM_Timing_Init+0x92>
  {
    tmpr = (uint32_t)(Device->BTCR[FMC_NORSRAM_BANK1 + 1U] & ~((0x0FU) << FMC_BTRx_CLKDIV_Pos));
 8007ad6:	68fb      	ldr	r3, [r7, #12]
 8007ad8:	685b      	ldr	r3, [r3, #4]
 8007ada:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 8007ade:	617b      	str	r3, [r7, #20]
    tmpr |= (uint32_t)(((Timing->CLKDivision) - 1U) << FMC_BTRx_CLKDIV_Pos);
 8007ae0:	68bb      	ldr	r3, [r7, #8]
 8007ae2:	691b      	ldr	r3, [r3, #16]
 8007ae4:	3b01      	subs	r3, #1
 8007ae6:	051b      	lsls	r3, r3, #20
 8007ae8:	697a      	ldr	r2, [r7, #20]
 8007aea:	4313      	orrs	r3, r2
 8007aec:	617b      	str	r3, [r7, #20]
    MODIFY_REG(Device->BTCR[FMC_NORSRAM_BANK1 + 1U], FMC_BTRx_CLKDIV, tmpr);
 8007aee:	68fb      	ldr	r3, [r7, #12]
 8007af0:	685b      	ldr	r3, [r3, #4]
 8007af2:	f423 0270 	bic.w	r2, r3, #15728640	; 0xf00000
 8007af6:	697b      	ldr	r3, [r7, #20]
 8007af8:	431a      	orrs	r2, r3
 8007afa:	68fb      	ldr	r3, [r7, #12]
 8007afc:	605a      	str	r2, [r3, #4]
  }

  return HAL_OK;
 8007afe:	2300      	movs	r3, #0
}
 8007b00:	4618      	mov	r0, r3
 8007b02:	371c      	adds	r7, #28
 8007b04:	46bd      	mov	sp, r7
 8007b06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b0a:	4770      	bx	lr

08007b0c <FMC_NORSRAM_Extended_Timing_Init>:
  * @retval HAL status
  */
HAL_StatusTypeDef FMC_NORSRAM_Extended_Timing_Init(FMC_NORSRAM_EXTENDED_TypeDef *Device,
                                                   FMC_NORSRAM_TimingTypeDef *Timing, uint32_t Bank,
                                                   uint32_t ExtendedMode)
{
 8007b0c:	b480      	push	{r7}
 8007b0e:	b085      	sub	sp, #20
 8007b10:	af00      	add	r7, sp, #0
 8007b12:	60f8      	str	r0, [r7, #12]
 8007b14:	60b9      	str	r1, [r7, #8]
 8007b16:	607a      	str	r2, [r7, #4]
 8007b18:	603b      	str	r3, [r7, #0]
  /* Check the parameters */
  assert_param(IS_FMC_EXTENDED_MODE(ExtendedMode));

  /* Set NORSRAM device timing register for write configuration, if extended mode is used */
  if (ExtendedMode == FMC_EXTENDED_MODE_ENABLE)
 8007b1a:	683b      	ldr	r3, [r7, #0]
 8007b1c:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8007b20:	d11d      	bne.n	8007b5e <FMC_NORSRAM_Extended_Timing_Init+0x52>
    assert_param(IS_FMC_TURNAROUND_TIME(Timing->BusTurnAroundDuration));
    assert_param(IS_FMC_ACCESS_MODE(Timing->AccessMode));
    assert_param(IS_FMC_NORSRAM_BANK(Bank));

    /* Set NORSRAM device timing register for write configuration, if extended mode is used */
    MODIFY_REG(Device->BWTR[Bank], BWTR_CLEAR_MASK, (Timing->AddressSetupTime                                    |
 8007b22:	68fb      	ldr	r3, [r7, #12]
 8007b24:	687a      	ldr	r2, [r7, #4]
 8007b26:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8007b2a:	4b13      	ldr	r3, [pc, #76]	; (8007b78 <FMC_NORSRAM_Extended_Timing_Init+0x6c>)
 8007b2c:	4013      	ands	r3, r2
 8007b2e:	68ba      	ldr	r2, [r7, #8]
 8007b30:	6811      	ldr	r1, [r2, #0]
 8007b32:	68ba      	ldr	r2, [r7, #8]
 8007b34:	6852      	ldr	r2, [r2, #4]
 8007b36:	0112      	lsls	r2, r2, #4
 8007b38:	4311      	orrs	r1, r2
 8007b3a:	68ba      	ldr	r2, [r7, #8]
 8007b3c:	6892      	ldr	r2, [r2, #8]
 8007b3e:	0212      	lsls	r2, r2, #8
 8007b40:	4311      	orrs	r1, r2
 8007b42:	68ba      	ldr	r2, [r7, #8]
 8007b44:	6992      	ldr	r2, [r2, #24]
 8007b46:	4311      	orrs	r1, r2
 8007b48:	68ba      	ldr	r2, [r7, #8]
 8007b4a:	68d2      	ldr	r2, [r2, #12]
 8007b4c:	0412      	lsls	r2, r2, #16
 8007b4e:	430a      	orrs	r2, r1
 8007b50:	ea43 0102 	orr.w	r1, r3, r2
 8007b54:	68fb      	ldr	r3, [r7, #12]
 8007b56:	687a      	ldr	r2, [r7, #4]
 8007b58:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
 8007b5c:	e005      	b.n	8007b6a <FMC_NORSRAM_Extended_Timing_Init+0x5e>
                                                     Timing->AccessMode                                          |
                                                     ((Timing->BusTurnAroundDuration)  << FMC_BWTRx_BUSTURN_Pos)));
  }
  else
  {
    Device->BWTR[Bank] = 0x0FFFFFFFU;
 8007b5e:	68fb      	ldr	r3, [r7, #12]
 8007b60:	687a      	ldr	r2, [r7, #4]
 8007b62:	f06f 4170 	mvn.w	r1, #4026531840	; 0xf0000000
 8007b66:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  }

  return HAL_OK;
 8007b6a:	2300      	movs	r3, #0
}
 8007b6c:	4618      	mov	r0, r3
 8007b6e:	3714      	adds	r7, #20
 8007b70:	46bd      	mov	sp, r7
 8007b72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b76:	4770      	bx	lr
 8007b78:	cff00000 	.word	0xcff00000

08007b7c <FMC_NORSRAM_WriteOperation_Disable>:
  * @param  Device Pointer to NORSRAM device instance
  * @param  Bank NORSRAM bank number
  * @retval HAL status
  */
HAL_StatusTypeDef FMC_NORSRAM_WriteOperation_Disable(FMC_NORSRAM_TypeDef *Device, uint32_t Bank)
{
 8007b7c:	b480      	push	{r7}
 8007b7e:	b083      	sub	sp, #12
 8007b80:	af00      	add	r7, sp, #0
 8007b82:	6078      	str	r0, [r7, #4]
 8007b84:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_FMC_NORSRAM_DEVICE(Device));
  assert_param(IS_FMC_NORSRAM_BANK(Bank));

  /* Disable write operation */
  CLEAR_BIT(Device->BTCR[Bank], FMC_WRITE_OPERATION_ENABLE);
 8007b86:	687b      	ldr	r3, [r7, #4]
 8007b88:	683a      	ldr	r2, [r7, #0]
 8007b8a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007b8e:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8007b92:	687b      	ldr	r3, [r7, #4]
 8007b94:	683a      	ldr	r2, [r7, #0]
 8007b96:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

  return HAL_OK;
 8007b9a:	2300      	movs	r3, #0
}
 8007b9c:	4618      	mov	r0, r3
 8007b9e:	370c      	adds	r7, #12
 8007ba0:	46bd      	mov	sp, r7
 8007ba2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ba6:	4770      	bx	lr

08007ba8 <loopback_tcps>:
uint8_t* msg_v4 = "IPv4 mode";
uint8_t* msg_v6 = "IPv6 mode";
uint8_t* msg_dual = "Dual IP mode";

int32_t loopback_tcps(uint8_t sn, uint8_t* buf, uint16_t port, uint8_t loopback_mode)
{
 8007ba8:	b590      	push	{r4, r7, lr}
 8007baa:	b091      	sub	sp, #68	; 0x44
 8007bac:	af02      	add	r7, sp, #8
 8007bae:	6039      	str	r1, [r7, #0]
 8007bb0:	4611      	mov	r1, r2
 8007bb2:	461a      	mov	r2, r3
 8007bb4:	4603      	mov	r3, r0
 8007bb6:	71fb      	strb	r3, [r7, #7]
 8007bb8:	460b      	mov	r3, r1
 8007bba:	80bb      	strh	r3, [r7, #4]
 8007bbc:	4613      	mov	r3, r2
 8007bbe:	71bb      	strb	r3, [r7, #6]
    int32_t ret;
    datasize_t sentsize=0;
 8007bc0:	2300      	movs	r3, #0
 8007bc2:	86fb      	strh	r3, [r7, #54]	; 0x36
    int8_t status=0,status1=1,inter;
 8007bc4:	2300      	movs	r3, #0
 8007bc6:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8007bca:	2301      	movs	r3, #1
 8007bcc:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
    uint8_t tmp = 0;
 8007bd0:	2300      	movs	r3, #0
 8007bd2:	f887 3035 	strb.w	r3, [r7, #53]	; 0x35
    datasize_t received_size;
    datasize_t RX_RD_ptr = 0, RX_WR_ptr =0;
 8007bd6:	2300      	movs	r3, #0
 8007bd8:	85fb      	strh	r3, [r7, #46]	; 0x2e
 8007bda:	2300      	movs	r3, #0
 8007bdc:	85bb      	strh	r3, [r7, #44]	; 0x2c
    uint8_t arg_tmp8;
    uint8_t* mode_msg;

    if(loopback_mode == AS_IPV4)
 8007bde:	79bb      	ldrb	r3, [r7, #6]
 8007be0:	2b02      	cmp	r3, #2
 8007be2:	d103      	bne.n	8007bec <loopback_tcps+0x44>
    {
       mode_msg = msg_v4;
 8007be4:	4bb9      	ldr	r3, [pc, #740]	; (8007ecc <loopback_tcps+0x324>)
 8007be6:	681b      	ldr	r3, [r3, #0]
 8007be8:	633b      	str	r3, [r7, #48]	; 0x30
 8007bea:	e018      	b.n	8007c1e <loopback_tcps+0x76>
    }else if(loopback_mode == AS_IPV6)
 8007bec:	79bb      	ldrb	r3, [r7, #6]
 8007bee:	2b17      	cmp	r3, #23
 8007bf0:	d103      	bne.n	8007bfa <loopback_tcps+0x52>
    {
       mode_msg = msg_v6;
 8007bf2:	4bb7      	ldr	r3, [pc, #732]	; (8007ed0 <loopback_tcps+0x328>)
 8007bf4:	681b      	ldr	r3, [r3, #0]
 8007bf6:	633b      	str	r3, [r7, #48]	; 0x30
 8007bf8:	e011      	b.n	8007c1e <loopback_tcps+0x76>
    }else
    {
       mode_msg = msg_dual;
 8007bfa:	4bb6      	ldr	r3, [pc, #728]	; (8007ed4 <loopback_tcps+0x32c>)
 8007bfc:	681b      	ldr	r3, [r3, #0]
 8007bfe:	633b      	str	r3, [r7, #48]	; 0x30
    }
    #ifdef _LOOPBACK_DEBUG_
        uint8_t dst_ip[16], ext_status;
        uint16_t dst_port;
    #endif
        while(status!=status1)
 8007c00:	e00d      	b.n	8007c1e <loopback_tcps+0x76>
        {
        	getsockopt(sn, SO_STATUS, &status);
 8007c02:	f107 0227 	add.w	r2, r7, #39	; 0x27
 8007c06:	79fb      	ldrb	r3, [r7, #7]
 8007c08:	210a      	movs	r1, #10
 8007c0a:	4618      	mov	r0, r3
 8007c0c:	f001 fab2 	bl	8009174 <getsockopt>
        	getsockopt(sn, SO_STATUS, &status1);
 8007c10:	f107 0226 	add.w	r2, r7, #38	; 0x26
 8007c14:	79fb      	ldrb	r3, [r7, #7]
 8007c16:	210a      	movs	r1, #10
 8007c18:	4618      	mov	r0, r3
 8007c1a:	f001 faab 	bl	8009174 <getsockopt>
        while(status!=status1)
 8007c1e:	f997 2027 	ldrsb.w	r2, [r7, #39]	; 0x27
 8007c22:	f997 3026 	ldrsb.w	r3, [r7, #38]	; 0x26
 8007c26:	429a      	cmp	r2, r3
 8007c28:	d1eb      	bne.n	8007c02 <loopback_tcps+0x5a>
        }
        switch(status)
 8007c2a:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8007c2e:	2b1c      	cmp	r3, #28
 8007c30:	f200 82c3 	bhi.w	80081ba <loopback_tcps+0x612>
 8007c34:	a201      	add	r2, pc, #4	; (adr r2, 8007c3c <loopback_tcps+0x94>)
 8007c36:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007c3a:	bf00      	nop
 8007c3c:	0800811b 	.word	0x0800811b
 8007c40:	080081bb 	.word	0x080081bb
 8007c44:	080081bb 	.word	0x080081bb
 8007c48:	080081bb 	.word	0x080081bb
 8007c4c:	080081bb 	.word	0x080081bb
 8007c50:	080081bb 	.word	0x080081bb
 8007c54:	080081bb 	.word	0x080081bb
 8007c58:	080081bb 	.word	0x080081bb
 8007c5c:	080081bb 	.word	0x080081bb
 8007c60:	080081bb 	.word	0x080081bb
 8007c64:	080081bb 	.word	0x080081bb
 8007c68:	080081bb 	.word	0x080081bb
 8007c6c:	080081bb 	.word	0x080081bb
 8007c70:	080081bb 	.word	0x080081bb
 8007c74:	080081bb 	.word	0x080081bb
 8007c78:	080081bb 	.word	0x080081bb
 8007c7c:	080081bb 	.word	0x080081bb
 8007c80:	080081bb 	.word	0x080081bb
 8007c84:	080081bb 	.word	0x080081bb
 8007c88:	080080eb 	.word	0x080080eb
 8007c8c:	080081bb 	.word	0x080081bb
 8007c90:	080081bb 	.word	0x080081bb
 8007c94:	080081bb 	.word	0x080081bb
 8007c98:	08007cb1 	.word	0x08007cb1
 8007c9c:	080081bb 	.word	0x080081bb
 8007ca0:	080081bb 	.word	0x080081bb
 8007ca4:	080081bb 	.word	0x080081bb
 8007ca8:	080081bb 	.word	0x080081bb
 8007cac:	08008025 	.word	0x08008025
        {
        case SOCK_ESTABLISHED :
            ctlsocket(sn,CS_GET_INTERRUPT,&inter);
 8007cb0:	f107 0225 	add.w	r2, r7, #37	; 0x25
 8007cb4:	79fb      	ldrb	r3, [r7, #7]
 8007cb6:	2105      	movs	r1, #5
 8007cb8:	4618      	mov	r0, r3
 8007cba:	f001 f95f 	bl	8008f7c <ctlsocket>
            if(inter & Sn_IR_CON)
 8007cbe:	f997 3025 	ldrsb.w	r3, [r7, #37]	; 0x25
 8007cc2:	b2db      	uxtb	r3, r3
 8007cc4:	f003 0301 	and.w	r3, r3, #1
 8007cc8:	2b00      	cmp	r3, #0
 8007cca:	d06a      	beq.n	8007da2 <loopback_tcps+0x1fa>
            {
            #ifdef _LOOPBACK_DEBUG_
                getsockopt(sn,SO_DESTIP,dst_ip);
 8007ccc:	f107 0210 	add.w	r2, r7, #16
 8007cd0:	79fb      	ldrb	r3, [r7, #7]
 8007cd2:	2104      	movs	r1, #4
 8007cd4:	4618      	mov	r0, r3
 8007cd6:	f001 fa4d 	bl	8009174 <getsockopt>
                getsockopt(sn,SO_EXTSTATUS, &ext_status);
 8007cda:	f107 020f 	add.w	r2, r7, #15
 8007cde:	79fb      	ldrb	r3, [r7, #7]
 8007ce0:	210b      	movs	r1, #11
 8007ce2:	4618      	mov	r0, r3
 8007ce4:	f001 fa46 	bl	8009174 <getsockopt>
                if(ext_status & TCPSOCK_MODE){
 8007ce8:	7bfb      	ldrb	r3, [r7, #15]
 8007cea:	f003 0304 	and.w	r3, r3, #4
 8007cee:	2b00      	cmp	r3, #0
 8007cf0:	d033      	beq.n	8007d5a <loopback_tcps+0x1b2>
                    //IPv6
                    printf("%d:Peer IP : %04X:%04X", sn, ((uint16_t)dst_ip[0] << 8) | ((uint16_t)dst_ip[1]),
 8007cf2:	79f9      	ldrb	r1, [r7, #7]
 8007cf4:	7c3b      	ldrb	r3, [r7, #16]
 8007cf6:	021b      	lsls	r3, r3, #8
 8007cf8:	7c7a      	ldrb	r2, [r7, #17]
 8007cfa:	431a      	orrs	r2, r3
                            ((uint16_t)dst_ip[2] << 8) | ((uint16_t)dst_ip[3]));
 8007cfc:	7cbb      	ldrb	r3, [r7, #18]
 8007cfe:	021b      	lsls	r3, r3, #8
 8007d00:	7cf8      	ldrb	r0, [r7, #19]
                    printf("%d:Peer IP : %04X:%04X", sn, ((uint16_t)dst_ip[0] << 8) | ((uint16_t)dst_ip[1]),
 8007d02:	4303      	orrs	r3, r0
 8007d04:	4874      	ldr	r0, [pc, #464]	; (8007ed8 <loopback_tcps+0x330>)
 8007d06:	f002 fca9 	bl	800a65c <iprintf>
                    printf(":%04X:%04X", ((uint16_t)dst_ip[4] << 8) | ((uint16_t)dst_ip[5]),
 8007d0a:	7d3b      	ldrb	r3, [r7, #20]
 8007d0c:	021b      	lsls	r3, r3, #8
 8007d0e:	7d7a      	ldrb	r2, [r7, #21]
 8007d10:	ea43 0102 	orr.w	r1, r3, r2
                            ((uint16_t)dst_ip[6] << 8) | ((uint16_t)dst_ip[7]));
 8007d14:	7dbb      	ldrb	r3, [r7, #22]
 8007d16:	021b      	lsls	r3, r3, #8
 8007d18:	7dfa      	ldrb	r2, [r7, #23]
                    printf(":%04X:%04X", ((uint16_t)dst_ip[4] << 8) | ((uint16_t)dst_ip[5]),
 8007d1a:	4313      	orrs	r3, r2
 8007d1c:	461a      	mov	r2, r3
 8007d1e:	486f      	ldr	r0, [pc, #444]	; (8007edc <loopback_tcps+0x334>)
 8007d20:	f002 fc9c 	bl	800a65c <iprintf>
                    printf(":%04X:%04X", ((uint16_t)dst_ip[8] << 8) | ((uint16_t)dst_ip[9]),
 8007d24:	7e3b      	ldrb	r3, [r7, #24]
 8007d26:	021b      	lsls	r3, r3, #8
 8007d28:	7e7a      	ldrb	r2, [r7, #25]
 8007d2a:	ea43 0102 	orr.w	r1, r3, r2
                            ((uint16_t)dst_ip[10] << 8) | ((uint16_t)dst_ip[11]));
 8007d2e:	7ebb      	ldrb	r3, [r7, #26]
 8007d30:	021b      	lsls	r3, r3, #8
 8007d32:	7efa      	ldrb	r2, [r7, #27]
                    printf(":%04X:%04X", ((uint16_t)dst_ip[8] << 8) | ((uint16_t)dst_ip[9]),
 8007d34:	4313      	orrs	r3, r2
 8007d36:	461a      	mov	r2, r3
 8007d38:	4868      	ldr	r0, [pc, #416]	; (8007edc <loopback_tcps+0x334>)
 8007d3a:	f002 fc8f 	bl	800a65c <iprintf>
                    printf(":%04X:%04X, ", ((uint16_t)dst_ip[12] << 8) | ((uint16_t)dst_ip[13]),
 8007d3e:	7f3b      	ldrb	r3, [r7, #28]
 8007d40:	021b      	lsls	r3, r3, #8
 8007d42:	7f7a      	ldrb	r2, [r7, #29]
 8007d44:	ea43 0102 	orr.w	r1, r3, r2
                            ((uint16_t)dst_ip[14] << 8) | ((uint16_t)dst_ip[15]));
 8007d48:	7fbb      	ldrb	r3, [r7, #30]
 8007d4a:	021b      	lsls	r3, r3, #8
 8007d4c:	7ffa      	ldrb	r2, [r7, #31]
                    printf(":%04X:%04X, ", ((uint16_t)dst_ip[12] << 8) | ((uint16_t)dst_ip[13]),
 8007d4e:	4313      	orrs	r3, r2
 8007d50:	461a      	mov	r2, r3
 8007d52:	4863      	ldr	r0, [pc, #396]	; (8007ee0 <loopback_tcps+0x338>)
 8007d54:	f002 fc82 	bl	800a65c <iprintf>
 8007d58:	e00d      	b.n	8007d76 <loopback_tcps+0x1ce>
                }else
                {
                    //IPv4
                    //getSn_DIPR(sn,dst_ip);
                    printf("%d:Peer IP : %.3d.%.3d.%.3d.%.3d, ",
 8007d5a:	79f9      	ldrb	r1, [r7, #7]
                            sn, dst_ip[0], dst_ip[1], dst_ip[2], dst_ip[3]);
 8007d5c:	7c3b      	ldrb	r3, [r7, #16]
                    printf("%d:Peer IP : %.3d.%.3d.%.3d.%.3d, ",
 8007d5e:	4618      	mov	r0, r3
                            sn, dst_ip[0], dst_ip[1], dst_ip[2], dst_ip[3]);
 8007d60:	7c7b      	ldrb	r3, [r7, #17]
                    printf("%d:Peer IP : %.3d.%.3d.%.3d.%.3d, ",
 8007d62:	461c      	mov	r4, r3
                            sn, dst_ip[0], dst_ip[1], dst_ip[2], dst_ip[3]);
 8007d64:	7cbb      	ldrb	r3, [r7, #18]
 8007d66:	7cfa      	ldrb	r2, [r7, #19]
                    printf("%d:Peer IP : %.3d.%.3d.%.3d.%.3d, ",
 8007d68:	9201      	str	r2, [sp, #4]
 8007d6a:	9300      	str	r3, [sp, #0]
 8007d6c:	4623      	mov	r3, r4
 8007d6e:	4602      	mov	r2, r0
 8007d70:	485c      	ldr	r0, [pc, #368]	; (8007ee4 <loopback_tcps+0x33c>)
 8007d72:	f002 fc73 	bl	800a65c <iprintf>
                }
                getsockopt(sn,SO_DESTPORT,&dst_port);
 8007d76:	f107 020c 	add.w	r2, r7, #12
 8007d7a:	79fb      	ldrb	r3, [r7, #7]
 8007d7c:	2105      	movs	r1, #5
 8007d7e:	4618      	mov	r0, r3
 8007d80:	f001 f9f8 	bl	8009174 <getsockopt>
                printf("Peer Port : %d\r\n", dst_port);
 8007d84:	89bb      	ldrh	r3, [r7, #12]
 8007d86:	4619      	mov	r1, r3
 8007d88:	4857      	ldr	r0, [pc, #348]	; (8007ee8 <loopback_tcps+0x340>)
 8007d8a:	f002 fc67 	bl	800a65c <iprintf>
            #endif
                arg_tmp8 = Sn_IR_CON;
 8007d8e:	2301      	movs	r3, #1
 8007d90:	f887 3021 	strb.w	r3, [r7, #33]	; 0x21
                ctlsocket(sn,CS_CLR_INTERRUPT,&arg_tmp8);
 8007d94:	f107 0221 	add.w	r2, r7, #33	; 0x21
 8007d98:	79fb      	ldrb	r3, [r7, #7]
 8007d9a:	2104      	movs	r1, #4
 8007d9c:	4618      	mov	r0, r3
 8007d9e:	f001 f8ed 	bl	8008f7c <ctlsocket>
            }
            getsockopt(sn,SO_RECVBUF,&received_size);
 8007da2:	f107 0222 	add.w	r2, r7, #34	; 0x22
 8007da6:	79fb      	ldrb	r3, [r7, #7]
 8007da8:	2109      	movs	r1, #9
 8007daa:	4618      	mov	r0, r3
 8007dac:	f001 f9e2 	bl	8009174 <getsockopt>
            //printf("recv size = %d\r\n", received_size);

            if(received_size > 0){
 8007db0:	f9b7 3022 	ldrsh.w	r3, [r7, #34]	; 0x22
 8007db4:	2b00      	cmp	r3, #0
 8007db6:	f340 821b 	ble.w	80081f0 <loopback_tcps+0x648>
                if(received_size > DATA_BUF_SIZE) received_size = DATA_BUF_SIZE;
 8007dba:	f9b7 3022 	ldrsh.w	r3, [r7, #34]	; 0x22
 8007dbe:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8007dc2:	dd02      	ble.n	8007dca <loopback_tcps+0x222>
 8007dc4:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8007dc8:	847b      	strh	r3, [r7, #34]	; 0x22
                RX_RD_ptr = getSn_RX_RD(sn);
 8007dca:	79fb      	ldrb	r3, [r7, #7]
 8007dcc:	009b      	lsls	r3, r3, #2
 8007dce:	3301      	adds	r3, #1
 8007dd0:	00da      	lsls	r2, r3, #3
 8007dd2:	4b46      	ldr	r3, [pc, #280]	; (8007eec <loopback_tcps+0x344>)
 8007dd4:	4413      	add	r3, r2
 8007dd6:	4618      	mov	r0, r3
 8007dd8:	f000 fa3e 	bl	8008258 <WIZCHIP_READ>
 8007ddc:	4603      	mov	r3, r0
 8007dde:	b29b      	uxth	r3, r3
 8007de0:	021b      	lsls	r3, r3, #8
 8007de2:	b29c      	uxth	r4, r3
 8007de4:	79fb      	ldrb	r3, [r7, #7]
 8007de6:	009b      	lsls	r3, r3, #2
 8007de8:	3301      	adds	r3, #1
 8007dea:	00da      	lsls	r2, r3, #3
 8007dec:	4b40      	ldr	r3, [pc, #256]	; (8007ef0 <loopback_tcps+0x348>)
 8007dee:	4413      	add	r3, r2
 8007df0:	4618      	mov	r0, r3
 8007df2:	f000 fa31 	bl	8008258 <WIZCHIP_READ>
 8007df6:	4603      	mov	r3, r0
 8007df8:	b29b      	uxth	r3, r3
 8007dfa:	4423      	add	r3, r4
 8007dfc:	b29b      	uxth	r3, r3
 8007dfe:	85fb      	strh	r3, [r7, #46]	; 0x2e
                RX_WR_ptr = getSn_RX_WR(sn);
 8007e00:	79fb      	ldrb	r3, [r7, #7]
 8007e02:	009b      	lsls	r3, r3, #2
 8007e04:	3301      	adds	r3, #1
 8007e06:	00da      	lsls	r2, r3, #3
 8007e08:	4b3a      	ldr	r3, [pc, #232]	; (8007ef4 <loopback_tcps+0x34c>)
 8007e0a:	4413      	add	r3, r2
 8007e0c:	4618      	mov	r0, r3
 8007e0e:	f000 fa23 	bl	8008258 <WIZCHIP_READ>
 8007e12:	4603      	mov	r3, r0
 8007e14:	b29b      	uxth	r3, r3
 8007e16:	021b      	lsls	r3, r3, #8
 8007e18:	b29c      	uxth	r4, r3
 8007e1a:	79fb      	ldrb	r3, [r7, #7]
 8007e1c:	009b      	lsls	r3, r3, #2
 8007e1e:	3301      	adds	r3, #1
 8007e20:	00da      	lsls	r2, r3, #3
 8007e22:	4b35      	ldr	r3, [pc, #212]	; (8007ef8 <loopback_tcps+0x350>)
 8007e24:	4413      	add	r3, r2
 8007e26:	4618      	mov	r0, r3
 8007e28:	f000 fa16 	bl	8008258 <WIZCHIP_READ>
 8007e2c:	4603      	mov	r3, r0
 8007e2e:	b29b      	uxth	r3, r3
 8007e30:	4423      	add	r3, r4
 8007e32:	b29b      	uxth	r3, r3
 8007e34:	85bb      	strh	r3, [r7, #44]	; 0x2c
                //printf("pre RX RD=0x%04X, WR=0x%04X\r\n", RX_RD_ptr, RX_WR_ptr);
                ret = recv(sn, buf, received_size);
 8007e36:	f9b7 2022 	ldrsh.w	r2, [r7, #34]	; 0x22
 8007e3a:	79fb      	ldrb	r3, [r7, #7]
 8007e3c:	6839      	ldr	r1, [r7, #0]
 8007e3e:	4618      	mov	r0, r3
 8007e40:	f001 f816 	bl	8008e70 <recv>
 8007e44:	4603      	mov	r3, r0
 8007e46:	62bb      	str	r3, [r7, #40]	; 0x28
                RX_RD_ptr = getSn_RX_RD(sn);
 8007e48:	79fb      	ldrb	r3, [r7, #7]
 8007e4a:	009b      	lsls	r3, r3, #2
 8007e4c:	3301      	adds	r3, #1
 8007e4e:	00da      	lsls	r2, r3, #3
 8007e50:	4b26      	ldr	r3, [pc, #152]	; (8007eec <loopback_tcps+0x344>)
 8007e52:	4413      	add	r3, r2
 8007e54:	4618      	mov	r0, r3
 8007e56:	f000 f9ff 	bl	8008258 <WIZCHIP_READ>
 8007e5a:	4603      	mov	r3, r0
 8007e5c:	b29b      	uxth	r3, r3
 8007e5e:	021b      	lsls	r3, r3, #8
 8007e60:	b29c      	uxth	r4, r3
 8007e62:	79fb      	ldrb	r3, [r7, #7]
 8007e64:	009b      	lsls	r3, r3, #2
 8007e66:	3301      	adds	r3, #1
 8007e68:	00da      	lsls	r2, r3, #3
 8007e6a:	4b21      	ldr	r3, [pc, #132]	; (8007ef0 <loopback_tcps+0x348>)
 8007e6c:	4413      	add	r3, r2
 8007e6e:	4618      	mov	r0, r3
 8007e70:	f000 f9f2 	bl	8008258 <WIZCHIP_READ>
 8007e74:	4603      	mov	r3, r0
 8007e76:	b29b      	uxth	r3, r3
 8007e78:	4423      	add	r3, r4
 8007e7a:	b29b      	uxth	r3, r3
 8007e7c:	85fb      	strh	r3, [r7, #46]	; 0x2e
                RX_WR_ptr = getSn_RX_WR(sn);
 8007e7e:	79fb      	ldrb	r3, [r7, #7]
 8007e80:	009b      	lsls	r3, r3, #2
 8007e82:	3301      	adds	r3, #1
 8007e84:	00da      	lsls	r2, r3, #3
 8007e86:	4b1b      	ldr	r3, [pc, #108]	; (8007ef4 <loopback_tcps+0x34c>)
 8007e88:	4413      	add	r3, r2
 8007e8a:	4618      	mov	r0, r3
 8007e8c:	f000 f9e4 	bl	8008258 <WIZCHIP_READ>
 8007e90:	4603      	mov	r3, r0
 8007e92:	b29b      	uxth	r3, r3
 8007e94:	021b      	lsls	r3, r3, #8
 8007e96:	b29c      	uxth	r4, r3
 8007e98:	79fb      	ldrb	r3, [r7, #7]
 8007e9a:	009b      	lsls	r3, r3, #2
 8007e9c:	3301      	adds	r3, #1
 8007e9e:	00da      	lsls	r2, r3, #3
 8007ea0:	4b15      	ldr	r3, [pc, #84]	; (8007ef8 <loopback_tcps+0x350>)
 8007ea2:	4413      	add	r3, r2
 8007ea4:	4618      	mov	r0, r3
 8007ea6:	f000 f9d7 	bl	8008258 <WIZCHIP_READ>
 8007eaa:	4603      	mov	r3, r0
 8007eac:	b29b      	uxth	r3, r3
 8007eae:	4423      	add	r3, r4
 8007eb0:	b29b      	uxth	r3, r3
 8007eb2:	85bb      	strh	r3, [r7, #44]	; 0x2c
                //printf("aft RX RD=0x%04X, WR=0x%04X\r\n", RX_RD_ptr, RX_WR_ptr);

                if(ret <= 0) return ret;      // check SOCKERR_BUSY & SOCKERR_XXX. For showing the occurrence of SOCKERR_BUSY.
 8007eb4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007eb6:	2b00      	cmp	r3, #0
 8007eb8:	dc01      	bgt.n	8007ebe <loopback_tcps+0x316>
 8007eba:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007ebc:	e19a      	b.n	80081f4 <loopback_tcps+0x64c>
                received_size = (uint16_t) ret;
 8007ebe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007ec0:	b21b      	sxth	r3, r3
 8007ec2:	847b      	strh	r3, [r7, #34]	; 0x22
                sentsize = 0;
 8007ec4:	2300      	movs	r3, #0
 8007ec6:	86fb      	strh	r3, [r7, #54]	; 0x36

                while(received_size != sentsize)
 8007ec8:	e0a4      	b.n	8008014 <loopback_tcps+0x46c>
 8007eca:	bf00      	nop
 8007ecc:	20000078 	.word	0x20000078
 8007ed0:	2000007c 	.word	0x2000007c
 8007ed4:	20000080 	.word	0x20000080
 8007ed8:	0800b64c 	.word	0x0800b64c
 8007edc:	0800b664 	.word	0x0800b664
 8007ee0:	0800b670 	.word	0x0800b670
 8007ee4:	0800b680 	.word	0x0800b680
 8007ee8:	0800b6a4 	.word	0x0800b6a4
 8007eec:	60022800 	.word	0x60022800
 8007ef0:	60022900 	.word	0x60022900
 8007ef4:	60022c00 	.word	0x60022c00
 8007ef8:	60022d00 	.word	0x60022d00
                {
                	RX_WR_ptr = getSn_TX_WR(sn);
 8007efc:	79fb      	ldrb	r3, [r7, #7]
 8007efe:	009b      	lsls	r3, r3, #2
 8007f00:	3301      	adds	r3, #1
 8007f02:	00da      	lsls	r2, r3, #3
 8007f04:	4bae      	ldr	r3, [pc, #696]	; (80081c0 <loopback_tcps+0x618>)
 8007f06:	4413      	add	r3, r2
 8007f08:	4618      	mov	r0, r3
 8007f0a:	f000 f9a5 	bl	8008258 <WIZCHIP_READ>
 8007f0e:	4603      	mov	r3, r0
 8007f10:	b29b      	uxth	r3, r3
 8007f12:	021b      	lsls	r3, r3, #8
 8007f14:	b29c      	uxth	r4, r3
 8007f16:	79fb      	ldrb	r3, [r7, #7]
 8007f18:	009b      	lsls	r3, r3, #2
 8007f1a:	3301      	adds	r3, #1
 8007f1c:	00da      	lsls	r2, r3, #3
 8007f1e:	4ba9      	ldr	r3, [pc, #676]	; (80081c4 <loopback_tcps+0x61c>)
 8007f20:	4413      	add	r3, r2
 8007f22:	4618      	mov	r0, r3
 8007f24:	f000 f998 	bl	8008258 <WIZCHIP_READ>
 8007f28:	4603      	mov	r3, r0
 8007f2a:	b29b      	uxth	r3, r3
 8007f2c:	4423      	add	r3, r4
 8007f2e:	b29b      	uxth	r3, r3
 8007f30:	85bb      	strh	r3, [r7, #44]	; 0x2c
                	RX_RD_ptr = getSn_TX_RD(sn);
 8007f32:	79fb      	ldrb	r3, [r7, #7]
 8007f34:	009b      	lsls	r3, r3, #2
 8007f36:	3301      	adds	r3, #1
 8007f38:	00da      	lsls	r2, r3, #3
 8007f3a:	4ba3      	ldr	r3, [pc, #652]	; (80081c8 <loopback_tcps+0x620>)
 8007f3c:	4413      	add	r3, r2
 8007f3e:	4618      	mov	r0, r3
 8007f40:	f000 f98a 	bl	8008258 <WIZCHIP_READ>
 8007f44:	4603      	mov	r3, r0
 8007f46:	b29b      	uxth	r3, r3
 8007f48:	021b      	lsls	r3, r3, #8
 8007f4a:	b29c      	uxth	r4, r3
 8007f4c:	79fb      	ldrb	r3, [r7, #7]
 8007f4e:	009b      	lsls	r3, r3, #2
 8007f50:	3301      	adds	r3, #1
 8007f52:	00da      	lsls	r2, r3, #3
 8007f54:	4b9d      	ldr	r3, [pc, #628]	; (80081cc <loopback_tcps+0x624>)
 8007f56:	4413      	add	r3, r2
 8007f58:	4618      	mov	r0, r3
 8007f5a:	f000 f97d 	bl	8008258 <WIZCHIP_READ>
 8007f5e:	4603      	mov	r3, r0
 8007f60:	b29b      	uxth	r3, r3
 8007f62:	4423      	add	r3, r4
 8007f64:	b29b      	uxth	r3, r3
 8007f66:	85fb      	strh	r3, [r7, #46]	; 0x2e
                	//printf("pre TX RD=0x%04X, WR=0x%04X\r\n", RX_RD_ptr, RX_WR_ptr);
                    ret = send(sn, buf+sentsize, received_size-sentsize);
 8007f68:	f9b7 3036 	ldrsh.w	r3, [r7, #54]	; 0x36
 8007f6c:	683a      	ldr	r2, [r7, #0]
 8007f6e:	18d1      	adds	r1, r2, r3
 8007f70:	f9b7 3022 	ldrsh.w	r3, [r7, #34]	; 0x22
 8007f74:	b29a      	uxth	r2, r3
 8007f76:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8007f78:	1ad3      	subs	r3, r2, r3
 8007f7a:	b29b      	uxth	r3, r3
 8007f7c:	b21a      	sxth	r2, r3
 8007f7e:	79fb      	ldrb	r3, [r7, #7]
 8007f80:	4618      	mov	r0, r3
 8007f82:	f000 fe89 	bl	8008c98 <send>
 8007f86:	4603      	mov	r3, r0
 8007f88:	62bb      	str	r3, [r7, #40]	; 0x28
                    RX_WR_ptr = getSn_TX_WR(sn);
 8007f8a:	79fb      	ldrb	r3, [r7, #7]
 8007f8c:	009b      	lsls	r3, r3, #2
 8007f8e:	3301      	adds	r3, #1
 8007f90:	00da      	lsls	r2, r3, #3
 8007f92:	4b8b      	ldr	r3, [pc, #556]	; (80081c0 <loopback_tcps+0x618>)
 8007f94:	4413      	add	r3, r2
 8007f96:	4618      	mov	r0, r3
 8007f98:	f000 f95e 	bl	8008258 <WIZCHIP_READ>
 8007f9c:	4603      	mov	r3, r0
 8007f9e:	b29b      	uxth	r3, r3
 8007fa0:	021b      	lsls	r3, r3, #8
 8007fa2:	b29c      	uxth	r4, r3
 8007fa4:	79fb      	ldrb	r3, [r7, #7]
 8007fa6:	009b      	lsls	r3, r3, #2
 8007fa8:	3301      	adds	r3, #1
 8007faa:	00da      	lsls	r2, r3, #3
 8007fac:	4b85      	ldr	r3, [pc, #532]	; (80081c4 <loopback_tcps+0x61c>)
 8007fae:	4413      	add	r3, r2
 8007fb0:	4618      	mov	r0, r3
 8007fb2:	f000 f951 	bl	8008258 <WIZCHIP_READ>
 8007fb6:	4603      	mov	r3, r0
 8007fb8:	b29b      	uxth	r3, r3
 8007fba:	4423      	add	r3, r4
 8007fbc:	b29b      	uxth	r3, r3
 8007fbe:	85bb      	strh	r3, [r7, #44]	; 0x2c
					RX_RD_ptr = getSn_TX_RD(sn);
 8007fc0:	79fb      	ldrb	r3, [r7, #7]
 8007fc2:	009b      	lsls	r3, r3, #2
 8007fc4:	3301      	adds	r3, #1
 8007fc6:	00da      	lsls	r2, r3, #3
 8007fc8:	4b7f      	ldr	r3, [pc, #508]	; (80081c8 <loopback_tcps+0x620>)
 8007fca:	4413      	add	r3, r2
 8007fcc:	4618      	mov	r0, r3
 8007fce:	f000 f943 	bl	8008258 <WIZCHIP_READ>
 8007fd2:	4603      	mov	r3, r0
 8007fd4:	b29b      	uxth	r3, r3
 8007fd6:	021b      	lsls	r3, r3, #8
 8007fd8:	b29c      	uxth	r4, r3
 8007fda:	79fb      	ldrb	r3, [r7, #7]
 8007fdc:	009b      	lsls	r3, r3, #2
 8007fde:	3301      	adds	r3, #1
 8007fe0:	00da      	lsls	r2, r3, #3
 8007fe2:	4b7a      	ldr	r3, [pc, #488]	; (80081cc <loopback_tcps+0x624>)
 8007fe4:	4413      	add	r3, r2
 8007fe6:	4618      	mov	r0, r3
 8007fe8:	f000 f936 	bl	8008258 <WIZCHIP_READ>
 8007fec:	4603      	mov	r3, r0
 8007fee:	b29b      	uxth	r3, r3
 8007ff0:	4423      	add	r3, r4
 8007ff2:	b29b      	uxth	r3, r3
 8007ff4:	85fb      	strh	r3, [r7, #46]	; 0x2e
					//printf("aft TX RD=0x%04X, WR=0x%04X\r\n", RX_RD_ptr, RX_WR_ptr);
                    if(ret < 0)
 8007ff6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007ff8:	2b00      	cmp	r3, #0
 8007ffa:	da05      	bge.n	8008008 <loopback_tcps+0x460>
                    {
                        close(sn);
 8007ffc:	79fb      	ldrb	r3, [r7, #7]
 8007ffe:	4618      	mov	r0, r3
 8008000:	f000 fd0e 	bl	8008a20 <close>
                        return ret;
 8008004:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008006:	e0f5      	b.n	80081f4 <loopback_tcps+0x64c>
                    }
                    sentsize += ret; // Don't care SOCKERR_BUSY, because it is zero.
 8008008:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800800a:	b29a      	uxth	r2, r3
 800800c:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 800800e:	4413      	add	r3, r2
 8008010:	b29b      	uxth	r3, r3
 8008012:	86fb      	strh	r3, [r7, #54]	; 0x36
                while(received_size != sentsize)
 8008014:	f9b7 3022 	ldrsh.w	r3, [r7, #34]	; 0x22
 8008018:	f9b7 2036 	ldrsh.w	r2, [r7, #54]	; 0x36
 800801c:	429a      	cmp	r2, r3
 800801e:	f47f af6d 	bne.w	8007efc <loopback_tcps+0x354>
                }
            }
            break;
 8008022:	e0e5      	b.n	80081f0 <loopback_tcps+0x648>
        case SOCK_CLOSE_WAIT :
            #ifdef _LOOPBACK_DEBUG_
                printf("%d:CloseWait\r\n",sn);
 8008024:	79fb      	ldrb	r3, [r7, #7]
 8008026:	4619      	mov	r1, r3
 8008028:	4869      	ldr	r0, [pc, #420]	; (80081d0 <loopback_tcps+0x628>)
 800802a:	f002 fb17 	bl	800a65c <iprintf>
            #endif
            getsockopt(sn, SO_RECVBUF, &received_size);
 800802e:	f107 0222 	add.w	r2, r7, #34	; 0x22
 8008032:	79fb      	ldrb	r3, [r7, #7]
 8008034:	2109      	movs	r1, #9
 8008036:	4618      	mov	r0, r3
 8008038:	f001 f89c 	bl	8009174 <getsockopt>
            if(received_size > 0) // Don't need to check SOCKERR_BUSY because it doesn't not occur.
 800803c:	f9b7 3022 	ldrsh.w	r3, [r7, #34]	; 0x22
 8008040:	2b00      	cmp	r3, #0
 8008042:	dd41      	ble.n	80080c8 <loopback_tcps+0x520>
            {
                if(received_size > DATA_BUF_SIZE) received_size = DATA_BUF_SIZE;
 8008044:	f9b7 3022 	ldrsh.w	r3, [r7, #34]	; 0x22
 8008048:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800804c:	dd02      	ble.n	8008054 <loopback_tcps+0x4ac>
 800804e:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8008052:	847b      	strh	r3, [r7, #34]	; 0x22
                ret = recv(sn, buf, received_size);
 8008054:	f9b7 2022 	ldrsh.w	r2, [r7, #34]	; 0x22
 8008058:	79fb      	ldrb	r3, [r7, #7]
 800805a:	6839      	ldr	r1, [r7, #0]
 800805c:	4618      	mov	r0, r3
 800805e:	f000 ff07 	bl	8008e70 <recv>
 8008062:	4603      	mov	r3, r0
 8008064:	62bb      	str	r3, [r7, #40]	; 0x28

                if(ret <= 0) return ret;      // check SOCKERR_BUSY & SOCKERR_XXX. For showing the occurrence of SOCKERR_BUSY.
 8008066:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008068:	2b00      	cmp	r3, #0
 800806a:	dc01      	bgt.n	8008070 <loopback_tcps+0x4c8>
 800806c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800806e:	e0c1      	b.n	80081f4 <loopback_tcps+0x64c>
                received_size = (uint16_t) ret;
 8008070:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008072:	b21b      	sxth	r3, r3
 8008074:	847b      	strh	r3, [r7, #34]	; 0x22
                sentsize = 0;
 8008076:	2300      	movs	r3, #0
 8008078:	86fb      	strh	r3, [r7, #54]	; 0x36

                while(received_size != sentsize)
 800807a:	e01f      	b.n	80080bc <loopback_tcps+0x514>
                {
                    ret = send(sn, buf+sentsize, received_size-sentsize);
 800807c:	f9b7 3036 	ldrsh.w	r3, [r7, #54]	; 0x36
 8008080:	683a      	ldr	r2, [r7, #0]
 8008082:	18d1      	adds	r1, r2, r3
 8008084:	f9b7 3022 	ldrsh.w	r3, [r7, #34]	; 0x22
 8008088:	b29a      	uxth	r2, r3
 800808a:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 800808c:	1ad3      	subs	r3, r2, r3
 800808e:	b29b      	uxth	r3, r3
 8008090:	b21a      	sxth	r2, r3
 8008092:	79fb      	ldrb	r3, [r7, #7]
 8008094:	4618      	mov	r0, r3
 8008096:	f000 fdff 	bl	8008c98 <send>
 800809a:	4603      	mov	r3, r0
 800809c:	62bb      	str	r3, [r7, #40]	; 0x28
                    if(ret < 0)
 800809e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80080a0:	2b00      	cmp	r3, #0
 80080a2:	da05      	bge.n	80080b0 <loopback_tcps+0x508>
                    {
                        close(sn);
 80080a4:	79fb      	ldrb	r3, [r7, #7]
 80080a6:	4618      	mov	r0, r3
 80080a8:	f000 fcba 	bl	8008a20 <close>
                        return ret;
 80080ac:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80080ae:	e0a1      	b.n	80081f4 <loopback_tcps+0x64c>
                    }
                    sentsize += ret; // Don't care SOCKERR_BUSY, because it is zero.
 80080b0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80080b2:	b29a      	uxth	r2, r3
 80080b4:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 80080b6:	4413      	add	r3, r2
 80080b8:	b29b      	uxth	r3, r3
 80080ba:	86fb      	strh	r3, [r7, #54]	; 0x36
                while(received_size != sentsize)
 80080bc:	f9b7 3022 	ldrsh.w	r3, [r7, #34]	; 0x22
 80080c0:	f9b7 2036 	ldrsh.w	r2, [r7, #54]	; 0x36
 80080c4:	429a      	cmp	r2, r3
 80080c6:	d1d9      	bne.n	800807c <loopback_tcps+0x4d4>
                }
            }

            if((ret = disconnect(sn)) != SOCK_OK) return ret;
 80080c8:	79fb      	ldrb	r3, [r7, #7]
 80080ca:	4618      	mov	r0, r3
 80080cc:	f000 fd6a 	bl	8008ba4 <disconnect>
 80080d0:	4603      	mov	r3, r0
 80080d2:	62bb      	str	r3, [r7, #40]	; 0x28
 80080d4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80080d6:	2b01      	cmp	r3, #1
 80080d8:	d001      	beq.n	80080de <loopback_tcps+0x536>
 80080da:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80080dc:	e08a      	b.n	80081f4 <loopback_tcps+0x64c>
                #ifdef _LOOPBACK_DEBUG_
                    printf("%d:Socket Closed\r\n", sn);
 80080de:	79fb      	ldrb	r3, [r7, #7]
 80080e0:	4619      	mov	r1, r3
 80080e2:	483c      	ldr	r0, [pc, #240]	; (80081d4 <loopback_tcps+0x62c>)
 80080e4:	f002 faba 	bl	800a65c <iprintf>
                #endif
            break;
 80080e8:	e083      	b.n	80081f2 <loopback_tcps+0x64a>
        case SOCK_INIT :
            if( (ret = listen(sn)) != SOCK_OK) return ret;
 80080ea:	79fb      	ldrb	r3, [r7, #7]
 80080ec:	4618      	mov	r0, r3
 80080ee:	f000 fd0b 	bl	8008b08 <listen>
 80080f2:	4603      	mov	r3, r0
 80080f4:	62bb      	str	r3, [r7, #40]	; 0x28
 80080f6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80080f8:	2b01      	cmp	r3, #1
 80080fa:	d001      	beq.n	8008100 <loopback_tcps+0x558>
 80080fc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80080fe:	e079      	b.n	80081f4 <loopback_tcps+0x64c>
                #ifdef _LOOPBACK_DEBUG_
                    printf("%d:Listen, TCP server loopback, port [%d] as %s\r\n", sn, port, mode_msg);
 8008100:	79f9      	ldrb	r1, [r7, #7]
 8008102:	88ba      	ldrh	r2, [r7, #4]
 8008104:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008106:	4834      	ldr	r0, [pc, #208]	; (80081d8 <loopback_tcps+0x630>)
 8008108:	f002 faa8 	bl	800a65c <iprintf>
                #endif
                    printf("%d:Listen, TCP server loopback, port [%d] as %s\r\n", sn, port, mode_msg);
 800810c:	79f9      	ldrb	r1, [r7, #7]
 800810e:	88ba      	ldrh	r2, [r7, #4]
 8008110:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008112:	4831      	ldr	r0, [pc, #196]	; (80081d8 <loopback_tcps+0x630>)
 8008114:	f002 faa2 	bl	800a65c <iprintf>
            break;
 8008118:	e06b      	b.n	80081f2 <loopback_tcps+0x64a>
        case SOCK_CLOSED:
            #ifdef _LOOPBACK_DEBUG_
                printf("%d:TCP server loopback start\r\n",sn);
 800811a:	79fb      	ldrb	r3, [r7, #7]
 800811c:	4619      	mov	r1, r3
 800811e:	482f      	ldr	r0, [pc, #188]	; (80081dc <loopback_tcps+0x634>)
 8008120:	f002 fa9c 	bl	800a65c <iprintf>
            #endif
                switch(loopback_mode)
 8008124:	79bb      	ldrb	r3, [r7, #6]
 8008126:	2b17      	cmp	r3, #23
 8008128:	d010      	beq.n	800814c <loopback_tcps+0x5a4>
 800812a:	2b17      	cmp	r3, #23
 800812c:	dc22      	bgt.n	8008174 <loopback_tcps+0x5cc>
 800812e:	2b02      	cmp	r3, #2
 8008130:	d002      	beq.n	8008138 <loopback_tcps+0x590>
 8008132:	2b0b      	cmp	r3, #11
 8008134:	d014      	beq.n	8008160 <loopback_tcps+0x5b8>
                    break;
                case AS_IPDUAL:
                    tmp = socket(sn, Sn_MR_TCPD, port, SOCK_IO_NONBLOCK);
                    break;
                default:
                    break;
 8008136:	e01d      	b.n	8008174 <loopback_tcps+0x5cc>
                    tmp = socket(sn, Sn_MR_TCP4, port, SOCK_IO_NONBLOCK);
 8008138:	88ba      	ldrh	r2, [r7, #4]
 800813a:	79f8      	ldrb	r0, [r7, #7]
 800813c:	2301      	movs	r3, #1
 800813e:	2101      	movs	r1, #1
 8008140:	f000 fa66 	bl	8008610 <socket>
 8008144:	4603      	mov	r3, r0
 8008146:	f887 3035 	strb.w	r3, [r7, #53]	; 0x35
                    break;
 800814a:	e014      	b.n	8008176 <loopback_tcps+0x5ce>
                    tmp = socket(sn, Sn_MR_TCP6, port, SOCK_IO_NONBLOCK);
 800814c:	88ba      	ldrh	r2, [r7, #4]
 800814e:	79f8      	ldrb	r0, [r7, #7]
 8008150:	2301      	movs	r3, #1
 8008152:	2109      	movs	r1, #9
 8008154:	f000 fa5c 	bl	8008610 <socket>
 8008158:	4603      	mov	r3, r0
 800815a:	f887 3035 	strb.w	r3, [r7, #53]	; 0x35
                    break;
 800815e:	e00a      	b.n	8008176 <loopback_tcps+0x5ce>
                    tmp = socket(sn, Sn_MR_TCPD, port, SOCK_IO_NONBLOCK);
 8008160:	88ba      	ldrh	r2, [r7, #4]
 8008162:	79f8      	ldrb	r0, [r7, #7]
 8008164:	2301      	movs	r3, #1
 8008166:	210d      	movs	r1, #13
 8008168:	f000 fa52 	bl	8008610 <socket>
 800816c:	4603      	mov	r3, r0
 800816e:	f887 3035 	strb.w	r3, [r7, #53]	; 0x35
                    break;
 8008172:	e000      	b.n	8008176 <loopback_tcps+0x5ce>
                    break;
 8008174:	bf00      	nop
                }
                if(tmp != sn)    /* reinitialize the socket */
 8008176:	f897 2035 	ldrb.w	r2, [r7, #53]	; 0x35
 800817a:	79fb      	ldrb	r3, [r7, #7]
 800817c:	429a      	cmp	r2, r3
 800817e:	d007      	beq.n	8008190 <loopback_tcps+0x5e8>
                {
                    #ifdef _LOOPBACK_DEBUG_
                        printf("%d : Fail to create socket.\r\n",sn);
 8008180:	79fb      	ldrb	r3, [r7, #7]
 8008182:	4619      	mov	r1, r3
 8008184:	4816      	ldr	r0, [pc, #88]	; (80081e0 <loopback_tcps+0x638>)
 8008186:	f002 fa69 	bl	800a65c <iprintf>
                    #endif
                    return SOCKERR_SOCKNUM;
 800818a:	f04f 33ff 	mov.w	r3, #4294967295
 800818e:	e031      	b.n	80081f4 <loopback_tcps+0x64c>
                }
            #ifdef _LOOPBACK_DEBUG_
                printf("%d:Socket opened[%d]\r\n",sn, getSn_SR(sn));
 8008190:	79fc      	ldrb	r4, [r7, #7]
 8008192:	79fb      	ldrb	r3, [r7, #7]
 8008194:	009b      	lsls	r3, r3, #2
 8008196:	3301      	adds	r3, #1
 8008198:	00da      	lsls	r2, r3, #3
 800819a:	4b12      	ldr	r3, [pc, #72]	; (80081e4 <loopback_tcps+0x63c>)
 800819c:	4413      	add	r3, r2
 800819e:	4618      	mov	r0, r3
 80081a0:	f000 f85a 	bl	8008258 <WIZCHIP_READ>
 80081a4:	4603      	mov	r3, r0
 80081a6:	461a      	mov	r2, r3
 80081a8:	4621      	mov	r1, r4
 80081aa:	480f      	ldr	r0, [pc, #60]	; (80081e8 <loopback_tcps+0x640>)
 80081ac:	f002 fa56 	bl	800a65c <iprintf>
                sock_state[sn] = 1;
 80081b0:	79fb      	ldrb	r3, [r7, #7]
 80081b2:	4a0e      	ldr	r2, [pc, #56]	; (80081ec <loopback_tcps+0x644>)
 80081b4:	2101      	movs	r1, #1
 80081b6:	54d1      	strb	r1, [r2, r3]
            #endif
            break;
 80081b8:	e01b      	b.n	80081f2 <loopback_tcps+0x64a>
        default:
            break;
 80081ba:	bf00      	nop
 80081bc:	e019      	b.n	80081f2 <loopback_tcps+0x64a>
 80081be:	bf00      	nop
 80081c0:	60020c00 	.word	0x60020c00
 80081c4:	60020d00 	.word	0x60020d00
 80081c8:	60020800 	.word	0x60020800
 80081cc:	60020900 	.word	0x60020900
 80081d0:	0800b6b8 	.word	0x0800b6b8
 80081d4:	0800b6c8 	.word	0x0800b6c8
 80081d8:	0800b6dc 	.word	0x0800b6dc
 80081dc:	0800b710 	.word	0x0800b710
 80081e0:	0800b730 	.word	0x0800b730
 80081e4:	60003000 	.word	0x60003000
 80081e8:	0800b750 	.word	0x0800b750
 80081ec:	20000688 	.word	0x20000688
            break;
 80081f0:	bf00      	nop
        }
    return 1;
 80081f2:	2301      	movs	r3, #1
}
 80081f4:	4618      	mov	r0, r3
 80081f6:	373c      	adds	r7, #60	; 0x3c
 80081f8:	46bd      	mov	sp, r7
 80081fa:	bd90      	pop	{r4, r7, pc}

080081fc <WIZCHIP_WRITE>:

#define _W6100_SPI_OP_          _WIZCHIP_SPI_VDM_OP_

//////////////////////////////////////////////////
void WIZCHIP_WRITE(uint32_t AddrSel, uint8_t wb )
{
 80081fc:	b590      	push	{r4, r7, lr}
 80081fe:	b085      	sub	sp, #20
 8008200:	af00      	add	r7, sp, #0
 8008202:	6078      	str	r0, [r7, #4]
 8008204:	460b      	mov	r3, r1
 8008206:	70fb      	strb	r3, [r7, #3]
   uint8_t tAD[4];
   tAD[0] = (uint8_t)((AddrSel & 0x00FF0000) >> 16);
 8008208:	687b      	ldr	r3, [r7, #4]
 800820a:	0c1b      	lsrs	r3, r3, #16
 800820c:	b2db      	uxtb	r3, r3
 800820e:	733b      	strb	r3, [r7, #12]
   tAD[1] = (uint8_t)((AddrSel & 0x0000FF00) >> 8);
 8008210:	687b      	ldr	r3, [r7, #4]
 8008212:	0a1b      	lsrs	r3, r3, #8
 8008214:	b2db      	uxtb	r3, r3
 8008216:	737b      	strb	r3, [r7, #13]
   tAD[2] = (uint8_t)(AddrSel & 0x000000ff);
 8008218:	687b      	ldr	r3, [r7, #4]
 800821a:	b2db      	uxtb	r3, r3
 800821c:	73bb      	strb	r3, [r7, #14]
   tAD[3] = wb;
 800821e:	78fb      	ldrb	r3, [r7, #3]
 8008220:	73fb      	strb	r3, [r7, #15]

   WIZCHIP_CRITICAL_ENTER();
 8008222:	4b0c      	ldr	r3, [pc, #48]	; (8008254 <WIZCHIP_WRITE+0x58>)
 8008224:	689b      	ldr	r3, [r3, #8]
 8008226:	4798      	blx	r3
   WIZCHIP.CS._s_e_l_e_c_t_();
 8008228:	4b0a      	ldr	r3, [pc, #40]	; (8008254 <WIZCHIP_WRITE+0x58>)
 800822a:	691b      	ldr	r3, [r3, #16]
 800822c:	4798      	blx	r3
#if( (_WIZCHIP_IO_MODE_ == _WIZCHIP_IO_MODE_SPI_VDM_))
   tAD[2] |= (_W6100_SPI_WRITE_ | _W6100_SPI_OP_);
   WIZCHIP.IF.SPI._write_byte_buf(tAD, 4);

#elif ( (_WIZCHIP_IO_MODE_ == _WIZCHIP_IO_MODE_BUS_INDIR_) )
   WIZCHIP.IF.BUS._write_data_buf(IDM_AR0, tAD, 4, 1);
 800822e:	4b09      	ldr	r3, [pc, #36]	; (8008254 <WIZCHIP_WRITE+0x58>)
 8008230:	6a5c      	ldr	r4, [r3, #36]	; 0x24
 8008232:	f107 010c 	add.w	r1, r7, #12
 8008236:	2301      	movs	r3, #1
 8008238:	2204      	movs	r2, #4
 800823a:	f04f 40c0 	mov.w	r0, #1610612736	; 0x60000000
 800823e:	47a0      	blx	r4
#else
   #error "Unknown _WIZCHIP_IO_MODE_ in W5100. !!!"
#endif

   WIZCHIP.CS._d_e_s_e_l_e_c_t_();
 8008240:	4b04      	ldr	r3, [pc, #16]	; (8008254 <WIZCHIP_WRITE+0x58>)
 8008242:	695b      	ldr	r3, [r3, #20]
 8008244:	4798      	blx	r3
   WIZCHIP_CRITICAL_EXIT();
 8008246:	4b03      	ldr	r3, [pc, #12]	; (8008254 <WIZCHIP_WRITE+0x58>)
 8008248:	68db      	ldr	r3, [r3, #12]
 800824a:	4798      	blx	r3
}
 800824c:	bf00      	nop
 800824e:	3714      	adds	r7, #20
 8008250:	46bd      	mov	sp, r7
 8008252:	bd90      	pop	{r4, r7, pc}
 8008254:	20000088 	.word	0x20000088

08008258 <WIZCHIP_READ>:

uint8_t  WIZCHIP_READ(uint32_t AddrSel)
{
 8008258:	b590      	push	{r4, r7, lr}
 800825a:	b085      	sub	sp, #20
 800825c:	af00      	add	r7, sp, #0
 800825e:	6078      	str	r0, [r7, #4]
   uint8_t ret;
   uint8_t tAD[3];
   tAD[0] = (uint8_t)((AddrSel & 0x00FF0000) >> 16);
 8008260:	687b      	ldr	r3, [r7, #4]
 8008262:	0c1b      	lsrs	r3, r3, #16
 8008264:	b2db      	uxtb	r3, r3
 8008266:	733b      	strb	r3, [r7, #12]
   tAD[1] = (uint8_t)((AddrSel & 0x0000FF00) >> 8);
 8008268:	687b      	ldr	r3, [r7, #4]
 800826a:	0a1b      	lsrs	r3, r3, #8
 800826c:	b2db      	uxtb	r3, r3
 800826e:	737b      	strb	r3, [r7, #13]
   tAD[2] = (uint8_t)(AddrSel & 0x000000ff);
 8008270:	687b      	ldr	r3, [r7, #4]
 8008272:	b2db      	uxtb	r3, r3
 8008274:	73bb      	strb	r3, [r7, #14]

   WIZCHIP_CRITICAL_ENTER();
 8008276:	4b10      	ldr	r3, [pc, #64]	; (80082b8 <WIZCHIP_READ+0x60>)
 8008278:	689b      	ldr	r3, [r3, #8]
 800827a:	4798      	blx	r3
   WIZCHIP.CS._s_e_l_e_c_t_();
 800827c:	4b0e      	ldr	r3, [pc, #56]	; (80082b8 <WIZCHIP_READ+0x60>)
 800827e:	691b      	ldr	r3, [r3, #16]
 8008280:	4798      	blx	r3
#if( (_WIZCHIP_IO_MODE_ ==  _WIZCHIP_IO_MODE_SPI_VDM_))
   tAD[2] |= (_W6100_SPI_READ_ | _W6100_SPI_OP_);
   WIZCHIP.IF.SPI._write_byte_buf(tAD, 3);
   ret = WIZCHIP.IF.SPI._read_byte();
#elif ( (_WIZCHIP_IO_MODE_ == _WIZCHIP_IO_MODE_BUS_INDIR_) )
   WIZCHIP.IF.BUS._write_data_buf(IDM_AR0,tAD,3,1);
 8008282:	4b0d      	ldr	r3, [pc, #52]	; (80082b8 <WIZCHIP_READ+0x60>)
 8008284:	6a5c      	ldr	r4, [r3, #36]	; 0x24
 8008286:	f107 010c 	add.w	r1, r7, #12
 800828a:	2301      	movs	r3, #1
 800828c:	2203      	movs	r2, #3
 800828e:	f04f 40c0 	mov.w	r0, #1610612736	; 0x60000000
 8008292:	47a0      	blx	r4
   ret = WIZCHIP.IF.BUS._read_data(IDM_DR);
 8008294:	4b08      	ldr	r3, [pc, #32]	; (80082b8 <WIZCHIP_READ+0x60>)
 8008296:	699b      	ldr	r3, [r3, #24]
 8008298:	4808      	ldr	r0, [pc, #32]	; (80082bc <WIZCHIP_READ+0x64>)
 800829a:	4798      	blx	r3
 800829c:	4603      	mov	r3, r0
 800829e:	73fb      	strb	r3, [r7, #15]
#else
   #error "Unknown _WIZCHIP_IO_MODE_ in W6100. !!!"   
#endif

   WIZCHIP.CS._d_e_s_e_l_e_c_t_();
 80082a0:	4b05      	ldr	r3, [pc, #20]	; (80082b8 <WIZCHIP_READ+0x60>)
 80082a2:	695b      	ldr	r3, [r3, #20]
 80082a4:	4798      	blx	r3
   WIZCHIP_CRITICAL_EXIT();
 80082a6:	4b04      	ldr	r3, [pc, #16]	; (80082b8 <WIZCHIP_READ+0x60>)
 80082a8:	68db      	ldr	r3, [r3, #12]
 80082aa:	4798      	blx	r3
   return ret;
 80082ac:	7bfb      	ldrb	r3, [r7, #15]
}
 80082ae:	4618      	mov	r0, r3
 80082b0:	3714      	adds	r7, #20
 80082b2:	46bd      	mov	sp, r7
 80082b4:	bd90      	pop	{r4, r7, pc}
 80082b6:	bf00      	nop
 80082b8:	20000088 	.word	0x20000088
 80082bc:	60000003 	.word	0x60000003

080082c0 <WIZCHIP_WRITE_BUF>:

void WIZCHIP_WRITE_BUF(uint32_t AddrSel, uint8_t* pBuf, datasize_t len)
{
 80082c0:	b590      	push	{r4, r7, lr}
 80082c2:	b087      	sub	sp, #28
 80082c4:	af00      	add	r7, sp, #0
 80082c6:	60f8      	str	r0, [r7, #12]
 80082c8:	60b9      	str	r1, [r7, #8]
 80082ca:	4613      	mov	r3, r2
 80082cc:	80fb      	strh	r3, [r7, #6]
   uint8_t tAD[3];
   tAD[0] = (uint8_t)((AddrSel & 0x00FF0000) >> 16);
 80082ce:	68fb      	ldr	r3, [r7, #12]
 80082d0:	0c1b      	lsrs	r3, r3, #16
 80082d2:	b2db      	uxtb	r3, r3
 80082d4:	753b      	strb	r3, [r7, #20]
   tAD[1] = (uint8_t)((AddrSel & 0x0000FF00) >> 8);
 80082d6:	68fb      	ldr	r3, [r7, #12]
 80082d8:	0a1b      	lsrs	r3, r3, #8
 80082da:	b2db      	uxtb	r3, r3
 80082dc:	757b      	strb	r3, [r7, #21]
   tAD[2] = (uint8_t)(AddrSel & 0x000000ff);
 80082de:	68fb      	ldr	r3, [r7, #12]
 80082e0:	b2db      	uxtb	r3, r3
 80082e2:	75bb      	strb	r3, [r7, #22]


   WIZCHIP_CRITICAL_ENTER();
 80082e4:	4b10      	ldr	r3, [pc, #64]	; (8008328 <WIZCHIP_WRITE_BUF+0x68>)
 80082e6:	689b      	ldr	r3, [r3, #8]
 80082e8:	4798      	blx	r3
   WIZCHIP.CS._s_e_l_e_c_t_();
 80082ea:	4b0f      	ldr	r3, [pc, #60]	; (8008328 <WIZCHIP_WRITE_BUF+0x68>)
 80082ec:	691b      	ldr	r3, [r3, #16]
 80082ee:	4798      	blx	r3

   WIZCHIP.IF.SPI._write_byte_buf(tAD, 3);
   WIZCHIP.IF.SPI._write_byte_buf(pBuf, len);

#elif ( (_WIZCHIP_IO_MODE_ == _WIZCHIP_IO_MODE_BUS_INDIR_) )
   WIZCHIP.IF.BUS._write_data_buf(IDM_AR0,tAD, 3, 1);
 80082f0:	4b0d      	ldr	r3, [pc, #52]	; (8008328 <WIZCHIP_WRITE_BUF+0x68>)
 80082f2:	6a5c      	ldr	r4, [r3, #36]	; 0x24
 80082f4:	f107 0114 	add.w	r1, r7, #20
 80082f8:	2301      	movs	r3, #1
 80082fa:	2203      	movs	r2, #3
 80082fc:	f04f 40c0 	mov.w	r0, #1610612736	; 0x60000000
 8008300:	47a0      	blx	r4
   WIZCHIP.IF.BUS._write_data_buf(IDM_DR,pBuf,len, 0);
 8008302:	4b09      	ldr	r3, [pc, #36]	; (8008328 <WIZCHIP_WRITE_BUF+0x68>)
 8008304:	6a5c      	ldr	r4, [r3, #36]	; 0x24
 8008306:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 800830a:	2300      	movs	r3, #0
 800830c:	68b9      	ldr	r1, [r7, #8]
 800830e:	4807      	ldr	r0, [pc, #28]	; (800832c <WIZCHIP_WRITE_BUF+0x6c>)
 8008310:	47a0      	blx	r4
#else
   #error "Unknown _WIZCHIP_IO_MODE_ in W6100. !!!!"
#endif

   WIZCHIP.CS._d_e_s_e_l_e_c_t_();
 8008312:	4b05      	ldr	r3, [pc, #20]	; (8008328 <WIZCHIP_WRITE_BUF+0x68>)
 8008314:	695b      	ldr	r3, [r3, #20]
 8008316:	4798      	blx	r3
   WIZCHIP_CRITICAL_EXIT();
 8008318:	4b03      	ldr	r3, [pc, #12]	; (8008328 <WIZCHIP_WRITE_BUF+0x68>)
 800831a:	68db      	ldr	r3, [r3, #12]
 800831c:	4798      	blx	r3
}
 800831e:	bf00      	nop
 8008320:	371c      	adds	r7, #28
 8008322:	46bd      	mov	sp, r7
 8008324:	bd90      	pop	{r4, r7, pc}
 8008326:	bf00      	nop
 8008328:	20000088 	.word	0x20000088
 800832c:	60000003 	.word	0x60000003

08008330 <WIZCHIP_READ_BUF>:

void WIZCHIP_READ_BUF (uint32_t AddrSel, uint8_t* pBuf, datasize_t len)
{
 8008330:	b590      	push	{r4, r7, lr}
 8008332:	b087      	sub	sp, #28
 8008334:	af00      	add	r7, sp, #0
 8008336:	60f8      	str	r0, [r7, #12]
 8008338:	60b9      	str	r1, [r7, #8]
 800833a:	4613      	mov	r3, r2
 800833c:	80fb      	strh	r3, [r7, #6]
   uint8_t tAD[3];
   tAD[0] = (uint8_t)((AddrSel & 0x00FF0000) >> 16);
 800833e:	68fb      	ldr	r3, [r7, #12]
 8008340:	0c1b      	lsrs	r3, r3, #16
 8008342:	b2db      	uxtb	r3, r3
 8008344:	753b      	strb	r3, [r7, #20]
   tAD[1] = (uint8_t)((AddrSel & 0x0000FF00) >> 8);
 8008346:	68fb      	ldr	r3, [r7, #12]
 8008348:	0a1b      	lsrs	r3, r3, #8
 800834a:	b2db      	uxtb	r3, r3
 800834c:	757b      	strb	r3, [r7, #21]
   tAD[2] = (uint8_t)(AddrSel & 0x000000ff);
 800834e:	68fb      	ldr	r3, [r7, #12]
 8008350:	b2db      	uxtb	r3, r3
 8008352:	75bb      	strb	r3, [r7, #22]

   WIZCHIP_CRITICAL_ENTER();
 8008354:	4b10      	ldr	r3, [pc, #64]	; (8008398 <WIZCHIP_READ_BUF+0x68>)
 8008356:	689b      	ldr	r3, [r3, #8]
 8008358:	4798      	blx	r3
   WIZCHIP.CS._s_e_l_e_c_t_();
 800835a:	4b0f      	ldr	r3, [pc, #60]	; (8008398 <WIZCHIP_READ_BUF+0x68>)
 800835c:	691b      	ldr	r3, [r3, #16]
 800835e:	4798      	blx	r3
#if((_WIZCHIP_IO_MODE_ == _WIZCHIP_IO_MODE_SPI_VDM_))
   tAD[2] |= (_W6100_SPI_READ_ | _W6100_SPI_OP_);
   WIZCHIP.IF.SPI._write_byte_buf(tAD,3);
   WIZCHIP.IF.SPI._read_byte_buf(pBuf, len);
#elif ( (_WIZCHIP_IO_MODE_ == _WIZCHIP_IO_MODE_BUS_INDIR_) )
   WIZCHIP.IF.BUS._write_data_buf(IDM_AR0,tAD,3,1);
 8008360:	4b0d      	ldr	r3, [pc, #52]	; (8008398 <WIZCHIP_READ_BUF+0x68>)
 8008362:	6a5c      	ldr	r4, [r3, #36]	; 0x24
 8008364:	f107 0114 	add.w	r1, r7, #20
 8008368:	2301      	movs	r3, #1
 800836a:	2203      	movs	r2, #3
 800836c:	f04f 40c0 	mov.w	r0, #1610612736	; 0x60000000
 8008370:	47a0      	blx	r4
   WIZCHIP.IF.BUS._read_data_buf(IDM_DR,pBuf,len,0);
 8008372:	4b09      	ldr	r3, [pc, #36]	; (8008398 <WIZCHIP_READ_BUF+0x68>)
 8008374:	6a1c      	ldr	r4, [r3, #32]
 8008376:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 800837a:	2300      	movs	r3, #0
 800837c:	68b9      	ldr	r1, [r7, #8]
 800837e:	4807      	ldr	r0, [pc, #28]	; (800839c <WIZCHIP_READ_BUF+0x6c>)
 8008380:	47a0      	blx	r4
#else
   #error "Unknown _WIZCHIP_IO_MODE_ in W6100. !!!!"
#endif
   WIZCHIP.CS._d_e_s_e_l_e_c_t_();
 8008382:	4b05      	ldr	r3, [pc, #20]	; (8008398 <WIZCHIP_READ_BUF+0x68>)
 8008384:	695b      	ldr	r3, [r3, #20]
 8008386:	4798      	blx	r3
   WIZCHIP_CRITICAL_EXIT();
 8008388:	4b03      	ldr	r3, [pc, #12]	; (8008398 <WIZCHIP_READ_BUF+0x68>)
 800838a:	68db      	ldr	r3, [r3, #12]
 800838c:	4798      	blx	r3
}
 800838e:	bf00      	nop
 8008390:	371c      	adds	r7, #28
 8008392:	46bd      	mov	sp, r7
 8008394:	bd90      	pop	{r4, r7, pc}
 8008396:	bf00      	nop
 8008398:	20000088 	.word	0x20000088
 800839c:	60000003 	.word	0x60000003

080083a0 <getSn_TX_FSR>:

datasize_t getSn_TX_FSR(uint8_t sn)
{
 80083a0:	b590      	push	{r4, r7, lr}
 80083a2:	b085      	sub	sp, #20
 80083a4:	af00      	add	r7, sp, #0
 80083a6:	4603      	mov	r3, r0
 80083a8:	71fb      	strb	r3, [r7, #7]
   datasize_t prev_val=-1,val=0;
 80083aa:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80083ae:	81bb      	strh	r3, [r7, #12]
 80083b0:	2300      	movs	r3, #0
 80083b2:	81fb      	strh	r3, [r7, #14]
   do
   {
      prev_val = val;
 80083b4:	89fb      	ldrh	r3, [r7, #14]
 80083b6:	81bb      	strh	r3, [r7, #12]
      val = WIZCHIP_READ(_Sn_TX_FSR_(sn));
 80083b8:	79fb      	ldrb	r3, [r7, #7]
 80083ba:	009b      	lsls	r3, r3, #2
 80083bc:	3301      	adds	r3, #1
 80083be:	00da      	lsls	r2, r3, #3
 80083c0:	4b11      	ldr	r3, [pc, #68]	; (8008408 <getSn_TX_FSR+0x68>)
 80083c2:	4413      	add	r3, r2
 80083c4:	4618      	mov	r0, r3
 80083c6:	f7ff ff47 	bl	8008258 <WIZCHIP_READ>
 80083ca:	4603      	mov	r3, r0
 80083cc:	81fb      	strh	r3, [r7, #14]
      val = (val << 8) + WIZCHIP_READ(WIZCHIP_OFFSET_INC(_Sn_TX_FSR_(sn),1));
 80083ce:	89fb      	ldrh	r3, [r7, #14]
 80083d0:	021b      	lsls	r3, r3, #8
 80083d2:	b29c      	uxth	r4, r3
 80083d4:	79fb      	ldrb	r3, [r7, #7]
 80083d6:	009b      	lsls	r3, r3, #2
 80083d8:	3301      	adds	r3, #1
 80083da:	00da      	lsls	r2, r3, #3
 80083dc:	4b0b      	ldr	r3, [pc, #44]	; (800840c <getSn_TX_FSR+0x6c>)
 80083de:	4413      	add	r3, r2
 80083e0:	4618      	mov	r0, r3
 80083e2:	f7ff ff39 	bl	8008258 <WIZCHIP_READ>
 80083e6:	4603      	mov	r3, r0
 80083e8:	b29b      	uxth	r3, r3
 80083ea:	4423      	add	r3, r4
 80083ec:	b29b      	uxth	r3, r3
 80083ee:	81fb      	strh	r3, [r7, #14]
   }while (val != prev_val);
 80083f0:	f9b7 200e 	ldrsh.w	r2, [r7, #14]
 80083f4:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 80083f8:	429a      	cmp	r2, r3
 80083fa:	d1db      	bne.n	80083b4 <getSn_TX_FSR+0x14>
   return val;
 80083fc:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
}
 8008400:	4618      	mov	r0, r3
 8008402:	3714      	adds	r7, #20
 8008404:	46bd      	mov	sp, r7
 8008406:	bd90      	pop	{r4, r7, pc}
 8008408:	60020400 	.word	0x60020400
 800840c:	60020500 	.word	0x60020500

08008410 <getSn_RX_RSR>:

datasize_t getSn_RX_RSR(uint8_t sn)
{
 8008410:	b590      	push	{r4, r7, lr}
 8008412:	b085      	sub	sp, #20
 8008414:	af00      	add	r7, sp, #0
 8008416:	4603      	mov	r3, r0
 8008418:	71fb      	strb	r3, [r7, #7]
   datasize_t prev_val=-1,val=0;
 800841a:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800841e:	81bb      	strh	r3, [r7, #12]
 8008420:	2300      	movs	r3, #0
 8008422:	81fb      	strh	r3, [r7, #14]
   do
   {
      prev_val = val;
 8008424:	89fb      	ldrh	r3, [r7, #14]
 8008426:	81bb      	strh	r3, [r7, #12]
      val = WIZCHIP_READ(_Sn_RX_RSR_(sn));
 8008428:	79fb      	ldrb	r3, [r7, #7]
 800842a:	009b      	lsls	r3, r3, #2
 800842c:	3301      	adds	r3, #1
 800842e:	00da      	lsls	r2, r3, #3
 8008430:	4b11      	ldr	r3, [pc, #68]	; (8008478 <getSn_RX_RSR+0x68>)
 8008432:	4413      	add	r3, r2
 8008434:	4618      	mov	r0, r3
 8008436:	f7ff ff0f 	bl	8008258 <WIZCHIP_READ>
 800843a:	4603      	mov	r3, r0
 800843c:	81fb      	strh	r3, [r7, #14]
      val = (val << 8) + WIZCHIP_READ(WIZCHIP_OFFSET_INC(_Sn_RX_RSR_(sn),1));
 800843e:	89fb      	ldrh	r3, [r7, #14]
 8008440:	021b      	lsls	r3, r3, #8
 8008442:	b29c      	uxth	r4, r3
 8008444:	79fb      	ldrb	r3, [r7, #7]
 8008446:	009b      	lsls	r3, r3, #2
 8008448:	3301      	adds	r3, #1
 800844a:	00da      	lsls	r2, r3, #3
 800844c:	4b0b      	ldr	r3, [pc, #44]	; (800847c <getSn_RX_RSR+0x6c>)
 800844e:	4413      	add	r3, r2
 8008450:	4618      	mov	r0, r3
 8008452:	f7ff ff01 	bl	8008258 <WIZCHIP_READ>
 8008456:	4603      	mov	r3, r0
 8008458:	b29b      	uxth	r3, r3
 800845a:	4423      	add	r3, r4
 800845c:	b29b      	uxth	r3, r3
 800845e:	81fb      	strh	r3, [r7, #14]
   }while (val != prev_val);
 8008460:	f9b7 200e 	ldrsh.w	r2, [r7, #14]
 8008464:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 8008468:	429a      	cmp	r2, r3
 800846a:	d1db      	bne.n	8008424 <getSn_RX_RSR+0x14>
   return val;
 800846c:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
}
 8008470:	4618      	mov	r0, r3
 8008472:	3714      	adds	r7, #20
 8008474:	46bd      	mov	sp, r7
 8008476:	bd90      	pop	{r4, r7, pc}
 8008478:	60022400 	.word	0x60022400
 800847c:	60022500 	.word	0x60022500

08008480 <wiz_send_data>:

void wiz_send_data(uint8_t sn, uint8_t *wizdata, datasize_t len)
{
 8008480:	b590      	push	{r4, r7, lr}
 8008482:	b085      	sub	sp, #20
 8008484:	af00      	add	r7, sp, #0
 8008486:	4603      	mov	r3, r0
 8008488:	6039      	str	r1, [r7, #0]
 800848a:	71fb      	strb	r3, [r7, #7]
 800848c:	4613      	mov	r3, r2
 800848e:	80bb      	strh	r3, [r7, #4]
   datasize_t ptr = 0;
 8008490:	2300      	movs	r3, #0
 8008492:	81fb      	strh	r3, [r7, #14]
   uint32_t addrsel = 0;
 8008494:	2300      	movs	r3, #0
 8008496:	60bb      	str	r3, [r7, #8]
   ptr = getSn_TX_WR(sn);
 8008498:	79fb      	ldrb	r3, [r7, #7]
 800849a:	009b      	lsls	r3, r3, #2
 800849c:	3301      	adds	r3, #1
 800849e:	00da      	lsls	r2, r3, #3
 80084a0:	4b26      	ldr	r3, [pc, #152]	; (800853c <wiz_send_data+0xbc>)
 80084a2:	4413      	add	r3, r2
 80084a4:	4618      	mov	r0, r3
 80084a6:	f7ff fed7 	bl	8008258 <WIZCHIP_READ>
 80084aa:	4603      	mov	r3, r0
 80084ac:	b29b      	uxth	r3, r3
 80084ae:	021b      	lsls	r3, r3, #8
 80084b0:	b29c      	uxth	r4, r3
 80084b2:	79fb      	ldrb	r3, [r7, #7]
 80084b4:	009b      	lsls	r3, r3, #2
 80084b6:	3301      	adds	r3, #1
 80084b8:	00da      	lsls	r2, r3, #3
 80084ba:	4b21      	ldr	r3, [pc, #132]	; (8008540 <wiz_send_data+0xc0>)
 80084bc:	4413      	add	r3, r2
 80084be:	4618      	mov	r0, r3
 80084c0:	f7ff feca 	bl	8008258 <WIZCHIP_READ>
 80084c4:	4603      	mov	r3, r0
 80084c6:	b29b      	uxth	r3, r3
 80084c8:	4423      	add	r3, r4
 80084ca:	b29b      	uxth	r3, r3
 80084cc:	81fb      	strh	r3, [r7, #14]
   addrsel = ((uint32_t)ptr << 8) + WIZCHIP_TXBUF_BLOCK(sn);
 80084ce:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 80084d2:	021b      	lsls	r3, r3, #8
 80084d4:	79fa      	ldrb	r2, [r7, #7]
 80084d6:	0092      	lsls	r2, r2, #2
 80084d8:	3202      	adds	r2, #2
 80084da:	00d2      	lsls	r2, r2, #3
 80084dc:	4413      	add	r3, r2
 80084de:	60bb      	str	r3, [r7, #8]
   WIZCHIP_WRITE_BUF(addrsel,wizdata, len);
 80084e0:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 80084e4:	461a      	mov	r2, r3
 80084e6:	6839      	ldr	r1, [r7, #0]
 80084e8:	68b8      	ldr	r0, [r7, #8]
 80084ea:	f7ff fee9 	bl	80082c0 <WIZCHIP_WRITE_BUF>
   ptr += len;
 80084ee:	89fa      	ldrh	r2, [r7, #14]
 80084f0:	88bb      	ldrh	r3, [r7, #4]
 80084f2:	4413      	add	r3, r2
 80084f4:	b29b      	uxth	r3, r3
 80084f6:	81fb      	strh	r3, [r7, #14]
   setSn_TX_WR(sn,ptr);
 80084f8:	79fb      	ldrb	r3, [r7, #7]
 80084fa:	009b      	lsls	r3, r3, #2
 80084fc:	3301      	adds	r3, #1
 80084fe:	00da      	lsls	r2, r3, #3
 8008500:	4b0e      	ldr	r3, [pc, #56]	; (800853c <wiz_send_data+0xbc>)
 8008502:	4413      	add	r3, r2
 8008504:	461a      	mov	r2, r3
 8008506:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 800850a:	121b      	asrs	r3, r3, #8
 800850c:	b21b      	sxth	r3, r3
 800850e:	b2db      	uxtb	r3, r3
 8008510:	4619      	mov	r1, r3
 8008512:	4610      	mov	r0, r2
 8008514:	f7ff fe72 	bl	80081fc <WIZCHIP_WRITE>
 8008518:	79fb      	ldrb	r3, [r7, #7]
 800851a:	009b      	lsls	r3, r3, #2
 800851c:	3301      	adds	r3, #1
 800851e:	00da      	lsls	r2, r3, #3
 8008520:	4b07      	ldr	r3, [pc, #28]	; (8008540 <wiz_send_data+0xc0>)
 8008522:	4413      	add	r3, r2
 8008524:	461a      	mov	r2, r3
 8008526:	89fb      	ldrh	r3, [r7, #14]
 8008528:	b2db      	uxtb	r3, r3
 800852a:	4619      	mov	r1, r3
 800852c:	4610      	mov	r0, r2
 800852e:	f7ff fe65 	bl	80081fc <WIZCHIP_WRITE>
}
 8008532:	bf00      	nop
 8008534:	3714      	adds	r7, #20
 8008536:	46bd      	mov	sp, r7
 8008538:	bd90      	pop	{r4, r7, pc}
 800853a:	bf00      	nop
 800853c:	60020c00 	.word	0x60020c00
 8008540:	60020d00 	.word	0x60020d00

08008544 <wiz_recv_data>:

void wiz_recv_data(uint8_t sn, uint8_t *wizdata, datasize_t len)
{
 8008544:	b590      	push	{r4, r7, lr}
 8008546:	b085      	sub	sp, #20
 8008548:	af00      	add	r7, sp, #0
 800854a:	4603      	mov	r3, r0
 800854c:	6039      	str	r1, [r7, #0]
 800854e:	71fb      	strb	r3, [r7, #7]
 8008550:	4613      	mov	r3, r2
 8008552:	80bb      	strh	r3, [r7, #4]
   datasize_t ptr = 0;
 8008554:	2300      	movs	r3, #0
 8008556:	81fb      	strh	r3, [r7, #14]
   uint32_t addrsel = 0;
 8008558:	2300      	movs	r3, #0
 800855a:	60bb      	str	r3, [r7, #8]
   if(len == 0) return;
 800855c:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 8008560:	2b00      	cmp	r3, #0
 8008562:	d04d      	beq.n	8008600 <wiz_recv_data+0xbc>
   ptr = getSn_RX_RD(sn);
 8008564:	79fb      	ldrb	r3, [r7, #7]
 8008566:	009b      	lsls	r3, r3, #2
 8008568:	3301      	adds	r3, #1
 800856a:	00da      	lsls	r2, r3, #3
 800856c:	4b26      	ldr	r3, [pc, #152]	; (8008608 <wiz_recv_data+0xc4>)
 800856e:	4413      	add	r3, r2
 8008570:	4618      	mov	r0, r3
 8008572:	f7ff fe71 	bl	8008258 <WIZCHIP_READ>
 8008576:	4603      	mov	r3, r0
 8008578:	b29b      	uxth	r3, r3
 800857a:	021b      	lsls	r3, r3, #8
 800857c:	b29c      	uxth	r4, r3
 800857e:	79fb      	ldrb	r3, [r7, #7]
 8008580:	009b      	lsls	r3, r3, #2
 8008582:	3301      	adds	r3, #1
 8008584:	00da      	lsls	r2, r3, #3
 8008586:	4b21      	ldr	r3, [pc, #132]	; (800860c <wiz_recv_data+0xc8>)
 8008588:	4413      	add	r3, r2
 800858a:	4618      	mov	r0, r3
 800858c:	f7ff fe64 	bl	8008258 <WIZCHIP_READ>
 8008590:	4603      	mov	r3, r0
 8008592:	b29b      	uxth	r3, r3
 8008594:	4423      	add	r3, r4
 8008596:	b29b      	uxth	r3, r3
 8008598:	81fb      	strh	r3, [r7, #14]
   addrsel = ((uint32_t)ptr << 8) + WIZCHIP_RXBUF_BLOCK(sn);
 800859a:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 800859e:	021b      	lsls	r3, r3, #8
 80085a0:	79fa      	ldrb	r2, [r7, #7]
 80085a2:	0092      	lsls	r2, r2, #2
 80085a4:	3203      	adds	r2, #3
 80085a6:	00d2      	lsls	r2, r2, #3
 80085a8:	4413      	add	r3, r2
 80085aa:	60bb      	str	r3, [r7, #8]
   WIZCHIP_READ_BUF(addrsel, wizdata, len);
 80085ac:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 80085b0:	461a      	mov	r2, r3
 80085b2:	6839      	ldr	r1, [r7, #0]
 80085b4:	68b8      	ldr	r0, [r7, #8]
 80085b6:	f7ff febb 	bl	8008330 <WIZCHIP_READ_BUF>
   ptr += len;
 80085ba:	89fa      	ldrh	r2, [r7, #14]
 80085bc:	88bb      	ldrh	r3, [r7, #4]
 80085be:	4413      	add	r3, r2
 80085c0:	b29b      	uxth	r3, r3
 80085c2:	81fb      	strh	r3, [r7, #14]
   setSn_RX_RD(sn,ptr);
 80085c4:	79fb      	ldrb	r3, [r7, #7]
 80085c6:	009b      	lsls	r3, r3, #2
 80085c8:	3301      	adds	r3, #1
 80085ca:	00da      	lsls	r2, r3, #3
 80085cc:	4b0e      	ldr	r3, [pc, #56]	; (8008608 <wiz_recv_data+0xc4>)
 80085ce:	4413      	add	r3, r2
 80085d0:	461a      	mov	r2, r3
 80085d2:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 80085d6:	121b      	asrs	r3, r3, #8
 80085d8:	b21b      	sxth	r3, r3
 80085da:	b2db      	uxtb	r3, r3
 80085dc:	4619      	mov	r1, r3
 80085de:	4610      	mov	r0, r2
 80085e0:	f7ff fe0c 	bl	80081fc <WIZCHIP_WRITE>
 80085e4:	79fb      	ldrb	r3, [r7, #7]
 80085e6:	009b      	lsls	r3, r3, #2
 80085e8:	3301      	adds	r3, #1
 80085ea:	00da      	lsls	r2, r3, #3
 80085ec:	4b07      	ldr	r3, [pc, #28]	; (800860c <wiz_recv_data+0xc8>)
 80085ee:	4413      	add	r3, r2
 80085f0:	461a      	mov	r2, r3
 80085f2:	89fb      	ldrh	r3, [r7, #14]
 80085f4:	b2db      	uxtb	r3, r3
 80085f6:	4619      	mov	r1, r3
 80085f8:	4610      	mov	r0, r2
 80085fa:	f7ff fdff 	bl	80081fc <WIZCHIP_WRITE>
 80085fe:	e000      	b.n	8008602 <wiz_recv_data+0xbe>
   if(len == 0) return;
 8008600:	bf00      	nop
}
 8008602:	3714      	adds	r7, #20
 8008604:	46bd      	mov	sp, r7
 8008606:	bd90      	pop	{r4, r7, pc}
 8008608:	60022800 	.word	0x60022800
 800860c:	60022900 	.word	0x60022900

08008610 <socket>:
   }while(0);



int8_t socket(uint8_t sn, uint8_t protocol, uint16_t port, uint8_t flag)
{ 
 8008610:	b590      	push	{r4, r7, lr}
 8008612:	b08d      	sub	sp, #52	; 0x34
 8008614:	af00      	add	r7, sp, #0
 8008616:	4604      	mov	r4, r0
 8008618:	4608      	mov	r0, r1
 800861a:	4611      	mov	r1, r2
 800861c:	461a      	mov	r2, r3
 800861e:	4623      	mov	r3, r4
 8008620:	71fb      	strb	r3, [r7, #7]
 8008622:	4603      	mov	r3, r0
 8008624:	71bb      	strb	r3, [r7, #6]
 8008626:	460b      	mov	r3, r1
 8008628:	80bb      	strh	r3, [r7, #4]
 800862a:	4613      	mov	r3, r2
 800862c:	70fb      	strb	r3, [r7, #3]
   uint8_t taddr[16];
   uint16_t local_port=0;
 800862e:	2300      	movs	r3, #0
 8008630:	83fb      	strh	r3, [r7, #30]
   CHECK_SOCKNUM(); 
 8008632:	79fb      	ldrb	r3, [r7, #7]
 8008634:	2b07      	cmp	r3, #7
 8008636:	d902      	bls.n	800863e <socket+0x2e>
 8008638:	f04f 33ff 	mov.w	r3, #4294967295
 800863c:	e1d8      	b.n	80089f0 <socket+0x3e0>
   switch (protocol & 0x0F)
 800863e:	79bb      	ldrb	r3, [r7, #6]
 8008640:	f003 030f 	and.w	r3, r3, #15
 8008644:	2b01      	cmp	r3, #1
 8008646:	d029      	beq.n	800869c <socket+0x8c>
 8008648:	2b00      	cmp	r3, #0
 800864a:	f340 80bf 	ble.w	80087cc <socket+0x1bc>
 800864e:	2b0e      	cmp	r3, #14
 8008650:	f300 80bc 	bgt.w	80087cc <socket+0x1bc>
 8008654:	2b02      	cmp	r3, #2
 8008656:	f2c0 80b9 	blt.w	80087cc <socket+0x1bc>
 800865a:	461a      	mov	r2, r3
 800865c:	2301      	movs	r3, #1
 800865e:	4093      	lsls	r3, r2
 8008660:	f644 428c 	movw	r2, #19596	; 0x4c8c
 8008664:	401a      	ands	r2, r3
 8008666:	2a00      	cmp	r2, #0
 8008668:	bf14      	ite	ne
 800866a:	2201      	movne	r2, #1
 800866c:	2200      	moveq	r2, #0
 800866e:	b2d2      	uxtb	r2, r2
 8008670:	2a00      	cmp	r2, #0
 8008672:	f040 80ae 	bne.w	80087d2 <socket+0x1c2>
 8008676:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 800867a:	2a00      	cmp	r2, #0
 800867c:	bf14      	ite	ne
 800867e:	2201      	movne	r2, #1
 8008680:	2200      	moveq	r2, #0
 8008682:	b2d2      	uxtb	r2, r2
 8008684:	2a00      	cmp	r2, #0
 8008686:	d155      	bne.n	8008734 <socket+0x124>
 8008688:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800868c:	2b00      	cmp	r3, #0
 800868e:	bf14      	ite	ne
 8008690:	2301      	movne	r3, #1
 8008692:	2300      	moveq	r3, #0
 8008694:	b2db      	uxtb	r3, r3
 8008696:	2b00      	cmp	r3, #0
 8008698:	d126      	bne.n	80086e8 <socket+0xd8>
 800869a:	e097      	b.n	80087cc <socket+0x1bc>
   {
      case Sn_MR_TCP4 :
         getSIPR(taddr);
 800869c:	f107 030c 	add.w	r3, r7, #12
 80086a0:	2204      	movs	r2, #4
 80086a2:	4619      	mov	r1, r3
 80086a4:	4876      	ldr	r0, [pc, #472]	; (8008880 <socket+0x270>)
 80086a6:	f7ff fe43 	bl	8008330 <WIZCHIP_READ_BUF>
         CHECK_IPZERO(taddr, 4);
 80086aa:	2300      	movs	r3, #0
 80086ac:	85fb      	strh	r3, [r7, #46]	; 0x2e
 80086ae:	2300      	movs	r3, #0
 80086b0:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d
 80086b4:	e00e      	b.n	80086d4 <socket+0xc4>
 80086b6:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 80086ba:	3330      	adds	r3, #48	; 0x30
 80086bc:	443b      	add	r3, r7
 80086be:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 80086c2:	b29a      	uxth	r2, r3
 80086c4:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 80086c6:	4413      	add	r3, r2
 80086c8:	85fb      	strh	r3, [r7, #46]	; 0x2e
 80086ca:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 80086ce:	3301      	adds	r3, #1
 80086d0:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d
 80086d4:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 80086d8:	2b03      	cmp	r3, #3
 80086da:	d9ec      	bls.n	80086b6 <socket+0xa6>
 80086dc:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 80086de:	2b00      	cmp	r3, #0
 80086e0:	d179      	bne.n	80087d6 <socket+0x1c6>
 80086e2:	f06f 030b 	mvn.w	r3, #11
 80086e6:	e183      	b.n	80089f0 <socket+0x3e0>
         break;
      case Sn_MR_TCP6 :
         getLLAR(taddr);
 80086e8:	f107 030c 	add.w	r3, r7, #12
 80086ec:	2210      	movs	r2, #16
 80086ee:	4619      	mov	r1, r3
 80086f0:	4864      	ldr	r0, [pc, #400]	; (8008884 <socket+0x274>)
 80086f2:	f7ff fe1d 	bl	8008330 <WIZCHIP_READ_BUF>
         CHECK_IPZERO(taddr, 16);
 80086f6:	2300      	movs	r3, #0
 80086f8:	857b      	strh	r3, [r7, #42]	; 0x2a
 80086fa:	2300      	movs	r3, #0
 80086fc:	f887 3029 	strb.w	r3, [r7, #41]	; 0x29
 8008700:	e00e      	b.n	8008720 <socket+0x110>
 8008702:	f897 3029 	ldrb.w	r3, [r7, #41]	; 0x29
 8008706:	3330      	adds	r3, #48	; 0x30
 8008708:	443b      	add	r3, r7
 800870a:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 800870e:	b29a      	uxth	r2, r3
 8008710:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8008712:	4413      	add	r3, r2
 8008714:	857b      	strh	r3, [r7, #42]	; 0x2a
 8008716:	f897 3029 	ldrb.w	r3, [r7, #41]	; 0x29
 800871a:	3301      	adds	r3, #1
 800871c:	f887 3029 	strb.w	r3, [r7, #41]	; 0x29
 8008720:	f897 3029 	ldrb.w	r3, [r7, #41]	; 0x29
 8008724:	2b0f      	cmp	r3, #15
 8008726:	d9ec      	bls.n	8008702 <socket+0xf2>
 8008728:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 800872a:	2b00      	cmp	r3, #0
 800872c:	d155      	bne.n	80087da <socket+0x1ca>
 800872e:	f06f 030b 	mvn.w	r3, #11
 8008732:	e15d      	b.n	80089f0 <socket+0x3e0>
         //getGUAR(taddr);
         //CHECK_IPZERO(taddr, 16);
         break;
      case Sn_MR_TCPD :  
         getSIPR(taddr);
 8008734:	f107 030c 	add.w	r3, r7, #12
 8008738:	2204      	movs	r2, #4
 800873a:	4619      	mov	r1, r3
 800873c:	4850      	ldr	r0, [pc, #320]	; (8008880 <socket+0x270>)
 800873e:	f7ff fdf7 	bl	8008330 <WIZCHIP_READ_BUF>
         CHECK_IPZERO(taddr, 4);
 8008742:	2300      	movs	r3, #0
 8008744:	84fb      	strh	r3, [r7, #38]	; 0x26
 8008746:	2300      	movs	r3, #0
 8008748:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
 800874c:	e00e      	b.n	800876c <socket+0x15c>
 800874e:	f897 3025 	ldrb.w	r3, [r7, #37]	; 0x25
 8008752:	3330      	adds	r3, #48	; 0x30
 8008754:	443b      	add	r3, r7
 8008756:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 800875a:	b29a      	uxth	r2, r3
 800875c:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 800875e:	4413      	add	r3, r2
 8008760:	84fb      	strh	r3, [r7, #38]	; 0x26
 8008762:	f897 3025 	ldrb.w	r3, [r7, #37]	; 0x25
 8008766:	3301      	adds	r3, #1
 8008768:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
 800876c:	f897 3025 	ldrb.w	r3, [r7, #37]	; 0x25
 8008770:	2b03      	cmp	r3, #3
 8008772:	d9ec      	bls.n	800874e <socket+0x13e>
 8008774:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8008776:	2b00      	cmp	r3, #0
 8008778:	d102      	bne.n	8008780 <socket+0x170>
 800877a:	f06f 030b 	mvn.w	r3, #11
 800877e:	e137      	b.n	80089f0 <socket+0x3e0>
         getLLAR(taddr);
 8008780:	f107 030c 	add.w	r3, r7, #12
 8008784:	2210      	movs	r2, #16
 8008786:	4619      	mov	r1, r3
 8008788:	483e      	ldr	r0, [pc, #248]	; (8008884 <socket+0x274>)
 800878a:	f7ff fdd1 	bl	8008330 <WIZCHIP_READ_BUF>
         CHECK_IPZERO(taddr, 16);
 800878e:	2300      	movs	r3, #0
 8008790:	847b      	strh	r3, [r7, #34]	; 0x22
 8008792:	2300      	movs	r3, #0
 8008794:	f887 3021 	strb.w	r3, [r7, #33]	; 0x21
 8008798:	e00e      	b.n	80087b8 <socket+0x1a8>
 800879a:	f897 3021 	ldrb.w	r3, [r7, #33]	; 0x21
 800879e:	3330      	adds	r3, #48	; 0x30
 80087a0:	443b      	add	r3, r7
 80087a2:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 80087a6:	b29a      	uxth	r2, r3
 80087a8:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 80087aa:	4413      	add	r3, r2
 80087ac:	847b      	strh	r3, [r7, #34]	; 0x22
 80087ae:	f897 3021 	ldrb.w	r3, [r7, #33]	; 0x21
 80087b2:	3301      	adds	r3, #1
 80087b4:	f887 3021 	strb.w	r3, [r7, #33]	; 0x21
 80087b8:	f897 3021 	ldrb.w	r3, [r7, #33]	; 0x21
 80087bc:	2b0f      	cmp	r3, #15
 80087be:	d9ec      	bls.n	800879a <socket+0x18a>
 80087c0:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 80087c2:	2b00      	cmp	r3, #0
 80087c4:	d10b      	bne.n	80087de <socket+0x1ce>
 80087c6:	f06f 030b 	mvn.w	r3, #11
 80087ca:	e111      	b.n	80089f0 <socket+0x3e0>
      case Sn_MR_MACRAW :
      case Sn_MR_IPRAW4 :
      case Sn_MR_IPRAW6 :
         break; 
      default :
        return SOCKERR_SOCKMODE;
 80087cc:	f06f 0304 	mvn.w	r3, #4
 80087d0:	e10e      	b.n	80089f0 <socket+0x3e0>
         break; 
 80087d2:	bf00      	nop
 80087d4:	e004      	b.n	80087e0 <socket+0x1d0>
         break;
 80087d6:	bf00      	nop
 80087d8:	e002      	b.n	80087e0 <socket+0x1d0>
         break;
 80087da:	bf00      	nop
 80087dc:	e000      	b.n	80087e0 <socket+0x1d0>
         break;
 80087de:	bf00      	nop
   } 

   if((flag & 0x04)) return SOCKERR_SOCKFLAG;
 80087e0:	78fb      	ldrb	r3, [r7, #3]
 80087e2:	f003 0304 	and.w	r3, r3, #4
 80087e6:	2b00      	cmp	r3, #0
 80087e8:	d002      	beq.n	80087f0 <socket+0x1e0>
 80087ea:	f06f 0305 	mvn.w	r3, #5
 80087ee:	e0ff      	b.n	80089f0 <socket+0x3e0>
   if(flag != 0)
 80087f0:	78fb      	ldrb	r3, [r7, #3]
 80087f2:	2b00      	cmp	r3, #0
 80087f4:	d049      	beq.n	800888a <socket+0x27a>
   {
      switch(protocol)
 80087f6:	79bb      	ldrb	r3, [r7, #6]
 80087f8:	2b0d      	cmp	r3, #13
 80087fa:	bf8c      	ite	hi
 80087fc:	2201      	movhi	r2, #1
 80087fe:	2200      	movls	r2, #0
 8008800:	b2d2      	uxtb	r2, r2
 8008802:	2a00      	cmp	r2, #0
 8008804:	d135      	bne.n	8008872 <socket+0x262>
 8008806:	2201      	movs	r2, #1
 8008808:	fa02 f303 	lsl.w	r3, r2, r3
 800880c:	f242 2202 	movw	r2, #8706	; 0x2202
 8008810:	401a      	ands	r2, r3
 8008812:	2a00      	cmp	r2, #0
 8008814:	bf14      	ite	ne
 8008816:	2201      	movne	r2, #1
 8008818:	2200      	moveq	r2, #0
 800881a:	b2d2      	uxtb	r2, r2
 800881c:	2a00      	cmp	r2, #0
 800881e:	d11a      	bne.n	8008856 <socket+0x246>
 8008820:	f640 0208 	movw	r2, #2056	; 0x808
 8008824:	401a      	ands	r2, r3
 8008826:	2a00      	cmp	r2, #0
 8008828:	bf14      	ite	ne
 800882a:	2201      	movne	r2, #1
 800882c:	2200      	moveq	r2, #0
 800882e:	b2d2      	uxtb	r2, r2
 8008830:	2a00      	cmp	r2, #0
 8008832:	d118      	bne.n	8008866 <socket+0x256>
 8008834:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008838:	2b00      	cmp	r3, #0
 800883a:	bf14      	ite	ne
 800883c:	2301      	movne	r3, #1
 800883e:	2300      	moveq	r3, #0
 8008840:	b2db      	uxtb	r3, r3
 8008842:	2b00      	cmp	r3, #0
 8008844:	d015      	beq.n	8008872 <socket+0x262>
      {
         case Sn_MR_MACRAW:
            if((flag & (SF_DHA_MANUAL | SF_FORCE_ARP)) != 0)
 8008846:	78fb      	ldrb	r3, [r7, #3]
 8008848:	f003 0303 	and.w	r3, r3, #3
 800884c:	2b00      	cmp	r3, #0
 800884e:	d012      	beq.n	8008876 <socket+0x266>
            	return SOCKERR_SOCKFLAG;
 8008850:	f06f 0305 	mvn.w	r3, #5
 8008854:	e0cc      	b.n	80089f0 <socket+0x3e0>
            break;
         case Sn_MR_TCP4:
         case Sn_MR_TCP6:
         case Sn_MR_TCPD:     
            if((flag & (SF_MULTI_ENABLE | SF_UNI_BLOCK)) !=0)
 8008856:	78fb      	ldrb	r3, [r7, #3]
 8008858:	f003 0390 	and.w	r3, r3, #144	; 0x90
 800885c:	2b00      	cmp	r3, #0
 800885e:	d00c      	beq.n	800887a <socket+0x26a>
            	return SOCKERR_SOCKFLAG;
 8008860:	f06f 0305 	mvn.w	r3, #5
 8008864:	e0c4      	b.n	80089f0 <socket+0x3e0>
            break;
         case Sn_MR_IPRAW4:
         case Sn_MR_IPRAW6:
            if(flag !=0)
 8008866:	78fb      	ldrb	r3, [r7, #3]
 8008868:	2b00      	cmp	r3, #0
 800886a:	d00d      	beq.n	8008888 <socket+0x278>
            	return SOCKERR_SOCKFLAG;
 800886c:	f06f 0305 	mvn.w	r3, #5
 8008870:	e0be      	b.n	80089f0 <socket+0x3e0>
            break;
         default:
            break;
 8008872:	bf00      	nop
 8008874:	e009      	b.n	800888a <socket+0x27a>
            break;
 8008876:	bf00      	nop
 8008878:	e007      	b.n	800888a <socket+0x27a>
            break;
 800887a:	bf00      	nop
 800887c:	e005      	b.n	800888a <socket+0x27a>
 800887e:	bf00      	nop
 8008880:	60413800 	.word	0x60413800
 8008884:	60414000 	.word	0x60414000
            break;
 8008888:	bf00      	nop
      }
   }
   close(sn);
 800888a:	79fb      	ldrb	r3, [r7, #7]
 800888c:	4618      	mov	r0, r3
 800888e:	f000 f8c7 	bl	8008a20 <close>
   setSn_MR(sn,(protocol | (flag & 0xF0)));
 8008892:	79fb      	ldrb	r3, [r7, #7]
 8008894:	009b      	lsls	r3, r3, #2
 8008896:	3301      	adds	r3, #1
 8008898:	00db      	lsls	r3, r3, #3
 800889a:	f103 43c0 	add.w	r3, r3, #1610612736	; 0x60000000
 800889e:	4618      	mov	r0, r3
 80088a0:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80088a4:	f023 030f 	bic.w	r3, r3, #15
 80088a8:	b25a      	sxtb	r2, r3
 80088aa:	f997 3006 	ldrsb.w	r3, [r7, #6]
 80088ae:	4313      	orrs	r3, r2
 80088b0:	b25b      	sxtb	r3, r3
 80088b2:	b2db      	uxtb	r3, r3
 80088b4:	4619      	mov	r1, r3
 80088b6:	f7ff fca1 	bl	80081fc <WIZCHIP_WRITE>
   setSn_MR2(sn, flag & 0x03);  
 80088ba:	79fb      	ldrb	r3, [r7, #7]
 80088bc:	009b      	lsls	r3, r3, #2
 80088be:	3301      	adds	r3, #1
 80088c0:	00da      	lsls	r2, r3, #3
 80088c2:	4b4d      	ldr	r3, [pc, #308]	; (80089f8 <socket+0x3e8>)
 80088c4:	4413      	add	r3, r2
 80088c6:	461a      	mov	r2, r3
 80088c8:	78fb      	ldrb	r3, [r7, #3]
 80088ca:	f003 0303 	and.w	r3, r3, #3
 80088ce:	b2db      	uxtb	r3, r3
 80088d0:	4619      	mov	r1, r3
 80088d2:	4610      	mov	r0, r2
 80088d4:	f7ff fc92 	bl	80081fc <WIZCHIP_WRITE>
   if(!port)
 80088d8:	88bb      	ldrh	r3, [r7, #4]
 80088da:	2b00      	cmp	r3, #0
 80088dc:	d110      	bne.n	8008900 <socket+0x2f0>
   {
      port = sock_any_port++;
 80088de:	4b47      	ldr	r3, [pc, #284]	; (80089fc <socket+0x3ec>)
 80088e0:	881b      	ldrh	r3, [r3, #0]
 80088e2:	1c5a      	adds	r2, r3, #1
 80088e4:	b291      	uxth	r1, r2
 80088e6:	4a45      	ldr	r2, [pc, #276]	; (80089fc <socket+0x3ec>)
 80088e8:	8011      	strh	r1, [r2, #0]
 80088ea:	80bb      	strh	r3, [r7, #4]
      if(sock_any_port == 0xFFF0) sock_any_port = SOCK_ANY_PORT_NUM;
 80088ec:	4b43      	ldr	r3, [pc, #268]	; (80089fc <socket+0x3ec>)
 80088ee:	881b      	ldrh	r3, [r3, #0]
 80088f0:	f64f 72f0 	movw	r2, #65520	; 0xfff0
 80088f4:	4293      	cmp	r3, r2
 80088f6:	d103      	bne.n	8008900 <socket+0x2f0>
 80088f8:	4b40      	ldr	r3, [pc, #256]	; (80089fc <socket+0x3ec>)
 80088fa:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80088fe:	801a      	strh	r2, [r3, #0]
   }
   setSn_PORTR(sn,port);
 8008900:	79fb      	ldrb	r3, [r7, #7]
 8008902:	009b      	lsls	r3, r3, #2
 8008904:	3301      	adds	r3, #1
 8008906:	00da      	lsls	r2, r3, #3
 8008908:	4b3d      	ldr	r3, [pc, #244]	; (8008a00 <socket+0x3f0>)
 800890a:	4413      	add	r3, r2
 800890c:	461a      	mov	r2, r3
 800890e:	88bb      	ldrh	r3, [r7, #4]
 8008910:	0a1b      	lsrs	r3, r3, #8
 8008912:	b29b      	uxth	r3, r3
 8008914:	b2db      	uxtb	r3, r3
 8008916:	4619      	mov	r1, r3
 8008918:	4610      	mov	r0, r2
 800891a:	f7ff fc6f 	bl	80081fc <WIZCHIP_WRITE>
 800891e:	79fb      	ldrb	r3, [r7, #7]
 8008920:	009b      	lsls	r3, r3, #2
 8008922:	3301      	adds	r3, #1
 8008924:	00da      	lsls	r2, r3, #3
 8008926:	4b37      	ldr	r3, [pc, #220]	; (8008a04 <socket+0x3f4>)
 8008928:	4413      	add	r3, r2
 800892a:	461a      	mov	r2, r3
 800892c:	88bb      	ldrh	r3, [r7, #4]
 800892e:	b2db      	uxtb	r3, r3
 8008930:	4619      	mov	r1, r3
 8008932:	4610      	mov	r0, r2
 8008934:	f7ff fc62 	bl	80081fc <WIZCHIP_WRITE>
   setSn_CR(sn,Sn_CR_OPEN);
 8008938:	79fb      	ldrb	r3, [r7, #7]
 800893a:	009b      	lsls	r3, r3, #2
 800893c:	3301      	adds	r3, #1
 800893e:	00da      	lsls	r2, r3, #3
 8008940:	4b31      	ldr	r3, [pc, #196]	; (8008a08 <socket+0x3f8>)
 8008942:	4413      	add	r3, r2
 8008944:	2101      	movs	r1, #1
 8008946:	4618      	mov	r0, r3
 8008948:	f7ff fc58 	bl	80081fc <WIZCHIP_WRITE>

   while(getSn_CR(sn));
 800894c:	bf00      	nop
 800894e:	79fb      	ldrb	r3, [r7, #7]
 8008950:	009b      	lsls	r3, r3, #2
 8008952:	3301      	adds	r3, #1
 8008954:	00da      	lsls	r2, r3, #3
 8008956:	4b2c      	ldr	r3, [pc, #176]	; (8008a08 <socket+0x3f8>)
 8008958:	4413      	add	r3, r2
 800895a:	4618      	mov	r0, r3
 800895c:	f7ff fc7c 	bl	8008258 <WIZCHIP_READ>
 8008960:	4603      	mov	r3, r0
 8008962:	2b00      	cmp	r3, #0
 8008964:	d1f3      	bne.n	800894e <socket+0x33e>

   sock_io_mode &= ~(1 <<sn);
 8008966:	79fb      	ldrb	r3, [r7, #7]
 8008968:	2201      	movs	r2, #1
 800896a:	fa02 f303 	lsl.w	r3, r2, r3
 800896e:	b21b      	sxth	r3, r3
 8008970:	43db      	mvns	r3, r3
 8008972:	b21a      	sxth	r2, r3
 8008974:	4b25      	ldr	r3, [pc, #148]	; (8008a0c <socket+0x3fc>)
 8008976:	881b      	ldrh	r3, [r3, #0]
 8008978:	b21b      	sxth	r3, r3
 800897a:	4013      	ands	r3, r2
 800897c:	b21b      	sxth	r3, r3
 800897e:	b29a      	uxth	r2, r3
 8008980:	4b22      	ldr	r3, [pc, #136]	; (8008a0c <socket+0x3fc>)
 8008982:	801a      	strh	r2, [r3, #0]
   sock_io_mode |= ((flag & (SF_IO_NONBLOCK>>3)) << sn);
 8008984:	78fb      	ldrb	r3, [r7, #3]
 8008986:	f003 0201 	and.w	r2, r3, #1
 800898a:	79fb      	ldrb	r3, [r7, #7]
 800898c:	fa02 f303 	lsl.w	r3, r2, r3
 8008990:	b21a      	sxth	r2, r3
 8008992:	4b1e      	ldr	r3, [pc, #120]	; (8008a0c <socket+0x3fc>)
 8008994:	881b      	ldrh	r3, [r3, #0]
 8008996:	b21b      	sxth	r3, r3
 8008998:	4313      	orrs	r3, r2
 800899a:	b21b      	sxth	r3, r3
 800899c:	b29a      	uxth	r2, r3
 800899e:	4b1b      	ldr	r3, [pc, #108]	; (8008a0c <socket+0x3fc>)
 80089a0:	801a      	strh	r2, [r3, #0]
   sock_is_sending &= ~(1<<sn);
 80089a2:	79fb      	ldrb	r3, [r7, #7]
 80089a4:	2201      	movs	r2, #1
 80089a6:	fa02 f303 	lsl.w	r3, r2, r3
 80089aa:	b21b      	sxth	r3, r3
 80089ac:	43db      	mvns	r3, r3
 80089ae:	b21a      	sxth	r2, r3
 80089b0:	4b17      	ldr	r3, [pc, #92]	; (8008a10 <socket+0x400>)
 80089b2:	881b      	ldrh	r3, [r3, #0]
 80089b4:	b21b      	sxth	r3, r3
 80089b6:	4013      	ands	r3, r2
 80089b8:	b21b      	sxth	r3, r3
 80089ba:	b29a      	uxth	r2, r3
 80089bc:	4b14      	ldr	r3, [pc, #80]	; (8008a10 <socket+0x400>)
 80089be:	801a      	strh	r2, [r3, #0]
   sock_remained_size[sn] = 0;
 80089c0:	79fb      	ldrb	r3, [r7, #7]
 80089c2:	4a14      	ldr	r2, [pc, #80]	; (8008a14 <socket+0x404>)
 80089c4:	2100      	movs	r1, #0
 80089c6:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
   sock_pack_info[sn] = PACK_NONE;
 80089ca:	79fb      	ldrb	r3, [r7, #7]
 80089cc:	4a12      	ldr	r2, [pc, #72]	; (8008a18 <socket+0x408>)
 80089ce:	2100      	movs	r1, #0
 80089d0:	54d1      	strb	r1, [r2, r3]

   while(getSn_SR(sn) == SOCK_CLOSED) ;
 80089d2:	bf00      	nop
 80089d4:	79fb      	ldrb	r3, [r7, #7]
 80089d6:	009b      	lsls	r3, r3, #2
 80089d8:	3301      	adds	r3, #1
 80089da:	00da      	lsls	r2, r3, #3
 80089dc:	4b0f      	ldr	r3, [pc, #60]	; (8008a1c <socket+0x40c>)
 80089de:	4413      	add	r3, r2
 80089e0:	4618      	mov	r0, r3
 80089e2:	f7ff fc39 	bl	8008258 <WIZCHIP_READ>
 80089e6:	4603      	mov	r3, r0
 80089e8:	2b00      	cmp	r3, #0
 80089ea:	d0f3      	beq.n	80089d4 <socket+0x3c4>
//   printf("[%d]%d\r\n", sn, getSn_PORTR(sn));
   return sn;
 80089ec:	f997 3007 	ldrsb.w	r3, [r7, #7]
}  
 80089f0:	4618      	mov	r0, r3
 80089f2:	3734      	adds	r7, #52	; 0x34
 80089f4:	46bd      	mov	sp, r7
 80089f6:	bd90      	pop	{r4, r7, pc}
 80089f8:	60014400 	.word	0x60014400
 80089fc:	20000084 	.word	0x20000084
 8008a00:	60011400 	.word	0x60011400
 8008a04:	60011500 	.word	0x60011500
 8008a08:	60001000 	.word	0x60001000
 8008a0c:	20000690 	.word	0x20000690
 8008a10:	20000692 	.word	0x20000692
 8008a14:	20000694 	.word	0x20000694
 8008a18:	200006a4 	.word	0x200006a4
 8008a1c:	60003000 	.word	0x60003000

08008a20 <close>:


int8_t close(uint8_t sn)
{
 8008a20:	b580      	push	{r7, lr}
 8008a22:	b082      	sub	sp, #8
 8008a24:	af00      	add	r7, sp, #0
 8008a26:	4603      	mov	r3, r0
 8008a28:	71fb      	strb	r3, [r7, #7]
   CHECK_SOCKNUM();
 8008a2a:	79fb      	ldrb	r3, [r7, #7]
 8008a2c:	2b07      	cmp	r3, #7
 8008a2e:	d902      	bls.n	8008a36 <close+0x16>
 8008a30:	f04f 33ff 	mov.w	r3, #4294967295
 8008a34:	e055      	b.n	8008ae2 <close+0xc2>
   setSn_CR(sn,Sn_CR_CLOSE);
 8008a36:	79fb      	ldrb	r3, [r7, #7]
 8008a38:	009b      	lsls	r3, r3, #2
 8008a3a:	3301      	adds	r3, #1
 8008a3c:	00da      	lsls	r2, r3, #3
 8008a3e:	4b2b      	ldr	r3, [pc, #172]	; (8008aec <close+0xcc>)
 8008a40:	4413      	add	r3, r2
 8008a42:	2110      	movs	r1, #16
 8008a44:	4618      	mov	r0, r3
 8008a46:	f7ff fbd9 	bl	80081fc <WIZCHIP_WRITE>
   /* wait to process the command... */
   while( getSn_CR(sn) );
 8008a4a:	bf00      	nop
 8008a4c:	79fb      	ldrb	r3, [r7, #7]
 8008a4e:	009b      	lsls	r3, r3, #2
 8008a50:	3301      	adds	r3, #1
 8008a52:	00da      	lsls	r2, r3, #3
 8008a54:	4b25      	ldr	r3, [pc, #148]	; (8008aec <close+0xcc>)
 8008a56:	4413      	add	r3, r2
 8008a58:	4618      	mov	r0, r3
 8008a5a:	f7ff fbfd 	bl	8008258 <WIZCHIP_READ>
 8008a5e:	4603      	mov	r3, r0
 8008a60:	2b00      	cmp	r3, #0
 8008a62:	d1f3      	bne.n	8008a4c <close+0x2c>
   /* clear all interrupt of SOCKETn. */
   setSn_IRCLR(sn, 0xFF);
 8008a64:	79fb      	ldrb	r3, [r7, #7]
 8008a66:	009b      	lsls	r3, r3, #2
 8008a68:	3301      	adds	r3, #1
 8008a6a:	00da      	lsls	r2, r3, #3
 8008a6c:	4b20      	ldr	r3, [pc, #128]	; (8008af0 <close+0xd0>)
 8008a6e:	4413      	add	r3, r2
 8008a70:	21ff      	movs	r1, #255	; 0xff
 8008a72:	4618      	mov	r0, r3
 8008a74:	f7ff fbc2 	bl	80081fc <WIZCHIP_WRITE>
   /* Release the sock_io_mode of SOCKETn. */
   sock_io_mode &= ~(1<<sn); 
 8008a78:	79fb      	ldrb	r3, [r7, #7]
 8008a7a:	2201      	movs	r2, #1
 8008a7c:	fa02 f303 	lsl.w	r3, r2, r3
 8008a80:	b21b      	sxth	r3, r3
 8008a82:	43db      	mvns	r3, r3
 8008a84:	b21a      	sxth	r2, r3
 8008a86:	4b1b      	ldr	r3, [pc, #108]	; (8008af4 <close+0xd4>)
 8008a88:	881b      	ldrh	r3, [r3, #0]
 8008a8a:	b21b      	sxth	r3, r3
 8008a8c:	4013      	ands	r3, r2
 8008a8e:	b21b      	sxth	r3, r3
 8008a90:	b29a      	uxth	r2, r3
 8008a92:	4b18      	ldr	r3, [pc, #96]	; (8008af4 <close+0xd4>)
 8008a94:	801a      	strh	r2, [r3, #0]
   sock_remained_size[sn] = 0;
 8008a96:	79fb      	ldrb	r3, [r7, #7]
 8008a98:	4a17      	ldr	r2, [pc, #92]	; (8008af8 <close+0xd8>)
 8008a9a:	2100      	movs	r1, #0
 8008a9c:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
   sock_is_sending &= ~(1<<sn);
 8008aa0:	79fb      	ldrb	r3, [r7, #7]
 8008aa2:	2201      	movs	r2, #1
 8008aa4:	fa02 f303 	lsl.w	r3, r2, r3
 8008aa8:	b21b      	sxth	r3, r3
 8008aaa:	43db      	mvns	r3, r3
 8008aac:	b21a      	sxth	r2, r3
 8008aae:	4b13      	ldr	r3, [pc, #76]	; (8008afc <close+0xdc>)
 8008ab0:	881b      	ldrh	r3, [r3, #0]
 8008ab2:	b21b      	sxth	r3, r3
 8008ab4:	4013      	ands	r3, r2
 8008ab6:	b21b      	sxth	r3, r3
 8008ab8:	b29a      	uxth	r2, r3
 8008aba:	4b10      	ldr	r3, [pc, #64]	; (8008afc <close+0xdc>)
 8008abc:	801a      	strh	r2, [r3, #0]
   sock_pack_info[sn] = PACK_NONE;
 8008abe:	79fb      	ldrb	r3, [r7, #7]
 8008ac0:	4a0f      	ldr	r2, [pc, #60]	; (8008b00 <close+0xe0>)
 8008ac2:	2100      	movs	r1, #0
 8008ac4:	54d1      	strb	r1, [r2, r3]
   while(getSn_SR(sn) != SOCK_CLOSED);
 8008ac6:	bf00      	nop
 8008ac8:	79fb      	ldrb	r3, [r7, #7]
 8008aca:	009b      	lsls	r3, r3, #2
 8008acc:	3301      	adds	r3, #1
 8008ace:	00da      	lsls	r2, r3, #3
 8008ad0:	4b0c      	ldr	r3, [pc, #48]	; (8008b04 <close+0xe4>)
 8008ad2:	4413      	add	r3, r2
 8008ad4:	4618      	mov	r0, r3
 8008ad6:	f7ff fbbf 	bl	8008258 <WIZCHIP_READ>
 8008ada:	4603      	mov	r3, r0
 8008adc:	2b00      	cmp	r3, #0
 8008ade:	d1f3      	bne.n	8008ac8 <close+0xa8>
   return SOCK_OK;
 8008ae0:	2301      	movs	r3, #1
}
 8008ae2:	4618      	mov	r0, r3
 8008ae4:	3708      	adds	r7, #8
 8008ae6:	46bd      	mov	sp, r7
 8008ae8:	bd80      	pop	{r7, pc}
 8008aea:	bf00      	nop
 8008aec:	60001000 	.word	0x60001000
 8008af0:	60002800 	.word	0x60002800
 8008af4:	20000690 	.word	0x20000690
 8008af8:	20000694 	.word	0x20000694
 8008afc:	20000692 	.word	0x20000692
 8008b00:	200006a4 	.word	0x200006a4
 8008b04:	60003000 	.word	0x60003000

08008b08 <listen>:


int8_t listen(uint8_t sn)
{
 8008b08:	b580      	push	{r7, lr}
 8008b0a:	b082      	sub	sp, #8
 8008b0c:	af00      	add	r7, sp, #0
 8008b0e:	4603      	mov	r3, r0
 8008b10:	71fb      	strb	r3, [r7, #7]
   CHECK_SOCKNUM();
 8008b12:	79fb      	ldrb	r3, [r7, #7]
 8008b14:	2b07      	cmp	r3, #7
 8008b16:	d902      	bls.n	8008b1e <listen+0x16>
 8008b18:	f04f 33ff 	mov.w	r3, #4294967295
 8008b1c:	e03a      	b.n	8008b94 <listen+0x8c>
   CHECK_SOCKINIT();
 8008b1e:	79fb      	ldrb	r3, [r7, #7]
 8008b20:	009b      	lsls	r3, r3, #2
 8008b22:	3301      	adds	r3, #1
 8008b24:	00da      	lsls	r2, r3, #3
 8008b26:	4b1d      	ldr	r3, [pc, #116]	; (8008b9c <listen+0x94>)
 8008b28:	4413      	add	r3, r2
 8008b2a:	4618      	mov	r0, r3
 8008b2c:	f7ff fb94 	bl	8008258 <WIZCHIP_READ>
 8008b30:	4603      	mov	r3, r0
 8008b32:	2b13      	cmp	r3, #19
 8008b34:	d002      	beq.n	8008b3c <listen+0x34>
 8008b36:	f06f 0302 	mvn.w	r3, #2
 8008b3a:	e02b      	b.n	8008b94 <listen+0x8c>
   setSn_CR(sn,Sn_CR_LISTEN);
 8008b3c:	79fb      	ldrb	r3, [r7, #7]
 8008b3e:	009b      	lsls	r3, r3, #2
 8008b40:	3301      	adds	r3, #1
 8008b42:	00da      	lsls	r2, r3, #3
 8008b44:	4b16      	ldr	r3, [pc, #88]	; (8008ba0 <listen+0x98>)
 8008b46:	4413      	add	r3, r2
 8008b48:	2102      	movs	r1, #2
 8008b4a:	4618      	mov	r0, r3
 8008b4c:	f7ff fb56 	bl	80081fc <WIZCHIP_WRITE>
   while(getSn_CR(sn));
 8008b50:	bf00      	nop
 8008b52:	79fb      	ldrb	r3, [r7, #7]
 8008b54:	009b      	lsls	r3, r3, #2
 8008b56:	3301      	adds	r3, #1
 8008b58:	00da      	lsls	r2, r3, #3
 8008b5a:	4b11      	ldr	r3, [pc, #68]	; (8008ba0 <listen+0x98>)
 8008b5c:	4413      	add	r3, r2
 8008b5e:	4618      	mov	r0, r3
 8008b60:	f7ff fb7a 	bl	8008258 <WIZCHIP_READ>
 8008b64:	4603      	mov	r3, r0
 8008b66:	2b00      	cmp	r3, #0
 8008b68:	d1f3      	bne.n	8008b52 <listen+0x4a>
   while(getSn_SR(sn) != SOCK_LISTEN)
 8008b6a:	e006      	b.n	8008b7a <listen+0x72>
   {
      close(sn);
 8008b6c:	79fb      	ldrb	r3, [r7, #7]
 8008b6e:	4618      	mov	r0, r3
 8008b70:	f7ff ff56 	bl	8008a20 <close>
      return SOCKERR_SOCKCLOSED;
 8008b74:	f06f 0303 	mvn.w	r3, #3
 8008b78:	e00c      	b.n	8008b94 <listen+0x8c>
   while(getSn_SR(sn) != SOCK_LISTEN)
 8008b7a:	79fb      	ldrb	r3, [r7, #7]
 8008b7c:	009b      	lsls	r3, r3, #2
 8008b7e:	3301      	adds	r3, #1
 8008b80:	00da      	lsls	r2, r3, #3
 8008b82:	4b06      	ldr	r3, [pc, #24]	; (8008b9c <listen+0x94>)
 8008b84:	4413      	add	r3, r2
 8008b86:	4618      	mov	r0, r3
 8008b88:	f7ff fb66 	bl	8008258 <WIZCHIP_READ>
 8008b8c:	4603      	mov	r3, r0
 8008b8e:	2b14      	cmp	r3, #20
 8008b90:	d1ec      	bne.n	8008b6c <listen+0x64>
   }
   return SOCK_OK;
 8008b92:	2301      	movs	r3, #1
}
 8008b94:	4618      	mov	r0, r3
 8008b96:	3708      	adds	r7, #8
 8008b98:	46bd      	mov	sp, r7
 8008b9a:	bd80      	pop	{r7, pc}
 8008b9c:	60003000 	.word	0x60003000
 8008ba0:	60001000 	.word	0x60001000

08008ba4 <disconnect>:
   } 
   return SOCK_OK;
}

int8_t disconnect(uint8_t sn)
{
 8008ba4:	b580      	push	{r7, lr}
 8008ba6:	b082      	sub	sp, #8
 8008ba8:	af00      	add	r7, sp, #0
 8008baa:	4603      	mov	r3, r0
 8008bac:	71fb      	strb	r3, [r7, #7]
   CHECK_SOCKNUM();
 8008bae:	79fb      	ldrb	r3, [r7, #7]
 8008bb0:	2b07      	cmp	r3, #7
 8008bb2:	d902      	bls.n	8008bba <disconnect+0x16>
 8008bb4:	f04f 33ff 	mov.w	r3, #4294967295
 8008bb8:	e061      	b.n	8008c7e <disconnect+0xda>
   CHECK_TCPMODE();
 8008bba:	79fb      	ldrb	r3, [r7, #7]
 8008bbc:	009b      	lsls	r3, r3, #2
 8008bbe:	3301      	adds	r3, #1
 8008bc0:	00db      	lsls	r3, r3, #3
 8008bc2:	f103 43c0 	add.w	r3, r3, #1610612736	; 0x60000000
 8008bc6:	4618      	mov	r0, r3
 8008bc8:	f7ff fb46 	bl	8008258 <WIZCHIP_READ>
 8008bcc:	4603      	mov	r3, r0
 8008bce:	f003 0303 	and.w	r3, r3, #3
 8008bd2:	2b01      	cmp	r3, #1
 8008bd4:	d002      	beq.n	8008bdc <disconnect+0x38>
 8008bd6:	f06f 0304 	mvn.w	r3, #4
 8008bda:	e050      	b.n	8008c7e <disconnect+0xda>
   if(getSn_SR(sn) != SOCK_CLOSED)
 8008bdc:	79fb      	ldrb	r3, [r7, #7]
 8008bde:	009b      	lsls	r3, r3, #2
 8008be0:	3301      	adds	r3, #1
 8008be2:	00da      	lsls	r2, r3, #3
 8008be4:	4b28      	ldr	r3, [pc, #160]	; (8008c88 <disconnect+0xe4>)
 8008be6:	4413      	add	r3, r2
 8008be8:	4618      	mov	r0, r3
 8008bea:	f7ff fb35 	bl	8008258 <WIZCHIP_READ>
 8008bee:	4603      	mov	r3, r0
 8008bf0:	2b00      	cmp	r3, #0
 8008bf2:	d043      	beq.n	8008c7c <disconnect+0xd8>
   {
      setSn_CR(sn,Sn_CR_DISCON);
 8008bf4:	79fb      	ldrb	r3, [r7, #7]
 8008bf6:	009b      	lsls	r3, r3, #2
 8008bf8:	3301      	adds	r3, #1
 8008bfa:	00da      	lsls	r2, r3, #3
 8008bfc:	4b23      	ldr	r3, [pc, #140]	; (8008c8c <disconnect+0xe8>)
 8008bfe:	4413      	add	r3, r2
 8008c00:	2108      	movs	r1, #8
 8008c02:	4618      	mov	r0, r3
 8008c04:	f7ff fafa 	bl	80081fc <WIZCHIP_WRITE>
      /* wait to process the command... */
      while(getSn_CR(sn));
 8008c08:	bf00      	nop
 8008c0a:	79fb      	ldrb	r3, [r7, #7]
 8008c0c:	009b      	lsls	r3, r3, #2
 8008c0e:	3301      	adds	r3, #1
 8008c10:	00da      	lsls	r2, r3, #3
 8008c12:	4b1e      	ldr	r3, [pc, #120]	; (8008c8c <disconnect+0xe8>)
 8008c14:	4413      	add	r3, r2
 8008c16:	4618      	mov	r0, r3
 8008c18:	f7ff fb1e 	bl	8008258 <WIZCHIP_READ>
 8008c1c:	4603      	mov	r3, r0
 8008c1e:	2b00      	cmp	r3, #0
 8008c20:	d1f3      	bne.n	8008c0a <disconnect+0x66>
      if(sock_io_mode & (1<<sn)) return SOCK_BUSY;
 8008c22:	4b1b      	ldr	r3, [pc, #108]	; (8008c90 <disconnect+0xec>)
 8008c24:	881b      	ldrh	r3, [r3, #0]
 8008c26:	461a      	mov	r2, r3
 8008c28:	79fb      	ldrb	r3, [r7, #7]
 8008c2a:	fa42 f303 	asr.w	r3, r2, r3
 8008c2e:	f003 0301 	and.w	r3, r3, #1
 8008c32:	2b00      	cmp	r3, #0
 8008c34:	d016      	beq.n	8008c64 <disconnect+0xc0>
 8008c36:	2300      	movs	r3, #0
 8008c38:	e021      	b.n	8008c7e <disconnect+0xda>
      while(getSn_SR(sn) != SOCK_CLOSED)
      {
         if(getSn_IR(sn) & Sn_IR_TIMEOUT)
 8008c3a:	79fb      	ldrb	r3, [r7, #7]
 8008c3c:	009b      	lsls	r3, r3, #2
 8008c3e:	3301      	adds	r3, #1
 8008c40:	00da      	lsls	r2, r3, #3
 8008c42:	4b14      	ldr	r3, [pc, #80]	; (8008c94 <disconnect+0xf0>)
 8008c44:	4413      	add	r3, r2
 8008c46:	4618      	mov	r0, r3
 8008c48:	f7ff fb06 	bl	8008258 <WIZCHIP_READ>
 8008c4c:	4603      	mov	r3, r0
 8008c4e:	f003 0308 	and.w	r3, r3, #8
 8008c52:	2b00      	cmp	r3, #0
 8008c54:	d006      	beq.n	8008c64 <disconnect+0xc0>
         {
            close(sn);
 8008c56:	79fb      	ldrb	r3, [r7, #7]
 8008c58:	4618      	mov	r0, r3
 8008c5a:	f7ff fee1 	bl	8008a20 <close>
            return SOCKERR_TIMEOUT;
 8008c5e:	f06f 030c 	mvn.w	r3, #12
 8008c62:	e00c      	b.n	8008c7e <disconnect+0xda>
      while(getSn_SR(sn) != SOCK_CLOSED)
 8008c64:	79fb      	ldrb	r3, [r7, #7]
 8008c66:	009b      	lsls	r3, r3, #2
 8008c68:	3301      	adds	r3, #1
 8008c6a:	00da      	lsls	r2, r3, #3
 8008c6c:	4b06      	ldr	r3, [pc, #24]	; (8008c88 <disconnect+0xe4>)
 8008c6e:	4413      	add	r3, r2
 8008c70:	4618      	mov	r0, r3
 8008c72:	f7ff faf1 	bl	8008258 <WIZCHIP_READ>
 8008c76:	4603      	mov	r3, r0
 8008c78:	2b00      	cmp	r3, #0
 8008c7a:	d1de      	bne.n	8008c3a <disconnect+0x96>
         }
      }
   }
   return SOCK_OK;
 8008c7c:	2301      	movs	r3, #1
}
 8008c7e:	4618      	mov	r0, r3
 8008c80:	3708      	adds	r7, #8
 8008c82:	46bd      	mov	sp, r7
 8008c84:	bd80      	pop	{r7, pc}
 8008c86:	bf00      	nop
 8008c88:	60003000 	.word	0x60003000
 8008c8c:	60001000 	.word	0x60001000
 8008c90:	20000690 	.word	0x20000690
 8008c94:	60002000 	.word	0x60002000

08008c98 <send>:


datasize_t send(uint8_t sn, uint8_t * buf, datasize_t len)
{
 8008c98:	b580      	push	{r7, lr}
 8008c9a:	b084      	sub	sp, #16
 8008c9c:	af00      	add	r7, sp, #0
 8008c9e:	4603      	mov	r3, r0
 8008ca0:	6039      	str	r1, [r7, #0]
 8008ca2:	71fb      	strb	r3, [r7, #7]
 8008ca4:	4613      	mov	r3, r2
 8008ca6:	80bb      	strh	r3, [r7, #4]
   uint8_t tmp=0;
 8008ca8:	2300      	movs	r3, #0
 8008caa:	73fb      	strb	r3, [r7, #15]
   datasize_t freesize=0;
 8008cac:	2300      	movs	r3, #0
 8008cae:	81bb      	strh	r3, [r7, #12]
    */
   //CHECK_SOCKNUM();
   //CHECK_TCPMODE(Sn_MR_TCP4);
   /************/

   freesize = getSn_TxMAX(sn);
 8008cb0:	79fb      	ldrb	r3, [r7, #7]
 8008cb2:	009b      	lsls	r3, r3, #2
 8008cb4:	3301      	adds	r3, #1
 8008cb6:	00da      	lsls	r2, r3, #3
 8008cb8:	4b66      	ldr	r3, [pc, #408]	; (8008e54 <send+0x1bc>)
 8008cba:	4413      	add	r3, r2
 8008cbc:	4618      	mov	r0, r3
 8008cbe:	f7ff facb 	bl	8008258 <WIZCHIP_READ>
 8008cc2:	4603      	mov	r3, r0
 8008cc4:	029b      	lsls	r3, r3, #10
 8008cc6:	81bb      	strh	r3, [r7, #12]
   if (len > freesize) len = freesize; // check size not to exceed MAX size.
 8008cc8:	f9b7 2004 	ldrsh.w	r2, [r7, #4]
 8008ccc:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 8008cd0:	429a      	cmp	r2, r3
 8008cd2:	dd01      	ble.n	8008cd8 <send+0x40>
 8008cd4:	89bb      	ldrh	r3, [r7, #12]
 8008cd6:	80bb      	strh	r3, [r7, #4]
   while(1)
   {
      freesize = (datasize_t)getSn_TX_FSR(sn);
 8008cd8:	79fb      	ldrb	r3, [r7, #7]
 8008cda:	4618      	mov	r0, r3
 8008cdc:	f7ff fb60 	bl	80083a0 <getSn_TX_FSR>
 8008ce0:	4603      	mov	r3, r0
 8008ce2:	81bb      	strh	r3, [r7, #12]
      tmp = getSn_SR(sn);
 8008ce4:	79fb      	ldrb	r3, [r7, #7]
 8008ce6:	009b      	lsls	r3, r3, #2
 8008ce8:	3301      	adds	r3, #1
 8008cea:	00da      	lsls	r2, r3, #3
 8008cec:	4b5a      	ldr	r3, [pc, #360]	; (8008e58 <send+0x1c0>)
 8008cee:	4413      	add	r3, r2
 8008cf0:	4618      	mov	r0, r3
 8008cf2:	f7ff fab1 	bl	8008258 <WIZCHIP_READ>
 8008cf6:	4603      	mov	r3, r0
 8008cf8:	73fb      	strb	r3, [r7, #15]
      if ((tmp != SOCK_ESTABLISHED) && (tmp != SOCK_CLOSE_WAIT))
 8008cfa:	7bfb      	ldrb	r3, [r7, #15]
 8008cfc:	2b17      	cmp	r3, #23
 8008cfe:	d00c      	beq.n	8008d1a <send+0x82>
 8008d00:	7bfb      	ldrb	r3, [r7, #15]
 8008d02:	2b1c      	cmp	r3, #28
 8008d04:	d009      	beq.n	8008d1a <send+0x82>
      {
         if(tmp == SOCK_CLOSED) close(sn);
 8008d06:	7bfb      	ldrb	r3, [r7, #15]
 8008d08:	2b00      	cmp	r3, #0
 8008d0a:	d103      	bne.n	8008d14 <send+0x7c>
 8008d0c:	79fb      	ldrb	r3, [r7, #7]
 8008d0e:	4618      	mov	r0, r3
 8008d10:	f7ff fe86 	bl	8008a20 <close>
         return SOCKERR_SOCKSTATUS;
 8008d14:	f06f 0306 	mvn.w	r3, #6
 8008d18:	e097      	b.n	8008e4a <send+0x1b2>
      }
      if(len <= freesize) break;
 8008d1a:	f9b7 2004 	ldrsh.w	r2, [r7, #4]
 8008d1e:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 8008d22:	429a      	cmp	r2, r3
 8008d24:	dd0b      	ble.n	8008d3e <send+0xa6>
      if( sock_io_mode & (1<<sn) ) return SOCK_BUSY;  
 8008d26:	4b4d      	ldr	r3, [pc, #308]	; (8008e5c <send+0x1c4>)
 8008d28:	881b      	ldrh	r3, [r3, #0]
 8008d2a:	461a      	mov	r2, r3
 8008d2c:	79fb      	ldrb	r3, [r7, #7]
 8008d2e:	fa42 f303 	asr.w	r3, r2, r3
 8008d32:	f003 0301 	and.w	r3, r3, #1
 8008d36:	2b00      	cmp	r3, #0
 8008d38:	d0ce      	beq.n	8008cd8 <send+0x40>
 8008d3a:	2300      	movs	r3, #0
 8008d3c:	e085      	b.n	8008e4a <send+0x1b2>
      if(len <= freesize) break;
 8008d3e:	bf00      	nop
   }
   wiz_send_data(sn, buf, len);
 8008d40:	f9b7 2004 	ldrsh.w	r2, [r7, #4]
 8008d44:	79fb      	ldrb	r3, [r7, #7]
 8008d46:	6839      	ldr	r1, [r7, #0]
 8008d48:	4618      	mov	r0, r3
 8008d4a:	f7ff fb99 	bl	8008480 <wiz_send_data>
   if(sock_is_sending & (1<<sn))
 8008d4e:	4b44      	ldr	r3, [pc, #272]	; (8008e60 <send+0x1c8>)
 8008d50:	881b      	ldrh	r3, [r3, #0]
 8008d52:	461a      	mov	r2, r3
 8008d54:	79fb      	ldrb	r3, [r7, #7]
 8008d56:	fa42 f303 	asr.w	r3, r2, r3
 8008d5a:	f003 0301 	and.w	r3, r3, #1
 8008d5e:	2b00      	cmp	r3, #0
 8008d60:	d04d      	beq.n	8008dfe <send+0x166>
   {
      while ( !(getSn_IR(sn) & Sn_IR_SENDOK) )
 8008d62:	e034      	b.n	8008dce <send+0x136>
      {    
         tmp = getSn_SR(sn);
 8008d64:	79fb      	ldrb	r3, [r7, #7]
 8008d66:	009b      	lsls	r3, r3, #2
 8008d68:	3301      	adds	r3, #1
 8008d6a:	00da      	lsls	r2, r3, #3
 8008d6c:	4b3a      	ldr	r3, [pc, #232]	; (8008e58 <send+0x1c0>)
 8008d6e:	4413      	add	r3, r2
 8008d70:	4618      	mov	r0, r3
 8008d72:	f7ff fa71 	bl	8008258 <WIZCHIP_READ>
 8008d76:	4603      	mov	r3, r0
 8008d78:	73fb      	strb	r3, [r7, #15]
         if ((tmp != SOCK_ESTABLISHED) && (tmp != SOCK_CLOSE_WAIT) )
 8008d7a:	7bfb      	ldrb	r3, [r7, #15]
 8008d7c:	2b17      	cmp	r3, #23
 8008d7e:	d01a      	beq.n	8008db6 <send+0x11e>
 8008d80:	7bfb      	ldrb	r3, [r7, #15]
 8008d82:	2b1c      	cmp	r3, #28
 8008d84:	d017      	beq.n	8008db6 <send+0x11e>
         {
            if( (tmp == SOCK_CLOSED) || (getSn_IR(sn) & Sn_IR_TIMEOUT) ) close(sn);
 8008d86:	7bfb      	ldrb	r3, [r7, #15]
 8008d88:	2b00      	cmp	r3, #0
 8008d8a:	d00d      	beq.n	8008da8 <send+0x110>
 8008d8c:	79fb      	ldrb	r3, [r7, #7]
 8008d8e:	009b      	lsls	r3, r3, #2
 8008d90:	3301      	adds	r3, #1
 8008d92:	00da      	lsls	r2, r3, #3
 8008d94:	4b33      	ldr	r3, [pc, #204]	; (8008e64 <send+0x1cc>)
 8008d96:	4413      	add	r3, r2
 8008d98:	4618      	mov	r0, r3
 8008d9a:	f7ff fa5d 	bl	8008258 <WIZCHIP_READ>
 8008d9e:	4603      	mov	r3, r0
 8008da0:	f003 0308 	and.w	r3, r3, #8
 8008da4:	2b00      	cmp	r3, #0
 8008da6:	d003      	beq.n	8008db0 <send+0x118>
 8008da8:	79fb      	ldrb	r3, [r7, #7]
 8008daa:	4618      	mov	r0, r3
 8008dac:	f7ff fe38 	bl	8008a20 <close>
            return SOCKERR_SOCKSTATUS;
 8008db0:	f06f 0306 	mvn.w	r3, #6
 8008db4:	e049      	b.n	8008e4a <send+0x1b2>
         }
         if(sock_io_mode & (1<<sn)) return SOCK_BUSY;
 8008db6:	4b29      	ldr	r3, [pc, #164]	; (8008e5c <send+0x1c4>)
 8008db8:	881b      	ldrh	r3, [r3, #0]
 8008dba:	461a      	mov	r2, r3
 8008dbc:	79fb      	ldrb	r3, [r7, #7]
 8008dbe:	fa42 f303 	asr.w	r3, r2, r3
 8008dc2:	f003 0301 	and.w	r3, r3, #1
 8008dc6:	2b00      	cmp	r3, #0
 8008dc8:	d001      	beq.n	8008dce <send+0x136>
 8008dca:	2300      	movs	r3, #0
 8008dcc:	e03d      	b.n	8008e4a <send+0x1b2>
      while ( !(getSn_IR(sn) & Sn_IR_SENDOK) )
 8008dce:	79fb      	ldrb	r3, [r7, #7]
 8008dd0:	009b      	lsls	r3, r3, #2
 8008dd2:	3301      	adds	r3, #1
 8008dd4:	00da      	lsls	r2, r3, #3
 8008dd6:	4b23      	ldr	r3, [pc, #140]	; (8008e64 <send+0x1cc>)
 8008dd8:	4413      	add	r3, r2
 8008dda:	4618      	mov	r0, r3
 8008ddc:	f7ff fa3c 	bl	8008258 <WIZCHIP_READ>
 8008de0:	4603      	mov	r3, r0
 8008de2:	f003 0310 	and.w	r3, r3, #16
 8008de6:	2b00      	cmp	r3, #0
 8008de8:	d0bc      	beq.n	8008d64 <send+0xcc>
      } 
      setSn_IRCLR(sn, Sn_IR_SENDOK);
 8008dea:	79fb      	ldrb	r3, [r7, #7]
 8008dec:	009b      	lsls	r3, r3, #2
 8008dee:	3301      	adds	r3, #1
 8008df0:	00da      	lsls	r2, r3, #3
 8008df2:	4b1d      	ldr	r3, [pc, #116]	; (8008e68 <send+0x1d0>)
 8008df4:	4413      	add	r3, r2
 8008df6:	2110      	movs	r1, #16
 8008df8:	4618      	mov	r0, r3
 8008dfa:	f7ff f9ff 	bl	80081fc <WIZCHIP_WRITE>
   }
   setSn_CR(sn,Sn_CR_SEND);
 8008dfe:	79fb      	ldrb	r3, [r7, #7]
 8008e00:	009b      	lsls	r3, r3, #2
 8008e02:	3301      	adds	r3, #1
 8008e04:	00da      	lsls	r2, r3, #3
 8008e06:	4b19      	ldr	r3, [pc, #100]	; (8008e6c <send+0x1d4>)
 8008e08:	4413      	add	r3, r2
 8008e0a:	2120      	movs	r1, #32
 8008e0c:	4618      	mov	r0, r3
 8008e0e:	f7ff f9f5 	bl	80081fc <WIZCHIP_WRITE>
 
   while(getSn_CR(sn));   // wait to process the command...
 8008e12:	bf00      	nop
 8008e14:	79fb      	ldrb	r3, [r7, #7]
 8008e16:	009b      	lsls	r3, r3, #2
 8008e18:	3301      	adds	r3, #1
 8008e1a:	00da      	lsls	r2, r3, #3
 8008e1c:	4b13      	ldr	r3, [pc, #76]	; (8008e6c <send+0x1d4>)
 8008e1e:	4413      	add	r3, r2
 8008e20:	4618      	mov	r0, r3
 8008e22:	f7ff fa19 	bl	8008258 <WIZCHIP_READ>
 8008e26:	4603      	mov	r3, r0
 8008e28:	2b00      	cmp	r3, #0
 8008e2a:	d1f3      	bne.n	8008e14 <send+0x17c>
   sock_is_sending |= (1<<sn);
 8008e2c:	79fb      	ldrb	r3, [r7, #7]
 8008e2e:	2201      	movs	r2, #1
 8008e30:	fa02 f303 	lsl.w	r3, r2, r3
 8008e34:	b21a      	sxth	r2, r3
 8008e36:	4b0a      	ldr	r3, [pc, #40]	; (8008e60 <send+0x1c8>)
 8008e38:	881b      	ldrh	r3, [r3, #0]
 8008e3a:	b21b      	sxth	r3, r3
 8008e3c:	4313      	orrs	r3, r2
 8008e3e:	b21b      	sxth	r3, r3
 8008e40:	b29a      	uxth	r2, r3
 8008e42:	4b07      	ldr	r3, [pc, #28]	; (8008e60 <send+0x1c8>)
 8008e44:	801a      	strh	r2, [r3, #0]
 
   return len;
 8008e46:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
}
 8008e4a:	4618      	mov	r0, r3
 8008e4c:	3710      	adds	r7, #16
 8008e4e:	46bd      	mov	sp, r7
 8008e50:	bd80      	pop	{r7, pc}
 8008e52:	bf00      	nop
 8008e54:	60020000 	.word	0x60020000
 8008e58:	60003000 	.word	0x60003000
 8008e5c:	20000690 	.word	0x20000690
 8008e60:	20000692 	.word	0x20000692
 8008e64:	60002000 	.word	0x60002000
 8008e68:	60002800 	.word	0x60002800
 8008e6c:	60001000 	.word	0x60001000

08008e70 <recv>:


datasize_t recv(uint8_t sn, uint8_t * buf, datasize_t len)
{
 8008e70:	b580      	push	{r7, lr}
 8008e72:	b084      	sub	sp, #16
 8008e74:	af00      	add	r7, sp, #0
 8008e76:	4603      	mov	r3, r0
 8008e78:	6039      	str	r1, [r7, #0]
 8008e7a:	71fb      	strb	r3, [r7, #7]
 8008e7c:	4613      	mov	r3, r2
 8008e7e:	80bb      	strh	r3, [r7, #4]
   uint8_t  tmp = 0;
 8008e80:	2300      	movs	r3, #0
 8008e82:	73fb      	strb	r3, [r7, #15]
   datasize_t recvsize = 0;
 8008e84:	2300      	movs	r3, #0
 8008e86:	81bb      	strh	r3, [r7, #12]
   //CHECK_SOCKNUM();
   //CHECK_TCPMODE();
   //CHECK_SOCKDATA();
   /************/
 
   recvsize = getSn_RxMAX(sn); 
 8008e88:	79fb      	ldrb	r3, [r7, #7]
 8008e8a:	009b      	lsls	r3, r3, #2
 8008e8c:	3301      	adds	r3, #1
 8008e8e:	00da      	lsls	r2, r3, #3
 8008e90:	4b36      	ldr	r3, [pc, #216]	; (8008f6c <recv+0xfc>)
 8008e92:	4413      	add	r3, r2
 8008e94:	4618      	mov	r0, r3
 8008e96:	f7ff f9df 	bl	8008258 <WIZCHIP_READ>
 8008e9a:	4603      	mov	r3, r0
 8008e9c:	029b      	lsls	r3, r3, #10
 8008e9e:	81bb      	strh	r3, [r7, #12]
   if(recvsize < len) len = recvsize;
 8008ea0:	f9b7 200c 	ldrsh.w	r2, [r7, #12]
 8008ea4:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 8008ea8:	429a      	cmp	r2, r3
 8008eaa:	da01      	bge.n	8008eb0 <recv+0x40>
 8008eac:	89bb      	ldrh	r3, [r7, #12]
 8008eae:	80bb      	strh	r3, [r7, #4]
   while(1)
   {
      recvsize = (datasize_t)getSn_RX_RSR(sn);
 8008eb0:	79fb      	ldrb	r3, [r7, #7]
 8008eb2:	4618      	mov	r0, r3
 8008eb4:	f7ff faac 	bl	8008410 <getSn_RX_RSR>
 8008eb8:	4603      	mov	r3, r0
 8008eba:	81bb      	strh	r3, [r7, #12]
      tmp = getSn_SR(sn);
 8008ebc:	79fb      	ldrb	r3, [r7, #7]
 8008ebe:	009b      	lsls	r3, r3, #2
 8008ec0:	3301      	adds	r3, #1
 8008ec2:	00da      	lsls	r2, r3, #3
 8008ec4:	4b2a      	ldr	r3, [pc, #168]	; (8008f70 <recv+0x100>)
 8008ec6:	4413      	add	r3, r2
 8008ec8:	4618      	mov	r0, r3
 8008eca:	f7ff f9c5 	bl	8008258 <WIZCHIP_READ>
 8008ece:	4603      	mov	r3, r0
 8008ed0:	73fb      	strb	r3, [r7, #15]
      if (tmp != SOCK_ESTABLISHED && tmp != SOCK_CLOSE_WAIT)
 8008ed2:	7bfb      	ldrb	r3, [r7, #15]
 8008ed4:	2b17      	cmp	r3, #23
 8008ed6:	d00c      	beq.n	8008ef2 <recv+0x82>
 8008ed8:	7bfb      	ldrb	r3, [r7, #15]
 8008eda:	2b1c      	cmp	r3, #28
 8008edc:	d009      	beq.n	8008ef2 <recv+0x82>
      {
         if(tmp == SOCK_CLOSED) close(sn);
 8008ede:	7bfb      	ldrb	r3, [r7, #15]
 8008ee0:	2b00      	cmp	r3, #0
 8008ee2:	d103      	bne.n	8008eec <recv+0x7c>
 8008ee4:	79fb      	ldrb	r3, [r7, #7]
 8008ee6:	4618      	mov	r0, r3
 8008ee8:	f7ff fd9a 	bl	8008a20 <close>
         return SOCKERR_SOCKSTATUS;
 8008eec:	f06f 0306 	mvn.w	r3, #6
 8008ef0:	e038      	b.n	8008f64 <recv+0xf4>
      }
      if(recvsize) break;
 8008ef2:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 8008ef6:	2b00      	cmp	r3, #0
 8008ef8:	d10b      	bne.n	8008f12 <recv+0xa2>
      if(sock_io_mode & (1<<sn)) return SOCK_BUSY;
 8008efa:	4b1e      	ldr	r3, [pc, #120]	; (8008f74 <recv+0x104>)
 8008efc:	881b      	ldrh	r3, [r3, #0]
 8008efe:	461a      	mov	r2, r3
 8008f00:	79fb      	ldrb	r3, [r7, #7]
 8008f02:	fa42 f303 	asr.w	r3, r2, r3
 8008f06:	f003 0301 	and.w	r3, r3, #1
 8008f0a:	2b00      	cmp	r3, #0
 8008f0c:	d0d0      	beq.n	8008eb0 <recv+0x40>
 8008f0e:	2300      	movs	r3, #0
 8008f10:	e028      	b.n	8008f64 <recv+0xf4>
      if(recvsize) break;
 8008f12:	bf00      	nop
   }
   if(recvsize < len) len = recvsize;
 8008f14:	f9b7 200c 	ldrsh.w	r2, [r7, #12]
 8008f18:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 8008f1c:	429a      	cmp	r2, r3
 8008f1e:	da01      	bge.n	8008f24 <recv+0xb4>
 8008f20:	89bb      	ldrh	r3, [r7, #12]
 8008f22:	80bb      	strh	r3, [r7, #4]
   wiz_recv_data(sn, buf, len); 
 8008f24:	f9b7 2004 	ldrsh.w	r2, [r7, #4]
 8008f28:	79fb      	ldrb	r3, [r7, #7]
 8008f2a:	6839      	ldr	r1, [r7, #0]
 8008f2c:	4618      	mov	r0, r3
 8008f2e:	f7ff fb09 	bl	8008544 <wiz_recv_data>
   setSn_CR(sn,Sn_CR_RECV); 
 8008f32:	79fb      	ldrb	r3, [r7, #7]
 8008f34:	009b      	lsls	r3, r3, #2
 8008f36:	3301      	adds	r3, #1
 8008f38:	00da      	lsls	r2, r3, #3
 8008f3a:	4b0f      	ldr	r3, [pc, #60]	; (8008f78 <recv+0x108>)
 8008f3c:	4413      	add	r3, r2
 8008f3e:	2140      	movs	r1, #64	; 0x40
 8008f40:	4618      	mov	r0, r3
 8008f42:	f7ff f95b 	bl	80081fc <WIZCHIP_WRITE>
   while(getSn_CR(sn));  
 8008f46:	bf00      	nop
 8008f48:	79fb      	ldrb	r3, [r7, #7]
 8008f4a:	009b      	lsls	r3, r3, #2
 8008f4c:	3301      	adds	r3, #1
 8008f4e:	00da      	lsls	r2, r3, #3
 8008f50:	4b09      	ldr	r3, [pc, #36]	; (8008f78 <recv+0x108>)
 8008f52:	4413      	add	r3, r2
 8008f54:	4618      	mov	r0, r3
 8008f56:	f7ff f97f 	bl	8008258 <WIZCHIP_READ>
 8008f5a:	4603      	mov	r3, r0
 8008f5c:	2b00      	cmp	r3, #0
 8008f5e:	d1f3      	bne.n	8008f48 <recv+0xd8>
   return len;
 8008f60:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
}
 8008f64:	4618      	mov	r0, r3
 8008f66:	3710      	adds	r7, #16
 8008f68:	46bd      	mov	sp, r7
 8008f6a:	bd80      	pop	{r7, pc}
 8008f6c:	60022000 	.word	0x60022000
 8008f70:	60003000 	.word	0x60003000
 8008f74:	20000690 	.word	0x20000690
 8008f78:	60001000 	.word	0x60001000

08008f7c <ctlsocket>:
 
   return pack_len;
}

int8_t ctlsocket(uint8_t sn, ctlsock_type cstype, void* arg)
{
 8008f7c:	b580      	push	{r7, lr}
 8008f7e:	b084      	sub	sp, #16
 8008f80:	af00      	add	r7, sp, #0
 8008f82:	4603      	mov	r3, r0
 8008f84:	603a      	str	r2, [r7, #0]
 8008f86:	71fb      	strb	r3, [r7, #7]
 8008f88:	460b      	mov	r3, r1
 8008f8a:	71bb      	strb	r3, [r7, #6]
   uint8_t tmp = 0;
 8008f8c:	2300      	movs	r3, #0
 8008f8e:	73fb      	strb	r3, [r7, #15]
   CHECK_SOCKNUM();
 8008f90:	79fb      	ldrb	r3, [r7, #7]
 8008f92:	2b07      	cmp	r3, #7
 8008f94:	d902      	bls.n	8008f9c <ctlsocket+0x20>
 8008f96:	f04f 33ff 	mov.w	r3, #4294967295
 8008f9a:	e0d8      	b.n	800914e <ctlsocket+0x1d2>
   tmp = *((uint8_t*)arg); 
 8008f9c:	683b      	ldr	r3, [r7, #0]
 8008f9e:	781b      	ldrb	r3, [r3, #0]
 8008fa0:	73fb      	strb	r3, [r7, #15]
   switch(cstype)
 8008fa2:	79bb      	ldrb	r3, [r7, #6]
 8008fa4:	2b09      	cmp	r3, #9
 8008fa6:	f200 80ce 	bhi.w	8009146 <ctlsocket+0x1ca>
 8008faa:	a201      	add	r2, pc, #4	; (adr r2, 8008fb0 <ctlsocket+0x34>)
 8008fac:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008fb0:	08008fd9 	.word	0x08008fd9
 8008fb4:	08009027 	.word	0x08009027
 8008fb8:	08009041 	.word	0x08009041
 8008fbc:	0800905f 	.word	0x0800905f
 8008fc0:	0800907d 	.word	0x0800907d
 8008fc4:	080090a3 	.word	0x080090a3
 8008fc8:	080090bf 	.word	0x080090bf
 8008fcc:	080090e5 	.word	0x080090e5
 8008fd0:	08009101 	.word	0x08009101
 8008fd4:	0800912b 	.word	0x0800912b
   {
      case CS_SET_IOMODE:
         if(tmp == SOCK_IO_NONBLOCK)  sock_io_mode |= (1<<sn);
 8008fd8:	7bfb      	ldrb	r3, [r7, #15]
 8008fda:	2b01      	cmp	r3, #1
 8008fdc:	d10d      	bne.n	8008ffa <ctlsocket+0x7e>
 8008fde:	79fb      	ldrb	r3, [r7, #7]
 8008fe0:	2201      	movs	r2, #1
 8008fe2:	fa02 f303 	lsl.w	r3, r2, r3
 8008fe6:	b21a      	sxth	r2, r3
 8008fe8:	4b5b      	ldr	r3, [pc, #364]	; (8009158 <ctlsocket+0x1dc>)
 8008fea:	881b      	ldrh	r3, [r3, #0]
 8008fec:	b21b      	sxth	r3, r3
 8008fee:	4313      	orrs	r3, r2
 8008ff0:	b21b      	sxth	r3, r3
 8008ff2:	b29a      	uxth	r2, r3
 8008ff4:	4b58      	ldr	r3, [pc, #352]	; (8009158 <ctlsocket+0x1dc>)
 8008ff6:	801a      	strh	r2, [r3, #0]
         else if(tmp == SOCK_IO_BLOCK) sock_io_mode &= ~(1<<sn);
         else return SOCKERR_ARG;
         break;
 8008ff8:	e0a8      	b.n	800914c <ctlsocket+0x1d0>
         else if(tmp == SOCK_IO_BLOCK) sock_io_mode &= ~(1<<sn);
 8008ffa:	7bfb      	ldrb	r3, [r7, #15]
 8008ffc:	2b00      	cmp	r3, #0
 8008ffe:	d10f      	bne.n	8009020 <ctlsocket+0xa4>
 8009000:	79fb      	ldrb	r3, [r7, #7]
 8009002:	2201      	movs	r2, #1
 8009004:	fa02 f303 	lsl.w	r3, r2, r3
 8009008:	b21b      	sxth	r3, r3
 800900a:	43db      	mvns	r3, r3
 800900c:	b21a      	sxth	r2, r3
 800900e:	4b52      	ldr	r3, [pc, #328]	; (8009158 <ctlsocket+0x1dc>)
 8009010:	881b      	ldrh	r3, [r3, #0]
 8009012:	b21b      	sxth	r3, r3
 8009014:	4013      	ands	r3, r2
 8009016:	b21b      	sxth	r3, r3
 8009018:	b29a      	uxth	r2, r3
 800901a:	4b4f      	ldr	r3, [pc, #316]	; (8009158 <ctlsocket+0x1dc>)
 800901c:	801a      	strh	r2, [r3, #0]
         break;
 800901e:	e095      	b.n	800914c <ctlsocket+0x1d0>
         else return SOCKERR_ARG;
 8009020:	f06f 0309 	mvn.w	r3, #9
 8009024:	e093      	b.n	800914e <ctlsocket+0x1d2>
      case CS_GET_IOMODE: 
         *((uint8_t*)arg) = (uint8_t)((sock_io_mode >> sn) & 0x0001);
 8009026:	4b4c      	ldr	r3, [pc, #304]	; (8009158 <ctlsocket+0x1dc>)
 8009028:	881b      	ldrh	r3, [r3, #0]
 800902a:	461a      	mov	r2, r3
 800902c:	79fb      	ldrb	r3, [r7, #7]
 800902e:	fa42 f303 	asr.w	r3, r2, r3
 8009032:	b2db      	uxtb	r3, r3
 8009034:	f003 0301 	and.w	r3, r3, #1
 8009038:	b2da      	uxtb	r2, r3
 800903a:	683b      	ldr	r3, [r7, #0]
 800903c:	701a      	strb	r2, [r3, #0]
         break;
 800903e:	e085      	b.n	800914c <ctlsocket+0x1d0>
      case CS_GET_MAXTXBUF:
         *((datasize_t*)arg) = getSn_TxMAX(sn);
 8009040:	79fb      	ldrb	r3, [r7, #7]
 8009042:	009b      	lsls	r3, r3, #2
 8009044:	3301      	adds	r3, #1
 8009046:	00da      	lsls	r2, r3, #3
 8009048:	4b44      	ldr	r3, [pc, #272]	; (800915c <ctlsocket+0x1e0>)
 800904a:	4413      	add	r3, r2
 800904c:	4618      	mov	r0, r3
 800904e:	f7ff f903 	bl	8008258 <WIZCHIP_READ>
 8009052:	4603      	mov	r3, r0
 8009054:	029b      	lsls	r3, r3, #10
 8009056:	b21a      	sxth	r2, r3
 8009058:	683b      	ldr	r3, [r7, #0]
 800905a:	801a      	strh	r2, [r3, #0]
         break;
 800905c:	e076      	b.n	800914c <ctlsocket+0x1d0>
      case CS_GET_MAXRXBUF:  
         *((datasize_t*)arg) = getSn_RxMAX(sn);
 800905e:	79fb      	ldrb	r3, [r7, #7]
 8009060:	009b      	lsls	r3, r3, #2
 8009062:	3301      	adds	r3, #1
 8009064:	00da      	lsls	r2, r3, #3
 8009066:	4b3e      	ldr	r3, [pc, #248]	; (8009160 <ctlsocket+0x1e4>)
 8009068:	4413      	add	r3, r2
 800906a:	4618      	mov	r0, r3
 800906c:	f7ff f8f4 	bl	8008258 <WIZCHIP_READ>
 8009070:	4603      	mov	r3, r0
 8009072:	029b      	lsls	r3, r3, #10
 8009074:	b21a      	sxth	r2, r3
 8009076:	683b      	ldr	r3, [r7, #0]
 8009078:	801a      	strh	r2, [r3, #0]
         break;
 800907a:	e067      	b.n	800914c <ctlsocket+0x1d0>
      case CS_CLR_INTERRUPT:
         if( tmp > SIK_ALL) return SOCKERR_ARG;
 800907c:	7bfb      	ldrb	r3, [r7, #15]
 800907e:	2b1f      	cmp	r3, #31
 8009080:	d902      	bls.n	8009088 <ctlsocket+0x10c>
 8009082:	f06f 0309 	mvn.w	r3, #9
 8009086:	e062      	b.n	800914e <ctlsocket+0x1d2>
         setSn_IRCLR(sn,tmp);
 8009088:	79fb      	ldrb	r3, [r7, #7]
 800908a:	009b      	lsls	r3, r3, #2
 800908c:	3301      	adds	r3, #1
 800908e:	00da      	lsls	r2, r3, #3
 8009090:	4b34      	ldr	r3, [pc, #208]	; (8009164 <ctlsocket+0x1e8>)
 8009092:	4413      	add	r3, r2
 8009094:	461a      	mov	r2, r3
 8009096:	7bfb      	ldrb	r3, [r7, #15]
 8009098:	4619      	mov	r1, r3
 800909a:	4610      	mov	r0, r2
 800909c:	f7ff f8ae 	bl	80081fc <WIZCHIP_WRITE>
         break;
 80090a0:	e054      	b.n	800914c <ctlsocket+0x1d0>
      case CS_GET_INTERRUPT:
         *((uint8_t*)arg) = getSn_IR(sn);
 80090a2:	79fb      	ldrb	r3, [r7, #7]
 80090a4:	009b      	lsls	r3, r3, #2
 80090a6:	3301      	adds	r3, #1
 80090a8:	00da      	lsls	r2, r3, #3
 80090aa:	4b2f      	ldr	r3, [pc, #188]	; (8009168 <ctlsocket+0x1ec>)
 80090ac:	4413      	add	r3, r2
 80090ae:	4618      	mov	r0, r3
 80090b0:	f7ff f8d2 	bl	8008258 <WIZCHIP_READ>
 80090b4:	4603      	mov	r3, r0
 80090b6:	461a      	mov	r2, r3
 80090b8:	683b      	ldr	r3, [r7, #0]
 80090ba:	701a      	strb	r2, [r3, #0]
         break;
 80090bc:	e046      	b.n	800914c <ctlsocket+0x1d0>
      case CS_SET_INTMASK:
         if( tmp > SIK_ALL) return SOCKERR_ARG;
 80090be:	7bfb      	ldrb	r3, [r7, #15]
 80090c0:	2b1f      	cmp	r3, #31
 80090c2:	d902      	bls.n	80090ca <ctlsocket+0x14e>
 80090c4:	f06f 0309 	mvn.w	r3, #9
 80090c8:	e041      	b.n	800914e <ctlsocket+0x1d2>
         setSn_IMR(sn,tmp);
 80090ca:	79fb      	ldrb	r3, [r7, #7]
 80090cc:	009b      	lsls	r3, r3, #2
 80090ce:	3301      	adds	r3, #1
 80090d0:	00da      	lsls	r2, r3, #3
 80090d2:	4b26      	ldr	r3, [pc, #152]	; (800916c <ctlsocket+0x1f0>)
 80090d4:	4413      	add	r3, r2
 80090d6:	461a      	mov	r2, r3
 80090d8:	7bfb      	ldrb	r3, [r7, #15]
 80090da:	4619      	mov	r1, r3
 80090dc:	4610      	mov	r0, r2
 80090de:	f7ff f88d 	bl	80081fc <WIZCHIP_WRITE>
         break;
 80090e2:	e033      	b.n	800914c <ctlsocket+0x1d0>
      case CS_GET_INTMASK:
         *((uint8_t*)arg) = getSn_IMR(sn);
 80090e4:	79fb      	ldrb	r3, [r7, #7]
 80090e6:	009b      	lsls	r3, r3, #2
 80090e8:	3301      	adds	r3, #1
 80090ea:	00da      	lsls	r2, r3, #3
 80090ec:	4b1f      	ldr	r3, [pc, #124]	; (800916c <ctlsocket+0x1f0>)
 80090ee:	4413      	add	r3, r2
 80090f0:	4618      	mov	r0, r3
 80090f2:	f7ff f8b1 	bl	8008258 <WIZCHIP_READ>
 80090f6:	4603      	mov	r3, r0
 80090f8:	461a      	mov	r2, r3
 80090fa:	683b      	ldr	r3, [r7, #0]
 80090fc:	701a      	strb	r2, [r3, #0]
         break;
 80090fe:	e025      	b.n	800914c <ctlsocket+0x1d0>
      case CS_SET_PREFER:
    	  if((tmp & 0x03) == 0x01) return SOCKERR_ARG;
 8009100:	7bfb      	ldrb	r3, [r7, #15]
 8009102:	f003 0303 	and.w	r3, r3, #3
 8009106:	2b01      	cmp	r3, #1
 8009108:	d102      	bne.n	8009110 <ctlsocket+0x194>
 800910a:	f06f 0309 	mvn.w	r3, #9
 800910e:	e01e      	b.n	800914e <ctlsocket+0x1d2>
    	  setSn_PSR(sn, tmp);
 8009110:	79fb      	ldrb	r3, [r7, #7]
 8009112:	009b      	lsls	r3, r3, #2
 8009114:	3301      	adds	r3, #1
 8009116:	00da      	lsls	r2, r3, #3
 8009118:	4b15      	ldr	r3, [pc, #84]	; (8009170 <ctlsocket+0x1f4>)
 800911a:	4413      	add	r3, r2
 800911c:	461a      	mov	r2, r3
 800911e:	7bfb      	ldrb	r3, [r7, #15]
 8009120:	4619      	mov	r1, r3
 8009122:	4610      	mov	r0, r2
 8009124:	f7ff f86a 	bl	80081fc <WIZCHIP_WRITE>
    	  break;
 8009128:	e010      	b.n	800914c <ctlsocket+0x1d0>
      case CS_GET_PREFER:
    	  *(uint8_t*) arg = getSn_PSR(sn);
 800912a:	79fb      	ldrb	r3, [r7, #7]
 800912c:	009b      	lsls	r3, r3, #2
 800912e:	3301      	adds	r3, #1
 8009130:	00da      	lsls	r2, r3, #3
 8009132:	4b0f      	ldr	r3, [pc, #60]	; (8009170 <ctlsocket+0x1f4>)
 8009134:	4413      	add	r3, r2
 8009136:	4618      	mov	r0, r3
 8009138:	f7ff f88e 	bl	8008258 <WIZCHIP_READ>
 800913c:	4603      	mov	r3, r0
 800913e:	461a      	mov	r2, r3
 8009140:	683b      	ldr	r3, [r7, #0]
 8009142:	701a      	strb	r2, [r3, #0]
    	  break;
 8009144:	e002      	b.n	800914c <ctlsocket+0x1d0>
      default:
         return SOCKERR_ARG;
 8009146:	f06f 0309 	mvn.w	r3, #9
 800914a:	e000      	b.n	800914e <ctlsocket+0x1d2>
   }
   return SOCK_OK;
 800914c:	2301      	movs	r3, #1
}
 800914e:	4618      	mov	r0, r3
 8009150:	3710      	adds	r7, #16
 8009152:	46bd      	mov	sp, r7
 8009154:	bd80      	pop	{r7, pc}
 8009156:	bf00      	nop
 8009158:	20000690 	.word	0x20000690
 800915c:	60020000 	.word	0x60020000
 8009160:	60022000 	.word	0x60022000
 8009164:	60002800 	.word	0x60002800
 8009168:	60002000 	.word	0x60002000
 800916c:	60002400 	.word	0x60002400
 8009170:	60000400 	.word	0x60000400

08009174 <getsockopt>:
   } 
   return SOCK_OK;
}

int8_t getsockopt(uint8_t sn, sockopt_type sotype, void* arg)
{
 8009174:	b590      	push	{r4, r7, lr}
 8009176:	b083      	sub	sp, #12
 8009178:	af00      	add	r7, sp, #0
 800917a:	4603      	mov	r3, r0
 800917c:	603a      	str	r2, [r7, #0]
 800917e:	71fb      	strb	r3, [r7, #7]
 8009180:	460b      	mov	r3, r1
 8009182:	71bb      	strb	r3, [r7, #6]
   CHECK_SOCKNUM();
 8009184:	79fb      	ldrb	r3, [r7, #7]
 8009186:	2b07      	cmp	r3, #7
 8009188:	d902      	bls.n	8009190 <getsockopt+0x1c>
 800918a:	f04f 33ff 	mov.w	r3, #4294967295
 800918e:	e1ce      	b.n	800952e <getsockopt+0x3ba>
   switch(sotype)
 8009190:	79bb      	ldrb	r3, [r7, #6]
 8009192:	2b0e      	cmp	r3, #14
 8009194:	f200 81a9 	bhi.w	80094ea <getsockopt+0x376>
 8009198:	a201      	add	r2, pc, #4	; (adr r2, 80091a0 <getsockopt+0x2c>)
 800919a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800919e:	bf00      	nop
 80091a0:	080091dd 	.word	0x080091dd
 80091a4:	08009239 	.word	0x08009239
 80091a8:	08009255 	.word	0x08009255
 80091ac:	08009271 	.word	0x08009271
 80091b0:	080092ab 	.word	0x080092ab
 80091b4:	08009329 	.word	0x08009329
 80091b8:	080094eb 	.word	0x080094eb
 80091bc:	08009363 	.word	0x08009363
 80091c0:	080093a1 	.word	0x080093a1
 80091c4:	080093b3 	.word	0x080093b3
 80091c8:	080093c5 	.word	0x080093c5
 80091cc:	080093e1 	.word	0x080093e1
 80091d0:	08009423 	.word	0x08009423
 80091d4:	080094cb 	.word	0x080094cb
 80091d8:	0800947f 	.word	0x0800947f
   {
      case SO_FLAG:
         *(uint8_t*)arg = (getSn_MR(sn) & 0xF0) | (getSn_MR2(sn)) | ((uint8_t)(((sock_io_mode >> sn) & 0x0001) << 3));
 80091dc:	79fb      	ldrb	r3, [r7, #7]
 80091de:	009b      	lsls	r3, r3, #2
 80091e0:	3301      	adds	r3, #1
 80091e2:	00db      	lsls	r3, r3, #3
 80091e4:	f103 43c0 	add.w	r3, r3, #1610612736	; 0x60000000
 80091e8:	4618      	mov	r0, r3
 80091ea:	f7ff f835 	bl	8008258 <WIZCHIP_READ>
 80091ee:	4603      	mov	r3, r0
 80091f0:	b25b      	sxtb	r3, r3
 80091f2:	f023 030f 	bic.w	r3, r3, #15
 80091f6:	b25c      	sxtb	r4, r3
 80091f8:	79fb      	ldrb	r3, [r7, #7]
 80091fa:	009b      	lsls	r3, r3, #2
 80091fc:	3301      	adds	r3, #1
 80091fe:	00da      	lsls	r2, r3, #3
 8009200:	4bbb      	ldr	r3, [pc, #748]	; (80094f0 <getsockopt+0x37c>)
 8009202:	4413      	add	r3, r2
 8009204:	4618      	mov	r0, r3
 8009206:	f7ff f827 	bl	8008258 <WIZCHIP_READ>
 800920a:	4603      	mov	r3, r0
 800920c:	b25b      	sxtb	r3, r3
 800920e:	4323      	orrs	r3, r4
 8009210:	b25a      	sxtb	r2, r3
 8009212:	4bb8      	ldr	r3, [pc, #736]	; (80094f4 <getsockopt+0x380>)
 8009214:	881b      	ldrh	r3, [r3, #0]
 8009216:	4619      	mov	r1, r3
 8009218:	79fb      	ldrb	r3, [r7, #7]
 800921a:	fa41 f303 	asr.w	r3, r1, r3
 800921e:	b2db      	uxtb	r3, r3
 8009220:	00db      	lsls	r3, r3, #3
 8009222:	b2db      	uxtb	r3, r3
 8009224:	b25b      	sxtb	r3, r3
 8009226:	f003 0308 	and.w	r3, r3, #8
 800922a:	b25b      	sxtb	r3, r3
 800922c:	4313      	orrs	r3, r2
 800922e:	b25b      	sxtb	r3, r3
 8009230:	b2da      	uxtb	r2, r3
 8009232:	683b      	ldr	r3, [r7, #0]
 8009234:	701a      	strb	r2, [r3, #0]
         break;
 8009236:	e179      	b.n	800952c <getsockopt+0x3b8>
      case SO_TTL:
         *(uint8_t*) arg = getSn_TTLR(sn);
 8009238:	79fb      	ldrb	r3, [r7, #7]
 800923a:	009b      	lsls	r3, r3, #2
 800923c:	3301      	adds	r3, #1
 800923e:	00da      	lsls	r2, r3, #3
 8009240:	4bad      	ldr	r3, [pc, #692]	; (80094f8 <getsockopt+0x384>)
 8009242:	4413      	add	r3, r2
 8009244:	4618      	mov	r0, r3
 8009246:	f7ff f807 	bl	8008258 <WIZCHIP_READ>
 800924a:	4603      	mov	r3, r0
 800924c:	461a      	mov	r2, r3
 800924e:	683b      	ldr	r3, [r7, #0]
 8009250:	701a      	strb	r2, [r3, #0]
         break;
 8009252:	e16b      	b.n	800952c <getsockopt+0x3b8>
      case SO_TOS:
         *(uint8_t*) arg = getSn_TOSR(sn);
 8009254:	79fb      	ldrb	r3, [r7, #7]
 8009256:	009b      	lsls	r3, r3, #2
 8009258:	3301      	adds	r3, #1
 800925a:	00da      	lsls	r2, r3, #3
 800925c:	4ba7      	ldr	r3, [pc, #668]	; (80094fc <getsockopt+0x388>)
 800925e:	4413      	add	r3, r2
 8009260:	4618      	mov	r0, r3
 8009262:	f7fe fff9 	bl	8008258 <WIZCHIP_READ>
 8009266:	4603      	mov	r3, r0
 8009268:	461a      	mov	r2, r3
 800926a:	683b      	ldr	r3, [r7, #0]
 800926c:	701a      	strb	r2, [r3, #0]
         break;
 800926e:	e15d      	b.n	800952c <getsockopt+0x3b8>
      case SO_MSS: 
         *(uint16_t*) arg = getSn_MSSR(sn);
 8009270:	79fb      	ldrb	r3, [r7, #7]
 8009272:	009b      	lsls	r3, r3, #2
 8009274:	3301      	adds	r3, #1
 8009276:	00da      	lsls	r2, r3, #3
 8009278:	4ba1      	ldr	r3, [pc, #644]	; (8009500 <getsockopt+0x38c>)
 800927a:	4413      	add	r3, r2
 800927c:	4618      	mov	r0, r3
 800927e:	f7fe ffeb 	bl	8008258 <WIZCHIP_READ>
 8009282:	4603      	mov	r3, r0
 8009284:	b29b      	uxth	r3, r3
 8009286:	021b      	lsls	r3, r3, #8
 8009288:	b29c      	uxth	r4, r3
 800928a:	79fb      	ldrb	r3, [r7, #7]
 800928c:	009b      	lsls	r3, r3, #2
 800928e:	3301      	adds	r3, #1
 8009290:	00da      	lsls	r2, r3, #3
 8009292:	4b9c      	ldr	r3, [pc, #624]	; (8009504 <getsockopt+0x390>)
 8009294:	4413      	add	r3, r2
 8009296:	4618      	mov	r0, r3
 8009298:	f7fe ffde 	bl	8008258 <WIZCHIP_READ>
 800929c:	4603      	mov	r3, r0
 800929e:	b29b      	uxth	r3, r3
 80092a0:	4423      	add	r3, r4
 80092a2:	b29a      	uxth	r2, r3
 80092a4:	683b      	ldr	r3, [r7, #0]
 80092a6:	801a      	strh	r2, [r3, #0]
         break;
 80092a8:	e140      	b.n	800952c <getsockopt+0x3b8>
      case SO_DESTIP:
         CHECK_TCPMODE();
 80092aa:	79fb      	ldrb	r3, [r7, #7]
 80092ac:	009b      	lsls	r3, r3, #2
 80092ae:	3301      	adds	r3, #1
 80092b0:	00db      	lsls	r3, r3, #3
 80092b2:	f103 43c0 	add.w	r3, r3, #1610612736	; 0x60000000
 80092b6:	4618      	mov	r0, r3
 80092b8:	f7fe ffce 	bl	8008258 <WIZCHIP_READ>
 80092bc:	4603      	mov	r3, r0
 80092be:	f003 0303 	and.w	r3, r3, #3
 80092c2:	2b01      	cmp	r3, #1
 80092c4:	d002      	beq.n	80092cc <getsockopt+0x158>
 80092c6:	f06f 0304 	mvn.w	r3, #4
 80092ca:	e130      	b.n	800952e <getsockopt+0x3ba>
         if(getSn_ESR(sn) & TCPSOCK_MODE) //IPv6 ?
 80092cc:	79fb      	ldrb	r3, [r7, #7]
 80092ce:	009b      	lsls	r3, r3, #2
 80092d0:	3301      	adds	r3, #1
 80092d2:	00da      	lsls	r2, r3, #3
 80092d4:	4b8c      	ldr	r3, [pc, #560]	; (8009508 <getsockopt+0x394>)
 80092d6:	4413      	add	r3, r2
 80092d8:	4618      	mov	r0, r3
 80092da:	f7fe ffbd 	bl	8008258 <WIZCHIP_READ>
 80092de:	4603      	mov	r3, r0
 80092e0:	f003 0304 	and.w	r3, r3, #4
 80092e4:	2b00      	cmp	r3, #0
 80092e6:	d00f      	beq.n	8009308 <getsockopt+0x194>
         {
            getSn_DIP6R(sn, ((wiz_IPAddress*)arg)->ip);
 80092e8:	79fb      	ldrb	r3, [r7, #7]
 80092ea:	009b      	lsls	r3, r3, #2
 80092ec:	3301      	adds	r3, #1
 80092ee:	00da      	lsls	r2, r3, #3
 80092f0:	4b86      	ldr	r3, [pc, #536]	; (800950c <getsockopt+0x398>)
 80092f2:	4413      	add	r3, r2
 80092f4:	4618      	mov	r0, r3
 80092f6:	683b      	ldr	r3, [r7, #0]
 80092f8:	2210      	movs	r2, #16
 80092fa:	4619      	mov	r1, r3
 80092fc:	f7ff f818 	bl	8008330 <WIZCHIP_READ_BUF>
            ((wiz_IPAddress*)arg)->len = 16;
 8009300:	683b      	ldr	r3, [r7, #0]
 8009302:	2210      	movs	r2, #16
 8009304:	741a      	strb	r2, [r3, #16]
         else
         {
            getSn_DIPR(sn, ((wiz_IPAddress*)arg)->ip);
            ((wiz_IPAddress*)arg)->len = 4;
         } 
         break;
 8009306:	e111      	b.n	800952c <getsockopt+0x3b8>
            getSn_DIPR(sn, ((wiz_IPAddress*)arg)->ip);
 8009308:	79fb      	ldrb	r3, [r7, #7]
 800930a:	009b      	lsls	r3, r3, #2
 800930c:	3301      	adds	r3, #1
 800930e:	00da      	lsls	r2, r3, #3
 8009310:	4b7f      	ldr	r3, [pc, #508]	; (8009510 <getsockopt+0x39c>)
 8009312:	4413      	add	r3, r2
 8009314:	4618      	mov	r0, r3
 8009316:	683b      	ldr	r3, [r7, #0]
 8009318:	2204      	movs	r2, #4
 800931a:	4619      	mov	r1, r3
 800931c:	f7ff f808 	bl	8008330 <WIZCHIP_READ_BUF>
            ((wiz_IPAddress*)arg)->len = 4;
 8009320:	683b      	ldr	r3, [r7, #0]
 8009322:	2204      	movs	r2, #4
 8009324:	741a      	strb	r2, [r3, #16]
         break;
 8009326:	e101      	b.n	800952c <getsockopt+0x3b8>
      case SO_DESTPORT:  
         *(uint16_t*) arg = getSn_DPORTR(sn);
 8009328:	79fb      	ldrb	r3, [r7, #7]
 800932a:	009b      	lsls	r3, r3, #2
 800932c:	3301      	adds	r3, #1
 800932e:	00da      	lsls	r2, r3, #3
 8009330:	4b78      	ldr	r3, [pc, #480]	; (8009514 <getsockopt+0x3a0>)
 8009332:	4413      	add	r3, r2
 8009334:	4618      	mov	r0, r3
 8009336:	f7fe ff8f 	bl	8008258 <WIZCHIP_READ>
 800933a:	4603      	mov	r3, r0
 800933c:	b29b      	uxth	r3, r3
 800933e:	021b      	lsls	r3, r3, #8
 8009340:	b29c      	uxth	r4, r3
 8009342:	79fb      	ldrb	r3, [r7, #7]
 8009344:	009b      	lsls	r3, r3, #2
 8009346:	3301      	adds	r3, #1
 8009348:	00da      	lsls	r2, r3, #3
 800934a:	4b73      	ldr	r3, [pc, #460]	; (8009518 <getsockopt+0x3a4>)
 800934c:	4413      	add	r3, r2
 800934e:	4618      	mov	r0, r3
 8009350:	f7fe ff82 	bl	8008258 <WIZCHIP_READ>
 8009354:	4603      	mov	r3, r0
 8009356:	b29b      	uxth	r3, r3
 8009358:	4423      	add	r3, r4
 800935a:	b29a      	uxth	r2, r3
 800935c:	683b      	ldr	r3, [r7, #0]
 800935e:	801a      	strh	r2, [r3, #0]
         break; 
 8009360:	e0e4      	b.n	800952c <getsockopt+0x3b8>
      case SO_KEEPALIVEAUTO:
         CHECK_TCPMODE();
 8009362:	79fb      	ldrb	r3, [r7, #7]
 8009364:	009b      	lsls	r3, r3, #2
 8009366:	3301      	adds	r3, #1
 8009368:	00db      	lsls	r3, r3, #3
 800936a:	f103 43c0 	add.w	r3, r3, #1610612736	; 0x60000000
 800936e:	4618      	mov	r0, r3
 8009370:	f7fe ff72 	bl	8008258 <WIZCHIP_READ>
 8009374:	4603      	mov	r3, r0
 8009376:	f003 0303 	and.w	r3, r3, #3
 800937a:	2b01      	cmp	r3, #1
 800937c:	d002      	beq.n	8009384 <getsockopt+0x210>
 800937e:	f06f 0304 	mvn.w	r3, #4
 8009382:	e0d4      	b.n	800952e <getsockopt+0x3ba>
         *(uint16_t*) arg = getSn_KPALVTR(sn);
 8009384:	79fb      	ldrb	r3, [r7, #7]
 8009386:	009b      	lsls	r3, r3, #2
 8009388:	3301      	adds	r3, #1
 800938a:	00da      	lsls	r2, r3, #3
 800938c:	4b63      	ldr	r3, [pc, #396]	; (800951c <getsockopt+0x3a8>)
 800938e:	4413      	add	r3, r2
 8009390:	4618      	mov	r0, r3
 8009392:	f7fe ff61 	bl	8008258 <WIZCHIP_READ>
 8009396:	4603      	mov	r3, r0
 8009398:	b29a      	uxth	r2, r3
 800939a:	683b      	ldr	r3, [r7, #0]
 800939c:	801a      	strh	r2, [r3, #0]
         break;
 800939e:	e0c5      	b.n	800952c <getsockopt+0x3b8>
      case SO_SENDBUF:
         *(datasize_t*) arg = getSn_TX_FSR(sn);
 80093a0:	79fb      	ldrb	r3, [r7, #7]
 80093a2:	4618      	mov	r0, r3
 80093a4:	f7fe fffc 	bl	80083a0 <getSn_TX_FSR>
 80093a8:	4603      	mov	r3, r0
 80093aa:	461a      	mov	r2, r3
 80093ac:	683b      	ldr	r3, [r7, #0]
 80093ae:	801a      	strh	r2, [r3, #0]
         break;
 80093b0:	e0bc      	b.n	800952c <getsockopt+0x3b8>
      case SO_RECVBUF:
         *(datasize_t*) arg = getSn_RX_RSR(sn);
 80093b2:	79fb      	ldrb	r3, [r7, #7]
 80093b4:	4618      	mov	r0, r3
 80093b6:	f7ff f82b 	bl	8008410 <getSn_RX_RSR>
 80093ba:	4603      	mov	r3, r0
 80093bc:	461a      	mov	r2, r3
 80093be:	683b      	ldr	r3, [r7, #0]
 80093c0:	801a      	strh	r2, [r3, #0]
         break;
 80093c2:	e0b3      	b.n	800952c <getsockopt+0x3b8>
      case SO_STATUS:
         *(uint8_t*) arg = getSn_SR(sn);
 80093c4:	79fb      	ldrb	r3, [r7, #7]
 80093c6:	009b      	lsls	r3, r3, #2
 80093c8:	3301      	adds	r3, #1
 80093ca:	00da      	lsls	r2, r3, #3
 80093cc:	4b54      	ldr	r3, [pc, #336]	; (8009520 <getsockopt+0x3ac>)
 80093ce:	4413      	add	r3, r2
 80093d0:	4618      	mov	r0, r3
 80093d2:	f7fe ff41 	bl	8008258 <WIZCHIP_READ>
 80093d6:	4603      	mov	r3, r0
 80093d8:	461a      	mov	r2, r3
 80093da:	683b      	ldr	r3, [r7, #0]
 80093dc:	701a      	strb	r2, [r3, #0]
         break;
 80093de:	e0a5      	b.n	800952c <getsockopt+0x3b8>
      case SO_EXTSTATUS:
         CHECK_TCPMODE();
 80093e0:	79fb      	ldrb	r3, [r7, #7]
 80093e2:	009b      	lsls	r3, r3, #2
 80093e4:	3301      	adds	r3, #1
 80093e6:	00db      	lsls	r3, r3, #3
 80093e8:	f103 43c0 	add.w	r3, r3, #1610612736	; 0x60000000
 80093ec:	4618      	mov	r0, r3
 80093ee:	f7fe ff33 	bl	8008258 <WIZCHIP_READ>
 80093f2:	4603      	mov	r3, r0
 80093f4:	f003 0303 	and.w	r3, r3, #3
 80093f8:	2b01      	cmp	r3, #1
 80093fa:	d002      	beq.n	8009402 <getsockopt+0x28e>
 80093fc:	f06f 0304 	mvn.w	r3, #4
 8009400:	e095      	b.n	800952e <getsockopt+0x3ba>
         *(uint8_t*) arg = getSn_ESR(sn) & 0x07;
 8009402:	79fb      	ldrb	r3, [r7, #7]
 8009404:	009b      	lsls	r3, r3, #2
 8009406:	3301      	adds	r3, #1
 8009408:	00da      	lsls	r2, r3, #3
 800940a:	4b3f      	ldr	r3, [pc, #252]	; (8009508 <getsockopt+0x394>)
 800940c:	4413      	add	r3, r2
 800940e:	4618      	mov	r0, r3
 8009410:	f7fe ff22 	bl	8008258 <WIZCHIP_READ>
 8009414:	4603      	mov	r3, r0
 8009416:	f003 0307 	and.w	r3, r3, #7
 800941a:	b2da      	uxtb	r2, r3
 800941c:	683b      	ldr	r3, [r7, #0]
 800941e:	701a      	strb	r2, [r3, #0]
         break;
 8009420:	e084      	b.n	800952c <getsockopt+0x3b8>
      case SO_REMAINSIZE:
         if(getSn_MR(sn)==SOCK_CLOSED) return SOCKERR_SOCKSTATUS;
 8009422:	79fb      	ldrb	r3, [r7, #7]
 8009424:	009b      	lsls	r3, r3, #2
 8009426:	3301      	adds	r3, #1
 8009428:	00db      	lsls	r3, r3, #3
 800942a:	f103 43c0 	add.w	r3, r3, #1610612736	; 0x60000000
 800942e:	4618      	mov	r0, r3
 8009430:	f7fe ff12 	bl	8008258 <WIZCHIP_READ>
 8009434:	4603      	mov	r3, r0
 8009436:	2b00      	cmp	r3, #0
 8009438:	d102      	bne.n	8009440 <getsockopt+0x2cc>
 800943a:	f06f 0306 	mvn.w	r3, #6
 800943e:	e076      	b.n	800952e <getsockopt+0x3ba>
         if(getSn_MR(sn) & 0x01)   *(uint16_t*)arg = getSn_RX_RSR(sn);
 8009440:	79fb      	ldrb	r3, [r7, #7]
 8009442:	009b      	lsls	r3, r3, #2
 8009444:	3301      	adds	r3, #1
 8009446:	00db      	lsls	r3, r3, #3
 8009448:	f103 43c0 	add.w	r3, r3, #1610612736	; 0x60000000
 800944c:	4618      	mov	r0, r3
 800944e:	f7fe ff03 	bl	8008258 <WIZCHIP_READ>
 8009452:	4603      	mov	r3, r0
 8009454:	f003 0301 	and.w	r3, r3, #1
 8009458:	2b00      	cmp	r3, #0
 800945a:	d008      	beq.n	800946e <getsockopt+0x2fa>
 800945c:	79fb      	ldrb	r3, [r7, #7]
 800945e:	4618      	mov	r0, r3
 8009460:	f7fe ffd6 	bl	8008410 <getSn_RX_RSR>
 8009464:	4603      	mov	r3, r0
 8009466:	b29a      	uxth	r2, r3
 8009468:	683b      	ldr	r3, [r7, #0]
 800946a:	801a      	strh	r2, [r3, #0]
         else                      *(uint16_t*)arg = sock_remained_size[sn];
         break;
 800946c:	e05e      	b.n	800952c <getsockopt+0x3b8>
         else                      *(uint16_t*)arg = sock_remained_size[sn];
 800946e:	79fb      	ldrb	r3, [r7, #7]
 8009470:	4a2c      	ldr	r2, [pc, #176]	; (8009524 <getsockopt+0x3b0>)
 8009472:	f932 3013 	ldrsh.w	r3, [r2, r3, lsl #1]
 8009476:	b29a      	uxth	r2, r3
 8009478:	683b      	ldr	r3, [r7, #0]
 800947a:	801a      	strh	r2, [r3, #0]
         break;
 800947c:	e056      	b.n	800952c <getsockopt+0x3b8>
      case SO_PACKINFO:
         if(getSn_MR(sn)==SOCK_CLOSED) return SOCKERR_SOCKSTATUS;
 800947e:	79fb      	ldrb	r3, [r7, #7]
 8009480:	009b      	lsls	r3, r3, #2
 8009482:	3301      	adds	r3, #1
 8009484:	00db      	lsls	r3, r3, #3
 8009486:	f103 43c0 	add.w	r3, r3, #1610612736	; 0x60000000
 800948a:	4618      	mov	r0, r3
 800948c:	f7fe fee4 	bl	8008258 <WIZCHIP_READ>
 8009490:	4603      	mov	r3, r0
 8009492:	2b00      	cmp	r3, #0
 8009494:	d102      	bne.n	800949c <getsockopt+0x328>
 8009496:	f06f 0306 	mvn.w	r3, #6
 800949a:	e048      	b.n	800952e <getsockopt+0x3ba>
         if(getSn_MR(sn) & 0x01)       return SOCKERR_SOCKMODE;
 800949c:	79fb      	ldrb	r3, [r7, #7]
 800949e:	009b      	lsls	r3, r3, #2
 80094a0:	3301      	adds	r3, #1
 80094a2:	00db      	lsls	r3, r3, #3
 80094a4:	f103 43c0 	add.w	r3, r3, #1610612736	; 0x60000000
 80094a8:	4618      	mov	r0, r3
 80094aa:	f7fe fed5 	bl	8008258 <WIZCHIP_READ>
 80094ae:	4603      	mov	r3, r0
 80094b0:	f003 0301 	and.w	r3, r3, #1
 80094b4:	2b00      	cmp	r3, #0
 80094b6:	d002      	beq.n	80094be <getsockopt+0x34a>
 80094b8:	f06f 0304 	mvn.w	r3, #4
 80094bc:	e037      	b.n	800952e <getsockopt+0x3ba>
         else *(uint8_t*)arg = sock_pack_info[sn];
 80094be:	79fb      	ldrb	r3, [r7, #7]
 80094c0:	4a19      	ldr	r2, [pc, #100]	; (8009528 <getsockopt+0x3b4>)
 80094c2:	5cd2      	ldrb	r2, [r2, r3]
 80094c4:	683b      	ldr	r3, [r7, #0]
 80094c6:	701a      	strb	r2, [r3, #0]
         break;
 80094c8:	e030      	b.n	800952c <getsockopt+0x3b8>
      case SO_MODE:
         *(uint8_t*) arg = 0x0F & getSn_MR(sn);
 80094ca:	79fb      	ldrb	r3, [r7, #7]
 80094cc:	009b      	lsls	r3, r3, #2
 80094ce:	3301      	adds	r3, #1
 80094d0:	00db      	lsls	r3, r3, #3
 80094d2:	f103 43c0 	add.w	r3, r3, #1610612736	; 0x60000000
 80094d6:	4618      	mov	r0, r3
 80094d8:	f7fe febe 	bl	8008258 <WIZCHIP_READ>
 80094dc:	4603      	mov	r3, r0
 80094de:	f003 030f 	and.w	r3, r3, #15
 80094e2:	b2da      	uxtb	r2, r3
 80094e4:	683b      	ldr	r3, [r7, #0]
 80094e6:	701a      	strb	r2, [r3, #0]
         break;
 80094e8:	e020      	b.n	800952c <getsockopt+0x3b8>
      default:
         return SOCKERR_SOCKOPT;
 80094ea:	f06f 0301 	mvn.w	r3, #1
 80094ee:	e01e      	b.n	800952e <getsockopt+0x3ba>
 80094f0:	60014400 	.word	0x60014400
 80094f4:	20000690 	.word	0x20000690
 80094f8:	60010800 	.word	0x60010800
 80094fc:	60010400 	.word	0x60010400
 8009500:	60011000 	.word	0x60011000
 8009504:	60011100 	.word	0x60011100
 8009508:	60003100 	.word	0x60003100
 800950c:	60013000 	.word	0x60013000
 8009510:	60012000 	.word	0x60012000
 8009514:	60014000 	.word	0x60014000
 8009518:	60014100 	.word	0x60014100
 800951c:	60018800 	.word	0x60018800
 8009520:	60003000 	.word	0x60003000
 8009524:	20000694 	.word	0x20000694
 8009528:	200006a4 	.word	0x200006a4
   }
   return SOCK_OK;
 800952c:	2301      	movs	r3, #1
}
 800952e:	4618      	mov	r0, r3
 8009530:	370c      	adds	r7, #12
 8009532:	46bd      	mov	sp, r7
 8009534:	bd90      	pop	{r4, r7, pc}
 8009536:	bf00      	nop

08009538 <wizchip_cris_enter>:
 * @details @ref wizchip_cris_enter() provides the default protection while @ref _WIZCHIP_ is accessed. \n
 *          but it is null function.
 * @note It can be overwritten with your function or register your functions by calling @ref reg_wizchip_cris_cbfunc().
 * @sa wizchip_cris_exit()
 */
void wizchip_cris_enter(void)   {}
 8009538:	b480      	push	{r7}
 800953a:	af00      	add	r7, sp, #0
 800953c:	bf00      	nop
 800953e:	46bd      	mov	sp, r7
 8009540:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009544:	4770      	bx	lr

08009546 <wizchip_cris_exit>:
 * @details @ref wizchip_cris_exit provides the default protection while @ref _WIZCHIP_ is accessed\n
 *          but it is null function.
 * @note It can be overwritten with your function or register your functions by calling @ref reg_wizchip_cris_cbfunc().
 * @sa wizchip_cris_enter()
 */
void wizchip_cris_exit(void)   {}
 8009546:	b480      	push	{r7}
 8009548:	af00      	add	r7, sp, #0
 800954a:	bf00      	nop
 800954c:	46bd      	mov	sp, r7
 800954e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009552:	4770      	bx	lr

08009554 <wizchip_cs_select>:
 * @details @ref wizchip_cs_select() provides the default selection @ref _WIZCHIP_,\n
 *          but it is null function.
 * @note It can be overwritten with your function or register your functions by calling @ref reg_wizchip_cs_cbfunc().
 * @sa wizchip_cs_deselect()
 */
void wizchip_cs_select(void)   {}
 8009554:	b480      	push	{r7}
 8009556:	af00      	add	r7, sp, #0
 8009558:	bf00      	nop
 800955a:	46bd      	mov	sp, r7
 800955c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009560:	4770      	bx	lr

08009562 <wizchip_cs_deselect>:
 * @details @ref wizchip_cs_deselect() provides the default de-selection @ref _WIZCHIP_, \n
 *          but it is null function.
 * @note It can be overwritten with your function or register your functions by calling @ref reg_wizchip_cs_cbfunc().
 * @sa wizchip_cs_select()
 */
void wizchip_cs_deselect(void)   {}
 8009562:	b480      	push	{r7}
 8009564:	af00      	add	r7, sp, #0
 8009566:	bf00      	nop
 8009568:	46bd      	mov	sp, r7
 800956a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800956e:	4770      	bx	lr

08009570 <wizchip_bus_read>:
 * @param AddrSel It specifies the address of register to be read.
 * @return @ref iodata_t  
 * @note It can be overwritten with your function or register your functions by calling @ref reg_wizchip_bus_cbfunc().
 * @sa wizchip_bus_write()
 */
iodata_t wizchip_bus_read(uint32_t AddrSel) { return * ((volatile iodata_t *)((ptrdiff_t) AddrSel)); }
 8009570:	b480      	push	{r7}
 8009572:	b083      	sub	sp, #12
 8009574:	af00      	add	r7, sp, #0
 8009576:	6078      	str	r0, [r7, #4]
 8009578:	687b      	ldr	r3, [r7, #4]
 800957a:	781b      	ldrb	r3, [r3, #0]
 800957c:	b2db      	uxtb	r3, r3
 800957e:	4618      	mov	r0, r3
 8009580:	370c      	adds	r7, #12
 8009582:	46bd      	mov	sp, r7
 8009584:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009588:	4770      	bx	lr

0800958a <wizchip_bus_write>:
 * @param wb @ref iodata_t data to be written
 * @return void
 * @note It can be overwritten with your function or register your functions by calling @ref reg_wizchip_bus_cbfunc().
 * @sa wizchip_bus_read()
 */
void wizchip_bus_write(uint32_t AddrSel, iodata_t wb)  { *((volatile iodata_t*)((ptrdiff_t)AddrSel)) = wb; }
 800958a:	b480      	push	{r7}
 800958c:	b083      	sub	sp, #12
 800958e:	af00      	add	r7, sp, #0
 8009590:	6078      	str	r0, [r7, #4]
 8009592:	460b      	mov	r3, r1
 8009594:	70fb      	strb	r3, [r7, #3]
 8009596:	687b      	ldr	r3, [r7, #4]
 8009598:	78fa      	ldrb	r2, [r7, #3]
 800959a:	701a      	strb	r2, [r3, #0]
 800959c:	bf00      	nop
 800959e:	370c      	adds	r7, #12
 80095a0:	46bd      	mov	sp, r7
 80095a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80095a6:	4770      	bx	lr

080095a8 <wizchip_bus_read_buf>:
 * @return void
 * @note It can be overwritten with your function or register your functions by calling @ref reg_wizchip_bus_cbfunc().
 * @sa wizchip_bus_write_buf()
 */
void wizchip_bus_read_buf(uint32_t AddrSel, iodata_t* buf, datasize_t len, uint8_t addrinc)
{ 
 80095a8:	b590      	push	{r4, r7, lr}
 80095aa:	b087      	sub	sp, #28
 80095ac:	af00      	add	r7, sp, #0
 80095ae:	60f8      	str	r0, [r7, #12]
 80095b0:	60b9      	str	r1, [r7, #8]
 80095b2:	4611      	mov	r1, r2
 80095b4:	461a      	mov	r2, r3
 80095b6:	460b      	mov	r3, r1
 80095b8:	80fb      	strh	r3, [r7, #6]
 80095ba:	4613      	mov	r3, r2
 80095bc:	717b      	strb	r3, [r7, #5]
   datasize_t i;
   if(addrinc) addrinc = sizeof(iodata_t);
 80095be:	797b      	ldrb	r3, [r7, #5]
 80095c0:	2b00      	cmp	r3, #0
 80095c2:	d001      	beq.n	80095c8 <wizchip_bus_read_buf+0x20>
 80095c4:	2301      	movs	r3, #1
 80095c6:	717b      	strb	r3, [r7, #5]
   for ( i = 0; i < len; i++)
 80095c8:	2300      	movs	r3, #0
 80095ca:	82fb      	strh	r3, [r7, #22]
 80095cc:	e012      	b.n	80095f4 <wizchip_bus_read_buf+0x4c>
   {
      *buf++ = WIZCHIP.IF.BUS._read_data(AddrSel);
 80095ce:	4b0f      	ldr	r3, [pc, #60]	; (800960c <wizchip_bus_read_buf+0x64>)
 80095d0:	699b      	ldr	r3, [r3, #24]
 80095d2:	68bc      	ldr	r4, [r7, #8]
 80095d4:	1c62      	adds	r2, r4, #1
 80095d6:	60ba      	str	r2, [r7, #8]
 80095d8:	68f8      	ldr	r0, [r7, #12]
 80095da:	4798      	blx	r3
 80095dc:	4603      	mov	r3, r0
 80095de:	7023      	strb	r3, [r4, #0]
      AddrSel += (uint32_t) addrinc;
 80095e0:	797b      	ldrb	r3, [r7, #5]
 80095e2:	68fa      	ldr	r2, [r7, #12]
 80095e4:	4413      	add	r3, r2
 80095e6:	60fb      	str	r3, [r7, #12]
   for ( i = 0; i < len; i++)
 80095e8:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 80095ec:	b29b      	uxth	r3, r3
 80095ee:	3301      	adds	r3, #1
 80095f0:	b29b      	uxth	r3, r3
 80095f2:	82fb      	strh	r3, [r7, #22]
 80095f4:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 80095f8:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80095fc:	429a      	cmp	r2, r3
 80095fe:	dbe6      	blt.n	80095ce <wizchip_bus_read_buf+0x26>
   }
}
 8009600:	bf00      	nop
 8009602:	bf00      	nop
 8009604:	371c      	adds	r7, #28
 8009606:	46bd      	mov	sp, r7
 8009608:	bd90      	pop	{r4, r7, pc}
 800960a:	bf00      	nop
 800960c:	20000088 	.word	0x20000088

08009610 <wizchip_bus_write_buf>:
 * @return void
 * @note It can be overwritten with your function or register your functions by calling @ref reg_wizchip_bus_cbfunc().
 * @sa wizchip_bus_read_buf()
 */
void wizchip_bus_write_buf(uint32_t AddrSel, iodata_t* buf, datasize_t len, uint8_t addrinc)
{ 
 8009610:	b580      	push	{r7, lr}
 8009612:	b086      	sub	sp, #24
 8009614:	af00      	add	r7, sp, #0
 8009616:	60f8      	str	r0, [r7, #12]
 8009618:	60b9      	str	r1, [r7, #8]
 800961a:	4611      	mov	r1, r2
 800961c:	461a      	mov	r2, r3
 800961e:	460b      	mov	r3, r1
 8009620:	80fb      	strh	r3, [r7, #6]
 8009622:	4613      	mov	r3, r2
 8009624:	717b      	strb	r3, [r7, #5]
   datasize_t i;
   if(addrinc) addrinc = sizeof(iodata_t);
 8009626:	797b      	ldrb	r3, [r7, #5]
 8009628:	2b00      	cmp	r3, #0
 800962a:	d001      	beq.n	8009630 <wizchip_bus_write_buf+0x20>
 800962c:	2301      	movs	r3, #1
 800962e:	717b      	strb	r3, [r7, #5]
   for( i = 0; i < len ; i++)
 8009630:	2300      	movs	r3, #0
 8009632:	82fb      	strh	r3, [r7, #22]
 8009634:	e012      	b.n	800965c <wizchip_bus_write_buf+0x4c>
   {
      WIZCHIP.IF.BUS._write_data(AddrSel,*buf++);
 8009636:	4b0f      	ldr	r3, [pc, #60]	; (8009674 <wizchip_bus_write_buf+0x64>)
 8009638:	69da      	ldr	r2, [r3, #28]
 800963a:	68bb      	ldr	r3, [r7, #8]
 800963c:	1c59      	adds	r1, r3, #1
 800963e:	60b9      	str	r1, [r7, #8]
 8009640:	781b      	ldrb	r3, [r3, #0]
 8009642:	4619      	mov	r1, r3
 8009644:	68f8      	ldr	r0, [r7, #12]
 8009646:	4790      	blx	r2
      AddrSel += (uint32_t)addrinc;
 8009648:	797b      	ldrb	r3, [r7, #5]
 800964a:	68fa      	ldr	r2, [r7, #12]
 800964c:	4413      	add	r3, r2
 800964e:	60fb      	str	r3, [r7, #12]
   for( i = 0; i < len ; i++)
 8009650:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 8009654:	b29b      	uxth	r3, r3
 8009656:	3301      	adds	r3, #1
 8009658:	b29b      	uxth	r3, r3
 800965a:	82fb      	strh	r3, [r7, #22]
 800965c:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 8009660:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8009664:	429a      	cmp	r2, r3
 8009666:	dbe6      	blt.n	8009636 <wizchip_bus_write_buf+0x26>
   }

}
 8009668:	bf00      	nop
 800966a:	bf00      	nop
 800966c:	3718      	adds	r7, #24
 800966e:	46bd      	mov	sp, r7
 8009670:	bd80      	pop	{r7, pc}
 8009672:	bf00      	nop
 8009674:	20000088 	.word	0x20000088

08009678 <reg_wizchip_cs_cbfunc>:
   if(!cris_ex)   WIZCHIP.CRIS._e_x_i_t_  = wizchip_cris_exit;
   else           WIZCHIP.CRIS._e_x_i_t_  = cris_ex;
}

void reg_wizchip_cs_cbfunc(void(*cs_sel)(void), void(*cs_desel)(void))
{
 8009678:	b480      	push	{r7}
 800967a:	b083      	sub	sp, #12
 800967c:	af00      	add	r7, sp, #0
 800967e:	6078      	str	r0, [r7, #4]
 8009680:	6039      	str	r1, [r7, #0]
   if(!cs_sel)    WIZCHIP.CS._s_e_l_e_c_t_   = wizchip_cs_select;
 8009682:	687b      	ldr	r3, [r7, #4]
 8009684:	2b00      	cmp	r3, #0
 8009686:	d103      	bne.n	8009690 <reg_wizchip_cs_cbfunc+0x18>
 8009688:	4b0b      	ldr	r3, [pc, #44]	; (80096b8 <reg_wizchip_cs_cbfunc+0x40>)
 800968a:	4a0c      	ldr	r2, [pc, #48]	; (80096bc <reg_wizchip_cs_cbfunc+0x44>)
 800968c:	611a      	str	r2, [r3, #16]
 800968e:	e002      	b.n	8009696 <reg_wizchip_cs_cbfunc+0x1e>
   else           WIZCHIP.CS._s_e_l_e_c_t_   = cs_sel; 
 8009690:	4a09      	ldr	r2, [pc, #36]	; (80096b8 <reg_wizchip_cs_cbfunc+0x40>)
 8009692:	687b      	ldr	r3, [r7, #4]
 8009694:	6113      	str	r3, [r2, #16]
   if(!cs_desel)  WIZCHIP.CS._d_e_s_e_l_e_c_t_ = wizchip_cs_deselect;
 8009696:	683b      	ldr	r3, [r7, #0]
 8009698:	2b00      	cmp	r3, #0
 800969a:	d103      	bne.n	80096a4 <reg_wizchip_cs_cbfunc+0x2c>
 800969c:	4b06      	ldr	r3, [pc, #24]	; (80096b8 <reg_wizchip_cs_cbfunc+0x40>)
 800969e:	4a08      	ldr	r2, [pc, #32]	; (80096c0 <reg_wizchip_cs_cbfunc+0x48>)
 80096a0:	615a      	str	r2, [r3, #20]
   else           WIZCHIP.CS._d_e_s_e_l_e_c_t_ = cs_desel;
}
 80096a2:	e002      	b.n	80096aa <reg_wizchip_cs_cbfunc+0x32>
   else           WIZCHIP.CS._d_e_s_e_l_e_c_t_ = cs_desel;
 80096a4:	4a04      	ldr	r2, [pc, #16]	; (80096b8 <reg_wizchip_cs_cbfunc+0x40>)
 80096a6:	683b      	ldr	r3, [r7, #0]
 80096a8:	6153      	str	r3, [r2, #20]
}
 80096aa:	bf00      	nop
 80096ac:	370c      	adds	r7, #12
 80096ae:	46bd      	mov	sp, r7
 80096b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80096b4:	4770      	bx	lr
 80096b6:	bf00      	nop
 80096b8:	20000088 	.word	0x20000088
 80096bc:	08009555 	.word	0x08009555
 80096c0:	08009563 	.word	0x08009563

080096c4 <reg_wizchip_bus_cbfunc>:
#if (_WIZCHIP_IO_MODE_ & _WIZCHIP_IO_MODE_BUS_)
void reg_wizchip_bus_cbfunc( iodata_t(*bus_rd)(uint32_t addr), 
                             void (*bus_wd)(uint32_t addr, iodata_t wb),
                             void (*bus_rbuf)(uint32_t AddrSel, uint8_t* buf, datasize_t len, uint8_t inc),
                             void (*bus_wbuf)(uint32_t AddrSel, uint8_t* buf, datasize_t len, uint8_t inc) )
{
 80096c4:	b480      	push	{r7}
 80096c6:	b085      	sub	sp, #20
 80096c8:	af00      	add	r7, sp, #0
 80096ca:	60f8      	str	r0, [r7, #12]
 80096cc:	60b9      	str	r1, [r7, #8]
 80096ce:	607a      	str	r2, [r7, #4]
 80096d0:	603b      	str	r3, [r7, #0]
   while(!(WIZCHIP.if_mode & _WIZCHIP_IO_MODE_BUS_));   
 80096d2:	bf00      	nop
 80096d4:	4b19      	ldr	r3, [pc, #100]	; (800973c <reg_wizchip_bus_cbfunc+0x78>)
 80096d6:	881b      	ldrh	r3, [r3, #0]
 80096d8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80096dc:	2b00      	cmp	r3, #0
 80096de:	d0f9      	beq.n	80096d4 <reg_wizchip_bus_cbfunc+0x10>
   if(!bus_rd)  WIZCHIP.IF.BUS._read_data   = wizchip_bus_read;
 80096e0:	68fb      	ldr	r3, [r7, #12]
 80096e2:	2b00      	cmp	r3, #0
 80096e4:	d103      	bne.n	80096ee <reg_wizchip_bus_cbfunc+0x2a>
 80096e6:	4b15      	ldr	r3, [pc, #84]	; (800973c <reg_wizchip_bus_cbfunc+0x78>)
 80096e8:	4a15      	ldr	r2, [pc, #84]	; (8009740 <reg_wizchip_bus_cbfunc+0x7c>)
 80096ea:	619a      	str	r2, [r3, #24]
 80096ec:	e002      	b.n	80096f4 <reg_wizchip_bus_cbfunc+0x30>
   else         WIZCHIP.IF.BUS._read_data   = bus_rd;
 80096ee:	4a13      	ldr	r2, [pc, #76]	; (800973c <reg_wizchip_bus_cbfunc+0x78>)
 80096f0:	68fb      	ldr	r3, [r7, #12]
 80096f2:	6193      	str	r3, [r2, #24]
   if(!bus_wd)  WIZCHIP.IF.BUS._write_data  = wizchip_bus_write;
 80096f4:	68bb      	ldr	r3, [r7, #8]
 80096f6:	2b00      	cmp	r3, #0
 80096f8:	d103      	bne.n	8009702 <reg_wizchip_bus_cbfunc+0x3e>
 80096fa:	4b10      	ldr	r3, [pc, #64]	; (800973c <reg_wizchip_bus_cbfunc+0x78>)
 80096fc:	4a11      	ldr	r2, [pc, #68]	; (8009744 <reg_wizchip_bus_cbfunc+0x80>)
 80096fe:	61da      	str	r2, [r3, #28]
 8009700:	e002      	b.n	8009708 <reg_wizchip_bus_cbfunc+0x44>
   else         WIZCHIP.IF.BUS._write_data  = bus_wd;
 8009702:	4a0e      	ldr	r2, [pc, #56]	; (800973c <reg_wizchip_bus_cbfunc+0x78>)
 8009704:	68bb      	ldr	r3, [r7, #8]
 8009706:	61d3      	str	r3, [r2, #28]

   if(!bus_rbuf)  WIZCHIP.IF.BUS._read_data_buf   = wizchip_bus_read_buf;
 8009708:	687b      	ldr	r3, [r7, #4]
 800970a:	2b00      	cmp	r3, #0
 800970c:	d103      	bne.n	8009716 <reg_wizchip_bus_cbfunc+0x52>
 800970e:	4b0b      	ldr	r3, [pc, #44]	; (800973c <reg_wizchip_bus_cbfunc+0x78>)
 8009710:	4a0d      	ldr	r2, [pc, #52]	; (8009748 <reg_wizchip_bus_cbfunc+0x84>)
 8009712:	621a      	str	r2, [r3, #32]
 8009714:	e002      	b.n	800971c <reg_wizchip_bus_cbfunc+0x58>
   else           WIZCHIP.IF.BUS._read_data_buf   = bus_rbuf;
 8009716:	4a09      	ldr	r2, [pc, #36]	; (800973c <reg_wizchip_bus_cbfunc+0x78>)
 8009718:	687b      	ldr	r3, [r7, #4]
 800971a:	6213      	str	r3, [r2, #32]
   if(!bus_wbuf)  WIZCHIP.IF.BUS._write_data_buf  = wizchip_bus_write_buf;
 800971c:	683b      	ldr	r3, [r7, #0]
 800971e:	2b00      	cmp	r3, #0
 8009720:	d103      	bne.n	800972a <reg_wizchip_bus_cbfunc+0x66>
 8009722:	4b06      	ldr	r3, [pc, #24]	; (800973c <reg_wizchip_bus_cbfunc+0x78>)
 8009724:	4a09      	ldr	r2, [pc, #36]	; (800974c <reg_wizchip_bus_cbfunc+0x88>)
 8009726:	625a      	str	r2, [r3, #36]	; 0x24
   else           WIZCHIP.IF.BUS._write_data_buf  = bus_wbuf;
}
 8009728:	e002      	b.n	8009730 <reg_wizchip_bus_cbfunc+0x6c>
   else           WIZCHIP.IF.BUS._write_data_buf  = bus_wbuf;
 800972a:	4a04      	ldr	r2, [pc, #16]	; (800973c <reg_wizchip_bus_cbfunc+0x78>)
 800972c:	683b      	ldr	r3, [r7, #0]
 800972e:	6253      	str	r3, [r2, #36]	; 0x24
}
 8009730:	bf00      	nop
 8009732:	3714      	adds	r7, #20
 8009734:	46bd      	mov	sp, r7
 8009736:	f85d 7b04 	ldr.w	r7, [sp], #4
 800973a:	4770      	bx	lr
 800973c:	20000088 	.word	0x20000088
 8009740:	08009571 	.word	0x08009571
 8009744:	0800958b 	.word	0x0800958b
 8009748:	080095a9 	.word	0x080095a9
 800974c:	08009611 	.word	0x08009611

08009750 <ctlwizchip>:
   else           WIZCHIP.IF.SPI._write_byte_buf = spi_wbuf;
}
#endif

int8_t ctlwizchip(ctlwizchip_type cwtype, void* arg)
{
 8009750:	b590      	push	{r4, r7, lr}
 8009752:	b087      	sub	sp, #28
 8009754:	af00      	add	r7, sp, #0
 8009756:	4603      	mov	r3, r0
 8009758:	6039      	str	r1, [r7, #0]
 800975a:	71fb      	strb	r3, [r7, #7]
   uint8_t tmp = *(uint8_t*) arg;
 800975c:	683b      	ldr	r3, [r7, #0]
 800975e:	781b      	ldrb	r3, [r3, #0]
 8009760:	75fb      	strb	r3, [r7, #23]

   uint8_t* ptmp[2] = {0,0};
 8009762:	2300      	movs	r3, #0
 8009764:	60fb      	str	r3, [r7, #12]
 8009766:	2300      	movs	r3, #0
 8009768:	613b      	str	r3, [r7, #16]
   switch(cwtype)
 800976a:	79fb      	ldrb	r3, [r7, #7]
 800976c:	2b17      	cmp	r3, #23
 800976e:	f200 8160 	bhi.w	8009a32 <ctlwizchip+0x2e2>
 8009772:	a201      	add	r2, pc, #4	; (adr r2, 8009778 <ctlwizchip+0x28>)
 8009774:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009778:	080097d9 	.word	0x080097d9
 800977c:	08009813 	.word	0x08009813
 8009780:	0800984d 	.word	0x0800984d
 8009784:	0800985f 	.word	0x0800985f
 8009788:	08009865 	.word	0x08009865
 800978c:	08009885 	.word	0x08009885
 8009790:	08009891 	.word	0x08009891
 8009794:	0800989d 	.word	0x0800989d
 8009798:	080098a9 	.word	0x080098a9
 800979c:	080098b5 	.word	0x080098b5
 80097a0:	080098d7 	.word	0x080098d7
 80097a4:	080098f9 	.word	0x080098f9
 80097a8:	0800992f 	.word	0x0800992f
 80097ac:	08009941 	.word	0x08009941
 80097b0:	0800997b 	.word	0x0800997b
 80097b4:	0800999d 	.word	0x0800999d
 80097b8:	080099db 	.word	0x080099db
 80097bc:	080099ef 	.word	0x080099ef
 80097c0:	080099f5 	.word	0x080099f5
 80097c4:	080099fd 	.word	0x080099fd
 80097c8:	08009a05 	.word	0x08009a05
 80097cc:	08009a0d 	.word	0x08009a0d
 80097d0:	08009a17 	.word	0x08009a17
 80097d4:	08009a25 	.word	0x08009a25
   {
      case CW_SYS_LOCK:
         if(tmp & SYS_CHIP_LOCK) CHIPLOCK();
 80097d8:	7dfb      	ldrb	r3, [r7, #23]
 80097da:	f003 0304 	and.w	r3, r3, #4
 80097de:	2b00      	cmp	r3, #0
 80097e0:	d003      	beq.n	80097ea <ctlwizchip+0x9a>
 80097e2:	21ff      	movs	r1, #255	; 0xff
 80097e4:	4899      	ldr	r0, [pc, #612]	; (8009a4c <ctlwizchip+0x2fc>)
 80097e6:	f7fe fd09 	bl	80081fc <WIZCHIP_WRITE>
         if(tmp & SYS_NET_LOCK)  NETLOCK();
 80097ea:	7dfb      	ldrb	r3, [r7, #23]
 80097ec:	f003 0302 	and.w	r3, r3, #2
 80097f0:	2b00      	cmp	r3, #0
 80097f2:	d003      	beq.n	80097fc <ctlwizchip+0xac>
 80097f4:	21c5      	movs	r1, #197	; 0xc5
 80097f6:	4896      	ldr	r0, [pc, #600]	; (8009a50 <ctlwizchip+0x300>)
 80097f8:	f7fe fd00 	bl	80081fc <WIZCHIP_WRITE>
         if(tmp & SYS_PHY_LOCK)  PHYLOCK();
 80097fc:	7dfb      	ldrb	r3, [r7, #23]
 80097fe:	f003 0301 	and.w	r3, r3, #1
 8009802:	2b00      	cmp	r3, #0
 8009804:	f000 8118 	beq.w	8009a38 <ctlwizchip+0x2e8>
 8009808:	21ff      	movs	r1, #255	; 0xff
 800980a:	4892      	ldr	r0, [pc, #584]	; (8009a54 <ctlwizchip+0x304>)
 800980c:	f7fe fcf6 	bl	80081fc <WIZCHIP_WRITE>
         break;
 8009810:	e112      	b.n	8009a38 <ctlwizchip+0x2e8>
      case CW_SYS_UNLOCK:
         if(tmp & SYS_CHIP_LOCK) CHIPUNLOCK();
 8009812:	7dfb      	ldrb	r3, [r7, #23]
 8009814:	f003 0304 	and.w	r3, r3, #4
 8009818:	2b00      	cmp	r3, #0
 800981a:	d003      	beq.n	8009824 <ctlwizchip+0xd4>
 800981c:	21ce      	movs	r1, #206	; 0xce
 800981e:	488b      	ldr	r0, [pc, #556]	; (8009a4c <ctlwizchip+0x2fc>)
 8009820:	f7fe fcec 	bl	80081fc <WIZCHIP_WRITE>
         if(tmp & SYS_NET_LOCK)  NETUNLOCK();
 8009824:	7dfb      	ldrb	r3, [r7, #23]
 8009826:	f003 0302 	and.w	r3, r3, #2
 800982a:	2b00      	cmp	r3, #0
 800982c:	d003      	beq.n	8009836 <ctlwizchip+0xe6>
 800982e:	213a      	movs	r1, #58	; 0x3a
 8009830:	4887      	ldr	r0, [pc, #540]	; (8009a50 <ctlwizchip+0x300>)
 8009832:	f7fe fce3 	bl	80081fc <WIZCHIP_WRITE>
         if(tmp & SYS_PHY_LOCK)  PHYUNLOCK();
 8009836:	7dfb      	ldrb	r3, [r7, #23]
 8009838:	f003 0301 	and.w	r3, r3, #1
 800983c:	2b00      	cmp	r3, #0
 800983e:	f000 80fd 	beq.w	8009a3c <ctlwizchip+0x2ec>
 8009842:	2153      	movs	r1, #83	; 0x53
 8009844:	4883      	ldr	r0, [pc, #524]	; (8009a54 <ctlwizchip+0x304>)
 8009846:	f7fe fcd9 	bl	80081fc <WIZCHIP_WRITE>
         break;
 800984a:	e0f7      	b.n	8009a3c <ctlwizchip+0x2ec>
      case CW_GET_SYSLOCK:
         *(uint8_t*)arg = getSYSR() >> 5;
 800984c:	4882      	ldr	r0, [pc, #520]	; (8009a58 <ctlwizchip+0x308>)
 800984e:	f7fe fd03 	bl	8008258 <WIZCHIP_READ>
 8009852:	4603      	mov	r3, r0
 8009854:	095b      	lsrs	r3, r3, #5
 8009856:	b2da      	uxtb	r2, r3
 8009858:	683b      	ldr	r3, [r7, #0]
 800985a:	701a      	strb	r2, [r3, #0]
         break;
 800985c:	e0f1      	b.n	8009a42 <ctlwizchip+0x2f2>
      case CW_RESET_WIZCHIP:
         wizchip_sw_reset();
 800985e:	f000 f95b 	bl	8009b18 <wizchip_sw_reset>
         break;
 8009862:	e0ee      	b.n	8009a42 <ctlwizchip+0x2f2>
      case CW_INIT_WIZCHIP:
         if(arg != 0) 
 8009864:	683b      	ldr	r3, [r7, #0]
 8009866:	2b00      	cmp	r3, #0
 8009868:	d004      	beq.n	8009874 <ctlwizchip+0x124>
         {
            ptmp[0] = (uint8_t*)arg;
 800986a:	683b      	ldr	r3, [r7, #0]
 800986c:	60fb      	str	r3, [r7, #12]
            ptmp[1] = ptmp[0] + _WIZCHIP_SOCK_NUM_;
 800986e:	68fb      	ldr	r3, [r7, #12]
 8009870:	3308      	adds	r3, #8
 8009872:	613b      	str	r3, [r7, #16]
         }
         return wizchip_init(ptmp[0], ptmp[1]);
 8009874:	68fb      	ldr	r3, [r7, #12]
 8009876:	693a      	ldr	r2, [r7, #16]
 8009878:	4611      	mov	r1, r2
 800987a:	4618      	mov	r0, r3
 800987c:	f000 fa00 	bl	8009c80 <wizchip_init>
 8009880:	4603      	mov	r3, r0
 8009882:	e0df      	b.n	8009a44 <ctlwizchip+0x2f4>
      case CW_GET_INTERRUPT:
        *(intr_kind*)arg = wizchip_getinterrupt();
 8009884:	f000 fac8 	bl	8009e18 <wizchip_getinterrupt>
 8009888:	4602      	mov	r2, r0
 800988a:	683b      	ldr	r3, [r7, #0]
 800988c:	601a      	str	r2, [r3, #0]
         break;
 800988e:	e0d8      	b.n	8009a42 <ctlwizchip+0x2f2>
      case CW_CLR_INTERRUPT:
         wizchip_clrinterrupt(*(intr_kind*)arg);
 8009890:	683b      	ldr	r3, [r7, #0]
 8009892:	681b      	ldr	r3, [r3, #0]
 8009894:	4618      	mov	r0, r3
 8009896:	f000 fa83 	bl	8009da0 <wizchip_clrinterrupt>
         break;
 800989a:	e0d2      	b.n	8009a42 <ctlwizchip+0x2f2>
      case CW_SET_INTRMASK:
         wizchip_setinterruptmask(*(intr_kind*)arg);
 800989c:	683b      	ldr	r3, [r7, #0]
 800989e:	681b      	ldr	r3, [r3, #0]
 80098a0:	4618      	mov	r0, r3
 80098a2:	f000 fad9 	bl	8009e58 <wizchip_setinterruptmask>
         break;         
 80098a6:	e0cc      	b.n	8009a42 <ctlwizchip+0x2f2>
      case CW_GET_INTRMASK:
         *(intr_kind*)arg = wizchip_getinterruptmask();
 80098a8:	f000 fafc 	bl	8009ea4 <wizchip_getinterruptmask>
 80098ac:	4602      	mov	r2, r0
 80098ae:	683b      	ldr	r3, [r7, #0]
 80098b0:	601a      	str	r2, [r3, #0]
         break;   
 80098b2:	e0c6      	b.n	8009a42 <ctlwizchip+0x2f2>
      case CW_SET_INTRTIME:
         setINTPTMR(*(uint16_t*)arg);
 80098b4:	683b      	ldr	r3, [r7, #0]
 80098b6:	881b      	ldrh	r3, [r3, #0]
 80098b8:	0a1b      	lsrs	r3, r3, #8
 80098ba:	b29b      	uxth	r3, r3
 80098bc:	b2db      	uxtb	r3, r3
 80098be:	4619      	mov	r1, r3
 80098c0:	4866      	ldr	r0, [pc, #408]	; (8009a5c <ctlwizchip+0x30c>)
 80098c2:	f7fe fc9b 	bl	80081fc <WIZCHIP_WRITE>
 80098c6:	683b      	ldr	r3, [r7, #0]
 80098c8:	881b      	ldrh	r3, [r3, #0]
 80098ca:	b2db      	uxtb	r3, r3
 80098cc:	4619      	mov	r1, r3
 80098ce:	4864      	ldr	r0, [pc, #400]	; (8009a60 <ctlwizchip+0x310>)
 80098d0:	f7fe fc94 	bl	80081fc <WIZCHIP_WRITE>
         break;
 80098d4:	e0b5      	b.n	8009a42 <ctlwizchip+0x2f2>
      case CW_GET_INTRTIME:
         *(uint16_t*)arg = getINTPTMR();
 80098d6:	4861      	ldr	r0, [pc, #388]	; (8009a5c <ctlwizchip+0x30c>)
 80098d8:	f7fe fcbe 	bl	8008258 <WIZCHIP_READ>
 80098dc:	4603      	mov	r3, r0
 80098de:	b29b      	uxth	r3, r3
 80098e0:	021b      	lsls	r3, r3, #8
 80098e2:	b29c      	uxth	r4, r3
 80098e4:	485e      	ldr	r0, [pc, #376]	; (8009a60 <ctlwizchip+0x310>)
 80098e6:	f7fe fcb7 	bl	8008258 <WIZCHIP_READ>
 80098ea:	4603      	mov	r3, r0
 80098ec:	b29b      	uxth	r3, r3
 80098ee:	4423      	add	r3, r4
 80098f0:	b29a      	uxth	r2, r3
 80098f2:	683b      	ldr	r3, [r7, #0]
 80098f4:	801a      	strh	r2, [r3, #0]
         break;   
 80098f6:	e0a4      	b.n	8009a42 <ctlwizchip+0x2f2>
      case CW_SET_IEN:
         tmp = getSYCR1();
 80098f8:	485a      	ldr	r0, [pc, #360]	; (8009a64 <ctlwizchip+0x314>)
 80098fa:	f7fe fcad 	bl	8008258 <WIZCHIP_READ>
 80098fe:	4603      	mov	r3, r0
 8009900:	75fb      	strb	r3, [r7, #23]
         if(*(uint8_t*)arg == 1) setSYCR1(tmp | SYCR1_IEN);
 8009902:	683b      	ldr	r3, [r7, #0]
 8009904:	781b      	ldrb	r3, [r3, #0]
 8009906:	2b01      	cmp	r3, #1
 8009908:	d108      	bne.n	800991c <ctlwizchip+0x1cc>
 800990a:	7dfb      	ldrb	r3, [r7, #23]
 800990c:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8009910:	b2db      	uxtb	r3, r3
 8009912:	4619      	mov	r1, r3
 8009914:	4853      	ldr	r0, [pc, #332]	; (8009a64 <ctlwizchip+0x314>)
 8009916:	f7fe fc71 	bl	80081fc <WIZCHIP_WRITE>
         else                      setSYCR1(tmp & ~SYCR1_IEN);
         break;
 800991a:	e092      	b.n	8009a42 <ctlwizchip+0x2f2>
         else                      setSYCR1(tmp & ~SYCR1_IEN);
 800991c:	7dfb      	ldrb	r3, [r7, #23]
 800991e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8009922:	b2db      	uxtb	r3, r3
 8009924:	4619      	mov	r1, r3
 8009926:	484f      	ldr	r0, [pc, #316]	; (8009a64 <ctlwizchip+0x314>)
 8009928:	f7fe fc68 	bl	80081fc <WIZCHIP_WRITE>
         break;
 800992c:	e089      	b.n	8009a42 <ctlwizchip+0x2f2>
      case CW_GET_IEN:
         *((uint8_t*)arg) = getSYCR1() >> 7;
 800992e:	484d      	ldr	r0, [pc, #308]	; (8009a64 <ctlwizchip+0x314>)
 8009930:	f7fe fc92 	bl	8008258 <WIZCHIP_READ>
 8009934:	4603      	mov	r3, r0
 8009936:	09db      	lsrs	r3, r3, #7
 8009938:	b2da      	uxtb	r2, r3
 800993a:	683b      	ldr	r3, [r7, #0]
 800993c:	701a      	strb	r2, [r3, #0]
         break;
 800993e:	e080      	b.n	8009a42 <ctlwizchip+0x2f2>
      case CW_GET_ID:
         ((uint8_t*)arg)[0] = WIZCHIP.id[0];
 8009940:	4b49      	ldr	r3, [pc, #292]	; (8009a68 <ctlwizchip+0x318>)
 8009942:	789a      	ldrb	r2, [r3, #2]
 8009944:	683b      	ldr	r3, [r7, #0]
 8009946:	701a      	strb	r2, [r3, #0]
         ((uint8_t*)arg)[1] = WIZCHIP.id[1];
 8009948:	683b      	ldr	r3, [r7, #0]
 800994a:	3301      	adds	r3, #1
 800994c:	4a46      	ldr	r2, [pc, #280]	; (8009a68 <ctlwizchip+0x318>)
 800994e:	78d2      	ldrb	r2, [r2, #3]
 8009950:	701a      	strb	r2, [r3, #0]
         ((uint8_t*)arg)[2] = WIZCHIP.id[2];
 8009952:	683b      	ldr	r3, [r7, #0]
 8009954:	3302      	adds	r3, #2
 8009956:	4a44      	ldr	r2, [pc, #272]	; (8009a68 <ctlwizchip+0x318>)
 8009958:	7912      	ldrb	r2, [r2, #4]
 800995a:	701a      	strb	r2, [r3, #0]
         ((uint8_t*)arg)[3] = WIZCHIP.id[3];
 800995c:	683b      	ldr	r3, [r7, #0]
 800995e:	3303      	adds	r3, #3
 8009960:	4a41      	ldr	r2, [pc, #260]	; (8009a68 <ctlwizchip+0x318>)
 8009962:	7952      	ldrb	r2, [r2, #5]
 8009964:	701a      	strb	r2, [r3, #0]
         ((uint8_t*)arg)[4] = WIZCHIP.id[4];
 8009966:	683b      	ldr	r3, [r7, #0]
 8009968:	3304      	adds	r3, #4
 800996a:	4a3f      	ldr	r2, [pc, #252]	; (8009a68 <ctlwizchip+0x318>)
 800996c:	7992      	ldrb	r2, [r2, #6]
 800996e:	701a      	strb	r2, [r3, #0]
         ((uint8_t*)arg)[5] = 0;
 8009970:	683b      	ldr	r3, [r7, #0]
 8009972:	3305      	adds	r3, #5
 8009974:	2200      	movs	r2, #0
 8009976:	701a      	strb	r2, [r3, #0]
         break;   
 8009978:	e063      	b.n	8009a42 <ctlwizchip+0x2f2>
      case CW_GET_VER:
         *(uint16_t*)arg = getVER();
 800997a:	483c      	ldr	r0, [pc, #240]	; (8009a6c <ctlwizchip+0x31c>)
 800997c:	f7fe fc6c 	bl	8008258 <WIZCHIP_READ>
 8009980:	4603      	mov	r3, r0
 8009982:	b29b      	uxth	r3, r3
 8009984:	021b      	lsls	r3, r3, #8
 8009986:	b29c      	uxth	r4, r3
 8009988:	4839      	ldr	r0, [pc, #228]	; (8009a70 <ctlwizchip+0x320>)
 800998a:	f7fe fc65 	bl	8008258 <WIZCHIP_READ>
 800998e:	4603      	mov	r3, r0
 8009990:	b29b      	uxth	r3, r3
 8009992:	4423      	add	r3, r4
 8009994:	b29a      	uxth	r2, r3
 8009996:	683b      	ldr	r3, [r7, #0]
 8009998:	801a      	strh	r2, [r3, #0]
         break;
 800999a:	e052      	b.n	8009a42 <ctlwizchip+0x2f2>
      case CW_SET_SYSCLK:
         tmp = getSYCR1();
 800999c:	4831      	ldr	r0, [pc, #196]	; (8009a64 <ctlwizchip+0x314>)
 800999e:	f7fe fc5b 	bl	8008258 <WIZCHIP_READ>
 80099a2:	4603      	mov	r3, r0
 80099a4:	75fb      	strb	r3, [r7, #23]
         if(*(uint8_t*)arg == SYSCLK_100MHZ)     setSYCR1(tmp & ~SYCR1_CLKSEL);
 80099a6:	683b      	ldr	r3, [r7, #0]
 80099a8:	781b      	ldrb	r3, [r3, #0]
 80099aa:	2b00      	cmp	r3, #0
 80099ac:	d108      	bne.n	80099c0 <ctlwizchip+0x270>
 80099ae:	7dfb      	ldrb	r3, [r7, #23]
 80099b0:	f023 0301 	bic.w	r3, r3, #1
 80099b4:	b2db      	uxtb	r3, r3
 80099b6:	4619      	mov	r1, r3
 80099b8:	482a      	ldr	r0, [pc, #168]	; (8009a64 <ctlwizchip+0x314>)
 80099ba:	f7fe fc1f 	bl	80081fc <WIZCHIP_WRITE>
         else if(*(uint8_t*)arg == SYSCLK_25MHZ) setSYCR1(tmp |  SYCR1_CLKSEL);
         break;
 80099be:	e03f      	b.n	8009a40 <ctlwizchip+0x2f0>
         else if(*(uint8_t*)arg == SYSCLK_25MHZ) setSYCR1(tmp |  SYCR1_CLKSEL);
 80099c0:	683b      	ldr	r3, [r7, #0]
 80099c2:	781b      	ldrb	r3, [r3, #0]
 80099c4:	2b01      	cmp	r3, #1
 80099c6:	d13b      	bne.n	8009a40 <ctlwizchip+0x2f0>
 80099c8:	7dfb      	ldrb	r3, [r7, #23]
 80099ca:	f043 0301 	orr.w	r3, r3, #1
 80099ce:	b2db      	uxtb	r3, r3
 80099d0:	4619      	mov	r1, r3
 80099d2:	4824      	ldr	r0, [pc, #144]	; (8009a64 <ctlwizchip+0x314>)
 80099d4:	f7fe fc12 	bl	80081fc <WIZCHIP_WRITE>
         break;
 80099d8:	e032      	b.n	8009a40 <ctlwizchip+0x2f0>
      case CW_GET_SYSCLK:
         *(uint8_t*)arg = (getSYCR1() & SYCR1_CLKSEL);
 80099da:	4822      	ldr	r0, [pc, #136]	; (8009a64 <ctlwizchip+0x314>)
 80099dc:	f7fe fc3c 	bl	8008258 <WIZCHIP_READ>
 80099e0:	4603      	mov	r3, r0
 80099e2:	f003 0301 	and.w	r3, r3, #1
 80099e6:	b2da      	uxtb	r2, r3
 80099e8:	683b      	ldr	r3, [r7, #0]
 80099ea:	701a      	strb	r2, [r3, #0]
         break;
 80099ec:	e029      	b.n	8009a42 <ctlwizchip+0x2f2>
      case CW_RESET_PHY:
         wizphy_reset();
 80099ee:	f000 fa87 	bl	8009f00 <wizphy_reset>
         break;
 80099f2:	e026      	b.n	8009a42 <ctlwizchip+0x2f2>
      case CW_SET_PHYCONF:
         wizphy_setphyconf((wiz_PhyConf*)arg);
 80099f4:	6838      	ldr	r0, [r7, #0]
 80099f6:	f000 faa3 	bl	8009f40 <wizphy_setphyconf>
         break;
 80099fa:	e022      	b.n	8009a42 <ctlwizchip+0x2f2>
      case CW_GET_PHYCONF:
         wizphy_getphyconf((wiz_PhyConf*)arg);
 80099fc:	6838      	ldr	r0, [r7, #0]
 80099fe:	f000 faeb 	bl	8009fd8 <wizphy_getphyconf>
         break;
 8009a02:	e01e      	b.n	8009a42 <ctlwizchip+0x2f2>
      case CW_GET_PHYSTATUS:
         wizphy_getphystatus((wiz_PhyConf*)arg);
 8009a04:	6838      	ldr	r0, [r7, #0]
 8009a06:	f000 fb27 	bl	800a058 <wizphy_getphystatus>
         break;
 8009a0a:	e01a      	b.n	8009a42 <ctlwizchip+0x2f2>
      case CW_SET_PHYPOWMODE:
         wizphy_setphypmode(tmp);
 8009a0c:	7dfb      	ldrb	r3, [r7, #23]
 8009a0e:	4618      	mov	r0, r3
 8009a10:	f000 fb62 	bl	800a0d8 <wizphy_setphypmode>
         break;
 8009a14:	e015      	b.n	8009a42 <ctlwizchip+0x2f2>
      case CW_GET_PHYPOWMODE:
         *(uint8_t*)arg = wizphy_getphypmode();
 8009a16:	f000 fb81 	bl	800a11c <wizphy_getphypmode>
 8009a1a:	4603      	mov	r3, r0
 8009a1c:	b2da      	uxtb	r2, r3
 8009a1e:	683b      	ldr	r3, [r7, #0]
 8009a20:	701a      	strb	r2, [r3, #0]
         break;
 8009a22:	e00e      	b.n	8009a42 <ctlwizchip+0x2f2>
      case CW_GET_PHYLINK:
         *(uint8_t*)arg = wizphy_getphylink();
 8009a24:	f000 fa5e 	bl	8009ee4 <wizphy_getphylink>
 8009a28:	4603      	mov	r3, r0
 8009a2a:	b2da      	uxtb	r2, r3
 8009a2c:	683b      	ldr	r3, [r7, #0]
 8009a2e:	701a      	strb	r2, [r3, #0]
         break;
 8009a30:	e007      	b.n	8009a42 <ctlwizchip+0x2f2>
      default:
         return -1;
 8009a32:	f04f 33ff 	mov.w	r3, #4294967295
 8009a36:	e005      	b.n	8009a44 <ctlwizchip+0x2f4>
         break;
 8009a38:	bf00      	nop
 8009a3a:	e002      	b.n	8009a42 <ctlwizchip+0x2f2>
         break;
 8009a3c:	bf00      	nop
 8009a3e:	e000      	b.n	8009a42 <ctlwizchip+0x2f2>
         break;
 8009a40:	bf00      	nop
   }
   return 0;
 8009a42:	2300      	movs	r3, #0
}
 8009a44:	4618      	mov	r0, r3
 8009a46:	371c      	adds	r7, #28
 8009a48:	46bd      	mov	sp, r7
 8009a4a:	bd90      	pop	{r4, r7, pc}
 8009a4c:	6041f400 	.word	0x6041f400
 8009a50:	6041f500 	.word	0x6041f500
 8009a54:	6041f600 	.word	0x6041f600
 8009a58:	60200000 	.word	0x60200000
 8009a5c:	6041c500 	.word	0x6041c500
 8009a60:	6041c600 	.word	0x6041c600
 8009a64:	60200500 	.word	0x60200500
 8009a68:	20000088 	.word	0x20000088
 8009a6c:	60000200 	.word	0x60000200
 8009a70:	60000300 	.word	0x60000300

08009a74 <ctlnetwork>:

int8_t ctlnetwork(ctlnetwork_type cntype, void* arg)
{
 8009a74:	b580      	push	{r7, lr}
 8009a76:	b082      	sub	sp, #8
 8009a78:	af00      	add	r7, sp, #0
 8009a7a:	4603      	mov	r3, r0
 8009a7c:	6039      	str	r1, [r7, #0]
 8009a7e:	71fb      	strb	r3, [r7, #7]
   switch(cntype)
 8009a80:	79fb      	ldrb	r3, [r7, #7]
 8009a82:	2b07      	cmp	r3, #7
 8009a84:	d83d      	bhi.n	8009b02 <ctlnetwork+0x8e>
 8009a86:	a201      	add	r2, pc, #4	; (adr r2, 8009a8c <ctlnetwork+0x18>)
 8009a88:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009a8c:	08009aad 	.word	0x08009aad
 8009a90:	08009ab5 	.word	0x08009ab5
 8009a94:	08009abd 	.word	0x08009abd
 8009a98:	08009ac9 	.word	0x08009ac9
 8009a9c:	08009ad5 	.word	0x08009ad5
 8009aa0:	08009add 	.word	0x08009add
 8009aa4:	08009ae5 	.word	0x08009ae5
 8009aa8:	08009af3 	.word	0x08009af3
   {
      case CN_SET_NETINFO:
         wizchip_setnetinfo((wiz_NetInfo*)arg);
 8009aac:	6838      	ldr	r0, [r7, #0]
 8009aae:	f000 fb47 	bl	800a140 <wizchip_setnetinfo>
         break;
 8009ab2:	e029      	b.n	8009b08 <ctlnetwork+0x94>
      case CN_GET_NETINFO:
         wizchip_getnetinfo((wiz_NetInfo*)arg);
 8009ab4:	6838      	ldr	r0, [r7, #0]
 8009ab6:	f000 fbc1 	bl	800a23c <wizchip_getnetinfo>
         break;
 8009aba:	e025      	b.n	8009b08 <ctlnetwork+0x94>
      case CN_SET_NETMODE:
         wizchip_setnetmode(*(netmode_type*)arg);
 8009abc:	683b      	ldr	r3, [r7, #0]
 8009abe:	681b      	ldr	r3, [r3, #0]
 8009ac0:	4618      	mov	r0, r3
 8009ac2:	f000 fc3b 	bl	800a33c <wizchip_setnetmode>
         break;
 8009ac6:	e01f      	b.n	8009b08 <ctlnetwork+0x94>
      case CN_GET_NETMODE:
         *(netmode_type*)arg = wizchip_getnetmode();
 8009ac8:	f000 fc66 	bl	800a398 <wizchip_getnetmode>
 8009acc:	4602      	mov	r2, r0
 8009ace:	683b      	ldr	r3, [r7, #0]
 8009ad0:	601a      	str	r2, [r3, #0]
         break;
 8009ad2:	e019      	b.n	8009b08 <ctlnetwork+0x94>
      case CN_SET_TIMEOUT:
         wizchip_settimeout((wiz_NetTimeout*)arg);
 8009ad4:	6838      	ldr	r0, [r7, #0]
 8009ad6:	f000 fc8f 	bl	800a3f8 <wizchip_settimeout>
         break;
 8009ada:	e015      	b.n	8009b08 <ctlnetwork+0x94>
      case CN_GET_TIMEOUT:
         wizchip_gettimeout((wiz_NetTimeout*)arg);
 8009adc:	6838      	ldr	r0, [r7, #0]
 8009ade:	f000 fccb 	bl	800a478 <wizchip_gettimeout>
         break;
 8009ae2:	e011      	b.n	8009b08 <ctlnetwork+0x94>
      case CN_SET_PREFER:
         setSLPSR(*(uint8_t*)arg);
 8009ae4:	683b      	ldr	r3, [r7, #0]
 8009ae6:	781b      	ldrb	r3, [r3, #0]
 8009ae8:	4619      	mov	r1, r3
 8009aea:	480a      	ldr	r0, [pc, #40]	; (8009b14 <ctlnetwork+0xa0>)
 8009aec:	f7fe fb86 	bl	80081fc <WIZCHIP_WRITE>
         break;
 8009af0:	e00a      	b.n	8009b08 <ctlnetwork+0x94>
      case CN_GET_PREFER:
    	  *(uint8_t*)arg= getSLPSR();
 8009af2:	4808      	ldr	r0, [pc, #32]	; (8009b14 <ctlnetwork+0xa0>)
 8009af4:	f7fe fbb0 	bl	8008258 <WIZCHIP_READ>
 8009af8:	4603      	mov	r3, r0
 8009afa:	461a      	mov	r2, r3
 8009afc:	683b      	ldr	r3, [r7, #0]
 8009afe:	701a      	strb	r2, [r3, #0]
         break;
 8009b00:	e002      	b.n	8009b08 <ctlnetwork+0x94>
      default:
         return -1;
 8009b02:	f04f 33ff 	mov.w	r3, #4294967295
 8009b06:	e000      	b.n	8009b0a <ctlnetwork+0x96>
   }
   return 0;
 8009b08:	2300      	movs	r3, #0
}
 8009b0a:	4618      	mov	r0, r3
 8009b0c:	3708      	adds	r7, #8
 8009b0e:	46bd      	mov	sp, r7
 8009b10:	bd80      	pop	{r7, pc}
 8009b12:	bf00      	nop
 8009b14:	60212c00 	.word	0x60212c00

08009b18 <wizchip_sw_reset>:
          break;
   }
}

void wizchip_sw_reset(void)
{
 8009b18:	b580      	push	{r7, lr}
 8009b1a:	b096      	sub	sp, #88	; 0x58
 8009b1c:	af00      	add	r7, sp, #0
   uint8_t gw[4], sn[4], sip[4], gw6[16], sn6[16], lla[16], gua[16];
   uint8_t mac[6];
   uint8_t islock = getSYSR();
 8009b1e:	484c      	ldr	r0, [pc, #304]	; (8009c50 <wizchip_sw_reset+0x138>)
 8009b20:	f7fe fb9a 	bl	8008258 <WIZCHIP_READ>
 8009b24:	4603      	mov	r3, r0
 8009b26:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57

   CHIPUNLOCK();
 8009b2a:	21ce      	movs	r1, #206	; 0xce
 8009b2c:	4849      	ldr	r0, [pc, #292]	; (8009c54 <wizchip_sw_reset+0x13c>)
 8009b2e:	f7fe fb65 	bl	80081fc <WIZCHIP_WRITE>

   getSHAR(mac);
 8009b32:	463b      	mov	r3, r7
 8009b34:	2206      	movs	r2, #6
 8009b36:	4619      	mov	r1, r3
 8009b38:	4847      	ldr	r0, [pc, #284]	; (8009c58 <wizchip_sw_reset+0x140>)
 8009b3a:	f7fe fbf9 	bl	8008330 <WIZCHIP_READ_BUF>
   getGAR(gw);  getSUBR(sn);  getSIPR(sip);	getGA6R(gw6); getSUB6R(sn6); getLLAR(lla); getGUAR(gua);
 8009b3e:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8009b42:	2204      	movs	r2, #4
 8009b44:	4619      	mov	r1, r3
 8009b46:	4845      	ldr	r0, [pc, #276]	; (8009c5c <wizchip_sw_reset+0x144>)
 8009b48:	f7fe fbf2 	bl	8008330 <WIZCHIP_READ_BUF>
 8009b4c:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8009b50:	2204      	movs	r2, #4
 8009b52:	4619      	mov	r1, r3
 8009b54:	4842      	ldr	r0, [pc, #264]	; (8009c60 <wizchip_sw_reset+0x148>)
 8009b56:	f7fe fbeb 	bl	8008330 <WIZCHIP_READ_BUF>
 8009b5a:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8009b5e:	2204      	movs	r2, #4
 8009b60:	4619      	mov	r1, r3
 8009b62:	4840      	ldr	r0, [pc, #256]	; (8009c64 <wizchip_sw_reset+0x14c>)
 8009b64:	f7fe fbe4 	bl	8008330 <WIZCHIP_READ_BUF>
 8009b68:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8009b6c:	2210      	movs	r2, #16
 8009b6e:	4619      	mov	r1, r3
 8009b70:	483d      	ldr	r0, [pc, #244]	; (8009c68 <wizchip_sw_reset+0x150>)
 8009b72:	f7fe fbdd 	bl	8008330 <WIZCHIP_READ_BUF>
 8009b76:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8009b7a:	2210      	movs	r2, #16
 8009b7c:	4619      	mov	r1, r3
 8009b7e:	483b      	ldr	r0, [pc, #236]	; (8009c6c <wizchip_sw_reset+0x154>)
 8009b80:	f7fe fbd6 	bl	8008330 <WIZCHIP_READ_BUF>
 8009b84:	f107 0318 	add.w	r3, r7, #24
 8009b88:	2210      	movs	r2, #16
 8009b8a:	4619      	mov	r1, r3
 8009b8c:	4838      	ldr	r0, [pc, #224]	; (8009c70 <wizchip_sw_reset+0x158>)
 8009b8e:	f7fe fbcf 	bl	8008330 <WIZCHIP_READ_BUF>
 8009b92:	f107 0308 	add.w	r3, r7, #8
 8009b96:	2210      	movs	r2, #16
 8009b98:	4619      	mov	r1, r3
 8009b9a:	4836      	ldr	r0, [pc, #216]	; (8009c74 <wizchip_sw_reset+0x15c>)
 8009b9c:	f7fe fbc8 	bl	8008330 <WIZCHIP_READ_BUF>
   setSYCR0(SYCR0_RST);
 8009ba0:	2100      	movs	r1, #0
 8009ba2:	4835      	ldr	r0, [pc, #212]	; (8009c78 <wizchip_sw_reset+0x160>)
 8009ba4:	f7fe fb2a 	bl	80081fc <WIZCHIP_WRITE>
   getSYCR0(); // for delay
 8009ba8:	4833      	ldr	r0, [pc, #204]	; (8009c78 <wizchip_sw_reset+0x160>)
 8009baa:	f7fe fb55 	bl	8008258 <WIZCHIP_READ>

   NETUNLOCK();
 8009bae:	213a      	movs	r1, #58	; 0x3a
 8009bb0:	4832      	ldr	r0, [pc, #200]	; (8009c7c <wizchip_sw_reset+0x164>)
 8009bb2:	f7fe fb23 	bl	80081fc <WIZCHIP_WRITE>

   setSHAR(mac);
 8009bb6:	463b      	mov	r3, r7
 8009bb8:	2206      	movs	r2, #6
 8009bba:	4619      	mov	r1, r3
 8009bbc:	4826      	ldr	r0, [pc, #152]	; (8009c58 <wizchip_sw_reset+0x140>)
 8009bbe:	f7fe fb7f 	bl	80082c0 <WIZCHIP_WRITE_BUF>
   setGAR(gw);
 8009bc2:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8009bc6:	2204      	movs	r2, #4
 8009bc8:	4619      	mov	r1, r3
 8009bca:	4824      	ldr	r0, [pc, #144]	; (8009c5c <wizchip_sw_reset+0x144>)
 8009bcc:	f7fe fb78 	bl	80082c0 <WIZCHIP_WRITE_BUF>
   setSUBR(sn);
 8009bd0:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8009bd4:	2204      	movs	r2, #4
 8009bd6:	4619      	mov	r1, r3
 8009bd8:	4821      	ldr	r0, [pc, #132]	; (8009c60 <wizchip_sw_reset+0x148>)
 8009bda:	f7fe fb71 	bl	80082c0 <WIZCHIP_WRITE_BUF>
   setSIPR(sip);
 8009bde:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8009be2:	2204      	movs	r2, #4
 8009be4:	4619      	mov	r1, r3
 8009be6:	481f      	ldr	r0, [pc, #124]	; (8009c64 <wizchip_sw_reset+0x14c>)
 8009be8:	f7fe fb6a 	bl	80082c0 <WIZCHIP_WRITE_BUF>
   setGA6R(gw6); 
 8009bec:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8009bf0:	2210      	movs	r2, #16
 8009bf2:	4619      	mov	r1, r3
 8009bf4:	481c      	ldr	r0, [pc, #112]	; (8009c68 <wizchip_sw_reset+0x150>)
 8009bf6:	f7fe fb63 	bl	80082c0 <WIZCHIP_WRITE_BUF>
   setSUB6R(sn6); 
 8009bfa:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8009bfe:	2210      	movs	r2, #16
 8009c00:	4619      	mov	r1, r3
 8009c02:	481a      	ldr	r0, [pc, #104]	; (8009c6c <wizchip_sw_reset+0x154>)
 8009c04:	f7fe fb5c 	bl	80082c0 <WIZCHIP_WRITE_BUF>
   setLLAR(lla);
 8009c08:	f107 0318 	add.w	r3, r7, #24
 8009c0c:	2210      	movs	r2, #16
 8009c0e:	4619      	mov	r1, r3
 8009c10:	4817      	ldr	r0, [pc, #92]	; (8009c70 <wizchip_sw_reset+0x158>)
 8009c12:	f7fe fb55 	bl	80082c0 <WIZCHIP_WRITE_BUF>
   setGUAR(gua);
 8009c16:	f107 0308 	add.w	r3, r7, #8
 8009c1a:	2210      	movs	r2, #16
 8009c1c:	4619      	mov	r1, r3
 8009c1e:	4815      	ldr	r0, [pc, #84]	; (8009c74 <wizchip_sw_reset+0x15c>)
 8009c20:	f7fe fb4e 	bl	80082c0 <WIZCHIP_WRITE_BUF>
   if(islock & SYSR_CHPL) CHIPLOCK();
 8009c24:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
 8009c28:	2b00      	cmp	r3, #0
 8009c2a:	da03      	bge.n	8009c34 <wizchip_sw_reset+0x11c>
 8009c2c:	21ff      	movs	r1, #255	; 0xff
 8009c2e:	4809      	ldr	r0, [pc, #36]	; (8009c54 <wizchip_sw_reset+0x13c>)
 8009c30:	f7fe fae4 	bl	80081fc <WIZCHIP_WRITE>
   if(islock & SYSR_NETL) NETLOCK();
 8009c34:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8009c38:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009c3c:	2b00      	cmp	r3, #0
 8009c3e:	d003      	beq.n	8009c48 <wizchip_sw_reset+0x130>
 8009c40:	21c5      	movs	r1, #197	; 0xc5
 8009c42:	480e      	ldr	r0, [pc, #56]	; (8009c7c <wizchip_sw_reset+0x164>)
 8009c44:	f7fe fada 	bl	80081fc <WIZCHIP_WRITE>
}
 8009c48:	bf00      	nop
 8009c4a:	3758      	adds	r7, #88	; 0x58
 8009c4c:	46bd      	mov	sp, r7
 8009c4e:	bd80      	pop	{r7, pc}
 8009c50:	60200000 	.word	0x60200000
 8009c54:	6041f400 	.word	0x6041f400
 8009c58:	60412000 	.word	0x60412000
 8009c5c:	60413000 	.word	0x60413000
 8009c60:	60413400 	.word	0x60413400
 8009c64:	60413800 	.word	0x60413800
 8009c68:	60417000 	.word	0x60417000
 8009c6c:	60416000 	.word	0x60416000
 8009c70:	60414000 	.word	0x60414000
 8009c74:	60415000 	.word	0x60415000
 8009c78:	60200400 	.word	0x60200400
 8009c7c:	6041f500 	.word	0x6041f500

08009c80 <wizchip_init>:

int8_t wizchip_init(uint8_t* txsize, uint8_t* rxsize)
{
 8009c80:	b580      	push	{r7, lr}
 8009c82:	b084      	sub	sp, #16
 8009c84:	af00      	add	r7, sp, #0
 8009c86:	6078      	str	r0, [r7, #4]
 8009c88:	6039      	str	r1, [r7, #0]
   int8_t i;
   int8_t tmp = 0;
 8009c8a:	2300      	movs	r3, #0
 8009c8c:	73bb      	strb	r3, [r7, #14]
   wizchip_sw_reset();
 8009c8e:	f7ff ff43 	bl	8009b18 <wizchip_sw_reset>
   if(txsize)
 8009c92:	687b      	ldr	r3, [r7, #4]
 8009c94:	2b00      	cmp	r3, #0
 8009c96:	d03b      	beq.n	8009d10 <wizchip_init+0x90>
   {
      tmp = 0;
 8009c98:	2300      	movs	r3, #0
 8009c9a:	73bb      	strb	r3, [r7, #14]
			for(i = 0 ; i < _WIZCHIP_SOCK_NUM_; i++)
 8009c9c:	2300      	movs	r3, #0
 8009c9e:	73fb      	strb	r3, [r7, #15]
 8009ca0:	e015      	b.n	8009cce <wizchip_init+0x4e>
			{
				tmp += txsize[i];		
 8009ca2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8009ca6:	687a      	ldr	r2, [r7, #4]
 8009ca8:	4413      	add	r3, r2
 8009caa:	781a      	ldrb	r2, [r3, #0]
 8009cac:	7bbb      	ldrb	r3, [r7, #14]
 8009cae:	4413      	add	r3, r2
 8009cb0:	b2db      	uxtb	r3, r3
 8009cb2:	73bb      	strb	r3, [r7, #14]
				if(tmp > 2*_WIZCHIP_SOCK_NUM_) return -1;		
 8009cb4:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8009cb8:	2b10      	cmp	r3, #16
 8009cba:	dd02      	ble.n	8009cc2 <wizchip_init+0x42>
 8009cbc:	f04f 33ff 	mov.w	r3, #4294967295
 8009cc0:	e066      	b.n	8009d90 <wizchip_init+0x110>
			for(i = 0 ; i < _WIZCHIP_SOCK_NUM_; i++)
 8009cc2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8009cc6:	b2db      	uxtb	r3, r3
 8009cc8:	3301      	adds	r3, #1
 8009cca:	b2db      	uxtb	r3, r3
 8009ccc:	73fb      	strb	r3, [r7, #15]
 8009cce:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8009cd2:	2b07      	cmp	r3, #7
 8009cd4:	dde5      	ble.n	8009ca2 <wizchip_init+0x22>
			}
			for(i = 0 ; i < _WIZCHIP_SOCK_NUM_; i++) setSn_TXBUF_SIZE(i, txsize[i]);			
 8009cd6:	2300      	movs	r3, #0
 8009cd8:	73fb      	strb	r3, [r7, #15]
 8009cda:	e015      	b.n	8009d08 <wizchip_init+0x88>
 8009cdc:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8009ce0:	009b      	lsls	r3, r3, #2
 8009ce2:	3301      	adds	r3, #1
 8009ce4:	00da      	lsls	r2, r3, #3
 8009ce6:	4b2c      	ldr	r3, [pc, #176]	; (8009d98 <wizchip_init+0x118>)
 8009ce8:	4413      	add	r3, r2
 8009cea:	4618      	mov	r0, r3
 8009cec:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8009cf0:	687a      	ldr	r2, [r7, #4]
 8009cf2:	4413      	add	r3, r2
 8009cf4:	781b      	ldrb	r3, [r3, #0]
 8009cf6:	4619      	mov	r1, r3
 8009cf8:	f7fe fa80 	bl	80081fc <WIZCHIP_WRITE>
 8009cfc:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8009d00:	b2db      	uxtb	r3, r3
 8009d02:	3301      	adds	r3, #1
 8009d04:	b2db      	uxtb	r3, r3
 8009d06:	73fb      	strb	r3, [r7, #15]
 8009d08:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8009d0c:	2b07      	cmp	r3, #7
 8009d0e:	dde5      	ble.n	8009cdc <wizchip_init+0x5c>
   }
   if(rxsize)
 8009d10:	683b      	ldr	r3, [r7, #0]
 8009d12:	2b00      	cmp	r3, #0
 8009d14:	d03b      	beq.n	8009d8e <wizchip_init+0x10e>
   {
      tmp = 0;
 8009d16:	2300      	movs	r3, #0
 8009d18:	73bb      	strb	r3, [r7, #14]
			for(i = 0 ; i < _WIZCHIP_SOCK_NUM_; i++)
 8009d1a:	2300      	movs	r3, #0
 8009d1c:	73fb      	strb	r3, [r7, #15]
 8009d1e:	e015      	b.n	8009d4c <wizchip_init+0xcc>
			{
				tmp += rxsize[i];		
 8009d20:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8009d24:	683a      	ldr	r2, [r7, #0]
 8009d26:	4413      	add	r3, r2
 8009d28:	781a      	ldrb	r2, [r3, #0]
 8009d2a:	7bbb      	ldrb	r3, [r7, #14]
 8009d2c:	4413      	add	r3, r2
 8009d2e:	b2db      	uxtb	r3, r3
 8009d30:	73bb      	strb	r3, [r7, #14]
				if(tmp > 2*_WIZCHIP_SOCK_NUM_) return -1;		
 8009d32:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8009d36:	2b10      	cmp	r3, #16
 8009d38:	dd02      	ble.n	8009d40 <wizchip_init+0xc0>
 8009d3a:	f04f 33ff 	mov.w	r3, #4294967295
 8009d3e:	e027      	b.n	8009d90 <wizchip_init+0x110>
			for(i = 0 ; i < _WIZCHIP_SOCK_NUM_; i++)
 8009d40:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8009d44:	b2db      	uxtb	r3, r3
 8009d46:	3301      	adds	r3, #1
 8009d48:	b2db      	uxtb	r3, r3
 8009d4a:	73fb      	strb	r3, [r7, #15]
 8009d4c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8009d50:	2b07      	cmp	r3, #7
 8009d52:	dde5      	ble.n	8009d20 <wizchip_init+0xa0>
			}
			for(i = 0 ; i < _WIZCHIP_SOCK_NUM_; i++) setSn_RXBUF_SIZE(i, rxsize[i]);
 8009d54:	2300      	movs	r3, #0
 8009d56:	73fb      	strb	r3, [r7, #15]
 8009d58:	e015      	b.n	8009d86 <wizchip_init+0x106>
 8009d5a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8009d5e:	009b      	lsls	r3, r3, #2
 8009d60:	3301      	adds	r3, #1
 8009d62:	00da      	lsls	r2, r3, #3
 8009d64:	4b0d      	ldr	r3, [pc, #52]	; (8009d9c <wizchip_init+0x11c>)
 8009d66:	4413      	add	r3, r2
 8009d68:	4618      	mov	r0, r3
 8009d6a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8009d6e:	683a      	ldr	r2, [r7, #0]
 8009d70:	4413      	add	r3, r2
 8009d72:	781b      	ldrb	r3, [r3, #0]
 8009d74:	4619      	mov	r1, r3
 8009d76:	f7fe fa41 	bl	80081fc <WIZCHIP_WRITE>
 8009d7a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8009d7e:	b2db      	uxtb	r3, r3
 8009d80:	3301      	adds	r3, #1
 8009d82:	b2db      	uxtb	r3, r3
 8009d84:	73fb      	strb	r3, [r7, #15]
 8009d86:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8009d8a:	2b07      	cmp	r3, #7
 8009d8c:	dde5      	ble.n	8009d5a <wizchip_init+0xda>
   }
   return 0;
 8009d8e:	2300      	movs	r3, #0
}
 8009d90:	4618      	mov	r0, r3
 8009d92:	3710      	adds	r7, #16
 8009d94:	46bd      	mov	sp, r7
 8009d96:	bd80      	pop	{r7, pc}
 8009d98:	60020000 	.word	0x60020000
 8009d9c:	60022000 	.word	0x60022000

08009da0 <wizchip_clrinterrupt>:

void wizchip_clrinterrupt(intr_kind intr)
{
 8009da0:	b580      	push	{r7, lr}
 8009da2:	b084      	sub	sp, #16
 8009da4:	af00      	add	r7, sp, #0
 8009da6:	6078      	str	r0, [r7, #4]
   int i;
   uint8_t ir   = (uint8_t)intr;
 8009da8:	687b      	ldr	r3, [r7, #4]
 8009daa:	72fb      	strb	r3, [r7, #11]
   uint8_t sir  = (uint8_t)((uint32_t)intr >> 8);
 8009dac:	687b      	ldr	r3, [r7, #4]
 8009dae:	0a1b      	lsrs	r3, r3, #8
 8009db0:	72bb      	strb	r3, [r7, #10]
   uint8_t slir = (uint8_t)((uint32_t)intr >> 16);
 8009db2:	687b      	ldr	r3, [r7, #4]
 8009db4:	0c1b      	lsrs	r3, r3, #16
 8009db6:	727b      	strb	r3, [r7, #9]
   setIRCLR(ir);
 8009db8:	7afb      	ldrb	r3, [r7, #11]
 8009dba:	4619      	mov	r1, r3
 8009dbc:	4813      	ldr	r0, [pc, #76]	; (8009e0c <wizchip_clrinterrupt+0x6c>)
 8009dbe:	f7fe fa1d 	bl	80081fc <WIZCHIP_WRITE>
   for(i=0; i<_WIZCHIP_SOCK_NUM_; i++)
 8009dc2:	2300      	movs	r3, #0
 8009dc4:	60fb      	str	r3, [r7, #12]
 8009dc6:	e014      	b.n	8009df2 <wizchip_clrinterrupt+0x52>
   {
   	if(sir&(1<<i))   	setSn_IRCLR(i,0xFF);
 8009dc8:	7aba      	ldrb	r2, [r7, #10]
 8009dca:	68fb      	ldr	r3, [r7, #12]
 8009dcc:	fa42 f303 	asr.w	r3, r2, r3
 8009dd0:	f003 0301 	and.w	r3, r3, #1
 8009dd4:	2b00      	cmp	r3, #0
 8009dd6:	d009      	beq.n	8009dec <wizchip_clrinterrupt+0x4c>
 8009dd8:	68fb      	ldr	r3, [r7, #12]
 8009dda:	009b      	lsls	r3, r3, #2
 8009ddc:	3301      	adds	r3, #1
 8009dde:	00da      	lsls	r2, r3, #3
 8009de0:	4b0b      	ldr	r3, [pc, #44]	; (8009e10 <wizchip_clrinterrupt+0x70>)
 8009de2:	4413      	add	r3, r2
 8009de4:	21ff      	movs	r1, #255	; 0xff
 8009de6:	4618      	mov	r0, r3
 8009de8:	f7fe fa08 	bl	80081fc <WIZCHIP_WRITE>
   for(i=0; i<_WIZCHIP_SOCK_NUM_; i++)
 8009dec:	68fb      	ldr	r3, [r7, #12]
 8009dee:	3301      	adds	r3, #1
 8009df0:	60fb      	str	r3, [r7, #12]
 8009df2:	68fb      	ldr	r3, [r7, #12]
 8009df4:	2b07      	cmp	r3, #7
 8009df6:	dde7      	ble.n	8009dc8 <wizchip_clrinterrupt+0x28>
   }
   setSLIRCLR(slir);
 8009df8:	7a7b      	ldrb	r3, [r7, #9]
 8009dfa:	4619      	mov	r1, r3
 8009dfc:	4805      	ldr	r0, [pc, #20]	; (8009e14 <wizchip_clrinterrupt+0x74>)
 8009dfe:	f7fe f9fd 	bl	80081fc <WIZCHIP_WRITE>
}
 8009e02:	bf00      	nop
 8009e04:	3710      	adds	r7, #16
 8009e06:	46bd      	mov	sp, r7
 8009e08:	bd80      	pop	{r7, pc}
 8009e0a:	bf00      	nop
 8009e0c:	60210800 	.word	0x60210800
 8009e10:	60002800 	.word	0x60002800
 8009e14:	60212800 	.word	0x60212800

08009e18 <wizchip_getinterrupt>:

intr_kind wizchip_getinterrupt(void)
{
 8009e18:	b590      	push	{r4, r7, lr}
 8009e1a:	b083      	sub	sp, #12
 8009e1c:	af00      	add	r7, sp, #0
   uint32_t ret;
   ret = (((uint32_t)getSLIR())<<16) | (((uint32_t)getSIR())<<8) | (((uint32_t)getIR()));
 8009e1e:	480b      	ldr	r0, [pc, #44]	; (8009e4c <wizchip_getinterrupt+0x34>)
 8009e20:	f7fe fa1a 	bl	8008258 <WIZCHIP_READ>
 8009e24:	4603      	mov	r3, r0
 8009e26:	041c      	lsls	r4, r3, #16
 8009e28:	4809      	ldr	r0, [pc, #36]	; (8009e50 <wizchip_getinterrupt+0x38>)
 8009e2a:	f7fe fa15 	bl	8008258 <WIZCHIP_READ>
 8009e2e:	4603      	mov	r3, r0
 8009e30:	021b      	lsls	r3, r3, #8
 8009e32:	431c      	orrs	r4, r3
 8009e34:	4807      	ldr	r0, [pc, #28]	; (8009e54 <wizchip_getinterrupt+0x3c>)
 8009e36:	f7fe fa0f 	bl	8008258 <WIZCHIP_READ>
 8009e3a:	4603      	mov	r3, r0
 8009e3c:	4323      	orrs	r3, r4
 8009e3e:	607b      	str	r3, [r7, #4]
   return (intr_kind)ret;
 8009e40:	687b      	ldr	r3, [r7, #4]
}
 8009e42:	4618      	mov	r0, r3
 8009e44:	370c      	adds	r7, #12
 8009e46:	46bd      	mov	sp, r7
 8009e48:	bd90      	pop	{r4, r7, pc}
 8009e4a:	bf00      	nop
 8009e4c:	60210200 	.word	0x60210200
 8009e50:	60210100 	.word	0x60210100
 8009e54:	60210000 	.word	0x60210000

08009e58 <wizchip_setinterruptmask>:

void wizchip_setinterruptmask(intr_kind intr)
{
 8009e58:	b580      	push	{r7, lr}
 8009e5a:	b084      	sub	sp, #16
 8009e5c:	af00      	add	r7, sp, #0
 8009e5e:	6078      	str	r0, [r7, #4]
   uint8_t imr   = (uint8_t)intr;
 8009e60:	687b      	ldr	r3, [r7, #4]
 8009e62:	73fb      	strb	r3, [r7, #15]
   uint8_t simr  = (uint8_t)((uint32_t)intr >> 8);
 8009e64:	687b      	ldr	r3, [r7, #4]
 8009e66:	0a1b      	lsrs	r3, r3, #8
 8009e68:	73bb      	strb	r3, [r7, #14]
   uint8_t slimr = (uint8_t)((uint32_t)intr >> 16);
 8009e6a:	687b      	ldr	r3, [r7, #4]
 8009e6c:	0c1b      	lsrs	r3, r3, #16
 8009e6e:	737b      	strb	r3, [r7, #13]
   setIMR(imr);
 8009e70:	7bfb      	ldrb	r3, [r7, #15]
 8009e72:	4619      	mov	r1, r3
 8009e74:	4808      	ldr	r0, [pc, #32]	; (8009e98 <wizchip_setinterruptmask+0x40>)
 8009e76:	f7fe f9c1 	bl	80081fc <WIZCHIP_WRITE>
   setSIMR(simr);
 8009e7a:	7bbb      	ldrb	r3, [r7, #14]
 8009e7c:	4619      	mov	r1, r3
 8009e7e:	4807      	ldr	r0, [pc, #28]	; (8009e9c <wizchip_setinterruptmask+0x44>)
 8009e80:	f7fe f9bc 	bl	80081fc <WIZCHIP_WRITE>
   setSLIMR(slimr);
 8009e84:	7b7b      	ldrb	r3, [r7, #13]
 8009e86:	4619      	mov	r1, r3
 8009e88:	4805      	ldr	r0, [pc, #20]	; (8009ea0 <wizchip_setinterruptmask+0x48>)
 8009e8a:	f7fe f9b7 	bl	80081fc <WIZCHIP_WRITE>
}
 8009e8e:	bf00      	nop
 8009e90:	3710      	adds	r7, #16
 8009e92:	46bd      	mov	sp, r7
 8009e94:	bd80      	pop	{r7, pc}
 8009e96:	bf00      	nop
 8009e98:	60210400 	.word	0x60210400
 8009e9c:	60211400 	.word	0x60211400
 8009ea0:	60212400 	.word	0x60212400

08009ea4 <wizchip_getinterruptmask>:

intr_kind wizchip_getinterruptmask(void)
{
 8009ea4:	b590      	push	{r4, r7, lr}
 8009ea6:	b083      	sub	sp, #12
 8009ea8:	af00      	add	r7, sp, #0
   uint32_t ret;
   ret = (((uint32_t)getSLIMR())<<16) | (((uint32_t)getSIMR())<<8) | (((uint32_t)getIMR()));
 8009eaa:	480b      	ldr	r0, [pc, #44]	; (8009ed8 <wizchip_getinterruptmask+0x34>)
 8009eac:	f7fe f9d4 	bl	8008258 <WIZCHIP_READ>
 8009eb0:	4603      	mov	r3, r0
 8009eb2:	041c      	lsls	r4, r3, #16
 8009eb4:	4809      	ldr	r0, [pc, #36]	; (8009edc <wizchip_getinterruptmask+0x38>)
 8009eb6:	f7fe f9cf 	bl	8008258 <WIZCHIP_READ>
 8009eba:	4603      	mov	r3, r0
 8009ebc:	021b      	lsls	r3, r3, #8
 8009ebe:	431c      	orrs	r4, r3
 8009ec0:	4807      	ldr	r0, [pc, #28]	; (8009ee0 <wizchip_getinterruptmask+0x3c>)
 8009ec2:	f7fe f9c9 	bl	8008258 <WIZCHIP_READ>
 8009ec6:	4603      	mov	r3, r0
 8009ec8:	4323      	orrs	r3, r4
 8009eca:	607b      	str	r3, [r7, #4]
   return (intr_kind)ret;
 8009ecc:	687b      	ldr	r3, [r7, #4]
}
 8009ece:	4618      	mov	r0, r3
 8009ed0:	370c      	adds	r7, #12
 8009ed2:	46bd      	mov	sp, r7
 8009ed4:	bd90      	pop	{r4, r7, pc}
 8009ed6:	bf00      	nop
 8009ed8:	60212400 	.word	0x60212400
 8009edc:	60211400 	.word	0x60211400
 8009ee0:	60210400 	.word	0x60210400

08009ee4 <wizphy_getphylink>:

int8_t wizphy_getphylink(void)
{
 8009ee4:	b580      	push	{r7, lr}
 8009ee6:	af00      	add	r7, sp, #0
#if (_PHY_IO_MODE_ == _PHY_IO_MODE_PHYCR_)
   return (getPHYSR() & PHYSR_LNK);
 8009ee8:	4804      	ldr	r0, [pc, #16]	; (8009efc <wizphy_getphylink+0x18>)
 8009eea:	f7fe f9b5 	bl	8008258 <WIZCHIP_READ>
 8009eee:	4603      	mov	r3, r0
 8009ef0:	b25b      	sxtb	r3, r3
 8009ef2:	f003 0301 	and.w	r3, r3, #1
 8009ef6:	b25b      	sxtb	r3, r3
#elif (_PHY_IO_MODE_ == _PHY_IO_MODE_MII_)
   if(wiz_mdio_read(PHYRAR_BMSR) & BMSR_LINK_STATUS) return PHY_LINK_ON;
   return PHY_LINK_OFF;
#endif  
}
 8009ef8:	4618      	mov	r0, r3
 8009efa:	bd80      	pop	{r7, pc}
 8009efc:	60300000 	.word	0x60300000

08009f00 <wizphy_reset>:

void wizphy_reset(void)
{
 8009f00:	b580      	push	{r7, lr}
 8009f02:	b082      	sub	sp, #8
 8009f04:	af00      	add	r7, sp, #0
#if (_PHY_IO_MODE_ == _PHY_IO_MODE_PHYCR_)
   uint8_t tmp = getPHYCR1() | PHYCR1_RST;
 8009f06:	480c      	ldr	r0, [pc, #48]	; (8009f38 <wizphy_reset+0x38>)
 8009f08:	f7fe f9a6 	bl	8008258 <WIZCHIP_READ>
 8009f0c:	4603      	mov	r3, r0
 8009f0e:	f043 0301 	orr.w	r3, r3, #1
 8009f12:	71fb      	strb	r3, [r7, #7]
   PHYUNLOCK();
 8009f14:	2153      	movs	r1, #83	; 0x53
 8009f16:	4809      	ldr	r0, [pc, #36]	; (8009f3c <wizphy_reset+0x3c>)
 8009f18:	f7fe f970 	bl	80081fc <WIZCHIP_WRITE>
   setPHYCR1(tmp);
 8009f1c:	79fb      	ldrb	r3, [r7, #7]
 8009f1e:	4619      	mov	r1, r3
 8009f20:	4805      	ldr	r0, [pc, #20]	; (8009f38 <wizphy_reset+0x38>)
 8009f22:	f7fe f96b 	bl	80081fc <WIZCHIP_WRITE>
   PHYLOCK();
 8009f26:	21ff      	movs	r1, #255	; 0xff
 8009f28:	4804      	ldr	r0, [pc, #16]	; (8009f3c <wizphy_reset+0x3c>)
 8009f2a:	f7fe f967 	bl	80081fc <WIZCHIP_WRITE>
#elif (_PHY_IO_MODE_ == _PHY_IO_MODE_MII_)
	wiz_mdio_write(PHYRAR_BMCR, wiz_mdio_read(PHYRAR_BMCR) | BMCR_RST);
	while(wiz_mdio_read(PHYRAR_BMCR) & BMCR_RST);
#endif
}
 8009f2e:	bf00      	nop
 8009f30:	3708      	adds	r7, #8
 8009f32:	46bd      	mov	sp, r7
 8009f34:	bd80      	pop	{r7, pc}
 8009f36:	bf00      	nop
 8009f38:	60301d00 	.word	0x60301d00
 8009f3c:	6041f600 	.word	0x6041f600

08009f40 <wizphy_setphyconf>:

void wizphy_setphyconf(wiz_PhyConf* phyconf)
{
 8009f40:	b580      	push	{r7, lr}
 8009f42:	b084      	sub	sp, #16
 8009f44:	af00      	add	r7, sp, #0
 8009f46:	6078      	str	r0, [r7, #4]
#if (_PHY_IO_MODE_ == _PHY_IO_MODE_PHYCR_)
   uint8_t tmp = 0;
 8009f48:	2300      	movs	r3, #0
 8009f4a:	73fb      	strb	r3, [r7, #15]
   if(phyconf->mode == PHY_MODE_TE)
 8009f4c:	687b      	ldr	r3, [r7, #4]
 8009f4e:	781b      	ldrb	r3, [r3, #0]
 8009f50:	2b02      	cmp	r3, #2
 8009f52:	d10d      	bne.n	8009f70 <wizphy_setphyconf+0x30>
   {
      setPHYCR1(getPHYCR1() | PHYCR1_TE);
 8009f54:	481e      	ldr	r0, [pc, #120]	; (8009fd0 <wizphy_setphyconf+0x90>)
 8009f56:	f7fe f97f 	bl	8008258 <WIZCHIP_READ>
 8009f5a:	4603      	mov	r3, r0
 8009f5c:	f043 0308 	orr.w	r3, r3, #8
 8009f60:	b2db      	uxtb	r3, r3
 8009f62:	4619      	mov	r1, r3
 8009f64:	481a      	ldr	r0, [pc, #104]	; (8009fd0 <wizphy_setphyconf+0x90>)
 8009f66:	f7fe f949 	bl	80081fc <WIZCHIP_WRITE>
      tmp = PHYCR0_AUTO;
 8009f6a:	2300      	movs	r3, #0
 8009f6c:	73fb      	strb	r3, [r7, #15]
 8009f6e:	e025      	b.n	8009fbc <wizphy_setphyconf+0x7c>
   }
   else
   {
      setPHYCR1(getPHYCR1() & ~PHYCR1_TE);
 8009f70:	4817      	ldr	r0, [pc, #92]	; (8009fd0 <wizphy_setphyconf+0x90>)
 8009f72:	f7fe f971 	bl	8008258 <WIZCHIP_READ>
 8009f76:	4603      	mov	r3, r0
 8009f78:	f023 0308 	bic.w	r3, r3, #8
 8009f7c:	b2db      	uxtb	r3, r3
 8009f7e:	4619      	mov	r1, r3
 8009f80:	4813      	ldr	r0, [pc, #76]	; (8009fd0 <wizphy_setphyconf+0x90>)
 8009f82:	f7fe f93b 	bl	80081fc <WIZCHIP_WRITE>
      if(phyconf->mode == PHY_MODE_AUTONEGO) tmp = PHYCR0_AUTO;
 8009f86:	687b      	ldr	r3, [r7, #4]
 8009f88:	781b      	ldrb	r3, [r3, #0]
 8009f8a:	2b01      	cmp	r3, #1
 8009f8c:	d102      	bne.n	8009f94 <wizphy_setphyconf+0x54>
 8009f8e:	2300      	movs	r3, #0
 8009f90:	73fb      	strb	r3, [r7, #15]
 8009f92:	e013      	b.n	8009fbc <wizphy_setphyconf+0x7c>
      else
      {
         tmp |= 0x04;
 8009f94:	7bfb      	ldrb	r3, [r7, #15]
 8009f96:	f043 0304 	orr.w	r3, r3, #4
 8009f9a:	73fb      	strb	r3, [r7, #15]
         if(phyconf->speed  == PHY_SPEED_10)    tmp |= 0x02;
 8009f9c:	687b      	ldr	r3, [r7, #4]
 8009f9e:	785b      	ldrb	r3, [r3, #1]
 8009fa0:	2b00      	cmp	r3, #0
 8009fa2:	d103      	bne.n	8009fac <wizphy_setphyconf+0x6c>
 8009fa4:	7bfb      	ldrb	r3, [r7, #15]
 8009fa6:	f043 0302 	orr.w	r3, r3, #2
 8009faa:	73fb      	strb	r3, [r7, #15]
         if(phyconf->duplex == PHY_DUPLEX_HALF) tmp |= 0x01;
 8009fac:	687b      	ldr	r3, [r7, #4]
 8009fae:	789b      	ldrb	r3, [r3, #2]
 8009fb0:	2b00      	cmp	r3, #0
 8009fb2:	d103      	bne.n	8009fbc <wizphy_setphyconf+0x7c>
 8009fb4:	7bfb      	ldrb	r3, [r7, #15]
 8009fb6:	f043 0301 	orr.w	r3, r3, #1
 8009fba:	73fb      	strb	r3, [r7, #15]
      }
   }
   setPHYCR0(tmp);
 8009fbc:	7bfb      	ldrb	r3, [r7, #15]
 8009fbe:	4619      	mov	r1, r3
 8009fc0:	4804      	ldr	r0, [pc, #16]	; (8009fd4 <wizphy_setphyconf+0x94>)
 8009fc2:	f7fe f91b 	bl	80081fc <WIZCHIP_WRITE>
         if(phyconf->speed == PHY_SPEED_100)    tmp |= BMCR_SPD;
      }
      wiz_mdio_write(PHYRAR_BMCR, tmp);
   }
#endif   
}
 8009fc6:	bf00      	nop
 8009fc8:	3710      	adds	r7, #16
 8009fca:	46bd      	mov	sp, r7
 8009fcc:	bd80      	pop	{r7, pc}
 8009fce:	bf00      	nop
 8009fd0:	60301d00 	.word	0x60301d00
 8009fd4:	60301c00 	.word	0x60301c00

08009fd8 <wizphy_getphyconf>:

void wizphy_getphyconf(wiz_PhyConf* phyconf)
{
 8009fd8:	b580      	push	{r7, lr}
 8009fda:	b084      	sub	sp, #16
 8009fdc:	af00      	add	r7, sp, #0
 8009fde:	6078      	str	r0, [r7, #4]
#if (_PHY_IO_MODE_ == _PHY_IO_MODE_PHYCR_)
   uint8_t tmp = 0;
 8009fe0:	2300      	movs	r3, #0
 8009fe2:	73fb      	strb	r3, [r7, #15]
   tmp = getPHYSR();
 8009fe4:	481a      	ldr	r0, [pc, #104]	; (800a050 <wizphy_getphyconf+0x78>)
 8009fe6:	f7fe f937 	bl	8008258 <WIZCHIP_READ>
 8009fea:	4603      	mov	r3, r0
 8009fec:	73fb      	strb	r3, [r7, #15]
   if(getPHYCR1() & PHYCR1_TE) phyconf->mode = PHY_MODE_TE;
 8009fee:	4819      	ldr	r0, [pc, #100]	; (800a054 <wizphy_getphyconf+0x7c>)
 8009ff0:	f7fe f932 	bl	8008258 <WIZCHIP_READ>
 8009ff4:	4603      	mov	r3, r0
 8009ff6:	f003 0308 	and.w	r3, r3, #8
 8009ffa:	2b00      	cmp	r3, #0
 8009ffc:	d003      	beq.n	800a006 <wizphy_getphyconf+0x2e>
 8009ffe:	687b      	ldr	r3, [r7, #4]
 800a000:	2202      	movs	r2, #2
 800a002:	701a      	strb	r2, [r3, #0]
 800a004:	e00a      	b.n	800a01c <wizphy_getphyconf+0x44>
   else                        phyconf->mode = (tmp & (1<<5)) ? PHY_MODE_MANUAL : PHY_MODE_AUTONEGO ;
 800a006:	7bfb      	ldrb	r3, [r7, #15]
 800a008:	f003 0320 	and.w	r3, r3, #32
 800a00c:	2b00      	cmp	r3, #0
 800a00e:	bf0c      	ite	eq
 800a010:	2301      	moveq	r3, #1
 800a012:	2300      	movne	r3, #0
 800a014:	b2db      	uxtb	r3, r3
 800a016:	461a      	mov	r2, r3
 800a018:	687b      	ldr	r3, [r7, #4]
 800a01a:	701a      	strb	r2, [r3, #0]
   phyconf->speed  = (tmp & (1<<4)) ? PHY_SPEED_10    : PHY_SPEED_100;
 800a01c:	7bfb      	ldrb	r3, [r7, #15]
 800a01e:	f003 0310 	and.w	r3, r3, #16
 800a022:	2b00      	cmp	r3, #0
 800a024:	bf0c      	ite	eq
 800a026:	2301      	moveq	r3, #1
 800a028:	2300      	movne	r3, #0
 800a02a:	b2db      	uxtb	r3, r3
 800a02c:	461a      	mov	r2, r3
 800a02e:	687b      	ldr	r3, [r7, #4]
 800a030:	705a      	strb	r2, [r3, #1]
   phyconf->duplex = (tmp & (1<<3)) ? PHY_DUPLEX_HALF : PHY_DUPLEX_FULL;
 800a032:	7bfb      	ldrb	r3, [r7, #15]
 800a034:	f003 0308 	and.w	r3, r3, #8
 800a038:	2b00      	cmp	r3, #0
 800a03a:	bf0c      	ite	eq
 800a03c:	2301      	moveq	r3, #1
 800a03e:	2300      	movne	r3, #0
 800a040:	b2db      	uxtb	r3, r3
 800a042:	461a      	mov	r2, r3
 800a044:	687b      	ldr	r3, [r7, #4]
 800a046:	709a      	strb	r2, [r3, #2]
   if(getPHYCR1() & PHYCR1_TE) phyconf->mode = PHY_MODE_TE;
   else phyconf->mode   = (tmp & BMCR_ANE) ? PHY_MODE_AUTONEGO : PHY_MODE_MANUAL;
   phyconf->duplex = (tmp & BMCR_DPX) ? PHY_DUPLEX_FULL   : PHY_DUPLEX_HALF;
   phyconf->speed  = (tmp & BMCR_SPD) ? PHY_SPEED_100     : PHY_SPEED_10;
#endif
}
 800a048:	bf00      	nop
 800a04a:	3710      	adds	r7, #16
 800a04c:	46bd      	mov	sp, r7
 800a04e:	bd80      	pop	{r7, pc}
 800a050:	60300000 	.word	0x60300000
 800a054:	60301d00 	.word	0x60301d00

0800a058 <wizphy_getphystatus>:

void wizphy_getphystatus(wiz_PhyConf* phyconf)
{
 800a058:	b580      	push	{r7, lr}
 800a05a:	b084      	sub	sp, #16
 800a05c:	af00      	add	r7, sp, #0
 800a05e:	6078      	str	r0, [r7, #4]
   uint8_t tmp = 0;
 800a060:	2300      	movs	r3, #0
 800a062:	73fb      	strb	r3, [r7, #15]
   tmp = getPHYSR();
 800a064:	481a      	ldr	r0, [pc, #104]	; (800a0d0 <wizphy_getphystatus+0x78>)
 800a066:	f7fe f8f7 	bl	8008258 <WIZCHIP_READ>
 800a06a:	4603      	mov	r3, r0
 800a06c:	73fb      	strb	r3, [r7, #15]
   if(getPHYCR1() & PHYCR1_TE) phyconf->mode = PHY_MODE_TE;
 800a06e:	4819      	ldr	r0, [pc, #100]	; (800a0d4 <wizphy_getphystatus+0x7c>)
 800a070:	f7fe f8f2 	bl	8008258 <WIZCHIP_READ>
 800a074:	4603      	mov	r3, r0
 800a076:	f003 0308 	and.w	r3, r3, #8
 800a07a:	2b00      	cmp	r3, #0
 800a07c:	d003      	beq.n	800a086 <wizphy_getphystatus+0x2e>
 800a07e:	687b      	ldr	r3, [r7, #4]
 800a080:	2202      	movs	r2, #2
 800a082:	701a      	strb	r2, [r3, #0]
 800a084:	e00a      	b.n	800a09c <wizphy_getphystatus+0x44>
   else phyconf->mode   = (tmp & (1<<5))    ? PHY_MODE_MANUAL : PHY_MODE_AUTONEGO ;
 800a086:	7bfb      	ldrb	r3, [r7, #15]
 800a088:	f003 0320 	and.w	r3, r3, #32
 800a08c:	2b00      	cmp	r3, #0
 800a08e:	bf0c      	ite	eq
 800a090:	2301      	moveq	r3, #1
 800a092:	2300      	movne	r3, #0
 800a094:	b2db      	uxtb	r3, r3
 800a096:	461a      	mov	r2, r3
 800a098:	687b      	ldr	r3, [r7, #4]
 800a09a:	701a      	strb	r2, [r3, #0]
   phyconf->speed  = (tmp & PHYSR_SPD) ? PHY_SPEED_10    : PHY_SPEED_100;
 800a09c:	7bfb      	ldrb	r3, [r7, #15]
 800a09e:	f003 0302 	and.w	r3, r3, #2
 800a0a2:	2b00      	cmp	r3, #0
 800a0a4:	bf0c      	ite	eq
 800a0a6:	2301      	moveq	r3, #1
 800a0a8:	2300      	movne	r3, #0
 800a0aa:	b2db      	uxtb	r3, r3
 800a0ac:	461a      	mov	r2, r3
 800a0ae:	687b      	ldr	r3, [r7, #4]
 800a0b0:	705a      	strb	r2, [r3, #1]
   phyconf->duplex = (tmp & PHYSR_DPX) ? PHY_DUPLEX_HALF : PHY_DUPLEX_FULL;
 800a0b2:	7bfb      	ldrb	r3, [r7, #15]
 800a0b4:	f003 0304 	and.w	r3, r3, #4
 800a0b8:	2b00      	cmp	r3, #0
 800a0ba:	bf0c      	ite	eq
 800a0bc:	2301      	moveq	r3, #1
 800a0be:	2300      	movne	r3, #0
 800a0c0:	b2db      	uxtb	r3, r3
 800a0c2:	461a      	mov	r2, r3
 800a0c4:	687b      	ldr	r3, [r7, #4]
 800a0c6:	709a      	strb	r2, [r3, #2]
}
 800a0c8:	bf00      	nop
 800a0ca:	3710      	adds	r7, #16
 800a0cc:	46bd      	mov	sp, r7
 800a0ce:	bd80      	pop	{r7, pc}
 800a0d0:	60300000 	.word	0x60300000
 800a0d4:	60301d00 	.word	0x60301d00

0800a0d8 <wizphy_setphypmode>:

void wizphy_setphypmode(uint8_t pmode)
{
 800a0d8:	b580      	push	{r7, lr}
 800a0da:	b084      	sub	sp, #16
 800a0dc:	af00      	add	r7, sp, #0
 800a0de:	4603      	mov	r3, r0
 800a0e0:	71fb      	strb	r3, [r7, #7]
#if (_PHY_IO_MODE_ == _PHY_IO_MODE_PHYCR_)
   uint8_t tmp = getPHYCR1();
 800a0e2:	480d      	ldr	r0, [pc, #52]	; (800a118 <wizphy_setphypmode+0x40>)
 800a0e4:	f7fe f8b8 	bl	8008258 <WIZCHIP_READ>
 800a0e8:	4603      	mov	r3, r0
 800a0ea:	73fb      	strb	r3, [r7, #15]
   if (pmode == PHY_POWER_DOWN)    tmp |= PHYCR1_PWDN;
 800a0ec:	79fb      	ldrb	r3, [r7, #7]
 800a0ee:	2b01      	cmp	r3, #1
 800a0f0:	d104      	bne.n	800a0fc <wizphy_setphypmode+0x24>
 800a0f2:	7bfb      	ldrb	r3, [r7, #15]
 800a0f4:	f043 0320 	orr.w	r3, r3, #32
 800a0f8:	73fb      	strb	r3, [r7, #15]
 800a0fa:	e003      	b.n	800a104 <wizphy_setphypmode+0x2c>
   else                            tmp &= ~PHYCR1_PWDN;
 800a0fc:	7bfb      	ldrb	r3, [r7, #15]
 800a0fe:	f023 0320 	bic.w	r3, r3, #32
 800a102:	73fb      	strb	r3, [r7, #15]
   setPHYCR1(tmp);
 800a104:	7bfb      	ldrb	r3, [r7, #15]
 800a106:	4619      	mov	r1, r3
 800a108:	4803      	ldr	r0, [pc, #12]	; (800a118 <wizphy_setphypmode+0x40>)
 800a10a:	f7fe f877 	bl	80081fc <WIZCHIP_WRITE>
   tmp = wiz_mdio_read(PHYRAR_BMCR);
   if (pmode == PHY_POWER_DOWN)    tmp |= BMCR_PWDN;
   else                            tmp &= ~BMCR_PWDN;
   wiz_mdio_write(PHYRAR_BMCR, tmp);
#endif   
}
 800a10e:	bf00      	nop
 800a110:	3710      	adds	r7, #16
 800a112:	46bd      	mov	sp, r7
 800a114:	bd80      	pop	{r7, pc}
 800a116:	bf00      	nop
 800a118:	60301d00 	.word	0x60301d00

0800a11c <wizphy_getphypmode>:

int8_t wizphy_getphypmode(void)
{
 800a11c:	b580      	push	{r7, lr}
 800a11e:	af00      	add	r7, sp, #0
#if (_PHY_IO_MODE_ == _PHY_IO_MODE_PHYCR_)
   if (getPHYCR1() & PHYCR1_PWDN)              return PHY_POWER_DOWN;
 800a120:	4806      	ldr	r0, [pc, #24]	; (800a13c <wizphy_getphypmode+0x20>)
 800a122:	f7fe f899 	bl	8008258 <WIZCHIP_READ>
 800a126:	4603      	mov	r3, r0
 800a128:	f003 0320 	and.w	r3, r3, #32
 800a12c:	2b00      	cmp	r3, #0
 800a12e:	d001      	beq.n	800a134 <wizphy_getphypmode+0x18>
 800a130:	2301      	movs	r3, #1
 800a132:	e000      	b.n	800a136 <wizphy_getphypmode+0x1a>
#elif (_PHY_IO_MODE_ == _PHY_IO_MODE_MII_)
   if (wiz_mdio_read(PHYRAR_BMCR) & BMCR_PWDN) return PHY_POWER_DOWN;
#endif   
   return PHY_POWER_NORM;
 800a134:	2300      	movs	r3, #0
}
 800a136:	4618      	mov	r0, r3
 800a138:	bd80      	pop	{r7, pc}
 800a13a:	bf00      	nop
 800a13c:	60301d00 	.word	0x60301d00

0800a140 <wizchip_setnetinfo>:

void wizchip_setnetinfo(wiz_NetInfo* pnetinfo)
{
 800a140:	b580      	push	{r7, lr}
 800a142:	b084      	sub	sp, #16
 800a144:	af00      	add	r7, sp, #0
 800a146:	6078      	str	r0, [r7, #4]
   uint8_t i=0;
 800a148:	2300      	movs	r3, #0
 800a14a:	73fb      	strb	r3, [r7, #15]
   setSHAR(pnetinfo->mac);
 800a14c:	687b      	ldr	r3, [r7, #4]
 800a14e:	2206      	movs	r2, #6
 800a150:	4619      	mov	r1, r3
 800a152:	482f      	ldr	r0, [pc, #188]	; (800a210 <wizchip_setnetinfo+0xd0>)
 800a154:	f7fe f8b4 	bl	80082c0 <WIZCHIP_WRITE_BUF>
   setGAR(pnetinfo->gw);
 800a158:	687b      	ldr	r3, [r7, #4]
 800a15a:	330e      	adds	r3, #14
 800a15c:	2204      	movs	r2, #4
 800a15e:	4619      	mov	r1, r3
 800a160:	482c      	ldr	r0, [pc, #176]	; (800a214 <wizchip_setnetinfo+0xd4>)
 800a162:	f7fe f8ad 	bl	80082c0 <WIZCHIP_WRITE_BUF>
   setSUBR(pnetinfo->sn);
 800a166:	687b      	ldr	r3, [r7, #4]
 800a168:	330a      	adds	r3, #10
 800a16a:	2204      	movs	r2, #4
 800a16c:	4619      	mov	r1, r3
 800a16e:	482a      	ldr	r0, [pc, #168]	; (800a218 <wizchip_setnetinfo+0xd8>)
 800a170:	f7fe f8a6 	bl	80082c0 <WIZCHIP_WRITE_BUF>
   setSIPR(pnetinfo->ip);   
 800a174:	687b      	ldr	r3, [r7, #4]
 800a176:	3306      	adds	r3, #6
 800a178:	2204      	movs	r2, #4
 800a17a:	4619      	mov	r1, r3
 800a17c:	4827      	ldr	r0, [pc, #156]	; (800a21c <wizchip_setnetinfo+0xdc>)
 800a17e:	f7fe f89f 	bl	80082c0 <WIZCHIP_WRITE_BUF>
   setGA6R(pnetinfo->gw6);
 800a182:	687b      	ldr	r3, [r7, #4]
 800a184:	3342      	adds	r3, #66	; 0x42
 800a186:	2210      	movs	r2, #16
 800a188:	4619      	mov	r1, r3
 800a18a:	4825      	ldr	r0, [pc, #148]	; (800a220 <wizchip_setnetinfo+0xe0>)
 800a18c:	f7fe f898 	bl	80082c0 <WIZCHIP_WRITE_BUF>
   setSUB6R(pnetinfo->sn6);
 800a190:	687b      	ldr	r3, [r7, #4]
 800a192:	3332      	adds	r3, #50	; 0x32
 800a194:	2210      	movs	r2, #16
 800a196:	4619      	mov	r1, r3
 800a198:	4822      	ldr	r0, [pc, #136]	; (800a224 <wizchip_setnetinfo+0xe4>)
 800a19a:	f7fe f891 	bl	80082c0 <WIZCHIP_WRITE_BUF>
   setLLAR(pnetinfo->lla);
 800a19e:	687b      	ldr	r3, [r7, #4]
 800a1a0:	3312      	adds	r3, #18
 800a1a2:	2210      	movs	r2, #16
 800a1a4:	4619      	mov	r1, r3
 800a1a6:	4820      	ldr	r0, [pc, #128]	; (800a228 <wizchip_setnetinfo+0xe8>)
 800a1a8:	f7fe f88a 	bl	80082c0 <WIZCHIP_WRITE_BUF>
   setGUAR(pnetinfo->gua);
 800a1ac:	687b      	ldr	r3, [r7, #4]
 800a1ae:	3322      	adds	r3, #34	; 0x22
 800a1b0:	2210      	movs	r2, #16
 800a1b2:	4619      	mov	r1, r3
 800a1b4:	481d      	ldr	r0, [pc, #116]	; (800a22c <wizchip_setnetinfo+0xec>)
 800a1b6:	f7fe f883 	bl	80082c0 <WIZCHIP_WRITE_BUF>

   for(i=0; i<4; i++)  _DNS_[i]  = pnetinfo->dns[i];
 800a1ba:	2300      	movs	r3, #0
 800a1bc:	73fb      	strb	r3, [r7, #15]
 800a1be:	e00a      	b.n	800a1d6 <wizchip_setnetinfo+0x96>
 800a1c0:	7bfa      	ldrb	r2, [r7, #15]
 800a1c2:	7bfb      	ldrb	r3, [r7, #15]
 800a1c4:	6879      	ldr	r1, [r7, #4]
 800a1c6:	440a      	add	r2, r1
 800a1c8:	f892 1052 	ldrb.w	r1, [r2, #82]	; 0x52
 800a1cc:	4a18      	ldr	r2, [pc, #96]	; (800a230 <wizchip_setnetinfo+0xf0>)
 800a1ce:	54d1      	strb	r1, [r2, r3]
 800a1d0:	7bfb      	ldrb	r3, [r7, #15]
 800a1d2:	3301      	adds	r3, #1
 800a1d4:	73fb      	strb	r3, [r7, #15]
 800a1d6:	7bfb      	ldrb	r3, [r7, #15]
 800a1d8:	2b03      	cmp	r3, #3
 800a1da:	d9f1      	bls.n	800a1c0 <wizchip_setnetinfo+0x80>
   for(i=0; i<16; i++) _DNS6_[i] = pnetinfo->dns6[i];
 800a1dc:	2300      	movs	r3, #0
 800a1de:	73fb      	strb	r3, [r7, #15]
 800a1e0:	e00a      	b.n	800a1f8 <wizchip_setnetinfo+0xb8>
 800a1e2:	7bfa      	ldrb	r2, [r7, #15]
 800a1e4:	7bfb      	ldrb	r3, [r7, #15]
 800a1e6:	6879      	ldr	r1, [r7, #4]
 800a1e8:	440a      	add	r2, r1
 800a1ea:	f892 1056 	ldrb.w	r1, [r2, #86]	; 0x56
 800a1ee:	4a11      	ldr	r2, [pc, #68]	; (800a234 <wizchip_setnetinfo+0xf4>)
 800a1f0:	54d1      	strb	r1, [r2, r3]
 800a1f2:	7bfb      	ldrb	r3, [r7, #15]
 800a1f4:	3301      	adds	r3, #1
 800a1f6:	73fb      	strb	r3, [r7, #15]
 800a1f8:	7bfb      	ldrb	r3, [r7, #15]
 800a1fa:	2b0f      	cmp	r3, #15
 800a1fc:	d9f1      	bls.n	800a1e2 <wizchip_setnetinfo+0xa2>

   _IPMODE_   = pnetinfo->ipmode;
 800a1fe:	687b      	ldr	r3, [r7, #4]
 800a200:	f893 2066 	ldrb.w	r2, [r3, #102]	; 0x66
 800a204:	4b0c      	ldr	r3, [pc, #48]	; (800a238 <wizchip_setnetinfo+0xf8>)
 800a206:	701a      	strb	r2, [r3, #0]
}
 800a208:	bf00      	nop
 800a20a:	3710      	adds	r7, #16
 800a20c:	46bd      	mov	sp, r7
 800a20e:	bd80      	pop	{r7, pc}
 800a210:	60412000 	.word	0x60412000
 800a214:	60413000 	.word	0x60413000
 800a218:	60413400 	.word	0x60413400
 800a21c:	60413800 	.word	0x60413800
 800a220:	60417000 	.word	0x60417000
 800a224:	60416000 	.word	0x60416000
 800a228:	60414000 	.word	0x60414000
 800a22c:	60415000 	.word	0x60415000
 800a230:	200006ac 	.word	0x200006ac
 800a234:	200006b0 	.word	0x200006b0
 800a238:	200006c0 	.word	0x200006c0

0800a23c <wizchip_getnetinfo>:

void wizchip_getnetinfo(wiz_NetInfo* pnetinfo)
{
 800a23c:	b580      	push	{r7, lr}
 800a23e:	b084      	sub	sp, #16
 800a240:	af00      	add	r7, sp, #0
 800a242:	6078      	str	r0, [r7, #4]
   uint8_t i = 0;
 800a244:	2300      	movs	r3, #0
 800a246:	73fb      	strb	r3, [r7, #15]
   getSHAR(pnetinfo->mac);
 800a248:	687b      	ldr	r3, [r7, #4]
 800a24a:	2206      	movs	r2, #6
 800a24c:	4619      	mov	r1, r3
 800a24e:	4830      	ldr	r0, [pc, #192]	; (800a310 <wizchip_getnetinfo+0xd4>)
 800a250:	f7fe f86e 	bl	8008330 <WIZCHIP_READ_BUF>

   getGAR(pnetinfo->gw);
 800a254:	687b      	ldr	r3, [r7, #4]
 800a256:	330e      	adds	r3, #14
 800a258:	2204      	movs	r2, #4
 800a25a:	4619      	mov	r1, r3
 800a25c:	482d      	ldr	r0, [pc, #180]	; (800a314 <wizchip_getnetinfo+0xd8>)
 800a25e:	f7fe f867 	bl	8008330 <WIZCHIP_READ_BUF>
   getSUBR(pnetinfo->sn);
 800a262:	687b      	ldr	r3, [r7, #4]
 800a264:	330a      	adds	r3, #10
 800a266:	2204      	movs	r2, #4
 800a268:	4619      	mov	r1, r3
 800a26a:	482b      	ldr	r0, [pc, #172]	; (800a318 <wizchip_getnetinfo+0xdc>)
 800a26c:	f7fe f860 	bl	8008330 <WIZCHIP_READ_BUF>
   getSIPR(pnetinfo->ip);
 800a270:	687b      	ldr	r3, [r7, #4]
 800a272:	3306      	adds	r3, #6
 800a274:	2204      	movs	r2, #4
 800a276:	4619      	mov	r1, r3
 800a278:	4828      	ldr	r0, [pc, #160]	; (800a31c <wizchip_getnetinfo+0xe0>)
 800a27a:	f7fe f859 	bl	8008330 <WIZCHIP_READ_BUF>
   
   getGA6R(pnetinfo->gw6);
 800a27e:	687b      	ldr	r3, [r7, #4]
 800a280:	3342      	adds	r3, #66	; 0x42
 800a282:	2210      	movs	r2, #16
 800a284:	4619      	mov	r1, r3
 800a286:	4826      	ldr	r0, [pc, #152]	; (800a320 <wizchip_getnetinfo+0xe4>)
 800a288:	f7fe f852 	bl	8008330 <WIZCHIP_READ_BUF>
   getSUB6R(pnetinfo->sn6);
 800a28c:	687b      	ldr	r3, [r7, #4]
 800a28e:	3332      	adds	r3, #50	; 0x32
 800a290:	2210      	movs	r2, #16
 800a292:	4619      	mov	r1, r3
 800a294:	4823      	ldr	r0, [pc, #140]	; (800a324 <wizchip_getnetinfo+0xe8>)
 800a296:	f7fe f84b 	bl	8008330 <WIZCHIP_READ_BUF>
   getLLAR(pnetinfo->lla);
 800a29a:	687b      	ldr	r3, [r7, #4]
 800a29c:	3312      	adds	r3, #18
 800a29e:	2210      	movs	r2, #16
 800a2a0:	4619      	mov	r1, r3
 800a2a2:	4821      	ldr	r0, [pc, #132]	; (800a328 <wizchip_getnetinfo+0xec>)
 800a2a4:	f7fe f844 	bl	8008330 <WIZCHIP_READ_BUF>
   getGUAR(pnetinfo->gua);
 800a2a8:	687b      	ldr	r3, [r7, #4]
 800a2aa:	3322      	adds	r3, #34	; 0x22
 800a2ac:	2210      	movs	r2, #16
 800a2ae:	4619      	mov	r1, r3
 800a2b0:	481e      	ldr	r0, [pc, #120]	; (800a32c <wizchip_getnetinfo+0xf0>)
 800a2b2:	f7fe f83d 	bl	8008330 <WIZCHIP_READ_BUF>
   for(i=0; i<4; i++)  pnetinfo->dns[i] = _DNS_[i];
 800a2b6:	2300      	movs	r3, #0
 800a2b8:	73fb      	strb	r3, [r7, #15]
 800a2ba:	e00b      	b.n	800a2d4 <wizchip_getnetinfo+0x98>
 800a2bc:	7bfa      	ldrb	r2, [r7, #15]
 800a2be:	7bfb      	ldrb	r3, [r7, #15]
 800a2c0:	491b      	ldr	r1, [pc, #108]	; (800a330 <wizchip_getnetinfo+0xf4>)
 800a2c2:	5c89      	ldrb	r1, [r1, r2]
 800a2c4:	687a      	ldr	r2, [r7, #4]
 800a2c6:	4413      	add	r3, r2
 800a2c8:	460a      	mov	r2, r1
 800a2ca:	f883 2052 	strb.w	r2, [r3, #82]	; 0x52
 800a2ce:	7bfb      	ldrb	r3, [r7, #15]
 800a2d0:	3301      	adds	r3, #1
 800a2d2:	73fb      	strb	r3, [r7, #15]
 800a2d4:	7bfb      	ldrb	r3, [r7, #15]
 800a2d6:	2b03      	cmp	r3, #3
 800a2d8:	d9f0      	bls.n	800a2bc <wizchip_getnetinfo+0x80>
   for(i=0; i<16; i++) pnetinfo->dns6[i]  = _DNS6_[i];
 800a2da:	2300      	movs	r3, #0
 800a2dc:	73fb      	strb	r3, [r7, #15]
 800a2de:	e00b      	b.n	800a2f8 <wizchip_getnetinfo+0xbc>
 800a2e0:	7bfa      	ldrb	r2, [r7, #15]
 800a2e2:	7bfb      	ldrb	r3, [r7, #15]
 800a2e4:	4913      	ldr	r1, [pc, #76]	; (800a334 <wizchip_getnetinfo+0xf8>)
 800a2e6:	5c89      	ldrb	r1, [r1, r2]
 800a2e8:	687a      	ldr	r2, [r7, #4]
 800a2ea:	4413      	add	r3, r2
 800a2ec:	460a      	mov	r2, r1
 800a2ee:	f883 2056 	strb.w	r2, [r3, #86]	; 0x56
 800a2f2:	7bfb      	ldrb	r3, [r7, #15]
 800a2f4:	3301      	adds	r3, #1
 800a2f6:	73fb      	strb	r3, [r7, #15]
 800a2f8:	7bfb      	ldrb	r3, [r7, #15]
 800a2fa:	2b0f      	cmp	r3, #15
 800a2fc:	d9f0      	bls.n	800a2e0 <wizchip_getnetinfo+0xa4>

   pnetinfo->ipmode = _IPMODE_;
 800a2fe:	4b0e      	ldr	r3, [pc, #56]	; (800a338 <wizchip_getnetinfo+0xfc>)
 800a300:	781a      	ldrb	r2, [r3, #0]
 800a302:	687b      	ldr	r3, [r7, #4]
 800a304:	f883 2066 	strb.w	r2, [r3, #102]	; 0x66
}
 800a308:	bf00      	nop
 800a30a:	3710      	adds	r7, #16
 800a30c:	46bd      	mov	sp, r7
 800a30e:	bd80      	pop	{r7, pc}
 800a310:	60412000 	.word	0x60412000
 800a314:	60413000 	.word	0x60413000
 800a318:	60413400 	.word	0x60413400
 800a31c:	60413800 	.word	0x60413800
 800a320:	60417000 	.word	0x60417000
 800a324:	60416000 	.word	0x60416000
 800a328:	60414000 	.word	0x60414000
 800a32c:	60415000 	.word	0x60415000
 800a330:	200006ac 	.word	0x200006ac
 800a334:	200006b0 	.word	0x200006b0
 800a338:	200006c0 	.word	0x200006c0

0800a33c <wizchip_setnetmode>:

void wizchip_setnetmode(netmode_type netmode)
{
 800a33c:	b580      	push	{r7, lr}
 800a33e:	b084      	sub	sp, #16
 800a340:	af00      	add	r7, sp, #0
 800a342:	6078      	str	r0, [r7, #4]
   uint32_t tmp = (uint32_t) netmode;
 800a344:	687b      	ldr	r3, [r7, #4]
 800a346:	60fb      	str	r3, [r7, #12]
   setNETMR ((uint8_t)tmp);
 800a348:	68fb      	ldr	r3, [r7, #12]
 800a34a:	b2db      	uxtb	r3, r3
 800a34c:	4619      	mov	r1, r3
 800a34e:	480e      	ldr	r0, [pc, #56]	; (800a388 <wizchip_setnetmode+0x4c>)
 800a350:	f7fd ff54 	bl	80081fc <WIZCHIP_WRITE>
   setNETMR2((uint8_t)(tmp>>8));
 800a354:	68fb      	ldr	r3, [r7, #12]
 800a356:	0a1b      	lsrs	r3, r3, #8
 800a358:	b2db      	uxtb	r3, r3
 800a35a:	4619      	mov	r1, r3
 800a35c:	480b      	ldr	r0, [pc, #44]	; (800a38c <wizchip_setnetmode+0x50>)
 800a35e:	f7fd ff4d 	bl	80081fc <WIZCHIP_WRITE>
   setNET4MR((uint8_t)(tmp>>16));
 800a362:	68fb      	ldr	r3, [r7, #12]
 800a364:	0c1b      	lsrs	r3, r3, #16
 800a366:	b2db      	uxtb	r3, r3
 800a368:	4619      	mov	r1, r3
 800a36a:	4809      	ldr	r0, [pc, #36]	; (800a390 <wizchip_setnetmode+0x54>)
 800a36c:	f7fd ff46 	bl	80081fc <WIZCHIP_WRITE>
   setNET6MR((uint8_t)(tmp>>24));
 800a370:	68fb      	ldr	r3, [r7, #12]
 800a372:	0e1b      	lsrs	r3, r3, #24
 800a374:	b2db      	uxtb	r3, r3
 800a376:	4619      	mov	r1, r3
 800a378:	4806      	ldr	r0, [pc, #24]	; (800a394 <wizchip_setnetmode+0x58>)
 800a37a:	f7fd ff3f 	bl	80081fc <WIZCHIP_WRITE>
}
 800a37e:	bf00      	nop
 800a380:	3710      	adds	r7, #16
 800a382:	46bd      	mov	sp, r7
 800a384:	bd80      	pop	{r7, pc}
 800a386:	bf00      	nop
 800a388:	60400800 	.word	0x60400800
 800a38c:	60400900 	.word	0x60400900
 800a390:	60400000 	.word	0x60400000
 800a394:	60400400 	.word	0x60400400

0800a398 <wizchip_getnetmode>:

netmode_type wizchip_getnetmode(void)
{
 800a398:	b590      	push	{r4, r7, lr}
 800a39a:	b083      	sub	sp, #12
 800a39c:	af00      	add	r7, sp, #0
   uint32_t ret = 0;
 800a39e:	2300      	movs	r3, #0
 800a3a0:	607b      	str	r3, [r7, #4]
   ret = getNETMR();
 800a3a2:	4811      	ldr	r0, [pc, #68]	; (800a3e8 <wizchip_getnetmode+0x50>)
 800a3a4:	f7fd ff58 	bl	8008258 <WIZCHIP_READ>
 800a3a8:	4603      	mov	r3, r0
 800a3aa:	607b      	str	r3, [r7, #4]
   ret = (ret << 8)  + getNETMR2();
 800a3ac:	687b      	ldr	r3, [r7, #4]
 800a3ae:	021c      	lsls	r4, r3, #8
 800a3b0:	480e      	ldr	r0, [pc, #56]	; (800a3ec <wizchip_getnetmode+0x54>)
 800a3b2:	f7fd ff51 	bl	8008258 <WIZCHIP_READ>
 800a3b6:	4603      	mov	r3, r0
 800a3b8:	4423      	add	r3, r4
 800a3ba:	607b      	str	r3, [r7, #4]
   ret = (ret << 16) + getNET4MR();
 800a3bc:	687b      	ldr	r3, [r7, #4]
 800a3be:	041c      	lsls	r4, r3, #16
 800a3c0:	480b      	ldr	r0, [pc, #44]	; (800a3f0 <wizchip_getnetmode+0x58>)
 800a3c2:	f7fd ff49 	bl	8008258 <WIZCHIP_READ>
 800a3c6:	4603      	mov	r3, r0
 800a3c8:	4423      	add	r3, r4
 800a3ca:	607b      	str	r3, [r7, #4]
   ret = (ret << 24) + getNET6MR();
 800a3cc:	687b      	ldr	r3, [r7, #4]
 800a3ce:	061c      	lsls	r4, r3, #24
 800a3d0:	4808      	ldr	r0, [pc, #32]	; (800a3f4 <wizchip_getnetmode+0x5c>)
 800a3d2:	f7fd ff41 	bl	8008258 <WIZCHIP_READ>
 800a3d6:	4603      	mov	r3, r0
 800a3d8:	4423      	add	r3, r4
 800a3da:	607b      	str	r3, [r7, #4]
   return (netmode_type)ret;
 800a3dc:	687b      	ldr	r3, [r7, #4]
}
 800a3de:	4618      	mov	r0, r3
 800a3e0:	370c      	adds	r7, #12
 800a3e2:	46bd      	mov	sp, r7
 800a3e4:	bd90      	pop	{r4, r7, pc}
 800a3e6:	bf00      	nop
 800a3e8:	60400800 	.word	0x60400800
 800a3ec:	60400900 	.word	0x60400900
 800a3f0:	60400000 	.word	0x60400000
 800a3f4:	60400400 	.word	0x60400400

0800a3f8 <wizchip_settimeout>:

void wizchip_settimeout(wiz_NetTimeout* nettime)
{
 800a3f8:	b580      	push	{r7, lr}
 800a3fa:	b082      	sub	sp, #8
 800a3fc:	af00      	add	r7, sp, #0
 800a3fe:	6078      	str	r0, [r7, #4]
   setRCR(nettime->s_retry_cnt);
 800a400:	687b      	ldr	r3, [r7, #4]
 800a402:	781b      	ldrb	r3, [r3, #0]
 800a404:	4619      	mov	r1, r3
 800a406:	4816      	ldr	r0, [pc, #88]	; (800a460 <wizchip_settimeout+0x68>)
 800a408:	f7fd fef8 	bl	80081fc <WIZCHIP_WRITE>
   setRTR(nettime->s_time_100us);
 800a40c:	687b      	ldr	r3, [r7, #4]
 800a40e:	885b      	ldrh	r3, [r3, #2]
 800a410:	0a1b      	lsrs	r3, r3, #8
 800a412:	b29b      	uxth	r3, r3
 800a414:	b2db      	uxtb	r3, r3
 800a416:	4619      	mov	r1, r3
 800a418:	4812      	ldr	r0, [pc, #72]	; (800a464 <wizchip_settimeout+0x6c>)
 800a41a:	f7fd feef 	bl	80081fc <WIZCHIP_WRITE>
 800a41e:	687b      	ldr	r3, [r7, #4]
 800a420:	885b      	ldrh	r3, [r3, #2]
 800a422:	b2db      	uxtb	r3, r3
 800a424:	4619      	mov	r1, r3
 800a426:	4810      	ldr	r0, [pc, #64]	; (800a468 <wizchip_settimeout+0x70>)
 800a428:	f7fd fee8 	bl	80081fc <WIZCHIP_WRITE>
   setSLRCR(nettime->sl_retry_cnt);
 800a42c:	687b      	ldr	r3, [r7, #4]
 800a42e:	791b      	ldrb	r3, [r3, #4]
 800a430:	4619      	mov	r1, r3
 800a432:	480e      	ldr	r0, [pc, #56]	; (800a46c <wizchip_settimeout+0x74>)
 800a434:	f7fd fee2 	bl	80081fc <WIZCHIP_WRITE>
   setSLRTR(nettime->sl_time_100us);
 800a438:	687b      	ldr	r3, [r7, #4]
 800a43a:	88db      	ldrh	r3, [r3, #6]
 800a43c:	0a1b      	lsrs	r3, r3, #8
 800a43e:	b29b      	uxth	r3, r3
 800a440:	b2db      	uxtb	r3, r3
 800a442:	4619      	mov	r1, r3
 800a444:	480a      	ldr	r0, [pc, #40]	; (800a470 <wizchip_settimeout+0x78>)
 800a446:	f7fd fed9 	bl	80081fc <WIZCHIP_WRITE>
 800a44a:	687b      	ldr	r3, [r7, #4]
 800a44c:	88db      	ldrh	r3, [r3, #6]
 800a44e:	b2db      	uxtb	r3, r3
 800a450:	4619      	mov	r1, r3
 800a452:	4808      	ldr	r0, [pc, #32]	; (800a474 <wizchip_settimeout+0x7c>)
 800a454:	f7fd fed2 	bl	80081fc <WIZCHIP_WRITE>
}
 800a458:	bf00      	nop
 800a45a:	3708      	adds	r7, #8
 800a45c:	46bd      	mov	sp, r7
 800a45e:	bd80      	pop	{r7, pc}
 800a460:	60420400 	.word	0x60420400
 800a464:	60420000 	.word	0x60420000
 800a468:	60420100 	.word	0x60420100
 800a46c:	60420c00 	.word	0x60420c00
 800a470:	60420800 	.word	0x60420800
 800a474:	60420900 	.word	0x60420900

0800a478 <wizchip_gettimeout>:

void wizchip_gettimeout(wiz_NetTimeout* nettime)
{
 800a478:	b590      	push	{r4, r7, lr}
 800a47a:	b083      	sub	sp, #12
 800a47c:	af00      	add	r7, sp, #0
 800a47e:	6078      	str	r0, [r7, #4]
   nettime->s_retry_cnt   = getRCR();
 800a480:	4818      	ldr	r0, [pc, #96]	; (800a4e4 <wizchip_gettimeout+0x6c>)
 800a482:	f7fd fee9 	bl	8008258 <WIZCHIP_READ>
 800a486:	4603      	mov	r3, r0
 800a488:	461a      	mov	r2, r3
 800a48a:	687b      	ldr	r3, [r7, #4]
 800a48c:	701a      	strb	r2, [r3, #0]
   nettime->s_time_100us  = getRTR();
 800a48e:	4816      	ldr	r0, [pc, #88]	; (800a4e8 <wizchip_gettimeout+0x70>)
 800a490:	f7fd fee2 	bl	8008258 <WIZCHIP_READ>
 800a494:	4603      	mov	r3, r0
 800a496:	b29b      	uxth	r3, r3
 800a498:	021b      	lsls	r3, r3, #8
 800a49a:	b29c      	uxth	r4, r3
 800a49c:	4813      	ldr	r0, [pc, #76]	; (800a4ec <wizchip_gettimeout+0x74>)
 800a49e:	f7fd fedb 	bl	8008258 <WIZCHIP_READ>
 800a4a2:	4603      	mov	r3, r0
 800a4a4:	b29b      	uxth	r3, r3
 800a4a6:	4423      	add	r3, r4
 800a4a8:	b29a      	uxth	r2, r3
 800a4aa:	687b      	ldr	r3, [r7, #4]
 800a4ac:	805a      	strh	r2, [r3, #2]
   nettime->sl_retry_cnt  = getSLRCR();
 800a4ae:	4810      	ldr	r0, [pc, #64]	; (800a4f0 <wizchip_gettimeout+0x78>)
 800a4b0:	f7fd fed2 	bl	8008258 <WIZCHIP_READ>
 800a4b4:	4603      	mov	r3, r0
 800a4b6:	461a      	mov	r2, r3
 800a4b8:	687b      	ldr	r3, [r7, #4]
 800a4ba:	711a      	strb	r2, [r3, #4]
   nettime->sl_time_100us = getSLRTR();
 800a4bc:	480d      	ldr	r0, [pc, #52]	; (800a4f4 <wizchip_gettimeout+0x7c>)
 800a4be:	f7fd fecb 	bl	8008258 <WIZCHIP_READ>
 800a4c2:	4603      	mov	r3, r0
 800a4c4:	b29b      	uxth	r3, r3
 800a4c6:	021b      	lsls	r3, r3, #8
 800a4c8:	b29c      	uxth	r4, r3
 800a4ca:	480b      	ldr	r0, [pc, #44]	; (800a4f8 <wizchip_gettimeout+0x80>)
 800a4cc:	f7fd fec4 	bl	8008258 <WIZCHIP_READ>
 800a4d0:	4603      	mov	r3, r0
 800a4d2:	b29b      	uxth	r3, r3
 800a4d4:	4423      	add	r3, r4
 800a4d6:	b29a      	uxth	r2, r3
 800a4d8:	687b      	ldr	r3, [r7, #4]
 800a4da:	80da      	strh	r2, [r3, #6]
}
 800a4dc:	bf00      	nop
 800a4de:	370c      	adds	r7, #12
 800a4e0:	46bd      	mov	sp, r7
 800a4e2:	bd90      	pop	{r4, r7, pc}
 800a4e4:	60420400 	.word	0x60420400
 800a4e8:	60420000 	.word	0x60420000
 800a4ec:	60420100 	.word	0x60420100
 800a4f0:	60420c00 	.word	0x60420c00
 800a4f4:	60420800 	.word	0x60420800
 800a4f8:	60420900 	.word	0x60420900

0800a4fc <std>:
 800a4fc:	2300      	movs	r3, #0
 800a4fe:	b510      	push	{r4, lr}
 800a500:	4604      	mov	r4, r0
 800a502:	e9c0 3300 	strd	r3, r3, [r0]
 800a506:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800a50a:	6083      	str	r3, [r0, #8]
 800a50c:	8181      	strh	r1, [r0, #12]
 800a50e:	6643      	str	r3, [r0, #100]	; 0x64
 800a510:	81c2      	strh	r2, [r0, #14]
 800a512:	6183      	str	r3, [r0, #24]
 800a514:	4619      	mov	r1, r3
 800a516:	2208      	movs	r2, #8
 800a518:	305c      	adds	r0, #92	; 0x5c
 800a51a:	f000 f9e5 	bl	800a8e8 <memset>
 800a51e:	4b05      	ldr	r3, [pc, #20]	; (800a534 <std+0x38>)
 800a520:	6263      	str	r3, [r4, #36]	; 0x24
 800a522:	4b05      	ldr	r3, [pc, #20]	; (800a538 <std+0x3c>)
 800a524:	62a3      	str	r3, [r4, #40]	; 0x28
 800a526:	4b05      	ldr	r3, [pc, #20]	; (800a53c <std+0x40>)
 800a528:	62e3      	str	r3, [r4, #44]	; 0x2c
 800a52a:	4b05      	ldr	r3, [pc, #20]	; (800a540 <std+0x44>)
 800a52c:	6224      	str	r4, [r4, #32]
 800a52e:	6323      	str	r3, [r4, #48]	; 0x30
 800a530:	bd10      	pop	{r4, pc}
 800a532:	bf00      	nop
 800a534:	0800a739 	.word	0x0800a739
 800a538:	0800a75b 	.word	0x0800a75b
 800a53c:	0800a793 	.word	0x0800a793
 800a540:	0800a7b7 	.word	0x0800a7b7

0800a544 <stdio_exit_handler>:
 800a544:	4a02      	ldr	r2, [pc, #8]	; (800a550 <stdio_exit_handler+0xc>)
 800a546:	4903      	ldr	r1, [pc, #12]	; (800a554 <stdio_exit_handler+0x10>)
 800a548:	4803      	ldr	r0, [pc, #12]	; (800a558 <stdio_exit_handler+0x14>)
 800a54a:	f000 b869 	b.w	800a620 <_fwalk_sglue>
 800a54e:	bf00      	nop
 800a550:	200000b0 	.word	0x200000b0
 800a554:	0800b281 	.word	0x0800b281
 800a558:	200000bc 	.word	0x200000bc

0800a55c <cleanup_stdio>:
 800a55c:	6841      	ldr	r1, [r0, #4]
 800a55e:	4b0c      	ldr	r3, [pc, #48]	; (800a590 <cleanup_stdio+0x34>)
 800a560:	4299      	cmp	r1, r3
 800a562:	b510      	push	{r4, lr}
 800a564:	4604      	mov	r4, r0
 800a566:	d001      	beq.n	800a56c <cleanup_stdio+0x10>
 800a568:	f000 fe8a 	bl	800b280 <_fflush_r>
 800a56c:	68a1      	ldr	r1, [r4, #8]
 800a56e:	4b09      	ldr	r3, [pc, #36]	; (800a594 <cleanup_stdio+0x38>)
 800a570:	4299      	cmp	r1, r3
 800a572:	d002      	beq.n	800a57a <cleanup_stdio+0x1e>
 800a574:	4620      	mov	r0, r4
 800a576:	f000 fe83 	bl	800b280 <_fflush_r>
 800a57a:	68e1      	ldr	r1, [r4, #12]
 800a57c:	4b06      	ldr	r3, [pc, #24]	; (800a598 <cleanup_stdio+0x3c>)
 800a57e:	4299      	cmp	r1, r3
 800a580:	d004      	beq.n	800a58c <cleanup_stdio+0x30>
 800a582:	4620      	mov	r0, r4
 800a584:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800a588:	f000 be7a 	b.w	800b280 <_fflush_r>
 800a58c:	bd10      	pop	{r4, pc}
 800a58e:	bf00      	nop
 800a590:	200006c4 	.word	0x200006c4
 800a594:	2000072c 	.word	0x2000072c
 800a598:	20000794 	.word	0x20000794

0800a59c <global_stdio_init.part.0>:
 800a59c:	b510      	push	{r4, lr}
 800a59e:	4b0b      	ldr	r3, [pc, #44]	; (800a5cc <global_stdio_init.part.0+0x30>)
 800a5a0:	4c0b      	ldr	r4, [pc, #44]	; (800a5d0 <global_stdio_init.part.0+0x34>)
 800a5a2:	4a0c      	ldr	r2, [pc, #48]	; (800a5d4 <global_stdio_init.part.0+0x38>)
 800a5a4:	601a      	str	r2, [r3, #0]
 800a5a6:	4620      	mov	r0, r4
 800a5a8:	2200      	movs	r2, #0
 800a5aa:	2104      	movs	r1, #4
 800a5ac:	f7ff ffa6 	bl	800a4fc <std>
 800a5b0:	f104 0068 	add.w	r0, r4, #104	; 0x68
 800a5b4:	2201      	movs	r2, #1
 800a5b6:	2109      	movs	r1, #9
 800a5b8:	f7ff ffa0 	bl	800a4fc <std>
 800a5bc:	f104 00d0 	add.w	r0, r4, #208	; 0xd0
 800a5c0:	2202      	movs	r2, #2
 800a5c2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800a5c6:	2112      	movs	r1, #18
 800a5c8:	f7ff bf98 	b.w	800a4fc <std>
 800a5cc:	200007fc 	.word	0x200007fc
 800a5d0:	200006c4 	.word	0x200006c4
 800a5d4:	0800a545 	.word	0x0800a545

0800a5d8 <__sfp_lock_acquire>:
 800a5d8:	4801      	ldr	r0, [pc, #4]	; (800a5e0 <__sfp_lock_acquire+0x8>)
 800a5da:	f000 b9fd 	b.w	800a9d8 <__retarget_lock_acquire_recursive>
 800a5de:	bf00      	nop
 800a5e0:	20000805 	.word	0x20000805

0800a5e4 <__sfp_lock_release>:
 800a5e4:	4801      	ldr	r0, [pc, #4]	; (800a5ec <__sfp_lock_release+0x8>)
 800a5e6:	f000 b9f8 	b.w	800a9da <__retarget_lock_release_recursive>
 800a5ea:	bf00      	nop
 800a5ec:	20000805 	.word	0x20000805

0800a5f0 <__sinit>:
 800a5f0:	b510      	push	{r4, lr}
 800a5f2:	4604      	mov	r4, r0
 800a5f4:	f7ff fff0 	bl	800a5d8 <__sfp_lock_acquire>
 800a5f8:	6a23      	ldr	r3, [r4, #32]
 800a5fa:	b11b      	cbz	r3, 800a604 <__sinit+0x14>
 800a5fc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800a600:	f7ff bff0 	b.w	800a5e4 <__sfp_lock_release>
 800a604:	4b04      	ldr	r3, [pc, #16]	; (800a618 <__sinit+0x28>)
 800a606:	6223      	str	r3, [r4, #32]
 800a608:	4b04      	ldr	r3, [pc, #16]	; (800a61c <__sinit+0x2c>)
 800a60a:	681b      	ldr	r3, [r3, #0]
 800a60c:	2b00      	cmp	r3, #0
 800a60e:	d1f5      	bne.n	800a5fc <__sinit+0xc>
 800a610:	f7ff ffc4 	bl	800a59c <global_stdio_init.part.0>
 800a614:	e7f2      	b.n	800a5fc <__sinit+0xc>
 800a616:	bf00      	nop
 800a618:	0800a55d 	.word	0x0800a55d
 800a61c:	200007fc 	.word	0x200007fc

0800a620 <_fwalk_sglue>:
 800a620:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800a624:	4607      	mov	r7, r0
 800a626:	4688      	mov	r8, r1
 800a628:	4614      	mov	r4, r2
 800a62a:	2600      	movs	r6, #0
 800a62c:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800a630:	f1b9 0901 	subs.w	r9, r9, #1
 800a634:	d505      	bpl.n	800a642 <_fwalk_sglue+0x22>
 800a636:	6824      	ldr	r4, [r4, #0]
 800a638:	2c00      	cmp	r4, #0
 800a63a:	d1f7      	bne.n	800a62c <_fwalk_sglue+0xc>
 800a63c:	4630      	mov	r0, r6
 800a63e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800a642:	89ab      	ldrh	r3, [r5, #12]
 800a644:	2b01      	cmp	r3, #1
 800a646:	d907      	bls.n	800a658 <_fwalk_sglue+0x38>
 800a648:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800a64c:	3301      	adds	r3, #1
 800a64e:	d003      	beq.n	800a658 <_fwalk_sglue+0x38>
 800a650:	4629      	mov	r1, r5
 800a652:	4638      	mov	r0, r7
 800a654:	47c0      	blx	r8
 800a656:	4306      	orrs	r6, r0
 800a658:	3568      	adds	r5, #104	; 0x68
 800a65a:	e7e9      	b.n	800a630 <_fwalk_sglue+0x10>

0800a65c <iprintf>:
 800a65c:	b40f      	push	{r0, r1, r2, r3}
 800a65e:	b507      	push	{r0, r1, r2, lr}
 800a660:	4906      	ldr	r1, [pc, #24]	; (800a67c <iprintf+0x20>)
 800a662:	ab04      	add	r3, sp, #16
 800a664:	6808      	ldr	r0, [r1, #0]
 800a666:	f853 2b04 	ldr.w	r2, [r3], #4
 800a66a:	6881      	ldr	r1, [r0, #8]
 800a66c:	9301      	str	r3, [sp, #4]
 800a66e:	f000 fad7 	bl	800ac20 <_vfiprintf_r>
 800a672:	b003      	add	sp, #12
 800a674:	f85d eb04 	ldr.w	lr, [sp], #4
 800a678:	b004      	add	sp, #16
 800a67a:	4770      	bx	lr
 800a67c:	20000108 	.word	0x20000108

0800a680 <_puts_r>:
 800a680:	6a03      	ldr	r3, [r0, #32]
 800a682:	b570      	push	{r4, r5, r6, lr}
 800a684:	6884      	ldr	r4, [r0, #8]
 800a686:	4605      	mov	r5, r0
 800a688:	460e      	mov	r6, r1
 800a68a:	b90b      	cbnz	r3, 800a690 <_puts_r+0x10>
 800a68c:	f7ff ffb0 	bl	800a5f0 <__sinit>
 800a690:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800a692:	07db      	lsls	r3, r3, #31
 800a694:	d405      	bmi.n	800a6a2 <_puts_r+0x22>
 800a696:	89a3      	ldrh	r3, [r4, #12]
 800a698:	0598      	lsls	r0, r3, #22
 800a69a:	d402      	bmi.n	800a6a2 <_puts_r+0x22>
 800a69c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800a69e:	f000 f99b 	bl	800a9d8 <__retarget_lock_acquire_recursive>
 800a6a2:	89a3      	ldrh	r3, [r4, #12]
 800a6a4:	0719      	lsls	r1, r3, #28
 800a6a6:	d513      	bpl.n	800a6d0 <_puts_r+0x50>
 800a6a8:	6923      	ldr	r3, [r4, #16]
 800a6aa:	b18b      	cbz	r3, 800a6d0 <_puts_r+0x50>
 800a6ac:	3e01      	subs	r6, #1
 800a6ae:	68a3      	ldr	r3, [r4, #8]
 800a6b0:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 800a6b4:	3b01      	subs	r3, #1
 800a6b6:	60a3      	str	r3, [r4, #8]
 800a6b8:	b9e9      	cbnz	r1, 800a6f6 <_puts_r+0x76>
 800a6ba:	2b00      	cmp	r3, #0
 800a6bc:	da2e      	bge.n	800a71c <_puts_r+0x9c>
 800a6be:	4622      	mov	r2, r4
 800a6c0:	210a      	movs	r1, #10
 800a6c2:	4628      	mov	r0, r5
 800a6c4:	f000 f87b 	bl	800a7be <__swbuf_r>
 800a6c8:	3001      	adds	r0, #1
 800a6ca:	d007      	beq.n	800a6dc <_puts_r+0x5c>
 800a6cc:	250a      	movs	r5, #10
 800a6ce:	e007      	b.n	800a6e0 <_puts_r+0x60>
 800a6d0:	4621      	mov	r1, r4
 800a6d2:	4628      	mov	r0, r5
 800a6d4:	f000 f8b0 	bl	800a838 <__swsetup_r>
 800a6d8:	2800      	cmp	r0, #0
 800a6da:	d0e7      	beq.n	800a6ac <_puts_r+0x2c>
 800a6dc:	f04f 35ff 	mov.w	r5, #4294967295
 800a6e0:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800a6e2:	07da      	lsls	r2, r3, #31
 800a6e4:	d405      	bmi.n	800a6f2 <_puts_r+0x72>
 800a6e6:	89a3      	ldrh	r3, [r4, #12]
 800a6e8:	059b      	lsls	r3, r3, #22
 800a6ea:	d402      	bmi.n	800a6f2 <_puts_r+0x72>
 800a6ec:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800a6ee:	f000 f974 	bl	800a9da <__retarget_lock_release_recursive>
 800a6f2:	4628      	mov	r0, r5
 800a6f4:	bd70      	pop	{r4, r5, r6, pc}
 800a6f6:	2b00      	cmp	r3, #0
 800a6f8:	da04      	bge.n	800a704 <_puts_r+0x84>
 800a6fa:	69a2      	ldr	r2, [r4, #24]
 800a6fc:	429a      	cmp	r2, r3
 800a6fe:	dc06      	bgt.n	800a70e <_puts_r+0x8e>
 800a700:	290a      	cmp	r1, #10
 800a702:	d004      	beq.n	800a70e <_puts_r+0x8e>
 800a704:	6823      	ldr	r3, [r4, #0]
 800a706:	1c5a      	adds	r2, r3, #1
 800a708:	6022      	str	r2, [r4, #0]
 800a70a:	7019      	strb	r1, [r3, #0]
 800a70c:	e7cf      	b.n	800a6ae <_puts_r+0x2e>
 800a70e:	4622      	mov	r2, r4
 800a710:	4628      	mov	r0, r5
 800a712:	f000 f854 	bl	800a7be <__swbuf_r>
 800a716:	3001      	adds	r0, #1
 800a718:	d1c9      	bne.n	800a6ae <_puts_r+0x2e>
 800a71a:	e7df      	b.n	800a6dc <_puts_r+0x5c>
 800a71c:	6823      	ldr	r3, [r4, #0]
 800a71e:	250a      	movs	r5, #10
 800a720:	1c5a      	adds	r2, r3, #1
 800a722:	6022      	str	r2, [r4, #0]
 800a724:	701d      	strb	r5, [r3, #0]
 800a726:	e7db      	b.n	800a6e0 <_puts_r+0x60>

0800a728 <puts>:
 800a728:	4b02      	ldr	r3, [pc, #8]	; (800a734 <puts+0xc>)
 800a72a:	4601      	mov	r1, r0
 800a72c:	6818      	ldr	r0, [r3, #0]
 800a72e:	f7ff bfa7 	b.w	800a680 <_puts_r>
 800a732:	bf00      	nop
 800a734:	20000108 	.word	0x20000108

0800a738 <__sread>:
 800a738:	b510      	push	{r4, lr}
 800a73a:	460c      	mov	r4, r1
 800a73c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800a740:	f000 f8fc 	bl	800a93c <_read_r>
 800a744:	2800      	cmp	r0, #0
 800a746:	bfab      	itete	ge
 800a748:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800a74a:	89a3      	ldrhlt	r3, [r4, #12]
 800a74c:	181b      	addge	r3, r3, r0
 800a74e:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800a752:	bfac      	ite	ge
 800a754:	6563      	strge	r3, [r4, #84]	; 0x54
 800a756:	81a3      	strhlt	r3, [r4, #12]
 800a758:	bd10      	pop	{r4, pc}

0800a75a <__swrite>:
 800a75a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a75e:	461f      	mov	r7, r3
 800a760:	898b      	ldrh	r3, [r1, #12]
 800a762:	05db      	lsls	r3, r3, #23
 800a764:	4605      	mov	r5, r0
 800a766:	460c      	mov	r4, r1
 800a768:	4616      	mov	r6, r2
 800a76a:	d505      	bpl.n	800a778 <__swrite+0x1e>
 800a76c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800a770:	2302      	movs	r3, #2
 800a772:	2200      	movs	r2, #0
 800a774:	f000 f8d0 	bl	800a918 <_lseek_r>
 800a778:	89a3      	ldrh	r3, [r4, #12]
 800a77a:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800a77e:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800a782:	81a3      	strh	r3, [r4, #12]
 800a784:	4632      	mov	r2, r6
 800a786:	463b      	mov	r3, r7
 800a788:	4628      	mov	r0, r5
 800a78a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800a78e:	f000 b8e7 	b.w	800a960 <_write_r>

0800a792 <__sseek>:
 800a792:	b510      	push	{r4, lr}
 800a794:	460c      	mov	r4, r1
 800a796:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800a79a:	f000 f8bd 	bl	800a918 <_lseek_r>
 800a79e:	1c43      	adds	r3, r0, #1
 800a7a0:	89a3      	ldrh	r3, [r4, #12]
 800a7a2:	bf15      	itete	ne
 800a7a4:	6560      	strne	r0, [r4, #84]	; 0x54
 800a7a6:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800a7aa:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800a7ae:	81a3      	strheq	r3, [r4, #12]
 800a7b0:	bf18      	it	ne
 800a7b2:	81a3      	strhne	r3, [r4, #12]
 800a7b4:	bd10      	pop	{r4, pc}

0800a7b6 <__sclose>:
 800a7b6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800a7ba:	f000 b89d 	b.w	800a8f8 <_close_r>

0800a7be <__swbuf_r>:
 800a7be:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a7c0:	460e      	mov	r6, r1
 800a7c2:	4614      	mov	r4, r2
 800a7c4:	4605      	mov	r5, r0
 800a7c6:	b118      	cbz	r0, 800a7d0 <__swbuf_r+0x12>
 800a7c8:	6a03      	ldr	r3, [r0, #32]
 800a7ca:	b90b      	cbnz	r3, 800a7d0 <__swbuf_r+0x12>
 800a7cc:	f7ff ff10 	bl	800a5f0 <__sinit>
 800a7d0:	69a3      	ldr	r3, [r4, #24]
 800a7d2:	60a3      	str	r3, [r4, #8]
 800a7d4:	89a3      	ldrh	r3, [r4, #12]
 800a7d6:	071a      	lsls	r2, r3, #28
 800a7d8:	d525      	bpl.n	800a826 <__swbuf_r+0x68>
 800a7da:	6923      	ldr	r3, [r4, #16]
 800a7dc:	b31b      	cbz	r3, 800a826 <__swbuf_r+0x68>
 800a7de:	6823      	ldr	r3, [r4, #0]
 800a7e0:	6922      	ldr	r2, [r4, #16]
 800a7e2:	1a98      	subs	r0, r3, r2
 800a7e4:	6963      	ldr	r3, [r4, #20]
 800a7e6:	b2f6      	uxtb	r6, r6
 800a7e8:	4283      	cmp	r3, r0
 800a7ea:	4637      	mov	r7, r6
 800a7ec:	dc04      	bgt.n	800a7f8 <__swbuf_r+0x3a>
 800a7ee:	4621      	mov	r1, r4
 800a7f0:	4628      	mov	r0, r5
 800a7f2:	f000 fd45 	bl	800b280 <_fflush_r>
 800a7f6:	b9e0      	cbnz	r0, 800a832 <__swbuf_r+0x74>
 800a7f8:	68a3      	ldr	r3, [r4, #8]
 800a7fa:	3b01      	subs	r3, #1
 800a7fc:	60a3      	str	r3, [r4, #8]
 800a7fe:	6823      	ldr	r3, [r4, #0]
 800a800:	1c5a      	adds	r2, r3, #1
 800a802:	6022      	str	r2, [r4, #0]
 800a804:	701e      	strb	r6, [r3, #0]
 800a806:	6962      	ldr	r2, [r4, #20]
 800a808:	1c43      	adds	r3, r0, #1
 800a80a:	429a      	cmp	r2, r3
 800a80c:	d004      	beq.n	800a818 <__swbuf_r+0x5a>
 800a80e:	89a3      	ldrh	r3, [r4, #12]
 800a810:	07db      	lsls	r3, r3, #31
 800a812:	d506      	bpl.n	800a822 <__swbuf_r+0x64>
 800a814:	2e0a      	cmp	r6, #10
 800a816:	d104      	bne.n	800a822 <__swbuf_r+0x64>
 800a818:	4621      	mov	r1, r4
 800a81a:	4628      	mov	r0, r5
 800a81c:	f000 fd30 	bl	800b280 <_fflush_r>
 800a820:	b938      	cbnz	r0, 800a832 <__swbuf_r+0x74>
 800a822:	4638      	mov	r0, r7
 800a824:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800a826:	4621      	mov	r1, r4
 800a828:	4628      	mov	r0, r5
 800a82a:	f000 f805 	bl	800a838 <__swsetup_r>
 800a82e:	2800      	cmp	r0, #0
 800a830:	d0d5      	beq.n	800a7de <__swbuf_r+0x20>
 800a832:	f04f 37ff 	mov.w	r7, #4294967295
 800a836:	e7f4      	b.n	800a822 <__swbuf_r+0x64>

0800a838 <__swsetup_r>:
 800a838:	b538      	push	{r3, r4, r5, lr}
 800a83a:	4b2a      	ldr	r3, [pc, #168]	; (800a8e4 <__swsetup_r+0xac>)
 800a83c:	4605      	mov	r5, r0
 800a83e:	6818      	ldr	r0, [r3, #0]
 800a840:	460c      	mov	r4, r1
 800a842:	b118      	cbz	r0, 800a84c <__swsetup_r+0x14>
 800a844:	6a03      	ldr	r3, [r0, #32]
 800a846:	b90b      	cbnz	r3, 800a84c <__swsetup_r+0x14>
 800a848:	f7ff fed2 	bl	800a5f0 <__sinit>
 800a84c:	89a3      	ldrh	r3, [r4, #12]
 800a84e:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800a852:	0718      	lsls	r0, r3, #28
 800a854:	d422      	bmi.n	800a89c <__swsetup_r+0x64>
 800a856:	06d9      	lsls	r1, r3, #27
 800a858:	d407      	bmi.n	800a86a <__swsetup_r+0x32>
 800a85a:	2309      	movs	r3, #9
 800a85c:	602b      	str	r3, [r5, #0]
 800a85e:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 800a862:	81a3      	strh	r3, [r4, #12]
 800a864:	f04f 30ff 	mov.w	r0, #4294967295
 800a868:	e034      	b.n	800a8d4 <__swsetup_r+0x9c>
 800a86a:	0758      	lsls	r0, r3, #29
 800a86c:	d512      	bpl.n	800a894 <__swsetup_r+0x5c>
 800a86e:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800a870:	b141      	cbz	r1, 800a884 <__swsetup_r+0x4c>
 800a872:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800a876:	4299      	cmp	r1, r3
 800a878:	d002      	beq.n	800a880 <__swsetup_r+0x48>
 800a87a:	4628      	mov	r0, r5
 800a87c:	f000 f8ae 	bl	800a9dc <_free_r>
 800a880:	2300      	movs	r3, #0
 800a882:	6363      	str	r3, [r4, #52]	; 0x34
 800a884:	89a3      	ldrh	r3, [r4, #12]
 800a886:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800a88a:	81a3      	strh	r3, [r4, #12]
 800a88c:	2300      	movs	r3, #0
 800a88e:	6063      	str	r3, [r4, #4]
 800a890:	6923      	ldr	r3, [r4, #16]
 800a892:	6023      	str	r3, [r4, #0]
 800a894:	89a3      	ldrh	r3, [r4, #12]
 800a896:	f043 0308 	orr.w	r3, r3, #8
 800a89a:	81a3      	strh	r3, [r4, #12]
 800a89c:	6923      	ldr	r3, [r4, #16]
 800a89e:	b94b      	cbnz	r3, 800a8b4 <__swsetup_r+0x7c>
 800a8a0:	89a3      	ldrh	r3, [r4, #12]
 800a8a2:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800a8a6:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800a8aa:	d003      	beq.n	800a8b4 <__swsetup_r+0x7c>
 800a8ac:	4621      	mov	r1, r4
 800a8ae:	4628      	mov	r0, r5
 800a8b0:	f000 fd34 	bl	800b31c <__smakebuf_r>
 800a8b4:	89a0      	ldrh	r0, [r4, #12]
 800a8b6:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800a8ba:	f010 0301 	ands.w	r3, r0, #1
 800a8be:	d00a      	beq.n	800a8d6 <__swsetup_r+0x9e>
 800a8c0:	2300      	movs	r3, #0
 800a8c2:	60a3      	str	r3, [r4, #8]
 800a8c4:	6963      	ldr	r3, [r4, #20]
 800a8c6:	425b      	negs	r3, r3
 800a8c8:	61a3      	str	r3, [r4, #24]
 800a8ca:	6923      	ldr	r3, [r4, #16]
 800a8cc:	b943      	cbnz	r3, 800a8e0 <__swsetup_r+0xa8>
 800a8ce:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 800a8d2:	d1c4      	bne.n	800a85e <__swsetup_r+0x26>
 800a8d4:	bd38      	pop	{r3, r4, r5, pc}
 800a8d6:	0781      	lsls	r1, r0, #30
 800a8d8:	bf58      	it	pl
 800a8da:	6963      	ldrpl	r3, [r4, #20]
 800a8dc:	60a3      	str	r3, [r4, #8]
 800a8de:	e7f4      	b.n	800a8ca <__swsetup_r+0x92>
 800a8e0:	2000      	movs	r0, #0
 800a8e2:	e7f7      	b.n	800a8d4 <__swsetup_r+0x9c>
 800a8e4:	20000108 	.word	0x20000108

0800a8e8 <memset>:
 800a8e8:	4402      	add	r2, r0
 800a8ea:	4603      	mov	r3, r0
 800a8ec:	4293      	cmp	r3, r2
 800a8ee:	d100      	bne.n	800a8f2 <memset+0xa>
 800a8f0:	4770      	bx	lr
 800a8f2:	f803 1b01 	strb.w	r1, [r3], #1
 800a8f6:	e7f9      	b.n	800a8ec <memset+0x4>

0800a8f8 <_close_r>:
 800a8f8:	b538      	push	{r3, r4, r5, lr}
 800a8fa:	4d06      	ldr	r5, [pc, #24]	; (800a914 <_close_r+0x1c>)
 800a8fc:	2300      	movs	r3, #0
 800a8fe:	4604      	mov	r4, r0
 800a900:	4608      	mov	r0, r1
 800a902:	602b      	str	r3, [r5, #0]
 800a904:	f7f6 ff3b 	bl	800177e <_close>
 800a908:	1c43      	adds	r3, r0, #1
 800a90a:	d102      	bne.n	800a912 <_close_r+0x1a>
 800a90c:	682b      	ldr	r3, [r5, #0]
 800a90e:	b103      	cbz	r3, 800a912 <_close_r+0x1a>
 800a910:	6023      	str	r3, [r4, #0]
 800a912:	bd38      	pop	{r3, r4, r5, pc}
 800a914:	20000800 	.word	0x20000800

0800a918 <_lseek_r>:
 800a918:	b538      	push	{r3, r4, r5, lr}
 800a91a:	4d07      	ldr	r5, [pc, #28]	; (800a938 <_lseek_r+0x20>)
 800a91c:	4604      	mov	r4, r0
 800a91e:	4608      	mov	r0, r1
 800a920:	4611      	mov	r1, r2
 800a922:	2200      	movs	r2, #0
 800a924:	602a      	str	r2, [r5, #0]
 800a926:	461a      	mov	r2, r3
 800a928:	f7f6 ff50 	bl	80017cc <_lseek>
 800a92c:	1c43      	adds	r3, r0, #1
 800a92e:	d102      	bne.n	800a936 <_lseek_r+0x1e>
 800a930:	682b      	ldr	r3, [r5, #0]
 800a932:	b103      	cbz	r3, 800a936 <_lseek_r+0x1e>
 800a934:	6023      	str	r3, [r4, #0]
 800a936:	bd38      	pop	{r3, r4, r5, pc}
 800a938:	20000800 	.word	0x20000800

0800a93c <_read_r>:
 800a93c:	b538      	push	{r3, r4, r5, lr}
 800a93e:	4d07      	ldr	r5, [pc, #28]	; (800a95c <_read_r+0x20>)
 800a940:	4604      	mov	r4, r0
 800a942:	4608      	mov	r0, r1
 800a944:	4611      	mov	r1, r2
 800a946:	2200      	movs	r2, #0
 800a948:	602a      	str	r2, [r5, #0]
 800a94a:	461a      	mov	r2, r3
 800a94c:	f7f6 fefa 	bl	8001744 <_read>
 800a950:	1c43      	adds	r3, r0, #1
 800a952:	d102      	bne.n	800a95a <_read_r+0x1e>
 800a954:	682b      	ldr	r3, [r5, #0]
 800a956:	b103      	cbz	r3, 800a95a <_read_r+0x1e>
 800a958:	6023      	str	r3, [r4, #0]
 800a95a:	bd38      	pop	{r3, r4, r5, pc}
 800a95c:	20000800 	.word	0x20000800

0800a960 <_write_r>:
 800a960:	b538      	push	{r3, r4, r5, lr}
 800a962:	4d07      	ldr	r5, [pc, #28]	; (800a980 <_write_r+0x20>)
 800a964:	4604      	mov	r4, r0
 800a966:	4608      	mov	r0, r1
 800a968:	4611      	mov	r1, r2
 800a96a:	2200      	movs	r2, #0
 800a96c:	602a      	str	r2, [r5, #0]
 800a96e:	461a      	mov	r2, r3
 800a970:	f7f5 fec0 	bl	80006f4 <_write>
 800a974:	1c43      	adds	r3, r0, #1
 800a976:	d102      	bne.n	800a97e <_write_r+0x1e>
 800a978:	682b      	ldr	r3, [r5, #0]
 800a97a:	b103      	cbz	r3, 800a97e <_write_r+0x1e>
 800a97c:	6023      	str	r3, [r4, #0]
 800a97e:	bd38      	pop	{r3, r4, r5, pc}
 800a980:	20000800 	.word	0x20000800

0800a984 <__errno>:
 800a984:	4b01      	ldr	r3, [pc, #4]	; (800a98c <__errno+0x8>)
 800a986:	6818      	ldr	r0, [r3, #0]
 800a988:	4770      	bx	lr
 800a98a:	bf00      	nop
 800a98c:	20000108 	.word	0x20000108

0800a990 <__libc_init_array>:
 800a990:	b570      	push	{r4, r5, r6, lr}
 800a992:	4d0d      	ldr	r5, [pc, #52]	; (800a9c8 <__libc_init_array+0x38>)
 800a994:	4c0d      	ldr	r4, [pc, #52]	; (800a9cc <__libc_init_array+0x3c>)
 800a996:	1b64      	subs	r4, r4, r5
 800a998:	10a4      	asrs	r4, r4, #2
 800a99a:	2600      	movs	r6, #0
 800a99c:	42a6      	cmp	r6, r4
 800a99e:	d109      	bne.n	800a9b4 <__libc_init_array+0x24>
 800a9a0:	4d0b      	ldr	r5, [pc, #44]	; (800a9d0 <__libc_init_array+0x40>)
 800a9a2:	4c0c      	ldr	r4, [pc, #48]	; (800a9d4 <__libc_init_array+0x44>)
 800a9a4:	f000 fd28 	bl	800b3f8 <_init>
 800a9a8:	1b64      	subs	r4, r4, r5
 800a9aa:	10a4      	asrs	r4, r4, #2
 800a9ac:	2600      	movs	r6, #0
 800a9ae:	42a6      	cmp	r6, r4
 800a9b0:	d105      	bne.n	800a9be <__libc_init_array+0x2e>
 800a9b2:	bd70      	pop	{r4, r5, r6, pc}
 800a9b4:	f855 3b04 	ldr.w	r3, [r5], #4
 800a9b8:	4798      	blx	r3
 800a9ba:	3601      	adds	r6, #1
 800a9bc:	e7ee      	b.n	800a99c <__libc_init_array+0xc>
 800a9be:	f855 3b04 	ldr.w	r3, [r5], #4
 800a9c2:	4798      	blx	r3
 800a9c4:	3601      	adds	r6, #1
 800a9c6:	e7f2      	b.n	800a9ae <__libc_init_array+0x1e>
 800a9c8:	0800b8a8 	.word	0x0800b8a8
 800a9cc:	0800b8a8 	.word	0x0800b8a8
 800a9d0:	0800b8a8 	.word	0x0800b8a8
 800a9d4:	0800b8ac 	.word	0x0800b8ac

0800a9d8 <__retarget_lock_acquire_recursive>:
 800a9d8:	4770      	bx	lr

0800a9da <__retarget_lock_release_recursive>:
 800a9da:	4770      	bx	lr

0800a9dc <_free_r>:
 800a9dc:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800a9de:	2900      	cmp	r1, #0
 800a9e0:	d044      	beq.n	800aa6c <_free_r+0x90>
 800a9e2:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800a9e6:	9001      	str	r0, [sp, #4]
 800a9e8:	2b00      	cmp	r3, #0
 800a9ea:	f1a1 0404 	sub.w	r4, r1, #4
 800a9ee:	bfb8      	it	lt
 800a9f0:	18e4      	addlt	r4, r4, r3
 800a9f2:	f000 f8df 	bl	800abb4 <__malloc_lock>
 800a9f6:	4a1e      	ldr	r2, [pc, #120]	; (800aa70 <_free_r+0x94>)
 800a9f8:	9801      	ldr	r0, [sp, #4]
 800a9fa:	6813      	ldr	r3, [r2, #0]
 800a9fc:	b933      	cbnz	r3, 800aa0c <_free_r+0x30>
 800a9fe:	6063      	str	r3, [r4, #4]
 800aa00:	6014      	str	r4, [r2, #0]
 800aa02:	b003      	add	sp, #12
 800aa04:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800aa08:	f000 b8da 	b.w	800abc0 <__malloc_unlock>
 800aa0c:	42a3      	cmp	r3, r4
 800aa0e:	d908      	bls.n	800aa22 <_free_r+0x46>
 800aa10:	6825      	ldr	r5, [r4, #0]
 800aa12:	1961      	adds	r1, r4, r5
 800aa14:	428b      	cmp	r3, r1
 800aa16:	bf01      	itttt	eq
 800aa18:	6819      	ldreq	r1, [r3, #0]
 800aa1a:	685b      	ldreq	r3, [r3, #4]
 800aa1c:	1949      	addeq	r1, r1, r5
 800aa1e:	6021      	streq	r1, [r4, #0]
 800aa20:	e7ed      	b.n	800a9fe <_free_r+0x22>
 800aa22:	461a      	mov	r2, r3
 800aa24:	685b      	ldr	r3, [r3, #4]
 800aa26:	b10b      	cbz	r3, 800aa2c <_free_r+0x50>
 800aa28:	42a3      	cmp	r3, r4
 800aa2a:	d9fa      	bls.n	800aa22 <_free_r+0x46>
 800aa2c:	6811      	ldr	r1, [r2, #0]
 800aa2e:	1855      	adds	r5, r2, r1
 800aa30:	42a5      	cmp	r5, r4
 800aa32:	d10b      	bne.n	800aa4c <_free_r+0x70>
 800aa34:	6824      	ldr	r4, [r4, #0]
 800aa36:	4421      	add	r1, r4
 800aa38:	1854      	adds	r4, r2, r1
 800aa3a:	42a3      	cmp	r3, r4
 800aa3c:	6011      	str	r1, [r2, #0]
 800aa3e:	d1e0      	bne.n	800aa02 <_free_r+0x26>
 800aa40:	681c      	ldr	r4, [r3, #0]
 800aa42:	685b      	ldr	r3, [r3, #4]
 800aa44:	6053      	str	r3, [r2, #4]
 800aa46:	440c      	add	r4, r1
 800aa48:	6014      	str	r4, [r2, #0]
 800aa4a:	e7da      	b.n	800aa02 <_free_r+0x26>
 800aa4c:	d902      	bls.n	800aa54 <_free_r+0x78>
 800aa4e:	230c      	movs	r3, #12
 800aa50:	6003      	str	r3, [r0, #0]
 800aa52:	e7d6      	b.n	800aa02 <_free_r+0x26>
 800aa54:	6825      	ldr	r5, [r4, #0]
 800aa56:	1961      	adds	r1, r4, r5
 800aa58:	428b      	cmp	r3, r1
 800aa5a:	bf04      	itt	eq
 800aa5c:	6819      	ldreq	r1, [r3, #0]
 800aa5e:	685b      	ldreq	r3, [r3, #4]
 800aa60:	6063      	str	r3, [r4, #4]
 800aa62:	bf04      	itt	eq
 800aa64:	1949      	addeq	r1, r1, r5
 800aa66:	6021      	streq	r1, [r4, #0]
 800aa68:	6054      	str	r4, [r2, #4]
 800aa6a:	e7ca      	b.n	800aa02 <_free_r+0x26>
 800aa6c:	b003      	add	sp, #12
 800aa6e:	bd30      	pop	{r4, r5, pc}
 800aa70:	20000808 	.word	0x20000808

0800aa74 <sbrk_aligned>:
 800aa74:	b570      	push	{r4, r5, r6, lr}
 800aa76:	4e0e      	ldr	r6, [pc, #56]	; (800aab0 <sbrk_aligned+0x3c>)
 800aa78:	460c      	mov	r4, r1
 800aa7a:	6831      	ldr	r1, [r6, #0]
 800aa7c:	4605      	mov	r5, r0
 800aa7e:	b911      	cbnz	r1, 800aa86 <sbrk_aligned+0x12>
 800aa80:	f000 fcaa 	bl	800b3d8 <_sbrk_r>
 800aa84:	6030      	str	r0, [r6, #0]
 800aa86:	4621      	mov	r1, r4
 800aa88:	4628      	mov	r0, r5
 800aa8a:	f000 fca5 	bl	800b3d8 <_sbrk_r>
 800aa8e:	1c43      	adds	r3, r0, #1
 800aa90:	d00a      	beq.n	800aaa8 <sbrk_aligned+0x34>
 800aa92:	1cc4      	adds	r4, r0, #3
 800aa94:	f024 0403 	bic.w	r4, r4, #3
 800aa98:	42a0      	cmp	r0, r4
 800aa9a:	d007      	beq.n	800aaac <sbrk_aligned+0x38>
 800aa9c:	1a21      	subs	r1, r4, r0
 800aa9e:	4628      	mov	r0, r5
 800aaa0:	f000 fc9a 	bl	800b3d8 <_sbrk_r>
 800aaa4:	3001      	adds	r0, #1
 800aaa6:	d101      	bne.n	800aaac <sbrk_aligned+0x38>
 800aaa8:	f04f 34ff 	mov.w	r4, #4294967295
 800aaac:	4620      	mov	r0, r4
 800aaae:	bd70      	pop	{r4, r5, r6, pc}
 800aab0:	2000080c 	.word	0x2000080c

0800aab4 <_malloc_r>:
 800aab4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800aab8:	1ccd      	adds	r5, r1, #3
 800aaba:	f025 0503 	bic.w	r5, r5, #3
 800aabe:	3508      	adds	r5, #8
 800aac0:	2d0c      	cmp	r5, #12
 800aac2:	bf38      	it	cc
 800aac4:	250c      	movcc	r5, #12
 800aac6:	2d00      	cmp	r5, #0
 800aac8:	4607      	mov	r7, r0
 800aaca:	db01      	blt.n	800aad0 <_malloc_r+0x1c>
 800aacc:	42a9      	cmp	r1, r5
 800aace:	d905      	bls.n	800aadc <_malloc_r+0x28>
 800aad0:	230c      	movs	r3, #12
 800aad2:	603b      	str	r3, [r7, #0]
 800aad4:	2600      	movs	r6, #0
 800aad6:	4630      	mov	r0, r6
 800aad8:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800aadc:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 800abb0 <_malloc_r+0xfc>
 800aae0:	f000 f868 	bl	800abb4 <__malloc_lock>
 800aae4:	f8d8 3000 	ldr.w	r3, [r8]
 800aae8:	461c      	mov	r4, r3
 800aaea:	bb5c      	cbnz	r4, 800ab44 <_malloc_r+0x90>
 800aaec:	4629      	mov	r1, r5
 800aaee:	4638      	mov	r0, r7
 800aaf0:	f7ff ffc0 	bl	800aa74 <sbrk_aligned>
 800aaf4:	1c43      	adds	r3, r0, #1
 800aaf6:	4604      	mov	r4, r0
 800aaf8:	d155      	bne.n	800aba6 <_malloc_r+0xf2>
 800aafa:	f8d8 4000 	ldr.w	r4, [r8]
 800aafe:	4626      	mov	r6, r4
 800ab00:	2e00      	cmp	r6, #0
 800ab02:	d145      	bne.n	800ab90 <_malloc_r+0xdc>
 800ab04:	2c00      	cmp	r4, #0
 800ab06:	d048      	beq.n	800ab9a <_malloc_r+0xe6>
 800ab08:	6823      	ldr	r3, [r4, #0]
 800ab0a:	4631      	mov	r1, r6
 800ab0c:	4638      	mov	r0, r7
 800ab0e:	eb04 0903 	add.w	r9, r4, r3
 800ab12:	f000 fc61 	bl	800b3d8 <_sbrk_r>
 800ab16:	4581      	cmp	r9, r0
 800ab18:	d13f      	bne.n	800ab9a <_malloc_r+0xe6>
 800ab1a:	6821      	ldr	r1, [r4, #0]
 800ab1c:	1a6d      	subs	r5, r5, r1
 800ab1e:	4629      	mov	r1, r5
 800ab20:	4638      	mov	r0, r7
 800ab22:	f7ff ffa7 	bl	800aa74 <sbrk_aligned>
 800ab26:	3001      	adds	r0, #1
 800ab28:	d037      	beq.n	800ab9a <_malloc_r+0xe6>
 800ab2a:	6823      	ldr	r3, [r4, #0]
 800ab2c:	442b      	add	r3, r5
 800ab2e:	6023      	str	r3, [r4, #0]
 800ab30:	f8d8 3000 	ldr.w	r3, [r8]
 800ab34:	2b00      	cmp	r3, #0
 800ab36:	d038      	beq.n	800abaa <_malloc_r+0xf6>
 800ab38:	685a      	ldr	r2, [r3, #4]
 800ab3a:	42a2      	cmp	r2, r4
 800ab3c:	d12b      	bne.n	800ab96 <_malloc_r+0xe2>
 800ab3e:	2200      	movs	r2, #0
 800ab40:	605a      	str	r2, [r3, #4]
 800ab42:	e00f      	b.n	800ab64 <_malloc_r+0xb0>
 800ab44:	6822      	ldr	r2, [r4, #0]
 800ab46:	1b52      	subs	r2, r2, r5
 800ab48:	d41f      	bmi.n	800ab8a <_malloc_r+0xd6>
 800ab4a:	2a0b      	cmp	r2, #11
 800ab4c:	d917      	bls.n	800ab7e <_malloc_r+0xca>
 800ab4e:	1961      	adds	r1, r4, r5
 800ab50:	42a3      	cmp	r3, r4
 800ab52:	6025      	str	r5, [r4, #0]
 800ab54:	bf18      	it	ne
 800ab56:	6059      	strne	r1, [r3, #4]
 800ab58:	6863      	ldr	r3, [r4, #4]
 800ab5a:	bf08      	it	eq
 800ab5c:	f8c8 1000 	streq.w	r1, [r8]
 800ab60:	5162      	str	r2, [r4, r5]
 800ab62:	604b      	str	r3, [r1, #4]
 800ab64:	4638      	mov	r0, r7
 800ab66:	f104 060b 	add.w	r6, r4, #11
 800ab6a:	f000 f829 	bl	800abc0 <__malloc_unlock>
 800ab6e:	f026 0607 	bic.w	r6, r6, #7
 800ab72:	1d23      	adds	r3, r4, #4
 800ab74:	1af2      	subs	r2, r6, r3
 800ab76:	d0ae      	beq.n	800aad6 <_malloc_r+0x22>
 800ab78:	1b9b      	subs	r3, r3, r6
 800ab7a:	50a3      	str	r3, [r4, r2]
 800ab7c:	e7ab      	b.n	800aad6 <_malloc_r+0x22>
 800ab7e:	42a3      	cmp	r3, r4
 800ab80:	6862      	ldr	r2, [r4, #4]
 800ab82:	d1dd      	bne.n	800ab40 <_malloc_r+0x8c>
 800ab84:	f8c8 2000 	str.w	r2, [r8]
 800ab88:	e7ec      	b.n	800ab64 <_malloc_r+0xb0>
 800ab8a:	4623      	mov	r3, r4
 800ab8c:	6864      	ldr	r4, [r4, #4]
 800ab8e:	e7ac      	b.n	800aaea <_malloc_r+0x36>
 800ab90:	4634      	mov	r4, r6
 800ab92:	6876      	ldr	r6, [r6, #4]
 800ab94:	e7b4      	b.n	800ab00 <_malloc_r+0x4c>
 800ab96:	4613      	mov	r3, r2
 800ab98:	e7cc      	b.n	800ab34 <_malloc_r+0x80>
 800ab9a:	230c      	movs	r3, #12
 800ab9c:	603b      	str	r3, [r7, #0]
 800ab9e:	4638      	mov	r0, r7
 800aba0:	f000 f80e 	bl	800abc0 <__malloc_unlock>
 800aba4:	e797      	b.n	800aad6 <_malloc_r+0x22>
 800aba6:	6025      	str	r5, [r4, #0]
 800aba8:	e7dc      	b.n	800ab64 <_malloc_r+0xb0>
 800abaa:	605b      	str	r3, [r3, #4]
 800abac:	deff      	udf	#255	; 0xff
 800abae:	bf00      	nop
 800abb0:	20000808 	.word	0x20000808

0800abb4 <__malloc_lock>:
 800abb4:	4801      	ldr	r0, [pc, #4]	; (800abbc <__malloc_lock+0x8>)
 800abb6:	f7ff bf0f 	b.w	800a9d8 <__retarget_lock_acquire_recursive>
 800abba:	bf00      	nop
 800abbc:	20000804 	.word	0x20000804

0800abc0 <__malloc_unlock>:
 800abc0:	4801      	ldr	r0, [pc, #4]	; (800abc8 <__malloc_unlock+0x8>)
 800abc2:	f7ff bf0a 	b.w	800a9da <__retarget_lock_release_recursive>
 800abc6:	bf00      	nop
 800abc8:	20000804 	.word	0x20000804

0800abcc <__sfputc_r>:
 800abcc:	6893      	ldr	r3, [r2, #8]
 800abce:	3b01      	subs	r3, #1
 800abd0:	2b00      	cmp	r3, #0
 800abd2:	b410      	push	{r4}
 800abd4:	6093      	str	r3, [r2, #8]
 800abd6:	da08      	bge.n	800abea <__sfputc_r+0x1e>
 800abd8:	6994      	ldr	r4, [r2, #24]
 800abda:	42a3      	cmp	r3, r4
 800abdc:	db01      	blt.n	800abe2 <__sfputc_r+0x16>
 800abde:	290a      	cmp	r1, #10
 800abe0:	d103      	bne.n	800abea <__sfputc_r+0x1e>
 800abe2:	f85d 4b04 	ldr.w	r4, [sp], #4
 800abe6:	f7ff bdea 	b.w	800a7be <__swbuf_r>
 800abea:	6813      	ldr	r3, [r2, #0]
 800abec:	1c58      	adds	r0, r3, #1
 800abee:	6010      	str	r0, [r2, #0]
 800abf0:	7019      	strb	r1, [r3, #0]
 800abf2:	4608      	mov	r0, r1
 800abf4:	f85d 4b04 	ldr.w	r4, [sp], #4
 800abf8:	4770      	bx	lr

0800abfa <__sfputs_r>:
 800abfa:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800abfc:	4606      	mov	r6, r0
 800abfe:	460f      	mov	r7, r1
 800ac00:	4614      	mov	r4, r2
 800ac02:	18d5      	adds	r5, r2, r3
 800ac04:	42ac      	cmp	r4, r5
 800ac06:	d101      	bne.n	800ac0c <__sfputs_r+0x12>
 800ac08:	2000      	movs	r0, #0
 800ac0a:	e007      	b.n	800ac1c <__sfputs_r+0x22>
 800ac0c:	f814 1b01 	ldrb.w	r1, [r4], #1
 800ac10:	463a      	mov	r2, r7
 800ac12:	4630      	mov	r0, r6
 800ac14:	f7ff ffda 	bl	800abcc <__sfputc_r>
 800ac18:	1c43      	adds	r3, r0, #1
 800ac1a:	d1f3      	bne.n	800ac04 <__sfputs_r+0xa>
 800ac1c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800ac20 <_vfiprintf_r>:
 800ac20:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ac24:	460d      	mov	r5, r1
 800ac26:	b09d      	sub	sp, #116	; 0x74
 800ac28:	4614      	mov	r4, r2
 800ac2a:	4698      	mov	r8, r3
 800ac2c:	4606      	mov	r6, r0
 800ac2e:	b118      	cbz	r0, 800ac38 <_vfiprintf_r+0x18>
 800ac30:	6a03      	ldr	r3, [r0, #32]
 800ac32:	b90b      	cbnz	r3, 800ac38 <_vfiprintf_r+0x18>
 800ac34:	f7ff fcdc 	bl	800a5f0 <__sinit>
 800ac38:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800ac3a:	07d9      	lsls	r1, r3, #31
 800ac3c:	d405      	bmi.n	800ac4a <_vfiprintf_r+0x2a>
 800ac3e:	89ab      	ldrh	r3, [r5, #12]
 800ac40:	059a      	lsls	r2, r3, #22
 800ac42:	d402      	bmi.n	800ac4a <_vfiprintf_r+0x2a>
 800ac44:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800ac46:	f7ff fec7 	bl	800a9d8 <__retarget_lock_acquire_recursive>
 800ac4a:	89ab      	ldrh	r3, [r5, #12]
 800ac4c:	071b      	lsls	r3, r3, #28
 800ac4e:	d501      	bpl.n	800ac54 <_vfiprintf_r+0x34>
 800ac50:	692b      	ldr	r3, [r5, #16]
 800ac52:	b99b      	cbnz	r3, 800ac7c <_vfiprintf_r+0x5c>
 800ac54:	4629      	mov	r1, r5
 800ac56:	4630      	mov	r0, r6
 800ac58:	f7ff fdee 	bl	800a838 <__swsetup_r>
 800ac5c:	b170      	cbz	r0, 800ac7c <_vfiprintf_r+0x5c>
 800ac5e:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800ac60:	07dc      	lsls	r4, r3, #31
 800ac62:	d504      	bpl.n	800ac6e <_vfiprintf_r+0x4e>
 800ac64:	f04f 30ff 	mov.w	r0, #4294967295
 800ac68:	b01d      	add	sp, #116	; 0x74
 800ac6a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ac6e:	89ab      	ldrh	r3, [r5, #12]
 800ac70:	0598      	lsls	r0, r3, #22
 800ac72:	d4f7      	bmi.n	800ac64 <_vfiprintf_r+0x44>
 800ac74:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800ac76:	f7ff feb0 	bl	800a9da <__retarget_lock_release_recursive>
 800ac7a:	e7f3      	b.n	800ac64 <_vfiprintf_r+0x44>
 800ac7c:	2300      	movs	r3, #0
 800ac7e:	9309      	str	r3, [sp, #36]	; 0x24
 800ac80:	2320      	movs	r3, #32
 800ac82:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800ac86:	f8cd 800c 	str.w	r8, [sp, #12]
 800ac8a:	2330      	movs	r3, #48	; 0x30
 800ac8c:	f8df 81b0 	ldr.w	r8, [pc, #432]	; 800ae40 <_vfiprintf_r+0x220>
 800ac90:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800ac94:	f04f 0901 	mov.w	r9, #1
 800ac98:	4623      	mov	r3, r4
 800ac9a:	469a      	mov	sl, r3
 800ac9c:	f813 2b01 	ldrb.w	r2, [r3], #1
 800aca0:	b10a      	cbz	r2, 800aca6 <_vfiprintf_r+0x86>
 800aca2:	2a25      	cmp	r2, #37	; 0x25
 800aca4:	d1f9      	bne.n	800ac9a <_vfiprintf_r+0x7a>
 800aca6:	ebba 0b04 	subs.w	fp, sl, r4
 800acaa:	d00b      	beq.n	800acc4 <_vfiprintf_r+0xa4>
 800acac:	465b      	mov	r3, fp
 800acae:	4622      	mov	r2, r4
 800acb0:	4629      	mov	r1, r5
 800acb2:	4630      	mov	r0, r6
 800acb4:	f7ff ffa1 	bl	800abfa <__sfputs_r>
 800acb8:	3001      	adds	r0, #1
 800acba:	f000 80a9 	beq.w	800ae10 <_vfiprintf_r+0x1f0>
 800acbe:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800acc0:	445a      	add	r2, fp
 800acc2:	9209      	str	r2, [sp, #36]	; 0x24
 800acc4:	f89a 3000 	ldrb.w	r3, [sl]
 800acc8:	2b00      	cmp	r3, #0
 800acca:	f000 80a1 	beq.w	800ae10 <_vfiprintf_r+0x1f0>
 800acce:	2300      	movs	r3, #0
 800acd0:	f04f 32ff 	mov.w	r2, #4294967295
 800acd4:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800acd8:	f10a 0a01 	add.w	sl, sl, #1
 800acdc:	9304      	str	r3, [sp, #16]
 800acde:	9307      	str	r3, [sp, #28]
 800ace0:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800ace4:	931a      	str	r3, [sp, #104]	; 0x68
 800ace6:	4654      	mov	r4, sl
 800ace8:	2205      	movs	r2, #5
 800acea:	f814 1b01 	ldrb.w	r1, [r4], #1
 800acee:	4854      	ldr	r0, [pc, #336]	; (800ae40 <_vfiprintf_r+0x220>)
 800acf0:	f7f5 fb0e 	bl	8000310 <memchr>
 800acf4:	9a04      	ldr	r2, [sp, #16]
 800acf6:	b9d8      	cbnz	r0, 800ad30 <_vfiprintf_r+0x110>
 800acf8:	06d1      	lsls	r1, r2, #27
 800acfa:	bf44      	itt	mi
 800acfc:	2320      	movmi	r3, #32
 800acfe:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800ad02:	0713      	lsls	r3, r2, #28
 800ad04:	bf44      	itt	mi
 800ad06:	232b      	movmi	r3, #43	; 0x2b
 800ad08:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800ad0c:	f89a 3000 	ldrb.w	r3, [sl]
 800ad10:	2b2a      	cmp	r3, #42	; 0x2a
 800ad12:	d015      	beq.n	800ad40 <_vfiprintf_r+0x120>
 800ad14:	9a07      	ldr	r2, [sp, #28]
 800ad16:	4654      	mov	r4, sl
 800ad18:	2000      	movs	r0, #0
 800ad1a:	f04f 0c0a 	mov.w	ip, #10
 800ad1e:	4621      	mov	r1, r4
 800ad20:	f811 3b01 	ldrb.w	r3, [r1], #1
 800ad24:	3b30      	subs	r3, #48	; 0x30
 800ad26:	2b09      	cmp	r3, #9
 800ad28:	d94d      	bls.n	800adc6 <_vfiprintf_r+0x1a6>
 800ad2a:	b1b0      	cbz	r0, 800ad5a <_vfiprintf_r+0x13a>
 800ad2c:	9207      	str	r2, [sp, #28]
 800ad2e:	e014      	b.n	800ad5a <_vfiprintf_r+0x13a>
 800ad30:	eba0 0308 	sub.w	r3, r0, r8
 800ad34:	fa09 f303 	lsl.w	r3, r9, r3
 800ad38:	4313      	orrs	r3, r2
 800ad3a:	9304      	str	r3, [sp, #16]
 800ad3c:	46a2      	mov	sl, r4
 800ad3e:	e7d2      	b.n	800ace6 <_vfiprintf_r+0xc6>
 800ad40:	9b03      	ldr	r3, [sp, #12]
 800ad42:	1d19      	adds	r1, r3, #4
 800ad44:	681b      	ldr	r3, [r3, #0]
 800ad46:	9103      	str	r1, [sp, #12]
 800ad48:	2b00      	cmp	r3, #0
 800ad4a:	bfbb      	ittet	lt
 800ad4c:	425b      	neglt	r3, r3
 800ad4e:	f042 0202 	orrlt.w	r2, r2, #2
 800ad52:	9307      	strge	r3, [sp, #28]
 800ad54:	9307      	strlt	r3, [sp, #28]
 800ad56:	bfb8      	it	lt
 800ad58:	9204      	strlt	r2, [sp, #16]
 800ad5a:	7823      	ldrb	r3, [r4, #0]
 800ad5c:	2b2e      	cmp	r3, #46	; 0x2e
 800ad5e:	d10c      	bne.n	800ad7a <_vfiprintf_r+0x15a>
 800ad60:	7863      	ldrb	r3, [r4, #1]
 800ad62:	2b2a      	cmp	r3, #42	; 0x2a
 800ad64:	d134      	bne.n	800add0 <_vfiprintf_r+0x1b0>
 800ad66:	9b03      	ldr	r3, [sp, #12]
 800ad68:	1d1a      	adds	r2, r3, #4
 800ad6a:	681b      	ldr	r3, [r3, #0]
 800ad6c:	9203      	str	r2, [sp, #12]
 800ad6e:	2b00      	cmp	r3, #0
 800ad70:	bfb8      	it	lt
 800ad72:	f04f 33ff 	movlt.w	r3, #4294967295
 800ad76:	3402      	adds	r4, #2
 800ad78:	9305      	str	r3, [sp, #20]
 800ad7a:	f8df a0d4 	ldr.w	sl, [pc, #212]	; 800ae50 <_vfiprintf_r+0x230>
 800ad7e:	7821      	ldrb	r1, [r4, #0]
 800ad80:	2203      	movs	r2, #3
 800ad82:	4650      	mov	r0, sl
 800ad84:	f7f5 fac4 	bl	8000310 <memchr>
 800ad88:	b138      	cbz	r0, 800ad9a <_vfiprintf_r+0x17a>
 800ad8a:	9b04      	ldr	r3, [sp, #16]
 800ad8c:	eba0 000a 	sub.w	r0, r0, sl
 800ad90:	2240      	movs	r2, #64	; 0x40
 800ad92:	4082      	lsls	r2, r0
 800ad94:	4313      	orrs	r3, r2
 800ad96:	3401      	adds	r4, #1
 800ad98:	9304      	str	r3, [sp, #16]
 800ad9a:	f814 1b01 	ldrb.w	r1, [r4], #1
 800ad9e:	4829      	ldr	r0, [pc, #164]	; (800ae44 <_vfiprintf_r+0x224>)
 800ada0:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800ada4:	2206      	movs	r2, #6
 800ada6:	f7f5 fab3 	bl	8000310 <memchr>
 800adaa:	2800      	cmp	r0, #0
 800adac:	d03f      	beq.n	800ae2e <_vfiprintf_r+0x20e>
 800adae:	4b26      	ldr	r3, [pc, #152]	; (800ae48 <_vfiprintf_r+0x228>)
 800adb0:	bb1b      	cbnz	r3, 800adfa <_vfiprintf_r+0x1da>
 800adb2:	9b03      	ldr	r3, [sp, #12]
 800adb4:	3307      	adds	r3, #7
 800adb6:	f023 0307 	bic.w	r3, r3, #7
 800adba:	3308      	adds	r3, #8
 800adbc:	9303      	str	r3, [sp, #12]
 800adbe:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800adc0:	443b      	add	r3, r7
 800adc2:	9309      	str	r3, [sp, #36]	; 0x24
 800adc4:	e768      	b.n	800ac98 <_vfiprintf_r+0x78>
 800adc6:	fb0c 3202 	mla	r2, ip, r2, r3
 800adca:	460c      	mov	r4, r1
 800adcc:	2001      	movs	r0, #1
 800adce:	e7a6      	b.n	800ad1e <_vfiprintf_r+0xfe>
 800add0:	2300      	movs	r3, #0
 800add2:	3401      	adds	r4, #1
 800add4:	9305      	str	r3, [sp, #20]
 800add6:	4619      	mov	r1, r3
 800add8:	f04f 0c0a 	mov.w	ip, #10
 800addc:	4620      	mov	r0, r4
 800adde:	f810 2b01 	ldrb.w	r2, [r0], #1
 800ade2:	3a30      	subs	r2, #48	; 0x30
 800ade4:	2a09      	cmp	r2, #9
 800ade6:	d903      	bls.n	800adf0 <_vfiprintf_r+0x1d0>
 800ade8:	2b00      	cmp	r3, #0
 800adea:	d0c6      	beq.n	800ad7a <_vfiprintf_r+0x15a>
 800adec:	9105      	str	r1, [sp, #20]
 800adee:	e7c4      	b.n	800ad7a <_vfiprintf_r+0x15a>
 800adf0:	fb0c 2101 	mla	r1, ip, r1, r2
 800adf4:	4604      	mov	r4, r0
 800adf6:	2301      	movs	r3, #1
 800adf8:	e7f0      	b.n	800addc <_vfiprintf_r+0x1bc>
 800adfa:	ab03      	add	r3, sp, #12
 800adfc:	9300      	str	r3, [sp, #0]
 800adfe:	462a      	mov	r2, r5
 800ae00:	4b12      	ldr	r3, [pc, #72]	; (800ae4c <_vfiprintf_r+0x22c>)
 800ae02:	a904      	add	r1, sp, #16
 800ae04:	4630      	mov	r0, r6
 800ae06:	f3af 8000 	nop.w
 800ae0a:	4607      	mov	r7, r0
 800ae0c:	1c78      	adds	r0, r7, #1
 800ae0e:	d1d6      	bne.n	800adbe <_vfiprintf_r+0x19e>
 800ae10:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800ae12:	07d9      	lsls	r1, r3, #31
 800ae14:	d405      	bmi.n	800ae22 <_vfiprintf_r+0x202>
 800ae16:	89ab      	ldrh	r3, [r5, #12]
 800ae18:	059a      	lsls	r2, r3, #22
 800ae1a:	d402      	bmi.n	800ae22 <_vfiprintf_r+0x202>
 800ae1c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800ae1e:	f7ff fddc 	bl	800a9da <__retarget_lock_release_recursive>
 800ae22:	89ab      	ldrh	r3, [r5, #12]
 800ae24:	065b      	lsls	r3, r3, #25
 800ae26:	f53f af1d 	bmi.w	800ac64 <_vfiprintf_r+0x44>
 800ae2a:	9809      	ldr	r0, [sp, #36]	; 0x24
 800ae2c:	e71c      	b.n	800ac68 <_vfiprintf_r+0x48>
 800ae2e:	ab03      	add	r3, sp, #12
 800ae30:	9300      	str	r3, [sp, #0]
 800ae32:	462a      	mov	r2, r5
 800ae34:	4b05      	ldr	r3, [pc, #20]	; (800ae4c <_vfiprintf_r+0x22c>)
 800ae36:	a904      	add	r1, sp, #16
 800ae38:	4630      	mov	r0, r6
 800ae3a:	f000 f879 	bl	800af30 <_printf_i>
 800ae3e:	e7e4      	b.n	800ae0a <_vfiprintf_r+0x1ea>
 800ae40:	0800b86c 	.word	0x0800b86c
 800ae44:	0800b876 	.word	0x0800b876
 800ae48:	00000000 	.word	0x00000000
 800ae4c:	0800abfb 	.word	0x0800abfb
 800ae50:	0800b872 	.word	0x0800b872

0800ae54 <_printf_common>:
 800ae54:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800ae58:	4616      	mov	r6, r2
 800ae5a:	4699      	mov	r9, r3
 800ae5c:	688a      	ldr	r2, [r1, #8]
 800ae5e:	690b      	ldr	r3, [r1, #16]
 800ae60:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800ae64:	4293      	cmp	r3, r2
 800ae66:	bfb8      	it	lt
 800ae68:	4613      	movlt	r3, r2
 800ae6a:	6033      	str	r3, [r6, #0]
 800ae6c:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800ae70:	4607      	mov	r7, r0
 800ae72:	460c      	mov	r4, r1
 800ae74:	b10a      	cbz	r2, 800ae7a <_printf_common+0x26>
 800ae76:	3301      	adds	r3, #1
 800ae78:	6033      	str	r3, [r6, #0]
 800ae7a:	6823      	ldr	r3, [r4, #0]
 800ae7c:	0699      	lsls	r1, r3, #26
 800ae7e:	bf42      	ittt	mi
 800ae80:	6833      	ldrmi	r3, [r6, #0]
 800ae82:	3302      	addmi	r3, #2
 800ae84:	6033      	strmi	r3, [r6, #0]
 800ae86:	6825      	ldr	r5, [r4, #0]
 800ae88:	f015 0506 	ands.w	r5, r5, #6
 800ae8c:	d106      	bne.n	800ae9c <_printf_common+0x48>
 800ae8e:	f104 0a19 	add.w	sl, r4, #25
 800ae92:	68e3      	ldr	r3, [r4, #12]
 800ae94:	6832      	ldr	r2, [r6, #0]
 800ae96:	1a9b      	subs	r3, r3, r2
 800ae98:	42ab      	cmp	r3, r5
 800ae9a:	dc26      	bgt.n	800aeea <_printf_common+0x96>
 800ae9c:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800aea0:	1e13      	subs	r3, r2, #0
 800aea2:	6822      	ldr	r2, [r4, #0]
 800aea4:	bf18      	it	ne
 800aea6:	2301      	movne	r3, #1
 800aea8:	0692      	lsls	r2, r2, #26
 800aeaa:	d42b      	bmi.n	800af04 <_printf_common+0xb0>
 800aeac:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800aeb0:	4649      	mov	r1, r9
 800aeb2:	4638      	mov	r0, r7
 800aeb4:	47c0      	blx	r8
 800aeb6:	3001      	adds	r0, #1
 800aeb8:	d01e      	beq.n	800aef8 <_printf_common+0xa4>
 800aeba:	6823      	ldr	r3, [r4, #0]
 800aebc:	6922      	ldr	r2, [r4, #16]
 800aebe:	f003 0306 	and.w	r3, r3, #6
 800aec2:	2b04      	cmp	r3, #4
 800aec4:	bf02      	ittt	eq
 800aec6:	68e5      	ldreq	r5, [r4, #12]
 800aec8:	6833      	ldreq	r3, [r6, #0]
 800aeca:	1aed      	subeq	r5, r5, r3
 800aecc:	68a3      	ldr	r3, [r4, #8]
 800aece:	bf0c      	ite	eq
 800aed0:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800aed4:	2500      	movne	r5, #0
 800aed6:	4293      	cmp	r3, r2
 800aed8:	bfc4      	itt	gt
 800aeda:	1a9b      	subgt	r3, r3, r2
 800aedc:	18ed      	addgt	r5, r5, r3
 800aede:	2600      	movs	r6, #0
 800aee0:	341a      	adds	r4, #26
 800aee2:	42b5      	cmp	r5, r6
 800aee4:	d11a      	bne.n	800af1c <_printf_common+0xc8>
 800aee6:	2000      	movs	r0, #0
 800aee8:	e008      	b.n	800aefc <_printf_common+0xa8>
 800aeea:	2301      	movs	r3, #1
 800aeec:	4652      	mov	r2, sl
 800aeee:	4649      	mov	r1, r9
 800aef0:	4638      	mov	r0, r7
 800aef2:	47c0      	blx	r8
 800aef4:	3001      	adds	r0, #1
 800aef6:	d103      	bne.n	800af00 <_printf_common+0xac>
 800aef8:	f04f 30ff 	mov.w	r0, #4294967295
 800aefc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800af00:	3501      	adds	r5, #1
 800af02:	e7c6      	b.n	800ae92 <_printf_common+0x3e>
 800af04:	18e1      	adds	r1, r4, r3
 800af06:	1c5a      	adds	r2, r3, #1
 800af08:	2030      	movs	r0, #48	; 0x30
 800af0a:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800af0e:	4422      	add	r2, r4
 800af10:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800af14:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800af18:	3302      	adds	r3, #2
 800af1a:	e7c7      	b.n	800aeac <_printf_common+0x58>
 800af1c:	2301      	movs	r3, #1
 800af1e:	4622      	mov	r2, r4
 800af20:	4649      	mov	r1, r9
 800af22:	4638      	mov	r0, r7
 800af24:	47c0      	blx	r8
 800af26:	3001      	adds	r0, #1
 800af28:	d0e6      	beq.n	800aef8 <_printf_common+0xa4>
 800af2a:	3601      	adds	r6, #1
 800af2c:	e7d9      	b.n	800aee2 <_printf_common+0x8e>
	...

0800af30 <_printf_i>:
 800af30:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800af34:	7e0f      	ldrb	r7, [r1, #24]
 800af36:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 800af38:	2f78      	cmp	r7, #120	; 0x78
 800af3a:	4691      	mov	r9, r2
 800af3c:	4680      	mov	r8, r0
 800af3e:	460c      	mov	r4, r1
 800af40:	469a      	mov	sl, r3
 800af42:	f101 0243 	add.w	r2, r1, #67	; 0x43
 800af46:	d807      	bhi.n	800af58 <_printf_i+0x28>
 800af48:	2f62      	cmp	r7, #98	; 0x62
 800af4a:	d80a      	bhi.n	800af62 <_printf_i+0x32>
 800af4c:	2f00      	cmp	r7, #0
 800af4e:	f000 80d4 	beq.w	800b0fa <_printf_i+0x1ca>
 800af52:	2f58      	cmp	r7, #88	; 0x58
 800af54:	f000 80c0 	beq.w	800b0d8 <_printf_i+0x1a8>
 800af58:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800af5c:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800af60:	e03a      	b.n	800afd8 <_printf_i+0xa8>
 800af62:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800af66:	2b15      	cmp	r3, #21
 800af68:	d8f6      	bhi.n	800af58 <_printf_i+0x28>
 800af6a:	a101      	add	r1, pc, #4	; (adr r1, 800af70 <_printf_i+0x40>)
 800af6c:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800af70:	0800afc9 	.word	0x0800afc9
 800af74:	0800afdd 	.word	0x0800afdd
 800af78:	0800af59 	.word	0x0800af59
 800af7c:	0800af59 	.word	0x0800af59
 800af80:	0800af59 	.word	0x0800af59
 800af84:	0800af59 	.word	0x0800af59
 800af88:	0800afdd 	.word	0x0800afdd
 800af8c:	0800af59 	.word	0x0800af59
 800af90:	0800af59 	.word	0x0800af59
 800af94:	0800af59 	.word	0x0800af59
 800af98:	0800af59 	.word	0x0800af59
 800af9c:	0800b0e1 	.word	0x0800b0e1
 800afa0:	0800b009 	.word	0x0800b009
 800afa4:	0800b09b 	.word	0x0800b09b
 800afa8:	0800af59 	.word	0x0800af59
 800afac:	0800af59 	.word	0x0800af59
 800afb0:	0800b103 	.word	0x0800b103
 800afb4:	0800af59 	.word	0x0800af59
 800afb8:	0800b009 	.word	0x0800b009
 800afbc:	0800af59 	.word	0x0800af59
 800afc0:	0800af59 	.word	0x0800af59
 800afc4:	0800b0a3 	.word	0x0800b0a3
 800afc8:	682b      	ldr	r3, [r5, #0]
 800afca:	1d1a      	adds	r2, r3, #4
 800afcc:	681b      	ldr	r3, [r3, #0]
 800afce:	602a      	str	r2, [r5, #0]
 800afd0:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800afd4:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800afd8:	2301      	movs	r3, #1
 800afda:	e09f      	b.n	800b11c <_printf_i+0x1ec>
 800afdc:	6820      	ldr	r0, [r4, #0]
 800afde:	682b      	ldr	r3, [r5, #0]
 800afe0:	0607      	lsls	r7, r0, #24
 800afe2:	f103 0104 	add.w	r1, r3, #4
 800afe6:	6029      	str	r1, [r5, #0]
 800afe8:	d501      	bpl.n	800afee <_printf_i+0xbe>
 800afea:	681e      	ldr	r6, [r3, #0]
 800afec:	e003      	b.n	800aff6 <_printf_i+0xc6>
 800afee:	0646      	lsls	r6, r0, #25
 800aff0:	d5fb      	bpl.n	800afea <_printf_i+0xba>
 800aff2:	f9b3 6000 	ldrsh.w	r6, [r3]
 800aff6:	2e00      	cmp	r6, #0
 800aff8:	da03      	bge.n	800b002 <_printf_i+0xd2>
 800affa:	232d      	movs	r3, #45	; 0x2d
 800affc:	4276      	negs	r6, r6
 800affe:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800b002:	485a      	ldr	r0, [pc, #360]	; (800b16c <_printf_i+0x23c>)
 800b004:	230a      	movs	r3, #10
 800b006:	e012      	b.n	800b02e <_printf_i+0xfe>
 800b008:	682b      	ldr	r3, [r5, #0]
 800b00a:	6820      	ldr	r0, [r4, #0]
 800b00c:	1d19      	adds	r1, r3, #4
 800b00e:	6029      	str	r1, [r5, #0]
 800b010:	0605      	lsls	r5, r0, #24
 800b012:	d501      	bpl.n	800b018 <_printf_i+0xe8>
 800b014:	681e      	ldr	r6, [r3, #0]
 800b016:	e002      	b.n	800b01e <_printf_i+0xee>
 800b018:	0641      	lsls	r1, r0, #25
 800b01a:	d5fb      	bpl.n	800b014 <_printf_i+0xe4>
 800b01c:	881e      	ldrh	r6, [r3, #0]
 800b01e:	4853      	ldr	r0, [pc, #332]	; (800b16c <_printf_i+0x23c>)
 800b020:	2f6f      	cmp	r7, #111	; 0x6f
 800b022:	bf0c      	ite	eq
 800b024:	2308      	moveq	r3, #8
 800b026:	230a      	movne	r3, #10
 800b028:	2100      	movs	r1, #0
 800b02a:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800b02e:	6865      	ldr	r5, [r4, #4]
 800b030:	60a5      	str	r5, [r4, #8]
 800b032:	2d00      	cmp	r5, #0
 800b034:	bfa2      	ittt	ge
 800b036:	6821      	ldrge	r1, [r4, #0]
 800b038:	f021 0104 	bicge.w	r1, r1, #4
 800b03c:	6021      	strge	r1, [r4, #0]
 800b03e:	b90e      	cbnz	r6, 800b044 <_printf_i+0x114>
 800b040:	2d00      	cmp	r5, #0
 800b042:	d04b      	beq.n	800b0dc <_printf_i+0x1ac>
 800b044:	4615      	mov	r5, r2
 800b046:	fbb6 f1f3 	udiv	r1, r6, r3
 800b04a:	fb03 6711 	mls	r7, r3, r1, r6
 800b04e:	5dc7      	ldrb	r7, [r0, r7]
 800b050:	f805 7d01 	strb.w	r7, [r5, #-1]!
 800b054:	4637      	mov	r7, r6
 800b056:	42bb      	cmp	r3, r7
 800b058:	460e      	mov	r6, r1
 800b05a:	d9f4      	bls.n	800b046 <_printf_i+0x116>
 800b05c:	2b08      	cmp	r3, #8
 800b05e:	d10b      	bne.n	800b078 <_printf_i+0x148>
 800b060:	6823      	ldr	r3, [r4, #0]
 800b062:	07de      	lsls	r6, r3, #31
 800b064:	d508      	bpl.n	800b078 <_printf_i+0x148>
 800b066:	6923      	ldr	r3, [r4, #16]
 800b068:	6861      	ldr	r1, [r4, #4]
 800b06a:	4299      	cmp	r1, r3
 800b06c:	bfde      	ittt	le
 800b06e:	2330      	movle	r3, #48	; 0x30
 800b070:	f805 3c01 	strble.w	r3, [r5, #-1]
 800b074:	f105 35ff 	addle.w	r5, r5, #4294967295
 800b078:	1b52      	subs	r2, r2, r5
 800b07a:	6122      	str	r2, [r4, #16]
 800b07c:	f8cd a000 	str.w	sl, [sp]
 800b080:	464b      	mov	r3, r9
 800b082:	aa03      	add	r2, sp, #12
 800b084:	4621      	mov	r1, r4
 800b086:	4640      	mov	r0, r8
 800b088:	f7ff fee4 	bl	800ae54 <_printf_common>
 800b08c:	3001      	adds	r0, #1
 800b08e:	d14a      	bne.n	800b126 <_printf_i+0x1f6>
 800b090:	f04f 30ff 	mov.w	r0, #4294967295
 800b094:	b004      	add	sp, #16
 800b096:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800b09a:	6823      	ldr	r3, [r4, #0]
 800b09c:	f043 0320 	orr.w	r3, r3, #32
 800b0a0:	6023      	str	r3, [r4, #0]
 800b0a2:	4833      	ldr	r0, [pc, #204]	; (800b170 <_printf_i+0x240>)
 800b0a4:	2778      	movs	r7, #120	; 0x78
 800b0a6:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 800b0aa:	6823      	ldr	r3, [r4, #0]
 800b0ac:	6829      	ldr	r1, [r5, #0]
 800b0ae:	061f      	lsls	r7, r3, #24
 800b0b0:	f851 6b04 	ldr.w	r6, [r1], #4
 800b0b4:	d402      	bmi.n	800b0bc <_printf_i+0x18c>
 800b0b6:	065f      	lsls	r7, r3, #25
 800b0b8:	bf48      	it	mi
 800b0ba:	b2b6      	uxthmi	r6, r6
 800b0bc:	07df      	lsls	r7, r3, #31
 800b0be:	bf48      	it	mi
 800b0c0:	f043 0320 	orrmi.w	r3, r3, #32
 800b0c4:	6029      	str	r1, [r5, #0]
 800b0c6:	bf48      	it	mi
 800b0c8:	6023      	strmi	r3, [r4, #0]
 800b0ca:	b91e      	cbnz	r6, 800b0d4 <_printf_i+0x1a4>
 800b0cc:	6823      	ldr	r3, [r4, #0]
 800b0ce:	f023 0320 	bic.w	r3, r3, #32
 800b0d2:	6023      	str	r3, [r4, #0]
 800b0d4:	2310      	movs	r3, #16
 800b0d6:	e7a7      	b.n	800b028 <_printf_i+0xf8>
 800b0d8:	4824      	ldr	r0, [pc, #144]	; (800b16c <_printf_i+0x23c>)
 800b0da:	e7e4      	b.n	800b0a6 <_printf_i+0x176>
 800b0dc:	4615      	mov	r5, r2
 800b0de:	e7bd      	b.n	800b05c <_printf_i+0x12c>
 800b0e0:	682b      	ldr	r3, [r5, #0]
 800b0e2:	6826      	ldr	r6, [r4, #0]
 800b0e4:	6961      	ldr	r1, [r4, #20]
 800b0e6:	1d18      	adds	r0, r3, #4
 800b0e8:	6028      	str	r0, [r5, #0]
 800b0ea:	0635      	lsls	r5, r6, #24
 800b0ec:	681b      	ldr	r3, [r3, #0]
 800b0ee:	d501      	bpl.n	800b0f4 <_printf_i+0x1c4>
 800b0f0:	6019      	str	r1, [r3, #0]
 800b0f2:	e002      	b.n	800b0fa <_printf_i+0x1ca>
 800b0f4:	0670      	lsls	r0, r6, #25
 800b0f6:	d5fb      	bpl.n	800b0f0 <_printf_i+0x1c0>
 800b0f8:	8019      	strh	r1, [r3, #0]
 800b0fa:	2300      	movs	r3, #0
 800b0fc:	6123      	str	r3, [r4, #16]
 800b0fe:	4615      	mov	r5, r2
 800b100:	e7bc      	b.n	800b07c <_printf_i+0x14c>
 800b102:	682b      	ldr	r3, [r5, #0]
 800b104:	1d1a      	adds	r2, r3, #4
 800b106:	602a      	str	r2, [r5, #0]
 800b108:	681d      	ldr	r5, [r3, #0]
 800b10a:	6862      	ldr	r2, [r4, #4]
 800b10c:	2100      	movs	r1, #0
 800b10e:	4628      	mov	r0, r5
 800b110:	f7f5 f8fe 	bl	8000310 <memchr>
 800b114:	b108      	cbz	r0, 800b11a <_printf_i+0x1ea>
 800b116:	1b40      	subs	r0, r0, r5
 800b118:	6060      	str	r0, [r4, #4]
 800b11a:	6863      	ldr	r3, [r4, #4]
 800b11c:	6123      	str	r3, [r4, #16]
 800b11e:	2300      	movs	r3, #0
 800b120:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800b124:	e7aa      	b.n	800b07c <_printf_i+0x14c>
 800b126:	6923      	ldr	r3, [r4, #16]
 800b128:	462a      	mov	r2, r5
 800b12a:	4649      	mov	r1, r9
 800b12c:	4640      	mov	r0, r8
 800b12e:	47d0      	blx	sl
 800b130:	3001      	adds	r0, #1
 800b132:	d0ad      	beq.n	800b090 <_printf_i+0x160>
 800b134:	6823      	ldr	r3, [r4, #0]
 800b136:	079b      	lsls	r3, r3, #30
 800b138:	d413      	bmi.n	800b162 <_printf_i+0x232>
 800b13a:	68e0      	ldr	r0, [r4, #12]
 800b13c:	9b03      	ldr	r3, [sp, #12]
 800b13e:	4298      	cmp	r0, r3
 800b140:	bfb8      	it	lt
 800b142:	4618      	movlt	r0, r3
 800b144:	e7a6      	b.n	800b094 <_printf_i+0x164>
 800b146:	2301      	movs	r3, #1
 800b148:	4632      	mov	r2, r6
 800b14a:	4649      	mov	r1, r9
 800b14c:	4640      	mov	r0, r8
 800b14e:	47d0      	blx	sl
 800b150:	3001      	adds	r0, #1
 800b152:	d09d      	beq.n	800b090 <_printf_i+0x160>
 800b154:	3501      	adds	r5, #1
 800b156:	68e3      	ldr	r3, [r4, #12]
 800b158:	9903      	ldr	r1, [sp, #12]
 800b15a:	1a5b      	subs	r3, r3, r1
 800b15c:	42ab      	cmp	r3, r5
 800b15e:	dcf2      	bgt.n	800b146 <_printf_i+0x216>
 800b160:	e7eb      	b.n	800b13a <_printf_i+0x20a>
 800b162:	2500      	movs	r5, #0
 800b164:	f104 0619 	add.w	r6, r4, #25
 800b168:	e7f5      	b.n	800b156 <_printf_i+0x226>
 800b16a:	bf00      	nop
 800b16c:	0800b87d 	.word	0x0800b87d
 800b170:	0800b88e 	.word	0x0800b88e

0800b174 <__sflush_r>:
 800b174:	898a      	ldrh	r2, [r1, #12]
 800b176:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800b17a:	4605      	mov	r5, r0
 800b17c:	0710      	lsls	r0, r2, #28
 800b17e:	460c      	mov	r4, r1
 800b180:	d458      	bmi.n	800b234 <__sflush_r+0xc0>
 800b182:	684b      	ldr	r3, [r1, #4]
 800b184:	2b00      	cmp	r3, #0
 800b186:	dc05      	bgt.n	800b194 <__sflush_r+0x20>
 800b188:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800b18a:	2b00      	cmp	r3, #0
 800b18c:	dc02      	bgt.n	800b194 <__sflush_r+0x20>
 800b18e:	2000      	movs	r0, #0
 800b190:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800b194:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800b196:	2e00      	cmp	r6, #0
 800b198:	d0f9      	beq.n	800b18e <__sflush_r+0x1a>
 800b19a:	2300      	movs	r3, #0
 800b19c:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800b1a0:	682f      	ldr	r7, [r5, #0]
 800b1a2:	6a21      	ldr	r1, [r4, #32]
 800b1a4:	602b      	str	r3, [r5, #0]
 800b1a6:	d032      	beq.n	800b20e <__sflush_r+0x9a>
 800b1a8:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800b1aa:	89a3      	ldrh	r3, [r4, #12]
 800b1ac:	075a      	lsls	r2, r3, #29
 800b1ae:	d505      	bpl.n	800b1bc <__sflush_r+0x48>
 800b1b0:	6863      	ldr	r3, [r4, #4]
 800b1b2:	1ac0      	subs	r0, r0, r3
 800b1b4:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800b1b6:	b10b      	cbz	r3, 800b1bc <__sflush_r+0x48>
 800b1b8:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800b1ba:	1ac0      	subs	r0, r0, r3
 800b1bc:	2300      	movs	r3, #0
 800b1be:	4602      	mov	r2, r0
 800b1c0:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800b1c2:	6a21      	ldr	r1, [r4, #32]
 800b1c4:	4628      	mov	r0, r5
 800b1c6:	47b0      	blx	r6
 800b1c8:	1c43      	adds	r3, r0, #1
 800b1ca:	89a3      	ldrh	r3, [r4, #12]
 800b1cc:	d106      	bne.n	800b1dc <__sflush_r+0x68>
 800b1ce:	6829      	ldr	r1, [r5, #0]
 800b1d0:	291d      	cmp	r1, #29
 800b1d2:	d82b      	bhi.n	800b22c <__sflush_r+0xb8>
 800b1d4:	4a29      	ldr	r2, [pc, #164]	; (800b27c <__sflush_r+0x108>)
 800b1d6:	410a      	asrs	r2, r1
 800b1d8:	07d6      	lsls	r6, r2, #31
 800b1da:	d427      	bmi.n	800b22c <__sflush_r+0xb8>
 800b1dc:	2200      	movs	r2, #0
 800b1de:	6062      	str	r2, [r4, #4]
 800b1e0:	04d9      	lsls	r1, r3, #19
 800b1e2:	6922      	ldr	r2, [r4, #16]
 800b1e4:	6022      	str	r2, [r4, #0]
 800b1e6:	d504      	bpl.n	800b1f2 <__sflush_r+0x7e>
 800b1e8:	1c42      	adds	r2, r0, #1
 800b1ea:	d101      	bne.n	800b1f0 <__sflush_r+0x7c>
 800b1ec:	682b      	ldr	r3, [r5, #0]
 800b1ee:	b903      	cbnz	r3, 800b1f2 <__sflush_r+0x7e>
 800b1f0:	6560      	str	r0, [r4, #84]	; 0x54
 800b1f2:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800b1f4:	602f      	str	r7, [r5, #0]
 800b1f6:	2900      	cmp	r1, #0
 800b1f8:	d0c9      	beq.n	800b18e <__sflush_r+0x1a>
 800b1fa:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800b1fe:	4299      	cmp	r1, r3
 800b200:	d002      	beq.n	800b208 <__sflush_r+0x94>
 800b202:	4628      	mov	r0, r5
 800b204:	f7ff fbea 	bl	800a9dc <_free_r>
 800b208:	2000      	movs	r0, #0
 800b20a:	6360      	str	r0, [r4, #52]	; 0x34
 800b20c:	e7c0      	b.n	800b190 <__sflush_r+0x1c>
 800b20e:	2301      	movs	r3, #1
 800b210:	4628      	mov	r0, r5
 800b212:	47b0      	blx	r6
 800b214:	1c41      	adds	r1, r0, #1
 800b216:	d1c8      	bne.n	800b1aa <__sflush_r+0x36>
 800b218:	682b      	ldr	r3, [r5, #0]
 800b21a:	2b00      	cmp	r3, #0
 800b21c:	d0c5      	beq.n	800b1aa <__sflush_r+0x36>
 800b21e:	2b1d      	cmp	r3, #29
 800b220:	d001      	beq.n	800b226 <__sflush_r+0xb2>
 800b222:	2b16      	cmp	r3, #22
 800b224:	d101      	bne.n	800b22a <__sflush_r+0xb6>
 800b226:	602f      	str	r7, [r5, #0]
 800b228:	e7b1      	b.n	800b18e <__sflush_r+0x1a>
 800b22a:	89a3      	ldrh	r3, [r4, #12]
 800b22c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800b230:	81a3      	strh	r3, [r4, #12]
 800b232:	e7ad      	b.n	800b190 <__sflush_r+0x1c>
 800b234:	690f      	ldr	r7, [r1, #16]
 800b236:	2f00      	cmp	r7, #0
 800b238:	d0a9      	beq.n	800b18e <__sflush_r+0x1a>
 800b23a:	0793      	lsls	r3, r2, #30
 800b23c:	680e      	ldr	r6, [r1, #0]
 800b23e:	bf08      	it	eq
 800b240:	694b      	ldreq	r3, [r1, #20]
 800b242:	600f      	str	r7, [r1, #0]
 800b244:	bf18      	it	ne
 800b246:	2300      	movne	r3, #0
 800b248:	eba6 0807 	sub.w	r8, r6, r7
 800b24c:	608b      	str	r3, [r1, #8]
 800b24e:	f1b8 0f00 	cmp.w	r8, #0
 800b252:	dd9c      	ble.n	800b18e <__sflush_r+0x1a>
 800b254:	6a21      	ldr	r1, [r4, #32]
 800b256:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 800b258:	4643      	mov	r3, r8
 800b25a:	463a      	mov	r2, r7
 800b25c:	4628      	mov	r0, r5
 800b25e:	47b0      	blx	r6
 800b260:	2800      	cmp	r0, #0
 800b262:	dc06      	bgt.n	800b272 <__sflush_r+0xfe>
 800b264:	89a3      	ldrh	r3, [r4, #12]
 800b266:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800b26a:	81a3      	strh	r3, [r4, #12]
 800b26c:	f04f 30ff 	mov.w	r0, #4294967295
 800b270:	e78e      	b.n	800b190 <__sflush_r+0x1c>
 800b272:	4407      	add	r7, r0
 800b274:	eba8 0800 	sub.w	r8, r8, r0
 800b278:	e7e9      	b.n	800b24e <__sflush_r+0xda>
 800b27a:	bf00      	nop
 800b27c:	dfbffffe 	.word	0xdfbffffe

0800b280 <_fflush_r>:
 800b280:	b538      	push	{r3, r4, r5, lr}
 800b282:	690b      	ldr	r3, [r1, #16]
 800b284:	4605      	mov	r5, r0
 800b286:	460c      	mov	r4, r1
 800b288:	b913      	cbnz	r3, 800b290 <_fflush_r+0x10>
 800b28a:	2500      	movs	r5, #0
 800b28c:	4628      	mov	r0, r5
 800b28e:	bd38      	pop	{r3, r4, r5, pc}
 800b290:	b118      	cbz	r0, 800b29a <_fflush_r+0x1a>
 800b292:	6a03      	ldr	r3, [r0, #32]
 800b294:	b90b      	cbnz	r3, 800b29a <_fflush_r+0x1a>
 800b296:	f7ff f9ab 	bl	800a5f0 <__sinit>
 800b29a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800b29e:	2b00      	cmp	r3, #0
 800b2a0:	d0f3      	beq.n	800b28a <_fflush_r+0xa>
 800b2a2:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800b2a4:	07d0      	lsls	r0, r2, #31
 800b2a6:	d404      	bmi.n	800b2b2 <_fflush_r+0x32>
 800b2a8:	0599      	lsls	r1, r3, #22
 800b2aa:	d402      	bmi.n	800b2b2 <_fflush_r+0x32>
 800b2ac:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800b2ae:	f7ff fb93 	bl	800a9d8 <__retarget_lock_acquire_recursive>
 800b2b2:	4628      	mov	r0, r5
 800b2b4:	4621      	mov	r1, r4
 800b2b6:	f7ff ff5d 	bl	800b174 <__sflush_r>
 800b2ba:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800b2bc:	07da      	lsls	r2, r3, #31
 800b2be:	4605      	mov	r5, r0
 800b2c0:	d4e4      	bmi.n	800b28c <_fflush_r+0xc>
 800b2c2:	89a3      	ldrh	r3, [r4, #12]
 800b2c4:	059b      	lsls	r3, r3, #22
 800b2c6:	d4e1      	bmi.n	800b28c <_fflush_r+0xc>
 800b2c8:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800b2ca:	f7ff fb86 	bl	800a9da <__retarget_lock_release_recursive>
 800b2ce:	e7dd      	b.n	800b28c <_fflush_r+0xc>

0800b2d0 <__swhatbuf_r>:
 800b2d0:	b570      	push	{r4, r5, r6, lr}
 800b2d2:	460c      	mov	r4, r1
 800b2d4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800b2d8:	2900      	cmp	r1, #0
 800b2da:	b096      	sub	sp, #88	; 0x58
 800b2dc:	4615      	mov	r5, r2
 800b2de:	461e      	mov	r6, r3
 800b2e0:	da0d      	bge.n	800b2fe <__swhatbuf_r+0x2e>
 800b2e2:	89a3      	ldrh	r3, [r4, #12]
 800b2e4:	f013 0f80 	tst.w	r3, #128	; 0x80
 800b2e8:	f04f 0100 	mov.w	r1, #0
 800b2ec:	bf0c      	ite	eq
 800b2ee:	f44f 6380 	moveq.w	r3, #1024	; 0x400
 800b2f2:	2340      	movne	r3, #64	; 0x40
 800b2f4:	2000      	movs	r0, #0
 800b2f6:	6031      	str	r1, [r6, #0]
 800b2f8:	602b      	str	r3, [r5, #0]
 800b2fa:	b016      	add	sp, #88	; 0x58
 800b2fc:	bd70      	pop	{r4, r5, r6, pc}
 800b2fe:	466a      	mov	r2, sp
 800b300:	f000 f848 	bl	800b394 <_fstat_r>
 800b304:	2800      	cmp	r0, #0
 800b306:	dbec      	blt.n	800b2e2 <__swhatbuf_r+0x12>
 800b308:	9901      	ldr	r1, [sp, #4]
 800b30a:	f401 4170 	and.w	r1, r1, #61440	; 0xf000
 800b30e:	f5a1 5300 	sub.w	r3, r1, #8192	; 0x2000
 800b312:	4259      	negs	r1, r3
 800b314:	4159      	adcs	r1, r3
 800b316:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800b31a:	e7eb      	b.n	800b2f4 <__swhatbuf_r+0x24>

0800b31c <__smakebuf_r>:
 800b31c:	898b      	ldrh	r3, [r1, #12]
 800b31e:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800b320:	079d      	lsls	r5, r3, #30
 800b322:	4606      	mov	r6, r0
 800b324:	460c      	mov	r4, r1
 800b326:	d507      	bpl.n	800b338 <__smakebuf_r+0x1c>
 800b328:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800b32c:	6023      	str	r3, [r4, #0]
 800b32e:	6123      	str	r3, [r4, #16]
 800b330:	2301      	movs	r3, #1
 800b332:	6163      	str	r3, [r4, #20]
 800b334:	b002      	add	sp, #8
 800b336:	bd70      	pop	{r4, r5, r6, pc}
 800b338:	ab01      	add	r3, sp, #4
 800b33a:	466a      	mov	r2, sp
 800b33c:	f7ff ffc8 	bl	800b2d0 <__swhatbuf_r>
 800b340:	9900      	ldr	r1, [sp, #0]
 800b342:	4605      	mov	r5, r0
 800b344:	4630      	mov	r0, r6
 800b346:	f7ff fbb5 	bl	800aab4 <_malloc_r>
 800b34a:	b948      	cbnz	r0, 800b360 <__smakebuf_r+0x44>
 800b34c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800b350:	059a      	lsls	r2, r3, #22
 800b352:	d4ef      	bmi.n	800b334 <__smakebuf_r+0x18>
 800b354:	f023 0303 	bic.w	r3, r3, #3
 800b358:	f043 0302 	orr.w	r3, r3, #2
 800b35c:	81a3      	strh	r3, [r4, #12]
 800b35e:	e7e3      	b.n	800b328 <__smakebuf_r+0xc>
 800b360:	89a3      	ldrh	r3, [r4, #12]
 800b362:	6020      	str	r0, [r4, #0]
 800b364:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800b368:	81a3      	strh	r3, [r4, #12]
 800b36a:	9b00      	ldr	r3, [sp, #0]
 800b36c:	6163      	str	r3, [r4, #20]
 800b36e:	9b01      	ldr	r3, [sp, #4]
 800b370:	6120      	str	r0, [r4, #16]
 800b372:	b15b      	cbz	r3, 800b38c <__smakebuf_r+0x70>
 800b374:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800b378:	4630      	mov	r0, r6
 800b37a:	f000 f81d 	bl	800b3b8 <_isatty_r>
 800b37e:	b128      	cbz	r0, 800b38c <__smakebuf_r+0x70>
 800b380:	89a3      	ldrh	r3, [r4, #12]
 800b382:	f023 0303 	bic.w	r3, r3, #3
 800b386:	f043 0301 	orr.w	r3, r3, #1
 800b38a:	81a3      	strh	r3, [r4, #12]
 800b38c:	89a3      	ldrh	r3, [r4, #12]
 800b38e:	431d      	orrs	r5, r3
 800b390:	81a5      	strh	r5, [r4, #12]
 800b392:	e7cf      	b.n	800b334 <__smakebuf_r+0x18>

0800b394 <_fstat_r>:
 800b394:	b538      	push	{r3, r4, r5, lr}
 800b396:	4d07      	ldr	r5, [pc, #28]	; (800b3b4 <_fstat_r+0x20>)
 800b398:	2300      	movs	r3, #0
 800b39a:	4604      	mov	r4, r0
 800b39c:	4608      	mov	r0, r1
 800b39e:	4611      	mov	r1, r2
 800b3a0:	602b      	str	r3, [r5, #0]
 800b3a2:	f7f6 f9f8 	bl	8001796 <_fstat>
 800b3a6:	1c43      	adds	r3, r0, #1
 800b3a8:	d102      	bne.n	800b3b0 <_fstat_r+0x1c>
 800b3aa:	682b      	ldr	r3, [r5, #0]
 800b3ac:	b103      	cbz	r3, 800b3b0 <_fstat_r+0x1c>
 800b3ae:	6023      	str	r3, [r4, #0]
 800b3b0:	bd38      	pop	{r3, r4, r5, pc}
 800b3b2:	bf00      	nop
 800b3b4:	20000800 	.word	0x20000800

0800b3b8 <_isatty_r>:
 800b3b8:	b538      	push	{r3, r4, r5, lr}
 800b3ba:	4d06      	ldr	r5, [pc, #24]	; (800b3d4 <_isatty_r+0x1c>)
 800b3bc:	2300      	movs	r3, #0
 800b3be:	4604      	mov	r4, r0
 800b3c0:	4608      	mov	r0, r1
 800b3c2:	602b      	str	r3, [r5, #0]
 800b3c4:	f7f6 f9f7 	bl	80017b6 <_isatty>
 800b3c8:	1c43      	adds	r3, r0, #1
 800b3ca:	d102      	bne.n	800b3d2 <_isatty_r+0x1a>
 800b3cc:	682b      	ldr	r3, [r5, #0]
 800b3ce:	b103      	cbz	r3, 800b3d2 <_isatty_r+0x1a>
 800b3d0:	6023      	str	r3, [r4, #0]
 800b3d2:	bd38      	pop	{r3, r4, r5, pc}
 800b3d4:	20000800 	.word	0x20000800

0800b3d8 <_sbrk_r>:
 800b3d8:	b538      	push	{r3, r4, r5, lr}
 800b3da:	4d06      	ldr	r5, [pc, #24]	; (800b3f4 <_sbrk_r+0x1c>)
 800b3dc:	2300      	movs	r3, #0
 800b3de:	4604      	mov	r4, r0
 800b3e0:	4608      	mov	r0, r1
 800b3e2:	602b      	str	r3, [r5, #0]
 800b3e4:	f7f6 fa00 	bl	80017e8 <_sbrk>
 800b3e8:	1c43      	adds	r3, r0, #1
 800b3ea:	d102      	bne.n	800b3f2 <_sbrk_r+0x1a>
 800b3ec:	682b      	ldr	r3, [r5, #0]
 800b3ee:	b103      	cbz	r3, 800b3f2 <_sbrk_r+0x1a>
 800b3f0:	6023      	str	r3, [r4, #0]
 800b3f2:	bd38      	pop	{r3, r4, r5, pc}
 800b3f4:	20000800 	.word	0x20000800

0800b3f8 <_init>:
 800b3f8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b3fa:	bf00      	nop
 800b3fc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800b3fe:	bc08      	pop	{r3}
 800b400:	469e      	mov	lr, r3
 800b402:	4770      	bx	lr

0800b404 <_fini>:
 800b404:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b406:	bf00      	nop
 800b408:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800b40a:	bc08      	pop	{r3}
 800b40c:	469e      	mov	lr, r3
 800b40e:	4770      	bx	lr
